 SPDX-License-Identifier: GPL-2.0-only

/*

 *    pata_it8213.c - iTE Tech. Inc.  IT8213 PATA driver

 *

 *    The IT8213 is a very Intel ICH like device for timing purposes, having

 *    a similar register layout and the same split clock arrangement. Cable

 *    detection is different, and it does not have slave channels or all the

 *    clutter of later ICH/SATA setups.

/**

 *	it8213_pre_reset	-	probe begin

 *	@link: link

 *	@deadline: deadline jiffies for the operation

 *

 *	Filter out ports by the enable bits before doing the normal reset

 *	and probe.

 port 0 */

/**

 *	it8213_cable_detect	-	check for 40/80 pin

 *	@ap: Port

 *

 *	Perform cable detection for the 8213 ATA interface. This is

 *	different to the PIIX arrangement

 The initial docs are incorrect */

/**

 *	it8213_set_piomode - Initialize host controller PATA PIO timings

 *	@ap: Port whose timings we are configuring

 *	@adev: Device whose timings we are configuring

 *

 *	Set PIO mode for device, in host controller PCI config space.

 *

 *	LOCKING:

 *	None (inherited from caller).

	/*

	 *	See Intel Document 298600-004 for the timing programing rules

	 *	for PIIX/ICH. The 8213 is a clone so very similar

 ISP  RTC */

 TIME */

 PIO 3/4 require IORDY */

 IE */

 Bit 2 is set for ATAPI on the IT8213 - reverse of ICH/PIIX */

 PPE */

 Set PPE, IE, and TIME as appropriate */

 Slave timing in separate register */

 Ensure SITRE is set */

/**

 *	it8213_set_dmamode - Initialize host controller PATA DMA timings

 *	@ap: Port whose timings we are configuring

 *	@adev: Device to program

 *

 *	Set UDMA/MWDMA mode for device, in host controller PCI config space.

 *	This device is basically an ICH alike.

 *

 *	LOCKING:

 *	None (inherited from caller).

 ISP  RTC */

 Clocks follow the PIIX style */

 100Mhz */

 66Mhz */

 33Mhz */

 Load the UDMA cycle time */

 Load the clock selection */

		/*

		 * MWDMA is driven by the PIO timings. We must also enable

		 * IORDY unconditionally along with TIME1. PPE has already

		 * been set when the PIO timing was set.

 IORDY|TIME1 */

		/* If the drive MWDMA is faster than it can do PIO then

 Enable DMA timing only */

 PIO cycles in PIO0 */

 Slave */

 Mask out IORDY|TIME1|DMAONLY */

 Load the matching timing */

 Master */

			master_data &= 0xCCF4;	/* Mask out IORDY|TIME1|DMAONLY

/**

 *	it8213_init_one - Register 8213 ATA PCI device with kernel services

 *	@pdev: PCI device to register

 *	@ent: Entry in it8213_pci_tbl matching with @pdev

 *

 *	Called from kernel PCI layer.

 *

 *	LOCKING:

 *	Inherited from PCI layer (may sleep).

 *

 *	RETURNS:

 *	Zero on success, or -ERRNO value.

 Current IT8213 stuff is single port */

 terminate list */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * DaVinci DA850 AHCI SATA platform driver

 SATA PHY Control Register offset from AHCI base */

 Enable SATA clock receiver */

	/*

	 * We need to determine the value of the multiplier (MPY) bits.

	 * In order to include the 12.5 multiplier we need to first divide

	 * the refclk rate by ten.

	 *

	 * __div64_32() turned out to be unreliable, sometimes returning

	 * false results.

	/*

	 * What we have now is (multiplier * 10).

	 *

	 * Let's determine the actual register value we need to write.

		/*

		 * We should have divided evenly - if not, return an invalid

		 * value.

	/*

	 * There's an issue with the SATA controller on da850 SoCs: if we

	 * enable Port Multiplier support, but the drive is connected directly

	 * to the board, it can't be detected. As a workaround: if PMP is

	 * enabled, we first call ahci_do_softreset() and pass it the result of

	 * sata_srst_pmp(). If this call fails, we retry with pmp = 0.

	/*

	 * In order to correctly service the LCD controller of the da850 SoC,

	 * we increased the PLL0 frequency to 456MHz from the default 300MHz.

	 *

	 * This made the SATA controller unstable and the hardreset operation

	 * does not always succeed the first time. Before really giving up to

	 * bring up the link, retry the reset a couple times.

	/*

	 * No need to override .pmp_softreset - it's only used for actual

	 * PMP-enabled ports.

	/*

	 * Internally ahci_platform_get_resources() calls clk_get(dev, NULL)

	 * when trying to obtain the functional clock. This SATA controller

	 * uses two clocks for which we specify two connection ids. If we don't

	 * have the functional clock at this point - call clk_get() again with

	 * con_id = "fck".

	/*

	 * The second clock used by ahci-da850 is the external REFCLK. If we

	 * didn't get it from ahci_platform_get_resources(), let's try to

	 * specify the con_id in clk_get().

/*

 * drivers/ata/pata_mpc52xx.c

 *

 * libata driver for the Freescale MPC52xx on-chip IDE interface

 *

 * Copyright (C) 2006 Sylvain Munaut <tnt@246tNt.com>

 * Copyright (C) 2003 Mipsys - Benjamin Herrenschmidt

 *

 * UDMA support based on patches by Freescale (Bernard Kuhn, John Rigby),

 * Domen Puncer and Tim Yamin.

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2. This program is licensed "as is" without any warranty of any

 * kind, whether express or implied.

 Private structures used by the driver */

 DMA */

 ATAPI-4 PIO specs (in ns) */

 ======================================================================== */

 ATAPI-4 MDMA specs (in clocks) */

 ATAPI-4 UDMA specs (in clocks) */

 ======================================================================== */

 Bit definitions inside the registers */

 State machine reset */

 FIFO Reset */

 Enable interrupt in PIO */

 Drive supports IORDY protocol */

 Transaction in progress */

 UDMA Read Extended Pause */

 Read Error */

 Write Error */

 FIFO Empty */

 FIFO Error */

 Write DMA */

 Read DMA */

 UDMA enabled */

 Enable drive interrupt to CPU in DMA mode */

 FIFO Flush enable in Rx mode */

 FIFO Reset */

 Host UDMA burst terminate */

 Structure of the hardware registers */

 Host interface registers */

 ATA + 0x00 Host configuration */

 ATA + 0x04 Host controller status */

 ATA + 0x08 PIO Timing 1 */

 ATA + 0x0c PIO Timing 2 */

 ATA + 0x10 MDMA Timing 1 */

 ATA + 0x14 MDMA Timing 2 */

 ATA + 0x18 UDMA Timing 1 */

 ATA + 0x1c UDMA Timing 2 */

 ATA + 0x20 UDMA Timing 3 */

 ATA + 0x24 UDMA Timing 4 */

 ATA + 0x28 UDMA Timing 5 */

 ATA + 0x2c ATA share counter */

 FIFO registers */

 ATA + 0x3c */

 ATA + 0x40 */

 ATA + 0x41 */

 ATA + 0x44 */

 ATA + 0x4a */

 ATA + 0x4e */

 ATA + 0x52 */

 ATA + 0x56 */

 ATA + 0x5a */

 Drive TaskFile registers */

 ATA + 0x5c TASKFILE Control/Alt Status */

 ATA + 0x60 TASKFILE Data */

 ATA + 0x64 TASKFILE Features/Error */

 ATA + 0x68 TASKFILE Sector Count */

 ATA + 0x6c TASKFILE Sector Number */

 ATA + 0x70 TASKFILE Cylinder Low */

 ATA + 0x74 TASKFILE Cylinder High */

 ATA + 0x78 TASKFILE Device/Head */

 ATA + 0x7c TASKFILE Command/Status */

 ATA + 0x7d ATA Host DMA Mode configuration */

 ======================================================================== */

 Aux fns                                                                  */

 ======================================================================== */

 MPC52xx low level hw control */

 Clear share_cnt (all sample code do this ...) */

 Configure and reset host */

 Set the time slot to 1us */

 Init timings to PIO0 */

 ======================================================================== */

 libata driver                                                            */

 ======================================================================== */

 Check FIFO is OK... */

 Setup FIFO if direction changed */

 Configure FIFO with granularity to 7 */

 Set FIFO Reset bit (FR) */

 Setup FIFO if direction changed */

 Configure FIFO with granularity to 4 */

 Check FIFO is OK... */

 Check FIFO is OK... */

 Don't have a classic reg block */

 activate host */

 ======================================================================== */

 OF Platform driver                                                       */

 ======================================================================== */

 Get ipb frequency */

	/* Get device base address from device tree, request the region

	/*

	 * By default, all DMA modes are disabled for the MPC5200.  Some

	 * boards don't have the required signals routed to make DMA work.

	 * Also, the MPC5200B has a silicon bug that causes data corruption

	 * with UDMA if it is used at the same time as the LocalPlus bus.

	 *

	 * Instead of trying to guess what modes are usable, check the

	 * ATA device tree node to find out what DMA modes work on the board.

	 * UDMA/MWDMA modes can also be forced by adding "libata.force=<mode>"

	 * to the kernel boot parameters.

	 *

	 * The MPC5200 ATA controller supports MWDMA modes 0, 1 and 2 and

	 * UDMA modes 0, 1 and 2.

 Prepare our private structure */

 Allocate a BestComm task for DMA */

 Init the hw */

 Register ourselves to libata */

 Deregister the ATA interface */

 Clean up DMA */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * pata-cs5530.c 	- CS5530 PATA for new ATA layer

 *			  (C) 2005 Red Hat Inc

 *

 * based upon cs5530.c by Mark Lord.

 *

 * Loosely based on the piix & svwks drivers.

 *

 * Documentation:

 *	Available from AMD web site.

/**

 *	cs5530_set_piomode		-	PIO setup

 *	@ap: ATA interface

 *	@adev: device on the interface

 *

 *	Set our PIO requirements. This is fairly simple on the CS5530

 *	chips.

 Find out which table to use */

 Now load the right timing register */

/**

 *	cs5530_set_dmamode		-	DMA timing setup

 *	@ap: ATA interface

 *	@adev: Device being configured

 *

 *	We cannot mix MWDMA and UDMA without reloading timings each switch

 *	master to slave. We track the last DMA setup in order to minimise

 *	reloads.

 Find out which table to use */

 Merge in the PIO format bit */

 Master */

 UDMA for both */

 MWDMA for both */

 Set the DMA capable bit in the BMDMA area */

 Remember the last DMA setup we did */

/**

 *	cs5530_qc_issue		-	command issue

 *	@qc: command pending

 *

 *	Called when the libata layer is about to issue a command. We wrap

 *	this interface so that we can load the correct ATA timings if

 *	necessary.  Specifically we have a problem that there is only

 *	one MWDMA/UDMA bit.

 See if the DMA settings could be wrong */

 Maybe, but do the channels match MWDMA/UDMA ? */

 Switch the mode bits */

/**

 *	cs5530_init_chip	-	Chipset init

 *

 *	Perform the chip initialisation work that is shared between both

 *	setup and resume paths

	/*

	 * Set PCI CacheLineSize to 16-bytes:

	 * --> Write 0x04 into 8-bit PCI CACHELINESIZE reg of function 0 of the cs5530

	 *

	 * Note: This value is constant because the 5530 is only a Geode companion

	/*

	 * Disable trapping of UDMA register accesses (Win98 hack):

	 * --> Write 0x5006 into 16-bit reg at offset 0xd0 of function 0 of the cs5530

	/*

	 * Bit-1 at 0x40 enables MemoryWriteAndInvalidate on internal X-bus:

	 * The other settings are what is necessary to get the register

	 * into a sane state for IDE DMA operation.

	/*

	 * Set max PCI burst size (16-bytes seems to work best):

	 *	   16bytes: set bit-1 at 0x41 (reg value of 0x16)

	 *	all others: clear bit-1 at 0x41, and do:

	 *	  128bytes: OR 0x00 at 0x41

	 *	  256bytes: OR 0x04 at 0x41

	 *	  512bytes: OR 0x08 at 0x41

	 *	 1024bytes: OR 0x0c at 0x41

	/*

	 * These settings are necessary to get the chip

	 * into a sane state for IDE DMA operation.

/**

 *	cs5530_init_one		-	Initialise a CS5530

 *	@pdev: PCI device

 *	@id: Entry in match table

 *

 *	Install a driver for the newly found CS5530 companion chip. Most of

 *	this is just housekeeping. We have to set the chip up correctly and

 *	turn off various bits of emulation magic.

 The docking connector doesn't do UDMA, and it seems not MWDMA */

 Chip initialisation */

 Now kick off ATA set up */

 If we fail on resume we are doomed */

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * sata_inic162x.c - Driver for Initio 162x SATA controllers

 *

 * Copyright 2006  SUSE Linux Products GmbH

 * Copyright 2006  Tejun Heo <teheo@novell.com>

 *

 * **** WARNING ****

 *

 * This driver never worked properly and unfortunately data corruption is

 * relatively common.  There isn't anyone working on the driver and there's

 * no support from the vendor.  Do not use this driver in any production

 * environment.

 *

 * http://thread.gmane.org/gmane.linux.debian.devel.bugs.rc/378525/focus=54491

 * https://bugzilla.kernel.org/show_bug.cgi?id=60565

 *

 * *****************

 *

 * This controller is eccentric and easily locks up if something isn't

 * right.  Documentation is available at initio's website but it only

 * documents registers (not programming model).

 *

 * This driver has interesting history.  The first version was written

 * from the documentation and a 2.4 IDE driver posted on a Taiwan

 * company, which didn't use any IDMA features and couldn't handle

 * LBA48.  The resulting driver couldn't handle LBA48 devices either

 * making it pretty useless.

 *

 * After a while, initio picked the driver up, renamed it to

 * sata_initio162x, updated it to use IDMA for ATA DMA commands and

 * posted it on their website.  It only used ATA_PROT_DMA for IDMA and

 * attaching both devices and issuing IDMA and !IDMA commands

 * simultaneously broke it due to PIRQ masking interaction but it did

 * show how to use the IDMA (ADMA + some initio specific twists)

 * engine.

 *

 * Then, I picked up their changes again and here's the usable driver

 * which uses IDMA for everything.  Everything works now including

 * LBA48, CD/DVD burning, suspend/resume and hotplug.  There are some

 * issues tho.  Result Tf is not resported properly, NCQ isn't

 * supported yet and CD/DVD writing works with DMA assisted PIO

 * protocol (which, for native SATA devices, shouldn't cause any

 * noticeable difference).

 *

 * Anyways, so, here's finally a working driver for inic162x.  Enjoy!

 *

 * initio: If you guys wanna improve the driver regarding result TF

 * access and other stuff, please feel free to contact me.  I'll be

 * happy to assist.

 registers for ATA TF operation */

 IDMA register */

 HOST_CTL bits */

 enable LED operation */

 global IRQ off */

 fifo threshold 0 */

 fifo threshold 1*/

 power down PHYs */

 global reset (no phy reset) */

 register page select */

 HOST_IRQ_(STAT|MASK) bits */

 STAT only */

 PORT_IRQ_(STAT|MASK) bits */

 device unplugged */

 device plugged */

 completion interrupt */

 fatal error */

 ATA interrupt */

 reply FIFO not empty */

 port IRQ pending (STAT only) */

 PORT_PRD_CTL bits */

 DMA enable */

 PORT_IDMA_CTL bits */

 hardreset ATA bus */

 reset IDMA machinery */

 IDMA mode go */

 ATA IRQ disable */

 PORT_IDMA_STAT bits */

 PCI ERROR MODE */

 ADMA CPB error */

 ADMA legacy */

 ADMA unsolicited irq */

 ADMA stopped */

 ADMA pause */

 ADMA done */

 CPB Control Flags*/

 CPB valid */

 queued command */

 data, rsvd in datasheet */

 PCI interrupt enable */

 device direction control */

 CPB Response Flags */

 ATA command complete */

 ATA release */

 CPB ignored */

 ATA command error */

 ATA spurious interrupt error */

 APRD deficiency length error */

 APRD exccess length error */

 CPB error flag */

 PRD Control Flags */

 ignore data excess */

 atapi packet command pointer */

 direct interrupt */

 data transfer method */

 data dir, rsvd in datasheet */

 io/memory transfer */

 APRD chain end */

 Comman Parameter Block */

 Response Flags */

 ATA Error */

 ATA Status */

 Control Flags */

 Total Transfer Length */

 First PRD pointer */

 16 bytes */

 ATA Feature */

 ATA Ex. Feature */

 ATA Device/Head */

 Mirror Control */

 ATA Sector Count */

 ATA Ex. Sector Count */

 ATA Sector Number */

 ATA Ex. Sector Number */

 ATA Cylinder Low */

 ATA Ex. Cylinder Low */

 ATA Cylinder High */

 ATA Ex. Cylinder High */

 ATA Command */

 ATA Control */

 Slave ATA Error */

 Slave ATA Status */

 32 bytes */

 Physical Region Descriptor */

 Physical Memory Address */

 Transfer Length */

 Control Flags */

 + 1 for cdb */

 maybe it can be larger? */

	/*

	 * This controller is braindamaged.  dma_boundary is 0xffff like others

	 * but it will lock up the whole machine HARD if 65536 byte PRD entry

	 * is fed.  Reduce maximum segment size.

 stop IDMA engine */

 flush */

 mask IRQ and assert reset */

 flush */

 release reset */

 clear irq */

 this controller has stuck DIAG.N, ignore it */

 read and clear IRQ status */

		/* Depending on circumstances, device error

		 * isn't reported by IDMA, check it explicitly.

	/* For some reason ATAPI_PROT_DMA doesn't work for some

	 * commands including writes and other misc ops.  Use PIO

	 * protocol instead, which BTW is driven by the DMA engine

	 * anyway, so it shouldn't make much difference for native

	 * SATA devices.

 prepare packet, based on initio driver */

 don't load ctl - dunno why.  it's like that in the initio driver */

 setup PRD for CDB */

 setup sg table */

 fire up the ADMA engine */

	/* FIXME: Except for status and error, result TF access

	 * doesn't work.  I tried reading from BAR0/2, CPB and BAR5.

	 * None works regardless of which command interface is used.

	 * For now return true iff status indicates device error.

	 * This means that we're reporting bogus sector for RW

	 * failures.  Eeekk....

/*

 * SRST and SControl hardreset don't give valid signature on this

 * controller.  Only controller specific hardreset mechanism works.

 hammer it into sane state */

 flush */

 wait for link to become ready */

 link occupied, -ENODEV too is an error */

 make DMA engine forget about the failed command */

 clear packet and CPB table */

 setup CPB lookup table addresses */

 alloc and initialize private data */

 Alloc resources */

	/* Soft reset whole controller.  Spec says reset duration is 3

	 * PCI clocks, be generous and give it 10ms.

 flush */

 mask all interrupts and reset ports */

 port IRQ is masked now, unmask global IRQ */

 alloc host */

	/* Acquire resources and fill host.  Note that PCI and cardbus

	 * use different BARs.

 Set dma_mask.  This devices doesn't support 64bit addressing. */

/*

 *	pata_hpt3x3		-	HPT3x3 driver

 *	(c) Copyright 2005-2006 Red Hat

 *

 *	Was pata_hpt34x but the naming was confusing as it supported the

 *	343 and 363 so it has been renamed.

 *

 *	Based on:

 *	linux/drivers/ide/pci/hpt34x.c		Version 0.40	Sept 10, 2002

 *	Copyright (C) 1998-2000	Andre Hedrick <andre@linux-ide.org>

 *

 *	May be copied or modified under the terms of the GNU General Public

 *	License

/**

 *	hpt3x3_set_piomode		-	PIO setup

 *	@ap: ATA interface

 *	@adev: device on the interface

 *

 *	Set our PIO requirements. This is fairly simple on the HPT3x3 as

 *	all we have to do is clear the MWDMA and UDMA bits then load the

 *	mode number.

 Load the PIO timing number */

 Clear MWDMA and UDMA bits */

/**

 *	hpt3x3_set_dmamode		-	DMA timing setup

 *	@ap: ATA interface

 *	@adev: Device being configured

 *

 *	Set up the channel for MWDMA or UDMA modes. Much the same as with

 *	PIO, load the mode number and then set MWDMA or UDMA flag.

 *

 *	0x44 : bit 0-2 master mode, 3-5 slave mode, etc

 *	0x48 : bit 4/0 DMA/UDMA bit 5/1 for slave etc

 Load the timing number */

 Clear MWDMA and UDMA bits */

 Ultra mode */

 MWDMA */

/**

 *	hpt3x3_freeze		-	DMA workaround

 *	@ap: port to freeze

 *

 *	When freezing an HPT3x3 we must stop any pending DMA before

 *	writing to the control register or the chip will hang

/**

 *	hpt3x3_bmdma_setup	-	DMA workaround

 *	@qc: Queued command

 *

 *	When issuing BMDMA we must clean up the error/active bits in

 *	software on this device

/**

 *	hpt3x3_atapi_dma	-	ATAPI DMA check

 *	@qc: Queued command

 *

 *	Just say no - we don't do ATAPI DMA

 CONFIG_PATA_HPT3X3_DMA */

/**

 *	hpt3x3_init_chipset	-	chip setup

 *	@dev: PCI device

 *

 *	Perform the setup required at boot and on resume.

 Initialize the board */

 Check if it is a 343 or a 363. 363 has COMMAND_MEMORY set */

/**

 *	hpt3x3_init_one		-	Initialise an HPT343/363

 *	@pdev: PCI device

 *	@id: Entry in match table

 *

 *	Perform basic initialisation. We set the device up so we access all

 *	ports via BAR4. This is necessary to work around errata.

 Further debug needed */

 Register offsets of taskfiles in BAR4 area */

 acquire resources and fill host */

 Everything is relative to BAR4 if we set up this way */

 Bus mastering base */

/*

 * pata_sil680.c 	- SIL680 PATA for new ATA layer

 *			  (C) 2005 Red Hat Inc

 *

 * based upon

 *

 * linux/drivers/ide/pci/siimage.c		Version 1.07	Nov 30, 2003

 *

 * Copyright (C) 2001-2002	Andre Hedrick <andre@linux-ide.org>

 * Copyright (C) 2003		Red Hat <alan@redhat.com>

 *

 *  May be copied or modified under the terms of the GNU General Public License

 *

 *  Documentation publicly available.

 *

 *	If you have strange problems with nVidia chipset systems please

 *	see the SI support documentation and update your system BIOS

 *	if necessary

 *

 * TODO

 *	If we know all our devices are LBA28 (or LBA28 sized)  we could use

 *	the command fifo mode.

/**

 *	sil680_selreg		-	return register base

 *	@ap: ATA interface

 *	@r: config offset

 *

 *	Turn a config register offset into the right address in PCI space

 *	to access the control register in question.

 *

 *	Thankfully this is a configuration operation so isn't performance

 *	criticial.

/**

 *	sil680_seldev		-	return register base

 *	@ap: ATA interface

 *	@adev: ATA device

 *	@r: config offset

 *

 *	Turn a config register offset into the right address in PCI space

 *	to access the control register in question including accounting for

 *	the unit shift.

/**

 *	sil680_cable_detect	-	cable detection

 *	@ap: ATA port

 *

 *	Perform cable detection. The SIL680 stores this in PCI config

 *	space for us.

/**

 *	sil680_set_piomode	-	set PIO mode data

 *	@ap: ATA interface

 *	@adev: ATA device

 *

 *	Program the SIL680 registers for PIO mode. Note that the task speed

 *	registers are shared between the devices so we must pick the lowest

 *	mode for command work.

 Clear IORDY */

 Clear IORDY and DMA bits */

 Enable IORDY */

/**

 *	sil680_set_dmamode	-	set DMA mode data

 *	@ap: ATA interface

 *	@adev: ATA device

 *

 *	Program the MWDMA/UDMA modes for the sil680 chipset.

 *

 *	The MWDMA mode values are pulled from a lookup table

 *	while the chipset uses mode number for UDMA.

 100MHz */

 133Mhz */

 Mask timing bits */

 Extract scsc */

/**

 *	sil680_sff_exec_command - issue ATA command to host controller

 *	@ap: port to which command is being issued

 *	@tf: ATA taskfile register set

 *

 *	Issues ATA command, with proper synchronization with interrupt

 *	handler / other threads. Use our MMIO space for PCI posting to avoid

 *	a hideously slow cycle all the way to the device.

 *

 *	LOCKING:

 *	spin_lock_irqsave(host lock)

/**

 *	sil680_init_chip		-	chip setup

 *	@pdev: PCI device

 *	@try_mmio: Indicates to caller whether MMIO should be attempted

 *

 *	Perform all the chip setup which must be done both when the device

 *	is powered up on boot and when we resume in case we resumed from RAM.

 *	Returns the final clock settings.

 FIXME: double check */

 133 clock attempt to force it on */

 if clocking is disabled */

 133 clock attempt to force it on */

 133 already */

 BIOS set PCI x2 clocking */

 This last case is _NOT_ ok */

	/* Try to acquire MMIO resources and fallback to PIO if

	 * that fails

 Allocate host and set it up */

 Setup DMA masks */

 Get MMIO base and initialize port addresses */

 Register & activate */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Libata driver for the highpoint 366 and 368 UDMA66 ATA controllers.

 *

 * This driver is heavily based upon:

 *

 * linux/drivers/ide/pci/hpt366.c		Version 0.36	April 25, 2003

 *

 * Copyright (C) 1999-2003		Andre Hedrick <andre@linux-ide.org>

 * Portions Copyright (C) 2001	        Sun Microsystems, Inc.

 * Portions Copyright (C) 2003		Red Hat Inc

 *

 *

 * TODO

 *	Look into engine reset on timeout errors. Should not be required.

/* key for bus clock timings

 * bit

 * 0:3    data_high_time. Inactive time of DIOW_/DIOR_ for PIO and MW DMA.

 *        cycles = value + 1

 * 4:7    data_low_time. Active time of DIOW_/DIOR_ for PIO and MW DMA.

 *        cycles = value + 1

 * 8:11   cmd_high_time. Inactive time of DIOW_/DIOR_ during task file

 *        register access.

 * 12:15  cmd_low_time. Active time of DIOW_/DIOR_ during task file

 *        register access.

 * 16:18  udma_cycle_time. Clock cycles for UDMA xfer?

 * 19:21  pre_high_time. Time to initialize 1st cycle for PIO and MW DMA xfer.

 * 22:24  cmd_pre_high_time. Time to initialize 1st PIO cycle for task file

 *        register access.

 * 28     UDMA enable.

 * 29     DMA  enable.

 * 30     PIO_MST enable. If set, the chip is in bus master mode during

 *        PIO xfer.

 * 31     FIFO enable.

 0xa0c8a733 */

 0xc0d0a793 */

 0xc0d0a7a7 */

/**

 *	hpt36x_find_mode	-	find the hpt36x timing

 *	@ap: ATA port

 *	@speed: transfer mode

 *

 *	Return the 32bit register programming information for this channel

 *	that matches the speed provided.

 silence compiler warning */

/**

 *	hpt366_filter	-	mode selection filter

 *	@adev: ATA device

 *	@mask: Current mask to manipulate and pass back

 *

 *	Block UDMA on devices that cause trouble with this controller.

	/*

	 * Each channel of pata_hpt366 occupies separate PCI function

	 * as the primary channel and bit1 indicates the cable type.

 determine timing mask and find matching clock entry */

	/*

	 * Combine new mode bits with old config bits and disable

	 * on-chip PIO FIFO/buffer (and PIO MST mode as well) to avoid

	 * problems handling I/O errors later.

/**

 *	hpt366_set_piomode		-	PIO setup

 *	@ap: ATA interface

 *	@adev: device on the interface

 *

 *	Perform PIO mode setup.

/**

 *	hpt366_set_dmamode		-	DMA timing setup

 *	@ap: ATA interface

 *	@adev: Device being configured

 *

 *	Set up the channel for MWDMA or UDMA modes. Much the same as with

 *	PIO, load the mode number and then set MWDMA or UDMA flag.

/*

 *	Configuration for HPT366/68

/**

 *	hpt36x_init_chipset	-	common chip setup

 *	@dev: PCI device

 *

 *	Perform the chip setup work that must be done at both init and

 *	resume time

/**

 *	hpt36x_init_one		-	Initialise an HPT366/368

 *	@dev: PCI device

 *	@id: Entry in match table

 *

 *	Initialise an HPT36x device. There are some interesting complications

 *	here. Firstly the chip may report 366 and be one of several variants.

 *	Secondly all the timings depend on the clock for the chip which we must

 *	detect and look up

 *

 *	This is the known chip mappings. It may be missing a couple of later

 *	releases.

 *

 *	Chip version		PCI		Rev	Notes

 *	HPT366			4 (HPT366)	0	UDMA66

 *	HPT366			4 (HPT366)	1	UDMA66

 *	HPT368			4 (HPT366)	2	UDMA66

 *	HPT37x/30x		4 (HPT366)	3+	Other driver

 *

 May be a later chip in disguise. Check */

 Newer chips are not in the HPT36x driver. Ignore them */

 PCI clocking determines the ATA timing values to use */

 info_hpt366 is safe against re-entry so we can scribble on it */

 Now kick off ATA set up */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  sata_sil.c - Silicon Image SATA

 *

 *  Maintained by:  Tejun Heo <tj@kernel.org>

 *  		    Please ALWAYS copy linux-ide@vger.kernel.org

 *		    on emails.

 *

 *  Copyright 2003-2005 Red Hat, Inc.

 *  Copyright 2003 Benjamin Herrenschmidt

 *

 *  libata documentation is available via 'make {ps|pdf}docs',

 *  as Documentation/driver-api/libata.rst

 *

 *  Documentation for SiI 3112:

 *  http://gkernel.sourceforge.net/specs/sii/3112A_SiI-DS-0095-B2.pdf.bz2

 *

 *  Other errata and documentation available under NDA.

	/*

	 * host flags

	/*

	 * Controller IDs

	/*

	 * Register offsets

	/*

	 * Register bits

 SYSCFG */

 BMDMA/BMDMA2 */

 DMA run switch */

 DMA Rd-Wr */

 OR of all SATA IRQs */

 DMA running */

 PCI bus error */

 cmd complete / IRQ pending */

 SATA_IRQ for the next channel */

 ACTIVE for the next channel */

 ERROR for the next channel */

 COMPLETE for the next channel */

 SIEN */

 triggered by SError.N */

	/*

	 * Others

 terminate list */

 TODO firmware versions should be added - eric */

	/** These controllers support Large Block Transfer which allows

	    transfer chunks up to 2GB and which cross 64KB boundaries,

 sil_3112 */

 sil_3112_no_sata_irq */

 sil_3512 */

 sil_3114 */

 per-port register offsets */

 TODO: we can probably calculate rather than use a table */

 ATA taskfile register block */

 ATA control/altstatus register block */

 DMA register block */

 DMA register block #2 */

 FIFO Valid Byte Count and Control */

 SATA control register block */

 SATA Interrupt Enable register */

 data transfer mode register */

 SATA FIS reception config register */

 port 0 ... */

   tf    ctl  bmdma  bmdma2  fifo    scr   sien   mode   sfis */

 ... port 3 */

 clear start/stop bit - can safely always write 0 */

 one-PIO-cycle guaranteed wait, per spec, for HDMA1:0 transition */

 load PRD table addr. */

 issue r/w command */

	/* set transfer direction, start host DMA transaction

	   Note: For Large Block Transfer to work, the DMA must be started

 The way God intended PCI IDE scatter/gather lists to look and behave... */

		/* Note h/w doesn't support 64-bit, so we unconditionally

		 * truncate dma_addr_t to u32.

/**

 *	sil_set_mode		-	wrap set_mode functions

 *	@link: link to set up

 *	@r_failed: returned device when we fail

 *

 *	Wrap the libata method for device setup as after the setup we need

 *	to inspect the results and do some configuration work

 PIO0/1/2 */

 PIO3/4 */

 UDMA */

 value 2 indicates MDMA */

 flush */

 do nothing */

		/* SIEN doesn't mask SATA IRQs on some 3112s.  Those

		 * controllers continue to assert IRQ as long as

		 * SError bits are pending.  Clear SError immediately.

		/* Sometimes spurious interrupts occur, double check

		 * it's PHYRDY CHG.

 this sometimes happens, just clear IRQ */

 Check whether we are expecting interrupt in this state */

		/* Some pre-ATAPI-4 devices assert INTRQ

		 * at this state when ready to receive CDB.

		/* Check the ATA_DFLAG_CDB_INTR flag is enough here.

		 * The flag was turned on only for atapi devices.  No

		 * need to check ata_is_atapi(qc->tf.protocol) again.

 clear DMA-Start bit */

 check main status, clearing INTRQ */

 ack bmdma irq events */

 kick HSM in the ass */

 turn off SATA_IRQ if not supported */

 global IRQ mask doesn't block SATA IRQ, turn off explicitly */

 plug IRQ */

 flush */

	/* Ensure DMA_ENABLE is off.

	 *

	 * This is because the controller will not give us access to the

	 * taskfile registers while a DMA is in progress

	/* According to ata_bmdma_stop, an HDMA transition requires

	 * on PIO cycle. But we can't read a taskfile register.

 clear IRQ */

 turn on SATA IRQ if supported */

 turn on IRQ */

/**

 *	sil_dev_config - Apply device/host-specific errata fixups

 *	@dev: Device to be examined

 *

 *	After the IDENTIFY [PACKET] DEVICE step is complete, and a

 *	device is known to be present, this function is called.

 *	We apply two errata fixups which are specific to Silicon Image,

 *	a Seagate and a Maxtor fixup.

 *

 *	For certain Seagate devices, we must limit the maximum sectors

 *	to under 8K.

 *

 *	For certain Maxtor devices, we must not program the drive

 *	beyond udma5.

 *

 *	Both fixups are unfairly pessimistic.  As soon as I get more

 *	information on these errata, I will create a more exhaustive

 *	list, and apply the fixups to only the specific

 *	devices/hosts/firmwares that need it.

 *

 *	20040111 - Seagate drives affected by the Mod15Write bug are blacklisted

 *	The Maxtor quirk is in the blacklist, but I'm keeping the original

 *	pessimistic fix for the following reasons...

 *	- There seems to be less info on it, only one device gleaned off the

 *	Windows	driver, maybe only one is affected.  More info would be greatly

 *	appreciated.

 *	- But then again UDMA5 is hardly anything to complain about

 This controller doesn't support trim */

 limit requests to 15 sectors */

 limit to udma5 */

 Initialize FIFO PCI bus arbitration */

 cls = (line_size/8)+1 */

 Apply R_ERR on DMA activate FIS errata workaround */

 flip the magic "make 4 ports work" bit */

 PCI slot number of the controller */

 terminate list */

 apply the quirk only to on-board controllers */

 allocate host */

 acquire resources and fill host */

 initialize and activate */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Broadcom SATA3 AHCI Controller Driver

 *

 * Copyright © 2009-2015 Broadcom Corporation

 CPU->AHCI */

 AHCI->DDR */

 AHCI->DDR */

 On big-endian MIPS, buses are reversed to big endian, so switch them back */

 AHCI->DDR inbound accesses */

 CPU->AHCI outbound accesses */

	/*

	 * MIPS endianness is configured by boot strap, which also reverses all

	 * bus endianness (i.e., big-endian CPU + big endian bus ==> native

	 * endian I/O).

	 *

	 * Other architectures (e.g., ARM) either do not support big endian, or

	 * else leave I/O in little endian mode.

 See brcm_sata_readreg() comments */

 Enable support for ALPM */

	/*

	 * Adjust timeout to allow PLL sufficient time to lock while waking

	 * up from slumber mode.

 clear PHY_DEFAULT_POWER_STATE */

 reset the PHY digital logic */

 power-off the PHY digital logic */

 set PHY_DEFAULT_POWER_STATE */

 Configure endianness */

	/* Try to read the device ID and, if this fails, proceed with the

	 * recovery sequence below

 Disable host interrupts */

 flush */

 Perform the SATA PHY reset sequence */

 Reset the SATA clock */

 Bring the PHY back on */

 Re-initialize and calibrate the PHY */

 Re-enable host interrupts */

 flush */

 Make sure clocks are turned on before re-configuration */

	/* Since we had to enable clocks earlier on, we cannot use

	 * ahci_platform_resume() as-is since a second call to

	 * ahci_platform_enable_resources() would bump up the resources

	 * (regulators, clocks, PHYs) count artificially so we copy the part

	 * after ahci_platform_enable_resources().

 We resumed so update PM runtime state */

	/* Must be first so as to configure endianness including that

	 * of the standard AHCI register space.

 Initializes priv->port_mask which is used below */

 Must be done before ahci_platform_enable_phys() */

	/* All resources releasing happens via devres, but our device, unlike a

	 * proper remove is not disappearing, therefore using

	 * brcm_ahci_suspend() here which does explicit power management is

	 * appropriate.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * DaVinci DM816 AHCI SATA platform driver

 *

 * Copyright (C) 2017 BayLibre SAS

	/*

	 * We need to determine the value of the multiplier (MPY) bits.

	 * In order to include the 8.25 multiplier we need to first divide

	 * the refclk rate by 100.

	/*

	 * We should have divided evenly - if not, return an invalid

	 * value.

	/*

	 * We should have been supplied two clocks: the functional and

	 * keep-alive clock and the external reference clock. We need the

	 * rate of the latter to calculate the correct value of MPY bits.

 Enable the PHY and configure the first HBA port. */

 Configure the second HBA port. */

	/*

	 * There's an issue with the SATA controller on DM816 SoC: if we

	 * enable Port Multiplier support, but the drive is connected directly

	 * to the board, it can't be detected. As a workaround: if PMP is

	 * enabled, we first call ahci_do_softreset() and pass it the result of

	 * sata_srst_pmp(). If this call fails, we retry with pmp = 0.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *    pata_jmicron.c - JMicron ATA driver for non AHCI mode. This drives the

 *			PATA port of the controller. The SATA ports are

 *			driven by AHCI in the usual configuration although

 *			this driver can handle other setups if we need it.

 *

 *	(c) 2006 Red Hat

/**

 *	jmicron_pre_reset	-	check for 40/80 pin

 *	@link: ATA link

 *	@deadline: deadline jiffies for the operation

 *

 *	Perform the PATA port setup we need.

 *

 *	On the Jmicron 361/363 there is a single PATA port that can be mapped

 *	either as primary or secondary (or neither). We don't do any policy

 *	and setup here. We assume that has been done by init_one and the

 *	BIOS.

 Check if our port is enabled */

	/* There are two basic mappings. One has the two SATA ports merged

	   as master/slave and the secondary as PATA, the other has only the

	/* The 365/366 may have this bit set to map the second PATA port

 The two ports may then be logically swapped by the firmware */

	/*

	 *	Now we know which physical port we are talking about we can

	 *	actually do our cable checking etc. Thankfully we don't need

	 *	to do the plumbing for other cases.

 40/80 pin primary */

 Bit 21 is set if the port is enabled */

 40/80 pin secondary */

 No PIO or DMA methods needed for this device */

/**

 *	jmicron_init_one - Register Jmicron ATA PCI device with kernel services

 *	@pdev: PCI device to register

 *	@id: PCI device ID

 *

 *	Called from kernel PCI layer.

 *

 *	LOCKING:

 *	Inherited from PCI layer (may sleep).

 *

 *	RETURNS:

 *	Zero on success, or -ERRNO value.

 terminate list */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * pata_via.c 	- VIA PATA for new ATA layer

 *			  (C) 2005-2006 Red Hat Inc

 *

 *  Documentation

 *	Most chipset documentation available under NDA only

 *

 *  VIA version guide

 *	VIA VT82C561	-	early design, uses ata_generic currently

 *	VIA VT82C576	-	MWDMA, 33Mhz

 *	VIA VT82C586	-	MWDMA, 33Mhz

 *	VIA VT82C586a	-	Added UDMA to 33Mhz

 *	VIA VT82C586b	-	UDMA33

 *	VIA VT82C596a	-	Nonfunctional UDMA66

 *	VIA VT82C596b	-	Working UDMA66

 *	VIA VT82C686	-	Nonfunctional UDMA66

 *	VIA VT82C686a	-	Working UDMA66

 *	VIA VT82C686b	-	Updated to UDMA100

 *	VIA VT8231	-	UDMA100

 *	VIA VT8233	-	UDMA100

 *	VIA VT8233a	-	UDMA133

 *	VIA VT8233c	-	UDMA100

 *	VIA VT8235	-	UDMA133

 *	VIA VT8237	-	UDMA133

 *	VIA VT8237A	-	UDMA133

 *	VIA VT8237S	-	UDMA133

 *	VIA VT8251	-	UDMA133

 *

 *	Most registers remain compatible across chips. Others start reserved

 *	and acquire sensible semantics if set to 1 (eg cable detect). A few

 *	exceptions exist, notably around the FIFO settings.

 *

 *	One additional quirk of the VIA design is that like ALi they use few

 *	PCI IDs for a lot of chips.

 *

 *	Based heavily on:

 *

 * Version 3.38

 *

 * VIA IDE driver for Linux. Supported southbridges:

 *

 *   vt82c576, vt82c586, vt82c586a, vt82c586b, vt82c596a, vt82c596b,

 *   vt82c686, vt82c686a, vt82c686b, vt8231, vt8233, vt8233c, vt8233a,

 *   vt8235, vt8237

 *

 * Copyright (c) 2000-2002 Vojtech Pavlik

 *

 * Based on the work of:

 *	Michel Aubry

 *	Jeff Garzik

 *	Andre Hedrick



 Crashes if PREQ# till DDACK# set */

 66 MHz clock doesn't work correctly */

 Needs to have FIFO split set */

 Doesn't work with IRQ unmasking on */

 Has wrong vendor ID (0x1107) */

 Don't touch Address Setup Timing */

 Has no enablebits */

 SATA/PATA combined configuration */

 single channel controller) */

/*

 * VIA SouthBridge chips.

/*

 *	Cable special cases

 Systems by DMI */

 Arima W730-K8/Targa Visionary 811/... */

/**

 *	via_cable_detect	-	cable detection

 *	@ap: ATA port

 *

 *	Perform cable detection. Actually for the VIA case the BIOS

 *	already did this for us. We read the values provided by the

 *	BIOS. If you are using an 8235 in a non-PC configuration you

 *	may need to update this code.

 *

 *	Hotplug also impacts on this.

 Early chips are 40 wire */

 UDMA 66 chips have only drive side logic */

 UDMA 100 or later */

	/* Check both the drive cable reporting bits, we might not have

 Check with ACPI so we can spot BIOS reported SATA bridges */

/**

 *	via_do_set_mode	-	set transfer mode data

 *	@ap: ATA interface

 *	@adev: ATA device

 *	@mode: ATA mode being programmed

 *	@set_ast: Set to program address setup

 *	@udma_type: UDMA mode/format of registers

 *

 *	Program the VIA registers for DMA and PIO modes. Uses the ata timing

 *	support in order to compute modes.

 *

 *	FIXME: Hotplug will require we serialize multiple mode changes

 *	on the two channels.

 Bus clock in kHZ */

 Calculate the timing values we require */

 We share 8bit timing so we must merge the constraints */

 Address setup is programmable but breaks on UDMA133 setups */

 2 bits per drive */

 Load the PIO mode bits */

 Load the UDMA bits according to type */

 Set UDMA unless device is not UDMA capable */

 clear transfer mode bit */

 preserve 80-wire cable detection bit */

/**

 *	via_mode_filter		-	filter buggy device/mode pairs

 *	@dev: ATA device

 *	@mask: Mode bitmask

 *

 *	We need to apply some minimal filtering for old controllers and at least

 *	one breed of Transcend SSD. Return the updated mask.

/**

 *	via_tf_load - send taskfile registers to host controller

 *	@ap: Port to which output is sent

 *	@tf: ATA taskfile register set

 *

 *	Outputs ATA taskfile to standard ATA host controller.

 *

 *	Note: This is to fix the internal bug of via chipsets, which

 *	will reset the device register after changing the IEN bit on

 *	ctl register

/**

 *	via_config_fifo		-	set up the FIFO

 *	@pdev: PCI device

 *	@flags: configuration flags

 *

 *	Set the FIFO properties for this device if necessary. Used both on

 *	set up and on and the resume path

 0x40 low bits indicate enabled channels */

 Clear PREQ# until DDACK# for errata */

 Turn on FIFO for enabled channels */

 Initialise the FIFO for the enabled channels. */

 The 66 MHz devices require we enable the clock */

 Disable the 66MHz clock on problem devices */

/**

 *	via_init_one		-	discovery callback

 *	@pdev: PCI device

 *	@id: PCI table info

 *

 *	A VIA IDE interface has been discovered. Figure out what revision

 *	and perform configuration work before handing it to the ATA layer

 Early VIA without UDMA support */

 Ditto with IRQ masking required */

 VIA UDMA 33 devices (and borked 66) */

 VIA UDMA 66 devices */

 VIA UDMA 100 devices */

 UDMA133 with bad AST (All current 133) */

 FIXME: should check north bridge */

	/* To find out how the IDE will behave and what features we

 0x40 low bits indicate enabled channels */

 Clock set up */

 We have established the device type, now fire it up */

/**

 *	via_reinit_one		-	reinit after resume

 *	@pdev: PCI device

 *

 *	Called when the VIA PATA device is resumed. We must then

 *	reconfigure the fifo and other setup we may have altered. In

 *	addition the kernel needs to have the resume methods on PCI

 *	quirk supported.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * New ATA layer SC1200 driver		Alan Cox <alan@lxorguk.ukuu.org.uk>

 *

 * TODO: Mode selection filtering

 * TODO: Needs custom DMA cleanup code

 *

 * Based very heavily on

 *

 * linux/drivers/ide/pci/sc1200.c		Version 0.91	28-Jan-2003

 *

 * Copyright (C) 2000-2002		Mark Lord <mlord@pobox.com>

 * May be copied or modified under the terms of the GNU General Public License

 *

 * Development of this chipset driver was funded

 * by the nice folks at National Semiconductor.

/**

 *	sc1200_clock	-	PCI clock

 *

 *	Return the PCI bus clocking for the SC1200 chipset configuration

 *	in use. We return 0 for 33MHz 1 for 48MHz and 2 for 66Mhz

 Magic registers that give us the chipset data */

 33 MHz mode */

	/* Clock generator configuration 0x901E its 8/9 are the PCI clocking

/**

 *	sc1200_set_piomode		-	PIO setup

 *	@ap: ATA interface

 *	@adev: device on the interface

 *

 *	Set our PIO requirements. This is fairly simple on the SC1200

 format0, 33Mhz */

 format1, 33Mhz */

 format1, 48Mhz */

 format1, 66Mhz */

/**

 *	sc1200_set_dmamode		-	DMA timing setup

 *	@ap: ATA interface

 *	@adev: Device being configured

 *

 *	We cannot mix MWDMA and UDMA without reloading timings each switch

 *	master to slave.

/**

 *	sc1200_qc_issue		-	command issue

 *	@qc: command pending

 *

 *	Called when the libata layer is about to issue a command. We wrap

 *	this interface so that we can load the correct ATA timings if

 *	necessary.  Specifically we have a problem that there is only

 *	one MWDMA/UDMA bit.

 See if the DMA settings could be wrong */

 Maybe, but do the channels match MWDMA/UDMA ? */

 Switch the mode bits */

/**

 *	sc1200_qc_defer	-	implement serialization

 *	@qc: command

 *

 *	Serialize command issue on this controller.

 First apply the usual rules */

	/* Now apply serialization rules. Only allow a command if the

/**

 *	sc1200_init_one		-	Initialise an SC1200

 *	@dev: PCI device

 *	@id: Entry in match table

 *

 *	Just throw the needed data at the libata helper and it does all

 *	our work.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * pata_cmd64x.c 	- CMD64x PATA for new ATA layer

 *			  (C) 2005 Red Hat Inc

 *			  Alan Cox <alan@lxorguk.ukuu.org.uk>

 *			  (C) 2009-2010 Bartlomiej Zolnierkiewicz

 *			  (C) 2012 MontaVista Software, LLC <source@mvista.com>

 *

 * Based upon

 * linux/drivers/ide/pci/cmd64x.c		Version 1.30	Sept 10, 2002

 *

 * cmd64x.c: Enable interrupts at initialization time on Ultra/PCI machines.

 *           Note, this driver is not used at all on other systems because

 *           there the "BIOS" has done all of the following already.

 *           Due to massive hardware bugs, UltraDMA is only supported

 *           on the 646U2 and not on the 646U.

 *

 * Copyright (C) 1998		Eddie C. Dost  (ecd@skynet.be)

 * Copyright (C) 1998		David S. Miller (davem@redhat.com)

 *

 * Copyright (C) 1999-2002	Andre Hedrick <andre@linux-ide.org>

 *

 * TODO

 *	Testing work

/*

 * CMD64x specific registers definition.

 Check cable detect bits */

/**

 *	cmd64x_set_timing	-	set PIO and MWDMA timing

 *	@ap: ATA interface

 *	@adev: ATA device

 *	@mode: mode

 *

 *	Called to do the PIO and MWDMA mode setup.

 Port layout is not logical so use a table */

	/* ata_timing_compute is smart and will produce timings for MWDMA

 Slave has shared address setup */

	/* Now convert the clocks into values we can actually stuff into

 0 = 16 */

 Load setup timing */

 Load active/recovery */

/**

 *	cmd64x_set_piomode	-	set initial PIO mode data

 *	@ap: ATA interface

 *	@adev: ATA device

 *

 *	Used when configuring the devices ot set the PIO timings. All the

 *	actual work is done by the PIO/MWDMA setting helper

/**

 *	cmd64x_set_dmamode	-	set initial DMA mode data

 *	@ap: ATA interface

 *	@adev: ATA device

 *

 *	Called to do the DMA mode setup.

 DMA bits off */

 DMA control bits */

 DMA timing bits */

 Merge the timing value */

 Merge the control bits */

 UDMA on */

 15nS timing */

 UDMA off */

/**

 *	cmd64x_sff_irq_check	-	check IDE interrupt

 *	@ap: ATA interface

 *

 *	Check IDE interrupt in CFR/ARTTIM23 registers.

 NOTE: reading the register should clear the interrupt */

/**

 *	cmd64x_sff_irq_clear	-	clear IDE interrupt

 *	@ap: ATA interface

 *

 *	Clear IDE interrupt in CFR/ARTTIM23 and DMA status registers.

 Reading the register should be enough to clear the interrupt */

/**

 *	cmd648_sff_irq_check	-	check IDE interrupt

 *	@ap: ATA interface

 *

 *	Check IDE interrupt in MRDMODE register.

/**

 *	cmd648_sff_irq_clear	-	clear IDE interrupt

 *	@ap: ATA interface

 *

 *	Clear IDE interrupt in MRDMODE and DMA status registers.

 Clear this port's interrupt bit (leaving the other port alone) */

/**

 *	cmd646r1_bmdma_stop	-	DMA stop callback

 *	@qc: Command in progress

 *

 *	Stub for now while investigating the r1 quirk in the old driver.

 IRQ set up */

 Memory read line enable */

 PPC specific fixup copied from old driver */

 CMD 643 - no UDMA */

 CMD 646 with broken UDMA */

 CMD 646U with broken UDMA */

 CMD 646U2 with working UDMA */

 CMD 646 rev 1  */

 CMD 648 */

 CMD 649 */

 mobility split bridges don't report enabled ports correctly */

 all (with exceptions below) apart from 643 have CNTRL_CH0 bit */

 643 */

 UDMA works since rev 5 */

 Interrupts in MRDMODE since rev 3 */

 Rev 1 with other problems? */

 Early revs have no CNTRL_CH0 */

 check for enabled ports */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * pata_opti.c 	- ATI PATA for new ATA layer

 *			  (C) 2005 Red Hat Inc

 *

 * Based on

 *  linux/drivers/ide/pci/opti621.c		Version 0.7	Sept 10, 2002

 *

 *  Copyright (C) 1996-1998  Linus Torvalds & authors (see below)

 *

 * Authors:

 * Jaromir Koutek <miri@punknet.cz>,

 * Jan Harkes <jaharkes@cwi.nl>,

 * Mark Lord <mlord@pobox.com>

 * Some parts of code are from ali14xx.c and from rz1000.c.

 *

 * Also consulted the FreeBSD prototype driver by Kevin Day to try

 * and resolve some confusions. Further documentation can be found in

 * Ralf Brown's interrupt list

 *

 * If you have other variants of the Opti range (Viper/Vendetta) please

 * try this driver with those PCI idents and report back. For the later

 * chips see the pata_optidma driver

 *

 index of Read cycle timing register */

 index of Write cycle timing register */

 index of Control register */

 index of Strap register */

 index of Miscellaneous register */

/**

 *	opti_pre_reset		-	probe begin

 *	@link: ATA link

 *	@deadline: deadline jiffies for the operation

 *

 *	Set up cable type and use generic probe init

/**

 *	opti_write_reg		-	control register setup

 *	@ap: ATA port

 *	@val: value

 *	@reg: control register number

 *

 *	The Opti uses magic 'trapdoor' register accesses to do configuration

 *	rather than using PCI space as other controllers do. The double inw

 *	on the error register activates configuration mode. We can then write

 *	the control register

 These 3 unlock the control register access */

 Do the I/O */

 Relock */

/**

 *	opti_set_piomode	-	set initial PIO mode data

 *	@ap: ATA interface

 *	@adev: ATA device

 *

 *	Called to do the PIO mode setup. Timing numbers are taken from

 *	the FreeBSD driver then pre computed to keep the code clean. There

 *	are two tables depending on the hardware clock speed.

 Address table precomputed with prefetch off and a DCLK of 2 */

	/*

 	 *	As with many controllers the address setup time is shared

 	 *	and must suit both devices if present.

 Hardware constraint */

 Commence primary programming sequence */

 Programming sequence complete, override strapping */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Libata based driver for Apple "macio" family of PATA controllers

 *

 * Copyright 2008/2009 Benjamin Herrenschmidt, IBM Corp

 *                     <benh@kernel.crashing.org>

 *

 * Some bits and pieces from drivers/ide/ppc/pmac.c

 *

 Models of macio ATA controller */

 OHare based */

 Heathrow/Paddington */

 KeyLargo ATA-3 */

 KeyLargo ATA-4 */

 UniNorth2 ATA-6 */

 K2 ATA-6 */

 Shasta ATA-6 */

 OHare based */

 Heathrow/Paddington */

 KeyLargo ATA-3 (MDMA only) */

 KeyLargo ATA-4 (UDMA/66) */

 UniNorth2 ATA-6 (UDMA/100) */

 K2 ATA-6 (UDMA/100) */

 Shasta ATA-6 (UDMA/133) */

/*

 * Extra registers, both 32-bit little-endian

 Kauai (U2) ATA has different register setup */

/*

 * Timing configuration register definitions

 Number of IDE_SYSCLK_NS ticks, argument is in nanoseconds */

 33Mhz cell */

 66Mhz cell */

/* 133Mhz cell, found in shasta.

 * See comments about 100 Mhz Uninorth 2...

 * Note that PIO_MASK and MDMA_MASK seem to overlap, that's just

 * weird and I don't now why .. at this stage

/* 100Mhz cell, found in Uninorth 2 and K2. It appears as a pci device

 * (106b/0033) on uninorth or K2 internal PCI bus and it's clock is

 * controlled like gem or fw. It appears to be an evolution of keylargo

 * ATA4 with a timing register extended to 2x32bits registers (one

 * for PIO & MWDMA and one for UDMA, and a similar DBDMA channel.

 * It has it's own local feature control register as well.

 *

 * After scratching my mind over the timing values, at least for PIO

 * and MDMA, I think I've figured the format of the timing register,

 * though I use pre-calculated tables for UDMA as usual...

 Size of field unknown */

/* 66Mhz cell, found in KeyLargo. Can do ultra mode 0 to 2 on

 * 40 connector cable and to 4 on 80 connector one.

 * Clock unit is 15ns (66Mhz)

 *

 * 3 Values can be programmed:

 *  - Write data setup, which appears to match the cycle time. They

 *    also call it DIOW setup.

 *  - Ready to pause time (from spec)

 *  - Address setup. That one is weird. I don't see where exactly

 *    it fits in UDMA cycles, I got it's name from an obscure piece

 *    of commented out code in Darwin. They leave it to 0, we do as

 *    well, despite a comment that would lead to think it has a

 *    min value of 45ns.

 * Apple also add 60ns to the write data setup (or cycle time ?) on

 * reads.

 Enable Ultra mode for DMA */

 Address setup */

 Ready 2 pause time */

 Write data setup time */

/* 33Mhz cell, found in OHare, Heathrow (& Paddington) and KeyLargo

 * Can do pio & mdma modes, clock unit is 30ns (33Mhz)

 *

 * The access time and recovery time can be programmed. Some older

 * Darwin code base limit OHare to 150ns cycle time. I decided to do

 * the same here fore safety against broken old hardware ;)

 * The HalfTick bit, when set, adds half a clock (15ns) to the access

 * time and removes one from recovery. It's not supported on KeyLargo

 * implementation afaik. The E bit appears to be set for PIO mode 0 and

 * is used to reach long timings used in this mode.

/*

 * Interrupt register definitions. Only present on newer cells

 * (Keylargo and later afaik) so we don't use it.

/*

 * FCR Register on Kauai. Not sure what bit 0x4 is  ...

 Allow up to 256 DBDMA commands per xfer */

 Don't let a DMA segment go all the way to 64K */

/*

 * Wait 1s for disk to answer on IDE bus after a hard reset

 * of the device (via GPIO/FCR).

 *

 * Some devices seem to "pollute" the bus even after dropping

 * the BSY bit (typically some combo drives slave on the UDMA

 * bus) after a hard reset. Since we hard reset all drives on

 * KeyLargo ATA66, we have to keep that delay around. I may end

 * up not hard resetting anymore on these and keep the delay only

 * for older interfaces instead (we have to reset when coming

 * from MacOS...) --BenH.

/* Previous variants of this driver used to calculate timings

 * for various variants of the chip and use tables for others.

 *

 * Not only was this confusing, but in addition, it isn't clear

 * whether our calculation code was correct. It didn't entirely

 * match the darwin code and whatever documentation I could find

 * on these cells

 *

 * I decided to entirely rely on a table instead for this version

 * of the driver. Also, because I don't really care about derated

 * modes and really old HW other than making it work, I'm not going

 * to calculate / snoop timing values for something else than the

 * standard modes.

 Bits to set in first timing reg */

 Bits to set in second timing reg */

 Apply timings */

 First clear timings */

 Now get the PIO timings */

 PIO timings only ever use the first treg */

 Now get DMA timings */

 DMA timings can use both tregs */

 Apply to hardware */

/*

 * Blast some well known "safe" values to the timing registers at init or

 * wakeup from sleep time, before we do real calculation

 Get cable type from device-tree */

			/* Some drives fail to detect 80c cable in PowerBook

			 * These machine use proprietary short IDE cable

			 * anyway

	/* G5's seem to have incorrect cable type in device-tree.

	 * Let's assume they always have a 80 conductor cable, this seem to

	 * be always the case unless the user mucked around

 Anything else is 40 connectors */

		/* determine if physical DMA addr spans 64K boundary.

		 * Note h/w doesn't support 64-bit, so we unconditionally

		 * truncate dma_addr_t to u32.

 table overflow should never happen */

 Should never happen according to Tejun */

 Convert the last command to an input/output */

 Add the stop command to the end of the list */

 Make sure DMA controller is stopped */

 Make sure DMA commands updates are visible */

	/* On KeyLargo 66Mhz cell, we need to add 60ns to wrDataSetup on

	 * UDMA reads

 issue r/w command */

 Make sure it gets to the controller right now */

 Stop the DMA engine and wait for it to full halt */

	/* We have two things to deal with here:

	 *

	 * - The dbdma won't stop if the command was started

	 * but completed with an error without transferring all

	 * datas. This happens when bad blocks are met during

	 * a multi-block transfer.

	 *

	 * - The dbdma fifo hasn't yet finished flushing to

	 * to system memory when the disk interrupt occurs.

	 *

 First check for errors */

	/* If ACTIVE is cleared, the STOP command has been hit and

	 * the transfer is complete. If not, we have to flush the

	 * channel.

	/* If dbdma didn't execute the STOP command yet, the

	 * active bit is still set. We consider that we aren't

	 * sharing interrupts (which is hopefully the case with

	 * those controllers) and so we just try to flush the

	 * channel for pending data in the fifo

 port_start is when we allocate the DMA command list */

	/* Allocate space for the DBDMA commands.

	 *

	 * The +2 is +1 for the stop command and +1 to allow for

	 * aligning the start address to a multiple of 16 bytes.

 Nothing to do here */

		/* The code below is having trouble on some ohare machines

		 * (timing related ?). Until I can put my hand on one of these

		 * units, I keep the old way

 Reset and enable controller */

 Only bother waiting if there's a reset control */

 If resuming a PCI device, restore the config space here */

	/* On Kauai, initialize the FCR. We don't perform a reset, doesn't really

	 * seem necessary and speeds up the boot process

/* Hook the standard slave config to fixup some HW related alignment

 * restrictions

 First call original */

 This is lifted from sata_nv */

 OHare has issues with non cache aligned DMA on some chipsets */

 Tell the world about it */

 We only have issues with ATAPI */

 Shasta and K2 seem to have "issues" with reads ... */

 Allright these are bad, apply restrictions */

		/* We enable MWI and hack cache line size directly here, this

		 * is specific to this chipset and not normal values, we happen

		 * to somewhat know what we are doing here (which is basically

		 * to do the same Apple does and pray they did not get it wrong :-)

 Tell the world about it */

 First, core libata suspend to do most of the work */

 Restore to default timings */

	/* Mask interrupt. Not strictly necessary but old driver did

 The media bay will handle itself just fine */

 Kauai has bus control FCRs directly here */

	/* For PCI, save state and disable DMA. No need to call

	 * pci_set_power_state(), the HW doesn't do D states that

	 * way, the platform code will take care of suspending the

	 * ASIC properly

 Disable the bus on older machines and the cell on kauai */

 Reset and re-enable the HW */

 Sanitize drive timings */

 We want our IRQ back ! */

 Let the libata core take it from there */

 CONFIG_PM_SLEEP */

 We may not need that strict one */

	/* Not sure what the real max is but we know it's less than 64K, let's

	 * use 64K minus 256

 Identify the type of controller */

 XXX FIXME --- setup priv->mediabay here */

 Get Apple bus ID (for clock and ASIC control) */

 Fixup missing Apple bus ID in case of media-bay */

 cmd_addr is the base of regs for that port */

 taskfile registers */

 PIO */

 MWDMA */

 UDMA */

	/* Fill up privates with various invariants collected from the

	 * device-tree

 Make sure we have sane initial timings in the cache */

 Allocate libata host for 1 port */

 Setup the private data in host too */

 Map base registers */

 Map DMA regs */

 If chip has local feature control, map those regs too */

 Setup port data structure */

 hard-reset the controller */

 Enable bus master if necessary */

 Start it up */

 Check for broken device-trees */

 Enable managed resources */

 Allocate and init private data structure */

 Request memory resource for taskfile registers */

 Request resources for DMA registers if any */

	/*

	 * Fixup missing IRQ for some old implementations with broken

	 * device-trees.

	 *

	 * This is a bit bogus, it should be fixed in the device-tree itself,

	 * via the existing macio fixups, based on the type of interrupt

	 * controller in the machine. However, I have no test HW for this case,

	 * and this trick works well enough on those old machines...

 Prevvent media bay callbacks until fully registered */

 Get register addresses and call common initialization */

 Taskfile regs */

 DBDMA regs */

 Feature control */

	/* Make sure the mediabay callback doesn't try to access

	 * dead stuff

 CONFIG_PM_SLEEP */

 CONFIG_PMAC_MEDIABAY */

 We cannot use a MacIO controller without its OF device node */

 Check that it can be enabled */

 Allocate and init private data structure */

 Get MMIO regions */

 Get register addresses and call common initialization */

 Taskfile regs */

 DBDMA regs */

 Feature control */

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  acard-ahci.c - ACard AHCI SATA support

 *

 *  Maintained by:  Tejun Heo <tj@kernel.org>

 *		    Please ALWAYS copy linux-ide@vger.kernel.org

 *		    on emails.

 *

 *  Copyright 2010 Red Hat, Inc.

 *

 * libata documentation is available via 'make {ps|pdf}docs',

 * as Documentation/driver-api/libata.rst

 *

 * AHCI hardware documentation:

 * http://www.intel.com/technology/serialata/pdf/rev1_0.pdf

 * http://www.intel.com/technology/serialata/pdf/rev1_1.pdf

/*

  Received FIS structure limited to 80h.

 bit 31 (EOT) max==0x10000 (64k) */

 ACard */

 ATP8620 */

 terminate list */

		/* AHCI spec rev1.1 section 8.3.3:

		 * Software must disable interrupts prior to requesting a

		 * transition of the HBA to D3 state.

 flush */

	/*

	 * Next, the S/G list.

		/*

		 * ACard note:

		 * We must set an end-of-table (EOT) bit,

		 * and the segment cannot exceed 64k (0x10000)

 set EOT */

 five dwords */

	/*

	 * Fill in command table information.  First, the header,

	 * a SATA Register - Host to Device command FIS.

	/*

	 * Fill in command slot information.

	 *

	 * ACard note: prd table length not filled in

	/*

	 * After a successful execution of an ATA PIO data-in command,

	 * the device doesn't send D2H Reg FIS to update the TF and

	 * the host should take TF and E_Status from the preceding PIO

	 * Setup FIS.

 check FBS capability */

	/*

	 * First item in chunk of DMA memory: 32-slot command table,

	 * 32 bytes each in size

	/*

	 * Second item: Received-FIS area

	/*

	 * Third item: data area for storing a single command

	 * and its scatter-gather table

	/*

	 * Save off initial list of interrupts to be enabled.

	 * This could be changed later

 engage engines, captain */

 acquire resources */

	/* AHCI controllers often implement SFF compatible interface.

	 * Grab all PCI BARs just in case.

 save initial config */

 prepare host */

	/* CAP.NP sometimes indicate the index of the last enabled

	 * port, at other times, that of the last possible port, so

	 * determining the maximum port number requires looking at

	 * both CAP.NP and port_map.

 set initial link pm policy */

		/*

		ap->pm_policy = NOT_AVAILABLE;

 disabled/not-implemented port */

 initialize adapter */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *    pata_sis.c - SiS ATA driver

 *

 *	(C) 2005 Red Hat

 *	(C) 2007,2009 Bartlomiej Zolnierkiewicz

 *

 *    Based upon linux/drivers/ide/pci/sis5513.c

 * Copyright (C) 1999-2000	Andre Hedrick <andre@linux-ide.org>

 * Copyright (C) 2002		Lionel Bouton <Lionel.Bouton@inet6.fr>, Maintainer

 * Copyright (C) 2003		Vojtech Pavlik <vojtech@suse.cz>

 * SiS Taiwan		: for direct support and hardware.

 * Daniela Engert	: for initial ATA100 advices and numerous others.

 * John Fremlin, Manfred Spraul, Dave Morgan, Peter Kjellerstedt	:

 *			  for checking code correctness, providing patches.

 * Original tests and design on the SiS620 chipset.

 * ATA100 tests and design on the SiS735 chipset.

 * ATA16/33 support from specs

 * ATA133 support for SiS961/962 by L.C. Chang <lcchang@sis.com.tw>

 *

 *

 *	TODO

 *	Check MWDMA on drives that don't support MWDMA speed pio cycles ?

 *	More Testing

 PCI host ID */

 Info block */

	/* Probably add family, cable detect type etc here to clean

 devid, subvendor, subdev */

 ASUS A6K */

 FSC Amilo A1630 */

 EasyNote K5305 */

 end marker */

/**

 *	sis_old_port_base - return PCI configuration base for dev

 *	@adev: device

 *

 *	Returns the base of the PCI configuration registers for this port

 *	number.

/**

 *	sis_port_base - return PCI configuration base for dev

 *	@adev: device

 *

 *	Returns the base of the PCI configuration registers for this port

 *	number.

 If bit 30 is set then the registers are mapped at 0x70 not 0x40 */

/**

 *	sis_133_cable_detect - check for 40/80 pin

 *	@ap: Port

 *

 *	Perform cable detection for the later UDMA133 capable

 *	SiS chipset.

 The top bit of this register is the cable detect bit */

/**

 *	sis_66_cable_detect - check for 40/80 pin

 *	@ap: Port

 *

 *	Perform cable detection on the UDMA66, UDMA100 and early UDMA133

 *	SiS IDE controllers.

 Older chips keep cable detect in bits 4/5 of reg 0x48 */

/**

 *	sis_pre_reset - probe begin

 *	@link: ATA link

 *	@deadline: deadline jiffies for the operation

 *

 *	Set up cable type and use generic probe init

 port 0 */

 port 1 */

	/* Clear the FIFO settings. We can't enable the FIFO until

/**

 *	sis_set_fifo - Set RWP fifo bits for this device

 *	@ap: Port

 *	@adev: Device

 *

 *	SIS chipsets implement prefetch/postwrite bits for each device

 *	on both channels. This functionality is not ATAPI compatible and

 *	must be configured according to the class of device present

 This holds various bits including the FIFO control */

 Enable for ATA (disk) only */

/**

 *	sis_old_set_piomode - Initialize host controller PATA PIO timings

 *	@ap: Port whose timings we are configuring

 *	@adev: Device we are configuring for.

 *

 *	Set PIO mode for device, in host controller PCI config space. This

 *	function handles PIO set up for all chips that are pre ATA100 and

 *	also early ATA100 devices.

 *

 *	LOCKING:

 *	None (inherited from caller).

 Clear active/recovery timings */

/**

 *	sis_100_set_piomode - Initialize host controller PATA PIO timings

 *	@ap: Port whose timings we are configuring

 *	@adev: Device we are configuring for.

 *

 *	Set PIO mode for device, in host controller PCI config space. This

 *	function handles PIO set up for ATA100 devices and early ATA133.

 *

 *	LOCKING:

 *	None (inherited from caller).

/**

 *	sis_133_set_piomode - Initialize host controller PATA PIO timings

 *	@ap: Port whose timings we are configuring

 *	@adev: Device we are configuring for.

 *

 *	Set PIO mode for device, in host controller PCI config space. This

 *	function handles PIO set up for the later ATA133 devices.

 *

 *	LOCKING:

 *	None (inherited from caller).

 Recovery << 24 | Act << 16 | Ini << 12 */

 Recovery << 24 | Act << 16 | Ini << 12 */

 Mask out timing */

 100 or 133 ? */

/**

 *	sis_old_set_dmamode - Initialize host controller PATA DMA timings

 *	@ap: Port whose timings we are configuring

 *	@adev: Device to program

 *

 *	Set UDMA/MWDMA mode for device, in host controller PCI config space.

 *	Handles pre UDMA and UDMA33 devices. Supports MWDMA as well unlike

 *	the old ide/pci driver.

 *

 *	LOCKING:

 *	None (inherited from caller).

		/* bits 3-0 hold recovery timing bits 8-10 active timing and

 Bit 15 is UDMA on/off, bit 13-14 are cycle time */

/**

 *	sis_66_set_dmamode - Initialize host controller PATA DMA timings

 *	@ap: Port whose timings we are configuring

 *	@adev: Device to program

 *

 *	Set UDMA/MWDMA mode for device, in host controller PCI config space.

 *	Handles UDMA66 and early UDMA100 devices. Supports MWDMA as well unlike

 *	the old ide/pci driver.

 *

 *	LOCKING:

 *	None (inherited from caller).

 MWDMA 0-2 and UDMA 0-5 */

		/* bits 3-0 hold recovery timing bits 8-10 active timing and

 Bit 15 is UDMA on/off, bit 12-14 are cycle time */

/**

 *	sis_100_set_dmamode - Initialize host controller PATA DMA timings

 *	@ap: Port whose timings we are configuring

 *	@adev: Device to program

 *

 *	Set UDMA/MWDMA mode for device, in host controller PCI config space.

 *	Handles UDMA66 and early UDMA100 devices.

 *

 *	LOCKING:

 *	None (inherited from caller).

 NOT SUPPORTED YET: NEED DATA SHEET. DITTO IN OLD DRIVER */

 Bit 7 is UDMA on/off, bit 0-3 are cycle time */

/**

 *	sis_133_early_set_dmamode - Initialize host controller PATA DMA timings

 *	@ap: Port whose timings we are configuring

 *	@adev: Device to program

 *

 *	Set UDMA/MWDMA mode for device, in host controller PCI config space.

 *	Handles early SiS 961 bridges.

 *

 *	LOCKING:

 *	None (inherited from caller).

 Low 4 bits are timing */

 NOT SUPPORTED YET: NEED DATA SHEET. DITTO IN OLD DRIVER */

 Bit 7 is UDMA on/off, bit 0-3 are cycle time */

/**

 *	sis_133_set_dmamode - Initialize host controller PATA DMA timings

 *	@ap: Port whose timings we are configuring

 *	@adev: Device to program

 *

 *	Set UDMA/MWDMA mode for device, in host controller PCI config space.

 *

 *	LOCKING:

 *	None (inherited from caller).

 Recovery << 24 | Act << 16 | Ini << 12, like PIO modes */

 disable UDMA */

 bits 4- cycle time 8 - cvs time */

 enable UDMA */

/**

 *	sis_133_mode_filter - mode selection filter

 *	@adev: ATA device

 *	@mask: received mask to manipulate and pass back

 *

 *	Block UDMA6 on devices that do not support it.

 if ATA133 is disabled, mask it out */

 No UDMA */

 No MWDMA */

 No MWDMA */

 No MWDMA */

 No MWDMA */

 No MWDMA */

 Privately shared with the SiS180 SATA driver, not for use elsewhere */

 Fix up latency */

 Set compatibility bit */

 Fix up latency */

 Set compatibility bit */

 Fall through to ATA16 fixup below */

		/* force per drive recovery and active timings

/**

 *	sis_init_one - Register SiS ATA PCI device with kernel services

 *	@pdev: PCI device to register

 *	@ent: Entry in sis_pci_tbl matching with @pdev

 *

 *	Called from kernel PCI layer. We probe for combined mode (sigh),

 *	and then hand over control to libata, for it to do the rest.

 *

 *	LOCKING:

 *	Inherited from PCI layer (may sleep).

 *

 *	RETURNS:

 *	Zero on success, or -ERRNO value.

 100 with ATA 66 layout */

 100 with ATA 66 layout */

 We have to find the bridge first */

 Match found */

 SIS630 */

 630 ET */

 Look for concealed bridges */

 Second check */

		/* Disable ID masking and register remapping then

 SIS 962/963 */

 SIS 965/965L */

 SIS 966/966L */

 Further check */

 Try the second unmasking technique */

 Bus 0 Dev 2 Fn 0 */

 No chipset info, no support */

 SiS 5513 */

 SiS 5518 */

 SiS 1180 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Libata driver for the HighPoint 371N, 372N, and 302N UDMA66 ATA controllers.

 *

 * This driver is heavily based upon:

 *

 * linux/drivers/ide/pci/hpt366.c		Version 0.36	April 25, 2003

 *

 * Copyright (C) 1999-2003		Andre Hedrick <andre@linux-ide.org>

 * Portions Copyright (C) 2001	        Sun Microsystems, Inc.

 * Portions Copyright (C) 2003		Red Hat Inc

 * Portions Copyright (C) 2005-2010	MontaVista Software, Inc.

 *

 *

 * TODO

 *	Work out best PLL policy

/* key for bus clock timings

 * bit

 * 0:3    data_high_time. Inactive time of DIOW_/DIOR_ for PIO and MW DMA.

 *        cycles = value + 1

 * 4:8    data_low_time. Active time of DIOW_/DIOR_ for PIO and MW DMA.

 *        cycles = value + 1

 * 9:12   cmd_high_time. Inactive time of DIOW_/DIOR_ during task file

 *        register access.

 * 13:17  cmd_low_time. Active time of DIOW_/DIOR_ during task file

 *        register access.

 * 18:20  udma_cycle_time. Clock cycles for UDMA xfer.

 * 21     CLK frequency for UDMA: 0=ATA clock, 1=dual ATA clock.

 * 22:24  pre_high_time. Time to initialize 1st cycle for PIO and MW DMA xfer.

 * 25:27  cmd_pre_high_time. Time to initialize 1st PIO cycle for task file

 *        register access.

 * 28     UDMA enable.

 * 29     DMA  enable.

 * 30     PIO_MST enable. If set, the chip is in bus master mode during

 *        PIO xfer.

 * 31     FIFO enable. Only for PIO.

 66MHz DPLL clocks */

/**

 *	hpt3x2n_find_mode	-	reset the hpt3x2n bus

 *	@ap: ATA port

 *	@speed: transfer mode

 *

 *	Return the 32bit register programming information for this channel

 *	that matches the speed provided. For the moment the clocks table

 *	is hard coded but easy to change. This will be needed if we use

 *	different DPLLs

 silence compiler warning */

/**

 *	hpt372n_filter	-	mode selection filter

 *	@adev: ATA device

 *	@mask: mode mask

 *

 *	The Marvell bridge chips used on the HighPoint SATA cards do not seem

 *	to support the UltraDMA modes 1, 2, and 3 as well as any MWDMA modes...

/**

 *	hpt3x2n_cable_detect	-	Detect the cable type

 *	@ap: ATA port to detect on

 *

 *	Return the cable type attached to this port

 debounce */

 Cable register now active */

 Restore state */

/**

 *	hpt3x2n_pre_reset	-	reset the hpt3x2n bus

 *	@link: ATA link to reset

 *	@deadline: deadline jiffies for the operation

 *

 *	Perform the initial reset handling for the 3x2n series controllers.

 *	Reset the hardware and state machine,

 Reset the state machine */

 Fast interrupt prediction disable, hold off interrupt disable */

 Determine timing mask and find matching mode entry */

/**

 *	hpt3x2n_set_piomode		-	PIO setup

 *	@ap: ATA interface

 *	@adev: device on the interface

 *

 *	Perform PIO mode setup.

/**

 *	hpt3x2n_set_dmamode		-	DMA timing setup

 *	@ap: ATA interface

 *	@adev: Device being configured

 *

 *	Set up the channel for MWDMA or UDMA modes.

/**

 *	hpt3x2n_bmdma_stop		-	DMA engine stop

 *	@qc: ATA command

 *

 *	Clean up after the HPT3x2n and later DMA engine

/**

 *	hpt3x2n_set_clock	-	clock control

 *	@ap: ATA port

 *	@source: 0x21 or 0x23 for PLL or PCI sourced clock

 *

 *	Switch the ATA bus clock between the PLL and PCI clock sources

 *	while correctly isolating the bus and resetting internal logic

 *

 *	We must use the DPLL for

 *	-	writing

 *	-	second channel UDMA7 (SATA ports) or higher

 *	-	66MHz PCI

 *

 *	or we will underclock the device and get reduced performance.

 Tristate the bus */

 Switch clock and reset channels */

 Reset state machines, avoid enabling the disabled channels */

 Complete reset */

 Reconnect channels to bus */

 See if we should use the DPLL */

 Needed for write */

 Needed at 66Mhz */

 First apply the usual rules */

/*

 *	Configuration for HPT302N/371N.

/*

 *	Configuration for HPT372N. Same as 302N/371N but we have a mode filter.

/**

 *	hpt3xn_calibrate_dpll		-	Calibrate the DPLL loop

 *	@dev: PCI device

 *

 *	Perform a calibration cycle on the HPT3xN DPLL. Returns 1 if this

 *	succeeds

 See if it stays set */

 Failed ? */

 Turn off tuning, we have the DPLL set */

 Never went stable */

 Not PCI readable for some chips */

 This is the process the HPT371 BIOS is reported to use */

 Clamp to bands */

/**

 *	hpt3x2n_init_one		-	Initialise an HPT37X/302

 *	@dev: PCI device

 *	@id: Entry in match table

 *

 *	Initialise an HPT3x2n device. There are some interesting complications

 *	here. Firstly the chip may report 366 and be one of several variants.

 *	Secondly all the timings depend on the clock for the chip which we must

 *	detect and look up

 *

 *	This is the known chip mappings. It may be missing a couple of later

 *	releases.

 *

 *	Chip version		PCI		Rev	Notes

 *	HPT372			4 (HPT366)	5	Other driver

 *	HPT372N			4 (HPT366)	6	UDMA133

 *	HPT372			5 (HPT372)	1	Other driver

 *	HPT372N			5 (HPT372)	2	UDMA133

 *	HPT302			6 (HPT302)	*	Other driver

 *	HPT302N			6 (HPT302)	> 1	UDMA133

 *	HPT371			7 (HPT371)	*	Other driver

 *	HPT371N			7 (HPT371)	> 1	UDMA133

 *	HPT374			8 (HPT374)	*	Other driver

 *	HPT372N			9 (HPT372N)	*	UDMA133

 *

 *	(1) UDMA133 support depends on the bus clock

 HPT372N - UDMA133 */

 HPT302N and HPT371N - UDMA133 */

 372N if rev >= 6 */

 371N if rev >= 2 */

 372N if rev >= 2 */

 302N if rev >= 2 */

 Ok so this is a chip we support */

	/*

	 * HPT371 chips physically have only one channel, the secondary one,

	 * but the primary channel registers do exist!  Go figure...

	 * So,  we manually disable the non-existing channel here

	 * (if the BIOS hasn't done this already).

	/*

	 * Tune the PLL. HPT recommend using 75 for SATA, 66 for UDMA133 or

	 * 50 for UDMA100. Right now we always use 66

 PCI Mhz for 66Mhz DPLL */

 Tolerance */

 PLL clock */

 Unlike the 37x we don't try jiggling the frequency */

	/*

	 * Set our private data up. We only need a few flags

	 * so we use it directly.

	/*

	 * On  HPT371N, if ATA clock is 66 MHz we must set bit 2 in

	 * the MISC. register to stretch the UltraDMA Tss timing.

	 * NOTE: This register is only writeable via I/O space.

 Now kick off ATA set up */

/*

 * Freescale iMX PATA driver

 *

 * Copyright (C) 2011 Arnaud Patard <arnaud.patard@rtp-net.org>

 *

 * Based on pata_platform - Copyright (C) 2006 - 2007  Paul Mundt

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

 *

 * TODO:

 * - dmaengine support

 timings/interrupt/control regs */

 Fixup the port shift for platforms that need it */

 deassert resets */

 enable interrupts */

 activate */

 sentinel */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Renesas R-Car SATA driver

 *

 * Author: Vladimir Barinov <source@cogentembedded.com>

 * Copyright (C) 2013-2015 Cogent Embedded, Inc.

 * Copyright (C) 2013-2015 Renesas Solutions Corp.

 SH-Navi2G/ATAPI-ATA compatible task registers */

 SH-Navi2G/ATAPI module compatible control registers */

 ATAPI control 1 register (ATAPI_CONTROL1) bits */

 ATAPI status register (ATAPI_STATUS) bits */

 Interrupt enable register (ATAPI_INT_ENABLE) bits */

 Access control registers for physical layer control register */

 Physical layer control address command register (SATAPHYADDR) bits */

 Physical layer control enable register (SATAPHYACCEN) bits */

 Physical layer control reset register (SATAPHYRESET) bits */

 Physical layer control acknowledge register (SATAPHYACK) bits */

 Serial-ATA HOST control registers */

 SATA INT status register (SATAINTSTAT) bits */

 SATA INT mask register (SATAINTSTAT) bits */

 Physical Layer Control Registers */

 Descriptor table word 0 bit (when DTA32M = 1) */

 Gen2 Physical Layer Control Registers */

 Spread Spectrum */

 DC connection */

 Termination Resistor */

 idle state */

 reset */

 deassert reset */

 deassert reset */

 lane 1 */

 write phy register value */

 set register group */

 write command */

 wait for ack */

 idle state */

 mask */

 ack */

 unmask */

 needed; also flushes, for mmio */

 found a device */

 nothing found */

 software reset.  causes dev0 to be selected */

 wait the port to become ready */

 determine if device 0 is present */

 issue bus reset */

 if link is occupied, -ENODEV too is an error */

 determine by signature whether we have ATA or ATAPI devices */

 Transfer multiple of 2 bytes */

 Transfer trailing byte, if any. */

 Point buf to the tail of buffer */

		/*

		 * Use io*16_rep() accessors here as well to avoid pointlessly

		 * swapping bytes to and from on the big endian machines...

 We only need to flush incoming data when a command was running */

 Drain up to 64K of data before we give up this recovery method */

 Can become DEBUG later */

		/*

		 * Note: h/w doesn't support 64-bit, so we unconditionally

		 * truncate dma_addr_t to u32.

 end-of-table flag */

 load PRD table addr. */

 make sure PRD table writes are visible to controller */

 specify data direction, triple-check start bit is clear */

 issue r/w command */

 start host DMA transaction */

 force termination of DMA transfer if active */

 one-PIO-cycle guaranteed wait, per spec, for HDMA1:0 transition */

	/*

	 * This controller allows transfer chunks up to 512MB which cross 64KB

	 * boundaries, therefore the DMA limits are more relaxed than standard

	 * ATA SFF.

 first, analyze and record host port events */

 Setup a soft-reset EH action */

 freeze or abort */

 be sure to clear ATA interrupt */

 ack */

 SATA-IP reset state */

 ISM mode, PRD mode, DTEND flag at bit 0 */

 Release the SATA-IP from the reset state */

 ack and mask */

 enable interrupts */

 reset and setup phy */

 Deprecated by "renesas,sata-r8a7779" */

 setup port */

 initialize host controller */

 disable interrupts */

 ack and mask */

 disable interrupts */

 mask */

 ack and mask */

 enable interrupts */

 initialize host controller */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *    pata_efar.c - EFAR PIIX clone controller driver

 *

 *	(C) 2005 Red Hat

 *	(C) 2009-2010 Bartlomiej Zolnierkiewicz

 *

 *    Some parts based on ata_piix.c by Jeff Garzik and others.

 *

 *    The EFAR is a PIIX4 clone with UDMA66 support. Unlike the later

 *    Intel ICH controllers the EFAR widened the UDMA mode register bits

 *    and doesn't require the funky clock selection.

/**

 *	efar_pre_reset	-	Enable bits

 *	@link: ATA link

 *	@deadline: deadline jiffies for the operation

 *

 *	Perform cable detection for the EFAR ATA interface. This is

 *	different to the PIIX arrangement

 port 0 */

 port 1 */

/**

 *	efar_cable_detect	-	check for 40/80 pin

 *	@ap: Port

 *

 *	Perform cable detection for the EFAR ATA interface. This is

 *	different to the PIIX arrangement

/**

 *	efar_set_piomode - Initialize host controller PATA PIO timings

 *	@ap: Port whose timings we are configuring

 *	@adev: Device to program

 *

 *	Set PIO mode for device, in host controller PCI config space.

 *

 *	LOCKING:

 *	None (inherited from caller).

	/*

	 *	See Intel Document 298600-004 for the timing programing rules

	 *	for PIIX/ICH. The EFAR is a clone so very similar

 ISP  RTC */

 TIME */

 PIO 3/4 require IORDY */

 IE */

 Intel specifies that the prefetch/posting is for disk only */

 PPE */

 Set PPE, IE, and TIME as appropriate */

 Slave timing in separate register */

 Ensure SITRE is set */

/**

 *	efar_set_dmamode - Initialize host controller PATA DMA timings

 *	@ap: Port whose timings we are configuring

 *	@adev: Device to program

 *

 *	Set UDMA/MWDMA mode for device, in host controller PCI config space.

 *

 *	LOCKING:

 *	None (inherited from caller).

 ISP  RTC */

 Load the UDMA mode number */

		/*

		 * MWDMA is driven by the PIO timings. We must also enable

		 * IORDY unconditionally along with TIME1. PPE has already

		 * been set when the PIO timing was set.

 IORDY|TIME1 */

		/* If the drive MWDMA is faster than it can do PIO then

 Enable DMA timing only */

 PIO cycles in PIO0 */

 Slave */

 Mask out IORDY|TIME1|DMAONLY */

 Load the matching timing */

 Master */

			master_data &= 0xCCF4;	/* Mask out IORDY|TIME1|DMAONLY

/**

 *	efar_init_one - Register EFAR ATA PCI device with kernel services

 *	@pdev: PCI device to register

 *	@ent: Entry in efar_pci_tbl matching with @pdev

 *

 *	Called from kernel PCI layer.

 *

 *	LOCKING:

 *	Inherited from PCI layer (may sleep).

 *

 *	RETURNS:

 *	Zero on success, or -ERRNO value.

 terminate list */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  ahci.c - AHCI SATA support

 *

 *  Maintained by:  Tejun Heo <tj@kernel.org>

 *    		    Please ALWAYS copy linux-ide@vger.kernel.org

 *		    on emails.

 *

 *  Copyright 2004-2005 Red Hat, Inc.

 *

 * libata documentation is available via 'make {ps|pdf}docs',

 * as Documentation/driver-api/libata.rst

 *

 * AHCI hardware documentation:

 * http://www.intel.com/technology/serialata/pdf/rev1_0.pdf

 * http://www.intel.com/technology/serialata/pdf/rev1_1.pdf

 board IDs by feature in alphabetical order */

 board IDs for specific chipsets in alphabetical order */

 for SB700 and SB800 */

	/*

	 * board IDs for Intel chipsets that support more than 6 ports

	 * *and* end up needing the PCS quirk.

 aliases */

 CONFIG_PM */

 by features */

 by chipsets */

 for SB700 and SB800 */

 Intel */

 Comet Lake PCH-H RAID */

 ICH6 */

 ICH6M */

 ICH7 */

 ICH7M */

 ICH7R */

 ULi M5288 */

 ESB2 */

 ESB2 */

 ESB2 */

 ICH7-M DH */

 ICH8 */

 ICH8/Lewisburg RAID*/

 ICH8 */

 ICH8M */

 ICH8M */

 ICH9 */

 ICH9 */

 ICH9 */

 ICH9 */

 ICH9 */

 ICH9M */

 ICH9M */

 ICH9M */

 ICH9M */

 ICH9M */

 ICH9 */

 ICH9M */

 Tolapai */

 Tolapai */

 ICH10 */

 ICH10 */

 ICH10 */

 PCH AHCI */

 PCH AHCI */

 PCH RAID */

 PCH RAID */

 PCH M AHCI */

 PCH RAID */

 PCH M RAID */

 PCH AHCI */

 DNV AHCI */

 DNV AHCI */

 DNV AHCI */

 DNV AHCI */

 DNV AHCI */

 DNV AHCI */

 DNV AHCI */

 DNV AHCI */

 DNV AHCI */

 DNV AHCI */

 DNV AHCI */

 DNV AHCI */

 DNV AHCI */

 DNV AHCI */

 DNV AHCI */

 DNV AHCI */

 DNV AHCI */

 DNV AHCI */

 DNV AHCI */

 DNV AHCI */

 CPT AHCI */

 CPT M AHCI */

 CPT RAID */

 CPT M RAID */

 CPT RAID */

 CPT RAID */

 PBG AHCI */

 PBG RAID */

 PBG RAID */

 PBG/Lewisburg RAID*/

 DH89xxCC AHCI */

 Panther Point AHCI */

 Panther M AHCI */

 Panther Point RAID */

 Panther Point RAID */

 Panther Point RAID */

 Panther M RAID */

 Panther Point RAID */

 Lynx Point AHCI */

 Lynx M AHCI */

 Lynx Point RAID */

 Lynx M RAID */

 Lynx Point RAID */

 Lynx M RAID */

 Lynx Point RAID */

 Lynx M RAID */

 Lynx LP AHCI */

 Lynx LP AHCI */

 Lynx LP RAID */

 Lynx LP RAID */

 Lynx LP RAID */

 Lynx LP RAID */

 Lynx LP RAID */

 Lynx LP RAID */

 Cannon Lake PCH-LP AHCI */

 Avoton AHCI */

 Avoton AHCI */

 Avoton RAID */

 Avoton RAID */

 Avoton RAID */

 Avoton RAID */

 Avoton RAID */

 Avoton RAID */

 Avoton AHCI */

 Avoton AHCI */

 Avoton RAID */

 Avoton RAID */

 Avoton RAID */

 Avoton RAID */

 Avoton RAID */

 Avoton RAID */

 Wellsburg/Lewisburg AHCI*/

 Wellsburg/Lewisburg RAID*/

 Rocket Lake PCH-H RAID */

 Rocket Lake PCH-H RAID */

 Rocket Lake PCH-H RAID */

 Rocket Lake PCH-H RAID */

 Wellsburg AHCI */

 Wellsburg RAID */

 Wellsburg RAID */

 Wellsburg RAID */

 Wellsburg AHCI */

 Wellsburg RAID */

 Wellsburg RAID */

 Wellsburg RAID */

 Coleto Creek AHCI */

 Wildcat LP AHCI */

 Wildcat LP RAID */

 Wildcat LP RAID */

 Wildcat LP RAID */

 9 Series AHCI */

 9 Series M AHCI */

 9 Series RAID */

 9 Series M RAID */

 9 Series RAID */

 9 Series M RAID */

 9 Series RAID */

 9 Series M RAID */

 Sunrise LP AHCI */

 Sunrise LP RAID */

 Sunrise LP RAID */

 Sunrise Point-H AHCI */

 Sunrise M AHCI */

 Sunrise Point-H RAID */

 Sunrise Point-H RAID */

 Sunrise M RAID */

 Sunrise Point-H RAID */

 Lewisburg AHCI*/

 Lewisburg RAID*/

 Lewisburg RAID*/

 Lewisburg RAID*/

 Lewisburg AHCI*/

 Lewisburg RAID*/

 Lewisburg RAID*/

 Lewisburg RAID*/

 Cannon Lake PCH-H RAID */

 Comet Lake-H RAID */

 Comet Lake PCH-V RAID */

 Bay Trail AHCI */

 Bay Trail AHCI */

 Cherry Tr. AHCI */

 ApolloLake AHCI */

 Ice Lake LP AHCI */

 Comet Lake PCH-U AHCI */

 Comet Lake PCH RAID */

 JMicron 360/1/3/5/6, match class to avoid IDE function */

 JMicron 362B and 362C have an AHCI function with IDE class code */

 May need to update quirk_jmicron_async_suspend() for additions */

 ATI */

 ATI SB600 */

 ATI SB700/800 */

 ATI SB700/800 */

 ATI SB700/800 */

 ATI SB700/800 */

 ATI SB700/800 */

 ATI SB700/800 */

 Amazon's Annapurna Labs support */

 AMD */

 AMD Hudson-2 */

 AMD CZ */

 AMD Green Sardine */

 AMD is using RAID class only for ahci controllers */

 Dell S140/S150 */

 VIA */

 VIA VT8251 */

 VIA VT8251 */

 NVIDIA */

 MCP65 */

 MCP65 */

 MCP65 */

 MCP65 */

 MCP65 */

 MCP65 */

 MCP65 */

 MCP65 */

 MCP67 */

 MCP67 */

 MCP67 */

 MCP67 */

 MCP67 */

 MCP67 */

 MCP67 */

 MCP67 */

 MCP67 */

 MCP67 */

 MCP67 */

 MCP67 */

 Linux ID */

 Linux ID */

 Linux ID */

 Linux ID */

 Linux ID */

 Linux ID */

 Linux ID */

 Linux ID */

 Linux ID */

 Linux ID */

 Linux ID */

 Linux ID */

 Linux ID */

 Linux ID */

 Linux ID */

 Linux ID */

 MCP73 */

 MCP73 */

 MCP73 */

 MCP73 */

 MCP73 */

 MCP73 */

 MCP73 */

 MCP73 */

 MCP73 */

 MCP73 */

 MCP73 */

 MCP73 */

 MCP77 */

 MCP77 */

 MCP77 */

 MCP77 */

 MCP77 */

 MCP77 */

 MCP77 */

 MCP77 */

 MCP77 */

 MCP77 */

 MCP77 */

 MCP77 */

 MCP79 */

 MCP79 */

 MCP79 */

 MCP79 */

 MCP79 */

 MCP79 */

 MCP79 */

 MCP79 */

 MCP79 */

 MCP79 */

 MCP79 */

 MCP79 */

 MCP89 */

 MCP89 */

 MCP89 */

 MCP89 */

 MCP89 */

 MCP89 */

 MCP89 */

 MCP89 */

 MCP89 */

 MCP89 */

 MCP89 */

 MCP89 */

 SiS */

 SiS 966 */

 SiS 968 */

 SiS 968 */

 ST Microelectronics */

 ST ConneXt */

 Marvell */

 6145 */

 6121 */

 88se9128 */

 88se9125 */

 88se9170 */

 88se9172 */

 88se9182 */

 88se9172 */

 88se9172 on some Gigabyte */

 88se91a2 */

 highpoint rocketraid 642L */

 highpoint rocketraid 644L */

 Promise */

 PDC42819 */

 FastTrak TX8660 ahci-mode */

 Asmedia */

 ASM1060 */

 ASM1060 */

 ASM1061 */

 ASM1062 */

 ASM1061R */

 ASM1062R */

 ASM1062+JMB575 */

	/*

	 * Samsung SSDs found on some macbooks.  NCQ times out if MSI is

	 * enabled.  https://bugzilla.kernel.org/show_bug.cgi?id=60731

 Enmotus */

 Loongson */

 Generic, PCI class code for AHCI */

 terminate list */

	/*

	 * Temporary Marvell 6145 hack: PATA port presence

	 * is asserted through the standard AHCI port

	 * presence register, as bit 4 (counting from 0)

 clear port IRQ */

	/* vt8251 doesn't clear BSY on signature FIS reception,

	 * request follow-up softreset.

 clear D2H reception area to properly wait for D2H FIS */

	/* The pseudo configuration device on SIMG4726 attached to

	 * ASUS P5W-DH Deluxe doesn't send signature FIS after

	 * hardreset if no device is attached to the first downstream

	 * port && the pseudo device locks up on SRST w/ PMP==0.  To

	 * work around this, wait for !BSY only briefly.  If BSY isn't

	 * cleared, perform CLO and proceed to IDENTIFY (achieved by

	 * ATA_LFLAG_NO_SRST and ATA_LFLAG_ASSUME_ATA).

	 *

	 * Wait for two seconds.  Devices attached to downstream port

	 * which can't process the following IDENTIFY after this will

	 * have to be reset again.  For most cases, this should

	 * suffice while making probing snappish enough.

/*

 * ahci_avn_hardreset - attempt more aggressive recovery of Avoton ports.

 *

 * It has been observed with some SSDs that the timing of events in the

 * link synchronization phase can leave the port in a state that can not

 * be recovered by a SATA-hard-reset alone.  The failing signature is

 * SStatus.DET stuck at 1 ("Device presence detected but Phy

 * communication not established").  It was found that unloading and

 * reloading the driver when this problem occurs allows the drive

 * connection to be recovered (DET advanced to 0x3).  The critical

 * component of reloading the driver is that the port state machines are

 * reset by bouncing "port enable" in the AHCI PCS configuration

 * register.  So, reproduce that effect by bouncing a port whenever we

 * see DET==1 after a reset.

 clear D2H reception area to properly wait for D2H FIS */

	/* AHCI spec rev1.1 section 8.3.3:

	 * Software must disable interrupts prior to requesting a

	 * transition of the HBA to D3 state.

 flush */

 Apple BIOS helpfully mangles the registers on resume */

 CONFIG_PM */

	/*

	 * If the device fixup already set the dma_mask to some non-standard

	 * value, don't extend it here. This happens on STA2X11, for example.

	 *

	 * XXX: manipulating the DMA mask from platform code is completely

	 * bogus, platform code should use dev->bus_dma_limit instead..

/* On ASUS P5W DH Deluxe, the second port of PCI device 00:1f.2 is

 * hardwired to on-board SIMG 4726.  The chipset is ICH8 and doesn't

 * support PMP and the 4726 either directly exports the device

 * attached to the first downstream port or acts as a hardware storage

 * controller and emulate a single ATA device (can be RAID 0/1 or some

 * other configuration).

 *

 * When there's no device attached to the first downstream port of the

 * 4726, "Config Disk" appears, which is a pseudo ATA device to

 * configure the 4726.  However, ATA emulation of the device is very

 * lame.  It doesn't send signature D2H Reg FIS after the initial

 * hardreset, pukes on SRST w/ PMP==0 and has bunch of other issues.

 *

 * The following function works around the problem by always using

 * hardreset on the port and not depending on receiving signature FIS

 * afterward.  If signature FIS isn't received soon, ATA class is

 * assumed without follow-up softreset.

/*

 * Macbook7,1 firmware forcibly disables MCP89 AHCI and changes PCI ID when

 * booting in BIOS compatibility mode.  We restore the registers but not ID.

 the following changes the device ID, but appears not to affect function */

 val = (val & ~0xf0000000) | 0x80000000; */

 only some SB600 ahci controllers can do 64bit DMA */

		/*

		 * The oldest version known to be broken is 0901 and

		 * working is 1501 which was released on 2007-10-26.

		 * Enable 64bit DMA on 1501 and anything newer.

		 *

		 * Please read bko#9412 for more info.

 yyyymmdd */

		/*

		 * All BIOS versions for the MSI K9A2 Platinum (MS-7376)

		 * support 64bit DMA.

		 *

		 * BIOS versions earlier than 1.5 had the Manufacturer DMI

		 * fields as "MICRO-STAR INTERANTIONAL CO.,LTD".

		 * This spelling mistake was fixed in BIOS version 1.5, so

		 * 1.5 and later have the Manufacturer as

		 * "MICRO-STAR INTERNATIONAL CO.,LTD".

		 * So try to match on DMI_BOARD_VENDOR of "MICRO-STAR INTER".

		 *

		 * BIOS versions earlier than 1.9 had a Board Product Name

		 * DMI field of "MS-7376". This was changed to be

		 * "K9A2 Platinum (MS-7376)" in version 1.9, but we can still

		 * match on DMI_BOARD_NAME of "MS-7376".

		/*

		 * All BIOS versions for the MSI K9AGM2 (MS-7327) support

		 * 64bit DMA.

		 *

		 * This board also had the typo mentioned above in the

		 * Manufacturer DMI field (fixed in BIOS version 1.5), so

		 * match on DMI_BOARD_VENDOR of "MICRO-STAR INTER" again.

		/*

		 * All BIOS versions for the Asus M3A support 64bit DMA.

		 * (all release versions from 0301 to 1206 were tested)

 PCI slot number of the controller */

 PCI slot number of the controller */

 terminate list */

 apply the quirk only to on-board controllers */

		/*

		 * On HP dv[4-6] and HDX18 with earlier BIOSen, link

		 * to the harddisk doesn't become online after

		 * resuming from STR.  Warn and fail suspend.

		 *

		 * http://bugzilla.kernel.org/show_bug.cgi?id=12276

		 *

		 * Use dates instead of versions to match as HP is

		 * apparently recycling both product and version

		 * strings.

		 *

		 * http://bugzilla.kernel.org/show_bug.cgi?id=15462

 F.30 */

 F.16 */

 F.21 */

 F.23 */

		/*

		 * Acer eMachines G725 has the same problem.  BIOS

		 * V1.03 is known to be broken.  V3.04 is known to

		 * work.  Between, there are V1.06, V2.06 and V3.03

		 * that we don't have much idea about.  For now,

		 * blacklist anything older than V3.04.

		 *

		 * http://bugzilla.kernel.org/show_bug.cgi?id=15104

 V3.04 */

 terminate list */

 Various Lenovo 50 series have LPM issues with older BIOSen */

 1.31 */

 1.28 */

 1.33 */

			/*

			 * Note date based on release notes, 2.35 has been

			 * reported to be good, but I've been unable to get

			 * a hold of the reporter to get the DMI BIOS date.

			 * TODO: fix this.

 2.35 */

 terminate list */

		/*

		 * There are several gigabyte boards which use

		 * SIMG5723s configured as hardware RAID.  Certain

		 * 5723 firmware revisions shipped there keep the link

		 * online but fail to answer properly to SRST or

		 * IDENTIFY when no device is attached downstream

		 * causing libata to retry quite a few times leading

		 * to excessive detection delay.

		 *

		 * As these firmwares respond to the second reset try

		 * with invalid device signature, considering unknown

		 * sig as offline works around the problem acceptably.

 terminate list */

 device with broken DEVSLP but still showing SDS capability */

 Valleyview SoC */

		/*

		 * Aspire 3810T issues a bunch of SATA enable commands

		 * via _GTF including an invalid one and one which is

		 * rejected by the device.  Among the successful ones

		 * is FPDMA non-zero offset enable which when enabled

		 * only on the drive side leads to NCQ command

		 * failures.  Filter it out.

/*

 * On the Acer Aspire Switch Alpha 12, sometimes all SATA ports are detected

 * as DUMMY, or detected but eventually get a "link down" and never get up

 * again. When this happens, CAP.NP may hold a value of 0x00 or 0x01, and the

 * port_map may hold a value of 0x00.

 *

 * Overriding CAP.NP to 0x02 and the port_map to 0x7 will reveal all 3 ports

 * and can significantly reduce the occurrence of the problem.

 *

 * https://bugzilla.kernel.org/show_bug.cgi?id=189471

/*

 * Due to ERRATA#22536, ThunderX needs to handle HOST_IRQ_STAT differently.

 * Workaround is to make sure all pending IRQs are served before leaving

 * handler.

	/*

	 * Check if this device might have remapped nvme devices.

 We've found a remapped device */

	/*

	 * Don't rely on the msi-x capability in the remap case,

	 * share the legacy interrupt across ahci and remapped devices.

	/*

	 * If number of MSIs is less than number of ports then Sharing Last

	 * Message mode could be enforced. In this case assume that advantage

	 * of multipe MSIs is negated and use single MSI mode instead.

			/*

			 * Fallback to single MSI mode if the controller

			 * enforced MRSM mode.

	/*

	 * If the host is not capable of supporting per-port vectors, fall

	 * back to single MSI before finally attempting single MSI-X.

 Ignore processing for non mobile platforms */

 user modified policy via module param */

	/*

	 * Only apply the 6-port PCS quirk for known legacy platforms.

 Skip applying the quirk on Denverton and beyond */

	/*

	 * port_map is determined from PORTS_IMPL PCI register which is

	 * implemented as write or write-once register.  If the register

	 * isn't programmed, ahci automatically generates it from number

	 * of ports, which is good enough for PCS programming. It is

	 * otherwise expected that platform firmware enables the ports

	 * before the OS boots.

	/* The AHCI driver can only drive the SATA ports, the PATA driver

	   can drive them all so if both drivers are selected make sure

 Apple BIOS on MCP89 prevents us using AHCI */

	/* Promise's PDC42819 is a SAS/SATA controller that has an AHCI mode.

	 * At the moment, we can only use the AHCI mode. Let the users know

	 * that for SAS drives they're out of luck.

 Some devices use non-standard BARs */

 acquire resources */

		/* ICH6s share the same PCI ID for both piix and ahci

		 * modes.  Enabling ahci mode while MAP indicates

		 * combined mode is a bad idea.  Yield to ata_piix.

	/* AHCI controllers often implement SFF compatible interface.

	 * Grab all PCI BARs just in case.

 MCP65 revision A1 and A2 can't do MSI */

 SB800 does NOT need the workaround to ignore SERR_INTERNAL */

 only some SB600s can do 64bit DMA */

 detect remapped nvme devices */

 must set flag prior to save config in order to take effect */

 save initial config */

	/*

	 * If platform firmware failed to enable ports, try to enable

	 * them here.

 prepare host */

		/*

		 * Auto-activate optimization is supposed to be

		 * supported on all AHCI controllers indicating NCQ

		 * capability, but it seems to be broken on some

		 * chipsets including NVIDIAs.

		/*

		 * All AHCI controllers should be forward-compatible

		 * with the new auxiliary field. This code should be

		 * conditionalized if any buggy AHCI controllers are

		 * encountered.

 Acer SA5-271 workaround modifies private_data */

	/* CAP.NP sometimes indicate the index of the last enabled

	 * port, at other times, that of the last possible port, so

	 * determining the maximum port number requires looking at

	 * both CAP.NP and port_map.

 legacy intx interrupts */

 set enclosure management message type */

 disabled/not-implemented port */

 apply workaround for ASUS P5W DH Deluxe mainboard */

 apply gtf filter quirk */

 initialize adapter */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * pata_serverworks.c 	- Serverworks PATA for new ATA layer

 *			  (C) 2005 Red Hat Inc

 *			  (C) 2010 Bartlomiej Zolnierkiewicz

 *

 * based upon

 *

 * serverworks.c

 *

 * Copyright (C) 1998-2000 Michel Aubry

 * Copyright (C) 1998-2000 Andrzej Krzysztofowicz

 * Copyright (C) 1998-2000 Andre Hedrick <andre@linux-ide.org>

 * Portions copyright (c) 2001 Sun Microsystems

 *

 *

 * RCC/ServerWorks IDE driver for Linux

 *

 *   OSB4: `Open South Bridge' IDE Interface (fn 1)

 *         supports UDMA mode 2 (33 MB/s)

 *

 *   CSB5: `Champion South Bridge' IDE Interface (fn 1)

 *         all revisions support UDMA mode 4 (66 MB/s)

 *         revision A2.0 and up support UDMA mode 5 (100 MB/s)

 *

 *         *** The CSB5 does not provide ANY register ***

 *         *** to detect 80-conductor cable presence. ***

 *

 *   CSB6: `Champion South Bridge' IDE Interface (optional: third channel)

 *

 * Documentation:

 *	Available under NDA only. Errata info very hard to get.

 min PCI_REVISION_ID for UDMA5 (A2.0) */

 min PCI_REVISION_ID for UDMA4 (A1.0) */

/* Seagate Barracuda ATA IV Family drives in UDMA mode 5

/**

 *	oem_cable	-	Dell/Sun serverworks cable detection

 *	@ap: ATA port to do cable detect

 *

 *	Dell PowerEdge and Sun Cobalt 'Alpine' hide the 40/80 pin select

 *	for their interfaces in the top two bits of the subsystem ID.

/**

 *	serverworks_cable_detect	-	cable detection

 *	@ap: ATA port

 *

 *	Perform cable detection according to the device and subvendor

 *	identifications

 kill compiler warning */

/**

 *	serverworks_is_csb	-	Check for CSB or OSB

 *	@pdev: PCI device to check

 *

 *	Returns true if the device being checked is known to be a CSB

 *	series device.

/**

 *	serverworks_osb4_filter	-	mode selection filter

 *	@adev: ATA device

 *	@mask: Mask of proposed modes

 *

 *	Filter the offered modes for the device to apply controller

 *	specific rules. OSB4 requires no UDMA for disks due to a FIFO

 *	bug we hit.

/**

 *	serverworks_csb_filter	-	mode selection filter

 *	@adev: ATA device

 *	@mask: Mask of proposed modes

 *

 *	Check the blacklist and disable UDMA5 if matched

 Disk, UDMA */

 Actually do need to check */

/**

 *	serverworks_set_piomode	-	set initial PIO mode data

 *	@ap: ATA interface

 *	@adev: ATA device

 *

 *	Program the OSB4/CSB5 timing registers for PIO. The PIO register

 *	load is done as a simple lookup.

	/* The OSB4 just requires the timing but the CSB series want the

/**

 *	serverworks_set_dmamode	-	set initial DMA mode data

 *	@ap: ATA interface

 *	@adev: ATA device

 *

 *	Program the MWDMA/UDMA modes for the serverworks OSB4/CSB5

 *	chipset. The MWDMA mode values are pulled from a lookup table

 *	while the chipset uses mode number for UDMA.

 disable 600ns interrupt mask */

 enable UDMA/33 support */

 Third Channel Test */

	/* setup the UDMA Control register

	 *

	 * 1. clear bit 6 to enable DMA

	 * 2. enable DMA modes with bits 0-1

	 * 	00 : legacy

	 * 	01 : udma2

	 * 	10 : udma2/udma4

	 * 	11 : udma2/udma4/udma5

 Setup HT1000 SouthBridge Controller - Single Channel Only */

 Force master latency timer to 64 PCI clocks */

 OSB4 */

 OSB4 no UDMA */

 No UDMA */

 CSB5 */

 CSB5 - later revisions*/

 OSB4 : South Bridge and IDE */

 Select non UDMA capable OSB4 if we can't do fixups */

 setup CSB5/CSB6 : South Bridge and IDE option RAID */

		 /* If the returned btr is the newer revision then

 Is this the 3rd channel CSB6 IDE ? */

/*

 * pata_it821x.c 	- IT821x PATA for new ATA layer

 *			  (C) 2005 Red Hat Inc

 *			  Alan Cox <alan@lxorguk.ukuu.org.uk>

 *			  (C) 2007 Bartlomiej Zolnierkiewicz

 *

 * based upon

 *

 * it821x.c

 *

 * linux/drivers/ide/pci/it821x.c		Version 0.09	December 2004

 *

 * Copyright (C) 2004		Red Hat

 *

 *  May be copied or modified under the terms of the GNU General Public License

 *  Based in part on the ITE vendor provided SCSI driver.

 *

 *  Documentation available from IT8212F_V04.pdf

 * 	http://www.ite.com.tw/EN/products_more.aspx?CategoryID=3&ID=5,91

 *  Some other documents are NDA.

 *

 *  The ITE8212 isn't exactly a standard IDE controller. It has two

 *  modes. In pass through mode then it is an IDE controller. In its smart

 *  mode its actually quite a capable hardware raid controller disguised

 *  as an IDE controller. Smart mode only understands DMA read/write and

 *  identify, none of the fancier commands apply. The IT8211 is identical

 *  in other respects but lacks the raid mode.

 *

 *  Errata:

 *  o	Rev 0x10 also requires master/slave hold the same DMA timings and

 *	cannot do ATAPI MWDMA.

 *  o	The identify data for raid volumes lacks CHS info (technically ok)

 *	but also fails to set the LBA28 and other bits. We fix these in

 *	the IDE probe quirk code.

 *  o	If you write LBA48 sized I/O's (ie > 256 sector) in smart mode

 *	raid then the controller firmware dies

 *  o	Smart mode without RAID doesn't clear all the necessary identify

 *	bits to reduce the command set to the one used

 *

 *  This has a few impacts on the driver

 *  - In pass through mode we do all the work you would expect

 *  - In smart mode the clocking set up is done by the controller generally

 *    but we must watch the other limits and filter.

 *  - There are a few extra vendor commands that actually talk to the

 *    controller but only work PIO with no IRQ.

 *

 *  Vendor areas of the identify block in smart mode are used for the

 *  timing and policy set up. Each HDD in raid mode also has a serial

 *  block on the disk. The hardware extra commands are get/set chip status,

 *  rebuild, get rebuild status.

 *

 *  In Linux the driver supports pass through mode as if the device was

 *  just another IDE controller. If the smart mode is running then

 *  volumes are managed by the controller firmware and each IDE "disk"

 *  is a raid volume. Even more cute - the controller can do automated

 *  hotplug and rebuild.

 *

 *  The pass through controller itself is a little demented. It has a

 *  flaw that it has a single set of PIO/MWDMA timings per channel so

 *  non UDMA devices restrict each others performance. It also has a

 *  single clock source per channel so mixed UDMA100/133 performance

 *  isn't perfect and we have to pick a clock. Thankfully none of this

 *  matters in smart mode. ATAPI DMA is not currently supported.

 *

 *  It seems the smart mode is a win for RAID1/RAID10 but otherwise not.

 *

 *  TODO

 *	-	ATAPI and other speed filtering

 *	-	RAID configuration ioctls

 Are we in smart raid mode */

 Rev 0x10 */

 0, ATA_50 or ATA_66 */

 Mode/Pri log for master slave */

	/* We need these for switching the clock when DMA goes on/off

 Cached PIO values */

 Cached MWDMA values */

 Cached UDMA values (per drive) */

 Master or slave loaded ? */

/*

 *	We allow users to force the card into non raid mode without

 *	flashing the alternative BIOS. This is also necessary right now

 *	for embedded platforms that cannot run a PC BIOS but are using this

 *	device.

/**

 *	it821x_program	-	program the PIO/MWDMA registers

 *	@ap: ATA port

 *	@adev: Device to program

 *	@timing: Timing value (66Mhz in top 8bits, 50 in the low 8)

 *

 *	Program the PIO/MWDMA timing for this channel according to the

 *	current clock. These share the same register so are managed by

 *	the DMA start/stop sequence as with the old driver.

 Program PIO/MWDMA timing bits */

/**

 *	it821x_program_udma	-	program the UDMA registers

 *	@ap: ATA port

 *	@adev: ATA device to update

 *	@timing: Timing bits. Top 8 are for 66Mhz bottom for 50Mhz

 *

 *	Program the UDMA timing for this drive according to the

 *	current clock. Handles the dual clocks and also knows about

 *	the errata on the 0x10 revision. The UDMA errata is partly handled

 *	here and partly in start_dma.

 Program UDMA timing bits */

 Early revision must be programmed for both together */

/**

 *	it821x_clock_strategy

 *	@ap: ATA interface

 *	@adev: ATA device being updated

 *

 *	Select between the 50 and 66Mhz base clocks to get the best

 *	results for this interface.

 Look for the most wanted clocking */

 Master doesn't care does the slave ? */

 Nobody cares - keep the same clock */

 No change */

 Load this into the controller */

	/*

	 *	Reprogram the UDMA/PIO of the pair drive for the switch

	 *	MWDMA will be dealt with by the dma switcher

	/*

	 *	Reprogram the UDMA/PIO of our drive for the switch.

	 *	MWDMA will be dealt with by the dma switcher

/**

 *	it821x_passthru_set_piomode	-	set PIO mode data

 *	@ap: ATA interface

 *	@adev: ATA device

 *

 *	Configure for PIO mode. This is complicated as the register is

 *	shared by PIO and MWDMA and for both channels.

 Spec says 89 ref driver uses 88 */

 We prefer 66Mhz clock for PIO 0-3, don't care for PIO4 */

 PIO is lowest priority */

/**

 *	it821x_passthru_set_dmamode	-	set initial DMA mode data

 *	@ap: ATA interface

 *	@adev: ATA device

 *

 *	Set up the DMA modes. The actions taken depend heavily on the mode

 *	to use. If UDMA is used as is hopefully the usual case then the

 *	timing register is private and we need only consider the clock. If

 *	we are using MWDMA then we have to manage the setting ourself as

 *	we switch devices and mode.

 UDMA is high priority */

 UDMA 5/6 select on */

 UDMA on. Again revision 0x10 must do the pair */

 MWDMA is low priority */

 UDMA bits off - Revision 0x10 do them in pairs */

/**

 *	it821x_passthru_bmdma_start	-	DMA start callback

 *	@qc: Command in progress

 *

 *	Usually drivers set the DMA timing at the point the set_dmamode call

 *	is made. IT821x however requires we load new timings on the

 *	transitions in some cases.

/**

 *	it821x_passthru_bmdma_stop	-	DMA stop callback

 *	@qc: ATA command

 *

 *	We loaded new timings in dma_start, as a result we need to restore

 *	the PIO timings in dma_stop so that the next command issue gets the

 *	right clock values.

/**

 *	it821x_passthru_dev_select	-	Select master/slave

 *	@ap: ATA port

 *	@device: Device number (not pointer)

 *

 *	Device selection hook. If necessary perform clock switching

/**

 *	it821x_smart_qc_issue		-	wrap qc issue prot

 *	@qc: command

 *

 *	Wrap the command issue sequence for the IT821x. We need to

 *	perform out own device selection timing loads before the

 *	usual happenings kick off

 Commands the firmware supports */

 Internal 'report rebuild state' */

 Arguably should just no-op this one */

/**

 *	it821x_passthru_qc_issue	-	wrap qc issue prot

 *	@qc: command

 *

 *	Wrap the command issue sequence for the IT821x. We need to

 *	perform out own device selection timing loads before the

 *	usual happenings kick off

/**

 *	it821x_smart_set_mode	-	mode setting

 *	@link: interface to set up

 *	@unused: device that failed (error only)

 *

 *	Use a non standard set_mode function. We don't want to be tuned.

 *	The BIOS configured everything. Our job is not to fiddle. We

 *	read the dma enabled bits from the PCI configuration of the device

 *	and respect them.

 We don't really care */

		/* We do need the right mode information for DMA or PIO

/**

 *	it821x_dev_config	-	Called each device identify

 *	@adev: Device that has just been identified

 *

 *	Perform the initial setup needed for each device that is chip

 *	special. In our case we need to lock the sector count to avoid

 *	blowing the brains out of the firmware with large LBA48 requests

 *

 RAID mode */

	/* This is a controller firmware triggered funny, don't

 No HPA in 'smart' mode */

/**

 *	it821x_read_id	-	Hack identify data up

 *	@adev: device to read

 *	@tf: proposed taskfile

 *	@id: buffer for returned ident data

 *

 *	Query the devices on this firmware driven port and slightly

 *	mash the identify data to stop us and common tools trying to

 *	use features not firmware supported. The firmware itself does

 *	some masking (eg SMART) but not enough.

 Cache flush is firmware handled */

 Ditto for LBA48 flushes */

 No FUA */

 No HPA */

 No NCQ/AN etc */

 Set feature bits the firmware neglects */

 LBA, DMA */

 Word 83 is valid and LBA48 */

 LBA48 on */

		/* Clear the serial number because it's different each boot

/**

 *	it821x_check_atapi_dma	-	ATAPI DMA handler

 *	@qc: Command we are about to issue

 *

 *	Decide if this ATAPI command can be issued by DMA on this

 *	controller. Return 0 if it can be.

 Only use dma for transfers to/from the media. */

 No ATAPI DMA in smart mode */

 No ATAPI DMA on rev 10 */

 Cool */

/**

 *	it821x_display_disk	-	display disk setup

 *	@n: Device number

 *	@buf: Buffer block from firmware

 *

 *	Produce a nice informative display of the device setup as provided

 *	by the firmware.

 No Disk */

/**

 *	it821x_firmware_command		-	issue firmware command

 *	@ap: IT821x port to interrogate

 *	@cmd: command

 *	@len: length

 *

 *	Issue firmware commands expecting data back from the controller. We

 *	use this to issue commands that do not go via the normal paths. Other

 *	commands such as 0xFC can be issued normally.

	/* This isn't quite a normal ATA command as we are talking to the

	/* This should be almost immediate but a little paranoia goes a long

/**

 *	it821x_probe_firmware	-	firmware reporting/setup

 *	@ap: IT821x port being probed

 *

 *	Probe the firmware of the controller by issuing firmware command

 *	0xFA and analysing the returned data.

	/* This is a bit ugly as we can't just issue a task file to a device

/**

 *	it821x_port_start	-	port setup

 *	@ap: ATA port being set up

 *

 *	The it821x needs to maintain private data structures and also to

 *	use the standard PCI interface which lacks support for this

 *	functionality. We instead set up the private data on the port

 *	start hook, and tear it down on port stop

		/* Long I/O's although allowed in LBA48 space cause the

 No ATAPI DMA in this mode either */

 Pull the current clocks from 0x50 */

 Need to disable ATAPI DMA for this case */

/**

 *	it821x_rdc_cable	-	Cable detect for RDC1010

 *	@ap: port we are checking

 *

 *	Return the RDC1010 cable type. Unlike the IT821x we know how to do

 *	this and can do host side cable detect

 Neither the RDC nor the IT8211 */

 Reset local CPU, and set BIOS not ready */

 Set to bypass mode, and reset PCI bus */

 No UDMA */

 Deal with Vortex86SX */

 Force the card into bypass mode if so requested */

 Resume - turn raid back off if need be */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  A low-level PATA driver to handle a Compact Flash connected on the

 *  Mikrotik's RouterBoard 532 board.

 *

 *  Copyright (C) 2007 Gabor Juhos <juhosg at openwrt.org>

 *  Copyright (C) 2008 Florian Fainelli <florian@openwrt.org>

 *

 *  This file was based on: drivers/ata/pata_ixp4xx_cf.c

 *	Copyright (C) 2006-07 Tower Technologies

 *	Author: Alessandro Zummo <a.zummo@towertech.it>

 *

 *  Also was based on the driver for Linux 2.4.xx published by Mikrotik for

 *  their RouterBoard 1xx and 5xx series devices. The original Mikrotik code

 *  seems not to have a license.

 32bit buffered data register offset */

 ------------------------------------------------------------------------ */

 ------------------------------------------------------------------------ */

 ------------------------------------------------------------------------ */

 allocate host */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Calxeda Highbank AHCI SATA platform driver

 * Copyright 2012 Calxeda, Inc.

 *

 * based on the AHCI SATA platform driver by Jeff Garzik and Anton Vorontsov

/* Each of the 6 phys can have up to 4 sata ports attached to i. Map 0-based

 * sata ports to their phys and then to their lanes within the phys

 number of extra clocks that the SGPIO PIC controller expects */

/*

 * Tell the LED controller that the signal has changed by raising the clock

 * line for 50 uS and then lowering it for 50 uS.

 get the slot number from the message */

	/*

	 * bit-bang out the SGPIO pattern, by consuming a bit and then

	 * clocking it out.

 save off new led state for port/slot */

 store em_loc */

/*

 * The Calxeda SATA phy intermittently fails to bring up a link with Gen3

 * Retrying the phy hard reset can work around the issue, but the drive

 * may fail again. In less than 150 out of 15000 test runs, it took more

 * than 10 tries for the link to be established (but never more than 35).

 * Triple the maximum observed retry count to provide plenty of margin for

 * rare events and to guarantee that the link is established.

 *

 * Also, the default 2 second time-out on a failed drive is too long in

 * this situation. The uboot implementation of the same driver function

 * uses a much shorter time-out period and never experiences a time out

 * issue. Reducing the time-out to 500ms improves the responsiveness.

 * The other timing constants were kept the same as the stock AHCI driver.

 * This change was also tested 15000 times on 24 drives and none of them

 * experienced a time out.

 clear D2H reception area to properly wait for D2H FIS */

		/* If the status is 1, we are connected, but the link did not

		 * come up. So retry resetting the link again.

 prepare host */

	/* CAP.NP sometimes indicate the index of the last enabled

	 * port, at other times, that of the last possible port, so

	 * determining the maximum port number requires looking at

	 * both CAP.NP and port_map.

 set enclosure management message type */

 disabled/not-implemented port */

	/*

	 * AHCI spec rev1.1 section 8.3.3:

	 * Software must disable interrupts prior to requesting a

	 * transition of the HBA to D3 state.

 flush */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  pata_rdc		-	Driver for later RDC PATA controllers

 *

 *  This is actually a driver for hardware meeting

 *  INCITS 370-2004 (1510D): ATA Host Adapter Standards

 *

 *  Based on ata_piix.

/**

 *	rdc_pata_cable_detect - Probe host controller cable detect info

 *	@ap: Port for which cable detect info is desired

 *

 *	Read 80c cable indicator from ATA PCI device's PCI config

 *	register.  This register is normally set by firmware (BIOS).

 *

 *	LOCKING:

 *	None (inherited from caller).

 check BIOS cable detect results */

/**

 *	rdc_pata_prereset - prereset for PATA host controller

 *	@link: Target link

 *	@deadline: deadline jiffies for the operation

 *

 *	LOCKING:

 *	None (inherited from caller).

 port 0 */

 port 1 */

/**

 *	rdc_set_piomode - Initialize host controller PATA PIO timings

 *	@ap: Port whose timings we are configuring

 *	@adev: um

 *

 *	Set PIO mode for device, in host controller PCI config space.

 *

 *	LOCKING:

 *	None (inherited from caller).

 ISP  RTC */

 TIME1 enable */

 IE enable */

 PPE enable */

	/* PIO configuration clears DTE unconditionally.  It will be

	 * programmed in set_dmamode which is guaranteed to be called

	 * after set_piomode if any DMA mode is available.

 clear TIME1|IE1|PPE1|DTE1 */

 Enable SITRE (separate slave timing register) */

 enable PPE1, IE1 and TIME1 as needed */

 Load the timing nibble for this slave */

 clear ISP|RCT|TIME0|IE0|PPE0|DTE0 */

 Enable PPE, IE and TIME as appropriate */

 load ISP and RCT */

	/* Ensure the UDMA bit is off - it will be turned back on if

/**

 *	rdc_set_dmamode - Initialize host controller PATA PIO timings

 *	@ap: Port whose timings we are configuring

 *	@adev: Drive in question

 *

 *	Set UDMA mode for device, in host controller PCI config space.

 *

 *	LOCKING:

 *	None (inherited from caller).

 ISP  RTC */

		/*

		 * UDMA is handled by a combination of clock switching and

		 * selection of dividers

		 *

		 * Handy rule: Odd modes are UDMATIMx 01, even are 02

		 *	       except UDMA0 which is 00

 100Mhz */

 66Mhz */

 33Mhz */

 Load the CT/RP selection */

 Select a 33/66/100Mhz clock */

		/*

		 * MWDMA is driven by the PIO timings. We must also enable

		 * IORDY unconditionally along with TIME1. PPE has already

		 * been set when the PIO timing was set.

 IORDY|TIME1 */

		/* If the drive MWDMA is faster than it can do PIO then

 Enable DMA timing only */

 PIO cycles in PIO0 */

 Slave */

 Mask out IORDY|TIME1|DMAONLY */

 Load the matching timing */

 Master */

			master_data &= 0xCCF4;	/* Mask out IORDY|TIME1|DMAONLY

/**

 *	rdc_init_one - Register PIIX ATA PCI device with kernel services

 *	@pdev: PCI device to register

 *	@ent: Entry in rdc_pci_tbl matching with @pdev

 *

 *	Called from kernel PCI layer.  We probe for combined mode (sigh),

 *	and then hand over control to libata, for it to do the rest.

 *

 *	LOCKING:

 *	Inherited from PCI layer (may sleep).

 *

 *	RETURNS:

 *	Zero on success, or -ERRNO value.

 enable device and prepare host */

	/* Save IOCFG, this will be used for cable detection, quirk

	 * detection and restoration on detach.

 terminate list */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * AHCI SATA platform library

 *

 * Copyright 2004-2005  Red Hat, Inc.

 *   Jeff Garzik <jgarzik@pobox.com>

 * Copyright 2010  MontaVista Software, LLC.

 *   Anton Vorontsov <avorontsov@ru.mvista.com>

/**

 * ahci_platform_enable_phys - Enable PHYs

 * @hpriv: host private area to store config values

 *

 * This function enables all the PHYs found in hpriv->phys, if any.

 * If a PHY fails to be enabled, it disables all the PHYs already

 * enabled in reverse order and returns an error.

 *

 * RETURNS:

 * 0 on success otherwise a negative error code

/**

 * ahci_platform_disable_phys - Disable PHYs

 * @hpriv: host private area to store config values

 *

 * This function disables all PHYs found in hpriv->phys.

/**

 * ahci_platform_enable_clks - Enable platform clocks

 * @hpriv: host private area to store config values

 *

 * This function enables all the clks found in hpriv->clks, starting at

 * index 0. If any clk fails to enable it disables all the clks already

 * enabled in reverse order, and then returns an error.

 *

 * RETURNS:

 * 0 on success otherwise a negative error code

/**

 * ahci_platform_disable_clks - Disable platform clocks

 * @hpriv: host private area to store config values

 *

 * This function disables all the clks found in hpriv->clks, in reverse

 * order of ahci_platform_enable_clks (starting at the end of the array).

/**

 * ahci_platform_enable_regulators - Enable regulators

 * @hpriv: host private area to store config values

 *

 * This function enables all the regulators found in controller and

 * hpriv->target_pwrs, if any.  If a regulator fails to be enabled, it

 * disables all the regulators already enabled in reverse order and

 * returns an error.

 *

 * RETURNS:

 * 0 on success otherwise a negative error code

/**

 * ahci_platform_disable_regulators - Disable regulators

 * @hpriv: host private area to store config values

 *

 * This function disables all regulators found in hpriv->target_pwrs and

 * AHCI controller.

/**

 * ahci_platform_enable_resources - Enable platform resources

 * @hpriv: host private area to store config values

 *

 * This function enables all ahci_platform managed resources in the

 * following order:

 * 1) Regulator

 * 2) Clocks (through ahci_platform_enable_clks)

 * 3) Resets

 * 4) Phys

 *

 * If resource enabling fails at any point the previous enabled resources

 * are disabled in reverse order.

 *

 * RETURNS:

 * 0 on success otherwise a negative error code

/**

 * ahci_platform_disable_resources - Disable platform resources

 * @hpriv: host private area to store config values

 *

 * This function disables all ahci_platform managed resources in the

 * following order:

 * 1) Phys

 * 2) Resets

 * 3) Clocks (through ahci_platform_disable_clks)

 * 4) Regulator

	/*

	 * The regulators are tied to child node device and not to the

	 * SATA device itself. So we can't use devm for automatically

	 * releasing them. We have to do it manually here.

 No PHY support. Check if PHY is required. */

 continue normally */

 Do not complain yet */

/**

 * ahci_platform_get_resources - Get platform resources

 * @pdev: platform device to get resources for

 * @flags: bitmap representing the resource to get

 *

 * This function allocates an ahci_host_priv struct, and gets the following

 * resources, storing a reference to them inside the returned struct:

 *

 * 1) mmio registers (IORESOURCE_MEM 0, mandatory)

 * 2) regulator for controlling the targets power (optional)

 *    regulator for controlling the AHCI controller (optional)

 * 3) 0 - AHCI_MAX_CLKS clocks, as specified in the devs devicetree node,

 *    or for non devicetree enabled platforms a single clock

 * 4) resets, if flags has AHCI_PLATFORM_GET_RESETS (optional)

 * 5) phys (optional)

 *

 * RETURNS:

 * The allocated ahci_host_priv on success, otherwise an ERR_PTR value

		/*

		 * For now we must use clk_get(dev, NULL) for the first clock,

		 * because some platforms (da850, spear13xx) are not yet

		 * converted to use devicetree for clocks.  For new platforms

		 * this is equivalent to of_clk_get(dev->of_node, 0).

	/*

	 * If no sub-node was found, we still need to set nports to

	 * one in order to be able to use the

	 * ahci_platform_[en|dis]able_[phys|regulators] functions.

	/*

	 * We cannot use devm_ here, since ahci_platform_put_resources() uses

	 * target_pwrs after devm_ have freed memory

		/*

		 * If no sub-node was found, keep this for device tree

		 * compatibility

/**

 * ahci_platform_init_host - Bring up an ahci-platform host

 * @pdev: platform device pointer for the host

 * @hpriv: ahci-host private data for the host

 * @pi_template: template for the ata_port_info to use

 * @sht: scsi_host_template to use when registering

 *

 * This function does all the usual steps needed to bring up an

 * ahci-platform host, note any necessary resources (ie clks, phys, etc.)

 * must be initialized / enabled before calling this.

 *

 * RETURNS:

 * 0 on success otherwise a negative error code

 prepare host */

	/* CAP.NP sometimes indicate the index of the last enabled

	 * port, at other times, that of the last possible port, so

	 * determining the maximum port number requires looking at

	 * both CAP.NP and port_map.

 set enclosure management message type */

 disabled/not-implemented port */

/**

 * ahci_platform_shutdown - Disable interrupts and stop DMA for host ports

 * @pdev: platform device pointer for the host

 *

 * This function is called during system shutdown and performs the minimal

 * deconfiguration required to ensure that an ahci_platform host cannot

 * corrupt or otherwise interfere with a new kernel being started with kexec.

 Disable port interrupts */

 Stop the port DMA engines */

 Disable and clear host interrupts */

 flush */

/**

 * ahci_platform_suspend_host - Suspend an ahci-platform host

 * @dev: device pointer for the host

 *

 * This function does all the usual steps needed to suspend an

 * ahci-platform host, note any necessary resources (ie clks, phys, etc.)

 * must be disabled after calling this.

 *

 * RETURNS:

 * 0 on success otherwise a negative error code

	/*

	 * AHCI spec rev1.1 section 8.3.3:

	 * Software must disable interrupts prior to requesting a

	 * transition of the HBA to D3 state.

 flush */

/**

 * ahci_platform_resume_host - Resume an ahci-platform host

 * @dev: device pointer for the host

 *

 * This function does all the usual steps needed to resume an ahci-platform

 * host, note any necessary resources (ie clks, phys, etc.)  must be

 * initialized / enabled before calling this.

 *

 * RETURNS:

 * 0 on success otherwise a negative error code

/**

 * ahci_platform_suspend - Suspend an ahci-platform device

 * @dev: the platform device to suspend

 *

 * This function suspends the host associated with the device, followed by

 * disabling all the resources of the device.

 *

 * RETURNS:

 * 0 on success otherwise a negative error code

/**

 * ahci_platform_resume - Resume an ahci-platform device

 * @dev: the platform device to resume

 *

 * This function enables all the resources of the device followed by

 * resuming the host associated with the device.

 *

 * RETURNS:

 * 0 on success otherwise a negative error code

 We resumed so update PM runtime state */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  sata_qstor.c - Pacific Digital Corporation QStor SATA

 *

 *  Maintained by:  Mark Lord <mlord@pobox.com>

 *

 *  Copyright 2005 Pacific Digital Corporation.

 *  (OSL/GPL code release authorized by Jalil Fadavi).

 *

 *  libata documentation is available via 'make {ps|pdf}docs',

 *  as Documentation/driver-api/libata.rst

 global register offsets */

 host configuration offset */

 host physical interface info */

 global interrupt mask offset */

 host status fifo offset */

 PHY enable offset */

 global control bits */

 64-bit bus detected */

 global chip reset */

 PHY detection ENAble*/

 per-channel register offsets */

 chan CPB base address */

 chan CPB separation factor */

 host upstream fifo threshold */

 host downstream fifo threshold */

 dev upstream fifo threshold */

 dev downstream fifo threshold */

 chan control-0 offset */

 chan control-1 offset */

 chan command fifo offset */

 channel control bits */

 register mode (vs. pkt mode) */

 clear channel errors */

 sata phy/comms reset */

 reset channel logic */

 RUN a new dma PKT */

 pkt sub-field headers */

 Host Control Block header */

 Device Control Block header */

 pkt HCB flag bits */

 data DIRection Out */

 DATa pkt */

 Interrupt ENable */

 VaLiD pkt */

 pkt DCB flag bits */

 Pio OR Dma */

 Extended LBA (lba48) */

 PCI device IDs */

 QStor 4-port SATA/RAID */

 board_2068_idx */

 terminate list */

 ATAPI DMA not supported */

 flush */

 flush */

 disable host interrupts */

 enable host interrupts */

 host control block (HCB) */

 device control block (DCB) */

 frame information structure (FIS) */

 flush PRDs and pkt to memory */

 flush */

 valid flag */

 empty flag */

 dev status */

 host status */

 successful CPB */

 device error */

			/*

			 * The qstor hardware generates spurious

			 * interrupts from time to time when switching

			 * in and out of packet mode.  There's no

			 * obvious way to know if we're here now due

			 * to that, so just ack the irq and pretend we

			 * knew it was ours.. (ugh).  This does not

			 * affect packet mode.

 hob_feature = 0x409 */

 hob_nsect   = 0x411 */

 hob_lbal    = 0x419 */

 hob_lbam    = 0x421 */

 hob_lbah    = 0x429 */

 disable host interrupts */

 global reset */

 disable host interrupts */

 global reset */

 reset each channel in turn */

 flush */

 enable phy */

 set FIFO depths to same settings as Windows driver */

 set CPB size in bytes, as a power of two */

 enable host interrupts */

/*

 * The QStor understands 64-bit buses, and uses 64-bit fields

 * for DMA pointers regardless of bus width.  We just have to

 * make sure our DMA masks are set appropriately for whatever

 * bridge lies between us and the QStor, and then the DMA mapping

 * code will ensure we only ever "see" appropriate buffer addresses.

 * If we're 32-bit limited somewhere, then our 64-bit fields will

 * just end up with zeros in the upper 32-bits, without any special

 * logic required outside of this routine (below).

 alloc host */

 acquire resources and fill host */

 initialize adapter */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  SATA specific part of ATA helper library

 *

 *  Copyright 2003-2004 Red Hat, Inc.  All rights reserved.

 *  Copyright 2003-2004 Jeff Garzik

 *  Copyright 2006 Tejun Heo <htejun@gmail.com>

 debounce timing parameters in msecs { interval, duration, timeout } */

/**

 *	sata_scr_valid - test whether SCRs are accessible

 *	@link: ATA link to test SCR accessibility for

 *

 *	Test whether SCRs are accessible for @link.

 *

 *	LOCKING:

 *	None.

 *

 *	RETURNS:

 *	1 if SCRs are accessible, 0 otherwise.

/**

 *	sata_scr_read - read SCR register of the specified port

 *	@link: ATA link to read SCR for

 *	@reg: SCR to read

 *	@val: Place to store read value

 *

 *	Read SCR register @reg of @link into *@val.  This function is

 *	guaranteed to succeed if @link is ap->link, the cable type of

 *	the port is SATA and the port implements ->scr_read.

 *

 *	LOCKING:

 *	None if @link is ap->link.  Kernel thread context otherwise.

 *

 *	RETURNS:

 *	0 on success, negative errno on failure.

/**

 *	sata_scr_write - write SCR register of the specified port

 *	@link: ATA link to write SCR for

 *	@reg: SCR to write

 *	@val: value to write

 *

 *	Write @val to SCR register @reg of @link.  This function is

 *	guaranteed to succeed if @link is ap->link, the cable type of

 *	the port is SATA and the port implements ->scr_read.

 *

 *	LOCKING:

 *	None if @link is ap->link.  Kernel thread context otherwise.

 *

 *	RETURNS:

 *	0 on success, negative errno on failure.

/**

 *	sata_scr_write_flush - write SCR register of the specified port and flush

 *	@link: ATA link to write SCR for

 *	@reg: SCR to write

 *	@val: value to write

 *

 *	This function is identical to sata_scr_write() except that this

 *	function performs flush after writing to the register.

 *

 *	LOCKING:

 *	None if @link is ap->link.  Kernel thread context otherwise.

 *

 *	RETURNS:

 *	0 on success, negative errno on failure.

/**

 *	ata_tf_to_fis - Convert ATA taskfile to SATA FIS structure

 *	@tf: Taskfile to convert

 *	@pmp: Port multiplier port

 *	@is_cmd: This FIS is for command

 *	@fis: Buffer into which data will output

 *

 *	Converts a standard ATA taskfile to a Serial ATA

 *	FIS structure (Register - Host to Device).

 *

 *	LOCKING:

 *	Inherited from caller.

 Register - Host to Device FIS */

 Port multiplier number*/

 bit 7 indicates Command FIS */

/**

 *	ata_tf_from_fis - Convert SATA FIS to ATA taskfile

 *	@fis: Buffer from which data will be input

 *	@tf: Taskfile to output

 *

 *	Converts a serial ATA FIS structure to a standard ATA taskfile.

 *

 *	LOCKING:

 *	Inherited from caller.

 status */

 error */

/**

 *	sata_link_debounce - debounce SATA phy status

 *	@link: ATA link to debounce SATA phy status for

 *	@params: timing parameters { interval, duration, timeout } in msec

 *	@deadline: deadline jiffies for the operation

 *

 *	Make sure SStatus of @link reaches stable state, determined by

 *	holding the same value where DET is not 1 for @duration polled

 *	every @interval, before @timeout.  Timeout constraints the

 *	beginning of the stable state.  Because DET gets stuck at 1 on

 *	some controllers after hot unplugging, this functions waits

 *	until timeout then returns 0 if DET is stable at 1.

 *

 *	@timeout is further limited by @deadline.  The sooner of the

 *	two is used.

 *

 *	LOCKING:

 *	Kernel thread context (may sleep)

 *

 *	RETURNS:

 *	0 on success, -errno on failure.

 DET stable? */

 unstable, start over */

		/* Check deadline.  If debouncing failed, return

		 * -EPIPE to tell upper layer to lower link speed.

/**

 *	sata_link_resume - resume SATA link

 *	@link: ATA link to resume SATA

 *	@params: timing parameters { interval, duration, timeout } in msec

 *	@deadline: deadline jiffies for the operation

 *

 *	Resume SATA phy @link and debounce it.

 *

 *	LOCKING:

 *	Kernel thread context (may sleep)

 *

 *	RETURNS:

 *	0 on success, -errno on failure.

	/*

	 * Writes to SControl sometimes get ignored under certain

	 * controllers (ata_piix SIDPR).  Make sure DET actually is

	 * cleared.

		/*

		 * Some PHYs react badly if SStatus is pounded

		 * immediately after resuming.  Delay 200ms before

		 * debouncing.

 is SControl restored correctly? */

 clear SError, some PHYs require this even for SRST to work */

/**

 *	sata_link_scr_lpm - manipulate SControl IPM and SPM fields

 *	@link: ATA link to manipulate SControl for

 *	@policy: LPM policy to configure

 *	@spm_wakeup: initiate LPM transition to active state

 *

 *	Manipulate the IPM field of the SControl register of @link

 *	according to @policy.  If @policy is ATA_LPM_MAX_POWER and

 *	@spm_wakeup is %true, the SPM field is manipulated to wake up

 *	the link.  This function also clears PHYRDY_CHG before

 *	returning.

 *

 *	LOCKING:

 *	EH context.

 *

 *	RETURNS:

 *	0 on success, -errno otherwise.

 disable all LPM transitions */

 initiate transition to active state */

 allow LPM to PARTIAL */

 no restrictions on LPM transitions */

 empty port, power off */

 give the link time to transit out of LPM state */

 clear PHYRDY_CHG from SError */

	/* Don't configure downstream link faster than upstream link.

	 * It doesn't speed up anything and some PMPs choke on such

	 * configuration.

/**

 *	sata_set_spd_needed - is SATA spd configuration needed

 *	@link: Link in question

 *

 *	Test whether the spd limit in SControl matches

 *	@link->sata_spd_limit.  This function is used to determine

 *	whether hardreset is necessary to apply SATA spd

 *	configuration.

 *

 *	LOCKING:

 *	Inherited from caller.

 *

 *	RETURNS:

 *	1 if SATA spd configuration is needed, 0 otherwise.

/**

 *	sata_set_spd - set SATA spd according to spd limit

 *	@link: Link to set SATA spd for

 *

 *	Set SATA spd of @link according to sata_spd_limit.

 *

 *	LOCKING:

 *	Inherited from caller.

 *

 *	RETURNS:

 *	0 if spd doesn't need to be changed, 1 if spd has been

 *	changed.  Negative errno if SCR registers are inaccessible.

/**

 *	sata_link_hardreset - reset link via SATA phy reset

 *	@link: link to reset

 *	@timing: timing parameters { interval, duration, timeout } in msec

 *	@deadline: deadline jiffies for the operation

 *	@online: optional out parameter indicating link onlineness

 *	@check_ready: optional callback to check link readiness

 *

 *	SATA phy-reset @link using DET bits of SControl register.

 *	After hardreset, link readiness is waited upon using

 *	ata_wait_ready() if @check_ready is specified.  LLDs are

 *	allowed to not specify @check_ready and wait itself after this

 *	function returns.  Device classification is LLD's

 *	responsibility.

 *

 *	*@online is set to one iff reset succeeded and @link is online

 *	after reset.

 *

 *	LOCKING:

 *	Kernel thread context (may sleep)

 *

 *	RETURNS:

 *	0 on success, -errno otherwise.

		/* SATA spec says nothing about how to reconfigure

		 * spd.  To be on the safe side, turn off phy during

		 * reconfiguration.  This works for at least ICH7 AHCI

		 * and Sil3124.

 issue phy wake/reset */

	/* Couldn't find anything in SATA I/II specs, but AHCI-1.1

	 * 10.4.2 says at least 1 ms.

 bring link back */

 if link is offline nothing more to do */

 Link is online.  From this point, -ENODEV too is an error. */

		/* If PMP is supported, we have to do follow-up SRST.

		 * Some PMPs don't send D2H Reg FIS after hardreset if

		 * the first port is empty.  Wait only for

		 * ATA_TMOUT_PMP_SRST_WAIT.

 online is set iff link is online && reset succeeded */

/**

 *	ata_qc_complete_multiple - Complete multiple qcs successfully

 *	@ap: port in question

 *	@qc_active: new qc_active mask

 *

 *	Complete in-flight commands.  This functions is meant to be

 *	called from low-level driver's interrupt routine to complete

 *	requests normally.  ap->qc_active and @qc_active is compared

 *	and commands are completed accordingly.

 *

 *	Always use this function when completing multiple NCQ commands

 *	from IRQ handlers instead of calling ata_qc_complete()

 *	multiple times to keep IRQ expect status properly in sync.

 *

 *	LOCKING:

 *	spin_lock_irqsave(host lock)

 *

 *	RETURNS:

 *	Number of completed commands on success, -errno otherwise.

	/*

	 * If the internal tag is set on ap->qc_active, then we care about

	 * bit0 on the passed in qc_active mask. Move that bit up to match

	 * the internal tag.

/**

 *	ata_slave_link_init - initialize slave link

 *	@ap: port to initialize slave link for

 *

 *	Create and initialize slave link for @ap.  This enables slave

 *	link handling on the port.

 *

 *	In libata, a port contains links and a link contains devices.

 *	There is single host link but if a PMP is attached to it,

 *	there can be multiple fan-out links.  On SATA, there's usually

 *	a single device connected to a link but PATA and SATA

 *	controllers emulating TF based interface can have two - master

 *	and slave.

 *

 *	However, there are a few controllers which don't fit into this

 *	abstraction too well - SATA controllers which emulate TF

 *	interface with both master and slave devices but also have

 *	separate SCR register sets for each device.  These controllers

 *	need separate links for physical link handling

 *	(e.g. onlineness, link speed) but should be treated like a

 *	traditional M/S controller for everything else (e.g. command

 *	issue, softreset).

 *

 *	slave_link is libata's way of handling this class of

 *	controllers without impacting core layer too much.  For

 *	anything other than physical link handling, the default host

 *	link is used for both master and slave.  For physical link

 *	handling, separate @ap->slave_link is used.  All dirty details

 *	are implemented inside libata core layer.  From LLD's POV, the

 *	only difference is that prereset, hardreset and postreset are

 *	called once more for the slave link, so the reset sequence

 *	looks like the following.

 *

 *	prereset(M) -> prereset(S) -> hardreset(M) -> hardreset(S) ->

 *	softreset(M) -> postreset(M) -> postreset(S)

 *

 *	Note that softreset is called only for the master.  Softreset

 *	resets both M/S by definition, so SRST on master should handle

 *	both (the standard method will work just fine).

 *

 *	LOCKING:

 *	Should be called before host is registered.

 *

 *	RETURNS:

 *	0 on success, -errno on failure.

/**

 *	sata_lpm_ignore_phy_events - test if PHY event should be ignored

 *	@link: Link receiving the event

 *

 *	Test whether the received PHY event has to be ignored or not.

 *

 *	LOCKING:

 *	None:

 *

 *	RETURNS:

 *	True if the event has to be ignored.

 if LPM is enabled, PHYRDY doesn't mean anything */

	/* ignore the first PHY event after the LPM policy changed

	 * as it is might be spurious

 UNKNOWN is internal state, iterate from MAX_POWER */

/**

 *	__ata_change_queue_depth - helper for ata_scsi_change_queue_depth

 *	@ap: ATA port to which the device change the queue depth

 *	@sdev: SCSI device to configure queue depth for

 *	@queue_depth: new queue depth

 *

 *	libsas and libata have different approaches for associating a sdev to

 *	its ata_port.

 *

 NCQ enabled? */

 limit and apply queue depth */

/**

 *	ata_scsi_change_queue_depth - SCSI callback for queue depth config

 *	@sdev: SCSI device to configure queue depth for

 *	@queue_depth: new queue depth

 *

 *	This is libata standard hostt->change_queue_depth callback.

 *	SCSI will call into this callback when user tries to set queue

 *	depth via sysfs.

 *

 *	LOCKING:

 *	SCSI layer (we don't care)

 *

 *	RETURNS:

 *	Newly configured queue depth.

/**

 *	ata_sas_port_alloc - Allocate port for a SAS attached SATA device

 *	@host: ATA host container for all SAS ports

 *	@port_info: Information from low-level host driver

 *	@shost: SCSI host that the scsi device is attached to

 *

 *	LOCKING:

 *	PCI/etc. bus probe sem.

 *

 *	RETURNS:

 *	ata_port pointer on success / NULL on failure.

/**

 *	ata_sas_port_start - Set port up for dma.

 *	@ap: Port to initialize

 *

 *	Called just after data structures for each port are

 *	initialized.

 *

 *	May be used as the port_start() entry in ata_port_operations.

 *

 *	LOCKING:

 *	Inherited from caller.

	/*

	 * the port is marked as frozen at allocation time, but if we don't

	 * have new eh, we won't thaw it

/**

 *	ata_sas_port_stop - Undo ata_sas_port_start()

 *	@ap: Port to shut down

 *

 *	May be used as the port_stop() entry in ata_port_operations.

 *

 *	LOCKING:

 *	Inherited from caller.

/**

 * ata_sas_async_probe - simply schedule probing and return

 * @ap: Port to probe

 *

 * For batch scheduling of probe for sas attached ata devices, assumes

 * the port has already been through ata_sas_port_init()

/**

 *	ata_sas_port_init - Initialize a SATA device

 *	@ap: SATA port to initialize

 *

 *	LOCKING:

 *	PCI/etc. bus probe sem.

 *

 *	RETURNS:

 *	Zero on success, non-zero on error.

/**

 *	ata_sas_port_destroy - Destroy a SATA port allocated by ata_sas_port_alloc

 *	@ap: SATA port to destroy

 *

/**

 *	ata_sas_slave_configure - Default slave_config routine for libata devices

 *	@sdev: SCSI device to configure

 *	@ap: ATA port to which SCSI device is attached

 *

 *	RETURNS:

 *	Zero.

/**

 *	ata_sas_queuecmd - Issue SCSI cdb to libata-managed device

 *	@cmd: SCSI command to be sent

 *	@ap:	ATA port to which the command is being sent

 *

 *	RETURNS:

 *	Return value from __ata_scsi_queuecmd() if @cmd can be queued,

 *	0 otherwise.

 the last tag is reserved for internal command. */

/**

 *	sata_async_notification - SATA async notification handler

 *	@ap: ATA port where async notification is received

 *

 *	Handler to be called when async notification via SDB FIS is

 *	received.  This function schedules EH if necessary.

 *

 *	LOCKING:

 *	spin_lock_irqsave(host lock)

 *

 *	RETURNS:

 *	1 if EH is scheduled, 0 otherwise.

 PMP is not attached or SNTF is not available */

			/* PMP is not attached.  Check whether ATAPI

			 * AN is configured.  If so, notify media

			 * change.

			/* PMP is attached but SNTF is not available.

			 * ATAPI async media change notification is

			 * not used.  The PMP must be reporting PHY

			 * status change, schedule EH.

 PMP is attached and SNTF is available */

 check and notify ATAPI AN */

		/* If PMP is reporting that PHY status of some

		 * downstream ports has changed, schedule EH.

/**

 *	ata_eh_read_log_10h - Read log page 10h for NCQ error details

 *	@dev: Device to read log page 10h from

 *	@tag: Resulting tag of the failed command

 *	@tf: Resulting taskfile registers of the failed command

 *

 *	Read log page 10h to obtain NCQ error details and clear error

 *	condition.

 *

 *	LOCKING:

 *	Kernel thread context (may sleep).

 *

 *	RETURNS:

 *	0 on success, -errno otherwise.

/**

 *	ata_eh_analyze_ncq_error - analyze NCQ error

 *	@link: ATA link to analyze NCQ error for

 *

 *	Read log page 10h, determine the offending qc and acquire

 *	error status TF.  For NCQ device errors, all LLDDs have to do

 *	is setting AC_ERR_DEV in ehi->err_mask.  This function takes

 *	care of the rest.

 *

 *	LOCKING:

 *	Kernel thread context (may sleep).

 if frozen, we can't do much */

 is it NCQ device error? */

 has LLDD analyzed already? */

 okay, this error is ours */

 we've got the perpetrator, condemn it */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * drivers/ata/sata_fsl.c

 *

 * Freescale 3.0Gbps SATA device driver

 *

 * Author: Ashish Kalra <ashish.kalra@freescale.com>

 * Li Yang <leoli@freescale.com>

 *

 * Copyright (c) 2006-2007, 2011-2012 Freescale Semiconductor, Inc.

 Controller information */

 Direct PRDT entries */

 4 DWORDS */

	/*

	 * SATA-FSL host controller supports a max. of (15+1) direct PRDEs, and

	 * chained indirect PRDEs up to a max count of 63.

	 * We are allocating an array of 63 PRDEs contiguously, but PRDE#15 will

	 * be setup as an indirect descriptor, pointing to it's next

	 * (contiguous) PRDE. Though chained indirect PRDE arrays are

	 * supported,it will be more efficient to use a direct PRDT and

	 * a single chain/link to indirect PRDE array/PRDT.

	/*

	 * MPC8315 has two SATA controllers, SATA1 & SATA2

	 * (one port per controller)

	 * MPC837x has 2/4 controllers, one port per controller

/*

/*

* Host Controller command register set - per port

	/*

	 * Host Status Register (HStatus) bitdefs

	/*

	 * Host Control Register (HControl) bitdefs

/*

 * SATA Superset Registers

/*

 * Control Status Register Set

 TRANSCFG (transport-layer) configuration control */

 PHY (link-layer) configuration control */

/*

 * Command Header Table entry, i.e, command slot

 * 4 Dwords per command slot, command header size ==  64 Dwords.

/*

 * Description information bitdefs

/*

 * Command Descriptor

/*

 * Physical region table descriptor(PRD)

/*

 * ata_port private data

 * This is our per-port instance data.

/*

 * ata_port->host_set private data

 We let libATA core do actual (queue) tag allocation */

 NOTE: both data_xfer_len & fis_len are Dword counts */

	/*

	 * NOTE : direct & indirect prdt's are contiguously allocated

 warn if each s/g element is not dword aligned */

 set indirect extension flag along with indirect ext. size */

 setup "ACMD - atapi command" in cmd. desc. if this is ATAPI cmd */

 Simply queue command to the controller/device */

 disable interrupts on the controller/port */

 ack. any pending IRQs for this controller/port */

 enable interrupts on the controller/port */

 enable interrupts on the controller/port */

 Now, update the CHBA register in host controller cmd register set */

	/*

	 * Now, we can bring the controller on-line & also initiate

	 * the COMINIT sequence, we simply return here and the boot-probing

	 * & device discovery process is re-initiated by libATA using a

	 * Softreset EH (dummy) session. Hence, boot probing and device

	 * discovey will be part of sata_fsl_softreset() callback.

	/*

	 * Force host controller to go off-line, aborting current operations

 Poll for controller to go offline - should happen immediately */

	/*

	 * Force host controller to go off-line, aborting current operations

 Poll for controller to go offline */

		/*

		 * Try to offline controller atleast twice

	/*

	 * PHY reset should remain asserted for atleast 1ms

	/*

	 * Now, bring the host controller online again, this can take time

	 * as PHY reset and communication establishment, 1st D2H FIS and

	 * device signature update is done, on safe side assume 500ms

	 * NOTE : Host online status may be indicated immediately!!

	/*

	 * First, wait for the PHYRDY change to occur before waiting for

	 * the signature, and also verify if SStatus indicates device

	 * presence

	/*

	 * Wait for the first D2H from device,i.e,signature update notification

	/*

	 * request libATA to perform follow-up softreset

	/*

	 * Send a device reset (SRST) explicitly on command slot #0

	 * Check : will the command queue (reg) be cleared during offlining ??

	 * Also we will be online only if Phy commn. has been established

	 * and device presence has been detected, therefore if we have

	 * reached here, we can send a command to the target device

 device reset/SRST is a control register update FIS, uses tag0 */

 setup SRST bit in taskfile control reg */

	/*

	 * Queue SRST command to the controller/device, ensure that no

	 * other commands are active on the controller/device

	/*

	 * SATA device enters reset state after receiving a Control register

	 * FIS with SRST bit asserted and it awaits another H2D Control reg.

	 * FIS with SRST bit cleared, then the device does internal diags &

	 * initialization, followed by indicating it's initialization status

	 * using ATA signature D2H register FIS to the host controller.

 2nd H2D Ctl. register FIS */

 ?? */

	/*

	 * The above command would have signalled an interrupt on command

	 * complete, which needs special handling, by clearing the Nth

	 * command bit of the CCreg

 We know it will be cmd#0 always */

 Verify if SStatus indicates device presence */

		/*

		 * if we are here, device presence has been detected,

		 * 1st D2H FIS would have been received, but sfis in

		 * command desc. is not updated, but signature register

		 * would have been updated

 make DMA engine forget about the failed command */

 first, analyze and record host port events */

	/*

	 * Handle & Clear SError

 handle fatal errors */

 Handle SDB FIS receive & notify update */

 Handle PHYRDY change notification */

 Setup a soft-reset EH action */

 handle single device errors */

		/*

		 * clear the command error, also clears queue to the device

		 * in error, and we can (re)issue commands to this device.

		 * When a device is in error all commands queued into the

		 * host controller and at the device are considered aborted

		 * and the queue for that device is stopped. Now, after

		 * clearing the device error, we can issue commands to the

		 * device to interrogate it to find the source of the error.

 find out the offending link and qc */

				/*

				 * We should consider this as non fatal error,

                                 * and TF must be updated as done below.

			/*

			 * We should consider this as non fatal error,

                         * and TF must be updated as done below.

 record error info */

 freeze or abort */

 Read command completed register */

 Workaround for data length mismatch errata */

 Set HControl[27] to clear error registers */

 Clear HControl[27] */

 Clear SError[E] bit */

 Ignore fatal error and device error */

 clear CC bit, this will also complete the interrupt */

 Spurious Interrupt!! */

 ack. any pending IRQs for this controller/port */

 Assuming one port per host controller */

/*

 * Multiple ports are represented by multiple SATA controllers with

 * one port per controller

	/*

	 * NOTE : We cannot bring the controller online before setting

	 * the CHBA, hence main controller initialization is done as

	 * part of the port_start() callback

 sata controller to operate in enterprise mode */

 ack. any pending IRQs for this controller/port */

 Keep interrupts disabled on the controller */

 Disable interrupt coalescing control(icc), for the moment */

 clear error registers, SError is cleared by libATA  */

 	/*

	 * reset the number of command complete bits which will cause the

	 * interrupt to be signaled

	/*

	 * host controller will be brought on-line, during xx_port_start()

	 * callback, that should also initiate the OOB, COMINIT sequence

/*

 * scsi mid-layer and libata interface structures

 allocate host structure */

 host->iomap is not used currently */

 initialize host controller */

	/*

	 * Now, register with libATA core, this will also initiate the

	 * device discovery process, invoking our port_start() handler &

	 * error_handler() to execute a dummy Softreset EH session

 Recovery the CHBA register in host controller cmd register set */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright 2008 ioogle, Inc.  All rights reserved.

 *

 * Libata transport class.

 *

 * The ATA transport class contains common code to deal with ATA HBAs,

 * an approximated representation of ATA topologies in the driver model,

 * and various sysfs attributes to expose these topologies and management

 * interfaces to user-space.

 *

 * There are 3 objects defined in in this class:

 * - ata_port

 * - ata_link

 * - ata_device

 * Each port has a link object. Each link can have up to two devices for PATA

 * and generally one for SATA.

 * If there is SATA port multiplier [PMP], 15 additional ata_link object are

 * created.

 *

 * These objects are created when the ata host is initialized and when a PMP is

 * found. They are removed only when the HBA is removed, cleaned before the

 * error handler runs.

	/*

	 * The array of null terminated pointers to attributes

	 * needed by scsi_sysfs.c

 Device objects are always created whit link objects */

/*

 * Hack to allow attributes of the same name in different objects.

/*

 * ATA Port attributes

/**

 * ata_is_port --  check if a struct device represents a ATA port

 * @dev:	device to check

 *

 * Returns:

 *	%1 if the device represents a ATA Port, %0 else

/**

 * ata_tport_delete  --  remove ATA PORT

 * @ap:	ATA PORT to remove

 *

 * Removes the specified ATA PORT.  Remove the associated link as well.

/** ata_tport_add - initialize a transport ATA port structure

 *

 * @parent:	parent device

 * @ap:		existing ata_port structure

 *

 * Initialize a ATA port structure for sysfs.  It will be added to the device

 * tree below the device specified by @parent which could be a PCI device.

 *

 * Returns %0 on success

/*

 * ATA link attributes

/**

 * ata_is_link --  check if a struct device represents a ATA link

 * @dev:	device to check

 *

 * Returns:

 *	%1 if the device represents a ATA link, %0 else

/**

 * ata_tlink_delete  --  remove ATA LINK

 * @link:	ATA LINK to remove

 *

 * Removes the specified ATA LINK.  remove associated ATA device(s) as well.

/**

 * ata_tlink_add  --  initialize a transport ATA link structure

 * @link:	allocated ata_link structure.

 *

 * Initialize an ATA LINK structure for sysfs.  It will be added in the

 * device tree below the ATA PORT it belongs to.

 *

 * Returns %0 on success

/*

 * ATA device attributes

/**

 * ata_is_ata_dev  --  check if a struct device represents a ATA device

 * @dev:	device to check

 *

 * Returns:

 *	%1 if the device represents a ATA device, %0 else

/**

 * ata_tdev_free  --  free a ATA LINK

 * @dev:	ATA PHY to free

 *

 * Frees the specified ATA PHY.

 *

 * Note:

 *   This function must only be called on a PHY that has not

 *   successfully been added using ata_tdev_add().

/**

 * ata_tdev_delete  --  remove ATA device

 * @ata_dev:	ATA device to remove

 *

 * Removes the specified ATA device.

/**

 * ata_tdev_add  --  initialize a transport ATA device structure.

 * @ata_dev:	ata_dev structure.

 *

 * Initialize an ATA device structure for sysfs.  It will be added in the

 * device tree below the ATA LINK device it belongs to.

 *

 * Returns %0 on success

/*

 * Setup / Teardown code

/**

 * ata_attach_transport  --  instantiate ATA transport template

/**

 * ata_release_transport  --  release ATA transport template instance

 * @t:		transport template instance

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * pata_atp867x.c - ARTOP 867X 64bit 4-channel UDMA133 ATA controller driver

 *

 *	(C) 2009 Google Inc. John(Jung-Ik) Lee <jilee@google.com>

 *

 * Per Atp867 data sheet rev 1.2, Acard.

 * Based in part on early ide code from

 *	2003-2004 by Eric Uhrhane, Google, Inc.

 *

 * TODO:

 *   1. RAID features [comparison, XOR, striping, mirroring, etc.]

/*

 * IO Registers

 * Note that all runtime hot priv ports are cached in ap private_data

	/*

	 * IO Register Bitfields

/*

 * hot priv ports

	/*

	 * Doc 6.6.9: decrease the udma mode value by 1 for safer UDMA speed

	 * on 66MHz bus

	 *   rev-A: UDMA_1~4 (5, 6 no change)

	 *   rev-B: all UDMA modes

	 *   UDMA_0 stays not to disable UDMA

	/*

	 * Doc 6.6.9: increase the clock value by 1 for safer PIO speed

	 * on 66MHz bus

 12 clk */

 default 8 clk */

 by the spec */

 default 12 clk */

 Check the PCI resources for this channel are enabled */

	/*

	 * Broken BIOS might not set latency high enough

	/*

	 * init 8bit io ports speed(0aaarrrr) to 43h and

	 * init udma modes of master/slave to 0/0(11h)

	/*

	 * init PreREAD counts

 Enable INTA#: bit4=0 means enable */

 Enable PCI burst, MRM & not immediate interrupts */

	/*

	 * Turn off the over clocked udma5 mode, only for Rev-B

	/*

	 * do not map rombase

	/*

	 * request, iomap BARs and init port addresses accordingly

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi_pci.c

 * Comedi PCI driver specific functions.

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1997-2000 David A. Schleef <ds@schleef.org>

/**

 * comedi_to_pci_dev() - Return PCI device attached to COMEDI device

 * @dev: COMEDI device.

 *

 * Assuming @dev->hw_dev is non-%NULL, it is assumed to be pointing to a

 * a &struct device embedded in a &struct pci_dev.

 *

 * Return: Attached PCI device if @dev->hw_dev is non-%NULL.

 * Return %NULL if @dev->hw_dev is %NULL.

/**

 * comedi_pci_enable() - Enable the PCI device and request the regions

 * @dev: COMEDI device.

 *

 * Assuming @dev->hw_dev is non-%NULL, it is assumed to be pointing to a

 * a &struct device embedded in a &struct pci_dev.  Enable the PCI device

 * and request its regions.  Set @dev->ioenabled to %true if successful,

 * otherwise undo what was done.

 *

 * Calls to comedi_pci_enable() and comedi_pci_disable() cannot be nested.

 *

 * Return:

 *	0 on success,

 *	-%ENODEV if @dev->hw_dev is %NULL,

 *	-%EBUSY if regions busy,

 *	or some negative error number if failed to enable PCI device.

 *

/**

 * comedi_pci_disable() - Release the regions and disable the PCI device

 * @dev: COMEDI device.

 *

 * Assuming @dev->hw_dev is non-%NULL, it is assumed to be pointing to a

 * a &struct device embedded in a &struct pci_dev.  If the earlier call

 * to comedi_pci_enable() was successful, release the PCI device's regions

 * and disable it.  Reset @dev->ioenabled back to %false.

/**

 * comedi_pci_detach() - A generic "detach" handler for PCI COMEDI drivers

 * @dev: COMEDI device.

 *

 * COMEDI drivers for PCI devices that need no special clean-up of private data

 * and have no ioremapped regions other than that pointed to by @dev->mmio may

 * use this function as its "detach" handler called by the COMEDI core when a

 * COMEDI device is being detached from the low-level driver.  It may be also

 * called from a more specific "detach" handler that does additional clean-up.

 *

 * Free the IRQ if @dev->irq is non-zero, iounmap @dev->mmio if it is

 * non-%NULL, and call comedi_pci_disable() to release the PCI device's regions

 * and disable it.

/**

 * comedi_pci_auto_config() - Configure/probe a PCI COMEDI device

 * @pcidev: PCI device.

 * @driver: Registered COMEDI driver.

 * @context: Driver specific data, passed to comedi_auto_config().

 *

 * Typically called from the pci_driver (*probe) function.  Auto-configure

 * a COMEDI device, using the &struct device embedded in *@pcidev as the

 * hardware device.  The @context value gets passed through to @driver's

 * "auto_attach" handler.  The "auto_attach" handler may call

 * comedi_to_pci_dev() on the passed in COMEDI device to recover @pcidev.

 *

 * Return: The result of calling comedi_auto_config() (0 on success, or

 * a negative error number on failure).

/**

 * comedi_pci_auto_unconfig() - Unconfigure/remove a PCI COMEDI device

 * @pcidev: PCI device.

 *

 * Typically called from the pci_driver (*remove) function.  Auto-unconfigure

 * a COMEDI device attached to this PCI device, using a pointer to the

 * &struct device embedded in *@pcidev as the hardware device.  The COMEDI

 * driver's "detach" handler will be called during unconfiguration of the

 * COMEDI device.

 *

 * Note that the COMEDI device may have already been unconfigured using the

 * %COMEDI_DEVCONFIG ioctl, in which case this attempt to unconfigure it

 * again should be ignored.

/**

 * comedi_pci_driver_register() - Register a PCI COMEDI driver

 * @comedi_driver: COMEDI driver to be registered.

 * @pci_driver: PCI driver to be registered.

 *

 * This function is called from the module_init() of PCI COMEDI driver modules

 * to register the COMEDI driver and the PCI driver.  Do not call it directly,

 * use the module_comedi_pci_driver() helper macro instead.

 *

 * Return: 0 on success, or a negative error number on failure.

/**

 * comedi_pci_driver_unregister() - Unregister a PCI COMEDI driver

 * @comedi_driver: COMEDI driver to be unregistered.

 * @pci_driver: PCI driver to be unregistered.

 *

 * This function is called from the module_exit() of PCI COMEDI driver modules

 * to unregister the PCI driver and the COMEDI driver.  Do not call it

 * directly, use the module_comedi_pci_driver() helper macro instead.

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 *  module/drivers.c

 *  functions for manipulating drivers

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 1997-2000 David A. Schleef <ds@schleef.org>

 *  Copyright (C) 2002 Frank Mori Hess <fmhess@users.sourceforge.net>

 protects access to comedi_drivers */

/**

 * comedi_set_hw_dev() - Set hardware device associated with COMEDI device

 * @dev: COMEDI device.

 * @hw_dev: Hardware device.

 *

 * For automatically configured COMEDI devices (resulting from a call to

 * comedi_auto_config() or one of its wrappers from the low-level COMEDI

 * driver), comedi_set_hw_dev() is called automatically by the COMEDI core

 * to associate the COMEDI device with the hardware device.  It can also be

 * called directly by "legacy" low-level COMEDI drivers that rely on the

 * %COMEDI_DEVCONFIG ioctl to configure the hardware as long as the hardware

 * has a &struct device.

 *

 * If @dev->hw_dev is NULL, it gets a reference to @hw_dev and sets

 * @dev->hw_dev, otherwise, it does nothing.  Calling it multiple times

 * with the same hardware device is not considered an error.  If it gets

 * a reference to the hardware device, it will be automatically 'put' when

 * the device is detached from COMEDI.

 *

 * Returns 0 if @dev->hw_dev was NULL or the same as @hw_dev, otherwise

 * returns -EEXIST.

/**

 * comedi_alloc_devpriv() - Allocate memory for the device private data

 * @dev: COMEDI device.

 * @size: Size of the memory to allocate.

 *

 * The allocated memory is zero-filled.  @dev->private points to it on

 * return.  The memory will be automatically freed when the COMEDI device is

 * "detached".

 *

 * Returns a pointer to the allocated memory, or NULL on failure.

/**

 * comedi_alloc_subdevices() - Allocate subdevices for COMEDI device

 * @dev: COMEDI device.

 * @num_subdevices: Number of subdevices to allocate.

 *

 * Allocates and initializes an array of &struct comedi_subdevice for the

 * COMEDI device.  If successful, sets @dev->subdevices to point to the

 * first one and @dev->n_subdevices to the number.

 *

 * Returns 0 on success, -EINVAL if @num_subdevices is < 1, or -ENOMEM if

 * failed to allocate the memory.

/**

 * comedi_alloc_subdev_readback() - Allocate memory for the subdevice readback

 * @s: COMEDI subdevice.

 *

 * This is called by low-level COMEDI drivers to allocate an array to record

 * the last values written to a subdevice's analog output channels (at least

 * by the %INSN_WRITE instruction), to allow them to be read back by an

 * %INSN_READ instruction.  It also provides a default handler for the

 * %INSN_READ instruction unless one has already been set.

 *

 * On success, @s->readback points to the first element of the array, which

 * is zero-filled.  The low-level driver is responsible for updating its

 * contents.  @s->insn_read will be set to comedi_readback_insn_read()

 * unless it is already non-NULL.

 *

 * Returns 0 on success, -EINVAL if the subdevice has no channels, or

 * -ENOMEM on allocation failure.

/**

 * comedi_readback_insn_read() - A generic (*insn_read) for subdevice readback.

 * @dev: COMEDI device.

 * @s: COMEDI subdevice.

 * @insn: COMEDI instruction.

 * @data: Pointer to return the readback data.

 *

 * Handles the %INSN_READ instruction for subdevices that use the readback

 * array allocated by comedi_alloc_subdev_readback().  It may be used

 * directly as the subdevice's handler (@s->insn_read) or called via a

 * wrapper.

 *

 * @insn->n is normally 1, which will read a single value.  If higher, the

 * same element of the readback array will be read multiple times.

 *

 * Returns @insn->n on success, or -EINVAL if @s->readback is NULL.

/**

 * comedi_timeout() - Busy-wait for a driver condition to occur

 * @dev: COMEDI device.

 * @s: COMEDI subdevice.

 * @insn: COMEDI instruction.

 * @cb: Callback to check for the condition.

 * @context: Private context from the driver.

 *

 * Busy-waits for up to a second (%COMEDI_TIMEOUT_MS) for the condition or

 * some error (other than -EBUSY) to occur.  The parameters @dev, @s, @insn,

 * and @context are passed to the callback function, which returns -EBUSY to

 * continue waiting or some other value to stop waiting (generally 0 if the

 * condition occurred, or some error value).

 *

 * Returns -ETIMEDOUT if timed out, otherwise the return value from the

 * callback function.

 success (0) or non EBUSY errno */

/**

 * comedi_dio_insn_config() - Boilerplate (*insn_config) for DIO subdevices

 * @dev: COMEDI device.

 * @s: COMEDI subdevice.

 * @insn: COMEDI instruction.

 * @data: Instruction parameters and return data.

 * @mask: io_bits mask for grouped channels, or 0 for single channel.

 *

 * If @mask is 0, it is replaced with a single-bit mask corresponding to the

 * channel number specified by @insn->chanspec.  Otherwise, @mask

 * corresponds to a group of channels (which should include the specified

 * channel) that are always configured together as inputs or outputs.

 *

 * Partially handles the %INSN_CONFIG_DIO_INPUT, %INSN_CONFIG_DIO_OUTPUTS,

 * and %INSN_CONFIG_DIO_QUERY instructions.  The first two update

 * @s->io_bits to record the directions of the masked channels.  The last

 * one sets @data[1] to the current direction of the group of channels

 * (%COMEDI_INPUT) or %COMEDI_OUTPUT) as recorded in @s->io_bits.

 *

 * The caller is responsible for updating the DIO direction in the hardware

 * registers if this function returns 0.

 *

 * Returns 0 for a %INSN_CONFIG_DIO_INPUT or %INSN_CONFIG_DIO_OUTPUT

 * instruction, @insn->n (> 0) for a %INSN_CONFIG_DIO_QUERY instruction, or

 * -EINVAL for some other instruction.

/**

 * comedi_dio_update_state() - Update the internal state of DIO subdevices

 * @s: COMEDI subdevice.

 * @data: The channel mask and bits to update.

 *

 * Updates @s->state which holds the internal state of the outputs for DIO

 * or DO subdevices (up to 32 channels).  @data[0] contains a bit-mask of

 * the channels to be updated.  @data[1] contains a bit-mask of those

 * channels to be set to '1'.  The caller is responsible for updating the

 * outputs in hardware according to @s->state.  As a minimum, the channels

 * in the returned bit-mask need to be updated.

 *

 * Returns @mask with non-existent channels removed.

/**

 * comedi_bytes_per_scan_cmd() - Get length of asynchronous command "scan" in

 * bytes

 * @s: COMEDI subdevice.

 * @cmd: COMEDI command.

 *

 * Determines the overall scan length according to the subdevice type and the

 * number of channels in the scan for the specified command.

 *

 * For digital input, output or input/output subdevices, samples for

 * multiple channels are assumed to be packed into one or more unsigned

 * short or unsigned int values according to the subdevice's %SDF_LSAMPL

 * flag.  For other types of subdevice, samples are assumed to occupy a

 * whole unsigned short or unsigned int according to the %SDF_LSAMPL flag.

 *

 * Returns the overall scan length in bytes.

/**

 * comedi_bytes_per_scan() - Get length of asynchronous command "scan" in bytes

 * @s: COMEDI subdevice.

 *

 * Determines the overall scan length according to the subdevice type and the

 * number of channels in the scan for the current command.

 *

 * For digital input, output or input/output subdevices, samples for

 * multiple channels are assumed to be packed into one or more unsigned

 * short or unsigned int values according to the subdevice's %SDF_LSAMPL

 * flag.  For other types of subdevice, samples are assumed to occupy a

 * whole unsigned short or unsigned int according to the %SDF_LSAMPL flag.

 *

 * Returns the overall scan length in bytes.

/**

 * comedi_nscans_left() - Return the number of scans left in the command

 * @s: COMEDI subdevice.

 * @nscans: The expected number of scans or 0 for all available scans.

 *

 * If @nscans is 0, it is set to the number of scans available in the

 * async buffer.

 *

 * If the async command has a stop_src of %TRIG_COUNT, the @nscans will be

 * checked against the number of scans remaining to complete the command.

 *

 * The return value will then be either the expected number of scans or the

 * number of scans remaining to complete the command, whichever is fewer.

/**

 * comedi_nsamples_left() - Return the number of samples left in the command

 * @s: COMEDI subdevice.

 * @nsamples: The expected number of samples.

 *

 * Returns the number of samples remaining to complete the command, or the

 * specified expected number of samples (@nsamples), whichever is fewer.

/**

 * comedi_inc_scan_progress() - Update scan progress in asynchronous command

 * @s: COMEDI subdevice.

 * @num_bytes: Amount of data in bytes to increment scan progress.

 *

 * Increments the scan progress by the number of bytes specified by @num_bytes.

 * If the scan progress reaches or exceeds the scan length in bytes, reduce

 * it modulo the scan length in bytes and set the "end of scan" asynchronous

 * event flag (%COMEDI_CB_EOS) to be processed later.

 track the 'cur_chan' for non-SDF_PACKED subdevices */

/**

 * comedi_handle_events() - Handle events and possibly stop acquisition

 * @dev: COMEDI device.

 * @s: COMEDI subdevice.

 *

 * Handles outstanding asynchronous acquisition event flags associated

 * with the subdevice.  Call the subdevice's @s->cancel() handler if the

 * "end of acquisition", "error" or "overflow" event flags are set in order

 * to stop the acquisition at the driver level.

 *

 * Calls comedi_event() to further process the event flags, which may mark

 * the asynchronous command as no longer running, possibly terminated with

 * an error, and may wake up tasks.

 *

 * Return a bit-mask of the handled events.

 mask */

 bits */

 do a little post-config cleanup */

/*

 * Generic recognize function for drivers that register their supported

 * board names.

 *

 * 'driv->board_name' points to a 'const char *' member within the

 * zeroth element of an array of some private board information

 * structure, say 'struct foo_board' containing a member 'const char

 * *board_name' that is initialized to point to a board name string that

 * is one of the candidates matched against this function's 'name'

 * parameter.

 *

 * 'driv->offset' is the size of the private board information

 * structure, say 'sizeof(struct foo_board)', and 'driv->num_names' is

 * the length of the array of private board information structures.

 *

 * If one of the board names in the array of private board information

 * structures matches the name supplied to this function, the function

 * returns a pointer to the pointer to the board name, otherwise it

 * returns NULL.  The return value ends up in the 'board_ptr' member of

 * a 'struct comedi_device' that the low-level comedi driver's

 * 'attach()' hook can convert to a point to a particular element of its

 * array of private board information structures by subtracting the

 * offset of the member that points to the board name.  (No subtraction

 * is required if the board name pointer is the first member of the

 * private board information structure, which is generally the case.)

/**

 * comedi_load_firmware() - Request and load firmware for a device

 * @dev: COMEDI device.

 * @device: Hardware device.

 * @name: The name of the firmware image.

 * @cb: Callback to the upload the firmware image.

 * @context: Private context from the driver.

 *

 * Sends a firmware request for the hardware device and waits for it.  Calls

 * the callback function to upload the firmware to the device, them releases

 * the firmware.

 *

 * Returns 0 on success, -EINVAL if @cb is NULL, or a negative error number

 * from the firmware request or the callback function.

/**

 * __comedi_request_region() - Request an I/O region for a legacy driver

 * @dev: COMEDI device.

 * @start: Base address of the I/O region.

 * @len: Length of the I/O region.

 *

 * Requests the specified I/O port region which must start at a non-zero

 * address.

 *

 * Returns 0 on success, -EINVAL if @start is 0, or -EIO if the request

 * fails.

/**

 * comedi_request_region() - Request an I/O region for a legacy driver

 * @dev: COMEDI device.

 * @start: Base address of the I/O region.

 * @len: Length of the I/O region.

 *

 * Requests the specified I/O port region which must start at a non-zero

 * address.

 *

 * On success, @dev->iobase is set to the base address of the region and

 * @dev->iolen is set to its length.

 *

 * Returns 0 on success, -EINVAL if @start is 0, or -EIO if the request

 * fails.

/**

 * comedi_legacy_detach() - A generic (*detach) function for legacy drivers

 * @dev: COMEDI device.

 *

 * This is a simple, generic 'detach' handler for legacy COMEDI devices that

 * just use a single I/O port region and possibly an IRQ and that don't need

 * any special clean-up for their private device or subdevice storage.  It

 * can also be called by a driver-specific 'detach' handler.

 *

 * If @dev->irq is non-zero, the IRQ will be freed.  If @dev->iobase and

 * @dev->iolen are both non-zero, the I/O port region will be released.

  recognize has failed if we get here */

  report valid board names before returning error */

 driver does not support manual configuration */

 On success, the driver module count has been incremented. */

/**

 * comedi_auto_config() - Create a COMEDI device for a hardware device

 * @hardware_device: Hardware device.

 * @driver: COMEDI low-level driver for the hardware device.

 * @context: Driver context for the auto_attach handler.

 *

 * Allocates a new COMEDI device for the hardware device and calls the

 * low-level driver's 'auto_attach' handler to set-up the hardware and

 * allocate the COMEDI subdevices.  Additional "post-configuration" setting

 * up is performed on successful return from the 'auto_attach' handler.

 * If the 'auto_attach' handler fails, the low-level driver's 'detach'

 * handler will be called as part of the clean-up.

 *

 * This is usually called from a wrapper function in a bus-specific COMEDI

 * module, which in turn is usually called from a bus device 'probe'

 * function in the low-level driver.

 *

 * Returns 0 on success, -EINVAL if the parameters are invalid or the

 * post-configuration determines the driver has set the COMEDI device up

 * incorrectly, -ENOMEM if failed to allocate memory, -EBUSY if run out of

 * COMEDI minor device numbers, or some negative error number returned by

 * the driver's 'auto_attach' handler.

 Note: comedi_alloc_board_minor() locked dev->mutex. */

		/*

		 * class_dev should be set properly here

		 *  after a successful auto config

/**

 * comedi_auto_unconfig() - Unconfigure auto-allocated COMEDI device

 * @hardware_device: Hardware device previously passed to

 *                   comedi_auto_config().

 *

 * Cleans up and eventually destroys the COMEDI device allocated by

 * comedi_auto_config() for the same hardware device.  As part of this

 * clean-up, the low-level COMEDI driver's 'detach' handler will be called.

 * (The COMEDI device itself will persist in an unattached state if it is

 * still open, until it is released, and any mmapped buffers will persist

 * until they are munmapped.)

 *

 * This is usually called from a wrapper module in a bus-specific COMEDI

 * module, which in turn is usually set as the bus device 'remove' function

 * in the low-level COMEDI driver.

/**

 * comedi_driver_register() - Register a low-level COMEDI driver

 * @driver: Low-level COMEDI driver.

 *

 * The low-level COMEDI driver is added to the list of registered COMEDI

 * drivers.  This is used by the handler for the "/proc/comedi" file and is

 * also used by the handler for the %COMEDI_DEVCONFIG ioctl to configure

 * "legacy" COMEDI devices (for those low-level drivers that support it).

 *

 * Returns 0.

/**

 * comedi_driver_unregister() - Unregister a low-level COMEDI driver

 * @driver: Low-level COMEDI driver.

 *

 * The low-level COMEDI driver is removed from the list of registered COMEDI

 * drivers.  Detaches any COMEDI devices attached to the driver, which will

 * result in the low-level driver's 'detach' handler being called for those

 * devices before this function returns.

 unlink the driver */

 check for devices using this driver */

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/comedi_fops.c

 * comedi kernel module

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1997-2007 David A. Schleef <ds@schleef.org>

 * compat ioctls:

 * Author: Ian Abbott, MEV Ltd. <abbotti@mev.co.uk>

 * Copyright (C) 2007 MEV Ltd. <http://www.mev.co.uk/>

/*

 * comedi_subdevice "runflags"

 * COMEDI_SRF_RT:		DEPRECATED: command is running real-time

 * COMEDI_SRF_ERROR:		indicates an COMEDI_CB_ERROR event has occurred

 *				since the last command was started

 * COMEDI_SRF_RUNNING:		command is running

 * COMEDI_SRF_FREE_SPRIV:	free s->private on detach

 *

 * COMEDI_SRF_BUSY_MASK:	runflags that indicate the subdevice is "busy"

/**

 * struct comedi_file - Per-file private data for COMEDI device

 * @dev: COMEDI device.

 * @read_subdev: Current "read" subdevice.

 * @write_subdev: Current "write" subdevice.

 * @last_detach_count: Last known detach count.

 * @last_attached: Last known attached/detached state.

 Note: indexed by minor - COMEDI_NUM_BOARD_MINORS. */

/**

 * comedi_dev_put() - Release a use of a COMEDI device

 * @dev: COMEDI device.

 *

 * Must be called when a user of a COMEDI device is finished with it.

 * When the last user of the COMEDI device calls this function, the

 * COMEDI device is destroyed.

 *

 * Return: 1 if the COMEDI device is destroyed by this call or @dev is

 * NULL, otherwise return 0.  Callers must not assume the COMEDI

 * device is still valid if this function returns 0.

/**

 * comedi_dev_get_from_minor() - Get COMEDI device by minor device number

 * @minor: Minor device number.

 *

 * Finds the COMEDI device associated with the minor device number, if any,

 * and increments its reference count.  The COMEDI device is prevented from

 * being freed until a matching call is made to comedi_dev_put().

 *

 * Return: A pointer to the COMEDI device if it exists, with its usage

 * reference incremented.  Return NULL if no COMEDI device exists with the

 * specified minor device number.

 make sure buffer is an integral number of pages (we round up) */

 sysfs attribute files */

/**

 * comedi_is_subdevice_running() - Check if async command running on subdevice

 * @s: COMEDI subdevice.

 *

 * Return: %true if an asynchronous COMEDI command is active on the

 * subdevice, else %false.

/**

 * comedi_set_spriv_auto_free() - Mark subdevice private data as freeable

 * @s: COMEDI subdevice.

 *

 * Mark the subdevice as having a pointer to private data that can be

 * automatically freed when the COMEDI device is detached from the low-level

 * driver.

/**

 * comedi_alloc_spriv - Allocate memory for the subdevice private data

 * @s: COMEDI subdevice.

 * @size: Size of the memory to allocate.

 *

 * Allocate memory for the subdevice private data and point @s->private

 * to it.  The memory will be freed automatically when the COMEDI device

 * is detached from the low-level driver.

 *

 * Return: A pointer to the allocated memory @s->private on success.

 * Return NULL on failure.

/*

 * This function restores a subdevice to an idle state.

/*

 * COMEDI_DEVCONFIG ioctl

 * attaches (and configures) or detaches a legacy device

 *

 * arg:

 *	pointer to comedi_devconfig structure (NULL if detaching)

 *

 * reads:

 *	comedi_devconfig structure (if attaching)

 *

 * writes:

 *	nothing

 don't re-use dynamically allocated comedi devices */

 This increments the driver module count on success. */

/*

 * COMEDI_BUFCONFIG ioctl

 * buffer configuration

 *

 * arg:

 *	pointer to comedi_bufconfig structure

 *

 * reads:

 *	comedi_bufconfig structure

 *

 * writes:

 *	modified comedi_bufconfig structure

/*

 * COMEDI_DEVINFO ioctl

 * device info

 *

 * arg:

 *	pointer to comedi_devinfo structure

 *

 * reads:

 *	nothing

 *

 * writes:

 *	comedi_devinfo structure

 fill devinfo structure */

/*

 * COMEDI_SUBDINFO ioctl

 * subdevices info

 *

 * arg:

 *	pointer to array of comedi_subdinfo structures

 *

 * reads:

 *	nothing

 *

 * writes:

 *	array of comedi_subdinfo structures

 fill subdinfo structs */

 backwards compatibility */

 XXX */

/*

 * COMEDI_CHANINFO ioctl

 * subdevice channel info

 *

 * arg:

 *	pointer to comedi_chaninfo structure

 *

 * reads:

 *	comedi_chaninfo structure

 *

 * writes:

 *	array of maxdata values to chaninfo->maxdata_list if requested

 *	array of range table lengths to chaninfo->range_table_list if requested

 flaglist not supported */

/*

 * COMEDI_BUFINFO ioctl

 * buffer information

 *

 * arg:

 *	pointer to comedi_bufinfo structure

 *

 * reads:

 *	comedi_bufinfo structure

 *

 * writes:

 *	modified comedi_bufinfo structure

 command was set up in "read" direction */

		/*

		 * If nothing left to read, and command has stopped, and

		 * {"read" position not updated or command stopped normally},

		 * then become non-busy.

 command was set up in "write" direction */

		/*

		 * by default we allow the insn since we don't have checks for

		 * all possible cases yet

		/*

		 * Big enough for config_id and the length of the userland

		 * memory buffer.  Additional length should be in factors of 2

		 * to communicate any returned route pairs (source,destination).

/**

 * get_valid_routes() - Calls low-level driver get_valid_routes function to

 *			either return a count of valid routes to user, or copy

 *			of list of all valid device routes to buffer in

 *			userspace.

 * @dev: comedi device pointer

 * @data: data from user insn call.  The length of the data must be >= 2.

 *	  data[0] must contain the INSN_DEVICE_CONFIG config_id.

 *	  data[1](input) contains the number of _pairs_ for which memory is

 *		  allotted from the user.  If the user specifies '0', then only

 *		  the number of pairs available is returned.

 *	  data[1](output) returns either the number of pairs available (if none

 *		  where requested) or the number of _pairs_ that are copied back

 *		  to the user.

 *	  data[2::2] returns each (source, destination) pair.

 *

 * Return: -EINVAL if low-level driver does not allocate and return routes as

 *	   expected.  Returns 0 otherwise.

 a non-subdevice instruction */

 unsigned data safe until 2106 */

				/*

				 * data[1] should be the number of _pairs_ that

				 * the memory can hold.

 other global device config instructions. */

 a subdevice instruction */

 are we locked? (ioctl lock) */

 This looks arbitrary.  It is. */

				/*

				 * Most drivers ignore the base channel in

				 * insn->chanspec.  Fix this here if

				 * the subdevice has <= 32 channels.

/*

 * COMEDI_INSNLIST ioctl

 * synchronous instruction list

 *

 * arg:

 *	pointer to comedi_insnlist structure

 *

 * reads:

 *	comedi_insnlist structure

 *	array of comedi_insn structures from insnlist->insns pointer

 *	data (for writes) from insns[].data pointers

 *

 * writes:

 *	data (for reads) to insns[].data pointers

 arbitrary limits */

 Determine maximum memory needed for all instructions. */

 Allocate scratch space for all instruction data. */

/*

 * COMEDI_INSN ioctl

 * synchronous instruction

 *

 * arg:

 *	pointer to comedi_insn structure

 *

 * reads:

 *	comedi_insn structure

 *	data (for writes) from insn->data pointer

 *

 * writes:

 *	data (for reads) to insn->data pointer

 This is where the behavior of insn and insnlist deviate. */

 make sure channel/gain list isn't too long */

	/*

	 * Set the CMDF_WRITE flag to the correct state if the subdevice

	 * supports only "read" commands or only "write" commands.

 make sure each element in channel/gain list is valid */

/*

 * COMEDI_CMD ioctl

 * asynchronous acquisition command set-up

 *

 * arg:

 *	pointer to comedi_cmd structure

 *

 * reads:

 *	comedi_cmd structure

 *	channel/range list from cmd->chanlist pointer

 *

 * writes:

 *	possibly modified comedi_cmd structure (when -EAGAIN returned)

 do some simple cmd validation */

 save user's chanlist pointer so it can be restored later */

 are we locked? (ioctl lock) */

 are we busy? */

 make sure channel/gain list isn't too short */

 load channel/gain list */

 restore chanlist pointer before copying back */

	/*

	 * Set s->busy _after_ setting COMEDI_SRF_RUNNING flag to avoid

	 * race with comedi_read() or comedi_write().

/*

 * COMEDI_CMDTEST ioctl

 * asynchronous acquisition command testing

 *

 * arg:

 *	pointer to comedi_cmd structure

 *

 * reads:

 *	comedi_cmd structure

 *	channel/range list from cmd->chanlist pointer

 *

 * writes:

 *	possibly modified comedi_cmd structure

 do some simple cmd validation */

 save user's chanlist pointer so it can be restored later */

 user_chanlist can be NULL for COMEDI_CMDTEST ioctl */

 load channel/gain list */

 free kernel copy of user chanlist */

 restore chanlist pointer before copying back */

/*

 * COMEDI_LOCK ioctl

 * lock subdevice

 *

 * arg:

 *	subdevice number

 *

 * reads:

 *	nothing

 *

 * writes:

 *	nothing

/*

 * COMEDI_UNLOCK ioctl

 * unlock subdevice

 *

 * arg:

 *	subdevice number

 *

 * reads:

 *	nothing

 *

 * writes:

 *	nothing

/*

 * COMEDI_CANCEL ioctl

 * cancel asynchronous acquisition

 *

 * arg:

 *	subdevice number

 *

 * reads:

 *	nothing

 *

 * writes:

 *	nothing

/*

 * COMEDI_POLL ioctl

 * instructs driver to synchronize buffers

 *

 * arg:

 *	subdevice number

 *

 * reads:

 *	nothing

 *

 * writes:

 *	nothing

/*

 * COMEDI_SETRSUBD ioctl

 * sets the current "read" subdevice on a per-file basis

 *

 * arg:

 *	subdevice number

 *

 * reads:

 *	nothing

 *

 * writes:

 *	nothing

 no change */

	/*

	 * Check the file isn't still busy handling a "read" command on the

	 * old subdevice (if any).

/*

 * COMEDI_SETWSUBD ioctl

 * sets the current "write" subdevice on a per-file basis

 *

 * arg:

 *	subdevice number

 *

 * reads:

 *	nothing

 *

 * writes:

 *	nothing

 no change */

	/*

	 * Check the file isn't still busy handling a "write" command on the

	 * old subdevice (if any).

	/*

	 * Device config is special, because it must work on

	 * an unconfigured device.

 Device config not appropriate on non-board minors. */

				/*

				 * Successfully unconfigured a dynamically

				 * allocated device.  Try and remove it.

	/*

	 * 'trylock' avoids circular dependency with current->mm->mmap_lock

	 * and down-reading &dev->attach_lock should normally succeed without

	 * contention unless the device is in the process of being attached

	 * or detached.

 get reference to current buf map (if any) */

		/*

		 * DMA buffer was allocated as a single block.

		 * Address is in page_list[0].

 put reference to buf map - okay if NULL */

 Protect against device detachment during operation. */

 Allocate all free buffer space. */

		/*

		 * To avoid deadlock, cannot acquire dev->mutex

		 * while dev->attach_lock is held.

		/*

		 * Check device hasn't become detached behind our back.

		 * Checking dev->detach_count is unchanged ought to be

		 * sufficient (unless there have been 2**32 detaches in the

		 * meantime!), but check the subdevice pointer as well just in

		 * case.

		 *

		 * Also check the subdevice is still in a suitable state to

		 * become non-busy in case it changed behind our back.

 Protect against device detachment during operation. */

		/*

		 * To avoid deadlock, cannot acquire dev->mutex

		 * while dev->attach_lock is held.

		/*

		 * Check device hasn't become detached behind our back.

		 * Checking dev->detach_count is unchanged ought to be

		 * sufficient (unless there have been 2**32 detaches in the

		 * meantime!), but check the subdevice pointer as well just in

		 * case.

		 *

		 * Also check the subdevice is still in a suitable state to

		 * become non-busy in case it changed behind our back.

/*

 * N.B. COMEDI32_CMD and COMEDI_CMD ought to use _IOWR, not _IOR.

 * It's too late to change it now, but it only affects the command number.

/*

 * N.B. COMEDI32_CMDTEST and COMEDI_CMDTEST ought to use _IOWR, not _IOR.

 * It's too late to change it now, but it only affects the command number.

 32-bit 'unsigned int *' */

 32-bit 'unsigned int *' */

 32-bit 'unsigned int *' */

 32-bit 'void *' */

 32-bit 'unsigned int *' */

 32-bit 'short *' */

 32-bit 'unsigned int *' */

 32-bit 'struct comedi_insn *' */

 Handle 32-bit COMEDI_CHANINFO ioctl. */

 Handle 32-bit COMEDI_RANGEINFO ioctl. */

 Copy 32-bit cmd structure to native cmd structure. */

 Copy native cmd structure to 32-bit cmd structure. */

 Assume chanlist pointer is unchanged. */

 Handle 32-bit COMEDI_CMD ioctl. */

 Special case: copy cmd back to user. */

 Handle 32-bit COMEDI_CMDTEST ioctl. */

 Copy 32-bit insn structure to native insn structure. */

 Copy insn structure.  Ignore the unused members. */

 Handle 32-bit COMEDI_INSNLIST ioctl. */

 Copy insn structures. */

 Handle 32-bit COMEDI_INSN ioctl. */

/*

 * compat_ioctl file operation.

 *

 * Returns -ENOIOCTLCMD for unrecognised ioctl codes.

 Just need to translate the pointer argument. */

 No translation needed. */

/**

 * comedi_event() - Handle events for asynchronous COMEDI command

 * @dev: COMEDI device.

 * @s: COMEDI subdevice.

 * Context: in_interrupt() (usually), @s->spin_lock spin-lock not held.

 *

 * If an asynchronous COMEDI command is active on the subdevice, process

 * any %COMEDI_CB_... event flags that have been set, usually by an

 * interrupt handler.  These may change the run state of the asynchronous

 * command, wake a task, and/or send a %SIGIO signal.

	/*

	 * Remember if an error event has occurred, so an error can be

	 * returned the next time the user does a read() or write().

 Note: the ->mutex is pre-locked on successful return */

 Note: dev->mutex needs to be unlocked by the caller. */

www.comedi.org\n");

 create devices files for legacy/manual use */

 comedi_alloc_board_minor() locked the mutex */

 XXX requires /proc interface */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/range.c

 * comedi routines for voltage ranges

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1997-8 David A. Schleef <ds@schleef.org>

/*

 * COMEDI_RANGEINFO ioctl

 * range information

 *

 * arg:

 *	pointer to comedi_rangeinfo structure

 *

 * reads:

 *	comedi_rangeinfo structure

 *

 * writes:

 *	array of comedi_krange structures to rangeinfo->range_ptr pointer

/**

 * comedi_check_chanlist() - Validate each element in a chanlist.

 * @s: comedi_subdevice struct

 * @n: number of elements in the chanlist

 * @chanlist: the chanlist to validate

 *

 * Each element consists of a channel number, a range index, an analog

 * reference type and some flags, all packed into an unsigned int.

 *

 * This checks that the channel number and range index are supported by

 * the comedi subdevice.  It does not check whether the analog reference

 * type and the flags are supported.  Drivers that care should check those

 * themselves.

 *

 * Return: %0 if all @chanlist elements are valid (success),

 *         %-EINVAL if one or more elements are invalid.

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi_usb.c

 * Comedi USB driver specific functions.

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1997-2000 David A. Schleef <ds@schleef.org>

/**

 * comedi_to_usb_interface() - Return USB interface attached to COMEDI device

 * @dev: COMEDI device.

 *

 * Assuming @dev->hw_dev is non-%NULL, it is assumed to be pointing to a

 * a &struct device embedded in a &struct usb_interface.

 *

 * Return: Attached USB interface if @dev->hw_dev is non-%NULL.

 * Return %NULL if @dev->hw_dev is %NULL.

/**

 * comedi_to_usb_dev() - Return USB device attached to COMEDI device

 * @dev: COMEDI device.

 *

 * Assuming @dev->hw_dev is non-%NULL, it is assumed to be pointing to a

 * a &struct device embedded in a &struct usb_interface.

 *

 * Return: USB device to which the USB interface belongs if @dev->hw_dev is

 * non-%NULL.  Return %NULL if @dev->hw_dev is %NULL.

/**

 * comedi_usb_auto_config() - Configure/probe a USB COMEDI driver

 * @intf: USB interface.

 * @driver: Registered COMEDI driver.

 * @context: Driver specific data, passed to comedi_auto_config().

 *

 * Typically called from the usb_driver (*probe) function.  Auto-configure a

 * COMEDI device, using a pointer to the &struct device embedded in *@intf as

 * the hardware device.  The @context value gets passed through to @driver's

 * "auto_attach" handler.  The "auto_attach" handler may call

 * comedi_to_usb_interface() on the passed in COMEDI device to recover @intf.

 *

 * Return: The result of calling comedi_auto_config() (%0 on success, or

 * a negative error number on failure).

/**

 * comedi_usb_auto_unconfig() - Unconfigure/disconnect a USB COMEDI device

 * @intf: USB interface.

 *

 * Typically called from the usb_driver (*disconnect) function.

 * Auto-unconfigure a COMEDI device attached to this USB interface, using a

 * pointer to the &struct device embedded in *@intf as the hardware device.

 * The COMEDI driver's "detach" handler will be called during unconfiguration

 * of the COMEDI device.

 *

 * Note that the COMEDI device may have already been unconfigured using the

 * %COMEDI_DEVCONFIG ioctl, in which case this attempt to unconfigure it

 * again should be ignored.

/**

 * comedi_usb_driver_register() - Register a USB COMEDI driver

 * @comedi_driver: COMEDI driver to be registered.

 * @usb_driver: USB driver to be registered.

 *

 * This function is called from the module_init() of USB COMEDI driver modules

 * to register the COMEDI driver and the USB driver.  Do not call it directly,

 * use the module_comedi_usb_driver() helper macro instead.

 *

 * Return: %0 on success, or a negative error number on failure.

/**

 * comedi_usb_driver_unregister() - Unregister a USB COMEDI driver

 * @comedi_driver: COMEDI driver to be registered.

 * @usb_driver: USB driver to be registered.

 *

 * This function is called from the module_exit() of USB COMEDI driver modules

 * to unregister the USB driver and the COMEDI driver.  Do not call it

 * directly, use the module_comedi_usb_driver() helper macro instead.

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * /proc interface for comedi

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1998 David A. Schleef <ds@schleef.org>

/*

 * This is some serious bloatware.

 *

 * Taken from Dave A.'s PCL-711 driver, 'cuz I thought it

 * was cool.

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi_pcmcia.c

 * Comedi PCMCIA driver specific functions.

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1997-2000 David A. Schleef <ds@schleef.org>

/**

 * comedi_to_pcmcia_dev() - Return PCMCIA device attached to COMEDI device

 * @dev: COMEDI device.

 *

 * Assuming @dev->hw_dev is non-%NULL, it is assumed to be pointing to a

 * a &struct device embedded in a &struct pcmcia_device.

 *

 * Return: Attached PCMCIA device if @dev->hw_dev is non-%NULL.

 * Return %NULL if @dev->hw_dev is %NULL.

/**

 * comedi_pcmcia_enable() - Request the regions and enable the PCMCIA device

 * @dev: COMEDI device.

 * @conf_check: Optional callback to check each configuration option of the

 *	PCMCIA device and request I/O regions.

 *

 * Assuming @dev->hw_dev is non-%NULL, it is assumed to be pointing to a a

 * &struct device embedded in a &struct pcmcia_device.  The comedi PCMCIA

 * driver needs to set the 'config_flags' member in the &struct pcmcia_device,

 * as appropriate for that driver, before calling this function in order to

 * allow pcmcia_loop_config() to do its internal autoconfiguration.

 *

 * If @conf_check is %NULL it is set to a default function.  If is

 * passed to pcmcia_loop_config() and should return %0 if the configuration

 * is valid and I/O regions requested successfully, otherwise it should return

 * a negative error value.  The default function returns -%EINVAL if the

 * 'config_index' member is %0, otherwise it calls pcmcia_request_io() and

 * returns the result.

 *

 * If the above configuration check passes, pcmcia_enable_device() is called

 * to set up and activate the PCMCIA device.

 *

 * If this function returns an error, comedi_pcmcia_disable() should be called

 * to release requested resources.

 *

 * Return:

 *	0 on success,

 *	-%ENODEV id @dev->hw_dev is %NULL,

 *	a negative error number from pcmcia_loop_config() if it fails,

 *	or a negative error number from pcmcia_enable_device() if it fails.

/**

 * comedi_pcmcia_disable() - Disable the PCMCIA device and release the regions

 * @dev: COMEDI device.

 *

 * Assuming @dev->hw_dev is non-%NULL, it is assumed to be pointing to a

 * a &struct device embedded in a &struct pcmcia_device.  Call

 * pcmcia_disable_device() to disable and clean up the PCMCIA device.

/**

 * comedi_pcmcia_auto_config() - Configure/probe a PCMCIA COMEDI device

 * @link: PCMCIA device.

 * @driver: Registered COMEDI driver.

 *

 * Typically called from the pcmcia_driver (*probe) function.  Auto-configure

 * a COMEDI device, using a pointer to the &struct device embedded in *@link

 * as the hardware device.  The @driver's "auto_attach" handler may call

 * comedi_to_pcmcia_dev() on the passed in COMEDI device to recover @link.

 *

 * Return: The result of calling comedi_auto_config() (0 on success, or a

 * negative error number on failure).

/**

 * comedi_pcmcia_auto_unconfig() - Unconfigure/remove a PCMCIA COMEDI device

 * @link: PCMCIA device.

 *

 * Typically called from the pcmcia_driver (*remove) function.

 * Auto-unconfigure a COMEDI device attached to this PCMCIA device, using a

 * pointer to the &struct device embedded in *@link as the hardware device.

 * The COMEDI driver's "detach" handler will be called during unconfiguration

 * of the COMEDI device.

 *

 * Note that the COMEDI device may have already been unconfigured using the

 * %COMEDI_DEVCONFIG ioctl, in which case this attempt to unconfigure it

 * again should be ignored.

/**

 * comedi_pcmcia_driver_register() - Register a PCMCIA COMEDI driver

 * @comedi_driver: COMEDI driver to be registered.

 * @pcmcia_driver: PCMCIA driver to be registered.

 *

 * This function is used for the module_init() of PCMCIA COMEDI driver modules

 * to register the COMEDI driver and the PCMCIA driver.  Do not call it

 * directly, use the module_comedi_pcmcia_driver() helper macro instead.

 *

 * Return: 0 on success, or a negative error number on failure.

/**

 * comedi_pcmcia_driver_unregister() - Unregister a PCMCIA COMEDI driver

 * @comedi_driver: COMEDI driver to be registered.

 * @pcmcia_driver: PCMCIA driver to be registered.

 *

 * This function is called from the module_exit() of PCMCIA COMEDI driver

 * modules to unregister the PCMCIA driver and the COMEDI driver.  Do not call

 * it directly, use the module_comedi_pcmcia_driver() helper macro instead.

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi_buf.c

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1997-2000 David A. Schleef <ds@schleef.org>

 * Copyright (C) 2002 Frank Mori Hess <fmhess@users.sourceforge.net>

			/*

			 * DMA buffer was allocated as a single block.

			 * Address is in page_list[0].

 Need ref to hardware device to free buffer later. */

		/*

		 * Currently, the DMA buffer needs to be allocated as a

		 * single block so that it can be mmap()'ed.

		/*

		 * DMA buffer was allocated as a single block.

		 * Address is in page_list[0].

 vmap the pages to prealloc_buf */

 helper for "access" vm operation */

 returns s->async->buf_map and increments its kref refcount */

 only want it if buffer pages allocated */

 Round up new_size to multiple of PAGE_SIZE */

 if no change is required, do nothing */

 deallocate old buffer */

 allocate new buffer */

 allocation failed */

/**

 * comedi_buf_write_alloc() - Reserve buffer space for writing

 * @s: COMEDI subdevice.

 * @nbytes: Maximum space to reserve in bytes.

 *

 * Reserve up to @nbytes bytes of space to be written in the COMEDI acquisition

 * data buffer associated with the subdevice.  The amount reserved is limited

 * by the space available.

 *

 * Return: The amount of space reserved in bytes.

	/*

	 * ensure the async buffer 'counts' are read and updated

	 * before we write data to the write-alloc'ed buffer space

/*

 * munging is applied to data by core as it passes between user

 * and kernel space

 don't munge partial samples */

		/*

		 * ensure data is munged in buffer before the

		 * async buffer munge_count is incremented

/**

 * comedi_buf_write_free() - Free buffer space after it is written

 * @s: COMEDI subdevice.

 * @nbytes: Maximum space to free in bytes.

 *

 * Free up to @nbytes bytes of space previously reserved for writing in the

 * COMEDI acquisition data buffer associated with the subdevice.  The amount of

 * space freed is limited to the amount that was reserved.  The freed space is

 * assumed to have been filled with sample data by the writer.

 *

 * If the samples in the freed space need to be "munged", do so here.  The

 * freed space becomes available for allocation by the reader.

 *

 * Return: The amount of space freed in bytes.

/**

 * comedi_buf_read_n_available() - Determine amount of readable buffer space

 * @s: COMEDI subdevice.

 *

 * Determine the amount of readable buffer space in the COMEDI acquisition data

 * buffer associated with the subdevice.  The readable buffer space is that

 * which has been freed by the writer and "munged" to the sample data format

 * expected by COMEDI if necessary.

 *

 * Return: The amount of readable buffer space.

	/*

	 * ensure the async buffer 'counts' are read before we

	 * attempt to read data from the buffer

/**

 * comedi_buf_read_alloc() - Reserve buffer space for reading

 * @s: COMEDI subdevice.

 * @nbytes: Maximum space to reserve in bytes.

 *

 * Reserve up to @nbytes bytes of previously written and "munged" buffer space

 * for reading in the COMEDI acquisition data buffer associated with the

 * subdevice.  The amount reserved is limited to the space available.  The

 * reader can read from the reserved space and then free it.  A reader is also

 * allowed to read from the space before reserving it as long as it determines

 * the amount of readable data available, but the space needs to be marked as

 * reserved before it can be freed.

 *

 * Return: The amount of space reserved in bytes.

	/*

	 * ensure the async buffer 'counts' are read before we

	 * attempt to read data from the read-alloc'ed buffer space

/**

 * comedi_buf_read_free() - Free buffer space after it has been read

 * @s: COMEDI subdevice.

 * @nbytes: Maximum space to free in bytes.

 *

 * Free up to @nbytes bytes of buffer space previously reserved for reading in

 * the COMEDI acquisition data buffer associated with the subdevice.  The

 * amount of space freed is limited to the amount that was reserved.

 *

 * The freed space becomes available for allocation by the writer.

 *

 * Return: The amount of space freed in bytes.

	/*

	 * ensure data has been read out of buffer before

	 * the async read count is incremented

/**

 * comedi_buf_write_samples() - Write sample data to COMEDI buffer

 * @s: COMEDI subdevice.

 * @data: Pointer to source samples.

 * @nsamples: Number of samples to write.

 *

 * Write up to @nsamples samples to the COMEDI acquisition data buffer

 * associated with the subdevice, mark it as written and update the

 * acquisition scan progress.  If there is not enough room for the specified

 * number of samples, the number of samples written is limited to the number

 * that will fit and the %COMEDI_CB_OVERFLOW event flag is set to cause the

 * acquisition to terminate with an overrun error.  Set the %COMEDI_CB_BLOCK

 * event flag if any samples are written to cause waiting tasks to be woken

 * when the event flags are processed.

 *

 * Return: The amount of data written in bytes.

	/*

	 * Make sure there is enough room in the buffer for all the samples.

	 * If not, clamp the nsamples to the number that will fit, flag the

	 * buffer overrun and add the samples that fit.

/**

 * comedi_buf_read_samples() - Read sample data from COMEDI buffer

 * @s: COMEDI subdevice.

 * @data: Pointer to destination.

 * @nsamples: Maximum number of samples to read.

 *

 * Read up to @nsamples samples from the COMEDI acquisition data buffer

 * associated with the subdevice, mark it as read and update the acquisition

 * scan progress.  Limit the number of samples read to the number available.

 * Set the %COMEDI_CB_BLOCK event flag if any samples are read to cause waiting

 * tasks to be woken when the event flags are processed.

 *

 * Return: The amount of data read in bytes.

 clamp nsamples to the number of full samples available */

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/cb_pcidas64.c

 * This is a driver for the ComputerBoards/MeasurementComputing PCI-DAS

 * 64xx, 60xx, and 4020 cards.

 *

 * Author:  Frank Mori Hess <fmhess@users.sourceforge.net>

 * Copyright (C) 2001, 2002 Frank Mori Hess

 *

 * Thanks also go to the following people:

 *

 * Steve Rosenbluth, for providing the source code for

 * his pci-das6402 driver, and source code for working QNX pci-6402

 * drivers by Greg Laird and Mariusz Bogacz.  None of the code was

 * used directly here, but it was useful as an additional source of

 * documentation on how to program the boards.

 *

 * John Sims, for much testing and feedback on pcidas-4020 support.

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1997-8 David A. Schleef <ds@schleef.org>

/*

 * Driver: cb_pcidas64

 * Description: MeasurementComputing PCI-DAS64xx, 60XX, and 4020 series

 *   with the PLX 9080 PCI controller

 * Author: Frank Mori Hess <fmhess@users.sourceforge.net>

 * Status: works

 * Updated: Fri, 02 Nov 2012 18:58:55 +0000

 * Devices: [Measurement Computing] PCI-DAS6402/16 (cb_pcidas64),

 *   PCI-DAS6402/12, PCI-DAS64/M1/16, PCI-DAS64/M2/16,

 *   PCI-DAS64/M3/16, PCI-DAS6402/16/JR, PCI-DAS64/M1/16/JR,

 *   PCI-DAS64/M2/16/JR, PCI-DAS64/M3/16/JR, PCI-DAS64/M1/14,

 *   PCI-DAS64/M2/14, PCI-DAS64/M3/14, PCI-DAS6013, PCI-DAS6014,

 *   PCI-DAS6023, PCI-DAS6025, PCI-DAS6030,

 *   PCI-DAS6031, PCI-DAS6032, PCI-DAS6033, PCI-DAS6034,

 *   PCI-DAS6035, PCI-DAS6036, PCI-DAS6040, PCI-DAS6052,

 *   PCI-DAS6070, PCI-DAS6071, PCI-DAS4020/12

 *

 * Configuration options:

 *   None.

 *

 * Manual attachment of PCI cards with the comedi_config utility is not

 * supported by this driver; they are attached automatically.

 *

 * These boards may be autocalibrated with the comedi_calibrate utility.

 *

 * To select the bnc trigger input on the 4020 (instead of the dio input),

 * specify a nonzero channel in the chanspec.  If you wish to use an external

 * master clock on the 4020, you may do so by setting the scan_begin_src

 * to TRIG_OTHER, and using an INSN_CONFIG_TIMER_1 configuration insn

 * to configure the divisor to use for the external clock.

 *

 * Some devices are not identified because the PCI device IDs are not yet

 * known. If you have such a board, please let the maintainers know.

/*

 * TODO:

 * make it return error if user attempts an ai command that uses the

 * external queue, and an ao command simultaneously user counter subdevice

 * there are a number of boards this driver will support when they are

 * fully released, but does not yet since the pci device id numbers

 * are not yet available.

 *

 * support prescaled 100khz clock for slow pacing (not available on 6000

 * series?)

 *

 * make ao fifo size adjustable like ai fifo

  40MHz master clock */

/*

 * 100kHz 'prescaled' clock for slow acquisition,

 * maybe I'll support this someday

 maximum value that can be loaded into board's 24-bit counters */

 PCI-DAS64xxx base addresses */

 devpriv->main_iobase registers */

 interrupt enable register */

 hardware config register */

 adc control register 0 */

 adc control register 1 */

 lower 16 bits of adc sample interval counter */

 upper 8 bits of adc sample interval counter */

 lower 16 bits of delay interval counter */

 upper 8 bits of delay interval counter */

 lower 16 bits of hardware conversion/scan counter */

 upper 8 bits of hardware conversion/scan counter */

 software trigger to start acquisition */

 initiates single conversion */

 clears adc queue */

 loads adc queue */

 high channel for internal queue, use adc_chan_bits() inline above */

 dac control register 0 */

 dac control register 0 */

 lower 16 bits of dac sample interval counter */

 upper 8 bits of dac sample interval counter */

 clear dac buffer */

	/*

	 * hardware status register,

	 * reading this apparently clears pending interrupts as well

 8255 offset, for 4020 only */

 external channel/gain queue, uses same bits as ADC_QUEUE_LOAD_REG */

 adc data fifo */

 dac data fifo, has weird interactions with external channel queue */

 dev->mmio registers */

 bit definitions for write-only registers */

 adc interrupt source mask */

 interrupt fifo quarter full */

 interrupt end of conversion */

 interrupt end of scan */

 interrupt end of sequence mask */

 enable adc interrupt source */

 enable adc acquisition done intr */

 enable dac interrupt source */

 enable adc active interrupt */

 enable adc stop trigger interrupt */

 enable dac active interrupt */

 enable dac underrun status bit */

 enable adc overrun status bit */

 master clock source mask for 4020 */

 use 40 MHz internal master clock */

 use BNC input for master clock */

 use dio input for master clock */

 use external channel/gain queue */

 use 225 nanosec strobe when loading dac instead of 50 nanosec */

	/*

	 * bit with unknown function yet given as default value in pci-das64

	 * manual

 bit selects channels 1/0 for analog input/output, otherwise 0/1 */

 allows adjustment of fifo sizes */

 bits that set dac fifo size */

 8k sample ao fifo */

 use trig/ext clk bnc input for analog gate signal */

 use trig/ext clk bnc input for external stop trigger signal */

 use trig/ext clk bnc input for external start trigger signal */

 bits that select gate */

 software gate */

 external digital gate */

 analog level gate */

 level-sensitive gate (for digital) */

 gate active low */

 trig 1 uses falling edge */

 external pacing uses falling edge */

 enable hardware scan counter */

 disables dma */

 master adc enable */

 should be set for boards with > 16 channels */

 software gate of adc */

 turn on extra noise for dithering */

 two channel mode for 4020 */

 four channel mode for 4020 */

 calibration enable for 64xx series */

 calibration enable for 60xx series */

/*

 * calibration sources for 6025 are:

 *  0 : ground

 *  1 : 10V

 *  2 : 5V

 *  3 : 0.5V

 *  4 : 0.05V

 *  5 : ground

 *  6 : dac channel 0

 *  7 : dac channel 1

 unipolar/bipolar bit */

 single-ended/ differential bit */

 non-referenced single-ended (common-mode input) */

 queue end of sequence */

 queue end of scan */

 dac controller enable bit */

 board-dependent setting */

 dac output enable bit */

 board-dependent setting */

 bit definitions for read-only registers */

 I2C addresses for 4020 */

 bits that set what source the adc converter measures */

 make bnc trig/ext clock threshold 0V instead of 2.5V */

 attenuate channel (+-5V input range) */

 analog input ranges for 64xx boards */

 bipolar 10, 5, 2,5, 1.25 */

 unipolar 10, 5, 2.5, 1.25 */

 analog input ranges for 64-Mx boards */

 bipolar 5, 2.5, 1.25, 0.625 */

 unipolar 5, 2.5, 1.25 */

 analog input ranges for 60xx boards */

 bipolar 10, 5, 0.5, 0.05 */

 analog input ranges for 6030, etc boards */

 bip 10, 5, 2, 1, 0.5, 0.2, 0.1 */

 uni 10, 5, 2, 1, 0.5, 0.2, 0.1 */

 analog input ranges for 6052, etc boards */

 bipolar 10 ... 0.05 */

 unipolar 10 ... 0.1 */

 analog input ranges for 4020 board */

 analog output ranges */

 number of ai inputs in single-ended mode */

 analog input resolution */

 fastest conversion period in ns */

 number of analog out channels */

 analog output resolution */

 analog output scan speed */

 different board families have slightly different registers */

/*

 * maximum number of dma transfers we will chain together into a ring

 * (and the maximum number of dma buffers we maintain)

 XXX check */

 no hardware pacing on ao */

 The device id for these boards is unknown */

 master clock divisor to use for scans with external master clock */

 chanspec for master clock input when used as scan begin src */

 this structure is for data unique to this hardware driver. */

 base addresses (physical) */

 base addresses (ioremapped) */

 local address (used by dma controller) */

 dma buffers for analog input */

 physical addresses of ai dma buffers */

	/*

	 * array of ai dma descriptors read by plx9080,

	 * allocated to get proper alignment

 physical address of ai dma descriptor array */

	/*

	 * index of the ai dma descriptor/buffer

	 * that is currently being used

 dma buffers for analog output */

 physical addresses of ao dma buffers */

 keeps track of buffer where the next ao sample should go */

 stc chip hardware revision number */

 last bits sent to INTR_ENABLE_REG register */

 last bits sent to ADC_CONTROL1_REG register */

 last bits sent to FIFO_SIZE_REG register */

 last bits sent to HW_CONFIG_REG register */

 last bits written to plx9080 control register */

 last bits written to plx interrupt control and status register */

 index of calibration source readable through ai ch0 */

 bits written to i2c calibration/range register */

 configure digital triggers to trigger on falling edge */

 spinlock for plx dma control/status reg */

	/*

	 * Use pio transfer and interrupt on end of conversion

	 * if CMDF_WAKE_EOS flag is set.

 4020 doesn't support pio transfers except for fifo dregs */

 initialize plx9080 chip */

 configure dma0 mode */

 enable ready input, not sure if this is necessary */

 enable bterm, not sure if this is necessary */

 enable dma chaining */

	/*

	 * enable interrupt on dma done

	 * (probably don't need this, since chain never finishes)

	/*

	 * don't increment local address during transfers

	 * (we are transferring from a fixed fifo register)

 route dma interrupt to pci bus */

 enable demand mode */

 enable local burst mode */

 4020 uses 32 bit dma */

 localspace0 bus is 16 bits wide */

 enable interrupts on plx 9080 */

 disable pacing, triggering, etc */

 1 == 256 entries, 2 == 512 entries, etc */

/*

 * adjusts the size of hardware fifo (which determines block size for dma xfers)

 query length of fifo */

	/*

	 * bit should be set for 6025,

	 * although docs say boards with <= 16 chans should be cleared XXX

 6402/16 manual says this register must be initialized to 0xff? */

 set fifos to maximum size */

 EN_DAC_INTR_SRC_BIT | DAC_INTR_QEMPTY_BITS | */

 allocate pci dma buffers */

 allocate dma descriptors */

 initialize dma descriptors */

 free pci dma buffers */

 free dma descriptors */

/*

 * their i2c requires a huge delay on setting clock or data high for some reason

 set i2c data line high or low */

 set data line high */

 set data line low */

 set i2c clock line high or low */

 set clock line high */

 set clock line low */

 we can't really read the lines, so fake it */

 return fake acknowledge bit */

 send start bit */

 send stop bit */

	/*

	 * XXX need mutex to prevent simultaneous attempts to access

	 * eeprom and i2c bus

 make sure we don't send anything to eeprom */

 send address and write bit */

 get acknowledge */

 write data bytes */

 disable card's analog input interrupt sources and pacing */

 4020 generates dac done interrupts even though they are disabled */

 use internal queue */

 ALT_SOURCE is internal calibration reference */

			/*

			 * select internal reference source to connect

			 * to channel 0

			/*

			 * make sure internal calibration source

			 * is turned off

 load internal queue */

 set gain */

 set single-ended / differential */

 set stop channel */

 set start channel, and rest of settings */

 select BNC inputs */

 select range */

		/*

		 * update calibration/range i2c register only if necessary,

		 * as it is very slow

		/*

		 * 4020 manual asks that sample interval register to be set

		 * before writing to convert register.

		 * Using somewhat arbitrary setting of 4 master clock ticks

		 * = 0.1 usec

 clear adc buffer (inside loop for 4020 sake) */

 trigger conversion, bits sent only matter for 4020 */

 wait for data */

 XXX could add support for 60xx series */

/*

 * Gets nearest achievable timing given master clock speed, does not

 * take into account possible minimum/maximum divisor values.  Used

 * by other timing checking functions.

/*

 * utility function that rounds desired timing to an achievable time, and

 * sets cmd members appropriately.

 * adc paces conversions from master clock by dividing by (x + 3) where x is

 * 24 bit number

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

		/*

		 * start_arg is the CR_CHAN | CR_INVERT of the

		 * external trigger.

			/*

			 * if scans are timed faster than conversion rate

			 * allows

 step 4: fix up any arguments */

 Step 5: check channel list if it exists */

 disable for now until I work out a race */

 load hardware conversion counter */

 supposed to load counter with desired divisor minus 3 */

 figure out how long we need to delay at end of scan */

 should never happen */

 supposed to load counter with desired divisor minus 2 for 4020 */

 select internal/external master clock */

 spinlock for plx dma control/status reg */

 load lower 16 bits of convert interval */

 load upper 8 bits of convert interval */

 load lower 16 bits of scan delay */

 load upper 8 bits of scan delay */

 set channel */

 set gain */

 set single-ended / differential */

 set stop channel */

 set start channel, and rest of settings */

 use external queue */

 clear DAC buffer to prevent weird interactions */

 clear queue pointer */

 load external queue */

 set channel */

 set gain */

 set single-ended / differential */

 mark end of queue */

			/*

			 * doing a queue clear is not specified in board docs,

			 * but required for reliable operation

 prime queue holding register */

 select BNC inputs */

 select ranges */

		/*

		 * update calibration/range i2c register only if necessary,

		 * as it is very slow

	/*

	 * The transfer size, pci address, and local address registers

	 * are supposedly unused during chained dma,

	 * but I have found that left over values from last operation

	 * occasionally cause problems with transfer of first dma

	 * block.  Initializing them to zero seems to fix the problem.

 make sure internal calibration source is turned off */

 set mode, allow conversions through software gate */

 good old mode 13 */

 mode 8.  What else could you need? */

 clear adc buffer */

 set dma transfer size */

 give location of first dma descriptor */

 set source for external triggers */

 enable pacing, triggering, etc */

 set start trigger */

 start acquisition */

 read num_samples from 16 bit wide ai fifo */

 get least significant 15 bits */

		/*

		 * Get most significant bits (grey code).

		 * Different boards use different code so use a scheme

		 * that doesn't depend on encoding.  This read must

		 * occur after reading least significant 15 bits to avoid race

		 * with fifo switching to next segment.

		/*

		 * if read and write pointers are not on the same fifo segment,

		 * read to the end of the read segment

/*

 * Read from 32 bit wide ai fifo of 4020 - deal with insane grey coding of

 * pointers.  The pci-4020 hardware only supports dma transfers (it only

 * supports the use of pio for draining the last remaining points from the

 * fifo when a data acquisition operation has completed).

 empty fifo */

 loop until we have read all the full buffers */

 transfer data from dma buffer to comedi buffer */

	/*

	 * XXX check for dma ring buffer overrun

	 * (use end-of-chain bit to mark last unused buffer)

 check for fifo overrun */

 spin lock makes sure no one else changes plx dma control reg */

 dma chan 1 interrupt */

 drain fifo with pio */

 if we are have all the data, then quit */

 set end of chain bit so we catch underruns */

	/*

	 * clear end of chain bit on previous buffer now that we have set it

	 * for the last buffer

 don't overwrite data that hasn't been transferred yet */

 board might not support ao, in which case write_subdev is NULL */

 spin lock makes sure no one else changes plx dma control reg */

  dma chan 0 interrupt */

 try to recover from dma end-of-chain event */

	/*

	 * an interrupt before all the postconfig stuff gets done could

	 * cause a NULL dereference if we continue through the

	 * interrupt handler

 clear possible plx9080 interrupt sources */

 clear local doorbell interrupt */

 do some initializing */

 set range */

 write to channel */

 remember last output value */

	/*

	 * clear queue pointer too, since external queue has

	 * weird interactions with ao fifo

 disable analog output system during setup */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 step 4: fix up any arguments */

 Step 5: check channel list if it exists */

/*

 * pci-6025 8800 caldac:

 * address 0 == dac channel 0 offset

 * address 1 == dac channel 0 gain

 * address 2 == dac channel 1 offset

 * address 3 == dac channel 1 gain

 * address 4 == fine adc offset

 * address 5 == coarse adc offset

 * address 6 == coarse adc gain

 * address 7 == fine adc gain

/*

 * pci-6402/16 uses all 8 channels for dac:

 * address 0 == dac channel 0 fine gain

 * address 1 == dac channel 0 coarse gain

 * address 2 == dac channel 0 coarse offset

 * address 3 == dac channel 1 coarse offset

 * address 4 == dac channel 1 fine gain

 * address 5 == dac channel 1 coarse gain

 * address 6 == dac channel 0 fine offset

 * address 7 == dac channel 1 fine offset

 4020 caldacs */

 manual has gain and offset bits switched */

 chan 0 offset */

 chan 1 offset */

 chan 2 offset */

 chan 3 offset */

 chan 0 gain */

 chan 1 gain */

 chan 2 gain */

 chan 3 gain */

	/*

	 * Programming the calib device is slow. Only write the

	 * last data value if the value has changed.

 for pci-das6402/16, channel 0 is analog input gain and channel 1 is offset */

	/*

	 * Programming the calib device is slow. Only write the

	 * last data value if the value has changed.

 make sure we don't send anything to the i2c bus on 4020 */

 activate serial eeprom */

 write read command and desired memory address */

 set bit to be written */

 clock in bit */

 read back value from eeprom memory location */

 clock out bit */

 deactivate eeprom serial input */

 No point reading the same EEPROM location more than once. */

 Allocate and initialize the subdevice structures. */

 analog input subdevice */

 XXX Number of inputs in differential mode is ignored */

		/*

		 * set adc to read from inputs

		 * (not internal calibration sources)

 set channels to +-5 volt input ranges */

 analog output subdevice */

 digital input */

 digital output */

 8255 */

 8 channel dio for 60xx */

 caldac */

 2 channel ad8402 potentiometer */

 serial EEPROM, if present */

 user counter subd XXX */

 Initialize dev->board_name */

 figure out what local addresses are */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * Comedi driver for NI PCI-MIO E series cards

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1997-8 David A. Schleef <ds@schleef.org>

/*

 * Driver: ni_pcimio

 * Description: National Instruments PCI-MIO-E series and M series (all boards)

 * Author: ds, John Hallen, Frank Mori Hess, Rolf Mueller, Herbert Peremans,

 *   Herman Bruyninckx, Terry Barnaby

 * Status: works

 * Devices: [National Instruments] PCI-MIO-16XE-50 (ni_pcimio),

 *   PCI-MIO-16XE-10, PXI-6030E, PCI-MIO-16E-1, PCI-MIO-16E-4, PCI-6014,

 *   PCI-6040E, PXI-6040E, PCI-6030E, PCI-6031E, PCI-6032E, PCI-6033E,

 *   PCI-6071E, PCI-6023E, PCI-6024E, PCI-6025E, PXI-6025E, PCI-6034E,

 *   PCI-6035E, PCI-6052E, PCI-6110, PCI-6111, PCI-6220, PXI-6220,

 *   PCI-6221, PXI-6221, PCI-6224, PXI-6224, PCI-6225, PXI-6225,

 *   PCI-6229, PXI-6229, PCI-6250, PXI-6250, PCI-6251, PXI-6251,

 *   PCIe-6251, PXIe-6251, PCI-6254, PXI-6254, PCI-6259, PXI-6259,

 *   PCIe-6259, PXIe-6259, PCI-6280, PXI-6280, PCI-6281, PXI-6281,

 *   PCI-6284, PXI-6284, PCI-6289, PXI-6289, PCI-6711, PXI-6711,

 *   PCI-6713, PXI-6713, PXI-6071E, PCI-6070E, PXI-6070E,

 *   PXI-6052E, PCI-6036E, PCI-6731, PCI-6733, PXI-6733,

 *   PCI-6143, PXI-6143

 * Updated: Mon, 16 Jan 2017 12:56:04 +0000

 *

 * These boards are almost identical to the AT-MIO E series, except that

 * they use the PCI bus instead of ISA (i.e., AT). See the notes for the

 * ni_atmio.o driver for additional information about these boards.

 *

 * Autocalibration is supported on many of the devices, using the

 * comedi_calibrate (or comedi_soft_calibrate for m-series) utility.

 * M-Series boards do analog input and analog output calibration entirely

 * in software. The software calibration corrects the analog input for

 * offset, gain and nonlinearity. The analog outputs are corrected for

 * offset and gain. See the comedilib documentation on

 * comedi_get_softcal_converter() for more information.

 *

 * By default, the driver uses DMA to transfer analog input data to

 * memory.  When DMA is enabled, not all triggering features are

 * supported.

 *

 * Digital I/O may not work on 673x.

 *

 * Note that the PCI-6143 is a simultaineous sampling device with 8

 * convertors. With this board all of the convertors perform one

 * simultaineous sample during a scan interval. The period for a scan

 * is used for the convert time in a Comedi cmd. The convert trigger

 * source is normally set to TRIG_NOW by default.

 *

 * The RTSI trigger bus is supported on these cards on subdevice 10.

 * See the comedilib documentation for details.

 *

 * Information (number of channels, bits, etc.) for some devices may be

 * incorrect. Please check this and submit a bug if there are problems

 * for your device.

 *

 * SCXI is probably broken for m-series boards.

 *

 * Bugs:

 * - When DMA is enabled, COMEDI_EV_CONVERT does not work correctly.

/*

 * The PCI-MIO E series driver was originally written by

 * Tomasz Motylewski <...>, and ported to comedi by ds.

 *

 * References:

 *	341079b.pdf  PCI E Series Register-Level Programmer Manual

 *	340934b.pdf  DAQ-STC reference manual

 *

 *	322080b.pdf  6711/6713/6715 User Manual

 *

 *	320945c.pdf  PCI E Series User Manual

 *	322138a.pdf  PCI-6052E and DAQPad-6052E User Manual

 *

 * ISSUES:

 * - need to deal with external reference for DAC, and other DAC

 *   properties in board properties

 * - deal with at-mio-16de-10 revision D to N changes, etc.

 * - need to add other CALDAC type

 * - need to slow down DAC loading. I don't trust NI's claim that

 *   two writes to the PCI bus slows IO enough. I would prefer to

 *   use udelay().

 *   Timing specs: (clock)

 *	AD8522		30ns

 *	DAC8043		120ns

 *	DAC8800		60ns

 *	MB88341		?

/*

 * These are not all the possible ao ranges for 628x boards.

 * They can do OFFSET +- REFERENCE where OFFSET can be

 * 0V, 5V, APFI<0,1>, or AO<0...3> and RANGE can

 * be 10V, 5V, 2V, 1V, APFI<0,1>, AO<0...3>.  That's

 * 63 different possibilities.  An AO channel

 * can not act as it's own OFFSET or REFERENCE.

 BOARD_PCI6115, */

 BOARD_PXI6115, */

 BOARD_PXI6731, */

  aka pci-6030E */

 aka pci-6070e */

 aka pci-6040e */

		/*

		 * there have been reported problems with

		 * full speed on this board

 doc says mb88341 */

 manual is wrong */

 manual is wrong */

 manual is wrong */

 manual is wrong */

 manual is wrong */

 The 6115 boards probably need their own driver */

 .device_id = 0x2ed0, */

 XXX */

 .device_id = ????, */

 XXX */

 data sheet says 8192, but fifo really holds 16384 samples */

 .device_id = ????, */

 FIXME: guess */

 FIXME: guess */

 IO Window 1 needs to be temporarily mapped to read the eeprom */

  Disable interrupts */

  Initialise 6143 AI specific bits */

 Set G0,G1 DMA mode to E series version */

 Set EOCMode, ADCMode and pipelinedelay */

 Set EOC Delay */

 Set the FIFO half full level */

  Strobe Relay disable bit */

 use win0 */

 0x1620? */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/amplc_dio200_common.c

 *

 * Common support code for "amplc_dio200" and "amplc_dio200_pci".

 *

 * Copyright (C) 2005-2013 MEV Ltd. <https://www.mev.co.uk/>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1998,2000 David A. Schleef <ds@schleef.org>

 only for register defines */

 200 series registers */

 Group X/Y/Z clock sel reg */

 Group X/Y/Z gate sel reg */

 Interrupt enable/status register */

 Extra registers for new PCIe boards */

 1 to enable enhanced features */

 Hardware version register */

 Timestamp timer config register */

 Timestamp timer count register */

/*

 * Functions for constructing value for DIO_200_?CLK_SCE and

 * DIO_200_?GAT_SCE registers:

 *

 * 'which' is: 0 for CTR-X1, CTR-Y1, CTR-Z1; 1 for CTR-X2, CTR-Y2 or CTR-Z2.

 * 'chan' is the channel: 0, 1 or 2.

 * 'source' is the signal source: 0 to 7, or 0 to 31 for "enhanced" boards.

/*

 * Periods of the internal clock sources in nanoseconds.

 10 MHz */

 1 MHz */

 100 kHz */

 10 kHz */

 1 kHz */

 20 MHz (enhanced boards) */

 clock sources 12 and later reserved for enhanced boards */

/*

 * Timestamp timer configuration register (for new PCIe boards).

 Reset counter to zero. */

 Clock source. */

 Maximum clock source value. */

/*

 * Periods of the timestamp timer clock sources in nanoseconds.

 1 nanosecond (but with 20 ns granularity). */

 1 microsecond. */

 1 millisecond. */

 DIO base offset */

 protects the 'active' flag */

 get the offset that was passed to comedi_8254_*_init() */

 remove the shift that was added for PCIe boards */

 this offset now works for the dio200_{read,write} helpers */

 Just read the interrupt status register.  */

 No interrupt status register. */

 Determine interrupt sources to enable. */

 Enable interrupt sources. */

		/*

		 * Collect interrupt sources that have triggered and disable

		 * them temporarily.  Loop around until no extra interrupt

		 * sources have triggered, at which point, the valid part of

		 * the interrupt status register will read zero, clearing the

		 * cause of the interrupt.

		 *

		 * Mask off interrupt sources already seen to avoid infinite

		 * loop in case of misconfiguration.

		/*

		 * No interrupt status register.  Assume the single interrupt

		 * source has triggered.

		/*

		 * Some interrupt sources have triggered and have been

		 * temporarily disabled to clear the cause of the interrupt.

		 *

		 * Reenable them NOW to minimize the time they are disabled.

			/*

			 * The command is still active.

			 *

			 * Ignore interrupt sources that the command isn't

			 * interested in (just in case there's a race

			 * condition).

 Collect scan data. */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_NONE */

 step 4: fix up any arguments */

 if (err) return 4; */

 TRIG_NOW */

 Disable interrupt sources. */

 No interrupt source register.  Support single channel. */

	/*

	 * PCIe boards need the offset shifted in order to get the

	 * correct base address of the timer.

	/*

	 * There could be multiple timers so this driver does not

	 * use dev->pacer to save the i8254 pointer. Instead,

	 * comedi_8254_subdevice_init() saved the i8254 pointer in

	 * s->private.  Mark the subdevice as having private data

	 * to be automatically freed when the device is detached.

 Initialize channels. */

 Gate source 0 is VCC (logic 1). */

 Clock source 0 is the dedicated clock input. */

 1 in io_bits indicates output, 1 in config indicates input */

 counter subdevice (8254) */

 digital i/o subdevice (8255) */

 'INTERRUPT' subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * Comedi driver for National Instruments AT-MIO16D board

 * Copyright (C) 2000 Chris R. Baugher <baugher@enteract.com>

/*

 * Driver: ni_atmio16d

 * Description: National Instruments AT-MIO-16D

 * Author: Chris R. Baugher <baugher@enteract.com>

 * Status: unknown

 * Devices: [National Instruments] AT-MIO-16 (atmio16), AT-MIO-16D (atmio16d)

 *

 * Configuration options:

 *   [0] - I/O port

 *   [1] - MIO irq (0 == no irq; or 3,4,5,6,7,9,10,11,12,14,15)

 *   [2] - DIO irq (0 == no irq; or 3,4,5,6,7,9)

 *   [3] - DMA1 channel (0 == no DMA; or 5,6,7)

 *   [4] - DMA2 channel (0 == no DMA; or 5,6,7)

 *   [5] - a/d mux (0=differential; 1=single)

 *   [6] - a/d range (0=bipolar10; 1=bipolar5; 2=unipolar10)

 *   [7] - dac0 range (0=bipolar; 1=unipolar)

 *   [8] - dac0 reference (0=internal; 1=external)

 *   [9] - dac0 coding (0=2's comp; 1=straight binary)

 *   [10] - dac1 range (same as dac0 options)

 *   [11] - dac1 reference (same as dac0 options)

 *   [12] - dac1 coding (same as dac0 options)

/*

 * I must give credit here to Michal Dobes <dobes@tesnet.cz> who

 * wrote the driver for Advantec's pcl812 boards. I used the interrupt

 * handling code from his driver as an example for this one.

 *

 * Chris Baugher

 * 5/1/2000

 *

 Configuration and Status Registers */

 wo 16 */

 ro 16 */

 wo 16 */

 Event Strobe Registers */

 wo 16 */

 wo 16 */

 wo 16 */

 wo 16 */

 Analog Output Registers */

 wo 16 */

 wo 16 */

 wo 16 */

 Analog Input Registers */

 wo 16 */

 wo 16 */

 ro 16 */

 wo 16 */

 AM9513A Counter/Timer Registers */

 rw 16 */

 wo 16 */

 ro 16 */

 MIO-16 Digital I/O Registers */

 ro 16 */

 wo 16 */

 RTSI Switch Registers */

 wo 8 */

 wo 8 */

 DIO-24 Registers */

 rw 8 */

 rw 8 */

 rw 8 */

 wo 8 */

 Command Register bits */

 Status Register bits */

 AM9513A Counter/Timer defines */

 range structs */

 private data struct */

 current state of command register 1 */

 current state of command register 2 */

 Counter 2 */

 Counter 3 */

 Counter 4 */

 Counter 5 */

 now we need to initialize the board */

 init AM9513A timer */

 timer init done */

 select straight binary mode for Analog Input */

 zero the analog outputs */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 internal trigger */

 TRIG_NONE */

	/*

	 * This is slowly becoming a working command interface.

	 * It is still uber-experimental

 check if scanning multiple channels */

 Setup the Mux-Gain Counter */

 set LASTONE bit */

	/*

	 * Now program the sample interval timer.

	 * Figure out which clock to use then get an appropriate timer value.

 cmd->convert_arg < 6553600000 */ {

 Now figure out how many samples to get */

 and program the sample counter */

 use only Counter 4 */

 Counter 4 and 5 are needed */

	/*

	 * Program the scan interval timer ONLY IF SCANNING IS ENABLED.

	 * Figure out which clock to use then get an appropriate timer value.

 cmd->scan_begin_arg < 6553600000 */ {

 Clear the A/D FIFO and reset the MUX counter */

 enable this acquisition operation */

 enable interrupts for conversion completion */

 apply a trigger. this starts the counters! */

 This will cancel a running acquisition operation */

 reset the Analog input circuitry */

 outw( 0, dev->iobase+AD_CLEAR_REG ); */

 reset the Analog Input MUX Counter to 0 */

 outw( 0, dev->iobase+MUX_CNTR_REG ); */

 set the Input MUX gain */

 start the conversion */

 wait for it to finish */

 read the data now */

 change to two's complement if need be */

 reset the atmio16d hardware */

 set device options */

 setup sub-devices */

 ai subdevice */

 4095 decimal */

 ao subdevice */

 4095 decimal */

 Digital I/O */

 8255 subdevice */

 don't yet know how to deal with counter/timers */

 do */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/mf6x4.c

 *  Driver for Humusoft MF634 and MF624 Data acquisition cards

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: mf6x4

 * Description: Humusoft MF634 and MF624 Data acquisition card driver

 * Devices: [Humusoft] MF634 (mf634), MF624 (mf624)

 * Author: Rostislav Lisovy <lisovy@gmail.com>

 * Status: works

 * Updated:

 * Configuration Options: none

 Registers present in BAR0 memory region */

 End Of Last Conversion */

 Load DACs */

 BAR1 registers */

 BAR2 registers */

 We need to keep track of the order of BARs used by the cards */

	/*

	 * Documentation for both MF634 and MF624 describes registers

	 * present in BAR0, 1 and 2 regions.

	 * The real (i.e. in HW) BAR numbers are different for MF624

	 * and MF634 yet we will call them 0, 1, 2

	/*

	 * This configuration register has the same function and fields

	 * for both cards however it lies in different BARs on different

	 * offsets -- this variable makes the access easier

 EOLC goes low at end of conversion. */

 Set the ADC channel number in the scan list */

 Trigger ADC conversion by reading ADSTART */

 Read the actual value */

 munge the 2's complement data to offset binary */

 Enable instantaneous update of converters outputs + Enable DACs */

 Analog Input subdevice */

 Analog Output subdevice */

 Digital Input subdevice */

 Digital Output subdevice */

 SPDX-License-Identifier: GPL-2.0+

/*

 * multiq3.c

 * Hardware driver for Quanser Consulting MultiQ-3 board

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1999 Anders Blomdell <anders.blomdell@control.lth.se>

/*

 * Driver: multiq3

 * Description: Quanser Consulting MultiQ-3

 * Devices: [Quanser Consulting] MultiQ-3 (multiq3)

 * Author: Anders Blomdell <anders.blomdell@control.lth.se>

 * Status: works

 *

 * Configuration Options:

 *  [0] - I/O port base address

 *  [1] - IRQ (not used)

 *  [2] - Number of optional encoder chips installed on board

 *	  0 = none

 *	  1 = 2 inputs (Model -2E)

 *	  2 = 4 inputs (Model -4E)

 *	  3 = 6 inputs (Model -6E)

 *	  4 = 8 inputs (Model -8E)

/*

 * Register map

/*

 * Encoder chip commands (from the programming manual)

 FCK frequency divider */

 xfer PR0 to PSC */

 enable inputs A and B */

 quadrature */

 reset byte pointer */

 reset counter */

 xfre preset reg to counter */

 xfer CNTR to OL (x and y) */

 reset E bit of flag reg */

	/*

	 * According to the programming manual, the SH and CLK bits should

	 * be kept high at all times.

 get a 16-bit sample; mask it to the subdevice resolution */

 munge the 2's complement value to offset binary */

 select encoder channel */

 reset the byte pointer */

 latch the data */

 read the 24-bit encoder data (lsb/mid/msb) */

		/*

		 * Munge the data so that the reset value is in the middle

		 * of the maxdata range, i.e.:

		 *

		 * real value	comedi value

		 * 0xffffff	0x7fffff	1 negative count

		 * 0x000000	0x800000	reset value

		 * 0x000001	0x800001	1 positive count

		 *

		 * It's possible for the 24-bit counter to overflow but it

		 * would normally take _quite_ a few turns. A 2000 line

		 * encoder in quadrature results in 8000 counts/rev. So about

		 * 1048 turns in either direction can be measured without

		 * an overflow.

 Analog Input subdevice */

 Analog Output subdevice */

 Digital Input subdevice */

 Digital Output subdevice */

 Encoder (Counter) subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/ni_labpc_isadma.c

 * ISA DMA support for National Instruments Lab-PC series boards and

 * compatibles.

 *

 * Extracted from ni_labpc.c:

 * Copyright (C) 2001-2003 Frank Mori Hess <fmhess@users.sourceforge.net>

 size in bytes of dma buffer */

 utility function that suggests a dma transfer size in bytes */

 return some default value */

 make buffer fill in no more than 1/3 second */

 set a minimum and maximum size allowed */

 set appropriate size of transfer */

 set CMD3 bits for caller to enable DMA and interrupt */

	/*

	 * residue is the number of bytes left to be done on the dma

	 * transfer.  It should always be zero at this point unless

	 * the stop_src is set to external triggering.

	/*

	 * Figure out how many samples to read for this transfer and

	 * how many will be stored for next time.

 clear dma tc interrupt */

	/*

	 * if a dma terminal count of external stop trigger

	 * has occurred

 only DMA channels 3 and 1 are valid */

 DMA uses 1 buffer */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0

/*

 * pcl816.c

 * Comedi driver for Advantech PCL-816 cards

 *

 * Author:  Juan Grigera <juan@grigera.com.ar>

 * based on pcl818 by Michal Dobes <dobes@tesnet.cz> and bits of pcl812

/*

 * Driver: pcl816

 * Description: Advantech PCL-816 cards, PCL-814

 * Devices: [Advantech] PCL-816 (pcl816), PCL-814B (pcl814b)

 * Author: Juan Grigera <juan@grigera.com.ar>

 * Status: works

 * Updated: Tue,  2 Apr 2002 23:15:21 -0800

 *

 * PCL 816 and 814B have 16 SE/DIFF ADCs, 16 DACs, 16 DI and 16 DO.

 * Differences are at resolution (16 vs 12 bits).

 *

 * The driver support AI command mode, other subdevices not written.

 *

 * Analog output and digital input and output are not supported.

 *

 * Configuration Options:

 *   [0] - IO Base

 *   [1] - IRQ	(0=disable, 2, 3, 4, 5, 6, 7)

 *   [2] - DMA	(0=disable, 1, 3)

 *   [3] - 0, 10=10MHz clock for 8254

 *	       1= 1MHz clock for 8254

/*

 * Register I/O map

  how many sampes transfer poll */

	/*

	 * Determine dma size based on the buffer maxsize plus the number of

	 * unread samples and the number of samples remaining in the command.

 store range list to card */

 writing any value clears the interrupt request */

 writing any value triggers a software conversion */

 restart dma with the next buffer */

  correct channel and range number check itself comedi/range.c */

  first channel is every time ok */

  we detect loop, this must by finish */

  channel list isn't continuous :-( */

  well, this is next correct channel in list */

  check whole chanlist */

  chan/gain list is strange */

  we can serve this with MUX logic */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_EXT */

 TRIG_NONE */

 step 4: fix up any arguments */

 step 5: complain about special chanlist considerations */

  incorrect channels list */

 setup and enable dma for the first buffer */

 TRIG_EXT */

 new buffer position */

 no new samples */

 set all digital outputs low */

 only IRQs 2-7 and DMA channels 3 and 1 are valid */

 DMA uses two 16K buffers */

 an IRQ and DMA are required to support async commands */

 Piggyback Slot1 subdevice */

 Digital Input subdevice */

 Digital Output subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * Comedi driver for DAS008 PCMCIA boards

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

 * Copyright (C) 2001,2002,2003 Frank Mori Hess <fmhess@users.sourceforge.net>

 *

 * PCMCIA support code for this driver is adapted from the dummy_cs.c

 * driver of the Linux PCMCIA Card Services package.

 *

 * The initial developer of the original code is David A. Hinds

 * <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds

 * are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.

/*

 * Driver: das08_cs

 * Description: DAS-08 PCMCIA boards

 * Author: Warren Jasper, ds, Frank Hess

 * Devices: [ComputerBoards] PCM-DAS08 (pcm-das08)

 * Status: works

 *

 * This is the PCMCIA-specific support split off from the

 * das08 driver.

 *

 * Configuration Options: none, uses PCMCIA auto config

 *

 * Command support does not exist, but could be added for this board.

 The das08 driver needs the board_ptr */

 SPDX-License-Identifier: GPL-2.0+

/*

 * pcmuio.c

 * Comedi driver for Winsystems PC-104 based 48/96-channel DIO boards.

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2006 Calin A. Culianu <calin@ajvar.org>

/*

 * Driver: pcmuio

 * Description: Winsystems PC-104 based 48/96-channel DIO boards.

 * Devices: [Winsystems] PCM-UIO48A (pcmuio48), PCM-UIO96A (pcmuio96)

 * Author: Calin Culianu <calin@ajvar.org>

 * Updated: Fri, 13 Jan 2006 12:01:01 -0500

 * Status: works

 *

 * A driver for the relatively straightforward-to-program PCM-UIO48A and

 * PCM-UIO96A boards from Winsystems. These boards use either one or two

 * (in the 96-DIO version) WS16C48 ASIC HighDensity I/O Chips (HDIO). This

 * chip is interesting in that each I/O line is individually programmable

 * for INPUT or OUTPUT (thus comedi_dio_config can be done on a per-channel

 * basis). Also, each chip supports edge-triggered interrupts for the first

 * 24 I/O lines. Of course, since the 96-channel version of the board has

 * two ASICs, it can detect polarity changes on up to 48 I/O lines. Since

 * this is essentially an (non-PnP) ISA board, I/O Address and IRQ selection

 * are done through jumpers on the board. You need to pass that information

 * to this driver as the first and second comedi_config option, respectively.

 * Note that the 48-channel version uses 16 bytes of IO memory and the 96-

 * channel version uses 32-bytes (in case you are worried about conflicts).

 * The 48-channel board is split into two 24-channel comedi subdevices. The

 * 96-channel board is split into 4 24-channel DIO subdevices.

 *

 * Note that IRQ support has been added, but it is untested.

 *

 * To use edge-detection IRQ support, pass the IRQs of both ASICS (for the

 * 96 channel version) or just 1 ASIC (for 48-channel version). Then, use

 * comedi_commands with TRIG_NOW. Your callback will be called each time an

 * edge is triggered, and the data values will be two sample_t's, which

 * should be concatenated to form one 32-bit unsigned int.  This value is

 * the mask of channels that had edges detected from your channel list. Note

 * that the bits positions in the mask correspond to positions in your

 * chanlist when you specified the command and *not* channel id's!

 *

 * To set the polarity of the edge-detection interrupts pass a nonzero value

 * for either CR_RANGE or CR_AREF for edge-up polarity, or a zero value for

 * both CR_RANGE and CR_AREF if you want edge-down polarity.

 *

 * In the 48-channel version:

 *

 * On subdev 0, the first 24 channels are edge-detect channels.

 *

 * In the 96-channel board you have the following channels that can do edge

 * detection:

 *

 * subdev 0, channels 0-24  (first 24 channels of 1st ASIC)

 * subdev 2, channels 0-24  (first 24 channels of 2nd ASIC)

 *

 * Configuration Options:

 *  [0] - I/O port base address

 *  [1] - IRQ (for first ASIC, or first 24 channels)

 *  [2] - IRQ (for second ASIC, pcmuio96 only - IRQ for chans 48-72

 *             can be the same as first irq!)

/*

 * Register I/O map

 *

 * Offset    Page 0       Page 1       Page 2       Page 3

 * ------  -----------  -----------  -----------  -----------

 *  0x00   Port 0 I/O   Port 0 I/O   Port 0 I/O   Port 0 I/O

 *  0x01   Port 1 I/O   Port 1 I/O   Port 1 I/O   Port 1 I/O

 *  0x02   Port 2 I/O   Port 2 I/O   Port 2 I/O   Port 2 I/O

 *  0x03   Port 3 I/O   Port 3 I/O   Port 3 I/O   Port 3 I/O

 *  0x04   Port 4 I/O   Port 4 I/O   Port 4 I/O   Port 4 I/O

 *  0x05   Port 5 I/O   Port 5 I/O   Port 5 I/O   Port 5 I/O

 *  0x06   INT_PENDING  INT_PENDING  INT_PENDING  INT_PENDING

 *  0x07    Page/Lock    Page/Lock    Page/Lock    Page/Lock

 *  0x08       N/A         POL_0       ENAB_0       INT_ID0

 *  0x09       N/A         POL_1       ENAB_1       INT_ID1

 *  0x0a       N/A         POL_2       ENAB_2       INT_ID2

 protects the page registers */

 protects member variables */

	/*

	 * subdevice 0 and 1 are handled by the first asic

	 * subdevice 2 and 3 are handled by the second asic

	/*

	 * subdevice 0 and 2 use port registers 0-2

	 * subdevice 1 and 3 use port registers 3-5

 Port registers are valid for any page */

 Port registers are valid for any page */

/*

 * Each channel can be individually programmed for input or output.

 * Writing a '0' to a channel causes the corresponding output pin

 * to go to a high-z state (pulled high by an external 10K resistor).

 * This allows it to be used as an input. When used in the input mode,

 * a read reflects the inverted state of the I/O pin, such that a

 * high on the pin will read as a '0' in the register. Writing a '1'

 * to a bit position causes the pin to sink current (up to 12mA),

 * effectively pulling it low.

		/*

		 * Outputs are inverted, invert the state and

		 * update the channels.

		 *

		 * The s->io_bits mask makes sure the input channels

		 * are '0' so that the outputs pins stay in a high

		 * z-state.

 get inverted state of the channels from the port */

 return the true state of the channels */

 first, clear all the DIO port bits */

 Next, clear all the paged registers for each page */

 chip->spinlock is already locked */

 disable all intrs for this subdev.. */

 there are could be two asics so we can't use dev->read_subdev */

 are there any interrupts pending */

 get, and clear, the pending interrupts */

 handle the pending interrupts */

 chip->spinlock is already locked */

 set pol and enab intrs for this subdev.. */

/*

 * 'do_cmd' function for an 'INTERRUPT' subdevice.

 Set up start of acquisition. */

 TRIG_NOW */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_NONE */

 step 4: fix up any arguments */

 if (err) return 4; */

 request the irq for the 1st asic */

 the same irq (or none) is used by both asics */

 request the irq for the 2nd asic */

 subdevices 0 and 2 can support interrupts */

 setup the interrupt subdevice */

 free the 2nd irq if used, the core will free the 1st one */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 *  das08_pci.c

 *  comedi driver for DAS08 PCI boards

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2000 David A. Schleef <ds@schleef.org>

 *  Copyright (C) 2001,2002,2003 Frank Mori Hess <fmhess@users.sourceforge.net>

 *  Copyright (C) 2004 Salvador E. Tropea <set@users.sf.net> <set@ieee.org>

/*

 * Driver: das08_pci

 * Description: DAS-08 PCI compatible boards

 * Devices: [ComputerBoards] PCI-DAS08 (pci-das08)

 * Author: Warren Jasper, ds, Frank Hess

 * Updated: Fri, 31 Aug 2012 19:19:06 +0100

 * Status: works

 *

 * This is the PCI-specific support split off from the das08 driver.

 *

 * Configuration Options: not applicable, uses PCI auto config

 The das08 driver needs the board_ptr */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/amplc_pc236_common.c

 * Common support code for "amplc_pc236" and "amplc_pci236".

 *

 * Copyright (C) 2002-2014 MEV Ltd. <https://www.mev.co.uk/>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * This function is called when an interrupt occurs to check whether

 * the interrupt has been marked as enabled and was generated by the

 * board.  If so, the function prepares the hardware for the next

 * interrupt.

 * Returns false if the interrupt should be ignored.

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check it arguments are trivially valid */

 Step 4: fix up any arguments */

 Step 5: check channel list if it exists */

 digital i/o subdevice (8255) */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/dt2814.c

 * Hardware driver for Data Translation DT2814

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1998 David A. Schleef <ds@schleef.org>

/*

 * Driver: dt2814

 * Description: Data Translation DT2814

 * Author: ds

 * Status: complete

 * Devices: [Data Translation] DT2814 (dt2814)

 *

 * Configuration options:

 * [0] - I/O port base address

 * [1] - IRQ

 *

 * This card has 16 analog inputs multiplexed onto a 12 bit ADC.  There

 * is a minimally useful onboard clock.  The base frequency for the

 * clock is selected by jumpers, and the clock divider can be selected

 * via programmed I/O.  Unfortunately, the clock divider can only be

 * a power of 10, from 1 to 10^7, of which only 3 or 4 are useful.  In

 * addition, the clock does not seem to be very accurate.

/*

 * flags

 Arbitrary 10 khz limit */

 Wait until not busy and get status register value. */

		/*

		 * There unread data, or the error flag is set.

		 * Read the data register twice to clear the condition.

 clear stale data or error */

 XXX ignores flags */

 ns */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_NONE */

 step 4: fix up any arguments */

 clear stale data or error */

		/*

		 * Clear the timed trigger enable bit.

		 *

		 * Note: turning off timed mode triggers another

		 * sample.  This will be mopped up by the calls to

		 * dt2814_ai_clear().

 Timed acquisition not enabled.  Nothing to do. */

 Spurious interrupt? */

 Read data or clear error. */

		/*

		 * Disable timed mode.

		 *

		 * Note: turning off timed mode triggers another

		 * sample.  This will be mopped up by the calls to

		 * dt2814_ai_clear().

 XXX */

 XXX */

		/*

		 * An extra conversion triggered on termination of an

		 * asynchronous command may still be in progress.  Wait for

		 * it to finish and clear the data or error status.

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * usbduxsigma.c

 * Copyright (C) 2011-2015 Bernd Porr, mail@berndporr.me.uk

/*

 * Driver: usbduxsigma

 * Description: University of Stirling USB DAQ & INCITE Technology Limited

 * Devices: [ITL] USB-DUX-SIGMA (usbduxsigma)

 * Author: Bernd Porr <mail@berndporr.me.uk>

 * Updated: 20 July 2015

 * Status: stable

/*

 * I must give credit here to Chris Baugher who

 * wrote the driver for AT-MIO-16d. I used some parts of this

 * driver. I also must give credits to David Brownell

 * who supported me with the USB development.

 *

 * Note: the raw data from the A/D converter is 24 bit big endian

 * anything else is little endian to/from the dux board

 *

 *

 * Revision history:

 *   0.1: initial version

 *   0.2: all basic functions implemented, digital I/O only for one port

 *   0.3: proper vendor ID and driver name

 *   0.4: fixed D/A voltage range

 *   0.5: various bug fixes, health check at startup

 *   0.6: corrected wrong input range

 *   0.7: rewrite code that urb->interval is always 1

 timeout for the USB-transfer in ms*/

 constants for "firmware" upload and download */

 internal addresses of the 8051 processor */

 300Hz max frequ under PWM */

 Default PWM frequency */

 Number of channels (16 AD and offset)*/

 Size of one A/D value */

/*

 * Size of the async input-buffer IN BYTES, the DIO state is transmitted

 * as the first byte.

 16 bytes. */

 Number of DA channels */

 size of one value for the D/A converter: channel and value */

/*

 * Size of the output-buffer in bytes

 * Actually only the first 4 triplets are used but for the

 * high speed mode we need to pad it to 8 (microframes).

/*

 * Size of the buffer for the dux commands: just now max size is determined

 * by the analogue out + command byte + panic bytes...

 Number of in-URBs which receive the data: min=2 */

 Number of out-URBs which send the data: min=2 */

 Number of in-URBs which receive the data: min=5 */

 must have more buffers due to buggy USB ctr */

 Number of out-URBs which send the data: min=5 */

 must have more buffers due to buggy USB ctr */

 number of retries to get the right dux command */

 bulk transfer commands to usbduxsigma */

 actual number of in-buffers */

 actual number of out-buffers */

 ISO-transfer handling: buffers */

 pwm-transfer handling */

 PWM period */

 PWM internal delay for the GPIF in the FX2 */

 size of the PWM buffer which holds the bit pattern */

 input buffer for the ISO-transfer */

 input buffer for single insn */

 time between samples in units of the timer */

 counter between acquisitions */

 interval in frames/uframes */

 commands */

 unlink only if it is really running */

			/*

			 * Get the data from the USB bus and hand it over

			 * to comedi. Note, first byte is the DIO state.

 strip status byte */

 if command is still running, resubmit urb */

 exit if not running a command, do not resubmit urb */

 copy the result in the transfer buffer */

		/*

		 * error in the ISOchronous data

		 * we don't copy the data into the transfer buffer

		 * and recycle the last data byte

 happens after an unlink command */

 a real error */

	/*

	 * comedi_handle_events() cannot be used in this driver. The (*cancel)

	 * operation would unlink the urb.

 unlink only if it is really running */

 transmit data to the USB bus */

 if command is still running, resubmit urb */

 (u)frames */

 exit if not running a command, do not resubmit urb */

 happens after an unlink command */

 a real error */

	/*

	 * comedi_handle_events() cannot be used in this driver. The (*cancel)

	 * operation would unlink the urb.

 Submit all URBs and start the transfer on the bus */

 in case of a resubmission after an unlink... */

 4kHz */

 2kHz */

 1kHz */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

		/*

		 * In high speed mode microframes are possible.

		 * However, during one microframe we can roughly

		 * sample two channels. Thus, the more channels

		 * are in the channel list the more time we need.

 full speed */

 1kHz scans every USB frame */

 TRIG_NONE */

 Step 4: fix up any arguments */

/*

 * creates the ADC command for the MAX1271

 * range is the range value from comedi

	/*

	 * This is only reached if the data has been requested a

	 * couple of times and the command was not received.

		/*

		 * every 2 channels get a time window of 125us. Thus, if we

		 * sample all 16 channels we need 1ms. If we sample only one

		 * channel we need only 125us

 interval always 1ms */

 num channels per time step */

 CONFIG0 */

 CONFIG1: 23kHz sample, delay 0us */

 CONFIG3: diff. channels off */

 enable this acquisition operation */

 TRIG_INT */

 Mode 0 is used to get a single conversion on demand */

 CONFIG0: chopper on */

 CONFIG1: 2kHz sampling rate */

 CONFIG3: diff. channels off */

 adc commands */

 32 bits big endian from the A/D converter */

 strip status byte */

 num channels */

 value */

 channel number */

 Step 1 : check if triggers are trivially valid */

	/*

	 * For now, always use "scan" timing with all channels updated at once

	 * (cmd->scan_begin_src == TRIG_TIMER, cmd->convert_src == TRIG_NOW).

	 *

	 * In a future version, "convert" timing with channels updated

	 * indivually may be supported in high speed mode

	 * (cmd->scan_begin_src == TRIG_FOLLOW, cmd->convert_src == TRIG_TIMER).

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_NONE */

 Step 4: fix up any arguments */

	/*

	 * For now, only "scan" timing is supported.  A future version may

	 * support "convert" timing in high speed mode.

	 *

	 * Timing of the scan: every 1ms all channels updated at once.

 enable this acquisition operation */

 TRIG_INT */

	/*

	 * We don't tell the firmware here as it would take 8 frames

	 * to submit the information. We do it in the (*insn_bits).

 Always update the hardware. See the (*insn_config). */

 unlink only if it is really running */

 success */

 happens after an unlink command */

 w/o unlink */

 a real error */

 w/o unlink */

 w/o unlink */

 in case of a resubmission after an unlink... */

 DIO bit for the PWM data */

 DIO bit for the sign */

	/*

	 * It doesn't make sense to support more than one value here

	 * because it would just overwrite the PWM buffer.

	/*

	 * The sign is set via a special INSN only, this gives us 8 bits

	 * for normal operation, sign is 0 by default.

		/*

		 * if not zero the PWM is limited to a certain time which is

		 * not supported here

		/*

		 * data[1] = value

		 * data[2] = sign (for a relay)

 values are not kept in this driver, nothing to return */

 ADC zero */

 ADC offset */

 VCC */

 temperature */

 gain */

 ref */

 CONFIG0 */

 CONFIG1: 2kHz sampling rate */

 CONFIG3: diff. channels off */

 32 bits big endian from the A/D converter */

 strip status byte */

 we generate a local buffer for the firmware */

 we need a malloc'ed buffer for usb_control_msg() */

 stop the current firmware on the device */

 7f92 to one */

 upload the new firmware to the device */

 start the new firmware on the device */

 7f92 to zero */

 one frame: 1ms */

 will be filled later with a pointer to the comedi-device */

 and ONLY then the urb should be submitted */

 one frame: 1ms */

 will be filled later with a pointer to the comedi-device */

 and ONLY then the urb should be submitted */

 (u)frames */

 setting to alternate setting 3: enabling iso ep and bulk ep. */

 Analog Input subdevice */

 Analog Output subdevice */

 Digital I/O subdevice */

 Timer / pwm subdevice */

 force unlink all urbs */

 SPDX-License-Identifier: GPL-2.0+

/*

 * pcl726.c

 * Comedi driver for 6/12-Channel D/A Output and DIO cards

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1998 David A. Schleef <ds@schleef.org>

/*

 * Driver: pcl726

 * Description: Advantech PCL-726 & compatibles

 * Author: David A. Schleef <ds@schleef.org>

 * Status: untested

 * Devices: [Advantech] PCL-726 (pcl726), PCL-727 (pcl727), PCL-728 (pcl728),

 *   [ADLink] ACL-6126 (acl6126), ACL-6128 (acl6128)

 *

 * Configuration Options:

 *   [0]  - IO Base

 *   [1]  - IRQ (ACL-6126 only)

 *   [2]  - D/A output range for channel 0

 *   [3]  - D/A output range for channel 1

 *

 * Boards with > 2 analog output channels:

 *   [4]  - D/A output range for channel 2

 *   [5]  - D/A output range for channel 3

 *   [6]  - D/A output range for channel 4

 *   [7]  - D/A output range for channel 5

 *

 * Boards with > 6 analog output channels:

 *   [8]  - D/A output range for channel 6

 *   [9]  - D/A output range for channel 7

 *   [10] - D/A output range for channel 8

 *   [11] - D/A output range for channel 9

 *   [12] - D/A output range for channel 10

 *   [13] - D/A output range for channel 11

 *

 * For PCL-726 the D/A output ranges are:

 *   0: 0-5V, 1: 0-10V, 2: +/-5V, 3: +/-10V, 4: 4-20mA, 5: unknown

 *

 * For PCL-727:

 *   0: 0-5V, 1: 0-10V, 2: +/-5V, 3: 4-20mA

 *

 * For PCL-728 and ACL-6128:

 *   0: 0-5V, 1: 0-10V, 2: +/-5V, 3: +/-10V, 4: 4-20mA, 5: 0-20mA

 *

 * For ACL-6126:

 *   0: 0-5V, 1: 0-10V, 2: +/-5V, 3: +/-10V, 4: 4-20mA

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 Step 4: fix up any arguments */

 Step 5: check channel list if it exists */

 bipolar data to the DAC is two's complement */

 order is important, MSB then LSB */

	/*

	 * Hook up the external trigger source interrupt only if the

	 * user config option is valid and the board supports interrupts.

 External trigger source is from Pin-17 of CN3 */

 setup the per-channel analog output range_table_list */

 Analog Output subdevice */

 Digital Input subdevice */

 Digital Output subdevice */

 Digital Input subdevice - Interrupt support */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * Hardware driver for NI 660x devices

/*

 * Driver: ni_660x

 * Description: National Instruments 660x counter/timer boards

 * Devices: [National Instruments] PCI-6601 (ni_660x), PCI-6602, PXI-6602,

 *   PCI-6608, PXI-6608, PCI-6624, PXI-6624

 * Author: J.P. Mellor <jpmellor@rose-hulman.edu>,

 *   Herman.Bruyninckx@mech.kuleuven.ac.be,

 *   Wim.Meeussen@mech.kuleuven.ac.be,

 *   Klaas.Gadeyne@mech.kuleuven.ac.be,

 *   Frank Mori Hess <fmhess@users.sourceforge.net>

 * Updated: Mon, 16 Jan 2017 14:00:43 +0000

 * Status: experimental

 *

 * Encoders work.  PulseGeneration (both single pulse and pulse train)

 * works.  Buffered commands work for input but not output.

 *

 * References:

 * DAQ 660x Register-Level Programmer Manual  (NI 370505A-01)

 * DAQ 6601/6602 User Manual (NI 322137B-01)

 See Register-Level Programmer Manual page 3.1 */

 see enum ni_gpct_register */

  Offset from base address from GPCT chip */

 2 or 4 bytes */

 write */

 read */

 write */

 read */

 read */

 write */

 read */

 write */

 read */

 read */

 write */

 write */

 read */

 read */

 write */

 read */

 write */

 read */

 write */

 read */

 write */

 write */

 write */

 write */

 write */

 write */

 write */

 write */

 write */

 write */

 write */

 write */

 write */

 write */

 write */

 read */

 write */

 read */

 write */

 read */

 write */

 read */

 read */

 write */

 write */

 read */

 read */

 read */

 read */

 write */

 read */

 write */

 write */

 read */

 write */

 write */

 write */

 write */

 write */

 write */

 write */

 write */

 write */

 write */

 write */

 write */

 write */

 write */

 write */

 read */

 write */

 read */

 read */

 write */

 write */

 read */

 write */

 write */

 read/write */

 read/write */

 read/write */

 read/write */

 read/write */

 read/write */

 read/write */

 read/write */

 read/write */

 read/write */

 read/write */

 read/write */

 read/write */

 read/write */

 read/write */

 read/write */

 read/write */

 read/write */

 read/write */

 read/write */

 total number of TIO chips */

 there are only up to 3 dma channels, but the register layout allows for 4 */

 protects mite channel request/release */

 prevents races between interrupt and comedi_poll */

	/*

	 * See P. 3.5 of the Register-Level Programming manual.

	 * The CounterSwap bit has to be set on the second chip,

	 * otherwise it will try to use the same pins as the

	 * first chip.

 make sure dev->attached is checked before doing anything else */

 lock to avoid race with comedi_poll */

 lock to avoid race with comedi_poll */

	/*

	 * There are 40 channels in this subdevice but only 32 are usable

	 * as DIO. The shift adjusts the mask/bits to account for the base

	 * channel in insn->chanspec. The state update can then be handled

	 * normally for the 32 usable channels.

	/*

	 * Return the input channels, shifted back to account for the base

	 * channel.

 allow new and old names of pfi channels to work. */

 counters 4-7 pfi channels */

 counters 0-3 pfi channels */

 set the pfi channel to high-z on the inactive chip */

 high-z */

 set the pfi channel output on the active chip */

 allow new and old names of pfi channels to work. */

 reset the output to currently assigned output value */

 set pin to high-z; do not change currently assigned route */

 allow new and old names of pfi channels to work. */

 allow new and old names of pfi channels to work. */

 allow new and old names of pfi channels to work. */

 allow new and old names of pfi channels to work. */

/*

 * Retrieves the current source of the output selector for the given

 * destination.  If the terminal for the destination is not already configured

 * as an output, this function returns -EINVAL as error.

 *

 * Return: The register value of the destination output selector;

 *	   -EINVAL if terminal is not configured for output.

		/*

		 * The following can be enabled when RTSI routing info is

		 * determined (not currently documented):

		 * if (ni_get_rtsi_direction(dev, dest) == COMEDI_OUTPUT) {

		 *	reg = ni_get_rtsi_routing(dev, dest);



		 *	if (reg == NI_RTSI_OUTPUT_RGOUT0) {

		 *		dest = NI_RGOUT0; ** prepare for lookup below **

		 *		reg = get_rgout0_reg(dev);

		 *	} else if (reg >= NI_RTSI_OUTPUT_RTSI_BRD(0) &&

		 *		   reg <= NI_RTSI_OUTPUT_RTSI_BRD(3)) {

		 *		const int i = reg - NI_RTSI_OUTPUT_RTSI_BRD(0);



		 *		dest = NI_RTSI_BRD(i); ** prepare for lookup **

		 *		reg = get_ith_rtsi_brd_reg(i, dev);

		 *	}

		 * }

/*

 * Test a route:

 *

 * Return: -1 if not connectible;

 *	    0 if connectible and not connected;

 *	    1 if connectible and connected.

 Connect the actual route.  */

 route is not valid */

 destination mux is already busy. complain, don't overwrite */

 The route is valid and available. Now connect... */

		/*

		 * set routing and then direction so that the output does not

		 * first get generated with the wrong pin

		/*

		 * The following can be enabled when RTSI routing info is

		 * determined (not currently documented):

		 * if (reg == NI_RTSI_OUTPUT_RGOUT0) {

		 *	int ret = incr_rgout0_src_use(src, dev);



		 *	if (ret < 0)

		 *		return ret;

		 * } else if (ni_rtsi_route_requires_mux(reg)) {

		 *	** Attempt to allocate and  route (src->brd) **

		 *	int brd = incr_rtsi_brd_src_use(src, dev);



		 *	if (brd < 0)

		 *		return brd;



		 *	** Now lookup the register value for (brd->dest) **

		 *	reg = ni_lookup_route_register(brd, CR_CHAN(dest),

		 *				       &devpriv->routing_tables);

		 * }



		 * ni_set_rtsi_direction(dev, dest, COMEDI_OUTPUT);

		 * ni_set_rtsi_routing(dev, dest, reg);

		/*

		 * we are adding back the channel modifier info to set

		 * invert/edge info passed by the user

 route is not valid */

 cannot disconnect something not connected */

 The route is valid and is connected.  Now disconnect... */

 set the pfi to high impedance, and disconnect */

		/*

		 * The following can be enabled when RTSI routing info is

		 * determined (not currently documented):

		 * if (reg == NI_RTSI_OUTPUT_RGOUT0) {

		 *	int ret = decr_rgout0_src_use(src, dev);



		 *	if (ret < 0)

		 *		return ret;

		 * } else if (ni_rtsi_route_requires_mux(reg)) {

		 *	** find which RTSI_BRD line is source for rtsi pin **

		 *	int brd = ni_find_route_source(

		 *		ni_get_rtsi_routing(dev, dest), CR_CHAN(dest),

		 *		&devpriv->routing_tables);



		 *	if (brd < 0)

		 *		return brd;



		 *	** decrement/disconnect RTSI_BRD line from source **

		 *	decr_rtsi_brd_src_use(src, brd, dev);

		 * }



		 * ** set rtsi output selector to default state **

		 * reg = default_rtsi_routing[CR_CHAN(dest) - TRIGGER_LINE(0)];

		 * ni_set_rtsi_direction(dev, dest, COMEDI_INPUT);

		 * ni_set_rtsi_routing(dev, dest, reg);

	/*

	 * This case is already handled one level up.

	 * case INSN_DEVICE_CONFIG_GET_ROUTES:

	/*

	 * We use the ioconfig registers to control dio direction, so zero

	 * output enables in stc dio control reg.

 init dma configuration register */

 init ioconfig registers */

 use win1 */

 prepare the device for globally-named routes. */

		/*

		 * only(?) assign insn_device_config if we have global names for

		 * this device.

 Old GENERAL-PURPOSE COUNTER/TIME (GPCT) subdevice, no longer used */

	/*

	 * Digital I/O subdevice

	 *

	 * There are 40 channels but only the first 32 can be digital I/Os.

	 * The last 8 are dedicated to counters 0 and 1.

	 *

	 * Counter 0-3 signals are from the first TIO chip.

	 * Counter 4-7 signals are from the second TIO chip.

	 *

	 * Comedi	External

	 * PFI Chan	DIO Chan        Counter Signal

	 * -------	--------	--------------

	 *     0	    0

	 *     1	    1

	 *     2	    2

	 *     3	    3

	 *     4	    4

	 *     5	    5

	 *     6	    6

	 *     7	    7

	 *     8	    8		CTR 7 OUT

	 *     9	    9		CTR 7 AUX

	 *    10	   10		CTR 7 GATE

	 *    11	   11		CTR 7 SOURCE

	 *    12	   12		CTR 6 OUT

	 *    13	   13		CTR 6 AUX

	 *    14	   14		CTR 6 GATE

	 *    15	   15		CTR 6 SOURCE

	 *    16	   16		CTR 5 OUT

	 *    17	   17		CTR 5 AUX

	 *    18	   18		CTR 5 GATE

	 *    19	   19		CTR 5 SOURCE

	 *    20	   20		CTR 4 OUT

	 *    21	   21		CTR 4 AUX

	 *    22	   22		CTR 4 GATE

	 *    23	   23		CTR 4 SOURCE

	 *    24	   24		CTR 3 OUT

	 *    25	   25		CTR 3 AUX

	 *    26	   26		CTR 3 GATE

	 *    27	   27		CTR 3 SOURCE

	 *    28	   28		CTR 2 OUT

	 *    29	   29		CTR 2 AUX

	 *    30	   30		CTR 2 GATE

	 *    31	   31		CTR 2 SOURCE

	 *    32			CTR 1 OUT

	 *    33			CTR 1 AUX

	 *    34			CTR 1 GATE

	 *    35			CTR 1 SOURCE

	 *    36			CTR 0 OUT

	 *    37			CTR 0 AUX

	 *    38			CTR 0 GATE

	 *    39			CTR 0 SOURCE

	 /*

	  * Default the DIO channels as:

	  *   chan 0-7:  DIO inputs

	  *   chan 8-39: counter signal inputs

 high-z */

 Counter subdevices (4 NI TIO General Purpose Counters per chip) */

	/*

	 * To be safe, set counterswap bits on tio chips after all the counter

	 * outputs have been set to high impedance mode.

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * ni_6527.c

 * Comedi driver for National Instruments PCI-6527

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1999,2002,2003 David A. Schleef <ds@schleef.org>

/*

 * Driver: ni_6527

 * Description: National Instruments 6527

 * Devices: [National Instruments] PCI-6527 (pci-6527), PXI-6527 (pxi-6527)

 * Author: David A. Schleef <ds@schleef.org>

 * Updated: Sat, 25 Jan 2003 13:24:40 -0800

 * Status: works

 *

 * Configuration Options: not applicable, uses PCI auto config

/*

 * PCI BAR1 - Register memory map

 *

 * Manuals (available from ftp://ftp.natinst.com/support/manuals)

 *	370106b.pdf	6527 Register Level Programmer Manual

		/*

		 * The deglitch filter interval is specified in nanoseconds.

		 * The hardware supports intervals in 200ns increments. Round

		 * the user values up and return the actual interval.

 Outputs are inverted */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 Step 4: fix up any arguments */

 Step 5: check channel list if it exists */

 preserve rising-edge detection channels */

 preserve falling-edge detection channels */

 update rising-edge detection channels */

 update falling-edge detection channels */

 check_insn_config_length() does not check this instruction */

 check trigger number */

 check digital trigger operation */

 check shift amount */

 disable deglitch filters on all channels */

 disable edge detection */

 make sure this is actually a 6527 device */

 Digital Input subdevice */

 Digital Output subdevice */

 Edge detection interrupt subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * usbdux.c

 * Copyright (C) 2003-2014 Bernd Porr, mail@berndporr.me.uk

/*

 * Driver: usbdux

 * Description: University of Stirling USB DAQ & INCITE Technology Limited

 * Devices: [ITL] USB-DUX (usbdux)

 * Author: Bernd Porr <mail@berndporr.me.uk>

 * Updated: 10 Oct 2014

 * Status: Stable

 *

 * Connection scheme for the counter at the digital port:

 * 0=/CLK0, 1=UP/DOWN0, 2=RESET0, 4=/CLK1, 5=UP/DOWN1, 6=RESET1.

 * The sampling rate of the counter is approximately 500Hz.

 *

 * Note that under USB2.0 the length of the channel list determines

 * the max sampling rate. If you sample only one channel you get 8kHz

 * sampling rate. If you sample two channels you get 4kHz and so on.

/*

 * I must give credit here to Chris Baugher who

 * wrote the driver for AT-MIO-16d. I used some parts of this

 * driver. I also must give credits to David Brownell

 * who supported me with the USB development.

 *

 * Bernd Porr

 *

 *

 * Revision history:

 * 0.94: D/A output should work now with any channel list combinations

 * 0.95: .owner commented out for kernel vers below 2.4.19

 *       sanity checks in ai/ao_cmd

 * 0.96: trying to get it working with 2.6, moved all memory alloc to comedi's

 *       attach final USB IDs

 *       moved memory allocation completely to the corresponding comedi

 *       functions firmware upload is by fxload and no longer by comedi (due to

 *       enumeration)

 * 0.97: USB IDs received, adjusted table

 * 0.98: SMP, locking, memory alloc: moved all usb memory alloc

 *       to the usb subsystem and moved all comedi related memory

 *       alloc to comedi.

 *       | kernel | registration | usbdux-usb | usbdux-comedi | comedi |

 * 0.99: USB 2.0: changed protocol to isochronous transfer

 *                IRQ transfer is too buggy and too risky in 2.0

 *                for the high speed ISO transfer is now a working version

 *                available

 * 0.99b: Increased the iso transfer buffer for high sp.to 10 buffers. Some VIA

 *        chipsets miss out IRQs. Deeper buffering is needed.

 * 1.00: full USB 2.0 support for the A/D converter. Now: max 8kHz sampling

 *       rate.

 *       Firmware vers 1.00 is needed for this.

 *       Two 16 bit up/down/reset counter with a sampling rate of 1kHz

 *       And loads of cleaning up, in particular streamlining the

 *       bulk transfers.

 * 1.1:  moved EP4 transfers to EP1 to make space for a PWM output on EP4

 * 1.2:  added PWM support via EP4

 * 2.0:  PWM seems to be stable and is not interfering with the other functions

 * 2.1:  changed PWM API

 * 2.2:  added firmware kernel request to fix an udev problem

 * 2.3:  corrected a bug in bulk timeouts which were far too short

 * 2.4:  fixed a bug which causes the driver to hang when it ran out of data.

 *       Thanks to Jan-Matthias Braun and Ian to spot the bug and fix it.

 *

 constants for firmware upload and download */

 usbdux bulk transfer commands */

 timeout for the USB-transfer in ms */

 300Hz max frequ under PWM */

 Default PWM frequency */

 Size of one A/D value */

/*

 * Size of the input-buffer IN BYTES

 * Always multiple of 8 for 8 microframes which is needed in the highspeed mode

 16 bytes. */

 size of one value for the D/A converter: channel and value */

/*

 * Size of the output-buffer in bytes

 * Actually only the first 4 triplets are used but for the

 * high speed mode we need to pad it to 8 (microframes).

/*

 * Size of the buffer for the dux commands: just now max size is determined

 * by the analogue out + command byte + panic bytes...

 Number of in-URBs which receive the data: min=2 */

 Number of out-URBs which send the data: min=2 */

 Number of in-URBs which receive the data: min=5 */

 must have more buffers due to buggy USB ctr */

 Number of out-URBs which send the data: min=5 */

 must have more buffers due to buggy USB ctr */

 number of retries to get the right dux command */

 actual number of in-buffers */

 actual number of out-buffers */

 ISO-transfer handling: buffers */

 pwm-transfer handling */

 PWM period */

 PWM internal delay for the GPIF in the FX2 */

 size of the PWM buffer which holds the bit pattern */

 input buffer for the ISO-transfer */

 input buffer for single insn */

 time between samples in units of the timer */

 counter between aquisitions */

 interval in frames/uframes */

 commands */

 prevent other CPUs from submitting new commands just now */

 unlink only if the urb really has been submitted */

 get the data from the USB bus and hand it over to comedi */

 bipolar data is two's-complement */

 transfer data */

 if command is still running, resubmit urb */

 exit if not running a command, do not resubmit urb */

 copy the result in the transfer buffer */

		/*

		 * error in the ISOchronous data

		 * we don't copy the data into the transfer buffer

		 * and recycle the last data byte

 after an unlink command, unplug, ... etc */

 a real error */

	/*

	 * comedi_handle_events() cannot be used in this driver. The (*cancel)

	 * operation would unlink the urb.

 prevent other CPUs from submitting a command just now */

 unlink only if it is really running */

 transmit data to the USB bus */

 pointer to the DA */

 if command is still running, resubmit urb for BULK transfer */

 uframes */

 frames */

 exit if not running a command, do not resubmit urb */

 after an unlink command, unplug, ... etc */

 a real error */

	/*

	 * comedi_handle_events() cannot be used in this driver. The (*cancel)

	 * operation would unlink the urb.

 Submit all URBs and start the transfer on the bus */

 in case of a resubmission after an unlink... */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 internal trigger */

 full speed does 1kHz scans every USB frame */

			/*

			 * In high speed mode microframes are possible.

			 * However, during one microframe we can roughly

			 * sample one channel. Thus, the more channels

			 * are in the channel list the more time we need.

 find a power of 2 for the number of channels */

 calc the real sampling rate with the rounding errors */

 TRIG_NONE */

/*

 * creates the ADC command for the MAX1271

 * range is the range value from comedi

 command not received */

 block other CPUs from starting an ai_cmd */

		/*

		 * every channel gets a time window of 125us. Thus, if we

		 * sample all 8 channels we need 1ms. If we sample only one

		 * channel we need only 125us

 find a power of 2 for the interval */

 interval always 1ms */

 enable this acquisition operation */

 fixme: unlink here?? */

 TRIG_INT */

 don't enable the acquision operation */

 wait for an internal signal */

 Mode 0 is used to get a single conversion on demand */

 set command for the first channel */

 adc commands */

 bipolar data is two's-complement */

 number of channels: 1 */

 channel number */

 one 16 bit value */

 Step 1 : check if triggers are trivially valid */

 (devpriv->high_speed) */

 the sampling rate is set by the coversion rate */

 start a new scan (output at once) with a timer */

 (devpriv->high_speed) */

		/*

		 * in usb-2.0 only one conversion it transmitted

		 * but with 8kHz/n

		/*

		 * all conversion events happen simultaneously with

		 * a rate of 1kHz/n

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 internal trigger */

 not used now, is for later use */

 TRIG_NONE */

 we count in steps of 1ms (125us) */

 125us mode not used yet */

 (devpriv->high_speed) */

 125us */

 timing of the conversion itself: every 125 us */

 1ms */

 timing of the scan: we get all channels at once */

 enable this acquisition operation */

 fixme: unlink here?? */

 TRIG_INT */

 submit the urbs later */

 wait for an internal signal */

	/*

	 * We don't tell the firmware here as it would take 8 frames

	 * to submit the information. We do it in the insn_bits.

 Always update the hardware. See the (*insn_config). */

	/*

	 * This command also tells the firmware to return

	 * the digital input lines.

 nothing to do so far */

 unlink only if it is really running */

 success */

		/*

		 * after an unlink command, unplug, ... etc

		 * no unlink needed here. Already shutting down.

 a real error */

 are we actually running? */

 don't do an unlink here */

 in case of a resubmission after an unlink... */

 initialise the buffer */

 DIO bit for the PWM data */

 DIO bit for the sign */

	/*

	 * It doesn't make sense to support more than one value here

	 * because it would just overwrite the PWM buffer.

	/*

	 * The sign is set via a special INSN only, this gives us 8 bits

	 * for normal operation, sign is 0 by default.

		/*

		 * if not zero the PWM is limited to a certain time which is

		 * not supported here

		/*

		 * data[1] = value

		 * data[2] = sign (for a relay)

 values are not kept in this driver, nothing to return here */

 we generate a local buffer for the firmware */

 we need a malloc'ed buffer for usb_control_msg() */

 stop the current firmware on the device */

 7f92 to one */

 upload the new firmware to the device */

 start the new firmware on the device */

 7f92 to zero */

 one frame: 1ms */

 one frame: 1ms */

 uframes */

 frames */

 pwm */

 max bulk ep size in high speed */

 setting to alternate setting 3: enabling iso ep and bulk ep. */

 Analog Input subdevice */

 Analog Output subdevice */

 Digital I/O subdevice */

 Counter subdevice */

 PWM subdevice */

 force unlink all urbs */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for National Instruments daqcard-1200 boards

 * Copyright (C) 2001, 2002, 2003 Frank Mori Hess <fmhess@users.sourceforge.net>

 *

 * PCMCIA crap is adapted from dummy_cs.c 1.31 2001/08/24 12:13:13

 * from the pcmcia package.

 * The initial developer of the pcmcia dummy_cs.c code is David A. Hinds

 * <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds

 * are Copyright (C) 1999 David A. Hinds.

/*

 * Driver: ni_labpc_cs

 * Description: National Instruments Lab-PC (& compatibles)

 * Author: Frank Mori Hess <fmhess@users.sourceforge.net>

 * Devices: [National Instruments] DAQCard-1200 (daqcard-1200)

 * Status: works

 *

 * Thanks go to Fredrik Lingvall for much testing and perseverance in

 * helping to debug daqcard-1200 support.

 *

 * The 1200 series boards have onboard calibration dacs for correcting

 * analog input/output offsets and gains. The proper settings for these

 * caldacs are stored on the board's eeprom. To read the caldac values

 * from the eeprom and store them into a file that can be then be used by

 * comedilib, use the comedi_calibrate program.

 *

 * Configuration options: none

 *

 * The daqcard-1200 has quirky chanlist requirements when scanning multiple

 * channels. Multiple channel scan sequence must start at highest channel,

 * then decrement down to channel 0.  Chanlists consisting of all one channel

 * are also legal, and allow you to pace conversions in bursts.

 *

 * NI manuals:

 *   340988a (daqcard-1200)

 The ni_labpc driver needs the board_ptr */

 daqcard-1200 */

 SPDX-License-Identifier: GPL-2.0+

/*

 * mpc624.c

 * Hardware driver for a Micro/sys inc. MPC-624 PC/104 board

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: mpc624

 * Description: Micro/sys MPC-624 PC/104 board

 * Devices: [Micro/sys] MPC-624 (mpc624)

 * Author: Stanislaw Raczynski <sraczynski@op.pl>

 * Updated: Thu, 15 Sep 2005 12:01:18 +0200

 * Status: working

 *

 * The Micro/sys MPC-624 board is based on the LTC2440 24-bit sigma-delta

 * ADC chip.

 *

 * Subdevices supported by the driver:

 * - Analog In:   supported

 * - Digital I/O: not supported

 * - LEDs:        not supported

 * - EEPROM:      not supported

 *

 * Configuration Options:

 *   [0] - I/O base address

 *   [1] - conversion rate

 *	   Conversion rate   RMS noise	Effective Number Of Bits

 *	   0	3.52kHz		23uV		17

 *	   1	1.76kHz		3.5uV		20

 *	   2	880Hz		2uV		21.3

 *	   3	440Hz		1.4uV		21.8

 *	   4	220Hz		1uV		22.4

 *	   5	110Hz		750uV		22.9

 *	   6	55Hz		510nV		23.4

 *	   7	27.5Hz		375nV		24

 *	   8	13.75Hz		250nV		24.4

 *	   9	6.875Hz		200nV		24.6

 *   [2] - voltage range

 *	   0	-1.01V .. +1.01V

 *	   1	-10.1V .. +10.1V

 Offsets of different ports */

 not used */

 Gain, Mux, Channel of ADC */

 read/write to/from ADC */

 read/write to/from serial EEPROM via I2C */

 write to LEDs */

 read/write to/from digital I/O ports */

 IRQ masking enable/disable */

 Register bits' names */

 32-bit output value bits' names */

 SDI Speed/Resolution Programming bits */

 -------------------------------------------------------------------------- */

 BIP_RANGE(1.01)  this is correct, */

  but my MPC-624 actually seems to have a range of 2.02 */

 BIP_RANGE(10.1)   this is correct, */

  but my MPC-624 actually seems to have a range of 20.2 */

 Start reading data */

 Set the clock low */

 Set the ADSDI line for the next bit (send to MPC624) */

 Set the clock high */

 Read ADSDO on high clock (receive from MPC624) */

	/*

	 * Received 32-bit long value consist of:

	 *	31: EOC - (End Of Transmission) bit - should be 0

	 *	30: DMY - (Dummy) bit - should be 0

	 *	29: SIG - (Sign) bit - 1 if positive, 0 if negative

	 *	28: MSB - (Most Significant Bit) - the first bit of the

	 *					   conversion result

	 *	....

	 *	05: LSB - (Least Significant Bit)- the last bit of the

	 *					   conversion result

	 *	04-00: sub-LSB - sub-LSBs are basically noise, but when

	 *			 averaged properly, they can increase

	 *			 conversion precision up to 29 bits;

	 *			 they can be discarded without loss of

	 *			 resolution.

		/*

		 * Voltage is positive

		 *

		 * comedi operates on unsigned numbers, so mask off EOC

		 * and DMY and don't clear the SGN bit

		/*

		 * The voltage is negative

		 *

		 * data_in contains a number in 30-bit two's complement

		 * code and we must deal with it

 clear EOC and DMY bits */

	/*

	 *  WARNING:

	 *  We always write 0 to GNSWA bit, so the channel range is +-/10.1Vdc

  Trigger the conversion */

  Wait for the conversion to end */

 Analog Input subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/ni_usb6501.c

 * Comedi driver for National Instruments USB-6501

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2014 Luca Ellero <luca.ellero@brickedbrain.com>

/*

 * Driver: ni_usb6501

 * Description: National Instruments USB-6501 module

 * Devices: [National Instruments] USB-6501 (ni_usb6501)

 * Author: Luca Ellero <luca.ellero@brickedbrain.com>

 * Updated: 8 Sep 2014

 * Status: works

 *

 *

 * Configuration Options:

 * none

/*

 * NI-6501 - USB PROTOCOL DESCRIPTION

 *

 * Every command is composed by two USB packets:

 *	- request (out)

 *	- response (in)

 *

 * Every packet is at least 12 bytes long, here is the meaning of

 * every field (all values are hex):

 *

 *	byte 0 is always 00

 *	byte 1 is always 01

 *	byte 2 is always 00

 *	byte 3 is the total packet length

 *

 *	byte 4 is always 00

 *	byte 5 is the total packet length - 4

 *	byte 6 is always 01

 *	byte 7 is the command

 *

 *	byte 8 is 02 (request) or 00 (response)

 *	byte 9 is 00 (response) or 10 (port request) or 20 (counter request)

 *	byte 10 is always 00

 *	byte 11 is 00 (request) or 02 (response)

 *

 * PORT PACKETS

 *

 *	CMD: 0xE READ_PORT

 *	REQ: 00 01 00 10 00 0C 01 0E 02 10 00 00 00 03 <PORT> 00

 *	RES: 00 01 00 10 00 0C 01 00 00 00 00 02 00 03 <BMAP> 00

 *

 *	CMD: 0xF WRITE_PORT

 *	REQ: 00 01 00 14 00 10 01 0F 02 10 00 00 00 03 <PORT> 00 03 <BMAP> 00 00

 *	RES: 00 01 00 0C 00 08 01 00 00 00 00 02

 *

 *	CMD: 0x12 SET_PORT_DIR (0 = input, 1 = output)

 *	REQ: 00 01 00 18 00 14 01 12 02 10 00 00

 *	     00 05 <PORT 0> <PORT 1> <PORT 2> 00 05 00 00 00 00 00

 *	RES: 00 01 00 0C 00 08 01 00 00 00 00 02

 *

 * COUNTER PACKETS

 *

 *	CMD 0x9: START_COUNTER

 *	REQ: 00 01 00 0C 00 08 01 09 02 20 00 00

 *	RES: 00 01 00 0C 00 08 01 00 00 00 00 02

 *

 *	CMD 0xC: STOP_COUNTER

 *	REQ: 00 01 00 0C 00 08 01 0C 02 20 00 00

 *	RES: 00 01 00 0C 00 08 01 00 00 00 00 02

 *

 *	CMD 0xE: READ_COUNTER

 *	REQ: 00 01 00 0C 00 08 01 0E 02 20 00 00

 *	RES: 00 01 00 10 00 0C 01 00 00 00 00 02 <u32 counter value, Big Endian>

 *

 *	CMD 0xF: WRITE_COUNTER

 *	REQ: 00 01 00 10 00 0C 01 0F 02 20 00 00 <u32 counter value, Big Endian>

 *	RES: 00 01 00 0C 00 08 01 00 00 00 00 02

 *

 *

 *	Please  visit https://www.brickedbrain.com if you need

 *	additional information or have any questions.

 *

 Port request packets */

 Counter request packets */

 Response packets */

 Largest supported packets */

 Check if results are valid */

 mask bitmap for comparing */

 Setup tx packet: bytes 12,13,14,15 hold the */

 u32 counter value (Big Endian)	       */

 Check if results are valid */

 Read counter value: bytes 12,13,14,15 of rx packet */

 hold the u32 counter value (Big Endian)	      */

 mask counter value for comparing */

 Digital Input/Output subdevice */

 Counter subdevice */

 SPDX-License-Identifier: GPL-2.0+

/*

 * vmk80xx.c

 * Velleman USB Board Low-Level Driver

 *

 * Copyright (C) 2009 Manuel Gebele <forensixs@gmx.de>, Germany

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: vmk80xx

 * Description: Velleman USB Board Low-Level Driver

 * Devices: [Velleman] K8055 (K8055/VM110), K8061 (K8061/VM140),

 *   VM110 (K8055/VM110), VM140 (K8061/VM140)

 * Author: Manuel Gebele <forensixs@gmx.de>

 * Updated: Sun, 10 May 2009 11:14:59 +0200

 * Status: works

 *

 * Supports:

 *  - analog input

 *  - analog output

 *  - digital input

 *  - digital output

 *  - counter

 *  - pwm

 !non-active! */

 !non-active! */

 !non-active! */

 TODO: completely pointless? */

 TODO: completely pointless? */

 internal usage */

 TODO: not implemented yet */

 internal usage */

 ms */

 unknown, device is not writeable */

 set outputs to known state as we cannot read them */

 VMK8061_MODEL */

 NOTE: avoid compiler warnings */

 VMK8055_MODEL */

 VMK8061_MODEL */

 TODO: Prevent overflows */

	/*

	 * The followin piece of code was translated from the inline

	 * assembler code in the DLL source code.

	 *

	 * asm

	 *   mov eax, k  ; k is the value (data[n])

	 *   and al, 03h ; al are the lower 8 bits of eax

	 *   mov lo, al  ; lo is the low part (tx_buf[reg[0]])

	 *   mov eax, k

	 *   shr eax, 2  ; right shift eax register by 2

	 *   mov hi, al  ; hi is the high part (tx_buf[reg[1]])

	 * end;

 Analog input subdevice */

 Analog output subdevice */

 Digital input subdevice */

 Digital output subdevice */

 Counter subdevice */

 PWM subdevice */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Comedi driver for National Instruments AT-A2150 boards

 * Copyright (C) 2001, 2002 Frank Mori Hess <fmhess@users.sourceforge.net>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: ni_at_a2150

 * Description: National Instruments AT-A2150

 * Author: Frank Mori Hess

 * Status: works

 * Devices: [National Instruments] AT-A2150C (at_a2150c), AT-2150S (at_a2150s)

 *

 * Configuration options:

 *   [0] - I/O port base address

 *   [1] - IRQ (optional, required for timed conversions)

 *   [2] - DMA (optional, required for timed conversions)

 *

 * Yet another driver for obsolete hardware brought to you by Frank Hess.

 * Testing and debugging help provided by Dave Andruczyk.

 *

 * If you want to ac couple the board's inputs, use AREF_OTHER.

 *

 * The only difference in the boards is their master clock frequencies.

 *

 * References (from ftp://ftp.natinst.com/support/manuals):

 *   320360.pdf  AT-A2150 User Manual

 *

 * TODO:

 * - analog level triggering

 * - TRIG_WAKE_EOS

  size in bytes of dma buffer */

 Registers and bits */

 enable (don't internally ground) channels 0 and 1 */

 enable (don't internally ground) channels 2 and 3 */

 ac couple channels 0,1 */

 ac couple channels 2,3 */

 analog power down */

 digital power down */

 trigger config register */

 enable hardware trigger */

 software start aquistion trigger */

 clears fifo + fifo flags */

 read data */

 clear dma terminal count interrupt */

 read only */

 fifo not empty */

 fifo overflow */

 end of acquisition interrupt */

 offset calibration in progress */

 interrupt has occurred */

 dma terminal count interrupt has occurred */

 write only */

 sets dma channel */

 enables dma */

 sets irq level */

 enable fifo interrupts */

 interrupt fifo half full */

 enable interrupt on dma terminal count */

 enables demand mode dma */

 master clock periods, in nanoseconds */

 number of available master clock speeds */

 maximum conversion rate in nanoseconds */

 analog input range */

 enum must match board indices */

 number of data points left to be taken */

 irq/dma register bits */

 config register bits */

 interrupt service routine */

	/*

	 * residue is the number of bytes left to be done on the dma

	 * transfer.  It should always be zero at this point unless

	 * the stop_src is set to external triggering.

 figure out how many points to read */

 figure out how many points will be stored next time */

	/*

	 * There should only be a residue if collection was stopped by having

	 * the stop_src set to an external trigger, in which case there

	 * will be no more data

 write data point to comedi buffer */

 convert from 2's complement to unsigned coding */

 end of acquisition */

 re-enable dma */

 clear interrupt */

 disable dma on card */

 disable computer's dma */

 clear fifo and reset triggering circuitry */

/*

 * sets bits in devpriv->clock_bits to nearest approximation of requested

 * period, adjusts requested period to actual timing.

 initialize greatest lower and least upper bounds */

 make sure period is in available range */

 we can multiply period by 1, 2, 4, or 8, using (1 << i) */

 there are a maximum of 4 master clocks */

 temp is the period in nanosec we are evaluating */

 if it is the best match yet */

 if least upper bound is better approximation */

 set clock bits for config register appropriately */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_NONE */

 step 4: fix up any arguments */

 Step 5: check channel list if it exists */

 clear fifo and reset triggering circuitry */

 setup chanlist */

 setup ac/dc coupling */

 setup timing */

 send timing, channel, config bits */

 initialize number of samples remaining */

 set size of transfer to fill in 1/3 second */

	/*

	 * Clear dma interrupt before enabling it, to try and get rid of

	 * that one spurious interrupt that has been happening.

 enable dma on card */

 may need to wait 72 sampling periods if timing was changed */

 setup start triggering */

 decide if we need to wait 72 periods for valid data */

 set trigger source to delay trigger */

 otherwise no delay */

 enable external hardware trigger */

		/*

		 * XXX add support for level/slope start trigger

		 * using TRIG_OTHER

 send trigger config bits */

 start acquisition for soft trigger */

 clear fifo and reset triggering circuitry */

 setup chanlist */

 set dc coupling */

 send timing, channel, config bits */

 disable dma on card */

 setup start triggering */

 start acquisition for soft trigger */

	/*

	 * there is a 35.6 sample delay for data to get through the

	 * antialias filter

 read data */

 clear fifo and reset triggering circuitry */

	/*

	 * Only IRQs 15, 14, 12-9, and 7-3 are valid.

	 * Only DMA channels 7-5 and 3-0 are valid.

 DMA uses 1 buffer */

 an IRQ and DMA are required to support async commands */

 analog input subdevice */

 set card's irq and dma levels */

 reset and sync adc clock circuitry */

 initialize configuration register */

 wait until offset calibration is done, then enable analog inputs */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * addi_apci_3120.c

 * Copyright (C) 2004,2005  ADDI-DATA GmbH for the source code of this module.

 *

 *	ADDI-DATA GmbH

 *	Dieselstrasse 3

 *	D-77833 Ottersweier

 *	Tel: +19(0)7223/9493-0

 *	Fax: +49(0)7223/9493-92

 *	http://www.addi-data.com

 *	info@addi-data.com

/*

 * PCI BAR 0 register map (devpriv->amcc)

 * see amcc_s5933.h for register and bit defines

/*

 * PCI BAR 1 register map (dev->iobase)

 I8254_MODE0 */

 I8254_MODE2 */

 I8254_MODE4 */

 I8254_MODE5 */

/*

 * PCI BAR 2 register map (devpriv->addon)

/*

 * Board revisions

 70ns = 14.29MHz */

 50ns = 20MHz */

 16-bit interface for AMCC add-on registers */

 AMCC - enable transfer count and reset A2P FIFO */

 Add-On - enable transfer count and reset A2P FIFO */

 AMCC - enable transfers and reset A2P flags */

 Add-On - DMA start address */

 Add-On - Number of acquisitions */

 AMCC - enable write complete (DMA) and set FIFO advance */

 Add-On - enable DMA */

		/*

		 * Must we fill full first buffer? And must we fill

		 * full second buffer when first is once filled?

 don't we want wake up every scan? */

 isn't output buff smaller that our DMA buff? */

/*

 * There are three timers on the board. They all use the same base

 * clock with a fixed prescaler for each timer. The base clock used

 * depends on the board version and type.

 *

 * APCI-3120 Rev A boards OSC = 14.29MHz base clock (~70ns)

 * APCI-3120 Rev B boards OSC = 20MHz base clock (50ns)

 * APCI-3001 boards OSC = 20MHz base clock (50ns)

 *

 * The prescalers for each timer are:

 * Timer 0 CLK = OSC/10

 * Timer 1 CLK = OSC/1000

 * Timer 2 CLK = OSC/1000

 timer 2 is 24-bits */

 timers 0 and 1 are 16-bits */

 the timers require a minimum divisor of 2 */

 a dummy read of APCI3120_CTR0_REG clears the timer 2 interrupt */

 write 16-bit value to timer (lower 16-bits of timer 2) */

 write upper 16-bits to timer 2 */

 read 16-bit value from timer (lower 16-bits of timer 2) */

 read upper 16-bits from timer 2 */

 set chanlist for scan */

 a dummy read of APCI3120_TIMER_MODE_REG resets the ai FIFO */

 set scan length (PR) and scan start (PA) */

 enable chanlist scanning if necessary */

 switch DMA buffers for next interrupt */

 restart DMA if not using double buffering */

		/*

		 * for safety...

		 * timer2 interrupts are not enabled in the driver

 AMCC- Clear write complete interrupt (DMA) */

 do some data transfer */

 set default mode bits */

 AMCC- Clear write complete interrupt (DMA) */

 load chanlist for command scan */

		/*

		 * Timer 1 is used in MODE2 (rate generator) to set the

		 * start time for each scan.

	/*

	 * Timer 0 is used in MODE2 (rate generator) to set the conversion

	 * time for each acquisition.

 set mode to enable acquisition */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 Test Delay timing */

 minimum conversion time per sample is 10us */

  TRIG_NONE */

 Step 4: fix up any arguments */

 scan begin must be larger than the scan time */

 Step 5: check channel list if it exists */

 Add-On - disable DMA */

 Add-On - disable bus master */

 AMCC - disable bus master */

 disable all counters, ext trigger, and reset scan */

 DISABLE_ALL_INTERRUPT */

 set mode for A/D conversions by software trigger with timer 0 */

 load chanlist for single channel scan */

	/*

	 * Timer 0 is used in MODE4 (software triggered strobe) to set the

	 * conversion time for each acquisition. Each conversion is triggered

	 * when the divisor is written to the timer, The conversion is done

	 * when the EOC bit in the status register is '0'.

 fixed conversion time of 10 us */

 trigger conversion */

 disable all interrupt sources */

 disable all counters, ext trigger, and reset scan */

 clear interrupt status */

 Analog Input subdevice */

 Analog Output subdevice */

 Digital Input subdevice */

 Digital Output subdevice */

 Timer subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/dt9812.c

 *   COMEDI driver for DataTranslation DT9812 USB module

 *

 * Copyright (C) 2005 Anders Blomdell <anders.blomdell@control.lth.se>

 *

 * COMEDI - Linux Control and Measurement Device Interface

/*

 * Driver: dt9812

 * Description: Data Translation DT9812 USB module

 * Devices: [Data Translation] DT9812 (dt9812)

 * Author: anders.blomdell@control.lth.se (Anders Blomdell)

 * Status: in development

 * Updated: Sun Nov 20 20:18:34 EST 2005

 *

 * This driver works, but bulk transfers not implemented. Might be a

 * starting point for someone else. I found out too late that USB has

 * too high latencies (>1 ms) for my needs.

/*

 * Nota Bene:

 *   1. All writes to command pipe has to be 32 bytes (ISP1181B SHRTP=0 ?)

 *   2. The DDK source (as of sep 2005) is in error regarding the

 *      input MUX bits (example code says P4, but firmware schematics

 *      says P1).

 usb_bulk_msg() timeout in milliseconds */

/*

 * See Silican Laboratories C8051F020/1/2/3 manual

 A/D  D/A  DI  DO  CT */

  8    2   8   8   1  +/- 10V */

  8    2   8   8   1  0-2.44V */

 Write Flash memory */

 Read Flash memory misc config info */

	/*

	 * Register read/write commands for processor

 Read a single byte of USB memory */

 Write a single byte of USB memory */

 Multiple Reads of USB memory */

 Multiple Writes of USB memory */

 Read, (AND) with mask, OR value, then write (single) */

 Read, (AND) with mask, OR value, then write (multiple) */

	/*

	 * Register read/write commands for SMBus

 Read a single byte of SMBus */

 Write a single byte of SMBus */

 Multiple Reads of SMBus */

 Multiple Writes of SMBus */

	/*

	 * Register read/write commands for a device

 Read a single byte of a device */

 Write a single byte of a device */

 Multiple Reads of a device */

 Multiple Writes of a device */

 Not sure if we'll need this */

 Set interrupt on change mask */

 Write (or Clear) the CGL for the ADC */

 Multiple Reads of USB memory */

 Multiple Writes to USB memory */

 Issue a start command to a given subsystem */

 Issue a stop command to a given subsystem */

 calibrate the board using CAL_POT_CMD */

 set the DAC FIFO size */

 Write or Clear the CGL for the DAC */

 Read a single value from a subsystem */

 Write a single value to a subsystem */

 Valid DT9812_USB_FIRMWARE_CMD_CODE's will be less than this number */

 DT9812 only responds to 32 byte writes!! */

 DT9812 only responds to 32 byte writes!! */

 DT9812 only responds to 32 byte writes!! */

 DT9812 only responds to 32 byte writes!! */

		/*

		 * bits 0-6 in F020_SFR_P3 are bits 0-6 in the digital

		 * input port bit 3 in F020_SFR_P1 is bit 7 in the

		 * digital input port

 In the DT9812/10V MUX is selected by P1.5-7 */

 In the DT9812/2.5V, internal mux is selected by bits 0:2 */

 In the DT9812/10V, there is an external gain of 0.5 */

		/*

		 * 000 -> Gain =  1

		 * 001 -> Gain =  2

		 * 010 -> Gain =  4

		 * 011 -> Gain =  8

		 * 10x -> Gain = 16

		 * 11x -> Gain =  0.5

 this should never happen, just use a gain of 1 */

 1 select the gain */

 2 set the MUX to select the channel */

 3 start conversion */

 read the status and ADC */

	/*

	 * An ADC conversion takes 16 SAR clocks cycles, i.e. about 9us.

	 * Therefore, between the instant that AD0BUSY was set via

	 * dt9812_rmw_multiple_registers and the read of AD0BUSY via

	 * dt9812_read_multiple_registers, the conversion should be complete

	 * since these two operations require two USB transactions each taking

	 * at least a millisecond to complete.  However, lets make sure that

	 * conversion is finished.

			/*

			 * For DT9812-10V the personality module set the

			 * encoding to 2's complement. Hence, convert it before

			 * returning it

 1. Set DAC mode */

 2. load lsb of DAC value first */

 3. load msb of DAC value next to latch the 12-bit value */

 1. Set DAC mode */

 2. load lsb of DAC value first */

 3. load msb of DAC value next to latch the 12-bit value */

 unused message pipe */

 unused write stream */

 unused read stream */

		/*

		 * Seems like a configuration reset is necessary if driver is

		 * reloaded while device is attached

 let the user know what node this device is now attached to */

 Digital Input subdevice */

 Digital Output subdevice */

 Analog Input subdevice */

 Analog Output subdevice */

 SPDX-License-Identifier: GPL-2.0

/*

 * adv_pci1710.c

 * Comedi driver for Advantech PCI-1710 series boards

 * Author: Michal Dobes <dobes@tesnet.cz>

 *

 * Thanks to ZhenGang Shang <ZhenGang.Shang@Advantech.com.cn>

 * for testing and information.

/*

 * Driver: adv_pci1710

 * Description: Comedi driver for Advantech PCI-1710 series boards

 * Devices: [Advantech] PCI-1710 (adv_pci1710), PCI-1710HG, PCI-1711,

 *   PCI-1713, PCI-1731

 * Author: Michal Dobes <dobes@tesnet.cz>

 * Updated: Fri, 29 Oct 2015 17:19:35 -0700

 * Status: works

 *

 * Configuration options: not applicable, uses PCI auto config

 *

 * This driver supports AI, AO, DI and DO subdevices.

 * AI subdevice supports cmd and insn interface,

 * other subdevices support only insn interface.

 *

 * The PCI-1710 and PCI-1710HG have the same PCI device ID, so the

 * driver cannot distinguish between them, as would be normal for a

 * PCI driver.

/*

 * PCI BAR2 Register map (dev->iobase)

 R:   A/D data */

 W:   soft trigger for A/D */

 W:   A/D gain/range register */

 W:   A/D multiplexor control */

 R:   status register */

 1=IRQ occurred */

 1=FIFO is full, fatal error */

 1=FIFO is half full */

 1=FIFO is empty */

 W:   control register */

 1=ext. clk, 0=int. 100kHz clk */

 1=on FIFO half full, 0=on sample */

 1=enable IRQ */

 1=enable ext. trigger GATE (8254?) */

 1=enable ext. trigger source */

 1=enable int. 8254 trigger source */

 1=enable software trigger source */

 W:   clear interrupts request */

 W:   clear FIFO */

 W:   D/A register */

 W:   D/A reference control */

 R:   digital inputs */

 W:   digital outputs */

 R/W: 8254 timer */

 gain 1   (0x00) */

 gain 2   (0x01) */

 gain 4   (0x02) */

 gain 8   (0x03) */

 gain 0.5 (0x04) */

 gain 1   (0x00 | UNI) */

 gain 2   (0x01 | UNI) */

 gain 4   (0x02 | UNI) */

 gain 8   (0x03 | UNI) */

 gain 1    (0x00) */

 gain 10   (0x01) */

 gain 100  (0x02) */

 gain 1000 (0x03) */

 gain 0.5  (0x04) */

 gain 5    (0x05) */

 gain 50   (0x06) */

 gain 500  (0x07) */

 gain 1    (0x00 | UNI) */

 gain 10   (0x01 | UNI) */

 gain 100  (0x02 | UNI) */

 gain 1000 (0x03 | UNI) */

 gain 1  (0x00) */

 gain 2  (0x01) */

 gain 4  (0x02) */

 gain 8  (0x03) */

 gain 16 (0x04) */

 internal -5V ref */

 internal -10V ref */

 external -Vref (+/-10V max) */

 control register value */

 used to switch from TRIG_EXT to TRIG_xxx */

 used to set the channel interval to scan */

  list of scanned channel */

 len of the non-repeating chanlist */

  copy of D/A outpit range register */

 adjust for unipolar gain codes */

 first channel is always ok */

  we detected a loop, stop */

 next correct channel in list */

  store range list to card */

 select channel and set range */

 store remainder of channel list */

 select channel interval to scan */

		/*

		 * The upper 4 bits of the 16-bit sample are the channel number

		 * that the sample was acquired from. Verify that this channel

		 * number matches the expected channel number.

 enable software trigger */

 start conversion */

 disable software trigger */

 disable A/D triggers and interrupt sources */

 preserve counter 0 clk src */

 disable pacer */

 clear A/D FIFO and any pending interrutps */

  is device attached? */

  no, exit */

  is this interrupt from our board? */

  no, exit */

  Switch from initial TRIG_EXT to TRIG_xxx. */

 set software trigger */

 no sample on this interrupt; reset the channel interval */

 TRIG_NOW */

 TRIG_EXT */

 Step 1 : check if triggers are trivially valid */

 step 2a: make sure trigger sources are unique */

 step 2b: and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_FOLLOW */

 TRIG_NONE */

 step 4: fix up any arguments */

 Step 5: check channel list */

 internal */

 external */

	/*

	 * Disable A/D triggers and interrupt sources, set counter 0

	 * to use internal 1 MHz clock.

 clear A/D FIFO and any pending interrutps */

 set DACs to 0..5V and outputs to 0V */

 set digital outputs to 0 */

 all boards have analog inputs */

		/*

		 * All other boards have digital inputs and outputs as

		 * well as a user counter.

 Analog Input subdevice */

 find the value needed to adjust for unipolar gain codes */

 Analog Output subdevice */

 Digital Input subdevice */

 Digital Output subdevice */

 Counter subdevice (8254) */

 counters 1 and 2 are used internally for the pacer */

 max_samples is half the FIFO size (2 bytes/sample) */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * COMEDI driver for Advantech PCI-1720U

 * Copyright (c) 2015 H Hartley Sweeten <hsweeten@visionengravers.com>

 *

 * Separated from the adv_pci1710 driver written by:

 * Michal Dobes <dobes@tesnet.cz>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: adv_pci1720

 * Description: 4-channel Isolated D/A Output board

 * Devices: [Advantech] PCI-7120U (adv_pci1720)

 * Author: H Hartley Sweeten <hsweeten@visionengravers.com>

 * Updated: Fri, 29 Oct 2015 17:19:35 -0700

 * Status: untested

 *

 * Configuration options: not applicable, uses PCI auto config

 *

 * The PCI-1720 has 4 isolated 12-bit analog output channels with multiple

 * output ranges. It also has a BoardID switch to allow differentiating

 * multiple boards in the system.

 *

 * The analog outputs can operate in two modes, immediate and synchronized.

 * This driver currently does not support the synchronized output mode.

 *

 * Jumpers JP1 to JP4 are used to set the current sink ranges for each

 * analog output channel. In order to use the current sink ranges, the

 * unipolar 5V range must be used. The voltage output and sink output for

 * each channel is available on the connector as separate pins.

 *

 * Jumper JP5 controls the "hot" reset state of the analog outputs.

 * Depending on its setting, the analog outputs will either keep the

 * last settings and output values or reset to the default state after

 * a "hot" reset. The default state for all channels is uniploar 5V range

 * and all the output values are 0V. To allow this feature to work, the

 * analog outputs are not "reset" when the driver attaches.

/*

 * PCI BAR2 Register map (dev->iobase)

 set the channel range and polarity */

 conversion time is 2us (500 kHz throughput) */

 Analog Output subdevice */

 Digital Input subdevice (BoardID SW1) */

 disable synchronized output, channels update when written */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Comedi driver for CIO-DAS16/M1

 * Author: Frank Mori Hess, based on code from the das16 driver.

 * Copyright (C) 2001 Frank Mori Hess <fmhess@users.sourceforge.net>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: das16m1

 * Description: CIO-DAS16/M1

 * Author: Frank Mori Hess <fmhess@users.sourceforge.net>

 * Devices: [Measurement Computing] CIO-DAS16/M1 (das16m1)

 * Status: works

 *

 * This driver supports a single board - the CIO-DAS16/M1. As far as I know,

 * there are no other boards that have the same register layout. Even the

 * CIO-DAS16/M1/16 is significantly different.

 *

 * I was _barely_ able to reach the full 1 MHz capability of this board, using

 * a hard real-time interrupt (set the TRIG_RT flag in your struct comedi_cmd

 * and use rtlinux or RTAI). The board can't do dma, so the bottleneck is

 * pulling the data across the ISA bus. I timed the interrupt handler, and it

 * took my computer ~470 microseconds to pull 512 samples from the board. So

 * at 1 Mhz sampling rate, expect your CPU to be spending almost all of its

 * time in the interrupt handler.

 *

 * This board has some unusual restrictions for its channel/gain list.  If the

 * list has 2 or more channels in it, then two conditions must be satisfied:

 * (1) - even/odd channels must appear at even/odd indices in the list

 * (2) - the list must have an even number of entries.

 *

 * Configuration options:

 *   [0] - base io address

 *   [1] - irq (optional, but you probably want it)

 *

 * irq can be omitted, although the cmd interface will not work without it.

/*

 * Register map (dev->iobase)

 16-bit register */

 # samples */

	/*

	 * The fifo values have the channel number in the lower 4-bits and

	 * the sample in the upper 12-bits. This just shifts the values

	 * to remove the channel numbers.

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 internal trigger */

 TRIG_NONE */

 step 4: fix up arguments */

 Step 5: check channel list if it exists */

  set software count */

	/*

	 * Initialize lower half of hardware counter, used to determine how

	 * many samples are in fifo.  Value doesn't actually load into counter

	 * until counter's next clock (the next a/d conversion).

	/*

	 * Remember current reading of counter so we know when counter has

	 * actually been loaded.

 enable interrupts and set internal pacer counter mode and counts */

 TRIG_EXT */

  set control & status register */

	/*

	 * If we are using external start trigger (also board dislikes having

	 * both start and conversion triggers external simultaneously).

 clear interrupt */

 disable interrupts and pacer */

 clear interrupt */

 trigger conversion */

 figure out how many samples are in fifo */

	/*

	 * Make sure hardware counter reading is not bogus due to initial

	 * value not having been loaded yet.

		/*

		 * The calculation of num_samples looks odd, but it uses the

		 * following facts. 16 bit hardware counter is initialized with

		 * value of zero (which really means 0x1000).  The counter

		 * decrements by one on each conversion (when the counter

		 * decrements from zero it goes to 0xffff).  num_samples is a

		 * 16 bit variable, so it will roll over in a similar fashion

		 * to the hardware counter.  Work it out, and this is what you

		 * get.

  check if we only need some of the points */

  make sure we don't try to get too many points if fifo has overrun */

 end of acquisition */

	/*

	 * This probably won't catch overruns since the card doesn't generate

	 * overrun interrupts, but we might as well try.

  prevent race with interrupt handler */

  prevent race with comedi_poll() */

 clear interrupt */

 Request an additional region for the 8255 and 3rd 8254 */

 only irqs 2, 3, 4, 5, 6, 7, 10, 11, 12, 14, and 15 are valid */

 Analog Input subdevice */

 Digital Input subdevice */

 Digital Output subdevice */

 Digital I/O subdevice (8255) */

  initialize digital output lines */

 set the interrupt level */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/rti800.c

 * Hardware driver for Analog Devices RTI-800/815 board

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1998 David A. Schleef <ds@schleef.org>

/*

 * Driver: rti800

 * Description: Analog Devices RTI-800/815

 * Devices: [Analog Devices] RTI-800 (rti800), RTI-815 (rti815)

 * Author: David A. Schleef <ds@schleef.org>

 * Status: unknown

 * Updated: Fri, 05 Sep 2008 14:50:44 +0100

 *

 * Configuration options:

 *   [0] - I/O port base address

 *   [1] - IRQ (not supported / unused)

 *   [2] - A/D mux/reference (number of channels)

 *	   0 = differential

 *	   1 = pseudodifferential (common)

 *	   2 = single-ended

 *   [3] - A/D range

 *	   0 = [-10,10]

 *	   1 = [-5,5]

 *	   2 = [0,10]

 *   [4] - A/D encoding

 *	   0 = two's complement

 *	   1 = straight binary

 *   [5] - DAC 0 range

 *	   0 = [-10,10]

 *	   1 = [0,10]

 *   [6] - DAC 0 encoding

 *	   0 = two's complement

 *	   1 = straight binary

 *   [7] - DAC 1 range (same as DAC 0)

 *   [8] - DAC 1 encoding (same as DAC 0)

/*

 * Register map

		/*

		 * Without a delay here, the RTI_CSR_OVERRUN bit

		 * gets set, and you will have an error.

 Outputs are inverted... */

 invalid, forces the MUXGAIN register to be set when first used */

 ai subdevice */

 ao subdevice (only on rti815) */

 di */

 do */

	/*

	 * There is also an Am9513 timer on these boards. This subdevice

	 * is not currently supported.

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * addi_apci_1500.c

 * Copyright (C) 2004,2005  ADDI-DATA GmbH for the source code of this module.

 *

 *	ADDI-DATA GmbH

 *	Dieselstrasse 3

 *	D-77833 Ottersweier

 *	Tel: +19(0)7223/9493-0

 *	Fax: +49(0)7223/9493-92

 *	http://www.addi-data.com

 *	info@addi-data.com

/*

 * PCI Bar 0 Register map (devpriv->amcc)

 * see amcc_s5933.h for register and bit defines

/*

 * PCI Bar 1 Register map (dev->iobase)

 * see z8536.h for Z8536 internal registers and bit defines

/*

 * PCI Bar 2 Register map (devpriv->addon)

 Digital trigger configuration [0]=AND [1]=OR */

 Pattern Mask */

 Pattern Transition */

 Pattern Polarity */

	/*

	 * Even if the state of the Z8536 is not known, the following

	 * sequence will reset it and put it in State 0.

 Disable all Ports and Counter/Timers */

	/*

	 * Port A is connected to Ditial Input channels 0-7.

	 * Configure the port to allow interrupt detection.

	/*

	 * Port B is connected to Ditial Input channels 8-13.

	 * Configure the port to allow interrupt detection.

	 *

	 * NOTE: Bits 7 and 6 of Port B are connected to internal

	 * diagnostic signals and bit 7 is inverted.

	/*

	 * Not sure what Port C is connected to...

	/*

	 * Clear and disable all interrupt sources.

	 *

	 * Just in case, the reset of the Z8536 should have already

	 * done this.

 Disable all interrupts */

 preserve any write bits */

 port a event (inputs 0-7) */

 Tests if this is an external error */

 voltage error */

 short circuit error */

 port b event (inputs 8-13) */

	/*

	 * NOTE: The 'status' returned by the sample matches the

	 * interrupt mask information from the APCI-1500 Users Manual.

	 *

	 *    Mask     Meaning

	 * ----------  ------------------------------------------

	 * 0b00000001  Event 1 has occurred

	 * 0b00000010  Event 2 has occurred

	 * 0b00000100  Counter/timer 1 has run down (not implemented)

	 * 0b00001000  Counter/timer 2 has run down (not implemented)

	 * 0b00010000  Counter 3 has run down (not implemented)

	 * 0b00100000  Watchdog has run down (not implemented)

	 * 0b01000000  Voltage error

	 * 0b10000000  Short-circuit error

 Disables the main interrupt on the board */

 Disable Ports A & B */

 Ack any pending interrupts */

 Disable pattern interrupts */

 Enable Ports A & B */

 Disable Ports A & B */

 Set Port A for selected trigger pattern */

 Set Port B for selected trigger pattern */

 Set Port A trigger mode (if enabled) and enable interrupt */

 Set Port B trigger mode (if enabled) and enable interrupt */

 Enable Ports A & B */

 Authorizes the main interrupt on the board */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

	/*

	 * Internal start source triggers:

	 *

	 *   0	AND mode for Port A (digital inputs 0-7)

	 *	AND mode for Port B (digital inputs 8-13 and internal signals)

	 *

	 *   1	OR mode for Port A (digital inputs 0-7)

	 *	AND mode for Port B (digital inputs 8-13 and internal signals)

	 *

	 *   2	AND mode for Port A (digital inputs 0-7)

	 *	OR mode for Port B (digital inputs 8-13 and internal signals)

	 *

	 *   3	OR mode for Port A (digital inputs 0-7)

	 *	OR mode for Port B (digital inputs 8-13 and internal signals)

 Step 4: fix up any arguments */

 Step 5: check channel list if it exists */

/*

 * The pattern-recognition logic must be configured before the digital

 * input async command is started.

 *

 * Digital input channels 0 to 13 can generate interrupts. Channels 14

 * and 15 are connected to internal board status/diagnostic signals.

 *

 * Channel 14 - Voltage error (the external supply is < 5V)

 * Channel 15 - Short-circuit/overtemperature error

 *

 *	data[0] : INSN_CONFIG_DIGITAL_TRIG

 *	data[1] : trigger number

 *		  0 = AND mode

 *		  1 = OR mode

 *	data[2] : configuration operation:

 *	          COMEDI_DIGITAL_TRIG_DISABLE = no interrupts

 *	          COMEDI_DIGITAL_TRIG_ENABLE_EDGES = edge interrupts

 *	          COMEDI_DIGITAL_TRIG_ENABLE_LEVELS = level interrupts

 *	data[3] : left-shift for data[4] and data[5]

 *	data[4] : rising-edge/high level channels

 *	data[5] : falling-edge/low level channels

 clear trigger configuration */

 enable channels */

 enable edge detection */

 rising-edge channels */

 falling-edge channels */

 enable channels */

 enable level detection */

 high level channels */

 low level channels */

	/*

	 * The AND mode trigger can only have one channel (max) enabled

	 * for edge detection.

 save the trigger configuration */

 Simulate the 8254 timer modes */

 Interrupt on Terminal Count */

 Hardware Retriggerable One-Shot */

 Rate Generator */

 Square Wave Mode */

 Software Triggered Strobe */

 Hardware Triggered Strobe (watchdog) */

 111.86 kHz / 2 */

 17879 ns (approx) */

 3.49 kHz / 2 */

 573066 ns (approx) */

 1.747 kHz / 2 */

 1164822 ns (approx) */

 preserve gate */

 set trigger */

 software trigger a timer, it only makes sense to do one write */

 preserve gate */

 set RCC */

 Digital Input subdevice */

 Digital Output subdevice */

 reset all the digital outputs */

 Counter/Timer(Watchdog) subdevice */

 Enable the PCI interrupt */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/ni_labpc.c

 * Driver for National Instruments Lab-PC series boards and compatibles

 * Copyright (C) 2001-2003 Frank Mori Hess <fmhess@users.sourceforge.net>

/*

 * Driver: ni_labpc

 * Description: National Instruments Lab-PC (& compatibles)

 * Devices: [National Instruments] Lab-PC-1200 (lab-pc-1200),

 *   Lab-PC-1200AI (lab-pc-1200ai), Lab-PC+ (lab-pc+)

 * Author: Frank Mori Hess <fmhess@users.sourceforge.net>

 * Status: works

 *

 * Configuration options - ISA boards:

 *   [0] - I/O port base address

 *   [1] - IRQ (optional, required for timed or externally triggered

 *		conversions)

 *   [2] - DMA channel (optional)

 *

 * Tested with lab-pc-1200.  For the older Lab-PC+, not all input

 * ranges and analog references will work, the available ranges/arefs

 * will depend on how you have configured the jumpers on your board

 * (see your owner's manual).

 *

 * Kernel-level ISA plug-and-play support for the lab-pc-1200 boards

 * has not yet been added to the driver, mainly due to the fact that

 * I don't know the device id numbers. If you have one of these boards,

 * please file a bug report at https://comedi.org/ so I can get the

 * necessary information from you.

 *

 * The 1200 series boards have onboard calibration dacs for correcting

 * analog input/output offsets and gains. The proper settings for these

 * caldacs are stored on the board's eeprom. To read the caldac values

 * from the eeprom and store them into a file that can be then be used

 * by comedilib, use the comedi_calibrate program.

 *

 * The Lab-pc+ has quirky chanlist requirements when scanning multiple

 * channels. Multiple channel scan sequence must start at highest channel,

 * then decrement down to channel 0. The rest of the cards can scan down

 * like lab-pc+ or scan up from channel zero. Chanlists consisting of all

 * one channel are also legal, and allow you to pace conversions in bursts.

 *

 * NI manuals:

 * 341309a (labpc-1200 register manual)

 * 320502b (lab-pc+)

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * c6xdigio.c

 * Hardware driver for Mechatronic Systems Inc. C6x_DIGIO DSP daughter card.

 * http://web.archive.org/web/%2A/http://robot0.ge.uiuc.edu/~spong/mecha/

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1999 Dan Block

/*

 * Driver: c6xdigio

 * Description: Mechatronic Systems Inc. C6x_DIGIO DSP daughter card

 * Author: Dan Block

 * Status: unknown

 * Devices: [Mechatronic Systems Inc.] C6x_DIGIO DSP daughter card (c6xdigio)

 * Updated: Sun Nov 20 20:18:34 EST 2005

 *

 * Configuration Options:

 *	[0] - base address

/*

 * Register I/O map

	/*

	 * There are only 2 PWM channels and they have a maxdata of 500.

	 * Instead of allocating private data to save the values in for

	 * readback this driver just packs the values for the two channels

	 * in the s->state.

 munge two's complement value to offset binary */

 Initialize the PWM */

 Reset the encoders */

 Standard LPT Printer Port */

 ECP Printer Port */

  Make sure that PnP ports get activated */

 pwm output subdevice */

 encoder (counter) subdevice */

  I will call this init anyway but more than likely the DSP board */

  will not be connected when device driver is loaded. */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * ni_at_ao.c

 * Driver for NI AT-AO-6/10 boards

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000,2002 David A. Schleef <ds@schleef.org>

/*

 * Driver: ni_at_ao

 * Description: National Instruments AT-AO-6/10

 * Devices: [National Instruments] AT-AO-6 (at-ao-6), AT-AO-10 (at-ao-10)

 * Status: should work

 * Author: David A. Schleef <ds@schleef.org>

 * Updated: Sun Dec 26 12:26:28 EST 2004

 *

 * Configuration options:

 *   [0] - I/O port base address

 *   [1] - IRQ (unused)

 *   [2] - DMA (unused)

 *   [3] - analog output range, set by jumpers on hardware

 *         0 for -10 to 10V bipolar

 *         1 for 0V to 10V unipolar

/*

 * Register map

 *

 * Register-level programming information can be found in NI

 * document 320379.pdf.

 registers with _2_ are accessed when GRP2WR is set in CFG1 */

 Used for caldac readback */

 the hardware expects two's complement values */

/*

 * There are three DAC8800 TrimDACs on the board. These are 8-channel,

 * 8-bit DACs that are used to calibrate the Analog Output channels.

 * The factory default calibration values are stored in the EEPROM.

 * The TrimDACs, and EEPROM addresses, are mapped as:

 *

 *        Channel       EEPROM  Description

 *   -----------------  ------  -----------------------------------

 *    0 - DAC0 Chan 0    0x30   AO Channel 0 Offset

 *    1 - DAC0 Chan 1    0x31   AO Channel 0 Gain

 *    2 - DAC0 Chan 2    0x32   AO Channel 1 Offset

 *    3 - DAC0 Chan 3    0x33   AO Channel 1 Gain

 *    4 - DAC0 Chan 4    0x34   AO Channel 2 Offset

 *    5 - DAC0 Chan 5    0x35   AO Channel 2 Gain

 *    6 - DAC0 Chan 6    0x36   AO Channel 3 Offset

 *    7 - DAC0 Chan 7    0x37   AO Channel 3 Gain

 *    8 - DAC1 Chan 0    0x38   AO Channel 4 Offset

 *    9 - DAC1 Chan 1    0x39   AO Channel 4 Gain

 *   10 - DAC1 Chan 2    0x3a   AO Channel 5 Offset

 *   11 - DAC1 Chan 3    0x3b   AO Channel 5 Gain

 *   12 - DAC1 Chan 4    0x3c   2.5V Offset

 *   13 - DAC1 Chan 5    0x3d   AO Channel 6 Offset (at-ao-10 only)

 *   14 - DAC1 Chan 6    0x3e   AO Channel 6 Gain   (at-ao-10 only)

 *   15 - DAC1 Chan 7    0x3f   AO Channel 7 Offset (at-ao-10 only)

 *   16 - DAC2 Chan 0    0x40   AO Channel 7 Gain   (at-ao-10 only)

 *   17 - DAC2 Chan 1    0x41   AO Channel 8 Offset (at-ao-10 only)

 *   18 - DAC2 Chan 2    0x42   AO Channel 8 Gain   (at-ao-10 only)

 *   19 - DAC2 Chan 3    0x43   AO Channel 9 Offset (at-ao-10 only)

 *   20 - DAC2 Chan 4    0x44   AO Channel 9 Gain   (at-ao-10 only)

 *        DAC2 Chan 5    0x45   Reserved

 *        DAC2 Chan 6    0x46   Reserved

 *        DAC2 Chan 7    0x47   Reserved

 write the channel and last data value to the caldac */

 clock the bitstring to the caldac; MSB -> LSB */

 strobe the caldac to load the value */

 This is the reset sequence described in the manual */

 Put outputs of counter 1 and counter 2 in a high state */

 Analog Output subdevice */

 Digital I/O subdevice */

 caldac subdevice */

 EEPROM subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/amplc_pci230.c

 * Driver for Amplicon PCI230 and PCI260 Multifunction I/O boards.

 *

 * Copyright (C) 2001 Allan Willcox <allanwillcox@ozemail.com.au>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: amplc_pci230

 * Description: Amplicon PCI230, PCI260 Multifunction I/O boards

 * Author: Allan Willcox <allanwillcox@ozemail.com.au>,

 *   Steve D Sharples <steve.sharples@nottingham.ac.uk>,

 *   Ian Abbott <abbotti@mev.co.uk>

 * Updated: Mon, 01 Sep 2014 10:09:16 +0000

 * Devices: [Amplicon] PCI230 (amplc_pci230), PCI230+, PCI260, PCI260+

 * Status: works

 *

 * Configuration options:

 *   none

 *

 * Manual configuration of PCI cards is not supported; they are configured

 * automatically.

 *

 * The PCI230+ and PCI260+ have the same PCI device IDs as the PCI230 and

 * PCI260, but can be distinguished by the size of the PCI regions.  A

 * card will be configured as a "+" model if detected as such.

 *

 * Subdevices:

 *

 *                 PCI230(+)    PCI260(+)

 *                 ---------    ---------

 *   Subdevices       3            1

 *         0          AI           AI

 *         1          AO

 *         2          DIO

 *

 * AI Subdevice:

 *

 *   The AI subdevice has 16 single-ended channels or 8 differential

 *   channels.

 *

 *   The PCI230 and PCI260 cards have 12-bit resolution.  The PCI230+ and

 *   PCI260+ cards have 16-bit resolution.

 *

 *   For differential mode, use inputs 2N and 2N+1 for channel N (e.g. use

 *   inputs 14 and 15 for channel 7).  If the card is physically a PCI230

 *   or PCI260 then it actually uses a "pseudo-differential" mode where the

 *   inputs are sampled a few microseconds apart.  The PCI230+ and PCI260+

 *   use true differential sampling.  Another difference is that if the

 *   card is physically a PCI230 or PCI260, the inverting input is 2N,

 *   whereas for a PCI230+ or PCI260+ the inverting input is 2N+1.  So if a

 *   PCI230 is physically replaced by a PCI230+ (or a PCI260 with a

 *   PCI260+) and differential mode is used, the differential inputs need

 *   to be physically swapped on the connector.

 *

 *   The following input ranges are supported:

 *

 *     0 => [-10, +10] V

 *     1 => [-5, +5] V

 *     2 => [-2.5, +2.5] V

 *     3 => [-1.25, +1.25] V

 *     4 => [0, 10] V

 *     5 => [0, 5] V

 *     6 => [0, 2.5] V

 *

 * AI Commands:

 *

 *   +=========+==============+===========+============+==========+

 *   |start_src|scan_begin_src|convert_src|scan_end_src| stop_src |

 *   +=========+==============+===========+============+==========+

 *   |TRIG_NOW | TRIG_FOLLOW  |TRIG_TIMER | TRIG_COUNT |TRIG_NONE |

 *   |TRIG_INT |              |TRIG_EXT(3)|            |TRIG_COUNT|

 *   |         |              |TRIG_INT   |            |          |

 *   |         |--------------|-----------|            |          |

 *   |         | TRIG_TIMER(1)|TRIG_TIMER |            |          |

 *   |         | TRIG_EXT(2)  |           |            |          |

 *   |         | TRIG_INT     |           |            |          |

 *   +---------+--------------+-----------+------------+----------+

 *

 *   Note 1: If AI command and AO command are used simultaneously, only

 *           one may have scan_begin_src == TRIG_TIMER.

 *

 *   Note 2: For PCI230 and PCI230+, scan_begin_src == TRIG_EXT uses

 *           DIO channel 16 (pin 49) which will need to be configured as

 *           a digital input.  For PCI260+, the EXTTRIG/EXTCONVCLK input

 *           (pin 17) is used instead.  For PCI230, scan_begin_src ==

 *           TRIG_EXT is not supported.  The trigger is a rising edge

 *           on the input.

 *

 *   Note 3: For convert_src == TRIG_EXT, the EXTTRIG/EXTCONVCLK input

 *           (pin 25 on PCI230(+), pin 17 on PCI260(+)) is used.  The

 *           convert_arg value is interpreted as follows:

 *

 *             convert_arg == (CR_EDGE | 0) => rising edge

 *             convert_arg == (CR_EDGE | CR_INVERT | 0) => falling edge

 *             convert_arg == 0 => falling edge (backwards compatibility)

 *             convert_arg == 1 => rising edge (backwards compatibility)

 *

 *   All entries in the channel list must use the same analogue reference.

 *   If the analogue reference is not AREF_DIFF (not differential) each

 *   pair of channel numbers (0 and 1, 2 and 3, etc.) must use the same

 *   input range.  The input ranges used in the sequence must be all

 *   bipolar (ranges 0 to 3) or all unipolar (ranges 4 to 6).  The channel

 *   sequence must consist of 1 or more identical subsequences.  Within the

 *   subsequence, channels must be in ascending order with no repeated

 *   channels.  For example, the following sequences are valid: 0 1 2 3

 *   (single valid subsequence), 0 2 3 5 0 2 3 5 (repeated valid

 *   subsequence), 1 1 1 1 (repeated valid subsequence).  The following

 *   sequences are invalid: 0 3 2 1 (invalid subsequence), 0 2 3 5 0 2 3

 *   (incompletely repeated subsequence).  Some versions of the PCI230+ and

 *   PCI260+ have a bug that requires a subsequence longer than one entry

 *   long to include channel 0.

 *

 * AO Subdevice:

 *

 *   The AO subdevice has 2 channels with 12-bit resolution.

 *   The following output ranges are supported:

 *     0 => [0, 10] V

 *     1 => [-10, +10] V

 *

 * AO Commands:

 *

 *   +=========+==============+===========+============+==========+

 *   |start_src|scan_begin_src|convert_src|scan_end_src| stop_src |

 *   +=========+==============+===========+============+==========+

 *   |TRIG_INT | TRIG_TIMER(1)| TRIG_NOW  | TRIG_COUNT |TRIG_NONE |

 *   |         | TRIG_EXT(2)  |           |            |TRIG_COUNT|

 *   |         | TRIG_INT     |           |            |          |

 *   +---------+--------------+-----------+------------+----------+

 *

 *   Note 1: If AI command and AO command are used simultaneously, only

 *           one may have scan_begin_src == TRIG_TIMER.

 *

 *   Note 2: scan_begin_src == TRIG_EXT is only supported if the card is

 *           configured as a PCI230+ and is only supported on later

 *           versions of the card.  As a card configured as a PCI230+ is

 *           not guaranteed to support external triggering, please consider

 *           this support to be a bonus.  It uses the EXTTRIG/ EXTCONVCLK

 *           input (PCI230+ pin 25).  Triggering will be on the rising edge

 *           unless the CR_INVERT flag is set in scan_begin_arg.

 *

 *   The channels in the channel sequence must be in ascending order with

 *   no repeats.  All entries in the channel sequence must use the same

 *   output range.

 *

 * DIO Subdevice:

 *

 *   The DIO subdevice is a 8255 chip providing 24 DIO channels.  The DIO

 *   channels are configurable as inputs or outputs in four groups:

 *

 *     Port A  - channels  0 to  7

 *     Port B  - channels  8 to 15

 *     Port CL - channels 16 to 19

 *     Port CH - channels 20 to 23

 *

 *   Only mode 0 of the 8255 chip is supported.

 *

 *   Bit 0 of port C (DIO channel 16) is also used as an external scan

 *   trigger input for AI commands on PCI230 and PCI230+, so would need to

 *   be configured as an input to use it for that purpose.

/*

 * Extra triggered scan functionality, interrupt bug-fix added by Steve

 * Sharples.  Support for PCI230+/260+, more triggered scan functionality,

 * and workarounds for (or detection of) various hardware problems added

 * by Ian Abbott.

/*

 * PCI230 PCI configuration register information

/*

 * PCI230 i/o space 1 registers.

 User PPI (82C55) base */

 User PPI (82C55) port A */

 User PPI (82C55) port B */

 User PPI (82C55) port C */

 User PPI (82C55) control word */

 82C54 counter/timer base */

 Group Z Clock Configuration */

 Group Z Gate Configuration */

 Interrupt source mask (w) */

 Interrupt status (r) */

/*

 * PCI230 i/o space 2 registers.

 DAC control */

 DAC channel 0 (w) */

 DAC channel 1 (w) (not FIFO mode) */

 ADC data (r) */

 ADC software trigger (w) */

 ADC control */

 ADC channel enable bits */

 ADC gain control bits */

 PCI230+ i/o space 2 additional registers. */

 ADC start acquisition trigger */

 ADC analog trigger threshold */

 ADC FIFO interrupt threshold */

 ADC FIFO level (r) */

 ADC pre-trigger sample count (r) */

 ADC analog trigger hysteresys */

 Extended functions */

 Hardware version (r) */

 PCI230+ hardware version 2 onwards. */

 DAC data (FIFO mode) (w) */

 DAC soft trigger (FIFO mode) (r) */

 DAC channel enable (FIFO mode) */

/*

 * DACCON read-write values.

 Output unipolar */

 Output bipolar */

/*

 * The following applies only if DAC FIFO support is enabled in the EXTFUNC

 * register (and only for PCI230+ hardware version 2 onwards).

 FIFO enable */

/*

 * The following apply only if the DAC FIFO is enabled (and only for PCI230+

 * hardware version 2 onwards).

 none */

 soft trig */

 ext + edge */

 ext - edge */

 Z2 CT0 out */

 Z2 CT1 out */

 Z2 CT2 out */

 FIFO wraparound mode */

 empty */

 !empty */

 !half */

 half */

 !full */

 full */

/*

 * DACCON read-only values.

 DAC busy. */

/*

 * The following apply only if the DAC FIFO is enabled (and only for PCI230+

 * hardware version 2 onwards).

 Underrun error */

 FIFO empty */

 FIFO full */

 FIFO half full */

/*

 * DACCON write-only, transient values.

/*

 * The following apply only if the DAC FIFO is enabled (and only for PCI230+

 * hardware version 2 onwards).

 Clear underrun */

 FIFO reset */

/*

 * PCI230+ hardware version 2 DAC FIFO levels.

 Free space in DAC FIFO. */

/*

 * ADCCON read/write values.

 none */

 soft trig */

 ext + edge */

 ext - edge */

 Z2 CT0 out*/

 Z2 CT1 out */

 Z2 CT2 out */

 Input unipolar */

 Input bipolar */

 single ended */

 differential */

 FIFO enable */

 empty */

 !empty */

 !half */

 half */

 !full */

 full */

 threshold */

/*

 * ADCCON write-only, transient values.

 FIFO reset */

 Global reset */

/*

 * ADCCON read-only values.

 ADC busy */

 FIFO empty */

 FIFO full */

 FIFO half full */

 FIFO overrun occurred */

/*

 * PCI230 ADC FIFO levels.

 Value for FIFO half full */

 FIFO size */

/*

 * PCI230+ EXTFUNC values.

 Route EXTTRIG pin to external gate inputs. */

 PCI230+ hardware version 2 values. */

 Allow DAC FIFO to be enabled. */

/*

 * Counter/timer clock input configuration sources.

 reserved (channel-specific clock) */

 internal 10 MHz clock */

 internal 1 MHz clock */

 internal 100 kHz clock */

 internal 10 kHz clock */

 internal 1 kHz clock */

 output of channel-1 modulo total */

 external clock */

/*

 * Counter/timer gate input configuration sources.

 VCC (i.e. enabled) */

 GND (i.e. disabled) */

 external gate input (PPCn on PCI230) */

 inverted output of channel-2 modulo total */

/*

 * Summary of CLK_OUTNM1 and GAT_NOUTNM2 connections for PCI230 and PCI260:

 *

 *              Channel's       Channel's

 *              clock input     gate input

 * Channel      CLK_OUTNM1      GAT_NOUTNM2

 * -------      ----------      -----------

 * Z2-CT0       Z2-CT2-OUT      /Z2-CT1-OUT

 * Z2-CT1       Z2-CT0-OUT      /Z2-CT2-OUT

 * Z2-CT2       Z2-CT1-OUT      /Z2-CT0-OUT

/*

 * Interrupt enables/status register values.

 For PCI230+ hardware version 2 when DAC FIFO enabled. */

/*

 * (Potentially) shared resources and their owners

 Z2-CT0 */

 Z2-CT1 */

 Z2-CT2 */

 Owned by AI command */

 Owned by AO command */

 Number of owners */

/*

 * Handy macros.

 Combine old and new bits. */

 Current CPU.  XXX should this be hard_smp_processor_id()? */

/*

 * Board descriptions for the two boards supported.

 Minimum hardware version supported. */

 Interrupt spin lock */

 Shared resources spin lock */

 Spin lock for stopping AI command */

 Spin lock for stopping AO command */

 PCI230's DAQ I/O space */

 ID of CPU running ISR */

 Hardware version (for '+' models) */

 ADCCON register value */

 DACCON register value */

 ADC FIFO threshold (PCI230+/260+) */

 ADCG register value */

 Interrupt enable bits */

 Owned resources */

 Flag set in interrupt routine */

 Flag AI range is bipolar */

 Flag AO range is bipolar */

 Flag AI command started */

 Flag AO command started */

 PCI230 clock source periods in ns */

 PCI230 analogue input range table */

 PCI230 analogue gain bits for each input range. */

 PCI230 analogue output range table */

 Read sample. */

	/*

	 * PCI230 is 12 bit - stored in upper bits of 16 bit register

	 * (lower four bits reserved for expansion).  PCI230+ is 16 bit AI.

	 *

	 * If a bipolar range was specified, mangle it

	 * (twos complement->straight binary).

	/*

	 * PCI230 is 12 bit - stored in upper bits of 16 bit register (lower

	 * four bits reserved for expansion).  PCI230+ is also 12 bit AO.

	/*

	 * If a bipolar range was specified, mangle it

	 * (straight binary->twos complement).

 Write mangled datum to appropriate DACOUT register. */

 Write mangled datum to appropriate DACDATA register. */

/*

 * Given desired period in ns, returns the required internal clock source

 * and gets the initial count.

 Set mode. */

 Determine clock source and count. */

 Program clock source. */

 Set initial count. */

 Counter ct, 8254 mode 1, initial count not written. */

 Unpack channel and range. */

 Differential. */

	/*

	 * Use Z2-CT2 as a conversion trigger instead of the built-in

	 * software trigger, as otherwise triggering of differential channels

	 * doesn't work properly for some versions of PCI230/260.  Also set

	 * FIFO mode because the ADC busy bit only works for software triggers.

 Set Z2-CT2 output low to avoid any false triggers. */

 Differential. */

			/*

			 * Original PCI230/260 expects both inputs of the

			 * differential channel to be enabled.

			/*

			 * PCI230+/260+ expects only one input of the

			 * differential channel to be enabled.

 Single ended. */

	/*

	 * Enable only this channel in the scan list - otherwise by default

	 * we'll get one sample from each channel.

 Set gain for channel. */

 Specify uni/bip, se/diff, conversion source, and reset FIFO. */

 Convert n samples */

		/*

		 * Trigger conversion by toggling Z2-CT2 output

		 * (finish with output high).

 wait for conversion to end */

 read data */

 return the number of samples read/written */

	/*

	 * Set range - see analogue output range table; 0 => unipolar 10V,

	 * 1 => bipolar +/-10V range scale

 Step 1 : check if triggers are trivially valid */

		/*

		 * For PCI230+ hardware version 2 onwards, allow external

		 * trigger from EXTTRIG/EXTCONVCLK input (PCI230+ pin 25).

		 *

		 * FIXME: The permitted scan_begin_src values shouldn't depend

		 * on devpriv->hwver (the detected card's actual hardware

		 * version).  They should only depend on board->min_hwver

		 * (the static capabilities of the configured card).  To fix

		 * it, a new card model, e.g. "pci230+2" would have to be

		 * defined with min_hwver set to 2.  It doesn't seem worth it

		 * for this alone.  At the moment, please consider

		 * scan_begin_src==TRIG_EXT support to be a bonus rather than a

		 * guarantee!

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 8000 ns => 125 kHz */

/*

 * Comedi limit due to unsigned int cmd.  Driver limit =

 * 2^16 (16bit * counter) * 1000000ns (1kHz onboard clock) = 65.536s

 4294967295ns = 4.29s */

		/*

		 * External trigger - for PCI230+ hardware version 2 onwards.

 Trigger number must be 0. */

		/*

		 * The only flags allowed are CR_EDGE and CR_INVERT.

		 * The CR_EDGE flag is ignored.

 TRIG_NONE */

 Step 4: fix up any arguments */

 Step 5: check channel list if it exists */

 Stop scan rate generator. */

 Determine interrupt source. */

 Not using DAC FIFO.  Using CT1 interrupt. */

 Using DAC FIFO interrupt. */

	/*

	 * Disable interrupt and wait for interrupt routine to finish running

	 * unless we are called from the interrupt routine.

		/*

		 * Using DAC FIFO.  Reset FIFO, clear underrun error,

		 * disable FIFO.

 Release resources. */

/*

 * Loads DAC FIFO (if using it) from buffer.

 * Returns false if AO finished due to completion or error, true if still going.

 Get DAC FIFO status. */

 Check for FIFO underrun. */

		/*

		 * Check for buffer underrun if FIFO less than half full

		 * (otherwise there will be loads of "DAC FIFO not half full"

		 * interrupts).

 Determine how much room is in the FIFO (in samples). */

 Convert room to number of scans that can be added. */

 Determine number of scans to process. */

 Process scans. */

			/*

			 * All data for the command has been written

			 * to FIFO.  Set FIFO interrupt trigger level

			 * to 'empty'.

 Check if FIFO underrun occurred while writing to FIFO. */

 Perform scan. */

 Not using DAC FIFO. */

 Using DAC FIFO. */

 Read DACSWTRIG register to trigger conversion. */

 Delay.  Should driver be responsible for this? */

 XXX TODO: See if DAC busy bit can be used. */

 Using DAC FIFO. */

 Preload FIFO data. */

 Stopped. */

 Set scan trigger source. */

 Trigger on EXTTRIG/EXTCONVCLK pin. */

 +ve edge */

 -ve edge */

 Shouldn't get here. */

 Not using DAC FIFO. */

 Enable CT1 timer interrupt. */

 Set CT1 gate high to start counting. */

 Using DAC FIFO.  Enable DAC FIFO interrupt. */

 Get the command. */

 Claim Z2-CT1. */

	/*

	 * Set range - see analogue output range table; 0 => unipolar 10V,

	 * 1 => bipolar +/-10V range scale

 Use DAC FIFO for hardware version 2 onwards. */

 Set channel scan list. */

		/*

		 * Enable DAC FIFO.

		 * Set DAC scan source to 'none'.

		 * Set DAC FIFO interrupt trigger level to 'not half full'.

		 * Reset DAC FIFO and clear underrun.

		 *

		 * N.B. DAC FIFO interrupts are currently disabled.

 Set DACCON. */

 Preserve most of DACCON apart from write-only, transient bits. */

		/*

		 * Set the counter timer 1 to the specified scan frequency.

		 * cmd->scan_begin_arg is sampling period in ns.

		 * Gate it off for now.

 N.B. cmd->start_src == TRIG_INT */

 Arithmetic overflow. */

			/*

			 * Channel numbers must strictly increase or

			 * subsequence must repeat exactly.

	/*

	 * Buggy PCI230+ or PCI260+ requires channel 0 to be (first) in the

	 * sequence if the sequence contains more than one channel. Hardware

	 * versions 1 and 2 have the bug. There is no hardware version 3.

	 *

	 * Actually, there are two firmwares that report themselves as

	 * hardware version 1 (the boards have different ADC chips with

	 * slightly different timing requirements, which was supposed to

	 * be invisible to software). The first one doesn't seem to have

	 * the bug, but the second one does, and we can't tell them apart!

 Step 1 : check if triggers are trivially valid */

		/*

		 * Unfortunately, we cannot trigger a scan off an external

		 * source on the PCI260 board, since it uses the PPIC0 (DIO)

		 * input, which isn't present on the PCI260.  For PCI260+

		 * we can use the EXTTRIG/EXTCONVCLK input on pin 17 instead.

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

	/*

	 * If scan_begin_src is not TRIG_FOLLOW, then a monostable will be

	 * set up to generate a fixed number of timed conversion pulses.

 Step 3: check if arguments are trivially valid */

 PCI230 SE:   3200 ns => 312.5 kHz */

 PCI230 DIFF: 8000 ns => 125 kHz */

 PCI230+:     4000 ns => 250 kHz */

/*

 * Comedi limit due to unsigned int cmd.  Driver limit =

 * 2^16 (16bit * counter) * 1000000ns (1kHz onboard clock) = 65.536s

 4294967295ns = 4.29s */

			/*

			 * PCI230 or PCI260.  Max speed depends whether

			 * single-ended or pseudo-differential.

 Peek analogue reference of first channel. */

 No channel list.  Assume single-ended. */

 PCI230+ or PCI260+. */

		/*

		 * external trigger

		 *

		 * convert_arg == (CR_EDGE | 0)

		 *                => trigger on +ve edge.

		 * convert_arg == (CR_EDGE | CR_INVERT | 0)

		 *                => trigger on -ve edge.

 Trigger number must be 0. */

			/*

			 * The only flags allowed are CR_INVERT and CR_EDGE.

			 * CR_EDGE is required.

 Set CR_EDGE, preserve CR_INVERT. */

			/*

			 * Backwards compatibility with previous versions:

			 * convert_arg == 0 => trigger on -ve edge.

			 * convert_arg == 1 => trigger on +ve edge.

 TRIG_NONE */

		/*

		 * external "trigger" to begin each scan:

		 * scan_begin_arg==0 => use PPC0 input -> gate of CT0 -> gate

		 * of CT2 (sample convert trigger is CT2)

 The only flag allowed is CR_EDGE, which is ignored. */

 N.B. cmd->convert_arg is also TRIG_TIMER */

 Step 4: fix up any arguments */

 N.B. cmd->convert_arg is also TRIG_TIMER */

 Was below minimum required.  Round up. */

 Step 5: check channel list if it exists */

 PCI230+/260+ programmable FIFO interrupt level. */

	/*

	 * Trigger conversion by toggling Z2-CT2 output.

	 * Finish with output high.

	/*

	 * Delay.  Should driver be responsible for this?  An

	 * alternative would be to wait until conversion is complete,

	 * but we can't tell when it's complete because the ADC busy

	 * bit has a different meaning when FIFO enabled (and when

	 * FIFO not enabled, it only works for software triggers).

 PCI230/260 in differential mode */

 single-ended or PCI230+/260+ */

 Trigger scan by waggling CT0 gate source. */

 Stop conversion rate generator. */

 Stop scan period monostable. */

	/*

	 * Disable ADC interrupt and wait for interrupt routine to finish

	 * running unless we are called from the interrupt routine.

	/*

	 * Reset FIFO, disable FIFO and set start conversion source to none.

	 * Keep se/diff and bip/uni settings.

 Release resources. */

 Enable ADC FIFO trigger level interrupt. */

	/*

	 * Update conversion trigger source which is currently set

	 * to CT2 output, which is currently stuck high.

 Using CT2 output. */

 Trigger on +ve edge. */

 Trigger on -ve edge. */

 Backwards compatibility. */

 Trigger on +ve edge. */

 Trigger on -ve edge. */

		/*

		 * Use CT2 output for software trigger due to problems

		 * in differential mode on PCI230/260.

	/*

	 * Update FIFO interrupt trigger level, which is currently

	 * set to "full".

 Update timer gates. */

			/*

			 * Conversion timer CT2 needs to be gated by

			 * inverted output of monostable CT2.

			/*

			 * Conversion timer CT2 needs to be gated on

			 * continuously.

 Set monostable CT0 trigger source. */

				/*

				 * For CT0 on PCI230, the external trigger

				 * (gate) signal comes from PPC0, which is

				 * channel 16 of the DIO subdevice.  The

				 * application needs to configure this as an

				 * input in order to use it as an external scan

				 * trigger.

				/*

				 * Monostable CT0 triggered by rising edge on

				 * inverted output of CT1 (falling edge on CT1).

				/*

				 * Monostable CT0 is triggered by inttrig

				 * function waggling the CT0 gate source.

				/*

				 * Scan period timer CT1 needs to be

				 * gated on to start counting.

 No longer need Z2-CT2. */

 Determine number of samples to read. */

 Read FIFO state. */

				/*

				 * Report error otherwise FIFO overruns will go

				 * unnoticed by the caller.

 FIFO empty. */

 FIFO half full. */

 Read PCI230+/260+ ADC FIFO level. */

 Shouldn't happen. */

 FIFO not empty. */

 update FIFO interrupt trigger level if still running */

 Get the command. */

	/*

	 * Determine which shared resources are needed.

	/*

	 * Need Z2-CT2 to supply a conversion trigger source at a high

	 * logic level, even if not doing timed conversions.

 Using Z2-CT0 monostable to gate Z2-CT2 conversion timer */

 Using Z2-CT1 for scan frequency */

 Claim resources. */

	/*

	 * Steps:

	 * - Set channel scan list.

	 * - Set channel gains.

	 * - Enable and reset FIFO, specify uni/bip, se/diff, and set

	 *   start conversion source to point to something at a high logic

	 *   level (we use the output of counter/timer 2 for this purpose.

	 * - PAUSE to allow things to settle down.

	 * - Reset the FIFO again because it needs resetting twice and there

	 *   may have been a false conversion trigger on some versions of

	 *   PCI230/260 due to the start conversion source being set to a

	 *   high logic level.

	 * - Enable ADC FIFO level interrupt.

	 * - Set actual conversion trigger source and FIFO interrupt trigger

	 *   level.

	 * - If convert_src is TRIG_TIMER, set up the timers.

 Differential - all channels must be differential. */

 Single ended - all channels must be single-ended. */

				/*

				 * Original PCI230/260 expects both inputs of

				 * the differential channel to be enabled.

				/*

				 * PCI230+/260+ expects only one input of the

				 * differential channel to be enabled.

 Set channel scan list. */

 Set channel gains. */

	/*

	 * Set counter/timer 2 output high for use as the initial start

	 * conversion source.

	/*

	 * Temporarily use CT2 output as conversion trigger source and

	 * temporarily set FIFO interrupt trigger level to 'full'.

	/*

	 * Enable and reset FIFO, specify FIFO trigger level full, specify

	 * uni/bip, se/diff, and temporarily set the start conversion source

	 * to CT2 output.  Note that CT2 output is currently high, and this

	 * will produce a false conversion trigger on some versions of the

	 * PCI230/260, but that will be dealt with later.

	/*

	 * Delay -

	 * Failure to include this will result in the first few channels'-worth

	 * of data being corrupt, normally manifesting itself by large negative

	 * voltages. It seems the board needs time to settle between the first

	 * FIFO reset (above) and the second FIFO reset (below). Setting the

	 * channel gains and scan list _before_ the first FIFO reset also

	 * helps, though only slightly.

 Reset FIFO again. */

		/*

		 * Set up CT2 as conversion timer, but gate it off for now.

		 * Note, counter/timer output 2 can be monitored on the

		 * connector: PCI230 pin 21, PCI260 pin 18.

 Set counter/timer 2 to the specified conversion period. */

			/*

			 * Set up monostable on CT0 output for scan timing.  A

			 * rising edge on the trigger (gate) input of CT0 will

			 * trigger the monostable, causing its output to go low

			 * for the configured period.  The period depends on

			 * the conversion period and the number of conversions

			 * in the scan.

			 *

			 * Set the trigger high before setting up the

			 * monostable to stop it triggering.  The trigger

			 * source will be changed later.

				/*

				 * Monostable on CT0 will be triggered by

				 * output of CT1 at configured scan frequency.

				 *

				 * Set up CT1 but gate it off for now.

 TRIG_NOW */

 Interrupt handler */

 Read interrupt status/enable register. */

	/*

	 * Disable triggered interrupts.

	 * (Only those interrupts that need re-enabling, are, later in the

	 * handler).

	/*

	 * Check the source of interrupt and handle it.

	 * The PCI230 can cope with concurrent ADC, DAC, PPI C0 and C3

	 * interrupts.  However, at present (Comedi-0.7.60) does not allow

	 * concurrent execution of commands, instructions or a mixture of the

	 * two.

 Reenable interrupts. */

 Check if PCI device matches a specific board. */

 assume pci_dev->device != PCI_DEVICE_ID_INVALID */

 Looking for a '+' model.  First check length of registers. */

 Not a '+' model. */

	/*

	 * TODO: temporarily enable PCI device and read the hardware version

	 * register.  For now, assume it's okay.

 Look for board matching PCI device. */

	/*

	 * Read base addresses of the PCI230's two I/O regions from PCI

	 * configuration register.

 Read bits of DACCON register - only the output range. */

	/*

	 * Read hardware version register and set extended function register

	 * if they exist.

				/*

				 * No DIO ports.  Route counters' external gates

				 * to the EXTTRIG signal (PCI260+ pin 17).

				 * (Otherwise, they would be routed to DIO

				 * inputs PC0, PC1 and PC2 which don't exist

				 * on PCI260[+].)

 Enable DAC FIFO functionality. */

			/*

			 * Temporarily enable DAC FIFO, reset it and disable

			 * FIFO wraparound.

 Clear DAC FIFO channel enable register. */

 Disable DAC FIFO. */

 Disable board's interrupts. */

 Set ADC to a reasonable state. */

 analog input subdevice */

 but there are restrictions. */

 analog output subdevice */

 digital i/o subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * fl512.c

 * Anders Gnistrup <ex18@kalman.iau.dtu.dk>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: fl512

 * Description: unknown

 * Author: Anders Gnistrup <ex18@kalman.iau.dtu.dk>

 * Devices: [unknown] FL512 (fl512)

 * Status: unknown

 *

 * Digital I/O is not supported.

 *

 * Configuration options:

 *   [0] - I/O port base address

/*

 * Register I/O map

 XXX should test "done" flag instead of delay */

 write LSB, MSB then trigger conversion */

 Analog Input subdevice */

 Analog Output subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * Comedi driver for NI PCMCIA MIO E series cards

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1997-2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: ni_mio_cs

 * Description: National Instruments DAQCard E series

 * Author: ds

 * Status: works

 * Devices: [National Instruments] DAQCard-AI-16XE-50 (ni_mio_cs),

 *   DAQCard-AI-16E-4, DAQCard-6062E, DAQCard-6024E, DAQCard-6036E

 * Updated: Thu Oct 23 19:43:17 CDT 2003

 *

 * See the notes in the ni_atmio.o driver.

/*

 * The real guts of the driver is in ni_mio_common.c, which is

 * included by all the E series drivers.

 *

 * References for specifications:

 *	341080a.pdf  DAQCard E Series Register Level Programmer Manual

/*

 *  AT specific setup

 verified */

 verified */

 specs incorrect! */

 specs incorrect! */

 unknown */

 DAQCard-ai-16xe-50 */

 DAQCard-ai-16e-4 */

 DAQCard-6062E */

 DAQCard-6024E */

 DAQCard-6036E */

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/ni_labpc_common.c

 *

 * Common support code for "ni_labpc", "ni_labpc_pci" and "ni_labpc_cs".

 *

 * Copyright (C) 2001-2003 Frank Mori Hess <fmhess@users.sourceforge.net>

/*

 * functions that do inb/outb and readb/writeb so we can use

 * function pointers to decide which to use

		/*

		 * The LabPC-1200 boards do not have a gain

		 * of '0x10'. Skip the range values that would

		 * result in this gain.

 munge channel bits for differential/scan disabled mode */

 reference inputs to ground or common? */

 bipolar or unipolar range? */

  interrupt on fifo half full? */

 enable interrupt on counter a1 terminal count? */

 are we scanning up or down through channels? */

 disable timed conversions, interrupt generation and dma */

 setup cmd4 register */

 single-ended/differential */

 initialize pacer counter to prevent any problems */

 trigger conversion */

 figures out what counter values to use based on command */

	/*

	 * If both convert and scan triggers are TRIG_TIMER, then they

	 * both rely on counter b0. If only one TRIG_TIMER is used, we

	 * can use the generic cascaded timing functions.

		/*

		 * pick the lowest divisor value we can (for maximum input

		 * clock speed on convert and scan counters)

  set a0 for conversion frequency and b1 for scan frequency */

  make sure a0 and b1 values are acceptable */

  write corrected timings to command */

		/*

		 * calculate cascaded counter values

		 * that give desired scan timing

		 * (pacer->next_div2 / pacer->next_div1)

		/*

		 * calculate cascaded counter values

		 * that give desired conversion timing

		 * (pacer->next_div / pacer->next_div1)

 transfer div2 value so correct timer gets updated */

 chanlist may be NULL during cmdtest */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 can't have external stop and start triggers at once */

 Step 3: check if arguments are trivially valid */

 start_arg value is ignored */

 make sure scan timing is not too fast */

		/*

		 * TRIG_EXT doesn't care since it doesn't

		 * trigger off a numbered channel

 step 4: fix up any arguments */

 Step 5: check channel list if it exists */

 make sure board is disabled before setting up acquisition */

  initialize software conversion count */

  setup hardware conversion counter */

		/*

		 * load counter a1 with count of 3

		 * (pc+ manual says this is minimum allowed) using mode 0

 just put counter a1 in mode 0 to set its output low */

 figure out what method we will use to transfer data */

		/*

		 * dma unsafe at RT priority,

		 * and too much setup time for CMDF_WAKE_EOS

		/*

		 * pc-plus has no fifo-half full interrupt

		 * wake-end-of-scan should interrupt on fifo not empty

		 * make sure we are taking more than just a few points

 manual says to set scan enable bit on second pass */

		/*

		 * Need a brief delay before enabling scan, or scan

		 * list will get screwed when you switch between

		 * scan up to scan down mode - dunno why.

  load count */

 set up pacing */

 set up conversion pacing */

 set up scan pacing */

  enable error interrupts */

  enable fifo not empty interrupt? */

  setup any external triggering/pacing (cmd4 register) */

	/*

	 * XXX should discard first scan when using interval scanning

	 * since manual says it is not synced with scan clock.

  single-ended/differential */

  startup acquisition */

 use 2 cascaded counters for pacing */

 read all available samples from ai fifo */

  quit if we have all the data we want */

/*

 * Makes sure all data acquired by board is transferred to comedi (used

 * when acquisition is terminated by stop_src == TRIG_EXT).

 interrupt service routine */

 read board status */

 clear error interrupt */

  clear it */

  clear error interrupt */

  handle external stop trigger */

 TRIG_COUNT end of acquisition */

	/*

	 * Turn off pacing of analog output channel.

	 * NOTE: hardware bug in daqcard-1200 means pacing cannot

	 * be independently enabled/disabled for its the two channels.

 set range */

  write to register */

 send data */

 lowlevel write to eeprom/dac */

  clear serial clock */

  send bits most significant bit first */

  set clock to load bit */

 lowlevel read from eeprom */

  number of bits wide values are */

  set serial clock */

  clear clock bit */

  read bits most significant bit first */

  bits to tell eeprom to expect a read */

  8 bit write lengths to eeprom */

  enable read/write to eeprom */

  send read instruction */

  send 8 bit address to read from */

  read result */

  disable read/write to eeprom */

  8 bit write lengths to eeprom */

  enable read/write to eeprom */

  send read status instruction */

  read result */

  disable read/write to eeprom */

  8 bit write lengths to eeprom */

  enable read/write to eeprom */

  send write_enable instruction */

  send write instruction */

  send 8 bit address to write to */

  write value */

  disable read/write to eeprom */

 writes to 8 bit calibration dacs */

  clear caldac load bit and make sure we don't write to eeprom */

  write 4 bit channel */

  write 8 bit caldac value */

  set and clear caldac bit to load caldac value */

	/*

	 * Only write the last data value to the caldac. Preceding

	 * data would be overwritten anyway.

 make sure there isn't already a write in progress */

 only allow writes to user area of eeprom */

	/*

	 * Only write the last data value to the eeprom. Preceding

	 * data would be overwritten anyway.

 initialize board's command registers */

 analog input subdevice */

 analog output */

 initialize analog outputs to a known value */

 8255 dio */

  calibration subdevices for boards that have one */

 EEPROM (256 bytes) */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/ni_labpc_pci.c

 * Driver for National Instruments Lab-PC PCI-1200

 * Copyright (C) 2001, 2002, 2003 Frank Mori Hess <fmhess@users.sourceforge.net>

/*

 * Driver: ni_labpc_pci

 * Description: National Instruments Lab-PC PCI-1200

 * Devices: [National Instruments] PCI-1200 (ni_pci-1200)

 * Author: Frank Mori Hess <fmhess@users.sourceforge.net>

 * Status: works

 *

 * This is the PCI-specific support split off from the ni_labpc driver.

 *

 * Configuration Options: not applicable, uses PCI auto config

 *

 * NI manuals:

 * 340914a (pci-1200)

 ripped from mite.h and mite_setup2() to avoid mite dependency */

 IO Device Window Base Size Register */

 window enable */

 ioremap the MITE registers (BAR 0) temporarily */

 set data window to main registers (BAR 1) */

 finished with MITE registers */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * cb_das16_cs.c

 * Driver for Computer Boards PC-CARD DAS16/16.

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000, 2001, 2002 David A. Schleef <ds@schleef.org>

 *

 * PCMCIA support code for this driver is adapted from the dummy_cs.c

 * driver of the Linux PCMCIA Card Services package.

 *

 * The initial developer of the original code is David A. Hinds

 * <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds

 * are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.

/*

 * Driver: cb_das16_cs

 * Description: Computer Boards PC-CARD DAS16/16

 * Devices: [ComputerBoards] PC-CARD DAS16/16 (cb_das16_cs),

 *   PC-CARD DAS16/16-AO

 * Author: ds

 * Updated: Mon, 04 Nov 2002 20:04:21 -0800

 * Status: experimental

/*

 * Register I/O map

 1=enable; 0=disable */

 interrupt src */

 ro - 1=FIFO overflow */

 AI convert src */

 ro - 0=busy; 1=ready */

 0=diff; 1=se */

 ro - 0=latched; 1=cleared */

 ro - current ai mux */

 wo - DAC1 chip select */

 wo - Serial DAC clock */

 wo - Serial DAC data */

 wo - DAC0 chip select */

 1=burst enable; 0=disable */

 AI gain */

 +/-10V */

 +/-5V */

 +/-2.5V */

 +-1.25V */

 1=dio7:4 output; 0=input */

 1=dio3:0 output; 0=input */

 1=active lo; 0=hi */

 1=edge; 0=level */

 ro - 1=FIFO not empty */

 wo - 1=clr (monstable) */

 1=10 MHz; 0=1 MHz */

 1=int. 100 kHz; 0=ext. clk */

 1=enable; 0=disable */

 unknown */

 disable interrupts, software convert */

 raise the DACxCS line for the non-selected channel */

		/*

		 * Make both DAC0CS and DAC1CS high to load

		 * the new data and update analog the output

 internal 100 kHz */

 external */

 unknown */

 Analog Input subdevice */

 Analog Output subdevice */

 Digital I/O subdevice */

 Counter subdevice (8254) */

 counters 1 and 2 are used internally for the pacer */

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/8255.c

 * Driver for 8255

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1998 David A. Schleef <ds@schleef.org>

/*

 * Driver: 8255

 * Description: generic 8255 support

 * Devices: [standard] 8255 (8255)

 * Author: ds

 * Status: works

 * Updated: Fri,  7 Jun 2002 12:56:45 -0700

 *

 * The classic in digital I/O.  The 8255 appears in Comedi as a single

 * digital I/O subdevice with 24 channels.  The channel 0 corresponds

 * to the 8255's port A, bit 0; channel 23 corresponds to port C, bit

 * 7.  Direction configuration is done in blocks, with channels 0-7,

 * 8-15, 16-19, and 20-23 making up the 4 blocks.  The only 8255 mode

 * supported is mode 0.

 *

 * You should enable compilation this driver if you plan to use a board

 * that has an 8255 chip.  For multifunction boards, the main driver will

 * configure the 8255 subdevice automatically.

 *

 * This driver also works independently with ISA and PCI cards that

 * directly map the 8255 registers to I/O ports, including cards with

 * multiple 8255 chips.  To configure the driver for such a card, the

 * option list should be a list of the I/O port bases for each of the

 * 8255 chips.  For example,

 *

 *   comedi_config /dev/comedi0 8255 0x200,0x204,0x208,0x20c

 *

 * Note that most PCI 8255 boards do NOT work with this driver, and

 * need a separate driver as a wrapper.  For those that do work, the

 * I/O port base address can be found in the output of 'lspci -v'.

		/*

		 * __comedi_request_region() does not set dev->iobase.

		 *

		 * For 8255 devices that are manually attached using

		 * comedi_config, the 'iobase' is the actual I/O port

		 * base address of the chip.

				/*

				 * Release the I/O port region here, as the

				 * "detach" handler cannot find it.

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * me4000.c

 * Source code for the Meilhaus ME-4000 board family.

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: me4000

 * Description: Meilhaus ME-4000 series boards

 * Devices: [Meilhaus] ME-4650 (me4000), ME-4670i, ME-4680, ME-4680i,

 *	    ME-4680is

 * Author: gg (Guenter Gebhardt <g.gebhardt@meilhaus.com>)

 * Updated: Mon, 18 Mar 2002 15:34:01 -0800

 * Status: untested

 *

 * Supports:

 *	- Analog Input

 *	- Analog Output

 *	- Digital I/O

 *	- Counter

 *

 * Configuration Options: not applicable, uses PCI auto config

 *

 * The firmware required by these boards is available in the

 * comedi_nonfree_firmware tarball available from

 * https://www.comedi.org.

/*

 * ME4000 Register map and bit defines

 sample & hold (8 channels) */

/*

 * NOTE: the ranges here are inverted compared to the values

 * written to the ME4000_AI_CHANNEL_LIST_REG,

 *

 * The ME4000_AI_LIST_RANGE() macro handles the inversion.

	/*

	 * Set PLX local interrupt 2 polarity to high.

	 * Interrupt is thrown by init pin of xilinx.

 Set /CS and /WRITE of the Xilinx */

 Init Xilinx with CS1 */

 Wait until /INIT pin is set */

 Reset /CS and /WRITE of the Xilinx */

 Download Xilinx firmware */

 Check if BUSY flag is low */

 If done flag is high download was successful */

 Set /CS and /WRITE */

 Stop any running conversion */

 Clear the control register */

 Disable interrupts on the PLX */

 Software reset the PLX */

 0x8000 to the DACs means an output voltage of 0V */

 Set both stop bits in the analog output control register */

 Set the adustment register for AO demux */

	/*

	 * Set digital I/O direction for port 0

	 * to output on isolated versions

 read two's complement value and munge to offset binary */

 Enable channel list and data fifo for single acquisition mode */

 Generate channel list entry */

 Set the timer to maximum sample rate */

 start conversion by dummy read */

 Write timer arguments */

 Start sources */

 Stop triggers */

 Write the setup to the control register */

 Write the channel list */

 Start acquistion by dummy read */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 Round the timer arguments */

 TRIG_NONE */

	/*

	 * Stage 4. Check for argument conflicts.

 Check timer arguments */

  66 ticks at least */

  66 ticks at least */

  At least one tick more */

 Check timer arguments */

  66 ticks at least */

  66 ticks at least */

 Check timer arguments */

  66 ticks at least */

  66 ticks at least */

  At least one tick more */

 Check timer arguments */

  66 ticks at least */

  66 ticks at least */

 Check timer arguments */

  66 ticks at least */

  66 ticks at least */

 Check timer arguments */

  66 ticks at least */

 Step 5: check channel list if it exists */

 Read status register to find out what happened */

 Work is done, so reset the interrupt */

 Acquisition is complete */

 Poll data until fifo empty */

 Work is done, so reset the interrupt */

 Stop any running conversion */

 Clear control register and set to single mode */

 Write data value */

 Store in the mirror */

	/*

	 * Check for optoisolated ME-4000 version.

	 * If one the first port is a fixed output

	 * port and the second is a fixed input port.

 Enable interrupts on the PLX */

 Analog Input subdevice */

 Analog Output subdevice */

 Digital I/O subdevice */

	/*

	 * Check for optoisolated ME-4000 version. If one the first

	 * port is a fixed output port and the second is a fixed input port.

 Counter subdevice (8254) */

 Disable interrupts on the PLX */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * das16.c

 * DAS16 driver

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

 * Copyright (C) 2000 Chris R. Baugher <baugher@enteract.com>

 * Copyright (C) 2001,2002 Frank Mori Hess <fmhess@users.sourceforge.net>

/*

 * Driver: das16

 * Description: DAS16 compatible boards

 * Author: Sam Moore, Warren Jasper, ds, Chris Baugher, Frank Hess, Roman Fietze

 * Devices: [Keithley Metrabyte] DAS-16 (das-16), DAS-16G (das-16g),

 *   DAS-16F (das-16f), DAS-1201 (das-1201), DAS-1202 (das-1202),

 *   DAS-1401 (das-1401), DAS-1402 (das-1402), DAS-1601 (das-1601),

 *   DAS-1602 (das-1602),

 *   [ComputerBoards] PC104-DAS16/JR (pc104-das16jr),

 *   PC104-DAS16JR/16 (pc104-das16jr/16), CIO-DAS16 (cio-das16),

 *   CIO-DAS16F (cio-das16/f), CIO-DAS16/JR (cio-das16/jr),

 *   CIO-DAS16JR/16 (cio-das16jr/16), CIO-DAS1401/12 (cio-das1401/12),

 *   CIO-DAS1402/12 (cio-das1402/12), CIO-DAS1402/16 (cio-das1402/16),

 *   CIO-DAS1601/12 (cio-das1601/12), CIO-DAS1602/12 (cio-das1602/12),

 *   CIO-DAS1602/16 (cio-das1602/16), CIO-DAS16/330 (cio-das16/330)

 * Status: works

 * Updated: 2003-10-12

 *

 * A rewrite of the das16 and das1600 drivers.

 *

 * Options:

 *	[0] - base io address

 *	[1] - irq (does nothing, irq is not used anymore)

 *	[2] - dma channel (optional, required for comedi_command support)

 *	[3] - master clock speed in MHz (optional, 1 or 10, ignored if

 *		board can probe clock, defaults to 1)

 *	[4] - analog input range lowest voltage in microvolts (optional,

 *		only useful if your board does not have software

 *		programmable gain)

 *	[5] - analog input range highest voltage in microvolts (optional,

 *		only useful if board does not have software programmable

 *		gain)

 *	[6] - analog output range lowest voltage in microvolts (optional)

 *	[7] - analog output range highest voltage in microvolts (optional)

 *

 * Passing a zero for an option is the same as leaving it unspecified.

/*

 * Testing and debugging help provided by Daniel Koch.

 *

 * Keithley Manuals:

 *	2309.PDF (das16)

 *	4919.PDF (das1400, 1600)

 *	4922.PDF (das-1400)

 *	4923.PDF (das1200, 1400, 1600)

 *

 * Computer boards manuals also available from their website

 * www.measurementcomputing.com

  size in bytes of allocated dma buffer */

/*

 * Register I/O map

 to 0x0f */

  max conversion speed in nanosec */

/*

 * Period for timer interrupt in jiffies.  It's a function

 * to deal with possibility of dynamic HZ patches

	/*

	 * Determine dma size based on the buffer size plus the number of

	 * unread samples and the number of samples remaining in the command.

	/*

	 * The pc104-das16jr (at least) has problems if the dma

	 * transfer is interrupted in the middle of transferring

	 * a 16 bit sample.

 figure out how many samples to read */

 restart DMA if more samples are needed */

 set multiplexer */

 some boards do not have programmable gain */

	/*

	 * Set gain (this is also burst rate register but according to

	 * computer boards manual, burst rate does nothing, even on

	 * keithley cards).

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

  make sure scan_begin_src and convert_src don't conflict */

 Step 3: check if arguments are trivially valid */

 internal trigger */

 check against maximum frequency */

 TRIG_NONE */

  step 4: fix up arguments */

 Step 5: check channel list if it exists */

 set mux and range for chanlist scan */

 set counter mode and counts */

 enable counters */

  set burst length */

 set up dma transfer */

  set up timer */

 enable DMA interrupt with external or internal pacing */

 disable interrupts, dma and pacer clocked conversions */

  disable SW timer */

 set mux and range for single channel */

 trigger conversion */

 diobits indicates boards */

 only DMA channels 3 and 1 are valid */

 DMA uses two buffers */

 get any user-defined input range */

 allocate single-range range table */

 initialize ai range */

 use software programmable range */

 get any user-defined output range */

 allocate single-range range table */

 initialize ao range */

  check that clock setting is valid */

 Request an additional region for the 8255 */

  probe id bits to make sure they are consistent */

  get master clock speed */

 Analog Input subdevice */

 Analog Output subdevice */

 Digital Input subdevice */

 Digital Output subdevice */

 initialize digital output lines */

 8255 Digital I/O subdevice */

 set the interrupt level */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for Amplicon PC263 relay board.

 *

 * Copyright (C) 2002 MEV Ltd. <https://www.mev.co.uk/>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: amplc_pc263

 * Description: Amplicon PC263

 * Author: Ian Abbott <abbotti@mev.co.uk>

 * Devices: [Amplicon] PC263 (pc263)

 * Updated: Fri, 12 Apr 2013 15:19:36 +0100

 * Status: works

 *

 * Configuration options:

 *   [0] - I/O port base address

 *

 * The board appears as one subdevice, with 16 digital outputs, each

 * connected to a reed-relay. Relay contacts are closed when output is 1.

 * The state of the outputs can be read.

 PC263 registers */

 Digital Output subdevice */

 read initial relay state */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * Comedi driver for NI AT-MIO E series cards

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1997-2001 David A. Schleef <ds@schleef.org>

/*

 * Driver: ni_atmio

 * Description: National Instruments AT-MIO-E series

 * Author: ds

 * Devices: [National Instruments] AT-MIO-16E-1 (ni_atmio),

 *   AT-MIO-16E-2, AT-MIO-16E-10, AT-MIO-16DE-10, AT-MIO-64E-3,

 *   AT-MIO-16XE-50, AT-MIO-16XE-10, AT-AI-16XE-10

 * Status: works

 * Updated: Thu May  1 20:03:02 CDT 2003

 *

 * The driver has 2.6 kernel isapnp support, and will automatically probe for

 * a supported board if the I/O base is left unspecified with comedi_config.

 * However, many of the isapnp id numbers are unknown. If your board is not

 * recognized, please send the output of 'cat /proc/isapnp' (you may need to

 * modprobe the isa-pnp module for /proc/isapnp to exist) so the id numbers

 * for your board can be added to the driver.

 *

 * Otherwise, you can use the isapnptools package to configure your board.

 * Use isapnp to configure the I/O base and IRQ for the board, and then pass

 * the same values as parameters in comedi_config. A sample isapnp.conf file

 * is included in the etc/ directory of Comedilib.

 *

 * Comedilib includes a utility to autocalibrate these boards. The boards

 * seem to boot into a state where the all calibration DACs are at one

 * extreme of their range, thus the default calibration is terrible.

 * Calibration at boot is strongly encouraged.

 *

 * To use the extended digital I/O on some of the boards, enable the

 * 8255 driver when configuring the Comedi source tree.

 *

 * External triggering is supported for some events. The channel index

 * (scan_begin_arg, etc.) maps to PFI0 - PFI9.

 *

 * Some of the more esoteric triggering possibilities of these boards are

 * not supported.

/*

 * The real guts of the driver is in ni_mio_common.c, which is included

 * both here and in ni_pcimio.c

 *

 * Interrupt support added by Truxton Fulton <trux@truxton.com>

 *

 * References for specifications:

 *	340747b.pdf  Register Level Programmer Manual (obsolete)

 *	340747c.pdf  Register Level Programmer Manual (new)

 *		     DAQ-STC reference manual

 *

 * Other possibly relevant info:

 *	320517c.pdf  User manual (obsolete)

 *	320517f.pdf  User manual (new)

 *	320889a.pdf  delete

 *	320906c.pdf  maximum signal ratings

 *	321066a.pdf  about 16x

 *	321791a.pdf  discontinuation of at-mio-16e-10 rev. c

 *	321808a.pdf  about at-mio-16e-10 rev P

 *	321837a.pdf  discontinuation of at-mio-16de-10 rev d

 *	321838a.pdf  about at-mio-16de-10 rev N

 *

 * ISSUES:

 * - need to deal with external reference for DAC, and other DAC

 *   properties in board properties

 * - deal with at-mio-16de-10 revision D to N changes, etc.

 AT specific setup */

 XXX unknown */

 XXX unknown */

 XXX unknown */

 unknown */

 irq stuff */

 generic E series stuff in ni_mio_common.c */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * adv_pci1724.c

 * Comedi driver for the Advantech PCI-1724U card.

 *

 * Author:  Frank Mori Hess <fmh6jj@gmail.com>

 * Copyright (C) 2013 GnuBIO Inc

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1997-8 David A. Schleef <ds@schleef.org>

/*

 * Driver: adv_pci1724

 * Description: Advantech PCI-1724U

 * Devices: [Advantech] PCI-1724U (adv_pci1724)

 * Author: Frank Mori Hess <fmh6jj@gmail.com>

 * Updated: 2013-02-09

 * Status: works

 *

 * Configuration Options: not applicable, uses comedi PCI auto config

 *

 * Subdevice 0 is the analog output.

 * Subdevice 1 is the offset calibration for the analog output.

 * Subdevice 2 is the gain calibration for the analog output.

 *

 * The calibration offset and gains have quite a large effect on the

 * analog output, so it is possible to adjust the analog output to

 * have an output range significantly different from the board's

 * nominal output ranges. For a calibrated +/-10V range, the analog

 * output's offset will be set somewhere near mid-range (0x2000) and

 * its gain will be near maximum (0x3fff).

 *

 * There is really no difference between the board's documented 0-20mA

 * versus 4-20mA output ranges. To pick one or the other is simply a

 * matter of adjusting the offset and gain calibration until the board

 * outputs in the desired range.

/*

 * PCI bar 2 Register I/O map (dev->iobase)

 any value works */

 turn off synchronous mode */

 Analog Output subdevice */

 Offset Calibration subdevice */

 Gain Calibration subdevice */

 SPDX-License-Identifier: GPL-2.0+

/*

 * dmm32at.c

 * Diamond Systems Diamond-MM-32-AT Comedi driver

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: dmm32at

 * Description: Diamond Systems Diamond-MM-32-AT

 * Devices: [Diamond Systems] Diamond-MM-32-AT (dmm32at)

 * Author: Perry J. Piplani <perry.j.piplani@nasa.gov>

 * Updated: Fri Jun  4 09:13:24 CDT 2004

 * Status: experimental

 *

 * Configuration Options:

 *	comedi_config /dev/comedi0 dmm32at baseaddr,irq

 *

 * This driver is for the Diamond Systems MM-32-AT board

 *	http://www.diamondsystems.com/products/diamondmm32at

 *

 * It is being used on several projects inside NASA, without

 * problems so far. For analog input commands, TRIG_EXT is not

 * yet supported.

 Board register addresses */

 J3.42 - OUT2 (OUT2EN) */

 J3.43 */

 J3.44 - OUT0 (OUT0EN) */

 J3.45 - ADCLK (CLKSEL) */

 J3.46 - GATE12 (GT12EN) */

 J3.47 - GATE0 (GT0EN) */

 J3.48 - CLK0 (SRC0) */

 1=see below  0=software */

 1=OUT2  0=EXTCLK */

 CLK12 1=100KHz 0=10MHz */

 CLK0  1=10KHz  0=10MHz */

 J3.42 1=OUT2 is DOUT2 */

 J3,44 1=OUT0 is DOUT0 */

 J3.47 1=DIN1 is GATE0 */

 CLK0 is 0=FREQ0 1=J3.48 */

 J3.46 1=DIN2 is GATE12 */

 0=5V  1=10V */

 0=bipolar  1=unipolar */

 DMM32AT_AI_STATUS_STS */

 Page 1 registers */

 Board register values. */

 DMM32AT_AI_CFG_REG 0x0b */

 DMM32AT_CLKCT 0x0f */

 mode3 counter 1 - write low byte only */

  mode3 counter 2 - write high and low byte */

 board AI ranges in comedi structure */

 register values for above ranges */

/* only one of these ranges is valid, as set by a jumper on the

 * board. The application should only use the range set by the jumper

 munge two's complement value to offset binary */

 wait for circuit to settle */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_NONE */

 Step 4: fix up any arguments */

 Step 5: check channel list if it exists */

 based on 10mhz clock */

 set counter clocks to 10MHz, disable all aux dio */

 get access to the clock regs */

 write the counter 1 control word and low byte to counter */

 write the counter 2 control word and low byte then to counter */

 enable the ai conversion interrupt and the clock to start scans */

 reset the interrupt just in case */

	/*

	 * wait for circuit to settle

	 * we don't have the 'insn' here but it's not needed

 start the clock and enable the interrupts */

 start the interrupts and initiate a single scan */

 disable further interrupts and clocks */

 reset the interrupt */

 write LSB then MSB + chan to load DAC */

 wait for circuit to settle */

 dummy read to update DAC */

 get access to the DIO regs */

 Make sure the board is there and put it to a known state */

 reset the board */

 allow a millisecond to reset */

 zero scan and fifo control */

 zero interrupt and clock control */

 write a test channel range, the high 3 bits should drop */

 set the range at 10v unipolar */

 should take 10 us to settle, here's a hundred */

 read back the values */

	/*

	 * NOTE: The (DMM32AT_AI_STATUS_SD1 | DMM32AT_AI_STATUS_SD0)

	 * test makes this driver only work if the board is configured

	 * with all A/D channels set for single-ended operation.

 Analog Input subdevice */

 Analog Output subdevice */

 Digital I/O subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * pcmad.c

 * Hardware driver for Winsystems PCM-A/D12 and PCM-A/D16

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000,2001 David A. Schleef <ds@schleef.org>

/*

 * Driver: pcmad

 * Description: Winsystems PCM-A/D12, PCM-A/D16

 * Devices: [Winsystems] PCM-A/D12 (pcmad12), PCM-A/D16 (pcmad16)

 * Author: ds

 * Status: untested

 *

 * This driver was written on a bet that I couldn't write a driver

 * in less than 2 hours.  I won the bet, but never got paid.  =(

 *

 * Configuration options:

 *   [0] - I/O port base

 *   [1] - IRQ (unused)

 *   [2] - Analog input reference (must match jumpers)

 *	   0 = single-ended (16 channels)

 *	   1 = differential (8 channels)

 *   [3] - Analog input encoding (must match jumpers)

 *	   0 = straight binary (0-5V input range)

 *	   1 = two's complement (+-10V input range)

 data is shifted on the pcmad12, fix it */

 munge the two's complement value */

 8 differential channels */

 16 single-ended channels */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi_8254.c

 * Generic 8254 timer/counter support

 * Copyright (C) 2014 H Hartley Sweeten <hsweeten@visionengravers.com>

 *

 * Based on 8253.h and various subdevice implementations in comedi drivers.

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Module: comedi_8254

 * Description: Generic 8254 timer/counter support

 * Author: H Hartley Sweeten <hsweeten@visionengravers.com>

 * Updated: Thu Jan 8 16:45:45 MST 2015

 * Status: works

 *

 * This module is not used directly by end-users. Rather, it is used by other

 * drivers to provide support for an 8254 Programmable Interval Timer. These

 * counters are typically used to generate the pacer clock used for data

 * acquisition. Some drivers also expose the counters for general purpose use.

 *

 * This module provides the following basic functions:

 *

 * comedi_8254_init() / comedi_8254_mm_init()

 *	Initializes this module to access the 8254 registers. The _mm version

 *	sets up the module for MMIO register access the other for PIO access.

 *	The pointer returned from these functions is normally stored in the

 *	comedi_device dev->pacer and will be freed by the comedi core during

 *	the driver (*detach). If a driver has multiple 8254 devices, they need

 *	to be stored in the drivers private data and freed when the driver is

 *	detached.

 *

 *	NOTE: The counters are reset by setting them to I8254_MODE0 as part of

 *	this initialization.

 *

 * comedi_8254_set_mode()

 *	Sets a counters operation mode:

 *		I8254_MODE0	Interrupt on terminal count

 *		I8254_MODE1	Hardware retriggerable one-shot

 *		I8254_MODE2	Rate generator

 *		I8254_MODE3	Square wave mode

 *		I8254_MODE4	Software triggered strobe

 *		I8254_MODE5	Hardware triggered strobe (retriggerable)

 *

 *	In addition I8254_BCD and I8254_BINARY specify the counting mode:

 *		I8254_BCD	BCD counting

 *		I8254_BINARY	Binary counting

 *

 * comedi_8254_write()

 *	Writes an initial value to a counter.

 *

 *	The largest possible initial count is 0; this is equivalent to 2^16

 *	for binary counting and 10^4 for BCD counting.

 *

 *	NOTE: The counter does not stop when it reaches zero. In Mode 0, 1, 4,

 *	and 5 the counter "wraps around" to the highest count, either 0xffff

 *	for binary counting or 9999 for BCD counting, and continues counting.

 *	Modes 2 and 3 are periodic; the counter reloads itself with the initial

 *	count and continues counting from there.

 *

 * comedi_8254_read()

 *	Reads the current value from a counter.

 *

 * comedi_8254_status()

 *	Reads the status of a counter.

 *

 * comedi_8254_load()

 *	Sets a counters operation mode and writes the initial value.

 *

 * Typically the pacer clock is created by cascading two of the 16-bit counters

 * to create a 32-bit rate generator (I8254_MODE2). These functions are

 * provided to handle the cascaded counters:

 *

 * comedi_8254_ns_to_timer()

 *	Calculates the divisor value needed for a single counter to generate

 *	ns timing.

 *

 * comedi_8254_cascade_ns_to_timer()

 *	Calculates the two divisor values needed to the generate the pacer

 *	clock (in ns).

 *

 * comedi_8254_update_divisors()

 *	Transfers the intermediate divisor values to the current divisors.

 *

 * comedi_8254_pacer_enable()

 *	Programs the mode of the cascaded counters and writes the current

 *	divisor values.

 *

 * To expose the counters as a subdevice for general purpose use the following

 * functions a provided:

 *

 * comedi_8254_subdevice_init()

 *	Initializes a comedi_subdevice to use the 8254 timer.

 *

 * comedi_8254_set_busy()

 *	Internally flags a counter as "busy". This is done to protect the

 *	counters that are used for the cascaded 32-bit pacer.

 *

 * The subdevice provides (*insn_read) and (*insn_write) operations to read

 * the current value and write an initial value to a counter. A (*insn_config)

 * operation is also provided to handle the following comedi instructions:

 *

 *	INSN_CONFIG_SET_COUNTER_MODE	calls comedi_8254_set_mode()

 *	INSN_CONFIG_8254_READ_STATUS	calls comedi_8254_status()

 *

 * The (*insn_config) member of comedi_8254 can be initialized by the external

 * driver to handle any additional instructions.

 *

 * NOTE: Gate control, clock routing, and any interrupt handling for the

 * counters is not handled by this module. These features are driver dependent.

/**

 * comedi_8254_status - return the status of a counter

 * @i8254:	comedi_8254 struct for the timer

 * @counter:	the counter number

/**

 * comedi_8254_read - read the current counter value

 * @i8254:	comedi_8254 struct for the timer

 * @counter:	the counter number

 latch counter */

 read LSB then MSB */

/**

 * comedi_8254_write - load a 16-bit initial counter value

 * @i8254:	comedi_8254 struct for the timer

 * @counter:	the counter number

 * @val:	the initial value

 load LSB then MSB */

/**

 * comedi_8254_set_mode - set the mode of a counter

 * @i8254:	comedi_8254 struct for the timer

 * @counter:	the counter number

 * @mode:	the I8254_MODEx and I8254_BCD|I8254_BINARY

 select counter */

 load LSB then MSB */

 mode and BCD|binary */

/**

 * comedi_8254_load - program the mode and initial count of a counter

 * @i8254:	comedi_8254 struct for the timer

 * @counter:	the counter number

 * @mode:	the I8254_MODEx and I8254_BCD|I8254_BINARY

 * @val:	the initial value

/**

 * comedi_8254_pacer_enable - set the mode and load the cascaded counters

 * @i8254:	comedi_8254 struct for the timer

 * @counter1:	the counter number for the first divisor

 * @counter2:	the counter number for the second divisor

 * @enable:	flag to enable (load) the counters

		/*

		 * Divisors are loaded second counter then first counter to

		 * avoid possible issues with the first counter expiring

		 * before the second counter is loaded.

/**

 * comedi_8254_update_divisors - update the divisors for the cascaded counters

 * @i8254:	comedi_8254 struct for the timer

 masking is done since counter maps zero to 0x10000 */

/**

 * comedi_8254_cascade_ns_to_timer - calculate the cascaded divisor values

 * @i8254:	comedi_8254 struct for the timer

 * @nanosec:	the desired ns time

 * @flags:	comedi_cmd flags

 exit early if everything is already correct */

 check for overflow */

/**

 * comedi_8254_ns_to_timer - calculate the divisor value for nanosec timing

 * @i8254:	comedi_8254 struct for the timer

 * @nanosec:	the desired ns time

 * @flags:	comedi_cmd flags

/**

 * comedi_8254_set_busy - set/clear the "busy" flag for a given counter

 * @i8254:	comedi_8254 struct for the timer

 * @counter:	the counter number

 * @busy:	set/clear flag

		/*

		 * If available, call the driver provided (*insn_config)

		 * to handle any driver implemented instructions.

/**

 * comedi_8254_subdevice_init - initialize a comedi_subdevice for the 8254 timer

 * @s:		comedi_subdevice struct

 * @i8254:	comedi_8254 struct

 sanity check that the iosize is valid */

 default osc_base to the max speed of a generic 8254 timer */

 reset all the counters by setting them to I8254_MODE0 */

/**

 * comedi_8254_init - allocate and initialize the 8254 device for pio access

 * @iobase:	port I/O base address

 * @osc_base:	base time of the counter in ns

 *		OPTIONAL - only used by comedi_8254_cascade_ns_to_timer()

 * @iosize:	I/O register size

 * @regshift:	register gap shift

/**

 * comedi_8254_mm_init - allocate and initialize the 8254 device for mmio access

 * @mmio:	memory mapped I/O base address

 * @osc_base:	base time of the counter in ns

 *		OPTIONAL - only used by comedi_8254_cascade_ns_to_timer()

 * @iosize:	I/O register size

 * @regshift:	register gap shift

 SPDX-License-Identifier: GPL-2.0+

/*

 * aio_iiro_16.c

 * Comedi driver for Access I/O Products 104-IIRO-16 board

 * Copyright (C) 2006 C&C Technologies, Inc.

/*

 * Driver: aio_iiro_16

 * Description: Access I/O Products PC/104 Isolated Input/Relay Output Board

 * Author: Zachary Ware <zach.ware@cctechnol.com>

 * Devices: [Access I/O] 104-IIRO-16 (aio_iiro_16)

 * Status: experimental

 *

 * Configuration Options:

 *   [0] - I/O port base address

 *   [1] - IRQ (optional)

 *

 * The board supports interrupts on change of state of the digital inputs.

 * The sample data returned by the async command indicates which inputs

 * changed state and the current state of the inputs:

 *

 *	Bit 23 - IRQ Enable (1) / Disable (0)

 *	Bit 17 - Input 8-15 Changed State (1 = Changed, 0 = No Change)

 *	Bit 16 - Input 0-7 Changed State (1 = Changed, 0 = No Change)

 *	Bit 15 - Digital input 15

 *	...

 *	Bit 0  - Digital input 0

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 Step 4: fix up any arguments */

 Step 5: check channel list if it exists */

	/*

	 * Digital input change of state interrupts are optionally supported

	 * using IRQ 2-7, 10-12, 14, or 15.

 Digital Output subdevice */

 get the initial state of the relays */

 Digital Input subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * Hardware driver for DAQ-STC based boards

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1997-2001 David A. Schleef <ds@schleef.org>

 * Copyright (C) 2002-2006 Frank Mori Hess <fmhess@users.sourceforge.net>

/*

 * This file is meant to be included by another file, e.g.,

 * ni_atmio.c or ni_pcimio.c.

 *

 * Interrupt support originally added by Truxton Fulton <trux@truxton.com>

 *

 * References (ftp://ftp.natinst.com/support/manuals):

 *   340747b.pdf  AT-MIO E series Register Level Programmer Manual

 *   341079b.pdf  PCI E Series RLPM

 *   340934b.pdf  DAQ-STC reference manual

 *

 * 67xx and 611x registers (ftp://ftp.ni.com/support/daq/mhddk/documentation/)

 *   release_ni611x.pdf

 *   release_ni67xx.pdf

 *

 * Other possibly relevant info:

 *   320517c.pdf  User manual (obsolete)

 *   320517f.pdf  User manual (new)

 *   320889a.pdf  delete

 *   320906c.pdf  maximum signal ratings

 *   321066a.pdf  about 16x

 *   321791a.pdf  discontinuation of at-mio-16e-10 rev. c

 *   321808a.pdf  about at-mio-16e-10 rev P

 *   321837a.pdf  discontinuation of at-mio-16de-10 rev d

 *   321838a.pdf  about at-mio-16de-10 rev N

 *

 * ISSUES:

 *   - the interrupt routine needs to be cleaned up

 *

 * 2006-02-07: S-Series PCI-6143: Support has been added but is not

 * fully tested as yet. Terry Barnaby, BEAM Ltd.

 A timeout count */

 Note: this table must match the ai_gain_* definitions */

/*

 * We automatically take advantage of STC registers that can be

 * read/written directly in the I/O space of the board.

 *

 * The AT-MIO and DAQCard devices map the low 8 STC registers to

 * iobase+reg*2.

 *

 * Most PCIMIO devices also map the low 8 STC registers but the

 * 611x devices map the read registers to iobase+(addr-1)*2.

 * For now non-windowed STC access is disabled if a PCIMIO device

 * is detected (devpriv->mite has been initialized).

 *

 * The M series devices do not used windowed registers for the

 * STC registers. The functions below handle the mapping of the

 * windowed STC registers to the m series register offsets.

	/*

	 * NISTC_DIO_OUT_REG maps to:

	 * { NI_M_DIO_REG, 4 } and { NI_M_SCXI_SER_DO_REG, 1 }

 DOES NOT MAP CLEANLY */

 DOES NOT MAP CLEANLY */

 E-Series only */

 E-Series only */

 doc for following line: mhddk/nimseries/ChipObjects/tMSeries.h */

 Unknown */

 Unknown */

 selects the MITE channel to use for DMA */

 DMA channel setup */

	/*

	 * XXX just guessing NI_STC_DMA_CHAN_SEL()

	 * returns the right bits, under the assumption the cdio dma

	 * selection works just like ai/ao/gpct.

	 * Definitely works for dma channels 0 and 1.

  PCIDMA */

  PCIDMA */

  PCIDMA */

	/*

	 * e-series boards use the second irq signals to generate

	 * dma requests for their counters

  PCIDMA */

  Flush the 6143 data FIFO */

  Wait for complete */

			/*

			 * The NI example code does 3 convert pulses for 625x

			 * boards, But that appears to be wrong in practice.

/*

 * ni_set_bits( ) allows different parts of the ni_mio_common driver to

 * share registers (such as Interrupt_A_Register) without interfering with

 * each other.

 *

 * NOTE: the switch/case statements are optimized out for a constant argument

 * so this is actually quite fast---  If you must wrap another function around

 * this make it inline to avoid a large speed penalty.

 *

 * value should only be 1 or 0.

		/*

		 * If we poll too often, the pci bus activity seems

		 * to slow the dma transfer down.

 PCIDMA */

 6711 only has 16 bit wide ao fifo */

/*

 *  There's a small problem if the FIFO gets really low and we

 *  don't have the data to fill it.  Basically, if after we fill

 *  the FIFO with all the data available, the FIFO is _still_

 *  less than half full, we never clear the interrupt.  If the

 *  IRQ is in edge mode, we never get another interrupt, because

 *  this one wasn't cleared.  If in level mode, we get flooded

 *  with interrupts that we can't fulfill, because nothing ever

 *  gets put into the buffer.

 *

 *  This kind of situation is recoverable, but it is easier to

 *  just pretend we had a FIFO underrun, since there is a good

 *  chance it will happen anyway.  This is _not_ the case for

 *  RT code, as RT code might purposely be running close to the

 *  metal.  Needs to be fixed eventually.

 reset fifo */

 load some data */

 This may get the hi/lo data in the wrong order */

 Check if there's a single sample stuck in the FIFO */

		/*

		 * This just reads the FIFO assuming the data is present,

		 * no checks on the FIFO status are performed.

 Assume there is a single sample stuck in the FIFO */

 Get stranded sample into FIFO */

 Empties the AI fifo */

 This may get the hi/lo data in the wrong order */

 This may get the hi/lo data in the wrong order */

  Check if stranded sample is present */

 Get stranded sample into FIFO */

 fifo empty */

 Check if there's a single sample stuck in the FIFO */

 Check if there's a single sample stuck in the FIFO */

 Get stranded sample into FIFO */

 This may get the hi/lo data in the wrong order */

 handle special case of single scan */

 test for all uncommon interrupt events at the same time */

			/*

			 * We probably aren't even running a command now,

			 * so it's a good idea to be careful.

		/*

		 * PCMCIA cards (at least 6036) seem to stop producing

		 * interrupts if we fail to get the fifo less than half

		 * full, so loop to be sure.

  !PCIDMA */

 write alloc the entire buffer */

start the MITE */

 read alloc the entire buffer */

			/*

			 * Doing 32 instead of 16 bit wide transfers from

			 * memory makes the mite do 32 bit pci transfers,

			 * doubling pci bandwidth.

  PCIDMA */

/*

 * used for both cancel ioctl and board initialization

 *

 * this is pretty harsh for a cancel, but it works...

 ai configuration */

| NISTC_AI_MODE1_TRIGGER_ONCE */,

 generate FIFO interrupts on non-empty */

	/* the following registers should not be changed, because there

	 * are no backup registers in devpriv.  If you want to change

	 * any of these, add a backup register and other appropriate code:

	 *      NISTC_AI_MODE1_REG

	 *      NISTC_AI_MODE3_REG

	 *      NISTC_AI_PERSONAL_REG

	 *      NISTC_AI_OUT_CTRL_REG

 clear interrupts */

  lock to avoid race with interrupt handler */

  don't use 2's complement encoding */

  don't use 2's complement encoding */

/*

 * Notes on the 6110 and 6111:

 * These boards a slightly different than the rest of the series, since

 * they have multiple A/D converters.

 * From the driver side, the configuration memory is a

 * little different.

 * Configuration Memory Low:

 *   bits 15-9: same

 *   bit 8: unipolar/bipolar (should be 0 for bipolar)

 *   bits 0-3: gain.  This is 4 bits instead of 3 for the other boards

 *       1001 gain=0.1 (+/- 50)

 *       1010 0.2

 *       1011 0.1

 *       0001 1

 *       0010 2

 *       0011 5

 *       0100 10

 *       0101 20

 *       0110 50

 * Configuration Memory High:

 *   bits 12-14: Channel Type

 *       001 for differential

 *       000 for calibration

 *   bit 11: coupling  (this is not currently handled)

 *       1 AC coupling

 *       0 DC coupling

 *   bits 0-2: channel

 *       valid channels are 0-3

  ready to go. */

  Set up Calibration mode if required */

  Strobe Relay enable bit */

 Allow relays to change */

  Strobe Relay disable bit */

 Allow relays to change */

 fix the external/internal range differences */

 prime the channel/gain list */

 The 611x has screwy 32-bit FIFOs. */

			/*

			 * The 6143 has 32-bit FIFOs. You need to strobe a

			 * bit to move a single 16bit stranded sample into

			 * the FIFO.

 Get stranded sample into FIFO */

		/*

		 * we can only transfer up to the size of the buffer.  In this

		 * case, the user is expected to continue to write into the

		 * comedi buffer (already implemented as a ring buffer).

 simultaneously-sampled inputs */

 multiplexed inputs */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 external trigger */

 TRIG_OTHER */

 external trigger */

 TRIG_NONE */

 step 4: fix up any arguments */

 mode1 is needed for both stop and convert */

 start configuration */

	/*

	 * Disable analog triggering for now, since it interferes

	 * with the use of pfi0.

 logic low */

  ai configuration memory */

  have to take 3 stage adc pipeline into account */

 stage number of scans */

 load SC (Scan Count) */

			/*

			 * This is required to get the last sample for

			 * chanlist_len > 1, not sure why.

 stage number of scans */

 load SC (Scan Count) */

		/*

		 * stop bits for non 611x boards

		 * NISTC_AI_MODE3_SI_TRIG_DELAY=0

		 * NISTC_AI_MODE2_PRE_TRIGGER=0

		 * NISTC_AI_START_STOP_REG:

		 * NISTC_AI_START_POLARITY=0	(?) rising edge

		 * NISTC_AI_START_EDGE=1	edge triggered

		 * NISTC_AI_START_SYNC=1	(?)

		 * NISTC_AI_START_SEL=0		SI_TC

		 * NISTC_AI_STOP_POLARITY=0	rising edge

		 * NISTC_AI_STOP_EDGE=0		level

		 * NISTC_AI_STOP_SYNC=1

		 * NISTC_AI_STOP_SEL=19		external pin (configuration mem)

 A */

 mode2 |= NISTC_AI_MODE2_SC_RELOAD_MODE; */

 load SI */

 falling edge */

 0,0 does not work */

 A */

 alternate */

 B */

 alternate */

 interrupt on FIFO, errors, SC_TC */

 wake on end-of-scan */

 FIFO interrupts and DMA requests on half-full */

 generate FIFO interrupts on non-empty */

 clear interrupts */

 interrupt on nothing */

 XXX start polling if necessary */

 end configuration */

 XXX ? */

 TRIG_INT */

 we don't care about actual channels */

 data[3] : chanlist_len */

 simultaneous output */

		/*

		 * Munge data from unsigned to two's complement for

		 * bipolar ranges.

 not all boards can deglitch, but this shouldn't hurt */

 analog reference */

 AREF_OTHER connects AO ground to AI ground, i think */

			/*

			 * 6xxx boards have bipolar outputs, munge the

			 * unsigned comedi values to 2's complement

			/*

			 * M-series boards use offset binary values for

			 * bipolar and uinpolar outputs

			/*

			 * Non-M series boards need two's complement values

			 * for bipolar ranges.

/*

 * Arms the AO device in preparation for a trigger event.

 * This function also allocates and prepares a DMA channel (or FIFO if DMA is

 * not used).  As a part of this preparation, this function preloads the DAC

 * registers with the first values of the output stream.  This ensures that the

 * first clock cycle after the trigger can be used for output.

 *

 * Note that this function _must_ happen after a user has written data to the

 * output buffers via either mmap or write(fileno,...).

	/*

	 * Prevent ao from doing things like trying to allocate the ao dma

	 * channel multiple times.

 wait for DACs to be loaded */

	/*

	 * stc manual says we are need to clear error interrupt after

	 * AO_TMRDACWRs_In_Progress_St clears

 we don't care about actual channels */

 data[3] : chanlist_len */

	/*

	 * Require trig_num == cmd->start_arg when cmd->start_src == TRIG_INT.

	 * For backwards compatibility, also allow trig_num == 0 when

	 * cmd->start_src != TRIG_INT (i.e. when cmd->start_src == TRIG_EXT);

	 * in that case, the internal trigger is being used as a pre-trigger

	 * before the external trigger.

	/*

	 * Null trig at beginning prevent ao start trigger from executing more

	 * than once per command.

 only arm this device if it still needs arming */

/*

 * begin ni_ao_cmd.

 * Organized similar to NI-STC and MHDDK examples.

 * ni_ao_cmd is broken out into configuration sub-routines for clarity.

 fast CPU interface--only eseries */

 ((slow CPU interface) ? 0 : AO_Fast_CPU) | */

 (use_original_pulse ? 0 : NISTC_AO_PERSONAL_UPDATE_TIMEBASE) */ |

	  /*

	   * FIXME:  start setting following bit when appropriate.  Need to

	   * determine whether board is E4 or E1.

	   * FROM MHHDK:

	   * if board is E4 or E1

	   *   Set bit "NISTC_AO_PERSONAL_UPDATE_PW" to 0

	   * else

	   *   set it to 1

 FIXME:  when should we set following bit to zero? */

	/*

	 * FIXME:

	 * add something like ".has_individual_dacs = 0" to ni_board_struct

	 * since, as F Hess pointed out, not all in m series have singles.  not

	 * sure if e-series all have duals...

	/*

	 * F Hess: windows driver does not set NISTC_AO_PERSONAL_NUM_DAC bit for

	 * 6281, verified with bus analyzer.

 sync */

 TRIG_EXT */

 0=active high, 1=active low. see daq-stc 3-24 (p186) */

 0=edge detection disabled, 1=enabled */

 AO_Delayed_START1 = 0, we do not support delayed start...yet */

 sync */

 select DA_START1 as PFI6/AO_START1 when configured as an output */

 Not supporting 'waveform staging' or 'local buffer with pauses' */

	/*

	 * This relies on ao_mode1/(Trigger_Once | Continuous) being set in

	 * set_trigger above.  It is unclear whether we really need to re-write

	 * this register with these values.  The mhddk examples for e-series

	 * show writing this in both places, but the examples for m-series show

	 * a single write in the set_counters function (here).

 sync (upload number of buffer iterations -1) */

 indicate that we want to use BC_Load_A_Register as the source */

	/*

	 * if the BC_TC interrupt is still issued in spite of UC, BC, UI

	 * ignoring BC_TC, then we will need to find a way to ignore that

	 * interrupt in continuous mode.

 iter once */

 sync (issue command to load number of buffer iterations -1) */

 sync (upload number of updates in buffer) */

 indicate that we want to use UC_Load_A_Register as the source */

	/*

	 * if a user specifies '0', this automatically assumes the entire 24bit

	 * address space is available for the (multiple iterations of single

	 * buffer) MISB.  Otherwise, stop_arg specifies the MISB length that

	 * will be used, regardless of whether we are in continuous mode or not.

	 * In continuous mode, the output will just iterate indefinitely over

	 * the MISB.

			/*

			 * this is how the NI example code does it for m-series

			 * boards, verified correct with 6259

 sync (issue cmd to load number of updates in MISB) */

 sync (issue cmd to load number of updates in MISB) */

			/*

			 * sync (upload number of updates-1 in MISB)

			 * --eseries only?

	/*

	 * zero out these bit fields to be set below. Does an ao-reset do this

	 * automatically?

		/*

		 * NOTE: there are several other ways of configuring internal

		 * updates, but we'll only support one for now:  using

		 * AO_IN_TIMEBASE, w/o waveform staging, w/o a delay between

		 * START1 and first update, and also w/o local buffer mode w/

		 * pauses.

		/*

		 * This is already done above:

		 * devpriv->ao_mode1 &= ~(

		 *   // set UPDATE_Source to UI_TC:

		 *   NISTC_AO_MODE1_UPDATE_SRC_MASK |

		 *   // set UPDATE_Source_Polarity to rising (required?)

		 *   NISTC_AO_MODE1_UPDATE_SRC_POLARITY |

		 *   // set UI_Source to AO_IN_TIMEBASE1:

		 *   NISTC_AO_MODE1_UI_SRC_MASK     |

		 *   // set UI_Source_Polarity to rising (required?)

		 *   NISTC_AO_MODE1_UI_SRC_POLARITY

		 * );

		/*

		 * TODO:  use ao_ui_clock_source to allow all possible signals

		 * to be routed to UI_Source_Select.  See tSTC.h for

		 * eseries/ni67xx and tMSeries.h for mseries.

		/*

		 * Wait N TB3 ticks after the start trigger before

		 * clocking (N must be >=2).

 following line: 2-1 per STC */

 TRIG_EXT */

 FIXME:  assert scan_begin_arg != 0, ret failure otherwise */

 Configure DAQ-STC for Timed update mode */

 We are not using UPDATE2-->don't have to set DACx_Source_Select */

	/*

	 * Since we are not supporting waveform staging, we ignore these errors:

	 * NISTC_AO_MODE3_STOP_ON_BC_TC_ERR,

	 * NISTC_AO_MODE3_STOP_ON_BC_TC_TRIG_ERR

 NOTE:  this is where use_onboard_memory=True would be implemented */

 enable sending of ao fifo requests (dma request) */

 we are not supporting boards with virtual fifos */

 ni_ao_reset should have already been done */

 clearing fifo and preload happens elsewhere */

	/*

	 * arm(ing) must happen later so that DMA can be setup and DACs

	 * preloaded with the actual output buffer before starting.

	 *

	 * start(ing) must happen _after_ arming is completed.  Starting can be

	 * done either via ni_ao_inttrig, or via an external trigger.

	 *

	 * **Currently, ni_ao_inttrig will automatically attempt a call to

	 * ni_ao_arm if the device still needs arming at that point.  This

	 * allows backwards compatibility.

 end ni_ao_cmd */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_EXT */

 step 4: fix up any arguments */

 See 3.6.1.2 "Resetting", of DAQ-STC Technical Reference Manual */

	/*

	 * In the following, the "--sync" comments are meant to denote

	 * asynchronous boundaries for setting the registers as described in the

	 * DAQ-STC mostly in the order also described in the DAQ-STC.

 --sync (reset AO) */

 following example in mhddk for m-series */

--sync (start config) */

--sync (Disarm) */

	/*

	 * --sync

	 * (clear bunch of registers--mseries mhddk examples do not include

	 * this)

--sync (disable interrupts) */

--sync (ack) */

--not in DAQ-STC.  which doc? */

--end */

 digital io */

 Make sure we're not using the serial part of the dio */

 we don't care about actual channels */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

	/*

	 * Although NI_D[IO]_SampleClock are the same, perhaps we should still,

	 * for completeness, test whether the cmd is output or input?

 Step 4: fix up any arguments */

 Step 5: check channel list if it exists */

 read alloc the entire buffer */

	/*

	 * XXX not sure what interrupt C group does

	 * wait for dma to fill output fifo

	 * ni_writeb(dev, NI_M_INTC_ENA, NI_M_INTC_ENA_REG);

	/*

	 * Although NI_D[IO]_SampleClock are the same, perhaps we should still,

	 * for completeness, test whether the cmd is output or input(?)

	/*

	 * XXX not sure what interrupt C group does

	 * ni_writeb(dev, 0, NI_M_INTC_ENA_REG);

 XXX just guessing this is needed and does something useful */

 s->async->events |= COMEDI_CB_EOA; */

  PCIDMA */

 Wait until STC says we're done, but don't loop infinitely. */

 Delay one bit per loop */

	/*

	 * Delay for last bit. This delay is absolutely necessary, because

	 * NISTC_STATUS1_SERIO_IN_PROG goes high one bit too early.

 Wait for one bit before transfer */

		/*

		 * Output current bit; note that we cannot touch s->state

		 * because it is a per-subdevice field, and serial is

		 * a separate subdevice from DIO.

		/*

		 * Assert SDCLK (active low, inverted), wait for half of

		 * the delay, deassert SDCLK, and wait for the other half.

 Input current bit */

			/*

			 * Warning: this clock speed is too fast to reliably

			 * control SCXI.

			/*

			 * Note: NISTC_CLK_FOUT_DIO_SER_OUT_DIV2 only affects

			 * 600ns/1.2us. If you turn divide_by_2 off with the

			 * slow clock, you will still get 10us, except then

			 * all your delays are wrong.

 M-Series only */

 M-Series only */

 M-Series only */

 M-Series only */

 M-Series only */

 M-Series only */

 M-Series only */

 M-Series only */

 M-Series only */

 M-Series only */

 m-series only registers */

 32 bit registers */

 16 bit registers */

 m-series only registers */

 32 bit registers */

 16 bit registers */

 use the last data value to set the fout divider */

	/*

	 * Fujitsu MB 88341

	 * Note that address bits are reversed.  Thanks to

	 * Ingo Keen for noticing this.

	 *

	 * Note also that the 88341 expects address values from

	 * 1-12, whereas we use channel numbers 0-11.  The NI

	 * docs use 1-12, also, so be careful here.

 bits will be 0 if there is no caldac for the given addr */

 only bother writing the last sample to the channel */

  pre-m-series boards have fixed signals on pfi pins */

  pre-m-series boards have fixed signals on pfi pins */

 allow new and old names of pfi channels to work. */

 Sets the output mux for the specified PFI channel. */

 allow new and old names of pfi channels to work. */

 allow new and old names of pfi channels to work. */

 allow new and old names of pfi channels to work. */

 allow new and old names of pfi channels to work. */

	/* give time for command to start being serially clocked into cs5529.

	 * this insures that the NI67XX_CAL_STATUS_BUSY bit will get properly

	 * set before we exit this function.

 cs5529 returns 16 bit signed data in bipolar mode */

	/*

	 * Set calibration adc source.  Docs lie, reference select bits 8 to 11

	 * do nothing. bit 12 seems to chooses internal reference voltage, bit

	 * 13 causes the adc input to go overrange (maybe reads external

	 * reference?)

 do self-calibration */

 need to force a conversion for calibration to run */

 force gain calibration to 1 */

/*

 * Find best multiplier/divider to try and get the PLL running at 80 MHz

 * given an arbitrary frequency input clock.

	/*

	 * m-series wants the phased-locked loop to output 80MHz, which is

	 * divided by 4 to 20 MHz for most timing clocks

 return the actual period (* fudge factor for 80 to 20 MHz) */

	/*

	 * These limits are somewhat arbitrary, but NI advertises 1 to 20MHz

	 * range so we'll use that.

 pxi clock is 10MHz */

 it takes a few hundred microseconds for PLL to lock */

 allow new and old names of rtsi channels to work. */

		/* probably should never reach this, since the

		 * ni_valid_rtsi_output_source above errors out if chan is too

		 * high

 allow new and old names of rtsi channels to work. */

 allow new and old names of rtsi channels to work. */

 allow new and old names of rtsi channels to work. */

/*

 * Default routing for RTSI trigger lines.

 *

 * These values are used here in the init function, as well as in the

 * disconnect_route function, after a RTSI route has been disconnected.

/*

 * Route signals through RGOUT0 terminal.

 * @reg: raw register value of RGOUT0 bits (only bit0 is important).

 * @dev: comedi device handle.

/*

 * Route signals through RGOUT0 terminal and increment the RGOUT0 use for this

 * particular route.

 * @src: device-global signal name

 * @dev: comedi device handle

 *

 * Return: -EINVAL if the source is not valid to route to RGOUT0;

 *	   -EBUSY if the RGOUT0 is already used;

 *	   0 if successful.

/*

 * Unroute signals through RGOUT0 terminal and deccrement the RGOUT0 use for

 * this particular source.  This function does not actually unroute anything

 * with respect to RGOUT0.  It does, on the other hand, decrement the usage

 * counter for the current src->RGOUT0 mapping.

 *

 * Return: -EINVAL if the source is not already routed to RGOUT0 (or usage is

 *	already at zero); 0 if successful.

 ok default? */

/*

 * Route signals through given NI_RTSI_BRD mux.

 * @i: index of mux to route

 * @reg: raw register value of RTSI_BRD bits

 * @dev: comedi device handle

 value for e-series */

 clear out the current reg_i for ith brd */

 (softcopy) write the new reg_i for ith brd */

 (hardcopy) write the new reg_i for ith brd */

 value for e-series */

	/*

	 * And now:

	 * brd : device-global name

	 * brd_index : index number of RTSI_BRD mux

/*

 * Route signals through NI_RTSI_BRD mux and increment the use counter for this

 * particular route.

 *

 * Return: -EINVAL if the source is not valid to route to NI_RTSI_BRD(i);

 *	   -EBUSY if all NI_RTSI_BRD muxes are already used;

 *	   NI_RTSI_BRD(i) of allocated ith mux if successful.

 first look for a mux that is already configured to provide src */

 invalid route */

 found the first unused, but usable mux */

			/*

			 * we've seen at least one possible route, so change the

			 * final error to -EBUSY in case there are no muxes

			 * available.

				/*

				 * we've found a mux that is already being used

				 * to provide the requested signal.  Reuse it.

 we did not find a mux to reuse, but there is at least one usable */

/*

 * Unroute signals through NI_RTSI_BRD mux and decrement the user counter for

 * this particular route.

 *

 * Return: -EINVAL if the source is not already routed to rtsi_brd(i) (or usage

 *	is already at zero); 0 if successful.

 ok default? */

  Initialises the RTSI bus signal switch to a default state */

	/*

	 * Use 10MHz instead of 20MHz for RTSI clock frequency. Appears

	 * to have no effect, at least on pxi-6281, which always uses

	 * 20MHz rtsi clock frequency

  Set clock mode to internal */

 default internal lines routing to RTSI bus lines */

	/*

	 * Sets the source and direction of the 4 on board lines.

	 * This configures all board lines to be:

	 * for e-series:

	 *   1) inputs (not sure what "output" would mean)

	 *   2) copying TRIGGER_LINE(0) (or RTSI0) output

	 * for m-series:

	 *   copying NI_PFI(0) output

 initialize rgout0 pin as unused. */

 Get route of GPFO_i/CtrOut pins */

 Set route of GPFO_i/CtrOut pins */

 Set route of GPFO_i/CtrOut pins */

 clear reg */

 set reg */

 clear reg */

 set reg */

/*

 * Retrieves the current source of the output selector for the given

 * destination.  If the terminal for the destination is not already configured

 * as an output, this function returns -EINVAL as error.

 *

 * Return: the register value of the destination output selector;

 *	   -EINVAL if terminal is not configured for output.

 prepare for lookup below */

 prepare for lookup */

		/*

		 * not handled by ni_tio.  Only available for GPFO registers in

		 * e/m series.

 there are only two g_out outputs. */

/*

 * Test a route:

 *

 * Return: -1 if not connectible;

 *	    0 if connectible and not connected;

 *	    1 if connectible and connected.

 Connect the actual route.  */

 route is not valid */

 destination mux is already busy. complain, don't overwrite */

 The route is valid and available. Now connect... */

 set routing source, then open output */

 Attempt to allocate and  route (src->brd) */

 Now lookup the register value for (brd->dest) */

		/*

		 * not handled by ni_tio.  Only available for GPFO registers in

		 * e/m series.

 there are only two g_out outputs. */

		/*

		 * we are adding back the channel modifier info to set

		 * invert/edge info passed by the user

 route is not valid */

 cannot disconnect something not connected */

 The route is valid and is connected.  Now disconnect... */

 set the pfi to high impedance, and disconnect */

 find which RTSI_BRD line is source for rtsi pin */

 decrement/disconnect RTSI_BRD line from source */

 set rtsi output selector to default state */

		/*

		 * not handled by ni_tio.  Only available for GPFO registers in

		 * e/m series.

 there are only two g_out outputs. */

	/*

	 * This case is already handled one level up.

	 * case INSN_DEVICE_CONFIG_GET_ROUTES:

 make sure dev->attached is checked */

  lock to avoid race with comedi_poll */

 handle any interrupt or dma events */

 handle any interrupt or dma events */

 prepare the device for globally-named routes. */

		/*

		 * only(?) assign insn_device_config if we have global names for

		 * this device.

 initialize clock dividers */

 BEAM is this needed for PCI-6143 ?? */

 Analog Input subdevice */

 reset the analog input configuration */

 Analog Output subdevice */

		/*

		 * Along with the IRQ we need either a FIFO or DMA for

		 * async command support.

 reset the analog output configuration */

 Digital I/O subdevice */

 | SDF_CMD_READ */;

 M-series boards use DMA */

 reset DIO and set all channels to inputs */

 PCIDMA */

 set all channels to inputs */

 8255 device */

 formerly general purpose counter/timer device, but no longer used */

 Calibration subdevice */

 internal PWM output used for AI nonlinearity calibration */

 internal PWM output used for AI nonlinearity calibration */

 setup the caldacs and find the real n_chan and maxdata */

 EEPROM subdevice */

 Digital I/O (PFI) subdevice */

 cs5529 calibration adc */

  one channel for each analog output channel */

 XXX */

 Serial */

 RTSI */

 allocate and initialize the gpct counter device */

 Counter (gpct) subdevices */

 setup and initialize the counter */

 | SDF_CMD_WRITE */;

 Initialize GPFO_{0,1} to produce output of counters */

 output of counter 0; DAQ STC, p338 */

 output of counter 1; DAQ STC, p338 */

 Frequency output subdevice */

 DMA setup */

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/amplc_pci236.c

 * Driver for Amplicon PCI236 DIO boards.

 *

 * Copyright (C) 2002-2014 MEV Ltd. <https://www.mev.co.uk/>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: amplc_pci236

 * Description: Amplicon PCI236

 * Author: Ian Abbott <abbotti@mev.co.uk>

 * Devices: [Amplicon] PCI236 (amplc_pci236)

 * Updated: Fri, 25 Jul 2014 15:32:40 +0000

 * Status: works

 *

 * Configuration options:

 *   none

 *

 * Manual configuration of PCI board (PCI236) is not supported; it is

 * configured automatically.

 *

 * The PCI236 board has a single 8255 appearing as subdevice 0.

 *

 * Subdevice 1 pretends to be a digital input device, but it always

 * returns 0 when read. However, if you run a command with

 * scan_begin_src=TRIG_EXT, a rising edge on port C bit 3 acts as an

 * external trigger, which can be used to wake up tasks.  This is like

 * the comedi_parport device.  If no interrupt is connected, then

 * subdevice 1 is unused.

 Disable, and clear, interrupts */

 Enable, and clear, interrupts */

 this will also clear the "local interrupt 1" latch */

 check if interrupt occurred */

 clear the interrupt */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routes.c

 *  Route information for NI boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * This is defined in ni_routing/ni_route_values.h:

 * #define B(x)	((x) - NI_NAMES_BASE)

/*

 * These are defined in ni_routing/ni_route_values.h to identify clearly

 * elements of the table that were set.  In other words, entries that are zero

 * are invalid.  To get the value to use for the register, one must mask out the

 * high bit.

 *

 * #define V(x)	((x) | 0x80)

 *

 * #define UNMARK(x)	((x) & (~(0x80)))

 *

 Helper for accessing data. */

/*

 * Find the route values for a device family.

/*

 * Find the valid routes for a board.

/*

 * Find the proper route_values and ni_device_routes tables for this particular

 * device.  Possibly try an alternate board name if device routes not found

 * for the actual board name.

 *

 * Return: -ENODATA if either was not found; 0 if both were found.

 First, find the register_values table for this device family */

 Second, find the set of routes valid for this device. */

/**

 * ni_assign_device_routes() - Assign the proper lookup table for NI signal

 *			       routing to the specified NI device.

 * @device_family: Device family name (determines route values).

 * @board_name: Board name (determines set of routes).

 * @alt_board_name: Optional alternate board name to try on failure.

 * @tables: Pointer to assigned routing information.

 *

 * Finds the route values for the device family and the set of valid routes

 * for the board.  If valid routes could not be found for the actual board

 * name and an alternate board name has been specified, try that one.

 *

 * On failure, the assigned routing information may be partially filled

 * (for example, with the route values but not the set of valid routes).

 *

 * Return: -ENODATA if assignment was not successful; 0 if successful.

/**

 * ni_count_valid_routes() - Count the number of valid routes.

 * @tables: Routing tables for which to count all valid routes.

 direct routing is valid */

/**

 * ni_get_valid_routes() - Implements INSN_DEVICE_CONFIG_GET_ROUTES.

 * @tables:	pointer to relevant set of routing tables.

 * @n_pairs:	Number of pairs for which memory is allocated by the user.  If

 *		the user specifies '0', only the number of available pairs is

 *		returned.

 * @pair_data:	Pointer to memory allocated to return pairs back to user.  Each

 *		even, odd indexed member of this array will hold source,

 *		destination of a route pair respectively.

 *

 * Return: the number of valid routes if n_pairs == 0; otherwise, the number of

 *	valid routes copied.

 direct routing is valid */

 indirect routing also valid */

/*

 * List of NI global signal names that, as destinations, are only routeable

 * indirectly through the *_arg elements of the comedi_cmd structure.

/**

 * ni_is_cmd_dest() - Determine whether the given destination is only

 *		      configurable via a comedi_cmd struct.

 * @dest: Destination to test.

 **** BEGIN Routes sort routines **** */

/**

 * ni_sort_device_routes() - Sort the list of valid device signal routes in

 *			     preparation for use.

 * @valid_routes:	pointer to ni_device_routes struct to sort.

 1. Count and set the number of ni_route_set objects. */

 2. sort all ni_route_set objects by destination. */

 3. Loop through each route_set for sorting. */

 3a. Count and set the number of sources. */

 3a. Sort sources. */

 sort all valid device signal routes in prep for use */

 **** BEGIN Routes search routines **** */

/**

 * ni_find_route_set() - Finds the proper route set with the specified

 *			 destination.

 * @destination: Destination of which to search for the route set.

 * @valid_routes: Pointer to device routes within which to search.

 *

 * Return: NULL if no route_set is found with the specified @destination;

 *	otherwise, a pointer to the route_set if found.

/*

 * ni_route_set_has_source() - Determines whether the given source is in

 *			       included given route_set.

 *

 * Return: true if found; false otherwise.

/**

 * ni_lookup_route_register() - Look up a register value for a particular route

 *				without checking whether the route is valid for

 *				the particular device.

 * @src:	global-identifier for route source

 * @dest:	global-identifier for route destination

 * @tables:	pointer to relevant set of routing tables.

 *

 * Return: -EINVAL if the specified route is not valid for this device family.

	/*

	 * Be sure to use the B() macro to subtract off the NI_NAMES_BASE before

	 * indexing into the route_values array.

 mask out the valid-value marking bit */

/**

 * ni_route_to_register() - Validates and converts the specified signal route

 *			    (src-->dest) to the value used at the appropriate

 *			    register.

 * @src:	global-identifier for route source

 * @dest:	global-identifier for route destination

 * @tables:	pointer to relevant set of routing tables.

 *

 * Generally speaking, most routes require the first six bits and a few require

 * 7 bits.  Special handling is given for the return value when the route is to

 * be handled by the RTSI sub-device.  In this case, the returned register may

 * not be sufficient to define the entire route path, but rather may only

 * indicate the intermediate route.  For example, if the route must go through

 * the RGOUT0 pin, the (src->RGOUT0) register value will be returned.

 * Similarly, if the route must go through the NI_RTSI_BRD lines, the BIT(6)

 * will be set:

 *

 * if route does not need RTSI_BRD lines:

 *   bits 0:7 : register value

 *              for a route that must go through RGOUT0 pin, this will be equal

 *              to the (src->RGOUT0) register value.

 * else: * route is (src->RTSI_BRD(x), RTSI_BRD(x)->TRIGGER_LINE(i)) *

 *   bits 0:5 : zero

 *   bits 6   : set to 1

 *   bits 7:7 : zero

 *

 * Return: register value to be used for source at destination with special

 *	cases given above; Otherwise, -1 if the specified route is not valid for

 *	this particular device.

 first check to see if source is listed with bunch of destinations. */

 2nd, check to see if destination is in list of source's targets. */

	/*

	 * finally, check to see if we know how to route...

	 * Be sure to use the B() macro to subtract off the NI_NAMES_BASE before

	 * indexing into the route_values array.

	/*

	 * if we did not validate the route, we'll see if we can route through

	 * one of the muxes

 mask out the valid-value marking bit */

/*

 * ni_find_route_source() - Finds the signal source corresponding to a signal

 *			    route (src-->dest) of the specified routing register

 *			    value and the specified route destination on the

 *			    specified device.

 *

 * Note that this function does _not_ validate the source based on device

 * routes.

 *

 * Return: The NI signal value (e.g. NI_PFI(0) or PXI_Clk10) if found.

 *	If the source was not found (i.e. the register value is not

 *	valid for any routes to the destination), -EINVAL is returned.

 subtract NI names offset */

 ensure we are not going to under/over run the route value table */

 **** END Routes search routines **** */

 **** BEGIN simple module entry/exit functions **** */

www.comedi.org");

 **** END simple module entry/exit functions **** */

 SPDX-License-Identifier: GPL-2.0+

/*

 * COMEDI driver for the watchdog subdevice found on some addi-data boards

 * Copyright (c) 2013 H Hartley Sweeten <hsweeten@visionengravers.com>

 *

 * Based on implementations in various addi-data COMEDI drivers.

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1998 David A. Schleef <ds@schleef.org>

/*

 * The watchdog subdevice is configured with two INSN_CONFIG instructions:

 *

 * Enable the watchdog and set the reload timeout:

 *	data[0] = INSN_CONFIG_ARM

 *	data[1] = timeout reload value

 *

 * Disable the watchdog:

 *	data[0] = INSN_CONFIG_DISARM

 Time base is 20ms, let the user know the timeout */

 "ping" the watchdog */

 SPDX-License-Identifier: GPL-2.0+

/*

 * addi_apci_3xxx.c

 * Copyright (C) 2004,2005  ADDI-DATA GmbH for the source code of this module.

 * Project manager: S. Weber

 *

 *	ADDI-DATA GmbH

 *	Dieselstrasse 3

 *	D-77833 Ottersweier

 *	Tel: +19(0)7223/9493-0

 *	Fax: +49(0)7223/9493-92

 *	http://www.addi-data.com

 *	info@addi-data.com

 Test if interrupt occur */

 Reset the interrupt */

 Clear the FIFO */

 Get and save the delay mode */

 Channel configuration selection */

 Make the configuration */

 Channel selection */

 Restore delay mode */

 Set the number of sequence to 1 */

 Start the conversion */

 Wait the EOS */

 Read the analog value */

 time_base: 0 = ns, 1 = us, 2 = ms */

 skip unsupported time bases */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_NONE */

 step 4: fix up any arguments */

 Set the convert timing unit */

 Set the convert timing */

 Start the conversion */

 Set the range selection */

 Write the analog value to the selected channel */

 Wait the end of transfer */

	/*

	 * Port 0 (channels 0-7) are always inputs

	 * Port 1 (channels 8-15) are always outputs

	 * Port 2 (channels 16-23) are programmable i/o

 ignore all other instructions for ports 0 and 1 */

 changing any channel in port 2 changes the entire port */

 update port 2 configuration */

 Disable the interrupt */

 Clear the start command */

 Reset the interrupt flags */

 clear the EOS */

 Clear the FIFO */

 Enable the interrupt */

 Analog Input subdevice */

			/*

			 * FIXME: The hardware supports multiple scan modes

			 * but the original addi-data driver only supported

			 * reading a single channel with interrupts. Need a

			 * proper datasheet to fix this.

			 *

			 * The following scan modes are supported by the

			 * hardware:

			 *   1) Single software scan

			 *   2) Single hardware triggered scan

			 *   3) Continuous software scan

			 *   4) Continuous software scan with timer delay

			 *   5) Continuous hardware triggered scan

			 *   6) Continuous hardware triggered scan with timer

			 *      delay

			 *

			 * For now, limit the chanlist to a single channel.

 Analog Output subdevice */

 Digital Input subdevice */

 Digital Output subdevice */

 TTL Digital I/O subdevice */

 channels 0-7 are always outputs */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * addi_apci_3501.c

 * Copyright (C) 2004,2005  ADDI-DATA GmbH for the source code of this module.

 * Project manager: Eric Stolz

 *

 *	ADDI-DATA GmbH

 *	Dieselstrasse 3

 *	D-77833 Ottersweier

 *	Tel: +19(0)7223/9493-0

 *	Fax: +49(0)7223/9493-92

 *	http://www.addi-data.com

 *	info@addi-data.com

/*

 * Driver: addi_apci_3501

 * Description: ADDI-DATA APCI-3501 Analog output board

 * Devices: [ADDI-DATA] APCI-3501 (addi_apci_3501)

 * Author: H Hartley Sweeten <hsweeten@visionengravers.com>

 * Updated: Mon, 20 Jun 2016 10:57:01 -0700

 * Status: untested

 *

 * Configuration Options: not applicable, uses comedi PCI auto config

 *

 * This board has the following features:

 *   - 4 or 8 analog output channels

 *   - 2 optically isolated digital inputs

 *   - 2 optically isolated digital outputs

 *   - 1 12-bit watchdog/timer

 *

 * There are 2 versions of the APCI-3501:

 *   - APCI-3501-4  4 analog output channels

 *   - APCI-3501-8  8 analog output channels

 *

 * These boards use the same PCI Vendor/Device IDs. The number of output

 * channels used by this driver is determined by reading the EEPROM on

 * the board.

 *

 * The watchdog/timer subdevice is not currently supported.

/*

 * PCI bar 1 register I/O map

/*

 * AMCC S5933 NVRAM

/*

 * Function types stored in the eeprom

	/*

	 * All analog output channels have the same output range.

	 *	14-bit bipolar: 0-10V

	 *	13-bit unipolar: +/-10V

	 * Changing the range of one channel changes all of them!

 Add the offset to the start of the user data */

 Load the low 8 bit address */

 Load the high 8 bit address */

 Read the eeprom data byte */

 Read functionality details */

 No point reading the same EEPROM location more than once. */

 Reset all digital outputs to "0" */

 Default all analog outputs to 0V (bipolar) */

 Set all analog output channels */

 Initialize the analog output subdevice */

 Initialize the digital input subdevice */

 Initialize the digital output subdevice */

 Timer/Watchdog subdevice */

 Initialize the eeprom subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * pcmda12.c

 * Driver for Winsystems PC-104 based PCM-D/A-12 8-channel AO board.

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2006 Calin A. Culianu <calin@ajvar.org>

/*

 * Driver: pcmda12

 * Description: A driver for the Winsystems PCM-D/A-12

 * Devices: [Winsystems] PCM-D/A-12 (pcmda12)

 * Author: Calin Culianu <calin@ajvar.org>

 * Updated: Fri, 13 Jan 2006 12:01:01 -0500

 * Status: works

 *

 * A driver for the relatively straightforward-to-program PCM-D/A-12.

 * This board doesn't support commands, and the only way to set its

 * analog output range is to jumper the board. As such,

 * comedi_data_write() ignores the range value specified.

 *

 * The board uses 16 consecutive I/O addresses starting at the I/O port

 * base address. Each address corresponds to the LSB then MSB of a

 * particular channel from 0-7.

 *

 * Note that the board is not ISA-PNP capable and thus needs the I/O

 * port comedi_config parameter.

 *

 * Note that passing a nonzero value as the second config option will

 * enable "simultaneous xfer" mode for this board, in which AO writes

 * will not take effect until a subsequent read of any AO channel. This

 * is so that one can speed up programming by preloading all AO registers

 * with values before simultaneously setting them to take effect with one

 * read command.

 *

 * Configuration Options:

 *   [0] - I/O port base address

 *   [1] - Do Simultaneous Xfer (see description)

 AI range is not configurable, it's set by jumpers on the board */

		/*

		 * Initiate transfer if not in simultaneaous xfer

		 * mode by reading one of the AO registers.

	/*

	 * Initiate simultaneaous xfer mode by reading one of the

	 * AO registers. All analog outputs will then be updated.

 Initiate transfer by reading one of the AO registers. */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0

/*

 * comedi/drivers/pcl730.c

 * Driver for Advantech PCL-730 and clones

 * José Luis Sánchez

/*

 * Driver: pcl730

 * Description: Advantech PCL-730 (& compatibles)

 * Devices: [Advantech] PCL-730 (pcl730), PCM-3730 (pcm3730), PCL-725 (pcl725),

 *   PCL-733 (pcl733), PCL-734 (pcl734),

 *   [ADLink] ACL-7130 (acl7130), ACL-7225b (acl7225b),

 *   [ICP] ISO-730 (iso730), P8R8-DIO (p8r8dio), P16R16-DIO (p16r16dio),

 *   [Diamond Systems] OPMM-1616-XT (opmm-1616-xt), PEARL-MM-P (pearl-mm-p),

 *   IR104-PBF (ir104-pbf),

 * Author: José Luis Sánchez (jsanchezv@teleline.es)

 * Status: untested

 *

 * Configuration options:

 *   [0] - I/O port base

 *

 * Interrupts are not supported.

 * The ACL-7130 card has an 8254 timer/counter not supported by this driver.

/*

 * Register map

 *

 * The register map varies slightly depending on the board type but

 * all registers are 8-bit.

 *

 * The boardinfo 'io_range' is used to allow comedi to request the

 * proper range required by the board.

 *

 * The comedi_subdevice 'private' data is used to pass the register

 * offset to the (*insn_bits) functions to read/write the correct

 * registers.

 *

 * The basic register mapping looks like this:

 *

 *     BASE+0  Isolated outputs 0-7 (write) / inputs 0-7 (read)

 *     BASE+1  Isolated outputs 8-15 (write) / inputs 8-15 (read)

 *     BASE+2  TTL outputs 0-7 (write) / inputs 0-7 (read)

 *     BASE+3  TTL outputs 8-15 (write) / inputs 8-15 (read)

 *

 * The pcm3730 board does not have register BASE+1.

 *

 * The pcl725 and p8r8dio only have registers BASE+0 and BASE+1:

 *

 *     BASE+0  Isolated outputs 0-7 (write) (read back on p8r8dio)

 *     BASE+1  Isolated inputs 0-7 (read)

 *

 * The acl7225b and p16r16dio boards have this register mapping:

 *

 *     BASE+0  Isolated outputs 0-7 (write) (read back)

 *     BASE+1  Isolated outputs 8-15 (write) (read back)

 *     BASE+2  Isolated inputs 0-7 (read)

 *     BASE+3  Isolated inputs 8-15 (read)

 *

 * The pcl733 and pcl733 boards have this register mapping:

 *

 *     BASE+0  Isolated outputs 0-7 (write) or inputs 0-7 (read)

 *     BASE+1  Isolated outputs 8-15 (write) or inputs 8-15 (read)

 *     BASE+2  Isolated outputs 16-23 (write) or inputs 16-23 (read)

 *     BASE+3  Isolated outputs 24-31 (write) or inputs 24-31 (read)

 *

 * The opmm-1616-xt board has this register mapping:

 *

 *     BASE+0  Isolated outputs 0-7 (write) (read back)

 *     BASE+1  Isolated outputs 8-15 (write) (read back)

 *     BASE+2  Isolated inputs 0-7 (read)

 *     BASE+3  Isolated inputs 8-15 (read)

 *

 *     These registers are not currently supported:

 *

 *     BASE+2  Relay select register (write)

 *     BASE+3  Board reset control register (write)

 *     BASE+4  Interrupt control register (write)

 *     BASE+4  Change detect 7-0 status register (read)

 *     BASE+5  LED control register (write)

 *     BASE+5  Change detect 15-8 status register (read)

 *

 * The pearl-mm-p board has this register mapping:

 *

 *     BASE+0  Isolated outputs 0-7 (write)

 *     BASE+1  Isolated outputs 8-15 (write)

 *

 * The ir104-pbf board has this register mapping:

 *

 *     BASE+0  Isolated outputs 0-7 (write) (read back)

 *     BASE+1  Isolated outputs 8-15 (write) (read back)

 *     BASE+2  Isolated outputs 16-19 (write) (read back)

 *     BASE+4  Isolated inputs 0-7 (read)

 *     BASE+5  Isolated inputs 8-15 (read)

 *     BASE+6  Isolated inputs 16-19 (read)

 only 4 are used */

 Isolated Digital Outputs */

 get the initial state if supported */

 Isolated Digital Inputs */

 TTL Digital Outputs */

 TTL Digital Inputs */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 *  das08_isa.c

 *  comedi driver for DAS08 ISA/PC-104 boards

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2000 David A. Schleef <ds@schleef.org>

 *  Copyright (C) 2001,2002,2003 Frank Mori Hess <fmhess@users.sourceforge.net>

 *  Copyright (C) 2004 Salvador E. Tropea <set@users.sf.net> <set@ieee.org>

/*

 * Driver: das08_isa

 * Description: DAS-08 ISA/PC-104 compatible boards

 * Devices: [Keithley Metrabyte] DAS08 (isa-das08),

 *   [ComputerBoards] DAS08 (isa-das08), DAS08-PGM (das08-pgm),

 *   DAS08-PGH (das08-pgh), DAS08-PGL (das08-pgl), DAS08-AOH (das08-aoh),

 *   DAS08-AOL (das08-aol), DAS08-AOM (das08-aom), DAS08/JR-AO (das08/jr-ao),

 *   DAS08/JR-16-AO (das08jr-16-ao), PC104-DAS08 (pc104-das08),

 *   DAS08/JR/16 (das08jr/16)

 * Author: Warren Jasper, ds, Frank Hess

 * Updated: Fri, 31 Aug 2012 19:19:06 +0100

 * Status: works

 *

 * This is the ISA/PC-104-specific support split off from the das08 driver.

 *

 * Configuration Options:

 *	[0] - base io address

 cio-das08.pdf */

 unchecked */

 cio-das08pgx.pdf */

 unchecked */

 cio-das08pgx.pdf */

 unchecked */

 cio-das08pgx.pdf */

 unchecked */

 cio-das08_aox.pdf */

 unchecked */

 cio-das08_aox.pdf */

 unchecked */

 cio-das08_aox.pdf */

 unchecked */

 cio-das08-jr-ao.pdf */

 unchecked */

 cio-das08jr-16-ao.pdf */

 unchecked */

 unchecked */

 unchecked */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * adl_pci6208.c

 * Comedi driver for ADLink 6208 series cards

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: adl_pci6208

 * Description: ADLink PCI-6208/6216 Series Multi-channel Analog Output Cards

 * Devices: [ADLink] PCI-6208 (adl_pci6208), PCI-6216

 * Author: nsyeow <nsyeow@pd.jaring.my>

 * Updated: Wed, 11 Feb 2015 11:37:18 +0000

 * Status: untested

 *

 * Configuration Options: not applicable, uses PCI auto config

 *

 * All supported devices share the same PCI device ID and are treated as a

 * PCI-6216 with 16 analog output channels.  On a PCI-6208, the upper 8

 * channels exist in registers, but don't go to DAC chips.

/*

 * PCI-6208/6216-GL register map

 D/A transfer rate is 2.2us */

 the hardware expects two's complement values */

 analog output subdevice */

 Only 8 usable on PCI-6208 */

 digital input subdevice */

 digital output subdevice */

	/*

	 * Get the read back signals from the digital outputs

	 * and save it as the initial state for the subdevice.

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/adl_pci8164.c

 *

 * Hardware comedi driver for PCI-8164 Adlink card

 * Copyright (C) 2004 Michel Lachine <mike@mikelachaine.ca>

/*

 * Driver: adl_pci8164

 * Description: Driver for the Adlink PCI-8164 4 Axes Motion Control board

 * Devices: [ADLink] PCI-8164 (adl_pci8164)

 * Author: Michel Lachaine <mike@mikelachaine.ca>

 * Status: experimental

 * Updated: Mon, 14 Apr 2008 15:10:32 +0100

 *

 * Configuration Options: not applicable, uses PCI auto config

 read MSTS register / write CMD register for each axis (channel) */

 read SSTS register / write OTP register for each axis (channel) */

 read/write BUF0 register for each axis (channel) */

 read/write BUF1 register for each axis (channel) */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * addi_apci_1032.c

 * Copyright (C) 2004,2005  ADDI-DATA GmbH for the source code of this module.

 * Project manager: Eric Stolz

 *

 *	ADDI-DATA GmbH

 *	Dieselstrasse 3

 *	D-77833 Ottersweier

 *	Tel: +19(0)7223/9493-0

 *	Fax: +49(0)7223/9493-92

 *	http://www.addi-data.com

 *	info@addi-data.com

/*

 * Driver: addi_apci_1032

 * Description: ADDI-DATA APCI-1032 Digital Input Board

 * Author: ADDI-DATA GmbH <info@addi-data.com>,

 *   H Hartley Sweeten <hsweeten@visionengravers.com>

 * Status: untested

 * Devices: [ADDI-DATA] APCI-1032 (addi_apci_1032)

 *

 * Configuration options:

 *   None; devices are configured automatically.

 *

 * This driver models the APCI-1032 as a 32-channel, digital input subdevice

 * plus an additional digital input subdevice to handle change-of-state (COS)

 * interrupts (if an interrupt handler can be set up successfully).

 *

 * The COS subdevice supports comedi asynchronous read commands.

 *

 * Change-Of-State (COS) interrupt configuration:

 *

 * Channels 0 to 15 are interruptible. These channels can be configured

 * to generate interrupts based on AND/OR logic for the desired channels.

 *

 *   OR logic:

 *   - reacts to rising or falling edges

 *   - interrupt is generated when any enabled channel meets the desired

 *     interrupt condition

 *

 *   AND logic:

 *   - reacts to changes in level of the selected inputs

 *   - interrupt is generated when all enabled channels meet the desired

 *     interrupt condition

 *   - after an interrupt, a change in level must occur on the selected

 *     inputs to release the IRQ logic

 *

 * The COS subdevice must be configured before setting up a comedi

 * asynchronous command:

 *

 *   data[0] : INSN_CONFIG_DIGITAL_TRIG

 *   data[1] : trigger number (= 0)

 *   data[2] : configuration operation:

 *             - COMEDI_DIGITAL_TRIG_DISABLE = no interrupts

 *             - COMEDI_DIGITAL_TRIG_ENABLE_EDGES = OR (edge) interrupts

 *             - COMEDI_DIGITAL_TRIG_ENABLE_LEVELS = AND (level) interrupts

 *   data[3] : left-shift for data[4] and data[5]

 *   data[4] : rising-edge/high level channels

 *   data[5] : falling-edge/low level channels

/*

 * I/O Register Map

 base of AMCC I/O registers */

 rising-edge/high level channels */

 falling-edge/low level channels */

 interrupt mode OR (edge) . AND (level) */

 disable the interrupts */

 Reset the interrupt status register */

 Disable the and/or interrupt */

 switching to 'OR' mode */

 wipe old channels */

 preserve unspecified channels */

 configure specified channels */

 switching to 'AND' mode */

 wipe old channels */

 preserve unspecified channels */

 configure specified channels */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 Step 4: fix up any arguments */

 Step 5: check channel list if it exists */

/*

 * Change-Of-State (COS) 'do_cmd' operation

 *

 * Enable the COS interrupt as configured by apci1032_cos_insn_config().

 check interrupt is from this device */

 check interrupt is enabled */

 disable the interrupt */

 enable the interrupt */

  Allocate and Initialise DI Subdevice Structures */

 Change-Of-State (COS) interrupt subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0

/*

 * quatech_daqp_cs.c

 * Quatech DAQP PCMCIA data capture cards COMEDI client driver

 * Copyright (C) 2000, 2003 Brent Baccala <baccala@freesoft.org>

 * The DAQP interface code in this file is released into the public domain.

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1998 David A. Schleef <ds@schleef.org>

 * https://www.comedi.org/

 *

 * Documentation for the DAQP PCMCIA cards can be found on Quatech's site:

 *	ftp://ftp.quatech.com/Manuals/daqp-208.pdf

 *

 * This manual is for both the DAQP-208 and the DAQP-308.

 *

 * What works:

 * - A/D conversion

 *	- 8 channels

 *	- 4 gain ranges

 *	- ground ref or differential

 *	- single-shot and timed both supported

 * - D/A conversion, single-shot

 * - digital I/O

 *

 * What doesn't:

 * - any kind of triggering - external or D/A channel 1

 * - the card's optional expansion board

 * - the card's timer (for anything other than A/D conversion)

 * - D/A update modes other than immediate (i.e, timed)

 * - fancier timing modes

 * - setting card's FIFO buffer thresholds to anything but default

/*

 * Driver: quatech_daqp_cs

 * Description: Quatech DAQP PCMCIA data capture cards

 * Devices: [Quatech] DAQP-208 (daqp), DAQP-308

 * Author: Brent Baccala <baccala@freesoft.org>

 * Status: works

/*

 * Register I/O map

 *

 * The D/A and timer registers can be accessed with 16-bit or 8-bit I/O

 * instructions. All other registers can only use 8-bit instructions.

 *

 * The FIFO and scanlist registers require two 8-bit instructions to

 * access the 16-bit data. Data is transferred LSB then MSB.

 0=one-shot; 1=continuous */

 0=internal; 1=external */

 0=rising; 1=falling */

 these bits clear when the status register is read */

 the monostable bits are self-clearing after the function is complete */

 monostable */

 monostable */

 monostable */

 monostable */

 monostable */

 and 0x09 (16-bit) */

 and 0x0b (16-bit) */

 Auxiliary Control register bits (write) */

 Auxiliary Status register bits (read) */

 100 kHz in nanoseconds */

	/*

	 * Reset any pending interrupts (my card has a tendency to require

	 * multiple reads on the status register to achieve this).

	/*

	 * Stop any conversions, disable interrupts, and clear

	 * the status event flags.

	/*

	 * Get a two's complement sample from the FIFO and

	 * return the munged offset binary value.

 Reset scan list queue */

 Program one scan list entry */

 Reset data FIFO (see page 28 of DAQP User's Manual) */

 Set trigger - one-shot, internal, no interrupts */

 Start conversion */

 clear the status event flags */

 stop any conversions and clear the status event flags */

/* This function converts ns nanoseconds to a counter value suitable

 * for programming the device.  We always use the DAQP's 5 MHz clock,

 * which with its 24-bit counter, allows values up to 84 seconds.

 * Also, the function adjusts ns so that it cooresponds to the actual

 * time that the device will use.

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 the async command requires a pacer */

 Step 3: check if arguments are trivially valid */

			/*

			 * If both scan_begin and convert are both timer

			 * values, the only way that can make sense is if

			 * the scan time is the number of conversions times

			 * the convert time.

 TRIG_NONE */

 step 4: fix up any arguments */

 Reset scan list queue */

	/* Program pacer clock

	 *

	 * There's two modes we can operate in.  If convert_src is

	 * TRIG_TIMER, then convert_arg specifies the time between

	 * each conversion, so we program the pacer clock to that

	 * frequency and set the SCANLIST_START bit on every scanlist

	 * entry.  Otherwise, convert_src is TRIG_NOW, which means

	 * we want the fastest possible conversions, scan_begin_src

	 * is TRIG_TIMER, and scan_begin_arg specifies the time between

	 * each scan, so we program the pacer clock to this frequency

	 * and only set the SCANLIST_START bit on the first entry.

 Program scan list */

	/* Now it's time to program the FIFO threshold, basically the

	 * number of samples the card will buffer before it interrupts

	 * the CPU.

	 *

	 * If we don't have a stop count, then use half the size of

	 * the FIFO (the manufacturer's recommendation).  Consider

	 * that the FIFO can hold 2K samples (4K bytes).  With the

	 * threshold set at half the FIFO size, we have a margin of

	 * error of 1024 samples.  At the chip's maximum sample rate

	 * of 100,000 Hz, the CPU would have to delay interrupt

	 * service for a full 10 milliseconds in order to lose data

	 * here (as opposed to higher up in the kernel).  I've never

	 * seen it happen.  However, for slow sample rates it may

	 * buffer too much data and introduce too much delay for the

	 * user application.

	 *

	 * If we have a stop count, then things get more interesting.

	 * If the stop count is less than the FIFO size (actually

	 * three-quarters of the FIFO size - see below), we just use

	 * the stop count itself as the threshold, the card interrupts

	 * us when that many samples have been taken, and we kill the

	 * acquisition at that point and are done.  If the stop count

	 * is larger than that, then we divide it by 2 until it's less

	 * than three quarters of the FIFO size (we always leave the

	 * top quarter of the FIFO as protection against sluggish CPU

	 * interrupt response) and use that as the threshold.  So, if

	 * the stop count is 4000 samples, we divide by two twice to

	 * get 1000 samples, use that as the threshold, take four

	 * interrupts to get our 4000 samples and are done.

	 *

	 * The algorithm could be more clever.  For example, if 81000

	 * samples are requested, we could set the threshold to 1500

	 * samples and take 54 interrupts to get 81000.  But 54 isn't

	 * a power of two, so this algorithm won't find that option.

	 * Instead, it'll set the threshold at 1266 and take 64

	 * interrupts to get 81024 samples, of which the last 24 will

	 * be discarded... but we won't get the last interrupt until

	 * they've been collected.  To find the first option, the

	 * computer could look at the prime decomposition of the

	 * sample count (81000 = 3^4 * 5^3 * 2^3) and factor it into a

	 * threshold (1500 = 3 * 5^3 * 2^2) and an interrupt count (54

	 * = 3^3 * 2).  Hmmm... a one-line while loop or prime

	 * decomposition of integers... I'll leave it the way it is.

	 *

	 * I'll also note a mini-race condition before ignoring it in

	 * the code.  Let's say we're taking 4000 samples, as before.

	 * After 1000 samples, we get an interrupt.  But before that

	 * interrupt is completely serviced, another sample is taken

	 * and loaded into the FIFO.  Since the interrupt handler

	 * empties the FIFO before returning, it will read 1001 samples.

	 * If that happens four times, we'll end up taking 4004 samples,

	 * not 4000.  The interrupt handler will discard the extra four

	 * samples (by halting the acquisition with four samples still

	 * in the FIFO), but we will have to wait for them.

	 *

	 * In short, this code works pretty well, but for either of

	 * the two reasons noted, might end up waiting for a few more

	 * samples than actually requested.  Shouldn't make too much

	 * of a difference.

	/* Save away the number of conversions we should perform, and

	 * compute the FIFO threshold (in bytes, not samples - that's

	 * why we multiple devpriv->count by 2 = sizeof(sample))

 Reset data FIFO (see page 28 of DAQP User's Manual) */

	/* Set FIFO threshold.  First two bytes are near-empty

	 * threshold, which is unused; next two bytes are near-full

	 * threshold.  We computed the number of bytes we want in the

	 * FIFO when the interrupt is generated, what the card wants

	 * is actually the number of available bytes left in the FIFO

	 * when the interrupt is to happen.

 Set trigger - continuous, internal */

 Start conversion */

 Make sure D/A update mode is direct update */

 D/A transfer rate is about 8ms */

 write the two's complement value to the channel */

	/*

	 * Digital Input subdevice

	 * NOTE: The digital input lines are shared:

	 *

	 * Chan  Normal Mode        Expansion Mode

	 * ----  -----------------  ----------------------------

	 *  0    DI0, ext. trigger  Same as normal mode

	 *  1    DI1                External gain select, lo bit

	 *  2    DI2, ext. clock    Same as normal mode

	 *  3    DI3                External gain select, hi bit

	/*

	 * Digital Output subdevice

	 * NOTE: The digital output lines share the same pins on the

	 * interface connector as the four external channel selection

	 * bits. If expansion mode is used the digital outputs do not

	 * work.

 Mark the device as stopped, to block IO until later */

 SPDX-License-Identifier: GPL-2.0+

/*

 * gsc_hpdi.c

 * Comedi driver the General Standards Corporation

 * High Speed Parallel Digital Interface rs485 boards.

 *

 * Author:  Frank Mori Hess <fmhess@users.sourceforge.net>

 * Copyright (C) 2003 Coherent Imaging Systems

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1997-8 David A. Schleef <ds@schleef.org>

/*

 * Driver: gsc_hpdi

 * Description: General Standards Corporation High

 *    Speed Parallel Digital Interface rs485 boards

 * Author: Frank Mori Hess <fmhess@users.sourceforge.net>

 * Status: only receive mode works, transmit not supported

 * Updated: Thu, 01 Nov 2012 16:17:38 +0000

 * Devices: [General Standards Corporation] PCI-HPDI32 (gsc_hpdi),

 *   PMC-HPDI32

 *

 * Configuration options:

 *    None.

 *

 * Manual configuration of supported devices is not supported; they are

 * configured automatically.

 *

 * There are some additional hpdi models available from GSC for which

 * support could be added to this driver.

/*

 * PCI BAR2 Register map (dev->mmio)

 ch 0 only */

 20MHz master clock */

 dma buffers */

 physical addresses of dma buffers */

	/*

	 * array of dma descriptors read by plx9080, allocated to get proper

	 * alignment

 physical address of dma descriptor array */

 pointer to start of buffers indexed by descriptor */

 index of the dma descriptor that is currently being used */

 number of bytes at which to generate COMEDI_CB_BLOCK events */

 loop until we have read all the full buffers */

 transfer data from dma buffer to comedi buffer */

 XXX check for buffer overrun somehow */

 spin lock makes sure no one else changes plx dma control reg */

 dma chan 0 interrupt */

 spin lock makes sure no one else changes plx dma control reg */

 XXX */ 
 clear possible plx9080 interrupt sources */

 clear local doorbell interrupt */

 spinlock for plx dma control/status reg */

	/*

	 * These register are supposedly unused during chained dma,

	 * but I have found that left over values from last operation

	 * occasionally cause problems with transfer of first dma

	 * block.  Initializing them to zero seems to fix the problem.

 give location of first dma descriptor */

 enable dma transfer */

 clear over/under run status flags */

 enable interrupts */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_NONE */

 Step 4: fix up any arguments */

 Step 5: check channel list if it exists */

 setup dma descriptors so a link completes every 'len' bytes */

 fix last descriptor to point back to first */

 free pci dma buffers */

 free dma descriptors */

 wait 10usec after reset before accessing fifos */

 enable interrupts */

 configure dma0 mode */

 enable ready input */

 enable dma chaining */

	/*

	 * enable interrupt on dma done

	 * (probably don't need this, since chain never finishes)

	/*

	 * don't increment local address during transfers

	 * (we are transferring from a fixed fifo register)

 route dma interrupt to pci bus */

 enable demand mode */

 enable local burst mode */

 get irq */

 allocate pci dma buffers */

 allocate dma descriptors */

 Digital I/O subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi_8255.c

 * Generic 8255 digital I/O support

 *

 * Split from the Comedi "8255" driver module.

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1998 David A. Schleef <ds@schleef.org>

/*

 * Module: comedi_8255

 * Description: Generic 8255 support

 * Author: ds

 * Updated: Fri, 22 May 2015 12:14:17 +0000

 * Status: works

 *

 * This module is not used directly by end-users.  Rather, it is used by

 * other drivers to provide support for an 8255 "Programmable Peripheral

 * Interface" (PPI) chip.

 *

 * The classic in digital I/O.  The 8255 appears in Comedi as a single

 * digital I/O subdevice with 24 channels.  The channel 0 corresponds to

 * the 8255's port A, bit 0; channel 23 corresponds to port C, bit 7.

 * Direction configuration is done in blocks, with channels 0-7, 8-15,

 * 16-19, and 20-23 making up the 4 blocks.  The only 8255 mode

 * supported is mode 0.

 1 in io_bits indicates output, 1 in config indicates input */

/**

 * subdev_8255_init - initialize DIO subdevice for driving I/O mapped 8255

 * @dev: comedi device owning subdevice

 * @s: comedi subdevice to initialize

 * @io: (optional) register I/O call-back function

 * @regbase: offset of 8255 registers from dev->iobase, or call-back context

 *

 * Initializes a comedi subdevice as a DIO subdevice driving an 8255 chip.

 *

 * If the optional I/O call-back function is provided, its prototype is of

 * the following form:

 *

 *   int my_8255_callback(struct comedi_device *dev, int dir, int port,

 *                        int data, unsigned long regbase);

 *

 * where 'dev', and 'regbase' match the values passed to this function,

 * 'port' is the 8255 port number 0 to 3 (including the control port), 'dir'

 * is the direction (0 for read, 1 for write) and 'data' is the value to be

 * written.  It should return 0 if writing or the value read if reading.

 *

 * If the optional I/O call-back function is not provided, an internal

 * call-back function is used which uses consecutive I/O port addresses

 * starting at dev->iobase + regbase.

 *

 * Return: -ENOMEM if failed to allocate memory, zero on success.

/**

 * subdev_8255_mm_init - initialize DIO subdevice for driving mmio-mapped 8255

 * @dev: comedi device owning subdevice

 * @s: comedi subdevice to initialize

 * @io: (optional) register I/O call-back function

 * @regbase: offset of 8255 registers from dev->mmio, or call-back context

 *

 * Initializes a comedi subdevice as a DIO subdevice driving an 8255 chip.

 *

 * If the optional I/O call-back function is provided, its prototype is of

 * the following form:

 *

 *   int my_8255_callback(struct comedi_device *dev, int dir, int port,

 *                        int data, unsigned long regbase);

 *

 * where 'dev', and 'regbase' match the values passed to this function,

 * 'port' is the 8255 port number 0 to 3 (including the control port), 'dir'

 * is the direction (0 for read, 1 for write) and 'data' is the value to be

 * written.  It should return 0 if writing or the value read if reading.

 *

 * If the optional I/O call-back function is not provided, an internal

 * call-back function is used which uses consecutive MMIO virtual addresses

 * starting at dev->mmio + regbase.

 *

 * Return: -ENOMEM if failed to allocate memory, zero on success.

/**

 * subdev_8255_regbase - get offset of 8255 registers or call-back context

 * @s: comedi subdevice

 *

 * Returns the 'regbase' parameter that was previously passed to

 * subdev_8255_init() or subdev_8255_mm_init() to set up the subdevice.

 * Only valid if the subdevice was set up successfully.

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * adl_pci9111.c

 * Hardware driver for PCI9111 ADLink cards: PCI-9111HR

 * Copyright (C) 2002-2005 Emmanuel Pacaud <emmanuel.pacaud@univ-poitiers.fr>

/*

 * Driver: adl_pci9111

 * Description: Adlink PCI-9111HR

 * Devices: [ADLink] PCI-9111HR (adl_pci9111)

 * Author: Emmanuel Pacaud <emmanuel.pacaud@univ-poitiers.fr>

 * Status: experimental

 *

 * Configuration options: not applicable, uses PCI auto config

 *

 * Supports:

 * - ai_insn read

 * - ao_insn read/write

 * - di_insn read

 * - do_insn read/write

 * - ai_do_cmd mode with the following sources:

 *	- start_src		TRIG_NOW

 *	- scan_begin_src	TRIG_FOLLOW	TRIG_TIMER	TRIG_EXT

 *	- convert_src				TRIG_TIMER	TRIG_EXT

 *	- scan_end_src		TRIG_COUNT

 *	- stop_src		TRIG_COUNT	TRIG_NONE

 *

 * The scanned channels must be consecutive and start from 0. They must

 * all have the same range and aref.

/*

 * TODO:

 * - Really test implemented functionality.

 * - Add support for the PCI-9111DG with a probe routine to identify

 *   the card type (perhaps with the help of the channel number readback

 *   of the A/D Data register).

 * - Add external multiplexer support.

/*

 * IO address map and bit defines

 PLX 9052 Local Interrupt 1 enabled and active */

 PLX 9052 Local Interrupt 2 enabled and active */

 Read the current interrupt control bits */

 Shift the bits so they are compatible with the write register */

 Mask off the ISCx bits */

 Now set the new ISCx bits */

 To reset the FIFO, set FFEN sequence as 0 -> 1 -> 0 */

  Disable interrupts */

 disable A/D triggers (software trigger mode) and auto scan off */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_EXT */

 TRIG_FOLLOW || TRIG_EXT */

 TRIG_NONE */

 Step 4: fix up any arguments */

	/*

	 * There's only one timer on this card, so the scan_begin timer

	 * must be a multiple of chanlist_len*convert_arg

 Step 5: check channel list if it exists */

  Set channel scan limit */

  PCI9111 allows only scanning from channel 0 to channel n */

  TODO: handle the case of an external multiplexer */

  Set gain - all channels use the same range */

  Set timer pacer */

 TRIG_EXT */

  Ignore interrupt before device fully attached. */

  Might not even have allocated subdevices yet! */

  Check if we are source of interrupt */

  Not the source of the interrupt. */

  (N.B. not using PLX9052_INTCSR_SOFTINT) */

  Interrupt comes from fifo_half-full signal */

 '0' means FIFO is full, data may have been lost */

 '0' means FIFO is half-full */

 Generate a software trigger */

  Set trigger source to software */

 disable A/D triggers (software trigger mode) and auto scan off */

 { PCI_DEVICE(PCI_VENDOR_ID_ADLINK, PCI9111_HG_DEVICE_ID) }, */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/cb_pcimdas.c

 * Comedi driver for Computer Boards PCIM-DAS1602/16 and PCIe-DAS1602/16

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: cb_pcimdas

 * Description: Measurement Computing PCI Migration series boards

 * Devices: [ComputerBoards] PCIM-DAS1602/16 (cb_pcimdas), PCIe-DAS1602/16

 * Author: Richard Bytheway

 * Updated: Mon, 13 Oct 2014 11:57:39 +0000

 * Status: experimental

 *

 * Written to support the PCIM-DAS1602/16 and PCIe-DAS1602/16.

 *

 * Configuration Options:

 *   none

 *

 * Manual configuration of PCI(e) cards is not supported; they are configured

 * automatically.

 *

 * Developed from cb_pcidas and skel by Richard Bytheway (mocelet@sucs.org).

 * Only supports DIO, AO and simple AI in it's present form.

 * No interrupts, multi channel or FIFO AI,

 * although the card looks like it could support this.

 *

 * https://www.mccdaq.com/PDFs/Manuals/pcim-das1602-16.pdf

 * https://www.mccdaq.com/PDFs/Manuals/pcie-das1602-16.pdf

/*

 * PCI Bar 1 Register map

 * see plx9052.h for register and bit defines

/*

 * PCI Bar 2 Register map (devpriv->daqio)

/*

 * PCI Bar 3 Register map (devpriv->BADR3)

/*

 * PCI Bar 4 Register map (dev->iobase)

/*

 * The Analog Output range is not programmable. The DAC ranges are

 * jumper-settable on the board. The settings are not software-readable.

/*

 * this structure is for data unique to this hardware driver.  If

 * several hardware drivers keep similar information in this structure,

 * feel free to suggest moving the variable to the struct comedi_device

 * struct.

 base addresses */

  only support sw initiated reads from a single channel */

 configure for sw initiated read */

 set bursting off, conversions on */

 set range */

 set mux for single channel scan */

 convert n samples */

 trigger conversion */

 wait for conversion to end */

 read data */

 return the number of samples read/written */

 internal 100 kHz clock */

 external clk on pin 21 */

 The Pacer Clock jumper selects a 10 MHz or 1 MHz clock */

	/*

	 * The number of Analog Input channels is set with the

	 * Analog Input Mode Switch on the board. The board can

	 * have 16 single-ended or 8 differential channels.

	/*

	 * The Analog Input range polarity is set with the

	 * Analog Input Polarity Switch on the board. The

	 * inputs can be set to Unipolar or Bipolar ranges.

 Analog Input subdevice */

 Analog Output subdevice */

 Digital I/O subdevice */

 Digital Input subdevice (main connector) */

 Digital Output subdevice (main connector) */

 Counter subdevice (8254) */

 counters 1 and 2 are used internally for the pacer */

 PCIM-DAS1602/16 */

 PCIe-DAS1602/16 */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * cb_pcidas.c

 * Developed by Ivan Martinez and Frank Mori Hess, with valuable help from

 * David Schleef and the rest of the Comedi developers comunity.

 *

 * Copyright (C) 2001-2003 Ivan Martinez <imr@oersted.dtu.dk>

 * Copyright (C) 2001,2002 Frank Mori Hess <fmhess@users.sourceforge.net>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1997-8 David A. Schleef <ds@schleef.org>

/*

 * Driver: cb_pcidas

 * Description: MeasurementComputing PCI-DAS series

 *   with the AMCC S5933 PCI controller

 * Devices: [Measurement Computing] PCI-DAS1602/16 (cb_pcidas),

 *   PCI-DAS1602/16jr, PCI-DAS1602/12, PCI-DAS1200, PCI-DAS1200jr,

 *   PCI-DAS1000, PCI-DAS1001, PCI_DAS1002

 * Author: Ivan Martinez <imr@oersted.dtu.dk>,

 *   Frank Mori Hess <fmhess@users.sourceforge.net>

 * Updated: 2003-3-11

 *

 * Status:

 * There are many reports of the driver being used with most of the

 * supported cards. Despite no detailed log is maintained, it can

 * be said that the driver is quite tested and stable.

 *

 * The boards may be autocalibrated using the comedi_calibrate

 * utility.

 *

 * Configuration options: not applicable, uses PCI auto config

 *

 * For commands, the scanned channels must be consecutive

 * (i.e. 4-5-6-7, 2-3-4,...), and must all have the same

 * range and aref.

 *

 * AI Triggering:

 * For start_src == TRIG_EXT, the A/D EXTERNAL TRIGGER IN (pin 45) is used.

 * For 1602 series, the start_arg is interpreted as follows:

 *	start_arg == 0                   => gated trigger (level high)

 *	start_arg == CR_INVERT           => gated trigger (level low)

 *	start_arg == CR_EDGE             => Rising edge

 *	start_arg == CR_EDGE | CR_INVERT => Falling edge

 * For the other boards the trigger will be done on rising edge

/*

 * TODO:

 * analog triggering on 1602 series

 max ai fifo size */

 max ao fifo size */

/*

 * PCI BAR1 Register map (devpriv->pcibar1)

 INTERRUPT / ADC FIFO register */

 no int selected */

 int on end of scan */

 int on fifo half full */

 int on fifo not empty */

 mask of int select bits */

 int enable */

 dac half full int enable */

 end of acq. int enable */

 dac half full status / clear */

 end of acq. int status / clear */

 int status / clear */

 end of burst int status */

 half-full int status */

 fifo not empty int status (latch) */

 fifo not empty status (realtime) */

 dac empty int enable */

 fifo overflow / clear */

 dac fifo empty int status / clear */

 ADC CHANNEL MUX AND CONTROL reg */

 Inputs in single-ended mode */

 Analog front-end unipolar mode */

 software pacer */

 int. pacer */

 ext. falling edge */

 ext. rising edge */

 pacer source bits */

 adc not busy */

 TRIGGER CONTROL/STATUS register */

 no start trigger */

 software start trigger */

 ext. start trigger */

 ext. analog trigger */

 start trigger mask */

 invert trigger (1602 only) */

 edge/level triggered (1602 only) */

 enable external start trigger */

 burst mode enable */

 clear external trigger */

 CALIBRATION register */

 select 8800 caldac */

 select ad7376 trim pot */

 select dac08 caldac */

 calibration source enable */

 serial data bit going to caldac */

 dac control and status register */

 fifo empty, write clear (1602) */

 dac enable */

 start/arm fifo (1602) */

 (1602) */

 software pacer */

 int. pacer */

 ext. falling edge */

 ext. rising edge */

 pacer source bits */

 update both dacs */

/*

 * PCI BAR2 Register map (devpriv->pcibar2)

/*

 * PCI BAR3 Register map (dev->iobase)

/*

 * PCI BAR4 Register map (devpriv->pcibar4)

 analog input ranges for most boards */

 pci-das1001 input ranges */

 analog output ranges */

  fastest conversion period in ns */

  analog output scan speed for 1602 series */

  number of samples fifo can hold */

 ai/ao is 1=16-bit; 0=12-bit */

 use alternate ai range table */

 has 2 analog output channels */

 analog output has fifo */

 trimpot type 1=AD8402; 0=AD7376 */

 base addresses */

 pcibar0 */

 bits to write to registers */

 fifo buffers */

 enable calibration input if appropriate */

 set mux limits and gain */

 set unipolar/bipolar */

 set single-ended/differential */

 clear fifo */

 convert n samples */

 trigger conversion */

 wait for conversion to end */

 read data */

 return the number of samples read/written */

 analog output insn for pcidas-1000 and 1200 series */

 set channel and range */

 analog output insn for pcidas-1602 series */

 clear dac fifo */

 set channel and range */

 make sure eeprom is ready */

 set address (chan) and read operation */

 wait for data to be returned */

 select trimpot */

 write bitstream to calibration device */

 select caldac */

 latch value to trimpot/caldac */

 write 11-bit channel/value to caldac */

 latch the new value into the caldac */

 write 10-bit channel/value to AD8402 trimpot */

 write 7-bit value to AD7376 trimpot */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 External trigger, only CR_EDGE and CR_INVERT flags allowed */

 TRIG_NONE */

 step 4: fix up any arguments */

 Step 5: check channel list if it exists */

  make sure PCIDAS_CALIB_EN is disabled */

  initialize before settings pacer source and count values */

  clear fifo */

  set mux limits, gain and pacer source */

  set unipolar/bipolar */

  set singleended/differential */

  set pacer source */

  load counters */

  enable interrupts */

 interrupt end of burst */

 interrupt fifo not empty */

 interrupt fifo half full */

  enable (and clear) interrupts */

  set start trigger and burst mode */

 TRIG_EXT */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_NONE */

 step 4: fix up any arguments */

 Step 5: check channel list if it exists */

  disable interrupts */

  disable start trigger source and burst mode */

  enable dac half-full and empty interrupts */

  enable and clear interrupts */

  start dac */

  set channel limits, gain */

  enable channel */

  set range */

  disable analog out before settings pacer source and count values */

  clear fifo */

  load counters */

  set pacer source */

  disable interrupts */

  disable output */

 FIFO is half-full - read data */

 FIFO is not empty - read data until empty or timeoout */

  break if fifo is empty */

 check for fifo overflow */

  make sure mailbox 4 is empty */

  clear interrupt on amcc s5933 */

 handle analog output interrupts */

 handle analog input interrupts */

  disable and clear interrupts on amcc s5933 */

 Analog Input subdevice */

 Analog Output subdevice */

 8255 */

 Memory subdevice - serial EEPROM */

 Calibration subdevice - 8800 caldac */

 write 11-bit channel/value to caldac */

 Calibration subdevice - trim potentiometer */

		/*

		 * pci-das1602/16 have an AD8402 trimpot:

		 *   chan 0 : adc gain

		 *   chan 1 : adc postgain offset

 all other boards have an AD7376 trimpot */

 Calibration subdevice - pci-das1602/16 pregain offset (dac08) */

  make sure mailbox 4 is empty */

 Set bits to enable incoming mailbox interrupts on amcc s5933. */

  clear and enable interrupt on amcc s5933 */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * addi_apci_2200.c

 * Copyright (C) 2004,2005  ADDI-DATA GmbH for the source code of this module.

 * Project manager: Eric Stolz

 *

 *	ADDI-DATA GmbH

 *	Dieselstrasse 3

 *	D-77833 Ottersweier

 *	Tel: +19(0)7223/9493-0

 *	Fax: +49(0)7223/9493-92

 *	http://www.addi-data.com

 *	info@addi-data.com

/*

 * I/O Register Map

 Initialize the digital input subdevice */

 Initialize the digital output subdevice */

 Initialize the watchdog subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/s626.c

 * Sensoray s626 Comedi driver

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

 *

 * Based on Sensoray Model 626 Linux driver Version 0.2

 * Copyright (C) 2002-2004 Sensoray Co., Inc.

/*

 * Driver: s626

 * Description: Sensoray 626 driver

 * Devices: [Sensoray] 626 (s626)

 * Authors: Gianluca Palli <gpalli@deis.unibo.it>,

 * Updated: Fri, 15 Feb 2008 10:28:42 +0000

 * Status: experimental



 * Configuration options: not applicable, uses PCI auto config



 * INSN_CONFIG instructions:

 *   analog input:

 *    none

 *

 *   analog output:

 *    none

 *

 *   digital channel:

 *    s626 has 3 dio subdevices (2,3 and 4) each with 16 i/o channels

 *    supported configuration options:

 *    INSN_CONFIG_DIO_QUERY

 *    COMEDI_INPUT

 *    COMEDI_OUTPUT

 *

 *   encoder:

 *    Every channel must be configured before reading.

 *

 *   Example code

 *

 *    insn.insn=INSN_CONFIG;   //configuration instruction

 *    insn.n=1;                //number of operation (must be 1)

 *    insn.data=&initialvalue; //initial value loaded into encoder

 *                             //during configuration

 *    insn.subdev=5;           //encoder subdevice

 *    insn.chanspec=CR_PACK(encoder_channel,0,AREF_OTHER); //encoder_channel

 *                                                         //to configure

 *

 *    comedi_do_insn(cf,&insn); //executing configuration

/**

 * struct s626_private - Working data for s626 driver.

 * @ai_cmd_running: non-zero if ai_cmd is running.

 * @ai_sample_timer: time between samples in units of the timer.

 * @ai_convert_count: conversion counter.

 * @ai_convert_timer: time between conversion in units of the timer.

 * @counter_int_enabs: counter interrupt enable mask for MISC2 register.

 * @adc_items: number of items in ADC poll list.

 * @rps_buf: DMA buffer used to hold ADC (RPS1) program.

 * @ana_buf:  DMA buffer used to receive ADC data and hold DAC data.

 * @dac_wbuf: pointer to logical adrs of DMA buffer used to hold DAC data.

 * @dacpol: image of DAC polarity register.

 * @trim_setpoint: images of TrimDAC setpoints.

 * @i2c_adrs: I2C device address for onboard EEPROM (board rev dependent)

 Counter overflow/index event flag masks for RDMISC2. */

/*

 * Enable/disable a function or test status bit(s) that are accessed

 * through Main Control Registers 1 or 2.

 Write a time slot control record to TSL2. */

/*

 * Execute a DEBI transfer.  This must be called from within a critical section.

 Initiate upload of shadow RAM to DEBI control register */

	/*

	 * Wait for completion of upload from shadow RAM to

	 * DEBI control register.

 Wait until DEBI transfer is done */

/*

 * Read a value from a gate array register.

 Set up DEBI control register value in shadow RAM */

  Execute the DEBI transfer. */

/*

 * Write a value to a gate array register.

 Set up DEBI control register value in shadow RAM */

  Execute the DEBI transfer. */

/*

 * Replace the specified bits in a gate array register.  Imports: mask

 * specifies bits that are to be preserved, wdata is new value to be

 * or'd with the masked original.

 **************  EEPROM ACCESS FUNCTIONS  ************** */

 Write I2C command to I2C Transfer Control shadow register */

	/*

	 * Upload I2C shadow registers into working registers and

	 * wait for upload confirmation.

 Wait until I2C bus transfer is finished or an error occurs */

 Return non-zero if I2C error occurred */

 Read u8 from EEPROM. */

	/*

	 * Send EEPROM target address:

	 *  Byte2 = I2C command: write to I2C EEPROM device.

	 *  Byte1 = EEPROM internal target address.

	 *  Byte0 = Not sent.

 Abort function and declare error if handshake failed. */

	/*

	 * Execute EEPROM read:

	 *  Byte2 = I2C command: read from I2C EEPROM device.

	 *  Byte1 receives uint8_t from EEPROM.

	 *  Byte0 = Not sent.

 Abort function and declare error if handshake failed. */

 ***********  DAC FUNCTIONS *********** */

 TrimDac LogicalChan-to-PhysicalChan mapping table. */

 TrimDac LogicalChan-to-EepromAdrs mapping table. */

/*

 * Private helper function: Transmit serial data to DAC via Audio

 * channel 2.  Assumes: (1) TSL2 slot records initialized, and (2)

 * dacpol contains valid target image.

 START THE SERIAL CLOCK RUNNING ------------- */

	/*

	 * Assert DAC polarity control and enable gating of DAC serial clock

	 * and audio bit stream signals.  At this point in time we must be

	 * assured of being in time slot 0.  If we are not in slot 0, the

	 * serial clock and audio stream signals will be disabled; this is

	 * because the following s626_debi_write statement (which enables

	 * signals to be passed through the gate array) would execute before

	 * the trailing edge of WS1/WS3 (which turns off the signals), thus

	 * causing the signals to be inactive during the DAC write.

 TRANSFER OUTPUT DWORD VALUE INTO A2'S OUTPUT FIFO ---------------- */

 Copy DAC setpoint value to DAC's output DMA buffer. */

 writel(val, dev->mmio + (uint32_t)devpriv->dac_wbuf); */

	/*

	 * Enable the output DMA transfer. This will cause the DMAC to copy

	 * the DAC's data value to A2's output FIFO. The DMA transfer will

	 * then immediately terminate because the protection address is

	 * reached upon transfer of the first DWORD value.

 While the DMA transfer is executing ... */

	/*

	 * Reset Audio2 output FIFO's underflow flag (along with any

	 * other FIFO underflow/overflow flags). When set, this flag

	 * will indicate that we have emerged from slot 0.

	/*

	 * Wait for the DMA transfer to finish so that there will be data

	 * available in the FIFO when time slot 1 tries to transfer a DWORD

	 * from the FIFO to the output buffer register.  We test for DMA

	 * Done by polling the DMAC enable flag; this flag is automatically

	 * cleared when the transfer has finished.

 START THE OUTPUT STREAM TO THE TARGET DAC -------------------- */

	/*

	 * FIFO data is now available, so we enable execution of time slots

	 * 1 and higher by clearing the EOS flag in slot 0.  Note that SD3

	 * will be shifted in and stored in FB_BUFFER2 for end-of-slot-list

	 * detection.

	/*

	 * Wait for slot 1 to execute to ensure that the Packet will be

	 * transmitted.  This is detected by polling the Audio2 output FIFO

	 * underflow flag, which will be set when slot 1 execution has

	 * finished transferring the DAC's data DWORD from the output FIFO

	 * to the output buffer register.

	/*

	 * Set up to trap execution at slot 0 when the TSL sequencer cycles

	 * back to slot 0 after executing the EOS in slot 5.  Also,

	 * simultaneously shift out and in the 0x00 that is ALWAYS the value

	 * stored in the last byte to be shifted out of the FIFO's DWORD

	 * buffer register.

 WAIT FOR THE TRANSACTION TO FINISH ----------------------- */

	/*

	 * Wait for the TSL to finish executing all time slots before

	 * exiting this function.  We must do this so that the next DAC

	 * write doesn't start, thereby enabling clock/chip select signals:

	 *

	 * 1. Before the TSL sequence cycles back to slot 0, which disables

	 *    the clock/cs signal gating and traps slot // list execution.

	 *    we have not yet finished slot 5 then the clock/cs signals are

	 *    still gated and we have not finished transmitting the stream.

	 *

	 * 2. While slots 2-5 are executing due to a late slot 0 trap.  In

	 *    this case, the slot sequence is currently repeating, but with

	 *    clock/cs signals disabled.  We must wait for slot 0 to trap

	 *    execution before setting up the next DAC setpoint DMA transfer

	 *    and enabling the clock/cs signals.  To detect the end of slot 5,

	 *    we test for the FB_BUFFER2 MSB contents to be equal to 0xFF.  If

	 *    the TSL has not yet finished executing slot 5 ...

		/*

		 * The trap was set on time and we are still executing somewhere

		 * in slots 2-5, so we now wait for slot 0 to execute and trap

		 * TSL execution.  This is detected when FB_BUFFER2 MSB changes

		 * from 0xFF to 0x00, which slot 0 causes to happen by shifting

		 * out/in on SD2 the 0x00 that is always referenced by slot 5.

	/*

	 * Either (1) we were too late setting the slot 0 trap; the TSL

	 * sequencer restarted slot 0 before we could set the EOS trap flag,

	 * or (2) we were not late and execution is now trapped at slot 0.

	 * In either case, we must now change slot 0 so that it will store

	 * value 0xFF (instead of 0x00) to FB_BUFFER2 next time it executes.

	 * In order to do this, we reprogram slot 0 so that it will shift in

	 * SD3, which is driven only by a pull-up resistor.

	/*

	 * Wait for slot 0 to execute, at which time the TSL is setup for

	 * the next DAC write.  This is detected when FB_BUFFER2 MSB changes

	 * from 0x00 to 0xFF.

/*

 * Private helper function: Write setpoint to an application DAC channel.

	/*

	 * Adjust DAC data polarity and set up Polarity Control Register image.

 Limit DAC setpoint value to valid range. */

	/*

	 * Set up TSL2 records (aka "vectors") for DAC update.  Vectors V2

	 * and V3 transmit the setpoint to the target DAC.  V4 and V5 send

	 * data to a non-existent TrimDac channel just to keep the clock

	 * running after sending data to the target DAC.  This is necessary

	 * to eliminate the clock glitch that would otherwise occur at the

	 * end of the target DAC's serial data stream.  When the sequence

	 * restarts at V0 (after executing V5), the gate array automatically

	 * disables gating for the DAC clock and all DAC chip selects.

 Choose DAC chip select to be asserted */

 Slot 2: Transmit high data byte to target DAC */

 Slot 3: Transmit low data byte to target DAC */

 Slot 4: Transmit to non-existent TrimDac channel to keep clock */

 Slot 5: running after writing target DAC's low data byte */

	/*

	 * Construct and transmit target DAC's serial packet:

	 * (A10D DDDD), (DDDD DDDD), (0x0F), (0x00) where A is chan<0>,

	 * and D<12:0> is the DAC setpoint.  Append a WORD value (that writes

	 * to a  non-existent TrimDac channel) that serves to keep the clock

	 * running after the packet has been sent to the target DAC.

	val = 0x0F000000;	/* Continue clock after target DAC data

				 * (write to non-existent trimdac).

	val |= 0x00004000;	/* Address the two main dual-DAC devices

				 * (TSL's chip select enables target device).

	val |= ((u32)(chan & 1) << 15);	/* Address the DAC channel

					 * within the device.

 Include DAC setpoint data. */

	/*

	 * Save the new setpoint in case the application needs to read it back

	 * later.

 Map logical channel number to physical channel number. */

	/*

	 * Set up TSL2 records for TrimDac write operation.  All slots shift

	 * 0xFF in from pulled-up SD3 so that the end of the slot sequence

	 * can be detected.

 Slot 2: Send high uint8_t to target TrimDac */

 Slot 3: Send low uint8_t to target TrimDac */

 Slot 4: Send NOP high uint8_t to DAC0 to keep clock running */

 Slot 5: Send NOP low  uint8_t to DAC0 */

	/*

	 * Construct and transmit target DAC's serial packet:

	 * (0000 AAAA), (DDDD DDDD), (0x00), (0x00) where A<3:0> is the

	 * DAC channel's address, and D<7:0> is the DAC setpoint.  Append a

	 * WORD value (that writes a channel 0 NOP command to a non-existent

	 * main DAC channel) that serves to keep the clock running after the

	 * packet has been sent to the target DAC.

	/*

	 * Address the DAC channel within the trimdac device.

	 * Include DAC setpoint data.

 Copy TrimDac setpoint values from EEPROM to TrimDacs. */

 ******  COUNTER FUNCTIONS  ******* */

/*

 * All counter functions address a specific counter by means of the

 * "Counter" argument, which is a logical counter number.  The Counter

 * argument may have any of the following legal values: 0=0A, 1=1A,

 * 2=2A, 3=0B, 4=1B, 5=2B.

/*

 * Return/set a counter pair's latch trigger source.  0: On read

 * access, 1: A index latches A, 2: B index latches B, 3: A overflow

 * latches B.

/*

 * Write value into counter preload register.

 ******  PRIVATE COUNTER FUNCTIONS ****** */

/*

 * Reset a counter's index and overflow event capture flags.

/*

 * Set the operating mode for the specified counter.  The setup

 * parameter is treated as a COUNTER_SETUP data type.  The following

 * parameters are programmable (all other parms are ignored): ClkMult,

 * ClkPol, ClkEnab, IndexSrc, IndexPol, LoadSrc.

 Initialize CRA and CRB images. */

 Preload trigger is passed through. */

 IndexSrc is passed through. */

 Reset any pending CounterA event captures. */

 Clock enable is passed through. */

 Force IntSrc to Disabled if disable_int_src is asserted. */

 Populate all mode-dependent attributes of CRA & CRB images. */

 Extender Mode: */

 Force to Timer mode (Extender valid only for B counters). */

 Fall through to case S626_ENCMODE_TIMER: */

 Timer Mode: */

 CntSrcA<1> selects system clock */

 Count direction (CntSrcA<0>) obtained from ClkPol. */

 ClkPolA behaves as always-on clock enable. */

 ClkMult must be 1x. */

 Counter Mode: */

 Select ENC_C and ENC_D as clock/direction inputs. */

 Clock polarity is passed through. */

 Force multiplier to x1 if not legal, else pass through. */

	/*

	 * Force positive index polarity if IndxSrc is software-driven only,

	 * otherwise pass it through.

	/*

	 * If IntSrc has been forced to Disabled, update the MISC2 interrupt

	 * enable mask to indicate the counter interrupt is disabled.

	/*

	 * While retaining CounterB and LatchSrc configurations, program the

	 * new counter operating mode.

 Initialize CRA and CRB images. */

 IndexSrc is passed through. */

 Reset event captures and disable interrupts. */

 Clock enable is passed through. */

 Preload trigger source is passed through. */

 Force IntSrc to Disabled if disable_int_src is asserted. */

 Populate all mode-dependent attributes of CRA & CRB images. */

 Timer Mode: */

 CntSrcB<1> selects system clock */

 with direction (CntSrcB<0>) obtained from ClkPol. */

 ClkPolB behaves as always-on clock enable. */

 ClkMultB must be 1x. */

 Extender Mode: */

 CntSrcB source is OverflowA (same as "timer") */

 with direction obtained from ClkPol. */

 ClkPolB controls IndexB -- always set to active. */

 ClkMultB selects OverflowA as the clock source. */

 Counter Mode: */

 Select ENC_C and ENC_D as clock/direction inputs. */

 ClkPol is passed through. */

 Force ClkMult to x1 if not legal, otherwise pass through. */

	/*

	 * Force positive index polarity if IndxSrc is software-driven only,

	 * otherwise pass it through.

	/*

	 * If IntSrc has been forced to Disabled, update the MISC2 interrupt

	 * enable mask to indicate the counter interrupt is disabled.

	/*

	 * While retaining CounterA and LatchSrc configurations, program the

	 * new counter operating mode.

/*

 * Return/set a counter's enable.  enab: 0=always enabled, 1=enabled by index.

/*

 * Return/set the event that will trigger transfer of the preload

 * register into the counter.  0=ThisCntr_Index, 1=ThisCntr_Overflow,

 * 2=OverflowA (B counters only), 3=disabled.

/*

 * Return/set counter interrupt source and clear any captured

 * index/overflow events.  int_source: 0=Disabled, 1=OverflowOnly,

 * 2=IndexOnly, 3=IndexAndOverflow.

 Reset any pending counter overflow or index captures */

 Program counter interrupt source */

 Cache writeable CRB register image */

 Reset any pending counter overflow or index captures */

 Program counter interrupt source */

 Update MISC2 interrupt enable mask. */

/*

 * Generate an index pulse.

 Pulse index */

 Pulse index */

 set channel to capture positive edge */

 enable interrupt on selected channel */

 enable edge capture write command */

 enable edge capture on selected channel */

 disable edge capture write command */

 enable edge capture on selected channel */

 disable edge capture write command */

 clear all dio pending events and interrupt */

 check if interrupt is an ai acquisition start trigger */

 Start executing the RPS program */

 Trigger ADC scan loop start */

 Trigger ADC scan loop start */

 read interrupt type */

 check if interrupt is generated from dio channels */

 read interrupt type */

 check interrupt on counters */

 clear interrupt capture flag */

 clear interrupt capture flag */

 clear interrupt capture flag */

 clear interrupt capture flag */

 clear interrupt capture flag */

 Trigger ADC scan loop start */

 clear interrupt capture flag */

 Trigger ADC scan loop start */

	/*

	 * Init ptr to DMA buffer that holds new ADC data.  We skip the

	 * first uint16_t in the buffer because it contains junk data

	 * from the final ADC of the previous poll list scan.

 get the data and hand it over to comedi */

		/*

		 * Convert ADC data to 16-bit integer values and copy

		 * to application buffer.

 lock to avoid race with comedi_poll */

 save interrupt enable register state */

 read interrupt type */

 disable master interrupt */

 clear interrupt */

 end_of_scan occurs */

 check dio and counter interrupt */

 s626_dio_clear_irq(dev); */

 enable interrupt */

/*

 * This function builds the RPS program for hardware driven acquisition.

 Stop RPS program in case it is currently running */

 Set starting logical address to write RPS commands. */

 Initialize RPS instruction pointer */

 Construct RPS program in rps_buf DMA buffer */

 Wait for Start trigger. */

	/*

	 * SAA7146 BUG WORKAROUND Do a dummy DEBI Write.  This is necessary

	 * because the first RPS DEBI Write following a non-RPS DEBI write

	 * seems to always fail.  If we don't do this dummy write, the ADC

	 * gain might not be set to the value required for the first slot in

	 * the poll list; the ADC gain would instead remain unchanged from

	 * the previously programmed value.

 Write DEBI Write command and address to shadow RAM. */

 Write DEBI immediate data  to shadow RAM: */

 arbitrary immediate data  value. */

 Reset "shadow RAM  uploaded" flag. */

 Invoke shadow RAM upload. */

 Wait for shadow upload to finish. */

	/*

	 * Digitize all slots in the poll list. This is implemented as a

	 * for loop to limit the slot count to 16 in case the application

	 * forgot to set the S626_EOPL flag in the final slot.

		/*

		 * Convert application's poll list item to private board class

		 * format.  Each app poll list item is an uint8_t with form

		 * (EOPL,x,x,RANGE,CHAN<3:0>), where RANGE code indicates 0 =

		 * +-10V, 1 = +-5V, and EOPL = End of Poll List marker.

 Switch ADC analog gain. */

 Write DEBI command and address to shadow RAM. */

 Write DEBI immediate data to shadow RAM. */

 Reset "shadow RAM uploaded" flag. */

 Invoke shadow RAM upload. */

 Wait for shadow upload to finish. */

 Select ADC analog input channel. */

 Write DEBI command and address to shadow RAM. */

 Write DEBI immediate data to shadow RAM. */

 Reset "shadow RAM uploaded" flag. */

 Invoke shadow RAM upload. */

 Wait for shadow upload to finish. */

		/*

		 * Delay at least 10 microseconds for analog input settling.

		 * Instead of padding with NOPs, we use S626_RPS_JUMP

		 * instructions here; this allows us to produce a longer delay

		 * than is possible with NOPs because each S626_RPS_JUMP

		 * flushes the RPS' instruction prefetch pipeline.

 Repeat to implement time delay: */

 Jump to next RPS instruction. */

 Wait for Start trigger. */

 Start ADC by pulsing GPIO1. */

 Begin ADC Start pulse. */

 VERSION 2.03 CHANGE: STRETCH OUT ADC START PULSE. */

 End ADC Start pulse. */

		/*

		 * Wait for ADC to complete (GPIO2 is asserted high when ADC not

		 * busy) and for data from previous conversion to shift into FB

		 * BUFFER 1 register.

 Wait for ADC done. */

 Transfer ADC data from FB BUFFER 1 register to DMA buffer. */

		/*

		 * If this slot's EndOfPollList flag is set, all channels have

		 * now been processed.

 Adjust poll list item count. */

 Exit poll list processing loop. */

	/*

	 * VERSION 2.01 CHANGE: DELAY CHANGED FROM 250NS to 2US.  Allow the

	 * ADC to stabilize for 2 microseconds before starting the final

	 * (dummy) conversion.  This delay is necessary to allow sufficient

	 * time between last conversion finished and the start of the dummy

	 * conversion.  Without this delay, the last conversion's data value

	 * is sometimes set to the previous conversion's data value.

	/*

	 * Start a dummy conversion to cause the data from the last

	 * conversion of interest to be shifted in.

 Begin ADC Start pulse. */

 VERSION 2.03 CHANGE: STRETCH OUT ADC START PULSE. */

 End ADC Start pulse. */

	/*

	 * Wait for the data from the last conversion of interest to arrive

	 * in FB BUFFER 1 register.

 Wait for ADC done. */

 Transfer final ADC data from FB BUFFER 1 register to DMA buffer. */

 Indicate ADC scan loop is finished. */

 Signal ReadADC() that scan is done. */

 *rps++= S626_RPS_CLRSIGNAL | S626_RPS_SIGADC; */

 invoke interrupt */

 Restart RPS program at its beginning. */

 Branch to start of RPS program. */

 End of RPS program build */

	/*

	 * Convert application's ADC specification into form

	 *  appropriate for register programming.

 Switch ADC analog gain. */

 Set gain. */

 Select ADC analog input channel. */

 Select channel. */

 Delay 10 microseconds for analog input settling. */

 Start ADC by pulsing GPIO1 low */

 Assert ADC Start command */

 and stretch it out */

 Negate ADC Start command */

		/*

		 * Wait for ADC to complete (GPIO2 is asserted high when

		 * ADC not busy) and for data from previous conversion to

		 * shift into FB BUFFER 1 register.

 Wait for ADC done */

 Fetch ADC data */

		/*

		 * Allow the ADC to stabilize for 4 microseconds before

		 * starting the next (final) conversion.  This delay is

		 * necessary to allow sufficient time between last

		 * conversion finished and the start of the next

		 * conversion.  Without this delay, the last conversion's

		 * data value is sometimes set to the previous

		 * conversion's data value.

	/*

	 * Start a dummy conversion to cause the data from the

	 * previous conversion to be shifted in.

 Assert ADC Start command */

 and stretch it out */

 Negate ADC Start command */

 Wait for the data to arrive in FB BUFFER 1 register. */

 Wait for ADC done */

 Fetch ADC data from audio interface's input shift register. */

 Fetch ADC data */

 Start executing the RPS program */

/*

 * This function doesn't require a particular form, this is just what

 * happens to be used in some of the drivers.  It should convert ns

 * nanoseconds to a counter value suitable for programming the device.

 * Also, it should adjust ns so that it cooresponds to the actual time

 * that the device will use.

 2MHz internal clock */

 Preload upon index. */

 Disable hardware index. */

 Operating mode is Timer. */

 Count direction is Down. */

 Clock multiplier is 1x. */

 Enabled by index */

 uint16_t enab = S626_CLKENAB_ALWAYS; */

 Set the preload register */

	/*

	 * Software index pulse forces the preload register to load

	 * into the counter

 set reload on counter overflow */

 set interrupt on overflow */

 s626_set_enable(dev, chan, (uint16_t)(enab != 0)); */

 TO COMPLETE  */

 disable interrupt */

 clear interrupt request */

 clear any pending interrupt */

 s626_enc_clear_irq(dev); */

 reset ai_cmd_running flag */

		/*

		 * set a counter to generate adc trigger at scan_begin_arg

		 * interval

 load timer value and enable interrupt */

 set the digital line and interrupt for scan trigger */

		/*

		 * set a counter to generate adc trigger at convert_arg

		 * interval

 load timer value and enable interrupt */

 set the digital line and interrupt for convert trigger */

 Trigger ADC scan loop start */

 s626_mc_enable(dev, S626_MC2_ADC_RPS, S626_P_MC2); */

 Start executing the RPS program */

 configure DIO channel for acquisition trigger */

 enable interrupt */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 in nanoseconds */

 in nanoseconds */

		/*

		 * external trigger

		 * should be level/edge, hi/lo specification here

		 * should specify multiple external triggers

		 * err |= comedi_check_trigger_arg_max(&cmd->scan_begin_arg, 9);

		/*

		 * external trigger - see above

		 * err |= comedi_check_trigger_arg_max(&cmd->scan_begin_arg, 9);

 TRIG_NONE */

 step 4: fix up any arguments */

 Stop RPS program in case it is currently running */

 disable master interrupt */

 *************** DIGITAL I/O FUNCTIONS *************** */

/*

 * All DIO functions address a group of DIO channels by means of

 * "group" argument.  group may be 0, 1 or 2, which correspond to DIO

 * ports A, B and C, respectively.

 Prepare to treat writes to WRCapSel as capture disables. */

 For each group of sixteen channels ... */

 Disable all interrupts */

 Disable all event captures */

 Init all DIOs to default edge polarity */

 Program all outputs to inactive state */

/*

 * Now this function initializes the value of the counter (data[0])

 * and set the subdevice. To complete with trigger and interrupt

 * configuration.

 *

 * FIXME: data[0] is supposed to be an INSN_CONFIG_xxx constant indicating

 * what is being configured, but this function appears to be using data[0]

 * as a variable.

 Preload upon index. */

 Disable hardware index. */

 Operating mode is Counter. */

 Active high clock. */

 Clock multiplier is 1x. */

 Enabled by index */

 uint16_t disable_int_src = true; */

Counter initial value */

 (data==NULL) ? (Preloadvalue=0) : (Preloadvalue=data[0]); */

		/*

		 * Read the counter's output latch LSW/MSW.

		 * Latches on LSW read.

 Set the preload register */

	/*

	 * Software index pulse forces the preload register to load

	 * into the counter

 Preload upon index. */

 Disable hardware index. */

 Operating mode is counter. */

 Active high clock. */

 Clock multiplier is 1x. */

 Enabled by index */

	/*

	 * Disable all counter interrupts and clear any captured counter events.

 Enable DEBI and audio pins, enable I2C interface */

	/*

	 * Configure DEBI operating mode

	 *

	 *  Local bus is 16 bits wide

	 *  Declare DEBI transfer timeout interval

	 *  Set up byte lane steering

	 *  Intel-compatible local bus (DEBI never times out)

 Disable MMU paging */

 Init GPIO so that ADC Start* is negated */

 I2C device address for onboard eeprom (revb) */

	/*

	 * Issue an I2C ABORT command to halt any I2C

	 * operation in progress and reset BUSY flag.

	/*

	 * Per SAA7146 data sheet, write to STATUS

	 * reg twice to reset all  I2C error flags.

	/*

	 * Init audio interface functional attributes: set DAC/ADC

	 * serial clock rates, invert DAC serial clock so that

	 * DAC data setup times are satisfied, enable DAC serial

	 * clock out.

	/*

	 * Set up TSL1 slot list, which is used to control the

	 * accumulation of ADC data: S626_RSD1 = shift data in on SD1.

	 * S626_SIB_A1  = store data uint8_t at next available location

	 * in FB BUFFER1 register.

 Enable TSL1 slot list so that it executes all the time */

	/*

	 * Initialize RPS registers used for ADC

 Physical start of RPS program */

 RPS program performs no explicit mem writes */

 Disable RPS timeouts */

	/*

	 * SAA7146 BUG WORKAROUND

	 *

	 * Initialize SAA7146 ADC interface to a known state by

	 * invoking ADCs until FB BUFFER 1 register shows that it

	 * is correctly receiving ADC data. This is necessary

	 * because the SAA7146 ADC interface does not start up in

	 * a defined state after a PCI reset.

 Create a simple polling list for analog input channel 0 */

 Get initial ADC value */

		/*

		 * VERSION 2.01 CHANGE: TIMEOUT ADDED TO PREVENT HANGED

		 * EXECUTION.

		 *

		 * Invoke ADCs until the new ADC value differs from the initial

		 * value or a timeout occurs.  The timeout protects against the

		 * possibility that the driver is restarting and the ADC data is

		 * a fixed value resulting from the applied ADC analog input

		 * being unusually quiet or at the rail.

 SAA7146 BUG WORKAROUND */

	/*

	 * Initialize the DAC interface

	/*

	 * Init Audio2's output DMAC attributes:

	 *   burst length = 1 DWORD

	 *   threshold = 1 DWORD.

	/*

	 * Init Audio2's output DMA physical addresses.  The protection

	 * address is set to 1 DWORD past the base address so that a

	 * single DWORD will be transferred each time a DMA transfer is

	 * enabled.

	/*

	 * Cache Audio2's output DMA buffer logical address.  This is

	 * where DAC data is buffered for A2 output DMA transfers.

	/*

	 * Audio2's output channels does not use paging.  The

	 * protection violation handling bit is set so that the

	 * DMAC will automatically halt and its PCI address pointer

	 * will be reset when the protection address is reached.

	/*

	 * Initialize time slot list 2 (TSL2), which is used to control

	 * the clock generation for and serialization of data to be sent

	 * to the DAC devices.  Slot 0 is a NOP that is used to trap TSL

	 * execution; this permits other slots to be safely modified

	 * without first turning off the TSL sequencer (which is

	 * apparently impossible to do).  Also, SD3 (which is driven by a

	 * pull-up resistor) is shifted in and stored to the MSB of

	 * FB_BUFFER2 to be used as evidence that the slot sequence has

	 * not yet finished executing.

 Slot 0: Trap TSL execution, shift 0xFF into FB_BUFFER2 */

	/*

	 * Initialize slot 1, which is constant.  Slot 1 causes a

	 * DWORD to be transferred from audio channel 2's output FIFO

	 * to the FIFO's output buffer so that it can be serialized

	 * and sent to the DAC during subsequent slots.  All remaining

	 * slots are dynamically populated as required by the target

	 * DAC device.

 Slot 1: Fetch DWORD from Audio2's output FIFO */

 Start DAC's audio interface (TSL2) running */

	/*

	 * Init Trim DACs to calibrated values.  Do it twice because the

	 * SAA7146 audio channel does not always reset properly and

	 * sometimes causes the first few TrimDAC writes to malfunction.

	/*

	 * Manually init all gate array hardware in case this is a soft

	 * reset (we have no way of determining whether this is a warm

	 * or cold start).  This is necessary because the gate array will

	 * reset only in response to a PCI hard reset; there is no soft

	 * reset function.

	/*

	 * Init all DAC outputs to 0V and init all DAC setpoint and

	 * polarity images.

 Init counters */

	/*

	 * Without modifying the state of the Battery Backup enab, disable

	 * the watchdog timer, set DIO channels 0-5 to operate in the

	 * standard DIO (vs. counter overflow) mode, disable the battery

	 * charger, and reset the watchdog interval selector to zero.

 Initialize the digital I/O subsystem */

 disable master interrupt */

 soft reset */

 */

 analog input subdevice */

 analog output subdevice */

 digital I/O subdevice */

 DIO group 0 */

 digital I/O subdevice */

 DIO group 1 */

 digital I/O subdevice */

 DIO group 2 */

 encoder (counter) subdevice */

 stop ai_command */

 interrupt mask */

 Disable master interrupt */

 Clear board's IRQ status flag */

 Disable the watchdog timer and battery charger. */

 Close all interfaces on 7146 device */

/*

 * For devices with vendor:device id == 0x1131:0x7146 you must specify

 * also subvendor:subdevice ids, because otherwise it will conflict with

 * Philips SAA7146 media/dvb based cards.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Comedi driver for NI 670x devices

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1997-2001 David A. Schleef <ds@schleef.org>

/*

 * Driver: ni_670x

 * Description: National Instruments 670x

 * Author: Bart Joris <bjoris@advalvas.be>

 * Updated: Wed, 11 Dec 2002 18:25:35 -0800

 * Devices: [National Instruments] PCI-6703 (ni_670x), PCI-6704

 * Status: unknown

 *

 * Commands are not supported.

 *

 * Manuals:

 *   322110a.pdf	PCI/PXI-6704 User Manual

 *   322110b.pdf	PCI/PXI-6703/6704 User Manual

	/*

	 * Channel number mapping:

	 *

	 * NI 6703/ NI 6704 | NI 6704 Only

	 * -------------------------------

	 * vch(0)  :  0     | ich(16) :  1

	 * vch(1)  :  2     | ich(17) :  3

	 * ...              | ...

	 * vch(15) : 30     | ich(31) : 31

 First write in channel register which channel to use */

 write channel value */

 ripped from mite.h and mite_setup2() to avoid mite dependency */

 IO Device Window Base Size Register */

 window enable */

 ioremap the MITE registers (BAR 0) temporarily */

 set data window to main registers (BAR 1) */

 finished with MITE registers */

 analog output subdevice */

 digital i/o subdevice */

 Config of misc registers */

 Config of ao registers */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * das6402.c

 * Comedi driver for DAS6402 compatible boards

 * Copyright(c) 2014 H Hartley Sweeten <hsweeten@visionengravers.com>

 *

 * Rewrite of an experimental driver by:

 * Copyright (C) 1999 Oystein Svendsen <svendsen@pvv.org>

/*

 * Driver: das6402

 * Description: Keithley Metrabyte DAS6402 (& compatibles)

 * Devices: [Keithley Metrabyte] DAS6402-12 (das6402-12),

 *   DAS6402-16 (das6402-16)

 * Author: H Hartley Sweeten <hsweeten@visionengravers.com>

 * Updated: Fri, 14 Mar 2014 10:18:43 -0700

 * Status: unknown

 *

 * Configuration Options:

 *   [0] - I/O base address

 *   [1] - IRQ (optional, needed for async command support)

/*

 * Register I/O map

/*

 * Analog output ranges are programmable on the DAS6402/12.

 * For the DAS6402/16 the range bits have no function, the

 * DAC ranges are selected by switches on the board.

 load the mux for chanlist conversion */

 enable interrupt and pacer trigger */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_NONE */

 step 4: fix up any arguments */

 Step 5: check channel list if it exists */

 enable software conversion trigger */

 load the mux for single channel conversion */

 set the range for this channel */

	/*

	 * The DAS6402/16 has a jumper to select either individual

	 * update (UPDATE) or simultaneous updating (XFER) of both

	 * DAC's. In UPDATE mode, when the MSB is written, that DAC

	 * is updated. In XFER mode, after both DAC's are loaded,

	 * a read cycle of any DAC register will update both DAC's

	 * simultaneously.

	 *

	 * If you have XFER mode enabled a (*insn_read) will need

	 * to be performed in order to update the DAC's with the

	 * last value written.

			/*

			 * DAS6402/12 has the two 8-bit DAC registers, left

			 * justified (the 4 LSB bits are don't care). Data

			 * can be written as one word.

			/*

			 * DAS6402/16 uses both 8-bit DAC registers and needs

			 * to be written LSB then MSB.

	/*

	 * If XFER mode is enabled, reading any DAC register

	 * will update both DAC's simultaneously.

 enable "Enhanced" mode */

 enable 10MHz pacer clock */

 enable software conversion trigger */

 default ADC to single-ended unipolar 10V inputs */

 default mux for single channel conversion (channel 0) */

 set both DAC's for unipolar 5V output range */

 set both DAC's to 0V */

 set all digital outputs low */

 IRQs 2,3,5,6,7, 10,11,15 are valid for "enhanced" mode */

 Analog Input subdevice */

 Analog Output subdevice */

 Digital Input subdevice */

 Digital Input subdevice */

 SPDX-License-Identifier: GPL-2.0+

/*

 * adq12b.c

 * Driver for MicroAxial ADQ12-B data acquisition and control card

 * written by jeremy theler <thelerg@ib.cnea.gov.ar>

 *	instituto balseiro

 *	commission nacional de energia atomica

 *	universidad nacional de cuyo

 *	argentina

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: adq12b

 * Description: Driver for MicroAxial ADQ12-B data acquisition and control card

 * Devices: [MicroAxial] ADQ12-B (adq12b)

 * Author: jeremy theler <thelerg@ib.cnea.gov.ar>

 * Updated: Thu, 21 Feb 2008 02:56:27 -0300

 * Status: works

 *

 * Configuration options:

 *   [0] - I/O base address (set with hardware jumpers)

 *		address		jumper JADR

 *		0x300		1 (factory default)

 *		0x320		2

 *		0x340		3

 *		0x360		4

 *		0x380		5

 *		0x3A0		6

 *   [1] - Analog Input unipolar/bipolar selection

 *		selection	option	JUB

 *		bipolar		0	2-3 (factory default)

 *		unipolar	1	1-2

 *   [2] - Analog Input single-ended/differential selection

 *		selection	option	JCHA	JCHB

 *		single-ended	0	1-2	1-2 (factory default)

 *		differential	1	2-3	2-3

 *

 * Driver for the acquisition card ADQ12-B (without any add-on).

 *

 * - Analog input is subdevice 0 (16 channels single-ended or 8 differential)

 * - Digital input is subdevice 1 (5 channels)

 * - Digital output is subdevice 1 (8 channels)

 * - The PACER is not supported in this version

 address scheme (page 2.17 of the manual) */

 enable pacer interrupt */

 enable pacer */

 timer 2 output state */

 pacer output state */

 A/D end-of-conversion */

 available ranges through the PGA gains */

 change channel and range only if it is different from the previous */

 wait for the mux to settle */

 trigger A/D */

 retriggers A/D */

 only bits 0-4 have information about digital inputs */

 force ctreg update */

 Analog Input subdevice */

 Digital Input subdevice */

 Digital Output subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * Support for NI general purpose counters

 *

 * Copyright (C) 2006 Frank Mori Hess <fmhess@users.sourceforge.net>

/*

 * Module: ni_tio

 * Description: National Instruments general purpose counters

 * Author: J.P. Mellor <jpmellor@rose-hulman.edu>,

 *         Herman.Bruyninckx@mech.kuleuven.ac.be,

 *         Wim.Meeussen@mech.kuleuven.ac.be,

 *         Klaas.Gadeyne@mech.kuleuven.ac.be,

 *         Frank Mori Hess <fmhess@users.sourceforge.net>

 * Updated: Thu Nov 16 09:50:32 EST 2006

 * Status: works

 *

 * This module is not used directly by end-users.  Rather, it

 * is used by other drivers (for example ni_660x and ni_pcimio)

 * to provide support for NI's general purpose counters.  It was

 * originally based on the counter code from ni_660x.c and

 * ni_mio_common.c.

 *

 * References:

 * DAQ 660x Register-Level Programmer Manual  (NI 370505A-01)

 * DAQ 6601/6602 User Manual (NI 322137B-01)

 * 340934b.pdf  DAQ-STC reference manual

 *

 * TODO: Support use of both banks X and Y

/*

 * clock sources for ni e and m series boards,

 * get bits with GI_SRC_SEL()

 20MHz */

 100KHz */

 Gi_Src_SubSelect=0 */

 Gi_Src_SubSelect=1 */

 80MHz, Gi_Src_SubSelect=0 */

 Gi_Src_SubSelect=1 */

/*

 * clock sources for ni_660x boards,

 * get bits with GI_SRC_SEL()

 20MHz */

 100KHz */

 80MHz */

 ni m series gate_select */

 ni_660x gate select */

 ni_660x second gate select */

/**

 * ni_tio_write() - Write a TIO register using the driver provided callback.

 * @counter: struct ni_gpct counter.

 * @value: the value to write

 * @reg: the register to write.

/**

 * ni_tio_read() - Read a TIO register using the driver provided callback.

 * @counter: struct ni_gpct counter.

 * @reg: the register to read.

		/*

		 * clock period is specified by user with prescaling

		 * already taken into account.

/**

 * ni_tio_set_bits() - Safely write a counter register.

 * @counter: struct ni_gpct counter.

 * @reg: the register to write.

 * @mask: the bits to change.

 * @value: the new bits value.

 *

 * Used to write to, and update the software copy, a register whose bits may

 * be twiddled in interrupt context, or whose software copy may be read in

 * interrupt context.

/**

 * ni_tio_get_soft_copy() - Safely read the software copy of a counter register.

 * @counter: struct ni_gpct counter.

 * @reg: the register to read.

 *

 * Used to get the software copy of a register whose bits might be modified

 * in interrupt context, or whose software copy might need to be read in

 * interrupt context.

 only m series and 660x variants have counting mode registers */

	/*

	 * It's not clear what we should do if clock_period is unknown, so we

	 * are not using the alt sync bit in that case.

 these bits map directly on to the mode register */

 only m series and 660x have counting mode registers */

			/*

			 * for m series and 660x, pass-through the least

			 * significant bits so we can figure out what select

			 * later

 Gi_Source_Subselect is zero */

 Gi_Source_Subselect is one */

 Gi_Source_Subselect doesn't matter */

 ps to ns */

 Set the mode bits for gate. */

		/*

		 * Allowing bitwise comparison here to allow non-zero raw

		 * register value to be used for channel when disabling.

/*

 * Set the mode bits for gate2.

 *

 * Previously, the code this function represents did not actually write anything

 * to the register.  Rather, writing to this register was reserved for the code

 * ni ni_tio_set_gate2_raw.

	/*

	 * The GI_GATE2_MODE bit was previously set in the code that also sets

	 * the gate2 source.

	 * We'll set mode bits _after_ source bits now, and thus, this function

	 * will effectively enable the second gate after all bits are set.

		/*

		 * Allowing bitwise comparison here to allow non-zero raw

		 * register value to be used for channel when disabling.

	/*

	 * FIXME: We don't know what the m-series second gate codes are,

	 * so we'll just pass the bits through for now.

 1.  start by disabling gate */

 2.  set the requested gate source */

 3.  reenable & set mode to starts things back up */

 1.  start by disabling gate */

 2.  set the requested gate source */

 3.  reenable & set mode to starts things back up */

	/*

	 * mask off disable flag.  This high bit still passes CR_CHAN.

	 * Doing this allows one to both set the gate as disabled, but also

	 * change the route value of the gate.

 1.  start by disabling gate */

 2.  set the requested gate source */

 3.  reenable & set mode to starts things back up */

 1.  start by disabling gate */

 2.  set the requested gate source */

 3.  reenable & set mode to starts things back up */

 allow for new device-global names */

 Disable gate */

 A,B,Z only valid for m-series */

 allow for new device-global names */

	/*

	 * FIXME: the second gate sources for the m series are undocumented,

	 * so we just return the raw bits for now.

/*

 * Retrieves the register value of the current source of the output selector for

 * the given destination.

 *

 * If the terminal for the destination is not already configured as an output,

 * this function returns -EINVAL as error.

 *

 * Return: the register value of the destination output selector;

 *         -EINVAL if terminal is not configured for output.

 we need to know the actual counter below... */

	/*

	 * This case is not possible through this interface.  A user must use

	 * INSN_CONFIG_SET_CLOCK_SRC instead.

	 * } else if (dest >= NI_CtrSource(0) && dest <= NI_CtrSource(-1)) {

	 *	ret = ni_tio_set_clock_src(counter, &reg, &period_ns);

/**

 * ni_tio_set_routing() - Sets the register value of the selector MUX for the given destination.

 * @counter_dev: Pointer to general counter device.

 * @dest:        Device-global identifier of route destination.

 * @reg:

 *		The first several bits of this value should store the desired

 *		value to write to the register.  All other bits are for

 *		transmitting information that modify the mode of the particular

 *		destination/gate.  These mode bits might include a bitwise or of

 *		CR_INVERT and CR_EDGE.  Note that the calling function should

 *		have already validated the correctness of this value.

 we need to know the actual counter below... */

	/*

	 * This case is not possible through this interface.  A user must use

	 * INSN_CONFIG_SET_CLOCK_SRC instead.

	 * } else if (dest >= NI_CtrSource(0) && dest <= NI_CtrSource(-1)) {

	 *	ret = ni_tio_set_clock_src(counter, reg, period_ns);

/*

 * Sets the given destination MUX to its default value or disable it.

 *

 * Return: 0 if successful; -EINVAL if terminal is unknown.

 Disable gate (via mode bits) and set to default 0-value */

	/*

	 * This case is not possible through this interface.  A user must use

	 * INSN_CONFIG_SET_CLOCK_SRC instead.

	 * if (dest >= NI_CtrSource(0) && dest <= NI_CtrSource(-1))

	 *	return ni_tio_set_clock_src(counter, reg, period_ns);

	/*

	 * The count doesn't get latched until the next clock edge, so it is

	 * possible the count may change (once) while we are reading. Since

	 * the read of the SW_Save_Reg isn't atomic (apparently even when it's

	 * a 32 bit register according to 660x docs), we need to read twice

	 * and make sure the reading hasn't changed. If it has, a third read

	 * will be correct since the count value will definitely have latched

	 * by then.

		/*

		 * Unsafe if counter is armed.

		 * Should probably check status and return -EBUSY if armed.

		/*

		 * Don't disturb load source select, just use whichever

		 * load register is already selected.

 restore load reg */

 initialize counter registers */

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi_bond.c

 * A Comedi driver to 'bond' or merge multiple drivers and devices as one.

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

 * Copyright (C) 2005 Calin A. Culianu <calin@ajvar.org>

/*

 * Driver: comedi_bond

 * Description: A driver to 'bond' (merge) multiple subdevices from multiple

 * devices together as one.

 * Devices:

 * Author: ds

 * Updated: Mon, 10 Oct 00:18:25 -0500

 * Status: works

 *

 * This driver allows you to 'bond' (merge) multiple comedi subdevices

 * (coming from possibly difference boards and/or drivers) together.  For

 * example, if you had a board with 2 different DIO subdevices, and

 * another with 1 DIO subdevice, you could 'bond' them with this driver

 * so that they look like one big fat DIO subdevice.  This makes writing

 * applications slightly easier as you don't have to worry about managing

 * different subdevices in the application -- you just worry about

 * indexing one linear array of channel id's.

 *

 * Right now only DIO subdevices are supported as that's the personal itch

 * I am scratching with this driver.  If you want to add support for AI and AO

 * subdevs, go right on ahead and do so!

 *

 * Commands aren't supported -- although it would be cool if they were.

 *

 * Configuration Options:

 *   List of comedi-minors to bond.  All subdevices of the same type

 *   within each minor will be concatenated together in the order given here.

 do a maximum of 32 channels, starting from base_chan. */

 base channel falls within bonded device */

			/*

			 * Get num channels to do for bonded device and set

			 * up mask and data bits for bonded device.

 Read/Write the new digital lines. */

 Place read bits into data[1]. */

			/*

			 * Set up for following bonded device (if still have

			 * channels to read/write).

 Skip bonded devices before base channel. */

	/*

	 * Locate bonded subdevice and adjust channel.

	/*

	 * The input or output configuration of each digital line is

	 * configured by a special insn_config instruction.  chanspec

	 * contains the channel to be changed, and data[0] contains the

	 * configuration instruction INSN_CONFIG_DIO_OUTPUT,

	 * INSN_CONFIG_DIO_INPUT or INSN_CONFIG_DIO_QUERY.

	 *

	 * Note that INSN_CONFIG_DIO_OUTPUT == COMEDI_OUTPUT,

	 * and INSN_CONFIG_DIO_INPUT == COMEDI_INPUT.  This is deliberate ;)

	/*

	 * Loop through all comedi devices specified on the command-line,

	 * building our device list.

 Do DIO, as that's all we support now.. */

			/*

			 * Now put bdev pointer at end of devpriv->devs array

			 * list..

 ergh.. ugly.. we need to realloc :(  */

 Append dev:subdev to devpriv->name */

	/*

	 * Setup our bonding from config params.. sets up our private struct..

 SPDX-License-Identifier: GPL-2.0+

/*

 * ssv_dnp.c

 * generic comedi driver for SSV Embedded Systems' DIL/Net-PCs

 * Copyright (C) 2001 Robert Schwebel <robert@schwebel.de>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: ssv_dnp

 * Description: SSV Embedded Systems DIL/Net-PC

 * Author: Robert Schwebel <robert@schwebel.de>

 * Devices: [SSV Embedded Systems] DIL/Net-PC 1486 (dnp-1486)

 * Status: unknown

 include files ----------------------------------------------------------- */

 Some global definitions: the registers of the DNP ----------------------- */

                                                                           */

 For port A and B the mode register has bits corresponding to the output   */

 pins, where Bit-N = 0 -> input, Bit-N = 1 -> output. Note that bits       */

 4 to 7 correspond to pin 0..3 for port C data register. Ensure that bits  */

 0..3 remain unchanged! For details about Port C Mode Register see         */

 the remarks in dnp_insn_config() below.                                   */

 Chip Setup and Control Index Register     */

 Chip Setup and Control Data Register      */

 Port A Mode Register                      */

 Port A Data Register                      */

 Port B Mode Register                      */

 Port B Data Register                      */

 Port C Mode Register                      */

 Port C Data Register                      */

	/*

	 * Ports A and B are straight forward: each bit corresponds to an

	 * output pin with the same order. Port C is different: bits 0...3

	 * correspond to bits 4...7 of the output register (PCDR).

 Port A */

 Port B */

 Port C */

		/*

		 * We have to pay attention with port C.

		 * This is the meaning of PCMR:

		 *   Bit in PCMR:              7 6 5 4 3 2 1 0

		 *   Corresponding port C pin: d 3 d 2 d 1 d 0   d= don't touch

		 *

		 * Multiplication by 2 brings bits into correct position

		 * for PCMR!

	/*

	 * We use I/O ports 0x22, 0x23 and 0xa3-0xa9, which are always

	 * allocated for the primary 8259, so we don't need to allocate

	 * them ourselves.

 digital i/o subdevice                                             */

 configure all ports as input (default)                            */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0

/*

 * ii_pci20kc.c

 * Driver for Intelligent Instruments PCI-20001C carrier board and modules.

 *

 * Copyright (C) 2000 Markus Kempf <kempf@matsci.uni-sb.de>

 * with suggestions from David Schleef		16.06.2000

/*

 * Driver: ii_pci20kc

 * Description: Intelligent Instruments PCI-20001C carrier board

 * Devices: [Intelligent Instrumentation] PCI-20001C (ii_pci20kc)

 * Author: Markus Kempf <kempf@matsci.uni-sb.de>

 * Status: works

 *

 * Supports the PCI-20001C-1a and PCI-20001C-2a carrier boards. The

 * -2a version has 32 on-board DIO channels. Three add-on modules

 * can be added to the carrier board for additional functionality.

 *

 * Supported add-on modules:

 *	PCI-20006M-1   1 channel, 16-bit analog output module

 *	PCI-20006M-2   2 channel, 16-bit analog output module

 *	PCI-20341M-1A  4 channel, 16-bit analog input module

 *

 * Options:

 *   0   Board base address

 *   1   IRQ (not-used)

/*

 * Register I/O map

 no on-board DIO */

 on-board DIO */

 1 AO channels */

 2 AO channels */

 4 AI channels */

 the AO range is set by jumpers on the 20006M module */

 Chan 0 - W1/W3 in   Chan 1 - W2/W4 in  */

 Chan 0 - W1/W3 out  Chan 1 - W2/W4 in  */

 Chan 0 - W1/W3 in   Chan 1 - W2/W4 out */

 gain 1 */

 gain 10 */

 gain 100 */

 gain 200 */

 munge the offset binary data to 2's complement */

 initialize module */

 software conversion */

 set the time base for the settling time counter based on the gain */

 set the settling time counter based on the gain */

 set number of input channels */

 set the channel list byte */

 reset settling time counter and trigger delay counter */

 reset channel scanner */

 generate a software start convert signal */

 munge the 2's complement data to offset binary */

 port 0 - channels 0-7 */

 output port */

 input port */

 port 1 - channels 8-15 */

 output port */

 input port */

 port 2 - channels 16-23 */

 output port */

 input port */

 port 3 - channels 24-31 */

 output port */

 input port */

 order is important */

 Analog Output subdevice */

 Analog Input subdevice */

 actually, a memory address */

 Digital I/O subdevice */

 default all channels to input */

 actually, a memory address */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * COMEDI ISA DMA support functions

 * Copyright (c) 2014 H Hartley Sweeten <hsweeten@visionengravers.com>

/**

 * comedi_isadma_program - program and enable an ISA DMA transfer

 * @desc:	the ISA DMA cookie to program and enable

/**

 * comedi_isadma_disable - disable the ISA DMA channel

 * @dma_chan:	the DMA channel to disable

 *

 * Returns the residue (remaining bytes) left in the DMA transfer.

/**

 * comedi_isadma_disable_on_sample - disable the ISA DMA channel

 * @dma_chan:	the DMA channel to disable

 * @size:	the sample size (in bytes)

 *

 * Returns the residue (remaining bytes) left in the DMA transfer.

 residue is a partial sample, enable DMA to allow more data */

 is DMA stalled? */

/**

 * comedi_isadma_poll - poll the current DMA transfer

 * @dma:	the ISA DMA to poll

 *

 * Returns the position (in bytes) of the current DMA transfer.

	/*

	 * Read the counter again and choose higher value in order to

	 * avoid reading during counter lower byte roll over if the

	 * isa_dma_bridge_buggy is set.

/**

 * comedi_isadma_set_mode - set the ISA DMA transfer direction

 * @desc:	the ISA DMA cookie to set

 * @dma_dir:	the DMA direction

/**

 * comedi_isadma_alloc - allocate and initialize the ISA DMA

 * @dev:	comedi_device struct

 * @n_desc:	the number of cookies to allocate

 * @dma_chan1:	DMA channel for the first cookie

 * @dma_chan2:	DMA channel for the second cookie

 * @maxsize:	the size of the buffer to allocate for each cookie

 * @dma_dir:	the DMA direction

 *

 * Returns the allocated and initialized ISA DMA or NULL if anything fails.

 Fall back to using the "class" device. */

 Need 24-bit mask for ISA DMA. */

/**

 * comedi_isadma_free - free the ISA DMA

 * @dma:	the ISA DMA to free

 SPDX-License-Identifier: GPL-2.0+

/*

 * Comedi driver for National Instruments PCMCIA DAQ-Card DIO-24

 * Copyright (C) 2002 Daniel Vecino Castel <dvecino@able.es>

 *

 * PCMCIA crap at end of file is adapted from dummy_cs.c 1.31

 * 2001/08/24 12:13:13 from the pcmcia package.

 * The initial developer of the pcmcia dummy_cs.c code is David A. Hinds

 * <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds

 * are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.

/*

 * Driver: ni_daq_dio24

 * Description: National Instruments PCMCIA DAQ-Card DIO-24

 * Author: Daniel Vecino Castel <dvecino@able.es>

 * Devices: [National Instruments] PCMCIA DAQ-Card DIO-24 (ni_daq_dio24)

 * Status: ?

 * Updated: Thu, 07 Nov 2002 21:53:06 -0800

 *

 * This is just a wrapper around the 8255.o driver to properly handle

 * the PCMCIA interface.

 8255 dio */

 daqcard-dio24 */

 SPDX-License-Identifier: GPL-2.0+

/*

 * s526.c

 * Sensoray s526 Comedi driver

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: s526

 * Description: Sensoray 526 driver

 * Devices: [Sensoray] 526 (s526)

 * Author: Richie

 *	   Everett Wang <everett.wang@everteq.com>

 * Updated: Thu, 14 Sep. 2006

 * Status: experimental

 *

 * Encoder works

 * Analog input works

 * Analog output works

 * PWM output works

 * Commands are not supported yet.

 *

 * Configuration Options:

 *   [0] - I/O port base address

/*

 * Register I/O map

 irq on DIO3 neg/pos edge */

 irq on DIO2 neg/pos edge */

 irq on DIO1 neg/pos edge */

 irq on DIO0 neg/pos edge */

 irq on DIO[4-7] neg/pos edge */

 status only */

 these 3 bits can be OR'ed */

 if count direction control set to quadrature */

 if count direction control set to software control */

 if count direction control set to software control */

 Control/Status - R = readable, W = writeable, C = write 1 to clear */

 RC */

 these 4 bits can be OR'ed */

 R */

 R */

 W */

 these 4 bits can be OR'ed */

 W */

 these 3 bits can be OR'ed */

 W */

 W */

 W */

 write high word then low word */

 read the low word then high word */

	/*

	 * Check what type of Counter the user requested

	 * data[0] contains the Application type

		/*

		 * data[0]: Application Type

		 * data[1]: Counter Mode Register Value

		 * data[2]: Pre-load Register Value

		 * data[3]: Conter Control Register

  Set Counter Mode Register */

  Reset the counter if it is software preload */

  Reset the counter */

			/*

			 * Load the counter from PR0

			 * outw(S526_GPCT_CTRL_CT_LOAD,

			 *      dev->iobase + S526_GPCT_CTRL_REG(chan));

  data[1] contains GPCT_X1, GPCT_X2 or GPCT_X4 */

  When to take into account the indexpulse: */

		/*

		 * if (data[2] == GPCT_IndexPhaseLowLow) {

		 * } else if (data[2] == GPCT_IndexPhaseLowHigh) {

		 * } else if (data[2] == GPCT_IndexPhaseHighLow) {

		 * } else if (data[2] == GPCT_IndexPhaseHighHigh) {

		 * }

  Take into account the index pulse? */

  Auto load with INDEX^ */

  Set Counter Mode Register */

  Load the pre-load register */

  Write the Counter Control Register */

  Reset the counter if it is software preload */

  Reset the counter */

  Load the counter from PR0 */

		/*

		 * data[0]: Application Type

		 * data[1]: Counter Mode Register Value

		 * data[2]: Pre-load Register 0 Value

		 * data[3]: Pre-load Register 1 Value

		 * data[4]: Conter Control Register

  Set Counter Mode Register */

 Select PR0 */

 Load the pre-load register 0 */

  Set Counter Mode Register */

 Select PR1 */

 Load the pre-load register 1 */

  Write the Counter Control Register */

		/*

		 * data[0]: Application Type

		 * data[1]: Counter Mode Register Value

		 * data[2]: Pre-load Register 0 Value

		 * data[3]: Pre-load Register 1 Value

		 * data[4]: Conter Control Register

  Set Counter Mode Register */

 Select PR0 */

 Load the pre-load register 0 */

  Set Counter Mode Register */

 Select PR1 */

 Load the pre-load register 1 */

  Write the Counter Control Register */

 Is this required? */

  Check what Application of Counter this channel is configured for */

		/*

		 * data[0] contains the PULSE_WIDTH

		 * data[1] contains the PULSE_PERIOD

		 * @pre PULSE_PERIOD > PULSE_WIDTH > 0

		 * The above periods must be expressed as a multiple of the

		 * pulse frequency on the selected source

 to write the PULSE_WIDTH */

 we got our eoc event, clear it */

		/*

		 * The multiplexor needs to change, enable the 15us

		 * delay for the first sample.

 trigger conversion */

 wait for conversion to end */

 wait for conversion to end */

	/*

	 * Digital I/O can be configured as inputs or outputs in

	 * groups of 4; DIO group 1 (DIO0-3) and DIO group 2 (DIO4-7).

 General-Purpose Counter/Timer (GPCT) */

	/*

	 * Analog Input subdevice

	 * channels 0 to 7 are the regular differential inputs

	 * channel 8 is "reference 0" (+10V)

	 * channel 9 is "reference 1" (0V)

 Analog Output subdevice */

 Digital I/O subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/rtd520.c

 * Comedi driver for Real Time Devices (RTD) PCI4520/DM7520

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2001 David A. Schleef <ds@schleef.org>

/*

 * Driver: rtd520

 * Description: Real Time Devices PCI4520/DM7520

 * Devices: [Real Time Devices] DM7520HR-1 (DM7520), DM7520HR-8,

 *   PCI4520 (PCI4520), PCI4520-8

 * Author: Dan Christian

 * Status: Works. Only tested on DM7520-8. Not SMP safe.

 *

 * Configuration options: not applicable, uses PCI auto config

/*

 * Created by Dan Christian, NASA Ames Research Center.

 *

 * The PCI4520 is a PCI card. The DM7520 is a PC/104-plus card.

 * Both have:

 *   8/16 12 bit ADC with FIFO and channel gain table

 *   8 bits high speed digital out (for external MUX) (or 8 in or 8 out)

 *   8 bits high speed digital in with FIFO and interrupt on change (or 8 IO)

 *   2 12 bit DACs with FIFOs

 *   2 bits output

 *   2 bits input

 *   bus mastering DMA

 *   timers: ADC sample, pacer, burst, about, delay, DA1, DA2

 *   sample counter

 *   3 user timer/counters (8254)

 *   external interrupt

 *

 * The DM7520 has slightly fewer features (fewer gain steps).

 *

 * These boards can support external multiplexors and multi-board

 * synchronization, but this driver doesn't support that.

 *

 * Board docs: http://www.rtdusa.com/PC104/DM/analog%20IO/dm7520.htm

 * Data sheet: http://www.rtdusa.com/pdf/dm7520.pdf

 * Example source: http://www.rtdusa.com/examples/dm/dm7520.zip

 * Call them and ask for the register level manual.

 * PCI chip: http://www.plxtech.com/products/io/pci9080

 *

 * Notes:

 * This board is memory mapped. There is some IO stuff, but it isn't needed.

 *

 * I use a pretty loose naming style within the driver (rtd_blah).

 * All externally visible names should be rtd520_blah.

 * I use camelCase for structures (and inside them).

 * I may also use upper CamelCase for function names (old habit).

 *

 * This board is somewhat related to the RTD PCI4400 board.

 *

 * I borrowed heavily from the ni_mio_common, ni_atmio16d, mite, and

 * das1800, since they have the best documented code. Driver cb_pcidas64.c

 * uses the same DMA controller.

 *

 * As far as I can tell, the About interrupt doesn't work if Sample is

 * also enabled. It turns out that About really isn't needed, since

 * we always count down samples read.

/*

 * driver status:

 *

 * Analog-In supports instruction and command mode.

 *

 * With DMA, you can sample at 1.15Mhz with 70% idle on a 400Mhz K6-2

 * (single channel, 64K read buffer). I get random system lockups when

 * using DMA with ALI-15xx based systems. I haven't been able to test

 * any other chipsets. The lockups happen soon after the start of an

 * acquistion, not in the middle of a long run.

 *

 * Without DMA, you can do 620Khz sampling with 20% idle on a 400Mhz K6-2

 * (with a 256K read buffer).

 *

 * Digital-IO and Analog-Out only support instruction mode.

/*

 * Local Address Space 0 Offsets

 User I/O */

 FIFO Status/Software A/D Start */

 DAC1 FIFO not empty */

 DAC1 FIFO half empty */

 DAC1 FIFO not full */

 DAC2 FIFO not empty */

 DAC2 FIFO half empty */

 DAC2 FIFO not full */

 ADC FIFO not empty */

 ADC FIFO half empty */

 ADC FIFO not full */

 DIN FIFO not empty */

 DIN FIFO half empty */

 DIN FIFO not full */

 D/Ax Update (w) */

 Software Simultaneous Update (w) */

 Software Pacer Start/Stop */

 Timer Status/HDIN Software Trig. */

 Interrupt Status/Enable */

 ADC FIFO Write */

 Reset CGT */

 Pause CGT */

 About Counter out */

 Delay Counter out */

 ADC Sample Counter */

 DAC1 Update Counter */

 DAC2 Update Counter */

 User TC1 out */

 User TC1 out, inverted */

 User TC2 out */

 Digital Interrupt */

 External Interrupt */

 Ext Trigger rising-edge */

 Ext Trigger falling-edge */

 Clear/Set Interrupt Clear Mask */

 Pending interrupts/Clear Overrun */

 Pacer Clock (24bit) */

 Burst Clock (10bit) */

 A/D Sample counter (10bit) */

 D/A1 Update counter (10 bit) */

 D/A2 Update counter (10 bit) */

 Delay counter (16 bit) */

 About counter (16 bit) */

 DAC clock (16bit) */

 8254 timer/counter base */

 Digital I/O Port 0 */

 Digital I/O Port 1 */

 Digital I/O Control */

 Digital I/O Status */

 Board reset */

 DMA 0 Sources select */

 DMA 1 Sources select */

 A/D Conversion Signal select */

 Burst Clock Start Trigger select */

 Pacer Clock Start Trigger select */

 Pacer Clock Stop Trigger select */

 About Counter Stop Enable */

 Pacer Start Trigger Mode select */

 HiSpd DI Sampling Signal select */

 Digital Input FIFO Clear */

 A/D FIFO Clear */

 Channel Gain Table Write */

 Channel Gain Latch Write */

 Digital Table Write */

 Channel Gain Table Enable */

 Digital Table Enable */

 Table Pause Enable */

 Reset Channel Gain Table */

 Clear Channel Gain Table */

 D/Ax type/range */

 D/Ax update source */

 D/Ax cycle mode */

 D/Ax FIFO reset */

 D/Ax FIFO clear */

 A/D Sample Counter Source select */

 Pacer Clock select */

 SyncBus 0 Source select */

 SyncBus 0 enable */

 SyncBus 1 Source select */

 SyncBus 1 enable */

 SyncBus 2 Source select */

 SyncBus 2 enable */

 Ext. Trigger polarity select */

 Ext. Interrupt polarity select */

 8254 clock select */

 8254 gate select */

 User Output 0 source select */

 User Output 1 source select */

 DMA0 Request state machine reset */

 DMA1 Request state machine reset */

/*

 * Local Address Space 1 Offsets

 A/D FIFO (16bit) */

 HiSpd DI FIFO (16bit) */

 D/Ax FIFO (16bit) */

/*

 * Driver specific stuff (tunable)

/*

 * We really only need 2 buffers.  More than that means being much

 * smarter about knowing which ones are full.

 max DMA segments/buffers in a ring (min 2) */

 Target period for periodic transfers.  This sets the user read latency. */

 Note: There are certain rates where we give this up and transfer 1/2 FIFO */

 If this is too low, efficiency is poor */

 10 ms (in nanoseconds) */

 Set a practical limit on how long a list to support (affects memory use) */

 The board support a channel list up to the FIFO length (1K or 8K) */

 max channel list that we allow */

/*

 * Board specific stuff

 8Mhz onboard clock */

 clock period in ns */

 Note: these speed are slower than the spec, but fit the counter resolution*/

 when sampling, in nanoseconds */

 max speed if we don't have to wait for settling */

 if single channel, in nanoseconds */

 (24bit counter) in nanoseconds */

 min speed when only 1 channel (no burst counter) */

 200Hz, in nanoseconds */

 Setup continuous ring of 1/2 FIFO transfers.  See RTD manual p91 */

 descriptors in PCI memory*/  PLX_DESC_IN_PCI_BIT \

 interrupt at end of block */ | PLX_INTR_TERM_COUNT \

 from board to PCI */		| PLX_XFER_LOCAL_TO_PCI)

/*

 * Comedi specific stuff

/*

 * The board has 3 input modes and the gains of 1,2,4,...32 (, 64, 128)

 +-5V input range gain steps */

 +-10V input range gain steps */

 +10V input range gain steps */

 PCI4520 has two more gains (6 more entries) */

 +-5V input range gain steps */

 +-10V input range gain steps */

 +10V input range gain steps */

 Table order matches range values */

 start of +-10V range */

 start of +10V range */

 memory mapped board structures */

 total transfer size (samples) */

 # to transfer data. 0->1/2FIFO */

 flag event modes */

 8254 Timer/Counter gate and clock sources */

 bit defines for "flags" */

 send End Of Scan events */

 DMA0 is active */

 DMA1 is active */

/*

 * Given a desired period and the clock period (both in ns), return the

 * proper counter value (divider-1). Sets the original period to be the

 * true value.

 * Note: you have to check if the value is larger than the counter range!

 min is divide by 2 */

	/*

	 * Note: we don't check for max, because different timers

	 * have different ranges

 countdown is divisor+1 */

/*

 * Given a desired period (in ns), return the proper counter value

 * (divider-1) for the internal clock. Sets the original period to

 * be the true value.

 Convert a single comedi channel-gain entry to a RTD520 table entry */

 Note: we also setup the channel list bipolar flag array */

 +-5 range */

 +-10 range */

 +10 range */

 on-board ground */

 ref external analog common */

 differential inputs */

 ??? */

 Setup the channel-gain table from a comedi list */

 setup channel gain table */

 just use the channel gain latch */

/*

 * Determine fifo size by doing adc conversions until the fifo half

 * empty status flag clears.

 ADC conversion trigger source: SOFTWARE */

 convert  samples */

 trigger conversion */

 clear any old fifo data */

 write channel to multiplexer and clear channel gain table */

 ADC conversion trigger source: SOFTWARE */

 convert n samples */

 trigger conversion */

 read data */

 low 3 bits are marker lines */

 convert bipolar data to comedi unsigned data */

 return the number of samples read/written */

 done */

 low 3 bits are marker lines */

 convert bipolar data to comedi unsigned data */

 < 0, means read forever */

 check for FIFO full, this automatically halts the ADC! */

 0 -> full */

 if interrupt was not caused by our board, or handled above */

 sample count -> read FIFO */

		/*

		 * since the priority interrupt controller may have queued

		 * a sample counter interrupt, even though we have already

		 * finished, we must handle the possibility that there is

		 * no data here

 FIFO half full */

 FIFO not empty */

 clear the interrupt */

 clear the interrupt */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 Note: these are time periods, not actual rates */

 no scanning */

 external trigger */

 should be level/edge, hi/lo specification here */

 should specify multiple external triggers */

 no scanning */

 external trigger */

 see above */

 TRIG_NONE */

 step 4: fix up any arguments */

 stop anything currently running */

 pacer stop source: SOFTWARE */

 stop pacer */

 start configuration */

 load channel list and reset CGT */

 setup the common case and override if needed */

 pacer start source: SOFTWARE */

 burst trigger source: PACER */

 ADC conversion trigger source: BURST */

 single channel */

 pacer start source: SOFTWARE */

 ADC conversion trigger source: PACER */

 scan_begin_arg is in nanoseconds */

 find out how many samples to wait before transferring */

			/*

			 * this may generate un-sustainable interrupt rates

			 * the application is responsible for doing the

			 * right thing

 arrange to transfer data periodically */

 transfer after each scan (and avoid 0) */

 make a multiple of scan length */

 out of counter range, use 1/2 fifo instead */

 interrupt for each transfer */

 unknown timing, just use 1/2 FIFO */

 pacer clock source: INTERNAL 8MHz */

 just interrupt, don't stop */

 BUG??? these look like enumerated values, but they are bit fields */

 First, setup when to stop */

 stop after N scans */

 stop when cancel is called */

 read forever */

 Scan timing */

 periodic scanning */

 set PACER clock */

 pacer start source: EXTERNAL */

 Sample timing within a scan */

 periodic */

 only needed for multi-channel */

 setup BURST clock */

 external */

 burst trigger source: EXTERNAL */

 end configuration */

	/*

	 * This doesn't seem to work.  There is no way to clear an interrupt

	 * that the priority controller has queued!

 TODO: allow multiple interrupt sources */

 transfer every N samples */

 BUG: start_src is ASSUMED to be TRIG_NOW */

 BUG? it seems like things are running before the "start" */

 start pacer */

 pacer stop source: SOFTWARE */

 stop pacer */

 stop and don't transfer any more */

 Configure the output range (table index matches the range values) */

 bipolar uses 2's complement values with an extended sign */

 shift the 12-bit data (+ sign) to match the register */

 TODO support digital match interrupts and strobes */

 set direction */

 clear interrupts */

 port1 can only be all input or all output */

 there are also 2 user input lines and 2 user output lines */

		/*

		 * 8254 Timer/Counter gate sources:

		 *

		 * 0 = Not gated, free running (reset state)

		 * 1 = Gated, off

		 * 2 = Ext. TC Gate 1

		 * 3 = Ext. TC Gate 2

		 * 4 = Previous TC out (chan 1 and 2 only)

		/*

		 * 8254 Timer/Counter clock sources:

		 *

		 * 0 = 8 MHz (reset state)

		 * 1 = Ext. TC Clock 1

		 * 2 = Ext. TX Clock 2

		 * 3 = Ext. Pacer Clock

		 * 4 = Previous TC out (chan 1 and 2 only)

		 * 5 = High-Speed Digital Input Sampling signal (chan 1 only)

 needed? */

/*

 * initialize board, per RTD spec

 * also, initialize shadow registers

 clear digital IO fifo */

 TODO: set user out source ??? */

 The RTD driver does this */

 analog input subdevice */

 analog output subdevice */

 digital i/o subdevice */

 we only support port 0 right now.  Ignoring port 1 and user IO */

 8254 Timer/Counter subdevice */

 Shut down any board ops by resetting it */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/amplc_pci224.c

 * Driver for Amplicon PCI224 and PCI234 AO boards.

 *

 * Copyright (C) 2005 MEV Ltd. <https://www.mev.co.uk/>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1998,2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: amplc_pci224

 * Description: Amplicon PCI224, PCI234

 * Author: Ian Abbott <abbotti@mev.co.uk>

 * Devices: [Amplicon] PCI224 (amplc_pci224), PCI234

 * Updated: Thu, 31 Jul 2014 11:08:03 +0000

 * Status: works, but see caveats

 *

 * Supports:

 *

 *   - ao_insn read/write

 *   - ao_do_cmd mode with the following sources:

 *

 *     - start_src         TRIG_INT        TRIG_EXT

 *     - scan_begin_src    TRIG_TIMER      TRIG_EXT

 *     - convert_src       TRIG_NOW

 *     - scan_end_src      TRIG_COUNT

 *     - stop_src          TRIG_COUNT      TRIG_EXT        TRIG_NONE

 *

 *     The channel list must contain at least one channel with no repeated

 *     channels.  The scan end count must equal the number of channels in

 *     the channel list.

 *

 *     There is only one external trigger source so only one of start_src,

 *     scan_begin_src or stop_src may use TRIG_EXT.

 *

 * Configuration options:

 *   none

 *

 * Manual configuration of PCI cards is not supported; they are configured

 * automatically.

 *

 * Output range selection - PCI224:

 *

 *   Output ranges on PCI224 are partly software-selectable and partly

 *   hardware-selectable according to jumper LK1.  All channels are set

 *   to the same range:

 *

 *   - LK1 position 1-2 (factory default) corresponds to the following

 *     comedi ranges:

 *

 *       0: [-10V,+10V]; 1: [-5V,+5V]; 2: [-2.5V,+2.5V], 3: [-1.25V,+1.25V],

 *       4: [0,+10V],    5: [0,+5V],   6: [0,+2.5V],     7: [0,+1.25V]

 *

 *   - LK1 position 2-3 corresponds to the following Comedi ranges, using

 *     an external voltage reference:

 *

 *       0: [-Vext,+Vext],

 *       1: [0,+Vext]

 *

 * Output range selection - PCI234:

 *

 *   Output ranges on PCI234 are hardware-selectable according to jumper

 *   LK1 which affects all channels, and jumpers LK2, LK3, LK4 and LK5

 *   which affect channels 0, 1, 2 and 3 individually.  LK1 chooses between

 *   an internal 5V reference and an external voltage reference (Vext).

 *   LK2/3/4/5 choose (per channel) to double the reference or not according

 *   to the following table:

 *

 *     LK1 position   LK2/3/4/5 pos  Comedi range

 *     -------------  -------------  --------------

 *     2-3 (factory)  1-2 (factory)  0: [-10V,+10V]

 *     2-3 (factory)  2-3            1: [-5V,+5V]

 *     1-2            1-2 (factory)  2: [-2*Vext,+2*Vext]

 *     1-2            2-3            3: [-Vext,+Vext]

 *

 * Caveats:

 *

 *   1) All channels on the PCI224 share the same range.  Any change to the

 *      range as a result of insn_write or a streaming command will affect

 *      the output voltages of all channels, including those not specified

 *      by the instruction or command.

 *

 *   2) For the analog output command,  the first scan may be triggered

 *      falsely at the start of acquisition.  This occurs when the DAC scan

 *      trigger source is switched from 'none' to 'timer' (scan_begin_src =

 *      TRIG_TIMER) or 'external' (scan_begin_src == TRIG_EXT) at the start

 *      of acquisition and the trigger source is at logic level 1 at the

 *      time of the switch.  This is very likely for TRIG_TIMER.  For

 *      TRIG_EXT, it depends on the state of the external line and whether

 *      the CR_INVERT flag has been set.  The remaining scans are triggered

 *      correctly.

/*

 * PCI224/234 i/o space 1 (PCIBAR2) registers.

 82C54 counter/timer */

 Group Z Clock Configuration Register */

 Group Z Gate Configuration Register */

 ISR Interrupt source mask register */

 /Interrupt status */

/*

 * PCI224/234 i/o space 2 (PCIBAR3) 16-bit registers.

 (w-o) DAC FIFO data. */

 (r-o) DAC software scan trigger. */

 (r/w) DAC status/configuration. */

 (w-o) FIFO size for wraparound mode. */

 (w-o) DAC channel enable register. */

/*

 * DACCON values.

 (r/w) Scan trigger. */

 none */

 soft trig */

 ext + edge */

 ext - edge */

 Z2 CT0 out */

 Z2 CT1 out */

 Z2 CT2 out */

 (r/w) Polarity (PCI224 only, PCI234 always bipolar!). */

 [0,+V] */

 [-V,+V] */

 (r/w) Internal Vref (PCI224 only, when LK1 in position 1-2). */

 1.25V */

 2.5V */

 5V */

 10V */

 (r/w) Wraparound mode enable (to play back stored waveform). */

 (r/w) FIFO enable.  It MUST be set! */

 (r/w) FIFO interrupt trigger level (most values are not very useful). */

 empty */

 !empty */

 !half */

 half */

 !full */

 full */

 (r-o) FIFO fill level. */

 0 */

 1-2048 */

 2049-4095 */

 4096 */

 (r-o) DAC busy flag. */

 (w-o) FIFO reset. */

 (w-o) Global reset (not sure what it does). */

/*

 * DAC FIFO size.

/*

 * DAC FIFO guaranteed minimum room available, depending on reported fill level.

 * The maximum room available depends on the reported fill level and how much

 * has been written!

/*

 * Counter/timer clock input configuration sources.

 reserved (channel-specific clock) */

 internal 10 MHz clock */

 internal 1 MHz clock */

 internal 100 kHz clock */

 internal 10 kHz clock */

 internal 1 kHz clock */

 output of channel-1 modulo total */

 external clock */

/*

 * Counter/timer gate input configuration sources.

 VCC (i.e. enabled) */

 GND (i.e. disabled) */

 reserved (external gate input) */

 inverted output of channel-2 modulo total */

/*

 * Summary of CLK_OUTNM1 and GAT_NOUTNM2 connections for PCI224 and PCI234:

 *

 *              Channel's       Channel's

 *              clock input     gate input

 * Channel      CLK_OUTNM1      GAT_NOUTNM2

 * -------      ----------      -----------

 * Z2-CT0       Z2-CT2-OUT      /Z2-CT1-OUT

 * Z2-CT1       Z2-CT0-OUT      /Z2-CT2-OUT

 * Z2-CT2       Z2-CT1-OUT      /Z2-CT0-OUT

/*

 * Interrupt enable/status bits

 rising edge on external input */

 DAC (FIFO) interrupt */

 rising edge on Z2-CT1 output */

/*

 * Handy macros.

 Combine old and new bits. */

 Current CPU.  XXX should this be hard_smp_processor_id()? */

 State bits for use with atomic bit operations. */

/*

 * Range tables.

/*

 * The ranges for PCI224.

 *

 * These are partly hardware-selectable by jumper LK1 and partly

 * software-selectable.

 *

 * All channels share the same hardware range.

 jumper LK1 in position 1-2 (factory default) */

 jumper LK1 in position 2-3 */

 bipolar [-Vext,+Vext] */

 unipolar [0,+Vext] */

 jumper LK1 in position 1-2 (factory default) */

 jumper LK1 in position 2-3 */

 Used to check all channels set to the same range on PCI224. */

/*

 * The ranges for PCI234.

 *

 * These are all hardware-selectable by jumper LK1 affecting all channels,

 * and jumpers LK2, LK3, LK4 and LK5 affecting channels 0, 1, 2 and 3

 * individually.

 LK1: 1-2 (fact def), LK2/3/4/5: 2-3 (fac def) */

 LK1: 1-2 (fact def), LK2/3/4/5: 1-2 */

 LK1: 2-3, LK2/3/4/5: 2-3 (fac def) */

 bipolar [-2*Vext,+2*Vext] */

 LK1: 2-3, LK2/3/4/5: 1-2 */

 bipolar [-Vext,+Vext] */

 N.B. PCI234 ignores the polarity bit, but software uses it. */

 Used to check all channels use same LK1 setting on PCI234. */

/*

 * Board descriptions.

 spinlock for AO command handling */

 max 16 channels so 'short' will do */

/*

 * Called from the 'insn_write' function to perform a single write.

 Enable the channel. */

 Set range and reset FIFO. */

	/*

	 * Mangle the data.  The hardware expects:

	 * - bipolar: 16-bit 2's complement

	 * - unipolar: 16-bit unsigned

 Write mangled data to the FIFO. */

 Trigger the conversion. */

/*

 * Kills a command running on the AO subdevice.

 Kill the interrupts. */

	/*

	 * Interrupt routine may or may not be running.  We may or may not

	 * have been called from the interrupt routine (directly or

	 * indirectly via a comedi_events() callback routine).  It's highly

	 * unlikely that we've been called from some other interrupt routine

	 * but who knows what strange things coders get up to!

	 *

	 * If the interrupt routine is currently running, wait for it to

	 * finish, unless we appear to have been called via the interrupt

	 * routine.

 Reconfigure DAC for insn_write usage. */

 Disable channels. */

/*

 * Handles start of acquisition for the AO subdevice.

 Enable interrupts. */

/*

 * Handles interrupts from the DAC FIFO.

 Determine how much room is in the FIFO (in samples). */

 FIFO empty at end of counted acquisition. */

 FIFO is less than half-full. */

 Nothing left to put in the FIFO. */

 Determine how many new scans can be put in the FIFO. */

 Determine how many scans to process. */

 Process scans. */

		/*

		 * Change FIFO interrupt trigger level to wait

		 * until FIFO is empty.

		/*

		 * This is the initial DAC FIFO interrupt at the

		 * start of the acquisition.  The DAC's scan trigger

		 * has been set to 'none' up until now.

		 *

		 * Now that data has been written to the FIFO, the

		 * DAC's scan trigger source can be set to the

		 * correct value.

		 *

		 * BUG: The first scan will be triggered immediately

		 * if the scan trigger source is at logic level 1.

 cmd->scan_begin_src == TRIG_EXT */

/*

 * 'do_cmdtest' function for AO subdevice.

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

	/*

	 * There's only one external trigger signal (which makes these

	 * tests easier).  Only one thing can use it.

 Step 3: check if arguments are trivially valid */

 Force to external trigger 0. */

 The only flag allowed is CR_EDGE, which is ignored. */

 Force to external trigger 0. */

 Only allow flags CR_EDGE and CR_INVERT.  Ignore CR_EDGE. */

 Force to external trigger 0. */

 The only flag allowed is CR_EDGE, which is ignored. */

 Step 4: fix up any arguments. */

 Use two timers. */

 Step 5: check channel list if it exists */

	/*

	 * The output of timer Z2-0 will be used as the scan trigger

	 * source.

 Make sure Z2-0 is gated on.  */

 Cascading with Z2-2. */

 Make sure Z2-2 is gated on.  */

 Z2-2 needs 10 MHz clock. */

 Z2-0 is clocked from Z2-2's output. */

 Cannot handle null/empty chanlist. */

 Determine which channels are enabled and their load order.  */

 Set enabled channels. */

 Determine range and polarity.  All channels the same.  */

	/*

	 * Set DAC range and polarity.

	 * Set DAC scan trigger source to 'none'.

	 * Set DAC FIFO interrupt trigger level to 'not half full'.

	 * Reset DAC FIFO.

	 *

	 * N.B. DAC FIFO interrupts are currently disabled.

 TRIG_EXT */

 Enable external interrupt trigger to start acquisition. */

/*

 * 'cancel' function for AO subdevice.

/*

 * 'munge' data for AO command.

 The hardware expects 16-bit numbers. */

 Channels will be all bipolar or all unipolar. */

 Unipolar */

 Bipolar */

 Munge the data. */

/*

 * Interrupt handler.

 Temporarily disable interrupt sources. */

 Reenable interrupt sources. */

 Allocate buffer to hold values for AO channel scan. */

 Allocate buffer to hold AO channel scan order. */

 Disable interrupt sources. */

 Initialize the DAC hardware. */

 Analog output subdevice. */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/comedi_test.c

 *

 * Generates fake waveform signals that can be read through

 * the command interface.  It does _not_ read from any board;

 * it just generates deterministic waveforms.

 * Useful for various testing purposes.

 *

 * Copyright (C) 2002 Joachim Wuttke <Joachim.Wuttke@icn.siemens.de>

 * Copyright (C) 2002 Frank Mori Hess <fmhess@users.sourceforge.net>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: comedi_test

 * Description: generates fake waveforms

 * Author: Joachim Wuttke <Joachim.Wuttke@icn.siemens.de>, Frank Mori Hess

 *   <fmhess@users.sourceforge.net>, ds

 * Devices:

 * Status: works

 * Updated: Sat, 16 Mar 2002 17:34:48 -0800

 *

 * This driver is mainly for testing purposes, but can also be used to

 * generate sample waveforms on systems that don't have data acquisition

 * hardware.

 *

 * Auto-configuration is the default mode if no parameter is supplied during

 * module loading. Manual configuration requires COMEDI userspace tool.

 * To disable auto-configuration mode, pass "noauto=1" parameter for module

 * loading. Refer modinfo or MODULE_PARM_DESC description below for details.

 *

 * Auto-configuration options:

 *   Refer modinfo or MODULE_PARM_DESC description below for details.

 *

 * Manual configuration options:

 *   [0] - Amplitude in microvolts for fake waveforms (default 1 volt)

 *   [1] - Period in microseconds for fake waveforms (default 0.1 sec)

 *

 * Generates a sawtooth wave on channel 0, square wave on channel 1, additional

 * waveforms could be added to other channels (currently they return flatline

 * zero volts).

 Data unique to this driver */

 timer for AI commands */

 time of next AI conversion in usec */

 waveform amplitude in microvolts */

 waveform period in microseconds */

 current time in waveform period */

 AI scan period in usec */

 AI conversion period in usec */

 timer for AO commands */

 parent comedi device */

 time of previous AO scan in usec */

 AO scan period in usec */

 fake analog input ranges */

 get rid of sawtooth's dc offset and clamp value */

 negative saturation */

 positive saturation */

 get one of two values for square-wave and clamp */

 negative saturation */

 positive saturation */

 generates a different waveform depending on what channel is read */

/*

 * This is the background routine used to generate arbitrary data.

 * It should run in the background; therefore it is scheduled by

 * a timer mechanism.

 done last conversion in scan, so add dead time */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 scan period would be 0 */

 Step 3: check if arguments are trivially valid */

 cmd->convert_src == TRIG_TIMER */

 cmd->scan_begin_src == TRIG_TIMER */

 cmd->stop_src == TRIG_NONE */

 step 4: fix up any arguments */

 round convert_arg to nearest microsecond */

 limit convert_arg to keep scan_begin_arg in range */

 round scan_begin_arg to nearest microsecond */

 but ensure scan_begin_arg is large enough */

 cmd->convert_src == TRIG_TIMER */

 cmd->scan_begin_src == TRIG_TIMER */

	/*

	 * Simulate first conversion to occur at convert period after

	 * conversion timer starts.  If scan_begin_src is TRIG_FOLLOW, assume

	 * the conversion timer starts immediately.  If scan_begin_src is

	 * TRIG_TIMER, assume the conversion timer starts after the scan

	 * period.

 Determine time within waveform period at time of conversion. */

	/*

	 * Schedule timer to expire just after first conversion time.

	 * Seem to need an extra jiffy here, otherwise timer expires slightly

	 * early!

 Assume we were called from the timer routine itself. */

/*

 * This is the background routine to handle AO commands, scheduled by

 * a timer mechanism.

 determine number of scan periods since last time */

 determine scans in buffer, limit to scans to do this time */

 skip all but the last scan to save processing time */

 unexpected underrun! (cancelled?) */

 output the last scan */

 unexpected underrun! (cancelled?) */

 advance time of last scan */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 cmd->stop_src == TRIG_NONE */

 step 4: fix up any arguments */

 round scan_begin_arg to nearest microsecond */

 Assume we were called from the timer routine itself. */

		/*

		 * input:  data[1], data[2] : scan_begin_src, convert_src

		 * output: data[1], data[2] : scan_begin_min, convert_min

 exactly TRIG_FOLLOW case */

 we don't care about actual channels */

 scan_begin_min */

 convert_min */

 analog input subdevice */

 analog output subdevice (loopback) */

 do same as AI insn_read */

 Our default loopback value is just a 0V flatline */

 set default amplitude and period */

 1 volt */

 0.1 sec */

 set default amplitude and period */

 1 volt */

 0.1 sec */

/*

 * For auto-configuration, a device is created to stand in for a

 * real hardware device.

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * dt282x.c

 * Comedi driver for Data Translation DT2821 series

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1997-8 David A. Schleef <ds@schleef.org>

/*

 * Driver: dt282x

 * Description: Data Translation DT2821 series (including DT-EZ)

 * Author: ds

 * Devices: [Data Translation] DT2821 (dt2821), DT2821-F-16SE (dt2821-f),

 *   DT2821-F-8DI (dt2821-f), DT2821-G-16SE (dt2821-g),

 *   DT2821-G-8DI (dt2821-g), DT2823 (dt2823), DT2824-PGH (dt2824-pgh),

 *   DT2824-PGL (dt2824-pgl), DT2825 (dt2825), DT2827 (dt2827),

 *   DT2828 (dt2828), DT2928 (dt2829), DT21-EZ (dt21-ez), DT23-EZ (dt23-ez),

 *   DT24-EZ (dt24-ez), DT24-EZ-PGL (dt24-ez-pgl)

 * Status: complete

 * Updated: Wed, 22 Aug 2001 17:11:34 -0700

 *

 * Configuration options:

 *   [0] - I/O port base address

 *   [1] - IRQ (optional, required for async command support)

 *   [2] - DMA 1 (optional, required for async command support)

 *   [3] - DMA 2 (optional, required for async command support)

 *   [4] - AI jumpered for 0=single ended, 1=differential

 *   [5] - AI jumpered for 0=straight binary, 1=2's complement

 *   [6] - AO 0 data format (deprecated, see below)

 *   [7] - AO 1 data format (deprecated, see below)

 *   [8] - AI jumpered for 0=[-10,10]V, 1=[0,10], 2=[-5,5], 3=[0,5]

 *   [9] - AO channel 0 range (deprecated, see below)

 *   [10]- AO channel 1 range (deprecated, see below)

 *

 * Notes:

 *   - AO commands might be broken.

 *   - If you try to run a command on both the AI and AO subdevices

 *     simultaneously, bad things will happen.  The driver needs to

 *     be fixed to check for this situation and return an error.

 *   - AO range is not programmable. The AO subdevice has a range_table

 *     containing all the possible analog output ranges. Use the range

 *     that matches your board configuration to convert between data

 *     values and physical units. The format of the data written to the

 *     board is handled automatically based on the unipolar/bipolar

 *     range that is selected.

/*

 * Register map

 Pacer Clock */

 4 MHz (in nanoseconds) */

/*

 * The Analog Output range is set per-channel using jumpers on the board.

 * All of these ranges may not be available on some DT2821 series boards.

 * The default jumper setting has both channels set for +/-10V output.

 software copies of registers */

 0 and 1 are both divide by 1 */

 restart the channel */

/*

 *    Performs a single A/D conversion.

 *      - Put channel/gain into channel-gain list

 *      - preload multiplexer

 *      - trigger conversion and wait for it to finish

 XXX should we really be enabling the ad clock here? */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_EXT | TRIG_NONE */

 step 4: fix up any arguments */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_EXT | TRIG_NONE */

 step 4: fix up any arguments */

 clear all bits but the DIO direction bits */

 clear all bits but the DIO direction bits */

 DMA uses two 4K buffers with separate DMA channels */

 Initialize board */

	/*

	 * At power up, some registers are in a well-known state.

	 * Check them to see if a DT2821 series board is present.

 an IRQ and 2 DMA channels are required for async command support */

 Analog Input subdevice */

 Analog Output subdevice */

 ranges are per-channel, set by jumpers on the board */

 Digital I/O subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0

/*

 * pcl724.c

 * Comedi driver for 8255 based ISA and PC/104 DIO boards

 *

 * Michal Dobes <dobes@tesnet.cz>

/*

 * Driver: pcl724

 * Description: Comedi driver for 8255 based ISA DIO boards

 * Devices: [Advantech] PCL-724 (pcl724), PCL-722 (pcl722), PCL-731 (pcl731),

 *  [ADLink] ACL-7122 (acl7122), ACL-7124 (acl7124), PET-48DIO (pet48dio),

 *  [WinSystems] PCM-IO48 (pcmio48),

 *  [Diamond Systems] ONYX-MM-DIO (onyx-mm-dio)

 * Author: Michal Dobes <dobes@tesnet.cz>

 * Status: untested

 *

 * Configuration options:

 *   [0] - IO Base

 *   [1] - IRQ (not supported)

 *   [2] - number of DIO (pcl722 and acl7122 boards)

 *	   0, 144: 144 DIO configuration

 *	   1,  96:  96 DIO configuration

 24 DIO channels */

 144 (or 96) DIO channels */

 48 DIO channels */

 144 (or 96) DIO channels */

 24 DIO channels */

 48 DIO channels */

 48 DIO channels */

 48 DIO channels */

 Handle PCL-724 in 96 DIO configuration */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * Comedi driver for Data Translation DT2811

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) David A. Schleef <ds@schleef.org>

/*

 * Driver: dt2811

 * Description: Data Translation DT2811

 * Author: ds

 * Devices: [Data Translation] DT2811-PGL (dt2811-pgl), DT2811-PGH (dt2811-pgh)

 * Status: works

 *

 * Configuration options:

 *   [0] - I/O port base address

 *   [1] - IRQ (optional, needed for async command support)

 *   [2] - A/D reference (# of analog inputs)

 *	   0 = single-ended (16 channels)

 *	   1 = differential (8 channels)

 *	   2 = pseudo-differential (16 channels)

 *   [3] - A/D range (deprecated, see below)

 *   [4] - D/A 0 range (deprecated, see below)

 *   [5] - D/A 1 range (deprecated, see below)

 *

 * Notes:

 *   - A/D ranges are not programmable but the gain is. The AI subdevice has

 *     a range_table containing all the possible analog input range/gain

 *     options for the dt2811-pgh or dt2811-pgl. Use the range that matches

 *     your board configuration and the desired gain to correctly convert

 *     between data values and physical units and to set the correct output

 *     gain.

 *   - D/A ranges are not programmable. The AO subdevice has a range_table

 *     containing all the possible analog output ranges. Use the range

 *     that matches your board configuration to convert between data

 *     values and physical units.

/*

 * Register I/O map

 r/w  A/D Control/Status */

 r      1=A/D conv done */

 r      1=A/D error */

 r      1=A/D busy */

 r/w    1=dma ena */

 r/w    1=interrupts ena */

 r/w  A/D Gain/Channel */

 r   A/D Data low byte */

 r   A/D Data high byte */

 w D/A Data low */

 w D/A Data high */

 r   Digital Input Port 0 */

 w   Digital Output Port 1 */

 r/w  Timer/Counter */

 600 kHz = 1666.6667ns */

/*

 * Timer frequency control:

 *   DT2811_TMRCTR_MANTISSA	DT2811_TMRCTR_EXPONENT

 *   val  divisor  frequency	val  multiply divisor/divide frequency by

 *    0      1      600 kHz	 0   1

 *    1     10       60 kHz	 1   10

 *    2      2      300 kHz	 2   100

 *    3      3      200 kHz	 3   1000

 *    4      4      150 kHz	 4   10000

 *    5      5      120 kHz	 5   100000

 *    6      6      100 kHz	 6   1000000

 *    7     12       50 kHz	 7   10000000

/*

 * The Analog Input range is set using jumpers on the board.

 *

 * Input Range		W9  W10

 * -5V to +5V		In  Out

 * -2.5V to +2.5V	In  In

 * 0V to +5V		Out In

 *

 * The gain may be set to 1, 2, 4, or 8 (on the dt2811-pgh) or to

 * 1, 10, 100, 500 (on the dt2811-pgl).

 range 0: gain=1 */

 range 1: gain=2 */

 range 2: gain=4 */

 range 3: gain=8 */

 range 0+4: gain=1 */

 range 1+4: gain=2 */

 range 2+4: gain=4 */

 range 3+4: gain=8 */

 range 0+8: gain=1 */

 range 1+8: gain=2 */

 range 2+8: gain=4 */

 range 3+8: gain=8 */

 range 0: gain=1 */

 range 1: gain=10 */

 range 2: gain=100 */

 range 3: gain=500 */

 range 0+4: gain=1 */

 range 1+4: gain=10 */

 range 2+4: gain=100 */

 range 3+4: gain=500 */

 range 0+8: gain=1 */

 range 1+8: gain=10 */

 range 2+8: gain=100 */

 range 3+8: gain=500 */

/*

 * The Analog Output range is set per-channel using jumpers on the board.

 *

 *			DAC0 Jumpers		DAC1 Jumpers

 * Output Range		W5  W6  W7  W8		W1  W2  W3  W4

 * -5V to +5V		In  Out In  Out		In  Out In  Out

 * -2.5V to +2.5V	In  Out Out In		In  Out Out In

 * 0 to +5V		Out In  Out In		Out In  Out In

 default setting from factory */

	/*

	 * Mode 0

	 * Single conversion

	 *

	 * Loading a chanspec will trigger a conversion.

		/*

		 * Mode 1

		 * Continuous conversion, internal trigger and clock

		 *

		 * This resets the trigger flip-flop, disabling A/D strobes.

		 * The timer/counter register is loaded with the division

		 * ratio which will give the required sample rate.

		 *

		 * Loading the first chanspec sets the trigger flip-flop,

		 * enabling the timer/counter. A/D strobes are then generated

		 * at the rate set by the internal clock/divider.

 TRIG_EXT */

			/*

			 * Mode 2

			 * Continuous conversion, external trigger

			 *

			 * Similar to Mode 1, with the exception that the

			 * trigger flip-flop must be set by a negative edge

			 * on the external trigger input.

 TRIG_EXT */

			/*

			 * Mode 3

			 * Continuous conversion, external trigger, clock

			 *

			 * Similar to Mode 2, with the exception that the

			 * conversion rate is set by the frequency on the

			 * external clock/divider.

 load timer */

 load chanspec - enables timer */

	/*

	 * Work through all the divider/multiplier values to find the two

	 * closest divisors to generate the requested nanosecond timing.

			/*

			 * The timer can be configured to run at a slowest

			 * speed of 0.005hz (600 Khz/120000000), which requires

			 * 37-bits to represent the nanosecond value. Limit the

			 * slowest timing to what comedi handles (32-bits).

 Check for fastest found timing */

 Check for slowest found timing */

	/*

	 * The slowest found timing will be invalid if the requested timing

	 * is faster than what can be generated by the timer. Fix it so that

	 * CMDF_ROUND_UP returns valid timing.

	/*

	 * The fastest found timing will be invalid if the requested timing

	 * is less than what can be generated by the timer. Fix it so that

	 * CMDF_ROUND_NEAREST and CMDF_ROUND_DOWN return valid timing.

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_NONE */

 Step 4: fix up any arguments */

 TRIG_EXT */

 The convert_arg is used to set the divisor. */

 Step 5: check channel list if it exists */

 We will already be in Mode 0 */

 load chanspec and trigger conversion */

 This is the initialization sequence from the users manual */

 IRQ's 2,3,5,7 are valid for async command support */

 Analog Input subdevice */

 Analog Output subdevice */

 Digital Input subdevice */

 Digital Output subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0

/*

 * comedi/drivers/pcl812.c

 *

 * Author: Michal Dobes <dobes@tesnet.cz>

 *

 * hardware driver for Advantech cards

 *  card:   PCL-812, PCL-812PG, PCL-813, PCL-813B

 *  driver: pcl812,  pcl812pg,  pcl813,  pcl813b

 * and for ADlink cards

 *  card:   ACL-8112DG, ACL-8112HG, ACL-8112PG, ACL-8113, ACL-8216

 *  driver: acl8112dg,  acl8112hg,  acl8112pg,  acl8113,  acl8216

 * and for ICP DAS cards

 *  card:   ISO-813, A-821PGH, A-821PGL, A-821PGL-NDA, A-822PGH, A-822PGL,

 *  driver: iso813,  a821pgh,  a-821pgl, a-821pglnda,  a822pgh,  a822pgl,

 *  card:   A-823PGH, A-823PGL, A-826PG

 * driver:  a823pgh,  a823pgl,  a826pg

/*

 * Driver: pcl812

 * Description: Advantech PCL-812/PG, PCL-813/B,

 *	     ADLink ACL-8112DG/HG/PG, ACL-8113, ACL-8216,

 *	     ICP DAS A-821PGH/PGL/PGL-NDA, A-822PGH/PGL, A-823PGH/PGL, A-826PG,

 *	     ICP DAS ISO-813

 * Author: Michal Dobes <dobes@tesnet.cz>

 * Devices: [Advantech] PCL-812 (pcl812), PCL-812PG (pcl812pg),

 *	PCL-813 (pcl813), PCL-813B (pcl813b), [ADLink] ACL-8112DG (acl8112dg),

 *	ACL-8112HG (acl8112hg), ACL-8113 (acl-8113), ACL-8216 (acl8216),

 *	[ICP] ISO-813 (iso813), A-821PGH (a821pgh), A-821PGL (a821pgl),

 *	A-821PGL-NDA (a821pclnda), A-822PGH (a822pgh), A-822PGL (a822pgl),

 *	A-823PGH (a823pgh), A-823PGL (a823pgl), A-826PG (a826pg)

 * Updated: Mon, 06 Aug 2007 12:03:15 +0100

 * Status: works (I hope. My board fire up under my hands

 *	       and I cann't test all features.)

 *

 * This driver supports insn and cmd interfaces. Some boards support only insn

 * because their hardware don't allow more (PCL-813/B, ACL-8113, ISO-813).

 * Data transfer over DMA is supported only when you measure only one

 * channel, this is too hardware limitation of these boards.

 *

 * Options for PCL-812:

 *   [0] - IO Base

 *   [1] - IRQ  (0=disable, 2, 3, 4, 5, 6, 7; 10, 11, 12, 14, 15)

 *   [2] - DMA  (0=disable, 1, 3)

 *   [3] - 0=trigger source is internal 8253 with 2MHz clock

 *         1=trigger source is external

 *   [4] - 0=A/D input range is +/-10V

 *	   1=A/D input range is +/-5V

 *	   2=A/D input range is +/-2.5V

 *	   3=A/D input range is +/-1.25V

 *	   4=A/D input range is +/-0.625V

 *	   5=A/D input range is +/-0.3125V

 *   [5] - 0=D/A outputs 0-5V  (internal reference -5V)

 *	   1=D/A outputs 0-10V (internal reference -10V)

 *	   2=D/A outputs unknown (external reference)

 *

 * Options for PCL-812PG, ACL-8112PG:

 *   [0] - IO Base

 *   [1] - IRQ  (0=disable, 2, 3, 4, 5, 6, 7; 10, 11, 12, 14, 15)

 *   [2] - DMA  (0=disable, 1, 3)

 *   [3] - 0=trigger source is internal 8253 with 2MHz clock

 *	   1=trigger source is external

 *   [4] - 0=A/D have max +/-5V input

 *	   1=A/D have max +/-10V input

 *   [5] - 0=D/A outputs 0-5V  (internal reference -5V)

 *	   1=D/A outputs 0-10V (internal reference -10V)

 *	   2=D/A outputs unknown (external reference)

 *

 * Options for ACL-8112DG/HG, A-822PGL/PGH, A-823PGL/PGH, ACL-8216, A-826PG:

 *   [0] - IO Base

 *   [1] - IRQ  (0=disable, 2, 3, 4, 5, 6, 7; 10, 11, 12, 14, 15)

 *   [2] - DMA  (0=disable, 1, 3)

 *   [3] - 0=trigger source is internal 8253 with 2MHz clock

 *	   1=trigger source is external

 *   [4] - 0=A/D channels are S.E.

 *	   1=A/D channels are DIFF

 *   [5] - 0=D/A outputs 0-5V  (internal reference -5V)

 *	   1=D/A outputs 0-10V (internal reference -10V)

 *	   2=D/A outputs unknown (external reference)

 *

 * Options for A-821PGL/PGH:

 *   [0] - IO Base

 *   [1] - IRQ  (0=disable, 2, 3, 4, 5, 6, 7)

 *   [2] - 0=A/D channels are S.E.

 *	   1=A/D channels are DIFF

 *   [3] - 0=D/A output 0-5V  (internal reference -5V)

 *	   1=D/A output 0-10V (internal reference -10V)

 *

 * Options for A-821PGL-NDA:

 *   [0] - IO Base

 *   [1] - IRQ  (0=disable, 2, 3, 4, 5, 6, 7)

 *   [2] - 0=A/D channels are S.E.

 *	   1=A/D channels are DIFF

 *

 * Options for PCL-813:

 *   [0] - IO Base

 *

 * Options for PCL-813B:

 *   [0] - IO Base

 *   [1] - 0= bipolar inputs

 *	   1= unipolar inputs

 *

 * Options for ACL-8113, ISO-813:

 *   [0] - IO Base

 *   [1] - 0= 10V bipolar inputs

 *	   1= 10V unipolar inputs

 *	   2= 20V bipolar inputs

 *	   3= 20V unipolar inputs

/*

 * Register I/O map

 length of scan list */

 and ACL-8112PG */

 ACL-8112DG/HG, A-822PGL/PGH, A-823PGL/PGH */

 and ICP DAS A-826PG */

 PGH, PGL, PGL/NDA versions */

 8 differential */

 8 differential */

 8 differential */

 8 differential */

 8 differential */

 8 differential */

 8 differential */

 8 differential */

 8 differential */

 8 differential */

 8 differential */

 =1 we must add 1 to range number */

 stored INT number for some cards */

 how many samples transfer poll */

 settling time for gain */

 if using EOS, adapt DMA buffer to one scan */

	/*

	 * Determine dma size based on the buffer size plus the number of

	 * unread samples and the number of samples remaining in the command.

		/*

		 * XXX this depends on selected range and can be very long for

		 * some high gain ranges!

 writing any value clears the interrupt request */

 writing any value triggers a software conversion */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_EXT */

 TRIG_NONE */

 step 4: fix up any arguments */

  check if we can use DMA transfer */

  we cann't use DMA :-( */

  don't we want wake up every scan? */

  DMA is useless for this situation */

 setup and enable dma for the first buffer */

 Set up next channel. Added by abbotti 2010-01-20, but untested. */

 restart dma with the next buffer */

 poll is valid only for DMA transfer */

 new buffer position */

 no new samples */

 disable analog input trigger */

	/*

	 * Invalidate last_ai_chanspec then set analog input to

	 * known channel/range.

 set analog output channels to 0V */

 set all digital outputs low */

 only DMA channels 3 and 1 are valid */

 DMA uses two 8K buffers */

 we need an IRQ to do DMA on channel 3 or 1 */

 differential analog inputs? */

 all boardtypes have analog inputs */

 Analog Input subdevice */

 analog output */

 Digital Input subdevice */

 Digital Output subdevice */

  we use external trigger */

 maybe there must by greatest timeout */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/mite.c

 * Hardware driver for NI Mite PCI interface chip

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1997-2002 David A. Schleef <ds@schleef.org>

/*

 * The PCI-MIO E series driver was originally written by

 * Tomasz Motylewski <...>, and ported to comedi by ds.

 *

 * References for specifications:

 *

 *    321747b.pdf  Register Level Programmer Manual (obsolete)

 *    321747c.pdf  Register Level Programmer Manual (new)

 *    DAQ-STC reference manual

 *

 * Other possibly relevant info:

 *

 *    320517c.pdf  User manual (obsolete)

 *    320517f.pdf  User manual (new)

 *    320889a.pdf  delete

 *    320906c.pdf  maximum signal ratings

 *    321066a.pdf  about 16x

 *    321791a.pdf  discontinuation of at-mio-16e-10 rev. c

 *    321808a.pdf  about at-mio-16e-10 rev P

 *    321837a.pdf  discontinuation of at-mio-16de-10 rev d

 *    321838a.pdf  about at-mio-16de-10 rev N

 *

 * ISSUES:

 *

/*

 * Mite registers

 chip signature */

 pci=0x3 */

 minimite=1 */

 mite=0, minimite=1 */

 channel operation */

 stop without emptying fifo */

 stop after emptying fifo */

 channel control */

 transfer count */

 memory config */

 memory address */

 device config */

 device address */

 link config */

 link address */

 see tnt5002 manual */

 base address */

 base count */

 ? address */

 ? */

 ? */

 channel status */

 ??? */

 fifo count */

 common bits for the memory/device/link config registers */

 This also works on m-series when using channels (drq_line) 4 or 5. */

/**

 * mite_bytes_in_transit() - Returns the number of unread bytes in the fifo.

 * @mite_chan: MITE dma channel.

 returns lower bound for number of bytes transferred from device to memory */

 returns upper bound for number of bytes transferred from device to memory */

 returns lower bound for number of bytes read from memory to device */

 returns upper bound for number of bytes read from memory to device */

 write alloc as much as we can */

	/*

	 * it's possible count will be negative due to conservative value

	 * returned by mite_bytes_written_to_memory_lb

 read alloc as much as we can */

		/*

		 * This is a special case where we continuously output a finite

		 * buffer.  In this case, we do not free any of the memory,

		 * hence we expect that old_alloc_count will reach a maximum of

		 * stop_count bytes.

/**

 * mite_sync_dma() - Sync the MITE dma with the COMEDI async buffer.

 * @mite_chan: MITE dma channel.

 * @s: COMEDI subdevice.

/**

 * mite_ack_linkc() - Check and ack the LINKC interrupt,

 * @mite_chan: MITE dma channel.

 * @s: COMEDI subdevice.

 * @sync: flag to force a mite_sync_dma().

 *

 * This will also ack the DONE interrupt if active.

/**

 * mite_done() - Check is a MITE dma transfer is complete.

 * @mite_chan: MITE dma channel.

 *

 * This will also ack the DONE interrupt if active.

/**

 * mite_dma_arm() - Start a MITE dma transfer.

 * @mite_chan: MITE dma channel.

	/*

	 * memory barrier is intended to insure any twiddling with the buffer

	 * is done before writing to the mite to arm dma transfer

 arm */

/**

 * mite_dma_disarm() - Stop a MITE dma transfer.

 * @mite_chan: MITE dma channel.

 disarm */

/**

 * mite_prep_dma() - Prepare a MITE dma channel for transfers.

 * @mite_chan: MITE dma channel.

 * @num_device_bits: device transfer size (8, 16, or 32-bits).

 * @num_memory_bits: memory transfer size (8, 16, or 32-bits).

 short link chaining mode */

	/*

	 * Link Complete Interrupt: interrupt every time a link

	 * in MITE_RING is completed. This can generate a lot of

	 * extra interrupts, but right now we update the values

	 * of buf_int_ptr and buf_int_count at each interrupt. A

	 * better method is to poll the MITE before each user

	 * "read()" to calculate the number of bytes available.

		/*

		 * Doing a combined 32 and 16 bit byteswap gets the 16 bit

		 * samples into the fifo in the right order. Tested doing 32 bit

		 * memory to 16 bit device transfers to the analog out of a

		 * pxi-6281, which has mite version = 1, type = 4. This also

		 * works for dma reads from the counters on e-series boards.

 to/from memory */

 from/to device */

 reset the DAR */

 the link is 32bits */

 starting address for link chaining */

/**

 * mite_request_channel_in_range() - Request a MITE dma channel.

 * @mite: MITE device.

 * @ring: MITE dma ring.

 * @min_channel: minimum channel index to use.

 * @max_channel: maximum channel index to use.

	/*

	 * spin lock so mite_release_channel can be called safely

	 * from interrupts

/**

 * mite_request_channel() - Request a MITE dma channel.

 * @mite: MITE device.

 * @ring: MITE dma ring.

/**

 * mite_release_channel() - Release a MITE dma channel.

 * @mite_chan: MITE dma channel.

 spin lock to prevent races with mite_request_channel */

		/*

		 * disable all channel's interrupts (do it after disarm/reset so

		 * MITE_CHCR reg isn't changed while dma is still active!)

/**

 * mite_init_ring_descriptors() - Initialize a MITE dma ring descriptors.

 * @ring: MITE dma ring.

 * @s: COMEDI subdevice.

 * @nbytes: the size of the dma ring (in bytes).

 *

 * Initializes the ring buffer descriptors to provide correct DMA transfer

 * links to the exact amount of memory required. When the ring buffer is

 * allocated by mite_buf_change(), the default is to initialize the ring

 * to refer to the entire DMA data buffer. A command may call this function

 * later to re-initialize and shorten the amount of memory that will be

 * transferred.

 We set the descriptors for all full links. */

 the last link is either a remainder or was a full link. */

 set the lesser count for the remainder link */

 Assign the last link->next to point back to the head of the list. */

	/*

	 * barrier is meant to insure that all the writes to the dma descriptors

	 * have completed before the dma controller is commanded to read them

/**

 * mite_buf_change() - COMEDI subdevice (*buf_change) for a MITE dma ring.

 * @ring: MITE dma ring.

 * @s: COMEDI subdevice.

/**

 * mite_alloc_ring() - Allocate a MITE dma ring.

 * @mite: MITE device.

/**

 * mite_free_ring() - Free a MITE dma ring and its descriptors.

 * @ring: MITE dma ring.

	/*

	 * Make sure dma bursts work. I got this from running a bus analyzer

	 * on a pxi-6281 and a pxi-6713. 6713 powered up with register value

	 * of 0x61f and bursts worked. 6281 powered up with register value of

	 * 0x1f and bursts didn't work. The NI windows driver reads the

	 * register, then does a bitwise-or of 0x600 with it and writes it back.

	 *

	 * The bits 0x90180700 in MITE_UNKNOWN_DMA_BURST_REG can be

	 * written and read back.  The bits 0x1f always read as 1.

	 * The rest always read as zero.

 get the wpdep bits and convert it to the write port fifo depth */

 disable interrupts */

/**

 * mite_attach() - Allocate and initialize a MITE device for a comedi driver.

 * @dev: COMEDI device.

 * @use_win1: flag to use I/O Window 1 instead of I/O Window 0.

 *

 * Called by a COMEDI drivers (*auto_attach).

 *

 * Returns a pointer to the MITE device on success, or NULL if the MITE cannot

 * be allocated or remapped.

/**

 * mite_detach() - Unmap and free a MITE device for a comedi driver.

 * @mite: MITE device.

 *

 * Called by a COMEDI drivers (*detach).

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/dt2817.c

 * Hardware driver for Data Translation DT2817

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1998 David A. Schleef <ds@schleef.org>

/*

 * Driver: dt2817

 * Description: Data Translation DT2817

 * Author: ds

 * Status: complete

 * Devices: [Data Translation] DT2817 (dt2817)

 *

 * A very simple digital I/O card.  Four banks of 8 lines, each bank

 * is configurable for input or output.  One wonders why it takes a

 * 50 page manual to describe this thing.

 *

 * The driver (which, btw, is much less than 50 pages) has 1 subdevice

 * with 32 channels, configurable in groups of 8.

 *

 * Configuration options:

 * [0] - I/O port base base address

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * Comedi driver for Keithley DAS-1700/DAS-1800 series boards

 * Copyright (C) 2000 Frank Mori Hess <fmhess@users.sourceforge.net>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: das1800

 * Description: Keithley Metrabyte DAS1800 (& compatibles)

 * Author: Frank Mori Hess <fmhess@users.sourceforge.net>

 * Devices: [Keithley Metrabyte] DAS-1701ST (das-1701st),

 *   DAS-1701ST-DA (das-1701st-da), DAS-1701/AO (das-1701ao),

 *   DAS-1702ST (das-1702st), DAS-1702ST-DA (das-1702st-da),

 *   DAS-1702HR (das-1702hr), DAS-1702HR-DA (das-1702hr-da),

 *   DAS-1702/AO (das-1702ao), DAS-1801ST (das-1801st),

 *   DAS-1801ST-DA (das-1801st-da), DAS-1801HC (das-1801hc),

 *   DAS-1801AO (das-1801ao), DAS-1802ST (das-1802st),

 *   DAS-1802ST-DA (das-1802st-da), DAS-1802HR (das-1802hr),

 *   DAS-1802HR-DA (das-1802hr-da), DAS-1802HC (das-1802hc),

 *   DAS-1802AO (das-1802ao)

 * Status: works

 *

 * Configuration options:

 *   [0] - I/O port base address

 *   [1] - IRQ (optional, required for analog input cmd support)

 *   [2] - DMA0 (optional, requires irq)

 *   [3] - DMA1 (optional, requires irq and dma0)

 *

 * analog input cmd triggers supported:

 *

 *   start_src		TRIG_NOW	command starts immediately

 *			TRIG_EXT	command starts on external pin TGIN

 *

 *   scan_begin_src	TRIG_FOLLOW	paced/external scans start immediately

 *			TRIG_TIMER	burst scans start periodically

 *			TRIG_EXT	burst scans start on external pin XPCLK

 *

 *   scan_end_src	TRIG_COUNT	scan ends after last channel

 *

 *   convert_src	TRIG_TIMER	paced/burst conversions are timed

 *			TRIG_EXT	conversions on external pin XPCLK

 *					(requires scan_begin_src == TRIG_FOLLOW)

 *

 *   stop_src		TRIG_COUNT	command stops after stop_arg scans

 *			TRIG_EXT	command stops on external pin TGIN

 *			TRIG_NONE	command runs until canceled

 *

 * If TRIG_EXT is used for both the start_src and stop_src, the first TGIN

 * trigger starts the command, and the second trigger will stop it. If only

 * one is TRIG_EXT, the first trigger will either stop or start the command.

 * The external pin TGIN is normally set for negative edge triggering. It

 * can be set to positive edge with the CR_INVERT flag. If TRIG_EXT is used

 * for both the start_src and stop_src they must have the same polarity.

 *

 * Minimum conversion speed is limited to 64 microseconds (convert_arg <= 64000)

 * for 'burst' scans. This limitation does not apply for 'paced' scans. The

 * maximum conversion speed is limited by the board (convert_arg >= ai_speed).

 * Maximum conversion speeds are not always achievable depending on the

 * board setup (see user manual).

 *

 * NOTES:

 * Only the DAS-1801ST has been tested by me.

 * Unipolar and bipolar ranges cannot be mixed in the channel/gain list.

 *

 * The waveform analog output on the 'ao' cards is not supported.

 * If you need it, send me (Frank Hess) an email.

 misc. defines */

 uses 16 io addresses */

  1024 sample fifo */

  size in bytes of dma buffers */

 Registers for the das1800 */

 bipolar gain = 1 */

 bipolar gain = 10 */

 bipolar gain = 50 */

 bipolar gain = 250 */

 unipolar gain = 1 */

 unipolar gain = 10 */

 unipolar gain = 50 */

 unipolar gain = 250 */

 bipolar gain = 1 */

 bipolar gain = 2 */

 bipolar gain = 4 */

 bipolar gain = 8 */

 unipolar gain = 1 */

 unipolar gain = 2 */

 unipolar gain = 4 */

 unipolar gain = 8 */

/*

 * The waveform analog outputs on the 'ao' boards are not currently

 * supported. They have a comedi_lrange of:

 * { 2, { BIP_RANGE(10), BIP_RANGE(5) } }

 board probe id values (hi byte of the digital input register) */

  figure out how many points to read */

  switch to other channel and flush it */

  get any remaining samples in fifo */

 re-enable dma channel */

  clear DMATC interrupt bit */

  switch dma channels for next time, if appropriate */

 disable and stop conversions */

 select adc register (spinlock is already held) */

 get samples with dma, fifo, or polled as necessary */

 if the card's fifo has overflowed */

  clear OVF interrupt bit */

  stop taking data if appropriate */

 stop_src TRIG_EXT */

  clear CT0TC interrupt bit */

 get all remaining samples before quitting */

	/*

	 * Protects the indirect addressing selected by DAS1800_SELECT

	 * in das1800_ai_handler() also prevents race with das1800_interrupt().

	/*

	 * Protects the indirect addressing selected by DAS1800_SELECT

	 * in das1800_ai_handler() also prevents race with das1800_ai_poll().

 if interrupt was not caused by das-1800 */

 clear the interrupt status bit INT */

  handle interrupt */

	/*

	 * Paced mode:

	 *	scan_begin_src is TRIG_FOLLOW

	 *	convert_src is TRIG_TIMER

	 *

	 * The convert_arg sets the pacer sample acquisition time.

	 * The max acquisition speed is limited to the boards

	 * 'ai_speed' (this was already verified). The min speed is

	 * limited by the cascaded 8254 timer.

	/*

	 * Burst mode:

	 *	scan_begin_src is TRIG_TIMER or TRIG_EXT

	 *	convert_src is TRIG_TIMER

	 *

	 * The convert_arg sets burst sample acquisition time.

	 * The max acquisition speed is limited to the boards

	 * 'ai_speed' (this was already verified). The min speed is

	 * limiited to 64 microseconds,

 round to microseconds then verify */

	/*

	 * The pacer can be used to set the scan sample rate. The max scan

	 * speed is limited by the conversion speed and the number of channels

	 * to convert. The min speed is limited by the cascaded 8254 timer.

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 burst scans must use timed conversions */

 the external pin TGIN must use the same polarity */

 Step 3: check if arguments are trivially valid */

 Step 4: fix up any arguments */

 TRIG_TIMER or TRIG_EXT */

 Step 5: check channel list if it exists */

 for timed modes, make dma buffer fill in 'ns' time */

 not in burst mode */

 limit samples to what is remaining in the command */

 determine a dma transfer size to fill buffer in 0.3 sec */

 set up dual dma if appropriate */

 protects the indirect addressing selected by DAS1800_SELECT */

 select QRAM register and set start address */

 make channel / gain list */

 finish write to QRAM */

	/*

	 * Disable dma on CMDF_WAKE_EOS, or CMDF_PRIORITY (because dma in

	 * handler is unsafe at hard real-time priority).

  interrupt on end of conversion for CMDF_WAKE_EOS */

  interrupt fifo not empty */

  interrupt fifo half full */

 TRIG_NOW */

 set clock source to internal or external */

 not in burst mode */

 trig on cascaded counters */

 TRIG_EXT */

 trig on falling edge of external trigger */

 burst mode with internal pacer clock */

 TRIG_EXT */

 burst mode with external trigger */

 setup cascaded counters for conversion/scan frequency */

 setup counter 0 for 'about triggering' */

  set conversion rate and length for burst mode */

 microseconds - 1 */

 enable and start conversions */

 software pacer */

 enable conversions */

 reset fifo */

 protects the indirect addressing selected by DAS1800_SELECT */

 select ai fifo register */

 trigger conversion */

 protects the indirect addressing selected by DAS1800_SELECT */

 load this channel (and update if it's the last channel) */

 update all channels */

	/*

	 * it->options[2] is DMA channel 0

	 * it->options[3] is DMA channel 1

	 *

	 * Encode the DMA channels into 2 digit hexadecimal for switch.

  dma0 == 5 */

  dma0 == 6 */

  dma0 == 7 */

  dma0 == 5, dma1 == 6 */

  dma0 == 6, dma1 == 7 */

  dma0 == 7, dma1 == 5 */

 DMA can use 1 or 2 buffers, each with a separate channel */

	/*

	 * The dev->board_ptr will be set by comedi_device_attach() if the

	 * board name provided by the user matches a board->name in this

	 * driver. If so, this function sanity checks the id to verify that

	 * the board is correct.

	 /*

	  * If the dev->board_ptr is not set, the user is trying to attach

	  * an unspecified board to this driver. In this case the id is used

	  * to 'probe' for the dev->board_ptr.

 das-1701st-da, das-1702st-da, das-1801st-da, das-1802st-da */

 das-1702hr-da, das-1802hr-da */

 das-1701ao, das-1702ao, das-1801ao, das-1802ao */

  das-1702hr, das-1802hr */

 das-1701st, das-1702st, das-1801st, das-1802st */

 das-1801hc, das-1802hc */

 waveform 'ao' boards have additional io ports */

 an irq and one dma channel is required to use dma */

	/*

	 * Analog Input subdevice

	 *

	 * The "hc" type boards have 64 analog input channels and a 64

	 * entry QRAM fifo.

	 *

	 * All the other board types have 16 on-board channels. Each channel

	 * can be expanded to 16 channels with the addition of an EXP-1800

	 * expansion board for a total of 256 channels. The QRAM fifo on

	 * these boards has 256 entries.

	 *

	 * From the datasheets it's not clear what the comedi channel to

	 * actual physical channel mapping is when EXP-1800 boards are used.

 Analog Output subdevice */

 initialize all channels to 0V */

 spinlock is not necessary during the attach */

		/*

		 * 'ao' boards have waveform analog outputs that are not

		 * currently supported.

 Digital Input subdevice */

 Digital Output subdevice */

  initialize digital out channels */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * addi_apci_2032.c

 * Copyright (C) 2004,2005  ADDI-DATA GmbH for the source code of this module.

 * Project manager: Eric Stolz

 *

 *	ADDI-DATA GmbH

 *	Dieselstrasse 3

 *	D-77833 Ottersweier

 *	Tel: +19(0)7223/9493-0

 *	Fax: +49(0)7223/9493-92

 *	http://www.addi-data.com

 *	info@addi-data.com

/*

 * PCI bar 1 I/O Register map

 protects the following members */

 an async command is running */

 mask of enabled interrupt channels */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_NONE */

 Step 4: fix up any arguments */

 Step 5: check channel list if it exists */

 Check if VCC OR CC interrupt has occurred */

 Disable triggered interrupt sources. */

	/*

	 * Note: We don't reenable the triggered interrupt sources because they

	 * are level-sensitive, hardware error status interrupt sources and

	 * they'd keep triggering interrupts repeatedly.

 Bits in scan data correspond to indices in channel list. */

 Initialize the digital output subdevice */

 Initialize the watchdog subdevice */

 Initialize the interrupt subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/amplc_pc236.c

 * Driver for Amplicon PC36AT DIO boards.

 *

 * Copyright (C) 2002 MEV Ltd. <https://www.mev.co.uk/>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: amplc_pc236

 * Description: Amplicon PC36AT

 * Author: Ian Abbott <abbotti@mev.co.uk>

 * Devices: [Amplicon] PC36AT (pc36at)

 * Updated: Fri, 25 Jul 2014 15:32:40 +0000

 * Status: works

 *

 * Configuration options - PC36AT:

 *   [0] - I/O port base address

 *   [1] - IRQ (optional)

 *

 * The PC36AT board has a single 8255 appearing as subdevice 0.

 *

 * Subdevice 1 pretends to be a digital input device, but it always returns

 * 0 when read. However, if you run a command with scan_begin_src=TRIG_EXT,

 * a rising edge on port C bit 3 acts as an external trigger, which can be

 * used to wake up tasks.  This is like the comedi_parport device, but the

 * only way to physically disable the interrupt on the PC36AT is to remove

 * the IRQ jumper.  If no interrupt is connected, then subdevice 1 is

 * unused.

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/contec_pci_dio.c

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: contec_pci_dio

 * Description: Contec PIO1616L digital I/O board

 * Devices: [Contec] PIO1616L (contec_pci_dio)

 * Author: Stefano Rivoir <s.rivoir@gts.it>

 * Updated: Wed, 27 Jun 2007 13:00:06 +0100

 * Status: works

 *

 * Configuration Options: not applicable, uses comedi PCI auto config

/*

 * Register map

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/cb_pcimdda.c

 * Computer Boards PCIM-DDA06-16 Comedi driver

 * Author: Calin Culianu <calin@ajvar.org>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: cb_pcimdda

 * Description: Measurement Computing PCIM-DDA06-16

 * Devices: [Measurement Computing] PCIM-DDA06-16 (cb_pcimdda)

 * Author: Calin Culianu <calin@ajvar.org>

 * Updated: Mon, 14 Apr 2008 15:15:51 +0100

 * Status: works

 *

 * All features of the PCIM-DDA06-16 board are supported.

 * This board has 6 16-bit AO channels, and the usual 8255 DIO setup.

 * (24 channels, configurable in banks of 8 and 4, etc.).

 * This board does not support commands.

 *

 * The board has a peculiar way of specifying AO gain/range settings -- You have

 * 1 jumper bank on the card, which either makes all 6 AO channels either

 * 5 Volt unipolar, 5V bipolar, 10 Volt unipolar or 10V bipolar.

 *

 * Since there is absolutely _no_ way to tell in software how this jumper is set

 * (well, at least according to the rather thin spec. from Measurement Computing

 * that comes with the board), the driver assumes the jumper is at its factory

 * default setting of +/-5V.

 *

 * Also of note is the fact that this board features another jumper, whose

 * state is also completely invisible to software.  It toggles two possible AO

 * output modes on the board:

 *

 *   - Update Mode: Writing to an AO channel instantaneously updates the actual

 *     signal output by the DAC on the board (this is the factory default).

 *   - Simultaneous XFER Mode: Writing to an AO channel has no effect until

 *     you read from any one of the AO channels.  This is useful for loading

 *     all 6 AO values, and then reading from any one of the AO channels on the

 *     device to instantly update all 6 AO values in unison.  Useful for some

 *     control apps, I would assume? If your jumper is in this setting, then you

 *     need to issue your comedi_data_write()s to load all the values you want,

 *     then issue one comedi_data_read() on any channel on the AO subdevice

 *     to initiate the simultaneous XFER.

 *

 * Configuration Options: not applicable, uses PCI auto config

/*

 * This is a driver for the Computer Boards PCIM-DDA06-16 Analog Output

 * card.  This board has a unique register layout and as such probably

 * deserves its own driver file.

 *

 * It is theoretically possible to integrate this board into the cb_pcidda

 * file, but since that isn't my code, I didn't want to significantly

 * modify that file to support this board (I thought it impolite to do so).

 *

 * At any rate, if you feel ambitious, please feel free to take

 * the code out of this file and combine it with a more unified driver

 * file.

 *

 * I would like to thank Timothy Curry <Timothy.Curry@rdec.redstone.army.mil>

 * for lending me a board so that I could write this driver.

 *

 * -Calin Culianu <calin@ajvar.org>

 device ids of the cards we support -- currently only 1 card supported */

/*

 * Register map, 8-bit access only

		/*

		 * Write the LSB then MSB.

		 *

		 * If the simultaneous xfer mode is selected by the

		 * jumper on the card, a read instruction is needed

		 * in order to initiate the simultaneous transfer.

		 * Otherwise, the DAC will be updated when the MSB

		 * is written.

 Initiate the simultaneous transfer */

 analog output subdevice */

 digital i/o subdevice */

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/amplc_dio200.c

 *

 * Driver for Amplicon PC212E, PC214E, PC215E, PC218E, PC272E.

 *

 * Copyright (C) 2005-2013 MEV Ltd. <https://www.mev.co.uk/>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1998,2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: amplc_dio200

 * Description: Amplicon 200 Series ISA Digital I/O

 * Author: Ian Abbott <abbotti@mev.co.uk>

 * Devices: [Amplicon] PC212E (pc212e), PC214E (pc214e), PC215E (pc215e),

 *   PC218E (pc218e), PC272E (pc272e)

 * Updated: Mon, 18 Mar 2013 14:40:41 +0000

 *

 * Status: works

 *

 * Configuration options:

 *   [0] - I/O port base address

 *   [1] - IRQ (optional, but commands won't work without it)

 *

 * Passing a zero for an option is the same as leaving it unspecified.

 *

 * SUBDEVICES

 *

 *                     PC212E         PC214E         PC215E

 *                  -------------  -------------  -------------

 *   Subdevices           6              4              5

 *    0                 PPI-X          PPI-X          PPI-X

 *    1                 CTR-Y1         PPI-Y          PPI-Y

 *    2                 CTR-Y2         CTR-Z1*        CTR-Z1

 *    3                 CTR-Z1       INTERRUPT*       CTR-Z2

 *    4                 CTR-Z2                      INTERRUPT

 *    5               INTERRUPT

 *

 *                     PC218E         PC272E

 *                  -------------  -------------

 *   Subdevices           7              4

 *    0                 CTR-X1         PPI-X

 *    1                 CTR-X2         PPI-Y

 *    2                 CTR-Y1         PPI-Z

 *    3                 CTR-Y2       INTERRUPT

 *    4                 CTR-Z1

 *    5                 CTR-Z2

 *    6               INTERRUPT

 *

 * Each PPI is a 8255 chip providing 24 DIO channels.  The DIO channels

 * are configurable as inputs or outputs in four groups:

 *

 *   Port A  - channels  0 to  7

 *   Port B  - channels  8 to 15

 *   Port CL - channels 16 to 19

 *   Port CH - channels 20 to 23

 *

 * Only mode 0 of the 8255 chips is supported.

 *

 * Each CTR is a 8254 chip providing 3 16-bit counter channels.  Each

 * channel is configured individually with INSN_CONFIG instructions.  The

 * specific type of configuration instruction is specified in data[0].

 * Some configuration instructions expect an additional parameter in

 * data[1]; others return a value in data[1].  The following configuration

 * instructions are supported:

 *

 *   INSN_CONFIG_SET_COUNTER_MODE.  Sets the counter channel's mode and

 *     BCD/binary setting specified in data[1].

 *

 *   INSN_CONFIG_8254_READ_STATUS.  Reads the status register value for the

 *     counter channel into data[1].

 *

 *   INSN_CONFIG_SET_CLOCK_SRC.  Sets the counter channel's clock source as

 *     specified in data[1] (this is a hardware-specific value).  Not

 *     supported on PC214E.  For the other boards, valid clock sources are

 *     0 to 7 as follows:

 *

 *       0.  CLK n, the counter channel's dedicated CLK input from the SK1

 *         connector.  (N.B. for other values, the counter channel's CLKn

 *         pin on the SK1 connector is an output!)

 *       1.  Internal 10 MHz clock.

 *       2.  Internal 1 MHz clock.

 *       3.  Internal 100 kHz clock.

 *       4.  Internal 10 kHz clock.

 *       5.  Internal 1 kHz clock.

 *       6.  OUT n-1, the output of counter channel n-1 (see note 1 below).

 *       7.  Ext Clock, the counter chip's dedicated Ext Clock input from

 *         the SK1 connector.  This pin is shared by all three counter

 *         channels on the chip.

 *

 *   INSN_CONFIG_GET_CLOCK_SRC.  Returns the counter channel's current

 *     clock source in data[1].  For internal clock sources, data[2] is set

 *     to the period in ns.

 *

 *   INSN_CONFIG_SET_GATE_SRC.  Sets the counter channel's gate source as

 *     specified in data[2] (this is a hardware-specific value).  Not

 *     supported on PC214E.  For the other boards, valid gate sources are 0

 *     to 7 as follows:

 *

 *       0.  VCC (internal +5V d.c.), i.e. gate permanently enabled.

 *       1.  GND (internal 0V d.c.), i.e. gate permanently disabled.

 *       2.  GAT n, the counter channel's dedicated GAT input from the SK1

 *         connector.  (N.B. for other values, the counter channel's GATn

 *         pin on the SK1 connector is an output!)

 *       3.  /OUT n-2, the inverted output of counter channel n-2 (see note

 *         2 below).

 *       4.  Reserved.

 *       5.  Reserved.

 *       6.  Reserved.

 *       7.  Reserved.

 *

 *   INSN_CONFIG_GET_GATE_SRC.  Returns the counter channel's current gate

 *     source in data[2].

 *

 * Clock and gate interconnection notes:

 *

 *   1.  Clock source OUT n-1 is the output of the preceding channel on the

 *   same counter subdevice if n > 0, or the output of channel 2 on the

 *   preceding counter subdevice (see note 3) if n = 0.

 *

 *   2.  Gate source /OUT n-2 is the inverted output of channel 0 on the

 *   same counter subdevice if n = 2, or the inverted output of channel n+1

 *   on the preceding counter subdevice (see note 3) if n < 2.

 *

 *   3.  The counter subdevices are connected in a ring, so the highest

 *   counter subdevice precedes the lowest.

 *

 * The 'INTERRUPT' subdevice pretends to be a digital input subdevice.  The

 * digital inputs come from the interrupt status register.  The number of

 * channels matches the number of interrupt sources.  The PC214E does not

 * have an interrupt status register; see notes on 'INTERRUPT SOURCES'

 * below.

 *

 * INTERRUPT SOURCES

 *

 *                     PC212E         PC214E         PC215E

 *                  -------------  -------------  -------------

 *   Sources              6              1              6

 *    0               PPI-X-C0       JUMPER-J5      PPI-X-C0

 *    1               PPI-X-C3                      PPI-X-C3

 *    2              CTR-Y1-OUT1                    PPI-Y-C0

 *    3              CTR-Y2-OUT1                    PPI-Y-C3

 *    4              CTR-Z1-OUT1                   CTR-Z1-OUT1

 *    5              CTR-Z2-OUT1                   CTR-Z2-OUT1

 *

 *                     PC218E         PC272E

 *                  -------------  -------------

 *   Sources              6              6

 *    0              CTR-X1-OUT1     PPI-X-C0

 *    1              CTR-X2-OUT1     PPI-X-C3

 *    2              CTR-Y1-OUT1     PPI-Y-C0

 *    3              CTR-Y2-OUT1     PPI-Y-C3

 *    4              CTR-Z1-OUT1     PPI-Z-C0

 *    5              CTR-Z2-OUT1     PPI-Z-C3

 *

 * When an interrupt source is enabled in the interrupt source enable

 * register, a rising edge on the source signal latches the corresponding

 * bit to 1 in the interrupt status register.

 *

 * When the interrupt status register value as a whole (actually, just the

 * 6 least significant bits) goes from zero to non-zero, the board will

 * generate an interrupt.  No further interrupts will occur until the

 * interrupt status register is cleared to zero.  To clear a bit to zero in

 * the interrupt status register, the corresponding interrupt source must

 * be disabled in the interrupt source enable register (there is no

 * separate interrupt clear register).

 *

 * The PC214E does not have an interrupt source enable register or an

 * interrupt status register; its 'INTERRUPT' subdevice has a single

 * channel and its interrupt source is selected by the position of jumper

 * J5.

 *

 * COMMANDS

 *

 * The driver supports a read streaming acquisition command on the

 * 'INTERRUPT' subdevice.  The channel list selects the interrupt sources

 * to be enabled.  All channels will be sampled together (convert_src ==

 * TRIG_NOW).  The scan begins a short time after the hardware interrupt

 * occurs, subject to interrupt latencies (scan_begin_src == TRIG_EXT,

 * scan_begin_arg == 0).  The value read from the interrupt status register

 * is packed into a short value, one bit per requested channel, in the

 * order they appear in the channel list.

/*

 * Board descriptions.

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/cb_pcidda.c

 * Driver for the ComputerBoards / MeasurementComputing PCI-DDA series.

 *

 * Copyright (C) 2001 Ivan Martinez <ivanmr@altavista.com>

 * Copyright (C) 2001 Frank Mori Hess <fmhess@users.sourceforge.net>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1997-8 David A. Schleef <ds@schleef.org>

/*

 * Driver: cb_pcidda

 * Description: MeasurementComputing PCI-DDA series

 * Devices: [Measurement Computing] PCI-DDA08/12 (pci-dda08/12),

 *   PCI-DDA04/12 (pci-dda04/12), PCI-DDA02/12 (pci-dda02/12),

 *   PCI-DDA08/16 (pci-dda08/16), PCI-DDA04/16 (pci-dda04/16),

 *   PCI-DDA02/16 (pci-dda02/16)

 * Author: Ivan Martinez <ivanmr@altavista.com>

 *	   Frank Mori Hess <fmhess@users.sourceforge.net>

 * Status: works

 *

 * Configuration options: not applicable, uses PCI auto config

 *

 * Only simple analog output writing is supported.

  number of entries in eeprom */

 maximum number of ao channels for supported boards */

 Digital I/O registers */

 DAC registers */

 D/A Control Register  */

  Simultaneous update  */

  Enable specified DAC */

  Specify DAC channel  */

  2.5V range           */

  5V range             */

  10V range            */

  Unipolar range       */

  D/A CALIBRATION REGISTER 1 */

 write bits */

 serial data input for eeprom, caldacs, reference dac */

 read bits */

 calibration counter overflow status bit */

 analog output is less than reference dac voltage */

  serial data out, for reading from eeprom */

  D/A CALIBRATION REGISTER 2 */

  send serial data in to eeprom */

 don't send serial data to MAX542 reference dac */

 don't send serial data to caldac n */

 manual says to set this bit with no explanation */

 Offsets for the caldac channels */

 bits last written to da calibration register 1 */

 current range settings for output channels */

  software copy of board's eeprom */

 lowlevel read from eeprom */

  number of bits wide values are */

  read bits most significant bit first */

 lowlevel write to eeprom/dac */

  send bits most significant bit first */

 reads a 16 bit value from board's eeprom */

 one caldac for every two dac channels */

 bits to send to tell eeprom we want to read */

  send serial output stream to eeprom */

  deactivate caldacs (one caldac for every two channels) */

  tell eeprom we want to read */

  send address we want to read from */

  deactivate eeprom */

 writes to 8 bit calibration dacs */

 caldacs use 3 bit channel specification */

  8 bit calibration dacs */

 one caldac for every two dac channels */

 write 3 bit channel */

  write 8 bit caldac value */

/*

 * latch stream into appropriate caldac deselect reference dac

  deactivate caldacs (one caldac for every two channels) */

  activate the caldac we want */

  deactivate caldac */

 set caldacs to eeprom values for given channel and range */

 two caldacs per channel */

 caldac channel base */

 save range so we can tell when we need to readjust calibration */

 get values from eeprom data */

 set caldacs */

 analog output subdevice */

 two 8255 digital io subdevices */

 Read the caldac eeprom data */

  set calibrations dacs */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * dac02.c

 * Comedi driver for DAC02 compatible boards

 * Copyright (C) 2014 H Hartley Sweeten <hsweeten@visionengravers.com>

 *

 * Based on the poc driver

 * Copyright (C) 2000 Frank Mori Hess <fmhess@users.sourceforge.net>

 * Copyright (C) 2001 David A. Schleef <ds@schleef.org>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1998 David A. Schleef <ds@schleef.org>

/*

 * Driver: dac02

 * Description: Comedi driver for DAC02 compatible boards

 * Devices: [Keithley Metrabyte] DAC-02 (dac02)

 * Author: H Hartley Sweeten <hsweeten@visionengravers.com>

 * Updated: Tue, 11 Mar 2014 11:27:19 -0700

 * Status: unknown

 *

 * Configuration options:

 *	[0] - I/O port base

/*

 * The output range is selected by jumpering pins on the I/O connector.

 *

 *	    Range      Chan #   Jumper pins        Output

 *	-------------  ------  -------------  -----------------

 *	   0 to 5V       0        21 to 22      24

 *	                 1        15 to 16      18

 *	   0 to 10V      0        20 to 22      24

 *	                 1        14 to 16      18

 *	    +/-5V        0        21 to 22      23

 *	                 1        15 to 16      17

 *	    +/-10V       0        20 to 22      23

 *	                 1        14 to 16      17

 *	  4 to 20mA      0        21 to 22      25

 *	                 1        15 to 16      19

 *	AC reference     0      In on pin 22    24 (2-quadrant)

 *	                        In on pin 22    23 (4-quadrant)

 *	                 1      In on pin 16    18 (2-quadrant)

 *	                        In on pin 16    17 (4-quadrant)

/*

 * Register I/O map

		/*

		 * Unipolar outputs are true binary encoding.

		 * Bipolar outputs are complementary offset binary

		 * (that is, 0 = +full scale, maxdata = -full scale).

		/*

		 * DACs are double-buffered.

		 * Write LSB then MSB to latch output.

 Analog Output subdevice */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Copyright (C) 2004-2019 Bernd Porr, mail@berndporr.me.uk

/*

 * Driver: usbduxfast

 * Description: University of Stirling USB DAQ & INCITE Technology Limited

 * Devices: [ITL] USB-DUX-FAST (usbduxfast)

 * Author: Bernd Porr <mail@berndporr.me.uk>

 * Updated: 16 Nov 2019

 * Status: stable

/*

 * I must give credit here to Chris Baugher who

 * wrote the driver for AT-MIO-16d. I used some parts of this

 * driver. I also must give credits to David Brownell

 * who supported me with the USB development.

 *

 * Bernd Porr

 *

 *

 * Revision history:

 * 1.0: Fixed a rounding error in usbduxfast_ai_cmdtest

 * 0.9: Dropping the first data packet which seems to be from the last transfer.

 *      Buffer overflows in the FX2 are handed over to comedi.

 * 0.92: Dropping now 4 packets. The quad buffer has to be emptied.

 *       Added insn command basically for testing. Sample rate is

 *       1MHz/16ch=62.5kHz

 * 0.99: Ian Abbott pointed out a bug which has been corrected. Thanks!

 * 0.99a: added external trigger.

 * 1.00: added firmware kernel request to the driver which fixed

 *       udev coldplug problem

/*

 * timeout for the USB-transfer

/*

 * constants for "firmware" upload and download

/*

 * internal addresses of the 8051 processor

/*

 * max length of the transfer-buffer for software upload

/*

 * input endpoint number

/*

 * endpoint for the A/D channellist: bulk OUT

/*

 * number of channels

/*

 * size of the waveform descriptor

/*

 * size of one A/D value

/*

 * size of the input-buffer IN BYTES

/*

 * 16 bytes

/*

 * size of the buffer for the dux commands in bytes

/*

 * number of in-URBs which receive the data: min=5

/*

 * min delay steps for more than one channel

 * basically when the mux gives up ;-)

 *

 * steps at 30MHz in the FX2

/*

 * max number of 1/30MHz delay steps

/*

 * number of received packets to ignore before we start handing data

 * over to comedi, it's quad buffering and we have to ignore 4 packets

/*

 * comedi constants

/*

 * private structure of one subdevice

 *

 * this is the structure which holds all the data of this driver

 * one sub device just now: A/D

 BULK-transfer handling: urb */

 asynchronous command is running */

 counter which ignores the first buffers */

/*

 * bulk transfers to usbduxfast

 Set the GPIF bytes, the first byte is the command byte */

 stop aquistion */

 kill the running transfer */

 if command is still running, resubmit urb for BULK transfer */

 exit if not running a command, do not resubmit urb */

 after an unlink command, unplug, ... etc */

 a real error */

	/*

	 * comedi_handle_events() cannot be used in this driver. The (*cancel)

	 * operation would unlink the urb.

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 external start trigger is only valid for 1 or 16 channels */

	/*

	 * Validate the conversion timing:

	 * for 1 channel the timing in 30MHz "steps" is:

	 *	steps <= MAX_SAMPLING_PERIOD

	 * for all other chanlist_len it is:

	 *	MIN_SAMPLING_PERIOD <= steps <= MAX_SAMPLING_PERIOD

 TRIG_NONE */

 Step 4: fix up any arguments */

 Step 5: check channel list if it exists */

	/*

	 * ignore the first buffers from the device if there

	 * is an error condition

		/*

		 * one channel

		/*

		 * for external trigger: looping in this state until

		 * the RDY0 pin becomes zero

 we loop here until ready has been set */

 branch back to state 0 */

 deceision state w/o data */

 RDY0 = 0 */

 we just proceed to state 1 */

 for fast single channel aqu without mux */

				/*

				 * we just stay here at state 1 and rexecute

				 * the same state this gives us 30MHz sampling

				 * rate

 branch back to state 1 */

 deceision state with data */

 doesn't matter */

				/*

				 * we loop through two states: data and delay

				 * max rate is 15MHz

 data */

 doesn't matter */

 branch back to state 1 */

 deceision state w/o data */

 doesn't matter */

			/*

			 * we loop through 3 states: 2x delay and 1x data

			 * this gives a min sampling rate of 60kHz

 we have 1 state with duration 1 */

 do the first part of the delay */

 and the second part */

 get the data and branch back */

 branch back to state 1 */

 deceision state w data */

 doesn't matter */

		/*

		 * two channels

		 * commit data to the FIFO

 data */

 we have 1 state with duration 1: state 0 */

 do the first part of the delay */

 count */

 and the second part */

 data */

		/*

		 * we have 2 states with duration 1: step 6 and

		 * the IDLE state

 do the first part of the delay */

 reset */

 and the second part */

		/*

		 * three channels

			/*

			 * commit data to the FIFO and do the first part

			 * of the delay

 data */

 no change */

 do the second part of the delay */

 no data */

 count */

 2 steps with duration 1: the idele step and step 6: */

 commit data to the FIFO and do the first part of the delay */

 data */

 do the second part of the delay */

 no data */

 reset */

			/*

			 * we loop here until ready has been set

 branch back to state 0 */

 deceision state w/o data */

 reset */

 RDY0 = 0 */

			/*

			 * we just proceed to state 1

 30us reset pulse */

 reset */

 commit data to the FIFO */

 data */

 we have 2 states with duration 1 */

 do the first part of the delay */

 and the second part */

 branch back to state 1 */

 deceision state w/o data */

 doesn't matter */

 0 means that the AD commands are sent */

 enable this acquisition operation */

 fixme: unlink here?? */

 TRIG_INT */

/*

 * Mode 0 is used to get a single conversion on demand.

 set command for the first channel */

 commit data to the FIFO */

 data */

 do the first part of the delay */

 second part */

 we generate a local buffer for the firmware */

 we need a malloc'ed buffer for usb_control_msg() */

 stop the current firmware on the device */

 7f92 to one */

 upload the new firmware to the device */

 start the new firmware on the device */

 7f92 to zero */

 Analog Input subdevice */

 12-bit + 1 overflow bit */

 waits until a running transfer is over */

 { USB_DEVICE(0x4b4, 0x8613) }, testing */

 real ID */

 real ID */

 SPDX-License-Identifier: GPL-2.0+

/*

 *     comedi/drivers/ni_daq_700.c

 *     Driver for DAQCard-700 DIO/AI

 *     copied from 8255

 *

 *     COMEDI - Linux Control and Measurement Device Interface

 *     Copyright (C) 1998 David A. Schleef <ds@schleef.org>

/*

 * Driver: ni_daq_700

 * Description: National Instruments PCMCIA DAQCard-700

 * Author: Fred Brooks <nsaspook@nsaspook.com>,

 *   based on ni_daq_dio24 by Daniel Vecino Castel <dvecino@able.es>

 * Devices: [National Instruments] PCMCIA DAQ-Card-700 (ni_daq_700)

 * Status: works

 * Updated: Wed, 21 May 2014 12:07:20 +0000

 *

 * The daqcard-700 appears in Comedi as a  digital I/O subdevice (0) with

 * 16 channels and a analog input subdevice (1) with 16 single-ended channels

 * or 8 differential channels, and three input ranges.

 *

 * Digital:  The channel 0 corresponds to the daqcard-700's output

 * port, bit 0; channel 8 corresponds to the input port, bit 0.

 *

 * Digital direction configuration: channels 0-7 output, 8-15 input.

 *

 * Analog: The input  range is 0 to 4095 with a default of -10 to +10 volts.

 * Valid ranges:

 *       0 for -10 to 10V bipolar

 *       1 for -5 to 5V bipolar

 *       2 for -2.5 to 2.5V bipolar

 *

 * IRQ is assigned but not used.

 *

 * Manuals:	Register level:	https://www.ni.com/pdf/manuals/340698.pdf

 *		User Manual:	https://www.ni.com/pdf/manuals/320676d.pdf

 daqcard700 registers */

 WO 8bit */

 RO 8bit */

 WO 8bit */

 RW 8bit */

 W0 8bit */

 RO 8bit */

 RO 8bit */

 RO 16bit */

 WO 8bit */

 RW 8bit */

 RW 8bit */

 RW 8bit */

 RO 8bit */

 WO 8bit */

 daqcard700 modes */

 diff mode */

 The DIO channels are not configurable, fix the io_bits */

 set channel input modes */

 write channel mode/range */

 convert range to hardware value */

 write channel to multiplexer */

 set mask scan bit high to disable scanning */

 mux needs 2us to really settle [Fred Brooks]. */

 convert n samples */

 trigger conversion with out0 L to H */

 enable ADC conversions */

 mode 0 out0 L, from H */

 clear the ADC FIFO */

 read 16bit junk from FIFO to clear */

 mode 1 out0 H, L to H, start conversion */

 wait for conversion to end */

 read data */

 mangle the data as necessary */

 Bipolar Offset Binary: 0 to 4095 for -10 to +10 */

/*

 * Data acquisition is enabled.

 * The counter 0 output is high.

 * The I/O connector pin CLK1 drives counter 1 source.

 * Multiple-channel scanning is disabled.

 * All interrupts are disabled.

 * The analog input range is set to +-10 V

 * The analog input mode is single-ended.

 * The analog input circuitry is initialized to channel 0.

 * The A/D FIFO is cleared.

 disable scanning, ADC to chan 0 */

 clear all bits */

 set +-10 range */

 config counter mode1, out0 to H */

 clear counter interrupt */

 clear the ADC FIFO */

 read 16bit junk from FIFO to clear */

 DAQCard-700 dio */

 DAQCard-700 ai */

 SPDX-License-Identifier: GPL-2.0

/*

 * comedi/drivers/pcl818.c

 *

 * Driver: pcl818

 * Description: Advantech PCL-818 cards, PCL-718

 * Author: Michal Dobes <dobes@tesnet.cz>

 * Devices: [Advantech] PCL-818L (pcl818l), PCL-818H (pcl818h),

 *   PCL-818HD (pcl818hd), PCL-818HG (pcl818hg), PCL-818 (pcl818),

 *   PCL-718 (pcl718)

 * Status: works

 *

 * All cards have 16 SE/8 DIFF ADCs, one or two DACs, 16 DI and 16 DO.

 * Differences are only at maximal sample speed, range list and FIFO

 * support.

 * The driver support AI mode 0, 1, 3 other subdevices (AO, DI, DO) support

 * only mode 0. If DMA/FIFO/INT are disabled then AI support only mode 0.

 * PCL-818HD and PCL-818HG support 1kword FIFO. Driver support this FIFO

 * but this code is untested.

 * A word or two about DMA. Driver support DMA operations at two ways:

 * 1) DMA uses two buffers and after one is filled then is generated

 *    INT and DMA restart with second buffer. With this mode I'm unable run

 *    more that 80Ksamples/secs without data dropouts on K6/233.

 * 2) DMA uses one buffer and run in autoinit mode and the data are

 *    from DMA buffer moved on the fly with 2kHz interrupts from RTC.

 *    This mode is used if the interrupt 8 is available for allocation.

 *    If not, then first DMA mode is used. With this I can run at

 *    full speed one card (100ksamples/secs) or two cards with

 *    60ksamples/secs each (more is problem on account of ISA limitations).

 *    To use this mode you must have compiled  kernel with disabled

 *    "Enhanced Real Time Clock Support".

 *    Maybe you can have problems if you use xntpd or similar.

 *    If you've data dropouts with DMA mode 2 then:

 *     a) disable IDE DMA

 *     b) switch text mode console to fb.

 *

 *  Options for PCL-818L:

 *  [0] - IO Base

 *  [1] - IRQ        (0=disable, 2, 3, 4, 5, 6, 7)

 *  [2] - DMA        (0=disable, 1, 3)

 *  [3] - 0, 10=10MHz clock for 8254

 *            1= 1MHz clock for 8254

 *  [4] - 0,  5=A/D input  -5V.. +5V

 *        1, 10=A/D input -10V..+10V

 *  [5] - 0,  5=D/A output 0-5V  (internal reference -5V)

 *        1, 10=D/A output 0-10V (internal reference -10V)

 *        2    =D/A output unknown (external reference)

 *

 *  Options for PCL-818, PCL-818H:

 *  [0] - IO Base

 *  [1] - IRQ        (0=disable, 2, 3, 4, 5, 6, 7)

 *  [2] - DMA        (0=disable, 1, 3)

 *  [3] - 0, 10=10MHz clock for 8254

 *            1= 1MHz clock for 8254

 *  [4] - 0,  5=D/A output 0-5V  (internal reference -5V)

 *        1, 10=D/A output 0-10V (internal reference -10V)

 *        2    =D/A output unknown (external reference)

 *

 *  Options for PCL-818HD, PCL-818HG:

 *  [0] - IO Base

 *  [1] - IRQ        (0=disable, 2, 3, 4, 5, 6, 7)

 *  [2] - DMA/FIFO  (-1=use FIFO, 0=disable both FIFO and DMA,

 *                    1=use DMA ch 1, 3=use DMA ch 3)

 *  [3] - 0, 10=10MHz clock for 8254

 *            1= 1MHz clock for 8254

 *  [4] - 0,  5=D/A output 0-5V  (internal reference -5V)

 *        1, 10=D/A output 0-10V (internal reference -10V)

 *        2    =D/A output unknown (external reference)

 *

 *  Options for PCL-718:

 *  [0] - IO Base

 *  [1] - IRQ        (0=disable, 2, 3, 4, 5, 6, 7)

 *  [2] - DMA        (0=disable, 1, 3)

 *  [3] - 0, 10=10MHz clock for 8254

 *            1= 1MHz clock for 8254

 *  [4] -     0=A/D Range is +/-10V

 *            1=             +/-5V

 *            2=             +/-2.5V

 *            3=             +/-1V

 *            4=             +/-0.5V

 *            5=             user defined bipolar

 *            6=             0-10V

 *            7=             0-5V

 *            8=             0-2V

 *            9=             0-1V

 *           10=             user defined unipolar

 *  [5] - 0,  5=D/A outputs 0-5V  (internal reference -5V)

 *        1, 10=D/A outputs 0-10V (internal reference -10V)

 *            2=D/A outputs unknown (external reference)

 *  [6] - 0, 60=max  60kHz A/D sampling

 *        1,100=max 100kHz A/D sampling (PCL-718 with Option 001 installed)

 *

/*

 * Register I/O map

 0=ext clk */

 W: fifo enable/disable */

 W: fifo interrupt clear */

 W: fifo interrupt clear */

 R: fifo status */

 R: one record from FIFO */

  manimal allowed delay between samples (in us) for actual card */

  MUX setting for actual AI operations */

  how long is actual MUX list */

  actual position in MUX list */

	/*

	 * Determine dma size based on the buffer maxsize plus the number of

	 * unread samples and the number of samples remaining in the command.

 store range list to card */

 writing any value clears the interrupt request */

 writing any value triggers a software conversion */

 restart dma with the next buffer */

		/*

		 * The cleanup from ai_cancel() has been delayed

		 * until now because the card doesn't seem to like

		 * being reprogrammed while a DMA transfer is in

		 * progress.

 correct channel and range number check itself comedi/range.c */

  first channel is every time ok */

  build part of chanlist */

 we detect loop, this must by finish */

  channel list isn't continuous :-( */

  well, this is next correct channel in list */

  check whole chanlist */

  chan/gain list is strange */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_EXT */

 TRIG_NONE */

 step 4: fix up any arguments */

 step 5: complain about special chanlist considerations */

  incorrect channels list */

 setup and enable dma for the first buffer */

 enable FIFO */

				/*

				 * Wait for running dma transfer to end,

				 * do cleanup in interrupt.

  FIFO shutdown */

 flush and disable the FIFO */

 disable analog input trigger */

 stop pacer */

 set analog output channels to 0V */

 set all digital outputs low */

 default to the range table from the boardinfo */

 now check the user config option based on the boardtype */

 secondary range list jumper selectable */

 only DMA channels 3 and 1 are valid */

 DMA uses two 16K buffers */

 we can use IRQ 2-7 for async command support */

 should we use the FIFO? */

 we need an IRQ to do DMA on channel 3 or 1 */

 use 1MHz or 10MHz oscilator */

 max sampling speed */

 extended PCL718 to 100kHz DAC */

 Analog Output subdevice */

 Digital Input subdevice */

 Digital Output subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * ni_65xx.c

 * Comedi driver for National Instruments PCI-65xx static dio boards

 *

 * Copyright (C) 2006 Jon Grierson <jd@renko.co.uk>

 * Copyright (C) 2006 Frank Mori Hess <fmhess@users.sourceforge.net>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1999,2002,2003 David A. Schleef <ds@schleef.org>

/*

 * Driver: ni_65xx

 * Description: National Instruments 65xx static dio boards

 * Author: Jon Grierson <jd@renko.co.uk>,

 *	   Frank Mori Hess <fmhess@users.sourceforge.net>

 * Status: testing

 * Devices: [National Instruments] PCI-6509 (pci-6509), PXI-6509 (pxi-6509),

 *   PCI-6510 (pci-6510), PCI-6511 (pci-6511), PXI-6511 (pxi-6511),

 *   PCI-6512 (pci-6512), PXI-6512 (pxi-6512), PCI-6513 (pci-6513),

 *   PXI-6513 (pxi-6513), PCI-6514 (pci-6514), PXI-6514 (pxi-6514),

 *   PCI-6515 (pxi-6515), PXI-6515 (pxi-6515), PCI-6516 (pci-6516),

 *   PCI-6517 (pci-6517), PCI-6518 (pci-6518), PCI-6519 (pci-6519),

 *   PCI-6520 (pci-6520), PCI-6521 (pci-6521), PXI-6521 (pxi-6521),

 *   PCI-6528 (pci-6528), PXI-6528 (pxi-6528)

 * Updated: Mon, 21 Jul 2014 12:49:58 +0000

 *

 * Configuration Options: not applicable, uses PCI auto config

 *

 * Based on the PCI-6527 driver by ds.

 * The interrupt subdevice (subdevice 3) is probably broken for all

 * boards except maybe the 6514.

 *

 * This driver previously inverted the outputs on PCI-6513 through to

 * PCI-6519 and on PXI-6513 through to PXI-6515.  It no longer inverts

 * outputs on those cards by default as it didn't make much sense.  If

 * you require the outputs to be inverted on those cards for legacy

 * reasons, set the module parameter "legacy_invert_outputs=true" when

 * loading the module, or set "ni_65xx.legacy_invert_outputs=true" on

 * the kernel command line if the driver is built in to the kernel.

/*

 * Manuals (available from ftp://ftp.natinst.com/support/manuals)

 *

 *	370106b.pdf	6514 Register Level Programmer Manual

/*

 * PCI BAR1 Register Map

 Non-recurring Registers (8-bit except where noted) */

 32-bit */

 32-bit */

 16-bit */

 16-bit */

 16-bit */

 16-bit */

 PXI-6528 only */

 32-bit */

 Recurring port registers (8-bit) */

 disable input filtering on all ports */

 set filter interval to 0 (32bit reg) */

 updates edge detection for base_chan to base_chan+31 */

 clear edge detection for channels 0 to 31 */

 clear edge detection for channels 32 to 63 */

 clear edge detection for channels 64 to 95 */

		/*

		 * The deglitch filter interval is specified in nanoseconds.

		 * The hardware supports intervals in 200ns increments. Round

		 * the user values up and return the actual interval.

		/*

		 * Enable/disable the channel for deglitch filtering. Note

		 * that the filter interval is never set to '0'. This is done

		 * because other channels might still be enabled for filtering.

 update the outputs */

 invert if necessary */

 invert back */

 read back the actual state */

 invert if necessary */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 Step 4: fix up any arguments */

 Step 5: check channel list if it exists */

 add instruction to check_insn_config_length() */

 update edge detection for channels 0 to 31 */

 clear edge detection for channels 32 to 63 */

 clear edge detection for channels 64 to 95 */

 check trigger number */

 check digital trigger operation */

			/*

			 * update edge detection for channels data[3]

			 * to (data[3] + 31)

 ripped from mite.h and mite_setup2() to avoid mite dependency */

 IO Device Window Base Size Register */

 window enable */

 ioremap the MITE registers (BAR 0) temporarily */

 set data window to main registers (BAR 1) */

 finished with MITE registers */

 the input ports always start at port 0 */

 the output ports always start after the input ports */

		/*

		 * Use the io_bits to handle the inverted outputs.  Inverted

		 * outputs are only supported if the "legacy_invert_outputs"

		 * module parameter is set to "true".

 reset all output ports to comedi '0' */

 inverted if necessary */

 the input/output ports always start at port 0 */

 configure all ports for input */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * Command support for NI general purpose counters

 *

 * Copyright (C) 2006 Frank Mori Hess <fmhess@users.sourceforge.net>

/*

 * Module: ni_tiocmd

 * Description: National Instruments general purpose counters command support

 * Author: J.P. Mellor <jpmellor@rose-hulman.edu>,

 *         Herman.Bruyninckx@mech.kuleuven.ac.be,

 *         Wim.Meeussen@mech.kuleuven.ac.be,

 *         Klaas.Gadeyne@mech.kuleuven.ac.be,

 *         Frank Mori Hess <fmhess@users.sourceforge.net>

 * Updated: Fri, 11 Apr 2008 12:32:35 +0100

 * Status: works

 *

 * This module is not used directly by end-users.  Rather, it

 * is used by other drivers (for example ni_660x and ni_pcimio)

 * to provide command support for NI's general purpose counters.

 * It was originally split out of ni_tio.c to stop the 'ni_tio'

 * module depending on the 'mite' module.

 *

 * References:

 * DAQ 660x Register-Level Programmer Manual  (NI 370505A-01)

 * DAQ 6601/6602 User Manual (NI 322137B-01)

 * 340934b.pdf  DAQ-STC reference manual

 *

 * TODO: Support use of both banks X and Y

 write alloc the entire buffer */

 TRIG_NOW || TRIG_EXT || TRIG_OTHER */

 using a device-global name. lookup reg */

 mark this as a raw register value */

 Lookup and use the real register values */

			/*

			 * This function must be used separately since it does

			 * not expect real register values and attempts to

			 * convert these to real register values.

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 start_arg is the start_trigger passed to ni_tio_arm() */

		/*

		 * This should be done, but we don't yet know the actual

		 * register values.  These should be tested and then documented

		 * in the ni_route_values/ni_*.csv files, with indication of

		 * who/when/which/how these were tested.

		 * When at least a e/m/660x series have been tested, this code

		 * should be uncommented:

		 *

		 * err |= ni_check_trigger_arg(CR_CHAN(cmd->start_arg),

		 *			    NI_CtrArmStartTrigger(cidx),

		 *			    routing_tables);

	/*

	 * It seems that convention is to allow either scan_begin_arg or

	 * convert_arg to specify the Gate source, with scan_begin_arg taking

	 * precedence.

 Step 4: fix up any arguments */

 Step 5: check channel list if it exists */

		/*

		 * not sure if 660x really supports gate interrupts

		 * (the bits are not listed in register-level manual)

		/*

		 * During buffered input counter operation for e-series,

		 * the gate interrupt is acked automatically by the dma

		 * controller, due to the Gi_Read/Write_Acknowledges_IRQ

		 * bits in the input select register.

			/*

			 * 660x don't support automatic acknowledgment

			 * of gate interrupt via dma read/write

			 * and report bogus gate errors

 SPDX-License-Identifier: GPL-2.0+

/*

 * dt3000.c

 * Data Translation DT3000 series driver

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1999 David A. Schleef <ds@schleef.org>

/*

 * Driver: dt3000

 * Description: Data Translation DT3000 series

 * Devices: [Data Translation] DT3001 (dt3000), DT3001-PGL, DT3002, DT3003,

 *   DT3003-PGL, DT3004, DT3005, DT3004-200

 * Author: ds

 * Updated: Mon, 14 Apr 2008 15:41:24 +0100

 * Status: works

 *

 * Configuration Options: not applicable, uses PCI auto config

 *

 * There is code to support AI commands, but it may not work.

 *

 * AO commands are not supported.

/*

 * The DT3000 series is Data Translation's attempt to make a PCI

 * data acquisition board.  The design of this series is very nice,

 * since each board has an on-board DSP (Texas Instruments TMS320C52).

 * However, a few details are a little annoying.  The boards lack

 * bus-mastering DMA, which eliminates them from serious work.

 * They also are not capable of autocalibration, which is a common

 * feature in modern hardware.  The default firmware is pretty bad,

 * making it nearly impossible to write an RT compatible driver.

 * It would make an interesting project to write a decent firmware

 * for these boards.

 *

 * Data Translation originally wanted an NDA for the documentation

 * for the 3k series.  However, if you ask nicely, they might send

 * you the docs without one, also.

/*

 * PCI BAR0 - dual-ported RAM location definitions (dev->mmio)

 a.k.a. 3004-200 */

 FIXME! Assumes shared interrupt is for this card. */

 What's this debug_n_ints stuff? Obviously needs some work... */

 This function needs improvement */

 Don't know if divider==0 works. */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_NONE */

 step 4: fix up any arguments */

 XXX docs don't explain how to select aref */

 XXX */

 XXX write 0 to DPR_PARAMS(1) and DPR_PARAMS(2) ? */

 Analog Input subdevice */

 XXX */

 Analog Output subdevice */

 Digital I/O subdevice */

 Memory subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * aio_aio12_8.c

 * Driver for Access I/O Products PC-104 AIO12-8 Analog I/O Board

 * Copyright (C) 2006 C&C Technologies, Inc.

/*

 * Driver: aio_aio12_8

 * Description: Access I/O Products PC-104 AIO12-8 Analog I/O Board

 * Author: Pablo Mejia <pablo.mejia@cctechnol.com>

 * Devices: [Access I/O] PC-104 AIO12-8 (aio_aio12_8),

 *   [Access I/O] PC-104 AI12-8 (aio_ai12_8),

 *   [Access I/O] PC-104 AO12-4 (aio_ao12_4)

 * Status: experimental

 *

 * Configuration Options:

 *   [0] - I/O port base address

 *

 * Notes:

 * Only synchronous operations are supported.

/*

 * Register map

	/*

	 * Setup the control byte for internal 2MHz clock, 3uS conversion,

	 * at the desired range of the requested channel.

 Read status to clear EOC latch */

  Setup and start conversion */

  Wait for conversion to complete */

 munge bipolar 2's complement data to offset binary */

 enable DACs */

		/*

		 * Channels 0 and 2 have external clock sources.

		 * Channel 1 has a fixed 1 MHz clock source.

 Analog Input subdevice */

 Analog Output subdevice */

 Digital I/O subdevice (8255) */

 Counter subdevice (8254) */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0

/*

 * comedi/drivers/adv_pci_dio.c

 *

 * Author: Michal Dobes <dobes@tesnet.cz>

 *

 *  Hardware driver for Advantech PCI DIO cards.

/*

 * Driver: adv_pci_dio

 * Description: Advantech Digital I/O Cards

 * Devices: [Advantech] PCI-1730 (adv_pci_dio), PCI-1733,

 *   PCI-1734, PCI-1735U, PCI-1736UP, PCI-1739U, PCI-1750,

 *   PCI-1751, PCI-1752, PCI-1753, PCI-1753+PCI-1753E,

 *   PCI-1754, PCI-1756, PCI-1761, PCI-1762

 * Author: Michal Dobes <dobes@tesnet.cz>

 * Updated: Fri, 25 Aug 2017 07:23:06 +0300

 * Status: untested

 *

 * Configuration Options: not applicable, uses PCI auto config

/*

 * Register offset definitions

 PCI-1730, PCI-1733, PCI-1736 interrupt control registers */

 R/W: enable/disable */

 R/W: falling/rising edge */

 R: status */

 W: clear */

 IDI0 edge occurred */

 IDI1 edge occurred */

 DI0 edge occurred */

 DI1 edge occurred */

 PCI-1739U, PCI-1750, PCI1751 interrupt control registers */

 R/W: status/control */

 PCI-1753, PCI-1753E interrupt control registers */

 R/W: control group 0 to 3 */

 R/W: control group 0 to 3 */

 PCI-1754, PCI-1756 interrupt control registers */

 R/W: control group 0 to 3 */

 PCI-1752, PCI-1756 special registers */

 R/W: channel freeze function */

 PCI-1761 interrupt control registers */

 R/W: enable/disable interrupts */

 R/W: falling/rising edge */

 R/W: clear interrupts */

 PCI-1762 interrupt control registers */

 R/W: status/control */

 maximum number of subdevice descriptions in the boardinfo */

 2 x 8/16/32 input channels max */

 2 x 8/16/32 output channels max */

 2 x any number of 8255 devices max */

 4 x 1 input IRQ channels max */

  num of chans or 8255 devices */

  PCI address offset */

 interrupt enable/status bit */

 PCI address offset */

  board name */

 DI, IDI, DO, IDO, ID, IRQ_DI0, IRQ_DI1, IRQ_IDI0, IRQ_IDI1 */

 DI 0-15 */

 ISO DI 0-15 */

 DO 0-15 */

 ISO DO 0-15 */

 DI 0 */

 DI 1 */

 ISO DI 0 */

 ISO DI 1 */

 ISO DI 0-31 */

 ISO DO 0-31 */

 DI 0-31 */

 DO 0-31 */

 ISO DI 0-15 */

 ISO DO 0-15 */

 8255 DIO */

 ISO DI 0-15 */

 ISO DO 0-15 */

 8255 DIO */

 DO 0-31 */

 DO 32-63 */

 8255 DIO */

 8255 DIO */

 8255 DIO */

 DI 0-31 */

 DI 32-63 */

 DI 0-31 */

 DO 0-31 */

 ISO DI 0-7 */

 RELAY DO 0-7 */

 ISO DI 0-15 */

 ISO DO 0-15 */

 spin-lock for cmd_running */

 Ignore interrupt before device fully attached. */

 Might not even have allocated subdevices yet! */

 Check if we are source of interrupt */

 clear all current interrupt flags */

 check irq subdevice triggers */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

	/*

	 * For scan_begin_arg, the trigger number must be 0 and the only

	 * allowed flags are CR_EDGE and CR_INVERT.  CR_EDGE is ignored,

	 * CR_INVERT sets the trigger to falling edge.

 Step 4: fix up any arguments */

 Step 5: check channel list if it exists */

 falling edge */

 rising edge */

 enable interrupt source */

 same as _insn_bits_di_ because the IRQ-pins are the DI-ports  */

 disable channel freeze function on the PCI-1752/1756 boards */

 disable and clear interrupts */

 Reset all 4 Int Flags */

 Rising Edge => IRQ . On all 4 Pins */

 disable interrupts */

 clear interrupts */

 set rising edge trigger */

 request IRQ if device has irq subdevices */

 reset all outputs to 0 */

 first interrupt subdevice index */

	/*

	 * Change cardtype from TYPE_PCI1753 to TYPE_PCI1753E if expansion

	 * board available.  Need to enable PCI device and request the main

	 * registers PCI BAR temporarily to perform the test.

		/*

		 * This test is based on Advantech's "advdaq" driver source

		 * (which declares its module licence as "GPL" although the

		 * driver source does not include a "COPYING" file).

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/me_daq.c

 * Hardware driver for Meilhaus data acquisition cards:

 *   ME-2000i, ME-2600i, ME-3000vm1

 *

 * Copyright (C) 2002 Michael Hillmann <hillmann@syscongroup.de>

/*

 * Driver: me_daq

 * Description: Meilhaus PCI data acquisition cards

 * Devices: [Meilhaus] ME-2600i (me-2600i), ME-2000i (me-2000i)

 * Author: Michael Hillmann <hillmann@syscongroup.de>

 * Status: experimental

 *

 * Configuration options: not applicable, uses PCI auto config

 *

 * Supports:

 *    Analog Input, Analog Output, Digital I/O

 Xilinx registers */

/*

 * PCI BAR2 Memory map (dev->mmio)

 R (ai start) | W */

 R (dac update) | W */

 R | W (clears interrupts) */

 R | W */

 R | W */

 - | W */

 R (fifo) | W (chanlist) */

 R (updates) | W */

 - | W */

 - | W */

 - | W */

 R | - */

 PLX configuration base address */

 Mirror of CONTROL_1 register */

 Mirror of CONTROL_2 register */

 Mirror of the DAC_CONTROL register */

	/*

	 * For differential operation, there are only 8 input channels

	 * and only bipolar ranges are available.

 clear chanlist and ad fifo */

 clear interrupts */

 enable the chanlist and ADC fifo */

 write to channel list fifo */

 set ADC mode to software trigger */

 start ai conversion */

 wait for ADC fifo not empty flag */

 get value from ADC fifo */

 munge 2's complement value to offset binary */

 stop any running conversion */

 Enable all DAC */

 and set DAC to "buffered" mode */

 Set dac-control register */

 Update dac-control register */

 Set data register */

 Update dac with data registers */

 disable irq's on PLX */

 First, make a dummy read to reset xilinx */

 Wait until reset is over */

 Write a dummy value to Xilinx */

	/*

	 * Format of the firmware

	 * Build longs from the byte-wise coded header

	 * Byte 1-3:   length of the array

	 * Byte 4-7:   version

	 * Byte 8-11:  date

	 * Byte 12-15: reserved

	/*

	 * Loop for writing firmware byte by byte to xilinx

	 * Firmware data start at offset 16

 Write 5 dummy values to xilinx */

 Test if there was an error during download -> INTB was thrown */

 Disable interrupt */

 Wait until the Xilinx is ready for real work */

 Enable PLX-Interrupts */

 Reset board */

 clear interrupts */

 Save values in the board context */

 Download firmware and reset card */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/daqboard2000.c

 * hardware driver for IOtech DAQboard/2000

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1999 Anders Blomdell <anders.blomdell@control.lth.se>

/*

 * Driver: daqboard2000

 * Description: IOTech DAQBoard/2000

 * Author: Anders Blomdell <anders.blomdell@control.lth.se>

 * Status: works

 * Updated: Mon, 14 Apr 2008 15:28:52 +0100

 * Devices: [IOTech] DAQBoard/2000 (daqboard2000)

 *

 * Much of the functionality of this driver was determined from reading

 * the source code for the Windows driver.

 *

 * The FPGA on the board requires firmware, which is available from

 * https://www.comedi.org in the comedi_nonfree_firmware tarball.

 *

 * Configuration options: not applicable, uses PCI auto config

/*

 * This card was obviously never intended to leave the Windows world,

 * since it lacked all kind of hardware documentation (except for cable

 * pinouts, plug and pray has something to catch up with yet).

 *

 * With some help from our swedish distributor, we got the Windows sourcecode

 * for the card, and here are the findings so far.

 *

 * 1. A good document that describes the PCI interface chip is 9080db-106.pdf

 *    available from http://www.plxtech.com/products/io/pci9080

 *

 * 2. The initialization done so far is:

 *      a. program the FPGA (windows code sans a lot of error messages)

 *      b.

 *

 * 3. Analog out seems to work OK with DAC's disabled, if DAC's are enabled,

 *    you have to output values to all enabled DAC's until result appears, I

 *    guess that it has something to do with pacer clocks, but the source

 *    gives me no clues. I'll keep it simple so far.

 *

 * 4. Analog in.

 *    Each channel in the scanlist seems to be controlled by four

 *    control words:

 *

 *	Word0:

 *	  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 *	  ! | | | ! | | | ! | | | ! | | | !

 *	  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 *

 *	Word1:

 *	  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 *	  ! | | | ! | | | ! | | | ! | | | !

 *	  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 *	   |             |       | | | | |

 *	   +------+------+       | | | | +-- Digital input (??)

 *		  |		 | | | +---- 10 us settling time

 *		  |		 | | +------ Suspend acquisition (last to scan)

 *		  |		 | +-------- Simultaneous sample and hold

 *		  |		 +---------- Signed data format

 *		  +------------------------- Correction offset low

 *

 *	Word2:

 *	  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 *	  ! | | | ! | | | ! | | | ! | | | !

 *	  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 *	   |     | |     | | | | | |     |

 *	   +-----+ +--+--+ +++ +++ +--+--+

 *	      |       |     |   |     +----- Expansion channel

 *	      |       |     |   +----------- Expansion gain

 *	      |       |     +--------------- Channel (low)

 *	      |       +--------------------- Correction offset high

 *	      +----------------------------- Correction gain low

 *	Word3:

 *	  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 *	  ! | | | ! | | | ! | | | ! | | | !

 *	  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 *	   |             | | | |   | | | |

 *	   +------+------+ | | +-+-+ | | +-- Low bank enable

 *		  |	   | |   |   | +---- High bank enable

 *		  |	   | |   |   +------ Hi/low select

 *		  |	   | |   +---------- Gain (1,?,2,4,8,16,32,64)

 *		  |	   | +-------------- differential/single ended

 *		  |	   +---------------- Unipolar

 *		  +------------------------- Correction gain high

 *

 * 999. The card seems to have an incredible amount of capabilities, but

 *      trying to reverse engineer them from the Windows source is beyond my

 *      patience.

 *

/*

 * Register Memory Map

 u16 (w) */

 u16 (r) */

 u16 */

 u32 */

 u16 */

 u16 */

 u16 */

 u16 */

 u16 */

 u16 */

 u16 */

 u16 (w) */

 u16 (r) */

 s16 */

 u16 */

 u16 */

 u16 */

 s16 */

 u16 */

 u16 */

 s16 */

 s16 */

 u16 */

 s16 */

 u16 */

 u16 */

 u16 */

 u16 */

 u16 */

 u16 */

 s16 */

 CPLD registers */

 u16 (r) */

 u16 (w) */

 Scan Sequencer programming */

 Prepare for acquisition */

 Pacer Clock Control */

 Acquisition status bits */

 DAC status */

 DAC control */

 Trigger Control */

 Reference Dac Selection */

 CPLD status bits */

 "New CPLD" signature. */

 false: 4 AO chans; true: 2 AO chans */

 Channel 0-7 diff, channel 8-23 single ended */

 Last scan */

 These should be read from EEPROM */

 offset */

 gain */

	/*

	 * If pacer clock is not set to some high value (> 10 us), we

	 * risk multiple samples to be put into the result FIFO.

 1 second, should be long enough */

	/*

	 * This doesn't look efficient.  I decided to take the conservative

	 * approach when I did the insn conversion.  Perhaps it would be

	 * better to have broken it completely, then someone would have been

	 * forced to fix it.  --ds

 Enable reading from the scanlist FIFO */

 Not in the original code, but I like symmetry... */

 timeout after 50 tries -> 5ms */

 Time out after 200 tries -> 20ms */

 General Purpose Input (USERI) set on FPGA "DONE". */

 Look for FPGA start sequence in firmware. */

 Check length is even. */

 Strip firmware header. */

 Check to make sure the serial eeprom is present on the board */

 Disable hardware triggers */

 Stop the scan list FIFO from loading the configuration pipe */

 Stop the pacer clock */

 Stop the input dma (abort channel 1) */

  Set the + reference dac value in the FPGA */

  Set the - reference dac value in the FPGA */

 ai subdevice */

 ao subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/das800.c

 * Driver for Keitley das800 series boards and compatibles

 * Copyright (C) 2000 Frank Mori Hess <fmhess@users.sourceforge.net>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: das800

 * Description: Keithley Metrabyte DAS800 (& compatibles)

 * Author: Frank Mori Hess <fmhess@users.sourceforge.net>

 * Devices: [Keithley Metrabyte] DAS-800 (das-800), DAS-801 (das-801),

 * DAS-802 (das-802),

 * [Measurement Computing] CIO-DAS800 (cio-das800),

 * CIO-DAS801 (cio-das801), CIO-DAS802 (cio-das802),

 * CIO-DAS802/16 (cio-das802/16)

 * Status: works, cio-das802/16 untested - email me if you have tested it

 *

 * Configuration options:

 * [0] - I/O port base address

 * [1] - IRQ (optional, required for timed or externally triggered conversions)

 *

 * Notes:

 *	IRQ can be omitted, although the cmd interface will not work without it.

 *

 *	All entries in the channel/gain list must use the same gain and be

 *	consecutive channels counting upwards in channel number (these are

 *	hardware limitations.)

 *

 *	I've never tested the gain setting stuff since I only have a

 *	DAS-800 board with fixed gain.

 *

 *	The cio-das802/16 does not have a fifo-empty status bit!  Therefore

 *	only fifo-half-full transfers are possible with this card.

 *

 * cmd triggers supported:

 *	start_src:      TRIG_NOW | TRIG_EXT

 *	scan_begin_src: TRIG_FOLLOW

 *	scan_end_src:   TRIG_COUNT

 *	convert_src:    TRIG_TIMER | TRIG_EXT

 *	stop_src:       TRIG_NONE | TRIG_COUNT

  number of analog input channels */

 Registers for the das800 */

 cio-das802/16 fifo overflow */

 cio-das802/16 fifo half full int ena */

 digital output bits */

	/*

	 * Select dev->iobase + 2 to be desired register

	 * then write to that register.

	/*

	 * Select dev->iobase + 7 to be desired register

	 * then read from that register.

  enable fifo-half full interrupts for cio-das802/16 */

 enable hardware triggering */

 enable card's interrupt */

 disable hardware triggering of conversions */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_NONE */

 step 4: fix up any arguments */

 Step 5: check channel list if it exists */

 set scan limits */

 set gain */

	/* enable auto channel scan, send interrupts on end of conversion

	 * and set clock source to internal or external

	/*

	 * Don't release spinlock yet since we want to make sure

	 * no one else disables hardware conversions.

 if hardware conversions are not enabled, then quit */

 cio-das802/16 has no fifo empty status bit */

 12-bit sample */

		/*

		 * Re-enable card's interrupt.

		 * We already have spinlock, so indirect addressing is safe

 otherwise, stop taking data */

 set multiplexer */

 set gain / range */

 trigger conversion */

 12-bit sample */

	/*

	 * The dev->board_ptr will be set by comedi_device_attach() if the

	 * board name provided by the user matches a board->name in this

	 * driver. If so, this function sanity checks the id_bits to verify

	 * that the board is correct.

	 *

	 * If the dev->board_ptr is not set, the user is trying to attach

	 * an unspecified board to this driver. In this case the id_bits

	 * are used to 'probe' for the correct dev->board_ptr.

 Analog Input subdevice */

 Digital Input subdevice */

 Digital Output subdevice */

 initialize digital out channels */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi_parport.c

 * Comedi driver for standard parallel port

 *

 * For more information see:

 *	http://retired.beyondlogic.org/spp/parallel.htm

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1998,2001 David A. Schleef <ds@schleef.org>

/*

 * Driver: comedi_parport

 * Description: Standard PC parallel port

 * Author: ds

 * Status: works in immediate mode

 * Devices: [standard] parallel port (comedi_parport)

 * Updated: Tue, 30 Apr 2002 21:11:45 -0700

 *

 * A cheap and easy way to get a few more digital I/O lines. Steal

 * additional parallel ports from old computers or your neighbors'

 * computers.

 *

 * Option list:

 *   0: I/O port base for the parallel port.

 *   1: IRQ (optional)

 *

 * Parallel Port Lines:

 *

 *	 pin   subdev  chan  type  name

 *	-----  ------  ----  ----  --------------

 *	  1      2       0    DO   strobe

 *	  2      0       0    DIO  data 0

 *	  3      0       1    DIO  data 1

 *	  4      0       2    DIO  data 2

 *	  5      0       3    DIO  data 3

 *	  6      0       4    DIO  data 4

 *	  7      0       5    DIO  data 5

 *	  8      0       6    DIO  data 6

 *	  9      0       7    DIO  data 7

 *	 10      1       3    DI   ack

 *	 11      1       4    DI   busy

 *	 12      1       2    DI   paper out

 *	 13      1       1    DI   select in

 *	 14      2       1    DO   auto LF

 *	 15      1       0    DI   error

 *	 16      2       2    DO   init

 *	 17      2       3    DO   select printer

 *	18-25                      ground

 *

 * When an IRQ is configured subdevice 3 pretends to be a digital

 * input subdevice, but it always returns 0 when read. However, if

 * you run a command with scan_begin_src=TRIG_EXT, it uses pin 10

 * as a external trigger, which can be used to wake up tasks.

/*

 * Register map

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 Step 4: fix up any arguments */

 Step 5: check channel list if it exists */

 Digial I/O subdevice - Parallel port DATA register */

 Digial Input subdevice - Parallel port STATUS register */

 Digial Output subdevice - Parallel port CONTROL register */

 Digial Input subdevice - Interrupt support */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/jr3_pci.c

 * hardware driver for JR3/PCI force sensor board

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2007 Anders Blomdell <anders.blomdell@control.lth.se>

/*

 * Driver: jr3_pci

 * Description: JR3/PCI force sensor board

 * Author: Anders Blomdell <anders.blomdell@control.lth.se>

 * Updated: Thu, 01 Nov 2012 17:34:55 +0000

 * Status: works

 * Devices: [JR3] PCI force sensor board (jr3_pci)

 *

 * Configuration options:

 *   None

 *

 * Manual configuration of comedi devices is not supported by this

 * driver; supported PCI devices are configured as comedi devices

 * automatically.

 *

 * The DSP on the board requires initialization code, which can be

 * loaded by placing it in /lib/firmware/comedi.  The initialization

 * code should be somewhere on the media you got with your card.  One

 * version is available from https://www.comedi.org in the

 * comedi_nonfree_firmware tarball.  The file is called "jr3pci.idm".

 Make sure that 0 <= num <= 15 */

 No sensor or sensor changed */

 Restart polling */

 Skip over non hex */

 Collect value */

	/*

	 * IDM file format is:

	 *   { count, address, data <count> } *

	 *   ffff

 16 bit data, never seen in real life!! */

 jr3[addr + 0x20000 * pnum] = data1; */

 Download 24 bit program */

 verify IDM file format */

 write firmware to each subdevice */

 Sensor communication lost? force poll mode */

			/*

			 * Still no sensor, keep on polling.

			 * Since it takes up to 10 seconds for offsets to

			 * stabilize, polling each second should suffice.

			/*

			 * Wait for offeset to stabilize

			 * (< 10 s according to manual)

 Transformation all zeros */

 Allow 20 ms for completion */

 Set full scale */

 Allow 20 ms for completion */

 Use ranges in kN or we will overflow around 2000N! */

 the next five are questionable */

 Allow 40 ms for completion */

 Poll all sensors that are ready to be polled */

				/*

				 * Wake up as late as possible ->

				 * poll as many sensors as possible at once.

 Channel specific range and maxdata */

 Reset DSP card */

	/*

	 * TODO: use firmware to load preferred offset tables. Suggested

	 * format:

	 *     model serial Fx Fy Fz Mx My Mz\n

	 *

	 *     comedi_load_firmware(dev, &comedi_to_pci_dev(dev)->dev,

	 *                          "comedi/jr3_offsets_table",

	 *                          jr3_download_firmware, 1);

	/*

	 * It takes a few milliseconds for software to settle as much as we

	 * can read firmware version

 Start card timer */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * ke_counter.c

 * Comedi driver for Kolter-Electronic PCI Counter 1 Card

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: ke_counter

 * Description: Driver for Kolter Electronic Counter Card

 * Devices: [Kolter Electronic] PCI Counter Card (ke_counter)

 * Author: Michael Hillmann

 * Updated: Mon, 14 Apr 2008 15:42:42 +0100

 * Status: tested

 *

 * Configuration Options: not applicable, uses PCI auto config

/*

 * PCI BAR 0 Register I/O map

 Order matters */

 Order matters */

 default */

 option */

 Pin 21 on D-sub */

 50ns */

 250ns */

 Unknown */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * rti802.c

 * Comedi driver for Analog Devices RTI-802 board

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1999 Anders Blomdell <anders.blomdell@control.lth.se>

/*

 * Driver: rti802

 * Description: Analog Devices RTI-802

 * Author: Anders Blomdell <anders.blomdell@control.lth.se>

 * Devices: [Analog Devices] RTI-802 (rti802)

 * Status: works

 *

 * Configuration Options:

 *   [0] - i/o base

 *   [1] - unused

 *   [2,4,6,8,10,12,14,16] - dac#[0-7]  0=two's comp, 1=straight

 *   [3,5,7,9,11,13,15,17] - dac#[0-7]  0=bipolar, 1=unipolar

/*

 * Register I/O map

 munge offset binary to two's complement if needed */

 Analog Output subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * pcmmio.c

 * Driver for Winsystems PC-104 based multifunction IO board.

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2007 Calin A. Culianu <calin@ajvar.org>

/*

 * Driver: pcmmio

 * Description: A driver for the PCM-MIO multifunction board

 * Devices: [Winsystems] PCM-MIO (pcmmio)

 * Author: Calin Culianu <calin@ajvar.org>

 * Updated: Wed, May 16 2007 16:21:10 -0500

 * Status: works

 *

 * A driver for the PCM-MIO multifunction board from Winsystems. This

 * is a PC-104 based I/O board. It contains four subdevices:

 *

 *	subdevice 0 - 16 channels of 16-bit AI

 *	subdevice 1 - 8 channels of 16-bit AO

 *	subdevice 2 - first 24 channels of the 48 channel of DIO

 *			(with edge-triggered interrupt support)

 *	subdevice 3 - last 24 channels of the 48 channel DIO

 *			(no interrupt support for this bank of channels)

 *

 * Some notes:

 *

 * Synchronous reads and writes are the only things implemented for analog

 * input and output. The hardware itself can do streaming acquisition, etc.

 *

 * Asynchronous I/O for the DIO subdevices *is* implemented, however! They

 * are basically edge-triggered interrupts for any configuration of the

 * channels in subdevice 2.

 *

 * Also note that this interrupt support is untested.

 *

 * A few words about edge-detection IRQ support (commands on DIO):

 *

 * To use edge-detection IRQ support for the DIO subdevice, pass the IRQ

 * of the board to the comedi_config command. The board IRQ is not jumpered

 * but rather configured through software, so any IRQ from 1-15 is OK.

 *

 * Due to the genericity of the comedi API, you need to create a special

 * comedi_command in order to use edge-triggered interrupts for DIO.

 *

 * Use comedi_commands with TRIG_NOW.  Your callback will be called each

 * time an edge is detected on the specified DIO line(s), and the data

 * values will be two sample_t's, which should be concatenated to form

 * one 32-bit unsigned int. This value is the mask of channels that had

 * edges detected from your channel list. Note that the bits positions

 * in the mask correspond to positions in your chanlist when you

 * specified the command and *not* channel id's!

 *

 * To set the polarity of the edge-detection interrupts pass a nonzero value

 * for either CR_RANGE or CR_AREF for edge-up polarity, or a zero

 * value for both CR_RANGE and CR_AREF if you want edge-down polarity.

 *

 * Configuration Options:

 *   [0] - I/O port base address

 *   [1] - IRQ (optional -- for edge-detect interrupt support only,

 *		leave out if you don't need this feature)

/*

 * Register I/O map

/*

 * WinSystems WS16C48

 *

 * Offset    Page 0       Page 1       Page 2       Page 3

 * ------  -----------  -----------  -----------  -----------

 *  0x10   Port 0 I/O   Port 0 I/O   Port 0 I/O   Port 0 I/O

 *  0x11   Port 1 I/O   Port 1 I/O   Port 1 I/O   Port 1 I/O

 *  0x12   Port 2 I/O   Port 2 I/O   Port 2 I/O   Port 2 I/O

 *  0x13   Port 3 I/O   Port 3 I/O   Port 3 I/O   Port 3 I/O

 *  0x14   Port 4 I/O   Port 4 I/O   Port 4 I/O   Port 4 I/O

 *  0x15   Port 5 I/O   Port 5 I/O   Port 5 I/O   Port 5 I/O

 *  0x16   INT_PENDING  INT_PENDING  INT_PENDING  INT_PENDING

 *  0x17    Page/Lock    Page/Lock    Page/Lock    Page/Lock

 *  0x18       N/A         POL_0       ENAB_0       INT_ID0

 *  0x19       N/A         POL_1       ENAB_1       INT_ID1

 *  0x1a       N/A         POL_2       ENAB_2       INT_ID2

 protects the page registers */

 protects the member variables */

 Port registers are valid for any page */

 Port registers are valid for any page */

/*

 * Each channel can be individually programmed for input or output.

 * Writing a '0' to a channel causes the corresponding output pin

 * to go to a high-z state (pulled high by an external 10K resistor).

 * This allows it to be used as an input. When used in the input mode,

 * a read reflects the inverted state of the I/O pin, such that a

 * high on the pin will read as a '0' in the register. Writing a '1'

 * to a bit position causes the pin to sink current (up to 12mA),

 * effectively pulling it low.

 subdevice 2 uses ports 0-2, subdevice 3 uses ports 3-5 */

		/*

		 * Outputs are inverted, invert the state and

		 * update the channels.

		 *

		 * The s->io_bits mask makes sure the input channels

		 * are '0' so that the outputs pins stay in a high

		 * z-state.

 get inverted state of the channels from the port */

 return the true state of the channels */

 subdevice 2 uses ports 0-2, subdevice 3 uses ports 3-5 */

 Clear all the DIO port bits */

 Clear all the paged registers */

 devpriv->spinlock is already locked */

 disable all dio interrupts */

 are there any interrupts pending */

 get, and clear, the pending interrupts */

 devpriv->spinlock is already locked */

 set polarity and enable interrupts */

/*

 * 'do_cmd' function for an 'INTERRUPT' subdevice.

 Set up start of acquisition. */

 TRIG_NOW */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_NONE */

 step 4: fix up any arguments */

 if (err) return 4; */

	/*

	 * The PCM-MIO uses two Linear Tech LTC1859CG 8-channel A/D converters.

	 * The devices use a full duplex serial interface which transmits and

	 * receives data simultaneously. An 8-bit command is shifted into the

	 * ADC interface to configure it for the next conversion. At the same

	 * time, the data from the previous conversion is shifted out of the

	 * device. Consequently, the conversion result is delayed by one

	 * conversion from the command word.

	 *

	 * Setup the cmd for the conversions then do a dummy conversion to

	 * flush the junk data. Then do each conversion requested by the

	 * comedi_insn. Note that the last conversion will leave junk data

	 * in ADC which will get flushed on the next comedi_insn.

 bipolar data is two's complement */

	/*

	 * The PCM-MIO has two Linear Tech LTC2704 DAC devices. Each device

	 * is a 4-channel converter with software-selectable output range.

 set the range for the channel */

 write the data to the channel */

 configure the interrupt routing on the board */

 Analog Input subdevice */

 initialize the resource enable register by clearing it */

 Analog Output subdevice */

 initialize the resource enable register by clearing it */

 Digital I/O subdevice with interrupt support */

 Digital I/O subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for Amplicon PCI263 relay board.

 *

 * Copyright (C) 2002 MEV Ltd. <https://www.mev.co.uk/>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: amplc_pci263

 * Description: Amplicon PCI263

 * Author: Ian Abbott <abbotti@mev.co.uk>

 * Devices: [Amplicon] PCI263 (amplc_pci263)

 * Updated: Fri, 12 Apr 2013 15:19:36 +0100

 * Status: works

 *

 * Configuration options: not applicable, uses PCI auto config

 *

 * The board appears as one subdevice, with 16 digital outputs, each

 * connected to a reed-relay. Relay contacts are closed when output is 1.

 * The state of the outputs can be read.

 PCI263 registers */

 Digital Output subdevice */

 read initial relay state */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/das08.c

 * comedi module for common DAS08 support (used by ISA/PCI/PCMCIA drivers)

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

 * Copyright (C) 2001,2002,2003 Frank Mori Hess <fmhess@users.sourceforge.net>

 * Copyright (C) 2004 Salvador E. Tropea <set@users.sf.net> <set@ieee.org>

/*

 * Data format of DAS08_AI_LSB_REG and DAS08_AI_MSB_REG depends on

 * 'ai_encoding' member of board structure:

 *

 * das08_encode12     : DATA[11..4] = MSB[7..0], DATA[3..0] = LSB[7..4].

 * das08_pcm_encode12 : DATA[11..8] = MSB[3..0], DATA[7..9] = LSB[7..0].

 * das08_encode16     : SIGN = MSB[7], MAGNITUDE[14..8] = MSB[6..0],

 *                      MAGNITUDE[7..0] = LSB[7..0].

 *                      SIGN==0 for negative input, SIGN==1 for positive input.

 *                      Note: when read a second time after conversion

 *                            complete, MSB[7] is an "over-range" bit.

 (R) AI least significant bits */

 (R) AI most significant bits */

 (W) AI software trigger */

 (R) status */

 AI conversion in progress */

/*

 * The IRQ status bit is set to 1 by a rising edge on the external interrupt

 * input (which may be jumpered to the pacer output).  It is cleared by

 * setting the INTE control bit to 0.  Not present on "JR" boards.

 latched interrupt input */

 digital inputs (not "JR" boards) */

 (W) control */

/*

 * Note: The AI multiplexor channel can also be read from status register using

 * the same mask.

 multiplexor channel mask */

 mux channel */

 interrupt enable (not "JR" boards) */

 digital outputs mask (not "JR") */

 digital outputs (not "JR" boards) */

/*

 * (R/W) programmable AI gain ("PGx" and "AOx" boards):

 * + bits 3..0 (R/W) show/set the gain for the current AI mux channel

 * + bits 6..4 (R) show the current AI mux channel

 * + bit 7 (R) not unused

 (R) digital inputs ("JR" boards) */

 (W) digital outputs ("JR" boards) */

 (W) analog output l.s.b. registers for 2 channels ("JR" boards) */

 (W) analog output m.s.b. registers for 2 channels ("JR" boards) */

/*

 * (R) update analog outputs ("JR" boards set for simultaneous output)

 *     (same register as digital inputs)

 (W) analog output l.s.b. registers for 2 channels ("AOx" boards) */

 (W) analog output m.s.b. registers for 2 channels ("AOx" boards) */

/*

 * (R) update analog outputs ("AOx" boards set for simultaneous output)

 *     (any of the analog output registers could be used for this)

 gainlist same as _pgx_ below */

 clear crap */

 set multiplexer */

 lock to prevent race with digital output */

 set gain/range */

 clear over-range bits for 16-bit boards */

 trigger conversion */

			/*

			 * "JR" 16-bit boards are sign-magnitude.

			 *

			 * XXX The manual seems to imply that 0 is full-scale

			 * negative and 65535 is full-scale positive, but the

			 * original COMEDI patch to add support for the

			 * DAS08/JR/16 and DAS08/JR/16-AO boards have it

			 * encoded as sign-magnitude.  Assume the original

			 * COMEDI code is correct for now.

			/*

			 * MSB bit 7 is 0 for negative, 1 for positive voltage.

			 * COMEDI 16-bit bipolar data value for 0V is 0x8000.

 prevent race with setting of analog input mux */

 load DACs */

 load DACs */

 ai */

		/*

		 * XXX some boards actually have differential

		 * inputs instead of single ended.

		 * The driver does nothing with arefs though,

		 * so it's no big deal.

 ao */

 initialize all channels to 0V */

 di */

 do */

 8255 */

 Counter subdevice (8254) */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * addi_apci_1516.c

 * Copyright (C) 2004,2005  ADDI-DATA GmbH for the source code of this module.

 * Project manager: Eric Stolz

 *

 *	ADDI-DATA GmbH

 *	Dieselstrasse 3

 *	D-77833 Ottersweier

 *	Tel: +19(0)7223/9493-0

 *	Fax: +49(0)7223/9493-92

 *	http://www.addi-data.com

 *	info@addi-data.com

/*

 * PCI bar 1 I/O Register map - Digital input/output

/*

 * PCI bar 2 I/O Register map - Watchdog (APCI-1516 and APCI-2016)

 Initialize the digital input subdevice */

 Initialize the digital output subdevice */

 Initialize the watchdog subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * COMEDI driver for generic PCI based 8255 digital i/o boards

 * Copyright (C) 2012 H Hartley Sweeten <hsweeten@visionengravers.com>

 *

 * Based on the tested adl_pci7296 driver written by:

 *	Jon Grierson <jd@renko.co.uk>

 * and the experimental cb_pcidio driver written by:

 *	Yoshiya Matsuzaka

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: 8255_pci

 * Description: Generic PCI based 8255 Digital I/O boards

 * Devices: [ADLink] PCI-7224 (adl_pci-7224), PCI-7248 (adl_pci-7248),

 *   PCI-7296 (adl_pci-7296),

 *   [Measurement Computing] PCI-DIO24 (cb_pci-dio24),

 *   PCI-DIO24H (cb_pci-dio24h), PCI-DIO48H (cb_pci-dio48h),

 *   PCI-DIO96H (cb_pci-dio96h),

 *   [National Instruments] PCI-DIO-96 (ni_pci-dio-96),

 *   PCI-DIO-96B (ni_pci-dio-96b), PXI-6508 (ni_pxi-6508),

 *   PCI-6503 (ni_pci-6503), PCI-6503B (ni_pci-6503b),

 *   PCI-6503X (ni_pci-6503x), PXI-6503 (ni_pxi-6503)

 * Author: H Hartley Sweeten <hsweeten@visionengravers.com>

 * Updated: Wed, 12 Sep 2012 11:52:01 -0700

 * Status: untested

 *

 * These boards have one or more 8255 digital I/O chips, each of which

 * is supported as a separate 24-channel DIO subdevice.

 *

 * Boards with 24 DIO channels (1 DIO subdevice):

 *

 *   PCI-7224, PCI-DIO24, PCI-DIO24H, PCI-6503, PCI-6503B, PCI-6503X,

 *   PXI-6503

 *

 * Boards with 48 DIO channels (2 DIO subdevices):

 *

 *   PCI-7248, PCI-DIO48H

 *

 * Boards with 96 DIO channels (4 DIO subdevices):

 *

 *   PCI-7296, PCI-DIO96H, PCI-DIO-96, PCI-DIO-96B, PXI-6508

 *

 * Some of these boards also have an 8254 programmable timer/counter

 * chip.  This chip is not currently supported by this driver.

 *

 * Interrupt support for these boards is also not currently supported.

 *

 * Configuration Options: not applicable, uses PCI auto config.

 ripped from mite.h and mite_setup2() to avoid mite dependency */

 IO Device Window Base Size Register */

 window enable */

 ioremap the MITE registers (BAR 0) temporarily */

 set data window to main registers (BAR 1) */

 finished with MITE registers */

	/*

	 * One, two, or four subdevices are setup by this driver depending

	 * on the number of channels provided by the board. Each subdevice

	 * has 24 channels supported by the 8255 module.

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0

/*

 * pcm3724.c

 * Comedi driver for Advantech PCM-3724 Digital I/O board

 *

 * Drew Csillag <drew_csillag@yahoo.com>

/*

 * Driver: pcm3724

 * Description: Advantech PCM-3724

 * Devices: [Advantech] PCM-3724 (pcm3724)

 * Author: Drew Csillag <drew_csillag@yahoo.com>

 * Status: tested

 *

 * This is driver for digital I/O boards PCM-3724 with 48 DIO.

 * It needs 8255.o for operations and only immediate mode is supported.

 * See the source for configuration details.

 *

 * Copy/pasted/hacked from pcm724.c

 *

 * Configuration Options:

 *   [0] - I/O port base address

/*

 * Register I/O Map

 *

 * This board has two standard 8255 devices that provide six 8-bit DIO ports

 * (48 channels total). Six 74HCT245 chips (one for each port) buffer the

 * I/O lines to increase driving capability. Because the 74HCT245 is a

 * bidirectional, tri-state line buffer, two additional I/O ports are used

 * to control the direction of data and the enable of each port.

 used to track configured dios */

 1 in io_bits indicates output */

 1 in io_bits indicates output, 1 in config indicates input */

 overriding the 8255 insn config */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/* comedi/drivers/amplc_dio200_pci.c

 *

 * Driver for Amplicon PCI215, PCI272, PCIe215, PCIe236, PCIe296.

 *

 * Copyright (C) 2005-2013 MEV Ltd. <https://www.mev.co.uk/>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1998,2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: amplc_dio200_pci

 * Description: Amplicon 200 Series PCI Digital I/O

 * Author: Ian Abbott <abbotti@mev.co.uk>

 * Devices: [Amplicon] PCI215 (amplc_dio200_pci), PCIe215, PCIe236,

 *   PCI272, PCIe296

 * Updated: Mon, 18 Mar 2013 15:03:50 +0000

 * Status: works

 *

 * Configuration options:

 *   none

 *

 * Manual configuration of PCI(e) cards is not supported; they are configured

 * automatically.

 *

 * SUBDEVICES

 *

 *                     PCI215         PCIe215        PCIe236

 *                  -------------  -------------  -------------

 *   Subdevices           5              8              8

 *    0                 PPI-X          PPI-X          PPI-X

 *    1                 PPI-Y          UNUSED         UNUSED

 *    2                 CTR-Z1         PPI-Y          UNUSED

 *    3                 CTR-Z2         UNUSED         UNUSED

 *    4               INTERRUPT        CTR-Z1         CTR-Z1

 *    5                                CTR-Z2         CTR-Z2

 *    6                                TIMER          TIMER

 *    7                              INTERRUPT      INTERRUPT

 *

 *

 *                     PCI272         PCIe296

 *                  -------------  -------------

 *   Subdevices           4              8

 *    0                 PPI-X          PPI-X1

 *    1                 PPI-Y          PPI-X2

 *    2                 PPI-Z          PPI-Y1

 *    3               INTERRUPT        PPI-Y2

 *    4                                CTR-Z1

 *    5                                CTR-Z2

 *    6                                TIMER

 *    7                              INTERRUPT

 *

 * Each PPI is a 8255 chip providing 24 DIO channels.  The DIO channels

 * are configurable as inputs or outputs in four groups:

 *

 *   Port A  - channels  0 to  7

 *   Port B  - channels  8 to 15

 *   Port CL - channels 16 to 19

 *   Port CH - channels 20 to 23

 *

 * Only mode 0 of the 8255 chips is supported.

 *

 * Each CTR is a 8254 chip providing 3 16-bit counter channels.  Each

 * channel is configured individually with INSN_CONFIG instructions.  The

 * specific type of configuration instruction is specified in data[0].

 * Some configuration instructions expect an additional parameter in

 * data[1]; others return a value in data[1].  The following configuration

 * instructions are supported:

 *

 *   INSN_CONFIG_SET_COUNTER_MODE.  Sets the counter channel's mode and

 *     BCD/binary setting specified in data[1].

 *

 *   INSN_CONFIG_8254_READ_STATUS.  Reads the status register value for the

 *     counter channel into data[1].

 *

 *   INSN_CONFIG_SET_CLOCK_SRC.  Sets the counter channel's clock source as

 *     specified in data[1] (this is a hardware-specific value).  Not

 *     supported on PC214E.  For the other boards, valid clock sources are

 *     0 to 7 as follows:

 *

 *       0.  CLK n, the counter channel's dedicated CLK input from the SK1

 *         connector.  (N.B. for other values, the counter channel's CLKn

 *         pin on the SK1 connector is an output!)

 *       1.  Internal 10 MHz clock.

 *       2.  Internal 1 MHz clock.

 *       3.  Internal 100 kHz clock.

 *       4.  Internal 10 kHz clock.

 *       5.  Internal 1 kHz clock.

 *       6.  OUT n-1, the output of counter channel n-1 (see note 1 below).

 *       7.  Ext Clock, the counter chip's dedicated Ext Clock input from

 *         the SK1 connector.  This pin is shared by all three counter

 *         channels on the chip.

 *

 *     For the PCIe boards, clock sources in the range 0 to 31 are allowed

 *     and the following additional clock sources are defined:

 *

 *       8.  HIGH logic level.

 *       9.  LOW logic level.

 *      10.  "Pattern present" signal.

 *      11.  Internal 20 MHz clock.

 *

 *   INSN_CONFIG_GET_CLOCK_SRC.  Returns the counter channel's current

 *     clock source in data[1].  For internal clock sources, data[2] is set

 *     to the period in ns.

 *

 *   INSN_CONFIG_SET_GATE_SRC.  Sets the counter channel's gate source as

 *     specified in data[2] (this is a hardware-specific value).  Not

 *     supported on PC214E.  For the other boards, valid gate sources are 0

 *     to 7 as follows:

 *

 *       0.  VCC (internal +5V d.c.), i.e. gate permanently enabled.

 *       1.  GND (internal 0V d.c.), i.e. gate permanently disabled.

 *       2.  GAT n, the counter channel's dedicated GAT input from the SK1

 *         connector.  (N.B. for other values, the counter channel's GATn

 *         pin on the SK1 connector is an output!)

 *       3.  /OUT n-2, the inverted output of counter channel n-2 (see note

 *         2 below).

 *       4.  Reserved.

 *       5.  Reserved.

 *       6.  Reserved.

 *       7.  Reserved.

 *

 *     For the PCIe boards, gate sources in the range 0 to 31 are allowed;

 *     the following additional clock sources and clock sources 6 and 7 are

 *     (re)defined:

 *

 *       6.  /GAT n, negated version of the counter channel's dedicated

 *         GAT input (negated version of gate source 2).

 *       7.  OUT n-2, the non-inverted output of counter channel n-2

 *         (negated version of gate source 3).

 *       8.  "Pattern present" signal, HIGH while pattern present.

 *       9.  "Pattern occurred" latched signal, latches HIGH when pattern

 *         occurs.

 *      10.  "Pattern gone away" latched signal, latches LOW when pattern

 *         goes away after it occurred.

 *      11.  Negated "pattern present" signal, LOW while pattern present

 *         (negated version of gate source 8).

 *      12.  Negated "pattern occurred" latched signal, latches LOW when

 *         pattern occurs (negated version of gate source 9).

 *      13.  Negated "pattern gone away" latched signal, latches LOW when

 *         pattern goes away after it occurred (negated version of gate

 *         source 10).

 *

 *   INSN_CONFIG_GET_GATE_SRC.  Returns the counter channel's current gate

 *     source in data[2].

 *

 * Clock and gate interconnection notes:

 *

 *   1.  Clock source OUT n-1 is the output of the preceding channel on the

 *   same counter subdevice if n > 0, or the output of channel 2 on the

 *   preceding counter subdevice (see note 3) if n = 0.

 *

 *   2.  Gate source /OUT n-2 is the inverted output of channel 0 on the

 *   same counter subdevice if n = 2, or the inverted output of channel n+1

 *   on the preceding counter subdevice (see note 3) if n < 2.

 *

 *   3.  The counter subdevices are connected in a ring, so the highest

 *   counter subdevice precedes the lowest.

 *

 * The 'TIMER' subdevice is a free-running 32-bit timer subdevice.

 *

 * The 'INTERRUPT' subdevice pretends to be a digital input subdevice.  The

 * digital inputs come from the interrupt status register.  The number of

 * channels matches the number of interrupt sources.  The PC214E does not

 * have an interrupt status register; see notes on 'INTERRUPT SOURCES'

 * below.

 *

 * INTERRUPT SOURCES

 *

 *                     PCI215         PCIe215        PCIe236

 *                  -------------  -------------  -------------

 *   Sources              6              6              6

 *    0               PPI-X-C0       PPI-X-C0       PPI-X-C0

 *    1               PPI-X-C3       PPI-X-C3       PPI-X-C3

 *    2               PPI-Y-C0       PPI-Y-C0        unused

 *    3               PPI-Y-C3       PPI-Y-C3        unused

 *    4              CTR-Z1-OUT1    CTR-Z1-OUT1    CTR-Z1-OUT1

 *    5              CTR-Z2-OUT1    CTR-Z2-OUT1    CTR-Z2-OUT1

 *

 *                     PCI272         PCIe296

 *                  -------------  -------------

 *   Sources              6              6

 *    0               PPI-X-C0       PPI-X1-C0

 *    1               PPI-X-C3       PPI-X1-C3

 *    2               PPI-Y-C0       PPI-Y1-C0

 *    3               PPI-Y-C3       PPI-Y1-C3

 *    4               PPI-Z-C0      CTR-Z1-OUT1

 *    5               PPI-Z-C3      CTR-Z2-OUT1

 *

 * When an interrupt source is enabled in the interrupt source enable

 * register, a rising edge on the source signal latches the corresponding

 * bit to 1 in the interrupt status register.

 *

 * When the interrupt status register value as a whole (actually, just the

 * 6 least significant bits) goes from zero to non-zero, the board will

 * generate an interrupt.  The interrupt will remain asserted until the

 * interrupt status register is cleared to zero.  To clear a bit to zero in

 * the interrupt status register, the corresponding interrupt source must

 * be disabled in the interrupt source enable register (there is no

 * separate interrupt clear register).

 *

 * COMMANDS

 *

 * The driver supports a read streaming acquisition command on the

 * 'INTERRUPT' subdevice.  The channel list selects the interrupt sources

 * to be enabled.  All channels will be sampled together (convert_src ==

 * TRIG_NOW).  The scan begins a short time after the hardware interrupt

 * occurs, subject to interrupt latencies (scan_begin_src == TRIG_EXT,

 * scan_begin_arg == 0).  The value read from the interrupt status register

 * is packed into a short value, one bit per requested channel, in the

 * order they appear in the channel list.

/*

 * Board descriptions.

/*

 * This function does some special set-up for the PCIe boards

 * PCIe215, PCIe236, PCIe296.

	/*

	 * The board uses Altera Cyclone IV with PCI-Express hard IP.

	 * The FPGA configuration has the PCI-Express Avalon-MM Bridge

	 * Control registers in PCI BAR 0, offset 0, and the length of

	 * these registers is 0x4000.

	 *

	 * We need to write 0x80 to the "Avalon-MM to PCI-Express Interrupt

	 * Enable" register at offset 0x50 to allow generation of PCIe

	 * interrupts when RXmlrq_i is asserted in the SOPC Builder system.

 Enable "enhanced" features of board. */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/dt2815.c

 * Hardware driver for Data Translation DT2815

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1999 Anders Blomdell <anders.blomdell@control.lth.se>

/*

 * Driver: dt2815

 * Description: Data Translation DT2815

 * Author: ds

 * Status: mostly complete, untested

 * Devices: [Data Translation] DT2815 (dt2815)

 *

 * I'm not sure anyone has ever tested this board.  If you have information

 * contrary, please update.

 *

 * Configuration options:

 * [0] - I/O port base base address

 * [1] - IRQ (unused)

 * [2] - Voltage unipolar/bipolar configuration

 *	0 == unipolar 5V  (0V -- +5V)

 *	1 == bipolar 5V  (-5V -- +5V)

 * [3] - Current offset configuration

 *	0 == disabled  (0mA -- +32mAV)

 *	1 == enabled  (+4mA -- +20mAV)

 * [4] - Firmware program configuration

 *	0 == program 1 (see manual table 5-4)

 *	1 == program 2 (see manual table 5-4)

 *	2 == program 3 (see manual table 5-4)

 *	3 == program 4 (see manual table 5-4)

 * [5] - Analog output 0 range configuration

 *	0 == voltage

 *	1 == current

 * [6] - Analog output 1 range configuration (same options)

 * [7] - Analog output 2 range configuration (same options)

 * [8] - Analog output 3 range configuration (same options)

 * [9] - Analog output 4 range configuration (same options)

 * [10] - Analog output 5 range configuration (same options)

 * [11] - Analog output 6 range configuration (same options)

 * [12] - Analog output 7 range configuration (same options)

 FIXME: lo bit 0 chooses voltage output or current output */

/*

 * options[0]   Board base address

 * options[1]   IRQ (not applicable)

 * options[2]   Voltage unipolar/bipolar configuration

 *		0 == unipolar 5V  (0V -- +5V)

 *		1 == bipolar 5V  (-5V -- +5V)

 * options[3]   Current offset configuration

 *		0 == disabled  (0mA -- +32mAV)

 *		1 == enabled  (+4mA -- +20mAV)

 * options[4]   Firmware program configuration

 *		0 == program 1 (see manual table 5-4)

 *		1 == program 2 (see manual table 5-4)

 *		2 == program 3 (see manual table 5-4)

 *		3 == program 4 (see manual table 5-4)

 * options[5]   Analog output 0 range configuration

 *		0 == voltage

 *		1 == current

 * options[6]   Analog output 1 range configuration

 * ...

 * options[12]   Analog output 7 range configuration

 *		0 == voltage

 *		1 == current

 ao subdevice */

 Init the 2815 */

 This is incredibly slow (approx 20 ms) */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * adv_pci1723.c

 * Comedi driver for the Advantech PCI-1723 card.

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: adv_pci1723

 * Description: Advantech PCI-1723

 * Author: yonggang <rsmgnu@gmail.com>, Ian Abbott <abbotti@mev.co.uk>

 * Devices: [Advantech] PCI-1723 (adv_pci1723)

 * Updated: Mon, 14 Apr 2008 15:12:56 +0100

 * Status: works

 *

 * Configuration Options: not applicable, uses comedi PCI auto config

 *

 * Subdevice 0 is 8-channel AO, 16-bit, range +/- 10 V.

 *

 * Subdevice 1 is 16-channel DIO.  The channels are configurable as

 * input or output in 2 groups (0 to 7, 8 to 15). Configuring any

 * channel implicitly configures all channels in the same group.

 *

 * TODO:

 * 1. Add the two milliamp ranges to the AO subdevice (0 to 20 mA,

 *    4 to 20 mA).

 * 2. Read the initial ranges and values of the AO subdevice at

 *    start-up instead of reinitializing them.

 * 3. Implement calibration.

/*

 * PCI Bar 2 I/O Register map (dev->iobase)

 assume output */

 low byte input */

 high byte input */

 synchronously reset all analog outputs to 0V, +/-10V range */

 disable syncronous control */

 get initial DIO direction and state */

 low byte output */

 high byte output */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0

/*

 * comedi/drivers/dt2801.c

 * Device Driver for DataTranslation DT2801

 *

/*

 * Driver: dt2801

 * Description: Data Translation DT2801 series and DT01-EZ

 * Author: ds

 * Status: works

 * Devices: [Data Translation] DT2801 (dt2801), DT2801-A, DT2801/5716A,

 * DT2805, DT2805/5716A, DT2808, DT2818, DT2809, DT01-EZ

 *

 * This driver can autoprobe the type of board.

 *

 * Configuration options:

 * [0] - I/O port base address

 * [1] - unused

 * [2] - A/D reference 0=differential, 1=single-ended

 * [3] - A/D range

 *	  0 = [-10, 10]

 *	  1 = [0,10]

 * [4] - D/A 0 range

 *	  0 = [-10, 10]

 *	  1 = [-5,5]

 *	  2 = [-2.5,2.5]

 *	  3 = [0,10]

 *	  4 = [0,5]

 * [5] - D/A 1 range (same choices)

 Hardware Configuration */

 ====================== */

 define's */

 ====================== */

 Commands */

/*

 * Command modifiers (only used with read/write), EXTTRIG can be

 * used with some other commands.

 Bits in status register */

 registers */

 ignore 'defined but not used' warning */

 ignore 'defined but not used' warning */

/*

 * Typeid's for the different boards of the DT2801-series

 * (taken from the test-software, that comes with the board)

/*

 * These are the low-level routines:

 * writecommand: write a command to the board

 * writedata: write data byte

 * readdata: read data byte

/*

 * Only checks DataOutReady-flag, not the Ready-flag as it is done

 *  in the examples of the manual. I don't see why this should be

 *  necessary.

 pull random data from data port */

 dt2801_writecmd(dev,DT_C_STOP); */

 dt2801_wait_for_ready(dev); */

 dt2801_readdata(dev,&board_code); */

 dt2801_writecmd(dev,DT_C_RESET); */

/*

 * options:

 *	[0] - i/o base

 *	[1] - unused

 *	[2] - a/d 0=differential, 1=single-ended

 *	[3] - a/d range 0=[-10,10], 1=[0,10]

 *	[4] - dac0 range 0=[-10,10], 1=[-5,5], 2=[-2.5,2.5] 3=[0,10], 4=[0,5]

 *	[5] - dac1 range 0=[-10,10], 1=[-5,5], 2=[-2.5,2.5] 3=[0,10], 4=[0,5]

 do some checking */

 heh.  if it didn't work, try it again. */

 ai subdevice */

 ao subdevice */

 1st digital subdevice */

 2nd digital subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * COMEDI driver for the ADLINK PCI-723x/743x series boards.

 * Copyright (C) 2012 H Hartley Sweeten <hsweeten@visionengravers.com>

 *

 * Based on the adl_pci7230 driver written by:

 *	David Fernandez <dfcastelao@gmail.com>

 * and the adl_pci7432 driver written by:

 *	Michel Lachaine <mike@mikelachaine.ca>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: adl_pci7x3x

 * Description: 32/64-Channel Isolated Digital I/O Boards

 * Devices: [ADLink] PCI-7230 (adl_pci7230), PCI-7233 (adl_pci7233),

 *   PCI-7234 (adl_pci7234), PCI-7432 (adl_pci7432), PCI-7433 (adl_pci7433),

 *   PCI-7434 (adl_pci7434)

 * Author: H Hartley Sweeten <hsweeten@visionengravers.com>

 * Updated: Fri, 20 Nov 2020 14:49:36 +0000

 * Status: works (tested on PCI-7230)

 *

 * One or two subdevices are setup by this driver depending on

 * the number of digital inputs and/or outputs provided by the

 * board. Each subdevice has a maximum of 32 channels.

 *

 *	PCI-7230 - 4 subdevices: 0 - 16 input, 1 - 16 output,

 *	                         2 - IRQ_IDI0, 3 - IRQ_IDI1

 *	PCI-7233 - 1 subdevice: 0 - 32 input

 *	PCI-7234 - 1 subdevice: 0 - 32 output

 *	PCI-7432 - 2 subdevices: 0 - 32 input, 1 - 32 output

 *	PCI-7433 - 2 subdevices: 0 - 32 input, 1 - 32 input

 *	PCI-7434 - 2 subdevices: 0 - 32 output, 1 - 32 output

 *

 * The PCI-7230, PCI-7432 and PCI-7433 boards also support external

 * interrupt signals on digital input channels 0 and 1. The PCI-7233

 * has dual-interrupt sources for change-of-state (COS) on any 16

 * digital input channels of LSB and for COS on any 16 digital input

 * lines of MSB.

 *

 * Currently, this driver only supports interrupts for PCI-7230.

 *

 * Configuration Options: not applicable, uses comedi PCI auto config

/*

 * Register I/O map (32-bit access only)

 in the DigIO Port area */

 in the DigIO Port area */

 IDI, IDO, IRQ_IDI0, IRQ_IDI1 */

 spin-lock for cmd_running */

 Ignore interrupt before device fully attached. */

 Might not even have allocated subdevices yet! */

 Check if we are source of interrupt */

 clear all current interrupt flags */

 Fixme: Reset all 2 Int Flags */

 SubDev 2, 3 = Isolated DigIn , on "SCSI2" jack!*/

 0x0005 LINTi1 is Enabled && IDI0 is 1 */

 0x0028 LINTi2 is Enabled && IDI1 is 1 */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 Step 4: fix up any arguments */

 Step 5: check channel list if it exists */

 enable LINTi1 == IDI sdi[0] Ch 0 IRQ ActHigh */

 enable LINTi2 == IDI sdi[0] Ch 1 IRQ ActHigh */

 disable Interrupts */

 same as _di_insn_bits because the IRQ-pins are the DI-ports  */

			/*

			 * It seems the PCI-7230 needs the 16-bit DO state

			 * to be shifted left by 16 bits before being written

			 * to the 32-bit register.  Set the value in both

			 * halves of the register to be sure.

 disable Interrupts */

 Disable PCI + LINTi2 + LINTi1 */

 discard all evtl. old IRQs */

 0x52 PCI + IDI Ch 1 Ch 0 IRQ Off ActHigh */

 Isolated digital inputs 0 to 15/31 */

 Isolated digital inputs 32 to 63 */

 Isolated digital outputs 0 to 15/31 */

 Isolated digital outputs 32 to 63 */

 Isolated digital inputs 0 or 1 */

 SPDX-License-Identifier: GPL-2.0+

/*

 * comedi/drivers/dyna_pci10xx.c

 * Copyright (C) 2011 Prashant Shah, pshah.mumbai@gmail.com

/*

 * Driver: dyna_pci10xx

 * Description: Dynalog India PCI DAQ Cards, http://www.dynalogindia.com/

 * Devices: [Dynalog] PCI-1050 (dyna_pci1050)

 * Author: Prashant Shah <pshah.mumbai@gmail.com>

 * Status: Stable

 *

 * Developed at Automation Labs, Chemical Dept., IIT Bombay, India.

 * Prof. Kannan Moudgalya <kannan@iitb.ac.in>

 * http://www.iitb.ac.in

 *

 * Notes :

 * - Dynalog India Pvt. Ltd. does not have a registered PCI Vendor ID and

 *   they are using the PLX Technlogies Vendor ID since that is the PCI Chip

 *   used in the card.

 * - Dynalog India Pvt. Ltd. has provided the internal register specification

 *   for their cards in their manuals.

 get the channel number and range */

 convert n samples */

 trigger conversion */

 read data */

 mask the first 4 bits - EOC bits */

 return the number of samples read/written */

 analog output callback */

 trigger conversion and write data */

 digital input bit interface */

 on return the data[0] contains output and data[1] contains input */

 analog input */

 analog output */

 digital input */

 digital output */

 SPDX-License-Identifier: GPL-2.0+

/*

 * pcl711.c

 * Comedi driver for PC-LabCard PCL-711 and AdSys ACL-8112 and compatibles

 * Copyright (C) 1998 David A. Schleef <ds@schleef.org>

 *		      Janne Jalkanen <jalkanen@cs.hut.fi>

 *		      Eric Bunn <ebu@cs.hut.fi>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1998 David A. Schleef <ds@schleef.org>

/*

 * Driver: pcl711

 * Description: Advantech PCL-711 and 711b, ADLink ACL-8112

 * Devices: [Advantech] PCL-711 (pcl711), PCL-711B (pcl711b),

 *   [ADLink] ACL-8112HG (acl8112hg), ACL-8112DG (acl8112dg)

 * Author: David A. Schleef <ds@schleef.org>

 *	   Janne Jalkanen <jalkanen@cs.hut.fi>

 *	   Eric Bunn <ebu@cs.hut.fi>

 * Updated:

 * Status: mostly complete

 *

 * Configuration Options:

 *   [0] - I/O port base

 *   [1] - IRQ, optional

/*

 * I/O port register map

 any value will work */

 any value will work */

	/*

	 * The pcl711b board uses bits in the mode register to select the

	 * interrupt. The other boards supported by this driver all use

	 * jumpers on the board.

	 *

	 * Enables the interrupt when needed on the pcl711b board. These

	 * bits do nothing on the other boards.

 Select the correct MPC508A chip */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 TRIG_NONE */

 step 4 */

 Analog Input subdevice */

 Analog Output subdevice */

 Digital Input subdevice */

 Digital Output subdevice */

 clear DAC */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * addi_apci_1564.c

 * Copyright (C) 2004,2005  ADDI-DATA GmbH for the source code of this module.

 *

 *	ADDI-DATA GmbH

 *	Dieselstrasse 3

 *	D-77833 Ottersweier

 *	Tel: +19(0)7223/9493-0

 *	Fax: +49(0)7223/9493-92

 *	http://www.addi-data.com

 *	info@addi-data.com

/*

 * Driver: addi_apci_1564

 * Description: ADDI-DATA APCI-1564 Digital I/O board

 * Devices: [ADDI-DATA] APCI-1564 (addi_apci_1564)

 * Author: H Hartley Sweeten <hsweeten@visionengravers.com>

 * Updated: Thu, 02 Jun 2016 13:12:46 -0700

 * Status: untested

 *

 * Configuration Options: not applicable, uses comedi PCI auto config

 *

 * This board has the following features:

 *   - 32 optically isolated digital inputs (24V), 16 of which can

 *     generate change-of-state (COS) interrupts (channels 4 to 19)

 *   - 32 optically isolated digital outputs (10V to 36V)

 *   - 1 8-bit watchdog for resetting the outputs

 *   - 1 12-bit timer

 *   - 3 32-bit counters

 *   - 2 diagnostic inputs

 *

 * The COS, timer, and counter subdevices all use the dev->read_subdev to

 * return the interrupt status. The sample data is updated and returned when

 * any of these subdevices generate an interrupt. The sample data format is:

 *

 *    Bit   Description

 *   -----  ------------------------------------------

 *    31    COS interrupt

 *    30    timer interrupt

 *    29    counter 2 interrupt

 *    28    counter 1 interrupt

 *    27    counter 0 interrupt

 *   26:20  not used

 *   19:4   COS digital input state (channels 19 to 4)

 *    3:0   not used

 *

 * The COS interrupts must be configured using an INSN_CONFIG_DIGITAL_TRIG

 * instruction before they can be enabled by an async command. The COS

 * interrupts will stay active until canceled.

 *

 * The timer subdevice does not use an async command. All control is handled

 * by the (*insn_config).

 *

 * FIXME: The format of the ADDI_TCW_TIMEBASE_REG is not descibed in the

 * datasheet I have. The INSN_CONFIG_SET_CLOCK_SRC currently just writes

 * the raw data[1] to this register along with the raw data[2] value to the

 * ADDI_TCW_RELOAD_REG. If anyone tests this and can determine the actual

 * timebase/reload operation please let me know.

 *

 * The counter subdevice also does not use an async command. All control is

 * handled by the (*insn_config).

 *

 * FIXME: The operation of the counters is not really described in the

 * datasheet I have. The (*insn_config) needs more work.

/*

 * PCI BAR 0

 *

 * PLD Revision 1.0 I/O Mapping

 *   0x00         93C76 EEPROM

 *   0x04 - 0x18  Timer 12-Bit

 *

 * PLD Revision 2.x I/O Mapping

 *   0x00         93C76 EEPROM

 *   0x04 - 0x14  Digital Input

 *   0x18 - 0x25  Digital Output

 *   0x28 - 0x44  Watchdog 8-Bit

 *   0x48 - 0x64  Timer 12-Bit

/*

 * PCI BAR 1

 *

 * PLD Revision 1.0 I/O Mapping

 *   0x00 - 0x10  Digital Input

 *   0x14 - 0x20  Digital Output

 *   0x24 - 0x3c  Watchdog 8-Bit

 *

 * PLD Revision 2.x I/O Mapping

 *   0x00         Counter_0

 *   0x20         Counter_1

 *   0x30         Counter_3

/*

 * dev->iobase Register Map

 *   PLD Revision 1.0 - PCI BAR 1 + 0x00

 *   PLD Revision 2.x - PCI BAR 0 + 0x04

 chans [19:4] */

 1=AND, 0=OR */

/*

 * devpriv->timer Register Map (see addi_tcw.h for register/bit defines)

 *   PLD Revision 1.0 - PCI BAR 0 + 0x04

 *   PLD Revision 2.x - PCI BAR 0 + 0x48

/*

 * devpriv->counters Register Map (see addi_tcw.h for register/bit defines)

 *   PLD Revision 2.x - PCI BAR 1 + 0x00

/*

 * The dev->read_subdev is used to return the interrupt events along with

 * the state of the interrupt capable inputs.

 counter 0-2 */

 all but [19:4] */

 base address of EEPROM register */

 base address of 12-bit timer */

 base address of 32-bit counters */

 rising-edge/high level channels */

 falling-edge/low level channels */

 interrupt mode OR (edge) . AND (level) */

 Disable the input interrupts and reset status register */

 Reset the output channels and disable interrupts */

 Reset the watchdog registers */

 Reset the timer registers */

 Reset the counter registers */

 get the COS interrupt state and set the event flag */

 clear the interrupt */

 clear the interrupt */

 clear the interrupt */

/*

 * Change-Of-State (COS) interrupt configuration

 *

 * Channels 4 to 19 are interruptible. These channels can be configured

 * to generate interrupts based on AND/OR logic for the desired channels.

 *

 *	OR logic

 *		- reacts to rising or falling edges

 *		- interrupt is generated when any enabled channel

 *		  meet the desired interrupt condition

 *

 *	AND logic

 *		- reacts to changes in level of the selected inputs

 *		- interrupt is generated when all enabled channels

 *		  meet the desired interrupt condition

 *		- after an interrupt, a change in level must occur on

 *		  the selected inputs to release the IRQ logic

 *

 * The COS interrupt must be configured before it can be enabled.

 *

 *	data[0] : INSN_CONFIG_DIGITAL_TRIG

 *	data[1] : trigger number (= 0)

 *	data[2] : configuration operation:

 *	          COMEDI_DIGITAL_TRIG_DISABLE = no interrupts

 *	          COMEDI_DIGITAL_TRIG_ENABLE_EDGES = OR (edge) interrupts

 *	          COMEDI_DIGITAL_TRIG_ENABLE_LEVELS = AND (level) interrupts

 *	data[3] : left-shift for data[4] and data[5]

 *	data[4] : rising-edge/high level channels

 *	data[5] : falling-edge/low level channels

 switching to 'OR' mode */

 wipe old channels */

 preserve unspecified channels */

 configure specified channels */

 switching to 'AND' mode */

 wipe old channels */

 preserve unspecified channels */

 configure specified channels */

 ensure the mode bits are in-range for channels [19:4] */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 Step 4: fix up any arguments */

 Step 5: check channel list if it exists */

/*

 * Change-Of-State (COS) 'do_cmd' operation

 *

 * Enable the COS interrupt as configured by apci1564_cos_insn_config().

 just write the last to the reload register */

 return the actual value of the timer */

		/*

		 * FIXME: The counter operation is not described in the

		 * datasheet. For now just write the raw data[1] value to

		 * the control register.

 just write the last to the reload register */

 return the actual value of the counter */

 read the EEPROM register and check the I/O map revision */

 PLD Revision 1.0 I/O Mapping */

 PLD Revision 2.x I/O Mapping */

  Allocate and Initialise DI Subdevice Structures */

  Allocate and Initialise DO Subdevice Structures */

 Change-Of-State (COS) interrupt subdevice */

 Timer subdevice */

 Counter subdevice */

 Initialize the watchdog subdevice */

 Initialize the diagnostic status subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * icp_multi.c

 * Comedi driver for Inova ICP_MULTI board

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1997-2002 David A. Schleef <ds@schleef.org>

/*

 * Driver: icp_multi

 * Description: Inova ICP_MULTI

 * Devices: [Inova] ICP_MULTI (icp_multi)

 * Author: Anne Smorthit <anne.smorthit@sfwte.ch>

 * Status: works

 *

 * Configuration options: not applicable, uses PCI auto config

 *

 * The driver works for analog input and output and digital input and

 * output. It does not work with interrupts or with the counters. Currently

 * no support for DMA.

 *

 * It has 16 single-ended or 8 differential Analogue Input channels with

 * 12-bit resolution.  Ranges : 5V, 10V, +/-5V, +/-10V, 0..20mA and 4..20mA.

 * Input ranges can be individually programmed for each channel.  Voltage or

 * current measurement is selected by jumper.

 *

 * There are 4 x 12-bit Analogue Outputs.  Ranges : 5V, 10V, +/-5V, +/-10V

 *

 * 16 x Digital Inputs, 24V

 *

 * 8 x Digital Outputs, 24V, 1A

 *

 * 4 x 16-bit counters - not implemented

 R/W: ADC command/status register */

 Start ADC */

 ADC busy */

 Bipolar input range */

 Input range 0 = 5V, 1 = 10V */

 Input mode 1 = differential */

 R:   Analogue input data */

 R/W: DAC command/status register */

 Start DAC */

 DAC busy */

 Bipolar output range */

 Output range 0 = 5V, 1 = 10V */

 R/W: Analogue output data */

 R/W: Digital inputs */

 R/W: Digital outputs */

 R/W: Interrupt enable register */

 R/W: Interrupt status register */

 A/D conversion ready interrupt */

 D/A conversion ready interrupt */

 Digital output error interrupt */

 Digital input status change int. */

 Counter 0 overrun interrupt */

 Counter 1 overrun interrupt */

 Counter 2 overrun interrupt */

 Counter 3 overrun interrupt */

 All interrupts */

 R/W: Counter 0 */

 R/W: counter 1 */

 R/W: Counter 2 */

 R/W: Counter 3 */

 analog input and output have the same range options */

 Set mode and range data for specified channel */

  Set start ADC bit */

  Wait for conversion to complete, or get fed up waiting */

 Select channel and range */

 Wait for analog output to be ready for new data */

 Set start conversion bit to write data to channel */

 Disable all interrupts and clear any requests */

 Reset the analog output channels to 0V */

 Select channel and 0..5V range */

 Output 0V */

 Set start conversion bit to write data to channel */

 Digital outputs to 0 */

 Analog Input subdevice */

 Analog Output subdevice */

 Digital Input subdevice */

 Digital Output subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0

/*

 *  comedi/drivers/adl_pci9118.c

 *

 *  hardware driver for ADLink cards:

 *   card:   PCI-9118DG, PCI-9118HG, PCI-9118HR

 *   driver: pci9118dg,  pci9118hg,  pci9118hr

 *

 * Author: Michal Dobes <dobes@tesnet.cz>

 *

/*

 * Driver: adl_pci9118

 * Description: Adlink PCI-9118DG, PCI-9118HG, PCI-9118HR

 * Author: Michal Dobes <dobes@tesnet.cz>

 * Devices: [ADLink] PCI-9118DG (pci9118dg), PCI-9118HG (pci9118hg),

 * PCI-9118HR (pci9118hr)

 * Status: works

 *

 * This driver supports AI, AO, DI and DO subdevices.

 * AI subdevice supports cmd and insn interface,

 * other subdevices support only insn interface.

 * For AI:

 * - If cmd->scan_begin_src=TRIG_EXT then trigger input is TGIN (pin 46).

 * - If cmd->convert_src=TRIG_EXT then trigger input is EXTTRG (pin 44).

 * - If cmd->start_src/stop_src=TRIG_EXT then trigger input is TGIN (pin 46).

 * - It is not necessary to have cmd.scan_end_arg=cmd.chanlist_len but

 * cmd.scan_end_arg modulo cmd.chanlist_len must by 0.

 * - If return value of cmdtest is 5 then you've bad channel list

 * (it isn't possible mixture S.E. and DIFF inputs or bipolar and unipolar

 * ranges).

 *

 * There are some hardware limitations:

 * a) You cann't use mixture of unipolar/bipoar ranges or differencial/single

 *  ended inputs.

 * b) DMA transfers must have the length aligned to two samples (32 bit),

 *  so there is some problems if cmd->chanlist_len is odd. This driver tries

 *  bypass this with adding one sample to the end of the every scan and discard

 *  it on output but this can't be used if cmd->scan_begin_src=TRIG_FOLLOW

 *  and is used flag CMDF_WAKE_EOS, then driver switch to interrupt driven mode

 *  with interrupt after every sample.

 * c) If isn't used DMA then you can use only mode where

 *  cmd->scan_begin_src=TRIG_FOLLOW.

 *

 * Configuration options:

 * [0] - PCI bus of device (optional)

 * [1] - PCI slot of device (optional)

 *	 If bus/slot is not specified, then first available PCI

 *	 card will be used.

 * [2] - 0= standard 8 DIFF/16 SE channels configuration

 *	 n = external multiplexer connected, 1 <= n <= 256

 * [3] - ignored

 * [4] - sample&hold signal - card can generate signal for external S&H board

 *	 0 = use SSHO(pin 45) signal is generated in onboard hardware S&H logic

 *	 0 != use ADCHN7(pin 23) signal is generated from driver, number say how

 *		long delay is requested in ns and sign polarity of the hold

 *		(in this case external multiplexor can serve only 128 channels)

 * [5] - ignored

/*

 * FIXME

 *

 * All the supported boards have the same PCI vendor and device IDs, so

 * auto-attachment of PCI devices will always find the first board type.

 *

 * Perhaps the boards have different subdevice IDs that we could use to

 * distinguish them?

 *

 * Need some device attributes so the board type can be corrected after

 * attachment if necessary, and possibly to set other options supported by

 * manual attachment.

/*

 * PCI BAR2 Register map (dev->iobase)

 0=FIFO full (fatal) */

 0=FIFO half full */

 0=FIFO empty */

 1=about trigger complete */

 1=ext. digital trigger */

 1=burst overrun (fatal) */

 1=A/D over speed (warn) */

 1=A/D overrun (fatal) */

 1=A/D ready */

 1=unipolar */

 1=differential inputs */

 1=8254 software gate */

 1=8254 TGIN(pin 46) gate */

 1=ext. trigger (pin 44) */

 1=8254 is trigger source */

 1=enable interrupt */

 1=enable DMA */

 1=positive trigger */

 1=positive ext. trigger */

 1=with sample & hold */

 1=burst mode */

 1=burst mode start */

 1=post trigger */

 1=about trigger */

 1=trigger start */

 timer interrupt */

 about trigger complete */

 A/D FIFO half full */

 ext. digital trigger */

 start measure on external trigger */

 stop measure on external trigger */

 stop measure on internal trigger */

 virtual address of buffer */

 hardware (bus) address of buffer */

 size of dma buffer in bytes */

 which size we may now use for transfer */

 base+size for AMCC chip */

 what do AI? 0=nothing, 1 to 4 mode */

	unsigned int ai_n_realscanlen;	/*

					 * what we must transfer for one

					 * outgoing scan include front/back adds

 position in actual real stream */

	unsigned int ai_add_front;	/*

					 * how many channels we must add

					 * before scan to satisfy S&H?

	unsigned int ai_add_back;	/*

					 * how many channels we must add

					 * before scan to satisfy DMA?

	char ai12_startstop;		/*

					 * measure can start/stop

					 * on external trigger

 which buffer is used now */

	int softsshdelay;		/*

					 * >0 use software S&H,

					 * numer is requested delay in ns

	unsigned char softsshsample;	/*

					 * polarity of S&H signal

					 * in sample state

	unsigned char softsshhold;	/*

					 * polarity of S&H signal

					 * in hold state

 set the master write address and transfer count */

 enable/disable interrupt for AMCC Incoming Mailbox 4 (32-bit) */

 writing any value resets the A/D FIFO */

 single channel scans are always ok */

	/*

	 * Configure analog input based on the first chanlist entry.

	 * All entries are either unipolar or bipolar and single-ended

	 * or differential.

 gods know why this sequence! */

 insert channels for S&H */

 store chanlist */

 insert channels to fit onto 32bit DMA */

 close scan queue */

 udelay(100); important delay, or first sample will be crippled */

 use all samples */

	/*

	 * Not all samples are to be used.  Buffer contents consist of a

	 * possibly non-whole number of spans and a region of each span

	 * is to be used.

	 *

	 * Account for samples in whole number of spans.

	/*

	 * Deal with remaining samples which could overlap up to two spans.

 Skip samples before start position. */

 Include samples before stop position. */

 Advance to next span. */

 All samples are to be copied. */

		/*

		 * Not all samples are to be copied.  Buffer contents consist

		 * of a possibly non-whole number of spans and a region of

		 * each span is to be copied.

 Skip samples before start position. */

 Copy samples before stop position. */

 Advance to next span. */

 Update position in span for next time. */

 convert timer (burst) */

 scan timer */

 major timer is c1*c2 */

 real convert timer */

 use BSSH signal */

 set default config (disable burst and triggers) */

 reset acquisition control */

 reset scan queue */

 determine whether more DMA buffers to do after this one */

 switch DMA buffers and restart DMA if double buffering */

 restart DMA if not double buffering */

 IRQ reasons from card */

 INT register from AMCC chip */

 STATUS register */

 start/stop of measure */

 deactivate EXT trigger */

 start pacer */

 deactivate EXT trigger */

 on next interrupt measure will stop */

 isn't output buff smaller that our DMA buff? */

 align to 32bit down */

 align to 32bit down */

 we want wake up every scan? */

 uff, too short DMA buffer, disable EOS support! */

 short first DMA buffer to one scan */

 uff, too short DMA buffer, disable EOS support! */

 short second DMA buffer to one scan */

 transfer without CMDF_WAKE_EOS */

 if it's possible then align DMA buffers to length of scan */

 uff. very long scan? */

 uff. very long scan? */

		/*

		 * if measure isn't neverending then test, if it fits whole

		 * into one or two DMA buffers

 fits whole measure into one DMA buffer? */

 fits whole measure into two DMA buffer? */

 these DMA buffer size will be used */

 init DMA transfer */

 outl(0x02000000|AINT_WRITE_COMPL, devpriv->iobase_a+AMCC_OP_REG_INTCSR); */

 allow bus mastering */

 prepare for start/stop conditions */

	/*

	 * use additional sample at end of every scan

	 * to satisty DMA 32 bit transfer?

					/*

					 * use INT transfer if scanlist

					 * have only one channel

				/*

				 * XXX maybe can be corrected to use 16 bit DMA

			} else {	/*

					 * well, we must insert one sample

					 * to end of EOS to meet 32 bit transfer

 interrupt transfer don't need any correction */

	/*

	 * we need software S&H signal?

	 * It adds two samples before every scan as minimum

 move it to front */

 uff, still short */

 round up to 32 bit */

 well, we now know what must be all added */

	/*

	 * what we must take from card in real to have cmd->scan_end_arg

	 * on output?

	/*

	 * Configure analog input and load the chanlist.

	 * The acquisition control bits are enabled later.

 Determine acquisition mode and calculate timing */

 cascaded timers 1 and 2 are used for convert timing */

 double timed action */

 external trigger conversion */

 set default config (disable burst and triggers) */

 clear A/D and INT status registers */

 start async command now or wait for internal trigger */

 enable external trigger for command start/stop */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 start_arg is the internal trigger (any value) */

 TRIG_NONE */

 step 4: fix up any arguments */

 Step 5: check channel list if it exists */

 writing any value triggers an A/D conversion */

       /*

	* Configure analog input based on the chanspec.

	* Acqusition is software controlled without interrupts.

 set default config (disable burst and triggers) */

	/*

	 * The digital inputs and outputs share the read register.

	 * bits [7:4] are the digital outputs

	 * bits [3:0] are the digital inputs

	/*

	 * The digital outputs are set with the same register that

	 * the digital inputs and outputs are read from. But the

	 * outputs are set with bits [3:0] so we can simply write

	 * the s->state to set them.

 reset analog input subsystem */

 clear any pending interrupts and status */

 reset DMA and scan queue */

 reset analog outputs to 0V */

 requested particular bus/slot */

 max 256 channels! */

 select sample&hold signal polarity */

 Enable parity check for parity error */

 Analog Input subdevice */

		/*

		 * 16-bit samples are from an ADS7805 A/D converter.

		 * Minimum sampling rate is 10us.

		/*

		 * 12-bit samples are from an ADS7800 A/D converter.

		 * Minimum sampling rate is 3us.

 Analog Output subdevice */

 the analog outputs were reset to 0V, make the readback match */

 Digital Input subdevice */

 Digital Output subdevice */

 get the current state of the digital outputs */

	/*

	 * Need to 'get' the PCI device to match the 'put' in pci9118_detach().

	 * (The 'put' also matches the implicit 'get' by pci9118_find_pci().)

 no external mux, no sample-hold delay */

 FIXME: All the supported board types have the same device ID! */

	{ PCI_VDEVICE(AMCC, 0x80d9), BOARD_PCI9118HG }, */

	{ PCI_VDEVICE(AMCC, 0x80d9), BOARD_PCI9118HR }, */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * COMEDI driver for the Advantech PCI-1760

 * Copyright (C) 2015 H Hartley Sweeten <hsweeten@visionengravers.com>

 *

 * Based on the pci1760 support in the adv_pci_dio driver written by:

 *	Michal Dobes <dobes@tesnet.cz>

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 2000 David A. Schleef <ds@schleef.org>

/*

 * Driver: adv_pci1760

 * Description: Advantech PCI-1760 Relay & Isolated Digital Input Card

 * Devices: [Advantech] PCI-1760 (adv_pci1760)

 * Author: H Hartley Sweeten <hsweeten@visionengravers.com>

 * Updated: Fri, 13 Nov 2015 12:34:00 -0700

 * Status: untested

 *

 * Configuration Options: not applicable, uses PCI auto config

/*

 * PCI-1760 Register Map

 *

 * Outgoing Mailbox Bytes

 * OMB3: Not used (must be 0)

 * OMB2: The command code to the PCI-1760

 * OMB1: The hi byte of the parameter for the command in OMB2

 * OMB0: The lo byte of the parameter for the command in OMB2

 *

 * Incoming Mailbox Bytes

 * IMB3: The Isolated Digital Input status (updated every 100us)

 * IMB2: The current command (matches OMB2 when command is successful)

 * IMB1: The hi byte of the feedback data for the command in OMB2

 * IMB0: The lo byte of the feedback data for the command in OMB2

 *

 * Interrupt Control/Status

 * INTCSR3: Not used (must be 0)

 * INTCSR2: The interrupt status (read only)

 * INTCSR1: Interrupt enable/disable

 * INTCSR0: Not used (must be 0)

 PCI-1760 command codes */

 Clears IMB2 */

 Set output state */

 Read output status */

 Read current status */

 Read firmware version */

 Read hardware version */

 Set "hi" period */

 Set "lo" period */

 Set burst count */

 Enable PWM outputs */

 Enable input filter */

 Enable input pattern match */

 Set input pattern match */

 Enable input rising edge */

 Enable input falling edge */

 Enable counter */

 Reset counter */

 Enable counter overflow */

 Enable counter match */

 Set counter edge */

 Reads counter value */

 Set "hi" sample time */

 Set "lo" sample time */

 Set counter reset val */

 Set counter match val */

 Read interrupt flags */

 Read edge change flags */

 Read counter oflow/match */

 250 usec timeout */

 limit number of retries */

 1 unit = 100 usec */

 send the command and parameter */

 datasheet says to allow up to 250 usec for the command to complete */

 command success; return the feedback data */

 send PCI1760_CMD_CLR_IMB2 between identical commands */

 timeout? try it once more */

 datasheet says to keep retrying the command */

 command failed! */

 disable interrupts (intcsr2 is read-only) */

 disable counters */

 disable overflow interrupts */

 disable match */

 set match and counter reset values */

 reset counters to reset values */

 set counter count edges */

 disable input filters */

 disable pattern matching */

 set pattern match value */

 Digital Input subdevice */

 Digital Output subdevice */

 get the current state of the outputs */

 PWM subdevice */

 Counter subdevice */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * Comedi driver for National Instruments PCI-DIO-32HS

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1999,2002 David A. Schleef <ds@schleef.org>

/*

 * Driver: ni_pcidio

 * Description: National Instruments PCI-DIO32HS, PCI-6533

 * Author: ds

 * Status: works

 * Devices: [National Instruments] PCI-DIO-32HS (ni_pcidio)

 *   [National Instruments] PXI-6533, PCI-6533 (pxi-6533)

 *   [National Instruments] PCI-6534 (pci-6534)

 * Updated: Mon, 09 Jan 2012 14:27:23 +0000

 *

 * The DIO32HS board appears as one subdevice, with 32 channels. Each

 * channel is individually I/O configurable. The channel order is 0=A0,

 * 1=A1, 2=A2, ... 8=B0, 16=C0, 24=D0. The driver only supports simple

 * digital I/O; no handshaking is supported.

 *

 * DMA mostly works for the PCI-DIO32HS, but only in timed input mode.

 *

 * The PCI-DIO-32HS/PCI-6533 has a configurable external trigger. Setting

 * scan_begin_arg to 0 or CR_EDGE triggers on the leading edge. Setting

 * scan_begin_arg to CR_INVERT or (CR_EDGE | CR_INVERT) triggers on the

 * trailing edge.

 *

 * This driver could be easily modified to support AT-MIO32HS and AT-MIO96.

 *

 * The PCI-6534 requires a firmware upload after power-up to work, the

 * firmware data and instructions for loading it with comedi_config

 * it are contained in the comedi_nonfree_firmware tarball available from

 * https://www.comedi.org

 defines for the PCI-DIO-32HS */

 W */

 R */

 W */

 R */

 R */

 R */

 #define SerialRose */

 #define ReqRose */

 #define Paused */

 W */

 W */

 W */

 W */

 W */

 W */

 16 bit */

 bits same as flags */

 channel zero is none */

 32 bit */

 Firmware files for PCI-6524 */

 16 bit */

 main fpga registers (32 bit)*/

write-clear */

write-clear */

write-clear */

write-clear */

 nanoseconds */

 write alloc the entire buffer */

 interrupcions parasites */

 assume it's from another card */

 Lock to avoid race with comedi_poll */

 XXX need to byteswap sync'ed dma */

 we don't care about actual channels */

 Step 1 : check if triggers are trivially valid */

 Step 2a : make sure trigger sources are unique */

 Step 2b : and mutually compatible */

 Step 3: check if arguments are trivially valid */

 in nanoseconds */

 no minimum speed */

 TRIG_EXT */

 should be level/edge, hi/lo specification here */

 TRIG_NONE */

 step 4: fix up any arguments */

 XXX configure ports for input */

 enable fifos A B C D */

 set transfer width a 32 bits */

 protocol configuration */

 page 4-5, "input with internal REQs" */

		/*

		 * manual, page 4-5:

		 * CLOCK_SPEED comment is incorrectly listed on DAQ_OPTIONS

 TRIG_EXT */

 page 4-5, "input with external REQs" */

 Leading Edge */

 Trailing Edge */

 XXX */

 clear and enable interrupts */

 writeb(CLEAR_EXPIRED, dev->mmio+GROUP_1_SECOND_CLEAR); */

 TRIG_TIMER */

 start */

 TRIG_INT */

 loaded into scarab A for DI */

 loaded into scarab B for DO */

 loaded into main FPGA */

 load main FPGA first, then the two scarabs */

 disable interrupts on board */

 use win0 */

 XXX */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 * addi_apci_16xx.c

 * Copyright (C) 2004,2005  ADDI-DATA GmbH for the source code of this module.

 * Project manager: S. Weber

 *

 *	ADDI-DATA GmbH

 *	Dieselstrasse 3

 *	D-77833 Ottersweier

 *	Tel: +19(0)7223/9493-0

 *	Fax: +49(0)7223/9493-92

 *	http://www.addi-data.com

 *	info@addi-data.com

/*

 * Register I/O map

 2 subdevices */

 3 subdevices */

	/*

	 * Work out the number of subdevices needed to support all the

	 * digital i/o channels on the board. Each subdevice supports

	 * up to 32 channels.

 Initialize the TTL digital i/o subdevices */

 Default all channels to inputs */

www.comedi.org");

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/tests/ni_routes_test.c

 *  Unit tests for NI routes (ni_routes.c module).

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

 *** BEGIN fake board data *** */

 These have to be defs to be used in init code below */

 I1 and I2 should not call O(...).  Mostly here to shut checkpatch.pl up */

 O9 is build to call O(...) for each arg */

*/1, 2, 3, 4, 5, 6, 7, 8, 9)},

*/2, 3, 4, 5, 6, 7, 8, 9)},

 ith route_set */

*/ 6, 7, 8, 9)},

*/ 7, 8, 9)},

 next one will not have valid reg values */

*/ 8, 9)},

*/)},

 indirect routes done through muxes */

 This table is indexed as RV[destination][source] */

*/1, 2, 3, 4, 5, 6, 7, 8, 9)},

*/ 2, 3, 4, 5, 6, 7, 8, 9)},

*/3, 4, 5, 6, 7, 8, 9)},

*/4, 5, 6, 7, 8, 9)},

*/5, 6, 7, 8, 9)},

*/6, 7, 8, 9)},

*/7, 8, 9)},

 [7] is intentionaly left absent to test invalid routes */

*/9)},

*/)},

 some tests for needing extra muxes */

 *** END fake board data *** */

 *** BEGIN board data initializers *** */

 *** END board data initializers *** */

 Tests that route_sets are in order of the signal destination. */

 Tests that all route_set->src are in order of the signal source. */

 We begin by sorting the device routes for use in later tests */

 now we test that sorting. */

 choice of trigger line in the following is somewhat random */

 **** BEGIN simple module entry/exit functions **** */

www.comedi.org");

 **** END simple module entry/exit functions **** */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/tests/comedi_example_test.c

 *  Example set of unit tests.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

 *** BEGIN fake board data *** */

 *** END fake board data *** */

 *** BEGIN fake data init *** */

 *** END fake data init *** */

 **** BEGIN simple module entry/exit functions **** */

 **** END simple module entry/exit functions **** */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_route_values.c

 *  Route information for NI boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * This file includes the tables that are a list of all the values of various

 * signals routes available on NI hardware.  In many cases, one does not

 * explicitly make these routes, rather one might indicate that something is

 * used as the source of one particular trigger or another (using

 * *_src=TRIG_EXT).

 *

 * The contents of this file are generated using the tools in

 * comedi/drivers/ni_routing/tools

 *

 * Please use those tools to help maintain the contents of this file.

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_device_routes.c

 *  List of valid routes for specific NI boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * The contents of this file are generated using the tools in

 * comedi/drivers/ni_routing/tools

 *

 * Please use those tools to help maintain the contents of this file.

 SPDX-License-Identifier: GPL-2.0+

/*

 * write out

 * {

 *   "family" : "<family-name>",

 *   "register_values": {

 *      <destination0>:[src0, src1, ...],

 *      <destination0>:[src0, src1, ...],

 *      ...

 *   }

 * }

 no data here */

/*

 * write out

 * {

 *   "family" : "<family-name>",

 *   "register_values": {

 *      <destination0>:[src0, src1, ...],

 *      <destination0>:[src0, src1, ...],

 *      ...

 *   }

 * }

 write route register values */

 write valid device routes */

 finish; close file */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_route_values/ni_660x.c

 *  Route information for NI_660X boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * This file includes a list of all the values of various signals routes

 * available on NI 660x hardware.  In many cases, one does not explicitly make

 * these routes, rather one might indicate that something is used as the source

 * of one particular trigger or another (using *_src=TRIG_EXT).

 *

 * The contents of this file can be generated using the tools in

 * comedi/drivers/ni_routing/tools.  This file also contains specific notes to

 * this family of devices.

 *

 * Please use those tools to help maintain the contents of this file, but be

 * mindful to not lose the notes already made in this file, since these notes

 * are critical to a complete undertsanding of the register values of this

 * family.

		/*

		 * destination = {

		 *              source          = register value,

		 *              ...

		 * }

 These are not currently implemented in ni modules */

 or 1 */),

 These are not currently implemented in ni modules */

 or 1 */),

 These are not currently implemented in ni modules */

 or 1 */),

 These are not currently implemented in ni modules */

 or 1 */),

 These are not currently implemented in ni modules */

 or 1 */),

 These are not currently implemented in ni modules */

 or 1 */),

 These are not currently implemented in ni modules */

 or 1 */),

 These are not currently implemented in ni modules */

 or 1 */),

 or 1 */),

 or 30 */),

 or 1 */),

 or 30 */),

 or 1 */),

 or 30 */),

 or 1 */),

 or 30 */),

 or 1 */),

 or 30 */),

 or 1 */),

 or 30 */),

 or 1 */),

 or 30 */),

 or 1 */),

 or 30 */),

 or 1 */),

 or 1 */),

 or 1 */),

 or 1 */),

 or 1 */),

 or 1 */),

 or 1 */),

 or 1 */),

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_route_values/ni_mseries.c

 *  Route information for NI_MSERIES boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * This file includes a list of all the values of various signals routes

 * available on NI 660x hardware.  In many cases, one does not explicitly make

 * these routes, rather one might indicate that something is used as the source

 * of one particular trigger or another (using *_src=TRIG_EXT).

 *

 * The contents of this file can be generated using the tools in

 * comedi/drivers/ni_routing/tools.  This file also contains specific notes to

 * this family of devices.

 *

 * Please use those tools to help maintain the contents of this file, but be

 * mindful to not lose the notes already made in this file, since these notes

 * are critical to a complete undertsanding of the register values of this

 * family.

/*

 * GATE SELECT NOTE:

 * CtrAux and CtrArmStartrigger register values are not documented in the

 * DAQ-STC.  There is some evidence that using CtrGate values is valid (see

 * comedi.h).  Some information and hints exist in the M-Series user manual

 * (ni-62xx user-manual 371022K-01).

		/*

		 * destination = {

		 *              source          = register value,

		 *              ...

		 * }

			/*

			 * for (*->TRIGGER_LINE(*)) MUX, a value of 12 should be

			 * RTSI_OSC according to MHDDK mseries source.  There

			 * are hints in comedi that show that this is actually a

			 * 20MHz source for 628x cards(?)

			/*

			 * for (*->TRIGGER_LINE(*)) MUX, a value of 12 should be

			 * RTSI_OSC according to MHDDK mseries source.  There

			 * are hints in comedi that show that this is actually a

			 * 20MHz source for 628x cards(?)

			/*

			 * for (*->TRIGGER_LINE(*)) MUX, a value of 12 should be

			 * RTSI_OSC according to MHDDK mseries source.  There

			 * are hints in comedi that show that this is actually a

			 * 20MHz source for 628x cards(?)

			/*

			 * for (*->TRIGGER_LINE(*)) MUX, a value of 12 should be

			 * RTSI_OSC according to MHDDK mseries source.  There

			 * are hints in comedi that show that this is actually a

			 * 20MHz source for 628x cards(?)

			/*

			 * for (*->TRIGGER_LINE(*)) MUX, a value of 12 should be

			 * RTSI_OSC according to MHDDK mseries source.  There

			 * are hints in comedi that show that this is actually a

			 * 20MHz source for 628x cards(?)

			/*

			 * for (*->TRIGGER_LINE(*)) MUX, a value of 12 should be

			 * RTSI_OSC according to MHDDK mseries source.  There

			 * are hints in comedi that show that this is actually a

			 * 20MHz source for 628x cards(?)

			/*

			 * for (*->TRIGGER_LINE(*)) MUX, a value of 12 should be

			 * RTSI_OSC according to MHDDK mseries source.  There

			 * are hints in comedi that show that this is actually a

			 * 20MHz source for 628x cards(?)

			/*

			 * for (*->TRIGGER_LINE(*)) MUX, a value of 12 should be

			 * RTSI_OSC according to MHDDK mseries source.  There

			 * are hints in comedi that show that this is actually a

			 * 20MHz source for 628x cards(?)

 These are not currently implemented in ni modules */

 These are not currently implemented in ni modules */

 source:  mhddk examples */),

 source for following line:  mhddk GP examples */

 source for following line:  mhddk examples */

 source for following line:  mhddk GP examples */

 these are just a guess; see GATE SELECT NOTE */

 source for following line:  mhddk GP examples */

 these are just a guess; see GATE SELECT NOTE */

 source for following line:  mhddk GP examples */

			/*

			 * See nimseries/Examples for outputs; inputs a guess

			 * from device routes shown on NI-MAX.

			 * see M-Series user manual (371022K-01)

			/*

			 * See nimseries/Examples for outputs; inputs a guess

			 * from device routes shown on NI-MAX.

			 * see M-Series user manual (371022K-01)

			/*

			 * See nimseries/Examples for outputs; inputs a guess

			 * from device routes shown on NI-MAX.

			 * see M-Series user manual (371022K-01)

			/*

			 * See nimseries/Examples for outputs; inputs a guess

			 * from device routes shown on NI-MAX.

			 * see M-Series user manual (371022K-01)

			/*

			 * See nimseries/Examples for outputs; inputs a guess

			 * from device routes shown on NI-MAX.

			 * see M-Series user manual (371022K-01)

			/*

			 * See nimseries/Examples for outputs; inputs a guess

			 * from device routes shown on NI-MAX.

			 * see M-Series user manual (371022K-01)

 these are just a guess; see GATE SELECT NOTE */

 source for following line:  mhddk GP examples */

 these are just a guess; see GATE SELECT NOTE */

 source for following line:  mhddk GP examples */

 These are not currently implemented in ni modules */

			/*

			 * For routes (*->NI_AI_SampleClockTimebase) and

			 * (*->NI_AO_SampleClockTimebase), tMSeries.h of MHDDK

			 * shows 0 value as selecting ground (case ground?) and

			 * 28 value selecting TIMEBASE 1.

 These are not currently implemented in ni modules */

 source for following line:  mhddk example headers */

 source for following line:  mhddk example headers */

 These are not currently implemented in ni modules */

 These are not currently implemented in ni modules */

 These are not currently implemented in ni modules */

			/*

			 * For routes (*->NI_AI_SampleClockTimebase) and

			 * (*->NI_AO_SampleClockTimebase), tMSeries.h of MHDDK

			 * shows 0 value as selecting ground (case ground?) and

			 * 28 value selecting TIMEBASE 1.

			/*

			 * for the signal route

			 * (NI_AI_StartTrigger->NI_AO_StartTrigger), DAQ-STC &

			 * MHDDK disagreed for e-series.  MHDDK for m-series

			 * agrees with DAQ-STC description and uses the value 18

			 * for the route

			 * (NI_AI_ReferenceTrigger->NI_AO_StartTrigger).  The

			 * m-series devices are supposed to have DAQ-STC2.

			 * There are no DAQ-STC2 docs to compare with.

 These are not currently implemented in ni modules */

 These are not currently implemented in ni modules */

		/*

		 * This symbol is not defined and nothing for this is

		 * implemented--just including this because data was found in

		 * the NI-STC for it--can't remember where.

		 * [B(NI_FrequencyOutTimebase)] = {

		 *	** These are not currently implemented in ni modules **

		 *	[B(NI_20MHzTimebase)]	= U(0),

		 *	[B(NI_100kHzTimebase)]	= U(1),

		 * },

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_route_values/ni_eseries.c

 *  Route information for NI_ESERIES boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * This file includes a list of all the values of various signals routes

 * available on NI 660x hardware.  In many cases, one does not explicitly make

 * these routes, rather one might indicate that something is used as the source

 * of one particular trigger or another (using *_src=TRIG_EXT).

 *

 * The contents of this file can be generated using the tools in

 * comedi/drivers/ni_routing/tools.  This file also contains specific notes to

 * this family of devices.

 *

 * Please use those tools to help maintain the contents of this file, but be

 * mindful to not lose the notes already made in this file, since these notes

 * are critical to a complete undertsanding of the register values of this

 * family.

/*

 * Note that for e-series devices, the backplane TRIGGER_LINE(6) is generally

 * not connected to RTSI(6).

		/*

		 * destination = {

		 *              source          = register value,

		 *              ...

		 * }

 These are not currently implemented in ni modules */

 These are not currently implemented in ni modules */

 These are not currently implemented in ni modules */

 These are not currently implemented in ni modules */

 These are not currently implemented in ni modules */

 These are not currently implemented in ni modules */

 These are not currently implemented in ni modules */

			/*

			 * for the signal route

			 * (NI_AI_StartTrigger->NI_AO_StartTrigger), MHDDK says

			 * used register value 18 and DAQ-STC says 19.

			 * Hoping that the MHDDK is correct--being a "working"

			 * example.

 These are not currently implemented in ni modules */

 These are not currently implemented in ni modules */

		/*

		 * This symbol is not defined and nothing for this is

		 * implemented--just including this because data was found in

		 * the NI-STC for it--can't remember where.

		 * [B(NI_FrequencyOutTimebase)] = {

		 *	** These are not currently implemented in ni modules **

		 *	[B(NI_20MHzTimebase)]	= U(0),

		 *	[B(NI_100kHzTimebase)]	= U(1),

		 * },

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_device_routes/pci-6254.c

 *  List of valid routes for specific NI boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * The contents of this file are generated using the tools in

 * comedi/drivers/ni_routing/tools

 *

 * Please use those tools to help maintain the contents of this file.

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination of list */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_device_routes/pxi-6030e.c

 *  List of valid routes for specific NI boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * The contents of this file are generated using the tools in

 * comedi/drivers/ni_routing/tools

 *

 * Please use those tools to help maintain the contents of this file.

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination of list */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_device_routes/pxie-6738.c

 *  List of valid routes for specific NI boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * The contents of this file are generated using the tools in

 * comedi/drivers/ni_routing/tools

 *

 * Please use those tools to help maintain the contents of this file.

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination of list */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_device_routes/pxi-6224.c

 *  List of valid routes for specific NI boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * The contents of this file are generated using the tools in

 * comedi/drivers/ni_routing/tools

 *

 * Please use those tools to help maintain the contents of this file.

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination of list */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_device_routes/pci-6070e.c

 *  List of valid routes for specific NI boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * The contents of this file are generated using the tools in

 * comedi/drivers/ni_routing/tools

 *

 * Please use those tools to help maintain the contents of this file.

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination of list */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_device_routes/pci-6259.c

 *  List of valid routes for specific NI boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * The contents of this file are generated using the tools in

 * comedi/drivers/ni_routing/tools

 *

 * Please use those tools to help maintain the contents of this file.

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination of list */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_device_routes/pxi-6251.c

 *  List of valid routes for specific NI boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * The contents of this file are generated using the tools in

 * comedi/drivers/ni_routing/tools

 *

 * Please use those tools to help maintain the contents of this file.

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination of list */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_device_routes/pxie-6251.c

 *  List of valid routes for specific NI boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * The contents of this file are generated using the tools in

 * comedi/drivers/ni_routing/tools

 *

 * Please use those tools to help maintain the contents of this file.

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination of list */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_device_routes/pci-6723.c

 *  List of valid routes for specific NI boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * The contents of this file are generated using the tools in

 * comedi/drivers/ni_routing/tools

 *

 * Please use those tools to help maintain the contents of this file.

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination of list */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_device_routes/pci-6221.c

 *  List of valid routes for specific NI boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * The contents of this file are generated using the tools in

 * comedi/drivers/ni_routing/tools

 *

 * Please use those tools to help maintain the contents of this file.

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination of list */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_device_routes/pci-6733.c

 *  List of valid routes for specific NI boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * The contents of this file are generated using the tools in

 * comedi/drivers/ni_routing/tools

 *

 * Please use those tools to help maintain the contents of this file.

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination of list */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_device_routes/pxie-6535.c

 *  List of valid routes for specific NI boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * The contents of this file are generated using the tools in

 * comedi/drivers/ni_routing/tools

 *

 * Please use those tools to help maintain the contents of this file.

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination of list */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_device_routes/pci-6251.c

 *  List of valid routes for specific NI boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * The contents of this file are generated using the tools in

 * comedi/drivers/ni_routing/tools

 *

 * Please use those tools to help maintain the contents of this file.

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination of list */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_device_routes/pci-6713.c

 *  List of valid routes for specific NI boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * The contents of this file are generated using the tools in

 * comedi/drivers/ni_routing/tools

 *

 * Please use those tools to help maintain the contents of this file.

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination of list */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_device_routes/pci-6534.c

 *  List of valid routes for specific NI boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * The contents of this file are generated using the tools in

 * comedi/drivers/ni_routing/tools

 *

 * Please use those tools to help maintain the contents of this file.

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination of list */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_device_routes/pci-6229.c

 *  List of valid routes for specific NI boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * The contents of this file are generated using the tools in

 * comedi/drivers/ni_routing/tools

 *

 * Please use those tools to help maintain the contents of this file.

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination of list */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_device_routes/pxi-6733.c

 *  List of valid routes for specific NI boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * The contents of this file are generated using the tools in

 * comedi/drivers/ni_routing/tools

 *

 * Please use those tools to help maintain the contents of this file.

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination of list */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_device_routes/pxi-6225.c

 *  List of valid routes for specific NI boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * The contents of this file are generated using the tools in

 * comedi/drivers/ni_routing/tools

 *

 * Please use those tools to help maintain the contents of this file.

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination of list */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_device_routes/pci-6220.c

 *  List of valid routes for specific NI boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * The contents of this file are generated using the tools in

 * comedi/drivers/ni_routing/tools

 *

 * Please use those tools to help maintain the contents of this file.

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination of list */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  comedi/drivers/ni_routing/ni_device_routes/pci-6602.c

 *  List of valid routes for specific NI boards.

 *

 *  COMEDI - Linux Control and Measurement Device Interface

 *  Copyright (C) 2016 Spencer E. Olson <olsonse@umich.edu>

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License as published by

 *  the Free Software Foundation; either version 2 of the License, or

 *  (at your option) any later version.

 *

 *  This program is distributed in the hope that it will be useful,

 *  but WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *  GNU General Public License for more details.

/*

 * The contents of this file are generated using the tools in

 * comedi/drivers/ni_routing/tools

 *

 * Please use those tools to help maintain the contents of this file.

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination */

 Termination of list */

 SPDX-License-Identifier: GPL-2.0+

/*

 * kcomedilib/kcomedilib.c

 * a comedlib interface for kernel modules

 *

 * COMEDI - Linux Control and Measurement Device Interface

 * Copyright (C) 1997-2000 David A. Schleef <ds@schleef.org>

 a subdevice instruction */

 XXX check lock */

 XXX should check instruction length */

	/*

	 * Most drivers ignore the base channel in insn->chanspec.

	 * Fix this here if the subdevice has <= 32 channels.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Swap block device support for MTDs

 * Turns an MTD device into a swap device with block wear leveling

 *

 * Copyright © 2007,2011 Nokia Corporation. All rights reserved.

 *

 * Authors: Jarkko Lavinen <jarkko.lavinen@nokia.com>

 *

 * Based on Richard Purdie's earlier implementation in 2007. Background

 * support and lock-less operation written by Adrian Hunter.

/*

 * The number of free eraseblocks when GC should stop

/*

 * Number of free eraseblocks below which GC can also collect low frag

 * blocks.

/*

 * Wear level cost amortization. We want to do wear leveling on the background

 * without disturbing gc too much. This is made by defining max GC frequency.

 * Frequency value 6 means 1/6 of the GC passes will pick an erase block based

 * on the biggest wear difference rather than the biggest dirtiness.

 *

 * The lower freq2 should be chosen so that it makes sure the maximum erase

 * difference will decrease even if a malicious application is deliberately

 * trying to make erase differences large.

 speeds up pointer decrement */

 Before marking erase block bad */

/*

 * In the worst case mtdswap_writesect() has allocated the last clean

 * page from the current block and is then pre-empted by the GC

 * thread. The thread can consume a full erase block when moving a

 * block.

 false */

 badblocks not supported */

 Check first if the block is bad. */

/*

 * Are there any erase blocks without MAGIC_CLEAN header, presumably

 * because power was cut off after erase but before header write? We

 * need to guestimate the erase count.

/*

 * Place eblk into a tree corresponding to its number of active blocks

 * it contains.

	/*

	 * Calculate linear ramp down from f1 to f2 when maxdiff goes from

	 * MAX_ERASE_DIFF to MAX_ERASE_DIFF + COLLECT_NONDIRTY_BASE.  Similar

	 * to triangle with height f1 - f1 and width COLLECT_NONDIRTY_BASE.

	/*

	 * Modelling the slop as right angular triangle with base

	 * COLLECT_NONDIRTY_BASE and height freq1 - freq2. The ratio y/x is

	 * equal to the ratio h/base.

 Ignore writes to the header page */

 Provide a dummy swap header for the kernel */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * MTD Oops/Panic logger

 *

 * Copyright © 2007 Nokia Corporation. All rights reserved.

 *

 * Author: Richard Purdie <rpurdie@openedhand.com>

 Maximum MTD partition size */

 Mark pages as unused */

 Scheduled work - when we can't proceed without erasing a block */

 We were unregistered */

 Add mtdoops header to the buffer */

 Assume the page is used */

 Only dump oopses if dump_oops is set */

 Panics must be written immediately */

 For other cases, schedule work to write it "nicely" */

 oops_page_used is a bit field */

 Setup the MTD device to use */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * MTD device concatenation layer

 *

 * Copyright © 2002 Robert Kaiser <rkaiser@sysgo.de>

 * Copyright © 2002-2010 David Woodhouse <dwmw2@infradead.org>

 *

 * NAND support by Christian Gan <cgan@iders.ca>

/*

 * Our storage structure:

 * Subdev points to an array of pointers to struct mtd_info objects

 * which is allocated along with this structure

 *

/*

 * how to calculate the size required for the above structure,

 * including the pointer array subdev points to:

/*

 * Given a pointer to the MTD object in the mtd_concat structure,

 * we can retrieve the pointer to that structure with this macro.

/*

 * MTD methods which look up the relevant subdevice, translate the

 * effective address and pass through to the subdevice.

 Not destined for this subdev */

 First part goes into this subdev */

 Entire transaction goes into this subdev */

 Save information about bitflips! */

 Do not overwrite -EBADMSG !! */

 Calculate total length of data */

 Check alignment */

 make a copy of vecs */

 store for future use */

 partial read ? */

 Save information about bitflips! */

 Do not overwrite -EBADMSG !! */

 partial write ? */

	/*

	 * Check for proper erase block alignment of the to-be-erased area.

	 * It is easier to do this based on the super device's erase

	 * region info rather than looking at each particular sub-device

	 * in turn.

 the easy case: device has uniform erase block size */

 device has variable erase size */

		/*

		 * Find the erase region where the to-be-erased area begins:

		/*

		 * Now erase_regions[i] is the region in which the

		 * to-be-erased area begins. Verify that the starting

		 * offset is aligned to this region's erase size:

		/*

		 * now find the erase region where the to-be-erased area ends:

		/*

		 * check if the ending offset is aligned to this region's erase size

 make a local copy of instr to avoid modifying the caller's struct */

	/*

	 * find the subdevice where the to-be-erased area begins, adjust

	 * starting offset to be relative to the subdevice start

 must never happen since size limit has been verified above */

 now do the erase: */

 loop for all subdevices affected by this request */

 get current subdevice */

 limit length to subdevice's size: */

			/* sanity check: should never happen since

		/*

		 * erase->addr specifies the offset of the area to be

		 * erased *within the current subdevice*. It can be

		 * non-zero only the first time through this loop, i.e.

		 * for the first subdevice where blocks need to be erased.

		 * All the following erases must begin at the start of the

		 * current subdevice, i.e. at offset zero.

/*

 * This function constructs a virtual MTD device by concatenating

 * num_devs MTD devices. A pointer to the new device object is

 * stored to *new_dev upon success. This function does _not_

 * register any devices: this is the caller's responsibility.

 subdevices to concatenate */

 number of subdevices      */

 name for the new device   */

 allocate the device structure */

	/*

	 * Set up the new "super" device's MTD object structure, check for

	 * incompatibilities between the subdevices.

			/*

			 * Expect all flags except MTD_WRITEABLE to be

			 * equal on all subdevices.

				/* if writeable attribute differs,

			/*

			 * Check against subdev[i] for data members, because

			 * subdev's attributes may be different from master

			 * mtd device. Check against subdev's master mtd

			 * device for callbacks, because the existence of

			 * subdev's callbacks is decided by master mtd device.

	/*

	 * Combine the erase block size info of the subdevices:

	 *

	 * first, walk the map of the new device and see how

	 * many changes in erase size we have

 current subdevice has uniform erase size */

 if it differs from the last subdevice's erase size, count it */

 current subdevice has variable erase size */

 walk the list of erase regions, count any changes */

		/*

		 * All subdevices have the same uniform erase size.

		 * This is easy:

		/*

		 * erase block size varies across the subdevices: allocate

		 * space to store the data describing the variable erase regions

		/*

		 * walk the map of the new device once more and fill in

		 * in erase region info:

 current subdevice has uniform erase size */

					/*

					 *  fill in an mtd_erase_region_info structure for the area

					 *  we have walked so far:

 current subdevice has variable erase size */

 walk the list of erase regions, count any changes */

 Now write the final entry */

 Cleans the context obtained from mtd_concat_create() */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright © 1999-2010 David Woodhouse <dwmw2@infradead.org>

/*

 * Data structure to hold the pointer to the mtd device as well

 * as mode information of various use cases.

 You can't open the RO devices RW */

 You can't open it RW if it's not a writeable device */

 mtdchar_open */

====================================================================*/

 Only sync if opened RW */

 mtdchar_close */

/* Back in June 2001, dwmw2 wrote:

 *

 *   FIXME: This _really_ needs to die. In 2.5, we should lock the

 *   userspace buffer down and use it directly with readv/writev.

 *

 * The implementation below, using mtd_kmalloc_up_to, mitigates

 * allocation failures when the system is under low-memory situations

 * or if memory is highly fragmented at the cost of reducing the

 * performance of the requested transfer due to a smaller buffer size.

 *

 * A more complex but more memory-efficient implementation based on

 * get_user_pages and iovecs to cover extents of those pages is a

 * longer-term goal, as intimated by dwmw2 above. However, for the

 * write case, this requires yet more complex head and tail transfer

 * handling when those head and tail offsets and sizes are such that

 * alignment requirements are not met in the NAND subdriver.

		/* Nand returns -EBADMSG on ECC errors, but it returns

		 * the data. For our userspace tools it is important

		 * to dump areas with ECC errors!

		 * For kernel internal usage it also might return -EUCLEAN

		 * to signal the caller that a bitflip has occurred and has

		 * been corrected by the ECC algorithm.

		 * Userspace software which accesses NAND this way

		 * must be aware of the fact that it deals with NAND

 mtdchar_read */

		/*

		 * Return -ENOSPC only if no data could be written at all.

		 * Otherwise just return the number of bytes that actually

		 * have been written.

 mtdchar_write */

/*======================================================================



    IOCTL calls for getting device parameters.



	/*

	 * NAND returns -EBADMSG on ECC errors, but it returns the OOB

	 * data. For our userspace tools it is important to dump areas

	 * with ECC errors!

	 * For kernel internal usage it also might return -EUCLEAN

	 * to signal the caller that a bitflip has occurred and has

	 * been corrected by the ECC algorithm.

	 *

	 * Note: currently the standard NAND function, nand_read_oob_std,

	 * does not calculate ECC for the OOB area, so do not rely on

	 * this behavior unless you have replaced it with your own.

/*

 * Copies (and truncates, if necessary) OOB layout information to the

 * deprecated layout struct, nand_ecclayout_user. This is necessary only to

 * support the deprecated API ioctl ECCGETLAYOUT while allowing all new

 * functionality to use mtd_ooblayout_ops flexibly (i.e. mtd_ooblayout_ops

 * can describe any kind of OOB layout with almost zero overhead from a

 * memory usage point of view).

 Only master mtd device must be used to add partitions */

 Sanitize user input */

	/*

	 * Check the file mode to require "dangerous" commands to have write

	 * permissions.

 "safe" commands */

 "dangerous" commands */

 The below field is obsolete */

 NOTE: writes return length to buf_user->length */

 NOTE: writes return length to buf_user->start */

 Legacy interface */

 This ioctl is being deprecated - it truncates the ECC layout */

 No reread partition feature. Just return ok */

 memory_ioctl */

 unsigned char* */

 NOTE: writes return length to buf->start */

 Convert from blkpg_compat_ioctl_arg to blkpg_ioctl_arg */

 CONFIG_COMPAT */

/*

 * try to determine where a shared mapping can be made

 * - only supported for NOMMU at the moment (MMU can't doesn't copy private

 *   mappings)

/*

 * set up a mapping for shared memory segments

        /* This is broken because it assumes the MTD device is map-based

	   and that mtd->priv is a valid struct map_info.  It should be

	   replaced with something that uses the mtd_get_unmapped_area()

mtd->type == MTD_RAM || mtd->type == MTD_ROM*/) {

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Direct MTD block device access

 *

 * Copyright © 1999-2010 David Woodhouse <dwmw2@infradead.org>

 * Copyright © 2000-2003 Nicolas Pitre <nico@fluxnic.net>

/*

 * Cache stuff...

 *

 * Since typical flash erasable sectors are much larger than what Linux's

 * buffer cache can handle, we must implement read-modify-write on flash

 * sectors for each block write requests.  To avoid over-erasing flash sectors

 * and to speed things up, we locally cache a whole flash sector while it is

 * being written to until a different sector is required.

	/*

	 * First, let's erase the flash block.

	/*

	 * Next, write the data to flash.

	/*

	 * Here we could arguably set the cache state to STATE_CLEAN.

	 * However this could lead to inconsistency since we will not

	 * be notified if this content is altered on the flash by other

	 * means.  Let's declare it empty and leave buffering tasks to

	 * the buffer cache instead.

	 *

	 * If this cache_offset points to a bad block, data cannot be

	 * written to the device. Clear cache_state to avoid writing to

	 * bad blocks repeatedly.

			/*

			 * We are covering a whole sector.  Thus there is no

			 * need to bother with the cache while it may still be

			 * useful for other partial writes.

 Partial sector: need to use the cache */

 fill the cache with the current sector */

 write data to our local cache */

		/*

		 * Check if the requested data is already cached

		 * Read the requested amount of data from our internal cache if it

		 * contains what we want, otherwise we read the data directly

		 * from flash.

		/* -EINTR is not really correct, but it is the best match

		 * documented in man 2 write for all cases.  We could also

		 * return -EAGAIN sometimes, but why bother?

 OK, it's not open. Create cache info for it */

		/*

		 * It was the last usage. Free the cache, but only sync if

		 * opened for writing.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * inftlcore.c -- Linux driver for Inverse Flash Translation Layer (INFTL)

 *

 * Copyright © 2002, Greg Ungerer (gerg@snapgear.com)

 *

 * Based heavily on the nftlcore.c code which is:

 * Copyright © 1999 Machine Vision Holdings, Inc.

 * Copyright © 1999 David Woodhouse <dwmw2@infradead.org>

/*

 * Maximum number of loops while examining next block, to have a

 * chance to detect consistency problems (they should never happen

 * because of the checks done in the mounting.

 OK, this is moderately ugly.  But probably safe.  Alternatives? */

 OK, it's a new one. Set up all the data structures. */

 Calculate geometry */

		/*

		  Oh no we don't have

		   mbd.size == heads * cylinders * sectors

/*

 * Actual INFTL access routines.

/*

 * Read oob data from flash

/*

 * Write oob data to flash

/*

 * Write data and oob to flash

/*

 * INFTL_findfreeblock: Find a free Erase Unit on the INFTL partition.

 *	This function is used when the give Virtual Unit Chain.

	/*

	 * Normally, we force a fold to happen before we run out of free

	 * blocks completely.

 Scan for a free block */

	/*

	 * Scan to find the Erase Unit which holds the actual data for each

	 * 512-byte block within the Chain.

	/*

	 * OK. We now know the location of every block in the Virtual Unit

	 * Chain, and the Erase Unit into which we are supposed to be copying.

	 * Go for it.

		/*

		 * If it's in the target EUN already, or if it's pending write,

		 * do nothing.

		/*

		 * Copy only in non free block (free blocks can only

                 * happen in case of media errors or deleted blocks).

	/*

	 * Newest unit in chain now contains data from _all_ older units.

	 * So go through and erase each unit in chain, oldest first. (This

	 * is important, by doing oldest first if we crash/reboot then it

	 * it is relatively simple to clean up the mess).

 Find oldest unit in chain. */

 Check if we are all done */

 Unlink the last block from the chain. */

 Now try to erase it. */

			/*

			 * Could not erase : mark block as reserved.

 Correctly erased : mark it as free */

	/*

	 * This is the part that needs some cleverness applied.

	 * For now, I'm doing the minimum applicable to actually

	 * get the thing to work.

	 * Wear-levelling and other clever stuff needs to be implemented

	 * and we also need to do some assessment of the results when

	 * the system loses power half-way through the routine.

				/*

				 * Actually, don't return failure.

				 * Just ignore this chain and get on with it.

/*

 * INFTL_findwriteunit: Return the unit number into which we can write

 *                      for this block. Make it available if it isn't already.

		/*

		 * Scan the media to find a unit in the VUC which has

		 * a free space for the block in question.

 Can't go any further */

				/*

				 * Invalid block. Don't use it any more.

				 * Must implement.

 Skip to next block in chain */

		/*

		 * OK. We didn't find one in the existing chain, or there

		 * is no existing chain. Allocate a new one.

			/*

			 * That didn't work - there were no free blocks just

			 * waiting to be picked up. We're going to have to fold

			 * a chain to make room.

			/*

			 * Hopefully we free something, lets try again.

			 * This time we are desperate...

				/*

				 * Ouch. This should never happen - we should

				 * always be able to make some room somehow.

				 * If we get here, we've allocated more storage

				 * space than actual media, or our makefreeblock

				 * routine is missing something.

		/*

		 * Insert new block into virtual chain. Firstly update the

		 * block headers in flash...

 Also back up header... */

/*

 * Given a Virtual Unit Chain, see if it can be deleted, and if so do it.

	/*

	 * Scan through the Erase Units to determine whether any data is in

	 * each of the 512-byte blocks within the Chain.

	/*

	 * For each block in the chain free it and make it available

	 * for future use. Erase from the oldest unit first.

 If the chain is all gone already, we're done */

 Find oldest unit in chain. */

			/*

			 * Could not erase : mark block as reserved.

 Correctly erased : mark it as free */

 Now sort out whatever was pointing to it... */

		/* Ideally we'd actually be responsive to new

		   requests while we're doing this -- if there's

 Is block all zero? */

			/*

			 * If we _still_ haven't got a block to use,

			 * we're screwed.

		/*

		 * need to write SECTOR_USED flags since they are not written

		 * in mtd_writeecc

 The requested block is not on the media, return all 0x00 */

 Handle corrected bit flips gracefully */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * NFTL mount code with extensive checks

 *

 * Author: Fabrice Bellard (fabrice.bellard@netgem.com)

 * Copyright © 2000 Netgem S.A.

 * Copyright © 1999-2010 David Woodhouse <dwmw2@infradead.org>

/* find_boot_record: Find the NFTL Media Header and its Spare copy which contains the

 *	various device information of the NFTL partition and Bad Unit Table. Update

 *	the ReplUnitTable[] table according to the Bad Unit Table. ReplUnitTable[]

 *	is used for management of Erase Unit in other routines in nftl.c and nftlmount.c

        /* Assume logical EraseSize == physical erasesize for starting the scan.

	/* Actually, we won't.  The new DiskOnChip driver has already scanned

	   the MediaHeader and adjusted the virtual erasesize it presents in

	   the mtd device accordingly.  We could even get rid of

 search for a valid boot record */

		/* Check for ANAND header first. Then can whinge if it's found but later

		/* We ignore ret in case the ECC of the MediaHeader is invalid

 ANAND\0 not found. Continue */

 To be safer with BIOS, also use erase mark as discriminant */

#if 0 /* Some people seem to have devices without ECC or erase marks

	 on the Media Header blocks. There are enough other sanity

	 checks in here that we can probably do without it.

 Finally reread to check ECC */

 Paranoia. Check the ANAND header is still there after the ECC read */

 OK, we like it. */

			/* We've already processed one. So we just check if

 if (debug) Print both side by side */

 We haven't yet seen two real ones */

 Mark this boot record (NFTL MediaHeader) block as reserved */

 This is the first we've seen. Copy the media header structure into place */

 Do some sanity checks on it */

		/* If we're not using the last sectors in the device for some reason,

 XXX: will be suppressed */

 memory alloc */

 mark the bios blocks (blocks before NFTL MediaHeader) as reserved */

 mark all remaining blocks as potentially containing data */

 Mark this boot record (NFTL MediaHeader) block as reserved */

 read the Bad Erase Unit Table and modify ReplUnitTable[] accordingly */

 read one sector for every SECTORSIZE of blocks */

 mark the Bad Erase Unit as RESERVED in ReplUnitTable */

 foreach (block) */

 check_free_sector: check if a free sector is actually FREE, i.e. All 0xff in data and oob area */

/* NFTL_format: format a Erase Unit by erasing ALL Erase Zones in the Erase Unit and

 *              Update NFTL metadata. Each erase operation is checked with check_free_sectors

 *

 * Return: 0 when succeed, -1 on error.

 *

 *  ToDo: 1. Is it necessary to check_free_sector after erasing ??

 Read the Unit Control Information #1 for Wear-Leveling */

 XXX: use async erase interface, XXX: test return code */

 increase and write Wear-Leveling info */

 wrap (almost impossible with current flash) or free block */

	/* check the "freeness" of Erase Unit before updating metadata

	 * FixMe:  is this check really necessary ? since we have check the

	 *         return code after the erase operation.

	/* could not format, update the bad block table (caller is responsible

/* check_sectors_in_chain: Check that each sector of a Virtual Unit Chain is correct.

 *	Mark as 'IGNORE' each incorrect sector. This check is only done if the chain

 *	was being folded when NFTL was interrupted.

 *

 *	The check_free_sectors in this function is necessary. There is a possible

 *	situation that after writing the Data area, the Block Control Information is

 *	not updated according (due to power failure or something) which leaves the block

 *	in an inconsistent state. So we have to check if a block is really FREE in this

				/* verify that the sector is really free. If not, mark

 sector not free actually : mark it as SECTOR_IGNORE  */

 proceed to next Erase Unit on the chain */

 calc_chain_length: Walk through a Virtual Unit Chain and estimate chain length */

		/* avoid infinite loops, although this is guaranteed not to

/* format_chain: Format an invalid Virtual Unit chain. It frees all the Erase Units in a

 *	Virtual Unit Chain, i.e. all the units are disconnected.

 *

 *	It is not strictly correct to begin from the first block of the chain because

 *	if we stop the code, we may see again a valid chain if there was a first_block

 *	flag in a block inside it. But is it really a problem ?

 *

 * FixMe: Figure out what the last statement means. What if power failure when we are

 *	in the for (;;) loop formatting blocks ??

 cannot format !!!! Mark it as Bad Unit */

 goto next block on the chain */

/* check_and_mark_free_block: Verify that a block is free in the NFTL sense (valid erase mark) or

 *	totally free (only 0xff).

 *

 * Definition: Free Erase Unit -- A properly erased/formatted Free Erase Unit should have meet the

 *	following criteria:

 check erase mark. */

		/* if no erase mark, the block must be totally free. This is

 free block : write erase mark */

 if erase mark present, need to skip it when doing check */

 check free sector */

 skip erase mark */

/* get_fold_mark: Read fold mark from Unit Control Information #2, we use FOLD_MARK_IN_PROGRESS

 *	to indicate that we are in the progression of a Virtual Unit Chain folding. If the UCI #2

 *	is FOLD_MARK_IN_PROGRESS when mounting the NFTL, the (previous) folding process is interrupted

 *	for some reason. A clean up/check of the VUC is necessary in this case.

 *

 * WARNING: return 0 if read error

 search for NFTL MediaHeader and Spare NFTL Media Header */

 init the logical to physical table */

 first pass : explore each block chain */

 if the block was not already explored, we can look at it */

 read the block header. If error, we format the chain */

 invalid/free block test */

 if not currently in a chain, we can handle it safely */

 not really free: format it */

 could not format: reserve the block */

 free block: mark it */

 directly examine the next block. */

						/* the block was in a chain : this is bad. We

 we accept only first blocks here */

					/* this block is not the first block in chain :

					   ignore it, it will be included in a chain

						/* the chain is incorrect : we must format it,

						/* we accept that a block is marked as first

						   block while being last block in a chain

							/* the chain is incorrect : we must format it,

 no more blocks after */

					/* same problem as previous 'is_first_block' test:

					   we accept that the last block of a chain has

					   the first_block flag set if folding is in

					   progress. We handle here the case where the

 EUNtable[] will be set after */

 XXX: should handle correctly fold in progress chains */

 this is OK */

			/* the chain was completely explored. Now we can decide

 invalid chain : format it */

 valid chain : get foldmark */

 cannot get foldmark : format the chain */

					/* now handle the case where we find two chains at the

					   same virtual address : we select the longer one,

					   because the shorter one is the one which was being

 XXX: what to do if same length ? */

 second pass to format unreferenced blocks  and init free block count */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rfd_ftl.c -- resident flash disk (flash translation layer)

 *

 * Copyright © 2005  Sean Young <sean@mess.org>

 *

 * This type of flash translation layer (FTL) is used by the Embedded BIOS

 * by General Software. It is known as the Resident Flash Disk (RFD), see:

 *

 *	http://www.gensw.com/pages/prod/bios/rfd.htm

 *

 * based on ftl.c

 This major has been assigned by device@lanana.org */

 Maximum number of partitions in an FTL region */

 An erase unit should start with this value */

 the second value is 0xffff or 0xffc8; function unknown */

 the third value is always 0xffff, ignored */

 next is an array of mapping for each corresponding sector */

 size of erase unit */

 number of erase units */

 header sectors in erase unit */

 data sectors in erase unit */

 sectors in translated disk */

 bytes in header sector */

 block next up for reclaim */

 block to write to */

 cached header */

 each erase block has three bytes header, followed by the map */

 already warned about and ignored in build_block_map() */

 we have a race if sync doesn't exist */

 MAX_INT */

		/*

		 * Postpone reclaiming if there is a free sector as

		 * more removed sectors is more efficient (have to move

		 * less).

 no point in moving a full block */

/*

 * IMPROVE: It would be best to choose the block with the most deleted sectors,

 * because if we fill that one up first it'll have the most chance of having

 * the least live sectors at reclaim.

/* This version ported to the Linux-MTD system by dwmw2@infradead.org

 *

 * Fixes: Arnaldo Carvalho de Melo <acme@conectiva.com.br>

 * - fixes some leaks on failure in build_maps and ftl_notify_add, cleanups

 *

 * Based on:

/*======================================================================



    A Flash Translation Layer memory card driver



    This driver implements a disk-like block device driver with an

    apparent block size of 512 bytes for flash memory cards.



    ftl_cs.c 1.62 2000/02/01 00:59:04



    The contents of this file are subject to the Mozilla Public

    License Version 1.1 (the "License"); you may not use this file

    except in compliance with the License. You may obtain a copy of

    the License at http://www.mozilla.org/MPL/



    Software distributed under the License is distributed on an "AS

    IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or

    implied. See the License for the specific language governing

    rights and limitations under the License.



    The initial developer of the original code is David A. Hinds

    <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds

    are Copyright © 1999 David A. Hinds.  All Rights Reserved.



    Alternatively, the contents of this file may be used under the

    terms of the GNU General Public License version 2 (the "GPL"), in

    which case the provisions of the GPL are applicable instead of the

    above.  If you wish to allow the use of your version of this file

    only under the terms of the GPL and not to allow others to use

    your version of this file under the MPL, indicate your decision

    by deleting the provisions above and replace them with the notice

    and other provisions required by the GPL.  If you do not delete

    the provisions above, a recipient may use your version of this

    file under either the MPL or the GPL.



    LEGAL NOTE: The FTL format is patented by M-Systems.  They have

    granted a license for its use with PCMCIA devices:



     "M-Systems grants a royalty-free, non-exclusive license under

      any presently existing M-Systems intellectual property rights

      necessary for the design and development of FTL-compatible

      drivers, file systems and utilities using the data formats with

      PCMCIA PC Cards as described in the PCMCIA Flash Translation

      Layer (FTL) Specification."



    Use of the FTL format for non-PCMCIA applications may be an

    infringement of these patents.  For additional information,

    contact M-Systems directly. M-Systems since acquired by Sandisk. 



#define PSYCHO_DEBUG */

====================================================================*/

 Parameters that can be set with 'insmod' */

====================================================================*/

 Major device # for FTL device */

====================================================================*/

 Maximum number of separate memory devices we'll allow */

 Maximum number of regions per device */

 Maximum number of partitions in an FTL region */

 Maximum number of outstanding erase requests per socket */

 Sector size -- shouldn't need to change */

 Each memory region corresponds to a minor device */

 Partition state flags */

 Transfer unit states */

/*======================================================================



    Scan_header() checks to see if a memory region contains an FTL

    partition.  build_maps() reads all the erase unit headers, builds

    the erase unit map, and then builds the virtual page map.



 Search first megabyte for a valid FTL header */

 Set up erase unit maps */

 Is this a transfer partition? */

 Pick anything reasonable for the erase count */

 Check for format trouble */

 Set up virtual page map */

 build_maps */

/*======================================================================



    Erase_xfer() schedules an asynchronous erase operation for a

    transfer unit.



 Is there a free erase slot? Always in MTD. */

 erase_xfer */

/*======================================================================



    Prepare_xfer() takes a freshly erased transfer unit and gives

    it an appropriate header.



 Write the transfer unit header */

 Write the BAM stub */

 prepare_xfer */

/*======================================================================



    Copy_erase_unit() takes a full erase block and a transfer unit,

    copies everything to the transfer unit, then swaps the block

    pointers.



    All data blocks are copied to the corresponding blocks in the

    target unit, so the virtual block map does not need to be

    updated.



 Read current BAM */

 mark the cache bad, in case we get an error later */

 Write the LogicalEUN for the transfer unit */

 Bad! */

 Copy all data blocks from source unit to transfer unit */

 This gets updated later */

 All other blocks must be free */

 Write the BAM to the transfer unit */

 All clear? Then update the LogicalEUN again */

 Update the maps and usage stats*/

 Now, the cache should be valid for the new block */

 copy_erase_unit */

/*======================================================================



    reclaim_block() picks a full erase unit and a transfer unit and

    then calls copy_erase_unit() to copy one to the other.  Then, it

    schedules an erase on the expired block.



    What's a good way to decide which transfer unit and which erase

    unit to use?  Beats me.  My way is to always pick the transfer

    unit with the fewest erases, and usually pick the data unit with

    the most deleted blocks.  But with a small probability, pick the

    oldest data unit instead.  This means that we generally postpone

    the next reclamation as long as possible, but shuffle static

    stuff around a bit for wear leveling.



 Pick the least erased transfer unit */

 reclaim_block */

/*======================================================================



    Find_free() searches for a free block.  If necessary, it updates

    the BAM cache for the erase unit containing the free block.  It

    returns the block index -- the erase unit is just the currently

    cached unit.  If there are no free blocks, it returns 0 -- this

    is never a valid data block because it contains the header.



 Find an erase unit with some free space */

 Wrap around at end of table */

 Is this unit's BAM cached? */

 Invalidate cache */

 Find a free block */

 find_free */

/*======================================================================



    Read a series of sectors from an FTL partition.



 ftl_read */

/*======================================================================



    Write a series of sectors to an FTL partition



 set_bam_entry */

 See if we need to reclaim space, before we start */

 Grab a free block */

 Tag the BAM entry, and write the new block */

 Only delete the old entry when the new entry is ready */

 Finally, set up the new pointers */

 ftl_write */

 Sort of arbitrary: round size down to 4KiB boundary */

====================================================================*/

 ftl_freepart */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright © 2009 - Maxim Levitsky

 * SmartMedia/xD translation layer

 ------------------- sysfs attributes ---------------------------------- */

 Initialize sysfs attributes */

 Create array of pointers to the attributes */

 Finally create the attribute group */

 ----------------------- oob helpers -------------------------------------- */

 check fixed bits */

 check parity - endianness doesn't matter */

/*

 * Read LBA associated with block

 * returns -1, if block is erased

 * returns -2 if error happens

 First test for erased block */

 Now check is both copies of the LBA differ too much */

 And read it */

 Make offset from parts */

 Breaks offset into parts */

 ---------------------- low level IO ------------------------------------- */

 Reads a sector + oob*/

 FTL can contain -1 entries that are by default filled with bits */

 User might not need the oob, but we do for data verification */

		/* Avoid infinite recursion on CIS reads, sm_recheck_media

		 * won't help anyway

 Test if media is stable */

	/* Unfortunately, oob read will _always_ succeed,

	 * despite card removal.....

 Test for unknown errors */

 Do a basic test on the oob, to guard against returned garbage */

 This should never happen, unless there is a bug in the mtd driver */

 Test if sector marked as bad */

 Test ECC*/

 Writes a sector to media */

 Now we assume that hardware will catch write bitflip errors */

 This should never happen, unless there is a bug in the driver */

 ------------------------ block IO ------------------------------------- */

 Write a block using data and lba, and invalid sector bitmap */

 Initialize the oob with requested values */

 If write fails. try to erase the block */

			/* This is safe, because we never write in blocks

			 * that contain valuable data.

			 * This is intended to repair block that are marked

			 * as erased, but that isn't fully erased

 Mark whole block at offset 'offs' as bad. */

 We aren't checking the return value, because we don't care */

	/* This also fails on fake xD cards, but I guess these won't expose

	 * any bad blocks till fail completely

/*

 * Erase a block within a zone

 * If erase succeeds, it updates free block fifo, otherwise marks block as bad

 Thoroughly test that block is valid. */

 First just check that block doesn't look fishy */

	/* Only blocks that are valid or are sliced in two parts, are

	 * accepted

 This shouldn't happen anyway */

 If we found three different LBAs, something is fishy */

 If the block is sliced (partially erased usually) erase it */

 ----------------- media scanning --------------------------------- */

/* Find out media parameters.

 * This ideally has to be based on nand id, but for now device size is enough

 Manual settings for very old devices */

 1 MiB flash/rom SmartMedia card (256 byte pages)*/

 2 MiB flash SmartMedia (256 byte pages)*/

 2 MiB rom SmartMedia */

 4 MiB flash/rom SmartMedia device */

 8 MiB flash/rom SmartMedia device */

	/* Minimum xD size is 16MiB. Also, all xD cards have standard zone

	 * sizes. SmartMedia cards exist up to 128 MiB and have same layout

 Test for proper write,erase and oob sizes */

 We use OOB */

 Find geometry information */

 Validate the CIS */

 Scan the media for the CIS */

 Search for first valid block */

 Search for first valid sector in this block */

 Basic test to determine if underlying mtd device if functional */

 Initialize a FTL zone */

 Allocate memory for FTL table */

 Allocate memory for free sectors FIFO */

 Now scan the zone */

 Skip blocks till the CIS (including) */

 Read the oob of first sector */

		/* Test to see if block is erased. It is enough to test

		 * first sector, because erase happens in one shot

 If block is marked as bad, skip it */

 This assumes we can trust first sector*/

		/* However the way the block valid status is defined, ensures

		 * very low probability of failure here

 Invalid LBA means that block is damaged. */

		/* We can try to erase it, or mark it as bad, but

		 * lets leave that to recovery application

		/* If there is no collision,

		 * just put the sector in the FTL table

 Test that this block is valid*/

 Test now the old block */

		/* If both blocks are valid and share same LBA, it means that

		 * they hold different versions of same data. It not

		 * known which is more recent, thus just erase one of them

	/* No free sectors, means that the zone is heavily damaged, write won't

	 * work, but it can still can be (partially) read

 Randomize first block we write to */

 Get and automatically initialize an FTL mapping for one zone */

 ----------------- cache handling ------------------------------------------*/

 Initialize the one block cache */

memset(ftl->cache_data, 0xAA, ftl->block_size);*/

 Put sector in one block cache */

 Read a sector from the cache */

 Write the cache to hardware */

 Try to read all unread areas of the cache block*/

 If there are no spare blocks, */

	/* we could still continue by erasing/writing the current block,

	 * but for such worn out media it doesn't worth the trouble,

	 * and the dangers

 Update the FTL table */

 Write succesfull, so erase and free the old block */

 flush timer, runs a second after last write */

 cache flush work, kicked by timer */

 ---------------- outside interface -------------------------------------- */

 outside interface: read a sector */

 Have to look at cache first */

 Translate the block and return if doesn't exist in the table */

 outside interface: write a sector */

 No need in flush thread running now */

 If entry is not in cache, flush it */

 outside interface: flush everything */

 outside interface: device is released */

 outside interface: get geometry */

 external interface: main initialization function */

 Allocate & initialize our private structure */

 Read media information */

 Allocate temporary CIS buffer for read retry support */

 Allocate zone array, it will be initialized on demand */

 Allocate the cache*/

 Allocate upper layer structure and initialize it */

 Register device*/

 main interface: device {surprise,} removal */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * inftlmount.c -- INFTL mount code with extensive checks.

 *

 * Author: Greg Ungerer (gerg@snapgear.com)

 * Copyright © 2002-2003, Greg Ungerer (gerg@snapgear.com)

 *

 * Based heavily on the nftlmount.c code which is:

 * Author: Fabrice Bellard (fabrice.bellard@netgem.com)

 * Copyright © 2000 Netgem S.A.

/*

 * find_boot_record: Find the INFTL Media Header and its Spare copy which

 *	contains the various device information of the INFTL partition and

 *	Bad Unit Table. Update the PUtable[] table according to the Bad

 *	Unit Table. PUtable[] is used for management of Erase Unit in

 *	other routines in inftlcore.c and inftlmount.c.

struct inftl_oob oob;

        /*

	 * Assume logical EraseSize == physical erasesize for starting the

	 * scan. We'll sort it out later if we find a MediaHeader which says

	 * otherwise.

 Search for a valid boot record */

		/*

		 * Check for BNAND header first. Then whinge if it's found

		 * but later checks fail.

		/* We ignore ret in case the ECC of the MediaHeader is invalid

 BNAND\0 not found. Continue */

 To be safer with BIOS, also use erase mark as discriminant */

		/*

		 * This is the first we've seen.

		 * Copy the media header structure into place.

 Read the spare media header at offset 4096 */

 Check if this one is the same as the first one we found. */

 Scan the partitions */

				/*

				 * 	Most likely this is using the

				 * 	undocumented qiuck mount feature.

				 * 	We don't support that, we will need

				 * 	to erase the hidden block for full

				 * 	compatibility.

		/*

		 * Block count is set to last used EUN (we won't need to keep

		 * any meta-data past that point).

 Memory alloc */

 Mark the blocks before INFTL MediaHeader as reserved */

 Mark all remaining blocks as potentially containing data */

 Mark this boot record (NFTL MediaHeader) block as reserved */

 Read Bad Erase Unit Table and modify PUtable[] accordingly */

			/* If any of the physical eraseblocks are bad, don't

 Not found. */

/*

 * check_free_sector: check if a free sector is actually FREE,

 *	i.e. All 0xff in data and oob area.

/*

 * INFTL_format: format a Erase Unit by erasing ALL Erase Zones in the Erase

 *		 Unit and Update INFTL metadata. Each erase operation is

 *		 checked with check_free_sectors.

 *

 * Return: 0 when succeed, -1 on error.

 *

 * ToDo: 1. Is it necessary to check_free_sector after erasing ??

	/* FIXME: Shouldn't we be setting the 'discarded' flag to zero

 Use async erase interface, test return code */

	/* Erase one physical eraseblock at a time, even though the NAND api

	   allows us to group them.  This way we if we have a failure, we can

		/*

		 * Check the "freeness" of Erase Unit before updating metadata.

		 * FixMe: is this check really necessary? Since we have check

		 * the return code after the erase operation.

	/* could not format, update the bad block table (caller is responsible

/*

 * format_chain: Format an invalid Virtual Unit chain. It frees all the Erase

 *	Units in a Virtual Unit Chain, i.e. all the units are disconnected.

 *

 *	Since the chain is invalid then we will have to erase it from its

 *	head (normally for INFTL we go from the oldest). But if it has a

 *	loop then there is no oldest...

			/*

			 * Cannot format !!!! Mark it as Bad Unit,

 Goto next block on the chain */

 Search for INFTL MediaHeader and Spare INFTL Media Header */

 Init the logical to physical table */

 Temporary buffer to store ANAC numbers. */

	/*

	 * First pass is to explore each physical unit, and construct the

	 * virtual chains that exist (newest physical unit goes into VUtable).

	 * Any block that is in any way invalid will be left in the

	 * NOTEXPLORED state. Then at the end we will try to format it and

	 * mark it as free.

 Nothing to do here, onto next block */

 Should never happen? */

 Previous block is relative to start of Partition */

 Already explored partial chain? */

 Check if chain for this logical */

 Check for invalid block */

				/*

				 * Assume end of chain, probably incomplete

				 * fold/erase...

 Check for it being free already then... */

 Sanity checks on block numbers */

 Normal for folded chain... */

			/*

			 * Current block is valid, so if we followed a virtual

			 * chain to get here then we can set the previous

			 * block pointer in our PUtable now. Then move onto

			 * the previous block in the chain.

 Check for end of chain */

 Validate next block before following it... */

		/*

		 * Looks like a valid chain then. It may not really be the

		 * newest block in the chain, but it is the newest we have

		 * found so far. We might update it in later iterations of

		 * this loop if we find something newer.

	/*

	 * Second pass, check for infinite loops in chains. These are

	 * possible because we don't update the previous pointers when

	 * we fold chains. No big deal, just fix them up in PUtable.

 Check for free/reserved/nil */

				/*

				 * Chain must point back to itself. This is ok,

				 * but we will need adjust the tables with this

				 * newest block and oldest block.

			/*

			 * Uhoo, infinite chain with valid ANACS!

			 * Format whole chain...

	/*

	 * Third pass, format unreferenced blocks and init free block count.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Linux driver for SSFDC Flash Translation Layer (Read only)

 * © 2005 Eptar srl

 * Author: Claudio Lanconelli <lanconelli.claudio@eptar.com>

 *

 * Based on NTFL and MTDBLOCK_RO drivers

 block n. containing CIS/IDI */

 phys_block_size */

	unsigned short *logic_block_map; /* all zones (max 8192 phys blocks on

 n. phys_blocks on the card */

/** CHS Table

		1MiB	2MiB	4MiB	8MiB	16MiB	32MiB	64MiB	128MiB

NCylinder	125	125	250	250	500	500	500	500

NHead		4	4	4	4	4	8	8	16

NSector		4	8	8	16	16	16	32	32

SumSector	2,000	4,000	8,000	16,000	32,000	64,000	128,000	256,000

SectorSize	512	512	512	512	512	512	512	512

 Must be ordered by size */

 These bytes are the signature for the CIS/IDI sector */

 Read and check for a valid CIS sector */

	/*

	 * Look for CIS/IDI sector on the first GOOD block (give up after 4 bad

	 * blocks). If the first good block doesn't contain CIS number the flash

	 * is not SSFDC formatted

 CIS pattern match on the sector buffer */

 Found */

 Read physical sector (wrapper to MTD_READ) */

 Read redundancy area (wrapper to MTD_READ_OOB */

 Parity calculator on a word of n bit size */

 Read and validate the logical block address field stored in the OOB */

 offset of the 2 address fields within OOB */

	/*

	 * Look for the first valid logical address

	 * Valid address has fixed pattern on most significant bits and

	 * parity check

 Check for the signature bits in the address field (MSBits) */

 Build the logic block map */

 Scan every physical block, skip CIS block */

 skip bad blocks */

 Skip invalid addresses */

 Check for small page NAND flash */

 Check for SSDFC format by reading CIS/IDI sector */

 Set geometry */

 Allocate logical block map */

 Build logical block map */

 Register device + partitions */

/****************************************************************************

 *

 * Module stuff

 *

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Linux driver for NAND Flash Translation Layer

 *

 * Copyright © 1999 Machine Vision Holdings, Inc.

 * Copyright © 1999-2010 David Woodhouse <dwmw2@infradead.org>

/* maximum number of loops while examining next block, to have a

   chance to detect consistency problems (they should never happen

 OK, this is moderately ugly.  But probably safe.  Alternatives? */

 OK, it's a new one. Set up all the data structures. */

 Calculate geometry */

		/*

		  Oh no we don't have

		   mbd.size == heads * cylinders * sectors

/*

 * Read oob data from flash

/*

 * Write oob data to flash

/*

 * Write data and oob to flash

 Actual NFTL access routines */

/* NFTL_findfreeblock: Find a free Erase Unit on the NFTL partition. This function is used

 *	when the give Virtual Unit Chain

	/* For a given Virtual Unit Chain: find or create a free block and

	/* We're passed the number of the last EUN in the chain, to save us from

 Normally, we force a fold to happen before we run out of free blocks completely */

 Scan for a free block */

		/* This will probably point to the MediaHdr unit itself,

		   right at the beginning of the partition. But that unit

		   (and the backup unit too) should have the UCI set

	/* Scan to find the Erase Unit which holds the actual data for each

	   512-byte block within the Chain.

					/* There's no other reason not to do inplace,

					   except ones that come later. So we don't need

		/* We're being asked to be a fold-in-place. Check

		   that all blocks which actually have data associated

		   with them (i.e. BlockMap[block] != BLOCK_NIL) are

		   either already present or SECTOR_FREE in the target

		   block. If not, we're going to have to fold out-of-place

		   anyway.

 We need to find a targetEUN to fold into. */

			/* Ouch. Now we're screwed. We need to do a

			   fold-in-place of another chain to make room

			   for this one. We need a better way of selecting

			   which chain to fold, because makefreeblock will

			   only ask us to fold the same one again.

		/* We put a fold mark in the chain we are folding only if we

               fold in place to help the mount check code. If we do not fold in

               place, it is possible to find the valid chain by selecting the

	/* OK. We now know the location of every block in the Virtual Unit Chain,

	   and the Erase Unit into which we are supposed to be copying.

	   Go for it.

 If it's in the target EUN already, or if it's pending write, do nothing */

		/* copy only in non free block (free blocks can only

 add the header so that it is now a valid chain */

 OK. We've moved the whole lot into the new block. Now we have to free the original blocks. */

	/* At this point, we have two different chains for this Virtual Unit, and no way to tell

	   them apart. If we crash now, we get confused. However, both contain the same data, so we

	   shouldn't actually lose data in this case. It's just that when we load up on a medium which

	   has duplicate chains, we need to free one of the chains because it's not necessary any more.

	/* For each block in the old chain (except the targetEUN of course),

			/* could not erase : mark block as reserved

 correctly erased : mark it as free */

 Make this the new start of chain for thisVUC */

	/* This is the part that needs some cleverness applied.

	   For now, I'm doing the minimum applicable to actually

	   get the thing to work.

	   Wear-levelling and other clever stuff needs to be implemented

	   and we also need to do some assessment of the results when

	   the system loses power half-way through the routine.

printk("VUC %d reaches len %d with EUN %d\n", chain, thislen, EUN);

				/* Actually, don't return failure. Just ignore this chain and

printk("New longest chain is %d with length %d\n", chain, thislen);

/* NFTL_findwriteunit: Return the unit number into which we can write

                       for this block. Make it available if it isn't already

		/* Scan the media to find a unit in the VUC which has

		   a free space for the block in question.

		/* This condition catches the 0x[7f]fff cases, as well as

		   being a sanity check for past-end-of-media access

 Invalid block. Don't use it any more. Must implement.

 Skip to next block in chain */

		/* OK. We didn't find one in the existing chain, or there

 Try to find an already-free block */

			/* That didn't work - there were no free blocks just

			   waiting to be picked up. We're going to have to fold

			   a chain to make room.

 First remember the start of this chain */

u16 startEUN = nftl->EUNtable[thisVUC];

printk("Write to VirtualUnitChain %d, calling makefreeblock()\n", thisVUC);

				/* OK, we accept that the above comment is

				   lying - there may have been free blocks

				   last time we called NFTL_findfreeblock(),

				   but they are reserved for when we're

				   desperate. Well, now we're desperate.

				/* Ouch. This should never happen - we should

				   always be able to make some room somehow.

				   If we get here, we've allocated more storage

				   space than actual media, or our makefreeblock

				   routine is missing something.

printk("Restarting scan\n");

 We've found a free block. Insert it into the chain. */

 It's a replacement block */

 The first block in a new chain */

 set up the actual EUN we're writing into */

 Both in our cache... */

 ... and on the flash itself */

		/* we link the new block to the chain only after the

                   block is ready. It avoids the case where the chain

 Both in our cache... */

 ... and on the flash itself */

 If we _still_ haven't got a block to use, we're screwed */

 CONFIG_NFTL_RW */

 no modification of a sector should follow a free sector */

 the requested block is not on the media, return all 0x00 */

/****************************************************************************

 *

 * Module stuff

 *

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Core registration and callback routines for MTD

 * drivers and users.

 *

 * Copyright © 1999-2010 David Woodhouse <dwmw2@infradead.org>

 * Copyright © 2006      Red Hat UK Limited 

/* These are exported solely for the purpose of mtd_blkdevs.c. You

/* REVISIT once MTD uses the driver model better, whoever allocates

 * the mtd_info will probably want to use the release() hook...

 remove /dev/mtdXro node */

 ecc stats corrected */

 ecc stats errors */

/**

 * mtd_wunit_to_pairing_info - get pairing information of a wunit

 * @mtd: pointer to new MTD device info structure

 * @wunit: write unit we are interested in

 * @info: returned pairing information

 *

 * Retrieve pairing information associated to the wunit.

 * This is mainly useful when dealing with MLC/TLC NANDs where pages can be

 * paired together, and where programming a page may influence the page it is

 * paired with.

 * The notion of page is replaced by the term wunit (write-unit) to stay

 * consistent with the ->writesize field.

 *

 * The @wunit argument can be extracted from an absolute offset using

 * mtd_offset_to_wunit(). @info is filled with the pairing information attached

 * to @wunit.

 *

 * From the pairing info the MTD user can find all the wunits paired with

 * @wunit using the following loop:

 *

 * for (i = 0; i < mtd_pairing_groups(mtd); i++) {

 *	info.pair = i;

 *	mtd_pairing_info_to_wunit(mtd, &info);

 *	...

 * }

/**

 * mtd_pairing_info_to_wunit - get wunit from pairing information

 * @mtd: pointer to new MTD device info structure

 * @info: pairing information struct

 *

 * Returns a positive number representing the wunit associated to the info

 * struct, or a negative error code.

 *

 * This is the reverse of mtd_wunit_to_pairing_info(), and can help one to

 * iterate over all wunits of a given pair (see mtd_wunit_to_pairing_info()

 * doc).

 *

 * It can also be used to only program the first page of each pair (i.e.

 * page attached to group 0), which allows one to use an MLC NAND in

 * software-emulated SLC mode:

 *

 * info.group = 0;

 * npairs = mtd_wunit_per_eb(mtd) / mtd_pairing_groups(mtd);

 * for (info.pair = 0; info.pair < npairs; info.pair++) {

 *	wunit = mtd_pairing_info_to_wunit(mtd, &info);

 *	mtd_write(mtd, mtd_wunit_to_offset(mtd, blkoffs, wunit),

 *		  mtd->writesize, &retlen, buf + (i * mtd->writesize));

 * }

/**

 * mtd_pairing_groups - get the number of pairing groups

 * @mtd: pointer to new MTD device info structure

 *

 * Returns the number of pairing groups.

 *

 * This number is usually equal to the number of bits exposed by a single

 * cell, and can be used in conjunction with mtd_pairing_info_to_wunit()

 * to iterate over all pages of a given pair.

 Just ignore if there is no NVMEM support in the kernel */

/**

 *	add_mtd_device - register an MTD device

 *	@mtd: pointer to new MTD device info structure

 *

 *	Add a device to the list of MTD devices present in the system, and

 *	notify each currently active MTD 'user' of its arrival. Returns

 *	zero on success or non-zero on failure.

	/*

	 * May occur, for instance, on buggy drivers which call

	 * mtd_device_parse_register() multiple times on the same master MTD,

	 * especially with CONFIG_MTD_PARTITIONED_MASTER=y.

	/*

	 * MTD drivers should implement ->_{write,read}() or

	 * ->_{write,read}_oob(), but not both.

	/*

	 * MTD_SLC_ON_MLC_EMULATION can only be set on partitions, when the

	 * master is an MLC NAND and has a proper pairing scheme defined.

	 * We also reject masters that implement ->_writev() for now, because

	 * NAND controller drivers don't implement this hook, and adding the

	 * SLC -> MLC address/length conversion to this path is useless if we

	 * don't have a user.

 default value if not set by driver */

 Some chips always power up locked. Unlock them now */

 Ignore unlock failures? */

	/* Caller should have set dev.parent to match the

	 * physical device, if appropriate.

 Add the nvmem provider */

	/* No need to get a refcount on the module containing

	/* We _know_ we aren't being removed, because

	   our caller is still holding us here. So none

	   of this try_ nonsense, and no bitching about it

/**

 *	del_mtd_device - unregister an MTD device

 *	@mtd: pointer to MTD device info structure

 *

 *	Remove a device from the list of MTD devices present in the system,

 *	and notify each currently active MTD 'user' of its departure.

 *	Returns zero on success or 1 on failure, which currently will happen

 *	if the requested device does not appear to be present in the list.

	/* No need to get a refcount on the module containing

 Try to remove the NVMEM provider */

/*

 * Set a few defaults based on the parent devices, if not provided by the

 * driver

 ENODATA means there is no OTP region. */

 DT binding is optional */

 OTP nvmem will be registered on the physical device */

 just reuse the compatible as name */

 Just ignore if there is no NVMEM support in the kernel */

/**

 * mtd_device_parse_register - parse partitions and register an MTD device.

 *

 * @mtd: the MTD device to register

 * @types: the list of MTD partition probes to try, see

 *         'parse_mtd_partitions()' for more information

 * @parser_data: MTD partition parser-specific data

 * @parts: fallback partition information to register, if parsing fails;

 *         only valid if %nr_parts > %0

 * @nr_parts: the number of partitions in parts, if zero then the full

 *            MTD device is registered if no partition info is found

 *

 * This function aggregates MTD partitions parsing (done by

 * 'parse_mtd_partitions()') and MTD device and partitions registering. It

 * basically follows the most common pattern found in many MTD drivers:

 *

 * * If the MTD_PARTITIONED_MASTER option is set, then the device as a whole is

 *   registered first.

 * * Then It tries to probe partitions on MTD device @mtd using parsers

 *   specified in @types (if @types is %NULL, then the default list of parsers

 *   is used, see 'parse_mtd_partitions()' for more information). If none are

 *   found this functions tries to fallback to information specified in

 *   @parts/@nr_parts.

 * * If no partitions were found this function just registers the MTD device

 *   @mtd and exits.

 *

 * Returns zero in case of success and a negative error code in case of failure.

 Prefer parsed partitions over driver-provided fallback */

	/*

	 * FIXME: some drivers unfortunately call this function more than once.

	 * So we have to check if we've already assigned the reboot notifier.

	 *

	 * Generally, we can make multiple calls work for most cases, but it

	 * does cause problems with parse_mtd_partitions() above (e.g.,

	 * cmdlineparts will register partitions more than once).

/**

 * mtd_device_unregister - unregister an existing MTD device.

 *

 * @master: the MTD device to unregister.  This will unregister both the master

 *          and any partitions if registered.

/**

 *	register_mtd_user - register a 'user' of MTD devices.

 *	@new: pointer to notifier info structure

 *

 *	Registers a pair of callbacks function to be called upon addition

 *	or removal of MTD devices. Causes the 'add' callback to be immediately

 *	invoked for each MTD device currently present in the system.

/**

 *	unregister_mtd_user - unregister a 'user' of MTD devices.

 *	@old: pointer to notifier info structure

 *

 *	Removes a callback function pair from the list of 'users' to be

 *	notified upon addition or removal of MTD devices. Causes the

 *	'remove' callback to be immediately invoked for each MTD device

 *	currently present in the system.

/**

 *	get_mtd_device - obtain a validated handle for an MTD device

 *	@mtd: last known address of the required MTD device

 *	@num: internal device number of the required MTD device

 *

 *	Given a number and NULL address, return the num'th entry in the device

 *	table, if any.	Given an address and num == -1, search the device table

 *	for a device with that address and return if it's still present. Given

 *	both, return the num'th driver only if its address matches. Return

 *	error code if not.

/**

 *	get_mtd_device_nm - obtain a validated handle for an MTD device by

 *	device name

 *	@name: MTD device name to open

 *

 * 	This function returns MTD device description structure in case of

 * 	success and an error code in case of failure.

/*

 * Erase is an synchronous operation. Device drivers are epected to return a

 * negative error code if the operation failed and update instr->fail_addr

 * to point the portion that was not properly erased.

/*

 * This stuff for eXecute-In-Place. phys is optional and may be set to NULL.

 We probably shouldn't allow XIP if the unpoint isn't a NULL */

/*

 * Allow NOMMU mmap() to directly map the device (if not NULL)

 * - return the address to which the offset maps

 * - return -ENOSYS to indicate refusal to do the mapping

/*

 * In blackbox flight recorder like scenarios we want to make successful writes

 * in interrupt context. panic_write() is only intended to be called when its

 * known the kernel is about to panic and we need the write to succeed. Since

 * the kernel is not going to be running for much longer, this function can

 * break locks and delay to ensure the write succeeds (but not sleep).

	/*

	 * Some users are setting ->datbuf or ->oobbuf to NULL, but are leaving

	 * ->len or ->ooblen uninitialized. Force ->len and ->ooblen to 0 in

	 *  this case.

 Check the validity of a potential fallback on mtd->_read */

	/*

	 * In cases where ops->datbuf != NULL, mtd->_read_oob() has semantics

	 * similar to mtd->_read(), returning a non-negative integer

	 * representing max bitflips. In other cases, mtd->_read_oob() may

	 * return -EUCLEAN. In all cases, perform similar logic to mtd_read().

 device lacks ecc */

 Check the validity of a potential fallback on mtd->_write */

/**

 * mtd_ooblayout_ecc - Get the OOB region definition of a specific ECC section

 * @mtd: MTD device structure

 * @section: ECC section. Depending on the layout you may have all the ECC

 *	     bytes stored in a single contiguous section, or one section

 *	     per ECC chunk (and sometime several sections for a single ECC

 *	     ECC chunk)

 * @oobecc: OOB region struct filled with the appropriate ECC position

 *	    information

 *

 * This function returns ECC section information in the OOB area. If you want

 * to get all the ECC bytes information, then you should call

 * mtd_ooblayout_ecc(mtd, section++, oobecc) until it returns -ERANGE.

 *

 * Returns zero on success, a negative error code otherwise.

/**

 * mtd_ooblayout_free - Get the OOB region definition of a specific free

 *			section

 * @mtd: MTD device structure

 * @section: Free section you are interested in. Depending on the layout

 *	     you may have all the free bytes stored in a single contiguous

 *	     section, or one section per ECC chunk plus an extra section

 *	     for the remaining bytes (or other funky layout).

 * @oobfree: OOB region struct filled with the appropriate free position

 *	     information

 *

 * This function returns free bytes position in the OOB area. If you want

 * to get all the free bytes information, then you should call

 * mtd_ooblayout_free(mtd, section++, oobfree) until it returns -ERANGE.

 *

 * Returns zero on success, a negative error code otherwise.

/**

 * mtd_ooblayout_find_region - Find the region attached to a specific byte

 * @mtd: mtd info structure

 * @byte: the byte we are searching for

 * @sectionp: pointer where the section id will be stored

 * @oobregion: used to retrieve the ECC position

 * @iter: iterator function. Should be either mtd_ooblayout_free or

 *	  mtd_ooblayout_ecc depending on the region type you're searching for

 *

 * This function returns the section id and oobregion information of a

 * specific byte. For example, say you want to know where the 4th ECC byte is

 * stored, you'll use:

 *

 * mtd_ooblayout_find_region(mtd, 3, &section, &oobregion, mtd_ooblayout_ecc);

 *

 * Returns zero on success, a negative error code otherwise.

	/*

	 * Adjust region info to make it start at the beginning at the

	 * 'start' ECC byte.

/**

 * mtd_ooblayout_find_eccregion - Find the ECC region attached to a specific

 *				  ECC byte

 * @mtd: mtd info structure

 * @eccbyte: the byte we are searching for

 * @section: pointer where the section id will be stored

 * @oobregion: OOB region information

 *

 * Works like mtd_ooblayout_find_region() except it searches for a specific ECC

 * byte.

 *

 * Returns zero on success, a negative error code otherwise.

/**

 * mtd_ooblayout_get_bytes - Extract OOB bytes from the oob buffer

 * @mtd: mtd info structure

 * @buf: destination buffer to store OOB bytes

 * @oobbuf: OOB buffer

 * @start: first byte to retrieve

 * @nbytes: number of bytes to retrieve

 * @iter: section iterator

 *

 * Extract bytes attached to a specific category (ECC or free)

 * from the OOB buffer and copy them into buf.

 *

 * Returns zero on success, a negative error code otherwise.

/**

 * mtd_ooblayout_set_bytes - put OOB bytes into the oob buffer

 * @mtd: mtd info structure

 * @buf: source buffer to get OOB bytes from

 * @oobbuf: OOB buffer

 * @start: first OOB byte to set

 * @nbytes: number of OOB bytes to set

 * @iter: section iterator

 *

 * Fill the OOB buffer with data provided in buf. The category (ECC or free)

 * is selected by passing the appropriate iterator.

 *

 * Returns zero on success, a negative error code otherwise.

/**

 * mtd_ooblayout_count_bytes - count the number of bytes in a OOB category

 * @mtd: mtd info structure

 * @iter: category iterator

 *

 * Count the number of bytes in a given category.

 *

 * Returns a positive value on success, a negative error code otherwise.

/**

 * mtd_ooblayout_get_eccbytes - extract ECC bytes from the oob buffer

 * @mtd: mtd info structure

 * @eccbuf: destination buffer to store ECC bytes

 * @oobbuf: OOB buffer

 * @start: first ECC byte to retrieve

 * @nbytes: number of ECC bytes to retrieve

 *

 * Works like mtd_ooblayout_get_bytes(), except it acts on ECC bytes.

 *

 * Returns zero on success, a negative error code otherwise.

/**

 * mtd_ooblayout_set_eccbytes - set ECC bytes into the oob buffer

 * @mtd: mtd info structure

 * @eccbuf: source buffer to get ECC bytes from

 * @oobbuf: OOB buffer

 * @start: first ECC byte to set

 * @nbytes: number of ECC bytes to set

 *

 * Works like mtd_ooblayout_set_bytes(), except it acts on ECC bytes.

 *

 * Returns zero on success, a negative error code otherwise.

/**

 * mtd_ooblayout_get_databytes - extract data bytes from the oob buffer

 * @mtd: mtd info structure

 * @databuf: destination buffer to store ECC bytes

 * @oobbuf: OOB buffer

 * @start: first ECC byte to retrieve

 * @nbytes: number of ECC bytes to retrieve

 *

 * Works like mtd_ooblayout_get_bytes(), except it acts on free bytes.

 *

 * Returns zero on success, a negative error code otherwise.

/**

 * mtd_ooblayout_set_databytes - set data bytes into the oob buffer

 * @mtd: mtd info structure

 * @databuf: source buffer to get data bytes from

 * @oobbuf: OOB buffer

 * @start: first ECC byte to set

 * @nbytes: number of ECC bytes to set

 *

 * Works like mtd_ooblayout_set_bytes(), except it acts on free bytes.

 *

 * Returns zero on success, a negative error code otherwise.

/**

 * mtd_ooblayout_count_freebytes - count the number of free bytes in OOB

 * @mtd: mtd info structure

 *

 * Works like mtd_ooblayout_count_bytes(), except it count free bytes.

 *

 * Returns zero on success, a negative error code otherwise.

/**

 * mtd_ooblayout_count_eccbytes - count the number of ECC bytes in OOB

 * @mtd: mtd info structure

 *

 * Works like mtd_ooblayout_count_bytes(), except it count ECC bytes.

 *

 * Returns zero on success, a negative error code otherwise.

/*

 * Method to access the protection register area, present in some flash

 * devices. The user data is one time programmable but the factory data is read

 * only.

	/*

	 * If no data could be written at all, we are out of memory and

	 * must return -ENOSPC.

 Chip-supported device locking */

/*

 * default_mtd_writev - the default writev method

 * @mtd: mtd device description object pointer

 * @vecs: the vectors to write

 * @count: count of vectors in @vecs

 * @to: the MTD device offset to write to

 * @retlen: on exit contains the count of bytes written to the MTD device.

 *

 * This function returns zero in case of success and a negative error code in

 * case of failure.

/*

 * mtd_writev - the vector-based MTD write method

 * @mtd: mtd device description object pointer

 * @vecs: the vectors to write

 * @count: count of vectors in @vecs

 * @to: the MTD device offset to write to

 * @retlen: on exit contains the count of bytes written to the MTD device.

 *

 * This function returns zero in case of success and a negative error code in

 * case of failure.

/**

 * mtd_kmalloc_up_to - allocate a contiguous buffer up to the specified size

 * @mtd: mtd device description object pointer

 * @size: a pointer to the ideal or maximum size of the allocation, points

 *        to the actual allocation size on success.

 *

 * This routine attempts to allocate a contiguous kernel buffer up to

 * the specified size, backing off the size of the request exponentially

 * until the request succeeds or until the allocation size falls below

 * the system page size. This attempts to make sure it does not adversely

 * impact system performance, so when allocating more than one page, we

 * ask the memory allocator to avoid re-trying, swapping, writing back

 * or performing I/O.

 *

 * Note, this function also makes sure that the allocated buffer is aligned to

 * the MTD device's min. I/O unit, i.e. the "mtd->writesize" value.

 *

 * This is called, for example by mtd_{read,write} and jffs2_scan_medium,

 * to handle smaller (i.e. degraded) buffer allocations under low- or

 * fragmented-memory situations where such reduced allocations, from a

 * requested ideal, are allowed.

 *

 * Returns a pointer to the allocated buffer on success; otherwise, NULL.

	/*

	 * For the last resort allocation allow 'kmalloc()' to do all sorts of

	 * things (write-back, dropping caches, etc) by using GFP_KERNEL.

====================================================================*/

 Support for /proc/mtd */

 CONFIG_PROC_FS */

====================================================================*/

 Init code */

	/*

	 * We put '-0' suffix to the name to get the same name format as we

	 * used to get. Since this is called only once, we get a unique name. 

 SPDX-License-Identifier: GPL-2.0-or-later

/* MTD-based superblock management

 *

 * Copyright © 2001-2007 Red Hat, Inc. All Rights Reserved.

 * Copyright © 2001-2010 David Woodhouse <dwmw2@infradead.org>

 *

 * Written by:  David Howells <dhowells@redhat.com>

 *              David Woodhouse <dwmw2@infradead.org>

/*

 * compare superblocks to see if they're equivalent

 * - they are if the underlying MTD device is the same

/*

 * mark the superblock by the MTD device it is using

 * - set the device number to be the correct MTD block device for pesuperstence

 *   of NFS exports

/*

 * get a superblock on an MTD-backed filesystem

 new mountpoint for an already mounted superblock */

 fresh new superblock */

/*

 * get a superblock on an MTD-backed filesystem by MTD device number

/**

 * get_tree_mtd - Get a superblock based on a single MTD device

 * @fc: The filesystem context holding the parameters

 * @fill_super: Helper to initialise a new superblock

	/* the preferred way of mounting in future; especially when

	 * CONFIG_BLOCK=n - we specify the underlying MTD device by number or

	 * by name, so that we don't require block device support to be present

	 * in the kernel.

 mount by MTD device name */

 mount by MTD device number name */

 It was a valid number */

	/* try the old way - the hack where we allowed users to mount

	 * /dev/mtdblock$(n) but didn't actually _use_ the blockdev

 CONFIG_BLOCK */

/*

 * destroy an MTD-based superblock

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Simple read-only (writable only for RAM) mtdblock driver

 *

 * Copyright © 2001-2010 David Woodhouse <dwmw2@infradead.org>

 SPDX-License-Identifier: GPL-2.0

 removed bit map */

 used bit map */

	/*

	 * used for panic write

	 * As there are no block_isbad for panic case, we should keep this

	 * status before panic to ensure panic_write not failed.

 bad block bit map */

/*

 * called while removing file

 *

 * Avoiding over erasing, do erase block only when the whole block is unused.

 * If the block contains valid log, do erase lazily on flush_removed() when

 * unregister.

 If the block still has valid data, mtdpstore do erase lazily */

 all zones are unused, erase it */

/*

 * What is security for mtdpstore?

 * As there is no erase for panic case, we should ensure at least one zone

 * is writable. Otherwise, panic write will fail.

 * If zone is used, write operation will return -ENOMSG, which means that

 * pstore/blk will try one by one until gets an empty zone. So, it is not

 * needed to ensure the next zone is empty, but at least one.

 found empty zone */

 If there is no any empty zone, we have no way but to do erase */

 zone is used, please try next one */

/*

 * All zones will be read as pstore/blk will read zone one by one when do

 * recover.

 the zone may be broken, try next one */

		/*

		 * ECC error. The impact on log data is so small. Maybe we can

		 * still read it and try to understand. So mtdpstore just hands

		 * over what it gets and user can judge whether the data is

		 * valid or not.

 driver may not set retlen when ecc error */

 zone is used, please try next one */

	/*

	 * kmsg_size must be aligned to 4096 Bytes, which is limited by

	 * psblk. The default value of kmsg_size is 64KB. If kmsg_size

	 * is larger than erasesize, some errors will occur since mtdpsotre

	 * is designed on it.

 just support dmesg right now */

 1st. read to cache */

 2nd. erase block */

 3rd. write back */

 there is valid data on block, write back */

/*

 * What does mtdpstore_flush_removed() do?

 * When user remove any log file on pstore filesystem, mtdpstore should do

 * something to ensure log file removed. If the whole block is no longer used,

 * it's nice to erase the block. However if the block still contains valid log,

 * what mtdpstore can do is to erase and write the valid log back.

 Setup the MTD device to use */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Simple MTD partitioning layer

 *

 * Copyright © 2000 Nicolas Pitre <nico@fluxnic.net>

 * Copyright © 2002 Thomas Gleixner <gleixner@linutronix.de>

 * Copyright © 2000-2010 David Woodhouse <dwmw2@infradead.org>

/*

 * MTD methods which simply translate the effective address and pass through

 * to the _real_ device.

 allocate the partition structure */

 set up the MTD object for this partition */

	/* NOTE: Historically, we didn't arrange MTDs as a tree out of

	 * concern for showing the same data in multiple partitions.

	 * However, it is very useful to have the master node present,

	 * so the MTD_PARTITIONED_MASTER option allows that. The master

	 * will have device nodes etc only if this is set, so make the

	 * parent conditional on that option. Note, this is a way to

	 * distinguish between the parent and its partitions in sysfs.

 register to preserve ordering */

 let's do some sanity checks */

 let's register it anyway to preserve ordering */

 Initialize ->erasesize to make add_mtd_device() happy. */

 Deal with variable erase size stuff */

		/* Find the first erase regions which is part of this

 The loop searched for the region _behind_ the first one */

 Pick biggest erasesize */

 Single erase size */

	/*

	 * Child erasesize might differ from the parent one if the parent

	 * exposes several regions with different erasesize. Adjust

	 * wr_alignment accordingly.

 Doesn't start on a boundary of major erase size */

		/* FIXME: Let it be writable if it is on a boundary of

 mtd partition offset */

 the direct offset is expected */

/**

 * __mtd_del_partition - delete MTD partition

 *

 * @mtd: MTD structure to be deleted

 *

 * This function must be called with the partitions mutex locked.

/*

 * This function unregisters and destroy all slave MTD objects which are

 * attached to the given MTD object, recursively.

/*

 * This function, given a parent MTD object and a partition table, creates

 * and registers the child MTD objects which are bound to the parent according

 * to the partition definitions.

 *

 * For historical reasons, this function's caller only registers the parent

 * if the MTD_PARTITIONED_MASTER config option is set.

 Look for subpartitions */

/*

 * Many partition parsers just expected the core to kfree() all their data in

 * one chunk. Do that by default.

/*

 * Do not forget to update 'parse_mtd_partitions()' kerneldoc comment if you

 * are changing this array!

 Check DT only when looking for subpartitions. */

/**

 * mtd_part_get_compatible_parser - find MTD parser by a compatible string

 *

 * @compat: compatible string describing partitions in a device tree

 *

 * MTD parsers can specify supported partitions by providing a table of

 * compatibility strings. This function finds a parser that advertises support

 * for a passed value of "compatible".

	/*

	 * For backward compatibility we have to try the "fixed-partitions"

	 * parser. It supports old DT format with partitions specified as a

	 * direct subnodes of a flash device DT node without any compatibility

	 * specified we could match.

/**

 * parse_mtd_partitions - parse and register MTD partitions

 *

 * @master: the master partition (describes whole MTD device)

 * @types: names of partition parsers to try or %NULL

 * @data: MTD partition parser-specific data

 *

 * This function tries to find & register partitions on MTD device @master. It

 * uses MTD partition parsers, specified in @types. However, if @types is %NULL,

 * then the default list of parsers is used. The default list contains only the

 * "cmdlinepart" and "ofpart" parsers ATM.

 * Note: If there are more then one parser in @types, the kernel only takes the

 * partitions parsed out by the first parser.

 *

 * This function may return:

 * o a negative error code in case of failure

 * o number of found partitions otherwise

		/*

		 * ofpart is a special type that means OF partitioning info

		 * should be used. It requires a bit different logic so it is

		 * handled in a separated function.

 Found partitions! */

		/*

		 * Stash the first error we see; only report it if no parser

		 * succeeds

 Returns the size of the entire flash chip */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Interface to Linux block layer for MTD 'translation layers'.

 *

 * Copyright © 2003-2010 David Woodhouse <dwmw2@infradead.org>

				/*

				 * Do background processing just once per idle

				 * period.

 Use first free number */

 Found a free devnum. Plug it in here */

 Required number taken */

 Required number was free */

	/* Check that the device and any partitions will get valid

	 * minor numbers and that the disk naming code below can cope

 Create gendisk */

 Create the request queue */

 Stop new requests to arrive */

 Kill current requests */

 freeze+quiesce queue to ensure all requests are flushed */

	/* If the device is currently open, tell trans driver to close it,

	/* Register the notifier if/when the first device type is

	   registered, to prevent the link/init ordering from fucking

 Remove it from the list of active majors */

	/* No race here -- if someone's currently in register_mtd_blktrans

 SPDX-License-Identifier: GPL-2.0



 Copyright (C) 2019 Texas Instruments Incorporated - https:
 Author: Vignesh Raghavendra <vigneshr@ti.com>

 end of table */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * Linux driver for RPC-IF HyperFlash

 *

 * Copyright (C) 2019-2020 Cogent Embedded, Inc.

 SPDX-License-Identifier: GPL-2.0



 Copyright (C) 2019 Texas Instruments Incorporated - https:
 Author: Vignesh Raghavendra <vigneshr@ti.com>

/*

 * Common Flash Interface support:

 *   ST Advanced Architecture Command Set (ID 0x0020)

 *

 * (C) 2000 Red Hat. GPL'd

 *

 * 10/10/2000	Nicolas Pitre <nico@fluxnic.net>

 * 	- completely revamped method functions so they are aware and

 * 	  independent of the flash geometry (buswidth, interleave, etc.)

 * 	- scalability vs code size is completely set at compile-time

 * 	  (see include/linux/mtd/cfi.h for selection)

 *	- optimized write buffer method

 * 06/21/2002	Joern Engel <joern@wh.fh-wedel.de> and others

 *	- modified Intel Command Set 0x0001 to support ST Advanced Architecture

 *	  (command set 0x0020)

 *	- added a writev function

 * 07/13/2005	Joern Engel <joern@wh.fh-wedel.de>

 * 	- Plugged memory leak in cfi_staa_writev().

 Not usable directly */

 #define DEBUG_LOCK_BITS */

#define DEBUG_CFI_FEATURES

/* This routine is made available to other mtd code via

 * inter_module_register.  It must only be accessed through

 * inter_module_get which will bump the use count of this module.  The

 * addresses passed back in cfi are valid as long as the use count of

 * this module is non-zero, i.e. between inter_module_get and

 * inter_module_put.  Keith Owens <kaos@ocs.com.au> 29 Oct 2000.

		/*

		 * It's a real CFI chip, not one for which the probe

		 * routine faked a CFI structure. So we read the feature

		 * table from it.

 Do some byteswapping if necessary */

 Tell the user about it in lots of lovely detail */

 Install our own private info structure */

printk(KERN_DEBUG "number of CFI chips: %d\n", cfi->numchips);

 Argh */

 Also select the correct geometry setup too */

 FIXME: Should be 0 for STMicro flashes w/out ECC */

 Ensure cmd read/writes are aligned. */

 Let's determine this according to the interleave only once */

	/* Check that the chip's ready to talk to us.

	 * If it's in FL_ERASING state, suspend it and make it talk now.

 We don't support erase suspend */

		/* If the flash has finished erasing, then 'erase suspend'

		 * appears to make some (28F320) flash devices switch to

		 * 'read' mode.  Make sure that we switch to 'read status'

		 * mode so we get the right data. --rmk

		printk("Erase suspending at 0x%lx\n", cmd_addr);

 Urgh */

 make sure we're in 'read status' mode */

 Not quite yet */

 Urgh. Chip not yet ready to talk to us. */

 Latency issues. Drop the lock, wait a while and retry */

		/* Stick ourselves on a wait queue to be woken when

		/* What if one interleaved chip has finished and the

		   other hasn't? The old code would leave the finished

		   one in READY mode. That's bad, and caused -EROFS

		   errors to be returned from do_erase_oneblock because

		   that's the only bit it checked for at the time.

		   As the state machine appears to explicitly allow

		   sending the 0x70 (Read Status) command to an erasing

		   chip and expecting it to be ignored, that's what we

 ofs: offset within the first chip that the first read should start */

 M58LW064A requires bus alignment for buffer wriets -- saw */

 Let's determine this according to the interleave only once */

	/* Check that the chip's ready to talk to us.

	 * Later, we can actually think about interrupting it

	 * if it's in FL_ERASING state.

	 * Not just yet, though.

 Urgh. Chip not yet ready to talk to us. */

 Latency issues. Drop the lock, wait a while and retry */

		/* Stick ourselves on a wait queue to be woken when

 Argh. Not ready for write to buffer */

 Write length of data to come */

 Write data */

 GO GO GO */

 Someone's suspended the write. Sleep */

 FIXME */

 OK Still waiting */

 clear status */

 put back into read status register mode */

 Latency issues. Drop the lock, wait a while and retry */

 Done and happy. */

 check for errors: 'lock bit', 'VPP', 'dead cell'/'unerased cell' or 'incorrect cmd' -- saw */

 clear status */

 put back into read status register mode */

 Write buffer is worth it only if more than one word to write... */

 We must not cross write block boundaries */

/*

 * Writev for ECC-Flashes is a little more complicated. We need to maintain

 * a small buffer for this.

 * XXX: If the buffer size is not a multiple of 2, this will break

		/* We should fall back to a general writev implementation.

		 * Until that is written, just break.

 FIXME: Might be unnecessary. Check that */

 cut off head */

 just accumulate */

 write clean aligned data */

 cut off tail */

 flush last page, even if not full */

 This is sometimes intended behaviour, really */

 Let's determine this according to the interleave only once */

 Check that the chip's ready to talk to us. */

 Urgh. Chip not yet ready to talk to us. */

 Latency issues. Drop the lock, wait a while and retry */

		/* Stick ourselves on a wait queue to be woken when

 Clear the status register first */

 Now erase */

 FIXME. Use a timer to check this, and return immediately. */

 Once the state machine's known to be working I'll do that */

 Someone's suspended the erase. Sleep */

 FIXME */

 OK Still waiting */

 Latency issues. Drop the lock, wait a while and retry */

 We've broken this before. It doesn't hurt to be safe */

 check for lock bit */

 Reset the error bits */

 Protection bit set */

 Voltage */

	/* Check that both start and end of the requested erase are

	 * aligned with the erasesize at the appropriate addresses.

	/* Skip all erase regions which are ended before the start of

	   the requested erase. Actually, to save on the calculations,

	   we skip to the first erase region which starts after the

	   start of the requested erase, and then go back one.

	/* OK, now i is pointing at the erase region in which this

	   erase request starts. Check the start of the requested

	   erase range is aligned with the erase size which is in

	   effect here.

 Remember the erase region we start on */

	/* Next, check that the end of the requested erase is aligned

	 * with the erase region at that address.

	/* As before, drop back one to point at the region in which

	   the address actually falls

			/* No need to wake_up() on this state change -

			 * as the whole point is that nobody can do anything

			 * with the chip now anyway.

 Not an idle state */

 Unlock the chips again */

 Let's determine this according to the interleave only once */

 Check that the chip's ready to talk to us. */

 Urgh. Chip not yet ready to talk to us. */

 Latency issues. Drop the lock, wait a while and retry */

		/* Stick ourselves on a wait queue to be woken when

 FIXME. Use a timer to check this, and return immediately. */

 Once the state machine's known to be working I'll do that */

 OK Still waiting */

 Latency issues. Drop the lock, wait a while and retry */

 Done and happy. */

 Let's determine this according to the interleave only once */

 Check that the chip's ready to talk to us. */

 Urgh. Chip not yet ready to talk to us. */

 Latency issues. Drop the lock, wait a while and retry */

		/* Stick ourselves on a wait queue to be woken when

 FIXME. Use a timer to check this, and return immediately. */

 Once the state machine's known to be working I'll do that */

 OK Still waiting */

 Latency issues. Drop the unlock, wait a while and retry */

 Done and happy. */

			/* No need to wake_up() on this state change -

			 * as the whole point is that nobody can do anything

			 * with the chip now anyway.

 Unlock the chips again */

				/* No need to force it into a known state here,

				   because we're returning failure, and it didn't

 Go to known state. Chip may have been power cycled */

/*

 * Common Flash Interface support:

 *   Intel Extended Vendor Command Set (ID 0x0001)

 *

 * (C) 2000 Red Hat. GPL'd

 *

 *

 * 10/10/2000	Nicolas Pitre <nico@fluxnic.net>

 * 	- completely revamped method functions so they are aware and

 * 	  independent of the flash geometry (buswidth, interleave, etc.)

 * 	- scalability vs code size is completely set at compile-time

 * 	  (see include/linux/mtd/cfi.h for selection)

 *	- optimized write buffer method

 * 02/05/2002	Christopher Hoover <ch@hpl.hp.com>/<ch@murgatroid.com>

 *	- reworked lock/unlock/erase support for var size flash

 * 21/03/2007   Rodolfo Giometti <giometti@linux.it>

 * 	- auto unlock sectors on resume for auto locking flash on power up

 #define CMDSET0001_DISABLE_ERASE_SUSPEND_ON_WRITE */

 #define CMDSET0001_DISABLE_WRITE_SUSPEND */

 debugging, turns off buffer write mode if set to 1

 Intel chips */

 STMicroelectronics chips */

 Atmel chips */

 Sharp chips */

/*

 *  *********** SETUP AND PROBE BITS  ***********

 Not usable directly */

 #define DEBUG_LOCK_BITS */

 #define DEBUG_CFI_FEATURES */

 Atmel chips don't use the same PRI format as Intel chips */

 Reverse byteswapping */

 chip erase supported */

 erase suspend supported */

 program suspend supported */

 simultaneous operations supported */

 page mode read supported */

 queued erase supported */

 Protection bits supported */

 burst write mode not supported */

 Some Intel Strata Flash prior to FPO revision C has bugs in this area */

 Not supported */

 Not supported */

 Note this is done after the region info is endian swapped */

 Sharp LH28F640BF Family */

	/* Reset the Partition Configuration Register on LH28F640BF

		/* We have set one single partition thus

/*

 * Some chips power-up with all sectors locked by default.

 M28W320CT */ fixup_st_m28w320ct },

 M28W320CB */ fixup_st_m28w320cb },

	/* The CFI vendor ids and the JEDEC vendor IDs appear

	 * to be common.  It is like the devices id's are as

	 * well.  This table is to pick all cases where

	 * we know that is the case.

	/*

	 * Micron(was Numonyx) 1Gbit bottom boot are buggy w.r.t

	 * Erase Supend for their small Erase Blocks(0x8000)

 Do some byteswapping if necessary */

 Protection Register info */

 Burst Read info */

 Number of hardware-partitions */

 skip the sizeof(partregion) field in CFI 1.4 */

 Fill in the default mtd operations */

		/*

		 * It's a real CFI chip, not one for which the probe

		 * routine faked a CFI structure. So we read the feature

		 * table from it.

 Install our own private info structure */

 Tell the user about it in lots of lovely detail */

 Apply jedec specific fixups */

 Apply generic fixups */

 No default; if it isn't specified, we won't use it */

printk(KERN_DEBUG "number of CFI chips: %d\n", cfi->numchips);

 Argh */

	/* This function has the potential to distort the reality

	/*

	 * Probing of multi-partition flash chips.

	 *

	 * To support multiple partitions when available, we simply arrange

	 * for each of them to have their own flchip structure even if they

	 * are on the same physical chip.  This means completely recreating

	 * a new cfi_private structure right here which is a blatent code

	 * layering violation, but this is still the least intrusive

	 * arrangement at this point. This can be rearranged in the future

	 * if someone feels motivated enough.  --nico

 Protection Register info */

 Burst Read info */

 Number of partition regions */

 skip the sizeof(partregion) field in CFI 1.4 */

 Number of hardware partitions */

 Programming Region info */

		/*

		 * All functions below currently rely on all chips having

		 * the same geometry so we'll just assume that all hardware

		 * partitions are of the same size too.

				/* those should be reset too since

/*

 *  *********** CHIP ACCESS FUNCTIONS ***********

 Prevent setting state FL_SYNCING for chip in suspended state. */

			/* At this point we're fine with write operations

 Someone else might have been playing with it. */

 Do not allow suspend iff read/write to EB address */

 do not suspend small EBs, buggy Micron Chips */

 Erase suspend */

		/* If the flash has finished erasing, then 'erase suspend'

		 * appears to make some (28F320) flash devices switch to

		 * 'read' mode.  Make sure that we switch to 'read status'

		 * mode so we get the right data. --rmk

				/* Urgh. Resume and pretend we weren't here.

			/* Nobody will touch it while it's in state FL_ERASE_SUSPENDING.

 The machine is rebooting now,so no one can get chip anymore */

 Only if there's no operation suspended... */

		/*

		 * OK. We have possibility for contention on the write/erase

		 * operations which are global to the real chip and not per

		 * partition.  So let's fight it over in the partition which

		 * currently has authority on the operation.

		 *

		 * The rules are as follows:

		 *

		 * - any write operation must own shared->writing.

		 *

		 * - any erase operation must own _both_ shared->writing and

		 *   shared->erasing.

		 *

		 * - contention arbitration is handled in the owner's context.

		 *

		 * The 'shared' struct can be read and/or written only when

		 * its lock is taken.

			/*

			 * The engine to perform desired operation on this

			 * partition is already in use by someone else.

			 * Let's fight over it in the context of the chip

			 * currently using it.  If it is possible to suspend,

			 * that other partition will do just that, otherwise

			 * it'll happily send us to sleep.  In any case, when

			 * get_chip returns success we're clear to go ahead.

			/* We should not own chip if it is already

		/* Check if we already have suspended erase

 We now own it */

 We own the ability to write, but we're done */

 give back ownership to who we loaned it from */

			/*

			 * We own the ability to erase without the ability

			 * to write, which means the erase was suspended

			 * and some other partition is currently writing.

			 * Don't let the switch below mess things up since

			 * we don't have ownership to resume anything.

		/* What if one interleaved chip has finished and the

		   other hasn't? The old code would leave the finished

		   one in READY mode. That's bad, and caused -EROFS

		   errors to be returned from do_erase_oneblock because

		   that's the only bit it checked for at the time.

		   As the state machine appears to explicitly allow

		   sending the 0x70 (Read Status) command to an erasing

		   chip and expecting it to be ignored, that's what we

/*

 * No interrupt what so ever can be serviced while the flash isn't in array

 * mode.  This is ensured by the xip_disable() and xip_enable() functions

 * enclosing any code path where the flash is known not to be in array mode.

 * And within a XIP disabled code path, only functions marked with __xipram

 * may be called and nothing else (it's a good thing to inspect generated

 * assembly to make sure inline functions were actually inlined and that gcc

 * didn't emit calls to its own support functions). Also configuring MTD CFI

 * support to a single buswidth and a single interleave is also recommended.

 TODO: chips with no XIP use should ignore and return */

 ensure mmu mapping is up to date */

/*

 * When a delay is required for the flash operation to complete, the

 * xip_wait_for_operation() function is polling for both the given timeout

 * and pending (but still masked) hardware interrupts.  Whenever there is an

 * interrupt pending then the flash erase or write operation is suspended,

 * array mode restored and interrupts unmasked.  Task scheduling might also

 * happen at that point.  The CPU eventually returns from the interrupt or

 * the call to schedule() and the suspended flash operation is resumed for

 * the remaining of the delay period.

 *

 * Warning: this function _will_ fool interrupt latency tracing tools.

			/*

			 * Let's suspend the erase or write operation when

			 * supported.  Note that we currently don't try to

			 * suspend interleaved chips if there is already

			 * another operation suspended (imagine what happens

			 * when one chip was already done with the current

			 * operation while another chip suspended it, then

			 * we resume the whole thing at once).  Yes, it

			 * can happen!

					/*

					 * The chip doesn't want to suspend

					 * after waiting for 100 msecs.

					 * This is a critical error but there

					 * is not much we can do here.

 Suspend succeeded */

			/*

			 * We're back.  However someone else might have

			 * decided to go write to the chip if we are in

			 * a suspended erase state.  If so let's wait

			 * until it's done.

 Disallow XIP again */

 Resume the write or erase operation */

			/*

			 * Try to save on CPU power when waiting delay

			 * is at least a system timer tick period.

			 * No need to be extremely accurate here.

/*

 * The INVALIDATE_CACHED_RANGE() macro is normally used in parallel while

 * the flash is actively programming or erasing since we have to poll for

 * the operation to complete anyway.  We can't do that in a generic way with

 * a XIP setup so do it before the actual flash operation in this case

 * and stub it out from INVAL_CACHE_AND_WAIT.

 Someone's suspended the operation: sleep */

 Erase suspend occurred while sleep: reset timeout */

 Write suspend occurred while sleep: reset timeout */

 OK Still waiting. Drop the lock, wait a while and retry. */

			/*

			 * Half of the normal delay still remaining

			 * can be performed with a sleeping delay instead

			 * of busy waiting.

 Done and happy. */

 Ensure cmd read/writes are aligned. */

 Now lock the chip(s) to POINT state */

 ofs: offset within the first chip that the first read should start */

 We cannot point across chips that are virtually disjoint */

 Now unlock the chip(s) POINT state */

 ofs: offset within the first chip that the first read should start */

 Ensure cmd read/writes are aligned. */

 ofs: offset within the first chip that the first read should start */

 check for errors */

 reset status */

 If it's not bus-aligned, do the first byte write */

	/* Sharp LH28F640BF chips need the first address for the

	 * Page Buffer Program command. See Table 5 of

 Let's determine this according to the interleave only once */

	/* §4.8 of the 28FxxxJ3A datasheet says "Any time SR.4 and/or SR.5 is set

	   [...], the device will not accept any more Write to Buffer commands".

	   So we must check here and reset those bits if they're set. Otherwise

 Argh. Not ready for write to buffer */

 Figure out the number of words to write */

 Write length of data to come */

 Write data */

 GO GO GO */

 check for errors */

 reset status */

 We must not cross write block boundaries */

		/* Be nice and reschedule with the chip in a usable state for other

 Clear the status register first */

 Now erase */

 We've broken this before. It doesn't hurt to be safe */

 check for errors */

 Reset the error bits */

 Protection bit set */

 Voltage */

			/* No need to wake_up() on this state change -

			 * as the whole point is that nobody can do anything

			 * with the chip now anyway.

 Unlock the chips again */

	/*

	 * If Instant Individual Block Locking supported then no need

	 * to delay.

	/*

	 * Unlocking may take up to 1.4 seconds on some Intel flashes. So

	 * lets use a max of 1.5 seconds (1500ms) as timeout.

	 *

	 * See "Clear Block Lock-Bits Time" on page 40 in

	 * "3 Volt Intel StrataFlash Memory" 28F128J3,28F640J3,28F320J3 manual

	 * from February 2003

 let's ensure we're not reading back cached data from array mode */

 then ensure we don't keep OTP data in the cache */

 make sure area matches group boundaries */

 Check that we actually have some OTP registers */

 we need real chips here not virtual ones */

	/* Some chips have OTP located in the _top_ partition only.

 first OTP region */

 flash geometry fixup */

 skip over factory reg area */

					/*

					 * Special case: if action is NULL

					 * we fill buf with otp_info records.

 next OTP region */

 place the chip in a known state before suspend */

				/* No need to wake_up() on this state change -

				 * as the whole point is that nobody can do anything

				 * with the chip now anyway.

 There seems to be an operation pending. We must wait for it. */

			/* Should we actually wait? Once upon a time these routines weren't

			   allowed to. Or should we return -EAGAIN, because the upper layers

			   ought to have already shut down anything which was using the device

 Unlock the chips again */

				/* No need to force it into a known state here,

				   because we're returning failure, and it didn't

 Go to known state. Chip may have been power cycled */

 Refresh LH28F640BF Partition Config. Register */

		/* force the completion of any ongoing operation

		   and switch to array mode so any bootloader in

/*

 * Common code to handle map devices which are simple RAM

 * (C) 2000 Red Hat. GPL'd.

 Check the first byte is RAM */

 Check the last byte is RAM */

 OK. It seems to be RAM. */

	/* Yeah, it's inefficient. Who cares? It's faster than a _real_

 Nothing to see here */

/*

 * Common Flash Interface support:

 *   AMD & Fujitsu Standard Vendor Command Set (ID 0x0002)

 *

 * Copyright (C) 2000 Crossnet Co. <info@crossnet.co.jp>

 * Copyright (C) 2004 Arcom Control Systems Ltd <linux@arcom.com>

 * Copyright (C) 2005 MontaVista Software Inc. <source@mvista.com>

 *

 * 2_by_8 routines added by Simon Munton

 *

 * 4_by_16 work by Carolyn J. Smith

 *

 * XIP support hooks by Vitaly Wool (based on code for Intel flash

 * by Nicolas Pitre)

 *

 * 25/09/2008 Christopher Moore: TopBottom fixup for many Macronix with CFI V1.0

 *

 * Occasionally maintained by Thayne Harbaugh tharbaugh at lnxi dot com

 *

 * This code is GPL

/*

 * Status Register bit description. Used by flash devices that don't

 * support DQ polling (e.g. HyperFlash)

 Not usable directly */

/*

 * Use status register to poll for Erase/write completion when DQ is not

 * supported. This is indicated by Bit[1:0] of SoftwareFeatures field in

 * CFI Primary Vendor-Specific Extended Query table 1.5

 The error bits are invalid while the chip's busy */

 Erase/Program status bits are set on the operation failure */

 #define DEBUG_CFI_FEATURES */

 Wheee. Bring me the head of someone at AMD. */

 CFI version 1.0 => don't trust bootloc */

		/* AFAICS all 29LV400 with a bottom boot block have a device ID

		 * of 0x22BA in 16-bit mode and 0xBA in 8-bit mode.

		 * These were badly detected as they have the 0x80 bit set

		 * so treat them as a special case.

			/* Macronix added CFI to their 2nd generation

			 * MX29LV400C B/T but AFAICS no other 29LV400 (AMD,

			 * Fujitsu, Spansion, EON, ESI and older Macronix)

			 * has CFI.

			 *

			 * Therefore also check the manufacturer.

			 * This reduces the risk of false detection due to

			 * the 8-bit device ID.

 bottom boot */

 top boot */

 bottom boot */

 !FORCE_WORD_WRITE */

 Atmel chips don't use the same PRI format as AMD chips */

 Some chips got it backwards... */

 burst write mode not supported */

 Setup for chips with a secsi area */

/*

 * Some Atmel chips (e.g. the AT49BV6416) power-up with all sectors

 * locked by default.

	/*

	 * These flashes report two separate eraseblock regions based on the

	 * sector_erase-size and block_erase-size, although they both operate on the

	 * same memory. This is not allowed according to CFI, so we just pick the

	 * sector_erase-size.

	/*

	 * CFI reports 1024 sectors (0x03ff+1) of 64KBytes (0x0100*256) where

	 * it should report a size of 8KBytes (0x0020*256).

	/*

	 *  S29NS512P flash uses more than 8bits to report number of sectors,

	 * which is not permitted by CFI.

 Used to fix CFI-Tables of chips without Extended Query Tables */

 SST39VF1602 */

 SST39VF1601 */

 SST39VF3202 */

 SST39VF3201 */

 SST39VF3202B */

 SST39VF3201B */

 SST39VF6402B */

 SST39VF6401B */

 SST38VF6402 */

 SST38VF6401 */

 SST38VF6404 */

 SST38VF6403 */

	/* The CFI vendor ids and the JEDEC vendor IDs appear

	 * to be common.  It is like the devices id's are as

	 * well.  This table is to pick all cases where

	 * we know that is the case.

			/*

			 * Samsung K8P2815UQB and K8D6x16UxM chips

			 * report major=0 / minor=0.

			 * K8D3x16UxC chips report major=3 / minor=3.

	/*

	 * SST 38VF640x chips report major=0xFF / minor=0xFF.

/*

 * From TN-13-07: Patching the Linux Kernel and U-Boot for M29 Flash, page 20:

 * Some revisions of the M29EW suffer from erase suspend hang ups. In

 * particular, it can occur when the sequence

 * Erase Confirm -> Suspend -> Program -> Resume

 * causes a lockup due to internal timing issues. The consequence is that the

 * erase cannot be resumed without inserting a dummy command after programming

 * and prior to resuming. [...] The work-around is to issue a dummy write cycle

 * that writes an F0 command code before the RESUME command.

 before resume, insert a dummy 0xF0 cycle for Micron M29EW devices */

/*

 * From TN-13-07: Patching the Linux Kernel and U-Boot for M29 Flash, page 22:

 *

 * Some revisions of the M29EW (for example, A1 and A2 step revisions)

 * are affected by a problem that could cause a hang up when an ERASE SUSPEND

 * command is issued after an ERASE RESUME operation without waiting for a

 * minimum delay.  The result is that once the ERASE seems to be completed

 * (no bits are toggling), the contents of the Flash memory block on which

 * the erase was ongoing could be inconsistent with the expected values

 * (typically, the array value is stuck to the 0xC0, 0xC4, 0x80, or 0x84

 * values), causing a consequent failure of the ERASE operation.

 * The occurrence of this issue could be high, especially when file system

 * operations on the Flash are intensive.  As a result, it is recommended

 * that a patch be applied.  Intensive file system operations can cause many

 * calls to the garbage routine to free Flash space (also by erasing physical

 * Flash blocks) and as a result, many consecutive SUSPEND and RESUME

 * commands can occur.  The problem disappears when a delay is inserted after

 * the RESUME command by using the udelay() function available in Linux.

 * The DELAY value must be tuned based on the customer's platform.

 * The maximum value that fixes the problem in all cases is 500us.

 * But, in our experience, a delay of 30 µs to 50 µs is sufficient

 * in most cases.

 * We have chosen 500µs because this latency is acceptable.

	/*

	 * Resolving the Delay After Resume Issue see Micron TN-13-07

	 * Worst case delay must be 500µs but 30-50µs should be ok as well

 Fill in the default mtd operations */

			/*

			 * It's a real CFI chip, not one for which the probe

			 * routine faked a CFI structure.

			/*

			 * Valid primary extension versions are: 1.0, 1.1, 1.2, 1.3, 1.4, 1.5

			 * see: http://cs.ozerki.net/zap/pub/axim-x5/docs/cfi_r20.pdf, page 19 

			 *      http://www.spansion.com/Support/AppNotes/cfi_100_20011201.pdf

			 *      http://www.spansion.com/Support/Datasheets/s29ws-p_00_a12_e.pdf

			 *      http://www.spansion.com/Support/Datasheets/S29GL_128S_01GS_00_02_e.pdf

 Install our own private info structure */

 Apply cfi device specific fixups */

 Tell the user about it in lots of lovely detail */

 Set the default CFI lock/unlock addresses */

 CFI mode */

 Apply jedec specific fixups */

 Apply generic fixups */

		/*

		 * First calculate the timeout max according to timeout field

		 * of struct cfi_ident that probed from chip's CFI aera, if

		 * available. Specify a minimum of 2000us, in case the CFI data

		 * is wrong.

 Select the correct geometry setup */

 Argh */

/*

 * Return true if the chip is ready.

 *

 * Ready is one of: read mode, query mode, erase-suspend-read mode (in any

 * non-suspended sector) and is indicated by no toggle bits toggling.

 *

 * Note that anything more complicated than checking if no bits are toggling

 * (including checking DQ5 for an error status) is tricky to get working

 * correctly and is therefore not done	(particularly with interleaved chips

 * as each chip must be checked independently of the others).

		/*

		 * For chips that support status register, check device

		 * ready bit

/*

 * Return true if the chip is ready and has the correct value.

 *

 * Ready is one of: read mode, query mode, erase-suspend-read mode (in any

 * non-suspended sector) and it is indicated by no bits toggling.

 *

 * Error are indicated by toggling bits or bits held with the wrong value,

 * or with bits toggling.

 *

 * Note that anything more complicated than checking if no bits are toggling

 * (including checking DQ5 for an error status) is tricky to get working

 * correctly and is therefore not done	(particularly with interleaved chips

 * as each chip must be checked independently of the others).

 *

		/*

		 * For chips that support status register, check device

		 * ready bit

 Someone else might have been playing with it. */

 Do not allow suspend iff read/write to EB address */

 Erase suspend */

		/* It's harmless to issue the Erase-Suspend and Erase-Resume

				/* Should have suspended the erase by now.

				 * Send an Erase-Resume command as either

				 * there was an error (so leave the erase

				 * routine to recover from it) or we trying to

			/* Nobody will touch it while it's in state FL_ERASE_SUSPENDING.

 The machine is rebooting */

 Only if there's no operation suspended... */

/*

 * No interrupt what so ever can be serviced while the flash isn't in array

 * mode.  This is ensured by the xip_disable() and xip_enable() functions

 * enclosing any code path where the flash is known not to be in array mode.

 * And within a XIP disabled code path, only functions marked with __xipram

 * may be called and nothing else (it's a good thing to inspect generated

 * assembly to make sure inline functions were actually inlined and that gcc

 * didn't emit calls to its own support functions). Also configuring MTD CFI

 * support to a single buswidth and a single interleave is also recommended.

 TODO: chips with no XIP use should ignore and return */

 ensure mmu mapping is up to date */

/*

 * When a delay is required for the flash operation to complete, the

 * xip_udelay() function is polling for both the given timeout and pending

 * (but still masked) hardware interrupts.  Whenever there is an interrupt

 * pending then the flash erase operation is suspended, array mode restored

 * and interrupts unmasked.  Task scheduling might also happen at that

 * point.  The CPU eventually returns from the interrupt or the call to

 * schedule() and the suspended flash operation is resumed for the remaining

 * of the delay period.

 *

 * Warning: this function _will_ fool interrupt latency tracing tools.

			/*

			 * Let's suspend the erase operation when supported.

			 * Note that we currently don't try to suspend

			 * interleaved chips if there is already another

			 * operation suspended (imagine what happens

			 * when one chip was already done with the current

			 * operation while another chip suspended it, then

			 * we resume the whole thing at once).  Yes, it

			 * can happen!

					/*

					 * The chip doesn't want to suspend

					 * after waiting for 100 msecs.

					 * This is a critical error but there

					 * is not much we can do here.

 Suspend succeeded */

			/*

			 * We're back.  However someone else might have

			 * decided to go write to the chip if we are in

			 * a suspended erase state.  If so let's wait

			 * until it's done.

 Disallow XIP again */

 Correct Erase Suspend Hangups for M29EW */

 Resume the write or erase operation */

			/*

			 * Try to save on CPU power when waiting delay

			 * is at least a system timer tick period.

			 * No need to be extremely accurate here.

/*

 * The INVALIDATE_CACHED_RANGE() macro is normally used in parallel while

 * the flash is actively programming or erasing since we have to poll for

 * the operation to complete anyway.  We can't do that in a generic way with

 * a XIP setup so do it before the actual flash operation in this case

 * and stub it out from INVALIDATE_CACHE_UDELAY.

/*

 * Extra notes:

 *

 * Activating this XIP support changes the way the code works a bit.  For

 * example the code to suspend the current process when concurrent access

 * happens is never executed because xip_udelay() will always return with the

 * same chip state as it was entered with.  This is why there is no care for

 * the presence of add_wait_queue() or schedule() calls from within a couple

 * xip_disable()'d  areas of code, like in do_erase_oneblock for example.

 * The queueing and scheduling are always happening within xip_udelay().

 *

 * Similarly, get_chip() and put_chip() just happen to always be executed

 * with chip->state set to FL_READY (or FL_XIP_WHILE_*) where flash state

 * is in array mode, therefore never executing many cases therein and not

 * causing any problem with XIP.

 Ensure cmd read/writes are aligned. */

 ofs: offset within the first chip that the first read should start */

 ofs: offset within the first chip that the first read should start */

 8 secsi bytes per chip */

 partial write of a word, load old contents */

 make sure area matches group boundaries */

 Enter lock register command */

 read lock register */

 set bit 0 to protect extended memory block */

 set bit 0 to protect extended memory block */

 write lock register */

 wait for chip to become ready */

 exit protection commands */

 Micron M29EW family */

			/* check whether secsi area is factory locked

 factory locked */

 customer lockable */

 Enter lock register command */

 read lock register */

 exit protection commands */

 return otpinfo */

	/*

	 * We use a 1ms + 1 jiffies generic timeout for writes (most devices

	 * have a max write time of a few hundreds usec). However, we should

	 * use the maximum timeout value given by the chip at probe time

	 * instead.  Unfortunately, struct flchip does have a field for

	 * maximum timeout, only for typical which can be far too short

	 * depending of the conditions.	 The ' + 1' is to avoid having a

	 * timeout of 0 jiffies if HZ is smaller than 1000.

 See comment above for timeout value. */

 Someone's suspended the write. Sleep */

 FIXME */

		/*

		 * We check "time_after" and "!chip_good" before checking

		 * "chip_good" to avoid the failure due to scheduling.

 Latency issues. Drop the lock, wait a while and retry */

	/*

	 * Check for a NOP for the case when the datum to write is already

	 * present - it saves time and works around buggy chips that corrupt

	 * data at other locations when 0xff is written to a location that

	 * already contains 0xff.

 reset on all failures. */

 FIXME - should have reset delay before continuing */

 If it's not bus-aligned, do the first byte write */

 Load 'tmp_buf' with old contents of flash */

 Number of bytes to copy from buffer */

 We are now aligned, write as much as possible */

 Write the trailing bytes if any */

	/*

	 * Timeout is calculated according to CFI data, if available.

	 * See more comments in cfi_cmdset_0002().

 Someone's suspended the write. Sleep */

 FIXME */

		/*

		 * We check "time_after" and "!chip_good" before checking

		 * "chip_good" to avoid the failure due to scheduling.

 Latency issues. Drop the lock, wait a while and retry */

	/*

	 * Recovery from write-buffer programming failures requires

	 * the write-to-buffer-reset sequence.  Since the last part

	 * of the sequence also works as a normal reset, we can run

	 * the same commands regardless of why we are here.

	 * See e.g.

	 * http://www.spansion.com/Support/Application%20Notes/MirrorBit_Write_Buffer_Prog_Page_Buffer_Read_AN.pdf

 FIXME - should have reset delay before continuing */

/*

 * FIXME: interleaved mode not tested, and probably not supported!

 Write Buffer Load */

 Write length of data to come */

 Write data */

 Write Buffer Program Confirm: GO GO GO */

 If it's not bus-aligned, do the first word write */

 Write buffer is worth it only if more than one word to write... */

 We must not cross write block boundaries */

 !FORCE_WORD_WRITE */

/*

 * Wait for the flash chip to become ready to write data

 *

 * This is only called during the panic_write() path. When panic_write()

 * is called, the kernel is in the process of a panic, and will soon be

 * dead. Therefore we don't take any locks, and attempt to get access

 * to the chip as soon as possible.

	/*

	 * If the driver thinks the chip is idle, and no toggle bits

	 * are changing, then the chip is actually idle for sure.

	/*

	 * Try several times to reset the chip and then wait for it

	 * to become idle. The upper limit of a few milliseconds of

	 * delay isn't a big problem: the kernel is dying anyway. It

	 * is more important to save the messages.

 send the reset command */

 wait for the chip to become ready */

 the chip never became ready */

/*

 * Write out one word of data to a single flash chip during a kernel panic

 *

 * This is only called during the panic_write() path. When panic_write()

 * is called, the kernel is in the process of a panic, and will soon be

 * dead. Therefore we don't take any locks, and attempt to get access

 * to the chip as soon as possible.

 *

 * The implementation of this routine is intentionally similar to

 * do_write_oneword(), in order to ease code maintenance.

	/*

	 * Check for a NOP for the case when the datum to write is already

	 * present - it saves time and works around buggy chips that corrupt

	 * data at other locations when 0xff is written to a location that

	 * already contains 0xff.

 reset on all failures. */

 FIXME - should have reset delay before continuing */

/*

 * Write out some data during a kernel panic

 *

 * This is used by the mtdoops driver to save the dying messages from a

 * kernel which has panic'd.

 *

 * This routine ignores all of the locking used throughout the rest of the

 * driver, in order to ensure that the data gets written out no matter what

 * state this driver (and the flash chip itself) was in when the kernel crashed.

 *

 * The implementation of this routine is intentionally similar to

 * cfi_amdstd_write_words(), in order to ease code maintenance.

 If it's not bus aligned, do the first byte write */

 Load 'tmp_buf' with old contents of flash */

 Number of bytes to copy from buffer */

 We are now aligned, write as much as possible */

 Write the trailing bytes if any */

/*

 * Handle devices with one erase region, that only implement

 * the chip erase command.

 Someone's suspended the erase. Sleep */

			/* This erase was suspended and resumed.

 FIXME */

 Latency issues. Drop the lock, wait a while and retry */

 Did we succeed? */

 reset on all failures. */

 FIXME - should have reset delay before continuing */

 Someone's suspended the erase. Sleep */

			/* This erase was suspended and resumed.

 FIXME */

 Latency issues. Drop the lock, wait a while and retry */

 Did we succeed? */

 reset on all failures. */

 FIXME - should have reset delay before continuing */

/*

 * Advanced Sector Protection - PPB (Persistent Protection Bit) locking

 PPB entry command */

		/*

		 * Unlocking of one specific sector is not supported, so we

		 * have to unlock all sectors of this device instead

 Return locked status: 0->locked, 1->unlocked */

	/*

	 * Wait for some time as unlocking of all sectors takes quite long

 2s max (un)locking */

 Exit BC commands */

	/*

	 * PPB unlocking always unlocks all sectors of the flash chip.

	 * We need to re-lock all previously locked sectors. So lets

	 * first check the locking status of all sectors and save

	 * it for future use.

	/*

	 * This code to walk all sectors is a slightly modified version

	 * of the cfi_varsize_frob() code.

		/*

		 * Only test sectors that shall not be unlocked. The other

		 * sectors shall be unlocked, so lets keep their locking

		 * status at "unlocked" (locked=0) for the final re-locking.

 Now unlock the whole chip */

	/*

	 * PPB unlocking always unlocks all sectors of the flash chip.

	 * We need to re-lock all previously locked sectors.

			/* No need to wake_up() on this state change -

			 * as the whole point is that nobody can do anything

			 * with the chip now anyway.

 Not an idle state */

 Unlock the chips again */

			/* No need to wake_up() on this state change -

			 * as the whole point is that nobody can do anything

			 * with the chip now anyway.

 Unlock the chips again */

/*

 * Ensure that the flash device is put back into read array mode before

 * unloading the driver or rebooting.  On some systems, rebooting while

 * the flash is in query/program/erase mode will prevent the CPU from

 * fetching the bootloader code, requiring a hard reset or power cycle.

/*

 * Common code to handle map devices which are simple ROM

 * (C) 2000 Red Hat. GPL'd.

 Nothing to see here */

 We do our best 8) */

/*

 * Routines common to all CFI-type probes.

 * (C) 2001-2003 Red Hat, Inc.

 * GPL'd

 First probe the map to see if we have CFI stuff there. */

 OK we liked it. Now find a driver for the command set it talks */

 First the primary cmdset */

 Then the secondary */

	/* Call the probetype-specific code with all permutations of

 The probe didn't like it */

#if 0 /* Let the CFI probe routine do this sanity check. The Intel and AMD

	 probe routines won't ever return a broken CFI structure anyway,

	 because they make them up themselves.

	/*

	 * Allocate memory for bitmap of valid chips.

	 * Align bitmap storage size to full byte.

 Mark first chip valid */

	/*

	 * Now probe for other chips, checking sensibly for aliases while

	 * we're at it. The new_chip probe above should have let the first

	 * chip in read mode.

	/*

	 * Now allocate the space for the structures we need to return to

	 * our caller, and copy the appropriate data into them.

 At most 4-bytes wide. */

 And minimum 1 */

		/* Minimum device size. Don't look for one 8-bit device

 If it was happy, it'll have increased its own use count */

		/* We need these for the !CONFIG_MODULES case,

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Registration for chip drivers

 *

	/* Hide all the horrid details, like some silly person taking

	/* We decrease the use count here. It may have been a

	   probe-only module, which is no longer required from this

	   point, having given us a handle on (and increased the use

	   count of) the actual driver code.

/*

 * Destroy an MTD device which was created for a map device.

 * Make sure the MTD device is already unregistered before calling this

/*

   Common Flash Interface probe code.

   (C) 2000 Red Hat. GPL'd.

#define DEBUG_CFI

 only needed for short periods, so this is rather simple */

/*

 * This fixup occurs immediately after reading the CFI structure and can affect

 * the number of chips detected, unlike cfi_fixup, which occurs after an

 * mtd_info structure has been created for the chip.

/* check for QRY.

   in: interleave,type,mode

   ret: table index, <0 for error

		/* This is the first time we're called. Set up the CFI

 Check each previous chip to see if it's an alias */

 Skip location; no valid chip at this address */

		/* This chip should be in read mode if it's one

			/* Eep. This chip also had the QRY marker.

 If the QRY marker goes away, it's an alias */

			/* Yes, it's actually got QRY for data. Most

			 * unfortunate. Stick the new chip in read mode

 FIXME: Use other modes to do a proper check */

	/* OK, if we got to here, then none of the previous chips appear to

 Update chip map */

 Put it back into Read Mode */

	/*

	 * S70GL02GS flash reports a single 256 MiB chip, but is really made up

	 * of two 128 MiB chips with 1024 sectors each.

 Read the CFI info structure */

 Do any necessary byteswapping */

 Dump the information therein */

	/*

	 * Note we put the device back into Read Mode BEFORE going into Auto

	 * Select Mode, as some devices support nesting of modes, others

	 * don't. This way should always work.

	 * On cmdset 0001 the writes of 0xaa and 0x55 are not needed, and

	 * so should be treated as nops or illegal (and so put the device

	 * back into Read Mode, which is a nop in this case).

 Get AMD/Spansion extended JEDEC ID */

 Put it back into Read Mode */

 DEBUG_CFI */

	/*

	 * Just use the generic probe stuff to call our CFI-specific

	 * chip_probe routine in all the possible permutations, etc.

/*

 * Common Flash Interface support:

 *   Generic utility functions not dependent on command set

 *

 * Copyright (C) 2002 Red Hat

 * Copyright (C) 2003 STMicroelectronics Limited

 *

 * This code is covered by the GPL.

/*

 * Returns the command address according to the given geometry.

	/* Modify the unlock address if we are in compatibility mode.

	 * For 16bit devices on 8 bit busses

	 * and 32bit devices on 16 bit busses

	 * set the low bit of the alternating bit sequence of the address.

/*

 * Transforms the CFI command for the given geometry (bus width & interleave).

 * It looks too long to be inline, but in the common case it should almost all

 * get optimised away.

	/* We do it this way to give the compiler a fighting chance

	   of optimising away all the crap for 'bankwidth' larger than

	   an unsigned long, in the common case where that support is

 i.e. normally 1

	/* First, determine what the bit-pattern should be for a single

	/* Now replicate it across the size of an unsigned long, or

	/* And finally, for the multi-word case, replicate it

	/* We do it this way to give the compiler a fighting chance

	   of optimising away all the crap for 'bankwidth' larger than

	   an unsigned long, in the common case where that support is

 i.e. normally 1

 Or all status words together */

	/* Last, determine what the bit-pattern should be for a single

/*

 * Sends a CFI command to a bank of flash for the given geometry.

 *

 * Returns the offset in flash where the command was written.

 * If prev_val is non-null, it will be set to the value at the command address,

 * before the command was written.

 scale factor */

 "QRY" found */

 QRY not found probably we deal with some odd CFI chips */

 Some revisions of some old Intel chips? */

 ST M29DW chips */

 some old SST chips, e.g. 39VF160x/39VF320x */

 SST 39VF640xB */

 QRY not found */

	/* M29W128G flashes require an additional reset command

 cfi->chips[0].start;

 Switch it into Query Mode */

 Read in the Extended Query Table */

 Make sure it returns to read mode */

	/* Check that both start and end of the requested erase are

	 * aligned with the erasesize at the appropriate addresses.

	/* Skip all erase regions which are ended before the start of

	   the requested erase. Actually, to save on the calculations,

	   we skip to the first erase region which starts after the

	   start of the requested erase, and then go back one.

	/* OK, now i is pointing at the erase region in which this

	   erase request starts. Check the start of the requested

	   erase range is aligned with the erase size which is in

	   effect here.

 Remember the erase region we start on */

	/* Next, check that the end of the requested erase is aligned

	 * with the erase region at that address.

	/* As before, drop back one to point at the region in which

	   the address actually falls

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Common code to handle absent "placeholder" devices

 * Copyright 2001 Resilience Corporation <ebrower@resilience.com>

 *

 * This map driver is used to allocate "placeholder" MTD

 * devices on systems that have socketed/removable media.

 * Use of this driver as a fallback preserves the expected

 * registration of MTD device nodes regardless of probe outcome.

 * A usage example is as follows:

 *

 *		my_dev[i] = do_map_probe("cfi", &my_map[i]);

 *		if(NULL == my_dev[i]) {

 *			my_dev[i] = do_map_probe("map_absent", &my_map[i]);

 *		}

 *

 * Any device 'probed' with this driver will return -ENODEV

 * upon open.

 nop */

 nop */

/*

   Common Flash Interface probe code.

   (C) 2000 Red Hat. GPL'd.

   See JEDEC (http://www.jedec.org/) standard JESD21C (section 3.5)

   for the standard this probe goes back to.



   Occasionally maintained by Thayne Harbaugh tharbaugh at lnxi dot com

 AMD */

 Atmel */

 Eon */

 Fujitsu */

 Hyundai */

 Intel */

 Macronix */

 NEC */

 PMC */

 Sharp */

 ST - www.st.com */

 SST */

 Toshiba */

 Winbond */

/*

 * Unlock address sets for AMD command sets.

 * Intel command sets use the MTD_UADDR_UNNECESSARY.

 * Each identifier, except MTD_UADDR_UNNECESSARY, and

 * MTD_UADDR_NO_SUPPORT must be defined below in unlock_addrs[].

 * MTD_UADDR_NOT_SUPPORTED must be 0 so that structure

 * initialization need not require initializing all of the

 * unlock addresses for all bit widths.

 data width not supported */

 Requires an arbitrary address */

 Does not require any address */

/*

 * I don't like the fact that the first entry in unlock_addrs[]

 * exists, but is for MTD_UADDR_NOT_SUPPORTED - and, therefore,

 * should not be used.  The  problem is that structures with

 * initializers have extra fields initialized to 0.  It is _very_

 * desirable to have the unlock address entries for unsupported

 * data widths automatically initialized - that means that

 * MTD_UADDR_NOT_SUPPORTED must be 0 and the first entry here

 * must go unused.

 Doesn't matter which address */

 is used - must be last entry */

 Bitmask for x8, x16 etc. */

 unlock addrs for 8, 16, 32, 64 */

/*

 * Please keep this list ordered by manufacturer!

 * Fortunately, the list isn't searched often and so a

 * slow, linear search isn't so bad.

 add DL */

 ???? */

 ???? */

 ???? */

 ???? */

 should be CFI */

 should be CFI */

 CFI is broken: reports AMD_STD, but needs custom uaddr */

 CFI is broken: reports AMD_STD, but needs custom uaddr */

 should be CFI */

 FIXME - CFI device? */

 FIXME - CFI device? */

 FIXME - CFI device? */

 ???? */

 FIXME - CFI device? */

 ???? */

	/* According to JEDEC "Standard Manufacturer's Identification Code"

	 * (http://www.jedec.org/download/search/jep106W.pdf)

	 * several first banks can contain 0x7f instead of actual ID

 Reset */

	/* after checking the datasheets for SST, MACRONIX and ATMEL

	 * (oh and incidentaly the jedec spec - 3.5.3.3) the reset

	 * sequence is *supposed* to be 0xaa at 0x5555, 0x55 at

	 * 0x2aaa, 0xF0 at 0x5555 this will not affect the AMD chips

	 * as they will ignore the writes and don't care what address

	/* Some misdesigned Intel chips do not respond for 0xF0 for a reset,

	 * so ensure we're in read mode.  Send both the Intel and the AMD command

	 * for this.  Intel uses 0xff for this, AMD uses 0xff for NOP, so

	 * this should be safe.

 FIXME - should have reset delay before continuing */

xx printk(KERN_WARNING "%s: kmalloc failed for CFI ident structure\n", map->name);

 This may be redundant for some cases, but it doesn't hurt */

	/* The table has unlock addresses in _bytes_, and we try not to let

	   our brains explode when we see the datasheets talking about address

	   lines numbered from A-1 to A18. The CFI table has unlock addresses

 ok */

/*

 * There is a BIG problem properly ID'ing the JEDEC device and guaranteeing

 * the mapped address, unlock addresses, and proper chip ID.  This function

 * attempts to minimize errors.  It is doubtfull that this probe will ever

 * be perfect - consequently there should be some module parameters that

 * could be manually specified to force the chip info.

 failure until all tests pass */

	/*

	 * The IDs must match.  For X16 and X32 devices operating in

	 * a lower width ( X8 or X16 ), the device ID's are usually just

	 * the lower byte(s) of the larger device ID for wider mode.  If

	 * a part is found that doesn't fit this assumption (device id for

	 * smaller width mode is completely unrealated to full-width mode)

	 * then the jedec_table[] will have to be augmented with the IDs

	 * for different widths.

		/* bjd: it seems that if we do this, we can end up

		 * detecting 16bit flashes as an 8bit device, even though

		 * there aren't.

 the part size must fit in the memory window */

	/*

	 * Make sure the ID's disappear when the device is taken out of

	 * ID mode.  The only time this should fail when it should succeed

	 * is when the ID's are written as data to the same

	 * addresses.  For this rare and unfortunate case the chip

	 * cannot be probed correctly.

	 * FIXME - write a driver that takes all of the chip info as

	 * module parameters, doesn't probe but forces a load.

 all tests passed - mark  as success */

	/*

	 * Put the device back in ID mode - only need to do this if we

	 * were truly frobbing a real device.

 FIXME - should have a delay before continuing */

 Make certain we aren't probing past the end of map */

 Ensure the unlock addresses we try stay inside the map */

 Reset */

 Autoselect Mode */

 FIXME - should have a delay before continuing */

		/* This is the first time we're called. Set up the CFI

 Make sure it is a chip of the same manufacturer and id */

 Check each previous chip locations to see if it's an alias */

 Skip location; no valid chip at this address */

			/* Eep. This chip also looks like it's in autoselect mode.

 If the device IDs go away, it's an alias */

			/* Yes, it's actually got the device IDs as data. Most

			 * unfortunate. Stick the new chip in read mode

 FIXME: Use other modes to do a proper check */

	/* OK, if we got to here, then none of the previous chips appear to

 Update chip map */

 Put it back into Read Mode */

	/*

	 * Just use the generic probe stuff to call our CFI-specific

	 * chip_probe routine in all the possible permutations, etc.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2006-2008 Nokia Corporation

 *

 * Test OOB read and write on MTD device.

 *

 * Author: Adrian Hunter <ext-adrian.hunter@nokia.com>

/*

 * Display the address, offset and data bytes at comparison failure.

 * Return number of bitflips encountered.

/*

 * Compare with 0xff and show the address, offset and data bytes at

 * comparison failure. Return number of bitflips encountered.

 verify pre-offset area for 0xff */

 verify post-(use_offset + use_len) area for 0xff */

 read entire block's OOB at one go */

 verify one page OOB at a time for bitflip per page limit check */

 First test: write all OOB, read it back and verify */

	/*

	 * Second test: write all OOB, a block at a time, read it back and

	 * verify.

 Check all eraseblocks */

	/*

	 * Third test: write OOB at varying offsets and lengths, read it back

	 * and verify.

 Write all eraseblocks */

 Check all eraseblocks */

 Fourth test: try to write off end of device */

 Attempt to write off end of OOB */

 Attempt to read off end of OOB */

 Attempt to write off end of device */

 Attempt to read off end of device */

 Attempt to write off end of device */

 Attempt to read off end of device */

 Fifth test: write / read across block boundaries */

 Erase all eraseblocks */

 Write all eraseblocks */

 Check all eraseblocks */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2006-2008 Nokia Corporation

 *

 * Check MTD device read.

 *

 * Author: Adrian Hunter <ext-adrian.hunter@nokia.com>

 Read all eraseblocks 1 page at a time */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2007 Nokia Corporation

 *

 * Test read and write speed of a MTD device.

 *

 * Author: Adrian Hunter <adrian.hunter@nokia.com>

 Write all eraseblocks, 1 eraseblock at a time */

 Read all eraseblocks, 1 eraseblock at a time */

 Write all eraseblocks, 1 page at a time */

 Read all eraseblocks, 1 page at a time */

 Write all eraseblocks, 2 pages at a time */

 Read all eraseblocks, 2 pages at a time */

 Erase all eraseblocks */

 Multi-block erase all eraseblocks */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2006-2008 Artem Bityutskiy

 * Copyright (C) 2006-2008 Jarkko Lavinen

 * Copyright (C) 2006-2008 Adrian Hunter

 *

 * Authors: Artem Bityutskiy, Jarkko Lavinen, Adria Hunter

 *

 * WARNING: this test program may kill your flash and your device. Do not

 * use it unless you know what you do. Authors are not responsible for any

 * damage caused by this program.

 This buffer contains 0x555555...0xAAAAAA... pattern */

 This buffer contains 0xAAAAAA...0x555555... pattern */

 This buffer contains all 0xFF bytes */

 This a temporary buffer is use when checking data */

 How many erase cycles were done */

/*

 * Check that the contents of eraseblock number @enbum is equivalent to the

 * @buf buffer.

 Try read again */

 Initialize patterns */

 Check if the eraseblocks contain only 0xFF bytes */

 Write the pattern */

 Verify what we wrote */

/*

 * Report the detailed information about how the read EB differs from what was

 * written.

/*

 * Count the number of differing bytes and bits and return the first differing

 * offset.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright © 2012 NetCommWireless

 * Iwo Mergler <Iwo.Mergler@netcommwireless.com.au>

 *

 * Test for multi-bit error recovery on a NAND page This mostly tests the

 * ECC controller / driver.

 *

 * There are two test modes:

 *

 *	0 - artificially inserting bit errors until the ECC fails

 *	    This is the default method and fairly quick. It should

 *	    be independent of the quality of the FLASH.

 *

 *	1 - re-writing the same pattern repeatedly until the ECC fails.

 *	    This method relies on the physics of NAND FLASH to eventually

 *	    generate '0' bits if '1' has been written sufficient times.

 *	    Depending on the NAND, the first bit errors will appear after

 *	    1000 or more writes and then will usually snowball, reaching the

 *	    limits of the ECC quickly.

 *

 *	    The test stops after 10000 cycles, should your FLASH be

 *	    exceptionally good and not generate bit errors before that. Try

 *	    a different page in that case.

 *

 * Please note that neither of these tests will significantly 'use up' any

 * FLASH endurance. Only a maximum of two erase operations will be performed.

 Offset of the page we're using. */

 Eraseblock number for our page. */

/* We assume that the ECC can correct up to a certain number

 Size of subpages */

 Number of subpages per page */

 MTD device */

 One page write / compare buffer */

 One page read buffer */

 'random' bytes from known offsets */

 Reverse bits of result. */

 Writes wbuffer to page */

 Re-writes the data area while leaving the OOB alone. */

 No ECC */

/* Reads page into rbuffer. Returns number of corrected bit errors (>=0)

 Saving last mtd stats */

 Verifies rbuffer against random sequence */

/* Finds the first '1' bit in wbuffer starting at offset 'byte'

/* Writes 'random' data to page and then introduces deliberate bit

/* Writes 'random' data to page and then re-writes that same data repeatedly.

   This eventually develops bit errors (bits written as '1' will slowly become

	/* We don't expect more than this many correctable bit errors per

 bit error histogram. */

 err < 0 */

	/* At this point bitstats[0] contains the number of ops with no bit

 We leave the block un-erased in case of test failure. */

 Nothing */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2006-2007 Nokia Corporation

 *

 * Test sub-page read and write on MTD device.

 * Author: Adrian Hunter <ext-adrian.hunter@nokia.com>

 Write all eraseblocks */

 Check all eraseblocks */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2006-2008 Nokia Corporation

 *

 * Test page read and write on MTD device.

 *

 * Author: Adrian Hunter <ext-adrian.hunter@nokia.com>

 Do a read to set the internal dataRAMs to different data */

 Check boundary between eraseblocks */

 Do a read to set the internal dataRAMs to different data */

 Read 2nd-to-last page to pp1 */

 Read 3rd-to-last page to pp1 */

 Read first page to pp2 */

 Read last page to pp3 */

 Read first page again to pp4 */

 pp2 and pp4 should be the same */

 Erase all eraseblocks */

 Write all eraseblocks */

 Check all eraseblocks */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Test the implementation for software ECC

 *

 * No actual MTD device is needed, So we don't need to warry about losing

 * important data by human error.

 *

 * This covers possible patterns of corruption which can be reliably corrected

 * or detected.

/*

 * The reason for this __change_bit_le() instead of __change_bit() is to inject

 * bit error properly within the region which is not a multiple of

 * sizeof(unsigned long) on big-endian systems

		/*

		 * Don't inject a bit error into the insignificant bits (16th

		 * and 17th bit) in ECC code for 256 byte data block

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2006-2008 Nokia Corporation

 *

 * Test random reads, writes and erases on MTD device.

 *

 * Author: Adrian Hunter <ext-adrian.hunter@nokia.com>

 Read or write up 2 eraseblocks at a time - hence 'ebcnt - 1' */

 Read or write up 2 eraseblocks at a time */

 Do operations */

 SPDX-License-Identifier: GPL-2.0

 Ignore corrected ECC errors */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Generic Error-Correcting Code (ECC) engine

 *

 * Copyright (C) 2019 Macronix

 * Author:

 *     Miquèl RAYNAL <miquel.raynal@bootlin.com>

 *

 *

 * This file describes the abstraction of any NAND ECC engine. It has been

 * designed to fit most cases, including parallel NANDs and SPI-NANDs.

 *

 * There are three main situations where instantiating this ECC engine makes

 * sense:

 *   - external: The ECC engine is outside the NAND pipeline, typically this

 *               is a software ECC engine, or an hardware engine that is

 *               outside the NAND controller pipeline.

 *   - pipelined: The ECC engine is inside the NAND pipeline, ie. on the

 *                controller's side. This is the case of most of the raw NAND

 *                controllers. In the pipeline case, the ECC bytes are

 *                generated/data corrected on the fly when a page is

 *                written/read.

 *   - ondie: The ECC engine is inside the NAND pipeline, on the chip's side.

 *            Some NAND chips can correct themselves the data.

 *

 * Besides the initial setup and final cleanups, the interfaces are rather

 * simple:

 *   - prepare: Prepare an I/O request. Enable/disable the ECC engine based on

 *              the I/O request type. In case of software correction or external

 *              engine, this step may involve to derive the ECC bytes and place

 *              them in the OOB area before a write.

 *   - finish: Finish an I/O request. Correct the data in case of a read

 *             request and report the number of corrected bits/uncorrectable

 *             errors. Most likely empty for write operations, unless you have

 *             hardware specific stuff to do, like shutting down the engine to

 *             save power.

 *

 * The I/O request should be enclosed in a prepare()/finish() pair of calls

 * and will behave differently depending on the requested I/O type:

 *   - raw: Correction disabled

 *   - ecc: Correction enabled

 *

 * The request direction is impacting the logic as well:

 *   - read: Load data from the NAND chip

 *   - write: Store data in the NAND chip

 *

 * Mixing all this combinations together gives the following behavior.

 * Those are just examples, drivers are free to add custom steps in their

 * prepare/finish hook.

 *

 * [external ECC engine]

 *   - external + prepare + raw + read: do nothing

 *   - external + finish  + raw + read: do nothing

 *   - external + prepare + raw + write: do nothing

 *   - external + finish  + raw + write: do nothing

 *   - external + prepare + ecc + read: do nothing

 *   - external + finish  + ecc + read: calculate expected ECC bytes, extract

 *                                      ECC bytes from OOB buffer, correct

 *                                      and report any bitflip/error

 *   - external + prepare + ecc + write: calculate ECC bytes and store them at

 *                                       the right place in the OOB buffer based

 *                                       on the OOB layout

 *   - external + finish  + ecc + write: do nothing

 *

 * [pipelined ECC engine]

 *   - pipelined + prepare + raw + read: disable the controller's ECC engine if

 *                                       activated

 *   - pipelined + finish  + raw + read: do nothing

 *   - pipelined + prepare + raw + write: disable the controller's ECC engine if

 *                                        activated

 *   - pipelined + finish  + raw + write: do nothing

 *   - pipelined + prepare + ecc + read: enable the controller's ECC engine if

 *                                       deactivated

 *   - pipelined + finish  + ecc + read: check the status, report any

 *                                       error/bitflip

 *   - pipelined + prepare + ecc + write: enable the controller's ECC engine if

 *                                        deactivated

 *   - pipelined + finish  + ecc + write: do nothing

 *

 * [ondie ECC engine]

 *   - ondie + prepare + raw + read: send commands to disable the on-chip ECC

 *                                   engine if activated

 *   - ondie + finish  + raw + read: do nothing

 *   - ondie + prepare + raw + write: send commands to disable the on-chip ECC

 *                                    engine if activated

 *   - ondie + finish  + raw + write: do nothing

 *   - ondie + prepare + ecc + read: send commands to enable the on-chip ECC

 *                                   engine if deactivated

 *   - ondie + finish  + ecc + read: send commands to check the status, report

 *                                   any error/bitflip

 *   - ondie + prepare + ecc + write: send commands to enable the on-chip ECC

 *                                    engine if deactivated

 *   - ondie + finish  + ecc + write: do nothing

/**

 * nand_ecc_init_ctx - Init the ECC engine context

 * @nand: the NAND device

 *

 * On success, the caller is responsible of calling @nand_ecc_cleanup_ctx().

/**

 * nand_ecc_cleanup_ctx - Cleanup the ECC engine context

 * @nand: the NAND device

/**

 * nand_ecc_prepare_io_req - Prepare an I/O request

 * @nand: the NAND device

 * @req: the I/O request

/**

 * nand_ecc_finish_io_req - Finish an I/O request

 * @nand: the NAND device

 * @req: the I/O request

 Define default OOB placement schemes for large and small page devices */

/*

 * Support the old "large page" layout used for 1-bit Hamming ECC where ECC

 * are placed at a fixed offset.

/**

 * nand_ecc_is_strong_enough - Check if the chip configuration meets the

 *                             datasheet requirements.

 *

 * @nand: Device to check

 *

 * If our configuration corrects A bits per B bytes and the minimum

 * required correction level is X bits per Y bytes, then we must ensure

 * both of the following are true:

 *

 * (1) A / B >= X / Y

 * (2) A >= X

 *

 * Requirement (1) ensures we can correct for the required bitflip density.

 * Requirement (2) ensures we can correct even when all bitflips are clumped

 * in the same sector.

 Not enough information */

	/*

	 * We get the number of corrected bits per page to compare

	 * the correction density.

 ECC engine driver internal helpers */

 Let the user decide the exact length of each buffer */

/*

 * Ensure data and OOB area is fully read/written otherwise the correction might

 * not work as expected.

 Save the original request */

 Ensure the request covers the entire page */

 Copy the data that must be writen in the bounce buffers, if needed */

 Restore the data read from the bounce buffers, if needed */

 Ensure the original request is restored */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * This file provides ECC correction for more than 1 bit per block of data,

 * using binary BCH codes. It relies on the generic BCH library lib/bch.c.

 *

 * Copyright © 2011 Ivan Djelic <ivan.djelic@parrot.com>

/**

 * nand_ecc_sw_bch_calculate - Calculate the ECC corresponding to a data block

 * @nand: NAND device

 * @buf: Input buffer with raw data

 * @code: Output buffer with ECC

 apply mask so that an erased page is a valid codeword */

/**

 * nand_ecc_sw_bch_correct - Detect, correct and report bit error(s)

 * @nand: NAND device

 * @buf: Raw data read from the chip

 * @read_ecc: ECC bytes from the chip

 * @calc_ecc: ECC calculated from the raw data

 *

 * Detect and correct bit errors for a data block.

 The error is in the data area: correct it */

 Otherwise the error is in the ECC area: nothing to do */

/**

 * nand_ecc_sw_bch_cleanup - Cleanup software BCH ECC resources

 * @nand: NAND device

/**

 * nand_ecc_sw_bch_init - Initialize software BCH ECC engine

 * @nand: NAND device

 *

 * Returns: a pointer to a new NAND BCH control structure, or NULL upon failure

 *

 * Initialize NAND BCH error correction. @nand.ecc parameters 'step_size' and

 * 'bytes' are used to compute the following BCH parameters:

 *     m, the Galois field order

 *     t, the error correction capability

 * 'bytes' should be equal to the number of bytes required to store m * t

 * bits, where m is such that 2^m - 1 > step_size * 8.

 *

 * Example: to configure 4 bit correction per 512 bytes, you should pass

 * step_size = 512 (thus, m = 13 is the smallest integer such that 2^m - 1 > 512 * 8)

 * bytes = 7 (7 bytes are required to store m * t = 13 * 4 = 52 bits)

 Compute and store the inverted ECC of an erased step */

 Verify that the number of code bytes has the expected value */

 Sanity checks */

 Only large page NAND chips may use BCH */

	/*

	 * Board driver should supply ECC size and ECC strength

	 * values to select how many bits are correctable.

	 * Otherwise, default to 512 bytes for large page devices and 256 for

	 * small page devices.

 Maximize */

 Reserve 2 bytes for the BBM */

 Verify the layout validity */

 Nothing to do for a raw operation */

 This engine does not provide BBM/free OOB bytes protection */

 No more preparation for page read */

 Preparation for page write: derive the ECC bytes and place them */

 Nothing to do for a raw operation */

 This engine does not provide BBM/free OOB bytes protection */

 No more preparation for page write */

 Finish a page read: retrieve the (raw) ECC bytes*/

 Calculate the ECC bytes */

 Finish a page read: compare and correct */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * This file contains an ECC algorithm that detects and corrects 1 bit

 * errors in a 256 byte block of data.

 *

 * Copyright © 2008 Koninklijke Philips Electronics NV.

 *                  Author: Frans Meulenbroeks

 *

 * Completely replaces the previous ECC implementation which was written by:

 *   Steven J. Hill (sjhill@realitydiluted.com)

 *   Thomas Gleixner (tglx@linutronix.de)

 *

 * Information on how this algorithm works and how it was developed

 * can be found in Documentation/driver-api/mtd/nand_ecc.rst

/*

 * invparity is a 256 byte table that contains the odd parity

 * for each byte. So if the number of bits in a byte is even,

 * the array element is 1, and when the number of bits is odd

 * the array eleemnt is 0.

/*

 * bitsperbyte contains the number of bits per byte

 * this is only used for testing and repairing parity

 * (a precalculated value slightly improves performance)

/*

 * addressbits is a lookup table to filter out the bits from the xor-ed

 * ECC data that identify the faulty location.

 * this is only used for repairing parity

 * see the comments in nand_ecc_sw_hamming_correct for more details

 current value in buffer */

 rp0..rp17 are the various accumulated parities (per byte) */

 Cumulative parity for all data */

 Cumulative parity at the end of the loop (rp12, rp14, rp16) */

	/*

	 * The loop is unrolled a number of times;

	 * This avoids if statements to decide on which rp value to update

	 * Also we process the data by longwords.

	 * Note: passing unaligned data might give a performance penalty.

	 * It is assumed that the buffers are aligned.

	 * tmppar is the cumulative sum of this iteration.

	 * needed for calculating rp12, rp14, rp16 and par

	 * also used as a performance improvement for rp6, rp8 and rp10

	/*

	 * handle the fact that we use longword operations

	 * we'll bring rp4..rp14..rp16 back to single byte entities by

	 * shifting and xoring first fold the upper and lower 16 bits,

	 * then the upper and lower 8 bits.

	/*

	 * we also need to calculate the row parity for rp0..rp3

	 * This is present in par, because par is now

	 * rp3 rp3 rp2 rp2 in little endian and

	 * rp2 rp2 rp3 rp3 in big endian

	 * as well as

	 * rp1 rp0 rp1 rp0 in little endian and

	 * rp0 rp1 rp0 rp1 in big endian

	 * First calculate rp2 and rp3

 reduce par to 16 bits then calculate rp1 and rp0 */

 finally reduce par to 8 bits */

	/*

	 * and calculate rp5..rp15..rp17

	 * note that par = rp4 ^ rp5 and due to the commutative property

	 * of the ^ operator we can say:

	 * rp5 = (par ^ rp4);

	 * The & 0xff seems superfluous, but benchmarking learned that

	 * leaving it out gives slightly worse results. No idea why, probably

	 * it has to do with the way the pipeline in pentium is organized.

	/*

	 * Finally calculate the ECC bits.

	 * Again here it might seem that there are performance optimisations

	 * possible, but benchmarks showed that on the system this is developed

	 * the code below is the fastest

/**

 * nand_ecc_sw_hamming_calculate - Calculate 3-byte ECC for 256/512-byte block

 * @nand: NAND device

 * @buf: Input buffer with raw data

 * @code: Output buffer with ECC

	/*

	 * b0 to b2 indicate which bit is faulty (if any)

	 * we might need the xor result  more than once,

	 * so keep them in a local var

 check if there are any bitfaults */

 repeated if statements are slightly more efficient than switch ... */

 ordered in order of likelihood */

 no error */

 single bit error */

		/*

		 * rp17/rp15/13/11/9/7/5/3/1 indicate which byte is the faulty

		 * byte, cp 5/3/1 indicate the faulty bit.

		 * A lookup table (called addressbits) is used to filter

		 * the bits from the byte they are in.

		 * A marginal optimisation is possible by having three

		 * different lookup tables.

		 * One as we have now (for b0), one for b2

		 * (that would avoid the >> 1), and one for b1 (with all values

		 * << 4). However it was felt that introducing two more tables

		 * hardly justify the gain.

		 *

		 * The b2 shift is there to get rid of the lowest two bits.

		 * We could also do addressbits[b2] >> 1 but for the

		 * performance it does not make any difference

 flip the bit */

 count nr of bits; use table lookup, faster than calculating it */

 error in ECC data; no action needed */

/**

 * nand_ecc_sw_hamming_correct - Detect and correct bit error(s)

 * @nand: NAND device

 * @buf: Raw data read from the chip

 * @read_ecc: ECC bytes read from the chip

 * @calc_ecc: ECC calculated from the raw data

 *

 * Detect and correct up to 1 bit error per 256/512-byte block.

 Use the strongest configuration by default */

 Nothing to do for a raw operation */

 This engine does not provide BBM/free OOB bytes protection */

 No more preparation for page read */

 Preparation for page write: derive the ECC bytes and place them */

 Nothing to do for a raw operation */

 This engine does not provide BBM/free OOB bytes protection */

 No more preparation for page write */

 Finish a page read: retrieve the (raw) ECC bytes*/

 Calculate the ECC bytes */

 Finish a page read: compare and correct */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2017 Free Electrons

 *

 * Authors:

 *	Boris Brezillon <boris.brezillon@free-electrons.com>

 *	Peter Pan <peterpandong@micron.com>

/**

 * nanddev_bbt_init() - Initialize the BBT (Bad Block Table)

 * @nand: NAND device

 *

 * Initialize the in-memory BBT.

 *

 * Return: 0 in case of success, a negative error code otherwise.

/**

 * nanddev_bbt_cleanup() - Cleanup the BBT (Bad Block Table)

 * @nand: NAND device

 *

 * Undoes what has been done in nanddev_bbt_init()

/**

 * nanddev_bbt_update() - Update a BBT

 * @nand: nand device

 *

 * Update the BBT. Currently a NOP function since on-flash bbt is not yet

 * supported.

 *

 * Return: 0 in case of success, a negative error code otherwise.

/**

 * nanddev_bbt_get_block_status() - Return the status of an eraseblock

 * @nand: nand device

 * @entry: the BBT entry

 *

 * Return: a positive number nand_bbt_block_status status or -%ERANGE if @entry

 *	   is bigger than the BBT size.

/**

 * nanddev_bbt_set_block_status() - Update the status of an eraseblock in the

 *				    in-memory BBT

 * @nand: nand device

 * @entry: the BBT entry to update

 * @status: the new status

 *

 * Update an entry of the in-memory BBT. If you want to push the updated BBT

 * the NAND you should call nanddev_bbt_update().

 *

 * Return: 0 in case of success or -%ERANGE if @entry is bigger than the BBT

 *	   size.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2017 Free Electrons

 *

 * Authors:

 *	Boris Brezillon <boris.brezillon@free-electrons.com>

 *	Peter Pan <peterpandong@micron.com>

/**

 * nanddev_isbad() - Check if a block is bad

 * @nand: NAND device

 * @pos: position pointing to the block we want to check

 *

 * Return: true if the block is bad, false otherwise.

 Lazy block status retrieval */

/**

 * nanddev_markbad() - Mark a block as bad

 * @nand: NAND device

 * @pos: position of the block to mark bad

 *

 * Mark a block bad. This function is updating the BBT if available and

 * calls the low-level markbad hook (nand->ops->markbad()).

 *

 * Return: 0 in case of success, a negative error code otherwise.

/**

 * nanddev_isreserved() - Check whether an eraseblock is reserved or not

 * @nand: NAND device

 * @pos: NAND position to test

 *

 * Checks whether the eraseblock pointed by @pos is reserved or not.

 *

 * Return: true if the eraseblock is reserved, false otherwise.

 Return info from the table */

/**

 * nanddev_erase() - Erase a NAND portion

 * @nand: NAND device

 * @pos: position of the block to erase

 *

 * Erases the block if it's not bad.

 *

 * Return: 0 in case of success, a negative error code otherwise.

/**

 * nanddev_mtd_erase() - Generic mtd->_erase() implementation for NAND devices

 * @mtd: MTD device

 * @einfo: erase request

 *

 * This is a simple mtd->_erase() implementation iterating over all blocks

 * concerned by @einfo and calling nand->ops->erase() on each of them.

 *

 * Note that mtd->_erase should not be directly assigned to this helper,

 * because there's no locking here. NAND specialized layers should instead

 * implement there own wrapper around nanddev_mtd_erase() taking the

 * appropriate lock before calling nanddev_mtd_erase().

 *

 * Return: 0 in case of success, a negative error code otherwise.

/**

 * nanddev_mtd_max_bad_blocks() - Get the maximum number of bad eraseblock on

 *				  a specific region of the NAND device

 * @mtd: MTD device

 * @offs: offset of the NAND region

 * @len: length of the NAND region

 *

 * Default implementation for mtd->_max_bad_blocks(). Only works if

 * nand->memorg.max_bad_eraseblocks_per_lun is > 0.

 *

 * Return: a positive number encoding the maximum number of eraseblocks on a

 * portion of memory, a negative error code otherwise.

/**

 * nanddev_get_ecc_engine() - Find and get a suitable ECC engine

 * @nand: NAND device

 Read the user desires in terms of ECC engine/configuration */

/**

 * nanddev_put_ecc_engine() - Dettach and put the in-use ECC engine

 * @nand: NAND device

/**

 * nanddev_find_ecc_configuration() - Find a suitable ECC configuration

 * @nand: NAND device

/**

 * nanddev_ecc_engine_init() - Initialize an ECC engine for the chip

 * @nand: NAND device

 Look for the ECC engine to use */

 No ECC engine requested */

 Configure the engine: balance user input and chip requirements */

/**

 * nanddev_ecc_engine_cleanup() - Cleanup ECC engine initializations

 * @nand: NAND device

/**

 * nanddev_init() - Initialize a NAND device

 * @nand: NAND device

 * @ops: NAND device operations

 * @owner: NAND device owner

 *

 * Initializes a NAND device object. Consistency checks are done on @ops and

 * @nand->memorg. Also takes care of initializing the BBT.

 *

 * Return: 0 in case of success, a negative error code otherwise.

/**

 * nanddev_cleanup() - Release resources allocated in nanddev_init()

 * @nand: NAND device

 *

 * Basically undoes what has been done in nanddev_init().

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * NAND flash simulator.

 *

 * Author: Artem B. Bityuckiy <dedekind@oktetlabs.ru>, <dedekind@infradead.org>

 *

 * Copyright (C) 2004 Nokia Corporation

 *

 * Note: NS means "NAND Simulator".

 * Note: Input means input TO flash chip, output means output FROM chip.

 Default simulator parameters values */

 No byte */

 No byte */

 Page and erase block positions for the following parameters are independent of any partitions */

 The largest possible page size */

 Simulator's output macros (logging, debugging, warning, error) */

 Busy-wait delay macros (microseconds, milliseconds) */

 Is the nandsim structure initialized ? */

 Good operation completion status */

 Operation failed completion status */

 Calculate the page offset in flash RAM image by (row, column) address */

 Calculate the OOB offset in flash RAM image by (row, column) address */

 After a command is input, the simulator goes to one of the following states */

 read data from the beginning of page */

 read data from the second half of page */

 read data second command (large page devices) */

 start page program */

 read OOB area */

 sector erase first command */

 read status */

 sequential data input */

 read ID */

 sector erase second command */

 reset */

 random output command */

 random output start command */

 command states mask */

 After an address is input, the simulator goes to one of these states */

 full (row, column) address is accepted */

 sector address was accepted */

 column address was accepted */

 one byte zero address was accepted */

 address states mask */

 During data input/output the simulator is in these states */

 waiting for data input */

 data input states mask */

 waiting for page data output */

 waiting for ID bytes output */

 waiting for status output */

 data output states mask */

 Previous operation is done, ready to accept new requests */

 This state is used to mark that the next state isn't known yet */

 Simulator's actions bit masks */

 copy page/OOB to the internal buffer */

 program the internal buffer to flash */

 erase sector */

 don't add any offset to address */

 add to address half of page */

 add to address OOB offset */

 action mask */

 Number of operations supported by the simulator */

 Maximum number of states in operation */

 any chip supports this operation */

 512-byte  page chips */

 2048-byte page chips */

 512-byte page chips with 8-bit bus width */

 4096-byte page chips */

 2048 & 4096-byte page chips */

 512-byte page chips */

 Remove action bits from state */

/*

 * Maximum previous states which need to be saved. Currently saving is

 * only needed for page program operation with preceded read command

 * (which is only valid for 512-byte pages).

 Maximum page cache pages needed to read or write a NAND page to the cache_file */

/*

 * A union to represent flash memory contents and flash buffer.

 for byte access */

 for 16-bit word access */

/*

 * The structure which describes all the internal simulator data.

 flash chip bus width (8 or 16) */

 chip's ID bytes */

 chip's characteristic bits */

 current chip state */

 next expected state */

 current operation, NULL operations isn't known yet  */

 previous states */

 number of previous states saved */

 current state index */

 The simulated NAND flash pages array */

 Slab allocator for nand pages */

 Internal buffer of page + OOB size bytes */

 NAND flash "geometry" */

 total flash size, bytes */

 flash sector (erase block) size, bytes */

 NAND flash page size, bytes */

 page OOB area size, bytes */

 total flash size including OOB, bytes */

 page size including OOB , bytes*/

 sector size including OOB, bytes */

 total number of pages */

 number of pages per sector */

 bits number in sector size */

 bits number in page size */

 bytes per page address */

 bytes per sector address */

 the number ID bytes that this chip outputs */

 NAND flash internal registers */

 the command register */

 the status register */

 the page number */

 the offset within page */

 internal counter */

 number of bytes which must be processed */

 fixed page offset */

 NAND flash lines state */

 chip Enable */

 command Latch Enable */

 address Latch Enable */

 write Protect */

 Fields needed when using a cache file */

 Open file */

 Which pages have been written */

 debugfs entry */

/*

 * Operations array. To perform any operation the simulator must pass

 * through the correspondent states chain.

 options which are required to perform the operation */

 operation's states */

 Read page + OOB from the beginning */

 Read page + OOB from the second half */

 Read OOB */

 Program page starting from the beginning */

 Program page starting from the beginning */

 Program page starting from the second half */

 Program OOB */

 Erase sector */

 Read status */

 Read ID */

 Large page devices read page */

 Large page devices random page read */

 MTD structure for NAND controller */

 Calc wear stats */

 Output wear report */

/**

 * ns_debugfs_create - initialize debugfs

 * @ns: nandsim device description object

 *

 * This function creates all debugfs files for UBI device @ubi. Returns zero in

 * case of success and a negative error code in case of failure.

	/*

	 * Just skip debugfs initialization when the debugfs directory is

	 * missing.

/*

 * Allocate array of page pointers, create slab allocation for an array

 * and initialize the array by NULL pointers.

 *

 * RETURNS: 0 if success, -ENOMEM if memory alloc fails.

/*

 * Free any allocated pages, and free the array of page pointers.

/*

 * Initialize the nandsim structure.

 *

 * RETURNS: 0 if success, -ERRNO if failure.

 Initialize the NAND flash parameters */

 Fill the partition_info structure */

 Allocate / initialize the internal buffer */

/*

 * Free the nandsim structure.

	/*

	 * TODO: Notify this through a debugfs entry,

	 * instead of showing an error message.

/*

 * Returns the string representation of 'state' state.

/*

 * Check if command is valid.

 *

 * RETURNS: 1 if wrong command, 0 if right.

/*

 * Returns state after command is accepted by command number.

/*

 * Move an address byte to the correspondent internal register.

/*

 * Switch to STATE_READY state.

/*

 * If the operation isn't known yet, try to find it in the global array

 * of supported operations.

 *

 * Operation can be unknown because of the following.

 *   1. New command was accepted and this is the first call to find the

 *      correspondent states chain. In this case ns->npstates = 0;

 *   2. There are several operations which begin with the same command(s)

 *      (for example program from the second half and read from the

 *      second half operations both begin with the READ1 command). In this

 *      case the ns->pstates[] array contains previous states.

 *

 * Thus, the function tries to find operation containing the following

 * states (if the 'flag' parameter is 0):

 *    ns->pstates[0], ... ns->pstates[ns->npstates], ns->state

 *

 * If (one and only one) matching operation is found, it is accepted (

 * ns->ops, ns->state, ns->nxstate are initialized, ns->npstate is

 * zeroed).

 *

 * If there are several matches, the current state is pushed to the

 * ns->pstates.

 *

 * The operation can be unknown only while commands are input to the chip.

 * As soon as address command is accepted, the operation must be known.

 * In such situation the function is called with 'flag' != 0, and the

 * operation is searched using the following pattern:

 *     ns->pstates[0], ... ns->pstates[ns->npstates], <address input>

 *

 * It is supposed that this pattern must either match one operation or

 * none. There can't be ambiguity in that case.

 *

 * If no matches found, the function does the following:

 *   1. if there are saved states present, try to ignore them and search

 *      again only using the last command. If nothing was found, switch

 *      to the STATE_READY state.

 *   2. if there are no saved states, switch to the STATE_READY state.

 *

 * RETURNS: -2 - no matched operations found.

 *          -1 - several matches.

 *           0 - operation is found.

 Ignore operations we can't perform */

 Exact match */

			/*

			 * In this case the find_operation function was

			 * called when address has just began input. But it isn't

			 * yet fully input and the current state must

			 * not be one of STATE_ADDR_*, but the STATE_ADDR_*

			 * state must be the next state (ns->nxstate).

 Nothing was found. Try to ignore previous commands (if any) and search again */

 This shouldn't happen */

 Get page cache pages in advance to provide NOFS memory allocation */

/*

 * Returns a pointer to the current page.

/*

 * Retuns a pointer to the current byte, within the current page.

/*

 * Fill the NAND buffer with data read from the specified page.

/*

 * Erase all pages in the specified sector.

/*

 * Program the specified page with the contents from the NAND buffer.

		/*

		 * We allocate memory with GFP_NOFS because a flash FS may

		 * utilize this. If it is holding an FS lock, then gets here,

		 * then kernel memory alloc runs writeback which goes to the FS

		 * again and deadlocks. This was seen in practice.

/*

 * If state has any action bit, perform this action.

 *

 * RETURNS: 0 if success, -1 if error.

 Check that page address input is correct */

		/*

		 * Copy page data to the internal buffer.

 Column shouldn't be very large */

		/*

		 * Erase sector.

		/*

		 * Program page - move internal buffer data to the page.

/*

 * Switch simulator's state.

		/*

		 * The current operation have already been identified.

		 * Just follow the states chain.

 See, whether we need to do some action */

		/*

		 * We don't yet know which operation we perform.

		 * Try to identify it.

		/*

		 *  The only event causing the switch_state function to

		 *  be called with yet unknown operation is new command.

 For 16x devices column means the page offset in words */

		/*

		 * The current state is the last. Return to STATE_READY

 In case of data states, see if all bytes were input/output */

		/*

		 * If the next state is data input/output, switch to it now

		/*

		 * Set the internal register to the count of bytes which

		 * are expected to be input or output

		/*

		 * If the next state is address input, set the internal

		 * register to the number of expected address bytes

 Column address is always 2 bytes */

		/*

		 * Just reset internal counters.

 Sanity and correctness checks */

 Status register may be read as many times as it is wanted */

 Check if there is any data in the internal buffer which may be read */

 Sanity and correctness checks */

		/*

		 * The byte written is a command.

 Check that the command byte is correct */

 Check if chip is expecting command */

 Do not warn if only 2 id bytes are read */

				/*

				 * We are in situation when something else (not command)

				 * was expected but command was input. In this case ignore

				 * previous command(s)/state(s) and accept the last one.

		/*

		 * The byte written is an address.

 Check that chip is expecting address */

 Check if this is expected byte */

		/*

		 * The byte written is an input data.

 Check that chip is expecting data input */

 Check if this is expected byte */

 Check that chip is expecting data input */

 Check if these are expected bytes */

 Sanity and correctness checks */

 Check if these are expected bytes */

 we are always ready */

 Use 512-byte ecc blocks */

 Do not bother supporting small page devices */

/*

 * Module initialization function

 The NAND_SKIP_BBTSCAN option is necessary for 'overridesize' */

 and 'badblocks' parameters to work */

	/*

	 * Perform minimum nandsim structure initialization to handle

	 * the initial ID read command correctly

 temporary value */

 N.B. This relies on nand_scan not doing anything with the size before we change it */

 Register NAND partitions */

/*

 * Module clean-up function

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2017 Free Electrons

 * Copyright (C) 2017 NextThing Co

 *

 * Author: Boris Brezillon <boris.brezillon@free-electrons.com>

 RANDEN and RANDOPT OTP bits are programmed */

 Subpage write is prohibited in randomizer operatoin */

/*

 * Macronix AC series does not support using SET/GET_FEATURES to change

 * the timings unlike what is declared in the parameter page. Unflag

 * this feature to avoid unnecessary downturns.

/*

 * Macronix NAND supports Block Protection by Protectoin(PT) pin;

 * active high at power-on which protects the entire chip even the #WP is

 * disabled. Lock/unlock protection area can be partition according to

 * protection bits, i.e. upper 1/2 locked, upper 1/4 locked and so on.

	/*

	 * Toggle #CS pin to resume NAND device and don't care

	 * of the others CLE, #WE, #RE pins status.

	 * A NAND controller ensure it is able to assert/de-assert #CS

	 * by sending any byte over the NAND bus.

	 * i.e.,

	 * NAND power down command or reset command w/o R/B# status checking.

 The minimum of a recovery time tRDP is 35 us */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2017 Free Electrons

 * Copyright (C) 2017 NextThing Co

 *

 * Author: Boris Brezillon <boris.brezillon@free-electrons.com>

 New Samsung (6 byte ID): Samsung K9GAG08U0F (p.44) */

 Get pagesize */

 Get oobsize */

			/*

			 * We should never reach this case, but if that

			 * happens, this probably means Samsung decided to use

			 * a different extended ID format, and we should find

			 * a way to support it.

 Get blocksize */

 Extract ECC requirements from 5th id byte*/

 K9F4G08U0D-S[I|C]B0(T00) */

 K9F1G08U0E 21nm chips do not support subpage write */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Overview:

 *   This is the generic MTD driver for NAND flash devices. It should be

 *   capable of working with almost all NAND chips currently available.

 *

 *	Additional technical information is available on

 *	http://www.linux-mtd.infradead.org/doc/nand.html

 *

 *  Copyright (C) 2000 Steven J. Hill (sjhill@realitydiluted.com)

 *		  2002-2006 Thomas Gleixner (tglx@linutronix.de)

 *

 *  Credits:

 *	David Woodhouse for adding multichip support

 *

 *	Aleph One Ltd. and Toby Churchill Ltd. for supporting the

 *	rework for 2K page size chips

 *

 *  TODO:

 *	Enable cached programming for 2k page size chips

 *	Check, if mtd->ecctype should be set to MTD_ECC_HW

 *	if we have HW ECC support.

 *	BBT table is not serialized, has to be fixed

 Start address must align on block boundary */

 Length must align on block boundary */

/**

 * nand_extract_bits - Copy unaligned bits from one buffer to another one

 * @dst: destination buffer

 * @dst_off: bit offset at which the writing starts

 * @src: source buffer

 * @src_off: bit offset at which the reading starts

 * @nbits: number of bits to copy from @src to @dst

 *

 * Copy bits from one memory region to another (overlap authorized).

/**

 * nand_select_target() - Select a NAND target (A.K.A. die)

 * @chip: NAND chip object

 * @cs: the CS line to select. Note that this CS id is always from the chip

 *	PoV, not the controller one

 *

 * Select a NAND target so that further operations executed on @chip go to the

 * selected NAND target.

	/*

	 * cs should always lie between 0 and nanddev_ntargets(), when that's

	 * not the case it's a bug and the caller should be fixed.

/**

 * nand_deselect_target() - Deselect the currently selected target

 * @chip: NAND chip object

 *

 * Deselect the currently selected NAND target. The result of operations

 * executed on @chip after the target has been deselected is undefined.

/**

 * nand_release_device - [GENERIC] release chip

 * @chip: NAND chip object

 *

 * Release chip lock and wake up anyone waiting on the device.

 Release the controller and the chip */

/**

 * nand_bbm_get_next_page - Get the next page for bad block markers

 * @chip: NAND chip object

 * @page: First page to start checking for bad block marker usage

 *

 * Returns an integer that corresponds to the page offset within a block, for

 * a page that is used to store bad block markers. If no more pages are

 * available, -EINVAL is returned.

/**

 * nand_block_bad - [DEFAULT] Read bad block marker from the chip

 * @chip: NAND chip object

 * @ofs: offset from device start

 *

 * Check, if the block is bad.

/**

 * nand_region_is_secured() - Check if the region is secured

 * @chip: NAND chip object

 * @offset: Offset of the region to check

 * @size: Size of the region to check

 *

 * Checks if the region is secured by comparing the offset and size with the

 * list of secure regions obtained from DT. Returns true if the region is

 * secured else false.

 Skip touching the secure regions if present */

 Check if the region is secured */

/**

 * nand_get_device - [GENERIC] Get chip for selected access

 * @chip: NAND chip structure

 *

 * Lock the device and its controller for exclusive access

 *

 * Return: -EBUSY if the chip has been suspended, 0 otherwise

/**

 * nand_check_wp - [GENERIC] check if the chip is write protected

 * @chip: NAND chip object

 *

 * Check, if the device is write protected. The function expects, that the

 * device is already selected.

 Broken xD cards report WP despite being writable */

 Check the WP bit */

/**

 * nand_fill_oob - [INTERN] Transfer client buffer to oob

 * @chip: NAND chip object

 * @oob: oob data buffer

 * @len: oob data write length

 * @ops: oob ops structure

	/*

	 * Initialise to all 0xFF, to avoid the possibility of left over OOB

	 * data from a previous OOB read.

/**

 * nand_do_write_oob - [MTD Interface] NAND write out-of-band

 * @chip: NAND chip object

 * @to: offset to write to

 * @ops: oob operation description structure

 *

 * NAND write out-of-band.

 Do not allow write past end of page */

 Check if the region is secured */

	/*

	 * Reset the chip. Some chips (like the Toshiba TC5832DC found in one

	 * of my DiskOnChip 2000 test units) will clear the whole data page too

	 * if we don't do this. I have no clue why, but I seem to have 'fixed'

	 * it in the doc2000 driver in August 1999.  dwmw2.

 Shift to get page */

 Check, if it is write protected */

 Invalidate the page cache, if we write to the cached page */

/**

 * nand_default_block_markbad - [DEFAULT] mark a block bad via bad block marker

 * @chip: NAND chip object

 * @ofs: offset from device start

 *

 * This is the default implementation, which can be overridden by a hardware

 * specific driver. It provides the details for writing a bad block marker to a

 * block.

/**

 * nand_markbad_bbm - mark a block by updating the BBM

 * @chip: NAND chip object

 * @ofs: offset of the block to mark bad

/**

 * nand_block_markbad_lowlevel - mark a block bad

 * @chip: NAND chip object

 * @ofs: offset from device start

 *

 * This function performs the generic NAND bad block marking steps (i.e., bad

 * block table(s) and/or marker(s)). We only allow the hardware driver to

 * specify how to write bad block markers to OOB (chip->legacy.block_markbad).

 *

 * We try operations in the following order:

 *

 *  (1) erase the affected block, to allow OOB marker to be written cleanly

 *  (2) write bad block marker to OOB area of affected block (unless flag

 *      NAND_BBT_NO_OOB_BBM is present)

 *  (3) update the BBT

 *

 * Note that we retain the first error encountered in (2) or (3), finish the

 * procedures, and dump the error in the end.

 Attempt erase before marking OOB */

 Write bad block marker to OOB */

 Mark block bad in BBT */

/**

 * nand_block_isreserved - [GENERIC] Check if a block is marked reserved.

 * @mtd: MTD device structure

 * @ofs: offset from device start

 *

 * Check if the block is marked as reserved.

 Return info from the table */

/**

 * nand_block_checkbad - [GENERIC] Check if a block is marked bad

 * @chip: NAND chip object

 * @ofs: offset from device start

 * @allowbbt: 1, if its allowed to access the bbt area

 *

 * Check, if the block is bad. Either by reading the bad block table or

 * calling of the scan function.

 Return info from the table */

/**

 * nand_soft_waitrdy - Poll STATUS reg until RDY bit is set to 1

 * @chip: NAND chip structure

 * @timeout_ms: Timeout in ms

 *

 * Poll the STATUS register using ->exec_op() until the RDY bit becomes 1.

 * If that does not happen whitin the specified timeout, -ETIMEDOUT is

 * returned.

 *

 * This helper is intended to be used when the controller does not have access

 * to the NAND R/B pin.

 *

 * Be aware that calling this helper from an ->exec_op() implementation means

 * ->exec_op() must be re-entrant.

 *

 * Return 0 if the NAND chip is ready, a negative error otherwise.

 Wait tWB before polling the STATUS reg. */

	/*

	 * +1 below is necessary because if we are now in the last fraction

	 * of jiffy and msecs_to_jiffies is 1 then we will wait only that

	 * small jiffy fraction - possibly leading to false timeout

		/*

		 * Typical lowest execution time for a tR on most NANDs is 10us,

		 * use this as polling delay before doing something smarter (ie.

		 * deriving a delay from the timeout value, timeout_ms/ratio).

	/*

	 * We have to exit READ_STATUS mode in order to read real data on the

	 * bus in case the WAITRDY instruction is preceding a DATA_IN

	 * instruction.

/**

 * nand_gpio_waitrdy - Poll R/B GPIO pin until ready

 * @chip: NAND chip structure

 * @gpiod: GPIO descriptor of R/B pin

 * @timeout_ms: Timeout in ms

 *

 * Poll the R/B GPIO pin until it becomes ready. If that does not happen

 * whitin the specified timeout, -ETIMEDOUT is returned.

 *

 * This helper is intended to be used when the controller has access to the

 * NAND R/B pin over GPIO.

 *

 * Return 0 if the R/B pin indicates chip is ready, a negative error otherwise.

	/*

	 * Wait until R/B pin indicates chip is ready or timeout occurs.

	 * +1 below is necessary because if we are now in the last fraction

	 * of jiffy and msecs_to_jiffies is 1 then we will wait only that

	 * small jiffy fraction - possibly leading to false timeout.

/**

 * panic_nand_wait - [GENERIC] wait until the command is done

 * @chip: NAND chip structure

 * @timeo: timeout

 *

 * Wait for command done. This is a helper function for nand_wait used when

 * we are in interrupt context. May happen when in panic and trying to write

 * an oops through mtdoops.

/**

 * nand_reset_interface - Reset data interface and timings

 * @chip: The NAND chip

 * @chipnr: Internal die id

 *

 * Reset the Data interface and timings to ONFI mode 0.

 *

 * Returns 0 for success or negative error code otherwise.

	/*

	 * The ONFI specification says:

	 * "

	 * To transition from NV-DDR or NV-DDR2 to the SDR data

	 * interface, the host shall use the Reset (FFh) command

	 * using SDR timing mode 0. A device in any timing mode is

	 * required to recognize Reset (FFh) command issued in SDR

	 * timing mode 0.

	 * "

	 *

	 * Configure the data interface in SDR mode and set the

	 * timings to timing mode 0.

/**

 * nand_setup_interface - Setup the best data interface and timings

 * @chip: The NAND chip

 * @chipnr: Internal die id

 *

 * Configure what has been reported to be the best data interface and NAND

 * timings supported by the chip and the driver.

 *

 * Returns 0 for success or negative error code otherwise.

	/*

	 * A nand_reset_interface() put both the NAND chip and the NAND

	 * controller in timings mode 0. If the default mode for this chip is

	 * also 0, no need to proceed to the change again. Plus, at probe time,

	 * nand_setup_interface() uses ->set/get_features() which would

	 * fail anyway as the parameter page is not available yet.

 Change the mode on the chip side (if supported by the NAND chip) */

 Change the mode on the controller side */

 Check the mode has been accepted by the chip, if supported */

	/*

	 * Fallback to mode 0 if the chip explicitly did not ack the chosen

	 * timing mode.

/**

 * nand_choose_best_sdr_timings - Pick up the best SDR timings that both the

 *                                NAND controller and the NAND chip support

 * @chip: the NAND chip

 * @iface: the interface configuration (can eventually be updated)

 * @spec_timings: specific timings, when not fitting the ONFI specification

 *

 * If specific timings are provided, use them. Otherwise, retrieve supported

 * timing modes from ONFI information.

 Verify the controller supports the requested interface */

 Fallback to slower modes */

/**

 * nand_choose_best_nvddr_timings - Pick up the best NVDDR timings that both the

 *                                  NAND controller and the NAND chip support

 * @chip: the NAND chip

 * @iface: the interface configuration (can eventually be updated)

 * @spec_timings: specific timings, when not fitting the ONFI specification

 *

 * If specific timings are provided, use them. Otherwise, retrieve supported

 * timing modes from ONFI information.

 Verify the controller supports the requested interface */

 Fallback to slower modes */

/**

 * nand_choose_best_timings - Pick up the best NVDDR or SDR timings that both

 *                            NAND controller and the NAND chip support

 * @chip: the NAND chip

 * @iface: the interface configuration (can eventually be updated)

 *

 * If specific timings are provided, use them. Otherwise, retrieve supported

 * timing modes from ONFI information.

 Try the fastest timings: NV-DDR */

 Fallback to SDR timings otherwise */

/**

 * nand_choose_interface_config - find the best data interface and timings

 * @chip: The NAND chip

 *

 * Find the best data interface and NAND timings supported by the chip

 * and the driver. Eventually let the NAND manufacturer driver propose his own

 * set of timings.

 *

 * After this function nand_chip->interface_config is initialized with the best

 * timing mode available.

 *

 * Returns 0 for success or negative error code otherwise.

/**

 * nand_fill_column_cycles - fill the column cycles of an address

 * @chip: The NAND chip

 * @addrs: Array of address cycles to fill

 * @offset_in_page: The offset in the page

 *

 * Fills the first or the first two bytes of the @addrs field depending

 * on the NAND bus width and the page size.

 *

 * Returns the number of cycles needed to encode the column, or a negative

 * error code in case one of the arguments is invalid.

 Make sure the offset is less than the actual page size. */

	/*

	 * On small page NANDs, there's a dedicated command to access the OOB

	 * area, and the column address is relative to the start of the OOB

	 * area, not the start of the page. Asjust the address accordingly.

	/*

	 * The offset in page is expressed in bytes, if the NAND bus is 16-bit

	 * wide, then it must be divided by 2.

	/*

	 * Small page NANDs use 1 cycle for the columns, while large page NANDs

	 * need 2

 Drop the DATA_IN instruction if len is set to 0. */

 Drop the DATA_IN instruction if len is set to 0. */

/**

 * nand_read_page_op - Do a READ PAGE operation

 * @chip: The NAND chip

 * @page: page to read

 * @offset_in_page: offset within the page

 * @buf: buffer used to store the data

 * @len: length of the buffer

 *

 * This function issues a READ PAGE operation.

 * This function does not select/unselect the CS line.

 *

 * Returns 0 on success, a negative error code otherwise.

/**

 * nand_read_param_page_op - Do a READ PARAMETER PAGE operation

 * @chip: The NAND chip

 * @page: parameter page to read

 * @buf: buffer used to store the data

 * @len: length of the buffer

 *

 * This function issues a READ PARAMETER PAGE operation.

 * This function does not select/unselect the CS line.

 *

 * Returns 0 on success, a negative error code otherwise.

 Drop the DATA_IN instruction if len is set to 0. */

/**

 * nand_change_read_column_op - Do a CHANGE READ COLUMN operation

 * @chip: The NAND chip

 * @offset_in_page: offset within the page

 * @buf: buffer used to store the data

 * @len: length of the buffer

 * @force_8bit: force 8-bit bus access

 *

 * This function issues a CHANGE READ COLUMN operation.

 * This function does not select/unselect the CS line.

 *

 * Returns 0 on success, a negative error code otherwise.

 Small page NANDs do not support column change. */

 Drop the DATA_IN instruction if len is set to 0. */

/**

 * nand_read_oob_op - Do a READ OOB operation

 * @chip: The NAND chip

 * @page: page to read

 * @offset_in_oob: offset within the OOB area

 * @buf: buffer used to store the data

 * @len: length of the buffer

 *

 * This function issues a READ OOB operation.

 * This function does not select/unselect the CS line.

 *

 * Returns 0 on success, a negative error code otherwise.

		/*

		 * The first instruction will be dropped if we're dealing

		 * with a large page NAND and adjusted if we're dealing

		 * with a small page NAND and the page offset is > 255.

 Drop the last two instructions if we're not programming the page. */

 Also drop the DATA_OUT instruction if empty. */

		/*

		 * Small pages need some more tweaking: we have to adjust the

		 * first instruction depending on the page offset we're trying

		 * to access.

		/*

		 * Drop the first command if we're dealing with a large page

		 * NAND.

/**

 * nand_prog_page_begin_op - starts a PROG PAGE operation

 * @chip: The NAND chip

 * @page: page to write

 * @offset_in_page: offset within the page

 * @buf: buffer containing the data to write to the page

 * @len: length of the buffer

 *

 * This function issues the first half of a PROG PAGE operation.

 * This function does not select/unselect the CS line.

 *

 * Returns 0 on success, a negative error code otherwise.

/**

 * nand_prog_page_end_op - ends a PROG PAGE operation

 * @chip: The NAND chip

 *

 * This function issues the second half of a PROG PAGE operation.

 * This function does not select/unselect the CS line.

 *

 * Returns 0 on success, a negative error code otherwise.

/**

 * nand_prog_page_op - Do a full PROG PAGE operation

 * @chip: The NAND chip

 * @page: page to write

 * @offset_in_page: offset within the page

 * @buf: buffer containing the data to write to the page

 * @len: length of the buffer

 *

 * This function issues a full PROG PAGE operation.

 * This function does not select/unselect the CS line.

 *

 * Returns 0 on success, a negative error code otherwise.

/**

 * nand_change_write_column_op - Do a CHANGE WRITE COLUMN operation

 * @chip: The NAND chip

 * @offset_in_page: offset within the page

 * @buf: buffer containing the data to send to the NAND

 * @len: length of the buffer

 * @force_8bit: force 8-bit bus access

 *

 * This function issues a CHANGE WRITE COLUMN operation.

 * This function does not select/unselect the CS line.

 *

 * Returns 0 on success, a negative error code otherwise.

 Small page NANDs do not support column change. */

 Drop the DATA_OUT instruction if len is set to 0. */

/**

 * nand_readid_op - Do a READID operation

 * @chip: The NAND chip

 * @addr: address cycle to pass after the READID command

 * @buf: buffer used to store the ID

 * @len: length of the buffer

 *

 * This function sends a READID command and reads back the ID returned by the

 * NAND.

 * This function does not select/unselect the CS line.

 *

 * Returns 0 on success, a negative error code otherwise.

 READ_ID data bytes are received twice in NV-DDR mode */

 Drop the DATA_IN instruction if len is set to 0. */

/**

 * nand_status_op - Do a STATUS operation

 * @chip: The NAND chip

 * @status: out variable to store the NAND status

 *

 * This function sends a STATUS command and reads back the status returned by

 * the NAND.

 * This function does not select/unselect the CS line.

 *

 * Returns 0 on success, a negative error code otherwise.

 The status data byte will be received twice in NV-DDR mode */

/**

 * nand_exit_status_op - Exit a STATUS operation

 * @chip: The NAND chip

 *

 * This function sends a READ0 command to cancel the effect of the STATUS

 * command to avoid reading only the status until a new read command is sent.

 *

 * This function does not select/unselect the CS line.

 *

 * Returns 0 on success, a negative error code otherwise.

/**

 * nand_erase_op - Do an erase operation

 * @chip: The NAND chip

 * @eraseblock: block to erase

 *

 * This function sends an ERASE command and waits for the NAND to be ready

 * before returning.

 * This function does not select/unselect the CS line.

 *

 * Returns 0 on success, a negative error code otherwise.

/**

 * nand_set_features_op - Do a SET FEATURES operation

 * @chip: The NAND chip

 * @feature: feature id

 * @data: 4 bytes of data

 *

 * This function sends a SET FEATURES command and waits for the NAND to be

 * ready before returning.

 * This function does not select/unselect the CS line.

 *

 * Returns 0 on success, a negative error code otherwise.

/**

 * nand_get_features_op - Do a GET FEATURES operation

 * @chip: The NAND chip

 * @feature: feature id

 * @data: 4 bytes of data

 *

 * This function sends a GET FEATURES command and waits for the NAND to be

 * ready before returning.

 * This function does not select/unselect the CS line.

 *

 * Returns 0 on success, a negative error code otherwise.

 GET_FEATURE data bytes are received twice in NV-DDR mode */

 Apply delay or wait for ready/busy pin */

/**

 * nand_reset_op - Do a reset operation

 * @chip: The NAND chip

 *

 * This function sends a RESET command and waits for the NAND to be ready

 * before returning.

 * This function does not select/unselect the CS line.

 *

 * Returns 0 on success, a negative error code otherwise.

/**

 * nand_read_data_op - Read data from the NAND

 * @chip: The NAND chip

 * @buf: buffer used to store the data

 * @len: length of the buffer

 * @force_8bit: force 8-bit bus access

 * @check_only: do not actually run the command, only checks if the

 *              controller driver supports it

 *

 * This function does a raw data read on the bus. Usually used after launching

 * another NAND operation like nand_read_page_op().

 * This function does not select/unselect the CS line.

 *

 * Returns 0 on success, a negative error code otherwise.

		/*

		 * Parameter payloads (ID, status, features, etc) do not go

		 * through the same pipeline as regular data, hence the

		 * force_8bit flag must be set and this also indicates that in

		 * case NV-DDR timings are being used the data will be received

		 * twice.

/**

 * nand_write_data_op - Write data from the NAND

 * @chip: The NAND chip

 * @buf: buffer containing the data to send on the bus

 * @len: length of the buffer

 * @force_8bit: force 8-bit bus access

 *

 * This function does a raw data write on the bus. Usually used after launching

 * another NAND operation like nand_write_page_begin_op().

 * This function does not select/unselect the CS line.

 *

 * Returns 0 on success, a negative error code otherwise.

/**

 * struct nand_op_parser_ctx - Context used by the parser

 * @instrs: array of all the instructions that must be addressed

 * @ninstrs: length of the @instrs array

 * @subop: Sub-operation to be passed to the NAND controller

 *

 * This structure is used by the core to split NAND operations into

 * sub-operations that can be handled by the NAND controller.

/**

 * nand_op_parser_must_split_instr - Checks if an instruction must be split

 * @pat: the parser pattern element that matches @instr

 * @instr: pointer to the instruction to check

 * @start_offset: this is an in/out parameter. If @instr has already been

 *		  split, then @start_offset is the offset from which to start

 *		  (either an address cycle or an offset in the data buffer).

 *		  Conversely, if the function returns true (ie. instr must be

 *		  split), this parameter is updated to point to the first

 *		  data/address cycle that has not been taken care of.

 *

 * Some NAND controllers are limited and cannot send X address cycles with a

 * unique operation, or cannot read/write more than Y bytes at the same time.

 * In this case, split the instruction that does not fit in a single

 * controller-operation into two or more chunks.

 *

 * Returns true if the instruction must be split, false otherwise.

 * The @start_offset parameter is also updated to the offset at which the next

 * bundle of instruction must start (if an address or a data instruction).

/**

 * nand_op_parser_match_pat - Checks if a pattern matches the instructions

 *			      remaining in the parser context

 * @pat: the pattern to test

 * @ctx: the parser context structure to match with the pattern @pat

 *

 * Check if @pat matches the set or a sub-set of instructions remaining in @ctx.

 * Returns true if this is the case, false ortherwise. When true is returned,

 * @ctx->subop is updated with the set of instructions to be passed to the

 * controller driver.

		/*

		 * The pattern instruction does not match the operation

		 * instruction. If the instruction is marked optional in the

		 * pattern definition, we skip the pattern element and continue

		 * to the next one. If the element is mandatory, there's no

		 * match and we can return false directly.

		/*

		 * Now check the pattern element constraints. If the pattern is

		 * not able to handle the whole instruction in a single step,

		 * we have to split it.

		 * The last_instr_end_off value comes back updated to point to

		 * the position where we have to split the instruction (the

		 * start of the next subop chunk).

	/*

	 * This can happen if all instructions of a pattern are optional.

	 * Still, if there's not at least one instruction handled by this

	 * pattern, this is not a match, and we should try the next one (if

	 * any).

	/*

	 * We had a match on the pattern head, but the pattern may be longer

	 * than the instructions we're asked to execute. We need to make sure

	 * there's no mandatory elements in the pattern tail.

	/*

	 * We have a match: update the subop structure accordingly and return

	 * true.

 NOP */

/**

 * nand_op_parser_exec_op - exec_op parser

 * @chip: the NAND chip

 * @parser: patterns description provided by the controller driver

 * @op: the NAND operation to address

 * @check_only: when true, the function only checks if @op can be handled but

 *		does not execute the operation

 *

 * Helper function designed to ease integration of NAND controller drivers that

 * only support a limited set of instruction sequences. The supported sequences

 * are described in @parser, and the framework takes care of splitting @op into

 * multiple sub-operations (if required) and pass them back to the ->exec()

 * callback of the matching pattern if @check_only is set to false.

 *

 * NAND controller drivers should call this function from their own ->exec_op()

 * implementation.

 *

 * Returns 0 on success, a negative error code otherwise. A failure can be

 * caused by an unsupported operation (none of the supported patterns is able

 * to handle the requested operation), or an error returned by one of the

 * matching pattern->exec() hook.

		/*

		 * Update the context structure by pointing to the start of the

		 * next subop.

/**

 * nand_subop_get_addr_start_off - Get the start offset in an address array

 * @subop: The entire sub-operation

 * @instr_idx: Index of the instruction inside the sub-operation

 *

 * During driver development, one could be tempted to directly use the

 * ->addr.addrs field of address instructions. This is wrong as address

 * instructions might be split.

 *

 * Given an address instruction, returns the offset of the first cycle to issue.

/**

 * nand_subop_get_num_addr_cyc - Get the remaining address cycles to assert

 * @subop: The entire sub-operation

 * @instr_idx: Index of the instruction inside the sub-operation

 *

 * During driver development, one could be tempted to directly use the

 * ->addr->naddrs field of a data instruction. This is wrong as instructions

 * might be split.

 *

 * Given an address instruction, returns the number of address cycle to issue.

/**

 * nand_subop_get_data_start_off - Get the start offset in a data array

 * @subop: The entire sub-operation

 * @instr_idx: Index of the instruction inside the sub-operation

 *

 * During driver development, one could be tempted to directly use the

 * ->data->buf.{in,out} field of data instructions. This is wrong as data

 * instructions might be split.

 *

 * Given a data instruction, returns the offset to start from.

/**

 * nand_subop_get_data_len - Get the number of bytes to retrieve

 * @subop: The entire sub-operation

 * @instr_idx: Index of the instruction inside the sub-operation

 *

 * During driver development, one could be tempted to directly use the

 * ->data->len field of a data instruction. This is wrong as data instructions

 * might be split.

 *

 * Returns the length of the chunk of data to send/receive.

/**

 * nand_reset - Reset and initialize a NAND device

 * @chip: The NAND chip

 * @chipnr: Internal die id

 *

 * Save the timings data structure, then apply SDR timings mode 0 (see

 * nand_reset_interface for details), do the reset operation, and apply

 * back the previous timings.

 *

 * Returns 0 on success, a negative error code otherwise.

	/*

	 * The CS line has to be released before we can apply the new NAND

	 * interface settings, hence this weird nand_select_target()

	 * nand_deselect_target() dance.

/**

 * nand_get_features - wrapper to perform a GET_FEATURE

 * @chip: NAND chip info structure

 * @addr: feature address

 * @subfeature_param: the subfeature parameters, a four bytes array

 *

 * Returns 0 for success, a negative error otherwise. Returns -ENOTSUPP if the

 * operation cannot be handled.

/**

 * nand_set_features - wrapper to perform a SET_FEATURE

 * @chip: NAND chip info structure

 * @addr: feature address

 * @subfeature_param: the subfeature parameters, a four bytes array

 *

 * Returns 0 for success, a negative error otherwise. Returns -ENOTSUPP if the

 * operation cannot be handled.

/**

 * nand_check_erased_buf - check if a buffer contains (almost) only 0xff data

 * @buf: buffer to test

 * @len: buffer length

 * @bitflips_threshold: maximum number of bitflips

 *

 * Check if a buffer contains only 0xff, which means the underlying region

 * has been erased and is ready to be programmed.

 * The bitflips_threshold specify the maximum number of bitflips before

 * considering the region is not erased.

 * Note: The logic of this function has been extracted from the memweight

 * implementation, except that nand_check_erased_buf function exit before

 * testing the whole buffer if the number of bitflips exceed the

 * bitflips_threshold value.

 *

 * Returns a positive number of bitflips less than or equal to

 * bitflips_threshold, or -ERROR_CODE for bitflips in excess of the

 * threshold.

/**

 * nand_check_erased_ecc_chunk - check if an ECC chunk contains (almost) only

 *				 0xff data

 * @data: data buffer to test

 * @datalen: data length

 * @ecc: ECC buffer

 * @ecclen: ECC length

 * @extraoob: extra OOB buffer

 * @extraooblen: extra OOB length

 * @bitflips_threshold: maximum number of bitflips

 *

 * Check if a data buffer and its associated ECC and OOB data contains only

 * 0xff pattern, which means the underlying region has been erased and is

 * ready to be programmed.

 * The bitflips_threshold specify the maximum number of bitflips before

 * considering the region as not erased.

 *

 * Note:

 * 1/ ECC algorithms are working on pre-defined block sizes which are usually

 *    different from the NAND page size. When fixing bitflips, ECC engines will

 *    report the number of errors per chunk, and the NAND core infrastructure

 *    expect you to return the maximum number of bitflips for the whole page.

 *    This is why you should always use this function on a single chunk and

 *    not on the whole page. After checking each chunk you should update your

 *    max_bitflips value accordingly.

 * 2/ When checking for bitflips in erased pages you should not only check

 *    the payload data but also their associated ECC data, because a user might

 *    have programmed almost all bits to 1 but a few. In this case, we

 *    shouldn't consider the chunk as erased, and checking ECC bytes prevent

 *    this case.

 * 3/ The extraoob argument is optional, and should be used if some of your OOB

 *    data are protected by the ECC engine.

 *    It could also be used if you support subpages and want to attach some

 *    extra OOB data to an ECC chunk.

 *

 * Returns a positive number of bitflips less than or equal to

 * bitflips_threshold, or -ERROR_CODE for bitflips in excess of the

 * threshold. In case of success, the passed buffers are filled with 0xff.

/**

 * nand_read_page_raw_notsupp - dummy read raw page function

 * @chip: nand chip info structure

 * @buf: buffer to store read data

 * @oob_required: caller requires OOB data read to chip->oob_poi

 * @page: page number to read

 *

 * Returns -ENOTSUPP unconditionally.

/**

 * nand_read_page_raw - [INTERN] read raw page data without ecc

 * @chip: nand chip info structure

 * @buf: buffer to store read data

 * @oob_required: caller requires OOB data read to chip->oob_poi

 * @page: page number to read

 *

 * Not for syndrome calculating ECC controllers, which use a special oob layout.

/**

 * nand_monolithic_read_page_raw - Monolithic page read in raw mode

 * @chip: NAND chip info structure

 * @buf: buffer to store read data

 * @oob_required: caller requires OOB data read to chip->oob_poi

 * @page: page number to read

 *

 * This is a raw page read, ie. without any error detection/correction.

 * Monolithic means we are requesting all the relevant data (main plus

 * eventually OOB) to be loaded in the NAND cache and sent over the

 * bus (from the NAND chip to the NAND controller) in a single

 * operation. This is an alternative to nand_read_page_raw(), which

 * first reads the main data, and if the OOB data is requested too,

 * then reads more data on the bus.

/**

 * nand_read_page_raw_syndrome - [INTERN] read raw page data without ecc

 * @chip: nand chip info structure

 * @buf: buffer to store read data

 * @oob_required: caller requires OOB data read to chip->oob_poi

 * @page: page number to read

 *

 * We need a special oob layout and handling even when OOB isn't used.

/**

 * nand_read_page_swecc - [REPLACEABLE] software ECC based page read function

 * @chip: nand chip info structure

 * @buf: buffer to store read data

 * @oob_required: caller requires OOB data read to chip->oob_poi

 * @page: page number to read

/**

 * nand_read_subpage - [REPLACEABLE] ECC based sub-page read function

 * @chip: nand chip info structure

 * @data_offs: offset of requested data within the page

 * @readlen: data length

 * @bufpoi: buffer to store read data

 * @page: page number to read

 Column address within the page aligned to ECC size (256bytes) */

 Data size aligned to ECC ecc.size */

 If we read not a page aligned data */

 Calculate ECC */

	/*

	 * The performance is faster if we position offsets according to

	 * ecc.pos. Let's make sure that there are no gaps in ECC positions.

		/*

		 * Send the command to read the particular ECC bytes take care

		 * about buswidth alignment in read_buf.

 check for empty pages with bitflips */

/**

 * nand_read_page_hwecc - [REPLACEABLE] hardware ECC based page read function

 * @chip: nand chip info structure

 * @buf: buffer to store read data

 * @oob_required: caller requires OOB data read to chip->oob_poi

 * @page: page number to read

 *

 * Not for syndrome calculating ECC controllers which need a special oob layout.

 check for empty pages with bitflips */

/**

 * nand_read_page_syndrome - [REPLACEABLE] hardware ECC syndrome based page read

 * @chip: nand chip info structure

 * @buf: buffer to store read data

 * @oob_required: caller requires OOB data read to chip->oob_poi

 * @page: page number to read

 *

 * The hw generator calculates the error syndrome automatically. Therefore we

 * need a special oob layout and handling.

 check for empty pages with bitflips */

 Calculate remaining oob bytes */

/**

 * nand_transfer_oob - [INTERN] Transfer oob to client buffer

 * @chip: NAND chip object

 * @oob: oob destination address

 * @ops: oob ops structure

 * @len: size of oob to transfer

/**

 * nand_setup_read_retry - [INTERN] Set the READ RETRY mode

 * @chip: NAND chip object

 * @retry_mode: the retry mode to use

 *

 * Some vendors supply a special command to shift the Vt threshold, to be used

 * when there are too many bitflips in a page (i.e., ECC error). After setting

 * a new threshold, the host should retry reading the page.

/**

 * nand_do_read_ops - [INTERN] Read data with ECC

 * @chip: NAND chip object

 * @from: offset to read from

 * @ops: oob ops structure

 *

 * Internal function. Called with chip held.

 Check if the region is secured */

 Is the current page in the buffer? */

			/*

			 * Now read the page into the buffer.  Absent an error,

			 * the read methods return max bitflips per ecc step.

 Invalidate page cache */

			/*

			 * Copy back the data in the initial buffer when reading

			 * partial pages or when a bounce buffer is required.

 Invalidate page cache */

 Reset ecc_stats; retry */

 No more retry modes; real failure */

 Reset to retry mode 0 */

 For subsequent reads align to page boundary */

 Increment page address */

 Check, if we cross a chip boundary */

/**

 * nand_read_oob_std - [REPLACEABLE] the most common OOB data read function

 * @chip: nand chip info structure

 * @page: page number to read

/**

 * nand_read_oob_syndrome - [REPLACEABLE] OOB data read function for HW ECC

 *			    with syndromes

 * @chip: nand chip info structure

 * @page: page number to read

/**

 * nand_write_oob_std - [REPLACEABLE] the most common OOB data write function

 * @chip: nand chip info structure

 * @page: page number to write

/**

 * nand_write_oob_syndrome - [REPLACEABLE] OOB data write function for HW ECC

 *			     with syndrome - only for large page flash

 * @chip: nand chip info structure

 * @page: page number to write

	/*

	 * data-ecc-data-ecc ... ecc-oob

	 * or

	 * data-pad-ecc-pad-data-pad .... ecc-pad-oob

/**

 * nand_do_read_oob - [INTERN] NAND read out-of-band

 * @chip: NAND chip object

 * @from: offset to read from

 * @ops: oob operations description structure

 *

 * NAND read out-of-band data from the spare area.

 Check if the region is secured */

 Shift to get page */

 Increment page address */

 Check, if we cross a chip boundary */

/**

 * nand_read_oob - [MTD Interface] NAND read data and/or out-of-band

 * @mtd: MTD device structure

 * @from: offset to read from

 * @ops: oob operation description structure

 *

 * NAND read data and/or out-of-band data.

/**

 * nand_write_page_raw_notsupp - dummy raw page write function

 * @chip: nand chip info structure

 * @buf: data buffer

 * @oob_required: must write chip->oob_poi to OOB

 * @page: page number to write

 *

 * Returns -ENOTSUPP unconditionally.

/**

 * nand_write_page_raw - [INTERN] raw page write function

 * @chip: nand chip info structure

 * @buf: data buffer

 * @oob_required: must write chip->oob_poi to OOB

 * @page: page number to write

 *

 * Not for syndrome calculating ECC controllers, which use a special oob layout.

/**

 * nand_monolithic_write_page_raw - Monolithic page write in raw mode

 * @chip: NAND chip info structure

 * @buf: data buffer to write

 * @oob_required: must write chip->oob_poi to OOB

 * @page: page number to write

 *

 * This is a raw page write, ie. without any error detection/correction.

 * Monolithic means we are requesting all the relevant data (main plus

 * eventually OOB) to be sent over the bus and effectively programmed

 * into the NAND chip arrays in a single operation. This is an

 * alternative to nand_write_page_raw(), which first sends the main

 * data, then eventually send the OOB data by latching more data

 * cycles on the NAND bus, and finally sends the program command to

 * synchronyze the NAND chip cache.

/**

 * nand_write_page_raw_syndrome - [INTERN] raw page write function

 * @chip: nand chip info structure

 * @buf: data buffer

 * @oob_required: must write chip->oob_poi to OOB

 * @page: page number to write

 *

 * We need a special oob layout and handling even when ECC isn't checked.

/**

 * nand_write_page_swecc - [REPLACEABLE] software ECC based page write function

 * @chip: nand chip info structure

 * @buf: data buffer

 * @oob_required: must write chip->oob_poi to OOB

 * @page: page number to write

 Software ECC calculation */

/**

 * nand_write_page_hwecc - [REPLACEABLE] hardware ECC based page write function

 * @chip: nand chip info structure

 * @buf: data buffer

 * @oob_required: must write chip->oob_poi to OOB

 * @page: page number to write

/**

 * nand_write_subpage_hwecc - [REPLACEABLE] hardware ECC based subpage write

 * @chip:	nand chip info structure

 * @offset:	column address of subpage within the page

 * @data_len:	data length

 * @buf:	data buffer

 * @oob_required: must write chip->oob_poi to OOB

 * @page: page number to write

 configure controller for WRITE access */

 write data (untouched subpages already masked by 0xFF) */

 mask ECC of un-touched subpages by padding 0xFF */

 mask OOB of un-touched subpages by padding 0xFF */

 if oob_required, preserve OOB metadata of written subpage */

 copy calculated ECC for whole page to chip->buffer->oob */

 this include masked-value(0xFF) for unwritten subpages */

 write OOB buffer to NAND device */

/**

 * nand_write_page_syndrome - [REPLACEABLE] hardware ECC syndrome based page write

 * @chip: nand chip info structure

 * @buf: data buffer

 * @oob_required: must write chip->oob_poi to OOB

 * @page: page number to write

 *

 * The hw generator calculates the error syndrome automatically. Therefore we

 * need a special oob layout and handling.

 Calculate remaining oob bytes */

/**

 * nand_write_page - write one page

 * @chip: NAND chip descriptor

 * @offset: address offset within the page

 * @data_len: length of actual data to be written

 * @buf: the data to write

 * @oob_required: must write chip->oob_poi to OOB

 * @page: page number to write

 * @raw: use _raw version of write_page

/**

 * nand_do_write_ops - [INTERN] NAND write with ECC

 * @chip: NAND chip object

 * @to: offset to write to

 * @ops: oob operations description structure

 *

 * NAND write with ECC.

 Reject writes, which are not page aligned */

 Check if the region is secured */

 Check, if it is write protected */

 Invalidate the page cache, when we write to the cached page */

 Don't allow multipage oob writes with offset */

		/*

		 * Copy the data from the initial buffer when doing partial page

		 * writes or when a bounce buffer is required.

 We still need to erase leftover OOB data */

 Check, if we cross a chip boundary */

/**

 * panic_nand_write - [MTD Interface] NAND write with ECC

 * @mtd: MTD device structure

 * @to: offset to write to

 * @len: number of bytes to write

 * @retlen: pointer to variable to store the number of written bytes

 * @buf: the data to write

 *

 * NAND write with ECC. Used when performing writes in interrupt context, this

 * may for example be called by mtdoops when writing an oops while in panic.

 Wait for the device to get ready */

/**

 * nand_write_oob - [MTD Interface] NAND write data and/or out-of-band

 * @mtd: MTD device structure

 * @to: offset to write to

 * @ops: oob operation description structure

/**

 * nand_erase - [MTD Interface] erase block(s)

 * @mtd: MTD device structure

 * @instr: erase instruction

 *

 * Erase one ore more blocks.

/**

 * nand_erase_nand - [INTERN] erase block(s)

 * @chip: NAND chip object

 * @instr: erase instruction

 * @allowbbt: allow erasing the bbt area

 *

 * Erase one ore more blocks.

 Check if the region is secured */

 Grab the lock and see if the device is available */

 Shift to get first page */

 Calculate pages in each block */

 Select the NAND device */

 Check, if it is write protected */

 Loop through the pages */

 Check if we have a bad block, we do not erase bad blocks! */

		/*

		 * Invalidate the page cache, if we erase the block which

		 * contains the current cached page.

 Increment page address and decrement length */

 Check, if we cross a chip boundary */

 Deselect and wake up anyone waiting on the device */

 Return more or less happy */

/**

 * nand_sync - [MTD Interface] sync

 * @mtd: MTD device structure

 *

 * Sync is actually a wait for chip ready function.

 Grab the lock and see if the device is available */

 Release it and go back */

/**

 * nand_block_isbad - [MTD Interface] Check if block at offset is bad

 * @mtd: MTD device structure

 * @offs: offset relative to mtd start

 Select the NAND device */

/**

 * nand_block_markbad - [MTD Interface] Mark block at the given offset as bad

 * @mtd: MTD device structure

 * @ofs: offset relative to mtd start

 If it was bad already, return success and do nothing */

/**

 * nand_suspend - [MTD Interface] Suspend the NAND flash

 * @mtd: MTD device structure

 *

 * Returns 0 for success or negative error code otherwise.

/**

 * nand_resume - [MTD Interface] Resume the NAND flash

 * @mtd: MTD device structure

/**

 * nand_shutdown - [MTD Interface] Finish the current NAND operation and

 *                 prevent further operations

 * @mtd: MTD device structure

/**

 * nand_lock - [MTD Interface] Lock the NAND flash

 * @mtd: MTD device structure

 * @ofs: offset byte address

 * @len: number of bytes to lock (must be a multiple of block/page size)

/**

 * nand_unlock - [MTD Interface] Unlock the NAND flash

 * @mtd: MTD device structure

 * @ofs: offset byte address

 * @len: number of bytes to unlock (must be a multiple of block/page size)

 Set default functions */

 If no controller is provided, use the dummy, legacy one. */

 Sanitize ONFI strings so we can safely print them */

 Null terminate */

 Remove non printable chars */

 Remove trailing spaces */

/*

 * nand_id_has_period - Check if an ID string has a given wraparound period

 * @id_data: the ID string

 * @arrlen: the length of the @id_data array

 * @period: the period of repitition

 *

 * Check if an ID string is repeated within a given sequence of bytes at

 * specific repetition interval period (e.g., {0x20,0x01,0x7F,0x20} has a

 * period of 3). This is a helper function for nand_id_len(). Returns non-zero

 * if the repetition has a period of @period; otherwise, returns zero.

/*

 * nand_id_len - Get the length of an ID string returned by CMD_READID

 * @id_data: the ID string

 * @arrlen: the length of the @id_data array



 * Returns the length of the ID string, according to known wraparound/trailing

 * zero patterns. If no pattern exists, returns the length of the array.

 Find last non-zero byte */

 All zeros */

 Calculate wraparound period */

 There's a repeated pattern */

 There are trailing zeros */

 No pattern detected */

 Extract the bits of per cell from the 3rd byte of the extended ID */

/*

 * Many new NAND share similar device ID codes, which represent the size of the

 * chip. The rest of the parameters must be decoded according to generic or

 * manufacturer-specific "extended ID" decoding patterns.

 The 3rd id byte holds MLC / multichip data */

 The 4th id byte is the important one */

 Calc pagesize */

 Calc oobsize */

 Calc blocksize. Blocksize is multiples of 64KiB */

 Get buswidth information */

/*

 * Old devices have chip data hardcoded in the device ID table. nand_decode_id

 * decodes a matching ID table entry and assigns the MTD size parameters for

 * the chip.

 All legacy ID NAND are small-page, SLC */

/*

 * Set the bad block marker/indicator (BBM/BBI) patterns according to some

 * heuristic patterns using various detected parameters (e.g., manufacturer,

 * page size, cell-type information).

 Set the bad block position */

/*

 * Manufacturer detection. Only used when the NAND is not ONFI or JEDEC

 * compliant and does not have a full-id or legacy-id entry in the nand_ids

 * table.

	/*

	 * Try manufacturer detection if available and use

	 * nand_decode_ext_id() otherwise.

 The 3rd id byte holds MLC / multichip data */

/*

 * Manufacturer initialization. This function is called for all NANDs including

 * ONFI and JEDEC compliant ones.

 * Manufacturer drivers should put all their specific initialization code in

 * their ->init() hook.

/*

 * Manufacturer cleanup. This function is called for all NANDs including

 * ONFI and JEDEC compliant ones.

 * Manufacturer drivers should put all their specific cleanup code in their

 * ->cleanup() hook.

 Release manufacturer private data */

/*

 * Get the flash and manufacturer id and lookup if the type is supported.

	/*

	 * Let's start by initializing memorg fields that might be left

	 * unassigned by the ID-based detection logic.

	/*

	 * Reset the chip, required by some chips (e.g. Micron MT29FxGxxxxx)

	 * after power-up.

 Select the device */

 Send the command for reading device ID */

 Read manufacturer and device IDs */

	/*

	 * Try again to make sure, as some systems the bus-hold or other

	 * interface concerns can cause random data which looks like a

	 * possibly credible NAND flash to appear. If the two results do

	 * not match, ignore the device completely.

 Read entire ID string */

 Try to identify manufacturer */

	/*

	 * Save the NAND_BUSWIDTH_16 flag before letting auto-detection logic

	 * override it.

	 * This is required to make sure initial NAND bus width set by the

	 * NAND controller driver is coherent with the real NAND bus width

	 * (extracted by auto-detection code).

	/*

	 * The flag is only set (never cleared), reset it to its default value

	 * before starting auto-detection.

 Check if the chip is ONFI compliant */

 Check if the chip is JEDEC compliant */

 Get chip options */

		/*

		 * Check, if buswidth is correct. Hardware drivers should set

		 * chip correct!

 Calculate the address shift from the page size */

 Convert chipsize to number of pages per chip -1 */

 Only proceed if the "secure-regions" property is present in DT */

/**

 * rawnand_dt_parse_gpio_cs - Parse the gpio-cs property of a controller

 * @dev: Device that will be parsed. Also used for managed allocations.

 * @cs_array: Array of GPIO desc pointers allocated on success

 * @ncs_array: Number of entries in @cs_array updated on success.

 * @return 0 on success, an error otherwise.

	/*

	 * If neither the user nor the NAND controller have requested a specific

	 * ECC engine type, we will default to NAND_ECC_ENGINE_TYPE_ON_HOST.

	/*

	 * Use the user requested engine type, unless there is none, in this

	 * case default to the NAND controller choice, otherwise fallback to

	 * the raw NAND default one.

/**

 * nand_scan_ident - Scan for the NAND device

 * @chip: NAND chip object

 * @maxchips: number of chips to scan for

 * @table: alternative NAND ID table

 *

 * This is the first phase of the normal nand_scan() function. It reads the

 * flash ID and sets up MTD fields accordingly.

 *

 * This helper used to be called directly from controller drivers that needed

 * to tweak some ECC-related parameters before nand_scan_tail(). This separation

 * prevented dynamic allocations during this phase which was unconvenient and

 * as been banned for the benefit of the ->init_ecc()/cleanup_ecc() hooks.

 Assume all dies are deselected when we enter nand_scan_ident(). */

 Enforce the right timings for reset/detection */

 Set the default functions */

 Read the flash type */

 Check for a chip array */

 See comment in nand_get_flash_type for reset */

 Send the command for reading device ID */

 Read manufacturer and device IDs */

 Store the number of chips and calc total size for mtd */

 Use standard hwecc read page function? */

 Use standard syndrome read/write page function? */

		/*

		 * We can only maximize ECC config when the default layout is

		 * used, otherwise we don't know how many bytes can really be

		 * used.

/**

 * nand_check_ecc_caps - check the sanity of preset ECC settings

 * @chip: nand chip info structure

 * @caps: ECC caps info structure

 * @oobavail: OOB size that the ECC engine can use

 *

 * When ECC step size and strength are already set, check if they are supported

 * by the controller and the calculated ECC bytes fit within the chip's OOB.

 * On success, the calculated ECC bytes is set.

/**

 * nand_match_ecc_req - meet the chip's requirement with least ECC bytes

 * @chip: nand chip info structure

 * @caps: ECC engine caps info structure

 * @oobavail: OOB size that the ECC engine can use

 *

 * If a chip's ECC requirement is provided, try to meet it with the least

 * number of ECC bytes (i.e. with the largest number of OOB-free bytes).

 * On success, the chosen ECC settings are set.

 No information provided by the NAND chip */

 number of correctable bits the chip requires in a page */

			/*

			 * If both step size and strength are smaller than the

			 * chip's requirement, it is not easy to compare the

			 * resulted reliability.

			/*

			 * We assume the best is to meet the chip's requrement

			 * with the least number of ECC bytes.

/**

 * nand_maximize_ecc - choose the max ECC strength available

 * @chip: nand chip info structure

 * @caps: ECC engine caps info structure

 * @oobavail: OOB size that the ECC engine can use

 *

 * Choose the max ECC strength that is supported on the controller, and can fit

 * within the chip's OOB.  On success, the chosen ECC settings are set.

 If chip->ecc.size is already set, respect it */

			/*

			 * If the number of correctable bits is the same,

			 * bigger step_size has more reliability.

/**

 * nand_ecc_choose_conf - Set the ECC strength and ECC step size

 * @chip: nand chip info structure

 * @caps: ECC engine caps info structure

 * @oobavail: OOB size that the ECC engine can use

 *

 * Choose the ECC configuration according to following logic.

 *

 * 1. If both ECC step size and ECC strength are already set (usually by DT)

 *    then check if it is supported by this controller.

 * 2. If the user provided the nand-ecc-maximize property, then select maximum

 *    ECC strength.

 * 3. Otherwise, try to match the ECC step size and ECC strength closest

 *    to the chip's requirement. If available OOB size can't fit the chip

 *    requirement then fallback to the maximum ECC step size and ECC strength.

 *

 * On success, the chosen ECC settings are set.

/**

 * nand_scan_tail - Scan for the NAND device

 * @chip: NAND chip object

 *

 * This is the second phase of the normal nand_scan() function. It fills out

 * all the uninitialized function pointers with the defaults and scans for a

 * bad block table if appropriate.

 New bad blocks should be marked in OOB, flash-based BBT, or both */

	/*

	 * FIXME: some NAND manufacturer drivers expect the first die to be

	 * selected when manufacturer->init() is called. They should be fixed

	 * to explictly select the relevant die when interacting with the NAND

	 * chip.

 Set the internal oob buffer location, just after the page data */

	/*

	 * If no default placement scheme is given, select an appropriate one.

			/*

			 * Expose the whole OOB area to users if ECC_NONE

			 * is passed. We could do that for all kind of

			 * ->oobsize, but we must keep the old large/small

			 * page with ECC layout when ->oobsize <= 128 for

			 * compatibility reasons.

	/*

	 * Check ECC mode, default to software if 3byte/512byte hardware ECC is

	 * selected and we have 256 byte pagesize fallback to software ECC

 For many systems, the standard OOB write also works for raw */

 propagate ecc info to mtd_info */

	/*

	 * Set the number of read / write steps for one page depending on ECC

	 * mode.

	/*

	 * The number of bytes available for a client to place data into

	 * the out of band area.

 ECC sanity check: warn if it's too weak */

 Allow subpage writes up to ecc.steps. Not possible for MLC flash */

 Invalidate the pagebuffer reference */

 Large page NAND with SOFT_ECC should support subpage reads */

 Adjust the MTD_CAP_ flags when NAND_ROM is set. */

 Fill in remaining MTD driver data */

	/*

	 * Initialize bitflip_threshold to its default prior scan_bbt() call.

	 * scan_bbt() might invoke mtd_read(), thus bitflip_threshold must be

	 * properly set.

 Find the fastest data interface for this chip */

 Enter fastest possible mode on all dies. */

	/*

	 * Look for secure regions in the NAND chip. These regions are supposed

	 * to be protected by a secure element like Trustzone. So the read/write

	 * accesses to these regions will be blocked in the runtime by this

	 * driver.

 Check, if we should skip the bad block table scan */

 Build bad block table */

/**

 * nand_scan_with_ids - [NAND Interface] Scan for the NAND device

 * @chip: NAND chip object

 * @maxchips: number of chips to scan for.

 * @ids: optional flash IDs table

 *

 * This fills out all the uninitialized function pointers with the defaults.

 * The flash ID is read and the mtd/chip structures are filled with the

 * appropriate values.

/**

 * nand_cleanup - [NAND Interface] Free resources held by the NAND device

 * @chip: NAND chip object

 Free secure regions data */

 Free bad block table memory */

 Free bad block descriptor memory */

 Free the data interface */

 Free manufacturer priv data. */

 Free controller specific allocations after chip identification */

 Free identification phase allocations */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright © 2004 Texas Instruments, Jian Zhang <jzhang@ti.com>

 * Copyright © 2004 Micron Technology Inc.

 * Copyright © 2004 David Brownell

 4 bit padding to make byte aligned, 56 = 52 + 4 */

 GPMC ecc engine settings for read */

 BCH wrap mode 1 */

 ecc_size0 = 26 */

 ecc_size1 = 2 */

 ecc_size0 = 13 */

 ecc_size1 = 3 */

 GPMC ecc engine settings for write */

 BCH wrap mode 6 */

 ecc_size0 = 0, no oob protection */

 ecc_size1 = 32 */

 read */

 write */

 Interface to GPMC */

 fields specific for BCHx_HW ECC scheme */

 NAND ready gpio */

/**

 * omap_prefetch_enable - configures and starts prefetch transfer

 * @cs: cs (chip select) number

 * @fifo_th: fifo threshold to be used for read/ write

 * @dma_mode: dma mode enable (1) or disable (0)

 * @u32_count: number of bytes to be transferred

 * @is_write: prefetch read(0) or write post(1) mode

 * @info: NAND device structure containing platform data

 Set the amount of bytes to be prefetched */

	/* Set dma/mpu mode, the prefetch read / post write and

	 * enable the engine. Set which cs is has requested for.

  Start the prefetch engine */

/*

 * omap_prefetch_reset - disables and stops the prefetch engine

 check if the same module/cs is trying to reset */

 Stop the PFPW engine */

 Reset/disable the PFPW engine */

/**

 * omap_hwcontrol - hardware specific access to control-lines

 * @chip: NAND chip object

 * @cmd: command to device

 * @ctrl:

 * NAND_NCE: bit 0 -> don't care

 * NAND_CLE: bit 1 -> Command Latch

 * NAND_ALE: bit 2 -> Address Latch

 *

 * NOTE: boards may use different bits for these!!

 NAND_NCE */

/**

 * omap_read_buf8 - read data from NAND controller into buffer

 * @mtd: MTD device structure

 * @buf: buffer to store date

 * @len: number of bytes to read

/**

 * omap_write_buf8 - write buffer to NAND controller

 * @mtd: MTD device structure

 * @buf: data buffer

 * @len: number of bytes to write

 wait until buffer is available for write */

/**

 * omap_read_buf16 - read data from NAND controller into buffer

 * @mtd: MTD device structure

 * @buf: buffer to store date

 * @len: number of bytes to read

/**

 * omap_write_buf16 - write buffer to NAND controller

 * @mtd: MTD device structure

 * @buf: data buffer

 * @len: number of bytes to write

 FIXME try bursts of writesw() or DMA ... */

 wait until buffer is available for write */

/**

 * omap_read_buf_pref - read data from NAND controller into buffer

 * @chip: NAND chip object

 * @buf: buffer to store date

 * @len: number of bytes to read

 take care of subpage reads */

 configure and start prefetch transfer */

 PFPW engine is busy, use cpu copy method */

 disable and stop the PFPW engine */

/**

 * omap_write_buf_pref - write buffer to NAND controller

 * @chip: NAND chip object

 * @buf: data buffer

 * @len: number of bytes to write

 take care of subpage writes */

  configure and start prefetch transfer */

 PFPW engine is busy, use cpu copy method */

 wait for data to flushed-out before reset the prefetch */

 disable and stop the PFPW engine */

/*

 * omap_nand_dma_callback: callback on the completion of dma transfer

 * @data: pointer to completion data structure

/*

 * omap_nand_dma_transfer: configure and start dma transfer

 * @mtd: MTD device structure

 * @addr: virtual address in RAM of source/destination

 * @len: number of data bytes to be transferred

 * @is_write: flag for read/write operation

 setup and start DMA using dma_addr */

  configure and start prefetch transfer */

 PFPW engine is busy, use cpu copy method */

 disable and stop the PFPW engine */

/**

 * omap_read_buf_dma_pref - read data from NAND controller into buffer

 * @chip: NAND chip object

 * @buf: buffer to store date

 * @len: number of bytes to read

 start transfer in DMA mode */

/**

 * omap_write_buf_dma_pref - write buffer to NAND controller

 * @chip: NAND chip object

 * @buf: data buffer

 * @len: number of bytes to write

 start transfer in DMA mode */

/*

 * omap_nand_irq - GPMC irq handler

 * @this_irq: gpmc irq number

 * @dev: omap_nand_info structure pointer is passed here

 io in multiple of 4 bytes */

 checks for write io */

/*

 * omap_read_buf_irq_pref - read data from NAND controller into buffer

 * @chip: NAND chip object

 * @buf: buffer to store date

 * @len: number of bytes to read

  configure and start prefetch transfer */

 PFPW engine is busy, use cpu copy method */

 waiting for read to complete */

 disable and stop the PFPW engine */

/*

 * omap_write_buf_irq_pref - write buffer to NAND controller

 * @chip: NAND chip object

 * @buf: data buffer

 * @len: number of bytes to write

 configure and start prefetch transfer : size=24 */

 PFPW engine is busy, use cpu copy method */

 waiting for write to complete */

 wait for data to flushed-out before reset the prefetch */

 disable and stop the PFPW engine */

/**

 * gen_true_ecc - This function will generate true ECC value

 * @ecc_buf: buffer to store ecc code

 *

 * This generated true ECC value can be used when correcting

 * data read from NAND flash memory core

/**

 * omap_compare_ecc - Detect (2 bits) and correct (1 bit) error in data

 * @ecc_data1:  ecc code from nand spare area

 * @ecc_data2:  ecc code from hardware register obtained from hardware ecc

 * @page_data:  page data

 *

 * This function compares two ECC's and indicates if there is an error.

 * If the error can be corrected it will be corrected to the buffer.

 * If there is no error, %0 is returned. If there is an error but it

 * was corrected, %1 is returned. Otherwise, %-1 is returned.

 read from NAND memory */

 read from register */

		/* Not reached because this function is not called if

		 *  ECC values are equal

 Uncorrectable error */

 UN-Correctable error */

 Correctable error */

/**

 * omap_correct_data - Compares the ECC read with HW generated ECC

 * @chip: NAND chip object

 * @dat: page data

 * @read_ecc: ecc read from nand flash

 * @calc_ecc: ecc read from HW ECC registers

 *

 * Compares the ecc read from nand spare area with ECC registers values

 * and if ECC's mismatched, it will call 'omap_compare_ecc' for error

 * detection and correction. If there are no errors, %0 is returned. If

 * there were errors and all of the errors were corrected, the number of

 * corrected errors is returned. If uncorrectable errors exist, %-1 is

 * returned.

 Ex NAND_ECC_HW12_2048 */

 keep track of the number of corrected errors */

/**

 * omap_calculate_ecc - Generate non-inverted ECC bytes.

 * @chip: NAND chip object

 * @dat: The pointer to data on which ecc is computed

 * @ecc_code: The ecc_code buffer

 *

 * Using noninverted ECC can be considered ugly since writing a blank

 * page ie. padding will clear the ECC bytes. This is no problem as long

 * nobody is trying to write data on the seemingly unused page. Reading

 * an erased page will produce an ECC mismatch between generated and read

 * ECC bytes that has to be dealt with separately.

 read ecc result */

 P128e, ..., P1e */

 P128o, ..., P1o */

 P2048o, P1024o, P512o, P256o, P2048e, P1024e, P512e, P256e */

/**

 * omap_enable_hwecc - This function enables the hardware ecc functionality

 * @chip: NAND chip object

 * @mode: Read/Write mode

 clear ecc and enable bits */

 program ecc and result sizes */

 (ECC 16 or 8 bit col) | ( CS  )  | ECC Enable */

/**

 * omap_wait - wait until the command is done

 * @this: NAND Chip structure

 *

 * Wait function is called during Program and erase operations and

 * the way it is called from MTD layer, we should wait till the NAND

 * chip is ready after the programming/erase operation has completed.

 *

 * Erase can take up to 400ms and program up to 20ms according to

 * general NAND and SmartMedia specs

/**

 * omap_dev_ready - checks the NAND Ready GPIO line

 * @chip: NAND chip object

 *

 * Returns true if ready and false if busy.

/**

 * omap_enable_hwecc_bch - Program GPMC to perform BCH ECC calculation

 * @chip: NAND chip object

 * @mode: Read/Write mode

 *

 * When using BCH with SW correction (i.e. no ELM), sector size is set

 * to 512 bytes and we use BCH_WRAPMODE_6 wrapping mode

 * for both reading and writing with:

 * eccsize0 = 0  (no additional protected byte in spare area)

 * eccsize1 = 32 (skip 32 nibbles = 16 bytes per sector in spare area)

 GPMC configurations for calculating ECC */

 ECC bits in nibbles per sector */

 non-ECC bits in nibbles per sector */

 extra bits in nibbles per sector */

 OOB bits in nibbles per sector */

 Configure ecc size for BCH */

 BCH configuration */

 enable BCH */

 BCH4/BCH8/BCH16 */

 wrap mode */

 bus width */

 number of sectors */

 ECC CS */

 enable ECC */

 Clear ecc and enable bits */

/**

 * _omap_calculate_ecc_bch - Generate ECC bytes for one sector

 * @mtd:	MTD device structure

 * @dat:	The pointer to data on which ecc is computed

 * @ecc_calc:	The ecc_code buffer

 * @i:		The sector number (for a multi sector page)

 *

 * Support calculating of BCH4/8/16 ECC vectors for one sector

 * within a page. Sector number is in @i.

 ECC scheme specific syndrome customizations */

		/* Add constant polynomial to remainder, so that

		 * ECC of blank pages results in 0x0 on reading back

 Set  8th ECC byte as 0x0 for ROM compatibility */

		/* Add constant polynomial to remainder, so that

		 * ECC of blank pages results in 0x0 on reading back

 Set 14th ECC byte as 0x0 for ROM compatibility */

/**

 * omap_calculate_ecc_bch_sw - ECC generator for sector for SW based correction

 * @chip:	NAND chip object

 * @dat:	The pointer to data on which ecc is computed

 * @ecc_calc:	Buffer storing the calculated ECC bytes

 *

 * Support calculating of BCH4/8/16 ECC vectors for one sector. This is used

 * when SW based correction is required as ECC is required for one sector

 * at a time.

/**

 * omap_calculate_ecc_bch_multi - Generate ECC for multiple sectors

 * @mtd:	MTD device structure

 * @dat:	The pointer to data on which ecc is computed

 * @ecc_calc:	Buffer storing the calculated ECC bytes

 *

 * Support calculating of BCH4/8/16 ecc vectors for the entire page in one go.

/**

 * erased_sector_bitflips - count bit flips

 * @data:	data sector buffer

 * @oob:	oob buffer

 * @info:	omap_nand_info

 *

 * Check the bit flips in erased page falls below correctable level.

 * If falls below, report the page as erased with correctable bit

 * flip, else report as uncorrectable page.

	/*

	 * Bit flips falls in correctable level.

	 * Fill data area with 0xFF

/**

 * omap_elm_correct_data - corrects page data area in case error reported

 * @chip:	NAND chip object

 * @data:	page data

 * @read_ecc:	ecc read from nand flash

 * @calc_ecc:	ecc read from HW ECC registers

 *

 * Calculated ecc vector reported as zero in case of non-error pages.

 * In case of non-zero ecc vector, first filter out erased-pages, and

 * then process data via ELM to detect bit-flips.

 omit  7th ECC byte reserved for ROM code compatibility */

 omit 14th ECC byte reserved for ROM code compatibility */

 Initialize elm error vector to zero */

 initialize eccflag */

		/*

		 * Check any error reported,

		 * In case of error, non zero ecc reported.

 non zero ecc, error present */

				/*

				 * calc_ecc[] matches pattern for ECC(all 0xff)

				 * so this is definitely an erased-page

				/*

				 * count number of 0-bits in read_buf.

				 * This check can be removed once a similar

				 * check is introduced in generic NAND driver

					/*

					 * number of 0-bits within ECC limits

					 * So this may be an erased-page

					/*

					 * Too many 0-bits. It may be a

					 * - programmed-page, OR

					 * - erased-page with many bit-flips

					 * So this page requires check by ELM

 Update the ecc vector */

 Check if any error reported */

 Decode BCH error using ELM module */

 Add 4 bits to take care of padding */

 Calculate bit position of error */

 Calculate byte position of error */

 Update number of correctable errors */

 Update page data with sector size */

/**

 * omap_write_page_bch - BCH ecc based write page function for entire page

 * @chip:		nand chip info structure

 * @buf:		data buffer

 * @oob_required:	must write chip->oob_poi to OOB

 * @page:		page

 *

 * Custom write page method evolved to support multi sector writing in one shot

 Enable GPMC ecc engine */

 Write data */

 Update ecc vector from GPMC result registers */

 Write ecc vector to OOB area */

/**

 * omap_write_subpage_bch - BCH hardware ECC based subpage write

 * @chip:	nand chip info structure

 * @offset:	column address of subpage within the page

 * @data_len:	data length

 * @buf:	data buffer

 * @oob_required: must write chip->oob_poi to OOB

 * @page: page number to write

 *

 * OMAP optimized subpage write method.

	/*

	 * Write entire page at one go as it would be optimal

	 * as ECC is calculated by hardware.

	 * ECC is calculated for all subpages but we choose

	 * only what we want.

 Enable GPMC ECC engine */

 Write data */

 Mask ECC of un-touched subpages with 0xFFs */

		/*

		 * Copy the calculated ECC for the whole page including the

		 * masked values (0xFF) corresponding to unwritten subpages.

 write OOB buffer to NAND device */

/**

 * omap_read_page_bch - BCH ecc based page read function for entire page

 * @chip:		nand chip info structure

 * @buf:		buffer to store read data

 * @oob_required:	caller requires OOB data read to chip->oob_poi

 * @page:		page number to read

 *

 * For BCH ecc scheme, GPMC used for syndrome calculation and ELM module

 * used for error correction.

 * Custom method evolved to support ELM error correction & multi sector

 * reading. On reading page data area is read along with OOB data with

 * ecc engine enabled. ecc vector updated after read of OOB data.

 * For non error pages ecc vector reported as zero.

 Enable GPMC ecc engine */

 Read data */

 Read oob bytes */

 Calculate ecc bytes */

/**

 * is_elm_present - checks for presence of ELM module by scanning DT nodes

 * @info: NAND device structure containing platform data

 * @elm_node: ELM's DT node

 check whether elm-id is passed via DT */

 check whether ELM device is registered */

 ELM module available, now configure it */

 detect availability of ELM module. Won't be present pre-OMAP4 */

 select ecc-scheme for NAND */

 select data transfer mode */

	/*

	 * When SW correction is employed, one OMAP specific marker byte is

	 * reserved after each ECC step.

	/*

	 * When SW correction is employed, one OMAP specific marker byte is

	 * reserved after each ECC step.

 Re-populate low-level callbacks based on xfer modes */

 Use nand_base defaults for {read,write}_buf */

	/*

	 * Bail out earlier to let NAND_ECC_ENGINE_TYPE_SOFT code create its own

	 * ooblayout instead of using ours.

 Populate MTD interface based on ECC scheme */

 Reserve one byte for the OMAP marker */

 Software BCH library is used for locating errors */

 14th bit is kept reserved for ROM-code compatibility */

 Reserve one byte for the OMAP marker */

 Software BCH library is used for locating errors */

 14th bit is kept reserved for ROM-code compatibility */

 Check if NAND device's OOB is enough to store ECC signatures */

 Shared among all NAND instances to synchronize access to the ECC Engine */

	/*

	 * If RDY/BSY line is connected to OMAP then use the omap ready

	 * function and the generic nand_wait function which reads the status

	 * register after monitoring the RDY/BSY line. Otherwise use a standard

	 * chip delay which is slightly more than tR (AC Timing) of the NAND

	 * device and read status register until you get a failure or success

 scan NAND device connected to chip controller */

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 2000 Steven J. Hill (sjhill@realitydiluted.com)

 *		  2002-2006 Thomas Gleixner (tglx@linutronix.de)

 *

 *  Credits:

 *	David Woodhouse for adding multichip support

 *

 *	Aleph One Ltd. and Toby Churchill Ltd. for supporting the

 *	rework for 2K page size chips

 *

 * This file contains all ONFI helpers.

 Parse the Extended Parameter Page. */

	/*

	 * Use the Change Read Column command to skip the ONFI param pages and

	 * ensure we read at the right location.

	/*

	 * Check the signature.

	 * Do not strictly follow the ONFI spec, maybe changed in future.

 find the ECC section. */

 get the info we want. */

/*

 * Recover data with bit-wise majority

/*

 * Check if the NAND chip is ONFI compliant, returns 1 if it is, 0 otherwise.

 Try ONFI for unknown chip or LP */

 ONFI chip: allocate a buffer to hold its parameter page */

 Check version */

	/*

	 * pages_per_block and blocks_per_lun may not be a power-of-2 size

	 * (don't ask me who thought of this...). MTD assumes that these

	 * dimensions will be power-of-2, so just truncate the remaining area.

 See erasesize comment */

		/*

		 * The nand_flash_detect_ext_param_page() uses the

		 * Change Read Column command which maybe not supported

		 * by the chip->legacy.cmdfunc. So try to update the

		 * chip->legacy.cmdfunc now. We do not replace user supplied

		 * command function.

 The Extended Parameter Page is supported since ONFI 2.1. */

 Save some parameters from the parameter page for future use */

 Identification done, free the full ONFI parameter page and exit */

 SPDX-License-Identifier: GPL-2.0

/*

 * Arasan NAND Flash Controller Driver

 *

 * Copyright (C) 2014 - 2020 Xilinx, Inc.

 * Author:

 *   Miquel Raynal <miquel.raynal@bootlin.com>

 * Original work (fully rewritten):

 *   Punnaiah Choudary Kalluri <punnaia@xilinx.com>

 *   Naga Sureshkumar Relli <nagasure@xilinx.com>

/**

 * struct anfc_op - Defines how to execute an operation

 * @pkt_reg: Packet register

 * @addr1_reg: Memory address 1 register

 * @addr2_reg: Memory address 2 register

 * @cmd_reg: Command register

 * @prog_reg: Program register

 * @steps: Number of "packets" to read/write

 * @rdy_timeout_ms: Timeout for waits on Ready/Busy pin

 * @len: Data transfer length

 * @read: Data transfer direction from the controller point of view

 * @buf: Data buffer

/**

 * struct anand - Defines the NAND chip related information

 * @node:		Used to store NAND chips into a list

 * @chip:		NAND chip information structure

 * @rb:			Ready-busy line

 * @page_sz:		Register value of the page_sz field to use

 * @clk:		Expected clock frequency to use

 * @data_iface:		Data interface timing mode to use

 * @timings:		NV-DDR specific timings to use

 * @ecc_conf:		Hardware ECC configuration value

 * @strength:		Register value of the ECC strength

 * @raddr_cycles:	Row address cycle information

 * @caddr_cycles:	Column address cycle information

 * @ecc_bits:		Exact number of ECC bits per syndrome

 * @ecc_total:		Total number of ECC bytes

 * @errloc:		Array of errors located with soft BCH

 * @hw_ecc:		Buffer to store syndromes computed by hardware

 * @bch:		BCH structure

 * @cs_idx:		Array of chip-select for this device, values are indexes

 *			of the controller structure @gpio_cs array

 * @ncs_idx:		Size of the @cs_idx array

/**

 * struct arasan_nfc - Defines the Arasan NAND flash controller driver instance

 * @dev:		Pointer to the device structure

 * @base:		Remapped register area

 * @controller_clk:		Pointer to the system clock

 * @bus_clk:		Pointer to the flash clock

 * @controller:		Base controller structure

 * @chips:		List of all NAND chips attached to the controller

 * @cur_clk:		Current clock rate

 * @cs_array:		CS array. Native CS are left empty, the other cells are

 *			populated with their corresponding GPIO descriptor.

 * @ncs:		Size of @cs_array

 * @cur_cs:		Index in @cs_array of the currently in use CS

 * @native_cs:		Currently selected native CS

 * @spare_cs:		Native CS that is not wired (may be selected when a GPIO

 *			CS is in use)

 There is no R/B interrupt, we must poll a register */

 CS did not change: do nothing */

 Deassert the previous CS if it was a GPIO */

 Assert the new one */

 Update the controller timings and the potential ECC configuration */

 Update clock frequency */

/*

 * When using the embedded hardware ECC engine, the controller is in charge of

 * feeding the engine with, first, the ECC residue present in the data array.

 * A typical read operation is:

 * 1/ Assert the read operation by sending the relevant command/address cycles

 *    but targeting the column of the first ECC bytes in the OOB area instead of

 *    the main data directly.

 * 2/ After having read the relevant number of ECC bytes, the controller uses

 *    the RNDOUT/RNDSTART commands which are set into the "ECC Spare Command

 *    Register" to move the pointer back at the beginning of the main data.

 * 3/ It will read the content of the main area for a given size (pktsize) and

 *    will feed the ECC engine with this buffer again.

 * 4/ The ECC engine derives the ECC bytes for the given data and compare them

 *    with the ones already received. It eventually trigger status flags and

 *    then set the "Buffer Read Ready" flag.

 * 5/ The corrected data is then available for reading from the data port

 *    register.

 *

 * The hardware BCH ECC engine is known to be inconstent in BCH mode and never

 * reports uncorrectable errors. Because of this bug, we have to use the

 * software BCH implementation in the read path.

 Store the raw OOB bytes as well */

	/*

	 * For each step, compute by softare the BCH syndrome over the raw data.

	 * Compare the theoretical amount of errors and compare with the

	 * hardware engine feedback.

 Extract the syndrome, it is not necessarily aligned */

 Only correct the data, not the syndrome */

 Spare data is not protected */

 NAND framework ->exec_op() hooks and related helpers */

			/*

			 * Number of DATA cycles must be aligned on 4, this

			 * means the controller might read/write more than

			 * requested. This is harmless most of the time as extra

			 * DATA are discarded in the write path and read pointer

			 * adjusted in the read path.

			 *

			 * FIXME: The core should mark operations where

			 * reading/writing more is allowed so the exec_op()

			 * implementation can take the right decision when the

			 * alignment constraint is not met: adjust the number of

			 * DATA cycles when it's allowed, reject the operation

			 * otherwise.

	/*

	 * Experience shows that while in SDR mode sending a CHANGE READ COLUMN

	 * command through the READ PAGE "type" always works fine, when in

	 * NV-DDR mode the same command simply fails. However, it was also

	 * spotted that any CHANGE READ COLUMN command sent through the CHANGE

	 * READ COLUMN ENHANCED "type" would correctly work in both cases (SDR

	 * and NV-DDR). So, for simplicity, let's program the controller with

	 * the CHANGE READ COLUMN ENHANCED "type" whenever we are requested to

	 * perform a CHANGE READ COLUMN operation.

 See anfc_check_op() for details about this constraint */

	/*

	 * The controller abstracts all the NAND operations and do not support

	 * data only operations.

	 *

	 * TODO: The nand_op_parser framework should be extended to

	 * support custom checks on DATA instructions.

	/*

	 * The controller does not allow to proceed with a CMD+DATA_IN cycle

	 * manually on the bus by reading data from the data register. Instead,

	 * the controller abstract a status read operation with its own status

	 * register after ordering a read status operation. Hence, we cannot

	 * support any CMD+DATA_IN operation other than a READ STATUS.

	 *

	 * TODO: The nand_op_parser() framework should be extended to describe

	 * fixed patterns instead of open-coding this check here.

		/*

		 * The controller only supports data payload requests which are

		 * a multiple of 4. In practice, most data accesses are 4-byte

		 * aligned and this is not an issue. However, rounding up will

		 * simply be refused by the controller if we reached the end of

		 * the device *and* we are using the NV-DDR interface(!). In

		 * this situation, unaligned data requests ending at the device

		 * boundary will confuse the controller and cannot be performed.

		 *

		 * This is something that happens in nand_read_subpage() when

		 * selecting software ECC support and must be avoided.

	/*

	 * Due to a hardware bug in the ZynqMP SoC, SDR timing modes 0-1 work

	 * with f > 90MHz (default clock is 100MHz) but signals are unstable

	 * with higher modes. Hence we decrease a little bit the clock rate to

	 * 80MHz when using SDR modes 2-5 with this SoC.

 Enforce bit swapping to fit the hardware */

 These hooks are valid for all ECC providers */

 Chip-select init */

 Ready-busy init */

 Disable interrupt signals */

 Enable interrupt status */

 Check the gpio-cs property */

	/*

	 * The controller native CS cannot be both disabled at the same time.

	 * Hence, only one native CS can be used if GPIO CS are needed, so that

	 * the other is selected when a non-native CS must be asserted (not

	 * wired physically or configured as GPIO instead of NAND CS). In this

	 * case, the "not" chosen CS is assigned to nfc->spare_cs and selected

	 * whenever a GPIO CS must be asserted.

 SPDX-License-Identifier: GPL-2.0

/*

 * ST Microelectronics

 * Flexible Static Memory Controller (FSMC)

 * Driver for NAND portions

 *

 * Copyright © 2010 ST Microelectronics

 * Vipin Kumar <vipin.kumar@st.com>

 * Ashish Priyadarshi

 *

 * Based on drivers/mtd/nand/nomadik_nand.c (removed in v3.8)

 *  Copyright © 2007 STMicroelectronics Pvt. Ltd.

 *  Copyright © 2009 Alessandro Rubini

 fsmc controller registers for NOR flash */

 ctrl register definitions */

 ctrl_tim register definitions */

 fsmc controller registers for NAND flash */

 pc register definitions */

 sts register definitions */

 comm register definitions */

/**

 * struct fsmc_nand_data - structure for FSMC NAND device state

 *

 * @base:		Inherit from the nand_controller struct

 * @pid:		Part ID on the AMBA PrimeCell format

 * @nand:		Chip related info for a NAND flash.

 *

 * @bank:		Bank number for probed device.

 * @dev:		Parent device

 * @mode:		Access mode

 * @clk:		Clock structure for FSMC.

 *

 * @read_dma_chan:	DMA channel for read access

 * @write_dma_chan:	DMA channel for write access to NAND

 * @dma_access_complete: Completion structure

 *

 * @dev_timings:	NAND timings

 *

 * @data_pa:		NAND Physical port for Data.

 * @data_va:		NAND port for Data.

 * @cmd_va:		NAND port for Command.

 * @addr_va:		NAND port for Address.

 * @regs_va:		Registers base address for a given bank.

 DMA related objects */

/*

 * ECC placement definitions in oobfree type format.

 * There are 13 bytes of ecc for every 512 byte block and it has to be read

 * consecutively and immediately after the 512 byte data block for hardware to

 * generate the error bit offsets in 512 byte data.

/*

 * fsmc_nand_setup - FSMC (Flexible Static Memory Controller) init routine

 *

 * This routine initializes timing parameters related to NAND memory access in

 * FSMC registers

/*

 * fsmc_enable_hwecc - Enables Hardware ECC through FSMC registers

/*

 * fsmc_read_hwecc_ecc4 - Hardware ECC calculator for ecc4 option supported by

 * FSMC. ECC is 13 bytes for 512 bytes of data (supports error correction up to

 * max of 8-bits)

/*

 * fsmc_read_hwecc_ecc1 - Hardware ECC calculator for ecc1 option supported by

 * FSMC. ECC is 3 bytes for 512 bytes of data (supports error correction up to

 * max of 1-bit)

 Count the number of 0's in buff upto a max of max_bits */

/*

 * fsmc_write_buf - write buffer to chip

 * @host:	FSMC NAND controller

 * @buf:	data buffer

 * @len:	number of bytes to write

/*

 * fsmc_read_buf - read chip data into buffer

 * @host:	FSMC NAND controller

 * @buf:	buffer to store date

 * @len:	number of bytes to read

/*

 * fsmc_read_buf_dma - read chip data into buffer

 * @host:	FSMC NAND controller

 * @buf:	buffer to store date

 * @len:	number of bytes to read

/*

 * fsmc_write_buf_dma - write buffer to chip

 * @host:	FSMC NAND controller

 * @buf:	data buffer

 * @len:	number of bytes to write

/*

 * fsmc_exec_op - hook called by the core to execute NAND operations

 *

 * This controller is simple enough and thus does not need to use the parser

 * provided by the core, instead, handle every situation here.

/*

 * fsmc_read_page_hwecc

 * @chip:	nand chip info structure

 * @buf:	buffer to store read data

 * @oob_required:	caller expects OOB data read to chip->oob_poi

 * @page:	page number to read

 *

 * This routine is needed for fsmc version 8 as reading from NAND chip has to be

 * performed in a strict sequence as follows:

 * data(512 byte) -> ecc(13 byte)

 * After this read, fsmc hardware generates and reports error data bits(up to a

 * max of 8 bits)

	/*

	 * ecc_oob is intentionally taken as u16. In 16bit devices, we

	 * end up reading 14 bytes (7 words) from oob. The local array is

	 * to maintain word alignment

			/*

			 * length is intentionally kept a higher multiple of 2

			 * to read at least 13 bytes even in case of 16 bit NAND

			 * devices

/*

 * fsmc_bch8_correct_data

 * @mtd:	mtd info structure

 * @dat:	buffer of read data

 * @read_ecc:	ecc read from device spare area

 * @calc_ecc:	ecc calculated from read data

 *

 * calc_ecc is a 104 bit information containing maximum of 8 error

 * offset information of 13 bits each in 512 bytes of read data.

 no bit flipping */

 too many errors */

		/*

		 * This is a temporary erase check. A newly erased page read

		 * would result in an ecc error because the oob data is also

		 * erased to FF and the calculated ecc for an FF data is not

		 * FF..FF.

		 * This is a workaround to skip performing correction in case

		 * data is FF..FF

		 *

		 * Logic:

		 * For every page, each bit written as 0 is counted until these

		 * number of bits are greater than 8 (the maximum correction

		 * capability of FSMC for each 512 + 13 bytes)

	/*

	 * ------------------- calc_ecc[] bit wise -----------|--13 bits--|

	 * |---idx[7]--|--.....-----|---idx[2]--||---idx[1]--||---idx[0]--|

	 *

	 * calc_ecc is a 104 bit information containing maximum of 8 error

	 * offset information of 13 bits each. calc_ecc is copied into a

	 * u64 array and error offset indexes are populated in err_idx

	 * array

 Set default NAND bank to 0 */

	/*

	 * Don't set layout for BCH4 SW ECC. This will be

	 * generated later during BCH initialization.

/**

 * fsmc_nand_disable() - Disables the NAND bank

 * @host: The instance to disable

/*

 * fsmc_nand_probe - Probe function

 * @pdev:       platform device structure

 Allocate memory for the device structure (and zero it) */

	/*

	 * This device ID is actually a common AMBA ID as used on the

	 * AMBA PrimeCell bus. However it is not a PrimeCell.

 Link all private pointers */

	/*

	 * Scan to find existence of the device

/*

 * Clean up routine

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright © 2008 Ilya Yanok, Emcraft Systems

/**

 * socrates_nand_write_buf -  write buffer to chip

 * @this:	NAND chip object

 * @buf:	data buffer

 * @len:	number of bytes to write

/**

 * socrates_nand_read_buf -  read chip data into buffer

 * @this:	NAND chip object

 * @buf:	buffer to store date

 * @len:	number of bytes to read

/**

 * socrates_nand_read_byte -  read one byte from the chip

 * @mtd:	MTD device structure

/*

 * Hardware specific access to control-lines

/*

 * Read the Device Ready pin.

 busy */

/*

 * Probe for the NAND device.

 Allocate memory for the device structure (and zero it) */

 link the private data structures */

 TODO: I have no idea what real delay is. */

 20us command delay time */

	/*

	 * This driver assumes that the default ECC engine should be TYPE_SOFT.

	 * Set ->engine_type before registering the NAND devices in order to

	 * provide a driver specific default value.

/*

 * Remove a NAND device.

 SPDX-License-Identifier: GPL-2.0

/*

 * SuperH FLCTL nand controller

 *

 * Copyright (c) 2008 Renesas Solutions Corp.

 * Copyright (c) 2008 Atom Create Engineering Co., Ltd.

 *

 * Based on fsl_elbc_nand.c, Copyright (c) 2006-2007 Freescale Semiconductor

 We can only either use DMA for both Tx and Rx or not use it at all */

 ERASE1 */

 SEQIN, READ0, etc.. */

 big than 128MB */

 check FIFO */

 check FIFO */

	/*

	 * First this loops checks in FLDTCNTR if we are ready to read out the

	 * oob data. This is the case if either all went fine without errors or

	 * if the bottom part of the loop corrected the errors or marked them as

	 * uncorrectable and the controller is given time to push the data into

	 * the FIFO.

 check if all is ok and we can read out the OOB */

 check if a correction code has been calculated */

			/*

			 * either we wait for the fifo to be filled or a

			 * correction pattern is being generated

 check for an uncorrectable error */

 check if we face a non-empty page */

 can't correct */

 start error correction */

 timeout */

 check FLECFIFO */

 DMA failed, fall back to PIO */

 ret > 0 is success */

 initiate DMA transfer */

 DMA success */

 do polling transfer */

 initiate DMA transfer */

 DMA success */

 do polling transfer */

 Set SNAND bit if page size is 2048byte */

 default FLCMDCR val */

 Set for FLCMDCR */

 This case is that cmd is READ0 or READ1 or READ00 */

 ONLY execute 1st cmd */

 Set address bytes parameter */

 Now actually write */

 set read size */

 read page with hwecc */

 read page with hwecc */

 READID is always performed using an 8-bit bus */

 set read size */

 output read command */

 set 0 size */

 write page with hwecc */

 set write size */

 set read size */

 read and end */

 set 0 size */

 set read size */

	/*

	 * NAND_BUSWIDTH_16 may have been set by nand_scan_ident().

	 * Add the SEL_16BIT flag in flctl->flcmncr_base.

 big than 32MB */

 big than 128KB */

 big than 128MB */

 big than 512KB */

 4 symbols ECC enabled */

 set SoC specific options */

 FLDTFIFO */

 Set address of hardware control function */

 20 us command delay time */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2004-2008 Freescale Semiconductor, Inc.

 * Copyright 2009 Semihalf.

 *

 * Approved as OSADL project by a majority of OSADL members and funded

 * by OSADL membership fees in 2009;  for details see www.osadl.org.

 *

 * Based on original driver from Freescale Semiconductor

 * written by John Rigby <jrigby@freescale.com> on basis of mxc_nand.c.

 * Reworked and extended by Piotr Ziecik <kosmo@semihalf.com>.

 Addresses for NFC MAIN RAM BUFFER areas */

 Addresses for NFC SPARE BUFFER areas */

 MPC5121 NFC registers */

 Bit Definitions: NFC_BUF_ADDR */

 Bit Definitions: NFC_CONFIG */

 Bit Definitions: NFC_CONFIG1 */

 Bit Definitions: NFC_CONFIG2 */

 Bit Definitions: NFC_WRPROT */

 Timeouts */

 1 ms */

 1/10 s */

 Read NFC register */

 Write NFC register */

 Set bits in NFC register */

 Clear bits in NFC register */

 Invoke address cycle */

 Invoke command cycle */

 Send data from NFC buffers to NAND flash */

 Receive data from NAND flash */

 Receive ID from NAND flash */

 Receive status from NAND flash */

 NFC interrupt handler */

 Wait for operation complete */

 Do address cycle(s) */

 Control chip select signals */

 Init external chip select logic on ADS5121 board */

 CPLD Register 9 controls NAND /CE Lines */

 Control chips select signal on ADS5121 board */

 Read NAND Ready/Busy signal */

	/*

	 * NFC handles ready/busy signal internally. Therefore, this function

	 * always returns status as ready.

 Write command to NAND flash */

	/*

	 * NFC does not support sub-page reads and writes,

	 * so emulate them using full page transfers.

 Copy data from/to NFC spare buffers. */

	/*

	 * NAND spare area is available through NFC spare buffers.

	 * The NFC divides spare area into (page_size / 512) chunks.

	 * Each chunk is placed into separate spare memory area, using

	 * first (spare_size / num_of_chunks) bytes of the buffer.

	 *

	 * For NAND device in which the spare area is not divided fully

	 * by the number of chunks, number of used bytes in each spare

	 * buffer is rounded down to the nearest even number of bytes,

	 * and all remaining bytes are added to the last used spare area.

	 *

	 * For more information read section 26.6.10 of MPC5121e

	 * Microcontroller Reference Manual, Rev. 3.

 Calculate number of valid bytes in each spare buffer */

 Calculate spare buffer number */

		/*

		 * Calculate offset to requested data block in selected spare

		 * buffer and its size.

 Copy data from/to NFC main and spare buffers */

 Handle spare area access */

 Calculate offset from beginning of spare area */

	/*

	 * Handle main area access - limit copy length to prevent

	 * crossing main/spare boundary.

 Handle crossing main/spare boundary */

 Read data from NFC buffers */

 Write data to NFC buffers */

 Read byte from NFC buffers */

/*

 * Read NFC configuration from Reset Config Word

 *

 * NFC is configured during reset in basis of information stored

 * in Reset Config Word. There is no other way to set NAND block

 * size, spare size and bus width.

 Bit 6: NFC bus width */

 Bit 7: NFC Page/Spare size */

 Bits [22:21]: ROM Location */

 Decode RCW bits */

 Free driver resources */

	/*

	 * Check SoC revision. This driver supports only NFC

	 * in MPC5121 revision 2 and MPC5123 revision 3.

 Read NFC configuration from Reset Config Word */

 Support external chip-select logic on ADS5121 board */

 Enable NFC clock */

 Reset NAND Flash controller */

 Enable write to NFC memory */

 Enable write to all NAND pages */

	/*

	 * Setup NFC:

	 *	- Big Endian transfers,

	 *	- Interrupt after full page read/write.

 Set spare area size */

	/*

	 * This driver assumes that the default ECC engine should be TYPE_SOFT.

	 * Set ->engine_type before registering the NAND devices in order to

	 * provide a driver specific default value.

 Detect NAND chips */

 Set erase block size */

 Register device in MTD */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Cadence NAND flash controller driver

 *

 * Copyright (C) 2019 Cadence

 *

 * Author: Piotr Sroka <piotrs@cadence.com>

/*

 * HPNFC can work in 3 modes:

 * -  PIO - can work in master or slave DMA

 * -  CDMA - needs Master DMA for accessing command descriptors.

 * -  Generic mode - can use only slave DMA.

 * CDMA and PIO modes can be used to execute only base commands.

 * Generic mode can be used to execute any command

 * on NAND flash memory. Driver uses CDMA mode for

 * block erasing, page reading, page programing.

 * Generic mode is used for executing rest of commands.

 Register definition. */

/*

 * Command register 0.

 * Writing data to this register will initiate a new transaction

 * of the NF controller.

 Command type field mask. */

 Command type CDMA. */

 Command type generic. */

 Command thread number field mask. */

 Command register 2. */

 Command register 3. */

 Pointer register to select which thread status will be selected. */

 Command status register for selected thread. */

 Interrupt status register. */

 Interrupt enable register. */

 Controller internal state. */

 Command Engine threads state. */

 Command Engine interrupt thread error status. */

 Command Engine interrupt thread error enable. */

 Command Engine interrupt thread complete status. */

/*

 * Transfer config 0 register.

 * Configures data transfer parameters.

 Offset value from the beginning of the page. */

 Numbers of sectors to transfer within singlNF device's page. */

/*

 * Transfer config 1 register.

 * Configures data transfer parameters.

 Size of last data sector. */

 Size of not-last data sector. */

 ECC engine configuration register 0. */

 Correction strength. */

 Enable erased pages detection mechanism. */

 Enable controller ECC check bits generation and correction. */

 ECC engine configuration register 1. */

 Multiplane settings register. */

 Cache operation settings. */

 DMA settings register. */

 Enable SDMA error report on access unprepared slave DMA interface. */

 Transferred data block size for the slave DMA module. */

/* Thread number associated with transferred data block

 * for the slave DMA module.

 Thread number mask. */

 Thread number mask. */

 Available hardware features of the controller. */

 Support for NV-DDR2/3 work mode. */

 Support for NV-DDR work mode. */

 Support for asynchronous work mode. */

 Support for asynchronous work mode. */

 Slave and Master DMA data width. */

 Availability of Control Data feature.*/

 BCH Engine identification register 0 - correction strengths. */

 BCH Engine identification register 1 - correction strengths. */

 BCH Engine identification register 2 - sector sizes. */

 BCH Engine identification register 3. */

 Ready/Busy# line status. */

 Common settings. */

 16 bit device connected to the NAND Flash interface. */

 Skip_bytes registers. */

 Timings configuration. */

 Configuration of the resynchronization of slave DLL of PHY. */

 Register controlling DQ related timing. */

 Register controlling DSQ related timing.  */

 Register controlling the gate and loopback control related timing. */

 Register holds the control for the master DLL logic. */

 Register holds the control for the slave DLL logic. */

 This register handles the global control settings for the PHY. */

/*

 * This register handles the global control settings

 * for the termination selects for reads.

 Generic command layout. */

/*

 * This bit informs the minicotroller if it has to wait for tWB

 * after sending the last CMD/ADDR/DATA in the sequence.

 Type of generic instruction. */

 Generic CMD sequence type. */

 Generic ADDR sequence type. */

 Generic data transfer sequence type. */

 Input part of generic command type of input is command. */

 Generic command address sequence - address fields. */

 Generic command address sequence - address size. */

 Transfer direction field of generic command data sequence. */

 Read transfer direction of generic command data sequence. */

 Write transfer direction of generic command data sequence. */

 ECC enabled flag of generic command data sequence - ECC enabled. */

 Generic command data sequence - sector size. */

 Generic command data sequence - sector count. */

 Generic command data sequence - last sector size. */

 CDMA descriptor fields. */

 Erase command type of CDMA descriptor. */

 Program page command type of CDMA descriptor. */

 Read page command type of CDMA descriptor. */

 Flash pointer memory shift. */

 Flash pointer memory mask. */

/*

 * Command DMA descriptor flags. If set causes issue interrupt after

 * the completion of descriptor processing.

/*

 * Command DMA descriptor flags - the next descriptor

 * address field is valid and descriptor processing should continue.

 DMA master flag of command DMA descriptor. */

 Operation complete status of command descriptor. */

 Operation complete status of command descriptor. */

 Command descriptor status - operation fail. */

 Command descriptor status - page erased. */

 Command descriptor status - timeout occurred. */

/*

 * Maximum amount of correction applied to one ECC sector.

 * It is part of command descriptor status.

 Command descriptor status - uncorrectable ECC error. */

 Command descriptor status - descriptor error. */

 Status of operation - OK. */

 Status of operation - FAIL. */

 Status of operation - uncorrectable ECC error. */

 Status of operation - page erased. */

 Status of operation - correctable ECC error. */

 Status of operation - unsuspected state. */

 Status of operation - operation is not completed yet. */

 Command DMA descriptor. */

 Next descriptor address. */

 Flash address is a 32-bit address comprising of BANK and ROW ADDR. */

field appears in HPNFC version 13*/

 Operation the controller needs to perform. */

 Flags for operation of this command. */

 System/host memory address required for data DMA commands. */

 Status of operation. */

 Address pointer to sync buffer location. */

 Controls the buffer sync mechanism. */

 Control data pointer. */

 Interrupt status. */

 Thread operation complete status. */

 Thread operation error. */

 Controller status. */

 Cadence NAND flash controller capabilities get from driver data. */

 Skew value of the output signals of the NAND Flash interface. */

 It informs if slave DMA interface is connected to DMA engine. */

 Cadence NAND flash controller capabilities read from registers. */

 Maximum number of banks supported by hardware. */

 Slave and Master DMA data width in bytes (4 or 8). */

 Control Data feature supported. */

 Is PHY type DLL. */

 IP capability. */

 Register interface. */

 Interrupts that have happened. */

 Interrupts we are waiting for. */

 Protect irq_mask and irq_status. */

	/*

	 * Estimated Board delay. The value includes the total

	 * round trip delay for the signals and is used for deciding on values

	 * associated with data read capture.

	/*

	 * part of oob area of NAND flash memory page.

	 * This part is available for user to read or write.

 Sector size. There are few sectors per mtd->writesize */

 Offset of BBM. */

 Number of bytes reserved for BBM. */

 ECC strength index. */

 Functions enables/disables hardware detection of erased data */

/*

 * This is the interrupt service routine. It handles all interrupts

 * sent to this device.

 Handle interrupt. */

 First acknowledge it. */

 Status in the device context for someone to read. */

 Notify anyone who cares that it happened. */

 Tell the OS that we've handled this. */

 Timeout error. */

 Execute generic command on NAND controller. */

 Select generic command. */

 Thread number. */

 Issue command. */

 Wait for data on slave DMA interface. */

 Prepare CDMA descriptor. */

 Set fields for one descriptor. */

 Descriptor finished with no errors. */

 Last descriptor.  */

 Wait for thread ready. */

 Select CDMA mode. */

 Thread number. */

 Issue command. */

 Send SDMA command and wait for finish. */

/*

 * ECC size depends on configured ECC strength and on maximum supported

 * ECC step size.

 Function reads BCH capabilities. */

 ECC strengths are common for all step infos. */

 Hardware initialization. */

 Disable cache and multiplane. */

 Clear all interrupts. */

	/*

	 * Set IO width access to 8.

	 * It is because during SW device discovering width access

	 * is expected to be 8.

 Prepare size of data to transfer. */

	/*

	 * Read only bad block marker from offset

	 * defined by a memory manufacturer.

 Set oob data to 0xFF. */

 Transfer the data to the oob area. */

	/*

	 * Fill the buffer with 0xff first except the full page transfer.

	 * This simplifies the logic.

 Arrange the buffer for syndrome payload/ecc layout. */

 BBM at the beginning of the OOB area. */

 OOB free. */

 OOB ECC. */

	/*

	 * If data buffer can be accessed by DMA and data_control feature

	 * is supported then transfer data and oob directly.

 Otherwise use bounce buffer. */

 Reads OOB data from the device. */

 Arrange the buffer for syndrome payload/ecc layout. */

 OOB free. */

 BBM at the beginning of the OOB area. */

 OOB ECC */

 Wait until slave DMA interface is ready to data transfer. */

 read alingment data */

 read rest data from slave DMA interface if any */

 copy rest of data */

 If DMA transfer is not possible or failed then use bounce buffer. */

 Wait until slave DMA interface is ready to data transfer. */

 copy rest of data */

 write all expected by nand controller data */

 If DMA transfer is not possible or failed then use bounce buffer. */

	/*

	 * Callers of this function do not verify if the NAND is using a 16-bit

	 * an 8-bit bus for normal operations, so we need to take care of that

	 * here by leaving the configuration unchanged if the NAND does not have

	 * the NAND_BUSWIDTH_16 flag set.

	/*

	 * If it is not an erase operation then handle operation

	 * by calling exec_op function.

 Calculate max data valid window. */

 Calculate data valid window. */

 Sampling point calculation. */

	/*

	 * The idea of those calculation is to get the optimum value

	 * for tRP and tRH timings. If it is NOT possible to sample data

	 * with optimal tRP/tRH settings, the parameters will be extended.

	 * If clk_period is 50ns (the lowest value) this condition is met

	 * for SDR timing modes 1, 2, 3, 4 and 5.

	 * If clk_period is 20ns the condition is met only for SDR timing

	 * mode 5.

 Performance mode. */

		/*

		 * Check if data valid window and sampling point can be found

		 * and is not on the edge (ie. we have hold margin).

		 * If not extend the tRP timings.

				/*

				 * No valid sampling point so the RE pulse need

				 * to be widen widening by half clock cycle.

			/*

			 * There is no valid window

			 * to be able to sample data the tRP need to be widen.

			 * Very safe calculations are performed here.

 Extended read mode. */

		/*

		 * Check if data valid window and sampling point can be found

		 * or if it is at the edge check if previous is valid

		 * - if not extend the tRP timings.

				/*

				 * Data valid window width is lower than

				 * sampling resolution and do not hit any

				 * sampling point to be sure the sampling point

				 * will be found the RE low pulse width will be

				 *  extended by one clock cycle.

			/*

			 * There is no valid window to be able to sample data.

			 * The tRP need to be widen.

			 * Very safe calculations are performed here.

	/*

	 * If timing exceeds delay field in timing register

	 * then use maximum value.

 The following is related to single signal so skew is not needed. */

	/*

	 * Because of the two stage syncflop the value must be increased by 3

	 * first value is related with sync, second value is related

	 * with output if delay.

	/*

	 * The following is related to the we edge of the random data input

	 * sequence so skew is not needed.

 Sampling point calculation. */

				/*

				 * Calculation for sampling point at the edge

				 * of data and being odd number.

 this value should be even number */

 Error correction configuration. */

 Override the default read operations. */

 Is 32-bit DMA supported? */

 Allocate the nand chip structure. */

 Retrieve CS id. */

	/*

	 * Default to HW ECC engine mode. If the nand-ecc-mode property is given

	 * in the DT node, this entry will be overwritten in nand_scan_ident().

 Disable interrupts. */

 Driver exit point. */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright 2009-2015 Freescale Semiconductor, Inc. and others

 *

 * Description: MPC5125, VF610, MCF54418 and Kinetis K70 Nand driver.

 * Jason ported to M54418TWR and MVFA5 (VF610).

 * Authors: Stefan Agner <stefan.agner@toradex.com>

 *          Bill Pringlemeir <bpringlemeir@nbsps.com>

 *          Shaohui Xie <b21989@freescale.com>

 *          Jason Jin <Jason.jin@freescale.com>

 *

 * Based on original driver mpc5121_nfc.c.

 *

 * Limitations:

 * - Untested on MPC5125 and M54418.

 * - DMA and pipelining not used.

 * - 2K pages or less.

 * - HW ECC: Only 2K page with 64+ OOB.

 * - HW ECC: Only 24 and 32-bit error correction implemented.

 Register Offsets */

 Addresses for NFC MAIN RAM BUFFER areas */

 NFC_CMD2[CODE] controller cycle bit masks */

 NFC ECC mode define */

** Register Mask and bit definitions */

 NFC_FLASH_CMD1 Field */

 NFC_FLASH_CM2 Field */

 NFC_COL_ADDR Field */

 NFC_ROW_ADDR Field */

 NFC_FLASH_STATUS2 Field */

 NFC_FLASH_CONFIG Field */

 NFC_IRQ_STATUS Field */

/*

 * ECC status - seems to consume 8 bytes (double word). The documented

 * status byte is located in the lowest byte of the second word (which is

 * the 4th or 7th byte depending on endianness).

 * Calculate an offset to store the ECC status at the end of the buffer.

 Status and ID are in alternate locations. */

	/*

	 * Indicate that user data is accessed (full page/oob). This is

	 * useful to indicate the driver whether to swap byte endianness.

	 * See comments in vf610_nfc_rd_from_sram/vf610_nfc_wr_to_sram.

/**

 * Read accessor for internal SRAM buffer

 * @dst: destination address in regular memory

 * @src: source address in SRAM buffer

 * @len: bytes to copy

 * @fix_endian: Fix endianness if required

 *

 * Use this accessor for the internal SRAM buffers. On the ARM

 * Freescale Vybrid SoC it's known that the driver can treat

 * the SRAM buffer as if it's memory. Other platform might need

 * to treat the buffers differently.

 *

 * The controller stores bytes from the NAND chip internally in big

 * endianness. On little endian platforms such as Vybrid this leads

 * to reversed byte order.

 * For performance reason (and earlier probably due to unawareness)

 * the driver avoids correcting endianness where it has control over

 * write and read side (e.g. page wise data access).

/**

 * Write accessor for internal SRAM buffer

 * @dst: destination address in SRAM buffer

 * @src: source address in regular memory

 * @len: bytes to copy

 * @fix_endian: Fix endianness if required

 *

 * Use this accessor for the internal SRAM buffers. On the ARM

 * Freescale Vybrid SoC it's known that the driver can treat

 * the SRAM buffer as if it's memory. Other platform might need

 * to treat the buffers differently.

 *

 * The controller stores bytes from the NAND chip internally in big

 * endianness. On little endian platforms such as Vybrid this leads

 * to reversed byte order.

 * For performance reason (and earlier probably due to unawareness)

 * the driver avoids correcting endianness where it has control over

 * write and read side (e.g. page wise data access).

 Clear flags for upcoming command */

	/*

	 * Barrier is needed after this write. This write need

	 * to be done before reading the next register the first

	 * time.

	 * vf610_nfc_set implicates such a barrier by using writel

	 * to write to the register.

	/*

	 * Some ops are optional, but the hardware requires the operations

	 * to be in this exact order.

	 * The op parser enforces the order and makes sure that there isn't

	 * a read and write element in a single operation.

		/*

		 * Don't fix endianness on page access for historical reasons.

		 * See comment in vf610_nfc_wr_to_sram

		/*

		 * Don't fix endianness on page access for historical reasons.

		 * See comment in vf610_nfc_rd_from_sram

/*

 * This function supports Vybrid only (MPC5125 would have full RB and four CS)

 Vybrid only (MPC5125 would have full RB and four CS) */

	/*

	 * On an erased page, bit count (including OOB) should be zero or

	 * at least less then half of the ECC strength.

	/*

	 * Don't fix endianness on page access for historical reasons.

	 * See comment in vf610_nfc_rd_from_sram

	/*

	 * Don't fix endianness on page access for historical reasons.

	 * See comment in vf610_nfc_wr_to_sram

 sentinel */ }

 Disable virtual pages, only one elementary transfer unit */

 Set ECC status offset in SRAM */

 Enable ECC status in SRAM */

 Bad block options. */

 Single buffer only, max 256 OOB minus ECC status */

 Only 64 byte ECC layouts known */

 Use default large page ECC layout defined in NAND core */

 Scan the NAND chip */

 Register device in MTD */

 SPDX-License-Identifier: GPL-2.0

/*

 * NAND Flash Controller Device Driver for DT

 *

 * Copyright © 2011, Picochip.

 core clock */

 bus interface clock */

 ECC circuit clock */

 core reset */

 register reset */

 sentinel */ }

	/*

	 * Deassert the register reset, and the core reset in this order.

	 * Deasserting the core reset while the register reset is asserted

	 * will cause unpredictable behavior in the controller.

	/*

	 * When the reset is deasserted, the initialization sequence is kicked

	 * (bootstrap process). The driver must wait until it finished.

	 * Otherwise, it will result in unpredictable behavior.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Overview:

 *   Platform independent driver for NDFC (NanD Flash Controller)

 *   integrated into EP440 cores

 *

 *   Ported to an OF platform driver by Sean MacLennan

 *

 *   The NDFC supports multiple chips, but this driver only supports a

 *   single chip since I do not have access to any boards with

 *   multiple chips.

 *

 *  Author: Thomas Gleixner

 *

 *  Copyright 2006 IBM

 *  Copyright 2008 PIKA Technologies

 *    Sean MacLennan <smaclennan@pikatech.com>

 The NDFC uses Smart Media (SMC) bytes order */

/*

 * Speedups for buffer read/write/verify

 *

 * NDFC allows 32bit read/write of data. So we can speed up the buffer

 * functions. No further checking, as nand_base will always read/write

 * page aligned.

/*

 * Initialize chip structure

 Read the reg property to get the chip select */

 It is ok if ccr does not exist - just default to 0 */

 Set the bank settings if given */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Generic NAND driver

 *

 * Author: Vitaly Wool <vitalywool@gmail.com>

/*

 * Probe for the NAND device.

 Allocate memory for the device structure (and zero it) */

 Handle any platform specific setup */

	/*

	 * This driver assumes that the default ECC engine should be TYPE_SOFT.

	 * Set ->engine_type before registering the NAND devices in order to

	 * provide a driver specific default value.

 Scan to find existence of the device */

/*

 * Remove a NAND device.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Updated, and converted to generic GPIO based driver by Russell King.

 *

 * Written by Ben Dooks <ben@simtec.co.uk>

 *   Based on 2.4 version by Mark Whittaker

 *

 * © 2004 Simtec Electronics

 *

 * Device driver for NAND flash that uses a memory mapped interface to

 * read/write the NAND commands and data, and GPIO pins for control signals

 * (the DT binding refers to this as "GPIO assisted NAND flash")

 Optional chip enable */

 Optional write protection */

/* gpio_nand_dosync()

 *

 * Make sure the GPIO state changes occur in-order with writes to NAND

 * memory region.

 * Needed on PXA due to bus-reordering within the SoC itself (see section on

 * I/O ordering in PXA manual (section 2.3, p35)

		/*

		 * Linux memory barriers don't cater for what's required here.

		 * What's required is what's here - a read from a separate

		 * region with a dependency on that read.

 CONFIG_OF */

 CONFIG_OF */

 Enable write protection and disable the chip */

 Just enable the chip */

 We disable write protection once we know probe() will succeed */

 Disable write protection, if wired up */

	/*

	 * This driver assumes that the default ECC engine should be TYPE_SOFT.

	 * Set ->engine_type before registering the NAND devices in order to

	 * provide a driver specific default value.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2016, The Linux Foundation. All rights reserved.

 NANDc reg offsets */

 dummy register offsets, used by write_reg_dma */

 NAND_FLASH_CMD bits */

 NAND_FLASH_CHIP_SELECT bits */

 NAND_FLASH_STATUS bits */

 NAND_BUFFER_STATUS bits */

 NAND_DEVn_CFG0 bits */

 NAND_DEVn_CFG0 bits */

 NAND_DEV0_ECC_CFG bits */

 NAND_DEV_CMD1 bits */

 NAND_DEV_CMD_VLD bits */

 NAND_EBI2_ECC_BUF_CFG bits */

 NAND_ERASED_CW_DETECT_CFG bits */

 NAND_ERASED_CW_DETECT_STATUS bits */

 NAND_READ_LOCATION_n bits */

 Version Mask */

 NAND OP_CMDs */

 Default Value for NAND_DEV_CMD_VLD */

 NAND_CTRL bits */

/*

 * the NAND controller performs reads/writes with ECC in 516 byte chunks.

 * the driver calls the chunks 'step' or 'codeword' interchangeably

/*

 * the largest page size we support is 8K, this will have 16 steps/codewords

 * of 512 bytes each

 we read at most 3 registers per codeword scan */

 ECC modes supported by the controller */

/*

 * Returns the actual register address for all NAND_DEV_ registers

 * (i.e. NAND_DEV_CMD0, NAND_DEV_CMD1, NAND_DEV_CMD2 and NAND_DEV_CMD_VLD)

 Returns the NAND register physical address */

 Returns the dma address for reg read buffer */

/*

 * Flags used in DMA descriptor preparation helper functions

 * (i.e. read_reg_dma/write_reg_dma/read_data_dma/write_data_dma)

 Don't set the EOT in current tx BAM sgl */

 Set the NWD flag in current BAM sgl */

 Finish writing in the current BAM sgl and start writing in another BAM sgl */

/*

 * Erased codeword status is being used two times in single transfer so this

 * flag will determine the current value of erased codeword status register

/*

 * This data type corresponds to the BAM transaction which will be used for all

 * NAND transfers.

 * @bam_ce - the array of BAM command elements

 * @cmd_sgl - sgl for NAND BAM command pipe

 * @data_sgl - sgl for NAND BAM consumer/producer pipe

 * @bam_ce_pos - the index in bam_ce which is available for next sgl

 * @bam_ce_start - the index in bam_ce which marks the start position ce

 *		   for current sgl. It will be used for size calculation

 *		   for current sgl

 * @cmd_sgl_pos - current index in command sgl.

 * @cmd_sgl_start - start index in command sgl.

 * @tx_sgl_pos - current index in data sgl for tx.

 * @tx_sgl_start - start index in data sgl for tx.

 * @rx_sgl_pos - current index in data sgl for rx.

 * @rx_sgl_start - start index in data sgl for rx.

 * @wait_second_completion - wait for second DMA desc completion before making

 *			     the NAND transfer completion.

 * @txn_done - completion for NAND transfer.

 * @last_data_desc - last DMA desc in data channel (tx/rx).

 * @last_cmd_desc - last DMA desc in command channel.

/*

 * This data type corresponds to the nand dma descriptor

 * @list - list for desc_info

 * @dir - DMA transfer direction

 * @adm_sgl - sgl which will be used for single sgl dma descriptor. Only used by

 *	      ADM

 * @bam_sgl - sgl which will be used for dma descriptor. Only used by BAM

 * @sgl_cnt - number of SGL in bam_sgl. Only used by BAM

 * @dma_desc - low level DMA engine descriptor

/*

 * holds the current register values that we want to write. acts as a contiguous

 * chunk of memory which we use to write the controller registers through DMA.

/*

 * NAND controller data struct

 *

 * @controller:			base controller structure

 * @host_list:			list containing all the chips attached to the

 *				controller

 * @dev:			parent device

 * @base:			MMIO base

 * @base_phys:			physical base address of controller registers

 * @base_dma:			dma base address of controller registers

 * @core_clk:			controller clock

 * @aon_clk:			another controller clock

 *

 * @chan:			dma channel

 * @cmd_crci:			ADM DMA CRCI for command flow control

 * @data_crci:			ADM DMA CRCI for data flow control

 * @desc_list:			DMA descriptor list (list of desc_infos)

 *

 * @data_buffer:		our local DMA buffer for page read/writes,

 *				used when we can't use the buffer provided

 *				by upper layers directly

 * @buf_size/count/start:	markers for chip->legacy.read_buf/write_buf

 *				functions

 * @reg_read_buf:		local buffer for reading back registers via DMA

 * @reg_read_dma:		contains dma address for register read buffer

 * @reg_read_pos:		marker for data read in reg_read_buf

 *

 * @regs:			a contiguous chunk of memory for DMA register

 *				writes. contains the register values to be

 *				written to controller

 * @cmd1/vld:			some fixed controller register values

 * @props:			properties of current NAND controller,

 *				initialized via DT match data

 * @max_cwperpage:		maximum QPIC codewords required. calculated

 *				from all connected NAND devices pagesize

 will be used only by QPIC for BAM DMA */

 will be used only by EBI2 for ADM DMA */

/*

 * NAND chip structure

 *

 * @chip:			base NAND chip structure

 * @node:			list node to add itself to host_list in

 *				qcom_nand_controller

 *

 * @cs:				chip select value for this chip

 * @cw_size:			the number of bytes in a single step/codeword

 *				of a page, consisting of all data, ecc, spare

 *				and reserved bytes

 * @cw_data:			the number of bytes within a codeword protected

 *				by ECC

 * @use_ecc:			request the controller to use ECC for the

 *				upcoming read/write

 * @bch_enabled:		flag to tell whether BCH ECC mode is used

 * @ecc_bytes_hw:		ECC bytes used by controller hardware for this

 *				chip

 * @status:			value to be returned if NAND_CMD_STATUS command

 *				is executed

 * @last_command:		keeps track of last command on this chip. used

 *				for reading correct status

 *

 * @cfg0, cfg1, cfg0_raw..:	NANDc register configurations needed for

 *				ecc/non-ecc mode for the current nand flash

 *				device

/*

 * This data type corresponds to the NAND controller properties which varies

 * among different NAND controllers.

 * @ecc_modes - ecc mode for NAND

 * @is_bam - whether NAND controller is using BAM

 * @is_qpic - whether NAND CTRL is part of qpic IP

 * @qpic_v2 - flag to indicate QPIC IP version 2

 * @dev_cmd_reg_start - NAND_DEV_CMD_* registers starting offset

 Frees the BAM transaction memory */

 Allocates and Initializes the BAM transaction */

 Clears the BAM transaction indexes */

 Callback for DMA descriptor completion */

	/*

	 * In case of data transfer with NAND, 2 callbacks will be generated.

	 * One for command channel and another one for data channel.

	 * If current transaction has data descriptors

	 * (i.e. wait_second_completion is true), then set this to false

	 * and wait for second DMA descriptor completion.

 Helper to check the code word, whether it is last cw or not */

 helper to configure location register values */

 helper to configure address register values */

/*

 * update_rw_regs:	set up read/write register values, these will be

 *			written to the NAND controller registers via DMA

 *

 * @num_cw:		number of steps for the read/write operation

 * @read:		read or write operation

 * @cw	:		which code word

/*

 * Maps the scatter gather list for DMA transfer and forms the DMA descriptor

 * for BAM. This descriptor will be added in the NAND DMA descriptor queue

 * which will be submitted to DMA engine.

 update last data/command descriptor */

/*

 * Prepares the command descriptor for BAM DMA which will be used for NAND

 * register reads and writes. The command descriptor requires the command

 * to be formed in command element type so this function uses the command

 * element from bam transaction ce array and fills the same with required

 * data. A single SGL can contain multiple command elements so

 * NAND_BAM_NEXT_SGL will be used for starting the separate SGL

 * after the current command element.

 fill the command desc */

 use the separate sgl after this command */

/*

 * Prepares the data descriptor for BAM DMA which will be used for NAND

 * data reads and writes.

		/*

		 * BAM will only set EOT for DMA_PREP_INTERRUPT so if this flag

		 * is not set, form the DMA descriptor

/*

 * read_reg_dma:	prepares a descriptor to read a given number of

 *			contiguous registers to the reg_read_buf pointer

 *

 * @first:		offset of the first register in the contiguous block

 * @num_regs:		number of registers to read

 * @flags:		flags to control DMA descriptor preparation

/*

 * write_reg_dma:	prepares a descriptor to write a given number of

 *			contiguous registers

 *

 * @first:		offset of the first register in the contiguous block

 * @num_regs:		number of registers to write

 * @flags:		flags to control DMA descriptor preparation

/*

 * read_data_dma:	prepares a DMA descriptor to transfer data from the

 *			controller's internal buffer to the buffer 'vaddr'

 *

 * @reg_off:		offset within the controller's data buffer

 * @vaddr:		virtual address of the buffer we want to write to

 * @size:		DMA transaction size in bytes

 * @flags:		flags to control DMA descriptor preparation

/*

 * write_data_dma:	prepares a DMA descriptor to transfer data from

 *			'vaddr' to the controller's internal buffer

 *

 * @reg_off:		offset within the controller's data buffer

 * @vaddr:		virtual address of the buffer we want to read from

 * @size:		DMA transaction size in bytes

 * @flags:		flags to control DMA descriptor preparation

/*

 * Helper to prepare DMA descriptors for configuring registers

 * before reading a NAND page.

/*

 * Helper to prepare DMA descriptors for configuring registers

 * before reading each codeword in NAND page.

/*

 * Helper to prepare dma descriptors to configure registers needed for reading a

 * single codeword in page

/*

 * Helper to prepare DMA descriptors used to configure registers needed for

 * before writing a NAND page.

/*

 * Helper to prepare DMA descriptors for configuring registers

 * before writing each codeword in NAND page.

/*

 * the following functions are used within chip->legacy.cmdfunc() to

 * perform different NAND_CMD_* commands

 sets up descriptors for NAND_CMD_PARAM */

	/*

	 * NAND_CMD_PARAM is called before we know much about the FLASH chip

	 * in use. we configure the controller to perform a raw read of 512

	 * bytes to read onfi params

 configure CMD1 and VLD for ONFI param probing in QPIC v1 */

 restore CMD1 and VLD regs */

 sets up descriptors for NAND_CMD_ERASE1 */

 sets up descriptors for NAND_CMD_READID */

 sets up descriptors for NAND_CMD_RESET */

 helpers to submit/free our list of dma descriptors */

 reset the register read buffer for next NAND operation */

/*

 * this is called after NAND_CMD_PAGEPROG and NAND_CMD_ERASE1 to set our

 * privately maintained status byte, this status byte can be read after

 * NAND_CMD_STATUS is called

/*

 * Implements chip->legacy.cmdfunc. It's  only used for a limited set of

 * commands. The rest of the commands wouldn't be called by upper layers.

 * For example, NAND_CMD_READOOB would never be called because we have our own

 * versions of read_oob ops for nand_ecc_ctrl.

 we read the entire page for now */

/*

 * when using BCH ECC, the HW flags an error in NAND_FLASH_STATUS if it read

 * an erased CW, and reports an erased CW in NAND_ERASED_CW_DETECT_STATUS.

 *

 * when using RS ECC, the HW reports the same erros when reading an erased CW,

 * but it notifies that it is an erased CW by placing special characters at

 * certain offsets in the buffer.

 *

 * verify if the page is erased or not, and fix up the page for RS ECC by

 * replacing the special characters with 0xff.

	/*

	 * an erased page flags an error in NAND_FLASH_STATUS, check if the page

	 * is erased by looking for 0x54s at offsets 3 and 175 from the

	 * beginning of each codeword

	/*

	 * if the erased codework markers, if they exist override them with

	 * 0xffs

	/*

	 * check if the entire chunk contains 0xffs or not. if it doesn't, then

	 * restore the original values at the special offsets

 reads back FLASH_STATUS register set by the controller */

 performs raw read for one codeword */

/*

 * Bitflips can happen in erased codewords also so this function counts the

 * number of 0 in each CW for which ECC engine returns the uncorrectable

 * error. The page will be assumed as erased if this count is less than or

 * equal to the ecc->strength for each CW.

 *

 * 1. Both DATA and OOB need to be checked for number of 0. The

 *    top-level API can be called with only data buf or OOB buf so use

 *    chip->data_buf if data buf is null and chip->oob_poi if oob buf

 *    is null for copying the raw bytes.

 * 2. Perform raw read for all the CW which has uncorrectable errors.

 * 3. For each CW, check the number of 0 in cw_data and usable OOB bytes.

 *    The BBM and spare bytes bit flip won’t affect the ECC so don’t check

 *    the number of bitflips in this area.

 determine starting buffer address for current CW */

		/*

		 * make sure it isn't an erased page reported

		 * as not-erased by HW because of a few bitflips

/*

 * reads back status registers set by the controller to notify page read

 * errors. this is equivalent to what 'ecc->correct()' would do.

		/*

		 * Check ECC failure for each codeword. ECC failure can

		 * happen in either of the following conditions

		 * 1. If number of bitflips are greater than ECC engine

		 *    capability.

		 * 2. If this codeword contains all 0xff for which erased

		 *    codeword detection check will be done.

			/*

			 * For BCH ECC, ignore erased codeword errors, if

			 * ERASED_CW bits are set.

			/*

			 * For RS ECC, HW reports the erased CW by placing

			 * special characters at certain offsets in the buffer.

			 * These special characters will be valid only if

			 * complete page is read i.e. data_buf is not NULL.

		/*

		 * Check if MPU or any other operational error (timeout,

		 * device failure, etc.) happened for this codeword and

		 * make flash_op_err true. If flash_op_err is set, then

		 * EIO will be returned for page read.

		/*

		 * No ECC or operational errors happened. Check the number of

		 * bits corrected and update the ecc_stats.corrected.

/*

 * helper to perform the actual page read operation, used by ecc->read_page(),

 * ecc->read_oob()

 queue cmd descs for each codeword */

		/*

		 * when ecc is enabled, the controller doesn't read the real

		 * or dummy bad block markers in each chunk. To maintain a

		 * consistent layout across RAW and ECC reads, we just

		 * leave the real/dummy BBM offsets empty (i.e, filled with

		 * 0xffs)

/*

 * a helper that copies the last step/codeword of a page (containing free oob)

 * into our local buffer

 prepare a clean read buffer */

 implements ecc->read_page() */

 implements ecc->read_page_raw() */

 implements ecc->read_oob() */

 implements ecc->write_page() */

		/*

		 * when ECC is enabled, we don't really need to write anything

		 * to oob for the first n - 1 codewords since these oob regions

		 * just contain ECC bytes that's written by the controller

		 * itself. For the last codeword, we skip the bbm positions and

		 * write to the free oob area.

 implements ecc->write_page_raw() */

/*

 * implements ecc->write_oob()

 *

 * the NAND controller cannot write only data or only OOB within a codeword

 * since ECC is calculated for the combined codeword. So update the OOB from

 * chip->oob_poi, and pad the data area with OxFF before writing.

 calculate the data and oob size for the last codeword/step */

 override new oob content to last codeword */

	/*

	 * configure registers for a raw sub page read, the address is set to

	 * the beginning of the last codeword, we don't care about reading ecc

	 * portion of oob. we just want the first few bytes from this codeword

	 * that contains the BBM

	/*

	 * to mark the BBM as bad, we flash the entire last codeword with 0s.

	 * we don't care about the rest of the content in the codeword since

	 * we aren't going to use this block again

 prepare write */

/*

 * the three functions below implement chip->legacy.read_byte(),

 * chip->legacy.read_buf() and chip->legacy.write_buf() respectively. these

 * aren't used for reading/writing page data, they are used for smaller data

 * like reading	id, status etc

 we support only one external chip for now */

/*

 * NAND controller page layout info

 *

 * Layout with ECC enabled:

 *

 * |----------------------|  |---------------------------------|

 * |           xx.......yy|  |             *********xx.......yy|

 * |    DATA   xx..ECC..yy|  |    DATA     **SPARE**xx..ECC..yy|

 * |   (516)   xx.......yy|  |  (516-n*4)  **(n*4)**xx.......yy|

 * |           xx.......yy|  |             *********xx.......yy|

 * |----------------------|  |---------------------------------|

 *     codeword 1,2..n-1                  codeword n

 *  <---(528/532 Bytes)-->    <-------(528/532 Bytes)--------->

 *

 * n = Number of codewords in the page

 * . = ECC bytes

 * * = Spare/free bytes

 * x = Unused byte(s)

 * y = Reserved byte(s)

 *

 * 2K page: n = 4, spare = 16 bytes

 * 4K page: n = 8, spare = 32 bytes

 * 8K page: n = 16, spare = 64 bytes

 *

 * the qcom nand controller operates at a sub page/codeword level. each

 * codeword is 528 and 532 bytes for 4 bit and 8 bit ECC modes respectively.

 * the number of ECC bytes vary based on the ECC strength and the bus width.

 *

 * the first n - 1 codewords contains 516 bytes of user data, the remaining

 * 12/16 bytes consist of ECC and reserved data. The nth codeword contains

 * both user data and spare(oobavail) bytes that sum up to 516 bytes.

 *

 * When we access a page with ECC enabled, the reserved bytes(s) are not

 * accessible at all. When reading, we fill up these unreadable positions

 * with 0xffs. When writing, the controller skips writing the inaccessible

 * bytes.

 *

 * Layout with ECC disabled:

 *

 * |------------------------------|  |---------------------------------------|

 * |         yy          xx.......|  |         bb          *********xx.......|

 * |  DATA1  yy  DATA2   xx..ECC..|  |  DATA1  bb  DATA2   **SPARE**xx..ECC..|

 * | (size1) yy (size2)  xx.......|  | (size1) bb (size2)  **(n*4)**xx.......|

 * |         yy          xx.......|  |         bb          *********xx.......|

 * |------------------------------|  |---------------------------------------|

 *         codeword 1,2..n-1                        codeword n

 *  <-------(528/532 Bytes)------>    <-----------(528/532 Bytes)----------->

 *

 * n = Number of codewords in the page

 * . = ECC bytes

 * * = Spare/free bytes

 * x = Unused byte(s)

 * y = Dummy Bad Bock byte(s)

 * b = Real Bad Block byte(s)

 * size1/size2 = function of codeword size and 'n'

 *

 * when the ECC block is disabled, one reserved byte (or two for 16 bit bus

 * width) is now accessible. For the first n - 1 codewords, these are dummy Bad

 * Block Markers. In the last codeword, this position contains the real BBM

 *

 * In order to have a consistent layout between RAW and ECC modes, we assume

 * the following OOB layout arrangement:

 *

 * |-----------|  |--------------------|

 * |yyxx.......|  |bb*********xx.......|

 * |yyxx..ECC..|  |bb*FREEOOB*xx..ECC..|

 * |yyxx.......|  |bb*********xx.......|

 * |yyxx.......|  |bb*********xx.......|

 * |-----------|  |--------------------|

 *  first n - 1       nth OOB region

 *  OOB regions

 *

 * n = Number of codewords in the page

 * . = ECC bytes

 * * = FREE OOB bytes

 * y = Dummy bad block byte(s) (inaccessible when ECC enabled)

 * x = Unused byte(s)

 * b = Real bad block byte(s) (inaccessible when ECC enabled)

 *

 * This layout is read as is when ECC is disabled. When ECC is enabled, the

 * inaccessible Bad Block byte(s) are ignored when we write to a page/oob,

 * and assumed as 0xffs when we read a page/oob. The ECC, unused and

 * dummy/real bad block bytes are grouped as ecc bytes (i.e, ecc->bytes is

 * the sum of the three).

 controller only supports 512 bytes data steps */

	/*

	 * Each CW has 4 available OOB bytes which will be protected with ECC

	 * so remaining bytes can be used for ECC.

 8 bit ECC defaults to BCH ECC on all platforms */

		/*

		 * if the controller supports BCH for 4 bit ECC, the controller

		 * uses lesser bytes for ECC. If RS is used, the ECC bytes is

		 * always 10 bytes

 BCH */

 RS */

	/*

	 * we consider ecc->bytes as the sum of all the non-data content in a

	 * step. It gives us a clean representation of the oob area (even if

	 * all the bytes aren't used for ECC).It is always 16 bytes for 8 bit

	 * ECC and 12 bytes for 4 bit ECC

	/*

	 * DATA_UD_BYTES varies based on whether the read/write command protects

	 * spare data with ECC too. We protect spare data by default, so we set

	 * it to main + spare data, which are 512 and 4 bytes respectively.

	/*

	 * total bytes in a step, either 528 bytes for 4 bit ECC, or 532 bytes

	 * for 8 bit ECC

	/*

	 * we use the internal buffer for reading ONFI params, reading small

	 * data like ID and status, and preforming read-copy-write operations

	 * when writing to a codeword partially. 532 is the maximum possible

	 * size of a codeword for our nand controller

		/*

		 * Initially allocate BAM transaction to read ONFI param page.

		 * After detecting all the devices, this BAM transaction will

		 * be freed and the next BAM tranasction will be allocated with

		 * maximum codeword size

 one time setup of a few nand controller registers */

 kill onenand */

 enable ADM or BAM DMA */

		/*

		 *NAND_CTRL is an operational registers, and CPU

		 * access to operational registers are read only

		 * in BAM mode. So update the NAND_CTRL register

		 * only if it is not in BAM mode. In most cases BAM

		 * mode will be enabled in bootloader

 save the original values of these registers */

	/*

	 * the bad block marker is readable only when we read the last codeword

	 * of a page with ECC disabled. currently, the nand_base and nand_bbt

	 * helpers don't allow us to read BB from a nand chip with ECC

	 * disabled (MTD_OPS_PLACE_OOB is set by default). use the block_bad

	 * and block_markbad helpers until we permanently switch to using

	 * MTD_OPS_RAW for all drivers (with the help of badblockbits)

 set up initial status value */

 parse custom DT properties here */

/*

 * data will hold a struct pointer containing more differences once we support

 * more controller variants

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2017 Free Electrons

 * Copyright (C) 2017 NextThing Co

 *

 * Author: Boris Brezillon <boris.brezillon@free-electrons.com>

/*

 * Special Micron status bit 3 indicates that the block has been

 * corrected by on-die ECC and should be rewritten.

/*

 * On chips with 8-bit ECC and additional bit can be used to distinguish

 * cases where a errors were corrected without needing a rewrite

 *

 * Bit 4 Bit 3 Bit 0 Description

 * ----- ----- ----- -----------

 * 0     0     0     No Errors

 * 0     0     1     Multiple uncorrected errors

 * 0     1     0     4 - 6 errors corrected, recommend rewrite

 * 0     1     1     Reserved

 * 1     0     0     1 - 3 errors corrected

 * 1     0     1     Reserved

 * 1     1     0     7 - 8 errors corrected, recommend rewrite

/*

 * Configure chip properties from Micron vendor-specific ONFI table

	/*

	 * The internal ECC doesn't tell us the number of bitflips that have

	 * been corrected, but tells us if it recommends to rewrite the block.

	 * If it's the case, we need to read the page in raw mode and compare

	 * its content to the corrected version to extract the actual number of

	 * bitflips.

	 * But before we do that, we must make sure we have all OOB bytes read

	 * in non-raw mode, even if the user did not request those bytes.

		/*

		 * We first check which operation is supported by the controller

		 * before running it. This trick makes it possible to support

		 * all controllers, even the most constraints, without almost

		 * any performance hit.

		 *

		 * TODO: could be enhanced to avoid repeating the same check

		 * over and over in the fast path.

	/*

	 * With 8/512 we have more information but still don't know precisely

	 * how many bit-flips were seen.

 rewrite recommended */

 rewrite recommended */

	/*

	 * We first check which operation is supported by the controller before

	 * running it. This trick makes it possible to support all controllers,

	 * even the most constraints, without almost any performance hit.

	 *

	 * TODO: could be enhanced to avoid repeating the same check over and

	 * over in the fast path.

 The NAND flash doesn't support on-die ECC */

	/*

	 * The NAND flash supports on-die ECC and it can be

	 * enabled/disabled by a set features command.

	/*

	 * The NAND flash supports on-die ECC, and it cannot be

	 * disabled.

/*

 * Try to detect if the NAND support on-die ECC. To do this, we enable

 * the feature, and read back if it has been enabled as expected. We

 * also check if it can be disabled, because some Micron NANDs do not

 * allow disabling the on-die ECC and we don't support such NANDs for

 * now.

 *

 * This function also has the side effect of disabling on-die ECC if

 * it had been left enabled by the firmware/bootloader.

	/*

	 * We only support on-die ECC of 4/512 or 8/512

 0x2 means on-die ECC is available. */

	/*

	 * It seems that there are devices which do not support ECC officially.

	 * At least the MT29F2G08ABAGA / MT29F2G08ABBGA devices supports

	 * enabling the ECC feature but don't reflect that to the READ_ID table.

	 * So we have to guarantee that we disable the ECC feature directly

	 * after we did the READ_ID table command. Later we can evaluate the

	 * ECC_ENABLE support.

	/*

	 * We only support on-die ECC of 4/512 or 8/512

		/*

		 * In case of 4bit on-die ECC, we need a buffer to store a

		 * page dumped in raw mode so that we can compare its content

		 * to the same page after ECC correction happened and extract

		 * the real number of bitflips from this comparison.

		 * That's not needed for 8-bit ECC, because the status expose

		 * a better approximation of the number of bitflips in a page.

	/*

	 * MT29F1G08ABAFAWP-ITE:F and possibly others report 00 00 for the

	 * revision number field of the ONFI parameter page. Assume ONFI

	 * version 1.0 if the revision number is 00 00.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * TXx9 NAND flash memory controller driver

 * Based on RBTX49xx patch from CELF patch archive.

 *

 * (C) Copyright TOSHIBA CORPORATION 2004-2007

 * All Rights Reserved.

 TXX9 NDFMC Registers */

 not TX4939 */

 NDFMCR : NDFMC Mode Control */

 TX4925/TX4926 only */

 TX4939 only */

 NDFMCR : NDFMC Status */

 TX4939 only */

 NDFMCR : NDFMC Reset */

 in gbusclock */

 in gbusclock */

 TXX9_NDFMCR_CE bit is 0:high 1:low */

 dummy write to update external latch */

 no NDFRSTR.  Write to NDFSPR resets the NDFMC. */

 reset NDFMC */

 setup Hold Time, Strobe Pulse Width */

 tDH */

 max(tREADID, tWP, tRP) */

 actual hold time : (HOLD + 2) BUSCLK */

 actual wait time : (SPW + 1) BUSCLK */

 SPDX-License-Identifier: GPL-2.0 OR MIT

/*

 * Rockchip NAND Flash controller driver.

 * Copyright (C) 2020 Rockchip Inc.

 * Author: Yifeng Zhao <yifeng.zhao@rock-chips.com>

/*

 * NFC Page Data Layout:

 *	1024 bytes data + 4Bytes sys data + 28Bytes~124Bytes ECC data +

 *	1024 bytes data + 4Bytes sys data + 28Bytes~124Bytes ECC data +

 *	......

 * NAND Page Data Layout:

 *	1024 * n data + m Bytes oob

 * Original Bad Block Mask Location:

 *	First byte of oob(spare).

 * nand_chip->oob_poi data layout:

 *	4Bytes sys data + .... + 4Bytes sys data + ECC data.

 NAND controller register definition */

 0: read, 1: write */

 Auto correct error bits. */

 0: write, 1: read */

 0: 1, 1: 2, 2: 4 */

 0: 1, 3: 4, 5: 8, 7: 16 */

 1 - 16 */

 Some Socs only have 1 or 2 CSs. */

 4 bytes sys data in oob pre 1024 data.*/

 150 Mhz */

/**

 * struct rk_ecc_cnt_status: represent a ecc status data.

 * @err_flag_bit: error flag bit index at register.

 * @low: ECC count low bit index at register.

 * @low_mask: mask bit.

 * @low_bn: ECC count low bit number.

 * @high: ECC count high bit index at register.

 * @high_mask: mask bit

/**

 * @type: NFC version

 * @ecc_strengths: ECC strengths

 * @ecc_cfgs: ECC config values

 * @flctl_off: FLCTL register offset

 * @bchctl_off: BCHCTL register offset

 * @dma_data_buf_off: DMA_DATA_BUF register offset

 * @dma_oob_buf_off: DMA_OOB_BUF register offset

 * @dma_cfg_off: DMA_CFG register offset

 * @dma_st_off: DMA_ST register offset

 * @bch_st_off: BCG_ST register offset

 * @randmz_off: RANDMZ register offset

 * @int_en_off: interrupt enable register offset

 * @int_clr_off: interrupt clean register offset

 * @int_st_off: interrupt status register offset

 * @oob0_off: oob0 register offset

 * @oob1_off: oob1 register offset

 * @ecc0: represent ECC0 status data

 * @ecc1: represent ECC1 status data

 Nothing after this field. */

 Save chip ECC setting */

 Deselect the currently selected target. */

	/*

	 * Compare current chip timing with selected chip timing and

	 * change if needed.

	/*

	 * Compare current chip ECC setting with selected chip ECC setting and

	 * change if needed.

 Turn clock rate into kHz. */

	/*

	 * ACCON: access timing control register

	 * -------------------------------------

	 * 31:18: reserved

	 * 17:12: csrw, clock cycles from the falling edge of CSn to the

	 *   falling edge of RDn or WRn

	 * 11:11: reserved

	 * 10:05: rwpw, the width of RDn or WRn in processor clock cycles

	 * 04:00: rwcs, clock cycles from the rising edge of RDn or WRn to the

	 *   rising edge of CSn

 Save chip timing */

		/*

		 * There's currently no method to notify the MTD framework that

		 * a different ECC strength is in use for the boot blocks.

 Copy data to the NFC buffer. */

		/*

		 * The first four bytes of OOB are reserved for the

		 * boot ROM. In some debugging cases, such as with a

		 * read, erase and write back test these 4 bytes stored

		 * in OOB also need to be written back.

		 *

		 * The function nand_block_bad detects bad blocks like:

		 *

		 * bad = chip->oob_poi[chip->badblockpos];

		 *

		 * chip->badblockpos == 0 for a large page NAND Flash,

		 * so chip->oob_poi[0] is the bad block mask (BBM).

		 *

		 * The OOB data layout on the NFC is:

		 *

		 *    PA0  PA1  PA2  PA3  | BBM OOB1 OOB2 OOB3 | ...

		 *

		 * or

		 *

		 *    0xFF 0xFF 0xFF 0xFF | BBM OOB1 OOB2 OOB3 | ...

		 *

		 * The code here just swaps the first 4 bytes with the last

		 * 4 bytes without losing any data.

		 *

		 * The chip->oob_poi data layout:

		 *

		 *    BBM  OOB1 OOB2 OOB3 |......|  PA0  PA1  PA2  PA3

		 *

		 * The rk_nfc_ooblayout_free() function already has reserved

		 * these 4 bytes with:

		 *

		 * oob_region->offset = NFC_SYS_DATA_SIZE + 2;

 Copy ECC data to the NFC buffer. */

	/*

	 * The first blocks (4, 8 or 16 depending on the device) are used

	 * by the boot ROM and the first 32 bits of OOB need to link to

	 * the next page address in the same block. We can't directly copy

	 * OOB data from the MTD framework, because this page address

	 * conflicts for example with the bad block marker (BBM),

	 * so we shift all OOB data including the BBM with 4 byte positions.

	 * As a consequence the OOB size available to the MTD framework is

	 * also reduced with 4 bytes.

	 *

	 *    PA0  PA1  PA2  PA3 | BBM OOB1 OOB2 OOB3 | ...

	 *

	 * If a NAND is not a boot medium or the page is not a boot block,

	 * the first 4 bytes are left untouched by writing 0xFF to them.

	 *

	 *   0xFF 0xFF 0xFF 0xFF | BBM OOB1 OOB2 OOB3 | ...

	 *

	 * Configure the ECC algorithm supported by the boot ROM.

	/*

	 * Whether the DMA transfer is completed or not. The driver

	 * needs to check the NFC`s status register to see if the data

	 * transfer was completed.

		/*

		 * There's currently no method to notify the MTD framework that

		 * a different ECC strength is in use for the boot blocks.

		/*

		 * The first four bytes of OOB are reserved for the

		 * boot ROM. In some debugging cases, such as with a read,

		 * erase and write back test, these 4 bytes also must be

		 * saved somewhere, otherwise this information will be

		 * lost during a write back.

 Copy ECC data from the NFC buffer. */

 Copy data from the NFC buffer. */

	/*

	 * The first blocks (4, 8 or 16 depending on the device)

	 * are used by the boot ROM.

	 * Configure the ECC algorithm supported by the boot ROM.

	/*

	 * Whether the DMA transfer is completed or not. The driver

	 * needs to check the NFC`s status register to see if the data

	 * transfer was completed.

 Disable flash wp. */

 Config default timing 40ns at 150 Mhz NFC clock. */

 Disable randomizer and DMA. */

	/*

	 * The beginning of the OOB area stores the reserved data for the NFC,

	 * the size of the reserved data is NFC_SYS_DATA_SIZE bytes.

 If optional dt settings not present. */

		/*

		 * HW ECC always requests the number of ECC bytes per 1024 byte

		 * blocks. The first 4 OOB bytes are reserved for sys data.

 Check buffer first, avoid duplicate alloc buffer. */

 Set default mode in case dt entry is missing. */

 sentinel */ }

 Some earlier models, such as rk3066, have no NFC clk. */

 Reset NAND chip if VCC was powered off. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2019 Macronix International Co., Ltd.

 *

 * Author:

 *	Mason Yang <masonccyang@mxic.com.tw>

	/*

	 * A constant delay range from 0x0 ~ 0x1F for input delay,

	 * the unit is 78 ps, the max input delay is 2.418 ns.

	/*

	 * Phase degree = 360 * freq * output-delay

	 * where output-delay is a constant value 1 ns in FPGA.

	 *

	 * Get Phase degree = 360 * freq * 1 ns

	 *                  = 360 * freq * 1 sec / 1000000000

	 *                  = 9 * freq / 25000000

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright © 2009 - Maxim Levitsky

 * Common routines & support for xD format

 reserved */

 LBA1 */

 LBA2 */

 NOTE: This layout is is not compatabable with SmartMedia, */

 because the 256 byte devices have page depenent oob layout */

 However it does preserve the bad block markers */

 If you use smftl, it will bypass this and work correctly */

 If you not, then you break SmartMedia compliance anyway */

 reserved */

 LBA1 */

	/* As long as this function is called on erase block boundaries

 Bad block marker position */

 ECC layout */

 Scan for card properties */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright (C) 2002 Thomas Gleixner (tglx@linutronix.de)

/*

 * The chip ID list:

 *    name, device ID, page size, chip size in MiB, eraseblock size, options

 *

 * If page size and eraseblock size are 0, the sizes are taken from the

 * extended chip ID.

	/*

	 * Some incompatible NAND chips share device ID's and so must be

	 * listed by full ID. We list them first so that we can easily identify

	 * the most specific match.

	/*

	 * These are the new chips with large page size. Their page size and

	 * eraseblock size are determined from the extended ID bytes.

 512 Megabit */

 1 Gigabit */

 2 Gigabit */

 4 Gigabit */

 8 Gigabit */

 16 Gigabit */

 32 Gigabit */

 64 Gigabit */

 128 Gigabit */

 256 Gigabit */

 512 Gigabit */

 Manufacturer IDs */

/**

 * nand_get_manufacturer_desc - Get manufacturer information from the

 *                              manufacturer ID

 * @id: manufacturer ID

 *

 * Returns a nand_manufacturer_desc object if the manufacturer is defined

 * in the NAND manufacturers database, NULL otherwise.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2017 Free Electrons

 * Copyright (C) 2017 NextThing Co

 *

 * Author: Boris Brezillon <boris.brezillon@free-electrons.com>

 Bit for detecting BENAND */

 Recommended to rewrite for BENAND */

 ECC Status Read Command for BENAND */

 ECC Status Mask for BENAND */

 Uncorrectable Error for BENAND */

 Max ECC Steps for BENAND */

 Check Status */

	/*

	 * Fallback to regular status check if

	 * toshiba_nand_benand_read_eccstatus_op() failed.

 uncorrected */

 corrected */

	/*

	 * On BENAND, the entire OOB region can be used by the MTD user.

	 * The calculated ECC bytes are stored into other isolated

	 * area which is not accessible to users.

	 * This is why chip->ecc.bytes = 0.

	/*

	 * Toshiba 24nm raw SLC (i.e., not BENAND) have 32B OOB per

	 * 512B page. For Toshiba SLC, we decode the 5th/6th byte as

	 * follows:

	 * - ID byte 6, bits[2:0]: 100b -> 43nm, 101b -> 32nm,

	 *                         110b -> 24nm

	 * - ID byte 5, bit[7]:    1 -> BENAND, 0 -> raw SLC

 24nm */ &&

 !BENAND */) {

	/*

	 * Extract ECC requirements from 6th id byte.

	 * For Toshiba SLC, ecc requrements are as follows:

	 *  - 43nm: 1 bit ECC for each 512Byte is required.

	 *  - 32nm: 4 bit ECC for each 512Byte is required.

	 *  - 24nm: 8 bit ECC for each 512Byte is required.

 Start with timings from the closest timing mode, mode 4. */

 Patch timings that differ from mode 4. */

 Patch timings not part of onfi timing mode. */

 Check that chip is BENAND and ECC mode is on-die */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2017 Free Electrons

 * Copyright (C) 2017 NextThing Co

 *

 * Author: Boris Brezillon <boris.brezillon@free-electrons.com>

	/*

	 * Check for Spansion/AMD ID + repeating 5th, 6th byte since

	 * some Spansion chips have erasesize that conflicts with size

	 * listed in nand_ids table.

	 * Data sheet (5 byte ID): Spansion S30ML-P ORNAND (p.39)

		/*

		 * According to the datasheet of some Cypress SLC NANDs,

		 * the bad block markers can be in the first, second or last

		 * page of a block. So let's check all three locations.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright (C) 2014 Free Electrons

 *

 *  Author: Boris BREZILLON <boris.brezillon@free-electrons.com>

/*

 * For non-ONFI chips we use the highest possible value for tPROG and tBERS.

 * tR and tCCS will take the default values precised in the ONFI specification

 * for timing mode 0, respectively 200us and 500ns.

 *

 * These four values are tweaked to be more accurate in the case of ONFI chips.

 Mode 0 */

 Mode 1 */

 Mode 2 */

 Mode 3 */

 Mode 4 */

 Mode 5 */

 Mode 0 */

 Mode 1 */

 Mode 2 */

 Mode 3 */

 Mode 4 */

 Mode 5 */

 All NAND chips share the same reset data interface: SDR mode 0 */

/**

 * onfi_find_closest_sdr_mode - Derive the closest ONFI SDR timing mode given a

 *                              set of timings

 * @spec_timings: the timings to challenge

/**

 * onfi_find_closest_nvddr_mode - Derive the closest ONFI NVDDR timing mode

 *                                given a set of timings

 * @spec_timings: the timings to challenge

/*

 * onfi_fill_sdr_interface_config - Initialize a SDR interface config from a

 *                                  given ONFI mode

 * @chip: The NAND chip

 * @iface: The interface configuration to fill

 * @timing_mode: The ONFI timing mode

	/*

	 * Initialize timings that cannot be deduced from timing mode:

	 * tPROG, tBERS, tR and tCCS.

	 * These information are part of the ONFI parameter page.

 microseconds -> picoseconds */

 nanoseconds -> picoseconds */

/**

 * onfi_fill_nvddr_interface_config - Initialize a NVDDR interface config from a

 *                                    given ONFI mode

 * @chip: The NAND chip

 * @iface: The interface configuration to fill

 * @timing_mode: The ONFI timing mode

	/*

	 * Initialize timings that cannot be deduced from timing mode:

	 * tPROG, tBERS, tR, tCCS and tCAD.

	 * These information are part of the ONFI parameter page.

 microseconds -> picoseconds */

 nanoseconds -> picoseconds */

/**

 * onfi_fill_interface_config - Initialize an interface config from a given

 *                              ONFI mode

 * @chip: The NAND chip

 * @iface: The interface configuration to fill

 * @type: The interface type

 * @timing_mode: The ONFI timing mode

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for One Laptop Per Child ‘CAFÉ’ controller, aka Marvell 88ALP01

 *

 * The data sheet for this device can be found at:

 *    http://wiki.laptop.org/go/Datasheets 

 *

 * Copyright © 2006 Red Hat, Inc.

 * Copyright © 2006 David Woodhouse <dwmw2@infradead.org>

 Missing from the datasheet: bit 19 of CTRL1 sets CE0 vs. CE1 */

 Hrm. Why isn't this already conditional on something in the struct device? */

 Make it easier to switch to PIO if we need to */

 Second half of a command we already calculated */

 Reset ECC engine */

 Emulate NAND_CMD_READOOB on large-page chips */

	/* FIXME: Do we need to send read command before sending data

 Set command valid bit, mask in the chip select bit  */

 Set RD or WR bits as appropriate */

 rd */

 Always 5 bytes, for now */

 And one address cycle -- even for STATUS, since the controller doesn't work without */

 rd */

 For now, assume just read to end of page */

 wr */

 Set number of address bytes */

		/* Ignore the first command of a pair; the hardware

 RNDOUT and READ0 commands need a following byte */

 NB: The datasheet lies -- we really should be subtracting 1 here */

 If WR or RD bits set, set up DMA */

 It's a read */

			/* ... so it's done when the DMA is done, not just

	/* Apply this short delay always to ensure that we do wait tWB in

	/* Mask the appropriate bit into the stored value of ctl1

 Don't use -- use nand_read_oob_std for now */

/**

 * cafe_nand_read_page_syndrome - [REPLACEABLE] hardware ecc syndrome based page read

 * @chip:	nand chip info structure

 * @buf:	buffer to store read data

 * @oob_required:	caller expects OOB data read to chip->oob_poi

 * @page:	page number to read

 *

 * The hw generator calculates the error syndrome automatically. Therefore

 * we need a special oob layout and handling.

 The 12-bit symbols are mapped to bytes here */

 out of range */

 high four bits do not correspond to data */

/* Ick. The BBT code really ought to be able to work this bit out

 Set up ECC autogeneration */

 F_2[X]/(X**6+X+1)  */

 F_64[X]/(X**2+X+A**-1) with A the generator of F_64[X]  */

 Set up DMA address */

 Restore the DMA flag */

 Reed-Solomon ECC */

 2KiB page size */

 Set up ECC according to the type of chip we found */

	/* Very old versions shared the same PCI ident for all three

 Enable the following for a flash based bad block table */

 Start off by resetting the NAND controller completely */

 Disable master reset, enable NAND clock */

 Enable NAND IRQ in global IRQ mask register */

 Do not use the DMA during the NAND identification */

 Scan to find existence of the device */

 Disable NAND IRQ in global IRQ mask register */

 Disable NAND IRQ in global IRQ mask register */

 Start off by resetting the NAND controller completely */

 Restore timing configuration */

 Disable master reset, enable NAND clock */

 Set up DMA address */

 Shift in two parts to shut the compiler up */

 Enable NAND IRQ in global IRQ mask register */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright © 2004-2008 Simtec Electronics

 *	http://armlinux.simtec.co.uk/

 *	Ben Dooks <ben@simtec.co.uk>

 *

 * Samsung S3C2410/S3C2440/S3C2412 NAND driver

/* new oob placement block for use with hardware ecc generation

 controller and mtd information */

/**

 * struct s3c2410_nand_mtd - driver MTD structure

 * @mtd: The MTD instance to pass to the MTD layer.

 * @chip: The NAND chip information.

 * @set: The platform information supplied for this set of NAND chips.

 * @info: Link back to the hardware information.

 overview of the s3c2410 nand state */

/**

 * struct s3c2410_nand_info - NAND controller state.

 * @controller: Base controller structure.

 * @mtds: An array of MTD instances on this controller.

 * @platform: The platform data for this board.

 * @device: The platform device we bound to.

 * @clk: The clock resource for this controller.

 * @regs: The area mapped for the hardware registers.

 * @sel_reg: Pointer to the register controlling the NAND selection.

 * @sel_bit: The bit in @sel_reg to select the NAND chip.

 * @mtd_count: The number of MTDs created from this controller.

 * @save_sel: The contents of @sel_reg to be saved over suspend.

 * @clk_rate: The clock rate from @clk.

 * @clk_state: The current clock state.

 * @cpu_type: The exact type of this controller.

 * @freq_transition: CPUFreq notifier block

 mtd info */

 device info */

 conversion functions */

/**

 * s3c2410_nand_clk_set_state - Enable, disable or suspend NAND clock.

 * @info: The controller instance.

 * @new_state: State to which clock should be set.

 timing calculations */

/**

 * s3c_nand_calc_rate - calculate timing data.

 * @wanted: The cycle time in nanoseconds.

 * @clk: The clock rate in kHz.

 * @max: The maximum divider value.

 *

 * Calculate the timing value from the given parameters.

 controller setup */

/**

 * s3c2410_nand_setrate - setup controller timing information.

 * @info: The controller instance.

 *

 * Given the information supplied by the platform, calculate and set

 * the necessary timing registers in the hardware to generate the

 * necessary timing cycles to the hardware.

 calculate the timing information for the controller */

 turn clock into kHz for ease of use */

 default timings */

/**

 * s3c2410_nand_inithw - basic hardware initialisation

 * @info: The hardware state.

 *

 * Do the basic initialisation of the hardware, using s3c2410_nand_setrate()

 * to setup the hardware access speeds and set the controller to be enabled.

 enable the controller and de-assert nFCE */

/**

 * s3c2410_nand_select_chip - select the given nand chip

 * @this: NAND chip object.

 * @chip: The chip number.

 *

 * This is called by the MTD layer to either select a given chip for the

 * @mtd instance, or to indicate that the access has finished and the

 * chip can be de-selected.

 *

 * The routine ensures that the nFCE line is correctly setup, and any

 * platform specific selection code is called to route nFCE to the specific

 * chip.

/* s3c2410_nand_hwcontrol

 *

 * Issue command and address cycles to the chip

 command and control functions */

/* s3c2410_nand_devready()

 *

 * returns 0 if the nand is busy, 1 if it is ready

 ECC handling functions */

 ECC is ok */

	/* sometimes people do not think about using the ECC, so check

	 * to see if we have an 0xff,0xff,0xff read ECC and then ignore

	 * the error, on the assumption that this is an un-eccd page.

	/* Can we correct this ECC (ie, one row and column change).

 calculate the bit position of the error */

 calculate the byte position of the error */

	/* if there is only one bit difference in the ECC, then

	 * one of only a row or column parity has changed, which

 equal to "(diff0 & ~(1 << __ffs(diff0)))" */

/* ECC functions

 *

 * These allow the s3c2410 and s3c2440 to use the controller's ECC

 * generator block to ECC the data as it passes through]

/* over-ride the standard functions for a little more speed. We can

 * use read/write block to move the data buffers to/from the controller

 cleanup if we've got less than a word to do */

 cleanup any fractional write */

 cpufreq driver support */

 device management functions */

	/* Release all our mtds  and their partitions, then go through

	 * freeing the resources used

 free the common resources */

/**

 * s3c2410_nand_init_chip - initialise a single instance of an chip

 * @info: The base NAND controller the chip is on.

 * @nmtd: The new controller MTD instance to fill in.

 * @set: The information passed from the board specific platform data.

 *

 * Initialise the given @nmtd from the information in @info and @set. This

 * readies the structure for use with the MTD layer functions by ensuring

 * all pointers are setup and the necessary control routines selected.

	/*

	 * let's keep behavior unchanged for legacy boards booting via pdata and

	 * auto-detect timings only when booting with a device tree.

	/*

	 * If you use u-boot BBT creation code, specifying this flag will

	 * let the kernel fish out the BBT from the NAND.

/**

 * s3c2410_nand_attach_chip - Init the ECC engine after NAND scan

 * @chip: The NAND chip

 *

 * This hook is called by the core after the identification of the NAND chip,

 * once the relevant per-chip information is up to date.. This call ensure that

 * we update the internal state accordingly.

 *

 * The internal state is currently limited to the ECC state information.

		/*

		 * This driver expects Hamming based ECC when engine_type is set

		 * to NAND_ECC_ENGINE_TYPE_SOFT. Force ecc.algo to

		 * NAND_ECC_ALGO_HAMMING to avoid adding an extra ecc_algo field

		 * to s3c2410_platform_nand.

		/* change the behaviour depending on whether we are using

 also compatible with s3c6400 */

 sentinel */ }

/* s3c24xx_nand_probe

 *

 * called by device layer when it finds a device matching

 * one our driver can handled. This code checks to see if

 * it can allocate all necessary resources then calls the

 * nand layer to look for devices

 get the clock source and enable it */

 allocate and map the resource */

 currently we assume we have the one resource */

 allocate our information */

 initialise all possible chips */

 initialise the hardware */

 PM Support */

		/* For the moment, we must ensure nFCE is high during

		 * the time we are suspended. This really should be

		 * handled by suspending the MTDs we are using, but

 Restore the state of the nFCE line. */

 driver device registration */

 compatible with 2412 */

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 2006 Jonathan McDowell <noodles@earth.li>

 *

 *  Derived from drivers/mtd/nand/toto.c (removed in v2.6.28)

 *    Copyright (c) 2003 Texas Instruments

 *    Copyright (c) 2002 Thomas Gleixner <tgxl@linutronix.de>

 *

 *  Converted to platform driver by Janusz Krzysztofik <jkrzyszt@tis.icnet.pl>

 *  Partially stolen from plat_nand.c

 *

 *  Overview:

 *   This is a device driver for the NAND flash device found on the

 *   Amstrad E3 (Delta).

/*

 * MTD structure for E3 (Delta)

/*

 * Main initialization routine

 Allocate memory for MTD device structure and private data */

 Set chip enabled but write protected */

 Request array of data pins, initialize them as input */

 Initialize the NAND controller object embedded in gpio_nand. */

	/*

	 * FIXME: We should release write protection only after nand_scan() to

	 * be on the safe side but we can't do that until we have a generic way

	 * to assert/deassert WP from the core.  Even if the core shouldn't

	 * write things in the nand_scan() path, it should have control on this

	 * pin just in case we ever need to disable write protection during

	 * chip detection/initialization.

 Release write protection */

	/*

	 * This driver assumes that the default ECC engine should be TYPE_SOFT.

	 * Set ->engine_type before registering the NAND devices in order to

	 * provide a driver specific default value.

 Scan to find existence of the device */

 Register the partitions */

/*

 * Clean up routine

 Apply write protection */

 Unregister device */

 sentinel */

 sentinel */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Freescale Integrated Flash Controller NAND driver

 *

 * Copyright 2011-2012 Freescale Semiconductor, Inc

 *

 * Author: Dipen Dudhat <Dipen.Dudhat@freescale.com>

#define ERR_BYTE		0xFF /* Value returned for read

#define IFC_TIMEOUT_MSECS	500  /* Maximum number of mSecs to wait

 mtd information per set */

 Chip select bank number		*/

 bufnum = page & bufnum_mask */

 Chip select base virtual address	*/

 overview of the fsl ifc controller */

 Address of assigned IFC buffer	*/

 Last page written to / read from	*/

 Number of bytes read during command	*/

 Saved column from SEQIN		*/

 Pointer to next byte to 'read'	*/

 Non zero if operating on OOB data	*/

 Non zero for a full-page ECC read	*/

 counter for the initializations	*/

 Saved during READ0 cmd		*/

/*

 * Generic flash bbt descriptors

 0 on 8-bit small page */

 0 on 8-bit small page */

/*

 * Set up the IFC hardware block and page address fields, and the ifc nand

 * structure addr field to point to the correct IFC buffer in memory

 Program ROW0/COL0 */

 for OOB data point to the second half of the buffer */

 returns nonzero if entire page is blank */

/*

 * execute IFC NAND command and wait for it to complete

 set the chip select for NAND Transaction */

 start read/write seq */

 wait for command complete flag or timeout */

 ctrl->nand_stat will be updated from IRQ context */

				/*

				 * Uncorrectable error.

				 * We'll check for blank pages later.

				 *

				 * We disable ECCER reporting due to...

				 * erratum IFC-A002770 -- so report it now if we

				 * see an uncorrectable error in ECCSTAT.

 Program FIR/IFC_NAND_FCR0 for Small/Large page */

 cmdfunc send commands to the IFC NAND Machine */

 clear the read buffer */

 READ0 read the entire buffer to use hardware ECC. */

 READOOB reads only the OOB because no ECC is performed. */

		/*

		 * For READID, read 8 bytes that are currently used.

		 * For PARAM, read all 3 copies of 256-bytes pages.

 ERASE1 stores the block and page address */

 ERASE2 uses the block and page address from ERASE1 */

 SEQIN sets up the addr buffer and all registers except the length */

 OOB area --> READOOB */

 PAGEPROG reuses all of the setup from SEQIN and adds the length */

		/*

		 * The chip always seems to report that it is

		 * write-protected, even when it is not.

	/* The hardware does not seem to support multiple

	 * chips per bank.

/*

 * Write buf to the IFC NAND Controller Data Buffer

/*

 * Read a byte from either the IFC hardware buffer

 * read function for 8-bit buswidth

	/*

	 * If there are still bytes in the IFC buffer, then use the

	 * next byte.

/*

 * Read two bytes from the IFC hardware buffer

 * read function for 16-bit buswith

	/*

	 * If there are still bytes in the IFC buffer, then use the

	 * next byte.

/*

 * Read from the IFC Controller Data Buffer

/*

 * This function is called after Program and Erase Operations to

 * check for success or failure.

 Use READ_STATUS command, but wait for the device to be ready */

	/*

	 * The chip always seems to report that it is

	 * write-protected, even when it is not.

/*

 * The controller does not check for bitflips in erased pages,

 * therefore software must check instead.

/* ECC will be calculated automatically, and errors will be detected in

 * waitfunc.

 Must also set CSOR_NAND_ECC_ENC_EN if DEC_EN set */

 Hardware generates ECC per 512 Bytes */

 Trigger auto initialization */

 Wait until done */

 Save CSOR and CSOR_ext */

 chage PageSize 8K and SpareSize 1K*/

 READID */

 Program ROW0/COL0 */

 set the chip select for NAND Transaction */

 start read seq */

 wait for command complete flag or timeout */

 Restore CSOR and CSOR_ext */

 Fill in fsl_ifc_mtd structure */

 fill in nand_chip structure */

 set up function call table */

 set up nand options */

 Avoid conflict with bad block marker */

	/*

	 * As IFC version 2.0.0 has 16KB of internal SRAM as compared to older

	 * versions which had 8KB. Hence bufnum mask needs to be updated.

 get, allocate and map the memory resource */

 find which chip select it is connected to */

 enable NAND Machine Interrupts */

	/* First look for RedBoot table or partitions on the command

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Freescale UPM NAND driver.

 *

 * Copyright © 2007-2008  MontaVista Software, Inc.

 *

 * Author: Anton Vorontsov <avorontsov@ru.mvista.com>

 SPDX-License-Identifier: GPL-2.0

/*

 * NAND Flash Controller Device Driver

 * Copyright © 2009-2010, Intel Corporation and its suppliers.

 *

 * Copyright (c) 2017-2019 Socionext Inc.

 *   Reworked by Masahiro Yamada <yamada.masahiro@socionext.com>

 for Indexed Addressing */

 direct access to buffer */

 read/write pages in PIO */

 high-level control plane */

 direct controller access */

 MAP11 access cycle type */

 command cycle */

 address cycle */

 data cycle */

/*

 * Direct Addressing - the slave address forms the control information (command

 * type, bank, block, and page address).  The slave data is the actual data to

 * be transferred.  This mode requires 28 bits of address region allocated.

/*

 * Indexed Addressing - address translation module intervenes in passing the

 * control information.  This mode reduces the required address range.  The

 * control information and transferred data are latched by the registers in

 * the translation module.

 write one to clear bits */

 return immediately if the IRQ has already happened. */

 update timing registers unless NAND_KEEP_TIMINGS is set */

 This chunk overwraps the BBM area. Must be split */

 BBM at the beginning of the OOB area */

 The last chunk includes OOB free */

 This chunk overwraps the BBM area. Must be split */

		/*

		 * This flag is set when uncorrectable error occurs at least in

		 * one ECC sector.  We can not know "how many sectors", or

		 * "which sector(s)".  We need erase-page check for all sectors.

	/*

	 * The register holds the maximum of per-sector corrected bitflips.

	 * This is suitable for the return value of the ->read_page() callback.

	 * Unfortunately, we can not know the total number of corrected bits in

	 * the page.  Increase the stats by max_bitflips. (compromised solution)

 reset the bitflip counter when crossing ECC sector */

			/*

			 * Check later if this is a real ECC error, or

			 * an erased sector.

			/*

			 * If err_byte is larger than ecc_size, means error

			 * happened in OOB, so we ignore it. It's no need for

			 * us to correct it err_device is represented the NAND

			 * error bits are happened in if there are more than

			 * one NAND connected.

 correct the ECC error */

	/*

	 * Once handle all ECC errors, controller will trigger an

	 * ECC_TRANSACTION_DONE interrupt.

 DMA is a three step process */

	/*

	 * 1. setup transfer type, interrupt when complete,

	 *    burst len = 64 bytes, the number of pages

 2. set memory low address */

 3. set memory high address */

 DMA is a four step process */

 1. setup transfer type and # of pages */

 2. set memory high address bits 23:8 */

 3. set memory low address bits 23:8 */

 4. interrupt when complete, burst len = 64 bytes */

		/*

		 * INTR__PROGRAM_COMP is never asserted for the DMA transfer.

		 * We can use INTR__DMA_CMD_COMP instead.  This flag is asserted

		 * when the page program is completed.

	/*

	 * The ->setup_dma() hook kicks DMA by using the data/command

	 * interface, which belongs to a different AXI port from the

	 * register interface.  Read back the register to avoid a race.

 clk_x period in picoseconds */

	/*

	 * The bus interface clock, clk_x, is phase aligned with the core clock.

	 * The clk_x is an integral multiple N of the core clk.  The value N is

	 * configured at IP delivery time, and its available value is 4, 5, 6.

 tRWH -> RE_2_WE */

 tRHZ -> RE_2_RE */

	/*

	 * tCCS, tWHR -> WE_2_RE

	 *

	 * With WE_2_RE properly set, the Denali controller automatically takes

	 * care of the delay; the driver need not set NAND_WAIT_TCCS.

 tADL -> ADDR_2_DATA */

 for older versions, ADDR_2_DATA is only 6 bit wide */

 tREH, tWH -> RDWR_EN_HI_CNT */

	/*

	 * tREA -> ACC_CLKS

	 * tRP, tWP, tRHOH, tRC, tWC -> RDWR_EN_LO_CNT

	/*

	 * Determine the minimum of acc_clks to meet the setup timing when

	 * capturing the incoming data.

	 *

	 * The delay on the chip side is well-defined as tREA, but we need to

	 * take additional delay into account. This includes a certain degree

	 * of unknowledge, such as signal propagation delays on the PCB and

	 * in the SoC, load capacity of the I/O pins, etc.

 Determine the minimum of rdwr_en_lo_cnt from RE#/WE# pulse width */

 Extend rdwr_en_lo to meet the data hold timing */

 Extend rdwr_en_lo to meet the requirement for RE#/WE# cycle time */

 Center the data latch timing for extra safety */

 tCS, tCEA -> CS_SETUP_CNT */

 BCH code.  Denali requires ecc.bytes to be multiple of 2 */

	/*

	 * Support for multi device:

	 * When the IP configuration is x16 capable and two x8 chips are

	 * connected in parallel, DEVICES_CONNECTED should be set to 2.

	 * In this case, the core framework knows nothing about this fact,

	 * so we should tell it the _logical_ pagesize and anything necessary.

	/*

	 * On some SoCs, DEVICES_CONNECTED is not auto-detected.

	 * For those, DEVICES_CONNECTED is left to 0.  Set 1 if it is the case.

 2 chips in parallel */

 bit 31:24 and 15:8 are used for DDR */

 R/B# pin transitioned from low to high? */

 Just in case nand_operation has multiple NAND_OP_WAITRDY_INSTR. */

	/*

	 * Some commands contain NAND_OP_WAITRDY_INSTR.

	 * irq must be cleared here to catch the R/B# interrupt there.

 sanity checks for bank numbers */

	/*

	 * Fallback to the default name if DT did not give "label" property.

	 * Use "label" property if multiple chips are connected.

 clk rate info is needed for setup_interface */

	/*

	 * The REVISION register may not be reliable. Platforms are allowed to

	 * override it.

 the encoding changed from rev 5.0 to 5.1 */

	/*

	 * Set how many bytes should be skipped before writing data in OOB.

	 * If a platform requests a non-zero value, set it to the register.

	 * Otherwise, read the value out, expecting it has already been set up

	 * by firmware.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Error Location Module

 *

 * Copyright (C) 2012 Texas Instruments Incorporated - https://www.ti.com/

 ELM Interrupt Status Register */

 ELM Interrupt Enable Register */

 ELM Location Configuration Register */

 ELM syndrome */

 ELM_LOCATION_STATUS Register */

 ELM_ERROR_LOCATION_0-15 Registers */

/**

 * elm_config - Configure ELM module

 * @dev:	ELM device

 * @bch_type:	Type of BCH ecc

 * @ecc_steps:	ECC steps to assign to config

 * @ecc_step_size:	ECC step size to assign to config

 * @ecc_syndrome_size:	ECC syndrome size to assign to config

 ELM cannot detect ECC errors for chunks > 1KB */

 ELM support 8 error syndrome process */

/**

 * elm_configure_page_mode - Enable/Disable page mode

 * @info:	elm info

 * @index:	index number of syndrome fragment vector

 * @enable:	enable/disable flag for page mode

 *

 * Enable page mode for syndrome fragment index

 enable page mode */

 disable page mode */

/**

 * elm_load_syndrome - Load ELM syndrome reg

 * @info:	elm info

 * @err_vec:	elm error vectors

 * @ecc:	buffer with calculated ecc

 *

 * Load syndrome fragment registers with calculated ecc in reverse order.

 Check error reported */

 syndrome fragment 0 = ecc[9-12B] */

 syndrome fragment 1 = ecc[5-8B] */

 syndrome fragment 2 = ecc[1-4B] */

 syndrome fragment 3 = ecc[0B] */

 syndrome fragment 0 = ecc[20-52b] bits */

 syndrome fragment 1 = ecc[0-20b] bits */

 Update ecc pointer with ecc byte size */

/**

 * elm_start_processing - start elm syndrome processing

 * @info:	elm info

 * @err_vec:	elm error vectors

 *

 * Set syndrome valid bit for syndrome fragment registers for which

 * elm syndrome fragment registers are loaded. This enables elm module

 * to start processing syndrome vectors.

	/*

	 * Set syndrome vector valid, so that ELM module

	 * will process it for vectors error is reported

/**

 * elm_error_correction - locate correctable error position

 * @info:	elm info

 * @err_vec:	elm error vectors

 *

 * On completion of processing by elm module, error location status

 * register updated with correctable/uncorrectable error information.

 * In case of correctable errors, number of errors located from

 * elm location status register & read the positions from

 * elm error location register.

 Check error reported */

 Check correctable error or not */

 Read count of correctable errors */

 Update the error locations in error vector */

 Update error location register */

 Clearing interrupts for processed error vectors */

 Disable page mode */

/**

 * elm_decode_bch_error_page - Locate error position

 * @dev:	device pointer

 * @ecc_calc:	calculated ECC bytes from GPMC

 * @err_vec:	elm error vectors

 *

 * Called with one or more error reported vectors & vectors with

 * error reported is updated in err_vec[].error_reported

 Enable page mode interrupt */

 Load valid ecc byte to syndrome fragment register */

 Enable syndrome processing for which syndrome fragment is updated */

 Wait for ELM module to finish locating error correction */

 Disable page mode interrupt */

 All error vectors processed */

/*

 * elm_context_save

 * saves ELM configurations to preserve them across Hardware powered-down

		/* ELM SYNDROME_VALID bit in SYNDROME_FRAGMENT_6[] needs

/*

 * elm_context_restore

 * writes configurations saved duing power-down back into ELM registers

 ELM_SYNDROME_VALID bit to be set in last to trigger FSM */

 SPDX-License-Identifier: GPL-2.0

/*

 * Marvell NAND flash controller driver

 *

 * Copyright (C) 2017 Marvell

 * Author: Miquel RAYNAL <miquel.raynal@free-electrons.com>

 *

 *

 * This NAND controller driver handles two versions of the hardware,

 * one is called NFCv1 and is available on PXA SoCs and the other is

 * called NFCv2 and is available on Armada SoCs.

 *

 * The main visible difference is that NFCv1 only has Hamming ECC

 * capabilities, while NFCv2 also embeds a BCH ECC engine. Also, DMA

 * is not used with NFCv2.

 *

 * The ECC layouts are depicted in details in Marvell AN-379, but here

 * is a brief description.

 *

 * When using Hamming, the data is split in 512B chunks (either 1, 2

 * or 4) and each chunk will have its own ECC "digest" of 6B at the

 * beginning of the OOB area and eventually the remaining free OOB

 * bytes (also called "spare" bytes in the driver). This engine

 * corrects up to 1 bit per chunk and detects reliably an error if

 * there are at most 2 bitflips. Here is the page layout used by the

 * controller when Hamming is chosen:

 *

 * +-------------------------------------------------------------+

 * | Data 1 | ... | Data N | ECC 1 | ... | ECCN | Free OOB bytes |

 * +-------------------------------------------------------------+

 *

 * When using the BCH engine, there are N identical (data + free OOB +

 * ECC) sections and potentially an extra one to deal with

 * configurations where the chosen (data + free OOB + ECC) sizes do

 * not align with the page (data + OOB) size. ECC bytes are always

 * 30B per ECC chunk. Here is the page layout used by the controller

 * when BCH is chosen:

 *

 * +-----------------------------------------

 * | Data 1 | Free OOB bytes 1 | ECC 1 | ...

 * +-----------------------------------------

 *

 *      -------------------------------------------

 *       ... | Data N | Free OOB bytes N | ECC N |

 *      -------------------------------------------

 *

 *           --------------------------------------------+

 *            Last Data | Last Free OOB bytes | Last ECC |

 *           --------------------------------------------+

 *

 * In both cases, the layout seen by the user is always: all data

 * first, then all free OOB bytes and finally all ECC bytes. With BCH,

 * ECC bytes are 30B long and are padded with 0xFF to align on 32

 * bytes.

 *

 * The controller has certain limitations that are handled by the

 * driver:

 *   - It can only read 2k at a time. To overcome this limitation, the

 *     driver issues data cycles on the bus, without issuing new

 *     CMD + ADDR cycles. The Marvell term is "naked" operations.

 *   - The ECC strength in BCH mode cannot be tuned. It is fixed 16

 *     bits. What can be tuned is the ECC block size as long as it

 *     stays between 512B and 2kiB. It's usually chosen based on the

 *     chip ECC requirements. For instance, using 2kiB ECC chunks

 *     provides 4b/512B correctability.

 *   - The controller will always treat data bytes, free OOB bytes

 *     and ECC bytes in that order, no matter what the real layout is

 *     (which is usually all data then all OOB bytes). The

 *     marvell_nfc_layouts array below contains the currently

 *     supported layouts.

 *   - Because of these weird layouts, the Bad Block Markers can be

 *     located in data section. In this case, the NAND_BBT_NO_OOB_BBM

 *     option must be set to prevent scanning/writing bad block

 *     markers.

 Data FIFO granularity, FIFO reads/writes must be a multiple of this length */

 NFC does not support transfers of larger chunks at a time */

 NFCv1 cannot read more that 7 bytes of ID */

 Polling is done at a pace of POLL_PERIOD us until POLL_TIMEOUT is reached */

 Interrupt maximum wait period in ms */

 Latency in clock cycles between SoC pins and NFC logic */

 Maximum number of contiguous address cycles */

 System control registers/bits to enable the NAND controller on some SoCs */

 NAND controller data flash control register */

 NAND interface timing parameter 0 register */

 NAND interface timing parameter 1 register */

 NAND controller status register */

 NAND ECC control register */

 NAND controller data buffer register */

 NAND controller command buffer 0 register */

 NAND controller command buffer 1 register */

 NAND controller command buffer 2 register */

 NAND controller command buffer 3 register */

 NAND controller command buffer 0 register 'type' and 'xtype' fields */

/**

 * struct marvell_hw_ecc_layout - layout of Marvell ECC

 *

 * Marvell ECC engine works differently than the others, in order to limit the

 * size of the IP, hardware engineers chose to set a fixed strength at 16 bits

 * per subpage, and depending on a the desired strength needed by the NAND chip,

 * a particular layout mixing data/spare/ecc is defined, with a possible last

 * chunk smaller that the others.

 *

 * @writesize:		Full page size on which the layout applies

 * @chunk:		Desired ECC chunk size on which the layout applies

 * @strength:		Desired ECC strength (per chunk size bytes) on which the

 *			layout applies

 * @nchunks:		Total number of chunks

 * @full_chunk_cnt:	Number of full-sized chunks, which is the number of

 *			repetitions of the pattern:

 *			(data_bytes + spare_bytes + ecc_bytes).

 * @data_bytes:		Number of data bytes per chunk

 * @spare_bytes:	Number of spare bytes per chunk

 * @ecc_bytes:		Number of ecc bytes per chunk

 * @last_data_bytes:	Number of data bytes in the last chunk

 * @last_spare_bytes:	Number of spare bytes in the last chunk

 * @last_ecc_bytes:	Number of ecc bytes in the last chunk

 Constraints */

 Corresponding layout */

 Layouts explained in AN-379_Marvell_SoC_NFC_ECC */

/**

 * struct marvell_nand_chip_sel - CS line description

 *

 * The Nand Flash Controller has up to 4 CE and 2 RB pins. The CE selection

 * is made by a field in NDCB0 register, and in another field in NDCB2 register.

 * The datasheet describes the logic with an error: ADDR5 field is once

 * declared at the beginning of NDCB2, and another time at its end. Because the

 * ADDR5 field of NDCB2 may be used by other bytes, it would be more logical

 * to use the last bit of this field instead of the first ones.

 *

 * @cs:			Wanted CE lane.

 * @ndcb0_csel:		Value of the NDCB0 register with or without the flag

 *			selecting the wanted CE lane. This is set once when

 *			the Device Tree is probed.

 * @rb:			Ready/Busy pin for the flash chip

/**

 * struct marvell_nand_chip - stores NAND chip device related information

 *

 * @chip:		Base NAND chip structure

 * @node:		Used to store NAND chips into a list

 * @layout:		NAND layout when using hardware ECC

 * @ndcr:		Controller register value for this NAND chip

 * @ndtr0:		Timing registers 0 value for this NAND chip

 * @ndtr1:		Timing registers 1 value for this NAND chip

 * @addr_cyc:		Amount of cycles needed to pass column address

 * @selected_die:	Current active CS

 * @nsels:		Number of CS lines required by the NAND chip

 * @sels:		Array of CS lines descriptions

/**

 * struct marvell_nfc_caps - NAND controller capabilities for distinction

 *                           between compatible strings

 *

 * @max_cs_nb:		Number of Chip Select lines available

 * @max_rb_nb:		Number of Ready/Busy lines available

 * @need_system_controller: Indicates if the SoC needs to have access to the

 *                      system controller (ie. to enable the NAND controller)

 * @legacy_of_bindings:	Indicates if DT parsing must be done using the old

 *			fashion way

 * @is_nfcv2:		NFCv2 has numerous enhancements compared to NFCv1, ie.

 *			BCH error detection and correction algorithm,

 *			NDCB3 register has been added

 * @use_dma:		Use dma for data transfers

/**

 * struct marvell_nfc - stores Marvell NAND controller information

 *

 * @controller:		Base controller structure

 * @dev:		Parent device (used to print error messages)

 * @regs:		NAND controller registers

 * @core_clk:		Core clock

 * @reg_clk:		Registers clock

 * @complete:		Completion object to wait for NAND controller events

 * @assigned_cs:	Bitmask describing already assigned CS lines

 * @chips:		List containing all the NAND chips attached to

 *			this NAND controller

 * @selected_chip:	Currently selected target chip

 * @caps:		NAND controller capabilities for each compatible string

 * @use_dma:		Whetner DMA is used

 * @dma_chan:		DMA channel (NFCv1 only)

 * @dma_buf:		32-bit aligned buffer for DMA transfers (NFCv1 only)

 DMA (NFCv1 only) */

/**

 * struct marvell_nfc_timings - NAND controller timings expressed in NAND

 *                              Controller clock cycles

 *

 * @tRP:		ND_nRE pulse width

 * @tRH:		ND_nRE high duration

 * @tWP:		ND_nWE pulse time

 * @tWH:		ND_nWE high duration

 * @tCS:		Enable signal setup time

 * @tCH:		Enable signal hold time

 * @tADL:		Address to write data delay

 * @tAR:		ND_ALE low to ND_nRE low delay

 * @tWHR:		ND_nWE high to ND_nRE low for status read

 * @tRHW:		ND_nRE high duration, read to write delay

 * @tR:			ND_nWE high to ND_nRE low for read

 NDTR0 fields */

 NDTR1 fields */

/**

 * TO_CYCLES() - Derives a duration in numbers of clock cycles.

 *

 * @ps: Duration in pico-seconds

 * @period_ns:  Clock period in nano-seconds

 *

 * Convert the duration in nano-seconds, then divide by the period and

 * return the number of clock periods.

/**

 * struct marvell_nfc_op - filled during the parsing of the ->exec_op()

 *                         subop subset of instructions.

 *

 * @ndcb:		Array of values written to NDCBx registers

 * @cle_ale_delay_ns:	Optional delay after the last CMD or ADDR cycle

 * @rdy_timeout_ms:	Timeout for waits on Ready/Busy pin

 * @rdy_delay_ns:	Optional delay after waiting for the RB pin

 * @data_delay_ns:	Optional delay after the data xfer

 * @data_instr_idx:	Index of the data instruction in the subop

 * @data_instr:		Pointer to the data instruction in the subop

/*

 * Internal helper to conditionnally apply a delay (from the above structure,

 * most of the time).

/*

 * The controller has many flags that could generate interrupts, most of them

 * are disabled and polling is used. For the very slow signals, using interrupts

 * may relax the CPU charge.

 Writing 1 disables the interrupt */

 Writing 0 enables the interrupt */

	/*

	 * Callers of this function do not verify if the NAND is using a 16-bit

	 * an 8-bit bus for normal operations, so we need to take care of that

	 * here by leaving the configuration unchanged if the NAND does not have

	 * the NAND_BUSWIDTH_16 flag set.

	/*

	 * The command is being processed, wait for the ND_RUN bit to be

	 * cleared by the NFC. If not, we must clear it by hand.

/*

 * Any time a command has to be sent to the controller, the following sequence

 * has to be followed:

 * - call marvell_nfc_prepare_cmd()

 *      -> activate the ND_RUN bit that will kind of 'start a job'

 *      -> wait the signal indicating the NFC is waiting for a command

 * - send the command (cmd and address cycles)

 * - enventually send or receive the data

 * - call marvell_nfc_end_cmd() with the corresponding flag

 *      -> wait the flag to be triggered or cancel the job with a timeout

 *

 * The following helpers are here to factorize the code a bit so that

 * specialized functions responsible for executing the actual NAND

 * operations do not have to replicate the same code blocks.

 Poll ND_RUN and clear NDSR before issuing any command */

 Assert ND_RUN bit and wait the NFC to be ready */

 Command may be written, clear WRCMDREQ status bit */

	/*

	 * Write NDCB0 four times only if LEN_OVRD is set or if ADDR6 or ADDR7

	 * fields are used (only available on NFCv2).

	/*

	 * DMA function uses this helper to poll on CMDD bits without wanting

	 * them to be cleared.

 Timeout is expressed in ms */

	/*

	 * In case the interrupt was not served in the required time frame,

	 * check if the ISR was not served or if something went actually wrong.

	/*

	 * Reset the NDCR register to a clean state for this particular chip,

	 * also clear ND_RUN bit.

 Also reset the interrupt status register */

	/*

	 * RDY interrupt mask is one bit in NDCR while there are two status

	 * bit in NDSR (RDY[cs0/cs2] and RDY[cs1/cs3]).

 HW ECC related functions */

		/*

		 * When enabling BCH, set threshold to 0 to always know the

		 * number of corrected bitflips.

 DMA related helpers */

 Read/write PIO/DMA accessors */

 Prepare the DMA transfer */

 Do the task and wait for it to finish */

	/*

	 * Blank pages (all 0xFF) that have not been written may be recognized

	 * as bad if bitflips occur, so whenever an uncorrectable error occurs,

	 * check if the entire page (with ECC bytes) is actually blank or not.

 Update the stats and max_bitflips */

/*

 * Check if a chunk is correct or not according to the hardware ECC engine.

 * mtd->ecc_stats.corrected is updated, as well as max_bitflips, however

 * mtd->ecc_stats.failure is not, the function will instead return a non-zero

 * value indicating that a check on the emptyness of the subpage must be

 * performed before actually declaring the subpage as "corrupted".

 Check uncorrectable error flag */

		/*

		 * Do not increment ->ecc_stats.failed now, instead, return a

		 * non-zero value to indicate that this chunk was apparently

		 * bad, and it should be check to see if it empty or not. If

		 * the chunk (with ECC bytes) is not declared empty, the calling

		 * function must increment the failure count.

 Check correctable error flag */

 Update the stats and max_bitflips */

 Hamming read helpers */

 NFCv2 needs more information about the operation being executed */

	/*

	 * Read the page then the OOB area. Unlike what is shown in current

	 * documentation, spare bytes are protected by the ECC engine, and must

	 * be at the beginning of the OOB area or running this driver on legacy

	 * systems will prevent the discovery of the BBM/BBT.

	/*

	 * When ECC failures are detected, check if the full page has been

	 * written or not. Ignore the failure if it is actually empty.

/*

 * Spare area in Hamming layouts is not protected by the ECC engine (even if

 * it appears before the ECC bytes when reading), the ->read_oob_raw() function

 * also stands for ->read_oob().

 Hamming write helpers */

 NFCv2 needs more information about the operation being executed */

 Write the page then the OOB area */

/*

 * Spare area in Hamming layouts is not protected by the ECC engine (even if

 * it appears before the ECC bytes when reading), the ->write_oob_raw() function

 * also stands for ->write_oob().

 BCH read helpers */

 Update last chunk length */

 Read data bytes*/

 Read spare bytes */

 Read ECC bytes */

	/*

	 * Trigger the monolithic read on the first chunk, then naked read on

	 * intermediate chunks and finally a last naked read on the last chunk.

	/*

	 * According to the datasheet, when reading from NDDB

	 * with BCH enabled, after each 32 bytes reads, we

	 * have to make sure that the NDSR.RDDREQ bit is set.

	 *

	 * Drain the FIFO, 8 32-bit reads at a time, and skip

	 * the polling on the last read.

	 *

	 * Length is a multiple of 32 bytes, hence it is a multiple of 8 too.

	/*

	 * With BCH, OOB is not fully used (and thus not read entirely), not

	 * expected bytes could show up at the end of the OOB buffer if not

	 * explicitly erased.

 Update length for the last chunk */

 Read the chunk and detect number of bitflips */

	/*

	 * Please note that dumping the ECC bytes during a normal read with OOB

	 * area would add a significant overhead as ECC bytes are "consumed" by

	 * the controller in normal mode and must be re-read in raw mode. To

	 * avoid dropping the performances, we prefer not to include them. The

	 * user should re-read the page in raw mode if ECC bytes are required.

	/*

	 * In case there is any subpage read error, we usually re-read only ECC

	 * bytes in raw mode and check if the whole page is empty. In this case,

	 * it is normal that the ECC check failed and we just ignore the error.

	 *

	 * However, it has been empirically observed that for some layouts (e.g

	 * 2k page, 8b strength per 512B chunk), the controller tries to correct

	 * bits and may create itself bitflips in the erased area. To overcome

	 * this strange behavior, the whole page is re-read in raw mode, not

	 * only the ECC bytes.

 No failure reported for this chunk, move to the next one */

		/*

		 * Only re-read the ECC bytes, unless we are using the 2k/8b

		 * layout which is buggy in the sense that the ECC engine will

		 * try to correct data bytes anyway, creating bitflips. In this

		 * case, re-read the entire page.

 Check the entire chunk (data + spare + ecc) for emptyness */

 BCH write helpers */

 Point to the column of the next chunk */

 Write the data */

 Write the spare bytes */

 Write the ECC bytes */

	/*

	 * First operation dispatches the CMD_SEQIN command, issue the address

	 * cycles and asks for the first chunk of data.

	 * All operations in the middle (if any) will issue a naked write and

	 * also ask for data.

	 * Last operation (if any) asks for the last chunk of data through a

	 * last naked write.

 Always dispatch the PAGEPROG command on the last chunk */

 Transfer the contents */

 Spare data will be written anyway, so clear it to avoid garbage */

		/*

		 * Waiting only for CMDD or PAGED is not enough, ECC are

		 * partially written. No flag is set once the operation is

		 * really finished but the ND_RUN bit is cleared, so wait for it

		 * before stepping into the next command.

 NAND framework ->exec_op() hooks and related helpers */

 Reset the input structure as most of its fields will be OR'ed */

	/*

	 * NDCR ND_RUN bit should be cleared automatically at the end of each

	 * operation but experience shows that the behavior is buggy when it

	 * comes to writes (with LEN_OVRD). Clear it by hand in this case.

	/*

	 * Naked access are different in that they need to be flagged as naked

	 * by the controller. Reset the controller registers fields that inform

	 * on the type and refill them according to the ongoing operation.

 This should never happen */

	/*

	 * NDCR ND_RUN bit should be cleared automatically at the end of each

	 * operation but experience shows that the behavior is buggy when it

	 * comes to writes (with LEN_OVRD). Clear it by hand in this case.

 Monolithic reads/writes */

 Naked commands */

 Naked commands not supported, use a function for each pattern */

/*

 * Layouts were broken in old pxa3xx_nand driver, these are supposed to be

 * usable.

	/*

	 * Bootrom looks in bytes 0 & 5 for bad blocks for the

	 * 4KB page / 4bit BCH combination.

 Special care for the layout 2k/8-bit/512B  */

 Last 8 blocks in each chip */

 Last 8 blocks in each chip */

	/*

	 * SDR timings are given in pico-seconds while NFC timings must be

	 * expressed in NAND controller clock cycles, which is half of the

	 * frequency of the accessible ECC clock retrieved by clk_get_rate().

	 * This is not written anywhere in the datasheet but was observed

	 * with an oscilloscope.

	 *

	 * NFC datasheet gives equations from which thoses calculations

	 * are derived, they tend to be slightly more restrictives than the

	 * given core timings and may improve the overall speed.

	/*

	 * Read delay is the time of propagation from SoC pins to NFC internal

	 * logic. With non-EDO timings, this is MIN_RD_DEL_CNT clock cycles. In

	 * EDO mode, an additional delay of tRH must be taken into account so

	 * the data is sampled on the falling edge instead of the rising edge.

	/*

	 * tWHR and tRHW are supposed to be read to write delays (and vice

	 * versa) but in some cases, ie. when doing a change column, they must

	 * be greater than that to be sure tCCS delay is respected.

	/*

	 * NFCv2: Use WAIT_MODE (wait for RB line), do not rely only on delays.

	 * NFCv1: No WAIT_MODE, tR must be maximal.

		/*

		 * We'll use a bad block table stored in-flash and don't

		 * allow writing the bad block marker to the flash.

 Save the chip-specific fields of NDCR */

	/*

	 * On small page NANDs, only one cycle is needed to pass the

	 * column address.

	/*

	 * Now add the number of cycles needed to pass the row

	 * address.

	 *

	 * Addressing a chip using CS 2 or 3 should also need the third row

	 * cycle but due to inconsistance in the documentation and lack of

	 * hardware to test this situation, this case is not supported.

		/*

		 * Subpage write not available with hardware ECC, prohibit also

		 * subpage read as in userspace subpage access would still be

		 * allowed and subpage write, if used, would lead to numerous

		 * uncorrectable ECC errors.

		/*

		 * We keep the MTD name unchanged to avoid breaking platforms

		 * where the MTD cmdline parser is used and the bootloader

		 * has not been updated to use the new naming scheme.

		/*

		 * If the new bindings are used and the bootloader has not been

		 * updated to pass a new mtdparts parameter on the cmdline, you

		 * should define the following property in your NAND node, ie:

		 *

		 *	label = "main-storage";

		 *

		 * This way, mtd->name will be set by the core when

		 * nand_set_flash_node() is called.

	/*

	 * The legacy "num-cs" property indicates the number of CS on the only

	 * chip connected to the controller (legacy bindings does not support

	 * more than one chip). The CS and RB pins are always the #0.

	 *

	 * When not using legacy bindings, a couple of "reg" and "nand-rb"

	 * properties must be filled. For each chip, expressed as a subnode,

	 * "reg" points to the CS lines and "nand-rb" to the RB line.

 Alloc the nand chip structure */

			/*

			 * Legacy bindings use the CS lines in natural

			 * order (0, 1, ...)

 Retrieve CS id */

		/*

		 * The cs variable represents the chip select id, which must be

		 * converted in bit fields for NDCB0 and NDCB2 to select the

		 * right chip. Unfortunately, due to a lack of information on

		 * the subject and incoherent documentation, the user should not

		 * use CS1 and CS3 at all as asserting them is not supported in

		 * a reliable way (due to multiplexing inside ADDR5 field).

 Retrieve RB id */

 Legacy bindings always use RB #0 */

	/*

	 * Save a reference value for timing registers before

	 * ->setup_interface() is called.

 Legacy bindings support only one chip */

	/*

	 * Legacy bindings do not use child nodes to exhibit NAND chip

	 * properties and layout. Instead, NAND properties are mixed with the

	 * controller ones, and partitions are defined as direct subnodes of the

	 * NAND controller node.

	/*

	 * DMA must act on length multiple of 32 and this length may be

	 * bigger than the destination buffer. Use this buffer instead

	 * for DMA transfers and then copy the desired amount of data to

	 * the provided buffer.

	/*

	 * ECC operations and interruptions are only enabled when specifically

	 * needed. ECC shall not be activated in the early stages (fails probe).

	 * Arbiter flag, even if marked as "reserved", must be set (empirical).

	 * SPARE_EN bit must always be set or ECC bytes will not be at the same

	 * offset in the read page and this will fail the protection.

	/*

	 * Some SoCs like A7k/A8k need to enable manually the NAND

	 * controller, gated clocks and reset bits to avoid being bootloader

	 * dependent. This is done through the use of the System Functions

	 * registers.

 Configure the DMA if appropriate */

 Managed the legacy case (when the first clock was not named) */

 Get NAND controller capabilities */

 Init the controller and then probe the chips */

	/*

	 * Reset nfc->selected_chip so the next command will cause the timing

	 * registers to be restored in marvell_nfc_select_target().

 Reset registers that have lost their contents */

 sentinel */ },

 Support for old/deprecated bindings: */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2017 Free Electrons

 * Copyright (C) 2017 NextThing Co

 *

 * Author: Boris Brezillon <boris.brezillon@free-electrons.com>

/**

 * struct hynix_read_retry - read-retry data

 * @nregs: number of register to set when applying a new read-retry mode

 * @regs: register offsets (NAND chip dependent)

 * @values: array of values to set in registers. The array size is equal to

 *	    (nregs * nmodes)

/**

 * struct hynix_nand - private Hynix NAND struct

 * @nand_technology: manufacturing process expressed in picometer

 * @read_retry: read-retry information

/**

 * struct hynix_read_retry_otp - structure describing how the read-retry OTP

 *				 area

 * @nregs: number of hynix private registers to set before reading the reading

 *	   the OTP area

 * @regs: registers that should be configured

 * @values: values that should be set in regs

 * @page: the address to pass to the READ_PAGE command. Depends on the NAND

 *	  chip

 * @size: size of the read-retry OTP section

 Enter 'Set Hynix Parameters' mode */

	/*

	 * Configure the NAND in the requested read-retry mode.

	 * This is done by setting pre-defined values in internal NAND

	 * registers.

	 *

	 * The set of registers is NAND specific, and the values are either

	 * predefined or extracted from an OTP area on the NAND (values are

	 * probably tweaked at production in this case).

 Apply the new settings. */

/**

 * hynix_get_majority - get the value that is occurring the most in a given

 *			set of values

 * @in: the array of values to test

 * @repeat: the size of the in array

 * @out: pointer used to store the output value

 *

 * This function implements the 'majority check' logic that is supposed to

 * overcome the unreliability of MLC NANDs when reading the OTP area storing

 * the read-retry parameters.

 *

 * It's based on a pretty simple assumption: if we repeat the same value

 * several times and then take the one that is occurring the most, we should

 * find the correct value.

 * Let's hope this dummy algorithm prevents us from losing the read-retry

 * parameters.

	/*

	 * We only test the first half of the in array because we must ensure

	 * that the value is at least occurring repeat / 2 times.

	 *

	 * This loop is suboptimal since we may count the occurrences of the

	 * same value several time, but we are doing that on small sets, which

	 * makes it acceptable.

 Count all values that are matching the one at index i. */

 We found a value occurring more than repeat / 2. */

 Sequence to enter OTP mode? */

 Now read the page */

 Put everything back to normal */

	/*

	 * We only support read-retry for 1xnm NANDs, and those NANDs all

	 * expose a valid JEDEC ID.

 1xnm technology */

				/*

				 * FIXME: Hynix recommend to copy the

				 * read-retry OTP area into a normal page.

			/*

			 * We should never reach this case, but if that

			 * happens, this probably means Hynix decided to use

			 * a different extended ID format, and we should find

			 * a way to support it.

			/*

			 * We should never reach this case, but if that

			 * happens, this probably means Hynix decided to use

			 * a different extended ID format, and we should find

			 * a way to support it.

		/*

		 * The datasheet of H27UCG8T2BTR mentions that the "Redundant

		 * Area Size" is encoded "per 8KB" (page size). This chip uses

		 * a page size of 16KiB. The datasheet mentions an OOB size of

		 * 1.280 bytes, but the OOB size encoded in the ID bytes (using

		 * the existing logic above) is 640 bytes.

		 * Update the OOB size for this chip by taking the value

		 * determined above and scaling it to the actual page size (so

		 * the actual OOB size for this chip is: 640 * 16k / 8k).

 Reference: H27UCG8T2E datasheet */

			/*

			 * We should never reach this case, but if that

			 * happens, this probably means Hynix decided to use

			 * a different extended ID format, and we should find

			 * a way to support it.

		/*

		 * The ECC requirements field meaning depends on the

		 * NAND technology.

 > 26nm, reference: H27UBG8T2A datasheet */

				/*

				 * We should never reach this case, but if that

				 * happens, this probably means Hynix decided

				 * to use a different extended ID format, and

				 * we should find a way to support it.

 <= 26nm, reference: H27UBG8T2B datasheet */

 We need scrambling on all TLC NANDs*/

 And on MLC NANDs with sub-3xnm process */

 < 3xnm */

 < 32nm */

	/*

	 * Exclude all SLC NANDs from this advanced detection scheme.

	 * According to the ranges defined in several datasheets, it might

	 * appear that even SLC NANDs could fall in this extended ID scheme.

	 * If that the case rework the test to let SLC NANDs go through the

	 * detection process.

 Extract pagesize */

	/*

	 * When bit7 is set that means we start counting at 1MiB, otherwise

	 * we start counting at 128KiB and shift this value the content of

	 * ID[3][4:5].

	 * The only exception is when ID[3][4:5] == 3 and ID[3][7] == 0, in

	 * this case the erasesize is set to 768KiB.

	/*

	 * Modern Toggle DDR NANDs have a valid JEDECID even though they are

	 * not exposing a valid JEDEC parameter table.

	 * These NANDs use a different NAND ID scheme.

/*

 * NAND support for Marvell Orion SoC platforms

 *

 * Tzachi Perelstein <tzachi@marvell.com>

 *

 * This file is licensed under  the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

		/*

		 * Since GCC has no proper constraint (PR 43518)

		 * force x variable to r2/r3 registers as ldrd instruction

		 * requires first register to be even.

	/* Not all platforms can gate the clock, so it is not

	/*

	 * This driver assumes that the default ECC engine should be TYPE_SOFT.

	 * Set ->engine_type before registering the NAND devices in order to

	 * provide a driver specific default value.

 SPDX-License-Identifier: GPL-2.0-or-later

/* Freescale Enhanced Local Bus Controller NAND driver

 *

 * Copyright © 2006-2007, 2010 Freescale Semiconductor

 *

 * Authors: Nick Spence <nick.spence@freescale.com>,

 *          Scott Wood <scottwood@freescale.com>

 *          Jack Lan <jack.lan@freescale.com>

 *          Roy Zang <tie-fei.zang@freescale.com>

 Value returned for read bytes when read failed */

 Maximum number of mSecs to wait for FCM */

 mtd information per set */

 Chip select bank number           */

 Chip select base virtual address  */

 NAND page size (0=512, 1=2048)    */

 FCM Flash Mode Register value     */

 Freescale eLBC FCM controller information */

 Address of assigned FCM buffer        */

 Last page written to / read from      */

 Number of bytes read during command   */

 Saved column from SEQIN               */

 Pointer to next byte to 'read'        */

 status read from LTESR after last op  */

 UPM/FCM Data Register value           */

 Non zero if the MDR is to be set      */

 Non zero if operating on OOB data     */

 counter for the initializations	  */

 Saved during READ0 cmd		  */

 These map to the positions used by the FCM hardware ECC generator */

/*

 * ELBC may use HW ECC, so that OOB offsets, that NAND core uses for bbt,

 * interfere with ECC positions, that's why we implement our own descriptors.

 * OOB {11, 5}, works for both SP and LP chips, with ECCM = 1 and ECCM = 0.

=================================*/

/*

 * Set up the FCM hardware block and page address fields, and the fcm

 * structure addr field to point to the correct FCM buffer in memory

		/*

		 * large page size chip : FPAR[PI] save the lowest 6 bits,

		 *                        FBAR[BLK] save the other bits.

		/*

		 * small page size chip : FPAR[PI] save the lowest 5 bits,

		 *                        FBAR[BLK] save the other bits.

 for OOB data point to the second half of the buffer */

/*

 * execute FCM command and wait for it to complete

 Setup the FMR[OP] to execute without write protection */

 execute special operation */

 wait for FCM complete flag or timeout */

 store mdr value in case it was needed */

		/*

		 * if command was a full page read and the ELBC

		 * has the LTECCR register, then bits 12-15 (ppc order) of

		 * LTECCR indicates which 512 byte sub-pages had fixed errors.

		 * bits 28-31 are uncorrectable errors, marked elsewhere.

		 * for small page nand only 1 bit is used.

		 * if the ELBC doesn't have the lteccr register it reads 0

		 * FIXME: 4 bits can be corrected on NANDs with 2k pages, so

		 * count the number of sub-pages with bitflips and update

		 * ecc_stats.corrected accordingly.

 clear lteccr */

 cmdfunc send commands to the FCM */

 clear the read buffer */

 READ0 and READ1 read the entire buffer to use hardware ECC. */

 read entire page to enable ECC */

 RNDOUT moves the pointer inside the page */

 READOOB reads only the OOB because no ECC is performed. */

		/*

		 * although currently it's 8 bytes for READID, we always read

		 * the maximum 256 bytes(for PARAM)

 ERASE1 stores the block and page address */

 ERASE2 uses the block and page address from ERASE1 */

 SEQIN sets up the addr buffer and all registers except the length */

 OOB area */

 OOB area --> READOOB */

 First 256 bytes --> READ0 */

 PAGEPROG reuses all of the setup from SEQIN and adds the length */

		/* if the write did not start at 0 or is not a full page

		 * then set the exact length, otherwise use a full page

		 * write so the HW generates the ECC.

 CMD_STATUS must read the status byte while CEB is active */

 Note - it does not wait for the ready line */

		/* The chip always seems to report that it is

		 * write-protected, even when it is not.

 RESET without waiting for the ready line */

	/* The hardware does not seem to support multiple

	 * chips per bank.

/*

 * Write buf to the FCM Controller Data Buffer

	/*

	 * This is workaround for the weird elbc hangs during nand write,

	 * Scott Wood says: "...perhaps difference in how long it takes a

	 * write to make it through the localbus compared to a write to IMMR

	 * is causing problems, and sync isn't helping for some reason."

	 * Reading back the last byte helps though.

/*

 * read a byte from either the FCM hardware buffer if it has any data left

 * otherwise issue a command to read a single byte.

 If there are still bytes in the FCM, then use the next byte. */

/*

 * Read from the FCM Controller Data Buffer

/* This function is called after Program and Erase Operations to

 * check for success or failure.

	/* The chip always seems to report that it is

	 * write-protected, even when it is not.

/* ECC will be calculated automatically, and errors will be detected in

 * waitfunc.

/* ECC will be calculated automatically, and errors will be detected in

 * waitfunc.

 Fill in fsl_elbc_mtd structure */

 set timeout to maximum */

 fill in nand_chip structure */

 set up function call table */

 set up nand options */

	/*

	 * if ECC was not chosen in DT, decide whether to use HW or SW ECC from

	 * CS Base Register

 If CS Base Register selects full hardware ECC then use it */

 otherwise fall back to default software ECC */

 if SW ECC was chosen in DT, we do not need to set anything here */

 should we also implement *_ECC_ENGINE_CONTROLLER to do as above? */

 calculate FMR Address Length field */

 adjust Option Register and ECC to match Flash page size */

 get, allocate and map the memory resource */

 find which chip select it is connected to */

	/* First look for RedBoot table or partitions on the command

 SPDX-License-Identifier: GPL-2.0-only

/*

 * (C) 2005, 2006 Red Hat Inc.

 *

 * Author: David Woodhouse <dwmw2@infradead.org>

 *	   Tom Sylla <tom.sylla@amd.com>

 *

 *  Overview:

 *   This is a device driver for the NAND flash controller found on

 *   the AMD CS5535/CS5536 companion chipsets for the Geode processor.

 *   mtd-id for command line partitioning is cs553x_nand_cs[0-3]

 *   where 0-3 reflects the chip select for NAND.

 DIVIL capabilitiies */

 NAND Timing MSRs */

 NAND Flash Data Timing MSR */

 NAND Flash Control Timing */

 Reserved */

 NAND BAR MSRs */

 Flash Chip Select 0 */

 Flash Chip Select 1 */

 Flash Chip Select 2 */

 Flash Chip Select 3 */

 Each made up of... */

 1 for NAND */

 1 for MMIO */

 I/O BARs have BASE_ADDR in bits 15:4, IO_MASK in 47:36 */

 MMIO BARs have BASE_ADDR in bits 31:12, MEM_MASK in 63:44 */

 Pin function selection MSR (IDE vs. flash on the IDE pins) */

 0 for flash, 1 for IDE */

 Registers within the NAND flash controller BAR -- memory mapped */

 0 to 0x7ff, in fact */

 Any even address 0x800-0x80e */

 Any odd address 0x801-0x80f */

 Registers within the NAND flash controller BAR -- I/O mapped */

 0 to 3, in fact */

 Enable NAND Distract interrupt */

 Enable RDY/BUSY# interrupt */

 Keep low; 1 to reset */

 De-assert the CE pin */

 Re-assert the CE pin. */

 Allocate memory for MTD device structure and private data */

 Link the private data with the MTD structure */

 map physical address */

 Enable the following for a flash based bad block table */

 Scan to find existence of the device */

 These are the CPUs which will have a CS553[56] companion chip */

 Geode LX */

 Geode GX (née GX2) */

 If the CPU isn't a Geode GX or LX, abort */

 If it doesn't have the CS553[56], abort */

 If it doesn't have the NAND controller enabled, abort */

	/* Register all devices together here. This means we can easily hack it to

 If any devices registered, return success. Else the last error. */

 Release resources, unregister device */

 unmap physical address */

 Free the MTD device structure */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright (C) 2004 Embedded Edge, LLC

/**

 * au_write_buf -  write buffer to chip

 * @this:	NAND chip object

 * @buf:	data buffer

 * @len:	number of bytes to write

 *

 * write function for 8bit buswidth

 drain writebuffer */

/**

 * au_read_buf -  read chip data into buffer

 * @this:	NAND chip object

 * @buf:	buffer to store date

 * @len:	number of bytes to read

 *

 * read function for 8bit buswidth

 drain writebuffer */

/**

 * au_write_buf16 -  write buffer to chip

 * @this:	NAND chip object

 * @buf:	data buffer

 * @len:	number of bytes to write

 *

 * write function for 16bit buswidth

 drain writebuffer */

/**

 * au_read_buf16 -  read chip data into buffer

 * @this:	NAND chip object

 * @buf:	buffer to store date

 * @len:	number of bytes to read

 *

 * read function for 16bit buswidth

 drain writebuffer */

 CSx */

 STADDRx */

 figure out the decoded range of this CS */

 Drain the writebuffer */

 Drain the writebuffer */

 assert (force assert) chip enable */

 Drain the writebuffer */

 deassert chip enable */

 Drain the writebuffer */

 figure out which CS# r->start belongs to */

	/*

	 * This driver assumes that the default ECC engine should be TYPE_SOFT.

	 * Set ->engine_type before registering the NAND devices in order to

	 * provide a driver specific default value.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright (C) 2004 Richard Purdie

 *  Copyright (C) 2008 Dmitry Baryshkov

 *

 *  Based on Sharp's NAND driver sharp_sl.c

 register offset */

 line parity 7 - 0 bit */

 line parity 15 - 8 bit */

 column parity 5 - 0 bit */

 ECC byte counter */

 cleare ECC */

 Flash I/O */

 Flash Control */

 Flash control bit */

/*

 *	hardware specific access to control-lines

 *	ctrl:

 *	NAND_CNE: bit 0 -> ! bit 0 & 4

 *	NAND_CLE: bit 1 -> bit 1

 *	NAND_ALE: bit 2 -> bit 2

 *

/*

 * Main initialization routine

 Allocate memory for MTD device structure and private data */

 map physical address */

 Get pointer to private data */

 Link the private data with the MTD structure */

	/*

	 * PXA initialize

 Set address of NAND IO lines */

 Set address of hardware control function */

 15 us command delay time */

 Scan to find existence of the device */

 Register the partitions */

 Return happy */

/*

 * Clean up routine

 Unregister device */

 Release resources */

 Free the driver's structure */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 *  Copyright © 2012 John Crispin <john@phrozen.org>

 *  Copyright © 2016 Hauke Mehrtens <hauke@hauke-m.de>

 nand registers */

 NAND flash status output */

 NAND Write/Read complete */

/*

 * nand commands

 * The pins of the NAND chip are selected based on the address bits of the

 * "register" read and write. There are no special registers, but an

 * address range and the lower address bits are used to activate the

 * correct line. For example when the bit (1 << 2) is set in the address

 * the ALE pin will be activated.

 address latch enable */

 command latch enable */

 chip select */

 spare area access latch */

 write protect */

 we need to tel the ebu which addr we mapped the nand to */

 we need to tell the EBU that we have nand attached and set it up properly */

/*

 * Probe for the NAND device.

 Allocate memory for the device structure (and zero it) */

 load our CS from the DT. Either we find a valid 1 or default to 0 */

 setup the EBU to run in NAND mode on our base addr */

	/*

	 * This driver assumes that the default ECC engine should be TYPE_SOFT.

	 * Set ->engine_type before registering the NAND devices in order to

	 * provide a driver specific default value.

 Scan to find existence of the device */

/*

 * Remove a NAND device.

 SPDX-License-Identifier: GPL-2.0

/*

 * NAND Flash Controller Device Driver

 * Copyright © 2009-2010, Intel Corporation and its suppliers.

 List of platforms this NAND controller has be integrated into */

 end: all zeroes */ }

 50 MHz */

 200 MHz */

 SPDX-License-Identifier: GPL-2.0 OR MIT

/*

 * MTK NAND Flash controller driver.

 * Copyright (C) 2016 MediaTek Inc.

 * Authors:	Xiaolei Li		<xiaolei.li@mediatek.com>

 *		Jorge Ramirez-Ortiz	<jorge.ramirez-ortiz@linaro.org>

 NAND controller register definition */

 NFI control */

 burst  read */

 burst  write */

 Timming control register */

/*

 * FDM: region used to store free OOB data

 nothing after this field */

/*

 * supported spare size of each IP.

 * order should be the same with the spare size bitfiled defination of

 * register NFI_PAGEFMT.

	/* map the sector's FDM data to free oob:

	 * the beginning of the oob area stores the FDM data of bad mark sectors

 reset all registers and force the NFI master to terminate */

 wait for the master to finish the last transaction */

 ensure any status register affected by the NFI master is reset */

	/*

	 * the hardware will double the value for this eccsize, so we need to

	 * halve it

 after each byte read, the NFI_STA reg is reset by the hardware */

		/*

		 * set to max sector to allow the HW to continue reading over

		 * unaligned accesses

 trigger to fetch data */

 There is a frequency divider in some IPs */

 turn clock rate into KHZ */

 sdr interface has no tCR which means CE# low to RE# low */

 Calculate real WE#/RE# hold time in nanosecond */

 nanosecond to picosecond */

	/*

	 * WE# low level time should be expaned to meet WE# pulse time

	 * and WE# cycle time at the same time.

	/*

	 * RE# low level time should be expaned to meet RE# pulse time

	 * and RE# cycle time at the same time.

 Calculate RE# pulse time in nanosecond. */

 nanosecond to picosecond */

	/*

	 * If RE# access time is bigger than RE# pulse time,

	 * delay sampling data timing.

	/*

	 * ACCON: access timing control register

	 * -------------------------------------

	 * 31:28: tpoecs, minimum required time for CS post pulling down after

	 *        accessing the device

	 * 27:22: tprecs, minimum required time for CS pre pulling down before

	 *        accessing the device

	 * 21:16: tc2r, minimum required time from NCEB low to NREB low

	 * 15:12: tw2r, minimum required time from NWEB high to NREB low.

	 * 11:08: twh, write enable hold time

	 * 07:04: twst, write wait states

	 * 03:00: trlt, read wait states

 nop */

 program the CRC back to the OOB */

 OOB => FDM: from register,  ECC: from HW */

 clear NFI config */

 write OOB into the FDM registers (OOB area in MTK NAND) */

 use the data in the private buffer (now with FDM and CRC) */

 clear NFI_CNFG */

	/*

	 * CNRNB: nand ready/busy register

	 * -------------------------------

	 * 7:4: timeout register for polling the NAND busy/ready signal

	 * 0  : poll the status of the busy/ready signal after [7:4]*16 cycles.

 bad block mark storage */

 support only ecc hw mode */

 if optional dt settings not present */

 use datasheet requirements */

		/*

		 * align eccstrength and eccsize

		 * this controller only supports 512 and 1024 sizes

 calculate oob bytes except ecc parity data */

		/*

		 * enhance ecc strength if oob left is bigger than max FDM size

		 * or reduce ecc strength if oob size is not enough for ecc

		 * parity data.

 store bbt magic in page, cause OOB is not protected */

 set default mode in case dt entry is missing */

 probe defer if not ready */

 reset NAND chip if VCC was powered off */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2018 Toradex AG

 *

 * Author: Marcel Ziswiler <marcel.ziswiler@toradex.com>

 Extract ECC requirements from 5th id byte. */

		/*

		 * It is known that some ESMT SLC NANDs have been shipped

		 * with the factory bad block markers in the first or last page

		 * of the block, instead of the first or second page. To be on

		 * the safe side, let's check all three locations.

 SPDX-License-Identifier: (GPL-2.0+ OR MIT)

/*

 * Amlogic Meson Nand Flash Controller Driver

 *

 * Copyright (c) 2018 Amlogic, inc.

 * Author: Liang Yang <liang.yang@amlogic.com>

 eMMC clock register, misc control */

 nand flash controller delay 3 ns */

	/*

	 * Insert two commands to make sure all valid commands are finished.

	 *

	 * The Nand flash controller is designed as two stages pipleline -

	 *  a) fetch and b) excute.

	 * There might be cases when the driver see command queue is empty,

	 * but the Nand flash controller still has two commands buffered,

	 * one is fetched into NFC request queue (ready to run), and another

	 * is actively executing. So pushing 2 "IDLE" commands guarantees that

	 * the pipeline is emptied.

 wait cmd fifo is empty */

 use the max erase time as the maximum clock for waiting R/B */

 subtract cmd1 */

 info is updated by nfc dma engine*/

 request core clock */

 init SD_EMMC_CLOCK to sane defaults w/min clock rate */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * davinci_nand.c - NAND Flash Driver for DaVinci family chips

 *

 * Copyright © 2006 Texas Instruments.

 *

 * Port to 2.6.23 Copyright © 2008 by:

 *   Sander Huijsen <Shuijsen@optelecom-nkf.com>

 *   Troy Kisky <troy.kisky@boundarydevices.com>

 *   Dirk Behme <Dirk.Behme@gmail.com>

/*

 * This is a device driver for the NAND flash controller found on the

 * various DaVinci family chips.  It handles up to four SoC chipselects,

 * and some flavors of secondary chipselect (e.g. based on A12) as used

 * with multichip packages.

 *

 * The 1-bit ECC hardware is supported, as well as the newer 4-bit ECC

 * available on chips like the DM355 and OMAP-L137 and needed with the

 * more error-prone MLC NAND chips.

 *

 * This driver assumes EM_WAIT connects all the NAND devices' RDY/nBUSY

 * outputs in a "wire-AND" configuration, with no per-chip signals.

----------------------------------------------------------------------*/

/*

 * 1-bit hardware ECC ... context maintained for each core chipselect

 Reset ECC hardware */

 Restart ECC hardware */

/*

 * Read hardware ECC value and pack into three bytes

 invert so that erased block ecc is correct */

 Correctable error */

			/* Single bit ECC error in the ECC itself,

 Uncorrectable error */

----------------------------------------------------------------------*/

/*

 * 4-bit hardware ECC ... context maintained over entire AEMIF

 *

 * This is a syndrome engine, but we avoid NAND_ECC_PLACEMENT_INTERLEAVED

 * since that forces use of a problematic "infix OOB" layout.

 * Among other things, it trashes manufacturer bad block markers.

 * Also, and specific to this hardware, it ECC-protects the "prepad"

 * in the OOB ... while having ECC protection for parts of OOB would

 * seem useful, the current MTD stack sometimes wants to update the

 * OOB without recomputing ECC.

 Reset ECC hardware */

 Start 4-bit ECC calculation for read/write */

 Read raw ECC code after writing to NAND. */

 Terminate read ECC; or return ECC (as bytes) of data written to NAND. */

	/* After a read, terminate ECC calculation by a dummy read

	 * of some 4-bit ECC register.  ECC covers everything that

	 * was read; correct() just uses the hardware state, so

	 * ecc_code is not needed.

	/* Pack eight raw 10-bit ecc values into ten bytes, making

	 * two passes which each convert four values (in upper and

	 * lower halves of two 32-bit words) into five bytes.  The

	 * ROM boot loader uses this same packing scheme.

/* Correct up to 4 bits in data we just read, using state left in the

 * hardware plus the ecc_code computed when it was first written.

	/* Unpack ten bytes into eight 10 bit values.  We know we're

	 * little-endian, and use type punning for less shifting/masking.

 Tell ECC controller about the expected ECC codes. */

	/* Allow time for syndrome calculation ... then read it.

	 * A syndrome of all zeroes 0 means no detected errors.

	/*

	 * Clear any previous address calculation by doing a dummy read of an

	 * error address register.

	/* Start address calculation, and wait for it to complete.

	 * We _could_ start reading more data while this is working,

	 * to speed up the overall page read.

	/*

	 * ECC_STATE field reads 0x3 (Error correction complete) immediately

	 * after setting the 4BITECC_ADD_CALC_START bit. So if you immediately

	 * begin trying to poll for the state, you may fall right out of your

	 * loop without any of the correction calculations having taken place.

	 * The recommendation from the hardware team is to initially delay as

	 * long as ECC_STATE reads less than 4. After that, ECC HW has entered

	 * correction state.

 no error, should not happen */

 five or more errors detected */

 error addresses computed */

 still working on it */

 correct each error */

/**

 * nand_read_page_hwecc_oob_first - hw ecc, read oob first

 * @chip: nand chip info structure

 * @buf: buffer to store read data

 * @oob_required: caller requires OOB data read to chip->oob_poi

 * @page: page number to read

 *

 * Hardware ECC for large page chips, require OOB to be read first. For this

 * ECC mode, the write_page method is re-used from ECC_HW. These methods

 * read/write ECC from the OOB area, unlike the ECC_HW_SYNDROME support with

 * multiple ECC steps, follows the "infix ECC" scheme and reads/writes ECC from

 * the data area, by overwriting the NAND manufacturer bad block markings.

 Read the OOB area first */

 check for empty pages with bitflips */

----------------------------------------------------------------------*/

/* An ECC layout for using 4-bit ECC with small-page flash, storing

 * ten ECC bytes plus the manufacturer's bad block marker byte, and

 * and not overlapping the default BBT markers.

		/*

		 * Since kernel v4.8, this driver has been fixed to enable

		 * use of 4-bit hardware ECC with subpages and verified on

		 * TI's keystone EVMs (K2L, K2HK and K2E).

		 * However, in the interest of not breaking systems using

		 * existing UBI partitions, sub-page writes are not being

		 * (re)enabled. If you want to use subpage writes on Keystone

		 * platforms (i.e. do not have any existing UBI partitions),

		 * then use "ti,davinci-nand" as the compatible in your

		 * device-tree file.

 Use board-specific ECC config */

		/*

		 * This driver expects Hamming based ECC when engine_type is set

		 * to NAND_ECC_ENGINE_TYPE_SOFT. Force ecc.algo to

		 * NAND_ECC_ALGO_HAMMING to avoid adding an extra ->ecc_algo

		 * field to davinci_nand_pdata.

			/*

			 * No sanity checks:  CPUs must support this,

			 * and the chips may not use NAND_BUSWIDTH_16.

 No sharing 4-bit hardware between chipselects yet */

			/*

			 * Update ECC layout if needed ... for 1-bit HW ECC, the

			 * default is OK, but it allocates 6 bytes when only 3

			 * are needed (for each 512 bytes). For 4-bit HW ECC,

			 * the default is not usable: 10 bytes needed, not 6.

			 *

			 * For small page chips, preserve the manufacturer's

			 * badblock marking data ... and make sure a flash BBT

			 * table marker fits in the free bytes.

 1bit ecc hamming */

 insist on board-specific configuration */

 which external chipselect will we be managing? */

	/*

	 * This registers range is used to setup NAND settings. In case with

	 * TI AEMIF driver, the same memory address range is requested already

	 * by AEMIF, so we cannot request it twice, just ioremap.

	 * The AEMIF and NAND drivers not use the same registers in this range.

 options such as NAND_BBT_USE_FLASH */

 options such as 16-bit widths */

 use nandboot-capable ALE/CLE masks by default */

 put CSxNAND into NAND mode */

 Scan to find existence of the device(s) */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) STMicroelectronics 2018

 * Author: Christophe Kerello <christophe.kerello@st.com>

 Bad block marker length */

 ECC step size */

 BCHDSRx registers length */

 HECCR length */

 Max requests done for a 8k nand page size */

 Max chip enable */

 Max ECC buffer length */

 Timings */

 FMC2 Controller Registers */

 Register: FMC2_BCR1 */

 Register: FMC2_PCR */

 Register: FMC2_SR */

 Register: FMC2_PMEM */

 Register: FMC2_PATT */

 Register: FMC2_ISR */

 Register: FMC2_ICR */

 Register: FMC2_CSQCR */

 Register: FMC2_CSQCFGR1 */

 Register: FMC2_CSQCFGR2 */

 Register: FMC2_CSQCFGR3 */

 Register: FMC2_CSQCAR1 */

 Register: FMC2_CSQCAR2 */

 Register: FMC2_CSQIER */

 Register: FMC2_CSQICR */

 Register: FMC2_CSQEMSR */

 Register: FMC2_BCHIER */

 Register: FMC2_BCHICR */

 Register: FMC2_BCHDSR0 */

 Register: FMC2_BCHDSR1 */

 Register: FMC2_BCHDSR2 */

 Register: FMC2_BCHDSR3 */

 Register: FMC2_BCHDSR4 */

 Set tclr/tar timings */

 Set tset/twait/thold/thiz timings in common bank */

 Set tset/twait/thold/thiz timings in attribut bank */

 Configure ECC algorithm (default configuration is Hamming) */

 Set buswidth */

 Set ECC sector size */

		/*

		 * Hamming: we read HECCR register

		 * BCH4/BCH8: we read BCHDSRSx registers

 Calculate ECC length needed for one sector */

/*

 * Enable ECC logic and reset syndrome/parity bits previously calculated

 * Syndrome/parity bits is cleared by setting the ECCEN bit to 0

/*

 * ECC Hamming calculation

 * ECC is 3 bytes for 512 bytes of data (supports error correction up to

 * max of 1-bit)

 Indicate which bit and byte is faulty (if any) */

 No errors */

 Calculate bit position */

 Calculate byte position */

 Flip the bit */

/*

 * ECC BCH calculation and correction

 * ECC is 7/13 bytes for 512 bytes of data (supports error correction up to

 * max of 4-bit/8-bit)

 Wait until the BCH code is ready */

 Read parity bits */

 No errors found */

 Too many errors detected */

 Wait until the decoding error is ready */

 Read the nand page sector (512 bytes) */

 Read the corresponding ECC bytes */

 Correct the data */

 Check for empty pages with bitflips */

 Read oob */

 Sequencer read/write configuration */

	/*

	 * cfg[0] => csqcfgr1, cfg[1] => csqcfgr2, cfg[2] => csqcfgr3

	 * cfg[3] => csqar1, cfg[4] => csqar2

	/*

	 * - Set Program Page/Page Read command

	 * - Enable DMA request data

	 * - Set timings

	/*

	 * - Set Random Data Input/Random Data Read command

	 * - Enable the sequencer to access the Spare data area

	 * - Enable  DMA request status decoding for read

	 * - Set timings

	/*

	 * - Set the number of sectors to be written

	 * - Set timings

	/*

	 * Set the fourth first address cycles

	 * Byte 1 and byte 2 => column, we start at 0x0

	 * Byte 3 and byte 4 => page

	/*

	 * - Set chip enable number

	 * - Set ECC byte offset in the spare area

	 * - Calculate the number of address cycles to be issued

	 * - Set byte 5 of address cycle if needed

 Read/write data from/to a page */

 Configure DMA data */

 Configure DMA ECC status */

 Start the transfer */

 Wait end of sequencer transfer */

 Wait DMA data transfer completion */

 Wait DMA ECC transfer completion */

 Configure the sequencer */

 Write the page */

 Write oob */

 Get a status indicating which sectors have errors */

 Ecc_sta = FMC2_HECCR */

			/*

			 * Ecc_sta[0] = FMC2_BCHDSR0

			 * Ecc_sta[1] = FMC2_BCHDSR1

			 * Ecc_sta[2] = FMC2_BCHDSR2

			 * Ecc_sta[3] = FMC2_BCHDSR3

			 * Ecc_sta[4] = FMC2_BCHDSR4

 Check for empty pages with bitflips */

 Configure the sequencer */

 Read the page */

 Check if errors happen */

 Read oob */

 Correct data */

 Configure the sequencer */

 Read the page */

 Read oob */

 Sequencer is used */

 BCH is used */

 Reconfigure bus width to 8-bit */

 Buf is aligned */

 Read remaining bytes */

 Reconfigure bus width to 16-bit */

 Reconfigure bus width to 8-bit */

 Buf is aligned */

 Write remaining bytes */

 Reconfigure bus width to 16-bit */

 Check if there is no pending requests to the NAND flash */

 Wait tWB before R/B# signal is low */

 R/B# signal is low, clear high level flag */

 Wait R/B# signal is high */

 Set CS used to undefined */

 Enable wait feature and nand flash memory bank */

 Set buswidth to 8 bits mode for identification */

 ECC logic is disabled */

 Default mode */

 Set default ECC sector size */

 Set default tclr/tar timings */

 Enable FMC2 controller */

	/*

	 * tWAIT > tRP

	 * tWAIT > tWP

	 * tWAIT > tREA + tIO

	/*

	 * tSETUP_MEM > tCS - tWAIT

	 * tSETUP_MEM > tALS - tWAIT

	 * tSETUP_MEM > tDS - (tWAIT - tHIZ)

	/*

	 * tHOLD_MEM > tCH

	 * tHOLD_MEM > tREH - tSETUP_MEM

	 * tHOLD_MEM > max(tRC, tWC) - (tSETUP_MEM + tWAIT)

	/*

	 * tSETUP_ATT > tCS - tWAIT

	 * tSETUP_ATT > tCLS - tWAIT

	 * tSETUP_ATT > tALS - tWAIT

	 * tSETUP_ATT > tRHW - tHOLD_MEM

	 * tSETUP_ATT > tDS - (tWAIT - tHIZ)

	/*

	 * tHOLD_ATT > tALH

	 * tHOLD_ATT > tCH

	 * tHOLD_ATT > tCLH

	 * tHOLD_ATT > tCOH

	 * tHOLD_ATT > tDH

	 * tHOLD_ATT > tWB + tIO + tSYNC - tSETUP_MEM

	 * tHOLD_ATT > tADL - tSETUP_MEM

	 * tHOLD_ATT > tWH - tSETUP_MEM

	 * tHOLD_ATT > tWHR - tSETUP_MEM

	 * tHOLD_ATT > tRC - (tSETUP_ATT + tWAIT)

	 * tHOLD_ATT > tWC - (tSETUP_ATT + tWAIT)

 Allocate a buffer to store ECC status registers */

	/*

	 * Specific callbacks to read/write a page depending on

	 * the mode (polling/sequencer) and the algo used (Hamming, BCH).

 DMA => use sequencer mode callbacks */

 No DMA => use polling mode callbacks */

 Hamming is used */

 BCH is used */

 Specific configurations depending on the algo used */

 Hamming */

 BCH8 */

 BCH4 */

	/*

	 * Only NAND_ECC_ENGINE_TYPE_ON_HOST mode is actually supported

	 * Hamming => ecc.strength = 1

	 * BCH4 => ecc.strength = 4

	 * BCH8 => ecc.strength = 8

	 * ECC sector size = 512

 Default ECC settings in case they are not set in the device tree */

 Scan to find existence of the device */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2013 Boris BREZILLON <b.brezillon.dev@gmail.com>

 *

 * Derived from:

 *	https://github.com/yuq/sunxi-nfc-mtd

 *	Copyright (C) 2013 Qiang Yu <yuq825@gmail.com>

 *

 *	https://github.com/hno/Allwinner-Info

 *	Copyright (C) 2013 Henrik Nordström <Henrik Nordström>

 *

 *	Copyright (C) 2013 Dmitriy B. <rzk333@gmail.com>

 *	Copyright (C) 2013 Sergey Lapin <slapin@ossfans.org>

 define bit use in NFC_CTL */

 define bit use in NFC_ST */

 define bit use in NFC_INT */

 define bit use in NFC_TIMING_CTL */

 define NFC_TIMING_CFG register layout */

 define bit use in NFC_CMD */

 define bit use in NFC_RCMD_SET */

 define bit use in NFC_WCMD_SET */

 define bit use in NFC_ECC_CTL */

 define bit use in NFC_ECC_ST */

/**

 * struct sunxi_nand_chip_sel - stores information related to NAND Chip Select

 *

 * @cs: the NAND CS id used to communicate with a NAND Chip

 * @rb: the Ready/Busy pin ID. -1 means no R/B pin connected to the NFC

/**

 * struct sunxi_nand_hw_ecc - stores information related to HW ECC support

 *

 * @mode: the sunxi ECC mode field deduced from ECC requirements

/**

 * struct sunxi_nand_chip - stores NAND chip device related information

 *

 * @node: used to store NAND chips into a list

 * @nand: base NAND chip structure

 * @ecc: ECC controller structure

 * @clk_rate: clk_rate required for this NAND chip

 * @timing_cfg: TIMING_CFG register value for this NAND chip

 * @timing_ctl: TIMING_CTL register value for this NAND chip

 * @nsels: number of CS lines required by the NAND chip

 * @sels: array of CS lines descriptions

/*

 * NAND Controller capabilities structure: stores NAND controller capabilities

 * for distinction between compatible strings.

 *

 * @has_mdma:		Use mbus dma mode, otherwise general dma

 *			through MBUS on A23/A33 needs extra configuration.

 * @reg_io_data:	I/O data register

 * @dma_maxburst:	DMA maxburst

/**

 * struct sunxi_nfc - stores sunxi NAND controller information

 *

 * @controller: base controller structure

 * @dev: parent device (used to print error messages)

 * @regs: NAND controller registers

 * @ahb_clk: NAND controller AHB clock

 * @mod_clk: NAND controller mod clock

 * @reset: NAND controller reset line

 * @assigned_cs: bitmask describing already assigned CS lines

 * @clk_rate: NAND controller current clock rate

 * @chips: a list containing all the NAND chips attached to this NAND

 *	   controller

 * @complete: a completion object used to wait for NAND controller events

 * @dmac: the DMA channel attached to the NAND controller

 * @caps: NAND Controller capabilities

 Arbitrary limit for polling mode */

 Arbitrary limit for polling mode */

 These seed values have been extracted from Allwinner's BSP */

/*

 * sunxi_nfc_randomizer_ecc512_seeds and sunxi_nfc_randomizer_ecc1024_seeds

 * have been generated using

 * sunxi_nfc_randomizer_step(seed, (step_size * 8) + 15), which is what

 * the randomizer engine does internally before de/scrambling OOB data.

 *

 * Those tables are statically defined to avoid calculating randomizer state

 * at runtime.

	/*

	 * This loop is just a simple implementation of a Fibonacci LFSR using

	 * the x16 + x15 + 1 polynomial.

 De-randomize the Bad Block Marker. */

 Randomize the Bad Block Marker. */

		/*

		 * Re-read the data with the randomizer disabled to identify

		 * bitflips in erased pages.

 ECC errors are handled in the second loop. */

 TODO: use DMA to retrieve OOB */

			/*

			 * Re-read the data with the randomizer disabled to

			 * identify bitflips in erased pages.

			 * TODO: use DMA to read page in raw mode

 TODO: use DMA to retrieve OOB */

 Fallback to PIO mode */

 Fallback to PIO mode */

 TODO: use DMA to transfer extra OOB bytes ? */

 Send command to program the OOB data */

 Doesn't fit */

 T1 <=> tCLS */

 T2 <=> tCLH */

 T3 <=> tCS */

 T4 <=> tCH */

 T5 <=> tWP */

 T6 <=> tWH */

 T7 <=> tALS */

 T8 <=> tDS */

 T9 <=> tDH */

 T10 <=> tRR */

 T11 <=> tALH */

 T12 <=> tRP */

 T13 <=> tREH */

 T14 <=> tRC */

 T15 <=> tWC */

 T16 - T19 + tCAD */

	/*

	 * In non-EDO, tREA should be less than tRP to guarantee that the

	 * controller does not sample the IO lines too early. Unfortunately,

	 * the sunxi NAND controller does not allow us to have different

	 * values for tRP and tREH (tRP = tREH = tRW / 2).

	 *

	 * We have 2 options to overcome this limitation:

	 *

	 * 1/ Extend tRC to fulfil the tREA <= tRC / 2 constraint

	 * 2/ Use EDO mode (only works if timings->tRLOH > 0)

	/*

	 * TODO: according to ONFI specs this value only applies for DDR NAND,

	 * but Allwinner seems to set this to 0x7. Mimic them for now.

 TODO: A83 has some more bits for CDQSS, CS, CLHZ, CCS, WC */

 Convert min_clk_period from picoseconds to nanoseconds */

	/*

	 * Unlike what is stated in Allwinner datasheet, the clk_rate should

	 * be set to (1 / min_clk_period), and not (2 / min_clk_period).

	 * This new formula was verified with a scope and validated by

	 * Allwinner engineers.

	/*

	 * ONFI specification 3.1, paragraph 4.15.2 dictates that EDO data

	 * output cycle timings shall be used if the host drives tRC less than

	 * 30 ns. We should also use EDO mode if tREA is bigger than tRP.

	/*

	 * The first 2 bytes are used for BB markers, hence we

	 * only have 2 bytes available in the first user data

	 * section.

 Reserve 2 bytes for the BBM */

 4 non-ECC bytes are added before each ECC bytes section */

 and bytes has to be even. */

 Prefer 1k ECC chunk over 512 ones */

 Add ECC info retrieval from DT */

			/*

			 * Update ecc->strength value with the actual strength

			 * that will be used by the ECC engine.

 HW ECC always request ECC bytes for 1024 bytes blocks */

 HW ECC always work with even numbers of ECC bytes */

 TODO: support DMA for raw accesses and subpage write */

 Default tR value specified in the ONFI spec (chapter 4.15.1) */

	/*

	 * Set the ECC mode to the default value in case nothing is specified

	 * in the DT.

 Ignore errors to fall back to PIO mode */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright © 2009 - Maxim Levitsky

 * driver for Ricoh xD readers

 read register */

 write register */

 read dword sized register */

 write dword sized register */

 returns pointer to our private structure */

 check if controller supports dma */

/*

 * Enable dma. Enables ether first or second stage of the DMA,

 * Expects dev->dma_dir and dev->dma_state be set

 Set up dma settings */

 Precaution to make sure HW doesn't write */

 to random kernel memory */

 Precaution: make sure write reached the device */

 Set dma irq */

/*

 * Disable dma, called from the interrupt handler, which specifies

 * success of the operation via 'error' argument

 Precaution to make sure HW doesn't write to random kernel memory */

/*

 * Wait, till dma is done, which includes both phases of it

/*

 * Read/Write one page using dma. Only pages can be read (512 bytes)

 Set dma direction */

	/* Set initial dma state: for reading first fill on board buffer,

 if incoming buffer is not page aligned, we should do bounce */

 Enable DMA */

 Wait till complete */

/*

 * Program data lines of the nand chip to send data to it

 Don't allow any access to hardware if we suspect card removal */

 Special case for whole sector read */

 write DWORD chinks - faster */

 write rest */

/*

 * Read data lines of the nand chip to retrieve data

		/* since we can't signal error here, at least, return

 special case for whole sector read */

 read in dword sized chunks */

 read the reset by bytes */

/*

 * Read one byte from nand chip

 Same problem as in r852_read_buf.... */

/*

 * Control several chip lines & send commands

 when write is stareted, enable write access */

	 /* HACK: NAND_CMD_SEQIN is called without NAND_CTRL_CHANGE, but we need

/*

 * Wait till card is ready.

 * based on nand_wait, but returns errors on DMA error

 Unfortunelly, no way to send detailed error status... */

/*

 * Check if card is ready

/*

 * Set ECC engine mode

 enable ecc generation/check*/

 flush ecc buffer */

 disable ecc generation */

/*

 * Calculate ECC, only used for writes

/*

 * Correct the data using ECC, hw did almost everything for us

 ecc uncorrectable error */

 correctable error */

/*

 * This is copy of nand_read_oob_std

 * nand_read_oob_syndrome assumes we can send column address - we can't

/*

 * Start the nand engine

/*

 * Stop the nand engine

/*

 * Test if card is present

/*

 * Update card detection IRQ state according to current card state

 * which is read in r852_card_update_present

 Detect properties of card in slot */

/*

 * Register the nand device

 * Called when the card is detected

 Force card redetect */

/*

 * Unregister the card

 Card state updater */

 False alarm */

 Read media properties */

 Register the card */

 Ack + disable IRQ generation */

 Interrupt handler */

 handle card detection interrupts first */

		/* we shouldn't receive any interrupts if we wait for card

 disable irqs while card is unstable */

 this will timeout DMA if active, but better that garbage */

 let, card state to settle a bit, and then do the work */

 Handle dma interrupts */

 received DMA interrupt out of nowhere? */

 done device access */

 done memory DMA */

 Enable 2nd half of dma dance */

 Operation done */

 Handle unknown interrupts */

 TODO: hack */

 pci initialization */

 init nand chip, but register it only on card insert */

 commands */

 I/O */

 init our device structure */

 shutdown everything - precation */

register irq handler*/

 kick initial present test */

	/* Stop detect workqueue -

 Unregister the device, this might make more IO */

 Stop interrupts */

 Cleanup */

 Shutdown the PCI device */

 First make sure the detect work is gone */

 Turn off the interrupts and stop the device */

	/* If card was pulled off just during the suspend, which is very

		unlikely, we will remove it on resume, it too late now

 If card status changed, just do the work */

 Otherwise, initialize the card */

 Program card detection IRQ */

/*

 * Toshiba TMIO NAND flash controller driver

 *

 * Slightly murky pre-git history of the driver:

 *

 * Copyright (c) Ian Molton 2004, 2005, 2008

 *    Original work, independent of sharps code. Included hardware ECC support.

 *    Hard ECC did not work for writes in the early revisions.

 * Copyright (c) Dirk Opfer 2005.

 *    Modifications developed from sharps code but

 *    NOT containing any, ported onto Ians base.

 * Copyright (c) Chris Humbert 2005

 * Copyright (c) Dmitry Baryshkov 2008

 *    Minor fixes

 *

 * Parts copyright Sebastian Carlier

 *

 * This file is licensed under

 * the terms of the GNU General Public License version 2. This program

 * is licensed "as is" without any warranty of any kind, whether express

 * or implied.

 *

--------------------------------------------------------------------------*/

/*

 * NAND Flash Host Controller Configuration Register

 w Command				*/

 l NAND Flash Control Reg Base Addr	*/

 b Interrupt Pin			*/

 b Interrupt Enable			*/

 b Event Control			*/

 b Internal Clock Control		*/

 b ECC Control			*/

 b NAND Flash Transaction Control	*/

 b NAND Flash Monitor			*/

 b NAND Flash Power Supply Control	*/

 b NAND Flash Detect Control		*/

/*

 * NAND Flash Control Register

 bwl Data Register			*/

 b Mode Register			*/

 b Status Register			*/

 b Interrupt Status Register		*/

 b Interrupt Mask Register		*/

 FCR_MODE Register Command List */

 Data Data_Mode */

 Data Command_Mode */

 Data Address_Mode */

 HW-ECC Data */

 HW-ECC Calc result Read_Mode */

 HW-ECC Reset */

 Power Supply ON  to SSFDC card */

 Power Supply OFF to SSFDC card */

 LED OFF */

 LED ON */

 Ejection events active  */

 Ejection events ignored */

 Lock_Mode. Eject Switch Invalid */

 UnLock_Mode. Eject Switch is valid */

 Controller ID Read */

 SSFDC card Changes Standby State */

--------------------------------------------------------------------------*/

 for tmio_nand_read_byte */

--------------------------------------------------------------------------*/

 disable RDYREQ interrupt */

/*

  *The TMIO core has a RDYREQ interrupt on the posedge of #SMRB.

  *This interrupt is normally disabled, but for long operations like

  *erase and write, we enable it to wake us up.  The irq handler

  *disables the interrupt.

 enable RDYREQ interrupt */

/*

  *The TMIO controller combines two 8-bit data bytes into one 16-bit

  *word. This function separates them so nand_base.c works as expected,

  *especially its NAND_CMD_READID routines.

 *

  *To prevent stale data from being read, tmio_nand_hwcontrol() clears

  *tmio->read_good.

/*

  *The TMIO controller converts an 8-bit NAND interface to a 16-bit

  *bus interface, so all data reads and writes must be 16-bit wide.

  *Thus, we implement 16-bit versions of the read, write, and verify

  *buffer functions.

 dummy read */

 000-255 LP7-0 */

 000-255 LP15-8 */

 000-255 CP5-0,11b */

 256-511 LP7-0 */

 256-511 LP15-8 */

 256-511 CP5-0,11b */

 assume ecc.size = 512 and ecc.bytes = 6 */

 (4Ch) CLKRUN Enable    1st spcrunc */

 (10h)BaseAddress    0x1000 spba.spba2 */

 (04h)Command Register I/O spcmd */

 (62h) Power Supply Control ssmpwc */

 HardPowerOFF - SuspendOFF - PowerSupplyWait_4MS */

 (63h) Detect Control ssmdtc */

 Interrupt status register clear sintst */

 After power supply, Media are reset smode */

 Standby Mode smode */

 Set address of NAND IO lines */

 Set address of hardware control function */

 15 us command delay time */

 Scan to find existence of the device */

 Register the partitions */

	/* FIXME - is this required or merely another attack of the broken

	 * SHARP platform? Looks suspicious.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2006-2007 PA Semi, Inc

 *

 * Author: Egor Martovetsky <egor@pasemi.com>

 * Maintained by: Olof Johansson <olof@lixom.net>

 *

 * Driver for the PWRficient onchip NAND flash interface

 Push out posted writes */

 We only support one device at the moment */

 Allocate memory for MTD device structure and private data */

 Link the private data with the MTD structure */

 Enable the following for a flash based bad block table */

	/*

	 * This driver assumes that the default ECC engine should be TYPE_SOFT.

	 * Set ->engine_type before registering the NAND devices in order to

	 * provide a driver specific default value.

 Scan to find existence of the device */

 Release resources, unregister device */

 Free the MTD device structure */

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 2000 Steven J. Hill (sjhill@realitydiluted.com)

 *		  2002-2006 Thomas Gleixner (tglx@linutronix.de)

 *

 *  Credits:

 *	David Woodhouse for adding multichip support

 *

 *	Aleph One Ltd. and Toby Churchill Ltd. for supporting the

 *	rework for 2K page size chips

 *

 * This file contains all ONFI helpers.

/*

 * Check if the NAND chip is JEDEC compliant, returns 1 if it is, 0 otherwise.

 Try JEDEC for unknown chip or LP */

 JEDEC chip: allocate a buffer to hold its parameter page */

 Check version */

 vendor specific version */

 Please reference to the comment for nand_flash_detect_onfi. */

 Please reference to the comment for nand_flash_detect_onfi. */

 ECC info */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hisilicon NAND Flash controller driver

 *

 * Copyright © 2012-2014 HiSilicon Technologies Co., Ltd.

 *              http://www.hisilicon.com

 *

 * Author: Zhou Wang <wangzhou.bry@gmail.com>

 * The initial developer of the original code is Zhiyong Cai

 * <caizhiyong@huawei.com>

 interrupt status */

 nfc is ready */

 wait cmd timeout */

 sanity check */

 Serially input address */

 Adjust columns for 16 bit buswidth */

 store interrupts state */

 errors which can not be corrected by ECC */

 TODO: need add other ECC modes! */

 default page size: 2K, ecc_none. need modify */

 enable DMA irq */

 FIXME: add ECC bytes position */

 TODO: add more page size support */

 TODO: add more ecc strength support */

 add ecc type configure */

 enable ecc irq */

	/*

	 * TODO: add more pagesize support,

	 * default pagesize has been set in hisi_nfc_host_init

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 2000 Steven J. Hill (sjhill@realitydiluted.com)

 *		  2002-2006 Thomas Gleixner (tglx@linutronix.de)

 *

 *  Credits:

 *	David Woodhouse for adding multichip support

 *

 *	Aleph One Ltd. and Toby Churchill Ltd. for supporting the

 *	rework for 2K page size chips

 *

 * This file contains all legacy helpers/code that should be removed

 * at some point.

/**

 * nand_read_byte - [DEFAULT] read one byte from the chip

 * @chip: NAND chip object

 *

 * Default read function for 8bit buswidth

/**

 * nand_read_byte16 - [DEFAULT] read one byte endianness aware from the chip

 * @chip: NAND chip object

 *

 * Default read function for 16bit buswidth with endianness conversion.

 *

/**

 * nand_select_chip - [DEFAULT] control CE line

 * @chip: NAND chip object

 * @chipnr: chipnumber to select, -1 for deselect

 *

 * Default select function for 1 chip devices.

/**

 * nand_write_byte - [DEFAULT] write single byte to chip

 * @chip: NAND chip object

 * @byte: value to write

 *

 * Default function to write a byte to I/O[7:0]

/**

 * nand_write_byte16 - [DEFAULT] write single byte to a chip with width 16

 * @chip: NAND chip object

 * @byte: value to write

 *

 * Default function to write a byte to I/O[7:0] on a 16-bit wide chip.

	/*

	 * It's not entirely clear what should happen to I/O[15:8] when writing

	 * a byte. The ONFi spec (Revision 3.1; 2012-09-19, Section 2.16) reads:

	 *

	 *    When the host supports a 16-bit bus width, only data is

	 *    transferred at the 16-bit width. All address and command line

	 *    transfers shall use only the lower 8-bits of the data bus. During

	 *    command transfers, the host may place any value on the upper

	 *    8-bits of the data bus. During address transfers, the host shall

	 *    set the upper 8-bits of the data bus to 00h.

	 *

	 * One user of the write_byte callback is nand_set_features. The

	 * four parameters are specified to be written to I/O[7:0], but this is

	 * neither an address nor a command transfer. Let's assume a 0 on the

	 * upper I/O lines is OK.

/**

 * nand_write_buf - [DEFAULT] write buffer to chip

 * @chip: NAND chip object

 * @buf: data buffer

 * @len: number of bytes to write

 *

 * Default write function for 8bit buswidth.

/**

 * nand_read_buf - [DEFAULT] read chip data into buffer

 * @chip: NAND chip object

 * @buf: buffer to store date

 * @len: number of bytes to read

 *

 * Default read function for 8bit buswidth.

/**

 * nand_write_buf16 - [DEFAULT] write buffer to chip

 * @chip: NAND chip object

 * @buf: data buffer

 * @len: number of bytes to write

 *

 * Default write function for 16bit buswidth.

/**

 * nand_read_buf16 - [DEFAULT] read chip data into buffer

 * @chip: NAND chip object

 * @buf: buffer to store date

 * @len: number of bytes to read

 *

 * Default read function for 16bit buswidth.

/**

 * panic_nand_wait_ready - [GENERIC] Wait for the ready pin after commands.

 * @chip: NAND chip object

 * @timeo: Timeout

 *

 * Helper function for nand_wait_ready used when needing to wait in interrupt

 * context.

 Wait for the device to get ready */

/**

 * nand_wait_ready - [GENERIC] Wait for the ready pin after commands.

 * @chip: NAND chip object

 *

 * Wait for the ready pin after a command, and warn if a timeout occurs.

 Wait until command is processed or timeout occurs */

/**

 * nand_wait_status_ready - [GENERIC] Wait for the ready status after commands.

 * @chip: NAND chip object

 * @timeo: Timeout in ms

 *

 * Wait for status ready (i.e. command done) or timeout.

/**

 * nand_command - [DEFAULT] Send command to NAND device

 * @chip: NAND chip object

 * @command: the command to be sent

 * @column: the column address for this command, -1 if none

 * @page_addr: the page address for this command, -1 if none

 *

 * Send command to NAND device. This function is used for small page devices

 * (512 Bytes per page).

 Write out the command to the device */

 OOB area */

 First 256 bytes --> READ0 */

 Address cycle, when necessary */

 Serially input address */

 Adjust columns for 16 bit buswidth */

	/*

	 * Program and erase have their own busy handlers status and sequential

	 * in needs no delay

 EZ-NAND can take upto 250ms as per ONFi v4.0 */

 This applies to read commands */

		/*

		 * READ0 is sometimes used to exit GET STATUS mode. When this

		 * is the case no address cycles are requested, and we can use

		 * this information to detect that we should not wait for the

		 * device to be ready.

		/*

		 * If we don't have access to the busy pin, we apply the given

		 * command delay

	/*

	 * Apply this short delay always to ensure that we do wait tWB in

	 * any case on any machine.

	/*

	 * The controller already takes care of waiting for tCCS when the RNDIN

	 * or RNDOUT command is sent, return directly.

	/*

	 * Wait tCCS_min if it is correctly defined, otherwise wait 500ns

	 * (which should be safe for all NANDs).

/**

 * nand_command_lp - [DEFAULT] Send command to NAND large page device

 * @chip: NAND chip object

 * @command: the command to be sent

 * @column: the column address for this command, -1 if none

 * @page_addr: the page address for this command, -1 if none

 *

 * Send command to NAND device. This is the version for the new large page

 * devices. We don't have the separate regions as we have in the small page

 * devices. We must emulate NAND_CMD_READOOB to keep the code compatible.

 Emulate NAND_CMD_READOOB */

 Command latch cycle */

 Serially input address */

 Adjust columns for 16 bit buswidth */

 Only output a single addr cycle for 8bits opcodes. */

	/*

	 * Program and erase have their own busy handlers status, sequential

	 * in and status need no delay.

 EZ-NAND can take upto 250ms as per ONFi v4.0 */

 No ready / busy check necessary */

		/*

		 * READ0 is sometimes used to exit GET STATUS mode. When this

		 * is the case no address cycles are requested, and we can use

		 * this information to detect that READSTART should not be

		 * issued.

 This applies to read commands */

		/*

		 * If we don't have access to the busy pin, we apply the given

		 * command delay.

	/*

	 * Apply this short delay always to ensure that we do wait tWB in

	 * any case on any machine.

/**

 * nand_get_set_features_notsupp - set/get features stub returning -ENOTSUPP

 * @chip: nand chip info structure

 * @addr: feature address.

 * @subfeature_param: the subfeature parameters, a four bytes array.

 *

 * Should be used by NAND controller drivers that do not support the SET/GET

 * FEATURES operations.

/**

 * nand_wait - [DEFAULT] wait until the command is done

 * @chip: NAND chip structure

 *

 * Wait for command done. This applies to erase and program only.

	/*

	 * Apply this short delay always to ensure that we do wait tWB in any

	 * case on any machine.

 This can happen if in case of timeout or buggy dev_ready */

 check for proper chip_delay setup, set 20us if not */

 check, if a user supplied command function given */

 check, if a user supplied wait function given */

 If called twice, pointers that depend on busw may need to be reset */

 Do not replace user supplied command function! */

	/*

	 * ->legacy.cmdfunc() is legacy and will only be used if ->exec_op() is

	 * not populated.

	/*

	 * Default functions assigned for ->legacy.cmdfunc() and

	 * ->legacy.select_chip() both expect ->legacy.cmd_ctrl() to be

	 *  populated.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright 2004-2007 Freescale Semiconductor, Inc. All Rights Reserved.

 * Copyright 2008 Sascha Hauer, kernel@pengutronix.de

 Addresses for NFC registers */

/*

 * Operation modes for the NFC. Valid for v1, v2 and v3

 * type controllers.

	/*

	 * On i.MX21 the CONFIG2:INT bit cannot be read if interrupts are masked

	 * (CONFIG1:INT_MSK is set). To handle this the driver uses

	 * enable_irq/disable_irq_nosync instead of CONFIG1:INT_MSK

 We assume that src (IO) is always 32bit aligned */

 __iowrite32_copy use 32bit size values so divide by 4 */

 We assume that trg (IO) is always 32bit aligned */

/*

 * The controller splits a page into data chunks of 512 bytes + partial oob.

 * There are writesize / 512 such chunks, the size of the partial oob parts is

 * oobsize / #chunks rounded down to a multiple of 2. The last oob chunk then

 * contains additionally the byte lost by rounding (if any).

 * This function handles the needed shuffling between host->data_buf (which

 * holds a page in natural order, i.e. writesize bytes data + oobsize bytes

 * spare) and the NFC buffer.

 size of oob chunk for all but possibly the last one */

 the last chunk */

 the last chunk */

/*

 * MXC NANDFC can only perform full page+spare or spare-only read/write.  When

 * the upper layers perform a read/write buf operation, the saved column address

 * is used to index into the full page. So usually this function is called with

 * column == 0 (unless no column cycle is needed indicated by column == -1)

 Write out column address, if necessary */

 another col addr cycle for 2k page */

 Write out page address, if necessary */

 paddr_0 - p_addr_7 */

 paddr_8 - paddr_15 */

 paddr_8 - paddr_15 */

 paddr_8 - paddr_15 */

 paddr_8 - paddr_15 */

/* This function polls the NANDFC to wait for the basic operation to

 * complete by checking the INT bit of config2 register.

	/*

	 * If operation is already complete, don't bother to setup an irq or a

	 * loop.

 fill command */

 send out command */

 Wait for operation to complete */

/* This function issues the specified command to the NAND device and

 Reset completion is indicated by NFC_CONFIG2 */

 being set to 0 */

 Wait for operation to complete */

 fill address */

 send out address */

/* This function sends an address (or partial address) to the

 * NAND device. The address is used to select the source/destination for

 Wait for operation to complete */

 transfer data from NFC ram to nand */

 NANDFC buffer 0 is used for page read/write */

 Wait for operation to complete */

 NANDFC buffer 0 is used for page read/write */

 Wait for operation to complete */

 Read ID into main buffer */

 Request the NANDFC to perform a read of the NAND device ID. */

 NANDFC buffer 0 is used for device ID output */

 Wait for operation to complete */

/* This function requests the NANDFC to perform a read of the

	/*

	 * The device status is stored in main_area0. To

	 * prevent corruption of the buffer save the value

	 * and restore it afterwards.

 This functions is used by upper layer to checks if device is ready */

	/*

	 * NFC handles R/B internally. Therefore, this function

	 * always returns status as ready.

 NANDFC buffer 0 is used for page read/write */

 Wait for operation to complete */

 Check for status request */

 only take the lower byte of each word */

/* Write data of length len to buffer buf. The data to be

 * written on NAND Flash is first copied to RAMbuffer. After the Data Input

/* Read the data buffer from the NAND Flash. To read the data from NAND

 * Flash first the data output cycle is initiated by the NFC, which copies

 * the data to RAMbuffer. This data of length len is then copied to buffer buf.

/* This function is used by upper layer for select and

 Disable the NFC clock */

 Enable the NFC clock */

 Disable the NFC clock */

 Enable the NFC clock */

/*

 * v2 and v3 type controllers can do 4bit or 8bit ecc depending

 * on how much oob the nand chip has. For 8bit ecc we need at least

 * 26 bytes of oob data per 512 byte block.

 preset operation */

 Unlock the internal RAM Buffer */

 Blocks to be unlocked */

 Unlock Block Command for given address range */

	/*

	 * For tRC < 30ns we have to use EDO mode. In this case the controller

	 * does one access per clock cycle. Otherwise the controller does one

	 * access in two clock cycles, thus we have to double the rate to the

	 * controller.

	/*

	 * The timing values compared against are from the i.MX25 Automotive

	 * datasheet, Table 50. NFC Timing Parameters

 preset operation */

 spare area size in 16-bit half-words */

 Unlock the internal RAM Buffer */

 Blocks to be unlocked */

 Unlock Block Command for given address range */

 Unlock the internal RAM Buffer */

 Blocks to be unlocked */

 Reset default */

/* Used by the upper layer to write command to NAND Flash for

 Reset command state information */

 Command pre-processing step */

/*

 * The generic flash bbt descriptors overlap with our ecc

 * hardware, so define some i.MX specific ones.

 v1 + irqpending_quirk: i.MX21 */

 v1 + !irqpending_quirk: i.MX27, i.MX31 */

 v21: i.MX25, i.MX35 */

 v3.2a: i.MX51 */

 v3.2b: i.MX53 */

 sentinel */ }

 Allocate the right size buffer now */

 Call preset again, with correct writesize chip time */

	/*

	 * Experimentation shows that i.MX NFC can only handle up to 218 oob

	 * bytes. Limit used_oobsize to 218 so as to not confuse copy_spare()

	 * into copying invalid data to/from the spare IO buffer, as this

	 * might cause ECC data corruption when doing sub-page write to a

	 * partially written page.

 Allocate memory for MTD device structure and private data */

 allocate a temporary buffer for the nand_scan_ident() */

 structures must be linked */

 50 us command delay time */

	/*

	 * Use host->devtype_data->irq_control() here instead of irq_control()

	 * because we must not disable_irq_nosync without having requested the

	 * irq.

	/*

	 * Now that we "own" the interrupt make sure the interrupt mask bit is

	 * cleared on i.MX21. Otherwise we can't read the interrupt status bit

	 * on this machine.

 Scan the NAND device */

 Register the partitions */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Overview:

 *   Bad block table support for the NAND driver

 *

 *  Copyright © 2004 Thomas Gleixner (tglx@linutronix.de)

 *

 * Description:

 *

 * When nand_scan_bbt is called, then it tries to find the bad block table

 * depending on the options in the BBT descriptor(s). If no flash based BBT

 * (NAND_BBT_USE_FLASH) is specified then the device is scanned for factory

 * marked good / bad blocks. This information is used to create a memory BBT.

 * Once a new bad block is discovered then the "factory" information is updated

 * on the device.

 * If a flash based BBT is specified then the function first tries to find the

 * BBT on flash. If a BBT is found then the contents are read and the memory

 * based BBT is created. If a mirrored BBT is selected then the mirror is

 * searched too and the versions are compared. If the mirror has a greater

 * version number, then the mirror BBT is used to build the memory based BBT.

 * If the tables are not versioned, then we "or" the bad block information.

 * If one of the BBTs is out of date or does not exist it is (re)created.

 * If no BBT exists at all then the device is scanned for factory marked

 * good / bad blocks and the bad block tables are created.

 *

 * For manufacturer created BBTs like the one found on M-SYS DOC devices

 * the BBT is searched and read but never created

 *

 * The auto generated bad block table is located in the last good blocks

 * of the device. The table is mirrored, so it can be updated eventually.

 * The table is marked in the OOB area with an ident pattern and a version

 * number which indicates which of both tables is more up to date. If the NAND

 * controller needs the complete OOB area for the ECC information then the

 * option NAND_BBT_NO_OOB should be used (along with NAND_BBT_USE_FLASH, of

 * course): it moves the ident pattern and the version byte into the data area

 * and the OOB area will remain untouched.

 *

 * The table uses 2 bits per block

 * 11b:		block is good

 * 00b:		block is factory marked bad

 * 01b, 10b:	block is marked bad due to wear

 *

 * The memory bad block table uses the following scheme:

 * 00b:		block is good

 * 01b:		block is marked bad due to wear

 * 10b:		block is reserved (to protect the bbt area)

 * 11b:		block is factory marked bad

 *

 * Multichip devices like DOC store the bad block info per floor.

 *

 * Following assumptions are made:

 * - bbts start at a page boundary, if autolocated on a block boundary

 * - the space necessary for a bbt in FLASH does not exceed a block boundary

/**

 * check_pattern - [GENERIC] check if a pattern is in the buffer

 * @buf: the buffer to search

 * @len: the length of buffer to search

 * @paglen: the pagelength

 * @td: search pattern descriptor

 *

 * Check for a pattern at the given place. Used to search bad block tables and

 * good / bad block identifiers.

 Compare the pattern */

/**

 * check_short_pattern - [GENERIC] check if a pattern is in the buffer

 * @buf: the buffer to search

 * @td:	search pattern descriptor

 *

 * Check for a pattern at the given place. Used to search bad block tables and

 * good / bad block identifiers. Same as check_pattern, but no optional empty

 * check.

 Compare the pattern */

/**

 * add_marker_len - compute the length of the marker in data area

 * @td: BBT descriptor used for computation

 *

 * The length will be 0 if the marker is located in OOB area.

/**

 * read_bbt - [GENERIC] Read the bad block table starting from page

 * @this: NAND chip object

 * @buf: temporary buffer

 * @page: the starting page

 * @num: the number of bbt descriptors to read

 * @td: the bbt describtion table

 * @offs: block number offset in the table

 *

 * Read the bad block table starting from page.

			/*

			 * In case the BBT marker is not in the OOB area it

			 * will be just in the first page.

 Analyse data */

				/*

				 * Leave it for now, if it's matured we can

				 * move this message to pr_debug.

 Factory marked bad or worn out? */

/**

 * read_abs_bbt - [GENERIC] Read the bad block table starting at a given page

 * @this: NAND chip object

 * @buf: temporary buffer

 * @td: descriptor for the bad block table

 * @chip: read the table for a specific chip, -1 read all chips; applies only if

 *        NAND_BBT_PERCHIP option is set

 *

 * Read the bad block table for all chips starting at a given page. We assume

 * that the bbt bits are in consecutive order.

 BBT marker is in the first page, no OOB */

/**

 * scan_read_oob - [GENERIC] Scan data+OOB region to buffer

 * @this: NAND chip object

 * @buf: temporary buffer

 * @offs: offset at which to scan

 * @len: length of data region to read

 *

 * Scan read data from data+OOB. May traverse multiple pages, interleaving

 * page,OOB,page,OOB,... in buf. Completes transfer and returns the "strongest"

 * ECC condition (error or bitflip). May quit on the first (non-ECC) error.

 Scan write data with oob to flash */

/**

 * read_abs_bbts - [GENERIC] Read the bad block table(s) for all chips starting at a given page

 * @this: NAND chip object

 * @buf: temporary buffer

 * @td: descriptor for the bad block table

 * @md:	descriptor for the bad block table mirror

 *

 * Read the bad block table(s) for all chips starting at a given page. We

 * assume that the bbt bits are in consecutive order.

 Read the primary version, if available */

 Read the mirror version, if available */

 Scan a given block partially */

		/*

		 * Read the full oob until read_oob is fixed to handle single

		 * byte reads for 16 bit buswidth.

 Ignore ECC errors when checking for BBM */

 Check if a potential BBT block is marked as bad */

	/*

	 * No need to check for a bad BBT block if the BBM area overlaps with

	 * the bad block table marker area in OOB since writing a BBM here

	 * invalidates the bad block table marker anyway.

	/*

	 * There is no point in checking for a bad block marker if writing

	 * such marker is not supported

/**

 * create_bbt - [GENERIC] Create a bad block table by scanning the device

 * @this: NAND chip object

 * @buf: temporary buffer

 * @bd: descriptor for the good/bad block search pattern

 * @chip: create the table for a specific chip, -1 read all chips; applies only

 *        if NAND_BBT_PERCHIP option is set

 *

 * Create a bad block table by scanning the device for the given good/bad block

 * identify pattern.

/**

 * search_bbt - [GENERIC] scan the device for a specific bad block table

 * @this: NAND chip object

 * @buf: temporary buffer

 * @td: descriptor for the bad block table

 *

 * Read the bad block table by searching for a given ident pattern. Search is

 * preformed either from the beginning up or from the end of the device

 * downwards. The search starts always at the start of a block. If the option

 * NAND_BBT_PERCHIP is given, each chip is searched for a bbt, which contains

 * the bad block information of this chip. This is necessary to provide support

 * for certain DOC devices.

 *

 * The bbt ident pattern resides in the oob area of the first page in a block.

 Search direction top -> down? */

 Do we have a bbt per chip? */

 Reset version information */

 Scan the maximum number of blocks */

 Check if block is marked bad */

 Read first page */

 Check, if we found a bbt for each requested chip */

/**

 * search_read_bbts - [GENERIC] scan the device for bad block table(s)

 * @this: NAND chip object

 * @buf: temporary buffer

 * @td: descriptor for the bad block table

 * @md: descriptor for the bad block table mirror

 *

 * Search and read the bad block table(s).

 Search the primary table */

 Search the mirror table */

/**

 * get_bbt_block - Get the first valid eraseblock suitable to store a BBT

 * @this: the NAND device

 * @td: the BBT description

 * @md: the mirror BBT descriptor

 * @chip: the CHIP selector

 *

 * This functions returns a positive block number pointing a valid eraseblock

 * suitable to store a BBT (i.e. in the range reserved for BBT), or -ENOSPC if

 * all blocks are already used of marked bad. If td->pages[chip] was already

 * pointing to a valid block we re-use it, otherwise we search for the next

 * valid one.

	/*

	 * There was already a version of the table, reuse the page. This

	 * applies for absolute placement too, as we have the page number in

	 * td->pages.

	/*

	 * Automatic placement of the bad block table. Search direction

	 * top -> down?

 Check, if the block is bad */

 Check, if the block is used by the mirror table */

/**

 * mark_bbt_block_bad - Mark one of the block reserved for BBT bad

 * @this: the NAND device

 * @td: the BBT description

 * @chip: the CHIP selector

 * @block: the BBT block to mark

 *

 * Blocks reserved for BBT can become bad. This functions is an helper to mark

 * such blocks as bad. It takes care of updating the in-memory BBT, marking the

 * block as bad using a bad block marker and invalidating the associated

 * td->pages[] entry.

/**

 * write_bbt - [GENERIC] (Re)write the bad block table

 * @this: NAND chip object

 * @buf: temporary buffer

 * @td: descriptor for the bad block table

 * @md: descriptor for the bad block table mirror

 * @chipsel: selector for a specific chip, -1 for all

 *

 * (Re)write the bad block table.

 Write bad block table per chip rather than per device? */

 Full device write or specific chip? */

 Loop through the chips */

		/*

		 * get_bbt_block() returns a block number, shift the value to

		 * get a page number.

 Set up shift count and masks for the flash table */

 Must we save the block contents? */

 Make it block aligned */

 Read oob data */

 Calc the byte offset in the buffer */

 Preset the bbt area with 0xff */

 The version byte */

 Calc length */

 Make it page aligned! */

 Preset the buffer with 0xff */

 Pattern is located at the begin of first page */

 Calc length */

 Make it page aligned! */

 Preset the buffer with 0xff */

 Pattern is located in oob area of first page */

 Walk through the memory table */

 Do not store the reserved bbt blocks! */

 Mark it as used */

/**

 * nand_memory_bbt - [GENERIC] create a memory based bad block table

 * @this: NAND chip object

 * @bd: descriptor for the good/bad block search pattern

 *

 * The function creates a memory based bbt by scanning the device for

 * manufacturer / software marked good / bad blocks.

/**

 * check_create - [GENERIC] create and write bbt(s) if necessary

 * @this: the NAND device

 * @buf: temporary buffer

 * @bd: descriptor for the good/bad block search pattern

 *

 * The function checks the results of the previous call to read_bbt and creates

 * / updates the bbt(s) if necessary. Creation is necessary if no bbt was found

 * for the chip/device. Update is necessary if one of the tables is missing or

 * the version nr. of one table is less than the other.

 Do we have a bbt per chip? */

 Per chip or per device? */

 Mirrored table available? */

 Create the bad block table by scanning the device? */

 Create the table in memory by scanning the chip(s) */

 Read back first? */

 Mark table as invalid */

 If they weren't versioned, read both */

 Mark table as invalid */

 Scrub the flash table(s)? */

 Update version numbers before writing */

 Write the bad block table to the device? */

 Write the mirror bad block table to the device? */

/**

 * nand_update_bbt - update bad block table(s)

 * @this: the NAND device

 * @offs: the offset of the newly marked block

 *

 * The function updates the bad block table(s).

 Allocate a temporary buffer for one eraseblock incl. oob */

 Do we have a bbt per chip? */

 Write the bad block table to the device? */

 Write the mirror bad block table to the device? */

/**

 * mark_bbt_region - [GENERIC] mark the bad block table regions

 * @this: the NAND device

 * @td: bad block table descriptor

 *

 * The bad block table regions are marked as "bad" to prevent accidental

 * erasures / writes. The regions are identified by the mark 0x02.

 Do we have a bbt per chip? */

		/*

		 * If we want reserved blocks to be recorded to flash, and some

		 * new ones have been marked, then we need to update the stored

		 * bbts.  This should only happen once.

/**

 * verify_bbt_descr - verify the bad block description

 * @this: the NAND device

 * @bd: the table to verify

 *

 * This functions performs a few sanity checks on the bad block description

 * table.

/**

 * nand_scan_bbt - [NAND Interface] scan, find, read and maybe create bad block table(s)

 * @this: the NAND device

 * @bd: descriptor for the good/bad block search pattern

 *

 * The function checks, if a bad block table(s) is/are already available. If

 * not it scans the device for manufacturer marked good / bad blocks and writes

 * the bad block table(s) to the selected place.

 *

 * The bad block table memory is allocated here. It must be freed by calling

 * the nand_free_bbt function.

	/*

	 * Allocate memory (2bit per block) and clear the memory bad block

	 * table.

	/*

	 * If no primary table descriptor is given, scan the device to build a

	 * memory based bad block table.

 Allocate a temporary buffer for one eraseblock incl. oob */

 Is the bbt at a given page? */

 Search the bad block table using a pattern in oob */

 Prevent the bbt regions from erasing / writing */

/*

 * Define some generic bad / good block scan pattern which are used

 * while scanning a device for factory marked good / bad blocks.

 Generic flash bbt descriptors */

/**

 * nand_create_badblock_pattern - [INTERN] Creates a BBT descriptor structure

 * @this: NAND chip to create descriptor for

 *

 * This function allocates and initializes a nand_bbt_descr for BBM detection

 * based on the properties of @this. The new descriptor is stored in

 * this->badblock_pattern. Thus, this->badblock_pattern should be NULL when

 * passed to this function.

/**

 * nand_create_bbt - [NAND Interface] Select a default bad block table for the device

 * @this: NAND chip object

 *

 * This function selects the default bad block table support for the device and

 * calls the nand_scan_bbt function.

 Is a flash based bad block table requested? */

 Use the default pattern descriptors */

/**

 * nand_isreserved_bbt - [NAND Interface] Check if a block is reserved

 * @this: NAND chip object

 * @offs: offset in the device

/**

 * nand_isbad_bbt - [NAND Interface] Check if a block is bad

 * @this: NAND chip object

 * @offs: offset in the device

 * @allowbbt: allow access to bad block table region

/**

 * nand_markbad_bbt - [NAND Interface] Mark a block bad in the BBT

 * @this: NAND chip object

 * @offs: offset of the bad block

 Mark bad block in memory */

 Update flash-based bad block table */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for NAND MLC Controller in LPC32xx

 *

 * Author: Roland Stigge <stigge@antcom.de>

 *

 * Copyright © 2011 WORK Microwave GmbH

 * Copyright © 2011, 2012 Roland Stigge

 *

 * NAND Flash Controller Operation:

 * - Read: Auto Decode

 * - Write: Auto Encode

 * - Tested Page Sizes: 2048, 4096

/**********************************************************************

* MLC NAND controller register offsets

/**********************************************************************

* MLC_CMD bit definitions

/**********************************************************************

* MLC_ICR bit definitions

 unsupported by LPC32x0! */

/**********************************************************************

* MLC_TIME_REG bit definitions

/**********************************************************************

* MLC_IRQ_MR and MLC_IRQ_SR bit definitions

/**********************************************************************

* MLC_LOCK_PR bit definitions

/**********************************************************************

* MLC_ISR bit definitions

/**********************************************************************

* MLC_CEH bit definitions

	/*

	 * Physical addresses of ECC buffer, DMA data buffers, OOB data buffer

	/*

	 * Virtual addresses of ECC buffer, DMA data buffers, OOB data buffer

 Physical address of DMA base address */

 number of 512bytes-subpages */

/*

 * Activate/Deactivate DMA Operation:

 *

 * Using the PL080 DMA Controller for transferring the 512 byte subpages

 * instead of doing readl() / writel() in a loop slows it down significantly.

 * Measurements via getnstimeofday() upon 512 byte subpage reads reveal:

 *

 * - readl() of 128 x 32 bits in a loop: ~20us

 * - DMA read of 512 bytes (32 bit, 4...128 words bursts): ~60us

 * - DMA read of 512 bytes (32 bit, no bursts): ~100us

 *

 * This applies to the transfer itself. In the DMA case: only the

 * wait_for_completion() (DMA setup _not_ included).

 *

 * Note that the 512 bytes subpage transfer is done directly from/to a

 * FIFO/buffer inside the NAND controller. Most of the time (~400-800us for a

 * 2048 bytes page) is spent waiting for the NAND IRQ, anyway. (The NAND

 * controller transferring data between its internal buffer to/from the NAND

 * chip.)

 *

 * Therefore, using the PL080 DMA is disabled by default, for now.

 *

 Reset MLC controller */

 Get base clock for MLC block */

	/* Unlock MLC_ICR

 Configure MLC Controller: Large Block, 5 Byte Address */

	/* Unlock MLC_TIME_REG

 Compute clock setup values, see LPC and NAND manual */

 Enable IRQ for CONTROLLER_READY and NAND_READY */

 Normal nCE operation: nCE controlled by controller */

/*

 * Hardware specific access to control lines

/*

 * Read Device Ready (NAND device _and_ controller ready)

 Clear interrupt flag by reading status */

 Seems to be delayed sometimes by controller */

/*

 * Enable NAND write protect

/*

 * Disable NAND write protect

 Writing Command and Address */

 For all sub-pages */

 Start Auto Decode Command */

 Wait for Controller Ready */

 Check ECC Error status */

 Read 512 + 16 Bytes */

 Start Encode */

 Write 512 + 6 Bytes to Buffer */

 Auto Encode w/ Bit 8 = 0 (see LPC MLC Controller manual) */

 Wait for Controller Ready */

 Read whole page - necessary with MLC controller! */

 None, write_oob conflicts with the automatic LPC MLC ECC decoder! */

 Prepares MLC for transfers with H/W ECC enabled: always enabled anyway */

 Always enabled! */

	/*

	 * Set direction to a sensible value even if the dmaengine driver

	 * should ignore it. With the default (DMA_MEM_TO_MEM), the amba-pl08x

	 * driver criticizes it as "alien transfer direction".

 DMA controller does flow control: */

/*

 * Probe for NAND controller

 Allocate memory for the device structure (and zero it) */

 link the private data structures */

 Get NAND clock */

 us */

 Init NAND controller */

 Initialize function pointers */

 initially clear interrupt status */

	/*

	 * Scan to find existence of the device and get the type of NAND device:

	 * SMALL block or LARGE block.

/*

 * Remove NAND device

 Re-enable NAND clock */

 Fresh init of NAND controller */

 Disable write protect */

 Enable write protect for safety */

 Disable clock */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Oxford Semiconductor OXNAS NAND driver



 * Copyright (C) 2016 Neil Armstrong <narmstrong@baylibre.com>

 * Heavily based on plat_nand.c :

 * Author: Vitaly Wool <vitalywool@gmail.com>

 * Copyright (C) 2013 Ma Haijun <mahaijuns@gmail.com>

 * Copyright (C) 2012 John Crispin <blogic@openwrt.org>

 Nand commands */

 Single CS command control */

/*

 * Probe for the NAND device.

 Allocate memory for the device structure (and zero it) */

 Only a single chip node is supported */

 Scan to find existence of the device */

 Exit if no chips found */

 SPDX-License-Identifier: GPL-2.0 OR MIT

/*

 * MTK ECC controller driver.

 * Copyright (C) 2016  MediaTek Inc.

 * Authors:	Xiaolei Li		<xiaolei.li@mediatek.com>

 *		Jorge Ramirez-Ortiz	<jorge.ramirez-ortiz@linaro.org>

 ecc strength that each IP supports */

			/*

			 * Clear decode IRQ status once again to ensure that

			 * there will be no extra IRQ.

 configure ECC encoder (in bits) */

 configure ECC decoder (in bits) */

 uncorrectable errors */

		/*

		 * For ECC_NFI_MODE, if ecc->caps->pg_irq_sel is 1, then it

		 * means this chip can only generate one ecc irq during page

		 * read / write. If is 0, generate one ecc irq each ecc step.

 find out the running operation */

 disable it */

		/*

		 * Clear decode IRQ status in case there is a timeout to wait

		 * decode IRQ.

 Program ECC bytes to OOB: per sector oob = FDM + ECC + SPARE */

 write the parity bytes generated by the ECC back to temp buffer */

 copy into possibly unaligned OOB region with actual length */

 SPDX-License-Identifier: GPL-2.0+

 Copyright (c) 2020 Intel Corporation. */

 5 bits 26:22 included for comparison in the ADDR_SELx */

 Wait DMA to finish the data transfer.*/

 clear first, will update later */

 Default to an ECC size of 512 */

 BCH ECC algorithm Settings for number of bits per 512B/1024B */

 Scan to find existence of the device */

 SPDX-License-Identifier: GPL-2.0

/*

 * ARM PL35X NAND flash controller driver

 *

 * Copyright (C) 2017 Xilinx, Inc

 * Author:

 *   Miquel Raynal <miquel.raynal@bootlin.com>

 * Original work (rewritten):

 *   Punnaiah Choudary Kalluri <punnaia@xilinx.com>

 *   Naga Sureshkumar Relli <nagasure@xilinx.com>

 SMC controller status register (RO) */

 SMC clear config register (WO) */

 SMC direct command register (WO) */

 SMC set cycles register (WO) */

 SMC set opmode register (WO) */

 SMC ECC status register (RO) */

 SMC ECC configuration register */

 SMC ECC command 1 register */

 SMC ECC command 2 register */

 SMC ECC value registers (RO) */

 NAND AXI interface */

/**

 * struct pl35x_nandc - NAND flash controller driver structure

 * @dev: Kernel device

 * @conf_regs: SMC configuration registers for command phase

 * @io_regs: NAND data registers for data phase

 * @controller: Core NAND controller structure

 * @chip: NAND chip information structure

 * @selected_chip: NAND chip currently selected by the controller

 * @assigned_cs: List of assigned CS

 * @ecc_buf: Temporary buffer to extract ECC bytes

 Generic flash bbt decriptors */

 Setup the timings */

 Configure the ECC engine */

 No working extra flags on unaligned data accesses */

 No working extra flags on unaligned data accesses */

 No error */

 One error in the main data; to be corrected */

 Bits [11:3] of error code give the byte offset */

 Bits [2:0] of error code give the bit offset */

 Toggle the faulty bit */

 One error in the ECC data; no action needed */

 Read ECC value for each chunk */

 Send the command and address cycles */

 Write the data with the engine enabled */

 Copy the HW calculated ECC bytes in the OOB buffer */

 Write the spare area with ECC bytes */

/*

 * This functions reads data and checks the data integrity by comparing hardware

 * generated ECC values and read ECC values from spare area.

 *

 * There is a limitation with SMC controller: ECC_LAST must be set on the

 * last data access to tell the ECC engine not to expect any further data.

 * In practice, this implies to shrink the last data transfert by eg. 4 bytes,

 * and doing a last 4-byte transfer with the additional bit set. The last block

 * should be aligned with the end of an ECC block. Because of this limitation,

 * it is not possible to use the core routines.

 Send the command and address cycles */

 Wait the data to be available in the NAND cache */

 Retrieve the raw data with the engine enabled */

 Retrieve the stored ECC bytes */

 Correct the data and report failures */

 Command phase */

 Data phase */

	/*

	 * SDR timings are given in pico-seconds while NFC timings must be

	 * expressed in NAND controller clock cycles. We use the TO_CYCLE()

	 * macro to convert from one to the other.

	/*

	 * PL35X SMC needs one extra read cycle in SDR Mode 5. This is not

	 * written anywhere in the datasheet but is an empirical observation.

	/*

	 * For all SDR modes, PL35X SMC needs tREA_max being 1,

	 * this is also an empirical result.

 Legacy Xilinx layout */

 Keep these legacy BBT descriptors for ON_DIE situations */

 Disable interrupts and clear their status */

 Set default bus width to 8-bit */

 Ensure the ECC controller is bypassed by default */

	/*

	 * Configure the commands that the ECC block uses to detect the

	 * operations it should start/end.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * (C) 2003 Red Hat, Inc.

 * (C) 2004 Dan Brown <dan_brown@ieee.org>

 * (C) 2004 Kalev Lember <kalev@smartlink.ee>

 *

 * Author: David Woodhouse <dwmw2@infradead.org>

 * Additional Diskonchip 2000 and Millennium support by Dan Brown <dan_brown@ieee.org>

 * Diskonchip Millennium Plus support by Kalev Lember <kalev@smartlink.ee>

 *

 * Error correction code lifted from the old docecc code

 * Author: Fabrice Bellard (fabrice.bellard@netgem.com)

 * Copyright (C) 2000 Netgem S.A.

 * converted to the generic Reed-Solomon library by Thomas Gleixner <tglx@linutronix.de>

 *

 * Interface to generic NAND code for M-Systems DiskOnChip devices

 Where to look for the devices? */

 The number of chips detected on each floor */

 Handle the last stage of initialization (BBT scan, partitioning) */

/* This is the ecc value computed by the HW ecc generator upon writing an empty

 Sector size for HW ECC */

 The sector bytes are packed into NB_DATA 10 bit words */

 Number of roots */

 First consective root */

 Number of symbols */

/*

 * The HW decoder in the DoC ASIC's provides us a error syndrome,

 * which we must convert to a standard syndrome usable by the generic

 * Reed-Solomon library code.

 *

 * Fabrice Bellard figured this out in the old docecc code. I added

 * some comments, improved a minor bit and converted it to make use

 * of the generic Reed-Solomon library. tglx

 Convert the ecc bytes into words */

 Initialize the syndrome buffer */

	/*

	 *  Evaluate

	 *  s[i] = ds[3]x^3 + ds[2]x^2 + ds[1]x^1 + ds[0]

	 *  where x = alpha^(FCR + i)

 Calc syn[i] = s[i] / alpha^(v + i) */

 Call the decoder library */

 Incorrectable errors ? */

	/*

	 * Correct the errors. The bitpositions are a bit of magic,

	 * but they are given by the design of the de/encoder circuit

	 * in the DoC ASIC's.

 extract bit position (MSB first) */

			/* now correct the following 10 bits. At most two bytes

 If the parity is wrong, no rescue possible */

 DOC_WaitReady: Wait for RDY line to be asserted by the flash chip */

 Out-of-line routine to wait for chip response */

 Call the out-of-line routine to wait */

 Call the out-of-line routine to wait */

/*

 * We need our own readid() here because it's called before the NAND chip

 * has been initialized, and calling nand_op_readid() would lead to a NULL

 * pointer exception when dereferencing the NAND timings.

 First chip probe. See if we get same results by 32-bit access */

 Max 4 chips per floor on DiskOnChip 2000 */

 Find out what the first chip is */

 Find how many chips in each floor. */

 Terminate write pipeline */

 Start read pipeline */

 Terminate read pipeline */

 Start read pipeline */

 Terminate read pipeline */

 11.4.3 -- 4 NOPs after CSDNControl write */

 Assert CE pin */

 De-assert CE pin */

 deassert ALE */

 Assert ChipEnable and deassert WriteProtect */

 De-assert ChipEnable */

 Prime the ECC engine */

 Prime the ECC engine */

 This code is only called on write */

 flush the pipeline */

 If emptymatch=1, we might have an all-0xff data buffer.  Check. */

		/* Note: this somewhat expensive test should not be triggered

		   often.  It could be optimized away by examining the data in

	/* If emptymatch still =1, we do have an all-0xff data buffer.

	   Return all-0xff ecc value instead of the computed one, so

 flush the pipeline */

 Error occurred ? */

u_char mydatabuf[528];

	/*

	 * The strange out-of-order free bytes definition is a (possibly

	 * unneeded) attempt to retain compatibility.  It used to read:

	 *	.oobfree = { {8, 8} }

	 * Since that leaves two bytes unusable, it was changed.  But the

	 * following scheme might affect existing jffs2 installs by moving the

	 * cleanmarker:

	 *	.oobfree = { {6, 10} }

	 * jffs2 seems to handle the above gracefully, but the current scheme

	 * seems safer. The only problem with it is that any code retrieving

	 * free bytes position must be able to handle out-of-order segments.

/* Find the (I)NFTL Media Header, and optionally also the mirror media header.

   On successful return, buf will contain a copy of the media header for

   further processing.  id is the string to scan for, and will presumably be

   either "ANAND" or "BNAND".  If findmirror=1, also look for the mirror media

   header.  The page #s of the found media headers are placed in mh0_page and

	/* Only one mediaheader was found.  We want buf to contain a

 Insanity.  Give up. */

		/* Auto-determine UnitSizeFactor.  The constraints are:

		   - There can be at most 32768 virtual blocks.

		   - There can be at most (virtual block size - page size)

		   virtual blocks (because MediaHeader+BBT must fit in 1).

	/* NOTE: The lines below modify internal variables of the NAND and MTD

	   layers; variables with have already been configured by nand_scan.

	   Unfortunately, we didn't know before this point what these values

	   should be.  Thus, this code is somewhat dependent on the exact

 Skip past the media headers. */

 This is a stripped-down copy of the code in inftlmount.c */

 Scan the partitions */

	/* On NFTL, we have to find the media headers before we can read the

	/* At least for now, require the INFTL Media Header.  We could probably

	   do without it for non-INFTL use, since all it gives us is

		/* It's not a Millennium; it's one of the newer

		   DiskOnChip 2000 units with a similar ASIC.

		   Treat it like a Millennium, except that it

 Bog-standard Millennium */

	/* It's not possible to cleanly detect the DiskOnChip - the

	 * bootup procedure will put the device into reset mode, and

	 * it's not possible to talk to it without actually writing

	 * to the DOCControl register. So we store the current contents

	 * of the DOCControl register's location, in case we later decide

	 * that it's not a DiskOnChip, and want to put it back how we

	 * found it.

 Reset the DiskOnChip ASIC */

 Enable the DiskOnChip ASIC */

 Possible Millennium Plus, need to do more checks */

 Possibly release from power down mode */

 Reset the Millennium Plus ASIC */

 Enable the Millennium Plus ASIC */

 Check the TOGGLE bit in the ECC register */

		/* Use the alias resolution register to determine if this is

		   in fact the same DOC aliased to a new address.  If writes

		   to one chip's alias resolution register change the value on

 restore it

 restore it

	/*

	 * Allocate a RS codec instance

	 *

	 * Symbolsize is 10 (bits)

	 * Primitve polynomial is x^10+x^3+1

	 * First consecutive root is 510

	 * Primitve element to generate roots = 1

	 * Generator polinomial degree = 4

 Skip the automatic BBT scan so we can run it manually */

		/* DBB note: i believe nand_cleanup is necessary here, as

		   buffers may have been allocated in nand_base.  Check with

 Success! */

	/* Put back the contents of the DOCControl register, in case it's not

	/* No banner message any more. Print a message if no DiskOnChip

 Cleanup the nand/DoC resources */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2018 Stefan Agner <stefan@agner.ch>

 * Copyright (C) 2014-2015 Lucas Stach <dev@lynxeye.de>

 * Copyright (C) 2012 Avionic Design GmbH

	/*

	 * The bit name is somewhat missleading: This is also set when

	 * HW ECC was successful. The data sheet states:

	 * Correctable OR Un-correctable errors occurred in the DMA transfer...

 handle DMA interrupts */

 clear interrupts */

 Abort current command/DMA operation */

 clear interrupts */

 Lower 16-bits are column, by default 0 */

 No correctable or un-correctable errors, page must have 0 bitflips */

	/*

	 * Correctable or un-correctable errors occurred. Use DEC_STAT_BUF

	 * which contains information for all ECC selections.

	 *

	 * Note that since we do not use Command Queues DEC_RESULT does not

	 * state the number of pages we can read from the DEC_STAT_BUF. But

	 * since CORRFAIL_ERR did occur during page read we do have a valid

	 * result in DEC_STAT_BUF.

		/*

		 * Since we do not support subpage writes, a complete page

		 * is either written or not. We can take a shortcut here by

		 * checking wheather any of the sector has been successful

		 * read. If at least one sectors has been read successfully,

		 * the page must have been a written previously. It cannot

		 * be an erased page.

		 *

		 * E.g. controller might return fail_sec_flag with 0x4, which

		 * would mean only the third sector failed to correct. The

		 * page must have been written and the third sector is really

		 * not correctable anymore.

		/*

		 * All sectors failed to correct, but the ECC isn't smart

		 * enough to figure out if a page is really just erased.

		 * Read OOB data and check whether data/OOB is completely

		 * erased or if error correction just failed for all sub-

		 * pages.

		/*

		 * The value returned in the register is the maximum of

		 * bitflips encountered in any of the ECC regions. As there is

		 * no way to get the number of bitflips in a specific regions

		 * we are not able to deliver correct stats but instead

		 * overestimate the number of corrected bitflips by assuming

		 * that all regions where errors have been corrected

		 * encountered the maximum number of bitflips.

	/*

	 * The period (and all other timings in this function) is in ps,

	 * so need to take care here to avoid integer overflows.

	/*

	 * Loop through available strengths. Backwards in case we try to

	 * maximize the BCH strength.

 Check whether strength fits OOB */

 Store complete configuration for HW ECC in config_ecc */

 Non-HW ECC read/writes complete OOB */

 Retrieve CS id, currently only single die NAND supported */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * NXP LPC32XX NAND SLC driver

 *

 * Authors:

 *    Kevin Wells <kevin.wells@nxp.com>

 *    Roland Stigge <stigge@antcom.de>

 *

 * Copyright © 2011 NXP Semiconductors

 * Copyright © 2012 Roland Stigge

/**********************************************************************

* SLC NAND controller register offsets

/**********************************************************************

* slc_ctrl register definitions

 Reset the NAND controller bit */

 Reset ECC bit */

 Start DMA channel bit */

/**********************************************************************

* slc_cfg register definitions

 Force CE low bit */

 Enable DMA ECC bit */

 ECC enable bit */

 DMA burst bit */

 DMA write(0)/read(1) bit */

 External device width, 0=8bit */

/**********************************************************************

* slc_stat register definitions

 DMA FIFO has data bit */

 SLC FIFO has data bit */

 NAND device is ready bit */

/**********************************************************************

* slc_int_stat, slc_ien, slc_isr, and slc_icr register definitions

 Transfer count bit */

 Ready interrupt bit */

/**********************************************************************

* slc_tac register definitions

 Computation of clock cycles on basis of controller and device clock rates */

 Clock setting for RDY write sample wait time in 2*n clocks */

 Write pulse width in clock cycles, 1 to 16 clocks */

 Write hold time of control and data signals, 1 to 16 clocks */

 Write setup time of control and data signals, 1 to 16 clocks */

 Clock setting for RDY read sample wait time in 2*n clocks */

 Read pulse width in clock cycles, 1 to 16 clocks */

 Read hold time of control and data signals, 1 to 16 clocks */

 Read setup time of control and data signals, 1 to 16 clocks */

/**********************************************************************

* slc_ecc register definitions

 ECC line party fetch macro */

/*

 * DMA requires storage space for the DMA local buffer and the hardware ECC

 * storage area. The DMA local buffer is only used if DMA mapping fails

 * during runtime.

 Number of bytes used for ECC stored in NAND per 256 bytes */

/*

 * If the NAND base clock frequency can't be fetched, this frequency will be

 * used instead as the base. This rate is used to setup the timing registers

 * used for NAND accesses.

 Milliseconds for DMA FIFO timeout (unlikely anyway) */

/*

 * NAND ECC Layout for small page NAND devices

 * Note: For large and huge page devices, the default layouts are used

/*

 * Small page FLASH BBT descriptors, marker at offset 0, version at offset 6

 * Note: Large page devices used the default layout

/*

 * NAND platform configuration structure

	/*

	 * DMA and CPU addresses of ECC work area and data buffer

 Reset SLC controller */

 Basic setup */

 Get base clock for SLC block */

 Compute clock setup values */

/*

 * Hardware specific access to control lines

 Does CE state need to be changed? */

/*

 * Read the Device Ready pin

/*

 * Enable NAND write protect

/*

 * Disable NAND write protect

/*

 * Prepares SLC for transfers with H/W ECC enabled

 Hardware ECC is enabled automatically in hardware as needed */

/*

 * Calculates the ECC for the data

	/*

	 * ECC is calculated automatically in hardware during syndrome read

	 * and write operations, so it doesn't need to be calculated here.

/*

 * Read a single byte from NAND device

/*

 * Simple device read without ECC

 Direct device read with no ECC */

/*

 * Simple device write without ECC

 Direct device write with no ECC */

/*

 * Read the OOB data from the device without ECC using FIFO method

/*

 * Write the OOB data to the device without ECC using FIFO method

/*

 * Fills in the ECC fields in the OOB buffer with the hardware generated ECC

 DMA controller does flow control: */

/*

 * DMA read/write transfers with ECC support

 Clear initial ECC */

 Transfer size is data area only */

 Start transfer in the NAND controller */

 Data */

 Always _read_ ECC */

 ECC availability delayed on write */

	/*

	 * According to NXP, the DMA can be finished here, but the NAND

	 * controller may still have buffered data. After porting to using the

	 * dmaengine DMA driver (amba-pl080), the condition (DMA_FIFO empty)

	 * appears to be always true, according to tests. Keeping the check for

	 * safety reasons for now.

 Read last calculated ECC value */

 Flush DMA */

 Something is left in the FIFO, something is wrong */

 Stop DMA & HW ECC */

/*

 * Read the data and OOB data from the device, use ECC correction with the

 * data, disable ECC for the OOB data

 Issue read command */

 Read data and oob, calculate ECC */

 Get OOB data */

 Convert to stored ECC format */

 Pointer to ECC data retrieved from NAND spare area */

/*

 * Read the data and OOB data from the device, no ECC correction with the

 * data or OOB data

 Issue read command */

 Raw reads can just use the FIFO interface */

/*

 * Write the data and OOB data to the device, use ECC with the data,

 * disable ECC for the OOB data

 Write data, calculate ECC on outbound data */

	/*

	 * The calculated ECC needs some manual work done to it before

	 * committing it to NAND. Process the calculated ECC and place

 Write ECC data to device */

/*

 * Write the data and OOB data to the device, no ECC correction with the

 * data or OOB data

 Raw writes can just use the FIFO interface */

 OOB and ECC CPU and DMA work areas */

	/*

	 * Small page FLASH has a unique OOB layout, but large and huge

	 * page FLASH use the standard layout. Small page FLASH uses a

	 * custom BBT marker layout.

 These sizes remain the same regardless of page size */

	/*

	 * Use a custom BBT marker setup for small page FLASH that

	 * won't interfere with the ECC layout. Large and huge page

	 * FLASH use the standard layout.

/*

 * Probe for NAND controller

 Allocate memory for the device structure (and zero it) */

 Get NAND clock */

 Set NAND IO addresses and command/ready functions */

 20us command delay time */

 Init NAND controller */

 NAND callbacks for LPC32xx SLC hardware */

	/*

	 * Allocate a large enough buffer for a single huge page plus

	 * extra space for the spare area and ECC storage area

 Find NAND device */

/*

 * Remove NAND device.

 Force CE high */

 Re-enable NAND clock */

 Fresh init of NAND controller */

 Disable write protect */

 Force CE high */

 Enable write protect for safety */

 Disable clock */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright © 2015 Broadcom Corporation

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright © 2010-2015 Broadcom Corporation

/*

 * This flag controls if WP stays on between erase/write commands to mitigate

 * flash corruption due to power glitches. Values:

 * 0: NAND_WP is not used or not available

 * 1: NAND_WP is set by default, cleared for erase/write operations

 * 2: NAND_WP is always cleared

/***********************************************************************

 * Definitions

 Bitfields for brcm_nand_dma_desc::status_valid */

 Bitfields for DMA_MODE */

 stop in Uncorr ECC error */

 link list */

 512B flash cache in the NAND controller HW */

 edu registers */

 flash_dma registers */

 flash_dma registers v0*/

 flash_dma registers v1*/

 flash_dma registers v4 */

 Controller feature flags */

 flash cache */

 Some SoCs provide custom interrupt status register(s) */

 Some SoCs have a gateable clock for the controller */

 List of NAND hosts (one for each chip-select) */

 EDU info, per-transaction */

 spare area size, per flash cache */

 flash_dma reg */

 in-memory cache of the FLASH_CACHE, used only for some commands */

 Controller revision details */

 between CS1, CS2, ... regs */

 within each chip-select */

 within CS0, if different */

 for low-power standby/resume only */

 use for low-power standby/resume only */

 CS1 regs, if non-contiguous */

 offset 0x10, if non-contiguous */

 offset 0x10, if non-contiguous */

 BRCMNAND v2.1-v2.2 */

 BRCMNAND v3.3-v4.0 */

 BRCMNAND v5.0 */

 BRCMNAND v6.0 - v7.1 */

 BRCMNAND v7.1 */

 BRCMNAND v7.2 */

 Per chip-select offsets for v7.1 */

 Per chip-select offsets for pre v7.1, except CS0 on <= v5.0 */

 Per chip-select offset for <= v5.0 on CS0 only */

/*

 * Bitfields for the CFG and CFG_EXT registers. Pre-v7.1 controllers only had

 * one config register, but once the bitfields overflowed, newer controllers

 * (v7.1 and newer) added a CFG_EXT register and shuffled a few fields around.

 Only for v2.1 */

 Only for pre-v7.1 (with no CFG_EXT register) */

 Only for v7.1+ (with CFG_EXT register) */

 BRCMNAND_INTFC_STATUS */

 Only support v2.1+ */

 Register offsets */

 Chip-select stride */

 Per chip-select registers */

 v3.3-5.0 have a different CS0 offset layout */

 Page / block sizes */

 >= v7.1 use nice power-of-2 values! */

 Maximum spare area sector size (per 512B) */

 v6.0 and newer (except v6.1) have prefetch support */

	/*

	 * v6.x has cache mode, but it's implemented differently. Ignore it for

	 * now.

 flash_dma register offsets */

 Clear error addresses */

/***********************************************************************

 * NAND ACC CONTROL bitfield

 *

 * Some bits have remained constant throughout hardware revision, while

 * others have shifted around.

 Constant for all versions (where supported) */

 See BRCMNAND_HAS_CACHE_MODE */

 See BRCMNAND_HAS_PREFETCH */

 v7.2 includes additional ECC levels */

 enable RD/WR ECC */

 disable RD/WR ECC */

/***********************************************************************

 * CS_NAND_SELECT

/***********************************************************************

 * Flash DMA

 Low-level operation types: command, address, write, or read */

/***********************************************************************

 * Internal support functions

/*

 * Set mtd->ooblayout to the appropriate mtd_ooblayout_ops given

 * the layout/configuration.

 * Returns -ERRCODE on failure.

 Large page NAND uses first 2 bytes for BBI */

 Small page NAND uses last byte before ECC for BBI */

	/*

	 * CONTROLLER_VERSION:

	 *   < v5.0: ECC_REQ = ceil(BCH_T * 13/8)

	 *  >= v5.0: ECC_REQ = ceil(BCH_T * 14/8)

	 * But we will just be conservative.

		/*

		 * make sure ctrl/flash ready before and after

		 * changing state of #WP pin

 NAND_STATUS_WP 0x00 = protected, 0x80 = not protected */

 Helper functions for reading and writing OOB registers */

/*

 * read_oob_from_regs - read data from OOB registers

 * @ctrl: NAND controller

 * @i: sub-page sector index

 * @oob: buffer to read to

 * @sas: spare area sector size (i.e., OOB size per FLASH_CACHE)

 * @sector_1k: 1 for 1KiB sectors, 0 for 512B, other values are illegal

 Adjust OOB values for 1K sector size */

/*

 * write_oob_to_regs - write data to OOB registers

 * @i: sub-page sector index

 * @oob: buffer to write from

 * @sas: spare area sector size (i.e., OOB size per FLASH_CACHE)

 * @sector_1k: 1 for 1KiB sectors, 0 for 512B, other values are illegal

 Adjust OOB values for 1K sector size */

 initialize edu */

 edu irq */

 flush previous writes */

 Discard all NAND_CTLRDY interrupts during DMA */

 check if you need to piggy back on the ctrlrdy irq */

 Discard interrupts while using dedicated edu irq */

 no registered edu irq, call handler */

 Handle SoC-specific interrupt hardware */

 flush previous writes */

/***********************************************************************

 * NAND MTD API: read/program/erase

 intentionally left blank */

 switch to interrupt polling and PIO mode */

 wait for completion interrupt */

 WE | ALE */

 WE */

 RE */

 RETURN_IDLE */

 Avoid propagating a negative, don't-care address */

		/*

		 * HW quirk: PARAMETER_CHANGE_COL requires SECTOR_SIZE_1K=0

		 * NB: hwcfg.sector_size_1k may not be initialized yet

 Copy flash cache word-wise */

		/*

		 * Must cache the FLASH_CACHE now, since changes in

		 * SECTOR_SIZE_1K may invalidate it

			/*

			 * Flash cache is big endian for parameter pages, at

			 * least on STB SoCs

 Cleanup from HW quirk: restore SECTOR_SIZE_1K */

 Re-enable protection is necessary only after erase */

 hide WP status */

 At FC_BYTES boundary, switch to next column */

/*

 *  Kick EDU engine

 Start edu engine */

 flush previous writes */

 read last subpage oob */

 for program page check NAND status */

 Make sure the EDU status is clean */

 force stop */

		/*

		 * check for ECC errors here, subpage ECC errors are

		 * retained in ECC error address register

/*

 * Construct a FLASH_DMA descriptor as part of a linked list. You must know the

 * following ahead of time:

 *  - Is this descriptor the beginning or end of a linked list?

 *  - What is the (DMA) address of the next descriptor in the linked list?

 Descriptors are written in native byte order (wordwise) */

 IRQ | STOP */

 head, tail */

/*

 * Kick the FLASH_DMA engine, with a given DMA descriptor

 Start FLASH_DMA engine */

 flush previous writes */

 wake | run */

 force stop */

/*

 * Assumes proper CS is already set

 SPARE_AREA_READ does not use ECC, so just use PAGE_READ */

/*

 * Check a page to see if it is erased (w/ bitflips) after an uncorrectable ECC

 * error

 *

 * Because the HW ECC signals an ECC error if an erase paged has even a single

 * bitflip, we must check each ECC error to see if it is actually an erased

 * page with bitflips, not a truly corrupted page.

 *

 * On a real error, return a negative error code (-EBADMSG for ECC error), and

 * buf will contain raw data.

 * Otherwise, buf gets filled with 0xffs and return the maximum number of

 * bitflips-per-ECC-sector to the caller.

 *

 read without ecc for verification */

		/*

		 * On controller version and 7.0, 7.1 , DMA read after a

		 * prior PIO read that reported uncorrectable error,

		 * the DMA engine captures this error following DMA read

		 * cleared only on subsequent DMA read, so just retry once

		 * to clear a possible false error reported for current DMA

		 * read

		/*

		 * Controller version 7.2 has hw encoder to detect erased page

		 * bitflips, apply sw verification for older controllers only

 erased page bitflips corrected */

 NAND layer expects zero on ECC errors */

 in case of EDU correctable error we read again using PIO */

 Always exceed the software-imposed threshold */

 switch to interrupt polling and PIO mode */

 full address MUST be set before populating FC */

 we cannot use SPARE_AREA_PROGRAM when PARTIAL_PAGE_EN=0 */

/***********************************************************************

 * Per-CS setup (1 NAND device)

 threshold = ceil(BCH-level * 0.75) */

 Account for Hamming ECC and for BCH 512B vs 1KiB sectors */

/*

 * Minimum number of bytes to address a page. Calculated as:

 *     roundup(log2(size / page-size) / 8)

 *

 * NB: the following does not "round up" for non-power-of-2 'size'; but this is

 *     OK because many other things will break if 'size' is irregular...

 Use detected size */

	/*

	 * Set oobsize to be consistent with controller's spare_area_size, as

	 * the rest is inaccessible.

 Default to Hamming for 1-bit ECC, if unspecified */

 Otherwise, BCH */

 use detected ECC parameters */

 Configure ACC_CONTROL */

 We need to turn on Read from erased paged protected by ECC */

	/*

	 * Avoid (for instance) kmap()'d buffers from JFFS2, which we can't DMA

	 * to/from, and have nand_base pass us a bounce buffer instead, as

	 * needed.

 only use our internal HW threshold */

 If OOB is written with ECC enabled it will cause ECC errors */

	/*

	 * The bootloader might have configured 16bit mode but

	 * NAND READID command only works in 8bit mode. We force

	 * 8bit mode here to ensure that NAND READID commands works.

 Clear/re-enable interrupt */

 Reset the chip, required by some chips after power-up */

/***********************************************************************

 * Platform driver setup (per controller)

 initialize edu */

 We only support device-tree instantiation */

 NAND register range */

 Enable clock before using NAND registers */

 Initialize NAND revision */

	/*

	 * Most chips have this cache at a fixed offset within 'nand' block.

	 * Some must specify this region separately.

 FLASH_DMA */

 initialize the dma version */

 linked-list and stop on error */

 Allocate descriptor(s) */

 set flash dma transfer function to call */

 set edu transfer function to call */

 Disable automatic device ID config, direct addressing */

 Disable XOR addressing */

 Permanently disable write protection */

 IRQ */

	/*

	 * Some SoCs integrate this controller (e.g., its interrupt bits) in

	 * interesting ways

 Enable interrupt */

 Use standard interrupt infrastructure */

 Try all chip-selects */

 No chip-selects could initialize properly */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright © 2015 Broadcom Corporation

	/*

	 * In the case of BE or when dealing with NAND data, alway configure

	 * the APB bus to LE mode before accessing the FIFO and back to BE mode

	 * after the access is done

 when in LE accessing the parameter page, keep APB in BE */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2015 Simon Arlott

 *

 * Derived from bcm63138_nand.c:

 * Copyright © 2015 Broadcom Corporation

 *

 * Derived from bcm963xx_4.12L.06B_consumer/shared/opensource/include/bcm963xx/63268_map_part.h:

 * Copyright 2000-2010 Broadcom Corporation

 *

 * Derived from bcm963xx_4.12L.06B_consumer/shared/opensource/flash/nandflash.c:

 * Copyright 2000-2010 Broadcom Corporation

 Ack interrupt */

 Don't ack any interrupts */

 Disable and ack all interrupts  */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright © 2015 Broadcom Corporation

 SPDX-License-Identifier: GPL-2.0

/*

 * JZ4780 BCH controller driver

 *

 * Copyright (c) 2015 Imagination Technologies

 * Author: Alex Smith <alex.smith@imgtec.com>

 Timeout for BCH calculation/correction. */

 Clear interrupt status. */

 Set up BCH count register. */

 Initialise and enable BCH. */

	/*

	 * While we could use interrupts here and sleep until the operation

	 * completes, the controller works fairly quickly (usually a few

	 * microseconds) and so the overhead of sleeping until we get an

	 * interrupt quite noticeably decreases performance.

 Correct any detected errors. */

 SPDX-License-Identifier: GPL-2.0

/*

 * JZ47xx ECC common code

 *

 * Copyright (c) 2015 Imagination Technologies

 * Author: Alex Smith <alex.smith@imgtec.com>

/**

 * ingenic_ecc_calculate() - calculate ECC for a data buffer

 * @ecc: ECC device.

 * @params: ECC parameters.

 * @buf: input buffer with raw data.

 * @ecc_code: output buffer with ECC.

 *

 * Return: 0 on success, -ETIMEDOUT if timed out while waiting for ECC

 * controller.

/**

 * ingenic_ecc_correct() - detect and correct bit errors

 * @ecc: ECC device.

 * @params: ECC parameters.

 * @buf: raw data read from the chip.

 * @ecc_code: ECC read from the chip.

 *

 * Given the raw data and the ECC read from the NAND device, detects and

 * corrects errors in the data.

 *

 * Return: the number of bit errors corrected, -EBADMSG if there are too many

 * errors to correct or -ETIMEDOUT if we timed out waiting for the controller.

/**

 * ingenic_ecc_get() - get the ECC controller device

 * @np: ECC device tree node.

 *

 * Gets the ECC controller device from the specified device tree node. The

 * device must be released with ingenic_ecc_release() when it is no longer being

 * used.

 *

 * Return: a pointer to ingenic_ecc, errors are encoded into the pointer.

 * PTR_ERR(-EPROBE_DEFER) if the device hasn't been initialised yet.

/**

 * of_ingenic_ecc_get() - get the ECC controller from a DT node

 * @of_node: the node that contains an ecc-engine property.

 *

 * Get the ecc-engine property from the given device tree

 * node and pass it to ingenic_ecc_get to do the work.

 *

 * Return: a pointer to ingenic_ecc, errors are encoded into the pointer.

 * PTR_ERR(-EPROBE_DEFER) if the device hasn't been initialised yet.

	/*

	 * If the ecc-engine property is not found, check for the deprecated

	 * ingenic,bch-controller property

/**

 * ingenic_ecc_release() - release the ECC controller device

 * @ecc: ECC device.

 SPDX-License-Identifier: GPL-2.0

/*

 * JZ4725B BCH controller driver

 *

 * Copyright (C) 2019 Paul Cercueil <paul@crapouillou.net>

 *

 * Based on jz4780_bch.c

 Timeout for BCH calculation/correction. */

 Clear interrupt status. */

 Initialise and enable BCH. */

 calculate ECC from data */

 correct data from ECC */

 Set up BCH count register. */

 Clear interrupts */

 Disable the hardware */

	/*

	 * While we could use interrupts here and sleep until the operation

	 * completes, the controller works fairly quickly (usually a few

	 * microseconds) and so the overhead of sleeping until we get an

	 * interrupt quite noticeably decreases performance.

 Data and ECC is all 0xff or 0x00 - nothing to correct */

 Uncorrectable ECC error */

 Correct any detected errors. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Ingenic JZ47xx NAND driver

 *

 * Copyright (c) 2015 Imagination Technologies

 * Author: Alex Smith <alex.smith@imgtec.com>

	/*

	 * Don't need to generate the ECC when reading, the ECC engine does it

	 * for us as part of decoding/correction.

 JZ4740 uses 9 bytes of ECC to correct maximum 4 errors */

 The NAND core will generate the ECC layout for SW ECC */

 Generate ECC layout. ECC codes are right aligned in the OOB area. */

	/*

	 * The generic layout for BBT markers will most likely overlap with our

	 * ECC bytes in the OOB, so move the BBT markers outside the OOB area.

 For legacy reasons we use a different layout on the qi,lb60 board. */

	/*

	 * The rb-gpios semantics was undocumented and qi,lb60 (along with

	 * the ingenic driver) got it wrong. The active state encodes the

	 * NAND ready state, which is high level. Since there's no signal

	 * inverter on this board, it should be active-high. Let's fix that

	 * here for older DTs so we can re-use the generic nand_gpio_waitrdy()

	 * helper, and be consistent with what other drivers do.

	/*

	 * Check for ECC HW before we call nand_scan_ident, to prevent us from

	 * having to call it again if the ECC driver returns -EPROBE_DEFER.

 SPDX-License-Identifier: GPL-2.0

/*

 * JZ4740 ECC controller driver

 *

 * Copyright (c) 2019 Paul Cercueil <paul@crapouillou.net>

 *

 * based on jz4740-nand.c

 Clear interrupt status */

 Initialize and enable ECC hardware */

 calculate ECC from data */

 correct data from ECC */

	/*

	 * If the written data is completely 0xff, we also want to write 0xff as

	 * ECC, otherwise we will get in trouble when doing subpage writes.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * BCM47XX NAND flash driver

 *

 * Copyright (C) 2012 Rafał Miłecki <zajec5@gmail.com>

/* Broadcom uses 1'000'000 but it seems to be too many. Tests on WNDR4500 has

 Update column with value from BCMA_CC_NFLASH_COL_ADDR */

 Update row (page) with value from BCMA_CC_NFLASH_ROW_ADDR */

/**************************************************

 * Various helpers

/**************************************************

 * R/W

	/* Don't validate column using nand_chip->page_shift, it may be bigger

 We can read maximum of 0x200 bytes at once */

 Set page and column */

 Prepare to read */

 Eventually read some data :) */

 Last read goes without that */

	/* Don't validate column using nand_chip->page_shift, it may be bigger

 Last read goes without that */

/**************************************************

 * NAND chip ops

 nCS is not needed for reset command */

 Default nand_select_chip calls cmd_ctrl, which is not used in BCM4706 */

/*

 * Default nand_command and nand_command_lp don't match BCM4706 hardware layout.

 * For example, reading chip id is performed in a non-standard way.

 * Setting column and page is also handled differently, we use a special

 * registers of ChipCommon core. Hacking cmd_ctrl to understand and convert

 * standard commands would be much more complicated.

		/*

		 * Reading is specific, last one has to go without NCTL_CSA

		 * bit. We don't know how many reads NAND subsystem is going

		 * to perform, so cache everything.

 Set page and column */

 Prepare to write */

/**************************************************

 * Init

 MiB */

 TODO: implement ECC */

 Enable NAND flash access */

 Configure wait counters */

 400 MHz */

 Fixed reference clock 25 MHz and m = 2 */

 Scan NAND */

 Configure FLASH */

 find first bit set */

 Broadcom increases *index* by 20, we increase *pos* */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * BCM47XX NAND flash driver

 *

 * Copyright (C) 2012 Rafał Miłecki <zajec5@gmail.com>

 SPDX-License-Identifier: GPL-2.0+

/*

 * Freescale GPMI NAND Flash Driver

 *

 * Copyright (C) 2010-2015 Freescale Semiconductor, Inc.

 * Copyright (C) 2008 Embedded Alley Solutions, Inc.

 Resource names for the GPMI NAND driver. */

 Converts time to clock cycles */

/*

 * Clear the bit and poll it cleared.  This is usually called with

 * a reset address and mask being either SFTRST(bit 31) or CLKGATE

 * (bit 30).

 clear the bit */

	/*

	 * SFTRST needs 3 GPMI clocks to settle, the reference manual

	 * recommends to wait 1us.

 poll the bit becoming clear */

 nothing */;

/*

 * The current mxs_reset_block() will do two things:

 *  [1] enable the module.

 *  [2] reset the module.

 *

 * In most of the cases, it's ok.

 * But in MX23, there is a hardware bug in the BCH block (see erratum #2847).

 * If you try to soft reset the BCH block, it becomes unusable until

 * the next hard reset. This case occurs in the NAND boot mode. When the board

 * boots by NAND, the ROM of the chip will initialize the BCH blocks itself.

 * So If the driver tries to reset the BCH again, the BCH will not work anymore.

 * You will see a DMA timeout in this case. The bug has been fixed

 * in the following chips, such as MX28.

 *

 * To avoid this bug, just add a new parameter `just_enable` for

 * the mxs_reset_block(), and rewrite it here.

 clear and poll SFTRST */

 clear CLKGATE */

 set SFTRST to reset the block */

 poll CLKGATE becoming set */

 nothing */;

 clear and poll SFTRST */

 clear and poll CLKGATE */

	/*

	 * Reset BCH here, too. We got failures otherwise :(

	 * See later BCH reset for explanation of MX23 and MX28 handling

 Choose NAND mode. */

 Set the IRQ polarity. */

 Disable Write-Protection. */

 Select BCH ECC. */

	/*

	 * Decouple the chip select from dma channel. We use dma0 for all

	 * the chips, force all NAND RDY_BUSY inputs to be sourced from

	 * RDY_BUSY0.

 This function is very useful. It is called only when the bug occur. */

 start to print out the BCH info */

 Do the sanity check. */

 The mx23/mx28 only support the GF13. */

/*

 * If we can get the ECC information from the nand chip, we do not

 * need to calculate them ourselves.

 *

 * We may have available oob space in this case.

 Keep the C >= O */

 The default value, see comment in the legacy_set_geometry(). */

	/*

	 * Now, the NAND chip with 2K page(data chunk is 512byte) shows below:

	 *

	 *    |                          P                            |

	 *    |<----------------------------------------------------->|

	 *    |                                                       |

	 *    |                                        (Block Mark)   |

	 *    |                      P'                      |      | |     |

	 *    |<-------------------------------------------->|  D   | |  O' |

	 *    |                                              |<---->| |<--->|

	 *    V                                              V      V V     V

	 *    +---+----------+-+----------+-+----------+-+----------+-+-----+

	 *    | M |   data   |E|   data   |E|   data   |E|   data   |E|     |

	 *    +---+----------+-+----------+-+----------+-+----------+-+-----+

	 *                                                   ^              ^

	 *                                                   |      O       |

	 *                                                   |<------------>|

	 *                                                   |              |

	 *

	 *	P : the page size for BCH module.

	 *	E : The ECC strength.

	 *	G : the length of Galois Field.

	 *	N : The chunk count of per page.

	 *	M : the metasize of per page.

	 *	C : the ecc chunk size, aka the "data" above.

	 *	P': the nand chip's page size.

	 *	O : the nand chip's oob size.

	 *	O': the free oob.

	 *

	 *	The formula for P is :

	 *

	 *	            E * G * N

	 *	       P = ------------ + P' + M

	 *                      8

	 *

	 * The position of block mark moves forward in the ECC-based view

	 * of page, and the delta is:

	 *

	 *                   E * G * (N - 1)

	 *             D = (---------------- + M)

	 *                          8

	 *

	 * Please see the comment in legacy_set_geometry().

	 * With the condition C >= O , we still can get same result.

	 * So the bit position of the physical block mark within the ECC-based

	 * view of the page is :

	 *             (P' - D) * 8

 For bit swap. */

/*

 *  Calculate the ECC strength by hand:

 *	E : The ECC strength.

 *	G : the length of Galois Field.

 *	N : The chunk count of per page.

 *	O : the oobsize of the NAND chip.

 *	M : the metasize of per page.

 *

 *	The formula is :

 *		E * G * N

 *	      ------------ <= (O - M)

 *                  8

 *

 *      So, we get E by:

 *                    (O - M) * 8

 *              E <= -------------

 *                       G * N

 We need the minor even number. */

	/*

	 * The size of the metadata can be changed, though we set it to 10

	 * bytes now. But it can't be too large, because we have to save

	 * enough space for BCH.

 The default for the length of Galois Field. */

 The default for chunk size. */

 keep C >= O */

 We use the same ECC strength for all chunks. */

	/*

	 * The auxiliary buffer contains the metadata and the ECC status. The

	 * metadata is padded to the nearest 32-bit boundary. The ECC status

	 * contains one byte for every ECC chunk, and is also padded to the

	 * nearest 32-bit boundary.

	/*

	 * We need to compute the byte and bit offsets of

	 * the physical block mark within the ECC-based view of the page.

	 *

	 * NAND chip with 2K page shows below:

	 *                                             (Block Mark)

	 *                                                   |      |

	 *                                                   |  D   |

	 *                                                   |<---->|

	 *                                                   V      V

	 *    +---+----------+-+----------+-+----------+-+----------+-+

	 *    | M |   data   |E|   data   |E|   data   |E|   data   |E|

	 *    +---+----------+-+----------+-+----------+-+----------+-+

	 *

	 * The position of block mark moves forward in the ECC-based view

	 * of page, and the delta is:

	 *

	 *                   E * G * (N - 1)

	 *             D = (---------------- + M)

	 *                          8

	 *

	 * With the formula to compute the ECC strength, and the condition

	 *       : C >= O         (C is the ecc chunk size)

	 *

	 * It's easy to deduce to the following result:

	 *

	 *         E * G       (O - M)      C - M         C - M

	 *      ----------- <= ------- <=  --------  <  ---------

	 *           8            N           N          (N - 1)

	 *

	 *  So, we get:

	 *

	 *                   E * G * (N - 1)

	 *             D = (---------------- + M) < C

	 *                          8

	 *

	 *  The above inequality means the position of block mark

	 *  within the ECC-based view of the page is still in the data chunk,

	 *  and it's NOT in the ECC bits of the chunk.

	 *

	 *  Use the following to compute the bit position of the

	 *  physical block mark within the ECC-based view of the page:

	 *          (page_size - D) * 8

	 *

	 *  --Huang Shijie

 Configures the geometry for BCH.  */

	/*

	* Due to erratum #2847 of the MX23, the BCH cannot be soft reset on this

	* chip, otherwise it will lock up. So we skip resetting BCH on the MX23.

	* and MX28.

 Set *all* chip selects to use layout 0. */

/*

 * <1> Firstly, we should know what's the GPMI-clock means.

 *     The GPMI-clock is the internal clock in the gpmi nand controller.

 *     If you set 100MHz to gpmi nand controller, the GPMI-clock's period

 *     is 10ns. Mark the GPMI-clock's period as GPMI-clock-period.

 *

 * <2> Secondly, we should know what's the frequency on the nand chip pins.

 *     The frequency on the nand chip pins is derived from the GPMI-clock.

 *     We can get it from the following equation:

 *

 *         F = G / (DS + DH)

 *

 *         F  : the frequency on the nand chip pins.

 *         G  : the GPMI clock, such as 100MHz.

 *         DS : GPMI_HW_GPMI_TIMING0:DATA_SETUP

 *         DH : GPMI_HW_GPMI_TIMING0:DATA_HOLD

 *

 * <3> Thirdly, when the frequency on the nand chip pins is above 33MHz,

 *     the nand EDO(extended Data Out) timing could be applied.

 *     The GPMI implements a feedback read strobe to sample the read data.

 *     The feedback read strobe can be delayed to support the nand EDO timing

 *     where the read strobe may deasserts before the read data is valid, and

 *     read data is valid for some time after read strobe.

 *

 *     The following figure illustrates some aspects of a NAND Flash read:

 *

 *                   |<---tREA---->|

 *                   |             |

 *                   |         |   |

 *                   |<--tRP-->|   |

 *                   |         |   |

 *                  __          ___|__________________________________

 *     RDN            \________/   |

 *                                 |

 *                                 /---------\

 *     Read Data    --------------<           >---------

 *                                 \---------/

 *                                |     |

 *                                |<-D->|

 *     FeedbackRDN  ________             ____________

 *                          \___________/

 *

 *          D stands for delay, set in the HW_GPMI_CTRL1:RDN_DELAY.

 *

 *

 * <4> Now, we begin to describe how to compute the right RDN_DELAY.

 *

 *  4.1) From the aspect of the nand chip pins:

 *        Delay = (tREA + C - tRP)               {1}

 *

 *        tREA : the maximum read access time.

 *        C    : a constant to adjust the delay. default is 4000ps.

 *        tRP  : the read pulse width, which is exactly:

 *                   tRP = (GPMI-clock-period) * DATA_SETUP

 *

 *  4.2) From the aspect of the GPMI nand controller:

 *         Delay = RDN_DELAY * 0.125 * RP        {2}

 *

 *         RP   : the DLL reference period.

 *            if (GPMI-clock-period > DLL_THRETHOLD)

 *                   RP = GPMI-clock-period / 2;

 *            else

 *                   RP = GPMI-clock-period;

 *

 *            Set the HW_GPMI_CTRL1:HALF_PERIOD if GPMI-clock-period

 *            is greater DLL_THRETHOLD. In other SOCs, the DLL_THRETHOLD

 *            is 16000ps, but in mx6q, we use 12000ps.

 *

 *  4.3) since {1} equals {2}, we get:

 *

 *                     (tREA + 4000 - tRP) * 8

 *         RDN_DELAY = -----------------------     {3}

 *                           RP

 ONFI non-EDO modes [0-3] */

 ONFI EDO mode 4 */

 ONFI EDO mode 5 */

 SDR core timings are given in picoseconds */

	/*

	 * Derive NFC ideal delay from {3}:

	 *

	 *                     (tREA + 4000 - tRP) * 8

	 *         RDN_DELAY = -----------------------

	 *                                RP

	/*

	 * Clear several CTRL1 fields, DLL must be disabled when setting

	 * RDN_DELAY or HALF_PERIOD.

 Wait 64 clock cycles before using the GPMI after enabling the DLL */

 Wait for the DLL to settle. */

 Retrieve required NAND timings */

 Only MX6 GPMI controller can reach EDO timings */

 Stop here if this call was just a check */

 Do the actual derivation of the controller timings */

 Clears a BCH interrupt. */

 We use the DMA channel 0 to access all the nand chips. */

 This will be called after the DMA operation is finished. */

	/*

	 * raw_len is the length to read/write including bch data which

	 * we are passed in exec_op. Calculate the data length from it.

 Can we use the upper's buffer directly for DMA? */

 first try to map the upper buffer directly */

 We have to use our own DMA buffer. */

 add our owner bbt descriptor */

/*

 * We may change the layout if we can get the ECC info from the datasheet,

 * else we will use all the (page + OOB).

 The available oob size we have. */

 request dma channel */

		/*

		 * Set the default value for the gpmi clock.

		 *

		 * If you want to use the ONFI nand which is in the

		 * Synchronous Mode, you should change the clock as you need.

 Allocate the DMA buffers */

	/*

	 * [2] Allocate a read/write data buffer.

	 *     The gpmi_alloc_dma_buffer can be called twice.

	 *     We allocate a PAGE_SIZE length buffer if gpmi_alloc_dma_buffer

	 *     is called before the NAND identification; and we allocate a

	 *     buffer of the real NAND page size when the gpmi_alloc_dma_buffer

	 *     is called after.

/*

 * Handles block mark swapping.

 * It can be called in swapping the block mark, or swapping it back,

 * because the the operations are the same.

	/*

	 * If control arrives here, we're swapping. Make some convenience

	 * variables.

	/*

	 * Get the byte from the data area that overlays the block mark. Since

	 * the ECC engine applies its own view to the bits in the page, the

	 * physical block mark won't (in general) appear on a byte boundary in

	 * the data.

 Get the byte from the OOB. */

 Swap them. */

 Loop over status bytes, accumulating ECC status. */

 Read ECC bytes into our internal raw_buffer */

			/*

			 * ECC data are not byte aligned and we may have

			 * in-band data in the first and last byte of

			 * eccbuf. Set non-eccbits to one so that

			 * nand_check_erased_ecc_chunk() does not count them

			 * as bitflips.

			/*

			 * The ECC hardware has an uncorrectable ECC status

			 * code in case we have bitflips in an erased page. As

			 * nothing was written into this subpage the ECC is

			 * obviously wrong and we can not trust it. We assume

			 * at this point that we are reading an erased page and

			 * try to correct the bitflips in buffer up to

			 * ecc_strength bitflips. If this is a page with random

			 * data, we exceed this number of bitflips and have a

			 * ECC failure. Otherwise we use the corrected buffer.

 The first block includes metadata */

 handle the block mark swapping */

		/*

		 * It's time to deliver the OOB bytes. See gpmi_ecc_read_oob()

		 * for details about our policy for delivering the OOB.

		 *

		 * We fill the caller's buffer with set bits, and then copy the

		 * block mark to th caller's buffer. Note that, if block mark

		 * swapping was necessary, it has already been done, so we can

		 * rely on the first byte of the auxiliary buffer to contain

		 * the block mark.

 Fake a virtual small page for the subpage read */

 ECC chunk size */

 The size of ECC parity */

 Align it with the chunk size */

		/*

		 * Find the chunk which contains the Block Marker.

		 * If this chunk is in the range of [first, last],

		 * we have to read out the whole page.

		 * Why? since we had swapped the data at the position of Block

		 * Marker to the metadata which is bound with the chunk 0.

		/*

		 * When doing bad block marker swapping we must always copy the

		 * input buffer as we can't modify the const buffer.

/*

 * There are several places in this driver where we have to handle the OOB and

 * block marks. This is the function where things are the most complicated, so

 * this is where we try to explain it all. All the other places refer back to

 * here.

 *

 * These are the rules, in order of decreasing importance:

 *

 * 1) Nothing the caller does can be allowed to imperil the block mark.

 *

 * 2) In read operations, the first byte of the OOB we return must reflect the

 *    true state of the block mark, no matter where that block mark appears in

 *    the physical page.

 *

 * 3) ECC-based read operations return an OOB full of set bits (since we never

 *    allow ECC-based writes to the OOB, it doesn't matter what ECC-based reads

 *    return).

 *

 * 4) "Raw" read operations return a direct view of the physical bytes in the

 *    page, using the conventional definition of which bytes are data and which

 *    are OOB. This gives the caller a way to see the actual, physical bytes

 *    in the page, without the distortions applied by our ECC engine.

 *

 *

 * What we do for this specific read operation depends on two questions:

 *

 * 1) Are we doing a "raw" read, or an ECC-based read?

 *

 * 2) Are we using block mark swapping or transcription?

 *

 * There are four cases, illustrated by the following Karnaugh map:

 *

 *                    |           Raw           |         ECC-based       |

 *       -------------+-------------------------+-------------------------+

 *                    | Read the conventional   |                         |

 *                    | OOB at the end of the   |                         |

 *       Swapping     | page and return it. It  |                         |

 *                    | contains exactly what   |                         |

 *                    | we want.                | Read the block mark and |

 *       -------------+-------------------------+ return it in a buffer   |

 *                    | Read the conventional   | full of set bits.       |

 *                    | OOB at the end of the   |                         |

 *                    | page and also the block |                         |

 *       Transcribing | mark in the metadata.   |                         |

 *                    | Copy the block mark     |                         |

 *                    | into the first byte of  |                         |

 *                    | the OOB.                |                         |

 *       -------------+-------------------------+-------------------------+

 *

 * Note that we break rule #4 in the Transcribing/Raw case because we're not

 * giving an accurate view of the actual, physical bytes in the page (we're

 * overwriting the block mark). That's OK because it's more important to follow

 * rule #2.

 *

 * It turns out that knowing whether we want an "ECC-based" or "raw" read is not

 * easy. When reading a page, for example, the NAND Flash MTD code calls our

 * ecc.read_page or ecc.read_page_raw function. Thus, the fact that MTD wants an

 * ECC-based or raw view of the page is implicit in which function it calls

 * (there is a similar pair of ECC-based/raw functions for writing).

 clear the OOB buffer */

 Read out the conventional OOB. */

	/*

	 * Now, we want to make sure the block mark is correct. In the

	 * non-transcribing case (!GPMI_IS_MX23()), we already have it.

	 * Otherwise, we need to explicitly read it.

 Read the block mark into the first byte of the OOB buffer. */

 Do we have available oob area? */

/*

 * This function reads a NAND page without involving the ECC engine (no HW

 * ECC correction).

 * The tricky part in the GPMI/BCH controller is that it stores ECC bits

 * inline (interleaved with payload DATA), and do not align data chunk on

 * byte boundaries.

 * We thus need to take care moving the payload data and ECC bits stored in the

 * page into the provided buffers, which is why we're using nand_extract_bits().

 *

 * See set_geometry_by_ecc_info inline comments to have a full description

 * of the layout used by the GPMI controller.

	/*

	 * If required, swap the bad block marker and the data stored in the

	 * metadata section, so that we don't wrongly consider a block as bad.

	 *

	 * See the layout description for a detailed explanation on why this

	 * is needed.

	/*

	 * Copy the metadata section into the oob buffer (this section is

	 * guaranteed to be aligned on a byte boundary).

 Extract interleaved payload data and ECC bits */

 Align last ECC block to align a byte boundary */

/*

 * This function writes a NAND page without involving the ECC engine (no HW

 * ECC generation).

 * The tricky part in the GPMI/BCH controller is that it stores ECC bits

 * inline (interleaved with payload DATA), and do not align data chunk on

 * byte boundaries.

 * We thus need to take care moving the OOB area at the right place in the

 * final page, which is why we're using nand_extract_bits().

 *

 * See set_geometry_by_ecc_info inline comments to have a full description

 * of the layout used by the GPMI controller.

	/*

	 * Initialize all bits to 1 in case we don't have a buffer for the

	 * payload or oob data in order to leave unspecified bits of data

	 * to their initial state.

	/*

	 * First copy the metadata section (stored in oob buffer) at the

	 * beginning of the page, as imposed by the GPMI layout.

 Interleave payload data and ECC bits */

 Align last ECC block to align a byte boundary */

	/*

	 * If required, swap the bad block marker and the first byte of the

	 * metadata section, so that we don't modify the bad block marker.

	 *

	 * See the layout description for a detailed explanation on why this

	 * is needed.

 Write the block mark. */

 bad block marker */

 Shift to get page */

	/*

	 * Set the boot block stride size.

	 *

	 * In principle, we should be reading this from the OTP bits, since

	 * that's where the ROM is going to get it. In fact, we don't have any

	 * way to read the OTP bits, so we go with the default and hope for the

	 * best.

	/*

	 * Set the search area stride exponent.

	 *

	 * In principle, we should be reading this from the OTP bits, since

	 * that's where the ROM is going to get it. In fact, we don't have any

	 * way to read the OTP bits, so we go with the default and hope for the

	 * best.

 Compute the number of strides in a search area. */

	/*

	 * Loop through the first search area, looking for the NCB fingerprint.

 Compute the page addresses. */

		/*

		 * Read the NCB fingerprint. The fingerprint is four bytes long

		 * and starts in the 12th byte of the page.

 Look for the fingerprint. */

 Writes a transcription stamp. */

 Compute the search area geometry. */

 Loop over blocks in the first search area, erasing them. */

 Erase this block. */

 Write the NCB fingerprint into the page buffer. */

 Loop through the first search area, writing NCB fingerprints. */

 Compute the page addresses. */

 Write the first page of the current stride. */

	/*

	 * If control arrives here, we can't use block mark swapping, which

	 * means we're forced to use transcription. First, scan for the

	 * transcription stamp. If we find it, then we don't have to do

	 * anything -- the block marks are already transcribed.

	/*

	 * If control arrives here, we couldn't find a transcription stamp, so

	 * so we presume the block marks are in the conventional location.

 Compute the number of blocks in the entire medium. */

	/*

	 * Loop over all the blocks in the medium, transcribing block marks as

	 * we go.

		/*

		 * Compute the chip, page and byte addresses for this block's

		 * conventional mark.

 Send the command to read the conventional block mark. */

		/*

		 * Check if the block is marked bad. If so, we need to mark it

		 * again, but this time the result will be a mark in the

		 * location where we transcribe block marks.

 Write the stamp that indicates we've transcribed the block marks. */

 This is ROM arch-specific initilization before the BBT scanning. */

 Free the temporary DMA memory for reading ID. */

 Set up the NFC geometry which is used by BCH. */

 Alloc the new DMA buffers according to the pagesize and oobsize */

 Set up the medium geometry */

 Init the nand_ecc_ctrl{} */

	/*

	 * We only enable the subpage read when:

	 *  (1) the chip is imx6, and

	 *  (2) the size of the ECC parity is byte aligned.

 [1] send out the PIO words */

	/*

	 * This driver currently supports only one NAND chip. Plus, dies share

	 * the same configuration. So once timings have been applied on the

	 * controller side, they will not change anymore. When the time will

	 * come, the check on must_apply_timings will have to be dropped.

			/*

			 * When this command has an address cycle chain it

			 * together with the address cycle

 init the MTD data structures */

 init the nand_chip{}, we don't support a 16-bit NAND Flash bus. */

 Set up swap_block_mark, must be set before the gpmi_set_geometry() */

	/*

	 * Allocate a temporary DMA buffer for reading ID in the

	 * nand_scan_ident().

 re-init the GPMI registers */

 Set flag to get timing setup restored for next exec_op */

 re-init the BCH registers */

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2017 ATMEL

 * Copyright 2017 Free Electrons

 *

 * Author: Boris Brezillon <boris.brezillon@free-electrons.com>

 *

 * Derived from the atmel_nand.c driver which contained the following

 * copyrights:

 *

 *   Copyright 2003 Rick Bronson

 *

 *   Derived from drivers/mtd/nand/autcpu12.c (removed in v3.8)

 *	Copyright 2001 Thomas Gleixner (gleixner@autronix.de)

 *

 *   Derived from drivers/mtd/spia.c (removed in v3.8)

 *	Copyright 2000 Steven J. Hill (sjhill@cotw.com)

 *

 *

 *   Add Hardware ECC support for AT91SAM9260 / AT91SAM9263

 *	Richard Genoud (richard.genoud@gmail.com), Adeneo Copyright 2007

 *

 *   Derived from Das U-Boot source code

 *	(u-boot-1.1.5/board/atmel/at91sam9263ek/nand.c)

 *	Copyright 2006 ATMEL Rousset, Lacressonniere Nicolas

 *

 *   Add Programmable Multibit ECC support for various AT91 SoC

 *	Copyright 2012 ATMEL, Hong Xu

 *

 *   Add Nand Flash Controller support for SAMA5 SoC

 *	Copyright 2013 ATMEL, Josh Wu (josh.wu@atmel.com)

 *

 * A few words about the naming convention in this file. This convention

 * applies to structure and function names.

 *

 * Prefixes:

 *

 * - atmel_nand_: all generic structures/functions

 * - atmel_smc_nand_: all structures/functions specific to the SMC interface

 *		      (at91sam9 and avr32 SoCs)

 * - atmel_hsmc_nand_: all structures/functions specific to the HSMC interface

 *		       (sama5 SoCs and later)

 * - atmel_nfc_: all structures/functions used to manipulate the NFC sub-block

 *		 that is available in the HSMC block

 * - <soc>_nand_: all SoC specific structures/functions

 Only used when instantiating from legacy DT bindings. */

 Clear all flags. */

 Send the command. */

 Reset the op state. */

	/*

	 * If the controller supports DMA, the buffer address is DMA-able and

	 * len is long enough to make DMA transfers profitable, let's trigger

	 * a DMA transfer. If it fails, fallback to PIO mode.

	/*

	 * If the controller supports DMA, the buffer address is DMA-able and

	 * len is long enough to make DMA transfers profitable, let's trigger

	 * a DMA transfer. If it fails, fallback to PIO mode.

 Falling back to CPU copy. */

 Falling back to CPU copy. */

		/*

		 * 2 address cycles for the column offset on large page NANDs.

	/*

	 * Optimized read page accessors only work when the NAND R/B pin is

	 * connected to a native SoC R/B pin. If that's not the case, fallback

	 * to the non-optimized one.

		/*

		 * Nothing to do, the core will initialize everything for us.

 Other modes are not supported. */

 Adjust the ECC operations for the HSMC IP. */

 DDR interface not supported. */

	/*

	 * tRC < 30ns implies EDO mode. This controller does not support this

	 * mode.

	/*

	 * Set write pulse timing. This one is easy to extract:

	 *

	 * NWE_PULSE = tWP

	/*

	 * The write setup timing depends on the operation done on the NAND.

	 * All operations goes through the same data bus, but the operation

	 * type depends on the address we are writing to (ALE/CLE address

	 * lines).

	 * Since we have no way to differentiate the different operations at

	 * the SMC level, we must consider the worst case (the biggest setup

	 * time among all operation types):

	 *

	 * NWE_SETUP = max(tCLS, tCS, tALS, tDS) - NWE_PULSE

	/*

	 * As for the write setup timing, the write hold timing depends on the

	 * operation done on the NAND:

	 *

	 * NWE_HOLD = max(tCLH, tCH, tALH, tDH, tWH)

	/*

	 * The write cycle timing is directly matching tWC, but is also

	 * dependent on the other timings on the setup and hold timings we

	 * calculated earlier, which gives:

	 *

	 * NWE_CYCLE = max(tWC, NWE_SETUP + NWE_PULSE + NWE_HOLD)

	/*

	 * We don't want the CS line to be toggled between each byte/word

	 * transfer to the NAND. The only way to guarantee that is to have the

	 * NCS_{WR,RD}_{SETUP,HOLD} timings set to 0, which in turn means:

	 *

	 * NCS_WR_PULSE = NWE_CYCLE

	/*

	 * As for the write setup timing, the read hold timing depends on the

	 * operation done on the NAND:

	 *

	 * NRD_HOLD = max(tREH, tRHOH)

	/*

	 * TDF = tRHZ - NRD_HOLD

	/*

	 * In ONFI 4.0 specs, tRHZ has been increased to support EDO NANDs and

	 * we might end up with a config that does not fit in the TDF field.

	 * Just take the max value in this case and hope that the NAND is more

	 * tolerant than advertised.

	/*

	 * Read pulse timing directly matches tRP:

	 *

	 * NRD_PULSE = tRP

	/*

	 * The write cycle timing is directly matching tWC, but is also

	 * dependent on the setup and hold timings we calculated earlier,

	 * which gives:

	 *

	 * NRD_CYCLE = max(tRC, NRD_PULSE + NRD_HOLD)

	 *

	 * NRD_SETUP is always 0.

	/*

	 * We don't want the CS line to be toggled between each byte/word

	 * transfer from the NAND. The only way to guarantee that is to have

	 * the NCS_{WR,RD}_{SETUP,HOLD} timings set to 0, which in turn means:

	 *

	 * NCS_RD_PULSE = NRD_CYCLE

 Txxx timings are directly matching tXXX ones. */

	/*

	 * Version 4 of the ONFI spec mandates that tADL be at least 400

	 * nanoseconds, but, depending on the master clock rate, 400 ns may not

	 * fit in the tADL field of the SMC reg. We need to relax the check and

	 * accept the -ERANGE return code.

	 *

	 * Note that previous versions of the ONFI spec had a lower tADL_min

	 * (100 or 200 ns). It's not clear why this timing constraint got

	 * increased but it seems most NANDs are fine with values lower than

	 * 400ns, so we should be safe.

 Attach the CS line to the NFC logic. */

 Set the appropriate data bus width. */

 Operate in NRD/NWE READ/WRITEMODE. */

	/*

	 * Use a bounce buffer when the buffer passed by the MTD user is not

	 * suitable for DMA.

 Default to HW ECC if pmecc is available. */

 Attach the CS to the NAND Flash logic. */

 No card inserted, skip this NAND. */

	/*

	 * Legacy bindings only allow connecting a single NAND with a unique CS

	 * line to the controller.

	/*

	 * The old driver was hardcoding the CS id to 3 for all sama5

	 * controllers. Since this id is only meaningful for the sama5

	 * controller we can safely assign this id to 3 no matter the

	 * controller.

	 * If one wants to connect a NAND to a different CS line, he will

	 * have to use the new bindings.

 R/B GPIO. */

 CS GPIO. */

 Card detect GPIO. */

 We do not retrieve the SMC syscon when parsing old DTs. */

 sentinel */ },

		/*

		 * We keep the MTD name unchanged to avoid breaking platforms

		 * where the MTD cmdline parser is used and the bootloader

		 * has not been updated to use the new naming scheme.

		/*

		 * If the new bindings are used and the bootloader has not been

		 * updated to pass a new mtdparts parameter on the cmdline, you

		 * should define the following property in your nand node:

		 *

		 *	label = "atmel_nand";

		 *

		 * This way, mtd->name will be set by the core when

		 * nand_set_flash_node() is called.

 We do not retrieve the SMC syscon when parsing old DTs. */

 We do not retrieve the EBICSA regmap when parsing old DTs. */

	/*

	 * The at91sam9263 has 2 EBIs, if the NAND controller is under EBI1

	 * add 4 to ->ebi_csa->offs.

 Make sure all irqs are masked before registering our IRQ handler. */

 Initial NFC configuration. */

 Only used to parse old bindings. */

/*

 * The SMC reg layout of at91rm9200 is completely different which prevents us

 * from re-using atmel_smc_nand_setup_interface() for the

 * ->setup_interface() hook.

 * At this point, there's no support for the at91rm9200 SMC IP, so we leave

 * ->setup_interface() unassigned.

 Only used to parse old bindings. */

 Support for old/deprecated bindings: */

 sentinel */ },

		/*

		 * If we are parsing legacy DT props and the DT contains a

		 * valid NFC node, forward the request to the sama5 logic.

		/*

		 * Even if the compatible says we are dealing with an

		 * at91rm9200 controller, the atmel,nand-has-dma specify that

		 * this controller supports DMA, which means we are in fact

		 * dealing with an at91sam9g45+ controller.

		/*

		 * All SoCs except the at91sam9261 are assigning ALE to A21 and

		 * CLE to A22. If atmel,nand-addr-offset != 21 this means we're

		 * actually dealing with an at91sam9261 controller.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2017 ATMEL

 * Copyright 2017 Free Electrons

 *

 * Author: Boris Brezillon <boris.brezillon@free-electrons.com>

 *

 * Derived from the atmel_nand.c driver which contained the following

 * copyrights:

 *

 *   Copyright 2003 Rick Bronson

 *

 *   Derived from drivers/mtd/nand/autcpu12.c (removed in v3.8)

 *	Copyright 2001 Thomas Gleixner (gleixner@autronix.de)

 *

 *   Derived from drivers/mtd/spia.c (removed in v3.8)

 *	Copyright 2000 Steven J. Hill (sjhill@cotw.com)

 *

 *   Add Hardware ECC support for AT91SAM9260 / AT91SAM9263

 *	Richard Genoud (richard.genoud@gmail.com), Adeneo Copyright 2007

 *

 *   Derived from Das U-Boot source code

 *	(u-boot-1.1.5/board/atmel/at91sam9263ek/nand.c)

 *      Copyright 2006 ATMEL Rousset, Lacressonniere Nicolas

 *

 *   Add Programmable Multibit ECC support for various AT91 SoC

 *	Copyright 2012 ATMEL, Hong Xu

 *

 *   Add Nand Flash Controller support for SAMA5 SoC

 *	Copyright 2013 ATMEL, Josh Wu (josh.wu@atmel.com)

 *

 * The PMECC is an hardware assisted BCH engine, which means part of the

 * ECC algorithm is left to the software. The hardware/software repartition

 * is explained in the "PMECC Controller Functional Description" chapter in

 * Atmel datasheets, and some of the functions in this file are directly

 * implementing the algorithms described in the "Software Implementation"

 * sub-section.

 *

 * TODO: it seems that the software BCH implementation in lib/bch.c is already

 * providing some of the logic we are implementing here. It would be smart

 * to expose the needed lib/bch.c helpers/functions and re-use them here.

 Galois field dimension */

 Primitive Polynomial used by PMECC */

 Time out value for reading PMECC status register */

 PMECC Register Definitions */

 PMERRLOC Register Definitions */

 polynomial degree is the most-significant bit index */

 primitive polynomial must be of degree m */

 polynomial is not primitive (a^i=1 with 0<i<2^m-1) */

 Reserve space for partial_syn, si and smu */

 Reserve space for lmu. */

 Reserve space for mu, dmu and delta. */

 Fill odd syndromes */

	/*

	 * si[] is a table that holds the current syndrome value,

	 * an element of that table belongs to the field

 Computation 2t syndromes based on S(x) */

 Odd syndromes */

 Even syndrome = (Odd syndrome) ** 2 */

 index of largest delta */

 First Row */

 Mu */

 discrepancy set to 1 */

 polynom order set to 0 */

 Second Row */

 Mu */

 Sigma(x) set to 1 */

 discrepancy set to S1 */

 polynom order set to 0 */

 Init the Sigma(x) last row */

 Begin Computing Sigma (Mu+1) and L(mu) */

 check if discrepancy is set to 0 */

 copy polynom */

 copy previous polynom order to the next */

 find largest delta with dmu != 0 */

 compute difference */

 Compute degree of the new smu polynomial */

 Init smu[i+1] with 0 */

 Compute smu[i+1] */

 End Computing Sigma (Mu+1) and L(mu) */

 In either case compute delta */

 Do not compute discrepancy for the last iteration */

 Number of roots == degree of smu hence <= cap */

	/*

	 * Number of roots does not match the degree of smu

	 * unable to correct error.

 Disable all interrupts before registering the PMECC handler. */

 sentinel */ }

		/*

		 * Support old DT bindings: in this case the PMECC iomem

		 * resources are directly defined in the user pdev at position

		 * 1 and 2. Extract all relevant information from there.

 No PMECC engine available. */

 Find the caps associated to the NAND dev node. */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright © 2005-2009 Samsung Electronics

 *  Copyright © 2007 Nokia Corporation

 *

 *  Kyungmin Park <kyungmin.park@samsung.com>

 *

 *  Credits:

 *	Adrian Hunter <ext-adrian.hunter@nokia.com>:

 *	auto-placement support, read-while load support, various fixes

 *

 *	Vishak G <vishak.g at samsung.com>, Rohit Hagargundgi <h.rohit at samsung.com>

 *	Flex-OneNAND support

 *	Amul Kumar Saha <amul.saha at samsung.com>

 *	OTP support

/*

 * Multiblock erase if number of blocks to erase is 2 or more.

 * Maximum number of blocks for simultaneous erase is 64.

 Default Flex-OneNAND boundary and lock respectively */

 Default OneNAND/Flex-OneNAND OTP options*/

/*

 * flexonenand_oob_128 - oob info for Flex-Onenand with 4KB page

 * For now, we expose only 64 out of 80 ecc bytes

/*

 * onenand_oob_128 - oob info for OneNAND with 4KB page

 *

 * Based on specification:

 * 4Gb M-die OneNAND Flash (KFM4G16Q4M, KFN8G16Q4M). Rev. 1.3, Apr. 2010

 *

	/*

	 * free bytes are using the spare area fields marked as

	 * "Managed by internal ECC logic for Logical Sector Number area"

/*

 * onenand_oob_32_64 - oob info for large (2KB) page

 16 */

 32 */

 48 */

 64 */

 80 */

 96 */

 112 */

 128 */

/**

 * onenand_readw - [OneNAND Interface] Read OneNAND register

 * @addr:		address to read

 *

 * Read OneNAND register

/**

 * onenand_writew - [OneNAND Interface] Write OneNAND register with value

 * @value:		value to write

 * @addr:		address to write

 *

 * Write OneNAND register with value

/**

 * onenand_block_address - [DEFAULT] Get block address

 * @this:		onenand chip data structure

 * @block:		the block

 * @return		translated block address if DDP, otherwise same

 *

 * Setup Start Address 1 Register (F100h)

 Device Flash Core select, NAND Flash Block Address */

/**

 * onenand_bufferram_address - [DEFAULT] Get bufferram address

 * @this:		onenand chip data structure

 * @block:		the block

 * @return		set DBS value if DDP, otherwise 0

 *

 * Setup Start Address 2 Register (F101h) for DDP

 Device BufferRAM Select */

/**

 * onenand_page_address - [DEFAULT] Get page address

 * @page:		the page address

 * @sector:	the sector address

 * @return		combined page and sector address

 *

 * Setup Start Address 8 Register (F107h)

 Flash Page Address, Flash Sector Address */

/**

 * onenand_buffer_address - [DEFAULT] Get buffer address

 * @dataram1:	DataRAM index

 * @sectors:	the sector address

 * @count:		the number of sectors

 * Return:		the start buffer value

 *

 * Setup Start Buffer Register (F200h)

 BufferRAM Sector Address */

 DataRAM1 */

 DataRAM0 */

 BufferRAM Sector Count */

/**

 * flexonenand_block- For given address return block number

 * @this:         - OneNAND device structure

 * @addr:		- Address for which block number is needed

/**

 * flexonenand_addr - Return address of the block

 * @this:		OneNAND device structure

 * @block:		Block number on Flex-OneNAND

 *

 * Return address of the block

/**

 * onenand_get_density - [DEFAULT] Get OneNAND density

 * @dev_id:	OneNAND device ID

 *

 * Get OneNAND density from device ID

/**

 * flexonenand_region - [Flex-OneNAND] Return erase region of addr

 * @mtd:		MTD device structure

 * @addr:		address whose erase region needs to be identified

/**

 * onenand_command - [DEFAULT] Send command to OneNAND device

 * @mtd:		MTD device structure

 * @cmd:		the command to be sent

 * @addr:		offset to read from or write to

 * @len:		number of bytes to read or write

 *

 * Send command to OneNAND device. This function is used for middle/large page

 * devices (1KB/2KB Bytes per page)

 Address translation */

 addr contains die index */

 Make the even block number */

 Is it the odd plane? */

 NOTE: The setting order of the registers is very important! */

 Select DataRAM for DDP */

 It is always BufferRAM0 */

 Switch to the next data buffer */

 Write 'DFS, FBA' of Flash */

 Select DataRAM for DDP */

 Now we use page size operation */

 It is always BufferRAM0 */

 Write 'FPA, FSA' of Flash */

 Write 'BSA, BSC' of DataRAM */

 Interrupt clear */

 Write command */

/**

 * onenand_read_ecc - return ecc status

 * @this:		onenand chip structure

/**

 * onenand_wait - [DEFAULT] wait until the command is done

 * @mtd:		MTD device structure

 * @state:		state to select the max. timeout value

 *

 * Wait for command done. This applies to all OneNAND command

 * Read can take up to 30us, erase up to 2ms and program up to 350us

 * according to general OneNAND specs

 The 20 msec is enough */

 To get correct interrupt status in timeout case */

	/*

	 * In the Spec. it checks the controller status first

	 * However if you get the correct information in case of

	 * power off recovery (POR) test, it should read ECC status first

 If there's controller error, it's a real error */

/*

 * onenand_interrupt - [DEFAULT] onenand interrupt handler

 * @irq:		onenand interrupt number

 * @dev_id:	interrupt data

 *

 * complete the work

 To handle shared interrupt */

/*

 * onenand_interrupt_wait - [DEFAULT] wait until the command is done

 * @mtd:		MTD device structure

 * @state:		state to select the max. timeout value

 *

 * Wait for command done.

/*

 * onenand_try_interrupt_wait - [DEFAULT] try interrupt wait

 * @mtd:		MTD device structure

 * @state:		state to select the max. timeout value

 *

 * Try interrupt based wait (It is used one-time)

 We use interrupt wait first */

 Release the irq */

/*

 * onenand_setup_wait - [OneNAND Interface] setup onenand wait method

 * @mtd:		MTD device structure

 *

 * There's two method to wait onenand work

 * 1. polling - read interrupt status register

 * 2. interrupt - use the kernel interrupt method

 If we can't get irq, use the normal wait */

 Enable interrupt */

/**

 * onenand_bufferram_offset - [DEFAULT] BufferRAM offset

 * @mtd:		MTD data structure

 * @area:		BufferRAM area

 * @return		offset given area

 *

 * Return BufferRAM offset given area

 Note: the 'this->writesize' is a real page size */

/**

 * onenand_read_bufferram - [OneNAND Interface] Read the bufferram area

 * @mtd:		MTD data structure

 * @area:		BufferRAM area

 * @buffer:	the databuffer to put/get data

 * @offset:	offset to read from or write to

 * @count:		number of bytes to read/write

 *

 * Read the BufferRAM area

 Align with word(16-bit) size */

 Read word and save byte */

/**

 * onenand_sync_read_bufferram - [OneNAND Interface] Read the bufferram area with Sync. Burst mode

 * @mtd:		MTD data structure

 * @area:		BufferRAM area

 * @buffer:	the databuffer to put/get data

 * @offset:	offset to read from or write to

 * @count:		number of bytes to read/write

 *

 * Read the BufferRAM area with Sync. Burst Mode

 Align with word(16-bit) size */

 Read word and save byte */

/**

 * onenand_write_bufferram - [OneNAND Interface] Write the bufferram area

 * @mtd:		MTD data structure

 * @area:		BufferRAM area

 * @buffer:	the databuffer to put/get data

 * @offset:	offset to read from or write to

 * @count:		number of bytes to read/write

 *

 * Write the BufferRAM area

 Align with word(16-bit) size */

 Calculate byte access offset */

 Read word and save byte */

/**

 * onenand_get_2x_blockpage - [GENERIC] Get blockpage at 2x program mode

 * @mtd:		MTD data structure

 * @addr:		address to check

 * @return		blockpage address

 *

 * Get blockpage address at 2x program mode

 Calculate the even block number */

 Is it the odd plane? */

/**

 * onenand_check_bufferram - [GENERIC] Check BufferRAM information

 * @mtd:		MTD data structure

 * @addr:		address to check

 * @return		1 if there are valid data, otherwise 0

 *

 * Check bufferram if there is data we required

 Is there valid data? */

 Check another BufferRAM */

 Select DataRAM for DDP */

/**

 * onenand_update_bufferram - [GENERIC] Update BufferRAM information

 * @mtd:		MTD data structure

 * @addr:		address to update

 * @valid:		valid flag

 *

 * Update BufferRAM information

 Invalidate another BufferRAM */

 Update BufferRAM */

/**

 * onenand_invalidate_bufferram - [GENERIC] Invalidate BufferRAM information

 * @mtd:		MTD data structure

 * @addr:		start address to invalidate

 * @len:		length to invalidate

 *

 * Invalidate BufferRAM information

 Invalidate BufferRAM */

/**

 * onenand_get_device - [GENERIC] Get chip for selected access

 * @mtd:		MTD device structure

 * @new_state:	the state which is requested

 *

 * Get the device and lock it for exclusive access

	/*

	 * Grab the lock and see if the device is available

/**

 * onenand_release_device - [GENERIC] release chip

 * @mtd:		MTD device structure

 *

 * Deselect, release chip lock and wake up anyone waiting on the device

 Release the chip */

/**

 * onenand_transfer_auto_oob - [INTERN] oob auto-placement transfer

 * @mtd:		MTD device structure

 * @buf:		destination address

 * @column:	oob offset to read from

 * @thislen:	oob length to read

/**

 * onenand_recover_lsb - [Flex-OneNAND] Recover LSB page data

 * @mtd:		MTD device structure

 * @addr:		address to recover

 * @status:	return value from onenand_wait / onenand_bbt_wait

 *

 * MLC NAND Flash cell has paired pages - LSB page and MSB page. LSB page has

 * lower page address and MSB page has higher page address in paired pages.

 * If power off occurs during MSB page program, the paired LSB page data can

 * become corrupt. LSB page recovery read is a way to read LSB page though page

 * data are corrupted. When uncorrectable error occurs as a result of LSB page

 * read after power up, issue LSB page recovery read.

 Recovery is only for Flex-OneNAND */

 check if we failed due to uncorrectable error */

 check if address lies in MLC region */

	/* We are attempting to reread, so decrement stats.failed

	 * which was incremented by onenand_wait due to read failure

 Issue the LSB page recovery command */

/**

 * onenand_mlc_read_ops_nolock - MLC OneNAND read main and/or out-of-band

 * @mtd:		MTD device structure

 * @from:		offset to read from

 * @ops:		oob operation description structure

 *

 * MLC OneNAND / Flex-OneNAND has 4KB page size and 4KB dataram.

 * So, read-while-load is not present.

 Do not allow reads past end of device */

	/*

	 * Return success, if no ECC failures, else -EBADMSG

	 * fs driver will take care of that, because

	 * retlen == desired len and result == -EBADMSG

 return max bitflips per ecc step; ONENANDs correct 1 bit only */

/**

 * onenand_read_ops_nolock - [OneNAND Interface] OneNAND read main and/or out-of-band

 * @mtd:		MTD device structure

 * @from:		offset to read from

 * @ops:		oob operation description structure

 *

 * OneNAND read main and/or out-of-band data

 Do not allow reads past end of device */

 Read-while-load method */

 Do first load to bufferRAM */

 If there is more to load then start next load */

			/*

			 * Chip boundary handling in DDP

			 * Now we issued chip 1 read and pointed chip 1

			 * bufferram so we have to point chip 0 bufferram.

 While load is going, read from last bufferRAM */

 Read oob area if needed */

 See if we are done */

 Set up for next read from bufferRAM */

 Now wait for load */

	/*

	 * Return success, if no ECC failures, else -EBADMSG

	 * fs driver will take care of that, because

	 * retlen == desired len and result == -EBADMSG

 return max bitflips per ecc step; ONENANDs correct 1 bit only */

/**

 * onenand_read_oob_nolock - [MTD Interface] OneNAND read out-of-band

 * @mtd:		MTD device structure

 * @from:		offset to read from

 * @ops:		oob operation description structure

 *

 * OneNAND read out-of-band data from the spare area

 Initialize return length value */

 Read more? */

 Page size */

/**

 * onenand_read_oob - [MTD Interface] Read main and/or out-of-band

 * @mtd:		MTD device structure

 * @from:		offset to read from

 * @ops:		oob operation description structure

 *

 * Read main and/or out-of-band

 Not implemented yet */

/**

 * onenand_bbt_wait - [DEFAULT] wait until the command is done

 * @mtd:		MTD device structure

 * @state:		state to select the max. timeout value

 *

 * Wait for command done.

 The 20 msec is enough */

 To get correct interrupt status in timeout case */

 Initial bad block case: 0x2400 or 0x0400 */

/**

 * onenand_bbt_read_oob - [MTD Interface] OneNAND read out-of-band for bbt scan

 * @mtd:		MTD device structure

 * @from:		offset to read from

 * @ops:		oob operation description structure

 *

 * OneNAND read out-of-band data from the spare area for bbt scan

 Initialize return value */

 Do not allow reads past end of device */

 Grab the lock and see if the device is available */

 Read more? */

 Update Page size */

 Deselect and wake up anyone waiting on the device */

/**

 * onenand_verify_oob - [GENERIC] verify the oob contents after a write

 * @mtd:		MTD device structure

 * @buf:		the databuffer to verify

 * @to:		offset to read from

/**

 * onenand_verify - [GENERIC] verify the chip contents after a write

 * @mtd:          MTD device structure

 * @buf:          the databuffer to verify

 * @addr:         offset to read from

 * @len:          number of bytes to read and compare

/**

 * onenand_panic_write - [MTD Interface] write buffer to FLASH in a panic context

 * @mtd:		MTD device structure

 * @to:		offset to write to

 * @len:		number of bytes to write

 * @retlen:	pointer to variable to store the number of written bytes

 * @buf:		the data to write

 *

 * Write with ECC

 Wait for any existing operation to clear */

 Reject writes, which are not page aligned */

 Loop until all data write */

 Partial page write */

 In partial page write we don't update bufferram */

/**

 * onenand_fill_auto_oob - [INTERN] oob auto-placement transfer

 * @mtd:		MTD device structure

 * @oob_buf:	oob buffer

 * @buf:		source address

 * @column:	oob offset to write to

 * @thislen:	oob length to write

/**

 * onenand_write_ops_nolock - [OneNAND Interface] write main and/or out-of-band

 * @mtd:		MTD device structure

 * @to:		offset to write to

 * @ops:		oob operation description structure

 *

 * Write main and/or oob with ECC

 Initialize retlen, in case of early exit */

 Reject writes, which are not page aligned */

 Check zero length */

 Loop until all data write */

 Partial page write */

				/* We send data to spare ram with oobsize

		/*

		 * 2 PLANE, MLC, and Flex-OneNAND do not support

		 * write-while-program feature.

 In partial page write we don't update bufferram */

 Only check verify write turn on */

 Exclude 1st OTP and OTP blocks for cache program feature */

		/*

		 * 2 PLANE, MLC, and Flex-OneNAND wait here

 In partial page write we don't update bufferram */

 Only check verify write turn on */

 In error case, clear all bufferrams */

/**

 * onenand_write_oob_nolock - [INTERN] OneNAND write out-of-band

 * @mtd:		MTD device structure

 * @to:			offset to write to

 * @ops:                oob operation description structure

 *

 * OneNAND write out-of-band

 Initialize retlen, in case of early exit */

 For compatibility with NAND: Do not allow write past end of page */

 Loop until all data write */

		/* We send data to spare ram with oobsize

 Set main area of DataRAM to 0xff*/

/**

 * onenand_write_oob - [MTD Interface] NAND write data and/or out-of-band

 * @mtd:		MTD device structure

 * @to:			offset to write

 * @ops:		oob operation description structure

 Not implemented yet */

/**

 * onenand_block_isbad_nolock - [GENERIC] Check if a block is marked bad

 * @mtd:		MTD device structure

 * @ofs:		offset from device start

 * @allowbbt:	1, if its allowed to access the bbt area

 *

 * Check, if the block is bad. Either by reading the bad block table or

 * calling of the scan function.

 Return info from the table */

/**

 * onenand_multiblock_erase - [INTERN] erase block(s) using multiblock erase

 * @mtd:		MTD device structure

 * @instr:		erase instruction

 * @block_size:		block size

 *

 * Erase one or more blocks up to 64 block at a time

 Pre-check bbs */

 Check if we have a bad block, we do not erase bad blocks */

 loop over 64 eb batches */

 do not cross chip boundary */

 last block of 64-eb series */

 Check if it is write protected */

 verify */

/**

 * onenand_block_by_block_erase - [INTERN] erase block(s) using regular erase

 * @mtd:		MTD device structure

 * @instr:		erase instruction

 * @region:	erase region

 * @block_size:	erase block size

 *

 * Erase one or more blocks one block at a time

 region is set for Flex-OneNAND */

 Loop through the blocks */

 Check if we have a bad block, we do not erase bad blocks */

 Check, if it is write protected */

 FIXME: This should be handled at MTD partitioning level. */

/**

 * onenand_erase - [MTD Interface] erase block(s)

 * @mtd:		MTD device structure

 * @instr:		erase instruction

 *

 * Erase one or more blocks

 Find the eraseregion of this address */

		/* Start address within region must align on block boundary.

		 * Erase region's start offset is always block start address.

 Start address must align on block boundary */

 Length must align on block boundary */

 Grab the lock and see if the device is available */

 region is set for Flex-OneNAND (no mb erase) */

 Deselect and wake up anyone waiting on the device */

/**

 * onenand_sync - [MTD Interface] sync

 * @mtd:		MTD device structure

 *

 * Sync is actually a wait for chip ready function

 Grab the lock and see if the device is available */

 Release it and go back */

/**

 * onenand_block_isbad - [MTD Interface] Check whether the block at the given offset is bad

 * @mtd:		MTD device structure

 * @ofs:		offset relative to mtd start

 *

 * Check whether the block is bad

/**

 * onenand_default_block_markbad - [DEFAULT] mark a block bad

 * @mtd:		MTD device structure

 * @ofs:		offset from device start

 *

 * This is the default implementation, which can be overridden by

 * a hardware specific driver.

 Get block number */

 We write two bytes, so we don't have to mess with 16-bit access */

	/* FIXME : What to do when marking SLC block in partition

	 * 	   with MLC erasesize? For now, it is not advisable to

	 *	   create partitions containing both SLC and MLC regions.

/**

 * onenand_block_markbad - [MTD Interface] Mark the block at the given offset as bad

 * @mtd:		MTD device structure

 * @ofs:		offset relative to mtd start

 *

 * Mark the block as bad

 If it was bad already, return success and do nothing */

/**

 * onenand_do_lock_cmd - [OneNAND Interface] Lock or unlock block(s)

 * @mtd:		MTD device structure

 * @ofs:		offset relative to mtd start

 * @len:		number of bytes to lock or unlock

 * @cmd:		lock or unlock command

 *

 * Lock or unlock one or more blocks

 Continuous lock scheme */

 Set start block address */

 Set end block address */

 Write lock command */

 There's no return value */

 Sanity check */

 Check lock status */

 Block lock scheme */

 Set block address */

 Select DataRAM for DDP */

 Set start block address */

 Write lock command */

 There's no return value */

 Sanity check */

 Check lock status */

/**

 * onenand_lock - [MTD Interface] Lock block(s)

 * @mtd:		MTD device structure

 * @ofs:		offset relative to mtd start

 * @len:		number of bytes to unlock

 *

 * Lock one or more blocks

/**

 * onenand_unlock - [MTD Interface] Unlock block(s)

 * @mtd:		MTD device structure

 * @ofs:		offset relative to mtd start

 * @len:		number of bytes to unlock

 *

 * Unlock one or more blocks

/**

 * onenand_check_lock_status - [OneNAND Interface] Check lock status

 * @this:		onenand chip data structure

 *

 * Check lock status

 Set block address */

 Select DataRAM for DDP */

 Set start block address */

 Check lock status */

/**

 * onenand_unlock_all - [OneNAND Interface] unlock all blocks

 * @mtd:		MTD device structure

 *

 * Unlock all blocks

 Set start block address */

 Write unlock command */

 There's no return value */

 Sanity check */

 Don't check lock status */

 Check lock status */

 Workaround for all block unlock in DDP */

 All blocks on another chip */

/**

 * onenand_otp_command - Send OTP specific command to OneNAND device

 * @mtd:	 MTD device structure

 * @cmd:	 the command to be sent

 * @addr:	 offset to read from or write to

 * @len:	 number of bytes to read or write

 Address translation */

 Make the even block number */

 Is it the odd plane? */

 Write 'DFS, FBA' of Flash */

 Now we use page size operation */

 Write 'FPA, FSA' of Flash */

 Write 'BSA, BSC' of DataRAM */

 Interrupt clear */

 Write command */

/**

 * onenand_otp_write_oob_nolock - [INTERN] OneNAND write out-of-band, specific to OTP

 * @mtd:		MTD device structure

 * @to:			offset to write to

 * @ops:                oob operation description structure

 *

 * OneNAND write out-of-band only for OTP

 Initialize retlen, in case of early exit */

 Loop until all data write */

		/*

		 * Write 'DFS, FBA' of Flash

		 * Add: F100h DQ=DFS, FBA

		/*

		 * Select DataRAM for DDP

		 * Add: F101h DQ=DBS

		/*

		 * Enter OTP access mode

		/* We send data to spare ram with oobsize

		/*

		 * Write Data into DataRAM

		 * Add: 8th Word

		 * in sector0/spare/page0

		 * DQ=XXFCh

 Exit OTP access mode */

 Internal OTP operation */

/**

 * do_otp_read - [DEFAULT] Read OTP block area

 * @mtd:		MTD device structure

 * @from:		The offset to read

 * @len:		number of bytes to read

 * @retlen:	pointer to variable to store the number of readbytes

 * @buf:		the databuffer to put/get data

 *

 * Read OTP block area.

 Enter OTP access mode */

 Exit OTP access mode */

/**

 * do_otp_write - [DEFAULT] Write OTP block area

 * @mtd:		MTD device structure

 * @to:		The offset to write

 * @len:		number of bytes to write

 * @retlen:	pointer to variable to store the number of write bytes

 * @buf:		the databuffer to put/get data

 *

 * Write OTP block area.

 Force buffer page aligned */

 Enter OTP access mode */

 Exit OTP access mode */

/**

 * do_otp_lock - [DEFAULT] Lock OTP block area

 * @mtd:		MTD device structure

 * @from:		The offset to lock

 * @len:		number of bytes to lock

 * @retlen:	pointer to variable to store the number of lock bytes

 * @buf:		the databuffer to put/get data

 *

 * Lock OTP block area.

 Enter OTP access mode */

		/*

		 * For Flex-OneNAND, we write lock mark to 1st word of sector 4 of

		 * main area of page 49.

 Exit OTP access mode */

/**

 * onenand_otp_walk - [DEFAULT] Handle OTP operation

 * @mtd:		MTD device structure

 * @from:		The offset to read/write

 * @len:		number of bytes to read/write

 * @retlen:	pointer to variable to store the number of read bytes

 * @buf:		the databuffer to put/get data

 * @action:	do given action

 * @mode:		specify user and factory

 *

 * Handle OTP operation.

 Check User/Factory boundary */

 OTP Info functions */

/**

 * onenand_get_fact_prot_info - [MTD Interface] Read factory OTP info

 * @mtd:		MTD device structure

 * @len:		number of bytes to read

 * @retlen:	pointer to variable to store the number of read bytes

 * @buf:		the databuffer to put/get data

 *

 * Read factory OTP info.

/**

 * onenand_read_fact_prot_reg - [MTD Interface] Read factory OTP area

 * @mtd:		MTD device structure

 * @from:		The offset to read

 * @len:		number of bytes to read

 * @retlen:	pointer to variable to store the number of read bytes

 * @buf:		the databuffer to put/get data

 *

 * Read factory OTP area.

/**

 * onenand_get_user_prot_info - [MTD Interface] Read user OTP info

 * @mtd:		MTD device structure

 * @retlen:	pointer to variable to store the number of read bytes

 * @len:		number of bytes to read

 * @buf:		the databuffer to put/get data

 *

 * Read user OTP info.

/**

 * onenand_read_user_prot_reg - [MTD Interface] Read user OTP area

 * @mtd:		MTD device structure

 * @from:		The offset to read

 * @len:		number of bytes to read

 * @retlen:	pointer to variable to store the number of read bytes

 * @buf:		the databuffer to put/get data

 *

 * Read user OTP area.

/**

 * onenand_write_user_prot_reg - [MTD Interface] Write user OTP area

 * @mtd:		MTD device structure

 * @from:		The offset to write

 * @len:		number of bytes to write

 * @retlen:	pointer to variable to store the number of write bytes

 * @buf:		the databuffer to put/get data

 *

 * Write user OTP area.

/**

 * onenand_lock_user_prot_reg - [MTD Interface] Lock user OTP area

 * @mtd:		MTD device structure

 * @from:		The offset to lock

 * @len:		number of bytes to unlock

 *

 * Write lock mark on spare area in page 0 in OTP block

	/*

	 * Write lock mark to 8th word of sector0 of page0 of the spare0.

	 * We write 16 bytes spare area instead of 2 bytes.

	 * For Flex-OneNAND, we write lock mark to 1st word of sector 4 of

	 * main area of page 49.

	/*

	 * Note: OTP lock operation

	 *       OTP block : 0xXXFC			XX 1111 1100

	 *       1st block : 0xXXF3 (If chip support)	XX 1111 0011

	 *       Both      : 0xXXF0 (If chip support)	XX 1111 0000

 ONENAND_OTP_AREA | ONENAND_OTP_BLOCK0 | ONENAND_OTP_AREA_BLOCK0 */

 CONFIG_MTD_ONENAND_OTP */

/**

 * onenand_check_features - Check and set OneNAND features

 * @mtd:		MTD data structure

 *

 * Check and set OneNAND features

 * - lock scheme

 * - two plane

 Lock scheme depends on density and process */

 Lock scheme */

			/*

			 * There are two different 4KiB pagesize chips

			 * and no way to detect it by H/W config values.

			 *

			 * To detect the correct NOP for each chips,

			 * It should check the version ID as workaround.

			 *

			 * Now it has as following

			 * KFM4G16Q4M has NOP 4 with version ID 0x0131

			 * KFM4G16Q5M has NOP 1 with versoin ID 0x013e

 2Gb DDP does not have 2 plane */

 A-Die has all block unlock */

 Some OneNAND has continuous lock scheme */

 The MLC has 4KiB pagesize. */

/**

 * onenand_print_device_info - Print device & version ID

 * @device:        device ID

 * @version:	version ID

 *

 * Print device & version ID

/**

 * onenand_check_maf - Check manufacturer ID

 * @manuf:         manufacturer ID

 *

 * Check manufacturer ID

/**

 * flexonenand_get_boundary	- Reads the SLC boundary

 * @mtd:		MTD data structure

 Disable ECC */

 Enable ECC */

/**

 * flexonenand_get_size - Fill up fields in onenand_chip and mtd_info

 * 			  boundary[], diesize[], mtd->size, mtd->erasesize

 * @mtd:		- MTD device structure

 This fills up the device boundary */

 Expose MLC erase size except when all blocks are SLC */

/**

 * flexonenand_check_blocks_erased - Check if blocks are erased

 * @mtd:	mtd info structure

 * @start:	first erase block to check

 * @end:	last erase block to check

 *

 * Converting an unerased block from MLC to SLC

 * causes byte values to change. Since both data and its ECC

 * have changed, reads on the block give uncorrectable error.

 * This might lead to the block being detected as bad.

 *

 * Avoid this by ensuring that the block to be converted is

 * erased.

		/*

		 * Since main area write results in ECC write to spare,

		 * it is sufficient to check only ECC bytes for change.

/*

 * flexonenand_set_boundary	- Writes the SLC boundary

 Change only once for SDP Flex-OneNAND */

 boundary value of -1 indicates no required change */

 Check if converting blocks are erased */

 Check is boundary is locked */

 Recalculate device size on boundary change*/

/**

 * onenand_chip_probe - [OneNAND Interface] The generic chip probe

 * @mtd:		MTD device structure

 *

 * OneNAND detection method:

 *   Compare the values from command with ones from register

 Save system configuration 1 */

 Clear Sync. Burst Read mode to read BootRAM */

 Send the command for reading device ID from BootRAM */

 Read manufacturer and device IDs from BootRAM */

 Reset OneNAND to read default register values */

 Wait reset */

 Restore system configuration 1 */

 Check manufacturer ID */

 Read manufacturer and device IDs from Register */

 Check OneNAND device */

/**

 * onenand_probe - [OneNAND Interface] Probe the OneNAND device

 * @mtd:		MTD device structure

 Device and version IDs from Register */

 Flash device information */

 Check OneNAND features */

 Maximum possible erase regions */

	/*

	 * For Flex-OneNAND, chipsize represents maximum possible device size.

	 * mtd->size represents the actual device size.

 OneNAND page size & block size */

 The data buffer size is equal to page size */

 We use the full BufferRAM */

 Pages per a block are always 64 in OneNAND */

	/*

	 * Flex-OneNAND SLC area has 64 pages per block.

	 * Flex-OneNAND MLC area has 128 pages per block.

	 * Expose MLC erase size to find erase_shift and page_mask.

 Set density mask. it is used for DDP */

 It's real page size */

 REVISIT: Multichip handling */

	/*

	 * We emulate the 4KiB page and 256KiB erase block size

	 * But oobsize is still 64 bytes.

	 * It is only valid if you turn on 2X program support,

	 * Otherwise it will be ignored by compiler.

/**

 * onenand_suspend - [MTD Interface] Suspend the OneNAND flash

 * @mtd:		MTD device structure

/**

 * onenand_resume - [MTD Interface] Resume the OneNAND flash

 * @mtd:		MTD device structure

/**

 * onenand_scan - [OneNAND Interface] Scan for the OneNAND device

 * @mtd:		MTD device structure

 * @maxchips:	Number of chips to scan for

 *

 * This fills out all the not initialized function pointers

 * with the defaults.

 * The flash ID is read and the mtd/chip structures are

 * filled with the appropriate values.

 Set Sync. Burst Read after probing */

 Allocate buffers, if necessary */

	/*

	 * Allow subpage writes up to oobsize.

 To prevent kernel oops */

	/*

	 * The number of bytes available for a client to place data into

	 * the out of band area

 Fill in remaining MTD driver data */

 Unlock whole block */

 Set the bad block marker position */

 Change Flex-OneNAND boundaries if required */

/**

 * onenand_release - [OneNAND Interface] Free resources held by the OneNAND device

 * @mtd:		MTD device structure

 Deregister partitions */

 Free bad block table memory, if allocated */

 Buffers allocated by onenand_scan */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Samsung S3C64XX/S5PC1XX OneNAND driver

 *

 *  Copyright © 2008-2010 Samsung Electronics

 *  Kyungmin Park <kyungmin.park@samsung.com>

 *  Marek Szyprowski <m.szyprowski@samsung.com>

 *

 * Implementation:

 *	S3C64XX: emulate the pseudo BufferRAM

 *	S5PC110: use DMA

 S5PC110 specific definitions */

 Clear interrupt */

 Clear the ECC status */

 It's used for probing time */

 Used at unlock all status */

 BootRAM access control */

 It's used for probing time */

 Lock/lock-tight/unlock/unlock_all */

 BootRAM access control */

 The 20 msec is enough */

 To get correct interrupt status in timeout case */

	/*

	 * In the Spec. it checks the controller status first

	 * However if you get the correct information in case of

	 * power off recovery (POR) test, it should read ECC status first

	/*

	 * Emulate Two BufferRAMs and access with 4 bytes pointer

 Main */

 Main */

 Spare */

 Main */

 Main - dummy write */

 Spare */

	/*

	 * There's no exact timeout values at Spec.

	 * In real case it takes under 1 msec.

	 * So 20 msecs are enough.

 Handle vmalloc address */

 Page offset */

 DMA routine */

 DMA routine */

 Copy the bufferram to memory to prevent unaligned access */

 Now just return 0 */

 The 20 msec is enough */

 To get correct interrupt status in timeout case */

 Write unlock command */

 No need to check return value */

 Workaround for all block unlock in DDP */

 All blocks on another chip */

 Use generic onenand functions */

 No need to check pdata. the platform data is optional */

 Set onenand_chip also */

 Use runtime badblock check */

 Allocate 4KiB BufferRAM */

 Allocate 128 SpareRAM */

 S3C doesn't handle subpage write */

 S5PC110 */

 Interrupt support */

 S3C doesn't handle subpage write */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright (c) 2005 Samsung Electronics

 *  Kyungmin Park <kyungmin.park@samsung.com>

 *

 *  Overview:

 *   This is a device driver for the OneNAND flash for generic boards.

/*

 * Note: Driver name and platform data format have been updated!

 *

 * This version of the driver is named "onenand-flash" and takes struct

 * onenand_platform_data as platform data. The old ARM-specific version

 * with the name "onenand" used to take struct flash_platform_data.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  OneNAND driver for OMAP2 / OMAP3

 *

 *  Copyright © 2005-2006 Nokia Corporation

 *

 *  Author: Jarkko Lavinen <jarkko.lavinen@nokia.com> and Juha Yrjölä

 *  IRQ and DMA support written by Timo Teras

 continuous */

 Continue in wait for interrupt branch */

 Turn interrupts on */

 Add a delay to let GPIO settle */

 Timeout after 20ms */

					/*

					 * The operation seems to be still going

					 * so give it some more time.

 Turn interrupts off */

 Timeout after 20ms */

					/*

					 * The operation seems to be still going

					 * so give it some more time.

	/*

	 * If the buffer address is not DMA-able, len is not long enough to

	 * make DMA transfers profitable or if invoked from panic_write()

	 * fallback to PIO mode.

	/*

	 * If the buffer address is not DMA-able, len is not long enough to

	 * make DMA transfers profitable or if invoked from panic_write()

	 * fallback to PIO mode.

	/* With certain content in the buffer RAM, the OMAP boot ROM code

	 * can recognize the flash chip incorrectly. Zero it out before

	 * soft reset.

 Just try again if this happens */

 40 MHz or lower */

 SPDX-License-Identifier: GPL-2.0

/*

 *  Bad Block Table support for the OneNAND driver

 *

 *  Copyright(c) 2005 Samsung Electronics

 *  Kyungmin Park <kyungmin.park@samsung.com>

 *

 *  Derived from nand_bbt.c

 *

 *  TODO:

 *    Split BBT core and chip specific BBT.

/**

 * check_short_pattern - [GENERIC] check if a pattern is in the buffer

 * @buf:		the buffer to search

 * @len:		the length of buffer to search

 * @paglen:	the pagelength

 * @td:		search pattern descriptor

 *

 * Check for a pattern at the given place. Used to search bad block

 * tables and good / bad block identifiers. Same as check_pattern, but

 * no optional empty check and the pattern is expected to start

 * at offset 0.

 *

 Compare the pattern */

/**

 * create_bbt - [GENERIC] Create a bad block table by scanning the device

 * @mtd:		MTD device structure

 * @buf:		temporary buffer

 * @bd:		descriptor for the good/bad block search pattern

 * @chip:		create the table for a specific chip, -1 read all chips.

 *              Applies only if NAND_BBT_PERCHIP option is set

 *

 * Create a bad block table by scanning the device

 * for the given good/bad block identify pattern

 We need only read few bytes from the OOB area */

 chip == -1 case only */

	/* Note that numblocks is 2 * (real numblocks) here;

	 * see i += 2 below as it makses shifting and masking less painful

			/* No need to read pages fully,

 If it is a initial bad block, just ignore it */

/**

 * onenand_memory_bbt - [GENERIC] create a memory based bad block table

 * @mtd:		MTD device structure

 * @bd:		descriptor for the good/bad block search pattern

 *

 * The function creates a memory based bbt by scanning the device

 * for manufacturer / software marked good / bad blocks

/**

 * onenand_isbad_bbt - [OneNAND Interface] Check if a block is bad

 * @mtd:		MTD device structure

 * @offs:		offset in the device

 * @allowbbt:	allow access to bad block table region

 Get block number * 2 */

/**

 * onenand_scan_bbt - [OneNAND Interface] scan, find, read and maybe create bad block table(s)

 * @mtd:		MTD device structure

 * @bd:		descriptor for the good/bad block search pattern

 *

 * The function checks, if a bad block table(s) is/are already

 * available. If not it scans the device for manufacturer

 * marked good / bad blocks and writes the bad block table(s) to

 * the selected place.

 *

 * The bad block table memory is allocated here. It is freed

 * by the onenand_release function.

 *

 Allocate memory (2bit per block) and clear the memory bad block table */

 Set erase shift */

 Scan the device to build a memory based bad block table */

/*

 * Define some generic bad / good block scan pattern which are used

 * while scanning a device for factory marked good / bad blocks.

/**

 * onenand_default_bbt - [OneNAND Interface] Select a default bad block table for the device

 * @mtd:		MTD device structure

 *

 * This function selects the default bad block table

 * support for the device and calls the onenand_scan_bbt function

 1KB page has same configuration as 2KB page */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2017 exceet electronics GmbH

 *

 * Authors:

 *	Frieder Schrempf <frieder.schrempf@exceet.de>

 *	Boris Brezillon <boris.brezillon@bootlin.com>

	/*

	 * Make sure all dies are in buffer read mode and not continuous read

	 * mode.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2016-2017 Micron Technology, Inc.

 *

 * Authors:

 *	Peter Pan <peterpandong@micron.com>

/*

 * As per datasheet, die selection is done by the 6th bit of Die

 * Select Register (Address 0xD0).

 Micron  MT29F2G01AAAED Device */

 Reserve 2 bytes for the BBM. */

 section 0 has two bytes reserved for the BBM */

 M79A 2Gb 3.3V */

 M79A 2Gb 1.8V */

 M78A 1Gb 3.3V */

 M78A 1Gb 1.8V */

 M79A 4Gb 3.3V */

 M70A 4Gb 3.3V */

 M70A 4Gb 1.8V */

 M70A 8Gb 3.3V */

 M70A 8Gb 1.8V */

 M69A 2Gb 3.3V */

	/*

	 * M70A device series enable Continuous Read feature at Power-up,

	 * which is not supported. Disable this bit to avoid any possible

	 * failure.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2018 exceet electronics GmbH

 * Copyright (c) 2018 Kontron Electronics GmbH

 *

 * Author: Frieder Schrempf <frieder.schrempf@kontron.de>

 Kioxia is new name of Toshiba memory. */

/*

 * Backward compatibility for 1st generation Serial NAND devices

 * which don't support Quad Program Load operation.

 2 bytes reserved for BBM */

		/*

		 * Let's try to retrieve the real maximum number of bitflips

		 * in order to avoid forcing the wear-leveling layer to move

		 * data around if it's not necessary.

 3.3V 1Gb (1st generation) */

 3.3V 2Gb (1st generation) */

 3.3V 4Gb (1st generation) */

 1.8V 1Gb (1st generation) */

 1.8V 2Gb (1st generation) */

 1.8V 4Gb (1st generation) */

	/*

	 * 2nd generation serial nand has HOLD_D which is equivalent to

	 * QE_BIT.

 3.3V 1Gb (2nd generation) */

 3.3V 2Gb (2nd generation) */

 3.3V 4Gb (2nd generation) */

 3.3V 8Gb (2nd generation) */

 1.8V 1Gb (2nd generation) */

 1.8V 2Gb (2nd generation) */

 1.8V 4Gb (2nd generation) */

 1.8V 8Gb (2nd generation) */

 SPDX-License-Identifier: GPL-2.0

/*

 * Author:

 *	Chuanhong Guo <gch981213@gmail.com>

 section 0 has one byte reserved for bad block mark */

 1-7 bits are flipped. return the maximum. */

 Reserve 1 bytes for the BBM. */

 Valid for Q4/Q5 and Q6 (untested) devices */

		/*

		 * Read status2 register to determine a more fine grained

		 * bit error status

		/*

		 * 4 ... 7 bits are flipped (1..4 can't be detected, so

		 * report the maximum of 4 in this case

 bits sorted this way (3...0): ECCS1,ECCS0,ECCSE1,ECCSE0 */

		/*

		 * Read status2 register to determine a more fine grained

		 * bit error status

		/*

		 * 1 ... 4 bits are flipped (and corrected)

 bits sorted this way (1...0): ECCSE1, ECCSE0 */

 (2 << 4) through (6 << 4) are 4-8 corrected errors */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2019 Jeff Kletsky

 *

 * Author: Jeff Kletsky <git-commits@allycomm.com>

 4 BBM + 2 user bytes */

 Return upper limit by convention */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2016-2017 Micron Technology, Inc.

 *

 * Authors:

 *	Peter Pan <peterpandong@micron.com>

 *	Boris Brezillon <boris.brezillon@bootlin.com>

/**

 * spinand_upd_cfg() - Update the configuration register

 * @spinand: the spinand device

 * @mask: the mask encoding the bits to update in the config reg

 * @val: the new value to apply

 *

 * Update the configuration register.

 *

 * Return: 0 on success, a negative error code otherwise.

/**

 * spinand_select_target() - Select a specific NAND target/die

 * @spinand: the spinand device

 * @target: the target/die to select

 *

 * Select a new target/die. If chip only has one die, this function is a NOOP.

 *

 * Return: 0 on success, a negative error code otherwise.

		/*

		 * We use spinand_read_reg_op() instead of spinand_get_cfg()

		 * here to bypass the config cache.

		/*

		 * We have no way to know exactly how many bitflips have been

		 * fixed, so let's return the maximum possible value so that

		 * wear-leveling layers move the data immediately.

 Reserve 2 bytes for the BBM. */

 Only enable or disable the engine */

 Nothing to do when finishing a page write */

 Finish a page read: check the status, report errors/bitflips */

	/*

	 * Looks like PROGRAM LOAD (AKA write cache) does not necessarily reset

	 * the cache content to 0xFF (depends on vendor implementation), so we

	 * must fill the page cache entirely even if we only want to program

	 * the data portion of the page, otherwise we might corrupt the BBM or

	 * user data previously programmed in OOB area.

	 *

	 * Only reset the data buffer manually, the OOB buffer is prepared by

	 * ECC engines ->prepare_io_req() callback.

	/*

	 * Extra read, just in case the STATUS_READY bit has changed

	 * since our last check

 The plane number is passed in MSB just above the column address */

 Release manufacturer private data */

/**

 * spinand_match_and_init() - Try to find a match between a device ID and an

 *			      entry in a spinand_info table

 * @spinand: SPI NAND object

 * @table: SPI NAND device description table

 * @table_size: size of the device description table

 * @rdid_method: read id method to match

 *

 * Match between a device ID retrieved through the READ_ID command and an

 * entry in the SPI NAND description table. If a match is found, the spinand

 * object will be initialized with information provided by the matching

 * spinand_info entry.

 *

 * Return: 0 on success, a negative error code otherwise.

 After power up, all blocks are locked, so unlock them here. */

	/*

	 * We need a scratch buffer because the spi_mem interface requires that

	 * buf passed in spi_mem_op->data.buf be DMA-able.

	/*

	 * Use kzalloc() instead of devm_kzalloc() here, because some drivers

	 * may use this buffer for DMA access.

	 * Memory allocated by devm_ does not guarantee DMA-safe alignment.

 SPI-NAND default ECC engine is on-die */

 Propagate ECC information to mtd_info */

 sentinel */ },

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2018 Macronix

 *

 * Author: Boris Brezillon <boris.brezillon@bootlin.com>

		/*

		 * Let's try to retrieve the real maximum number of bitflips

		 * in order to avoid forcing the wear-leveling layer to move

		 * data around if it's not necessary.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright © 2007 Eugene Konev <ejka@openwrt.org>

 *

 * TI AR7 flash partition table.

 * Based on ar7 map by Felix Fietkau <nbd@openwrt.org>

 Try 10 blocks starting from master->erasesize */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * BCM63XX CFE image tag parser

 *

 * Copyright © 2006-2008  Florian Fainelli <florian@openwrt.org>

 *			  Mike Albon <malbon@openwrt.org>

 * Copyright © 2009-2010  Daniel Dickinson <openwrt@cshore.neomailbox.net>

 * Copyright © 2011-2013  Jonas Gorski <jonas.gorski@gmail.com>

 CONFIG_MIPS */

 always at least 64KiB */

 Ensure strings read from flash structs are null terminated */

 CONFIG_MIPS */

 extract nvram data */

 Start building partition list */

 Global partition "linux" to make easy firmware upgrade */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * BCM63XX CFE image tag parser

 *

 * Copyright © 2006-2008  Florian Fainelli <florian@openwrt.org>

 *			  Mike Albon <malbon@openwrt.org>

 * Copyright © 2009-2010  Daniel Dickinson <openwrt@cshore.neomailbox.net>

 * Copyright © 2011-2013  Jonas Gorski <jonas.gorski@gmail.com>

 Ensure strings read from flash structs are null terminated */

 CFE, NVRAM and global Linux are always present */

 Get the tag */

		/*

		 * Addresses are flash absolute, so convert to partition

		 * relative addresses. Assume either kernel or rootfs will

		 * directly follow the image tag.

 default Broadcom layout */

 OpenWrt layout */

 Determine number of partitions */

 Start building partition list */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2021 Rafał Miłecki <rafal@milecki.pl>

 Check CFE environment variable */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * BCM47XX MTD partitioning

 *

 * Copyright © 2012 Rafał Miłecki <zajec5@gmail.com>

/*

 * NAND flash on Netgear R6250 was verified to contain 15 partitions.

 * This will result in allocating too big array for some old devices, but the

 * memory will be freed soon anyway (see mtd_device_parse_register).

/*

 * Amount of bytes we read when analyzing each block of flash memory.

 * Set it big enough to allow detecting partition and reading important data.

 Magics */

 MPFR */

 1EFC */

 FCTY */

 FLSH */

 POTT */

 OP */

 shsq (weird ZTE H218N endianness) */

/**

 * bcm47xxpart_bootpartition - gets index of TRX partition used by bootloader

 *

 * Some devices may have more than one TRX partition. In such case one of them

 * is the main one and another a failsafe one. Bootloader may fallback to the

 * failsafe firmware if it detects corruption of the main image.

 *

 * This function provides info about currently used TRX partition. It's the one

 * containing kernel started by the bootloader.

 Check CFE environment variable */

 Array with indexes of TRX partitions */

 Number of found TRX partitions */

	/*

	 * Some really old flashes (like AT45DB*) had smaller erasesize-s, but

	 * partitions were aligned to at least 0x1000 anyway.

 Alloc */

 Parse block by block looking for magics */

 Nothing more in higher memory on BCM47XX (MIPS) */

 Read beginning of the block */

 Magic or small NVRAM at 0x400 */

		/*

		 * board_data starts with board_id which differs across boards,

		 * but we can use 'MPFR' (hopefully) magic at 0x100

 Found on Huawei E970 */

 POT(TOP) */

 ML */

 TRX */

			/*

			 * Try to find TRX size. The "length" field isn't fully

			 * reliable as it could be decreased to make CRC32 cover

			 * only part of TRX data. It's commonly used as checksum

			 * can't cover e.g. ever-changing rootfs partition.

			 * Use offsets as helpers for assuming min TRX size.

			/*

			 * Skip the TRX data. Decrease offset by block size as

			 * the next loop iteration will increase it.

 Squashfs on devices not using TRX */

		/*

		 * New (ARM?) devices may have NVRAM in some middle block. Last

		 * block will be checked later, so skip it.

 Read middle of the block */

 Some devices (ex. WNDR3700v3) don't have a standard 'MPFR' */

 Look for NVRAM at the end of the last block. */

 Standard NVRAM */

	/*

	 * Assume that partitions end at the beginning of the one they are

	 * followed by.

 If there was TRX parse it now */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Read flash partition table from command line

 *

 * Copyright © 2002      SYSGO Real-Time Solutions GmbH

 * Copyright © 2002-2010 David Woodhouse <dwmw2@infradead.org>

 *

 * The format for the command line is as follows:

 *

 * mtdparts=<mtddef>[;<mtddef]

 * <mtddef>  := <mtd-id>:<partdef>[,<partdef>]

 * <partdef> := <size>[@<offset>][<name>][ro][lk][slc]

 * <mtd-id>  := unique name used in mapping driver/device (mtd->name)

 * <size>    := standard linux memsize OR "-" to denote all remaining space

 *              size is automatically truncated at end of device

 *              if specified or truncated size is 0 the part is skipped

 * <offset>  := standard linux memsize

 *              if omitted the part will immediately follow the previous part

 *              or 0 if the first part

 * <name>    := '(' NAME ')'

 *              NAME will appear in /proc/mtd

 *

 * <size> and <offset> can be specified such that the parts are out of order

 * in physical memory and may even overlap.

 *

 * The parts are assigned MTD numbers in the order they are specified in the

 * command line regardless of their order in physical memory.

 *

 * Examples:

 *

 * 1 NOR Flash, with 1 single writable partition:

 * edb7312-nor:-

 *

 * 1 NOR Flash with 2 partitions, 1 NAND with one

 * edb7312-nor:256k(ARMboot)ro,-(root);edb7312-nand:-(home)

 debug macro */

 special size referring to all the remaining space in a partition */

 mtdpart_setup() parses into here */

 the command line passed to mtdpart_setup() */

/*

 * Parse one partition definition for an MTD. Since there can be many

 * comma separated partition definitions, this function calls itself

 * recursively until no more partition definitions are found. Nice side

 * effect: the memory to keep the mtd_partition structs and the names

 * is allocated upon the last definition being found. At that point the

 * syntax has been verified ok.

 fetch the partition size */

 assign all remaining space to this partition */

 fetch partition name and flags */

 this is going to be a regular partition */

 check for offset */

 now look for name */

 Partition_000 */

 record name length for memory allocation later */

 test for options */

 if lk is found do NOT unlock the MTD partition*/

 if slc is found use emulated SLC mode on this partition*/

 test if more partitions are following */

 more partitions follow, parse them */

 this is the last partition: allocate space for all */

	/*

	 * enter this partition (offset will be calculated later if it is

	 * OFFSET_CONTINUOUS at this point)

 return (updated) pointer to extra_mem memory */

 return (updated) pointer command line string */

 return partition table */

/*

 * Parse the command line.

		/*

		 * Replace the first ';' by a NULL char so strrchr can work

		 * properly.

		/*

		 * make sure that part-names with ":" will not be handled as

		 * part of the mtd-id with an ":"

		/*

		 * fetch <mtd-id>. We use strrchr to ignore all ':' that could

		 * be present in the MTD name, only the last one is interpreted

		 * as an <mtd-id>/<part-definition> separator.

 Restore the '(' now. */

 Restore the ';' now. */

		/*

		 * parse one mtd. have it reserve memory for the

		 * struct cmdline_mtd_partition and the mtd-id string.

 cmdline */

 out: updated cmdline ptr */

 out: number of parts */

 first partition */

 out: extra mem */

alignment*/);

			/*

			 * An error occurred. We're either:

			 * a) out of memory, or

			 * b) in the middle of the partition spec

			 * Either way, this mtd is hosed and we're

			 * unlikely to succeed in parsing any more

 align this_mtd */

 enter results */

 link into chain */

 EOS - we're done */

 does another spec follow? */

/*

 * Main function to be called from the MTD mapping driver/device to

 * obtain the partitioning information. At this point the command line

 * arguments will actually be parsed and turned to struct mtd_partition

 * information. It returns partitions for the requested mtd device, or

 * the first one in the chain if a NULL mtd_id is passed in.

 parse command line */

	/*

	 * Search for the partition definition matching master->name.

	 * If master->name is not set, stop at first partition definition.

/*

 * This is the handler for our kernel parameter, called from

 * main.c::checksetup(). Note that we can not yet kmalloc() anything,

 * so we only save the commandline for later processing.

 *

 * This function needs to be visible for bootloaders.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Flash partitions described by the OF (or flattened) device tree

 *

 * Copyright © 2006 MontaVista Software Inc.

 * Author: Vitaly Wool <vwool@ru.mvista.com>

 *

 * Revised to handle newer style flash binding by:

 *   Copyright © 2007 David Gibson, IBM Corporation.

 Pull of_node from the master device node */

 Master */

			/*

			 * We might get here even when ofpart isn't used at all (e.g.,

			 * when using another parser), so don't be louder than

			 * KERN_DEBUG

 Partition */

 The 'partitions' subnode might be used by another parser */

 First count the subnodes */

 Generic */

 Customized */

 Pull of_node from the master device node */

 No partitions found */

 bit 0 set signifies read only partition */

/*

 * When MTD core cannot find the requested parser, it tries to load the module

 * with the same name. Since we provide the ofoldpart parser, we should have

 * the corresponding alias.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Parser for TRX format partitions

 *

 * Copyright (C) 2012 - 2017 Rafał Miłecki <rafal@milecki.pl>

 Magics */

 UBI# */

 Get different magic from device tree if specified */

 We have LZMA loader if there is address in offset[2] */

	/*

	 * Assume that every partition ends at the beginning of the one it is

	 * followed by.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Parse RedBoot-style Flash Image System (FIS) tables and

 * produce a Linux partition array to match.

 *

 * Copyright © 2001      Red Hat UK Limited

 * Copyright © 2001-2010 David Woodhouse <dwmw2@infradead.org>

 Null terminated name

 Address within FLASH of image

 Address in memory where it executes

 Length of image

 Execution entry point

 Length of actual data

 Checksum over image descriptor

 Checksum over image data

 RedBoot doesn't actually write the desc_cksum field yet AFAICT */

	/*

	 * Assign the block found in the device tree to the local

	 * directory block pointer.

			/* This is apparently the FIS directory entry for the

			 * FIS directory itself.  The FIS directory size is

			 * one erase block; if the buf[i].size field is

			 * swab32(erasesize) then we know we are looking at

			 * a byte swapped FIS directory - swap all the entries!

			 * (NOTE: this is 'size' not 'data_length'; size is

			 * the full size of the entry.)

			/* RedBoot can combine the FIS directory and

			   config partitions into a single eraseblock;

			   we assume wrong-endian if either the swapped

			   'size' matches the eraseblock size precisely,

			   or if the swapped size actually fits in an

 Update numslots based on actual FIS directory size */

					/* A single 0xff denotes a deleted entry.

					 * Two of them in a row is the end of the table.

					/* The unsigned long fields were written with the

					 * wrong byte sex, name and pad have no byte sex.

 Update numslots based on actual FIS directory size */

 Didn't find it */

		/* I'm sure the JFFS2 code has done me permanent damage.

		 * I now think the following is _normal_

 mtd parsers will request the module by parser name */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2021 Rafał Miłecki <rafal@milecki.pl>

/*

 * sharpslpart.c - MTD partition parser for NAND flash using the SHARP FTL

 * for logical addressing, as used on the PXA models of the SHARP SL Series.

 *

 * Copyright (C) 2017 Andrea Adami <andrea.adami@gmail.com>

 *

 * Based on SHARP GPL 2.4 sources:

 *   http://support.ezaurus.com/developer/source/source_dl.asp

 *     drivers/mtd/nand/sharp_sl_logical.c

 *     linux/include/asm-arm/sharp_nand_logical.h

 *

 * Copyright (C) 2002 SHARP

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; either version 2 of the License, or

 * (at your option) any later version.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 oob structure */

 factory defaults */

/**

 * struct sharpsl_ftl - Sharp FTL Logical Table

 * @logmax:		number of logical blocks

 * @log2phy:		the logical-to-physical table

 *

 * Structure containing the logical-to-physical translation table

 * used by the SHARP SL FTL.

 verify that the OOB bytes 8 to 15 are free and available for the FTL */

/*

 * The logical block number assigned to a physical block is stored in the OOB

 * of the first page, in 3 16-bit copies with the following layout:

 *

 * 01234567 89abcdef

 * -------- --------

 * ECC BB   xyxyxy

 *

 * When reading we check that the first two copies agree.

 * In case of error, matching is tried using the following pairs.

 * Reserved values 0xffff mean the block is kept for wear leveling.

 *

 * 01234567 89abcdef

 * -------- --------

 * ECC BB   xyxy    oob[8]==oob[10] && oob[9]==oob[11]   -> byte0=8   byte1=9

 * ECC BB     xyxy  oob[10]==oob[12] && oob[11]==oob[13] -> byte0=10  byte1=11

 * ECC BB   xy  xy  oob[12]==oob[8] && oob[13]==oob[9]   -> byte0=12  byte1=13

 parity check */

 reserved */

 FTL reserves 5% of the blocks + 1 spare  */

 initialize ftl->log2phy */

 create physical-logical table */

 get logical block */

 cut-off errors and skip the out-of-range values */

 Ignore corrected ECC errors */

/*

 * MTD Partition Parser

 *

 * Sample values read from SL-C860

 *

 * # cat /proc/mtd

 * dev:    size   erasesize  name

 * mtd0: 006d0000 00020000 "Filesystem"

 * mtd1: 00700000 00004000 "smf"

 * mtd2: 03500000 00004000 "root"

 * mtd3: 04400000 00004000 "home"

 *

 * PARTITIONINFO1

 * 0x00060000: 00 00 00 00 00 00 70 00 42 4f 4f 54 00 00 00 00  ......p.BOOT....

 * 0x00060010: 00 00 70 00 00 00 c0 03 46 53 52 4f 00 00 00 00  ..p.....FSRO....

 * 0x00060020: 00 00 c0 03 00 00 00 04 46 53 52 57 00 00 00 00  ........FSRW....

 check for magics */

 fixup for hardcoded value 64 MiB (for older models) */

 extra sanity check */

 check that OOB bytes 8 to 15 used by the FTL are actually free */

 init logical mgmt (FTL) */

 read and validate first partition table */

 fallback: read second partition table */

 cleanup logical mgmt (FTL) */

 original names */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Qualcomm SMEM NAND flash partition parser

 *

 * Copyright (C) 2020, Linaro Ltd.

/**

 * struct smem_flash_pentry - SMEM Flash partition entry

 * @name: Name of the partition

 * @offset: Offset in blocks

 * @length: Length of the partition in blocks

 * @attr: Flags for this partition

/**

 * struct smem_flash_ptable - SMEM Flash partition table

 * @magic1: Partition table Magic 1

 * @magic2: Partition table Magic 2

 * @version: Partition table version

 * @numparts: Number of partitions in this ptable

 * @pentry: Flash partition entries belonging to this ptable

 Verify ptable magic */

 Ensure that # of partitions is less than the max we have allocated */

 Find out length of partition data based on table version */

	/*

	 * Now that the partition table header has been parsed, verified

	 * and the length of the partition table calculated, read the

	 * complete partition table

 Convert name to lower case */

 SPDX-License-Identifier: GPL-2.0-or-later

/*======================================================================



    drivers/mtd/afs.c: ARM Flash Layout/Partitioning



    Copyright © 2000 ARM Limited

    Copyright (C) 2019 Linus Walleij





   This is access code for flashes using ARM's flash partitioning

   standards.



 "FLSH" */

 "FOOT" */

 Address of first word of ImageFooter  */

 Start of area reserved by this footer */

 'Magic' number proves it's a footer   */

 Area type: ARM Image, SIB, customer   */

 Just this structure                   */

 Boot flags, compression etc.          */

 Unique number, selects for boot etc.  */

 Address program should be loaded to   */

 Actual size of image                  */

 Image is executed from here           */

 Null terminated                       */

 Flash Address of any stripped header  */

 Length of header in memory            */

 AIF, RLF, s-record etc.               */

 Image checksum (inc. this struct)     */

 The magic is 12 bytes from the end of the erase block */

 The magic is the 8 last bytes of the erase block */

	/*

	 * Static checks cannot see that we bail out if we have an error

	 * reading the footer.

	/*

	 * This is the address mask; we use this to mask off out of

	 * range address bits.

	/*

	 * Check the checksum.

	/*

	 * Hide the SIB (System Information Block)

	/*

	 * Check the image info base.  This can not

	 * be located after the footer structure.

	/*

	 * Check the start of this image.  The image

	 * data can not be located after this block.

 Read the image info block */

	/*

	 * Validate the name - it must be NUL terminated.

 First read the footer */

 Then read the image information */

 32bit platforms have 4 bytes padding */

 64bit platforms have 8 bytes padding */

 Align partition to end of erase block */

 Create one partition per region */

 Count the partitions by looping over all erase blocks */

	/*

	 * Identify the partitions

/*

 * pcmciamtd.c - MTD driver for PCMCIA flash memory cards

 *

 * Author: Simon Evans <spse@secret.org.uk>

 *

 * Copyright (C) 2002 Simon Evans

 *

 * Licence: GPL

 *

 Size of the PCMCIA address space: 26 bits = 64 MB */

 ioremapped address of PCMCIA window */

 size of window */

 offset into card the window currently points at */

 Module parameters */

 2 = do 16-bit transfers, 1 = do 8-bit transfers */

 Speed of memory accesses, in ns */

 Force the size of an SRAM card */

 Force Vpp */

 Set Vpp */

 Force card to be treated as FLASH, ROM or RAM */

/* read/write{8,16} copy_{from,to} routines with window remapping

 * to access whole card

 read/write{8,16} copy_{from,to} routines with direct access */

 first nested 'on' */

 last nested 'off' */

 Shut up, gcc */

 from here on: DEBUG only */

 from here on: DEBUG only */

	/* Request a memory window for PCMCIA. Some architeures can map windows

	 * up to the maximum that PCMCIA can support (64MiB) - this is ideal and

	 * we aim for a window the size of the whole card - otherwise we try

	 * smaller windows until we succeed

 Get write protect status */

		/* Since we are using a default name, make it better by adding

		 * in the size

 <1MiB in size, show size in KiB */

	/* If the memory found is fits completely into the mapped PCMCIA window,

 get_lock(link); */

 free_lock(link); */

 Create new memory card device */

 the following was commented out in pcmcia-cs-3.2.7 */

 PCMCIA_DEVICE_PROD_ID12("RATOC Systems,Inc.", "SmartMedia ADAPTER PC Card", 0xf4a2fefe, 0x5885b2ae), */

 SPDX-License-Identifier: GPL-2.0-only

***************************************************************************/

/*

 *      nettel.c -- mappings for NETtel/SecureEdge/SnapGear (x86) boards.

 *

 *      (C) Copyright 2000-2001, Greg Ungerer (gerg@snapgear.com)

 *      (C) Copyright 2001-2002, SnapGear (www.snapgear.com)

***************************************************************************/

***************************************************************************/

/*

 *	PAR masks and shifts, assuming 64K pages.

 Cache disabled, 64K page */

***************************************************************************/

***************************************************************************/

***************************************************************************/

/*

 *	Set the Intel flash back to read mode since some old boot

 *	loaders don't.

 Make sure all FLASH chips are put back into read mode */

***************************************************************************/

 Set CPU clock to be 33.000MHz */

	/*

	 *	Save the CS settings then ensure ROMCS1 and ROMCS2 are off,

	 *	otherwise they might clash with where we try to map BOOTCS.

	/*

	 *	The first thing to do is determine if we have a separate

	 *	boot FLASH device. Typically this is a small (1 to 2MB)

	 *	AMD FLASH part. It seems that device size is about the

	 *	only way to tell if this is the case...

 The high BIOS partition is only present for 2MB units */

 Don't add the partition until after the primary INTEL's */

		/*

		 *	Map the Intel flash into memory after the AMD

		 *	It has to start on a multiple of maxsize.

 INTEL boot FLASH */

 Kernel base is on ROMCS1, not BOOTCS */

 Destroy useless AMD MTD mapping */

 Only AMD flash supported */

	/*

	 *	We have determined the INTEL FLASH configuration, so lets

	 *	go ahead and probe for them now.

 Set PAR to the maximum size */

 Turn other PAR off so the first probe doesn't find it */

 Probe for the size of the first Intel flash */

 Set PAR to the detected size */

	/*

	 *	Map second Intel FLASH right after first. Set its size to the

	 *	same maxsize used for the first Intel FLASH.

 Delete the old map and probe again to do both chips */

		/*

		 *	Adjust offset and size of last boot partition.

		 *	Must allow for BIOS region at end of FLASH.

 No BIOS regions when AMD boot */

***************************************************************************/

***************************************************************************/

***************************************************************************/

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ck804xrom.c

 *

 * Normal mappings of chips in physical memory

 *

 * Dave Olsen <dolsen@lnxi.com>

 * Ryan Jackson <rjackson@lnxi.com>

/*

 * The following applies to ck804 only:

 * The 2 bits controlling the window size are often set to allow reading

 * the BIOS, but too small to allow writing, since the lock registers are

 * 4MiB lower in the address space than the data.

 *

 * This is intended to prevent flashing the bios, perhaps accidentally.

 *

 * This parameter allows the normal driver to override the BIOS settings.

 *

 * The bits are 6 and 7.  If both bits are set, it is a 5MiB window.

 * If only the 7 Bit is set, it is a 4MiB window.  Otherwise, a

 * 64KiB window.

 *

 * The following applies to mcp55 only:

 * The 15 bits controlling the window size are distributed as follows: 

 * byte @0x88: bit 0..7

 * byte @0x8c: bit 8..15

 * word @0x90: bit 16..30

 * If all bits are enabled, we have a 16? MiB window

 * Please set win_size_bits to 0x7fffffff if you actually want to do something

 Disable writes through the rom window */

 Free all of the mtd devices */

 Remember the pci dev I find the window in */

		/* Enable the selected rom window.  This is often incorrectly

		 * set up by the BIOS, and the 4MiB offset for the lock registers

		 * requires the full 5MiB of window space.

		 *

		 * This 'write, then read' approach leaves the bits for

		 * other uses of the hardware info.

 Assume the rom window is properly setup, and find it's size */

 5MiB */

 4MiB */

 64KiB */

 16MiB, hardcoded for now */

	/*

	 * Try to reserve the window mem region.  If this fails then

	 * it is likely due to a fragment of the window being

	 * "reserved" by the BIOS.  In the case that the

	 * request_mem_region() fails then once the rom size is

	 * discovered we will try to reserve the unreserved fragment.

 Enable writes through the rom window */

 FIXME handle registers 0x80 - 0x8C the bios region locks */

 For write accesses caches are useless */

 Get the first address to look for a rom chip at */

	/* The probe sequence run over the firmware hub lock

	 * registers sets them to 0x7 (no access).

	 * Probe at most the last 4MiB of the address space.

	/* Loop  through and look for rom chips.  Since we don't know the

	 * starting address for each chip, probe every ROM_PROBE_STEP_SIZE

	 * bytes from the starting address of the window.

 Set the name of the map to the address I am trying */

 There is no generic VPP support */

 Skip bankwidths that are not supported */

 Setup the map methods */

 Try all of the probe methods */

 Trim the size if we are larger than the map */

			/*

			 * Registering the MTD device in iomem may not be possible

			 * if there is a BIOS "reserved" and BUSY range.  If this

			 * fails then continue anyway.

 Make the whole region visible in the map */

 Now that the mtd devices is complete claim and export it */

 Calculate the new value of map_top */

 File away the map structure */

 Free any left over map structures */

 See if I have any map structures */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * BIOS Flash chip on Intel 440GX board.

 *

 * Bugs this currently does not work under linuxBIOS.

 Is this really the vpp port? */

 first nested 'on' */

 last nested 'off' */

	/* FIXME verify that this is the

	 * appripriate code for vpp enable/disable

	/* Setup the pm iobase resource

	 * This code should move into some kind of generic bridge

	 * driver but for the moment I'm content with getting the

	 * allocation correct.

 Put the current value in the resource */

 Allocate the resource region */

 Set the iobase */

 Set XBCS# */

 Supply write voltage to the chip */

 Enable the gate on the WE line */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020 BAIKAL ELECTRONICS, JSC

 *

 * Authors:

 *   Serge Semin <Sergey.Semin@baikalelectronics.ru>

 *

 * Baikal-T1 Physically Mapped Internal ROM driver

/*

 * Baikal-T1 SoC ROMs are only accessible by the dword-aligned instructions.

 * We have to take this into account when implementing the data read-methods.

 * Note there is no need in bothering with endianness, since both Baikal-T1

 * CPU and MMIO are LE.

 Read data within offset dword. */

 Read data from the next dword. */

 Make sure we don't go over the map limit. */

	/*

	 * Since requested data size can be pretty big we have to implement

	 * the copy procedure as optimal as possible. That's why it's split

	 * up into the next three stages: unaligned head, aligned body,

	 * unaligned tail.

 It's supposed to be read-only MTD. */

 Multiplatform guard. */

 Sanity check the device parameters retrieved from DTB. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Versatile OF physmap driver add-on

 *

 * Copyright (c) 2016, Linaro Limited

 * Author: Linus Walleij <linus.walleij@linaro.org>

/*

 * Flash protection handling for the Integrator/AP

 The manual says bit 2, the code says bit 3, trust the code */

 Look up the EBI */

 Clear VPP and write protection bits */

 Unlock the EBI */

 Enable write cycles on the EBI, CSR1 (flash) */

 Lock the EBI again */

/*

 * Flash protection handling for the Integrator/CP

/*

 * Flash protection handling for the Versatiles and RealViews

 Not all flash chips use this protection line */

 For first chip probed, look up the syscon regmap */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Out-of-line map I/O functions for simple maps when CONFIG_COMPLEX_MAPPINGS

 * is enabled.

/*

 *  Copyright © 2001 Flaga hf. Medical Devices, Kári Davíðsson <kd@flaga.is>

 *

 *  This program is free software; you can redistribute  it and/or modify it

 *  under  the terms of  the GNU General  Public License as published by the

 *  Free Software Foundation;  either version 2 of the  License, or (at your

 *  option) any later version.

 *

 *  THIS  SOFTWARE  IS PROVIDED   ``AS  IS'' AND   ANY  EXPRESS OR IMPLIED

 *  WARRANTIES,   INCLUDING, BUT NOT  LIMITED  TO, THE IMPLIED WARRANTIES OF

 *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN

 *  NO  EVENT  SHALL   THE AUTHOR  BE    LIABLE FOR ANY   DIRECT, INDIRECT,

 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT

 *  NOT LIMITED   TO, PROCUREMENT OF  SUBSTITUTE GOODS  OR SERVICES; LOSS OF

 *  USE, DATA,  OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON

 *  ANY THEORY OF LIABILITY, WHETHER IN  CONTRACT, STRICT LIABILITY, OR TORT

 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF

 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 *

 *  You should have received a copy of the  GNU General Public License along

 *  with this program; if not, write  to the Free Software Foundation, Inc.,

 *  675 Mass Ave, Cambridge, MA 02139, USA.

/* We split the flash chip up into four parts.

 * 1: bootloader first 128k			(0x00000000 - 0x0001FFFF) size 0x020000

 * 2: kernel 640k					(0x00020000 - 0x000BFFFF) size 0x0A0000

 * 3: compressed 1536k root ramdisk	(0x000C0000 - 0x0023FFFF) size 0x180000

 * 4: writeable diskpartition (jffs)(0x00240000 - 0x003FFFFF) size 0x1C0000

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel IXP4xx OF physmap add-on

 * Copyright (C) 2019 Linus Walleij <linus.walleij@linaro.org>

 *

 * Based on the ixp4xx.c map driver, originally written by:

 * Intel Corporation

 * Deepak Saxena <dsaxena@mvista.com>

 * Copyright (C) 2002 Intel Corporation

 * Copyright (C) 2003-2004 MontaVista Software, Inc.

/*

 * Read/write a 16 bit word from flash address 'addr'.

 *

 * When the cpu is in little-endian mode it swizzles the address lines

 * ('address coherency') so we need to undo the swizzling to ensure commands

 * and the like end up on the correct flash address.

 *

 * To further complicate matters, due to the way the expansion bus controller

 * handles 32 bit reads, the byte stream ABCD is stored on the flash as:

 *     D15    D0

 *     +---+---+

 *     | A | B | 0

 *     +---+---+

 *     | C | D | 2

 *     +---+---+

 * This means that on LE systems each 16 bit word must be swapped. Note that

 * this requires CONFIG_MTD_CFI_BE_BYTE_SWAP to be enabled to 'unswap' the CFI

 * data and other flash commands which are always in D7-D0.

/*

 * The IXP4xx expansion bus only allows 16-bit wide acceses

 * when attached to a 16-bit wide device (such as the 28F128J3A),

 * so we can't just memcpy_fromio().

 Multiplatform guard */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ichxrom.c

 *

 * Normal mappings of chips in physical memory

 64KiB */

 Disable writes through the rom window */

 Free all of the mtd devices */

	/* For now I just handle the ichx and I assume there

	 * are not a lot of resources up at the top of the address

	 * space.  It is possible to handle other devices in the

	 * top 16MB but it is very painful.  Also since

	 * you can only really attach a FWH to an ICHX there

	 * a number of simplifications you can make.

	 *

	 * Also you can page firmware hubs if an 8MB window isn't enough

	 * but don't currently handle that case either.

 Find a region continuous to the end of the ROM window  */

 Enable writes through the rom window */

		/* The BIOS will generate an error if I enable

		 * this device, so don't even try.

	/*

	 * Try to reserve the window mem region.  If this fails then

	 * it is likely due to the window being "reserved" by the BIOS.

 Map the firmware hub into my address space. */

 Get the first address to look for an rom chip at */

	/* The probe sequence run over the firmware hub lock

	 * registers sets them to 0x7 (no access).

	 * Probe at most the last 4M of the address space.

 Loop through and look for rom chips */

 Set the name of the map to the address I am trying */

		/* Firmware hubs only use vpp when being programmed

		 * in a factory setting.  So in-place programming

		 * needs to use a different method.

 Skip bankwidths that are not supported */

 Setup the map methods */

 Try all of the probe methods */

 Trim the size if we are larger than the map */

			/*

			 * Registering the MTD device in iomem may not be possible

			 * if there is a BIOS "reserved" and BUSY range.  If this

			 * fails then continue anyway.

 Make the whole region visible in the map */

 Now that the mtd devices is complete claim and export it */

 Calculate the new value of map_top */

 File away the map structure */

 Free any left over map structures */

 See if I have any map structures */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rbtx4939-flash (based on physmap.c)

 *

 * This is a simplified physmap driver with map_init callback function.

 *

 * Copyright (C) 2009 Atsushi Nemoto <anemo@mba.ocn.ne.jp>

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/drivers/mtd/maps/pci.c

 *

 *  Copyright (C) 2001 Russell King, All rights reserved.

 *

 * Generic PCI memory map driver.  We support the following boards:

 *  - Intel IQ80310 ATU.

 *  - Intel EBSA285 (blank rom programming mode). Tested working 27/09/2001

/*

 * Intel IOP80310 Flash driver

	/*

	 * We want to base the memory window at Xscale

	 * bus address 0, not 0x1000.

	/*

	 * This mundges the flash location so we avoid

	 * the first 80 bytes (they appear to read nonsense).

/*

 * Intel DC21285 driver

		/*

		 * No ROM resource

		/*

		 * We need to re-allocate PCI BAR2 address range to the

		 * PCI ROM BAR, and disable PCI BAR2.

		/*

		 * Hmm, if an address was allocated to the ROM resource, but

		 * not enabled, should we be allocating a new resource for it

		 * or simply enabling it?

	/*

	 * We need to undo the PCI BAR2/PCI ROM BAR address alteration.

/*

 * PCI device ID table

 DC21285 defaults to 0 on reset */

 DC21285 defaults to 0 on reset */

/*

 * Generic code follows.

/*

 * Flash and EPROM on Hitachi Solution Engine and similar boards.

 *

 * (C) 2001 Red Hat, Inc.

 *

 * GPL'd

 First probe at offset 0 */

 Not there. Try swapping */

 Eep. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * amd76xrom.c

 *

 * Normal mappings of chips in physical memory

 64KiB */

/* The 2 bits controlling the window size are often set to allow reading

 * the BIOS, but too small to allow writing, since the lock registers are

 * 4MiB lower in the address space than the data.

 *

 * This is intended to prevent flashing the bios, perhaps accidentally.

 *

 * This parameter allows the normal driver to over-ride the BIOS settings.

 *

 * The bits are 6 and 7.  If both bits are set, it is a 5MiB window.

 * If only the 7 Bit is set, it is a 4MiB window.  Otherwise, a

 * 64KiB window.

 *

 Disable writes through the rom window */

 Free all of the mtd devices */

 Remember the pci dev I find the window in - already have a ref */

	/* Enable the selected rom window.  This is often incorrectly

	 * set up by the BIOS, and the 4MiB offset for the lock registers

	 * requires the full 5MiB of window space.

	 *

	 * This 'write, then read' approach leaves the bits for

	 * other uses of the hardware info.

 Assume the rom window is properly setup, and find it's size */

 5MiB */

 4MiB */

 64KiB */

	/*

	 * Try to reserve the window mem region.  If this fails then

	 * it is likely due to a fragment of the window being

	 * "reserved" by the BIOS.  In the case that the

	 * request_mem_region() fails then once the rom size is

	 * discovered we will try to reserve the unreserved fragment.

 Enable writes through the rom window */

 FIXME handle registers 0x80 - 0x8C the bios region locks */

 For write accesses caches are useless */

 Get the first address to look for an rom chip at */

	/* The probe sequence run over the firmware hub lock

	 * registers sets them to 0x7 (no access).

	 * Probe at most the last 4M of the address space.

 Loop  through and look for rom chips */

 Set the name of the map to the address I am trying */

 There is no generic VPP support */

 Skip bankwidths that are not supported */

 Setup the map methods */

 Try all of the probe methods */

 Trim the size if we are larger than the map */

			/*

			 * Registering the MTD device in iomem may not be possible

			 * if there is a BIOS "reserved" and BUSY range.  If this

			 * fails then continue anyway.

 Make the whole region visible in the map */

 Now that the mtd devices is complete claim and export it */

 Calculate the new value of map_top */

 File away the map structure */

 Free any left over map structures */

 See if I have any map structures */

 amd8111 support */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Normal mappings of chips in physical memory

 *

 * Copyright (C) 2003 MontaVista Software Inc.

 * Author: Jun Sun, jsun@mvista.com or jsun@junsun.net

 *

 * 031022 - [jsun] add run-time configure and partition setup

 *

 * Device tree support:

 *    Copyright (C) 2006 MontaVista Software Inc.

 *    Author: Vitaly Wool <vwool@ru.mvista.com>

 *

 *    Revised to handle newer style flash binding by:

 *    Copyright (C) 2007 David Gibson, IBM Corporation.

 *

 * GPIO address extension:

 *    Handle the case where a flash device is mostly addressed using physical

 *    line and supplemented by GPIOs.  This way you can hook up say a 8MiB flash

 *    to a 2MiB memory range and use the GPIOs to select a particular range.

 *

 *    Copyright © 2000 Nicolas Pitre <nico@cam.org>

 *    Copyright © 2005-2009 Analog Devices Inc.

 first nested 'on' */

 last nested 'off' */

		/*

		 * FIXME: JEDEC chips can't be safely and reliably

		 * probed, although the mtd code gets it right in

		 * practice most of the time.  We should use the

		 * vendor and device ids specified by the binding to

		 * bypass the heuristic probe code, but the mtd layer

		 * provides, at present, no interface for doing so

		 * :(.

 sentinel */ },

		/*

		 * On some platforms (e.g. MPC5200) a direct 1:1 mapping

		 * may cause problems with JFFS2 usage, as the local bus (LPB)

		 * doesn't support unaligned accesses as implemented in the

		 * JFFS2 code via memcpy(). By setting NO_XIP, the

		 * flash will not be exposed directly to the MTD users

		 * (e.g. JFFS2) any more.

 IS_ENABLED(CONFIG_MTD_PHYSMAP_OF) */

 IS_ENABLED(CONFIG_MTD_PHYSMAP_OF) */

		/*

		 * Only use the simple_map implementation if map hooks are not

		 * implemented. Since map->read() is mandatory checking for its

		 * presence is enough.

		/*

		 * We detected multiple devices. Concatenate them together.

 legacy platform drivers can't hotplug or coldplg */

 work with hotplug and coldplug */

***************************************************************************/

/*

 *	uclinux.c -- generic memory mapped MTD driver for uclinux

 *

 *	(C) Copyright 2002, Greg Ungerer (gerg@snapgear.com)

 *

 *      License: GPL

***************************************************************************/

***************************************************************************/

***************************************************************************/

***************************************************************************/

***************************************************************************/

	/*

	 * The filesystem is guaranteed to be in direct mapped memory. It is

	 * directly following the kernels own bss region. Following the same

	 * mechanism used by architectures setting up traditional initrds we

	 * use phys_to_virt to get the virtual address of its start.

***************************************************************************/

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 *  Copyright (C) 2004 Liu Peng Infineon IFAP DC COM CPE

 *  Copyright (C) 2010 John Crispin <john@phrozen.org>

/*

 * The NOR flash is connected to the same external bus unit (EBU) as PCI.

 * To make PCI work we need to enable the endianness swapping for the address

 * written to the EBU. This endianness swapping works for PCI correctly but

 * fails for attached NOR devices. To workaround this we need to use a complex

 * map. The workaround involves swapping all addresses whilst probing the chip.

 * Once probing is complete we stop swapping the addresses but swizzle the

 * unlock addresses to ensure that access to the NOR device works correctly.

/*

 * The following 2 functions copy data between iomem and a cached memory

 * section. As memcpy() makes use of pre-fetching we cannot use it here.

 * The normal alternative of using memcpy_{to,from}io also makes use of

 * memcpy() on MIPS so it is not applicable either. We are therefore stuck

 * with having to use our own loop.

 SPDX-License-Identifier: GPL-2.0-or-later

/* drivers/mtd/maps/plat-ram.c

 *

 * (c) 2004-2005 Simtec Electronics

 *	http://www.simtec.co.uk/products/SWLINUX/

 *	Ben Dooks <ben@simtec.co.uk>

 *

 * Generic platform device based RAM map

 private structure for each mtd platform ram device created */

/* to_platram_info()

 *

 * device private data to struct platram_info conversion

/* platram_setrw

 *

 * call the platform device's set rw/ro control

 *

 * to = 0 => read-only

 *    = 1 => read-write

/* platram_remove

 *

 * called to remove the device from the driver's control

 ensure ram is left read-only */

/* platram_probe

 *

 * called from device drive system when a device matching our

 * driver is found.

 get the resource for the memory mapping */

 setup map parameters */

	/* probe for the right mtd map driver

 fallback to map_ram */

	/* check to see if there are any available partitions, or whether

 add the whole device. */

 device driver info */

 work with hotplug and coldplug */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ts5500_flash.c -- MTD map driver for Technology Systems TS-5500 board

 *

 * Copyright (C) 2004 Sean Young <sean@mess.org>

 *

 * Note:

 * - In order for detection to work, jumper 3 must be set.

 * - Drive A and B use the resident flash disk (RFD) flash translation layer.

 * - If you have created your own jffs file system and the bios overwrites

 *   it during boot, try disabling Drive A: and B: in the boot order.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Flash memory access on SA11x0 based devices

 *

 * (C) 2000 Nicolas Pitre <nico@fluxnic.net>

 first nested 'on' */

 last nested 'off' */

	/*

	 * Retrieve the bankwidth from the MSC registers.

	 * We currently only implement CS0 and CS1 here.

	/*

	 * Now let's probe for the actual flash.  Do it here since

	 * specific machine settings might have been set above.

	/*

	 * Count number of devices.

	/*

	 * Allocate the map_info structs in one go.

	/*

	 * Claim and then map the memory regions.

	/*

	 * ENXIO is special.  It means we didn't find a chip when we probed.

	/*

	 * If we found one device, don't bother with concat support.  If

	 * we found multiple devices, use concat if we have it available,

	 * otherwise fail.  Either way, it'll be called "sa1100".

		/*

		 * We detected multiple devices.  Concatenate them together.

	/*

	 * Partition selection stuff.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/mtd/maps/ixp4xx.c

 *

 * MTD Map file for IXP4XX based systems. Please do not make per-board

 * changes in here. If your board needs special setup, do it in your

 * platform level code in arch/arm/mach-ixp4xx/board-setup.c

 *

 * Original Author: Intel Corporation

 * Maintainer: Deepak Saxena <dsaxena@mvista.com>

 *

 * Copyright (C) 2002 Intel Corporation

 * Copyright (C) 2003-2004 MontaVista Software, Inc.

 *

/*

 * Read/write a 16 bit word from flash address 'addr'.

 *

 * When the cpu is in little-endian mode it swizzles the address lines

 * ('address coherency') so we need to undo the swizzling to ensure commands

 * and the like end up on the correct flash address.

 *

 * To further complicate matters, due to the way the expansion bus controller

 * handles 32 bit reads, the byte stream ABCD is stored on the flash as:

 *     D15    D0

 *     +---+---+

 *     | A | B | 0

 *     +---+---+

 *     | C | D | 2

 *     +---+---+

 * This means that on LE systems each 16 bit word must be swapped. Note that

 * this requires CONFIG_MTD_CFI_BE_BYTE_SWAP to be enabled to 'unswap' the CFI

 * data and other flash commands which are always in D7-D0.

/*

 * The IXP4xx expansion bus only allows 16-bit wide acceses

 * when attached to a 16-bit wide device (such as the 28F128J3A),

 * so we can't just memcpy_fromio().

/*

 * Unaligned writes are ignored, causing the 8-bit

 * probe to fail and proceed to the 16-bit probe (which succeeds).

/*

 * Fast write16 function without the probing check above

	/*

	 * Tell the MTD layer we're not 1:1 mapped so that it does

	 * not attempt to do a direct access on us.

	/*

	 * We only support 16-bit accesses for now. If and when

	 * any board use 8-bit access, we'll fixup the driver to

	 * handle that.

 Use the fast version */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * esb2rom.c

 *

 * Normal mappings of flash chips in physical memory

 * through the Intel ESB2 Southbridge.

 *

 * This was derived from ichxrom.c in May 2006 by

 *	Lew Glendenning <lglendenning@lnxi.com>

 *

 * Eric Biederman, of course, was a major help in this effort.

 64KiB */

 This became a 16-bit register, and EN2 has disappeared */

 reserved  0x0020 and 0x0010 */

 these are 32-bit values */

 Disable writes through the rom window */

 Free all of the mtd devices */

	/* For now I just handle the ecb2 and I assume there

	 * are not a lot of resources up at the top of the address

	 * space.  It is possible to handle other devices in the

	 * top 16MiB but it is very painful.  Also since

	 * you can only really attach a FWH to an ICHX there

	 * a number of simplifications you can make.

	 *

	 * Also you can page firmware hubs if an 8MiB window isn't enough

	 * but don't currently handle that case either.

 RLG:  experiment 2.  Force the window registers to the widest values */

/*

	pci_read_config_word(pdev, FWH_DEC_EN1, &word);

	printk(KERN_DEBUG "Original FWH_DEC_EN1 : %x\n", word);

	pci_write_config_byte(pdev, FWH_DEC_EN1, 0xff);

	pci_read_config_byte(pdev, FWH_DEC_EN1, &byte);

	printk(KERN_DEBUG "New FWH_DEC_EN1 : %x\n", byte);



	pci_read_config_byte(pdev, FWH_DEC_EN2, &byte);

	printk(KERN_DEBUG "Original FWH_DEC_EN2 : %x\n", byte);

	pci_write_config_byte(pdev, FWH_DEC_EN2, 0x0f);

	pci_read_config_byte(pdev, FWH_DEC_EN2, &byte);

	printk(KERN_DEBUG "New FWH_DEC_EN2 : %x\n", byte);

 Find a region continuous to the end of the ROM window  */

 reserved  0x0020 and 0x0010 */

 Enable writes through the rom window */

		/* The BIOS will generate an error if I enable

		 * this device, so don't even try.

	/*

	 * Try to reserve the window mem region.  If this fails then

	 * it is likely due to the window being "reserved" by the BIOS.

 Map the firmware hub into my address space. */

 Get the first address to look for an rom chip at */

 if not aligned on 4MiB, look 4MiB lower in address space */

	/* The probe sequence run over the firmware hub lock

	 * registers sets them to 0x7 (no access).

	 * (Insane hardware design, but most copied Intel's.)

	 * ==> Probe at most the last 4M of the address space.

 Loop through and look for rom chips */

 Set the name of the map to the address I am trying */

		/* Firmware hubs only use vpp when being programmed

		 * in a factory setting.  So in-place programming

		 * needs to use a different method.

 Skip bankwidths that are not supported */

 Setup the map methods */

 Try all of the probe methods */

 Trim the size if we are larger than the map */

			/*

			 * Registering the MTD device in iomem may not be possible

			 * if there is a BIOS "reserved" and BUSY range.  If this

			 * fails then continue anyway.

 Make the whole region visible in the map */

 Now that the mtd devices is complete claim and export it */

 Calculate the new value of map_top */

 File away the map structure */

 Free any left over map structures */

 See if I have any map structures */

 SPDX-License-Identifier: GPL-2.0

/*

 * Cortina Systems Gemini OF physmap add-on

 * Copyright (C) 2017 Linus Walleij <linus.walleij@linaro.org>

 *

 * This SoC has an elaborate flash control register, so we need to

 * detect and set it up when booting on this platform.

/*

 * The Flash-relevant parts of the global status register

 * These would also be relevant for a NAND driver.

 if parallel */

 else 8 bit */

 if serial */

 else STM */

 and more */

 and more */

 and less */

 and more */

 and less */

 else low pin cnt */

 Static local state */

 Multiplatform guard */

	/*

	 * It would be contradictory if a physmap flash was NOT parallel.

	/*

	 * Complain if DT data and hardware definition is different.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Map driver for Intel XScale PXA2xx platforms.

 *

 * Author:	Nicolas Pitre

 * Copyright:	(C) 2001 MontaVista Software Inc.

 invalidate D cache line */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Handle mapping of the NOR flash on implementa A7 boards

 *

 * Copyright 2002 SYSGO Real-Time Solutions GmbH

 physical properties of flash */

 physical properties of flash */

 prefix for our printk()'s */

 for mtdparts= partitioning */

/*

 * MTD partitioning stuff

 SPDX-License-Identifier: GPL-2.0-or-later

/* netsc520.c -- MTD map driver for AMD NetSc520 Demonstration Board

 *

 * Copyright (C) 2001 Mark Langsdorf (mark.langsdorf@amd.com)

 *	based on sc520cdp.c by Sysgo Real-Time Solutions GmbH

 *

 * The NetSc520 is a demonstration board for the Elan Sc520 processor available

 * from AMD.  It has a single back of 16 megs of 32-bit Flash ROM and another

 * 16 megs of SDRAM.

/*

** The single, 16 megabyte flash bank is divided into four virtual

** partitions.  The first partition is 768 KiB and is intended to

** store the kernel image loaded by the bootstrap loader.  The second

** partition is 256 KiB and holds the BIOS image.  The third

** partition is 14.5 MiB and is intended for the flash file system

** image.  The last partition is 512 KiB and contains another copy

** of the BIOS image and the reset vector.

**

** Only the third partition should be mounted.  The first partition

** should not be mounted, but it can erased and written to using the

** MTD character routines.  The second and fourth partitions should

** not be touched - it is possible to corrupt the BIOS image by

** mounting these partitions, and potentially the board will not be

** recoverable afterwards.

/* partition_info gives details on the logical partitions that the split the

 * single flash device into. If the size if zero we use up to the end of the

 SPDX-License-Identifier: GPL-2.0-only

/* sun_uflash.c - Driver for user-programmable flash on

 *                Sun Microsystems SME boardsets.

 *

 * This driver does NOT provide access to the OBP-flash for

 * safety reasons-- use <linux>/drivers/sbus/char/flash.c instead.

 *

 * Copyright (c) 2001 Eric Brower (ebrower@usa.net)

 EBus is 8-bit */

 device name */

 mtd map info */

 mtd info */

		/* Non-CFI userflash device-- once I find one we

		 * can work on supporting it.

 copy defaults and tweak parameters */

 MTD registration */

	/* Flashprom must have the "user" property in order to

	 * be used by this driver.

 SPDX-License-Identifier: GPL-2.0-or-later

/* sbc_gxx.c -- MTD map driver for Arcom Control Systems SBC-MediaGX,

                SBC-GXm and SBC-GX1 series boards.



   Copyright (C) 2001 Arcom Control System Ltd





The SBC-MediaGX / SBC-GXx has up to 16 MiB of

Intel StrataFlash (28F320/28F640) in x8 mode.



This driver uses the CFI probe and Intel Extended Command Set drivers.



The flash is accessed as follows:



   16 KiB memory window at 0xdc000-0xdffff



   Two IO address locations for paging



   0x258

       bit 0-7: address bit 14-21

   0x259

       bit 0-1: address bit 22-23

       bit 7:   0 - reset/powered down

                1 - device enabled



The single flash device is divided into 3 partition which appear as

separate MTD devices.



25/04/2001 AJL (Arcom)  Modified signon strings and partition sizes

                        (to support bzImages up to 638KiB-ish)

 Includes

 Defines

 - Hardware specific

 Number of bits in offset. */

 The bits for the offset into the window. */

 bit 7 of 0x259 must be 1 to enable device. */

 - Flash / Partition sizing

 Globals

 Current page in window.

/* partition_info gives details on the logical partitions that the split the

 * single flash device into. If the size if zero we use up to the end of the

	.size = MAX_SIZE_KiB*1024, /* this must be set to a maximum possible amount

			 of flash so the cfi probe routines find all

 MTD device for all of the flash. */

 Probe for chip. */

 Create MTD devices for each partition. */

 SPDX-License-Identifier: GPL-2.0

/*

 * tsunami_flash.c

 *

 * flash chip on alpha ds10...

/*

 * Deliberately don't provide operations wider than 8 bits.  I don't

 * have then and it scares me to think how you could mess up if

 * you tried to use them.   Buswidth is correctly so I'm safe.

 SPDX-License-Identifier: GPL-2.0-only

/* linux/drivers/mtd/maps/scx200_docflash.c



   Copyright (c) 2001,2002 Christer Weinigel <wingel@nano-system.com>



   National Semiconductor SCx200 flash mapped with DOCCS

 Don't autoprobe */

 16 MiB the whole ISA address space */

 Default to 8 bits wide */

 calculate from flash size */

 calculate from flash size */

 check that we have found the configuration block */

 Try to use the present flash mapping if any */

 SPDX-License-Identifier: GPL-2.0-only

/* vmu-flash.c

 * Driver for SEGA Dreamcast Visual Memory Unit

 *

 * Copyright (c) Adrian McMenamin 2002 - 2009

 * Copyright (c) Paul Mundt 2001

 Cache */

 Which block was cached */

 When was it cached? */

 block number */

 block offset */

 Maple bus callback function for reads */

 copy the read in data */

/* Interface with maple bus to read blocks

 * caching the results so that other parts

 prepare the cache for this block */

	/*

	* Reads may be phased - again the hardware spec

	* supports this - though may not be any devices in

	* the wild that implement it, but we will here

 Very long timeouts seem to be needed when box is stressed */

		/*

		* MTD layer does not handle hotplugging well

		* so have to return errors when VMU is unplugged

		* in the middle of a read (busy == 2)

 communicate with maple bus for phased writing */

		/* wait until the device is not busy doing something else

 mtd function to simulate reading byte by byte */

 mtd higher order function to read flash */

 Have we cached this bit already? */

 Have we cached this and is the cache valid and timely? */

 we have cached it, so do necessary copying */

 only a bit of this block to copy */

 otherwise copy remainder of whole block */

			/*

			* Not cached so read one byte -

			* but cache the rest of the block

 Read in the block we are to write to */

 write out new buffer */

 invalidate the cache */

 Do nothing here */

 Maple bus callback function to recursively query hardware details */

	/*

	* Set up a recursive call to the (probably theoretical)

	* second or more partition

 Handles very basic info about the flash, queries for details */

	/* Need to count how many bits are set - to find out which

	 * function_data element has details of the memory card

	/*

	* Not sure there are actually any multi-partition devices in the

	* real world, but the hardware supports them, so, so will we

	/*

	* We want to trap meminfo not get cond

	* so set interval to zero, but rely on maple bus

	* driver to pass back the results of the meminfo

 Make sure we are clear to go */

	/*

	* Set up the minfo call: vmu_queryblocks will handle

	* the information passed back

/* Callback to handle eccentricities of both mtd subsystem

 * and general flakyness of Dreamcast VMUs

 SPDX-License-Identifier: GPL-2.0-only

/*

 * MTD map driver for BIOS Flash on Intel SCB2 boards

 * Copyright (C) 2002 Sun Microsystems, Inc.

 * Tim Hockin <thockin@sun.com>

 *

 * A few notes on this MTD map:

 *

 * This was developed with a small number of SCB2 boards to test on.

 * Hopefully, Intel has not introducted too many unaccounted variables in the

 * making of this board.

 *

 * The BIOS marks its own memory region as 'reserved' in the e820 map.  We

 * try to request it here, but if it fails, we carry on anyway.

 *

 * This is how the chip is attached, so said the schematic:

 * * a 4 MiB (32 Mib) 16 bit chip

 * * a 1 MiB memory region

 * * A20 and A21 pulled up

 * * D8-D15 ignored

 * What this means is that, while we are addressing bytes linearly, we are

 * really addressing words, and discarding the other byte.  This means that

 * the chip MUST BE at least 2 MiB.  This also means that every block is

 * actually half as big as the chip reports.  It also means that accesses of

 * logical address 0 hit higher-address sections of the chip, not physical 0.

 * One can only hope that these 4MiB x16 chips were a lot cheaper than 1MiB x8

 * chips.

 *

 * This driver assumes the chip is not write-protected by an external signal.

 * As of the this writing, that is true, but may change, just to spite me.

 *

 * The actual BIOS layout has been mostly reverse engineered.  Intel BIOS

 * updates for this board include 10 related (*.bio - &.bi9) binary files and

 * another separate (*.bbo) binary file.  The 10 files are 64k of data + a

 * small header.  If the headers are stripped off, the 10 64k files can be

 * concatenated into a 640k image.  This is your BIOS image, proper.  The

 * separate .bbo file also has a small header.  It is the 'Boot Block'

 * recovery BIOS.  Once the header is stripped, no further prep is needed.

 * As best I can tell, the BIOS is arranged as such:

 * offset 0x00000 to 0x4ffff (320k):  unknown - SCSI BIOS, etc?

 * offset 0x50000 to 0xeffff (640k):  BIOS proper

 * offset 0xf0000 ty 0xfffff (64k):   Boot Block region

 *

 * Intel's BIOS update program flashes the BIOS and Boot Block in separate

 * steps.  Probably a wise thing to do.

 barf if this doesn't look right */

 I wasn't here. I didn't see. dwmw2. */

 the chip is sometimes bigger than the map - what a waste */

	/*

	 * We only REALLY get half the chip, due to the way it is

	 * wired up - D8-D15 are tossed away.  We read linear bytes,

	 * but in reality we are getting 1/2 of each 16-bit read,

	 * which LOOKS linear to us.  Because CFI code accounts for

	 * things like lock/unlock/erase by eraseregions, we need to

	 * fudge them to reflect this.  Erases go like this:

	 *   * send an erase to an address

	 *   * the chip samples the address and erases the block

	 *   * add the block erasesize to the address and repeat

	 *   -- the problem is that addresses are 16-bit addressable

	 *   -- we end up erasing every-other block

	/*

	 * If the chip is bigger than the map, it is wired with the high

	 * address lines pulled up.  This makes us access the top portion of

	 * the chip, so all our erase-region info is wrong.  Start cutting from

	 * the bottom.

 CSB5's 'Function Control Register' has bits for decoding @ >= 0xffc00000 */

 enable decoding of the flash region in the south bridge */

		/*

		 * The BIOS seems to mark the flash region as 'reserved'

		 * in the e820 map.  Warn and go about our business.

 remap the IO window (w/o caching) */

 try to find a chip */

 disable flash writes */

/*

 * MTD map driver for flash on the DC21285 (the StrongARM-110 companion chip)

 *

 * (C) 2000  Nicolas Pitre <nico@fluxnic.net>

 *

 * This code is GPL

/*

 * This is really ugly, but it seams to be the only

 * realiable way to do it, as the cpld state machine

 * is unpredictible. So we have a 25us penalty per

 * write access.

	/*

	 * we want to write a bit pattern XXX1 to Xilinx to enable

	 * the write gate, which will be open for about the next 2ms.

	/*

	 * let the ISA bus to catch on...

 Partition stuff */

 Determine bankwidth */

 Let's map the flash area */

		/*

		 * Flash timing is determined with bits 19-16 of the

		 * CSR_SA110_CNTL.  The value is the number of wait cycles, or

		 * 0 for 16 cycles (the default).  Cycles are 20 ns.

		 * Here we use 7 for 140 ns flash chips.

 access time */

 burst time */

 tristate time */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PISMO memory driver - http://www.pismoworld.org/

 *

 * For ARM Realview and Versatile platforms

	/*

	 * FIXME: may need to the platforms memory controller here, but at

	 * the moment we assume that it has already been correctly setup.

	 * The memory controller can also tell us the base address as well.

 static DOC */

 static NOR */

 static RAM */

 SPDX-License-Identifier: GPL-2.0-or-later

/* sc520cdp.c -- MTD map driver for AMD SC520 Customer Development Platform

 *

 * Copyright (C) 2001 Sysgo Real-Time Solutions GmbH

 *

 * The SC520CDP is an evaluation board for the Elan SC520 processor available

 * from AMD. It has two banks of 32-bit Flash ROM, each 8 Megabytes in size,

 * and up to 512 KiB of 8-bit DIL Flash ROM.

 * For details see https://www.amd.com/products/epd/desiging/evalboards/18.elansc520/520_cdp_brief/index.html

/*

** The Embedded Systems BIOS decodes the first FLASH starting at

** 0x8400000. This is a *terrible* place for it because accessing

** the flash at this location causes the A22 address line to be high

** (that's what 0x8400000 binary's ought to be). But this is the highest

** order address line on the raw flash devices themselves!!

** This causes the top HALF of the flash to be accessed first. Beyond

** the physical limits of the flash, the flash chip aliases over (to

** 0x880000 which causes the bottom half to be accessed. This splits the

** flash into two and inverts it! If you then try to access this from another

** program that does NOT do this insanity, then you *will* access the

** first half of the flash, but not find what you expect there. That

** stuff is in the *second* half! Similarly, the address used by the

** BIOS for the second FLASH bank is also quite a bad choice.

** If REPROGRAM_PAR is defined below (the default), then this driver will

** choose more useful addresses for the FLASH banks by reprogramming the

** responsible PARxx registers in the SC520's MMCR region. This will

** cause the settings to be incompatible with the BIOS's settings, which

** shouldn't be a problem since you are running Linux, (i.e. the BIOS is

** not much use anyway). However, if you need to be compatible with

** the BIOS for some reason, just undefine REPROGRAM_PAR.

 These are the addresses we want.. */

 .. and these are the addresses the BIOS gives us */

/*

** The SC520 MMCR (memory mapped control register) region resides

** at 0xFFFEF000. The 16 Programmable Address Region (PAR) registers

** are at offset 0x88 in the MMCR:

 total number of PAR registers */

/*

** The highest three bits in a PAR register determine what target

** device is controlled by this PAR. Here, only ROMCS? and BOOTCS

** devices are of interest.

/*

** Bits 28 thru 26 determine some attributes for the

** region controlled by the PAR. (We only use non-cacheable)

 write protected       */

 non-cacheable         */

 code execution denied */

/*

** Bit 25 determines the granularity: 4K or 64K

/*

** Build a value to be written into a PAR register.

** We only need ROM entries, 64K page size:

 Flash Bank #0: selected by ROMCS0 */

 Flash Bank #1: selected by ROMCS1 */

 DIL (BIOS) Flash: selected by BOOTCS */

 map in SC520's MMCR area */

 ioremap failed: skip the PAR reprogramming */

 force physical address fields to BIOS defaults: */

	/*

	** Find the PARxx registers that are responsible for activating

	** ROMCS0, ROMCS1 and BOOTCS. Reprogram each of these with a

	** new value from the table.

 for each par_table entry  */

 for each PAR register     */

 if target device field matches, reprogram the PAR */

 no matching PAR found: try default BIOS address */

 reprogram PAR registers so flash appears at the desired addresses */

 Combine the two flash banks into a single MTD device & register it: */

 register the third (DIL-Flash) device */

/*

 * drivers/mtd/maps/intel_vr_nor.c

 *

 * An MTD map driver for a NOR flash bank on the Expansion Bus of the Intel

 * Vermilion Range chipset.

 *

 * The Vermilion Range Expansion Bus supports four chip selects, each of which

 * has 64MiB of address space.  The 2nd BAR of the Expansion Bus PCI Device

 * is a 256MiB memory region containing the address spaces for all four of the

 * chip selects, with start addresses hardcoded on 64MiB boundaries.

 *

 * This map driver only supports NOR flash on chip select 0.  The buswidth

 * (either 8 bits or 16 bits) is determined by reading the Expansion Bus Timing

 * and Control Register for Chip Select 0 (EXP_TIMING_CS0).  This driver does

 * not modify the value in the EXP_TIMING_CS0 register except to enable writing

 * and disable boot acceleration.  The timing parameters in the register are

 * assumed to have been properly initialized by the BIOS.  The reset default

 * timing parameters are maximally conservative (slow), so access to the flash

 * will be slower than it should be if the BIOS has not initialized the timing

 * parameters.

 *

 * Author: Andy Lowe <alowe@mvista.com>

 *

 * 2006 (c) MontaVista Software, Inc. This file is licensed under

 * the terms of the GNU General Public License version 2. This program

 * is licensed "as is" without any warranty of any kind, whether express

 * or implied.

 Expansion Bus Configuration and Status Registers are in BAR 0 */

 Expansion Bus Memory Window is BAR 1 */

 Maximum address space for Chip Select 0 is 64MiB */

 Chip Select 0 is at offset 0 in the Memory Window */

 Chip Select 0 Timing Register is at offset 0 in CSR */

 Chip Select Enable */

 Boot Acceleration Disable */

 Write Enable */

 8-bit vs 16-bit bus */

 register the flash bank */

 partition the flash bank */

 write-protect the flash bank */

 unmap the flash window */

 unmap the csr window */

/*

 * Initialize the map_info structure and map the flash.

 * Returns 0 on success, nonzero otherwise.

 Enable writes to flash bank */

 write-protect the flash bank */

 unmap the flash window */

 unmap the csr window */

 SPDX-License-Identifier: GPL-2.0

/*

 * SPI NOR Software Write Protection logic.

 *

 * Copyright (C) 2005, Intec Automation Inc.

 * Copyright (C) 2014, Freescale Semiconductor, Inc.

 Reserved one for "protect none" and one for "protect all". */

 No protection */

/*

 * Return true if the entire region is locked (if @locked is true) or unlocked

 * (if @locked is false); false otherwise.

 Requested range is a sub-range of locked range */

 Requested range does not overlap with locked range */

/*

 * Lock a region of the flash. Compatible with ST Micro and similar flash.

 * Supports the block protection bits BP{0,1,2}/BP{0,1,2,3} in the status

 * register

 * (SR). Does not support these features found in newer SR bitfields:

 *   - SEC: sector/block protect - only handle SEC=0 (block protect)

 *   - CMP: complement protect - only support CMP=0 (range is not complemented)

 *

 * Support for the following is provided conditionally for some flash:

 *   - TB: top/bottom protect

 *

 * Sample table portion for 8MB flash (Winbond w25q64fw):

 *

 *   SEC  |  TB   |  BP2  |  BP1  |  BP0  |  Prot Length  | Protected Portion

 *  --------------------------------------------------------------------------

 *    X   |   X   |   0   |   0   |   0   |  NONE         | NONE

 *    0   |   0   |   0   |   0   |   1   |  128 KB       | Upper 1/64

 *    0   |   0   |   0   |   1   |   0   |  256 KB       | Upper 1/32

 *    0   |   0   |   0   |   1   |   1   |  512 KB       | Upper 1/16

 *    0   |   0   |   1   |   0   |   0   |  1 MB         | Upper 1/8

 *    0   |   0   |   1   |   0   |   1   |  2 MB         | Upper 1/4

 *    0   |   0   |   1   |   1   |   0   |  4 MB         | Upper 1/2

 *    X   |   X   |   1   |   1   |   1   |  8 MB         | ALL

 *  ------|-------|-------|-------|-------|---------------|-------------------

 *    0   |   1   |   0   |   0   |   1   |  128 KB       | Lower 1/64

 *    0   |   1   |   0   |   1   |   0   |  256 KB       | Lower 1/32

 *    0   |   1   |   0   |   1   |   1   |  512 KB       | Lower 1/16

 *    0   |   1   |   1   |   0   |   0   |  1 MB         | Lower 1/8

 *    0   |   1   |   1   |   0   |   1   |  2 MB         | Lower 1/4

 *    0   |   1   |   1   |   1   |   0   |  4 MB         | Lower 1/2

 *

 * Returns negative on errors, 0 on success.

 If nothing in our range is unlocked, we don't need to do anything */

 If anything below us is unlocked, we can't use 'bottom' protection */

 If anything above us is unlocked, we can't use 'top' protection */

 Prefer top, if both are valid */

 lock_len: length of region that should end up locked */

 Don't "lock" with no region! */

 Disallow further writes if WP pin is asserted */

 Don't bother if they're the same */

 Only modify protection if it will not unlock other areas */

/*

 * Unlock a region of the flash. See spi_nor_sr_lock() for more info

 *

 * Returns negative on errors, 0 on success.

 If nothing in our range is locked, we don't need to do anything */

 If anything below us is locked, we can't use 'top' protection */

 If anything above us is locked, we can't use 'bottom' protection */

 Prefer top, if both are valid */

 lock_len: length of region that should remain locked */

 fully unlocked */

 Some power-of-two sizes are not supported */

 Don't protect status register if we're fully unlocked */

 Don't bother if they're the same */

 Only modify protection if it will not lock other areas */

/*

 * Check if a region of the flash is (completely) locked. See spi_nor_sr_lock()

 * for more info.

 *

 * Returns 1 if entire region is locked, 0 if any portion is unlocked, and

 * negative on errors.

/**

 * spi_nor_try_unlock_all() - Tries to unlock the entire flash memory array.

 * @nor:	pointer to a 'struct spi_nor'.

 *

 * Some SPI NOR flashes are write protected by default after a power-on reset

 * cycle, in order to avoid inadvertent writes during power-up. Backward

 * compatibility imposes to unlock the entire flash memory array at power-up

 * by default.

 *

 * Unprotecting the entire flash array will fail for boards which are hardware

 * write-protected. Thus any errors are ignored.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2005, Intec Automation Inc.

 * Copyright (C) 2014, Freescale Semiconductor, Inc.

	/*

	 * W25Q256JV supports 4B opcodes but W25Q256FV does not.

	 * Unfortunately, Winbond has re-used the same JEDEC ID for both

	 * variants which prevents us from defining a new entry in the parts

	 * table.

	 * To differentiate between W25Q256JV and W25Q256FV check SFDP header

	 * version: only JV has JESD216A compliant structure (version 5).

 Winbond -- w25x "blocks" are 64K, "sectors" are 4KiB */

/**

 * winbond_set_4byte_addr_mode() - Set 4-byte address mode for Winbond flashes.

 * @nor:	pointer to 'struct spi_nor'.

 * @enable:	true to enter the 4-byte address mode, false to exit the 4-byte

 *		address mode.

 *

 * Return: 0 on success, -errno otherwise.

	/*

	 * On Winbond W25Q256FV, leaving 4byte mode causes the Extended Address

	 * Register to be set to 1, so all 3-byte-address reads come from the

	 * second 16M. We must clear the register to enable normal behavior.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2005, Intec Automation Inc.

 * Copyright (C) 2014, Freescale Semiconductor, Inc.

 XMC (Wuhan Xinxin Semiconductor Manufacturing Corp.) */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2005, Intec Automation Inc.

 * Copyright (C) 2014, Freescale Semiconductor, Inc.

 We only support unlocking the entire flash array. */

 SST -- large erase sizes are "overlays", "sectors" are 4K */

 Start write from odd address. */

 write one byte. */

 Write out most of the data here. */

 write two bytes. */

 Write out trailing byte if it exists. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2005, Intec Automation Inc.

 * Copyright (C) 2014, Freescale Semiconductor, Inc.

 EON -- en25xxx */

 SPDX-License-Identifier: GPL-2.0

/*

 * OTP support for SPI NOR flashes

 *

 * Copyright (C) 2021 Michael Walle <michael@walle.cc>

/**

 * spi_nor_otp_read_secr() - read security register

 * @nor:	pointer to 'struct spi_nor'

 * @addr:       offset to read from

 * @len:        number of bytes to read

 * @buf:        pointer to dst buffer

 *

 * Read a security register by using the SPINOR_OP_RSECR commands.

 *

 * In Winbond/GigaDevice datasheets the term "security register" stands for

 * an one-time-programmable memory area, consisting of multiple bytes (usually

 * 256). Thus one "security register" maps to one OTP region.

 *

 * This method is used on GigaDevice and Winbond flashes.

 *

 * Please note, the read must not span multiple registers.

 *

 * Return: number of bytes read successfully, -errno otherwise

/**

 * spi_nor_otp_write_secr() - write security register

 * @nor:        pointer to 'struct spi_nor'

 * @addr:       offset to write to

 * @len:        number of bytes to write

 * @buf:        pointer to src buffer

 *

 * Write a security register by using the SPINOR_OP_PSECR commands.

 *

 * For more information on the term "security register", see the documentation

 * of spi_nor_otp_read_secr().

 *

 * This method is used on GigaDevice and Winbond flashes.

 *

 * Please note, the write must not span multiple registers.

 *

 * Return: number of bytes written successfully, -errno otherwise

	/*

	 * We only support a write to one single page. For now all winbond

	 * flashes only have one page per security register.

/**

 * spi_nor_otp_erase_secr() - erase a security register

 * @nor:        pointer to 'struct spi_nor'

 * @addr:       offset of the security register to be erased

 *

 * Erase a security register by using the SPINOR_OP_ESECR command.

 *

 * For more information on the term "security register", see the documentation

 * of spi_nor_otp_read_secr().

 *

 * This method is used on GigaDevice and Winbond flashes.

 *

 * Return: 0 on success, -errno otherwise

/**

 * spi_nor_otp_lock_sr2() - lock the OTP region

 * @nor:        pointer to 'struct spi_nor'

 * @region:     OTP region

 *

 * Lock the OTP region by writing the status register-2. This method is used on

 * GigaDevice and Winbond flashes.

 *

 * Return: 0 on success, -errno otherwise.

 no need to write the register if region is already locked */

/**

 * spi_nor_otp_is_locked_sr2() - get the OTP region lock status

 * @nor:        pointer to 'struct spi_nor'

 * @region:     OTP region

 *

 * Retrieve the OTP region lock bit by reading the status register-2. This

 * method is used on GigaDevice and Winbond flashes.

 *

 * Return: 0 on success, -errno otherwise.

 Translate the file offsets from and to OTP regions. */

	/*

	 * If any of the affected OTP regions are locked the entire range is

	 * considered locked.

 take the branch it is locked or in case of an error */

 don't access beyond the end */

		/*

		 * The OTP regions are mapped into a contiguous area starting

		 * at 0 as expected by the MTD layer. This will map the MTD

		 * file offsets to the address of an OTP region as used in the

		 * actual SPI commands.

		/*

		 * The size of a OTP region is expected to be a power of two,

		 * thus we can just mask the lower bits and get the offset into

		 * a region.

 don't access beyond one OTP region */

 OTP erase is optional */

 the user has to explicitly ask for whole regions */

 the user has to explicitly ask for whole regions */

	/*

	 * We only support user_prot callbacks (yet).

	 *

	 * Some SPI NOR flashes like Macronix ones can be ordered in two

	 * different variants. One with a factory locked OTP area and one where

	 * it is left to the user to write to it. The factory locked OTP is

	 * usually preprogrammed with an "electrical serial number". We don't

	 * support these for now.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2005, Intec Automation Inc.

 * Copyright (C) 2014, Freescale Semiconductor, Inc.

 Fujitsu */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2005, Intec Automation Inc.

 * Copyright (C) 2014, Freescale Semiconductor, Inc.

	/*

	 * Some manufacturer like GigaDevice may use different

	 * bit to set QE on different memories, so the MFR can't

	 * indicate the quad_enable method for this case, we need

	 * to set it in the default_init fixup hook.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2005, Intec Automation Inc.

 * Copyright (C) 2014, Freescale Semiconductor, Inc.

 ESMT */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2005, Intec Automation Inc.

 * Copyright (C) 2014, Freescale Semiconductor, Inc.

 Xilinx S3AN Internal Flash */

/*

 * This code converts an address to the Default Address Mode, that has non

 * power of two page sizes. We must support this mode because it is the default

 * mode supported by Xilinx tools, it can access the whole flash area and

 * changing over to the Power-of-two mode is irreversible and corrupts the

 * original data.

 * Addr can safely be unsigned int, the biggest S3AN device is smaller than

 * 4 MiB.

	/*

	 * This flashes have a page size of 264 or 528 bytes (known as

	 * Default addressing mode). It can be changed to a more standard

	 * Power of two mode where the page size is 256/512. This comes

	 * with a price: there is 3% less of space, the data is corrupted

	 * and the page size cannot be changed back to default addressing

	 * mode.

	 *

	 * The current addressing mode can be read from the XRDSR register

	 * and should not be changed, because is a destructive operation.

 Flash in Power of 2 mode */

 Flash in Default addressing mode */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2005, Intec Automation Inc.

 * Copyright (C) 2014, Freescale Semiconductor, Inc.

 Everspin */

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0

/*

 * Based on m25p80.c, by Mike Lavender (mike@steroidmicros.com), with

 * influence from lart.c (Abraham Van Der Merwe) and mtd_dataflash.c

 *

 * Copyright (C) 2005, Intec Automation Inc.

 * Copyright (C) 2014, Freescale Semiconductor, Inc.

 Define max times to check status register before we give up. */

/*

 * For everything but full-chip erase; probably could be much smaller, but kept

 * around for safety for now

/*

 * For full-chip erase, calibrated to a 2MB flash (M25P16); should be scaled up

 * for larger flash

/**

 * spi_nor_get_cmd_ext() - Get the command opcode extension based on the

 *			   extension type.

 * @nor:		pointer to a 'struct spi_nor'

 * @op:			pointer to the 'struct spi_mem_op' whose properties

 *			need to be initialized.

 *

 * Right now, only "repeat" and "invert" are supported.

 *

 * Return: The opcode extension.

/**

 * spi_nor_spimem_setup_op() - Set up common properties of a spi-mem op.

 * @nor:		pointer to a 'struct spi_nor'

 * @op:			pointer to the 'struct spi_mem_op' whose properties

 *			need to be initialized.

 * @proto:		the protocol from which the properties need to be set.

		/*

		 * SPIMEM supports mixed DTR modes, but right now we can only

		 * have all phases either DTR or STR. IOW, SPIMEM can have

		 * something like 4S-4D-4D, but SPI NOR can't. So, set all 4

		 * phases to either DTR or STR.

 2 bytes per clock cycle in DTR mode. */

/**

 * spi_nor_spimem_bounce() - check if a bounce buffer is needed for the data

 *                           transfer

 * @nor:        pointer to 'struct spi_nor'

 * @op:         pointer to 'struct spi_mem_op' template for transfer

 *

 * If we have to use the bounce buffer, the data field in @op will be updated.

 *

 * Return: true if the bounce buffer is needed, false if not

 op->data.buf.in occupies the same memory as op->data.buf.out */

/**

 * spi_nor_spimem_exec_op() - execute a memory operation

 * @nor:        pointer to 'struct spi_nor'

 * @op:         pointer to 'struct spi_mem_op' template for transfer

 *

 * Return: 0 on success, -error otherwise.

/**

 * spi_nor_spimem_read_data() - read data from flash's memory region via

 *                              spi-mem

 * @nor:        pointer to 'struct spi_nor'

 * @from:       offset to read from

 * @len:        number of bytes to read

 * @buf:        pointer to dst buffer

 *

 * Return: number of bytes read successfully, -errno otherwise

 convert the dummy cycles to the number of bytes */

/**

 * spi_nor_read_data() - read data from flash memory

 * @nor:        pointer to 'struct spi_nor'

 * @from:       offset to read from

 * @len:        number of bytes to read

 * @buf:        pointer to dst buffer

 *

 * Return: number of bytes read successfully, -errno otherwise

/**

 * spi_nor_spimem_write_data() - write data to flash memory via

 *                               spi-mem

 * @nor:        pointer to 'struct spi_nor'

 * @to:         offset to write to

 * @len:        number of bytes to write

 * @buf:        pointer to src buffer

 *

 * Return: number of bytes written successfully, -errno otherwise

/**

 * spi_nor_write_data() - write data to flash memory

 * @nor:        pointer to 'struct spi_nor'

 * @to:         offset to write to

 * @len:        number of bytes to write

 * @buf:        pointer to src buffer

 *

 * Return: number of bytes written successfully, -errno otherwise

/**

 * spi_nor_write_enable() - Set write enable latch with Write Enable command.

 * @nor:	pointer to 'struct spi_nor'.

 *

 * Return: 0 on success, -errno otherwise.

/**

 * spi_nor_write_disable() - Send Write Disable instruction to the chip.

 * @nor:	pointer to 'struct spi_nor'.

 *

 * Return: 0 on success, -errno otherwise.

/**

 * spi_nor_read_sr() - Read the Status Register.

 * @nor:	pointer to 'struct spi_nor'.

 * @sr:		pointer to a DMA-able buffer where the value of the

 *              Status Register will be written. Should be at least 2 bytes.

 *

 * Return: 0 on success, -errno otherwise.

			/*

			 * We don't want to read only one byte in DTR mode. So,

			 * read 2 and then discard the second byte.

/**

 * spi_nor_read_fsr() - Read the Flag Status Register.

 * @nor:	pointer to 'struct spi_nor'

 * @fsr:	pointer to a DMA-able buffer where the value of the

 *              Flag Status Register will be written. Should be at least 2

 *              bytes.

 *

 * Return: 0 on success, -errno otherwise.

			/*

			 * We don't want to read only one byte in DTR mode. So,

			 * read 2 and then discard the second byte.

/**

 * spi_nor_read_cr() - Read the Configuration Register using the

 * SPINOR_OP_RDCR (35h) command.

 * @nor:	pointer to 'struct spi_nor'

 * @cr:		pointer to a DMA-able buffer where the value of the

 *              Configuration Register will be written.

 *

 * Return: 0 on success, -errno otherwise.

/**

 * spi_nor_set_4byte_addr_mode() - Enter/Exit 4-byte address mode.

 * @nor:	pointer to 'struct spi_nor'.

 * @enable:	true to enter the 4-byte address mode, false to exit the 4-byte

 *		address mode.

 *

 * Return: 0 on success, -errno otherwise.

/**

 * spansion_set_4byte_addr_mode() - Set 4-byte address mode for Spansion

 * flashes.

 * @nor:	pointer to 'struct spi_nor'.

 * @enable:	true to enter the 4-byte address mode, false to exit the 4-byte

 *		address mode.

 *

 * Return: 0 on success, -errno otherwise.

/**

 * spi_nor_write_ear() - Write Extended Address Register.

 * @nor:	pointer to 'struct spi_nor'.

 * @ear:	value to write to the Extended Address Register.

 *

 * Return: 0 on success, -errno otherwise.

/**

 * spi_nor_xread_sr() - Read the Status Register on S3AN flashes.

 * @nor:	pointer to 'struct spi_nor'.

 * @sr:		pointer to a DMA-able buffer where the value of the

 *              Status Register will be written.

 *

 * Return: 0 on success, -errno otherwise.

/**

 * spi_nor_xsr_ready() - Query the Status Register of the S3AN flash to see if

 * the flash is ready for new commands.

 * @nor:	pointer to 'struct spi_nor'.

 *

 * Return: 1 if ready, 0 if not ready, -errno on errors.

/**

 * spi_nor_clear_sr() - Clear the Status Register.

 * @nor:	pointer to 'struct spi_nor'.

/**

 * spi_nor_sr_ready() - Query the Status Register to see if the flash is ready

 * for new commands.

 * @nor:	pointer to 'struct spi_nor'.

 *

 * Return: 1 if ready, 0 if not ready, -errno on errors.

		/*

		 * WEL bit remains set to one when an erase or page program

		 * error occurs. Issue a Write Disable command to protect

		 * against inadvertent writes that can possibly corrupt the

		 * contents of the memory.

/**

 * spi_nor_clear_fsr() - Clear the Flag Status Register.

 * @nor:	pointer to 'struct spi_nor'.

/**

 * spi_nor_fsr_ready() - Query the Flag Status Register to see if the flash is

 * ready for new commands.

 * @nor:	pointer to 'struct spi_nor'.

 *

 * Return: 1 if ready, 0 if not ready, -errno on errors.

		/*

		 * WEL bit remains set to one when an erase or page program

		 * error occurs. Issue a Write Disable command to protect

		 * against inadvertent writes that can possibly corrupt the

		 * contents of the memory.

/**

 * spi_nor_ready() - Query the flash to see if it is ready for new commands.

 * @nor:	pointer to 'struct spi_nor'.

 *

 * Return: 1 if ready, 0 if not ready, -errno on errors.

/**

 * spi_nor_wait_till_ready_with_timeout() - Service routine to read the

 * Status Register until ready, or timeout occurs.

 * @nor:		pointer to "struct spi_nor".

 * @timeout_jiffies:	jiffies to wait until timeout.

 *

 * Return: 0 on success, -errno otherwise.

/**

 * spi_nor_wait_till_ready() - Wait for a predefined amount of time for the

 * flash to be ready, or timeout occurs.

 * @nor:	pointer to "struct spi_nor".

 *

 * Return: 0 on success, -errno otherwise.

/**

 * spi_nor_global_block_unlock() - Unlock Global Block Protection.

 * @nor:	pointer to 'struct spi_nor'.

 *

 * Return: 0 on success, -errno otherwise.

/**

 * spi_nor_write_sr() - Write the Status Register.

 * @nor:	pointer to 'struct spi_nor'.

 * @sr:		pointer to DMA-able buffer to write to the Status Register.

 * @len:	number of bytes to write to the Status Register.

 *

 * Return: 0 on success, -errno otherwise.

/**

 * spi_nor_write_sr1_and_check() - Write one byte to the Status Register 1 and

 * ensure that the byte written match the received value.

 * @nor:	pointer to a 'struct spi_nor'.

 * @sr1:	byte value to be written to the Status Register.

 *

 * Return: 0 on success, -errno otherwise.

/**

 * spi_nor_write_16bit_sr_and_check() - Write the Status Register 1 and the

 * Status Register 2 in one shot. Ensure that the byte written in the Status

 * Register 1 match the received value, and that the 16-bit Write did not

 * affect what was already in the Status Register 2.

 * @nor:	pointer to a 'struct spi_nor'.

 * @sr1:	byte value to be written to the Status Register 1.

 *

 * Return: 0 on success, -errno otherwise.

 Make sure we don't overwrite the contents of Status Register 2. */

		/*

		 * If the Status Register 2 Read command (35h) is not

		 * supported, we should at least be sure we don't

		 * change the value of the SR2 Quad Enable bit.

		 *

		 * We can safely assume that when the Quad Enable method is

		 * set, the value of the QE bit is one, as a consequence of the

		 * nor->params->quad_enable() call.

		 *

		 * We can safely assume that the Quad Enable bit is present in

		 * the Status Register 2 at BIT(1). According to the JESD216

		 * revB standard, BFPT DWORDS[15], bits 22:20, the 16-bit

		 * Write Status (01h) command is available just for the cases

		 * in which the QE bit is described in SR2 at BIT(1).

/**

 * spi_nor_write_16bit_cr_and_check() - Write the Status Register 1 and the

 * Configuration Register in one shot. Ensure that the byte written in the

 * Configuration Register match the received value, and that the 16-bit Write

 * did not affect what was already in the Status Register 1.

 * @nor:	pointer to a 'struct spi_nor'.

 * @cr:		byte value to be written to the Configuration Register.

 *

 * Return: 0 on success, -errno otherwise.

 Keep the current value of the Status Register 1. */

/**

 * spi_nor_write_sr_and_check() - Write the Status Register 1 and ensure that

 * the byte written match the received value without affecting other bits in the

 * Status Register 1 and 2.

 * @nor:	pointer to a 'struct spi_nor'.

 * @sr1:	byte value to be written to the Status Register.

 *

 * Return: 0 on success, -errno otherwise.

/**

 * spi_nor_write_sr2() - Write the Status Register 2 using the

 * SPINOR_OP_WRSR2 (3eh) command.

 * @nor:	pointer to 'struct spi_nor'.

 * @sr2:	pointer to DMA-able buffer to write to the Status Register 2.

 *

 * Return: 0 on success, -errno otherwise.

/**

 * spi_nor_read_sr2() - Read the Status Register 2 using the

 * SPINOR_OP_RDSR2 (3fh) command.

 * @nor:	pointer to 'struct spi_nor'.

 * @sr2:	pointer to DMA-able buffer where the value of the

 *		Status Register 2 will be written.

 *

 * Return: 0 on success, -errno otherwise.

/**

 * spi_nor_erase_chip() - Erase the entire flash memory.

 * @nor:	pointer to 'struct spi_nor'.

 *

 * Return: 0 on success, -errno otherwise.

 No conversion found, keep input op code. */

/*

 * Initiate the erasure of a single sector

	/*

	 * Default implementation, if driver doesn't have a specialized HW

	 * control

/**

 * spi_nor_div_by_erase_size() - calculate remainder and update new dividend

 * @erase:	pointer to a structure that describes a SPI NOR erase type

 * @dividend:	dividend value

 * @remainder:	pointer to u32 remainder (will be updated)

 *

 * Return: the result of the division

 JEDEC JESD216B Standard imposes erase sizes to be power of 2. */

/**

 * spi_nor_find_best_erase_type() - find the best erase type for the given

 *				    offset in the serial flash memory and the

 *				    number of bytes to erase. The region in

 *				    which the address fits is expected to be

 *				    provided.

 * @map:	the erase map of the SPI NOR

 * @region:	pointer to a structure that describes a SPI NOR erase region

 * @addr:	offset in the serial flash memory

 * @len:	number of bytes to erase

 *

 * Return: a pointer to the best fitted erase type, NULL otherwise.

	/*

	 * Erase types are ordered by size, with the smallest erase type at

	 * index 0.

 Does the erase region support the tested erase type? */

 Alignment is not mandatory for overlaid regions */

 Don't erase more than what the user has asked for. */

/**

 * spi_nor_region_next() - get the next spi nor region

 * @region:	pointer to a structure that describes a SPI NOR erase region

 *

 * Return: the next spi nor region or NULL if last region.

/**

 * spi_nor_find_erase_region() - find the region of the serial flash memory in

 *				 which the offset fits

 * @map:	the erase map of the SPI NOR

 * @addr:	offset in the serial flash memory

 *

 * Return: a pointer to the spi_nor_erase_region struct, ERR_PTR(-errno)

 *	   otherwise.

/**

 * spi_nor_init_erase_cmd() - initialize an erase command

 * @region:	pointer to a structure that describes a SPI NOR erase region

 * @erase:	pointer to a structure that describes a SPI NOR erase type

 *

 * Return: the pointer to the allocated erase command, ERR_PTR(-errno)

 *	   otherwise.

/**

 * spi_nor_destroy_erase_cmd_list() - destroy erase command list

 * @erase_list:	list of erase commands

/**

 * spi_nor_init_erase_cmd_list() - initialize erase command list

 * @nor:	pointer to a 'struct spi_nor'

 * @erase_list:	list of erase commands to be executed once we validate that the

 *		erase can be performed

 * @addr:	offset in the serial flash memory

 * @len:	number of bytes to erase

 *

 * Builds the list of best fitted erase commands and verifies if the erase can

 * be performed.

 *

 * Return: 0 on success, -errno otherwise.

/**

 * spi_nor_erase_multi_sectors() - perform a non-uniform erase

 * @nor:	pointer to a 'struct spi_nor'

 * @addr:	offset in the serial flash memory

 * @len:	number of bytes to erase

 *

 * Build a list of best fitted erase commands and execute it once we validate

 * that the erase can be performed.

 *

 * Return: 0 on success, -errno otherwise.

/*

 * Erase an address range on the nor chip.  The address range may extend

 * one or more erase sectors. Return an error if there is a problem erasing.

 whole-chip erase? */

		/*

		 * Scale the timeout linearly with the size of the flash, with

		 * a minimum calibrated to an old 2MB flash. We could try to

		 * pull these from CFI/SFDP, but these values should be good

		 * enough for now.

	/* REVISIT in some cases we could speed up erasing large regions

	 * by using SPINOR_OP_SE instead of SPINOR_OP_BE_4K.  We may have set up

	 * to use "small sector erase", but that's not always optimal.

 "sector"-at-a-time erase */

 erase multiple sectors */

/**

 * spi_nor_sr1_bit6_quad_enable() - Set the Quad Enable BIT(6) in the Status

 * Register 1.

 * @nor:	pointer to a 'struct spi_nor'

 *

 * Bit 6 of the Status Register 1 is the QE bit for Macronix like QSPI memories.

 *

 * Return: 0 on success, -errno otherwise.

/**

 * spi_nor_sr2_bit1_quad_enable() - set the Quad Enable BIT(1) in the Status

 * Register 2.

 * @nor:       pointer to a 'struct spi_nor'.

 *

 * Bit 1 of the Status Register 2 is the QE bit for Spansion like QSPI memories.

 *

 * Return: 0 on success, -errno otherwise.

/**

 * spi_nor_sr2_bit7_quad_enable() - set QE bit in Status Register 2.

 * @nor:	pointer to a 'struct spi_nor'

 *

 * Set the Quad Enable (QE) bit in the Status Register 2.

 *

 * This is one of the procedures to set the QE bit described in the SFDP

 * (JESD216 rev B) specification but no manufacturer using this procedure has

 * been identified yet, hence the name of the function.

 *

 * Return: 0 on success, -errno otherwise.

 Check current Quad Enable bit value. */

 Update the Quad Enable bit. */

 Read back and check it. */

 We shouldn't see 0-length reads */

/*

 * Write an address range to the nor chip.  Data must be written in

 * FLASH_PAGESIZE chunks.  The address range may be any size provided

 * it is within the physical boundaries.

		/*

		 * If page_size is a power of two, the offset can be quickly

		 * calculated with an AND operation. On the other cases we

		 * need to do a modulus operation (more expensive).

 the size of data remaining on the first page */

/**

 * spi_nor_spimem_check_op - check if the operation is supported

 *                           by controller

 *@nor:        pointer to a 'struct spi_nor'

 *@op:         pointer to op template to be checked

 *

 * Returns 0 if operation is supported, -EOPNOTSUPP otherwise.

	/*

	 * First test with 4 address bytes. The opcode itself might

	 * be a 3B addressing opcode but we don't care, because

	 * SPI controller implementation should not check the opcode,

	 * but just the sequence.

 If flash size <= 16MB, 3 address bytes are sufficient */

/**

 * spi_nor_spimem_check_readop - check if the read op is supported

 *                               by controller

 *@nor:         pointer to a 'struct spi_nor'

 *@read:        pointer to op template to be checked

 *

 * Returns 0 if operation is supported, -EOPNOTSUPP otherwise.

 convert the dummy cycles to the number of bytes */

/**

 * spi_nor_spimem_check_pp - check if the page program op is supported

 *                           by controller

 *@nor:         pointer to a 'struct spi_nor'

 *@pp:          pointer to op template to be checked

 *

 * Returns 0 if operation is supported, -EOPNOTSUPP otherwise.

/**

 * spi_nor_spimem_adjust_hwcaps - Find optimal Read/Write protocol

 *                                based on SPI controller capabilities

 * @nor:        pointer to a 'struct spi_nor'

 * @hwcaps:     pointer to resulting capabilities after adjusting

 *              according to controller and flash's capability

 X-X-X modes are not supported yet, mask them all. */

	/*

	 * If the reset line is broken, we do not want to enter a stateful

	 * mode.

/**

 * spi_nor_set_erase_type() - set a SPI NOR erase type

 * @erase:	pointer to a structure that describes a SPI NOR erase type

 * @size:	the size of the sector/block erased by the erase type

 * @opcode:	the SPI command op code to erase the sector/block

 JEDEC JESD216B Standard imposes erase sizes to be power of 2. */

/**

 * spi_nor_init_uniform_erase_map() - Initialize uniform erase map

 * @map:		the erase map of the SPI NOR

 * @erase_mask:		bitmask encoding erase types that can erase the entire

 *			flash memory

 * @flash_size:		the spi nor flash memory size

 Offset 0 with erase_mask and SNOR_LAST_REGION bit set */

	/*

	 * In the SPI NOR framework, we don't need to make the difference

	 * between mode clock cycles and wait state clock cycles.

	 * Indeed, the value of the mode clock cycles is used by a QSPI

	 * flash memory to know whether it should enter or leave its 0-4-4

	 * (Continuous Read / XIP) mode.

	 * eXecution In Place is out of the scope of the mtd sub-system.

	 * Hence we choose to merge both mode and wait state clock cycles

	 * into the so called dummy clock cycles.

/**

 * spi_nor_select_uniform_erase() - select optimum uniform erase type

 * @map:		the erase map of the SPI NOR

 * @wanted_size:	the erase type size to search for. Contains the value of

 *			info->sector_size or of the "small sector" size in case

 *			CONFIG_MTD_SPI_NOR_USE_4K_SECTORS is defined.

 *

 * Once the optimum uniform sector erase command is found, disable all the

 * other.

 *

 * Return: pointer to erase type on success, NULL otherwise.

		/*

		 * If the current erase size is the one, stop here:

		 * we have found the right uniform Sector Erase command.

		/*

		 * Otherwise, the current erase size is still a valid candidate.

		 * Select the biggest valid candidate.

 keep iterating to find the wanted_size */

 Disable all other Sector Erase commands. */

	/*

	 * The previous implementation handling Sector Erase commands assumed

	 * that the SPI flash memory has an uniform layout then used only one

	 * of the supported erase sizes for all Sector Erase commands.

	 * So to be backward compatible, the new implementation also tries to

	 * manage the SPI flash memory as uniform with a single erase sector

	 * size, when possible.

 prefer "small sector" erase if possible */

	/*

	 * For non-uniform SPI flash memory, set mtd->erasesize to the

	 * maximum erase sector size. No need to set nor->erase_opcode.

	/*

	 * Keep only the hardware capabilities supported by both the SPI

	 * controller and the SPI flash memory.

		/*

		 * When called from spi_nor_probe(), all caps are set and we

		 * need to discard some of them based on what the SPI

		 * controller actually supports (using spi_mem_supports_op()).

		/*

		 * SPI n-n-n protocols are not supported when the SPI

		 * controller directly implements the spi_nor interface.

		 * Yet another reason to switch to spi-mem.

 Select the (Fast) Read command. */

 Select the Page Program command. */

 Select the Sector Erase command. */

/**

 * spi_nor_manufacturer_init_params() - Initialize the flash's parameters and

 * settings based on MFR register and ->default_init() hook.

 * @nor:	pointer to a 'struct spi_nor'.

/**

 * spi_nor_sfdp_init_params() - Initialize the flash's parameters and settings

 * based on JESD216 SFDP standard.

 * @nor:	pointer to a 'struct spi_nor'.

 *

 * The method has a roll-back mechanism: in case the SFDP parsing fails, the

 * legacy flash parameters and settings will be restored.

/**

 * spi_nor_info_init_params() - Initialize the flash's parameters and settings

 * based on nor->info data.

 * @nor:	pointer to a 'struct spi_nor'.

 Initialize default flash parameters and settings. */

 Default to 16-bit Write Status (01h) Command */

 Set SPI NOR sizes. */

 Default to Fast Read for DT and non-DT platform devices. */

 Mask out Fast Read if not requested at DT instantiation. */

 (Fast) Read settings. */

 Page Program settings. */

		/*

		 * Since xSPI Page Program opcode is backward compatible with

		 * Legacy SPI, use Legacy SPI opcode there as well.

	/*

	 * Sector Erase settings. Sort Erase Types in ascending order, with the

	 * smallest erase size starting at BIT(0).

/**

 * spi_nor_post_sfdp_fixups() - Updates the flash's parameters and settings

 * after SFDP has been parsed (is also called for SPI NORs that do not

 * support RDSFDP).

 * @nor:	pointer to a 'struct spi_nor'

 *

 * Typically used to tweak various parameters that could not be extracted by

 * other means (i.e. when information provided by the SFDP/flash_info tables

 * are incomplete or wrong).

/**

 * spi_nor_late_init_params() - Late initialization of default flash parameters.

 * @nor:	pointer to a 'struct spi_nor'

 *

 * Used to set default flash parameters and settings when the ->default_init()

 * hook or the SFDP parser let voids.

	/*

	 * NOR protection support. When locking_ops are not provided, we pick

	 * the default ones.

/**

 * spi_nor_init_params() - Initialize the flash's parameters and settings.

 * @nor:	pointer to a 'struct spi_nor'.

 *

 * The flash parameters and settings are initialized based on a sequence of

 * calls that are ordered by priority:

 *

 * 1/ Default flash parameters initialization. The initializations are done

 *    based on nor->info data:

 *		spi_nor_info_init_params()

 *

 * which can be overwritten by:

 * 2/ Manufacturer flash parameters initialization. The initializations are

 *    done based on MFR register, or when the decisions can not be done solely

 *    based on MFR, by using specific flash_info tweeks, ->default_init():

 *		spi_nor_manufacturer_init_params()

 *

 * which can be overwritten by:

 * 3/ SFDP flash parameters initialization. JESD216 SFDP is a standard and

 *    should be more accurate that the above.

 *		spi_nor_sfdp_init_params()

 *

 *    Please note that there is a ->post_bfpt() fixup hook that can overwrite

 *    the flash parameters and settings immediately after parsing the Basic

 *    Flash Parameter Table.

 *

 * which can be overwritten by:

 * 4/ Post SFDP flash parameters initialization. Used to tweak various

 *    parameters that could not be extracted by other means (i.e. when

 *    information provided by the SFDP/flash_info tables are incomplete or

 *    wrong).

 *		spi_nor_post_sfdp_fixups()

 *

 * 5/ Late default flash parameters initialization, used when the

 * ->default_init() hook or the SFDP parser do not set specific params.

 *		spi_nor_late_init_params()

/** spi_nor_octal_dtr_enable() - enable Octal DTR I/O if needed

 * @nor:                 pointer to a 'struct spi_nor'

 * @enable:              whether to enable or disable Octal DTR

 *

 * Return: 0 on success, -errno otherwise.

/**

 * spi_nor_quad_enable() - enable Quad I/O if needed.

 * @nor:                pointer to a 'struct spi_nor'

 *

 * Return: 0 on success, -errno otherwise.

	/*

	 * Some SPI NOR flashes are write protected by default after a power-on

	 * reset cycle, in order to avoid inadvertent writes during power-up.

	 * Backward compatibility imposes to unlock the entire flash memory

	 * array at power-up by default. Depending on the kernel configuration

	 * (1) do nothing, (2) always unlock the entire flash array or (3)

	 * unlock the entire flash array only when the software write

	 * protection bits are volatile. The latter is indicated by

	 * SNOR_F_SWP_IS_VOLATILE.

		/*

		 * If the RESET# pin isn't hooked up properly, or the system

		 * otherwise doesn't perform a reset command in the boot

		 * sequence, it's impossible to 100% protect against unexpected

		 * reboots (e.g., crashes). Warn the user (or hopefully, system

		 * designer) that this is bad.

/**

 * spi_nor_soft_reset() - Perform a software reset

 * @nor:	pointer to 'struct spi_nor'

 *

 * Performs a "Soft Reset and Enter Default Protocol Mode" sequence which resets

 * the device to its power-on-reset state. This is useful when the software has

 * made some changes to device (volatile) registers and needs to reset it before

 * shutting down, for example.

 *

 * Not every flash supports this sequence. The same set of opcodes might be used

 * for some other operation on a flash that does not support this. Support for

 * this sequence can be discovered via SFDP in the BFPT table.

 *

 * Return: 0 on success, -errno otherwise.

	/*

	 * Software Reset is not instant, and the delay varies from flash to

	 * flash. Looking at a few flashes, most range somewhere below 100

	 * microseconds. So, sleep for a range of 200-400 us.

 mtd suspend handler */

 Disable octal DTR mode if we enabled it. */

 mtd resume handler */

 re-initialize the nor chip */

 restore the addressing mode */

 already configured from SFDP */

		/*

		 * In 8D-8D-8D mode, one byte takes half a cycle to transfer. So

		 * in this protocol an odd address width cannot be used because

		 * then the address phase would only span a cycle and a half.

		 * Half a cycle would be left over. We would then have to start

		 * the dummy phase in the middle of a cycle and so too the data

		 * phase, and we will end the transaction with half a cycle left

		 * over.

		 *

		 * Force all 8D-8D-8D flashes to use an address width of 4 to

		 * avoid this situation.

 enable 4-byte addressing if the device exceeds 16MiB */

 Set 4byte opcodes when possible. */

 Try to auto-detect if chip name wasn't specified or not found */

	/*

	 * If caller has specified name of flash model that can normally be

	 * detected using JEDEC, let's verify it.

			/*

			 * JEDEC knows better, so overwrite platform ID. We

			 * can't trust partitions any longer, but we'll let

			 * mtd apply them anyway, since some partitions may be

			 * marked read-only, and we don't want to lose that

			 * information, even if it's not 100% accurate.

 Reset SPI protocol for all commands. */

	/*

	 * We need the bounce buffer early to read/write registers when going

	 * through the spi-mem layer (buffers have to be DMA-able).

	 * For spi-mem drivers, we'll reallocate a new buffer if

	 * nor->page_size turns out to be greater than PAGE_SIZE (which

	 * shouldn't happen before long since NOR pages are usually less

	 * than 1KB) after spi_nor_scan() returns.

	/*

	 * Make sure the XSR_RDY flag is set before calling

	 * spi_nor_wait_till_ready(). Xilinx S3AN share MFR

	 * with Atmel SPI NOR.

 Init flash parameters based on flash_info struct and SFDP */

	/*

	 * Configure the SPI memory:

	 * - select op codes for (Fast) Read, Page Program and Sector Erase.

	 * - set the number of dummy cycles (mode cycles + wait states).

	 * - set the SPI protocols for register and memory accesses.

 Send all the required SPI flash commands to initialize device */

 Configure OTP parameters and ops */

 convert the dummy cycles to the number of bytes */

	/*

	 * Since spi_nor_spimem_setup_op() only sets buswidth when the number

	 * of data bytes is non-zero, the data buswidth won't be set here. So,

	 * do it explicitly.

	/*

	 * Since spi_nor_spimem_setup_op() only sets buswidth when the number

	 * of data bytes is non-zero, the data buswidth won't be set here. So,

	 * do it explicitly.

	/*

	 * Enable all caps by default. The core will mask them after

	 * checking what's really supported using spi_mem_supports_op().

	/*

	 * For some (historical?) reason many platforms provide two different

	 * names in flash_platform_data: "name" and "type". Quite often name is

	 * set to "m25p80" and then "type" provides a real chip name.

	 * If that's the case, respect "type" and ignore a "name".

 auto-detect */

	/*

	 * None of the existing parts have > 512B pages, but let's play safe

	 * and add this logic so that if anyone ever adds support for such

	 * a NOR we don't end up with buffer overflows.

 Clean up MTD stuff. */

/*

 * Do NOT add to this array without reading the following:

 *

 * Historically, many flash devices are bound to this driver by their name. But

 * since most of these flash are compatible to some extent, and their

 * differences can often be differentiated by the JEDEC read-ID command, we

 * encourage new users to add support to the spi-nor library, and simply bind

 * against a generic string here (e.g., "jedec,spi-nor").

 *

 * Many flash names are kept here in this list (as well as in spi-nor.c) to

 * keep them available as module aliases for existing platforms.

	/*

	 * Allow non-DT platform devices to bind to the "spi-nor" modalias, and

	 * hack around the fact that the SPI core does not provide uevent

	 * matching for .of_match_table

	/*

	 * Entries not used in DTs that should be safe to drop after replacing

	 * them with "spi-nor" in platform data.

	/*

	 * Entries that were used in DTs without "jedec,spi-nor" fallback and

	 * should be kept for backward compatibility.

 Flashes that can't be detected using JEDEC */

 Everspin MRAMs (non-JEDEC) */

 128 Kib, 40 MHz */

 256 Kib, 40 MHz */

   1 Mib, 40 MHz */

   4 Mib, 40 MHz */

	/*

	 * Generic compatibility for SPI NOR that can be identified by the

	 * JEDEC READ ID opcode (0x9F). Use this, if possible.

 sentinel */ },

/*

 * REVISIT: many of these chips have deep power-down modes, which

 * should clearly be entered on suspend() to minimize power use.

 * And also when they're otherwise idle...

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2005, Intec Automation Inc.

 * Copyright (C) 2014, Freescale Semiconductor, Inc.

 Fast Read opcode in DTR mode */

 Read volatile register */

 Write volatile register */

 For setting octal DTR mode */

 For setting dummy cycles */

 Enable Octal DTR. */

 Enable Extended SPI (default) */

 Use 20 dummy cycles for memory array reads. */

 Read flash ID to make sure the switch was successful. */

 Set the Fast Read settings. */

	/*

	 * The BFPT quad enable field is set to a reserved value so the quad

	 * enable function is ignored by spi_nor_parse_bfpt(). Make sure we

	 * disable it.

/**

 * st_micron_set_4byte_addr_mode() - Set 4-byte address mode for ST and Micron

 * flashes.

 * @nor:	pointer to 'struct spi_nor'.

 * @enable:	true to enter the 4-byte address mode, false to exit the 4-byte

 *		address mode.

 *

 * Return: 0 on success, -errno otherwise.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2005, Intec Automation Inc.

 * Copyright (C) 2014, Freescale Semiconductor, Inc.

/*

 * The Atmel AT25FS010/AT25FS040 parts have some weird configuration for the

 * block protection bits. We don't support them. But legacy behavior in linux

 * is to unlock the whole flash array on startup. Therefore, we have to support

 * exactly this operation.

 We only support unlocking the whole flash array */

 Write 0x00 to the status register to disable write protection */

/**

 * atmel_set_global_protection - Do a Global Protect or Unprotect command

 * @nor:	pointer to 'struct spi_nor'

 * @ofs:	offset in bytes

 * @len:	len in bytes

 * @is_protect:	if true do a Global Protect otherwise it is a Global Unprotect

 *

 * Return: 0 on success, -error otherwise.

 We only support locking the whole flash array */

 SRWD bit needs to be cleared, otherwise the protection doesn't change */

		/*

		 * Set the SRWD bit again as soon as we are protecting

		 * anything. This will ensure that the WP# pin is working

		 * correctly. By doing this we also behave the same as

		 * spi_nor_sr_lock(), which sets SRWD if any block protection

		 * is active.

	/*

	 * We cannot use the spi_nor_write_sr_and_check() because this command

	 * isn't really setting any bits, instead it is an pseudo command for

	 * "Global Unprotect" or "Global Protect"

 Atmel -- some are (confusingly) marketed as "DataFlash" */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2005, Intec Automation Inc.

 * Copyright (C) 2014, Freescale Semiconductor, Inc.

	/*

	 * MX25L25635F supports 4B opcodes but MX25L25635E does not.

	 * Unfortunately, Macronix has re-used the same JEDEC ID for both

	 * variants which prevents us from defining a new entry in the parts

	 * table.

	 * We need a way to differentiate MX25L25635E and MX25L25635F, and it

	 * seems that the F version advertises support for Fast Read 4-4-4 in

	 * its BFPT table.

 Macronix */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2005, Intec Automation Inc.

 * Copyright (C) 2014, Freescale Semiconductor, Inc.

	/*

	 * IS25LP256 supports 4B opcodes, but the BFPT advertises a

	 * BFPT_DWORD1_ADDRESS_BYTES_3_ONLY address width.

	 * Overwrite the address width advertised by the BFPT.

 ISSI */

 PMC */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2005, Intec Automation Inc.

 * Copyright (C) 2014, Freescale Semiconductor, Inc.

 Intel/Numonyx -- xxxs33b */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2005, Intec Automation Inc.

 * Copyright (C) 2014, Freescale Semiconductor, Inc.

 Catalyst / On Semiconductor -- non-JEDEC */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2005, Intec Automation Inc.

 * Copyright (C) 2014, Freescale Semiconductor, Inc.

 Read any register */

 Write any register */

 Page size. */

/**

 * spi_nor_cypress_octal_dtr_enable() - Enable octal DTR on Cypress flashes.

 * @nor:		pointer to a 'struct spi_nor'

 * @enable:              whether to enable or disable Octal DTR

 *

 * This also sets the memory access latency cycles to 24 to allow the flash to

 * run at up to 200MHz.

 *

 * Return: 0 on success, -errno otherwise.

 Use 24 dummy cycles for memory array reads. */

 Set/unset the octal and DTR enable bits. */

 Read flash ID to make sure the switch was successful. */

	/*

	 * On older versions of the flash the xSPI Profile 1.0 table has the

	 * 8D-8D-8D Fast Read opcode as 0x00. But it actually should be 0xEE.

 This flash is also missing the 4-byte Page Program opcode bit. */

	/*

	 * Since xSPI Page Program opcode is backward compatible with

	 * Legacy SPI, use Legacy SPI opcode there as well.

	/*

	 * The xSPI Profile 1.0 table advertises the number of additional

	 * address bytes needed for Read Status Register command as 0 but the

	 * actual value for that is 4.

	/*

	 * The BFPT table advertises a 512B page size but the page size is

	 * actually configurable (with the default being 256B). Read from

	 * CFR3V[4] and set the correct size.

	/*

	 * The S25FS-S chip family reports 512-byte pages in BFPT but

	 * in reality the write buffer still wraps at the safe default

	 * of 256 bytes.  Overwrite the page size advertised by BFPT

	 * to get the writes working.

	/* Spansion/Cypress -- single (large) sector size only, at least

	 * for the chips listed here (without boot sectors).

 No small sector erase for 4-byte command set */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2005, Intec Automation Inc.

 * Copyright (C) 2014, Freescale Semiconductor, Inc.

 Basic Flash Parameter Table */

 Sector Map Table */

 4-byte Address Instruction Table */

 xSPI Profile 1.0 table. */

#define SFDP_SCCR_MAP_ID	0xff87	/*

					 * Status, Control and Configuration

					 * Register Map.

 Ox50444653U <=> "SFDP" */

 0-base number of parameter headers */

 Basic Flash Parameter Table. */

 Fast Read settings. */

 The Fast Read x-y-z hardware capability in params->hwcaps.mask. */

	/*

	 * The <supported_bit> bit in <supported_dword> BFPT DWORD tells us

	 * whether the Fast Read x-y-z command is supported.

	/*

	 * The half-word at offset <setting_shift> in <setting_dword> BFPT DWORD

	 * encodes the op code, the number of mode clocks and the number of wait

	 * states to be used by Fast Read x-y-z command.

 The SPI protocol for this Fast Read x-y-z command. */

	/*

	 * The half-word at offset <shift> in DWORD <dword> encodes the

	 * op code and erase sector size to be used by Sector Erase commands.

 The hardware capability. */

	/*

	 * The <supported_bit> bit in DWORD1 of the 4BAIT tells us whether

	 * the associated 4-byte address op code is supported.

/**

 * spi_nor_read_raw() - raw read of serial flash memory. read_opcode,

 *			addr_width and read_dummy members of the struct spi_nor

 *			should be previously

 * set.

 * @nor:	pointer to a 'struct spi_nor'

 * @addr:	offset in the serial flash memory

 * @len:	number of bytes to read

 * @buf:	buffer where the data is copied into (dma-safe memory)

 *

 * Return: 0 on success, -errno otherwise.

/**

 * spi_nor_read_sfdp() - read Serial Flash Discoverable Parameters.

 * @nor:	pointer to a 'struct spi_nor'

 * @addr:	offset in the SFDP area to start reading data from

 * @len:	number of bytes to read

 * @buf:	buffer where the SFDP data are copied into (dma-safe memory)

 *

 * Whatever the actual numbers of bytes for address and dummy cycles are

 * for (Fast) Read commands, the Read SFDP (5Ah) instruction is always

 * followed by a 3-byte address and 8 dummy clock cycles.

 *

 * Return: 0 on success, -errno otherwise.

/**

 * spi_nor_read_sfdp_dma_unsafe() - read Serial Flash Discoverable Parameters.

 * @nor:	pointer to a 'struct spi_nor'

 * @addr:	offset in the SFDP area to start reading data from

 * @len:	number of bytes to read

 * @buf:	buffer where the SFDP data are copied into

 *

 * Wrap spi_nor_read_sfdp() using a kmalloc'ed bounce buffer as @buf is now not

 * guaranteed to be dma-safe.

 *

 * Return: -ENOMEM if kmalloc() fails, the return code of spi_nor_read_sfdp()

 *          otherwise.

 Fast Read 1-1-2 */

 Supported bit */

 Settings */

 Fast Read 1-2-2 */

 Supported bit */

 Settings */

 Fast Read 2-2-2 */

 Supported bit */

 Settings */

 Fast Read 1-1-4 */

 Supported bit */

 Settings */

 Fast Read 1-4-4 */

 Supported bit */

 Settings */

 Fast Read 4-4-4 */

 Supported bit */

 Settings */

 Erase Type 1 in DWORD8 bits[15:0] */

 Erase Type 2 in DWORD8 bits[31:16] */

 Erase Type 3 in DWORD9 bits[15:0] */

 Erase Type 4 in DWORD9 bits[31:16] */

/**

 * spi_nor_set_erase_settings_from_bfpt() - set erase type settings from BFPT

 * @erase:	pointer to a structure that describes a SPI NOR erase type

 * @size:	the size of the sector/block erased by the erase type

 * @opcode:	the SPI command op code to erase the sector/block

 * @i:		erase type index as sorted in the Basic Flash Parameter Table

 *

 * The supported Erase Types will be sorted at init in ascending order, with

 * the smallest Erase Type size being the first member in the erase_type array

 * of the spi_nor_erase_map structure. Save the Erase Type index as sorted in

 * the Basic Flash Parameter Table since it will be used later on to

 * synchronize with the supported Erase Types defined in SFDP optional tables.

/**

 * spi_nor_map_cmp_erase_type() - compare the map's erase types by size

 * @l:	member in the left half of the map's erase_type array

 * @r:	member in the right half of the map's erase_type array

 *

 * Comparison function used in the sort() call to sort in ascending order the

 * map's erase types, the smallest erase type size being the first member in the

 * sorted erase_type array.

 *

 * Return: the result of @l->size - @r->size

/**

 * spi_nor_sort_erase_mask() - sort erase mask

 * @map:	the erase map of the SPI NOR

 * @erase_mask:	the erase type mask to be sorted

 *

 * Replicate the sort done for the map's erase types in BFPT: sort the erase

 * mask in ascending order with the smallest erase type size starting from

 * BIT(0) in the sorted erase mask.

 *

 * Return: sorted erase mask.

 Replicate the sort done for the map's erase types. */

/**

 * spi_nor_regions_sort_erase_types() - sort erase types in each region

 * @map:	the erase map of the SPI NOR

 *

 * Function assumes that the erase types defined in the erase map are already

 * sorted in ascending order, with the smallest erase type size being the first

 * member in the erase_type array. It replicates the sort done for the map's

 * erase types. Each region's erase bitmask will indicate which erase types are

 * supported from the sorted erase types defined in the erase map.

 * Sort the all region's erase type at init in order to speed up the process of

 * finding the best erase command at runtime.

 Overwrite erase mask. */

/**

 * spi_nor_parse_bfpt() - read and parse the Basic Flash Parameter Table.

 * @nor:		pointer to a 'struct spi_nor'

 * @bfpt_header:	pointer to the 'struct sfdp_parameter_header' describing

 *			the Basic Flash Parameter Table length and version

 *

 * The Basic Flash Parameter Table is the main and only mandatory table as

 * defined by the SFDP (JESD216) specification.

 * It provides us with the total size (memory density) of the data array and

 * the number of address bytes for Fast Read, Page Program and Sector Erase

 * commands.

 * For Fast READ commands, it also gives the number of mode clock cycles and

 * wait states (regrouped in the number of dummy clock cycles) for each

 * supported instruction op code.

 * For Page Program, the page size is now available since JESD216 rev A, however

 * the supported instruction op codes are still not provided.

 * For Sector Erase commands, this table stores the supported instruction op

 * codes and the associated sector sizes.

 * Finally, the Quad Enable Requirements (QER) are also available since JESD216

 * rev A. The QER bits encode the manufacturer dependent procedure to be

 * executed to set the Quad Enable (QE) bit in some internal register of the

 * Quad SPI memory. Indeed the QE bit, when it exists, must be set before

 * sending any Quad SPI command to the memory. Actually, setting the QE bit

 * tells the memory to reassign its WP# and HOLD#/RESET# pins to functions IO2

 * and IO3 hence enabling 4 (Quad) I/O lines.

 *

 * Return: 0 on success, -errno otherwise.

 JESD216 Basic Flash Parameter Table length is at least 9 DWORDs. */

 Read the Basic Flash Parameter Table. */

 Fix endianness of the BFPT DWORDs. */

 Number of address bytes. */

 Flash Memory Density (in bits). */

		/*

		 * Prevent overflows on params->size. Anyway, a NOR of 2^64

		 * bits is unlikely to exist so this error probably means

		 * the BFPT we are reading is corrupted/wrong.

 Convert to bytes. */

 Fast Read settings. */

	/*

	 * Sector Erase settings. Reinitialize the uniform erase map using the

	 * Erase Types defined in the bfpt table.

 erasesize == 0 means this Erase Type is not supported. */

	/*

	 * Sort all the map's Erase Types in ascending order with the smallest

	 * erase size being the first member in the erase_type array.

	/*

	 * Sort the erase types in the uniform region in order to update the

	 * uniform_erase_type bitmask. The bitmask will be used later on when

	 * selecting the uniform erase.

 Stop here if not JESD216 rev A or later. */

 Page size: this field specifies 'N' so the page size = 2^N bytes. */

 Quad Enable Requirements. */

		/*

		 * Writing only one byte to the Status Register has the

		 * side-effect of clearing Status Register 2.

		/*

		 * Read Configuration Register (35h) instruction is not

		 * supported.

		/*

		 * JESD216 rev B or later does not specify if writing only one

		 * byte to the Status Register clears or not the Status

		 * Register 2, so let's be cautious and keep the default

		 * assumption of a 16-bit Write Status (01h) command.

 Soft Reset support. */

 Stop here if not JESD216 rev C or later. */

 8D-8D-8D command extension. */

/**

 * spi_nor_smpt_addr_width() - return the address width used in the

 *			       configuration detection command.

 * @nor:	pointer to a 'struct spi_nor'

 * @settings:	configuration detection command descriptor, dword1

/**

 * spi_nor_smpt_read_dummy() - return the configuration detection command read

 *			       latency, in clock cycles.

 * @nor:	pointer to a 'struct spi_nor'

 * @settings:	configuration detection command descriptor, dword1

 *

 * Return: the number of dummy cycles for an SMPT read

/**

 * spi_nor_get_map_in_use() - get the configuration map in use

 * @nor:	pointer to a 'struct spi_nor'

 * @smpt:	pointer to the sector map parameter table

 * @smpt_len:	sector map parameter table length

 *

 * Return: pointer to the map in use, ERR_PTR(-errno) otherwise.

 Use a kmalloc'ed bounce buffer to guarantee it is DMA-able. */

 Determine if there are any optional Detection Command Descriptors */

		/*

		 * Build an index value that is used to select the Sector Map

		 * Configuration that is currently in use.

	/*

	 * If command descriptors are provided, they always precede map

	 * descriptors in the table. There is no need to start the iteration

	 * over smpt array all over again.

	 *

	 * Find the matching configuration map.

		/*

		 * If there are no more configuration map descriptors and no

		 * configuration ID matched the configuration identifier, the

		 * sector address map is unknown.

 increment the table index to the next map */

 fall through */

/**

 * spi_nor_region_check_overlay() - set overlay bit when the region is overlaid

 * @region:	pointer to a structure that describes a SPI NOR erase region

 * @erase:	pointer to a structure that describes a SPI NOR erase type

 * @erase_type:	erase type bitmask

/**

 * spi_nor_init_non_uniform_erase_map() - initialize the non-uniform erase map

 * @nor:	pointer to a 'struct spi_nor'

 * @smpt:	pointer to the sector map parameter table

 *

 * Return: 0 on success, -errno otherwise.

	/*

	 * The regions will be freed when the driver detaches from the

	 * device.

 Populate regions. */

 index for the region dword */

		/*

		 * Save the erase types that are supported in all regions and

		 * can erase the entire flash memory.

		/*

		 * regions_erase_type mask will indicate all the erase types

		 * supported in this configuration map.

		/*

		 * Roll back to the previous uniform_erase_type mask, SMPT is

		 * broken.

	/*

	 * BFPT advertises all the erase types supported by all the possible

	 * map configurations. Mask out the erase types that are not supported

	 * by the current map configuration.

/**

 * spi_nor_parse_smpt() - parse Sector Map Parameter Table

 * @nor:		pointer to a 'struct spi_nor'

 * @smpt_header:	sector map parameter table header

 *

 * This table is optional, but when available, we parse it to identify the

 * location and size of sectors within the main data array of the flash memory

 * device and to identify which Erase Types are supported by each sector.

 *

 * Return: 0 on success, -errno otherwise.

 Read the Sector Map Parameter Table. */

 Fix endianness of the SMPT DWORDs. */

 fall through */

/**

 * spi_nor_parse_4bait() - parse the 4-Byte Address Instruction Table

 * @nor:		pointer to a 'struct spi_nor'.

 * @param_header:	pointer to the 'struct sfdp_parameter_header' describing

 *			the 4-Byte Address Instruction Table length and version.

 *

 * Return: 0 on success, -errno otherwise.

 not used */,		BIT(9) },

 not used */,		BIT(10) },

 not used */,		BIT(11) },

 not used */,		BIT(12) },

 Read the 4-byte Address Instruction Table. */

 Use a kmalloc'ed bounce buffer to guarantee it is DMA-able. */

 Fix endianness of the 4BAIT DWORDs. */

	/*

	 * Compute the subset of (Fast) Read commands for which the 4-byte

	 * version is supported.

	/*

	 * Compute the subset of Page Program commands for which the 4-byte

	 * version is supported.

		/*

		 * The 4 Byte Address Instruction (Optional) Table is the only

		 * SFDP table that indicates support for Page Program Commands.

		 * Bypass the params->hwcaps.mask and consider 4BAIT the biggest

		 * authority for specifying Page Program support.

	/*

	 * Compute the subset of Sector Erase commands for which the 4-byte

	 * version is supported.

 Replicate the sort done for the map's erase types in BFPT. */

	/*

	 * We need at least one 4-byte op code per read, program and erase

	 * operation; the .read(), .write() and .erase() hooks share the

	 * nor->addr_width value.

	/*

	 * Discard all operations from the 4-byte instruction set which are

	 * not supported by this memory.

 Use the 4-byte address instruction set. */

 4BAIT is the only SFDP table that indicates page program support. */

		/*

		 * Since xSPI Page Program opcode is backward compatible with

		 * Legacy SPI, use Legacy SPI opcode there as well.

	/*

	 * We set SNOR_F_HAS_4BAIT in order to skip spi_nor_set_4byte_opcodes()

	 * later because we already did the conversion to 4byte opcodes. Also,

	 * this latest function implements a legacy quirk for the erase size of

	 * Spansion memory. However this quirk is no longer needed with new

	 * SFDP compliant memories.

 fall through */

/**

 * spi_nor_parse_profile1() - parse the xSPI Profile 1.0 table

 * @nor:		pointer to a 'struct spi_nor'

 * @profile1_header:	pointer to the 'struct sfdp_parameter_header' describing

 *			the Profile 1.0 Table length and version.

 *

 * Return: 0 on success, -errno otherwise.

 Get 8D-8D-8D fast read opcode and dummy cycles. */

 Set the Read Status Register dummy cycles and dummy address bytes. */

	/*

	 * We don't know what speed the controller is running at. Find the

	 * dummy cycles for the fastest frequency the flash can run at to be

	 * sure we are never short of dummy cycles. A value of 0 means the

	 * frequency is not supported.

	 *

	 * Default to PROFILE1_DUMMY_DEFAULT if we don't find anything, and let

	 * flashes set the correct value if needed in their fixup hooks.

 Round up to an even value to avoid tripping controllers up. */

 Update the fast read settings. */

/**

 * spi_nor_parse_sccr() - Parse the Status, Control and Configuration Register

 *                        Map.

 * @nor:		pointer to a 'struct spi_nor'

 * @sccr_header:	pointer to the 'struct sfdp_parameter_header' describing

 *			the SCCR Map table length and version.

 *

 * Return: 0 on success, -errno otherwise.

/**

 * spi_nor_parse_sfdp() - parse the Serial Flash Discoverable Parameters.

 * @nor:		pointer to a 'struct spi_nor'

 *

 * The Serial Flash Discoverable Parameters are described by the JEDEC JESD216

 * specification. This is a standard which tends to supported by almost all

 * (Q)SPI memory manufacturers. Those hard-coded tables allow us to learn at

 * runtime the main parameters needed to perform basic SPI flash operations such

 * as Fast Read, Page Program or Sector Erase commands.

 *

 * Return: 0 on success, -errno otherwise.

 Get the SFDP header. */

 Check the SFDP header version. */

	/*

	 * Verify that the first and only mandatory parameter header is a

	 * Basic Flash Parameter Table header as specified in JESD216.

	/*

	 * Allocate memory then read all parameter headers with a single

	 * Read SFDP command. These parameter headers will actually be parsed

	 * twice: a first time to get the latest revision of the basic flash

	 * parameter table, then a second time to handle the supported optional

	 * tables.

	 * Hence we read the parameter headers once for all to reduce the

	 * processing time. Also we use kmalloc() instead of devm_kmalloc()

	 * because we don't need to keep these parameter headers: the allocated

	 * memory is always released with kfree() before exiting this function.

	/*

	 * Cache the complete SFDP data. It is not (easily) possible to fetch

	 * SFDP after probe time and we need it for the sysfs access.

	/*

	 * Limit the total size to a reasonable value to avoid allocating too

	 * much memory just of because the flash returned some insane values.

	/*

	 * The SFDP is organized in chunks of DWORDs. Thus, in theory, the

	 * sfdp_size should be a multiple of DWORDs. But in case a flash

	 * is not spec compliant, make sure that we have enough space to store

	 * the complete SFDP data.

	/*

	 * Check other parameter headers to get the latest revision of

	 * the basic flash parameter table.

 Parse optional parameter tables. */

			/*

			 * Let's not drop all information we extracted so far

			 * if optional table parsers fail. In case of failing,

			 * each optional parser is responsible to roll back to

			 * the previously known spi_nor data.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * SPI NOR driver for NXP SPI Flash Interface (SPIFI)

 *

 * Copyright (C) 2015 Joachim Eastwood <manabian@gmail.com>

 *

 * Based on Freescale QuadSPI driver:

 * Copyright (C) 2013 Freescale Semiconductor, Inc.

 NXP SPIFI registers, bits and macros */

 Memory mode supports address length between 1 and 4 */

 Setup control register defaults */

	/*

	 * The first read on a hard reset isn't reliable so do a

	 * dummy read of the id before calling spi_nor_scan().

	 * The reason for this problem is unknown.

	 *

	 * The official NXP spifilib uses more or less the same

	 * workaround that is applied here by reading the device

	 * id multiple times.

 Initialize and reset device */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ASPEED Static Memory Controller driver

 *

 * Copyright (c) 2015-2016, IBM Corporation.

/*

 * The driver only support SPI flash

 maximum size of chip window */

 number of chip enables */

 flash type field exists in config reg */

 shift for write enable bit for CE0 */

 offset in regs of ctl for CE0 */

 base value without mode for other commands */

 command reg for (maybe fast) reads */

 command reg for writes */

 control register */

 base of chip window */

 chip mapping window size */

 control settings */

 what type of flash */

 controller access mutex */

 type info of controller */

 controller registers */

 per-chip windows resource */

 full mapping window size */

 pointers to attached chips */

/*

 * SPI Flash Configuration Register (AST2500 SPI)

 *     or

 * Type setting Register (AST2500 FMC).

 * CE0 and CE1 can only be of type SPI. CE2 can be of type NOR but the

 * driver does not support it.

 1 */

 AST2500 FMC only */

 AST2500 FMC only */

 AST2500 FMC only */

/*

 * CE Control Register

/*

 * CEx Control Register

 0 = 16T ... 15 = 1T   T=HCLK */

 others */

 AST2400 SPI */

/*

 * The Segment Register uses a 8MB unit to encode the start address

 * and the end address of the mapping window of a flash SPI slave :

 *

 *        | byte 1 | byte 2 | byte 3 | byte 4 |

 *        +--------+--------+--------+--------+

 *        |  end   |  start |   0    |   0    |

/*

 * In user mode all data bytes read or written to the chip decode address

 * range are transferred to or from the SPI bus. The range is treated as a

 * fifo of arbitratry 1, 2, or 4 byte width but each write has to be aligned

 * to its size. The address within the multiple 8kB range is ignored when

 * sending bytes to the SPI bus.

 *

 * On the arm architecture, as of Linux version 4.3, memcpy_fromio and

 * memcpy_toio on little endian targets use the optimized memcpy routines

 * that were designed for well behavied memory storage. These routines

 * have a stutter if the source and destination are not both word aligned,

 * once with a duplicate access to the source after aligning to the

 * destination to a word boundary, and again with a duplicate access to

 * the source when the final byte count is not word aligned.

 *

 * When writing or reading the fifo this stutter discards data or sends

 * too much data to the fifo and can not be used by this driver.

 *

 * While the low level io string routines that implement the insl family do

 * the desired accesses and memory increments, the cross architecture io

 * macros make them essentially impossible to use on a memory mapped address

 * instead of a a token from the call to iomap of an io port.

 *

 * These fifo routines use readl and friends to a constant io port and update

 * the memory buffer pointer and count via explicit code. The final updates

 * to len are optimistically suppressed.

	/*

	 * When the chip is controlled in user mode, we need write

	 * access to send the opcodes to it. So check the config.

 stop user CE control */

 default to fread or read mode */

/*

 * Each chip has a mapping window defined by a segment address

 * register defining a start and an end address on the AHB bus. These

 * addresses can be configured to fit the chip size and offer a

 * contiguous memory region across chips. For the moment, we only

 * check that each chip segment is valid.

	/*

	 * If the chip size is not specified, use the default segment

	 * size, but take into account the possible overlap with the

	 * previous segment

	/*

	 * The segment cannot exceed the maximum window size of the

	 * controller.

	/*

	 * Restore default value if something goes wrong. The chip

	 * might have set some bogus value and we would loose access

	 * to the chip.

/*

 * The segment register defines the mapping window on the AHB bus and

 * it needs to be configured depending on the chip size. The segment

 * register of the following CE also needs to be tuned in order to

 * provide a contiguous window across multiple chips.

 *

 * This is expected to be called in increasing CE order

	/*

	 * Each controller has a chip size limit for direct memory

	 * access

	/*

	 * The AST2400 SPI controller only handles one chip and does

	 * not have segment registers. Let's use the chip size for the

	 * AHB window.

	/*

	 * The AST2500 SPI controller has a HW bug when the CE0 chip

	 * size reaches 128MB. Enforce a size limit of 120MB to

	 * prevent the controller from using bogus settings in the

	 * segment register.

	/*

	 * As a start address for the current segment, use the default

	 * start address if we are handling CE0 or use the previous

	 * segment ending address

 Update chip base address on the AHB bus */

	/*

	 * Now, make sure the next segment does not overlap with the

	 * current one we just configured, even if there is no

	 * available chip. That could break access in Command Mode.

/*

 * The first chip of the AST2500 FMC flash controller is strapped by

 * hardware, or autodetected, but other chips need to be set. Enforce

 * the 4B setting for all chips.

/*

 * The AST2400 SPI flash controller does not have a CE Control

 * register. It uses the CE0 control register to set 4Byte mode at the

 * controller level.

	/*

	 * Always turn on the write enable bit to allow opcodes to be

	 * sent in user mode.

 The driver only supports SPI type flash */

	/*

	 * Configure chip base address in memory

	/*

	 * Get value of the inherited control register. U-Boot usually

	 * does some timing calibration on the FMC chip, so it's good

	 * to keep them. In the future, we should handle calibration

	 * from Linux.

	/*

	 * Retain the prior value of the control register as the

	 * default if it was normal access mode. Otherwise start with

	 * the sanitized base value set to read mode.

 This is for direct AHB access when using Command Mode. */

	/*

	 * base mode has not been optimized yet. use it for writes.

	/*

	 * TODO: Adjust clocks if fast read is supported and interpret

	 * SPI NOR flags to adjust controller settings.

 This driver does not support NAND or NOR flash devices. */

		/*

		 * TODO: Add support for Dual and Quad SPI protocols

		 * attach when board support is present as determined

		 * by of property.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Intel PCH/PCU SPI flash driver.

 *

 * Copyright (C) 2016, Intel Corporation

 * Author: Mika Westerberg <mika.westerberg@linux.intel.com>

 Offsets are from @ispi->base */

 HW sequencer opcodes */

 Offset is from @ispi->pregs */

 Offsets are from @ispi->sregs */

 CPU specifics */

 ms */

/**

 * struct intel_spi - Driver private data

 * @dev: Device pointer

 * @info: Pointer to board specific info

 * @nor: SPI NOR layer structure

 * @base: Beginning of MMIO space

 * @pregs: Start of protection registers

 * @sregs: Start of software sequencer registers

 * @nregions: Maximum number of regions

 * @pr_num: Maximum number of protected range registers

 * @writeable: Is the chip writeable

 * @locked: Is SPI setting locked

 * @swseq_reg: Use SW sequencer in register reads/writes

 * @swseq_erase: Use SW sequencer in erase operation

 * @erase_64k: 64k erase supported

 * @atomic_preopcode: Holds preopcode when atomic sequence is requested

 * @opcodes: Opcodes which are supported. This are programmed by BIOS

 *           before it locks down the controller.

 Reads max INTEL_SPI_FIFO_SZ bytes from the device fifo */

 Writes max INTEL_SPI_FIFO_SZ bytes to the device fifo */

 Disable write protection */

 Disable #SMI generation from HW sequencer */

	/*

	 * Determine whether erase operation should use HW or SW sequencer.

	 *

	 * The HW sequencer has a predefined list of opcodes, with only the

	 * erase opcode being programmable in LVSCC and UVSCC registers.

	 * If these registers don't contain a valid erase opcode, erase

	 * cannot be done using HW sequencer.

 SPI controller on Intel BXT supports 64K erase opcode */

	/*

	 * Some controllers can only do basic operations using hardware

	 * sequencer. All other operations are supposed to be carried out

	 * using software sequencer.

 Disable #SMI generation from SW sequencer */

 Check controller's lock status */

		/*

		 * BIOS programs allowed opcodes and then locks down the

		 * register. So read back what opcodes it decided to support.

		 * That's the set we are going to support as well.

 The lock is off, so just use index 0 */

	/*

	 * Always clear it after each SW sequencer operation regardless

	 * of whether it is successful or not.

 Only mark 'Data Cycle' bit when there is data to be transferred */

 Pick matching preopcode for the atomic sequence */

 Do nothing */

 Enable atomic sequence */

 Address of the first chip */

	/*

	 * This is handled with atomic operation and preop code in Intel

	 * controller so we only verify that it is available. If the

	 * controller is not locked, program the opcode to the PREOP

	 * register for later use.

	 *

	 * When hardware sequencer is used there is no need to program

	 * any opcodes (it handles them automatically as part of a command).

		/*

		 * This enables atomic sequence on next SW sycle. Will

		 * be cleared after next operation.

	/*

	 * We hope that HW sequencer will do the right thing automatically and

	 * with the SW sequencer we cannot use preopcode anyway, so just ignore

	 * the Write Disable operation and pretend it was completed

	 * successfully.

 Write the value beforehand */

	/*

	 * Atomic sequence is not expected with HW sequencer reads. Make

	 * sure it is cleared regardless.

 Read cannot cross 4K boundary */

 Not needed with HW sequencer write, make sure it is cleared */

 Write cannot cross 4K boundary */

 Start the write now */

 If the hardware can do 64k erase use that when possible */

 Not needed with HW sequencer erase, make sure it is cleared */

/*

 * There will be a single partition holding all enabled flash regions. We

 * call this "BIOS".

 Start from the mandatory descriptor region */

	/*

	 * Now try to find where this partition ends based on the flash

	 * region registers.

		/*

		 * If any of the regions have protection bits set, make the

		 * whole partition read-only to be on the safe side.

 Prevent writes if not explicitly enabled */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Intel PCH/PCU SPI flash platform driver.

 *

 * Copyright (C) 2016, Intel Corporation

 * Author: Mika Westerberg <mika.westerberg@linux.intel.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * HiSilicon FMC SPI NOR flash controller driver

 *

 * Copyright (c) 2015-2016 HiSilicon Technologies Co., Ltd.

 Hardware register offsets and field definitions */

/*

 * Get spi flash device information and register it as a mtd device.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Intel PCH/PCU SPI flash PCI driver.

 *

 * Copyright (C) 2016, Intel Corporation

 * Author: Mika Westerberg <mika.westerberg@linux.intel.com>

 Try to make the chip read/write */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) International Business Machines Corp., 2006

 * Copyright (c) Nokia Corporation, 2006, 2007

 *

 * Author: Artem Bityutskiy (Битюцкий Артём)

/*

 * UBI input/output sub-system.

 *

 * This sub-system provides a uniform way to work with all kinds of the

 * underlying MTD devices. It also implements handy functions for reading and

 * writing UBI headers.

 *

 * We are trying to have a paranoid mindset and not to trust to what we read

 * from the flash media in order to be more secure and robust. So this

 * sub-system validates every single header it reads from the flash media.

 *

 * Some words about how the eraseblock headers are stored.

 *

 * The erase counter header is always stored at offset zero. By default, the

 * VID header is stored after the EC header at the closest aligned offset

 * (i.e. aligned to the minimum I/O unit size). Data starts next to the VID

 * header at the closest aligned offset. But this default layout may be

 * changed. For example, for different reasons (e.g., optimization) UBI may be

 * asked to put the VID header at further offset, and even at an unaligned

 * offset. Of course, if the offset of the VID header is unaligned, UBI adds

 * proper padding in front of it. Data offset may also be changed but it has to

 * be aligned.

 *

 * About minimal I/O units. In general, UBI assumes flash device model where

 * there is only one minimal I/O unit size. E.g., in case of NOR flash it is 1,

 * in case of NAND flash it is a NAND page, etc. This is reported by MTD in the

 * @ubi->mtd->writesize field. But as an exception, UBI admits use of another

 * (smaller) minimal I/O unit size for EC and VID headers to make it possible

 * to do different optimizations.

 *

 * This is extremely useful in case of NAND flashes which admit of several

 * write operations to one NAND page. In this case UBI can fit EC and VID

 * headers at one NAND page. Thus, UBI may use "sub-page" size as the minimal

 * I/O unit for the headers (the @ubi->hdrs_min_io_size field). But it still

 * reports NAND page size (@ubi->min_io_size) as a minimal I/O unit for the UBI

 * users.

 *

 * Example: some Samsung NANDs with 2KiB pages allow 4x 512-byte writes, so

 * although the minimal I/O unit is 2K, UBI uses 512 bytes for EC and VID

 * headers.

 *

 * Q: why not just to treat sub-page as a minimal I/O unit of this flash

 * device, e.g., make @ubi->min_io_size = 512 in the example above?

 *

 * A: because when writing a sub-page, MTD still writes a full 2K page but the

 * bytes which are not relevant to the sub-page are 0xFF. So, basically,

 * writing 4x512 sub-pages is 4 times slower than writing one 2KiB NAND page.

 * Thus, we prefer to use sub-pages only for EC and VID headers.

 *

 * As it was noted above, the VID header may start at a non-aligned offset.

 * For example, in case of a 2KiB page NAND flash with a 512 bytes sub-page,

 * the VID header may reside at offset 1984 which is the last 64 bytes of the

 * last sub-page (EC header is always at offset zero). This causes some

 * difficulties when reading and writing VID headers.

 *

 * Suppose we have a 64-byte buffer and we read a VID header at it. We change

 * the data and want to write this VID header out. As we can only write in

 * 512-byte chunks, we have to allocate one more buffer and copy our VID header

 * to offset 448 of this buffer.

 *

 * The I/O sub-system does the following trick in order to avoid this extra

 * copy. It always allocates a @ubi->vid_hdr_alsize bytes buffer for the VID

 * header and returns a pointer to offset @ubi->vid_hdr_shift of this buffer.

 * When the VID header is being written out, it shifts the VID header pointer

 * back and writes the whole sub-page.

/**

 * ubi_io_read - read data from a physical eraseblock.

 * @ubi: UBI device description object

 * @buf: buffer where to store the read data

 * @pnum: physical eraseblock number to read from

 * @offset: offset within the physical eraseblock from where to read

 * @len: how many bytes to read

 *

 * This function reads data from offset @offset of physical eraseblock @pnum

 * and stores the read data in the @buf buffer. The following return codes are

 * possible:

 *

 * o %0 if all the requested data were successfully read;

 * o %UBI_IO_BITFLIPS if all the requested data were successfully read, but

 *   correctable bit-flips were detected; this is harmless but may indicate

 *   that this eraseblock may become bad soon (but do not have to);

 * o %-EBADMSG if the MTD subsystem reported about data integrity problems, for

 *   example it can be an ECC error in case of NAND; this most probably means

 *   that the data is corrupted;

 * o %-EIO if some I/O error occurred;

 * o other negative error codes in case of other errors.

	/*

	 * Deliberately corrupt the buffer to improve robustness. Indeed, if we

	 * do not do this, the following may happen:

	 * 1. The buffer contains data from previous operation, e.g., read from

	 *    another PEB previously. The data looks like expected, e.g., if we

	 *    just do not read anything and return - the caller would not

	 *    notice this. E.g., if we are reading a VID header, the buffer may

	 *    contain a valid VID header from another PEB.

	 * 2. The driver is buggy and returns us success or -EBADMSG or

	 *    -EUCLEAN, but it does not actually put any data to the buffer.

	 *

	 * This may confuse UBI or upper layers - they may think the buffer

	 * contains valid data while in fact it is just old data. This is

	 * especially possible because UBI (and UBIFS) relies on CRC, and

	 * treats data as correct even in case of ECC errors if the CRC is

	 * correct.

	 *

	 * Try to prevent this situation by changing the first byte of the

	 * buffer.

			/*

			 * -EUCLEAN is reported if there was a bit-flip which

			 * was corrected, so this is harmless.

			 *

			 * We do not report about it here unless debugging is

			 * enabled. A corresponding message will be printed

			 * later, when it is has been scrubbed.

		/*

		 * The driver should never return -EBADMSG if it failed to read

		 * all the requested data. But some buggy drivers might do

		 * this, so we change it to -EIO.

/**

 * ubi_io_write - write data to a physical eraseblock.

 * @ubi: UBI device description object

 * @buf: buffer with the data to write

 * @pnum: physical eraseblock number to write to

 * @offset: offset within the physical eraseblock where to write

 * @len: how many bytes to write

 *

 * This function writes @len bytes of data from buffer @buf to offset @offset

 * of physical eraseblock @pnum. If all the data were successfully written,

 * zero is returned. If an error occurred, this function returns a negative

 * error code. If %-EIO is returned, the physical eraseblock most probably went

 * bad.

 *

 * Note, in case of an error, it is possible that something was still written

 * to the flash media, but may be some garbage.

 The area we are writing to has to contain all 0xFF bytes */

		/*

		 * We write to the data area of the physical eraseblock. Make

		 * sure it has valid EC and VID headers.

		/*

		 * Since we always write sequentially, the rest of the PEB has

		 * to contain only 0xFF bytes.

/**

 * do_sync_erase - synchronously erase a physical eraseblock.

 * @ubi: UBI device description object

 * @pnum: the physical eraseblock number to erase

 *

 * This function synchronously erases physical eraseblock @pnum and returns

 * zero in case of success and a negative error code in case of failure. If

 * %-EIO is returned, the physical eraseblock most probably went bad.

 Patterns to write to a physical eraseblock when torturing it */

/**

 * torture_peb - test a supposedly bad physical eraseblock.

 * @ubi: UBI device description object

 * @pnum: the physical eraseblock number to test

 *

 * This function returns %-EIO if the physical eraseblock did not pass the

 * test, a positive number of erase operations done if the test was

 * successfully passed, and other negative error codes in case of other errors.

 Make sure the PEB contains only 0xFF bytes */

 Write a pattern and check it */

		/*

		 * If a bit-flip or data integrity error was detected, the test

		 * has not passed because it happened on a freshly erased

		 * physical eraseblock which means something is wrong with it.

/**

 * nor_erase_prepare - prepare a NOR flash PEB for erasure.

 * @ubi: UBI device description object

 * @pnum: physical eraseblock number to prepare

 *

 * NOR flash, or at least some of them, have peculiar embedded PEB erasure

 * algorithm: the PEB is first filled with zeroes, then it is erased. And

 * filling with zeroes starts from the end of the PEB. This was observed with

 * Spansion S29GL512N NOR flash.

 *

 * This means that in case of a power cut we may end up with intact data at the

 * beginning of the PEB, and all zeroes at the end of PEB. In other words, the

 * EC and VID headers are OK, but a large chunk of data at the end of PEB is

 * zeroed. This makes UBI mistakenly treat this PEB as used and associate it

 * with an LEB, which leads to subsequent failures (e.g., UBIFS fails).

 *

 * This function is called before erasing NOR PEBs and it zeroes out EC and VID

 * magic numbers in order to invalidate them and prevent the failures. Returns

 * zero in case of success and a negative error code in case of failure.

	/*

	 * Note, we cannot generally define VID header buffers on stack,

	 * because of the way we deal with these buffers (see the header

	 * comment in this file). But we know this is a NOR-specific piece of

	 * code, so we can do this. But yes, this is error-prone and we should

	 * (pre-)allocate VID header buffer instead.

	/*

	 * If VID or EC is valid, we have to corrupt them before erasing.

	 * It is important to first invalidate the EC header, and then the VID

	 * header. Otherwise a power cut may lead to valid EC header and

	 * invalid VID header, in which case UBI will treat this PEB as

	 * corrupted and will try to preserve it, and print scary warnings.

	/*

	 * The PEB contains a valid VID or EC header, but we cannot invalidate

	 * it. Supposedly the flash media or the driver is screwed up, so

	 * return an error.

/**

 * ubi_io_sync_erase - synchronously erase a physical eraseblock.

 * @ubi: UBI device description object

 * @pnum: physical eraseblock number to erase

 * @torture: if this physical eraseblock has to be tortured

 *

 * This function synchronously erases physical eraseblock @pnum. If @torture

 * flag is not zero, the physical eraseblock is checked by means of writing

 * different patterns to it and reading them back. If the torturing is enabled,

 * the physical eraseblock is erased more than once.

 *

 * This function returns the number of erasures made in case of success, %-EIO

 * if the erasure failed or the torturing test failed, and other negative error

 * codes in case of other errors. Note, %-EIO means that the physical

 * eraseblock is bad.

	/*

	 * If the flash is ECC-ed then we have to erase the ECC block before we

	 * can write to it. But the write is in preparation to an erase in the

	 * first place. This means we cannot zero out EC and VID before the

	 * erase and we just have to hope the flash starts erasing from the

	 * start of the page.

/**

 * ubi_io_is_bad - check if a physical eraseblock is bad.

 * @ubi: UBI device description object

 * @pnum: the physical eraseblock number to check

 *

 * This function returns a positive number if the physical eraseblock is bad,

 * zero if not, and a negative error code if an error occurred.

/**

 * ubi_io_mark_bad - mark a physical eraseblock as bad.

 * @ubi: UBI device description object

 * @pnum: the physical eraseblock number to mark

 *

 * This function returns zero in case of success and a negative error code in

 * case of failure.

/**

 * validate_ec_hdr - validate an erase counter header.

 * @ubi: UBI device description object

 * @ec_hdr: the erase counter header to check

 *

 * This function returns zero if the erase counter header is OK, and %1 if

 * not.

/**

 * ubi_io_read_ec_hdr - read and check an erase counter header.

 * @ubi: UBI device description object

 * @pnum: physical eraseblock to read from

 * @ec_hdr: a &struct ubi_ec_hdr object where to store the read erase counter

 * header

 * @verbose: be verbose if the header is corrupted or was not found

 *

 * This function reads erase counter header from physical eraseblock @pnum and

 * stores it in @ec_hdr. This function also checks CRC checksum of the read

 * erase counter header. The following codes may be returned:

 *

 * o %0 if the CRC checksum is correct and the header was successfully read;

 * o %UBI_IO_BITFLIPS if the CRC is correct, but bit-flips were detected

 *   and corrected by the flash driver; this is harmless but may indicate that

 *   this eraseblock may become bad soon (but may be not);

 * o %UBI_IO_BAD_HDR if the erase counter header is corrupted (a CRC error);

 * o %UBI_IO_BAD_HDR_EBADMSG is the same as %UBI_IO_BAD_HDR, but there also was

 *   a data integrity error (uncorrectable ECC error in case of NAND);

 * o %UBI_IO_FF if only 0xFF bytes were read (the PEB is supposedly empty)

 * o a negative error code in case of failure.

		/*

		 * We read all the data, but either a correctable bit-flip

		 * occurred, or MTD reported a data integrity error

		 * (uncorrectable ECC error in case of NAND). The former is

		 * harmless, the later may mean that the read data is

		 * corrupted. But we have a CRC check-sum and we will detect

		 * this. If the EC header is still OK, we just report this as

		 * there was a bit-flip, to force scrubbing.

		/*

		 * The magic field is wrong. Let's check if we have read all

		 * 0xFF. If yes, this physical eraseblock is assumed to be

		 * empty.

 The physical eraseblock is supposedly empty */

		/*

		 * This is not a valid erase counter header, and these are not

		 * 0xFF bytes. Report that the header is corrupted.

 And of course validate what has just been read from the media */

	/*

	 * If there was %-EBADMSG, but the header CRC is still OK, report about

	 * a bit-flip to force scrubbing on this PEB.

/**

 * ubi_io_write_ec_hdr - write an erase counter header.

 * @ubi: UBI device description object

 * @pnum: physical eraseblock to write to

 * @ec_hdr: the erase counter header to write

 *

 * This function writes erase counter header described by @ec_hdr to physical

 * eraseblock @pnum. It also fills most fields of @ec_hdr before writing, so

 * the caller do not have to fill them. Callers must only fill the @ec_hdr->ec

 * field.

 *

 * This function returns zero in case of success and a negative error code in

 * case of failure. If %-EIO is returned, the physical eraseblock most probably

 * went bad.

/**

 * validate_vid_hdr - validate a volume identifier header.

 * @ubi: UBI device description object

 * @vid_hdr: the volume identifier header to check

 *

 * This function checks that data stored in the volume identifier header

 * @vid_hdr. Returns zero if the VID header is OK and %1 if not.

		/*

		 * Although from high-level point of view static volumes may

		 * contain zero bytes of data, but no VID headers can contain

		 * zero at these fields, because they empty volumes do not have

		 * mapped logical eraseblocks.

/**

 * ubi_io_read_vid_hdr - read and check a volume identifier header.

 * @ubi: UBI device description object

 * @pnum: physical eraseblock number to read from

 * @vidb: the volume identifier buffer to store data in

 * @verbose: be verbose if the header is corrupted or wasn't found

 *

 * This function reads the volume identifier header from physical eraseblock

 * @pnum and stores it in @vidb. It also checks CRC checksum of the read

 * volume identifier header. The error codes are the same as in

 * 'ubi_io_read_ec_hdr()'.

 *

 * Note, the implementation of this function is also very similar to

 * 'ubi_io_read_ec_hdr()', so refer commentaries in 'ubi_io_read_ec_hdr()'.

/**

 * ubi_io_write_vid_hdr - write a volume identifier header.

 * @ubi: UBI device description object

 * @pnum: the physical eraseblock number to write to

 * @vidb: the volume identifier buffer to write

 *

 * This function writes the volume identifier header described by @vid_hdr to

 * physical eraseblock @pnum. This function automatically fills the

 * @vidb->hdr->magic and the @vidb->hdr->version fields, as well as calculates

 * header CRC checksum and stores it at vidb->hdr->hdr_crc.

 *

 * This function returns zero in case of success and a negative error code in

 * case of failure. If %-EIO is returned, the physical eraseblock probably went

 * bad.

/**

 * self_check_not_bad - ensure that a physical eraseblock is not bad.

 * @ubi: UBI device description object

 * @pnum: physical eraseblock number to check

 *

 * This function returns zero if the physical eraseblock is good, %-EINVAL if

 * it is bad and a negative error code if an error occurred.

/**

 * self_check_ec_hdr - check if an erase counter header is all right.

 * @ubi: UBI device description object

 * @pnum: physical eraseblock number the erase counter header belongs to

 * @ec_hdr: the erase counter header to check

 *

 * This function returns zero if the erase counter header contains valid

 * values, and %-EINVAL if not.

/**

 * self_check_peb_ec_hdr - check erase counter header.

 * @ubi: UBI device description object

 * @pnum: the physical eraseblock number to check

 *

 * This function returns zero if the erase counter header is all right and and

 * a negative error code if not or if an error occurred.

/**

 * self_check_vid_hdr - check that a volume identifier header is all right.

 * @ubi: UBI device description object

 * @pnum: physical eraseblock number the volume identifier header belongs to

 * @vid_hdr: the volume identifier header to check

 *

 * This function returns zero if the volume identifier header is all right, and

 * %-EINVAL if not.

/**

 * self_check_peb_vid_hdr - check volume identifier header.

 * @ubi: UBI device description object

 * @pnum: the physical eraseblock number to check

 *

 * This function returns zero if the volume identifier header is all right,

 * and a negative error code if not or if an error occurred.

/**

 * self_check_write - make sure write succeeded.

 * @ubi: UBI device description object

 * @buf: buffer with data which were written

 * @pnum: physical eraseblock number the data were written to

 * @offset: offset within the physical eraseblock the data were written to

 * @len: how many bytes were written

 *

 * This functions reads data which were recently written and compares it with

 * the original data buffer - the data have to match. Returns zero if the data

 * match and a negative error code if not or in case of failure.

/**

 * ubi_self_check_all_ff - check that a region of flash is empty.

 * @ubi: UBI device description object

 * @pnum: the physical eraseblock number to check

 * @offset: the starting offset within the physical eraseblock to check

 * @len: the length of the region to check

 *

 * This function returns zero if only 0xFF bytes are present at offset

 * @offset of the physical eraseblock @pnum, and a negative error code if not

 * or if an error occurred.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) International Business Machines Corp., 2006

 *

 * Author: Artem Bityutskiy (Битюцкий Артём), Joern Engel

/*

 * This is a small driver which implements fake MTD devices on top of UBI

 * volumes. This sounds strange, but it is in fact quite useful to make

 * MTD-oriented software (including all the legacy software) work on top of

 * UBI.

 *

 * Gluebi emulates MTD devices of "MTD_UBIVOLUME" type. Their minimal I/O unit

 * size (@mtd->writesize) is equivalent to the UBI minimal I/O unit. The

 * eraseblock size is equivalent to the logical eraseblock size of the volume.

/**

 * struct gluebi_device - a gluebi device description data structure.

 * @mtd: emulated MTD device description object

 * @refcnt: gluebi device reference count

 * @desc: UBI volume descriptor

 * @ubi_num: UBI device number this gluebi device works on

 * @vol_id: ID of UBI volume this gluebi device works on

 * @list: link in a list of gluebi devices

 List of all gluebi devices */

/**

 * find_gluebi_nolock - find a gluebi device.

 * @ubi_num: UBI device number

 * @vol_id: volume ID

 *

 * This function seraches for gluebi device corresponding to UBI device

 * @ubi_num and UBI volume @vol_id. Returns the gluebi device description

 * object in case of success and %NULL in case of failure. The caller has to

 * have the &devices_mutex locked.

/**

 * gluebi_get_device - get MTD device reference.

 * @mtd: the MTD device description object

 *

 * This function is called every time the MTD device is being opened and

 * implements the MTD get_device() operation. Returns zero in case of success

 * and a negative error code in case of failure.

		/*

		 * The MTD device is already referenced and this is just one

		 * more reference. MTD allows many users to open the same

		 * volume simultaneously and do not distinguish between

		 * readers/writers/exclusive/meta openers as UBI does. So we do

		 * not open the UBI volume again - just increase the reference

		 * counter and return.

	/*

	 * This is the first reference to this UBI volume via the MTD device

	 * interface. Open the corresponding volume in read-write mode.

/**

 * gluebi_put_device - put MTD device reference.

 * @mtd: the MTD device description object

 *

 * This function is called every time the MTD device is being put. Returns

 * zero in case of success and a negative error code in case of failure.

/**

 * gluebi_read - read operation of emulated MTD devices.

 * @mtd: MTD device description object

 * @from: absolute offset from where to read

 * @len: how many bytes to read

 * @retlen: count of read bytes is returned here

 * @buf: buffer to store the read data

 *

 * This function returns zero in case of success and a negative error code in

 * case of failure.

/**

 * gluebi_write - write operation of emulated MTD devices.

 * @mtd: MTD device description object

 * @to: absolute offset where to write

 * @len: how many bytes to write

 * @retlen: count of written bytes is returned here

 * @buf: buffer with data to write

 *

 * This function returns zero in case of success and a negative error code in

 * case of failure.

/**

 * gluebi_erase - erase operation of emulated MTD devices.

 * @mtd: the MTD device description object

 * @instr: the erase operation description

 *

 * This function calls the erase callback when finishes. Returns zero in case

 * of success and a negative error code in case of failure.

	/*

	 * MTD erase operations are synchronous, so we have to make sure the

	 * physical eraseblock is wiped out.

	 *

	 * Thus, perform leb_erase instead of leb_unmap operation - leb_erase

	 * will wait for the end of operations

/**

 * gluebi_create - create a gluebi device for an UBI volume.

 * @di: UBI device description object

 * @vi: UBI volume description object

 *

 * This function is called when a new UBI volume is created in order to create

 * corresponding fake MTD device. Returns zero in case of success and a

 * negative error code in case of failure.

	/*

	 * In case of dynamic a volume, MTD device size is just volume size. In

	 * case of a static volume the size is equivalent to the amount of data

	 * bytes.

 Just a sanity check - make sure this gluebi device does not exist */

/**

 * gluebi_remove - remove a gluebi device.

 * @vi: UBI volume description object

 *

 * This function is called when an UBI volume is removed and it removes

 * corresponding fake MTD device. Returns zero in case of success and a

 * negative error code in case of failure.

/**

 * gluebi_updated - UBI volume was updated notifier.

 * @vi: volume info structure

 *

 * This function is called every time an UBI volume is updated. It does nothing

 * if te volume @vol is dynamic, and changes MTD device size if the

 * volume is static. This is needed because static volumes cannot be read past

 * data they contain. This function returns zero in case of success and a

 * negative error code in case of error.

/**

 * gluebi_resized - UBI volume was re-sized notifier.

 * @vi: volume info structure

 *

 * This function is called every time an UBI volume is re-size. It changes the

 * corresponding fake MTD device size. This function returns zero in case of

 * success and a negative error code in case of error.

/**

 * gluebi_notify - UBI notification handler.

 * @nb: registered notifier block

 * @l: notification type

 * @ns_ptr: pointer to the &struct ubi_notification object

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) International Business Machines Corp., 2006

 *

 * Author: Artem Bityutskiy (Битюцкий Артём)

 This file mostly implements UBI kernel API functions */

/**

 * ubi_do_get_device_info - get information about UBI device.

 * @ubi: UBI device description object

 * @di: the information is stored here

 *

 * This function is the same as 'ubi_get_device_info()', but it assumes the UBI

 * device is locked and cannot disappear.

/**

 * ubi_get_device_info - get information about UBI device.

 * @ubi_num: UBI device number

 * @di: the information is stored here

 *

 * This function returns %0 in case of success, %-EINVAL if the UBI device

 * number is invalid, and %-ENODEV if there is no such UBI device.

/**

 * ubi_do_get_volume_info - get information about UBI volume.

 * @ubi: UBI device description object

 * @vol: volume description object

 * @vi: the information is stored here

/**

 * ubi_get_volume_info - get information about UBI volume.

 * @desc: volume descriptor

 * @vi: the information is stored here

/**

 * ubi_open_volume - open UBI volume.

 * @ubi_num: UBI device number

 * @vol_id: volume ID

 * @mode: open mode

 *

 * The @mode parameter specifies if the volume should be opened in read-only

 * mode, read-write mode, or exclusive mode. The exclusive mode guarantees that

 * nobody else will be able to open this volume. UBI allows to have many volume

 * readers and one writer at a time.

 *

 * If a static volume is being opened for the first time since boot, it will be

 * checked by this function, which means it will be fully read and the CRC

 * checksum of each logical eraseblock will be checked.

 *

 * This function returns volume descriptor in case of success and a negative

 * error code in case of failure.

	/*

	 * First of all, we have to get the UBI device to prevent its removal.

 This is the first open - check the volume */

/**

 * ubi_open_volume_nm - open UBI volume by name.

 * @ubi_num: UBI device number

 * @name: volume name

 * @mode: open mode

 *

 * This function is similar to 'ubi_open_volume()', but opens a volume by name.

 Walk all volumes of this UBI device */

	/*

	 * We should put the UBI device even in case of success, because

	 * 'ubi_open_volume()' took a reference as well.

/**

 * ubi_open_volume_path - open UBI volume by its character device node path.

 * @pathname: volume character device node path

 * @mode: open mode

 *

 * This function is similar to 'ubi_open_volume()', but opens a volume the path

 * to its character device node.

/**

 * ubi_close_volume - close UBI volume.

 * @desc: volume descriptor

/**

 * leb_read_sanity_check - does sanity checks on read requests.

 * @desc: volume descriptor

 * @lnum: logical eraseblock number to read from

 * @offset: offset within the logical eraseblock to read from

 * @len: how many bytes to read

 *

 * This function is used by ubi_leb_read() and ubi_leb_read_sg()

 * to perform sanity checks.

 Empty static UBI volume */

/**

 * ubi_leb_read - read data.

 * @desc: volume descriptor

 * @lnum: logical eraseblock number to read from

 * @buf: buffer where to store the read data

 * @offset: offset within the logical eraseblock to read from

 * @len: how many bytes to read

 * @check: whether UBI has to check the read data's CRC or not.

 *

 * This function reads data from offset @offset of logical eraseblock @lnum and

 * stores the data at @buf. When reading from static volumes, @check specifies

 * whether the data has to be checked or not. If yes, the whole logical

 * eraseblock will be read and its CRC checksum will be checked (i.e., the CRC

 * checksum is per-eraseblock). So checking may substantially slow down the

 * read speed. The @check argument is ignored for dynamic volumes.

 *

 * In case of success, this function returns zero. In case of failure, this

 * function returns a negative error code.

 *

 * %-EBADMSG error code is returned:

 * o for both static and dynamic volumes if MTD driver has detected a data

 *   integrity problem (unrecoverable ECC checksum mismatch in case of NAND);

 * o for static volumes in case of data CRC mismatch.

 *

 * If the volume is damaged because of an interrupted update this function just

 * returns immediately with %-EBADF error code.

/**

 * ubi_leb_read_sg - read data into a scatter gather list.

 * @desc: volume descriptor

 * @lnum: logical eraseblock number to read from

 * @sgl: UBI scatter gather list to store the read data

 * @offset: offset within the logical eraseblock to read from

 * @len: how many bytes to read

 * @check: whether UBI has to check the read data's CRC or not.

 *

 * This function works exactly like ubi_leb_read_sg(). But instead of

 * storing the read data into a buffer it writes to an UBI scatter gather

 * list.

/**

 * ubi_leb_write - write data.

 * @desc: volume descriptor

 * @lnum: logical eraseblock number to write to

 * @buf: data to write

 * @offset: offset within the logical eraseblock where to write

 * @len: how many bytes to write

 *

 * This function writes @len bytes of data from @buf to offset @offset of

 * logical eraseblock @lnum.

 *

 * This function takes care of physical eraseblock write failures. If write to

 * the physical eraseblock write operation fails, the logical eraseblock is

 * re-mapped to another physical eraseblock, the data is recovered, and the

 * write finishes. UBI has a pool of reserved physical eraseblocks for this.

 *

 * If all the data were successfully written, zero is returned. If an error

 * occurred and UBI has not been able to recover from it, this function returns

 * a negative error code. Note, in case of an error, it is possible that

 * something was still written to the flash media, but that may be some

 * garbage.

 *

 * If the volume is damaged because of an interrupted update this function just

 * returns immediately with %-EBADF code.

/*

 * ubi_leb_change - change logical eraseblock atomically.

 * @desc: volume descriptor

 * @lnum: logical eraseblock number to change

 * @buf: data to write

 * @len: how many bytes to write

 *

 * This function changes the contents of a logical eraseblock atomically. @buf

 * has to contain new logical eraseblock data, and @len - the length of the

 * data, which has to be aligned. The length may be shorter than the logical

 * eraseblock size, ant the logical eraseblock may be appended to more times

 * later on. This function guarantees that in case of an unclean reboot the old

 * contents is preserved. Returns zero in case of success and a negative error

 * code in case of failure.

/**

 * ubi_leb_erase - erase logical eraseblock.

 * @desc: volume descriptor

 * @lnum: logical eraseblock number

 *

 * This function un-maps logical eraseblock @lnum and synchronously erases the

 * correspondent physical eraseblock. Returns zero in case of success and a

 * negative error code in case of failure.

 *

 * If the volume is damaged because of an interrupted update this function just

 * returns immediately with %-EBADF code.

/**

 * ubi_leb_unmap - un-map logical eraseblock.

 * @desc: volume descriptor

 * @lnum: logical eraseblock number

 *

 * This function un-maps logical eraseblock @lnum and schedules the

 * corresponding physical eraseblock for erasure, so that it will eventually be

 * physically erased in background. This operation is much faster than the

 * erase operation.

 *

 * Unlike erase, the un-map operation does not guarantee that the logical

 * eraseblock will contain all 0xFF bytes when UBI is initialized again. For

 * example, if several logical eraseblocks are un-mapped, and an unclean reboot

 * happens after this, the logical eraseblocks will not necessarily be

 * un-mapped again when this MTD device is attached. They may actually be

 * mapped to the same physical eraseblocks again. So, this function has to be

 * used with care.

 *

 * In other words, when un-mapping a logical eraseblock, UBI does not store

 * any information about this on the flash media, it just marks the logical

 * eraseblock as "un-mapped" in RAM. If UBI is detached before the physical

 * eraseblock is physically erased, it will be mapped again to the same logical

 * eraseblock when the MTD device is attached again.

 *

 * The main and obvious use-case of this function is when the contents of a

 * logical eraseblock has to be re-written. Then it is much more efficient to

 * first un-map it, then write new data, rather than first erase it, then write

 * new data. Note, once new data has been written to the logical eraseblock,

 * UBI guarantees that the old contents has gone forever. In other words, if an

 * unclean reboot happens after the logical eraseblock has been un-mapped and

 * then written to, it will contain the last written data.

 *

 * This function returns zero in case of success and a negative error code in

 * case of failure. If the volume is damaged because of an interrupted update

 * this function just returns immediately with %-EBADF code.

/**

 * ubi_leb_map - map logical eraseblock to a physical eraseblock.

 * @desc: volume descriptor

 * @lnum: logical eraseblock number

 *

 * This function maps an un-mapped logical eraseblock @lnum to a physical

 * eraseblock. This means, that after a successful invocation of this

 * function the logical eraseblock @lnum will be empty (contain only %0xFF

 * bytes) and be mapped to a physical eraseblock, even if an unclean reboot

 * happens.

 *

 * This function returns zero in case of success, %-EBADF if the volume is

 * damaged because of an interrupted update, %-EBADMSG if the logical

 * eraseblock is already mapped, and other negative error codes in case of

 * other failures.

/**

 * ubi_is_mapped - check if logical eraseblock is mapped.

 * @desc: volume descriptor

 * @lnum: logical eraseblock number

 *

 * This function checks if logical eraseblock @lnum is mapped to a physical

 * eraseblock. If a logical eraseblock is un-mapped, this does not necessarily

 * mean it will still be un-mapped after the UBI device is re-attached. The

 * logical eraseblock may become mapped to the physical eraseblock it was last

 * mapped to.

 *

 * This function returns %1 if the LEB is mapped, %0 if not, and a negative

 * error code in case of failure. If the volume is damaged because of an

 * interrupted update this function just returns immediately with %-EBADF error

 * code.

/**

 * ubi_sync - synchronize UBI device buffers.

 * @ubi_num: UBI device to synchronize

 *

 * The underlying MTD device may cache data in hardware or in software. This

 * function ensures the caches are flushed. Returns zero in case of success and

 * a negative error code in case of failure.

/**

 * ubi_flush - flush UBI work queue.

 * @ubi_num: UBI device to flush work queue

 * @vol_id: volume id to flush for

 * @lnum: logical eraseblock number to flush for

 *

 * This function executes all pending works for a particular volume id / logical

 * eraseblock number pair. If either value is set to %UBI_ALL, then it acts as

 * a wildcard for all of the corresponding volume numbers or logical

 * eraseblock numbers. It returns zero in case of success and a negative error

 * code in case of failure.

/**

 * ubi_register_volume_notifier - register a volume notifier.

 * @nb: the notifier description object

 * @ignore_existing: if non-zero, do not send "added" notification for all

 *                   already existing volumes

 *

 * This function registers a volume notifier, which means that

 * 'nb->notifier_call()' will be invoked when an UBI  volume is created,

 * removed, re-sized, re-named, or updated. The first argument of the function

 * is the notification type. The second argument is pointer to a

 * &struct ubi_notification object which describes the notification event.

 * Using UBI API from the volume notifier is prohibited.

 *

 * This function returns zero in case of success and a negative error code

 * in case of failure.

	/*

	 * We are going to walk all UBI devices and all volumes, and

	 * notify the user about existing volumes by the %UBI_VOLUME_ADDED

	 * event. We have to lock the @ubi_devices_mutex to make sure UBI

	 * devices do not disappear.

/**

 * ubi_unregister_volume_notifier - unregister the volume notifier.

 * @nb: the notifier description object

 *

 * This function unregisters volume notifier @nm and returns zero in case of

 * success and a negative error code in case of failure.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) International Business Machines Corp., 2006

 * Copyright (c) Nokia Corporation, 2006

 *

 * Author: Artem Bityutskiy (Битюцкий Артём)

 *

 * Jan 2007: Alexander Schmidt, hacked per-volume update.

/*

 * This file contains implementation of the volume update and atomic LEB change

 * functionality.

 *

 * The update operation is based on the per-volume update marker which is

 * stored in the volume table. The update marker is set before the update

 * starts, and removed after the update has been finished. So if the update was

 * interrupted by an unclean re-boot or due to some other reasons, the update

 * marker stays on the flash media and UBI finds it when it attaches the MTD

 * device next time. If the update marker is set for a volume, the volume is

 * treated as damaged and most I/O operations are prohibited. Only a new update

 * operation is allowed.

 *

 * Note, in general it is possible to implement the update operation as a

 * transaction with a roll-back capability.

/**

 * set_update_marker - set update marker.

 * @ubi: UBI device description object

 * @vol: volume description object

 *

 * This function sets the update marker flag for volume @vol. Returns zero

 * in case of success and a negative error code in case of failure.

/**

 * clear_update_marker - clear update marker.

 * @ubi: UBI device description object

 * @vol: volume description object

 * @bytes: new data size in bytes

 *

 * This function clears the update marker for volume @vol, sets new volume

 * data size and clears the "corrupted" flag (static volumes only). Returns

 * zero in case of success and a negative error code in case of failure.

/**

 * ubi_start_update - start volume update.

 * @ubi: UBI device description object

 * @vol: volume description object

 * @bytes: update bytes

 *

 * This function starts volume update operation. If @bytes is zero, the volume

 * is just wiped out. Returns zero in case of success and a negative error code

 * in case of failure.

 Before updating - wipe out the volume */

/**

 * ubi_start_leb_change - start atomic LEB change.

 * @ubi: UBI device description object

 * @vol: volume description object

 * @req: operation request

 *

 * This function starts atomic LEB change operation. Returns zero in case of

 * success and a negative error code in case of failure.

/**

 * write_leb - write update data.

 * @ubi: UBI device description object

 * @vol: volume description object

 * @lnum: logical eraseblock number

 * @buf: data to write

 * @len: data size

 * @used_ebs: how many logical eraseblocks will this volume contain (static

 * volumes only)

 *

 * This function writes update data to corresponding logical eraseblock. In

 * case of dynamic volume, this function checks if the data contains 0xFF bytes

 * at the end. If yes, the 0xFF bytes are cut and not written. So if the whole

 * buffer contains only 0xFF bytes, the LEB is left unmapped.

 *

 * The reason why we skip the trailing 0xFF bytes in case of dynamic volume is

 * that we want to make sure that more data may be appended to the logical

 * eraseblock in future. Indeed, writing 0xFF bytes may have side effects and

 * this PEB won't be writable anymore. So if one writes the file-system image

 * to the UBI volume where 0xFFs mean free space - UBI makes sure this free

 * space is writable after the update.

 *

 * We do not do this for static volumes because they are read-only. But this

 * also cannot be done because we have to store per-LEB CRC and the correct

 * data length.

 *

 * This function returns zero in case of success and a negative error code in

 * case of failure.

		/*

		 * When writing static volume, and this is the last logical

		 * eraseblock, the length (@len) does not have to be aligned to

		 * the minimal flash I/O unit. The 'ubi_eba_write_leb_st()'

		 * function accepts exact (unaligned) length and stores it in

		 * the VID header. And it takes care of proper alignment by

		 * padding the buffer. Here we just make sure the padding will

		 * contain zeros, not random trash.

/**

 * ubi_more_update_data - write more update data.

 * @ubi: UBI device description object

 * @vol: volume description object

 * @buf: write data (user-space memory buffer)

 * @count: how much bytes to write

 *

 * This function writes more data to the volume which is being updated. It may

 * be called arbitrary number of times until all the update data arriveis. This

 * function returns %0 in case of success, number of bytes written during the

 * last call if the whole volume update has been successfully finished, and a

 * negative error code in case of failure.

	/*

	 * When updating volumes, we accumulate whole logical eraseblock of

	 * data and write it at once.

		/*

		 * This is a write to the middle of the logical eraseblock. We

		 * copy the data to our update buffer and wait for more data or

		 * flush it if the whole eraseblock is written or the update

		 * is finished.

			/*

			 * OK, we gathered either the whole eraseblock or this

			 * is the last chunk, it's time to flush the buffer.

	/*

	 * If we've got more to write, let's continue. At this point we know we

	 * are starting from the beginning of an eraseblock.

 The update is finished, clear the update marker */

/**

 * ubi_more_leb_change_data - accept more data for atomic LEB change.

 * @ubi: UBI device description object

 * @vol: volume description object

 * @buf: write data (user-space memory buffer)

 * @count: how much bytes to write

 *

 * This function accepts more data to the volume which is being under the

 * "atomic LEB change" operation. It may be called arbitrary number of times

 * until all data arrives. This function returns %0 in case of success, number

 * of bytes written during the last call if the whole "atomic LEB change"

 * operation has been successfully finished, and a negative error code in case

 * of failure.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2012 Linutronix GmbH

 * Copyright (c) 2014 sigma star gmbh

 * Author: Richard Weinberger <richard@nod.at>

/**

 * init_seen - allocate memory for used for debugging.

 * @ubi: UBI device description object

/**

 * free_seen - free the seen logic integer array.

 * @seen: integer array of @ubi->peb_count size

/**

 * set_seen - mark a PEB as seen.

 * @ubi: UBI device description object

 * @pnum: The PEB to be makred as seen

 * @seen: integer array of @ubi->peb_count size

/**

 * self_check_seen - check whether all PEB have been seen by fastmap.

 * @ubi: UBI device description object

 * @seen: integer array of @ubi->peb_count size

/**

 * ubi_calc_fm_size - calculates the fastmap size in bytes for an UBI device.

 * @ubi: UBI device description object

/**

 * new_fm_vhdr - allocate a new volume header for fastmap usage.

 * @ubi: UBI device description object

 * @vol_id: the VID of the new header

 *

 * Returns a new struct ubi_vid_hdr on success.

 * NULL indicates out of memory.

	/* UBI implementations without fastmap support have to delete the

	 * fastmap.

/**

 * add_aeb - create and add a attach erase block to a given list.

 * @ai: UBI attach info object

 * @list: the target list

 * @pnum: PEB number of the new attach erase block

 * @ec: erease counter of the new LEB

 * @scrub: scrub this PEB after attaching

 *

 * Returns 0 on success, < 0 indicates an internal error.

/**

 * add_vol - create and add a new volume to ubi_attach_info.

 * @ai: ubi_attach_info object

 * @vol_id: VID of the new volume

 * @used_ebs: number of used EBS

 * @data_pad: data padding value of the new volume

 * @vol_type: volume type

 * @last_eb_bytes: number of bytes in the last LEB

 *

 * Returns the new struct ubi_ainf_volume on success.

 * NULL indicates an error.

/**

 * assign_aeb_to_av - assigns a SEB to a given ainf_volume and removes it

 * from it's original list.

 * @ai: ubi_attach_info object

 * @aeb: the to be assigned SEB

 * @av: target scan volume

/**

 * update_vol - inserts or updates a LEB which was found a pool.

 * @ubi: the UBI device object

 * @ai: attach info object

 * @av: the volume this LEB belongs to

 * @new_vh: the volume header derived from new_aeb

 * @new_aeb: the AEB to be examined

 *

 * Returns 0 on success, < 0 indicates an internal error.

		/* This case can happen if the fastmap gets written

		 * because of a volume change (creation, deletion, ..).

		 * Then a PEB can be within the persistent EBA and the pool.

 new_aeb is newer */

 new_aeb is older */

 This LEB is new, let's add it to the volume */

/**

 * process_pool_aeb - we found a non-empty PEB in a pool.

 * @ubi: UBI device object

 * @ai: attach info object

 * @new_vh: the volume header derived from new_aeb

 * @new_aeb: the AEB to be examined

 *

 * Returns 0 on success, < 0 indicates an internal error.

 Find the volume this SEB belongs to */

/**

 * unmap_peb - unmap a PEB.

 * If fastmap detects a free PEB in the pool it has to check whether

 * this PEB has been unmapped after writing the fastmap.

 *

 * @ai: UBI attach info object

 * @pnum: The PEB to be unmapped

/**

 * scan_pool - scans a pool for changed (no longer empty PEBs).

 * @ubi: UBI device object

 * @ai: attach info object

 * @pebs: an array of all PEB numbers in the to be scanned pool

 * @pool_size: size of the pool (number of entries in @pebs)

 * @max_sqnum: pointer to the maximal sequence number

 * @free: list of PEBs which are most likely free (and go into @ai->free)

 *

 * Returns 0 on success, if the pool is unusable UBI_BAD_FASTMAP is returned.

 * < 0 indicates an internal error.

	/*

	 * Now scan all PEBs in the pool to find changes which have been made

	 * after the creation of the fastmap

		/*

		 * Older UBI implementations have image_seq set to zero, so

		 * we shouldn't fail if image_seq == 0.

 We are paranoid and fall back to scanning mode */

/**

 * count_fastmap_pebs - Counts the PEBs found by fastmap.

 * @ai: The UBI attach info object

/**

 * ubi_attach_fastmap - creates ubi_attach_info from a fastmap.

 * @ubi: UBI device object

 * @ai: UBI attach info object

 * @fm: the fastmap to be attached

 *

 * Returns 0 on success, UBI_BAD_FASTMAP if the found fastmap was unusable.

 * < 0 indicates an internal error.

 read EC values from free list */

 read EC values from used list */

 read EC values from scrub list */

 read EC values from erase list */

 Iterate over all volumes and read their EBA table */

	/*

	 * If fastmap is leaking PEBs (must not happen), raise a

	 * fat warning and fall back to scanning mode.

	 * We do this here because in ubi_wl_init() it's too late

	 * and we cannot fall back to scanning.

/**

 * find_fm_anchor - find the most recent Fastmap superblock (anchor)

 * @ai: UBI attach info to be filled

/**

 * ubi_scan_fastmap - scan the fastmap.

 * @ubi: UBI device object

 * @ai: UBI attach info to be filled

 * @scan_ai: UBI attach info from the first 64 PEBs,

 *           used to find the most recent Fastmap data structure

 *

 * Returns 0 on success, UBI_NO_FASTMAP if no fastmap was found,

 * UBI_BAD_FASTMAP if one was found but is not usable.

 * < 0 indicates an internal error.

 Copy all (possible) fastmap blocks into our new attach structure. */

		/*

		 * Older UBI implementations have image_seq set to zero, so

		 * we shouldn't fail if image_seq == 0.

/**

 * ubi_write_fastmap - writes a fastmap.

 * @ubi: UBI device object

 * @new_fm: the to be written fastmap

 *

 * Returns 0 on success, < 0 indicates an internal error.

 the max sqnum will be filled in while *reading* the fastmap */

/**

 * erase_block - Manually erase a PEB.

 * @ubi: UBI device object

 * @pnum: PEB to be erased

 *

 * Returns the new EC value on success, < 0 indicates an internal error.

/**

 * invalidate_fastmap - destroys a fastmap.

 * @ubi: UBI device object

 *

 * This function ensures that upon next UBI attach a full scan

 * is issued. We need this if UBI is about to write a new fastmap

 * but is unable to do so. In this case we have two options:

 * a) Make sure that the current fastmap will not be usued upon

 * attach time and contine or b) fall back to RO mode to have the

 * current fastmap in a valid state.

 * Returns 0 on success, < 0 indicates an internal error.

	/*

	 * Create fake fastmap such that UBI will fall back

	 * to scanning mode.

/**

 * return_fm_pebs - returns all PEBs used by a fastmap back to the

 * WL sub-system.

 * @ubi: UBI device object

 * @fm: fastmap layout object

/**

 * ubi_update_fastmap - will be called by UBI if a volume changes or

 * a fastmap pool becomes full.

 * @ubi: UBI device object

 *

 * Returns 0 on success, < 0 indicates an internal error.

 Old fastmap is larger than the new one */

 no fresh anchor PEB was found, reuse the old one */

 we've got a new anchor PEB, return the old one */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) International Business Machines Corp., 2006

 *

 * Author: Artem Bityutskiy (Битюцкий Артём)

 Here we keep miscellaneous functions which are used all over the UBI code */

/**

 * calc_data_len - calculate how much real data is stored in a buffer.

 * @ubi: UBI device description object

 * @buf: a buffer with the contents of the physical eraseblock

 * @length: the buffer length

 *

 * This function calculates how much "real data" is stored in @buf and returnes

 * the length. Continuous 0xFF bytes at the end of the buffer are not

 * considered as "real data".

 The resulting length must be aligned to the minimum flash I/O size */

/**

 * ubi_check_volume - check the contents of a static volume.

 * @ubi: UBI device description object

 * @vol_id: ID of the volume to check

 *

 * This function checks if static volume @vol_id is corrupted by fully reading

 * it and checking data CRC. This function returns %0 if the volume is not

 * corrupted, %1 if it is corrupted and a negative error code in case of

 * failure. Dynamic volumes are not checked and zero is returned immediately.

/**

 * ubi_update_reserved - update bad eraseblock handling accounting data.

 * @ubi: UBI device description object

 *

 * This function calculates the gap between current number of PEBs reserved for

 * bad eraseblock handling and the required level of PEBs that must be

 * reserved, and if necessary, reserves more PEBs to fill that gap, according

 * to availability. Should be called with ubi->volumes_lock held.

/**

 * ubi_calculate_reserved - calculate how many PEBs must be reserved for bad

 * eraseblock handling.

 * @ubi: UBI device description object

	/*

	 * Calculate the actual number of PEBs currently needed to be reserved

	 * for future bad eraseblock handling.

/**

 * ubi_check_pattern - check if buffer contains only a certain byte pattern.

 * @buf: buffer to check

 * @patt: the pattern to check

 * @size: buffer size in bytes

 *

 * This function returns %1 in there are only @patt bytes in @buf, and %0 if

 * something else was also found.

 Normal UBI messages */

 UBI warning messages */

 UBI error messages */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2014 Ezequiel Garcia

 * Copyright (c) 2011 Free Electrons

 *

 * Driver parameter handling strongly based on drivers/mtd/ubi/build.c

 *   Copyright (c) International Business Machines Corp., 2006

 *   Copyright (c) Nokia Corporation, 2007

 *   Authors: Artem Bityutskiy, Frank Haverkamp

/*

 * Read-only block devices on top of UBI volumes

 *

 * A simple implementation to allow a block device to be layered on top of a

 * UBI volume. The implementation is provided by creating a static 1-to-1

 * mapping between the block device and the UBI volume.

 *

 * The addressed byte is obtained from the addressed block sector, which is

 * mapped linearly into the corresponding LEB:

 *

 *   LEB number = addressed byte / LEB size

 *

 * This feature is compiled in the UBI core, and adds a 'block' parameter

 * to allow early creation of block devices on top of UBI volumes. Runtime

 * block creation/removal for UBI volumes is provided through two UBI ioctls:

 * UBI_IOCVOLCRBLK and UBI_IOCVOLRMBLK.

 Maximum number of supported devices */

 Maximum length of the 'block=' parameter */

 Maximum number of comma-separated items in the 'block=' parameter */

 Numbers of elements set in the @ubiblock_param array */

 MTD devices specification parameters */

 Linked list of all ubiblock instances */

 Protects ubiblock_devices and ubiblock_minor_idr */

 Get rid of the final newline */

 Two parameters: can be 'ubi, vol_id' or 'ubi, vol_name' */

 Second param can be a number or a name */

 One parameter: must be device path */

 Get LEB:offset address to read from */

		/*

		 * We can only read one LEB at a time. Therefore if the read

		 * length is larger than one LEB size, we split the operation.

		/*

		 * The volume is already open, just increase the reference

		 * counter.

	/*

	 * We want users to be aware they should only mount us as read-only.

	 * It's just a paranoid check, as write requests will get rejected

	 * in any case.

 Some tools might require this information */

	/*

	 * It is safe to ignore the return value of blk_rq_map_sg() because

	 * the number of sg entries is limited to UBI_MAX_SG_COUNT

	 * and ubi_read_sg() will check that limit.

 Check that the volume isn't already handled */

 Initialize the gendisk of this ubiblock device */

	/*

	 * Create one workqueue per volume (per registered block device).

	 * Rembember workqueues are cheap, they're not threads.

 Must be the last step: anyone can call file ops from now on */

 Stop new requests to arrive */

 Flush pending work */

 Finally destroy the blk queue */

 Found a device, let's lock it so we can check if it's busy */

 Remove from device list */

	/*

	 * Need to lock the device list until we stop using the device,

	 * otherwise the device struct might get released in

	 * 'ubiblock_remove()'.

		/*

		 * We want to enforce explicit block device creation for

		 * volumes, so when a volume is added we do nothing.

		/*

		 * If the volume is static, a content update might mean the

		 * size (i.e. used_bytes) was also changed.

 No ubi num, name must be a vol device path */

 No vol_id, must be vol_name */

	/*

	 * If there is an error creating one of the ubiblocks, continue on to

	 * create the following ubiblocks. This helps in a circumstance where

	 * the kernel command-line specifies multiple block devices and some

	 * may be broken, but we still want the working ones to come up.

 The module is being forcefully removed */

 Remove from device list */

	/*

	 * Attach block devices from 'block=' module param.

	 * Even if one block device in the param list fails to come up,

	 * still allow the module to load and leave any others up.

	/*

	 * Block devices are only created upon user requests, so we ignore

	 * existing volumes.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) International Business Machines Corp., 2006

 *

 * Authors: Artem Bityutskiy (Битюцкий Артём), Thomas Gleixner

/*

 * UBI wear-leveling sub-system.

 *

 * This sub-system is responsible for wear-leveling. It works in terms of

 * physical eraseblocks and erase counters and knows nothing about logical

 * eraseblocks, volumes, etc. From this sub-system's perspective all physical

 * eraseblocks are of two types - used and free. Used physical eraseblocks are

 * those that were "get" by the 'ubi_wl_get_peb()' function, and free physical

 * eraseblocks are those that were put by the 'ubi_wl_put_peb()' function.

 *

 * Physical eraseblocks returned by 'ubi_wl_get_peb()' have only erase counter

 * header. The rest of the physical eraseblock contains only %0xFF bytes.

 *

 * When physical eraseblocks are returned to the WL sub-system by means of the

 * 'ubi_wl_put_peb()' function, they are scheduled for erasure. The erasure is

 * done asynchronously in context of the per-UBI device background thread,

 * which is also managed by the WL sub-system.

 *

 * The wear-leveling is ensured by means of moving the contents of used

 * physical eraseblocks with low erase counter to free physical eraseblocks

 * with high erase counter.

 *

 * If the WL sub-system fails to erase a physical eraseblock, it marks it as

 * bad.

 *

 * This sub-system is also responsible for scrubbing. If a bit-flip is detected

 * in a physical eraseblock, it has to be moved. Technically this is the same

 * as moving it for wear-leveling reasons.

 *

 * As it was said, for the UBI sub-system all physical eraseblocks are either

 * "free" or "used". Free eraseblock are kept in the @wl->free RB-tree, while

 * used eraseblocks are kept in @wl->used, @wl->erroneous, or @wl->scrub

 * RB-trees, as well as (temporarily) in the @wl->pq queue.

 *

 * When the WL sub-system returns a physical eraseblock, the physical

 * eraseblock is protected from being moved for some "time". For this reason,

 * the physical eraseblock is not directly moved from the @wl->free tree to the

 * @wl->used tree. There is a protection queue in between where this

 * physical eraseblock is temporarily stored (@wl->pq).

 *

 * All this protection stuff is needed because:

 *  o we don't want to move physical eraseblocks just after we have given them

 *    to the user; instead, we first want to let users fill them up with data;

 *

 *  o there is a chance that the user will put the physical eraseblock very

 *    soon, so it makes sense not to move it for some time, but wait.

 *

 * Physical eraseblocks stay protected only for limited time. But the "time" is

 * measured in erase cycles in this case. This is implemented with help of the

 * protection queue. Eraseblocks are put to the tail of this queue when they

 * are returned by the 'ubi_wl_get_peb()', and eraseblocks are removed from the

 * head of the queue on each erase operation (for any eraseblock). So the

 * length of the queue defines how may (global) erase cycles PEBs are protected.

 *

 * To put it differently, each physical eraseblock has 2 main states: free and

 * used. The former state corresponds to the @wl->free tree. The latter state

 * is split up on several sub-states:

 * o the WL movement is allowed (@wl->used tree);

 * o the WL movement is disallowed (@wl->erroneous) because the PEB is

 *   erroneous - e.g., there was a read error;

 * o the WL movement is temporarily prohibited (@wl->pq queue);

 * o scrubbing is needed (@wl->scrub tree).

 *

 * Depending on the sub-state, wear-leveling entries of the used physical

 * eraseblocks may be kept in one of those structures.

 *

 * Note, in this implementation, we keep a small in-RAM object for each physical

 * eraseblock. This is surely not a scalable solution. But it appears to be good

 * enough for moderately large flashes and it is simple. In future, one may

 * re-work this sub-system and make it more scalable.

 *

 * At the moment this sub-system does not utilize the sequence number, which

 * was introduced relatively recently. But it would be wise to do this because

 * the sequence number of a logical eraseblock characterizes how old is it. For

 * example, when we move a PEB with low erase counter, and we need to pick the

 * target PEB, we pick a PEB with the highest EC if our PEB is "old" and we

 * pick target PEB with an average EC if our PEB is not very "old". This is a

 * room for future re-works of the WL sub-system.

 Number of physical eraseblocks reserved for wear-leveling purposes */

/*

 * Maximum difference between two erase counters. If this threshold is

 * exceeded, the WL sub-system starts moving data from used physical

 * eraseblocks with low erase counter to free physical eraseblocks with high

 * erase counter.

/*

 * When a physical eraseblock is moved, the WL sub-system has to pick the target

 * physical eraseblock to move to. The simplest way would be just to pick the

 * one with the highest erase counter. But in certain workloads this could lead

 * to an unlimited wear of one or few physical eraseblock. Indeed, imagine a

 * situation when the picked physical eraseblock is constantly erased after the

 * data is written to it. So, we have a constant which limits the highest erase

 * counter of the free physical eraseblock to pick. Namely, the WL sub-system

 * does not pick eraseblocks with erase counter greater than the lowest erase

 * counter plus %WL_FREE_MAX_DIFF.

/*

 * Maximum number of consecutive background thread failures which is enough to

 * switch to read-only mode.

/**

 * wl_tree_add - add a wear-leveling entry to a WL RB-tree.

 * @e: the wear-leveling entry to add

 * @root: the root of the tree

 *

 * Note, we use (erase counter, physical eraseblock number) pairs as keys in

 * the @ubi->used and @ubi->free RB-trees.

/**

 * wl_tree_destroy - destroy a wear-leveling entry.

 * @ubi: UBI device description object

 * @e: the wear-leveling entry to add

 *

 * This function destroys a wear leveling entry and removes

 * the reference from the lookup table.

/**

 * do_work - do one pending work.

 * @ubi: UBI device description object

 *

 * This function returns zero in case of success and a negative error code in

 * case of failure.

	/*

	 * @ubi->work_sem is used to synchronize with the workers. Workers take

	 * it in read mode, so many of them may be doing works at a time. But

	 * the queue flush code has to be sure the whole queue of works is

	 * done, and it takes the mutex in write mode.

	/*

	 * Call the worker function. Do not touch the work structure

	 * after this call as it will have been freed or reused by that

	 * time by the worker function.

/**

 * in_wl_tree - check if wear-leveling entry is present in a WL RB-tree.

 * @e: the wear-leveling entry to check

 * @root: the root of the tree

 *

 * This function returns non-zero if @e is in the @root RB-tree and zero if it

 * is not.

/**

 * in_pq - check if a wear-leveling entry is present in the protection queue.

 * @ubi: UBI device description object

 * @e: the wear-leveling entry to check

 *

 * This function returns non-zero if @e is in the protection queue and zero

 * if it is not.

/**

 * prot_queue_add - add physical eraseblock to the protection queue.

 * @ubi: UBI device description object

 * @e: the physical eraseblock to add

 *

 * This function adds @e to the tail of the protection queue @ubi->pq, where

 * @e will stay for %UBI_PROT_QUEUE_LEN erase operations and will be

 * temporarily protected from the wear-leveling worker. Note, @wl->lock has to

 * be locked.

/**

 * find_wl_entry - find wear-leveling entry closest to certain erase counter.

 * @ubi: UBI device description object

 * @root: the RB-tree where to look for

 * @diff: maximum possible difference from the smallest erase counter

 *

 * This function looks for a wear leveling entry with erase counter closest to

 * min + @diff, where min is the smallest erase counter.

/**

 * find_mean_wl_entry - find wear-leveling entry with medium erase counter.

 * @ubi: UBI device description object

 * @root: the RB-tree where to look for

 *

 * This function looks for a wear leveling entry with medium erase counter,

 * but not greater or equivalent than the lowest erase counter plus

 * %WL_FREE_MAX_DIFF/2.

		/* If no fastmap has been written and this WL entry can be used

		 * as anchor PEB, hold it back and return the second best

/**

 * wl_get_wle - get a mean wl entry to be used by ubi_wl_get_peb() or

 * refill_wl_user_pool().

 * @ubi: UBI device description object

 *

 * This function returns a a wear leveling entry in case of success and

 * NULL in case of failure.

	/*

	 * Move the physical eraseblock to the protection queue where it will

	 * be protected from being moved for some time.

/**

 * prot_queue_del - remove a physical eraseblock from the protection queue.

 * @ubi: UBI device description object

 * @pnum: the physical eraseblock to remove

 *

 * This function deletes PEB @pnum from the protection queue and returns zero

 * in case of success and %-ENODEV if the PEB was not found.

/**

 * sync_erase - synchronously erase a physical eraseblock.

 * @ubi: UBI device description object

 * @e: the the physical eraseblock to erase

 * @torture: if the physical eraseblock has to be tortured

 *

 * This function returns zero in case of success and a negative error code in

 * case of failure.

		/*

		 * Erase counter overflow. Upgrade UBI and use 64-bit

		 * erase counters internally.

/**

 * serve_prot_queue - check if it is time to stop protecting PEBs.

 * @ubi: UBI device description object

 *

 * This function is called after each erase operation and removes PEBs from the

 * tail of the protection queue. These PEBs have been protected for long enough

 * and should be moved to the used tree.

	/*

	 * There may be several protected physical eraseblock to remove,

	 * process them all.

			/*

			 * Let's be nice and avoid holding the spinlock for

			 * too long.

/**

 * __schedule_ubi_work - schedule a work.

 * @ubi: UBI device description object

 * @wrk: the work to schedule

 *

 * This function adds a work defined by @wrk to the tail of the pending works

 * list. Can only be used if ubi->work_sem is already held in read mode!

/**

 * schedule_ubi_work - schedule a work.

 * @ubi: UBI device description object

 * @wrk: the work to schedule

 *

 * This function adds a work defined by @wrk to the tail of the pending works

 * list.

/**

 * schedule_erase - schedule an erase work.

 * @ubi: UBI device description object

 * @e: the WL entry of the physical eraseblock to erase

 * @vol_id: the volume ID that last used this PEB

 * @lnum: the last used logical eraseblock number for the PEB

 * @torture: if the physical eraseblock has to be tortured

 * @nested: denotes whether the work_sem is already held in read mode

 *

 * This function returns zero in case of success and a %-ENOMEM in case of

 * failure.

/**

 * do_sync_erase - run the erase worker synchronously.

 * @ubi: UBI device description object

 * @e: the WL entry of the physical eraseblock to erase

 * @vol_id: the volume ID that last used this PEB

 * @lnum: the last used logical eraseblock number for the PEB

 * @torture: if the physical eraseblock has to be tortured

 *

/**

 * wear_leveling_worker - wear-leveling worker function.

 * @ubi: UBI device description object

 * @wrk: the work object

 * @shutdown: non-zero if the worker has to free memory and exit

 * because the WL-subsystem is shutting down

 *

 * This function copies a more worn out physical eraseblock to a less worn out

 * one. Returns zero in case of success and a negative error code in case of

 * failure.

		/*

		 * No free physical eraseblocks? Well, they must be waiting in

		 * the queue to be erased. Cancel movement - it will be

		 * triggered again when a free physical eraseblock appears.

		 *

		 * No used physical eraseblocks? They must be temporarily

		 * protected from being moved. They will be moved to the

		 * @ubi->used tree later and the wear-leveling will be

		 * triggered again.

		/* fm_next_anchor is no longer considered a good anchor

		 * candidate.

		 * NULL assignment also prevents multiple wear level checks

		 * of this PEB.

		/*

		 * Now pick the least worn-out used physical eraseblock and a

		 * highly worn-out free physical eraseblock. If the erase

		 * counters differ much enough, start wear-leveling.

 Give the unused PEB back */

 Perform scrubbing */

	/*

	 * Now we are going to copy physical eraseblock @e1->pnum to @e2->pnum.

	 * We so far do not know which logical eraseblock our physical

	 * eraseblock (@e1) belongs to. We have to read the volume identifier

	 * header first.

	 *

	 * Note, we are protected from this PEB being unmapped and erased. The

	 * 'ubi_wl_put_peb()' would wait for moving to be finished if the PEB

	 * which is being moved was unmapped.

			/*

			 * We are trying to move PEB without a VID header. UBI

			 * always write VID headers shortly after the PEB was

			 * given, so we have a situation when it has not yet

			 * had a chance to write it, because it was preempted.

			 * So add this PEB to the protection queue so far,

			 * because presumably more data will be written there

			 * (including the missing VID header), and then we'll

			 * move it.

			/*

			 * The same situation as %UBI_IO_FF, but bit-flips were

			 * detected. It is better to schedule this PEB for

			 * scrubbing.

			/*

			 * While a full scan would detect interrupted erasures

			 * at attach time we can face them here when attached from

			 * Fastmap.

			/*

			 * The LEB has not been moved because the volume is

			 * being deleted or the PEB has been put meanwhile. We

			 * should prevent this PEB from being selected for

			 * wear-leveling movement again, so put it to the

			 * protection queue.

			/*

			 * Target PEB had bit-flips or write error - torture it.

			/*

			 * An error happened while reading the source PEB. Do

			 * not switch to R/O mode in this case, and give the

			 * upper layers a possibility to recover from this,

			 * e.g. by unmapping corresponding LEB. Instead, just

			 * put this PEB to the @ubi->erroneous list to prevent

			 * UBI from trying to move it over and over again.

 The PEB has been successfully moved */

		/*

		 * Well, the target PEB was put meanwhile, schedule it for

		 * erasure.

	/*

	 * For some reasons the LEB was not moved, might be an error, might be

	 * something else. @e1 was not changed, so return it back. @e2 might

	 * have been changed, schedule it for erasure.

/**

 * ensure_wear_leveling - schedule wear-leveling if it is needed.

 * @ubi: UBI device description object

 * @nested: set to non-zero if this function is called from UBI worker

 *

 * This function checks if it is time to start wear-leveling and schedules it

 * if yes. This function returns zero in case of success and a negative error

 * code in case of failure.

 Wear-leveling is already in the work queue */

	/*

	 * If the ubi->scrub tree is not empty, scrubbing is needed, and the

	 * the WL worker has to be scheduled anyway.

 No physical eraseblocks - no deal */

		/*

		 * We schedule wear-leveling only if the difference between the

		 * lowest erase counter of used physical eraseblocks and a high

		 * erase counter of free physical eraseblocks is greater than

		 * %UBI_WL_THRESHOLD.

/**

 * __erase_worker - physical eraseblock erase worker function.

 * @ubi: UBI device description object

 * @wl_wrk: the work object

 *

 * This function erases a physical eraseblock and perform torture testing if

 * needed. It also takes care about marking the physical eraseblock bad if

 * needed. Returns zero in case of success and a negative error code in case of

 * failure.

			/* Abort anchor production, if needed it will be

			 * enabled again in the wear leveling started below.

		/*

		 * One more erase operation has happened, take care about

		 * protected physical eraseblocks.

 And take care about wear-leveling */

 Re-schedule the LEB for erasure */

		/*

		 * If this is not %-EIO, we have no idea what to do. Scheduling

		 * this physical eraseblock for erasure again would cause

		 * errors again and again. Well, lets switch to R/O mode.

 It is %-EIO, the PEB went bad */

			/*

			 * The amount of reserved PEBs increased since we last

			 * checked.

/**

 * ubi_wl_put_peb - return a PEB to the wear-leveling sub-system.

 * @ubi: UBI device description object

 * @vol_id: the volume ID that last used this PEB

 * @lnum: the last used logical eraseblock number for the PEB

 * @pnum: physical eraseblock to return

 * @torture: if this physical eraseblock has to be tortured

 *

 * This function is called to return physical eraseblock @pnum to the pool of

 * free physical eraseblocks. The @torture flag has to be set if an I/O error

 * occurred to this @pnum and it has to be tested. This function returns zero

 * in case of success, and a negative error code in case of failure.

		/*

		 * User is putting the physical eraseblock which was selected to

		 * be moved. It will be scheduled for erasure in the

		 * wear-leveling worker.

 Wait for the WL worker by taking the @ubi->move_mutex */

		/*

		 * User is putting the physical eraseblock which was selected

		 * as the target the data is moved to. It may happen if the EBA

		 * sub-system already re-mapped the LEB in 'ubi_eba_copy_leb()'

		 * but the WL sub-system has not put the PEB to the "used" tree

		 * yet, but it is about to do this. So we just set a flag which

		 * will tell the WL worker that the PEB is not needed anymore

		 * and should be scheduled for erasure.

 Erroneous PEBs should be tortured */

/**

 * ubi_wl_scrub_peb - schedule a physical eraseblock for scrubbing.

 * @ubi: UBI device description object

 * @pnum: the physical eraseblock to schedule

 *

 * If a bit-flip in a physical eraseblock is detected, this physical eraseblock

 * needs scrubbing. This function schedules a physical eraseblock for

 * scrubbing which is done in background. This function returns zero in case of

 * success and a negative error code in case of failure.

		/*

		 * This physical eraseblock was used to move data to. The data

		 * was moved but the PEB was not yet inserted to the proper

		 * tree. We should just wait a little and let the WL worker

		 * proceed.

	/*

	 * Technically scrubbing is the same as wear-leveling, so it is done

	 * by the WL worker.

/**

 * ubi_wl_flush - flush all pending works.

 * @ubi: UBI device description object

 * @vol_id: the volume id to flush for

 * @lnum: the logical eraseblock number to flush for

 *

 * This function executes all pending works for a particular volume id /

 * logical eraseblock number pair. If either value is set to %UBI_ALL, then it

 * acts as a wildcard for all of the corresponding volume numbers or logical

 * eraseblock numbers. It returns zero in case of success and a negative error

 * code in case of failure.

	/*

	 * Erase while the pending works queue is not empty, but not more than

	 * the number of currently pending works.

	/*

	 * Make sure all the works which have been done in parallel are

	 * finished.

/**

 * ubi_bitflip_check - Check an eraseblock for bitflips and scrub it if needed.

 * @ubi: UBI device description object

 * @pnum: the physical eraseblock to schedule

 * @force: dont't read the block, assume bitflips happened and take action.

 *

 * This function reads the given eraseblock and checks if bitflips occured.

 * In case of bitflips, the eraseblock is scheduled for scrubbing.

 * If scrubbing is forced with @force, the eraseblock is not read,

 * but scheduled for scrubbing right away.

 *

 * Returns:

 * %EINVAL, PEB is out of range

 * %ENOENT, PEB is no longer used by UBI

 * %EBUSY, PEB cannot be checked now or a check is currently running on it

 * %EAGAIN, bit flips happened but scrubbing is currently not possible

 * %EUCLEAN, bit flips happened and PEB is scheduled for scrubbing

 * %0, no bit flips detected

	/*

	 * Pause all parallel work, otherwise it can happen that the

	 * erase worker frees a wl entry under us.

	/*

	 * Make sure that the wl entry does not change state while

	 * inspecting it.

	/*

	 * Does it make sense to check this PEB?

		/*

		 * Okay, bit flip happened, let's figure out what we can do.

		/*

		 * Recheck. We released wl_lock, UBI might have killed the

		 * wl entry under us.

		/*

		 * Need to re-check state

			/*

			 * This PEB is empty we can schedule it for

			 * erasure right away. No wear leveling needed.

/**

 * tree_destroy - destroy an RB-tree.

 * @ubi: UBI device description object

 * @root: the root of the tree to destroy

/**

 * ubi_thread - UBI background thread.

 * @u: the UBI device description object pointer

			/*

			 * Check kthread_should_stop() after we set the task

			 * state to guarantee that we either see the stop bit

			 * and exit or the task state is reset to runnable such

			 * that it's not scheduled out indefinitely and detects

			 * the stop bit at kthread_should_stop().

				/*

				 * Too many failures, disable the thread and

				 * switch to read-only mode.

/**

 * shutdown_work - shutdown all pending works.

 * @ubi: UBI device description object

/**

 * erase_aeb - erase a PEB given in UBI attach info PEB

 * @ubi: UBI device description object

 * @aeb: UBI attach info PEB

 * @sync: If true, erase synchronously. Otherwise schedule for erasure

/**

 * ubi_wl_init - initialize the WL sub-system using attaching information.

 * @ubi: UBI device description object

 * @ai: attaching information

 *

 * This function returns zero in case of success, and a negative error code in

 * case of failure.

			/*

			 * Usually old Fastmap PEBs are scheduled for erasure

			 * and we don't have to care about them but if we face

			 * an power cut before scheduling them we need to

			 * take care of them here.

			/*

			 * The fastmap update code might not find a free PEB for

			 * writing the fastmap anchor to and then reuses the

			 * current fastmap anchor PEB. When this PEB gets erased

			 * and a power cut happens before it is written again we

			 * must make sure that the fastmap attach code doesn't

			 * find any outdated fastmap anchors, hence we erase the

			 * outdated fastmap anchor PEBs synchronously here.

 Schedule wear-leveling if needed */

/**

 * protection_queue_destroy - destroy the protection queue.

 * @ubi: UBI device description object

/**

 * ubi_wl_close - close the wear-leveling sub-system.

 * @ubi: UBI device description object

/**

 * self_check_ec - make sure that the erase counter of a PEB is correct.

 * @ubi: UBI device description object

 * @pnum: the physical eraseblock number to check

 * @ec: the erase counter to check

 *

 * This function returns zero if the erase counter of physical eraseblock @pnum

 * is equivalent to @ec, and a negative error code if not or if an error

 * occurred.

 The header does not have to exist */

/**

 * self_check_in_wl_tree - check that wear-leveling entry is in WL RB-tree.

 * @ubi: UBI device description object

 * @e: the wear-leveling entry to check

 * @root: the root of the tree

 *

 * This function returns zero if @e is in the @root RB-tree and %-EINVAL if it

 * is not.

/**

 * self_check_in_pq - check if wear-leveling entry is in the protection

 *                        queue.

 * @ubi: UBI device description object

 * @e: the wear-leveling entry to check

 *

 * This function returns zero if @e is in @ubi->pq and %-EINVAL if it is not.

/**

 * produce_free_peb - produce a free physical eraseblock.

 * @ubi: UBI device description object

 *

 * This function tries to make a free PEB by means of synchronous execution of

 * pending works. This may be needed if, for example the background thread is

 * disabled. Returns zero in case of success and a negative error code in case

 * of failure.

/**

 * ubi_wl_get_peb - get a physical eraseblock.

 * @ubi: UBI device description object

 *

 * This function returns a physical eraseblock in case of success and a

 * negative error code in case of failure.

 * Returns with ubi->fm_eba_sem held in read mode!

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2012 Linutronix GmbH

 * Copyright (c) 2014 sigma star gmbh

 * Author: Richard Weinberger <richard@nod.at>

/**

 * update_fastmap_work_fn - calls ubi_update_fastmap from a work queue

 * @wrk: the work description object

/**

 * find_anchor_wl_entry - find wear-leveling entry to used as anchor PEB.

 * @root: the RB-tree where to look for

/**

 * return_unused_pool_pebs - returns unused PEB to the free tree.

 * @ubi: UBI device description object

 * @pool: fastmap pool description object

/**

 * ubi_wl_get_fm_peb - find a physical erase block with a given maximal number.

 * @ubi: UBI device description object

 * @anchor: This PEB will be used as anchor PEB by fastmap

 *

 * The function returns a physical erase block with a given maximal number

 * and removes it from the wl subsystem.

 * Must be called with wl_lock held!

	/* remove it from the free list,

/**

 * ubi_refill_pools - refills all fastmap PEB pools.

 * @ubi: UBI device description object

	/* All available PEBs are in ubi->free, now is the time to get

	 * the best anchor PEBs.

/**

 * produce_free_peb - produce a free physical eraseblock.

 * @ubi: UBI device description object

 *

 * This function tries to make a free PEB by means of synchronous execution of

 * pending works. This may be needed if, for example the background thread is

 * disabled. Returns zero in case of success and a negative error code in case

 * of failure.

/**

 * ubi_wl_get_peb - get a physical eraseblock.

 * @ubi: UBI device description object

 *

 * This function returns a physical eraseblock in case of success and a

 * negative error code in case of failure.

 * Returns with ubi->fm_eba_sem held in read mode!

	/* We check here also for the WL pool because at this point we can

/* get_peb_for_wl - returns a PEB to be used internally by the WL sub-system.

 *

 * @ubi: UBI device description object

		/* We cannot update the fastmap here because this

		 * function is called in atomic context.

/**

 * ubi_ensure_anchor_pebs - schedule wear-leveling to produce an anchor PEB.

 * @ubi: UBI device description object

 Do we have a next anchor? */

 Tell wear leveling to produce a new anchor PEB */

	/* Do wear leveling to get a new anchor PEB or check the

	 * existing next anchor candidate.

/**

 * ubi_wl_put_fm_peb - returns a PEB used in a fastmap to the wear-leveling

 * sub-system.

 * see: ubi_wl_put_peb()

 *

 * @ubi: UBI device description object

 * @fm_e: physical eraseblock to return

 * @lnum: the last used logical eraseblock number for the PEB

 * @torture: if this physical eraseblock has to be tortured

	/* This can happen if we recovered from a fastmap the very

	 * first time and writing now a new one. In this case the wl system

	 * has never seen any PEB used by the original fastmap.

/**

 * ubi_is_erase_work - checks whether a work is erase work.

 * @wrk: The work object to be checked

/**

 * may_reserve_for_fm - tests whether a PEB shall be reserved for fastmap.

 * See find_mean_wl_entry()

 *

 * @ubi: UBI device description object

 * @e: physical eraseblock to return

 * @root: RB tree to test against.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) International Business Machines Corp., 2006

 *

 * Author: Artem Bityutskiy (Битюцкий Артём)

/*

 * UBI attaching sub-system.

 *

 * This sub-system is responsible for attaching MTD devices and it also

 * implements flash media scanning.

 *

 * The attaching information is represented by a &struct ubi_attach_info'

 * object. Information about volumes is represented by &struct ubi_ainf_volume

 * objects which are kept in volume RB-tree with root at the @volumes field.

 * The RB-tree is indexed by the volume ID.

 *

 * Logical eraseblocks are represented by &struct ubi_ainf_peb objects. These

 * objects are kept in per-volume RB-trees with the root at the corresponding

 * &struct ubi_ainf_volume object. To put it differently, we keep an RB-tree of

 * per-volume objects and each of these objects is the root of RB-tree of

 * per-LEB objects.

 *

 * Corrupted physical eraseblocks are put to the @corr list, free physical

 * eraseblocks are put to the @free list and the physical eraseblock to be

 * erased are put to the @erase list.

 *

 * About corruptions

 * ~~~~~~~~~~~~~~~~~

 *

 * UBI protects EC and VID headers with CRC-32 checksums, so it can detect

 * whether the headers are corrupted or not. Sometimes UBI also protects the

 * data with CRC-32, e.g., when it executes the atomic LEB change operation, or

 * when it moves the contents of a PEB for wear-leveling purposes.

 *

 * UBI tries to distinguish between 2 types of corruptions.

 *

 * 1. Corruptions caused by power cuts. These are expected corruptions and UBI

 * tries to handle them gracefully, without printing too many warnings and

 * error messages. The idea is that we do not lose important data in these

 * cases - we may lose only the data which were being written to the media just

 * before the power cut happened, and the upper layers (e.g., UBIFS) are

 * supposed to handle such data losses (e.g., by using the FS journal).

 *

 * When UBI detects a corruption (CRC-32 mismatch) in a PEB, and it looks like

 * the reason is a power cut, UBI puts this PEB to the @erase list, and all

 * PEBs in the @erase list are scheduled for erasure later.

 *

 * 2. Unexpected corruptions which are not caused by power cuts. During

 * attaching, such PEBs are put to the @corr list and UBI preserves them.

 * Obviously, this lessens the amount of available PEBs, and if at some  point

 * UBI runs out of free PEBs, it switches to R/O mode. UBI also loudly informs

 * about such PEBs every time the MTD device is attached.

 *

 * However, it is difficult to reliably distinguish between these types of

 * corruptions and UBI's strategy is as follows (in case of attaching by

 * scanning). UBI assumes corruption type 2 if the VID header is corrupted and

 * the data area does not contain all 0xFFs, and there were no bit-flips or

 * integrity errors (e.g., ECC errors in case of NAND) while reading the data

 * area.  Otherwise UBI assumes corruption type 1. So the decision criteria

 * are as follows.

 *   o If the data area contains only 0xFFs, there are no data, and it is safe

 *     to just erase this PEB - this is corruption type 1.

 *   o If the data area has bit-flips or data integrity errors (ECC errors on

 *     NAND), it is probably a PEB which was being erased when power cut

 *     happened, so this is corruption type 1. However, this is just a guess,

 *     which might be wrong.

 *   o Otherwise this is corruption type 2.

/**

 * find_or_add_av - internal function to find a volume, add a volume or do

 *		    both (find and add if missing).

 * @ai: attaching information

 * @vol_id: the requested volume ID

 * @flags: a combination of the %AV_FIND and %AV_ADD flags describing the

 *	   expected operation. If only %AV_ADD is set, -EEXIST is returned

 *	   if the volume already exists. If only %AV_FIND is set, NULL is

 *	   returned if the volume does not exist. And if both flags are

 *	   set, the helper first tries to find an existing volume, and if

 *	   it does not exist it creates a new one.

 * @created: in value used to inform the caller whether it"s a newly created

 *	     volume or not.

 *

 * This function returns a pointer to a volume description or an ERR_PTR if

 * the operation failed. It can also return NULL if only %AV_FIND is set and

 * the volume does not exist.

 Walk the volume RB-tree to look if this volume is already present */

 The volume is absent - add it */

/**

 * ubi_find_or_add_av - search for a volume in the attaching information and

 *			add one if it does not exist.

 * @ai: attaching information

 * @vol_id: the requested volume ID

 * @created: whether the volume has been created or not

 *

 * This function returns a pointer to the new volume description or an

 * ERR_PTR if the operation failed.

/**

 * ubi_alloc_aeb - allocate an aeb element

 * @ai: attaching information

 * @pnum: physical eraseblock number

 * @ec: erase counter of the physical eraseblock

 *

 * Allocate an aeb object and initialize the pnum and ec information.

 * vol_id and lnum are set to UBI_UNKNOWN, and the other fields are

 * initialized to zero.

 * Note that the element is not added in any list or RB tree.

/**

 * ubi_free_aeb - free an aeb element

 * @ai: attaching information

 * @aeb: the element to free

 *

 * Free an aeb object. The caller must have removed the element from any list

 * or RB tree.

/**

 * add_to_list - add physical eraseblock to a list.

 * @ai: attaching information

 * @pnum: physical eraseblock number to add

 * @vol_id: the last used volume id for the PEB

 * @lnum: the last used LEB number for the PEB

 * @ec: erase counter of the physical eraseblock

 * @to_head: if not zero, add to the head of the list

 * @list: the list to add to

 *

 * This function allocates a 'struct ubi_ainf_peb' object for physical

 * eraseblock @pnum and adds it to the "free", "erase", or "alien" lists.

 * It stores the @lnum and @vol_id alongside, which can both be

 * %UBI_UNKNOWN if they are not available, not readable, or not assigned.

 * If @to_head is not zero, PEB will be added to the head of the list, which

 * basically means it will be processed first later. E.g., we add corrupted

 * PEBs (corrupted due to power cuts) to the head of the erase list to make

 * sure we erase them first and get rid of corruptions ASAP. This function

 * returns zero in case of success and a negative error code in case of

 * failure.

/**

 * add_corrupted - add a corrupted physical eraseblock.

 * @ai: attaching information

 * @pnum: physical eraseblock number to add

 * @ec: erase counter of the physical eraseblock

 *

 * This function allocates a 'struct ubi_ainf_peb' object for a corrupted

 * physical eraseblock @pnum and adds it to the 'corr' list.  The corruption

 * was presumably not caused by a power cut. Returns zero in case of success

 * and a negative error code in case of failure.

/**

 * add_fastmap - add a Fastmap related physical eraseblock.

 * @ai: attaching information

 * @pnum: physical eraseblock number the VID header came from

 * @vid_hdr: the volume identifier header

 * @ec: erase counter of the physical eraseblock

 *

 * This function allocates a 'struct ubi_ainf_peb' object for a Fastamp

 * physical eraseblock @pnum and adds it to the 'fastmap' list.

 * Such blocks can be Fastmap super and data blocks from both the most

 * recent Fastmap we're attaching from or from old Fastmaps which will

 * be erased.

/**

 * validate_vid_hdr - check volume identifier header.

 * @ubi: UBI device description object

 * @vid_hdr: the volume identifier header to check

 * @av: information about the volume this logical eraseblock belongs to

 * @pnum: physical eraseblock number the VID header came from

 *

 * This function checks that data stored in @vid_hdr is consistent. Returns

 * non-zero if an inconsistency was found and zero if not.

 *

 * Note, UBI does sanity check of everything it reads from the flash media.

 * Most of the checks are done in the I/O sub-system. Here we check that the

 * information in the VID header is consistent to the information in other VID

 * headers of the same volume.

		/*

		 * This is not the first logical eraseblock belonging to this

		 * volume. Ensure that the data in its VID header is consistent

		 * to the data in previous logical eraseblock headers.

/**

 * add_volume - add volume to the attaching information.

 * @ai: attaching information

 * @vol_id: ID of the volume to add

 * @pnum: physical eraseblock number

 * @vid_hdr: volume identifier header

 *

 * If the volume corresponding to the @vid_hdr logical eraseblock is already

 * present in the attaching information, this function does nothing. Otherwise

 * it adds corresponding volume to the attaching information. Returns a pointer

 * to the allocated "av" object in case of success and a negative error code in

 * case of failure.

/**

 * ubi_compare_lebs - find out which logical eraseblock is newer.

 * @ubi: UBI device description object

 * @aeb: first logical eraseblock to compare

 * @pnum: physical eraseblock number of the second logical eraseblock to

 * compare

 * @vid_hdr: volume identifier header of the second logical eraseblock

 *

 * This function compares 2 copies of a LEB and informs which one is newer. In

 * case of success this function returns a positive value, in case of failure, a

 * negative error code is returned. The success return codes use the following

 * bits:

 *     o bit 0 is cleared: the first PEB (described by @aeb) is newer than the

 *       second PEB (described by @pnum and @vid_hdr);

 *     o bit 0 is set: the second PEB is newer;

 *     o bit 1 is cleared: no bit-flips were detected in the newer LEB;

 *     o bit 1 is set: bit-flips were detected in the newer LEB;

 *     o bit 2 is cleared: the older LEB is not corrupted;

 *     o bit 2 is set: the older LEB is corrupted.

		/*

		 * This must be a really ancient UBI image which has been

		 * created before sequence numbers support has been added. At

		 * that times we used 32-bit LEB versions stored in logical

		 * eraseblocks. That was before UBI got into mainline. We do not

		 * support these images anymore. Well, those images still work,

		 * but only if no unclean reboots happened.

 Obviously the LEB with lower sequence counter is older */

	/*

	 * Now we know which copy is newer. If the copy flag of the PEB with

	 * newer version is not set, then we just return, otherwise we have to

	 * check data CRC. For the second PEB we already have the VID header,

	 * for the first one - we'll need to re-read it from flash.

	 *

	 * Note: this may be optimized so that we wouldn't read twice.

 It is not a copy, so it is newer */

 It is not a copy, so it is newer */

 Read the data of the copy and check the CRC */

/**

 * ubi_add_to_av - add used physical eraseblock to the attaching information.

 * @ubi: UBI device description object

 * @ai: attaching information

 * @pnum: the physical eraseblock number

 * @ec: erase counter

 * @vid_hdr: the volume identifier header

 * @bitflips: if bit-flips were detected when this physical eraseblock was read

 *

 * This function adds information about a used physical eraseblock to the

 * 'used' tree of the corresponding volume. The function is rather complex

 * because it has to handle cases when this is not the first physical

 * eraseblock belonging to the same logical eraseblock, and the newer one has

 * to be picked, while the older one has to be dropped. This function returns

 * zero in case of success and a negative error code in case of failure.

	/*

	 * Walk the RB-tree of logical eraseblocks of volume @vol_id to look

	 * if this is the first instance of this logical eraseblock or not.

		/*

		 * There is already a physical eraseblock describing the same

		 * logical eraseblock present.

		/*

		 * Make sure that the logical eraseblocks have different

		 * sequence numbers. Otherwise the image is bad.

		 *

		 * However, if the sequence number is zero, we assume it must

		 * be an ancient UBI image from the era when UBI did not have

		 * sequence numbers. We still can attach these images, unless

		 * there is a need to distinguish between old and new

		 * eraseblocks, in which case we'll refuse the image in

		 * 'ubi_compare_lebs()'. In other words, we attach old clean

		 * images, but refuse attaching old images with duplicated

		 * logical eraseblocks because there was an unclean reboot.

		/*

		 * Now we have to drop the older one and preserve the newer

		 * one.

			/*

			 * This logical eraseblock is newer than the one

			 * found earlier.

			/*

			 * This logical eraseblock is older than the one found

			 * previously.

	/*

	 * We've met this logical eraseblock for the first time, add it to the

	 * attaching information.

/**

 * ubi_add_av - add volume to the attaching information.

 * @ai: attaching information

 * @vol_id: the requested volume ID

 *

 * This function returns a pointer to the new volume description or an

 * ERR_PTR if the operation failed.

/**

 * ubi_find_av - find volume in the attaching information.

 * @ai: attaching information

 * @vol_id: the requested volume ID

 *

 * This function returns a pointer to the volume description or %NULL if there

 * are no data about this volume in the attaching information.

/**

 * ubi_remove_av - delete attaching information about a volume.

 * @ai: attaching information

 * @av: the volume attaching information to delete

/**

 * early_erase_peb - erase a physical eraseblock.

 * @ubi: UBI device description object

 * @ai: attaching information

 * @pnum: physical eraseblock number to erase;

 * @ec: erase counter value to write (%UBI_UNKNOWN if it is unknown)

 *

 * This function erases physical eraseblock 'pnum', and writes the erase

 * counter header to it. This function should only be used on UBI device

 * initialization stages, when the EBA sub-system had not been yet initialized.

 * This function returns zero in case of success and a negative error code in

 * case of failure.

		/*

		 * Erase counter overflow. Upgrade UBI and use 64-bit

		 * erase counters internally.

/**

 * ubi_early_get_peb - get a free physical eraseblock.

 * @ubi: UBI device description object

 * @ai: attaching information

 *

 * This function returns a free physical eraseblock. It is supposed to be

 * called on the UBI initialization stages when the wear-leveling sub-system is

 * not initialized yet. This function picks a physical eraseblocks from one of

 * the lists, writes the EC header if it is needed, and removes it from the

 * list.

 *

 * This function returns a pointer to the "aeb" of the found free PEB in case

 * of success and an error code in case of failure.

	/*

	 * We try to erase the first physical eraseblock from the erase list

	 * and pick it if we succeed, or try to erase the next one if not. And

	 * so forth. We don't want to take care about bad eraseblocks here -

	 * they'll be handled later.

/**

 * check_corruption - check the data area of PEB.

 * @ubi: UBI device description object

 * @vid_hdr: the (corrupted) VID header of this PEB

 * @pnum: the physical eraseblock number to check

 *

 * This is a helper function which is used to distinguish between VID header

 * corruptions caused by power cuts and other reasons. If the PEB contains only

 * 0xFF bytes in the data area, the VID header is most probably corrupted

 * because of a power cut (%0 is returned in this case). Otherwise, it was

 * probably corrupted for some other reasons (%1 is returned in this case). A

 * negative error code is returned if a read error occurred.

 *

 * If the corruption reason was a power cut, UBI can safely erase this PEB.

 * Otherwise, it should preserve it to avoid possibly destroying important

 * information.

		/*

		 * Bit-flips or integrity errors while reading the data area.

		 * It is difficult to say for sure what type of corruption is

		 * this, but presumably a power cut happened while this PEB was

		 * erased, so it became unstable and corrupted, and should be

		 * erased.

/**

 * scan_peb - scan and process UBI headers of a PEB.

 * @ubi: UBI device description object

 * @ai: attaching information

 * @pnum: the physical eraseblock number

 * @fast: true if we're scanning for a Fastmap

 *

 * This function reads UBI headers of PEB @pnum, checks them, and adds

 * information about this PEB to the corresponding list or RB-tree in the

 * "attaching info" structure. Returns zero if the physical eraseblock was

 * successfully handled and a negative error code in case of failure.

 Skip bad physical eraseblocks */

		/*

		 * We have to also look at the VID header, possibly it is not

		 * corrupted. Set %bitflips flag in order to make this PEB be

		 * moved and EC be re-created.

 Make sure UBI version is OK */

			/*

			 * Erase counter overflow. The EC headers have 64 bits

			 * reserved, but we anyway make use of only 31 bit

			 * values, as this seems to be enough for any existing

			 * flash. Upgrade UBI and use 64-bit erase counters

			 * internally.

		/*

		 * Make sure that all PEBs have the same image sequence number.

		 * This allows us to detect situations when users flash UBI

		 * images incorrectly, so that the flash has the new UBI image

		 * and leftovers from the old one. This feature was added

		 * relatively recently, and the sequence number was always

		 * zero, because old UBI implementations always set it to zero.

		 * For this reasons, we do not panic if some PEBs have zero

		 * sequence number, while other PEBs have non-zero sequence

		 * number.

 OK, we've done with the EC header, let's look at the VID header */

			/*

			 * Both EC and VID headers are corrupted and were read

			 * with data integrity error, probably this is a bad

			 * PEB, bit it is not marked as bad yet. This may also

			 * be a result of power cut during erasure.

			/*

			 * If we're facing a bad VID header we have to drop *all*

			 * Fastmap data structures we find. The most recent Fastmap

			 * could be bad and therefore there is a chance that we attach

			 * from an old one. On a fine MTD stack a PEB must not render

			 * bad all of a sudden, but the reality is different.

			 * So, let's be paranoid and help finding the root cause by

			 * falling back to scanning mode instead of attaching with a

			 * bad EBA table and cause data corruption which is hard to

			 * analyze.

			/*

			 * Both headers are corrupted. There is a possibility

			 * that this a valid UBI PEB which has corresponding

			 * LEB, but the headers are corrupted. However, it is

			 * impossible to distinguish it from a PEB which just

			 * contains garbage because of a power cut during erase

			 * operation. So we just schedule this PEB for erasure.

			 *

			 * Besides, in case of NOR flash, we deliberately

			 * corrupt both headers because NOR flash erasure is

			 * slow and can start from the end.

			/*

			 * The EC was OK, but the VID header is corrupted. We

			 * have to check what is in the data area.

 This corruption is caused by a power cut */

 This is an unexpected corruption */

 Unsupported internal volume */

/**

 * late_analysis - analyze the overall situation with PEB.

 * @ubi: UBI device description object

 * @ai: attaching information

 *

 * This is a helper function which takes a look what PEBs we have after we

 * gather information about all of them ("ai" is compete). It decides whether

 * the flash is empty and should be formatted of whether there are too many

 * corrupted PEBs and we should not attach this MTD device. Returns zero if we

 * should proceed with attaching the MTD device, and %-EINVAL if we should not.

	/*

	 * Few corrupted PEBs is not a problem and may be just a result of

	 * unclean reboots. However, many of them may indicate some problems

	 * with the flash HW or driver.

		/*

		 * If too many PEBs are corrupted, we refuse attaching,

		 * otherwise, only print a warning.

		/*

		 * All PEBs are empty, or almost all - a couple PEBs look like

		 * they may be bad PEBs which were not marked as bad yet.

		 *

		 * This piece of code basically tries to distinguish between

		 * the following situations:

		 *

		 * 1. Flash is empty, but there are few bad PEBs, which are not

		 *    marked as bad so far, and which were read with error. We

		 *    want to go ahead and format this flash. While formatting,

		 *    the faulty PEBs will probably be marked as bad.

		 *

		 * 2. Flash contains non-UBI data and we do not want to format

		 *    it and destroy possibly important information.

/**

 * destroy_av - free volume attaching information.

 * @av: volume attaching information

 * @ai: attaching information

 * @list: put the aeb elements in there if !NULL, otherwise free them

 *

 * This function destroys the volume attaching information.

/**

 * destroy_ai - destroy attaching information.

 * @ai: attaching information

 Destroy the volume RB-tree */

/**

 * scan_all - scan entire MTD device.

 * @ubi: UBI device description object

 * @ai: attach info object

 * @start: start scanning at this PEB

 *

 * This function does full scanning of an MTD device and returns complete

 * information about it in form of a "struct ubi_attach_info" object. In case

 * of failure, an error code is returned.

 Calculate mean erase counter */

	/*

	 * In case of unknown erase counter we use the mean erase counter

	 * value.

/**

 * scan_fast - try to find a fastmap and attach from it.

 * @ubi: UBI device description object

 * @ai: attach info object

 *

 * Returns 0 on success, negative return values indicate an internal

 * error.

 * UBI_NO_FASTMAP denotes that no fastmap was found.

 * UBI_BAD_FASTMAP denotes that the found fastmap was invalid.

		/*

		 * Didn't attach via fastmap, do a full scan but reuse what

		 * we've aready scanned.

/**

 * ubi_attach - attach an MTD device.

 * @ubi: UBI device descriptor

 * @force_scan: if set to non-zero attach by scanning

 *

 * This function returns zero in case of success and a negative error code in

 * case of failure.

 On small flash devices we disable fastmap in any case. */

/**

 * self_check_ai - check the attaching information.

 * @ubi: UBI device description object

 * @ai: attaching information

 *

 * This function returns zero if the attaching information is all right, and a

 * negative error code if not or if an error occurred.

	/*

	 * At first, check that attaching information is OK.

 Check that attaching information is correct */

	/*

	 * Make sure that all the physical eraseblocks are in one of the lists

	 * or trees.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) International Business Machines Corp., 2006

 * Copyright (c) Nokia Corporation, 2006, 2007

 *

 * Author: Artem Bityutskiy (Битюцкий Артём)

/*

 * This file includes volume table manipulation code. The volume table is an

 * on-flash table containing volume meta-data like name, number of reserved

 * physical eraseblocks, type, etc. The volume table is stored in the so-called

 * "layout volume".

 *

 * The layout volume is an internal volume which is organized as follows. It

 * consists of two logical eraseblocks - LEB 0 and LEB 1. Each logical

 * eraseblock stores one volume table copy, i.e. LEB 0 and LEB 1 duplicate each

 * other. This redundancy guarantees robustness to unclean reboots. The volume

 * table is basically an array of volume table records. Each record contains

 * full information about the volume and protected by a CRC checksum. Note,

 * nowadays we use the atomic LEB change operation when updating the volume

 * table, so we do not really need 2 LEBs anymore, but we preserve the older

 * design for the backward compatibility reasons.

 *

 * When the volume table is changed, it is first changed in RAM. Then LEB 0 is

 * erased, and the updated volume table is written back to LEB 0. Then same for

 * LEB 1. This scheme guarantees recoverability from unclean reboots.

 *

 * In this UBI implementation the on-flash volume table does not contain any

 * information about how much data static volumes contain.

 *

 * But it would still be beneficial to store this information in the volume

 * table. For example, suppose we have a static volume X, and all its physical

 * eraseblocks became bad for some reasons. Suppose we are attaching the

 * corresponding MTD device, for some reason we find no logical eraseblocks

 * corresponding to the volume X. According to the volume table volume X does

 * exist. So we don't know whether it is just empty or all its physical

 * eraseblocks went bad. So we cannot alarm the user properly.

 *

 * The volume table also stores so-called "update marker", which is used for

 * volume updates. Before updating the volume, the update marker is set, and

 * after the update operation is finished, the update marker is cleared. So if

 * the update operation was interrupted (e.g. by an unclean reboot) - the

 * update marker is still there and we know that the volume's contents is

 * damaged.

 Empty volume table record */

/**

 * ubi_update_layout_vol - helper for updatting layout volumes on flash

 * @ubi: UBI device description object

/**

 * ubi_change_vtbl_record - change volume table record.

 * @ubi: UBI device description object

 * @idx: table index to change

 * @vtbl_rec: new volume table record

 *

 * This function changes volume table record @idx. If @vtbl_rec is %NULL, empty

 * volume table record is written. The caller does not have to calculate CRC of

 * the record as it is done by this function. Returns zero in case of success

 * and a negative error code in case of failure.

/**

 * ubi_vtbl_rename_volumes - rename UBI volumes in the volume table.

 * @ubi: UBI device description object

 * @rename_list: list of &struct ubi_rename_entry objects

 *

 * This function re-names multiple volumes specified in @req in the volume

 * table. Returns zero in case of success and a negative error code in case of

 * failure.

/**

 * vtbl_check - check if volume table is not corrupted and sensible.

 * @ubi: UBI device description object

 * @vtbl: volume table

 *

 * This function returns zero if @vtbl is all right, %1 if CRC is incorrect,

 * and %-EINVAL if it contains inconsistent data.

 Checks that all names are unique */

/**

 * create_vtbl - create a copy of volume table.

 * @ubi: UBI device description object

 * @ai: attaching information

 * @copy: number of the volume table copy

 * @vtbl: contents of the volume table

 *

 * This function returns zero in case of success and a negative error code in

 * case of failure.

 The EC header is already there, write the VID header */

 Write the layout volume contents */

	/*

	 * And add it to the attaching information. Don't delete the old version

	 * of this LEB as it will be deleted and freed in 'ubi_add_to_av()'.

		/*

		 * Probably this physical eraseblock went bad, try to pick

		 * another one.

/**

 * process_lvol - process the layout volume.

 * @ubi: UBI device description object

 * @ai: attaching information

 * @av: layout volume attaching information

 *

 * This function is responsible for reading the layout volume, ensuring it is

 * not corrupted, and recovering from corruptions if needed. Returns volume

 * table in case of success and a negative error code in case of failure.

	/*

	 * UBI goes through the following steps when it changes the layout

	 * volume:

	 * a. erase LEB 0;

	 * b. write new data to LEB 0;

	 * c. erase LEB 1;

	 * d. write new data to LEB 1.

	 *

	 * Before the change, both LEBs contain the same data.

	 *

	 * Due to unclean reboots, the contents of LEB 0 may be lost, but there

	 * should LEB 1. So it is OK if LEB 0 is corrupted while LEB 1 is not.

	 * Similarly, LEB 1 may be lost, but there should be LEB 0. And

	 * finally, unclean reboots may result in a situation when neither LEB

	 * 0 nor LEB 1 are corrupted, but they are different. In this case, LEB

	 * 0 contains more recent information.

	 *

	 * So the plan is to first check LEB 0. Then

	 * a. if LEB 0 is OK, it must be containing the most recent data; then

	 *    we compare it with LEB 1, and if they are different, we copy LEB

	 *    0 to LEB 1;

	 * b. if LEB 0 is corrupted, but LEB 1 has to be OK, and we copy LEB 1

	 *    to LEB 0.

 Read both LEB 0 and LEB 1 into memory */

			/*

			 * Scrub the PEB later. Note, -EBADMSG indicates an

			 * uncorrectable ECC error, but we have our own CRC and

			 * the data will be checked later. If the data is OK,

			 * the PEB will be scrubbed (because we set

			 * aeb->scrub). If the data is not OK, the contents of

			 * the PEB will be recovered from the second copy, and

			 * aeb->scrub will be cleared in

			 * 'ubi_add_to_av()'.

 LEB 0 is OK */

 Both LEB 1 and LEB 2 are OK and consistent */

 LEB 0 is corrupted or does not exist */

 Both LEB 0 and LEB 1 are corrupted */

/**

 * create_empty_lvol - create empty layout volume.

 * @ubi: UBI device description object

 * @ai: attaching information

 *

 * This function returns volume table contents in case of success and a

 * negative error code in case of failure.

/**

 * init_volumes - initialize volume information for existing volumes.

 * @ubi: UBI device description object

 * @ai: scanning information

 * @vtbl: volume table

 *

 * This function allocates volume description objects for existing volumes.

 * Returns zero in case of success and a negative error code in case of

 * failure.

 Empty record */

 Auto re-size flag may be set only for one volume */

		/*

		 * We use ubi->peb_count and not vol->reserved_pebs because

		 * we want to keep the code simple. Otherwise we'd have to

		 * resize/check the bitmap upon volume resize too.

		 * Allocating a few bytes more does not hurt.

		/*

		 * In case of dynamic volume UBI knows nothing about how many

		 * data is stored there. So assume the whole volume is used.

 Static volumes only */

			/*

			 * No eraseblocks belonging to this volume found. We

			 * don't actually know whether this static volume is

			 * completely corrupted or just contains no data. And

			 * we cannot know this as long as data size is not

			 * stored on flash. So we just assume the volume is

			 * empty. FIXME: this should be handled.

			/*

			 * We found a static volume which misses several

			 * eraseblocks. Treat it as corrupted.

 And add the layout volume */

/**

 * check_av - check volume attaching information.

 * @vol: UBI volume description object

 * @av: volume attaching information

 *

 * This function returns zero if the volume attaching information is consistent

 * to the data read from the volume tabla, and %-EINVAL if not.

/**

 * check_attaching_info - check that attaching information.

 * @ubi: UBI device description object

 * @ai: attaching information

 *

 * Even though we protect on-flash data by CRC checksums, we still don't trust

 * the media. This function ensures that attaching information is consistent to

 * the information read from the volume table. Returns zero if the attaching

 * information is OK and %-EINVAL if it is not.

			/*

			 * During attaching we found a volume which does not

			 * exist according to the information in the volume

			 * table. This must have happened due to an unclean

			 * reboot while the volume was being removed. Discard

			 * these eraseblocks.

/**

 * ubi_read_volume_table - read the volume table.

 * @ubi: UBI device description object

 * @ai: attaching information

 *

 * This function reads volume table, checks it, recover from errors if needed,

 * or creates it if needed. Returns zero in case of success and a negative

 * error code in case of failure.

	/*

	 * The number of supported volumes is limited by the eraseblock size

	 * and by the UBI_MAX_VOLUMES constant.

		/*

		 * No logical eraseblocks belonging to the layout volume were

		 * found. This could mean that the flash is just empty. In

		 * this case we create empty layout volume.

		 *

		 * But if flash is not empty this must be a corruption or the

		 * MTD device just contains garbage.

 This must not happen with proper UBI images */

	/*

	 * The layout volume is OK, initialize the corresponding in-RAM data

	 * structures.

	/*

	 * Make sure that the attaching information is consistent to the

	 * information stored in the volume table.

/**

 * self_vtbl_check - check volume table.

 * @ubi: UBI device description object

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) International Business Machines Corp., 2006

 * Copyright (c) Nokia Corporation, 2007

 *

 * Author: Artem Bityutskiy (Битюцкий Артём),

 *         Frank Haverkamp

/*

 * This file includes UBI initialization and building of UBI devices.

 *

 * When UBI is initialized, it attaches all the MTD devices specified as the

 * module load parameters or the kernel boot parameters. If MTD devices were

 * specified, UBI does not attach any MTD device, but it is possible to do

 * later using the "UBI control device".

 Maximum length of the 'mtd=' parameter */

 Maximum number of comma-separated items in the 'mtd=' parameter */

 Maximum value for the number of bad PEBs per 1024 PEBs */

/**

 * struct mtd_dev_param - MTD device parameter description data structure.

 * @name: MTD character device node path, MTD device name, or MTD device number

 *        string

 * @ubi_num: UBI number

 * @vid_hdr_offs: VID header offset

 * @max_beb_per1024: maximum expected number of bad PEBs per 1024 PEBs

 Numbers of elements set in the @mtd_dev_param array */

 MTD devices specification parameters */

 UBI module parameter to enable fastmap automatically on non-fastmap images */

 Slab cache for wear-leveling entries */

 UBI control character device */

 All UBI devices in system */

 Serializes UBI devices creations and removals */

 Protects @ubi_devices and @ubi->ref_count */

 "Show" method for files in '/<sysfs>/class/ubi/' */

 UBI version attribute ('/<sysfs>/class/ubi/version') */

 Root UBI "class" object (corresponds to '/<sysfs>/class/ubi/') */

 UBI device attributes (correspond to files in '/<sysfs>/class/ubi/ubiX') */

/**

 * ubi_volume_notify - send a volume change notification.

 * @ubi: UBI device description object

 * @vol: volume description object of the changed volume

 * @ntype: notification type to send (%UBI_VOLUME_ADDED, etc)

 *

 * This is a helper function which notifies all subscribers about a volume

 * change event (creation, removal, re-sizing, re-naming, updating). Returns

 * zero in case of success and a negative error code in case of failure.

/**

 * ubi_notify_all - send a notification to all volumes.

 * @ubi: UBI device description object

 * @ntype: notification type to send (%UBI_VOLUME_ADDED, etc)

 * @nb: the notifier to call

 *

 * This function walks all volumes of UBI device @ubi and sends the @ntype

 * notification for each volume. If @nb is %NULL, then all registered notifiers

 * are called, otherwise only the @nb notifier is called. Returns the number of

 * sent notifications.

		/*

		 * Since the @ubi->device is locked, and we are not going to

		 * change @ubi->volumes, we do not have to lock

		 * @ubi->volumes_lock.

/**

 * ubi_enumerate_volumes - send "add" notification for all existing volumes.

 * @nb: the notifier to call

 *

 * This function walks all UBI devices and volumes and sends the

 * %UBI_VOLUME_ADDED notification for each volume. If @nb is %NULL, then all

 * registered notifiers are called, otherwise only the @nb notifier is called.

 * Returns the number of sent notifications.

	/*

	 * Since the @ubi_devices_mutex is locked, and we are not going to

	 * change @ubi_devices, we do not have to lock @ubi_devices_lock.

/**

 * ubi_get_device - get UBI device.

 * @ubi_num: UBI device number

 *

 * This function returns UBI device description object for UBI device number

 * @ubi_num, or %NULL if the device does not exist. This function increases the

 * device reference count to prevent removal of the device. In other words, the

 * device cannot be removed if its reference count is not zero.

/**

 * ubi_put_device - drop an UBI device reference.

 * @ubi: UBI device description object

/**

 * ubi_get_by_major - get UBI device by character device major number.

 * @major: major number

 *

 * This function is similar to 'ubi_get_device()', but it searches the device

 * by its major number.

/**

 * ubi_major2num - get UBI device number by character device major number.

 * @major: major number

 *

 * This function searches UBI device number object by its major number. If UBI

 * device was not found, this function returns -ENODEV, otherwise the UBI device

 * number is returned.

 "Show" method for files in '/<sysfs>/class/ubi/ubiX/' */

	/*

	 * The below code looks weird, but it actually makes sense. We get the

	 * UBI device reference from the contained 'struct ubi_device'. But it

	 * is unclear if the device was removed or not yet. Indeed, if the

	 * device was removed before we increased its reference count,

	 * 'ubi_get_device()' will return -ENODEV and we fail.

	 *

	 * Remember, 'struct ubi_device' is freed in the release function, so

	 * we still can use 'ubi->ubi_num'.

/**

 * kill_volumes - destroy all user volumes.

 * @ubi: UBI device description object

/**

 * uif_init - initialize user interfaces for an UBI device.

 * @ubi: UBI device description object

 *

 * This function initializes various user interfaces for an UBI device. If the

 * initialization fails at an early stage, this function frees all the

 * resources it allocated, returns an error.

 *

 * This function returns zero in case of success and a negative error code in

 * case of failure.

	/*

	 * Major numbers for the UBI character devices are allocated

	 * dynamically. Major numbers of volume character devices are

	 * equivalent to ones of the corresponding UBI character device. Minor

	 * numbers of UBI character devices are 0, while minor numbers of

	 * volume character devices start from 1. Thus, we allocate one major

	 * number and ubi->vtbl_slots + 1 minor numbers.

/**

 * uif_close - close user interfaces for an UBI device.

 * @ubi: UBI device description object

 *

 * Note, since this function un-registers UBI volume device objects (@vol->dev),

 * the memory allocated voe the volumes is freed as well (in the release

 * function).

/**

 * ubi_free_volumes_from - free volumes from specific index.

 * @ubi: UBI device description object

 * @from: the start index used for volume free.

/**

 * ubi_free_all_volumes - free all volumes.

 * @ubi: UBI device description object

/**

 * ubi_free_internal_volumes - free internal volumes.

 * @ubi: UBI device description object

		/*

		 * Since max_beb_per1024 has not been set by the user in either

		 * the cmdline or Kconfig, use mtd_max_bad_blocks to set the

		 * limit if it is supported by the device.

	/*

	 * Here we are using size of the entire flash chip and

	 * not just the MTD partition size because the maximum

	 * number of bad eraseblocks is a percentage of the

	 * whole device and bad eraseblocks are not fairly

	 * distributed over the flash chip. So the worst case

	 * is that all the bad eraseblocks of the chip are in

	 * the MTD partition we are attaching (ubi->mtd).

 Round it up */

/**

 * io_init - initialize I/O sub-system for a given UBI device.

 * @ubi: UBI device description object

 * @max_beb_per1024: maximum expected number of bad PEB per 1024 PEBs

 *

 * If @ubi->vid_hdr_offset or @ubi->leb_start is zero, default offsets are

 * assumed:

 *   o EC header is always at offset zero - this cannot be changed;

 *   o VID header starts just after the EC header at the closest address

 *     aligned to @io->hdrs_min_io_size;

 *   o data starts just after the VID header at the closest address aligned to

 *     @io->min_io_size

 *

 * This function returns zero in case of success and a negative error code in

 * case of failure.

		/*

		 * Some flashes have several erase regions. Different regions

		 * may have different eraseblock size and other

		 * characteristics. It looks like mostly multi-region flashes

		 * have one "main" region and one or more small regions to

		 * store boot loader code or boot parameters or whatever. I

		 * guess we should just pick the largest region. But this is

		 * not implemented.

	/*

	 * Note, in this implementation we support MTD devices with 0x7FFFFFFF

	 * physical eraseblocks maximum.

	/*

	 * Make sure minimal I/O unit is power of 2. Note, there is no

	 * fundamental reason for this assumption. It is just an optimization

	 * which allows us to avoid costly division operations.

	/*

	 * Maximum write size has to be greater or equivalent to min. I/O

	 * size, and be multiple of min. I/O size.

 Calculate default aligned sizes of EC and VID headers */

 Default offset */

 Similar for the data offset */

 The shift must be aligned to 32-bit boundary */

 Check sanity */

	/*

	 * Set maximum amount of physical erroneous eraseblocks to be 10%.

	 * Erroneous PEB are those which have read errors.

	/*

	 * It may happen that EC and VID headers are situated in one minimal

	 * I/O unit. In this case we can only accept this UBI image in

	 * read-only mode.

	/*

	 * Note, ideally, we have to initialize @ubi->bad_peb_count here. But

	 * unfortunately, MTD does not provide this information. We should loop

	 * over all physical eraseblocks and invoke mtd->block_is_bad() for

	 * each physical eraseblock. So, we leave @ubi->bad_peb_count

	 * uninitialized so far.

/**

 * autoresize - re-size the volume which has the "auto-resize" flag set.

 * @ubi: UBI device description object

 * @vol_id: ID of the volume to re-size

 *

 * This function re-sizes the volume marked by the %UBI_VTBL_AUTORESIZE_FLG in

 * the volume table to the largest possible size. See comments in ubi-header.h

 * for more description of the flag. Returns zero in case of success and a

 * negative error code in case of failure.

	/*

	 * Clear the auto-resize flag in the volume in-memory copy of the

	 * volume table, and 'ubi_resize_volume()' will propagate this change

	 * to the flash.

		/*

		 * No available PEBs to re-size the volume, clear the flag on

		 * flash and exit.

/**

 * ubi_attach_mtd_dev - attach an MTD device.

 * @mtd: MTD device description object

 * @ubi_num: number to assign to the new UBI device

 * @vid_hdr_offset: VID header offset

 * @max_beb_per1024: maximum expected number of bad PEB per 1024 PEBs

 *

 * This function attaches MTD device @mtd_dev to UBI and assign @ubi_num number

 * to the newly created UBI device, unless @ubi_num is %UBI_DEV_NUM_AUTO, in

 * which case this function finds a vacant device number and assigns it

 * automatically. Returns the new UBI device number in case of success and a

 * negative error code in case of failure.

 *

 * Note, the invocations of this function has to be serialized by the

 * @ubi_devices_mutex.

	/*

	 * Check if we already have the same MTD device attached.

	 *

	 * Note, this function assumes that UBI devices creations and deletions

	 * are serialized, so it does not take the &ubi_devices_lock.

	/*

	 * Make sure this MTD device is not emulated on top of an UBI volume

	 * already. Well, generally this recursion works fine, but there are

	 * different problems like the UBI module takes a reference to itself

	 * by attaching (and thus, opening) the emulated MTD device. This

	 * results in inability to unload the module. And in general it makes

	 * no sense to attach emulated MTD devices, so we prohibit this.

	/*

	 * Both UBI and UBIFS have been designed for SLC NAND and NOR flashes.

	 * MLC NAND is different and needs special care, otherwise UBI or UBIFS

	 * will die soon and you will lose all your data.

	 * Relax this rule if the partition we're attaching to operates in SLC

	 * mode.

 Search for an empty slot in the @ubi_devices array */

 Make sure ubi_num is not busy */

	/*

	 * fm_pool.max_size is 5% of the total number of PEBs but it's also

	 * between UBI_FM_MAX_POOL_SIZE and UBI_FM_MIN_POOL_SIZE.

 Make device "available" before it becomes accessible via sysfs */

	/*

	 * The below lock makes sure we do not race with 'ubi_thread()' which

	 * checks @ubi->thread_enabled. Otherwise we may fail to wake it up.

/**

 * ubi_detach_mtd_dev - detach an MTD device.

 * @ubi_num: UBI device number to detach from

 * @anyway: detach MTD even if device reference count is not zero

 *

 * This function destroys an UBI device number @ubi_num and detaches the

 * underlying MTD device. Returns zero in case of success and %-EBUSY if the

 * UBI device is busy and cannot be destroyed, and %-EINVAL if it does not

 * exist.

 *

 * Note, the invocations of this function has to be serialized by the

 * @ubi_devices_mutex.

 This may only happen if there is a bug */

	/* If we don't write a new fastmap at detach time we lose all

	 * EC updates that have been made since the last written fastmap.

	 * In case of fastmap debugging we omit the update to simulate an

	/*

	 * Before freeing anything, we have to stop the background thread to

	 * prevent it from doing anything on this device while we are freeing.

/**

 * open_mtd_by_chdev - open an MTD device by its character device node path.

 * @mtd_dev: MTD character device node path

 *

 * This helper function opens an MTD device by its character node device path.

 * Returns MTD device description object in case of success and a negative

 * error code in case of failure.

 Probably this is an MTD character device node path */

 MTD device number is defined by the major / minor numbers */

		/*

		 * Just do not think the "/dev/mtdrX" devices support is need,

		 * so do not support them to avoid doing extra work.

/**

 * open_mtd_device - open MTD device by name, character device path, or number.

 * @mtd_dev: name, character device node path, or MTD device device number

 *

 * This function tries to open and MTD device described by @mtd_dev string,

 * which is first treated as ASCII MTD device number, and if it is not true, it

 * is treated as MTD device name, and if that is also not true, it is treated

 * as MTD character device node path. Returns MTD device description object in

 * case of success and a negative error code in case of failure.

		/*

		 * This does not look like an ASCII integer, probably this is

		 * MTD device name.

 Probably this is an MTD character device node path */

 Ensure that EC and VID headers have correct size */

 Create base sysfs directory and sysfs files */

 Attach MTD devices */

 See comment below re-ubi_is_module(). */

			/*

			 * Originally UBI stopped initializing on any error.

			 * However, later on it was found out that this

			 * behavior is not very good when UBI is compiled into

			 * the kernel and the MTD devices to attach are passed

			 * through the command line. Indeed, UBI failure

			 * stopped whole boot sequence.

			 *

			 * To fix this, we changed the behavior for the

			 * non-module case, but preserved the old behavior for

			 * the module case, just for compatibility. This is a

			 * little inconsistent, though.

 See comment above re-ubi_is_module(). */

/**

 * bytes_str_to_int - convert a number of bytes string into an integer.

 * @str: the string to convert

 *

 * This function returns positive resulting integer in case of success and a

 * negative error code in case of failure.

/**

 * ubi_mtd_param_parse - parse the 'mtd=' UBI parameter.

 * @val: the parameter value to parse

 * @kp: not used

 *

 * This function returns zero in case of success and a negative error code in

 * case of error.

 Get rid of the final newline */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) International Business Machines Corp., 2006

 *

 * Author: Artem Bityutskiy (Битюцкий Артём)

/**

 * ubi_dump_flash - dump a region of flash.

 * @ubi: UBI device description object

 * @pnum: the physical eraseblock number to dump

 * @offset: the starting offset within the physical eraseblock to dump

 * @len: the length of the region to dump

/**

 * ubi_dump_ec_hdr - dump an erase counter header.

 * @ec_hdr: the erase counter header to dump

/**

 * ubi_dump_vid_hdr - dump a volume identifier header.

 * @vid_hdr: the volume identifier header to dump

/**

 * ubi_dump_vol_info - dump volume information.

 * @vol: UBI volume description object

/**

 * ubi_dump_vtbl_record - dump a &struct ubi_vtbl_record object.

 * @r: the object to dump

 * @idx: volume table index

/**

 * ubi_dump_av - dump a &struct ubi_ainf_volume object.

 * @av: the object to dump

/**

 * ubi_dump_aeb - dump a &struct ubi_ainf_peb object.

 * @aeb: the object to dump

 * @type: object type: 0 - not corrupted, 1 - corrupted

/**

 * ubi_dump_mkvol_req - dump a &struct ubi_mkvol_req object.

 * @req: the object to dump

/*

 * Root directory for UBI stuff in debugfs. Contains sub-directories which

 * contain the stuff specific to particular UBI devices.

/**

 * ubi_debugfs_init - create UBI debugfs directory.

 *

 * Create UBI debugfs directory. Returns zero in case of success and a negative

 * error code in case of failure.

/**

 * ubi_debugfs_exit - remove UBI debugfs directory.

 Read an UBI debugfs file */

 Write an UBI debugfs file */

/* File operations for all UBI debugfs files except

 * detailed_erase_block_info

/* As long as the position is less then that total number of erase blocks,

 * we still have more to print.

/* Since we are using the position as the iterator, we just need to check if we

 * are done and increment the position.

 If this is the start, print a header */

/**

 * ubi_debugfs_init_dev - initialize debugfs for an UBI device.

 * @ubi: UBI device description object

 *

 * This function creates all debugfs files for UBI device @ubi. Returns zero in

 * case of success and a negative error code in case of failure.

 The array size is too small */

/**

 * dbg_debug_exit_dev - free all debugfs files corresponding to device @ubi

 * @ubi: UBI device description object

/**

 * ubi_dbg_power_cut - emulate a power cut if it is time to do so

 * @ubi: UBI device description object

 * @caller: Flags set to indicate from where the function is being called

 *

 * Returns non-zero if a power cut was emulated, zero if not.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) International Business Machines Corp., 2006

 *

 * Author: Artem Bityutskiy (Битюцкий Артём)

/*

 * The UBI Eraseblock Association (EBA) sub-system.

 *

 * This sub-system is responsible for I/O to/from logical eraseblock.

 *

 * Although in this implementation the EBA table is fully kept and managed in

 * RAM, which assumes poor scalability, it might be (partially) maintained on

 * flash in future implementations.

 *

 * The EBA sub-system implements per-logical eraseblock locking. Before

 * accessing a logical eraseblock it is locked for reading or writing. The

 * per-logical eraseblock locking is implemented by means of the lock tree. The

 * lock tree is an RB-tree which refers all the currently locked logical

 * eraseblocks. The lock tree elements are &struct ubi_ltree_entry objects.

 * They are indexed by (@vol_id, @lnum) pairs.

 *

 * EBA also maintains the global sequence counter which is incremented each

 * time a logical eraseblock is mapped to a physical eraseblock and it is

 * stored in the volume identifier header. This means that each VID header has

 * a unique sequence number. The sequence number is only increased an we assume

 * 64 bits is enough to never overflow.

 Number of physical eraseblocks reserved for atomic LEB change operation */

/**

 * struct ubi_eba_entry - structure encoding a single LEB -> PEB association

 * @pnum: the physical eraseblock number attached to the LEB

 *

 * This structure is encoding a LEB -> PEB association. Note that the LEB

 * number is not stored here, because it is the index used to access the

 * entries table.

/**

 * struct ubi_eba_table - LEB -> PEB association information

 * @entries: the LEB to PEB mapping (one entry per LEB).

 *

 * This structure is private to the EBA logic and should be kept here.

 * It is encoding the LEB to PEB association table, and is subject to

 * changes.

/**

 * next_sqnum - get next sequence number.

 * @ubi: UBI device description object

 *

 * This function returns next sequence number to use, which is just the current

 * global sequence counter value. It also increases the global sequence

 * counter.

/**

 * ubi_get_compat - get compatibility flags of a volume.

 * @ubi: UBI device description object

 * @vol_id: volume ID

 *

 * This function returns compatibility flags for an internal volume. User

 * volumes have no compatibility flags, so %0 is returned.

/**

 * ubi_eba_get_ldesc - get information about a LEB

 * @vol: volume description object

 * @lnum: logical eraseblock number

 * @ldesc: the LEB descriptor to fill

 *

 * Used to query information about a specific LEB.

 * It is currently only returning the physical position of the LEB, but will be

 * extended to provide more information.

/**

 * ubi_eba_create_table - allocate a new EBA table and initialize it with all

 *			  LEBs unmapped

 * @vol: volume containing the EBA table to copy

 * @nentries: number of entries in the table

 *

 * Allocate a new EBA table and initialize it with all LEBs unmapped.

 * Returns a valid pointer if it succeed, an ERR_PTR() otherwise.

/**

 * ubi_eba_destroy_table - destroy an EBA table

 * @tbl: the table to destroy

 *

 * Destroy an EBA table.

/**

 * ubi_eba_copy_table - copy the EBA table attached to vol into another table

 * @vol: volume containing the EBA table to copy

 * @dst: destination

 * @nentries: number of entries to copy

 *

 * Copy the EBA table stored in vol into the one pointed by dst.

/**

 * ubi_eba_replace_table - assign a new EBA table to a volume

 * @vol: volume containing the EBA table to copy

 * @tbl: new EBA table

 *

 * Assign a new EBA table to the volume and release the old one.

/**

 * ltree_lookup - look up the lock tree.

 * @ubi: UBI device description object

 * @vol_id: volume ID

 * @lnum: logical eraseblock number

 *

 * This function returns a pointer to the corresponding &struct ubi_ltree_entry

 * object if the logical eraseblock is locked and %NULL if it is not.

 * @ubi->ltree_lock has to be locked.

/**

 * ltree_add_entry - add new entry to the lock tree.

 * @ubi: UBI device description object

 * @vol_id: volume ID

 * @lnum: logical eraseblock number

 *

 * This function adds new entry for logical eraseblock (@vol_id, @lnum) to the

 * lock tree. If such entry is already there, its usage counter is increased.

 * Returns pointer to the lock tree entry or %-ENOMEM if memory allocation

 * failed.

		/*

		 * This logical eraseblock is already locked. The newly

		 * allocated lock entry is not needed.

		/*

		 * No lock entry, add the newly allocated one to the

		 * @ubi->ltree RB-tree.

/**

 * leb_read_lock - lock logical eraseblock for reading.

 * @ubi: UBI device description object

 * @vol_id: volume ID

 * @lnum: logical eraseblock number

 *

 * This function locks a logical eraseblock for reading. Returns zero in case

 * of success and a negative error code in case of failure.

/**

 * leb_read_unlock - unlock logical eraseblock.

 * @ubi: UBI device description object

 * @vol_id: volume ID

 * @lnum: logical eraseblock number

/**

 * leb_write_lock - lock logical eraseblock for writing.

 * @ubi: UBI device description object

 * @vol_id: volume ID

 * @lnum: logical eraseblock number

 *

 * This function locks a logical eraseblock for writing. Returns zero in case

 * of success and a negative error code in case of failure.

/**

 * leb_write_trylock - try to lock logical eraseblock for writing.

 * @ubi: UBI device description object

 * @vol_id: volume ID

 * @lnum: logical eraseblock number

 *

 * This function locks a logical eraseblock for writing if there is no

 * contention and does nothing if there is contention. Returns %0 in case of

 * success, %1 in case of contention, and and a negative error code in case of

 * failure.

 Contention, cancel */

/**

 * leb_write_unlock - unlock logical eraseblock.

 * @ubi: UBI device description object

 * @vol_id: volume ID

 * @lnum: logical eraseblock number

/**

 * ubi_eba_is_mapped - check if a LEB is mapped.

 * @vol: volume description object

 * @lnum: logical eraseblock number

 *

 * This function returns true if the LEB is mapped, false otherwise.

/**

 * ubi_eba_unmap_leb - un-map logical eraseblock.

 * @ubi: UBI device description object

 * @vol: volume description object

 * @lnum: logical eraseblock number

 *

 * This function un-maps logical eraseblock @lnum and schedules corresponding

 * physical eraseblock for erasure. Returns zero in case of success and a

 * negative error code in case of failure.

 This logical eraseblock is already unmapped */

/**

 * check_mapping - check and fixup a mapping

 * @ubi: UBI device description object

 * @vol: volume description object

 * @lnum: logical eraseblock number

 * @pnum: physical eraseblock number

 *

 * Checks whether a given mapping is valid. Fastmap cannot track LEB unmap

 * operations, if such an operation is interrupted the mapping still looks

 * good, but upon first read an ECC is reported to the upper layer.

 * Normaly during the full-scan at attach time this is fixed, for Fastmap

 * we have to deal with it while reading.

 * If the PEB behind a LEB shows this symthom we change the mapping to

 * %UBI_LEB_UNMAPPED and schedule the PEB for erasure.

 *

 * Returns 0 on success, negative error code in case of failure.

/**

 * ubi_eba_read_leb - read data.

 * @ubi: UBI device description object

 * @vol: volume description object

 * @lnum: logical eraseblock number

 * @buf: buffer to store the read data

 * @offset: offset from where to read

 * @len: how many bytes to read

 * @check: data CRC check flag

 *

 * If the logical eraseblock @lnum is unmapped, @buf is filled with 0xFF

 * bytes. The @check flag only makes sense for static volumes and forces

 * eraseblock data CRC checking.

 *

 * In case of success this function returns zero. In case of a static volume,

 * if data CRC mismatches - %-EBADMSG is returned. %-EBADMSG may also be

 * returned for any volume type if an ECC error was detected by the MTD device

 * driver. Other negative error cored may be returned in case of other errors.

		/*

		 * The logical eraseblock is not mapped, fill the whole buffer

		 * with 0xFF bytes. The exception is static volumes for which

		 * it is an error to read unmapped logical eraseblocks.

				/*

				 * The header is either absent or corrupted.

				 * The former case means there is a bug -

				 * switch to read-only mode just in case.

				 * The latter case means a real corruption - we

				 * may try to recover data. FIXME: but this is

				 * not implemented.

					/*

					 * Ending up here in the non-Fastmap case

					 * is a clear bug as the VID header had to

					 * be present at scan time to have it referenced.

					 * With fastmap the story is more complicated.

					 * Fastmap has the mapping info without the need

					 * of a full scan. So the LEB could have been

					 * unmapped, Fastmap cannot know this and keeps

					 * the LEB referenced.

					 * This is valid and works as the layer above UBI

					 * has to do bookkeeping about used/referenced

					 * LEBs in any case.

/**

 * ubi_eba_read_leb_sg - read data into a scatter gather list.

 * @ubi: UBI device description object

 * @vol: volume description object

 * @lnum: logical eraseblock number

 * @sgl: UBI scatter gather list to store the read data

 * @offset: offset from where to read

 * @len: how many bytes to read

 * @check: data CRC check flag

 *

 * This function works exactly like ubi_eba_read_leb(). But instead of

 * storing the read data into a buffer it writes to an UBI scatter gather

 * list.

/**

 * try_recover_peb - try to recover from write failure.

 * @vol: volume description object

 * @pnum: the physical eraseblock to recover

 * @lnum: logical eraseblock number

 * @buf: data which was not written because of the write failure

 * @offset: offset of the failed write

 * @len: how many bytes should have been written

 * @vidb: VID buffer

 * @retry: whether the caller should retry in case of failure

 *

 * This function is called in case of a write failure and moves all good data

 * from the potentially bad physical eraseblock to a good physical eraseblock.

 * This function also writes the data which was not written due to the failure.

 * Returns 0 in case of success, and a negative error code in case of failure.

 * In case of failure, the %retry parameter is set to false if this is a fatal

 * error (retrying won't help), and true otherwise.

 Read everything before the area where the write failure happened */

		/*

		 * Bad luck? This physical eraseblock is bad too? Crud. Let's

		 * try to get another one.

/**

 * recover_peb - recover from write failure.

 * @ubi: UBI device description object

 * @pnum: the physical eraseblock to recover

 * @vol_id: volume ID

 * @lnum: logical eraseblock number

 * @buf: data which was not written because of the write failure

 * @offset: offset of the failed write

 * @len: how many bytes should have been written

 *

 * This function is called in case of a write failure and moves all good data

 * from the potentially bad physical eraseblock to a good physical eraseblock.

 * This function also writes the data which was not written due to the failure.

 * Returns 0 in case of success, and a negative error code in case of failure.

 * This function tries %UBI_IO_RETRIES before giving up.

/**

 * try_write_vid_and_data - try to write VID header and data to a new PEB.

 * @vol: volume description object

 * @lnum: logical eraseblock number

 * @vidb: the VID buffer to write

 * @buf: buffer containing the data

 * @offset: where to start writing data

 * @len: how many bytes should be written

 *

 * This function tries to write VID header and data belonging to logical

 * eraseblock @lnum of volume @vol to a new physical eraseblock. Returns zero

 * in case of success and a negative error code in case of failure.

 * In case of error, it is possible that something was still written to the

 * flash media, but may be some garbage.

/**

 * ubi_eba_write_leb - write data to dynamic volume.

 * @ubi: UBI device description object

 * @vol: volume description object

 * @lnum: logical eraseblock number

 * @buf: the data to write

 * @offset: offset within the logical eraseblock where to write

 * @len: how many bytes to write

 *

 * This function writes data to logical eraseblock @lnum of a dynamic volume

 * @vol. Returns zero in case of success and a negative error code in case

 * of failure. In case of error, it is possible that something was still

 * written to the flash media, but may be some garbage.

 * This function retries %UBI_IO_RETRIES times before giving up.

	/*

	 * The logical eraseblock is not mapped. We have to get a free physical

	 * eraseblock and write the volume identifier header there first.

		/*

		 * Fortunately, this is the first write operation to this

		 * physical eraseblock, so just put it and request a new one.

		 * We assume that if this physical eraseblock went bad, the

		 * erase code will handle that.

/**

 * ubi_eba_write_leb_st - write data to static volume.

 * @ubi: UBI device description object

 * @vol: volume description object

 * @lnum: logical eraseblock number

 * @buf: data to write

 * @len: how many bytes to write

 * @used_ebs: how many logical eraseblocks will this volume contain

 *

 * This function writes data to logical eraseblock @lnum of static volume

 * @vol. The @used_ebs argument should contain total number of logical

 * eraseblock in this static volume.

 *

 * When writing to the last logical eraseblock, the @len argument doesn't have

 * to be aligned to the minimal I/O unit size. Instead, it has to be equivalent

 * to the real data size, although the @buf buffer has to contain the

 * alignment. In all other cases, @len has to be aligned.

 *

 * It is prohibited to write more than once to logical eraseblocks of static

 * volumes. This function returns zero in case of success and a negative error

 * code in case of failure.

 If this is the last LEB @len may be unaligned */

/*

 * ubi_eba_atomic_leb_change - change logical eraseblock atomically.

 * @ubi: UBI device description object

 * @vol: volume description object

 * @lnum: logical eraseblock number

 * @buf: data to write

 * @len: how many bytes to write

 *

 * This function changes the contents of a logical eraseblock atomically. @buf

 * has to contain new logical eraseblock data, and @len - the length of the

 * data, which has to be aligned. This function guarantees that in case of an

 * unclean reboot the old contents is preserved. Returns zero in case of

 * success and a negative error code in case of failure.

 *

 * UBI reserves one LEB for the "atomic LEB change" operation, so only one

 * LEB change may be done at a time. This is ensured by @ubi->alc_mutex.

		/*

		 * Special case when data length is zero. In this case the LEB

		 * has to be unmapped and mapped somewhere else.

	/*

	 * This flash device does not admit of bad eraseblocks or

	 * something nasty and unexpected happened. Switch to read-only

	 * mode just in case.

/**

 * is_error_sane - check whether a read error is sane.

 * @err: code of the error happened during reading

 *

 * This is a helper function for 'ubi_eba_copy_leb()' which is called when we

 * cannot read data from the target PEB (an error @err happened). If the error

 * code is sane, then we treat this error as non-fatal. Otherwise the error is

 * fatal and UBI will be switched to R/O mode later.

 *

 * The idea is that we try not to switch to R/O mode if the read error is

 * something which suggests there was a real read problem. E.g., %-EIO. Or a

 * memory allocation failed (-%ENOMEM). Otherwise, it is safer to switch to R/O

 * mode, simply because we do not know what happened at the MTD level, and we

 * cannot handle this. E.g., the underlying driver may have become crazy, and

 * it is safer to switch to R/O mode to preserve the data.

 *

 * And bear in mind, this is about reading from the target PEB, i.e. the PEB

 * which we have just written.

/**

 * ubi_eba_copy_leb - copy logical eraseblock.

 * @ubi: UBI device description object

 * @from: physical eraseblock number from where to copy

 * @to: physical eraseblock number where to copy

 * @vidb: data structure from where the VID header is derived

 *

 * This function copies logical eraseblock from physical eraseblock @from to

 * physical eraseblock @to. The @vid_hdr buffer may be changed by this

 * function. Returns:

 *   o %0 in case of success;

 *   o %MOVE_CANCEL_RACE, %MOVE_TARGET_WR_ERR, %MOVE_TARGET_BITFLIPS, etc;

 *   o a negative error code in case of failure.

	/*

	 * Note, we may race with volume deletion, which means that the volume

	 * this logical eraseblock belongs to might be being deleted. Since the

	 * volume deletion un-maps all the volume's logical eraseblocks, it will

	 * be locked in 'ubi_wl_put_peb()' and wait for the WL worker to finish.

 No need to do further work, cancel */

	/*

	 * We do not want anybody to write to this logical eraseblock while we

	 * are moving it, so lock it.

	 *

	 * Note, we are using non-waiting locking here, because we cannot sleep

	 * on the LEB, since it may cause deadlocks. Indeed, imagine a task is

	 * unmapping the LEB which is mapped to the PEB we are going to move

	 * (@from). This task locks the LEB and goes sleep in the

	 * 'ubi_wl_put_peb()' function on the @ubi->move_mutex. In turn, we are

	 * holding @ubi->move_mutex and go sleep on the LEB lock. So, if the

	 * LEB is already locked, we just do not move it and return

	 * %MOVE_RETRY. Note, we do not return %MOVE_CANCEL_RACE here because

	 * we do not know the reasons of the contention - it may be just a

	 * normal I/O on this LEB, so we want to re-try.

	/*

	 * The LEB might have been put meanwhile, and the task which put it is

	 * probably waiting on @ubi->move_mutex. No need to continue the work,

	 * cancel it.

	/*

	 * OK, now the LEB is locked and we can safely start moving it. Since

	 * this function utilizes the @ubi->peb_buf buffer which is shared

	 * with some other functions - we lock the buffer by taking the

	 * @ubi->buf_mutex.

	/*

	 * Now we have got to calculate how much data we have to copy. In

	 * case of a static volume it is fairly easy - the VID header contains

	 * the data size. In case of a dynamic volume it is more difficult - we

	 * have to read the contents, cut 0xFF bytes from the end and copy only

	 * the first part. We must do this to avoid writing 0xFF bytes as it

	 * may have some side-effects. And not only this. It is important not

	 * to include those 0xFFs to CRC because later the they may be filled

	 * by data.

	/*

	 * It may turn out to be that the whole @from physical eraseblock

	 * contains only 0xFF bytes. Then we have to only write the VID header

	 * and do not write any data. This also means we should not set

	 * @vid_hdr->copy_flag, @vid_hdr->data_size, and @vid_hdr->data_crc.

 Read the VID header back and check if it was written correctly */

/**

 * print_rsvd_warning - warn about not having enough reserved PEBs.

 * @ubi: UBI device description object

 * @ai: UBI attach info object

 *

 * This is a helper function for 'ubi_eba_init()' which is called when UBI

 * cannot reserve enough PEBs for bad block handling. This function makes a

 * decision whether we have to print a warning or not. The algorithm is as

 * follows:

 *   o if this is a new UBI image, then just print the warning

 *   o if this is an UBI image which has already been used for some time, print

 *     a warning only if we can reserve less than 10% of the expected amount of

 *     the reserved PEB.

 *

 * The idea is that when UBI is used, PEBs become bad, and the reserved pool

 * of PEBs becomes smaller, which is normal and we do not want to scare users

 * with a warning every time they attach the MTD device. This was an issue

 * reported by real users.

	/*

	 * The 1 << 18 (256KiB) number is picked randomly, just a reasonably

	 * large number to distinguish between newly flashed and used images.

/**

 * self_check_eba - run a self check on the EBA table constructed by fastmap.

 * @ubi: UBI device description object

 * @ai_fastmap: UBI attach info object created by fastmap

 * @ai_scan: UBI attach info object created by scanning

 *

 * Returns < 0 in case of an internal error, 0 otherwise.

 * If a bad EBA table entry was found it will be printed out and

 * ubi_assert() triggers.

/**

 * ubi_eba_init - initialize the EBA sub-system using attaching information.

 * @ubi: UBI device description object

 * @ai: attaching information

 *

 * This function returns zero in case of success and a negative error code in

 * case of failure.

				/*

				 * This may happen in case of an unclean reboot

				 * during re-size.

 No enough free physical eraseblocks */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) International Business Machines Corp., 2006

 *

 * Author: Artem Bityutskiy (Битюцкий Артём)

/*

 * This file includes implementation of UBI character device operations.

 *

 * There are two kinds of character devices in UBI: UBI character devices and

 * UBI volume character devices. UBI character devices allow users to

 * manipulate whole volumes: create, remove, and re-size them. Volume character

 * devices provide volume I/O capabilities.

 *

 * Major and minor numbers are assigned dynamically to both UBI and volume

 * character devices.

 *

 * Well, there is the third kind of character devices - the UBI control

 * character device, which allows to manipulate by UBI devices - create and

 * delete them. In other words, it is used for attaching and detaching MTD

 * devices.

/**

 * get_exclusive - get exclusive access to an UBI volume.

 * @desc: volume descriptor

 *

 * This function changes UBI volume open mode to "exclusive". Returns previous

 * mode value (positive integer) in case of success and a negative error code

 * in case of failure.

/**

 * revoke_exclusive - revoke exclusive mode.

 * @desc: volume descriptor

 * @mode: new mode to switch to

 Update is in progress, seeking is prohibited */

/*

 * This function allows to directly write to dynamic UBI volumes, without

 * issuing the volume update operation.

 We can write only in fractions of the minimum I/O unit */

		/*

		 * The operation is finished, @err contains number of actually

		 * written bytes.

		/*

		 * We voluntarily do not take into account the skip_check flag

		 * as we want to make sure what we wrote was correctly written.

 Volume update command */

 Atomic logical eraseblock change command */

 Validate the request */

 Logical eraseblock erasure command */

 Logical eraseblock map command */

 Logical eraseblock un-map command */

 Check if logical eraseblock is mapped command */

 Set volume property command */

 Create a R/O block device on top of the UBI volume */

 Remove the R/O block device */

/**

 * verify_mkvol_req - verify volume creation request.

 * @ubi: UBI device description object

 * @req: the request to check

 *

 * This function zero if the request is correct, and %-EINVAL if not.

/**

 * verify_rsvol_req - verify volume re-size request.

 * @ubi: UBI device description object

 * @req: the request to check

 *

 * This function returns zero if the request is correct, and %-EINVAL if not.

/**

 * rename_volumes - rename UBI volumes.

 * @ubi: UBI device description object

 * @req: volumes re-name request

 *

 * This is a helper function for the volume re-name IOCTL which validates the

 * the request, opens the volume and calls corresponding volumes management

 * function. Returns zero in case of success and a negative error code in case

 * of failure.

 Validate volume IDs and names in the request */

 Make sure volume IDs and names are unique */

 Create the re-name list */

 Skip this re-naming if the name does not really change */

 Find out the volumes which have to be removed */

		/*

		 * Volume @re->vol_id is going to be re-named to

		 * @re->new_name, while its current name is @name. If a volume

		 * with name @re->new_name currently exists, it has to be

		 * removed, unless it is also re-named in the request (@req).

		/*

		 * It seems we need to remove volume with name @re->new_name,

		 * if it exists.

 Re-naming into a non-existing volume name */

 The volume exists but busy, or an error occurred */

 Create volume command */

 Remove volume command */

		/*

		 * The volume is deleted (unless an error occurred), and the

		 * 'struct ubi_volume' object will be freed when

		 * 'ubi_close_volume()' will call 'put_device()'.

 Re-size volume command */

 Re-name volumes command */

 Check a specific PEB for bitflips and scrub it if needed */

 Force scrubbing for a specific PEB */

 Attach an MTD device command */

		/*

		 * Note, further request verification is done by

		 * 'ubi_attach_mtd_dev()'.

 @err contains UBI device number */

 Detach an MTD device command */

 UBI volume character device operations */

 UBI character device operations */

 UBI control character device operations */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) International Business Machines Corp., 2006

 *

 * Author: Artem Bityutskiy (Битюцкий Артём)

/*

 * This file contains implementation of volume creation, deletion, updating and

 * resizing.

 Device attributes corresponding to files in '/<sysfs>/class/ubi/ubiX_Y' */

/*

 * "Show" method for files in '/<sysfs>/class/ubi/ubiX_Y/'.

 *

 * Consider a situation:

 * A. process 1 opens a sysfs file related to volume Y, say

 *    /<sysfs>/class/ubi/ubiX_Y/reserved_ebs;

 * B. process 2 removes volume Y;

 * C. process 1 starts reading the /<sysfs>/class/ubi/ubiX_Y/reserved_ebs file;

 *

 * In this situation, this function will return %-ENODEV because it will find

 * out that the volume was removed from the @ubi->volumes array.

 Take a reference to prevent volume removal */

 This must be a bug */

 We've done the operation, drop volume and UBI device references */

 Release method for volume devices */

/**

 * ubi_create_volume - create volume.

 * @ubi: UBI device description object

 * @req: volume creation request

 *

 * This function creates volume described by @req. If @req->vol_id id

 * %UBI_VOL_NUM_AUTO, this function automatically assign ID to the new volume

 * and saves it in @req->vol_id. Returns zero in case of success and a negative

 * error code in case of failure. Note, the caller has to have the

 * @ubi->device_mutex locked.

 Find unused volume ID */

 Ensure that this volume does not exist */

 Ensure that the name is unique */

 Calculate how many eraseblocks are requested */

 Reserve physical eraseblocks */

	/*

	 * Finish all pending erases because there may be some LEBs belonging

	 * to the same volume ID.

 Make volume "available" before it becomes accessible via sysfs */

 Register character device for the volume */

 Fill volume table record */

	/*

	 * We have registered our device, we should not free the volume

	 * description object in this function in case of an error - it is

	 * freed by the release function.

/**

 * ubi_remove_volume - remove volume.

 * @desc: volume descriptor

 * @no_vtbl: do not change volume table if not zero

 *

 * This function removes volume described by @desc. The volume has to be opened

 * in "exclusive" mode. Returns zero in case of success and a negative error

 * code in case of failure. The caller has to have the @ubi->device_mutex

 * locked.

		/*

		 * The volume is busy, probably someone is reading one of its

		 * sysfs files.

/**

 * ubi_resize_volume - re-size volume.

 * @desc: volume descriptor

 * @reserved_pebs: new size in physical eraseblocks

 *

 * This function re-sizes the volume and returns zero in case of success, and a

 * negative error code in case of failure. The caller has to have the

 * @ubi->device_mutex locked.

 If the size is the same, we have nothing to do */

 Reserve physical eraseblocks */

	/*

	 * When we shrink a volume we have to flush all pending (erase) work.

	 * Otherwise it can happen that upon next attach UBI finds a LEB with

	 * lnum > highest_lnum and refuses to attach.

 Change volume table record */

/**

 * ubi_rename_volumes - re-name UBI volumes.

 * @ubi: UBI device description object

 * @rename_list: list of &struct ubi_rename_entry objects

 *

 * This function re-names or removes volumes specified in the re-name list.

 * Returns zero in case of success and a negative error code in case of

 * failure.

/**

 * ubi_add_volume - add volume.

 * @ubi: UBI device description object

 * @vol: volume description object

 *

 * This function adds an existing volume and initializes all its data

 * structures. Returns zero in case of success and a negative error code in

 * case of failure.

 Register character device for the volume */

/**

 * ubi_free_volume - free volume.

 * @ubi: UBI device description object

 * @vol: volume description object

 *

 * This function frees all resources for volume @vol but does not remove it.

 * Used only when the UBI device is detached.

/**

 * self_check_volume - check volume information.

 * @ubi: UBI device description object

 * @vol_id: volume ID

 *

 * Returns zero if volume is all right and a a negative error code if not.

/**

 * self_check_volumes - check information about all volumes.

 * @ubi: UBI device description object

 *

 * Returns zero if volumes are all right and a a negative error code if not.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * LPDDR2-NVM MTD driver. This module provides read, write, erase, lock/unlock

 * support for LPDDR2-NVM PCM memories

 *

 * Copyright © 2012 Micron Technology, Inc.

 *

 * Vincenzo Aliberti <vincenzo.aliberti@gmail.com>

 * Domenico Manna <domenico.manna@gmail.com>

 * Many thanks to Andrea Vigilante for initial enabling

 Parameters */

 in Word */

 in Word */

 OW offset */

 x32 devices */

 PFOW symbols address offset */

 in Word */

 in Word */

 in Word */

 in Word */

 OW registers address */

 in Word */

 in Word */

 in Word */

 in Word */

 in Word */

 in Word */

 in Word */

 in Word */

 in Word */

 Datamask */

 LPDDR2-NVM Commands */

 LPDDR2-NVM Registers offset */

/*

 * Internal Type Definitions

 * pcm_int_data contains memory controller details:

 * @reg_data : LPDDR2_MODE_REG_DATA register address after remapping

 * @reg_cfg  : LPDDR2_MODE_REG_CFG register address after remapping

 * &bus_width: memory bus-width (eg: x16 2 Bytes, x32 4 Bytes)

/*

 * Build a map_word starting from an u_long

/*

 * Build Mode Register Configuration DataMask based on device bus-width

 x32 device */

/*

 * Build Status Register OK DataMask based on device bus-width

 x32 device */

/*

 * Evaluates Overlay Window Control Registers address

/*

 * Enable lpddr2-nvm Overlay Window

 * Overlay Window is a memory mapped area containing all LPDDR2-NVM registers

 * used by device commands as well as uservisible resources like Device Status

 * Register, Device ID, etc

/*

 * Disable lpddr2-nvm Overlay Window

 * Overlay Window is a memory mapped area containing all LPDDR2-NVM registers

 * used by device commands as well as uservisible resources like Device Status

 * Register, Device ID, etc

/*

 * Execute lpddr2-nvm operations

 only for 2x x16 devices stacked */

 Builds low and high words for OW Control Registers */

 only for 2x x16 */

 Set Overlay Window Control Registers */

 2x16 devices stacked */

 Fill Program Buffer */

 Command Execute */

 2x16 devices stacked */

 Status Register Check */

 2x16 devices stacked */

/*

 * Execute lpddr2-nvm operations @ block level

/*

 * verify presence of PFOW string

 Load string from array */

 Verify the string loaded vs expected */

/*

 * lpddr2_nvm driver read method

/*

 * lpddr2_nvm driver write method

 Set start value for the variables */

 do sw program */

 2x16 devices */

 do buffer program */

/*

 * lpddr2_nvm driver erase method

/*

 * lpddr2_nvm driver unlock method

/*

 * lpddr2_nvm driver lock method

/*

 * lpddr2_nvm driver probe method

 Allocate memory control_regs data structures */

 Allocate memory for map_info & mtd_info data structures */

 lpddr2_nvm address range */

 Populate map_info data structure */

 fill with default methods */

 Populate mtd_info data structure */

 Verify the presence of the device looking for PFOW string */

 Parse partitions and register the MTD device */

/*

 * lpddr2_nvm driver remove method

 Initialize platform_driver data structure for lpddr2_nvm */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Probing flash chips with QINFO records.

 * (C) 2008 Korolev Alexey <akorolev@infradead.org>

 * (C) 2008 Vasiliy Leonenko <vasiliy.leonenko@gmail.com>

 General device info */

 Erase block information */

 Partition information */

 Optional features */

 Operation typical time */

 Write a request for the PFOW record */

 Check identification string */

 "PFOW" is found */

 Get the ManuID */

 Get the DeviceID */

 read parameters from chip qinfo table */

 Ok so we found a chip */

 First probe the map to see if we havecan open PFOW here */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * LPDDR flash memory device operations. This module provides read, write,

 * erase, lock/unlock support for LPDDR flash memories

 * (C) 2008 Korolev Alexey <akorolev@infradead.org>

 * (C) 2008 Vasiliy Leonenko <vasiliy.leonenko@gmail.com>

 * Many thanks to Roman Borisov for initial enabling

 *

 * TODO:

 * Implement VPP management

 * Implement XIP support

 * Implement OTP support

 Fill in the default mtd operations */

			/* those should be reset too since

 set our timeout to 8 times the expected delay */

 OK Still waiting. Drop the lock, wait a while and retry. */

			/*

			 * Half of the normal delay still remaining

			 * can be performed with a sleeping delay instead

			 * of busy waiting.

 Someone's suspended the operation: sleep */

 Suspend has occurred while sleep: reset timeout */

 check status for errors */

 Clear DSR*/

		/*

		 * OK. We have possibility for contension on the write/erase

		 * operations which are global to the real chip and not per

		 * partition.  So let's fight it over in the partition which

		 * currently has authority on the operation.

		 *

		 * The rules are as follows:

		 *

		 * - any write operation must own shared->writing.

		 *

		 * - any erase operation must own _both_ shared->writing and

		 *   shared->erasing.

		 *

		 * - contension arbitration is handled in the owner's context.

		 *

		 * The 'shared' struct can be read and/or written only when

		 * its lock is taken.

			/*

			 * The engine to perform desired operation on this

			 * partition is already in use by someone else.

			 * Let's fight over it in the context of the chip

			 * currently using it.  If it is possible to suspend,

			 * that other partition will do just that, otherwise

			 * it'll happily send us to sleep.  In any case, when

			 * get_chip returns success we're clear to go ahead.

			/* We should not own chip if it is already in FL_SYNCING

		/* Check if we have suspended erase on this chip.

 We now own it */

 Prevent setting state FL_SYNCING for chip in suspended state. */

 Oops. something got wrong. */

 Resume and pretend we weren't here.  */

 Erase suspend */

 Only if there's no operation suspended... */

 We own the ability to write, but we're done */

 give back the ownership */

			/*

			 * We own the ability to erase without the ability

			 * to write, which means the erase was suspended

			 * and some other partition is currently writing.

			 * Don't let the switch below mess things up since

			 * we don't have ownership to resume anything.

 Figure out the number of words to write */

 Write data */

 Get the program buffer offset from PFOW register data first*/

 GO GO GO */

 ofs: offset within the first chip that the first read should start */

 We cannot point across chips that are virtually disjoint */

 get the chip */

 ofs: offset within the first chip that the first read should start */

 We must not cross write block boundaries */

		/* Be nice and reschedule with the chip in a usable

/*

 * block2mtd.c - create an mtd from a block device

 *

 * Copyright (C) 2001,2002	Simon Evans <spse@secret.org.uk>

 * Copyright (C) 2004-2006	Joern Engel <joern@wh.fh-wedel.de>

 *

 * Licence: GPL

/*

 * When the first attempt at device initialization fails, we may need to

 * wait a little bit and retry. This timeout, by default 3 seconds, gives

 * device time to start up. Required on BCM2708 and a few other chipsets.

 Maximum number of comma-separated items in the 'block2mtd=' parameter */

 Info for the block device */

 Static info about the MTD, used in cleanup_module */

 erase a specified part of the device */

 page index

 multiple pages

 this page

 write data to the underlying device */

 page index

 page offset

 multiple pages

 this page

 sync the device - wait until the write queue is empty */

 Get a handle on the device */

	/*

	 * We might not have the root device mounted at this point.

	 * Try to resolve the device name by other means.

			/*

			 * Calling wait_for_device_probe in the first loop

			 * was not enough, sleep for a bit in subsequent

			 * go-arounds.

 Setup the MTD structure */

 make the name contain the block device in */

 Device didn't get added, so free the entry */

/* This function works similar to reguler strtoul.  In addition, it

 * allows some suffixes for a more human-readable number format:

 * ki, Ki, kiB, KiB	- multiply result with 1024

 * Mi, MiB		- multiply result with 1024^2

 * Gi, GiB		- multiply result with 1024^3

 By dwmw2 editorial decree, "ki", "Mi" or "Gi" are to be used. */

 80 for device, 12 for erase size */

 80 for device, 12 for erase size, 80 for name, 8 for timeout */

 Optional argument when custom label is used */

	/* If more parameters are later passed in via

	   /sys/module/block2mtd/parameters/block2mtd

	   and block2mtd_init() has already been called,

	/* During early boot stage, we only save the parameters

	   here. We must parse them later: if the param passed

	   from kernel boot command line, block2mtd_setup() is

	   called so early that it is not possible to resolve

	   the device (even kmalloc() fails). Deter that work to

 Remove the MTD devices */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for Microchip 48L640 64 Kb SPI Serial EERAM

 *

 * Copyright Heiko Schocher <hs@denx.de>

 *

 * datasheet: http://ww1.microchip.com/downloads/en/DeviceDoc/20006055B.pdf

 *

 * we set continuous mode but reading/writing more bytes than

 * pagesize seems to bring chip into state where readden values

 * are wrong ... no idea why.

 *

	/*

	 * we set PRO bit (page rollover), but writing length > page size

	 * does result in total chaos, so write in 32 byte chunks.

	/*

	 * we set PRO bit (page rollover), but if read length > page size

	 * does result in total chaos in result ...

 SPDX-License-Identifier: GPL-2.0-only

/*

 * MTD driver for the 28F160F3 Flash Memory (non-CFI) on LART.

 *

 * Author: Abraham vd Merwe <abraham@2d3d.co.za>

 *

 * Copyright (c) 2001, 2d3D, Inc.

 *

 * References:

 *

 *    [1] 3 Volt Fast Boot Block Flash Memory" Intel Datasheet

 *           - Order Number: 290644-005

 *           - January 2000

 *

 *    [2] MTD internal API documentation

 *           - http://www.linux-mtd.infradead.org/ 

 *

 * Limitations:

 *

 *    Even though this driver is written for 3 Volt Fast Boot

 *    Block Flash Memory, it is rather specific to LART. With

 *    Minor modifications, notably the without data/address line

 *    mangling and different bus settings, etc. it should be

 *    trivial to adapt to other platforms.

 *

 *    If somebody would sponsor me a different board, I'll

 *    adapt the driver (:

 debugging */

#define LART_DEBUG

/*

 * These values is specific to 28Fxxxx3 flash memory.

 * See section 2.3.1 in "3 Volt Fast Boot Block Flash Memory" Intel Datasheet

/*

 * These values is specific to 28Fxxxx3 flash memory.

 * See section 2.3.2 in "3 Volt Fast Boot Block Flash Memory" Intel Datasheet

/*

 * These values are specific to LART

 general */

 don't change this - a lot of the code _will_ break if you change this */

 see linux/arch/arm/mach-sa1100/lart.c */

 blob */

 kernel */

 initial ramdisk */

/*

 * See section 4.0 in "3 Volt Fast Boot Block Flash Memory" Intel Datasheet

 Read Array/Reset */

 Read Identifier Codes */

 Block Erase */

 Block Erase and Program Resume */

 Program */

 Read Status Register */

 Clear Status Register */

 Write State Machine Status (WSMS) */

 Erase Status (ES) */

 Program Status (PS) */

/*

 * See section 4.2 in "3 Volt Fast Boot Block Flash Memory" Intel Datasheet

**************************************************************************************************/

/*

 * The data line mapping on LART is as follows:

 *

 *   	 U2  CPU |   U3  CPU

 *   	 -------------------

 *   	  0  20  |   0   12

 *   	  1  22  |   1   14

 *   	  2  19  |   2   11

 *   	  3  17  |   3   9

 *   	  4  24  |   4   0

 *   	  5  26  |   5   2

 *   	  6  31  |   6   7

 *   	  7  29  |   7   5

 *   	  8  21  |   8   13

 *   	  9  23  |   9   15

 *   	  10 18  |   10  10

 *   	  11 16  |   11  8

 *   	  12 25  |   12  1

 *   	  13 27  |   13  3

 *   	  14 30  |   14  6

 *   	  15 28  |   15  4

 Mangle data (x) */

 Unmangle data (x) */

/*

 * The address line mapping on LART is as follows:

 *

 *   	 U3  CPU |   U2  CPU

 *   	 -------------------

 *   	  0  2   |   0   2

 *   	  1  3   |   1   3

 *   	  2  9   |   2   9

 *   	  3  13  |   3   8

 *   	  4  8   |   4   7

 *   	  5  12  |   5   6

 *   	  6  11  |   6   5

 *   	  7  10  |   7   4

 *   	  8  4   |   8   10

 *   	  9  5   |   9   11

 *   	 10  6   |   10  12

 *   	 11  7   |   11  13

 *

 *   	 BOOT BLOCK BOUNDARY

 *

 *   	 12  15  |   12  15

 *   	 13  14  |   13  14

 *   	 14  16  |   14  16

 *

 *   	 MAIN BLOCK BOUNDARY

 *

 *   	 15  17  |   15  18

 *   	 16  18  |   16  17

 *   	 17  20  |   17  20

 *   	 18  19  |   18  19

 *   	 19  21  |   19  21

 *

 * As we can see from above, the addresses aren't mangled across

 * block boundaries, so we don't need to worry about address

 * translations except for sending/reading commands during

 * initialization

 Mangle address (x) on chip U2 */

 Unmangle address (x) on chip U2 */

 Mangle address (x) on chip U3 */

 Unmangle address (x) on chip U3 */

**************************************************************************************************/

**************************************************************************************************/

/*

 * Probe for 16mbit flash memory on a LART board without doing

 * too much damage. Since we need to write 1 dword to memory,

 * we're f**cked if this happens to be DRAM since we can't

 * restore the memory (otherwise we might exit Read Array mode).

 *

 * Returns 1 if we found 16mbit flash memory on LART, 0 otherwise.

 setup "Read Identifier Codes" mode */

   /* probe U2. U2/U3 returns the same data since the first 3

 put the flash back into command mode */

/*

 * Erase one block of flash memory at offset ``offset'' which is any

 * address within the block which should be erased.

 *

 * Returns 1 if successful, 0 otherwise.

 erase and confirm */

 wait for block erase to finish */

 put the flash back into command mode */

 was the erase successful? */

   /*

	* check that both start and end of the requested erase are

	* aligned with the erasesize at the appropriate addresses.

	*

	* skip all erase regions which are ended before the start of

	* the requested erase. Actually, to save on the calculations,

	* we skip to the first erase region which starts after the

	* start of the requested erase, and then go back one.

   /*

	* ok, now i is pointing at the erase region in which this

	* erase request starts. Check the start of the requested

	* erase range is aligned with the erase size which is in

	* effect here.

 Remember the erase region we start on */

   /*

	* next, check that the end of the requested erase is aligned

	* with the erase region at that address.

	*

	* as before, drop back one to point at the region in which

	* the address actually falls

 is the end aligned on a block boundary? */

 now erase those blocks */

 we always read len bytes */

 first, we read bytes until we reach a dword boundary */

 now we read dwords until we reach a non-dword boundary */

 top up the last unaligned bytes */

/*

 * Write one dword ``x'' to flash memory at offset ``offset''. ``offset''

 * must be 32 bits, i.e. it must be on a dword boundary.

 *

 * Returns 1 if successful, 0 otherwise.

 setup writing */

 write the data */

 wait for the write to finish */

 put the flash back into command mode */

 was the write successful? */

 sanity checks */

 first, we write a 0xFF.... padded byte until we reach a dword boundary */

 now we write dwords until we reach a non-dword boundary */

 top up the last unaligned bytes, padded with 0xFF.... */

**************************************************************************************************/

 parameter blocks */

 main blocks */

 blob */

 kernel */

 MTDPART_OFS_APPEND */

 initial ramdisk / file system */

 MTDPART_OFS_APPEND */

 MTDPART_SIZ_FULL */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * sst25l.c

 *

 * Driver for SST25L SPI Flash chips

 *

 * Copyright © 2009 Bluewater Systems Ltd

 * Author: Andre Renaud <andre@bluewatersys.com>

 * Author: Ryan Mallon

 *

 * Based on m25p80.c

 Erases can take up to 3 seconds! */

 Write status register */

 Write disable */

 Read status register */

 Write enable */

 High speed read */

 Enable write status register */

 Erase sector */

 Read device ID */

 Auto address increment */

 Chip is busy */

 Write enabled */

 Block protection 0 */

 Block protection 1 */

 Sanity checks */

 Wait for previous write/erase to complete */

 Write the first byte of the page */

		/*

		 * Write the remaining bytes using auto address

		 * increment mode

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OPAL PNOR flash MTD abstraction

 *

 * Copyright IBM 2015

/*

 * This driver creates the a Linux MTD abstraction for platform PNOR flash

 * backed by OPAL calls

/*

 * Don't return -ERESTARTSYS if we can't get a token, the MTD core

 * might have split up the call from userspace and called into the

 * driver more than once, we'll already have done some amount of work.

			/*

			 * If we return the mtd core will free the

			 * buffer we've just passed to OPAL but OPAL

			 * will continue to read or write from that

			 * memory.

			 * It may be tempting to ultimately return 0

			 * if we're doing a read or a write since we

			 * are going to end up waiting until OPAL is

			 * done. However, because the MTD core sends

			 * us the userspace request in chunks, we need

			 * it to know we've been interrupted.

	/*

	 * OPAL does mutual exclusion on the flash, it will return

	 * OPAL_BUSY.

	 * During firmware updates by the service processor OPAL may

	 * be (temporarily) prevented from accessing the flash, in

	 * this case OPAL will also return OPAL_BUSY.

	 * Both cases aren't errors exactly but the flash could have

	 * changed, userspace should be informed.

/**

 * powernv_flash_read

 * @mtd: the device

 * @from: the offset to read from

 * @len: the number of bytes to read

 * @retlen: the number of bytes actually read

 * @buf: the filled in buffer

 *

 * Returns 0 if read successful, or -ERRNO if an error occurred

/**

 * powernv_flash_write

 * @mtd: the device

 * @to: the offset to write to

 * @len: the number of bytes to write

 * @retlen: the number of bytes actually written

 * @buf: the buffer to get bytes from

 *

 * Returns 0 if write successful, -ERRNO if error occurred

/**

 * powernv_flash_erase

 * @mtd: the device

 * @erase: the erase info

 * Returns 0 if erase successful or -ERRNO if an error occurred

/**

 * powernv_flash_set_driver_info - Fill the mtd_info structure and docg3

 * @dev: The device structure

 * @mtd: The structure to fill

	/*

	 * Going to have to check what details I need to set and how to

	 * get them

/**

 * powernv_flash_probe

 * @pdev: platform device

 *

 * Returns 0 on success, -ENOMEM, -ENXIO on error

	/*

	 * The current flash that skiboot exposes is one contiguous flash chip

	 * with an ffs partition at the start, it should prove easier for users

	 * to deal with partitions or not as they see fit

/**

 * op_release - Release the driver

 * @pdev: the platform device

 *

 * Returns 0

 All resources should be freed automatically */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PMC551 PCI Mezzanine Ram Device

 *

 * Author:

 *	Mark Ferrell <mferrell@mvista.com>

 *	Copyright 1999,2000 Nortel Networks

 *

 * Description:

 *	This driver is intended to support the PMC551 PCI Ram device

 *	from Ramix Inc.  The PMC551 is a PMC Mezzanine module for

 *	cPCI embedded systems.  The device contains a single SROM

 *	that initially programs the V370PDC chipset onboard the

 *	device, and various banks of DRAM/SDRAM onboard.  This driver

 *	implements this PCI Ram device as an MTD (Memory Technology

 *	Device) so that it can be used to hold a file system, or for

 *	added swap space in embedded systems.  Since the memory on

 *	this board isn't as fast as main memory we do not try to hook

 *	it into main memory as that would simply reduce performance

 *	on the system.  Using it as a block device allows us to use

 *	it as high speed swap or for a high speed disk device of some

 *	sort.  Which becomes very useful on diskless systems in the

 *	embedded market I might add.

 *

 * Notes:

 *	Due to what I assume is more buggy SROM, the 64M PMC551 I

 *	have available claims that all 4 of its DRAM banks have 64MiB

 *	of ram configured (making a grand total of 256MiB onboard).

 *	This is slightly annoying since the BAR0 size reflects the

 *	aperture size, not the dram size, and the V370PDC supplies no

 *	other method for memory size discovery.  This problem is

 *	mostly only relevant when compiled as a module, as the

 *	unloading of the module with an aperture size smaller than

 *	the ram will cause the driver to detect the onboard memory

 *	size to be equal to the aperture size when the module is

 *	reloaded.  Soooo, to help, the module supports an msize

 *	option to allow the specification of the onboard memory, and

 *	an asize option, to allow the specification of the aperture

 *	size.  The aperture must be equal to or less then the memory

 *	size, the driver will correct this if you screw it up.  This

 *	problem is not relevant for compiled in drivers as compiled

 *	in drivers only init once.

 *

 * Credits:

 *	Saeed Karamooz <saeed@ramix.com> of Ramix INC. for the

 *	initial example code of how to initialize this device and for

 *	help with questions I had concerning operation of the device.

 *

 *	Most of the MTD code for this driver was originally written

 *	for the slram.o module in the MTD drivers package which

 *	allows the mapping of system memory into an MTD device.

 *	Since the PMC551 memory module is accessed in the same

 *	fashion as system memory, the slram.c code became a very nice

 *	fit to the needs of this driver.  All we added was PCI

 *	detection/initialization to the driver and automatically figure

 *	out the size via the PCI detection.o, later changes by Corey

 *	Minyard set up the card to utilize a 1M sliding apature.

 *

 *	Corey Minyard <minyard@nortelnetworks.com>

 *	* Modified driver to utilize a sliding aperture instead of

 *	 mapping all memory into kernel space which turned out to

 *	 be very wasteful.

 *	* Located a bug in the SROM's initialization sequence that

 *	 made the memory unusable, added a fix to code to touch up

 *	 the DRAM some.

 *

 * Bugs/FIXMEs:

 *	* MUST fix the init function to not spin on a register

 *	waiting for it to set .. this does not safely handle busted

 *	devices that never reset the register correctly which will

 *	cause the system to hang w/ a reboot being the only chance at

 *	recover. [sort of fixed, could be better]

 *	* Add I2C handling of the SROM so we can read the SROM's information

 *	about the aperture size.  This should always accurately reflect the

 *	onboard memory size.

 *	* Comb the init routine.  It's still a bit cludgy on a few things.

 start address offset hi */

 end address offset hi/lo */

		/* The whole thing fits within one access, so just one shot

		/* We have to do multiple writes to get all the data

 Cheap hack optimization */

 start address offset hi */

 end address offset hi/lo */

		/* The whole thing fits within one access, so just one shot

		/* We have to do multiple writes to get all the data

 start address offset hi */

 end address offset hi/lo */

		/* The whole thing fits within one access, so just one shot

		/* We have to do multiple writes to get all the data

/*

 * Fixup routines for the V370PDC

 * PCI device ID 0x020011b0

 *

 * This function basically kick starts the DRAM oboard the card and gets it

 * ready to be used.  Before this is done the device reads VERY erratic, so

 * much that it can crash the Linux 2.2.x series kernels when a user cat's

 * /proc/pci .. though that is mainly a kernel bug in handling the PCI DEVSEL

 * register.  FIXME: stop spinning on registers .. must implement a timeout

 * mechanism

 * returns the size of the memory region found.

 Sanity Check */

	/*

	 * Attempt to reset the card

	 * FIXME: Stop Spinning registers

 unlock registers */

 read in old data */

 bang the reset line up and down for a few */

	/*

	 * Take care and turn off the memory on the device while we

	 * tweak the configurations

	/*

	 * Disable existing aperture before probing memory size

	/*

	 * Grab old BAR0 config so that we can figure out memory size

	 * This is another bit of kludge going on.  The reason for the

	 * redundancy is I am hoping to retain the original configuration

	 * previously assigned to the card by the BIOS or some previous

	 * fixup routine in the kernel.  So we read the old config into cfg,

	 * then write all 1's to the memory space, read back the result into

	 * "size", and then write back all the old config.

	/*

	 * Get the size of the memory by reading all the DRAM size values

	 * and adding them up.

	 *

	 * KLUDGE ALERT: the boards we are using have invalid column and

	 * row mux values.  We fix them here, but this will break other

	 * memory configurations.

	/*

	 * Oops .. something went wrong

 CONFIG_MTD_PMC551_BUGFIX */

	/*

	 * Precharge Dram

	/*

	 * Wait until command has gone through

	 * FIXME: register spinning issue

	/*

	 * Turn on auto refresh

	 * The loop is taken directly from Ramix's example code.  I assume that

	 * this must be held high for some duration of time, but I can find no

	 * documentation refrencing the reasons why.

		/*

		 * Make certain command has gone through

		 * FIXME: register spinning issue

	/*

	 * Wait until command completes

	 * FIXME: register spinning issue

	/*

	 * Check to make certain fast back-to-back, if not

	 * then set it so

	/*

	 * Check to make certain the DEVSEL is set correctly, this device

	 * has a tendency to assert DEVSEL and TRDY when a write is performed

	 * to the memory when memory is read-only

	/*

	 * Set to be prefetchable and put everything back based on old cfg.

	 * it's possible that the reset of the V370PDC nuked the original

	 * setup

	/*

	   cfg |= PCI_BASE_ADDRESS_MEM_PREFETCH;

	   pci_write_config_dword( dev, PCI_BASE_ADDRESS_0, cfg );

	/*

	 * Turn PCI memory and I/O bus access back on

	/*

	 * Some screen fun

	/*

	 * Check to see the state of the memory

/*

 * Kernel version specific module stuffages

/*

 * Stuff these outside the ifdef so as to not bust compiled in driver support

/*

 * PMC551 Card Initialization

	/*

	 * PCU-bus chipset probe.

		/*

		 * The PMC551 device acts VERY weird if you don't init it

		 * first.  i.e. it will not correctly report devsel.  If for

		 * some reason the sdram is in a wrote-protected state the

		 * device will DEVSEL when it is written to causing problems

		 * with the oldproc.c driver in

		 * some kernels (2.2.*)

		/*

		 * This is needed until the driver is capable of reading the

		 * onboard I2C SROM to discover the "real" memory size.

 Keep a reference as the mtd_device_register worked */

 Exited early, reference left over */

/*

 * PMC551 Card Cleanup

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) ????		Jochen Schäuble <psionic@psionic.de>

 * Copyright (c) 2003-2004	Joern Engel <joern@wh.fh-wedel.de>

 *

 * Usage:

 *

 * one commend line parameter per device, each in the form:

 *   phram=<name>,<start>,<len>[,<erasesize>]

 * <name> may be up to 63 characters.

 * <start>, <len>, and <erasesize> can be octal, decimal or hexadecimal.  If followed

 * by "ki", "Mi" or "Gi", the numbers will be interpreted as kilo, mega or

 * gigabytes. <erasesize> is optional and defaults to PAGE_SIZE.

 *

 * Example:

 *	phram=swap,64Mi,128Mi phram=test,900Mi,1Mi,64Ki

 By dwmw2 editorial decree, "ki", "Mi" or "Gi" are to be used. */

/*

 * This shall contain the module parameter if any. It is of the form:

 * - phram=<device>,<address>,<size>[,<erasesize>] for module case

 * - phram.phram=<device>,<address>,<size>[,<erasesize>] for built-in case

 * We leave 64 bytes for the device name, 20 for the address , 20 for the

 * size and 20 for the erasesize.

 * Example: phram.phram=rootfs,0xa0000000,512Mi,65536

	/*

	 * If more parameters are later passed in via

	 * /sys/module/phram/parameters/phram

	 * and init_phram() has already been called,

	 * we can parse the argument now.

	/*

	 * During early boot stage, we only save the parameters

	 * here. We must parse them later: if the param passed

	 * from kernel boot command line, phram_param_call() is

	 * called so early that it is not possible to resolve

	 * the device (even kmalloc() fails). Defer that work to

	 * phram_setup().

 SPDX-License-Identifier: GPL-2.0-only

/*

 * mchp23k256.c

 *

 * Driver for Microchip 23k256 SPI RAM chips

 *

 * Copyright © 2016 Andrew Lunn <andrew@lunn.ch>

	/*

	 * Address is sent in big endian (MSB first) and we skip

	 * the first entry of the cmd array which contains the cmd

	 * opcode.

/*

 * Set the device into sequential mode. This allows read/writes to the

 * entire SRAM in a single operation

/*

 * SMI (Serial Memory Controller) device driver for Serial NOR Flash on

 * SPEAr platform

 * The serial nor interface is largely based on m25p80.c, however the SPI

 * interface has been replaced by SMI.

 *

 * Copyright © 2010 STMicroelectronics.

 * Ashish Priyadarshi

 * Shiraz Hashim <shiraz.linux.kernel@gmail.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 SMI clock rate */

 50 MHz */

 MAX time out to safely come out of a erase or write busy conditions */

 timeout for command completion */

 registers of smi */

 SMI control register 1 */

 SMI control register 2 */

 SMI status register */

 SMI transmit register */

 SMI receive register */

 defines for control_reg 1 */

 enables all banks */

 Deselect time 6 + 1 SMI_CK periods */

 enables SW Mode */

 Write Burst Mode */

 Fast Mode */

 Clock Hold period selection */

 defines for control_reg 2 */

 Send data */

 Transmission Flag Interrupt Enable */

 Write Complete Interrupt Enable */

 reads status reg */

 Write Enable */

 defines for status register */

 Write in progress */

 Write enable latch */

 Block protect 0 */

 Block protect 1 */

 Block protect 2 */

 SR write protect */

 Transfer Finished Flag */

 Transfer Finished Flag */

 Forbidden Write Request */

 Forbidden Access */

 flash opcodes */

 Read JEDEC ID */

 Flash Device Ids maintenance section */

 data structure to maintain flash ids from different vendors */

 Define spear specific structures */

/**

 * struct spear_smi - Structure for SMI Device

 *

 * @clk: functional clock

 * @status: current status register of SMI.

 * @clk_rate: functional clock rate of SMI (default: SMI_MAX_CLOCK_FREQ)

 * @lock: lock to prevent parallel access of SMI.

 * @io_base: base address for registers of SMI.

 * @pdev: platform device

 * @cmd_complete: queue to wait for command completion of NOR-flash.

 * @num_flashes: number of flashes actually present on board.

 * @flash: separate structure for each Serial NOR-flash attached to SMI.

/**

 * struct spear_snor_flash - Structure for Serial NOR Flash

 *

 * @bank: Bank number(0, 1, 2, 3) for each NOR-flash.

 * @dev_id: Device ID of NOR-flash.

 * @lock: lock to manage flash read, write and erase operations

 * @mtd: MTD info for each NOR-flash.

 * @num_parts: Total number of partition in each bank of NOR-flash.

 * @parts: Partition info for each bank of NOR-flash.

 * @page_size: Page size of NOR-flash.

 * @base_addr: Base address of NOR-flash.

 * @erase_cmd: erase command may vary on different flash types

 * @fast_mode: flash supports read in fast mode

/**

 * spear_smi_read_sr - Read status register of flash through SMI

 * @dev: structure of SMI information.

 * @bank: bank to which flash is connected

 *

 * This routine will return the status register of the flash chip present at the

 * given bank.

 Will be set in interrupt handler */

 program smi in hw mode */

 performing a rsr instruction in hw mode */

 wait for tff */

 copy dev->status (lower 16 bits) in order to release lock */

 restore the ctrl regs state */

/**

 * spear_smi_wait_till_ready - wait till flash is ready

 * @dev: structure of SMI information.

 * @bank: flash corresponding to this bank

 * @timeout: timeout for busy wait condition

 *

 * This routine checks for WIP (write in progress) bit in Status register

 * If successful the routine returns 0 else -EBUSY

 try till finish */

/**

 * spear_smi_int_handler - SMI Interrupt Handler.

 * @irq: irq number

 * @dev_id: structure of SMI device, embedded in dev_id.

 *

 * The handler clears all interrupt conditions and records the status in

 * dev->status which is used by the driver later.

 clear all interrupt conditions */

 copy the status register in dev->status */

 send the completion */

/**

 * spear_smi_hw_init - initializes the smi controller.

 * @dev: structure of smi device

 *

 * this routine initializes the smi controller wit the default values

 functional clock of smi */

	/*

	 * setting the standard values, fast mode, prescaler for

	 * SMI_MAX_CLOCK_FREQ (50MHz) operation and bank enable

 clear all interrupt conditions */

/**

 * get_flash_index - match chip id from a flash list.

 * @flash_id: a valid nor flash chip id obtained from board.

 *

 * try to validate the chip id by matching from a list, if not found then simply

 * returns negative. In case of success returns index in to the flash devices

 * array.

 Matches chip-id to entire list of 'serial-nor flash' ids */

 Memory chip is not listed and not supported */

/**

 * spear_smi_write_enable - Enable the flash to do write operation

 * @dev: structure of SMI device

 * @bank: enable write for flash connected to this bank

 *

 * Set write enable latch with Write Enable command.

 * Returns 0 on success.

 Will be set in interrupt handler */

 program smi in h/w mode */

 give the flash, write enable command */

 restore the ctrl regs state */

 check whether write mode status is set for required bank */

/**

 * spear_smi_erase_sector - erase one sector of flash

 * @dev: structure of SMI information

 * @command: erase command to be send

 * @bank: bank to which this command needs to be send

 * @bytes: size of command

 *

 * Erase one sector of flash memory at offset ``offset'' which is any

 * address within the sector which should be erased.

 * Returns 0 if successful, non-zero otherwise.

 send command in sw mode */

 success */

 restore ctrl regs */

/**

 * spear_mtd_erase - perform flash erase operation as requested by user

 * @mtd: Provides the memory characteristics

 * @e_info: Provides the erase information

 *

 * Erase an address range on the flash chip. The address range may extend

 * one or more erase sectors. Return an error is there is a problem erasing.

 now erase sectors in loop */

 preparing the command for flash */

/**

 * spear_mtd_read - performs flash read operation as requested by the user

 * @mtd: MTD information of the memory bank

 * @from: Address from which to start read

 * @len: Number of bytes to be read

 * @retlen: Fills the Number of bytes actually read

 * @buf: Fills this after reading

 *

 * Read an address range from the flash chip. The address range

 * may be any size provided it is within the physical boundaries.

 * Returns 0 on success, non zero otherwise

 select address as per bank number */

 wait till previous write/erase is done. */

 put smi in hw mode not wbt mode */

 restore ctrl reg1 */

/*

 * The purpose of this function is to ensure a memcpy_toio() with byte writes

 * only. Its structure is inspired from the ARM implementation of _memcpy_toio()

 * which also does single byte writes but cannot be used here as this is just an

 * implementation detail and not part of the API. Not mentioning the comment

 * stating that _memcpy_toio() should be optimized.

 wait until finished previous write command. */

 put smi in write enable */

 put smi in hw, write burst mode */

	/*

	 * In Write Burst mode (WB_MODE), the specs states that writes must be:

	 * - incremental

	 * - of the same size

	 * The ARM implementation of memcpy_toio() will optimize the number of

	 * I/O by using as much 4-byte writes as possible, surrounded by

	 * 2-byte/1-byte access if:

	 * - the destination is not 4-byte aligned

	 * - the length is not a multiple of 4-byte.

	 * Avoid this alternance of write access size by using our own 'byte

	 * access' helper if at least one of the two conditions above is true.

/**

 * spear_mtd_write - performs write operation as requested by the user.

 * @mtd: MTD information of the memory bank.

 * @to:	Address to write.

 * @len: Number of bytes to be written.

 * @retlen: Number of bytes actually wrote.

 * @buf: Buffer from which the data to be taken.

 *

 * Write an address range to the flash chip. Data must be written in

 * flash_page_size chunks. The address range may be any size provided

 * it is within the physical boundaries.

 * Returns 0 on success, non zero otherwise

 select address as per bank number */

 do if all the bytes fit onto one page */

 the size of data remaining on the first page */

 write everything in pagesize chunks */

/**

 * spear_smi_probe_flash - Detects the NOR Flash chip.

 * @dev: structure of SMI information.

 * @bank: bank on which flash must be probed

 *

 * This routine will check whether there exists a flash chip on a given memory

 * bank ID.

 * Return index of the probed flash in flash devices structure

 Will be set in interrupt handler */

 put smi in sw mode */

 send readid command in sw mode */

 wait for TFF */

 get memory chip id */

 clear sw mode */

 Fill structs for each subnode (flash device) */

 Read base-addr and size from DT */

 verify whether nor flash is really present on board */

 map the memory for nor flash chip */

/**

 * spear_smi_probe - Entry routine

 * @pdev: platform device structure

 *

 * This is the first routine which gets invoked during booting and does all

 * initialization/allocation work. The routine looks for available memory banks,

 * and do proper init for any found one.

 * Returns 0 on success, non zero otherwise

 loop for each serial nor-flash which is connected to smi */

/**

 * spear_smi_remove - Exit routine

 * @pdev: platform device structure

 *

 * free all allocations and delete the partitions.

 clean up for all nor flash */

 clean up mtd stuff */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Atmel AT45xxx DataFlash MTD driver for lightweight SPI framework

 *

 * Largely derived from at91_dataflash.c:

 *  Copyright (C) 2003-2005 SAN People (Pty) Ltd

/*

 * DataFlash is a kind of SPI flash.  Most AT45 chips have two buffers in

 * each chip, which may be used for double buffered I/O; but this driver

 * doesn't (yet) use these for any kind of i/o overlap or prefetching.

 *

 * Sometimes DataFlash is packaged in MMC-format cards, although the

 * MMC stack can't (yet?) distinguish between MMC and DataFlash

 * protocols during enumeration.

 reads can bypass the buffers */

 group B requests can run even while status reports "busy" */

 group B */

 move data between host and buffer */

 group B */

 group B */

 group B */

 group B */

 erasing flash */

 move data between buffer and flash */

 sector must be pre-erased */

 sector must be pre-erased */

 write to buffer, then write-erase to flash */

 compare buffer to flash */

 read flash to buffer, then write-erase to flash */

/* newer chips report JEDEC manufacturer and device IDs; chip

 * serial number and OTP bits; and per-sector writeprotect.

 revision D */

 offset in flash address */

 of bytes per page */

 sentinel */ }

 ......................................................................... */

/*

 * Return the status of the DataFlash device.

	/* NOTE:  at45db321c over 25 MHz wants to write

	 * a dummy byte after the opcode...

/*

 * Poll the DataFlash device until it is READY.

 * This usually takes 5-20 msec or so; more for sector erase.

 RDY/nBSY */

 ......................................................................... */

/*

 * Erase pages of flash.

		/* Calculate flash page address; use block erase (for speed) if

		 * we're at a block boundary and need to erase the whole block.

			/* REVISIT:  can retry instr->retries times; or

			 * giveup and instr->fail_addr = instr->addr;

/*

 * Read from the DataFlash device.

 *   from   : Start offset in flash device

 *   len    : Amount to read

 *   retlen : About of data actually read

 *   buf    : Buffer containing the data

 Calculate flash page/byte address */

	/* Continuous read, max clock = f(car) which may be less than

	 * the peak rate available.  Some chips support commands with

	 * fewer "don't care" bytes.  Both buffers stay unchanged.

 plus 4 "don't care" bytes */

/*

 * Write to the DataFlash device.

 *   to     : Start offset in flash device

 *   len    : Amount to write

 *   retlen : Amount of data actually written

 *   buf    : Buffer containing the data

		/* REVISIT:

		 * (a) each page in a sector must be rewritten at least

		 *     once every 10K sibling erase/program operations.

		 * (b) for pages that are already erased, we could

		 *     use WRITE+MWRITE not PROGRAM for ~30% speedup.

		 * (c) WRITE to buffer could be done while waiting for

		 *     a previous MWRITE/MWERASE to complete ...

		 * (d) error handling here seems to be mostly missing.

		 *

		 * Two persistent bits per page, plus a per-sector counter,

		 * could support (a) and (b) ... we might consider using

		 * the second half of sector zero, which is just one block,

		 * to track that state.  (On AT91, that sector should also

		 * support boot-from-DataFlash.)

 (1) Maybe transfer partial page to Buffer1 */

 (2) Program full page via Buffer1 */

 (3) Compare to Buffer1 */

 Check result of the compare operation */

 CONFIG_MTD_DATAFLASH_WRITE_VERIFY */

 ......................................................................... */

	/* Report both blocks as identical:  bytes 0..64, locked.

	 * Unless the user block changed from all-ones, we can't

	 * tell whether it's still writable; so we assume it isn't.

	/* OUT: OP_READ_SECURITY, 3 don't-care bytes, zeroes

	 * IN:  ignore 4 bytes, data bytes 0..N (max 127)

 64 bytes, from 0..63 ... start at 64 on-chip */

 64 bytes, from 0..63 ... start at 0 on-chip */

		/*

		 * Attempting to write beyond the end of OTP memory,

		 * no data can be written.

 Truncate the write to fit into OTP memory. */

	/* OUT: OP_WRITE_SECURITY, 3 zeroes, 64 data-or-zero bytes

	 * IN:  ignore all

	/* Write the OTP bits, if they've not yet been written.

	 * This modifies SRAM buffer1.

	/* rev c parts (at45db321c and at45db1281 only!) use a

	 * different write procedure; not (yet?) implemented.

 ......................................................................... */

/*

 * Register DataFlash device with MTD subsystem.

 name must be usable with cmdlinepart */

	/* JEDEC id has a high byte of zero plus three data bytes:

	 * the manufacturer id, then a two byte device id.

 The size listed here is what works with OP_ERASE_PAGE. */

 supports extended ID data */

 supports 2^N byte pages */

 uses 2^N byte pages */

	/*

	 * NOTE:  chips with SUP_POW2PS (rev D and up) need two entries,

	 * one with IS_POW2PS and the other without.  The entry with the

	 * non-2^N byte page size can't name exact chip revisions without

	 * losing backwards compatibility for cmdlinepart.

	 *

	 * These newer chips also support 128-byte security registers (with

	 * 64 bytes one-time-programmable) and software write-protection.

 rev C */

	/*

	 * JEDEC also defines an optional "extended device information"

	 * string for after vendor-specific data, after the three bytes

	 * we use here.  Supporting some chips might require using it.

	 *

	 * If the vendor ID isn't Atmel's (0x1f), assume this call failed.

	 * That's not an error; only rev C and newer chips handle it, and

	 * only Atmel sells these chips.

	/*

	 * First, try to match device using extended device

	 * information

	/*

	 * If that fails, make another pass using regular ID

	 * information

	/*

	 * Treat other chips as errors ... we won't know the right page

	 * size (it might be binary) even when we can tell which density

	 * class is involved (legacy chip id scheme).

/*

 * Detect and initialize DataFlash device, using JEDEC IDs on newer chips

 * or else the ID code embedded in the status bits:

 *

 *   Device      Density         ID code          #Pages PageSize  Offset

 *   AT45DB011B  1Mbit   (128K)  xx0011xx (0x0c)    512    264      9

 *   AT45DB021B  2Mbit   (256K)  xx0101xx (0x14)   1024    264      9

 *   AT45DB041B  4Mbit   (512K)  xx0111xx (0x1c)   2048    264      9

 *   AT45DB081B  8Mbit   (1M)    xx1001xx (0x24)   4096    264      9

 *   AT45DB0161B 16Mbit  (2M)    xx1011xx (0x2c)   4096    528     10

 *   AT45DB0321B 32Mbit  (4M)    xx1101xx (0x34)   8192    528     10

 *   AT45DB0642  64Mbit  (8M)    xx111xxx (0x3c)   8192   1056     11

 *   AT45DB1282  128Mbit (16M)   xx0100xx (0x10)  16384   1056     11

	/*

	 * Try to detect dataflash by JEDEC ID.

	 * If it succeeds we know we have either a C or D part.

	 * D will support power of 2 pagesize option.

	 * Both support the security register, though with different

	 * write procedures.

	/*

	 * Older chips support only legacy commands, identifing

	 * capacity using bits in the status byte.

	/* if there's a device there, assume it's dataflash.

	 * board setup should have set spi->max_speed_max to

	 * match f(car) for continuous reads, mode 0 or 3.

 0 0 1 1 x x */

 0 1 0 1 x x */

 0 1 1 1 x x */

 1 0 0 1 x x */

 1 0 1 1 x x */

 1 1 0 1 x x */

 1 1 1 x x x */

 obsolete AT45DB1282 not (yet?) supported */

 FIXME:  investigate suspend and resume... */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Handles the M-Systems DiskOnChip G3 chip

 *

 * Copyright (C) 2011 Robert Jarzmik

/*

 * This driver handles the DiskOnChip G3 flash memory.

 *

 * As no specification is available from M-Systems/Sandisk, this drivers lacks

 * several functions available on the chip, as :

 *  - IPL write

 *

 * The bus data width (8bits versus 16bits) is not handled (if_cfg flag), and

 * the driver assumes a 16bits data bus.

 *

 * DocG3 relies on 2 ECC algorithms, which are handled in hardware :

 *  - a 1 byte Hamming code stored in the OOB for each page

 *  - a 7 bytes BCH code stored in the OOB for each page

 * The BCH ECC is :

 *  - BCH is in GF(2^14)

 *  - BCH is over data of 520 bytes (512 page + 7 page_info bytes

 *                                   + 1 hamming byte)

 *  - BCH can correct up to 4 bits (t = 4)

 *  - BCH syndroms are calculated in hardware, and checked in hardware as well

 *

 byte 7 is Hamming ECC, byte 8-14 are BCH ECC */

 free bytes: byte 0 until byte 6, byte 15 */

/**

 * doc_delay - delay docg3 operations

 * @docg3: the device

 * @nbNOPs: the number of NOPs to issue

 *

 * As no specification is available, the right timings between chip commands are

 * unknown. The only available piece of information are the observed nops on a

 * working docg3 chip.

 * Therefore, doc_delay relies on a busy loop of NOPs, instead of scheduler

 * friendlier msleep() functions or blocking mdelay().

/**

 * doc_read_data_area - Read data from data area

 * @docg3: the device

 * @buf: the buffer to fill in (might be NULL is dummy reads)

 * @len: the length to read

 * @first: first time read, DOC_READADDRESS should be set

 *

 * Reads bytes from flash data. Handles the single byte / even bytes reads.

/**

 * doc_write_data_area - Write data into data area

 * @docg3: the device

 * @buf: the buffer to get input bytes from

 * @len: the length to write

 *

 * Writes bytes into flash data. Handles the single byte / even bytes writes.

/**

 * doc_set_data_mode - Sets the flash to normal or reliable data mode

 * @docg3: the device

 *

 * The reliable data mode is a bit slower than the fast mode, but less errors

 * occur.  Entering the reliable mode cannot be done without entering the fast

 * mode first.

 *

 * In reliable mode, pages 2*n and 2*n+1 are clones. Writing to page 0 of blocks

 * (4,5) make the hardware write also to page 1 of blocks blocks(4,5). Reading

 * from page 0 of blocks (4,5) or from page 1 of blocks (4,5) gives the same

 * result, which is a logical and between bytes from page 0 and page 1 (which is

 * consistent with the fact that writing to a page is _clearing_ bits of that

 * page).

/**

 * doc_set_asic_mode - Set the ASIC mode

 * @docg3: the device

 * @mode: the mode

 *

 * The ASIC can work in 3 modes :

 *  - RESET: all registers are zeroed

 *  - NORMAL: receives and handles commands

 *  - POWERDOWN: minimal poweruse, flash parts shut off

/**

 * doc_set_device_id - Sets the devices id for cascaded G3 chips

 * @docg3: the device

 * @id: the chip to select (amongst 0, 1, 2, 3)

 *

 * There can be 4 cascaded G3 chips. This function selects the one which will

 * should be the active one.

/**

 * doc_set_extra_page_mode - Change flash page layout

 * @docg3: the device

 *

 * Normally, the flash page is split into the data (512 bytes) and the out of

 * band data (16 bytes). For each, 4 more bytes can be accessed, where the wear

 * leveling counters are stored.  To access this last area of 4 bytes, a special

 * mode must be input to the flash ASIC.

 *

 * Returns 0 if no error occurred, -EIO else.

/**

 * doc_setup_addr_sector - Setup blocks/page/ofs address for one plane

 * @docg3: the device

 * @sector: the sector

/**

 * doc_setup_writeaddr_sector - Setup blocks/page/ofs address for one plane

 * @docg3: the device

 * @sector: the sector

 * @ofs: the offset in the page, between 0 and (512 + 16 + 512)

/**

 * doc_seek - Set both flash planes to the specified block, page for reading

 * @docg3: the device

 * @block0: the first plane block index

 * @block1: the second plane block index

 * @page: the page index within the block

 * @wear: if true, read will occur on the 4 extra bytes of the wear area

 * @ofs: offset in page to read

 *

 * Programs the flash even and odd planes to the specific block and page.

 * Alternatively, programs the flash to the wear area of the specified page.

/**

 * doc_write_seek - Set both flash planes to the specified block, page for writing

 * @docg3: the device

 * @block0: the first plane block index

 * @block1: the second plane block index

 * @page: the page index within the block

 * @ofs: offset in page to write

 *

 * Programs the flash even and odd planes to the specific block and page.

 * Alternatively, programs the flash to the wear area of the specified page.

/**

 * doc_read_page_ecc_init - Initialize hardware ECC engine

 * @docg3: the device

 * @len: the number of bytes covered by the ECC (BCH covered)

 *

 * The function does initialize the hardware ECC engine to compute the Hamming

 * ECC (on 1 byte) and the BCH hardware ECC (on 7 bytes).

 *

 * Return 0 if succeeded, -EIO on error

/**

 * doc_write_page_ecc_init - Initialize hardware BCH ECC engine

 * @docg3: the device

 * @len: the number of bytes covered by the ECC (BCH covered)

 *

 * The function does initialize the hardware ECC engine to compute the Hamming

 * ECC (on 1 byte) and the BCH hardware ECC (on 7 bytes).

 *

 * Return 0 if succeeded, -EIO on error

/**

 * doc_ecc_disable - Disable Hamming and BCH ECC hardware calculator

 * @docg3: the device

 *

 * Disables the hardware ECC generator and checker, for unchecked reads (as when

 * reading OOB only or write status byte).

/**

 * doc_hamming_ecc_init - Initialize hardware Hamming ECC engine

 * @docg3: the device

 * @nb_bytes: the number of bytes covered by the ECC (Hamming covered)

 *

 * This function programs the ECC hardware to compute the hamming code on the

 * last provided N bytes to the hardware generator.

/**

 * doc_ecc_bch_fix_data - Fix if need be read data from flash

 * @docg3: the device

 * @buf: the buffer of read data (512 + 7 + 1 bytes)

 * @hwecc: the hardware calculated ECC.

 *         It's in fact recv_ecc ^ calc_ecc, where recv_ecc was read from OOB

 *         area data, and calc_ecc the ECC calculated by the hardware generator.

 *

 * Checks if the received data matches the ECC, and if an error is detected,

 * tries to fix the bit flips (at most 4) in the buffer buf.  As the docg3

 * understands the (data, ecc, syndroms) in an inverted order in comparison to

 * the BCH library, the function reverses the order of bits (ie. bit7 and bit0,

 * bit6 and bit 1, ...) for all ECC data.

 *

 * The hardware ecc unit produces oob_ecc ^ calc_ecc.  The kernel's bch

 * algorithm is used to decode this.  However the hw operates on page

 * data in a bit order that is the reverse of that of the bch alg,

 * requiring that the bits be reversed on the result.  Thanks to Ivan

 * Djelic for his analysis.

 *

 * Returns number of fixed bits (0, 1, 2, 3, 4) or -EBADMSG if too many bit

 * errors were detected and cannot be fixed.

 error is located in data, correct it */

/**

 * doc_read_page_prepare - Prepares reading data from a flash page

 * @docg3: the device

 * @block0: the first plane block index on flash memory

 * @block1: the second plane block index on flash memory

 * @page: the page index in the block

 * @offset: the offset in the page (must be a multiple of 4)

 *

 * Prepares the page to be read in the flash memory :

 *   - tell ASIC to map the flash pages

 *   - tell ASIC to be in read mode

 *

 * After a call to this method, a call to doc_read_page_finish is mandatory,

 * to end the read cycle of the flash.

 *

 * Read data from a flash page. The length to be read must be between 0 and

 * (page_size + oob_size + wear_size), ie. 532, and a multiple of 4 (because

 * the extra bytes reading is not implemented).

 *

 * As pages are grouped by 2 (in 2 planes), reading from a page must be done

 * in two steps:

 *  - one read of 512 bytes at offset 0

 *  - one read of 512 bytes at offset 512 + 16

 *

 * Returns 0 if successful, -EIO if a read error occurred.

 Program the flash address block and page */

/**

 * doc_read_page_getbytes - Reads bytes from a prepared page

 * @docg3: the device

 * @len: the number of bytes to be read (must be a multiple of 4)

 * @buf: the buffer to be filled in (or NULL is forget bytes)

 * @first: 1 if first time read, DOC_READADDRESS should be set

 * @last_odd: 1 if last read ended up on an odd byte

 *

 * Reads bytes from a prepared page. There is a trickery here : if the last read

 * ended up on an odd offset in the 1024 bytes double page, ie. between the 2

 * planes, the first byte must be read apart. If a word (16bit) read was used,

 * the read would return the byte of plane 2 as low *and* high endian, which

 * will mess the read.

 *

/**

 * doc_write_page_putbytes - Writes bytes into a prepared page

 * @docg3: the device

 * @len: the number of bytes to be written

 * @buf: the buffer of input bytes

 *

/**

 * doc_get_bch_hw_ecc - Get hardware calculated BCH ECC

 * @docg3: the device

 * @hwecc:  the array of 7 integers where the hardware ecc will be stored

/**

 * doc_page_finish - Ends reading/writing of a flash page

 * @docg3: the device

/**

 * doc_read_page_finish - Ends reading of a flash page

 * @docg3: the device

 *

 * As a side effect, resets the chip selector to 0. This ensures that after each

 * read operation, the floor 0 is selected. Therefore, if the systems halts, the

 * reboot will boot on floor 0, where the IPL is.

/**

 * calc_block_sector - Calculate blocks, pages and ofs.

 *

 * @from: offset in flash

 * @block0: first plane block index calculated

 * @block1: second plane block index calculated

 * @page: page calculated

 * @ofs: offset in page

 * @reliable: 0 if docg3 in normal mode, 1 if docg3 in fast mode, 2 if docg3 in

 * reliable mode.

 *

 * The calculation is based on the reliable/normal mode. In normal mode, the 64

 * pages of a block are available. In reliable mode, as pages 2*n and 2*n+1 are

 * clones, only 32 pages per block are available.

/**

 * doc_read_oob - Read out of band bytes from flash

 * @mtd: the device

 * @from: the offset from first block and first page, in bytes, aligned on page

 *        size

 * @ops: the mtd oob structure

 *

 * Reads flash memory OOB area of pages.

 *

 * Returns 0 if read successful, of -EIO, -EINVAL if an error occurred

/**

 * doc_block_isbad - Checks whether a block is good or not

 * @mtd: the device

 * @from: the offset to find the correct block

 *

 * Returns 1 if block is bad, 0 if block is good

/**

 * doc_get_erase_count - Get block erase count

 * @docg3: the device

 * @from: the offset in which the block is.

 *

 * Get the number of times a block was erased. The number is the maximum of

 * erase times between first and second plane (which should be equal normally).

 *

 * Returns The number of erases, or -EINVAL or -EIO on error.

/**

 * doc_get_op_status - get erase/write operation status

 * @docg3: the device

 *

 * Queries the status from the chip, and returns it

 *

 * Returns the status (bits DOC_PLANES_STATUS_*)

/**

 * doc_write_erase_wait_status - wait for write or erase completion

 * @docg3: the device

 *

 * Wait for the chip to be ready again after erase or write operation, and check

 * erase/write status.

 *

 * Returns 0 if erase successful, -EIO if erase/write issue, -ETIMEOUT if

 * timeout

/**

 * doc_erase_block - Erase a couple of blocks

 * @docg3: the device

 * @block0: the first block to erase (leftmost plane)

 * @block1: the second block to erase (rightmost plane)

 *

 * Erase both blocks, and return operation status

 *

 * Returns 0 if erase successful, -EIO if erase issue, -ETIMEOUT if chip not

 * ready for too long

/**

 * doc_erase - Erase a portion of the chip

 * @mtd: the device

 * @info: the erase info

 *

 * Erase a bunch of contiguous blocks, by pairs, as a "mtd" page of 1024 is

 * split into 2 pages of 512 bytes on 2 contiguous blocks.

 *

 * Returns 0 if erase successful, -EINVAL if addressing error, -EIO if erase

 * issue

/**

 * doc_write_page - Write a single page to the chip

 * @docg3: the device

 * @to: the offset from first block and first page, in bytes, aligned on page

 *      size

 * @buf: buffer to get bytes from

 * @oob: buffer to get out of band bytes from (can be NULL if no OOB should be

 *       written)

 * @autoecc: if 0, all 16 bytes from OOB are taken, regardless of HW Hamming or

 *           BCH computations. If 1, only bytes 0-7 and byte 15 are taken,

 *           remaining ones are filled with hardware Hamming and BCH

 *           computations. Its value is not meaningfull is oob == NULL.

 *

 * Write one full page (ie. 1 page split on two planes), of 512 bytes, with the

 * OOB data. The OOB ECC is automatically computed by the hardware Hamming and

 * BCH generator if autoecc is not null.

 *

 * Returns 0 if write successful, -EIO if write error, -EAGAIN if timeout

 Program the flash address block and page */

	/*

	 * The wait status will perform another doc_page_finish() call, but that

	 * seems to please the docg3, so leave it.

/**

 * doc_guess_autoecc - Guess autoecc mode from mbd_oob_ops

 * @ops: the oob operations

 *

 * Returns 0 or 1 if success, -EINVAL if invalid oob mode

/**

 * doc_fill_autooob - Fill a 16 bytes OOB from 8 non-ECC bytes

 * @dst: the target 16 bytes OOB buffer

 * @oobsrc: the source 8 bytes non-ECC OOB buffer

 *

/**

 * doc_backup_oob - Backup OOB into docg3 structure

 * @docg3: the device

 * @to: the page offset in the chip

 * @ops: the OOB size and buffer

 *

 * As the docg3 should write a page with its OOB in one pass, and some userland

 * applications do write_oob() to setup the OOB and then write(), store the OOB

 * into a temporary storage. This is very dangerous, as 2 concurrent

 * applications could store an OOB, and then write their pages (which will

 * result into one having its OOB corrupted).

 *

 * The only reliable way would be for userland to call doc_write_oob() with both

 * the page data _and_ the OOB area.

 *

 * Returns 0 if success, -EINVAL if ops content invalid

/**

 * doc_write_oob - Write out of band bytes to flash

 * @mtd: the device

 * @ofs: the offset from first block and first page, in bytes, aligned on page

 *       size

 * @ops: the mtd oob structure

 *

 * Either write OOB data into a temporary buffer, for the subsequent write

 * page. The provided OOB should be 16 bytes long. If a data buffer is provided

 * as well, issue the page write.

 * Or provide data without OOB, and then a all zeroed OOB will be used (ECC will

 * still be filled in if asked for).

 *

 * Returns 0 is successful, EINVAL if length is not 14 bytes

/*

 * Debug sysfs entries

/**

 * doc_set_driver_info - Fill the mtd_info structure and docg3 structure

 * @chip_id: The chip ID of the supported chip

 * @mtd: The structure to fill

/**

 * doc_probe_device - Check if a device is available

 * @cascade: the cascade of chips this devices will belong to

 * @floor: the floor of the probed device

 * @dev: the device

 *

 * Checks whether a device at the specified IO range, and floor is available.

 *

 * Returns a mtd_info struct if there is a device, ENODEV if none found, ENOMEM

 * if a memory allocation failed. If floor 0 is checked, a reset of the ASIC is

 * launched.

/**

 * doc_release_device - Release a docg3 floor

 * @mtd: the device

/**

 * docg3_resume - Awakens docg3 floor

 * @pdev: platfrom device

 *

 * Returns 0 (always successful)

/**

 * docg3_suspend - Put in low power mode the docg3 floor

 * @pdev: platform device

 * @state: power state

 *

 * Shuts off most of docg3 circuitery to lower power consumption.

 *

 * Returns 0 if suspend succeeded, -EIO if chip refused suspend

/**

 * doc_probe - Probe the IO space for a DiskOnChip G3 chip

 * @pdev: platform device

 *

 * Probes for a G3 chip at the specified IO space in the platform data

 * ressources. The floor 0 must be available.

 *

 * Returns 0 on success, -ENOMEM, -ENXIO on error

/**

 * docg3_release - Release the driver

 * @pdev: the platform device

 *

 * Returns 0

/*

 * mtdram - a test mtd device

 * Author: Alexander Larsson <alex@cendio.se>

 *

 * Copyright (c) 1999 Alexander Larsson <alex@cendio.se>

 * Copyright (c) 2005 Joern Engel <joern@wh.fh-wedel.de>

 *

 * This code is GPL

 *

 We could store these in the mtd structure, but we only support 1 device..

 Start address must align on block boundary */

 Length must align on block boundary */

 limit retlen to the number of contiguous physical pages */

 Setup the MTD structure */

 Allocate some memory */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	Copyright (c) 2001 Maciej W. Rozycki

/*

 * Addresses we probe for an MS02-NV at.  Modules may be located

 * at any 8MiB boundary within a 0MiB up to 112MiB range or at any 32MiB

 * boundary within a 0MiB up to 448MiB range.  We don't support a module

 * at 0MiB, though.

	/*

	 * The firmware writes MS02NV_ID at MS02NV_MAGIC and also

	 * a diagnostic status at MS02NV_DIAG.

 The module decodes 8MiB of address space. */

 Firmware's diagnostic NVRAM area. */

 User-available general-purpose NVRAM area. */

 Control and status register. */

	/*

	 * Hide the firmware's diagnostic area.  It may get destroyed

	 * upon a reboot.  Take paging into account for mapping support.

 SPDX-License-Identifier: GPL-2.0-only

/**************************************************

 * Various helpers

/**************************************************

 * MTD ops

		/* Newer flashes have "sub-sectors" which can be erased

		 * independently with a new command: ST_SSE. The ST_SE command

		 * erases 64KB just as before.

 Check address range */

 Read as much as possible using fast MMIO window */

 Use indirect access for content out of the window */

 Enable writes */

 Write first byte */

 Program page */

 1B written */

 Program page and set CSA (on newer chips we can continue writing) */

 Page boundary, another function call is needed */

 All done, drop CSA & poll */

 If we don't overwrite whole page, read it to the buffer first */

 250 us for AT45DB321B */

 Change buffer content with our data */

 Page boundary, another function call is needed */

 Program page with the buffer content */

	/* Writing functions can return without writing all passed data, for

	 * example when the hardware is too old or when we git page boundary.

/**************************************************

 * BCMA

	/*

	 * On old MIPS devices cache was magically invalidated when needed,

	 * allowing us to use cached access and gain some performance. Trying

	 * the same on ARM based BCM53573 results in flash corruptions, we need

	 * to use uncached access for it.

	 *

	 * It may be arch specific, but right now there is only 1 ARM SoC using

	 * this driver, so let's follow Broadcom's reference code and check

	 * ChipCommon revision.

/**************************************************

 * Init

 SPDX-License-Identifier: GPL-2.0-only

/*======================================================================



  This driver provides a method to access memory not used by the kernel

  itself (i.e. if the kernel commandline mem=xxx is used). To actually

  use slram at least mtdblock or mtdchar is required (for block or

  character device access).



  Usage:



  if compiled as loadable module:

    modprobe slram map=<name>,<start>,<end/offset>

  if statically linked into the kernel use the following kernel cmd.line

    slram=<name>,<start>,<end/offset>



  <name>: name of the device that will be listed in /proc/mtd

  <start>: start of the memory region, decimal or hex (0xabcdef)

  <end/offset>: end of the memory region. It's possible to use +0x1234

                to specify the offset instead of the absolute address



  NOTE:

  With slram it's only possible to map a contiguous memory region. Therefore

  if there's a device mapped somewhere in the region specified slram will

  fail to load (see kernel log if modprobe fails).



  -



  Jochen Schaeuble <psionic@psionic.de>



 3 parameters / device */

====================================================================*/

 !MODULE */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * st_spi_fsm.c	- ST Fast Sequence Mode (FSM) Serial Flash Controller

 *

 * Author: Angus Clark <angus.clark@st.com>

 *

 * Copyright (C) 2010-2014 STMicroelectronics Limited

 *

 * JEDEC probe based on drivers/mtd/devices/m25p80.c

/*

 * FSM SPI Controller Registers

/*

 * Register: SPI_MODESELECT

/*

 * Register: SPI_CONFIGDATA

/*

 * Register: SPI_FAST_SEQ_TRANSFER_SIZE

/*

 * Register: SPI_FAST_SEQ_ADD_CFG

/*

 * Register: SPI_FAST_SEQ_n

/*

 * Register: SPI_FAST_SEQ_CFG

/*

 * Register: SPI_MODE_BITS

/*

 * Register: SPI_DUMMY_BITS

/*

 * Register: SPI_FAST_SEQ_FLASH_STA_DATA

/*

 * FSM SPI Instruction Opcodes

/*

 * FSM SPI Instructions (== opcode + operand).

 100 MHz */

 15ms */

 10 MHz */

 FSM execution time */

 S25FLxxxS commands */

#define S25FL_CMD_WRITE4       0x12    /* Note, opcode clashes with

					* 'SPINOR_OP_WRITE_1_4_4'

 Status register */

 S25FL Error Flags */

 In Bytes    */

 In uint32_t */

 Maximum 'CHIPERASE' time */

/*

 * Flags to tweak operation of default read/write/erase routines

 Parameters to configure a READ or WRITE FSM sequence */

 flags to support config */

 FLASH command */

 Write Sequence */

 No. of addr pads (MODE & DUMMY) */

 No. of data pads */

 MODE data */

 No. of MODE cycles */

 No. of DUMMY cycles */

 SPI Flash Device Table */

	/*

	 * JEDEC id zero means "no ID" (most older chips); otherwise it has

	 * a high byte of zero plus three data bytes: the manufacturer id,

	 * then a two byte device id.

	/*

	 * The size listed here is what works with SPINOR_OP_SE, which isn't

	 * necessarily called a "sector" by the vendor.

	/*

	 * Note, where FAST_READ is supported, freq_max specifies the

	 * FAST_READ frequency, not the READ frequency.

	/*

	 * ST Microelectronics/Numonyx --

	 * (newer production versions may have feature updates

	 * (eg faster operating frequency)

	/* Macronix MX25xxx

	 *     - Support for 'FLASH_FLAG_WRITE_1_4_4' is omitted for devices

	 *       where operating frequency must be reduced.

	/*

	 * Spansion S25FLxxxP

	 *     - 256KiB and 64KiB sector variants (identified by ext. JEDEC)

	/*

	 * Spansion S25FLxxxS

	 *     - 256KiB and 64KiB sector variants (identified by ext. JEDEC)

	 *     - RESET# signal supported by die but not bristled out on all

	 *       package types.  The package type is a function of board design,

	 *       so this information is captured in the board's flags.

	 *     - Supports 'DYB' sector protection. Depending on variant, sectors

	 *       may default to locked state on power-on.

 Winbond -- w25x "blocks" are 64K, "sectors" are 4KiB */

 Winbond -- w25q "blocks" are 64K, "sectors" are 4KiB */

 Sentinel */

/*

 * FSM message sequence configurations:

 *

 * All configs are presented in order of preference

 Default READ configurations, in order of preference */

 Default WRITE configurations */

/*

 * [N25Qxxx] Configuration

/* N25Q 3-byte Address READ configurations

 *	- 'FAST' variants configured for 8 dummy cycles.

 *

 * Note, the number of dummy cycles used for 'FAST' READ operations is

 * configurable and would normally be tuned according to the READ command and

 * operating frequency.  However, this applies universally to all 'FAST' READ

 * commands, including those used by the SPIBoot controller, and remains in

 * force until the device is power-cycled.  Since the SPIBoot controller is

 * hard-wired to use 8 dummy cycles, we must configure the device to also use 8

 * cycles.

/* N25Q 4-byte Address READ configurations

 *	- use special 4-byte address READ commands (reduces overheads, and

 *        reduces risk of hitting watchdog reset issues).

 *	- 'FAST' variants configured for 8 dummy cycles (see note above.)

/*

 * [MX25xxx] Configuration

/*

 * [S25FLxxx] Configuration

/*

 * S25FLxxxS devices provide three ways of supporting 32-bit addressing: Bank

 * Register, Extended Address Modes, and a 32-bit address command set.  The

 * 32-bit address command set is used here, since it avoids any problems with

 * entering a state that is incompatible with the SPIBoot Controller.

/*

 * [W25Qxxx] Configuration

 'addr_cfg' configured during initialisation */

 Dummy sequence to read one byte of data from flash into the FIFO */

/*

 * Clear the data FIFO

 *

 * Typically, this is only required during driver initialisation, where no

 * assumptions can be made regarding the state of the FIFO.

 *

 * The process of clearing the FIFO is complicated by fact that while it is

 * possible for the FIFO to contain an arbitrary number of bytes [1], the

 * SPI_FAST_SEQ_STA register only reports the number of complete 32-bit words

 * present.  Furthermore, data can only be drained from the FIFO by reading

 * complete 32-bit words.

 *

 * With this in mind, a two stage process is used to the clear the FIFO:

 *

 *     1. Read any complete 32-bit words from the FIFO, as reported by the

 *        SPI_FAST_SEQ_STA register.

 *

 *     2. Mop up any remaining bytes.  At this point, it is not known if there

 *        are 0, 1, 2, or 3 bytes in the FIFO.  To handle all cases, a dummy FSM

 *        sequence is used to load one byte at a time, until a complete 32-bit

 *        word is formed; at most, 4 bytes will need to be loaded.

 *

 * [1] It is theoretically possible for the FIFO to contain an arbitrary number

 *     of bits.  However, since there are no known use-cases that leave

 *     incomplete bytes in the FIFO, only words and bytes are considered here.

 1. Clear any 32-bit words */

	/*

	 * 2. Clear any remaining bytes

	 *    - Load the FIFO, one byte at a time, until a complete 32-bit word

	 *      is available.

    - A single word must be available now */

    - Read the 32-bit word */

 Use RDRS1 */

 Load read_status sequence */

	/*

	 * Repeat until busy bit is deasserted, or timeout, or error (S25FLxxxS)

 Restart */

/*

 * SoC reset on 'boot-from-spi' systems

 *

 * Certain modes of operation cause the Flash device to enter a particular state

 * for a period of time (e.g. 'Erase Sector', 'Quad Enable', and 'Enter 32-bit

 * Addr' commands).  On boot-from-spi systems, it is important to consider what

 * happens if a warm reset occurs during this period.  The SPIBoot controller

 * assumes that Flash device is in its default reset state, 24-bit address mode,

 * and ready to accept commands.  This can be achieved using some form of

 * on-board logic/controller to force a device POR in response to a SoC-level

 * reset or by making use of the device reset signal if available (limited

 * number of devices only).

 *

 * Failure to take such precautions can cause problems following a warm reset.

 * For some operations (e.g. ERASE), there is little that can be done.  For

 * other modes of operation (e.g. 32-bit addressing), options are often

 * available that can help minimise the window in which a reset could cause a

 * problem.

 *

 Reset signal is available on the board and supported by the device */

 Board-level logic forces a power-on-reset */

 Reset is not properly handled and may result in failure to reboot */

 Configure 'addr_cfg' according to addressing mode */

 Search for preferred configuration based on available flags */

 Prepare a READ/WRITE sequence according to configuration parameters */

 Add READ/WRITE OPC  */

 Add WREN OPC for a WRITE sequence */

 Address configuration (24 or 32-bit addresses) */

 ADD1 cycles */

 ADD1 pads */

 ADD2 cycles */

 ADD2 pads */

 Data/Sequence configuration */

 Mode configuration (no. of pads taken from addr cfg) */

 data */

 cycles */

 pads */

 Dummy configuration (no. of pads taken from addr cfg) */

 cycles */

 pads */

 Instruction sequence */

 Prepare a READ/WRITE/ERASE 'default' sequences */

 Configure 'READ' sequence */

 Configure 'WRITE' sequence */

 Configure 'ERASE_SECTOR' sequence */

	/*

	 * Use default READ/WRITE sequences

	/*

	 * Configure 32-bit Address Support

 Configure 'enter_32bitaddr' FSM sequence */

			/* If we can handle SoC resets, we enable 32-bit address

			/* Else, enable/disable 32-bit addressing before/after

 Check status of 'QE' bit, update if required. */

 Set 'QE' */

 Clear 'QE' */

 Configure 'READ' sequence */

 Configure 'WRITE' sequence (default configs) */

 * Configure 'ERASE_SECTOR' sequence */

 Configure 32-bit address support */

			/*

			 * If we can handle SoC resets, we enable 32-bit

			 * address mode pervasively

			/*

			 * If not, enable/disable for WRITE and ERASE

			 * operations (READ uses special commands)

	/*

	 * Configure device to use 8 dummy cycles

		/*

		 * Prepare Read/Write/Erase sequences according to S25FLxxx

		 * 32-bit address command set

 Use default configurations for 24-bit addressing */

	/*

	 * For devices that support 'DYB' sector locking, check lock status and

	 * unlock sectors if necessary (some variants power-on with sectors

	 * locked by default)

 Handle bottom/top 4KiB parameter sectors */

 Check status of 'QE' bit, update if required. */

 Set 'QE' */

 Clear 'QE' */

	/*

	 * S25FLxxx devices support Program and Error error flags.

	 * Configure driver to check flags and clear if necessary.

 Check status of 'QE' bit, update if required. */

 Set 'QE' */

 Clear 'QE' */

 Write status register */

 Enter 32-bit address mode, if required */

 Must read in multiples of 32 cycles (or 32*pads/8 Bytes) */

 Handle non-aligned buf */

 Handle non-aligned size */

 Handle non-aligned buf */

 Wait for sequence to finish */

 Exit 32-bit address mode, if required */

 Enter 32-bit address mode, if required */

 Must write in multiples of 32 cycles (or 32*pads/8 bytes) */

 Handle non-aligned buf */

 Handle non-aligned size */

	/* Need to set FIFO to write mode, before writing data to FIFO (see

	 * GNBvb79594)

	/*

	 * Before writing data to the FIFO, apply a small delay to allow a

	 * potential change of FIFO direction to complete.

 Write data to FIFO, before starting sequence (see GNBvd79593) */

 Handle non-aligned size */

 fill with 0xff's */

 Start sequence */

 Wait for sequence to finish */

 Wait for completion */

 Exit 32-bit address mode, if required */

/*

 * Read an address range from the flash chip. The address range

 * may be any size provided it is within the physical boundaries.

 Enter 32-bit address mode, if required */

 Wait for completion */

 Exit 32-bit address mode, if required */

/*

 * Write an address range to the flash chip.  Data must be written in

 * FLASH_PAGESIZE chunks.  The address range may be any size provided

 * it is within the physical boundaries.

 Offset within page */

 Write up to page boundary */

 We are now page-aligned */

/*

 * Erase an address range on the flash chip. The address range may extend

 * one or more erase sectors.  Return an error is there is a problem erasing.

 Whole-chip erase? */

	/*

	 * JEDEC also defines an optional "extended device information"

	 * string for after vendor-specific data, after the three bytes

	 * we use here. Supporting some chips might require using it.

 Wait for controller to accept mode change */

	/*

	 * Calculate clk_div - values between 2 and 128

	 * Multiple of 2, rounded up

	/*

	 * Determine a suitable delay for the IP to complete a change of

	 * direction of the FIFO. The required delay is related to the clock

	 * divider used. The following heuristics are based on empirical tests,

	 * using a 100MHz EMI clock.

 Perform a soft reset of the FSM controller */

 Set clock to 'safe' frequency initially */

 Switch to FSM */

 Set timing parameters */

	/*

	 * Set the FSM 'WAIT' delay to the minimum workable value.  Note, for

	 * our purposes, the WAIT instruction is used purely to achieve

	 * "sequence validity" rather than actually implement a delay.

 Clear FIFO, just in case */

 Value we read from *boot_device_reg */

 Booting from SPI NOR Flash is the default */

 Where in the syscon the boot device information lives */

 Boot device value when booted from SPI NOR */

 Detect SPI FLASH device */

 Use device size to determine address width */

	/*

	 * Configure READ/WRITE/ERASE sequences according to platform and

	 * device flags.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Industry-pack bus support functions.

 *

 * Copyright (C) 2011-2012 CERN (www.cern.ch)

 * Author: Samuel Iglesias Gonsalvez <siglesias@igalia.com>

/*

 * The algorithm in lib/crc-ccitt.c does not seem to apply since it uses the

 * opposite bit ordering.

	/* Determine ID PROM Data Format.  If we find the ids "IPAC" or "IPAH"

	 * we are dealing with a IndustryPack  format 1 device.  If we detect

	 * "VITA4 " (16 bit big endian formatted) we are dealing with a

	/* Obtain the amount of memory required to store a copy of the complete

 now we can finally work with the copy */

 if the device supports 32 MHz operation, use it. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * driver for the TEWS TPCI-200 device

 *

 * Copyright (C) 2009-2012 CERN (www.cern.ch)

 * Author: Nicolas Serafini, EIC2 SA

 * Author: Samuel Iglesias Gonsalvez <siglesias@igalia.com>

 Read status register */

 Did we cause the interrupt? */

 callback to the IRQ handler for the corresponding slot */

 uninstall handler */

	/*

	 * WARNING: Setup Interrupt Vector in the IndustryPack device

	 * before an IRQ request.

	 * Read the User Manual of your IndustryPack device to know

	 * where to write the vector in memory.

 Request IP interface register (Bar 2) */

 Request IO ID INT space (Bar 3) */

 Request MEM8 space (Bar 5) */

 Request MEM16 space (Bar 4) */

 Map internal tpci200 driver user space */

 Initialize lock that protects interface_regs */

	/* Set the default parameters of the slot

	 * INT0 disabled, level sensitive

	 * INT1 disabled, level sensitive

	 * error interrupt disabled

	 * timeout interrupt disabled

	 * recover time disabled

	 * clock rate 8 MHz

 Obtain a mapping of the carrier's PCI configuration registers */

	/* Disable byte swapping for 16 bit IP module access. This will ensure

	 * that the Industrypack big endian byte order is preserved by the

 Save struct pci_dev pointer */

 register the device and initialize it */

 Register the carrier in the industry pack bus driver */

 save the bus number given by ipack to logging purpose */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * driver for the GE IP-OCTAL boards

 *

 * Copyright (C) 2009-2012 CERN (www.cern.ch)

 * Author: Nicolas Serafini, EIC2 SA

 * Author: Samuel Iglesias Gonsalvez <siglesias@igalia.com>

	/*

	 * Enable RX. TX will be enabled when

	 * there is something to send

 Error: count statistics */

 Overrun doesn't affect the current character*/

		/* Check if there are more characters in RX FIFO

		 * If there are more, the isr register for this channel

		 * has enabled the RxRDY|FFULL bit.

	/* The HW is organized in pair of channels.  See which register we need

		/* In case of RS-485, change from TX to RX when finishing TX.

 RX data */

 TX of each character */

 Clear the IPack device interrupt */

 Check all channels */

 Save the virtual address to access the registers easily */

 Disable RX and TX before touching anything */

 mr1 */

 mr2 */

 Dummy write */

 Register the TTY device */

 Each IP-OCTAL channel is a TTY port */

 Fill struct tty_driver with ipoctal data */

 Save struct tty_driver for use it when uninstalling the device */

	/*

	 * IP-OCTAL has different addresses to copy its IRQ vector.

	 * Depending of the carrier these addresses are accesible or not.

	 * More info in the datasheet.

 Copy the bytes from the user buffer to the internal one */

 As the IP-OCTAL 485 only supports half duplex, do it manually */

	/*

	 * Send a packet and then disable TX to avoid failure after several send

	 * operations

 Disable and reset everything before change the setup */

 Set Bits per chars */

 By default, select CS8 */

 Set Parity */

 Mark or space parity is not supported */

 Set stop bits */

 Set the flow control */

 Set baud rate */

 In case of default, we establish 38400 bps */

 Write the control registers */

 Enable again the RX, if it was before */

 release the carrier driver */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2019-2020 Intel Corporation

 *

 * Please see Documentation/driver-api/auxiliary_bus.rst for more information.

 use dev_name(&auxdev->dev) prefix before last '.' char to match to */

/**

 * auxiliary_device_init - check auxiliary_device and initialize

 * @auxdev: auxiliary device struct

 *

 * This is the first step in the two-step process to register an

 * auxiliary_device.

 *

 * When this function returns an error code, then the device_initialize will

 * *not* have been performed, and the caller will be responsible to free any

 * memory allocated for the auxiliary_device in the error path directly.

 *

 * It returns 0 on success.  On success, the device_initialize has been

 * performed.  After this point any error unwinding will need to include a call

 * to auxiliary_device_uninit().  In this post-initialize error scenario, a call

 * to the device's .release callback will be triggered, and all memory clean-up

 * is expected to be handled there.

/**

 * __auxiliary_device_add - add an auxiliary bus device

 * @auxdev: auxiliary bus device to add to the bus

 * @modname: name of the parent device's driver module

 *

 * This is the second step in the two-step process to register an

 * auxiliary_device.

 *

 * This function must be called after a successful call to

 * auxiliary_device_init(), which will perform the device_initialize.  This

 * means that if this returns an error code, then a call to

 * auxiliary_device_uninit() must be performed so that the .release callback

 * will be triggered to free the memory associated with the auxiliary_device.

 *

 * The expectation is that users will call the "auxiliary_device_add" macro so

 * that the caller's KBUILD_MODNAME is automatically inserted for the modname

 * parameter.  Only if a user requires a custom name would this version be

 * called directly.

/**

 * auxiliary_find_device - auxiliary device iterator for locating a particular device.

 * @start: Device to begin with

 * @data: Data to pass to match function

 * @match: Callback function to check device

 *

 * This function returns a reference to a device that is 'found'

 * for later use, as determined by the @match callback.

 *

 * The callback should return 0 if the device doesn't match and non-zero

 * if it does.  If the callback returns non-zero, this function will

 * return to the caller and not iterate over any more devices.

/**

 * __auxiliary_driver_register - register a driver for auxiliary bus devices

 * @auxdrv: auxiliary_driver structure

 * @owner: owning module/driver

 * @modname: KBUILD_MODNAME for parent driver

/**

 * auxiliary_driver_unregister - unregister a driver

 * @auxdrv: auxiliary_driver structure

 SPDX-License-Identifier: GPL-2.0

/*

 * Software nodes for the firmware node framework.

 *

 * Copyright (C) 2018, Intel Corporation

 * Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>

 hierarchy */

 -------------------------------------------------------------------------- */

 property_entry processing */

 Find out the array length. */

 Return how many there are if strings is NULL. */

	/*

	 * Properties with no data should not be marked as stored

	 * out of line.

	/*

	 * Reference properties are never stored inline as

	 * they are too big.

/**

 * property_entries_dup - duplicate array of properties

 * @properties: array of properties to copy

 *

 * This function creates a deep copy of the given NULL-terminated array

 * of property entries.

/**

 * property_entries_free - free previously allocated array of properties

 * @properties: array of properties to destroy

 *

 * This function frees given NULL-terminated array of property entries,

 * along with their data.

 -------------------------------------------------------------------------- */

 fwnode operations */

 Figure out the prefix from the parents. */

 Guess something if prefix was NULL. */

	/*

	 * We expect that references are never stored inline, even

	 * single ones, as they are too big.

		/*

		 * fwnode ports have naming style "port@", so we search for any

		 * children that follow that convention.

 Ports have naming style "port@n", we need to select the n */

 -------------------------------------------------------------------------- */

/**

 * software_node_find_by_name - Find software node by name

 * @parent: Parent of the software node

 * @name: Name of the software node

 *

 * The function will find a node that is child of @parent and that is named

 * @name. If no node is found, the function returns NULL.

 *

 * NOTE: you will need to drop the reference with fwnode_handle_put() after use.

	/*

	 * Assign the flag only in the successful case, so

	 * the above kobject_put() won't mess up with properties.

/**

 * software_node_register_nodes - Register an array of software nodes

 * @nodes: Zero terminated array of software nodes to be registered

 *

 * Register multiple software nodes at once. If any node in the array

 * has its .parent pointer set (which can only be to another software_node),

 * then its parent **must** have been registered before it is; either outside

 * of this function or by ordering the array such that parent comes before

 * child.

/**

 * software_node_unregister_nodes - Unregister an array of software nodes

 * @nodes: Zero terminated array of software nodes to be unregistered

 *

 * Unregister multiple software nodes at once. If parent pointers are set up

 * in any of the software nodes then the array **must** be ordered such that

 * parents come before their children.

 *

 * NOTE: If you are uncertain whether the array is ordered such that

 * parents will be unregistered before their children, it is wiser to

 * remove the nodes individually, in the correct order (child before

 * parent).

/**

 * software_node_register_node_group - Register a group of software nodes

 * @node_group: NULL terminated array of software node pointers to be registered

 *

 * Register multiple software nodes at once. If any node in the array

 * has its .parent pointer set (which can only be to another software_node),

 * then its parent **must** have been registered before it is; either outside

 * of this function or by ordering the array such that parent comes before

 * child.

/**

 * software_node_unregister_node_group - Unregister a group of software nodes

 * @node_group: NULL terminated array of software node pointers to be unregistered

 *

 * Unregister multiple software nodes at once. If parent pointers are set up

 * in any of the software nodes then the array **must** be ordered such that

 * parents come before their children.

 *

 * NOTE: If you are uncertain whether the array is ordered such that

 * parents will be unregistered before their children, it is wiser to

 * remove the nodes individually, in the correct order (child before

 * parent).

/**

 * software_node_register - Register static software node

 * @node: The software node to be registered

/**

 * software_node_unregister - Unregister static software node

 * @node: The software node to be unregistered

/**

 * device_add_software_node - Assign software node to a device

 * @dev: The device the software node is meant for.

 * @node: The software node.

 *

 * This function will make @node the secondary firmware node pointer of @dev. If

 * @dev has no primary node, then @node will become the primary node. The

 * function will register @node automatically if it wasn't already registered.

 Only one software node per device. */

	/*

	 * If the device has been fully registered by the time this function is

	 * called, software_node_notify() must be called separately so that the

	 * symlinks get created and the reference count of the node is kept in

	 * balance.

/**

 * device_remove_software_node - Remove device's software node

 * @dev: The device with the software node.

 *

 * This function will unregister the software node of @dev.

/**

 * device_create_managed_software_node - Create a software node for a device

 * @dev: The device the software node is assigned to.

 * @properties: Device properties for the software node.

 * @parent: Parent of the software node.

 *

 * Creates a software node as a managed resource for @dev, which means the

 * lifetime of the newly created software node is tied to the lifetime of @dev.

 * Software nodes created with this function should not be reused or shared

 * because of that. The function takes a deep copy of @properties for the

 * software node.

 *

 * Since the new software node is assigned directly to @dev, and since it should

 * not be shared, it is not returned to the caller. The function returns 0 on

 * success, and errno in case of an error.

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver core interface to the pinctrl subsystem.

 *

 * Copyright (C) 2012 ST-Ericsson SA

 * Written on behalf of Linaro for ST-Ericsson

 * Based on bits of regulator core, gpio core and clk core

 *

 * Author: Linus Walleij <linus.walleij@linaro.org>

/**

 * pinctrl_bind_pins() - called by the device core before probe

 * @dev: the device that is just about to probe

 Not supplying this state is perfectly legal */

	/*

	 * If power management is enabled, we also look for the optional

	 * sleep and idle pin states, with semantics as defined in

	 * <linux/pinctrl/pinctrl-state.h>

 Not supplying this state is perfectly legal */

 Not supplying this state is perfectly legal */

	/*

	 * If no pinctrl handle or default state was found for this device,

	 * let's explicitly free the pin container in the device, there is

	 * no point in keeping it around.

 Return deferrals */

 Return serious errors */

 We ignore errors like -ENOENT meaning no pinctrl state */

 SPDX-License-Identifier: GPL-2.0

/*

 * driver.c - centralized device driver management

 *

 * Copyright (c) 2002-3 Patrick Mochel

 * Copyright (c) 2002-3 Open Source Development Labs

 * Copyright (c) 2007 Greg Kroah-Hartman <gregkh@suse.de>

 * Copyright (c) 2007 Novell Inc.

/**

 * driver_for_each_device - Iterator for devices bound to a driver.

 * @drv: Driver we're iterating.

 * @start: Device to begin with

 * @data: Data to pass to the callback.

 * @fn: Function to call for each device.

 *

 * Iterate over the @drv's list of devices calling @fn for each one.

/**

 * driver_find_device - device iterator for locating a particular device.

 * @drv: The device's driver

 * @start: Device to begin with

 * @data: Data to pass to match function

 * @match: Callback function to check device

 *

 * This is similar to the driver_for_each_device() function above, but

 * it returns a reference to a device that is 'found' for later use, as

 * determined by the @match callback.

 *

 * The callback should return 0 if the device doesn't match and non-zero

 * if it does.  If the callback returns non-zero, this function will

 * return to the caller and not iterate over any more devices.

/**

 * driver_create_file - create sysfs file for driver.

 * @drv: driver.

 * @attr: driver attribute descriptor.

/**

 * driver_remove_file - remove sysfs file for driver.

 * @drv: driver.

 * @attr: driver attribute descriptor.

/**

 * driver_register - register driver with bus

 * @drv: driver to register

 *

 * We pass off most of the work to the bus_add_driver() call,

 * since most of the things we have to do deal with the bus

 * structures.

/**

 * driver_unregister - remove driver from system.

 * @drv: driver.

 *

 * Again, we pass off most of the work to the bus-level call.

/**

 * driver_find - locate driver on a bus by its name.

 * @name: name of the driver.

 * @bus: bus to scan for the driver.

 *

 * Call kset_find_obj() to iterate over list of drivers on

 * a bus to find driver by name. Return driver if found.

 *

 * This routine provides no locking to prevent the driver it returns

 * from being unregistered or unloaded while the caller is using it.

 * The caller is responsible for preventing this.

 Drop reference added by kset_find_obj() */

 SPDX-License-Identifier: GPL-2.0

/*

 * bus.c - bus driver management

 *

 * Copyright (c) 2002-3 Patrick Mochel

 * Copyright (c) 2002-3 Open Source Development Labs

 * Copyright (c) 2007 Greg Kroah-Hartman <gregkh@suse.de>

 * Copyright (c) 2007 Novell Inc.

 /sys/devices/system */

/*

 * sysfs bindings for drivers

/*

 * sysfs bindings for buses

 Manually detach a device from its associated driver. */

/*

 * Manually attach a device to a driver.

 * Note: the driver must want to bind to the device,

 * it is not possible to override the driver's id table.

 success */

/**

 * bus_for_each_dev - device iterator.

 * @bus: bus type.

 * @start: device to start iterating from.

 * @data: data for the callback.

 * @fn: function to be called for each device.

 *

 * Iterate over @bus's list of devices, and call @fn for each,

 * passing it @data. If @start is not NULL, we use that device to

 * begin iterating from.

 *

 * We check the return of @fn each time. If it returns anything

 * other than 0, we break out and return that value.

 *

 * NOTE: The device that returns a non-zero value is not retained

 * in any way, nor is its refcount incremented. If the caller needs

 * to retain this data, it should do so, and increment the reference

 * count in the supplied callback.

/**

 * bus_find_device - device iterator for locating a particular device.

 * @bus: bus type

 * @start: Device to begin with

 * @data: Data to pass to match function

 * @match: Callback function to check device

 *

 * This is similar to the bus_for_each_dev() function above, but it

 * returns a reference to a device that is 'found' for later use, as

 * determined by the @match callback.

 *

 * The callback should return 0 if the device doesn't match and non-zero

 * if it does.  If the callback returns non-zero, this function will

 * return to the caller and not iterate over any more devices.

/**

 * subsys_find_device_by_id - find a device with a specific enumeration number

 * @subsys: subsystem

 * @id: index 'id' in struct device

 * @hint: device to check first

 *

 * Check the hint's next object and if it is a match return it directly,

 * otherwise, fall back to a full list search. Either way a reference for

 * the returned object is taken.

/**

 * bus_for_each_drv - driver iterator

 * @bus: bus we're dealing with.

 * @start: driver to start iterating on.

 * @data: data to pass to the callback.

 * @fn: function to call for each driver.

 *

 * This is nearly identical to the device iterator above.

 * We iterate over each driver that belongs to @bus, and call

 * @fn for each. If @fn returns anything but 0, we break out

 * and return it. If @start is not NULL, we use it as the head

 * of the list.

 *

 * NOTE: we don't return the driver that returns a non-zero

 * value, nor do we leave the reference count incremented for that

 * driver. If the caller needs to know that info, it must set it

 * in the callback. It must also be sure to increment the refcount

 * so it doesn't disappear before returning to the caller.

/**

 * bus_add_device - add device to bus

 * @dev: device being added

 *

 * - Add device's bus attributes.

 * - Create links to device's bus.

 * - Add the device to its bus's list of devices.

/**

 * bus_probe_device - probe drivers for a new device

 * @dev: device to probe

 *

 * - Automatically probe for a driver if the bus allows it.

/**

 * bus_remove_device - remove device from bus

 * @dev: device to be removed

 *

 * - Remove device from all interfaces.

 * - Remove symlink from bus' directory.

 * - Delete device from bus's list.

 * - Detach from its driver.

 * - Drop reference taken in bus_add_device().

/**

 * bus_add_driver - Add a driver to the bus.

 * @drv: driver.

 How the hell do we get out of this pickle? Give up */

 Ditto */

 drv->p is freed in driver_release()  */

/**

 * bus_remove_driver - delete driver from bus's knowledge.

 * @drv: driver.

 *

 * Detach the driver from the devices it controls, and remove

 * it from its bus's list of drivers. Finally, we drop the reference

 * to the bus we took in bus_add_driver().

 Helper for bus_rescan_devices's iter */

/**

 * bus_rescan_devices - rescan devices on the bus for possible drivers

 * @bus: the bus to scan.

 *

 * This function will look for devices on the bus with no driver

 * attached and rescan it against existing drivers to see if it matches

 * any by calling device_attach() for the unbound devices.

/**

 * device_reprobe - remove driver for a device and probe for a new driver

 * @dev: the device to reprobe

 *

 * This function detaches the attached driver (if any) for the given

 * device and restarts the driver probing process.  It is intended

 * to use if probing criteria changed during a devices lifetime and

 * driver attachment should change accordingly.

/*

 * "open code" the old BUS_ATTR() macro here.  We want to use BUS_ATTR_WO()

 * here, but can not use it as earlier in the file we have

 * DEVICE_ATTR_WO(uevent), which would cause a clash with the with the store

 * function name.

/**

 * bus_register - register a driver-core subsystem

 * @bus: bus to register

 *

 * Once we have that, we register the bus with the kobject

 * infrastructure, then register the children subsystems it has:

 * the devices and drivers that belong to the subsystem.

/**

 * bus_unregister - remove a bus from the system

 * @bus: bus.

 *

 * Unregister the child subsystems and the bus itself.

 * Finally, we call bus_put() to release the refcount

/*

 * Yes, this forcibly breaks the klist abstraction temporarily.  It

 * just wants to sort the klist, not change reference counts and

 * take/drop locks rapidly in the process.  It does all this while

 * holding the lock for the list, so objects can't otherwise be

 * added/removed while we're swizzling.

/**

 * subsys_dev_iter_init - initialize subsys device iterator

 * @iter: subsys iterator to initialize

 * @subsys: the subsys we wanna iterate over

 * @start: the device to start iterating from, if any

 * @type: device_type of the devices to iterate over, NULL for all

 *

 * Initialize subsys iterator @iter such that it iterates over devices

 * of @subsys.  If @start is set, the list iteration will start there,

 * otherwise if it is NULL, the iteration starts at the beginning of

 * the list.

/**

 * subsys_dev_iter_next - iterate to the next device

 * @iter: subsys iterator to proceed

 *

 * Proceed @iter to the next device and return it.  Returns NULL if

 * iteration is complete.

 *

 * The returned device is referenced and won't be released till

 * iterator is proceed to the next device or exited.  The caller is

 * free to do whatever it wants to do with the device including

 * calling back into subsys code.

/**

 * subsys_dev_iter_exit - finish iteration

 * @iter: subsys iterator to finish

 *

 * Finish an iteration.  Always call this function after iteration is

 * complete whether the iteration ran till the end or not.

/**

 * subsys_system_register - register a subsystem at /sys/devices/system/

 * @subsys: system subsystem

 * @groups: default attributes for the root device

 *

 * All 'system' subsystems have a /sys/devices/system/<name> root device

 * with the name of the subsystem. The root device can carry subsystem-

 * wide attributes. All registered devices are below this single root

 * device and are named after the subsystem with a simple enumeration

 * number appended. The registered devices are not explicitly named;

 * only 'id' in the device needs to be set.

 *

 * Do not use this interface for anything new, it exists for compatibility

 * with bad ideas only. New subsystems should use plain subsystems; and

 * add the subsystem-wide attributes should be added to the subsystem

 * directory itself and not some create fake root-device placed in

 * /sys/devices/system/<name>.

/**

 * subsys_virtual_register - register a subsystem at /sys/devices/virtual/

 * @subsys: virtual subsystem

 * @groups: default attributes for the root device

 *

 * All 'virtual' subsystems have a /sys/devices/system/<name> root device

 * with the name of the subystem.  The root device can carry subsystem-wide

 * attributes.  All registered devices are below this single root device.

 * There's no restriction on device naming.  This is for kernel software

 * constructs which need sysfs interface.

 SPDX-License-Identifier: GPL-2.0

/*

 * cacheinfo support - processor cache information via sysfs

 *

 * Based on arch/x86/kernel/cpu/intel_cacheinfo.c

 * Author: Sudeep Holla <sudeep.holla@arm.com>

 pointer to per cpu cacheinfo */

 OF properties to query for a given cache type */

 not cache_line_size() because that's a macro in include/linux/cache.h */

	/*

	 * If the cache is fully associative, there is no need to

	 * check the other properties.

	/*

	 * init_cache_level must setup the cache level correctly

	 * overriding the architecturally specified levels, so

	 * if type is NONE at this stage, it should be unified

 skip if fw_token is already populated */

 cpu node itself */

 not all OF nodes populated */

	/*

	 * For non-DT/ACPI systems, assume unique level 1 caches, system-wide

	 * shared caches for all other levels. This will be used only if

	 * arch specific code has not populated shared_cpu_map

 skip if shared_cpu_map is already populated */

 skip if itself or no cacheinfo */

 record the maximum cache line size */

 skip itself */

	/*

	 * populate_cache_leaves() may completely setup the cache leaves and

	 * shared_cpu_map or it may leave it partially setup.

	/*

	 * For systems using DT for cache hierarchy, fw_token

	 * and shared_cpu_map will be set up here only if they are

	 * not populated already

 pointer to cpuX/cache device */

 pointer to array of devices for cpuX/cache/indexY */

 allow 0 = full associativity */

 Place holder for private group */

 Add/Remove cache interface for CPU device */

 Allocate all required memory */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * NUMA support, based on the x86 implementation.

 *

 * Copyright (C) 2015 Cavium Inc.

 * Author: Ganapatrao Kulkarni <gkulkarni@cavium.com>

/*

 * Returns a pointer to the bitmask of CPUs on Node 'node'.

/*

 * Allocate node_to_cpumask_map based on number of available nodes

 * Requires node_possible_map to be valid.

 *

 * Note: cpumask_of_node() is not valid until after this is done.

 * (Use CONFIG_DEBUG_PER_CPU_MAPS to check this.)

 setup nr_node_ids if not done yet */

 allocate and clear the mapping */

 cpumask_of_node() will now work */

/*

 * Set the cpu to node and mem mapping

 fallback to node 0 */

	/*

	 * We should set the numa node of cpu0 as soon as possible, because it

	 * has already been set up online before. cpu_to_node(0) will soon be

	 * called.

		/*

		 * Always reserve area for module percpu variables.  That's

		 * what the legacy allocator did.

/**

 * numa_add_memblk() - Set node id to memblk

 * @nid: NUMA node ID of the new memblk

 * @start: Start address of the new memblk

 * @end:  End address of the new memblk

 *

 * RETURNS:

 * 0 on success, -errno on failure.

/*

 * Initialize NODE_DATA for a node on the local memory

 report and initialize */

/*

 * numa_free_distance

 *

 * The current table is freed.

/*

 * Create a new NUMA distance table.

 fill with the default distances */

/**

 * numa_set_distance() - Set inter node NUMA distance from node to node.

 * @from: the 'from' node to set distance

 * @to: the 'to'  node to set distance

 * @distance: NUMA distance

 *

 * Set the distance from node @from to @to to @distance.

 * If distance table doesn't exist, a warning is printed.

 *

 * If @from or @to is higher than the highest known node or lower than zero

 * or @distance doesn't make sense, the call is ignored.

/*

 * Return NUMA distance @from to @to

 Check that valid nid is set to memblks */

 Finally register nodes. */

 Setup online nodes to actual nodes*/

/**

 * dummy_numa_init() - Fallback dummy NUMA init

 *

 * Used if there's no underlying NUMA architecture, NUMA initialization

 * fails, or NUMA is disabled on the command line.

 *

 * Must online at least one node (node 0) and add memory blocks that cover all

 * allowed memory. It is unlikely that this function fails.

 *

 * Return: 0 on success, -errno on failure.

 Forced off on command line. */

/**

 * arch_numa_init() - Initialize NUMA

 *

 * Try each configured NUMA initialization method until one succeeds. The

 * last fallback is dummy single node config encompassing whole memory.

 SPDX-License-Identifier: GPL-2.0

/*

 * System bus type for containers.

 *

 * Copyright (C) 2013, Intel Corporation

 * Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

 SPDX-License-Identifier: GPL-2.0

/*

 * CPU subsystem support

 ACPI style match is the only one that may succeed. */

	/*

	 * When hot adding memory to memoryless node and enabling a cpu

	 * on the node, node number of the cpu may internally change.

 CONFIG_ARCH_CPU_PROBE_RELEASE */

 CONFIG_HOTPLUG_CPU */

	/*

	 * Might be reading other cpu's data based on which cpu read thread

	 * has been scheduled. But cpu data (memory) is allocated once during

	 * boot up and this data does not change there after. Hence this

	 * operation should be safe. No locking required.

/*

 * Print cpu online, possible, present, and system maps

 Keep in sync with cpu_subsys_attrs */

/*

 * Print values for NR_CPUS and offlined cpus

 arch-optional setting to enable display of offline cpus >= nr_cpu_ids */

 display offline cpus < nr_cpu_ids */

 display offline cpus >= nr_cpu_ids */

	/*

	 * This is an empty function to prevent the driver core from spitting a

	 * warning at us.  Yes, I know this is directly opposite of what the

	 * documentation for the driver core and kobjects say, and the author

	 * of this code has already been publically ridiculed for doing

	 * something as foolish as this.  However, at this point in time, it is

	 * the only way to handle the issue of statically allocated cpu

	 * devices.  The different architectures will have their cpu device

	 * code reworked to properly handle this in the near future, so this

	 * function will then be changed to correctly free up the memory held

	 * by the cpu device.

	 *

	 * Never copy this way of doing things, or you too will be made fun of

	 * on the linux-kernel list, you have been warned.

/*

 * register_cpu - Setup a sysfs device for a CPU.

 * @cpu - cpu->hotpluggable field set to 1 will generate a control file in

 *	  sysfs for this CPU.

 * @num - CPU number to use when creating the device.

 *

 * Initialize and register the CPU device.

 SPDX-License-Identifier: GPL-2.0

/*

 * class.c - basic device class management

 *

 * Copyright (c) 2002-3 Patrick Mochel

 * Copyright (c) 2002-3 Open Source Development Labs

 * Copyright (c) 2003-2004 Greg Kroah-Hartman

 * Copyright (c) 2003-2004 IBM Corp.

 Hotplug events for classes go to the class subsys */

 set the default /sys/dev directory for devices of this class */

 let the block class directory show up in the root of sysfs */

/**

 * __class_create - create a struct class structure

 * @owner: pointer to the module that is to "own" this struct class

 * @name: pointer to a string for the name of this class.

 * @key: the lock_class_key for this class; used by mutex lock debugging

 *

 * This is used to create a struct class pointer that can then be used

 * in calls to device_create().

 *

 * Returns &struct class pointer on success, or ERR_PTR() on error.

 *

 * Note, the pointer created here is to be destroyed when finished by

 * making a call to class_destroy().

/**

 * class_destroy - destroys a struct class structure

 * @cls: pointer to the struct class that is to be destroyed

 *

 * Note, the pointer to be destroyed must have been created with a call

 * to class_create().

/**

 * class_dev_iter_init - initialize class device iterator

 * @iter: class iterator to initialize

 * @class: the class we wanna iterate over

 * @start: the device to start iterating from, if any

 * @type: device_type of the devices to iterate over, NULL for all

 *

 * Initialize class iterator @iter such that it iterates over devices

 * of @class.  If @start is set, the list iteration will start there,

 * otherwise if it is NULL, the iteration starts at the beginning of

 * the list.

/**

 * class_dev_iter_next - iterate to the next device

 * @iter: class iterator to proceed

 *

 * Proceed @iter to the next device and return it.  Returns NULL if

 * iteration is complete.

 *

 * The returned device is referenced and won't be released till

 * iterator is proceed to the next device or exited.  The caller is

 * free to do whatever it wants to do with the device including

 * calling back into class code.

/**

 * class_dev_iter_exit - finish iteration

 * @iter: class iterator to finish

 *

 * Finish an iteration.  Always call this function after iteration is

 * complete whether the iteration ran till the end or not.

/**

 * class_for_each_device - device iterator

 * @class: the class we're iterating

 * @start: the device to start with in the list, if any.

 * @data: data for the callback

 * @fn: function to be called for each device

 *

 * Iterate over @class's list of devices, and call @fn for each,

 * passing it @data.  If @start is set, the list iteration will start

 * there, otherwise if it is NULL, the iteration starts at the

 * beginning of the list.

 *

 * We check the return of @fn each time. If it returns anything

 * other than 0, we break out and return that value.

 *

 * @fn is allowed to do anything including calling back into class

 * code.  There's no locking restriction.

/**

 * class_find_device - device iterator for locating a particular device

 * @class: the class we're iterating

 * @start: Device to begin with

 * @data: data for the match function

 * @match: function to check device

 *

 * This is similar to the class_for_each_dev() function above, but it

 * returns a reference to a device that is 'found' for later use, as

 * determined by the @match callback.

 *

 * The callback should return 0 if the device doesn't match and non-zero

 * if it does.  If the callback returns non-zero, this function will

 * return to the caller and not iterate over any more devices.

 *

 * Note, you will need to drop the reference with put_device() after use.

 *

 * @match is allowed to do anything including calling back into class

 * code.  There's no locking restriction.

/**

 * class_compat_register - register a compatibility class

 * @name: the name of the class

 *

 * Compatibility class are meant as a temporary user-space compatibility

 * workaround when converting a family of class devices to a bus devices.

/**

 * class_compat_unregister - unregister a compatibility class

 * @cls: the class to unregister

/**

 * class_compat_create_link - create a compatibility class device link to

 *			      a bus device

 * @cls: the compatibility class

 * @dev: the target bus device

 * @device_link: an optional device to which a "device" link should be created

	/*

	 * Optionally add a "device" link (typically to the parent), as a

	 * class device would have one and we want to provide as much

	 * backwards compatibility as possible.

/**

 * class_compat_remove_link - remove a compatibility class device link to

 *			      a bus device

 * @cls: the compatibility class

 * @dev: the target bus device

 * @device_link: an optional device to which a "device" link was previously

 * 		 created

 SPDX-License-Identifier: GPL-2.0

/*

 * MSI framework for platform devices

 *

 * Copyright (C) 2015 ARM Limited, All Rights Reserved.

 * Author: Marc Zyngier <marc.zyngier@arm.com>

/*

 * Internal data structure containing a (made up, but unique) devid

 * and the callback to write the MSI message.

 The devid allocator */

/*

 * Convert an msi_desc to a globaly unique identifier (per-device

 * devid + msi_desc position in the msi_list).

 Clean up the mess */

/**

 * platform_msi_create_irq_domain - Create a platform MSI interrupt domain

 * @fwnode:		Optional fwnode of the interrupt controller

 * @info:	MSI domain info

 * @parent:	Parent irq domain

 *

 * Updates the domain and chip ops and creates a platform MSI

 * interrupt domain.

 *

 * Returns:

 * A domain pointer or NULL in case of failure.

	/*

	 * Limit the number of interrupts to 2048 per device. Should we

	 * need to bump this up, DEV_ID_SHIFT should be adjusted

	 * accordingly (which would impact the max number of MSI

	 * capable devices).

 Already had a helping of MSI? Greed... */

/**

 * platform_msi_domain_alloc_irqs - Allocate MSI interrupts for @dev

 * @dev:		The device for which to allocate interrupts

 * @nvec:		The number of interrupts to allocate

 * @write_msi_msg:	Callback to write an interrupt message for @dev

 *

 * Returns:

 * Zero for success, or an error code in case of failure

/**

 * platform_msi_domain_free_irqs - Free MSI interrupts for @dev

 * @dev:	The device for which to free interrupts

/**

 * platform_msi_get_host_data - Query the private data associated with

 *                              a platform-msi domain

 * @domain:	The platform-msi domain

 *

 * Returns the private data provided when calling

 * platform_msi_create_device_domain.

/**

 * __platform_msi_create_device_domain - Create a platform-msi domain

 *

 * @dev:		The device generating the MSIs

 * @nvec:		The number of MSIs that need to be allocated

 * @is_tree:		flag to indicate tree hierarchy

 * @write_msi_msg:	Callback to write an interrupt message for @dev

 * @ops:		The hierarchy domain operations to use

 * @host_data:		Private data associated to this domain

 *

 * Returns an irqdomain for @nvec interrupts

/**

 * platform_msi_domain_free - Free interrupts associated with a platform-msi

 *                            domain

 *

 * @domain:	The platform-msi domain

 * @virq:	The base irq from which to perform the free operation

 * @nvec:	How many interrupts to free from @virq

/**

 * platform_msi_domain_alloc - Allocate interrupts associated with

 *			       a platform-msi domain

 *

 * @domain:	The platform-msi domain

 * @virq:	The base irq from which to perform the allocate operation

 * @nr_irqs:	How many interrupts to free from @virq

 *

 * Return 0 on success, or an error code on failure. Must be called

 * with irq_domain_mutex held (which can only be done as part of a

 * top-level interrupt allocation).

 SPDX-License-Identifier: GPL-2.0

/*

 * Arch specific cpu topology information

 *

 * Copyright (C) 2016, ARM Ltd.

 * Written by: Juri Lelli, ARM Ltd.

	/*

	 * Task scheduler behavior depends on frequency invariance support,

	 * either cpufreq or counter driven. If the support status changes as

	 * a result of counter initialisation and use, retrigger the build of

	 * scheduling domains to ensure the information is propagated properly.

	/*

	 * Avoid calling rebuild_sched_domains() unnecessarily if FIE is

	 * supported by cpufreq.

 Use ARCH provided counters whenever possible */

	/*

	 * Make sure all references to previous sft_data are dropped to avoid

	 * use-after-free races.

	/*

	 * If the use of counters for FIE is enabled, just return as we don't

	 * want to update the scale factor with information from CPUFREQ.

	 * Instead the scale factor will be updated from arch_scale_freq_tick.

/*

 * Updating the sched_domains can't be done directly from cpufreq callbacks

 * due to locking, so queue the work for later.

		/*

		 * Update freq_factor for calculating early boot cpu capacities.

		 * For non-clk CPU DVFS mechanism, there's no way to get the

		 * frequency value now, assuming they are running at the same

		 * frequency (by keeping the initial freq_factor value).

	/*

	 * on ACPI-based systems we need to use the default cpu capacity

	 * until we have the necessary code to parse the cpu capacity, so

	 * skip registering cpufreq notifier.

/*

 * This function returns the logic cpu number of the node.

 * There are basically three kinds of return values:

 * (1) logic cpu number which is > 0.

 * (2) -ENODEV when the device tree(DT) node is valid and found in the DT but

 * there is no possible logical CPU in the kernel to match. This happens

 * when CONFIG_NR_CPUS is configure to be smaller than the number of

 * CPU nodes in DT. We need to just ignore this case.

 * (3) -1 if the node does not exist in the device tree

	/*

	 * First check for child clusters; we currently ignore any

	 * information about the nesting of clusters and present the

	 * scheduler with a flat list of them.

 Now check for cores */

	/*

	 * When topology is provided cpu-map is essentially a root

	 * cluster with restricted subnodes.

	/*

	 * Check that all cores are in the topology; the SMP code will

	 * only mark cores described in the DT as possible.

/*

 * cpu topology table

 Find the smaller of NUMA, core or LLC siblings */

 not numa in package, lets use the package siblings */

 update core and thread sibling masks */

	/*

	 * Discard anything that was parsed if we hit an error so we

	 * don't use partial information.

 SPDX-License-Identifier: GPL-2.0+

/*

 * driver/base/topology.c - Populate sysfs with cpu topology information

 *

 * Written by: Zhang Yanmin, Intel Corporation

 *

 * Copyright (C) 2006, Intel Corp.

 *

 * All rights reserved.

 Add/Remove cpu_topology interface for CPU device */

 SPDX-License-Identifier: GPL-2.0

/*

 * drivers/base/dd.c - The core device/driver interactions.

 *

 * This file contains the (sometimes tricky) code that controls the

 * interactions between devices and drivers, which primarily includes

 * driver binding and unbinding.

 *

 * All of this code used to exist in drivers/base/bus.c, but was

 * relocated to here in the name of compartmentalization (since it wasn't

 * strictly code just for the 'struct bus_type'.

 *

 * Copyright (c) 2002-5 Patrick Mochel

 * Copyright (c) 2002-3 Open Source Development Labs

 * Copyright (c) 2007-2009 Greg Kroah-Hartman <gregkh@suse.de>

 * Copyright (c) 2007-2009 Novell Inc.

/*

 * Deferred Probe infrastructure.

 *

 * Sometimes driver probe order matters, but the kernel doesn't always have

 * dependency information which means some drivers will get probed before a

 * resource it depends on is available.  For example, an SDHCI driver may

 * first need a GPIO line from an i2c GPIO controller before it can be

 * initialized.  If a required resource is not available yet, a driver can

 * request probing to be deferred by returning -EPROBE_DEFER from its probe hook

 *

 * Deferred probe maintains two lists of devices, a pending list and an active

 * list.  A driver returning -EPROBE_DEFER causes the device to be added to the

 * pending list.  A successful driver probe will trigger moving all devices

 * from the pending to the active list so that the workqueue will eventually

 * retry them.

 *

 * The deferred_probe_mutex must be held any time the deferred_probe_*_list

 * of the (struct device*)->p->deferred_probe pointers are manipulated

 Save the async probe drivers' name from kernel cmdline */

/*

 * In some cases, like suspend to RAM or hibernation, It might be reasonable

 * to prohibit probing of devices as it could be unsafe.

 * Once defer_all_probes is true all drivers probes will be forcibly deferred.

/*

 * deferred_probe_work_func() - Retry probing devices in the active list.

	/*

	 * This block processes every device in the deferred 'active' list.

	 * Each device is removed from the active list and passed to

	 * bus_probe_device() to re-attempt the probe.  The loop continues

	 * until every device in the active list is removed and retried.

	 *

	 * Note: Once the device is removed from the list and the mutex is

	 * released, it is possible for the device get freed by another thread

	 * and cause a illegal pointer dereference.  This code uses

	 * get/put_device() to ensure the device structure cannot disappear

	 * from under our feet.

		/*

		 * Drop the mutex while probing each device; the probe path may

		 * manipulate the deferred list

		/*

		 * Force the device to the end of the dpm_list since

		 * the PM code assumes that the order we add things to

		 * the list is a good order for suspend but deferred

		 * probe makes that very unsafe.

/**

 * driver_deferred_probe_trigger() - Kick off re-probing deferred devices

 *

 * This functions moves all devices from the pending list to the active

 * list and schedules the deferred probe workqueue to process them.  It

 * should be called anytime a driver is successfully bound to a device.

 *

 * Note, there is a race condition in multi-threaded probe. In the case where

 * more than one device is probing at the same time, it is possible for one

 * probe to complete successfully while another is about to defer. If the second

 * depends on the first, then it will get put on the pending list after the

 * trigger event has already occurred and will be stuck there.

 *

 * The atomic 'deferred_trigger_count' is used to determine if a successful

 * trigger has occurred in the midst of probing a driver. If the trigger count

 * changes in the midst of a probe, then deferred processing should be triggered

 * again.

	/*

	 * A successful probe means that all the devices in the pending list

	 * should be triggered to be reprobed.  Move all the deferred devices

	 * into the active list so they can be retried by the workqueue

	/*

	 * Kick the re-probe thread.  It may already be scheduled, but it is

	 * safe to kick it again.

/**

 * device_block_probing() - Block/defer device's probes

 *

 *	It will disable probing of devices and defer their probes instead.

 sync with probes to avoid races. */

/**

 * device_unblock_probing() - Unblock/enable device's probes

 *

 *	It will restore normal behavior and trigger re-probing of deferred

 * devices.

/**

 * device_set_deferred_probe_reason() - Set defer probe reason message for device

 * @dev: the pointer to the struct device

 * @vaf: the pointer to va_format structure with message

/*

 * deferred_devs_show() - Show the devices in the deferred probe pending list.

/**

 * driver_deferred_probe_check_state() - Check deferred probe state

 * @dev: device to check

 *

 * Return:

 * -ENODEV if initcalls have completed and modules are disabled.

 * -ETIMEDOUT if the deferred probe timeout was set and has expired

 *  and modules are enabled.

 * -EPROBE_DEFER in other cases.

 *

 * Drivers or subsystems can opt-in to calling this function instead of directly

 * returning -EPROBE_DEFER.

/**

 * deferred_probe_initcall() - Enable probing of deferred devices

 *

 * We don't want to get in the way when the bulk of drivers are getting probed.

 * Instead, this initcall makes sure that deferred probing is delayed until

 * late_initcall time.

 Sort as many dependencies as possible before exiting initcalls */

	/*

	 * Trigger deferred probe again, this time we won't defer anything

	 * that is optional

/**

 * device_is_bound() - Check if device is bound to a driver

 * @dev: device to check

 *

 * Returns true if passed device has already finished probing successfully

 * against a driver.

 *

 * This function must be called with the device lock held.

	/*

	 * Make sure the device is no longer in one of the deferred lists and

	 * kick off retrying all pending devices

/**

 * device_bind_driver - bind a driver to one device.

 * @dev: device.

 *

 * Allow manual attachment of a driver to a device.

 * Caller must have already set @dev->driver.

 *

 * Note that this does not modify the bus reference count.

 * Please verify that is accounted for before calling this.

 * (It is ok to call with no other effort from a driver's probe() method.)

 *

 * This function must be called with the device lock held.

 *

 * Callers should prefer to use device_driver_attach() instead.

 Driver requested deferred probing */

 driver matched but the probe failed */

		/*

		 * Value of defer_all_probes can be set only by

		 * device_block_probing() which, in turn, will call

		 * wait_for_device_probe() right after that to avoid any races.

 If using pinctrl, bind pins now before probing */

		/*

		 * Return probe errors as positive values so that the callers

		 * can distinguish them from other errors.

/*

 * For initcall_debug, show the driver probe time.

/**

 * driver_probe_done

 * Determine if the probe sequence is finished or not.

 *

 * Should somehow figure out how to use a semaphore, not an atomic variable...

/**

 * wait_for_device_probe

 * Wait for device probing to be completed.

 wait for probe timeout */

 wait for the deferred probe workqueue to finish */

 wait for the known devices to complete their probing */

/**

 * driver_probe_device - attempt to bind device & driver together

 * @drv: driver to bind a device to

 * @dev: device to try to bind to the driver

 *

 * This function returns -ENODEV if the device is not registered, -EBUSY if it

 * already has a driver, 0 if the device is bound successfully and a positive

 * (inverted) error code for failures from the ->probe method.

 *

 * This function must be called with @dev lock held.  When called for a

 * USB interface, @dev->parent lock must be held as well.

 *

 * If the device has a parent, runtime-resume the parent before driver probing.

		/*

		 * Did a trigger occur while probing? Need to re-trigger if yes

 The option format is "driver_async_probe=drv_name1,drv_name2,..." */

	/*

	 * Indicates whether we are are considering asynchronous probing or

	 * not. Only initial binding after device or driver registration

	 * (including deferral processing) may be done asynchronously, the

	 * rest is always synchronous, as we expect it is being done by

	 * request from userspace.

	/*

	 * Indicates if we are binding synchronous or asynchronous drivers.

	 * When asynchronous probing is enabled we'll execute 2 passes

	 * over drivers: first pass doing synchronous probing and second

	 * doing asynchronous probing (if synchronous did not succeed -

	 * most likely because there was no driver requiring synchronous

	 * probing - and we found asynchronous driver during first pass).

	 * The 2 passes are done because we can't shoot asynchronous

	 * probe for given device and driver from bus_for_each_drv() since

	 * driver pointer is not guaranteed to stay valid once

	 * bus_for_each_drv() iterates to the next driver on the bus.

	/*

	 * We'll set have_async to 'true' if, while scanning for matching

	 * driver, we'll encounter one that requests asynchronous probing.

 no match */

 ret > 0 means positive match */

	/*

	 * Ignore errors returned by ->probe so that the next driver can try

	 * its luck.

	/*

	 * Check if device has already been removed or claimed. This may

	 * happen with driver loading, device discovery/registration,

	 * and deferred probe processing happens all at once with

	 * multiple threads.

			/*

			 * If we could not find appropriate driver

			 * synchronously and we are allowed to do

			 * async probes and there are drivers that

			 * want to probe asynchronously, we'll

			 * try them.

/**

 * device_attach - try to attach device to a driver.

 * @dev: device.

 *

 * Walk the list of drivers that the bus has and call

 * driver_probe_device() for each pair. If a compatible

 * pair is found, break out and return.

 *

 * Returns 1 if the device was bound to a driver;

 * 0 if no matching driver was found;

 * -ENODEV if the device is not registered.

 *

 * When called for a USB interface, @dev->parent lock must be held.

/*

 * __device_driver_lock - acquire locks needed to manipulate dev->drv

 * @dev: Device we will update driver info for

 * @parent: Parent device. Needed if the bus requires parent lock

 *

 * This function will take the required locks for manipulating dev->drv.

 * Normally this will just be the @dev lock, but when called for a USB

 * interface, @parent lock will be held as well.

/*

 * __device_driver_unlock - release locks needed to manipulate dev->drv

 * @dev: Device we will update driver info for

 * @parent: Parent device. Needed if the bus requires parent lock

 *

 * This function will release the required locks for manipulating dev->drv.

 * Normally this will just be the the @dev lock, but when called for a

 * USB interface, @parent lock will be released as well.

/**

 * device_driver_attach - attach a specific driver to a specific device

 * @drv: Driver to attach

 * @dev: Device to attach it to

 *

 * Manually attach driver to a device. Will acquire both @dev lock and

 * @dev->parent lock if needed. Returns 0 on success, -ERR on failure.

 also return probe errors as normal negative errnos */

	/*

	 * Lock device and try to bind to it. We drop the error

	 * here and always return 0, because we need to keep trying

	 * to bind to devices and some drivers will return an error

	 * simply if it didn't support the device.

	 *

	 * driver_probe_device() will spit a warning if there

	 * is an error.

 no match */

 ret > 0 means positive match */

		/*

		 * Instead of probing the device synchronously we will

		 * probe it asynchronously to allow for more parallelism.

		 *

		 * We only take the device lock here in order to guarantee

		 * that the dev->driver and async_driver fields are protected

/**

 * driver_attach - try to bind driver to devices.

 * @drv: driver.

 *

 * Walk the list of devices that the bus has on it and try to

 * match the driver with each one.  If driver_probe_device()

 * returns 0 and the @dev->driver is set, we've found a

 * compatible pair.

/*

 * __device_release_driver() must be called with @dev lock held.

 * When called for a USB interface, @dev->parent lock must be held as well.

			/*

			 * A concurrent invocation of the same function might

			 * have released the driver successfully while this one

			 * was waiting, so check for that.

/**

 * device_release_driver - manually detach device from driver.

 * @dev: device.

 *

 * Manually detach device from driver.

 * When called for a USB interface, @dev->parent lock must be held.

 *

 * If this function is to be called with @dev->parent lock held, ensure that

 * the device's consumers are unbound in advance or that their locks can be

 * acquired under the @dev->parent lock.

	/*

	 * If anyone calls device_release_driver() recursively from

	 * within their ->remove callback for the same device, they

	 * will deadlock right here.

/**

 * device_driver_detach - detach driver from a specific device

 * @dev: device to detach driver from

 *

 * Detach driver from device. Will acquire both @dev lock and @dev->parent

 * lock if needed.

/**

 * driver_detach - detach driver from all devices it controls.

 * @drv: driver.

 SPDX-License-Identifier: GPL-2.0

/*

 * attribute_container.c - implementation of a simple container for classes

 *

 * Copyright (c) 2005 - James Bottomley <James.Bottomley@steeleye.com>

 *

 * The basic idea here is to enable a device to be attached to an

 * aritrary numer of classes without having to allocate storage for them.

 * Instead, the contained classes select the devices they need to attach

 * to via a matching function.

/* This is a private structure used to tie the classdev and the

/**

 * attribute_container_classdev_to_container - given a classdev, return the container

 *

 * @classdev: the class device created by attribute_container_add_device.

 *

 * Returns the container associated with this classdev.

/**

 * attribute_container_register - register an attribute container

 *

 * @cont: The container to register.  This must be allocated by the

 *        callee and should also be zeroed by it.

/**

 * attribute_container_unregister - remove a container registration

 *

 * @cont: previously registered container to remove

 private function used as class release */

/**

 * attribute_container_add_device - see if any container is interested in dev

 *

 * @dev: device to add attributes to

 * @fn:	 function to trigger addition of class device.

 *

 * This function allocates storage for the class device(s) to be

 * attached to dev (one for each matching attribute_container).  If no

 * fn is provided, the code will simply register the class device via

 * device_add.  If a function is provided, it is expected to add

 * the class device at the appropriate time.  One of the things that

 * might be necessary is to allocate and initialise the classdev and

 * then add it a later time.  To do this, call this routine for

 * allocation and initialisation and then use

 * attribute_container_device_trigger() to call device_add() on

 * it.  Note: after this, the class device contains a reference to dev

 * which is not relinquished until the release of the classdev.

/* FIXME: can't break out of this unless klist_iter_exit is also

 * called before doing the break

/**

 * attribute_container_remove_device - make device eligible for removal.

 *

 * @dev:  The generic device

 * @fn:	  A function to call to remove the device

 *

 * This routine triggers device removal.  If fn is NULL, then it is

 * simply done via device_unregister (note that if something

 * still has a reference to the classdev, then the memory occupied

 * will not be freed until the classdev is released).  If you want a

 * two phase release: remove from visibility and then delete the

 * device, then you should use this routine with a fn that calls

 * device_del() and then use attribute_container_device_trigger()

 * to do the final put on the classdev.

 Attempt to undo the work partially done. */

/**

 * attribute_container_device_trigger_safe - execute a trigger for each

 * matching classdev or fail all of them.

 *

 * @dev:  The generic device to run the trigger for

 * @fn:   the function to execute for each classdev.

 * @undo: A function to undo the work previously done in case of error

 *

 * This function is a safe version of

 * attribute_container_device_trigger. It stops on the first error and

 * undo the partial work that has been done, on previous classdev.  It

 * is guaranteed that either they all succeeded, or none of them

 * succeeded.

/**

 * attribute_container_device_trigger - execute a trigger for each matching classdev

 *

 * @dev:  The generic device to run the trigger for

 * @fn:   the function to execute for each classdev.

 *

 * This function is for executing a trigger when you need to know both

 * the container and the classdev.  If you only care about the

 * container, then use attribute_container_trigger() instead.

/**

 * attribute_container_trigger - trigger a function for each matching container

 *

 * @dev:  The generic device to activate the trigger for

 * @fn:	  the function to trigger

 *

 * This routine triggers a function that only needs to know the

 * matching containers (not the classdev) associated with a device.

 * It is more lightweight than attribute_container_device_trigger, so

 * should be used in preference unless the triggering function

 * actually needs to know the classdev.

/**

 * attribute_container_add_attrs - add attributes

 *

 * @classdev: The class device

 *

 * This simply creates all the class device sysfs files from the

 * attributes listed in the container

/**

 * attribute_container_add_class_device - same function as device_add

 *

 * @classdev:	the class device to add

 *

 * This performs essentially the same function as device_add except for

 * attribute containers, namely add the classdev to the system and then

 * create the attribute files

/**

 * attribute_container_add_class_device_adapter - simple adapter for triggers

 *

 * @cont: the container to register.

 * @dev:  the generic device to activate the trigger for

 * @classdev:	the class device to add

 *

 * This function is identical to attribute_container_add_class_device except

 * that it is designed to be called from the triggers

/**

 * attribute_container_remove_attrs - remove any attribute files

 *

 * @classdev: The class device to remove the files from

 *

/**

 * attribute_container_class_device_del - equivalent of class_device_del

 *

 * @classdev: the class device

 *

 * This function simply removes all the attribute files and then calls

 * device_del.

/**

 * attribute_container_find_class_device - find the corresponding class_device

 *

 * @cont:	the container

 * @dev:	the generic device

 *

 * Looks up the device in the container's list of class devices and returns

 * the corresponding class_device.

 FIXME: must exit iterator then break */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2002-3 Patrick Mochel

 * Copyright (c) 2002-3 Open Source Development Labs

/**

 * driver_init - initialize driver model.

 *

 * Call the driver model init functions to initialize their

 * subsystems. Called early from init/main.c.

 These are the core pieces */

	/* These are also core pieces, but must come after the

	 * core core pieces.

 SPDX-License-Identifier: GPL-2.0

/*

 * devtmpfs - kernel-maintained tmpfs-based /dev

 *

 * Copyright (C) 2009, Kay Sievers <kay.sievers@vrfy.org>

 *

 * During bootup, before any driver core device is registered,

 * devtmpfs, a tmpfs-based filesystem is created. Every driver-core

 * device which requests a device node, will add a node in this

 * filesystem.

 * By default, all devices are named after the name of the device,

 * owned by root and have a default mode of 0600. Subsystems can

 * overwrite the default setting if needed.

 0 => delete */

 mark as kernel-created inode */

 parent directories do not exist, create them */

 mark as kernel-created inode */

 did we create it */

 does the dev_t match */

 ours */

			/*

			 * before unlinking this node, reset permissions

			 * of possible references like hardlinks

/*

 * If configured, or requested by the commandline, devtmpfs will be

 * auto-mounted after the kernel mounted the root filesystem.

 will traverse into overmounted root */

/*

 * The __ref is because devtmpfs_setup needs to be __init for the routines it

 * calls.  That call is done while devtmpfs_init, which is marked __init,

 * synchronously waits for it to complete.

/*

 * Create devtmpfs instance, driver-core devices will add their device

 * nodes here.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright(c) 2014 Intel Mobile Communications GmbH

 * Copyright(c) 2015 Intel Deutschland GmbH

 *

 * Author: Johannes Berg <johannes@sipsolutions.net>

 global disable flag, for security purposes */

 if data isn't read by userspace after 5 minutes then delete it */

	/*

	 * this seems racy, but I don't see a notifier or such on

	 * a struct device to know when it goes away?

	/*

	 * This essentially makes the attribute write-once, since you can't

	 * go back to not having it disabled. This is intentional, it serves

	 * as a system lockdown feature.

/**

 * dev_coredumpv - create device coredump with vmalloc data

 * @dev: the struct device for the crashed device

 * @data: vmalloc data containing the device coredump

 * @datalen: length of the data

 * @gfp: allocation flags

 *

 * This function takes ownership of the vmalloc'ed data and will free

 * it when it is no longer used. See dev_coredumpm() for more information.

/**

 * devcd_free_sgtable - free all the memory of the given scatterlist table

 * (i.e. both pages and scatterlist instances)

 * NOTE: if two tables allocated with devcd_alloc_sgtable and then chained

 * using the sg_chain function then that function should be called only once

 * on the chained table

 * @data: pointer to sg_table to free

/**

 * devcd_read_from_sgtable - copy data from sg_table to a given buffer

 * and return the number of bytes read

 * @buffer: the buffer to copy the data to it

 * @buf_len: the length of the buffer

 * @data: the scatterlist table to copy from

 * @offset: start copy from @offset@ bytes from the head of the data

 *	in the given scatterlist

 * @data_len: the length of the data in the sg_table

/**

 * dev_coredumpm - create device coredump with read/free methods

 * @dev: the struct device for the crashed device

 * @owner: the module that contains the read/free functions, use %THIS_MODULE

 * @data: data cookie for the @read/@free functions

 * @datalen: length of the data

 * @gfp: allocation flags

 * @read: function to read from the given buffer

 * @free: function to free the given buffer

 *

 * Creates a new device coredump for the given device. If a previous one hasn't

 * been read yet, the new coredump is discarded. The data lifetime is determined

 * by the device coredump framework and when it is no longer needed the @free

 * function will be called to free the data.

	/*

	 * These should normally not fail, but there is no problem

	 * continuing without the links, so just warn instead of

	 * failing.

/**

 * dev_coredumpsg - create device coredump that uses scatterlist as data

 * parameter

 * @dev: the struct device for the crashed device

 * @table: the dump data

 * @datalen: length of the data

 * @gfp: allocation flags

 *

 * Creates a new device coredump for the given device. If a previous one hasn't

 * been read yet, the new coredump is discarded. The data lifetime is determined

 * by the device coredump framework and when it is no longer needed

 * it will free the data.

 SPDX-License-Identifier: GPL-2.0

/*

 * firmware.c - firmware subsystem hoohaw.

 *

 * Copyright (c) 2002-3 Patrick Mochel

 * Copyright (c) 2002-3 Open Source Development Labs

 * Copyright (c) 2007 Greg Kroah-Hartman <gregkh@suse.de>

 * Copyright (c) 2007 Novell Inc.

 SPDX-License-Identifier: GPL-2.0

/*

 * platform.c - platform 'pseudo' bus for legacy devices

 *

 * Copyright (c) 2002-3 Patrick Mochel

 * Copyright (c) 2002-3 Open Source Development Labs

 *

 * Please see Documentation/driver-api/driver-model/platform.rst for more

 * information.

 For automatically allocated device IDs */

/**

 * platform_get_resource - get a resource for a device

 * @dev: platform device

 * @type: resource type

 * @num: resource index

 *

 * Return: a pointer to the resource or NULL on failure.

/**

 * devm_platform_get_and_ioremap_resource - call devm_ioremap_resource() for a

 *					    platform device and get resource

 *

 * @pdev: platform device to use both for memory resource lookup as well as

 *        resource management

 * @index: resource index

 * @res: optional output parameter to store a pointer to the obtained resource.

 *

 * Return: a pointer to the remapped memory or an ERR_PTR() encoded error code

 * on failure.

/**

 * devm_platform_ioremap_resource - call devm_ioremap_resource() for a platform

 *				    device

 *

 * @pdev: platform device to use both for memory resource lookup as well as

 *        resource management

 * @index: resource index

 *

 * Return: a pointer to the remapped memory or an ERR_PTR() encoded error code

 * on failure.

/**

 * devm_platform_ioremap_resource_byname - call devm_ioremap_resource for

 *					   a platform device, retrieve the

 *					   resource by name

 *

 * @pdev: platform device to use both for memory resource lookup as well as

 *	  resource management

 * @name: name of the resource

 *

 * Return: a pointer to the remapped memory or an ERR_PTR() encoded error code

 * on failure.

 CONFIG_HAS_IOMEM */

/**

 * platform_get_irq_optional - get an optional IRQ for a device

 * @dev: platform device

 * @num: IRQ number index

 *

 * Gets an IRQ for a platform device. Device drivers should check the return

 * value for errors so as to not pass a negative integer value to the

 * request_irq() APIs. This is the same as platform_get_irq(), except that it

 * does not print an error message if an IRQ can not be obtained.

 *

 * For example::

 *

 *		int irq = platform_get_irq_optional(pdev, 0);

 *		if (irq < 0)

 *			return irq;

 *

 * Return: non-zero IRQ number on success, negative error number on failure.

 sparc does not have irqs represented as IORESOURCE_IRQ resources */

	/*

	 * The resources may pass trigger flags to the irqs that need

	 * to be set up. It so happens that the trigger flags for

	 * IORESOURCE_BITS correspond 1-to-1 to the IRQF_TRIGGER*

	 * settings.

	/*

	 * For the index 0 interrupt, allow falling back to GpioInt

	 * resources. While a device could have both Interrupt and GpioInt

	 * resources, making this fallback ambiguous, in many common cases

	 * the device will only expose one IRQ, and this fallback

	 * allows a common code path across either kind of resource.

 Our callers expect -ENXIO for missing IRQs. */

/**

 * platform_get_irq - get an IRQ for a device

 * @dev: platform device

 * @num: IRQ number index

 *

 * Gets an IRQ for a platform device and prints an error message if finding the

 * IRQ fails. Device drivers should check the return value for errors so as to

 * not pass a negative integer value to the request_irq() APIs.

 *

 * For example::

 *

 *		int irq = platform_get_irq(pdev, 0);

 *		if (irq < 0)

 *			return irq;

 *

 * Return: non-zero IRQ number on success, negative error number on failure.

/**

 * platform_irq_count - Count the number of IRQs a platform device uses

 * @dev: platform device

 *

 * Return: Number of IRQs a platform device uses or EPROBE_DEFER

/**

 * devm_platform_get_irqs_affinity - devm method to get a set of IRQs for a

 *				device using an interrupt affinity descriptor

 * @dev: platform device pointer

 * @affd: affinity descriptor

 * @minvec: minimum count of interrupt vectors

 * @maxvec: maximum count of interrupt vectors

 * @irqs: pointer holder for IRQ numbers

 *

 * Gets a set of IRQs for a platform device, and updates IRQ afffinty according

 * to the passed affinity descriptor

 *

 * Return: Number of vectors on success, negative error number on failure.

/**

 * platform_get_resource_byname - get a resource for a device by name

 * @dev: platform device

 * @type: resource type

 * @name: resource name

/**

 * platform_get_irq_byname - get an IRQ for a device by name

 * @dev: platform device

 * @name: IRQ name

 *

 * Get an IRQ like platform_get_irq(), but then by name rather then by index.

 *

 * Return: non-zero IRQ number on success, negative error number on failure.

/**

 * platform_get_irq_byname_optional - get an optional IRQ for a device by name

 * @dev: platform device

 * @name: IRQ name

 *

 * Get an optional IRQ by name like platform_get_irq_byname(). Except that it

 * does not print an error message if an IRQ can not be obtained.

 *

 * Return: non-zero IRQ number on success, negative error number on failure.

/**

 * platform_add_devices - add a numbers of platform devices

 * @devs: array of platform devices to add

 * @num: number of platform devices in array

/*

 * Set up default DMA mask for platform devices if the they weren't

 * previously set by the architecture / DT.

/**

 * platform_device_put - destroy a platform device

 * @pdev: platform device to free

 *

 * Free all memory associated with a platform device.  This function must

 * _only_ be externally called in error cases.  All other usage is a bug.

/**

 * platform_device_alloc - create a platform device

 * @name: base name of the device we're adding

 * @id: instance id

 *

 * Create a platform device object which can have other objects attached

 * to it, and which will have attached objects freed when it is released.

/**

 * platform_device_add_resources - add resources to a platform device

 * @pdev: platform device allocated by platform_device_alloc to add resources to

 * @res: set of resources that needs to be allocated for the device

 * @num: number of resources

 *

 * Add a copy of the resources to the platform device.  The memory

 * associated with the resources will be freed when the platform device is

 * released.

/**

 * platform_device_add_data - add platform-specific data to a platform device

 * @pdev: platform device allocated by platform_device_alloc to add resources to

 * @data: platform specific data for this platform device

 * @size: size of platform specific data

 *

 * Add a copy of platform specific data to the platform device's

 * platform_data pointer.  The memory associated with the platform data

 * will be freed when the platform device is released.

/**

 * platform_device_add - add a platform device to device hierarchy

 * @pdev: platform device we're adding

 *

 * This is part 2 of platform_device_register(), though may be called

 * separately _iff_ pdev was allocated by platform_device_alloc().

		/*

		 * Automatically allocated device ID. We mark it as such so

		 * that we remember it must be freed, and we append a suffix

		 * to avoid namespace collision with explicit IDs.

/**

 * platform_device_del - remove a platform-level device

 * @pdev: platform device we're removing

 *

 * Note that this function will also release all memory- and port-based

 * resources owned by the device (@dev->resource).  This function must

 * _only_ be externally called in error cases.  All other usage is a bug.

/**

 * platform_device_register - add a platform-level device

 * @pdev: platform device we're adding

/**

 * platform_device_unregister - unregister a platform-level device

 * @pdev: platform device we're unregistering

 *

 * Unregistration is done in 2 steps. First we release all resources

 * and remove it from the subsystem, then we drop reference count by

 * calling platform_device_put().

/**

 * platform_device_register_full - add a platform-level device with

 * resources and platform-specific data

 *

 * @pdevinfo: data used to create device

 *

 * Returns &struct platform_device pointer on success, or ERR_PTR() on error.

/**

 * __platform_driver_register - register a driver for platform-level devices

 * @drv: platform driver structure

 * @owner: owning module/driver

/**

 * platform_driver_unregister - unregister a driver for platform-level devices

 * @drv: platform driver structure

/**

 * __platform_driver_probe - register driver for non-hotpluggable device

 * @drv: platform driver structure

 * @probe: the driver probe routine, probably from an __init section

 * @module: module which will be the owner of the driver

 *

 * Use this instead of platform_driver_register() when you know the device

 * is not hotpluggable and has already been registered, and you want to

 * remove its run-once probe() infrastructure from memory after the driver

 * has bound to the device.

 *

 * One typical use for this would be with drivers for controllers integrated

 * into system-on-chip processors, where the controller devices have been

 * configured as part of board setup.

 *

 * Note that this is incompatible with deferred probing.

 *

 * Returns zero if the driver registered and bound to a device, else returns

 * a negative error code and with the driver not registered.

	/*

	 * We have to run our probes synchronously because we check if

	 * we find any devices to bind to and exit with error if there

	 * are any.

	/*

	 * Prevent driver from requesting probe deferral to avoid further

	 * futile probe attempts.

 make sure driver won't have bind/unbind attributes */

 temporary section violation during probe() */

	/*

	 * Fixup that section violation, being paranoid about code scanning

	 * the list of drivers in order to probe new devices.  Check to see

	 * if the probe was successful, and make sure any forced probes of

	 * new devices fail.

/**

 * __platform_create_bundle - register driver and create corresponding device

 * @driver: platform driver structure

 * @probe: the driver probe routine, probably from an __init section

 * @res: set of resources that needs to be allocated for the device

 * @n_res: number of resources

 * @data: platform specific data for this platform device

 * @size: size of platform specific data

 * @module: module which will be the owner of the driver

 *

 * Use this in legacy-style modules that probe hardware directly and

 * register a single platform device and corresponding platform driver.

 *

 * Returns &struct platform_device pointer on success, or ERR_PTR() on error.

/**

 * __platform_register_drivers - register an array of platform drivers

 * @drivers: an array of drivers to register

 * @count: the number of drivers to register

 * @owner: module owning the drivers

 *

 * Registers platform drivers specified by an array. On failure to register a

 * driver, all previously registered drivers will be unregistered. Callers of

 * this API should use platform_unregister_drivers() to unregister drivers in

 * the reverse order.

 *

 * Returns: 0 on success or a negative error code on failure.

/**

 * platform_unregister_drivers - unregister an array of platform drivers

 * @drivers: an array of drivers to unregister

 * @count: the number of drivers to unregister

 *

 * Unregisters platform drivers specified by an array. This is typically used

 * to complement an earlier call to platform_register_drivers(). Drivers are

 * unregistered in the reverse order in which they were registered.

 CONFIG_PM_SLEEP */

 CONFIG_SUSPEND */

 CONFIG_HIBERNATE_CALLBACKS */

/* modalias support enables more hands-off userspace setup:

 * (a) environment variable lets new-style hotplug events work once system is

 *     fully running:  "modprobe $MODALIAS"

 * (b) sysfs attribute lets new-style coldplug recover from hotplug events

 *     mishandled before system is fully running:  "modprobe $(cat modalias)"

 We need to keep extra room for a newline */

/**

 * platform_match - bind platform device to platform driver.

 * @dev: device.

 * @drv: driver.

 *

 * Platform device IDs are assumed to be encoded like this:

 * "<name><instance>", where <name> is a short description of the type of

 * device, like "pci" or "floppy", and <instance> is the enumerated

 * instance of the device, like '0' or '42'.  Driver IDs are simply

 * "<name>".  So, extract the <name> from the platform_device structure,

 * and compare it against the name of the driver. Return whether they match

 * or not.

 When driver_override is set, only bind to the matching driver */

 Attempt an OF style match first */

 Then try ACPI style match */

 Then try to match against the id table */

 fall-back to driver name match */

 Some devices have extra OF data and an OF-style MODALIAS */

	/*

	 * A driver registered using platform_driver_probe() cannot be bound

	 * again later because the probe function usually lives in __init code

	 * and so is gone. For these drivers .probe is set to

	 * platform_probe_fail in __platform_driver_probe(). Don't even prepare

	 * clocks and PM domains for these to match the traditional behaviour.

/**

 * platform_find_device_by_driver - Find a platform device with a given

 * driver.

 * @start: The device to start the search from.

 * @drv: The device driver to look for.

 SPDX-License-Identifier: GPL-2.0

/*

 * drivers/base/core.c - core driver model code (device registration, etc)

 *

 * Copyright (c) 2002-3 Patrick Mochel

 * Copyright (c) 2002-3 Open Source Development Labs

 * Copyright (c) 2006 Greg Kroah-Hartman <gregkh@suse.de>

 * Copyright (c) 2006 Novell, Inc.

 for dma_default_coherent */

 Device links support. */

/**

 * fwnode_link_add - Create a link between two fwnode_handles.

 * @con: Consumer end of the link.

 * @sup: Supplier end of the link.

 *

 * Create a fwnode link between fwnode handles @con and @sup. The fwnode link

 * represents the detail that the firmware lists @sup fwnode as supplying a

 * resource to @con.

 *

 * The driver core will use the fwnode link to create a device link between the

 * two device objects corresponding to @con and @sup when they are created. The

 * driver core will automatically delete the fwnode link between @con and @sup

 * after doing that.

 *

 * Attempts to create duplicate links between the same pair of fwnode handles

 * are ignored and there is no reference counting.

/**

 * __fwnode_link_del - Delete a link between two fwnode_handles.

 * @link: the fwnode_link to be deleted

 *

 * The fwnode_link_lock needs to be held when this function is called.

/**

 * fwnode_links_purge_suppliers - Delete all supplier links of fwnode_handle.

 * @fwnode: fwnode whose supplier links need to be deleted

 *

 * Deletes all supplier links connecting directly to @fwnode.

/**

 * fwnode_links_purge_consumers - Delete all consumer links of fwnode_handle.

 * @fwnode: fwnode whose consumer links need to be deleted

 *

 * Deletes all consumer links connecting directly to @fwnode.

/**

 * fwnode_links_purge - Delete all links connected to a fwnode_handle.

 * @fwnode: fwnode whose links needs to be deleted

 *

 * Deletes all links connecting directly to a fwnode.

 Don't purge consumer links of an added child */

 !CONFIG_SRCU */

 !CONFIG_SRCU */

/**

 * device_is_dependent - Check if one device depends on another one

 * @dev: Device to check dependencies for.

 * @target: Device to check against.

 *

 * Check if @target depends on @dev or any device dependent on it (its child or

 * its consumer etc).  Return 1 if that is the case or 0 otherwise.

	/*

	 * The "ancestors" check is needed to catch the case when the target

	 * device has not been completely initialized yet and it is still

	 * missing from the list of children of its parent device.

			/*

			 * A consumer driver can create a link to a supplier

			 * that has not completed its probing yet as long as it

			 * knows that the supplier is already functional (for

			 * example, it has just acquired some resources from the

			 * supplier).

	/*

	 * Devices that have not been registered yet will be put to the ends

	 * of the lists during the registration, so skip them here.

/**

 * device_pm_move_to_tail - Move set of devices to the end of device lists

 * @dev: Device to move

 *

 * This is a device_reorder_to_tail() wrapper taking the requisite locks.

 *

 * It moves the @dev along with all of its children and all of its consumers

 * to the ends of the device_kset and dpm_list, recursively.

 Ensure that all references to the link object have been dropped. */

	/*

	 * It may take a while to complete this work because of the SRCU

	 * synchronization in device_link_release_fn() and if the consumer or

	 * supplier devices get deleted when it runs, so put it into the "long"

	 * workqueue.

/**

 * device_link_add - Create a link between two devices.

 * @consumer: Consumer end of the link.

 * @supplier: Supplier end of the link.

 * @flags: Link flags.

 *

 * The caller is responsible for the proper synchronization of the link creation

 * with runtime PM.  First, setting the DL_FLAG_PM_RUNTIME flag will cause the

 * runtime PM framework to take the link into account.  Second, if the

 * DL_FLAG_RPM_ACTIVE flag is set in addition to it, the supplier devices will

 * be forced into the active meta state and reference-counted upon the creation

 * of the link.  If DL_FLAG_PM_RUNTIME is not set, DL_FLAG_RPM_ACTIVE will be

 * ignored.

 *

 * If DL_FLAG_STATELESS is set in @flags, the caller of this function is

 * expected to release the link returned by it directly with the help of either

 * device_link_del() or device_link_remove().

 *

 * If that flag is not set, however, the caller of this function is handing the

 * management of the link over to the driver core entirely and its return value

 * can only be used to check whether or not the link is present.  In that case,

 * the DL_FLAG_AUTOREMOVE_CONSUMER and DL_FLAG_AUTOREMOVE_SUPPLIER device link

 * flags can be used to indicate to the driver core when the link can be safely

 * deleted.  Namely, setting one of them in @flags indicates to the driver core

 * that the link is not going to be used (by the given caller of this function)

 * after unbinding the consumer or supplier driver, respectively, from its

 * device, so the link can be deleted at that point.  If none of them is set,

 * the link will be maintained until one of the devices pointed to by it (either

 * the consumer or the supplier) is unregistered.

 *

 * Also, if DL_FLAG_STATELESS, DL_FLAG_AUTOREMOVE_CONSUMER and

 * DL_FLAG_AUTOREMOVE_SUPPLIER are not set in @flags (that is, a persistent

 * managed device link is being added), the DL_FLAG_AUTOPROBE_CONSUMER flag can

 * be used to request the driver core to automatically probe for a consumer

 * driver after successfully binding a driver to the supplier device.

 *

 * The combination of DL_FLAG_STATELESS and one of DL_FLAG_AUTOREMOVE_CONSUMER,

 * DL_FLAG_AUTOREMOVE_SUPPLIER, or DL_FLAG_AUTOPROBE_CONSUMER set in @flags at

 * the same time is invalid and will cause NULL to be returned upfront.

 * However, if a device link between the given @consumer and @supplier pair

 * exists already when this function is called for them, the existing link will

 * be returned regardless of its current type and status (the link's flags may

 * be modified then).  The caller of this function is then expected to treat

 * the link as though it has just been created, so (in particular) if

 * DL_FLAG_STATELESS was passed in @flags, the link needs to be released

 * explicitly when not needed any more (as stated above).

 *

 * A side effect of the link creation is re-ordering of dpm_list and the

 * devices_kset list by moving the consumer device and all devices depending

 * on it to the ends of these lists (that does not happen to devices that have

 * not been registered when this function is called).

 *

 * The supplier device is required to be registered when this function is called

 * and NULL will be returned if that is not the case.  The consumer device need

 * not be registered, however.

	/*

	 * If the supplier has not been fully registered yet or there is a

	 * reverse (non-SYNC_STATE_ONLY) dependency between the consumer and

	 * the supplier already in the graph, return NULL. If the link is a

	 * SYNC_STATE_ONLY link, we don't check for reverse dependencies

	 * because it only affects sync_state() callbacks.

	/*

	 * SYNC_STATE_ONLY links are useless once a consumer device has probed.

	 * So, only create it if the consumer hasn't probed yet.

	/*

	 * DL_FLAG_AUTOREMOVE_SUPPLIER indicates that the link will be needed

	 * longer than for DL_FLAG_AUTOREMOVE_CONSUMER and setting them both

	 * together doesn't make sense, so prefer DL_FLAG_AUTOREMOVE_SUPPLIER.

		/*

		 * If the life time of the link following from the new flags is

		 * longer than indicated by the flags of the existing link,

		 * update the existing link to stay around longer.

 Determine the initial link state. */

	/*

	 * Some callers expect the link creation during consumer driver probe to

	 * resume the supplier even without DL_FLAG_RPM_ACTIVE.

	/*

	 * Move the consumer and all of the devices depending on it to the end

	 * of dpm_list and the devices_kset list.

	 *

	 * It is necessary to hold dpm_list locked throughout all that or else

	 * we may end up suspending with a wrong ordering of it.

/**

 * device_link_del - Delete a stateless link between two devices.

 * @link: Device link to delete.

 *

 * The caller must ensure proper synchronization of this function with runtime

 * PM.  If the link was added multiple times, it needs to be deleted as often.

 * Care is required for hotplugged devices:  Their links are purged on removal

 * and calling device_link_del() is then no longer allowed.

/**

 * device_link_remove - Delete a stateless link between two devices.

 * @consumer: Consumer end of the link.

 * @supplier: Supplier end of the link.

 *

 * The caller must ensure proper synchronization of this function with runtime

 * PM.

/**

 * device_links_check_suppliers - Check presence of supplier drivers.

 * @dev: Consumer device.

 *

 * Check links from this device to any suppliers.  Walk the list of the device's

 * links to suppliers and see if all of them are available.  If not, simply

 * return -EPROBE_DEFER.

 *

 * We need to guarantee that the supplier will not go away after the check has

 * been positive here.  It only can go away in __device_release_driver() and

 * that function  checks the device's links to consumers.  This means we need to

 * mark the link as "consumer probe in progress" to make the supplier removal

 * wait for us to complete (or bad things may happen).

 *

 * Links without the DL_FLAG_MANAGED flag set are ignored.

	/*

	 * Device waiting for supplier to become available is not allowed to

	 * probe.

/**

 * __device_links_queue_sync_state - Queue a device for sync_state() callback

 * @dev: Device to call sync_state() on

 * @list: List head to queue the @dev on

 *

 * Queues a device for a sync_state() callback when the device links write lock

 * isn't held. This allows the sync_state() execution flow to use device links

 * APIs.  The caller must ensure this function is called with

 * device_links_write_lock() held.

 *

 * This function does a get_device() to make sure the device is not freed while

 * on this list.

 *

 * So the caller must also ensure that device_links_flush_sync_list() is called

 * as soon as the caller releases device_links_write_lock().  This is necessary

 * to make sure the sync_state() is called in a timely fashion and the

 * put_device() is called on this device.

	/*

	 * Set the flag here to avoid adding the same device to a list more

	 * than once. This can happen if new consumers get added to the device

	 * and probed before the list is flushed.

/**

 * device_links_flush_sync_list - Call sync_state() on a list of devices

 * @list: List of devices to call sync_state() on

 * @dont_lock_dev: Device for which lock is already held by the caller

 *

 * Calls sync_state() on all the devices that have been queued for it. This

 * function is used in conjunction with __device_links_queue_sync_state(). The

 * @dont_lock_dev parameter is useful when this function is called from a

 * context where a device lock is already held.

		/*

		 * Delete from deferred_sync list before queuing it to

		 * sync_list because defer_sync is used for both lists.

/**

 * device_links_force_bind - Prepares device to be force bound

 * @dev: Consumer device.

 *

 * device_bind_driver() force binds a device to a driver without calling any

 * driver probe functions. So the consumer really isn't going to wait for any

 * supplier before it's bound to the driver. We still want the device link

 * states to be sensible when this happens.

 *

 * In preparation for device_bind_driver(), this function goes through each

 * supplier device links and checks if the supplier is bound. If it is, then

 * the device link status is set to CONSUMER_PROBE. Otherwise, the device link

 * is dropped. Links without the DL_FLAG_MANAGED flag set are ignored.

/**

 * device_links_driver_bound - Update device links after probing its driver.

 * @dev: Device to update the links for.

 *

 * The probe has been successful, so update links from this device to any

 * consumers by changing their status to "available".

 *

 * Also change the status of @dev's links to suppliers to "active".

 *

 * Links without the DL_FLAG_MANAGED flag set are ignored.

	/*

	 * If a device binds successfully, it's expected to have created all

	 * the device links it needs to or make new device links as it needs

	 * them. So, fw_devlink no longer needs to create device links to any

	 * of the device's suppliers.

	 *

	 * Also, if a child firmware node of this bound device is not added as

	 * a device by now, assume it is never going to be added and make sure

	 * other devices don't defer probe indefinitely by waiting for such a

	 * child device.

		/*

		 * Links created during consumer probe may be in the "consumer

		 * probe" state to start with if the supplier is still probing

		 * when they are created and they may become "active" if the

		 * consumer probe returns first.  Skip them here.

			/*

			 * When DL_FLAG_SYNC_STATE_ONLY is set, it means no

			 * other DL_MANAGED_LINK_FLAGS have been set. So, it's

			 * save to drop the managed link completely.

		/*

		 * This needs to be done even for the deleted

		 * DL_FLAG_SYNC_STATE_ONLY device link in case it was the last

		 * device link that was preventing the supplier from getting a

		 * sync_state() call.

/**

 * __device_links_no_driver - Update links of a device without a driver.

 * @dev: Device without a drvier.

 *

 * Delete all non-persistent links from this device to any suppliers.

 *

 * Persistent links stay around, but their status is changed to "available",

 * unless they already are in the "supplier unbind in progress" state in which

 * case they need not be updated.

 *

 * Links without the DL_FLAG_MANAGED flag set are ignored.

/**

 * device_links_no_driver - Update links after failing driver probe.

 * @dev: Device whose driver has just failed to probe.

 *

 * Clean up leftover links to consumers for @dev and invoke

 * %__device_links_no_driver() to update links to suppliers for it as

 * appropriate.

 *

 * Links without the DL_FLAG_MANAGED flag set are ignored.

		/*

		 * The probe has failed, so if the status of the link is

		 * "consumer probe" or "active", it must have been added by

		 * a probing consumer while this device was still probing.

		 * Change its state to "dormant", as it represents a valid

		 * relationship, but it is not functionally meaningful.

/**

 * device_links_driver_cleanup - Update links after driver removal.

 * @dev: Device whose driver has just gone away.

 *

 * Update links to consumers for @dev by changing their status to "dormant" and

 * invoke %__device_links_no_driver() to update links to suppliers for it as

 * appropriate.

 *

 * Links without the DL_FLAG_MANAGED flag set are ignored.

		/*

		 * autoremove the links between this @dev and its consumer

		 * devices that are not active, i.e. where the link state

		 * has moved to DL_STATE_SUPPLIER_UNBIND.

/**

 * device_links_busy - Check if there are any busy links to consumers.

 * @dev: Device to check.

 *

 * Check each consumer of the device and return 'true' if its link's status

 * is one of "consumer probe" or "active" (meaning that the given consumer is

 * probing right now or its driver is present).  Otherwise, change the link

 * state to "supplier unbind" to prevent the consumer from being probed

 * successfully going forward.

 *

 * Return 'false' if there are no probing or active consumers.

 *

 * Links without the DL_FLAG_MANAGED flag set are ignored.

/**

 * device_links_unbind_consumers - Force unbind consumers of the given device.

 * @dev: Device to unbind the consumers of.

 *

 * Walk the list of links to consumers for @dev and if any of them is in the

 * "consumer probe" state, wait for all device probes in progress to complete

 * and start over.

 *

 * If that's not the case, change the status of the link to "supplier unbind"

 * and check if the link was in the "active" state.  If so, force the consumer

 * driver to unbind and start over (the consumer will not re-probe as we have

 * changed the state of the link already).

 *

 * Links without the DL_FLAG_MANAGED flag set are ignored.

/**

 * device_links_purge - Delete existing links to other devices.

 * @dev: Target device.

	/*

	 * Delete all of the remaining links from this device to any other

	 * devices (either consumers or suppliers).

/**

 * fw_devlink_relax_cycle - Convert cyclic links to SYNC_STATE_ONLY links

 * @con: Device to check dependencies for.

 * @sup: Device to check against.

 *

 * Check if @sup depends on @con or any device dependent on it (its child or

 * its consumer etc).  When such a cyclic dependency is found, convert all

 * device links created solely by fw_devlink into SYNC_STATE_ONLY device links.

 * This is the equivalent of doing fw_devlink=permissive just between the

 * devices in the cycle. We need to do this because, at this point, fw_devlink

 * can't tell which of these dependencies is not a real dependency.

 *

 * Return 1 if a cycle is found. Otherwise, return 0.

/**

 * fw_devlink_create_devlink - Create a device link from a consumer to fwnode

 * @con: consumer device for the device link

 * @sup_handle: fwnode handle of supplier

 * @flags: devlink flags

 *

 * This function will try to create a device link between the consumer device

 * @con and the supplier device represented by @sup_handle.

 *

 * The supplier has to be provided as a fwnode because incorrect cycles in

 * fwnode links can sometimes cause the supplier device to never be created.

 * This function detects such cases and returns an error if it cannot create a

 * device link from the consumer to a missing supplier.

 *

 * Returns,

 * 0 on successfully creating a device link

 * -EINVAL if the device link cannot be created as expected

 * -EAGAIN if the device link cannot be created right now, but it may be

 *  possible to do that in the future

	/*

	 * In some cases, a device P might also be a supplier to its child node

	 * C. However, this would defer the probe of C until the probe of P

	 * completes successfully. This is perfectly fine in the device driver

	 * model. device_add() doesn't guarantee probe completion of the device

	 * by the time it returns.

	 *

	 * However, there are a few drivers that assume C will finish probing

	 * as soon as it's added and before P finishes probing. So, we provide

	 * a flag to let fw_devlink know not to delay the probe of C until the

	 * probe of P completes successfully.

	 *

	 * When such a flag is set, we can't create device links where P is the

	 * supplier of C as that would delay the probe of C.

		/*

		 * If it's one of those drivers that don't actually bind to

		 * their device using driver core, then don't wait on this

		 * supplier device indefinitely.

		/*

		 * If this fails, it is due to cycles in device links.  Just

		 * give up on this link and treat it as invalid.

 Supplier that's already initialized without a struct device. */

	/*

	 * DL_FLAG_SYNC_STATE_ONLY doesn't block probing and supports

	 * cycles. So cycle detection isn't necessary and shouldn't be

	 * done.

	/*

	 * If we can't find the supplier device from its fwnode, it might be

	 * due to a cyclic dependency between fwnodes. Some of these cycles can

	 * be broken by applying logic. Check for these types of cycles and

	 * break them so that devices in the cycle probe properly.

	 *

	 * If the supplier's parent is dependent on the consumer, then the

	 * consumer and supplier have a cyclic dependency. Since fw_devlink

	 * can't tell which of the inferred dependencies are incorrect, don't

	 * enforce probe ordering between any of the devices in this cyclic

	 * dependency. Do this by relaxing all the fw_devlink device links in

	 * this cycle and by treating the fwnode link between the consumer and

	 * the supplier as an invalid dependency.

		/*

		 * Can't check for cycles or no cycles. So let's try

		 * again later.

/**

 * __fw_devlink_link_to_consumers - Create device links to consumers of a device

 * @dev: Device that needs to be linked to its consumers

 *

 * This function looks at all the consumer fwnodes of @dev and creates device

 * links between the consumer device and @dev (supplier).

 *

 * If the consumer device has not been added yet, then this function creates a

 * SYNC_STATE_ONLY link between @dev (supplier) and the closest ancestor device

 * of the consumer fwnode. This is necessary to make sure @dev doesn't get a

 * sync_state() callback before the real consumer device gets to be added and

 * then probed.

 *

 * Once device links are created from the real consumer to @dev (supplier), the

 * fwnode links are deleted.

		/*

		 * If consumer device is not available yet, make a "proxy"

		 * SYNC_STATE_ONLY link from the consumer's parent device to

		 * the supplier device. This is necessary to make sure the

		 * supplier doesn't get a sync_state() callback before the real

		 * consumer can create a device link to the supplier.

		 *

		 * This proxy link step is needed to handle the case where the

		 * consumer's parent device is added before the supplier.

			/*

			 * However, if the consumer's parent device is also the

			 * parent of the supplier, don't create a

			 * consumer-supplier link from the parent to its child

			 * device. Such a dependency is impossible.

/**

 * __fw_devlink_link_to_suppliers - Create device links to suppliers of a device

 * @dev: The consumer device that needs to be linked to its suppliers

 * @fwnode: Root of the fwnode tree that is used to create device links

 *

 * This function looks at all the supplier fwnodes of fwnode tree rooted at

 * @fwnode and creates device links between @dev (consumer) and all the

 * supplier devices of the entire fwnode tree at @fwnode.

 *

 * The function creates normal (non-SYNC_STATE_ONLY) device links between @dev

 * and the real suppliers of @dev. Once these device links are created, the

 * fwnode links are deleted. When such device links are successfully created,

 * this function is called recursively on those supplier devices. This is

 * needed to detect and break some invalid cycles in fwnode links.  See

 * fw_devlink_create_devlink() for more details.

 *

 * In addition, it also looks at all the suppliers of the entire fwnode tree

 * because some of the child devices of @dev that have not been added yet

 * (because @dev hasn't probed) might already have their suppliers added to

 * driver core. So, this function creates SYNC_STATE_ONLY device links between

 * @dev (consumer) and these suppliers to make sure they don't execute their

 * sync_state() callbacks before these child devices have a chance to create

 * their device links. The fwnode links that correspond to the child devices

 * aren't delete because they are needed later to create the device links

 * between the real consumer and supplier devices.

 If no device link was created, nothing more to do. */

		/*

		 * If a device link was successfully created to a supplier, we

		 * now need to try and link the supplier to all its suppliers.

		 *

		 * This is needed to detect and delete false dependencies in

		 * fwnode links that haven't been converted to a device link

		 * yet. See comments in fw_devlink_create_devlink() for more

		 * details on the false dependency.

		 *

		 * Without deleting these false dependencies, some devices will

		 * never probe because they'll keep waiting for their false

		 * dependency fwnode links to be converted to device links.

	/*

	 * Make "proxy" SYNC_STATE_ONLY device links to represent the needs of

	 * all the descendants. This proxy link step is needed to handle the

	 * case where the supplier is added before the consumer's parent device

	 * (@dev).

 Device links support end. */

 Avoid busy looping (5 ms of sleep should do). */

/**

 * dev_driver_string - Return a device's driver name, if at all possible

 * @dev: struct device to get the name of

 *

 * Will return the device's driver's name if it is bound to a device.  If

 * the device is not bound to a driver, it will return the name of the bus

 * it is attached to.  If it is not attached to a bus either, an empty

 * string will be returned.

	/* dev->driver can change to NULL underneath us because of unbinding,

	 * so be careful about accessing it.  dev->bus and dev->class should

	 * never change once they are set, so they don't need special care.

 Always return full write size even if we didn't consume all */

 Always return full write size even if we didn't consume all */

/**

 * device_release - free device structure.

 * @kobj: device's kobject.

 *

 * This is called once the reference count for the object

 * reaches 0. We forward the call to the device's release

 * method, which should handle actually freeing the structure.

	/*

	 * Some platform devices are driven without driver attached

	 * and managed resources may have been acquired.  Make sure

	 * all resources are released.

	 *

	 * Drivers still can add resources into device after device

	 * is deleted but alive, so release devres here to avoid

	 * possible memory leak.

 add device node properties if present */

 Add common DT information about the device */

 have the bus specific function add its stuff */

 have the class specific function add its stuff */

 have the device type specific function add its stuff */

 search the kset, the device belongs to */

 respect filter */

 let the kset specific function add its keys */

 copy keys to file */

/**

 * devm_device_add_group - given a device, create a managed attribute group

 * @dev:	The device to create the group for

 * @grp:	The attribute group to create

 *

 * This function creates a group for the first time.  It will explicitly

 * warn and error if any of the attribute files being created already exist.

 *

 * Returns 0 on success or error code on failure.

/**

 * devm_device_remove_group: remove a managed group from a device

 * @dev:	device to remove the group from

 * @grp:	group to remove

 *

 * This function removes a group of attributes from a device. The attributes

 * previously have to have been created for this group, otherwise it will fail.

 cast away const */ (void *)grp));

/**

 * devm_device_add_groups - create a bunch of managed attribute groups

 * @dev:	The device to create the group for

 * @groups:	The attribute groups to create, NULL terminated

 *

 * This function creates a bunch of managed attribute groups.  If an error

 * occurs when creating a group, all previously created groups will be

 * removed, unwinding everything back to the original state when this

 * function was called.  It will explicitly warn and error if any of the

 * attribute files being created already exist.

 *

 * Returns 0 on success or error code from sysfs_create_group on failure.

/**

 * devm_device_remove_groups - remove a list of managed groups

 *

 * @dev:	The device for the groups to be removed from

 * @groups:	NULL terminated list of groups to be removed

 *

 * If groups is not NULL, remove the specified groups from the device.

 cast away const */ (void *)groups));

 /sys/devices/ */

/**

 * devices_kset_move_before - Move device in the devices_kset's list.

 * @deva: Device to move.

 * @devb: Device @deva should come before.

/**

 * devices_kset_move_after - Move device in the devices_kset's list.

 * @deva: Device to move

 * @devb: Device @deva should come after.

/**

 * devices_kset_move_last - move the device to the end of devices_kset's list.

 * @dev: device to move

/**

 * device_create_file - create sysfs attribute file for device.

 * @dev: device.

 * @attr: device attribute descriptor.

/**

 * device_remove_file - remove sysfs attribute file.

 * @dev: device.

 * @attr: device attribute descriptor.

/**

 * device_remove_file_self - remove sysfs attribute file from its own method.

 * @dev: device.

 * @attr: device attribute descriptor.

 *

 * See kernfs_remove_self() for details.

/**

 * device_create_bin_file - create sysfs binary attribute file for device.

 * @dev: device.

 * @attr: device binary attribute descriptor.

/**

 * device_remove_bin_file - remove sysfs binary attribute file

 * @dev: device.

 * @attr: device binary attribute descriptor.

/**

 * device_initialize - init device structure.

 * @dev: device.

 *

 * This prepares the device for use by other layers by initializing

 * its fields.

 * It is the first half of device_register(), if called by

 * that function, though it can also be called separately, so one

 * may use @dev's fields. In particular, get_device()/put_device()

 * may be used for reference counting of @dev after calling this

 * function.

 *

 * All fields in @dev must be initialized by the caller to 0, except

 * for those explicitly set to some other value.  The simplest

 * approach is to use kzalloc() to allocate the structure containing

 * @dev.

 *

 * NOTE: Use put_device() to give up your reference instead of freeing

 * @dev directly once you have called this function.

 block disks show up in /sys/block */

		/*

		 * If we have no parent, we live in "virtual".

		 * Class-devices with a non class-device as parent, live

		 * in a "glue" directory to prevent namespace collisions.

 find our class-directory at the parent and reference it */

 or create a new class-directory at the parent device */

 do not emit an uevent for this simple "glue" directory */

 subsystems can specify a default root directory for their devices */

/*

 * make sure cleaning up dir as the last step, we need to make

 * sure .release handler of kobject is run with holding the

 * global lock

 see if we live in a "glue" directory */

	/**

	 * There is a race condition between removing glue directory

	 * and adding a new device under the glue directory.

	 *

	 * CPU1:                                         CPU2:

	 *

	 * device_add()

	 *   get_device_parent()

	 *     class_dir_create_and_add()

	 *       kobject_add_internal()

	 *         create_dir()    // create glue_dir

	 *

	 *                                               device_add()

	 *                                                 get_device_parent()

	 *                                                   kobject_get() // get glue_dir

	 *

	 * device_del()

	 *   cleanup_glue_dir()

	 *     kobject_del(glue_dir)

	 *

	 *                                               kobject_add()

	 *                                                 kobject_add_internal()

	 *                                                   create_dir() // in glue_dir

	 *                                                     sysfs_create_dir_ns()

	 *                                                       kernfs_create_dir_ns(sd)

	 *

	 *       sysfs_remove_dir() // glue_dir->sd=NULL

	 *       sysfs_put()        // free glue_dir->sd

	 *

	 *                                                         // sd is freed

	 *                                                         kernfs_new_node(sd)

	 *                                                           kernfs_get(glue_dir)

	 *                                                           kernfs_add_one()

	 *                                                           kernfs_put()

	 *

	 * Before CPU1 remove last child device under glue dir, if CPU2 add

	 * a new device under glue dir, the glue_dir kobject reference count

	 * will be increase to 2 in kobject_get(k). And CPU2 has been called

	 * kernfs_create_dir_ns(). Meanwhile, CPU1 call sysfs_remove_dir()

	 * and sysfs_put(). This result in glue_dir->sd is freed.

	 *

	 * Then the CPU2 will see a stale "empty" but still potentially used

	 * glue dir around in kernfs_new_node().

	 *

	 * In order to avoid this happening, we also should make sure that

	 * kernfs_node for glue_dir is released in CPU1 only when refcount

	 * for glue_dir kobj is 1.

 An error here doesn't warrant bringing down the device */

 /sys/block has directories and does not need symlinks */

 link in the class directory pointing to the device */

/**

 * dev_set_name - set a device name

 * @dev: device

 * @fmt: format string for the device's name

/**

 * device_to_dev_kobj - select a /sys/dev/ directory for the device

 * @dev: device

 *

 * By default we select char/ for new entries.  Setting class->dev_obj

 * to NULL prevents an entry from being created.  class->dev_kobj must

 * be set (or cleared) before any devices are registered to the class

 * otherwise device_create_sys_dev_entry() and

 * device_remove_sys_dev_entry() will disagree about the presence of

 * the link.

/**

 * device_add - add device to device hierarchy.

 * @dev: device.

 *

 * This is part 2 of device_register(), though may be called

 * separately _iff_ device_initialize() has been called separately.

 *

 * This adds @dev to the kobject hierarchy via kobject_add(), adds it

 * to the global and sibling lists for the device, then

 * adds it to the other relevant subsystems of the driver model.

 *

 * Do not call this routine or device_register() more than once for

 * any device structure.  The driver model core is not designed to work

 * with devices that get unregistered and then spring back to life.

 * (Among other things, it's very hard to guarantee that all references

 * to the previous incarnation of @dev have been dropped.)  Allocate

 * and register a fresh new struct device instead.

 *

 * NOTE: _Never_ directly free @dev after calling this function, even

 * if it returned an error! Always use put_device() to give up your

 * reference instead.

 *

 * Rule of thumb is: if device_add() succeeds, you should call

 * device_del() when you want to get rid of it. If device_add() has

 * *not* succeeded, use *only* put_device() to drop the reference

 * count.

	/*

	 * for statically allocated devices, which should all be converted

	 * some day, we need to initialize the name. We prevent reading back

	 * the name, and force the use of dev_name()

 subsystems can specify simple device enumeration */

 use parent numa_node */

 first, register with generic layer. */

 we require the name to be set before, and pass NULL */

 notify platform of device entry */

	/* Notify clients of device addition.  This call must come

	 * after dpm_sysfs_add() and before kobject_uevent().

	/*

	 * Check if any of the other devices (consumers) have been waiting for

	 * this device (supplier) to be added so that they can create a device

	 * link to it.

	 *

	 * This needs to happen after device_pm_add() because device_link_add()

	 * requires the supplier be registered before it's called.

	 *

	 * But this also needs to happen before bus_probe_device() to make sure

	 * waiting consumers can link to it before the driver is bound to the

	 * device and the driver sync_state callback is called for this device.

	/*

	 * If all driver registration is done and a newly added device doesn't

	 * match with any driver, don't block its consumers from probing in

	 * case the consumer device is able to operate without this supplier.

 tie the class to the device */

 notify any interfaces that the device is here */

/**

 * device_register - register a device with the system.

 * @dev: pointer to the device structure

 *

 * This happens in two clean steps - initialize the device

 * and add it to the system. The two steps can be called

 * separately, but this is the easiest and most common.

 * I.e. you should only call the two helpers separately if

 * have a clearly defined need to use and refcount the device

 * before it is added to the hierarchy.

 *

 * For more information, see the kerneldoc for device_initialize()

 * and device_add().

 *

 * NOTE: _Never_ directly free @dev after calling this function, even

 * if it returned an error! Always use put_device() to give up the

 * reference initialized in this function instead.

/**

 * get_device - increment reference count for device.

 * @dev: device.

 *

 * This simply forwards the call to kobject_get(), though

 * we do take care to provide for the case that we get a NULL

 * pointer passed in.

/**

 * put_device - decrement reference count.

 * @dev: device in question.

 might_sleep(); */

	/*

	 * Require the device lock and set the "dead" flag to guarantee that

	 * the update behavior is consistent with the other bitfields near

	 * it and that we cannot have an asynchronous probe routine trying

	 * to run while we are tearing out the bus/class/sysfs from

	 * underneath the device.

/**

 * device_del - delete device from system.

 * @dev: device.

 *

 * This is the first part of the device unregistration

 * sequence. This removes the device from the lists we control

 * from here, has it removed from the other driver model

 * subsystems it was added to in device_add(), and removes it

 * from the kobject hierarchy.

 *

 * NOTE: this should be called manually _iff_ device_add() was

 * also called manually.

	/* Notify clients of device removal.  This call must come

	 * before dpm_sysfs_remove().

 notify any interfaces that the device is now gone */

 remove the device from the class list */

/**

 * device_unregister - unregister device from system.

 * @dev: device going away.

 *

 * We do this in two parts, like we do device_register(). First,

 * we remove it from all the subsystems with device_del(), then

 * we decrement the reference count via put_device(). If that

 * is the final reference count, the device will be cleaned up

 * via device_release() above. Otherwise, the structure will

 * stick around until the final reference to the device is dropped.

/**

 * device_get_devnode - path of device node file

 * @dev: device

 * @mode: returned file access mode

 * @uid: returned file owner

 * @gid: returned file group

 * @tmp: possibly allocated string

 *

 * Return the relative path of a possible device node.

 * Non-default names may need to allocate a memory to compose

 * a name. This memory is returned in tmp and needs to be

 * freed by the caller.

 the device type may provide a specific name */

 the class may provide a specific name */

 return name without allocation, tmp == NULL */

 replace '!' in the name with '/' */

/**

 * device_for_each_child - device child iterator.

 * @parent: parent struct device.

 * @fn: function to be called for each device.

 * @data: data for the callback.

 *

 * Iterate over @parent's child devices, and call @fn for each,

 * passing it @data.

 *

 * We check the return of @fn each time. If it returns anything

 * other than 0, we break out and return that value.

/**

 * device_for_each_child_reverse - device child iterator in reversed order.

 * @parent: parent struct device.

 * @fn: function to be called for each device.

 * @data: data for the callback.

 *

 * Iterate over @parent's child devices, and call @fn for each,

 * passing it @data.

 *

 * We check the return of @fn each time. If it returns anything

 * other than 0, we break out and return that value.

/**

 * device_find_child - device iterator for locating a particular device.

 * @parent: parent struct device

 * @match: Callback function to check device

 * @data: Data to pass to match function

 *

 * This is similar to the device_for_each_child() function above, but it

 * returns a reference to a device that is 'found' for later use, as

 * determined by the @match callback.

 *

 * The callback should return 0 if the device doesn't match and non-zero

 * if it does.  If the callback returns non-zero and a reference to the

 * current device can be obtained, this function will return to the caller

 * and not iterate over any more devices.

 *

 * NOTE: you will need to drop the reference with put_device() after use.

/**

 * device_find_child_by_name - device iterator for locating a child device.

 * @parent: parent struct device

 * @name: name of the child device

 *

 * This is similar to the device_find_child() function above, but it

 * returns a reference to a device that has the name @name.

 *

 * NOTE: you will need to drop the reference with put_device() after use.

/**

 * device_offline - Prepare the device for hot-removal.

 * @dev: Device to be put offline.

 *

 * Execute the device bus type's .offline() callback, if present, to prepare

 * the device for a subsequent hot-removal.  If that succeeds, the device must

 * not be used until either it is removed or its bus type's .online() callback

 * is executed.

 *

 * Call under device_hotplug_lock.

/**

 * device_online - Put the device back online after successful device_offline().

 * @dev: Device to be put back online.

 *

 * If device_offline() has been successfully executed for @dev, but the device

 * has not been removed subsequently, execute its bus type's .online() callback

 * to indicate that the device can be used again.

 *

 * Call under device_hotplug_lock.

/**

 * __root_device_register - allocate and register a root device

 * @name: root device name

 * @owner: owner module of the root device, usually THIS_MODULE

 *

 * This function allocates a root device and registers it

 * using device_register(). In order to free the returned

 * device, use root_device_unregister().

 *

 * Root devices are dummy devices which allow other devices

 * to be grouped under /sys/devices. Use this function to

 * allocate a root device and then use it as the parent of

 * any device which should appear under /sys/devices/{name}

 *

 * The /sys/devices/{name} directory will also contain a

 * 'module' symlink which points to the @owner directory

 * in sysfs.

 *

 * Returns &struct device pointer on success, or ERR_PTR() on error.

 *

 * Note: You probably want to use root_device_register().

 gotta find a "cleaner" way to do this */

/**

 * root_device_unregister - unregister and free a root device

 * @dev: device going away

 *

 * This function unregisters and cleans up a device that was created by

 * root_device_register().

/**

 * device_create - creates a device and registers it with sysfs

 * @class: pointer to the struct class that this device should be registered to

 * @parent: pointer to the parent struct device of this new device, if any

 * @devt: the dev_t for the char device to be added

 * @drvdata: the data to be added to the device for callbacks

 * @fmt: string for the device's name

 *

 * This function can be used by char device classes.  A struct device

 * will be created in sysfs, registered to the specified class.

 *

 * A "dev" file will be created, showing the dev_t for the device, if

 * the dev_t is not 0,0.

 * If a pointer to a parent struct device is passed in, the newly created

 * struct device will be a child of that device in sysfs.

 * The pointer to the struct device will be returned from the call.

 * Any further sysfs files that might be required can be created using this

 * pointer.

 *

 * Returns &struct device pointer on success, or ERR_PTR() on error.

 *

 * Note: the struct class passed to this function must have previously

 * been created with a call to class_create().

/**

 * device_create_with_groups - creates a device and registers it with sysfs

 * @class: pointer to the struct class that this device should be registered to

 * @parent: pointer to the parent struct device of this new device, if any

 * @devt: the dev_t for the char device to be added

 * @drvdata: the data to be added to the device for callbacks

 * @groups: NULL-terminated list of attribute groups to be created

 * @fmt: string for the device's name

 *

 * This function can be used by char device classes.  A struct device

 * will be created in sysfs, registered to the specified class.

 * Additional attributes specified in the groups parameter will also

 * be created automatically.

 *

 * A "dev" file will be created, showing the dev_t for the device, if

 * the dev_t is not 0,0.

 * If a pointer to a parent struct device is passed in, the newly created

 * struct device will be a child of that device in sysfs.

 * The pointer to the struct device will be returned from the call.

 * Any further sysfs files that might be required can be created using this

 * pointer.

 *

 * Returns &struct device pointer on success, or ERR_PTR() on error.

 *

 * Note: the struct class passed to this function must have previously

 * been created with a call to class_create().

/**

 * device_destroy - removes a device that was created with device_create()

 * @class: pointer to the struct class that this device was registered with

 * @devt: the dev_t of the device that was previously registered

 *

 * This call unregisters and cleans up a device that was created with a

 * call to device_create().

/**

 * device_rename - renames a device

 * @dev: the pointer to the struct device to be renamed

 * @new_name: the new name of the device

 *

 * It is the responsibility of the caller to provide mutual

 * exclusion between two different calls of device_rename

 * on the same device to ensure that new_name is valid and

 * won't conflict with other devices.

 *

 * Note: Don't call this function.  Currently, the networking layer calls this

 * function, but that will change.  The following text from Kay Sievers offers

 * some insight:

 *

 * Renaming devices is racy at many levels, symlinks and other stuff are not

 * replaced atomically, and you get a "move" uevent, but it's not easy to

 * connect the event to the old and new device. Device nodes are not renamed at

 * all, there isn't even support for that in the kernel now.

 *

 * In the meantime, during renaming, your target name might be taken by another

 * driver, creating conflicts. Or the old name is taken directly after you

 * renamed it -- then you get events for the same DEVPATH, before you even see

 * the "move" event. It's just a mess, and nothing new should ever rely on

 * kernel device renaming. Besides that, it's not even implemented now for

 * other things than (driver-core wise very simple) network devices.

 *

 * We are currently about to change network renaming in udev to completely

 * disallow renaming of devices in the same namespace as the kernel uses,

 * because we can't solve the problems properly, that arise with swapping names

 * of multiple interfaces without races. Means, renaming of eth[0-9]* will only

 * be allowed to some other name than eth[0-9]*, for the aforementioned

 * reasons.

 *

 * Make up a "real" name in the driver before you register anything, or add

 * some other attributes for userspace to find the device, or use udev to add

 * symlinks -- but never rename kernel devices later, it's a complete mess. We

 * don't even want to get into that and try to implement the missing pieces in

 * the core. We really have other pieces to fix in the driver core mess. :)

/**

 * device_move - moves a device to a new parent

 * @dev: the pointer to the struct device to be moved

 * @new_parent: the new parent of the device (can be NULL)

 * @dpm_order: how to reorder the dpm_list

 We ignore errors on cleanup since we're hosed anyway... */

		/*

		 * Change the device groups of the device class for @dev to

		 * @kuid/@kgid.

		/*

		 * Change the device groups of the device type for @dev to

		 * @kuid/@kgid.

 Change the device groups of @dev to @kuid/@kgid. */

 Change online device attributes of @dev to @kuid/@kgid. */

/**

 * device_change_owner - change the owner of an existing device.

 * @dev: device.

 * @kuid: new owner's kuid

 * @kgid: new owner's kgid

 *

 * This changes the owner of @dev and its corresponding sysfs entries to

 * @kuid/@kgid. This function closely mirrors how @dev was added via driver

 * core.

 *

 * Returns 0 on success or error code on failure.

	/*

	 * Change the kobject and the default attributes and groups of the

	 * ktype associated with it to @kuid/@kgid.

	/*

	 * Change the uevent file for @dev to the new owner. The uevent file

	 * was created in a separate step when @dev got added and we mirror

	 * that step here.

	/*

	 * Change the device groups, the device groups associated with the

	 * device class, and the groups associated with the device type of @dev

	 * to @kuid/@kgid.

	/*

	 * Change the owner of the symlink located in the class directory of

	 * the device class associated with @dev which points to the actual

	 * directory entry for @dev to @kuid/@kgid. This ensures that the

	 * symlink shows the same permissions as its target.

/**

 * device_shutdown - call ->shutdown() on each device to shutdown.

	/*

	 * Walk the devices list backward, shutting down each in turn.

	 * Beware that device unplug events may also start pulling

	 * devices offline, even as the system is shutting down.

		/*

		 * hold reference count of device's parent to

		 * prevent it from being freed because parent's

		 * lock is to be held

		/*

		 * Make sure the device is off the kset list, in the

		 * event that dev->*->shutdown() doesn't remove it.

 hold lock to avoid race with probe/release */

 Don't allow any more runtime suspends */

/*

 * Device logging functions

	/*

	 * Add device identifier DEVICE=:

	 *   b12:8         block dev_t

	 *   c127:3        char dev_t

	 *   n8            netdev ifindex

	 *   +sound:card0  subsystem:devname

/**

 * dev_err_probe - probe error check and log helper

 * @dev: the pointer to the struct device

 * @err: error value to test

 * @fmt: printf-style format string

 * @...: arguments as specified in the format string

 *

 * This helper implements common pattern present in probe functions for error

 * checking: print debug or error message depending if the error value is

 * -EPROBE_DEFER and propagate error upwards.

 * In case of -EPROBE_DEFER it sets also defer probe reason, which can be

 * checked later by reading devices_deferred debugfs attribute.

 * It replaces code sequence::

 *

 * 	if (err != -EPROBE_DEFER)

 * 		dev_err(dev, ...);

 * 	else

 * 		dev_dbg(dev, ...);

 * 	return err;

 *

 * with::

 *

 * 	return dev_err_probe(dev, err, ...);

 *

 * Note that it is deemed acceptable to use this function for error

 * prints during probe even if the @err is known to never be -EPROBE_DEFER.

 * The benefit compared to a normal dev_err() is the standardized format

 * of the error code and the fact that the error code is returned.

 *

 * Returns @err.

 *

/**

 * set_primary_fwnode - Change the primary firmware node of a given device.

 * @dev: Device to handle.

 * @fwnode: New primary firmware node of the device.

 *

 * Set the device's firmware node pointer to @fwnode, but if a secondary

 * firmware node of the device is present, preserve it.

 *

 * Valid fwnode cases are:

 *  - primary --> secondary --> -ENODEV

 *  - primary --> NULL

 *  - secondary --> -ENODEV

 *  - NULL

 Set fn->secondary = NULL, so fn remains the primary fwnode */

/**

 * set_secondary_fwnode - Change the secondary firmware node of a given device.

 * @dev: Device to handle.

 * @fwnode: New secondary firmware node of the device.

 *

 * If a primary firmware node of the device is present, set its secondary

 * pointer to @fwnode.  Otherwise, set the device's firmware node pointer to

 * @fwnode.

/**

 * device_set_of_node_from_dev - reuse device-tree node of another device

 * @dev: device whose device-tree node is being set

 * @dev2: device whose device-tree node is being reused

 *

 * Takes another reference to the new device-tree node after first dropping

 * any reference held to the old node.

 SPDX-License-Identifier: GPL-2.0

/*

 * hypervisor.c - /sys/hypervisor subsystem.

 *

 * Copyright (C) IBM Corp. 2006

 * Copyright (C) 2007 Greg Kroah-Hartman <gregkh@suse.de>

 * Copyright (C) 2007 Novell Inc.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) ST-Ericsson SA 2011

 *

 * Author: Lee Jones <lee.jones@linaro.org> for ST-Ericsson.

 Prototype to allow declarations of DEVICE_ATTR(<foo>) before soc_info_show */

 Unknown or unfilled attribute */

 Fetch a unique (reclaimable) SOC ID. */

 Ensure soc_dev->attr is freed after calling soc_device_unregister. */

/*

 * soc_device_match - identify the SoC in the machine

 * @matches: zero-terminated array of possible matches

 *

 * returns the first matching entry of the argument array, or NULL

 * if none of them match.

 *

 * This function is meant as a helper in place of of_match_node()

 * in cases where either no device tree is available or the information

 * in a device node is insufficient to identify a particular variant

 * by its compatible strings or other properties. For new devices,

 * the DT binding should always provide unique compatible strings

 * that allow the use of of_match_node() instead.

 *

 * The calling function can use the .data entry of the

 * soc_device_attribute to pass a structure or function pointer for

 * each entry.

 SPDX-License-Identifier: GPL-2.0

/*

 * module.c - module sysfs fun for drivers

 Lookup built-in module entry in /sys/modules */

 remember our module structure */

 kset_find_obj took a reference */

 Don't check return codes; these calls are idempotent */

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/drivers/base/map.c

 *

 * (C) Copyright Al Viro 2002,2003

 *

 * NOTE: data structure needs to be changed.  It works, but for large dev_t

 * it will be too slow.  It is isolated, though, so these changes will be

 * local to that file.

 Currently ->owner protects _only_ ->probe() itself. */

 SPDX-License-Identifier: GPL-2.0

/*

 *  syscore.c - Execution of system core operations.

 *

 *  Copyright (C) 2011 Rafael J. Wysocki <rjw@sisk.pl>, Novell Inc.

/**

 * register_syscore_ops - Register a set of system core operations.

 * @ops: System core operations to register.

/**

 * unregister_syscore_ops - Unregister a set of system core operations.

 * @ops: System core operations to unregister.

/**

 * syscore_suspend - Execute all the registered system core suspend callbacks.

 *

 * This function is executed with one CPU on-line and disabled interrupts.

 Return error code if there are any wakeup interrupts pending. */

/**

 * syscore_resume - Execute all the registered system core resume callbacks.

 *

 * This function is executed with one CPU on-line and disabled interrupts.

 CONFIG_PM_SLEEP */

/**

 * syscore_shutdown - Execute all the registered system core shutdown callbacks.

 SPDX-License-Identifier: GPL-2.0

/*

 * Componentized device handling.

 *

 * This is work in progress.  We gather up the component devices into a list,

 * and bind them when instructed.  At the moment, we're specific to the DRM

 * subsystem, and only handles one master device, but this doesn't have to be

 * the case.

/**

 * DOC: overview

 *

 * The component helper allows drivers to collect a pile of sub-devices,

 * including their bound drivers, into an aggregate driver. Various subsystems

 * already provide functions to get hold of such components, e.g.

 * of_clk_get_by_name(). The component helper can be used when such a

 * subsystem-specific way to find a device is not available: The component

 * helper fills the niche of aggregate drivers for specific hardware, where

 * further standardization into a subsystem would not be practical. The common

 * example is when a logical device (e.g. a DRM display driver) is spread around

 * the SoC on various components (scanout engines, blending blocks, transcoders

 * for various outputs and so on).

 *

 * The component helper also doesn't solve runtime dependencies, e.g. for system

 * suspend and resume operations. See also :ref:`device links<device_link>`.

 *

 * Components are registered using component_add() and unregistered with

 * component_del(), usually from the driver's probe and disconnect functions.

 *

 * Aggregate drivers first assemble a component match list of what they need

 * using component_match_add(). This is then registered as an aggregate driver

 * using component_master_add_with_match(), and unregistered using

 * component_master_del().

	/*

	 * Scan the array of match functions and attach

	 * any components which are found to this master.

 Attach this component to the master */

 Detach component from associated master */

 Detach the component from this master. */

/*

 * Try to bring up a master.  If component is NULL, we're interested in

 * this master, otherwise it's a component which must be present to try

 * and bring up the master.

 *

 * Returns 1 for successful bringup, 0 if not ready, or -ve errno.

 Found all components */

/**

 * component_match_add_release - add a component match entry with release callback

 * @master: device with the aggregate driver

 * @matchptr: pointer to the list of component matches

 * @release: release function for @compare_data

 * @compare: compare function to match against all components

 * @compare_data: opaque pointer passed to the @compare function

 *

 * Adds a new component match to the list stored in @matchptr, which the @master

 * aggregate driver needs to function. The list of component matches pointed to

 * by @matchptr must be initialized to NULL before adding the first match. This

 * only matches against components added with component_add().

 *

 * The allocated match list in @matchptr is automatically released using devm

 * actions, where upon @release will be called to free any references held by

 * @compare_data, e.g. when @compare_data is a &device_node that must be

 * released with of_node_put().

 *

 * See also component_match_add() and component_match_add_typed().

/**

 * component_match_add_typed - add a component match entry for a typed component

 * @master: device with the aggregate driver

 * @matchptr: pointer to the list of component matches

 * @compare_typed: compare function to match against all typed components

 * @compare_data: opaque pointer passed to the @compare function

 *

 * Adds a new component match to the list stored in @matchptr, which the @master

 * aggregate driver needs to function. The list of component matches pointed to

 * by @matchptr must be initialized to NULL before adding the first match. This

 * only matches against components added with component_add_typed().

 *

 * The allocated match list in @matchptr is automatically released using devm

 * actions.

 *

 * See also component_match_add_release() and component_match_add_typed().

/**

 * component_master_add_with_match - register an aggregate driver

 * @parent: parent device of the aggregate driver

 * @ops: callbacks for the aggregate driver

 * @match: component match list for the aggregate driver

 *

 * Registers a new aggregate driver consisting of the components added to @match

 * by calling one of the component_match_add() functions. Once all components in

 * @match are available, it will be assembled by calling

 * &component_master_ops.bind from @ops. Must be unregistered by calling

 * component_master_del().

 Reallocate the match array for its true size */

 Add to the list of available masters. */

/**

 * component_master_del - unregister an aggregate driver

 * @parent: parent device of the aggregate driver

 * @ops: callbacks for the aggregate driver

 *

 * Unregisters an aggregate driver registered with

 * component_master_add_with_match(). If necessary the aggregate driver is first

 * disassembled by calling &component_master_ops.unbind from @ops.

 Release all resources claimed in the binding of this component */

/**

 * component_unbind_all - unbind all components of an aggregate driver

 * @parent: parent device of the aggregate driver

 * @data: opaque pointer, passed to all components

 *

 * Unbinds all components of the aggregate device by passing @data to their

 * &component_ops.unbind functions. Should be called from

 * &component_master_ops.unbind.

 Unbind components in reverse order */

	/*

	 * Each component initialises inside its own devres group.

	 * This allows us to roll-back a failed component without

	 * affecting anything else.

	/*

	 * Also open a group for the device itself: this allows us

	 * to release the resources claimed against the sub-device

	 * at the appropriate moment.

		/*

		 * Close the component device's group so that resources

		 * allocated in the binding are encapsulated for removal

		 * at unbind.  Remove the group on the DRM device as we

		 * can clean those resources up independently.

/**

 * component_bind_all - bind all components of an aggregate driver

 * @parent: parent device of the aggregate driver

 * @data: opaque pointer, passed to all components

 *

 * Binds all components of the aggregate @dev by passing @data to their

 * &component_ops.bind functions. Should be called from

 * &component_master_ops.bind.

 Bind components in match order */

/**

 * component_add_typed - register a component

 * @dev: component device

 * @ops: component callbacks

 * @subcomponent: nonzero identifier for subcomponents

 *

 * Register a new component for @dev. Functions in @ops will be call when the

 * aggregate driver is ready to bind the overall driver by calling

 * component_bind_all(). See also &struct component_ops.

 *

 * @subcomponent must be nonzero and is used to differentiate between multiple

 * components registerd on the same device @dev. These components are match

 * using component_match_add_typed().

 *

 * The component needs to be unregistered at driver unload/disconnect by

 * calling component_del().

 *

 * See also component_add().

/**

 * component_add - register a component

 * @dev: component device

 * @ops: component callbacks

 *

 * Register a new component for @dev. Functions in @ops will be called when the

 * aggregate driver is ready to bind the overall driver by calling

 * component_bind_all(). See also &struct component_ops.

 *

 * The component needs to be unregistered at driver unload/disconnect by

 * calling component_del().

 *

 * See also component_add_typed() for a variant that allows multipled different

 * components on the same device.

/**

 * component_del - unregister a component

 * @dev: component device

 * @ops: component callbacks

 *

 * Unregister a component added with component_add(). If the component is bound

 * into an aggregate driver, this will force the entire aggregate driver, including

 * all its components, to be unbound.

 SPDX-License-Identifier: GPL-2.0

/*

 * Basic Node interface support

/**

 * struct node_access_nodes - Access class device to hold user visible

 * 			      relationships to other nodes.

 * @dev:	Device for this memory access class

 * @list_node:	List element in the node's access list

 * @access:	The access class rank

 * @hmem_attrs: Heterogeneous memory performance attributes

/**

 * node_set_perf_attrs - Set the performance values for given access class

 * @nid: Node identifier to be set

 * @hmem_attrs: Heterogeneous memory performance attributes

 * @access: The access class the for the given attributes

/**

 * struct node_cache_info - Internal tracking for memory node caches

 * @dev:	Device represeting the cache level

 * @node:	List element for tracking in the node

 * @cache_attrs:Attributes for this cache level

/**

 * node_add_cache() - add cache attribute to a memory node

 * @nid: Node identifier that has new cache attributes

 * @cache_attrs: Attributes for the cache being added

	/*

	 * buf is currently PAGE_SIZE in length and each node needs 4 chars

	 * at the most (distance + space or newline).

/*

 * hugetlbfs per node attributes registration interface:

 * When/if hugetlb[fs] subsystem initializes [sometime after this module],

 * it will register its per node attributes for all online nodes with

 * memory.  It will also call register_hugetlbfs_with_node(), below, to

 * register its attribute registration functions with this node driver.

 * Once these hooks have been initialized, the node driver will call into

 * the hugetlb module to [un]register attributes for hot-plugged nodes.

	/*

	 * We schedule the work only when a memory section is

	 * onlined/offlined on this node. When we come here,

	 * all the memory on this node has been offlined,

	 * so we won't enqueue new work to this work.

	 *

	 * The work is using node->node_work, so we should

	 * flush work before freeing the memory.

/*

 * register_node - Setup a sysfs device for a node.

 * @num - Node number to use when creating the device.

 *

 * Initialize and register the node device.

/**

 * unregister_node - unregister a node device

 * @node: node going away

 *

 * Unregisters a node device @node.  All the devices on the node must be

 * unregistered before calling this function.

 no-op, if memoryless node */

/*

 * register cpu under node

/**

 * register_memory_node_under_compute_node - link memory node to its compute

 *					     node for a given access class.

 * @mem_nid:	Memory node number

 * @cpu_nid:	Cpu  node number

 * @access:	Access class to register

 *

 * Description:

 * 	For use with platforms that may have separate memory and compute nodes.

 * 	This function will export node relationships linking which memory

 * 	initiator nodes can access memory targets at a given ranked access

 * 	class.

	/*

	 * If this memory block spans multiple nodes, we only indicate

	 * the last processed node.

 register memory section under specified node if it spans that node */

		/*

		 * memory block could have several absent sections from start.

		 * skip pfn range from absent section

		/*

		 * We need to check if page belongs to nid only at the boot

		 * case because node's ranges can be interleaved.

 mem section does not span the specified node */

/*

 * During hotplug we know that all pages in the memory block belong to the same

 * node.

/*

 * Unregister a memory block device under the node it spans. Memory blocks

 * with multiple nodes cannot be offlined and therefore also never be removed.

/*

 * Handle per node hstate attribute [un]registration on transistions

 * to/from memoryless state.

	/*

	 * We only get here when a node transitions to/from memoryless state.

	 * We can detect which transition occurred by examining whether the

	 * node has memory now.  hugetlb_register_node() already check this

	 * so we try to register the attributes.  If that fails, then the

	 * node has transitioned to memoryless, try to unregister the

	 * attributes.

		/*

		 * offload per node hstate [un]registration to a work thread

		 * when transitioning to/from memoryless state.

 CONFIG_HUGETLBFS */

 CONFIG_MEMORY_HOTPLUG */

 link cpu under this node */

 initialize work queue for memory hot plug */

/*

 * node states attributes

 lower than SLAB */

	/*

	 * Note:  we're not going to unregister the node class if we fail

	 * to register the node state class attribute files.

 SPDX-License-Identifier: GPL-2.0

/*

 * transport_class.c - implementation of generic transport classes

 *                     using attribute_containers

 *

 * Copyright (c) 2005 - James Bottomley <James.Bottomley@steeleye.com>

 *

 * The basic idea here is to allow any "device controller" (which

 * would most often be a Host Bus Adapter to use the services of one

 * or more tranport classes for performing transport specific

 * services.  Transport specific services are things that the generic

 * command layer doesn't want to know about (speed settings, line

 * condidtioning, etc), but which the user might be interested in.

 * Thus, the HBA's use the routines exported by the transport classes

 * to perform these functions.  The transport classes export certain

 * values to the user via sysfs using attribute containers.

 *

 * Note: because not every HBA will care about every transport

 * attribute, there's a many to one relationship that goes like this:

 *

 * transport class<-----attribute container<----class device

 *

 * Usually the attribute container is per-HBA, but the design doesn't

 * mandate that.  Although most of the services will be specific to

 * the actual external storage connection used by the HBA, the generic

 * transport class is framed entirely in terms of generic devices to

 * allow it to be used by any physical HBA in the system.

/**

 * transport_class_register - register an initial transport class

 *

 * @tclass:	a pointer to the transport class structure to be initialised

 *

 * The transport class contains an embedded class which is used to

 * identify it.  The caller should initialise this structure with

 * zeros and then generic class must have been initialised with the

 * actual transport class unique name.  There's a macro

 * DECLARE_TRANSPORT_CLASS() to do this (declared classes still must

 * be registered).

 *

 * Returns 0 on success or error on failure.

/**

 * transport_class_unregister - unregister a previously registered class

 *

 * @tclass: The transport class to unregister

 *

 * Must be called prior to deallocating the memory for the transport

 * class.

 do nothing */

/**

 * anon_transport_class_register - register an anonymous class

 *

 * @atc: The anon transport class to register

 *

 * The anonymous transport class contains both a transport class and a

 * container.  The idea of an anonymous class is that it never

 * actually has any device attributes associated with it (and thus

 * saves on container storage).  So it can only be used for triggering

 * events.  Use prezero and then use DECLARE_ANON_TRANSPORT_CLASS() to

 * initialise the anon transport class storage.

/**

 * anon_transport_class_unregister - unregister an anon class

 *

 * @atc: Pointer to the anon transport class to unregister

 *

 * Must be called prior to deallocating the memory for the anon

 * transport class.

/**

 * transport_setup_device - declare a new dev for transport class association but don't make it visible yet.

 * @dev: the generic device representing the entity being added

 *

 * Usually, dev represents some component in the HBA system (either

 * the HBA itself or a device remote across the HBA bus).  This

 * routine is simply a trigger point to see if any set of transport

 * classes wishes to associate with the added device.  This allocates

 * storage for the class device and initialises it, but does not yet

 * add it to the system or add attributes to it (you do this with

 * transport_add_device).  If you have no need for a separate setup

 * and add operations, use transport_register_device (see

 * transport_class.h).

/**

 * transport_add_device - declare a new dev for transport class association

 *

 * @dev: the generic device representing the entity being added

 *

 * Usually, dev represents some component in the HBA system (either

 * the HBA itself or a device remote across the HBA bus).  This

 * routine is simply a trigger point used to add the device to the

 * system and register attributes for it.

/**

 * transport_configure_device - configure an already set up device

 *

 * @dev: generic device representing device to be configured

 *

 * The idea of configure is simply to provide a point within the setup

 * process to allow the transport class to extract information from a

 * device after it has been setup.  This is used in SCSI because we

 * have to have a setup device to begin using the HBA, but after we

 * send the initial inquiry, we use configure to extract the device

 * parameters.  The device need not have been added to be configured.

/**

 * transport_remove_device - remove the visibility of a device

 *

 * @dev: generic device to remove

 *

 * This call removes the visibility of the device (to the user from

 * sysfs), but does not destroy it.  To eliminate a device entirely

 * you must also call transport_destroy_device.  If you don't need to

 * do remove and destroy as separate operations, use

 * transport_unregister_device() (see transport_class.h) which will

 * perform both calls for you.

/**

 * transport_destroy_device - destroy a removed device

 *

 * @dev: device to eliminate from the transport class.

 *

 * This call triggers the elimination of storage associated with the

 * transport classdev.  Note: all it really does is relinquish a

 * reference to the classdev.  The memory will not be freed until the

 * last reference goes to zero.  Note also that the classdev retains a

 * reference count on dev, so dev too will remain for as long as the

 * transport class device remains around.

 SPDX-License-Identifier: GPL-2.0

/*

 * drivers/base/devres.c - device resource management

 *

 * Copyright (c) 2006  SUSE Linux Products GmbH

 * Copyright (c) 2006  Tejun Heo <teheo@suse.de>

	/*

	 * Some archs want to perform DMA into kmalloc caches

	 * and need a guaranteed alignment larger than

	 * the alignment of a 64-bit integer.

	 * Thus we use ARCH_KMALLOC_MINALIGN here and get exactly the same

	 * buffer alignment as if it was allocated by plain kmalloc().

 -- 8 pointers */

 CONFIG_DEBUG_DEVRES */

 CONFIG_DEBUG_DEVRES */

/*

 * Release functions for devres group.  These callbacks are used only

 * for identification.

 noop */

 noop */

 We must catch any near-SIZE_MAX cases that could overflow. */

/**

 * __devres_alloc_node - Allocate device resource data

 * @release: Release function devres will be associated with

 * @size: Allocation size

 * @gfp: Allocation flags

 * @nid: NUMA node

 * @name: Name of the resource

 *

 * Allocate devres of @size bytes.  The allocated area is zeroed, then

 * associated with @release.  The returned pointer can be passed to

 * other devres_*() functions.

 *

 * RETURNS:

 * Pointer to allocated devres on success, NULL on failure.

/**

 * devres_for_each_res - Resource iterator

 * @dev: Device to iterate resource from

 * @release: Look for resources associated with this release function

 * @match: Match function (optional)

 * @match_data: Data for the match function

 * @fn: Function to be called for each matched resource.

 * @data: Data for @fn, the 3rd parameter of @fn

 *

 * Call @fn for each devres of @dev which is associated with @release

 * and for which @match returns 1.

 *

 * RETURNS:

 * 	void

/**

 * devres_free - Free device resource data

 * @res: Pointer to devres data to free

 *

 * Free devres created with devres_alloc().

/**

 * devres_add - Register device resource

 * @dev: Device to add resource to

 * @res: Resource to register

 *

 * Register devres @res to @dev.  @res should have been allocated

 * using devres_alloc().  On driver detach, the associated release

 * function will be invoked and devres will be freed automatically.

/**

 * devres_find - Find device resource

 * @dev: Device to lookup resource from

 * @release: Look for resources associated with this release function

 * @match: Match function (optional)

 * @match_data: Data for the match function

 *

 * Find the latest devres of @dev which is associated with @release

 * and for which @match returns 1.  If @match is NULL, it's considered

 * to match all.

 *

 * RETURNS:

 * Pointer to found devres, NULL if not found.

/**

 * devres_get - Find devres, if non-existent, add one atomically

 * @dev: Device to lookup or add devres for

 * @new_res: Pointer to new initialized devres to add if not found

 * @match: Match function (optional)

 * @match_data: Data for the match function

 *

 * Find the latest devres of @dev which has the same release function

 * as @new_res and for which @match return 1.  If found, @new_res is

 * freed; otherwise, @new_res is added atomically.

 *

 * RETURNS:

 * Pointer to found or added devres.

/**

 * devres_remove - Find a device resource and remove it

 * @dev: Device to find resource from

 * @release: Look for resources associated with this release function

 * @match: Match function (optional)

 * @match_data: Data for the match function

 *

 * Find the latest devres of @dev associated with @release and for

 * which @match returns 1.  If @match is NULL, it's considered to

 * match all.  If found, the resource is removed atomically and

 * returned.

 *

 * RETURNS:

 * Pointer to removed devres on success, NULL if not found.

/**

 * devres_destroy - Find a device resource and destroy it

 * @dev: Device to find resource from

 * @release: Look for resources associated with this release function

 * @match: Match function (optional)

 * @match_data: Data for the match function

 *

 * Find the latest devres of @dev associated with @release and for

 * which @match returns 1.  If @match is NULL, it's considered to

 * match all.  If found, the resource is removed atomically and freed.

 *

 * Note that the release function for the resource will not be called,

 * only the devres-allocated data will be freed.  The caller becomes

 * responsible for freeing any other data.

 *

 * RETURNS:

 * 0 if devres is found and freed, -ENOENT if not found.

/**

 * devres_release - Find a device resource and destroy it, calling release

 * @dev: Device to find resource from

 * @release: Look for resources associated with this release function

 * @match: Match function (optional)

 * @match_data: Data for the match function

 *

 * Find the latest devres of @dev associated with @release and for

 * which @match returns 1.  If @match is NULL, it's considered to

 * match all.  If found, the resource is removed atomically, the

 * release function called and the resource freed.

 *

 * RETURNS:

 * 0 if devres is found and freed, -ENOENT if not found.

	/* First pass - move normal devres entries to @todo and clear

	 * devres_group colors.

 clear color of group markers in the first pass */

 regular devres entry */

	/* Second pass - Scan groups and color them.  A group gets

	 * color value of two iff the group is wholly contained in

	 * [current node, end). That is, for a closed group, both opening

	 * and closing markers should be in the range, while just the

	 * opening marker is enough for an open group.

			/* No need to update current node or end. The removed

			 * nodes are always before both.

	/* Release.  Note that both devres and devres_group are

	 * handled as devres in the following loop.  This is safe.

/**

 * devres_release_all - Release all managed resources

 * @dev: Device to release resources for

 *

 * Release all resources associated with @dev.  This function is

 * called on driver detach.

 Looks like an uninitialized device structure */

 Nothing to release if list is empty */

/**

 * devres_open_group - Open a new devres group

 * @dev: Device to open devres group for

 * @id: Separator ID

 * @gfp: Allocation flags

 *

 * Open a new devres group for @dev with @id.  For @id, using a

 * pointer to an object which won't be used for another group is

 * recommended.  If @id is NULL, address-wise unique ID is created.

 *

 * RETURNS:

 * ID of the new group, NULL on failure.

 Find devres group with ID @id.  If @id is NULL, look for the latest. */

/**

 * devres_close_group - Close a devres group

 * @dev: Device to close devres group for

 * @id: ID of target group, can be NULL

 *

 * Close the group identified by @id.  If @id is NULL, the latest open

 * group is selected.

/**

 * devres_remove_group - Remove a devres group

 * @dev: Device to remove group for

 * @id: ID of target group, can be NULL

 *

 * Remove the group identified by @id.  If @id is NULL, the latest

 * open group is selected.  Note that removing a group doesn't affect

 * any other resources.

/**

 * devres_release_group - Release resources in a devres group

 * @dev: Device to release group for

 * @id: ID of target group, can be NULL

 *

 * Release all resources in the group identified by @id.  If @id is

 * NULL, the latest open group is selected.  The selected group and

 * groups properly nested inside the selected group are removed.

 *

 * RETURNS:

 * The number of released non-group resources.

/*

 * Custom devres actions allow inserting a simple function call

 * into the teadown sequence.

/**

 * devm_add_action() - add a custom action to list of managed resources

 * @dev: Device that owns the action

 * @action: Function that should be called

 * @data: Pointer to data passed to @action implementation

 *

 * This adds a custom action to the list of managed resources so that

 * it gets executed as part of standard resource unwinding.

/**

 * devm_remove_action() - removes previously added custom action

 * @dev: Device that owns the action

 * @action: Function implementing the action

 * @data: Pointer to data passed to @action implementation

 *

 * Removes instance of @action previously added by devm_add_action().

 * Both action and data should match one of the existing entries.

/**

 * devm_release_action() - release previously added custom action

 * @dev: Device that owns the action

 * @action: Function implementing the action

 * @data: Pointer to data passed to @action implementation

 *

 * Releases and removes instance of @action previously added by

 * devm_add_action().  Both action and data should match one of the

 * existing entries.

/*

 * Managed kmalloc/kfree

 noop */

/**

 * devm_kmalloc - Resource-managed kmalloc

 * @dev: Device to allocate memory for

 * @size: Allocation size

 * @gfp: Allocation gfp flags

 *

 * Managed kmalloc.  Memory allocated with this function is

 * automatically freed on driver detach.  Like all other devres

 * resources, guaranteed alignment is unsigned long long.

 *

 * RETURNS:

 * Pointer to allocated memory on success, NULL on failure.

 use raw alloc_dr for kmalloc caller tracing */

	/*

	 * This is named devm_kzalloc_release for historical reasons

	 * The initial implementation did not support kmalloc, only kzalloc

/**

 * devm_krealloc - Resource-managed krealloc()

 * @dev: Device to re-allocate memory for

 * @ptr: Pointer to the memory chunk to re-allocate

 * @new_size: New allocation size

 * @gfp: Allocation gfp flags

 *

 * Managed krealloc(). Resizes the memory chunk allocated with devm_kmalloc().

 * Behaves similarly to regular krealloc(): if @ptr is NULL or ZERO_SIZE_PTR,

 * it's the equivalent of devm_kmalloc(). If new_size is zero, it frees the

 * previously allocated memory and returns ZERO_SIZE_PTR. This function doesn't

 * change the order in which the release callback for the re-alloc'ed devres

 * will be called (except when falling back to devm_kmalloc() or when freeing

 * resources when new_size is zero). The contents of the memory are preserved

 * up to the lesser of new and old sizes.

		/*

		 * We cannot reliably realloc a const string returned by

		 * devm_kstrdup_const().

	/*

	 * If new size is smaller or equal to the actual number of bytes

	 * allocated previously - just return the same pointer.

	/*

	 * Otherwise: allocate new, larger chunk. We need to allocate before

	 * taking the lock as most probably the caller uses GFP_KERNEL.

	/*

	 * The spinlock protects the linked list against concurrent

	 * modifications but not the resource itself.

	/*

	 * We can copy the memory contents after releasing the lock as we're

	 * no longer modyfing the list links.

	/*

	 * Same for releasing the old devres - it's now been removed from the

	 * list. This is also the reason why we must not use devm_kfree() - the

	 * links are no longer valid.

/**

 * devm_kstrdup - Allocate resource managed space and

 *                copy an existing string into that.

 * @dev: Device to allocate memory for

 * @s: the string to duplicate

 * @gfp: the GFP mask used in the devm_kmalloc() call when

 *       allocating memory

 * RETURNS:

 * Pointer to allocated string on success, NULL on failure.

/**

 * devm_kstrdup_const - resource managed conditional string duplication

 * @dev: device for which to duplicate the string

 * @s: the string to duplicate

 * @gfp: the GFP mask used in the kmalloc() call when allocating memory

 *

 * Strings allocated by devm_kstrdup_const will be automatically freed when

 * the associated device is detached.

 *

 * RETURNS:

 * Source string if it is in .rodata section otherwise it falls back to

 * devm_kstrdup.

/**

 * devm_kvasprintf - Allocate resource managed space and format a string

 *		     into that.

 * @dev: Device to allocate memory for

 * @gfp: the GFP mask used in the devm_kmalloc() call when

 *       allocating memory

 * @fmt: The printf()-style format string

 * @ap: Arguments for the format string

 * RETURNS:

 * Pointer to allocated string on success, NULL on failure.

/**

 * devm_kasprintf - Allocate resource managed space and format a string

 *		    into that.

 * @dev: Device to allocate memory for

 * @gfp: the GFP mask used in the devm_kmalloc() call when

 *       allocating memory

 * @fmt: The printf()-style format string

 * @...: Arguments for the format string

 * RETURNS:

 * Pointer to allocated string on success, NULL on failure.

/**

 * devm_kfree - Resource-managed kfree

 * @dev: Device this memory belongs to

 * @p: Memory to free

 *

 * Free memory allocated with devm_kmalloc().

	/*

	 * Special cases: pointer to a string in .rodata returned by

	 * devm_kstrdup_const() or NULL/ZERO ptr.

/**

 * devm_kmemdup - Resource-managed kmemdup

 * @dev: Device this memory belongs to

 * @src: Memory region to duplicate

 * @len: Memory region length

 * @gfp: GFP mask to use

 *

 * Duplicate region of a memory using resource managed kmalloc

/**

 * devm_get_free_pages - Resource-managed __get_free_pages

 * @dev: Device to allocate memory for

 * @gfp_mask: Allocation gfp flags

 * @order: Allocation size is (1 << order) pages

 *

 * Managed get_free_pages.  Memory allocated with this function is

 * automatically freed on driver detach.

 *

 * RETURNS:

 * Address of allocated memory on success, 0 on failure.

/**

 * devm_free_pages - Resource-managed free_pages

 * @dev: Device this memory belongs to

 * @addr: Memory to free

 *

 * Free memory allocated with devm_get_free_pages(). Unlike free_pages,

 * there is no need to supply the @order.

/**

 * __devm_alloc_percpu - Resource-managed alloc_percpu

 * @dev: Device to allocate per-cpu memory for

 * @size: Size of per-cpu memory to allocate

 * @align: Alignment of per-cpu memory to allocate

 *

 * Managed alloc_percpu. Per-cpu memory allocated with this function is

 * automatically freed on driver detach.

 *

 * RETURNS:

 * Pointer to allocated memory on success, NULL on failure.

/**

 * devm_free_percpu - Resource-managed free_percpu

 * @dev: Device this memory belongs to

 * @pdata: Per-cpu memory to free

 *

 * Free memory allocated with devm_alloc_percpu().

