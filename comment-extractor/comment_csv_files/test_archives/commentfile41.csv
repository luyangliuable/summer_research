 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 modify DIG lower bound, deal with abnormally large false alarm */

 3600=2hr */

 Recovery mechanism for IGI lower bound */

 Adjust initial gain by false alarm */

 Check initial gain by upper/lower bound */

 initialized to false */

 TODO: Handle ADHOC and AP Mode */

/* TODO:

 *	if (mac->opmode == NL80211_IFTYPE_STATION) {

 *		if (rtlpriv->rtlhal.fw_ready) {

 *			u32 param = (u32)(rtlpriv->dm.undec_sm_pwdb << 16);

 *			rtl8192c_set_rssi_cmd(hw, param);

 *		}

 *	}

 Handle USB High PA boards */

 Determine the minimum RSSI */

 Power Saving for 92C */

 rtl92c_dm_1r_cca(hw); */

 rtl92c_dm_refresh_rate_adaptive_mask(hw); */

	/* Check RSSI to determine HighPower/NormalPower state for

 Check RSSI to determine AMPDU setting for BT coexistence. */

	/* Marked RSSI state. It will be used to determine BT coexistence

 Check BT state related to BT_Idle in B/G mode. */

			/* Add interrupt migration when bt is not ini

 Only enable HW BT coexist when BT in "Busy" state. */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

&&(reg_ea4 != 0) */

&&(reg_ec4 != 0) */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

->1*/

->5*/

 page 0 beacon */

 page 1 beacon */

 page 2  ps-poll */

 page 3  null */

 page 4  probe_resp */

 page 5  probe_resp */

	/*---------------------------------------------------------

				(1) beacon

	/*-------------------------------------------------------

				(2) ps-poll

	/*--------------------------------------------------------

				(3) null data

	/*---------------------------------------------------------

				(4) probe response

 refactored routine */

 hw only support 2 set of NoA */

 To control the reg setting for which NOA*/

 config P2P NoA Descriptor Register */

Get Current TSF value */

 update CTWindow value. */

 call refactored routine */

 rst p2p circuit */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 RF off */

 RF on */

	/* Since this function can take a very long time (up to 350 ms)

	 * and can be called with irqs disabled, reenable the irqs

	 * to let the other devices continue being serviced.

	 *

	 * It is safe doing so since our own interrupts will only be enabled

	 * in a subsequent step.

	/* because last function modify RCR, so we update

	 * rcr var here, or TP will unstable for receive_config

	 * is wrong, RX RCR_ACRC32 will cause TP unstabel & Rx

	/* MSR_INFRA == Link in infrastructure network;

	 * MSR_ADHOC == Link in ad hoc network;

	 * Therefore, check link state is necessary.

	 *

	 * MSR_AP == AP mode; link state does not matter here.

 don't set REG_EDCA_BE_PARAM here because mac80211 will send pkt when scan */

 rtl_write_dword(rtlpriv, REG_EDCA_BE_PARAM, u4b_ac_param); */

 after power off we should do iqk again */

FIX MERGE */

 0:Low, 1:High, 2:From Efuse. */

 0:Idle, 1:None-SCO, 2:SCO, 3:From Counter. */

 0:Disable BT control A-MPDU, 1:Enable BT control A-MPDU. */

 Config to 1T1R. */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

		/* CCK gain is smaller than OFDM/MCS gain,

		 * so we add gain diff by experiences,

		 * the val is 6

		/* modify the offset to make the same

		 * gain index with OFDM.

 (3) Get Signal Quality (EVM) */

 (1)Get RSSI for HT rate */

 we will judge RF RX path now. */

 Translate DBM to percentage. */

 Get Rx snr value in DB */

 Record Signal Strength for next packet */

		/* (2)PWDB, Average PWDB cacluated by

		 * hardware (for rate adaptive)

 (3)EVM of HT rate */

				/* Fill value in RFD, Get the first

				 * spatial stream only

	/* UI BSS List signal strength(in percentage),

	 * make it good looking, from 0~100.

	/* hw will set stats->decrypted true, if it finds the

	 * frame is open data frame or mgmt frame.

	 * So hw will not decryption robust managment frame

	 * for IEEE80211w but still set status->decrypted

	 * true, so here we should set it back to undecrypted

	 * for IEEE80211w frame, and mac80211 sw will help

	 * to decrypt it

	/* rate_idx: index of data rate into band's

	 * supported rates or MCS index if HT rates

	 * are use (RX_FLAG_HT)

	 * Notice: this is diff with windows define

rx_status->qual = stats->signal; */

	/*beacon packet will only use the first

	 *descriptor defautly,and the own may not

	 *be cleared by the hardware

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

close ASPM for AMD defaultly */

	/*

	 * ASPM PS mode.

	 * 0 - Disable ASPM,

	 * 1 - Enable ASPM without Clock Req,

	 * 2 - Enable ASPM with Clock Req,

	 * 3 - Alwyas Enable ASPM with Clock Req,

	 * 4 - Always Enable ASPM without Clock Req.

	 * set defult to RTL8192CE:3 RTL8192E:2

Setting for PCI-E device */

Setting for PCI-E bridge */

	/*

	 * In Hw/Sw Radio Off situation.

	 * 0 - Default,

	 * 1 - From ASPM setting without low Mac Pwr,

	 * 2 - From ASPM setting with low Mac Pwr,

	 * 3 - Bus D3

	 * set default to RTL8192CE:0 RTL8192SE:2

	/*

	 * This setting works for those device with

	 * backdoor ASPM setting such as EPHY setting.

	 * 0 - Not support ASPM,

	 * 1 - Support ASPM,

	 * 2 - According to chipset.

 compatible 5G band 88ce just 2.4G band & smsp */

 for LPS & IPS */

	/* for ASPM, you can close aspm through

 for firmware buf */

 request fw */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 RF off */

 RF on */

 HW Power on sequence */

 eMAC time out function enable, 0x369[7]=1 */

	/* ePHY reg 0x1e bit[4]=1 using MDIO interface,

	 * we should do this before Enabling ASPM backdoor.

	/* As this function can take a very long time (up to 350 ms)

	 * and can be called with irqs disabled, reenable the irqs

	 * to let the other devices continue being serviced.

	 *

	 * It is safe doing so since our own interrupts will only be enabled

	 * in a subsequent step.

	/* because last function modify RCR, so we update

	 * rcr var here, or TP will unstable for receive_config

	 * is wrong, RX RCR_ACRC32 will cause TP unstable & Rx

	 * RCR_APP_ICV will cause mac80211 unassoc for cisco 1252

 RTL8723 with BT function. */

 Normal mass production chip. */

 RTL8723 with BT function. */

 IC version (CUT) */

 ROM code version. */

	/* MSR_INFRA == Link in infrastructure network;

	 * MSR_ADHOC == Link in ad hoc network;

	 * Therefore, check link state is necessary.

	 *

	 * MSR_AP == AP mode; link state is not cared here.

/* don't set REG_EDCA_BE_PARAM here

 * because mac80211 will send pkt when scan

synchronize_irq(rtlpci->pdev->irq);*/

 Combo (PCIe + USB) Card and PCIe-MF Card */

 1. Run LPS WL RFOFF flow */

 2. 0x1F[7:0] = 0 */

 turn off RF */

 Reset MCU. Suggested by Filen. */

 g.	MCUFWDL 0x80[1:0]=0	 */

 reset MCU ready status */

 HW card disable configuration. */

 Reset MCU IO Wrapper */

 7. RSV_CTRL 0x1C[7:0] = 0x0E */

 lock ISO/CLK/Power control register */

 after power off we should do iqk again */

FIX MERGE */

 need add */

u8 mimo_ps = IEEE80211_SMPS_OFF;*/

 0:Low, 1:High, 2:From Efuse. */

 0:Idle, 1:None-SCO, 2:SCO, 3:From Counter. */

 0:Disable BT control A-MPDU, 1:Enable BT control A-MPDU. */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 0: disconnected, 1:connected */

  Enable GPIO 0/1/2/3/8 pins for bt */

 Shrink RF Rx LPF corner, 0x1e[7:4]=1111 ==> [11:4] */

Resume RF Rx LPF corner*/

 sw mechanism */

 sw mechanism */

 Dac Swing default enable */

 function enable */

 function enable */

 Only 8723 B cut should do this */

 function enable */

 WLAN_ACT = High duration, unit:ms */

  WLAN_ACT = Low duration, unit:3*625us */

 check new setting is different with the old one, */

 if all the same, don't do the setting again. */

 save the new coexist setting */

	/* Here we only consider when Bt Operation

	 * inquiry/paging/pairing is ON

	 * we only need to turn off TDMA

	/* Note: There is a constraint between TDMA and 2AntHID

	 * Only one of 2AntHid and tdma can be turn on

	 * We should turn off those mechanisms should be turned off first

	 * and then turn on those mechanisms should be turned on.

 turn off tdma */

 turn off Pstdma */

 Antenna control by PTA, 0x870 = 0x300. */

 turn on 2AntHid */

 turn off 2AntHid */

 turn off pstdma */

 Antenna control by PTA, 0x870 = 0x300. */

 turn on tdma */

 turn off 2AntHid */

 turn off tdma */

 turn on pstdma */

 turn off 2AntHid */

 turn off tdma */

 turn off pstdma */

 Antenna control by PTA, 0x870 = 0x300. */

	/* Note:

	 * We should add delay for making sure

	 *	sw DacSwing can be set sucessfully.

	 * because of that rtl8723e_dm_bt_set_fw_2_ant_hid()

	 *	and rtl8723e_dm_bt_set_fw_tdma_ctrl()

	 * will overwrite the reg 0x880.

 ============================================================ */

 extern function start with BTDM_ */

/* ============================================================i

 coex table */

 sw mechanism */

 fw mechanism */

 coex table */

 sw mechanism */

 fw mechanism */

 only rssi high we need to do this, */

 when rssi low, the value will modified by fw */

 Always ignore WlanAct if bHid|bSCOBusy|bSCOeSCO */

 coex table */

 sw mechanism */

 fw mechanism */

 coex table */

 sw mechanism */

 fw mechanism */

 only rssi high we need to do this, */

 when rssi low, the value will modified by fw */

 bt inquiry or page is started. */

 when bt inquiry or page scan, we have to set h2c 0x25 */

 ignore wlanact for continuous 4x2secs */

 rtl_write_byte(rtlpriv, 0x76e, 0xc); */

 Read the content */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 Set to software control. */

 Set to software control. */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 drivers should parse below arrays and do the corresponding actions */

3 Power on  Array*/

3Radio off GPIO Array */

3Card Disable Array*/

3 Card Enable Array*/

3Suspend Array*/

3 Resume Array*/

3HWPDN Array*/

3 Enter LPS */

FW behavior*/

3 Leave LPS */

FW behavior*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 Record it for next packet processing */

 CCK Driver info Structure is not the same as OFDM packet. */

 (1)Hardware does not provide RSSI for CCK */

		/* (2)PWDB, Average PWDB cacluated by

		 * hardware (for rate adaptive)

 CCK gain is smaller than OFDM/MCS gain,  */

		/* so we add gain diff by experiences,

		 * the val is 6

		/* modify the offset to make the same

		 * gain index with OFDM.

 (3) Get Signal Quality (EVM) */

 (1)Get RSSI for HT rate */

 we will judge RF RX path now. */

 Translate DBM to percentage. */

 Get Rx snr value in DB */

 Record Signal Strength for next packet */

		/* (2)PWDB, Average PWDB cacluated by

		 * hardware (for rate adaptive)

 (3)EVM of HT rate */

				/* Fill value in RFD, Get the first

				 * spatial stream only

	/* UI BSS List signal strength(in percentage),

	 * make it good looking, from 0~100.

u8 *psaddr;*/

	/* hw will set status->decrypted true, if it finds the

	 * frame is open data frame or mgmt frame.

	 * So hw will not decryption robust managment frame

	 * for IEEE80211w but still set status->decrypted

	 * true, so here we should set it back to undecrypted

	 * for IEEE80211w frame, and mac80211 sw will help

	 * to decrypt it

	/* rate_idx: index of data rate into band's

	 * supported rates or MCS index if HT rates

	 * are use (RX_FLAG_HT)

	 * Notice: this is diff with windows define

 bool b_trigger_ac = false; */

 set_tx_desc_hwseq_en(pdesc, 1); */

 set_tx_desc_pkt_id(pdesc, 8); */

 set_tx_desc_qos(pdesc, 1); */

 set_tx_desc_hwseq_en(pdesc, 1); */

 set_tx_desc_pkt_id(pdesc, 8); */

	/**

	 *beacon packet will only use the first

	 *descriptor defautly,and the own may not

	 *be cleared by the hardware

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

close ASPM for AMD defaultly */

	/**

	 * ASPM PS mode.

	 * 0 - Disable ASPM,

	 * 1 - Enable ASPM without Clock Req,

	 * 2 - Enable ASPM with Clock Req,

	 * 3 - Alwyas Enable ASPM with Clock Req,

	 * 4 - Always Enable ASPM without Clock Req.

	 * set defult to RTL8192CE:3 RTL8192E:2

Setting for PCI-E device */

Setting for PCI-E bridge */

	/**

	 * In Hw/Sw Radio Off situation.

	 * 0 - Default,

	 * 1 - From ASPM setting without low Mac Pwr,

	 * 2 - From ASPM setting with low Mac Pwr,

	 * 3 - Bus D3

	 * set default to RTL8192CE:0 RTL8192SE:2

	/**

	 * This setting works for those device with

	 * backdoor ASPM setting such as EPHY setting.

	 * 0 - Not support ASPM,

	 * 1 - Support ASPM,

	 * 2 - According to chipset.

 compatible 5G band 88ce just 2.4G band & smsp */

 for LPS & IPS */

 for firmware buf */

 get bt coexist status */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 ->1 */

 ->5 */

 page 0 beacon */

 page 1 beacon */

 page 2  ps-poll */

 page 3  null */

 page 4  probe_resp */

 page 5  probe_resp */

	/*---------------------------------------------------------

	 *			(1) beacon

	 *---------------------------------------------------------

	/*-------------------------------------------------------

	 *			(2) ps-poll

	 *--------------------------------------------------------

	/*--------------------------------------------------------

	 *			(3) null data

	 *---------------------------------------------------------

	/*---------------------------------------------------------

	 *			(4) probe response

	 *----------------------------------------------------------

 update CTWindow value. */

 hw only support 2 set of NoA */

 To control the register setting for which NOA*/

 config P2P NoA Descriptor Register */

Get Current TSF value */

 rst p2p circuit */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

  Enable counter statistics */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 1. 0x28[1] = 1 */

 2. 0x29[7:0] = 0xFF */

 3. 0x02[1:0] = 2b'11 */

 4. 0x25[6] = 0 */

Advised by SD3 Alex Wang. 2011.02.09. */

 6. 0x1f[7:0] = 0x07 */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

 RF on */

 RF on */

 RF off */

 RF off */

Auto Power Down to CHIP-off State*/

 HW Power on sequence */

 Enable FW Beamformer Interrupt */

	/* <20130114, Kordan> The following setting is

	 * only for DPDT and Fixed board type.

	 * TODO:  A better solution is configure it

	 * according EFUSE during the run-time.

 0x66[4]=0 */

 0x66[8]=0 */

 0x40[4]=0 */;

 0x40[3]=1 */;

 0x4C[24:23]=10 */;

 0x944[1:0]=11 */;

 0x930[7:0]=77 */;

 0x38[11]=1 */;

 Init value for RRSR. */

 ARFB table 9 for 11ac 5G 2SS */

 ARFB table 10 for 11ac 5G 1SS */

 CF-End setting. */

 0x456 = 0x70, sugguested by Zhilin */

 Set retry limit */

 Set Data / Response auto rate fallack retry count */

 TBTT prohibit hold time. Suggested by designer TimChen. */

 8 ms */

For Rx TP. Suggested by SD1 Richard. Added by tynli. 2010.04.12.*/

 Write DBI 1Byte Data */

 Write DBI 2Byte Address & Write Enable */

 Write DBI Write Flag */

	/* <Roger_Notes> Overwrite following ePHY parameter for

	 * some platform compatibility issue,

	 * especially when CLKReq is enabled, 2012.11.09.

 Configuration Space offset 0x70f BIT7 is used to control L0S */

	/* Configuration Space offset 0x719 Bit3 is for L1

	 * BIT4 is for clock request

 Combo (PCIe + USB) Card and PCIe-MF Card */

 1. Run LPS WL RFOFF flow */

 2. 0x1F[7:0] = 0 */

 turn off RF */

 rtl_write_byte(rtlpriv, REG_RF_CTRL, 0x00); */

 Reset MCU. Suggested by Filen. */

 g.	MCUFWDL 0x80[1:0]=0	 */

 reset MCU ready status */

 HW card disable configuration. */

 Reset MCU IO Wrapper */

 7. RSV_CTRL 0x1C[7:0] = 0x0E */

 lock ISO/CLK/Power control register */

 write reg 0x350 Bit[26]=1. Enable debug port. */

 Suggested by DD Justin_tsai. */

	/* read reg 0x350 Bit[25] if 1 : RX hang

	 * read reg 0x350 Bit[24] if 1 : TX hang

	/* Revise Note: Follow the document "PCIe RX DMA Hang Reset Flow_v03"

	 * released by SD1 Alan.

	 * 2013.05.07, by tynli.

	/* 1. disable register write lock

	 *	write 0x1C bit[1:0] = 2'h0

	 *	write 0xCC bit[2] = 1'b1

	/* 2. Check and pause TRX DMA

	 *	write 0x284 bit[18] = 1'b1

	 *	write 0x301 = 0xFF

 Already pause before the function for another purpose. */

		/* 3. reset TRX function

		 *	write 0x100 = 0x00

	/* 4. Reset PCIe DMA

	 *	write 0x003 bit[0] = 0

	/* 5. Enable PCIe DMA

	 *	write 0x003 bit[0] = 1

		/* 6. enable TRX function

		 *	write 0x100 = 0xFF

		/* We should init LLT & RQPN and

		 * prepare Tx/Rx descrptor address later

		 * because MAC function is reset.

	/* 7. Restore PCIe autoload down bit

	 *	write 0xF8 bit[17] = 1'b1

	/* In MAC power on state, BB and RF maybe in ON state,

	 * if we release TRx DMA here

	 * it will cause packets to be started to Tx/Rx,

	 * so we release Tx/Rx DMA later.

		/* 8. release TRX DMA

		 *	write 0x284 bit[18] = 1'b0

		 *	write 0x301 = 0x00

	/* 9. lock system register

	 *	write 0xCC bit[2] = 1'b0

 reenable interrupts to not interfere with other devices */

	/* because last function modify RCR, so we update

	 * rcr var here, or TP will unstable for receive_config

	 * is wrong, RX RCR_ACRC32 will cause TP unstable & Rx

	 * RCR_APP_ICV will cause mac80211 unassoc for cisco 1252

		/* when use 1ant NIC, iqk will disturb BT music

		 * root cause is not clear now, is something

		 * related with 'mdelay' and Reg[0x948]

 Release Rx DMA. */

 Release Rx DMA if needed */

 Release Tx/Rx PCIE DMA. */

 treat rtl8723be chip as  MP version in default */

 cut version */

 Manufacture */

	/* MSR_INFRA == Link in infrastructure network;

	 * MSR_ADHOC == Link in ad hoc network;

	 * Therefore, check link state is necessary.

	 *

	 * MSR_AP == AP mode; link state is not cared here.

/* don't set REG_EDCA_BE_PARAM here

 * because mac80211 will send pkt when scan

enable system interrupt*/

synchronize_irq(rtlpci->pdev->irq);*/

 after power off we should do iqk again */

FIX MERGE */

YJ,add,120316*/

 2.4G default value */

2.4G default value*/

bit sign number to 8 bit sign number*/

bit sign number to 8 bit sign number*/

5G default value*/

bit0~2*/

 needs to be added */

parse xtal*/

 ODM_BOARD_BT */

 set channel plan from efuse */

 Does this one have a Toshiba SMID from group 1? */

 Does this one have a Toshiba SMID from group 2? */

 Does this one have a Samsung SMID? */

 Does this one have a Lenovo SMID? */

0xc3[6]*/

 override ant_num / ant_path */

 0:Low, 1:High, 2:From Efuse. */

 0:Idle, 1:None-SCO, 2:SCO, 3:From Counter. */

 0:Disable BT control A-MPDU, 1:Enable BT control A-MPDU. */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

 Set to software control. */

 Set to software control. */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

 drivers should parse below arrays and do the corresponding actions */

3 Power on  Array*/

3Radio off GPIO Array */

3Card Disable Array*/

3 Card Enable Array*/

3Suspend Array*/

3 Resume Array*/

3HWPDN Array*/

3 Enter LPS */

FW behavior*/

3 Leave LPS */

FW behavior*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

 Record it for next packet processing */

 (1)Hardware does not provide RSSI for CCK */

		/* (2)PWDB, Average PWDB cacluated by

		 * hardware (for rate adaptive)

 46 53 73 95 201301231630 */

 46 53 77 99 201301241630 */

 (3) Get Signal Quality (EVM) */

 (1)Get RSSI for HT rate */

 we will judge RF RX path now. */

 Translate DBM to percentage. */

		/* (2)PWDB, Average PWDB cacluated by

		 * hardware (for rate adaptive)

 (3)EVM of HT rate */

				/* Fill value in RFD, Get the first

				 * spatial stream only

	/* UI BSS List signal strength(in percentage),

	 * make it good looking, from 0~100.

	/* YP: packet_beacon is not initialized,

	 * this assignment is neccesary,

	 * otherwise it counld be true in this case

	 * the situation is much worse in Kernel 3.10

	/* hw will set status->decrypted true, if it finds the

	 * frame is open data frame or mgmt frame.

	 * So hw will not decryption robust managment frame

	 * for IEEE80211w but still set status->decrypted

	 * true, so here we should set it back to undecrypted

	 * for IEEE80211w frame, and mac80211 sw will help

	 * to decrypt it

	/* rate_idx: index of data rate into band's

	 * supported rates or MCS index if HT rates

	 * are use (RX_FLAG_HT)

 reserve 8 byte for AMPDU early mode */

 ptcb_desc->use_driver_rate = true; */

 Set TxRate and RTSRate in TxDesc  */

 This prevent Tx initial rate of new-coming packets */

 from being overwritten by retried  packet rate.*/

 tx report */

 if (rtlpriv->dm.useramask) { */

	/*beacon packet will only use the first

	 *descriptor defautly,and the own may not

	 *be cleared by the hardware

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

tmpval = tmpval & 0xff00ffff;*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

close ASPM for AMD defaultly */

	/* ASPM PS mode.

	 * 0 - Disable ASPM,

	 * 1 - Enable ASPM without Clock Req,

	 * 2 - Enable ASPM with Clock Req,

	 * 3 - Alwyas Enable ASPM with Clock Req,

	 * 4 - Always Enable ASPM without Clock Req.

	 * set defult to RTL8192CE:3 RTL8192E:2

Setting for PCI-E device */

Setting for PCI-E bridge */

	/* In Hw/Sw Radio Off situation.

	 * 0 - Default,

	 * 1 - From ASPM setting without low Mac Pwr,

	 * 2 - From ASPM setting with low Mac Pwr,

	 * 3 - Bus D3

	 * set default to RTL8192CE:0 RTL8192SE:2

	/* This setting works for those device with

	 * backdoor ASPM setting such as EPHY setting.

	 * 0 - Not support ASPM,

	 * 1 - Support ASPM,

	 * 2 - According to chipset.

 compatible 5G band 88ce just 2.4G band & smsp */

 for LPS & IPS */

	/* for ASPM, you can close aspm through

	 * set const_support_pciaspm = 0

low power: Disable 32k */

 for firmware buf */

 get bt coexist status */

	.maps[RTL_IMR_BCNDOK8] = IMR_BCNDOK8,     */   
	.maps[RTL_IMR_TIMEOUT2] = IMR_TIMEOUT2,*/

	.maps[RTL_IMR_TIMEOUT1] = IMR_TIMEOUT1,*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

boxcontent[0] &= ~(BIT(7));*/

boxcontent[0] |= (BIT(7));*/

 DTIM = (awake_intvl - 1) */

		/* hw->conf.ps_dtim_period or mac->vif->bss_conf.dtim_period

		 * is only used in swlps.

				/* Keep awake interval to 1 to prevent from

				 * decreasing coex performance

	/* parm[0]: bit0=0-->Disconnect, bit0=1-->Connect

	 *          bit1=0-->update Media Status to MACID

	 *          bit1=1-->update Media Status from MACID to MACID_End

	 * parm[1]: MACID, if this is INFRA_STA, MacID = 0

	 * parm[2]: MACID_End

 ->1 */

 ->5 */

 can be up to 1280 (tx_bndy=245) */

 page 0 beacon */

 page 1 beacon */

 page 2  ps-poll */

 page 3  null */

 page 4  probe_resp */

 page 5  probe_resp */

 page 6 qos null data */

 page 7 BT-qos null data */

	/*---------------------------------------------------------

	 *			(1) beacon

	 *---------------------------------------------------------

	/*-------------------------------------------------------

	 *			(2) ps-poll

	 *-------------------------------------------------------

	/*--------------------------------------------------------

	 *			(3) null data

	 *--------------------------------------------------------

	/*---------------------------------------------------------

	 *			(4) probe response

	 *---------------------------------------------------------

	/*---------------------------------------------------------

	 *			(5) QoS Null

	 *---------------------------------------------------------

	/*---------------------------------------------------------

	 *			(5) QoS Null

	 *---------------------------------------------------------

Should check FW support p2p or not.*/

 update CTWindow value. */

 hw only support 2 set of NoA */

			/* To control the register setting

			 * for which NOA

 config P2P NoA Descriptor Register */

Get Current TSF value */

 rst p2p circuit */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

 0,  -15.0dB */

 1,  -14.5dB */

 2,  -14.0dB */

 3,  -13.5dB */

 4,  -13.0dB */

 5,  -12.5dB */

 6,  -12.0dB */

 7,  -11.5dB */

 8,  -11.0dB */

 9,  -10.5dB */

 10, -10.0dB */

 11, -9.5dB */

 12, -9.0dB */

 13, -8.5dB */

 14, -8.0dB */

 15, -7.5dB */

 16, -7.0dB */

 17, -6.5dB */

 18, -6.0dB */

 19, -5.5dB */

 20, -5.0dB */

 21, -4.5dB */

 22, -4.0dB */

 23, -3.5dB */

 24, -3.0dB */

 25, -2.5dB */

 26, -2.0dB */

 27, -1.5dB */

 28, -1.0dB */

 29, -0.5dB */

 30, +0dB */

 31, +0.5dB */

 32, +1.0dB */

 33, +1.5dB */

 34, +2.0dB */

 35, +2.5dB */

 36, +3.0dB */

 37, +3.5dB */

 38, +4.0dB */

 39, +4.5dB */

 40, +5.0dB */

 41, +5.5dB */

 42, +6.0dB */

  0, -16.0dB */

  1, -15.5dB */

  2, -15.0dB */

  3, -14.5dB */

  4, -14.0dB */

  5, -13.5dB */

  6, -13.0dB */

  7, -12.5dB */

  8, -12.0dB */

  9, -11.5dB */

 10, -11.0dB */

 11, -10.5dB */

 12, -10.0dB */

 13, -9.5dB */

 14, -9.0dB */

 15, -8.5dB */

 16, -8.0dB */

 17, -7.5dB */

 18, -7.0dB */

 19, -6.5dB */

 20, -6.0dB */

 21, -5.5dB */

 22, -5.0dB */

 23, -4.5dB */

 24, -4.0dB */

 25, -3.5dB */

 26, -3.0dB */

 27, -2.5dB */

 28, -2.0dB */

 29, -1.5dB */

 30, -1.0dB */

 31, -0.5dB */

 32, +0dB */

  0, -16.0dB */

  1, -15.5dB */

  2, -15.0dB */

  3, -14.5dB */

  4, -14.0dB */

  5, -13.5dB */

  6, -13.0dB */

  7, -12.5dB */

  8, -12.0dB */

  9, -11.5dB */

 10, -11.0dB */

 11, -10.5dB */

 12, -10.0dB */

 13, -9.5dB */

 14, -9.0dB */

 15, -8.5dB */

 16, -8.0dB */

 17, -7.5dB */

 18, -7.0dB */

 19, -6.5dB */

 20, -6.0dB */

 21, -5.5dB */

 22, -5.0dB */

 23, -4.5dB */

 24, -4.0dB */

 25, -3.5dB */

 26, -3.0dB */

 27, -2.5dB */

 28, -2.0dB */

 29, -1.5dB */

 30, -1.0dB */

 31, -0.5dB */

 32, +0dB */

 0 UNKNOWN */

 1 REALTEK_90 */

 2 REALTEK_92SE */

 3 BROAD */

 4 RAL */

 5 ATH */

 6 CISCO */

 7 MARVELL */

 0 UNKNOWN */

 1 REALTEK_90 */

 2 REALTEK_92SE */

 3 BROAD */

 4 RAL */

 5 ATH */

 6 CISCO */

 7 MARV */

 Determine the minimum RSSI  */

 AP & ADHOC & MESH */

 If associated entry is found */

 If associated entry is found */

 Indicate Rx signal strength to FW. */

 AP,BT */

 8723BE does not support ODM_BB_DYNAMIC_TXPWR*/

Initilization ( 7 steps in total )*/

3 Initialize ThermalValues of RFCalibrateInfo*/

4 Calculate average thermal meter*/

 5 Calculate delta, delta_LCK, delta_IQK.*/

 6 If necessary, do LCK.*/

	/* 7 If necessary, move the index of

	 * swing table to adjust Tx power.

		/* 7.1 Get the final CCK_index and

		 * OFDM_index for each swing table.

 7.2 Handle boundary conditions of index.*/

not sure*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

 _GLNA */

 _GPA  */

 _ALNA */

 _APA  */

 _BT   */

 CUT ver */

 interface 2/2 */

 platform */

 interface 1/2 */

============== Value Defined Check ===============*/

QFN Type [15:12] and Cut Version [27:24] need to do value check*/

=============== Bit Defined Check ================*/

 We don't care [31:28] */

 BoardType is DONTCARE*/

GLNA*/

GPA*/

ALNA*/

APA*/

 BoardType of each RF path is matched*/

		/* In order not to disturb BT music

		 *	when wifi init.(1ant NIC only)

RF Content: radio_a_txt*/

 Get the exact value */

 Change the value to a relative value */

 switch ant to BT */

positive & negative condition*/

 positive condition*/

end*/

else*/

if , else if*/

negative condition*/

do nothing*/

	rtl_set_bbreg(hw, RFPGA0_ANALOGPARAMETER2, BIT(10), 1);*/

rtl_set_bbreg(hw, RFPGA0_ANALOGPARAMETER2, BIT(10), 0);*/

 leave IQK mode */

 switch to path A */

 enable path A PA in TXIQK mode */

 1. TX IQK */

 path-A IQK setting */

 IQK setting */

 path-A IQK setting */

 LO calibration setting */

 enter IQK mode */

 One shot, path A LOK & IQK */

 leave IQK mode */

 Check failed */

 if Tx not OK, ignore Rx */

 Allen 20131125 */

 if Tx not OK, ignore Rx */

 bit0 = 1 => Tx OK, bit1 = 1 => Rx OK */

 leave IQK mode */

 switch to path A */

 1 Get TXIMR setting */

 modify RXIQK mode table */

 LNA2 off, PA on for Dcut */

 IQK setting */

 path-A IQK setting */

 LO calibration setting */

 enter IQK mode */

 One shot, path A LOK & IQK */

 leave IQK mode */

 Check failed */

 if Tx not OK, ignore Rx */

 Allen 20131125 */

 if Tx not OK, ignore Rx */

 1 RX IQK */

 modify RXIQK mode table */

 LAN2 on, PA off for Dcut */

 PA, PAD setting */

 IQK setting */

 path-A IQK setting */

 LO calibration setting */

 enter IQK mode */

 One shot, path A LOK & IQK */

 leave IQK mode */

 Check failed */

 leave IQK mode */

 Allen 20131125 */

 if Tx is OK, check whether Rx is OK */

 leave IQK mode */

 switch to path B */

 enable path B PA in TXIQK mode */

 1 Tx IQK */

 IQK setting */

 path-A IQK setting */

 LO calibration setting */

 enter IQK mode */

 One shot, path B LOK & IQK */

 leave IQK mode */

 Check failed */

 Allen 20131125 */

 bit0 = 1 => Tx OK, bit1 = 1 => Rx OK */

 leave IQK mode */

 switch to path B */

 1 Get TXIMR setting */

 modify RXIQK mode table */

 open PA S1 & SMIXER */

 IQK setting */

 path-B IQK setting */

 LO calibration setting */

 enter IQK mode */

 One shot, path B TXIQK @ RXIQK */

 leave IQK mode */

 Check failed */

 if Tx not OK, ignore Rx */

 Allen 20131125 */

 1 RX IQK */

 <20121009, Kordan> RF Mode = 3 */

 open PA S1 & close SMIXER */

 IQK setting */

 path-B IQK setting */

 LO calibration setting */

 enter IQK mode */

 One shot, path B LOK & IQK */

 leave IQK mode */

 Check failed */

 Allen 20131125 */

 if Tx is OK, check whether Rx is OK */

 rtl_set_bbreg(hw, 0xca0, 0xF0000000, reg); */

 for path A and path B */

 is2t = true*/

 path A TX OK */

 path A RX OK */

 path B TX OK */

 path B RX OK */

 path_sel_rf */

BB Setting*/

 path A TX IQK */

 path A RX IQK */

 path B TX IQK */

 path B RX IQK */

 Back to BB mode, load original value */

rtl_set_rfreg(hw, RF90_PATH_B, 0xb0, 0xfffff, path_sel_rf);*/

 In order not to disturb BT music when wifi init.(1ant NIC only) */

mdelay(100);*/

 In order not to disturb BT music when wifi init.(1ant NIC only) */

 left antenna */

 IQK is merge from Merge Temp */

 path_sel_rf = 0 */

 Save RF Path */

 path_sel_rf = rtl_get_rfreg(hw, RF90_PATH_A, 0xb0, 0xfffff); */

 rtl_set_rfreg(hw, RF90_PATH_A, 0xb0, 0xfffff, path_sel_rf); */

rtl92c_dm_write_dig(hw);*/

			/* Don't check BEACON Q.

			 * BEACON Q is always not empty,

			 * because '_rtl8723be_cmd_send_packet'

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2007-2013  Realtek Corporation.*/

/***************************************************

 *		Debug related function

/***************************************************

 *		helper function

 before h2c to avoid race condition */

	/* fill req_num by op_code, and rtl_btc_btmpinfo_notify() use it

	 * to know message type

 Set OperVer */

 Set ReqNum */

 wait? */

 timeout */

 FIXME: Context is unclear. Is it allowed to block? */

 FIXME: Context is unclear. Is it allowed to block? */

 FIXME: Context is unclear. Is it allowed to block? */

 FIXME: Context is unclear. Is it allowed to block? */

 TODO: original/leave 32k low power */

	/* To void continuous deleteBA=>addBA=>deleteBA=>addBA

	 * This function is not allowed to continuous called

	 * It can only be called after 8 seconds

 over 8 seconds you can execute this function again. */

 cmd_buffer[0] and [1] is filled by halbtc_send_bt_mp_operation() */

 cmd_buffer[0] and [1] is filled by halbtc_send_bt_mp_operation() */

 cmd_buffer[0] and [1] is filled by halbtc_send_bt_mp_operation() */

 cmd_buffer[0] and [1] is filled by halbtc_send_bt_mp_operation() */

 cmd_buffer[0] and [1] is filled by halbtc_send_bt_mp_operation() */

	/* return value:

	 * [31:16] => connected port number

	 * [15:0]  => port connected bit define

 AP & ADHOC & MESH */

 TODO: P2P Connected Status */

************ 1Ant **************/

 set some bool type variables. */

 set some u1Byte type variables. */

 the following are some action which will be triggered */

 1Ant */

 the following are some action which will be triggered  */

wait for 8812/8821*/

 power status	 */

TODO*/

TODO*/

/************************************************************

 *		IO related function

if not "double word" write*/

 port id [2:0] = 0 */

 cmd_buffer[0] and [1] is filled by halbtc_send_bt_mp_operation() */

 cmd_buffer[0] and [1] is filled by halbtc_send_bt_mp_operation() */

 cmd_buffer[0] and [1] is filled by halbtc_send_bt_mp_operation() */

 need wait completion to return correct value */

 cmd_buffer[0] and [1] is filled by halbtc_send_bt_mp_operation() */

 need wait completion to return correct value */

 cmd_buffer[0] and [1] is filled by halbtc_send_bt_mp_operation() */

 need wait completion to return correct value */

 cmd_buffer[0] and [1] is filled by halbtc_send_bt_mp_operation() */

 cmd_buffer[0] and [1] is filled by halbtc_send_bt_mp_operation() */

 cmd_buffer[0] and [1] is filled by halbtc_send_bt_mp_operation() */

/*****************************************************************

 *         Extern functions called by other module

 set default antenna position to main  port */

 8723A has no this function */

	/* currently only 1ant we have to do the notification,

	 * once pnp is notified to sleep state, we have to leave LPS that

	 * we can sleep normally.

 Currently used by 8723b only, S0 or S1 */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2012  Realtek Corporation.*/

/***************************************************************

 * Description:

 *

 * This file is for RTL8723B Co-exist mechanism

 *

 * History

 * 2012/11/15 Cosa first check in.

 *

/***************************************************************

 * include files

/***************************************************************

 * Global variables, these are static variables

/***************************************************************

 * local function proto type if needed

/***************************************************************

 * local function start with halbtc8723b1ant_

 normal mode */

 normal mode */

 retry limit = 8 */

 normal mode */

 AMPDU timw = 0x38 * 32us */

 normal mode */

 disable cck 1/2 */

 disable cck 1/2/5.5, ofdm 6/9/12/18/24, mcs 0/1/2/3/4 */

	/**********************************************

	 *	Rx Aggregation related setting

 decide BT control aggregation buf size or not  */

	/* aggregation buf size, only work

	 * when BT control Rx aggregation size.

 real update aggregation setting  */

 trigger */

 reset counter */

	/* This part is for wifi FW and driver to update BT's status as

	 * disabled.

	 *

	 * The flow is as the following

	 * 1. disable BT

	 * 2. if all BT Tx/Rx counter = 0, after 6 sec we query bt info

	 * 3. Because BT will not rsp from mailbox, so wifi fw will know BT is

	 * disabled

	 *

	 * 4. FW will rsp c2h for BT that driver will know BT is disabled.

 reset counter */

 work around for HS mode. */

 check if Sco only */

 check if A2dp only */

 check if Pan only */

 check if Hid only */

 opCode, 0x6= Retry_Penalty */

 normal rate except MCS7/6/5, OFDM54/48/36 */

 MCS7 or OFDM54 */

 MCS6 or OFDM48 */

 MCS5 or OFDM36 */

 function enable */

 [31:16] = fw ver, [15:0] = fw sub ver */

 WiFi TRx Mask on */

		/* remove due to interrupt is disabled that polling c2h will

		 * fail and delay 100ms.

 Use H2C to set GNT_BT to HIGH */

 set grant_bt to high */

 set wlan_act control by PTA */

 BT select s0/s1 is controlled by BT */

 Use H2C to set GNT_BT to HIGH */

 set grant_bt to high */

 set wlan_act to always low */

 BT select s0/s1 is controlled by BT */

 BT select s0/s1 is controlled by WiFi */

		/* 0x4c[24:23]=00, Set Antenna control by BT_RFE_CTRL

		 * BT Vendor 0xac=0xf002

 Use H2C to set GNT_BT to LOW */

 BT calibration check */

 set grant_bt to PTA */

 set wlan_act control by PTA */

 BT select s0/s1 is controlled by WiFi */

			/* 0x4c[23] = 0, 0x4c[24] = 1

			 * Antenna control by WL/BT

 fixed internal switch S1->WiFi, S0->BT */

 tell firmware "no antenna inverse" */

 ext switch type */

 tell firmware "antenna inverse" */

 ext switch type */

 ext switch setting */

			/* 0x4c[23] = 1, 0x4c[24] = 0,

			 * Antenna control by 0x64

 Fix Ext switch Main->S1, Aux->S0 */

 tell firmware "no antenna inverse" */

 internal switch type */

 tell firmware "antenna inverse" */

 internal switch type */

 internal switch setting */

			/* Native power save TDMA, only for A2DP-only case

			 * 1/2/9/11 while wifi noisy threshold > 30

 no null-pkt */

 no tx-pause at BT-slot */

 0x778 = d/1 toggle, no dynamic slot */

 null-pkt */

 tx-pause at BT-slot */

 0x778 = d/1 toggle, dynamic slot */

 null-pkt */

 tx-pause at BT-slot */

 0x778 = d/1 toggle, no dynamic slot */

 native power save case */

 no null-pkt */

 no tx-pause at BT-slot */

 0x778 = d/1 toggle, no dynamic slot */

 psTdmaByte4Va is not define for 0x778 = d/1, 1/1 case */

 if (bt_link_info->slave_role) */

 0x778 = 0x1 at wifi slot (no blocking BT Low-Pri pkts) */

 set antenna control by SW	 */

 set antenna no toggle, control by antenna diversity */

			/* SoftAP only with no sta associated,BT disable ,TDMA

			 * mode for power saving

			 *

			 * here softap mode screen off will cost 70-80mA for

			 * phone

 for 1-Ant translate to 2-Ant	 */

 disable PS tdma */

 PTA Control */

 Software control, Antenna at BT side */

 2-Ant, 0x778=3, antenna control by ant diversity */

 update pre state */

	/*  0: no change, +1: increase WiFi duration,

	 * -1: decrease WiFi duration

 acquire the BT TRx retry count from BT_Info byte2 */

 no retry in the last 2-second duration */

				/* if retry count during continuous n*2 seconds

				 * is 0, enlarge WiFi duration

 <=3 retry in the last 2-second duration */

				/* if continuous 2 retry count(every 2 seconds)

				 * >0 and < 3, reduce WiFi duration

 avoid loop between the two levels */

					/* maximum of m = 20 ' will recheck if

					 * need to adjust wifi duration in

					 * maximum time interval 120 seconds

			/* retry count > 3, once retry count > 3, to reduce

			 * WiFi duration

 to avoid loop between the two levels */

				/* maximum of m = 20 ' will recheck if need to

				 * adjust wifi duration in maximum time interval

				 * 120 seconds

 recover to previous adjust type */

 already under LPS state */

 keep state under LPS, do nothing. */

 will leave LPS state, turn off psTdma first */

 NO PS state */

 will enter LPS state, turn off psTdma first */

 keep state under NO PS state, do nothing. */

 recover to original 32k low power setting */

 when coex force to enter LPS, do not enter 32k low power */

 power save must executed before psTdma */

 check if BT is disabled */

/*****************************************************

 *

 *	Non-Software Coex Mechanism start

 *

 SCO/HID/A2DP busy */

 tdma and coex table */

 HID */

 HID */

 A2DP */

 A2DP + PAN(OPP,FTP), HID + A2DP + PAN(OPP,FTP) */

 HID + A2DP */

 PAN(OPP,FTP), HID + PAN(OPP,FTP) */

 BT no-profile busy (0x9) */

 power save state */

 tdma and coex table */

 tdma and coex table */

 tdma and coex table */

 tdma and coex table */

 no special packet process for both WiFi and BT very busy */

 tdma and coex table */

 power save state */

 busy */

					/* no force LPS, no PS-TDMA,

					 * use pure TDMA

 tdma and coex table */

 wifi LPS/Busy */

 force coex mechanism to reset */

 sw all off */

 0xf0[15:12] --> Chip Cut information */

 enable TBTT interrupt */

 0x790[5:0] = 0x5 */

 Enable counter statistics */

 Antenna config */

 PTA parameter */

/**************************************************************

 * extern function start with ex_btc8723b1ant_

 enable BB, REG_SYS_FUNC_EN such that we can write 0x948 correctly. */

 set GRAN_BT = 1 */

 set WLAN_ACT = 0 */

	/* S0 or S1 setting and Local register setting(By the setting fw can get

	 * ant number, S0/S1, ... info)

	 *

	 * Local setting bit define

	 *	BIT0: "0" for no antenna inverse; "1" for antenna inverse

	 *	BIT1: "0" for internal switch; "1" for external switch

	 *	BIT2: "0" for one antenna; "1" for two antenna

	 * NOTE: here default all internal switch and 1-antenna ==> BIT1=0 and

	 * BIT2 = 0

 fixed at S0 for USB interface */

 antenna inverse */

 for PCIE and SDIO interface, we check efuse 0xc3[6] */

 set to S1 */

 set to S0 */

 antenna inverse */

 Sw mechanism	*/

 Fw mechanism	*/

 Hw setting */

 set PTA control */

 Force antenna setup for no scan result issue */

 non-connected scan */

 wifi is connected */

 non-connected scan */

 Force antenna setup for no scan result issue */

 non-connected scan */

 Force antenna setup for no scan result issue */

 Set CCK Tx/Rx high Pri except 11b mode */

 CCK Tx */

 CCK Rx */

 CCK Tx */

 CCK Rx */

 CCK Tx */

 CCK Rx */

 only 2.4G we need to inform bt the chnl mask */

				/* if APR PKT > 10 after connect, do not go to

				 * ActionWifiConnectedSpecificPacket(btcoexist)

 if 0xff, it means BT is under WHCK test */

 [3:0] */

			/* BT into is responded by BT FW and BT RF REG

			 * 0x3C != 0x15 => Need to switch BT TRx Mask

 BT TRx Mask lock 0x2c[0], 0x30[0] = 0 */

		/* Here we need to resend some wifi info to BT

		 * because bt is reset and loss of the info.

 BT already NOT ignore Wlan active, do nothing here.*/

 BT auto report already enabled, do nothing */

 check BIT2 first ==> check if bt is under inquiry or page scan */

 set link exist status */

 connection exists */

 Add Hi-Pri Tx/Rx counter to avoid false detection */

	/* mask profile bit for connect-ilde identification

	 * ( for CSR case: A2DP idle --> 0x41)

 connection exists but no busy */

		/* Driver do not leave IPS/LPS when driver is going to sleep, so

		 * BTCoexistence think wifi is still under IPS/LPS

		 *

		 * BT should clear UnderIPS/UnderLPS state to avoid mismatch

		 * state after wakeup.

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2012  Realtek Corporation.*/

/**************************************************************

 * Description:

 *

 * This file is for RTL8821A Co-exist mechanism

 *

 * History

 * 2012/11/15 Cosa first check in.

 *

/**************************************************************

 * include files

/**************************************************************

 * Global variables, these are static variables

/**************************************************************

 * local function proto type if needed

 *

 * local function start with btc8821a1ant_

 normal mode */

 normal mode */

 retry limit = 8 */

 normal mode */

 AMPDU time = 0x38 * 32us */

 normal mode */

 disable cck 1/2 */

 disable cck 1/2/5.5, ofdm 6/9/12/18/24, mcs 0/1/2/3/4 */

 Rx Aggregation related setting */

 decide BT control aggregation buf size or not */

 aggregation buf size, only work when BT control Rx agg size */

 real update aggregation setting */

 reset counter */

 trigger */

 work around for HS mode */

 check if Sco only */

 check if A2dp only */

 check if Pan only */

 check if Hid only */

 opCode, 0x6= Retry_Penalty*/

 normal rate except MCS7/6/5, OFDM54/48/36 */

 MCS7 or OFDM54 */

 MCS6 or OFDM48 */

 MCS5 or OFDM36 */

 function enable */

 0x4c[23] = 0, 0x4c[24] = 1  Antenna control by WL/BT */

			/* tell firmware "antenna inverse"

			 * WRONG firmware antenna control code, need fw to fix

			/* tell firmware "no antenna inverse"

			 * WRONG firmware antenna control code, need fw to fix

		/* 0x4c[24:23] = 00, Set Antenna control

		 * by BT_RFE_CTRL BT Vendor 0xac = 0xf002

 0x765 = 0x18 */

 0x765 = 0x0 */

 ext switch setting */

			/* SoftAP only with no sta associated, BT disable, TDMA

			 * mode for power saving

			 *

			 * here softap mode screen off will cost 70-80mA for

			 * phone

 disable PS tdma */

 PTA Control */

 Software control, Antenna at BT side */

 Software control, Antenna at WiFi side */

 under 5G */

 update pre state */

 already under LPS state */

 keep state under LPS, do nothing */

 will leave LPS state, turn off psTdma first */

 NO PS state*/

 will enter LPS state, turn off psTdma first */

 keep state under NO PS state, do nothing */

 recover to original 32k low power setting */

 when coex force to enter LPS, do not enter 32k low power */

 power save must executed before psTdma */

/***********************************************

 *

 *	Software Coex Mechanism start

 *

 SCO only or SCO+PAN(HS) */

 A2DP only / PAN(EDR) only/ A2DP+PAN(HS) */

 PAN(HS) only */

 PAN(EDR)+A2DP */

 HID+A2DP+PAN(EDR) */

/***********************************************

 *

 *	Non-Software Coex Mechanism start

 *

 tdma and coex table */

 tdma and coex table */

 SCO/HID-only busy */

 A2DP+HID busy */

 tdma and coex table */

 HID */

 A2DP */

 for low BT RSSI */

 HID+A2DP */

for low BT RSSI*/

 PAN(OPP, FTP), HID+PAN(OPP, FTP) */

 A2DP+PAN(OPP, FTP), HID+A2DP+PAN(OPP, FTP) */

 power save state */

 tdma and coex table */

 tdma and coex table */

 power save state */

 tdma and coex table */

 tdma and coex table */

 power save state*/

 A2DP */

 tdma and coex table */

btc8821a1ant_coex_all_off(btcoexist);*/

 wifi LPS/Busy */

	/* force to reset coex mechanism

	 * sw all off

 0x790[5:0] = 0x5 */

 Antenna config */

 PTA parameter */

	/* Enable counter statistics

	 * 0x76e[3] =1, WLAN_Act control by PTA

/**************************************************************

 * extern function start with ex_btc8821a1ant_

 Sw mechanism*/

 Fw mechanism */

 Hw setting */

 set PTA control */

 Force antenna setup for no scan result issue */

 non-connected scan */

 wifi is connected */

 non-connected scan */

 non-connected scan */

 only 2.4G we need to inform bt the chnl mask */

				/* if APR PKT > 10 after connect, do not go to

				 * btc8821a1ant_act_wifi_conn_sp_pkt

 [3:0] */

			/* BT into is responded by BT FW and BT RF REG 0x3C !=

			 * 0x15 => Need to switch BT TRx Mask

		/* Here we need to resend some wifi info to BT

		 * because bt is reset and lost the info

 check BIT2 first ==> check if bt is under inquiry or page scan */

 set link exist status */

 connection exists */

	/* mask profile bit for connect-ilde identification

	 * (for CSR case: A2DP idle --> 0x41)

 connection exists but no busy */

		/* BT should clear UnderIPS/UnderLPS state to avoid mismatch

		 * state after wakeup.

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2012  Realtek Corporation.*/

/***************************************************************

 * Description:

 *

 * This file is for RTL8723B Co-exist mechanism

 *

 * History

 * 2012/11/15 Cosa first check in.

 *

/**************************************************************

 * include files

/**************************************************************

 * Global variables, these are static variables

/**************************************************************

 * local function proto type if needed

/**************************************************************

 * local function start with btc8723b2ant_

 ============================================ */

	Rx Aggregation related setting		*/

 ============================================ */

 decide BT control aggregation buf size or not */

 aggregate buf size, only work when BT control Rx aggregate size */

 real update aggregation setting */

 reset counter */

 reset counter */

 trigger */

 work around for HS mode. */

 check if Sco only */

 check if A2dp only */

 check if Pan only */

 check if Hid only */

	/* There are several type of dacswing

	 * 0x18/ 0x10/ 0xc/ 0x8/ 0x4/ 0x6

 op_code, 0x6 = Retry_Penalty */

 normal rate except MCS7/6/5, OFDM54/48/36 */

 MCS7 or OFDM54 */

 MCS6 or OFDM48 */

 MCS5 or OFDM36 */

 function enable */

 Use H2C to set GNT_BT to High to avoid A2DP click */

 WiFi TRx Mask off */

 tell firmware "no antenna inverse" */

 tell firmware "antenna inverse" */

 ext switch type */

 int switch type */

 Use H2C to set GNT_BT to "Control by PTA"*/

 ext switch setting */

 0x4c[23] = 0, 0x4c[24] = 1 Ant controlled by WL/BT */

 fixed internal switch S1->WiFi, S0->BT */

 ext switch main at wifi */

 ext switch aux at wifi */

 internal switch */

 0x4c[23] = 0, 0x4c[24] = 1 Ant controlled by WL/BT */

 fixed ext switch, S1->Main, S0->Aux */

 fixed internal switch S1->WiFi, S0->BT */

 fixed internal switch S0->WiFi, S1->BT */

 for WiFi RSSI low or BT RSSI low */

 0x778 = 0x1 at wifi slot (no blocking BT Low-Pri pkts) */

 disable PS tdma */

 update pre state */

 already under LPS state */

 keep state under LPS, do nothing. */

 will leave LPS state, turn off psTdma first */

 NO PS state */

 will enter LPS state, turn off psTdma first */

 keep state under NO PS state, do nothing. */

 recover to original 32k low power setting */

 when coex force to enter LPS, do not enter 32k low power */

 power save must executed before psTdma */

 fw all off */

 sw all off */

 hw all off */

 force to reset coex mechanism*/

 office environment */

 sw all off */

0: no change, +1: increase WiFi duration, -1: decrease WiFi duration*/

accquire the BT TRx retry count from BT_Info byte2*/

 no retry in the last 2-second duration*/

				/* if retry count during continuous n*2

				 * seconds is 0, enlarge WiFi duration

 <=3 retry in the last 2-second duration*/

				/* if continuous 2 retry count(every 2

				 * seconds) >0 and < 3, reduce WiFi duration

 avoid loop between the two levels */

					/* maximum of m = 20 ' will recheck if

					 * need to adjust wifi duration in

					 * maximum time interval 120 seconds

			/* retry count > 3, once retry count > 3, to reduce

			 *  WiFi duration

 to avoid loop between the two levels */

				/* maximum of m = 20 ' will recheck if need to

				 * adjust wifi duration in maximum time interval

				 * 120 seconds

	/* if current PsTdma not match with the recorded one (scan, dhcp, ...),

	 * then we have to adjust it back to the previous recorded one.

 SCO only or SCO+PAN(HS) */

 for SCO quality at 11b/g mode */

 for SCO quality & wifi performance balance at 11n mode */

 for voice quality */

 sw mechanism */

 for HID at 11b/g mode */

 for HID quality & wifi performance balance at 11n mode */

 sw mechanism */

 A2DP only / PAN(EDR) only/ A2DP+PAN(HS) */

 define the office environment */

 driver don't know AP num in Linux, so we will never enter this if */

 sw mechanism */

 sw mechanism */

 sw mechanism */

 sw mechanism */

 PAN(HS) only */

 PAN(EDR) + A2DP */

 sw mechanism	*/

 sw mechanism */

 HID + A2DP + PAN(EDR) */

 sw mechanism */

 only 802.11N mode we have to dec bt power to 4 degree */

 need to check ap Number of Not */

 sw mechanism */

 sw all off */

 hw all off */

 for P2P */

 set wlan_act to low */

 WiFi standby while GNT_BT 0 -> 1 */

 Use H2C to set GNT_BT to HIGH */

 BT select s0/s1 is controlled by BT */

 BT select s0/s1 is controlled by WiFi */

/*********************************************************************

 *  extern function start with ex_btc8723b2ant_

 0x790[5:0] = 0x5 */

 Antenna config */

 PTA parameter */

 Enable counter statistics */

 0x76e[3] = 1, WLAN_ACT controlled by PTA */

 enable BB, REG_SYS_FUNC_EN such that we can write 0x948 correctly */

 fixed at S0 for USB interface */

 for PCIE and SDIO interface, we check efuse 0xc3[6] */

 set to S1 */

 set to S0 */

 Set BIT2 by default since it's 2ant case */

	/**

	 * S0 or S1 setting and Local register setting(By this fw can get

	 * ant number, S0/S1, ... info)

	 *

	 * Local setting bit define

	 *	BIT0: "0" : no antenna inverse; "1" : antenna inverse

	 *	BIT1: "0" : internal switch; "1" : external switch

	 *	BIT2: "0" : one antenna; "1" : two antennas

	 *

	 * NOTE: here default all internal switch and 1-antenna ==> BIT1=0 and

	 * BIT2 = 0

 fixed at S0 for USB interface */

 antenna inverse */

 for PCIE and SDIO interface, we check efuse 0xc3[6] */

 set to S0 */

 antenna inverse */

 Sw mechanism	*/

 Fw mechanism	*/

 Hw setting */

 only 2.4G we need to inform bt the chnl mask */

		/* Here we need to resend some wifi info to BT

		 * because BT is reset and loss of the info.

 BT already NOT ignore Wlan active, do nothing here.*/

 check BIT2 first ==> check if bt is under inquiry or page scan */

 set link exist status */

 connection exists */

 connection exists but no busy */

		/* Driver do not leave IPS/LPS when driver is going to sleep, so

		 * BTCoexistence think wifi is still under IPS/LPS

		 *

		 * BT should clear UnderIPS/UnderLPS state to avoid mismatch

		 * state after wakeup.

			/* Antenna config to set 0x765 = 0x0 (GNT_BT control by

			 * PTA) after initial

		/* for some BT speakers that High-Priority pkts appear before

		 * playing, this will cause HID exist

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2012  Realtek Corporation.*/

/**************************************************************

 *   include files

/**************************************************************

 *   Global variables, these are static variables

/**************************************************************

 *   local function proto type if needed

/**************************************************************

 *   local function start with btc8192e2ant_

 This function check if bt is disabled */

 normal mode */

 enable 2ss */

 disable 2ss */

 disable cck 1/2 */

 enable 2ss */

 disable 2ss */

 disable cck 1/2/5.5, ofdm 6/9/12/18/24, mcs 0/1/2/3/4 */

 enable 2ss */

 disable 2ss */

 normal mode */

 normal mode */

 retry limit = 8 */

 normal mode */

 AMPDU time = 0x38 * 32us */

	/*********************************************

	 *	Rx Aggregation related setting

 decide BT control aggregation buf size or not */

	/* aggregation buf size, only work

	 * when BT control Rx aggregation size.

 real update aggregation setting */

 reset counter */

 trigger */

 work around for HS mode. */

 check if Sco only */

 check if A2dp only */

 check if Pan only */

 check if Hid only */

	/* There are several type of dacswing

	 * 0x18/ 0x10/ 0xc/ 0x8/ 0x4/ 0x6

 Shrink RF Rx LPF corner */

		/* Resume RF Rx LPF corner

		 * After initialized, we can use coex_dm->btRf0x1eBackup

 BB AGC Gain Table */

 function enable */

 disable PS tdma */

 update pre state */

 switch ofdm path */

 switch cck patch */

 set rx 1ss or 2ss */

 fw all off */

 sw all off */

 hw all off */

 force to reset coex mechanism */

 accquire the BT TRx retry count from BT_Info byte2 */

 no retry in the last 2-second duration */

	/* if current PsTdma not match with

	 * the recorded one (when scan, dhcp...),

	 * then we have to adjust it back to the previous record one.

 SCO only or SCO+PAN(HS) */

 sw mechanism */

 sw mechanism */

 sw mechanism */

 A2DP only / PAN(EDR) only/ A2DP+PAN(HS) */

 sw mechanism */

 sw mechanism */

 sw mechanism */

 PAN(HS) only */

 PAN(EDR)+A2DP */

 sw mechanism	*/

 sw mechanism */

 HID+A2DP+PAN(EDR) */

 sw mechanism */

 sw mechanism */

 btc8192e2ant_coex_all_off(btcoexist); */

 backup rf 0x1e value */

 antenna sw ctrl to bt */

 antenna switch control parameter */

 coex parameters */

 0x790[5:0] = 0x5 */

 enable counter statistics */

 enable PTA */

 enable mailbox interface */

 enable PTA I2C mailbox */

 enable bt clock when wifi is disabled. */

 enable bt clock when suspend. */

/************************************************************

 *   extern function start with ex_btc8192e2ant_

 Sw mechanism	*/

 Fw mechanism	*/

 Hw setting */

 only 2.4G we need to inform bt the chnl mask */

 [3:0] */

		/* Here we need to resend some wifi info to BT

		 * because bt is reset and loss of the info.

			/* BT already NOT ignore Wlan active,

			 * do nothing here.

 check BIT2 first ==> check if bt is under inquiry or page scan */

 set link exist status */

 connection exists */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2012  Realtek Corporation.*/

/************************************************************

 * Description:

 *

 * This file is for RTL8821A Co-exist mechanism

 *

 * History

 * 2012/08/22 Cosa first check in.

 * 2012/11/14 Cosa Revise for 8821A 2Ant out sourcing.

 *

/************************************************************

 * include files

/************************************************************

 * Global variables, these are static variables

/************************************************************

 * local function proto type if needed

 *

 * local function start with btc8821a2ant_

 Rx Aggregation related setting */

 decide BT control aggregation buf size or not */

 aggregation buf size, works when BT control Rx aggregation size */

 real update aggregation setting */

 reset counter */

 reset counter */

 trigger */

 work around for HS mode. */

 check if Sco only */

 check if A2dp only */

 check if Pan only */

 check if Hid only */

	/* There are several type of dacswing

	 * 0x18/ 0x10/ 0xc/ 0x8/ 0x4/ 0x6

 opCode, 0x6 = Retry_Penalty */

 normal rate except MCS7/6/5, OFDM54/48/36 */

 MCS7 or OFDM54 */

 MCS6 or OFDM48 */

 MCS5 or OFDM36 */

 function enable */

  0x4c[23] = 0, 0x4c[24] = 1  Antenna control by WL/BT */

			/* tell firmware "antenna inverse"  ==> WRONG firmware

			 * antenna control code ==>need fw to fix

			/* tell firmware "no antenna inverse" ==> WRONG firmware

			 * antenna control code ==>need fw to fix

 ext switch setting */

 for WiFi RSSI low or BT RSSI low */

 disable PS tdma */

 update pre state */

 already under LPS state */

 keep state under LPS, do nothing */

 will leave LPS state, turn off psTdma first */

 NO PS state */

 will enter LPS state, turn off psTdma first */

 keep state under NO PS state, do nothing */

 recover to original 32k low power setting */

 when coex force to enter LPS, do not enter 32k low power */

 power save must executed before psTdma */

 fw all off */

 sw all off */

 hw all off */

 force to reset coex mechanism */

 define the office environment */

 sw all off */

 sw all off */

	 /* 0 : no change

	  * +1: increase WiFi duration

	  * -1: decrease WiFi duration

 accquire the BT TRx retry count from BT_Info byte2 */

 no retry in the last 2-second duration */

				/* if (retry count == 0) for 2*n seconds,

				 * make WiFi duration wider

 <=3 retry in the last 2-second duration */

				/* if retry count < 3 for 2*2 seconds,

				 * shrink wifi duration

 avoid bounce in two levels */

				/* m max value is 20, max time is 120 second,

				 * recheck if adjust WiFi duration.

			/* retry count > 3, if retry count > 3 happens once,

			 * shrink WiFi duration

 avoid bounce in two levels */

			/* m max value is 20, max time is 120 second,

			 * recheck if adjust WiFi duration.

	/* if current PsTdma not match with the recorded one

	 * (when scan, dhcp...), then we have to adjust it back to

	 * the previous recorded one.

 SCO only or SCO+PAN(HS)*/

 for SCO quality at 11b/g mode */

 for SCO quality & wifi performance balance at 11n mode */

 for voice quality */

 sw mechanism */

 for HID at 11b/g mode */

 for HID quality & wifi performance balance at 11n mode */

 sw mechanism */

 sw mechanism */

 A2DP only / PAN(EDR) only/ A2DP+PAN(HS) */

 sw mechanism */

 preserve identical branches for further fine-tuning */

 sw mechanism */

 sw mechanism */

 preserve identical branches for further fine-tuning */

 sw mechanism */

 PAN(HS) only */

 PAN(EDR)+A2DP */

 sw mechanism	 */

 preserve identical branches for further fine-tuning */

 for HID at 11b/g mode */

 for HID quality & wifi performance balance at 11n mode */

 fw mechanism */

 sw mechanism */

 fw mechanism */

 sw mechanism */

 HID+A2DP+PAN(EDR) */

 sw mechanism */

 only 802.11N mode we have to dec bt power to 4 degree */

 preserve identical branches for further fine-tuning */

 sw mechanism */

 sw all off */

 hw all off */

 for P2P */

 set wlan_act to low */

 WiFi goto standby while GNT_BT 0-->1 */

 Use H2C to set GNT_BT to HIGH */

/**************************************************************

 * extern function start with ex_btc8821a2ant_

 backup rf 0x1e value */

 0x790[5:0] = 0x5 */

 Antenna config */

 PTA parameter */

 Enable counter statistics */

 0x76e[3] = 1, WLAN_Act control by PTA */

 Set BIT2 by default since it's 2ant case */

	/**

	 * S0 or S1 setting and Local register setting(By the setting fw can get

	 * ant number, S0/S1, ... info)

	 *

	 * Local setting bit define

	 *	BIT0: "0" for no antenna inverse; "1" for antenna inverse

	 *	BIT1: "0" for internal switch; "1" for external switch

	 *	BIT2: "0" for one antenna; "1" for two antenna

	 * NOTE: here default all internal switch and 1-antenna ==> BIT1=0 and

	 * BIT2=0

 fixed at S0 for USB interface */

 antenna inverse */

 for PCIE and SDIO interface, we check efuse 0xc3[6] */

 set to S0 */

 antenna inverse */

 Sw mechanism*/

 Fw mechanism*/

 Hw setting*/

 Tx mgnt queue hang or not, 0x41b should = 0xf, ex: 0xd ==>hang*/

 only 2.4G we need to inform bt the chnl mask */

 [3:0] */

			/* BT into is responded by BT FW and BT RF REG 0x3C !=

			 * 0x01 => Need to switch BT TRx Mask

		/* Here we need to resend some wifi info to BT

		 * because bt is reset and loss of the info

				/* BT already NOT ignore Wlan active, do nothing

				 * here.

 check BIT2 first ==> check if bt is under inquiry or page scan*/

 set link exist status */

 connection exists */

 connection exists but no busy */

			/* Antenna config to set 0x765 = 0x0 (GNT_BT control by

			 * PTA) after initial

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2013  Realtek Corporation.*/

	/* move ant_num, bt_type and single_ant_path to

	 * exhalbtc_bind_bt_coex_withadapter()

		/* In some situation, it doesn't scan after leaving IPS, and

		 * this will cause btcoex in wrong state.

rtl_bt_dm_monitor();*/

 not response from BT FW then exit*/

 C2H_TRIG_BY_BT_FW = 1 */

 BT Firmware version response */

 It seems 'bt_disabled' is never be initialized or set. */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2016-2017  Realtek Corporation.*/

BB control*/

SW control*/

antenna mux switch */

switch to WL side controller and gnt_wl gnt_bt debug signal */

gnt_wl=1 , gnt_bt=0*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 2T */

 1T */

bit[7:5]*/

  polling autoload done. */

 0. RSV_CTRL 0x1C[7:0] = 0 unlock ISO/CLK/Power control register */

 Power on when re-enter from IPS/Radio off/card disable */

 enable SPS into PWM mode */

  auto enable WLAN */

 Enable Radio ,GPIO ,and LED function */

 release RF digital isolation */

 Reconsider when to do this operation after asking HWSD. */

 Enable MAC DMA/WMAC/SCHEDULE/SEC block */

		/* HIGH priority queue always present in the configuration of

 NOTE: This step done before writting REG_RQPN. */

 for WMM ,number of out-ep must more than or equal to 2! */

 NOTE: This step done before writting REG_RQPN. */

 TX DMA */

 for WMM */

 Shall not reach here! */

 for WMM ,CONFIG_OUT_EP_WIFI_MODE */

 typical setting */

 for WMM */

 Shall not reach here! */

 (TX_SELE_HQ|TX_SELE_LQ) */

 typical setting */

 for WMM */

 map all endpoint to Low queue */

 map all endpoint to High queue */

 Shall not reach here! */

 Accept all multicast address */

 Accept all management frames */

 Reject all control frame - default value is 0 */

 Accept all data frames */

 TODO: Remove these magic number */

	/* Change beacon AIFS to the largest number

	 * beacause test chip does not contension before sending beacon.

 TODO */

 for WMM */

 Get Rx PHY status in order to report RSSI and others. */

 To Fix MAC loopback mode fail. */

 HW SEQ CTRL */

 set 0x0 to 0xFF by tynli. Default enable HW SEQ NUM. */

 fixed USB interface interference issue */

 FIXED PA current issue */

	/* As this function can take a very long time (up to 350 ms)

	 * and can be called with irqs disabled, reenable the irqs

	 * to let the other devices continue being serviced.

	 *

	 * It is safe doing so since our own interrupts will only be enabled

	 * in a subsequent step.

 h2c */

/**************************************

a.	TXPAUSE 0x522[7:0] = 0xFF	Pause MAC TX queue

b.	RF path 0 offset 0x00 = 0x00	disable RF

c.	APSD_CTRL 0x600[7:0] = 0x40

d.	SYS_FUNC_EN 0x02[7:0] = 0x16	reset BB state machine

e.	SYS_FUNC_EN 0x02[7:0] = 0x14	reset BB state machine

0x40*/

0x16*/

0x14*/

		/*****************************

		f. MCUFWDL 0x80[7:0]=0		reset MCU ready status

		g. SYS_FUNC_EN 0x02[10]= 0	reset MCU reg, (8051 reset)

		h. SYS_FUNC_EN 0x02[15-12]= 5	reset MAC reg, DCORE

		i. SYS_FUNC_EN 0x02[10]= 1	enable MCU reg, (8051 enable)

 reset MCU ,8051 */

 reset MAC */

 enable MCU ,8051 */

 IF fw in RAM code, do reset */

 reset MCU ready status */

 8051 reset by self */

 if 8051 reset fail, reset MAC. */

 Reset MAC and Enable 8051 */

		/*****************************

		  Without HW auto state machine

		g.SYS_CLKR 0x08[15:0] = 0x30A3		disable MAC clock

		h.AFE_PLL_CTRL 0x28[7:0] = 0x80		disable AFE PLL

		i.AFE_XTAL_CTRL 0x24[15:0] = 0x880F	gated AFE DIG_CLOCK

		j.SYS_ISu_CTRL 0x00[7:0] = 0xF9		isolated digital to PON

/*****************************

k. SYS_FUNC_EN 0x03[7:0] = 0x44		disable ELDR runction

l. SYS_CLKR 0x08[15:0] = 0x3083		disable ELDR clock

m. SYS_ISO_CTRL 0x01[7:0] = 0x83	isolated ELDR to PON

/***************************************

j. GPIO_PIN_CTRL 0x44[31:0]=0x000

k. Value = GPIO_PIN_CTRL[7:0]

l.  GPIO_PIN_CTRL 0x44[31:0] = 0x00FF0000 | (value <<8); write ext PIN level

m. GPIO_MUXCFG 0x42 [15:0] = 0x0780

n. LEDCFG 0x4C[15:0] = 0x8080

 1. Disable GPIO[7:0] */

 2. Disable GPIO[10:8] */

 3. Disable LED0 & 1 */

		/*****************************

		n. LDOA15_CTRL 0x20[7:0] = 0x04	 disable A15 power

		o. LDOV12D_CTRL 0x21[7:0] = 0x54 disable digital core power

		r. When driver call disable, the ASIC will turn off remaining

		   clock automatically

/*****************************

h. SPS0_CTRL 0x11[7:0] = 0x23		enter PFM mode

i. APS_FSMCO 0x04[15:0] = 0x4802	set USB suspend

 ==== RF Off Sequence ==== */

 ==== Reset digital sequence   ====== */

  ==== Pull GPIO PIN to balance level and LED control ====== */

 ==== Disable analog sequence === */

==== RF Off Sequence ==== */

  ==== Reset digital sequence   ====== */

  ==== Pull GPIO PIN to balance level and LED control ====== */

  ==== Reset digital sequence   ====== */

  ==== Disable analog sequence === */

 after power off we should do iqk again */

========================================================================== */

FIX MERGE */

	/*

	 * Force beacon frame transmission even after receiving beacon frame

	 * from other ad hoc STA

	 *

	 *

	 * Reset TSF Timer to zero, added by Roger. 2008.06.24

	/* TODO: Modify later (Find the right parameters)

  /* Currently nothing happens here.

   * Traffic stops after some seconds in WPA2 802.11n mode.

   * Maybe because rtl8192cu chip should be set from here?

   * If I understand correctly, the realtek vendor driver sends some urbs

   * if its "here".

   *

   * This is maybe necessary:

   * rtlpriv->cfg->ops->fill_tx_cmddesc(hw, buffer, 1, 1, skb);

 TODO */

			/* if (mac->current_network.vender == HT_IOT_PEER_CISCO

			 *     && ((rate_cfg & 0x150) == 0)) {

			 *	  rate_cfg |= 0x010;

	/* rtl92c_fill_h2c_cmd() does USB I/O and will result in a

 to do - usb autosuspend */

 to do................... */

		/* For power down module, we need to enable register block

		 * contrl reg at 0x1c. Then enable power down control bit

		 * of register 0x04 BIT4 and BIT15 as 1.

 Enable register area 0x0-0xc. */

 Enter D3 or ASPM after GPIO had been done. */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 macro to shorten lines */

 Normal mass production chip. */

/**

 * rtl92c_llt_write - LLT table write access

 * @hw: Pointer to the ieee80211_hw structure.

 * @address: LLT logical address.

 * @data: LLT data content

 *

 * Realtek hardware access function.

 *

/**

 * rtl92c_init_llt_table - Init LLT table

 * @hw: Pointer to the ieee80211_hw structure.

 * @boundary: Page boundary.

 *

 * Realtek hardware access function.

 end of list */

	/* Make the other pages as ring buffer

	 * This ring buffer is used as beacon buffer if we config this MAC

	 *  as two MAC transfer.

	 * Otherwise used as local loopback buffer.

 Let last entry point to the start entry of ring buffer */

 Response Rate Set */

 SIFS (used in NAV) */

 Retry Limit */

 Set Data Auto Rate Fallback Retry Count register. */

	/* sequence: VO, VI, BE, BK ==> the same as 92C hardware design.

	 * referenc : enum nl80211_txq_q or ieee80211_set_wmm_default function.

 92C hardware register sequence is the same as queue number. */

 disable EDCCA count down, to reduce collison and retry */

	/* Update SIFS timing.  ??????????

 Set CCK/OFDM SIFS to be 10us. */

 TXOP */

 PIFS */

 AGGR BREAK TIME Register */

 init AMPDU aggregation number, tuning for Tx's TP, */

 Set ACK timeout */

==============================================================*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 2 bulk OUT, 1 bulk IN */

 1 bulk IN/OUT => map all endpoint to Low queue */

 1 bulk IN, 1 bulk OUT => map all endpoint to High queue */

 /map all endpoint to High queue */

 map all endpoint to Low queue */

 Normal and High queue */

 Low queue */

 for WMM */

 typical setting */

 for WMM */

 typical setting */

 Test chip doesn't support three out EPs. */

 endpoint mapping */

 VO */

 VI */

 BK */

 BE */

 =============================================================== */

/*----------------------------------------------------------------------

 *

 *	Rx handler

 *

rx_status->qual = stats->signal; */

 TODO: Error recovery. drop this skb or something. */

 TODO: is center_freq changed when doing scan? */

 TODO: Shall we add protection or just skip those two step? */

 Data rate */

  There is a phy status after this rx descriptor. */

/*----------------------------------------------------------------------

 *

 *	Tx handler

 *

======================================== trx ===============================*/

/*

 *	For HW recovery information

 Clear first */

 Clear all status */

 bFirstSeg; */

 bLastSeg; */

 Offset = 32 */

 Buffer size + command hdr */

 Fixed queue of Mgnt queue */

	/* Set NAVUSEHDR to prevent Ps-poll AId filed to be changed to error

 Hw set sequence number */

 set bit3 to 1. */

 use data rate which is set by Sw */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 for firmware buf */

 provide name of alternative file */

 get bt coexist status */

 rx */

 tx */

 endpoint mapping */

 2010-10-19 DID_USB_V3.4 */

=== Realtek demoboard ===*/

 Default ID */

***** 8188CU ********/

 RTL8188CTV */

 8188CE-VAU USB minCard */

 8188cu 1*1 dongle */

 8188cu 1*1 dongle, (b/g mode only) */

 8188cu Slim Solo */

 8188cu Slim Combo */

 8188RU High-power USB Dongle */

 8188CE-VAU USB minCard (b/g mode only) */

 8188RU in Alfa AWUS036NHR */

 RTL8188CUS-VL */

 8188 Combo for BC4 */

***** 8192CU ********/

 8192cu 2*2 */

 8192CE-VAU USB minCard */

=== Customer ID ===*/

***** 8188CU ********/

Belkin - Edimax*/

Belkin - ISY*/

Hercules - Edimax*/

Abocom - Abocom*/

Funai - Abocom*/

NetGear WNA1000M*/

NG WNA1000Mv2*/

ASUS-Edimax*/

Thinkware-CC&C*/

Sitecom - Edimax*/

Sitecom - Edimax*/

Sitecom - 150N */

Sitecom-WLA2100V2*/

NO Brand - Etop*/

NetweeN - Feixun*/

 HP - Lite-On ,8188CUS Slim Combo */

 AzureWave */

D-Link - Alpha*/

Planex - Etop*/

Planex - Abocom*/

SW-WF02-AD15 -Abocom*/

PCI - Edimax*/

TRENDnet - Cameo*/

Edimax - Edimax*/

Azwave 8188CE-VAU*/

 Russian customer -Azwave (8188CE-VAU  b/g mode only) */

 Feixun */

 NetweeN-Feixun */

 Netgear Cameo */

***** 8188 RU ********/

 Netcore */

***** 8188CUS Slim Solo********/

Xavi*/

Xavi*/

Xavi*/

***** 8188CUS Slim Combo ********/

Xavi*/

Xavi*/

Xavi*/

Planex-Vencer*/

***** 8192CU ********/

Belcom-SurfN300*/

Belcom-Sercomm*/

Belcom-Edimax*/

Zyxel -Abocom*/

ATKK-Gemtek*/

Funai -Abocom*/

Netgear-Sercomm*/

On Netwrks N300MA*/

ASUS-Edimax*/

Realtek 92CE-VAU*/

Sitecom-Edimax*/

Hawking-Edimax*/

D-Link-Cameo*/

D-Link-Alpha*/

D-Link-Alpha*/

D-Link DWA-131 */

Planex -Abocom*/

TRENDNet*/

TP-Link WN8200ND*/

Edimax -Edimax*/

 .suspend = rtl_usb_suspend, */

 .resume = rtl_usb_resume, */

 .reset_resume = rtl8192c_resume, */

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

 RF on */

 RF on */

 RF off */

 RF off */

Set REG_CR bit 8. DMA beacon by SW.*/

	/* Disable Hw protection for a time which revserd for Hw sending beacon.

	 * Fix download reserved page packet fail

	 * that access collision with the protection time.

	 * 2010.05.11. Added by tynli.

	/* Set FWHW_TXQ_CTRL 0x422[6]=0 to

	 * tell Hw the packet is not a real beacon frame.

 Clear beacon valid check bit */

 download rsvd page */

 check rsvd page download OK. */

 Enable Bcn */

 1. 40Mhz crystal source*/

	/* 2. 92E AFE parameter

	 * MP chip then check version

 HW Power on sequence */

 Release MAC IO register reset */

 Add for wakeup online */

 Release MAC IO register reset */

 Reported Tx status from HW for rate adaptive.*/

 Set RCR register */

 Set TCR register */

 Set TX/RX descriptor physical address -- HI part */

 Set TX/RX descriptor physical address(from OS API). */

	/* if we want to support 64 bit DMA, we should set it here,

	 * but now we do not support 64 bit DMA

Rx*/

 Init value for RRSR. */

 ARFB table 9 for 11ac 5G 2SS */

 ARFB table 10 for 11ac 5G 1SS */

 Set SLOT time */

 CF-End setting. */

 Set retry limit */

 BAR settings */

 Set Data / Response auto rate fallack retry count */

 Beacon related, for rate adaptive */

	/* Marked out by Bruce, 2010-09-09.

	 * This register is configured for the 2nd Beacon (multiple BSSID).

	 * We shall disable this register if we only support 1 BSSID.

	 * vivi guess 92d also need this, also 92d now doesnot set this reg

 TBTT prohibit hold time. Suggested by designer TimChen. */

 8 ms */

 For Rx TP. Suggested by SD1 Richard. Added by tynli. 2010.04.12.*/

 ACKTO for IOT issue. */

 Set Spec SIFS (used in NAV) */

 Set SIFS for CCK */

 Set SIFS for OFDM */

 Note Data sheet don't define */

 Set Multicast Address. 2009.01.07. by tynli. */

 write reg 0x350 Bit[26]=1. Enable debug port. */

 Suggested by DD Justin_tsai. */

	/* read reg 0x350 Bit[25] if 1 : RX hang

	 * read reg 0x350 Bit[24] if 1 : TX hang

	/* Revise Note: Follow the document "PCIe RX DMA Hang Reset Flow_v03"

	 * released by SD1 Alan.

	/* 1. disable register write lock

	 *	write 0x1C bit[1:0] = 2'h0

	 *	write 0xCC bit[2] = 1'b1

	/* 2. Check and pause TRX DMA

	 *	write 0x284 bit[18] = 1'b1

	 *	write 0x301 = 0xFF

 Already pause before the function for another reason. */

		/* 3. reset TRX function

		 *	write 0x100 = 0x00

	/* 4. Reset PCIe DMA

	 *	write 0x003 bit[0] = 0

	/* 5. Enable PCIe DMA

	 *	write 0x003 bit[0] = 1

		/* 6. enable TRX function

		 *	write 0x100 = 0xFF

		/* We should init LLT & RQPN and

		 * prepare Tx/Rx descrptor address later

		 * because MAC function is reset.

	/* 7. Restore PCIe autoload down bit

	 *	write 0xF8 bit[17] = 1'b1

	/* In MAC power on state, BB and RF maybe in ON state,

	 * if we release TRx DMA here

	 * it will cause packets to be started to Tx/Rx,

	 * so we release Tx/Rx DMA later.

		/* 8. release TRX DMA

		 *	write 0x284 bit[18] = 1'b0

		 *	write 0x301 = 0x00

	/* 9. lock system register

	 *	write 0xCC bit[2] = 1'b0

for Crystal 40 Mhz setting */

Forced the antenna b to wifi */

fw related variable initialize */

---- Set CCK and OFDM Block "ON"----*/

	/* Must set this,

	 * otherwise the rx sensitivity will be very pool. Maddest

Set Hardware(MAC default setting.)*/

Fixed LDPC rx hang issue. */

	/* MSR_INFRA == Link in infrastructure network;

	 * MSR_ADHOC == Link in ad hoc network;

	 * Therefore, check link state is necessary.

	 *

	 * MSR_AP == AP mode; link state is not cared here.

 don't set REG_EDCA_BE_PARAM here because mac80211 will send pkt when scan */

 rtl_write_dword(rtlpriv, REG_EDCA_BE_PARAM, u4b_ac_param); */

synchronize_irq(rtlpci->pdev->irq);*/

 Run LPS WL RFOFF flow */

 turn off RF */

 ==== Reset digital sequence   ======  */

 Reset MCU  */

 reset MCU ready status */

 HW card disable configuration. */

 Reset MCU IO Wrapper */

 lock ISO/CLK/Power control register */

 after power off we should do iqk again */

FIX MERGE */

YJ,add,120316*/

 2.4G default value */

5G default value*/

2.4G default value*/

5G default value*/

 set channel plan from efuse */

tx power*/

board type*/

 ODM_BOARD_BT */

parse xtal*/

antenna diversity*/

u8 mimo_ps = IEEE80211_SMPS_OFF;*/

 0:Low, 1:High, 2:From Efuse. */

 0:Idle, 1:None-SCO, 2:SCO, 3:From Counter. */

 0:Disable BT control A-MPDU, 1:Enable BT control A-MPDU. */

 Turn on AAP (RCR:bit 0) for promicuous mode. */

 Set BIT0 */

 Clear BIT0 */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

 drivers should parse below arrays and do the corresponding actions */

3 Power on  Array*/

3Radio off GPIO Array */

3Card Disable Array*/

3 Card Enable Array*/

3Suspend Array*/

3 Resume Array*/

3HWPDN Array*/

3 Enter LPS */

FW behavior*/

3 Leave LPS */

FW behavior*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

 Record it for next packet processing */

 CCK Driver info Structure is not the same as OFDM packet. */

		/* (1)Hardware does not provide RSSI for CCK

		 * (2)PWDB, Average PWDB cacluated by

		 * hardware (for rate adaptive)

VGA_idx = 27~2*/

VGA_idx = 2~0*/

VGA_idx = 7~5*/

VGA_idx = 7~4*/

VGA_idx = 7~0*/

VGA_idx = 5~0*/

 (3) Get Signal Quality (EVM) */

 (1)Get RSSI for HT rate */

 we will judge RF RX path now. */

 Translate DBM to percentage. */

		/* (2)PWDB, Average PWDB cacluated by

		 * hardware (for rate adaptive)

 (3)EVM of HT rate */

				/* Fill value in RFD, Get the first

				 * spatial stream only

	/* UI BSS List signal strength(in percentage),

	 * make it good looking, from 0~100.

	/* hw will set status->decrypted true, if it finds the

	 * frame is open data frame or mgmt frame.

	 * So hw will not decryption robust managment frame

	 * for IEEE80211w but still set status->decrypted

	 * true, so here we should set it back to undecrypted

	 * for IEEE80211w frame, and mac80211 sw will help

	 * to decrypt it

	/* rate_idx: index of data rate into band's

	 * supported rates or MCS index if HT rates

	 * are use (RX_FLAG_HT)

	 * Notice: this is diff with windows define

in Windows, this == Rx_92EE_Interrupt*/

tx desc size*/

 tx desc addr */

 Reset */

 Clear all status */

 This if needs braces */

 don't using extendsion mode. */

 reserve 8 byte for AMPDU early mode */

set_tx_desc_pwr_status(pdesc, pwr_status);*/

 Set TxRate and RTSRate in TxDesc  */

 This prevent Tx initial rate of new-coming packets */

 from being overwritten by retried  packet rate.*/

set_tx_desc_rts_rate(pdesc, 0x08); */

 set_tx_desc_tx_rate(pdesc, 0x0b); */

 tx report */

 make sure tx desc is available by caller */

 don't need to update ring->cur_tx_wp */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

close ASPM for AMD defaultly */

	/**

	 * ASPM PS mode.

	 * 0 - Disable ASPM,

	 * 1 - Enable ASPM without Clock Req,

	 * 2 - Enable ASPM with Clock Req,

	 * 3 - Alwyas Enable ASPM with Clock Req,

	 * 4 - Always Enable ASPM without Clock Req.

	 * set defult to RTL8192CE:3 RTL8192E:2

Setting for PCI-E device */

Setting for PCI-E bridge */

	/**

	 * In Hw/Sw Radio Off situation.

	 * 0 - Default,

	 * 1 - From ASPM setting without low Mac Pwr,

	 * 2 - From ASPM setting with low Mac Pwr,

	 * 3 - Bus D3

	 * set default to RTL8192CE:0 RTL8192SE:2

	/**

	 * This setting works for those device with

	 * backdoor ASPM setting such as EPHY setting.

	 * 0 - Not support ASPM,

	 * 1 - Support ASPM,

	 * 2 - According to chipset.

just 2.4G band*/

 for LPS & IPS */

	/* for ASPM, you can close aspm through

	 * set const_support_pciaspm = 0

 for early mode */

low power */

 for firmware buf */

 request fw */

 get bt coexist status */

need check*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

	/* 1. Prevent race condition in setting H2C cmd.

	 * (copy from MgntActSet_RF_State().)

 2. Find the last BOX number which has been writen. */

 3. Check if the box content is empty. */

		/* If Fw has not read the last

		 * H2C cmd, break and give up this H2C.

 4. Fill the H2C cmd into box */

boxcontent[0] &= ~(BIT(7));*/

boxcontent[0] |= (BIT(7));*/

 DTIM = (awake_intvl - 1) */

		/* hw->conf.ps_dtim_period or mac->vif->bss_conf.dtim_period

		 * is only used in swlps.

				/* Keep awake interval to 1 to prevent from

				 * decreasing coex performance

	/* parm[0]: bit0=0-->Disconnect, bit0=1-->Connect

	 *          bit1=0-->update Media Status to MACID

	 *          bit1=1-->update Media Status from MACID to MACID_End

	 * parm[1]: MACID, if this is INFRA_STA, MacID = 0

	 * parm[2]: MACID_End

 ->1 */

 ->5 */

 page 0 beacon */

 page 1 beacon */

 page 2  ps-poll */

 page 3  null */

 page 4  probe_resp */

 page 5  probe_resp */

 page 6 qos null data */

 page 7 BT-qos null data */

	/*---------------------------------------------------------

	 *			(1) beacon

	 *---------------------------------------------------------

	/*-------------------------------------------------------

	 *			(2) ps-poll

	 *--------------------------------------------------------

	/*--------------------------------------------------------

	 *			(3) null data

	 *---------------------------------------------------------

	/*---------------------------------------------------------

	 *			(4) probe response

	 *----------------------------------------------------------

	/*---------------------------------------------------------

	 *			(5) QoS null data

	 *----------------------------------------------------------

	/*---------------------------------------------------------

	 *			(6) BT QoS null data

	 *----------------------------------------------------------

Shoud check FW support p2p or not.*/

 update CTWindow value. */

 hw only support 2 set of NoA */

 To control the register setting for which NOA*/

 config P2P NoA Descriptor Register */

Get Current TSF value */

 rst p2p circuit */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

reset false alarm counter registers*/

update ofdm counter*/

reset CCK CCA counter*/

reset CCK FA counter*/

 AP,BT */

	/*It seems the following values are not initialized.

	  *According to Windows code,

	  *these value will only be valid with JAGUAR chips

 Rx EVM */

 Rx SNR */

 Rx Cfo_Short */

 Rx Cfo_Tail */

 Determine the minimum RSSI  */

 AP & ADHOC & MESH */

 If associated entry is found */

 If associated entry is found */

 Indicate Rx signal strength to FW. */

not sure*/

b_bias_on_rx = false;*/

 NIC: 2: sec is below,  1: sec is above */

		/* Primary channel is above

		 * NOTE: duplicate CTS can remove this condition

 PrimaryCCA->PriCCA_flag==1 */

 default */

 Disable CFO tracking for BT */

 Reset Crystal Cap */

	/* Threshold Adjustment:

	 * when RSSI state trends to go up one or two levels,

	 * make sure RSSI is high enough.

	 * Here GoUpGap is added to solve

	 * the boundary's level alternation issue.

 Decide RATRState by RSSI. */

 collision_state == 0 */

 MCS13~MCS15,  1SS, G-mode */

 collision_state == 0 */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

need efuse define*/

SupportPlatform */

RF Content: radio_a_txt*/

RF Content: radio_b_txt*/

 Get the exact value */

 Change the value to a relative value */

This line is the start line of branch.*/

 to protect READ_NEXT_PAIR not overrun */

Discard the following pairs*/

 prevent from for-loop += 2*/

					/* Configure matched pairs and

					 * skip to end of if-else.

This line is the start line of branch.*/

 to protect READ_NEXT_PAIR not overrun */

Discard the following pairs*/

 prevent from for-loop += 2*/

					/* Configure matched pairs and

					 * skip to end of if-else.

This line is the start line of branch.*/

 to protect READ_NEXT_PAIR not overrun */

Discard the following pairs*/

 prevent from for-loop += 2*/

					/* Configure matched pairs and

					 * skip to end of if-else.

This line is the start line of branch.*/

 to protect READ_NEXT_PAIR not overrun */

Discard the following pairs*/

 prevent from for-loop += 2*/

					/* Configure matched pairs and

					 * skip to end of if-else.

 OFDM-1T*/

 BW20-1S, BW20-2S */

 BW40-1S, BW40-2S */

 path-A IQK setting */

 PA/PAD controlled by 0x0 */

LO calibration setting*/

One shot, path A LOK & IQK*/

 PA/PAD controlled by 0x0 */

 LO calibration setting */

One shot, path B LOK & IQK*/

Get TXIMR Setting*/

Modify RX IQK mode table*/

PA/PAD control by 0x56, and set = 0x0*/

enter IQK mode*/

IQK Setting*/

path a IQK setting*/

LO calibration Setting*/

one shot,path A LOK & iqk*/

 Check failed */

	PA/PAD controlled by 0x0 */

RX IQK*/

Modify RX IQK mode table*/

PA/PAD control by 0x56, and set = 0x0*/

enter IQK mode*/

IQK Setting*/

path a IQK setting*/

LO calibration Setting*/

one shot,path A LOK & iqk*/

Check failed*/

PA/PAD controlled by 0x0*/

leave IQK mode*/

if Tx is OK, check whether Rx is OK*/

Get TXIMR Setting*/

Modify RX IQK mode table*/

PA/PAD all off*/

IQK Setting*/

path a IQK setting*/

LO calibration Setting*/

one shot,path A LOK & iqk*/

 Check failed */

	PA/PAD controlled by 0x0 */

RX IQK*/

Modify RX IQK mode table*/

PA/PAD all off*/

enter IQK mode*/

IQK Setting*/

path b IQK setting*/

LO calibration Setting*/

one shot,path A LOK & iqk*/

Check failed*/

PA/PAD controlled by 0x0*/

leave IQK mode*/

if Tx is OK, check whether Rx is OK*/

, is2t = true*/;

path A TX OK*/

path A RX OK*/

path B TX OK*/

path B RX OK*/

BB setting*/

 Page B init*/

 IQ calibration setting*/

 Turn Path B ADDA on */

 IQ calibration setting */

 Back to BB mode, load original value */

 Reload ADDA power saving parameters */

 Reload MAC parameters */

 Restore RX initial gain */

 load 0xe30 IQC default value */

		/* We use the RF definition of MAIN and AUX,

		 * left antenna and right antenna repectively.

		 * Default output at AUX.

 To Fix BSOD when final_candidate is 0xff */

 8192eebt */

rtl_write_byte(rtlpriv, REG_APSD_CTRL, 0x00);*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2013  Realtek Corporation.*/

 RF on */

 RF on */

 RF off */

 RF off */

0x2600   MaxRxBuff=10k-max(TxReportSize(64*8), WOLPattern(16*24)) */

Disable XTAL OUTPUT for power saving. YJ,add,111206. */

Auto Power Down to CHIP-off State*/

 HW Power on sequence */

Add for wake up online*/

	/* if we want to support 64 bit DMA, we should set it here,

	 * but now we do not support 64 bit DMA

Enable RX DMA */

Early mode enable*/

	/* As this function can take a very long time (up to 350 ms)

	 * and can be called with irqs disabled, reenable the irqs

	 * to let the other devices continue being serviced.

	 *

	 * It is safe doing so since our own interrupts will only be enabled

	 * in a subsequent step.

fw related variable initialize */

	/* because last function modify RCR, so we update

	 * rcr var here, or TP will unstable for receive_config

	 * is wrong, RX RCR_ACRC32 will cause TP unstabel & Rx

	 * RCR_APP_ICV will cause mac80211 unassoc for cisco 1252

	/* MSR_INFRA == Link in infrastructure network;

	 * MSR_ADHOC == Link in ad hoc network;

	 * Therefore, check link state is necessary.

	 *

	 * MSR_AP == AP mode; link state is not cared here.

/* don't set REG_EDCA_BE_PARAM here

 * because mac80211 will send pkt when scan

	/* there are some C2H CMDs have been sent

	 * before system interrupt is enabled, e.g., C2H, CPWM.

	 * So we need to clear all C2H events that FW has notified,

	 * otherwise FW won't schedule any commands anymore.

enable system interrupt*/

synchronize_irq(rtlpci->pdev->irq);*/

 after power off we should do iqk again */

FIX MERGE */

rtl88ee_enable_interrupt(hw);*/

rtl88ee_disable_interrupt(hw);*/

rtl88ee_enable_interrupt(hw);*/

YJ,add,120316*/

 2.4G default value */

2.4G default value*/

bit sign number to 8 bit sign number*/

bit sign number to 8 bit sign number*/

5G default value*/

bit0~2*/

 set channel plan from efuse */

tx power*/

board type*/

Wake on wlan*/

parse xtal*/

antenna diversity*/

u8 mimo_ps = IEEE80211_SMPS_OFF;*/

u8 mimo_ps = IEEE80211_SMPS_OFF;*/

}*/

 0:Low, 1:High, 2:From Efuse. */

 0:Disable BT control A-MPDU, 1:Enable BT control A-MPDU. */

 Config to 1T1R. */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2013  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2013  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2013  Realtek Corporation.*/

 drivers should parse below arrays and do the corresponding actions */

3 Power on  Array*/

3Radio off GPIO Array */

3Card Disable Array*/

3 Card Enable Array*/

3Suspend Array*/

3 Resume Array*/

3HWPDN Array*/

3 Enter LPS */

FW behavior*/

3 Leave LPS */

FW behavior*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2013  Realtek Corporation.*/

 Record it for next packet processing */

 CCK Driver info Structure is not the same as OFDM packet. */

		/* (1)Hardware does not provide RSSI for CCK

		 * (2)PWDB, Average PWDB cacluated by

		 * hardware (for rate adaptive)

VGA_idx = 27~2*/

VGA_idx = 2~0*/

VGA_idx = 7~5*/

VGA_idx = 7~4*/

VGA_idx = 7~0*/

VGA_idx = 5~0*/

 CCK gain is smaller than OFDM/MCS gain,  */

 so we add gain diff by experiences, the val is 6 */

		/* modify the offset to make the same

		 * gain index with OFDM.

 (3) Get Signal Quality (EVM) */

 (1)Get RSSI for HT rate */

 we will judge RF RX path now. */

 Translate DBM to percentage. */

 Get Rx snr value in DB */

 Record Signal Strength for next packet */

		/* (2)PWDB, Average PWDB cacluated by

		 * hardware (for rate adaptive)

 (3)EVM of HT rate */

				/* Fill value in RFD, Get the first

				 * spatial stream onlyi

	/* UI BSS List signal strength(in percentage),

	 * make it good looking, from 0~100.

HW antenna diversity*/

	/* hw will set status->decrypted true, if it finds the

	 * frame is open data frame or mgmt frame.

	 * So hw will not decryption robust managment frame

	 * for IEEE80211w but still set status->decrypted

	 * true, so here we should set it back to undecrypted

	 * for IEEE80211w frame, and mac80211 sw will help

	 * to decrypt it

	/* rate_idx: index of data rate into band's

	 * supported rates or MCS index if HT rates

	 * are use (RX_FLAG_HT)

	 * Notice: this is diff with windows define

 reserve 8 byte for AMPDU early mode */

set_tx_desc_pwr_status(pdesc, pwr_status);*/

 Set TxRate and RTSRate in TxDesc  */

 This prevent Tx initial rate of new-coming packets */

 from being overwritten by retried  packet rate.*/

set_tx_desc_rts_rate(pdesc, 0x08); */

 set_tx_desc_tx_rate(pdesc, 0x0b); */

	/*beacon packet will only use the first

	 *descriptor defautly,and the own may not

	 *be cleared by the hardware

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2013  Realtek Corporation.*/

tmpval = tmpval & 0xff00ffff;*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2013  Realtek Corporation.*/

close ASPM for AMD defaultly */

	/* ASPM PS mode.

	 * 0 - Disable ASPM,

	 * 1 - Enable ASPM without Clock Req,

	 * 2 - Enable ASPM with Clock Req,

	 * 3 - Alwyas Enable ASPM with Clock Req,

	 * 4 - Always Enable ASPM without Clock Req.

	 * set defult to RTL8192CE:3 RTL8192E:2

Setting for PCI-E device */

Setting for PCI-E bridge */

	/* In Hw/Sw Radio Off situation.

	 * 0 - Default,

	 * 1 - From ASPM setting without low Mac Pwr,

	 * 2 - From ASPM setting with low Mac Pwr,

	 * 3 - Bus D3

	 * set default to RTL8192CE:0 RTL8192SE:2

	/* This setting works for those device with

	 * backdoor ASPM setting such as EPHY setting.

	 * 0 - Not support ASPM,

	 * 1 - Support ASPM,

	 * 2 - According to chipset.

 compatible 5G band 88ce just 2.4G band & smsp */

 for LPS & IPS */

	/* for ASPM, you can close aspm through

	 * set const_support_pciaspm = 0

 for firmware buf */

 for early mode */

low power */

 get bt coexist status */

need check*/

	.maps[RTL_IMR_BCNDOK8] = IMR_BCNDOK8,     */   
	.maps[RTL_IMR_TIMEOUT2] = IMR_TIMEOUT2,*/

	.maps[RTL_IMR_TIMEOUT1] = IMR_TIMEOUT1,*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2013  Realtek Corporation.*/

boxcontent[0] &= ~(BIT(7));*/

boxcontent[0] |= (BIT(7));*/

YJ, temp, 120316. FW now not support RLBM=2.*/

 ->1 */

 ->5 */

 page 0 beacon */

 page 1 beacon */

 page 2  ps-poll */

 page 3  null */

 page 4  probe_resp */

 page 5  probe_resp */

	/*---------------------------------------------------------

	 *			(1) beacon

	 *---------------------------------------------------------

	/*-------------------------------------------------------

	 *			(2) ps-poll

	 *--------------------------------------------------------

	/*--------------------------------------------------------

	 *			(3) null data

	 *---------------------------------------------------------

	/*---------------------------------------------------------

	 *			(4) probe response

	 *----------------------------------------------------------

Should check FW support p2p or not.*/

 update CTWindow value. */

 hw only support 2 set of NoA */

 To control the register setting for which NOA*/

 config P2P NoA Descriptor Register */

Get Current TSF value */

 rst p2p circuit */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2013  Realtek Corporation.*/

 0, +6.0dB */

 1, +5.5dB */

 2, +5.0dB */

 3, +4.5dB */

 4, +4.0dB */

 5, +3.5dB */

 6, +3.0dB */

 7, +2.5dB */

 8, +2.0dB */

 9, +1.5dB */

 10, +1.0dB */

 11, +0.5dB */

 12, +0dB */

 13, -0.5dB */

 14, -1.0dB */

 15, -1.5dB */

 16, -2.0dB */

 17, -2.5dB */

 18, -3.0dB */

 19, -3.5dB */

 20, -4.0dB */

 21, -4.5dB */

 22, -5.0dB */

 23, -5.5dB */

 24, -6.0dB */

 25, -6.5dB */

 26, -7.0dB */

 27. -7.5dB */

 28, -8.0dB */

 29, -8.5dB */

 30, -9.0dB */

 31, -9.5dB */

 32, -10.0dB */

 33, -10.5dB */

 34, -11.0dB */

 35, -11.5dB */

 36, -12.0dB */

 37, -12.5dB */

 38, -13.0dB */

 39, -13.5dB */

 40, -14.0dB */

 41, -14.5dB */

 42, -15.0dB */

 0, +0dB */

 1, -0.5dB */

 2, -1.0dB */

 3, -1.5dB */

 4, -2.0dB */

 5, -2.5dB */

 6, -3.0dB */

 7, -3.5dB */

 8, -4.0dB */

 9, -4.5dB */

 10, -5.0dB */

 11, -5.5dB */

 12, -6.0dB */

 13, -6.5dB */

 14, -7.0dB */

 15, -7.5dB */

 16, -8.0dB */

 17, -8.5dB */

 18, -9.0dB */

 19, -9.5dB */

 20, -10.0dB*/

 21, -10.5dB*/

 22, -11.0dB*/

 23, -11.5dB*/

 24, -12.0dB*/

 25, -12.5dB*/

 26, -13.0dB*/

 27, -13.5dB*/

 28, -14.0dB*/

 29, -14.5dB*/

 30, -15.0dB*/

 31, -15.5dB*/

 32, -16.0dB*/

 0, +0dB */

 1, -0.5dB */

 2, -1.0dB */

 3, -1.5dB */

 4, -2.0dB */

 5, -2.5dB */

 6, -3.0dB */

 7, -3.5dB */

 8, -4.0dB */

 9, -4.5dB */

 10, -5.0dB */

 11, -5.5dB */

 12, -6.0dB */

 13, -6.5dB */

 14, -7.0dB */

 15, -7.5dB */

 16, -8.0dB */

 17, -8.5dB */

 18, -9.0dB */

 19, -9.5dB */

 20, -10.0dB*/

 21, -10.5dB*/

 22, -11.0dB*/

 23, -11.5dB*/

 24, -12.0dB*/

 25, -12.5dB*/

 26, -13.0dB*/

 27, -13.5dB*/

 28, -14.0dB*/

 29, -14.5dB*/

 30, -15.0dB*/

 31, -15.5dB*/

 32, -16.0dB*/

 AP & ADHOC & MESH */

 If associated entry is found */

 If associated entry is found */

 Indicate Rx signal strength to FW. */

bool is2t = false;*/

u8 index_for_channel;*/

	/*0.1 the following TWO tables decide the

	 *final index of OFDM/CCK swing table

Initilization (7 steps in total) */

1. Query OFDM Default Setting: Path A*/

2.Query CCK default setting From 0xa24*/

3 Initialize ThermalValues of RFCalibrateInfo*/

4 Calculate average thermal meter*/

 5 Calculate delta, delta_LCK, delta_IQK.*/

 6 If necessary, do LCK.*/

	/* 7 If necessary, move the index of

	 * swing table to adjust Tx power.

		/* 7.1 Get the final CCK_index and OFDM_index for each

		 * swing table.

 7.2 Handle boundary conditions of index.*/

7.3Configure the Swing Table to adjust Tx Power.*/

MAC Setting*/

Pin Setting*/

OFDM Setting*/

CCK Setting*/

MAC Setting*/

Pin Setting*/

OFDM Setting*/

CCK Setting*/

TX Setting*/

MAC Setting*/

Pin Setting*/

OFDM Setting*/

antenna mapping table*/

TX Setting*/

for sta its self*/

find entry, break*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2013  Realtek Corporation.*/

need efuse define*/

SupportPlatform */

RF Content: radio_a_txt*/

This line is the start line of branch.*/

 to protect READ_NEXT_PAIR not overrun */

Discard the following (offset, data) pairs*/

 prevent from for-loop += 2*/

			} else { /* Configure matched pairs and skip

				  * to end of if-else.

This line is the start line of branch.*/

 to protect READ_NEXT_PAIR not overrun */

Discard the following (offset, data) pairs*/

 prevent from for-loop += 2*/

			} else { /* Configure matched pairs and skip

				  * to end of if-else.

don't need the hw_body*/

 skip the pair of expression*/

 to protect 'i+1' 'i+2' not overrun */

This line is the start line of branch.*/

 to protect READ_NEXT_PAIR not overrun */

Discard the following (offset, data) pairs*/

 prevent from for-loop += 2*/

			} else { /* Configure matched pairs and

				  * skip to end of if-else.

-8~7 */

	rtl_set_bbreg(hw, RFPGA0_ANALOGPARAMETER2, BIT(10), 1);*/

rtl_set_bbreg(hw, RFPGA0_ANALOGPARAMETER2, BIT(10), 0);*/

Get TXIMR Setting*/

Modify RX IQK mode table*/

IQK Setting*/

path a IQK setting*/

LO calibration Setting*/

one shot,path A LOK & iqk*/

RX IQK*/

Modify RX IQK mode table*/

IQK Setting*/

path a IQK setting*/

LO calibration Setting*/

one shot,path A LOK & iqk*/

BB Setting*/

		/* We use the RF definition of MAIN and AUX,

		 * left antenna and right antenna repectively.

		 * Default output at AUX.

&&(reg_ea4 != 0) */

rtl92c_dm_write_dig(hw);*/

rtl_write_byte(rtlpriv, REG_APSD_CTRL, 0x00);*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

			/* Set interrupt migration timer and

			 * corresponding Tx/Rx counter.

			 * timer 25ns*0xfa0=100us for 0xf packets.

 Reset all interrupt migration settings. */

 Disable four ACs interrupts. */

			/* Disable VO, VI, BE and BK four AC interrupts

			 * to gain more efficient CPU utilization.

			 * When extremely highly Rx OK occurs,

			 * we will disable Tx interrupts.

 Enable four ACs interrupts. */

 High+low page number */

 normal page number */

 Set reserved page for each queue */

 11.  RQPN 0x200[31:0] = 0x80BD1C1C */

 load RQPN */

 12.  TXRKTBUG_PG_BNDY 0x114[31:0] = 0x27FF00F6 */

 TXRKTBUG_PG_BNDY */

 13.  TDECTRL[15:8] 0x209[7:0] = 0xF6 */

 Beacon Head for TXDMA */

 14.  BCNQ_PGBNDY 0x424[7:0] =  0xF6 */

 BCNQ_PGBNDY */

 15.  WMAC_LBK_BF_HD 0x45D[7:0] =  0xF6 */

 WMAC_LBK_BF_HD */

 Set Tx/Rx page size (Tx must be 128 Bytes, */

 Rx can be 64,128,256,512,1024 bytes) */

 16.  PBP [7:0] = 0x11 */

 TRX page size */

 17.  DRV_INFO_SZ = 0x04 */

 18.  LLT_table_init(Adapter);  */

 end of list */

 Make the other pages as ring buffer */

 This ring buffer is used as beacon buffer if we */

 config this MAC as two MAC transfer. */

 Otherwise used as local loopback buffer.  */

 Let last entry point to the start entry of ring buffer */

	/* Add for resume sequence of power domain according

 0.   RSV_CTRL 0x1C[7:0] = 0x00  */

 unlock ISO/CLK/Power control register */

 1.   AFE_XTAL_CTRL [7:0] = 0x0F  enable XTAL */

 2.   SPS0_CTRL 0x11[7:0] = 0x2b  enable SPS into PWM mode  */

 3.   delay (1ms) this is not necessary when initially power on */

 C.   Resume Sequence */

 a.   SPS0_CTRL 0x11[7:0] = 0x2b */

 b.   AFE_XTAL_CTRL [7:0] = 0x0F */

 c.   DRV runs power on init flow */

 auto enable WLAN */

 4.   APS_FSMCO 0x04[8] = 1; wait till 0x04[8] = 0   */

 Power On Reset for MAC Block */

 5.   Wait while 0x04[8] == 0 goto 2, otherwise goto 1 */

 Enable Radio off, GPIO, and LED function */

 6.   APS_FSMCO 0x04[15:0] = 0x0012  when enable HWPDN */

 release RF digital isolation  */

 7.  SYS_ISO_CTRL 0x01[1]    = 0x0;  */

Set REG_SYS_ISO_CTRL 0x1=0x82 to prevent wake# problem. */

 make sure that BB reset OK. */

 rtl_write_byte(rtlpriv, REG_SYS_FUNC_EN, 0xE3); */

 Disable REG_CR before enable it to assure reset */

 Release MAC IO register reset */

 clear stopping tx/rx dma   */

 rtl_write_word(rtlpriv,REG_CR+2, 0x2); */

 System init */

 18.  LLT_table_init(Adapter);  */

 Clear interrupt and enable interrupt */

 19.  HISR 0x124[31:0] = 0xffffffff;  */

      HISRE 0x12C[7:0] = 0xFF */

 20.  HIMR 0x120[31:0] |= [enable INT mask bit map];  */

 21.  HIMRE 0x128[7:0] = [enable INT mask bit map] */

	/* The IMR should be enabled later after all init sequence

 22.  PCIE configuration space configuration */

 23.  Ensure PCIe Device 0x80[15:0] = 0x0143 (ASPM+CLKREQ),  */

      and PCIe gated clock function is enabled.    */

	/* PCIE configuration space will be written after

 THe below section is not related to power document Vxx . */

 This is only useful for driver and OS setting. */

 -------------------Software Relative Setting---------------------- */

 Reported Tx status from HW for rate adaptive. */

 This should be realtive to power on step 14. But in document V11  */

 still not contain the description.!!! */

	/* Set Tx/Rx page size (Tx must be 128 Bytes,

 rtl_write_byte(rtlpriv,REG_PBP, 0x11); */

 Set RCR register */

 rtl_write_byte(rtlpriv,REG_RX_DRVINFO_SZ, 4); */

  Set TCR register */

 disable earlymode */

 Set TX/RX descriptor physical address(from OS API). */

 Set RX Desc Address */

	/* if we want to support 64 bit DMA, we should set it here,

 Reset interrupt migration setting when initialization */

 Reconsider when to do this operation after asking HWSD. */

 After MACIO reset,we must refresh LED state. */

 Reset H2C protection register */

 Aggregation threshold */

 For throughput */

 ACKTO for IOT issue. */

 Set Spec SIFS (used in NAV) */

 Set SIFS for CCK */

 Set SIFS for OFDM */

 Set Multicast Address. */

 we should do iqk after disable/enable */

 rtlpriv->intf_ops->disable_aspm(hw); */

	/* because last function modify RCR, so we update

	 * rcr var here, or TP will unstable for receive_config

	 * is wrong, RX RCR_ACRC32 will cause TP unstabel & Rx

 set before initialize RF */

 config RF */

	/* After read predefined TXT, we must set BB/MAC/RF

 After load BB,RF params,we need do more for 92D. */

 set default value after initialize RF,  */

---- Set CCK and OFDM Block "ON"----*/

		/* RFPGA0_ANALOGPARAMETER2: cck clock select,

 Mac1 */

 reset hw sec */

 Read EEPROM TX power index and PHY_REG_PG.txt to capture correct */

 TX power index for different rate set. */

 rtlpriv->intf_ops->enable_aspm(hw); */

 5G and 2.4G must wait sometime to let RF LO ready */

 check that loop was successful. If not, exit now */

 check bssid */

 do iqk or reload iqk */

/* windows just rtl92d_phy_reload_iqk_setting in set channel,

 * but it's very strict for time sequence so we add

/* don't set REG_EDCA_BE_PARAM here because

 0x20:value 05-->04 */

  ==== Reset digital sequence   ====== */

 f.   SYS_FUNC_EN 0x03[7:0]=0x51 reset MCU, MAC register, DCORE */

 g.   MCUFWDL 0x80[1:0]=0 reset MCU ready status */

  ==== Pull GPIO PIN to balance level and LED control ====== */

 h.     GPIO_PIN_CTRL 0x44[31:0]=0x000  */

 i.    Value = GPIO_PIN_CTRL[7:0] */

 j.    GPIO_PIN_CTRL 0x44[31:0] = 0x00FF0000 | (value <<8); */

 write external PIN level  */

 k.   GPIO_MUXCFG 0x42 [15:0] = 0x0780 */

 l.   LEDCFG 0x4C[15:0] = 0x8080 */

  ==== Disable analog sequence === */

 m.   AFE_PLL_CTRL[7:0] = 0x80  disable PLL */

 n.   SPS0_CTRL 0x11[7:0] = 0x22  enter PFM mode */

 o.   AFE_XTAL_CTRL 0x24[7:0] = 0x0E  disable XTAL, if No BT COEX */

 p.   RSV_CTRL 0x1C[7:0] = 0x0E lock ISO/CLK/Power control register */

  ==== interface into suspend === */

 q.   APS_FSMCO[15:8] = 0x58 PCIe suspend mode */

 According to power document V11, we need to set this */

 value as 0x18. Otherwise, we may not L0s sometimes. */

 This indluences power consumption. Bases on SD1's test, */

 set as 0x00 do not affect power current. And if it */

 is set as 0x18, they had ever met auto load fail problem. */

 r.   Note: for PCIe interface, PON will not turn */

 off m-bias and BandGap in PCIe suspend mode.  */

 0x17[7] 1b': power off in process  0b' : power off over */

 Power sequence for each MAC. */

 a. stop tx DMA  */

 b. close RF */

 c. clear rx buf */

 d. stop rx DMA */

 e.  reset MAC */

 a. stop tx DMA */

 b. TXPAUSE 0x522[7:0] = 0xFF Pause MAC TX queue */

 c. ========RF OFF sequence==========  */

 0x88c[23:20] = 0xf. */

 APSD_CTRL 0x600[7:0] = 0x40 */

 Close antenna 0,0xc04,0xd04 */

  SYS_FUNC_EN 0x02[7:0] = 0xE2   reset BB state machine */

 Mac0 can not do Global reset. Mac1 can do. */

 SYS_FUNC_EN 0x02[7:0] = 0xE0  reset BB state machine  */

 d.  stop tx/rx dma before disable REG_CR (0x100) to fix */

 dma hang issue when disable/enable device.  */

	/* Maybe autoload OK,buf the tx power index value is not filled.

 These just for 92D efuse offset. */

 5GL */

 5GM */

 5GH */

 bit0~2 */

	/* Use default value to fill parameters if

 ThermalMeter from EEPROM */

 check XTAL_K */

 Read Permanent MAC address for 2nd interface */

 Read Channel Plan */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

			/* BIT7 of REG_LEDCFG2 should be set to

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 CCK gain is smaller than OFDM/MCS gain,  */

 so we add gain diff by experiences, the val is 6 */

 modify the offset to make the same gain index with OFDM. */

rx_status->qual = stats->signal; */

 reserve 8 byte for AMPDU early mode */

 5G have no CCK rate */

 5G have no CCK rate */

 Set TxRate and RTSRate in TxDesc  */

 This prevent Tx initial rate of new-coming packets */

 from being overwritten by retried  packet rate.*/

 set_tx_desc_tx_rate(pdesc, 0x0b); */

	/* 5G have no CCK rate

	 * Caution: The macros below are multi-line expansions.

	 * The braces are needed no matter what checkpatch says

	/* a beacon packet will only use the first

	 * descriptor by defaut, and the own bit may not

	 * be cleared by the hardware

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 Chanel 1-3 */

 Channel 4-9 */

 Channel 10-14 */

 true: need to enable BB/RF power */

 MAC0 Need PHY1 load radio_b.txt . Driver use DBI to write. */

 Enable BB and RF power */

		/* We think if MAC1 is ON,then radio_a.txt

	/* check MAC0 enable or not again now, if

 power down RF radio A according to YuNan's advice. */

 Single phy mode: use radio_a radio_b config path_A path_B */

 seperately by MAC0, and MAC1 needn't configure RF; */

 Dual PHY mode:MAC0 use radio_a config 1st phy path_A, */

 MAC1 use radio_b config 2nd PHY path_A. */

 DMDP,MAC0 on G band,MAC1 on A band. */

			/* MAC0 needs PHY1 load radio_b.txt.

				/* We think if MAC1 is ON,then radio_a.txt and

			/* MAC1 needs PHY0 load radio_a.txt.

				/* We think if MAC0 is ON,then radio_a.txt and

 MAC0 enabled, only init radia B.   */

 Mac1 use PHY0 write */

 Mac0 use PHY1 write */

 Set bit number of Address and Data for RF register */

 Set 1 to 4 bits for 8255 */

 Set 0 to 12  bits for 8255 */

	/* check MAC0 enable or not again, if enabled,

	/* check MAC1 enable or not again, if enabled,

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

close ASPM for AMD defaultly */

	/*

	 * ASPM PS mode.

	 * 0 - Disable ASPM,

	 * 1 - Enable ASPM without Clock Req,

	 * 2 - Enable ASPM with Clock Req,

	 * 3 - Alwyas Enable ASPM with Clock Req,

	 * 4 - Always Enable ASPM without Clock Req.

	 * set defult to RTL8192CE:3 RTL8192E:2

Setting for PCI-E device */

Setting for PCI-E bridge */

	/*

	 * In Hw/Sw Radio Off situation.

	 * 0 - Default,

	 * 1 - From ASPM setting without low Mac Pwr,

	 * 2 - From ASPM setting with low Mac Pwr,

	 * 3 - Bus D3

	 * set default to RTL8192CE:0 RTL8192SE:2

	/*

	 * This setting works for those device with

	 * backdoor ASPM setting such as EPHY setting.

	 * 0 - Not support ASPM,

	 * 1 - Support ASPM,

	 * 2 - According to chipset.

 dual mac */

 No long RX - reduce fragmentation */

 for LPS & IPS */

	/* for ASPM, you can close aspm through

 for early mode */

 for firmware buf */

 request fw */

 just for 92se */

 just for 92se */

/* add global spin lock to solve the problem that

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

		/* Reserved for fw extension.

		 * 0x81[7] is used for mac0 status ,

		 * so don't write this reg here

 Set (REG_HMETFR + 3) to  0x20 is reset 8051 */

 polling for FW ready */

	/* If 8051 is running in RAM code, driver should

	 * inform Fw to reset by itself, or it will cause

 8051 RAM code */

 download fw over,clear 0x1f[5] */

 discard output from call below */

->1 */

->5 */

 page 0 beacon */

 page 1 beacon */

 page 2  ps-poll */

 page 3  null */

 page 4  probe_resp */

 page 5  probe_resp */

	/*---------------------------------------------------------

						(1) beacon

	/*-------------------------------------------------------

						(2) ps-poll

	/*--------------------------------------------------------

						(3) null data

	/*---------------------------------------------------------

						(4) probe response

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 0, +6.0dB */

 1, +5.5dB */

 2, +5.0dB */

 3, +4.5dB */

 4, +4.0dB */

 5, +3.5dB */

 6, +3.0dB */

 7, +2.5dB */

 8, +2.0dB */

 9, +1.5dB */

 10, +1.0dB */

 11, +0.5dB */

 12, +0dB */

 13, -0.5dB */

 14, -1.0dB */

 15, -1.5dB */

 16, -2.0dB */

 17, -2.5dB */

 18, -3.0dB */

 19, -3.5dB */

 20, -4.0dB */

 21, -4.5dB */

 22, -5.0dB */

 23, -5.5dB */

 24, -6.0dB */

 25, -6.5dB */

 26, -7.0dB */

 27. -7.5dB */

 28, -8.0dB */

 29, -8.5dB */

 30, -9.0dB */

 31, -9.5dB */

 32, -10.0dB */

 33, -10.5dB */

 34, -11.0dB */

 35, -11.5dB */

 36, -12.0dB */

 37, -12.5dB */

 38, -13.0dB */

 39, -13.5dB */

 40, -14.0dB */

 41, -14.5dB */

 42, -15.0dB */

 0, +0dB */

 1, -0.5dB */

 2, -1.0dB */

 3, -1.5dB */

 4, -2.0dB */

 5, -2.5dB */

 6, -3.0dB */

 7, -3.5dB */

 8, -4.0dB */

 9, -4.5dB */

 10, -5.0dB */

 11, -5.5dB */

 12, -6.0dB */

 13, -6.5dB */

 14, -7.0dB */

 15, -7.5dB */

 16, -8.0dB */

 17, -8.5dB */

 18, -9.0dB */

 19, -9.5dB */

 20, -10.0dB */

 21, -10.5dB */

 22, -11.0dB */

 23, -11.5dB */

 24, -12.0dB */

 25, -12.5dB */

 26, -13.0dB */

 27, -13.5dB */

 28, -14.0dB */

 29, -14.5dB */

 30, -15.0dB */

 31, -15.5dB */

 32, -16.0dB */

 0, +0dB */

 1, -0.5dB */

 2, -1.0dB */

 3, -1.5dB */

 4, -2.0dB */

 5, -2.5dB */

 6, -3.0dB */

 7, -3.5dB */

 8, -4.0dB */

 9, -4.5dB */

 10, -5.0dB */

 11, -5.5dB */

 12, -6.0dB */

 13, -6.5dB */

 14, -7.0dB */

 15, -7.5dB */

 16, -8.0dB */

 17, -8.5dB */

 18, -9.0dB */

 19, -9.5dB */

 20, -10.0dB */

 21, -10.5dB */

 22, -11.0dB */

 23, -11.5dB */

 24, -12.0dB */

 25, -12.5dB */

 26, -13.0dB */

 27, -13.5dB */

 28, -14.0dB */

 29, -14.5dB */

 30, -15.0dB */

 31, -15.5dB */

 32, -16.0dB */

 hold ofdm counter */

 hold page C counter */

hold page D counter */

 hold cck counter */

 reset false alarm counter registers */

 update ofdm counter */

 update page C counter */

 update page D counter */

 reset cck counter */

 enable cck counter */

 Determine the minimum RSSI  */

	/* because we will send data pkt when scanning

	 * this will cause some ap like gear-3700 wep TP

	 * lower if we return here, this is the diff of

	/* if (rtlpriv->mac80211.act_scanning)

 Not STA mode return tmp */

 Decide the current status and if modify initial gain or not */

 adjust initial gain according to false alarm counter */

 deal with abnormally large false alarm */

 3600=2hr */

 Recovery mechanism for IGI lower bound */

 AP & ADHOC & MESH will return tmp */

 Indicate Rx signal strength to FW. */

		/* fw v12 cmdid 5:use max macid ,for nic ,

 Enable BEQ TxOP limit configuration in wireless G-mode. */

 To check whether we shall force turn on TXOP configuration. */

 Force TxOP limit to 0x005e for UL. */

 Force TxOP limit to 0x005e for DL. */

 Query CCK default setting From 0xa24 */

 MAC 1 5G */

 5G, path A/MAC 0, decrease power  */

 5G, path A/MAC 0, increase power  */

 5G, path B/MAC 1, decrease power */

 5G, path B/MAC 1, increase power */

 2.4G, for decreas power */

 5G, path A/MAC 0, ch36-64, decrease power  */

 5G, path A/MAC 0, ch36-64, increase power  */

 5G, path A/MAC 0, ch100-165, decrease power  */

 5G, path A/MAC 0, ch100-165, increase power  */

 5G, path B/MAC 1, ch36-64, decrease power */

 5G, path B/MAC 1, ch36-64, increase power */

 5G, path B/MAC 1, ch100-165, decrease power */

 5G, path B/MAC 1, ch100-165, increase power */

 new element C = element D x Y */

		/* write new elements A, C, D to regC80 and

		 * regC94, element B is always 0

 Adjust CCK according to IQK result */

 consider minus */

 new element C = element D x Y */

			/* write new elements A, C, D to regC88

			 * and regC9C, element B is always 0

	/* 1. RF is OFF. (No need to do DM.)

	 * 2. Fw is under power saving mode for FwLPS.

	 *    (Prevent from SW/FW I/O racing.)

	 * 3. IPS workitem is scheduled. (Prevent from IPS sequence

	 *    to be swapped with DM.

	 * 4. RFChangeInProgress is TRUE.

 rtl92d_dm_dynamic_bb_powersaving(hw); */

 rtl92d_dm_check_txpower_tracking_thermal_meter(hw); */

 rtl92d_dm_refresh_rate_adaptive_mask(hw); */

 rtl92d_dm_interrupt_migration(hw); */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 [mode][patha+b][reg] */

 channel 1-14. */

 path 36-64 */

 100 -165 */

 channel 1~14 */

 mac1 use phy0 read radio_b. */

 mac0 use phy1 read radio_b. */

 mac0 use phy1 write radio_b. */

 T65 RF */

 improve 2-stream TX EVM */

 rtl_write_byte(rtlpriv, 0x14,0x71); */

 AMPDU aggregation number 9 */

 rtl_write_word(rtlpriv, REG_MAX_AGGR_NUM, MAX_AGGR_NUM); */

 92D need to test to decide the num. */

 RF Interface Sowrtware Control */

 16 LSBs if read 32-bit from 0x870 */

 16 MSBs if read 32-bit from 0x870 (16-bit for 0x872) */

 16 LSBs if read 32-bit from 0x874 */

 16 MSBs if read 32-bit from 0x874 (16-bit for 0x876) */

 RF Interface Readback Value */

 16 LSBs if read 32-bit from 0x8E0 */

 16 MSBs if read 32-bit from 0x8E0 (16-bit for 0x8E2) */

 16 LSBs if read 32-bit from 0x8E4 */

 16 MSBs if read 32-bit from 0x8E4 (16-bit for 0x8E6) */

 RF Interface Output (and Enable) */

 16 LSBs if read 32-bit from 0x860 */

 16 LSBs if read 32-bit from 0x864 */

 RF Interface (Output and)  Enable */

 16 MSBs if read 32-bit from 0x860 (16-bit for 0x862) */

 16 MSBs if read 32-bit from 0x864 (16-bit for 0x866) */

 Addr of LSSI. Wirte RF register by driver */

 LSSI Parameter */

 RF parameter */

 BB Band Select */

 Tx AGC Gain Stage (same for all path. Should we remove this?) */

 Tx gain stage */

 Tx gain stage */

 Tx gain stage */

 Tx gain stage */

 Tranceiver A~D HSSI Parameter-1 */

 wire control parameter1 */

 wire control parameter1 */

 Tranceiver A~D HSSI Parameter-2 */

 wire control parameter2 */

 wire control parameter2 */

 RF switch Control */

 TR/Ant switch control */

 AGC control 1 */

 AGC control 2  */

 RX AFE control 1 */

RX AFE control 1 */

 Tx AFE control 1 */

 Tx AFE control 2 */

 Tranceiver LSSI Readback SI mode */

 Tranceiver LSSI Readback PI mode */

 Normal chip,Mac0 use AGC_TAB.txt for 2G and 5G band. */

				/* Add 1us delay between BB/RF register

					/* Add 1us delay between BB/RF register

					/* Add 1us delay between BB/RF registeri

	/* if (rtlphy->rf_type == RF_1T2R) {

	 *      _rtl92c_phy_bb_config_1t(hw);

	 *     rtl_dbg(rtlpriv, COMP_INIT, DBG_TRACE, "Config to 1T!!\n");

 0x1f bit7 bit6 represent for mac0/mac1 driver ready */

	/* this only happens when DMDP, mac0 start on 2.4G,

	 * mac1 start on 5G, mac 0 has to set phy0&phy1

 1. CCK */

 RF-A */

 RF-B */

 2. OFDM for 1S or 2S */

  Read HT 40 OFDM TX power */

 Read HT 40 OFDM TX power */

 SET BIT10 BIT11  for receive cck */

		/* Set Control channel to upper or lower.

 SET BIT10 BIT11  for receive cck */

 stop RX/Tx */

 reconfig BB/RF according to wireless mode */

 BB & RF Config */

 5G band */

 20M BW. */

 rtl_set_bbreg(hw, RFPGA0_ANALOGPARAMETER2, BIT(10), 1); */

 notice fw know band status  0x81[1]/0x53[1] = 0: 5G, 1: 2G */

 fc area 0xd2c */

 leave 0 for channel1-14. */

 G band. */

----Store original RFENV control type----*/

----Set RF_ENV enable----*/

----Set RF_ENV output high----*/

 Set bit number of Address and Data for RF register */

 Set 1 to 4 bits for 8255 */

Set 0 to 12 bits for 8255 */

----Restore RFENV control type----*/

 config path A for 5G */

 asume no this case */

 MAC 1 5G */

 ms */

 bit0 = 1 => Tx OK, bit1 = 1 => Rx OK */

 path-A IQK setting */

 path-B IQK setting */

 LO calibration setting */

 One shot, path A LOK & IQK */

 delay x ms */

 Check failed */

 if Tx not OK, ignore Rx */

 if Tx is OK, check whether Rx is OK */

 bit0 = 1 => Tx OK, bit1 = 1 => Rx OK */

 PHY1 */

 path-A IQK setting */

 path-B IQK setting */

 LO calibration setting */

 path-A PA on */

 One shot, path A LOK & IQK */

 delay x ms */

 Check failed */

 if Tx not OK, ignore Rx */

 if Tx is OK, check whether Rx is OK */

 path A PA off */

 bit0 = 1 => Tx OK, bit1 = 1 => Rx OK */

 One shot, path B LOK & IQK */

 delay x ms  */

 Check failed */

 bit0 = 1 => Tx OK, bit1 = 1 => Rx OK */

 path-A IQK setting */

 path-B IQK setting */

 LO calibration setting */

 path-B PA on */

 One shot, path B LOK & IQK */

 delay x ms */

 Check failed */

 path B PA off */

  Save ADDA parameters, turn Path A ADDA on */

  Switch BB to PI mode to do IQ Calibration. */

 MAC settings */

 Page B init */

 IQ calibration setting */

 Tx IQK OK */

 Turn Path B ADDA on */

 Tx IQK OK */

 Back to BB mode, load original value */

 Switch back BB to SI mode after finish IQ Calibration. */

 Reload ADDA power saving parameters */

 Reload MAC parameters */

 load 0xe30 IQC default value */

	/* Note: IQ calibration must be performed after loading

 Save ADDA parameters, turn Path A ADDA on */

 MAC settings */

  Switch BB to PI mode to do IQ Calibration. */

 Page B init */

 IQ calibration setting  */

 Tx IQK OK */

 _rtl92d_phy_patha_standby(hw); */

 Turn Path B ADDA on  */

 Tx IQK OK */

 Back to BB mode, load original value */

 Reload MAC parameters */

  Switch back BB to SI mode after finish IQ Calibration. */

 Reload ADDA power saving parameters */

 for path A and path B */

 path A OK */

 path A, Tx OK */

 path B OK */

 path B, Tx OK */

 OFDM0_D */

 path B IQK result + 3 */

 X default value */

 Y default value */

&&(regea4 != 0) */)

&&(regec4 != 0) */)

------Do IQK for normal chip and test chip 5G band------- */

 Re Do IQK. */

 Just load the value. */

 2G band just load once. */

&&(regea4 != 0) */)

&&(regec4 != 0) */)

 Path-A for 5G */

 asume no this case */

 Check continuous TX and Packet TX */

 if Deal with contisuous TX case, disable all continuous TX */

 if Deal with Packet TX case, block all queues */

 1. Read original RF mode */

 2. Set RF mode = standby mode */

 switch CV-curve control by LC-calibration */

 4. Set LC calibration begin */

 Set LC calibration off */

 save Curve-counting number */

 reg 0x4f [4:0] */

 reg 0x50 [19:10] */

 switch CV-curve control mode */

 Restore original situation  */

Deal with Packet TX case */

 For 1T1R */

 0xe94, 0xe9c, 0xea4, 0xeac, 0xeb4, 0xebc, 0xec4, 0xecc */

 do IQK when all parameters are ready */

		/* Get first channel error when change between

		/* Get first channel error when change between

 a.  SYS_CLKR 0x08[11] = 1  restore MAC clock */

 b.  SPS_CTRL 0x11[7:0] = 0x2b */

 c.  For PCIE: SYS_FUNC_EN 0x02[7:0] = 0xE3 enable BB TRX function */

 RF_ON_EXCEP(d~g): */

 d.  APSD_CTRL 0x600[7:0] = 0x00 */

 e.  SYS_FUNC_EN 0x02[7:0] = 0xE2  reset BB TRX function again */

 f.  SYS_FUNC_EN 0x02[7:0] = 0xE3  enable BB TRX function*/

 g.   txpause 0x522[7:0] = 0x00  enable mac tx queue */

 a.   TXPAUSE 0x522[7:0] = 0xFF  Pause MAC TX queue  */

 b.   RF path 0 offset 0x00 = 0x00  disable RF  */

 c.   APSD_CTRL 0x600[7:0] = 0x40 */

	/* d. APSD_CTRL 0x600[7:0] = 0x00

	 * APSD_CTRL 0x600[7:0] = 0x00

	 * RF path 0 offset 0x00 = 0x00

	 * APSD_CTRL 0x600[7:0] = 0x40

 Jump out the LPS turn off sequence to RF_ON_EXCEP */

 e.   For PCIE: SYS_FUNC_EN 0x02[7:0] = 0xE2 reset BB TRX function */

 f.   SPS_CTRL 0x11[7:0] = 0x22 */

 g.    SYS_CLKR 0x08[11] = 0  gated MAC clock */

 Now we let MAC0 run on 5G band. */

 notice fw know band status  0x81[1]/0x53[1] = 0: 5G, 1: 2G */

 r_select_5G for path_A/B 0 for 2.4G, 1 for 5G */

 r_select_5G for path_A/B,0x878 */

 rssi_table_select:index 0 for 2.4G.1~3 for 5G,0xc78 */

 fc_area  0xd2c */

 5G LAN ON */

 TX BB gain shift*1,Just for testchip,0xc80,0xc88 */

 1.5V_LDO */

 r_select_5G for path_A/B */

 rssi_table_select:index 0 for 2.4G.1~3 for 5G */

 fc_area */

 5G LAN ON */

 TX BB gain shift,Just for testchip,0xc80,0xc88 */

 update IQK related settings */

 Update RF */

 MOD_AG for RF path_A 0x18 BIT8,BIT16 */

 RF0x0b[16:14] =3b'111 */

 MOD_AG for RF path_A 0x18 BIT8,BIT16 */

 Update for all band. */

 DMDP */

 Use antenna 0,0xc04,0xd04 */

 enable ad/da clock1 for dual-phy reg0x888 */

 0x888 */

 Single PHY */

 Use antenna 0 & 1,0xc04,0xd04 */

 disable ad/da clock1,0x888 */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

 These routines are common to RTL8723AE and RTL8723bE */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

 These routines are common to RTL8723AE and RTL8723bE */

 rtl8723be */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2014  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 Update current settings. */

 Update current settings. */

 RF off */

 RF on */

 Wait the MAC synchronized. */

 Check if it is set ready. */

 The following config GPIO function */

 config GPIO3 to input */

 The following config GPIO function */

 config GPIO3 to input */

	/* On some of the platform, driver cannot read correct

 check GPIO3 */

 Reset PCIE Digital */

 Switch to SW IO control */

 Set failed, return to prevent hang. */

 Clear FW RPWM for FW control LPS.*/

 Reset MAC-IO and CPU and Core Digital BIT(10)/11/15 */

 wait for BIT 10/11/15 to pull high automatically!! */

 Data sheet not define 0x562!!! Copy from WMAC!!!!! */

 Enable AFE clock source */

 Delay 1.5ms */

 Enable AFE Macro Block's Bandgap */

 Enable AFE Mbias */

 Enable LDOA15 block	*/

 Set Digital Vdd to Retention isolation Path. */

 For warm reboot NIC disappera bug. */

 Enable AFE PLL Macro Block */

 We need to delay 100u before enabling PLL. */

 for divider reset  */

 Enable MAC 80MHZ clock  */

 Release isolation AFE PLL & MD */

 Enable MAC clock */

 Enable Core digital and enable IOREG R/W */

 enable REG_EN */

 Switch the control path. */

 Set failed, return to prevent hang. */

 MH We must enable the section of code to prevent load IMEM fail. */

 Load MAC register from WMAc temporarily We simulate macreg. */

 txt HW will provide MAC txt later  */

 Set RX Desc Address */

 Set TX Desc Address */

 To make sure that TxDMA can ready to download FW. */

 We should reset TxDMA if IMEM RPT was not ready. */

 Reset TxDMA */

 After MACIO reset,we must refresh LED state. */

 1. System Configure Register (Offset: 0x0000 - 0x003F) */

 2. Command Control Register (Offset: 0x0040 - 0x004F) */

 Turn on 0x40 Command register */

 Set TCR TX DMA pre 2 FULL enable bit	*/

 Set RCR	*/

 3. MACID Setting Register (Offset: 0x0050 - 0x007F) */

 4. Timing Control Register  (Offset: 0x0080 - 0x009F) */

 Set CCK/OFDM SIFS */

 CCK SIFS shall always be 10us. */

 Set AckTimeout */

 Beacon related */

 5. FIFO Control Register (Offset: 0x00A0 - 0x015F) */

 5.1 Initialize Number of Reserved Pages in Firmware Queue */

 Firmware allocate now, associate with FW internal setting.!!! */

 5.2 Setting TX/RX page size 0/1/2/3/4=64/128/256/512/1024 */

 5.3 Set driver info, we only accept PHY status now. */

 5.4 Set RXDMA arbitration to control RXDMA/MAC/FW R/W for RXFIFO  */

 6. Adaptive Control Register  (Offset: 0x0160 - 0x01CF) */

	/* Set RRSR to all legacy rate and HT rate

	 * CCK rate is supported by default.

	 * CCK rate will be filtered out only when associated

	 * AP does not support it.

	 * Only enable ACK rate to OFDM 24M

 A-Cut IC do not support CCK rate. We forbid ARFR to */

 fallback to CCK rate */

Disable RRSR for CCK rate in A-Cut */

 Different rate use different AMPDU size */

 MCS32/ MCS15_SG use max AMPDU size 15*2=30K */

 MCS0/1/2/3 use max AMPDU size 4*2=8K */

 MCS4/5 use max AMPDU size 8*2=16K 6/7 use 10*2=20K */

 MCS8/9 use max AMPDU size 8*2=16K 10/11 use 10*2=20K */

 MCS12/13/14/15 use max AMPDU size 15*2=30K */

 Set Data / Response auto rate fallack retry count */

 7. EDCA Setting Register (Offset: 0x01D0 - 0x01FF) */

 Set all rate to support SG */

 8. WMAC, BA, and CCX related Register (Offset: 0x0200 - 0x023F) */

 Set NAV protection length */

 CF-END Threshold */

 Set AMPDU minimum space */

 Set TXOP stall control for several queue/HI/BCN/MGT/ */

 9. Security Control Register (Offset: 0x0240 - 0x025F) */

 10. Power Save Control Register (Offset: 0x0260 - 0x02DF) */

 11. General Purpose Register (Offset: 0x02E0 - 0x02FF) */

 12. Host Interrupt Status Register (Offset: 0x0300 - 0x030F) */

 13. Test mode and Debug Control Register (Offset: 0x0310 - 0x034F) */

 14. Set driver info, we only accept PHY status now. */

 15. For EEPROM R/W Workaround */

 16. For EFUSE to share REG_SYS_FUNC_EN with EEPROM!!! */

 17. For EFUSE */

 We may R/W EFUSE in EEPROM mode */

 Change Program timing */

 Set Retry Limit here */

 For Min Spacing configuration. */

	/* As this function can take a very long time (up to 350 ms)

	 * and can be called with irqs disabled, reenable the irqs

	 * to let the other devices continue being serviced.

	 *

	 * It is safe doing so since our own interrupts will only be enabled

	 * in a subsequent step.

 1. MAC Initialize */

 Before FW download, we have to set some MAC register */

 2. download firmware */

 After FW download, we have to reset MAC register */

Retrieve default FW Cmd IO map. */

 3. Initialize MAC/PHY Config by MACPHY_reg.txt */

	/* because last function modify RCR, so we update

	 * rcr var here, or TP will unstable for receive_config

	 * is wrong, RX RCR_ACRC32 will cause TP unstabel & Rx

	 * RCR_APP_ICV will cause mac80211 unassoc for cisco 1252

 Make sure BB/RF write OK. We should prevent enter IPS. radio off. */

 We must set flag avoid BB/RF config period later!! */

 4. Initialize BB After MAC Config PHY_reg.txt, AGC_Tab.txt */

 5. Initiailze RF RAIO_A.txt RF RAIO_B.txt */

 Before initalizing RF. We can not use FW to do RF-R/W. */

 Before RF-R/W we must execute the IO from Scott's suggestion. */

	/* After read predefined TXT, we must set BB/MAC/RF

---- Set CCK and OFDM Block "ON"----*/

3 Set Hardware(Do nothing now) */

 Read EEPROM TX power index and PHY_REG_PG.txt to capture correct */

 TX power index for different rate set. */

 Get original hw reg values */

 Write correct tx power index */

 We must set MAC address after firmware download. */

 EEPROM R/W workaround */

	/* We enable high power and RA related mechanism after NIC

 Fw v.53 and later. */

 Fw v.52. */

 Compatible earlier FW version. */

 Add to prevent ASPM bug. */

 Always enable hst and NIC clock request. */

	/* Security related

	 * 1. Clear all H/W keys.

 Turn on B-Path */

 This is a stub. */

 HW_VAR_MEDIA_STATUS & HW_VAR_CECHK_BSSID */

 don't set REG_EDCA_BE_PARAM here because mac80211 will send pkt when scan */

 rtl_write_dword(rtlpriv, EDCAPARA_BE, u4b_ac_param); */

 Support Bit 32-37(Assign as Bit 0-5) interrupt setting now */

 if firmware not available, no interrupts */

 Wait the MAC synchronized. */

 Check if it is set ready. */

 Power save for BB/RF */

	/* Add description. After switch control path. register

	 * after page1 will be invisible. We can not do any IO

	 * for register>0x40. After resume&MACIO reset, we need

 Power save for MAC */

 enable LED function */

 SW/HW radio off or halt adapter!! For example S3/S4 */

 LED function disable. Power range is about 8mA now. */

		/* if write 0xF1 disconnect_pci power

		/* if write oxF9 disconnect_pci power

 Reset MAC-IO and CPU and Core Digital BIT10/11/15 */

	/* If IPS we need to turn LED on. So we not

 wait for BIT 10/11/15 to pull high automatically!! */

 Data sheet not define 0x562!!! Copy from WMAC!!!!! */

 Enable AFE clock source */

 Delay 1.5ms */

 Enable AFE Macro Block's Bandgap */

 Enable AFE Mbias */

 Enable LDOA15 block */

 Set Digital Vdd to Retention isolation Path. */

 For warm reboot NIC disappera bug. */

 Enable AFE PLL Macro Block */

 Enable MAC 80MHZ clock */

 Release isolation AFE PLL & MD */

 Enable MAC clock */

 Enable Core digital and enable IOREG R/W */

 enable REG_EN */

 Switch the control path. */

 After MACIO reset,we must refresh LED state. */

	/* we should chnge GPIO to input mode

 this is very important for ips power save */

 ATIM Window (in unit of TU). */

 Beacon interval (in unit of TU). */

	/* DrvErlyInt (in unit of TU). (Time to send

	 * interrupt to notify driver to change

	/* BcnDMATIM(in unit of us). Indicates the

	/* Force beacon frame transmission even

	 * after receiving beacon frame from

 Beacon Time Configuration */

 TODO: bcn_ifs may required to be changed on ASIC */

for beacon changed */

 Beacon interval (in unit of TU). */

 2008.10.24 added by tynli for beacon changed. */

 Only retrieving while using EFUSE. */

 Read IC Version && Channel Plan */

 VID, DID	 SE	0xA-D */

 Get Tx Power Level by Channel */

 Read Tx power of Channel 1 ~ 14 from EEPROM. */

 92S suupport RF A & B */

 Read CCK RF A & B Tx power  */

 Read OFDM RF A & B Tx power for 1T */

 Read OFDM RF A & B Tx power for 2T */

 Assign dedicated channel tx power */

 channel 1~3 use the same Tx Power Level. */

 Channel 4-8 */

 Channel 9-14 */

			/* Record A & B CCK /OFDM - 1T/2T Channel area

 Read Power diff limit. */

 Fill Pwr group */

 Chanel 1-3 */

 Channel 4-8 */

 Channel 9-13 */

 Read tx power difference between HT OFDM 20/40 MHZ */

 channel 1-3 */

 Channel 4-8 */

 Channel 9-14 */

 Read OFDM<->HT tx power diff */

 Channel 1-3 */

 Channel 4-8 */

 Channel 9-14 */

 BIT(0)~2 */

 BIT(0) */

	/* Read RF-indication and Tx Power gain

 Get TSSI value for each path. */

 Read antenna tx power offset of B/C/D to A  from EEPROM */

 and read ThermalMeter from EEPROM */

 ThermalMeter, BIT(0)~3 for RFIC1, BIT(4)~7 for RFIC2 */

 Read CrystalCap from EEPROM */

 CrystalCap, BIT(12)~15 */

 Read IC Version && Channel Plan */

 Version ID, Channel plan */

 Read Customer ID or Board Type!!! */

 Change RF type definition */

 1T2R but 1SS (1x1 receive combining) */

 set channel paln to world wide 13 */

 Get MAX MCS available. */

/* this ifunction is for RFKILL, it's different with windows,

 * because UI will disable wireless when GPIO Radio Off.

, cur_rfstate */;

 just 8191se can check gpio before firstup, 92c/92d have fixed it */

 cur_rfstate = ppsc->rfpwr_state;*/

	/* because after _rtl92s_phy_set_rfhalt, all power

	 * closed, so we must open some power for GPIO check,

	 * or we will always check GPIO RFOFF here,

 this not include ifconfig wlan0 down case */

 } else if (rfpwr_toset == ERFOFF || cur_rfstate == ERFOFF) { */

		/* because power_domain_init may be happen when

		 * _rtl92s_phy_set_rfhalt, this will open some powers

		 * and cause current increasing about 40 mA for ips,

		 * rfoff and ifconfig down, so we set

/* Is_wepkey just used for WEP used as group & pairwise key

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

	/* Kernel commit 1bf4bbb4024dcdab changed EAPOL packets to use

	 * queue V0 at priority 7; however, the RTL8192SE appears to have

	 * that queue at priority 6

 CCK gain is smaller than OFDM/MCS gain,  */

 so we add gain diff by experiences, the val is 6 */

 modify the offset to make the same gain index with OFDM. */

	/* hw will set stats->decrypted true, if it finds the

	 * frame is open data frame or mgmt frame,

	 * hw will not decrypt robust managment frame

	 * for IEEE80211w but still set stats->decrypted

	 * true, so here we should set it back to undecrypted

	 * for IEEE80211w frame, and mac80211 sw will help

rx_status->qual = stats->signal; */

 set txdesc macId */

 Aggregation related */

 For AMPDU, we must insert SSN into TX_DESC */

 Protection mode related */

 For 92S, if RTS/CTS are set, HW will execute RTS. */

 We choose only one protection mode to execute */

 Set Bandwidth and sub-channel settings. */

 use duplicated mode */

 3 Fill necessary field in First Descriptor */

DWORD 0*/

DWORD 1*/

 Fill security related */

 Set Packet ID */

 We will assign magement queue to BK. */

 Alwasy enable all rate fallback range */

 Fix: I don't kown why hw use 6.5M to tx when set it */

 Set NON_QOS bit. */

	/* Fill fields that are required to be initialized

DWORD 0 */

 DWORD 7 */

 DOWRD 8 */

 Clear all status	*/

 This bit indicate this packet is used for FW download. */

 For firmware download we only need to set LINIP */

 92SE must set as 1 for firmware download HW DMA error */

 92SE need not to set TX packet size when firmware download */

 H2C Command Desc format (Host TXCMD) */

 92SE must set as 1 for firmware download HW DMA error */

 Buffer size + command header */

 Fixed queue of H2C command */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 We only care about the path A for legacy. */

		/* For legacy OFDM, tx pwr always > HT OFDM pwr.

		 * We do not care Path B

		 * legacy OFDM pwr diff. NO BB register

 MCS rates */

 Check HT20 to HT40 diff	*/

 rf-A, rf-B */

 HT 20<->40 pwr diff */

 0~+7 */

 index8-15=-8~-1 */

 use index of rf-A */

	/* The following is for Antenna

		/* The following is for calculation

		/* range is from 7~-8,

 Antenna TX power difference */

 RF-D, don't care */

 RF-C, don't care */

 RF-B */

 Index 0 & 1= legacy OFDM, 2-5=HT_MCS rate */

		/* Realtek better performance increase power diff

		/* Realtek regulatory increase power diff defined

 Better regulatory don't increase any power diff */

		/* Customer defined power diff. increase power diff

	/* If path A and Path B coexist, we must limit Path A tx power.

	 * Protect Path B pwr over or under flow. We need to calculate

 Diff=-8~-1 */

 Prevent underflow!! */

 if (rf_pwr_diff >= 0) Diff = 0-7 */

		/* If path A and Path B coexist, we must limit Path A tx power.

		 * Protect Path B pwr over or under flow. We need to calculate

 Diff=-8~-1 */

 Prevent underflow!! */

 Diff = 0-7 */

 Prevent overflow */

 Initialize RF */

 Store original RFENV control type */

 Set RF_ENV enable */

 Set RF_ENV output high */

 Set bit number of Address and Data for RF register */

 Initialize RF fom connfiguration file */

 Restore RFENV control type */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

close ASPM for AMD defaultly */

	/* ASPM PS mode.

	 * 0 - Disable ASPM,

	 * 1 - Enable ASPM without Clock Req,

	 * 2 - Enable ASPM with Clock Req,

	 * 3 - Alwyas Enable ASPM with Clock Req,

	 * 4 - Always Enable ASPM without Clock Req.

	 * set defult to RTL8192CE:3 RTL8192E:2

Setting for PCI-E device */

Setting for PCI-E bridge */

	/* In Hw/Sw Radio Off situation.

	 * 0 - Default,

	 * 1 - From ASPM setting without low Mac Pwr,

	 * 2 - From ASPM setting with low Mac Pwr,

	 * 3 - Bus D3

	 * set default to RTL8192CE:0 RTL8192SE:2

	/* This setting works for those device with

	 * backdoor ASPM setting such as EPHY setting.

	 * 0 - Not support ASPM,

	 * 1 - Support ASPM,

	 * 2 - According to chipset.

 compatible 5G band 91se just 2.4G band & smsp */

RCR_ADD3 |*/

 Accept ICV error, CRC32 Error */

 Accept Broadcast, Multicast */

 Accept Physical match */

 Accept Destination Address packets */

RCR_AAP |*/

 Accept PHY status */

IMR_TIMEOUT0 |*/

| IMR_TXFOVW*/

			/*| IMR_TBDOK |

 for LPS & IPS */

	/* for ASPM, you can close aspm through

 for firmware buf */

 request fw */

/* Because memory R/W bursting will cause system hang/crash

 nouse for 8192se */

 nouse for 8192se */

 nouse for 8192se */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 Enable CPU. */

 AFE source */

 Polling IMEM Ready after CPU has refilled. */

 Update RF types for RATR settings. */

 Allocate skb buffer to contain firmware */

 info and tx descriptor info. */

 Polling IMEM code done. */

 Check Put Code OK and Turn On CPU */

 Polling EMEM code done. */

 Turn On CPU */

 Polling DMEM code done */

 Prevent Delay too much and being scheduled out */

 Polling Load Firmware ready */

 If right here, we can set TCR/RCR to desired value  */

 and config MAC lookback mode to normal mode */

 Set to normal mode. */

 1. Retrieve FW header. */

 pcie */

 2. Retrieve IMEM image. */

 3. Retriecve EMEM image. */

 4. download fw now */

 Image buffer redirection. */

 Partial update the content of header private. */

 <2> Download image file */

 <3> Check whether load FW process is ready */

 8 - Byte alignment */

 Buffer length is not enough */

 Clear content */

 CMD len */

 CMD ID */

 CMD Sequence */

 Copy memory */

 CMD continue */

 set the continue in prevoius cmd. */

 8 - Byte alignment */

 Buffer length is not enough */

 Set beacon pass count */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 0 UNKNOWN */

 1 REALTEK_90 */

 2 REALTEK_92SE */

 3 BROAD	*/

 4 RAL */

 5 ATH */

 6 CISCO */

 7 MARV */

 0 UNKNOWN */

 1 REALTEK_90 */

 2 REALTEK_92SE */

 3 BROAD */

 4 RAL */

 5 ATH */

 6 CISCO */

 7 MARV */

 0 UNKNOWN */

 1 REALTEK_90 */

 2 REALTEK_92SE */

 3 BROAD */

 4 RAL */

 5 ATH */

 6 CISCO */

 7 MARV */

 Uplink TP is present. */

 Balance TP is present. */

 2T2R TP issue */

 MRC settings would NOT affect TP on Wireless B mode. */

 Turn on B-Path */

 Turn off B-path  */

 Take care of RSSI differentiation. */

 Turn off B-path  */

 Turn on B-Path */

 Turn on B-Path */

 Update MRC settings if needed. */

 read CCK false alarm */

 connected -> connected or disconnected -> disconnected  */

 Firmware control DIG, do nothing in driver dm */

		/* disconnected -> connected or connected ->

 Enable FW DIG */

 Forced writing to prevent from fw-dig overwriting. */

 Disable FW DIG */

 Set initial gain. */

 Decide the current status and if modify initial gain or not */

 Change dig mode to rssi */

 2T2R TP issue */

 2T2R TP issue */

 Disable DIG scheme now.*/

 off=by real rssi value, on=by digtable->rssi_val for new dig */

 2007/10/04 MH Define init gain threshol. */

 for dig debug rssi value */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 dummy read */

	/* we should chnge GPIO to input mode

 If inferiority IC, we have to increase the PA bias current */

RF Interface Sowrtware Control */

 RF Interface Readback Value */

 RF Interface Output (and Enable) */

 RF Interface (Output and)  Enable */

 Addr of LSSI. Wirte RF register by driver */

 RF parameter */

 Tx AGC Gain Stage (same for all path. Should we remove this?) */

 Tranceiver A~D HSSI Parameter-1 */

 Tranceiver A~D HSSI Parameter-2 */

 RF switch Control */

 AGC control 1  */

 AGC control 2  */

 RX AFE control 1  */

 RX AFE control 1   */

 Tx AFE control 1  */

 Tx AFE control 2  */

 Tranceiver LSSI Readback */

 Tranceiver LSSI Readback PI mode  */

 Default RF_type: 2T2R */

 Add delay for ECS T20 & LG malow platform, */

 Add delay for ECS T20 & LG malow platform */

 1. Read PHY_REG.TXT BB INIT!! */

 We will separate as 1T1R/1T2R/1T2R_GREEN/2T2R */

			/* so we should reconfig BB reg with the right

	/* 2. If EEPROM or EFUSE autoload OK, We must config by

 3. BB AGC table Initialization */

 Check if the CCK HighPower is turned ON. */

 This is used to calculate PWDB. */

 Using Green mode array table for RF_2T2R_GREEN */

 PA Bias current for inferiority IC */

 Config BB and AGC */

 Check BB/RF confiuration setting. */

 We only need to configure RF which is turned on. */

 Initialize general global value */

 Config BB and RF */

 read rx initial gain */

 read framesync */

 1. CCK */

 RF-A */

 RF-B */

 2. OFDM for 1T or 2T */

 Read HT 40 OFDM TX power */

 Read HT 40 OFDM TX power */

 [0]:RF-A, [1]:RF-B */

	/* Mainly we use RF-A Tx Power to write the Tx Power registers,

	 * but the RF-B Tx Power must be calculated by the antenna diff.

	 * So we have to rewrite Antenna gain offset register here.

	 * Please refer to BB register 0x80c

	 * 1. For CCK.

 Make sure that CMD IO has be accepted by FW. */

 We re-map RA related CMD IO to combinational ones */

 if FW version is v.52 or later. */

 Lower initial gain */

 CCA threshold */

 CCA threshold */

 Lower initial gain */

 CCA threshold */

 CCA threshold */

		/* FW set TXOP disable here, so disable EDCA

 Clear FW CMD operation flag. */

 We re-map to combined FW CMD ones if firmware version */

 is v.53 or later. */

		/* If firmware version is v.62 or later,

		/* We shall revise all FW Cmd IO into Reg0x364

 Clear control flag to sync with FW. */

 Clear FW parameter in terms of thermal parts. */

 Clear control flag to sync with FW. */

		/* The following FW CMDs are only compatible to

 Clear RA BG mode control. */

 Clear FW parameter in terms of RA parts. */

 Clear control flag to sync with FW. */

 Clear RA n-mode control. */

 Clear FW parameter in terms of RA parts. */

 Clear control flag to sync with FW. */

 Clear control flag to sync with FW. */

 The following FW CMD is compatible to v.62 or later.  */

  The followed FW Cmds needs post-processing later. */

			/* Pass to original FW CMD processing callback

	/* We shall post processing these FW CMD if

	 * variable postprocessing is set.

 Update current FW Cmd for callback use. */

		/* We delay only 50us to prevent

	/* The way to be capable to switch clock request

	 * when the PG setting does not support clock request.

	 * This is the backdoor solution to switch clock

 Switch EPHY parameter!!!! */

 Delay L1 enter time */

 Fw v.51 and later. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * RTL8XXXU mac80211 USB driver - 8192e specific subdriver

 *

 * Copyright (c) 2014 - 2017 Jes Sorensen <Jes.Sorensen@gmail.com>

 *

 * Portions, notably calibration code:

 * Copyright(c) 2007 - 2011 Realtek Corporation. All rights reserved.

 *

 * This driver was written as a replacement for the vendor provided

 * rtl8723au driver. As the Realtek 8xxx chips are very similar in

 * their programming interface, I have started adding support for

 * additional 8xxx chips like the 8192cu, 8188cus, etc.

 External PA or external LNA */

 External PA or external LNA */

 External PA or external LNA */

 External PA or external LNA */

 External PA or external LNA */

 Regular */

 External PA or external LNA */

 External PA or external LNA */

 External PA or external LNA */

 External PA or external LNA */

 External PA or external LNA */

 A record is [ total length | 0x03 | value ] */

	/*

	 * The whole device info section seems to be 80 characters, make sure

	 * we don't read further.

	/*

	 * device_info section seems to be laid out as records

	 * [ total length | 0x03 | value ] so:

	 * - vendor length + 2

	 * - 0x03

	 * - vendor string (not null terminated)

	 * - product length + 2

	 * - 0x03

	 * - product string (not null terminated)

	 * Then there is one or 2 0x00 on all the 4 devices I own or found

	 * dumped online.

	 * As previous version of the code handled an optional serial

	 * string, I now assume there may be a third record if the

	 * length is not 0.

 6. 0x1f[7:0] = 0x07 */

	/*

	 * TX IQK

	 * PA/PAD controlled by 0x0

 Path A IQK setting */

 LO calibration setting */

 One shot, path A LOK & IQK */

 Check failed */

 Leave IQK mode */

 Enable path A PA in TX IQK mode */

 PA/PAD control by 0x56, and set = 0x0 */

 Enter IQK mode */

 TX IQK setting */

 path-A IQK setting */

 LO calibration setting */

 One shot, path A LOK & IQK */

 Check failed */

 PA/PAD controlled by 0x0 */

 Modify RX IQK mode table */

 PA/PAD control by 0x56, and set = 0x0 */

 Enter IQK mode */

 IQK setting */

 Path A IQK setting */

 LO calibration setting */

 One shot, path A LOK & IQK */

 Path B IQK setting */

 LO calibration setting */

 One shot, path A LOK & IQK */

 Check failed */

 Leave IQK mode */

 Enable path A PA in TX IQK mode */

 PA/PAD control by 0x56, and set = 0x0 */

 Enter IQK mode */

 TX IQK setting */

 path-A IQK setting */

 LO calibration setting */

 One shot, path A LOK & IQK */

 Check failed */

		/*

		 * PA/PAD controlled by 0x0

		 * Vendor driver restores RF_A here which I believe is a bug

 Modify RX IQK mode table */

 PA/PAD control by 0x56, and set = 0x0 */

 Enter IQK mode */

 IQK setting */

 Path A IQK setting */

 LO calibration setting */

 One shot, path A LOK & IQK */

	/*

	 * Note: IQ calibration must be performed after loading

	 *       PHY_REG.txt , and radio_a, radio_b.txt

 Save ADDA parameters, turn Path A ADDA on */

 MAC settings */

 Path A into standby */

 Turn Path B ADDA on */

 Back to BB mode, load original value */

 Reload ADDA power saving parameters */

 Reload MAC parameters */

 Reload BB parameters */

 Restore RX initial gain */

 Load 0xe30 IQC default value */

 last is final result */

/*

 * This is needed for 8723bu as well, presumable

	/*

	 * 40Mhz crystal source, MAC 0x28[2]=0

	/*

	 * 92e AFE parameter

	 * AFE PLL KVCO selection, MAC 0x28[6]=1

	/*

	 * AFE PLL KVCO selection, MAC 0x78[21]=0

 Clear suspend enable and power down enable*/

 disable HWPDN 0x04[15]=0*/

 disable SW LPS 0x04[10]= 0 */

 disable WL suspend*/

 wait till 0x04[17] = 1 power ready*/

 We should be able to optimize the following three entries into one */

 release WLON reset 0x04[16]= 1*/

 set, then poll until 0 */

	/*

	 * Poll 32 bit wide 0x05f8 for 0x00000000 to ensure no TX is pending.

 Disable CCK and OFDM, clock gated */

 Reset whole BB */

 Reset MAC TRX */

 Turn off RF */

 Switch DPDT_SEL_P output from register 0x65[2] */

 0x0005[1] = 1 turn off MAC by HW state machine*/

 0x04[12:11] = 01 enable WL suspend */

		/*

		 * Raise 1.2V voltage

	/*

	 * Adjust AFE before enabling PLL

	/*

	 * Enable MAC DMA/WMAC/SCHEDULE/SEC block

	 * Set CR bit10 to enable 32k calibration.

 Turn off RF */

 Reset Firmware if running in RAM */

 Reset MCU */

 Reset MCU ready status */

	/*

	 * WLAN action by PTA

	/*

	 * Fix external switch Main->S1, Aux->S0

 SPDX-License-Identifier: GPL-2.0-only

/*

 * RTL8XXXU mac80211 USB driver - 8723a specific subdriver

 *

 * Copyright (c) 2014 - 2017 Jes Sorensen <Jes.Sorensen@gmail.com>

 *

 * Portions, notably calibration code:

 * Copyright(c) 2007 - 2011 Realtek Corporation. All rights reserved.

 *

 * This driver was written as a replacement for the vendor provided

 * rtl8723au driver. As the Realtek 8xxx chips are very similar in

 * their programming interface, I have started adding support for

 * additional 8xxx chips like the 8192cu, 8188cus, etc.

 Reduce 80M spur */

 0x20[0] = 1 enable LDOA12 MACRO block for all interface*/

 0x67[0] = 0 to disable BT_GPS_SEL pins*/

 0x00[5] = 0 release analog Ips to digital, 1:isolation */

 disable SW LPS 0x04[10]= 0 */

 wait till 0x04[17] = 1 power ready*/

 We should be able to optimize the following three entries into one */

 release WLON reset 0x04[16]= 1*/

 disable HWPDN 0x04[15]= 0*/

 disable WL suspend*/

 set, then poll until 0 */

 0x4C[23] = 0x4E[7] = 1, switch DPDT_SEL_P output from WL BB */

	/*

	 * Note: Vendor driver actually clears this bit, despite the

	 * documentation claims it's being set!

	/*

	 * RSV_CTRL 0x001C[7:0] = 0x00, unlock ISO/CLK/Power control register

	/*

	 * 0x0004[19] = 1, reset 8051

	/*

	 * Enable MAC DMA/WMAC/SCHEDULE/SEC block

	 * Set CR bit10 to enable 32k calibration.

 For EFuse PG */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * RTL8XXXU mac80211 USB driver

 *

 * Copyright (c) 2014 - 2017 Jes Sorensen <Jes.Sorensen@gmail.com>

 *

 * Portions, notably calibration code:

 * Copyright(c) 2007 - 2011 Realtek Corporation. All rights reserved.

 *

 * This driver was written as a replacement for the vendor provided

 * rtl8723au driver. As the Realtek 8xxx chips are very similar in

 * their programming interface, I have started adding support for

 * additional 8xxx chips like the 8192cu, 8188cus, etc.

 RF_A */

 RF_B */

/*

 * The RTL8723BU driver indicates that registers 0xb2 and 0xb6 can

 * have write issues in high temperature conditions. We may have to

 * retry writing them.

 Use XB for path B */

	/*

	 * MBOX ready?

	/*

	 * Need to swap as it's being swapped again by rtl8xxxu_write16/32()

	/*

	 * MBOX ready?

	/*

	 * Need to swap as it's being swapped again by rtl8xxxu_write16/32()

 RF RX code for preamble power saving */

 Disable TX for four paths */

 Enable power saving */

 AFE control register to power down bits [30:22] */

 Power down RF module */

/*

 * The rtl8723a has 3 channel groups for it's efuse settings. It only

 * supports the 2.4GHz band, so channels 1 - 14:

 *  group 0: channels 1 - 3

 *  group 1: channels 4 - 9

 *  group 2: channels 10 - 14

 *

 * Note: We index from 0 in the code

/*

 * Valid for rtl8723bu and rtl8192eu

		/*

		 * Set Control channel to upper or lower. These settings

		 * are required only for 40MHz

 0xc00 */

 Hack */

		/*

		 * Set Control channel to upper or lower. These settings

		 * are required only for 40MHz

 0xc00 */

	/*

	 * Fallback for devices that do not provide REG_NORMAL_SIE_EP_TX

 Write Address */

 Poll for data read */

  1.2V Power: From VDDON with Power Cut(0x0000[15]), default valid */

  Reset: 0x0000[28], default valid */

	/*

	 * Clock: Gated(0x0008[5]) 8M(0x0008[1]) clock from ANA, default valid

 Default value is 0xff */

 extended header */

 All words disabled */

 Get word enable value from PG header */

 We have 8 bits to indicate validity */

 Check word enable condition in the section */

 Poll checksum report */

	/*

	 * Reset the 8051 in order for the firmware to start running,

	 * otherwise it won't come up on the 8192eu

 Wait for firmware to become ready */

	/*

	 * Init H2C command

 8051 enable */

 MCU firmware download enable */

 8051 reset */

 Reset firmware download checksum */

 MCU firmware download disable */

 Inform 8051 to perform reset */

 Force firmware reset */

 6. 0x1f[7:0] = 0x07 */

/*

 * Most of this is black magic retrieved from the old rtl8723au driver

		/*

		 * For 1T2R boards, patch the registers.

		 *

		 * It looks like 8191/2 1T2R boards use path B for TX

 For path B, use XB */

	/*

	 * These two we might be able to optimize into one

 0x10 << 16 */

	/*

	 * These two we might be able to optimize into one

 For path B, use XB */

 Mark remaining pages as a ring buffer */

  Let last entry point to the start entry of ring buffer */

	/*

	 * None of the vendor drivers are configuring the beacon

	 * queue here .... why?

 for path A and path B */

 path A OK */

 path B OK */

 for path A and path B */

 path A TX OK */

 path A RX OK */

 path B RX OK */

 path B RX OK */

 path-A IQK setting */

IS_81xxC_VENDOR_UMC_B_CUT(pHalData->VersionID)?0x28160202: */

 path-B IQK setting */

 LO calibration setting */

 One shot, path A LOK & IQK */

 Check failed */

 If TX not OK, ignore RX */

 If TX is OK, check whether RX is OK */

 One shot, path B LOK & IQK */

 Check failed */

	/*

	 * Note: IQ calibration must be performed after loading

	 *       PHY_REG.txt , and radio_a, radio_b.txt

 Save ADDA parameters, turn Path A ADDA on */

 Switch BB to PI mode to do IQ Calibration. */

 MAC settings */

 Page B init */

 IQ calibration setting */

 TX IQK OK */

		/*

		 * Path A into standby

 Turn Path B ADDA on */

 TX IQK OK */

 Back to BB mode, load original value */

			/*

			 * Switch back BB to SI mode after finishing

			 * IQ Calibration

 Reload ADDA power saving parameters */

 Reload MAC parameters */

 Reload BB parameters */

 Restore RX initial gain */

 Load 0xe30 IQC default value */

 last is final result */

 Check continuous TX and Packet TX */

 Disable all continuous TX */

 Read original RF mode Path A */

 Set RF mode to standby Path A */

 Path-B */

  Deal with Packet TX case */

  block all queues */

 Start LC calibration */

 Restore original parameters */

 Path-A */

 Path-B */

  Deal with Packet TX case */

 Start of rtl8723AU_card_enable_flow */

 Act to Cardemu sequence*/

 Turn off RF */

 0x004E[7] = 0, switch DPDT_SEL_P output from register 0x0065[2] */

 0x0005[1] = 1 turn off MAC by HW state machine*/

 0x0000[5] = 1 analog Ips to digital, 1:isolation */

 0x0020[0] = 0 disable LDOA12 MACRO block*/

	/*

	 * Poll - wait for RX packet to complete

 Disable CCK and OFDM, clock gated */

 Reset baseband */

 Reset MAC TRX */

 Reset MAC TRX */

 CR_SECURITY_ENABLE */

 Respond TX OK to scheduler */

 Clear suspend enable and power down enable*/

 0x48[16] = 0 to disable GPIO9 as EXT WAKEUP*/

 0x04[12:11] = 11 enable WL suspend*/

 0x0007[7:0] = 0x20 SOP option to disable BG/MB */

 0x04[12:11] = 01 enable WL suspend */

 0x48[16] = 1 to enable GPIO9 as EXT wakeup */

 Fix USB interface interference issue */

	/*

	 * This sets TXDMA_OFFSET_DROP_DATA_EN (bit 9) as well as bits

	 * 8 and 5, for which I have found no documentation.

	/*

	 * Solve too many protocol error on USB bus.

	 * Can't do this for 8188/8192 UMC A cut parts

	/*

	 * Workaround for 8188RU LNA power leakage problem.

 Turn off RF */

 Reset Firmware if running in RAM */

 Reset MCU */

 Reset MCU ready status */

 Reset MCU IO Wrapper */

 RSV_CTRL 0x1C[7:0] = 0x0e  lock ISO/CLK/Power control register */

 Check if MAC is already powered on */

	/*

	 * Fix 92DU-VC S3 hang with the reason is that secondary mac is not

	 * initialized. First MAC returns 0xea, second MAC returns 0x00

	/*

	 * Set RX page boundary

 RFSW Control - clear bit 14 ?? */

 0x860[6:5]= 00 - why? - this sets antenna B */

		/*

		 * Set TX buffer boundary

	/*

	 * The vendor drivers set PBP for all devices, except 8192e.

	 * There is no explanation for this in any of the sources.

		/*

		 * Chip specific quirks

		/*

		 * Enable TX report and TX report timer for 8723bu/8188eu/...

 Set MAX RPT MACID */

 TX report Timer. Unit: 32us */

 tmp ps ? */

	/*

	 * Unit in 8 bytes, not obvious what it is used for

		/*

		 * Enable all interrupts - not obvious USB needs to do this

	/*

	 * Configure initial WMAC settings

	/*

	 * Accept all multicast

	/*

	 * Init adaptive controls

 CCK = 0x0a, OFDM = 0x10 */

	/*

	 * Init EDCA

 Set CCK SIFS */

 Set OFDM SIFS */

 TXOP */

 Set data auto rate fallback retry count */

  Set ACK timeout */

	/*

	 * Initialize beacon parameters

	/*

	 * Initialize burst parameters

		/*

		 * For USB high speed set 512B packets

		/*

		 * For USB high speed set 512B packets

	/*

	 * Enable CCK and OFDM block

	/*

	 * Invalidate all CAM entries - bit 30 is undocumented

	/*

	 * Start out with default power levels for channel 6, 20MHz

 Let the 8051 take control of antenna setting */

 Disable BAR - not sure if this has any effect on USB */

		/*

		 * 0x4c6[3] 1: RTS BW = Data BW

		 * 0: RTS BW depends on CCA / secondary CCA result.

		/*

		 * Reset USB mode switch setting

	/*

	 * This should enable thermal meter

 Set NAV_UPPER to 30000us */

		/*

		 * 2011/03/09 MH debug only, UMC-B cut pass 2500 S5 test,

		 * but we need to find root cause.

		 * This is 8723au only.

 ack for xmit mgmt frames. */

		/*

		 * Fix LDPC rx hang issue.

	/*

	 * This is a bit of a hack - the lower bits of the cipher

	 * suite selector happens to match the cipher index in the CAM

	/*

	 * Barry Day reports this causes issues with 8192eu and 8723bu

	 * devices reconnecting. The reason for this is unclear, but

	 * until it is better understood, leave the code in place but

	 * disabled, so it is not lost.

	/*

	 * The number of packets we can take looks to be buffer size / 512

	 * which matches the 512 byte rounding we have to do when de-muxing

	 * the packets.

	 *

	 * Sample numbers from the vendor driver:

	 * USB High-Speed mode values:

	 *   RxAggBlockCount = 8 : 512 byte unit

	 *   RxAggBlockTimeout = 6

	 *   RxAggPageCount = 48 : 128 byte unit

	 *   RxAggPageTimeout = 4 or 6 (absolute time 34ms/(2^6))

	/*

	 * REG_RXDMA_AGG_PG_TH + 1 seems to be the timeout register on

	 * gen2 chips and rtl8188eu. The rtl8723au seems unhappy if we

	 * don't set it, so better set both.

 TODO: Set bits 28-31 for rate adaptive id */

 joinbss sequence */

/*

 * Despite newer chips 8723b/8812/8821 having a larger TX descriptor

 * format. The descriptor checksum is still only calculated over the

 * initial 32 bytes of the descriptor!

	/*

	 * Clear csum field before calculation, as the csum field is

	 * in the middle of the struct.

/*

 * Fill in v1 (gen1) specific TX descriptor bits.

 * This format is used on 8188cu/8192cu/8723au

	/*

	 * rts_rate is zero if RTS/CTS or CTS to SELF are not enabled

/*

 * Fill in v2 (gen2) specific TX descriptor bits.

 * This format is used on 8192eu/8723bu

	/*

	 * rts_rate is zero if RTS/CTS or CTS to SELF are not enabled

		/*

		 * For some reason the vendor driver doesn't set

		 * TXDESC40_HW_RTS_ENABLE for CTS to SELF

 (tx_info->flags & IEEE80211_TX_CTL_AMPDU) && */

		/*

		 * Handle PHY stats for CCK rates

		/*

		 * If out of memory or temporary error, put it back on the

		 * queue and try again. Otherwise the device is dead/gone

		 * and we should drop it.

/*

 * The RTL8723BU/RTL8192EU vendor driver use coexistence table type

 * 0-7 to represent writing different combinations of register values

 * to REG_BT_COEX_TABLEs. It's for different kinds of coexistence use

 * cases which Realtek doesn't provide detail for these settings. Keep

 * this aligned with vendor driver for easier maintenance.

		/*

		 * Only read pkt_cnt from the header if we're parsing the

		 * first packet

		/*

		 * Only clone the skb if there's enough data at the end to

		 * at least cover the rx descriptor

	/*

	 * FIF_ALLMULTI ignored as all multicast frames are accepted (REG_MAR)

	/*

	 * FIF_PLCPFAIL not supported?

	/*

	 * FIF_PROBE_REQ ignored as probe requests always seem to be accepted

	/*

	 * Accept all data and mgmt frames

	/*

	 * Disable all data and mgmt frames

	/*

	 * Disable interrupts

	/*

	 * Some APs will negotiate HT20_40 in a noisy environment leading

	 * to miserable performance. Rather than defaulting to this, only

	 * enable it if explicitly requested at module load time.

	/*

	 * The firmware handles rate control

 TP-Link TL-WN822N v4 */

 D-Link DWA-131 rev E1, tested by David Patiño */

 Tested by Myckel Habets */

 Still supported by rtlwifi */

 Tested by Larry Finger */

 Tested by Andrea Merello */

 Tested by Jocelyn Mayer */

 Tested by Stefano Bravi */

 Currently untested 8188 series devices */

 Currently untested 8192 series devices */

 found in rtl8192eu vendor driver */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * RTL8XXXU mac80211 USB driver - 8723b specific subdriver

 *

 * Copyright (c) 2014 - 2017 Jes Sorensen <Jes.Sorensen@gmail.com>

 *

 * Portions, notably calibration code:

 * Copyright(c) 2007 - 2011 Realtek Corporation. All rights reserved.

 *

 * This driver was written as a replacement for the vendor provided

 * rtl8723au driver. As the Realtek 8xxx chips are very similar in

 * their programming interface, I have started adding support for

 * additional 8xxx chips like the 8192cu, 8188cus, etc.

	/*

	 * The 8723bu vendor driver indicates that bit 8 should be set in

	 * 0x51 for package types TFBGA90, TFBGA80, and TFBGA79. However

	 * they never actually check the package type - and just default

	 * to not setting it.

	/*

	 * 0x71 has same package type condition as for register 0x51

 6. 0x1f[7:0] = 0x07 */

 Why? */

	/*

	 * PHY LCK

	/*

	 * Leave IQK mode

	/*

	 * Enable path A PA in TX IQK mode

	/*

	 * Tx IQK setting

 path-A IQK setting */

 LO calibration setting */

	/*

	 * Enter IQK mode

	/*

	 * The vendor driver indicates the USB module is always using

	 * S0S1 path 1 for the 8723bu. This may be different for 8192eu

	/*

	 * Bit 12 seems to be BT_GRANT, and is only found in the 8723bu.

	 * No trace of this in the 8192eu or 8188eu vendor drivers.

 One shot, path A LOK & IQK */

 Restore Ant Path */

 GNT_BT = 1 */

	/*

	 * Leave IQK mode

 Check failed */

 If TX not OK, ignore RX */

	/*

	 * Leave IQK mode

	/*

	 * Enable path A PA in TX IQK mode

	/*

	 * Tx IQK setting

 path-A IQK setting */

 LO calibration setting */

	/*

	 * Enter IQK mode

	/*

	 * The vendor driver indicates the USB module is always using

	 * S0S1 path 1 for the 8723bu. This may be different for 8192eu

	/*

	 * Bit 12 seems to be BT_GRANT, and is only found in the 8723bu.

	 * No trace of this in the 8192eu or 8188eu vendor drivers.

 One shot, path A LOK & IQK */

 Restore Ant Path */

 GNT_BT = 1 */

	/*

	 * Leave IQK mode

 Check failed */

 If TX not OK, ignore RX */

	/*

	 * Modify RX IQK mode

	/*

	 * PA, PAD setting

	/*

	 * RX IQK setting

 path-A IQK setting */

 LO calibration setting */

	/*

	 * Enter IQK mode

	/*

	 * Disable BT

 One shot, path A LOK & IQK */

 Restore Ant Path */

 GNT_BT = 1 */

	/*

	 * Leave IQK mode

 Check failed */

 If TX not OK, ignore RX */

, path_b_ok */;

	/*

	 * Note: IQ calibration must be performed after loading

	 *       PHY_REG.txt , and radio_a, radio_b.txt

 Save ADDA parameters, turn Path A ADDA on */

 MAC settings */

	/*

	 * RX IQ calibration setting for 8723B D cut large current issue

	 * when leaving IPS

		/*

		 * Path A into standby

 Turn Path B ADDA on */

 Back to BB mode, load original value */

 Reload ADDA power saving parameters */

 Reload MAC parameters */

 Reload BB parameters */

 Restore RX initial gain */

 Load 0xe30 IQC default value */

 last is final result */

 Turn off RF */

 Enable rising edge triggering interrupt */

 Release WLON reset 0x04[16]= 1*/

 0x0005[1] = 1 turn off MAC by HW state machine*/

 Enable BT control XTAL setting */

 0x0000[5] = 1 analog Ips to digital, 1:isolation */

 0x0020[0] = 0 disable LDOA12 MACRO block*/

 0x20[0] = 1 enable LDOA12 MACRO block for all interface */

 0x67[0] = 0 to disable BT_GPS_SEL pins*/

 0x00[5] = 0 release analog Ips to digital, 1:isolation */

 Disable SW LPS 0x04[10]= 0 */

 Wait until 0x04[17] = 1 power ready */

 We should be able to optimize the following three entries into one */

 Release WLON reset 0x04[16]= 1*/

 Disable HWPDN 0x04[15]= 0*/

 Disable WL suspend*/

 Set, then poll until 0 */

 Enable WL control XTAL setting */

 Enable falling edge triggering interrupt */

 Enable GPIO9 interrupt mode */

 Enable GPIO9 input mode */

 Enable HSISR GPIO[C:0] interrupt */

 Enable HSISR GPIO9 interrupt */

 For GPIO9 internal pull high setting BIT(14) */

	/*

	 * Enable MAC DMA/WMAC/SCHEDULE/SEC block

	 * Set CR bit10 to enable 32k calibration.

	/*

	 * BT coexist power on settings. This is identical for 1 and 2

	 * antenna parts.

 Antenna inverse */

	/*

	 * Disable TX report timer

 Reset Firmware if running in RAM */

 Reset MCU */

 Reset MCU ready status */

 APS_FSMCO_HW_SUSPEND */

 0x48[16] = 1 to enable GPIO9 as EXT wakeup */

	/*

	 * No indication anywhere as to what 0x0790 does. The 2 antenna

	 * vendor code preserves bits 6-7 here.

	/*

	 * 0x0778 seems to be related to enabling the number of antennas

	 * In the vendor driver halbtc8723b2ant_InitHwConfig() sets it

	 * to 0x03, while halbtc8723b1ant_InitHwConfig() sets it to 0x01

 BT TRx Mask on */

	/*

	 * Set BT grant to low

	/*

	 * WLAN action by PTA

	/*

	 * BT select S0/S1 controlled by WiFi

	/*

	 * Bits 6/7 are marked in/out ... but for what?

	/*

	 * Fix external switch Main->S1, Aux->S0

	/*

	 * Different settings per different antenna position.

	 *      Antenna Position:   | Normal   Inverse

	 * --------------------------------------------------

	 * Antenna switch to BT:    |  0x280,   0x00

	 * Antenna switch to WiFi:  |  0x0,     0x280

	 * Antenna switch to PTA:   |  0x200,   0x80

	/*

	 * Software control, antenna at WiFi side

	/*

	 * For now simply disable RX aggregation

 Time duration for NHM unit: 4us, 0x2710=40ms */

 TH8 */

 Enable CCK */

 Max power amongst all RX antennas */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * RTL8XXXU mac80211 USB driver - 8188c/8188r/8192c specific subdriver

 *

 * Copyright (c) 2014 - 2017 Jes Sorensen <Jes.Sorensen@gmail.com>

 *

 * Portions, notably calibration code:

 * Copyright(c) 2007 - 2011 Realtek Corporation. All rights reserved.

 *

 * This driver was written as a replacement for the vendor provided

 * rtl8723au driver. As the Realtek 8xxx chips are very similar in

 * their programming interface, I have started adding support for

 * additional 8xxx chips like the 8192cu, 8188cus, etc.

	/*

	 * RSV_CTRL 0x001C[7:0] = 0x00, unlock ISO/CLK/Power control register

	/*

	 * Auto enable WLAN

	/*

	 * Enable radio, GPIO, LED

	/*

	 * Release RF digital isolation

	/*

	 * Enable MAC DMA/WMAC/SCHEDULE/SEC block

	/*

	 * Workaround for 8188RU LNA power leakage problem.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Linux RFKILL support for RTL8187

 *

 * Copyright (c) 2009 Herton Ronaldo Krzesinski <herton@mandriva.com.br>

 *

 * Based on the RFKILL handling in the r8187 driver, which is:

 * Copyright (c) Realtek Semiconductor Corp. All rights reserved.

 *

 * Thanks to Realtek for their support!

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Radio tuning for RTL8225 on RTL8187

 *

 * Copyright 2007 Michael Wu <flamingice@sourmilk.net>

 * Copyright 2007 Andrea Merello <andrea.merello@gmail.com>

 *

 * Based on the r8187 driver, which is:

 * Copyright 2005 Andrea Merello <andrea.merello@gmail.com>, et al.

 *

 * Magic delays, register offsets, and phy value tables below are

 * taken from the original r8187 driver sources.  Thanks to Realtek

 * for their support!

 -82dBm */

 -82dBm */

 -82dBm */

 -78dBm */

 -74dBm */

 -70dBm */

 -66dBm */

 FIXME: optional?

 anaparam2 on */

 RX antenna default to A */

 B: 0xDB */

 B: 0x10 */

 B: 0x00 */

 set sensitivity */

 anaparam2 on */

 do nothing */

 do nothing */

 -82-1dBm */

 -82-2dBm */

 -82-3dBm */

 -78dBm */

 -74dBm */

 -70dBm */

 -66dBm */

 RX antenna default to A */

 B: 0xDB */

 B: 0x10 */

 B: 0x00 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Linux device driver for RTL8187

 *

 * Copyright 2007 Michael Wu <flamingice@sourmilk.net>

 * Copyright 2007 Andrea Merello <andrea.merello@gmail.com>

 *

 * Based on the r8187 driver, which is:

 * Copyright 2005 Andrea Merello <andrea.merello@gmail.com>, et al.

 *

 * The driver was extended to the RTL8187B in 2008 by:

 *	Herton Ronaldo Krzesinski <herton@mandriva.com.br>

 *	Hin-Tak Leung <htl10@users.sourceforge.net>

 *	Larry Finger <Larry.Finger@lwfinger.net>

 *

 * Magic delays and register offsets below are taken from the original

 * r8187 driver sources.  Thanks to Realtek for their support!

 Asus */

 Belkin */

 Realtek */

 Surecom */

 Logitech */

 Netgear */

 HP */

 Sitecom */

 Sphairon Access Systems GmbH */

 Dick Smith Electronics */

 Abocom */

 Qcom */

 AirLive */

 Linksys */

 queue is "full", discard last items */

		/* Retry information for the RTI8187 is only available by

		 * reading a register in the device. We are in interrupt mode

	/* HW will perform RTS-CTS when only RTS flags is set.

	 * HW will perform CTS-to-self when both RTS and CTS flags are set.

	 * RTS rate and RTS duration will be used also for CTS-to-self.

 fc needs to be calculated before skb_push() */

		/* As with the RTL8187B below, the AGC is used to calculate

		 * signal strength. In this case, the scaling

		 * constants are derived from the output of p54usb.

		/* The Realtek datasheet for the RTL8187B shows that the RX

		 * header contains the following quantities: signal quality,

		 * RSSI, AGC, the received power in dB, and the measured SNR.

		 * In testing, none of these quantities show qualitative

		 * agreement with AP signal strength, except for the AGC,

		 * which is inversely proportional to the strength of the

		 * signal. In the following, the signal strength

		 * is derived from the AGC. The arbitrary scaling constants

		 * are chosen to make the results close to the values obtained

		 * for a BCM4312 using b43 as the driver. The noise is ignored

		 * for now.

 TODO check rx queue length and refill *somewhere* */

	/*

	 * Read from status buffer:

	 *

	 * bits [30:31] = cmd type:

	 * - 0 indicates tx beacon interrupt

	 * - 1 indicates tx close descriptor

	 *

	 * In the case of tx beacon interrupt:

	 * [0:9] = Last Beacon CW

	 * [10:29] = reserved

	 * [30:31] = 00b

	 * [32:63] = Last Beacon TSF

	 *

	 * If it's tx close descriptor:

	 * [0:7] = Packet Retry Count

	 * [8:14] = RTS Retry Count

	 * [15] = TOK

	 * [16:27] = Sequence No

	 * [28] = LS

	 * [29] = FS

	 * [30:31] = 01b

	 * [32:47] = unused (reserved?)

	 * [48:63] = MAC Used Time

			/*

			 * While testing, it was discovered that the seq_no

			 * doesn't actually contains the sequence number.

			 * Instead of returning just the 12 bits of sequence

			 * number, hardware is returning entire sequence control

			 * (fragment number plus sequence number) in a 12 bit

			 * only field overflowing after some time. As a

			 * workaround, just consider the lower bits, and expect

			 * it's unlikely we wrongly ack some sent data

 reload registers from eeprom */

 reset */

 setup card */

 TODO: set RESP_RATE and BRSR properly

 host_usb_init */

	/* Reset PLL sequence on 8187B. Realtek note: reduces power

	/* BRSR (Basic Rate Set Register) on 8187B looks to be the same as

	 * RESP_RATE on 8187L in Realtek sources: each bit should be each

 Auto Rate Fallback Register (ARFR): 1M-54M setting */

 RFSW_CTRL register */

 AIFSN[AC_VO] */

 AIFSN[AC_VI] */

 AIFSN[AC_BK] */

 AIFSN[AC_BE] */

 ENEDCA flag must always be set, transmit issues? */

	/* The RTL8187 returns the retry count through register 0xFFFA. In

	 * addition, it appears to be a cumulative retry count, not the

	 * value for the current TX packet. When multiple TX entries are

	 * waiting in the queue, the retry count will be the total for all.

	 * The "error" may matter for purposes of rate setting, but there is

	 * no other choice with this hardware.

 RX FIFO threshold NONE */) |

 MAX RX DMA */) |

 short retry limit */) |

 long retry limit */) |

 MAX TX DMA */));

 RX FIFO threshold NONE */) |

 MAX RX DMA */) |

 MAX TX DMA */) |

 don't overflow the tx ring */

 grab a fresh beacon */

	/*

	 * update beacon timestamp w/ TSF value

	 * TODO: make hardware update beacon timestamp

 TODO: use actual beacon queue */

	/*

	 * schedule next beacon

	 * TODO: use hardware support for beacon timing

 Initialize driver private area */

	/* Enable TX loopback on MAC level to avoid TX during channel

	 * changes, as this has be seen to causes problems and the

	 * card will stop work until next reset

/*

 * With 8187B, AC_*_PARAM clashes with FEMR definition in struct rtl818x_csr for

 * example. Thus we have to use raw values for AC_*_PARAM register addresses.

 AC_VO */

 AC_VI */

 AC_BK */

 AC_BE */

		/*

		 * BRSR+1 on 8187B is in fact EIFS register

		 * Value in units of 4 us

		/*

		 * For 8187B, CARRIER_SENSE_COUNTER is in fact ack timeout

		 * register. In units of 4 us like eifs register

		 * ack_timeout = ack duration + plcp + difs + preamble

		/*

		 * This is the structure of AC_*_PARAM registers in 8187B:

		 * - TXOP limit field, bit offset = 16

		 * - ECWmax, bit offset = 12

		 * - ECWmin, bit offset = 8

		 * - AIFS, bit offset = 0

 allocate "DMA aware" buffer for register accesses */

 Initialize rate-control variables */

	/* 0 means asic B-cut, we should use SW 3 wire

	 * bit-by-bit banging for radio. 1 means we can use

			/* Some RTL8187B devices have a USB ID of 0x8187

		/*

		 * Force USB request to write radio registers for 8187B, Realtek

		 * only uses it in their sources

		/*if (priv->asic_rev == 0) {

			printk(KERN_WARNING "rtl8187: Forcing use of USB "

			       "requests to write to radio registers\n");

			priv->asic_rev = 1;

 Handle the differing rfkill GPIO bit in different models */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Linux LED driver for RTL8187

 *

 * Copyright 2009 Larry Finger <Larry.Finger@lwfinger.net>

 *

 * Based on the LED handling in the r8187 driver, which is:

 * Copyright (c) Realtek Semiconductor Corp. All rights reserved.

 *

 * Thanks to Realtek for their support!

	/* As this routine does read/write operations on the hardware, it must

	 * be run from a work queue.

 Don't change the LED, when the device is down. */

 Skip if the LED is not registered. */

	/* As this routine does read/write operations on the hardware, it must

	 * be run from a work queue.

 Don't change the LED, when the device is down. */

 Skip if the LED is not registered. */

 Callback from the LED subsystem. */

 The LED is off for 1/20 sec - it just blinks. */

	/* According to the vendor driver, the LED operation depends on the

	 * customer ID encoded in the EEPROM

 registration of RX LED failed - unregister */

 def CONFIG_RTL8187_LEDS */

 SPDX-License-Identifier: GPL-2.0-only

/* Radio tuning for RTL8225 on RTL8187SE

 *

 * Copyright 2009 Larry Finger <Larry.Finger@lwfinger.net>

 * Copyright 2014 Andrea Merello <andrea.merello@gmail.com>

 *

 * Based on the r8180 and Realtek r8187se drivers, which are:

 * Copyright 2004-2005 Andrea Merello <andrea.merello@gmail.com>, et al.

 *

 * Also based on the rtl8187 driver, which is:

 * Copyright 2007 Michael Wu <flamingice@sourmilk.net>

 * Copyright 2007 Andrea Merello <andrea.merello@gmail.com>

 write OFDM_CONFIG table */

 Page 1 */

 Page 0: reg 0 - 15 */

 page 1: reg 16-30 */

 page 0 */

 power save parameters */

 TODO: move to dev.c */

 power control */

 turn on RF */

 turn on RF again */

 turn on BB */

 checked for 8187se */

 turn off BB RXIQ matrix to cut off rx signal */

 turn off RF */

 turn off A/D and D/A */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Radio tuning for RTL8225 on RTL8180

 *

 * Copyright 2007 Michael Wu <flamingice@sourmilk.net>

 * Copyright 2007 Andrea Merello <andrea.merello@gmail.com>

 *

 * Based on the r8180 driver, which is:

 * Copyright 2005 Andrea Merello <andrea.merello@gmail.com>, et al.

 *

 * Thanks to Realtek for their support!

 -82dbm */

 -82dbm */

 -82dbm */

 -78dbm */

 -74dbm */

 -70dbm */

 -66dbm */

 FIXME: optional? */

 TODO: use set_anaparam2 dev.c_func*/

 anaparam2 on */

 host_pci_init */

 FIXME: ehh?? */

 TODO: check if we need really to change BRSR to do RF config */

 TODO: minipci */

 RX antenna default to A */

 B: 0xDB */

 B: 0x10 */

 B: 0x00 */

 set OFDM initial gain */

 set CCK threshold */

 host_pci_init */

 FIXME: ehh?? */

 TODO: check if we need really to change BRSR to do RF config */

		/* TODO: readd calibration failure message when the calibration

 FIXME: not needed? */

 RX antenna default to A */

 B: 0xDB */

 B: 0x10 */

 B: 0x00 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Radio tuning for GCT GRF5101 on RTL8180

 *

 * Copyright 2007 Andrea Merello <andrea.merello@gmail.com>

 *

 * Code from the BSD driver and the rtl8181 project have been

 * very useful to understand certain things

 *

 * I want to thanks the Authors of such projects and the Ndiswrapper

 * project Authors.

 *

 * A special Big Thanks also is for all people who donated me cards,

 * making possible the creation of the original rtl8180 driver

 * from which this code is derived!

 MAC will bang bits to the chip */

 TODO(?): just return agc (or agc + 5) to avoid mult / div */

 set TX power */

 set frequency */

 0x61ff original value */

 baseband configuration */

 enable ant diversity */

 disable ant diversity */

/* Linux device driver for RTL8180 / RTL8185 / RTL8187SE

 *

 * Copyright 2007 Michael Wu <flamingice@sourmilk.net>

 * Copyright 2007,2014 Andrea Merello <andrea.merello@gmail.com>

 *

 * Based on the r8180 driver, which is:

 * Copyright 2004-2005 Andrea Merello <andrea.merello@gmail.com>, et al.

 *

 * Thanks to Realtek for their support!

 *

 ************************************************************************

 *

 * The driver was extended to the RTL8187SE in 2014 by

 * Andrea Merello <andrea.merello@gmail.com>

 *

 * based also on:

 *  - portions of rtl8187se Linux staging driver, Copyright Realtek corp.

 *    (available in drivers/staging/rtl8187se directory of Linux 3.14)

 *  - other GPL, unpublished (until now), Linux driver code,

 *    Copyright Larry Finger <Larry.Finger@lwfinger.net>

 *

 * A huge thanks goes to Sara V. Nari who forgives me when I'm

 * sitting in front of my laptop at evening, week-end, night...

 *

 * A special thanks goes to Antonio Cuni, who helped me with

 * some python userspace stuff I used to debug RTL8187SE code, and who

 * bought a laptop with an unsupported Wi-Fi card some years ago...

 *

 * Thanks to Larry Finger for writing some code for rtl8187se and for

 * his suggestions.

 *

 * Thanks to Dan Carpenter for reviewing my initial patch and for his

 * suggestions.

 *

 * Thanks to Bernhard Schiffner for his help in testing and for his

 * suggestions.

 *

 ************************************************************************

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License version 2 as

 * published by the Free Software Foundation.

 rtl8187se */

 rtl8185 */

 rtl8180 */

/* Queues for rtl8187se card

 *

 * name | reg  |  queue

 *  BC  |  7   |   6

 *  MG  |  1   |   0

 *  HI  |  6   |   1

 *  VO  |  5   |   2

 *  VI  |  4   |   3

 *  BE  |  3   |   4

 *  BK  |  2   |   5

 *

 * The complete map for DMA kick reg using use all queue is:

 * static const int rtl8187se_queues_map[RTL8187SE_NR_TX_QUEUES] =

 *	{1, 6, 5, 4, 3, 2, 7};

 *

 * .. but.. Because for mac80211 4 queues are enough for QoS we use this

 *

 * name | reg  |  queue

 *  BC  |  7   |   4  <- currently not used yet

 *  MG  |  1   |   x  <- Not used

 *  HI  |  6   |   x  <- Not used

 *  VO  |  5   |   0  <- used

 *  VI  |  4   |   1  <- used

 *  BE  |  3   |   2  <- used

 *  BK  |  2   |   3  <- used

 *

 * Beacon queue could be used, but this is not finished yet.

 *

 * I thougth about using the other two queues but I decided not to do this:

 *

 * - I'm unsure whether the mac80211 will ever try to use more than 4 queues

 *   by itself.

 *

 * - I could route MGMT frames (currently sent over VO queue) to the MGMT

 *   queue but since mac80211 will do not know about it, I will probably gain

 *   some HW priority whenever the VO queue is not empty, but this gain is

 *   limited by the fact that I had to stop the mac80211 queue whenever one of

 *   the VO or MGMT queues is full, stopping also submitting of MGMT frame

 *   to the driver.

 *

 * - I don't know how to set in the HW the contention window params for MGMT

 *   and HI-prio queues.

/* Queues for rtl8180/rtl8185 cards

 *

 * name | reg  |  prio

 *  BC  |  7   |   3

 *  HI  |  6   |   0

 *  NO  |  5   |   1

 *  LO  |  4   |   2

 *

 * The complete map for DMA kick reg using all queue is:

 * static const int rtl8180_queues_map[RTL8180_NR_TX_QUEUES] = {6, 5, 4, 7};

 *

 * .. but .. Because the mac80211 needs at least 4 queues for QoS or

 * otherwise QoS can't be done, we use just one.

 * Beacon queue could be used, but this is not finished yet.

 * Actual map is:

 *

 * name | reg  |  prio

 *  BC  |  7   |   1  <- currently not used yet.

 *  HI  |  6   |   x  <- not used

 *  NO  |  5   |   x  <- not used

 *  LO  |  4   |   0  <- used

 LNA gain table for rtl8187se */

			/* if ownership flag is set, then we can trust the

			 * HW has written other fields. We must not trust

			 * other descriptor data read before we checked (read)

			 * the ownership flag

 same as above */

				/* OFDM measure reported by HW is signed,

				 * in 0.5dBm unit, with zero centered @ -41dBm

				 * input signal.

 bias + BB gain + LNA gain */

 Note: 32-bit interrupt status */

	/* The interface sometimes generates several RX DMA descriptor errors

	 * at startup. Do not report these.

 do arithmetic and then convert to le16 */

	/* HW will perform RTS-CTS when only RTS flags is set.

	 * HW will perform CTS-to-self when both RTS and CTS flags are set.

	 * RTS rate and RTS duration will be used also for CTS-to-self.

		/* SIFS time (required by HW) is already included by

		 * ieee80211_generic_frame_duration

 tpc polarity */

	/* We must be sure that tx_flags is written last because the HW

	 * looks at it to check if the rest of data is valid or not

	/* We must be sure this has been written before followings HW

	 * register write, because this write will made the HW attempts

	 * to DMA the just-written data

 just poll: rings are stopped with TPPollStop reg */

 ring to poll  */

 stopped rings */

 Enable DA10 TX power saving */

 Power */

 AFE - default to power ON */

 unknown, needed for suspend to RAM resume */

 main antenna */

 disable antenna diversity */

 main antenna */

 priv->curr_ant = def_ant; */

	/* IEEE80211 says the response rate should be equal to the highest basic

	 * rate that is not faster than received frame. But it says also that if

	 * the basic rate set does not contains any rate for the current

	 * modulation class then mandatory rate set must be used for that

	 * modulation class. Eventually add OFDM mandatory rates..

 6, 12, 24Mbps */

 in 8180 this is NOT a BITMAP */

 in 8185 this is a BITMAP */

		/* in 8187se this is a BITMAP. BRSR reg actually sets

		 * response rates.

 reset */

 check success of reset */

	/* mac80211 queue have higher prio for lower index. The last queue

	 * (that mac80211 is not aware of) is reserved for beacons (and have

	 * the highest priority on the NIC)

 TODO: necessary? specs indicate not */

 TODO: set CONFIG5 for calibrating AGC on rtl8180 + philips radio? */

 TODO: turn off hw wep on rtl8180 */

 TODO: set ClkRun enable? necessary? */

 fix eccessive IFS after CTS-to-self */

 the set auto rate fallback bitmask from 1M to 54 Mb/s */

 stop unused queus (no dma alloc) */

 some black magic here.. */

probably this switch led on */

		/* the reference code mac hardcode table write

		 * this reg by doing byte-wide accesses.

		 * It does it just for lowest and highest byte..

 stop unused queus (no dma alloc) */

	/* default basic rates are 1,2 Mbps for rtl8180. 1,2,6,9,12,18,24 Mbps

	 * otherwise. bitmask 0x3 and 0x01f3 respectively.

	 * NOTE: currenty rtl8225 RF code changes basic rates, so we need to do

	 * this after rf init.

	 * TODO: try to find out whether RF code really needs to do this..

	/* in rtl8187se at MAR regs offset there is the management

	 * TX descriptor DMA addres..

 MAX RX DMA */) |

		/* CW is not on per-packet basis.

		 * in rtl8185 the CW_VALUE reg is used.

		 * in rtl8187se the AC param regs are used.

		/* retry limit IS on per-packet basis.

		 * the short and long retry limit in TX_CONF

		 * reg are ignored

		/* TX antenna and TX gain are not on per-packet basis.

		 * TX Antenna is selected by ANTSEL reg (RX in BB regs).

		 * TX gain is selected with CCK_TX_AGC and OFDM_TX_AGC regs

 disable early TX */

 MAX TX DMA */) |

  "duration procedure mode" */

 different meaning, same value on both rtl8185 and rtl8180 */

 don't overflow the tx ring */

 grab a fresh beacon */

	/*

	 * update beacon timestamp w/ TSF value

	 * TODO: make hardware update beacon timestamp

 TODO: use actual beacon queue */

	/*

	 * schedule next beacon

	 * TODO: use hardware support for beacon timing

	/*

	 * We only support one active interface at a time.

 Initialize driver private area */

 hw value */

 TODO: check if txop HW is in us (mult by 32) */

 nothing to do ? */

 TODO: should we do something ? */

	/* I _hope_ this means 10uS for the HW.

	 * In reference code it is 0x22 for

	 * both rtl8187L and rtl8187SE

 10 is SIFS time in uS */

 HW should use 4uS units for EIFS (I'm sure for rtl8185)*/

 from reference code. set ack timeout reg = eifs reg */

		/* rtl8187/rtl8185 HW bug. After EIFS is elapsed,

		 * the HW still wait for DIFS.

		 * HW uses 4uS units for EIFS.

		/* when preamble changes, acktime duration changes, and erp must

		 * be recalculated. ACK time is calculated at lowest rate.

		 * Since mac80211 include SIFS time we remove it (-10)

		/* mac80211 supplies aifs_n to driver and calls

		 * conf_tx callback whether aifs_n changes, NOT

		 * when aifs changes.

		 * Aifs should be recalculated if slot changes.

 CCK TX power */

 OFDM TX power */

	/* we declare to MAC80211 all the queues except for beacon queue

	 * that will be eventually handled by DRV.

	 * TX rings are arranged in such a way that lower is the IDX,

	 * higher is the priority, in order to achieve direct mapping

	 * with mac80211, however the beacon queue is an exception and it

	 * is mapped on the highst tx ring IDX.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Radio tuning for Philips SA2400 on RTL8180

 *

 * Copyright 2007 Andrea Merello <andrea.merello@gmail.com>

 *

 * Code from the BSD driver and the rtl8181 project have been

 * very useful to understand certain things

 *

 * I want to thanks the Authors of such projects and the Ndiswrapper

 * project Authors.

 *

 * A special Big Thanks also is for all people who donated me cards,

 * making possible the creation of the original rtl8180 driver

 * from which this code is derived!

 ch1 */

 ch 14 */

 MAC will bang bits to the sa2400. sw 3-wire is NOT used */

 TODO: recalc sa2400_rf_rssi_map to avoid mult / div */

 calibrate VCO */

???*/

 calibrate filter */

 new from rtl8180 embedded driver (rtl8181 project) */

 MANRX */

 VCO */

 calibrates DC */

		/* a 5us sleep is required here,

		/* a 20us sleep is required here,

 end new code */

 RTX MODE */

 baseband configuration */

 enable ant diversity */

 disable ant diversity */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Radio tuning for Maxim max2820 on RTL8180

 *

 * Copyright 2007 Andrea Merello <andrea.merello@gmail.com>

 *

 * Code from the BSD driver and the rtl8181 project have been

 * very useful to understand certain things

 *

 * I want to thanks the Authors of such projects and the Ndiswrapper

 * project Authors.

 *

 * A special Big Thanks also is for all people who donated me cards,

 * making possible the creation of the original rtl8180 driver

 * from which this code is derived!

 CH 1 */

 CH 14 */

 TODO: change addends above to avoid mult / div below */

	/* While philips SA2400 drive the PA bias from

 MAXIM from netbsd driver */

 test mode as indicated in datasheet */

 enable register */

 synt register */

 rx register */

	/* PA is driven directly by the BB, we keep the MAXIM bias

	 * at the highest value in case that setting it to lower

	 * values may introduce some further attenuation somewhere..

 baseband configuration */

 sys1       */

 txagc      */

 lnadet     */

 ifagcinit  */

 ifagclimit */

 ifagcdet   */

 trl */

 CHESTLIM */

 CHSQLIM  */

 SPDX-License-Identifier: GPL-2.0+

 Copyright (c) 2015-2016 Quantenna Communications. All rights reserved. */

 flush PCIe write */

 sync previous writes before proceeding */

 sync previous memory write before announcing new data ready */

 flush PCIe write */

 now we're not waiting for ACK even in case of timeout */

 SPDX-License-Identifier: GPL-2.0+

 Copyright (c) 2015-2016 Quantenna Communications. All rights reserved. */

 Init event handling related fields */

 SPDX-License-Identifier: GPL-2.0+

 Copyright (c) 2015-2016 Quantenna Communications. All rights reserved. */

 Supported rates to be advertised to the cfg80211 */

 Supported rates to be advertised to the cfg80211 */

 Supported crypto cipher suits to be advertised to cfg80211 */

 Supported mgmt frame types to be advertised to cfg80211 */

	/* Check repeater interface combination: primary VIF should be STA only.

	 * STA (primary) + AP (secondary) is OK.

	 * AP (primary) + STA (secondary) is not supported.

 Stop data */

 the ! are here due to the assoc/reassoc merge */

	/* If channel is not specified, pass "freq = 0" to tell device

	 * firmware to use current channel.

 Initialize cipher suits */

 SPDX-License-Identifier: GPL-2.0+

 Copyright (c) 2015-2016 Quantenna Communications. All rights reserved. */

 SPDX-License-Identifier: GPL-2.0+

 Copyright (c) 2015-2016 Quantenna Communications. All rights reserved. */

 SPDX-License-Identifier: GPL-2.0+

 Copyright (c) 2015-2016 Quantenna Communications. All rights reserved. */

/* Netdev handler for open.

/* Netdev handler for close.

/* Netdev handler for data transmission.

 tx path is enabled: reset vif timeout */

/* Netdev handler for transmission timeout.

 Network device ops handlers */

 stop tx completely */

 Use MAC address of the first active radio as a unique device ID */

 Firmware always handles packets that require flooding */

 SPDX-License-Identifier: GPL-2.0+

 Copyright (c) 2015-2016 Quantenna Communications. All rights reserved. */

 SPDX-License-Identifier: GPL-2.0+

 Copyright (c) 2015-2016 Quantenna Communications. All rights reserved. */

 SPDX-License-Identifier: GPL-2.0+

 Copyright (c) 2015-2016 Quantenna Communications. All rights reserved. */

 Let device itself to select best values for current conditions */

 Return length of variable part of response */

 Regulatory settings may be different for different interface types */

 flush all stations */

 let device select dwell based on traffic conditions */

 use default value */

 SPDX-License-Identifier: GPL-2.0+

 Copyright (c) 2018 Quantenna Communications */

 bd table */

 tx bd */

 rx bd */

 extra shared params */

 all rx/tx activity should have ceased before calling this function */

 free rx buffers */

 free tx buffers */

 check TX BD queue max length according to struct qtnf_topaz_bda */

 sync up tx queue status before generating interrupt */

 send irq to card: tx stopped */

 schedule reclaim attempt */

 re-send irq to card: tx stopped */

 sync up descriptor updates before generating interrupt */

 generate irq to card: tx done */

 notify card about recv packets once per several packets */

 repalce processed buffer by a new one */

 control path methods */

 data path methods */

 flush endian modifications before status update */

 do not read before status is updated */

 notify card about driver type and boot mode */

 upload completion mark: zero-sized block */

 RC is done */

 assign host msi irq before card init */

 SPDX-License-Identifier: GPL-2.0+

 Copyright (c) 2018 Quantenna Communications */

 host TX */

 host RX */

 lock for irq configuration changes */

 tx bd */

 rx bd */

 keep rx skb paddrs in rx buffer descriptors for cleanup purposes */

 sync up all descriptor updates */

 all rx/tx activity should have ceased before calling this function */

 free rx buffers */

 free tx buffers */

 sync up all descriptor updates before passing them to EP */

 write new TX descriptor to PCIE_RX_FIFO on EP */

 H/W workaround: clean all bits, not only enabled */

 repalce processed buffer by a new one */

 control path methods */

 data path methods */

 init default irq settings */

 start with disabled irqs */

 SPDX-License-Identifier: GPL-2.0+

 Copyright (c) 2018 Quantenna Communications, Inc. All rights reserved. */

 current mps */

 maximum supported mps */

 suggested new mps value */

 parent (bus) mps */

 fall back to legacy INTx interrupts by default */

 check if MSI capability is available */

 Power Management Hooks */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2015 Jakub Kicinski <kubakici@wp.pl>

 If not doing paged RX allocated skb will always have enough space */

	/* DMA_INFO field at the beginning of the segment contains only some of

	 * the information, we need to read the FCE descriptor from the end.

 Copy if there is very little data in the buffer. */

 we have one extra ref from the allocator */

	/* do no schedule rx tasklet if urb has been unlinked

	 * or the device has been removed

		/* Special-handle ENODEV from TX urb submission because it will

		 * often be the first ENODEV we see after device is removed.

 Map hardware Q to USB endpoint number */

 TODO: take management packets to queue 5 */

 Map USB endpoint number to Q id in the DMA engine */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2014 Felix Fietkau <nbd@openwrt.org>

 * Copyright (C) 2015 Jakub Kicinski <kubakici@wp.pl>

	/* Note: using MCU_RANDOM_READ is actually slower then reading all the

	 *	 registers by hand.  MCU takes ca. 20ms to complete read of 24

	 *	 registers while reading them one by one will takes roughly

	 *	 24*200us =~ 5ms.

 Calculate average AMPDU length */

	/* let mac80211 take care of PN validation since apparently

	 * the hardware does not support it

			/* Note: start with 1 to comply with spec,

			 *	 (see comment on common/cmm_wpa.c:4291).

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2015 Jakub Kicinski <kubakici@wp.pl>

 should be called with vendor_req_mutex held */

 should be called with vendor_req_mutex held */

			/* Note: this is ignored by usb sub-system but vendor

			 *	 code does it. We can drop this at some point.

 Note: vendor driver skips this check for MT7601U */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2014 Felix Fietkau <nbd@openwrt.org>

 * Copyright (C) 2015 Jakub Kicinski <kubakici@wp.pl>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * (c) Copyright 2002-2010, Ralink Technology, Inc.

 * Copyright (C) 2014 Felix Fietkau <nbd@openwrt.org>

 * Copyright (C) 2015 Jakub Kicinski <kubakici@wp.pl>

 if length is not divisible by 4 we need to pad */

 Make copies of important data before reusing the urb */

 we need to fake length */

 FCE tx_fs_base_ptr */

 FCE tx_fs_max_cnt */

 FCE pdma enable */

 FCE skip_fs_en */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * (c) Copyright 2002-2010, Ralink Technology, Inc.

 * Copyright (C) 2014 Felix Fietkau <nbd@openwrt.org>

 * Copyright (C) 2015 Jakub Kicinski <kubakici@wp.pl>

	/* Note: we don't turn off WLAN_CLK because that makes the device

	 *	 not respond properly on the probe path.

	 *	 In case anyone (PSM?) wants to use this function we can

	 *	 bring the clock stuff back and fixup the probe path.

	/* Note: vendor driver tries to disable/enable wlan here and retry

	 *       but the code which does it is so buggy it must have never

	 *       triggered, so don't bother.

 Page count on TxQ */

 Page count on RxQ */

 512 byte per beacon */

 Wait for ASIC ready after FW load. */

	/* Reserve WCID 0 for mcast - thanks to this APs WCID will go to

	 * entry no. 1 like it does in the vendor driver.

 init fake wcid for monitor interfaces */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2014 Felix Fietkau <nbd@openwrt.org>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2014 Felix Fietkau <nbd@openwrt.org>

 * Copyright (C) 2015 Jakub Kicinski <kubakici@wp.pl>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2014 Felix Fietkau <nbd@openwrt.org>

 * Copyright (C) 2015 Jakub Kicinski <kubakici@wp.pl>

		/* Parts of eeprom not in the usage map (0x80-0xc0,0xf0)

		 * will not return valid data but it's ok.

	/* Note: - region 31 is not valid for mt7601u (see rtmp_init.c)

	 *	 - comments in rtmp_def.h are incorrect (see rt_channel.c)

 EEPROM country regions 0 - 7 */

 EEPROM country regions 32 - 33 */

 channels 1 - 14 */

	/* TODO: country region 33 is special - phy should be set to B-mode

	 *	 before entering channel 14 (see sta/connect.c)

 Invalid? Note: vendor driver does not handle this */

 Note: vendor driver does cap the value to s6 right away */

 Save cck bw20 for fixups of channel 14 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * (c) Copyright 2002-2010, Ralink Technology, Inc.

 * Copyright (C) 2014 Felix Fietkau <nbd@openwrt.org>

 * Copyright (C) 2015 Jakub Kicinski <kubakici@wp.pl>

 main LNA */ {

 bw20 */ { -2, 15, 33 },

 bw40 */ {  0, 16, 34 }

  aux LNA */ {

 bw20 */ { -2, 15, 33 },

 bw40 */ { -2, 16, 34 }

 LNA id can be 0, 2, 3. */

 TX */

 RX */

 Apply CH14 OBW fixup */

 Note: vendor code is buggy here for negative values */

/**

 * mt7601u_bbp_r47_get - read value through BBP R47/R49 pair

 * @dev:	pointer to adapter structure

 * @reg:	value of BBP R47 before the operation

 * @flag:	one of the BBP_R47_F_* flags

 *

 * Convenience helper for reading values through BBP R47/R49 pair.

 * Takes old value of BBP R47 as @reg, because callers usually have it

 * cached already.

 *

 * Return: value of BBP R49.

 Note: this rarely succeeds, temp can change even if it fails. */

 Note: function copied from vendor driver */

 Set VGA gain */

 Mixer disable */

 BBP TSSI initial and soft reset */

 TSSI measurement */

 TSSI read */

 DPD Calibration */

 PLL Lock Protect */

 < 20C */

 > 30C */

 BBP CR for H, L, N temperature */

 Note: this is used only with TSSI, we can just use trgt_pwr from eeprom. */

 Channel 14, cck, bw20 */

	/* Note: only in STA mode and not dozing; perhaps do this only if

	 *	 there is enough rssi updates since last run?

	 *	 Rssi updates are only on beacons and U2M so should work...

	/* TODO: also if lost a lot of beacons try resetting

	 *       (see RTMPSetAGCInitValue() call in mlme.c).

 If TSSI calibration was run it already updated temperature. */

 TODO: find right value for @on */

 No beacons received - reschedule soon */

 Start/stop collecting beacon data */

 Vendor driver does the rmc even when no change is needed. */

 Stop MAC for the time of bw change */

/**

 * mt7601u_set_rx_path - set rx path in BBP

 * @dev:	pointer to adapter structure

 * @path:	rx path to set values are 0-based

/**

 * mt7601u_set_tx_dac - set which tx DAC to use

 * @dev:	pointer to adapter structure

 * @dac:	DAC index, values are 0-based

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2014 Felix Fietkau <nbd@openwrt.org>

 * Copyright (C) 2015 Jakub Kicinski <kubakici@wp.pl>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2014 Felix Fietkau <nbd@openwrt.org>

 * Copyright (C) 2015 Jakub Kicinski <kubakici@wp.pl>

 Hardware uses mirrored order of queues with Q0 having the highest priority */

 Take mac80211 Q id from the skb and translate it to hardware Q id */

/* Note: TX retry reporting is a bit broken.

 *	 Retries are reported only once per AMPDU and often come a frame early

 *	 i.e. they are reported in the last status preceding the AMPDU. Apart

 *	 from the fact that it's hard to know the length of the AMPDU (which is

 *	 required to know to how many consecutive frames retries should be

 *	 applied), if status comes early on full FIFO it gets lost and retries

 *	 of the whole AMPDU become invisible.

 *	 As a work-around encode the desired rate in PKT_ID of TX descriptor

 *	 and based on that guess the retries (every rate is tried once).

 *	 Only downside here is that for MCS0 we have to rely solely on

 *	 transmission failures as no retries can ever be reported.

 *	 Not having to read EXT_FIFO has a nice effect of doubling the number

 *	 of reports which can be fetched.

 *	 Also the vendor driver never uses the EXT_FIFO register so it may be

 *	 undertested.

	/* Because PKT_ID 0 disables status reporting only 15 values are

	 * available but 16 are needed (8 MCS * 2 for encoding is_probe)

	 * - we need to cram together two rates. MCS0 and MCS7 with is_probe

	 * share PKT_ID 9.

 Decide between MCS0 and MCS7 which share pktid 9 */

	/* TODO: should we do funny things with the parameters?

	 *	 See what mt7601u_set_default_edca() used to do in init.c.

	/* TODO: based on user-controlled EnableTxBurst var vendor drv sets

	 *	 a really long txop on AC0 (see connect.c:2009) but only on

	 *	 connect? When not connected should be 0.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2014 Felix Fietkau <nbd@openwrt.org>

 * Copyright (C) 2015 Jakub Kicinski <kubakici@wp.pl>

	/* Note: for AP do the AP-STA things mt76 does:

	 *	- beacon offsets

	 *	- do mac address tricks

	 *	- shift vif idx

		/* Note: this is a hack because beacon_int is not changed

		 *	 on leave nor is any more appropriate event generated.

		 *	 rt2x00 doesn't seem to be bothered though.

 fall back to sw encryption for unsupported ciphers */

 SPDX-License-Identifier: ISC

/* Copyright (C) 2020 MediaTek Inc.

 *

 * Author: Felix Fietkau <nbd@nbd.name>

 *	   Lorenzo Bianconi <lorenzo@kernel.org>

 *	   Sean Wang <sean.wang@mediatek.com>

 VO */

 VI */

 BE */

 BK */

 VO */

 VI */

 BE */

 BK */

 parse rxd to get the actual packet length */

 disable interrupt */

 tx */

 rx */

 enable interrupt */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 * Copyright (C) 2018 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 * Copyright (C) 2018 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 clear descriptors */

 fix tx_done accounting on queue overflow */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 * Copyright (C) 2018 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

 encode packet rate for no-skb packet id to fix up status reporting */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2018 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

	/* Buffer layout:

	 *	|   4B   | xfer len |      pad       |  4B  |

	 *	| TXINFO | pkt/cmd  | zero pad to 4B | zero |

	 *

	 * length field of TXINFO should be set to 'xfer len'.

 encode packet rate for no-skb packet id to fix up status reporting */

 Trigger pre-TBTT event 8 ms before TBTT */

/* Beacon SRAM memory is limited to 8kB. We need to send PS buffered frames

 * (which can be 1500 bytes big) via beacon memory. That make limit of number

 * of slots to 5. TODO: dynamically calculate offsets in beacon SRAM.

 Get remaining TBTT in usec */

 Get remaining TBTT in usec */

 Convert beacon interval in TU (1024 usec) to nsec */

 Adjust time to trigger hrtimer 8ms before TBTT */

 Timer can be rearmed by work. */

 Prevent corrupt transmissions during update */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2018 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 * Copyright (C) 2018 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

 * Copyright (C) 2018 Stanislaw Gruszka <stf_xl@wp.pl>

	/* USB devices already reserve enough skb headroom for txwi's. This

	 * helps to save slow copies over USB.

	/*

	 * Beacon timer drifts by 1us every tick, the timer is configured

	 * in 1/16 TU (64us) units.

	/*

	 * The updated beacon interval takes effect after two TBTT, because

	 * at this point the original interval has already been loaded into

	 * the next TBTT_TIMER value

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2018 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

	/* Assure that always a multiple of 4 bytes are copied,

	 * otherwise beacons can be corrupted.

	 * See: "mt76: round up length on mt76_wr_copy"

	 * Commit 850e8f6fbd5d0003b0

		/* slow path, not enough space for data and

		 * skb_shared_info

 fast path */

 ac to lmac mapping */

 BE */

		/* On device removal we maight queue skb's, but mt76u_tx_kick()

		 * will fail to submit urb, cleanup those skb's manually.

 SPDX-License-Identifier: ISC

 Copyright (C) 2020 MediaTek Inc. */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2018 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2019 Lorenzo Bianconi <lorenzo@kernel.org>

 aspm already disabled */

	/* both device and parent should have the same ASPM setting.

	 * disable ASPM in downstream component first and then upstream.

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 UNII-5 */

 UNII-6 */

 UNII-7 */

 UNII-8 */

	/*

	 * Validate if the amsdu has a proper first subframe.

	 * A single MSDU can be parsed as A-MSDU when the unauthenticated A-MSDU

	 * flag of the QoS header gets flipped. In such cases, the first

	 * subframe has a LLC/SNAP header in the location of the destination

	 * address.

 data frame */

 robust management frame */

		/*

		 * Validate the first fragment both here and in mac80211

		 * All further fragments will be validated by mac80211 only.

	/* IEEE 802.11-2020, 12.5.3.4.4 "PN and replay detection" c):

	 *

	 * the recipient shall maintain a single replay counter for received

	 * individually addressed robust Management frames that are received

	 * with the To DS subfield equal to 0, [...]

 replay */

 subsequent amsdu frames */

 short preamble */

 pick the lowest rate for hidden nodes */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2019 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 * Copyright (C) 2018 Stanislaw Gruszka <stf_xl@wp.pl>

 prevent unnecessary writes */

 MCS 8 falls back to MCS 0 */

 8 APs + 8 STAs */

 enable 7 additional beacon slots and control them with bypass mask */

		/*

		 * Driver CCMP validation can't deal with fragments.

		 * Let mac80211 take care of it.

		/*

		 * When receiving an A-MPDU subframe and RSSI info is not valid,

		 * we can assume that more subframes belonging to the same A-MPDU

		 * are coming. The last one will have valid RSSI info

 enable pa-lna */

 disable pa-lna */

 clear previous CCA timer value */

 channel cycle counters read-and-clear */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 SPDX-License-Identifier: ISC

 Copyright (C) 2020 MediaTek Inc. */

 regulatory_request.alpha2 */

		u8 bw_2g; /* BW_20_40M		0

			   * BW_20M		1

			   * BW_20_40_80M	2

			   * BW_20_40_80_160M	3

			   * BW_20_40_80_8080M	4

 BW_20_40_80_160M */

		u8 ps_state; /* 0: device awake

			      * 1: static power save

			      * 2: dynamic power saving

 starec ht */

 starec vht */

 starec uapsd */

 starec he */

 sgi */

 keep bss deactivated */

 set HT 40M allowed */

 SCA */

 SCB */

 increase channel time for passive scan */

 0: enabled 1: disabled */

 cck */

 ofdm */

 ht */

 vht */

 he */

 update */

 we are assuming here to have a single pairwise key */

 follow fw about GPIO pin */

			u8 hif_type; /* 0x0: HIF_SDIO

				      * 0x1: HIF_USB

				      * 0x2: HIF_PCIE

 0: UNI_HIF_CTRL_BASIC */

 CONFIG_PM */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 * Copyright (C) 2018 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

 Prevent corrupt transmissions during update */

 Fire a pre-TBTT interrupt 8 ms before TBTT */

 send buffered multicast frames now */

 perform device reset */

 let fw reset DMA */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2018 Felix Fietkau <nbd@nbd.name>

	/* Currently voice traffic (AC_VO) always runs without aggregation,

	 * no special handling is needed. AC_BE/AC_BK use tids 0-3. Just check

 not part of a BA session */

	/*

	 * Frame sequence number exceeds buffering window, free up some space

	 * by releasing previous frames

 Discard if the current slot is already in use */

 SPDX-License-Identifier: ISC

/* Copyright (C) 2020 MediaTek Inc.

 *

 * This file is written based on mt76/usb.c.

 *

 * Author: Felix Fietkau <nbd@nbd.name>

 *	   Lorenzo Bianconi <lorenzo@kernel.org>

 *	   Sean Wang <sean.wang@mediatek.com>

 Get ownership from the device */

 Enable interrupt */

 set WHISR as read clear and Rx aggregation number as 16 */

 read clear */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 * Copyright (C) 2018 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2018 Stanislaw Gruszka <stf_xl@wp.pl>

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 init led callbacks */

 Allow to change address in HW if we create first interface. */

	/*

	 * Client mode typically only has one configurable BSSID register,

	 * which is used for bssidx=0. This is linked to the MAC address.

	 * Since mac80211 allows changing interface types, and we cannot

	 * force the use of the primary MAC address for a station mode

	 * interface, we need some other way of configuring a per-interface

	 * remote BSSID.

	 * The hardware provides an AP-Client feature, where bssidx 0-7 are

	 * used for AP mode and bssidx 8-15 for client mode.

	 * We shift the station interface bss index by 8 to force the

	 * hardware to recognize the BSSID.

	 * The resulting bssidx mismatch for unicast frames is ignored by hw.

 vif is already set or idx is 8 for AP/Mesh/... */

 fall back to sw encryption for unsupported ciphers */

	/*

	 * The hardware does not support per-STA RX GTK, fall back

	 * to software mode for these.

	/*

	 * In USB AP mode, broadcast/multicast frames are setup in beacon

	 * data registers and sent via HW beacons engine, they require to

	 * be already encrypted.

 MT76x0 GTK offloading does not work with more than one VIF */

 As defined by IEEE 802.11-2007 17.3.8.6 */

 Restore AGC gain and resume calibration after scanning. */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

 20MHz */

 40MHz */

 80MHz */

 20MHz */

 40MHz */

 80MHz */

 20MHz */

 40MHz */

 80MHz */

 20MHz */

 40MHz */

 80MHz */

 reset hw detector */

 reset sw detector */

 12 sec */

 select channel */

 reported period */

 reported width */

 reported burst number */

 check short pulse*/

 120 - 130 */

 JPW53 */

 check short pulse*/

 120 - 130 */

	/* 1st: DFS_R37[31]: 0 (engine 0) - 1 (engine 2)

	 * 2nd: DFS_R37[21:0]: pulse time

	 * 3rd: DFS_R37[11:0]: pulse width

	 * 3rd: DFS_R37[25:16]: phase

	 * 4th: DFS_R37[12:0]: current pwr

	 * 4th: DFS_R37[21:16]: pwr stable counter

	 *

	 * 1st: DFS_R37[31:0] set to 0xffffffff means no event detected

 add radar event to ring buffer */

 disable debug mode */

 sorted list */

 sw detector rx radar pattern */

 hw detector rx radar pattern */

 reset hw detector */

 configure engine */

 detection mode + avg_len */

 dfs energy */

 dfs period */

 dfs burst */

 dfs width */

 dfs margins */

 dfs event expiration */

 dfs pwr adj */

 reset status */

 enable detection*/

 disable hw detector */

 enable hw detector */

 enable debug mode */

 disable hw detector */

 clear detector status */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 convert eeprom data in Little Endian */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 SPDX-License-Identifier: ISC

 Copyright (C) 2020 Felix Fietkau <nbd@nbd.name> */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 Tx status can be unreliable. if it fails, mark the frame as ACKed */

 look for stale entries in the wcid idr queue */

		/* It has been too long since DMA_DONE, time out this packet

		 * and stop waiting for TXS callback.

	/* First packet of a A-MSDU burst keeps track of the whole burst

	 * length, need to update length of it and the last packet.

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2018 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

	/* try to load mt7610e fw if available

	 * otherwise fall back to mt7610u one

 FCE tx_fs_base_ptr */

 FCE tx_fs_max_cnt */

 FCE pdma enable */

 FCE skip_fs_en */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2018 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

 upload ILM. */

 upload IVB. */

 upload DLM. */

 trigger firmware */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2015 Jakub Kicinski <kubakici@wp.pl>

 MT7610U */

 Linksys AE6000 */

 Sabrent NTWLAC */

 Edimax 7711mac */

 Edimax / Elecom  */

 TP-Link TL-WDN5200 */

 TP-Link unknown */

 Asus USB-AC51 */

 Asus USB-AC50 */

 Sitecom WLA-3100 */

 Planex GW-450D */

 D-LINK DWA-171 rev B1 */

 Zyxel NWD6505 */

 AboCom AU7212 */

 I-O DATA WN-AC433UK */

 AVM FRITZ!WLAN USB Stick AC 430 */

 Comcast Xfinity KXW02AAA  */

 TRENDnet TEW-806UBH  */

 Devolo Wifi ac Stick */

 Sitecom Europe B.V. ac  Stick */

 TP-LINK T2UHP_US_v1 */

 TP-LINK T2UHP_UN_v1 */

 TP-LINK Archer T1U */

 MT7630U */

 MT7650U */

	/* disable AGGR_BULK_RX in order to receive one

	 * frame in each rx urb and avoid copies

 check hw sg support in order to enable AMSDU */

 Quirk for Archer T1U */

 Disable the HW, otherwise MCU fail to initialize on hot reboot */

 Note: vendor driver skips this check for MT76X0U */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 CONFIG_PM */

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * (c) Copyright 2002-2010, Ralink Technology, Inc.

 * Copyright (C) 2014 Felix Fietkau <nbd@openwrt.org>

 * Copyright (C) 2015 Jakub Kicinski <kubakici@wp.pl>

 * Copyright (C) 2018 Stanislaw Gruszka <stf_xl@wp.pl>

	/* Note: we don't turn off WLAN_CLK because that makes the device

	 *	 not respond properly on the probe path.

	 *	 In case anyone (PSM?) wants to use this function we can

	 *	 bring the clock stuff back and fixup the probe path.

	/* Note: vendor driver tries to disable/enable wlan here and retry

	 *       but the code which does it is so buggy it must have never

	 *       triggered, so don't bother.

 Enable PBF and MAC clock SYS_CTRL[11:10] = 0x3 */

 Release BBP and MAC reset MAC_SYS_CTRL[1:0] = 0x0 */

 Set 0x141C[15:12]=0xF */

	/*

	 * tx_ring 9 is for mgmt frame

	 * tx_ring 8 is for in-band command frame.

	 * WMM_RG0_TXQMA: this register setting is for FCE to

	 *		  define the rule of tx_ring 9

	 * WMM_RG1_TXQMA: this register setting is for FCE to

	 *		  define the rule of tx_ring 8

 Page count on TxQ */

 Page count on RxQ */

 Wait for ASIC ready after FW load. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2014 Felix Fietkau <nbd@openwrt.org>

 * Copyright (C) 2015 Jakub Kicinski <kubakici@wp.pl>

 * Copyright (C) 2018 Stanislaw Gruszka <stf_xl@wp.pl>

 cck 1M, 2M, 5.5M, 11M */

 ofdm 6M, 9M, 12M, 18M */

 ofdm 24M, 36M, 48M, 54M */

 ht-vht mcs 1ss 0, 1, 2, 3 */

 ht-vht mcs 1ss 4, 5, 6 */

 ht-vht mcs 1ss 0, 1, 2, 3 stbc */

 ht-vht mcs 1ss 4, 5, 6 stbc */

 vht mcs 8, 9 5GHz */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * (c) Copyright 2002-2010, Ralink Technology, Inc.

 * Copyright (C) 2014 Felix Fietkau <nbd@openwrt.org>

 * Copyright (C) 2015 Jakub Kicinski <kubakici@wp.pl>

 * Copyright (C) 2018 Stanislaw Gruszka <stf_xl@wp.pl>

 R32<4:0> pll_den: (Denomina - 8) */

 R31<7:5> */

 R31<4:0> pll_k(Nominator) */

 R30<7> sdm_reset_n */

 R30<6:2> sdmmash_prbs,sin */

 R30<1> sdm_bp */

 R30<0> R29<7:0> (hex) pll_n */

 R28<7:6> isi_iso */

 R28<5:4> pfd_dly */

 R28<3:2> clksel option */

 R28<1:0> R27<7:0> R26<7:0> (hex) sdm_k */

 R24<1:0> xo_div */

		/* MT_RF_MISC (offset: 0x0518)

		 * [2]1'b1: enable external A band PA

		 *    1'b0: disable external A band PA

		 * [3]1'b1: enable external G band PA

		 *    1'b0: disable external G band PA

 External PA */

 Set Atten mode = 2 For G band, Disable Tx Inc dcoc. */

		/* Set Atten mode = 0

		 * For Ext A band, Disable Tx Inc dcoc Cal.

 dual antenna mode */

 sigle antenna mode */

 TODO error */

 bypass ADDA control */

 bbp sw reset */

 enable TX with DAC0 input */

 stop bypass ADDA */

 stop TX */

 bbp sw reset */

 set packet info#1 mode */

 set packet info#2 mode */

 set packet info#3 mode */

 cck rates */

 ofdm rates */

 vht rates */

 ht rates */

 s(15,0) */

 3.6 * 8192 */

 0.54 * 8192 */

 2.3 * 8192 or 1.5 * 8192 */

 0.8 * 8192 */

 -6db * 8192 */

 -12db * 8192 */

 6db * 8192 */

 offset s4.3 */

 upper saturate */

 offset s3.4 */

 upper-lower saturate */

 make the compensate value to the nearest compensate code */

 set Japan Tx filter at channel 14 */

 enable vco */

 clear false CCA counters */

	/* Frequency calibration

	 * E1: B0.R22<6:0>: xo_cxo<6:0>

	 * E2: B0.R21<0>: xo_cxo<0>, B0.R22<7:0>: xo_cxo<8:1>

	/* Reset procedure DAC during power-up:

	 * - set B0.R73<7>

	 * - clear B0.R73<7>

	 * - set B0.R73<7>

 vcocal_en: initiate VCO calibration (reset after completion)) */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2014 Felix Fietkau <nbd@openwrt.org>

 * Copyright (C) 2015 Jakub Kicinski <kubakici@wp.pl>

 * Copyright (C) 2018 Stanislaw Gruszka <stf_xl@wp.pl>

 SPDX-License-Identifier: ISC

 Copyright (C) 2020 MediaTek Inc. */

 configure global setting */

 reset dma idx */

 configure delay interrupt */

 configure perfetch settings */

 init tx queue */

 command to WM */

 command to WA */

 firmware download */

 event from WM */

 event from WA */

 rx data queue */

 event from WA */

 hif wait WFDMA idle */

 set WFDMA Tx/Rx */

 enable interrupts for TX/RX rings */

 disable */

 reset */

 SPDX-License-Identifier: ISC

 Copyright (C) 2020 MediaTek Inc. */

		/*

		 * We don't support reading GI info from txs packets.

		 * For accurate tx status reporting and AQL improvement,

		 * we need to make sure that flags match so polling GI

		 * from per-sta counters directly.

 all subframes of an A-MPDU have the same timestamp */

 RXD Group 3 - P-RXV */

 RXD Group 5 - C-RXV */

	/* for HE_SU/HE_EXT_SU PPDU

	 * - 1x, 2x, 4x LTF + 0.8us GI

	 * - 2x LTF + 1.6us GI, 4x LTF + 3.2us GI

	 * for HE_MU PPDU

	 * - 2x, 4x LTF + 0.8us GI

	 * - 2x LTF + 1.6us GI, 4x LTF + 3.2us GI

	 * for HE_TB PPDU

	 * - 1x, 2x LTF + 1.6us GI

	 * - 4x LTF + 3.2us GI

 hardware won't add HTC for mgmt/ctrl frame */

 pass partial skb header to fw */

 skip VO queue */

 clean DMA queues and unmap buffers first */

	/*

	 * TODO: MT_TX_FREE_LATENCY is msdu time from the TXD is queued into PLE,

	 * to the time ack is received or dropped by hw (air + hw queue time).

	 * Should avoid accessing WTBL to get Tx airtime, and use it instead.

		/*

		 * 1'b1: new wcid pair.

		 * 1'b0: msdu_id with the same 'wcid pair' as above.

 error path */

 reset airtime counters */

 re-init prefetch settings after reset */

 system error recovery */

 start CAC */

 add flow as first entry in the list */

 add flow as last entry in the list */

 only individual agreement supported */

 only 256us unit supported */

 explicit agreement not supported */

 SPDX-License-Identifier: ISC

 Copyright (C) 2020 MediaTek Inc. */

 use read to push write */

 use read to push write */

 WF_MCU_SYSRAM */

 WF_MCU_SYSRAM (configure regs) */

 WF_UMAC_SYSRAM */

 WFDMA PCIE0 MCU DMA0 */

 WFDMA PCIE0 MCU DMA1 */

 WFDMA PCIE1 MCU DMA0 (MEM_DMA) */

 WFDMA PCIE1 MCU DMA1 */

 CONN_INFRA */

 CONN_INFRA, WFDMA */

 WF_TOP_MISC_OFF */

 WF_TOP_MISC_ON */

 WF_UMAC_TOP (PLE) */

 WF_UMAC_TOP (PSE) */

 WF_UMAC_TOP (PP) */

 WF_LMAC_TOP (WF_SEC) */

 WF_LMAC_TOP (WF_PF) */

 WF_LMAC_TOP (WF_WTBLON) */

 WF_LMAC_TOP BN0 (WF_CFG) */

 WF_LMAC_TOP BN0 (WF_TRB) */

 WF_LMAC_TOP BN0 (WF_AGG) */

 WF_LMAC_TOP BN0 (WF_ARB) */

 WF_LMAC_TOP BN0 (WF_TMAC) */

 WF_LMAC_TOP BN0 (WF_RMAC) */

 WF_LMAC_TOP BN0 (WF_DMA) */

 WF_LMAC_TOP BN0 (WF_WTBLOFF) */

 WF_LMAC_TOP BN0 (WF_ETBF) */

 WF_LMAC_TOP BN0 (WF_LPON) */

 WF_LMAC_TOP BN0 (WF_INT) */

 WF_LMAC_TOP BN0 (WF_MIB) */

 WF_LMAC_TOP BN1 (WF_CFG) */

 WF_LMAC_TOP BN1 (WF_TRB) */

 WF_LMAC_TOP BN1 (WF_AGG) */

 WF_LMAC_TOP BN1 (WF_ARB) */

 WF_LMAC_TOP BN1 (WF_TMAC) */

 WF_LMAC_TOP BN1 (WF_RMAC) */

 WF_LMAC_TOP BN1 (WF_DMA) */

 WF_LMAC_TOP BN1 (WF_WTBLOFF) */

 WF_LMAC_TOP BN1 (WF_ETBF) */

 WF_LMAC_TOP BN1 (WF_LPON) */

 WF_LMAC_TOP BN1 (WF_INT) */

 WF_LMAC_TOP BN1 (WF_MIB) */

 SPDX-License-Identifier: ISC

/* Copyright (C) 2020 MediaTek Inc.

 *

 * Author: Ryder Lee <ryder.lee@mediatek.com>

 TODO: support 2/4/6/8 MSI-X vectors */

 master switch of PCIe tnterrupt enable */

 txwi_size = txd size + txp size */

 master switch of PCIe tnterrupt enable */

 SPDX-License-Identifier: ISC

 Copyright (C) 2020 MediaTek Inc. */

* global debugfs **/

 test knob of system layer 1/2 error recovery */

 WM CPU info record control */

 Tx ampdu stat */

 Tx Beamformer monitor */

 Tx Beamformer Rx feedback monitor */

 Tx Beamformee Rx NDPA & Tx feedback report */

 Tx SU & MU counters */

 Tx amsdu info */

 ple queue */

 iterate per-sta ple queue */

 pse queue */

* per-station debugfs **/

	/* mode - cck: 0, ofdm: 1, ht: 2, gf: 3, vht: 4, he_su: 8, he_er: 9

	 * bw - bw20: 0, bw40: 1, bw80: 2, bw160: 3

	 * nss - vht: 1~4, he: 1~4, others: ignore

	 * mcs - cck: 0~4, ofdm: 0~7, ht: 0~32, vht: 0~9, he_su: 0~11, he_er: 0~2

	 * gi - (ht/vht) lgi: 0, sgi: 1; (he) 0.8us: 0, 1.6us: 1, 3.2us: 2

	 * ldpc - off: 0, on: 1

	 * stbc - off: 0, on: 1

	 * he_ltf - 1xltf: 0, 2xltf: 1, 4xltf: 2

 SPDX-License-Identifier: ISC

 Copyright (C) 2020 MediaTek Inc. */

 only support 2ss on 160MHz */

 only support 2ss on 160MHz */

 TODO: make dynamic based on msg type */

 do not use Q_SET for efuse */

* bss info **/

 TODO: enable BSS_INFO_UAPSD & BSS_INFO_PM */

	/*

	 * If there is at least one AP on radar channel that cannot

	 * tolerate 26-tone RU UL OFDMA transmissions using HE TB PPDU.

 SIFS 20us + 512 byte beacon tranmitted by 1Mbps (3906us) */

 bss_omac must be first */

* starec & wtbl **/

 Rx/Tx MIC keys are swapped */

 store key_conf for BIP batch update */

 use BSSID in station mode */

 wtbl ht */

 wtbl vht */

 mcs0 */

 ofdm 24m */

 ofdm 24m */

 go over for 160MHz and 80p80 */

 2x1, 2x2, 2x3, 2x4 */

 3x1, 3x2, 3x3, 3x4 */

 4x1, 4x2, 4x3, 4x4 */

	/* he: eBF only, in accordance with spec

	 * vht: support eBF and iBF

	 * ht: iBF only, since mac80211 lacks of eBF support

 reply with identity matrix to avoid 2x2 BF negative gain */

 fall back to auto rate control */

 fixed single rate */

 fixed GI */

		/* firmware updates only TXCMD but doesn't take WTBL into

		 * account, so driver should update here to reflect the

		 * actual txrate hardware sends out.

 fixed HE_LTF */

	/* firmware rc algorithm refers to sta_rec_he for HE control.

	 * once dev->rc_work changes the settings driver should also

	 * update sta_rec_he here.

	/* sta_rec_ra accommodates BW, NSS and only MCS range format

	 * i.e 0-{7,8,9} for VHT.

	/* sta_rec_ra_fixed accommodates single rate, (HE)GI and HE_LTE,

	 * and updates as peer fixed rate parameters, which overrides

	 * sta_rec_ra and firmware rate control algorithm.

 starec basic */

 tag order is in accordance with firmware dependency. */

 starec bfer */

 starec ht */

 starec vht */

 starec uapsd */

 starec amsdu */

 starec he */

 starec muru */

 starec bfee */

 HT/VHT - SGI: 1, LGI: 0; HE - SGI: 0, MGI: 1, LGI: 2 */

	/* Check missing configuration options to allow AP mode in mac80211

	 * to remain in sync with hostapd settings, and get a subset of

	 * beacon and hardware capabilities.

 TODO: subtag - 11v MBSSID */

 us */

 dbm */

 dbm */

 us */

 us */

 us */

 us */

 mask or num */

 for 80+80 only */

	/*

	 * Items: Rx DCOC, RSSI DCOC, Tx TSSI DCOC, Tx LPFG

	 * Tx FDIQ, Tx DCIQ, Rx FDIQ, Rx FIIQ, ADCDCOC

 Items: Tx DPD, Tx Flatness */

 strict order */

 set duty cycle and level */

 set high-temperature trigger threshold */

 add a safety margin ~10 */

 ms */

 256 sta */

 0xff for group id */

		__le16 peer_id; /* specify the peer_id (msb=0)

				 * or group_id (msb=1)

 256 us */

 SPDX-License-Identifier: ISC

 Copyright (C) 2020 MediaTek Inc. */

 display in millidegree celcius */

 initialize critical/maximum high temperature */

 select TX blink mode, 2: only data frames */

 enable LED */

 set LED Tx blink on/off time */

 control LED */

 disable rx rate report by default due to hw issues */

 enable hardware de-agg */

 trigger sounding packets */

 enable eBF */

 change to software control */

 reset wfsys */

 release wfsys then mcu re-excutes romcode */

 switch to hw control */

 check whether mcu resets to default */

 wfsys reset won't clear host registers */

 If MCU was already running, it is likely in a bad state */

	/*

	 * force firmware operation mode into normal state,

	 * which should be set before firmware download stage.

 Reset and try again */

 Beacon and mgmt frames should occupy wcid 0 */

 do not support NG16 due to spec D4.0 changes subcarrier idx */

 the maximum cap is 4 x 3, (Nr, Nc) = (3, 2) */

	/* num_snd_dim

	 * for mt7915, max supported nss is 2 for bw > 80MHz

 HE80 */

 Can do 1/2 of NSS streams in 160Mhz mode. */

 init led callbacks */

 SPDX-License-Identifier: ISC

 Copyright (C) 2020 MediaTek Inc. */

 read tx mask from eeprom */

 SPDX-License-Identifier: ISC

 Copyright (C) 2020 MediaTek Inc. */

 must be last */

 Only 0 is valid */

 Tx power of the other antennas are the same as antenna 0 */

 normal clock time */

 config rx filter for testmode rx */

 if all three params are set, duty_cycle will be ignored */

 read-clear */

 SPDX-License-Identifier: ISC

 Copyright (C) 2020 MediaTek Inc. */

 prefer hw bssid slot 1-3 */

 ap uses hw bssid 0 and ext bssid */

	/* The hardware does not support per-STA RX GTK, fallback

	 * to software mode for these.

 fall back to sw encryption for unsupported ciphers */

 no need to update right away, we'll get BSS_CHANGED_QOS */

	/*

	 * station mode uses BSSID to map the wlan entry to a peer,

	 * and then peer references bss_info_rfch to set bandwidth cap.

 ensure that enable txcmd_mode after bss_info */

 TSF software read */

 TSF software overwrite */

 TSF software adjust*/

	/* if multiple rates across different preambles are given we can

	 * reconfigure this info with all peers using sta_rec command with

	 * the below exception cases.

	 * - single rate : if a rate is passed along with different preambles,

	 * we select the highest one as fixed rate. i.e VHT MCS for VHT peers.

	 * - multiple rates: if it's not in range format i.e 0-{7,8,9} for VHT

	 * then multiple MCS setting (MCS 4,5,6) is not supported.

 zero based idx: 20, 40, 80, 160 */

 rx counters */

 per vif counters */

 Ethtool related API */

 See mt7915_ampdu_stat_read_phy, etc */

 Tx ampdu stat */

ARRAY_SIZE(bound)*/; i++)

 Tx Beamformer monitor */

 Tx Beamformer Rx feedback monitor */

 Tx Beamformee Rx NDPA & Tx feedback report */

 Tx SU & MU counters */

 Tx amsdu info (pack-count histogram) */

 rx counters */

 Add values for all stations owned by this vif */

 SPDX-License-Identifier: ISC

 SPDX-License-Identifier: ISC

 Mapped to WTBL2 */

 PSE */

 free queue */

 HIF */

 MCU queue */

 Clear BA information */

 disable */

 all subframes of an A-MPDU have the same timestamp */

		/*

		 * We don't support switching between short and long GI

		 * within the rate set. For accurate tx status reporting, we

		 * need to make sure that flags match.

		 * For improved performance, avoid duplicate entries by

		 * decrementing the MCS index if necessary

 TSF read */

 Rx/Tx MIC keys are swapped */

 use maximum tx count for beacons and buffered multicast */

 Clear previous reset result */

 Reset PSE */

 Clear previous reset state */

 Start PSE client TX abort */

 Wait for PSE client to clear TX FIFO */

 Clear PSE client TX abort state */

 lock/unlock all queues to ensure that no tx is pending */

 Ensure that ED/CCA does not trigger if disabled */

 SPDX-License-Identifier: ISC

 Flush all previous CAB queue packets */

 start timer */

 SPDX-License-Identifier: ISC

 SPDX-License-Identifier: ISC

 SPDX-License-Identifier: ISC

 switch to bypass mode */

 unknown fields below */

 SPDX-License-Identifier: ISC

 Enable RX group to HIF */

 Enable RX group to MCU */

 include preamble detection in CCA trigger signal */

 Configure all rx packets to HIF */

 Configure MCU txs selection with aggregation */

 32 us */

 Configure HIF txs selection with aggregation */

 32 us */

 Maximum count */

 Set secondary beacon time offsets */

 add 3 dBm for 2SS devices (combined output) */

 init led callbacks */

 SPDX-License-Identifier: ISC

 SPDX-License-Identifier: ISC

 SPDX-License-Identifier: ISC

 Skip for MT7628 */

 Check for 1SS devices */

 SPDX-License-Identifier: ISC

 Set lower signal level to -65dBm */

 clear previous energy detect monitor results */

 reset channel stats */

 fall back to sw encryption for unsupported ciphers */

	/*

	 * The hardware does not support per-STA RX GTK, fall back

	 * to software mode for these.

 SPDX-License-Identifier: ISC

 Copyright (C) 2020 MediaTek Inc. */

 WF_LMAC_TOP (WF_WTBLON) */

 WF_LMAC_TOP BN0 (WF_MIB) */

 WF_LMAC_TOP BN0 (WF_TMAC) */

 WF_LMAC_TOP BN0 (WF_DMA) */

 WF_LMAC_TOP BN0 (WF_LPON) */

 WF_LMAC_TOP BN0 (WF_AGG) */

 WF_LMAC_TOP BN0 (WF_ARB) */

 WF_LMAC_TOP BN0 (WF_RMAC) */

 WF_MCU_SYSRAM */

 WF_MCU_SYSRAM (configure register) */

 WF_UMAC_SYSRAM */

 WFDMA PCIE0 MCU DMA0 */

 WFDMA PCIE0 MCU DMA1 */

 WFDMA PCIE1 MCU DMA0 (MEM_DMA) */

 WFDMA PCIE1 MCU DMA1 */

 CONN_INFRA */

 CONN_INFRA, WFDMA */

 CONN_INFRA, conn_host_csr_top */

 WF_TOP_MISC_OFF */

 WF_TOP_MISC_ON */

 WF_UMAC_TOP (PLE) */

 WF_UMAC_TOP (PSE) */

 WF_UMAC_TOP (PP) */

 WF_MDP_TOP */

 WF_LMAC_TOP (WF_SEC) */

 WF_LMAC_TOP (WF_PF) */

 WF_LMAC_TOP BN0 (WF_CFG) */

 WF_LMAC_TOP BN0 (WF_TRB) */

 WF_LMAC_TOP BN0 (WF_WTBLOFF) */

 WF_LMAC_TOP BN0 (WF_ETBF) */

 WF_LMAC_TOP BN0 (WF_INT) */

 WF_LMAC_TOP BN1 (WF_CFG) */

 WF_LMAC_TOP BN1 (WF_TRB) */

 WF_LMAC_TOP BN1 (WF_AGG) */

 WF_LMAC_TOP BN1 (WF_ARB) */

 WF_LMAC_TOP BN1 (WF_TMAC) */

 WF_LMAC_TOP BN1 (WF_RMAC) */

 WF_LMAC_TOP BN1 (WF_DMA) */

 WF_LMAC_TOP BN1 (WF_WTBLOFF) */

 WF_LMAC_TOP BN1 (WF_ETBF) */

 WF_LMAC_TOP BN1 (WF_LPON) */

 WF_LMAC_TOP BN1 (WF_INT) */

 WF_LMAC_TOP BN1 (WF_MIB) */

 reset */

 disable dmashdl */

 disable WFDMA0 */

 configure perfetch settings */

 reset dma idx */

 configure delay interrupt */

 enable interrupts for TX/RX rings */

 reset hw queues */

 clean up hw queues */

 check if the wpdma must be reinitialized */

 disable interrutpts */

 enable interrutpts */

 init tx queue */

 command to WM */

 firmware download */

 event from WM before firmware download */

 Change mcu queue after firmware download */

 rx data */

 disable */

 reset */

 SPDX-License-Identifier: ISC

 Copyright (C) 2021 MediaTek Inc. */

 SPDX-License-Identifier: ISC

 Copyright (C) 2021 MediaTek Inc. */

 clean DMA queues and unmap buffers first */

	/* TODO: MT_TX_FREE_LATENCY is msdu time from the TXD is queued into PLE,

	 * to the time ack is received or dropped by hw (air + hw queue time).

	 * Should avoid accessing WTBL to get Tx airtime, and use it instead.

		/* 1'b1: new wcid pair.

		 * 1'b0: msdu_id with the same 'wcid pair' as above.

 error path */

 SPDX-License-Identifier: ISC

 Copyright (C) 2020 MediaTek Inc. */

		/* We don't support reading GI info from txs packets.

		 * For accurate tx status reporting and AQL improvement,

		 * we need to make sure that flags match so polling GI

		 * from per-sta counters directly.

 all subframes of an A-MPDU have the same timestamp */

 RXD Group 3 - P-RXV */

 hardware won't add HTC for mgmt/ctrl frame */

 skip VO queue */

 reset airtime counters */

 reset obss airtime */

 system error recovery */

 SPDX-License-Identifier: ISC

 Copyright (C) 2021 MediaTek Inc. */

 activate mt7921s again */

 SPDX-License-Identifier: ISC

/* Copyright (C) 2020 MediaTek Inc.

 *

 ack MCU2HOST_SW_INT_STA */

 txwi_size = txd size + txp size */

	/* always enable deep sleep during suspend to reduce

	 * power consumption

 wait until dma is idle  */

 put dma disabled */

 disable interrupt */

 enable interrupt */

 put dma enabled */

 restore previous ds setting */

 CONFIG_PM */

 CONFIG_PM */

 SPDX-License-Identifier: ISC

 Copyright (C) 2020 MediaTek Inc. */

 Tx ampdu stat */

 Reset wifisys directly. */

 Collect the core dump before reset wifisys. */

 SPDX-License-Identifier: ISC

 Copyright (C) 2020 MediaTek Inc. */

 skip invalid event */

 fw log */

* starec & wtbl **/

 Rx/Tx MIC keys are swapped */

 store key_conf for BIP batch update */

 CONFIG_PM */

 mask or num */

 for 80+80 only */

			u8 ps_state; /* 0: device awake

				      * 1: static power save

				      * 2: dynamic power saving

				      * 3: enter TWT power saving

				      * 4: leave TWT power saving

 SPDX-License-Identifier: ISC

 Copyright (C) 2020 MediaTek Inc. */

 enable MIB tx-rx time reporting */

 disable rx rate report by default due to hw issues */

 enable hardware de-agg */

 enable hardware rx header translation */

	/* force firmware operation mode into normal state,

	 * which should be set before firmware download stage.

 Beacon and mgmt frames should occupy wcid 0 */

 TODO: mt7921s run sleep mode on default  */

 SPDX-License-Identifier: ISC

 Copyright (C) 2021 MediaTek Inc. */

	/* We just return in case firmware assertion to avoid blocking the

	 * common workqueue to run, for example, the coredump work might be

	 * blocked by mt7921_mac_work that is excuting register access via sdio

	 * bus.

 SPDX-License-Identifier: ISC

/* Copyright (C) 2021 MediaTek Inc.

 *

 Terminating entry */

	/* always enable deep sleep during suspend to reduce

	 * power consumption

 restore previous ds setting */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2021 Lorenzo Bianconi <lorenzo@kernel.org>

 SPDX-License-Identifier: ISC

 keep last */

 Make sure testmode running on full power mode */

 Switch back to the normal world */

 SPDX-License-Identifier: ISC

 Copyright (C) 2020 MediaTek Inc. */

 HE80 */

	/* The hardware does not support per-STA RX GTK, fallback

	 * to software mode for these.

 fall back to sw encryption for unsupported ciphers */

 no need to update right away, we'll get BSS_CHANGED_QOS */

 ensure that enable txcmd_mode after bss_info */

 tx counters */

 rx counters */

 per vif counters */

 Tx ampdu stat */

 Tx Beamformer monitor */

 Tx Beamformer Rx feedback monitor */

 Tx amsdu info (pack-count histogram) */

 rx counters */

 Add values for all stations owned by this vif */

 TSF software read */

 TSF software overwrite */

 CONFIG_PM */

 SAR specifies power limitaton in 0.25dbm */

 CONFIG_PM */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2018 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

 convert to per-chain power for 2x2 devices */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2018 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

 decrease SIFS from 16us to 13us */

 init fce */

 init pbf regs */

 wait tx dma to stop */

 page count on TxQ */

 disable tx-rx */

 Wait for MAC to become idle */

 page count on RxQ */

 wait rx dma to stop */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2018 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

 enable USB_DMA_CFG */

 vendor reset */

 enable FCE to send in-band cmd */

 FCE tx_fs_base_ptr */

 FCE tx_fs_max_cnt */

 FCE pdma enable */

 FCE skip_fs_en */

 vendor reset */

 enable USB_DMA_CFG */

 enable FCE to send in-band cmd */

 FCE tx_fs_base_ptr */

 FCE tx_fs_max_cnt */

 FCE pdma enable */

 FCE skip_fs_en */

 load ILM */

 load DLM */

 enable FCE to send in-band cmd */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 Trigger ROM */

 release semaphore */

 trigger firmware */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 * Copyright (C) 2018 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

 Wait for MAC to become idle */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2018 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

 Asus USB-AC54 */

 Asus USB-AC55 */

 Asus USB-N53 B1 */

 Aukey USBAC1200 - Alfa AWUS036ACM */

 Avm FRITZ!WLAN AC860 */

 Edimax EW 7722 UAC */

 HC-M7662BU1 */

 Mercury UD13 */

 Netgear A6210 */

 XBox One Wireless Adapter */

 XBox One Wireless Adapter */

 CONFIG_PM */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 convert to per-chain power for 2x2 devices */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 Fix up ASPM configuration */

 RG_SSUSB_G1_CDR_BIR_LTR = 0x9 */

 RG_SSUSB_G1_CDR_BIC_LTR = 0xf */

 RG_SSUSB_CDR_BR_PE1D = 0x3 */

 CONFIG_PM */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 * Copyright (C) 2018 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

 first set the channel without the extension channel info */

 first set the channel without the extension channel info */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 * Copyright (C) 2018 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

 Copied from MediaTek reference source */

 convert to combined output power on 2x2 devices */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 Enable RF BG */

 Enable RFDIG LDO/AFE/ABB/ADDA */

 Switch RFDIG power to internal LDO */

 Turn on WL MTCMOS */

 Turn on AD/DA power down */

 WLAN function enable */

 Release BBP software reset */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2018 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

	/* disable AGGR_BULK_RX in order to receive one

	 * frame in each rx urb and avoid copies

 Enable RF BG */

 Enable RFDIG LDO/AFE/ABB/ADDA */

 Switch RFDIG power to internal LDO */

 Turn on WL MTCMOS */

 Turn on AD/DA power down */

 WLAN function enable */

 Release BBP software reset */

 wait for asic ready after fw load. */

 reset wcid table */

 reset shared key table and pairwise key table */

 check hw sg support in order to enable AMSDU */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 disable mac DAC control */

 disable DAC 1 */

 disable mac DAC control */

 disable DAC 0 */

 enable mac DAC control */

 Enable LDPC Rx */

 Rx LPF calibration */

 init default values for temp compensation */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 FIXME: check if efuse data is complete */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2016 Felix Fietkau <nbd@nbd.name>

 * Copyright (C) 2018 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

 TSSI trigger */

 clear false CCA counters */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2018 Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

 Enable LDPC Rx */

 Rx LPF calibration */

 init default values for temp compensation */

 init tssi calibration */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (C) 2019 MediaTek Inc.

 *

 * Author: Felix Fietkau <nbd@nbd.name>

 *	   Lorenzo Bianconi <lorenzo@kernel.org>

 *	   Sean Wang <sean.wang@mediatek.com>

 SPDX-License-Identifier: ISC

/* Copyright (C) 2019 MediaTek Inc.

 *

 * Author: Ryder Lee <ryder.lee@mediatek.com>

 *         Roy Luo <royluo@google.com>

 *         Lorenzo Bianconi <lorenzo@kernel.org>

 *         Felix Fietkau <nbd@nbd.name>

 enable refill control group 0, 1, 2, 4, 5 */

 enable group 0, 1, 2, 4, 5, 15 */

 each group min quota must larger then PLE_PKT_MAX_SIZE_NUM */

 ALTX0 and ALTX1 QID mapping to group 5 */

 start dma engine */

 init rx queues */

 enable interrupts for TX/RX rings */

 SPDX-License-Identifier: ISC

/* Copyright (C) 2020 MediaTek Inc.

 *

 * Author: Ryder Lee <ryder.lee@mediatek.com>

 *         Roy Luo <royluo@google.com>

 *         Felix Fietkau <nbd@nbd.name>

 *         Lorenzo Bianconi <lorenzo@kernel.org>

 error path */

 pass partial skb header to fw */

 lock/unlock all queues to ensure that no tx is pending */

 SPDX-License-Identifier: ISC

/* Copyright (C) 2019 MediaTek Inc.

 *

 * Author: Ryder Lee <ryder.lee@mediatek.com>

 *         Roy Luo <royluo@google.com>

 *         Felix Fietkau <nbd@nbd.name>

 *         Lorenzo Bianconi <lorenzo@kernel.org>

 reset airtime counters */

 CCK */

 all subframes of an A-MPDU have the same timestamp */

		/*

		 * If both PHYs are on the same channel and we don't have a WCID,

		 * we need to figure out which PHY this packet was received on.

		 * On the primary PHY, the noise value for the chains belonging to the

		 * second PHY will be set to the noise value of the last packet from

		 * that PHY.

 use maximum tx count for beacons */

		/*

		 * We don't support switching between short and long GI

		 * within the rate set. For accurate tx status reporting, we

		 * need to make sure that flags match.

		 * For improved performance, avoid duplicate entries by

		 * decrementing the MCS index if necessary

 TSF read */

 Rx/Tx MIC keys are swapped */

 ofdm */

 cck */

 reset PD and MDRDY counters */

 decrease coverage */

 increase coverage */

 cck */

 ofdm */

	/* MT7615 can only update both phys simultaneously

	 * since some reisters are shared across bands.

 reset obss airtime */

 start CAC */

 avoid FCC radar detection in non-FCC region */

 SPDX-License-Identifier: ISC

/* Copyright (C) 2019 MediaTek Inc.

 *

 * Author: Felix Fietkau <nbd@nbd.name>

 *	   Lorenzo Bianconi <lorenzo@kernel.org>

 *	   Sean Wang <sean.wang@mediatek.com>

 CONFIG_PM */

 CONFIG_PM */

 SPDX-License-Identifier: ISC

 Copyright (C) 2020 MediaTek Inc. */

 txwi_size = txd size + txp size */

 SPDX-License-Identifier: ISC

/* Copyright (C) 2019 MediaTek Inc.

 *

 * Author: Ryder Lee <ryder.lee@mediatek.com>

 *         Felix Fietkau <nbd@nbd.name>

 CONFIG_PM */

 CONFIG_PM */

 SPDX-License-Identifier: ISC

 test pattern knobs */

 SPDX-License-Identifier: ISC

/* Copyright (C) 2019 MediaTek Inc.

 *

 * Author: Roy Luo <royluo@google.com>

 *         Ryder Lee <ryder.lee@mediatek.com>

 TODO: make dynamic based on msg type */

 Clear firmware own via N9 eint */

 DBDC support */

 DBDC support */

 bss color change */

 TODO: enable BSS_INFO_UAPSD & BSS_INFO_PM */

 SIFS 20us + 512 byte beacon tranmitted by 1Mbps (3906us) */

			/* 0: disable beacon offload

			 * 1: enable beacon offload

			 * 2: update probe respond offload

			/* 0: legacy format (TXD + payload)

			 * 1: only cap field IE

 CONFIG_PM */

 us */

 dbm */

 dbm */

 us */

 us */

 us */

 us */

 TODO: add some noise here */

 for 80+80 only */

 SPDX-License-Identifier: ISC

/* Copyright (C) 2019 MediaTek Inc.

 *

 * Author: Roy Luo <royluo@google.com>

 *         Ryder Lee <ryder.lee@mediatek.com>

 *         Felix Fietkau <nbd@nbd.name>

 *         Lorenzo Bianconi <lorenzo@kernel.org>

 display in millidegree celcius */

 disable rf low power beacon mode */

 enable band 0/1 clk */

 disable TDLS filtering */

	/*

	 * Make the secondary PHY MAC address local without overlapping with

	 * the usual MAC address allocation scheme on multiple virtual interfaces

 second phy can only handle 5 GHz */

 mt7615 second phy shares the same hw queues with the primary one */

 SPDX-License-Identifier: ISC

/* Copyright (C) 2019 MediaTek Inc.

 *

 * Author: Roy Luo <royluo@google.com>

 *         Ryder Lee <ryder.lee@mediatek.com>

 *         Felix Fietkau <nbd@nbd.name>

 *         Lorenzo Bianconi <lorenzo@kernel.org>

 Reset RGU */

 Beacon and mgmt frames should occupy wcid 0 */

 init led callbacks */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (C) 2020 MediaTek Inc.

 *

 * Author: Felix Fietkau <nbd@nbd.name>

 *	   Lorenzo Bianconi <lorenzo@kernel.org>

 *	   Sean Wang <sean.wang@mediatek.com>

 SPDX-License-Identifier: ISC

/* Copyright (C) 2020 MediaTek Inc.

 *

 * Author: Felix Fietkau <nbd@nbd.name>

 *	   Lorenzo Bianconi <lorenzo@kernel.org>

 *	   Sean Wang <sean.wang@mediatek.com>

 Terminating entry */

 SPDX-License-Identifier: ISC

/* Copyright (C) 2019 MediaTek Inc.

 *

 * Author: Ryder Lee <ryder.lee@mediatek.com>

 *         Felix Fietkau <nbd@nbd.name>

 SPDX-License-Identifier: ISC

/* Copyright (C) 2020 MediaTek Inc.

 *

 * Author: Lorenzo Bianconi <lorenzo@kernel.org>

 *	   Sean Wang <sean.wang@mediatek.com>

 TSF read */

 request to configure sampling rate */

	/* disable refill group 5 - group 15 and raise group 2

	 * and 3 as high priority.

	/* group pririority from high to low:

	 * 15 (cmd groups) > 4 > 3 > 2 > 1 > 0.

 setup UDMA Rx Flush */

 hif reset */

 Beacon and mgmt frames should occupy wcid 0 */

 check hw sg support in order to enable AMSDU */

 decrease max A-MSDU size if SG is not supported */

 SPDX-License-Identifier: ISC

/* Copyright (C) 2019 MediaTek Inc.

 *

 * Author: Ryder Lee <ryder.lee@mediatek.com>

 *         Felix Fietkau <nbd@nbd.name>

 dual band */

 2GHz only */

 5GHz only */

 read tx-rx mask from eeprom */

 TSSI disabled */

 TSSI enabled */

 assume the first rate has the highest power offset */

 SPDX-License-Identifier: ISC

/*

 * Copyright (C) 2019 Lorenzo Bianconi <lorenzo@kernel.org>

 SPDX-License-Identifier: ISC

 Copyright (C) 2020 Felix Fietkau <nbd@nbd.name> */

 must be last */

 2.4 GHz band */

 5 GHz band */

 SPDX-License-Identifier: ISC

/* Copyright (C) 2019 MediaTek Inc.

 *

 * Author: Roy Luo <royluo@google.com>

 *         Ryder Lee <ryder.lee@mediatek.com>

 *         Felix Fietkau <nbd@nbd.name>

 *         Lorenzo Bianconi <lorenzo@kernel.org>

 prefer hw bssid slot 1-3 */

 next, try to find a free repeater entry for the sta */

 ap uses hw bssid 0 and ext bssid */

	/* The hardware does not support per-STA RX GTK, fallback

	 * to software mode for these.

 fall back to sw encryption for unsupported ciphers */

 TSF read */

 TSF software overwrite */

 TSF software adjust*/

 fall-back to sw-scan */

 CONFIG_PM */

 CONFIG_PM */

/*======================================================================



    Aironet driver for 4500 and 4800 series cards



    This code is released under both the GPL version 2 and BSD licenses.

    Either license may be used.  The respective licenses are found at

    the end of this file.



    This code was developed by Benjamin Reed <breed@users.sourceforge.net>

    including portions of which come from the Aironet PC4500

    Developer's Reference Manual and used with permission.  Copyright

    (C) 1999 Benjamin Reed.  All Rights Reserved.  Permission to use

    code in the Developer's manual was granted for this driver by

    Aironet.



    In addition this module was derived from dummy_cs.

    The initial developer of dummy_cs is David A. Hinds

    <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds

    are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.



====================================================================*/

====================================================================*/

 Allocate space for private device-specific data */

 airo_attach */

 airo_detach */

 airo_config */

/*

    This program is free software; you can redistribute it and/or

    modify it under the terms of the GNU General Public License

    as published by the Free Software Foundation; either version 2

    of the License, or (at your option) any later version.



    This program is distributed in the hope that it will be useful,

    but WITHOUT ANY WARRANTY; without even the implied warranty of

    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

    GNU General Public License for more details.



    In addition:



    Redistribution and use in source and binary forms, with or without

    modification, are permitted provided that the following conditions

    are met:



    1. Redistributions of source code must retain the above copyright

       notice, this list of conditions and the following disclaimer.

    2. Redistributions in binary form must reproduce the above copyright

       notice, this list of conditions and the following disclaimer in the

       documentation and/or other materials provided with the distribution.

    3. The name of the author may not be used to endorse or promote

       products derived from this software without specific prior written

       permission.



    THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR

    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED

    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

    ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,

    INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES

    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR

    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

    HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,

    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING

    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE

    POSSIBILITY OF SUCH DAMAGE.

/*======================================================================



    Aironet driver for 4500 and 4800 series cards



    This code is released under both the GPL version 2 and BSD licenses.

    Either license may be used.  The respective licenses are found at

    the end of this file.



    This code was developed by Benjamin Reed <breed@users.sourceforge.net>

    including portions of which come from the Aironet PC4500

    Developer's Reference Manual and used with permission.  Copyright

    (C) 1999 Benjamin Reed.  All Rights Reserved.  Permission to use

    code in the Developer's manual was granted for this driver by

    Aironet.  Major code contributions were received from Javier Achirica

    <achirica@users.sourceforge.net> and Jean Tourrilhes <jt@hpl.hp.com>.

    Code was also integrated from the Cisco Aironet driver for Linux.

    Support for MPI350 cards was added by Fabrice Bellet

    <fabrice@bellet.info>.



 CONFIG_PCI */

 Include Wireless Extension definition and check version - Jean II */

 enable iwspy support */

 enable Cisco extensions */

 Hack to do some power saving */

/* As you can see this list is HUGH!

   I really don't know what a lot of these counts are about, but they

   are all here for completeness.  If the IGNLABEL macro is put in

   infront of the label, that statistic will not be included in the list

/* These variables are for insmod, since it seems that the rates

   can only be set in setup_card.  Rates should be a comma separated

int maxencrypt /* = 0 */; /* The highest rate that the card can encrypt at.

 = 0 */; 
static int aux_bap /* = 0 */; /* Checks to see if the aux ports are needed to read

 = 0 */;

 = 0 */;

/* This is a kind of sloppy hack to get this information to OUT4500 and

   IN4500.  I would be extremely interested in the situation where this

 = 0 */;

 Return codes */

 Commands */

 Not sure what this does... */

 Command errors */

 Registers */

 Offset into aux memory for descriptors */

 Size of allocated packets */

 Size of the transmit queue */

 BAP selectors */

 Used for receiving packets */

 Used for xmiting packets and working with RIDS */

 Flags */

 Message Integrity Check Interrupt */

 RID TYPES */

 The RIDs */

readonly*/

/*

 * Rids and endian-ness:  The Rids will always be in cpu endian, since

 * this all the patches from the big-endian guys end up doing that.

 * so all rid access should use the read/writeXXXRid routines.

/* This structure came from an email sent to me from an engineer at

 These structures are from the Aironet's PC4500 Developers Manual */

 sizeof(ConfigRid) */

 operating mode */

 rx payloads converted */

 rx payloads left as is */

 enable Aironet extenstions */

 enable ap interface extensions */

 enable antenna alignment */

 enable ethernet LLC */

 enable leaf node bridge */

 enable CF pollable */

 enable MIC */

 receive mode */

 ignore multicasts */

 ignore multicast and broadcast */

 wireless monitor mode */

 lan style monitor -- data packets only */

 disables 802.3 header on rx */

 return normalized RSSI */

 in kusec */

 in kusec */

 for overriding device type */

---------- Scanning/Associating ----------*/

 in kusec */

 in kusec */

---------- Power save operation ----------*/

---------- Ap/Ibss config items ----------*/

---------- Radio configuration ----------*/

---------- Aironet Extensions ----------*/

---------- Aironet Extensions ----------*/

 Noise percent in last second */

 Noise dBm in last second */

 Noise percent in last minute */

 Noise dBm in last minute */

 Highest noise percent in last minute */

 Highest noise dbm in last minute */

 Only present on firmware >= 5.30.17 */

 WLAN management frame */

 First is 0 and 0xffff means end of list */

 Frequency hopping radio type */

 Direct sequence radio type */

 Proprietary radio used in old cards (2500) */

 Mac address of the BSS */

 Same as rates for config rid */

 For frequency hopping only */

 Only present on firmware >= 5.30.17 */

 report if tx is ok */

 report if tx fails */

 802.3 packet */

 802.11 mac packet */

 payload has ethertype */

 payload is llc */

 release after completion */

 on completion returns to host */

 Warning : SIOCDEVPRIVATE may disapear during 2.5.X - Jean II */

 SIOCDEVPRIVATE */

 SIOCIWFIRSTPRIV */

 SIOCIWFIRSTPRIV */

/* This may be wrong. When using the new SIOCIWFIRSTPRIV range, we probably

 * should use only "GET" ioctls (last bit set to 1). "SET" ioctls are root

 * only and don't return the modified struct ifreq to the application which

 Ioctl constants to be used in airo_ioctl.command */

 Capability rid

 USED A LOT

 System ID list

 List of specified AP's

  NOTUSED

 NOTUSED

 Leave gap of 40 commands after AIROGSTATSD32 for future */

 Enable mac  */

 Disable mac */

 Flash codes */

 What to do

 Len of data

 rid number

 d-data

 CISCO_EXT */

 size

 MIC enabled or not

 successful packets received

 pkts dropped due to incorrect MIC comparison

 pkts dropped due to not being MIC'd

 pkts dropped due to not having a MIC plummed

 pkts dropped due to sequence number violation

 accumulated mic, reduced to u32 in final()

 current position (byte offset) in message

 saves partial message word across update() calls

 Context - the seed

 Received sequence number

 Tx sequence number

 Start of window

 Flag to say if context is valid or not

 Multicast context

 Unicast context

/*

 * Host receive descriptor

	unsigned char __iomem *card_ram_off; /* offset into card memory of the

 card receive descriptor */

	char          *virtual_host_addr;    /* virtual address of host receive

/*

 * Host transmit descriptor

	unsigned char __iomem *card_ram_off;	     /* offset into card memory of the

 card transmit descriptor */

	char          *virtual_host_addr;    /* virtual address of host receive

/*

 * Host RID descriptor

	unsigned char __iomem *card_ram_off;      /* offset into card memory of the

 card RID descriptor */

	char          *virtual_host_addr; /* virtual address of host receive

 Interrupt on successful TX */

 Interrupt on unseccessful TX */

 LLC payload, 0 = Ethertype */

 Don't release buffer when done */

 Don't retry trasmit */

 clear AID failure */

 Force RTS use */

 Do short preamble */

 A few details needed for WEP (Wireless Equivalent Privacy)

 128 (?) bits

 40 bits RC4 - WEP

 40-bit and 104-bit keys */

 List of Wireless Handlers (new API) */

 CISCO_EXT */

	/* Note, we can have MAX_FIDS outstanding.  FIDs are 16-bits, so we

 Used with auto wep

 Used with auto wep

 User disabling of MAC */

 ifup/ifdown disabling of MAC */

 Needed by MIC */

 IFF_PROMISC 0x100 - include/linux/if.h */

 wireless stats

 Time scan should be read */

 MIC stuff */

 rx/tx/config MPI350 descriptors

 phys addr of config_desc

 tx queue used by mpi350 code

 WPA-related stuff */

/***********************************************************************

 *                              MIC ROUTINES                           *

 ***********************************************************************

	/* If the current MIC context is valid and its key is the same as

	 * the MIC register, there's nothing to do.

 Age current mic Context */

 Initialize new context */

 Window always points to the middle */

 Rx Sequence numbers */

 Tx sequence numbers */

 Key is now valid */

 Give key to mic seed */

 micinit - Initialize mic seed */

		/* So next time we have a valid key and mic is enabled, we will

		 * update the sequence number if the key is the same as before.

 micsetup - Get ready for business */

/*===========================================================================

 * Description: Mic a packet

 *

 *      Inputs: etherHead * pointer to an 802.3 frame

 *

 *     Returns: BOOLEAN if successful, otherwise false.

 *             PacketTxLen will be updated with the mic'd packets size.

 *

 *    Caveats: It is assumed that the frame buffer will already

 *             be big enough to hold the largets mic message possible.

 *            (No memory allocation is done here).

 *

 *    Author: sbraneky (10/15/01)

 *    Merciless hacks by rwilcher (1/14/02)

 Determine correct context

 If not adhoc, always use unicast key

Length of Mic'd packet

 Add Snap

 Add Tx sequence

 Mic the packet

 DA, SA

 Type/Length and Snap

SEQ

payload

    New Type/length ?????????? */

Let NIC know it could be an oversized packet

/*===========================================================================

 *  Description: Decapsulates a MIC'd packet and returns the 802.3 packet

 *               (removes the MIC stuff) if packet is a valid packet.

 *

 *       Inputs: etherHead  pointer to the 802.3 packet

 *

 *      Returns: BOOLEAN - TRUE if packet should be dropped otherwise FALSE

 *

 *      Author: sbraneky (10/15/01)

 *    Merciless hacks by rwilcher (1/14/02)

 *---------------------------------------------------------------------------

 Check if the packet is a Mic'd packet

No Mic set or Mic OFF but we received a MIC'd packet.

 Mic enabled but packet isn't Mic'd

store SEQ as CPU order

At this point we a have a mic'd packet and mic is enabled

Now do the mic error checking.

Receive seq must be odd

Determine proper context

Make sure context is valid

DeMic it

Calculate MIC

Make sure the mics match

Invalid Mic

Check Sequence number if mics pass

 Update statistics

/*===========================================================================

 * Description:  Checks the Rx Seq number to make sure it is valid

 *               and hasn't already been received

 *

 *     Inputs: miccntx - mic context to check seq against

 *             micSeq  - the Mic seq number

 *

 *    Returns: TRUE if valid otherwise FALSE.

 *

 *    Author: sbraneky (10/15/01)

 *    Merciless hacks by rwilcher (1/14/02)

 *---------------------------------------------------------------------------

Allow for the ap being rebooted - if it is then use the next

sequence number of the current sequence number - might go backwards

 Reset rx

 Move window

 Reset rx

Make sequence number relative to START of window

Too old of a SEQ number to check.

Window is infinite forward

 We are in the window. Now check the context rx bit to see if it was already sent

divide by 2 because we only have odd numbers

Get an index number

micSEQ falls inside the window.

Add seqence number to the list of received numbers.

Move window if seq greater than the middle of the window

Shift out old

Move window

==============================================*/

========== EMMH ROUTINES  ====================*/

==============================================*/

 mic accumulate */

 expand the key to fill the MMH coefficient array */

 take the keying material, expand if necessary, truncate at 16-bytes */

 run through AES counter mode to generate context->coeff[] */

 prepare for calculation of a new mic */

 prepare for new mic calculation */

 add some bytes to the mic calculation */

 deal with partial 32-bit word left over from last update */

 have a partial word in part to deal with */

 deal with full 32-bit words */

 deal with partial 32-bit word that will be left over from this update */

 mask used to zero empty bytes for final partial word */

 calculate the mic */

 deal with partial 32-bit word left over from last update */

 have a partial word in part to deal with */

 zero empty bytes */

 reduce the accumulated u64 to a 32-bit MIC */

 Let the command take effect */

 Old hardware had a limit on encryption speed */

	/* Make sure the card is configured.

	 * Wireless Extensions may postpone config changes until the card

	 * is open (to pipeline changes and speed-up card setup). If

 Power on the MAC controller (which may have been disabled) */

/*

 * @mpi_send_packet

 *

 * Attempt to transmit a packet. Can be called from interrupt

 * or transmit . return number of packets we tried to send

 get a packet to send */

 check min length*/

/*

 * Magic, the cards firmware needs a length count (2 bytes) in the host buffer

 * right after  TXFID_HDR.The TXFID_HDR contains the status short so payloadlen

 * is immediately after it. ------------------------------------------------

 *                         |TXFIDHDR+STATUS|PAYLOADLEN|802.3HDR|PACKETDATA|

 *                         ------------------------------------------------

	/*

	 * Firmware automatically puts 802 header on so

	 * we don't need to account for it in the length

 copy data into airo dma buffer */

 copy data into airo dma buffer */

 Too many retries */

 Transmit lifetime exceeded */

 Aid fail */

 MAC disabled */

 Association lost */

	/* We produce a TXDROP event only for retry or lifetime

	 * exceeded, because that's the only status that really mean

	 * that this particular node went away.

		/* Faster to skip over useless data than to do

		 * another bap_setup(). We are at offset 0x6 and

		/* Copy 802.11 dest address.

		 * We use the 802.11 header because the frame may

		 * not be 802.3 or may be mangled...

		 * In Ad-Hoc mode, it will be the node address.

		 * In managed mode, it will be most likely the AP addr

		 * User space will figure out how to convert it to

		 * whatever it needs (IP address or else).

 Send event to user space */

 Find a vacant FID */

 check min length*/

 Mark fid as used & save length for later */

 Not implemented yet for MPI350 */

 Find a vacant FID */

 check min length*/

 Mark fid as used & save length for later */

 detailed rx_errors: */

 Turn on multicast.  (Should be already setup...) */

	/* Upper layers already keep track of PCI devices,

		/* Shut power to the card. The idea is that the user can save

		 * power when he doesn't need the card with "ifconfig down".

		 * That's the method that is most friendly towards the network

		 * stack (i.e. the network stack won't try to broadcast

	/*

	 * Clean out tx queue

 PCMCIA frees this stuff, so only for PCI and ISA */

/*************************************************************

 *  This routine assumes that descriptors have been setup .

 *  Run at insmod time or after reset when the descriptors

 *  have been initialized . Returns 0 if all is well nz

 *  otherwise . Does not allocate memory but sets up card

 *  using previously allocated descriptors.

 Alloc  card RX descriptors */

 Alloc card TX descriptors */

 Last descriptor has EOC set */

 Alloc card Rid descriptor */

 Magic number... */

/*

 * We are setting up three things here:

 * 1) Map AUX memory for descriptors: Rid, TxFid, or RxFid.

 * 2) Map PCI memory for issuing commands.

 * 3) Allocate memory (shared) to send and receive ethernet frames.

 Reserve PKTSIZE for each fid and 2K for the Rids */

	/*

	 * Setup descriptor RX, TX, CONFIG

 RX descriptor setup */

 TX descriptor setup */

 Last descriptor has EOC set */

 Rid descriptor setup */

 Tell card about descriptors */

 Create the network device object. */

 The Airo-specific entries in the device structure. */

 WEP capability discovery */

 Test for WPA support */

 Only firmware versions 5.30.17 or better can do WPA */

 Allocate the transmit buffers */

 Allocate the transmit buffers if needed */

 Send event to user space */

 Blow away current list of scan results */

 Don't blow away ->list, just BSS data */

 Try to read the first entry of the scan result */

 No scan results */

 Read and parse all entries */

 Grab a network off the free list */

 Read next entry */

 write APList back (we cleared it in airo_set_scan) */

	/* Send an empty event to user space.

	 * We don't send the received data on

	 * the event because it would require

	 * us to do complex transcoding, and

	 * we want to minimise the work done in

	 * the irq handler. Use a request to

 make swsusp happy with our thread */

 Shouldn't get here, but we make sure to unlock */

 one-address control packet */

 two-address control packet */

 WDS packet */

 Airo Status codes */

 Loss of sync - missed beacons */

 Loss of sync - max retries */

 Loss of sync - average retry level exceeded*/

 Loss of sync - host request */

 Loss of sync - TSF synchronization */

 low byte is 802.11 reason code */

 low byte is 802.11 reason code */

 low byte is 802.11 reason code */

 low byte is 802.11 reason code */

 Associated */

 Reassociated?  Only on firmware >= 5.30.17 */

 Get new status and acknowledge the link change */

 Send event to user space */

 Get the packet length */

 Bad CRC. Ignore packet */

 This way the IP header is aligned */

 Prepare spy data : addr + qual */

 Update spy records */

 WIRELESS_SPY */

 Set up to be used again */

 Link status changed */

 Check to see if there is something to receive */

 Check to see if a packet has been transmitted */

/*

 *  Routines to talk to the card

/*

 *  This was originally written for the 4500, hence the name

 *  NOTE:  If use with 8bit mode and SMP bad things will happen!

 *         Why would some one do 8 bit IO in an SMP machine?!?

	/* FLAG_RADIO_OFF : Radio disabled via /proc or Wireless Extensions

	 * FLAG_RADIO_DOWN : Radio disabled via "ifconfig ethX down"

	 * Note : we could try to use !netif_running(dev) in enable_MAC()

	 * instead of this flag, but I don't trust it *within* the

	 * open/close functions, and testing both flags together is

 lock == 2 means don't disable carrier */

 disable in case already enabled

 Enable the interrupts */

 Make sure we got something */

 Prepare spy data : addr + qual */

 XXX Where do I get that info from ??? */

 Update spy records */

 WIRELESS_SPY */

 Bad CRC. Ignore packet */

 defined in iw_handler.h */

 Prepare spy data : addr + qual */

 Update spy records */

 IW_WIRELESS_SPY */

	/* Cache the last auth type used (of AUTH_OPEN and AUTH_ENCRYPT).

	 * Used by airo_set_auth()

	/* large variables, so don't inline this function,

	 * maybe change to kmalloc

 general configuration (read/modify/write)

 Skip RID length member */

 Save off the MAC */

	/* Check to see if there are any insmod configured

 The NOP is the first step in getting the card going */

 Let's figure out if we need to use the AUX port

 Setup the SSIDs if present */

 Set up the SSID list */

 Grab the initial wep key, we gotta save it for auto_wep */

 Im really paranoid about letting it run forever!

 PC4500 didn't notice command, try again

 command completed

 clear stuck command busy if necessary

 acknowledge processing the status/response

/* Sets up the bap to start exchange data.  whichbap should

 * be one of the BAP0 or BAP1 defines.  Locks should be held before

                        /* This isn't really a timeout, but its kinda

 invalid rid or offset */

 success

 -- PC4500 missed it, try again

/* should only be called by aux_bap_read.  This aux function and the

   following use concepts not documented in the developers guide.  I

 requires call to bap_setup() first */

 requires call to bap_setup() first */

 round up to even value

 requires call to bap_setup() first */

 round up to even value

 for issuing commands */

 response from commands */

/*  Note, that we are using BAP1 which is also used by transmit, so

 read the rid length field

 length for remaining part of rid

 read remainder of the rid

/*  Note, that we are using BAP1 which is also used by transmit, so

 --- first access so that we can write the rid data

 --- now write the rid data

 ---now commit the rid data

/* Allocates a FID to be used for transmitting packets.  We only use

	/* wait for the allocate event/indication

	 * It makes me kind of nervous that this can just sit here and spin,

 get the allocated fid and acknowledge

	/*  The CARD is pretty cool since it converts the ethernet packet

	 *  into 802.11.  Also note that we don't release the FID since we

	/*  We only have to setup the control once since we are not

/* In general BAP1 is dedicated to transmiting packets.  However,

   since we need a BAP when accessing RIDs, we also use BAP1 for that.

 packet is destination[6], source[6], payload[len-12]

 write the payload length and dst/src/payload

	/* The hardware addresses aren't counted as part of the payload, so

 issue the transmit command

 padding of header to full size + le16 gaplen (6) + gaplen bytes */

	/* packet is 802.11 header +  payload

	/* The 802.11 header aren't counted as part of the payload, so

 issue the transmit command

/*

 *  This is the proc_fs routines.  It is a bit messier than I would

 *  like!  Feel free to clean it up!

 First setup the device directory */

 Setup the StatsDelta */

 Setup the Stats */

 Setup the Status */

 Setup the Config */

 Setup the SSID */

 Setup the APList */

 Setup the BSSList */

 Setup the WepKey */

/*

 *  What we want from the proc_fs is to be able to efficiently read

 *  and write the configuration.  To do this, we want to read the

 *  configuration when the file is opened and write it when the file is

 *  closed.  So basically we allocate a read buffer at open and fill it

 *  with data, and allocate a write buffer and read it at close.

/*

 *  The read routine is generic, it relies on the preallocated rbuffer

 *  to supply the data.

/*

 *  The write routine is generic, it fills in a preallocated rbuffer

 *  to supply the data.

** Mode processing */

** Radio status */

** NodeName processing */

 Do the name, assume a space between the mode and node name */

** PowerMode processing */

			int v, i = 0, k = 0; /* i is index into line,

 Make sure its even */

 sentinel; we have space for it */

 copy up to 32 characters from this line */

 skip to the beginning of the next line */

 This function wraps PC4500_writerid with a MAC disable */

/* Returns the WEP key at the specified index, or -1 if that key does

 * not exist.  The buffer is assumed to be at least 16 bytes in length.

 allocate maxwritelen + 1; we'll want a sentinel */

 We end when we find a zero MAC

 If doLoseSync is not 1, we won't do a Lose Sync */

	/* There is a race condition here if there are concurrent opens.

           Since it is a rare condition, we'll just live with it, otherwise

/* Since the card doesn't automatically switch to the right WEP mode,

   we will make it do it.  If the card isn't associated, every secs we

   will switch WEP modes to see if that will help.  If the card is

   associated we will check every minute to see if anything has

 We don't have a link so try changing the authtype */

 So drop to OPEN */

 Drop to ENCRYPT */

 We'll escalate to SHAREDKEY */

 Schedule check to see if the change worked */

 the lock will be released at the end of the resume callback */

 do nothing */ ;

	/* Always exit with success, as we are a library module

	 * as well as a driver module

/*

 * Initial Wireless Extension code for Aironet driver by :

 *	Jean Tourrilhes <jt@hpl.hp.com> - HPL - 17 November 00

 * Conversion to new driver API by :

 *	Jean Tourrilhes <jt@hpl.hp.com> - HPL - 26 March 02

 * Javier also did a good amount of work here, adding some new extensions

 * and fixing my code. Let's just say that without him this code just

 * would not work at all... - Jean II

------------------------------------------------------------------*/

/*

 * Wireless Handler : get protocol name

------------------------------------------------------------------*/

/*

 * Wireless Handler : set frequency

 Call commit handler */

 If setting by frequency, convert to a channel */

 Hack to fall through... */

 Setting by channel number */

		/* We should do a better check than that,

 Yes ! We can set it !!! */

------------------------------------------------------------------*/

/*

 * Wireless Handler : get frequency

 Card status info */

------------------------------------------------------------------*/

/*

 * Wireless Handler : set ESSID

 SSIDs */

 Reload the list of current SSID */

 Check if we asked for `any' */

 Just send an empty SSID list */

 Check the size of the string */

 Check if index is valid */

 Set the SSID */

 Write it to the card */

------------------------------------------------------------------*/

/*

 * Wireless Handler : get ESSID

 Card status info */

	/* Note : if dwrq->flags != 0, we should

 Get the current SSID */

 If none, we may want to get the one that was set */

 Push it out ! */

 active */

------------------------------------------------------------------*/

/*

 * Wireless Handler : set AP address

------------------------------------------------------------------*/

/*

 * Wireless Handler : get AP address

 Card status info */

 Tentative. This seems to work, wow, I'm lucky !!! */

------------------------------------------------------------------*/

/*

 * Wireless Handler : set Nickname

 Check the size of the string */

 Call commit handler */

------------------------------------------------------------------*/

/*

 * Wireless Handler : get Nickname

------------------------------------------------------------------*/

/*

 * Wireless Handler : set Bit-Rate

 Card capability info */

 First : get a valid bit rate value */

 Which type of value ? */

 Setting by rate index */

 Find value in the magic rate table */

 Setting by frequency value */

 Check if rate is valid */

 -1 designed the max rate (mostly auto mode) */

 Get the highest available rate */

 Check that it is valid */

 Now, check if we want a fixed or auto value */

 Fill all the rates up to this max rate */

 Fixed mode */

 One rate, fixed */

 Call commit handler */

------------------------------------------------------------------*/

/*

 * Wireless Handler : get Bit-Rate

 Card status info */

 If more than one rate, set auto */

------------------------------------------------------------------*/

/*

 * Wireless Handler : set RTS threshold

 Call commit handler */

------------------------------------------------------------------*/

/*

 * Wireless Handler : get RTS threshold

------------------------------------------------------------------*/

/*

 * Wireless Handler : set Fragmentation threshold

 Get an even value - is it really needed ??? */

 Call commit handler */

------------------------------------------------------------------*/

/*

 * Wireless Handler : get Fragmentation threshold

------------------------------------------------------------------*/

/*

 * Wireless Handler : set Mode of Operation

 Call commit handler */

------------------------------------------------------------------*/

/*

 * Wireless Handler : get Mode of Operation

 If not managed, assume it's ad-hoc */

------------------------------------------------------------------*/

/*

 * Wireless Handler : set Encryption Key

	/* Basic checking: do we have a key to set ?

	 * Note : with the new API, it's impossible to get a NULL pointer.

	 * Therefore, we need to check a key size == 0 instead.

	 * New version of iwconfig properly set the IW_ENCODE_NOKEY flag

	 * when no key is present (only change flags), but older versions

 Check the size of the key */

 Check the index (none -> use current) */

 Set the length */

 Check if the key is not marked as invalid */

 Cleanup */

 Copy the key in the driver */

 Send the key to the card */

		/* WE specify that if a valid key is set, encryption

		 * should be enabled (user may turn it off later)

 Do we want to just set the transmit key index ? */

 Don't complain if only change the mode */

 Read the flags */

 disable encryption */

 Only Both */

 Only Wep */

 Commit the changes to flags if needed */

 Call commit handler */

------------------------------------------------------------------*/

/*

 * Wireless Handler : get Encryption Key

 Check encryption mode */

 We can't return the key, so set the proper flag and return zero */

 Which key do we want ? -1 -> tx index */

 Copy the key to the user buffer */

------------------------------------------------------------------*/

/*

 * Wireless Handler : set extended Encryption parameters

 Determine and validate the key index */

		/* Only set transmit key index here, actual

		 * key is set below if needed.

 Set the requested key first */

 Read the flags */

 disable encryption */

 Only Both */

 Commit the changes to flags if needed */

------------------------------------------------------------------*/

/*

 * Wireless Handler : get extended Encryption parameters

 Check encryption mode */

 We can't return the key, so set the proper flag and return zero */

 Copy the key to the user buffer */

------------------------------------------------------------------*/

/*

 * Wireless Handler : set extended authentication parameters

		/*

		 * airo does not use these parameters

 Only change auth type if unencrypted */

 Commit the changes to flags if needed */

				/* We don't know here if WEP open system or

				 * unencrypted mode was requested - so use the

				 * last mode (of these two) used last time

 Commit the changes to flags if needed */

 Silently accept disable of WPA */

------------------------------------------------------------------*/

/*

 * Wireless Handler : get extended authentication parameters

------------------------------------------------------------------*/

/*

 * Wireless Handler : set Tx-Power

 Card capability info */

 Call commit handler */

 Call commit handler */

------------------------------------------------------------------*/

/*

 * Wireless Handler : get Tx-Power

 No power control */

------------------------------------------------------------------*/

/*

 * Wireless Handler : set Retry limits

 No modifier : set both */

 Call commit handler */

 Call commit handler */

------------------------------------------------------------------*/

/*

 * Wireless Handler : get Retry limits

 Can't be disabled */

 Note : by default, display the min retry number */

------------------------------------------------------------------*/

/*

 * Wireless Handler : get range info

 Card capability info */

	/* Should be based on cap_rid.country to give only

 List index */

 Values in MHz -> * 10^5 * 10 */

 Hum... Should put the right values there */

 % */

 -120 dBm */

 -120 dBm */

 Experimental measurements - boundary 11/5.5 Mb/s */

	/* Note : with or without the (local->rssi), results

 % */

 -70 dBm */

 -80 dBm */

 -85 dBm */

	/* Set an indication of the max TCP throughput

	 * in bit/s that we can expect using this interface.

 WEP: RC4 40 bits

 RC4 ~128 bits

 5 secs */

 ??? */

 Transmit Power - values are in mW */

 Event capability (kernel + driver) */

------------------------------------------------------------------*/

/*

 * Wireless Handler : set Power Management

 Call commit handler */

 This is broken, fixme ;-) */

 Note : we may want to factor local->need_commit here

 Note2 : may also want to factor RXMODE_RFMON test

 Call commit handler */

------------------------------------------------------------------*/

/*

 * Wireless Handler : get Power Management

------------------------------------------------------------------*/

/*

 * Wireless Handler : set Sensitivity

 Call commit handler */

------------------------------------------------------------------*/

/*

 * Wireless Handler : get Sensitivity

------------------------------------------------------------------*/

/*

 * Wireless Handler : get AP List

 * Note : this is deprecated in favor of IWSCAN

 Card status info */

 Should be define'd */

------------------------------------------------------------------*/

/*

 * Wireless Handler : Initiate Scan

	/* Note : you may have realised that, as this is a SET operation,

	 * this is privileged and therefore a normal user can't

	 * perform scanning.

	 * This is not an error, while the device perform scanning,

	 * traffic doesn't flow, so it's a perfect DoS...

	/* If there's already a scan in progress, don't

 Clear APList as it affects scan results */

 Initiate a scan command */

------------------------------------------------------------------*/

/*

 * Translate scan data returned from the card to a card independent

 * format that the Wireless Tools will understand - Jean II

 Temporary buffer */

 For rates */

 First entry *MUST* be the AP MAC address */

 Other entries will be displayed in the order we give them */

 Add the ESSID */

 Add mode */

 Add frequency */

 Add quality statistics */

 Add encryption capability */

	/* Rate : stuffing multiple values in a single event require a bit

 Those two flags are ignored... */

 Max 8 values */

 NULL terminated */

 Bit rate given in 500 kb/s units (+ 0x80) */

 Add new value to event */

 Check if we added any event */

 Beacon interval */

 Put WPA/RSN Information Elements into the event stream */

 Invalid element, don't continue parsing IE */

				/* Two zero-length SSID elements

 64 is an arbitrary cut-off */

 64 is an arbitrary cut-off */

------------------------------------------------------------------*/

/*

 * Wireless Handler : Read Scan Results

 If a scan is in-progress, return -EAGAIN */

 Translate to WE format this entry */

 Check if there is space for one more entry */

 Ask user space to try again with a bigger buffer */

 Length of data */

 todo */

------------------------------------------------------------------*/

/*

 * Commit handler : called after a bunch of SET operations

 NULL */

 NULL */

 NULL */

	/* Some of the "SET" function may have modified some of the

------------------------------------------------------------------*/

/*

 * Structures to export the Wireless Handlers

{ cmd,         set_args,                            get_args, name } */

 SIOCSIWCOMMIT */

 SIOCGIWNAME */

 SIOCSIWNWID */

 SIOCGIWNWID */

 SIOCSIWFREQ */

 SIOCGIWFREQ */

 SIOCSIWMODE */

 SIOCGIWMODE */

 SIOCSIWSENS */

 SIOCGIWSENS */

 SIOCSIWRANGE */

 SIOCGIWRANGE */

 SIOCSIWPRIV */

 SIOCGIWPRIV */

 SIOCSIWSTATS */

 SIOCGIWSTATS */

 SIOCSIWSPY */

 SIOCGIWSPY */

 SIOCSIWTHRSPY */

 SIOCGIWTHRSPY */

 SIOCSIWAP */

 SIOCGIWAP */

 -- hole -- */

 SIOCGIWAPLIST */

 SIOCSIWSCAN */

 SIOCGIWSCAN */

 SIOCSIWESSID */

 SIOCGIWESSID */

 SIOCSIWNICKN */

 SIOCGIWNICKN */

 -- hole -- */

 -- hole -- */

 SIOCSIWRATE */

 SIOCGIWRATE */

 SIOCSIWRTS */

 SIOCGIWRTS */

 SIOCSIWFRAG */

 SIOCGIWFRAG */

 SIOCSIWTXPOW */

 SIOCGIWTXPOW */

 SIOCSIWRETRY */

 SIOCGIWRETRY */

 SIOCSIWENCODE */

 SIOCGIWENCODE */

 SIOCSIWPOWER */

 SIOCGIWPOWER */

 -- hole -- */

 -- hole -- */

 SIOCSIWGENIE */

 SIOCGIWGENIE */

 SIOCSIWAUTH */

 SIOCGIWAUTH */

 SIOCSIWENCODEEXT */

 SIOCGIWENCODEEXT */

 SIOCSIWPMKSA */

/* Note : don't describe AIROIDIFC and AIROOLDIDIFC in here.

 * We want to force the use of the ioctl code, because those can't be

 * won't work the iw_handler code (because they simultaneously read

 * and write data and iw_handler can't do that).

 * Note that it's perfectly legal to read/write on a single ioctl command,

 * you just can't use iwpriv and need to force it via the ioctl handler.

 SIOCIWFIRSTPRIV */

/*

 * This defines the configuration part of the Wireless Extensions

 * Note : irq and spinlock protection will occur in the subroutines

 *

 * TODO :

 *	o Check input value more carefully and fill correct values in range

 *	o Test and shakeout the bugs (if any)

 *

 * Jean II

 *

 * Javier Achirica did a great job of merging code from the unnamed CISCO

 * developer that added support for flashing the card.

		/* Get the command struct and hand it off for evaluation by

		 * the proper subfunction

		/* Separate R/W functions bracket legality here

 Bad command in ioctl */

 CISCO_EXT */

 All other calls are currently unsupported

/*

 * Get the Wireless stats out of the driver

 * Note : irq and spinlock protection will occur in the subroutines

 *

 * TODO :

 *	o Check if work in Ad-Hoc mode (otherwise, use SPY, as in wvlan_cs)

 *

 * Jean

 Get stats out of the card */

 The status */

 Signal quality and co */

 normalizedSignalStrength appears to be a percentage */

	/* Packets discarded in the wireless adapter due to wireless

 SSID Mismatch */

 RxWepErr */

/*

 * This just translates from driver IOCTL codes to the command codes to

 * feed to the radio's host interface. Things can be added/deleted

 * as needed.  This represents the READ side of control I/O to

 * the card

 Only super-user can read WEP keys */

	/* get the count of bytes in the rid  docs say 1st 2 bytes is it.

	 * then return it to the user

	 * 9/22/2000 Honor user given length

/*

 * Danger Will Robinson write the rids here

 Only super-user can write RIDs */

		/* this is not really a rid but a command given to the card

		 * same with MAC off

		/*

		 * Evidently this code in the airo driver does not get a symbol

		 * as disable_MAC. it's probably so short the compiler does not gen one.

		/* This command merely clears the counts does not actually store any data

		 * only reads rid. But as it changes the cards state, I put it in the

		 * writerid routines.

 Blarg! */

/*****************************************************************************

 * Ancillary flash / mod functions much black magic lurkes here              *

 *****************************************************************************

/*

 * Flash command switch table

 Only super-user can modify flash */

 Get char from aux */

 Send char to card. */

 Send 32k to card */

/*

 * STEP 1)

 * Disable MAC and do soft reset on

 * card.

 WAS 600 12/7/00 */

/* STEP 2)

 * Put the card in legendary flash

 * mode

 500ms delay */

/* Put character to SWS0 wait for dwelltime

 * x 50us for  echo .

 Wait for busy bit d15 to go false indicating buffer empty */

 timeout for busy clear wait */

 Port is clear now write byte and wait for it to echo back */

/*

 * Get a character from the card matching matchbyte

 * Step 3)

/*

 * Transfer 32k of firmware data from user buffer to our buffer and

 * send to the card

 Write stuff */

/*

 *

 Added 12/7/00 */

 Added 12/7/00 */

 CISCO_EXT */

/*

    This program is free software; you can redistribute it and/or

    modify it under the terms of the GNU General Public License

    as published by the Free Software Foundation; either version 2

    of the License, or (at your option) any later version.



    This program is distributed in the hope that it will be useful,

    but WITHOUT ANY WARRANTY; without even the implied warranty of

    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

    GNU General Public License for more details.



    In addition:



    Redistribution and use in source and binary forms, with or without

    modification, are permitted provided that the following conditions

    are met:



    1. Redistributions of source code must retain the above copyright

       notice, this list of conditions and the following disclaimer.

    2. Redistributions in binary form must reproduce the above copyright

       notice, this list of conditions and the following disclaimer in the

       documentation and/or other materials provided with the distribution.

    3. The name of the author may not be used to endorse or promote

       products derived from this software without specific prior written

       permission.



    THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR

    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED

    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

    ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,

    INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES

    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR

    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

    HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,

    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING

    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE

    POSSIBILITY OF SUCH DAMAGE.

/*

 * Copyright (c) 2014 Redpine Signals Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/**

 * rsi_determine_min_weight_queue() - This function determines the queue with

 *				      the min weight.

 * @common: Pointer to the driver private structure.

 *

 * Return: q_num: Corresponding queue number.

/**

 * rsi_recalculate_weights() - This function recalculates the weights

 *			       corresponding to each queue.

 * @common: Pointer to the driver private structure.

 *

 * Return: recontend_queue bool variable

 Check for the need of contention */

 No packets so no contention */

/**

 * rsi_get_num_pkts_dequeue() - This function determines the number of

 *		                packets to be dequeued based on the number

 *			        of bytes calculated using txop.

 *

 * @common: Pointer to the driver private structure.

 * @q_num: the queue from which pkts have to be dequeued

 *

 * Return: pkt_num: Number of pkts to be dequeued.

 Convert to Kbps */

checking if pkts are still there*/

/**

 * rsi_core_determine_hal_queue() - This function determines the queue from

 *				    which packet has to be dequeued.

 * @common: Pointer to the driver private structure.

 *

 * Return: q_num: Corresponding queue number on success.

 Selecting the queue with least back off */

 Adjust the back off values for all queues again */

		/* If any queues are freshly contended and the selected queue

		 * doesn't have any packets

		 * then get the queue number again with fresh values

/**

 * rsi_core_queue_pkt() - This functions enqueues the packet to the queue

 *			  specified by the queue number.

 * @common: Pointer to the driver private structure.

 * @skb: Pointer to the socket buffer structure.

 *

 * Return: None.

/**

 * rsi_core_dequeue_pkt() - This functions dequeues the packet from the queue

 *			    specified by the queue number.

 * @common: Pointer to the driver private structure.

 * @q_num: Queue number.

 *

 * Return: Pointer to sk_buff structure.

/**

 * rsi_core_qos_processor() - This function is used to determine the wmm queue

 *			      based on the backoff procedure. Data packets are

 *			      dequeued from the selected hal queue and sent to

 *			      the below layers.

 * @common: Pointer to the driver private structure.

 *

 * Return: None.

/**

 * rsi_core_xmit() - This function transmits the packets received from mac80211

 * @common: Pointer to the driver private structure.

 * @skb: Pointer to the socket buffer structure.

 *

 * Return: None.

 info->driver_data and info->control part of union so make copy */

 Start aggregation if not done for this tid */

 Dropping pkt here */

/*

 * Copyright (c) 2014 Redpine Signals Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 *

/**

 * rsi_usb_rx_thread() - This is a kernel thread to receive the packets from

 *			 the USB device.

 * @common: Pointer to the driver private structure.

 *

 * Return: None.

/*

 * Copyright (c) 2014 Redpine Signals Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

u32 rsi_zone_enabled = /* INFO_ZONE |

			INIT_ZONE |

			MGMT_TX_ZONE |

			MGMT_RX_ZONE |

			DATA_TX_ZONE |

			DATA_RX_ZONE |

			FSM_ZONE |

/**

 * rsi_dbg() - This function outputs informational messages.

 * @zone: Zone of interest for output message.

 * @fmt: printf-style format for output message.

 *

 * Return: none

/**

 * rsi_prepare_skb() - This function prepares the skb.

 * @common: Pointer to the driver private structure.

 * @buffer: Pointer to the packet data.

 * @pkt_len: Length of the packet.

 * @extended_desc: Extended descriptor.

 *

 * Return: Successfully skb.

/**

 * rsi_read_pkt() - This function reads frames from the card.

 * @common: Pointer to the driver private structure.

 * @rx_pkt: Received pkt.

 * @rcv_pkt_len: Received pkt length. In case of USB it is 0.

 *

 * Return: 0 on success, -1 on failure.

 Extended descriptor is valid for WLAN queues only */

/**

 * rsi_tx_scheduler_thread() - This function is a kernel thread to send the

 *			       packets to the device.

 * @common: Pointer to the driver private structure.

 *

 * Return: None.

/**

 * rsi_91x_init() - This function initializes os interface operations.

 * @oper_mode: One of DEV_OPMODE_*.

 *

 * Return: Pointer to the adapter structure on success, NULL on failure .

 Determine coex mode */

/**

 * rsi_91x_deinit() - This function de-intializes os intf operations.

 * @adapter: Pointer to the adapter structure.

 *

 * Return: None.

/**

 * rsi_91x_hal_module_init() - This function is invoked when the module is

 *			       loaded into the kernel.

 *			       It registers the client driver.

 * @void: Void.

 *

 * Return: 0 on success, -1 on failure.

/**

 * rsi_91x_hal_module_exit() - This function is called at the time of

 *			       removing/unloading the module.

 *			       It unregisters the client driver.

 * @void: Void.

 *

 * Return: None.

/*

 * Copyright (c) 2014 Redpine Signals Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 This function is used to disable power save */

/*

 * Copyright (c) 2014 Redpine Signals Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 *

 Default operating mode is wlan STA + BT */

/**

 * rsi_usb_card_write() - This function writes to the USB Card.

 * @adapter: Pointer to the adapter structure.

 * @buf: Pointer to the buffer from where the data has to be taken.

 * @len: Length to be written.

 * @endpoint: Type of endpoint.

 *

 * Return: status: 0 on success, a negative error code on failure.

/**

 * rsi_write_multiple() - This function writes multiple bytes of information

 *			  to the USB card.

 * @adapter: Pointer to the adapter structure.

 * @endpoint: Type of endpoint.

 * @data: Pointer to the data that has to be written.

 * @count: Number of multiple bytes to be written.

 *

 * Return: 0 on success, a negative error code on failure.

/**

 * rsi_find_bulk_in_and_out_endpoints() - This function initializes the bulk

 *					  endpoints to the device.

 * @interface: Pointer to the USB interface structure.

 * @adapter: Pointer to the adapter structure.

 *

 * Return: ret_val: 0 on success, -ENOMEM on failure.

/* rsi_usb_reg_read() - This function reads data from given register address.

 * @usbdev: Pointer to the usb_device structure.

 * @reg: Address of the register to be read.

 * @value: Value to be read.

 * @len: length of data to be read.

 *

 * Return: status: 0 on success, a negative error code on failure.

/**

 * rsi_usb_reg_write() - This function writes the given data into the given

 *			 register address.

 * @usbdev: Pointer to the usb_device structure.

 * @reg: Address of the register.

 * @value: Value to write.

 * @len: Length of data to be written.

 *

 * Return: status: 0 on success, a negative error code on failure.

/**

 * rsi_rx_done_handler() - This function is called when a packet is received

 *			   from USB stack. This is callback to receive done.

 * @urb: Received URB.

 *

 * Return: None.

/**

 * rsi_rx_urb_submit() - This function submits the given URB to the USB stack.

 * @adapter: Pointer to the adapter structure.

 * @ep_num: Endpoint number.

 * @mem_flags: The type of memory to allocate.

 *

 * Return: 0 on success, a negative error code on failure.

/**

 * rsi_usb_write_register_multiple() - This function writes multiple bytes of

 *				       information to multiple registers.

 * @adapter: Pointer to the adapter structure.

 * @addr: Address of the register.

 * @data: Pointer to the data that has to be written.

 * @count: Number of multiple bytes to be written on to the registers.

 *

 * Return: status: 0 on success, a negative error code on failure.

/**

 *rsi_usb_host_intf_write_pkt() - This function writes the packet to the

 *				   USB card.

 * @adapter: Pointer to the adapter structure.

 * @pkt: Pointer to the data to be written on to the card.

 * @len: Length of the data to be written on to the card.

 *

 * Return: 0 on success, a negative error code on failure.

/**

 * rsi_deinit_usb_interface() - This function deinitializes the usb interface.

 * @adapter: Pointer to the adapter structure.

 *

 * Return: None.

/**

 * rsi_init_usb_interface() - This function initializes the usb interface.

 * @adapter: Pointer to the adapter structure.

 * @pfunction: Pointer to USB interface structure.

 *

 * Return: 0 on success, a negative error code on failure.

 Initializing function callbacks */

 In USB, one less than the MAX_DEBUGFS_ENTRIES entries is required */

 Initializing GSPI for ULP read/writes */

	/* This msleep will ensure Thread-Arch processor to go to hold

	 * and any pending dma transfers to rf in device to finish.

/**

 * rsi_probe() - This function is called by kernel when the driver provided

 *		 Vendor and device IDs are matched. All the initialization

 *		 work is done here.

 * @pfunction: Pointer to the USB interface structure.

 * @id: Pointer to the usb_device_id structure.

 *

 * Return: 0 on success, a negative error code on failure.

/**

 * rsi_disconnect() - This function performs the reverse of the probe function,

 *		      it deinitialize the driver structure.

 * @pfunction: Pointer to the USB interface structure.

 *

 * Return: None.

 Not yet implemented */

 Not yet implemented */

 Blank */},

/*

 * Copyright (c) 2018 Redpine Signals Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 Send packet to hal */

 Initialize co-ex queues */

 Initialize co-ex thread */

/*

 * Copyright (c) 2014 Redpine Signals Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 *

/**

 * rsi_sdio_master_access_msword() - This function sets the AHB master access

 *				     MS word in the SDIO slave registers.

 * @adapter: Pointer to the adapter structure.

 * @ms_word: ms word need to be initialized.

 *

 * Return: status: 0 on success, -1 on failure.

/**

 * rsi_process_pkt() - This Function reads rx_blocks register and figures out

 *		       the size of the rx pkt.

 * @common: Pointer to the driver private structure.

 *

 * Return: 0 on success, -1 on failure.

/**

 * rsi_init_sdio_slave_regs() - This function does the actual initialization

 *				of SDBUS slave registers.

 * @adapter: Pointer to the adapter structure.

 *

 * Return: status: 0 on success, -1 on failure.

 This tells SDIO FIFO when to start read to host */

/**

 * rsi_rx_handler() - Read and process SDIO interrupts.

 * @adapter: Pointer to the adapter structure.

 *

 * Return: None.

/* This function is used to read buffer status register and

 * set relevant fields in rsi_91x_sdiodev struct.

/**

 * rsi_sdio_determine_event_timeout() - This Function determines the event

 *					timeout duration.

 * @adapter: Pointer to the adapter structure.

 *

 * Return: timeout duration is returned.

 Once buffer full is seen, event timeout to occur every 2 msecs */

/*

 * Copyright (c) 2014 Redpine Signals Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 Channel 1 */

 Channel 2 */

 Channel 3 */

 Channel 4 */

 Channel 5 */

 Channel 6 */

 Channel 7 */

 Channel 8 */

 Channel 9 */

 Channel 10 */

 Channel 11 */

 Channel 12 */

 Channel 13 */

 Channel 14 */

 Channel 36 */

 Channel 40 */

 Channel 44 */

 Channel 48 */

 Channel 52 */

 Channel 56 */

 Channel 60 */

 Channel 64 */

 Channel 100 */

 Channel 104 */

 Channel 108 */

 Channel 112 */

 Channel 116 */

 Channel 120 */

 Channel 124 */

 Channel 128 */

 Channel 132 */

 Channel 136 */

 Channel 140 */

 Channel 149 */

 Channel 153 */

 Channel 157 */

 Channel 161 */

 Channel 165 */

 1 - Wi-Fi alone */

 2 */

 3 */

 4 - BT EDR alone */

 5 - STA + BT EDR */

 6 - AP + BT EDR */

 7 */

 8 - BT LE alone */

 9 - STA + BE LE */

 10 */

 11 */

 12 */

 13 - STA + BT Dual */

 14 - AP + BT Dual */

/**

 * rsi_is_cipher_wep() -  This function determines if the cipher is WEP or not.

 * @common: Pointer to the driver private structure.

 *

 * Return: If cipher type is WEP, a value of 1 is returned, else 0.

/**

 * rsi_register_rates_channels() - This function registers channels and rates.

 * @adapter: Pointer to the adapter structure.

 * @band: Operating band to be set.

 *

 * Return: int - 0 on success, negative error on failure.

 sbands->ht_cap.mcs.rx_highest = 0x82; */

 Scan already in progress. So return */

	/* If STA is not connected, return with special value 1, in order

	 * to start sw_scan in mac80211

/**

 * rsi_mac80211_detach() - This function is used to de-initialize the

 *			   Mac80211 stack.

 * @adapter: Pointer to the adapter structure.

 *

 * Return: None.

/**

 * rsi_indicate_tx_status() - This function indicates the transmit status.

 * @adapter: Pointer to the adapter structure.

 * @skb: Pointer to the socket buffer structure.

 * @status: Status

 *

 * Return: None.

/**

 * rsi_mac80211_tx() - This is the handler that 802.11 module calls for each

 *		       transmitted frame.SKB contains the buffer starting

 *		       from the IEEE 802.11 header.

 * @hw: Pointer to the ieee80211_hw structure.

 * @control: Pointer to the ieee80211_tx_control structure

 * @skb: Pointer to the socket buffer structure.

 *

 * Return: None

/**

 * rsi_mac80211_start() - This is first handler that 802.11 module calls, since

 *			  the driver init is complete by then, just

 *			  returns success.

 * @hw: Pointer to the ieee80211_hw structure.

 *

 * Return: 0 as success.

/**

 * rsi_mac80211_stop() - This is the last handler that 802.11 module calls.

 * @hw: Pointer to the ieee80211_hw structure.

 *

 * Return: None.

 Block all rx frames */

/**

 * rsi_mac80211_add_interface() - This function is called when a netdevice

 *				  attached to the hardware is enabled.

 * @hw: Pointer to the ieee80211_hw structure.

 * @vif: Pointer to the ieee80211_vif structure.

 *

 * Return: ret: 0 on success, negative error code on failure.

 Get free vap index */

/**

 * rsi_mac80211_remove_interface() - This function notifies driver that an

 *				     interface is going down.

 * @hw: Pointer to the ieee80211_hw structure.

 * @vif: Pointer to the ieee80211_vif structure.

 *

 * Return: None.

/**

 * rsi_channel_change() - This function is a performs the checks

 *			  required for changing a channel and sets

 *			  the channel accordingly.

 * @hw: Pointer to the ieee80211_hw structure.

 *

 * Return: 0 on success, negative error code on failure.

/**

 * rsi_config_power() - This function configures tx power to device

 * @hw: Pointer to the ieee80211_hw structure.

 *

 * Return: 0 on success, negative error code on failure.

/**

 * rsi_mac80211_config() - This function is a handler for configuration

 *			   requests. The stack calls this function to

 *			   change hardware configuration, e.g., channel.

 * @hw: Pointer to the ieee80211_hw structure.

 * @changed: Changed flags set.

 *

 * Return: 0 on success, negative error code on failure.

 tx power */

 Power save parameters */

 Don't go to power save if AP vap exists */

 RTS threshold */

/**

 * rsi_get_connected_channel() - This function is used to get the current

 *				 connected channel number.

 * @vif: Pointer to the ieee80211_vif structure.

 *

 * Return: Current connected AP's channel number is returned.

/**

 * rsi_mac80211_bss_info_changed() - This function is a handler for config

 *				     requests related to BSS parameters that

 *				     may vary during BSS's lifespan.

 * @hw: Pointer to the ieee80211_hw structure.

 * @vif: Pointer to the ieee80211_vif structure.

 * @bss_conf: Pointer to the ieee80211_bss_conf structure.

 * @changed: Changed flags set.

 *

 * Return: None.

 Send the RX filter frame */

 If U-APSD is updated, send ps parameters to firmware */

/**

 * rsi_mac80211_conf_filter() - This function configure the device's RX filter.

 * @hw: Pointer to the ieee80211_hw structure.

 * @changed_flags: Changed flags set.

 * @total_flags: Total initial flags set.

 * @multicast: Multicast.

 *

 * Return: None.

 Not doing much here as of now */

/**

 * rsi_mac80211_conf_tx() - This function configures TX queue parameters

 *			    (EDCF (aifs, cw_min, cw_max), bursting)

 *			    for a hardware TX queue.

 * @hw: Pointer to the ieee80211_hw structure

 * @vif: Pointer to the ieee80211_vif structure.

 * @queue: Queue number.

 * @params: Pointer to ieee80211_tx_queue_params structure.

 *

 * Return: 0 on success, negative error code on failure.

 Map into the way the f/w expects */

/**

 * rsi_hal_key_config() - This function loads the keys into the firmware.

 * @hw: Pointer to the ieee80211_hw structure.

 * @vif: Pointer to the ieee80211_vif structure.

 * @key: Pointer to the ieee80211_key_conf structure.

 * @sta: Pointer to the ieee80211_sta structure.

 *

 * Return: status: 0 on success, negative error codes on failure.

/**

 * rsi_mac80211_set_key() - This function sets type of key to be loaded.

 * @hw: Pointer to the ieee80211_hw structure.

 * @cmd: enum set_key_cmd.

 * @vif: Pointer to the ieee80211_vif structure.

 * @sta: Pointer to the ieee80211_sta structure.

 * @key: Pointer to the ieee80211_key_conf structure.

 *

 * Return: status: 0 on success, negative error code on failure.

/**

 * rsi_mac80211_ampdu_action() - This function selects the AMPDU action for

 *				 the corresponding mlme_action flag and

 *				 informs the f/w regarding this.

 * @hw: Pointer to the ieee80211_hw structure.

 * @vif: Pointer to the ieee80211_vif structure.

 * @params: Pointer to A-MPDU action parameters

 *

 * Return: status: 0 on success, negative error code on failure.

/**

 * rsi_mac80211_set_rts_threshold() - This function sets rts threshold value.

 * @hw: Pointer to the ieee80211_hw structure.

 * @value: Rts threshold value.

 *

 * Return: 0 on success.

/**

 * rsi_mac80211_set_rate_mask() - This function sets bitrate_mask to be used.

 * @hw: Pointer to the ieee80211_hw structure

 * @vif: Pointer to the ieee80211_vif structure.

 * @mask: Pointer to the cfg80211_bitrate_mask structure.

 *

 * Return: 0 on success.

 single rate */

/**

 * rsi_perform_cqm() - This function performs cqm.

 * @common: Pointer to the driver private structure.

 * @bssid: pointer to the bssid.

 * @rssi: RSSI value.

 * @vif: Pointer to the ieee80211_vif structure.

/**

 * rsi_fill_rx_status() - This function fills rx status in

 *			  ieee80211_rx_status structure.

 * @hw: Pointer to the ieee80211_hw structure.

 * @skb: Pointer to the socket buffer structure.

 * @common: Pointer to the driver private structure.

 * @rxs: Pointer to the ieee80211_rx_status structure.

 *

 * Return: None.

 CQM only for connected AP beacons, the RSSI is a weighted avg */

/**

 * rsi_indicate_pkt_to_os() - This function sends received packet to mac80211.

 * @common: Pointer to the driver private structure.

 * @skb: Pointer to the socket buffer structure.

 *

 * Return: None.

 filling in the ieee80211_rx_status flags */

/**

 * rsi_mac80211_sta_add() - This function notifies driver about a peer getting

 *			    connected.

 * @hw: pointer to the ieee80211_hw structure.

 * @vif: Pointer to the ieee80211_vif structure.

 * @sta: Pointer to the ieee80211_sta structure.

 *

 * Return: 0 on success, negative error codes on failure.

 Check if max stations reached */

 Send peer notify to device */

/**

 * rsi_mac80211_sta_remove() - This function notifies driver about a peer

 *			       getting disconnected.

 * @hw: Pointer to the ieee80211_hw structure.

 * @vif: Pointer to the ieee80211_vif structure.

 * @sta: Pointer to the ieee80211_sta structure.

 *

 * Return: 0 on success, negative error codes on failure.

 Send peer notify to device */

 Resetting all the fields to default values */

/**

 * rsi_mac80211_set_antenna() - This function is used to configure

 *				tx and rx antennas.

 * @hw: Pointer to the ieee80211_hw structure.

 * @tx_ant: Bitmap for tx antenna

 * @rx_ant: Bitmap for rx antenna

 *

 * Return: 0 on success, Negative error code on failure.

/**

 * rsi_mac80211_get_antenna() - This function is used to configure 

 * 				tx and rx antennas.

 *

 * @hw: Pointer to the ieee80211_hw structure.

 * @tx_ant: Bitmap for tx antenna

 * @rx_ant: Bitmap for rx antenna

 * 

 * Return: 0 on success, negative error codes on failure.

 Configure band */

 Configure channel */

	/**

	 * Increase the beacon_miss threshold & keep-alive timers in

	 * vap_update frame

		/* Device need a complete restart of all MAC operations.

		 * returning 1 will serve this purpose.

/**

 * rsi_mac80211_attach() - This function is used to initialize Mac80211 stack.

 * @common: Pointer to the driver private structure.

 *

 * Return: 0 on success, negative error codes on failure.

 AP Parameters */

 Wi-Fi direct parameters */

/*

 * Copyright (c) 2014 Redpine Signals Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 FLASH Firmware */

 Update header size */

 This function prepares descriptor for given data packet */

 Send fixed rate */

 Only MCS rates */

 This function sends received data packet from driver to device */

/**

 * rsi_send_mgmt_pkt() - This functions sends the received management packet

 *			 from driver to device.

 * @common: Pointer to the driver private structure.

 * @skb: Pointer to the socket buffer structure.

 *

 * Return: status: 0 on success, -1 on failure.

 Indicate to firmware to give cfm for probe */

		/* JUMP_TO_ZERO_PC doesn't expect

		 * any response. So return from here

 Return size in kbytes */

 Get the firmware version */

/*

 * Copyright (c) 2014 Redpine Signals Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 *

 Default operating mode is wlan STA + BT */

/**

 * rsi_sdio_set_cmd52_arg() - This function prepares cmd 52 read/write arg.

 * @rw: Read/write

 * @func: function number

 * @raw: indicates whether to perform read after write

 * @address: address to which to read/write

 * @writedata: data to write

 *

 * Return: argument

/**

 * rsi_cmd52writebyte() - This function issues cmd52 byte write onto the card.

 * @card: Pointer to the mmc_card.

 * @address: Address to write.

 * @byte: Data to write.

 *

 * Return: Write status.

/**

 * rsi_cmd52readbyte() - This function issues cmd52 byte read onto the card.

 * @card: Pointer to the mmc_card.

 * @address: Address to read from.

 * @byte: Variable to store read value.

 *

 * Return: Read status.

/**

 * rsi_issue_sdiocommand() - This function issues sdio commands.

 * @func: Pointer to the sdio_func structure.

 * @opcode: Opcode value.

 * @arg: Arguments to pass.

 * @flags: Flags which are set.

 * @resp: Pointer to store response.

 *

 * Return: err: command status as 0 or -1.

/**

 * rsi_handle_interrupt() - This function is called upon the occurrence

 *			    of an interrupt.

 * @function: Pointer to the sdio_func structure.

 *

 * Return: None.

/**

 * rsi_reset_card() - This function resets and re-initializes the card.

 * @pfunction: Pointer to the sdio_func structure.

 *

 * Return: None.

 Reset 9110 chip */

	/* Card will not send any response as it is getting reset immediately

	 * Hence expect a timeout status from host controller

 Wait for few milli seconds to get rid of residue charges if any */

 Initialize the SDIO card */

	/*

	 * This delay should be sufficient to allow the power supply

	 * to reach the minimum voltage.

	/*

	 * This delay must be at least 74 clock sizes, or 1 ms, or the

	 * time required to reach a stable voltage.

 Issue CMD0. Goto idle state */

 Issue CMD5, arg = 0 */

 Issue CMD5, arg = ocr. Wait till card is ready  */

 Issue CMD3, get RCA */

 Issue CMD7, select card  */

 Enable high speed */

 Set clock */

 CMD52: Set bus width & disable card detect resistor */

/**

 * rsi_setclock() - This function sets the clock frequency.

 * @adapter: Pointer to the adapter structure.

 * @freq: Clock frequency.

 *

 * Return: None.

/**

 * rsi_setblocklength() - This function sets the host block length.

 * @adapter: Pointer to the adapter structure.

 * @length: Block length to be set.

 *

 * Return: status: 0 on success, -1 on failure.

/**

 * rsi_setupcard() - This function queries and sets the card's features.

 * @adapter: Pointer to the adapter structure.

 *

 * Return: status: 0 on success, -1 on failure.

/**

 * rsi_sdio_read_register() - This function reads one byte of information

 *			      from a register.

 * @adapter: Pointer to the adapter structure.

 * @addr: Address of the register.

 * @data: Pointer to the data that stores the data read.

 *

 * Return: 0 on success, -1 on failure.

/**

 * rsi_sdio_write_register() - This function writes one byte of information

 *			       into a register.

 * @adapter: Pointer to the adapter structure.

 * @function: Function Number.

 * @addr: Address of the register.

 * @data: Pointer to the data tha has to be written.

 *

 * Return: 0 on success, -1 on failure.

/**

 * rsi_sdio_ack_intr() - This function acks the interrupt received.

 * @adapter: Pointer to the adapter structure.

 * @int_bit: Interrupt bit to write into register.

 *

 * Return: None.

/**

 * rsi_sdio_read_register_multiple() - This function read multiple bytes of

 *				       information from the SD card.

 * @adapter: Pointer to the adapter structure.

 * @addr: Address of the register.

 * @count: Number of multiple bytes to be read.

 * @data: Pointer to the read data.

 *

 * Return: 0 on success, -1 on failure.

/**

 * rsi_sdio_write_register_multiple() - This function writes multiple bytes of

 *					information to the SD card.

 * @adapter: Pointer to the adapter structure.

 * @addr: Address of the register.

 * @data: Pointer to the data that has to be written.

 * @count: Number of multiple bytes to be written.

 *

 * Return: 0 on success, -1 on failure.

		/**

		 * Assuming it is a CRC failure, we want to allow another

		 *  card write

 Loading DM ms word in the sdio slave */

 Loading DM ms word in the sdio slave */

 Bring TA out of reset */

 Bring TA out of reset */

/**

 * rsi_sdio_host_intf_write_pkt() - This function writes the packet to device.

 * @adapter: Pointer to the adapter structure.

 * @pkt: Pointer to the data to be written on to the device.

 * @len: length of the data to be written on to the device.

 *

 * Return: 0 on success, -1 on failure.

/**

 * rsi_sdio_host_intf_read_pkt() - This function reads the packet

 *				   from the device.

 * @adapter: Pointer to the adapter data structure.

 * @pkt: Pointer to the packet data to be read from the the device.

 * @length: Length of the data to be read from the device.

 *

 * Return: 0 on success, -1 on failure.

num of bytes*/

/**

 * rsi_init_sdio_interface() - This function does init specific to SDIO.

 *

 * @adapter: Pointer to the adapter data structure.

 * @pfunction: Pointer to the sdio_func structure.

 *

 * Return: 0 on success, -1 on failure.

 Initialize device again */

/**

 * rsi_probe() - This function is called by kernel when the driver provided

 *		 Vendor and device IDs are matched. All the initialization

 *		 work is done here.

 * @pfunction: Pointer to the sdio_func structure.

 * @id: Pointer to sdio_device_id structure.

 *

 * Return: 0 on success, 1 on failure.

This function resets and re-initializes the chip.*/

 Put Thread-Arch processor on hold */

	/* This msleep will ensure Thread-Arch processor to go to hold

	 * and any pending dma transfers to rf spi in device to finish.

	/* This msleep will be sufficient for the ulp

	 * read write operations to complete for chip reset.

/**

 * rsi_disconnect() - This function performs the reverse of the probe function.

 * @pfunction: Pointer to the sdio_func structure.

 *

 * Return: void.

 Reset Chip */

 Resetting to take care of the case, where-in driver is re-loaded */

 Blank */},

/**

 * rsi_module_init() - This function registers the sdio module.

 * @void: Void.

 *

 * Return: 0 on success.

/**

 * rsi_module_exit() - This function unregisters the sdio module.

 * @void: Void.

 *

 * Return: None.

/*

 * Copyright (c) 2014 Redpine Signals Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/**

 * rsi_sdio_stats_read() - This function returns the sdio status of the driver.

 * @seq: Pointer to the sequence file structure.

 * @data: Pointer to the data.

 *

 * Return: 0 on success, -1 on failure.

 RX Path Stats */

/**

 * rsi_sdio_stats_open() - This function calls single open function of seq_file

 *			   to open file and read contents from it.

 * @inode: Pointer to the inode structure.

 * @file: Pointer to the file structure.

 *

 * Return: Pointer to the opened file status: 0 on success, ENOMEM on failure.

/**

 * rsi_version_read() - This function gives driver and firmware version number.

 * @seq: Pointer to the sequence file structure.

 * @data: Pointer to the data.

 *

 * Return: 0 on success, -1 on failure.

/**

 * rsi_version_open() - This function calls single open function of seq_file to

 *			open file and read contents from it.

 * @inode: Pointer to the inode structure.

 * @file: Pointer to the file structure.

 *

 * Return: Pointer to the opened file status: 0 on success, ENOMEM on failure.

/**

 * rsi_stats_read() - This function return the status of the driver.

 * @seq: Pointer to the sequence file structure.

 * @data: Pointer to the data.

 *

 * Return: 0 on success, -1 on failure.

 Mgmt TX Path Stats */

 Data TX Path Stats */

/**

 * rsi_stats_open() - This function calls single open function of seq_file to

 *		      open file and read contents from it.

 * @inode: Pointer to the inode structure.

 * @file: Pointer to the file structure.

 *

 * Return: Pointer to the opened file status: 0 on success, ENOMEM on failure.

/**

 * rsi_debug_zone_read() - This function display the currently enabled debug zones.

 * @seq: Pointer to the sequence file structure.

 * @data: Pointer to the data.

 *

 * Return: 0 on success, -1 on failure.

/**

 * rsi_debug_read() - This function calls single open function of seq_file to

 *		      open file and read contents from it.

 * @inode: Pointer to the inode structure.

 * @file: Pointer to the file structure.

 *

 * Return: Pointer to the opened file status: 0 on success, ENOMEM on failure.

/**

 * rsi_debug_zone_write() - This function writes into hal queues as per user

 *			    requirement.

 * @filp: Pointer to the file structure.

 * @buff: Pointer to the character buffer.

 * @len: Length of the data to be written into buffer.

 * @data: Pointer to the data.

 *

 * Return: len: Number of bytes read.

/**

 * rsi_init_dbgfs() - This function initializes the dbgfs entry.

 * @adapter: Pointer to the adapter structure.

 *

 * Return: 0 on success, -1 on failure.

/**

 * rsi_remove_dbgfs() - Removes the previously created dbgfs file entries

 *			in the reverse order of creation.

 * @adapter: Pointer to the adapter structure.

 *

 * Return: None.

/*

 * Copyright (c) 2014 Redpine Signals Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/**

 * rsi_set_default_parameters() - This function sets default parameters.

 * @common: Pointer to the driver private structure.

 *

 * Return: none

 End to end mode */

 Default no handShake mode*/

 Default PKT handShake mode*/

 Default 1.9V */

/**

 * rsi_set_contention_vals() - This function sets the contention values for the

 *			       backoff procedure.

 * @common: Pointer to the driver private structure.

 *

 * Return: None.

/**

 * rsi_send_internal_mgmt_frame() - This function sends management frames to

 *				    firmware.Also schedules packet to queue

 *				    for transmission.

 * @common: Pointer to the driver private structure.

 * @skb: Pointer to the socket buffer structure.

 *

 * Return: 0 on success, -1 on failure.

/**

 * rsi_load_radio_caps() - This function is used to send radio capabilities

 *			   values to firmware.

 * @common: Pointer to the driver private structure.

 *

 * Return: 0 on success, corresponding negative error code on failure.

/**

 * rsi_mgmt_pkt_to_core() - This function is the entry point for Mgmt module.

 * @common: Pointer to the driver private structure.

 * @msg: Pointer to received packet.

 * @msg_len: Length of the received packet.

 *

 * Return: 0 on success, -1 on failure.

/**

 * rsi_hal_send_sta_notify_frame() - This function sends the station notify

 *				     frame to firmware.

 * @common: Pointer to the driver private structure.

 * @opmode: Operating mode of device.

 * @notify_event: Notification about station connection.

 * @bssid: bssid.

 * @qos_enable: Qos is enabled.

 * @aid: Aid (unique for all STA).

 * @sta_id: station id.

 * @vif: Pointer to the ieee80211_vif structure.

 *

 * Return: status: 0 on success, corresponding negative error code on failure.

/**

 * rsi_send_aggregation_params_frame() - This function sends the ampdu

 *					 indication frame to firmware.

 * @common: Pointer to the driver private structure.

 * @tid: traffic identifier.

 * @ssn: ssn.

 * @buf_size: buffer size.

 * @event: notification about station connection.

 * @sta_id: station id.

 *

 * Return: 0 on success, corresponding negative error code on failure.

/**

 * rsi_program_bb_rf() - This function starts base band and RF programming.

 *			 This is called after initial configurations are done.

 * @common: Pointer to the driver private structure.

 *

 * Return: 0 on success, corresponding negative error code on failure.

/**

 * rsi_set_vap_capabilities() - This function send vap capability to firmware.

 * @common: Pointer to the driver private structure.

 * @mode: Operating mode of device.

 * @mac_addr: MAC address

 * @vap_id: Rate information - offset and mask

 * @vap_status: VAP status - ADD, DELETE or UPDATE

 *

 * Return: 0 on success, corresponding negative error code on failure.

/**

 * rsi_hal_load_key() - This function is used to load keys within the firmware.

 * @common: Pointer to the driver private structure.

 * @data: Pointer to the key data.

 * @key_len: Key length to be loaded.

 * @key_type: Type of key: GROUP/PAIRWISE.

 * @key_id: Key index.

 * @cipher: Type of cipher used.

 * @sta_id: Station id.

 * @vif: Pointer to the ieee80211_vif structure.

 *

 * Return: 0 on success, -1 on failure.

/*

 * This function sends the common device configuration parameters to device.

 * This frame includes the useful information to make device works on

 * specific operating mode.

/*

 * rsi_load_bootup_params() - This function send bootup params to the firmware.

 * @common: Pointer to the driver private structure.

 *

 * Return: 0 on success, corresponding error code on failure.

	/**

	 * Bit{0:11} indicates length of the Packet

	 * Bit{12:15} indicates host queue number

/**

 * rsi_send_reset_mac() - This function prepares reset MAC request and sends an

 *			  internal management frame to indicate it to firmware.

 * @common: Pointer to the driver private structure.

 *

 * Return: 0 on success, corresponding error code on failure.

/**

 * rsi_band_check() - This function programs the band

 * @common: Pointer to the driver private structure.

 * @curchan: Pointer to the current channel structure.

 *

 * Return: 0 on success, corresponding error code on failure.

/**

 * rsi_set_channel() - This function programs the channel.

 * @common: Pointer to the driver private structure.

 * @channel: Channel value to be set.

 *

 * Return: 0 on success, corresponding error code on failure.

/**

 * rsi_send_radio_params_update() - This function sends the radio

 *				parameters update to device

 * @common: Pointer to the driver private structure.

 *

 * Return: 0 on success, corresponding error code on failure.

 This function programs the threshold. */

 Beacon miss threshold */

 vap id */

/**

 * rsi_compare() - This function is used to compare two integers

 * @a: pointer to the first integer

 * @b: pointer to the second integer

 *

 * Return: 0 if both are equal, -1 if the first is smaller, else 1

/**

 * rsi_map_rates() - This function is used to map selected rates to hw rates.

 * @rate: The standard rate to be mapped.

 * @offset: Offset that will be returned.

 *

 * Return: 0 if it is a mcs rate, else 1

/**

 * rsi_send_auto_rate_request() - This function is to set rates for connection

 *				  and send autorate request to firmware.

 * @common: Pointer to the driver private structure.

 * @sta: mac80211 station.

 * @sta_id: station id.

 * @vif: Pointer to the ieee80211_vif structure.

 *

 * Return: 0 on success, corresponding error code on failure.

 Limit to any rates administratively configured by cfg80211 */

 mapping the rates to RSI rates */

 loading HT rates in the bottom half of the auto rate table */

/**

 * rsi_inform_bss_status() - This function informs about bss status with the

 *			     help of sta notify params by sending an internal

 *			     management frame to firmware.

 * @common: Pointer to the driver private structure.

 * @opmode: Operating mode of device.

 * @status: Bss status type.

 * @addr: Address of the register.

 * @qos_enable: Qos is enabled.

 * @aid: Aid (unique for all STAs).

 * @sta: mac80211 station.

 * @sta_id: station id.

 * @assoc_cap: capabilities.

 * @vif: Pointer to the ieee80211_vif structure.

 *

 * Return: None.

/**

 * rsi_eeprom_read() - This function sends a frame to read the mac address

 *		       from the eeprom.

 * @common: Pointer to the driver private structure.

 *

 * Return: 0 on success, -1 on failure.

 FrameType */

 Number of bytes to read */

 Address to read */

/**

 * rsi_send_block_unblock_frame() - This function sends a frame to block/unblock

 *                                  data queues in the firmware

 *

 * @common: Pointer to the driver private structure.

 * @block_event: Event block if true, unblock if false

 * returns 0 on success, -1 on failure.

/**

 * rsi_send_rx_filter_frame() - Sends a frame to filter the RX packets

 *

 * @common: Pointer to the driver private structure.

 * @rx_filter_word: Flags of filter packets

 *

 * Returns 0 on success, -1 on failure.

/**

 * rsi_set_antenna() - This function send antenna configuration request

 *		       to device

 *

 * @common: Pointer to the driver private structure.

 * @antenna: bitmap for tx antenna selection

 *

 * Return: 0 on Success, negative error code on failure

/* This function sends the probe request to be used by firmware in

 * background scan

/**

 * rsi_handle_ta_confirm_type() - This function handles the confirm frames.

 * @common: Pointer to the driver private structure.

 * @msg: Pointer to received packet.

 *

 * Return: 0 on success, -1 on failure.

 Get usb buffer status register address */

/**

 * rsi_mgmt_pkt_recv() - This function processes the management packets

 *			 received from the hardware.

 * @common: Pointer to the driver private structure.

 * @msg: Pointer to the received packet.

 *

 * Return: 0 on success, -1 on failure.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl12xx

 *

 * Copyright (C) 2010-2011 Texas Instruments, Inc.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl18xx

 *

 * Copyright (C) 2011 Texas Instruments

 address is 4-bytes aligned */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl18xx

 *

 * Copyright (C) 2012 Texas Instruments. All rights reserved.

 channels_4 are not supported, so no need to copy them */

 scan on the dev role if the regular one is not started */

 configure channels */

	/*

	 * all the cycles params (except total cycles) should

	 * remain 0 for normal scan

 TODO: per-band ies? */

 don't filter on BSS type */

 don't stop scanning automatically when something is found */

 configure channels */

 create a PERIODIC_SCAN_REPORT_EVENT whenever we've got a match */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl18xx

 *

 * Copyright (C) 2011 Texas Instruments Inc.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl18xx

 *

 * Copyright (C) 2009 Nokia Corporation

 * Copyright (C) 2011-2012 Texas Instruments

 valid values: 0/1 */

 CFG80211_CERTIFICATION_ONUS */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl18xx

 *

 * Copyright (C) 2011 Texas Instruments Inc.

/*

 * this command is basically the same as wl1271_acx_ht_capabilities,

 * with the addition of supported rates. they should be unified in

 * the next fw api change

 no need to translate capabilities - use the spec values */

		/*

		 * this bit is not employed by the spec but only by FW to

		 * indicate peer HT support

 get data from A-MPDU parameters field */

/*

 * When the host is suspended, we don't want to get any fast-link/PSM

 * notifications

/*

 * When the host is suspended, we can configure the FW to disable RX BA

 * notifications.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl12xx

 *

 * Copyright (C) 2012 Texas Instruments. All rights reserved.

 event not implemented */

	/*

	 * "TX retries exceeded" has a different meaning according to mode.

	 * In AP mode the offending station is disconnected.

		/* Update RX aggregation window size and call

		 * MAC routine to stop active RX aggregations for this link

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl18xx

 *

 * Copyright (C) 2011 Texas Instruments Inc.

 SGI modifier is counted as a separate rate */

 this also covers the 40Mhz SGI case (= MCS15) */

 adjustment needed for range 0-7 */

 check for id legality */

 a zero bit indicates Tx success */

 update the TX status info */

	/*

	 * first pass info->control.vif while it's valid, and then fill out

	 * the info->status structures

 no data about retries */

	/*

	 * TODO: update sequence number for encryption? seems to be

	 * unsupported for now. needed for recovery with encryption.

 remove private header from packet */

 remove TKIP header space if present */

 return the packet to the stack */

 nothing to do here */

 update rates per link */

 freed Tx descriptors */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl18xx

 *

 * Copyright (C) 2011 Texas Instruments

 phy paramters */

 MCS rates are used only with 11n */

 WL18XX_CONF_HW_RXTX_RATE_MCS15 */

 WL18XX_CONF_HW_RXTX_RATE_MCS14 */

 WL18XX_CONF_HW_RXTX_RATE_MCS13 */

 WL18XX_CONF_HW_RXTX_RATE_MCS12 */

 WL18XX_CONF_HW_RXTX_RATE_MCS11 */

 WL18XX_CONF_HW_RXTX_RATE_MCS10 */

 WL18XX_CONF_HW_RXTX_RATE_MCS9 */

 WL18XX_CONF_HW_RXTX_RATE_MCS8 */

 WL18XX_CONF_HW_RXTX_RATE_MCS7 */

 WL18XX_CONF_HW_RXTX_RATE_MCS6 */

 WL18XX_CONF_HW_RXTX_RATE_MCS5 */

 WL18XX_CONF_HW_RXTX_RATE_MCS4 */

 WL18XX_CONF_HW_RXTX_RATE_MCS3 */

 WL18XX_CONF_HW_RXTX_RATE_MCS2 */

 WL18XX_CONF_HW_RXTX_RATE_MCS1 */

 WL18XX_CONF_HW_RXTX_RATE_MCS0 */

 WL18XX_CONF_HW_RXTX_RATE_54   */

 WL18XX_CONF_HW_RXTX_RATE_48   */

 WL18XX_CONF_HW_RXTX_RATE_36   */

 WL18XX_CONF_HW_RXTX_RATE_24   */

 TI-specific rate */

 WL18XX_CONF_HW_RXTX_RATE_22   */

 WL18XX_CONF_HW_RXTX_RATE_18   */

 WL18XX_CONF_HW_RXTX_RATE_12   */

 WL18XX_CONF_HW_RXTX_RATE_11   */

 WL18XX_CONF_HW_RXTX_RATE_9    */

 WL18XX_CONF_HW_RXTX_RATE_6    */

 WL18XX_CONF_HW_RXTX_RATE_5_5  */

 WL18XX_CONF_HW_RXTX_RATE_2    */

 WL18XX_CONF_HW_RXTX_RATE_1    */

 MCS rates are used only with 11n */

 WL18XX_CONF_HW_RXTX_RATE_MCS15 */

 WL18XX_CONF_HW_RXTX_RATE_MCS14 */

 WL18XX_CONF_HW_RXTX_RATE_MCS13 */

 WL18XX_CONF_HW_RXTX_RATE_MCS12 */

 WL18XX_CONF_HW_RXTX_RATE_MCS11 */

 WL18XX_CONF_HW_RXTX_RATE_MCS10 */

 WL18XX_CONF_HW_RXTX_RATE_MCS9 */

 WL18XX_CONF_HW_RXTX_RATE_MCS8 */

 WL18XX_CONF_HW_RXTX_RATE_MCS7 */

 WL18XX_CONF_HW_RXTX_RATE_MCS6 */

 WL18XX_CONF_HW_RXTX_RATE_MCS5 */

 WL18XX_CONF_HW_RXTX_RATE_MCS4 */

 WL18XX_CONF_HW_RXTX_RATE_MCS3 */

 WL18XX_CONF_HW_RXTX_RATE_MCS2 */

 WL18XX_CONF_HW_RXTX_RATE_MCS1 */

 WL18XX_CONF_HW_RXTX_RATE_MCS0 */

 WL18XX_CONF_HW_RXTX_RATE_54   */

 WL18XX_CONF_HW_RXTX_RATE_48   */

 WL18XX_CONF_HW_RXTX_RATE_36   */

 WL18XX_CONF_HW_RXTX_RATE_24   */

 TI-specific rate */

 WL18XX_CONF_HW_RXTX_RATE_22   */

 WL18XX_CONF_HW_RXTX_RATE_18   */

 WL18XX_CONF_HW_RXTX_RATE_12   */

 WL18XX_CONF_HW_RXTX_RATE_11   */

 WL18XX_CONF_HW_RXTX_RATE_9    */

 WL18XX_CONF_HW_RXTX_RATE_6    */

 WL18XX_CONF_HW_RXTX_RATE_5_5  */

 WL18XX_CONF_HW_RXTX_RATE_2    */

 WL18XX_CONF_HW_RXTX_RATE_1    */

 Configuration Parameters */

 Active Scan Parameters */

 Passive Scan Parameters */

 Passive Scan in Dual Antenna Parameters */

 General Parameters */

 AP Parameters */

 CTS Diluting Parameters */

		/*

		 * Values are in TU/1000 but since sched scan FW command

		 * params are in TUs rounding up may occur.

 based on 250bits per probe @1Mbps */

 based on 250bits per probe @6Mbps (plus a bit more) */

 default */

 default */

 default */

 default */

 default */

 default */

 disabled by default */

 data access memory addresses, used with partition translation */

 raw data access memory addresses */

 TODO: maybe move to a new header file? */

 wl18xx uses the same firmware for PLT */

 there's no separate multi-role FW */

 TODO: PG2: apparently we need to read the clk type */

 coex PLL configuration */

 bypass the swallowing logic */

 first the 16 lower bits */

 then the 16 higher bits, masked out */

 first the 16 lower bits */

 then the 16 higher bits, masked out */

 choose WCS PLL */

 enable both PLLs */

 disable coex PLL */

 reset the swallowing logic */

 disable Rx/Tx */

 disable auto calibration on start*/

 Continue the ELP wake up sequence */

 Disable interrupts */

 TODO: check if this is all needed */

	/*

	 * Workaround for FDSP code RAM corruption (needed for PG2.1

	 * and newer; for older chips it's a NOP).  Change FDSP clock

	 * settings so that it's muxed to the ATGP clock instead of

	 * its own clock.

 disable FDSP clock */

 set ATPG clock toward FDSP Code RAM rather than its own clock */

 re-enable FDSP clock */

 if only the last frame is to be padded, we unset this bit on Tx */

 invalid packet */

 Enable Tx SDIO padding */

 Enable Rx SDIO padding */

 (re)init private structures. Relevant on recovery as well. */

 set the default amount of spare blocks in the bitmap */

 set the dynamic fw traces bitmap */

 FW is interested only in the LSB of the protocol  TCP=0 UDP=1 */

	/* only support MIMO with multiple antennas, and when SISO

	 * is not forced through config

/*

 * TODO: instead of having these two functions to get the rate mask,

 * we should modify the wlvif->rate_set instead

 we don't support MIMO in wide-channel mode */

 sanity check - we don't support this */

		/*

		 * we don't care about HT channel here - if a peer doesn't

		 * support MIMO, we won't enable it in its rates

 apply driver default configuration */

 apply default private configuration */

 calibrator based auto/fem detect not supported for 18xx */

 these are the two parts of the BD_ADDR */

 make sure the string is NULL-terminated */

 If we have keys requiring extra spare, indulge them */

	/*

	 * when adding the first or removing the last GEM/TKIP key,

	 * we have to adjust the number of spare blocks.

 first key */

 last key */

 key is now set, change the spare blocks */

 get the last TX HW descriptor written to the aggr buf */

 the last frame is padded up to an SDIO block */

 no modifications */

 sanity */

 ignore the change before association */

	/*

	 * If we started out as wide, we can change the operation mode. If we

	 * thought this was a 20mhz AP, we have to reconnect

 if we don't have the link map yet, assume they all low prio */

 suspended links are never high priority */

 the priority thresholds are taken from FW */

 if we don't have the link map yet, assume they all low prio */

 HT cap appropriate for wide channels in 2Ghz */

 HT cap appropriate for wide channels in 5Ghz */

 HT cap appropriate for SISO 20 */

 HT cap appropriate for MIMO rates in 20mhz channel */

 If the module param is set, update it in conf */

		/*

		 * Only support mimo with multiple antennas. Fall back to

		 * siso40.

 5Ghz is always wide */

 Enable 11a Band only if we have 5G antennas */

 Terminating Entry */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1251

 *

 * Copyright (C) 2008 Nokia Corporation

 in ms */

 Routines to toggle sleep mode while in ELP */

	/*

	 * FIXME: we should wait for irq from chip but, as a temporary

	 * solution to simplify locking, let's poll instead

 enable beacon filtering */

 disable BET */

 disable beacon filtering */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl12xx

 *

 * Copyright (C) 2008 Nokia Corporation

 FIXME: this is static data nowadays and the table can be removed */

	/* If the address is lower than REGISTERS_BASE, it means that this is

	 * a chip-specific register address, so look it up in the registers

 Make sure we don't go over the table */

/* Set the partitions to access the chip addresses.

 *

 * There are two VIRTUAL partitions (the memory partition and the

 * registers partition), which are mapped to two different areas of the

 * PHYSICAL (hardware) memory.  This function also makes other checks to

 * ensure that the partitions are not overlapping.  In the diagram below, the

 * memory partition comes before the register partition, but the opposite is

 * also supported.

 *

 *                               PHYSICAL address

 *                                     space

 *

 *                                    |    |

 *                                 ...+----+--> mem_start

 *          VIRTUAL address     ...   |    |

 *               space       ...      |    | [PART_0]

 *                        ...         |    |

 * 0x00000000 <--+----+...         ...+----+--> mem_start + mem_size

 *               |    |         ...   |    |

 *               |MEM |      ...      |    |

 *               |    |   ...         |    |

 *  part_size <--+----+...            |    | {unused area)

 *               |    |   ...         |    |

 *               |REG |      ...      |    |

 *  part_size    |    |         ...   |    |

 *      +     <--+----+...         ...+----+--> reg_start

 *  reg_size              ...         |    |

 *                           ...      |    | [PART_1]

 *                              ...   |    |

 *                                 ...+----+--> reg_start + reg_size

 *                                    |    |

 *

	/* Make sure that the two partitions together don't exceed the

		/* Guarantee that the memory partition doesn't overlap the

		/* Guarantee that the register partition doesn't overlap the

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1251

 *

 * Copyright (c) 1998-2007 Texas Instruments Incorporated

 * Copyright (C) 2008 Nokia Corporation

	/*

	 * The rx status timestamp is a 32 bits value while the TSF is a

	 * 64 bits one.

	 * For IBSS merging, TSF is mandatory, so we have to get it

	 * somehow, so we ask for ACX_TSF_INFO.

	 * That could be moved to the get_tsf() hook, but unfortunately,

	 * this one must be atomic, while our SPI routines can sleep.

	/*

	 * FIXME: guessing that snr needs to be divided by two, otherwise

	 * the values don't make any sense

 skip 1 and 12 Mbps because they have same value 0x0a */

 for 1 and 12 Mbps we have to check the modulation */

 CCK -> RATE_1MBPS */

 OFDM -> RATE_12MBPS */

 The actual length doesn't include the target's alignment */

 Toggle buffer ring */

 We first read the frame's header */

 Now we can read the body */

 Finally, we need to ACK the RX */

 SPDX-License-Identifier: GPL-2.0

/**

 * wl1251_cmd_send - Send command to firmware

 *

 * @wl: wl struct

 * @id: command id

 * @buf: buffer containing the command, must work with dma

 * @len: length of the buffer

/**

 * wl1251_cmd_test - Send test command to firmware

 *

 * @wl: wl struct

 * @buf: buffer containing the command, with all headers, must work with dma

 * @buf_len: length of the buffer

 * @answer: is answer needed

		/*

		 * The test command got in, we can read the answer.

		 * The answer would be a wl1251_command, where the

		 * parameter array contains the actual answer.

/**

 * wl1251_cmd_interrogate - Read acx from firmware

 *

 * @wl: wl struct

 * @id: acx id

 * @buf: buffer for the response, including all headers, must work with dma

 * @len: length of buf

 payload length, does not include any headers */

 the interrogate command got in, we can read the answer */

/**

 * wl1251_cmd_configure - Write acx value to firmware

 *

 * @wl: wl struct

 * @id: acx id

 * @buf: buffer containing acx, including all headers, must work with dma

 * @len: length of buf

 payload length, does not include any headers */

 Count and period will be filled by the target */

 Reverse order BSSID */

 1 Mbps */

 the read command got in, we can now read the answer */

	/*

	 * Use high priority scan when not associated to prevent fw issue

	 * causing never-ending scans (sometimes 20+ minutes).

	 * Note: This bug may be caused by the fw's DTIM handling.

 2 Mbps */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1251

 *

 * Copyright (C) 2008 Nokia Corporation

	/* Set WSPI_INIT_COMMAND

	 * the data is being send from the MSB to LSB

	/*

	 * The above is the logical order; it must actually be stored

	 * in the buffer byte-swapped.

 Busy and non busy words read */

 FIXME: check busy words */

	/* This is the only SPI value that we need to set here, the rest

	 * comes from the board-peripherals file

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1251

 *

 * Copyright (C) 2009 Nokia Corporation

 ms */

 debugfs macros idea from mac80211 */

 skipping wep.reserved */

 skipping cont_miss_bcns_spread for now */

 skipping wep.reserved */

 skipping cont_miss_bcns_spread for now */

 skipping wep.reserved */

 skipping cont_miss_bcns_spread for now */

 SPDX-License-Identifier: GPL-2.0

 be careful with the buffer sizes */

	/*

	 * if the firmware version string is exactly

	 * sizeof(rev->fw_version) long or fw_len is less than

	 * sizeof(rev->fw_version) it won't be null terminated

 DF_ENCRYPTION_DISABLE and DF_SNIFF_MODE_ENABLE can be set */

 FIXME: shouldn't this be ACX_DATA_PATH_RESP_PARAMS? */

 FIXME: threshold value not set */

 MAC filtering */

 configure default beacon pass-through rules */

 BT-WLAN coext parameters */

 high event mask is unused */

 configure one default (one-size-fits-all) rate class */

 no-retry rate class */

 memory config */

 RX queue config */

 TX queue config */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1251

 *

 * Copyright (C) 2009 Nokia Corporation

 send empty templates for fw memory reservation */

 tim templates, first reserve space then allocate an empty one */

 disable beacon filtering at this stage */

 we now ask for the firmware built memory map */

 asking for the data path parameters */

 Template settings */

 Default memory configuration */

 Default data path configuration  */

 RX config */

	/* RX_CONFIG_OPTION_ANY_DST_ANY_BSS,

 TX queues config */

 PHY layer config */

 Initialize connection monitoring thresholds */

 Beacon filtering */

 Bluetooth WLAN coexistence */

 Energy detection */

 Beacons and boradcast settings */

 Enable rx data path */

 Enable tx data path */

 Default power state */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wl12xx SDIO routines

 *

 * Copyright (C) 2005 Texas Instruments Incorporated

 * Copyright (C) 2008 Google Inc

 * Copyright (C) 2009 Bob Copeland (me@bobcopeland.com)

 FIXME should be synchronous for sdio */

	/*

	 * The hardware only supports RAW (read after write) access for

	 * reading, regular sdio_readb won't work here (it interprets

	 * the unused bits of CMD52 as write data even if we send read

	 * request).

 Interrupts when using dedicated WLAN_IRQ pin */

 Tell PM core that we don't need the card to be powered now */

 Undo decrement done above in wl1251_probe */

	/*

	 * Tell MMC/SDIO core it's OK to power down the card

	 * (if it isn't already), but not to remove it completely.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1251

 *

 * Copyright (c) 1998-2007 Texas Instruments Incorporated

 * Copyright (C) 2008 Nokia Corporation

 remain in active mode */

 indicate to the stack, that beacons have been lost */

/*

 * Poll the mailbox event field until any of the bits in the mask is set or a

 * timeout occurs (WL1251_EVENT_TIMEOUT in msecs)

 read from both event fields */

 first we read the mbox descriptor */

 process the descriptor */

 then we let the firmware know it can go on...*/

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1251

 *

 * Copyright (c) 1998-2007 Texas Instruments Incorporated

 * Copyright (C) 2008 Nokia Corporation

 data_in_count has wrapped */

 802.11 packets */

 Also disable retry and ACK policy for injected packets */

 RSN + MIC = 8 + 8 = 16 bytes (worst case - AES). */

 We copy the packet to the target */

	/* Revisit. This is a workaround for getting non-aligned packets.

	   This happens at least with EAPOL packets from the user space.

	   Our DMA requires packets to be aligned on a 4-byte boundary.

 check whether the current skb can be used */

 align the buffer on a 4-byte boundary */

 Our skb->data at this point includes the HW header */

 Bumping data in */

 caller must hold wl->mutex */

 Enable tx path in monitor mode for packet injection */

 8 bit status field, one character per bit plus null */

 bit 0 is unused apparently */

	/*

	 * We have to remove our private TX header before pushing

	 * the skb back to mac80211.

 Called upon reception of a TX complete interrupt */

 First we read the result */

 firmware buffer has space, reschedule tx_work */

 tx_queue has space, restart queues */

 Every completed frame needs to be acknowledged */

		/*

		 * If we've wrapped, we have to clear

		 * the results in 2 steps.

 Only 1 write is needed */

 2 writes are needed */

 We have to write the whole array */

 caller must hold wl->mutex */

 TX failure */

 	control->flags = 0; FIXME */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1251

 *

 * Copyright (C) 2008 Nokia Corporation

 perform soft reset */

 SOFT_RESET is self clearing */

			/* 1.2 check pWhalBus->uSelfClearTime if the

 disable Rx/Tx */

 disable auto calibration on start*/

	/*

	 * col #1: INTEGER_DIVIDER

	 * col #2: FRACTIONAL_DIVIDER

	 * col #3: ATTN_BB

	 * col #4: ALPHA_BB

	 * col #5: STOP_TIME_BB

	 * col #6: BB_PLL_LOOP_FILTER

 REF_FREQ_19_2*/

 REF_FREQ_26_0*/

 REF_FREQ_38_4*/

 REF_FREQ_40_0*/

 REF_FREQ_33_6        */

 read NVS params */

 read ELP_CMD */

 set the BB calibration time to be 300 usec (PLL_CAL_TIME) */

	/*

	 * PG 1.2: set the clock buffer time to be 210 usec (CLK_BUF_TIME)

	/*

	 * set the clock detect feature to work in the restart wu procedure

	 * (ELP_CFG_MODE[14]) and Select the clock source type

	 * (ELP_CFG_MODE[13:12])

 PG 1.2: enable the BB PLL fix. Enable the PLL_LIMP_CLK_EN_CMD */

	/* PG 1.2: Set the BB PLL stable time to be 1000usec

 PG 1.2: read clock request time */

	/*

	 * PG 1.2: set the clock request time to be ref_clk_settling_time -

	 * 1ms = 4ms

 set BB PLL configurations in RF AFE */

 set RF_AFE_REG_5 */

 set RF_AFE_CTRL_REG_2 */

	/*

	 * change RF PLL and BB PLL divider for VCO clock and adjust VCO

	 * bais current(RF_AFE_REG_13)

 set BB PLL configurations */

	/* set fractional divider according to Appendix C-BB PLL

	 * Calculations

 set the initial data for the sigma delta */

	/*

	 * set the accumulator attenuation value, calibration loop1

	 * (alpha), calibration loop2 (beta), calibration loop3 (gamma) and

	 * the VCO gain

	/*

	 * set the calibration stop time after holdoff time expires and set

	 * settling time HOLD_OFF_TIME_BB

	/*

	 * set BB PLL Loop filter capacitor3- BB_C3[2:0] and set BB PLL

	 * constant leakage current to linearize PFD to 0uA -

	 * BB_ILOOPF[7:3]

	/*

	 * set regulator output voltage for n divider to

	 * 1.35-BB_REFDIV[1:0], set charge pump current- BB_CPGAIN[4:2],

	 * set BB PLL Loop filter capacitor2- BB_C2[7:5], set gain of BB

	 * PLL auto-call to normal mode- BB_CALGAIN_3DB[8]

 enable restart wakeup sequence (ELP_CMD[0]) */

 restart sequence completed */

 10.5.0 run the firmware (I) */

 10.5.1 run the firmware (II) */

 wait for init to complete */

 check that ACX_INTR_INIT_COMPLETE is enabled */

 get hardware config command mail box */

 get hardware config event mail box */

 set the working partition to its "running" mode offset */

	/*

	 * in case of full asynchronous mode the firmware event must be

	 * ready to receive event from the command mailbox

 enable gpio interrupts */

 Enable target's interrupts */

 firmware startup completed */

 whal_FwCtrl_LoadFwImageSm() */

 10.0 check firmware length and set partition */

 10.1 set partition limit and chunk num */

 10.2 update partition, if needed */

 10.3 upload the chunk */

 need to copy the chunk for dma */

 10.4 upload the last chunk */

 need to copy the chunk for dma */

	/*

	 * Layout before the actual NVS tables:

	 * 1 byte : burst length.

	 * 2 bytes: destination address.

	 * n bytes: data to burst copy.

	 *

	 * This is ended by a 0 length, then the NVS tables.

 We move our pointer to the data */

	/*

	 * We've reached the first zero length, the first NVS table

	 * is 7 bytes further.

 Now we must set the partition correctly */

 And finally we upload the NVS tables */

 halt embedded ARM CPU while loading firmware */

 2. start processing NVS file */

 Wait for EEPROM NVS burst read to complete */

		/* write firmware's last address (ie. it's length) to

 6. read the EEPROM parameters */

 7. read bootdata */

 8. check bootdata and call restart sequence */

 9. NVS processing done */

	/* 10. check that ECPU_CONTROL_HALT bits are set in

	 * pWhalBus->uBootData and start uploading firmware

 10.5 start firmware */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1251

 *

 * Copyright (C) 2008-2009 Nokia Corporation

	/* We don't need a real memory partition here, because we only want

 ELP module wake up */

 whal_FwCtrl_BootSm() */

 0. read chip id from CHIP_ID */

 1. check if chip id is valid */

 We handle a frmware bug here */

	/*

	 * Join command applies filters, and if we are not associated,

	 * BSSID filter must be disabled for association to work.

	/*

	 * The chip specific setup must run before the first TX packet -

	 * before that, the tx_work will not be initialized!

	/*

	 * The workqueue is slow to process the tx_queue and we need stop

	 * the queue here, otherwise the queue will get too long.

 update hw/fw version info in wiphy struct */

 let's notify MAC80211 about the remaining pending TX frames */

 FIXME: not sure what priority to use here */

		/*

		 * Use ENABLE_RX command for channel switching when no

		 * interface is present (monitor mode only).

		 * This leaves the tx path disabled in firmware, whereas

		 * the usual JOIN command seems to transmit some frames

		 * at firmware level.

		/*

		 * mac80211 enables PSM only if we're already associated.

 update multicast filtering parameters */

 no filters which we support changed */

		/*

		 * CFG_MC_FILTER_EN in rx_config needs to be 0 to receive

		 * all multicast frames

 send filters to firmware */

 HW encryption */

 We dont support TX only encryption */

		/*

		 * We get the key in the following form:

		 * TKIP (16 bytes) - TX MIC (8 bytes) - RX MIC (8 bytes)

		 * but the target is expecting:

		 * TKIP - RX MIC - TX MIC

 use defaults when not associated */

 can't be const, mac80211 writes to this */

 can't be const, mac80211 writes to this */

 mac80211 uses units of 32 usec */

 can't be const, mac80211 writes to this */

 EE_CTL_READ clears when data is ready */

 MAC is stored in reverse order */

 length is 2 and data address is 0x546c (ANDed with 0xfffe) */

 MAC is stored in reverse order */

 00:00:20:07:03:09 is in example file wl1251-nvs.bin, so invalid */

 MAC is stored in reverse order */

 The tx descriptor buffer and the TKIP space */

 unit us */

 FIXME: find a proper value */

		/*

		 * In case our MAC address is not correctly set,

		 * we use a random but Nokia MAC.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wlcore

 *

 * Copyright (C) 2014 Texas Instruments. All rights reserved.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1271

 *

 * Copyright (C) 2008-2009 Nokia Corporation

 *

 * Contact: Luciano Coelho <luciano.coelho@nokia.com>

		/*

		 * enable beacon early termination.

		 * Not relevant for 5GHz and for high rates.

 disable beacon early termination */

 filter all frames currently in the low level queues for this hlid */

 do we want to filter all frames from this link's queues? */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1271

 *

 * Copyright (C) 2008-2010 Nokia Corporation

 *

 * Contact: Luciano Coelho <luciano.coelho@nokia.com>

	/*

	 * To translate, first check to which window of addresses the

	 * particular address belongs. Then subtract the starting address

	 * of that window from the address. Then, add offset of the

	 * translated region.

	 *

	 * The translated regions occur next to each other in physical device

	 * memory, so just add the sizes of the preceding address regions to

	 * get the offset to the new region.

/* Set the partitions to access the chip addresses

 *

 * To simplify driver code, a fixed (virtual) memory map is defined for

 * register and memory addresses. Because in the chipset, in different stages

 * of operation, those addresses will move around, an address translation

 * mechanism is required.

 *

 * There are four partitions (three memory and one register partition),

 * which are mapped to two different areas of the hardware memory.

 *

 *                                Virtual address

 *                                     space

 *

 *                                    |    |

 *                                 ...+----+--> mem.start

 *          Physical address    ...   |    |

 *               space       ...      |    | [PART_0]

 *                        ...         |    |

 *  00000000  <--+----+...         ...+----+--> mem.start + mem.size

 *               |    |         ...   |    |

 *               |MEM |      ...      |    |

 *               |    |   ...         |    |

 *  mem.size  <--+----+...            |    | {unused area)

 *               |    |   ...         |    |

 *               |REG |      ...      |    |

 *  mem.size     |    |         ...   |    |

 *      +     <--+----+...         ...+----+--> reg.start

 *  reg.size     |    |   ...         |    |

 *               |MEM2|      ...      |    | [PART_1]

 *               |    |         ...   |    |

 *                                 ...+----+--> reg.start + reg.size

 *                                    |    |

 *

 copy partition info */

	/* wl12xx only: We don't need the size of the last partition,

	 * as it is automatically calculated based on the total memory

	 * size and the sizes of the previous partitions.

	 *

	 * wl18xx re-defines the HW_PART3 addresses for logger over

	 * SDIO support. wl12xx is expecting the write to

	 * HW_PART3_START_ADDR at offset 24. This creates conflict

	 * between the addresses.

	 * In order to fix this the expected value is written to

	 * HW_PART3_SIZE_ADDR instead which is at offset 24 after changes.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1271

 *

 * Copyright (C) 2009-2010 Nokia Corporation

 *

 * Contact: Luciano Coelho <luciano.coelho@nokia.com>

	/*

	 * Rearm the tx watchdog just before idling scan. This

	 * prevents just-finished scans from triggering the watchdog

 restore hardware connection monitoring template */

	/*

	 * count active interfaces according to interface type.

	 * checking only bss_conf.idle is bad for some cases, e.g.

	 * we don't want to count sta in p2p_find as active interface.

 configure dwell times according to scan type */

 if radar is set, we ignore the passive flag */

 pactive channels treated as DFS */

				/*

				 * n_pactive_ch is counted down from the end of

				 * the passive channel list

 802.11j channels are not supported yet */

	/*

	 * cfg80211 should guarantee that we don't get more channels

	 * than what we have registered.

 we assume failure so that timeout scenarios are handled correctly */

 Returns the scan type to be used or a negative value on error */

 count the match sets that contain SSIDs */

 No filter, no ssids or only bcast ssid */

 No filter, with ssids */

 Add all SSIDs from the filters */

 ignore sets without SSIDs */

			/*

			 * Mark all the SSIDs passed in the SSID list as HIDDEN,

			 * so they're used in probe requests.

 Fail if SSID isn't present in the filters */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1271

 *

 * Copyright (C) 2009 Nokia Corporation

 *

 * Contact: Luciano Coelho <luciano.coelho@nokia.com>

/*

 * TODO: this is here just for now, it must be removed when the data

 * operations are in place.

 11n support */

	/*

	* Read the signal level and antenna diversity indication.

	* The msb in the signal level is always set as it is a

	* negative number.

	* The antenna indication is the msb of the rssi.

	/*

	 * FIXME: In wl1251, the SNR should be divided by two.  In wl1271 we

	 * need to divide by two for now, but TI has been discussing about

	 * changing it.  This needs to be rechecked.

	/*

	 * In PLT mode we seem to get frames and mac80211 warns about them,

	 * workaround this by not retrieving them at all.

 the data read starts with the descriptor */

 discard corrupted packets */

 skb length not including rx descriptor */

 reserve the unaligned payload(if any) */

	/*

	 * Copy packets from aggregation buffer to the skbs without rx

	 * descriptor and with packet payload aligned care. In case of unaligned

	 * packets copy the packets in offset of 2 bytes guarantee IP header

	 * payload aligned to 4 bytes.

 update rates per link */

 Read all available packets at once */

 Split data into separate packets */

			/*

			 * the handle data call can only fail in memory-outage

			 * conditions, in that case the received frame will just

			 * be dropped.

	/*

	 * Write the driver's packet counter to the FW. This is only required

	 * for older hardware revisions

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1271

 *

 * Copyright (C) 2009-2010 Nokia Corporation

 *

 * Contact: Luciano Coelho <luciano.coelho@nokia.com>

/*

 * send command to firmware

 *

 * @wl: wl struct

 * @id: command id

 * @buf: buffer containing the command, must work with dma

 * @len: length of the buffer

 * return the cmd status code on success.

	/*

	 * TODO: we just need this because one bit is in a different

	 * place.  Is there any better way?

 read back the status code of the command */

/*

 * send command to fw and return cmd status on success

 * valid_rets contains a bitmap of allowed error codes

 success is always a valid status */

/*

 * wrapper for wlcore_cmd_send that accept only CMD_STATUS_SUCCESS

 * return 0 on success.

/*

 * Poll the mailbox event field until any of the bits in the mask is set or a

 * timeout occurs (WL1271_EVENT_TIMEOUT in msecs)

 read from both event fields */

 get role id */

 these bits are used by op_tx */

	/*

	 * take the last "freed packets" value from the current FW status.

	 * on recovery, we might not have fw_status yet, and

	 * tx_lnk_free_pkts will be NULL. check for it.

	/*

	 * Take saved value for total freed packets from wlvif, in case this is

	 * recovery/resume

 these bits are used by op_tx */

	/*

	 * At this point op_tx() will not add more packets to the queues. We

	 * can purge them.

		/*

		 * save the total freed packets in the wlvif, in case this is

		 * recovery or suspend

		/*

		 * increment the initial seq number on recovery to account for

		 * transmitted packets that we haven't yet got in the FW status

 clear links on error */

	/*

	 * We don't have the correct remote rates in this stage.  The

	 * rates will be reconfigured later, after association, if the

	 * firmware supports ACX_PEER_CAP.  Otherwise, there's nothing

	 * we can do, so use all supported_rates here.

 clear links on error. */

 use this function to stop ibss as well */

 If MESH --> ssid_len is always 0 */

 trying to use hidden SSID with an old hostapd version */

 use the previous security seq, if this is a recovery/resume */

 FIXME: Change when adding DFS */

 By default reset AP TSF */

 take the SSID from the beacon for backward compatibility */

 clear links on error. */

/**

 * wl1271_cmd_test - send test command to firmware

 *

 * @wl: wl struct

 * @buf: buffer containing the command, with all headers, must work with dma

 * @buf_len: length of the buffer

 * @answer: is answer needed

/**

 * wl1271_cmd_interrogate - read acx from firmware

 *

 * @wl: wl struct

 * @id: acx id

 * @buf: buffer for the response, including all headers, must work with dma

 * @cmd_len: length of command

 * @res_len: length of payload

 response payload length, does not include any headers */

/**

 * wlcore_cmd_configure_failsafe - write acx value to firmware

 *

 * @wl: wl struct

 * @id: acx id

 * @buf: buffer containing acx, including all headers, must work with dma

 * @len: length of buf

 * @valid_rets: bitmap of valid cmd status codes (i.e. return values).

 * return the cmd status on success.

 payload length, does not include any headers */

/*

 * wrapper for wlcore_cmd_configure that accepts only success status.

 * return 0 on success

 the channel here is only used for calibration, so hardcoded to 1 */

 during initialization wlvif is NULL */

 llc layer */

 arp header */

 arp payload */

 encryption space */

 QoS header - BE */

 mac80211 header */

 FIXME: not sure what priority to use here */

 hlid might have already been deleted */

		/*

		 * We get the key in the following form:

		 * TKIP (16 bytes) - TX MIC (8 bytes) - RX MIC (8 bytes)

		 * but the target is expecting:

		 * TKIP - RX MIC - TX MIC

/*

 * TODO: merge with sta/ibss into 1 set_key function.

 * note there are slight diffs

		/*

		 * We get the key in the following form:

		 * TKIP (16 bytes) - TX MIC (8 bytes) - RX MIC (8 bytes)

		 * but the target is expecting:

		 * TKIP - RX MIC - TX MIC

 wmm param is valid only for station role */

 We never send a deauth, mac80211 is in charge of this */

	/*

	 * We are ok with a timeout here. The event is sometimes not sent

	 * due to a firmware bug. In case of another error (like SDIO timeout)

	 * queue a recovery.

	/*

	 * map the given band/channel to the respective predefined

	 * bit expected by the fw

 channels 1..14 are mapped to 0..13 */

 channels 8,12,16 are mapped to 18,19,20 */

 channels 34,36..48 are mapped to 21..28 */

 channels 52,56..64 are mapped to 29..32 */

 channels 100,104..140 are mapped to 33..43 */

 channels 149,153..165 are mapped to 44..48 */

	/*

	 * Rearm the tx watchdog when removing the last ROC. This prevents

	 * recoveries due to just finished ROCs - when Tx hasn't yet had

	 * a chance to get out.

 start dev role and roc on its channel */

 the dev role is already started for p2p mgmt interfaces */

 croc dev hlid, and stop the role */

 flush all pending packets */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1271

 *

 * Copyright (C) 2008-2009 Nokia Corporation

 *

 * Contact: Luciano Coelho <luciano.coelho@nokia.com>

 the extra bypass bit is sampled by the TNET as '1' */

 HW limitation: maximum possible chunk size is 4095 bytes */

/*

 * wl18xx driver aggregation buffer size is (13 * 4K) compared to

 * (4 * 4K) for wl12xx, so use the larger buffer needed for wl18xx

 Maximum number of SPI write chunks */

 Power regulator */

	/*

	 * Set WSPI_INIT_COMMAND

	 * the data is being send from the MSB to LSB

	/*

	 * The above is the logical order; it must actually be stored

	 * in the buffer byte-swapped.

	/* Send extra clocks with inverted CS (high). this is required

	 * by the wilink family in order to successfully enter WSPI mode.

 Restore chip select configuration to normal */

	/*

	 * Read further busy words from SPI until a non-busy word is

	 * encountered, then read the data itself into the buffer.

 The SPI bus is unresponsive, the read failed. */

 Busy and non busy words read */

 1 command per chunk */

 SPI write buffers - 2 for each chunk */

	/* The ELP wakeup write may fail the first time due to internal

	 * hardware latency. It is safer to send the wakeup command twice to

	 * avoid unexpected failures.

/**

 * wl12xx_spi_set_power - power on/off the wl12xx unit

 * @child: wl12xx device handle.

 * @enable: true/false to power on/off the unit.

 *

 * use the WiFi enable regulator to enable/disable the WiFi unit.

 Update regulator state */

/*

 * wl12xx_spi_set_block_size

 *

 * This function is not needed for spi mode, but need to be present.

 * Without it defined the wlcore fallback to use the wrong packet

 * allignment on tx.

/**

 * wlcore_probe_of - DT node parsing.

 * @spi: SPI slave device parameters.

 * @glue: wl12xx SPI bus to slave device glue parameters.

 * @pdev_data: wlcore device parameters

 optional clock frequency params */

	/* This is the only SPI value that we need to set here, the rest

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1271

 *

 * Copyright (C) 2009 Nokia Corporation

 *

 * Contact: Luciano Coelho <luciano.coelho@nokia.com>

 ms */

 debugfs macros idea from mac80211 */

	/* In case we're already in PSM, trigger it again to set new timeout

	 * immediately without waiting for re-association

	/* In case we're already in PSM, trigger it again to switch mode

	 * immediately without waiting for re-association

 TODO: ref_clock and tcxo_clock were moved to wl12xx priv */

 for some reason there are different event types for 1 and >1 */

	/*

	 * we don't reconfigure ACX_WAKE_UP_CONDITIONS now, so it will only

	 * take effect on the next time we enter psm.

 for some reason there are different event types for 1 and >1 */

 for some reason there are different event types for 1 and >1 */

	/*

	 * we don't reconfigure ACX_WAKE_UP_CONDITIONS now, so it will only

	 * take effect on the next time we enter psm.

 valid values: 0, 10-100 */

 valid values: 0, 10-100 */

 this will show up on "read" in case we are off */

 only requests of dword-aligned size and offset are supported */

 function should return in reasonable time */

	/*

	 * Don't fail if elp_wakeup returns an error, so the device's memory

	 * could be read even if the FW crashed

 store current partition and switch partition */

 recover partition */

 only requests of dword-aligned size and offset are supported */

 function should return in reasonable time */

	/*

	 * Don't fail if elp_wakeup returns an error, so the device's memory

	 * could be read even if the FW crashed

 store current partition and switch partition */

 recover partition */

 only requests of dword-aligned size and offset are supported */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1271

 *

 * Copyright (C) 2008-2009 Nokia Corporation

 *

 * Contact: Luciano Coelho <luciano.coelho@nokia.com>

 DF_ENCRYPTION_DISABLE and DF_SNIFF_MODE_ENABLE are disabled */

 MAC filtering */

	/*

	 * If the RTS threshold is not configured or out of range, use the

	 * default value.

	/*

	 * When set to zero, and the filter is enabled, beacons

	 * without the unicast TIM bit set are dropped.

 configure default beacon pass-through rules */

 only one vendor specific ie allowed */

			/* for vendor specific rules configure the

 BT-WLAN coext parameters */

 high event mask is unused */

 configure one basic rate class */

 configure one AP supported rate class */

 the AP policy is HW specific */

	/*

	 * configure one rate class for basic p2p operations.

	 * (p2p packets should always go out with OFDM rates, even

	 * if we are currently connected to 11b AP)

	/*

	 * If the fragmentation is not configured or out of range, use the

	 * default value.

 memory config */

 we now ask for the firmware built memory map */

 initialize TX block book keeping */

 no need to translate capabilities - use the spec values */

		/*

		 * this bit is not employed by the spec but only by FW to

		 * indicate peer HT support

 get data from A-MPDU parameters field */

 Configure BA session initiator/receiver parameters setting in the FW. */

 set for the current role */

 setup BA session receiver setting in the FW. */

 sometimes we can't start the session */

		/*

		 * Skip non-changed queues, to avoid redundant acxs.

		 * this check assumes conf.rx_streaming.queues can't

		 * be changed while rx_streaming is enabled.

 Set the global behaviour of RX filters - On/Off + default action */

 Configure or disable a specific RX filter pattern */

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1271

 *

 * Copyright (C) 2009 Nokia Corporation

 *

 * Contact: Luciano Coelho <luciano.coelho@nokia.com>

 send empty templates for fw memory reservation */

	/*

	 * Put very large empty placeholders for all templates. These

	 * reserve memory for later.

 nullfunc->addr1 is filled by FW */

 qosnull->addr1 is filled by FW */

 disable beacon filtering until we get the first beacon */

 generic sta initialization (non vif-specific) */

 PS config */

 FM WLAN coexistence */

 disable the keep-alive feature */

 generic ap initialization (non vif-specific) */

 configure AP sleep, if enabled */

	/*

	 * when operating as AP we want to receive external beacons for

	 * configuring ERP protection.

 use the min basic rate for AP broadcast/multicast */

	/*

	 * If the basic rates contain OFDM rates, use OFDM only

	 * rates for unicast TX as well. Else use all supported rates.

 unconditionally enable HT rates */

 get extra MIMO or wide-chan rates where the HW supports it */

 configure unicast TX rate classes */

 Reset the BA RX indicators */

 BA is supported in STA/AP modes */

 802.11n initiator BA session setting */

 vif-specifc initialization */

 Initialize connection monitoring thresholds */

 Beacon filtering */

 Beacons and broadcast settings */

 Configure rssi/snr averaging weights */

 vif-specific initialization */

 initialize Tx power */

 consider all existing roles before configuring psm. */

 first AP */

 unmask ap events */

 first STA, no APs */

 Configure for power according to debugfs */

 Configure for ELP power saving */

 Mode specific init */

 Default TID/AC configuration */

 Configure HW encryption */

 Mode specific init - post mem init */

 Configure initiator BA sessions policies */

 Chip-specific hw init */

 Init templates */

 Configure the FW logger */

 Bluetooth WLAN coexistence */

 Default memory configuration */

 RX config */

 Configure TX patch complete interrupt behavior */

 RX complete interrupt pacing */

 Energy detection */

 Default fragmentation threshold */

 Enable data path */

 configure PM */

 configure hangover */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wlcore

 *

 * Copyright (C) 2013 Texas Instruments Inc.

 Check if the fwlog is still valid */

 Seeking is not supported - old logs are not kept. Disregard pos. */

 Make room for new messages */

 Create sysfs file to control bt coex state */

 Create sysfs file to get HW PG version */

 Create sysfs file for the FW log */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1271

 *

 * Copyright (C) 2009-2010 Nokia Corporation

 *

 * Contact: Luciano Coelho <luciano.coelho@nokia.com>

	/*

	 * To guarantee that the SDIO card is power cycled, as required to make

	 * the FW programming to succeed, let's do a brute force HW reset.

 Let runtime PM know the card is powered off */

 optional clock frequency params */

 We are only able to handle the wlan function */

 Grab access to FN0 for ELP reg. */

 Use block mode for transferring over one block size of data */

 if sdio can keep power while host is suspended, enable wow */

 Tell PM core that we don't need the card to be powered now */

	/*

	 * Due to a hardware bug, we can't differentiate wl18xx from

	 * wl12xx, because both report the same device ID.  The only

	 * way to differentiate is by checking the SDIO revision,

	 * which is 3.00 on the wl18xx chips.

 Undo decrement done above in wl1271_probe */

	/* Tell MMC/SDIO core it's OK to power down the card

 check whether sdio should keep power */

 keep power while host suspended */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1271

 *

 * Copyright (C) 2008-2009 Nokia Corporation

 *

 * Contact: Luciano Coelho <luciano.coelho@nokia.com>

 Calculate the internal pointer to the fwlog structure */

 Calculate the internal pointers to the start and end of log buffer */

 Read the read pointer and validate it */

 Copy initial part up to the end of ring buffer */

 Copy any remaining part from beginning of ring buffer */

 Update the read pointer */

 TODO: check actual multi-role support */

 find the ap vif connected to this sta */

	/*

	 * We are HW_MONITOR device. On beacon loss - queue

	 * connection loss work. Cancel it on REGAINED event.

 don't attempt roaming in case of p2p */

		/*

		 * if the work is already queued, it should take place.

		 * We don't want to delay the connection loss

		 * indication any more.

 first we read the mbox descriptor */

 process the descriptor */

	/*

	 * TODO: we just need this because one bit is in a different

	 * place.  Is there any better way?

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1271

 *

 * Copyright (C) 2010 Nokia Corporation

 *

 * Contact: Luciano Coelho <luciano.coelho@nokia.com>

 Not in use. Keep to not break ABI */

 Not in use. Keep to not break ABI */

 If we got bip calibration answer print radio status */

 return FEM type */

 We always stop plt after DETECT mode */

 Only SET_PLT_MODE is allowed in case of mode PLT_CHIP_AWAKE */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1271

 *

 * Copyright (C) 2009 Nokia Corporation

 *

 * Contact: Luciano Coelho <luciano.coelho@nokia.com>

/*

 * TODO: this is here just for now, it must be removed when the data

 * operations are in place.

	/*

	 * add the station to the known list before transmitting the

	 * authentication response. this way it won't get de-authed by FW

	 * when transmitting too soon.

	/*

	 * ROC for 1 second on the AP channel for completing the connection.

	 * Note the ROC will be continued by the update_sta_state callbacks

	 * once the station reaches the associated state.

	/*

	 * if in FW PS and there is enough data in FW we can put the link

	 * into high-level PS and clean out its TX queues.

	 * Make an exception if this is the only connected link. In this

	 * case FW-memory congestion is less of a problem.

	 * Note that a single connected STA means 2*ap_count + 1 active links,

	 * since we must account for the global and broadcast AP links

	 * for each AP. The "fw_ps" check assures us the other link is a STA

	 * connected to the AP. Otherwise the FW would not set the PSM bit.

 allocate free identifier for the packet */

		/*

		 * If the FW was empty before, arm the Tx watchdog. Also do

		 * this on the first Tx after resume, as we always cancel the

		 * watchdog on suspend.

 relocate space for security header */

 configure packet life time */

 queue */

		/*

		 * FW expects the dummy packet to have an invalid session id -

		 * any session id that is different than the one set in the join

 configure the tx attributes */

		/*

		 * if the packets are data packets

		 * send them with AP rate policies (EAPOLs are an exception),

		 * otherwise use default basic rates

			/*

			 * send non-data, bcast and EAPOLs using the

			 * min basic rate

 for WEP shared auth - no fw encryption is needed */

 send EAPOL frames as voice */

 caller must hold wl->mutex */

	/*

	 * The length of each packet is stored in terms of

	 * words. Thus, we must pad the skb data to make sure its

	 * length is aligned.  The number of padding bytes is computed

	 * and set in wl1271_tx_fill_hdr.

	 * In special cases, we want to align to a specific block size

	 * (eg. for wl128x with SDIO we align to 256).

 Revert side effects in the dummy packet skb, so it can be reused */

 MCS rates indication are on bits 16 - 31 */

 firmware buffer has space, restart queues */

	/*

	 * Find a non-empty ac where:

	 * 1. There are packets to transmit

	 * 2. The FW has the least allocated blocks

	 *

	 * We prioritize the ACs according to VO>VI>BE>BK

 we found the first non-empty low priority queue */

 start from the link after the last one */

 dequeue according to AC, round robin on each link */

 only consider connected stations */

 continue from last wlvif (round robin) */

 dequeue from the system HLID before the restarting wlvif list */

	/* Do a new pass over the wlvif list. But no need to continue

 no high priority skbs found - but maybe a low priority one? */

 we checked this before */

 ensure proper round robin in the vif/link levels */

 make sure we dequeue the same packet next time */

 enable rx streaming */

/*

 * Returns failure values only in case of failed bus ops within this function.

 * wl1271_prepare_tx_frame retvals won't be returned in order to avoid

 * triggering recovery by higher layers when not necessary.

 * In case a FW command fails within wl1271_prepare_tx_frame fails a recovery

 * will be queued in wl1271_cmd_send. -EAGAIN/-EBUSY from prepare_tx_frame

 * can occur and are legitimate so don't propagate. -EINVAL will emit a WARNING

 * within prepare_tx_frame code but there's nothing we should do about those

 * as well.

			/*

			 * Aggregation buffer is full.

			 * Flush buffer and try again.

			/*

			 * Firmware buffer is full.

			 * Queue back last skb, and stop aggregating.

 No work left, avoid scheduling redundant tx work */

				/*

				 * fw still expects dummy packet,

				 * so re-enqueue it

		/*

		 * Interrupt the firmware with the new packets. This is only

		 * required for older hardware revisions

	/*

	 * TODO: use wl12xx constants when this code is moved to wl12xx, as

	 * only it uses Tx-completion.

	/*

	 * TODO: use wl12xx constants when this code is moved to wl12xx, as

	 * only it uses Tx-completion.

 check for id legality */

 info->control is valid as long as we don't update info->status */

 update the TX status info */

 remove private header from packet */

 remove TKIP header space if present */

 return the packet to the stack */

 Called upon reception of a TX complete interrupt */

 read the tx results from the chipset */

 write host counter to chipset (to ack) */

 verify that the result buffer is not getting overrun */

 process the results */

 process the packet */

 caller must hold wl->mutex and TX must be stopped */

 TX failure */

 this calls wl12xx_free_link */

 caller must hold wl->mutex and TX must be stopped */

 only reset the queues if something bad happened */

	/*

	 * Make sure the driver is at a consistent state, in case this

	 * function is called from a context other than interface removal.

	 * This call will always wake the TX queues.

			/*

			 * Remove private headers before passing the skb to

			 * mac80211

 caller must *NOT* hold wl->mutex */

 only one flush should be in progress, for consistent queue state */

 force Tx and give the driver some time to flush data */

 forcibly flush all Tx buffers on our queues */

 queue should not be stopped for this reason */

 queue should not be clear for this reason */

 mark all possible queues as stopped */

	/* use the global version to make sure all vifs in mac80211 we don't

	 * know are stopped.

 mark all possible queues as awake */

	/* use the global version to make sure all vifs in mac80211 we don't

	 * know are woken up.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1271

 *

 * Copyright (C) 2008-2010 Nokia Corporation

 *

 * Contact: Luciano Coelho <luciano.coelho@nokia.com>

 10.5.0 run the firmware (I) */

 10.5.1 run the firmware (II) */

 make sure the string is NULL-terminated */

 the chip must be exactly equal */

 the firmware type must be equal */

 the project number must be equal */

 the API version must be greater or equal */

 if the API version is equal... */

 ...the minor must be greater or equal */

git.ti.com/wilink8-wlan/wl18xx_fw.git",

 whal_FwCtrl_LoadFwImageSm() */

 10.1 set partition limit and chunk num */

 10.2 update partition, if needed */

 10.3 upload the chunk */

 10.4 upload the last chunk */

		/*

		 * FIXME: the LEGACY NVS image support (NVS's missing the 5GHz

		 * band configurations) can be removed when those NVS files stop

		 * floating around.

 only the first part of the NVS needs to be uploaded */

 only the first part of the NVS needs to be uploaded */

 update current MAC address to NVS */

	/*

	 * Layout before the actual NVS tables:

	 * 1 byte : burst length.

	 * 2 bytes: destination address.

	 * n bytes: data to burst copy.

	 *

	 * This is ended by a 0 length, then the NVS tables.

 FIXME: Do we need to check here whether the LSB is 1? */

		/*

		 * Due to our new wl1271_translate_reg_addr function,

		 * we need to add the register partition start address

		 * to the destination

 We move our pointer to the data */

	/*

	 * We've reached the first zero length, the first NVS table

	 * is located at an aligned offset which is at least 7 bytes further.

	 * NOTE: The wl->nvs->nvs element must be first, in order to

	 * simplify the casting, we assume it is at the beginning of

	 * the wl->nvs structure.

 Now we must set the partition correctly */

 Copy the NVS tables to a new block to ensure alignment */

 And finally we upload the NVS tables */

 Make sure we have the boot partition */

 wait for init to complete */

 check that ACX_INTR_INIT_COMPLETE is enabled */

 get hardware config command mail box */

 get hardware config event mail box */

	/*

	 * in case of full asynchronous mode the firmware event must be

	 * ready to receive event from the command mailbox

 unmask required mbox events  */

 set the working partition to its "running" mode offset */

 firmware startup completed */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wlcore

 *

 * Copyright (C) 2008-2010 Nokia Corporation

 * Copyright (C) 2011-2013 Texas Instruments Inc.

 copy the current dfs region */

 we should hold wl->mutex */

/*

 * this function is being called when the rx_streaming interval

 * has beed changed or rx_streaming should be disabled

 don't reconfigure if rx_streaming is disabled */

 reconfigure/disable according to new streaming_period */

 don't cancel_work_sync since we might deadlock */

 stop it after some time of inactivity */

 wl->mutex must be taken */

 if the watchdog is not armed, don't do anything */

 Tx went out in the meantime - everything is ok */

	/*

	 * if a ROC is in progress, we might not have any Tx for a long

	 * time (e.g. pending Tx on the non-ROC channels)

	/*

	 * if a scan is in progress, we might not have any Tx for a long

	 * time

	/*

	* AP might cache a frame for a long time for a sleeping station,

	* so rearm the timer if there's an AP interface with stations. If

	* Tx is genuinely stuck we will most hopefully discover it when all

	* stations are removed due to inactivity.

	/*

	 * Wake up from high level PS if the STA is asleep with too little

	 * packets in FW or if the STA is awake.

	/*

	 * Start high-level PS if the STA is asleep with enough blocks in FW.

	 * Make an exception if this is the only connected link. In this

	 * case FW-memory congestion is less of a problem.

	 * Note that a single connected STA means 2*ap_count + 1 active links,

	 * since we must account for the global and broadcast AP links

	 * for each AP. The "fw_ps" check assures us the other link is a STA

	 * connected to the AP. Otherwise the FW would not set the PSM bit.

 prevent wrap-around in freed-packets counter */

 prevent wrap-around in freed-packets counter */

 accumulate the prev_freed_pkts counter */

 prevent wrap-around in total blocks counter */

	/*

	 * If the FW freed some blocks:

	 * If we still have allocated blocks - re-arm the timer, Tx is

	 * not stuck. Otherwise, cancel the timer (no Tx currently).

	/*

	 * The FW might change the total number of TX memblocks before

	 * we get a notification about blocks being released. Thus, the

	 * available blocks calculation might yield a temporary result

	 * which is lower than the actual available blocks. Keeping in

	 * mind that only blocks that were allocated can be moved from

	 * TX to RX, tx_blocks_available should never decrease here.

 if more blocks are available now, tx work can be scheduled */

 for AP update num of allocated TX blocks per link and ps status */

 update the host-chipset time offset */

 Pass all received frames to the network stack */

 Return sent skbs to the network stack */

	/*

	 * In case edge triggered interrupt must be used, we cannot iterate

	 * more than once without introducing race conditions with the hardirq.

 restarting the chip. ignore any other interrupt. */

 restarting the chip. ignore any other interrupt. */

 Check if any tx blocks were freed */

				/*

				 * In order to avoid starvation of the TX path,

				 * call the work function directly.

 check for tx results */

 Make sure the deferred queues don't get too long */

 complete the ELP completion */

 don't enqueue a work right now. mark it as pending */

 TX might be handled here, avoid redundant work */

 In case TX was not handled in wlcore_irq_locked(), queue TX work */

 caller must not hold wl->mutex, as it might deadlock */

		/*

		 * we can't call wl12xx_get_vif_count() here because

		 * wl->mutex is taken, so use the cached last_vif_count value

 Avoid a recursive recovery */

 Make sure we have enough room */

 Fill the FW log file, consumed by the sysfs fwlog entry */

	/*

	 * Make sure the chip is awake and the logger isn't active.

	 * Do not send a stop fwlog command if the fw is hanged or if

	 * dbgpins are used (due to some fw bug).

 Traverse the memory blocks linked list */

	/*

	 * increment the initial seq number on recovery to account for

	 * transmitted packets that we haven't yet got in the FW status

 change partitions momentarily so we can read the FW pc */

 Prevent spurious TX during FW restart */

 reboot the chipset */

	/*

	 * Its safe to enable TX now - the queues are stopped after a request

	 * to restart the HW.

 ELP module wake up */

	/*

	 * For wl127x based devices we could use the default block

	 * size (512 bytes), but due to a bug in the sdio driver, we

	 * need to set it explicitly after the chip is powered on.  To

	 * simplify the code and since the performance impact is

	 * negligible, we use the same block size for all different

	 * chip types.

	 *

	 * Check if the bus supports blocksize alignment and, if it

	 * doesn't, make sure we don't have the quirk.

 TODO: make sure the lower driver has set things up correctly */

 Indicate to lower levels that we are now in PLT mode */

 update hw/fw version info in wiphy struct */

	/*

	 * Interrupts must be disabled before setting the state to OFF.

	 * Otherwise, the interrupt handler might be called and exit without

	 * reading the interrupt status.

		/*

		 * This will not necessarily enable interrupts as interrupts

		 * may have been disabled when op_stop was called. It will,

		 * however, balance the above call to disable_interrupts().

	/*

	 * drop the packet if the link is invalid or the queue is stopped

	 * for any reason but watermark. Watermark is a "soft"-stop so we

	 * allow these packets through.

	/*

	 * The workqueue is slow to process the tx_queue and we need stop

	 * the queue here, otherwise the queue will get too long.

	/*

	 * The chip specific setup must run before the first TX packet -

	 * before that, the tx_work will not be initialized!

 no need to queue a new dummy packet if one is already pending */

 The FW is low on RX memory blocks, so send the dummy packet asap */

	/*

	 * If the FW TX is busy, TX work will be scheduled by the threaded

	 * interrupt handler function

/*

 * The size of the dummy packet should be at least 1400 bytes. However, in

 * order to minimize the number of bus transactions, aligning it to 512 bytes

 * boundaries could be beneficial, performance wise

 Dummy packets require the TID to be management */

 Initialize all fields that might be used */

	/*

	 * The pattern is broken up into segments of bytes at different offsets

	 * that need to be checked by the FW filter. Each segment is called

	 * a field in the FW API. We verify that the total number of fields

	 * required for this pattern won't exceed FW limits (8)

	 * as well as the total fields buffer won't exceed the FW limit.

	 * Note that if there's a pattern which crosses Ethernet/IP header

	 * boundary a new field is required.

/*

 * Allocates an RX filter returned through f

 * which needs to be freed using rx_filter_free()

 Validate all incoming patterns before clearing current FW state */

 Translate WoWLAN patterns into filters */

 we want to perform the recovery before suspending */

 disable fast link flow control notifications from FW */

 if filtering is enabled, configure the FW to drop all RX BA frames */

 flush any remaining work */

	/*

	 * Cancel the watchdog even if above tx_flush failed. We will detect

	 * it on resume anyway.

	/*

	 * set suspended flag to avoid triggering a new threaded_irq

	 * work.

	/*

	 * re-enable irq_work enqueuing, and call irq_work directly if

	 * there is a pending work.

 test the recovery flag before calling any SDIO functions */

 don't talk to the HW if recovery is pending */

 if filtering is enabled, configure the FW to drop all RX BA frames */

	/*

	 * Set a flag to re-init the watchdog on the first Tx after resume.

	 * That way we avoid possible conditions where Tx-complete interrupts

	 * fail to arrive and we perform a spurious recovery.

	/*

	 * We have to delay the booting of the hardware because

	 * we need to know the local MAC address before downloading and

	 * initializing the firmware. The MAC address cannot be changed

	 * after boot, and without the proper MAC address, the firmware

	 * will not function properly.

	 *

	 * The MAC address is first known when the corresponding interface

	 * is added. That is where we will initialize the hardware.

	/*

	 * this must be before the cancel_work calls below, so that the work

	 * functions don't perform further work.

	/*

	 * Use the nosync variant to disable interrupts, so the mutex could be

	 * held while doing so without deadlocking.

 let's notify MAC80211 about the remaining pending TX frames */

	/*

	 * In case a recovery was scheduled, interrupts were disabled to avoid

	 * an interrupt storm. Now that the power is down, it is safe to

	 * re-enable interrupts to balance the disable depth

 The system link is always allocated */

	/*

	 * this is performed after the cancel_work calls and the associated

	 * mutex_lock, so that wl1271_op_add_interface does not accidentally

	 * get executed before all these vars have been reset.

	/*

	 * FW channels must be re-calibrated after recovery,

	 * save current Reg-Domain channel configuration and clear it.

 check the channel switch is still ongoing */

 Call mac80211 connection loss */

	/*

	 * Make sure a second really passed since the last auth reply. Maybe

	 * a second auth reply arrived while we were stuck on the mutex.

	 * Check for a little less than the timeout to protect from scheduler

	 * irregularities.

 cancel the ROC if active */

 clear everything but the persistent data */

 init sta/ibss data */

 init ap data */

		/*

		 * TODO: check if basic_rate shouldn't be

		 * wl1271_tx_min_rate_get(wl, wlvif->basic_rate_set);

		 * instead (the same thing for STA above).

 TODO: this seems to be used only for STA, check it */

	/*

	 * mac80211 configures some values globally, while we treat them

	 * per-interface. thus, on init, we have to copy them from wl

		/* Unlocking the mutex in the middle of handling is

		   inherently unsafe. In this case we deem it safe to do,

		   because we need to let any possibly pending IRQ out of

		   the system (and while we are WLCORE_STATE_OFF the IRQ

		   work function will not do anything.) Also, any other

		   possible concurrent operations will fail due to the

 update hw/fw version info in wiphy struct */

	/*

	 * Now we know if 11a is supported (info from the NVS), so disable

	 * 11a channels if not supported

/*

 * Check whether a fw switch (i.e. moving from one loaded

 * fw to another) is needed. This function is also responsible

 * for updating wl->last_vif_count, so it must be called before

 * loading a non-plt fw (so the correct fw (single-role/multi-role)

 * will be used).

 increase the vif count if this is a new vif */

 no need for fw change if the device is OFF */

 no need for fw change if a single fw is used */

/*

 * Enter "forced psm". Make sure the sta is in psm against the ap,

 * to make the fw switch a bit more disconnection-persistent.

 current vif */

 is the current vif among those iterated */

 mark all bits taken by active interfaces */

 the current vif is already running in mac80211 (resume/recovery) */

 interface type might have changed type */

 register hw queues in mac80211 */

 the last places are reserved for cab queues per interface */

	/*

	 * in some very corner case HW recovery scenarios its possible to

	 * get here before __wl1271_op_remove_interface is complete, so

	 * opt out if that is the case.

	/*

	 * TODO: after the nvs issue will be solved, move this block

	 * to start(), and make sure here the driver is ON.

		/*

		 * we still need this in order to configure the fw

		 * while uploading the nvs

	/*

	 * Call runtime PM only after possible wl12xx_init_fw() above

	 * is done. Otherwise we do not have interrupts enabled.

 needed mainly for configuring rate policies */

 because of hardware recovery, we may get here twice */

		/*

		 * Rearm the tx watchdog just before idling scan. This

		 * prevents just-finished scans from triggering the watchdog

 disable active roles */

 clear all hlids (except system_hlid) */

	/*

	 * Last AP, have more stations. Configure sleep auth according to STA.

	 * Don't do thin on unintended recovery.

 mask ap events */

 Configure for power according to debugfs */

 Configure for ELP power saving */

	/*

	 * wl->vif can be null here if someone shuts down the interface

	 * just when hardware recovery has been started.

	/*

	 * One of the side effects of the JOIN command is that is clears

	 * WPA/WPA2 keys from the chipset. Performing a JOIN while associated

	 * to a WPA/WPA2 access point will therefore kill the data-path.

	 * Currently the only valid scenario for JOIN during association

	 * is on roaming, in which case we will also be given new keys.

	 * Keep the below message for now, unless it starts bothering

	 * users who really like to roam a lot :)

 clear encryption type */

 we currently only support setting the ssid from the ap probe req */

	/*

	 * with wl1271, we don't need to update the

	 * beacon_int and dtim_period, because the firmware

	 * updates it by itself when the first beacon is

	 * received after a join.

	/*

	 * Get a template for hardware connection maintenance

 enable the connection monitoring feature */

	/*

	 * The join command disable the keep-alive mode, shut down its process,

	 * and also clear the template config, so we need to reset it all after

	 * the join. The acx_aid starts the keep-alive process, and the order

	 * of the commands below is relevant.

	/*

	 * The default fw psm configuration is AUTO, while mac80211 default

	 * setting is off (ACTIVE), so sync the fw with the correct value.

 make sure we are connected (sta) joined */

 make sure we are joined (ibss) */

 use defaults when not associated */

 free probe-request template */

 disable connection monitor features */

 Disable the keep-alive feature */

 disable beacon filtering */

 invalidate keep-alive template */

 The current firmware only supports sched_scan in idle */

 configure each interface */

 update multicast filtering parameters */

		/*

		 * If interface in AP mode and created with allmulticast then disable

		 * the firmware filters so that all multicast packets are passed

		 * This is mandatory for MDNS based discovery protocols 

	/*

	 * the fw doesn't provide an api to configure the filters. instead,

	 * the filters configuration is based on the active roles / ROC

	 * state.

	/*

	 * Find next free entry in ap_keys. Also check we are not replacing

	 * an existing key.

			/*

			 * We do not support removing keys after AP shutdown.

			 * Pretend we do to make mac80211 happy.

 We dont support TX only encryption */

		/* The wl1271 does not allow to remove unicast keys - they

		   will be cleared automatically on next CMD_JOIN. Ignore the

		   request silently, as we dont want the mac80211 to emit

 don't remove key if hlid was already deleted */

		/*

		 * stop the queues and flush to ensure the next packets are

		 * in sync with FW spare block accounting

		/*

		 * reconfiguring arp response if the unicast (or common)

		 * encryption key type was changed

 we don't handle unsetting of default key */

 the default WEP key needs to be configured at least once */

		/*

		 * We cannot return -EBUSY here because cfg80211 will expect

		 * a call to ieee80211_scan_completed if we do - in this case

		 * there won't be any call.

 fail if there is any role in ROC */

 don't allow scanning right now */

	/*

	 * Rearm the tx watchdog just before idling scan. This

	 * prevents just-finished scans from triggering the watchdog

 no need to change probe response if the SSID is set correctly */

 start searching from IE offset */

 insert SSID from bss_conf */

	/*

	 * In case we already have a probe-resp beacon set explicitly

	 * by usermode, don't use the beacon data.

 remove TIM ie from probe response */

	/*

	 * remove p2p ie from probe response.

	 * the fw reponds to probe requests that don't include

	 * the p2p ie. probe requests with p2p ie will be passed,

	 * and will be responded by the supplicant (the spec

	 * forbids including the p2p ie when responding to probe

	 * requests that didn't include it).

 AP mode changes */

 No need to set probe resp template for mesh */

				/*

				 * AP might be in ROC in case we have just

				 * sent auth reply. handle it.

 Handle HT information change */

 we only support sched_scan while not connected */

 revert back to minimum rates for the current band */

 STA/IBSS mode changes */

 Need to update the SSID (for filtering etc) */

 save the supp_rates of the ap */

 Need to update the BSSID (for filtering etc) */

 by default, use 11b + OFDM rates */

 enable beacon filtering */

 Handle new association with HT. Do this after join. */

 Handle arp filtering. Done after join. */

			/*

			 * The template should have been configured only upon

			 * association. however, it seems that the correct ip

			 * isn't being set (when sending), so we have to

			 * reconfigure the template upon every ip change.

	/*

	 * make sure to cancel pending disconnections if our association

	 * state changed

 start radar if needed */

 update default rates according to the band */

 start radar if needed */

	/*

	 * the txop is confed in units of 32us by the mac80211,

	 * we need us

 use the previous security seq, if this is a recovery/resume */

	/*

	 * save the last used PN in the private part of iee80211_sta,

	 * in case of recovery/suspend

	/*

	 * rearm the tx watchdog when the last STA is freed - give the FW a

	 * chance to return STA-buffered packets before complaining.

/*

 * when wl_sta is NULL, we treat this call as if coming from a

 * pending auth reply.

 * wl->mutex must be taken and the FW must be awake when the call

 * takes place.

 Add station (AP mode) */

 Remove station (AP mode) */

 must not fail */

 Authorize station (AP mode) */

 reconfigure rates */

 Authorize station */

 save seq number on disassoc (suspend) */

 restore seq number on assoc (resume) */

 clear ROCs on failure or authorization */

 sanity check - the fields in FW are only 8bits wide */

			/*

			 * this happens on reconfig - so only output a debug

			 * message for now, and don't fail the function.

	/*

	 * The BA initiator session management in FW independently.

	 * Falling break here on purpose for all TX APDU commands.

 TODO: change mac80211 to pass vif as param */

 indicate failure 5 seconds after channel switch time */

 return EBUSY if we can't ROC right now */

 already completed */

 TODO: per-vif */

	/*

	 * we can't just flush_work here, because it might deadlock

	 * (as we might get called from the same workqueue)

 this callback is atomic, so schedule a new work */

 return in units of Kbps */

 packets are considered pending if in the TX queue or the FW */

 can't be const, mac80211 writes to this */

 can't be const, mac80211 writes to this */

 can't be const, mac80211 writes to this */

 5 GHz data rates for WL1273 */

 5 GHz band channels for WL1273 */

 we may be one address short at the most */

	/*

	 * turn on the LAA bit in the first address and use it as

	 * the last address.

 LAA bit */

		/* NOTE: The wl->nvs->nvs element must be first, in

		 * order to simplify the casting, we assume it is at

		 * the beginning of the wl->nvs structure.

 if the MAC address is zeroed in the NVS derive from fuse */

 fuse has the BD_ADDR, the WLAN addresses are the next two */

 Use TI oui and a random nic */

 fuse has the BD_ADDR, the WLAN addresses are the next two */

 The tx descriptor buffer */

 unit us */

 FIXME: find a proper value */

	/*

	 * Maximum length of elements in scanning probe request templates

	 * should be the maximum length possible for a template, without

	 * the IEEE80211 header of the template

 make sure all our channels fit in the scanned_ch bitmask */

	/*

	* clear channel flags from the previous usage

	* and restore max_power & max_antenna_gain values.

	/*

	 * We keep local copies of the band structs because we need to

	 * modify them on a per-device basis.

	/*

	 * allow 4 queues per mac address we support +

	 * 1 cab queue per mac + one global offchannel Tx queue

 the last queue is the offchannel queue */

 the FW answers probe-requests in AP-mode */

 allowed interface combinations */

 register vendor commands */

	/*

	 * wl->num_links is not configured yet, so just use WLCORE_MAX_LINKS.

	 * we don't allocate any additional resource here, so that's fine.

 The system link is always allocated */

 Allocate one page for the FW log */

 Unblock any fwlog readers */

 adjust some runtime configuration parameters */

 We do not enter elp sleep in PLT mode */

 Nothing to do if no ELP mode requested */

 Nothing to do if no ELP mode requested */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl12xx

 *

 * Copyright (C) 2012 Texas Instruments. All rights reserved.

		    /*

		     * In passive scans, we scan all remaining

		     * channels, even if not marked as such.

		     * In active scans, we only scan channels not

		     * marked as passive.

 Mark the channels we already used */

 skip active scans if we don't have SSIDs */

 scan on the dev role if the regular one is not started */

 channels_4 are not supported, so no need to copy them */

 cycles set to 0 it means infinite (until manually stopped) */

 report APs when at least 1 is found */

 don't stop scanning automatically when something is found */

 don't filter on BSS type */

 currently NL80211 supports only a single interval */

 FIXME: what to do if alloc'ing to stop fails? */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl12xx

 *

 * Copyright (C) 2009-2010 Nokia Corporation

 * Copyright (C) 2011 Texas Instruments Inc.

 If we started in PLT FEM_DETECT mode, force auto detect */

 Override the REF CLK from the NVS with the one from platform data */

 If we are in calibrator based fem auto detect - save fem nr */

 If we started in PLT FEM_DETECT mode, force auto detect */

 Replace REF and TCXO CLKs with the ones from platform data */

 If we are in calibrator based fem auto detect - save fem nr */

 2.4GHz parameters */

 5GHz parameters */

 2.4GHz parameters */

 5GHz parameters */

 FIXME: control from mac80211 in the future */

 Enable TX on the target channel */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl12xx

 *

 * Copyright (C) 2009 Nokia Corporation

 * Copyright (C) 2011-2012 Texas Instruments

 skipping wep.reserved */

 skipping cont_miss_bcns_spread for now */

 skipping wep.reserved */

 skipping cont_miss_bcns_spread for now */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl12xx

 *

 * Copyright (C) 2008-2009 Nokia Corporation

 * Copyright (C) 2011 Texas Instruments Inc.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl12xx

 *

 * Copyright (C) 2012 Texas Instruments. All rights reserved.

 event not implemented */

	/*

	 * "TX retries exceeded" has a different meaning according to mode.

	 * In AP mode the offending station is disconnected.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of wl1271

 *

 * Copyright (C) 2008-2010 Nokia Corporation

 active scan params */

 passive scan params */

 passive scan in dual antenna params */

 general params */

 AP params */

 CTS Diluting params */

		/*

		 * Values are in TU/1000 but since sched scan FW command

		 * params are in TUs rounding up may occur.

 based on 250bits per probe @1Mbps */

 based on 250bits per probe @6Mbps (plus a bit more) */

	/*

	 * Memory config for wl127x chips is given in the

	 * wl12xx_default_priv_conf struct. The below configuration is

	 * for wl128x chips.

 default */

 default */

 default */

 default */

 default */

 default */

 MCS rates are used only with 11n */

 WL12XX_CONF_HW_RXTX_RATE_MCS7_SGI */

 WL12XX_CONF_HW_RXTX_RATE_MCS7 */

 WL12XX_CONF_HW_RXTX_RATE_MCS6 */

 WL12XX_CONF_HW_RXTX_RATE_MCS5 */

 WL12XX_CONF_HW_RXTX_RATE_MCS4 */

 WL12XX_CONF_HW_RXTX_RATE_MCS3 */

 WL12XX_CONF_HW_RXTX_RATE_MCS2 */

 WL12XX_CONF_HW_RXTX_RATE_MCS1 */

 WL12XX_CONF_HW_RXTX_RATE_MCS0 */

 WL12XX_CONF_HW_RXTX_RATE_54   */

 WL12XX_CONF_HW_RXTX_RATE_48   */

 WL12XX_CONF_HW_RXTX_RATE_36   */

 WL12XX_CONF_HW_RXTX_RATE_24   */

 TI-specific rate */

 WL12XX_CONF_HW_RXTX_RATE_22   */

 WL12XX_CONF_HW_RXTX_RATE_18   */

 WL12XX_CONF_HW_RXTX_RATE_12   */

 WL12XX_CONF_HW_RXTX_RATE_11   */

 WL12XX_CONF_HW_RXTX_RATE_9    */

 WL12XX_CONF_HW_RXTX_RATE_6    */

 WL12XX_CONF_HW_RXTX_RATE_5_5  */

 WL12XX_CONF_HW_RXTX_RATE_2    */

 WL12XX_CONF_HW_RXTX_RATE_1    */

 MCS rates are used only with 11n */

 WL12XX_CONF_HW_RXTX_RATE_MCS7_SGI */

 WL12XX_CONF_HW_RXTX_RATE_MCS7 */

 WL12XX_CONF_HW_RXTX_RATE_MCS6 */

 WL12XX_CONF_HW_RXTX_RATE_MCS5 */

 WL12XX_CONF_HW_RXTX_RATE_MCS4 */

 WL12XX_CONF_HW_RXTX_RATE_MCS3 */

 WL12XX_CONF_HW_RXTX_RATE_MCS2 */

 WL12XX_CONF_HW_RXTX_RATE_MCS1 */

 WL12XX_CONF_HW_RXTX_RATE_MCS0 */

 WL12XX_CONF_HW_RXTX_RATE_54   */

 WL12XX_CONF_HW_RXTX_RATE_48   */

 WL12XX_CONF_HW_RXTX_RATE_36   */

 WL12XX_CONF_HW_RXTX_RATE_24   */

 TI-specific rate */

 WL12XX_CONF_HW_RXTX_RATE_22   */

 WL12XX_CONF_HW_RXTX_RATE_18   */

 WL12XX_CONF_HW_RXTX_RATE_12   */

 WL12XX_CONF_HW_RXTX_RATE_11   */

 WL12XX_CONF_HW_RXTX_RATE_9    */

 WL12XX_CONF_HW_RXTX_RATE_6    */

 WL12XX_CONF_HW_RXTX_RATE_5_5  */

 WL12XX_CONF_HW_RXTX_RATE_2    */

 WL12XX_CONF_HW_RXTX_RATE_1    */

	[PART_BOOT] = { /* in wl12xx we can use a mix of work and down

 data access memory addresses, used with partition translation */

 raw data access memory addresses */

 TODO: maybe move to a new header file? */

		/*

		 * Choose the block we want to read

		 * For aggregated packets, only the first memory block

		 * should be retrieved. The FW takes care of the rest.

 read data preparation is only needed by wl127x */

 read data preparation is only needed by wl127x */

 wl128x requires TX blocksize alignment */

 common settings */

 write address >> 1 + 0x30000 to OCP_POR_CTR */

 write value to OCP_POR_WDATA */

 write 1 to OCP_CMD */

 write address >> 1 + 0x30000 to OCP_POR_CTR */

 write 2 to OCP_CMD */

 poll for data ready */

 check data status and return if OK */

 Mask bits [2] & [8:4] in the sys_clk_cfg register */

 Enable FREF_CLK_REQ & mux MCS and coex PLLs to FREF */

 Delay execution for 15msec, to let the HW settle */

 Mask bits [3:1] in the sys_clk_cfg register */

 Handle special cases of the TCXO clock */

 Set the input frequency according to the selected clock source */

/*

 * WL128x has two clocks input - TCXO and FREF.

 * TCXO is the main clock of the device, while FREF is used to sync

 * between the GPS and the cellular modem.

 * In cases where TCXO is 32.736MHz or 16.368MHz, the FREF will be used

 * as the WLAN/BT main clock.

 For XTAL-only modes, FREF will be used after switching from TCXO */

 Query the HW, to determine which clock source we should use */

 If TCXO is either 32.736MHz or 16.368MHz, switch to FREF */

 TCXO clock is selected */

 FREF clock is selected */

 ref clk: 19.2/38.4/38.4-XTAL */

 ref clk: 26/52 */

 Set clock type (open drain) */

 Set clock pull mode (no pull) */

 Set clock polarity */

 perform soft reset */

 SOFT_RESET is self clearing */

			/* 1.2 check pWhalBus->uSelfClearTime if the

 disable Rx/Tx */

 disable auto calibration on start*/

 Continue the ELP wake up sequence */

	/* Read-modify-write DRPW_SCRATCH_START register (see next state)

	   to be used by DRPw FW. The RTRIM value will be added by the FW

 Disable interrupts */

	/* write firmware's last address (ie. it's length) to

 6. read the EEPROM parameters */

	/* WL1271: The reference driver skips steps 7 to 10 (jumps directly

 polarity must be set before the firmware is loaded */

 We use HIGH polarity, so unset the LOW bit */

 calculate number of padding bytes */

 Store the aligned length in terms of words */

 invalid packet */

		/*

		 * If we are in calibrator based auto detect then we got the FEM nr

		 * in wl->fem_manuf. No need to continue further

 Enable SDIO padding */

 Must be before wl1271_acx_init_mem_config() */

		/*

		 * If we are in calibrator based auto detect then we got the FEM nr

		 * in wl->fem_manuf. No need to continue further

 apply driver default configuration */

 apply default private configuration */

 in wl128x we have the MAC address if the PG is >= (2, 1) */

 in wl127x we have the MAC address if the PG is >= (3, 1) */

 Device may be in ELP from the bootloader or kexec */

 these are the two parts of the BD_ADDR */

	/*

	 * If we are in calibrator based auto detect then we got the FEM nr

	 * in wl->fem_manuf. No need to continue further

 Enable data path */

 Configure for CAM power saving (ie. always active) */

 configure PM */

	/* Unlocking the mutex in the middle of handling is

	   inherently unsafe. In this case we deem it safe to do,

	   because we need to let any possibly pending IRQ out of

	   the system (and while we are WL1271_STATE_OFF the IRQ

	   work function will not do anything.) Also, any other

	   possible concurrent operations will fail due to the

 any link is good for low priority */

 Terminating Entry */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Mac80211 power management API for ST-Ericsson CW1200 drivers

 *

 * Copyright (c) 2011, ST-Ericsson

 * Author: Dmitry Tarnyagin <dmitry.tarnyagin@lockless.no>

 Up to 4 filters are allowed. */

 Up to 4 filters are allowed. */

 DHCP Bootps */

 DHCP Bootpc */

 private */

 XXX what's the point of this ? */

 Timer is pending */

 Do not suspend when datapath is not idle */

 Make sure there is no configuration requests in progress. */

	/* Ensure pending operations are done.

	 * Note also that wow_suspend must return in ~2.5sec, before

	 * watchdog is triggered.

 Do not suspend when join is pending */

 Do not suspend when scanning */

 Lock TX. */

	/* Wait to avoid possible race with bh code.

	 * But do not wait too long...

 Set UDP filter */

 Set ethernet frame type filter */

 Allocate state */

 Change to legacy PS while going to suspend */

 Store delayed work states. */

 Enable beacon skipping */

 Stop serving thread */

 Store suspend state */

 Enable IRQ wake */

 Force resume if event is coming from the device. */

 Disable IRQ wake */

	/* Scan.lock must be released before BH is resumed other way

	 * in case when BSS_LOST command arrived the processing of the

	 * command will be delayed.

 Resume BH thread */

 Restores previous PS mode */

 Resume delayed work */

 Remove UDP port filter */

 Remove ethernet frame type filter */

 Unlock datapath */

 Unlock configuration mutex */

 Free memory */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Device handling thread implementation for mac80211 ST-Ericsson CW1200 drivers

 *

 * Copyright (c) 2010, ST-Ericsson

 * Author: Dmitry Tarnyagin <dmitry.tarnyagin@lockless.no>

 *

 * Based on:

 * ST-Ericsson UMAC CW1200 driver, which is

 * Copyright (c) 2010, ST-Ericsson

 * Author: Ajitpal Singh <ajitpal.singh@stericsson.com>

/* an SPI message cannot be bigger than (2"12-1)*2 bytes

 * "*2" to cvt to bytes

 Suspend state privates */

 Realtime workqueue */

 Disable Interrupts! */

 NOTE:  hwbus_ops->lock already held */

 WARN_ON */(priv->bh_error))

 First, set the dpll register */

 To force the device to be always-on, the host sets WLAN_UP to 1 */

	/* If the device returns WLAN_RDY as 1, the device is active and will

	 * remain active.

 Must be called from BH thraed. */

 No more work */

	/* Add SIZE of PIGGYBACK reg (CONTROL Reg)

	 * to the NEXT Message length + 2 Bytes for SKB

 Check if not exceeding CW1200 capabilities */

 Piggyback */

 cw1200_wsm_rx takes care on SKB livetime */

 Error in wakeup */

 Woke up */

 Did not awake */

 Error */

 No work */

 Check if not exceeding CW1200 capabilities */

 Error */

 Work remains */

 Interrupt loss detection */

 Dummy Read for SDIO retry mechanism*/

 Did an error occur? */

 wait_event timed out */

 Check to see if we have any outstanding frames */

 Get a timestamp of "oldest" frame */

				/* Check if frame transmission is timed out.

				 * Add an extra second with respect to possible

				 * interrupt loss.

 And terminate BH thread if the frame is "stuck" */

 Don't bother trying to rx unless we have data to read */

 Double up here if there's more data.. */

				/* Buffers full.  Ensure we process tx

				 * after we handle rx..

 More to transmit */

 Re-read ctrl reg */

 Re-enable device interrupts */

 Explicitly disable device interrupts */

 TODO: schedule_work(recovery) */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Scan implementation for ST-Ericsson CW1200 mac80211 drivers

 *

 * Copyright (c) 2010, ST-Ericsson

 * Author: Dmitry Tarnyagin <dmitry.tarnyagin@lockless.no>

 Scan when P2P_GO corrupt firmware MiniAP mode */

 will be unlocked in cw1200_scan_work() */

 Host want to be the probe responder. */

		/* Firmware gets crazy if scan request is sent

		 * when STA is joined but not yet associated.

		 * Force unjoin in this case.

			/* FW bug: driver has to restart p2p-dev mode

			 * after scan

 TODO: Is it optimal? */

		/* It is not stated in WSM specification, however

		 * FW team says that driver may not use FG scan

		 * when joined.

 FW bug: driver has to restart p2p-dev mode after scan. */

 STA is stopped. */

 STA is stopped. */

 Scan is already in progress. Requeue self. */

 Make sure we still have a pending probe req */

			/* Remove SSID from the IE list. It has to be provided

			 * as a separate argument in cw1200_scan_start call

 Store SSID localy */

 Remove SSID from IE list */

 FW bug: driver has to restart p2p-dev mode after scan */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Mac80211 STA API for ST-Ericsson CW1200 drivers

 *

 * Copyright (c) 2010, ST-Ericsson

 * Author: Dmitry Tarnyagin <dmitry.tarnyagin@lockless.no>

 ******************************************************************** */

 STA API								*/

 default EDCA */

 Scan is in progress. Force it to stop. */

 HACK! */

 for recovery to work */

 If we have a pending unjoin */

 Skip the confimration procedure in P2P case */

 XXX Should we just keep going until we time out? */

 Bypass mitigation if it's disabled */

 Spit out a NULL packet to our AP if necessary */

 __le32 auto_calibration_mode = __cpu_to_le32(1); */

 Enable auto-calibration */

	/* Exception in subsequent channel switch; disabled.

	 *  wsm_write_mib(priv, WSM_MIB_ID_SET_AUTO_CALIBRATION_MODE,

	 *      &auto_calibration_mode, sizeof(auto_calibration_mode));

 TODO: IEEE80211_CONF_CHANGE_QOS */

 TODO: IEEE80211_CONF_CHANGE_LISTEN_INTERVAL */

 __cw1200_flush() implicitly locks tx, if successful */

 Already unlocks if successful */

 Unlock if switch channel fails */

		/* Firmware requires that value for this 1-byte field must

		 * be specified in units of 500us. Values above the 128ms

		 * threshold are not supported.

		/* TBD: It looks like it's transparent

		 * there's a monitor interface present -- use this

		 * to determine for example whether to calculate

		 * timestamps for packets or not, do not use instead

		 * of filter flags!

 Disable p2p-dev mode forced by TX request */

	/* When acting as p2p client being connected to p2p GO, in order to

	 * receive frames from a different p2p device, turn off bssid filter.

	 *

	 * WARNING: FW dependency!

	 * This can only be used with FW WSM371 and its successors.

	 * In that FW version even with bssid filter turned off,

	 * device will block most of the unwanted frames.

 Disable multicast filtering */

 Enable if requested */

 To prevent re-applying PM request OID again and again*/

 disabled */

 mutex_lock(&priv->conf_mutex); */

 mutex_unlock(&priv->conf_mutex); */

 If successful, LOCKS the TX queue! */

		/* TODO: correct flush handling is required when dev_stop.

		 * Temporary workaround: 2s

 Highly unlikely: WSM requeued frames. */

 ******************************************************************** */

 WSM callbacks							*/

				/* Scan is in progress. Delay reporting.

				 * Scan complete will trigger bss_loss_work

 Also start a watchdog. */

			/* RSSI: signed Q8.0, RCPI: unsigned Q7.1

			 * RSSI = RCPI / 2 - 110

 ******************************************************************** */

 Internal API								*/

/* This function is called to Parse the SDD file

 * to extract listen_interval and PTA related information

 * sdd is a TLV: u8 id, u8 len, u8 data[]

 non-zero means this is enabled */

	/* NOTE: There is a bug in FW: it reports signal

	 * as RSSI if RSSI subscription is enabled.

	 * It's not enough to set WSM_RCPI_RSSI_USE_RSSI.

	 *

	 * NOTE2: RSSI based reports have been switched to RCPI, since

	 * FW has a bug and RSSI reported values are not stable,

	 * what can lead to signal level oscilations in user-end applications

	/* Remember the decission here to make sure, we will handle

	 * the RCPI/RSSI value correctly on WSM_EVENT_RCPI_RSS

 Configure RSSI/SCPI reporting as RSSI. */

 Clearing the lock held before do_join() */

 MUST be called with tx_lock held!  It will be unlocked for us. */

	/* Under the conf lock: check scan status and

	 * bail out if it is in progress.

 Sanity check basic rates */

 Sanity check beacon interval */

 BT Coex related changes */

 Enable asynchronous join calls */

 Stay Awake for Join and Auth Timeouts and a bit more */

 Turn on Block ACKs */

 Set up timeout */

 802.11w protected mgmt frames */

 Perform actual join */

 Tx lock still held, unjoin will clear it. */

 Will clear tx_lock */

 Upload keys */

		/* Due to beacon filtering it is possible that the

		 * AP's beacon is not known for the mac80211 stack.

		 * Disable filtering temporary to make sure the stack

		 * receives at least one

 Unjoin is a reset. */

 Disable Block ACKs */

 Tell the stack we're dead */

	/* Here's the mapping AC [queue, bit]

	 *  VO [0,3], VI [1, 2], BE [2, 1], BK [3, 0]

	/* Currently pseudo U-APSD operation is not supported, so setting

	 * MinAutoTriggerInterval, MaxAutoTriggerInterval and

	 * AutoTriggerStep to 0

 ******************************************************************** */

 AP API								*/

 Zero link id means "for all link IDs" */

		/* Ignore DTIM count from mac80211:

		 * firmware handles DTIM internally.

 Set/reset aid0 bit */

 Plumb PSPOLL and NULL template */

 STATION mode */

 G or BG mode */

 B only mode */

 P2P mode */

 TODO: BSS_CHANGED_QOS */

 TODO: BSS_CHANGED_TXPOWER */

		/* Currently only one IP address is supported by firmware.

		 * In case of more IPs arp filtering will be disabled.

 assoc/disassoc, or maybe AID changed */

 Non Greenfield stations present */

 Set HT protection method */

			/* TODO:

			 * STBC_param.dual_cts

			 *  STBC_param.LSIG_TXOP_FILL

 sec */);

 ERP Protection */

 ERP Slottime */

 RSSI subscription enabled */

			/* TODO: It's not a correct way of setting threshold.

			 * Upper and lower must be set equal here and adjusted

			 * in callback. However current implementation is much

			 * more relaible and stable.

			/* RSSI: signed Q8.0, RCPI: unsigned Q7.1

			 * RSSI = RCPI / 2 - 110

			/* There is a bug in FW, see sta.c. We have to enable

			 * dummy subscription to get correct RSSI values.

 Will unlock it for us */

	/* Aggregation is implemented fully in firmware,

	 * including block ack negotiation. Do not allow

	 * mac80211 stack to do anything: it interferes with

	 * the firmware.

 Note that we still need this function stubbed. */

 ******************************************************************** */

 WSM callback								*/

			/* Firmware sends this indication every DTIM if there

			 * is a STA in powersave connected. There is no reason

			 * to suspend, following wakeup will consume much more

			 * power than it could be saved.

 ******************************************************************** */

 AP privates								*/

	/* TODO: Distill probe resp; remove TIM

	 * and any other beacon-specific IEs

	/* TODO:  This needs to be implemented



	struct wsm_template_frame frame = {

		.frame_type = WSM_FRAME_TYPE_QOS_NULL,

		.rate = 0xFF,

	};



	frame.skb = ieee80211_qosnullfunc_get(priv->hw, priv->vif);

	if (!frame.skb)

		return -ENOMEM;



	ret = wsm_set_template_frame(priv, &frame);



	dev_kfree_skb(frame.skb);



 TODO: check if changed channel, band */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Datapath implementation for ST-Ericsson CW1200 mac80211 drivers

 *

 * Copyright (c) 2010, ST-Ericsson

 * Author: Dmitry Tarnyagin <dmitry.tarnyagin@lockless.no>

 ******************************************************************** */

 TX queue lock / unlock						*/

 ******************************************************************** */

 TX policy cache implementation					*/

 [out] */ struct tx_policy *policy,

 Sort rates in descending order. */

 Eliminate duplicates. */

	/* Re-fill policy trying to keep every requested rate and with

	 * respect to the global max tx retransmission count.

	/* HACK!!! Device has problems (at least) switching from

	 * 54Mbps CTS to 1Mbps. This switch takes enormous amount

	 * of time (100-200 ms), leading to valuable throughput drop.

	 * As a workaround, additional g-rates are injected to the

	 * policy.

 Decrease number of retries for the initial rate */

 Keep fallback rate at 1Mbps. */

 Inject 1 transmission on lowest g-rate */

 Inject 1 transmission on mid-rate */

			/* Fallback to 1 Mbps is a really bad thing,

			 * so let's try to increase probability of

			 * successful transmission on the lowest g rate

			 * even more

 Adjust amount of rates defined */

 Keep fallback rate at 1Mbps. */

 Inject 2 transmissions on lowest g-rate */

 Adjust amount of rates defined */

 eq. rateid / 8 */

 eq. (rateid % 8) * 4 */

	/* O(n) complexity. Not so good, but there's only 8 entries in

	 * the cache.

	 * Also lru helps to reduce search time.

 First search for policy in "used" list */

 Then - in "free list" */

		/* Policy usage count should be 0 at this time as all queues

		   should be empty

 ******************************************************************** */

 External TX policy cache API						*/

		/* If policy is not found create a new one

		 * using the oldest entry in "free" list

 Lock TX queues. */

 Unlock TX queues. */

 Upload only modified entries. */

 ******************************************************************** */

 cw1200 TX implementation						*/

 MIC space */

 Add WSM header */

 BT Coex specific handling */

 Skip LLC SNAP header (+6) */

			/* Replace listen interval derieved from

			 * the one read from SDD

		/* It's not so optimal to stop TX queues every now and then.

		 * Better to reimplement task scheduling with

		 * a counter. TODO.

 ******************************************************************** */

 ******************************************************************** */

 Filter block ACK negotiation: fully controlled by firmware */

 Do not report pspols if data for given link id is queued already. */

 ******************************************************************** */

 STA is stopped. */

 "Requeue" means "implicit suspend" */

 Recovery failed */

 Recovery succeeded */

				/* Do not report aggregation to mac80211:

				 * it confuses minstrel a lot.

 tx->flags |= IEEE80211_TX_STAT_AMPDU; */

 Pull off any crypto trailers that we added on */

 MIC space */

 XXX TODO:  Only wake if there are pending transmits.. */

 STA is stopped. */

		/* Link ID already exists for the ACTION frame.

		 * Reset and Remap

		/* Oops... There is no fast way to ask mac80211 about

		 * IV/ICV lengths. Even defineas are not exposed.

 WEP_IV_LEN */;

 WEP_ICV_LEN */;

 TKIP_IV_LEN */;

 TKIP_ICV_LEN */

MICHAEL_MIC_LEN*/;

 CCMP_HDR_LEN */;

 CCMP_MIC_LEN */;

 WAPI_HDR_LEN */;

 WAPI_MIC_LEN */;

 Firmware strips ICV in case of MIC failure. */

 Remove IV, ICV and MIC */

 Remove TSF from the end of frame */

 Disable beacon filter once we're associated... */

	/* Stay awake after frame is received to give

	 * userspace chance to react and acquire appropriate

	 * wakelock.

 Double-check status with lock held */

 TODO: update failure counters */

 ******************************************************************** */

 Security								*/

 Workaround for WFD test case 6.1.10 */

 In GO mode we can receive ACTION frames without a linkID */

 Make sure we execute the WQ */

 Release the link ID */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Firmware I/O code for mac80211 ST-Ericsson CW1200 drivers

 *

 * Copyright (c) 2010, ST-Ericsson

 * Author: Dmitry Tarnyagin <dmitry.tarnyagin@lockless.no>

 *

 * Based on:

 * ST-Ericsson UMAC CW1200 driver which is

 * Copyright (c) 2010, ST-Ericsson

 * Author: Ajitpal Singh <ajitpal.singh@stericsson.com>

 CW1x00 */

 CW1x60 */

 Macroses are local. */

 Initialize common registers */

 Write the NOP Instruction */

 Release CPU from RESET */

 Enable Clock */

 Load a firmware file */

 Check if the bootloader is ready */

 End of for loop */

 Calculcate number of download blocks */

 Updating the length in Download Ctrl Area */

 Explicit cast from size_t to u32 */

 Firmware downloading loop */

 check the download status */

 loop until put - get <= 24K */

 calculate the block size */

 send the block to sram */

 update the put register */

 End of firmware download loop */

 Wait for the download completion */

 Read CONFIG Register */

 Set DPLL Reg value, and read back to confirm writes work */

 Set wakeup bit in device */

 Wait for wakeup */

 CW1200 Hardware detection logic : Check for CUT1.1 */

		/* According to ST-E, CUT<2.0 has busted BA TID0-3.

		   Just disable it entirely...

 Checking for access mode */

 Enable interrupt signalling */

 Configure device for MESSSAGE MODE */

	/* Unless we read the CONFIG Register we are

	 * not able to get an interrupt

 Disable interrupt signalling */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Mac80211 SDIO driver for ST-Ericsson CW1200 device

 *

 * Copyright (c) 2010, ST-Ericsson

 * Author: Dmitry Tarnyagin <dmitry.tarnyagin@lockless.no>

 Default platform data for Sagrad modules */

 Allow platform data to be overridden */

 end: all zeroes */			},

 hwbus_ops implemetation */

 note:  sdio_host already claimed here. */

 Master interrupt enable ... */

 ... for our function */

 Request the IRQ */

 Min is 2 * CLK32K cycles */

 Ensure I/Os are pulled low */

 Settle time? */

 Enable 3v3 and 1v8 to hardware */

 Enable CLK32K */

 Delay until clock is stable for 2 cycles */

 Enable POWERUP signal */

 or more..? */

 Enable RSTn signal */

 Or more..? */

 Probe Function to be called by SDIO stack when device is discovered */

 We are only able to handle the wlan function */

 FIXME */

/* Disconnect Function to be called by SDIO stack when

 * device is disconnected

 Notify SDIO that CW1200 will remain powered during suspend */

 Init Module function -> Called by insmod */

 FIXME -- this won't support multiple devices */

 Called at Driver Unloading */

 FIXME -- this won't support multiple devices */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * mac80211 glue code for mac80211 ST-Ericsson CW1200 drivers

 * DebugFS code

 *

 * Copyright (c) 2010, ST-Ericsson

 * Author: Dmitry Tarnyagin <dmitry.tarnyagin@lockless.no>

 join_status */

 WSM_JOIN_PREAMBLE_... */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * O(1) TX queue with built-in allocator for ST-Ericsson CW1200 drivers

 *

 * Copyright (c) 2010, ST-Ericsson

 * Author: Dmitry Tarnyagin <dmitry.tarnyagin@lockless.no>

 private */ struct cw1200_queue_item

		/* TX may happen in parallel sometimes.

		 * Leave extra queue slots so we don't overflow.

		/* Do not use list_move_tail here, but list_move:

		 * try to utilize cache row.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * WSM host interface (HI) implementation for

 * ST-Ericsson CW1200 mac80211 drivers.

 *

 * Copyright (c) 2010, ST-Ericsson

 * Author: Dmitry Tarnyagin <dmitry.tarnyagin@lockless.no>

 With respect to interrupt loss */

 2 sec. timeout was observed.   */

 ******************************************************************** */

 WSM API implementation						*/

 DPD block. */

 DPD version */

 DPD flags */

 ******************************************************************** */

 ******************************************************************** */

 ******************************************************************** */

 OperationalMode: update PM status. */

 ******************************************************************** */

 ******************************************************************** */

 We already released one buffer, now for the rest */

 ******************************************************************** */

 TODO:  Update state based on resp.min|max_power_level */

 ******************************************************************** */

 ******************************************************************** */

 ******************************************************************** */

 ******************************************************************** */

 ******************************************************************** */

 Implemented according to specification. */

 ******************************************************************** */

 ******************************************************************** */

 ******************************************************************** */

 ******************************************************************** */

 ******************************************************************** */

 ******************************************************************** */

 ******************************************************************** */

 ******************************************************************** */

 ******************************************************************** */

 ******************************************************************** */

 WSM indication events implementation					*/

 Do not trust FW too much... */

 Disable unsupported frequency bands */

	/* FW Workaround: Drop probe resp or

	   beacon when RSSI is 0

	/* If no RSSI subscription has been made,

	 * convert RCPI to RSSI here

 Shedule unjoin work */

 STA is stopped. */

 TODO:  Check buf (struct wsm_set_pm_complete) for validity */

 ******************************************************************** */

 WSM TX								*/

 Don't bother if we're dead. */

 Block until the cmd buffer is completed.  Tortuous. */

	/* Due to buggy SPI on CW1200, we need to

	 * pad the message by a few bytes to ensure

	 * that it's completely received.

 Fill HI message header */

 BH will add sequence number */

 Wait for command completion */

 Return ok to help system cleanup */

 Kill BH thread to report the error to the top layer. */

 ******************************************************************** */

 WSM TX port control							*/

 Flush must be called with TX lock held. */

	/* First check if we really need to do something.

	 * It is safe to use unprotected access, as hw_bufs_used

	 * can only decrements.

 In case of failure do not wait for magic. */

 Get a timestamp of "oldest" frame */

 If there's nothing pending, we're good */

 Hmmm... Not good. Frame had stuck in firmware. */

 Ok, everything is flushed. */

 ******************************************************************** */

 WSM RX								*/

 Strip link id. */

		/* Do not trust FW too much. Protection against repeated

		 * response and race condition removal (see above).

 Note that any non-zero is a fatal retcode. */

		/* Note that wsm_arg can be NULL in case of timeout in

		 * wsm_cmd_send().

 set_tx_queue_params */

 start_find */

 stop_find */

 update_ie */

 map_link */

 often 0x407 and 0x410 occur, this means we're dead.. */

 Error response from device should ne stop BH. */

			/* HACK!!! WSM324 firmware has tendency to requeue

			 * multicast frames in a loop, causing performance

			 * drop and high power consumption of the driver.

			 * In this situation it is better just to drop

			 * the problematic frame.

 TODO:  Test me! */

		/* An interesting FW "feature". Device filters probe responses.

		 * The easiest way to get it back is to convert

		 * probe request into WSM start_scan command.

 Do nothing */

 search for a winner using edca params */

 override winner if bursting */

 Search for a queue with multicast frames buffered */

 Search for unicast traffic */

 More is used only for broadcasts. */

 CMD request */

 Handled by WSM */

 allow bursting if txop is set */

 store index of bursting queue */

				/* more buffered multicast/broadcast frames

				 *  ==> set MoreData flag in IEEE 802.11 header

				 *  to inform PS STAs

 ******************************************************************** */

 WSM buffer								*/

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Low-level device IO routines for ST-Ericsson CW1200 drivers

 *

 * Copyright (c) 2010, ST-Ericsson

 * Author: Dmitry Tarnyagin <dmitry.tarnyagin@lockless.no>

 *

 * Based on:

 * ST-Ericsson UMAC CW1200 driver, which is

 * Copyright (c) 2010, ST-Ericsson

 * Author: Ajitpal Singh <ajitpal.singh@lockless.no>

 Sdio addr is 4*spi_addr */

 Check if buffer is aligned to 4 byte boundary */

 Convert to SDIO Register Address */

 Convert to SDIO Register Address */

 Write address */

 Read CONFIG Register Value - We will read 32 bits */

 Set PREFETCH bit */

 Check for PRE-FETCH bit to be cleared */

 Read data port */

 Write address */

 Write data port */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Mac80211 SPI driver for ST-Ericsson CW1200 device

 *

 * Copyright (c) 2011, Sagrad Inc.

 * Author:  Solomon Peachy <speachy@sagrad.com>

 *

 * Based on cw1200_sdio.c

 * Copyright (c) 2010, ST-Ericsson

 * Author: Dmitry Tarnyagin <dmitry.tarnyagin@lockless.no>

 #define SPI_DEBUG */

 Serialize all bus operations */

 usage: and operation */

 usage: or operation */

/* Notes on byte ordering:

   LE:  B0 B1 B2 B3

   BE:  B3 B2 B1 B0



   Hardware expects 32-bit data to be written as 16-bit BE words:



   B1 B0 B3 B2

 Header is LE16 */

	/* We have to byteswap if the SPI bus is limited to 8b operation

	   or we are running on a Big Endian system

	/* We have to byteswap if the SPI bus is limited to 8b operation

	   or we are running on a Big Endian system

 Header is LE16 */

	/* We have to byteswap if the SPI bus is limited to 8b operation

	   or we are running on a Big Endian system

 We have to byteswap if the SPI bus is limited to 8b operation */

 Min is 2 * CLK32K cycles */

 Ensure I/Os are pulled low */

 Settle time? */

 Enable 3v3 and 1v8 to hardware */

 Enable CLK32K */

 Delay until clock is stable for 2 cycles */

 Enable POWERUP signal */

 or more..? */

 Enable RSTn signal */

 Or more..? */

 Probe Function to be called by SPI stack when device is discovered */

 Sanity check speed */

 Fix up transfer size */

 And finally.. */

 Disconnect Function to be called by SPI stack when device is disconnected */

 XXX notify host that we have to keep CW1200 powered on? */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * mac80211 glue code for mac80211 ST-Ericsson CW1200 drivers

 *

 * Copyright (c) 2010, ST-Ericsson

 * Author: Dmitry Tarnyagin <dmitry.tarnyagin@lockless.no>

 *

 * Based on:

 * Copyright (c) 2006, Michael Wu <flamingice@sourmilk.net>

 * Copyright (c) 2007-2009, Christian Lamparter <chunkeey@web.de>

 * Copyright 2008, Johannes Berg <johannes@sipsolutions.net>

 *

 * Based on:

 * - the islsm (softmac prism54) driver, which is:

 *   Copyright 2004-2006 Jean-Baptiste Note <jbnote@gmail.com>, et al.

 * - stlc45xx driver

 *   Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies).

 Accept MAC address of the form macaddr=0x00,0x80,0xE1,0x30,0x40,0x50 */

 VO */

 VI */

 BE */

 BK */

 Intentionally not offloaded:					*/

.channel_switch	= cw1200_channel_switch,		*/

.remain_on_channel	= cw1200_remain_on_channel,		*/

.cancel_remain_on_channel = cw1200_cancel_remain_on_channel,	*/

 Support only for limited wowlan functionalities */

 TODO: fetch from FW */

 Enable RX BLKACK for all TIDs */

 Enable TX BLKACK for all TIDs */

 TKIP IV */

 Channel params have to be cleared before registering wiphy again */

 Fix up mac address if necessary */

 Clock is in KHz */

 13000 KHz */

 16000 KHz */

 16800 KHz */

 19200 KHz */

 24000 KHz */

 26000 KHz */

 33600 KHz */

 38400 KHz */

 40000 KHz */

 48000 KHz */

 52000 KHz */

 Pass struct cw1200_common back up */

		/* TODO: Need to find how to reset device

		   in QUEUE mode properly.

 Set low-power mode. */

 Enable multi-TX confirmation */

 Disable device interrupts */

 And then clean up */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Generic PPP layer for Linux.

 *

 * Copyright 1999-2002 Paul Mackerras.

 *

 * The generic PPP layer handles the PPP network interfaces, the

 * /dev/ppp device, packet and VJ compression, and multilink.

 * It talks to PPP `channels' via the interface defined in

 * include/linux/ppp_channel.h.  Channels provide the basic means for

 * sending and receiving PPP frames on some kind of communications

 * channel.

 *

 * Part of the code in this driver was inspired by the old async-only

 * PPP driver, written by Michael Callahan and Al Longyear, and

 * subsequently hacked by Paul Mackerras.

 *

 * ==FILEVERSION 20041108==

/*

 * Network protocols we support.

 Internet Protocol V4 */

 Internet Protocol V6 */

 IPX protocol */

 Appletalk protocol */

 MPLS unicast */

 MPLS multicast */

 Number of NPs. */

 multilink protocol header length */

 ditto with short sequence numbers */

/*

 * An instance of /dev/ppp can be associated with either a ppp

 * interface unit or a ppp channel.  In both cases, file->private_data

 * points to one of these.

 pppd transmit queue */

 receive queue for pppd */

 for poll on reading /dev/ppp */

 # refs (incl /dev/ppp attached) */

 space to leave for headers */

 interface unit / channel number */

 unit/channel has been shut down */

/*

 * Data structure to hold primary network stats for which

 * we want to use 64 bit storage.  Other network stats

 * are stored in dev->stats of the ppp strucute.

/*

 * Data structure describing one ppp unit.

 * A ppp unit corresponds to a ppp network interface device

 * and represents a multilink bundle.

 * It can have 0 or more ppp channels connected to it.

 stuff for read/write/poll 0 */

 file that owns this unit 48 */

 list of attached channels 4c */

 how many channels are attached 54 */

 lock for receive side 58 */

 lock for transmit side 5c */

 xmit recursion detect */

 max receive unit 60 */

 control bits 64 */

 transmit state bits 68 */

 receive state bits 6c */

 debug flags 70 */

 state for VJ header compression */

 what to do with each net proto 78 */

 a packet ready to go out 88 */

 transmit packet compressor 8c */

 its internal state 90 */

 receive decompressor 94 */

 its internal state 98 */

 jiffies when last pkt sent 9c */

 jiffies when last pkt rcvd a0 */

 network interface device a4 */

 is device closing down? a8 */

 next channel to send something on */

 next sequence number to send */

 MP: max reconst. receive unit */

 MP: seq no of next packet */

 MP: min of most recent seqnos */

 MP: receive reconstruction queue */

 CONFIG_PPP_MULTILINK */

 filter for packets to pass */

 filter for pkts to reset idle */

 CONFIG_PPP_FILTER */

 the net we belong to */

 64 bit network stats */

/*

 * Bits in flags: SC_NO_TCP_CCID, SC_CCP_OPEN, SC_CCP_UP, SC_LOOP_TRAFFIC,

 * SC_MULTILINK, SC_MP_SHORTSEQ, SC_MP_XSHORTSEQ, SC_COMP_TCP, SC_REJ_COMP_TCP,

 * SC_MUST_COMP

 * Bits in rstate: SC_DECOMP_RUN, SC_DC_ERROR, SC_DC_FERROR.

 * Bits in xstate: SC_COMP_RUN

/*

 * Private data structure for each channel.

 * This includes the data structure used for multilink.

 stuff for read/write/poll */

 link in all/new_channels list */

 public channel data structure */

 protects `chan' during chan ioctl */

 protects `chan', file.xq dequeue */

 ppp unit we're connected to */

 the net channel belongs to */

 link in list of channels per unit */

 protects `ppp' and 'bridge' */

 "bridged" ppp channel */

 flag used in multilink stuff */

 >= 1 fragments have been sent */

 MP: last sequence # received */

 speed of the corresponding ppp channel*/

 CONFIG_PPP_MULTILINK */

/*

 * SMP locking issues:

 * Both the ppp.rlock and ppp.wlock locks protect the ppp.channels

 * list and the ppp.n_channels field, you need to take both locks

 * before you modify them.

 * The lock ordering is: channel.upl -> ppp.wlock -> ppp.rlock ->

 * channel.downl.

 per-net private data for this module */

 units to ppp mapping */

	/*

	 * all_ppp_mutex protects the units_idr mapping.

	 * It also ensures that finding a ppp unit in the units_idr

	 * map and updating its file.refcnt field is atomic.

 channels */

	/*

	 * all_channels_lock protects all_channels and

	 * last_channel_index, and the atomicity of find

	 * a channel and updating its file.refcnt field.

 Get the PPP protocol number from a skb */

 We limit the length of ppp->file.rq to this (arbitrary) value */

/*

 * Maximum number of multilink fragments queued up.

 * This has to be large enough to cope with the maximum latency of

 * the slowest channel relative to the others.  Strictly it should

 * depend on the number of channels and their characteristics.

 Multilink header bits. */

 this fragment begins a packet */

 this fragment ends a packet */

 Compare multilink sequence numbers (assumed to be 32 bits wide) */

 Prototypes. */

 CONFIG_PPP_MULTILINK */

 per net-namespace data */

 Translates a PPP protocol number to a NP index (NP == network protocol) */

 Translates an NP index into a PPP protocol number */

 Translates an ethertype into an NP index */

 Translates an NP index into an ethertype */

/*

 * Locking shorthand.

/*

 * /dev/ppp device routines.

 * The /dev/ppp device is used by pppd to control the ppp unit.

 * It supports the read, write, ioctl and poll functions.

 * Open instances of /dev/ppp can be in one of three states:

 * unattached, attached to a ppp unit, or attached to a ppp channel.

	/*

	 * This could (should?) be enforced by the permissions on /dev/ppp.

			/*

			 * Return 0 (EOF) on an interface that has no

			 * channels connected, unless it is looping

			 * network traffic (demand mode).

 No kernel lock - fine */

 see comment in ppp_read */

 uprog->len is unsigned short, so no overflow here */

/* Bridge one PPP channel to another.

 * When two channels are bridged, ppp_input on one channel is redirected to

 * the other's ops->start_xmit handler.

 * In order to safely bridge channels we must reject channels which are already

 * part of a bridge instance, or which form part of an existing unit.

 * Once successfully bridged, each channel holds a reference on the other

 * to prevent it being freed while the bridge is extant.

 Re-read pch->bridge with upl held in case it was modified concurrently */

	/* Only modify pchb if phcb->bridge points back to pch.

	 * If not, it implies that there has been a race unbridging (and possibly

	 * even rebridging) pchb.  We should leave pchb alone to avoid either a

	 * refcount underflow, or breaking another established bridge instance.

		/*

		 * PPPIOCDETACH is no longer supported as it was heavily broken,

		 * and is only known to have been used by pppd older than

		 * ppp-2.4.2 (released November 2003).

			/* Hold a reference to prevent pchb being freed while

			 * we establish the bridge.

 Drop earlier refcount now bridge establishment is complete */

 can't happen */

 we may be able to transmit more packets now (??) */

 CONFIG_PPP_FILTER */

 CONFIG_PPP_MULTILINK */

 CONFIG_PPP_FILTER */

 all other commands have compatible arguments */

 Create a new ppp unit */

 Attach to an existing ppp unit */

 Skip devices already unregistered by previous loop */

		/* Caller asked for a specific unit number. Fail with -EEXIST

		 * if unavailable. For backward compatibility, return -EEXIST

		 * too if idr allocation fails; this makes pppd retry without

		 * requesting a specific unit number.

 Rewrite error for backward compatibility */

 don't count proto bytes */

 CONFIG_PPP_MULTILINK */

 CONFIG_PPP_FILTER */

	/* rtnl_lock is already held here, but ppp_create_interface() locks

	 * ppp_mutex before holding rtnl_lock. Using mutex_trylock() avoids

	 * possible deadlock due to lock order inversion, at the cost of

	 * pushing the problem back to userspace.

	/* Don't use device name generated by the rtnetlink layer when ifname

	 * isn't specified. Let ppp_dev_configure() set the device name using

	 * the PPP unit identifer as suffix (i.e. ppp<unit_id>). This allows

	 * userspace to infer the device name using to the PPPIOCGUNIT ioctl.

/* Called at boot time if ppp is compiled into the kernel,

 not a big deal if we fail here :-) */

/*

 * Network interface unit routines.

 Drop, accept or reject the packet */

		/* it would be nice to have a way to tell the network

	/* Put the 2-byte PPP protocol number on the front,

	/* Let the netdevice take a reference on the ppp file. This ensures

	 * that ppp_destroy_interface() won't run before the device gets

	 * unregistered.

/*

 * Transmit-side routines.

 Called to do any work queued up on the transmit side that can now be done */

		/* If there's no work left to do, tell the core net

 compressor still expects A/C bytes in hdr */

 pull off A/C bytes */

 didn't compress, or CCP not up yet */

		/*

		 * (len < 0)

		 * MPPE requires that we do not send unencrypted

		 * frames.  The compressor will return -1 if we

		 * should drop the frame.  We cannot simply test

		 * the compress_proto because MPPE and MPPC share

		 * the same number.

/*

 * Compress and send a frame.

 * The caller should have locked the xmit path,

 * and xmit_pending should be 0.

 check if we should pass this packet */

		/* the filter instructions are constructed assuming

 if this packet passes the active filter, record the time */

 for data packets, record the time */

 CONFIG_PPP_FILTER */

 try to do VJ TCP header compression */

 didn't compress */

 peek at outbound CCP frames */

 try to do packet compression */

	/*

	 * If we are waiting for traffic (demand dialling),

	 * queue it up for pppd to receive.

/*

 * Try to send the frame in xmit_pending.

 * The caller should have the xmit path locked.

 nowhere to send the packet, just drop it */

 not doing multilink: send it down the first channel */

 channel got unregistered */

	/* Multilink: fragment the packet over as many links

 CONFIG_PPP_MULTILINK */

/*

 * Divide a packet to be transmitted into fragments and

 * send them out the individual links.

total bitrate of the bundle*/

 # channels which have no packet already queued */

 total # of usable channels (not deregistered) */

 number of channels with zero speed associated*/

	totfree = 0; /*total # of channels available and

				  *having no queued packets before

	/*

	 * Don't start sending this packet unless at least half of

	 * the channels are free.  This gives much better TCP

	 * performance if we have a lot of channels.

 can't take now, leave it in xmit_pending */

 Do protocol field compression */

	/* skip to the channel after the one we last used

 create a fragment for each channel */

		/*

		 * Skip this channel if it has a fragment pending already and

		 * we haven't given a fragment to all of the free channels.

 check the channel's mtu and whether it is still attached. */

 can't use this channel, it's being deregistered */

		/*

		*if the channel speed is not set divide

		*the packet evenly among the free channels;

		*otherwise divide it according to the speed

		*of the channel we are going to transmit on

		/*

		 *check if we are on the last channel or

		 *we exceded the length of the data to

		 *fragment

		/*

		 *it is not worth to tx on slow channels:

		 *in that case from the resulting flen according to the

		 *above formula will be equal or less than zero.

		 *Skip the channel in this case

		/*

		 * hdrlen includes the 2-byte PPP protocol field, but the

		 * MTU counts only the payload excluding the protocol field.

		 * (RFC1661 Section 2)

 make the MP header */

 try to send it down the channel */

 abandon the frame */

 CONFIG_PPP_MULTILINK */

 Try to send data out on a channel */

 put the packet back and try again later */

 channel got deregistered */

 see if there is anything from the attached unit to be sent */

/*

 * Receive-side routines.

/**

 * __ppp_decompress_proto - Decompress protocol field, slim version.

 * @skb: Socket buffer where protocol field should be decompressed. It must have

 *	 at least 1 byte of head room and 1 byte of linear data. First byte of

 *	 data must be a protocol field byte.

 *

 * Decompress protocol field in PPP header if it's compressed, e.g. when

 * Protocol-Field-Compression (PFC) was negotiated. No checks w.r.t. skb data

 * length are done in this function.

/**

 * ppp_decompress_proto - Check skb data room and decompress protocol field.

 * @skb: Socket buffer where protocol field should be decompressed. First byte

 *	 of data must be a protocol field byte.

 *

 * Decompress protocol field in PPP header if it's compressed, e.g. when

 * Protocol-Field-Compression (PFC) was negotiated. This function also makes

 * sure that skb data room is sufficient for Protocol field, before and after

 * decompression.

 *

 * Return: true - decompressed successfully, false - not enough room in skb.

 At least one byte should be present (if protocol is compressed) */

 Protocol field should occupy 2 bytes when not compressed */

/* Attempt to handle a frame via. a bridged channel, if one exists.

 * If the channel is bridged, the frame is consumed by the bridge.

 * If not, the caller must handle the frame by normal recv mechanisms.

 * Returns true if the frame is consumed, false otherwise.

 channel got unregistered */

 If pchb is set then we've consumed the packet */

 If the channel is bridged, transmit via. bridge */

 put it on the channel queue */

 drop old frames if queue too long */

 Put a 0-length skb in the receive queue as an error indication */

 probably unnecessary */

/*

 * We come in here to process a received frame.

 * The receive side of the ppp unit is locked.

 note: a 0-length skb is used as an error indication */

 XXX do channel-level decompression here */

 CONFIG_PPP_MULTILINK */

	/*

	 * Decompress the frame, if compressed.

	 * Note that some decompressors need to see uncompressed frames

	 * that come in as well as compressed frames.

	/* At this point the "Protocol" field MUST be decompressed, either in

	 * ppp_input(), ppp_decompress_frame() or in ppp_receive_mp_frame().

 decompress VJ compressed packets */

 copy to a new sk_buff with more tailroom */

		/* Until we fix the decompressor need to make sure

		 * data portion is linear.

 control or unknown frame - pass it to pppd */

 limit queue length by dropping old frames */

 wake up any process polling or blocking on read */

 network protocol frame - give it to the kernel */

 check if the packet passes the pass and active filters */

		/* the filter instructions are constructed assuming

 CONFIG_PPP_FILTER */

 chop off protocol */

	/* Until we fix all the decompressor's need to make sure

	 * data portion is linear.

 the decompressor still expects the A/C bytes in the hdr */

			/* Pass the compressed frame to pppd as an

 pull off the A/C bytes */

		/* Don't call __ppp_decompress_proto() here, but instead rely on

		 * corresponding algo (mppe/bsd/deflate) to decompress it.

		/* Uncompressed frame - pass to decompressor so it

/*

 * Receive a multilink frame.

 * We put it on the reconstruction queue and then pull off

 * as many completed frames as we can.

 no good, throw it away */

 Decode sequence number and begin/end bits */

 pull off PPP and MP headers */

	/*

	 * Do protocol ID decompression on the first fragment of each packet.

	 * We have to do that here, because ppp_receive_nonmp_frame() expects

	 * decompressed protocol field.

	/*

	 * Expand sequence number to 32 bits, making it as close

	 * as possible to ppp->minseq.

 should never happen */

	/*

	 * If this packet comes before the next one we were expecting,

	 * drop it.

	/*

	 * Reevaluate minseq, the minimum over all channels of the

	 * last sequence number received on each channel.  Because of

	 * the increasing sequence number rule, we know that any fragment

	 * before `minseq' which hasn't arrived is never going to arrive.

	 * The list of channels can't change because we have the receive

	 * side of the ppp unit locked.

 Put the fragment on the reconstruction queue */

	/* If the queue is getting long, don't wait any longer for packets

 Pull completed packets off the queue and receive them. */

/*

 * Insert a fragment on the MP reconstruction queue.

 * The queue is ordered by increasing sequence number.

	/* N.B. we don't need to lock the list lock because we have the

/*

 * Reconstruct a packet from the MP fragment queue.

 * We go through increasing sequence numbers until we find a

 * complete packet, or we get to the sequence number for a fragment

 * which hasn't arrived but might still do so.

 do nothing until mrru is set */

 this can't happen, anyway ignore the skb */

			/* Fragment `seq' is missing.  If it is after

 Fragment `seq' is lost, keep going. */

		/*

		 * At this point we know that all the fragments from

		 * ppp->nextseq to seq are either present or lost.

		 * Also, there are no complete packets in the queue

		 * that have no missing fragments and end before this

		 * fragment.

 B bit set indicates this fragment starts a packet */

 Got a complete packet yet? */

		/*

		 * If this is the ending fragment of a packet,

		 * and we haven't found a complete valid packet yet,

		 * we can discard up to and including this fragment.

 If we have a complete packet, copy it all into one skb. */

		/* If we have discarded any fragments,

 CONFIG_PPP_MULTILINK */

/*

 * Channel interface.

 Create a new, unattached ppp channel. */

 Create a new, unattached ppp channel for specified net. */

 CONFIG_PPP_MULTILINK */

/*

 * Return the index of a channel.

/*

 * Return the PPP unit number to which a channel is connected.

/*

 * Return the PPP device interface name of a channel.

/*

 * Disconnect a channel from the generic layer.

 * This must be called in process context.

 should never happen */

	/*

	 * This ensures that we have returned from any calls into the

	 * the channel's start_xmit or ioctl routine before we proceed.

/*

 * Callback from a channel when it can accept more to transmit.

 * This should be called at BH/softirq level, not interrupt level.

/*

 * Compression control.

 Process the PPPIOCSCOMPRESS ioctl. */

/*

 * Look at a CCP packet and update our state accordingly.

 * We assume the caller has the xmit or recv path locked.

 no header */

		/* A ConfReq starts negotiation of compression

		 * in one direction of transmission,

		 * and hence brings it down...but which way?

		 *

		 * Remember:

		 * A ConfReq indicates what the sender would like to receive

 He is proposing what I should send */

 I am proposing to what he should send */

		/*

		 * CCP is going down, both directions of transmission

 too short */

 we will start receiving compressed packets */

 we will soon start sending compressed packets */

 reset the [de]compressor */

 Free up compression resources. */

 List of compressors. */

 Register a compressor */

 Unregister a compressor */

 Find a compressor. */

/*

 * Miscelleneous stuff.

/*

 * Stuff for handling the lists of ppp units and channels

 * and for initialization.

/*

 * Create a new ppp interface unit.  Fails if it can't allocate memory

 * or if there is already a unit with the requested number.

 * unit == -1 means allocate a new number.

/*

 * Initialize a ppp_file structure.

/*

 * Free the memory used by a ppp unit.  This is only called once

 * there are no channels connected to the unit and no file structs

 * that reference the unit.

 "can't happen" */

 CONFIG_PPP_MULTILINK */

 CONFIG_PPP_FILTER */

/*

 * Locate an existing ppp unit.

 * The caller should have locked the all_ppp_mutex.

/*

 * Locate an existing ppp channel.

 * The caller should have locked the all_channels_lock.

 * First we look in the new_channels list, then in the

 * all_channels list.  If found in the new_channels list,

 * we move it to the all_channels list.  This is for speed

 * when we have a lot of channels in use.

/*

 * Connect a PPP channel to a PPP interface unit.

 Don't connect unregistered channels */

 for protocol bytes */

/*

 * Disconnect a channel from its ppp unit.

 remove it from the ppp unit's list */

/*

 * Free up the resources used by a ppp channel.

 "can't happen" */

 should never happen */

/*

 * Units handling. Caller must protect concurrent access

 * by holding all_ppp_mutex

 associate pointer with specified number */

 get new free unit number and associate pointer with it */

 put unit number back to a pool */

 get pointer associated with the number */

 Module/initialization stuff */

 SPDX-License-Identifier: GPL-2.0-or-later

/** -*- linux-c -*- ***********************************************************

 * Linux PPP over Ethernet (PPPoX/PPPoE) Sockets

 *

 * PPPoX --- Generic PPP encapsulation socket family

 * PPPoE --- PPP over Ethernet (RFC 2516)

 *

 * Version:	0.7.0

 *

 * 070228 :	Fix to allow multiple sessions with same remote MAC and same

 *		session id by including the local device ifindex in the

 *		tuple identifying a session. This also ensures packets can't

 *		be injected into a session from interfaces other than the one

 *		specified by userspace. Florian Zumbiehl <florz@florz.de>

 *		(Oh, BTW, this one is YYMMDD, in case you were wondering ...)

 * 220102 :	Fix module use count on failure in pppoe_create, pppox_sk -acme

 * 030700 :	Fixed connect logic to allow for disconnect.

 * 270700 :	Fixed potential SMP problems; we must protect against

 *		simultaneous invocation of ppp_input

 *		and ppp_unregister_channel.

 * 040800 :	Respect reference count mechanisms on net-devices.

 * 200800 :	fix kfree(skb) in pppoe_rcv (acme)

 *		Module reference count is decremented in the right spot now,

 *		guards against sock_put not actually freeing the sk

 *		in pppoe_release.

 * 051000 :	Initialization cleanup.

 * 111100 :	Fix recvmsg.

 * 050101 :	Fix PADT processing.

 * 140501 :	Use pppoe_rcv_core to handle all backlog. (Alexey)

 * 170701 :	Do not lock_sock with rwlock held. (DaveM)

 *		Ignore discovery frames if user has socket

 *		locked. (DaveM)

 *		Ignore return value of dev_queue_xmit in __pppoe_xmit

 *		or else we may kfree an SKB twice. (DaveM)

 * 190701 :	When doing copies of skb's in __pppoe_xmit, always delete

 *		the original skb that was passed in on success, never on

 *		failure.  Delete the copy of the skb on failure to avoid

 *		a memory leak.

 * 081001 :	Misc. cleanup (licence string, non-blocking, prevent

 *		reference of device on close).

 * 121301 :	New ppp channels interface; cannot unregister a channel

 *		from interrupts.  Thus, we mark the socket as a ZOMBIE

 *		and do the unregistration later.

 * 081002 :	seq_file support for proc stuff -acme

 * 111602 :	Merge all 2.4 fixes into 2.5/2.6 tree.  Label 2.5/2.6

 *		as version 0.7.  Spacing cleanup.

 * Author:	Michal Ostrowski <mostrows@speakeasy.net>

 * Contributors:

 * 		Arnaldo Carvalho de Melo <acme@conectiva.com.br>

 *		David S. Miller (davem@redhat.com)

 *

 * License:

 per-net private data for this module */

	/*

	 * we could use _single_ hash table for all

	 * nets by injecting net id into the hash but

	 * it would increase hash chains and add

	 * a few additional math comparisons messy

	 * as well, moreover in case of SMP less locking

	 * controversy here

/*

 * PPPoE could be in the following stages:

 * 1) Discovery stage (to obtain remote MAC and Session ID)

 * 2) Session stage (MAC and SID are known)

 *

 * Ethernet frames have a special tag for this but

 * we use simpler approach based on session id

/**********************************************************************

 *

 *  Set/get/delete/rehash items  (internal versions)

 *

/**********************************************************************

 *

 *  Set/get/delete/rehash items

 *

/***************************************************************************

 *

 *  Handler for device events.

 *  Certain device events require that sockets be unconnected.

 *

			/* We always grab the socket lock, followed by the

			 * hash_lock, in that order.  Since we should hold the

			 * sock lock while doing any unbinding, we need to

			 * release the lock we're holding.  Hold a reference to

			 * the sock so it doesn't disappear as we're jumping

			 * between locks.

			/* Restart the process from the start of the current

			 * hash chain. We dropped locks so the world may have

			 * change from underneath us.

 Only look at sockets that are using this specific device. */

		/* A change in mtu or address is a bad thing, requiring

		 * LCP re-negotiation.

 Find every socket on this device and kill it. */

/************************************************************************

 *

 * Do the real work of receiving a PPPoE Session frame.

 *

	/* Backlog receive. Semantics of backlog rcv preclude any code from

	 * executing in lock_sock()/release_sock() bounds; meaning sk->sk_state

	 * can't change.

/************************************************************************

 *

 * Receive wrapper called in BH context.

 *

	/* Note that get_item does a sock_hold(), so sk_pppox(po)

	 * is known to be safe.

/************************************************************************

 *

 * Receive a PPPoE Discovery frame.

 * This is solely for detection of PADT frames

 *

 Lies... :-) */

/***********************************************************************

 *

 * Initialize a new struct sock.

 *

 Signal the death of the socket. */

	/*

	 * protect "po" from concurrent updates

	 * on pppoe_flush_dev

 Check for already bound sockets */

 Check for already disconnected sockets, on attempts to disconnect */

 Delete the old binding */

 Re-bind in session stage only */

		/* PPPoE address from the user specifies an outbound

		/* Check that the socket referenced by the address

 Reserve space for headers. */

/************************************************************************

 *

 * xmit function for internal use.

 *

	/* The higher-level PPP code (ppp_unregister_channel()) ensures the PPP

	 * xmit operations conclude prior to an unregistration call.  Thus

	 * sk->sk_state cannot change, so we don't need to do lock_sock().

	 * But, we also can't do a lock_sock since that introduces a potential

	 * deadlock as we'd reverse the lock ordering used when calling

	 * ppp_unregister_channel().

	/* Copy the data if there is no space for the header or if it's

	 * read-only.

/************************************************************************

 *

 * xmit function called by generic PPP driver

 * sends PPP frame over PPPoE socket

 *

 CONFIG_PROC_FS */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PPP async serial channel driver for Linux.

 *

 * Copyright 1999 Paul Mackerras.

 *

 * This driver provides the encapsulation and framing for sending

 * and receiving PPP frames over async serial lines.  It relies on

 * the generic PPP layer to give it frames to send and to process

 * received frames.  It implements the PPP line discipline.

 *

 * Part of the code in this driver was inspired by the old async-only

 * PPP driver, written by Michael Callahan and Al Longyear, and

 * subsequently hacked by Paul Mackerras.

 Structure for storing local state. */

 interface to generic ppp layer */

 Bit numbers in xmit_flags */

 State bits */

 Bits in rbits */

/*

 * Prototypes.

/*

 * Routines implementing the PPP line discipline.

/*

 * We have a potential race on dereferencing tty->disc_data,

 * because the tty layer provides no locking at all - thus one

 * cpu could be running ppp_asynctty_receive while another

 * calls ppp_asynctty_close, which zeroes tty->disc_data and

 * frees the memory that ppp_asynctty_receive is using.  The best

 * way to fix this is to use a rwlock in the tty struct, but for now

 * we use a single global rwlock for all ttys in ppp line discipline.

 *

 * FIXME: this is no longer true. The _close path for the ldisc is

 * now guaranteed to be sane.

/*

 * Called when a tty is put into PPP line discipline. Called in process

 * context.

 initialize the asyncppp structure */

/*

 * Called when the tty is put into another line discipline

 * or it hangs up.  We have to wait for any cpu currently

 * executing in any of the other ppp_asynctty_* routines to

 * finish before we can call ppp_unregister_channel and free

 * the asyncppp struct.  This routine must be called from

 * process context, not interrupt or softirq context.

	/*

	 * We have now ensured that nobody can start using ap from now

	 * on, but we have to wait for all existing users to finish.

	 * Note that ppp_unregister_channel ensures that no calls to

	 * our channel ops (i.e. ppp_async_send/ioctl) are in progress

	 * by the time it returns.

/*

 * Called on tty hangup in process context.

 *

 * Wait for I/O to driver to complete and unregister PPP channel.

 * This is already done by the close routine, so just call that.

/*

 * Read does nothing - no data is ever available this way.

 * Pppd reads and writes packets via /dev/ppp instead.

/*

 * Write on the tty does nothing, the packets all come in

 * from the ppp generic stuff.

/*

 * Called in process context only. May be re-entered by multiple

 * ioctl calling threads.

 flush our buffers and the serial port's buffer */

 Try the various mode ioctls */

 No kernel lock - fine */

 May sleep, don't call from interrupt level or with interrupts disabled */

/*

 * The following routines provide the PPP channel interface.

 can't escape 0x5e */

 must escape 0x7d, 0x7e */

/*

 * This is called at softirq level to deliver received packets

 * to the ppp_generic code, and to tell the ppp_generic code

 * if we can accept more output now.

 process received packets */

 try to push more stuff out */

/*

 * Procedures for encapsulation and framing.

/*

 * Procedure to encode the data for async serial transmission.

 * Does octet stuffing (escaping), puts the address/control bytes

 * on if A/C compression is disabled, and does protocol compression.

 * Assumes ap->tpkt != 0 on entry.

 * Returns 1 if we finished the current frame, 0 otherwise.

	/*

	 * LCP packets with code values between 1 (configure-reqest)

	 * and 7 (code-reject) must be sent as though no options

	 * had been negotiated.

		/*

		 * Start of a new packet - insert the leading FLAG

		 * character if necessary.

		/*

		 * Put in the address/control bytes if necessary

	/*

	 * Once we put in the last byte, we need to put in the FCS

	 * and closing flag, so make sure there is at least 7 bytes

	 * of free space in the output buffer.

 compress protocol field */

		/*

		 * Remember where we are up to in this packet.

	/*

	 * We have finished the packet.  Add the FCS and flag.

/*

 * Transmit-side routines.

/*

 * Send a packet to the peer over an async tty line.

 * Returns 1 iff the packet was accepted.

 * If the packet was not accepted, we will call ppp_output_wakeup

 * at some later time.

 already full */

/*

 * Push as much data as possible out to the tty.

	/*

	 * We can get called recursively here if the tty write

	 * function calls our wakeup function.  This can happen

	 * for example on a pty with both the master and slave

	 * set to PPP line discipline.

	 * We use the XMIT_BUSY bit to detect this and get out,

	 * leaving the XMIT_WAKEUP bit set to tell the other

	 * instance that it may now be able to write more now.

 error, e.g. loss of CD */

 finished processing ap->tpkt */

		/*

		 * We haven't made any progress this time around.

		 * Clear XMIT_BUSY to let other callers in, but

		 * after doing so we have to check if anyone set

		 * XMIT_WAKEUP since we last checked it.  If they

		 * did, we should try again to set XMIT_BUSY and go

		 * around again in case XMIT_BUSY was still set when

		 * the other caller tried.

 any more work to do? if not, exit the loop */

 more work to do, see if we can do it now */

/*

 * Flush output from our internal buffers.

 * Called for the TCFLSH ioctl. Can be entered in parallel

 * but this is covered by the xmit_lock.

/*

 * Receive-side routines.

 see how many ordinary chars there are at the start of buf */

 called when a flag is seen - do end-of-packet processing */

 0-length packet */

 check the FCS */

 too short */

 bad FCS */

 check for address/control and protocol compression */

 chop off address/control */

 If protocol field is not compressed, it can be LCP packet */

 queue the frame to be processed */

 frame had an error, remember that, reset SC_TOSS & SC_ESCAPE */

 make skb appear as freshly allocated */

/* Called when the tty driver has data for us. Runs parallel with the

 update bits used for 8-bit cleanness detection */

 scan through and see how many chars we can do in bulk */

 check the flags to see if any char had an error */

 start tossing */

 stuff the chars in the skb */

				/* Try to get the payload 4-byte aligned.

				 * This should match the

				 * PPP_ALLSTATIONS/PPP_UI/compressed tests in

				 * process_input_packet, but we do not have

				 * enough chars here to test buf[1] and buf[2].

 packet overflowed MRU */

 otherwise it's a char in the recv ACCM */

/*

 * We look at LCP frames going past so that we can notice

 * and react to the LCP configure-ack from the peer.

 * In the situation where the peer has been sent a configure-ack

 * already, LCP is up once it has sent its configure-ack

 * so the immediately following packet can be sent with the

 * configured LCP options.  This allows us to process the following

 * packet correctly without pppd needing to respond quickly.

 *

 * We only respond to the received configure-ack if we have just

 * sent a configure-request, and the configure-ack contains the

 * same data (this is checked using a 16-bit crc of the data).

 LCP code field values */

 LCP option numbers */

 skip protocol bytes */

 4 = code, ID, length */

 packet got truncated or length is bogus */

		/*

		 * sent confreq or received confack:

		 * calculate the crc of the data from the ID field on.

 outbound confreq - remember the crc for later */

 received confack, check the crc */

 not interested in received confreq */

 process the options in the confack */

 data[0] is code, data[1] is length */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PPP synchronous tty channel driver for Linux.

 *

 * This is a ppp channel driver that can be used with tty device drivers

 * that are frame oriented, such as synchronous HDLC devices.

 *

 * Complete PPP frames without encoding/decoding are exchanged between

 * the channel driver and the device driver.

 *

 * The async map IOCTL codes are implemented to keep the user mode

 * applications happy if they call them. Synchronous PPP does not use

 * the async maps.

 *

 * Copyright 1999 Paul Mackerras.

 *

 * Also touched by the grubby hands of Paul Fulghum paulkf@microgate.com

 *

 * This driver provides the encapsulation and framing for sending

 * and receiving PPP frames over sync serial lines.  It relies on

 * the generic PPP layer to give it frames to send and to process

 * received frames.  It implements the PPP line discipline.

 *

 * Part of the code in this driver was inspired by the old async-only

 * PPP driver, written by Michael Callahan and Al Longyear, and

 * subsequently hacked by Paul Mackerras.

 *

 * ==FILEVERSION 20040616==

 Structure for storing local state. */

 interface to generic ppp layer */

 Bit numbers in xmit_flags */

 Bits in rbits */

 arbitrary */

/*

 * Prototypes.

/*

 * Utility procedure to print a buffer in hex/ascii

/*

 * Routines implementing the synchronous PPP line discipline.

/*

 * We have a potential race on dereferencing tty->disc_data,

 * because the tty layer provides no locking at all - thus one

 * cpu could be running ppp_synctty_receive while another

 * calls ppp_synctty_close, which zeroes tty->disc_data and

 * frees the memory that ppp_synctty_receive is using.  The best

 * way to fix this is to use a rwlock in the tty struct, but for now

 * we use a single global rwlock for all ttys in ppp line discipline.

 *

 * FIXME: Fixed in tty_io nowadays.

/*

 * Called when a tty is put into sync-PPP line discipline.

 initialize the syncppp structure */

 for A/C bytes */

/*

 * Called when the tty is put into another line discipline

 * or it hangs up.  We have to wait for any cpu currently

 * executing in any of the other ppp_synctty_* routines to

 * finish before we can call ppp_unregister_channel and free

 * the syncppp struct.  This routine must be called from

 * process context, not interrupt or softirq context.

	/*

	 * We have now ensured that nobody can start using ap from now

	 * on, but we have to wait for all existing users to finish.

	 * Note that ppp_unregister_channel ensures that no calls to

	 * our channel ops (i.e. ppp_sync_send/ioctl) are in progress

	 * by the time it returns.

/*

 * Called on tty hangup in process context.

 *

 * Wait for I/O to driver to complete and unregister PPP channel.

 * This is already done by the close routine, so just call that.

/*

 * Read does nothing - no data is ever available this way.

 * Pppd reads and writes packets via /dev/ppp instead.

/*

 * Write on the tty does nothing, the packets all come in

 * from the ppp generic stuff.

 flush our buffers and the serial port's buffer */

 No kernel lock - fine */

 May sleep, don't call from interrupt level or with interrupts disabled */

/*

 * The following routines provide the PPP channel interface.

 can't escape 0x5e */

 must escape 0x7d, 0x7e */

/*

 * This is called at softirq level to deliver received packets

 * to the ppp_generic code, and to tell the ppp_generic code

 * if we can accept more output now.

 process received packets */

 zero length buffers indicate error */

 try to push more stuff out */

/*

 * Procedures for encapsulation and framing.

	/* LCP packets with codes between 1 (configure-request)

	 * and 7 (code-reject) must be sent as though no options

	 * have been negotiated.

 compress protocol field if option enabled */

 prepend address/control fields if necessary */

/*

 * Transmit-side routines.

/*

 * Send a packet to the peer over an sync tty line.

 * Returns 1 iff the packet was accepted.

 * If the packet was not accepted, we will call ppp_output_wakeup

 * at some later time.

 already full */

/*

 * Push as much data as possible out to the tty.

 error, e.g. loss of CD */

 haven't made any progress */

/*

 * Flush output from our internal buffers.

 * Called for the TCFLSH ioctl.

/*

 * Receive-side routines.

/* called when the tty driver has data for us.

 *

 * Data is frame oriented: each call to ppp_sync_input is considered

 * a whole frame. If the 1st flag byte is non-zero then the whole

 * frame is considered to be in error and is tossed.

 stuff the chars in the skb */

 Try to get the payload 4-byte aligned */

 error flag set, ignore frame */

 packet overflowed MRU */

 strip address/control field if present */

 chop off address/control */

	/* PPP packet length should be >= 2 bytes when protocol field is not

	 * compressed.

 queue the frame to be processed */

 queue zero length packet as error indication */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Point-to-Point Tunneling Protocol for Linux

 *

 *	Authors: Dmitry Kozlov <xeb@mail.ru>

 compress protocol field */

 Put in the address/control bytes if necessary */

 Push down and install GRE header */

 send ack with this message */

	Push down and install the IP header. */

 test if acknowledgement present */

 ack in different place if S = 0 */

 also handle sequence number wrap-around  */

 test if payload present */

 check for incomplete packet (length smaller than expected) */

 check for expected sequence number */

 chop off address/control */

 PPTP-GRE protocol for PPTP */

 flag CSUM should be clear */

 flag ROUTING should be clear */

 flag KEY should be set */

 flag Recursion Ctrl should be clear */

 if invalid, discard this packet */

 Check for already bound sockets */

 Check for already disconnected sockets, on attempts to disconnect */

/*

 * Update: The Berkeley copyright was changed, and the change

 * is retroactive to all "true" BSD software (ie everything

 * from UCB as opposed to other peoples code that just carried

 * the same license). The new copyright doesn't clash with the

 * GPL, so the module-only restriction has been removed..

/* Because this code is derived from the 4.3BSD compress source:

 *

 * Copyright (c) 1985, 1986 The Regents of the University of California.

 * All rights reserved.

 *

 * This code is derived from software contributed to Berkeley by

 * James A. Woods, derived from original work by Spencer Thomas

 * and Joseph Orost.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 * 1. Redistributions of source code must retain the above copyright

 *    notice, this list of conditions and the following disclaimer.

 * 2. Redistributions in binary form must reproduce the above copyright

 *    notice, this list of conditions and the following disclaimer in the

 *    documentation and/or other materials provided with the distribution.

 * 3. All advertising materials mentioning features or use of this software

 *    must display the following acknowledgement:

 *	This product includes software developed by the University of

 *	California, Berkeley and its contributors.

 * 4. Neither the name of the University nor the names of its contributors

 *    may be used to endorse or promote products derived from this software

 *    without specific prior written permission.

 *

 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND

 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE

 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL

 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS

 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT

 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY

 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF

 * SUCH DAMAGE.

/*

 * This version is for use with contiguous buffers on Linux-derived systems.

 *

 *  ==FILEVERSION 20000226==

 *

 *  NOTE TO MAINTAINERS:

 *     If you modify this file at all, please set the number above to the

 *     date of the modification as YYMMDD (year month day).

 *     bsd_comp.c is shipped with a PPP distribution as well as with

 *     the kernel; if everyone increases the FILEVERSION number above,

 *     then scripts can do the right thing when deciding whether to

 *     install a new bsd_comp.c file. Don't change the format of that

 *     line otherwise, so the installation script can recognize it.

 *

 * From: bsd_comp.c,v 1.3 1994/12/08 01:59:58 paulus Exp

/*

 * PPP "BSD compress" compression

 *  The differences between this compression and the classic BSD LZW

 *  source are obvious from the requirement that the classic code worked

 *  with files while this handles arbitrarily long streams that

 *  are broken into packets.  They are:

 *

 *	When the code size expands, a block of junk is not emitted by

 *	    the compressor and not expected by the decompressor.

 *

 *	New codes are not necessarily assigned every time an old

 *	    code is output by the compressor.  This is because a packet

 *	    end forces a code to be emitted, but does not imply that a

 *	    new sequence has been seen.

 *

 *	The compression ratio is checked at the first end of a packet

 *	    after the appropriate gap.	Besides simplifying and speeding

 *	    things up, this makes it more likely that the transmitter

 *	    and receiver will agree when the dictionary is cleared when

 *	    compression is not going well.

/*

 * Macros to extract protocol version and number of bits

 * from the third byte of the BSD Compress CCP configuration option.

/*

 * A dictionary for doing BSD compress.

 hash value */

 Little endian order */

 preceding code */

 last character of new code */

 Big endian order */

 last character of new code */

 preceding code */

 output of hash table -1 */

 map code to hash table entry */

 length of this structure */

 size of the hash table */

 used in hash function */

 current bits/code */

 maximum bits/code */

 non-zero if debug desired */

 ppp unit number */

 sequence # of next packet */

 size of receive (decompress) bufr */

 largest valid code */

 largest code in use */

 uncompressed bytes, aged */

 compressed bytes, aged */

 recent compression ratio */

 when to next check the ratio */

 times dictionary cleared */

 incompressible packets */

 incompressible bytes */

 uncompressed packets */

 uncompressed bytes */

 compressed packets */

 compressed bytes */

 array of lengths of codes */

 dictionary */

 BSD compress overhead/packet */

 These are in ppp_generic.c */

/*

 * the next two codes should not be changed lightly, as they must not

 * lie within the contiguous general code space.

 table clear output code */

 first free entry */

 Ratio check interval */

/*

 * clear the dictionary

/*

 * If the dictionary is full, then see if it is time to reset it.

 *

 * Compute the compression ratio using fixed-point arithmetic

 * with 8 fractional bits.

 *

 * Since we have an infinite stream instead of a single file,

 * watch only the local compression ratio.

 *

 * Since both peers must reset the dictionary at the same time even in

 * the absence of CLEAR codes (while packets are incompressible), they

 * must compute the same ratio.

 1=output CLEAR */

 age the ratio by limiting the size of the counts */

	    /* Reset the dictionary only if the ratio is worse,

	     * or if it looks as if it has been poisoned

	     * by incompressible data.

	     *

	     * This does not overflow, because

	     *	db->in_count <= RATIO_MAX.

/*

 * Return statistics.

/*

 * Reset state, as on a CCP ResetReq.

/*

 * Release the compression structure

/*

 * Release the dictionary

/*

 * Release the string buffer

/*

 * Finally release the structure itself.

/*

 * Allocate space for a (de) compressor.

 needs 82152 for both directions */

 needs 84144 */

 needs 88240 */

 needs 96432 */

 needs 176784 */

 needs 353744 */

 needs 691440 */

 needs 1366160--far too much, */

 hsize = 69001; */	
 hshift = 8; */	
 break; */

/*

 * Allocate the main control structure for this instance.

/*

 * Allocate space for the dictionary. This may be more than one page in

 * length.

/*

 * If this is the compression buffer then there is no length data.

/*

 * For decompression, the length information is needed as well.

/*

 * Initialize the data information for the compression code

/*

 * Initialize the database.

/*

 * Obtain pointers to the various structures in the compression tables

/*

 * compress a packet

 *

 *	The result of this function is the size of the compressed

 *	packet. A zero is returned if the packet was not compressed

 *	for some reason, such as the size being larger than uncompressed.

 *

 *	One change from the BSD compress command is that when the

 *	code size expands, we do not output a bunch of padding.

  /*

   * If the protocol is not in the range we're interested in,

   * just return without compressing the packet.  If it is,

   * the protocol becomes the first byte to compress.

 Initialize the output pointers */

 This is the PPP header information */

 Skip the input header */

 Low byte of protocol is counted as input */

 Validate and then check the entry. */

 found (prefix,suffix) */

 continue probing until a match or invalid entry */

 finally found (prefix,suffix) */

 output the prefix */

 code -> hashtable */

 expand code size if needed */

	    /* Invalidate old hash table entry using

	     * this code, and then take it over.

 output the last code */

 must be set before calling bsd_check */

    /*

     * Generate the clear command if needed

    /*

     * Pad dribble bits of last code with ones.

     * Do not emit a completely useless byte of ones.

    /*

     * Increase code size if we would have without the packet

     * boundary because the decompressor will do so.

 If output length is too large then this is an incomplete frame. */

 Count the number of compressed frames */

 Return the resulting output length */

/*

 * Update the "BSD Compress" dictionary on the receiver for

 * incompressible data by pretending to compress the incoming data.

/*

 * Decompress "BSD Compress".

 *

 * Because of patent problems, we return DECOMP_ERROR for errors

 * found by inspecting the input data and for system problems, but

 * DECOMP_FATALERROR for any errors which could possibly be said to

 * be being detected "after" decompression.  For DECOMP_ERROR,

 * we can issue a CCP reset-request; for DECOMP_FATALERROR, we may be

 * infringing a patent of Motorola's if we do, so we take CCP down

 * instead.

 *

 * Given that the frame has the correct sequence number and a good FCS,

 * errors such as invalid codes in the input most likely indicate a

 * bug, so we return DECOMP_FATALERROR for them in order to turn off

 * compression, even though they are detected by inspecting the input.

 1st valid bit in accm */

 bitno when we have a code */

 1st valid bit in accm */

 bitno when we have a code */

    /*

     * Save the address/control from the PPP header

     * and then get the sequence number.

    /*

     * Check the sequence number and give up if it differs from

     * the value we're expecting.

    /*

     * Fill in the ppp header, but not the last byte of the protocol

     * (that comes from the decompressed data).

    /*

     * Keep the checkpoint correctly so that incompressible packets

     * clear the dictionary at the proper times.

 don't count the header */

	/*

	 * Accumulate bytes until we have a complete code.

	 * Then get the next code, relying on the 32-bit,

	 * unsigned accm to mask the result.

	/*

	 * The dictionary must only be cleared at the end of a packet.

 probably a bug */

 probably a bug */

 Special case for KwKwK string. */

	/*

	 * Decode this code and install it in the decompressed buffer.

 the KwKwK case again */

	/*

	 * If not first code in a packet, and

	 * if not out of code space, then allocate a new code.

	 *

	 * Keep the hash table correct so it can be used

	 * with uncompressed packets.

 look for a free hash table entry */

	    /*

	     * Invalidate previous hash table entry

	     * assigned this code, and then take it over

 Update the length of this string. */

 Expand code size if needed. */

/*************************************************************

 * Table of addresses for the BSD compression module

/*************************************************************

 * Module support routines

/*

 * ppp_mppe.c - interface MPPE to the PPP code.

 * This version is for use with Linux kernel 2.6.14+

 *

 * By Frank Cusack <fcusack@fcusack.com>.

 * Copyright (c) 2002,2003,2004 Google, Inc.

 * All rights reserved.

 *

 * License:

 * Permission to use, copy, modify, and distribute this software and its

 * documentation is hereby granted, provided that the above copyright

 * notice appears in all copies.  This software is provided without any

 * warranty, express or implied.

 *

 * ALTERNATIVELY, provided that this notice is retained in full, this product

 * may be distributed under the terms of the GNU General Public License (GPL),

 * in which case the provisions of the GPL apply INSTEAD OF those given above.

 *

 *   This program is free software; you can redistribute it and/or modify

 *   it under the terms of the GNU General Public License as published by

 *   the Free Software Foundation; either version 2 of the License, or

 *   (at your option) any later version.

 *

 *   This program is distributed in the hope that it will be useful,

 *   but WITHOUT ANY WARRANTY; without even the implied warranty of

 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *   GNU General Public License for more details.

 *

 *   You should have received a copy of the GNU General Public License

 *   along with this program; if not, see <http://www.gnu.org/licenses/>.

 *

 *

 * Changelog:

 *      08/12/05 - Matt Domsch <Matt_Domsch@dell.com>

 *                 Only need extra skb padding on transmit, not receive.

 *      06/18/04 - Matt Domsch <Matt_Domsch@dell.com>, Oleg Makarenko <mole@quadra.ru>

 *                 Use Linux kernel 2.6 arc4 and sha1 routines rather than

 *                 providing our own.

 *      2/15/04 - TS: added #include <version.h> and testing for Kernel

 *                    version before using

 *                    MOD_DEC_USAGE_COUNT/MOD_INC_USAGE_COUNT which are

 *                    deprecated in 2.6

/*

 * kernel crypto API needs its arguments to be in kmalloc'd memory, not in the module

 * static data area.  That means sha_pad needs to be kmalloc'd.

/*

 * State for an MPPE (de)compressor.

 key length in bytes             */

 NB: 128-bit == 16, 40-bit == 8! */

 If we want to support 56-bit,   */

 the unit has to change to bits  */

 MPPE control bits */

 12-bit coherency count (seqno)  */

 stateful mode flag */

 stateful mode packet loss flag */

 take down LCP if too many */

 struct ppp_mppe_state.bits definitions */

 Encryption table were (re)inititalized */

 MPPC only (not implemented) */

 MPPC only (not implemented) */

 This is an encrypted frame */

 The size of the ccount space */

 MPPE overhead/packet */

 Max bogon factor we will tolerate */

/*

 * Key Derivation, from RFC 3078, RFC 3079.

 * Equivalent to Get_Key() for MS-CHAP as described in RFC 3079.

/*

 * Perform the MPPE rekey algorithm, from RFC 3078, sec. 7.3.

 * Well, not what's written there, but rather what they meant.

 See RFC 3078 */

/*

 * Allocate space for a (de)compressor.

 Save keys. */

	/*

	 * We defer initial key generation until mppe_init(), as mppe_alloc()

	 * is called frequently during negotiation.

/*

 * Deallocate space for a (de)compressor.

/*

 * Initialize (de)compressor state.

 Generate the initial session key. */

	/*

	 * Initialize the coherency count.  The initial value is not specified

	 * in RFC 3078, but we can make a reasonable assumption that it will

	 * start at 0.  Setting it to the max here makes the comp/decomp code

	 * do the right thing (determined through experiment).

	/*

	 * Note that even though we have initialized the key table, we don't

	 * set the FLUSHED bit.  This is contrary to RFC 3078, sec. 3.1.

 ARGSUSED */

/*

 * We received a CCP Reset-Request (actually, we are sending a Reset-Ack),

 * tell the compressor to rekey.  Note that we MUST NOT rekey for

 * every CCP Reset-Request; we only rekey on the next xmit packet.

 * We might get multiple CCP Reset-Requests if our CCP Reset-Ack is lost.

 * So, rekeying for every CCP Reset-Request is broken as the peer will not

 * know how many times we've rekeyed.  (If we rekey and THEN get another

 * CCP Reset-Request, we must rekey again.)

/*

 * Compress (encrypt) a packet.

 * It's strange to call this a compressor, since the output is always

 * MPPE_OVHD + 2 bytes larger than the input.

	/*

	 * Check that the protocol is in the range we handle.

 Make sure we have enough room to generate an encrypted packet. */

 Drop the packet if we should encrypt it, but can't. */

	/*

	 * Copy over the PPP header and set control bits.

 stateless mode     */

 "flag" packet      */

 CCP Reset-Request  */

 We must rekey */

 reset for next xmit */

 skip to proto field */

/*

 * Since every frame grows by MPPE_OVHD + 2 bytes, this is always going

 * to look bad ... and the longer the link is up the worse it will get.

 ARGSUSED */

/*

 * We received a CCP Reset-Ack.  Just ignore it.

 ARGSUSED */

/*

 * Decompress (decrypt) an MPPE packet.

	/*

	 * Make sure we have enough room to decrypt the packet.

	 * Note that for our test we only subtract 1 byte whereas in

	 * mppe_compress() we added 2 bytes (+MPPE_OVHD);

	 * this is to account for possible PFC.

 assume no PFC */

 sanity checks -- terminate with extreme prejudice */

	/*

	 * Check the coherency count.

 Discard late packet */

 RFC 3078, sec 8.1.  Rekey for every packet. */

 RFC 3078, sec 8.2. */

 normal state */

				/*

				 * (ccount > state->ccount)

				 * Packet loss detected, enter the discard state.

				 * Signal the peer to rekey (by sending a CCP Reset-Request).

 discard state */

 ccp.c will be silent (no additional CCP Reset-Requests). */

 Rekey for every missed "flag" packet. */

 reset */

				/*

				 * Another problem with RFC 3078 here.  It implies that the

				 * peer need not send a Reset-Ack packet.  But RFC 1962

				 * requires it.  Hopefully, M$ does send a Reset-Ack; even

				 * though it isn't required for MPPE synchronization, it is

				 * required to reset CCP state.

	/*

	 * Fill in the first part of the PPP header.  The protocol field

	 * comes from the decrypted data.

 +1 */

 +1 */

 -6 */

 net osize: isize-4 */

	/*

	 * Decrypt the first byte in order to check if it is

	 * a compressed or uncompressed protocol field.

	/*

	 * Do PFC decompression.

	 * This would be nicer if we were given the actual sk_buff

	 * instead of a char *.

 And finally, decrypt the rest of the packet. */

 good packet credit */

		/* Take LCP down if the peer is sending too many bogons.

		 * We don't want to do this for a single or just a few

		 * instances since it could just be due to packet corruption.

/*

 * Incompressible data has arrived (this should never happen!).

 * We should probably drop the link if the protocol is in the range

 * of what should be encrypted.  At the least, we should drop this

 * packet.  (How to do this?)

/*************************************************************

 * Module interface table

/*

 * Procedures exported to if_ppp.c.

/*

 * ppp_mppe_init()

 *

 * Prior to allowing load, try to load the arc4 and sha1 crypto

 * libraries.  The actual use will be allocated later, but

 * this way the module will fail to insmod if they aren't available.

 SPDX-License-Identifier: GPL-2.0-or-later

/** -*- linux-c -*- ***********************************************************

 * Linux PPP over X/Ethernet (PPPoX/PPPoE) Sockets

 *

 * PPPoX --- Generic PPP encapsulation socket family

 * PPPoE --- PPP over Ethernet (RFC 2516)

 *

 * Version:	0.5.2

 *

 * Author:	Michal Ostrowski <mostrows@speakeasy.net>

 *

 * 051000 :	Initialization cleanup

 *

 * License:

 Clear connection to ppp device, if attached. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ppp_deflate.c - interface the zlib procedures for Deflate compression

 * and decompression (as used by gzip) to the PPP code.

 *

 * Copyright 1994-1998 Paul Mackerras.

/*

 * State for a Deflate (de)compressor.

 Deflate overhead/packet */

/**

 *	z_comp_free - free the memory used by a compressor

 *	@arg:	pointer to the private state for the compressor.

/**

 *	z_comp_alloc - allocate space for a compressor.

 *	@options: pointer to CCP option data

 *	@opt_len: length of the CCP option at @options.

 *

 *	The @options pointer points to the a buffer containing the

 *	CCP option data for the compression being negotiated.  It is

 *	formatted according to RFC1979, and describes the window

 *	size that the peer is requesting that we use in compressing

 *	data to be sent to it.

 *

 *	Returns the pointer to the private state for the compressor,

 *	or NULL if we could not allocate enough memory.

/**

 *	z_comp_init - initialize a previously-allocated compressor.

 *	@arg:	pointer to the private state for the compressor

 *	@options: pointer to the CCP option data describing the

 *		compression that was negotiated with the peer

 *	@opt_len: length of the CCP option data at @options

 *	@unit:	PPP unit number for diagnostic messages

 *	@hdrlen: ignored (present for backwards compatibility)

 *	@debug:	debug flag; if non-zero, debug messages are printed.

 *

 *	The CCP options described by @options must match the options

 *	specified when the compressor was allocated.  The compressor

 *	history is reset.  Returns 0 for failure (CCP options don't

 *	match) or 1 for success.

/**

 *	z_comp_reset - reset a previously-allocated compressor.

 *	@arg:	pointer to private state for the compressor.

 *

 *	This clears the history for the compressor and makes it

 *	ready to start emitting a new compressed stream.

/**

 *	z_compress - compress a PPP packet with Deflate compression.

 *	@arg:	pointer to private state for the compressor

 *	@rptr:	uncompressed packet (input)

 *	@obuf:	compressed packet (output)

 *	@isize:	size of uncompressed packet

 *	@osize:	space available at @obuf

 *

 *	Returns the length of the compressed packet, or 0 if the

 *	packet is incompressible.

	/*

	 * Check that the protocol is in the range we handle.

	/* Don't generate compressed packets which are larger than

	/*

	 * Copy over the PPP header and store the 2-byte sequence number.

 skip 1st proto byte if 0 */

 all done */

	/*

	 * See if we managed to reduce the size of the packet.

/**

 *	z_comp_stats - return compression statistics for a compressor

 *		or decompressor.

 *	@arg:	pointer to private space for the (de)compressor

 *	@stats:	pointer to a struct compstat to receive the result.

/**

 *	z_decomp_free - Free the memory used by a decompressor.

 *	@arg:	pointer to private space for the decompressor.

/**

 *	z_decomp_alloc - allocate space for a decompressor.

 *	@options: pointer to CCP option data

 *	@opt_len: length of the CCP option at @options.

 *

 *	The @options pointer points to the a buffer containing the

 *	CCP option data for the compression being negotiated.  It is

 *	formatted according to RFC1979, and describes the window

 *	size that we are requesting the peer to use in compressing

 *	data to be sent to us.

 *

 *	Returns the pointer to the private state for the decompressor,

 *	or NULL if we could not allocate enough memory.

/**

 *	z_decomp_init - initialize a previously-allocated decompressor.

 *	@arg:	pointer to the private state for the decompressor

 *	@options: pointer to the CCP option data describing the

 *		compression that was negotiated with the peer

 *	@opt_len: length of the CCP option data at @options

 *	@unit:	PPP unit number for diagnostic messages

 *	@hdrlen: ignored (present for backwards compatibility)

 *	@mru:	maximum length of decompressed packets

 *	@debug:	debug flag; if non-zero, debug messages are printed.

 *

 *	The CCP options described by @options must match the options

 *	specified when the decompressor was allocated.  The decompressor

 *	history is reset.  Returns 0 for failure (CCP options don't

 *	match) or 1 for success.

/**

 *	z_decomp_reset - reset a previously-allocated decompressor.

 *	@arg:	pointer to private state for the decompressor.

 *

 *	This clears the history for the decompressor and makes it

 *	ready to receive a new compressed stream.

/**

 *	z_decompress - decompress a Deflate-compressed packet.

 *	@arg:	pointer to private state for the decompressor

 *	@ibuf:	pointer to input (compressed) packet data

 *	@isize:	length of input packet

 *	@obuf:	pointer to space for output (decompressed) packet

 *	@osize:	amount of space available at @obuf

 *

 * Because of patent problems, we return DECOMP_ERROR for errors

 * found by inspecting the input data and for system problems, but

 * DECOMP_FATALERROR for any errors which could possibly be said to

 * be being detected "after" decompression.  For DECOMP_ERROR,

 * we can issue a CCP reset-request; for DECOMP_FATALERROR, we may be

 * infringing a patent of Motorola's if we do, so we take CCP down

 * instead.

 *

 * Given that the frame has the correct sequence number and a good FCS,

 * errors such as invalid codes in the input most likely indicate a

 * bug, so we return DECOMP_FATALERROR for them in order to turn off

 * compression, even though they are detected by inspecting the input.

 Check the sequence number. */

	/*

	 * Fill in the first part of the PPP header.  The protocol field

	 * comes from the decompressed data.

	/*

	 * Set up to call inflate.  We set avail_out to 1 initially so we can

	 * look at the first byte of the output and decide whether we have

	 * a 1-byte or 2-byte protocol field.

	/*

	 * Call inflate, supplying more input or output as needed.

 all done */

 2-byte protocol field */

			/*

			 * We've filled up the output buffer; the only way to

			 * find out whether inflate has any more characters

			 * left is to give it another byte of output space.

/**

 *	z_incomp - add incompressible input data to the history.

 *	@arg:	pointer to private state for the decompressor

 *	@ibuf:	pointer to input packet data

 *	@icnt:	length of input data.

	/*

	 * Check that the protocol is one we handle.

	/*

	 * We start at the either the 1st or 2nd byte of the protocol field,

	 * depending on whether the protocol value is compressible.

 gak! */

	/*

	 * Update stats.

/*************************************************************

 * Module interface table

 These are in ppp_generic.c */

/*

 * Procedures exported to if_ppp.c.

/*

 * Linux driver for VMware's vmxnet3 ethernet NIC.

 *

 * Copyright (C) 2008-2021, VMware, Inc. All Rights Reserved.

 *

 * This program is free software; you can redistribute it and/or modify it

 * under the terms of the GNU General Public License as published by the

 * Free Software Foundation; version 2 of the License and no later version.

 *

 * This program is distributed in the hope that it will be useful, but

 * WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or

 * NON INFRINGEMENT. See the GNU General Public License for more

 * details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; if not, write to the Free Software

 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.

 *

 * The full GNU General Public License is included in this distribution in

 * the file called "COPYING".

 *

 * Maintained by: pv-drivers@vmware.com

 *

/*

 * PCI Device ID Table

 * Last entry must be all 0s

/*

 *    Enable/Disable the given intr

/*

 *    Enable/Disable all intrs used by the device

/*

 * Check the link state. This may start or stop the tx queue.

 Link is up. */

 Check if link state has changed */

 Check if there is an error on xmit/recv queues */

/*

 * The device expects the bitfields in shared structures to be written in

 * little endian. When CPU is big endian, the following routines are used to

 * correctly read and write into ABI.

 * The general technique used here is : double word bitfields are defined in

 * opposite order for big endian architecture. Then before reading them in

 * driver the complete double word is translated using le32_to_cpu. Similarly

 * After the driver writes into bitfields, cpu_to_le32 is used to translate the

 * double words into required format.

 * In order to avoid touching bits in shared structure more than once, temporary

 * descriptors are used. These are passed as srcDesc to following functions.

 Working backwards so that the gen bit is set at the end. */

 Used to read bitfield values from double words. */

 __BIG_ENDIAN_BITFIELD */

 __BIG_ENDIAN_BITFIELD  */

 to help debugging */

 no out of order completion */

		/* update next2comp w/o tx_lock. Since we are marking more,

		 * instead of less, tx ring entries avail, the worst case is

		 * that the tx routine incorrectly re-queues a pkt due to

		 * insufficient tx ring entries.

		/* Prevent any &gdesc->tcd field from being (speculatively)

		 * read before (&gdesc->tcd)->gen is read.

 sanity check, verify all buffers are indeed unmapped and freed */

 Destroy all tx queues */

 reset the tx ring contents to 0 and reset the tx ring states */

 reset the tx comp ring contents to 0 and reset comp ring states */

 reset the bookkeeping data */

 stats are not reset */

/*

 *    starting from ring->next2fill, allocate rx buffers for the given ring

 *    of the rx queue and update the rx desc. stop after @num_to_alloc buffers

 *    are allocated or allocation fails

 rx buffer skipped by the device */

 rx buffers skipped by the device */

		/* Fill the last buffer but dont mark it ready, or else the

 so that the device can distinguish a full ring and an empty ring */

 use the previous gen bit for the SOP desc */

 both loops below can be skipped */

 no need to map the buffer if headers are copied */

 use the right gen for non-SOP desc */

 linear part can use multiple tx desc if it's big */

 spec says that for TxDesc.len, 0 == 2^14 */

 spec says that for TxDesc.len, 0 == 2^14 */

 set the last buf_info for the pkt */

 Init all tx queues */

/*

 *    parse relevant protocol headers:

 *      For a tso pkt, relevant headers are L2/3/4 including options

 *      For a pkt requesting csum offloading, they are L2/3 and may include L4

 *      if it's a TCP/UDP pkt

 *

 * Returns:

 *    -1:  error happens during parsing

 *     0:  protocol headers parsed, but too big to be copied

 *     1:  protocol headers parsed and copied

 *

 * Other effects:

 *    1. related *ctx fields are updated.

 *    2. ctx->copy_size is # of bytes copied

 *    3. the portion to be copied is guaranteed to be in the linear part

 *

 TSO */

			/* For encap packets, skb_checksum_start_offset refers

			 * to inner L4 offset. Thus, below works for encap as

			 * well as non-encap case

 copy as much as allowed */

 make sure headers are accessible directly */

/*

 *    copy relevant protocol headers to the transmit ring:

 *      For a tso pkt, relevant headers are L2/3/4 including options

 *      For a pkt requesting csum offloading, they are L2/3 and may include L4

 *      if it's a TCP/UDP pkt

 *

 *

 *    Note that this requires that vmxnet3_parse_hdr be called first to set the

 *      appropriate bits in ctx first

/*

 * Transmits a pkt thru a given tq

 * Returns:

 *    NETDEV_TX_OK:      descriptors are setup successfully

 *    NETDEV_TX_OK:      error occurred, the pkt is dropped

 *    NETDEV_TX_BUSY:    tx ring is full, queue is stopped

 *

 * Side-effects:

 *    1. tx ring may be changed

 *    2. tq stats may be updated accordingly

 *    3. shared->txNumDeferred may be updated

 Use temporary descriptor to avoid touching bits multiple times */

			/* non-tso pkts must not use more than

			 * VMXNET3_MAX_TXD_PER_PKT entries

 recalculate the # of descriptors to use */

 hdrs parsed, check against other limits */

 fill tx descs related to addr & len */

 setup the EOP desc */

 setup the SOP desc */

 Reserved */

	/* Ensure that the write to (&gdesc->txd)->gen will be observed after

	 * all other writes to &gdesc->txd.

 finally flips the GEN bit of the SOP desc. */

	/* Finished updating in bitfields of Tx Desc, so write them in original

	 * place.

	/*

	 * We do not unmap and chain the rx buffer to the skb.

	 * We basically pretend this buffer is not used and will be recycled

	 * by vmxnet3_rq_alloc_rx_buf()

	/*

	 * ctx->skb may be NULL if this is the first and the only one

	 * desc for the pkt

		/* Use an estimated value, since we also need to handle

		 * TSO case.

 Non-IP pkt, dont estimate header length */

			/* we may stop even before we see the EOP desc of

			 * the current pkt

		/* Prevent any rcd field from being (speculatively) read before

		 * rcd->gen is read.

 first buf of the pkt */

 Pretend the rx buffer is skipped. */

				/* Skb allocation failed, do not handover this

				 * skb to stack. Reuse it. Drop the existing pkt

					/* Skb allocation failed, do not

					 * handover this skb to stack. Reuse

					 * it. Drop the existing pkt.

 Immediate refill */

 non SOP buffer must be type 1 in most cases */

			/* If an sop buffer was dropped, skip all

			 * following non-sop fragments. They will be reused.

				/* Replacement page frag could not be allocated.

				 * Reuse this page. Drop the pkt and free the

				 * skb which contained this page as a frag. Skip

				 * processing all the following non-sop frags.

 Immediate refill */

 device may have skipped some rx descs */

		/* Ensure that the writes to rxd->gen bits will be observed

		 * after all other writes to rxd objects.

 Recv desc is ready to be used by the device */

 if needed, update the register */

 all rx buffers must have already been freed */

 initialize buf_info */

 1st buf for a pkt is skbuff */

 subsequent bufs for a pkt is frag */

 reset internal state and allocate buffers for both rings */

 at least has 1 rx buffer for the 1st ring */

 reset the comp ring */

 reset rxctx */

 stats are not reset */

 Multiple queue aware polling function for tx and rx */

/*

 * NAPI polling function for MSI-X mode with multiple Rx queues

 * Returns the # of the NAPI credit consumed (# of rx descriptors processed)

	/* When sharing interrupt with corresponding tx queue, process

	 * tx completions in that queue as well

/*

 * Handle completion interrupts on tx queues

 * Returns whether or not the intr is handled

 Handle the case where only one irq is allocate for all tx queues */

/*

 * Handle completion interrupts on rx queues. Returns whether or not the

 * intr is handled

 disable intr if needed */

/*

 *----------------------------------------------------------------------------

 *

 * vmxnet3_msix_event --

 *

 *    vmxnet3 msix event intr handler

 *

 * Result:

 *    whether or not the intr is handled

 *

 *----------------------------------------------------------------------------

 disable intr if needed */

 CONFIG_PCI_MSI  */

 Interrupt handler for vmxnet3  */

 not ours */

 disable intr if needed */

 netpoll callback. */

 CONFIG_NET_POLL_CONTROLLER */

			/* Handle the case where only 1 MSIx was allocated for

 Number of rx queues will not change after this */

 init our intr settings */

 allow untagged pkts */

 struct Vmxnet3_RxFilterConf.mfTableLen is u16. */

 We may be called with BH disabled */

/*

 *   Set up driver_shared based on settings in adapter.

 driver settings */

 set up feature flags */

 tx queue settings */

 rx queue settings */

 VMXNET3_RSS */

 intr settings */

 rx filter settings */

 the rest are already zeroed */

		/* Not all requested RSS may get applied, so get and

		 * cache what was actually applied.

 Apply the rx filter settins last. */

	/*

	 * Check link state when first activating device. It will start the

	 * tx queue if the link is up.

 free up buffers we allocated */

 ==================== initialization and cleanup routines ============ */

	/*

	 * for simplicity, force the ring0 size to be a multiple of

	 * rx_buf_per_pkt * VMXNET3_RING_SIZE_ALIGN

		/*

		 * Too late to change num_tx_queues. We cannot do away with

		 * lesser number of queues than what we asked for

		/* qid and qid2 for rx queues will be assigned later when num

	/*

	 * Reset_work may be in the middle of resetting the device, wait for its

	 * completion.

	/*

	 * we must clear VMXNET3_STATE_BIT_RESETTING, otherwise

	 * vmxnet3_close() will deadlock.

 we need to enable NAPI, otherwise dev_close will deadlock */

	/*

	 * Need to clear the quiesce bit to ensure that vmxnet3_close

	 * can quiesce the device properly

	/*

	 * Reset_work may be in the middle of resetting the device, wait for its

	 * completion.

 we need to re-create the rx queue based on the new mtu */

/*

 * Enable MSIx vectors.

 * Returns :

 *	VMXNET3_LINUX_MIN_MSIX_VECT when only minimum number of vectors required

 *	 were enabled.

 *	number of vectors which were enabled otherwise (this number is greater

 *	 than VMXNET3_LINUX_MIN_MSIX_VECT)

 CONFIG_PCI_MSI */

 intr settings */

 for link event */

		/* If we cannot allocate one MSIx vector per queue

		 * then limit the number of rx queues to 1

 If we cannot allocate MSIx vectors use only one rx queue */

 CONFIG_PCI_MSI */

 INT-X related setting */

 if another thread is resetting the device, no need to proceed */

 if the device is closed, we must leave it alone */

 VMXNET3_RSS */

 MTU range: 60 - 9190 */

	/* Reset_work may be in the middle of resetting the device, wait for its

	 * completion.

 Create wake-up filters. */

 LSB ETH_ALEN bits */

 Ethernet header*/

 ARP header */

 2 Ethernet addresses*/

2 IPv4 addresses */

 ETH_P_ARP in Ethernet header. */

 ARPOP_REQUEST in ARP header. */

 The Unicast IPv4 address in 'tip' field. */

 The mask for the relevant bits. */

 ETH_P_ARP */

 ARPOP_REQUEST */

 IPv4 TIP */

 IPv4 TIP */

	/* During hibernate and suspend, device has to be reinitialized as the

	 * device state need not be preserved.

	/* Need not check adapter state as other reset tasks cannot run during

	 * device resume.

/*

 * Linux driver for VMware's vmxnet3 ethernet NIC.

 *

 * Copyright (C) 2008-2021, VMware, Inc. All Rights Reserved.

 *

 * This program is free software; you can redistribute it and/or modify it

 * under the terms of the GNU General Public License as published by the

 * Free Software Foundation; version 2 of the License and no later version.

 *

 * This program is distributed in the hope that it will be useful, but

 * WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or

 * NON INFRINGEMENT.  See the GNU General Public License for more

 * details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; if not, write to the Free Software

 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.

 *

 * The full GNU General Public License is included in this distribution in

 * the file called "COPYING".

 *

 * Maintained by: pv-drivers@vmware.com

 *

 per tq stats maintained by the device */

 description,         offset */

 per tq stats maintained by the driver */

 description,         offset */

 per rq stats maintained by the device */

 per rq stats maintained by the driver */

 description,         offset */

 global stats maintained by the driver */

 description,         offset */

 Collect the dev stats into the shared area */

/* This is a version 2 of the vmxnet3 ethtool_regs which goes hand in hand with

 * the version 2 of the vmxnet3 support for ethtool(8) --register-dump.

 * Therefore, if any registers are added, removed or modified, then a version

 * bump and a corresponding change in the vmxnet3 support for ethtool(8)

 * --register-dump would be required.

 BAR1 registers */ +

 Tx queue registers */) +

 Rx queue registers */)) *

 If Rx checksum is disabled, then LRO should also be disabled */

 Validate if the tunneled packet is being offloaded by the device */

 Check if offloaded port is supported */

 update hardware LRO capability accordingly */

 this does assume each counter is 64-bit wide */

/* This is a version 2 of the vmxnet3 ethtool_regs which goes hand in hand with

 * the version 2 of the vmxnet3 support for ethtool(8) --register-dump.

 * Therefore, if any registers are added, removed or modified, then a version

 * bump and a corresponding change in the vmxnet3 support for ethtool(8)

 * --register-dump would be required.

 Update vmxnet3_get_regs_len if we want to dump more registers */

 if adapter not yet initialized, do nothing */

 round it up to a multiple of VMXNET3_RING_SIZE_ALIGN */

	/* ring0 has to be a multiple of

	 * rx_buf_per_pkt * VMXNET3_RING_SIZE_ALIGN

 ring2 has to be a multiple of VMXNET3_RING_SIZE_ALIGN */

	/* rx data ring buffer size has to be a multiple of

	 * VMXNET3_RXDATA_DESC_SIZE_ALIGN

	/*

	 * Reset_work may be in the middle of resetting the device, wait for its

	 * completion.

		/* recreate the rx queue and the tx queue based on the

			/* failed, most likely because of OOM, try default

 Report default options for RSS on vmxnet3 */

	/* RSS does not support anything other than hashing

	 * to queues on src and dst IPs and ports

 if we changed something we need to update flags */

			/* Not all requested RSS may get applied, so get and

			 * cache what was actually applied.

			/* When the device is activated, we will try to apply

			 * these rules and cache the applied value later.

 We do not allow change in unsupported parameters */

 struct ethtool_coalesce is already initialized to 0 */

/*

 * Linux ARCnet driver - "raw mode" packet encapsulation (no soft headers)

 *

 * Written 1994-1999 by Avery Pennarun.

 * Derived from skeleton.c by Donald Becker.

 *

 * Special thanks to Contemporary Controls, Inc. (www.ccontrols.com)

 *  for sponsoring the further development of this driver.

 *

 * **********************

 *

 * The original copyright of skeleton.c was as follows:

 *

 * skeleton.c Written 1993 by Donald Becker.

 * Copyright 1993 United States Government as represented by the

 * Director, National Security Agency.  This software may only be used

 * and distributed according to the terms of the GNU General Public License as

 * modified by SRC, incorporated herein by reference.

 *

 * **********************

 *

 * For more details, see drivers/net/arcnet.c

 *

 * **********************

 packet receiver */

 up to sizeof(pkt->soft) has already been copied from the card */

/* Create the ARCnet hard/soft headers for raw mode.

 * There aren't any soft headers in raw mode - not even the protocol id.

	/* Set the source hardware address.

	 *

	 * This is pretty pointless for most purposes, but it can help in

	 * debugging.  ARCnet does not allow us to change the source address

	 * in the actual packet sent.

 see linux/net/ethernet/eth.c to see where I got the following */

		/* FIXME: fill in the last byte of the dest ipaddr here

		 * to better comply with RFC1051 in "noarp" mode.

 otherwise, just fill it in and go! */

 success */

 hard header is not included in packet length */

 should never happen! other people already check for this. */

 done */

 for raw mode, we only set the bcast proto if there's no better one */

/*

 * Linux ARCnet driver - COM90xx chipset (memory-mapped buffers)

 *

 * Written 1994-1999 by Avery Pennarun.

 * Written 1999 by Martin Mares <mj@ucw.cz>.

 * Derived from skeleton.c by Donald Becker.

 *

 * Special thanks to Contemporary Controls, Inc. (www.ccontrols.com)

 *  for sponsoring the further development of this driver.

 *

 * **********************

 *

 * The original copyright of skeleton.c was as follows:

 *

 * skeleton.c Written 1993 by Donald Becker.

 * Copyright 1993 United States Government as represented by the

 * Director, National Security Agency.  This software may only be used

 * and distributed according to the terms of the GNU General Public License as

 * modified by SRC, incorporated herein by reference.

 *

 * **********************

 *

 * For more details, see drivers/net/arcnet.c

 *

 * **********************

/* Define this to speed up the autoprobe by assuming if only one io port and

 * shmem are left in the list at Stage 5, they must correspond to each

 * other.

 *

 * This is undefined by default because it might not always be true, and the

 * extra check makes the autoprobe even more careful.  Speed demons can turn

 * it on - I think it should be fine if you only have one ARCnet card

 * installed.

 *

 * If no ARCnet cards are installed, this delay never happens anyway and thus

 * the option has no effect.

 Internal function declarations */

 Known ARCnet cards */

 Handy defines for ARCnet specific stuff */

 The number of low I/O ports used by the card */

 Amount of I/O memory used by the card */

 Module parameters */

 use the insmod io= irq= shmem= options */

 use eg. device=arc1 to change name */

 set up the arrays where we'll store the possible probe addresses */

	/* Stage 1: abandon any reserved ports, or ones with status==0xFF

	 * (empty), and reset any others by reading the reset port.

 begin resetting card */

	/* Stage 2: we have now reset any possible ARCnet cards, so we can't

	 * do anything until they finish.  If D_INIT, print the list of

	 * cards that are left.

	/* Stage 3: abandon any shmem addresses that don't have the signature

	 * 0xD1 byte in the right place, or are read-only.

		/* By writing 0x42 to the TESTvalue location, we also make

		 * sure no "mirror" shmem areas show up - if they occur

		 * in another pass through this loop, they will be discarded

		 * because *cptr != TESTvalue.

	/* Stage 4: something of a dummy, to report the shmems that are

	 * still possible after stage 3.

	/* Stage 5: for any ports that have the correct status, can disable

	 * the RESET flag, and (if no irq is given) generate an autoirq,

	 * register an ARCnet device.

	 *

	 * Currently, we can only register one device per probe, so quit

	 * after the first one is found.

		/* skip this completely if an IRQ was given, because maybe

		 * we're on a machine that locks during autoirq!

			/* if we do this, we're sure to get an IRQ since the

			 * card has just reset and the NORXflag is on until

			 * we tell it to start receiving.

		/* Everything seems okay.  But which shmem, if any, puts

		 * back its signature byte when the card is reset?

		 *

		 * If there are multiple cards installed, there might be

		 * multiple shmems still in the list.

 just one shmem and port, assume they match */

 found one */

 register the card */

 remove shmem from the list */

 go to the next I/O port */

 Now put back TESTvalue on all leftover shmems. */

/* Set up the struct net_device associated with this card.  Called after

 * probing succeeds.

 allocate struct net_device */

 find the real shared memory start/end points, including mirrors */

	/* guess the actual size of one "memory mirror" - the number of

	 * bytes between copies of the shared memory.  On most cards, it's

	 * 2k (or there are no mirrors at all) but on some, it's 4k.

 reserve the irq */

 Initialize the rest of the device structure. */

 get and check the station ID from offset 1 in shmem */

/* Do a hardware reset on the card, and set up necessary registers.

 *

 * This should be called as little as possible, because it disrupts the

 * token on the network (causes a RECON) and requires a significant delay.

 *

 * However, it does make sure the card is in a defined state.

 reset the card */

 clear flags & end reset */

 don't do this until we verify that it doesn't hurt older cards! */

 verify that the ARCnet signature byte is present */

 enable extended (512-byte) packets */

 clean out all the memory to make debugging make more sense :) */

 done!  return success. */

 ERROR */

 Mem address */

 IRQ */

 IO address */

/*

 * Linux ARCnet driver - COM20020 chipset support

 *

 * Written 1997 by David Woodhouse.

 * Written 1994-1999 by Avery Pennarun.

 * Written 1999-2000 by Martin Mares <mj@ucw.cz>.

 * Derived from skeleton.c by Donald Becker.

 *

 * Special thanks to Contemporary Controls, Inc. (www.ccontrols.com)

 *  for sponsoring the further development of this driver.

 *

 * **********************

 *

 * The original copyright of skeleton.c was as follows:

 *

 * skeleton.c Written 1993 by Donald Becker.

 * Copyright 1993 United States Government as represented by the

 * Director, National Security Agency.  This software may only be used

 * and distributed according to the terms of the GNU General Public License as

 * modified by SRC, incorporated herein by reference.

 *

 * **********************

 *

 * For more details, see drivers/net/arcnet.c

 *

 * **********************

/* We cannot (yet) probe for an IO mapped card, although we can check that

 * it's where we were told it was, and even do autoirq.

		/* if we do this, we're sure to get an IRQ since the

		 * card has just reset and the NORXflag is on until

		 * we tell it to start receiving.

 <--- EDIT THESE LINES FOR YOUR CONFIGURATION */

 or use the insmod io= irq= shmem= options */

 use eg. device="arc1" to change name */

 ERROR */

 Timeout */

 CKP value */

 Backplane flag */

 Node ID */

 IRQ */

 IO address */

 MODULE */

/*

 * Linux ARCnet driver - RFC1201 (standard) packet encapsulation

 *

 * Written 1994-1999 by Avery Pennarun.

 * Derived from skeleton.c by Donald Becker.

 *

 * Special thanks to Contemporary Controls, Inc. (www.ccontrols.com)

 *  for sponsoring the further development of this driver.

 *

 * **********************

 *

 * The original copyright of skeleton.c was as follows:

 *

 * skeleton.c Written 1993 by Donald Becker.

 * Copyright 1993 United States Government as represented by the

 * Director, National Security Agency.  This software may only be used

 * and distributed according to the terms of the GNU General Public License as

 * modified by SRC, incorporated herein by reference.

 *

 * **********************

 *

 * For more details, see drivers/net/arcnet.c

 *

 * **********************

 could be more, but some receivers can't handle it... */

 This is for sending IP and ARP packages */

 if someone else already owns the broadcast, we won't take it */

/* Determine a packet's protocol ID.

 *

 * With ARCnet we have to convert everything to Ethernet-style stuff.

 Pull off the arcnet header. */

 if we're not sending to ourselves :) */

 now return the protocol number */

 packet receiver */

 Exception Packet */

 skip over 4-byte junkola */

 not split */

 already assembling one! */

		/* up to sizeof(pkt->soft) has already

		 * been copied from the card

		/* ARP packets have problems when sent from some DOS systems:

		 * the source address is always 0!

		 * So we take the hardware source addr (which is impossible

		 * to fumble) and insert it ourselves.

 make sure addresses are the right length */

 is saddr = 00? */

 split packet */

		/* NOTE: MSDOS ARP packet correction should only need to

		 * apply to unsplit packets, since ARP packets are so short.

		 *

		 * My interpretation of the RFC1201 document is that if a

		 * packet is received out of order, the entire assembly

		 * process should be aborted.

		 *

		 * The RFC also mentions "it is possible for successfully

		 * received packets to be retransmitted." As of 0.40 all

		 * previously received packets are allowed, not just the

		 * most recent one.

		 *

		 * We allow multiple assembly processes, one for each

		 * ARCnet card possible on the network.

		 * Seems rather like a waste of memory, but there's no

		 * other way to be reliable.

 first packet in split */

 already assembling one! */

 end result won't be split */

 not first packet */

			/* if we're not assembling, there's no point trying to

			 * continue.

 if not the right flag */

 harmless duplicate? ignore. */

 "bad" duplicate, kill reassembly */

 are we done? */

 Create the ARCnet hard/soft headers for RFC1201. */

 set the protocol ID according to RFC1201 */

	/* Set the source hardware address.

	 *

	 * This is pretty pointless for most purposes, but it can help in

	 * debugging.  ARCnet does not allow us to change the source address

	 * in the actual packet sent.

 split packets are done elsewhere */

 see linux/net/ethernet/eth.c to see where I got the following */

		/* FIXME: fill in the last byte of the dest ipaddr here

		 * to better comply with RFC1051 in "noarp" mode.

		 * For now, always broadcasting will probably at least get

		 * packets sent out :)

 otherwise, drop in the dest address */

 assume length <= XMTU: someone should have handled that by now. */

 exception packet - add an extra header */

 hard header is not included in packet length */

 need to do a split packet? */

 not done */

 just load the packet into the buffers and send it off */

 done */

 the "new" soft header comes right before the data chunk */

 first packet; newsoft == soft */

/*

 * Linux ARCnet driver - RFC1051 ("simple" standard) packet encapsulation

 *

 * Written 1994-1999 by Avery Pennarun.

 * Derived from skeleton.c by Donald Becker.

 *

 * Special thanks to Contemporary Controls, Inc. (www.ccontrols.com)

 *  for sponsoring the further development of this driver.

 *

 * **********************

 *

 * The original copyright of skeleton.c was as follows:

 *

 * skeleton.c Written 1993 by Donald Becker.

 * Copyright 1993 United States Government as represented by the

 * Director, National Security Agency.  This software may only be used

 * and distributed according to the terms of the GNU General Public License as

 * modified by SRC, incorporated herein by reference.

 *

 * **********************

 *

 * For more details, see drivers/net/arcnet.c

 *

 * **********************

 if someone else already owns the broadcast, we won't take it */

/* Determine a packet's protocol ID.

 *

 * With ARCnet we have to convert everything to Ethernet-style stuff.

 Pull off the arcnet header. */

 if we're not sending to ourselves :) */

 now return the protocol number */

 packet receiver */

 up to sizeof(pkt->soft) has already been copied from the card */

 Create the ARCnet hard/soft headers for RFC1051 */

 set the protocol ID according to RFC1051 */

	/* Set the source hardware address.

	 *

	 * This is pretty pointless for most purposes, but it can help in

	 * debugging.  ARCnet does not allow us to change the source address

	 * in the actual packet sent.

 see linux/net/ethernet/eth.c to see where I got the following */

		/* FIXME: fill in the last byte of the dest ipaddr here to

		 * better comply with RFC1051 in "noarp" mode.

 otherwise, just fill it in and go! */

 success */

 hard header is not included in packet length */

 should never happen! other people already check for this. */

 done */

/*

 * Linux ARCnet driver - "RIM I" (entirely mem-mapped) cards

 *

 * Written 1994-1999 by Avery Pennarun.

 * Written 1999-2000 by Martin Mares <mj@ucw.cz>.

 * Derived from skeleton.c by Donald Becker.

 *

 * Special thanks to Contemporary Controls, Inc. (www.ccontrols.com)

 *  for sponsoring the further development of this driver.

 *

 * **********************

 *

 * The original copyright of skeleton.c was as follows:

 *

 * skeleton.c Written 1993 by Donald Becker.

 * Copyright 1993 United States Government as represented by the

 * Director, National Security Agency.  This software may only be used

 * and distributed according to the terms of the GNU General Public License as

 * modified by SRC, incorporated herein by reference.

 *

 * **********************

 *

 * For more details, see drivers/net/arcnet.c

 *

 * **********************

 Internal function declarations */

 Handy defines for ARCnet specific stuff */

 Amount of I/O memory used by the card */

/* We cannot probe for a RIM I card; one reason is I don't know how to reset

 * them.  In fact, we can't even get their node ID automatically.  So, we

 * need to be passed a specific shmem address, IRQ, and node ID.

	/* Grab the memory region at mem_start for MIRROR_SIZE bytes.

	 * Later in arcrimi_found() the real size will be determined

	 * and this reserve will be released and the correct size

	 * will be taken.

/* Set up the struct net_device associated with this card.

 * Called after probing succeeds.

 reserve the irq */

 actually the station/node ID */

 find the real shared memory start/end points, including mirrors */

	/* guess the actual size of one "memory mirror" - the number of

	 * bytes between copies of the shared memory.  On most cards, it's

	 * 2k (or there are no mirrors at all) but on some, it's 4k.

 initialize the rest of the device structure. */

	/* re-reserve the memory region - arcrimi_probe() alloced this reqion

	 * but didn't know the real size.  Free that region and then re-get

	 * with the correct size.  There is a VERY slim chance this could

	 * fail.

 get and check the station ID from offset 1 in shmem */

/* Do a hardware reset on the card, and set up necessary registers.

 *

 * This should be called as little as possible, because it disrupts the

 * token on the network (causes a RECON) and requires a significant delay.

 *

 * However, it does make sure the card is in a defined state.

 fake reset */

 clear flags & end reset */

 enable extended (512-byte) packets */

 done!  return success. */

 use the insmod io= irq= node= options */

 use eg. device=arc1 to change name */

 ERROR */

 Node ID */

 IRQ */

 IO address */

 MODULE */

/*

 * Linux ARCnet driver - COM20020 chipset support

 *

 * Written 1997 by David Woodhouse.

 * Written 1994-1999 by Avery Pennarun.

 * Written 1999 by Martin Mares <mj@ucw.cz>.

 * Derived from skeleton.c by Donald Becker.

 *

 * Special thanks to Contemporary Controls, Inc. (www.ccontrols.com)

 *  for sponsoring the further development of this driver.

 *

 * **********************

 *

 * The original copyright of skeleton.c was as follows:

 *

 * skeleton.c Written 1993 by Donald Becker.

 * Copyright 1993 United States Government as represented by the

 * Director, National Security Agency.  This software may only be used

 * and distributed according to the terms of the GNU General Public License as

 * modified by SRC, incorporated herein by reference.

 *

 * **********************

 *

 * For more details, see drivers/net/arcnet.c

 *

 * **********************

 set up the address register */

 copy the data */

 set up the address register */

 copy the data */

 Reset the card and check some basic stuff during the detection stage. */

 CHECK: should we do this for SOHARD cards ? */

 Enable P1Mode for backplane mode */

 must now write the magic "restart operation" command */

 set node ID to 0x42 (but transmitter is disabled, so it's okay) */

 Read first location of memory */

 disable transmitter */

/* Set up the struct net_device associated with this card.  Called after

 * probing succeeds.

 Initialize the rest of the device structure. */

 FIXME: do this some other way! */

 must now write the magic "restart operation" command */

 Default 0x38 + register: Node ID */

 reserve the irq */

			/* The clockrates array index looks very fragile.

			 * It seems like it could have negative indexing.

/* Do a hardware reset on the card, and set up necessary registers.

 *

 * This should be called as little as possible, because it disrupts the

 * token on the network (causes a RECON) and requires a significant delay.

 *

 * However, it does make sure the card is in a defined state.

 power-up defaults */

 reset the card */

 COM20020 seems to be slower sometimes */

 clear flags & end reset */

 verify that the ARCnet signature byte is present */

 enable extended (512-byte) packets */

 done!  return success. */

 disable transmitter */

/* Set or clear the multicast filter for this adaptor.

 * num_addrs == -1    Promiscuous mode, receive all packets

 * num_addrs == 0       Normal mode, clear multicast list

 * num_addrs > 0        Multicast mode, receive normal and MC packets, and do

 *                      best-effort filtering.

 *      FIXME - do multicast stuff, not just promiscuous.

 Enable promiscuous mode */

 Disable promiscuous mode, use normal mode */

 MODULE */

/*

 * Linux ARCnet driver - COM20020 PCMCIA support

 *

 * Written 1994-1999 by Avery Pennarun,

 *    based on an ISA version by David Woodhouse.

 * Derived from ibmtr_cs.c by Steve Kipisz (pcmcia-cs 3.1.4)

 *    which was derived from pcnet_cs.c by David Hinds.

 * Some additional portions derived from skeleton.c by Donald Becker.

 *

 * Special thanks to Contemporary Controls, Inc. (www.ccontrols.com)

 *  for sponsoring the further development of this driver.

 *

 * **********************

 *

 * The original copyright of skeleton.c was as follows:

 *

 * skeleton.c Written 1993 by Donald Becker.

 * Copyright 1993 United States Government as represented by the

 * Director, National Security Agency.  This software may only be used

 * and distributed according to the terms of the GNU General Public License as

 * modified by SRC, incorporated herein by reference.

 *

 * **********************

 * Changes:

 * Arnaldo Carvalho de Melo <acme@conectiva.com.br> - 08/08/2000

 * - reorganize kmallocs in com20020_attach, checking all for failure

 *   and releasing the previous allocations if one fails

 * **********************

 *

 * For more details, see drivers/net/arcnet.c

 *

 * **********************

 set up the address register */

 copy the data */

====================================================================*/

 Parameters that can be set with 'insmod' */

====================================================================*/

====================================================================*/

 Create new network device */

 fill in our module parameters as defaults */

 com20020_attach */

	/* this is necessary because we register our IRQ separately

	 * from card services.

 Unlink device structure, free bits */

 com20020_detach */

 pretend all of them can 10Mbit */

 calls register_netdev */

 com20020_config */

/*

 * Linux ARCnet driver - COM90xx chipset (IO-mapped buffers)

 *

 * Written 1997 by David Woodhouse.

 * Written 1994-1999 by Avery Pennarun.

 * Written 1999-2000 by Martin Mares <mj@ucw.cz>.

 * Derived from skeleton.c by Donald Becker.

 *

 * Special thanks to Contemporary Controls, Inc. (www.ccontrols.com)

 *  for sponsoring the further development of this driver.

 *

 * **********************

 *

 * The original copyright of skeleton.c was as follows:

 *

 * skeleton.c Written 1993 by Donald Becker.

 * Copyright 1993 United States Government as represented by the

 * Director, National Security Agency.  This software may only be used

 * and distributed according to the terms of the GNU General Public License as

 * modified by SRC, incorporated herein by reference.

 *

 * **********************

 *

 * For more details, see drivers/net/arcnet.c

 *

 * **********************

 Internal function declarations */

 Handy defines for ARCnet specific stuff */

 The number of low I/O ports used by the card. */

/****************************************************************************

 *                                                                          *

 * IO-mapped operation routines                                             *

 *                                                                          *

/* We cannot probe for an IO mapped card either, although we can check that

 * it's where we were told it was, and even autoirq

 Read first loc'n of memory */

		/* if we do this, we're sure to get an IRQ since the

		 * card has just reset and the NORXflag is on until

		 * we tell it to start receiving.

 end of probing */

/* Set up the struct net_device associated with this card.  Called after

 * probing succeeds.

 Reserve the irq */

 Reserve the I/O region */

 get and check the station ID from offset 1 in shmem */

/* Do a hardware reset on the card, and set up necessary registers.

 *

 * This should be called as little as possible, because it disrupts the

 * token on the network (causes a RECON) and requires a significant delay.

 *

 * However, it does make sure the card is in a defined state.

 reset the card */

 Set the thing to IO-mapped, 8-bit  mode */

 clear flags & end reset */

 verify that the ARCnet signature byte is present */

 enable extended (512-byte) packets */

 done!  return success. */

 use the insmod io= irq= shmem= options */

 use eg. device=arc1 to change name */

 ERROR */

 IRQ */

 IO address */

	/* In case the old driver is loaded later,

	 * set the thing back to MMAP mode

/*

 * Linux ARCnet driver - COM20020 PCI support

 * Contemporary Controls PCI20 and SOHARD SH-ARC PCI

 *

 * Written 1994-1999 by Avery Pennarun,

 *    based on an ISA version by David Woodhouse.

 * Written 1999-2000 by Martin Mares <mj@ucw.cz>.

 * Derived from skeleton.c by Donald Becker.

 *

 * Special thanks to Contemporary Controls, Inc. (www.ccontrols.com)

 *  for sponsoring the further development of this driver.

 *

 * **********************

 *

 * The original copyright of skeleton.c was as follows:

 *

 * skeleton.c Written 1993 by Donald Becker.

 * Copyright 1993 United States Government as represented by the

 * Director, National Security Agency.  This software may only be used

 * and distributed according to the terms of the GNU General Public License as

 * modified by SRC, incorporated herein by reference.

 *

 * **********************

 *

 * For more details, see drivers/net/arcnet.c

 *

 * **********************

 Module parameters */

 use eg. device="arc1" to change name */

		/* Dummy access after Reset

		 * ARCNET controller needs

		 * this access to detect bustype

 Get the dev_id from the PLX rotary coder */

 SOHARD needs PCI base addr 4 */

/*

 * Linux ARCnet driver - "cap mode" packet encapsulation.

 * It adds sequence numbers to packets for communicating between a user space

 * application and the driver. After a transmit it sends a packet with protocol

 * byte 0 back up to the userspace containing the sequence number of the packet

 * plus the transmit-status on the ArcNet.

 *

 * Written 2002-4 by Esben Nielsen, Vestas Wind Systems A/S

 * Derived from arc-rawmode.c by Avery Pennarun.

 * arc-rawmode was in turned based on skeleton.c, see below.

 *

 * **********************

 *

 * The original copyright of skeleton.c was as follows:

 *

 * skeleton.c Written 1993 by Donald Becker.

 * Copyright 1993 United States Government as represented by the

 * Director, National Security Agency.  This software may only be used

 * and distributed according to the terms of the GNU General Public License as

 * modified by SRC, incorporated herein by reference.

 *

 * **********************

 *

 * For more details, see drivers/net/arcnet.c

 *

 * **********************

 packet receiver */

	/* up to sizeof(pkt->soft) has already been copied from the card

	 * squeeze in an int for the cap encapsulation

	 * use these variables to be sure we count in bytes, not in

	 * sizeof(struct archdr)

/* Create the ARCnet hard/soft headers for cap mode.

 * There aren't any soft headers in cap mode - not even the protocol id.

	/* Set the source hardware address.

	 *

	 * This is pretty pointless for most purposes, but it can help in

	 * debugging.  ARCnet does not allow us to change the source address in

	 * the actual packet sent)

 see linux/net/ethernet/eth.c to see where I got the following */

		/* FIXME: fill in the last byte of the dest ipaddr here to

		 * better comply with RFC1051 in "noarp" mode.

 otherwise, just fill it in and go! */

 success */

 hard header is not included in packet length */

 And neither is the cookie field */

 should never happen! other people already check for this. */

 Copy the arcnet-header + the protocol byte down: */

	/* Skip the extra integer we have written into it as a cookie

	 * but write the rest of the message:

 done */

 Now alloc a skb to send back up through the layers: */

 skb_pull(ackskb, ARC_HDR_SIZE); */

 using protocol 0 for acknowledge */

 We are always finished when in this protocol */

 for cap mode, we only set the bcast proto if there's no better one */

/*

 * Linux ARCnet driver - device-independent routines

 *

 * Written 1997 by David Woodhouse.

 * Written 1994-1999 by Avery Pennarun.

 * Written 1999-2000 by Martin Mares <mj@ucw.cz>.

 * Derived from skeleton.c by Donald Becker.

 *

 * Special thanks to Contemporary Controls, Inc. (www.ccontrols.com)

 *  for sponsoring the further development of this driver.

 *

 * **********************

 *

 * The original copyright was as follows:

 *

 * skeleton.c Written 1993 by Donald Becker.

 * Copyright 1993 United States Government as represented by the

 * Director, National Security Agency.  This software may only be used

 * and distributed according to the terms of the GNU General Public License as

 * modified by SRC, incorporated herein by reference.

 *

 * **********************

 *

 * The change log is now in a file called ChangeLog in this directory.

 *

 * Sources:

 *  - Crynwr arcnet.com/arcether.com packet drivers.

 *  - arcnet.c v0.00 dated 1/1/94 and apparently by

 *     Donald Becker - it didn't work :)

 *  - skeleton.c v0.05 dated 11/16/93 by Donald Becker

 *     (from Linux Kernel 1.1.45)

 *  - RFC's 1201 and 1051 - re: TCP/IP over ARCnet

 *  - The official ARCnet COM9026 data sheets (!) thanks to

 *     Ken Cornetet <kcornete@nyx10.cs.du.edu>

 *  - The official ARCnet COM20020 data sheets.

 *  - Information on some more obscure ARCnet controller chips, thanks

 *     to the nice people at SMSC.

 *  - net/inet/eth.c (from kernel 1.1.50) for header-building info.

 *  - Alternate Linux ARCnet source by V.Shergin <vsher@sao.stavropol.su>

 *  - Textual information and more alternate source from Joachim Koenig

 *     <jojo@repas.de>

 "do nothing" functions for protocol drivers */

/* one ArcProto per possible proto ID.  None of the elements of

 * arc_proto_map are allowed to be NULL; they will get set to

 * arc_proto_default instead.  It also must not be NULL; if you would like

 * to set it to NULL, set it to &arc_proto_null instead.

 Exported function prototypes */

 Internal function prototypes */

 initialize the protocol map */

 Dump the contents of an sk_buff */

 dump the packet */

 Dump the contents of an ARCnet buffer */

	/* hw.copy_from_card expects IRQ context so take the IRQ lock

	 * to keep it single threaded

 if the offset[0] byte is nonzero, this is a 256-byte packet */

 dump the packet */

 Trigger a LED event in response to a ARCNET device event */

/* Register ARCNET LED triggers for a arcnet device

 *

 * This is normally called from a driver's probe function

/* Unregister a protocol driver from the arc_proto_map.  Protocol drivers

 * are responsible for registering themselves, but the unregister routine

 * is pretty generic so we'll do it here.

/* Add a buffer to the queue.  Only the interrupt handler is allowed to do

 * this, unless interrupts are disabled.

 *

 * Note: we don't check for a full queue, since there aren't enough buffers

 * to more than fill it.

/* Get a buffer from the queue.

 * If this returns -1, there are no buffers available.

 already in this function */

 we can continue */

 choose the smallest MTU of all available encaps */

 Setup a struct device for ARCnet. */

 for us, broadcasts are address 0 */

 New-style flags. */

	/* Do not bring the network interface back up if an ifdown

	 * was already done.

	/* Do another check, in case of an ifdown that was triggered in

	 * the small race window between the exit condition above and

	 * acquiring RTNL.

 finally erasing outgoing skb */

	/* Do not cancel this at ->ndo_close(), as the workqueue itself

	 * indirectly calls the ifdown path through dev_close().

/* Open/initialize the board.  This is called sometime after booting when

 * the 'ifconfig' program is run.

 *

 * This routine should set everything up anew at each open, even registers

 * that "should" only need to be set once at boot, so that there is

 * non-reboot way to recover if something goes wrong.

	/* try to put the card in a defined state - if it fails the first

	 * time, actually reset it.

 autodetect the encapsulation for each host. */

 the broadcast address is special - use the 'bcast' protocol */

 initialize buffers */

 bring up the hardware driver */

 make sure we're ready to receive IRQ's. */

	udelay(1);		/* give it time to set the mask before

				 * we reset it again. (may not even be

				 * necessary)

 The inverse routine to arcnet_open - shuts down the card. */

 flush TX and disable RX */

 stop transmit */

 disable receive */

 shut down the card */

 reset counters */

 Type is host order - ? */

		/* if the dest addr isn't provided, we can't choose an

		 * encapsulation!  Store the packet type (eg. ETH_P_IP)

		 * for now, and we'll push on a real header when we do

		 * rebuild_header.

 XXX: Why not use skb->mac_len? */

 return error -- can't transmit yet! */

 otherwise, we can just add the header as usual. */

 Called by the kernel in order to transmit a packet. */

 fits in one packet? */

 don't try again */

 We're busy transmitting a packet... */

			/* done right away and we don't want to acknowledge

			 *  the package later - forget about it now

 do it the 'split' way */

 make sure we didn't ignore a TX IRQ while we were in here */

 no need to try again */

/* Actually start transmitting a packet that was loaded into a buffer

 * by prepare_tx.  This should _only_ be called by the interrupt handler.

 start sending */

 Called by the kernel when transmit times out */

 transmit _DID_ finish */

 make sure we didn't miss a TX or a EXC NAK IRQ */

/* The typical workload of the driver: Handle the network interface

 * interrupts. Establish which device needs attention, and call the correct

 * chipset interrupt handler.

	/* RESET flag was enabled - if device is not running, we must

	 * clear it right away (but nothing else).

		/* RESET flag was enabled - card is resetting and if RX is

		 * disabled, it's NOT because we just got a packet.

		 *

		 * The card is in an undefined state.

		 * Clear it out and start over.

 get out of the interrupt handler! */

		/* RX is inhibited - we must have received something.

		 * Prepare to receive into the next buffer.

		 *

		 * We don't actually copy the received packet from the card

		 * until after the transmit handler runs (and possibly

		 * launches the next tx); this should improve latency slightly

		 * if we get both types of interrupts at once.

 disable transmit */

 a transmit finished, and we're interested in it. */

 send another packet if there is one */

 continue a split packet, if any */

 that was the last segment */

 inform upper layers of idleness, if necessary */

 now process the received packet, if any */

 MYRECON bit is at bit 7 of diagstatus */

 is the RECON info empty or old? */

 add to current RECON counter */

				/* if network is marked up;

				 * and first_recon and last_recon are 60+ apart;

				 * and the average no. of recons counted is

				 *    > RECON_THRESHOLD/min;

				 * then print a warning message.

					/* reset counters if we've gone for

					 *  over a minute.

/* This is a generic packet receiver that calls arcnet??_rx depending on the

 * protocol ID found.

 get the full header, if possible */

 call the right receiver for the protocol */

 broadcasts will always be done with the last-used encap. */

 in striking contrast, the following isn't a hack. */

 call the protocol-specific receiver. */

 always fails */

 the "do nothing" prepare_tx function warns that there's nothing to do. */

 send a packet to myself -- will never get received, of course */

 only one byte of actual data (and it's random) */

 done */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2012, Fabio Baltieri <fabio.baltieri@gmail.com>

 * Copyright 2012, Kurt Van Dijck <kurt.van.dijck@eia.be>

 Trigger a LED event in response to a CAN device event */

/* Register CAN LED triggers for a CAN device

 *

 * This is normally called from a driver's probe function

 NETDEV rename notifier to rename the associated led triggers too */

 notifier block for netdevice event */

/*

 * sun4i_can.c - CAN bus controller driver for Allwinner SUN4I&SUN7I based SoCs

 *

 * Copyright (C) 2013 Peter Chen

 * Copyright (C) 2015 Gerhard Bertelsmann

 * All rights reserved.

 *

 * Parts of this software are based on (derived from) the SJA1000 code by:

 *   Copyright (C) 2014 Oliver Hartkopp <oliver.hartkopp@volkswagen.de>

 *   Copyright (C) 2007 Wolfgang Grandegger <wg@grandegger.com>

 *   Copyright (C) 2002-2007 Volkswagen Group Electronic Research

 *   Copyright (C) 2003 Matthias Brukner, Trajet Gmbh, Rebenring 33,

 *   38106 Braunschweig, GERMANY

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 * 1. Redistributions of source code must retain the above copyright

 *    notice, this list of conditions and the following disclaimer.

 * 2. Redistributions in binary form must reproduce the above copyright

 *    notice, this list of conditions and the following disclaimer in the

 *    documentation and/or other materials provided with the distribution.

 * 3. Neither the name of Volkswagen nor the names of its contributors

 *    may be used to endorse or promote products derived from this software

 *    without specific prior written permission.

 *

 * Alternatively, provided that this notice is retained in full, this

 * software may be distributed under the terms of the GNU General

 * Public License ("GPL") version 2, in which case the provisions of the

 * GPL apply INSTEAD OF those given above.

 *

 * The provided data structures and external interfaces from this code

 * are not restricted to be used by modules with a GPL compatible license.

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS

 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT

 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR

 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT

 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,

 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT

 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,

 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY

 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE

 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH

 * DAMAGE.

 *

 Registers address (physical base address 0x01C2BC00) */

 CAN Mode Select */

 CAN Command */

 CAN Status */

 CAN Interrupt Flag */

 CAN Interrupt Enable */

 CAN Bus Timing 0 */

 CAN Tx Error Warning Limit */

 CAN Error Counter */

 CAN Receive Message Counter */

 CAN Receive Buffer Start Address */

 CAN Tx/Rx Buffer 0 */

 CAN Tx/Rx Buffer 1 */

 CAN Tx/Rx Buffer 2 */

 CAN Tx/Rx Buffer 3 */

 CAN Tx/Rx Buffer 4 */

 CAN Tx/Rx Buffer 5 */

 CAN Tx/Rx Buffer 6 */

 CAN Tx/Rx Buffer 7 */

 CAN Tx/Rx Buffer 8 */

 CAN Tx/Rx Buffer 9 */

 CAN Tx/Rx Buffer 10 */

 CAN Tx/Rx Buffer 11 */

 CAN Tx/Rx Buffer 12 */

 CAN Acceptance Code 0 */

 CAN Acceptance Mask 0 */

 CAN transmit buffer start */

 CAN transmit buffer end */

 Controller Register Description */

/* mode select register (r/w)

 * offset:0x0000 default:0x0000_0001

 write in reset mode */

 write in reset mode */

/* command register (w)

 * offset:0x0004 default:0x0000_0000

/* status register (r)

 * offset:0x0008 default:0x0000_003c

/* interrupt register (r)

 * offset:0x000c default:0x0000_0000

/* interrupt enable register (r/w)

 * offset:0x0010 default:0x0000_0000

 error code */

 filter mode */

 message buffer flags */

 max. number of interrupts handled in ISR */

 lock for concurrent cmd register writes */

 bittiming is called in reset_mode only */

 we need to enter the reset mode */

 set filters - we accept all */

 clear error counters and error code capture */

 enable interrupts */

 enter the selected mode */

 we are ready to enter the normal mode */

 we need to enter reset mode */

 disable all interrupts */

/* transmit a CAN message

 * message layout in the sk_buff should be like this:

 * xx xx xx xx         ff         ll 00 11 22 33 44 55 66 77

 * [ can_id ] [flags] [len] [can data (up to 8 bytes]

 create zero'ed CAN frame buffer */

 remote frame ? */

 we don't skip if alloc fails because we want the stats anyhow */

 data overrun interrupt */

		/* reset the CAN IP by entering reset mode

		 * ignoring timeout error

 clear bit */

 error warning interrupt */

 bus error interrupt */

 error occurred during transmission? */

 error passive interrupt */

 arbitration lost interrupt */

 transmission complete interrupt */

 receive interrupt - don't read if overrun occurred */

 RX buffer is not empty */

 error interrupt */

 clear interrupts */

 common open */

 register interrupt handler */

 turn on clocking for CAN peripheral block */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Socket CAN driver for Aeroflex Gaisler GRCAN and GRHCAN.

 *

 * 2012 (c) Aeroflex Gaisler AB

 *

 * This driver supports GRCAN and GRHCAN CAN controllers available in the GRLIB

 * VHDL IP core library.

 *

 * Full documentation of the GRCAN core can be found here:

 * http://www.gaisler.com/products/grlib/grip.pdf

 *

 * See "Documentation/devicetree/bindings/net/can/grcan.txt" for information on

 * open firmware properties.

 *

 * See "Documentation/ABI/testing/sysfs-class-net-grcan" for information on the

 * sysfs interface.

 *

 * See "Documentation/admin-guide/kernel-parameters.rst" for information on the module

 * parameters.

 *

 * Contributors: Andreas Larsson <andreas@gaisler.com>

 0x00 */

 0x04 */

 0x08 */

 0x18 - CanMASK */

 0x1c - CanCODE */

 0x100 */

 0x104 */

 0x108 */

 0x10C */

 0x110 */

 0x114 */

 0x200 */

 0x204 */

 0x208 */

 0x20C */

 0x210 */

 0x214 */

 0x300 */

 0x304 */

 0x308 */

 0x30C */

 0x310 */

 0x314 */

 0x318 */

 0x31C */

 Available in some hardware */

 Note: not BRP */

 Relative offset of IRQ sources to AMBA Plug&Play */

 GRCAN configuration parameters */

 GRCAN private data structure */

 must be the first member */

 ioremap'ed registers */

 We allocate this on our own */

 Length of queued frames */

	/* The echo skb pointer, pointing into echo_skb and indicating which

	 * frames can be echoed back. See the "Notes on the tx cyclic buffer

	 * handling"-comment for grcan_start_xmit for more details.

	/* Lock for controlling changes to the netif tx queue state, accesses to

	 * the echo_skb pointer eskbp and for making sure that a running reset

	 * and/or a close of the interface is done without interference from

	 * other parts of the code.

	 *

	 * The echo_skb pointer, eskbp, should only be accessed under this lock

	 * as it can be changed in several places and together with decisions on

	 * whether to wake up the tx queue.

	 *

	 * The tx queue must never be woken up if there is a running reset or

	 * close in progress.

	 *

	 * A running reset (see below on need_txbug_workaround) should never be

	 * done if the interface is closing down and several running resets

	 * should never be scheduled simultaneously.

	/* Whether a workaround is needed due to a bug in older hardware. In

	 * this case, the driver both tries to prevent the bug from being

	 * triggered and recovers, if the bug nevertheless happens, by doing a

	 * running reset. A running reset, resets the device and continues from

	 * where it were without being noticeable from outside the driver (apart

	 * from slight delays).

	/* To trigger initization of running reset and to trigger running reset

	 * respectively in the case of a hanged device due to a txbug.

	/* To avoid waking up the netif queue and restarting timers

	 * when a reset is scheduled or when closing of the device is

	 * undergoing

 Wait time for a short wait for ongoing to clear */

/* Limit on the number of transmitted bits of an eff frame according to the CAN

 * specification: 1 bit start of frame, 32 bits arbitration field, 6 bits

 * control field, 8 bytes data field, 16 bits crc field, 2 bits ACK field and 7

 * bits end of frame

 a and b should both be in [0,size] and a == b == size should not hold */

 a and b should both be in [0,size) */

 Available slots for new transmissions */

 Configuration parameters that can be set via module parameters */

	/* Should never happen - function will not be called when

	 * device is up

 Note bpr and brp are different concepts */

 tseg1 - 1 */

 Reset device, but keep configuration information */

 Turn off hardware filtering - regs->rxcode set to 0 by reset */

 stop device without changing any configurations */

/* Let priv->eskbp catch up to regs->txrd and echo back the skbs if echo

 * is true and free them otherwise.

 *

 * If budget is >= 0, stop after handling at most budget skbs. Otherwise,

 * continue until priv->eskbp catches up to regs->txrd.

 *

 * priv->lock *must* be held when calling this function

	/* Updates to priv->eskbp and wake-ups of the queue needs to

	 * be atomic towards the reads of priv->eskbp and shut-downs

	 * of the queue in grcan_start_xmit.

 Normal echo of messages */

 For cleanup of untransmitted messages */

 Should never happen */

		/* By the time an GRCAN_IRQ_TXLOSS is generated in

		 * one-shot mode there is no problem in writing

		 * to TXRD even in versions of the hardware in

		 * which GRCAN_TXCTRL_ONGOING is not cleared properly

		 * in one-shot mode.

 Skip message and discard echo-skb */

 Zero potential error_frame */

	/* Message lost interrupt. This might be due to arbitration error, but

	 * is also triggered when there is no one else on the can bus or when

	 * there is a problem with the hardware interface or the bus itself. As

	 * arbitration errors can not be singled out, no error frames are

	 * generated reporting this event as an arbitration error.

 Take care of failed one-shot transmit */

		/* Stop printing as soon as error passive or bus off is in

		 * effect to limit the amount of txloss debug printouts.

	/* Conditions dealing with the error counters. There is no interrupt for

	 * error warning, but there are interrupts for increases of the error

	 * counters.

 Figure out current state */

 Handle and report state changes */

				/* Prevent the hardware from recovering from bus

				 * off on its own if restart is disabled.

 There are no others at this point */

 Report automatic restarts */

 Data overrun interrupt */

	/* AHB bus error interrupts (not CAN bus errors) - shut down the

	 * device.

 Prevent anything to be enabled again and halt device */

	/* Pass on error frame if something to report,

	 * i.e. id contains some information

 Find out the source */

	/* If we got TX progress, the device has not hanged,

	 * so disable the hang timer

 Frame(s) received or transmitted */

		/* Disable tx/rx interrupts and schedule poll(). No need for

		 * locking as interference from a running reset at worst leads

		 * to an extra interrupt.

 (Potential) error conditions to take care of */

/* Reset device and restart operations from where they were.

 *

 * This assumes that RXCTRL & RXCTRL is properly disabled and that RX

 * is not ONGOING (TX might be stuck in ONGOING due to a harwrware bug

 * for single shot)

	/* This temporarily messes with eskbp, so we need to lock

	 * priv->lock

 Save and reset - config register preserved by grcan_reset */

 Restore */

 Turn on device again */

		/* Start queue if there is size and listen-onle mode is not

		 * enabled

/* Waiting time in usecs corresponding to the transmission of three maximum

 * sized can frames in the given bitrate (in bits/sec). Waiting for this amount

 * of time makes sure that the can controller have time to finish sending or

 * receiving a frame with a good margin.

 *

 * usecs/sec * number of frames * bits/frame / bits/sec

/* Set timer so that it will not fire until after a period in which the can

 * controller have a good margin to finish transmitting a frame unless it has

 * hanged

 Disable channels and schedule a running reset */

	/* The main body of this function must never be executed again

	 * until after an execution of grcan_running_reset

	/* Need a whole number of GRCAN_BUFFER_ALIGNMENT for the large,

	 * i.e. first buffer

 Put the small buffer after that */

 Extra GRCAN_BUFFER_ALIGNMENT to allow for alignment */

 priv->lock *must* be held when calling this function */

 regs->txwr, regs->txrd and priv->eskbp already set to 0 by reset */

 regs->rxwr and regs->rxrd already set to 0 by reset */

 Enable interrupts */

 Enable interfaces, channels and device */

		/* This might be called to restart the device to recover from

		 * bus off errors

 Allocate memory */

 Get can device up */

		/* With napi we don't get TX interrupts for a while,

		 * so prevent a running reset while catching up

 Check for packet to receive */

 Take care of packet */

 Update statistics and read pointer */

	/* Make sure everything is read before allowing hardware to

	 * use the memory

 Update read pointer - no need to check for ongoing */

 Half of the budget for receiving messages */

	/* Half of the budget for transmitting messages as that can trigger echo

	 * frames being received

		/* Guarantee no interference with a running reset that otherwise

		 * could turn off interrupts.

		/* Enable tx and rx interrupts again. No need to check

		 * priv->closing as napi_disable in grcan_close is waiting for

		 * scheduled napi calls to finish.

/* Work tx bug by waiting while for the risky situation to clear. If that fails,

 * drop a frame in one-shot mode or indicate a busy device otherwise.

 *

 * Returns 0 on successful wait. Otherwise it sets *netdev_tx_status to the

 * value that should be returned by grcan_start_xmit when aborting the xmit.

	/* Wait a while for ongoing to be cleared or read pointer to catch up to

	 * write pointer. The latter is needed due to a bug in older versions of

	 * GRCAN in which ONGOING is not cleared properly one-shot mode when a

	 * transmission fails.

 Clean up, in case the situation was not resolved */

 Queue might have been stopped earlier in grcan_start_xmit */

 Set a timer to resolve a hanged tx controller */

		/* In one-shot mode we should never end up here because

		 * then the interrupt handler increases txrd on TXLOSS,

		 * but it is consistent with one-shot mode to drop the

		 * frame in this case.

		/* In normal mode the socket-can transmission queue get

		 * to keep the frame so that it can be retransmitted

		 * later

/* Notes on the tx cyclic buffer handling:

 *

 * regs->txwr	- the next slot for the driver to put data to be sent

 * regs->txrd	- the next slot for the device to read data

 * priv->eskbp	- the next slot for the driver to call can_put_echo_skb for

 *

 * grcan_start_xmit can enter more messages as long as regs->txwr does

 * not reach priv->eskbp (within 1 message gap)

 *

 * The device sends messages until regs->txrd reaches regs->txwr

 *

 * The interrupt calls handler calls can_put_echo_skb until

 * priv->eskbp reaches regs->txrd

	/* Trying to transmit in silent mode will generate error interrupts, but

	 * this should never happen - the queue should not have been started.

	/* Reads of priv->eskbp and shut-downs of the queue needs to

	 * be atomic towards the updates to priv->eskbp and wake-ups

	 * of the queue in the interrupt handler.

 End of critical section*/

	/* This should never happen. If circular buffer is full, the

	 * netif_stop_queue should have been stopped already.

 Convert and write CAN message to DMA buffer */

	/* Checking that channel has not been disabled. These cases

	 * should never happen

	/* Bug workaround for old version of grcan where updating txwr

	 * in the same clock cycle as the controller updates txrd to

	 * the current txwr could hang the can controller

	/* Prepare skb for echoing. This must be after the bug workaround above

	 * as ownership of the skb is passed on by calling can_put_echo_skb.

	 * Returning NETDEV_TX_BUSY or accessing skb or cf after a call to

	 * can_put_echo_skb would be an error unless other measures are

	 * taken.

 Store dlc for statistics */

	/* Make sure everything is written before allowing hardware to

	 * read from the memory

 Update write pointer to start transmission */

 ========== Setting up sysfs interface and module parameters ========== */

/* The following configuration options are made available both via module

 * parameters and writable sysfs files. See the chapter about GRCAN in the

 * documentation for the GRLIB VHDL library for further details.

/* The tx and rx buffer size configuration options are only available via module

 * parameters.

/* Function that makes sure that configuration done using

 * module parameters are set to valid values

 Config attrs */

 ========== Setting up the driver ========== */

 Discover if triple sampling is supported by hardware */

	/* Reset device to allow bit-timing to be set. No need to call

	 * grcan_reset at this stage. That is done in grcan_open.

	/* Compare GRLIB version number with the first that does not

	 * have the tx bug (see start_xmit)

 Will in turn call grcan_close */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Janz MODULbus VMOD-ICAN3 CAN Interface Driver

 *

 * Copyright (c) 2010 Ira W. Snyder <iws@ovro.caltech.edu>

 the DPM has 64k of memory, organized into 256x 256 byte pages */

 JANZ ICAN3 "old-style" host interface queue page numbers */

 Janz ICAN3 "old-style" host interface control registers */

 ICAN only */

 host only */

 big endian firmware stamp */

 Janz ICAN3 "new-style" host interface queue page numbers */

 The first free page in the DPM is #9 */

 Janz ICAN3 "new-style" and "fast" host interface descriptor flags */

 Janz ICAN3 Firmware Messages */

/*

 * Janz ICAN3 CAN Inquiry Message Types

 *

 * NOTE: there appears to be a firmware bug here. You must send

 * NOTE: INQUIRY_STATUS and expect to receive an INQUIRY_EXTENDED

 * NOTE: response. The controller never responds to a message with

 * NOTE: the INQUIRY_EXTENDED subspec :(

 Janz ICAN3 CAN Set Acceptance Filter Mask Message Types */

 Janz ICAN3 CAN Hardware Configuration Message Types */

 Janz ICAN3 CAN Event Indication Message Types */

 Janz ICAN3 CAN Frame Conversion */

 Janz ICAN3 NMTS subtypes */

 Janz ICAN3 LMTS subtypes */

 Janz ICAN3 NMTS Event indications */

/*

 * SJA1000 Status and Error Register Definitions

 *

 * Copied from drivers/net/can/sja1000/sja1000.h

 status register content */

 ECC register */

 Number of buffers for use in the "new-style" host interface */

 Number of buffers for use in the "fast" host interface */

 SJA1000 Clock Input */

 Janz ICAN3 firmware types */

 Driver Name */

 DPM Control Registers -- starts at offset 0x100 in the MODULbus registers */

 window address register */

	/*

	 * Read access: clear interrupt from microcontroller

	 * Write access: send interrupt to microcontroller

 write-only: reset all hardware on the module */

 write-only: generate an interrupt to the TPU */

 must be the first member */

 CAN network device */

 module number */

 base address of registers and IRQ */

 CAN bus termination status */

 CAN bus error status registers */

 firmware type */

 old and new style host interface */

 queue for echo packets */

	/*

	 * Any function which changes the current DPM page must hold this

	 * lock while it is performing data accesses. This ensures that the

	 * function will not be preempted and end up reading data from a

	 * different DPM page than it expects.

 new host interface */

 fast host interface */

 first free DPM page */

 write to the window basic address register */

/*

 * ICAN3 "old-style" host interface

/*

 * Receive a message from the ICAN3 "old-style" firmware interface

 *

 * LOCKING: must hold mod->lock

 *

 * returns 0 on success, -ENOMEM when no message exists

 get the MSYNC registers */

 find the first free mbox to read */

 copy the message */

	/*

	 * notify the firmware that the read buffer is available

	 * for it to fill again

/*

 * Send a message through the "old-style" firmware interface

 *

 * LOCKING: must hold mod->lock

 *

 * returns 0 on success, -ENOMEM when no free space exists

 get the MSYNC registers */

 calculate a free mbox to use */

 copy the message to the DPM */

/*

 * ICAN3 "new-style" Host Interface Setup

 setup the internal datastructures for RX */

 tohost queue descriptors are in page 5 */

 initialize the tohost (rx) queue descriptors: pages 9-24 */

 I L=1 */

 set wrap flag on last buffer */

 fromhost (tx) mid queue descriptors are in page 6 */

 setup the internal datastructures for TX */

 initialize the fromhost mid queue descriptors: pages 25-40 */

 V L=1 */

 set wrap flag on last buffer */

 fromhost hi queue descriptors are in page 7 */

 initialize only a single buffer in the fromhost hi queue (unused) */

 VW L=1 */

 fromhost low queue descriptors are in page 8 */

 initialize only a single buffer in the fromhost low queue (unused) */

 VW L=1 */

/*

 * ICAN3 Fast Host Interface Setup

 save the start recv page */

 build a single fast tohost queue descriptor */

 build the tohost queue descriptor ring in memory */

 set the wrap bit on the last buffer */

 switch to the correct page */

 copy the descriptor to the DPM */

 move to the next page if necessary */

 make sure we page-align the next queue */

 save the start xmit page */

 build a single fast fromhost queue descriptor */

 build the fromhost queue descriptor ring in memory */

 set the wrap bit on the last buffer */

 switch to the correct page */

 copy the descriptor to the DPM */

 move to the next page if necessary */

/*

 * ICAN3 "new-style" Host Interface Message Helpers

/*

 * LOCKING: must hold mod->lock

 switch to the fromhost mid queue, and read the buffer descriptor */

 switch to the data page, copy the data */

 switch back to the descriptor, set the valid bit, write it back */

 update the tx number */

/*

 * LOCKING: must hold mod->lock

 switch to the tohost queue, and read the buffer descriptor */

 switch to the data page, copy the data */

 switch back to the descriptor, toggle the valid bit, write it back */

 update the rx number */

/*

 * Message Send / Recv Helpers

/*

 * Quick Pre-constructed Messages

 If we're not using the old interface, switching seems bogus */

 mark the module as using the new host interface */

 write the tohost queue start address */

 write the fromhost queue start address */

 If we're not using the new interface yet, we cannot do this */

/*

 * Setup the CAN filter to either accept or reject all

 * messages from the CAN bus.

 Standard Frame Format */

 IDLo LSB */

 IDLo MSB */

 IDHi LSB */

 IDHi MSB */

 accept all frames for fast host if, or reject all frames */

 Extended Frame Format */

 MUX = 0 */

 IDLo LSB */

 IDLo MSB */

 IDHi LSB */

 IDHi MSB */

 accept all frames for fast host if, or reject all frames */

/*

 * Bring the CAN bus online or offline

 This algorithm was stolen from drivers/net/can/sja1000/sja1000.c      */

 The bittiming register command for the ICAN3 just sets the bit timing */

 registers on the SJA1000 chip directly                                */

 set bittiming */

 can-on/off request */

 bittiming + can-on/off request */

			/* create NMT Slave Node for error processing

			 *   class 2 (with error capability, see CiA/DS203-1)

			 *   id    1

			 *   name  locnod1 (must be exactly 7 bytes)

 node class */

 node id */

 node name  */

/*

 * ICAN3 to Linux CAN Frame Conversion

 28-21 */

 20-13 */

 12-5  */

 10-3  */

 2-0   */

 clear out any stale data in the descriptor */

 we always use the extended format, with the ECHO flag set */

 support single transmission (no retries) mode */

 pack the id into the correct places */

 28-21 */

 20-13 */

 12-5  */

 4-0   */

 bits 10-3 */

 bits 2-0  */

 copy the data bits into the descriptor */

/*

 * Interrupt Handling

/*

 * Handle an ID + Version message response from the firmware. We never generate

 * this message in production code, but it is very useful when debugging to be

 * able to display this message.

	/*

	 * Report that communication messages with the microcontroller firmware

	 * are being lost. These are never CAN frames, so we do not generate an

	 * error frame for userspace

	/*

	 * Oops, this indicates that we have lost messages in the fast queue,

	 * which are exclusively CAN messages. Our driver isn't reading CAN

	 * frames fast enough.

	 *

	 * We'll pretend that the SJA1000 told us that it ran out of buffer

	 * space, because there is not a better message for this.

/*

 * Handle CAN Event Indication Messages from the firmware

 *

 * The ICAN3 firmware provides the values of some SJA1000 registers when it

 * generates this message. The code below is largely copied from the

 * drivers/net/can/sja1000/sja1000.c file, and adapted as necessary

 we can only handle the SJA1000 part */

 check the message length for sanity */

	/*

	 * This hardware lacks any support other than bus error messages to

	 * determine if packet transmission has failed.

	 *

	 * When TX errors happen, one echo skb needs to be dropped from the

	 * front of the queue.

	 *

	 * A small bit of code is duplicated here and below, to avoid error

	 * skb allocation when it will just be freed immediately.

 TX error */

		/*

		 * The controller automatically disables bus-error interrupts

		 * and therefore we must re-enable them.

 bus error reporting is off, return immediately */

 data overrun interrupt */

 error warning + passive interrupt */

 bus error interrupt */

 Handle NMTS Slave Event Indication Messages from the firmware */

			/* now follows the same message as Raw ICANOS CEVTIND

			 * shift the data at the same place and call this method

 should not occurre, ignore */

 ignore state indications */

/*

 * Handle a control message from the firmware

/*

 * The ican3 needs to store all echo skbs, and therefore cannot

 * use the generic infrastructure for this.

 save this skb for tx interrupt echo handling */

 this should never trigger unless there is a driver bug */

 check flag whether this packet has to be looped back */

/*

 * Compare an skb with an existing echo skb

 *

 * This function will be used on devices which have a hardware loopback.

 * On these devices, this function can be used to compare a received skb

 * with the saved echo skbs so that the hardware echo skb can be dropped.

 *

 * Returns true if the skb's are identical, false otherwise.

/*

 * Check that there is room in the TX ring to transmit another skb

 *

 * LOCKING: must hold mod->lock

 check that we have echo queue space */

 copy the control bits of the descriptor */

 if the control bits are not valid, then we have no more space */

/*

 * Receive one CAN frame from the hardware

 *

 * CONTEXT: must be called from user context

 copy the whole descriptor */

 check that we actually have a CAN frame */

 allocate an skb */

 convert the ICAN3 frame into Linux CAN format */

	/*

	 * If this is an ECHO frame received from the hardware loopback

	 * feature, use the skb saved in the ECHO stack instead. This allows

	 * the Linux CAN core to support CAN_RAW_RECV_OWN_MSGS correctly.

	 *

	 * Since this is a confirmation of a successfully transmitted packet

	 * sent from this host, update the transmit statistics.

	 *

	 * Also, the netdevice queue needs to be allowed to send packets again.

 update statistics, receive the skb */

 toggle the valid bit and return the descriptor to the ring */

 update the next buffer pointer */

 there are still more buffers to process */

 process all communication messages */

 process all CAN frames from the fast interface */

	/* We have processed all packets that the adapter had, but it

 Wake up the transmit queue if necessary */

 re-enable interrupt generation */

	/*

	 * The interrupt status register on this device reports interrupts

	 * as zeroes instead of using ones like most other devices

 clear the MODULbus interrupt from the microcontroller */

 disable interrupt generation, schedule the NAPI poller */

/*

 * Firmware reset, startup, and shutdown

/*

 * Reset an ICAN module to its power-on state

 *

 * CONTEXT: no network device registered

 disable interrupts so no more work is scheduled */

 the first unallocated page in the DPM is #9 */

 reset the module */

 wait until the module has finished resetting and is running */

/*

 * Startup an ICAN module, bringing it into fast mode

 detect firmware */

 re-enable interrupts so we can send messages */

 default to "termination on" */

 default to "bus errors enabled" */

/*

 * CAN Network Device

 open the CAN layer */

 bring the bus online */

 start up the network device */

 stop the network device xmit routine */

 bring the bus offline, stop receiving packets */

 drop all outstanding echo skbs */

 close the CAN layer */

 check that we can actually transmit */

 copy the control bits of the descriptor */

 convert the Linux CAN frame into ICAN3 format */

	/*

	 * This hardware doesn't have TX-done notifications, so we'll try and

	 * emulate it the best we can using ECHO skbs. Add the skb to the ECHO

	 * stack. Upon packet reception, check if the ECHO skb and received

	 * skb match, and use that to wake the queue.

	/*

	 * the programming manual says that you must set the IVALID bit, then

	 * interrupt, then set the valid bit. Quite weird, but it seems to be

	 * required for this to work

 generate a MODULbus interrupt to the microcontroller */

 update the next buffer pointer */

 if there is no free descriptor space, stop the transmit queue */

/*

 * Low-level CAN Device

 This structure was stolen from drivers/net/can/sja1000/sja1000.c */

 bring the bus online */

 start up the network device */

/*

 * Sysfs Attributes

/*

 * PCI Subsystem

 save the struct device for printing */

 allocate the CAN device and private data */

 setup device-specific sysfs attributes */

 the first unallocated page in the DPM is 9 */

 find our IRQ number */

 get access to the MODULbus registers for this module */

 get access to the control registers for this module */

 disable our IRQ, then hookup the IRQ handler */

 reset and initialize the CAN controller into fast mode */

 register with the Linux CAN layer */

 unregister the netdevice, stop interrupts */

 put the module into reset */

 unmap all registers */

 SPDX-License-Identifier: GPL-2.0 OR BSD-2-Clause

/* Copyright (C) 2018 KVASER AB, Sweden. All rights reserved.

 * Parts of this driver are based on the following:

 *  - Kvaser linux pciefd driver (version 5.25)

 *  - PEAK linux canfd driver

 *  - Altera Avalon EPCS flash controller driver

 PCIe IRQ registers */

 DMA map */

 Kvaser KCAN CAN controller registers */

 Loopback control register */

 System identification and information registers */

 Shared receive buffer registers */

 EPCS flash controller registers */

 Reset DMA buffer 0, 1 and FIFO offset */

 DMA packet done, buffer 0 and 1 */

 DMA overflow, buffer 0 and 1 */

 DMA underflow, buffer 0 and 1 */

 DMA idle */

 DMA support */

 DMA Enable */

 EPCS flash controller definitions */

 Commands for controlling the onboard flash */

 Kvaser KCAN definitions */

 Request status packet */

 Abort, flush and reset */

 Tx FIFO unaligned read */

 Tx FIFO unaligned end */

 Bus parameter protection error */

 FDF bit when controller is in classic mode */

 Rx FIFO overflow */

 Abort done */

 Tx buffer flush done */

 Tx FIFO overflow */

 Tx FIFO empty */

 Transmitter unaligned */

 Abort request */

 Idle state. Controller in reset mode and no abort or flush pending */

 Bus off */

 Reset mode request */

 Controller in reset mode */

 Controller got one-shot capability */

 Controller got CAN FD capability */

 Reset mode */

 Listen only mode */

 Error packet enable */

 CAN FD non-ISO */

 Acknowledgment packet type */

 Active error flag enable. Clear to force error passive */

 Classic CAN mode */

 Kvaser KCAN packet types */

 Kvaser KCAN packet common definitions */

 Kvaser KCAN TDATA and RDATA first word */

 Kvaser KCAN TDATA and RDATA second word */

 Kvaser KCAN TDATA second word */

 Kvaser KCAN APACKET */

 Kvaser KCAN SPACK first word */

 Kvaser KCAN SPACK second word */

 Locks sensitive registers (e.g. MODE) */

 Locks the message echo buffer */

 Onboard flash memory functions */

 Read electronic signature */

 No write is ever done, the WIP should never be set */

 Use ACK packet type */

 If controller is already idle, run abort, flush and reset */

 Put controller in reset mode */

 Reset interrupt handling */

 Set duty cycle to zero */

 Set frequency to 500 KHz*/

 Set duty cycle to 95 */

 Don't interrupt ongoing flush */

 Prepare and save echo skb in internal slot */

 Move echo index to the next slot */

 Write header to fifo */

 Write data to fifo, except last word */

 Write last word to end of fifo */

 Complete write to fifo */

	/* No room for a new message, stop the queue until at least one

	 * successful transmit

 Put the circuit in reset mode */

 Can only set bittiming if in reset mode */

 Restore previous reset mode status */

 Disable Bus load reporting */

 Unregister all successfully registered devices. */

 Disable the DMA */

 Reset Rx FIFO, and both DMA buffers */

 Enable the DMA */

 Turn off all loopback functionality */

 Prevent CAN controller from auto recover from bus off */

 Do not report more errors, until bec_poll_timer expires */

 Start polling the error counters */

 Check if we need to poll the error counters */

 Reset done, start abort and flush */

 Reset detected, send end of flush if no packet are in FIFO */

 Response to status request received */

 Reset to bus on detected */

 If this is the last flushed packet, send end of flush */

 Ignore control packet ACK */

 Read 64-bit timestamp */

	/* Position does not point to the end of the package,

	 * corrupted packet size?

 Point to the next packet header, if any */

 Reset DMA buffer 0 */

 Reset DMA buffer 1 */

 Check that mask matches channel (i) IRQ mask */

 Reset IRQ handling, expected to be off before */

 Ready the DMA buffers */

 Turn off IRQ generation */

/* vcan.c - Virtual CAN interface

 *

 * Copyright (c) 2002-2017 Volkswagen Group Electronic Research

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 * 1. Redistributions of source code must retain the above copyright

 *    notice, this list of conditions and the following disclaimer.

 * 2. Redistributions in binary form must reproduce the above copyright

 *    notice, this list of conditions and the following disclaimer in the

 *    documentation and/or other materials provided with the distribution.

 * 3. Neither the name of Volkswagen nor the names of its contributors

 *    may be used to endorse or promote products derived from this software

 *    without specific prior written permission.

 *

 * Alternatively, provided that this notice is retained in full, this

 * software may be distributed under the terms of the GNU General

 * Public License ("GPL") version 2, in which case the provisions of the

 * GPL apply INSTEAD OF those given above.

 *

 * The provided data structures and external interfaces from this code

 * are not restricted to be used by modules with a GPL compatible license.

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS

 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT

 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR

 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT

 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,

 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT

 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,

 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY

 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE

 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH

 * DAMAGE.

 *

/* CAN test feature:

 * Enable the echo on driver level for testing the CAN core echo modes.

 * See Documentation/networking/can.rst for details.

 echo testing. Default: 0 (Off) */

 set flag whether this packet has to be looped back */

 no echo handling available inside this driver */

			/* only count the packets here, because the

			 * CAN core already did the echo for us

 perform standard echo handling for CAN network interfaces */

 receive with packet counting */

 no looped packets => no counting */

 Do not allow changing the MTU while running */

 set flags according to driver capabilities */

/*

 * slcan.c - serial line CAN interface driver (using tty line discipline)

 *

 * This file is derived from linux/drivers/net/slip/slip.c

 *

 * slip.c Authors  : Laurence Culhane <loz@holmes.demon.co.uk>

 *                   Fred N. van Kempen <waltje@uwalt.nl.mugnet.org>

 * slcan.c Author  : Oliver Hartkopp <socketcan@hartkopp.net>

 *

 * This program is free software; you can redistribute it and/or modify it

 * under the terms of the GNU General Public License as published by the

 * Free Software Foundation; either version 2 of the License, or (at your

 * option) any later version.

 *

 * This program is distributed in the hope that it will be useful, but

 * WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU

 * General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License along

 * with this program; if not, see http://www.gnu.org/licenses/gpl.html

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS

 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT

 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR

 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT

 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,

 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT

 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,

 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY

 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE

 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH

 * DAMAGE.

 *

static int maxdev = 10;		/* MAX number of SLCAN channels;

				   This can be overridden with

 maximum rx buffer len: extended CAN frame with timestamp */

 Various fields. */

 ptr to TTY structure	     */

 easy for intr handling    */

 Flushes transmit buffer   */

 These are pointers to the malloc()ed frame buffers. */

 receiver buffer	     */

 received chars counter    */

 transmitter buffer	     */

 pointer to next XMIT byte */

 bytes left in XMIT queue  */

 Flag values/ mode etc     */

 Channel in use            */

 Parity, etc. error        */

 /************************************************************************

  *			SLCAN ENCAPSULATION FORMAT			 *

/*

 * A CAN frame has a can_id (11 bit standard frame format OR 29 bit extended

 * frame format) a data length code (len) which can be from 0 to 8

 * and up to <len> data bytes as payload.

 * Additionally a CAN frame may become a remote transmission frame if the

 * RTR-bit is set. This causes another ECU to send a CAN frame with the

 * given can_id.

 *

 * The SLCAN ASCII representation of these different frame types is:

 * <type> <id> <dlc> <data>*

 *

 * Extended frames (29 bit) are defined by capital characters in the type.

 * RTR frames are defined as 'r' types - normal frames have 't' type:

 * t => 11 bit data frame

 * r => 11 bit RTR frame

 * T => 29 bit data frame

 * R => 29 bit RTR frame

 *

 * The <id> is 3 (standard) or 8 (extended) bytes in ASCII Hex (base64).

 * The <dlc> is a one byte ASCII number ('0' - '8')

 * The <data> section has at much ASCII Hex bytes as defined by the <dlc>

 *

 * Examples:

 *

 * t1230 : can_id 0x123, len 0, no data

 * t4563112233 : can_id 0x456, len 3, data 0x11 0x22 0x33

 * T12ABCDEF2AA55 : extended can_id 0x12ABCDEF, len 2, data 0xAA 0x55

 * r1230 : can_id 0x123, len 0, no data, remote transmission request

 *

 /************************************************************************

  *			STANDARD SLCAN DECAPSULATION			 *

 Send one completely decapsulated can_frame to the network layer */

 store dlc ASCII value and terminate SFF CAN ID string */

 point to payload data behind the dlc */

 store dlc ASCII value and terminate EFF CAN ID string */

 point to payload data behind the dlc */

 get len from sanitized ASCII value */

 RTR frames may have a dlc > 0 but they never have any data bytes */

 parse tty input stream */

 CR or BEL ends the pdu */

 /************************************************************************

  *			STANDARD SLCAN ENCAPSULATION			 *

 Encapsulate one can_frame and stuff into a TTY queue. */

 becomes 'r' in standard frame format (SFF) */

 becomes 't' in standard frame format (SSF) */

 determine number of chars for the CAN-identifier */

 convert R/T to lower case for SFF */

 build 3 (SFF) or 8 (EFF) digit CAN identifier */

 RTR frames may have a dlc > 0 but they never have any data bytes */

	/* Order of next two lines is *very* important.

	 * When we are sending a little amount of data,

	 * the transfer may be completed inside the ops->write()

	 * routine, because it's running with interrupts enabled.

	 * In this case we *never* got WRITE_WAKEUP event,

	 * if we did not request it before write operation.

	 *       14 Oct 1994  Dmitry Gorodchanin.

 Write out any remaining transmit buffer. Scheduled when tty is writable */

 First make sure we're connected. */

		/* Now serial buffer is almost free & we can start

/*

 * Called by the driver when there's room for more data.

 * Schedule the transmit.

 Send a can_frame to a TTY queue. */

 encaps & send */

/******************************************

 *   Routines looking at netdevice side.

 Netdevice UP -> DOWN routine */

 TTY discipline is running. */

 Netdevice DOWN -> UP routine */

 Hook the destructor so we can free slcan devs at the right point in time */

 New-style flags. */

/******************************************

  Routines looking at TTY side.

/*

 * Handle the 'receiver data ready' interrupt.

 * This function is called by the 'tty_io' module in the kernel when

 * a block of SLCAN data has been received, which can now be decapsulated

 * and sent on to some IP layer for further processing. This will not

 * be re-entered while running but other ldisc functions may be called

 * in parallel

 Read the characters out of the buffer */

/************************************

 *  slcan_open helper routines.

 Collect hanged up channels */

 Find a free SLCAN channel, and link in this `tty' line. */

 Sorry, too many, all slots in use */

 Initialize channel control data */

/*

 * Open the high-level part of the SLCAN channel.

 * This function is called by the TTY module when the

 * SLCAN line discipline is called for.  Because we are

 * sure the tty line exists, we only have to link it to

 * a free SLCAN channel...

 *

 * Called in process context serialized from other ldisc calls.

	/* RTnetlink lock is misused here to serialize concurrent

	   opens of slcan channels. There are better ways, but it is

	   the simplest one.

 Collect hanged up channels. */

 First make sure we're not already connected. */

 OK.  Find a free SLCAN channel to use. */

 Perform the low-level SLCAN initialization. */

 Done.  We have linked the TTY line to a channel. */

 We don't flow control */

 TTY layer expects 0 on success */

 do not call free_netdev before rtnl_unlock */

 Count references from TTY module */

/*

 * Close down a SLCAN channel.

 * This means flushing out any pending queues, and then returning. This

 * call is serialized against other ldisc functions.

 *

 * We also use this method for a hangup event.

 First make sure we're connected. */

 Flush network side */

 This will complete via sl_free_netdev */

 Perform I/O control on an active SLCAN channel. */

 First make sure we're connected. */

 Sanity */

 Fill in our line protocol discipline, and register it */

	/* First of all: check for active disciplines and hangup them.

	/* FIXME: hangup is async so we should wait when doing this second

 SPDX-License-Identifier: GPL-2.0-or-later

/* Xilinx CAN device driver

 *

 * Copyright (C) 2012 - 2014 Xilinx, Inc.

 * Copyright (C) 2009 PetaLogix. All rights reserved.

 * Copyright (C) 2017 - 2018 Sandvik Mining and Construction Oy

 *

 * Description:

 * This driver is developed for Axi CAN IP and for Zynq CANPS Controller.

 CAN registers set */

 Software reset */

 Mode select */

 Baud rate prescaler */

 Bit timing */

 Error counter */

 Error status */

 Status */

 Interrupt status */

 Interrupt enable */

 Interrupt clear */

 not on CAN FD cores */

 TX FIFO base */

 RX FIFO base */

 Acceptance Filter */

 only on CAN FD cores */

	XCAN_F_BRPR_OFFSET	= 0x088, /* Data Phase Baud Rate

					  * Prescalar

 Data Phase Bit Timing */

 TX Buffer Ready Request */

 Acceptance Filter */

 RX FIFO Status */

 TX Message Space */

 RX Message Space */

 RX Message Space */

 Acceptance Filter MASK */

 Acceptance Filter ID */

 the single TX mailbox used by this driver on CAN FD HW */

 CAN register bit masks - XCAN_<REG>_<BIT>_MASK */

 CAN enable */

 Soft Reset the CAN core */

 Loop back mode select */

 Sleep mode select */

 Baud rate prescaler */

 Synchronous jump width */

 Time segment 2 */

 Time segment 1 */

 Synchronous jump width */

 Time segment 2 */

 Time segment 1 */

 Receive error counter */

 Transmit error counter */

 ACK error */

 Bit error */

 Stuff error */

 Form error */

 CRC error */

 TX FIFO is full */

 Error status */

 Error warning */

 Normal mode */

 Loop back mode */

 Configuration mode */

 RX match not finished */

 TX FIFO Empty */

 Wake up interrupt */

 Sleep interrupt */

 Bus off interrupt */

 Error interrupt */

 RX FIFO NotEmpty intr */

 RX FIFO Overflow intr */

 Message received intr */

 Tx FIFO Full intr */

 TX successful intr */

 Arbitration lost intr */

 Standard msg identifier */

 Substitute remote TXreq */

 Identifier extension */

 Extended message ident */

 Remote TX request */

 Data length code */

 RX Fill Level */

 RX Fill Level */

 RX Increment Read Index */

 RX Read Index */

 RX Read Index */

 EDL Mask in DLC */

 BRS Mask in DLC */

 CAN register bit shift - XCAN_<REG>_<BIT>_SHIFT */

 Synchronous jump width */

 Time segment 2 */

 Synchronous jump width */

 Time segment 2 */

 Standard Messg Identifier */

 Extended Message Identifier */

 Data length code */

 Rx Error Count */

 CAN frame length constants */

 TX-FIFO-empty interrupt available */

 RX Match Not Finished interrupt available */

 Extended acceptance filters with control at 0xE0 */

 TX mailboxes instead of TX FIFO */

/* RX FIFO with each buffer in separate registers at 0x1100

 * instead of the regular FIFO at 0x50

/**

 * struct xcan_priv - This definition define CAN driver instance

 * @can:			CAN private data structure.

 * @tx_lock:			Lock for synchronizing TX interrupt handling

 * @tx_head:			Tx CAN packets ready to send on the queue

 * @tx_tail:			Tx CAN packets successfully sended on the queue

 * @tx_max:			Maximum number packets the driver can send

 * @napi:			NAPI structure

 * @read_reg:			For reading data from CAN registers

 * @write_reg:			For writing data to CAN registers

 * @dev:			Network device data structure

 * @reg_base:			Ioremapped address to registers

 * @irq_flags:			For request_irq()

 * @bus_clk:			Pointer to struct clk

 * @can_clk:			Pointer to struct clk

 * @devtype:			Device type specific constants

 Lock for synchronizing TX interrupt handling */

 CAN Bittiming constants as per Xilinx CAN specs */

 AXI CANFD Arbitration Bittiming constants as per AXI CANFD 1.0 spec */

 AXI CANFD Data Bittiming constants as per AXI CANFD 1.0 specs */

 AXI CANFD 2.0 Arbitration Bittiming constants as per AXI CANFD 2.0 spec */

 AXI CANFD 2.0 Data Bittiming constants as per AXI CANFD 2.0 spec */

/**

 * xcan_write_reg_le - Write a value to the device register little endian

 * @priv:	Driver private data structure

 * @reg:	Register offset

 * @val:	Value to write at the Register offset

 *

 * Write data to the paricular CAN register

/**

 * xcan_read_reg_le - Read a value from the device register little endian

 * @priv:	Driver private data structure

 * @reg:	Register offset

 *

 * Read data from the particular CAN register

 * Return: value read from the CAN register

/**

 * xcan_write_reg_be - Write a value to the device register big endian

 * @priv:	Driver private data structure

 * @reg:	Register offset

 * @val:	Value to write at the Register offset

 *

 * Write data to the paricular CAN register

/**

 * xcan_read_reg_be - Read a value from the device register big endian

 * @priv:	Driver private data structure

 * @reg:	Register offset

 *

 * Read data from the particular CAN register

 * Return: value read from the CAN register

/**

 * xcan_rx_int_mask - Get the mask for the receive interrupt

 * @priv:	Driver private data structure

 *

 * Return: The receive interrupt mask used by the driver on this HW

	/* RXNEMP is better suited for our use case as it cannot be cleared

	 * while the FIFO is non-empty, but CAN FD HW does not have it

/**

 * set_reset_mode - Resets the CAN device mode

 * @ndev:	Pointer to net_device structure

 *

 * This is the driver reset mode routine.The driver

 * enters into configuration mode.

 *

 * Return: 0 on success and failure value on error

 reset clears FIFOs */

/**

 * xcan_set_bittiming - CAN set bit timing routine

 * @ndev:	Pointer to net_device structure

 *

 * This is the driver set bittiming  routine.

 * Return: 0 on success and failure value on error

	/* Check whether Xilinx CAN is in configuration mode.

	 * It cannot set bit timing if Xilinx CAN is not in configuration mode.

 Setting Baud Rate prescalar value in BRPR Register */

 Setting Time Segment 1 in BTR Register */

 Setting Time Segment 2 in BTR Register */

 Setting Synchronous jump width in BTR Register */

 Setting Baud Rate prescalar value in F_BRPR Register */

 Setting Time Segment 1 in BTR Register */

 Setting Time Segment 2 in BTR Register */

 Setting Synchronous jump width in BTR Register */

/**

 * xcan_chip_start - This the drivers start routine

 * @ndev:	Pointer to net_device structure

 *

 * This is the drivers start routine.

 * Based on the State of the CAN device it puts

 * the CAN device into a proper mode.

 *

 * Return: 0 on success and failure value on error

 Check if it is in reset mode */

	/* Enable interrupts

	 *

	 * We enable the ERROR interrupt even with

	 * CAN_CTRLMODE_BERR_REPORTING disabled as there is no

	 * dedicated interrupt for a state change to

	 * ERROR_WARNING/ERROR_PASSIVE.

 Check whether it is loopback mode or normal mode  */

	/* enable the first extended filter, if any, as cores with extended

	 * filtering default to non-receipt if all filters are disabled

/**

 * xcan_do_set_mode - This sets the mode of the driver

 * @ndev:	Pointer to net_device structure

 * @mode:	Tells the mode of the driver

 *

 * This check the drivers state and calls the corresponding modes to set.

 *

 * Return: 0 on success and failure value on error

/**

 * xcan_write_frame - Write a frame to HW

 * @ndev:		Pointer to net_device structure

 * @skb:		sk_buff pointer that contains data to be Txed

 * @frame_offset:	Register offset to write the frame to

 Watch carefully on the bit sequence */

 Extended CAN ID format */

		/* The substibute remote TX request bit should be "1"

		 * for extended frames as in the Xilinx CAN datasheet

 Extended frames remote TX request */

 Standard CAN ID format */

 Standard frames remote TX request */

	/* If the CAN frame is RTR frame this write triggers transmission

	 * (not on CAN FD)

			/* If the CAN frame is Standard/Extended frame this

			 * write triggers transmission (not on CAN FD)

/**

 * xcan_start_xmit_fifo - Starts the transmission (FIFO mode)

 * @skb:	sk_buff pointer that contains data to be Txed

 * @ndev:	Pointer to net_device structure

 *

 * Return: 0 on success, -ENOSPC if FIFO is full.

 Check if the TX buffer is full */

 Clear TX-FIFO-empty interrupt for xcan_tx_interrupt() */

 Check if the TX buffer is full */

/**

 * xcan_start_xmit_mailbox - Starts the transmission (mailbox mode)

 * @skb:	sk_buff pointer that contains data to be Txed

 * @ndev:	Pointer to net_device structure

 *

 * Return: 0 on success, -ENOSPC if there is no space

 Mark buffer as ready for transmit */

/**

 * xcan_start_xmit - Starts the transmission

 * @skb:	sk_buff pointer that contains data to be Txed

 * @ndev:	Pointer to net_device structure

 *

 * This function is invoked from upper layers to initiate transmission.

 *

 * Return: NETDEV_TX_OK on success and NETDEV_TX_BUSY when the tx queue is full

/**

 * xcan_rx -  Is called from CAN isr to complete the received

 *		frame  processing

 * @ndev:	Pointer to net_device structure

 * @frame_base:	Register offset to the frame to be read

 *

 * This function is invoked from the CAN isr(poll) to process the Rx frames. It

 * does minimal processing and invokes "netif_receive_skb" to complete further

 * processing.

 * Return: 1 on success and 0 on failure.

 Read a frame from Xilinx zynq CANPS */

 Change Xilinx CAN data length format to socketCAN data format */

 Change Xilinx CAN ID format to socketCAN ID format */

 The received frame is an Extended format frame */

 The received frame is a standard format frame */

 DW1/DW2 must always be read to remove message from RXFIFO */

 Change Xilinx CAN data format to socketCAN data format */

/**

 * xcanfd_rx -  Is called from CAN isr to complete the received

 *		frame  processing

 * @ndev:	Pointer to net_device structure

 * @frame_base:	Register offset to the frame to be read

 *

 * This function is invoked from the CAN isr(poll) to process the Rx frames. It

 * does minimal processing and invokes "netif_receive_skb" to complete further

 * processing.

 * Return: 1 on success and 0 on failure.

	/* Change Xilinx CANFD data length format to socketCAN data

	 * format

 Change Xilinx CAN ID format to socketCAN ID format */

 The received frame is an Extended format frame */

 The received frame is a standard format frame */

 Check the frame received is FD or not*/

/**

 * xcan_current_error_state - Get current error state from HW

 * @ndev:	Pointer to net_device structure

 *

 * Checks the current CAN error state from the HW. Note that this

 * only checks for ERROR_PASSIVE and ERROR_WARNING.

 *

 * Return:

 * ERROR_PASSIVE or ERROR_WARNING if either is active, ERROR_ACTIVE

 * otherwise.

/**

 * xcan_set_error_state - Set new CAN error state

 * @ndev:	Pointer to net_device structure

 * @new_state:	The new CAN state to be set

 * @cf:		Error frame to be populated or NULL

 *

 * Set new CAN error state for the device, updating statistics and

 * populating the error frame if given.

 non-ERROR states are handled elsewhere */

/**

 * xcan_update_error_state_after_rxtx - Update CAN error state after RX/TX

 * @ndev:	Pointer to net_device structure

 *

 * If the device is in a ERROR-WARNING or ERROR-PASSIVE state, check if

 * the performed RX/TX has caused it to drop to a lesser state and set

 * the interface state accordingly.

	/* changing error state due to successful frame RX/TX can only

	 * occur from these states

/**

 * xcan_err_interrupt - error frame Isr

 * @ndev:	net_device pointer

 * @isr:	interrupt status register value

 *

 * This is the CAN error interrupt and it will

 * check the type of error and forward the error

 * frame to upper layers.

 Leave device in Config Mode in bus-off state */

 Check for Arbitration lost interrupt */

 Check for RX FIFO Overflow interrupt */

 Check for RX Match Not Finished interrupt */

 Check for error interrupt */

 Check for Ack error interrupt */

 Check for Bit error interrupt */

 Check for Stuff error interrupt */

 Check for Form error interrupt */

 Check for CRC error interrupt */

/**

 * xcan_state_interrupt - It will check the state of the CAN device

 * @ndev:	net_device pointer

 * @isr:	interrupt status register value

 *

 * This will checks the state of the CAN device

 * and puts the device into appropriate state.

 Check for Sleep interrupt if set put CAN device in sleep state */

 Check for Wake up interrupt if set put CAN device in Active state */

/**

 * xcan_rx_fifo_get_next_frame - Get register offset of next RX frame

 * @priv:	Driver private data structure

 *

 * Return: Register offset of the next frame in RX FIFO.

		/* clear RXOK before the is-empty check so that any newly

		 * received frame will reassert it without a race

 check if RX FIFO is empty */

 check if RX FIFO is empty */

 frames are read from a static offset */

/**

 * xcan_rx_poll - Poll routine for rx packets (NAPI)

 * @napi:	napi structure pointer

 * @quota:	Max number of rx packets to be processed.

 *

 * This is the poll routine for rx part.

 * It will process the packets maximux quota value.

 *

 * Return: number of packets received

 increment read index */

			/* clear rx-not-empty (will actually clear only if

			 * empty)

/**

 * xcan_tx_interrupt - Tx Done Isr

 * @ndev:	net_device pointer

 * @isr:	Interrupt status register value

 TXOK => at least 1 frame was sent */

	/* Synchronize with xmit as we need to know the exact number

	 * of frames in the FIFO to stay in sync due to the TXFEMP

	 * handling.

	 * This also prevents a race between netif_wake_queue() and

	 * netif_stop_queue().

 clear TXOK anyway to avoid getting back here */

	/* Check if 2 frames were sent (TXOK only means that at least 1

	 * frame was sent).

		/* Synchronize TXOK and isr so that after the loop:

		 * (1) isr variable is up-to-date at least up to TXOK clear

		 *     time. This avoids us clearing a TXOK of a second frame

		 *     but not noticing that the FIFO is now empty and thus

		 *     marking only a single frame as sent.

		 * (2) No TXOK is left. Having one could mean leaving a

		 *     stray TXOK as we might process the associated frame

		 *     via TXFEMP handling as we read TXFEMP *after* TXOK

		 *     clear to satisfy (1).

 nothing in FIFO anymore */

 single frame in fifo, just clear TXOK */

/**

 * xcan_interrupt - CAN Isr

 * @irq:	irq number

 * @dev_id:	device id pointer

 *

 * This is the xilinx CAN Isr. It checks for the type of interrupt

 * and invokes the corresponding ISR.

 *

 * Return:

 * IRQ_NONE - If CAN device is in sleep mode, IRQ_HANDLED otherwise

 Get the interrupt status from Xilinx CAN */

 Check for the type of interrupt and Processing it */

 Check for Tx interrupt and Processing it */

 Check for the type of error interrupt and Processing it */

 Check for the type of receive interrupt and Processing it */

/**

 * xcan_chip_stop - Driver stop routine

 * @ndev:	Pointer to net_device structure

 *

 * This is the drivers stop routine. It will disable the

 * interrupts and put the device into configuration mode.

 Disable interrupts and leave the can in configuration mode */

/**

 * xcan_open - Driver open routine

 * @ndev:	Pointer to net_device structure

 *

 * This is the driver open routine.

 * Return: 0 on success and failure value on error

 Set chip into reset mode */

 Common open */

/**

 * xcan_close - Driver close routine

 * @ndev:	Pointer to net_device structure

 *

 * Return: 0 always

/**

 * xcan_get_berr_counter - error counter routine

 * @ndev:	Pointer to net_device structure

 * @bec:	Pointer to can_berr_counter structure

 *

 * This is the driver error counter routine.

 * Return: 0 on success and failure value on error

/**

 * xcan_suspend - Suspend method for the driver

 * @dev:	Address of the device structure

 *

 * Put the driver into low power mode.

 * Return: 0 on success and failure value on error

/**

 * xcan_resume - Resume from suspend

 * @dev:	Address of the device structure

 *

 * Resume operation after suspend.

 * Return: 0 on success and failure value on error

/**

 * xcan_runtime_suspend - Runtime suspend method for the driver

 * @dev:	Address of the device structure

 *

 * Put the driver into low power mode.

 * Return: 0 always

/**

 * xcan_runtime_resume - Runtime resume from suspend

 * @dev:	Address of the device structure

 *

 * Resume operation after suspend.

 * Return: 0 on success and failure value on error

 Match table for OF platform binding */

 end of list */ },

/**

 * xcan_probe - Platform registration call

 * @pdev:	Handle to the platform device structure

 *

 * This function does all the memory allocation and registration for the CAN

 * device.

 *

 * Return: 0 on success and failure value on error

 Get the virtual base address for the device */

	/* With TX FIFO:

	 *

	 * There is no way to directly figure out how many frames have been

	 * sent when the TXOK interrupt is processed. If TXFEMP

	 * is supported, we can have 2 frames in the FIFO and use TXFEMP

	 * to determine if 1 or 2 frames have been sent.

	 * Theoretically we should be able to use TXFWMEMP to determine up

	 * to 3 frames, but it seems that after putting a second frame in the

	 * FIFO, with watermark at 2 frames, it can happen that TXFWMEMP (less

	 * than 2 frames in FIFO) is set anyway with no TXOK (a frame was

	 * sent), which is not a sensible state - possibly TXFWMEMP is not

	 * completely synchronized with the rest of the bits?

	 *

	 * With TX mailboxes:

	 *

	 * HW sends frames in CAN ID priority order. To preserve FIFO ordering

	 * we submit frames one at a time.

 Create a CAN device instance */

 Get IRQ for the device */

 We support local echo */

 Getting the CAN can_clk info */

/**

 * xcan_remove - Unregister the device after releasing the resources

 * @pdev:	Handle to the platform device structure

 *

 * This function frees all the resources allocated to the device.

 * Return: 0 always

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 1999 - 2010 Intel Corporation.

 * Copyright (C) 2010 LAPIS SEMICONDUCTOR CO., LTD.

 The INIT bit of CANCONT register. */

 The IE bit of CAN control register */

 The OPT bit of CANCONT register. */

 The Silent bit of CANOPT reg. */

 The LoopBack bit of CANOPT reg. */

 bit position of certain controller bits. */

 50MHz */

/*

 * Define the number of message object.

 * PCH CAN communications are done via Message RAM.

 * The Message RAM consists of 32 message objects.

 TxRqst2 show status of MsgObjNo.17~32 */

 [0]=if1  [1]=if2 */

 Point next Tx Obj index */

 6bit + extended 4bit */

 Reading the Msg buffer from Message RAM to IF1/2 registers. */

 Setting the IF1/2MASK1 register to access MsgVal and RxIE bits */

 Setting the MsgVal and RxIE/TxIE bits */

 Clearing the MsgVal and RxIE/TxIE bits */

 Traversing to obtain the object configured as receivers. */

 Traversing to obtain the object configured as transmit object. */

 Msg Obj ID (1~32) */

 In case FIFO mode, Last EoB of Rx Obj must be 1 */

 Setting CMASK for writing */

 Resetting DIR bit for reception */

 Setting EOB bit for transmitter */

 Setting CMASK for writing */

 Stopping the Can device. */

 Clearing all the message object buffers. */

 Configuring the respective message object as either rx/tx object. */

 Enabling the interrupts. */

 Stooping the CAN device. */

 Disabling the interrupts. */

 Disabling all the receive object. */

 Disabling all the transmit object. */

 This function clears interrupt(s) from the CAN device. */

 Clear interrupt for transmit object */

 Setting CMASK for clearing the reception interrupts. */

 Clearing the Dir bit. */

 Clearing NewDat & IntPnd */

		/*

		 * Setting CMASK for clearing interrupts for frame transmission.

 Resetting the ID registers. */

 Clearing NewDat, TxRqst & IntPnd */

 write to sw reset register */

 Warning interrupt. */

 Error passive interrupt. */

 Written by CPU. No error status */

 Clearing the Dir bit. */

 Clearing NewDat & IntPnd */

 Reading the message object from the Message RAM */

 Reading the MCONT register. */

 If MsgLost bit set. */

 Get Received data */

 Handle transmission interrupt */

 Setting the CCE bit for accessing the Can Timing register. */

 Setting the CAN to run mode. */

 Registering the interrupt. */

 Open common can device */

 Setting the CMASK register. */

 If ID extended is set. */

 If remote frame has to be transmitted.. */

 Copy data to register */

 Set the size of the data. Update if2_mcont */

 Clearing the IE, SIE and EIE bits of Can control register. */

 Appropriately setting them. */

 This function retrieves interrupt enabled for the CAN device. */

 Obtaining the status of IE, SIE and EIE interrupt bits. */

 Variable for reading the transmit buffer status. */

 Stop the CAN controller */

 Indicate that we are aboutto/in suspend */

 Waiting for all transmission to complete. */

 Save interrupt configuration and then disable them */

 Save Tx buffer enable state */

 Disable all Transmit buffers */

 Save Rx buffer enable state */

 Disable all Receive buffers */

 Disabling all interrupts. */

 Setting the CAN device in Stop Mode. */

 Configuring the transmit and receive buffers. */

 Restore the CAN state */

 Listen/Active */

 Enabling the transmit buffer. */

 Configuring the receive buffer and enabling them. */

 Restore buffer link */

 Restore buffer enables */

 Enable CAN Interrupts */

 Restore Run Mode */

 Point head of Tx Obj */

 Hz */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * at91_can.c - CAN network driver for AT91 SoC CAN controller

 *

 * (C) 2007 by Hans J. Koch <hjk@hansjkoch.de>

 * (C) 2008, 2009, 2010, 2011 by Marc Kleine-Budde <kernel@pengutronix.de>

 Common registers */

 Mailbox registers (0 <= i <= 15) */

 Register bits */

 Mailbox Modes */

 Interrupt mask bits */

 must be the first member! */

	/* Due to a chip bug (errata 50.2.6.3 & 50.3.5.3) the first

	 * mailbox is disabled. The next 11 mailboxes are used as a

	 * reception FIFO. The last mailbox is configured with

	 * overwrite option. The overwrite flag indicates a FIFO

	 * overflow.

 clear dlc */

 reset acceptance mask and id register */

 The last 4 mailboxes are used for transmitting. */

 Reset tx and rx helper pointers */

 disable interrupts */

 disable chip */

 enable chip */

 Enable interrupts */

 disable interrupts */

/* theory of operation:

 *

 * According to the datasheet priority 0 is the highest priority, 15

 * is the lowest. If two mailboxes have the same priority level the

 * message of the mailbox with the lowest number is sent first.

 *

 * We use the first TX mailbox (AT91_MB_TX_FIRST) with prio 0, then

 * the next mailbox with prio 0, and so on, until all mailboxes are

 * used. Then we start from the beginning with mailbox

 * AT91_MB_TX_FIRST, but with prio 1, mailbox AT91_MB_TX_FIRST + 1

 * prio 1. When we reach the last mailbox with prio 15, we have to

 * stop sending, waiting for all messages to be delivered, then start

 * again with mailbox AT91_MB_TX_FIRST prio 0.

 *

 * We use the priv->tx_next as counter for the next transmission

 * mailbox, but without the offset AT91_MB_TX_FIRST. The lower bits

 * encode the mailbox number, the upper 4 bits the mailbox priority:

 *

 * priv->tx_next = (prio << get_next_prio_shift(priv)) |

 *                 (mb - get_mb_tx_first(priv));

 *

 disable MB while writing ID (see datasheet) */

 This triggers transmission */

 _NOTE_: subtract AT91_MB_TX_FIRST offset from mb! */

	/* we have to stop the queue and deliver all messages in case

	 * of a prio+mb counter wrap around. This is the case if

	 * tx_next buffer prio and mailbox equals 0.

	 *

	 * also stop the queue if next buffer is still in use

	 * (== not ready)

 Enable interrupt for this mailbox */

/**

 * at91_activate_rx_low - activate lower rx mailboxes

 * @priv: a91 context

 *

 * Reenables the lower mailboxes for reception of new CAN messages

/**

 * at91_activate_rx_mb - reactive single rx mailbox

 * @priv: a91 context

 * @mb: mailbox to reactivate

 *

 * Reenables given mailbox for reception of new CAN messages

/**

 * at91_rx_overflow_err - send error frame due to rx overflow

 * @dev: net device

/**

 * at91_read_mb - read CAN msg from mailbox (lowlevel impl)

 * @dev: net device

 * @mb: mailbox number to read from

 * @cf: can frame where to store message

 *

 * Reads a CAN message from the given mailbox and stores data into

 * given can frame. "mb" and "cf" must be valid.

 allow RX of extended frames */

/**

 * at91_read_msg - read CAN message from mailbox

 * @dev: net device

 * @mb: mail box to read from

 *

 * Reads a CAN message from given mailbox, and put into linux network

 * RX queue, does all housekeeping chores (stats, ...)

/**

 * at91_poll_rx - read multiple CAN messages from mailboxes

 * @dev: net device

 * @quota: max number of pkgs we're allowed to receive

 *

 * Theory of Operation:

 *

 * About 3/4 of the mailboxes (get_mb_rx_first()...get_mb_rx_last())

 * on the chip are reserved for RX. We split them into 2 groups. The

 * lower group ranges from get_mb_rx_first() to get_mb_rx_low_last().

 *

 * Like it or not, but the chip always saves a received CAN message

 * into the first free mailbox it finds (starting with the

 * lowest). This makes it very difficult to read the messages in the

 * right order from the chip. This is how we work around that problem:

 *

 * The first message goes into mb nr. 1 and issues an interrupt. All

 * rx ints are disabled in the interrupt handler and a napi poll is

 * scheduled. We read the mailbox, but do _not_ re-enable the mb (to

 * receive another message).

 *

 *    lower mbxs      upper

 *     ____^______    __^__

 *    /           \  /     \

 * +-+-+-+-+-+-+-+-++-+-+-+-+

 * | |x|x|x|x|x|x|x|| | | | |

 * +-+-+-+-+-+-+-+-++-+-+-+-+

 *  0 0 0 0 0 0  0 0 0 0 1 1  \ mail

 *  0 1 2 3 4 5  6 7 8 9 0 1  / box

 *  ^

 *  |

 *   \

 *     unused, due to chip bug

 *

 * The variable priv->rx_next points to the next mailbox to read a

 * message from. As long we're in the lower mailboxes we just read the

 * mailbox but not re-enable it.

 *

 * With completion of the last of the lower mailboxes, we re-enable the

 * whole first group, but continue to look for filled mailboxes in the

 * upper mailboxes. Imagine the second group like overflow mailboxes,

 * which takes CAN messages if the lower goup is full. While in the

 * upper group we re-enable the mailbox right after reading it. Giving

 * the chip more room to store messages.

 *

 * After finishing we look again in the lower group if we've still

 * quota.

 *

 reactivate mailboxes */

 all lower mailboxed, if just finished it */

 only the mailbox we read */

 upper group completed, look again in lower */

 CRC error */

 Stuffing Error */

 Acknowledgement Error */

 Form error */

 Bit Error */

	/* The error bits are clear on read,

	 * so use saved value from irq handler.

 enable IRQs for frame errors and all mailboxes >= rx_next */

/* theory of operation:

 *

 * priv->tx_echo holds the number of the oldest can_frame put for

 * transmission into the hardware, but not yet ACKed by the CAN tx

 * complete IRQ.

 *

 * We iterate from priv->tx_echo to priv->tx_next and check if the

 * packet has been transmitted, echo it back to the CAN framework. If

 * we discover a not yet transmitted package, stop looking for more.

 *

 masking of reg_sr not needed, already done by at91_irq */

 nix */; (priv->tx_next - priv->tx_echo) > 0; priv->tx_echo++) {

 no event in mailbox? */

 Disable irq for this TX mailbox */

		/* only echo if mailbox signals us a transfer

		 * complete (MSR_MRDY). Otherwise it's a tansfer

		 * abort. "can_bus_off()" takes care about the skbs

		 * parked in the echo queue.

 _NOTE_: subtract AT91_MB_TX_FIRST offset from mb! */

	/* restart queue if we don't have a wrap around but restart if

	 * we get a TX int for the last can frame directly before a

	 * wrap around.

		/* from: ERROR_ACTIVE

		 * to  : ERROR_WARNING, ERROR_PASSIVE, BUS_OFF

		 * =>  : there was a warning int

		/* from: ERROR_ACTIVE, ERROR_WARNING

		 * to  : ERROR_PASSIVE, BUS_OFF

		 * =>  : error passive int

		/* from: BUS_OFF

		 * to  : ERROR_ACTIVE, ERROR_WARNING, ERROR_PASSIVE

 process state changes depending on the new state */

		/* actually we want to enable AT91_IRQ_WARN here, but

		 * it screws up the system under certain

		 * circumstances. so just enable AT91_IRQ_ERRP, thus

		 * the "fallthrough"

 turn off chip, if restart is disabled */

 we need to look at the unmasked reg_sr */

 state hasn't changed */

/* interrupt handler

 Ignore masked interrupts */

 Receive or error interrupt? -> napi */

		/* The error bits are clear on read,

		 * save for later use.

 Transmission complete interrupt */

 check or determine and set bittime */

 register interrupt handler */

 start chip and queuing */

/* stop CAN bus activity

 sentinel */

 sentinel */

 SPDX-License-Identifier: GPL-2.0



 flexcan.c - FLEXCAN CAN controller driver



 Copyright (c) 2005-2006 Varma Electronics Oy

 Copyright (c) 2009 Sascha Hauer, Pengutronix

 Copyright (c) 2010-2017 Pengutronix, Marc Kleine-Budde <kernel@pengutronix.de>

 Copyright (c) 2014 David Jander, Protonic Holland



 Based on code originally by Andrey Volkov <avolkov@varma-el.com>

 8 for RX fifo and 2 error handling */

 FLEXCAN module configuration register (CANMCR) bits */

 MCR_MAXMB: maximum used MBs is MAXMB + 1 */

 FLEXCAN control register (CANCTRL) bits */

 FLEXCAN control register 2 (CTRL2) bits */

 FLEXCAN memory error control register (MECR) bits */

 FLEXCAN error and status register (ESR) bits */

 FLEXCAN Bit Timing register (CBT) bits */

 FLEXCAN FD control register (FDCTRL) bits */

 FLEXCAN FD Bit Timing register (FDCBT) bits */

 FLEXCAN interrupt flag register (IFLAG) bits */

 Errata ERR005829 step7: Reserve first valid MB */

 FLEXCAN message buffers */

/* FLEXCAN hardware feature flags

 *

 * Below is some version info we got:

 *    SOC   Version   IP-Version  Glitch- [TR]WRN_INT IRQ Err Memory err RTR rece-   FD Mode     MB

 *                                Filter? connected?  Passive detection  ption in MB Supported?

 * MCF5441X FlexCAN2  ?               no       yes        no       no       yes           no     16

 *    MX25  FlexCAN2  03.00.00.00     no        no        no       no        no           no     64

 *    MX28  FlexCAN2  03.00.04.00    yes       yes        no       no        no           no     64

 *    MX35  FlexCAN2  03.00.00.00     no        no        no       no        no           no     64

 *    MX53  FlexCAN2  03.00.00.00    yes        no        no       no        no           no     64

 *    MX6s  FlexCAN3  10.00.12.00    yes       yes        no       no       yes           no     64

 *    MX8QM FlexCAN3  03.00.23.00    yes       yes        no       no       yes          yes     64

 *    MX8MP FlexCAN3  03.00.17.01    yes       yes        no      yes       yes          yes     64

 *    VF610 FlexCAN3  ?               no       yes        no      yes       yes?          no     64

 *  LS1021A FlexCAN2  03.00.04.00     no       yes        no       no       yes           no     64

 *  LX2160A FlexCAN3  03.00.23.00     no       yes        no      yes       yes          yes     64

 *

 * Some SOCs do not have the RX_WARN & TX_WARN interrupt line connected.

 [TR]WRN_INT not connected */

 Disable RX FIFO Global mask */

 Enable EACEN and RRS bit in ctrl2 */

 Disable non-correctable errors interrupt and freeze mode */

 Use timestamp based offloading */

 No interrupt for error passive */

 default to BE register access */

 Setup stop mode with GPR to support wakeup */

 Support CAN-FD mode */

 support memory detection and correction */

 Setup stop mode with SCU firmware to support wakeup */

 Setup 3 separate interrupts, main, boff and err */

 Setup 16 mailboxes */

 Structure of the message buffer */

 Structure of the hardware registers */

 0x00 */

 0x04 - Not affected by Soft Reset */

 0x08 */

 0x0c */

 0x10 - Not affected by Soft Reset */

 0x14 - Not affected by Soft Reset */

 0x18 - Not affected by Soft Reset */

 0x1c */

 0x20 */

 0x24 */

 0x28 */

 0x2c */

 0x30 */

 0x34 */

 MX28, MX53 */

 MX6, VF610 - Not affected by Soft Reset */

 0x38 */

 0x3c */

 0x40 */

 0x44 */

 0x48 */

 0x4c - Not affected by Soft Reset */

 0x50 - Not affected by Soft Reset */

 0x54 */

 0x58 */

 0x5c */

 0x60 */

 0x80 - Not affected by Soft Reset */

		/* FIFO-mode:

		 *			MB

		 * 0x080...0x08f	0	RX message buffer

		 * 0x090...0x0df	1-5	reserved

		 * 0x0e0...0x0ff	6-7	8 entry ID table

		 *				(mx25, mx28, mx35, mx53)

		 * 0x0e0...0x2df	6-7..37	8..128 entry ID table

		 *				size conf'ed via ctrl2::RFFN

		 *				(mx6, vf610)

 0x480 */

 0x880 - Not affected by Soft Reset */

 0x980 */

 0x9e0 - MX6 */

 0x9e4 */

 0xa80 */

 0xa98 */

 0xaa0 */

 0xaa4 */

 0xaa8 */

 0xaac */

 0xab0 */

 0xac0 */

 0xad0 */

 0xae0 */

 0xae4 */

 0xae8 */

 0xaec */

 0xaf0 */

 0xaf4 */

 0xaf8 */

 0xafc */

 0xb00 */

 0xc00 - Not affected by Soft Reset */

 0xc04 - Not affected by Soft Reset */

 0xc08 */

 0xc0c */

 0xf28 */

 0xf70 */

 0xfb8 */

 quirks needed for different IP cores */

 clock source of CAN Protocol Engine */

 IPC handle when setup stop mode by System Controller firmware(scfw) */

 Read and Write APIs */

/* FlexCAN module is essentially modelled as a little-endian IP in most

 * SoCs, i.e the registers as well as the message buffer areas are

 * implemented in a little-endian fashion.

 *

 * However there are some SoCs (e.g. LS1021A) which implement the FlexCAN

 * module in a big-endian fashion (i.e the registers as well as the

 * message buffer areas are implemented in a big-endian way).

 *

 * In addition, the FlexCAN module can be found on SoCs having ARM or

 * PPC cores. So, we need to abstract off the register read/write

 * functions, ensuring that these cater to all the combinations of module

 * endianness and underlying CPU endianness.

 stop mode request via scu firmware */

 enable stop request */

 remove stop request */

	/* Errata ERR005829 step8:

	 * Write twice INACTIVE(0x8) code to first MB.

 state hasn't changed */

 is this MB empty? */

 This MB was overrun, we lost data */

 increase timstamp to full 32 bit */

	/* Read the Free Running Timer. It is optional but recommended

	 * to unlock Mailbox as soon as possible and make it available

	 * for reception.

 reception interrupt */

 FIFO overflow interrupt */

 transmission complete interrupt */

 after sending a RTR frame MB is in RX mode */

 ACK all bus error, state change and wake IRQ sources */

 state change interrupt or broken error state quirk fix is enabled */

 bus error IRQ - handle if bus error reporting is activated */

	/* availability of error interrupt among state transitions in case

	 * bus error reporting is de-activated and

	 * FLEXCAN_QUIRK_BROKEN_PERR_STATE is enabled:

	 *  +--------------------------------------------------------------+

	 *  | +----------------------------------------------+ [stopped /  |

	 *  | |                                              |  sleeping] -+

	 *  +-+-> active <-> warning <-> passive -> bus off -+

	 *        ___________^^^^^^^^^^^^_______________________________

	 *        disabled(1)  enabled             disabled

	 *

	 * (1): enabled if FLEXCAN_QUIRK_BROKEN_WERR_STATE is enabled

 print chip status */

 CBT */

	/* CBT[EPSEG1] is 5 bit long and CBT[EPROPSEG] is 6 bit

	 * long. The can_calc_bittiming() tries to divide the tseg1

	 * equally between phase_seg1 and prop_seg, which may not fit

	 * in CBT register. Therefore, if phase_seg1 is more than

	 * possible value, increase prop_seg and decrease phase_seg1.

 FDCBT */

		/* FDCBT[FPSEG1] is 3 bit long and FDCBT[FPROPSEG] is

		 * 5 bit long. The can_calc_bittiming tries to divide

		 * the tseg1 equally between phase_seg1 and prop_seg,

		 * which may not fit in FDCBT register. Therefore, if

		 * phase_seg1 is more than possible value, increase

		 * prop_seg and decrease phase_seg1

 CTRL2 */

 FDCTRL */

 TDC must be disabled for Loop Back mode */

	/* 11.8.3.13 Detection and correction of memory errors:

	 * CTRL2[WRMFRZ] grants write access to all memory positions

	 * that require initialization, ranging from 0x080 to 0xADF

	 * and from 0xF28 to 0xFFF when the CAN FD feature is enabled.

	 * The RXMGMASK, RX14MASK, RX15MASK, and RXFGMASK registers

	 * need to be initialized as well. MCR[RFEN] must not be set

	 * during memory initialization.

/* flexcan_chip_start

 *

 * this functions is entered with clocks enabled

 *

 enable module */

 soft reset */

 set freeze, halt */

	/* MCR

	 *

	 * only supervisor access

	 * enable warning int

	 * enable individual RX masking

	 * choose format C

	 * set max mailbox number

	/* MCR

	 *

	 * FIFO:

	 * - disable for timestamp mode

	 * - enable for FIFO mode

	/* MCR

	 *

	 * NOTE: In loopback mode, the CAN_MCR[SRXDIS] cannot be

	 *       asserted because this will impede the self reception

	 *       of a transmitted message. This is not documented in

	 *       earlier versions of flexcan block guide.

	 *

	 * Self Reception:

	 * - enable Self Reception for loopback mode

	 *   (by clearing "Self Reception Disable" bit)

	 * - disable for normal operation

 MCR - CAN-FD */

	/* CTRL

	 *

	 * disable timer sync feature

	 *

	 * disable auto busoff recovery

	 * transmit lowest buffer first

	 *

	 * enable tx and rx warning interrupt

	 * enable bus off interrupt

	 * (== FLEXCAN_CTRL_ERR_STATE)

	/* enable the "error interrupt" (FLEXCAN_CTRL_ERR_MSK),

	 * on most Flexcan cores, too. Otherwise we don't get

	 * any error warning or passive interrupts.

 save for later use */

 leave interrupts disabled for now */

 clear and invalidate unused mailboxes first */

 Errata ERR005829: mark first TX mailbox as INACTIVE */

 mark TX mailbox as INACTIVE */

 acceptance mask/acceptance code (accept everything) */

 clear acceptance filters */

	/* On Vybrid, disable non-correctable errors interrupt and

	 * freeze mode. It still can correct the correctable errors

	 * when HW supports ECC.

	 *

	 * This also works around errata e5295 which generates false

	 * positive memory errors and put the device in freeze mode.

		/* Follow the protocol as described in "Detection

		 * and Correction of Memory Errors" to write to

		 * MECR register (step 1 - 5)

		 *

		 * 1. By default, CTRL2[ECRWRE] = 0, MECR[ECRWRDIS] = 1

		 * 2. set CTRL2[ECRWRE]

 3. clear MECR[ECRWRDIS] */

 4. all writes to MECR must keep MECR[ECRWRDIS] cleared */

		/* 5. after configuration done, lock MECR by either

		 * setting MECR[ECRWRDIS] or clearing CTRL2[ECRWRE]

 synchronize with the can bus */

 print chip status */

/* __flexcan_chip_stop

 *

 * this function is entered with clocks enabled

 freeze + disable module */

 select "bus clock", chip must be disabled */

 set freeze, halt */

 activate FIFO, restrict register access */

	/* Currently we only support newer versions of this core

	 * featuring a RX hardware FIFO (although this driver doesn't

	 * make use of it on some cores). Older cores, found on some

	 * Coldfire derivates are not tested.

	/* Disable core and let pm_runtime_put() disable the clocks.

	 * If CONFIG_PM is not enabled, the clocks will stay powered.

	/* stop mode property format is:

	 * <&gpr req_gpr req_bit>.

 this function could be deferred probe, return -EPROBE_DEFER */

/* flexcan_setup_stop_mode - Setup stop mode for wakeup

 *

 * Return: = 0 setup stop mode successfully or doesn't support this feature

 *         < 0 fail to setup stop mode (could be deferred probe)

 return 0 directly if doesn't support stop mode feature */

 sentinel */ },

 sentinel */

		/* if wakeup is enabled, enter stop mode

		 * else enter disabled mode.

/*

 * TI HECC (CAN) device driver

 *

 * This driver supports TI's HECC (High End CAN Controller module) and the

 * specs for the same is available at <http://www.ti.com>

 *

 * Copyright (C) 2009 Texas Instruments Incorporated - http://www.ti.com/

 * Copyright (C) 2019 Jeroen Hofstee <jhofstee@victronenergy.com>

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed as is WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 TX / RX Mailbox Configuration */

 hardware mailboxes - do not change */

 hardware value - do not change */

/* Important Note: TX mailbox configuration

 * TX mailboxes should be restricted to the number of SKB buffers to avoid

 * maintaining SKB buffers separately. TX mailboxes should be a power of 2

 * for the mailbox logic to work.  Top mailbox numbers are reserved for RX

 * and lower mailboxes for TX.

 *

 * HECC_MAX_TX_MBOX	HECC_MB_TX_SHIFT

 * 4 (default)		2

 * 8			3

 * 16			4

 as per table above */

/* RX mailbox configuration

 *

 * The remaining mailboxes are used for reception and are delivered

 * based on their timestamp, to avoid a hardware race when CANME is

 * changed while CAN-bus traffic is being received.

 TI HECC module registers */

 Mailbox enable */

 Mailbox direction */

 Transmit request set */

 Transmit request */

 Transmission acknowledge */

 Abort acknowledge */

 Receive message pending */

 Receive message lost */

 Remote frame pending */

 SECC only:Global acceptance mask */

 Master control */

 Bit timing configuration */

 Error and status */

 Transmit error counter */

 Receive error counter */

 Global interrupt flag 0 */

 Global interrupt mask */

 Global interrupt flag 1 */

 Mailbox interrupt mask */

 Mailbox interrupt level */

 Overwrite protection control */

 Transmit I/O control */

 Receive I/O control */

 HECC only: Local network time */

 HECC only: Time-out control */

 HECC only: Time-out status */

 SCC only:Enhanced TX I/O control */

 SCC only:Enhanced RX I/O control */

 TI HECC RAM registers */

 Message object time stamp */

 Mailbox registers */

 18 bits mask for extended id's */

 Wait for ~1 sec for CCE bit */

 SCC compat mode */

 Change config request */

 Local Power down - for sleep mode */

 Auto Bus On */

 Self test mode - loopback */

 Software reset */

 Enable CAN TX I/O pin */

 Enable CAN RX I/O pin */

 Extended frame format */

 Acceptance mask enable */

 Auto answer mode */

 form error */

 bit error */

 stuck at dominant error */

 CRC error */

 stuff bit error */

 ack error */

 Bus off status */

 Error passive status */

 Error warning status */

 suspend mode ack */

 Change config enabled */

 Power down mode ack */

 sample points */

 Remote transmit request */

 Message alarm interrupt */

 Timer counter overflow int */

 Global mailbox interrupt */

 Abort ack interrupt */

 Write denied interrupt */

 Wake up interrupt */

 Receive message lost interrupt */

 Bus off interrupt */

 Error passive interrupt */

 Warning level interrupt */

 Mailbox number mask */

 Int line 1 enable */

 Int line 0 enable */

 only busoff/warning/passive */

 system interrupts to int line 1 */

 CAN Bittiming constants as per HECC specs */

 MUST be first member/field */

 CANME register needs protection */

 ERM being set to 0 by default meaning resync at falling edge */

 Set change control request and wait till enabled */

	/* INFO: It has been observed that at times CCE bit may not be

	 * set and hw seems to be ok even if this bit is not set so

	 * timing out with a timing of 1ms to respect the specs

	/* Note: On HECC, BTC can be programmed only in initialization mode, so

	 * it is expected that the can bittiming parameters are set via ip

	 * utility before the device is opened

 Clear CCR (and CANMC register) and wait for CCE = 0 enable */

	/* INFO: CAN net stack handles bus off and hence disabling auto-bus-on

	 * hecc_set_bit(priv, HECC_CANMC, HECC_CANMC_ABO);

	/* INFO: It has been observed that at times CCE bit may not be

	 * set and hw seems to be ok even if this bit is not set so

 Enable TX and RX I/O Control pins */

 Clear registers for clean operation */

 SCC compat mode NOT supported (and not needed too) */

 put HECC in initialization mode and set btc */

 Enable local and global acceptance mask registers */

 Prepare configured mailboxes to receive messages */

 Enable tx interrupts */

	/* Prevent message over-write to create a rx fifo, but not for

	 * the lowest priority mailbox, since that allows detecting

	 * overflows instead of the hardware silently dropping the

	 * messages.

 Enable interrupts */

 Disable the CPK; stop sending, erroring and acking */

 Disable interrupts and disable mailboxes */

/* ti_hecc_xmit: HECC Transmit

 *

 * The transmit mailboxes start from 0 to HECC_MAX_TX_MBOX. In HECC the

 * priority of the mailbox for transmission is dependent upon priority setting

 * field in mailbox registers. The mailbox with highest value in priority field

 * is transmitted first. Only when two mailboxes have the same value in

 * priority field the highest numbered mailbox is transmitted first.

 *

 * To utilize the HECC priority feature as described above we start with the

 * highest numbered mailbox with highest priority level and move on to the next

 * mailbox with the same priority level and so on. Once we loop through all the

 * transmit mailboxes we choose the next priority level (lower) and so on

 * until we reach the lowest priority level on the lowest numbered mailbox

 * when we stop transmission until all mailboxes are transmitted and then

 * restart at highest numbered mailbox with highest priority.

 *

 * Two counters (head and tail) are used to track the next mailbox to transmit

 * and to track the echo buffer for already transmitted mailbox. The queue

 * is stopped when all the mailboxes are busy or when there is a priority

 * value roll-over happens.

 Prepare mailbox for transmission */

 Remote transmission request */

 Extended frame format */

 Standard frame format */

	/* Check for FIFO overrun.

	 *

	 * All but the last RX mailbox have activated overwrite

	 * protection. So skip check for overrun, if we're not

	 * handling the last RX mailbox.

	 *

	 * As the overwrite protection for the last RX mailbox is

	 * disabled, the CAN core might update while we're reading

	 * it. This means the skb might be inconsistent.

	 *

	 * Return an error to let rx-offload discard this CAN frame.

 propagate the error condition to the can stack */

 Disable all interrupts */

 restart queue if wrap-up or if queue stalled on last pkt */

 offload RX mailboxes and let NAPI deliver them */

 clear all interrupt conditions - read back to avoid spurious ints */

 Open common can device */

 handle hecc memory */

 handle hecc-ram memory */

 handle mbx memory */

 TI HECC netdevice driver: platform driver structure */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vxcan.c - Virtual CAN Tunnel for cross namespace communication

 *

 * This code is derived from drivers/net/can/vcan.c for the virtual CAN

 * specific parts and from drivers/net/veth.c to implement the netlink API

 * for network interface pairs in a common and established way.

 *

 * Copyright (c) 2017 Oliver Hartkopp <socketcan@hartkopp.net>

 reset CAN GW hop counter */

 Do not allow changing the MTU while running */

 forward declaration for rtnl_create_link() */

 register peer device */

 register first device */

 cross link the device pair */

	/* Note : dellink() is called from default_device_exit_batch(),

	 * before a rcu_synchronize() point. The devices are guaranteed

	 * not being freed before one RCU grace period.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for CC770 and AN82527 CAN controllers on the legacy ISA bus

 *

 * Copyright (C) 2009, 2011 Wolfgang Grandegger <wg@grandegger.com>

/*

 * Bosch CC770 and Intel AN82527 CAN controllers on the ISA or PC-104 bus.

 * The I/O port or memory address and the IRQ number must be specified via

 * module parameters:

 *

 *   insmod cc770_isa.ko port=0x310,0x380 irq=7,11

 *

 * for ISA devices using I/O ports or:

 *

 *   insmod cc770_isa.ko mem=0xd1000,0xd1000 irq=7,11

 *

 * for memory mapped ISA devices.

 *

 * Indirect access via address and data port is supported as well:

 *

 *   insmod cc770_isa.ko port=0x310,0x380 indirect=1 irq=7,11

 *

 * Furthermore, the following mode parameter can be defined:

 *

 *   clk: External oscillator clock frequency (default=16000000 [16 MHz])

 *   cir: CPU interface register (default=0x40 [DSC])

 *   bcr: Bus configuration register (default=0x40 [CBY])

 *   cor: Clockout register (default=0x00)

 *

 * Note: for clk, cir, bcr and cor, the first argument re-defines the

 * default for all other devices, e.g.:

 *

 *   insmod cc770_isa.ko mem=0xd1000,0xd1000 irq=7,11 clk=24000000

 *

 * is equivalent to

 *

 *   insmod cc770_isa.ko mem=0xd1000,0xd1000 irq=7,11 clk=24000000,24000000

 16 MHz */

/* Spinlock for cc770_isa_port_write_reg_indirect

 * and cc770_isa_port_read_reg_indirect

 The system clock may not exceed 10 MHz */

 The memory clock may not exceed 8 MHz */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Core driver for the CC770 and AN82527 CAN controllers

 *

 * Copyright (C) 2009, 2011 Wolfgang Grandegger <wg@grandegger.com>

/*

 * The CC770 is a CAN controller from Bosch, which is 100% compatible

 * with the AN82527 from Intel, but with "bugs" being fixed and some

 * additional functionality, mainly:

 *

 * 1. RX and TX error counters are readable.

 * 2. Support of silent (listen-only) mode.

 * 3. Message object 15 can receive all types of frames, also RTR and EFF.

 *

 * Details are available from Bosch's "CC770_Product_Info_2007-01.pdf",

 * which explains in detail the compatibility between the CC770 and the

 * 82527. This driver use the additional functionality 3. on real CC770

 * devices. Unfortunately, the CC770 does still not store the message

 * identifier of received remote transmission request frames and

 * therefore it's set to 0.

 *

 * The message objects 1..14 can be used for TX and RX while the message

 * objects 15 is optimized for RX. It has a shadow register for reliable

 * data reception under heavy bus load. Therefore it makes sense to use

 * this message object for the needed use case. The frame type (EFF/SFF)

 * for the message object 15 can be defined via kernel module parameter

 * "msgobj15_eff". If not equal 0, it will receive 29-bit EFF frames,

 * otherwise 11 bit SFF messages.

/*

 * This driver uses the last 5 message objects 11..15. The definitions

 * and structure below allows to configure and assign them to the real

 * message object.

			/*

			 * We don't need extra objects for RTR and EFF if

			 * the additional CC770 functions are enabled.

 Clear message object for send */

 Enable configuration and puts chip in bus-off, disable interrupts */

 Clear interrupts */

 Clear status register */

 Disable all used message objects */

 Clear interrupts */

 Clear status register and pre-set last error code */

 Enable all used message objects*/

	/*

	 * Clear bus-off, interrupts only for errors,

	 * not for status change

 Enable configuration and put chip in bus-off, disable interrupts */

 Set CLKOUT divider and slew rates */

 Configure CPU interface / CLKOUT enable */

 Set bus configuration  */

 Clear interrupts */

 Clear status register */

 Clear and invalidate message objects */

 Set all global ID masks to "don't care" */

 Enable configuration, put chip in bus-off, disable ints */

 Configure cpu interface / CLKOUT disable */

	/*

	 * Check if hardware reset is still inactive or maybe there

	 * is no chip in this address space

 Write and read back test pattern (some arbitrary values) */

 Check if this chip is a CC770 supporting additional functions */

 leave reset mode */

 leave reset mode */

		/*

		 * Unfortunately, the chip does not store the real message

		 * identifier of the received remote transmission request

		 * frame. Therefore we set it to 0.

 Use extended functions of the CC770 */

 Disable interrupts */

 Only the CC770 does show error passive */

 Back to error active */

 Reset the status register including RXOK and TXOK */

 Check for RTR if additional functions are enabled */

	/* When the CC770 is sending an RTR message and it receives a regular

	 * message that matches the id of the RTR message, it will overwrite the

	 * outgoing message in the TX register. When this happens we must

	 * process the received message and try to transmit the outgoing skb

	 * again.

 Shared interrupts and IRQ off? */

 Read the highest pending interrupt request */

 Exit in case of bus-off */

 set chip into reset mode */

 common open */

 init and start chip */

 we support local echo */

 Should we use additional functions? */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for CC770 and AN82527 CAN controllers on the platform bus

 *

 * Copyright (C) 2009, 2011 Wolfgang Grandegger <wg@grandegger.com>

/*

 * If platform data are used you should have similar definitions

 * in your board-specific code:

 *

 *   static struct cc770_platform_data myboard_cc770_pdata = {

 *           .osc_freq = 16000000,

 *           .cir = 0x41,

 *           .cor = 0x20,

 *           .bcr = 0x40,

 *   };

 *

 * Please see include/linux/can/platform/cc770.h for description of

 * above fields.

 *

 * If the device tree is used, you need a CAN node definition in your

 * DTS file similar to:

 *

 *   can@3,100 {

 *           compatible = "bosch,cc770";

 *           reg = <3 0x100 0x80>;

 *           interrupts = <2 0>;

 *           interrupt-parent = <&mpic>;

 *           bosch,external-clock-frequency = <16000000>;

 *   };

 *

 * See "Documentation/devicetree/bindings/net/can/cc770.txt" for further

 * information.

 default */

 The system clock may not exceed 10 MHz */

 The memory clock may not exceed 8 MHz */

 Determine default slew rate */

 CC770 from Bosch */

 AN82527 from Intel CP */

/*

 * CAN bus driver for IFI CANFD controller

 *

 * Copyright (C) 2016 Marek Vasut <marex@denx.de>

 *

 * Details about this controller can be found at

 * http://www.ifi-pld.de/IP/CANFD/canfd.html

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 0x70..0xac */

 0xb0..0xfc */

 IFI CANFD private data structure */

 must be the first member */

		/*

		 * In case the Extended ID frame is received, the standard

		 * and extended part of the ID are swapped in the register,

		 * so swap them back to obtain the correct ID.

 Remove the packet from FIFO */

 No error happened. */

 Propagate the error condition to the CAN stack. */

 Read the error counter register and check for new errors. */

 Reset the error counter, ack the IRQ and re-enable the counter. */

 error active state */

 error warning state */

 error passive state */

 bus-off state */

 propagate the error condition to the CAN stack */

 error warning state */

 error passive state */

 bus-off state */

 Handle bus state changes */

 Handle lost messages on RX */

 Handle lec errors on the bus */

 Handle normal messages on RX */

 No interrupt */

 Clear all pending interrupts but ErrWarn */

 RX IRQ or bus warning, start NAPI */

 TX IRQ */

 Time segment 1 = prop_seg + phase_seg1 */

 Time segment 2 = phase_seg2 */

 Configure bit timing */

 Configure data bit timing */

 Configure transmitter delay */

 Receive all CAN frames (standard ID) */

 Receive all CAN frames (extended ID) */

 Receive all CANFD frames */

 Reset the IP */

 Reset FIFOs */

 Repeat transmission until successful */

 Clear all pending interrupts */

 Unlock, reset and enable the error counter. */

 Enable controller */

 Reset and disable the error counter. */

 Reset the IP */

 Mask all interrupts */

 Clear all pending interrupts */

 Set the state as STOPPED */

 Register interrupt handler */

 Check if the TX buffer is full */

		/*

		 * In case the Extended ID frame is transmitted, the

		 * standard and extended part of the ID are swapped

		 * in the register, so swap them back to send the

		 * correct ID.

 message ram configuration */

 Start the transmission */

 we support local echo */

 IFI CANFD can do both Bosch FD and ISO FD */

 IFI CANFD can do both Bosch FD and ISO FD */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2008-2010

 *

 * - Kurt Van Dijck, EIA Electronics

/*

 * low level DPRAM command.

 * Make sure that card->dpram[DPRAM_FCT_HOST] is preset

 be sure to flush this to the card */

 wait for card */

 DPRAM_FCT_HOST is _not_ aligned */

 don't have any cached variables */

 read return-value now */

 process context => relax */

 be sure to flush this to the card */

 wait for card */

 don't have any cached variables */

 process context => relax */

	/*

	 * firmware records are a binary, unaligned stream composed of:

	 * uint16_t type;

	 * uint32_t addr;

	 * uint16_t len;

	 * uint8_t dat[len];

	 * uint16_t checksum;

	 * all values in little endian.

	 * We could define a struct for this, with __attribute__((packed)),

	 * but would that solve the alignment in _all_ cases (cfr. the

	 * struct itself may be an odd address)?

	 *

	 * I chose to use leXX_to_cpup() since this solves both

	 * endianness & alignment.

 verify checksum */

 increment */

 parse the firmware */

 look for header record */

 ok, we had a header */

 start address, not used here */

 eof */

 be sure to flush caches from IO space */

 align buflen */

 verify record data */

 is not ok */

 no end record seen */

 parse the firmware */

 look for header record */

 ok, we had a header */

 start address */

 eof */

 regular data */

 work in 16bit (target) */

 verify checksum */

 start application in card */

 reset chip */

 don't wait any longer */

 sync */

 get_serial */

 get_version */

 16MHz is the reference */

 find nsec from card */

 test for overflows */

 prepare to start this bus as well */

 bring netdevs down */

			/*

			 * this bus' may just have called open_candev()

			 * which is rather stupid to call close_candev()

			 * already

			 * but we may come here from busoff recovery too

			 * in which case the echo_skb _needs_ flushing too.

			 * just be sure to call open_candev() again

 no buses to be brought up */

 init chip 1 */

 set mode */

 set filter */

 11bit id & mask */

 29bit id.lo & mask.lo & id.hi & mask.hi */

 set output control */

 init chip2 */

 set mode2 */

 set filter2 */

 11bit id & mask */

 29bit id.lo & mask.lo & id.hi & mask.hi */

 set output control2 */

 enable_error_frame */

	/*

	 * Error reporting is switched off at the moment since

	 * the receiving of them is not yet 100% verified

	 * This should be enabled sooner or later

	 *

	if (error_reporting) {

		ret = softing_fct_cmd(card, 51, "enable_error_frame");

		if (ret < 0)

			goto failed;

	}

 initialize interface */

 enable_fifo */

 enable fifo tx ack */

 enable fifo tx ack2 */

 start_chip */

 flush the DPRAM caches */

	/*

	 * do socketcan notifications/status changes

	 * from here, no errors should occur, or the failed: part

	 * must be reviewed

 notify other buses on the restart */

 enable interrupts */

 bring all other interfaces down */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2008-2010

 *

 * - Kurt Van Dijck, EIA Electronics

/*

 * platform_data descriptions

/*

 * platformdata callbacks

/*

 * pcmcia check

 free bits */

 release pcmcia stuff */

/*

 * platform_device wrapper

 * pdev->resource has 2 entries: io & irq

 find matching platform_data */

 setup pcmcia device */

 create softing platform device */

 platform device resources */

 platform device setup */

 softing */

 vector, manufacturer? */

 EDIC */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2008-2010

 *

 * - Kurt Van Dijck, EIA Electronics

/*

 * test is a specific CAN netdev

 * is online (ie. up 'n running, not sleeping, not busoff

 reset DPRAM */

 trigger the tx queue-ing */

 fifo full */

 increment 1, not 2 as you might think */

 can_put_echo_skb() saves the skb, safe to return TX_OK */

/*

 * shortcut for skb delivery

/*

 * softing_handle_1

 * pop 1 entry from the DPRAM queue, and process

 test for lost msgs */

 reset condition */

 prepare msg */

		/*

		 * service to all buses, we don't know which it was applicable

		 * but only service buses that are online

 a dead bus has no overflows */

 prepare for other use */

 trigger dual port RAM */

 not quite useful, probably the card has got out */

 update DPRAM */

 timestamp */

 update internal status */

 this calls can_close_cleanup() */

 trigger socketcan */

 timestamp */

 update socket */

 acknowledge, was tx msg */

/*

 * real interrupt handler

 resume tx queue's */

 it makes no sense to wake dead buses */

/*

 * interrupt routines:

 * schedule the 'real interrupt handler'

/*

 * netdev/candev interoperability

 check or determine and set bittime */

 softing cycle does close_candev() */

 softing_startstop does close_candev() */

/*

 * Softing device management helpers

 return -ERESTARTSYS */;

 reset board */

 boot card */

 flush IO cache */

 memory is not equal */

 load boot firmware */

 load loader firmware */

/*

 * netdev sysfs

 overruled */

 overruled */

/*

 * sysfs for Platform device

/*

 * platform driver

 first, disable card*/

 reset card */

 only now, the chip's are known */

 SPDX-License-Identifier: GPL-2.0-only

/* Copyright (C) 2007, 2011 Wolfgang Grandegger <wg@grandegger.com>

 * Copyright (C) 2012 Stephane Grosjean <s.grosjean@peak-system.com>

 *

 * Derived from the PCAN project file driver/src/pcan_pci.c:

 *

 * Copyright (C) 2001-2006  PEAK System-Technik GmbH

 The PCI device and vendor IDs */

 for PCIe slot cards */

 for Compact-PCI Serial slot cards */

 for PCIe-104 Express slot cards */

 for mini-PCIe slot cards */

 for PCIe slot OEM cards */

 for M2 slot cards */

 PEAK PCIe board access description */

 System Control Registers */

 set bits */

 clear bits */

 Version info registers */

 version reg #1 */

 version reg #2 */

 System Control Registers Bits */

 timestamp clock */

 system clock */

 CAN-FD channel addresses */

 CAN-FD channel registers */

 Misc. control */

 Clock selector */

 64-bits command port */

 Tx request accumulator */

 Tx control set register */

 Tx control clear register */

 64-bits addr for Tx DMA */

 Rx control set register */

 Rx control clear register */

 Rx control write register */

 Rx control ACK register */

 64-bits addr for Rx DMA */

 CAN-FD channel misc register bits */

 timestamp cnt rst */

 CAN-FD channel Clock SELector Source & DIVider */

 SRC=240MHz only */

 SRC=240MHz only */

 SRC=240MHz only */

 SRC=240MHz only */

 SRC=240MHz only */

 0=80MHz, 1=240MHz */

 CAN-FD channel Rx/Tx control register bits */

 Uncached DMA mem */

 reset DMA action */

 IRQ enable */

 Rx IRQ Count and Time Limits */

 Rx msg max nb per IRQ in Rx DMA */

 Time before IRQ if < CL (x100 µs) */

/* Tx anticipation window (link logical address should be aligned on 2K

 * boundary)

 Tx msgs link */

 32-bits IRQ status fields, heading Rx DMA area */

 Rx record */

 Tx Link record */

 Tx page descriptor */

 page virtual address */

 page logical address */

 CAN-FD channel object */

 must be the first member */

 channel config base addr */

 reverse link */

 command buffer */

 DMA virtual and logical addr */

 for Rx and Tx areas */

 free Tx pages counter */

 current page used for Tx */

 next irq tag */

 PEAK-PCIe FD board object */

 64-bits cmds must be atomic */

 array of network devices */

 supported device ids. */

 read a 32 bits value from a SYS block register */

 write a 32 bits value into a SYS block register */

 read a 32 bits value from CAN-FD block register */

 write a 32 bits value into a CAN-FD block register */

 give a channel logical Rx DMA address to the board */

 (DMA must be reset for Rx) */

 write the logical address of the Rx DMA area for this channel */

 also indicates that Rx DMA is cacheable */

 clear channel logical Rx DMA address from the board */

 DMA must be reset for Rx */

 clear the logical address of the Rx DMA area for this channel */

 give a channel logical Tx DMA address to the board */

 (DMA must be reset for Tx) */

 write the logical address of the Tx DMA area for this channel */

 also indicates that Tx DMA is cacheable */

 clear channel logical Tx DMA address from the board */

 DMA must be reset for Tx */

 clear the logical address of the Tx DMA area for this channel */

 read value of current IRQ tag and inc it for next one */

 write the next IRQ tag for this CAN */

 IRQ handler */

 INTA mode only to sync with PCIe transaction */

 read IRQ status from the first 32-bits of the Rx DMA area */

 check if this (shared) IRQ is for this CAN */

 handle rx messages (if any) */

 handle tx link interrupt (if any) */

 wake producer up (only if enough room in echo_skb array) */

 re-enable Rx DMA transfer for this CAN */

 initialize the Tx pages descriptors */

 setup Tx DMA addresses into IP core */

 start (TX_RST=0) Tx Path */

 board specific CANFD command pre-processing */

 pre-process command */

 going into operational mode: setup IRQ handler */

 setup Rx DMA address */

 setup max count of msgs per IRQ */

 clear DMA RST for Rx (Rx start) */

 reset timestamps */

 do an initial ACK */

 enable IRQ for this CAN after having set next irq_tag */

 Tx path will be setup as soon as RX_BARRIER is received */

 write a command */

 64-bits command is atomic */

 board specific CANFD command post-processing */

 controller now in reset mode: */

 disable IRQ for this CAN */

 stop and reset DMA addresses in Tx/Rx engines */

 wait for above commands to complete (read cycle) */

 not enough space in this page: try another one */

 Tx overflow */

 keep address of the very last free slot of current page */

 next, move on a new free page */

 put link record to this new page at the end of prev one */

 next msgs will be put from the begininng of this new page */

 give back room left in the tx ring */

 this slot is now reserved for writing the frame */

 tell the board a frame has been written in Tx DMA area */

 probe for CAN-FD channel #pciefd_board->can_count */

 allocate the candev object with default isize of echo skbs ring */

 fill-in candev private object: */

 setup PCIe-FD own callbacks */

 setup PCIe-FD own command buffer */

 CAN config regs block address */

 allocate non-cacheable DMA'able 4KB memory area for Rx */

 allocate non-cacheable DMA'able 4KB memory area for Tx */

 CAN clock in RST mode */

 read current clock value */

 save the object address in the board structure */

 remove a CAN-FD channel by releasing all of its resources */

 unregister (close) the can device to go back to RST mode first */

 finally, free the candev object */

 remove all CAN-FD channels by releasing their own resources */

 probe for the entire device */

 the number of channels depends on sub-system id */

 allocate board structure object */

 initialize the board structure */

 save the PCI BAR0 virtual address for further system regs access */

 read the firmware version number */

	/* FW < v3.3.0 DMA logic doesn't handle correctly the mix of 32-bit and

	 * 64-bit logical addresses: this workaround forces usage of 32-bit

	 * DMA addresses only when such a fw is detected.

 stop system clock */

 create now the corresponding channels objects */

 set system timestamps counter in RST mode */

 wait a bit (read cycle) */

 free all clocks */

 start system clock */

 remember the board structure address in the device user data */

	/* pci_xxx_config_word() return positive PCIBIOS_xxx error codes while

	 * the probe() function must return a negative errno in case of failure

	 * (err is unchanged if negative)

 free the board structure object, as well as its resources: */

 release CAN-FD channels resources */

 SPDX-License-Identifier: GPL-2.0-only

/* Copyright (C) 2007, 2011 Wolfgang Grandegger <wg@grandegger.com>

 * Copyright (C) 2012 Stephane Grosjean <s.grosjean@peak-system.com>

 *

 * Copyright (C) 2016  PEAK System-Technik GmbH

 internal IP core cache size (used as default echo skbs max number) */

 bittiming ranges of the PEAK-System PC CAN-FD interfaces */

 reset all unused bit to default */

 uCAN commands interface functions */

 default */

	/* all the 11-bits CAN ID values are represented by one bit in a

	 * 64 rows array of 32 bits: the upper 6 bits of the CAN ID select the

	 * row while the lowest 5 bits select the bit in that row.

	 *

	 * bit	filter

	 * 1	passed

	 * 0	discarded

 select the row */

 set/unset bits in the row */

 IP core timestamps are µs. */

 handle the reception of one CAN frame */

 if this frame is an echo, */

 count bytes of the echo instead of skb */

 restart tx queue (a slot is free) */

		/* if this frame is only an echo, stop here. Otherwise,

		 * continue to push this application self-received frame into

		 * its own rx queue.

 otherwise, it should be pushed into rx fifo */

 CANFD frame case */

 CAN 2.0 frame case */

 handle rx/tx error counters notification */

 handle status notification */

 this STATUS is the CNF of the RX_BARRIER: Tx path can be setup */

 wake network queue up (echo_skb array is empty) */

 test state error bits according to their priority */

 back to ERROR_ACTIVE */

 handle uCAN Rx overflow notification */

 handle a single uCAN message */

 null packet found: end of list */

 handle a list of rx_count messages from rx_msg memory address */

 a null packet can be found at the end of a list */

 go back to RESET mode */

 abort last Tx (MUST be done in RESET mode only!) */

 set option: get rx/tx error counters */

 accept all standard CAN ID */

 receiving the RB status says when Tx path is ready */

	/* should never happen except under bus-off condition and (auto-)restart

	 * mechanism

 CAN FD frame format */

 CAN 2.0 frame format */

 always ask loopback for echo management */

 set driver specific bit to differentiate with application loopback */

 struct msg client field is used as an index in the echo skbs ring */

 prepare and save echo skb in internal slot */

 move echo index to the next slot */

	/* if next slot is not free, stop network queue (no slot free in echo

	 * skb ring means that the controller did not write these frames on

	 * the bus: no need to continue).

 stop network tx queue if not enough room to save one more msg too */

 write the skb on the interface */

 we DO support local echo */

 allocate the candev object */

 complete now socket-can initialization side */

 SPDX-License-Identifier: GPL-2.0+

/* Renesas R-Car CAN device driver

 *

 * Copyright (C) 2013 Cogent Embedded, Inc. <source@cogentembedded.com>

 * Copyright (C) 2013 Renesas Solutions Corp.

 Clock Select Register settings */

 Peripheral clock (clkp1) */

 Peripheral clock (clkp2) */

 Externally input clock */

/* Mailbox configuration:

 * mailbox 60 - 63 - Rx FIFO mailboxes

 * mailbox 56 - 59 - Tx FIFO mailboxes

 * non-FIFO mailboxes are not used

 Number of mailboxes in non-FIFO mode */

 Mailbox - window to Rx FIFO */

 Mailbox - window to Tx FIFO */

 Mailbox registers structure */

 IDE and RTR bits, SID and EID */

 Not used */

 Data Length Code - bits [0..3] */

 Data Bytes */

 Time Stamp Higher Byte */

 Time Stamp Lower Byte */

 Mailbox registers */

 Mask Registers 2-9 */

 FIFO Received ID Compare Register */

 Mask Invalid Register 1 */

 Mailbox Interrupt Enable Register 1 */

 Mask Registers 0-1 */

 Mask Invalid Register 0*/

 Mailbox Interrupt Enable Register 0 */

 Message Control Registers */

 Control Register */

 Status register */

 Bit Configuration Register */

 Clock Select Register */

 Receive FIFO Control Register */

 Receive FIFO Pointer Control Register */

 Transmit FIFO Control Register */

 Transmit FIFO Pointer Control Register */

 Error Interrupt Enable Register */

 Error Interrupt Factor Judge Register */

 Receive Error Count Register */

 Transmit Error Count Register */

 Error Code Store Register */

 Channel Search Support Register */

 Mailbox Search Status Register */

 Mailbox Search Mode Register */

 Time Stamp Register */

 Acceptance Filter Support Register */

 Test Control Register */

 Interrupt Enable Register */

 Interrupt Status Register */

 Mailbox Search Mask Register */

 Must be the first member! */

 Control Register bits */

 Bus-Off Recovery Mode Bits */

 Entry to halt mode */

 at bus-off entry */

 Operating Mode Select Bit */

 Message Lost Mode Select */

 ID Format Mode Select Bits */

 Mixed ID mode */

 Mailbox Mode select */

 Status Register bits */

 Reset Status Bit */

 FIFO Received ID Compare Registers 0 and 1 bits */

 ID Extension Bit */

 Remote Transmission Request Bit */

 Receive FIFO Control Register bits */

 Receive FIFO Empty Status Flag */

 Receive FIFO Enable */

 Transmit FIFO Control Register bits */

 Transmit FIFO Unsent Message */

 Number Status Bits */

 Offset of Transmit FIFO Unsent */

 Message Number Status Bits */

 Transmit FIFO Enable */

 Number of mask registers */

 for Rx mailboxes 0-31 */

 Bit Configuration Register settings */

 Mailbox and Mask Registers bits */

 Mailbox Interrupt Enable Register 1 bits */

 Receive  FIFO Interrupt Enable */

 Transmit FIFO Interrupt Enable */

 Interrupt Enable Register bits */

 Error (ERS) Interrupt Enable Bit */

 Reception FIFO Interrupt */

 Enable Bit */

 Transmission FIFO Interrupt */

 Enable Bit */

 Interrupt Status Register bits */

 Error (ERS) Interrupt Status Bit */

 Reception FIFO Interrupt */

 Status Bit */

 Transmission FIFO Interrupt */

 Status Bit */

 Error Interrupt Enable Register bits */

 Bus Lock Interrupt Enable */

 Overload Frame Transmit */

 Interrupt Enable */

 Receive Overrun  Interrupt Enable */

 Bus-Off Recovery Interrupt Enable */

 Bus-Off Entry Interrupt Enable */

 Error Passive Interrupt Enable */

 Error Warning Interrupt Enable */

 Bus Error Interrupt Enable */

 Error Interrupt Factor Judge Register bits */

 Bus Lock Detect Flag */

 Overload Frame Transmission */

 Detect Flag */

 Receive Overrun Detect Flag */

 Bus-Off Recovery Detect Flag */

 Bus-Off Entry Detect Flag */

 Error Passive Detect Flag */

 Error Warning Detect Flag */

 Bus Error Detect Flag */

 Error Code Store Register bits */

 Error Display Mode Select Bit */

 ACK Delimiter Error Flag */

 Bit Error (dominant) Flag */

 Bit Error (recessive) Flag */

 CRC Error Flag */

 ACK Error Flag */

 Form Error Flag */

 Stuff Error Flag */

 Propagate the error condition to the CAN stack */

 Clear interrupt condition */

 Clear interrupt condition */

 Clear interrupt condition */

 Clear interrupt */

 Disable Rx FIFO interrupts */

	/* Don't overwrite CLKR with 32-bit BCR access; CLKR has 8-bit access.

	 * All the registers are big-endian but they get byte-swapped on 32-bit

	 * read/write (but not on 8-bit, contrary to the manuals)...

	/* Set controller to known mode:

	 * - FIFO mailbox mode

	 * - accept all messages

	 * - overrun mode

	 * CAN is in sleep mode after MCU hardware or software reset.

 Go to reset mode */

 Select mixed ID mode */

 Entry to halt mode automatically */

 at bus-off */

 Select FIFO mailbox mode */

 Overrun mode */

 Accept all SID and EID */

 In FIFO mailbox mode, write "0" to bits 24 to 31 */

 Accept all frames */

 Enable and configure FIFO mailbox interrupts */

 Accumulate error codes */

 Enable error interrupts */

 Go to operation mode */

 Enable Rx and Tx FIFO */

 Go to (force) reset mode */

 Go to sleep mode */

 Extended frame format */

 Standard frame format */

 Remote transmission request */

	/* Start Tx: write 0xff to the TFPCR register to increment

	 * the CPU-side pointer for the transmit FIFO to the next

	 * mailbox location

 Stop the queue if we've filled all FIFO entries */

 Clear interrupt bit */

		/* Write 0xff to the RFPCR register to increment

		 * the CPU-side pointer for the receive FIFO

		 * to the next mailbox location

 All packets processed */

 SPDX-License-Identifier: GPL-2.0+

/* Renesas R-Car CAN FD device driver

 *

 * Copyright (C) 2015 Renesas Electronics Corp.

/* The R-Car CAN FD controller can operate in either one of the below two modes

 *  - CAN FD only mode

 *  - Classical CAN (CAN 2.0) only mode

 *

 * This driver puts the controller in CAN FD only mode by default. In this

 * mode, the controller acts as a CAN FD node that can also interoperate with

 * CAN 2.0 nodes.

 *

 * To switch the controller to Classical CAN (CAN 2.0) only mode, add

 * "renesas,no-can-fd" optional property to the device tree node. A h/w reset is

 * also required to switch modes.

 *

 * Note: The h/w manual register naming convention is clumsy and not acceptable

 * to use as it is in the driver. However, those names are added as comments

 * wherever it is modified to a readable name.

 Global register bits */

 RSCFDnCFDGRMCFG */

 RSCFDnCFDGCFG / RSCFDnGCFG */

 CAN FD only */

 RSCFDnCFDGCTR / RSCFDnGCTR */

 CAN FD only */

 RSCFDnCFDGSTS / RSCFDnGSTS */

 Non-operational status */

 RSCFDnCFDGERFL / RSCFDnGERFL */

 CAN FD only */

 AFL Rx rules registers */

 RSCFDnCFDGAFLCFG0 / RSCFDnGAFLCFG0 */

 RSCFDnCFDGAFLECTR / RSCFDnGAFLECTR */

 RSCFDnCFDGAFLIDj / RSCFDnGAFLIDj */

 RSCFDnCFDGAFLP1_j / RSCFDnGAFLP1_j */

 Channel register bits */

 RSCFDnCmCFG - Classical CAN only */

 RSCFDnCFDCmNCFG - CAN FD only */

 RSCFDnCFDCmCTR / RSCFDnCmCTR */

 RSCFDnCFDCmSTS / RSCFDnCmSTS */

 RSCFDnCFDCmERFL / RSCFDnCmERFL */

 above bits 14:0 */

 RSCFDnCFDCmDCFG */

 RSCFDnCFDCmFDCFG */

 RSCFDnCFDRFCCx */

 RSCFDnCFDRFSTSx */

 RSCFDnCFDRFIDx */

 RSCFDnCFDRFPTRx */

 RSCFDnCFDRFFDSTSx */

 Common FIFO bits */

 RSCFDnCFDCFCCk */

 RSCFDnCFDCFSTSk */

 RSCFDnCFDCFIDk */

 RSCFDnCFDCFPTRk */

 RSCFDnCFDCFFDCSTSk */

/* This controller supports either Classical CAN only mode or CAN FD only mode.

 * These modes are supported in two separate set of register maps & names.

 * However, some of the register offsets are common for both modes. Those

 * offsets are listed below as Common registers.

 *

 * The CAN FD only mode specific registers & Classical CAN only mode specific

 * registers are listed separately. Their register names starts with

 * RCANFD_F_xxx & RCANFD_C_xxx respectively.

 Common registers */

 RSCFDnCFDCmNCFG / RSCFDnCmCFG */

 RSCFDnCFDCmCTR / RSCFDnCmCTR */

 RSCFDnCFDCmSTS / RSCFDnCmSTS */

 RSCFDnCFDCmERFL / RSCFDnCmERFL */

 RSCFDnCFDGCFG / RSCFDnGCFG */

 RSCFDnCFDGCTR / RSCFDnGCTR */

 RSCFDnCFDGCTS / RSCFDnGCTS */

 RSCFDnCFDGERFL / RSCFDnGERFL */

 RSCFDnCFDGTSC / RSCFDnGTSC */

 RSCFDnCFDGAFLECTR / RSCFDnGAFLECTR */

 RSCFDnCFDGAFLCFG0 / RSCFDnGAFLCFG0 */

 RSCFDnCFDGAFLCFG1 / RSCFDnGAFLCFG1 */

 RSCFDnCFDRMNB / RSCFDnRMNB */

 RSCFDnCFDRMND / RSCFDnRMND */

 RSCFDnCFDRFCCx / RSCFDnRFCCx */

 RSCFDnCFDRFSTSx / RSCFDnRFSTSx */

 RSCFDnCFDRFPCTRx / RSCFDnRFPCTRx */

 Common FIFO Control registers */

 RSCFDnCFDCFCCx / RSCFDnCFCCx */

 RSCFDnCFDCFSTSx / RSCFDnCFSTSx */

 RSCFDnCFDCFPCTRx / RSCFDnCFPCTRx */

 RSCFDnCFDFESTS / RSCFDnFESTS */

 RSCFDnCFDFFSTS / RSCFDnFFSTS */

 RSCFDnCFDFMSTS / RSCFDnFMSTS */

 RSCFDnCFDRFISTS / RSCFDnRFISTS */

 RSCFDnCFDCFRISTS / RSCFDnCFRISTS */

 RSCFDnCFDCFTISTS / RSCFDnCFTISTS */

 RSCFDnCFDTMCp / RSCFDnTMCp */

 RSCFDnCFDTMSTSp / RSCFDnTMSTSp */

 RSCFDnCFDTMTRSTSp / RSCFDnTMTRSTSp */

 RSCFDnCFDTMTARSTSp / RSCFDnTMTARSTSp */

 RSCFDnCFDTMTCSTSp / RSCFDnTMTCSTSp */

 RSCFDnCFDTMTASTSp / RSCFDnTMTASTSp */

 RSCFDnCFDTMIECy / RSCFDnTMIECy */

 RSCFDnCFDTXQCCm / RSCFDnTXQCCm */

 RSCFDnCFDTXQSTSm / RSCFDnTXQSTSm */

 RSCFDnCFDTXQPCTRm / RSCFDnTXQPCTRm */

 RSCFDnCFDTHLCCm / RSCFDnTHLCCm */

 RSCFDnCFDTHLSTSm / RSCFDnTHLSTSm */

 RSCFDnCFDTHLPCTRm / RSCFDnTHLPCTRm */

 RSCFDnCFDGTINTSTS0 / RSCFDnGTINTSTS0 */

 RSCFDnCFDGTINTSTS1 / RSCFDnGTINTSTS1 */

 RSCFDnCFDGTSTCFG / RSCFDnGTSTCFG */

 RSCFDnCFDGTSTCTR / RSCFDnGTSTCTR */

 RSCFDnCFDGLOCKK / RSCFDnGLOCKK */

 RSCFDnCFDGRMCFG */

 RSCFDnCFDGAFLIDj / RSCFDnGAFLIDj */

 RSCFDnCFDGAFLMj / RSCFDnGAFLMj */

 RSCFDnCFDGAFLP0j / RSCFDnGAFLP0j */

 RSCFDnCFDGAFLP1j / RSCFDnGAFLP1j */

 Classical CAN only mode register map */

 RSCFDnGAFLXXXj offset */

 RSCFDnRMXXXq -> RCANFD_C_RMXXX(q) */

 RSCFDnRFXXx -> RCANFD_C_RFXX(x) */

 RSCFDnCFXXk -> RCANFD_C_CFXX(ch, k) */

 RSCFDnTMXXp -> RCANFD_C_TMXX(p) */

 RSCFDnTHLACCm */

 RSCFDnRPGACCr */

 CAN FD mode specific register map */

 RSCFDnCFDCmXXX -> RCANFD_F_XXX(m) */

 RSCFDnCFDGAFLXXXj offset */

 RSCFDnCFDRMXXXq -> RCANFD_F_RMXXX(q) */

 RSCFDnCFDRFXXx -> RCANFD_F_RFXX(x) */

 RSCFDnCFDCFXXk -> RCANFD_F_CFXX(ch, k) */

 RSCFDnCFDTMXXp -> RCANFD_F_TMXX(p) */

 RSCFDnCFDTHLACCm */

 RSCFDnCFDRPGACCr */

 Constants */

 Tx FIFO depth */

 Rx poll quota */

 Two channels max */

 only one rule per channel */

/* Rx FIFO is a global resource of the controller. There are 8 such FIFOs

 * available. Each channel gets a dedicated Rx FIFO (i.e.) the channel

 * number is added to RFFIFO index.

/* Tx/Rx or Common FIFO is a per channel resource. Each channel has 3 Common

 * FIFOs dedicated to them. Use the first (index 0) FIFO out of the 3 for Tx.

 fCAN clock select register settings */

 CANFD clock */

 Externally input clock */

 Channel priv data */

 Must be the first member */

 Controller reference */

 Register base address */

 For net stats */

 Incremented on xmit */

 Incremented on xmit done */

 Channel number */

 To protect tx path */

 Global priv data */

 Register base address */

 Respective platform device */

 Peripheral clock */

 fCAN clock */

 CANFD or Ext clock */

 Enabled channels mask */

 CAN FD or Classical CAN only mode */

 CAN FD mode nominal rate constants */

 CAN FD mode data rate constants */

 Classical CAN mode bitrate constants */

 Helper functions */

	/* Check RAMINIT flag as CAN RAM initialization takes place

	 * after the MCU reset

 Transition to Global Reset mode */

 Ensure Global reset mode */

 Reset Global error flags */

 Set the controller into appropriate mode */

 Transition all Channels to reset mode */

 Ensure Channel reset mode */

 Global configuration settings */

 ECC Error flag Enable */

 Truncate payload to configured message size RFPLS */

 Set External Clock if selected */

 Channel configuration settings */

 Channel 0 always starts from 0th rule */

 Get number of Channel 0 rules and adjust */

 Enable write access to entry */

 Write number of rules for channel */

 Accept all IDs */

 IDE or RTR is not considered for matching */

 Any data length accepted */

 Place the msg in corresponding Rx FIFO entry */

 Disable write access to page */

 Rx FIFO is used for reception */

 Select Rx FIFO based on channel */

 b010 - 8 messages Rx FIFO depth */

 b111 - Max 64 bytes payload */

 b000 - Max 8 bytes payload */

	/* Tx/Rx(Common) FIFO configured in Tx mode is

	 * used for transmission

	 *

	 * Each channel has 3 Common FIFO dedicated to them.

	 * Use the 1st (index 0) out of 3

 0th buffer */

 b01 - Transmit mode */

 b010 - 8 messages Tx FIFO depth */

 b111 - Max 64 bytes payload */

 b000 - Max 8 bytes payload */

 Clear FD mode specific control/status register */

 Clear any stray error interrupt flags */

 Global interrupts setup */

 Disable all interrupts */

 Clear any stray error interrupt flags */

 Clear any stray error flags */

 Channel interrupts setup */

 Clear any stray error flags */

		/* Message Lost flag will be set for respective channel

		 * when this condition happens with counters and flags

		 * already updated.

	/* Clear all global error interrupts. Only affected channels bits

	 * get cleared

 Propagate the error condition to the CAN stack */

 Channel error interrupts */

 Clear channel error interrupts that are handled */

 Wake producer only when there is room */

 Clear interrupt */

 Handle global error interrupts */

 Handle Rx interrupts */

 Disable Rx FIFO interrupts */

	/* Global error interrupts still indicate a condition specific

	 * to a channel. RxFIFO interrupt is a global interrupt.

 Handle transition from error to normal states */

 Handle Tx interrupts */

 Handle channel error interrupts */

 Handle state change to lower states */

 Common FIFO is a per channel resource */

 Nominal bit timing settings */

 CAN FD only mode */

 Data bit timing settings */

 Classical CAN only mode */

 Set channel to Operational mode */

 Verify channel mode change */

 Enable Common & Rx FIFO */

 Peripheral clock is already enabled in probe */

 Transition to channel reset mode  */

 Check Channel reset mode */

 Disable Common & Rx FIFO */

 Set the state as STOPPED */

 CAN FD frame format */

 Stop the queue if we've filled all FIFO entries */

	/* Start Tx: Write 0xff to CFPC to increment the CPU-side

	 * pointer for the Common FIFO

	/* Write 0xff to RFPC to increment the CPU-side

	 * pointer of the Rx FIFO

 Check FIFO empty condition */

 Clear interrupt bit */

 All packets processed */

 Enable Rx FIFO interrupts */

 Peripheral clock is already enabled in probe */

 Controller starts in CAN FD only mode */

 Controller starts in Classical CAN only mode */

 CAN FD only mode - default */

 Classical CAN only mode */

 Channel 0 */

 Channel 1 */

 For backward compatibility get irq by index */

 For backward compatibility get irq by index */

 Global controller context */

 Peripheral clock */

	/* fCAN clock: Pick External clock. If not available fallback to

	 * CANFD clock

 CANFD clock is further divided by (1/2) within the IP */

 Request IRQ that's common for both channels */

 Enable peripheral clock for register access */

 Controller in Global reset & Channel reset mode */

 Configure per channel attributes */

 Configure Channel's Rx fifo */

 Configure Channel's Tx (Common) fifo */

 Configure receive rules */

 Configure common interrupts */

 Start Global operation mode */

 Verify mode change */

 Enter global sleep mode */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * CAN driver for EMS Dr. Thomas Wuensche CPC-USB/ARM7

 *

 * Copyright (C) 2004-2009 EMS Dr. Thomas Wuensche

 Control-Values for CPC_Control() Command Subject Selection */

 Control Command Actions */

 Messages from CPC to PC */

 CAN data frame */

 CAN remote frame */

 Actual CAN parameters */

 CAN state message */

 Extended CAN data frame */

 Extended remote frame */

 change interface behavior */

 command processed confirmation */

 overrun events */

 detected bus errors */

 RX/TX error counter */

 Messages from the PC to the CPC interface  */

 CAN data frame */

 control of interface behavior */

 set CAN parameters */

 CAN remote frame */

 CAN state message */

 Extended CAN data frame */

 Extended CAN remote frame */

 exit the CAN */

 request the CAN error counters */

 clear CPC_MSG queue */

 clear CPC_CMD queue */

 Philips basic CAN controller */

 Ecode type */

 Overrun types */

/*

 * If the CAN controller lost a message we indicate it with the highest bit

 * set in the count field.

 Size of the "struct ems_cpc_msg" without the union */

 Define these values to match your devices */

 Mode register NXP LPC2119/SJA1000 CAN Controller */

 ECC register NXP LPC2119/SJA1000 CAN Controller */

 Status register content */

/*

 * The device actually uses a 16MHz clock to generate the CAN clock

 * but it expects SJA1000 bit settings based on 8MHz (is internally

 * converted).

/*

 * CAN-Message representation in a CPC_MSG. Message object type is

 * CPC_MSG_TYPE_CAN_FRAME or CPC_MSG_TYPE_RTR_FRAME or

 * CPC_MSG_TYPE_EXT_CAN_FRAME or CPC_MSG_TYPE_EXT_RTR_FRAME.

 Representation of the CAN parameters for the SJA1000 controller */

 CAN params message representation */

 Will support M16C CAN controller in the future */

 Structure for confirmed message handling */

 error code */

 Structure for overrun conditions */

 SJA1000 CAN errors (compatible to NXP LPC2119) */

 structure for CAN error conditions */

 Other controllers may also provide error code capture regs */

/*

 * Structure containing RX/TX error counter. This structure is used to request

 * the values of the CAN controllers TX and RX error counter.

 Main message type used between library and application */

 type of message */

 length of data within union 'msg' */

 confirmation handle */

 timestamp in seconds */

 timestamp in nano seconds */

/*

 * Table of devices that work with this driver

 * NOTE: This driver supports only CPC-USB/ARM7 (LPC2119) yet.

 Terminating entry */

 must be the first member */

 remember number of available slots */

 active controller parameters */

 unlink */

 bus error interrupt */

 Error occurred during transmission? */

/*

 * callback for bulk IN urb

 success */

 Process CAN state changes */

 Process errorframe */

 Message lost while receiving */

/*

 * callback for bulk IN urb

 free up our allocated buffer */

 transmission complete interrupt */

 Release context */

/*

 * Send the given CPC command synchronously

 Copy payload */

 Clear header */

/*

 * Change CAN controllers' mode register

/*

 * Send a CPC_Control command to change behaviour when interface receives a CAN

 * message, bus error or CAN state changed notifications.

/*

 * Start interface

 initial size */

 create a URB, and a buffer for it */

 Drop reference, USB core will take care of freeing it */

 Did we submit any URBs */

 Warn if we've couldn't transmit all the URBs */

 Setup and start interrupt URB */

 CPC-USB will transfer received message to host */

 CPC-USB will transfer CAN state changes to host */

 CPC-USB will transfer bus errors to host */

 common open */

 finally start device */

 create a URB, and a buffer for it, and copy the data to the URB */

	/*

	 * May never happen! When this happens we'd more URBs in flight as

	 * allowed (MAX_TX_URBS).

 Slow down tx path */

	/*

	 * Release our reference to this URB, the USB core will eventually free

	 * it entirely.

 Stop polling */

 Set CAN controller to reset mode */

 Acceptance filter open */

 Acceptance filter open */

/*

 * probe function for new CPC-USB devices

 we support local echo */

/*

 * called by the usb core when the device is removed from the system

 usb specific object needed to register this driver with the usb subsystem */

 SPDX-License-Identifier: GPL-2.0-only

/* CAN driver for Geschwister Schneider USB/CAN devices

 * and bytewerk.org candleLight USB CAN interfaces.

 *

 * Copyright (C) 2013-2016 Geschwister Schneider Technologie-,

 * Entwicklungs- und Vertriebs UG (Haftungsbeschränkt).

 * Copyright (C) 2016 Hubert Denkmair

 *

 * Many thanks to all socketcan devs!

 Device specific constants */

 Device specific constants */

 reset a channel. turns it off */

 starts a channel */

 data types passed between host and device */

/* The firmware on the original USB2CAN by Geschwister Schneider

 * Technologie Entwicklungs- und Vertriebs UG exchanges all data

 * between the host and the device in host byte order. This is done

 * with the struct gs_host_config::byte_order member, which is sent

 * first to indicate the desired byte order.

 *

 * The widely used open source firmware candleLight doesn't support

 * this feature and exchanges the data in little endian byte order.

/* The GS USB devices make use of the same flags and masks as in

 * linux/can.h and linux/can/error.h, and no additional mapping is necessary.

 Only send a max of GS_MAX_TX_URBS frames per channel at a time. */

 Only launch a max of GS_MAX_RX_URBS usb requests at a time. */

/* Maximum number of interfaces the driver supports per device.

 * Current hardware only supports 2 interfaces. The future may vary.

 must be the first member */

 channel number */

 This lock prevents a race condition between xmit and receive. */

 usb interface struct */

/* 'allocate' a tx context.

 * returns a valid tx context or NULL if there is no space.

/* releases a tx context

/* Get a tx context by id.

 success */

 do not resubmit aborted urbs. eg: when device goes down */

 device reports out of range channel id */

 normal rx */

 ERROR frames tell us information about the controller */

 echo_id == hf->echo_id */

 bad devices send bad echo_ids. */

 USB failure take down all interfaces */

 request bit timings */

 find an empty context to keep track of transmission */

 create a URB, and a buffer for it */

 usb send failed */

 Slow down tx path */

 let usb core take care of this urb */

 alloc rx urb */

 alloc rx buffer */

 fill, anchor, and submit rx urb */

			/* Drop reference,

			 * USB core will take care of freeing it

 flags */

	/* Controller is not allowed to retry TX

	 * this mode is unavailable on atmels uc3c hardware

 finally start device */

 Stop polling */

 Stop sending URBs */

 reset the device */

 reset tx contexts */

 close the netdev */

 blink LED's for finding the this interface */

 fetch bit timing constants */

 create netdev */

 we support full roundtrip echo */

 dev setup */

 can setup */

 send host config */

 read device config */

 save error code to return later */

 on failure destroy previously created candevs */

 Terminating entry */

 SPDX-License-Identifier: GPL-2.0

/* Driver for Theobroma Systems UCAN devices, Protocol Version 3

 *

 * Copyright (C) 2018 Theobroma Systems Design und Consulting GmbH

 *

 *

 * General Description:

 *

 * The USB Device uses three Endpoints:

 *

 *   CONTROL Endpoint: Is used the setup the device (start, stop,

 *   info, configure).

 *

 *   IN Endpoint: The device sends CAN Frame Messages and Device

 *   Information using the IN endpoint.

 *

 *   OUT Endpoint: The driver sends configuration requests, and CAN

 *   Frames on the out endpoint.

 *

 * Error Handling:

 *

 *   If error reporting is turned on the device encodes error into CAN

 *   error frames (see uapi/linux/can/error.h) and sends it using the

 *   IN Endpoint. The driver updates statistics and forward it.

 the CAN controller needs a while to enable/disable the bus */

 this driver currently supports protocol version 3 only */

/* UCAN Message Definitions

 * ------------------------

 *

 *  ucan_message_out_t and ucan_message_in_t define the messages

 *  transmitted on the OUT and IN endpoint.

 *

 *  Multibyte fields are transmitted with little endianness

 *

 *  INTR Endpoint: a single uint32_t storing the current space in the fifo

 *

 *  OUT Endpoint: single message of type ucan_message_out_t is

 *    transmitted on the out endpoint

 *

 *  IN Endpoint: multiple messages ucan_message_in_t concateted in

 *    the following way:

 *

 *	m[n].len <=> the length if message n(including the header in bytes)

 *	m[n] is is aligned to a 4 byte boundary, hence

 *	  offset(m[0])	 := 0;

 *	  offset(m[n+1]) := offset(m[n]) + (m[n].len + 3) & 3

 *

 *	this implies that

 *	  offset(m[n]) % 4 <=> 0

 Device Global Commands */

 UCAN Commands */

 start the can transceiver - val defines the operation mode */

 cancel pending transmissions and stop the can transceiver */

 send can transceiver into low-power sleep mode */

 wake up can transceiver from low-power sleep mode */

 reset the can transceiver */

	/* get piece of info from the can transceiver - subcmd defines what

	 * piece

 clear or disable hardware filter - subcmd defines which of the two */

 Setup bittiming */

 recover from bus-off state */

/* UCAN_COMMAND_START and UCAN_COMMAND_GET_INFO operation modes (bitmap).

 * Undefined bits must be set to 0.

 UCAN_COMMAND_GET subcommands */

 UCAN_COMMAND_FILTER subcommands */

 OUT endpoint message types */

 transmit a CAN frame */

 IN endpoint message types */

 CAN frame transmission completed */

 CAN frame received */

 OR-ing any of UCAN_MODE_* */

 Time quanta (TQ) in nanoseconds */

 TQ Prescaler */

 Samplepoint on tenth percent */

 Propagation segment in TQs */

 Phase buffer segment 1 in TQs */

 Phase buffer segment 2 in TQs */

 Synchronisation jump width in TQs */

 Clock Frequency for tq generation */

 Size of the transmission fifo */

 can_bittiming fields... */

 ...can_bittiming fields */

 supported control modes */

 Number of HW filter banks */

 Number of receive Mailboxes */

	/* Setup Bittiming

	 * bmRequest == UCAN_COMMAND_START

	/* Setup Bittiming

	 * bmRequest == UCAN_COMMAND_SET_BITTIMING

	/* Get Device Information

	 * bmRequest == UCAN_COMMAND_GET; wValue = UCAN_COMMAND_GET_INFO

	/* Get Protocol Version

	 * bmRequest == UCAN_COMMAND_GET;

	 * wValue = UCAN_COMMAND_GET_PROTOCOL_VERSION

 Transmission Complete within ucan_message_in */

 CAN Data message format within ucan_message_in/out */

	/* note DLC is computed by

	 *    msg.len - sizeof (msg.len)

	 *            - sizeof (msg.type)

	 *            - sizeof (msg.can_msg.id)

 Data of CAN frames */

 RTR dlc */

 OUT Endpoint, outbound messages */

 Length of the content include header */

 UCAN_OUT_TX and friends */

 command sub type */

		/* Transmit CAN frame

		 * (type == UCAN_TX) && ((msg.can_msg.id & CAN_RTR_FLAG) == 0)

		 * subtype stores the echo id

 IN Endpoint, inbound messages */

 Length of the content include header */

 UCAN_IN_RX and friends */

 command sub type */

		/* CAN Frame received

		 * (type == UCAN_IN_RX)

		 * && ((msg.can_msg.id & CAN_RTR_FLAG) == 0)

		/* CAN transmission complete

		 * (type == UCAN_IN_TX_COMPLETE)

 Macros to calculate message lengths */

 Context Information for transmission URBs */

 Information reported by the USB device */

 Driver private data */

 must be the first member */

 linux USB device structures */

	/* lock for can->echo_skb (used around

	 * can_put/get/free_echo_skb

 usb device information information */

 transmission and reception buffers */

 transmission control information and locks */

 lock is not needed because, driver is currently opening or closing */

 release contexts if any */

 lock is not needed because, driver is currently opening */

 execute context operation atomically */

 update context */

 stop queue if necessary */

 execute context operation atomically */

 context was not allocated, maybe the device sent garbage */

 check if the queue needs to be woken */

/* Parse the device information structure reported by the device and

 * setup private variables accordingly

 store the data */

/* Handle a CAN error frame that we have received from the device.

 * Returns true if the can state has changed.

 controller problems, details in data[1] */

 controller state bits: if multiple are set the worst wins */

 protocol error, details in data[2] */

 no state change - we are done */

 we switched into a better state */

 we switched into a worse state */

/* Callback on reception of a can frame via the IN endpoint

 *

 * This function allocates an skb and transferres it to the Linux

 * network stack

 get the contents of the length field */

 check sanity */

 handle error frames */

 if berr-reporting is off only state changes get through */

 compute the mask for canid */

 allocate skb */

 fill the can frame */

 compute DLC taking RTR_FLAG into account */

 copy the payload of non RTR frames */

 don't count error frames as real packets */

 pass it to Linux */

 callback indicating completed transmission */

 we did not submit such echo ids */

 gather information from the context */

		/* Release context and restart queue if necessary.

		 * Also check if the context was allocated

 update statistics */

 callback on reception of a USB message */

	/* the device is not up and the driver should not receive any

	 * data on the bulk in pipe

 check URB status */

 urb is not resubmitted -> free dma data */

 sanity check */

 iterate over input */

 check sanity (length of header) */

 setup the message address */

 check sanity (length of content) */

 proceed to next message */

 align to 4 byte boundary */

 resubmit urb when done */

 callback after transmission of a USB message */

 get the urb context */

 free up our allocated buffer */

 sanity check */

 transmission failed (USB - the device will not send a TX complete) */

 update counters an cleanup */

 release context and restart the queue if necessary */

 cleanup this urb */

 cleanup other unsubmitted urbs */

/* Submits rx urbs with the semantic: Either submit all, or cleanup

 * everything. I case of errors submitted urbs are killed and all urbs in

 * the array are freed. I case of no errors every entry in the urb

 * array is set to NULL.

	/* Iterate over all urbs to submit. On success remove the urb

	 * from the list.

		/* Anchor URB and drop reference, USB core will take

		 * care of freeing it

 Cleanup unsubmitted urbs */

 Kill urbs that are already submitted */

 Open the network device */

	/* Allocate and prepare IN URBS - allocated and anchored

	 * urbs are stored in urbs[] for clean

 Check the control mode */

	/* Enable this in any case - filtering is down within the

	 * receive path

 Driver is ready to receive data - start the USB device */

 Call CAN layer open */

 Driver is ready to receive data. Submit RX URBS */

 Start the network queue */

 The device have started already stop it */

	/* The device might have received data, reset it for

	 * consistent state

 clean up unsubmitted urbs */

 create a URB, and a buffer for it, and copy the data to the URB */

 build the USB message */

 build the urb */

 callback when Linux needs to send a can frame */

 check skb */

 allocate a context and slow down tx path, if fifo state is low */

 prepare urb for transmission */

 put the skb on can loopback stack */

 transmit it */

 cleanup urb */

 on error, clean up */

		/* remove the skb from the echo stack - this also

		 * frees the skb

 release ref, as we do not need the urb anymore */

/* Device goes down

 *

 * Clean up used resources

 stop sending data */

 stop receiving data */

 stop and reset can device */

 CAN driver callbacks */

/* Request to set bittiming

 *

 * This function generates an USB set bittiming message and transmits

 * it to the device

/* Restart the device to get it out of BUS-OFF state.

 * Called when the user runs "ip link set can1 type can restart".

		/* check if queue can be restarted,

		 * up->available_tx_urbs must be protected by the

		 * lock

 Probe the device, reset it and gather general device information */

	/* Stage 1 - Interface Parsing

	 * ---------------------------

	 *

	 * Identifie the device USB interface descriptor and its

	 * endpoints. Probing is aborted on errors.

 check if the interface is sane */

 interface sanity check */

 check interface endpoints */

 In Endpoint */

 Out Endpoint */

 check if interface is sane */

	/* Stage 2 - Device Identification

	 * -------------------------------

	 *

	 * The device interface seems to be a ucan device. Do further

	 * compatibility checks. On error probing is aborted, on

	 * success this stage leaves the ctl_msg_buffer with the

	 * reported contents of a GET_INFO command (supported

	 * bittimings, tx_fifo depth). This information is used in

	 * Stage 3 for the final driver initialisation.

 Prepare Memory for control transferes */

	/* get protocol version

	 *

	 * note: ucan_ctrl_command_* wrappers cannot be used yet

	 * because `up` is initialised in Stage 3

	/* older firmware version do not support this command - those

	 * are not supported by this drive

 this driver currently supports protocol version 3 only */

	/* request the device information and store it in ctl_msg_buffer

	 *

	 * note: ucan_ctrl_command_* wrappers cannot be used yet

	 * because `up` is initialised in Stage 3

	/* Stage 3 - Driver Initialisation

	 * -------------------------------

	 *

	 * Register device to Linux, prepare private structures and

	 * reset the device.

 allocate driver resources */

 initialize data */

	/* parse device information

	 * the data retrieved in Stage 2 is still available in

	 * up->ctl_msg_buffer

 just print some device information - if available */

 copy string while ensuring zero terminiation */

 device is compatible, reset it */

 register the device */

 initialisation complete, log device info */

 success */

 disconnect the device */

 Mule (soldered onto compute modules) */

 Seal (standalone USB stick) */

 Terminating entry */

 driver callbacks */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * CAN driver for "8 devices" USB2CAN converter

 *

 * Copyright (C) 2012 Bernd Krumboeck (krumboeck@universalnet.at)

 *

 * This driver is inspired by the 3.2.0 version of drivers/net/can/usb/ems_usb.c

 * and drivers/net/can/usb/esd_usb2.c

 *

 * Many thanks to Gerhard Bertelsmann (info@gerhard-bertelsmann.de)

 * for testing and fixing this driver. Also many thanks to "8 devices",

 * who were very cooperative and answered my questions.

 driver constants */

 vendor and product id */

 endpoints */

 device CAN clock */

 setup flags */

 commands */

 command options */

 frames */

 status */

 Normal condition. */

 Overrun occurred when sending */

 Error counter has reached 96 */

 Error count. has reached 128 */

 Device is in BUSOFF */

 Stuff Error */

 Form Error */

 Ack Error */

 Bit1 Error */

 Bit0 Error */

 CRC Error */

 Mask for Receive Error Bit */

 table of devices that work with this driver */

 Terminating entry */

 Structure to hold all of our device specific stuff */

 must be the first member */

 tx frame */

 RTR and EXT_ID flag */

 upper 3 bits not used */

 data length code 0-8 bytes */

 64-bit data */

 rx frame */

 frame type */

 RTR and EXT_ID flag */

 upper 3 bits not used */

 data length code 0-8 bytes */

 64-bit data */

 32-bit timestamp */

 command frame */

 unknown - always 0 */

 command to execute */

 optional parameter / return value */

 optional parameter 2 */

 optional parameter and data */

/* Send command to device and receive result.

 * Command was successful when opt1 = 0.

 Send open command to device */

 BRP */

 flags */

 Send close command to device */

 Get firmware and hardware version */

/* Set network device mode

 *

 * Maybe we should leave this function empty, because the device

 * set mode variable with open command.

 Read error/status frames */

	/* Error message:

	 * byte 0: Status

	 * byte 1: bit   7: Receive Passive

	 * byte 1: bit 0-6: Receive Error Counter

	 * byte 2: Transmit Error Counter

	 * byte 3: Always 0 (maybe reserved for future use)

 Read data and status frames */

/* Callback for reading data from device

 *

 * Check urb status, call read function and resubmit urb read operation.

 success */

/* Callback handler for write operations

 *

 * Free allocated buffers, check transmit status and

 * calculate statistic.

 free up our allocated buffer */

 Release context */

 Send data to device */

 create a URB, and a buffer for it, and copy the data to the URB */

	/* May never happen! When this happens we'd more URBs in flight as

	 * allowed (MAX_TX_URBS).

 Slow down tx path */

	/* Release our reference to this URB, the USB core will eventually free

	 * it entirely.

 Start USB device */

 create a URB, and a buffer for it */

 Drop reference, USB core will take care of freeing it */

 Did we submit any URBs */

 Warn if we've couldn't transmit all the URBs */

 Open USB device */

 common open */

 finally start device */

 Close USB device */

 Send CLOSE command to CAN controller */

 Stop polling */

/* Probe USB device

 *

 * Check device and firmware.

 * Set supported modes and bittiming constants.

 * Allocate some memory.

 product id looks strange, better we also check iProduct string */

 we support local echo */

 Called by the usb core when driver is unloaded or device is removed */

 SPDX-License-Identifier: GPL-2.0-only

/* SocketCAN driver for Microchip CAN BUS Analyzer Tool

 *

 * Copyright (C) 2017 Mobica Limited

 *

 * This driver is inspired by the 4.6.2 version of net/can/usb/usb_8dev.c

 vendor and product id */

 driver constants */

/* RX buffer must be bigger than msg size since at the

 * beginning USB messages are stacked.

 MCBA endpoint numbers */

 Microchip command id */

 Structure to hold all of our device specific stuff */

 must be the first member */

 CAN frame */

 command frame */

 Terminating entry */

 That was the last free ctx. Slow down tx path */

/* mcba_usb_free_ctx and mcba_usb_get_free_ctx are executed by different

 * threads. The order of execution in below function is important.

 Increase number of free ctxs before freeing ctx */

 Wake up the queue once ctx is marked free */

 free up our allocated buffer */

 Release the context */

 Send data to device */

 create a URB, and a buffer for it, and copy the data to the URB */

	/* Release our reference to this URB, the USB core will eventually free

	 * it entirely.

 Send data to device */

		/* SIDH    | SIDL                 | EIDH   | EIDL

		 * 28 - 21 | 20 19 18 x x x 17 16 | 15 - 8 | 7 - 0

 store 28-18 bits */

 store 17-16 bits */

 store 15-0 bits */

		/* SIDH   | SIDL

		 * 10 - 3 | 2 1 0 x x x x x

 Send cmd to device */

		/* SIDH    | SIDL                 | EIDH   | EIDL

		 * 28 - 21 | 20 19 18 x x x 17 16 | 15 - 8 | 7 - 0

 store 28-18 bits */

 store 17-16 bits */

 store 15-0 bits */

		/* SIDH   | SIDL

		 * 10 - 3 | 2 1 0 x x x x x

		/* Side effect of communication between PIC_USB and PIC_CAN.

		 * PIC_CAN is telling us that it has nothing to send

 Transmission response from the device containing timestamp */

/* Callback for reading data from device

 *

 * Check urb status, call read function and resubmit urb read operation.

 success */

 Start USB device */

 create a URB, and a buffer for it */

 Drop reference, USB core will take care of freeing it */

 Did we submit any URBs */

 Warn if we've couldn't transmit all the URBs */

 Open USB device */

 common open */

 Close USB device */

 Stop polling */

/* Set network device mode

 *

 * Maybe we should leave this function empty, because the device

 * set mode variable with open command.

/* Microchip CANBUS has hardcoded bittiming values by default.

 * This function sends request via USB to change the speed and align bittiming

 * values for presentation purposes only

 Init CAN device */

 we support local echo */

 Start USB dev only if we have successfully registered CAN device */

 Called by the usb core when driver is unloaded or device is removed */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * CAN driver for esd CAN-USB/2 and CAN-USB/Micro

 *

 * Copyright (C) 2010-2012 Matthias Fuchs <matthias.fuchs@esd.eu>, esd gmbh

 Define these values to match your devices */

 USB2 commands */

 also used for VERSION_REPLY */

 device to host only */

 also used for TX_DONE */

 also used for SETBAUD_REPLY */

 also used for TS_REPLY */

 also used for IDADD_REPLY */

 esd CAN message flags - dlc field */

 esd CAN message flags - id field */

 esd CAN event ids used by this driver */

 baudrate message flags */

 esd IDADD message */

 SJA1000 ECC register (emulated by usb2 firmware) */

 esd bus state event codes */

 must be power of 2 */

 len is always the total message length in 32bit words */

 upper 3 bits contain flags */

 opaque handle, not used by device */

 upper 3 bits contain flags */

 opaque handle, not used by device */

 Main message type used between library and application */

 CAN payload length */

 must be the first member */

 Error occurred during transmission? */

 Release context */

 success */

/*

 * callback for bulk IN urb

 free up our allocated buffer */

 create a URB, and a buffer for it */

 Drop reference, USB core will take care of freeing it */

 Did we submit any URBs */

 Warn if we've couldn't transmit all the URBs */

/*

 * Start interface

	/*

	 * Enable all IDs

	 * The IDADD message takes up to 64 32 bit bitmasks (2048 bits).

	 * Each bit represents one 11 bit CAN identifier. A set bit

	 * enables reception of the corresponding CAN identifier. A cleared

	 * bit disabled this identifier. An additional bitmask value

	 * following the CAN 2.0A bits is used to enable reception of

	 * extended CAN frames. Only the LSB of this final mask is checked

	 * for the complete 29 bit ID range. The IDADD message also allows

	 * filter configuration for an ID subset. In this case you can add

	 * the number of the starting bitmask (0..64) to the filter.option

	 * field followed by only some bitmasks.

 start with segment 0 */

 enable 29bit extended IDs */

 common open */

 finally start device */

 create a URB, and a buffer for it, and copy the data to the URB */

 minimal length */

	/*

	 * This may never happen.

 hnd must not be 0 - MSB is stripped in txdone handling */

 returned in TX done message */

 Slow down tx path */

	/*

	 * Release our reference to this URB, the USB core will eventually free

	 * it entirely.

 Disable all IDs (see esd_usb2_start()) */

 start with segment 0 */

 set CAN controller to reset mode */

 we support local echo */

/*

 * probe function for new USB2 devices

 *

 * check version information and number of available

 * CAN interfaces

 query number of CAN interfaces (nets) */

 do per device probing */

/*

 * called by the usb core when the device is removed from the system

 usb specific object needed to register this driver with the usb subsystem */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * CAN driver for PEAK System USB adapters

 * Derived from the PCAN project file driver/src/pcan_usb_core.c

 *

 * Copyright (C) 2003-2010 PEAK System-Technik GmbH

 * Copyright (C) 2010-2012 Stephane Grosjean <s.grosjean@peak-system.com>

 *

 * Many thanks to Klaus Hitschler <klaus.hitschler@gmx.de>

 Table of devices that work with this driver */

 Terminating entry */

/*

 * dump memory

/*

 * initialize a time_ref object with usb adapter own settings

/*

 * sometimes, another now may be  more recent than current one...

 should wait at least two passes before computing */

/*

 * register device timestamp as now

 use monotonic clock to correctly compute further deltas */

		/*

		 * delta_us should not be >= 2^32 => delta should be < 4294s

		 * handle 32-bits wrapping here: if count of s. reaches 4200,

		 * reset counters and change time base

/*

 * compute time according to current ts and time_ref data

 protect from getting time before setting now */

		/* General case: dev_ts_1 < dev_ts_2 < ts, with:

		 *

		 * - dev_ts_1 = previous sync timestamp

		 * - dev_ts_2 = last sync timestamp

		 * - ts = event timestamp

		 * - ts_period = known sync period (theoretical)

		 *             ~ dev_ts2 - dev_ts1

		 * *but*:

		 *

		 * - time counters wrap (see adapter->ts_used_bits)

		 * - sometimes, dev_ts_1 < ts < dev_ts2

		 *

		 * "normal" case (sync time counters increase):

		 * must take into account case when ts wraps (tsw)

		 *

		 *      < ts_period > <          >

		 *     |             |            |

		 *  ---+--------+----+-------0-+--+-->

		 *     ts_dev_1 |    ts_dev_2  |

		 *              ts             tsw

 case when event time (tsw) wraps */

		/* Otherwise, sync time counter (ts_dev_2) has wrapped:

		 * handle case when event time (tsn) hasn't.

		 *

		 *      < ts_period > <          >

		 *     |             |            |

		 *  ---+--------+--0-+---------+--+-->

		 *     ts_dev_1 |    ts_dev_2  |

		 *              tsn            ts

 add delay between last sync and event timestamps */

 add time from beginning to last sync */

 convert ticks number into microseconds */

/*

 * post received skb after having set any hw timestamp

 post received skb with native 64-bit hw timestamp */

/*

 * callback for bulk Rx urb

 check reception status */

 success */

 protect from any incoming empty msgs */

 handle these kinds of msgs only if _start callback called */

/*

 * callback for bulk Tx urb

 check tx status */

 transmission complete */

 prevent tx timeout */

 should always release echo skb and corresponding context */

 do wakeup tx queue in case of success only */

/*

 * called by netdev to send one skb on the CAN interface.

 should not occur except during restart */

 Note: this works with CANFD frames too */

 this context is not used in fact */

 cable unplugged */

 slow down tx path */

/*

 * start the CAN interface.

 * Rx and Tx urbs are allocated here. Rx urbs are submitted here.

 create a URB, and a buffer for it, to receive usb messages */

 ask last usb_free_urb() to also kfree() transfer_buffer */

 drop reference, USB core will take care of freeing it */

 did we submit any URBs? Warn if we was not able to submit all urbs */

 pre-alloc tx buffers and corresponding urbs */

 create a URB and a buffer for it, to transmit usb messages */

 ask last usb_free_urb() to also kfree() transfer_buffer */

 warn if we were not able to allocate enough tx contexts */

 can set bus on now */

/*

 * called by netdev to open the corresponding CAN interface.

 common open */

 finally start device */

/*

 * unlink in-flight Rx and Tx urbs and free their memory.

 free all Rx (submitted) urbs */

 free unsubmitted Tx urbs first */

			/*

			 * this urb is already released or always submitted,

			 * let usb core free by itself

 then free all submitted Tx urbs */

/*

 * called by netdev to close the corresponding CAN interface.

 unlink all pending urbs and free used memory */

 can set bus off now */

/*

 * handle end of waiting for the device to reset

 finally MUST update can state */

 netdev queue can be awaken now */

/*

 * device (auto-)restart mechanism runs in a timer context =>

 * MUST handle restart with asynchronous usb transfers

	/*

	 * if device doesn't define any asynchronous restart handler, simply

	 * wake the netdev queue up

 first allocate a urb to handle the asynchronous steps */

 also allocate enough space for the commands to send */

 call the device specific handler for the restart */

/*

 * candev callback used to change CAN mode.

 * Warning: this is called from a timer context!

/*

 * candev callback used to set device nominal/arbitration bitrate.

/*

 * candev callback used to set device data bitrate.

/*

 * create one device which is attached to CAN controller #ctrl_idx of the

 * usb adapter.

 allocate a buffer large enough to send commands */

 we support local echo */

 add ethtool support */

 keep hw revision into the netdevice */

 set bus off */

 get device number early */

/*

 * called by the usb core when the device is unplugged from the system

 unregister as many netdev devices as siblings */

/*

 * probe function for new PEAK-System devices

 get corresponding PCAN-USB adapter */

 got corresponding adapter: check if it handles current interface */

 deregister already created devices */

 usb specific object needed to register this driver with the usb subsystem */

 register this driver with the USB subsystem */

 stop as many netdev devices as siblings */

 last chance do send any synchronous commands here */

 deregister this driver with the USB subsystem */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * CAN driver for PEAK System PCAN-USB adapter

 * Derived from the PCAN project file driver/src/pcan_usb.c

 *

 * Copyright (C) 2003-2010 PEAK System-Technik GmbH

 * Copyright (C) 2011-2012 Stephane Grosjean <s.grosjean@peak-system.com>

 *

 * Many thanks to Klaus Hitschler <klaus.hitschler@gmx.de>

 PCAN-USB Endpoints */

 PCAN-USB command struct */

 PCAN-USB commands */

 PCAN_USB_CMD_SET_BUS number arg */

 PCAN_USB_CMD_xxx functions */

 PCAN-USB command timeout (ms.) */

 PCAN-USB startup timeout (ms.) */

 PCAN-USB rx/tx buffers size */

 Tx msg is a CAN frame */

 PCAN-USB adapter internal clock (MHz) */

 PCAN-USB USB message record status/len field */

 PCAN-USB 4.1 CAN Id tx extended flags */

 SJA1000 SRR command */

 SJA1000 AT command */

 PCAN-USB error flags */

 SJA1000 modes */

/*

 * tick duration = 42.666 us =>

 * (tick_number * 44739243) >> 20 ~ (tick_number * 42666) / 1000

 * accuracy = 10^-7

 PCAN-USB messages record types */

 CAN bus events notifications selection mask */

 ask for rxerr counter */

 ask for txerr counter */

/* This mask generates an usb packet each time the state of the bus changes.

 * In other words, its interest is to know which side among rx and tx is

 * responsible of the change of the bus state.

 identify bus event packets with rx/tx error counters */

 counters are decreasing */

 counters are increasing */

 private to PCAN-USB adapter */

 incoming message context for decoding */

/*

 * send a command

 usb device unregistered? */

/*

 * send a command then wait for its response

 usb device unregistered? */

 first, send command */

 send the cmd to be notified from bus errors */

/*

 * set bittiming value to can

/*

 * init/reset can

 the PCAN-USB needs time to init */

/*

 * handle end of waiting for the device to reset

 notify candev and netdev */

/*

 * handle the submission of the restart urb

 the PCAN-USB needs time to restart */

 can delete usb resources */

/*

 * handle asynchronous restart

 set bus on */

/*

 * read serial number from device

/*

 * read device id from device

/*

 * update current time ref with received timestamp

/*

 * decode received timestamp

 only 1st packet supplies a word timestamp */

 ignore this error until 1st ts received */

 allocate an skb to store the error frame */

 data overrun interrupt */

 handle change of state */

			/* Supply TX/RX error counters in case of

			 * controller error.

/* decode bus event usb packet: first byte contains rxerr while 2nd one contains

 * txerr.

 acccording to the content of the packet */

 save rx/tx error counters from in the device context */

 reserved */

/*

 * decode non-data usb message

 check whether function and number can be read */

		/* Next packet in the buffer will have a timestamp on a single

		 * byte

 analog values (ignored) */

 bus load (ignored) */

 only timestamp */

 bus event notifications (get rxerr/txerr) */

/*

 * decode data usb message

 Only first packet timestamp is a word */

 Next packet in the buffer will have a timestamp on a single byte */

 read data */

 Ignore next byte (client private id) if SRR bit is set */

 convert timestamp into kernel time */

 update statistics */

 push the skb */

/*

 * process incoming message

 handle status and error frames here */

 handle normal can frames here */

/*

 * process any incoming buffer

/*

 * process outgoing packet

 only one CAN frame is stored in the packet */

 status/len byte */

 can id */

 can data */

 SRR bit needs a writer id (useless here) */

 socket callback used to copy berr counters values received through USB */

 must return 0 */

/*

 * start interface

 number of bits used in timestamps read from adapter struct */

	/* always ask the device for BERR reporting, to be able to switch from

	 * WARNING to PASSIVE state

 if revision greater than 3, can put silent mode on/off */

 initialize a timer needed to wait for hardware restart */

	/*

	 * explicit use of dev_xxx() instead of netdev_xxx() here:

	 * information displayed are related to the device itself, not

	 * to the canx netdevice.

	/* Since rev 4.1, PCAN-USB is able to make single-shot as well as

	 * looped back frames.

/*

 * probe function for new PCAN-USB usb interface

 check interface endpoint addresses */

 call ON/OFF twice a second */

 restore LED default */

/*

 * describe the PCAN-USB adapter

 size of device private data */

 timestamps usage */

 us=(ts*scale) */

  >> shift     */

 give here messages in/out endpoints */

 size of rx/tx usb buffers */

 device callbacks */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * CAN driver for PEAK System PCAN-USB Pro adapter

 * Derived from the PCAN project file driver/src/pcan_usbpro.c

 *

 * Copyright (C) 2003-2011 PEAK System-Technik GmbH

 * Copyright (C) 2011-2012 Stephane Grosjean <s.grosjean@peak-system.com>

 PCAN-USB Pro adapter internal clock (MHz) */

 PCAN-USB Pro command timeout (ms.) */

 PCAN-USB Pro rx/tx buffers size */

 some commands responses need to be re-submitted */

 handle device specific info used by the netdevices */

 device information */

 internal structure used to handle messages sent to bulk urb */

 records sizes table indexed on message id. (8-bits value) */

/*

 * initialize PCAN-USB Pro message data structure

/*

 * add one record to a message being built

/*

 * send PCAN-USB Pro command synchronously

 usb device unregistered? */

/*

 * wait for PCAN-USB Pro command response

 usb device unregistered? */

 loop on records stored into message */

 check if response corresponds to request */

 check if channel in response corresponds too */

 got the response */

 otherwise, go on with next record in message */

 usb device unregistered? */

 cache the CCBT value to reuse it before next buson */

 if bus=on, be sure the bitrate being set before! */

 = tseg1 */

 can delete usb resources */

 notify candev and netdev */

/*

 * handle restart but in asynchronously way

 nothing should be sent while in BUS_OFF state */

 no error bit (back to active state) */

 trick to bypass next comparison and process other errors */

 donot post any error if current state didn't change */

 allocate an skb to store the error frame */

 CAN_STATE_MAX (trick to handle other errors) */

 should wait until clock is stabilized */

/*

 * callback for bulk IN urb

 loop reading all the records from the incoming message */

 check if the record goes out of current packet */

 Single-Shot frame */

 filter mode: 0-> All OFF; 1->bypass */

 opening first device: */

 reset time_ref */

 ask device to send ts messages */

/*

 * stop interface

 * (last chance before set bus off)

 turn off ts msgs for that interface if no other dev opened */

/*

 * called when probing to initialize a device object.

 do this for 1st channel only */

 allocate netdevices common structure attached to first one */

 number of ts msgs to ignore before taking one into account */

		/*

		 * explicit use of dev_xxx() instead of netdev_xxx() here:

		 * information displayed are related to the device itself, not

		 * to the canx netdevices.

 tell the device the can driver is running */

 set LED in default state (end of init phase) */

	/*

	 * when rmmod called before unplug and if down, should reset things

	 * before leaving

 set bus off on the corresponding channel */

 if channel #0 (only) */

 turn off calibration message if any device were opened */

 tell the PCAN-USB Pro device the driver is being unloaded */

/*

 * called when PCAN-USB Pro adapter is unplugged

 last device: can free pcan_usb_pro_interface object now */

/*

 * probe function for new PCAN-USB Pro usb interface

 check interface endpoint addresses */

		/*

		 * below is the list of valid ep addresses. Any other ep address

		 * is considered as not-CAN interface address => no dev created

 fast blinking forever */

 restore LED default */

/*

 * describe the PCAN-USB Pro adapter

 size of device private data */

 timestamps usage */

 us = (ts * scale) >> shift */

 give here messages in/out endpoints */

 size of rx/tx usb buffers */

 device callbacks */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * CAN driver for PEAK System PCAN-USB FD / PCAN-USB Pro FD adapter

 *

 * Copyright (C) 2013-2014 Stephane Grosjean <s.grosjean@peak-system.com>

 PCAN-USB Pro FD adapter internal clock (Hz) */

 PCAN-USB Pro FD command timeout (ms.) */

 PCAN-USB Pro FD rx/tx buffers size */

 read some versions info from the hw device */

 sizeof this */

 type of this structure */

 Type of hardware (HW_TYPE_xxx) */

 Bootloader version */

 Hardware version (PCB) */

 Firmware version */

 "device id" per CAN */

 S/N */

 special functions */

 handle device specific info used by the netdevices */

 device information */

 Extended USB commands (non uCAN commands) */

 Clock Modes command */

 LED control command */

 Extended usage of uCAN commands CMD_xxx_xx_OPTION for PCAN-USB Pro FD */

 Extended usage of uCAN messages for PCAN-USB Pro FD */

 Clock mode frequency values */

 return a device USB interface */

 return a device USB commands buffer */

 send PCAN-USB Pro FD commands synchronously */

 usb device unregistered? */

	/* if a packet is not filled completely by commands, the command list

	 * is terminated with an "end of collection" record.

 firmware is not able to re-assemble 512 bytes buffer in full-speed */

 build the commands list in the given buffer, to enter operational mode */

 1st, reset error counters: */

 select both counters */

 and reset their values */

 moves the pointer forward */

 add command to switch from ISO to non-ISO mode, if fw allows it */

		/* to be sure that no other extended bits will be taken into

		 * account

 moves the pointer forward */

 next, go back to operational mode */

 set CAN bus on/off */

 build the cmds list to enter operational mode */

 build cmd to go back to reset mode */

 send the command */

/* set filtering masks:

 *

 *	idx  in range [0..63] selects a row #idx, all rows otherwise

 *	mask in range [0..0xffffffff] defines up to 32 CANIDs in the row(s)

 *

 *	Each bit of this 64 x 32 bits array defines a CANID value:

 *

 *	bit[i,j] = 1 implies that CANID=(i x 32)+j will be received, while

 *	bit[i,j] = 0 implies that CANID=(i x 32)+j will be discarded.

 select all rows when idx is out of range [0..63] */

 select the row (and only the row) otherwise */

 send the command */

/* set/unset options

 *

 *	onoff	set(1)/unset(0) options

 *	mask	each bit defines a kind of options to set/unset

 send the command */

 setup LED control */

 send the command */

 set CAN clock domain */

 send the command */

 set bittiming for CAN and CAN-FD header */

 default */

 send the command */

 set CAN-FD bittiming for data */

 send the command */

/* handle restart but in asynchronously way

 * (uses PCAN-USB Pro code to complete asynchronous request)

	/* build the entire cmds list in the provided buffer, to go back into

	 * operational mode.

 add EOC */

 complete the URB */

 and submit it. */

 CANFD frame case */

 CAN 2.0 frame case */

 handle uCAN status message */

 nothing should be sent while in BUS_OFF state */

 back to (or still in) ERROR_ACTIVE state */

 state hasn't changed */

 handle bus state change */

 allocate an skb to store the error frame */

 things must be done even in case of OOM */

 handle uCAN error message */

 keep a trace of tx and rx error counters for later use */

 handle uCAN overrun message */

 allocate an skb to store the error frame */

 handle USB calibration message */

 should wait until clock is stabilized */

 callback for bulk IN urb */

 loop reading all the records from the incoming message */

 null packet found: end of list */

 check if the record goes out of current packet */

 CAN/CANFD frames encoding callback */

 considering a CANFD frame */

 CAND 2.0 frames */

 Single-Shot frame */

	/* add null size message to tag the end (messages are 32-bits aligned)

 set the whole size of the USB packet to send */

 start the interface (last chance before set bus on) */

 set filter mode: all acceptance */

 opening first device: */

 reset time_ref */

 enable USB calibration messages */

 reset cached error counters */

 socket callback used to copy berr counters values received through USB */

 must return 0 */

 stop interface (last chance before set bus off) */

 turn off special msgs for that interface if no other dev opened */

 called when probing, to initialize a device object */

 do this for 1st channel only */

 allocate netdevices common structure attached to first one */

 allocate command buffer once for all for the interface */

 number of ts msgs to ignore before taking one into account */

		/* explicit use of dev_xxx() instead of netdev_xxx() here:

		 * information displayed are related to the device itself, not

		 * to the canx (channel) device.

 check for ability to switch between ISO/non-ISO modes */

 firmware >= 2.x supports ISO/non-ISO switching */

 firmware < 2.x only supports fixed(!) non-ISO */

 tell the hardware the can driver is running */

 otherwise, simply copy previous sibling's values */

 do a copy of the ctrlmode[_supported] too */

 set clock domain */

 set LED in default state (end of init phase) */

 called when driver module is being unloaded */

	/* when rmmod called before unplug and if down, should reset things

	 * before leaving

 set bus off on the corresponding channel */

 switch off corresponding CAN LEDs */

 if channel #0 (only) */

 turn off calibration message if any device were opened */

 tell USB adapter that the driver is being unloaded */

 called when the USB adapter is unplugged */

 last device: can free shared objects now */

 free commands buffer */

 free usb interface object */

 blink LED's */

 describes the PCAN-USB FD adapter */

 size of device private data */

 timestamps usage */

 us = (ts * scale) >> shift */

 give here messages in/out endpoints */

 size of rx/tx usb buffers */

 device callbacks */

 same as PCAN-USB Pro */

 describes the PCAN-CHIP USB */

 size of device private data */

 timestamps usage */

 us = (ts * scale) >> shift */

 give here messages in/out endpoints */

 size of rx/tx usb buffers */

 device callbacks */

 same as PCAN-USB Pro */

 describes the PCAN-USB Pro FD adapter */

 size of device private data */

 timestamps usage */

 us = (ts * scale) >> shift */

 give here messages in/out endpoints */

 size of rx/tx usb buffers */

 device callbacks */

 same as PCAN-USB Pro */

 describes the PCAN-USB X6 adapter */

 size of device private data */

 timestamps usage */

 us = (ts * scale) >> shift */

 give here messages in/out endpoints */

 size of rx/tx usb buffers */

 device callbacks */

 same as PCAN-USB Pro */

 SPDX-License-Identifier: GPL-2.0

/* Parts of this driver are based on the following:

 *  - Kvaser linux leaf driver (version 4.78)

 *  - CAN driver for esd CAN-USB/2

 *  - Kvaser linux usbcanII driver (version 5.3)

 *  - Kvaser linux mhydra driver (version 5.24)

 *

 * Copyright (C) 2002-2018 KVASER AB, Sweden. All rights reserved.

 * Copyright (C) 2010 Matthias Fuchs <matthias.fuchs@esd.eu>, esd gmbh

 * Copyright (C) 2012 Olivier Sobrie <olivier@sobrie.be>

 * Copyright (C) 2015 Valeo S.A.

 Kvaser USB vendor id. */

 Kvaser Leaf USB devices product ids */

 Kvaser USBCan-II devices product ids */

 Kvaser Minihydra USB devices product ids */

 Leaf USB product IDs */

 USBCANII USB product IDs */

 Minihydra USB product IDs */

 Not used */

/* This method might sleep. Do not call it in the atomic context

 * of URB completions.

 reset tx contexts */

 This should never happen; it implies a flow control bug */

 SPDX-License-Identifier: GPL-2.0

/* Parts of this driver are based on the following:

 *  - Kvaser linux mhydra driver (version 5.24)

 *  - CAN driver for esd CAN-USB/2

 *

 * Copyright (C) 2018 KVASER AB, Sweden. All rights reserved.

 * Copyright (C) 2010 Matthias Fuchs <matthias.fuchs@esd.eu>, esd gmbh

 *

 * Known issues:

 *  - Transition from CAN_STATE_ERROR_WARNING to CAN_STATE_ERROR_ACTIVE is only

 *    reported after a call to do_get_berr_counter(), since firmware does not

 *    distinguish between ERROR_WARNING and ERROR_ACTIVE.

 *  - Hardware timestamps are not set for CAN Tx frames.

 Forward declarations */

 Minihydra command IDs */

 Minihydra extended command IDs */

/* Hydra commands are handled by different threads in firmware.

 * The threads are denoted hydra entity (HE). Each HE got a unique 6-bit

 * address. The address is used in hydra commands to get/set source and

 * destination HE. There are two predefined HE addresses, the remaining

 * addresses are different between devices and firmware versions. Hence, we need

 * to enumerate the addresses (see kvaser_usb_hydra_map_channel()).

 Well-known HE addresses */

 Software detail flags */

 Sub commands for cap_req and cap_res */

 Status codes for cap_res */

 CMD_ERROR_EVENT error codes */

 Chip state status flags. Used for chip_state_event and err_frame_data. */

 Busparam modes */

 Ctrl modes */

 Extended CAN ID flag. Used in rx_can and tx_can */

	/* The destination HE address is stored in 0..5 of he_addr.

	 * The upper part of source HE address is stored in 6..7 of he_addr, and

	 * the lower part is stored in 12..15 of transid.

 CAN frame flags. Used in rx_can, ext_rx_can, tx_can and ext_tx_can */

 CAN frame flags. Used in ext_rx_can and ext_tx_can */

 KCAN packet header macros. Used in ext_rx_can and ext_tx_can */

 struct for extended commands (CMD_EXTENDED) */

/* This function is used for synchronously waiting on hydra control commands.

 * Note: Compared to kvaser_usb_hydra_read_bulk_callback(), we never need to

 *       handle partial hydra commands. Since hydra control commands are always

 *       non-extended commands.

	/* Ignore state change if previous state was STOPPED and the new state

	 * is BUS_OFF. Firmware always report this as BUS_OFF, since firmware

	 * does not distinguish between BUS_OFF and STOPPED.

 info1 will contain the offending cmd_no */

		/* Wrong channel mapping?! This should never happen!

		 * info1 will contain the offending cmd_no

 Ignored commands */

 CAN controller automatically recovers from BUS_OFF */

	/* Make sure we do not report invalid BUS_OFF from CMD_CHIP_STATE_EVENT

	 * see comment in kvaser_usb_hydra_update_state()

/* A single extended hydra command can be transmitted in multiple transfers

 * We have to buffer partial hydra commands, and handle them on next callback.

 Make sure we do not overflow usb_rx_leftover */

 Command still not complete */

 We got first part of a command */

 Make sure we do not overflow usb_rx_leftover */

 SPDX-License-Identifier: GPL-2.0

/* Parts of this driver are based on the following:

 *  - Kvaser linux leaf driver (version 4.78)

 *  - CAN driver for esd CAN-USB/2

 *  - Kvaser linux usbcanII driver (version 5.3)

 *

 * Copyright (C) 2002-2018 KVASER AB, Sweden. All rights reserved.

 * Copyright (C) 2010 Matthias Fuchs <matthias.fuchs@esd.eu>, esd gmbh

 * Copyright (C) 2012 Olivier Sobrie <olivier@sobrie.be>

 * Copyright (C) 2015 Valeo S.A.

 Forward declaration */

 Command header size */

 Kvaser CAN message flags */

 CAN states (M16C CxSTRH register) */

 Leaf/usbcan command ids */

 error factors */

/* Only Leaf-based devices can report M16C error factors,

 * thus define our own error status flags for USBCANII

 bittiming parameters */

 ctrl modes */

 Extended CAN identifier flag */

/* Summary of a kvaser error event, for a unified Leaf/Usbcan error

 * handling. Some discrepancies between the two families exist:

 *

 * - USBCAN firmware does not report M16C "error factors"

 * - USBCAN controllers has difficulties reporting if the raised error

 *   event is for ch0 or ch1. They leave such arbitration to the OS

 *   driver by letting it compare error counters with previous values

 *   and decide the error event's channel. Thus for USBCAN, the channel

 *   field is only advisory.

 GCC */

			/* Handle commands crossing the USB endpoint max packet

			 * size boundary. Check kvaser_usb_read_bulk_callback()

			 * for further details.

	/* On some x86 laptops, plugging a Kvaser device again after

	 * an unplug makes the firmware always ignore the very first

	 * command. For such a case, provide some room for retries

	 * instead of completely exiting the driver.

 Sometimes the state change doesn't come after a bus-off event */

 Guard against spurious error events after a busoff */

	/* Update all of the CAN interface's state and error counters before

	 * trying any memory allocation that can actually fail with -ENOMEM.

	 *

	 * We send a temporary stack-allocated error CAN frame to

	 * can_change_state() for the very same reason.

	 *

	 * TODO: Split can_change_state() responsibility between updating the

	 * CAN interface's state and counters, and the setting up of CAN error

	 * frame ID and data to userspace. Remove stack allocation afterwards.

/* For USBCAN, report error to userspace if the channels's errors counter

 * has changed, or we're the only channel seeing a bus error state.

 Sometimes errors are sent as unsolicited chip state events */

		/* The USBCAN firmware supports up to 2 channels.

		 * Now that ch0 was checked, check if ch1 has any errors.

 GCC */

 Ignored commands */

		/* The Kvaser firmware can only read and write commands that

		 * does not cross the USB's endpoint wMaxPacketSize boundary.

		 * If a follow-up command crosses such boundary, firmware puts

		 * a placeholder zero-length command in its place then aligns

		 * the real command to the next max packet size.

		 *

		 * Handle such cases or we're going to miss a significant

		 * number of events in case of a heavy rx load on the bus.

 use first bulk endpoint for in and out */

 SPDX-License-Identifier: GPL-2.0

/* Driver for ETAS GmbH ES58X USB CAN(-FD) Bus Interfaces.

 *

 * File es581_4.c: Adds support to ETAS ES581.4.

 *

 * Copyright (c) 2019 Robert Bosch Engineering and Business Solutions. All rights reserved.

 * Copyright (c) 2020 ETAS K.K.. All rights reserved.

 * Copyright (c) 2020, 2021 Vincent Mailhol <mailhol.vincent@wanadoo.fr>

/**

 * es581_4_sizeof_rx_tx_msg() - Calculate the actual length of the

 *	structure of a rx or tx message.

 * @msg: message of variable length, must have a dlc field.

 *

 * Even if RTR frames have actually no payload, the ES58X devices

 * still expect it. Must be a macro in order to accept several types

 * (struct es581_4_tx_can_msg and struct es581_4_rx_can_msg) as an

 * input.

 *

 * Return: length of the message.

 Fill message contents. */

 Calculate new sizes. */

 bt->sample_point is in tenth of percent. Convert it to percent. */

/* Nominal bittiming constants for ES581.4 as specified in the

 * microcontroller datasheet: "Stellaris(R) LM3S5B91 Microcontroller"

 * table 17-4 "CAN Protocol Ranges" from Texas Instruments.

	/* Size of internal device TX queue is 330.

	 *

	 * However, we witnessed some ES58X_ERR_PROT_CRC errors from

	 * the device and thus, echo_skb_max was lowered to the

	 * empirical value of 75 which seems stable and then rounded

	 * down to become a power of two.

	 *

	 * Root cause of those ES58X_ERR_PROT_CRC errors is still

	 * unclear.

 echo_skb_max = 64 */

 Empirical value. */

 SPDX-License-Identifier: GPL-2.0

/* Driver for ETAS GmbH ES58X USB CAN(-FD) Bus Interfaces.

 *

 * File es58x_fd.c: Adds support to ETAS ES582.1 and ES584.1 (naming

 * convention: we use the term "ES58X FD" when referring to those two

 * variants together).

 *

 * Copyright (c) 2019 Robert Bosch Engineering and Business Solutions. All rights reserved.

 * Copyright (c) 2020 ETAS K.K.. All rights reserved.

 * Copyright (c) 2020, 2021 Vincent Mailhol <mailhol.vincent@wanadoo.fr>

/**

 * es58x_fd_sizeof_rx_tx_msg() - Calculate the actual length of the

 *	structure of a rx or tx message.

 * @msg: message of variable length, must have a dlc and a len fields.

 *

 * Even if RTR frames have actually no payload, the ES58X devices

 * still expect it. Must be a macro in order to accept several types

 * (struct es58x_fd_tx_can_msg and struct es58x_fd_rx_can_msg) as an

 * input.

 *

 * Return: length of the message.

		/* rx_can_msg_len is the length of the rx_can_msg

		 * buffer. Not to be confused with rx_can_msg->len

		 * which is the length of the CAN payload

		 * rx_can_msg->data.

 Fill message contents. */

 Calculate new sizes */

	/* The actual value set in the hardware registers is one less

	 * than the functional value.

	/* The type (ES58X_FD_CMD_TYPE_CAN or ES58X_FD_CMD_TYPE_CANFD) does

	 * not matter here.

/* Nominal bittiming constants for ES582.1 and ES584.1 as specified in

 * the microcontroller datasheet: "SAM E70/S70/V70/V71 Family" section

 * 49.6.8 "MCAN Nominal Bit Timing and Prescaler Register" from

 * Microchip.

 *

 * The values from the specification are the hardware register

 * values. To convert them to the functional values, all ranges were

 * incremented by 1 (e.g. range [0..n-1] changed to [1..n]).

/* Data bittiming constants for ES582.1 and ES584.1 as specified in

 * the microcontroller datasheet: "SAM E70/S70/V70/V71 Family" section

 * 49.6.4 "MCAN Data Bit Timing and Prescaler Register" from

 * Microchip.

/* Transmission Delay Compensation constants for ES582.1 and ES584.1

 * as specified in the microcontroller datasheet: "SAM E70/S70/V70/V71

 * Family" section 49.6.15 "MCAN Transmitter Delay Compensation

 * Register" from Microchip.

 Manual mode not supported. */

	/* The devices use NXP TJA1044G transievers which guarantee

	 * the timing for data rates up to 5 Mbps. Bitrates up to 8

	 * Mbps work in an optimal environment but are not recommended

	 * for production environment.

 FACE in little endian */

 CAFE in little endian */

	/* Size of internal device TX queue is 500.

	 *

	 * However, when reaching value around 278, the device's busy

	 * LED turns on and thus maximum value of 500 is never reached

	 * in practice. Also, when this value is too high, some error

	 * on the echo_msg were witnessed when the device is

	 * recovering from bus off.

	 *

	 * For above reasons, a value that would prevent the device

	 * from becoming busy was chosen. In practice, BQL would

	 * prevent the value from even getting closer to below

	 * maximum, so no impact on performance was measured.

 echo_skb_max = 256 */

 Empirical value. */

 Not implemented in the device firmware. */

 SPDX-License-Identifier: GPL-2.0

/* Driver for ETAS GmbH ES58X USB CAN(-FD) Bus Interfaces.

 *

 * File es58x_core.c: Core logic to manage the network devices and the

 * USB interface.

 *

 * Copyright (c) 2019 Robert Bosch Engineering and Business Solutions. All rights reserved.

 * Copyright (c) 2020 ETAS K.K.. All rights reserved.

 * Copyright (c) 2020, 2021 Vincent Mailhol <mailhol.vincent@wanadoo.fr>

 ES58X FD has some interface protocols unsupported by this driver. */

 Table of devices which work with this driver. */

 ETAS GmbH ES581.4 USB dual-channel CAN Bus Interface module. */

 ETAS GmbH ES582.1 USB dual-channel CAN FD Bus Interface module. */

 ETAS GmbH ES584.1 USB single-channel CAN FD Bus Interface module. */

 Terminating entry */

/* The last two bytes of an ES58X command is a CRC16. The first two

 * bytes (the start of frame) are skipped and the CRC calculation

 * starts on the third byte.

/**

 * es58x_calculate_crc() - Compute the crc16 of a given URB.

 * @urb_cmd: The URB command for which we want to calculate the CRC.

 * @urb_len: Length of @urb_cmd. Must be at least bigger than 4

 *	(ES58X_CRC_CALC_OFFSET + sizeof(crc))

 *

 * Return: crc16 value.

/**

 * es58x_get_crc() - Get the CRC value of a given URB.

 * @urb_cmd: The URB command for which we want to get the CRC.

 * @urb_len: Length of @urb_cmd. Must be at least bigger than 4

 *	(ES58X_CRC_CALC_OFFSET + sizeof(crc))

 *

 * Return: crc16 value.

/**

 * es58x_set_crc() - Set the CRC value of a given URB.

 * @urb_cmd: The URB command for which we want to get the CRC.

 * @urb_len: Length of @urb_cmd. Must be at least bigger than 4

 *	(ES58X_CRC_CALC_OFFSET + sizeof(crc))

/**

 * es58x_check_crc() - Validate the CRC value of a given URB.

 * @es58x_dev: ES58X device.

 * @urb_cmd: The URB command for which we want to check the CRC.

 * @urb_len: Length of @urb_cmd. Must be at least bigger than 4

 *	(ES58X_CRC_CALC_OFFSET + sizeof(crc))

 *

 * Return: zero on success, -EBADMSG if the CRC check fails.

/**

 * es58x_timestamp_to_ns() - Convert a timestamp value received from a

 *	ES58X device to nanoseconds.

 * @timestamp: Timestamp received from a ES58X device.

 *

 * The timestamp received from ES58X is expressed in multiples of 0.5

 * micro seconds. This function converts it in to nanoseconds.

 *

 * Return: Timestamp value in nanoseconds.

/**

 * es58x_set_skb_timestamp() - Set the hardware timestamp of an skb.

 * @netdev: CAN network device.

 * @skb: socket buffer of a CAN message.

 * @timestamp: Timestamp received from an ES58X device.

 *

 * Used for both received and echo messages.

	/* Ignoring overflow (overflow on 64 bits timestamp with nano

	 * second precision would occur after more than 500 years).

/**

 * es58x_rx_timestamp() - Handle a received timestamp.

 * @es58x_dev: ES58X device.

 * @timestamp: Timestamp received from a ES58X device.

 *

 * Calculate the difference between the ES58X device and the kernel

 * internal clocks. This difference will be later used as an offset to

 * convert the timestamps of RX and echo messages to match the kernel

 * system time (e.g. convert to UNIX time).

/**

 * es58x_set_realtime_diff_ns() - Calculate difference between the

 *	clocks of the ES58X device and the kernel

 * @es58x_dev: ES58X device.

 *

 * Request a timestamp from the ES58X device. Once the answer is

 * received, the timestamp difference will be set by the callback

 * function es58x_rx_timestamp().

 *

 * Return: zero on success, errno when any error occurs.

/**

 * es58x_is_can_state_active() - Is the network device in an active

 *	CAN state?

 * @netdev: CAN network device.

 *

 * The device is considered active if it is able to send or receive

 * CAN frames, that is to say if it is in any of

 * CAN_STATE_ERROR_ACTIVE, CAN_STATE_ERROR_WARNING or

 * CAN_STATE_ERROR_PASSIVE states.

 *

 * Caution: when recovering from a bus-off,

 * net/core/dev.c#can_restart() will call

 * net/core/dev.c#can_flush_echo_skb() without using any kind of

 * locks. For this reason, it is critical to guarantee that no TX or

 * echo operations (i.e. any access to priv->echo_skb[]) can be done

 * while this function is returning false.

 *

 * Return: true if the device is active, else returns false.

/**

 * es58x_is_echo_skb_threshold_reached() - Determine the limit of how

 *	many skb slots can be taken before we should stop the network

 *	queue.

 * @priv: ES58X private parameters related to the network device.

 *

 * We need to save enough free skb slots in order to be able to do

 * bulk send. This function can be used to determine when to wake or

 * stop the network queue in regard to the number of skb slots already

 * taken if the echo FIFO.

 *

 * Return: boolean.

/**

 * es58x_can_free_echo_skb_tail() - Remove the oldest echo skb of the

 *	echo FIFO.

 * @netdev: CAN network device.

 *

 * Naming convention: the tail is the beginning of the FIFO, i.e. the

 * first skb to have entered the FIFO.

/**

 * es58x_can_get_echo_skb_recovery() - Try to re-sync the echo FIFO.

 * @netdev: CAN network device.

 * @rcv_packet_idx: Index

 *

 * This function should not be called under normal circumstances. In

 * the unlikely case that one or several URB packages get dropped by

 * the device, the index will get out of sync. Try to recover by

 * dropping the echo skb packets with older indexes.

 *

 * Return: zero if recovery was successful, -EINVAL otherwise.

/**

 * es58x_can_get_echo_skb() - Get the skb from the echo FIFO and loop

 *	it back locally.

 * @netdev: CAN network device.

 * @rcv_packet_idx: Index of the first packet received from the device.

 * @tstamps: Array of hardware timestamps received from a ES58X device.

 * @pkts: Number of packets (and so, length of @tstamps).

 *

 * Callback function for when we receive a self reception

 * acknowledgment.  Retrieves the skb from the echo FIFO, sets its

 * hardware timestamp (the actual time it was sent) and loops it back

 * locally.

 *

 * The device has to be active (i.e. network interface UP and not in

 * bus off state or restarting).

 *

 * Packet indexes must be consecutive (i.e. index of first packet is

 * @rcv_packet_idx, index of second packet is @rcv_packet_idx + 1 and

 * index of last packet is @rcv_packet_idx + @pkts - 1).

 *

 * Return: zero on success.

		/* stats.tx_dropped will be (or was already)

		 * incremented by

		 * drivers/net/can/net/dev.c:can_flush_echo_skb().

/**

 * es58x_can_reset_echo_fifo() - Reset the echo FIFO.

 * @netdev: CAN network device.

 *

 * The echo_skb array of struct can_priv will be flushed by

 * drivers/net/can/dev.c:can_flush_echo_skb(). This function resets

 * the parameters of the struct es58x_priv of our device and reset the

 * queue (c.f. BQL).

/**

 * es58x_flush_pending_tx_msg() - Reset the buffer for transmission messages.

 * @netdev: CAN network device.

 *

 * es58x_start_xmit() will queue up to tx_bulk_max messages in

 * &tx_urb buffer and do a bulk send of all messages in one single URB

 * (c.f. xmit_more flag). When the device recovers from a bus off

 * state or when the device stops, the tx_urb buffer might still have

 * pending messages in it and thus need to be flushed.

/**

 * es58x_tx_ack_msg() - Handle acknowledgment messages.

 * @netdev: CAN network device.

 * @tx_free_entries: Number of free entries in the device transmit FIFO.

 * @rx_cmd_ret_u32: error code as returned by the ES58X device.

 *

 * ES58X sends an acknowledgment message after a transmission request

 * is done. This is mandatory for the ES581.4 but is optional (and

 * deactivated in this driver) for the ES58X_FD family.

 *

 * Under normal circumstances, this function should never throw an

 * error message.

 *

 * Return: zero on success, errno when any error occurs.

/**

 * es58x_rx_can_msg() - Handle a received a CAN message.

 * @netdev: CAN network device.

 * @timestamp: Hardware time stamp (only relevant in rx branches).

 * @data: CAN payload.

 * @can_id: CAN ID.

 * @es58x_flags: Please refer to enum es58x_flag.

 * @dlc: Data Length Code (raw value).

 *

 * Fill up a CAN skb and post it.

 *

 * This function handles the case where the DLC of a classical CAN

 * frame is greater than CAN_MAX_DLEN (c.f. the len8_dlc field of

 * struct can_frame).

 *

 * Return: zero on success.

/**

 * es58x_rx_err_msg() - Handle a received CAN event or error message.

 * @netdev: CAN network device.

 * @error: Error code.

 * @event: Event code.

 * @timestamp: Timestamp received from a ES58X device.

 *

 * Handle the errors and events received by the ES58X device, create

 * a CAN error skb and post it.

 *

 * In some rare cases the devices might get stuck alternating between

 * CAN_STATE_ERROR_PASSIVE and CAN_STATE_ERROR_WARNING. To prevent

 * this behavior, we force a bus off state if the device goes in

 * CAN_STATE_ERROR_WARNING for ES58X_MAX_CONSECUTIVE_WARN consecutive

 * times with no successful transmission or reception in between.

 *

 * Once the device is in bus off state, the only way to restart it is

 * through the drivers/net/can/dev.c:can_restart() function. The

 * device is technically capable to recover by itself under certain

 * circumstances, however, allowing self recovery would create

 * complex race conditions with drivers/net/can/dev.c:can_restart()

 * and thus was not implemented. To activate automatic restart, please

 * set the restart-ms parameter (e.g. ip link set can0 type can

 * restart-ms 100).

 *

 * If the bus is really instable, this function would try to send a

 * lot of log messages. Those are rate limited (i.e. you will see

 * messages such as "net_ratelimit: XXX callbacks suppressed" in

 * dmesg).

 *

 * Return: zero on success, errno when any error occurs.

 0: No error */

 0: No event */

		/* Either TX or RX error count reached passive state

		 * but we do not know which. Setting both flags by

		 * default.

		/* Either TX or RX error count reached warning state

		 * but we do not know which. Setting both flags by

		 * default.

		/* Lost connection on either CAN high or CAN

		 * low. Setting both flags by default.

	/* driver/net/can/dev.c:can_restart() takes in account error

	 * messages in the RX stats. Doing the same here for

	 * consistency.

/**

 * es58x_cmd_ret_desc() - Convert a command type to a string.

 * @cmd_ret_type: Type of the command which triggered the return code.

 *

 * The final line (return "<unknown>") should not be reached. If this

 * is the case, there is an implementation bug.

 *

 * Return: a readable description of the @cmd_ret_type.

/**

 * es58x_rx_cmd_ret_u8() - Handle the command's return code received

 *	from the ES58X device.

 * @dev: Device, only used for the dev_XXX() print functions.

 * @cmd_ret_type: Type of the command which triggered the return code.

 * @rx_cmd_ret_u8: Command error code as returned by the ES58X device.

 *

 * Handles the 8 bits command return code. Those are specific to the

 * ES581.4 device. The return value will eventually be used by

 * es58x_handle_urb_cmd() function which will take proper actions in

 * case of critical issues such and memory errors or bad CRC values.

 *

 * In contrast with es58x_rx_cmd_ret_u32(), the network device is

 * unknown.

 *

 * Return: zero on success, return errno when any error occurs.

/**

 * es58x_rx_cmd_ret_u32() - Handle the command return code received

 *	from the ES58X device.

 * @netdev: CAN network device.

 * @cmd_ret_type: Type of the command which triggered the return code.

 * @rx_cmd_ret_u32: error code as returned by the ES58X device.

 *

 * Handles the 32 bits command return code. The return value will

 * eventually be used by es58x_handle_urb_cmd() function which will

 * take proper actions in case of critical issues such and memory

 * errors or bad CRC values.

 *

 * Return: zero on success, errno when any error occurs.

/**

 * es58x_increment_rx_errors() - Increment the network devices' error

 *	count.

 * @es58x_dev: ES58X device.

 *

 * If an error occurs on the early stages on receiving an URB command,

 * we might not be able to figure out on which network device the

 * error occurred. In such case, we arbitrarily increment the error

 * count of all the network devices attached to our ES58X device.

/**

 * es58x_handle_urb_cmd() - Handle the URB command

 * @es58x_dev: ES58X device.

 * @urb_cmd: The URB command received from the ES58X device, might not

 *	be aligned.

 *

 * Sends the URB command to the device specific function. Manages the

 * errors thrown back by those functions.

 OK */

	/* Because the urb command could not fully be parsed,

	 * channel_id is not confirmed. Incrementing rx_errors count

	 * of all channels.

/**

 * es58x_check_rx_urb() - Check the length and format of the URB command.

 * @es58x_dev: ES58X device.

 * @urb_cmd: The URB command received from the ES58X device, might not

 *	be aligned.

 * @urb_actual_len: The actual length of the URB command.

 *

 * Check if the first message of the received urb is valid, that is to

 * say that both the header and the length are coherent.

 *

 * Return:

 * the length of the first message of the URB on success.

 *

 * -ENODATA if the URB command is incomplete (in which case, the URB

 * command should be buffered and combined with the next URB to try to

 * reconstitute the URB command).

 *

 * -EOVERFLOW if the length is bigger than the maximum expected one.

 *

 * -EBADRQC if the start of frame does not match the expected value.

/**

 * es58x_copy_to_cmd_buf() - Copy an array to the URB command buffer.

 * @es58x_dev: ES58X device.

 * @raw_cmd: the buffer we want to copy.

 * @raw_cmd_len: length of @raw_cmd.

 *

 * Concatenates @raw_cmd_len bytes of @raw_cmd to the end of the URB

 * command buffer.

 *

 * Return: zero on success, -EMSGSIZE if not enough space is available

 * to do the copy.

/**

 * es58x_split_urb_try_recovery() - Try to recover bad URB sequences.

 * @es58x_dev: ES58X device.

 * @raw_cmd: pointer to the buffer we want to copy.

 * @raw_cmd_len: length of @raw_cmd.

 *

 * Under some rare conditions, we might get incorrect URBs from the

 * device. From our observations, one of the valid URB gets replaced

 * by one from the past. The full root cause is not identified.

 *

 * This function looks for the next start of frame in the urb buffer

 * in order to try to recover.

 *

 * Such behavior was not observed on the devices of the ES58X FD

 * family and only seems to impact the ES581.4.

 *

 * Return: the number of bytes dropped on success, -EBADMSG if recovery failed.

/**

 * es58x_handle_incomplete_cmd() - Reconstitute an URB command from

 *	different URB pieces.

 * @es58x_dev: ES58X device.

 * @urb: last urb buffer received.

 *

 * The device might split the URB commands in an arbitrary amount of

 * pieces. This function concatenates those in an URB buffer until a

 * full URB command is reconstituted and consume it.

 *

 * Return:

 * number of bytes consumed from @urb if successful.

 *

 * -ENODATA if the URB command is still incomplete.

 *

 * -EBADMSG if the URB command is incorrect.

 consumed length */

/**

 * es58x_split_urb() - Cut the received URB in individual URB commands.

 * @es58x_dev: ES58X device.

 * @urb: last urb buffer received.

 *

 * The device might send urb in bulk format (i.e. several URB commands

 * concatenated together). This function will split all the commands

 * contained in the urb.

 *

 * Return:

 * number of bytes consumed from @urb if successful.

 *

 * -ENODATA if the URB command is incomplete.

 *

 * -EBADMSG if the URB command is incorrect.

/**

 * es58x_read_bulk_callback() - Callback for reading data from device.

 * @urb: last urb buffer received.

 *

 * This function gets eventually called each time an URB is received

 * from the ES58X device.

 *

 * Checks urb status, calls read function and resubmits urb read

 * operation.

 success */

		/* Because the urb command could not be parsed,

		 * channel_id is not confirmed. Incrementing rx_errors

		 * count of all channels.

/**

 * es58x_write_bulk_callback() - Callback after writing data to the device.

 * @urb: urb buffer which was previously submitted.

 *

 * This function gets eventually called each time an URB was sent to

 * the ES58X device.

 *

 * Puts the @urb back to the urbs idle anchor and tries to restart the

 * network queue.

 success */

/**

 * es58x_alloc_urb() - Allocate memory for an URB and its transfer

 *	buffer.

 * @es58x_dev: ES58X device.

 * @urb: URB to be allocated.

 * @buf: used to return DMA address of buffer.

 * @buf_len: requested buffer size.

 * @mem_flags: affect whether allocation may block.

 *

 * Allocates an URB and its @transfer_buffer and set its @transfer_dma

 * address.

 *

 * This function is used at start-up to allocate all RX URBs at once

 * and during run time for TX URBs.

 *

 * Return: zero on success, -ENOMEM if no memory is available.

/**

 * es58x_get_tx_urb() - Get an URB for transmission.

 * @es58x_dev: ES58X device.

 *

 * Gets an URB from the idle urbs anchor or allocate a new one if the

 * anchor is empty.

 *

 * If there are more than ES58X_TX_URBS_MAX in the idle anchor, do

 * some garbage collection. The garbage collection is done here

 * instead of within es58x_write_bulk_callback() because

 * usb_free_coherent() should not be used in IRQ context:

 * c.f. WARN_ON(irqs_disabled()) in dma_free_attrs().

 *

 * Return: a pointer to an URB on success, NULL if no memory is

 * available.

 Garbage collector */

/**

 * es58x_submit_urb() - Send data to the device.

 * @es58x_dev: ES58X device.

 * @urb: URB to be sent.

 * @netdev: CAN network device.

 *

 * Return: zero on success, errno when any error occurs.

/**

 * es58x_send_msg() - Prepare an URB and submit it.

 * @es58x_dev: ES58X device.

 * @cmd_type: Command type.

 * @cmd_id: Command ID.

 * @msg: ES58X message to be sent.

 * @msg_len: Length of @msg.

 * @channel_idx: Index of the network device.

 *

 * Creates an URB command from a given message, sets the header and the

 * CRC and then submits it.

 *

 * Return: zero on success, errno when any error occurs.

 Default to first channel */

/**

 * es58x_alloc_rx_urbs() - Allocate RX URBs.

 * @es58x_dev: ES58X device.

 *

 * Allocate URBs for reception and anchor them.

 *

 * Return: zero on success, errno when any error occurs.

/**

 * es58x_free_urbs() - Free all the TX and RX URBs.

 * @es58x_dev: ES58X device.

/**

 * es58x_open() - Enable the network device.

 * @netdev: CAN network device.

 *

 * Called when the network transitions to the up state. Allocate the

 * URB resources if needed and open the channel.

 *

 * Return: zero on success, errno when any error occurs.

/**

 * es58x_stop() - Disable the network device.

 * @netdev: CAN network device.

 *

 * Called when the network transitions to the down state. If all the

 * channels of the device are closed, free the URB resources which are

 * not needed anymore.

 *

 * Return: zero on success, errno when any error occurs.

/**

 * es58x_xmit_commit() - Send the bulk urb.

 * @netdev: CAN network device.

 *

 * Do the bulk send. This function should be called only once by bulk

 * transmission.

 *

 * Return: zero on success, errno when any error occurs.

/**

 * es58x_xmit_more() - Can we put more packets?

 * @priv: ES58X private parameters related to the network device.

 *

 * Return: true if we can put more, false if it is time to send.

/**

 * es58x_start_xmit() - Transmit an skb.

 * @skb: socket buffer of a CAN message.

 * @netdev: CAN network device.

 *

 * Called when a packet needs to be transmitted.

 *

 * This function relies on Byte Queue Limits (BQL). The main benefit

 * is to increase the throughput by allowing bulk transfers

 * (c.f. xmit_more flag).

 *

 * Queues up to tx_bulk_max messages in &tx_urb buffer and does

 * a bulk send of all messages in one single URB.

 *

 * Return: NETDEV_TX_OK regardless of if we could transmit the @skb or

 *	had to drop it.

 Can not do bulk send with mixed CAN and CAN FD frames. */

/**

 * es58x_set_mode() - Change network device mode.

 * @netdev: CAN network device.

 * @mode: either %CAN_MODE_START, %CAN_MODE_STOP or %CAN_MODE_SLEEP

 *

 * Currently, this function is only used to stop and restart the

 * channel during a bus off event (c.f. es58x_rx_err_msg() and

 * drivers/net/can/dev.c:can_restart() which are the two only

 * callers).

 *

 * Return: zero on success, errno when any error occurs.

/**

 * es58x_init_priv() - Initialize private parameters.

 * @es58x_dev: ES58X device.

 * @priv: ES58X private parameters related to the network device.

 * @channel_idx: Index of the network device.

/**

 * es58x_init_netdev() - Initialize the network device.

 * @es58x_dev: ES58X device.

 * @channel_idx: Index of the network device.

 *

 * Return: zero on success, errno when any error occurs.

 We support local echo */

/**

 * es58x_free_netdevs() - Release all network resources of the device.

 * @es58x_dev: ES58X device.

/**

 * es58x_get_product_info() - Get the product information and print them.

 * @es58x_dev: ES58X device.

 *

 * Do a synchronous call to get the product information.

 *

 * Return: zero on success, errno when any error occurs.

	/* Empirical tests show a prod_info length of maximum 83,

	 * below should be more than enough.

/**

 * es58x_init_es58x_dev() - Initialize the ES58X device.

 * @intf: USB interface.

 * @driver_info: Quirks of the device.

 *

 * Return: pointer to an ES58X device on success, error pointer when

 *	any error occurs.

/**

 * es58x_probe() - Initialize the USB device.

 * @intf: USB interface.

 * @id: USB device ID.

 *

 * Return: zero on success, -ENODEV if the interface is not supported

 * or errno when any other error occurs.

/**

 * es58x_disconnect() - Disconnect the USB device.

 * @intf: USB interface

 *

 * Called by the usb core when driver is unloaded or device is

 * removed.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005 Sascha Hauer, Pengutronix

 * Copyright (C) 2007 Wolfgang Grandegger <wg@grandegger.com>

 The CAN clock frequency is half the oscillator clock frequency */

 8 bit is default */

 default */

 default */

 default */

 default */

 default */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2007, 2011 Wolfgang Grandegger <wg@grandegger.com>

 * Copyright (C) 2012 Stephane Grosjean <s.grosjean@peak-system.com>

 *

 * Derived from the PCAN project file driver/src/pcan_pci.c:

 *

 * Copyright (C) 2001-2006  PEAK System-Technik GmbH

 FPGA cards FW version registers */

 Common for all channels */

 Chain of network devices */

 Interrupt mask for fast ack */

 only for PCIeC LEDs */

 Important PITA registers */

 Interrupt control register */

 GPIO interface control register */

 Miscellaneous register */

 Size of the config PCI bar */

 Size used by the channel */

 The PCI device and vendor IDs */

 for PCI/PCIe slot cards */

 for ExpressCard slot cards */

 for nextgen PCIe slot cards */

 for nextgen cPCI slot cards */

 for nextgen miniPCI slot cards */

 PCAN-PC/104+ cards */

 PCAN-PCI/104 Express cards */

 The miniPCIe slot cards */

 PCAN-PCI Express OEM */

 PCAN-PCI Express 34 (one channel) */

 sentinel */ }

 PCAN-ExpressCard needs I2C bit-banging configuration option. */

 GPIOICR byte access offsets */

 GPx output value */

 GPx input value */

 configure GPx as output pin */

 I2C GP bits */

 Serial Clock Line */

 Serial DAta line */

 PCA9553 LS0 fields values */

 LEDs control */

 initial value (!= from 0x00) */

 Common for all channels */

 first channel base address */

 leds state cache */

 PCIExpressCard i2c data */

 led delayed work */

 "normal" pci register write callback is overloaded for leds control */

 raise SCL & SDA GPIOs to high-Z */

 set output sda always to 0 */

 control output sda with GPOEN */

 set output scl always to 0 */

 control output scl with GPOEN */

 set tristate */

 set tristate */

 write commands to the LED chip though the I2C-bus of the PCAN-PCIeC */

 cache led mask */

 delayed work callback used to control the LEDs */

 first check what is to do */

 default is: not configured */

 no activity (but configured) */

 if bytes counters changed, set fast blinking led */

 check if LS0 settings changed, only update i2c if so */

 restart timer (except if no more configured channels) */

 set LEDs blinking state */

 first check what is to do */

 check if LS0 settings changed, only update i2c if so */

 start one second delayed work to control LEDs */

 stop LEDs delayed work */

 initialize the PCA9553 4-bit I2C-bus LED chip */

 prescaler for frequency 0: "SLOW" = 1 Hz = "44" */

 duty cycle 0: 50% */

 prescaler for frequency 1: "FAST" = 5 Hz */

 duty cycle 1: 50% */

 switch LEDs to initial state */

 restore LEDs state to off peak_pciec_leds_exit */

 switch LEDs to off */

/* normal write sja1000 register method overloaded to catch when controller

 * is started or stopped, to control leds

 sja1000 register changes control the leds state */

 Reset Mode: set led on */

 Normal Mode: led slow blinking and start led timer */

 call base function */

 copy i2c object address from 1st channel */

 channel is the first one: do the init part */

 create the bit banging I2C adapter structure */

 PCAN-ExpressCard needs its own callback for leds */

 CONFIG_CAN_PEAK_PCIEC */

 Placebo functions when PCAN-ExpressCard support is not selected */

 CONFIG_CAN_PEAK_PCIEC */

 Select and clear in PITA stored interrupt */

 Set GPIO control register */

 Enable all channels of this card */

 Toggle reset */

 Leave parport mux mode */

 FPGA equipped card if not 0 */

 FPGA card: display version of the running firmware */

 Display commercial name (and, eventually, FW version) of the card */

 Neither a slave nor a single device distributes the clock */

 Setup interrupt handling */

 Create chain of SJA1000 devices */

		/* PCAN-ExpressCard needs some additional i2c init.

		 * This must be done *before* register_sja1000dev() but

		 * *after* devices linkage

 Enable interrupts */

 Disable interrupts */

 free any PCIeC resources too */

	/* pci_xxx_config_word() return positive PCIBIOS_xxx error codes while

	 * the probe() function must return a negative errno in case of failure

	 * (err is unchanged if negative)

 Last device */

 Disable interrupts */

 Loop over all registered devices */

 do that only for first channel */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2008 Per Dalen <per.dalen@cnw.se>

 *

 * Parts of this software are based on (derived) the following:

 *

 * - Kvaser linux driver, version 4.72 BETA

 *   Copyright (C) 2002-2007 KVASER AB

 *

 * - Lincan driver, version 0.3.3, OCERA project

 *   Copyright (C) 2004 Pavel Pisa

 *   Copyright (C) 2001 Arnaud Westenberg

 *

 * - Socketcan SJA1000 drivers

 *   Copyright (C) 2007 Wolfgang Grandegger <wg@grandegger.com>

 *   Copyright (c) 2002-2007 Volkswagen Group Electronic Research

 *   Copyright (c) 2003 Matthias Brukner, Trajet Gmbh, Rebenring 33,

 *   38106 Braunschweig, GERMANY

 max no of channels on a single card */

/*

 * The board configuration is probably following:

 * RX1 is connected to ground.

 * TX1 is not connected.

 * CLKO is not connected.

 * Setting the OCR register to 0xDA is a good idea.

 * This means  normal output mode , push-pull and the correct polarity.

/*

 * In the CDR register, you should set CBP to 1.

 * You will probably also want to set the clock divider value to 0

 * (meaning divide-by-2), the Pelican bit, and the clock-off bit

 * (you will have no need for CLKOUT anyway).

/*

 * These register values are valid for revision 14 of the Xilinx logic.

#define XILINX_VERINT             7   /* Lower nibble simulate interrupts,

/*

 * Important S5920 registers

 size of the config io-memory */

 size of a channel io-memory */

 size of a xilinx io-memory */

 the PCI device and vendor IDs */

 the PCI device and vendor IDs */

 Disable interrupts from card */

 Enable interrupts from card */

 reset chip */

 check reset bit */

 Disable PCI interrupts */

 S5920 */

 XILINX board wide address */

		/* Assert PTADR# - we're in passive mode so the other bits are

 Enable interrupts from card */

 Register SJA1000 device */

 S5920 */

 XILINX board wide address */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2010-2012 Stephane Grosjean <s.grosjean@peak-system.com>

 *

 * CAN driver for PEAK-System PCAN-PC Card

 * Derived from the PCAN project file driver/src/pcan_pccard.c

 * Copyright (C) 2006-2010 PEAK System-Technik GmbH

 PEAK-System PCMCIA driver name */

 common area registers */

 CCR bits */

 led selection bits */

 led state value */

 CSR bits */

 time waiting for SPI busy (prevent from infinite loop) */

 max count of reading the SPI status register waiting for a change */

 (prevent from infinite loop) */

 max nb of int handled by that isr in one shot (prevent from infinite loop) */

 EEPROM chip instruction set */

 note: EEPROM Read/Write instructions include A8 bit */

 EEPROM Write Disable */

 EEPROM Read Status Register */

 EEPROM Write Enable */

 EEPROM Status Register bits */

 EEPROM SR Write Enable bit */

 EEPROM SR Write In Progress bit */

/*

 * The board configuration is probably following:

 * RX1 is connected to ground.

 * TX1 is not connected.

 * CLKO is not connected.

 * Setting the OCR register to 0xDA is a good idea.

 * This means normal output mode, push-pull and the correct polarity.

/*

 * In the CDR register, you should set CBP to 1.

 * You will probably also want to set the clock divider value to 7

 * (meaning direct oscillator output) because the second SJA1000 chip

 * is driven by the first one CLKOUT output.

 PCAN-PC Card private structure */

/*

 * start timer which controls leds state

/*

 * stop the timer which controls leds state

/*

 * read a sja1000 register

/*

 * write a sja1000 register

 sja1000 register changes control the leds state */

 Reset Mode: set led on */

 Normal Mode: led slow blinking and start led timer */

/*

 * read a register from the common area

/*

 * write a register into the common area

 cache ccr value */

/*

 * check whether the card is present by checking its fw version numbers

 * against values read at probing time.

/*

 * wait for SPI engine while it is busy

 be sure to read status at least once after sleeping */

/*

 * write data in device eeprom

 write instruction enabling write */

 wait until write enabled */

 write instruction reading the status register */

 get status register value and check write enable bit */

 set address and data */

	/*

	 * write instruction with bit[3] set according to address value:

	 * if addr refers to upper half of the memory array: bit[3] = 1

 wait while write in progress */

 write instruction reading the status register */

 get status register value and check write in progress bit */

 write instruction disabling write */

 clear corresponding led bits in ccr */

 then set new bits */

 real write only if something has changed in ccr */

/*

 * enable/disable CAN connectors power

/*

 * set leds state according to channel activity

 default is: not configured */

 no activity (but configured) */

 if bytes counters changed, set fast blinking led */

 write the new leds state */

 restart timer (except if no more configured channels) */

/*

 * interrupt service routine

 prevent from infinite loop */

 handle shared interrupt and next loop */

 check interrupt for each channel */

			/*

			 * check whether the card is present before calling

			 * sja1000_interrupt() to speed up hotplug detection

 card unplugged during isr */

			/*

			 * should check whether all or SJA1000_MAX_IRQ

			 * interrupts have been handled: loop again to be sure.

/*

 * free all resources used by the channels and switch off leds and can power

 do it only if device not removed */

/*

 * check if a CAN controller is present at the specified location

 make sure SJA1000 is in reset mode */

 read reset-values */

 init common registers (reset channels and leds off) */

 wait 2ms before unresetting channels */

 create one network device per channel detected */

 update linkages */

 check if channel is present */

 Neither a slave device distributes the clock */

 register SJA1000 device */

 set corresponding led on in the new ccr */

 write new ccr (change leds state) */

 only */

 This reserves IO space but doesn't actually enable it */

/*

 * free all resources used by the device

/*

 * setup PCMCIA socket and probe for PEAK-System PC-CARD

 sja1000 api uses iomem */

 display board name and firmware version */

 detect available channels */

 init the timer which controls the leds */

 request the given irq */

 power on the connectors */

 unregister can devices from network */

/*

 * release claimed resources

 SPDX-License-Identifier: GPL-2.0

/* Fintek F81601 PCIE to 2 CAN controller driver

 *

 * Copyright (C) 2019 Peter Hong <peter_hong@fintek.com.tw>

 * Copyright (C) 2019 Linux Foundation

 use this spin lock only for write access */

 sentinel */ },

/* Probe F81601 based device for the SJA1000 chips and register each

 * available CAN channel to SJA1000 Socket-CAN subsystem.

 read CAN2_HW_EN strap pin to detect how many CANBUS do we have */

 Register SJA1000 device */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2009 Wolfgang Grandegger <wg@grandegger.com>

 16 MHz */

 lock for indirect access mode */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * tscan1.c: driver for Technologic Systems TS-CAN1 PC104 boards

 *

 * Copyright 2010 Andre B. Oliveira

/*

 * References:

 * - Getting started with TS-CAN1, Technologic Systems, Jun 2009

 *	http://www.embeddedarm.com/documentation/ts-can1-manual.pdf

 Maximum number of boards (one in each JP1:JP2 setting of IO address) */

 PLD registers address offsets */

 PLD board identifier registers magic values */

 PLD mode register SJA1000 IO enable bit */

 PLD jumpers register bits */

 PLD IO base addresses start */

 PLD register space size */

 SJA1000 register space size */

 SJA1000 crystal frequency (16MHz) */

 SJA1000 IO base addresses */

 Read SJA1000 register */

 Write SJA1000 register */

 Probe for a TS-CAN1 board with JP2:JP1 jumper setting ID */

 Select the first SJA1000 IO address that is free and that works */

 Set SJA1000 IO base address and enable it */

 SJA1000 probe succeeded; turn LED off and return */

 SJA1000 probe failed; release and try next address */

unused*/)

 disable SJA1000 IO space */

/*

 * sja1000.c -  Philips SJA1000 network device driver

 *

 * Copyright (c) 2003 Matthias Brukner, Trajet Gmbh, Rebenring 33,

 * 38106 Braunschweig, GERMANY

 *

 * Copyright (c) 2002-2007 Volkswagen Group Electronic Research

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 * 1. Redistributions of source code must retain the above copyright

 *    notice, this list of conditions and the following disclaimer.

 * 2. Redistributions in binary form must reproduce the above copyright

 *    notice, this list of conditions and the following disclaimer in the

 *    documentation and/or other materials provided with the distribution.

 * 3. Neither the name of Volkswagen nor the names of its contributors

 *    may be used to endorse or promote products derived from this software

 *    without specific prior written permission.

 *

 * Alternatively, provided that this notice is retained in full, this

 * software may be distributed under the terms of the GNU General

 * Public License ("GPL") version 2, in which case the provisions of the

 * GPL apply INSTEAD OF those given above.

 *

 * The provided data structures and external interfaces from this code

 * are not restricted to be used by modules with a GPL compatible license.

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS

 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT

 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR

 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT

 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,

 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT

 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,

 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY

 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE

 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH

 * DAMAGE.

 *

	/*

	 * The command register needs some locking and time to settle

	 * the write_reg() operation - especially on SMP systems.

 disable interrupts */

 check reset bit */

 reset chip */

 check reset bit */

 enable interrupts */

 set chip to normal mode */

/*

 * initialize SJA1000 chip:

 *   - reset chip

 *   - set output mode

 *   - set baudrate

 *   - enable interrupts

 *   - start operating mode

 set clock divider and output control register */

 set acceptance filter (accept all) */

 leave reset mode */

 Initialize chip if uninitialized at this stage */

 Clear error counters and error code capture */

 clear interrupt flags */

 leave reset mode */

/*

 * transmit a CAN message

 * message layout in the sk_buff should be like this:

 * xx xx xx xx	 ff	 ll   00 11 22 33 44 55 66 77

 * [  can-id ] [flags] [len] [can data (up to 8 bytes]

 create zero'ed CAN frame buffer */

 extended frame format (EFF) */

 standard frame format (SFF) */

 release receive buffer */

 data overrun interrupt */

 clear bit */

 error warning interrupt */

 bus error interrupt */

 set error type */

 set error location */

 Error occurred during transmission? */

 error passive interrupt */

 arbitration lost interrupt */

 Shared interrupts and IRQ off? */

 check for absent controller due to hw unplug */

 transmission buffer released */

 transmission complete */

 receive interrupt */

 check for absent controller */

 error interrupt */

 set chip into reset mode */

 common open */

 register interrupt handler, if not done by the device driver */

 init and start chi */

 we support local echo */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2007 Wolfgang Grandegger <wg@grandegger.com>

 * Copyright (C) 2008 Markus Plessing <plessing@ems-wuensche.com>

 * Copyright (C) 2008 Sebastian Haas <haas@ems-wuensche.com>

/*

 * Register definitions and descriptions are from LinCAN 0.3.3.

 *

 * PSB4610 PITA-2 bridge control registers

 Interrupt Control Register */

 [RC] INT0 Active/Clear */

 [RW] Enable INT0 */

 Miscellaneous Register */

 Multiplexed parallel interface */

/*

 * Register definitions for the PLX 9030

 Interrupt Control/Status register */

 LINTi1 Enable */

 PCI Interrupt Enable */

 Local Edge Triggerable Interrupt Clear */

/*

 * The board configuration is probably following:

 * RX1 is connected to ground.

 * TX1 is not connected.

 * CLKO is not connected.

 * Setting the OCR register to 0xDA is a good idea.

 * This means normal output mode, push-pull and the correct polarity.

/*

 * In the CDR register, you should set CBP to 1.

 * You will probably also want to set the clock divider value to 7

 * (meaning direct oscillator output) because the second SJA1000 chip

 * is driven by the first one CLKOUT output.

 size of PITA control area */

 size of PLX control area */

 offset where the controllers starts */

 memory size for each controller */

 size of controller area */

 CPC-PCI v1 */

 CPC-PCI v2 */

 CPC-104P v2 */

/*

 * Helper to read internal registers from card logic (not CAN)

 reset int flag of pita */

/*

 * Check if a CAN controller is present at the specified location

 * by trying to set 'em into the PeliCAN mode

 Make sure SJA1000 is in reset mode */

 read reset-values */

 Request board reset */

/*

 * Probe PCI device for EMS CAN signature and register each available

 * CAN channel to SJA1000 Socket-CAN subsystem.

 Enabling PCI device */

 Allocating card structures to hold addresses, ... */

 CPC-PCI v2 */

 CPC-PCI v1 */

 Remap configuration space and controller memory area */

 Configure PITA-2 parallel interface (enable MUX) */

 Check for unique EMS CAN signature */

 Detect available channels */

 Check if channel is present */

 reset int flag of pita */

 enable IRQ in PLX 9030 */

 Register SJA1000 device */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2008 Sebastian Haas (initial chardev implementation)

 * Copyright (C) 2010 Markus Plessing <plessing@ems-wuensche.com>

 * Rework for mainline by Oliver Hartkopp <socketcan@hartkopp.net>

/*

 * The board configuration is probably following:

 * RX1 is connected to ground.

 * TX1 is not connected.

 * CLKO is not connected.

 * Setting the OCR register to 0xDA is a good idea.

 * This means  normal output mode , push-pull and the correct polarity.

/*

 * In the CDR register, you should set CBP to 1.

 * You will probably also want to set the clock divider value to 7

 * (meaning direct oscillator output) because the second SJA1000 chip

 * is driven by the first one CLKOUT output.

 Size of the remapped io-memory */

 Offset where controllers starts */

 Memory size for each controller */

 Perform a reset of the card */

 Map CAN controllers into card' memory */

 Unmap CAN controllers from card' memory */

 Card not present */

 Check interrupt for each channel */

 At least one channel handled the interrupt */

/*

 * Check if a CAN controller is present at the specified location

 * by trying to set 'em into the PeliCAN mode

 Make sure SJA1000 is in reset mode */

 read reset-values */

/*

 * Probe PCI device for EMS CAN signature and register each available

 * CAN channel to SJA1000 Socket-CAN subsystem.

 Allocating card structures to hold addresses, ... */

 Check for unique EMS CAN signature */

 Request board reset */

 Make sure CAN controllers are mapped into card's memory space */

 Detect available channels */

 Check if channel is present */

 Register SJA1000 device */

/*

 * Setup PCMCIA socket and probe for EMS CPC-CARD

 General socket configuration */

 The io structure describes IO port mapping */

 Allocate a memory window */

/*

 * Release claimed resources

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2008-2010 Pavel Cheblakov <P.B.Cheblakov@inp.nsk.su>

 *

 * Derived from the ems_pci.c driver:

 *	Copyright (C) 2007 Wolfgang Grandegger <wg@grandegger.com>

 *	Copyright (C) 2008 Markus Plessing <plessing@ems-wuensche.com>

 *	Copyright (C) 2008 Sebastian Haas <haas@ems-wuensche.com>

 detected channels count */

 Pointer to device-dependent reset function */

 PLX9030/9050/9052 registers */

 Interrupt Control/Status */

#define PLX_CNTRL	0x50		/* User I/O, Direct Slave Response,

					 * Serial EEPROM, and Initialization

					 * Control register

 Local interrupt 1 enable */

 Local interrupt 1 polarity */

 Local interrupt 2 enable */

 Local interrupt 2 polarity */

 PCI Interrupt Enable */

 PCI Adapter Software Reset */

 PLX9056 registers */

 Interrupt Control/Status */

 Control / Software Reset */

 Read Configuration Registers */

/*

 * The board configuration is probably following:

 * RX1 is connected to ground.

 * TX1 is not connected.

 * CLKO is not connected.

 * Setting the OCR register to 0xDA is a good idea.

 * This means normal output mode, push-pull and the correct polarity.

 OCR setting for ASEM Dual CAN raw */

/*

 * In the CDR register, you should set CBP to 1.

 * You will probably also want to set the clock divider value to 7

 * (meaning direct oscillator output) because the second SJA1000 chip

 * is driven by the first one CLKOUT output.

 SJA1000 Control Register in the BasicCAN Mode */

 States of some SJA1000 registers after hardware reset in the BasicCAN mode*/

 States of some SJA1000 registers after hardware reset in the PeliCAN mode*/

 0x00 - auto, e.g. length of entire bar */

 output control register */

 clock divider register */

 Parameters for mapping local configuration space */

 Parameters for mapping the SJA1000 chips */

 Pointer to device-dependent reset function */

 based on PLX9052 */

 based on PLX9052 */

 based on PLX9030/9050 */

 based on PLX9056 */

 based on PEX8311 */

 based on PLX9050 */

 based on PLX9052 */

 based on PEX8311 */

 based on PLX9030 */

 based on PLX9030 */

 based on PLX9030 */

 based on PLX9052 */

 based on PLX9030 */

 Adlink PCI-7841/cPCI-7841 */

 Adlink PCI-7841/cPCI-7841 SE */

 esd CAN-PCI/200 */

 esd CAN-CPCI/200 */

 esd CAN-PCI104/200 */

 esd CAN-PCI/266 */

 esd CAN-PMC/266 */

 esd CAN-PCIE/2000 */

 IXXAT PC-I 04/PCI card */

 Marathon CAN-bus-PCI card */

 Marathon CAN-bus-PCIe card */

 TEWS TECHNOLOGIES TPMC810 card */

 Connect Tech Inc. CANpro/104-Plus Opto (CRG001) card */

 Elcus CAN-200-PCI */

 moxa */

 ASEM Dual CAN raw */

 ASEM Dual CAN raw -new model */

/*

 * Check if a CAN controller is present at the specified location

 * by trying to switch 'em from the Basic mode into the PeliCAN mode.

 * Also check states of some registers in reset mode.

	/*

	 * Check registers after hardware reset (the Basic mode)

	 * See states on p. 10 of the Datasheet.

 Bring the SJA1000 into the PeliCAN mode*/

	/*

	 * Check registers after reset in the PeliCAN mode.

	 * See states on p. 23 of the Datasheet.

/*

 * PLX9030/50/52 software reset

 * Also LRESET# asserts and brings to reset device on the Local Bus (if wired).

 * For most cards it's enough for reset the SJA1000 chips.

/*

 * PLX9056 software reset

 * Assert LRESET# and reset device(s) on the Local Bus (if wired).

 issue a local bus reset */

 reload local configuration from EEPROM */

	/*

	 * There is no safe way to poll for the end

	 * of reconfiguration process. Waiting for 10ms

	 * is safe.

 Special reset function for Marathon CAN-bus-PCI card */

 reset the SJA1000 chip */

 Special reset function for Marathon CAN-bus-PCIe card */

 reset the SJA1000 chip */

 Special reset function for ASEM Dual CAN raw card */

 reset the two SJA1000 chips */

	/*

	 * Disable interrupts from PCI-card and disable local

	 * interrupts

/*

 * Probe PLX90xx based device for the SJA1000 chips and register each

 * available CAN channel to SJA1000 Socket-CAN subsystem.

 Allocate card structures to hold addresses, ... */

 Remap PLX90xx configuration space */

 Detect available channels */

		/*

		 * Remap IO space of the SJA1000 chips

		 * This is device-dependent mapping

 Check if channel is present */

 Register SJA1000 device */

	/*

	 * Enable interrupts from PCI-card (PLX90xx) and enable Local_1,

	 * Local_2 interrupts from the SJA1000 chips

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2021, Dario Binacchi <dariobin@libero.it>

/*

 * PCI bus driver for Bosch C_CAN/D_CAN controller

 *

 * Copyright (C) 2012 Federico Vaga <federico.vaga@gmail.com>

 *

 * Borrowed from c_can_platform.c

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 Specify if is C_CAN or D_CAN */

 Number of message objects */

 Set the register alignment in the memory */

 Set the frequency */

 PCI bar number */

 Callback for reset */

/* 16-bit c_can registers can be arranged differently in the memory

 * architecture of different implementations. For example: 16-bit

 * registers can be aligned to a 16-bit boundary or 32-bit boundary etc.

 * Handle the same by providing a common read/write interface.

 write to sw reset register */

 allocate the c_can device */

 Configure CAN type */

 Configure access to registers */

 52 Mhz */

 50 MHz */

/*

 * CAN bus driver for Bosch C_CAN controller

 *

 * Copyright (C) 2010 ST Microelectronics

 * Bhupesh Sharma <bhupesh.sharma@st.com>

 *

 * Borrowed heavily from the C_CAN driver originally written by:

 * Copyright (C) 2007

 * - Sascha Hauer, Marc Kleine-Budde, Pengutronix <s.hauer@pengutronix.de>

 * - Simon Kallweit, intefo AG <simon.kallweit@intefo.ch>

 *

 * TX and RX NAPI implementation has been borrowed from at91 CAN driver

 * written by:

 * Copyright

 * (C) 2007 by Hans J. Koch <hjk@hansjkoch.de>

 * (C) 2008, 2009 by Marc Kleine-Budde <kernel@pengutronix.de>

 *

 * Bosch C_CAN controller is compliant to CAN protocol version 2.0 part A and B.

 * Bosch C_CAN user manual can be obtained from:

 * http://www.semiconductors.bosch.de/media/en/pdf/ipmodules_1/c_can/

 * users_manual_c_can.pdf

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 Number of interface registers */

 control extension register D_CAN specific */

 control register */

 test register */

 status register */

 error counter register */

 bit-timing register */

 interrupt register */

 brp extension register */

 IFx command request */

 IFx command mask */

 TX buffer setup */

 For the low buffers we clear the interrupt bit, but keep newdat */

 For the high buffers we clear the interrupt bit and newdat */

 Receive setup of message objects */

 Invalidation of message objects */

 IFx arbitration */

 IFx message control */

 Use IF1 in NAPI path and IF2 in TX path */

 minimum timeout for checking BUSY status */

 Wait for ~1 sec for INIT bit */

 c_can lec values */

/* c_can error types:

 * Bus errors (BUS_OFF, ERROR_WARNING, ERROR_PASSIVE) are supported

 Time segment 1 = prop_seg + phase_seg1 */

 Time segment 2 = phase_seg2 */

 6-bit BRP field + 4-bit BRPE field*/

/* Note: According to documentation clearing TXIE while MSGVAL is set

 * is not allowed, but works nicely on C/DCAN. And that lowers the I/O

 * load significantly.

	/* If we change the DIR bit, we need to invalidate the buffer

	 * first, i.e. clear the MSGVAL flag in the arbiter.

 create an error msg */

 Memory barrier before checking tx_free (head and tail) */

 Cache the message */

	/* Store the message in the interface so we can call

	 * can_put_echo_skb(). We must do this before we enable

	 * transmit as we might race against do_tx().

 c_can provides a 6-bit brp and 4-bit brpe fields */

/* Configure C_CAN message objects for Tx and Rx purposes:

 * C_CAN provides a total of 32 message objects that can be configured

 * either for Tx or Rx purposes. Here the first 16 message objects are used as

 * a reception FIFO. The end of reception FIFO is signified by the EoB bit

 * being SET. The remaining 16 message objects are kept aside for Tx purposes.

 * See user guide document for further details on configuring message

 * objects.

 first invalidate all message objects */

 setup receive message objects */

/* Configure C_CAN chip:

 * - enable/disable auto-retransmission

 * - set operating mode

 * - configure message objects

 enable automatic retransmission */

 loopback + silent mode : useful for hot self-test */

 loopback mode : useful for self-test function */

 silent mode : bus-monitoring mode */

 configure message objects */

 set a `lec` value so that we can check for updates later */

 Clear all internal status */

 set bittiming params */

 basic c_can configuration */

 Setup the command for new messages */

 Attempt to use "active" if available else use "default" */

 put ctrl to init on stop to end ongoing transmission */

 deactivate pins */

		/* We use IF_NAPI interface instead of IF_TX because we

		 * are called from c_can_poll(), which runs inside

		 * NAPI. We are not transmitting.

		/* Make sure that anybody stopping the queue after

		 * this sees the new tx_ring->tail.

 Start transmission for all cached messages */

/* If we have a gap in the pending bits, that means we either

 * raced with the hardware or failed to readout all upper

 * objects in the last run due to quota limit.

	/* If the last set bit is larger than the number of pending

	 * bits we have a gap.

 If the bits are linear, nothing to do */

	/* Find the first set bit after the gap. We walk backwards

	 * from the last set bit.

		/* This really should not happen, but this covers some

		 * odd HW behaviour. Do not remove that unless you

		 * want to brick your machine.

 read the data from the message object */

/* theory of operation:

 *

 * c_can core saves a received CAN message into the first free message

 * object it finds free (starting with the lowest). Bits NEWDAT and

 * INTPND are set for this message object indicating that a new message

 * has arrived.

 *

 * We clear the newdat bit right away.

 *

 * This can result in packet reordering when the readout is slow.

			/* If the pending field has a gap, handle the

			 * bits above the gap first.

 Remove the bits from pend */

 Read the objects */

 error warning state */

 error passive state */

 bus-off state */

 propagate the error condition to the CAN stack */

 error warning state */

 error warning state */

 error passive state */

 bus-off state */

	/* early exit if no lec update or no error.

	 * no lec update means that no CAN bus event has been detected

	 * since CPU wrote 0x7 value to status reg.

 common for all type of bus errors */

 propagate the error condition to the CAN stack */

	/* check for 'last error code' which tells us the

	 * type of the last error to occur on the CAN bus

 Only read the status register if a status interrupt was pending */

 Ack status on C_CAN. D_CAN is self clearing */

 no change detected ... */

 handle state changes */

 handle bus recovery events */

 handle lec errors on the bus */

 Handle Tx/Rx events. We do this unconditionally */

 enable all IRQs if we are not in bus off state */

 save for later use */

 disable all interrupts and schedule the NAPI */

 open the can device */

 register interrupt handler */

 start the c_can controller */

 enable status change, error and module interrupts */

 set PDR value so the device goes to power down mode */

 Wait for the PDA bit to get set */

 Clear PDR and INIT bits */

 Wait for the PDA bit to get clear */

	/* Deactivate pins to prevent DRA7 DCAN IP from being

	 * stuck in transition when module is disabled.

	 * Pins are activated in c_can_start() and deactivated

	 * in c_can_stop()

 we support local echo */

/*

 * Platform CAN bus driver for Bosch C_CAN controller

 *

 * Copyright (C) 2010 ST Microelectronics

 * Bhupesh Sharma <bhupesh.sharma@st.com>

 *

 * Borrowed heavily from the C_CAN driver originally written by:

 * Copyright (C) 2007

 * - Sascha Hauer, Marc Kleine-Budde, Pengutronix <s.hauer@pengutronix.de>

 * - Simon Kallweit, intefo AG <simon.kallweit@intefo.ch>

 *

 * Bosch C_CAN controller is compliant to CAN protocol version 2.0 part A and B.

 * Bosch C_CAN user manual can be obtained from:

 * http://www.semiconductors.bosch.de/media/en/pdf/ipmodules_1/c_can/

 * users_manual_c_can.pdf

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

/* 16-bit c_can registers can be arranged differently in the memory

 * architecture of different implementations. For example: 16-bit

 * registers can be aligned to a 16-bit boundary or 32-bit boundary etc.

 * Handle the same by providing a common read/write interface.

 We look only at the bits of our instance. */

	/* We clear the start bit first. The start bit is

	 * looking at the 0 -> transition, but is not self clearing;

	 * NOTE: DONE must be written with 1 to clear it.

	 * We can't clear the DONE bit here using regmap_update_bits()

	 * as it will bypass the write if initial condition is START:0 DONE:1

	 * e.g. on DRA7 which needs START pulse.

 START = 0, DONE = 0 */

	/* check if START bit is 0. Ignore DONE bit for now

	 * as it can be either 0 or 1.

 Clear DONE bit & set START bit. */

 DONE must be written with 1 to clear it */

 prevent further clearing of DONE bit */

 clear START bit if start pulse is needed */

 sentinel */ },

 sentinel */ },

 get the appropriate clk */

 get the platform data */

 allocate the c_can device */

		/* Check if we need custom RAMINIT via syscon. Mostly for TI

		 * platforms. Only supported with DT boot.

 can fail with -EPROBE_DEFER */

 SPDX-License-Identifier: GPL-2.0-only

/* Copyright (C) 2012, 2020 Oliver Hartkopp <socketcan@hartkopp.net>

 CAN DLC to real data length conversion helpers */

 get data length from raw data length code (DLC) */

 0 - 8 */

 9 - 12 */

 13 - 16 */

 17 - 20 */

 21 - 24 */

 25 - 32 */

 33 - 40 */

 41 - 48 */

 49 - 56 */

 57 - 64 */

 map the sanitized data length to an appropriate data length code */

 check for length mapping table size at build time */

/**

 * can_skb_get_frame_len() - Calculate the CAN Frame length in bytes

 * 	of a given skb.

 * @skb: socket buffer of a CAN message.

 *

 * Do a rough calculation: bit stuffing is ignored and length in bits

 * is rounded up to a length in bytes.

 *

 * Rationale: this function is to be used for the BQL functions

 * (netdev_sent_queue() and netdev_completed_queue()) which expect a

 * value in bytes. Just using skb->len is insufficient because it will

 * return the constant value of CAN(FD)_MTU. Doing the bit stuffing

 * calculation would be too expensive in term of computing resources

 * for no noticeable gain.

 *

 * Remarks: The payload of CAN FD frames with BRS flag are sent at a

 * different bitrate. Currently, the can-utils canbusload tool does

 * not support CAN-FD yet and so we could not run any benchmark to

 * measure the impact. There might be possible improvement here.

 *

 * Return: length in bytes.

 SPDX-License-Identifier: GPL-2.0-only

/* Copyright (C) 2005 Marc Kleine-Budde, Pengutronix

 * Copyright (C) 2006 Andrey Volkov, Varma Electronics

 * Copyright (C) 2008-2009 Wolfgang Grandegger <wg@grandegger.com>

 in one-tenth of a percent */

/* Bit-timing calculation derived from:

 *

 * Code based on LinCAN sources and H8S2638 project

 * Copyright 2004-2006 Pavel Pisa - DCE FELK CVUT cz

 * Copyright 2005      Stanislav Marek

 * email: pisa@cmp.felk.cvut.cz

 *

 * Calculates proper bit-timing parameters for a specified bit-rate

 * and sample-point, which can then be used to set the bit-timing

 * registers of the CAN controller. You can find more information

 * in the header file linux/can/netlink.h.

 current bitrate */

 difference between current and nominal value */

 difference between current and nominal value */

 nominal sample point */

 current best value for tseg */

 current best value for brp */

 Use CiA recommended sample points */

 tseg even = round down, odd = round up */

 Compute all possible tseg choices (tseg=tseg1+tseg2) */

 choose brp step which is possible in system */

 tseg brp biterror */

 reset sample point error if we have a better bitrate */

 Error in one-tenth of a percent */

 real sample point */

 check for sjw user settings */

 bt->sjw is at least 1 -> sanitize upper bound to sjw_max */

 bt->sjw must not be higher than tseg2 */

 real bitrate */

	/* As specified in ISO 11898-1 section 11.3.3 "Transmitter

	 * delay compensation" (TDC) is only applicable if data BRP is

	 * one or two.

 Sample point in clock periods */

 CONFIG_CAN_CALC_BITTIMING */

/* Checks the validity of the specified bit-timing parameters prop_seg,

 * phase_seg1, phase_seg2 and sjw and tries to determine the bitrate

 * prescaler value brp. You can find more information in the header

 * file linux/can/netlink.h.

 the practicable BRP */

 Checks the validity of predefined bitrate settings */

	/* Depending on the given can_bittiming parameter structure the CAN

	 * timing parameters are calculated based on the provided bitrate OR

	 * alternatively the CAN timing parameters (tq, prop_seg, etc.) are

	 * provided directly which are then checked and fixed up.

 SPDX-License-Identifier: GPL-2.0-only

/* Copyright (C) 2005 Marc Kleine-Budde, Pengutronix

 * Copyright (C) 2006 Andrey Volkov, Varma Electronics

 * Copyright (C) 2008-2009 Wolfgang Grandegger <wg@grandegger.com>

/* Local echo of CAN messages

 *

 * CAN network devices *should* support a local echo functionality

 * (see Documentation/networking/can.rst). To test the handling of CAN

 * interfaces that do not support the local echo both driver types are

 * implemented. In the case that the driver does not support the echo

 * the IFF_ECHO remains clear in dev->flags. This causes the PF_CAN core

 * to perform the echo as a fallback solution.

/* Put the skb on the stack to be looped backed locally lateron

 *

 * The function is typically called in the start_xmit function

 * of the device driver. The driver must protect access to

 * priv->echo_skb, if necessary.

 check flag whether this packet has to be looped back */

 make settings for echo to reduce code in irq context */

 save frame_len to reuse it when transmission is completed */

 save this skb for tx interrupt echo handling */

 locking problem with netif_stop_queue() ?? */

		/* Using "struct canfd_frame::len" for the frame

		 * length is supported on both CAN and CANFD frames.

 get the real payload length for netdev statistics */

/* Get the skb from the stack and loop it back locally

 *

 * The function is typically called when the TX done interrupt

 * is handled in the device driver. The driver must protect

 * access to priv->echo_skb, if necessary.

/* Remove the skb from the stack and free it.

 *

 * The function is typically called when TX failed.

 SPDX-License-Identifier: GPL-2.0-only

/* Copyright (C) 2005 Marc Kleine-Budde, Pengutronix

 * Copyright (C) 2006 Andrey Volkov, Varma Electronics

 * Copyright (C) 2008-2009 Wolfgang Grandegger <wg@grandegger.com>

 CAN device restart for bus-off recovery */

	/* No synchronization needed because the device is bus-off and

	 * no messages can come in or go out.

 send restart message upstream */

 Now restart the device */

	/* A manual restart is only permitted if automatic restart is

	 * disabled and the device is in the bus-off state

/* CAN bus-off

 *

 * This functions should be called when the device goes bus-off to

 * tell the netif layer that no more packets can be sent or received.

 * If enabled, a timer is started to trigger bus-off recovery.

 New-style flags. */

 Allocate and setup space for the CAN network device */

	/* We put the driver's priv, the CAN mid layer priv and the

	 * echo skb into the netdevice's priv. The memory layout for

	 * the netdev_priv is like this:

	 *

	 * +-------------------------+

	 * | driver's priv           |

	 * +-------------------------+

	 * | struct can_ml_priv      |

	 * +-------------------------+

	 * | array of struct sk_buff |

	 * +-------------------------+

 Free space of the CAN network device */

 changing MTU and control mode for CAN/CANFD devices */

 Do not allow changing the MTU while running */

 allow change of MTU according to the CANFD ability of the device */

 'CANFD-only' controllers can not switch to CAN_MTU */

 check for potential CANFD ability */

/* Common open function when the device gets opened.

 *

 * This function should be called in the open function of the device

 * driver.

 For CAN FD the data bitrate has to be >= the arbitration bitrate */

 Switch carrier on if device was stopped while in bus-off state */

/* Common function that can be used to understand the limitation of

 * a transceiver when it provides no means to determine these limitations

 * at runtime.

/* Common close function for cleanup before the device gets closed.

 *

 * This function should be called in the close function of the device

 * driver.

	/* Disabling termination by default is the safe choice: Else if many

	 * bus participants enable it, no communication is possible at all.

 Register the CAN network device */

	/* Ensure termination_const, termination_const_cnt and

	 * do_set_termination consistency. All must be either set or

	 * unset.

 Unregister the CAN network device */

/* Test if a network device is a candev based device

 * and return the can_priv* if so.

 SPDX-License-Identifier: GPL-2.0-only

/* Copyright (C) 2005 Marc Kleine-Budde, Pengutronix

 * Copyright (C) 2006 Andrey Volkov, Varma Electronics

 * Copyright (C) 2008-2009 Wolfgang Grandegger <wg@grandegger.com>

 * Copyright (C) 2021 Vincent Mailhol <mailhol.vincent@wanadoo.fr>

	/* Make sure that valid CAN FD configurations always consist of

	 * - nominal/arbitration bittiming

	 * - data bittiming

	 * - control mode with CAN_CTRLMODE_FD set

	 * - TDC parameters are coherent (details below)

 CAN_CTRLMODE_TDC_{AUTO,MANUAL} are mutually exclusive */

		/* If one of the CAN_CTRLMODE_TDC_* flag is set then

		 * TDC must be set and vice-versa

		/* If providing TDC parameters, at least TDCO is

		 * needed. TDCV is needed if and only if

		 * CAN_CTRLMODE_TDC_MANUAL is set

 We need synchronization with dev->stop() */

 Do not allow changing bittiming while running */

		/* Calculate bittiming parameters based on

		 * bittiming_const if set, otherwise pass bitrate

		 * directly via do_set_bitrate(). Bail out if neither

		 * is given.

 Finally, set the bit-timing registers */

 Do not allow changing controller mode while running */

 check whether provided bits are allowed to be passed */

 do not check for static fd-non-iso if 'fd' is disabled */

 make sure static options are provided by configuration */

 clear bits to be modified and copy the flag values */

 CAN_CTRLMODE_FD can only be set when driver supports FD */

		/* CAN_CTRLMODE_TDC_{AUTO,MANUAL} are mutually

		 * exclusive: make sure to turn the other one off

 Do not allow changing restart delay while running */

 Do not allow a restart while not running */

 Do not allow changing bittiming while running */

		/* Calculate bittiming parameters based on

		 * data_bittiming_const if set, otherwise pass bitrate

		 * directly via do_set_bitrate(). Bail out if neither

		 * is given.

 TDC parameters are provided: use them */

			/* Neither of TDC parameters nor TDC flags are

			 * provided: do calculation

		} /* else: both CAN_CTRLMODE_TDC_{AUTO,MANUAL} are explicitly

		   * turned off. TDC is disabled: do nothing

 Finally, set the bit-timing registers */

 check whether given value is supported by the interface */

 Finally, set the termination value */

 nest IFLA_CAN_TDC */

 IFLA_CAN_TDCV_MIN */

 IFLA_CAN_TDCV_MAX */

 IFLA_CAN_TDCO_MIN */

 IFLA_CAN_TDCO_MAX */

 IFLA_CAN_TDCF_MIN */

 IFLA_CAN_TDCF_MAX */

 IFLA_CAN_TDCV */

 IFLA_CAN_TDCO */

 IFLA_CAN_TDCF */

 IFLA_CAN_BITTIMING */

 IFLA_CAN_BITTIMING_CONST */

 IFLA_CAN_CLOCK */

 IFLA_CAN_STATE */

 IFLA_CAN_CTRLMODE */

 IFLA_CAN_RESTART_MS */

 IFLA_CAN_BERR_COUNTER */

 IFLA_CAN_DATA_BITTIMING */

 IFLA_CAN_DATA_BITTIMING_CONST */

 IFLA_CAN_TERMINATION */

 IFLA_CAN_TERMINATION_CONST */

 IFLA_CAN_BITRATE_CONST */

 IFLA_CAN_DATA_BITRATE_CONST */

 IFLA_CAN_BITRATE_MAX */

 IFLA_CAN_TDC */

 SPDX-License-Identifier: GPL-2.0-only

/* Copyright (c) 2014      Protonic Holland,

 *                         David Jander

 * Copyright (C) 2014-2021 Pengutronix,

 *                         Marc Kleine-Budde <kernel@pengutronix.de>

 Check if there was another interrupt */

	/* Subtract two u32 and return result as int, to keep

	 * difference steady around the u32 overflow.

/**

 * can_rx_offload_offload_one() - Read one CAN frame from HW

 * @offload: pointer to rx_offload context

 * @n: number of mailbox to read

 *

 * The task of this function is to read a CAN frame from mailbox @n

 * from the device and return the mailbox's content as a struct

 * sk_buff.

 *

 * If the struct can_rx_offload::skb_queue exceeds the maximal queue

 * length (struct can_rx_offload::skb_queue_len_max) or no skb can be

 * allocated, the mailbox contents is discarded by reading it into an

 * overflow buffer. This way the mailbox is marked as free by the

 * driver.

 *

 * Return: A pointer to skb containing the CAN frame on success.

 *

 *         NULL if the mailbox @n is empty.

 *

 *         ERR_PTR() in case of an error

 If queue is full drop frame */

 Mailbox was empty. */

	/* There was a problem reading the mailbox, propagate

	 * error value.

 Mailbox was read. */

 Limit queue len to 4x the weight (rounted to next power of two) */

 SPDX-License-Identifier: GPL-2.0

 SPI to CAN driver for the Texas Instruments TCAN4x5x

 Copyright (C) 2018-19 Texas Instruments Incorporated - http:
 Interrupt bits */

 MCAN Interrupt bits */

 tpulse_width minimum 30us */

 Zero out the MCAN buffers */

 Sanity check */

 Configure the SPI bus */

 sentinel */

 sentinel */

 SPDX-License-Identifier: GPL-2.0

 IOMapped CAN bus driver for Bosch M_CAN controller

 Copyright (C) 2014 Freescale Semiconductor, Inc.

	Dong Aisheng <b29396@freescale.com>



 Copyright (C) 2018-19 Texas Instruments Incorporated - http:
 message ram could be shared */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0

/*

 * PCI Specific M_CAN Glue

 *

 * Copyright (C) 2018-2020 Intel Corporation

 * Author: Felipe Balbi (Intel)

 * Author: Jarkko Nikula <jarkko.nikula@linux.intel.com>

 * Author: Raymond Tan <raymond.tan@intel.com>

 Enable interrupt control at CAN wrapper IP */

 Disable interrupt control at CAN wrapper IP */

 Terminating Entry */

 SPDX-License-Identifier: GPL-2.0



 tcan4x5x - Texas Instruments TCAN4x5x Family CAN controller driver



 Copyright (c) 2020 Pengutronix,

                    Marc Kleine-Budde <kernel@pengutronix.de>

 Copyright (c) 2018-2019 Texas Instruments Incorporated

                    http:
 Device ID and SPI Registers */

 Device configuration registers and Interrupt Flags*/

 M_CAN */

 MRAM */

 SPDX-License-Identifier: GPL-2.0

 CAN bus driver for Bosch M_CAN controller

 Copyright (C) 2014 Freescale Semiconductor, Inc.

      Dong Aisheng <b29396@freescale.com>

 Copyright (C) 2018-19 Texas Instruments Incorporated - http:
/* Bosch M_CAN user manual can be obtained from:

 * https://github.com/linux-can/can-doc/tree/master/m_can

 registers definition */

 TDCR Register only available for version >=3.1.x */

 napi related */

 message ram configuration data length */

 Core Release Register (CREL) */

 Data Bit Timing & Prescaler Register (DBTP) */

 Transmitter Delay Compensation Register (TDCR) */

 Test Register (TEST) */

 CC Control Register (CCCR) */

 for version 3.0.x */

 for version >=3.1.x */

 for version >=3.2.x */

 for version >=3.3.x */

 Nominal Bit Timing & Prescaler Register (NBTP) */

 Timestamp Counter Configuration Register (TSCC) */

 Timestamp Counter Value Register (TSCV) */

 Error Counter Register (ECR) */

 Protocol Status Register (PSR) */

 Interrupt Register (IR) */

 Renamed bits for versions > 3.1.x */

 Bits for version 3.0.x */

 Interrupts for version 3.0.x */

 Interrupts for version >= 3.1.x */

 Interrupt Line Select (ILS) */

 Interrupt Line Enable (ILE) */

 Rx FIFO 0/1 Configuration (RXF0C/RXF1C) */

 Rx FIFO 0/1 Status (RXF0S/RXF1S) */

 Rx Buffer / FIFO Element Size Configuration (RXESC) */

 Tx Buffer Configuration (TXBC) */

 Tx FIFO/Queue Status (TXFQS) */

 Tx Buffer Element Size Configuration (TXESC) */

 Tx Event FIFO Configuration (TXEFC) */

 Tx Event FIFO Status (TXEFS) */

 Tx Event FIFO Acknowledge (TXEFA) */

 Message RAM Configuration (in bytes) */

 Message RAM Elements */

 Rx Buffer Element */

 R0 */

 R1 */

 Tx Buffer Element */

 T0 */

 T1 */

 Tx event FIFO Element */

 E1 */

/* The ID and DLC registers are adjacent in M_CAN FIFO memory,

 * and we can save a (potentially slow) bus round trip by combining

 * reads and writes to them.

 Clear the Clock stop request if it was set */

 enable m_can configuration */

 CCCR.CCE can only be set/reset while CCCR.INIT = '1' */

 there's a delay for module initialization */

 Only interrupt line 0 is used in this driver */

/* Retrieve internal timestamp counter from TSCV.TSC, and shift it to 32-bit

 * width.

/* For peripherals, pass skb to rx-offload, which will push skb from

 * napi. For non-peripherals, RX is done in napi already, so push

 * directly. timestamp is used to ensure good skb ordering in

 * rx-offload and is ignored for non-peripherals.

 calculate the fifo get index for where to read data */

 acknowledge rx fifo 0 */

 propagate the error condition to the CAN stack */

	/* check for 'last error code' which tells us the

	 * type of the last error to occur on the CAN bus

 error warning state */

 error passive state */

 bus-off state */

 propagate the error condition to the CAN stack */

 error warning state */

 error passive state */

 bus-off state */

 propagate the error condition to the CAN stack */

 update tx error stats since there is protocol error */

 update arbitration lost status */

 handle lec errors on the bus */

 handle protocol errors in arbitration phase */

 other unproccessed error interrupts */

	/* Errata workaround for issue "Needless activation of MRAF irq"

	 * During frame reception while the MCAN is in Error Passive state

	 * and the Receive Error Counter has the value MCAN_ECR.REC = 127,

	 * it may happen that MCAN_IR.MRAF is set although there was no

	 * Message RAM access failure.

	 * If MCAN_IR.MRAF is enabled, an interrupt to the Host CPU is generated

	 * The Message RAM Access Failure interrupt routine needs to check

	 * whether MCAN_ECR.RP = ’1’ and MCAN_ECR.REC = 127.

	 * In this case, reset MCAN_IR.MRAF. No further action is required.

	/* Don't re-enable interrupts if the driver had a fatal error

	 * (e.g., FIFO read failure).

	/* Don't re-enable interrupts if the driver had a fatal error

	 * (e.g., FIFO read failure).

/* Echo tx skb and update net stats. Peripherals use rx-offload for

 * echo. timestamp is used for peripherals to ensure correct ordering

 * by rx-offload, and is ignored for non-peripherals.

 read tx event fifo status */

 Get Tx Event fifo element count */

 Get and process all sent elements */

 retrieve get index */

 get message marker, timestamp */

 ack txe element */

 update stats */

 ACK all irqs */

	/* schedule NAPI in case of

	 * - rx IRQ

	 * - state change IRQ

	 * - bus error IRQ and bus error reporting

 Transmission Complete Interrupt*/

 New TX FIFO Element arrived */

 Time segment 1 = prop_seg + phase_seg1 */

 Time segment 2 = phase_seg2 */

 Time segment 1 = prop_seg + phase_seg1 */

 Time segment 2 = phase_seg2 */

 Time segment 1 = prop_seg + phase_seg1 */

 Time segment 2 = phase_seg2 */

 Time segment 1 = prop_seg + phase_seg1 */

 Time segment 2 = phase_seg2 */

		/* TDC is only needed for bitrates beyond 2.5 MBit/s.

		 * This is mentioned in the "Bit Time Requirements for CAN FD"

		 * paper presented at the International CAN Conference 2013

			/* Use the same value of secondary sampling point

			 * as the data sampling point

			/* Equation based on Bosch's M_CAN User Manual's

			 * Transmitter Delay Compensation Section

 Max valid TDCO value is 127 */

/* Configure M_CAN chip:

 * - set rx buffer/fifo element size

 * - configure rx fifo

 * - accept non-matching frame into fifo 0

 * - configure tx buffer

 *		- >= v3.1.x: TX FIFO is used

 * - configure mode

 * - setup bittiming

 * - configure timestamp generation

 RX Buffer/FIFO Element Size 64 bytes data field */

 Accept Non-matching Frames Into FIFO 0 */

 only support one Tx Buffer currently */

 TX FIFO is used for newer IP Core versions */

 support 64 bytes payload */

 TX Event FIFO */

 Full TX Event FIFO is used */

 rx fifo configuration, blocking mode, fifo size 1 */

 Version 3.0.x */

 Version 3.1.x or 3.2.x */

 Only 3.2.x has NISO Bit implemented */

 Loopback Mode */

 Enable Monitoring (all versions) */

 Disable Auto Retransmission (all versions) */

 Write config */

 Enable interrupts */

 route all interrupts to INT0 */

 set bittiming params */

	/* enable internal timestamp generation, with a prescalar of 16. The

	 * prescalar is applied to the nominal bit timing

 basic m_can configuration */

/* Checks core release number of M_CAN

 * returns 0 if an unsupported device is detected

 * else it returns the release and step coded as:

 * return value = 10 * <release> + 1 * <step>

	/* Read Core Release Version and split into version number

	 * Example: Version 3.2.1 => rel = 3; step = 2; substep = 1;

 M_CAN v3.x.y: create return value */

 Unsupported M_CAN version */

/* Selectable Non ISO support only in version 3.2.x

 * This function checks if the bit is writable.

 Clear NISO */

 return false if time out (-ETIMEDOUT), else return true */

 return if unsupported version */

 Shared properties of all M_CAN versions */

 Set M_CAN supported operations */

 Set properties depending on M_CAN version */

 CAN_CTRLMODE_FD_NON_ISO is fixed with M_CAN IP v3.0.x */

 CAN_CTRLMODE_FD_NON_ISO is fixed with M_CAN IP v3.1.x */

 Support both MCAN version v3.2.x and v3.3.0 */

 disable all interrupts */

 Set init mode to disengage from the network */

 set the state as STOPPED */

get wrap around for loopback skb index */

 calculate next index */

 check if occupied */

 Generate ID field for TX buffer Element */

 Common to all supported M_CAN versions */

 Write the frame ID, DLC, and payload to the FIFO element. */

 End of xmit function for version 3.0.x */

 Transmit routine for version >= v3.1.x */

 Check if FIFO full */

 This shouldn't happen */

 get put index for frame */

		/* Construct DLC Field, with CAN-FD configuration.

		 * Use the put index of the fifo as the message marker,

		 * used in the TX interrupt for sending the correct echo frame.

 get CAN FD configuration of frame */

		/* Push loopback echo.

		 * Will be looped back on TX interrupt based on message marker

 Enable TX FIFO element to start transfer  */

 stop network queue if fifo full */

			/* Need to stop the queue to avoid numerous requests

			 * from being sent.  Suggested improvement is to create

			 * a queueing mechanism that will queue the skbs and

			 * process them in order.

 open the can device */

 register interrupt handler */

 start the m_can controller */

 we support local echo */

	/* initialize the entire Message RAM in use to avoid possible

	 * ECC/parity checksum errors when reading an uninitialized buffer

	/* Get TX FIFO size

	 * Defines the total amount of echo buffers for loopback

 allocate the m_can device */

	/* Probe finished

	 * Stop clocks. They will be reactivated once the M_CAN device is opened

 SPDX-License-Identifier: GPL-2.0-only

/* CAN bus driver for Microchip 251x/25625 CAN Controller with SPI Interface

 *

 * MCP2510 support and bug fixes by Christian Pellegrin

 * <chripell@evolware.org>

 *

 * Copyright 2009 Christian Pellegrin EVOL S.r.l.

 *

 * Copyright 2007 Raymarine UK, Ltd. All Rights Reserved.

 * Written under contract by:

 *   Chris Elston, Katalix Systems, Ltd.

 *

 * Based on Microchip MCP251x CAN controller driver written by

 * David Vrabel, Copyright 2006 Arcom Control Systems Ltd.

 *

 * Based on CAN bus driver for the CCAN controller written by

 * - Sascha Hauer, Marc Kleine-Budde, Pengutronix

 * - Simon Kallweit, intefo AG

 * Copyright 2007

 SPI interface instruction set */

 MPC251x registers */

/* Buffer size required for the largest SPI transfer (i.e., reading a

 * frame)

 SPI device lock */

/* Note about handling of error return of mcp251x_spi_trans: accessing

 * registers via SPI is not really different conceptually than using

 * normal I/O assembler instructions, although it's much more

 * complicated from a practical POV. So it's not advisable to always

 * check the return value of this function. Imagine that every

 * read{b,l}, write{b,l} and friends would be bracketed in "if ( < 0)

 * error();", it would be a great mess (well there are some situation

 * when exception handling C++ like could be useful after all). So we

 * just check that transfers are OK at the beginning of our

 * conversation with the chip and to avoid doing really nasty things

 * (like injecting bogus packets in the network stack).

 inputs */

 outputs */

 inputs */

 outputs */

 nothing to be done for inputs */

 nothing to be done for inputs */

 gpiochip handles TX[0..2]RTS and RX[0..1]BF */

 Extended ID Enable */

 Standard ID */

 Extended ID */

 Remote transmission */

 use INSTRUCTION_RTS, to avoid "repeated frame problem" */

 Extended ID format */

 Extended ID part */

 Standard ID part */

 Remote transmission request */

 Standard ID format */

 Data length */

 May only be called when device is sleeping! */

 Force wakeup interrupt to wake device, but don't execute IST */

 Wait for oscillator startup timer after wake up */

 Put device into config mode */

 Wait for the device to enter config mode */

 Disable and clear pending interrupts */

 We have to delay work since SPI I/O may sleep */

 Enable interrupts */

 Put device into loopback mode */

 Put device into listen-only mode */

 Put device into normal mode */

 Wait for the device to enter normal mode */

 Wait for oscillator startup timer after power up */

 Wait for oscillator startup timer after reset */

 Wait for reset to finish */

 Check for power up default value */

 Disable and clear pending interrupts */

 mask out flags we don't care about */

 receive buffer 0 */

			/* Free one buffer ASAP

			 * (The MCP2515/25625 does this automatically.)

 receive buffer 1 */

 The MCP2515/25625 does this automatically. */

 any error or tx interrupt we need to clear? */

 Update can state */

 Update can state statistics */

 Handle overflow counters */

 Sanity check */

 Allocate can/net device */

 Configure the SPI bus */

 Here is OK to not lock the MCP, no one knows about it yet */

	/* Note: at this point neither IST nor workqueues are running.

	 * open/stop cannot be called anyway so locking is not needed

 SPDX-License-Identifier: GPL-2.0-only

/* CAN bus driver for Holt HI3110 CAN Controller with SPI Interface

 *

 * Copyright(C) Timesys Corporation 2016

 *

 * Based on Microchip 251x CAN Controller (mcp251x) Linux kernel driver

 * Copyright 2009 Christian Pellegrin EVOL S.r.l.

 * Copyright 2007 Raymarine UK, Ltd. All Rights Reserved.

 * Copyright 2006 Arcom Control Systems Ltd.

 *

 * Based on CAN bus driver for the CCAN controller written by

 * - Sascha Hauer, Marc Kleine-Budde, Pengutronix

 * - Simon Kallweit, intefo AG

 * Copyright 2007

 IDE + SRR */

 SPI device lock */

/* Note about handling of error return of hi3110_spi_trans: accessing

 * registers via SPI is not really different conceptually than using

 * normal I/O assembler instructions, although it's much more

 * complicated from a practical POV. So it's not advisable to always

 * check the return value of this function. Imagine that every

 * read{b,l}, write{b,l} and friends would be bracketed in "if ( < 0)

 * error();", it would be a great mess (well there are some situation

 * when exception handling C++ like could be useful after all). So we

 * just check that transfers are OK at the beginning of our

 * conversation with the chip and to avoid doing really nasty things

 * (like injecting bogus packets in the network stack).

 Extended frame */

 Standard frame */

 IDE is recessive (1), indicating extended 29-bit frame */

 IDE is dominant (0), frame indicating standard 11-bit */

 Data length */

 We have to delay work since SPI I/O may sleep */

 Enable TX */

 Wait for the device to enter the mode */

 Wait for oscillator startup timer after power up */

 Wait for oscillator startup timer after reset */

	/* As per the datasheet it appears the error flags are

	 * not cleared on reset. Explicitly clear them by performing a read

	/* Confirm correct operation by checking against reset values

	 * in datasheet

 Disable transmit, interrupts and clear flags */

 Update can state */

 Update bus errors */

 Check for protocol errors */

 Sanity check */

 Allocate can/net device */

 Configure the SPI bus */

	/* Note: at this point neither IST nor workqueues are running.

	 * open/stop cannot be called anyway so locking is not needed

 SPDX-License-Identifier: GPL-2.0



 mcp251xfd - Microchip MCP251xFD Family CAN controller driver



 Copyright (c) 2021 Pengutronix,

               Marc Kleine-Budde <kernel@pengutronix.de>



 SPDX-License-Identifier: GPL-2.0



 mcp251xfd - Microchip MCP251xFD Family CAN controller driver



 Copyright (c) 2020, 2021 Pengutronix,

               Marc Kleine-Budde <kernel@pengutronix.de>

 Copyright (C) 2015-2018 Etnaviv Project



 provoke NULL pointer access, if used after END object */

 register space + end marker */

 register space */

 TEF ring, RX ring, TX rings */

 size of the headers */

 allocate the file in vmalloc memory, it's likely to be big */

 point the data member after the headers */

 SPDX-License-Identifier: GPL-2.0



 mcp251xfd - Microchip MCP251xFD Family CAN controller driver



 Copyright (c) 2019, 2020 Pengutronix,

                          Marc Kleine-Budde <kernel@pengutronix.de>



		/* MCP251XFD_REG_TBC is the time base counter

		 * register. It increments once per SYS clock tick,

		 * which is 20 or 40 MHz.

		 *

		 * Observation shows that if the lowest byte (which is

		 * transferred first on the SPI bus) of that register

		 * is 0x00 or 0x80 the calculated CRC doesn't always

		 * match the transferred one.

		 *

		 * If the highest bit in the lowest byte is flipped

		 * the transferred CRC matches the calculated one. We

		 * assume for now the CRC calculation in the chip

		 * works on wrong data and the transferred data is

		 * correct.

 Flip highest bit in lowest byte of le32 */

 re-check CRC */

				/* If CRC is now correct, assume

				 * transferred data was OK, flip bit

				 * back to original value.

		/* MCP251XFD_REG_OSC is the first ever reg we read from.

		 *

		 * The chip may be in deep sleep and this SPI transfer

		 * (i.e. the assertion of the CS) will wake the chip

		 * up. This takes about 3ms. The CRC of this transfer

		 * is wrong.

		 *

		 * Or there isn't a chip at all, in this case the CRC

		 * will be wrong, too.

		 *

		 * In both cases ignore the CRC and copy the read data

		 * to the caller. It will take care of both cases.

		 *

 CAN FD Controller Module SFR */

 RAM */

 MCP2517/18FD SFR */

 keep data bits aligned */

 SPDX-License-Identifier: GPL-2.0



 mcp251xfd - Microchip MCP251xFD Family CAN controller driver



 Copyright (c) 2019, 2020, 2021 Pengutronix,

               Marc Kleine-Budde <kernel@pengutronix.de>



 Based on:



 CAN bus driver for Microchip 25XXFD CAN Controller with SPI Interface



 Copyright (c) 2019 Martin Sperl <kernel@martin.sperl.org>



 Autodetect model, start with CRC enabled. */

 Wait for oscillator stabilisation time after power up */

 CRC */

 Total length */

 FIFO load */

 actual len is assigned on the fly */

 FIFO request to send */

 SPI message */

 TEF */

 FIFO increment TEF tail pointer */

	/* "cs_change == 1" on the last transfer results in an active

	 * chip select after the complete SPI message. This causes the

	 * controller to interpret the next register access as

	 * data. Set "cs_change" of the last transfer to "0" to

	 * properly deactivate the chip select at the end of the

	 * message.

 TX */

 FIFO request to send */

 RX */

 FIFO increment RX tail pointer */

		/* "cs_change == 1" on the last transfer results in an

		 * active chip select after the complete SPI

		 * message. This causes the controller to interpret

		 * the next register access as data. Set "cs_change"

		 * of the last transfer to "0" to properly deactivate

		 * the chip select at the end of the message.

 listen-only mode works like FD mode */

	/* Set Power On Defaults for "Clock Output Divisor" and remove

	 * "Oscillator Disable" bit.

	/* Note:

	 *

	 * If the controller is in Sleep Mode the following write only

	 * removes the "Oscillator Disable" bit and powers it up. All

	 * other bits are unaffected.

 Wait for "Oscillator Ready" bit */

	/* The Set Mode and SPI Reset command only seems to works if

	 * the controller is not in Sleep Mode.

 spi_write_then_read() works with non DMA-safe buffers */

 check reset defaults of OSC reg */

	/* Activate Low Power Mode on Oscillator Disable. This only

	 * works on the MCP2518FD. The MCP2517FD will go into normal

	 * Sleep Mode instead.

	/* Set Time Base Counter Prescaler to 1.

	 *

	 * This means an overflow of the 32 bit Time Base Counter

	 * register at 40 MHz every 107 seconds.

	/* CAN Control Register

	 *

	 * - no transmit bandwidth sharing

	 * - config mode

	 * - disable transmit queue

	 * - store in transmit FIFO event

	 * - transition to restricted operation mode on system error

	 * - ESI is transmitted recessive when ESI of message is high or

	 *   CAN controller error passive

	 * - restricted retransmission attempts,

	 *   use TQXCON_TXAT and FIFOCON_TXAT

	 * - wake-up filter bits T11FILTER

	 * - use CAN bus line filter for wakeup

	 * - protocol exception is treated as a form error

	 * - Do not compare data bytes

 Nominal Bit Time */

 Data Bit Time */

 Transmitter Delay Compensation */

	/* Configure GPIOs:

	 * - PIN0: GPIO Input

	 * - PIN1: GPIO Input/RX Interrupt

	 *

	 * PIN1 must be Input, otherwise there is a glitch on the

	 * rx-INT line. It happens between setting the PIN as output

	 * (in the first byte of the SPI transfer) and configuring the

	 * PIN as interrupt (in the last byte of the SPI transfer).

	/* Configure GPIOs:

	 * - PIN0: GPIO Input

	 * - PIN1: GPIO Input

	/* Enable RXOVIE on _all_ RX FIFOs, not just the last one.

	 *

	 * FIFOs hit by a RX MAB overflow and RXOVIE enabled will

	 * generate a RXOVIF, use this to properly detect RX MAB

	 * overflows.

 TEF */

 FIFO 1 - TX */

 RX FIFOs */

 Avoid waking up the controller if the interface is down */

	/* The controller is powered down during Bus Off, use saved

	 * bec values.

 The Sequence Number in the TEF doesn't match our tef_tail. */

	/* Use the MCP2517FD mask on the MCP2518FD, too. We only

	 * compare 7 bits, this should be enough to detect

	 * net-yet-completed, i.e. old TEF objects.

	/* chip_tx_tail, is the next TX-Object send by the HW.

	 * The new TEF head must be >= the old head, ...

 ... but it cannot exceed the TX head. */

		/* -EAGAIN means the Sequence Number in the TEF

		 * doesn't match our tef_tail. This can happen if we

		 * read the TEF objects too early. Leave loop let the

		 * interrupt handler call us again.

 number of handled goods TEFs */

		/* Increment the TEF FIFO tail pointer 'len' times in

		 * a single SPI message.

		 *

		 * Note:

		 * Calculate offset, so that the SPI transfer ends on

		 * the last message of the uinc_xfer array, which has

		 * "cs_change == 0", to properly deactivate the chip

		 * select.

		/* Make sure that anybody stopping the queue after

		 * this sees the new tx_ring->tail.

	/* chip_rx_head, is the next RX-Object filled by the HW.

	 * The new RX head must be >= the old head.

 CANFD */

		/* Increment the RX FIFO tail pointer 'len' times in a

		 * single SPI message.

		 *

		 * Note:

		 * Calculate offset, so that the SPI transfer ends on

		 * the last message of the uinc_xfer array, which has

		 * "cs_change == 0", to properly deactivate the chip

		 * select.

 If SERRIF is active, there was a RX MAB overflow. */

	/* Write 0s to clear error bits, don't write 1s to non active

	 * bits, as they will be set.

 Controller misconfiguration */

 RX errors */

 TX errors */

	/* The skb allocation might fail, but can_change_state()

	 * handles cf == NULL.

		/* As we're going to switch off the chip now, let's

		 * save the error counters and return them to

		 * userspace, if do_get_berr_counter() is called while

		 * the chip is in Bus Off.

	/* According to MCP2517FD errata DS80000792B 1., during a TX

	 * MAB underflow, the controller will transition to Restricted

	 * Operation Mode or Listen Only Mode (depending on SERR2LOM).

	 *

	 * However this is not always the case. If SERR2LOM is

	 * configured for Restricted Operation Mode (SERR2LOM not set)

	 * the MCP2517FD will sometimes transition to Listen Only Mode

	 * first. When polling this bit we see that it will transition

	 * to Restricted Operation Mode shortly after.

	/* After the application requests Normal mode, the controller

	 * will automatically attempt to retransmit the message that

	 * caused the TX MAB underflow.

	 *

	 * However, if there is an ECC error in the TX-RAM, we first

	 * have to reload the tx-object before requesting Normal

	 * mode. This is done later in mcp251xfd_handle_eccif().

	/* TX MAB underflow

	 *

	 * According to MCP2517FD Errata DS80000792B 1. a TX MAB

	 * underflow is indicated by SERRIF and MODIF.

	 *

	 * In addition to the effects mentioned in the Errata, there

	 * are Bus Errors due to the aborted CAN frame, so a IVMIF

	 * will be seen as well.

	 *

	 * Sometimes there is an ECC error in the TX-RAM, which leads

	 * to a TX MAB underflow.

	 *

	 * However, probably due to a race condition, there is no

	 * associated MODIF pending.

	 *

	 * Further, there are situations, where the SERRIF is caused

	 * by an ECC error in the TX-RAM, but not even the ECCIF is

	 * set. This only seems to happen _after_ the first occurrence

	 * of a ECCIF (which is tracked in ecc->cnt).

	 *

	 * Treat all as a known system errors..

	/* RX MAB overflow

	 *

	 * According to MCP2517FD Errata DS80000792B 1. a RX MAB

	 * overflow is indicated by SERRIF.

	 *

	 * In addition to the effects mentioned in the Errata, (most

	 * of the times) a RXOVIF is raised, if the FIFO that is being

	 * received into has the RXOVIE activated (and we have enabled

	 * RXOVIE on all FIFOs).

	 *

	 * Sometimes there is no RXOVIF just a RXIF is pending.

	 *

	 * Treat all as a known system errors..

	/* Bail out if one of the following is met:

	 * - tx_tail information is inconsistent

	 * - for mcp2517fd: offset not 0

	 * - for mcp2518fd: offset not 0 or 1

 reload tx_obj into controller RAM ... */

 ... and trigger retransmit */

 Check if ECC error occurred in TX-RAM */

	/* Errata Reference:

	 * mcp2517fd: DS80000789B, mcp2518fd: DS80000792C 2.

	 *

	 * ECC single error correction does not work in all cases:

	 *

	 * Fix/Work Around:

	 * Enable single error correction and double error detection

	 * interrupts by setting SECIE and DEDIE. Handle SECIF as a

	 * detection interrupt and do not rely on the error

	 * correction. Instead, handle both interrupts as a

	 * notification that the RAM word at ERRADDR was corrupted.

 Re-occurring error? */

		/* Some interrupts must be ACKed in the

		 * MCP251XFD_REG_INT register.

		 * - First ACK then handle, to avoid lost-IRQ race

		 *   condition on fast re-occurring interrupts.

		 * - Write "0" to clear active IRQs, "1" to all other,

		 *   to avoid r/m/w race condition on the

		 *   MCP251XFD_REG_INT register.

		/* On the MCP2527FD and MCP2518FD, we don't get a

		 * CERRIF IRQ on the transition TX ERROR_WARNING -> TX

		 * ERROR_ACTIVE.

			/* In Bus Off we completely shut down the

			 * controller. Every subsequent register read

			 * will read bogus data, and if

			 * MCP251XFD_QUIRK_CRC_REG is enabled the CRC

			 * check will fail, too. So leave IRQ handler

			 * directly.

	/* Use the MCP2518FD mask even on the MCP2517FD. It doesn't

	 * harm, only the lower 7 bits will be transferred into the

	 * TEF object.

 CANFD */

 Copy data */

 Clear unused data at end of CAN frame */

 Number of bytes to be written into the RAM of the controller */

 CRC */

 Total length */

 Memory barrier before checking tx_free (head and tail) */

 Stop queue if we occupy the complete TX FIFO */

	/* The OSC_LPMEN is only supported on MCP2518FD, so use it to

	 * autodetect the model.

 We need to preserve the Half Duplex Quirk. */

 Re-init regmap with quirks of detected model. */

	/* Check if RX_INT is properly working. The RX_INT should not

	 * be active after a softreset.

	/* Put controller into sleep mode and let pm_runtime_put()

	 * disable the clocks and vdd. If CONFIG_PM is not enabled,

	 * the clocks and vdd will stay powered.

 sentinel */

 sentinel */

 Sanity check */

	/* Errata Reference:

	 * mcp2517fd: DS80000792C 5., mcp2518fd: DS80000789C 4.

	 *

	 * The SPI can write corrupted data to the RAM at fast SPI

	 * speeds:

	 *

	 * Simultaneous activity on the CAN bus while writing data to

	 * RAM via the SPI interface, with high SCK frequency, can

	 * lead to corrupted data being written to RAM.

	 *

	 * Fix/Work Around:

	 * Ensure that FSCK is less than or equal to 0.85 *

	 * (FSYSCLK/2).

	 *

	 * Known good combinations are:

	 *

	 * MCP	ext-clk	SoC			SPI			SPI-clk		max-clk	parent-clk	config

	 *

	 * 2518	20 MHz	allwinner,sun8i-h3	allwinner,sun8i-h3-spi	 8333333 Hz	 83.33%	600000000 Hz	assigned-clocks = <&ccu CLK_SPIx>

	 * 2518	40 MHz	allwinner,sun8i-h3	allwinner,sun8i-h3-spi	16666667 Hz	 83.33%	600000000 Hz	assigned-clocks = <&ccu CLK_SPIx>

	 * 2517	40 MHz	atmel,sama5d27		atmel,at91rm9200-spi	16400000 Hz	 82.00%	 82000000 Hz	default

	 * 2518	40 MHz	atmel,sama5d27		atmel,at91rm9200-spi	16400000 Hz	 82.00%	 82000000 Hz	default

	 * 2518	40 MHz	fsl,imx6dl		fsl,imx51-ecspi		15000000 Hz	 75.00%	 30000000 Hz	default

	 * 2517	20 MHz	fsl,imx8mm		fsl,imx51-ecspi		 8333333 Hz	 83.33%	 16666667 Hz	assigned-clocks = <&clk IMX8MM_CLK_ECSPIx_ROOT>

	 *

 SPDX-License-Identifier: GPL-2.0



 mcp251xfd - Microchip MCP251xFD Family CAN controller driver



 Copyright (c) 2020 Pengutronix,

                    Marc Kleine-Budde <kernel@pengutronix.de>



 Based on:



 CAN bus driver for Microchip 25XXFD CAN Controller with SPI Interface



 Copyright (c) 2019 Martin Sperl <kernel@martin.sperl.org>



/* The standard crc16 in linux/crc16.h is unfortunately not computing

 * the correct results (left shift vs. right shift). So here an

 * implementation with a table generated with the help of:

 *

 * http://lkml.iu.edu/hypermail/linux/kernel/0508.1/1085.html

 SPDX-License-Identifier: GPL-2.0-only

/*

 * CAN bus driver for the Freescale MPC5xxx embedded CPU.

 *

 * Copyright (C) 2004-2005 Andrey Volkov <avolkov@varma-el.com>,

 *                         Varma Electronics Oy

 * Copyright (C) 2008-2009 Wolfgang Grandegger <wg@grandegger.com>

 * Copyright (C) 2009 Wolfram Sang, Pengutronix <kernel@pengutronix.de>

	/*

	 * Either the oscillator clock (SYS_XTAL_IN) or the IP bus clock

	 * (IP_CLK) can be selected as MSCAN clock source. According to

	 * the MPC5200 user's manual, the oscillator clock is the better

	 * choice as it has less jitter. For this reason, it is selected

	 * by default. Unfortunately, it can not be selected for the old

	 * MPC5200 Rev. A chips due to a hardware bug (check errata).

 Determine SYS_XTAL_IN frequency from the clock domain settings */

 !CONFIG_PPC_MPC52xx */

 CONFIG_PPC_MPC52xx */

	/* the caller passed in the clock source spec that was read from

	 * the device tree, get the optional clock divider as well

	/* when clock-source is 'ip', the CANCTL1[CLKSRC] bit needs to

	 * get set, and the 'ips' clock is the input to the MSCAN

	 * component

	 *

	 * for clock-source values of 'ref' or 'sys' the CANCTL1[CLKSRC]

	 * bit needs to get cleared, an optional clock-divider may have

	 * been specified (the default value is 1), the appropriate

	 * MSCAN related MCLK is the input to the MSCAN component

	 *

	 * in the absence of a clock-source spec, first an optimal clock

	 * gets determined based on the 'sys' clock, if that fails the

	 * 'ref' clock is used

 interpret the device tree's spec for the clock source */

		/* no spec so far, try the 'sys' clock; round to the

		 * next MHz and see if we can get a multiple of 16MHz

 no spec so far, use the 'ref' clock */

	/* select IPS or MCLK as the MSCAN input (returned to the caller),

	 * setup the MCLK mux source and rate if applicable, apply the

	 * optionally specified or derived above divider, and determine

	 * the actual resulting clock rate to return to the caller

	/* the above clk_can item is used for the bitrate, access to

	 * the peripheral's register set needs the clk_ipg item

 return the determined clock source rate */

 clock source rate could not get determined */

 clock source rate could not get determined */

 clock source rate could not get determined */

 !CONFIG_PPC_MPC512x */

 CONFIG_PPC_MPC512x */

 restore masks, buffers etc. */

 .put_clock not applicable */

 Note that only MPC5121 Rev. 2 (and later) is supported */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * CAN bus driver for the alone generic (as possible as) MSCAN controller.

 *

 * Copyright (C) 2005-2006 Andrey Volkov <avolkov@varma-el.com>,

 *                         Varma Electronics Oy

 * Copyright (C) 2008-2009 Wolfgang Grandegger <wg@grandegger.com>

 * Copyright (C) 2008-2009 Pengutronix <kernel@pengutronix.de>

 Abort transfers before going to sleep */#

 Suppress TX done interrupts */

			/*

			 * The mscan controller will fail to enter sleep mode,

			 * while there are irregular activities on bus, like

			 * somebody keeps retransmitting. This behavior is

			 * undocumented and seems to differ between mscan built

			 * in mpc5200b and mpc5200. We proceed in that case,

			 * since otherwise the slprq will be kept set and the

			 * controller will get stuck. NOTE: INITRQ or CSWAI

			 * will abort all active transmit actions, if still

			 * any, at once.

 Clear pending bus-off condition */

 Enable receive interrupts. */

 Re-enable receive interrupts. */

		/*

		 * if buf_id < 3, then current frame will be send out of order,

		 * since buffer with lower id have higher priority (hell..)

 RTR is always the lowest bit of interest, then IDs follow */

 EFF_FLAGS are between the IDs :( */

 write remaining byte if necessary */

 Start transmission. */

 Enable interrupt. */

 read remaining byte if necessary */

			/*

			 * The MSCAN on the MPC5200 does recover from bus-off

			 * automatically. To avoid that we stop the chip doing

			 * a light-weight stop (we are in irq-context).

 common open */

 bus-off recovery upon request */

 acceptance mask/acceptance code (accept everything) */

 Two 32 bit Acceptance Filters */

 we support local echo */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (C) 2017 Netronome Systems, Inc.

 * Copyright (C) 2019 Mellanox Technologies. All rights reserved

 Prevent to use nsim_bus_dev before initialization. */

 Prevent to use nsim_bus_dev before initialization. */

 Prevent to use resource before initialization. */

 Allow using nsim_bus_dev */

 Prevent to use resource before initialization. */

 Disallow using nsim_bus_dev */

 Disallow using nsim_bus_dev */

 Allow using resources */

 Disallow using resources */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2020 Facebook Inc.

	/* Note: it's not normal to allocate the info struct like this!

	 * Drivers are expected to use a static const one, here we're testing.

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2018 Oracle and/or its affiliates. All rights reserved. */

	/* the buffer needed is

	 * (num SAs * 3 lines each * ~60 bytes per line) + one more line

 search sa table */

 160 accounts for 16 byte key and 4 byte salt */

 find the first unused index */

 get the key and salt */

 the preparations worked, so save the info */

	/* the XFRM stack doesn't like offload_handle == 0,

	 * so add a bitflag in case our array index is 0

 do we even need to check this packet? */

/*

 * Copyright (C) 2017 Netronome Systems, Inc.

 *

 * This software is licensed under the GNU General License Version 2,

 * June 1991 as shown in the file COPYING in the top-level directory of this

 * source tree.

 *

 * THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"

 * WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,

 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS

 * FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE

 * OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME

 * THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

 Note: progs without skip_sw will probably not be dev bound */

 Don't remove if oldprog doesn't match driver's state */

 Program id is not populated yet when we create the state. */

/*

 * Copyright (c) 2018 Cumulus Networks. All rights reserved.

 * Copyright (c) 2018 David Ahern <dsa@cumulusnetworks.com>

 *

 * This software is licensed under the GNU General License Version 2,

 * June 1991 as shown in the file COPYING in the top-level directory of this

 * source tree.

 *

 * THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"

 * WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,

 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS

 * FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE

 * OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME

 * THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

 Protects FIB HT and list */

 Protects fib event queue list */

 Protects NH HT */

 Member of fib_rt_list */

 Member of nh_list */

 node in fib queue */

 Simulate hardware programming latency. */

	/* Drop the accounting that was increased from the notification

	 * context when FIB_EVENT_ENTRY_REPLACE was triggered.

	/* We are replacing a route, so need to remove the accounting which

	 * was increased when FIB_EVENT_ENTRY_REPLACE was triggered.

		/* For testing purposes, user set debugfs fail_route_offload

		 * value to true. Simulate hardware programming latency and then

		 * fail.

	/* We consider a multipath IPv6 route as one entry, but it can be made

	 * up from several fib6_info structs (one for each nexthop), so we

	 * add them all to the same list under the entry.

		/* For testing purposes, user set debugfs fail_route_offload

		 * value to true. Simulate hardware programming latency and then

		 * fail.

	/* Drop the accounting that was increased from the notification

	 * context when FIB_EVENT_ENTRY_REPLACE was triggered.

	/* We are replacing a route, so need to remove the accounting which

	 * was increased when FIB_EVENT_ENTRY_REPLACE was triggered.

		/* For testing purposes, user set debugfs fail_route_offload

		 * value to true. Simulate hardware programming latency and then

		 * fail.

	/* Multipath routes are first added to the FIB trie and only then

	 * notified. If we vetoed the addition, we will get a delete

	 * notification for a route we do not have. Therefore, do not warn if

	 * route was not found.

	/* If not all the nexthops are deleted, then only reduce the nexthop

	 * group.

	/* Take reference on fib_info to prevent it from being

	 * freed while event is queued. Release it afterwards.

		/* netdevsim does not support 'RTNL_FAMILY_IP6MR' and

		 * 'RTNL_FAMILY_IPMR' and should ignore them.

 Enqueue the event and trigger the work */

 inconsistent dump, trying again */

 Flush the work to make sure there is no race with notifications. */

	/* The notifier block is still not registered, so we do not need to

	 * take any locks here.

	/* Determine the number of nexthop entries the new nexthop will

	 * occupy.

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2020 Facebook

 We don't support ksettings, so can't pretend */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2019 Mellanox Technologies. All rights reserved */

		/* For testing purposes, user set debugfs fail_recover

		 * value to true. Fail right away.

/*

 * Copyright (c) 2018 Cumulus Networks. All rights reserved.

 * Copyright (c) 2018 David Ahern <dsa@cumulusnetworks.com>

 * Copyright (c) 2019 Mellanox Technologies. All rights reserved.

 *

 * This software is licensed under the GNU General License Version 2,

 * June 1991 as shown in the file COPYING in the top-level directory of this

 * source tree.

 *

 * THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"

 * WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,

 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS

 * FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE

 * OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME

 * THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

 max_vfs limited by the maximum number of provided port indexes */

 Reject if VFs are configured */

 Resources for IPv4 */

 Resources for IPv6 */

 Resources for nexthops */

 Protects trap_items_arr */

/* All driver-specific traps must be documented in

 * Documentation/networking/devlink/netdevsim.rst

		/* Trapped packets are usually passed to devlink in softIRQ,

		 * but in this case they are generated in a workqueue. Disable

		 * softIRQs to prevent lockdep from complaining about

		 * "incosistent lock state".

	/* For each running port and enabled packet trap, generate a UDP

	 * packet with a random 5-tuple and report it.

	/* The lock is used to protect the action state of the registered

	 * traps. The value is written by user and read in delayed work when

	 * iterating over all the traps.

		/* For testing purposes, user set debugfs dont_allow_reload

		 * value to true. So forbid it.

		/* For testing purposes, user set debugfs fail_reload

		 * value to true. Fail right away.

 Mbps */

#define NSIM_LINK_SPEED_UNIT    125000 /* 1 Mbps given in bytes/sec to avoid

					* u64 overflow during conversion from

					* bytes to bits.

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2021 Mellanox Technologies. All rights reserved */

 Populate sampling parameters with sane defaults. */

/*

 * Copyright (C) 2017 Netronome Systems, Inc.

 *

 * This software is licensed under the GNU General License Version 2,

 * June 1991 as shown in the file COPYING in the top-level directory of this

 * source tree.

 *

 * THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"

 * WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,

 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS

 * FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE

 * OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME

 * THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

 Only refuse multicast addresses, zero address can mean unset/any. */

 SPDX-License-Identifier: GPL-2.0+

/*	FDDI network adapter driver for DEC FDDIcontroller 700/700-C devices.

 *

 *	Copyright (c) 2018  Maciej W. Rozycki

 *

 *	This program is free software; you can redistribute it and/or

 *	modify it under the terms of the GNU General Public License

 *	as published by the Free Software Foundation; either version

 *	2 of the License, or (at your option) any later version.

 *

 *	References:

 *

 *	Dave Sawyer & Phil Weeks & Frank Itkowsky,

 *	"DEC FDDIcontroller 700 Port Specification",

 *	Revision 1.1, Digital Equipment Corporation

 ------------------------------------------------------------------------- */

 FZA configurable parameters.                                              */

 The number of transmit ring descriptors; either 0 for 512 or 1 for 1024.  */

 The number of receive ring descriptors; from 2 up to 256.  */

 End of FZA configurable parameters.  No need to change anything below.    */

 ------------------------------------------------------------------------- */

 Ring Purger Multicast */

 Directed Beacon Multicast */

/* Shorthands for MMIO accesses that we require to be strongly ordered

 * WRT preceding MMIO accesses.

/* Shorthands for MMIO accesses that we are happy with being weakly ordered

 * WRT preceding MMIO accesses.

 Reset the board. */

 Synchronize. */

 Read it back for a small delay. */

 Enable all interrupt events we handle. */

 Synchronize. */

 Disable the driver mode. */

 And reset the board. */

 Synchronize. */

 Synchronize. */

	/* DEC says RESET needs up to 30 seconds to complete.  My DEFZA-AA

	 * rev. C03 happily finishes in 9.7 seconds. :-)  But we need to

	 * be on the safe side...

 Synchronize. */

 Convert to milliseconds due to buggy firmware. */

 Trigger the command. */

		/* This should never happen in the uninitialized state,

		 * so do not try to recover and just consider it fatal.

 INIT may take quite a long time (160ms for my C03). */

 Fill the host receive descriptor ring. */

 First descriptor is relinquished last. */

 First descriptor carries frame length; we don't use cut-through. */

		/* Length must be a multiple of 4 as only word writes are

		 * permitted!

 Mark last frag. */

 Settings for intermediate frags. */

 Go, go, go! */

 Length must be a multiple of 4 as only word writes are permitted! */

 Grab it! */

 Only process the first descriptor. */

 Omit PRH. */

 Check special status codes. */

 Halt the interface to trigger a reset. */

 Synchronize. */

 Check the MAC status. */

 Halt the interface to trigger a reset. */

 Synchronize. */

 Packet received successfully; validate the length. */

		/* The RMC doesn't count the preamble and the starting

		 * delimiter.  We fix it up here for a total of 3 octets.

 We need to get at real FC. */

 We have to 512-byte-align RX buffers... */

 Omit P, SD and FCS. */

 Queue SMT frames to the SMT receive ring. */

 Skip over P and SD. */

 And cut off FCS. */

				/* Length must be a multiple of 4 as only word

				 * reads are permitted!

 Drop. */

 Skip over PRH. */

 Queue the frame to the RMC transmit ring. */

 Clean up the SMT TX ring. */

 Clean up the RMC TX ring. */

 Done. */

 Get interrupt events. */

 Clear the events. */

 Now handle the events.  The order matters. */

 Command finished interrupt. */

 Transmit finished interrupt. */

 Host receive interrupt. */

 SMT transmit interrupt. */

 Transmit ring flush request. */

 Link status change interrupt. */

 Unsolicited event interrupt. */

 State change interrupt. */

 Assert the board reset. */

 Synchronize. */

 Clear the board reset. */

 Enable all interrupt events we handle. */

 Synchronize. */

 Make room for PRH. */

 Decode FC to set PRH. */

 Token. */

 SMT or MAC. */

	/* SMT transmit interrupts may sneak frames into the RMC

	 * transmit ring.  We disable them while queueing a frame

	 * to maintain consistency.

 Synchronize. */

		/* Probably an SMT packet filled the remaining space,

		 * so just stop the queue, but don't report it as an error.

 We have to 512-byte-align RX buffers... */

 Purger and Beacon multicasts need to be supplied before PARAM. */

 Shut the interface down. */

 Synchronize. */

 DEC says SHUT needs up to 10 seconds to complete. */

 Request the I/O MEM resource. */

 MMIO mapping setup. */

 Initialize the new device structure. */

 Sanitize the board. */

 Enable the driver mode. */

	/* For some reason transmit done interrupts can trigger during

	 * reset.  This avoids a division error in the handler.

 TC systems are always LE, so don't bother swapping. */

 Don't bother swapping, see above. */

	/* Now that we fetched initial parameters just shut the interface

	 * until opened.

 The FZA-specific entries in the device structure. */

/*

 * File Name:

 *   defxx.c

 *

 * Copyright Information:

 *   Copyright Digital Equipment Corporation 1996.

 *

 *   This software may be used and distributed according to the terms of

 *   the GNU General Public License, incorporated herein by reference.

 *

 * Abstract:

 *   A Linux device driver supporting the Digital Equipment Corporation

 *   FDDI TURBOchannel, EISA and PCI controller families.  Supported

 *   adapters include:

 *

 *		DEC FDDIcontroller/TURBOchannel (DEFTA)

 *		DEC FDDIcontroller/EISA         (DEFEA)

 *		DEC FDDIcontroller/PCI          (DEFPA)

 *

 * The original author:

 *   LVS	Lawrence V. Stefani <lstefani@yahoo.com>

 *

 * Maintainers:

 *   macro	Maciej W. Rozycki <macro@orcam.me.uk>

 *

 * Credits:

 *   I'd like to thank Patricia Cross for helping me get started with

 *   Linux, David Davies for a lot of help upgrading and configuring

 *   my development system and for answering many OS and driver

 *   development questions, and Alan Cox for recommendations and

 *   integration help on getting FDDI support into Linux.  LVS

 *

 * Driver Architecture:

 *   The driver architecture is largely based on previous driver work

 *   for other operating systems.  The upper edge interface and

 *   functions were largely taken from existing Linux device drivers

 *   such as David Davies' DE4X5.C driver and Donald Becker's TULIP.C

 *   driver.

 *

 *   Adapter Probe -

 *		The driver scans for supported EISA adapters by reading the

 *		SLOT ID register for each EISA slot and making a match

 *		against the expected value.

 *

 *   Bus-Specific Initialization -

 *		This driver currently supports both EISA and PCI controller

 *		families.  While the custom DMA chip and FDDI logic is similar

 *		or identical, the bus logic is very different.  After

 *		initialization, the	only bus-specific differences is in how the

 *		driver enables and disables interrupts.  Other than that, the

 *		run-time critical code behaves the same on both families.

 *		It's important to note that both adapter families are configured

 *		to I/O map, rather than memory map, the adapter registers.

 *

 *   Driver Open/Close -

 *		In the driver open routine, the driver ISR (interrupt service

 *		routine) is registered and the adapter is brought to an

 *		operational state.  In the driver close routine, the opposite

 *		occurs; the driver ISR is deregistered and the adapter is

 *		brought to a safe, but closed state.  Users may use consecutive

 *		commands to bring the adapter up and down as in the following

 *		example:

 *					ifconfig fddi0 up

 *					ifconfig fddi0 down

 *					ifconfig fddi0 up

 *

 *   Driver Shutdown -

 *		Apparently, there is no shutdown or halt routine support under

 *		Linux.  This routine would be called during "reboot" or

 *		"shutdown" to allow the driver to place the adapter in a safe

 *		state before a warm reboot occurs.  To be really safe, the user

 *		should close the adapter before shutdown (eg. ifconfig fddi0 down)

 *		to ensure that the adapter DMA engine is taken off-line.  However,

 *		the current driver code anticipates this problem and always issues

 *		a soft reset of the adapter	at the beginning of driver initialization.

 *		A future driver enhancement in this area may occur in 2.1.X where

 *		Alan indicated that a shutdown handler may be implemented.

 *

 *   Interrupt Service Routine -

 *		The driver supports shared interrupts, so the ISR is registered for

 *		each board with the appropriate flag and the pointer to that board's

 *		device structure.  This provides the context during interrupt

 *		processing to support shared interrupts and multiple boards.

 *

 *		Interrupt enabling/disabling can occur at many levels.  At the host

 *		end, you can disable system interrupts, or disable interrupts at the

 *		PIC (on Intel systems).  Across the bus, both EISA and PCI adapters

 *		have a bus-logic chip interrupt enable/disable as well as a DMA

 *		controller interrupt enable/disable.

 *

 *		The driver currently enables and disables adapter interrupts at the

 *		bus-logic chip and assumes that Linux will take care of clearing or

 *		acknowledging any host-based interrupt chips.

 *

 *   Control Functions -

 *		Control functions are those used to support functions such as adding

 *		or deleting multicast addresses, enabling or disabling packet

 *		reception filters, or other custom/proprietary commands.  Presently,

 *		the driver supports the "get statistics", "set multicast list", and

 *		"set mac address" functions defined by Linux.  A list of possible

 *		enhancements include:

 *

 *				- Custom ioctl interface for executing port interface commands

 *				- Custom ioctl interface for adding unicast addresses to

 *				  adapter CAM (to support bridge functions).

 *				- Custom ioctl interface for supporting firmware upgrades.

 *

 *   Hardware (port interface) Support Routines -

 *		The driver function names that start with "dfx_hw_" represent

 *		low-level port interface routines that are called frequently.  They

 *		include issuing a DMA or port control command to the adapter,

 *		resetting the adapter, or reading the adapter state.  Since the

 *		driver initialization and run-time code must make calls into the

 *		port interface, these routines were written to be as generic and

 *		usable as possible.

 *

 *   Receive Path -

 *		The adapter DMA engine supports a 256 entry receive descriptor block

 *		of which up to 255 entries can be used at any given time.  The

 *		architecture is a standard producer, consumer, completion model in

 *		which the driver "produces" receive buffers to the adapter, the

 *		adapter "consumes" the receive buffers by DMAing incoming packet data,

 *		and the driver "completes" the receive buffers by servicing the

 *		incoming packet, then "produces" a new buffer and starts the cycle

 *		again.  Receive buffers can be fragmented in up to 16 fragments

 *		(descriptor	entries).  For simplicity, this driver posts

 *		single-fragment receive buffers of 4608 bytes, then allocates a

 *		sk_buff, copies the data, then reposts the buffer.  To reduce CPU

 *		utilization, a better approach would be to pass up the receive

 *		buffer (no extra copy) then allocate and post a replacement buffer.

 *		This is a performance enhancement that should be looked into at

 *		some point.

 *

 *   Transmit Path -

 *		Like the receive path, the adapter DMA engine supports a 256 entry

 *		transmit descriptor block of which up to 255 entries can be used at

 *		any	given time.  Transmit buffers can be fragmented	in up to 255

 *		fragments (descriptor entries).  This driver always posts one

 *		fragment per transmit packet request.

 *

 *		The fragment contains the entire packet from FC to end of data.

 *		Before posting the buffer to the adapter, the driver sets a three-byte

 *		packet request header (PRH) which is required by the Motorola MAC chip

 *		used on the adapters.  The PRH tells the MAC the type of token to

 *		receive/send, whether or not to generate and append the CRC, whether

 *		synchronous or asynchronous framing is used, etc.  Since the PRH

 *		definition is not necessarily consistent across all FDDI chipsets,

 *		the driver, rather than the common FDDI packet handler routines,

 *		sets these bytes.

 *

 *		To reduce the amount of descriptor fetches needed per transmit request,

 *		the driver takes advantage of the fact that there are at least three

 *		bytes available before the skb->data field on the outgoing transmit

 *		request.  This is guaranteed by having fddi_setup() in net_init.c set

 *		dev->hard_header_len to 24 bytes.  21 bytes accounts for the largest

 *		header in an 802.2 SNAP frame.  The other 3 bytes are the extra "pad"

 *		bytes which we'll use to store the PRH.

 *

 *		There's a subtle advantage to adding these pad bytes to the

 *		hard_header_len, it ensures that the data portion of the packet for

 *		an 802.2 SNAP frame is longword aligned.  Other FDDI driver

 *		implementations may not need the extra padding and can start copying

 *		or DMAing directly from the FC byte which starts at skb->data.  Should

 *		another driver implementation need ADDITIONAL padding, the net_init.c

 *		module should be updated and dev->hard_header_len should be increased.

 *		NOTE: To maintain the alignment on the data portion of the packet,

 *		dev->hard_header_len should always be evenly divisible by 4 and at

 *		least 24 bytes in size.

 *

 * Modification History:

 *		Date		Name	Description

 *		16-Aug-96	LVS		Created.

 *		20-Aug-96	LVS		Updated dfx_probe so that version information

 *							string is only displayed if 1 or more cards are

 *							found.  Changed dfx_rcv_queue_process to copy

 *							3 NULL bytes before FC to ensure that data is

 *							longword aligned in receive buffer.

 *		09-Sep-96	LVS		Updated dfx_ctl_set_multicast_list to enable

 *							LLC group promiscuous mode if multicast list

 *							is too large.  LLC individual/group promiscuous

 *							mode is now disabled if IFF_PROMISC flag not set.

 *							dfx_xmt_queue_pkt no longer checks for NULL skb

 *							on Alan Cox recommendation.  Added node address

 *							override support.

 *		12-Sep-96	LVS		Reset current address to factory address during

 *							device open.  Updated transmit path to post a

 *							single fragment which includes PRH->end of data.

 *		Mar 2000	AC		Did various cleanups for 2.3.x

 *		Jun 2000	jgarzik		PCI and resource alloc cleanups

 *		Jul 2000	tjeerd		Much cleanup and some bug fixes

 *		Sep 2000	tjeerd		Fix leak on unload, cosmetic code cleanup

 *		Feb 2001			Skb allocation fixes

 *		Feb 2001	davej		PCI enable cleanups.

 *		04 Aug 2003	macro		Converted to the DMA API.

 *		14 Aug 2004	macro		Fix device names reported.

 *		14 Jun 2005	macro		Use irqreturn_t.

 *		23 Oct 2006	macro		Big-endian host support.

 *		14 Dec 2006	macro		TURBOchannel support.

 *		01 Jul 2014	macro		Fixes for DMA on 64-bit hosts.

 *		10 Mar 2021	macro		Dynamic MMIO vs port I/O.

 Include files */

 Version information string should be updated prior to each new release!  */

/*

 * NEW_SKB_SIZE = PI_RCV_DATA_K_SIZE_MAX+128 to allow 128 byte

 * alignment for compatibility with old EISA boards.

 Define module-wide (static) routines */

 Define module-wide (static) variables */

/*

 * =======================

 * = dfx_port_write_long =

 * = dfx_port_read_long  =

 * =======================

 *

 * Overview:

 *   Routines for reading and writing values from/to adapter

 *

 * Returns:

 *   None

 *

 * Arguments:

 *   bp		- pointer to board information

 *   offset	- register offset from base I/O address

 *   data	- for dfx_port_write_long, this is a value to write;

 *		  for dfx_port_read_long, this is a pointer to store

 *		  the read value

 *

 * Functional Description:

 *   These routines perform the correct operation to read or write

 *   the adapter register.

 *

 *   EISA port block base addresses are based on the slot number in which the

 *   controller is installed.  For example, if the EISA controller is installed

 *   in slot 4, the port block base address is 0x4000.  If the controller is

 *   installed in slot 2, the port block base address is 0x2000, and so on.

 *   This port block can be used to access PDQ, ESIC, and DEFEA on-board

 *   registers using the register offsets defined in DEFXX.H.

 *

 *   PCI port block base addresses are assigned by the PCI BIOS or system

 *   firmware.  There is one 128 byte port block which can be accessed.  It

 *   allows for I/O mapping of both PDQ and PFI registers using the register

 *   offsets defined in DEFXX.H.

 *

 * Return Codes:

 *   None

 *

 * Assumptions:

 *   bp->base is a valid base I/O address for this adapter.

 *   offset is a valid register offset for this adapter.

 *

 * Side Effects:

 *   Rather than produce macros for these functions, these routines

 *   are defined using "inline" to ensure that the compiler will

 *   generate inline code and not waste a procedure call and return.

 *   This provides all the benefits of macros, but with the

 *   advantage of strict data type checking.

/*

 * ================

 * = dfx_get_bars =

 * ================

 *

 * Overview:

 *   Retrieves the address ranges used to access control and status

 *   registers.

 *

 * Returns:

 *   None

 *

 * Arguments:

 *   bp		- pointer to board information

 *   bar_start	- pointer to store the start addresses

 *   bar_len	- pointer to store the lengths of the areas

 *

 * Assumptions:

 *   I am sure there are some.

 *

 * Side Effects:

 *   None

/*

 * ================

 * = dfx_register =

 * ================

 *

 * Overview:

 *   Initializes a supported FDDI controller

 *

 * Returns:

 *   Condition code

 *

 * Arguments:

 *   bdev - pointer to device information

 *

 * Functional Description:

 *

 * Return Codes:

 *   0		 - This device (fddi0, fddi1, etc) configured successfully

 *   -EBUSY      - Failed to get resources, or dfx_driver_init failed.

 *

 * Assumptions:

 *   It compiles so it should work :-( (PCI cards do :-)

 *

 * Side Effects:

 *   Device structures for FDDI adapters (fddi0, fddi1, etc) are

 *   initialized and the board resources are read and stored in

 *   the device structure.

 board pointer */

 pointers to ports */

 resource length */

 total buffer size used */

 display version info if adapter is found */

 set display flag to TRUE so that */

 we only display this string ONCE */

 Enable PCI device. */

 Set up I/O base address. */

 Initialize new device structure */

/*

 * ================

 * = dfx_bus_init =

 * ================

 *

 * Overview:

 *   Initializes the bus-specific controller logic.

 *

 * Returns:

 *   None

 *

 * Arguments:

 *   dev - pointer to device information

 *

 * Functional Description:

 *   Determine and save adapter IRQ in device table,

 *   then perform bus-specific logic initialization.

 *

 * Return Codes:

 *   None

 *

 * Assumptions:

 *   bp->base has already been set with the proper

 *	 base I/O address for this device.

 *

 * Side Effects:

 *   Interrupts are enabled at the adapter bus-specific logic.

 *   Note:  Interrupts at the DMA engine (PDQ chip) are not

 *   enabled yet.

 Initialize a pointer back to the net_device struct */

 Initialize adapter based on bus type */

 Disable the board before fiddling with the decoders.  */

 Get the interrupt level from the ESIC chip.  */

		/*

		 * Enable memory decoding (MEMCS1) and/or port decoding

		 * (IOCS1/IOCS0) as appropriate in Function Control

		 * Register.  MEMCS1 or IOCS0 is used for PDQ registers,

		 * taking 16 32-bit words, while IOCS1 is used for the

		 * Burst Holdoff register, taking a single 32-bit word

		 * only.  We use the slot-specific I/O range as per the

		 * ESIC spec, that is set bits 15:12 in the mask registers

		 * to mask them out.

 Set the decode range of the board.  */

 Enable the decoders.  */

		/*

		 * Enable access to the rest of the module

		 * (including PDQ and packet memory).

		/*

		 * Map PDQ registers into memory or port space.  This is

		 * done with a bit in the Burst Holdoff register.

 Enable interrupts at EISA bus interface chip (ESIC) */

 Get the interrupt level from the PCI Configuration Table */

 Check Latency Timer and set if less than minimal */

 Enable interrupts at PCI bus interface chip (PFI) */

/*

 * ==================

 * = dfx_bus_uninit =

 * ==================

 *

 * Overview:

 *   Uninitializes the bus-specific controller logic.

 *

 * Returns:

 *   None

 *

 * Arguments:

 *   dev - pointer to device information

 *

 * Functional Description:

 *   Perform bus-specific logic uninitialization.

 *

 * Return Codes:

 *   None

 *

 * Assumptions:

 *   bp->base has already been set with the proper

 *	 base I/O address for this device.

 *

 * Side Effects:

 *   Interrupts are disabled at the adapter bus-specific logic.

 Uninitialize adapter based on bus type */

 Disable interrupts at EISA bus interface chip (ESIC) */

 Disable the board.  */

 Disable memory and port decoders.  */

 Disable interrupts at PCI bus interface chip (PFI) */

/*

 * ========================

 * = dfx_bus_config_check =

 * ========================

 *

 * Overview:

 *   Checks the configuration (burst size, full-duplex, etc.)  If any parameters

 *   are illegal, then this routine will set new defaults.

 *

 * Returns:

 *   None

 *

 * Arguments:

 *   bp - pointer to board information

 *

 * Functional Description:

 *   For Revision 1 FDDI EISA, Revision 2 or later FDDI EISA with rev E or later

 *   PDQ, and all FDDI PCI controllers, all values are legal.

 *

 * Return Codes:

 *   None

 *

 * Assumptions:

 *   dfx_adap_init has NOT been called yet so burst size and other items have

 *   not been set.

 *

 * Side Effects:

 *   None

 return code from adapter port control call */

 LW data returned from port control call */

 Configuration check only valid for EISA adapter */

		/*

		 * First check if revision 2 EISA controller.  Rev. 1 cards used

		 * PDQ revision B, so no workaround needed in this case.  Rev. 3

		 * cards used PDQ revision E, so no workaround needed in this

		 * case, either.  Only Rev. 2 cards used either Rev. D or E

		 * chips, so we must verify the chip revision on Rev. 2 cards.

			/*

			 * Revision 2 FDDI EISA controller found,

			 * so let's check PDQ revision of adapter.

				/*

				 * Either we couldn't determine the PDQ revision, or

				 * we determined that it is at revision D.  In either case,

				 * we need to implement the workaround.

 Ensure that the burst size is set to 8 longwords or less */

 Ensure that full-duplex mode is not enabled */

/*

 * ===================

 * = dfx_driver_init =

 * ===================

 *

 * Overview:

 *   Initializes remaining adapter board structure information

 *   and makes sure adapter is in a safe state prior to dfx_open().

 *

 * Returns:

 *   Condition code

 *

 * Arguments:

 *   dev - pointer to device information

 *   print_name - printable device name

 *

 * Functional Description:

 *   This function allocates additional resources such as the host memory

 *   blocks needed by the adapter (eg. descriptor and consumer blocks).

 *	 Remaining bus initialization steps are also completed.  The adapter

 *   is also reset so that it is in the DMA_UNAVAILABLE state.  The OS

 *   must call dfx_open() to open the adapter and bring it on-line.

 *

 * Return Codes:

 *   DFX_K_SUCCESS	- initialization succeeded

 *   DFX_K_FAILURE	- initialization failed - could not allocate memory

 *						or read adapter MAC address

 *

 * Assumptions:

 *   Memory allocated from dma_alloc_coherent() call is physically

 *   contiguous, locked memory.

 *

 * Side Effects:

 *   Adapter is reset and should be in DMA_UNAVAILABLE state before

 *   returning from this routine.

 total buffer size needed */

 virtual addrs into memory block */

 physical addrs into memory block */

 host data register value */

 Initialize bus-specific hardware registers */

	/*

	 * Initialize default values for configurable parameters

	 *

	 * Note: All of these parameters are ones that a user may

	 *       want to customize.  It'd be nice to break these

	 *		 out into Space.c or someplace else that's more

	 *		 accessible/understandable than this file.

 8ms in 80 nanosec units */

	/*

	 * Ensure that HW configuration is OK

	 *

	 * Note: Depending on the hardware revision, we may need to modify

	 *       some of the configurable parameters to workaround hardware

	 *       limitations.  We'll perform this configuration check AFTER

	 *       setting the parameters to their default values.

 Disable PDQ interrupts first */

 Place adapter in DMA_UNAVAILABLE state by resetting adapter */

  Read the factory MAC address from the adapter then save it */

	/*

	 * Set current address to factory address

	 *

	 * Note: Node address override support is handled through

	 *       dfx_ctl_set_mac_address.

	/*

	 * Get memory for descriptor block, consumer block, and other buffers

	 * that need to be DMA read or written to by the adapter.

 get physical address of buffer */

	/*

	 *  To guarantee the 8K alignment required for the descriptor block, 8K - 1

	 *  plus the amount of memory needed was allocated.  The physical address

	 *	is now 8K aligned.  By carving up the memory in a specific order,

	 *  we'll guarantee the alignment requirements for all other structures.

	 *

	 *  Note: If the assumptions change regarding the non-paged, non-cached,

	 *		  physically contiguous nature of the memory block or the address

	 *		  alignments, then we'll need to implement a different algorithm

	 *		  for allocating the needed memory.

 Reserve space for descriptor block */

 Reserve space for command request buffer */

 Reserve space for command response buffer */

 Reserve space for the LLC host receive queue buffers */

 Reserve space for the consumer block */

 Display virtual and physical addresses if debug driver */

/*

 * =================

 * = dfx_adap_init =

 * =================

 *

 * Overview:

 *   Brings the adapter to the link avail/link unavailable state.

 *

 * Returns:

 *   Condition code

 *

 * Arguments:

 *   bp - pointer to board information

 *   get_buffers - non-zero if buffers to be allocated

 *

 * Functional Description:

 *   Issues the low-level firmware/hardware calls necessary to bring

 *   the adapter up, or to properly reset and restore adapter during

 *   run-time.

 *

 * Return Codes:

 *   DFX_K_SUCCESS - Adapter brought up successfully

 *   DFX_K_FAILURE - Adapter initialization failed

 *

 * Assumptions:

 *   bp->reset_type should be set to a valid reset type value before

 *   calling this routine.

 *

 * Side Effects:

 *   Adapter should be in LINK_AVAILABLE or LINK_UNAVAILABLE state

 *   upon a successful return of this routine.

 Disable PDQ interrupts first */

 Place adapter in DMA_UNAVAILABLE state by resetting adapter */

	/*

	 * When the PDQ is reset, some false Type 0 interrupts may be pending,

	 * so we'll acknowledge all Type 0 interrupts now before continuing.

	/*

	 * Clear Type 1 and Type 2 registers before going to DMA_AVAILABLE state

	 *

	 * Note: We only need to clear host copies of these registers.  The PDQ reset

	 *       takes care of the on-board register values.

 Clear consumer block before going to DMA_AVAILABLE state */

 Initialize the DMA Burst Size */

	/*

	 * Set base address of Consumer Block

	 *

	 * Assumption: 32-bit physical address of consumer block is 64 byte

	 *			   aligned.  That is, bits 0-5 of the address must be zero.

	/*

	 * Set the base address of Descriptor Block and bring adapter

	 * to DMA_AVAILABLE state.

	 *

	 * Note: We also set the literal and data swapping requirements

	 *       in this command.

	 *

	 * Assumption: 32-bit physical address of descriptor block

	 *       is 8Kbyte aligned.

 Set transmit flush timeout value */

 3 seconds */

 Set the initial values for eFDXEnable and MACTReq MIB objects */

 Initialize adapter CAM */

 Initialize adapter filters */

	/*

	 * Remove any existing dynamic buffers (i.e. if the adapter is being

	 * reinitialized)

 Initialize receive descriptor block and produce buffers */

 Issue START command and bring adapter to LINK_(UN)AVAILABLE state */

 Initialization succeeded, reenable PDQ interrupts */

/*

 * ============

 * = dfx_open =

 * ============

 *

 * Overview:

 *   Opens the adapter

 *

 * Returns:

 *   Condition code

 *

 * Arguments:

 *   dev - pointer to device information

 *

 * Functional Description:

 *   This function brings the adapter to an operational state.

 *

 * Return Codes:

 *   0		 - Adapter was successfully opened

 *   -EAGAIN - Could not register IRQ or adapter initialization failed

 *

 * Assumptions:

 *   This routine should only be called for a device that was

 *   initialized successfully.

 *

 * Side Effects:

 *   Adapter should be in LINK_AVAILABLE or LINK_UNAVAILABLE state

 *   if the open is successful.

 Register IRQ - support shared interrupts by passing device ptr */

	/*

	 * Set current address to factory MAC address

	 *

	 * Note: We've already done this step in dfx_driver_init.

	 *       However, it's possible that a user has set a node

	 *		 address override, then closed and reopened the

	 *		 adapter.  Unless we reset the device address field

	 *		 now, we'll continue to use the existing modified

	 *		 address.

 Clear local unicast/multicast address tables and counts */

 Disable promiscuous filter settings */

 Reset and initialize adapter */

 skip self-test */

 Set device structure info */

/*

 * =============

 * = dfx_close =

 * =============

 *

 * Overview:

 *   Closes the device/module.

 *

 * Returns:

 *   Condition code

 *

 * Arguments:

 *   dev - pointer to device information

 *

 * Functional Description:

 *   This routine closes the adapter and brings it to a safe state.

 *   The interrupt service routine is deregistered with the OS.

 *   The adapter can be opened again with another call to dfx_open().

 *

 * Return Codes:

 *   Always return 0.

 *

 * Assumptions:

 *   No further requests for this adapter are made after this routine is

 *   called.  dfx_open() can be called to reset and reinitialize the

 *   adapter.

 *

 * Side Effects:

 *   Adapter should be in DMA_UNAVAILABLE state upon completion of this

 *   routine.

 Disable PDQ interrupts first */

 Place adapter in DMA_UNAVAILABLE state by resetting adapter */

	/*

	 * Flush any pending transmit buffers

	 *

	 * Note: It's important that we flush the transmit buffers

	 *		 BEFORE we clear our copy of the Type 2 register.

	 *		 Otherwise, we'll have no idea how many buffers

	 *		 we need to free.

	/*

	 * Clear Type 1 and Type 2 registers after adapter reset

	 *

	 * Note: Even though we're closing the adapter, it's

	 *       possible that an interrupt will occur after

	 *		 dfx_close is called.  Without some assurance to

	 *		 the contrary we want to make sure that we don't

	 *		 process receive and transmit LLC frames and update

	 *		 the Type 2 register with bad information.

 Clear consumer block for the same reason given above */

 Release all dynamically allocate skb in the receive ring. */

 Clear device structure flags */

 Deregister (free) IRQ */

/*

 * ======================

 * = dfx_int_pr_halt_id =

 * ======================

 *

 * Overview:

 *   Displays halt id's in string form.

 *

 * Returns:

 *   None

 *

 * Arguments:

 *   bp - pointer to board information

 *

 * Functional Description:

 *   Determine current halt id and display appropriate string.

 *

 * Return Codes:

 *   None

 *

 * Assumptions:

 *   None

 *

 * Side Effects:

 *   None

 PDQ port status register value */

 PDQ port status halt ID */

 Read the latest port status */

 Display halt state transition information */

/*

 * ==========================

 * = dfx_int_type_0_process =

 * ==========================

 *

 * Overview:

 *   Processes Type 0 interrupts.

 *

 * Returns:

 *   None

 *

 * Arguments:

 *   bp - pointer to board information

 *

 * Functional Description:

 *   Processes all enabled Type 0 interrupts.  If the reason for the interrupt

 *   is a serious fault on the adapter, then an error message is displayed

 *   and the adapter is reset.

 *

 *   One tricky potential timing window is the rapid succession of "link avail"

 *   "link unavail" state change interrupts.  The acknowledgement of the Type 0

 *   interrupt must be done before reading the state from the Port Status

 *   register.  This is true because a state change could occur after reading

 *   the data, but before acknowledging the interrupt.  If this state change

 *   does happen, it would be lost because the driver is using the old state,

 *   and it will never know about the new state because it subsequently

 *   acknowledges the state change interrupt.

 *

 *          INCORRECT                                      CORRECT

 *      read type 0 int reasons                   read type 0 int reasons

 *      read adapter state                        ack type 0 interrupts

 *      ack type 0 interrupts                     read adapter state

 *      ... process interrupt ...                 ... process interrupt ...

 *

 * Return Codes:

 *   None

 *

 * Assumptions:

 *   None

 *

 * Side Effects:

 *   An adapter reset may occur if the adapter has any Type 0 error interrupts

 *   or if the port status indicates that the adapter is halted.  The driver

 *   is responsible for reinitializing the adapter with the current CAM

 *   contents and adapter filter settings.

 Host Interrupt Type 0 register */

 current adap state (from port status) */

	/*

	 * Read host interrupt Type 0 register to determine which Type 0

	 * interrupts are pending.  Immediately write it back out to clear

	 * those interrupts.

 Check for Type 0 error interrupts */

 Check for Non-Existent Memory error */

 Check for Packet Memory Parity error */

 Check for Host Bus Parity error */

 Reset adapter and bring it back on-line */

 link is no longer available */

 rerun on-board diagnostics */

 Check for transmit flush interrupt */

 Flush any pending xmt's and acknowledge the flush interrupt */

 link is no longer available */

 flush any outstanding packets */

 Check for adapter state change */

 Get latest adapter state */

 get adapter state */

			/*

			 * Adapter has transitioned to HALTED state, try to reset

			 * adapter to bring it back on-line.  If reset fails,

			 * leave the adapter in the broken state.

 display halt id as string */

 Reset adapter and bring it back on-line */

 link is no longer available */

 rerun on-board diagnostics */

 set link available flag */

/*

 * ==================

 * = dfx_int_common =

 * ==================

 *

 * Overview:

 *   Interrupt service routine (ISR)

 *

 * Returns:

 *   None

 *

 * Arguments:

 *   bp - pointer to board information

 *

 * Functional Description:

 *   This is the ISR which processes incoming adapter interrupts.

 *

 * Return Codes:

 *   None

 *

 * Assumptions:

 *   This routine assumes PDQ interrupts have not been disabled.

 *   When interrupts are disabled at the PDQ, the Port Status register

 *   is automatically cleared.  This routine uses the Port Status

 *   register value to determine whether a Type 0 interrupt occurred,

 *   so it's important that adapter interrupts are not normally

 *   enabled/disabled at the PDQ.

 *

 *   It's vital that this routine is NOT reentered for the

 *   same board and that the OS is not in another section of

 *   code (eg. dfx_xmt_queue_pkt) for the same board on a

 *   different thread.

 *

 * Side Effects:

 *   Pending interrupts are serviced.  Depending on the type of

 *   interrupt, acknowledging and clearing the interrupt at the

 *   PDQ involves writing a register to clear the interrupt bit

 *   or updating completion indices.

 Port Status register */

 Process xmt interrupts - frequent case, so always call this routine */

 free consumed xmt packets */

 Process rcv interrupts - frequent case, so always call this routine */

 service received LLC frames */

	/*

	 * Transmit and receive producer and completion indices are updated on the

	 * adapter by writing to the Type 2 Producer register.  Since the frequent

	 * case is that we'll be processing either LLC transmit or receive buffers,

	 * we'll optimize I/O writes by doing a single register write here.

 Read PDQ Port Status register to find out which interrupts need processing */

 Process Type 0 interrupts (if any) - infrequent, so only call when needed */

 process Type 0 interrupts */

/*

 * =================

 * = dfx_interrupt =

 * =================

 *

 * Overview:

 *   Interrupt processing routine

 *

 * Returns:

 *   Whether a valid interrupt was seen.

 *

 * Arguments:

 *   irq	- interrupt vector

 *   dev_id	- pointer to device information

 *

 * Functional Description:

 *   This routine calls the interrupt processing routine for this adapter.  It

 *   disables and reenables adapter interrupts, as appropriate.  We can support

 *   shared interrupts since the incoming dev_id pointer provides our device

 *   structure context.

 *

 * Return Codes:

 *   IRQ_HANDLED - an IRQ was handled.

 *   IRQ_NONE    - no IRQ was handled.

 *

 * Assumptions:

 *   The interrupt acknowledgement at the hardware level (eg. ACKing the PIC

 *   on Intel-based systems) is done by the operating system outside this

 *   routine.

 *

 *	 System interrupts are enabled through this call.

 *

 * Side Effects:

 *   Interrupts are disabled, then reenabled at the adapter.

 Service adapter interrupts */

 Disable PDQ-PFI interrupts at PFI */

 Call interrupt service routine for this adapter */

 Clear PDQ interrupt status bit and reenable interrupts */

 Disable interrupts at the ESIC */

 Call interrupt service routine for this adapter */

 Reenable interrupts at the ESIC */

 Call interrupt service routine for this adapter */

/*

 * =====================

 * = dfx_ctl_get_stats =

 * =====================

 *

 * Overview:

 *   Get statistics for FDDI adapter

 *

 * Returns:

 *   Pointer to FDDI statistics structure

 *

 * Arguments:

 *   dev - pointer to device information

 *

 * Functional Description:

 *   Gets current MIB objects from adapter, then

 *   returns FDDI statistics structure as defined

 *   in if_fddi.h.

 *

 *   Note: Since the FDDI statistics structure is

 *   still new and the device structure doesn't

 *   have an FDDI-specific get statistics handler,

 *   we'll return the FDDI statistics structure as

 *   a pointer to an Ethernet statistics structure.

 *   That way, at least the first part of the statistics

 *   structure can be decoded properly, and it allows

 *   "smart" applications to perform a second cast to

 *   decode the FDDI-specific statistics.

 *

 *   We'll have to pay attention to this routine as the

 *   device structure becomes more mature and LAN media

 *   independent.

 *

 * Return Codes:

 *   None

 *

 * Assumptions:

 *   None

 *

 * Side Effects:

 *   None

 Fill the bp->stats structure with driver-maintained counters */

 always zero (0) for FDDI */

 Get FDDI SMT MIB objects */

 Fill the bp->stats structure with the SMT MIB object values */

 Get FDDI counters */

 Fill the bp->stats structure with the FDDI counter values */

/*

 * ==============================

 * = dfx_ctl_set_multicast_list =

 * ==============================

 *

 * Overview:

 *   Enable/Disable LLC frame promiscuous mode reception

 *   on the adapter and/or update multicast address table.

 *

 * Returns:

 *   None

 *

 * Arguments:

 *   dev - pointer to device information

 *

 * Functional Description:

 *   This routine follows a fairly simple algorithm for setting the

 *   adapter filters and CAM:

 *

 *		if IFF_PROMISC flag is set

 *			enable LLC individual/group promiscuous mode

 *		else

 *			disable LLC individual/group promiscuous mode

 *			if number of incoming multicast addresses >

 *					(CAM max size - number of unicast addresses in CAM)

 *				enable LLC group promiscuous mode

 *				set driver-maintained multicast address count to zero

 *			else

 *				disable LLC group promiscuous mode

 *				set driver-maintained multicast address count to incoming count

 *			update adapter CAM

 *		update adapter filters

 *

 * Return Codes:

 *   None

 *

 * Assumptions:

 *   Multicast addresses are presented in canonical (LSB) format.

 *

 * Side Effects:

 *   On-board adapter CAM and filters are updated.

 used as index in for loop */

 Enable LLC frame promiscuous mode, if necessary */

 Enable LLC ind/group prom mode */

 Else, update multicast address table */

 Disable LLC ind/group prom mode */

		/*

		 * Check whether incoming multicast address count exceeds table size

		 *

		 * Note: The adapters utilize an on-board 64 entry CAM for

		 *       supporting perfect filtering of multicast packets

		 *		 and bridge functions when adding unicast addresses.

		 *		 There is no hash function available.  To support

		 *		 additional multicast addresses, the all multicast

		 *		 filter (LLC group promiscuous mode) must be enabled.

		 *

		 *		 The firmware reserves two CAM entries for SMT-related

		 *		 multicast addresses, which leaves 62 entries available.

		 *		 The following code ensures that we're not being asked

		 *		 to add more than 62 addresses to the CAM.  If we are,

		 *		 the driver will enable the all multicast filter.

		 *		 Should the number of multicast addresses drop below

		 *		 the high water mark, the filter will be disabled and

		 *		 perfect filtering will be used.

 Enable LLC group prom mode */

 Don't add mc addrs to CAM */

 Disable LLC group prom mode */

 Add mc addrs to CAM */

 Copy addresses to multicast address table, then update adapter CAM */

 Update adapter filters */

/*

 * ===========================

 * = dfx_ctl_set_mac_address =

 * ===========================

 *

 * Overview:

 *   Add node address override (unicast address) to adapter

 *   CAM and update dev_addr field in device table.

 *

 * Returns:

 *   None

 *

 * Arguments:

 *   dev  - pointer to device information

 *   addr - pointer to sockaddr structure containing unicast address to add

 *

 * Functional Description:

 *   The adapter supports node address overrides by adding one or more

 *   unicast addresses to the adapter CAM.  This is similar to adding

 *   multicast addresses.  In this routine we'll update the driver and

 *   device structures with the new address, then update the adapter CAM

 *   to ensure that the adapter will copy and strip frames destined and

 *   sourced by that address.

 *

 * Return Codes:

 *   Always returns zero.

 *

 * Assumptions:

 *   The address pointed to by addr->sa_data is a valid unicast

 *   address and is presented in canonical (LSB) format.

 *

 * Side Effects:

 *   On-board adapter CAM is updated.  On-board adapter filters

 *   may be updated.

 Copy unicast address to driver-maintained structs and update count */

 update device struct */

 update driver struct */

	/*

	 * Verify we're not exceeding the CAM size by adding unicast address

	 *

	 * Note: It's possible that before entering this routine we've

	 *       already filled the CAM with 62 multicast addresses.

	 *		 Since we need to place the node address override into

	 *		 the CAM, we have to check to see that we're not

	 *		 exceeding the CAM size.  If we are, we have to enable

	 *		 the LLC group (multicast) promiscuous mode filter as

	 *		 in dfx_ctl_set_multicast_list.

 Enable LLC group prom mode */

 Don't add mc addrs to CAM */

 Update adapter filters */

 Update adapter CAM with new unicast address */

 always return zero */

/*

 * ======================

 * = dfx_ctl_update_cam =

 * ======================

 *

 * Overview:

 *   Procedure to update adapter CAM (Content Addressable Memory)

 *   with desired unicast and multicast address entries.

 *

 * Returns:

 *   Condition code

 *

 * Arguments:

 *   bp - pointer to board information

 *

 * Functional Description:

 *   Updates adapter CAM with current contents of board structure

 *   unicast and multicast address tables.  Since there are only 62

 *   free entries in CAM, this routine ensures that the command

 *   request buffer is not overrun.

 *

 * Return Codes:

 *   DFX_K_SUCCESS - Request succeeded

 *   DFX_K_FAILURE - Request failed

 *

 * Assumptions:

 *   All addresses being added (unicast and multicast) are in canonical

 *   order.

 *

 * Side Effects:

 *   On-board adapter CAM is updated.

 used as index */

 pointer to CAM entry */

	/*

	 * Fill in command request information

	 *

	 * Note: Even though both the unicast and multicast address

	 *       table entries are stored as contiguous 6 byte entries,

	 *		 the firmware address filter set command expects each

	 *		 entry to be two longwords (8 bytes total).  We must be

	 *		 careful to only copy the six bytes of each unicast and

	 *		 multicast table entry into each command entry.  This

	 *		 is also why we must first clear the entire command

	 *		 request buffer.

 first clear buffer */

 Now add unicast addresses to command request buffer, if any */

 point to next command entry */

 Now add multicast addresses to command request buffer, if any */

 point to next command entry */

 Issue command to update adapter CAM, then return */

/*

 * ==========================

 * = dfx_ctl_update_filters =

 * ==========================

 *

 * Overview:

 *   Procedure to update adapter filters with desired

 *   filter settings.

 *

 * Returns:

 *   Condition code

 *

 * Arguments:

 *   bp - pointer to board information

 *

 * Functional Description:

 *   Enables or disables filter using current filter settings.

 *

 * Return Codes:

 *   DFX_K_SUCCESS - Request succeeded.

 *   DFX_K_FAILURE - Request failed.

 *

 * Assumptions:

 *   We must always pass up packets destined to the broadcast

 *   address (FF-FF-FF-FF-FF-FF), so we'll always keep the

 *   broadcast filter enabled.

 *

 * Side Effects:

 *   On-board adapter filters are updated.

 used as index */

 Fill in command request information */

 Initialize Broadcast filter - * ALWAYS ENABLED * */

 Initialize LLC Individual/Group Promiscuous filter */

 Initialize LLC Group Promiscuous filter */

 Terminate the item code list */

 Issue command to update adapter filters, then return */

/*

 * ======================

 * = dfx_hw_dma_cmd_req =

 * ======================

 *

 * Overview:

 *   Sends PDQ DMA command to adapter firmware

 *

 * Returns:

 *   Condition code

 *

 * Arguments:

 *   bp - pointer to board information

 *

 * Functional Description:

 *   The command request and response buffers are posted to the adapter in the manner

 *   described in the PDQ Port Specification:

 *

 *		1. Command Response Buffer is posted to adapter.

 *		2. Command Request Buffer is posted to adapter.

 *		3. Command Request consumer index is polled until it indicates that request

 *         buffer has been DMA'd to adapter.

 *		4. Command Response consumer index is polled until it indicates that response

 *         buffer has been DMA'd from adapter.

 *

 *   This ordering ensures that a response buffer is already available for the firmware

 *   to use once it's done processing the request buffer.

 *

 * Return Codes:

 *   DFX_K_SUCCESS	  - DMA command succeeded

 * 	 DFX_K_OUTSTATE   - Adapter is NOT in proper state

 *   DFX_K_HW_TIMEOUT - DMA command timed out

 *

 * Assumptions:

 *   Command request buffer has already been filled with desired DMA command.

 *

 * Side Effects:

 *   None

 adapter status */

 used in for loops */

 Make sure the adapter is in a state that we can issue the DMA command in */

 Put response buffer on the command response queue */

 Bump (and wrap) the producer index and write out to register */

 Put request buffer on the command request queue */

 Bump (and wrap) the producer index and write out to register */

	/*

	 * Here we wait for the command request consumer index to be equal

	 * to the producer, indicating that the adapter has DMAed the request.

 wait for 100 microseconds */

 Bump (and wrap) the completion index and write out to register */

	/*

	 * Here we wait for the command response consumer index to be equal

	 * to the producer, indicating that the adapter has DMAed the response.

 wait for 100 microseconds */

 Bump (and wrap) the completion index and write out to register */

/*

 * ========================

 * = dfx_hw_port_ctrl_req =

 * ========================

 *

 * Overview:

 *   Sends PDQ port control command to adapter firmware

 *

 * Returns:

 *   Host data register value in host_data if ptr is not NULL

 *

 * Arguments:

 *   bp			- pointer to board information

 *	 command	- port control command

 *	 data_a		- port data A register value

 *	 data_b		- port data B register value

 *	 host_data	- ptr to host data register value

 *

 * Functional Description:

 *   Send generic port control command to adapter by writing

 *   to various PDQ port registers, then polling for completion.

 *

 * Return Codes:

 *   DFX_K_SUCCESS	  - port control command succeeded

 *   DFX_K_HW_TIMEOUT - port control command timed out

 *

 * Assumptions:

 *   None

 *

 * Side Effects:

 *   None

 Port Control command register value */

 used in for loops */

 Set Command Error bit in command longword */

 Issue port command to the adapter */

 Now wait for command to complete */

 set command timeout count to 60 seconds */

 set command timeout count to 2 seconds */

 wait for 100 microseconds */

	/*

	 * If the address of host_data is non-zero, assume caller has supplied a

	 * non NULL pointer, and return the contents of the HOST_DATA register in

	 * it.

/*

 * =====================

 * = dfx_hw_adap_reset =

 * =====================

 *

 * Overview:

 *   Resets adapter

 *

 * Returns:

 *   None

 *

 * Arguments:

 *   bp   - pointer to board information

 *   type - type of reset to perform

 *

 * Functional Description:

 *   Issue soft reset to adapter by writing to PDQ Port Reset

 *   register.  Use incoming reset type to tell adapter what

 *   kind of reset operation to perform.

 *

 * Return Codes:

 *   None

 *

 * Assumptions:

 *   This routine merely issues a soft reset to the adapter.

 *   It is expected that after this routine returns, the caller

 *   will appropriately poll the Port Status register for the

 *   adapter to enter the proper state.

 *

 * Side Effects:

 *   Internal adapter registers are cleared.

 Set Reset type and assert reset */

 tell adapter type of reset */

 Wait for at least 1 Microsecond according to the spec. We wait 20 just to be safe */

 Deassert reset */

/*

 * ========================

 * = dfx_hw_adap_state_rd =

 * ========================

 *

 * Overview:

 *   Returns current adapter state

 *

 * Returns:

 *   Adapter state per PDQ Port Specification

 *

 * Arguments:

 *   bp - pointer to board information

 *

 * Functional Description:

 *   Reads PDQ Port Status register and returns adapter state.

 *

 * Return Codes:

 *   None

 *

 * Assumptions:

 *   None

 *

 * Side Effects:

 *   None

 Port Status register value */

/*

 * =====================

 * = dfx_hw_dma_uninit =

 * =====================

 *

 * Overview:

 *   Brings adapter to DMA_UNAVAILABLE state

 *

 * Returns:

 *   Condition code

 *

 * Arguments:

 *   bp   - pointer to board information

 *   type - type of reset to perform

 *

 * Functional Description:

 *   Bring adapter to DMA_UNAVAILABLE state by performing the following:

 *		1. Set reset type bit in Port Data A Register then reset adapter.

 *		2. Check that adapter is in DMA_UNAVAILABLE state.

 *

 * Return Codes:

 *   DFX_K_SUCCESS	  - adapter is in DMA_UNAVAILABLE state

 *   DFX_K_HW_TIMEOUT - adapter did not reset properly

 *

 * Assumptions:

 *   None

 *

 * Side Effects:

 *   Internal adapter registers are cleared.

 used in for loops */

 Set reset type bit and reset adapter */

 Now wait for adapter to enter DMA_UNAVAILABLE state */

 wait for 100 microseconds */

/*

 *	Align an sk_buff to a boundary power of 2

 *

 Where we want to be */

/*

 * ================

 * = dfx_rcv_init =

 * ================

 *

 * Overview:

 *   Produces buffers to adapter LLC Host receive descriptor block

 *

 * Returns:

 *   None

 *

 * Arguments:

 *   bp - pointer to board information

 *   get_buffers - non-zero if buffers to be allocated

 *

 * Functional Description:

 *   This routine can be called during dfx_adap_init() or during an adapter

 *	 reset.  It initializes the descriptor block and produces all allocated

 *   LLC Host queue receive buffers.

 *

 * Return Codes:

 *   Return 0 on success or -ENOMEM if buffer allocation failed (when using

 *   dynamic buffer allocation). If the buffer allocation failed, the

 *   already allocated buffers will not be released and the caller should do

 *   this.

 *

 * Assumptions:

 *   The PDQ has been reset and the adapter and driver maintained Type 2

 *   register indices are cleared.

 *

 * Side Effects:

 *   Receive buffers are posted to the adapter LLC queue and the adapter

 *   is notified.

 used in for loop */

	/*

	 *  Since each receive buffer is a single fragment of same length, initialize

	 *  first longword in each receive descriptor for entire LLC Host descriptor

	 *  block.  Also initialize second longword in each receive descriptor with

	 *  physical address of receive buffer.  We'll always allocate receive

	 *  buffers in powers of 2 so that we can easily fill the 256 entry descriptor

	 *  block and produce new receive buffers by simply updating the receive

	 *  producer index.

	 *

	 * 	Assumptions:

	 *		To support all shipping versions of PDQ, the receive buffer size

	 *		must be mod 128 in length and the physical address must be 128 byte

	 *		aligned.  In other words, bits 0-6 of the length and address must

	 *		be zero for the following descriptor field entries to be correct on

	 *		all PDQ-based boards.  We guaranteed both requirements during

	 *		driver initialization when we allocated memory for the receive buffers.

			/*

			 * align to 128 bytes for compatibility with

			 * the old EISA boards.

			/*

			 * p_rcv_buff_va is only used inside the

			 * kernel so we put the skb pointer here.

 Update receive producer and Type 2 register */

/*

 * =========================

 * = dfx_rcv_queue_process =

 * =========================

 *

 * Overview:

 *   Process received LLC frames.

 *

 * Returns:

 *   None

 *

 * Arguments:

 *   bp - pointer to board information

 *

 * Functional Description:

 *   Received LLC frames are processed until there are no more consumed frames.

 *   Once all frames are processed, the receive buffers are returned to the

 *   adapter.  Note that this algorithm fixes the length of time that can be spent

 *   in this routine, because there are a fixed number of receive buffers to

 *   process and buffers are not produced until this routine exits and returns

 *   to the ISR.

 *

 * Return Codes:

 *   None

 *

 * Assumptions:

 *   None

 *

 * Side Effects:

 *   None

 ptr to rcv/xmt consumer block register */

 ptr to start of packet receive buffer (FMC descriptor) */

 FMC descriptor field and packet length */

 pointer to a sk_buff to hold incoming packet data */

 Service all consumed LLC receive frames */

 Process any errors */

 The frame was received without errors - verify packet length */

 subtract 4 byte CRC */

					/* Alloc new buffer to pass up,

 Receive buffer allocated, pass receive packet up */

 adjust data field so that it points to FC byte */

 pass up packet length, NOT including CRC */

 Update the rcv counters */

		/*

		 * Advance the producer (for recycling) and advance the completion

		 * (for servicing received frames).  Note that it is okay to

		 * advance the producer without checking that it passes the

		 * completion index because they are both advanced at the same

		 * rate.

/*

 * =====================

 * = dfx_xmt_queue_pkt =

 * =====================

 *

 * Overview:

 *   Queues packets for transmission

 *

 * Returns:

 *   Condition code

 *

 * Arguments:

 *   skb - pointer to sk_buff to queue for transmission

 *   dev - pointer to device information

 *

 * Functional Description:

 *   Here we assume that an incoming skb transmit request

 *   is contained in a single physically contiguous buffer

 *   in which the virtual address of the start of packet

 *   (skb->data) can be converted to a physical address

 *   by using dma_map_single().

 *

 *   Since the adapter architecture requires a three byte

 *   packet request header to prepend the start of packet,

 *   we'll write the three byte field immediately prior to

 *   the FC byte.  This assumption is valid because we've

 *   ensured that dev->hard_header_len includes three pad

 *   bytes.  By posting a single fragment to the adapter,

 *   we'll reduce the number of descriptor fetches and

 *   bus traffic needed to send the request.

 *

 *   Also, we can't free the skb until after it's been DMA'd

 *   out by the adapter, so we'll queue it in the driver and

 *   return it in dfx_xmt_done.

 *

 * Return Codes:

 *   0 - driver queued packet, link is unavailable, or skbuff was bad

 *	 1 - caller should requeue the sk_buff for later transmission

 *

 * Assumptions:

 *	 First and foremost, we assume the incoming skb pointer

 *   is NOT NULL and is pointing to a valid sk_buff structure.

 *

 *   The outgoing packet is complete, starting with the

 *   frame control byte including the last byte of data,

 *   but NOT including the 4 byte CRC.  We'll let the

 *   adapter hardware generate and append the CRC.

 *

 *   The entire packet is stored in one physically

 *   contiguous buffer which is not cached and whose

 *   32-bit physical address can be determined.

 *

 *   It's vital that this routine is NOT reentered for the

 *   same board and that the OS is not in another section of

 *   code (eg. dfx_int_common) for the same board on a

 *   different thread.

 *

 * Side Effects:

 *   None

 local transmit producer index */

 ptr to transmit descriptor block entry */

 ptr to transmit driver descriptor */

	/*

	 * Verify that incoming transmit request is OK

	 *

	 * Note: The packet size check is consistent with other

	 *		 Linux device drivers, although the correct packet

	 *		 size should be verified before calling the

	 *		 transmit routine.

 bump error counter */

 return "success" */

	/*

	 * See if adapter link is available, if not, free buffer

	 *

	 * Note: If the link isn't available, free buffer and return 0

	 *		 rather than tell the upper layer to requeue the packet.

	 *		 The methodology here is that by the time the link

	 *		 becomes available, the packet to be sent will be

	 *		 fairly stale.  By simply dropping the packet, the

	 *		 higher layer protocols will eventually time out

	 *		 waiting for response packets which it won't receive.

 is link really available? */

 if so, set flag and continue */

 bump error counter */

 free sk_buff now */

 return "success" */

 Write the three PRH bytes immediately before the FC byte */

 these byte values are defined */

 in the Motorola FDDI MAC chip */

 specification */

 Get the current producer and the next free xmt data descriptor */

	/*

	 * Get pointer to auxiliary queue entry to contain information

	 * for this packet.

	 *

	 * Note: The current xmt producer index will become the

	 *	 current xmt completion index when we complete this

	 *	 packet later on.  So, we'll get the pointer to the

	 *	 next auxiliary queue entry now before we bump the

	 *	 producer index.

 also bump producer index */

	/*

	 * Write the descriptor with buffer info and bump producer

	 *

	 * Note: Since we need to start DMA from the packet request

	 *		 header, we'll add 3 bytes to the DMA buffer length,

	 *		 and we'll determine the physical address of the

	 *		 buffer from the PRH, not skb->data.

	 *

	 * Assumptions:

	 *		 1. Packet starts with the frame control (FC) byte

	 *		    at skb->data.

	 *		 2. The 4-byte CRC is not appended to the buffer or

	 *			included in the length.

	 *		 3. Packet length (skb->len) is from FC to end of

	 *			data, inclusive.

	 *		 4. The packet length does not exceed the maximum

	 *			FDDI LLC frame length of 4491 bytes.

	 *		 5. The entire packet is contained in a physically

	 *			contiguous, non-cached, locked memory space

	 *			comprised of a single buffer pointed to by

	 *			skb->data.

	 *		 6. The physical address of the start of packet

	 *			can be determined from the virtual address

	 *			by using dma_map_single() and is only 32-bits

	 *			wide.

	/*

	 * Verify that descriptor is actually available

	 *

	 * Note: If descriptor isn't available, return 1 which tells

	 *	 the upper layer to requeue the packet for later

	 *	 transmission.

	 *

	 *       We need to ensure that the producer never reaches the

	 *	 completion, except to indicate that the queue is empty.

 requeue packet for later */

	/*

	 * Save info for this packet for xmt done indication routine

	 *

	 * Normally, we'd save the producer index in the p_xmt_drv_descr

	 * structure so that we'd have it handy when we complete this

	 * packet later (in dfx_xmt_done).  However, since the current

	 * transmit architecture guarantees a single fragment for the

	 * entire packet, we can simply bump the completion index by

	 * one (1) for each completed packet.

	 *

	 * Note: If this assumption changes and we're presented with

	 *	 an inconsistent number of transmit fragments for packet

	 *	 data, we'll need to modify this code to save the current

	 *	 transmit producer index.

 Update Type 2 register */

 packet queued to adapter */

/*

 * ================

 * = dfx_xmt_done =

 * ================

 *

 * Overview:

 *   Processes all frames that have been transmitted.

 *

 * Returns:

 *   None

 *

 * Arguments:

 *   bp - pointer to board information

 *

 * Functional Description:

 *   For all consumed transmit descriptors that have not

 *   yet been completed, we'll free the skb we were holding

 *   onto using dev_kfree_skb and bump the appropriate

 *   counters.

 *

 * Return Codes:

 *   None

 *

 * Assumptions:

 *   The Type 2 register is not updated in this routine.  It is

 *   assumed that it will be updated in the ISR when dfx_xmt_done

 *   returns.

 *

 * Side Effects:

 *   None

 ptr to transmit driver descriptor */

 ptr to rcv/xmt consumer block register */

 local transmit completion index */

 buffers freed */

 Service all consumed transmit frames */

 Get pointer to the transmit driver descriptor block information */

 Increment transmit counters */

 Return skb to operating system */

		/*

		 * Move to start of next packet by updating completion index

		 *

		 * Here we assume that a transmit packet request is always

		 * serviced by posting one fragment.  We can therefore

		 * simplify the completion code by incrementing the

		 * completion index by one.  This code will need to be

		 * modified if this assumption changes.  See comments

		 * in dfx_xmt_queue_pkt for more details.

/*

 * =================

 * = dfx_rcv_flush =

 * =================

 *

 * Overview:

 *   Remove all skb's in the receive ring.

 *

 * Returns:

 *   None

 *

 * Arguments:

 *   bp - pointer to board information

 *

 * Functional Description:

 *   Free's all the dynamically allocated skb's that are

 *   currently attached to the device receive ring. This

 *   function is typically only used when the device is

 *   initialized or reinitialized.

 *

 * Return Codes:

 *   None

 *

 * Side Effects:

 *   None

 DYNAMIC_BUFFERS */

/*

 * =================

 * = dfx_xmt_flush =

 * =================

 *

 * Overview:

 *   Processes all frames whether they've been transmitted

 *   or not.

 *

 * Returns:

 *   None

 *

 * Arguments:

 *   bp - pointer to board information

 *

 * Functional Description:

 *   For all produced transmit descriptors that have not

 *   yet been completed, we'll free the skb we were holding

 *   onto using dev_kfree_skb and bump the appropriate

 *   counters.  Of course, it's possible that some of

 *   these transmit requests actually did go out, but we

 *   won't make that distinction here.  Finally, we'll

 *   update the consumer index to match the producer.

 *

 * Return Codes:

 *   None

 *

 * Assumptions:

 *   This routine does NOT update the Type 2 register.  It

 *   is assumed that this routine is being called during a

 *   transmit flush interrupt, or a shutdown or close routine.

 *

 * Side Effects:

 *   None

 rcv/xmt consumer block longword */

 ptr to transmit driver descriptor */

 local transmit completion index */

 Flush all outstanding transmit frames */

 Get pointer to the transmit driver descriptor block information */

 Return skb to operating system */

 Increment transmit error counter */

		/*

		 * Move to start of next packet by updating completion index

		 *

		 * Here we assume that a transmit packet request is always

		 * serviced by posting one fragment.  We can therefore

		 * simplify the completion code by incrementing the

		 * completion index by one.  This code will need to be

		 * modified if this assumption changes.  See comments

		 * in dfx_xmt_queue_pkt for more details.

 Update the transmit consumer index in the consumer block */

/*

 * ==================

 * = dfx_unregister =

 * ==================

 *

 * Overview:

 *   Shuts down an FDDI controller

 *

 * Returns:

 *   Condition code

 *

 * Arguments:

 *   bdev - pointer to device information

 *

 * Functional Description:

 *

 * Return Codes:

 *   None

 *

 * Assumptions:

 *   It compiles so it should work :-( (PCI cards do :-)

 *

 * Side Effects:

 *   Device structures for FDDI adapters (fddi0, fddi1, etc) are

 *   freed.

 pointers to ports */

 resource lengths */

 total buffer size used */

 CONFIG_PCI */

 CONFIG_EISA */

 CONFIG_TC */

 SPDX-License-Identifier: GPL-2.0-or-later

/******************************************************************************

 *

 *	(C)Copyright 1998,1999 SysKonnect,

 *	a business unit of Schneider & Koch & Co. Datensysteme GmbH.

 *

 *	See the file "skfddi.c" for further information.

 *

 *	The information in this file is provided "AS IS" without warranty.

 *

/*

 * *******************************************************************

 * This SBA code implements the Synchronous Bandwidth Allocation

 * functions described in the "FDDI Synchronous Forum Implementer's

 * Agreement" dated December 1th, 1993.

 * *******************************************************************

 *

 *	PURPOSE: The purpose of this function is to control

 *		 synchronous allocations on a single FDDI segment.

 *		 Allocations are limited to the primary FDDI ring.

 *		 The SBM provides recovery mechanisms to recover

 *		 unused bandwidth also resolves T_Neg and

 *		 reconfiguration changes. Many of the SBM state

 *		 machine inputs are sourced by the underlying

 *		 FDDI sub-system supporting the SBA application.

 *

 * *******************************************************************

/*

	-------------------------------------------------------------

	LOCAL VARIABLES:

	-------------------------------------------------------------

/*

	-------------------------------------------------------------

	GLOBAL VARIABLES:

	-------------------------------------------------------------

/*

	-------------------------------------------------------------

	LOCAL FUNCTIONS:

	-------------------------------------------------------------

/*

	-------------------------------------------------------------

	EXTERNAL FUNCTIONS:

	-------------------------------------------------------------

/*

	-------------------------------------------------------------

	PUBLIC FUNCTIONS:

	-------------------------------------------------------------

/*

 * --------------------------------------------------------------------------

 *	End Station Support	(ESS)

 * --------------------------------------------------------------------------

/*

 * evaluate the RAF frame

 universal pointer */

 para: command for the ESS */

 recource type */

	/*

	 * Message Processing Code

	/*

	 * get the resource type

	/*

	 * get the pointer to the ESS command

		/*

		 * error in frame: para ESS command was not found

	/*

	 * evaluate the ESS command

	/*

	 * Process an ESS Allocation Request

		/*

		 * check for an RAF Request (Allocation Request)

			/*

			 * process the Allocation request only if the frame is

			 * local and no static allocation is used

			/*

			 * Note: The Application should send a LAN_LOC_FRAME.

			 *	 The ESS do not send the Frame to the network!

		/*

		 * The RAF frame is an Allocation Response !

		 * check the parameters

		/*

		 * VERIFY THE FRAME IS WELL BUILT:

		 *

		 *	1. path index = primary ring only

		 *	2. resource type = sync bw only

		 *	3. trans action id = alloc_trans_id

		 *	4. reason code = success

		 *

		 * If any are violated, discard the RAF frame

		/*

		 * Extract message parameters

		/*

		 * process the bandwidth allocation

 end of Process Allocation Request */

	/*

	 * Process an ESS Change Request

		/*

		 * except only replies

		/*

		 * check the para for the Change Request

		/*

		 * Verify the path index and resource

		 * type are correct. If any of

		 * these are false, don't process this

		 * change request frame.

		/*

		 * Extract message queue parameters

		/*

		 * process the bandwidth allocation

		/*

		 * send an RAF Change Reply

 end of Process Change Request */

	/*

	 * Process Report Response

		/*

		 * except only requests

		/*

		 * verify that the resource type is sync bw only

		/*

		 * send an RAF Change Reply

 end of Process Report Request */

		/*

		 * error in frame

/*

 * determines the synchronous bandwidth, set the TSYNC register and the

 * mib variables SBAPayload, SBAOverhead and fddiMACT-NEG.

	/*

	 * determine the synchronous bandwidth (sync_bw) in bytes per T-NEG,

	 * if the payload is greater than zero.

	 * For the SBAPayload and the SBAOverhead we have the following

	 * unite quations

	 *		      _		  _

	 *		     |	     bytes |

	 *	SBAPayload = | 8000 ------ |

	 *		     |		s  |

	 *		      -		  -

	 *		       _       _

	 *		      |	 bytes	|

	 *	SBAOverhead = | ------	|

	 *		      |	 T-NEG	|

	 *		       -       -

	 *

	 * T-NEG is described by the equation:

	 *

	 *		     (-) fddiMACT-NEG

	 *	T-NEG =	    -------------------

	 *			12500000 1/s

	 *

	 * The number of bytes we are able to send is the payload

	 * plus the overhead.

	 *

	 *			  bytes    T-NEG SBAPayload 8000 bytes/s

	 * sync_bw =  SBAOverhead ------ + -----------------------------

	 *	   		  T-NEG		T-NEG

	 *

	 *

	 *	      		     1

	 * sync_bw =  SBAOverhead + ---- (-)fddiMACT-NEG * SBAPayload

	 *	       		    1562

	 *

	/*

	 * set the mib attributes fddiPATHSbaOverhead, fddiPATHSbaPayload

/*	if (smt_set_obj(smc,SMT_P320F,payload,S_SET)) {

		DB_ESS("ESS: SMT does not accept the payload value");

		return FALSE;

	}

	if (smt_set_obj(smc,SMT_P3210,overhead,S_SET)) {

		DB_ESS("ESS: SMT does not accept the overhead value");

		return FALSE;

 premliminary */

	/*

	 * start the iterative allocation process if the payload or the overhead

	 * are smaller than the parsed values

	/*

	 * evulate the Payload

	/*

	 * get and initialize the response frame

 set P15 */

 set P16 */

 set P320B */

 set P320F */

 set P3210 */

 set P1A */

	/*

	 * send never allocation request where the requested payload and

	 * overhead is zero or deallocate bandwidth when no bandwidth is

	 * parsed

 next RAF alc req after 3 s */

	/*

	 * get and initialize the response frame

 set P15 */

 set P16 */

	/*

	 * set the parameter type and parameter length of all used

	 * parameters

 set P320B */

 set P0017 */

 set P0018 */

 set P320F */

 set P3210 */

 set P19 */

 set P1A */

 set P1B */

 set P1C */

	/*

	 * check if the frame must be send to the own ESS

		/*

		 * Send the Change Reply to the local SBA

		/*

		 * Send the SBA RAF Change Reply to the network

	/*

	 * if nothing to do exit 

	/*

	 * split up the FIFO and reinitialize the queues

 ESS */

 no SLIM_SMT */

 SPDX-License-Identifier: GPL-2.0-or-later

/******************************************************************************

 *

 *	(C)Copyright 1998,1999 SysKonnect,

 *	a business unit of Schneider & Koch & Co. Datensysteme GmbH.

 *

 *	See the file "skfddi.c" for further information.

 *

 *	The information in this file is provided "AS IS" without warranty.

 *

/*

 * FBI board dependent Driver for SMT and LLC

/*

 * PCM active state

 Used for ring up/down indication */

/*

 * valid configuration values are:

/*

 *	xPOS_ID:xxxx

 *	|	\  /

 *	|	 \/

 *	|	  --------------------- the patched POS_ID of the Adapter

 *	|				xxxx = (Vendor ID low byte,

 *	|					Vendor ID high byte,

 *	|					Device ID low byte,

 *	|					Device ID high byte)

 *	+------------------------------ the patched oem_id must be

 *					'S' for SK or 'I' for IBM

 *					this is a short id for the driver.

 OEM_CONCEPT */

 OEM_CONCEPT */

 MULT_OEM */

 MULT_OEM */

 Prototypes of external functions */

 Prototype of a local function. */

/*

 * FDDI card reset

	/*

	 * make sure no transfer activity is pending

	/*

	 * now reset everything

 reset for all chips */

 do dummy read */

 Make LINT happy. */

	/*

	 * Reset all bits in the PCI STATUS register

 enable for writes */

 disable writes */

	/*

	 * Release the reset of all the State machines

	 * Release Master_Reset

	 * Release HPI_SM_Reset

	/*

	 * determine the adapter type

	 * Note: Do it here, because some drivers may call card_start() once

	 *	 at very first before any other initialization functions is

	 *	 executed.

	/*

	 * Watermark initialization

 clear the reset chips */

 ye LED on */

 init the timer value for the watch dog 2,5 minutes */

 initialize the ISR mask */

 necessary for BOOT */

 ring down */

	/*

	 * make sure no transfer activity is pending

	/*

	 * now reset everything

 reset for all chips */

 reset for all chips */

 all LEDs off */

--------------------------- ISR handling ----------------------------------*/

	/*

	 * parity error: note encoding error is not possible in tag mode

 parity err. syn.q.*/

 parity err. a.q.0 */

 parity err. a.q.1 */

	/*

	 * buffer underrun: can only occur if a tx threshold is specified

 tx buffer underrun syn.q.*/

 tx buffer underrun a.q.0 */

 tx buffer underrun a.q.2 */

 transmit abort */

 syn. tx abort */

 asyn. tx abort */

 lock for syn. q. */

 lock for asyn. q. */

 init tx */

 end of asyn tx */

 end of sync tx */

/*

 * interrupt source= plc1

 * this function is called in nwfbisr.asm

/*

 * interrupt source= plc2

 * this function is called in nwfbisr.asm

/*

 * interrupt source= timer

/*

 * return S-port (PA or PB)

/*

 * Station Label = "FDDI-XYZ" where

 *

 *	X = connector type

 *	Y = PMD type

 *	Z = port type

 read mac address from board */

/*

 * FDDI card soft reset

 Single att. station */

 Dual att. station */

 without opt. bypass */

 with opt. bypass */

/*

 * insert or deinsert optical bypass (called by ECM)

 insert station */

 bypass station */

/*

 * check if bypass connected

/*

 * led_indication called by rmt_indication() and

 * pcm_state_change()

 *

 * Input:

 *	smc:	SMT context

 *	led_event:

 *	0	Only switch green LEDs according to their respective PCM state

 *	LED_Y_OFF	just switch yellow LED off

 *	LED_Y_ON	just switch yello LED on

	/* use smc->hw.mac_ring_is_up == TRUE 

	 * as indication for Ring Operational

 Ring up = yellow led OFF*/

 PCM state changed */

 Link at Port A/S = green led A ON */

 Link at Port B = green led B ON */

 PCI */

	/*

	 * the current implementation of pcm_state_change() in the driver

	 * parts must be renamed to drv_pcm_state_change() which will be called

	 * now after led_indication.

 Call a driver special function if defined */

/*

 * llc_recover_tx called by init_tx (fplus.c)

 is_equal_num */

/*

 * set the OEM ID defaults, and test the contents of the OEM data base

 * The default OEM is the first ACTIVE entry in the OEM data base 

 *

 * returns:	0	success

 *		1	error in data base

 *		2	data base empty

 *		3	no active entry	

 check OEM data base */

 we have active IDs */

 save the first active ID */

 entry ok */

 invalid oi_status */

 ok, we have a valid OEM data base with an active entry */

 MULT_OEM */

 Make LINT happy. */

 Start timer. */

 DEBUG */

 Make LINT happy. */

 Stop timer. */

 DEBUG */

 PCI */

 SPDX-License-Identifier: GPL-2.0-or-later

/******************************************************************************

 *

 *	(C)Copyright 1998,1999 SysKonnect,

 *	a business unit of Schneider & Koch & Co. Datensysteme GmbH.

 *

 *	See the file "skfddi.c" for further information.

 *

 *	The information in this file is provided "AS IS" without warranty.

 *

/*

	-------------------------------------------------------------

	DOCUMENTATION

	-------------------------------------------------------------

	BEGIN_MANUAL_ENTRY(DOCUMENTATION)



			T B D



	END_MANUAL_ENTRY

/*

	-------------------------------------------------------------

	LOCAL VARIABLES:

	-------------------------------------------------------------

/*

	-------------------------------------------------------------

	EXTERNE VARIABLES:

	-------------------------------------------------------------

/*

	-------------------------------------------------------------

	LOCAL FUNCTIONS:

	-------------------------------------------------------------

/*

	-------------------------------------------------------------

	EXTERNAL FUNCTIONS:

	-------------------------------------------------------------

	The external SMT functions are listed in cmtdef.h */

/*

	-------------------------------------------------------------

	PUBLIC FUNCTIONS:

	-------------------------------------------------------------

/*

	-------------------------------------------------------------

	MACROS:

	-------------------------------------------------------------

	/*

	 * define critical read for 16 Bit drivers

/*

	-------------------------------------------------------------

	INIT- AND SMT FUNCTIONS:

	-------------------------------------------------------------

/*

 *	BEGIN_MANUAL_ENTRY(mac_drv_check_space)

 *	u_int mac_drv_check_space()

 *

 *	function	DOWNCALL	(drvsr.c)

 *			This function calculates the needed non virtual

 *			memory for MBufs, RxD and TxD descriptors etc.

 *			needed by the driver.

 *

 *	return		u_int	memory in bytes

 *

 *	END_MANUAL_ENTRY

/*

 *	BEGIN_MANUAL_ENTRY(mac_drv_init)

 *	void mac_drv_init(smc)

 *

 *	function	DOWNCALL	(drvsr.c)

 *			In this function the hardware module allocates it's

 *			memory.

 *			The operating system dependent module should call

 *			mac_drv_init once, after the adatper is detected.

 *	END_MANUAL_ENTRY

	/*

	 * get the required memory for the RxDs and TxDs

 no space the hwm modul can't work */

	/*

	 * get the memory for the SMT MBufs

 no space the hwm modul can't work */

 no space the hwm modul can't work */

/*

 *	BEGIN_MANUAL_ENTRY(init_driver_fplus)

 *	init_driver_fplus(smc)

 *

 * Sets hardware modul specific values for the mode register 2

 * (e.g. the byte alignment for the received frames, the position of the

 *	 least significant byte etc.)

 *	END_MANUAL_ENTRY

 enable address bit swapping */

 descr is owned by the host */

	/*

	 * initialize the transmit descriptors

	/*

	 * initialize the receive descriptors

/*

 *	BEGIN_MANUAL_ENTRY(init_fddi_driver)

 *	void init_fddi_driver(smc,mac_addr)

 *

 * initializes the driver and it's variables

 *

 *	END_MANUAL_ENTRY

	/*

	 * initialize the SMbufs for the SMT

	/*

	 * initialize the other variables

	/*

	 * make sure that the start pointer is 16 byte aligned

 May be NULL */

		/*

		 * If the use_count is != zero the MBuf is queued

		 * more than once and must not queued into the

		 * free MBuf queue

/*

 *	BEGIN_MANUAL_ENTRY(mac_drv_repair_descr)

 *	void mac_drv_repair_descr(smc)

 *

 * function	called from SMT	(HWM / hwmtm.c)

 *		The BMU is idle when this function is called.

 *		Mac_drv_repair_descr sets up the physical address

 *		for all receive and transmit queues where the BMU

 *		should continue.

 *		It may be that the BMU was reseted during a fragmented

 *		transfer. In this case there are some fragments which will

 *		never completed by the BMU. The OWN bit of this fragments

 *		must be switched to be owned by the host.

 *

 *		Give a start command to the receive BMU.

 *		Start the transmit BMUs if transmit frames pending.

 *

 *	END_MANUAL_ENTRY

	/*

	 * repair tx queues: don't start

	/*

	 * repair rx queues

 exit the loop */

				/*

				 * repair the descriptor

/*

 * Repairs the receive descriptor ring and returns the physical address

 * where the BMU should continue working.

 *

 *	o The physical address where the BMU was stopped has to be

 *	  determined. This is the next RxD after rx_curr_get with an OWN

 *	  bit set.

 *	o The BMU should start working at beginning of the next frame.

 *	  RxDs with an OWN bit set but with a reset STF bit should be

 *	  skipped and owned by the driver (OWN = 0). 

 exit the loop */

				/*

				 * repair the descriptor

/*

	-------------------------------------------------------------

	INTERRUPT SERVICE ROUTINE:

	-------------------------------------------------------------

/*

 *	BEGIN_MANUAL_ENTRY(fddi_isr)

 *	void fddi_isr(smc)

 *

 * function	DOWNCALL	(drvsr.c)

 *		interrupt service routine, handles the interrupt requests

 *		generated by the FDDI adapter.

 *

 * NOTE:	The operating system dependent module must guarantee that the

 *		interrupts of the adapter are disabled when it calls fddi_isr.

 *

 *	About the USE_BREAK_ISR mechanismn:

 *

 *	The main requirement of this mechanismn is to force an timer IRQ when

 *	leaving process_receive() with leave_isr set. process_receive() may

 *	be called at any time from anywhere!

 *	To be sure we don't miss such event we set 'force_irq' per default.

 *	We have to force and Timer IRQ if 'smc->os.hwm.leave_isr' AND

 *	'force_irq' are set. 'force_irq' may be reset if a receive complete

 *	IRQ is pending.

 *

 *	END_MANUAL_ENTRY

 ISR source */

 PLC1 */

 PLC2 */

 FORMAC+ STU1(U/L) */

 FORMAC+ STU2(U/L) */

 FORMAC+ STU3(U/L) */

 Timer 82C54-2 */

				/*

				 * out of RxD detection

					/*

					 * check out of RxD condition

 Restricted Token Monitor */

 Parity error rx queue 1 */

 clear IRQ */

 Encoding error rx queue 1 */

 clear IRQ */

 Encoding error async tx q */

 clear IRQ */

 Encoding error sync tx q */

 clear IRQ */

		/*

		 *	Fast Tx complete Async/Sync Queue (BMU service)

			/*

			 * clear IRQ, Note: no IRQ is lost, because

			 * 	we always service both queues

		/*

		 *	Fast Rx Complete (BMU service)

 clear IRQ */

 leave fddi_isr because */

 indications not allowed */

 leave fddi_isr */

 NOTE: when the isr is left, no rx is pending */

 end of interrupt source polling loop */

/*

	-------------------------------------------------------------

	RECEIVE FUNCTIONS:

	-------------------------------------------------------------

/*

 *	BEGIN_MANUAL_ENTRY(mac_drv_rx_mode)

 *	void mac_drv_rx_mode(smc,mode)

 *

 * function	DOWNCALL	(fplus.c)

 *		Corresponding to the parameter mode, the operating system

 *		dependent module can activate several receive modes.

 *

 * para	mode	= 1:	RX_ENABLE_ALLMULTI	enable all multicasts

 *		= 2:	RX_DISABLE_ALLMULTI	disable "enable all multicasts"

 *		= 3:	RX_ENABLE_PROMISC	enable promiscuous

 *		= 4:	RX_DISABLE_PROMISC	disable promiscuous

 *		= 5:	RX_ENABLE_NSA		enable rec. of all NSA frames

 *			(disabled after 'driver reset' & 'set station address')

 *		= 6:	RX_DISABLE_NSA		disable rec. of all NSA frames

 *

 *		= 21:	RX_ENABLE_PASS_SMT	( see description )

 *		= 22:	RX_DISABLE_PASS_SMT	(  "	   "	  )

 *		= 23:	RX_ENABLE_PASS_NSA	(  "	   "	  )

 *		= 24:	RX_DISABLE_PASS_NSA	(  "	   "	  )

 *		= 25:	RX_ENABLE_PASS_DB	(  "	   "	  )

 *		= 26:	RX_DISABLE_PASS_DB	(  "	   "	  )

 *		= 27:	RX_DISABLE_PASS_ALL	(  "	   "	  )

 *		= 28:	RX_DISABLE_LLC_PROMISC	(  "	   "	  )

 *		= 29:	RX_ENABLE_LLC_PROMISC	(  "	   "	  )

 *

 *

 *		RX_ENABLE_PASS_SMT / RX_DISABLE_PASS_SMT

 *

 *		If the operating system dependent module activates the

 *		mode RX_ENABLE_PASS_SMT, the hardware module

 *		duplicates all SMT frames with the frame control

 *		FC_SMT_INFO and passes them to the LLC receive channel

 *		by calling mac_drv_rx_init.

 *		The SMT Frames which are sent by the local SMT and the NSA

 *		frames whose A- and C-Indicator is not set are also duplicated

 *		and passed.

 *		The receive mode RX_DISABLE_PASS_SMT disables the passing

 *		of SMT frames.

 *

 *		RX_ENABLE_PASS_NSA / RX_DISABLE_PASS_NSA

 *

 *		If the operating system dependent module activates the

 *		mode RX_ENABLE_PASS_NSA, the hardware module

 *		duplicates all NSA frames with frame control FC_SMT_NSA

 *		and a set A-Indicator and passed them to the LLC

 *		receive channel by calling mac_drv_rx_init.

 *		All NSA Frames which are sent by the local SMT

 *		are also duplicated and passed.

 *		The receive mode RX_DISABLE_PASS_NSA disables the passing

 *		of NSA frames with the A- or C-Indicator set.

 *

 * NOTE:	For fear that the hardware module receives NSA frames with

 *		a reset A-Indicator, the operating system dependent module

 *		has to call mac_drv_rx_mode with the mode RX_ENABLE_NSA

 *		before activate the RX_ENABLE_PASS_NSA mode and after every

 *		'driver reset' and 'set station address'.

 *

 *		RX_ENABLE_PASS_DB / RX_DISABLE_PASS_DB

 *

 *		If the operating system dependent module activates the

 *		mode RX_ENABLE_PASS_DB, direct BEACON frames

 *		(FC_BEACON frame control) are passed to the LLC receive

 *		channel by mac_drv_rx_init.

 *		The receive mode RX_DISABLE_PASS_DB disables the passing

 *		of direct BEACON frames.

 *

 *		RX_DISABLE_PASS_ALL

 *

 *		Disables all special receives modes. It is equal to

 *		call mac_drv_set_rx_mode successively with the

 *		parameters RX_DISABLE_NSA, RX_DISABLE_PASS_SMT,

 *		RX_DISABLE_PASS_NSA and RX_DISABLE_PASS_DB.

 *

 *		RX_ENABLE_LLC_PROMISC

 *

 *		(default) all received LLC frames and all SMT/NSA/DBEACON

 *		frames depending on the attitude of the flags

 *		PASS_SMT/PASS_NSA/PASS_DBEACON will be delivered to the

 *		LLC layer

 *

 *		RX_DISABLE_LLC_PROMISC

 *

 *		all received SMT/NSA/DBEACON frames depending on the

 *		attitude of the flags PASS_SMT/PASS_NSA/PASS_DBEACON

 *		will be delivered to the LLC layer.

 *		all received LLC frames with a directed address, Multicast

 *		or Broadcast address will be delivered to the LLC

 *		layer too.

 *

 *	END_MANUAL_ENTRY

 ifndef NDIS_OS2 */

/*

 * process receive queue

 number of RxDs of the curr rx buf */

 number of RxDs of the curr frame */

 points to the queue ctl struct */

 rxd pointer */

 first rxd of rx frame */

 receive buffer control word */

 receive frame status word */

 Frame control */

 Frame length */

			/*

			 * out of RxD detection

				/* Either we don't have an RxD or all

				 * RxDs are filled. Therefore it's allowed

				/*

				 * The BMU_STF bit is deleted, 1 frame is

				 * placed into more than 1 rx buffer

				 *

				 * skip frame by setting the rx len to 0

				 *

				 * if fragment count == 0

				 *	The missing STF bit belongs to the

				 *	current frame, search for the

				 *	EOF bit to complete the frame

				 * else

				 *	the fragment belongs to the next frame,

				 *	exit the loop and process the frame

 may be next 2 DRV_BUF_FLUSH() can be skipped, because */

 BMU_ST_BUF will not be changed by the ASIC */

		/*

		 * The received frame is finished for the process receive

		/*

		 * ASIC Errata no. 7 (STF - Bit Bug)

 the length of the data including the FC */

		/*

		 * check the frame_length and all error flags

			/*

			 * check frame status

		/*

		 * SUPERNET 3 Bug: FORMAC delivers status words

		 * of aborted frames to the BMU

		/*

		 * Check SA == MA

		/*

		 * test if LLC frame

			/*

			 * if pass_llc_promisc is disable

			 *	if DA != Multicast or Broadcast or DA!=MA

			 *		abort the frame

			/*

			 * LLC frame received

			/*

			 * copy the frame into a SMT_MBuf

 len - fc */

			/*

			 * SMT frame received

 if pass_NSA set pass the NSA frame or */

 pass_SMT set and the A-Indicator */

 is not set, pass the NSA frame */

				/*

				 * unknown FC abort the frame

--------------------------------------------------------------------*/

 lint bug: needs return detect end of function */

/*

 *	BEGIN_MANUAL_ENTRY(hwm_rx_frag)

 *	void hwm_rx_frag(smc,virt,phys,len,frame_status)

 *

 * function	MACRO		(hardware module, hwmtm.h)

 *		This function calls dma_master for preparing the

 *		system hardware for the DMA transfer and initializes

 *		the current RxD with the length and the physical and

 *		virtual address of the fragment. Furthermore, it sets the

 *		STF and EOF bits depending on the frame status byte,

 *		switches the OWN flag of the RxD, so that it is owned by the

 *		adapter and issues an rx_start.

 *

 * para	virt	virtual pointer to the fragment

 *	len	the length of the fragment

 *	frame_status	status of the frame, see design description

 *

 * NOTE:	It is possible to call this function with a fragment length

 *		of zero.

 *

 *	END_MANUAL_ENTRY

/*

 *	BEGINN_MANUAL_ENTRY(mac_drv_clear_rx_queue)

 *

 * void mac_drv_clear_rx_queue(smc)

 * struct s_smc *smc ;

 *

 * function	DOWNCALL	(hardware module, hwmtm.c)

 *		mac_drv_clear_rx_queue is called by the OS-specific module

 *		after it has issued a card_stop.

 *		In this case, the frames in the receive queue are obsolete and

 *		should be removed. For removing mac_drv_clear_rx_queue

 *		calls dma_master for each RxD and mac_drv_clear_rxd for each

 *		receive buffer.

 *

 * NOTE:	calling sequence card_stop:

 *		CLI_FBI(), card_stop(),

 *		mac_drv_clear_tx_queue(), mac_drv_clear_rx_queue(),

 *

 * NOTE:	The caller is responsible that the BMUs are idle

 *		when this function is called.

 *

 *	END_MANUAL_ENTRY

	/*

	 * dma_complete and mac_drv_clear_rxd for all RxDs / receive buffers

/*

	-------------------------------------------------------------

	SEND FUNCTIONS:

	-------------------------------------------------------------

/*

 *	BEGIN_MANUAL_ENTRY(hwm_tx_init)

 *	int hwm_tx_init(smc,fc,frag_count,frame_len,frame_status)

 *

 * function	DOWN_CALL	(hardware module, hwmtm.c)

 *		hwm_tx_init checks if the frame can be sent through the

 *		corresponding send queue.

 *

 * para	fc	the frame control. To determine through which

 *		send queue the frame should be transmitted.

 *		0x50 - 0x57:	asynchronous LLC frame

 *		0xD0 - 0xD7:	synchronous LLC frame

 *		0x41, 0x4F:	SMT frame to the network

 *		0x42:		SMT frame to the network and to the local SMT

 *		0x43:		SMT frame to the local SMT

 *	frag_count	count of the fragments for this frame

 *	frame_len	length of the frame

 *	frame_status	status of the frame, the send queue bit is already

 *			specified

 *

 * return		frame_status

 *

 *	END_MANUAL_ENTRY

/*

 *	BEGIN_MANUAL_ENTRY(hwm_tx_frag)

 *	void hwm_tx_frag(smc,virt,phys,len,frame_status)

 *

 * function	DOWNCALL	(hardware module, hwmtm.c)

 *		If the frame should be sent to the LAN, this function calls

 *		dma_master, fills the current TxD with the virtual and the

 *		physical address, sets the STF and EOF bits dependent on

 *		the frame status, and requests the BMU to start the

 *		transmit.

 *		If the frame should be sent to the local SMT, an SMT_MBuf

 *		is allocated if the FIRST_FRAG bit is set in the frame_status.

 *		The fragment of the frame is copied into the SMT MBuf.

 *		The function smt_received_pack is called if the LAST_FRAG

 *		bit is set in the frame_status word.

 *

 * para	virt	virtual pointer to the fragment

 *	len	the length of the fragment

 *	frame_status	status of the frame, see design description

 *

 * return	nothing returned, no parameter is modified

 *

 * NOTE:	It is possible to invoke this macro with a fragment length

 *		of zero.

 *

 *	END_MANUAL_ENTRY

	/* Bug fix: AF / May 31 1999 (#missing)

	 * snmpinfo problem reported by IBM is caused by invalid

	 * t-pointer (txd) if LAN_TX is not set but LOC_TX only.

	 * Set: t = queue->tx_curr_put  here !

 '*t' is already defined */

 ifndef AIX */

				/*

				 * hwm_cpy_txd2mb(txd,data,len) copies 'len' 

				 * bytes from the virtual pointer in 'rxd'

				 * to 'data'. The virtual pointer of the 

				 * os-specific tx-buffer should be written

				 * in the LAST txd.

 nPASS_1ST_TXD_2_TX_COMP */

 USE_OS_CPY */

/*

 * queues a receive for later send

	/*

	 * force an timer IRQ to receive the data

/*

 * get a SMbuf from the llc_rx_queue

/*

 * queues a transmit SMT MBuf during the time were the MBuf is

 * queued the TxD ring

/*

 * get a SMbuf from the txd_tx_queue

/*

 *	SMT Send function

 set to fc */

 + fc */

	/*

	 * determine the frag count and the virt addresses of the frags

	/*

	 * determine the frame status

	/*

	 * We need to unqueue the free SMT_MBUFs here, because it may

	 * be that the SMT want's to send more than 1 frame for one down call

/*	BEGIN_MANUAL_ENTRY(mac_drv_clear_txd)

 *	void mac_drv_clear_txd(smc)

 *

 * function	DOWNCALL	(hardware module, hwmtm.c)

 *		mac_drv_clear_txd searches in both send queues for TxD's

 *		which were finished by the adapter. It calls dma_complete

 *		for each TxD. If the last fragment of an LLC frame is

 *		reached, it calls mac_drv_tx_complete to release the

 *		send buffer.

 *

 * return	nothing

 *

 *	END_MANUAL_ENTRY

 next queue */

/*

 *	BEGINN_MANUAL_ENTRY(mac_drv_clear_tx_queue)

 *

 * void mac_drv_clear_tx_queue(smc)

 * struct s_smc *smc ;

 *

 * function	DOWNCALL	(hardware module, hwmtm.c)

 *		mac_drv_clear_tx_queue is called from the SMT when

 *		the RMT state machine has entered the ISOLATE state.

 *		This function is also called by the os-specific module

 *		after it has called the function card_stop().

 *		In this case, the frames in the send queues are obsolete and

 *		should be removed.

 *

 * note		calling sequence:

 *		CLI_FBI(), card_stop(),

 *		mac_drv_clear_tx_queue(), mac_drv_clear_rx_queue(),

 *

 * NOTE:	The caller is responsible that the BMUs are idle

 *		when this function is called.

 *

 *	END_MANUAL_ENTRY

		/*

		 * switch the OWN bit of all pending frames to the host

	/*

	 * release all TxD's for both send queues

		/*

		 * write the phys pointer of the NEXT descriptor into the

		 * BMU's current address descriptor pointer and set

		 * tx_curr_get and tx_curr_put to this position

/*

	-------------------------------------------------------------

	TEST FUNCTIONS:

	-------------------------------------------------------------

/*

 *	BEGIN_MANUAL_ENTRY(mac_drv_debug_lev)

 *	void mac_drv_debug_lev(smc,flag,lev)

 *

 * function	DOWNCALL	(drvsr.c)

 *		To get a special debug info the user can assign a debug level

 *		to any debug flag.

 *

 * para	flag	debug flag, possible values are:

 *			= 0:	reset all debug flags (the defined level is

 *				ignored)

 *			= 1:	debug.d_smtf

 *			= 2:	debug.d_smt

 *			= 3:	debug.d_ecm

 *			= 4:	debug.d_rmt

 *			= 5:	debug.d_cfm

 *			= 6:	debug.d_pcm

 *

 *			= 10:	debug.d_os.hwm_rx (hardware module receive path)

 *			= 11:	debug.d_os.hwm_tx(hardware module transmit path)

 *			= 12:	debug.d_os.hwm_gen(hardware module general flag)

 *

 *	lev	debug level

 *

 *	END_MANUAL_ENTRY

 SPDX-License-Identifier: GPL-2.0-or-later

/******************************************************************************

 *

 *	(C)Copyright 1998,1999 SysKonnect,

 *	a business unit of Schneider & Koch & Co. Datensysteme GmbH.

 *

 *	See the file "skfddi.c" for further information.

 *

 *	The information in this file is provided "AS IS" without warranty.

 *

/*

	PCM

	Physical Connection Management

/*

 * Hardware independent state machine implemantation

 * The following external SMT functions are referenced :

 *

 * 		queue_event()

 * 		smt_timer_start()

 * 		smt_timer_stop()

 *

 * 	The following external HW dependent functions are referenced :

 * 		sm_pm_control()

 *		sm_ph_linestate()

 *

 * 	The following HW dependent events are required :

 *		PC_QLS

 *		PC_ILS

 *		PC_HLS

 *		PC_MLS

 *		PC_NSE

 *		PC_LEM

 *

/*

 * FSM Macros

/*

 * PCM states

/*

 * symbolic state names

/*

 * symbolic event names

/*

 * PCL-S control register

 * this register in the PLC-S controls the scrambling parameters

 52.0 us */

 nMOT_ELM */

/*

 * PCL-S control register

 * this register in the PLC-S controls the scrambling parameters

 * can be patched for ANSI compliance if standard changes

 nMOT_ELM */

/*

 * external vars

 struct definition see 'cmtdef.h' (also used by CFM) */

/*

 * PLC timing parameter

 relative plc timer address */

 default timing parameters */

 min t. to remain Connect State */

 min t. to transmit a Line State */

 min break time */

 Signaling timeout */

 Link Confidence Test Time */

 Scrub Time == MAC TVX time ! */

 max t. that noise is tolerated */

/*

 * interrupt mask

/*

 * Do we need the EBUF error during signaling, too, to detect SUPERNET_3

 * PLL bug?

 SUPERNET_3 */

/*

 * We do NOT need the elasticity buffer error during signaling.

 SUPERNET_3 */

 internal functions */

/*

 * SMT timer interface

 *      start PCM timer 0

 clear timer event flag */

/*

 * SMT timer interface

 *      stop PCM timer 0

/*

	init PCM state machine (called by driver)

	clear all PCM vars and flags

 Indicates the type of PHY being used */

		/*

		 * set PMD-type

		/*

		 * A and B port can be on primary and secondary path

 set by SMT */

	/*

	 * dummy

	 * this is an obsolete public entry point that has to remain

	 * for compat. It is used by various drivers.

	 * the work is now done in real_init_plc()

	 * which is called from pcm_init() ;

 Revision of PLC-x */

 MOT_ELM */

 transit PCM state machine to MAINT state */

	/*

	 * if PLC-S then set control register C

 MOT_ELM */

 MOT_ELM */

 MOT_ELM */

	/*

	 * set timer register

 set timer parameter reg */

 clear interrupt event reg */

 enable non active irq's */

	/*

	 * if PCM is configured for class s, it will NOT go to the

	 * REMOVE state if offline (page 3-36;)

	 * in the concentrator, all inactive PHYS always must be in

	 * the remove state

	 * there's no real need to use this feature at all ..

/*

 * control PCM state machine

/*

 * read current line state (called by ECM & PCM)

 PHY index */

 create bit vector */

 write bit[n] & length = 1 to regs */

 len=nr-1 */

/*

 * config plc muxes

/*

	PCM state machine

	called by dispatcher  & fddi_init() (driver)

	do

		display state change

		process event

	until SM is stable

	/*

	 * ignore 2nd PHY if SAS

	/*

	 * because the PLC does the bit signaling for us,

	 * we're always in SIGNAL state

	 * the MIB want's to see CONNECT

	 * we therefore fake an entry in the MIB

	/*

	 * path change

 check whether a snmp-trap has to be sent */

 a real state change took place */

 send first trap */

 send second trap */

 send third trap */

 send fourth trap */

/*

 * PCM state machine

 PHY index */

 Revision of the plc */

 nMOT_ELM */

	/*

	 * general transitions independent of state

PC00-PC80*/

PC01-PC81*/

 PC09-PC99 */

 if long or extended LCT */

 end of LCT is indicate by PCM_CODE (initiate PCM event) */

 disable LEM */

PC09*/

 Stop the LCT timer if we came from Signal state */

 disable LEM */

		/*

		 * if vector is already loaded, go to OFF to clear PCM_SIGNAL

 TB_MIN ? */

		/*

		 * Go to OFF state in any case.

 needed by CFM */

 bit signaling start bit */

 Set the non-active interrupt mask register */

		/*

		 * If the LCT was stopped. There might be a

		 * PCM_CODE interrupt event present.

		 * This must be cleared.

 Get the plc revision for revision dependent code */

 MOT_ELM */

			/*

			 * No supernet III PLC, so set Xmit verctor and

			 * length BEFORE starting the state machine.

		/*

		 * Now give the Start command.

		 * - The start command shall be done before setting the bits

		 *   to be signaled. (In PLC-S description and PLCS in SN3.

		 * - The start command shall be issued AFTER setting the

		 *   XMIT vector and the XMIT length register.

		 *

		 * We do it exactly according this specs for the old PLC and

		 * the new PLCS inside the SN3.

		 * For the usual PLCS we try it the way it is done for the

		 * old PLC and set the XMIT registers again, if the PLC is

		 * not in SIGNAL state. This is done according to an PLCS

		 * errata workaround.

		/*

		 * workaround for PLC-S eng. sample errata

 nMOT_ELM */

 nMOT_ELM */

			/*

			 * Set register again (PLCS errata) or the first time

			 * (new SN3 PLCS).

		/*

		 * end of workaround

 these states are done by hardware */

 enable LEM */

 start LCT */

 must be cleared */

 check for local LCT failure */

			/*

			 * set tval[7]

 check for remote LCT failure */

		/*

		 * prevent mux error when going from WRAP_A to WRAP_B

PC88b*/

PC82*/

		/*

		 * start LEM for SMT

 Set the active interrupt mask register */

PC81 is done by PL_TNE_EXPIRED irq */

PC82*/

PC88c: is done by TRACE_PROP irq */

 disable LEM int. */

 disable LEM */

PC90*/

/*

 * force line state on a PHY output	(only in MAINT state)

 Force Quiet */

 Force Master */

 Force Halt */

 Force Idle */

 Enable repeat filter */

/*

 * link error monitor

	/*

	 * calculation is called on a intervall of 8 seconds

	 *	-> this means, that one error in 8 sec. is one of 8*125*10E6

	 *	the same as BER = 10E-9

	 * Please note:

	 *	-> 9 errors in 8 seconds mean:

	 *	   BER = 9 * 10E-9  and this is

	 *	    < 10E-8, so the limit of 10E-8 is not reached!

	/*

	 * weighted average

 nSMT_EXT_CUTOFF */

 flag */

		/*

		 * "forgive 10e-2" if we cutoff so we can come

		 * up again ..

PC81b*/

 nSMT_EXT_CUTOFF */

 nSMT_EXT_CUTOFF */

/*

 * called by SMT to calculate LEM bit error rate

 flag */

/*

 * LEM functions

	/* Do NOT reset mib->fddiPORTLer_Estimate here. It is called too

	 * often.

 clear error counter */

 enable LE INT */

/*

 * PCM pseudo code

 * receive actions are called AFTER the bit n is received,

 * i.e. if pc_rcode_actions(5) is called, bit 6 is the next bit to be received

/*

 * PCM pseudo code 5.1 .. 6.1

 reevaluate the selection criteria (wc_flag) */

 50ms */

 500ms */

 neighbor intends to have MAC on output */ ;

 neighbor does not intend to have MAC on output */ ;

/*

 * PCM pseudo code 5.1 .. 6.1

 no escape used */

 Accept connection */

 Reject */

 Reject */

 Reject */

 Reject */

		/*

		 * detect undesirable connection attempt event

 long */

 medium */

 short */

				/*

				 * Implementers choice: use medium

				 * instead of short when undesired

				 * connection attempt is made.

 medium */

 extended */

 we do NOT have a MAC for LCT */

 Don't request MAC loopback */

			/*

			 * MAC intended on output

			/*

			 * MAC intended on output

/*

 * return status twisted (called by SMT)

/*

 * return status	(called by SMT)

 *	type

 *	state

 *	remote phy type

 *	remote mac yes/no

 remote PHY type and MAC - set only if active */

 our PHY type */

/*

 * return rooted station status (called by SMT)

/*

 * Interrupt actions for PLC & PCM events

 int np;	PHY index */

 SUPERNET_3 */

 elastic buff. det. over-|underflow*/

		/*

		 * Check whether the SRF Condition occurred.

			/*

			 * This is the real Elasticity Error.

			 * More than one in a row are treated as a

			 * single one.

			 * Only count this in the active state.

			/*

			 * Prevent counter from being wrapped after

			 * hanging years in that interrupt.

 Ebuf continuous error */

			/*

			 * This interrupt remeained high for at least

			 * 1000 consecutive interrupt calls.

			 *

			 * This is caused by a hardware error of the

			 * ORION part of the Supernet III chipset.

			 *

			 * Disable this bit from the mask.

			/*

			 * Disconnect from the ring.

			 * Call the driver with the reset indication.

			/*

			 * Make an error log entry.

			/*

			 * Indicate the Reset.

 SUPERNET_3 */

 Reset the continuous error variable */

 reset Ebuf continuous error */

 physical layer invalid signal */

 violation symbol counter has incr.*/

 dep. on PLC_CNTRL_A's MINI_CTR_INT*/

 link error event counter */

		/*

		 * note: PL_LINK_ERR_CTR MUST be read to clear it

 wrapped around */

			/* Note: Lem errors shall only be counted when

			 * link is ACTIVE or LCT is active.

 TPC timer reached zero */

			/*

			 * end of LCT

 LS == LS in PLC_CNTRL_B's MATCH_LS*/

 PCM has entered the BREAK state */

jd 05-Aug-1999 changed: Bug #10419 */

	/*

	 * If both CODE & ENABLE are set ignore enable

 receive last sign.-bit | LCT complete */

 asserted SC_JOIN, scrub.completed*/

 MLS while PC8_ACTIV || PC2_TRACE */

PC22b*/

	/*

	 * filter PLC glitch ???

	 * QLS || HLS only while in PC2_TRACE state

PC22a*/

 TNE: length of noise events */

 break_required (TNE > NS_Max) */

 NP has requested to r/w an inv reg*/

		/*

		 * It's a bug by AMD

 pin inactiv (GND) */

 p. error dedected on TX9-0 inp */

 carrier detected */

/*

 * fill state struct

 SPDX-License-Identifier: GPL-2.0-or-later

/******************************************************************************

 *

 *	(C)Copyright 1998,1999 SysKonnect,

 *	a business unit of Schneider & Koch & Co. Datensysteme GmbH.

 *

 *	See the file "skfddi.c" for further information.

 *

 *	The information in this file is provided "AS IS" without warranty.

 *

/*

	Init SMT

	call all module level initialization routines

 define global debug variable */

 MULT_OEM */

 MULT_OEM */

/*

 * Set OEM specific values

 *

 * Can not be called in smt_reset_defaults, because it is not sure that

 * the OEM ID is already defined.

	/*

	 * set IBM specific values

/*

 * Init SMT

 u_char *mac_addr;	canonical address or NULL */

 DEBUG && !DEBUG_BRD */

 First initialize the ports mib->pointers */

 HW driver */

 update values that depend on s.sas */

 event queue */

 evcs in MIB */

 no SLIM_SMT */

 timer package */

 SMT frame manager */

 PCM state machine */

 ECM state machine */

 CFM state machine */

 RMT state machine */

 PCM A state machine */

 ECM state machine */

 CFM state machine */

 RMT state machine */

 NIF FSM etc */

 PNMI initialization */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * File Name:

 *   skfddi.c

 *

 * Copyright Information:

 *   Copyright SysKonnect 1998,1999.

 *

 * The information in this file is provided "AS IS" without warranty.

 *

 * Abstract:

 *   A Linux device driver supporting the SysKonnect FDDI PCI controller

 *   familie.

 *

 * Maintainers:

 *   CG    Christoph Goos (cgoos@syskonnect.de)

 *

 * Contributors:

 *   DM    David S. Miller

 *

 * Address all question to:

 *   linux@syskonnect.de

 *

 * The technical manual for the adapters is available from SysKonnect's

 * web pages: www.syskonnect.com

 * Goto "Support" and search Knowledge Base for "manual".

 *

 * Driver Architecture:

 *   The driver architecture is based on the DEC FDDI driver by

 *   Lawrence V. Stefani and several ethernet drivers.

 *   I also used an existing Windows NT miniport driver.

 *   All hardware dependent functions are handled by the SysKonnect

 *   Hardware Module.

 *   The only headerfiles that are directly related to this source

 *   are skfddi.c, h/types.h, h/osdef1st.h, h/targetos.h.

 *   The others belong to the SysKonnect FDDI Hardware Module and

 *   should better not be changed.

 *

 * Modification History:

 *              Date            Name    Description

 *              02-Mar-98       CG	Created.

 *

 *		10-Mar-99	CG	Support for 2.2.x added.

 *		25-Mar-99	CG	Corrected IRQ routing for SMP (APIC)

 *		26-Oct-99	CG	Fixed compilation error on 2.2.13

 *		12-Nov-99	CG	Source code release

 *		22-Nov-99	CG	Included in kernel source.

 *		07-May-00	DM	64 bit fixes, new dma interface

 *		31-Jul-03	DB	Audit copy_*_user in skfp_ioctl

 *					  Daniele Bellucci <bellucda@tiscali.it>

 *		03-Dec-03	SH	Convert to PCI device model

 *

 * Compilation options (-Dxxx):

 *              DRIVERDEBUG     print lots of messages to log file

 *              DUMPPACKETS     print received/transmitted packets to logfile

 * 

 * Tested cpu architectures:

 *	- i386

 *	- sparc64

 Version information string - should be updated prior to */

 each new release!!! */

 Include files */

 undo Linux definition

 Define module-wide (static) routines

 Functions needed by the hardware module

 External functions from the hardware module

 Terminating entry */

 Define module-wide (static) variables

 total number of adapters configured */

/*

 * =================

 * = skfp_init_one =

 * =================

 *   

 * Overview:

 *   Probes for supported FDDI PCI controllers

 *  

 * Returns:

 *   Condition code

 *       

 * Arguments:

 *   pdev - pointer to PCI device information

 *

 * Functional Description:

 *   This is now called by PCI driver registration process

 *   for each board found.

 *   

 * Return Codes:

 *   0           - This device (fddi0, fddi1, etc) configured successfully

 *   -ENODEV - No devices present, or no SysKonnect FDDI PCI device

 *                         present for this device name

 *

 *

 * Side Effects:

 *   Device structures for FDDI adapters (fddi0, fddi1, etc) are

 *   initialized and the board resources are read and stored in

 *   the device structure.

 board pointer */

 Initialize board structure with bus-specific info */

/*

 * Called for each adapter board from pci_unregister_driver

/*

 * ====================

 * = skfp_driver_init =

 * ====================

 *   

 * Overview:

 *   Initializes remaining adapter board structure information

 *   and makes sure adapter is in a safe state prior to skfp_open().

 *  

 * Returns:

 *   Condition code

 *       

 * Arguments:

 *   dev - pointer to device information

 *

 * Functional Description:

 *   This function allocates additional resources such as the host memory

 *   blocks needed by the adapter.

 *   The adapter is also reset. The OS must call skfp_open() to open 

 *   the adapter and bring it on-line.

 *

 * Return Codes:

 *    0 - initialization succeeded

 *   -1 - initialization failed

 set the io address in private structures

 Get the interrupt level from the PCI Configuration Table

 Allocate invalid frame

 Determine the required size of the 'shared' memory area.

 for descriptor alignment

 Reset adapter.

 skfp_driver_init

/*

 * =============

 * = skfp_open =

 * =============

 *   

 * Overview:

 *   Opens the adapter

 *  

 * Returns:

 *   Condition code

 *       

 * Arguments:

 *   dev - pointer to device information

 *

 * Functional Description:

 *   This function brings the adapter to an operational state.

 *

 * Return Codes:

 *   0           - Adapter was successfully opened

 *   -EAGAIN - Could not register IRQ

 Register IRQ - support shared interrupts by passing device ptr */

	/*

	 * Set current address to factory MAC address

	 *

	 * Note: We've already done this step in skfp_driver_init.

	 *       However, it's possible that a user has set a node

	 *               address override, then closed and reopened the

	 *               adapter.  Unless we reset the device address field

	 *               now, we'll continue to use the existing modified

	 *               address.

 Clear local multicast address tables */

 Disable promiscuous filter settings */

 skfp_open

/*

 * ==============

 * = skfp_close =

 * ==============

 *   

 * Overview:

 *   Closes the device/module.

 *  

 * Returns:

 *   Condition code

 *       

 * Arguments:

 *   dev - pointer to device information

 *

 * Functional Description:

 *   This routine closes the adapter and brings it to a safe state.

 *   The interrupt service routine is deregistered with the OS.

 *   The adapter can be opened again with another call to skfp_open().

 *

 * Return Codes:

 *   Always return 0.

 *

 * Assumptions:

 *   No further requests for this adapter are made after this routine is

 *   called.  skfp_open() can be called to reset and reinitialize the

 *   adapter.

 Deregister (free) IRQ */

 skfp_close

/*

 * ==================

 * = skfp_interrupt =

 * ==================

 *   

 * Overview:

 *   Interrupt processing routine

 *  

 * Returns:

 *   None

 *       

 * Arguments:

 *   irq        - interrupt vector

 *   dev_id     - pointer to device information

 *

 * Functional Description:

 *   This routine calls the interrupt processing routine for this adapter.  It

 *   disables and reenables adapter interrupts, as appropriate.  We can support

 *   shared interrupts since the incoming dev_id pointer provides our device

 *   structure context. All the real work is done in the hardware module.

 *

 * Return Codes:

 *   None

 *

 * Assumptions:

 *   The interrupt acknowledgement at the hardware level (eg. ACKing the PIC

 *   on Intel-based systems) is done by the operating system outside this

 *   routine.

 *

 *       System interrupts are enabled through this call.

 *

 * Side Effects:

 *   Interrupts are disabled, then reenabled at the adapter.

 private board structure pointer */

 IRQs enabled or disabled ?

 IRQs are disabled: must be shared interrupt

 Note: At this point, IRQs are enabled.

 IRQ?

 Adapter did not issue an IRQ: must be shared interrupt

 Disable IRQs from our adapter.

 Call interrupt handler in hardware module (HWM).

 Enable IRQs from our adapter.

 skfp_interrupt

/*

 * ======================

 * = skfp_ctl_get_stats =

 * ======================

 *   

 * Overview:

 *   Get statistics for FDDI adapter

 *  

 * Returns:

 *   Pointer to FDDI statistics structure

 *       

 * Arguments:

 *   dev - pointer to device information

 *

 * Functional Description:

 *   Gets current MIB objects from adapter, then

 *   returns FDDI statistics structure as defined

 *   in if_fddi.h.

 *

 *   Note: Since the FDDI statistics structure is

 *   still new and the device structure doesn't

 *   have an FDDI-specific get statistics handler,

 *   we'll return the FDDI statistics structure as

 *   a pointer to an Ethernet statistics structure.

 *   That way, at least the first part of the statistics

 *   structure can be decoded properly.

 *   We'll have to pay attention to this routine as the

 *   device structure becomes more mature and LAN media

 *   independent.

 *

 Fill the bp->stats structure with driver-maintained counters */

 goos: need to fill out fddi statistic

 Get FDDI SMT MIB objects */

 Fill the bp->stats structure with the SMT MIB object values */

 Fill the bp->stats structure with the FDDI counter values */

 ctl_get_stat

/*

 * ==============================

 * = skfp_ctl_set_multicast_list =

 * ==============================

 *   

 * Overview:

 *   Enable/Disable LLC frame promiscuous mode reception

 *   on the adapter and/or update multicast address table.

 *  

 * Returns:

 *   None

 *       

 * Arguments:

 *   dev - pointer to device information

 *

 * Functional Description:

 *   This function acquires the driver lock and only calls

 *   skfp_ctl_set_multicast_list_wo_lock then.

 *   This routine follows a fairly simple algorithm for setting the

 *   adapter filters and CAM:

 *

 *      if IFF_PROMISC flag is set

 *              enable promiscuous mode

 *      else

 *              disable promiscuous mode

 *              if number of multicast addresses <= max. multicast number

 *                      add mc addresses to adapter table

 *              else

 *                      enable promiscuous mode

 *              update adapter filters

 *

 * Assumptions:

 *   Multicast addresses are presented in canonical (LSB) format.

 *

 * Side Effects:

 *   On-board adapter filters are updated.

 skfp_ctl_set_multicast_list

 Enable promiscuous mode, if necessary */

 Else, update multicast address table */

 Reset all MC addresses

 use exact filtering */

 point to first multicast addr

 more MC addresses than HW supports

 no MC addresses

 Update adapter filters */

 skfp_ctl_set_multicast_list_wo_lock

/*

 * ===========================

 * = skfp_ctl_set_mac_address =

 * ===========================

 *   

 * Overview:

 *   set new mac address on adapter and update dev_addr field in device table.

 *  

 * Returns:

 *   None

 *       

 * Arguments:

 *   dev  - pointer to device information

 *   addr - pointer to sockaddr structure containing unicast address to set

 *

 * Assumptions:

 *   The address pointed to by addr->sa_data is a valid unicast

 *   address and is presented in canonical (LSB) format.

 always return zero */

 skfp_ctl_set_mac_address

/*

 * =======================

 * = skfp_siocdevprivate =

 * =======================

 *   

 * Overview:

 *

 * Perform IOCTL call functions here. Some are privileged operations and the

 * effective uid is checked in those cases.

 *  

 * Returns:

 *   status value

 *   0 - success

 *   other - failure

 *       

 * Arguments:

 *   dev  - pointer to device information

 *   rq - pointer to ioctl request structure

 *   cmd - ?

 *

 Get the driver statistics */

 Zero out the driver statistics */

 switch

 skfp_ioctl

/*

 * =====================

 * = skfp_send_pkt     =

 * =====================

 *   

 * Overview:

 *   Queues a packet for transmission and try to transmit it.

 *  

 * Returns:

 *   Condition code

 *       

 * Arguments:

 *   skb - pointer to sk_buff to queue for transmission

 *   dev - pointer to device information

 *

 * Functional Description:

 *   Here we assume that an incoming skb transmit request

 *   is contained in a single physically contiguous buffer

 *   in which the virtual address of the start of packet

 *   (skb->data) can be converted to a physical address

 *   by using dma_map_single().

 *

 *   We have an internal queue for packets we can not send 

 *   immediately. Packets in this queue can be given to the 

 *   adapter if transmit buffers are freed.

 *

 *   We can't free the skb until after it's been DMA'd

 *   out by the adapter, so we'll keep it in the driver and

 *   return it in mac_drv_tx_complete.

 *

 * Return Codes:

 *   0 - driver has queued and/or sent packet

 *       1 - caller should requeue the sk_buff for later transmission

 *

 * Assumptions:

 *   The entire packet is stored in one physically

 *   contiguous buffer which is not cached and whose

 *   32-bit physical address can be determined.

 *

 *   It's vital that this routine is NOT reentered for the

 *   same board and that the OS is not in another section of

 *   code (eg. skfp_interrupt) for the same board on a

 *   different thread.

 *

 * Side Effects:

 *   None

	/*

	 * Verify that incoming transmit request is OK

	 *

	 * Note: The packet size check is consistent with other

	 *               Linux device drivers, although the correct packet

	 *               size should be verified before calling the

	 *               transmit routine.

 bump error counter */

 dequeue packets from xmt queue and send them

 return "success" */

 return with tbusy set: queue full

 skfp_send_pkt

/*

 * =======================

 * = send_queued_packets =

 * =======================

 *   

 * Overview:

 *   Send packets from the driver queue as long as there are some and

 *   transmit resources are available.

 *  

 * Returns:

 *   None

 *       

 * Arguments:

 *   smc - pointer to smc (adapter) structure

 *

 * Functional Description:

 *   Take a packet from queue if there is any. If not, then we are done.

 *   Check if there are resources to send the packet. If not, requeue it

 *   and exit. 

 *   Set packet descriptor flags and give packet to adapter.

 *   Check if any send resources can be freed (we do not use the

 *   transmit complete interrupt).

 Current TxD.

 HWM tx frame status.

 send first buffer from queue

 queue empty !

 Check if the frame may/must be sent as a synchronous frame.

 It's an LLC frame.

 No bandwidth available.

 Bandwidth is available.

 Send as sync. frame.

 ESS

 Unable to send the frame.

 Ring is down.

 Note: We will retry the operation as soon as

 transmit resources become available.

 Packet has been queued.

 if (unable to send frame)

 one packet less in local queue

 source address in packet ?

 save skb

 save dma mapping

 local only frame

 for

 never reached

 send_queued_packets

/************************

 * 

 * CheckSourceAddress

 *

 * Verify if the source address is set. Insert it if necessary.

 *

 source routing bit

 CheckSourceAddress

/************************

 *

 *	ResetAdapter

 *

 *	Reset the adapter and bring it back to operational mode.

 * Args

 *	smc - A pointer to the SMT context struct.

 * Out

 *	Nothing.

 *

 Stop the adapter.

 Stop all activity.

 Clear the transmit and receive descriptor queues.

 Restart the adapter.

 Initialize the SMT module.

 Initialize the hardware.

 Insert into the ring again.

 Restore original receive mode (multicasts, promiscuous, etc.).

 ResetAdapter

--------------- functions called by hardware module ----------------

/************************

 *

 *	llc_restart_tx

 *

 *	The hardware driver calls this routine when the transmit complete

 *	interrupt bits (end of frame) for the synchronous or asynchronous

 *	queue is set.

 *

 * NOTE The hardware driver calls this function also if no packets are queued.

 *	The routine must be able to handle this case.

 * Args

 *	smc - A pointer to the SMT context struct.

 * Out

 *	Nothing.

 *

 Try to send queued packets

 system may send again if it was blocked

 llc_restart_tx

/************************

 *

 *	mac_drv_get_space

 *

 *	The hardware module calls this function to allocate the memory

 *	for the SMT MBufs if the define MB_OUTSIDE_SMC is specified.

 * Args

 *	smc - A pointer to the SMT context struct.

 *

 *	size - Size of memory in bytes to allocate.

 * Out

 *	!= 0	A pointer to the virtual address of the allocated memory.

 *	== 0	Allocation error.

 *

 Move heap pointer.

 mac_drv_get_space

/************************

 *

 *	mac_drv_get_desc_mem

 *

 *	This function is called by the hardware dependent module.

 *	It allocates the memory for the RxD and TxD descriptors.

 *

 *	This memory must be non-cached, non-movable and non-swappable.

 *	This memory should start at a physical page boundary.

 * Args

 *	smc - A pointer to the SMT context struct.

 *

 *	size - Size of memory in bytes to allocate.

 * Out

 *	!= 0	A pointer to the virtual address of the allocated memory.

 *	== 0	Allocation error.

 *

 Descriptor memory must be aligned on 16-byte boundary.

 mac_drv_get_desc_mem

/************************

 *

 *	mac_drv_virt2phys

 *

 *	Get the physical address of a given virtual address.

 * Args

 *	smc - A pointer to the SMT context struct.

 *

 *	virt - A (virtual) pointer into our 'shared' memory area.

 * Out

 *	Physical address of the given virtual address.

 *

 mac_drv_virt2phys

/************************

 *

 *	dma_master

 *

 *	The HWM calls this function, when the driver leads through a DMA

 *	transfer. If the OS-specific module must prepare the system hardware

 *	for the DMA transfer, it should do it in this function.

 *

 *	The hardware module calls this dma_master if it wants to send an SMT

 *	frame.  This means that the virt address passed in here is part of

 *      the 'shared' memory area.

 * Args

 *	smc - A pointer to the SMT context struct.

 *

 *	virt - The virtual address of the data.

 *

 *	len - The length in bytes of the data.

 *

 *	flag - Indicates the transmit direction and the buffer type:

 *		DMA_RD	(0x01)	system RAM ==> adapter buffer memory

 *		DMA_WR	(0x02)	adapter buffer memory ==> system RAM

 *		SMT_BUF (0x80)	SMT buffer

 *

 *	>> NOTE: SMT_BUF and DMA_RD are always set for PCI. <<

 * Out

 *	Returns the pyhsical address for the DMA transfer.

 *

 dma_master

/************************

 *

 *	dma_complete

 *

 *	The hardware module calls this routine when it has completed a DMA

 *	transfer. If the operating system dependent module has set up the DMA

 *	channel via dma_master() (e.g. Windows NT or AIX) it should clean up

 *	the DMA channel.

 * Args

 *	smc - A pointer to the SMT context struct.

 *

 *	descr - A pointer to a TxD or RxD, respectively.

 *

 *	flag - Indicates the DMA transfer direction / SMT buffer:

 *		DMA_RD	(0x01)	system RAM ==> adapter buffer memory

 *		DMA_WR	(0x02)	adapter buffer memory ==> system RAM

 *		SMT_BUF (0x80)	SMT buffer (managed by HWM)

 * Out

 *	Nothing.

 *

	/* For TX buffers, there are two cases.  If it is an SMT transmit

	 * buffer, there is nothing to do since we use consistent memory

	 * for the 'shared' memory area.  The other case is for normal

	 * transmit packets given to us by the networking stack, and in

	 * that case we cleanup the PCI DMA mapping in mac_drv_tx_complete

	 * below.

	 *

	 * For RX buffers, we have to unmap dynamic PCI DMA mappings here

	 * because the hardware module is about to potentially look at

	 * the contents of the buffer.  If we did not call the PCI DMA

	 * unmap first, the hardware module could read inconsistent data.

 If SKB is NULL, we used the local buffer. */

 dma_complete

/************************

 *

 *	mac_drv_tx_complete

 *

 *	Transmit of a packet is complete. Release the tx staging buffer.

 *

 * Args

 *	smc - A pointer to the SMT context struct.

 *

 *	txd - A pointer to the last TxD which is used by the frame.

 * Out

 *	Returns nothing.

 *

 Check if this TxD points to a skb

 release the DMA mapping

 Count transmitted packets.

 Count bytes

 free the skb

 mac_drv_tx_complete

/************************

 *

 * dump packets to logfile

 *

 dump_data

 DUMPPACKETS

/************************

 *

 *	mac_drv_rx_complete

 *

 *	The hardware module calls this function if an LLC frame is received

 *	in a receive buffer. Also the SMT, NSA, and directed beacon frames

 *	from the network will be passed to the LLC layer by this function

 *	if passing is enabled.

 *

 *	mac_drv_rx_complete forwards the frame to the LLC layer if it should

 *	be received. It also fills the RxD ring with new receive buffers if

 *	some can be queued.

 * Args

 *	smc - A pointer to the SMT context struct.

 *

 *	rxd - A pointer to the first RxD which is used by the receive frame.

 *

 *	frag_count - Count of RxDs used by the received frame.

 *

 *	len - Frame length.

 * Out

 *	Nothing.

 *

 This is not allowed to happen.

 Re-use the given RXD(s).

 The DMA mapping was released in dma_complete above.

	/*

	 * FDDI Frame format:

	 * +-------+-------+-------+------------+--------+------------+

	 * | FC[1] | DA[6] | SA[6] | RIF[0..18] | LLC[3] | Data[0..n] |

	 * +-------+-------+-------+------------+--------+------------+

	 *

	 * FC = Frame Control

	 * DA = Destination Address

	 * SA = Source Address

	 * RIF = Routing Information Field

	 * LLC = Logical Link Control

 Remove Routing Information Field (RIF), if present.

 goos: RIF removal has still to be tested

 Get RIF length from Routing Control (RC) field.

 Point behind MAC header.

 Discard the frame.

 Clear RII bit.

 regions overlap

 adjust sbd->data pointer

 Count statistics.

 Count indicated receive

 packets.

 Count bytes.

 virt points to header again

 Check group (multicast) bit.

 deliver frame to system

 Count receive packets

 not indicated.

 mac_drv_rx_complete

/************************

 *

 *	mac_drv_requeue_rxd

 *

 *	The hardware module calls this function to request the OS-specific

 *	module to queue the receive buffer(s) represented by the pointer

 *	to the RxD and the frag_count into the receive queue again. This

 *	buffer was filled with an invalid frame or an SMT frame.

 * Args

 *	smc - A pointer to the SMT context struct.

 *

 *	rxd - A pointer to the first RxD which is used by the receive frame.

 *

 *	frag_count - Count of RxDs used by the received frame.

 * Out

 *	Nothing.

 *

 This is not allowed to happen.

 this should not happen

 we got a skb

 no skb available, use local buffer

 we use skb from old rxd

 mac_drv_requeue_rxd

/************************

 *

 *	mac_drv_fill_rxd

 *

 *	The hardware module calls this function at initialization time

 *	to fill the RxD ring with receive buffers. It is also called by

 *	mac_drv_rx_complete if rx_free is large enough to queue some new

 *	receive buffers into the RxD ring. mac_drv_fill_rxd queues new

 *	receive buffers as long as enough RxDs and receive buffers are

 *	available.

 * Args

 *	smc - A pointer to the SMT context struct.

 * Out

 *	Nothing.

 *

 Walk through the list of free receive buffers, passing receive

 buffers to the HWM as long as RXDs are available.

 Check if there is any RXD left.

 we got a skb

 no skb available, use local buffer

 System has run out of buffer memory, but we want to

 keep the receiver running in hope of better times.

 Multiple descriptors may point to this local buffer,

 so data in it must be considered invalid.

 Pass receive buffer to HWM.

 mac_drv_fill_rxd

/************************

 *

 *	mac_drv_clear_rxd

 *

 *	The hardware module calls this function to release unused

 *	receive buffers.

 * Args

 *	smc - A pointer to the SMT context struct.

 *

 *	rxd - A pointer to the first RxD which is used by the receive buffer.

 *

 *	frag_count - Count of RxDs used by the receive buffer.

 * Out

 *	Nothing.

 *

 This is not allowed to happen.

 Next RXD.

 mac_drv_clear_rxd

/************************

 *

 *	mac_drv_rx_init

 *

 *	The hardware module calls this routine when an SMT or NSA frame of the

 *	local SMT should be delivered to the LLC layer.

 *

 *	It is necessary to have this function, because there is no other way to

 *	copy the contents of SMT MBufs into receive buffers.

 *

 *	mac_drv_rx_init allocates the required target memory for this frame,

 *	and receives the frame fragment by fragment by calling mac_drv_rx_frag.

 * Args

 *	smc - A pointer to the SMT context struct.

 *

 *	len - The length (in bytes) of the received frame (FC, DA, SA, Data).

 *

 *	fc - The Frame Control field of the received frame.

 *

 *	look_ahead - A pointer to the lookahead data buffer (may be NULL).

 *

 *	la_len - The length of the lookahead data stored in the lookahead

 *	buffer (may be zero).

 * Out

 *	Always returns zero (0).

 *

 "Received" a SMT or NSA frame of the local SMT.

 deliver frame to system

 mac_drv_rx_init

/************************

 *

 *	smt_timer_poll

 *

 *	This routine is called periodically by the SMT module to clean up the

 *	driver.

 *

 *	Return any queued frames back to the upper protocol layers if the ring

 *	is down.

 * Args

 *	smc - A pointer to the SMT context struct.

 * Out

 *	Nothing.

 *

 smt_timer_poll

/************************

 *

 *	ring_status_indication

 *

 *	This function indicates a change of the ring state.

 * Args

 *	smc - A pointer to the SMT context struct.

 *

 *	status - The current ring status.

 * Out

 *	Nothing.

 *

 ring_status_indication

/************************

 *

 *	smt_get_time

 *

 *	Gets the current time from the system.

 * Args

 *	None.

 * Out

 *	The current time in TICKS_PER_SECOND.

 *

 *	TICKS_PER_SECOND has the unit 'count of timer ticks per second'. It is

 *	defined in "targetos.h". The definition of TICKS_PER_SECOND must comply

 *	to the time returned by smt_get_time().

 *

 smt_get_time

/************************

 *

 *	smt_stat_counter

 *

 *	Status counter update (ring_op, fifo full).

 * Args

 *	smc - A pointer to the SMT context struct.

 *

 *	stat -	= 0: A ring operational change occurred.

 *		= 1: The FORMAC FIFO buffer is full / FIFO overflow.

 * Out

 *	Nothing.

 *

      BOOLEAN RingIsUp ;

 smt_stat_counter

/************************

 *

 *	cfm_state_change

 *

 *	Sets CFM state in custom statistics.

 * Args

 *	smc - A pointer to the SMT context struct.

 *

 *	c_state - Possible values are:

 *

 *		EC0_OUT, EC1_IN, EC2_TRACE, EC3_LEAVE, EC4_PATH_TEST,

 *		EC5_INSERT, EC6_CHECK, EC7_DEINSERT

 * Out

 *	Nothing.

 *

 DRIVERDEBUG

 cfm_state_change

/************************

 *

 *	ecm_state_change

 *

 *	Sets ECM state in custom statistics.

 * Args

 *	smc - A pointer to the SMT context struct.

 *

 *	e_state - Possible values are:

 *

 *		SC0_ISOLATED, SC1_WRAP_A (5), SC2_WRAP_B (6), SC4_THRU_A (12),

 *		SC5_THRU_B (7), SC7_WRAP_S (8)

 * Out

 *	Nothing.

 *

DRIVERDEBUG

 ecm_state_change

/************************

 *

 *	rmt_state_change

 *

 *	Sets RMT state in custom statistics.

 * Args

 *	smc - A pointer to the SMT context struct.

 *

 *	r_state - Possible values are:

 *

 *		RM0_ISOLATED, RM1_NON_OP, RM2_RING_OP, RM3_DETECT,

 *		RM4_NON_OP_DUP, RM5_RING_OP_DUP, RM6_DIRECTED, RM7_TRACE

 * Out

 *	Nothing.

 *

 DRIVERDEBUG

 rmt_state_change

/************************

 *

 *	drv_reset_indication

 *

 *	This function is called by the SMT when it has detected a severe

 *	hardware problem. The driver should perform a reset on the adapter

 *	as soon as possible, but not from within this function.

 * Args

 *	smc - A pointer to the SMT context struct.

 * Out

 *	Nothing.

 *

 Set flag.

 drv_reset_indication

 SPDX-License-Identifier: GPL-2.0-or-later

/******************************************************************************

 *

 *	(C)Copyright 1998,1999 SysKonnect,

 *	a business unit of Schneider & Koch & Co. Datensysteme GmbH.

 *

 *	See the file "skfddi.c" for further information.

 *

 *	The information in this file is provided "AS IS" without warranty.

 *

/*

	SMT ECM

	Entity Coordination Management

	Hardware independent state machine

/*

 * Hardware independent state machine implemantation

 * The following external SMT functions are referenced :

 *

 * 		queue_event()

 * 		smt_timer_start()

 * 		smt_timer_stop()

 *

 * 	The following external HW dependent functions are referenced :

 * 		sm_pm_bypass_req()

 * 		sm_pm_get_ls()

 * 

 * 	The following HW dependent events are required :

 *		NONE

 *

/*

 * FSM Macros

 not inserted */

 inserted */

 tracing */

 leaving the ring */

 performing path test */

 bypass being turned on */

 checking bypass */

 bypass being turnde off */

/*

 * symbolic state names

/*

 * symbolic event names

/*

 * all Globals  are defined in smc.h

 * struct s_ecm

/*

 * function declarations

/*

	init ECM state machine

	clear all ECM vars and flags

/*

	ECM state machine

	called by dispatcher



	do

		display state change

		process event

	until SM is stable

/*

	process ECM event

 current line state PHY A */

 current line state PHY B */

 ports */

 For AIX event notification: */

 Is a disconnect  command remotely issued ? */

jd 05-Aug-1999 Bug #10419 "Port Disconnect fails at Dup MAc Cond."*/

		/*

		 * We do not perform a path test

EC01*/

EC05*/

EC12*/

EC13*/

EC22*/

EC23a*/

EC23b*/

EC23c*/

 Trace_Max is expired */

 -> send AIX_EVENT */

EC30*/

EC34*/

EC31*/

EC33*/

			/*

			 * stay in state - state will be left via timeout

EC37*/

 now perform path test ... just a simulation */

 path test done delay */

EC40a*/

EC40b*/

EC41*/

EC47a*/

EC47b*/

EC56*/

EC57*/

		/*

		 * in EC6_CHECK, we *POLL* the line state !

		 * check whether both bypass switches have switched.

 flag to pcm: report Q/HLS */

EC61*/

EC66*/

EC67*/

			/*

			 * restart poll

EC70*/

EC75*/

/*

 * trace propagation actions for SAS & DAS

 PA or PB */

 PA or PB */

 trace initiatior */

 trace propagate upstream */

 trace propagate upstream */

 signal trace termination */

/*

 * trace propagation actions for Concentrator

 signal trace termination */

 trace propagate upstream */

/*

 * SMT timer interface

 *	start ECM timer

/*

 * SMT timer interface

 *	stop ECM timer

 SPDX-License-Identifier: GPL-2.0-or-later

/******************************************************************************

 *

 *	(C)Copyright 1998,1999 SysKonnect,

 *	a business unit of Schneider & Koch & Co. Datensysteme GmbH.

 *

 *	See the file "skfddi.c" for further information.

 *

 *	The information in this file is provided "AS IS" without warranty.

 *

/*

 * Timer Driver for FBI board (timer chip 82C54)

/*

 * Modifications:

 *

 *	28-Jun-1994 sw	Edit v1.6.

 *			MCA: Added support for the SK-NET FDDI-FM2 adapter. The

 *			 following functions have been added(+) or modified(*):

 *			 hwt_start(*), hwt_stop(*), hwt_restart(*), hwt_read(*)

/*

 * Prototypes of local functions.

 28-Jun-1994 sw - Note: hwt_restart() is also used in module 'drvfbi.c'. */

static void hwt_restart() ; */

/************************

 *

 *	hwt_start

 *

 *	Start hardware timer (clock ticks are 16us).

 *

 *	void hwt_start(

 *		struct s_smc *smc,

 *		u_long time) ;

 * In

 *	smc - A pointer to the SMT Context structure.

 *

 *	time - The time in units of 16us to load the timer with.

 * Out

 *	Nothing.

 *

	/*

	 * if time < 16 us

	 *	time = 16 us

 Load timer value. */

 Start timer. */

/************************

 *

 *	hwt_stop

 *

 *	Stop hardware timer.

 *

 *	void hwt_stop(

 *		struct s_smc *smc) ;

 * In

 *	smc - A pointer to the SMT Context structure.

 * Out

 *	Nothing.

 *

/************************

 *

 *	hwt_init

 *

 *	Initialize hardware timer.

 *

 *	void hwt_init(

 *		struct s_smc *smc) ;

 * In

 *	smc - A pointer to the SMT Context structure.

 * Out

 *	Nothing.

 *

/************************

 *

 *	hwt_restart

 *

 *	Clear timer interrupt.

 *

 *	void hwt_restart(

 *		struct s_smc *smc) ;

 * In

 *	smc - A pointer to the SMT Context structure.

 * Out

 *	Nothing.

 *

/************************

 *

 *	hwt_read

 *

 *	Stop hardware timer and read time elapsed since last start.

 *

 *	u_long hwt_read(smc) ;

 * In

 *	smc - A pointer to the SMT Context structure.

 * Out

 *	The elapsed time since last start in units of 16us.

 *

 Check if timer expired (or wraparound). */

/************************

 *

 *	hwt_quick_read

 *

 *	Stop hardware timer and read timer value and start the timer again.

 *

 *	u_long hwt_read(smc) ;

 * In

 *	smc - A pointer to the SMT Context structure.

 * Out

 *	current timer value in units of 80ns.

 *

/************************

 *

 *	hwt_wait_time(smc,start,duration)

 *

 *	This function returnes after the amount of time is elapsed

 *	since the start time.

 * 

 * para	start		start time

 *	duration	time to wait

 *

 * NOTE: The function will return immediately, if the timer is not

 *	 started

	/*

	 * check if timer is running

 SPDX-License-Identifier: GPL-2.0-or-later

/******************************************************************************

 *

 *	(C)Copyright 1998,1999 SysKonnect,

 *	a business unit of Schneider & Koch & Co. Datensysteme GmbH.

 *

 *	See the file "skfddi.c" for further information.

 *

 *	The information in this file is provided "AS IS" without warranty.

 *

/*

	SMT/CMT defaults

/*

 * defaults

/*

 * LCT errors threshold

 Forward declarations */

 See Struct smt_config */

 first RAF alc req after 3s */

 no SLIM_SMT */

/*

 * manufacturer data

	 01234567890123456789012345678901	*/

		/*

		 * set EVERYTHING to ZERO

		 * EXCEPT hw and os

	/*

	 * fddiSMTNonMaster_Ct and fddiSMTMaster_Ct are set in smt_fixup_mib

	 * s.sas is not set yet (is set in init driver)

 no hold,no wrap_ab*/

 separated */

	/*

	 * Path attributes

	/*

	 * Port attributes

		/*

		 * set MIB pointer in phy

 Attention: don't initialize mib pointer here! */

  It must be initialized during phase 2 */

		/*

		 * fddiPORTRequestedPaths are set in pcmplc.c

		 * we don't know the port type yet !

		/* Treq attribute changed remotely. So send an AIX_EVENT to the

		 * user

/*

 * determine new setting for operational value

 * if limit is lower than mib

 *	use limit

 * else

 *	use mib

 * NOTE : numbers are negative, negate comparison !

 SPDX-License-Identifier: GPL-2.0-or-later

/******************************************************************************

 *

 *	(C)Copyright 1998,1999 SysKonnect,

 *	a business unit of Schneider & Koch & Co. Datensysteme GmbH.

 *

 *	See the file "skfddi.c" for further information.

 *

 *	The information in this file is provided "AS IS" without warranty.

 *

/*

 * FORMAC+ Driver for tag mode

/*

 * prototypes for static function

 short address (n.u.) */

 short group address (n.u.) */

/*

 * define my address

/*

 * useful interrupt bits

 delete FM_SRBFL after tests */

	/*

	 * If the token counter is emulated it is updated in smt_event.

/*

 * write long value into buffer memory over memory data register (MDR),

/*

 * read long value from buffer memory over memory data register (MDR),

 needed for PCI to prevent from timeing violations */

	p = MDRR() ; */	
 smc->hw.mc_dummy = *((short volatile far *)(addr)))*/

 is used */

/*

 * clear buffer memory

 Erase the last byte too */

/*

 * set receive FIFO pointer

	/*

	 * initialize the pointer for receive queue 1

 RPR1 */

 SWPR1 */

 WPR1 */

 EARV1 */

	/*

	 * initialize the pointer for receive queue 2

/*

 * set transmit FIFO pointer

 reset transmit queues */

	/*

	 * initialize the pointer for asynchronous transmit queue

 RPXA0 */

 SWPXA0 */

 WPXA0 */

 EAA0 */

	/*

	 * initialize the pointer for synchronous transmit queue

/*

 * init memory buffer management registers

	/*

	 * set unused pointers or permanent pointers

 a1-send pointer */

/*

 * init rx pointer

	/*

	 * init all tx data structures for receive queue 1

	/*

	 * init all tx data structures for receive queue 2

/*

 * set the TSYNC register of the FORMAC to regulate synchronous transmission

/*

 * init all tx data structures

	/*

	 * init all tx data structures for the synchronous queue

	/*

	 * init all tx data structures for the asynchronous queue 0

	/*

	 * clear FORMAC+ frame-, lost- and error counter

	/*

	 * clear internal error counter structure

/*

 * set FORMAC address, and t_request

 set short address */

 set short group address */

 set r_request regs. (MSW & LSW of TRT ) */

/*

 * copy TX descriptor to buffer mem

 * append FC field and MAC frame

 * if more bit is set in descr

 *	append pointer to descriptor (endless loop)

 * else

 *	append 'end of chain' pointer

 u_long td;		 transmit descriptor */

 struct fddi_mac *mac; mac frame pointer */

 unsigned int off;	 start address within buffer memory */

 int len ;		 length of the frame including the FC */

 set memory address reg for writes */

 last word, set the tag bit */

 set the tag bit */

 write over memory data reg to buffer */

/*

	BEGIN_MANUAL_ENTRY(module;tests;3)

	How to test directed beacon frames

	----------------------------------------------------------------



	o Insert a break point in the function build_claim_beacon()

	  before calling copy_tx_mac() for building the claim frame.

	o Modify the RM3_DETECT case so that the RM6_DETECT state

	  will always entered from the RM3_DETECT state (function rmt_fsm(),

	  rmt.c)

	o Compile the driver.

	o Set the parameter TREQ in the protocol.ini or net.cfg to a

	  small value to make sure your station will win the claim

	  process.

	o Start the driver.

	o When you reach the break point, modify the SA and DA address

	  of the claim frame (e.g. SA = DA = 10005affffff).

	o When you see RM3_DETECT and RM6_DETECT, observe the direct

	  beacon frames on the UPPSLANA.



	END_MANUAL_ENTRY

	/*

	 * set UNA in frame

	 * enable FORMAC to send endless queue of directed beacon

	 * important: the UNA starts at byte 1 (not at byte 0)

 set memory address reg for writes */

 set the tag bit */

/*

	setup claim & beacon pointer

	NOTE :

		special frame packets end with a pointer to their own

		descriptor, and the MORE bit is set in the descriptor

	/*

	 * build claim packet

 DA == SA in claim frame */

 2's complement */

 set CLAIM start pointer */

	/*

	 * build beacon packet

 DA == 0 in beacon frame */

 set beacon start pointer */

	/*

	 * build directed beacon packet

	 * contains optional UNA

 multicast */

 end of claim/beacon queue */

 enable receive function */

 clear receive lock */

 clear s-frame lock */

 clear a-frame lock */

 set formac IMSK : 0 enables irq */

 Removed because the driver should use the ASICs TX complete IRQ. */

 The FORMACs tx complete IRQ should be used any longer */

/*

	BEGIN_MANUAL_ENTRY(if,func;others;4)



	void enable_tx_irq(smc, queue)

	struct s_smc *smc ;

	u_short	queue ;



Function	DOWNCALL	(SMT, fplustm.c)

		enable_tx_irq() enables the FORMACs transmit complete

		interrupt of the queue.



Para	queue	= QUEUE_S:	synchronous queue

		= QUEUE_A0:	asynchronous queue



Note	After any ring operational change the transmit complete

	interrupts are disabled.

	The operating system dependent module must enable

	the transmit complete interrupt of a queue,

		- when it queues the first frame,

		  because of no transmit resources are beeing

		  available and

		- when it escapes from the function llc_restart_tx

		  while some frames are still queued.



	END_MANUAL_ENTRY

 u_short queue; 0 = synchronous queue, 1 = asynchronous queue 0 */

/*

	BEGIN_MANUAL_ENTRY(if,func;others;4)



	void disable_tx_irq(smc, queue)

	struct s_smc *smc ;

	u_short	queue ;



Function	DOWNCALL	(SMT, fplustm.c)

		disable_tx_irq disables the FORMACs transmit complete

		interrupt of the queue



Para	queue	= QUEUE_S:	synchronous queue

		= QUEUE_A0:	asynchronous queue



Note	The operating system dependent module should disable

	the transmit complete interrupts if it escapes from the

	function llc_restart_tx and no frames are queued.



	END_MANUAL_ENTRY

 u_short queue; 0 = synchronous queue, 1 = asynchronous queue 0 */

 clear formac IMSK : 1 disables irq */

 enable receive function */

 TX queue */

 disable receive function */

 abort current transmit activity */

--------------------------- ISR handling ----------------------------------*/

/*

 * mac1_irq is in drvfbi.c

/*

 * mac2_irq:	status bits for the receive queue 1, and ring status

 * 		ring status indication bits

	/* (jd) 22-Feb-1999

	 * Restart 2_DMax Timer after end of claiming or beaconing

	/*

	 * XOR current st bits with the last to avoid useless RMT event queuing

 missed frame */

 recv. FIFO overflow */

 recv. buffer full */

		formac_rcv_restart(smc) ;	*/

		goto mac2_end ;			*/

		/*

		 * This is my claim and that claim is not detected as a

		 * duplicate one.

		/*

		 * If a duplicate claim frame (same SA but T_Bid != T_Req)

		 * this flag will be set.

		 * In the RMT state machine we need a RM_VALID_CLAIM event

		 * to do the appropriate state change.

		 * RM(34c)

		/*

		 * The MAC has found a 2. MAC with the same address.

		 * Signal dup_addr_test = failed to RMT state machine.

		 * RM(25)

 notice old status */

/*

 * mac3_irq:	receive queue 2 bits and address detection bits

 recv. FIFO overflow */

 recv. buffer full */

 parity error receive queue 2 */

 parity error receive queue 2 */

/*

 * take formac offline

 abort current transmit activity */

 disable receive function */

 FORMAC+ 'Initialize Mode' */

/*

 * bring formac online

/*

 * FORMAC+ full init. (tx, rx, timer, counter, claim & beacon)

 convert BCKL units to symbol time */

 make sure all PCI settings are correct */

 enable_formac(smc) ; */

	/*

	 * clear memory

 FORMAC+ init mode */

 FORMAC+ memory activ mode */

 Note: Mode register 2 is set here, incase parity is enabled. */

		/*

		 * reset the HPI, the Master and the BMUs

	/*

	 * set all pointers, frames etc

 set RX threshold */

 see Errata #SN2 Phantom receive overflow */

 switch on */

 set formac work mode */

 set timer */

	/*

	 * errata #22 fplus:

	 * T_MAX must not be FFFE

	 * or one of FFDF, FFB8, FF91 (-0x27 etc..)

 BugFix for report #10204 */

 clear s-frame lock */

 clear a-frame lock */

 clear receive lock */

 Auto unlock receice threshold for receive queue 1 and 2 */

 RT-Monitor */

		/*

		 * after 10ms, reset the BMUs and repair the rings

/*

 * called by CFM

/*

 * called by RMT

 * enable CLAIM/BEACON interrupts

 * (only called if these events are of interest, e.g. in DETECT state

 * the interrupt must not be permanently enabled

 * RMT calls this function periodically (timer driven polling)

 set formac IMSK : 0 enables irq */

 the driver must receive the directed beacons */

-------------------------- interface functions ----------------------------*/

/*

 * control MAC layer	(called by RMT)

 Add to make the MAC offline in RM0_ISOLATED state */

		/*

		 * no actions necessary, TREQ is already set

/*

 * multicast functions

	/*

	 * set own = can(user)

 not used */

 if !del save first free */

 return first free or NULL */

/*

	BEGIN_MANUAL_ENTRY(if,func;others;2)



	void mac_clear_multicast(smc)

	struct s_smc *smc ;



Function	DOWNCALL	(SMT, fplustm.c)

		Clear all multicast entries



	END_MANUAL_ENTRY()

 note the SMT addresses */

 will not be deleted */

/*

	BEGIN_MANUAL_ENTRY(if,func;others;2)



	int mac_add_multicast(smc,addr,can)

	struct s_smc *smc ;

	struct fddi_addr *addr ;

	int can ;



Function	DOWNCALL	(SMC, fplustm.c)

		Add an entry to the multicast table



Para	addr	pointer to a multicast address

	can	= 0:	the multicast address has the physical format

		= 1:	the multicast address has the canonical format

		| 0x80	permanent



Returns	0: success

	1: address table full



Note	After a 'driver reset' or a 'station set address' all

	entries of the multicast table are cleared.

	In this case the driver has to fill the multicast table again.

	After the operating system dependent module filled

	the multicast table it must call mac_update_multicast

	to activate the new multicast addresses!



	END_MANUAL_ENTRY()

	/*

	 * check if there are free table entries

	/*

	 * find empty slot

/*

 * mode

/*

	BEGIN_MANUAL_ENTRY(if,func;others;2)



	void mac_update_multicast(smc)

	struct s_smc *smc ;



Function	DOWNCALL	(SMT, fplustm.c)

		Update FORMAC multicast registers



	END_MANUAL_ENTRY()

	/*

	 * invalidate the CAM

	/*

	 * set the functional address

	/*

	 * set the mask and the personality register(s)

			/*

			 * write the multicast address into the CAM

/*

	BEGIN_MANUAL_ENTRY(if,func;others;3)



	void mac_set_rx_mode(smc,mode)

	struct s_smc *smc ;

	int mode ;



Function	DOWNCALL/INTERN	(SMT, fplustm.c)

		This function enables / disables the selected receive.

		Don't call this function if the hardware module is

		used -- use mac_drv_rx_mode() instead of.



Para	mode =	1	RX_ENABLE_ALLMULTI	enable all multicasts

		2	RX_DISABLE_ALLMULTI	disable "enable all multicasts"

		3	RX_ENABLE_PROMISC	enable promiscuous

		4	RX_DISABLE_PROMISC	disable promiscuous

		5	RX_ENABLE_NSA		enable reception of NSA frames

		6	RX_DISABLE_NSA		disable reception of NSA frames



Note	The selected receive modes will be lost after 'driver reset'

	or 'set station address'



	END_MANUAL_ENTRY

/*

	BEGIN_MANUAL_ENTRY(module;tests;3)

	How to test the Restricted Token Monitor

	----------------------------------------------------------------



	o Insert a break point in the function rtm_irq()

	o Remove all stations with a restricted token monitor from the

	  network.

	o Connect a UPPS ISA or EISA station to the network.

	o Give the FORMAC of UPPS station the command to send

	  restricted tokens until the ring becomes instable.

	o Now connect your test test client.

	o The restricted token monitor should detect the restricted token,

	  and your break point will be reached.

	o You can ovserve how the station will clean the ring.



	END_MANUAL_ENTRY

 clear IRQ */

 force claim */

 enable RTM monitoring */

 timer = 0 */

 enable IRQ */

	/*

	 * MIB timer and hardware timer have the same resolution of 80nS

/*

	BEGIN_MANUAL_ENTRY(module;mem;1)

	-------------------------------------------------------------

	RECEIVE BUFFER MEMORY DIVERSION

	-------------------------------------------------------------



	R1_RxD == SMT_R1_RXD_COUNT

	R2_RxD == SMT_R2_RXD_COUNT



	SMT_R1_RXD_COUNT must be unequal zero



		   | R1_RxD R2_RxD |R1_RxD R2_RxD | R1_RxD R2_RxD

		   |   x      0	   |  x	    1-3	  |   x     < 3

	----------------------------------------------------------------------

		   |   63,75 kB	   |    54,75	  |	R1_RxD

	rx queue 1 | RX_FIFO_SPACE | RX_LARGE_FIFO| ------------- * 63,75 kB

		   |		   |		  | R1_RxD+R2_RxD

	----------------------------------------------------------------------

		   |		   |    9 kB	  |     R2_RxD

	rx queue 2 |	0 kB	   | RX_SMALL_FIFO| ------------- * 63,75 kB

		   |  (not used)   |		  | R1_RxD+R2_RxD



	END_MANUAL_ENTRY

 this is not the real defaule */

/*

	BEGIN_MANUAL_ENTRY(module;mem;1)

	-------------------------------------------------------------

	TRANSMIT BUFFER MEMORY DIVERSION

	-------------------------------------------------------------





		 | no sync bw	| sync bw available and | sync bw available and

		 | available	| SynchTxMode = SPLIT	| SynchTxMode = ALL

	-----------------------------------------------------------------------

	sync tx	 |     0 kB	|	32 kB		|	55 kB

	queue	 |		|   TX_MEDIUM_FIFO	|   TX_LARGE_FIFO

	-----------------------------------------------------------------------

	async tx |    64 kB	|	32 kB		|	 9 k

	queue	 | TX_FIFO_SPACE|   TX_MEDIUM_FIFO	|   TX_SMALL_FIFO



	END_MANUAL_ENTRY

	/*

	 * set the tx mode bits

	/*

	 * split up the FIFO

	/*

	 * Split up the FIFO and reinitialize the MAC if synchronous

	 * bandwidth becomes available but no synchronous queue is

	 * configured.

 SPDX-License-Identifier: GPL-2.0-or-later

/******************************************************************************

 *

 *	(C)Copyright 1998,1999 SysKonnect,

 *	a business unit of Schneider & Koch & Co. Datensysteme GmbH.

 *

 *	See the file "skfddi.c" for further information.

 *

 *	The information in this file is provided "AS IS" without warranty.

 *

/*

	SMT timer

	/*

	 * remove timer from queue

 input is uS, clock ticks are 16uS */

	/*

	 * timer correction

	/*

	 * find position in queue

 insert in queue */

	/*

	 * start new with first

 SPDX-License-Identifier: GPL-2.0-or-later

/******************************************************************************

 *

 *	(C)Copyright 1998,1999 SysKonnect,

 *	a business unit of Schneider & Koch & Co. Datensysteme GmbH.

 *

 *	See the file "skfddi.c" for further information.

 *

 *	The information in this file is provided "AS IS" without warranty.

 *

/*

	SMT CFM

	Configuration Management

	DAS with single MAC

/*

 *	Hardware independent state machine implemantation

 *	The following external SMT functions are referenced :

 *

 *		queue_event()

 *

 *	The following external HW dependent functions are referenced :

 *		config_mux()

 *

 *	The following HW dependent events are required :

 *		NONE 

/*

 * FSM Macros

/*

 * symbolic state names

/*

 * symbolic event names

/*

 * map from state to downstream port type

/*

 * CEM port states

 define portstate array only for A and B port */

 Do this within the smc structure (use in multiple cards) */

/*

 * all Globals  are defined in smc.h

 * struct s_cfm

/*

 * function declarations

/*

	init CFM state machine

	clear all CFM vars and flags

 Some terms conditions used by the selection criteria */

 Selection criteria for the ports */

 take precedence over PA */

 Do the selection criteria */

 State machine for private PORT states: used to optimize dual homing */

 Number of the port */

 Do this only in a DAS */

 Change the port state according to the event (portnumber) */

 set the port to done only if it is not withheld */

 Don't set an hold port to down */

 Check all ports of restart conditions */

 Check all port for PORT is on hold and no withhold is done */

			/*

			 * The port must be restarted when the wc_flag

			 * will be reset. So set the port on hold.

/*

	CFM state machine

	called by dispatcher



	do

		display state change

		process event

	until SM is stable

 remember last state */

 We will do the following: */

  - compute the variable WC_Flag for every port (This is where */

    we can extend the requested path checking !!) */

  - do the old (SMT 6.2 like) state machine */

  - do the resulting station states */

 We will check now whether a state transition is allowed or not */

  - change the portstates */

	/*

	 * check peer wrap condition

	/*

	 * Don't ever send MAC_PATH_CHANGE events. Our MAC is hard-wired

	 * to the primary path.

 no SLIM_SMT */

	/*

	 * set MAC port type

/*

	process CFM event

ARGSUSED1*/

 configure PHY Mux */

 signal RMT */

 Don't do the WC-Flag changing here */

SC07*/

SAS port can be PA or PB ! */

SC01*/

SC02*/

 configure PHY mux */

 signal RMT */

 signal RMT */

SC10*/

SC12*/

SC14*/

SC15*/

 configure PHY mux */

 signal RMT */

 signal RMT */

SC20*/

SC21*/

SC24*/

SC25*/

 configure PHY mux */

 signal RMT */

SC41*/

SC42*/

SC45*/

 configure PHY mux */

 signal RMT */

SC51*/

SC52*/

SC54*/

 configure PHY mux */

 signal RMT */

 signal RMT */

SC70*/

/*

 * get MAC's input Port

 *	return :

 *		PA or PB

/*

 * get MAC's output Port

 *	return :

 *		PA or PB

 SPDX-License-Identifier: GPL-2.0-or-later

/******************************************************************************

 *

 *	(C)Copyright 1998,1999 SysKonnect,

 *	a business unit of Schneider & Koch & Co. Datensysteme GmbH.

 *

 *	See the file "skfddi.c" for further information.

 *

 *	The information in this file is provided "AS IS" without warranty.

 *

/*

	SMT 7.2 Status Response Frame Implementation

	SRF state machine and frame generation

/*

 * function declarations

	/*

	 * conditions

	/*

	 * events

		/*

		 * conditions

		/*

		 * events

		/*

		 * ignore condition if no change

		/*

		 * set transition time stamp

 FDDI_MIB */

 SR01a */

 SR01b */

 SR01c */

 SR00b */

 SR00c */

 SR00d */

 SR00e */

 SR02 */

 SR10b */

 SR11a */

 SR11b */

 SR11c */

 handled above */

 SR12 */

/*

 * build and send SMT SRF frame

	/*

	 * build SMT header

 DA == SRF multicast */

	/*

	 * setup parameter status

 max para length */

 no error */

 no bad set count */

 paras start here */

 no BOOT */

 no SLIM_SMT */

 SPDX-License-Identifier: GPL-2.0-or-later

/******************************************************************************

 *

 *	(C)Copyright 1998,1999 SysKonnect,

 *	a business unit of Schneider & Koch & Co. Datensysteme GmbH.

 *

 *	See the file "skfddi.c" for further information.

 *

 *	The information in this file is provided "AS IS" without warranty.

 *

/*

	SMT RMT

	Ring Management

/*

 * Hardware independent state machine implemantation

 * The following external SMT functions are referenced :

 *

 * 		queue_event()

 * 		smt_timer_start()

 * 		smt_timer_stop()

 *

 * 	The following external HW dependent functions are referenced :

 *		sm_ma_control()

 *		sm_mac_check_beacon_claim()

 *

 * 	The following HW dependent events are required :

 *		RM_RING_OP

 *		RM_RING_NON_OP

 *		RM_MY_BEACON

 *		RM_OTHER_BEACON

 *		RM_MY_CLAIM

 *		RM_TRT_EXP

 *		RM_VALID_CLAIM

 *

/*

 * FSM Macros

 not operational */

 ring operational */

 detect dupl addresses */

 dupl. addr detected */

 ring oper. with dupl. addr */

 sending directed beacons */

 trace initiated */

/*

 * symbolic state names

/*

 * symbolic event names

/*

 * Globals

 * in struct s_rmt

/*

 * function declarations

SUPERNET_3*/

/*

	init RMT state machine

	clear all RMT vars and flags

/*

	RMT state machine

	called by dispatcher



	do

		display state change

		process event

	until SM is stable

/*

	process RMT event

	/*

	 * RM00-RM70 : from all states

		/*

		 * Disable MAC.

RM01*/

			/*

			 * According to the standard the MAC must be reset

			 * here. The FORMAC will be initialized and Claim

			 * and Beacon Frames will be uploaded to the MAC.

			 * So any change of Treq will take effect NOW.

RM12*/

RM13*/

RM21*/

RM22a*/

RM25*/

		/*

		 *jd(22-Feb-1999)

		 * We need a time ">= 2*mac_d_max" since we had finished

		 * Claim or Beacon state. So we will restart timer0 at

		 * every state change.

RM32*/

RM33a*/

RM33b*/

			/*

			 * set bn_flag only if in state T4 or T5:

			 * only if we're the beaconer should we start the

			 * trace !

				/*

				 * If one of the upstream stations beaconed

				 * and the link to the upstream neighbor is

				 * lost we need to restart the stuck timer to

				 * check the "stuck beacon" condition.

			/*

			 * We do NOT need to clear smc->r.bn_flag in case of

			 * not being in state T4 or T5, because the flag

			 * must be cleared in order to get in this condition.

RM34a*/

RM34b*/

RM34c*/

RM36*/

RM41*/

RM44a*/

RM44b*/

			/*

			 * set bn_flag only if in state T4 or T5:

			 * only if we're the beaconer should we start the

			 * trace !

				/*

				 * If one of the upstream stations beaconed

				 * and the link to the upstream neighbor is

				 * lost we need to restart the stuck timer to

				 * check the "stuck beacon" condition.

			/*

			 * We do NOT need to clear smc->r.bn_flag in case of

			 * not being in state T4 or T5, because the flag

			 * must be cleared in order to get in this condition.

RM44c*/

RM45*/

RM46*/

RM52*/

RM54*/

RM63*/

			/* Because of problems with the Supernet II chip set

			 * sending of Directed Beacon will stop after 165ms

			 * therefore restart_trt_for_dbcn(smc) will be called

			 * to prevent this.

SUPERNET_3*/

RM64*/

RM67*/

/*

 * (jd) RMT duplicate address actions

 * leave the ring or reinsert just as configured

/*

 * Reconnect to the Ring

/*

 * duplicate address detected

	/*

	 * we have three options : change address, jam or leave

	 * we leave the ring as default 

	 * Optionally it's possible to reinsert after leaving the Ring

	 * but this will not conform with SMT Spec.

/*

 * leave the ring

	/*

	 * Note: Do NOT try again later. (with please reconnect)

	 * The station must be left from the ring!

/*

 * SMT timer interface

 *	start RMT timer 0

 clear timer event flag */

/*

 * SMT timer interface

 *	start RMT timer 1

 clear timer event flag */

/*

 * SMT timer interface

 *	start RMT timer 2

 clear timer event flag */

/*

 * SMT timer interface

 *	stop RMT timer 0

/*

 * SMT timer interface

 *	stop RMT timer 1

/*

 * SMT timer interface

 *	stop RMT timer 2

 SPDX-License-Identifier: GPL-2.0-or-later

/******************************************************************************

 *

 *	(C)Copyright 1998,1999 SysKonnect,

 *	a business unit of Schneider & Koch & Co. Datensysteme GmbH.

 *

 *	See the file "skfddi.c" for further information.

 *

 *	The information in this file is provided "AS IS" without warranty.

 *

/*

	Parameter Management Frame processing for SMT 7.2

 Get */

 Get/Set */

 Set */

 Group */

/*

	F	LFag (byte)

	B	byte

	S	u_short	16 bit

	C	Counter 32 bit

	L	Long 32 bit

	T	Timer_2	32 bit

	P	TimeStamp ;

	A	LongAddress (6 byte)

	E	Enum 16 bit

	R	ResId 16 Bit

 parameter code */

 access rights */

 offset in mib */

 format string */

 StationIdGrp */

 StationConfigGrp */

 StatusGrp */

 MIBOperationGrp */

 NOTE : SMT_P1035 is already swapped ! SMT_P_SETCOUNT */

	/*

	 * PRIVATE EXTENSIONS

	 * only accessible locally to get/set passwd

 MAC Attributes */

 ConfigGrp */

 AddressGrp */

 OperationGrp */

 CountersGrp */

 FrameErrorConditionGrp */

 NotCopiedConditionGrp */

 StatusGrp */

	/*

	 * PRIVATE EXTENSIONS

	 * only accessible locally to get/set TMIN

 Path Attributes */

	/*

	 * DON't swap 320B,320F,3210: they are already swapped in swap_para()

 fddiPATHConfiguration */

 Port Attributes */

 ConfigGrp */

 OperationGrp */

 ErrorCtrsGrp */

 LerGrp */

 StatusGrp */

	/*

	 * Start the watchdog: It may be a long, long packet and

	 * maybe the watchdog occurs ...

	/*

	 * build SMT header

 DA == source of request */

 same class (GET/SET) */

 same TID */

	/*

	 * setup parameter status

 max para length */

 no error */

 no bad set count */

 paras start here */

	/*

	 * check authoriziation and set count

	/*

	 * add reason code and all mandatory parameters

 update 1035 and 1036 later if set */

	/*

	 * process list of paras

			/*

			 * get index for PART,MAC ad PATH group

 index */

			/*

			 * smt group has no index

			/*

			 * if group

			 *	add all paras of group

			/*

			 * ignore

			 *	AUTHORIZATION in get/set

			 *	SET COUNT in set

					/*

					 * return para even if error

 update reason code */

		/*

		 * increment set count

		 * set time stamp

		 * store station id of last set

	/*

	 * check source station id if not zero

	/*

	 * check authoriziation parameter if passwd not zero

	/*

	 * skip if error

	/*

	 * actions don't have a value

 destination pointer */

 free space */

 remember start length */

 type/length pointer */

 skip smt_para */

	/*

	 * set index if required

	/*

	 * get pointer to mib

	/*

	 * check special paras

 time stamp */

 port indexes */

 peer wrap condition */

 frame error condition */

 not copied condition */

 neighbor change event */

	/*

	 * in table ?

	/*

	 * check access rights

 pointer to swap string */

	/*

	 * copy values

 for SET of port indexes */

 PortMacIndicated */

 timestamp is NOT swapped */

	/*

	 * make it even (in case of 'I' encoding)

	 * note: len is DECREMENTED

 set type and length */

 return values */

 parameter does not fit in frame */

/*

 * set parameter

 skip index */

 skip index */

 skip index */

 pointer to swap string */

 timestamp is NOT swapped */

	/*

	 * actions and internal updates

 fddiSMTConfigPolicy */

 fddiSMTConnectionPolicy */

 fddiSMTTT_Notify */

 fddiSMTStatRptPolicy */

 fddiSMTTrace_MaxExpiration */

		/*

		 * note: lower limit trace_max = 6.001773... s

		 * NO upper limit

 fddiESSPayload */

 fddiESSOverhead */

 fddiESSMaxTNeg */

 fddiESSMinSegmentSize */

 fddiESSCategory */

 fddiESSSyncTxMode */

 fddiSBACommand */

 fddiSBAAvailable */

 fddiMACRequestedPaths */

 fddiMACFrameErrorThreshold */

 0 .. ffff acceptable */

 fddiMACNotCopiedThreshold */

 0 .. ffff acceptable */

 fddiMACMA_UnitdataEnable */

 fddiMACT_Min */

 fddiPATHT_Rmode */

		/* no limit :

		 * 0 .. 343.597 => 0 .. 2e32 * 80nS

 fddiPATHSbaAvailable */

 fddiPATHTVXLowerBound */

 fddiPATHT_MaxLowerBound */

 fddiPATHMaxT_Req */

 fddiPORTConnectionPolicies */

 fddiPORTRequestedPaths */

 all 3*8 bits allowed */

 fddiPORTMaint_LS */

 fddiPORTLer_Cutoff */

 fddiPORTLer_Alarm */

	/*

	 * Actions

 fddiSMTStationAction */

 fddiPORTAction */

 parameter value in frame is out of range */

 parameter value in frame is too short */

	/* parameter not setable, because the SBA is not active

	 * Please note: we give the return code 'not authorizeed

	 *  because SBA denied is not a valid return code in the

	 * PMF protocol.

 no BOOT */

 DEBUG */

 no SLIM_SMT */

 SPDX-License-Identifier: GPL-2.0-or-later

/******************************************************************************

 *

 *	(C)Copyright 1998,1999 SysKonnect,

 *	a business unit of Schneider & Koch & Co. Datensysteme GmbH.

 *

 *	See the file "skfddi.c" for further information.

 *

 *	The information in this file is provided "AS IS" without warranty.

 *

/*

	SMT Event Queue Management

/*

 * init event queue management

/*

 * add event to queue

/*

 * timer_event is called from HW timer package.

/*

 * event dispatcher

 *	while event queue is not empty

 *		get event from queue

 *		send command to state machine

 *	end

 pointer into queue */

 Entity Corordination  Man. */

 Configuration Man. */

 Ring Man. */

 PHY A */

 PHY B */

 Renew get: it is used in queue_events to detect overruns */

/*

 * smt_online connects to or disconnects from the ring

 * MUST be called to initiate connection establishment

 *

 *	on	0	disconnect

 *	on	1	connect

/*

 * set SMT flag to value

 *	flag		flag name

 *	value		flag value

 * dump current flag setting

 DEBUG */

 SPDX-License-Identifier: GPL-2.0-or-later

/******************************************************************************

 *

 *	(C)Copyright 1998,1999 SysKonnect,

 *	a business unit of Schneider & Koch & Co. Datensysteme GmbH.

 *

 *	See the file "skfddi.c" for further information.

 *

 *	The information in this file is provided "AS IS" without warranty.

 *

/*

 * FC in SMbuf

/*

 * function prototypes

/*

 * list of mandatory paras in frames

/*

 * init SMT agent

	/*

	 * get MAC address

	/*

	 * get OUI address from driver (bia == built-in-address)

/*

 * SMT task

 * forever

 *	delay 30 seconds

 *	send NIF

 *	check tvu & tvd

 * end

	/*

	 * Only when ring is up we will have a token count. The

	 * flag is unfortunately a single instance value. This

	 * doesn't matter now, because we currently have only

	 * one MAC instance.

 Remember current time */

ARGSUSED1*/

 Counted down */

	/*

	 * timer for periodic cleanup in driver

	 * reset and start the watchdog (FM2)

	 * ESS timer

	 * SBA timer

 no SLIM_SMT */

		/*

		 * Use 8 sec. for the time intervall, it simplifies the

		 * LER estimation.

		/*

		 * calculate LEM bit error rate

		/*

		 * check conditions

		/*

		 * set old values

		/*

		 * Check port EBError Condition

			/* If ratio is more than 5 in 8 seconds

			 * Set the condition.

			/*

			 * set old values

 no SLIM_SMT */

		/*

		 * we can either send an announcement or a request

		 * a request will trigger a reply so that we can update

		 * our dna

		 * note: same tid must be used until reply is received

	/*

	 * check timer

 Do not update unknown address */

		/*

		 * Make sure the fddiMACUNDA_Flag = FALSE is

		 * included in the SRF so we don't generate

		 * a separate SRF for the deassertion of this

		 * condition

 Do not update unknown address */

 no SLIM_SMT */

	/*

	 * Token counter emulation section. If hardware supports the token

	 * count, the token counter will be updated in mac_update_counter.

/*

 * receive packet handler

 int fs;  frame status */

 check destination address */

 for DUP recognition, do NOT filter them */

 ignore loop back packets */

	/*

	 * check if NSA frame

	/*

	 * ignore any packet with NSA and A-indicator set

	/*

	 * ignore frames with illegal length

	/*

	 * check SMT version

 set my UNA */

 Do not update unknown address */

 set my DNA */

 Do not update unknown address */

 station information */

 station information */

 echo frame */

 set destination addr.  & reply */

 DON'T free mbuf */

 resource allocation */

 request denied */

 extended service - not supported */

 update statistics */

		/*

		 * ignore PMF SET with I/G set

		/*

		 * For frames with unknown class:

		 * we need to send a RDF frame according to 8.1.3.1.1,

		 * only if it is a REQUEST.

/*

 * send SMT frame

 *	set source address

 *	set station ID

 *	send frame

 SMbuf *mb;	buffer to send */

 int fc;	FC value */

 swap para & header */

 convert SA and DA */

/*

 * generate and send RDF

 SMbuf *rej;	mbuf of offending frame */

 int fc;	FC of denied frame */

 int reason;	reason code */

 header of offending frame */

	/*

	 * note: get framelength from MAC length, NOT from SMT header

	 * smt header length is included in sm_len

 use TID from sm */

 set dest = source */

 set P12 */

 set P14 */

 set P13 */

 make length multiple of 4 */

 length of para is smt_frame + ref_fc */

 swap it back */

/*

 * generate and send NIF

 struct fddi_addr *dest;	dest address */

 int fc;			frame control */

 u_long tid;			transaction id */

 int type;			frame type */

 set UNA */

 set station descriptor */

 set state information */

 set frame status cap. */

 destination address */

 transaction ID */

/*

 * send NIF request (test purpose)

/*

 * send ECF request (test purpose)

/*

 * echo test

/*

 * generate and send ECF

 struct fddi_addr *dest;	dest address */

 int fc;			frame control */

 u_long tid;			transaction id */

 int type;			frame type */

 int len;			frame length */

 set ECHO */

 destination address */

 transaction ID */

/*

 * generate and send SIF config response

 struct fddi_addr *dest;	dest address */

 u_long tid;			transaction id */

 set time stamp */

 set station descriptor */

 set version information */

 set state information */

 set station policy */

 set station latency */

 set station neighbor */

 set count */

 set station path descriptor*/

 destination address */

 transaction ID */

 adjust length fields */

/*

 * generate and send SIF operation response

 struct fddi_addr *dest;	dest address */

 u_long tid;			transaction id */

 set time stamp */

 set mac status */

 set mac counter field */

 set frame not copied counter */

 set manufacturer field */

 set user field */

 set count */

	/*

	 * set link error mon information

 destination address */

 transaction ID */

/*

 * get and initialize SMT frame

 set dest = broadcast */

 set transaction ID */

/*

 * fill values in UNA parameter

/*

 * fill values in SDE parameter

 only 1 MAC */

/*

 * fill in values in station state parameter

 determine topology */

 state wrapped */

 unattached concentrator */

 twisted cable */

 twisted cable */

/*

 * fill values in timestamp parameter

	/*

	 * timestamp is 64 bits long ; resolution is 80 nS

	 * our clock resolution is 10mS

	 * 10mS/80ns = 125000 ~ 2^17 = 131072

	/*

	 * make sure we don't wrap: restart whenever the upper digits change

/*

 * fill values in station policy parameter

	/*

	 * MIB para 101b (fddiSMTConnectionPolicy) coding

	 * is different from 0005 coding

/*

 * fill values in latency equivalent parameter

 in octets (byte clock) */

	/*

	 * note: latency has two phy entries by definition

	 * for a SAS, the 2nd one is null

 in octets (byte clock) */

/*

 * fill values in MAC neighbors parameter

/*

 * fill values in path descriptor

 PHYs */

 MAC */

/*

 * fill values in mac status

	/*

	 * timer values are represented in SMT as 2's complement numbers

	 * units :	internal :  2's complement BCLK

/*

 * fill values in LEM status

 long term bit error rate */

 # of rejected connections */

 total number of errors */

/*

 * fill version parameter

 one version is enough .. */

/*

 * fill frame status capabilities

/*

 * note: this para 200B is NOT in swap table, because it's also set in

 * PMF add_para

	fsc->fsc_mac_index = INDEX_MAC ;	/* this is MIB ; MIB is NOT

						 * mac_index ()i !

 "normal" node */

/*

 * fill mac counter field

/*

 * fill mac frame not copied counter

/*

 * fill manufacturer field

/*

 * fill user field

/*

 * fill set count

/*

 * fill echo data

/*

 * clear DNA and UNA

 * called from CFM if configuration changes

/*

 * table of parameter lengths

 pointer to info */

/*

 * send ANTC data test frame

/*

 * return static mac index

/*

 * return static phy index

/*

 * return dynamic mac connection resource index

/*

 * return dynamic phy connection resource index

 int direction;	0 encode 1 decode */

/*	printf("smt_swap_para sm %x len %d dir %d\n",

		sm,len,direction) ;

 swap args */

		/*

		 * note: paras can have 0 length !

 int direction;	0 encode 1 decode */

/*

 * PMF actions

/*

 * canonical conversion of <len> bytes beginning form *data

 no SLIM_SMT */

/*

 * Please use z8530drv-utils-3.0 with this version.

 *            ------------------

 *

 * You can find a subset of the documentation in 

 * Documentation/networking/device_drivers/hamradio/z8530drv.rst.

/*

   ********************************************************************

   *   SCC.C - Linux driver for Z8530 based HDLC cards for AX.25      *

   ********************************************************************





   ********************************************************************



	Copyright (c) 1993, 2000 Joerg Reuter DL1BKE



	portions (c) 1993 Guido ten Dolle PE1NNZ



   ********************************************************************

   

   The driver and the programs in the archive are UNDER CONSTRUCTION.

   The code is likely to fail, and so your kernel could --- even 

   a whole network. 



   This driver is intended for Amateur Radio use. If you are running it

   for commercial purposes, please drop me a note. I am nosy...



   ...BUT:

 

   ! You  m u s t  recognize the appropriate legislations of your country !

   ! before you connect a radio to the SCC board and start to transmit or !

   ! receive. The GPL allows you to use the  d r i v e r,  NOT the RADIO! !



   For non-Amateur-Radio use please note that you might need a special

   allowance/licence from the designer of the SCC Board and/or the

   MODEM. 



   This program is free software; you can redistribute it and/or modify 

   it under the terms of the (modified) GNU General Public License 

   delivered with the Linux kernel source.

   

   This program is distributed in the hope that it will be useful,

   but WITHOUT ANY WARRANTY; without even the implied warranty of

   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

   GNU General Public License for more details.



   You should find a copy of the GNU General Public License in 

   /usr/src/linux/COPYING; 

   

   ******************************************************************** 



		

   Incomplete history of z8530drv:

   -------------------------------



   1994-09-13	started to write the driver, rescued most of my own

		code (and Hans Alblas' memory buffer pool concept) from 

		an earlier project "sccdrv" which was initiated by 

		Guido ten Dolle. Not much of the old driver survived, 

		though. The first version I put my hands on was sccdrv1.3

		from August 1993. The memory buffer pool concept

		appeared in an unauthorized sccdrv version (1.5) from

		August 1994.



   1995-01-31	changed copyright notice to GPL without limitations.

   

     .

     .	<SNIP>

     .

   		  

   1996-10-05	New semester, new driver... 



   		  * KISS TNC emulator removed (TTY driver)

   		  * Source moved to drivers/net/

   		  * Includes Z8530 defines from drivers/net/z8530.h

   		  * Uses sk_buffer memory management

   		  * Reduced overhead of /proc/net/z8530drv output

   		  * Streamlined quite a lot things

   		  * Invents brand new bugs... ;-)



   		  The move to version number 3.0 reflects theses changes.

   		  You can use 'kissbridge' if you need a KISS TNC emulator.



   1996-12-13	Fixed for Linux networking changes. (G4KLX)

   1997-01-08	Fixed the remaining problems.

   1997-04-02	Hopefully fixed the problems with the new *_timer()

   		routines, added calibration code.

   1997-10-12	Made SCC_DELAY a CONFIG option, added CONFIG_SCC_TRXECHO

   1998-01-29	Small fix to avoid lock-up on initialization

   1998-09-29	Fixed the "grouping" bugs, tx_inhibit works again,

   		using dev->tx_queue_len now instead of MAXQUEUE now.

   1998-10-21	Postponed the spinlock changes, would need a lot of

   		testing I currently don't have the time to. Softdcd doesn't

   		work.

   1998-11-04	Softdcd does not work correctly in DPLL mode, in fact it 

   		never did. The DPLL locks on noise, the SYNC unit sees

   		flags that aren't... Restarting the DPLL does not help

   		either, it resynchronizes too slow and the first received

   		frame gets lost.

   2000-02-13	Fixed for new network driver interface changes, still

   		does TX timeouts itself since it uses its own queue

   		scheme.



   Thanks to all who contributed to this driver with ideas and bug

   reports!

   

   NB -- if you find errors, change something, please let me know

      	 first before you distribute it... And please don't touch

   	 the version number. Just replace my callsign in

   	 "v3.0.dl1bke" with your own. Just to avoid confusion...



   If you want to add your modification to the linux distribution

   please (!) contact me first.

   

   New versions of the driver will be announced on the linux-hams

   mailing list on vger.kernel.org. To subscribe send an e-mail

   to majordomo@vger.kernel.org with the following line in

   the body of the mail:

   

	   subscribe linux-hams

	   

   The content of the "Subject" field will be ignored.



   vy 73,

   Joerg Reuter	ampr-net: dl1bke@db0pra.ampr.org

		AX-25   : DL1BKE @ DB0ABH.#BAY.DEU.EU

		Internet: jreuter@yaina.de

		www     : http://yaina.de/jreuter

 ----------------------------------------------------------------------- */

 slow it even a bit more down */

 don't look if the SCCs you specified are available */

 number of max. supported chips */

 must not exceed 4096 */

 default pclock if nothing is specified */

 ----------------------------------------------------------------------- */

 information per channel */

 ******************************************************************** */

 *			Port Access Functions			      * */

 ******************************************************************** */

 These provide interrupt save 2-step access to the Z8530 registers */

 Guards paired accesses */

 ******************************************************************** */

 *			Some useful macros			      * */

 ******************************************************************** */

 ******************************************************************** */

 *			Interrupt Service Routines		      * */

 ******************************************************************** */

 ----> subroutines for the interrupt handlers <---- */

 did we receive something? */

 then count it as an error */

 DPLL: enter search mode */

 enable the receiver, hunt mode */

 ----> four different interrupt handlers for Tx, Rx, changing of	*/

       DCD/CTS and Rx/Tx errors					*/

 Transmitter interrupt handler */

 send first octet */

 Paranoia... */

 reset CRC generator */

 re-install underrun protection */

 send byte */

 reset EOM latch */

 End Of Frame... */

 reset pending int */

 send CRC */

 next frame... */

 send octet */

 External/Status interrupt handler */

 ABORT: generated whenever DCD drops while receiving */

 Received an ABORT */

 HUNT: software DCD; on = waiting for SYNC, off = receiving frame */

 DPLL: enter search mode */

 DCD: on = start to receive packet, off = ABORT condition */

 (a successfully received packet generates a special condition int) */

 DCD input changed state */

 DCD is now ON */

 DCD is now OFF */

 disable the receiver */

	/* CTS: use external TxDelay (what's that good for?!)

	 * Anyway: If we _could_ use it (BayCom USCC uses CTS for

	 * own purposes) we _should_ use the "autoenable" feature

	 * of the Z8530 and not this interrupt...

 CTS is now ON */

 zero TXDELAY = wait for CTS */

 oops, an underrun! count 'em */

 reset ext/status interrupts */

 restart transmission */

 Receiver interrupt handler */

 discard char */

 enter hunt mode for next flag */

 KISS data */

 Receive Special Condition interrupt handler */

 read receiver status */

 throw away Rx byte */

 receiver overrun */

 count them */

 enter hunt mode for next flag */

 end of frame */

 CRC okay, frame ends on 8 bit boundary and received something ? */

 ignore last received byte (first of the CRC bytes) */

 a bad frame */

 ----> interrupt service routine for the Z8530 <---- */

/* If the card has a latch for the interrupt vector (like the PA0HZP card)

   use it to get the number of the chip that generated the int.

   If not: poll all defined chips.

 Generate INTACK */

 Read the vector */

 Reset Highest IUS */

	/* Find the SCC generating the interrupt by polling all attached SCCs

	 * reading RR3A (the interrupt pending register)

 Read the vector */

		/* This looks weird and it is. At least the BayCom USCC doesn't

		 * use the Interrupt Daisy Chain, thus we'll have to start

		 * all over again to be sure not to miss an interrupt from 

		 * (any of) the other chip(s)...

		 * Honestly, the situation *is* braindamaged...

 ******************************************************************** */

 *			Init Channel					*/

 ******************************************************************** */

 ----> set SCC channel speed <---- */

 disable baudrate generator */

 brg rate LOW */

 brg rate HIGH */

 enable baudrate generator */

 paranoia... */

 ----> initialize a SCC channel <---- */

 BRG source = PCLK */

 DPLL source = BRG */

 DPLL NRZI mode */

/*

 * Initialization according to the Z8530 manual (SGS-Thomson's version):

 *

 * 1. Modes and constants

 *

 * WR9	11000000	chip reset

 * WR4	XXXXXXXX	Tx/Rx control, async or sync mode

 * WR1	0XX00X00	select W/REQ (optional)

 * WR2	XXXXXXXX	program interrupt vector

 * WR3	XXXXXXX0	select Rx control

 * WR5	XXXX0XXX	select Tx control

 * WR6	XXXXXXXX	sync character

 * WR7	XXXXXXXX	sync character

 * WR9	000X0XXX	select interrupt control

 * WR10	XXXXXXXX	miscellaneous control (optional)

 * WR11	XXXXXXXX	clock control

 * WR12	XXXXXXXX	time constant lower byte (optional)

 * WR13	XXXXXXXX	time constant upper byte (optional)

 * WR14	XXXXXXX0	miscellaneous control

 * WR14	XXXSSSSS	commands (optional)

 *

 * 2. Enables

 *

 * WR14	000SSSS1	baud rate enable

 * WR3	SSSSSSS1	Rx enable

 * WR5	SSSS1SSS	Tx enable

 * WR0	10000000	reset Tx CRG (optional)

 * WR1	XSS00S00	DMA enable (optional)

 *

 * 3. Interrupt status

 *

 * WR15	XXXXXXXX	enable external/status

 * WR0	00010000	reset external status

 * WR0	00010000	reset external status twice

 * WR1	SSSXXSXX	enable Rx, Tx and Ext/status

 * WR9	000SXSSS	enable master interrupt enable

 *

 * 1 = set to one, 0 = reset to zero

 * X = user defined, S = same as previous init

 *

 *

 * Note that the implementation differs in some points from above scheme.

 *

 *1 clock, SDLC mode */

 no W/REQ operation */

 RX 8 bits/char, CRC, disabled */	

 TX 8 bits/char, disabled, DTR */

 SDLC address zero (not used) */

 SDLC flag value */

 vector includes status */

 abort on underrun, preset CRC generator, NRZ(I) */

/* set clock sources:



   CLK_DPLL: normal halfduplex operation

   

		RxClk: use DPLL

		TxClk: use DPLL

		TRxC mode DPLL output

		

   CLK_EXTERNAL: external clocking (G3RUH or DF9IC modem)

   

  	        BayCom: 		others:

  	        

  	        TxClk = pin RTxC	TxClk = pin TRxC

  	        RxClk = pin TRxC 	RxClk = pin RTxC

  	     



   CLK_DIVIDER:

   		RxClk = use DPLL

   		TxClk = pin RTxC

   		

   		BayCom:			others:

   		pin TRxC = DPLL		pin TRxC = BRG

   		(RxClk * 1)		(RxClk * 32)

 set baudrate */

 enable FIFO, SDLC/HDLC Enhancements (From now R7 is R7') */

 DCD is now ON */

 enable ABORT, DCD & SYNC/HUNT interrupts */

 reset ext/status interrupts */

 must be done twice */

 enable interrupts */

 read initial status */

 master interrupt enable */

 ******************************************************************** */

 *			SCC timer functions			      * */

 ******************************************************************** */

/* ----> scc_key_trx sets the time constant for the baudrate 

 t_maxkeyup may have reset these */

 force simplex operation */

 switch off receiver */

 No DCD changes, please */

 reprogram baudrate generator */

 DPLL -> Rx clk, BRG -> Tx CLK, TRxC mode output, TRxC = BRG */

 By popular demand: tx_inhibit */

 set the RTS line and enable TX */

 reprogram baudrate generator */

 DPLL -> Rx clk, DPLL -> Tx CLK, TRxC mode output, TRxC = DPLL */

 enable tx */

 disable tx */

 ----> SCC timer interrupt handler and friends. <---- */

/* 

 * This is called from scc_txint() when there are no more frames to send.

 * Not exactly a timer function, but it is a close friend of the family...

	/* 

	 * trx remains keyed in fulldup mode 2 until t_idle expires.

/* DWAIT and SLOTTIME expired

 *

 * fulldup == 0:  DCD is active or Rand > P-persistence: start t_busy timer

 *                else key trx and start txdelay

 * fulldup == 1:  key trx and start txdelay

 * fulldup == 2:  mintime expired, reset status or key trx and start txdelay

 maxkeyup or idle timeout */

 nothing to send */

 t_maxkeyup locked it. */

/* TXDELAY expired

 *

 * kick transmission by a fake scc_txint(scc), start 'maxkeyup' watchdog.

/* TAILTIME expired

 *

 * switch off transmitter. If we were stopped by Maxkeyup restart

 * transmission after 'mintime' seconds

 we had a timeout? */

/* BUSY timeout

 *

 * throw away send buffers if DCD remains active too long.

 don't pile on the wabbit! */

/* MAXKEYUP timeout

 *

 * this is our watchdog.

	/* 

	 * let things settle down before we start to

	 * accept new data.

 force an ABORT, but don't */

 count it. */

/* IDLE timeout

 *

 * in fulldup mode 2 it keys down the transmitter after 'idle' seconds

 * of inactivity. We will not restart transmission before 'mintime'

 * expires.

 ******************************************************************** */

 *			Set/get L1 parameters			      * */

 ******************************************************************** */

/*

 * this will set the "hardware" parameters through KISS commands or ioctl()

 does someone need this? */

 only switch baudrate on rx... ;-) */

 ******************************************************************* */

 *			Send calibration pattern		     * */

 ******************************************************************* */

 reset ext/status interrupts */

 This doesn't seem to work. Why not? */	

	/* 

	 * Don't know if this works. 

	 * Damn, where is my Z8530 programming manual...? 

 reset ext/status interrupts */

 ******************************************************************* */

 *		Init channel structures, special HW, etc...	     * */

 ******************************************************************* */

/*

 * Reset the Z8530s and setup special hardware

 reset and pre-init all chips in the system */

 Special SCC cards */

 this is an EAGLE card */

 enable interrupt on the board */

 this is a PC100/PRIMUS card */

 set the MODEM mode (0x22) */

 Reset and pre-init Z8530 */

 force hardware reset */

 give it 'a bit' more time than required */

 interrupt vector */

 vector includes status */

/*

 * Allocate device structure, err, instance, and register driver

 ******************************************************************** */

 *			    Network driver methods		      * */

 ******************************************************************** */

 ----> Initialize device <----- */

 should be enough... */

 ----> open network device <---- */

 ----> close network device <---- */

 Make sure pointer is written */

 disable interrupts */

 ----> receive frame, called from scc_rxint() <---- */

 ----> transmit frame <---- */

 bogus frame */

	/*

	 * Start transmission if the trx state is idle or

	 * t_idle hasn't expired yet. Use dwait/persistence/slottime

	 * algorithm for normal halfduplex operation.

 ----> ioctl functions <---- */

/*

 * SIOCSCCCFG		- configure driver	arg: (struct scc_hw_config *) arg

 * SIOCSCCINI		- initialize driver	arg: ---

 * SIOCSCCCHANINI	- initialize channel	arg: (struct scc_modem *) arg

 * SIOCSCCSMEM		- set memory		arg: (struct scc_mem_config *) arg

 * SIOCSCCGKISS		- get level 1 parameter	arg: (struct scc_kiss_cmd *) arg

 * SIOCSCCSKISS		- set level 1 parameter arg: (struct scc_kiss_cmd *) arg

 * SIOCSCCGSTAT		- get driver status	arg: (struct scc_stat *) arg

 * SIOCSCCCAL		- send calib. pattern	arg: (struct scc_calibrate *) arg

 is this chip really there? */

 confuse the user */

 default KISS Params */

 360 ms */

 25% persistence */			
 160 ms */

 minimal reasonable value */

 CSMA */

 500 ms */

 10 s */

 3 s */

 30 s */

 2 min */

 hardware dcd */

 100 ms */

 25% persistence */			
 160 ms */

 minimal reasonable value */

 CSMA */

 500 ms */

 7 s */

 3 s */

 30 s */

 2 min */

 hardware dcd */

 ----> set interface callsign <---- */

 ----> get statistics <---- */

 ******************************************************************** */

 *		dump statistics to /proc/net/z8530drv		      * */

 ******************************************************************** */

		/* dev	data ctrl irq clock brand enh vector special option 

		 *	baud nrz clocksrc softdcd bufsize

		 *	rxints txints exints spints

		 *	rcvd rxerrs over / xmit txerrs under / nospace bufsize

		 *	txd pers slot tail ful wait min maxk idl defr txof grp

		 *	W ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##

		 *	R ## ## XX ## ## ## ## ## XX ## ## ## ## ## ## ##

 CONFIG_PROC_FS */

 ******************************************************************** */

 * 			Init SCC driver 			      * */

 ******************************************************************** */

 Guard against chip prattle */

 force hardware reset */

 To unload the port must be closed so no real IRQ pending */

 Now clean up */

 SPDX-License-Identifier: GPL-2.0-or-later

****************************************************************************/

/*

 *	baycom_epp.c  -- baycom epp radio modem driver.

 *

 *	Copyright (C) 1998-2000

 *          Thomas Sailer (sailer@ife.ee.ethz.ch)

 *

 *  Please note that the GPL allows you to use the driver, NOT the radio.

 *  In order to use the radio, you need a license from the communications

 *  authority of your country.

 *

 *  History:

 *   0.1  xx.xx.1998  Initial version by Matthias Welwarsky (dg2fef)

 *   0.2  21.04.1998  Massive rework by Thomas Sailer

 *                    Integrated FPGA EPP modem configuration routines

 *   0.3  11.05.1998  Took FPGA config out and moved it into a separate program

 *   0.4  26.07.1999  Adapted to new lowlevel parport driver interface

 *   0.5  03.08.1999  adapt to Linus' new __setup/__initcall

 *                    removed some pre-2.2 kernel compatibility cruft

 *   0.6  10.08.1999  Check if parport can do SPP and is safe to access during interrupt contexts

 *   0.7  12.02.2000  adapted to softnet driver interface

****************************************************************************/

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 EPP status register */

 EPP control register */

 LPT registers */

 LPT control register */

 0 to reprogram */

 LPT status register */

 LPT data register */

 EPP modem config/status bits */

 Xilinx 4k JTAG instructions */

 ---------------------------------------------------------------------- */

/*

 * Information that need to be kept for each board.

 next transmit packet  */

 BAYCOM_DEBUG */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

/*

 * the CRC routines are stolen from WAMPES

 * by Dieter Deyke

---------------------------------------------------------------------------*/

---------------------------------------------------------------------------*/

---------------------------------------------------------------------------*/

 ---------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

	/*

	 * measure the interrupt frequency

 BAYCOM_DEBUG */

 ---------------------------------------------------------------------- */

/*

 *    eppconfig_path should be setable  via /proc/sys.

 eppconfig: called during ifconfig up to configure the modem */

 set up arguments */

 ---------------------------------------------------------------------- */

 KISS_VERBOSE */	      

 KISS_VERBOSE */	      

 --------------------------------------------------------------------- */

 strip KISS byte */

 ---------------------------------------------------------------------- */

 ---------------------------------------------------------------------- */

 KISS kludge */

 KISS kludge */

 flag or abort */

 abort received */

 flag received */

 stuffed bit */

 --------------------------------------------------------------------- */

 __i386__  && !CONFIG_UML */

 __i386__  && !CONFIG_UML */

 update status */

 get input count */

 get output count */

 return to normal */

 try to tx */

 do receiver */

 BAYCOM_DEBUG */

 ---------------------------------------------------------------------- */

/*

 * ===================== network driver interface =========================

 strip KISS byte */

 --------------------------------------------------------------------- */

 addr is an AX.25 shifted ASCII mac address */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

/*

 * Open/initialize the board. This is called (in the current kernel)

 * sometime after booting when the 'ifconfig' program is run.

 *

 * This routine should set everything up anew at each open, even

 * registers that "should" only need to be set once at boot, so that

 * there is non-reboot way to recover if something goes wrong.

pp->irq*/ 0;

EPP_FPGA*/ EPP_FPGAEXTSTATUS;

 prepare EPP mode; we aren't using interrupts */

 reset the modem */

 autoprobe baud rate */

|j*/;

	/*

	 * initialise hdlc variables

 start the bottom half stuff */

 reset the adapter */

 --------------------------------------------------------------------- */

 reset the adapter */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

hi.data.mp.irq*/0;

hi.data.mp.dma*/0;

 --------------------------------------------------------------------- */

/*

 * Check for a network adaptor of this type, and return '0' if one exists.

 * If dev->base_addr == 0, probe all likely locations.

 * If dev->base_addr == 1, always return failure.

 * If dev->base_addr == 2, allocate space for the device and return success

 * (detachable devices only).

	/*

	 * not a real probe! only initialize data structures

	/*

	 * initialize the baycom_state struct

	/*

	 * initialize the device struct

 Fill in the fields of the device structure */

 AF_AX25 device */

 eth_mtu is the default */

 sizeof an ax.25 address */

 New style flags */

 --------------------------------------------------------------------- */

/*

 * command line settable parameters

 --------------------------------------------------------------------- */

	/*

	 * initialize part of the baycom_state struct

	/*

	 * initialize part of the device struct

	/*

	 * register net devices

 --------------------------------------------------------------------- */

/*

 * format: baycom_epp=io,mode

 * mode: fpga config options

 MODULE */

 --------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-or-later

****************************************************************************/

/*

 *	baycom_ser_fdx.c  -- baycom ser12 fullduplex radio modem driver.

 *

 *	Copyright (C) 1996-2000  Thomas Sailer (sailer@ife.ee.ethz.ch)

 *

 *  Please note that the GPL allows you to use the driver, NOT the radio.

 *  In order to use the radio, you need a license from the communications

 *  authority of your country.

 *

 *  Supported modems

 *

 *  ser12:  This is a very simple 1200 baud AFSK modem. The modem consists only

 *          of a modulator/demodulator chip, usually a TI TCM3105. The computer

 *          is responsible for regenerating the receiver bit clock, as well as

 *          for handling the HDLC protocol. The modem connects to a serial port,

 *          hence the name. Since the serial port is not used as an async serial

 *          port, the kernel driver for serial ports cannot be used, and this

 *          driver only supports standard serial hardware (8250, 16450, 16550A)

 *

 *          This modem usually draws its supply current out of the otherwise unused

 *          TXD pin of the serial port. Thus a contiguous stream of 0x00-bytes

 *          is transmitted to achieve a positive supply voltage.

 *

 *  hsk:    This is a 4800 baud FSK modem, designed for TNC use. It works fine

 *          in 'baycom-mode' :-)  In contrast to the TCM3105 modem, power is

 *          externally supplied. So there's no need to provide the 0x00-byte-stream

 *          when receiving or idle, which drastically reduces interrupt load.

 *

 *  Command line options (insmod command line)

 *

 *  mode     ser#    hardware DCD

 *           ser#*   software DCD

 *           ser#+   hardware DCD, inverted signal at DCD pin

 *           '#' denotes the baud rate / 100, eg. ser12* is '1200 baud, soft DCD'

 *  iobase   base address of the port; common values are 0x3f8, 0x2f8, 0x3e8, 0x2e8

 *  baud     baud rate (between 300 and 4800)

 *  irq      interrupt line of the port; common values are 4,3

 *

 *  History:

 *   0.1  26.06.1996  Adapted from baycom.c and made network driver interface

 *        18.10.1996  Changed to new user space access routines (copy_{to,from}_user)

 *   0.3  26.04.1997  init code/data tagged

 *   0.4  08.07.1997  alternative ser12 decoding algorithm (uses delta CTS ints)

 *   0.5  11.11.1997  ser12/par96 split into separate files

 *   0.6  24.01.1998  Thorsten Kranzkowski, dl8bcu and Thomas Sailer:

 *                    reduced interrupt load in transmit case

 *                    reworked receiver

 *   0.7  03.08.1999  adapt to Linus' new __setup/__initcall

 *   0.8  10.08.1999  use module_init/module_exit

 *   0.9  12.02.2000  adapted to softnet driver interface

 *   0.10 03.07.2000  fix interface name handling

****************************************************************************/

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 ---------------------------------------------------------------------- */

/*

 * Information that need to be kept for each board.

 BAYCOM_DEBUG */

 --------------------------------------------------------------------- */

	/*

	 * measure the interrupt frequency

 BAYCOM_DEBUG */

 --------------------------------------------------------------------- */

/*

 * ===================== SER12 specific routines =========================

 --------------------------------------------------------------------- */

 DLAB = 1 */

 word length = 6 */

        /*

         * make sure the next interrupt is generated;

         * 0 must be used to power the modem; the modem draws its

         * power from the TxD line

        /*

         * it is important not to set the divider while transmitting;

         * this reportedly makes some UARTs generating interrupts

         * in the hundredthousands per second region

         * Reported by: Ignacio.Arenaza@studi.epfl.ch (Ignacio Arenaza Nuno)

 first check if there is room to add a bit */

 add a one bit */

 slight bias */

 adjust the PLL */

 update DCD */

 BAYCOM_DEBUG */

 --------------------------------------------------------------------- */

 fast way out for shared irq */

 get current time */

 delta DCD */

			/*

			 * make sure the next interrupt is generated;

			 * 0 must be used to power the modem; the modem draws its

			 * power from the TxD line

			/*

			 * first output the last bit (!) then call HDLC transmitter,

			 * since this may take quite long

 transmitter off */

 delta DCD */

 CTS */

 --------------------------------------------------------------------- */

 loopback mode */

 restore old values */

 enable FIFOs */

 --------------------------------------------------------------------- */

 disable FIFOs */

	/*

	 * set the SIO to 6 Bits/character; during receive,

	 * the baud rate is set to produce 100 ints/sec

	 * to feed the channel arbitration process,

	 * during transmit to baud ints/sec to run

	 * the transmitter

	/*

	 * enable transmitter empty interrupt and modem status interrupt

	/*

	 * make sure the next interrupt is generated;

	 * 0 must be used to power the modem; the modem draws its

	 * power from the TxD line

 --------------------------------------------------------------------- */

	/*

	 * disable interrupts

 --------------------------------------------------------------------- */

/*

 * ===================== hdlcdrv driver interface =========================

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 BAYCOM_DEBUG */

 --------------------------------------------------------------------- */

/*

 * command line settable parameters

 --------------------------------------------------------------------- */

	/*

	 * register net devices

 --------------------------------------------------------------------- */

/*

 * format: baycom_ser_fdx=io,irq,mode

 * mode: ser#    hardware DCD

 *       ser#*   software DCD

 *       ser#+   hardware DCD, inverted signal at DCD pin

 * '#' denotes the baud rate / 100, eg. ser12* is '1200 baud, soft DCD'

 MODULE */

 --------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-or-later

****************************************************************************/

/*

 *    yam.c  -- YAM radio modem driver.

 *

 *      Copyright (C) 1998 Frederic Rible F1OAT (frible@teaser.fr)

 *      Adapted from baycom.c driver written by Thomas Sailer (sailer@ife.ee.ethz.ch)

 *

 *  Please note that the GPL allows you to use the driver, NOT the radio.

 *  In order to use the radio, you need a license from the communications

 *  authority of your country.

 *

 *  History:

 *   0.0 F1OAT 06.06.98  Begin of work with baycom.c source code V 0.3

 *   0.1 F1OAT 07.06.98  Add timer polling routine for channel arbitration

 *   0.2 F6FBB 08.06.98  Added delay after FPGA programming

 *   0.3 F6FBB 29.07.98  Delayed PTT implementation for dupmode=2

 *   0.4 F6FBB 30.07.98  Added TxTail, Slottime and Persistence

 *   0.5 F6FBB 01.08.98  Shared IRQs, /proc/net and network statistics

 *   0.6 F6FBB 25.08.98  Added 1200Bds format

 *   0.7 F6FBB 12.09.98  Added to the kernel configuration

 *   0.8 F6FBB 14.10.98  Fixed slottime/persistence timing bug

 *       OK1ZIA 2.09.01  Fixed "kfree_skb on hard IRQ" 

 *                       using dev_kfree_skb_any(). (important in 2.4 kernel)

****************************************************************************/

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 Transmitter states */

 bps */

 sec */

 ms */

 ms */

 ms */

 0->255 */

 Parameters section */

 tx delay */

 duplex ptt delay */

 txtail delay */

 slottime */

 persistence */

 Tx section */

 Packets awaiting transmission */

 Rx section */

 --------------------------------------------------------------------- */

 Interrupt Identification Register Bit Masks */

 Fifo mode only */

 Interrupt Enable Register Bit Masks */

 enable rx interrupt */

 enable tx interrupt */

 enable line status interrupts */

 enable modem status interrupts */

 Modem Control Register Bit Masks */

 DTR output */

 RTS output */

 OUT1 output (not accessible in RS232) */

 Master Interrupt enable (must be set on PCs) */

 Loopback enable */

 Modem Status Register Bit Masks */

 Delta CTS input */

 Delta DSR */

 Delta RI */

 Delta DCD */

 CTS input */

 DSR input */

 RI  input */

 DCD input */

 line status register bit mask */

 Line Control Register Bit Masks */

 YAM Modem <-> UART Port mapping */

 transmitter ready to send */

 carrier detect */

 hdlc flag received */

 FPGA is configured */

 activate PTT */

 release PTT */

 enable uart rx interrupt during rx */

 enable uart ms interrupt during tx */

 full duplex operations */

/*************************************************************************

* CRC Tables

/*************************************************************************

* FPGA functions

/*

 * reset FPGA

 turn off FPGA supply voltage */

 turn on FPGA supply voltage again */

/*

 * send one byte to FPGA

/*

 * predef should be 0 for loading user defined mcs

 * predef should be YAM_1200 for loading predef 1200 mcs

 * predef should be YAM_9600 for loading predef 9600 mcs

 If it already exists, replace the bit data */

 Allocate a new mcs */

 Load predefined mcs data */

 setting predef as YAM_1200 for loading predef 1200 mcs */

 setting predef as YAM_9600 for loading predef 9600 mcs */

/*

 * download bitstream to FPGA

 * data is contained in bits[] array in yam1200.h resp. yam9600.h

 write... */

 check DONE signal */

 Needed for some hardwares */

/************************************************************************

* Serial port init 

 Flush pending irq */

 Enable rx irq */

 --------------------------------------------------------------------- */

 loopback mode */

 restore old values */

 enable FIFOs */

/******************************************************************************

* Rx Section

 -CRC + kiss */

 Bad crc */

 KISS kludge */

/********************************************************************************

* TX Section

 tx_state is TX_OFF and there is data to send */

 Full duplex mode, don't wait */

 DCD on, wait slotime ... */

 Is slottime passed ? */

 is random > persist ? */

                              do_kiss_params(s, skb->data, skb->len); */

 strip KISS byte */

/***********************************************************************************

* ISR routine

 --------------------------------------------------------------------- */

 Reset overruns for all ports - FPGA programming makes overruns */

 --------------------------------------------------------------------- */

	/*

	 * disable interrupts

 Remove IRQ handler if last */

 --------------------------------------------------------------------- */

 unused */

 Cannot change this parameter when up */

 setting predef as 0 for loading userdefined mcs data */

 Cannot change this parameter when up */

 Cannot change this parameter when up */

 Cannot change this parameter when up */

 Cannot change this parameter when up */

 --------------------------------------------------------------------- */

 addr is an AX.25 shifted ASCII mac address */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * 6pack.c	This module implements the 6pack protocol for kernel-based

 *		devices like TTY. It interfaces between a raw TTY and the

 *		kernel's AX.25 protocol layers.

 *

 * Authors:	Andreas Könsgen <ajk@comnets.uni-bremen.de>

 *              Ralf Baechle DL5RB <ralf@linux-mips.org>

 *

 * Quite a lot of stuff "stolen" by Joerg Reuter from slip.c, written by

 *

 *		Laurence Culhane, <loz@holmes.demon.co.uk>

 *		Fred N. van Kempen, <waltje@uwalt.nl.mugnet.org>

 sixpack priority commands */

 start and end of a 6pack frame */

 transmit overrun */

 receive overrun */

 receive buffer overflow */

 valid checksum of a 6pack frame */

 masks to get certain bits out of the status bytes sent by the TNC */

 default level 2 parameters */

 250 ms */

 in 256ths */

 100 ms */

 in 1 s */

 in 1 s */

 6pack configuration. */

 MAX number of 6pack channels */

 Default MTU */

 Parity, etc. error	*/

 Various fields. */

 ptr to TTY structure	*/

 easy for intr handling  */

 These are pointers to the malloc()ed frame buffers. */

 receiver buffer	*/

 received chars counter  */

 transmitter buffer	*/

 next byte to XMIT */

 bytes left in XMIT queue  */

 Our mtu (to spot changes!) */

 Max buffers sizes */

 Flag values/ mode etc */

 6pack mode */

 6pack stuff */

/*

 * Perform the persistence/slottime algorithm for CSMA access. If the

 * persistence check was successful, write the data to the serial driver.

 * Note that in case of DAMA operation, the data is not sent here.

 ----> 6pack timer interrupt handler and friends. <---- */

 Encapsulate one AX.25 frame and stuff into a TTY queue. */

 sp->mtu = AX25_MTU = max. PACLEN = 256 */

 ignored */

	/*

	 * In case of fullduplex or DAMA operation, we don't take care about the

	 * state of the DCD or of any timers, as the determination of the

	 * correct time to send is the job of the AX.25 layer. We send

	 * immediately after data has arrived.

 Encapsulate an IP datagram and kick it into a TTY queue. */

 We were not busy, so we are now... :-) */

 Close the low-level part of the 6pack channel. */

 TTY discipline is running. */

 Finish setting up the DEVICE info. */

 Only activated in AX.25 mode */

 Send one completely decapsulated IP datagram to the IP layer. */

/*

 * This is the routine that sends the received data to the kernel AX.25.

 * 'cmd' is the KISS command. For AX.25 data, it is zero.

 KISS command */

 ----------------------------------------------------------------------- */

/*

 * We have a potential race on dereferencing tty->disc_data, because the tty

 * layer provides no locking at all - thus one cpu could be running

 * sixpack_receive_buf while another calls sixpack_close, which zeroes

 * tty->disc_data and frees the memory that sixpack_receive_buf is using.  The

 * best way to fix this is to use a rwlock in the tty struct, but for now we

 * use a single global rwlock for all ttys in ppp line discipline.

/*

 * Called by the TTY driver when there's room for more data.  If we have

 * more packets to send, we send them here.

		/* Now serial buffer is almost free & we can start

 ----------------------------------------------------------------------- */

/*

 * Handle the 'receiver data ready' interrupt.

 * This function is called by the tty module in the kernel when

 * a block of 6pack data has been received, which can now be decapsulated

 * and sent on to some IP layer for further processing.

 Read the characters out of the buffer */

/*

 * Try to resync the TNC. Called by the resync timer defined in

 * decode_prio_command

 gcc oh piece-o-crap ... */

 clear any data that might have been received */

 reset state machine */

 resync the TNC */

 Start resync timer again -- the TNC might be still absent */

/*

 * Open the high-level part of the 6pack channel.

 * This function is called by the TTY module when the

 * 6pack line discipline is called for.  Because we are

 * sure the tty line exists, we only have to link it to

 * a free 6pcack channel...

 !!! length of the buffers. MTU is IP MTU, not PACLEN!  */

 Clear ESCAPE & ERROR flags */

 Done.  We have linked the TTY line to a channel. */

 Now we're ready to register. */

/*

 * Close down a 6pack channel.

 * This means flushing out any pending queues, and then restoring the

 * TTY line discipline to what it was before it got hooked to 6pack

 * (which usually is TTY again).

	/*

	 * We have now ensured that nobody can start using ap from now on, but

	 * we have to wait for all existing users to finish.

	/* We must stop the queue to avoid potentially scribbling

	 * on the free buffers. The sp->dead completion is not sufficient

	 * to protect us from sp->xbuff access.

 Free all 6pack frame buffers after unreg. */

 Perform I/O control on an active 6pack channel. */

 Initialize 6pack control device -- register 6pack line discipline */

 Register the provided line protocol discipline */

 encode an AX.25 packet into 6pack */

 decode 4 sixpack-encoded bytes into 3 data bytes */

 identify and execute a 6pack priority command byte */

 idle ? */

	/* RX and DCD flags can only be set in the same prio command,

	   if the DCD flag has been set without the RX flag in the previous

	   prio command. If DCD has not been set before, something in the

	   transmission has gone wrong. In this case, RX and DCD are

	   cleared in order to prevent the decode_data routine from

 output watchdog char if idle */

 needed to trigger the TNC watchdog */

        /* if the state byte has been received, the TNC is present,

 identify and execute a standard 6pack command byte */

 normal command */

 fill trailing bytes with zeroes */

 decode a 6pack packet */

 SPDX-License-Identifier: GPL-2.0-or-later

****************************************************************************/

/*

 *	baycom_par.c  -- baycom par96 and picpar radio modem driver.

 *

 *	Copyright (C) 1996-2000  Thomas Sailer (sailer@ife.ee.ethz.ch)

 *

 *  Please note that the GPL allows you to use the driver, NOT the radio.

 *  In order to use the radio, you need a license from the communications

 *  authority of your country.

 *

 *  Supported modems

 *

 *  par96:  This is a modem for 9600 baud FSK compatible to the G3RUH standard.

 *          The modem does all the filtering and regenerates the receiver clock.

 *          Data is transferred from and to the PC via a shift register.

 *          The shift register is filled with 16 bits and an interrupt is

 *          signalled. The PC then empties the shift register in a burst. This

 *          modem connects to the parallel port, hence the name. The modem

 *          leaves the implementation of the HDLC protocol and the scrambler

 *          polynomial to the PC. This modem is no longer available (at least

 *          from Baycom) and has been replaced by the PICPAR modem (see below).

 *          You may however still build one from the schematics published in

 *          cq-DL :-).

 *

 *  picpar: This is a redesign of the par96 modem by Henning Rech, DF9IC. The

 *          modem is protocol compatible to par96, but uses only three low

 *          power ICs and can therefore be fed from the parallel port and

 *          does not require an additional power supply. It features

 *          built in DCD circuitry. The driver should therefore be configured

 *          for hardware DCD.

 *

 *  Command line options (insmod command line)

 *

 *  mode     driver mode string. Valid choices are par96 and picpar.

 *  iobase   base address of the port; common values are 0x378, 0x278, 0x3bc

 *

 *  History:

 *   0.1  26.06.1996  Adapted from baycom.c and made network driver interface

 *        18.10.1996  Changed to new user space access routines (copy_{to,from}_user)

 *   0.3  26.04.1997  init code/data tagged

 *   0.4  08.07.1997  alternative ser12 decoding algorithm (uses delta CTS ints)

 *   0.5  11.11.1997  split into separate files for ser12/par96

 *   0.6  03.08.1999  adapt to Linus' new __setup/__initcall

 *                    removed some pre-2.2 kernel compatibility cruft

 *   0.7  10.08.1999  Check if parport can do SPP and is safe to access during interrupt contexts

 *   0.8  12.02.2000  adapted to softnet driver interface

 *                    removed direct parport access, uses parport driver methods

 *   0.9  03.07.2000  fix interface name handling

****************************************************************************/

 --------------------------------------------------------------------- */

/*

 * modem options; bit mask

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 ---------------------------------------------------------------------- */

/*

 * Information that need to be kept for each board.

 BAYCOM_DEBUG */

 --------------------------------------------------------------------- */

	/*

	 * measure the interrupt frequency

 BAYCOM_DEBUG */

 --------------------------------------------------------------------- */

/*

 * ===================== PAR96 specific routines =========================

 X^17 */

 X^0+X^5 */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

	/*

	 * do receiver; differential decode and descramble on the fly

 now the diff decoded data is inverted in descram */

	/*

	 * do DCD algorithm

 search for flags and set the dcd counter appropriately */

 check for abort/noise sequences */

 decrement and set the dcd variable */

 --------------------------------------------------------------------- */

	/*

	 * check if transmitter active

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 switch off PTT */

 --------------------------------------------------------------------- */

 disable interrupt */

 switch off PTT */

 --------------------------------------------------------------------- */

/*

 * ===================== hdlcdrv driver interface =========================

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 BAYCOM_DEBUG */

 --------------------------------------------------------------------- */

/*

 * command line settable parameters

 --------------------------------------------------------------------- */

	/*

	 * register net devices

 --------------------------------------------------------------------- */

/*

 * format: baycom_par=io,mode

 * mode: par96,picpar

 MODULE */

 --------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	G8BPQ compatible "AX.25 via ethernet" driver release 004

 *

 *	This code REQUIRES 2.0.0 or higher/ NET3.029

 *

 *	This is a "pseudo" network driver to allow AX.25 over Ethernet

 *	using G8BPQ encapsulation. It has been extracted from the protocol

 *	implementation because

 *

 *		- things got unreadable within the protocol stack

 *		- to cure the protocol stack from "feature-ism"

 *		- a protocol implementation shouldn't need to know on

 *		  which hardware it is running

 *		- user-level programs like the AX.25 utilities shouldn't

 *		  need to know about the hardware.

 *		- IP over ethernet encapsulated AX.25 was impossible

 *		- rxecho.c did not work

 *		- to have room for extensions

 *		- it just deserves to "live" as an own driver

 *

 *	This driver can use any ethernet destination address, and can be

 *	limited to accept frames from one dedicated ethernet card only.

 *

 *	Note that the driver sets up the BPQ devices automagically on

 *	startup or (if started before the "insmod" of an ethernet device)

 *	on "ifconfig up". It hopefully will remove the BPQ on "rmmod"ing

 *	the ethernet device (in fact: as soon as another ethernet or bpq

 *	device gets "ifconfig"ured).

 *

 *	I have heard that several people are thinking of experiments

 *	with highspeed packet radio using existing ethernet cards.

 *	Well, this driver is prepared for this purpose, just add

 *	your tx key control and a txdelay / tailtime algorithm,

 *	probably some buffering, and /voila/...

 *

 *	History

 *	BPQ   001	Joerg(DL1BKE)		Extracted BPQ code from AX.25

 *						protocol stack and added my own

 *						yet existing patches

 *	BPQ   002	Joerg(DL1BKE)		Scan network device list on

 *						startup.

 *	BPQ   003	Joerg(DL1BKE)		Ethernet destination address

 *						and accepted source address

 *						can be configured by an ioctl()

 *						call.

 *						Fixed to match Linux networking

 *						changes - 2.1.15.

 *	BPQ   004	Joerg(DL1BKE)		Fixed to not lock up on ifconfig.

 list of bpq devices chain */

 link to ethernet device */

 bpq device (bpq#) */

 ether destination address */

 accept ether frames from this address only */

/*

 * bpqether network devices are paired with ethernet devices below them, so

 * form a special "super class" of normal ethernet devices; split their locks

 * off into a separate class since they always nest.

 ------------------------------------------------------------------------ */

/*

 *	Get the ethernet device for a BPQ device

/*

 *	Get the BPQ device for the ethernet device

 ------------------------------------------------------------------------ */

/*

 *	Receive an AX.25 frame via an ethernet interface.

	/*

	 * if we want to accept frames from just one ethernet device

	 * we check the source address of the sender.

 Remove the length bytes */

 Set the length of the data */

/*

 * 	Send an AX.25 frame via an ethernet interface

	/*

	 * Just to be *really* sure not to send anything if the interface

	 * is down, the ethernet device may have gone.

 Drop KISS byte */

	/*

	 * We're about to mess with the skb which may still shared with the

	 * generic networking code so unshare and ensure it's got enough

	 * space for the BPQ headers.

 Make space for length */

/*

 *	Set AX.25 callsign

/*	Ioctl commands

 *

 *		SIOCSBPQETHOPT		reserved for enhancements

 *		SIOCSBPQETHADDR		set the destination and accepted

 *					source ethernet address (broadcast

 *					or multicast: accept all)

/*

 * open/close a device

 ------------------------------------------------------------------------ */

/*

 *	Proc filesystem

 ------------------------------------------------------------------------ */

 Allow recursion */

/*

 *	Setup a new device.

 List protected by RTNL */

/*

 *	Handle device status changes.

 new ethernet device -> new BPQ interface */

 ethernet device closed -> close BPQ interface */

 ethernet device removed -> free BPQ interface */

 ------------------------------------------------------------------------ */

/*

 * Initialize driver. To be called from af_ax25 if not compiled as a

 * module

 CONFIG_PROC_FS */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for high-speed SCC boards (those with DMA support)

 * Copyright (C) 1997-2000 Klaus Kudielka

 *

 * S5SCC/DMA support by Janko Koleznik S52HI

 Number of buffers per channel */

 NUM_TX_BUF >= 1 (min. 2 recommended) */

 NUM_RX_BUF >= 1 (min. 2 recommended) */

 BUF_SIZE >= mtu + hard_header_len */

 Cards supported */

 Frequency of timer 0 */

 SCC chips supported */

 I/O registers */

 8530 registers relative to card base */

 8253/8254 registers relative to card base */

 Additional PI/PI2 registers relative to card base */

 Additional PackeTwin registers relative to card base */

 PackeTwin I/O register values */

 INT_REG */

 SERIAL_CFG */

 DMA_CFG */

 Status values */

 Ioctls */

 Data types */

 frequency of BRG input (don't change) */

 BRG terminal count; BRG disabled if < 0 */

 0 (nrz), 1 (nrzi) */

 see dmascc_cfg documentation */

 [1/TMR_0_HZ] */

 [1/HZ] */

 [1/TMR_0_HZ] */

 [1/TMR_0_HZ] */

 [1/TMR_0_HZ] */

 1 ... 256 */

 -1 (disable), 0, 1, 3 */

 [1/TMR_0_HZ] */

 [1/TMR_0_HZ] */

 [1/TMR_0_HZ] */

 [1/TMR_0_HZ] */

 Per scc_info */

 Per device register lock */

 Function declarations */

 Initialization variables */

 Beware! hw[] is also used in dmascc_exit(). */

 Global variables */

 Unregister devices */

 Reset board */

 Free memory */

 Initialize random number generator */

 Cards found = 0 */

 Warning message */

 Run autodetection for each card type */

 User-specified I/O address regions */

 Default I/O address regions */

 Check valid I/O address regions */

 Start timers */

 Timer 0: LSB+MSB, Mode 3, TMR_0_HZ */

 Timer 1: LSB+MSB, Mode 0, HZ/10 */

 Timer 2: LSB+MSB, Mode 0 */

 Wait until counter registers are loaded */

 Timing loop */

 Read back Timer 1: latch; read LSB; read MSB */

 Also check whether counter did wrap */

 Evaluate measurements */

 Ok, we have found an adapter */

 NUM_TYPES */

 If any adapter was successfully initialized, return ok */

 If no adapter found, return error */

 Initialize what is necessary for write_scc and write_scc_data */

 Reset SCC */

 Determine type of chip by enabling SDLC/HDLC enhancements */

 WR7' not present. This is an ordinary Z8530 SCC. */

 Put one character in TX FIFO */

 TX FIFO not full. This is a Z85230 ESCC with a 4-byte FIFO. */

 TX FIFO full. This is a Z85C30 SCC with a 1-byte FIFO. */

 Start IRQ auto-detection */

 Enable interrupts */

 Start timer */

 Wait and detect IRQ */

 Clear pending interrupt, disable interrupts */

 Set up data structures */

 Driver functions */

 Request IRQ if not already used by other channel */

 Request DMA if required */

 Initialize local variables */

 Reset channel */

 X1 clock, SDLC mode */

 DMA */

 8 bit RX char, RX disable */

 8 bit TX char, TX disable */

 SDLC address field */

 SDLC flag */

 Select WR7' */

 Auto EOM reset */

 Select WR7' */

		/* The following bits are set (see 2.5.2.1):

		   - Automatic EOM reset

		   - Interrupt request if RX FIFO is half full

		   This bit should be ignored in DMA mode (according to the

		   documentation), but actually isn't. The receiver doesn't work if

		   it is set. Thus, we have to clear it in DMA mode.

		   - Interrupt/DMA request if TX FIFO is completely empty

		   a) If set, the ESCC behaves as if it had no TX FIFO (Z85C30

		   compatibility).

		   b) If cleared, DMA requests may follow each other very quickly,

		   filling up the TX FIFO.

		   Advantage: TX works even in case of high bus latency.

		   Disadvantage: Edge-triggered DMA request circuitry may miss

		   a request. No more data is delivered, resulting

		   in a TX FIFO underrun.

		   Both PI2 and S5SCC/DMA seem to work fine with TXFIFOE cleared.

		   The PackeTwin doesn't. I don't know about the PI, but let's

		   assume it behaves like the PI2.

 Preset CRC, NRZ(I) encoding */

 Configure baud rate generator */

 Program BR generator */

		/* BRG source = SYS CLK; enable BRG; DTR REQ function (required by

 Enable DPLL */

 Disable BR generator */

 Configure clocks */

 Disable external TX clock receiver */

 Enable external TX clock receiver */

 Configure PackeTwin */

 Assert DTR, enable interrupts */

 Read current status */

 Enable DCD interrupt */

 Drop DTR */

 Reset channel, free DMA and IRQ */

 Temporarily stop the scheduler feeding us packets */

 Transfer data to DMA buffer */

 Clear interrupts while we touch our circular buffers */

 Move the ring buffer's head */

	/* If we just filled up the last buffer, leave queue stopped.

	   The higher layers must wait until we have a DMA buffer

 Set new TX state */

 Assert RTS, start timer */

 Turn interrupts back on and free buffer */

 Program DMA controller */

 Enable TX underrun interrupt */

 Configure DREQ */

 Write first byte(s) */

 Reset EOM latch if we do not have the AUTOEOM feature */

 Clear RX FIFO */

 Program DMA controller */

 Configure PackeTwin DMA */

 Sp. cond. intr. only, ext int enable, RX DMA enable */

 Reset current frame */

 Intr. on all Rx characters and Sp. cond., ext int enable */

 Disable receiver */

 Disable DREQ / RX interrupt */

 Disable DMA */

 See "Numerical Recipes in C", second edition, p. 284 */

	/* Ok, no interrupts pending from this 8530. The INT line should

	/* At this point interrupts are enabled, and the interrupt under service

	   is already acknowledged, but masked off.



	   Interrupt processing: We loop until we know that the IRQ line is

	   low. If another positive edge occurs afterwards during the ISR,

	   another interrupt will be triggered by the interrupt controller

	   as soon as the IRQ level is enabled again (see asm/irq.h).



	   Bottom-half handlers will be processed after scc_isr(). This is

	   important, since we only have small ringbuffers and want new data

 Check special condition and perform error reset. See 2.4.7.5. */

		/* Check special condition for each character. Error reset not necessary.

 See Figure 2-15. Only overrun and EOF need to be checked. */

 Receiver overrun */

 End of frame. Get byte count */

 We had an overrun */

 Count invalid CRC only if packet length >= minimum */

 Put good frame in FIFO */

 Get ready for new frame */

 Allocate buffer */

 Drop packet */

 Fill buffer */

 Move tail */

	/* Suspend TX interrupts if we don't want to send anything.

 Write characters */

 Reset EOM latch of Z8530 */

 Read status, reset interrupt bit (open latches) */

	/* Transmit underrun (2.4.9.6). We can't check the TxEOM flag, since

 Get remaining bytes */

 Disable DREQ / TX interrupt */

 Update packet statistics */

 Other underrun interrupts may already be waiting */

 Update packet statistics */

 Remove frame from FIFO */

 Inform upper layers */

 Switch state */

 DCD transition */

 CTS transition */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Copyright (C) Hans Alblas PE1AYX <hans@esrac.ele.tue.nl>

 * Copyright (C) 2004, 05 Ralf Baechle DL5RB <ralf@linux-mips.org>

 * Copyright (C) 2004, 05 Thomas Osterried DL9SAU <thomas@x-berg.in-berlin.de>

 SLIP/KISS protocol characters. */

 indicates end of frame	*/

 indicates byte stuffing	*/

 ESC ESC_END means END 'data'	*/

 ESC ESC_ESC means ESC 'data'	*/

 ptr to TTY structure		*/

 easy for intr handling	*/

 These are pointers to the malloc()ed frame buffers. */

 lock for rbuf and xbuf */

 receiver buffer		*/

 received chars counter       */

 transmitter buffer		*/

 pointer to next byte to XMIT */

 bytes left in XMIT queue     */

 Detailed SLIP statistics. */

 Our mtu (to spot changes!)   */

 Max buffers sizes            */

 Flag values/ mode etc	*/

 long req'd: used by set_bit --RR */

 Channel in use               */

 ESC received                 */

 Parity, etc. error           */

 Keepalive test flag		*/

 is outpacket was flag	*/

 MW: for FlexNet, SMACK etc.  */

 CRC auto mode */

---------------------------------------------------------------------------*/

/*

 * Standard encapsulation

	/*

	 * Send an initial END character to flush out any data that may have

	 * accumulated in the receiver due to line noise.

/*

 * MW:

 * OK its ugly, but tell me a better solution without copying the

 * packet to a temporary buffer :-)

 Send one completely decapsulated AX.25 packet to the AX.25 layer. */

			/*

			 * dl9sau bugfix: the trailling two bytes flexnet crc

			 * will not be passed to the kernel. thus we have to

			 * correct the kissparm signature, because it indicates

			 * a crc but there's none

 drop keeptest bit = VSV */

---------------------------------------------------------------------------*/

	/*

	 * allow for arrival of larger UDP packets, even if we say not to

	 * also fixes a bug in which SunOS sends 512-byte packets even with

	 * an MSS of 128

 Encapsulate one AX.25 packet and stuff into a TTY queue. */

 Someone has been ifconfigging */

 Sigh, shouldn't occur BUT ... */

		/* Configuration Command (kissparms(1).

		 * Protocol spec says: never append CRC.

		 * This fixes a very old bug in the linux

			/* command from userspace especially for us,

 Encapsulate an AX.25 packet and kick it into a TTY queue. */

		/*

		 * May be we must check transmitter timeout here ?

		 *      14 Oct 1994 Dmitry Gorodchanin.

 20 sec timeout not reached */

 We were not busy, so we are now... :-) */

 Open the low-level part of the AX25 channel. Easy! */

	/*

	 * Allocate the frame buffers:

	 *

	 * rbuff	Receive buffer.

	 * xbuff	Transmit buffer.

	/*

	 * allow for arrival of larger UDP packets, even if we say not to

	 * also fixes a bug in which SunOS sends 512-byte packets even with

	 * an MSS of 128

 Clear ESCAPE & ERROR flags */

 Close the low-level part of the AX25 channel. Easy! */

 Finish setting up the DEVICE info. */

/*

 * We have a potential race on dereferencing tty->disc_data, because the tty

 * layer provides no locking at all - thus one cpu could be running

 * sixpack_receive_buf while another calls sixpack_close, which zeroes

 * tty->disc_data and frees the memory that sixpack_receive_buf is using.  The

 * best way to fix this is to use a rwlock in the tty struct, but for now we

 * use a single global rwlock for all ttys in ppp line discipline.

 Can be overridden with insmod */

 Restore default settings */

 Perform the low-level AX25 initialization. */

 after register_netdev() - because else printk smashes the kernel */

 Done.  We have linked the TTY line to a channel. */

	/*

	 * We have now ensured that nobody can start using ap from now on, but

	 * we have to wait for all existing users to finish.

	/*

	 * Halt the transmit queue so that a new transmit cannot scribble

	 * on our buffers

 Free all AX25 frame buffers after unreg. */

 Perform I/O control on an active ax25 channel. */

 First make sure we're connected. */

/*

 * Handle the 'receiver data ready' interrupt.

 * This function is called by the 'tty_io' module in the kernel when

 * a block of data has been received, which can now be decapsulated

 * and sent on to the AX.25 layer for further processing.

	/*

	 * Argh! mtu change time! - costs us the packet part received

	 * at the change

 Read the characters out of the buffer */

/*

 * Called by the driver when there's room for more data.  If we have

 * more packets to send, we send them here.

		/* Now serial buffer is almost free & we can start

		 * transmission of another packet

 SPDX-License-Identifier: GPL-2.0-or-later

****************************************************************************/

/*

 *	baycom_ser_hdx.c  -- baycom ser12 halfduplex radio modem driver.

 *

 *	Copyright (C) 1996-2000  Thomas Sailer (sailer@ife.ee.ethz.ch)

 *

 *  Please note that the GPL allows you to use the driver, NOT the radio.

 *  In order to use the radio, you need a license from the communications

 *  authority of your country.

 *

 *  Supported modems

 *

 *  ser12:  This is a very simple 1200 baud AFSK modem. The modem consists only

 *          of a modulator/demodulator chip, usually a TI TCM3105. The computer

 *          is responsible for regenerating the receiver bit clock, as well as

 *          for handling the HDLC protocol. The modem connects to a serial port,

 *          hence the name. Since the serial port is not used as an async serial

 *          port, the kernel driver for serial ports cannot be used, and this

 *          driver only supports standard serial hardware (8250, 16450, 16550A)

 *

 *  Command line options (insmod command line)

 *

 *  mode     ser12    hardware DCD

 *           ser12*   software DCD

 *           ser12@   hardware/software DCD, i.e. no explicit DCD signal but hardware

 *                    mutes audio input to the modem

 *           ser12+   hardware DCD, inverted signal at DCD pin

 *  iobase   base address of the port; common values are 0x3f8, 0x2f8, 0x3e8, 0x2e8

 *  irq      interrupt line of the port; common values are 4,3

 *

 *  History:

 *   0.1  26.06.1996  Adapted from baycom.c and made network driver interface

 *        18.10.1996  Changed to new user space access routines (copy_{to,from}_user)

 *   0.3  26.04.1997  init code/data tagged

 *   0.4  08.07.1997  alternative ser12 decoding algorithm (uses delta CTS ints)

 *   0.5  11.11.1997  ser12/par96 split into separate files

 *   0.6  14.04.1998  cleanups

 *   0.7  03.08.1999  adapt to Linus' new __setup/__initcall

 *   0.8  10.08.1999  use module_init/module_exit

 *   0.9  12.02.2000  adapted to softnet driver interface

 *   0.10 03.07.2000  fix interface name handling

****************************************************************************/

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 ---------------------------------------------------------------------- */

/*

 * Information that need to be kept for each board.

 BAYCOM_DEBUG */

 --------------------------------------------------------------------- */

	/*

	 * measure the interrupt frequency

 BAYCOM_DEBUG */

 --------------------------------------------------------------------- */

/*

 * ===================== SER12 specific routines =========================

 DLAB = 1 */

 word length = 6 */

	/*

	 * make sure the next interrupt is generated;

	 * 0 must be used to power the modem; the modem draws its

	 * power from the TxD line

	/*

	 * it is important not to set the divider while transmitting;

	 * this reportedly makes some UARTs generating interrupts

	 * in the hundredthousands per second region

	 * Reported by: Ignacio.Arenaza@studi.epfl.ch (Ignacio Arenaza Nuno)

 --------------------------------------------------------------------- */

/*

 * must call the TX arbitrator every 10ms

 one interrupt per channel bit */

	/*

	 * first output the last bit (!) then call HDLC transmitter,

	 * since this may take quite long

 --------------------------------------------------------------------- */

	/*

	 * do demodulator

 the CTS line */

 offset to ensure DCD off on silent input */

		/*

		 * PLL code for the improved software DCD algorithm

			/*

			 * intermediate sample; set timing correction to normal

			/*

			 * do PLL correction and call HDLC receiver

 transition too late */

 BAYCOM_DEBUG */

 transition too early */

 BAYCOM_DEBUG */

		/*

		 * DCD stuff

		/*

		 * PLL algorithm for the hardware squelch DCD algorithm

			/*

			 * intermediate sample; set timing correction to normal

			/*

			 * do PLL correction and call HDLC receiver

 transition too late */

 BAYCOM_DEBUG */

 transition too early */

 BAYCOM_DEBUG */

		/*

		 * DCD stuff

 transmitter off */

 offset to ensure DCD off on silent input */

 --------------------------------------------------------------------- */

 fast way out */

			/*

			 * check if transmitter active

 --------------------------------------------------------------------- */

 loopback mode */

 restore old values */

 enable FIFOs */

 --------------------------------------------------------------------- */

 disable FIFOs */

	/*

	 * enable transmitter empty interrupt

	/*

	 * set the SIO to 6 Bits/character and 19200 or 28800 baud, so that

	 * we get exactly (hopefully) 2 or 3 interrupts per radio symbol,

	 * depending on the usage of the software DCD routine

 --------------------------------------------------------------------- */

	/*

	 * disable interrupts

 --------------------------------------------------------------------- */

/*

 * ===================== hdlcdrv driver interface =========================

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 BAYCOM_DEBUG */

 --------------------------------------------------------------------- */

/*

 * command line settable parameters

 --------------------------------------------------------------------- */

	/*

	 * register net devices

 --------------------------------------------------------------------- */

/*

 * format: baycom_ser_hdx=io,irq,mode

 * mode: ser12    hardware DCD

 *       ser12*   software DCD

 *       ser12@   hardware/software DCD, i.e. no explicit DCD signal but hardware

 *                mutes audio input to the modem

 *       ser12+   hardware DCD, inverted signal at DCD pin

 MODULE */

 --------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-or-later

****************************************************************************/

/*

 *	hdlcdrv.c  -- HDLC packet radio network driver.

 *

 *	Copyright (C) 1996-2000  Thomas Sailer (sailer@ife.ee.ethz.ch)

 *

 *  Please note that the GPL allows you to use the driver, NOT the radio.

 *  In order to use the radio, you need a license from the communications

 *  authority of your country.

 *

 *  The driver was derived from Donald Beckers skeleton.c

 *	Written 1993-94 by Donald Becker.

 *

 *  History:

 *   0.1  21.09.1996  Started

 *        18.10.1996  Changed to new user space access routines 

 *                    (copy_{to,from}_user)

 *   0.2  21.11.1996  various small changes

 *   0.3  03.03.1997  fixed (hopefully) IP not working with ax.25 as a module

 *   0.4  16.04.1997  init code/data tagged

 *   0.5  30.07.1997  made HDLC buffers bigger (solves a problem with the

 *                    soundmodem driver)

 *   0.6  05.04.1998  add spinlocks

 *   0.7  03.08.1999  removed some old compatibility cruft

 *   0.8  12.02.2000  adapted to softnet driver interface

****************************************************************************/

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

/*

 * the CRC routines are stolen from WAMPES

 * by Dieter Deyke

---------------------------------------------------------------------------*/

---------------------------------------------------------------------------*/

---------------------------------------------------------------------------*/

 ---------------------------------------------------------------------- */

 ---------------------------------------------------------------------- */

/*

 * The HDLC routines

 KISS kludge */

 KISS kludge */

 HDLCDRV_DEBUG */

 abort received */

 flag received */

 stuffed bit */

 ---------------------------------------------------------------------- */

 KISS_VERBOSE */	      

 KISS_VERBOSE */	      

 ---------------------------------------------------------------------- */

 strip KISS byte */

 the appended CRC */

 ---------------------------------------------------------------------- */

 ---------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

/*

 * ===================== network driver interface =========================

 --------------------------------------------------------------------- */

 addr is an AX.25 shifted ASCII mac address */

 --------------------------------------------------------------------- */

/*

 * Open/initialize the board. This is called (in the current kernel)

 * sometime after booting when the 'ifconfig' program is run.

 *

 * This routine should set everything up anew at each open, even

 * registers that "should" only need to be set once at boot, so that

 * there is non-reboot way to recover if something goes wrong.

	/*

	 * initialise some variables

 --------------------------------------------------------------------- */

/* 

 * The inverse routine to hdlcdrv_open(). 

 --------------------------------------------------------------------- */

 to be implemented */

 HDLCDRV_DEBUG */

 HDLCDRV_DEBUG */

 HDLCDRV_DEBUG */

 HDLCDRV_DEBUG */

 --------------------------------------------------------------------- */

/*

 * Initialize fields in hdlcdrv

	/*

	 * initialize the hdlcdrv_state struct

 HDLCDRV_DEBUG */

 Fill in the fields of the device structure */

 AF_AX25 device */

 eth_mtu is the default */

 sizeof an ax.25 address */

 --------------------------------------------------------------------- */

	/*

	 * initialize part of the hdlcdrv_state struct

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson AB 2013

 * Authors: Vicram Arv

 *	    Dmitry Tarnyagin <dmitry.tarnyagin@lockless.no>

 *	    Sjur Brendeland

 NAPI schedule quota */

 Defaults used if virtio config space is unavailable */

 Required IP header alignment */

/* struct cfv_napi_contxt - NAPI context info

 * @riov: IOV holding data read from the ring. Note that riov may

 *	  still hold data when cfv_rx_poll() returns.

 * @head: Last descriptor ID we received from vringh_getdesc_kern.

 *	  We use this to put descriptor back on the used ring. USHRT_MAX is

 *	  used to indicate invalid head-id.

/* struct cfv_stats - statistics for debugfs

 * @rx_napi_complete:	Number of NAPI completions (RX)

 * @rx_napi_resched:	Number of calls where the full quota was used (RX)

 * @rx_nomem:		Number of SKB alloc failures (RX)

 * @rx_kicks:		Number of RX kicks

 * @tx_full_ring:	Number times TX ring was full

 * @tx_no_mem:		Number of times TX went out of memory

 * @tx_flow_on:		Number of flow on (TX)

 * @tx_kicks:		Number of TX kicks

/* struct cfv_info - Caif Virtio control structure

 * @cfdev:	caif common header

 * @vdev:	Associated virtio device

 * @vr_rx:	rx/downlink host vring

 * @vq_tx:	tx/uplink virtqueue

 * @ndev:	CAIF link layer device

 * @watermark_tx: indicates number of free descriptors we need

 *		to reopen the tx-queues after overload.

 * @tx_lock:	protects vq_tx from concurrent use

 * @tx_release_tasklet: Tasklet for freeing consumed TX buffers

 * @napi:       Napi context used in cfv_rx_poll()

 * @ctx:        Context data used in cfv_rx_poll()

 * @tx_hr:	transmit headroom

 * @rx_hr:	receive headroom

 * @tx_tr:	transmit tail room

 * @rx_tr:	receive tail room

 * @mtu:	transmit max size

 * @mru:	receive max size

 * @allocsz:    size of dma memory reserved for TX buffers

 * @alloc_addr: virtual address to dma memory for TX buffers

 * @alloc_dma:  dma address to dma memory for TX buffers

 * @genpool:    Gen Pool used for allocating TX buffers

 * @reserved_mem: Pointer to memory reserve allocated from genpool

 * @reserved_size: Size of memory reserve allocated from genpool

 * @stats:       Statistics exposed in sysfs

 * @debugfs:    Debugfs dentry for statistic counters

 Protect access to vq_tx */

/* struct buf_info - maintains transmit buffer data handle

 * @size:	size of transmit buffer

 * @dma_handle: handle to allocated dma device memory area

 * @vaddr:	virtual address mapping to allocated memory area

 Called from virtio device, in IRQ context */

/* This is invoked whenever the remote processor completed processing

 * a TX msg we just sent, and the buffer is put back to the used ring.

 Get used buffer from used ring to recycle used descriptors */

 Stop looping if there are no more buffers to free */

		/* watermark_tx indicates if we previously stopped the tx

		 * queues. If we have enough free stots in the virtio ring,

		 * re-establish memory reserved and open up tx queues.

 Re-establish memory reserve */

 Open up the tx queues */

			/* Buffers are recycled in cfv_netdev_tx, so

			 * disable notifications when queues are opened.

 if no memory reserve, wait for more free slots */

 Allocate a SKB and copy packet data to it */

 Verify that packet size with down-link header and mtu size */

 Get packets from the host vring */

		/* Put the previous iovec back on the used ring and

		 * fetch a new iovec if we have processed all elements.

 TODO: Add check on valid buffer address */

 Push received packet up the stack. */

 Really out of packets? (stolen from virtio_net)*/

 Stop NAPI poll on OOM, we hope to be polled later */

 We're doomed, any modem fault is fatal */

	/* dma_alloc can only allocate whole pages, and we need a more

	 * fine graned allocation so we use genpool. We ask for space needed

	 * by IP and a full ring. If the dma allcoation fails we retry with a

	 * smaller allocation size.

 Allocate on 128 bytes boundaries (1 << 7)*/

	/* Reserve some memory for low memory situations. If we hit the roof

	 * in the memory pool, we stop TX flow and release the reserve.

 Enable the CAIF interface and allocate the memory-pool */

 Schedule NAPI to read any pending packets */

 Disable the CAIF interface and free the memory-pool */

 Disable interrupts, queues and NAPI polling */

 Release any TX buffers on both used and available rings */

 Release all dma allocated memory and destroy the pool */

 Allocate a buffer in dma-memory and copy skb to it */

 Make the IP header aligned in the buffer */

 allocate dma memory buffer */

 copy skbuf contents to send buffer */

 Put the CAIF packet on the virtio ring and kick the receiver */

 garbage collect released buffers */

	/* Flow-off check takes into account number of cpus to make sure

	 * virtqueue will not be overfilled in any possible smp conditions.

	 *

	 * Flow-on is triggered when sufficient buffers are freed

	/* If we run out of memory, we release the memory reserve and retry

	 * allocation.

 Turn flow on when a 1/4 of the descriptors are released */

 Enable notifications of recycled TX buffers */

 If the memory reserve does it's job, this shouldn't happen */

 If flow control works, this shouldn't happen */

 update netdev statistics */

 tell the remote processor it has a pending message to read */

 Create debugfs counters for the device */

 Setup CAIF for the a virtio device */

 Get the RX virtio ring. This is a "host side vring". */

 Get the TX virtio ring. This is a "guest side vring". */

 Get the CAIF configuration from virtio config space, if available */

 Disable buffer release interrupts unless we have stopped TX queues */

 Initialize NAPI poll context data */

 Carrier is off until netdevice is opened */

 register Netdev */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson AB 2010

 * Author:	Sjur Brendeland

 Bit 1 = 0x02*/

 Bit 4 = 0x10 */

	/*

	 * NOTE: flags may contain information about break or overrun.

	 * This is not yet handled.

	/*

	 * Workaround for garbage at start of transmission,

	 * only enable if STX handling is not enabled.

 Get a suitable caif packet and copy in data. */

 Push received packet up the stack. */

 Enter critical section */

 skb_peek is safe because handle_tx is called after skb_queue_tail */

 Make sure you don't write too much */

 Write to tty or loopback */

 Error on TTY ?! */

 Reduce buffer written, and discard if empty */

 Send flow off if queue is empty */

 Send flow off once, on high water mark */

 No write no play */

 release devices to avoid name collision */

 The line discipline structure. */

 SPDX-License-Identifier: GPL-2.0-or-later

/* MHI MBIM Network driver - Network/MBIM over MHI bus

 *

 * Copyright (C) 2021 Linaro Ltd <loic.poulain@linaro.org>

 *

 * This driver copy some code from cdc_ncm, which is:

 * Copyright (C) ST-Ericsson 2010-2012

 * and cdc_mbim, which is:

 * Copyright (c) 2012  Smith Micro Software, Inc.

 * Copyright (c) 2012  Bjørn Mork <bjorn@mork.no>

 *

/* 3500 allows to optimize skb allocation, the skbs will basically fit in

 * one 4K page. Large MBIM packets will simply be split over several MHI

 * transfers and chained by the MHI net layer (zerocopy).

 stats */

 Only one NDP is sent, containing the IP packet (no aggregation) */

 Ensure we have enough headroom for crafting MBIM header */

 Fill NTB header */

 Fill the unique NDP */

 Datagram follows the mbim header */

 null termination */

 Serialize MHI channel queuing and MBIM seq */

 No limit on the block length, except the size of the data pkt */

 Last entry is always a NULL terminator */

 Check NTB header and retrieve first NDP offset */

 Process each NDP */

 Check NDP header and retrieve number of datagrams */

 Only IP data type supported, no DSS in MHI context */

 de-aggregate and deliver IP packets */

 null terminator */

 Other NDP to process? */

 free skb */

 This is non-paged skb chaining using frag_list */

		/* Do not hog the CPU if rx buffers are consumed faster than

		 * queued (unlikely).

 If we're still starved of rx buffers, reschedule later */

 Packet has been split over multiple transfers */

 MHI layer stopping/resetting the DL channel */

 Unknown error, simply drop */

 Aggregate the final fragment */

 Refill if RX buffers queue becomes low */

	/* Hardware has consumed the buffer, so free the skb (which is not

	 * freed by the MHI stack) and perform accounting.

 MHI layer stopping/resetting the UL channel */

 Feed the MHI rx buffer pool */

 Carrier is established via out-of-band channel (e.g. qmi) */

 Already protected by RTNL lock */

 No header */

 Start MHI channels */

 Number of transfer descriptors determines size of the queue */

 Register wwan link ops with MHI controller representing WWAN instance */

 Hardware accelerated data PATH (to modem IPA), MBIM protocol */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2021, Linaro Ltd <loic.poulain@linaro.org> */

 Maximum number of minors in use */

 WWAN device create|remove lock */

 minors for WWAN port chardevs */

 for unique WWAN device IDs */

 WWAN port flags */

/**

 * struct wwan_device - The structure that defines a WWAN device

 *

 * @id: WWAN device unique ID.

 * @dev: Underlying device.

 * @port_id: Current available port ID to pick.

 * @ops: wwan device ops

 * @ops_ctxt: context to pass to ops

/**

 * struct wwan_port - The structure that defines a WWAN port

 * @type: Port type

 * @start_count: Port start counter

 * @flags: Store port state and capabilities

 * @ops: Pointer to WWAN port operations

 * @ops_lock: Protect port ops

 * @dev: Underlying device

 * @rxq: Buffer inbound queue

 * @waitqueue: The waitqueue for port fops (read/write/poll)

 * @data_lock: Port specific data access serialization

 * @at_data: AT port specific data

 Serialize ops + protect against removal */

 Port specific data access serialization */

/* This function allocates and registers a new WWAN device OR if a WWAN device

 * already exist for the given parent, it gets a reference and return it.

 * This function is not exported (for now), it is called indirectly via

 * wwan_create_port().

	/* The 'find-alloc-register' operation must be protected against

	 * concurrent execution, a WWAN device is possibly shared between

	 * multiple callers or concurrently unregistered from wwan_remove_dev().

 If wwandev already exists, return it */

 Prevent concurrent picking from wwan_create_dev */

	/* WWAN device is created and registered (get+add) along with its first

	 * child port, and subsequent port registrations only grab a reference

	 * (get). The WWAN device must then be unregistered (del+put) along with

	 * its last port, and reference simply dropped (put) otherwise. In the

	 * same fashion, we must not unregister it when the ops are still there.

 ------- WWAN port management ------- */

 Port type name */

 Port devce name suffix */

/* Allocate and set unique name based on passed format

 *

 * Name allocation approach is highly inspired by the __dev_alloc_name()

 * function.

 *

 * To avoid names collision, the caller must prevent the new port device

 * registration as well as concurrent invocation of this function.

 Collect ids of same name format ports */

 Allocate unique id */

 Name generation */

	/* A port is always a child of a WWAN device, retrieve (allocate or

	 * pick) the WWAN device based on the provided parent device.

 A port is exposed as character device, get a minor */

 allocate unique name based on wwan device id, port type and number */

 Serialize ports registration */

 Prevent any new port operations (e.g. from fops) */

 Release related wwan device */

 Port got unplugged */

 If port is already started, don't start again */

 Port got unplugged */

 skb is not fully consumed, keep it in the queue */

 Implements minimalistic stub terminal IOCTLs support */

 AT port specific IOCTLs */

 aka SIOCINQ aka FIONREAD */

 only supported if ops were registered (not just ports) */

 release the reference */

 shouldn't have a netdev (left) with us as parent so WARN */

 release the reference */

 shouldn't have a netdev (left) with us as parent so WARN */

 release the reference */

 IFLA_WWAN_LINK_ID */

	/* Forge attributes required to create a WWAN netdev. We first

	 * build a netlink message and then parse it. This looks

	 * odd, but such approach is less error prone.

 The next three parsing calls can not fail */

 Link initialized, notify new link */

/**

 * wwan_register_ops - register WWAN device ops

 * @parent: Device to use as parent and shared by all WWAN ports and

 *	created netdevs

 * @ops: operations to register

 * @ctxt: context to pass to operations

 * @def_link_id: id of the default link that will be automatically created by

 *	the WWAN core for the WWAN device. The default link will not be created

 *	if the passed value is WWAN_NO_DEFAULT_LINK.

 *

 * Returns: 0 on success, a negative error code on failure

	/* NB: we do not abort ops registration in case of default link

	 * creation failure. Link ops is the management interface, while the

	 * default link creation is a service option. And we should not prevent

	 * a user from manually creating a link latter if service option failed

	 * now.

 Enqueue child netdev deletion */

/**

 * wwan_unregister_ops - remove WWAN device ops

 * @parent: Device to use as parent and shared by all WWAN ports and

 *	created netdevs

	/* put the reference obtained by wwan_dev_get_by_parent(),

	 * we should still have one (that the owner is giving back

	 * now) due to the ops being assigned.

 Prevent concurent netdev(s) creation/destroying */

 Remove all child netdev(s), using batch removing */

 Finally remove ops */

 chrdev used for wwan ports */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2021, Stephan Gerhold <stephan@gerhold.net> */

 Lower level is a rpmsg dev, upper level is a wwan port */

	/* Select first platform device as parent for the WWAN ports.

	 * On Qualcomm platforms this is usually the platform device that

	 * represents the modem remote processor. This might need to be

	 * adjusted when adding device IDs for other platforms.

 Register as a wwan port, id.driver_data contains wwan port type */

 RPMSG channels for Qualcomm SoCs with integrated modem */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * WWAN device simulator for WWAN framework testing.

 *

 * Copyright (c) 2021, Sergey Ryazanov <ryazanov.s.a@gmail.com>

 Serialize ports creation/deletion */

 AT command parser state */

 No private data */

/* Implements a minimalistic AT commands parser that echo input back and

 * reply with 'OK' to each input command. See AT command protocol details in the

 * ITU-T V.250 recomendations document.

 *

 * Be aware that this processor is not fully V.250 compliant.

	/* Estimate a max possible number of commands by counting the number of

	 * termination chars (S3 param, CR by default). And then allocate the

	 * output buffer that will be enough to fit the echo and result codes of

	 * all commands.

 Output buffer size */

 Ignore formating char */

 Consume the trailing formatting char as well */

 Echo */

 Echo the processed portion of a not yet completed command */

 Make sure that there is no pending deletion work */

 Someone else deleting port at the moment */

 Memory will be freed in the device release callback */

 Avoid new ports */

 This will remove all child netdev(s) */

 Make sure that there is no pending deletion work */

 Memory will be freed in the device release callback */

 Someone else deleting device at the moment */

	/* We can not delete port here since it will cause a deadlock due to

	 * waiting this callback to finish in the debugfs_remove() call. So,

	 * use workqueue.

	/* We can not delete device here since it will cause a deadlock due to

	 * waiting this callback to finish in the debugfs_remove() call. So,

	 * use workqueue.

		/* Create a couple of ports per each device to accelerate

		 * the simulator readiness time.

 Avoid new devs */

 Wait deletion works completion */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2021, Linaro Ltd <loic.poulain@linaro.org> */

 MHI wwan flags */

 Lower level is a mhi dev, upper level is a wwan port */

 State and capabilities */

 Protect against concurrent TX and TX-completion (bh) */

 Protect RX budget and rx_refill scheduling */

	/* RX budget is initially set to the size of the MHI RX queue and is

	 * used to limit the number of allocated and queued packets. It is

	 * decremented on data queueing and incremented on data release.

 Increment RX budget and schedule RX refill if necessary */

 Decrement RX budget if non-zero and return true on success */

 RX buffer has been consumed, increase the allowed budget */

		/* To prevent unlimited buffer allocation if nothing consumes

		 * the RX buffers (passed to WWAN core), track their lifespan

		 * to not allocate more than allowed budget.

 Start mhi device's channel(s) */

 Don't allocate more buffers than MHI channel queue size */

 Add buffers to the MHI inbound queue */

 Queue the packet for MHI transfer and check fullness of the queue */

 MHI core has done with the buffer, release it */

 There is likely new slot available in the MHI queue, re-allow TX */

 MHI core does not update skb->len, do it before forward */

	/* Do not increment rx budget nor refill RX buffers now, wait for the

	 * buffer to be consumed. Done from __mhi_skb_destructor().

 Register as a wwan port, id->driver_data contains wwan port type */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020-21 Intel Corporation.

 WWAN GUID */

 Free the MSI resources. */

 Free mapped doorbell scratchpad bus memory into CPU space. */

 Free mapped IPC_REGS bus memory into CPU space. */

	/* Releases all PCI I/O and memory resources previously reserved by a

	 * successful call to pci_request_regions.  Call this function only

	 * after all use of the PCI regions has ceased.

 Free the shared memory resources. */

 Signal to the system that the PCI device is not in use. */

	/* Reserved PCI I/O and memory resources.

	 * Mark all PCI regions associated with PCI device pci as

	 * being reserved by owner IOSM_IPC.

	/* Reserve the doorbell IPC REGS memory resources.

	 * Remap the memory into CPU space. Arrange for the physical address

	 * (BAR) to be visible from this driver.

	 * pci_ioremap_bar() ensures that the memory is marked uncachable.

	/* Reserve the MMIO scratchpad memory resources.

	 * Remap the memory into CPU space. Arrange for the physical address

	 * (BAR) to be visible from this driver.

	 * pci_ioremap_bar() ensures that the memory is marked uncachable.

 Install the irq handler triggered by CP. */

 Enable bus-mastering for the IOSM IPC device. */

	/* Enable LTR if possible

	 * This is needed for L1.2!

 check if both root port and child supports ASPM L1 */

 Initializes PCIe endpoint configuration */

 BAR0 is used for doorbell */

 update HW configuration */

/* This will read the BIOS WWAN RTD3 settings:

 * D0L1.2/D3L2/Disabled

 Initialize ipc dbg component for the PCIe device */

 Set the driver specific data. */

 Save the address of the PCI device configuration. */

 Update platform configuration */

	/* Initialize the device before it is used. Ask low-level code

	 * to enable I/O and memory. Wake up the device if it was suspended.

		/* If enable of PCIe device has failed then calling

		 * ipc_pcie_cleanup will panic the system. More over

		 * ipc_pcie_cleanup() is required to be called after

		 * ipc_imem_mount()

	/* Read WWAN RTD3 BIOS Setting

 Establish the link to the imem layer. */

/* Enter sleep in s2idle case

 Complete all memory stores before setting bit */

 Complete all memory stores after setting bit */

/* Resume from sleep in s2idle case

 Complete all memory stores before clearing bit. */

 Complete all memory stores after clearing bit. */

 Execute D3 one time. */

 The HAL shall ask the shared memory layer whether D3 is allowed. */

 Save the PCI configuration space of a device before suspending. */

	/* Set the power state of a PCI device.

	 * Transition a device to a new power state, using the device's PCI PM

	 * registers.

	/* Set the power state of a PCI device.

	 * Transition a device to a new power state, using the device's PCI PM

	 * registers.

	/* The HAL shall inform the shared memory layer that the device is

	 * active.

 Store the mapping address in skb scratch pad for later usage */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020-21 Intel Corporation.

/* Actual tasklet function, will be called whenever tasklet is scheduled.

 * Calls event handler involves callback for each element in the message queue

 Loop over the input queue contents. */

 Get the current first queue element. */

 Process the input message. */

 Signal completion for synchronous calls */

 Free message if copy was allocated. */

		/* Set invalid queue element. Technically

		 * spin_lock_irqsave is not required here as

		 * the array element has been processed already

		 * so we can assume that immediately after processing

		 * ipc_task element, queue will not rotate again to

		 * ipc_task same element within such short time.

		/* calculate the new read ptr and update the volatile read

		 * ptr

 Free memory alloc and trigger completions left in the queue during dealloc */

 Add a message to the queue and trigger the ipc_task. */

	/* tasklet send may be called from both interrupt or thread

	 * context, therefore protect queue operation by spinlock

 Get next queue position. */

		/* Get the reference to the queue element and save the passed

		 * values.

		/* apply write barrier so that ipc_task->q_rpos elements

		 * are updated before ipc_task->q_wpos is being updated.

 Update the status of the free queue space. */

	/* Initialize the spinlock needed to protect the message queue of the

	 * ipc_task

	/* This will free/complete any outstanding messages,

	 * without calling the actual handler

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020-21 Intel Corporation.

 Update the uevent in work queue context */

 Initialize the kernel work queue */

 Store the device and event information */

 Schedule uevent in process context using work queue */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020-21 Intel Corporation.

/**

 * struct iosm_netdev_priv - netdev WWAN driver specific private data

 * @ipc_wwan:	Pointer to iosm_wwan struct

 * @netdev:	Pointer to network interface device structure

 * @if_id:	Interface id for device.

 * @ch_id:	IPC channel number for which interface device is created.

/**

 * struct iosm_wwan - This structure contains information about WWAN root device

 *		      and interface to the IPC layer.

 * @ipc_imem:		Pointer to imem data-struct

 * @sub_netlist:	List of active netdevs

 * @dev:		Pointer device structure

 * @if_mutex:		Mutex used for add and remove interface id

 Mutex used for add and remove interface id */

 Bring-up the wwan net link */

 get channel id */

 enable tx path, DL data may follow */

 Bring-down the wwan net link */

 Transmit a packet */

	/* Interface IDs from 1 to 8 are for IP data

	 * & from 257 to 261 are for non-IP data

 Send the SKB to device for transmission */

 Return code of zero is success */

 Log any skb drop */

 Ops structure for wwan net link */

 Setup function for creating new net link */

 Create new wwan net link */

 unregistering includes synchronize_net() */

 WWAN core will create a netdev for the default IP MUX channel */

 This call will remove all child netdev(s) */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020-21 Intel Corporation.

 Check the wwan ips if it is valid with Channel as input. */

 limit max. nr of entries */

/* This timer handler will retry DL buff allocation if a pipe has no free buf

 * and gives doorbell if TD is available

 Post an async tasklet event to trigger HP update Doorbell */

 Fast update timer tasklet handler to trigger HP update */

 Post an async tasklet event to trigger HP update Doorbell */

	/* The instance ID is same as channel ID because this is been reused

	 * for channel alloc function.

 Use the TD update timer only in the runtime phase */

 trigger the doorbell irq on CP directly. */

 Analyze the uplink pipe of all active channels. */

 Get the reference to the skbuf accumulator list. */

 Fill the transfer descriptor with the uplink buffer info. */

 forced HP update needed for non data channels */

 Trigger the CP interrupt to enter the init state. */

 Wait for the CP update. */

 Prepare the MMIO space */

 Trigger the CP irq to enter the running state. */

 timeout */

 Analyze the packet type and distribute it. */

 An AT/control or IP packet is expected. */

 Process the downlink data and pass them to the char or net layer. */

 Seek for pipes with pending DL data. */

 Analyze the packet type and distribute it. */

 try to allocate new empty DL SKbs from head..tail - 1*/

 Force HP update for non IP channels */

 If Fast Update timer is already running then stop */

	/* Any control channel process will get immediate HP update.

	 * Start Fast update timer only for IP channel if all the TDs were

	 * used in last process.

 process open uplink pipe */

 Get the internal phase. */

 Free UL buffers. */

		/* If the user app was suspended in uplink direction - blocking

		 * write, resume it.

 Free the skbuf element. */

 Trace channel stats for IP UL pipe. */

 Executes the irq. */

 Execute the UL bundle timer actions, generating the doorbell irq. */

 Consider link power management in the runtime phase. */

 link will go down, Test pending UL packets.*/

 Generate the doorbell irq. */

 Stop the TD update timer. */

 Stop the fast update timer. */

 Execute startup timer and wait for delayed start (e.g. NAND) */

 Update & check the current operation phase. */

 reduce period to 100 ms to check for mmio init state */

 Startup complete  - disable timer */

 Prepare the MMIO space */

 Get the CP execution stage */

 Callback to send the modem ready uevent */

/* This function is executed in a task context via an ipc_worker object,

 * as the creation or removal of device can't be done from tasklet.

 Complete all memory stores before setting bit */

 Complete all memory stores after setting bit */

 Get the internal phase. */

 Update the phase controlled by CP. */

 Excute the transition from flash/boot to runtime. */

			/* allow device to sleep, default value is

			 * IPC_HOST_SLEEP_ENTER_SLEEP

 check ipc_status change */

 Consider power management in the runtime phase. */

 Continue with skbuf processing. */

 Unexpected phases. */

 On CP the PSI phase is already active. */

		/* Before CP ROM driver starts the PSI image, it sets

		 * the exit_code field on the doorbell scratchpad and

		 * triggers the irq.

 process message ring */

 process all open pipes */

 Try to generate new ADB or ADGH. */

	/* Continue the send procedure with accumulated SIO or NETIF packets.

	 * Reset the debounce flags.

 if UL data is pending restart TD update timer */

	/* If CP has executed the transition

	 * from IPC_INIT to IPC_RUNNING in the PSI

	 * phase, wake up the flash app to open the pipes.

 Reset the expected CP state. */

 Callback by tasklet for handling interrupt events. */

 start doorbell irq delay timer if UL is pending */

 Check the execution stage and update the AP phase */

 Send this event only once */

		/* unknown exec stage:

		 * assume that link is down and send info to listeners

 Send msg to device to open pipe */

 Allocates the TDs for the given pipe along with firing HP update DB. */

	/* Trigger the doorbell irq to inform CP that new downlink buffers are

	 * available.

 Get the CP execution state and map it to the AP phase. */

 If the CP stage is undef, return the internal precalculated phase. */

 Free only the channel id in the CP power off mode. */

 Release only the channel id. */

 Allocate the downlink buffers in tasklet context. */

 Active channel. */

 Reset dynamic channel elements. */

 Find channel of given type/index */

	/* Force pipe to closed state also when not explicitly closed through

	 * ipc_imem_pipe_close()

 Empty the uplink skb accumulator. */

 Send IPC protocol uninit to the modem when Link is active. */

	/* When PCIe link is up set IPC_UNINIT

	 * of the modem otherwise ignore it when PCIe link down happens.

		/* set modem to UNINIT

		 * (in case we want to reload the AP driver without resetting

		 * the modem)

		/* Wait for maximum 30ms to allow the Modem to uninitialize the

		 * protocol.

 forward MDM_NOT_READY to listeners */

 cancel the workqueue */

/* After CP has unblocked the PCIe link, save the start address of the doorbell

 * scratchpad and prepare the shared memory region. If the flashing to RAM

 * procedure shall be executed, copy the chip information from the doorbell

 * scratchtpad to the application buffer and wake up the flash app.

 Initialize the semaphore for the blocking read UL/DL transfer. */

 clear internal flags */

 Either CP shall be in the power off or power on phase. */

 poll execution stage (for delayed start, e.g. NAND) */

 The initial IPC state is IPC_MEM_DEVICE_IPC_UNINIT. */

 Verify the exepected initial state. */

 Pass the dev ptr to the shared memory driver and request the entry points */

 Save the device address. */

 Reset the max number of configured channels */

 allocate IPC MMIO */

 Create tasklet for event handling*/

 The phase is set to power off. */

 Alloc and Register devlink */

 Debounce IPC_EV_IRQ. */

/* Verify the CP execution state, copy the chip info,

 * change the execution phase to ROM

 Test the CP execution state. */

 Allocate a new sk buf for the chip info. */

 Copy the chip info characters into the ipc_skb. */

 First change to the ROM boot phase. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020-2021 Intel Corporation.

/* This function will pack the data to be sent to the modem using the

 * payload, payload length and pack id

/* validate the response received from modem and

 * check the type of errors received

 Send data to the modem */

/**

 * ipc_flash_link_establish - Flash link establishment

 * @ipc_imem:           Pointer to struct iosm_imem

 *

 * Returns:     0 on success and failure value on error

 Allocate channel for flashing/cd collection */

 Receive data from the modem */

 Function to send command to modem and receive response */

/**

 * ipc_flash_boot_set_capabilities  - Set modem boot capabilities in flash

 * @ipc_devlink:        Pointer to devlink structure

 * @mdm_rsp:            Pointer to modem response buffer

 *

 * Returns:             0 on success and failure value on error

	/* Write back the EBL capability to modem

	 * Request Set Protcnf command

 Read the SWID type and SWID value from the EBL */

 Function to check if full erase or conditional erase was successful */

 Request Flash Erase Check */

 Full erase function which will erase the nand flash through EBL command */

 Logic for flashing all the Loadmaps available for individual fls file */

 0th position region address, 1st position size */

 Request Flash Set Address */

 Request Flash Write Raw Image */

/**

 * ipc_flash_send_fls  - Inject Modem subsystem fls file to device

 * @ipc_devlink:        Pointer to devlink structure

 * @fw:                 FW image

 * @mdm_rsp:            Pointer to modem response buffer

 *

 * Returns:             0 on success and failure value on error

 Request Sec Start */

 Download regions */

 Request Sec End */

/**

 * ipc_flash_boot_psi - Inject PSI image

 * @ipc_devlink:        Pointer to devlink structure

 * @fw:                 FW image

 *

 * Returns:             0 on success and failure value on error

/**

 * ipc_flash_boot_ebl  - Inject EBL image

 * @ipc_devlink:        Pointer to devlink structure

 * @fw:                 FW image

 *

 * Returns:             0 on success and failure value on error

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020-2021 Intel Corporation.

 Coredump list */

 Get the param values for the specific param ID's */

 Set the param values for the specific param ID's */

 Devlink param structure array */

 Get devlink flash component type */

/* Function triggered on devlink flash command

 * Flash update function which calls multiple functions based on

 * component type specified in the flash command

 Call back function for devlink ops */

/**

 * ipc_devlink_send_cmd - Send command to Modem

 * @ipc_devlink: Pointer to struct iosm_devlink

 * @cmd:         Command to be sent to modem

 * @entry:       Command entry number

 *

 * Returns:      0 on success and failure value on error

 Function to create snapshot */

 Send coredump end cmd indicating end of coredump collection */

 To create regions for coredump files */

 Delete previously created regions */

 To Destroy devlink regions */

/**

 * ipc_devlink_init - Initialize/register devlink to IOSM driver

 * @ipc_imem:   Pointer to struct iosm_imem

 *

 * Returns:     Pointer to iosm_devlink on success and NULL on failure

/**

 * ipc_devlink_deinit - To unintialize the devlink from IOSM driver.

 * @ipc_devlink:        Devlink instance

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020-21 Intel Corporation.

 At the begin of the runtime phase the IP MUX channel shall created. */

 Establish the MUX channel in blocking mode. */

 MUX channel is not available. */

 Define the MUX active state properties. */

 Reset the session/if id state. */

 Reset the session state. */

 Create and send the session open command. */

 open_session commands to one ACB and start transmission. */

	/* Finish and transfer ACB. The user thread is suspended.

	 * It is a blocking function call, until CP responds or timeout.

 Open the first IP session. */

 Search for a free session interface id. */

	/* Create and send the session open command.

	 * It is a blocking function call, until CP responds or timeout.

 Initialize the uplink skb accumulator. */

 Reset the flow ctrl stats of the session */

 Save and return the assigned if id. */

 Free pending session UL packet. */

 Reset the session/if id state. */

 Empty the uplink skb accumulator. */

 Copy the session interface id. */

	/* Create and send the session close command.

	 * It is a blocking function call, until CP responds or timeout.

 Reset the flow ctrl stats of the session */

 Free pending session UL packet. */

 Reset the MUX object. */

 CP has interrupted AP. If AP is in IP MUX mode, execute the pending ops. */

 Wait for the request to open a session */

 Establish the MUX channel and the new state. */

 Missing the MUX channel */

 Disable the TD update timer and open the first IP session. */

 Disable the TD update timer and open a session */

 Release an IP session. */

 Close the MUX channel pipes. */

 Invalid order. */

 Get the reference to the UL ADB list. */

 Initialize the list with free ADB. */

 Allocate the list of UL ADB. */

 Extend the UL ADB list. */

/* Informs the network stack to restart transmission for all opened session if

 * Flow Control is not ON for that session.

		/* If flow control of the session is OFF and if there was tx

		 * stop then restart. Inform the network interface to restart

		 * sending data.

/* Informs the network stack to stop sending further pkt for all opened

 * sessions

 Empty the ADB free list. */

 Remove from the head of the downlink queue. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020-21 Intel Corporation.

 open logical channel for control communication */

 close logical channel */

 transfer control data to modem */

 Port init func */

 Port deinit func */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020-21 Intel Corporation.

 Max. sizes of a downlink buffers */

 Max. transfer descriptors for a pipe. */

 Accumulation backoff usec */

 MUX acc backoff 1ms */

/* Modem channel configuration table

 * Always reserve element zero for flash channel.

 IP Mux */

 RPC - 0 */

 IAT0 */

 Trace */

 IAT1 */

 Loopback */

 MBIM Channel */

 Flash Channel/Coredump Channel */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020-2021 Intel Corporation.

/**

 * ipc_coredump_collect - To collect coredump

 * @devlink:            Pointer to devlink instance.

 * @data:               Pointer to snapshot

 * @entry:              ID of requested snapshot

 * @region_size:        Region size

 *

 * Returns: 0 on success, error on failure

/**

 * ipc_coredump_get_list - Get coredump list from modem

 * @devlink:         Pointer to devlink instance.

 * @cmd:             RPSI command to be sent

 *

 * Returns: 0 on success, error on failure

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020-21 Intel Corporation.

/* Definition of MMIO offsets

 * note that MMIO_CI offsets are relative to end of chip info structure

 MMIO chip info size in bytes */

 CP execution stage */

 Boot ROM Chip Info struct */

/* Timeout in 50 msec to wait for the modem boot code to write a valid

 * execution stage into mmio area

 check if exec stage has one of the valid values */

	/* Check for a valid execution stage to make sure that the boot code

	 * has correctly initialized the MMIO area.

 read chip info size and version from chip info structure */

	/* Increment of 2 is needed as the size value in the chip info

	 * excludes the version and size field, which are always present

	/* AP memory window (full window is open and active so that modem checks

	 * each AP address) 0 means don't check on modem side.

	/* store context_info address. This will be stored in the mmio area

	 * during IPC_MEM_DEVICE_IPC_INIT state via ipc_mmio_config()

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020-21 Intel Corporation.

 Timeout value in MS for the PM to wait for device to reach active state */

/* Note that here "active" has the value 1, as compared to the enums

 * ipc_mem_host_pm_state or ipc_mem_dev_pm_state, where "active" is 0

 Trigger the irq towards CP */

 Wake up the device if it is in low power mode. */

 Wake up the device. */

 link is not ready */

 Complete all memory stores before setting bit */

		/* Wait for IPC_PM_ACTIVE_TIMEOUT_MS for Device sleep state

		 * machine to enter ACTIVE state.

 Complete all memory stores after setting bit */

 Complete all memory stores before clearing bit */

	/* Reset the atomic variable in any case as device sleep

	 * state machine change is no longer of interest.

 Complete all memory stores after clearing bit */

	/* pending sleep ack and all conditions are cleared

	 * -> signal SLEEP__ACK to CP

 check the consume state !!! */

	/* Check for pending HPDA update.

	 * Pending HP update could be because of sending message was

	 * put on hold due to Device sleep state or due to TD update

	 * which could be because of Device Sleep and Host Sleep

	 * states.

 Save the current D3 state. */

 Calculate the power state only in the runtime phase. */

 CP irq */

 Device link state. */

 Host sleep trigger requires Link. */

 Something changed ? */

 Stay in the current PM state. */

 suspend not allowed if host_pm_state is not IPC_MEM_HOST_PM_ACTIVE */

 Sending Sleep Exit message to CP. Update the state */

 Evaluate the PM request. */

 Inform the PM that the device link can go down. */

 Inform the PM that the device link is active. */

	/* Create generic wait-for-completion handler for Host Sleep

	 * and device sleep coordination.

 Complete all memory stores before clearing bit */

 Complete all memory stores after clearing bit */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020-21 Intel Corporation.

	/* Select the first doorbell register, which is only currently needed

	 * by CP.

	/* Fire the doorbell irq by writing data on the doorbell write pointer

	 * register.

 Threaded Interrupt handler for MSI interrupts */

	/* Shift the MSI irq actions to the IPC tasklet. IRQ_NONE means the

	 * irq was not from the IPC device or could not be served.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020-21 Intel Corporation.

	/* Store reference towards caller specified response in response ring

	 * and signal CP

 Callback for message send */

/* Remove reference to a response. This is typically used when a requestor timed

 * out and is no longer interested in the response.

 Trap if called from non-preemptible context */

	/* Allocate and prepare message to be sent in tasklet context.

	 * A positive index returned form tasklet_call references the message

	 * in case it needs to be cancelled when there is a timeout.

 Wait for the device to respond to the message */

		/* Timeout, there was no response from the device.

		 * Remove the reference to the local response completion

		 * object as we are no longer interested in the response.

 We got a response in time; check completion status: */

 Stop further processing. */

	/* Get a copy of the requested PM state by the device and the local

	 * device PM state.

 Wakeup from device sleep if it is not ACTIVE */

 Send the sleep message for sync sys calls. */

 Sending ENTER_SLEEP message failed, we are still active */

 Prepare the context info for CP. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020-21 Intel Corporation.

 Test the link power state and send a MUX command in blocking mode. */

	/* if blocking, suspend the app and wait for irq in the flash or

	 * crash phase. return false on timeout to indicate failure.

 Prepare mux Command */

 Allocate skb memory for the uplink buffer. */

 Save the skb address. */

 Inform the network interface to start/stop flow ctrl */

 Resume the control application. */

		/* This command type is not expected as response for

		 * Aggregation version of the protocol. So return non-zero.

 No session interface id. */

 Backward Compatibility */

			/* if CP asks for FLOW CTRL Enable

			 * then set our internal flow control Tx flag

			 * to limit uplink session queueing

 Update the stats */

			/* Just reset the Flow control mask and let

			 * mux_flow_ctrl_low_thre_b take control on

			 * our internal Tx flag and enabling kernel

			 * flow control

 Backward Compatibility */

 Update the stats */

 Decode and Send appropriate response to a command block. */

		/* Unable to decode command response indicates the cmd_type

		 * may be a command instead of response. So try to decoding it.

			/* Decoded command may need a response. Give the

			 * response according to the command type.

 response field is u32 */

 Pass the DL packet to the netif layer. */

 Pass the packet to the netif layer. */

 Decode Flow Credit Table in the block */

 Is the session active ? */

 Update the Flow Credit information from ADB */

 Check whether the TX can be started */

 Decode non-aggregated datagram */

 Is the session active ? */

	/* Store the pad len for the corresponding session

	 * Pad bytes as negotiated in the open session less the header size

	 * (see session management chapter for details).

	 * If resulting padding is zero or less, the additional head padding is

	 * omitted. For e.g., if HEAD_PAD_LEN = 16 or less, this field is

	 * omitted if HEAD_PAD_LEN = 20, then this field will have 4 bytes

	 * set to zero

 Pass the packet to the netif layer */

 Decode the MUX header type. */

 Take the first element of the free list. */

 Wait for a free ADB skb. */

 Mark it as UL ADB to select the right free operation. */

 Save the ADB memory settings. */

 reset statistic counter */

 Allocates an ADB from the free list and initializes it with ADBH  */

		/* Allocate memory for the ADB including of the

		 * datagram table header.

 Is a pending ADB available ? */

 None. */

 Update size need to zero only for new ADB memory */

/* Informs the network stack to stop sending further packets for all opened

 * sessions

 Sends Queue Level Table of all opened sessions */

 Prepare QLT */

 Add QLT to the transfer list. */

 Updates the TDs with ul_list */

/* Checks the available credits for the specified session and returns

 * number of packets for which credits are available.

 nr_of_bytes */

	/* Check if there are enough credits/bytes available to send the

	 * requested max_nr_of_pkts. Otherwise restrict the nr_of_pkts

	 * depending on available credits.

 Encode the UL IP packet according to Lite spec. */

	/* Re-calculate the number of packets depending on number of bytes to be

	 * processed/available credits.

	/* If calculated nr_of_pkts from available credits is <= 0

	 * then nothing to do.

 Read configured UL head_pad_length for session.*/

	/* Process all pending UL packets for this session

	 * depending on the allocated datagram table size.

 get destination skb allocated */

 Peek at the head of the list. */

 Calculate the memory value. */

			/* Return 1 if any IP packet is added to the transfer

			 * list.

 Add buffer (without head padding to next pending transfer) */

			/* Decrement the credit value as we are processing the

			 * datagram from the UL list.

 Remove the processed elements and free it. */

		/* Send QLT info to modem if pending bytes > high watermark

		 * in case of mux lite

 Updates the TDs with ul_list */

 Go to next handle rr_next_session overflow */

 Is something pending in UL and flow ctrl off */

			/* Nothing to do for ipc_mux session

			 * -> try next session id.

 Reset the skb settings. */

 Add the consumed ADB to the free list. */

 Start the NETIF uplink send transfer in MUX mode. */

 Add session UL data to a ADB and ADGH */

 Delay the doorbell irq */

 reset the debounce flag */

	/* Session is under flow control.

	 * Check if packet can be queued in session list, if not

	 * suspend net tx

 Add skb to the uplink skb accumulator. */

 Inform the IPC kthread to pass uplink IP packets to CP. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020-21 Intel Corporation.

 Open a packet data online channel between the network layer and CP. */

 The network interface is only supported in the runtime phase. */

 Release a net link to CP. */

 Tasklet call to do uplink transfer. */

 Through tasklet to do sio write. */

 Function for transfer UL data */

 Is CP Running? */

 Route the UL packet through IP MUX Layer */

 Initialize wwan channel */

 If modem version is invalid (0xffffffff), do not initialize WWAN. */

 WWAN registration. */

 Map SKB to DMA for transfer */

 return true if channel is ready for use */

 Update the current operation phase. */

 Select the operation depending on the execution stage. */

		/* Prepare the PSI image for the CP ROM driver and

		 * suspend the flash app.

 Ignore uplink actions in all other phases. */

 Check the full availability of the channel. */

 Release a sio link to CP. */

	/* If current phase is IPC_P_OFF or SIO ID is -ve then

	 * channel is already freed. Nothing to do.

	/* If there are any pending TDs then wait for Timeout/Completion before

	 * closing pipe.

		/* Suspend the user app and wait a certain time for processing

		 * UL Data.

	/* If there are any pending TDs then wait for Timeout/Completion before

	 * closing pipe.

		/* Suspend the user app and wait a certain time for processing

		 * DL Data.

	/* Due to wait for completion in messages, there is a small window

	 * between closing the pipe and updating the channel is closed. In this

	 * small window there could be HP update from Host Driver. Hence update

	 * the channel state as CLOSING to aviod unnecessary interrupt

	 * towards CP.

 Open a PORT link to CP and return the channel */

 The PORT interface is only supported in the runtime phase. */

 transfer skb to modem */

 Add skb to the uplink skbuf accumulator. */

 Open a SIO link to CP and return the channel instance */

 Get a channel id as flash id and reserve it. */

 Enqueue chip info data to be read */

 CP is in the wrong state (e.g. CRASH or CD_READY) */

 Release a SIO channel link to CP. */

 Increase the total wait time to boot_check_timeout */

	/* If there are any pending TDs then wait for Timeout/Completion before

	 * closing pipe.

	/* Due to wait for completion in messages, there is a small window

	 * between closing the pipe and updating the channel is closed. In this

	 * small window there could be HP update from Host Driver. Hence update

	 * the channel state as CLOSING to aviod unnecessary interrupt

	 * towards CP.

 Release the pipe resources */

 PSI transfer */

	/* Save the PSI information for the CP ROM driver on the doorbell

	 * scratchpad.

 If the PSI download fails, return the CP boot ROM exit code */

	/* Wait psi_start_timeout milliseconds until the CP PSI image is

	 * running and updates the execution_stage field with

	 * IPC_MEM_EXEC_STAGE_PSI. Verify the execution stage.

 Unknown status of CP PSI process. */

 Enter the PSI phase. */

	/* Request the RUNNING state from CP and wait until it was reached

	 * or timeout.

 Create the flash channel for the transfer of the images. */

	/* In the ROM phase the PSI image is passed to CP about a specific

	 *  shared memory area and doorbell scratchpad directly.

		/* If the PSI transfer fails then send crash

		 * Signature.

 Allocate skb memory for the uplink buffer. */

 Add skb to the uplink skbuf accumulator. */

 Inform the IPC tasklet to pass uplink IP packets to CP. */

 check skb is available in rx_list or wait for skb */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020-21 Intel Corporation.

 Get the next free message element.*/

	/* Get the pointer to the next free message element,

	 * reset the fields and mark is as invalid.

 return index in message ring */

 Updates the message ring Head pointer */

 Update head pointer and fire doorbell. */

/* Allocate and prepare a OPEN_PIPE message.

 * This also allocates the memory for the new TDR structure and

 * updates the pipe structure referenced in the preparation arguments.

	/* Allocate the skbuf elements for the skbuf which are on the way.

	 * SKB ring is internal memory allocation for driver. No need to

	 * re-calculate the start and end addresses.

 Allocate the transfer descriptors for the pipe. */

 Prepare and send the host sleep message to CP to enter or exit D3. */

 0=host, 1=device */

 state; 0=enter, 1=exit 2=enter w/o protocol */

 Processes the message consumed by CP. */

 Update response with status and wake up waiting requestor */

/* Sends data from UL list to CP for the provided pipe by updating the Head

 * pointer of given pipe.

	/* Get head and tail of the td list and calculate

	 * the number of free elements.

 Get the td address. */

		/* Take the first element of the uplink list and add it

		 * to the td list.

 Save the reference to the uplink skbuf. */

 Calculate the new head and save it. */

 Trigger doorbell because of pending UL packets. */

 Checks for Tail pointer update from CP and returns the data as SKB. */

/* Allocates an SKB for CP to send data and updates the Head Pointer

 * of the given Pipe#.

	/* Get head and tail of the td list and calculate

	 * the number of free elements.

 Get the td address. */

 Allocate the skbuf for the descriptor. */

 store the new head value. */

 Save the reference to the skbuf. */

 Processes DL TD's */

 Copy the reference to the downlink buffer. */

 Reset the ring elements. */

 Discard aborted buffers. */

 Set the length field in skbuf. */

 Frees the TDs given to CP.  */

 Get the start and the end of the buffer list. */

 Reset tail and head to 0. */

 Free pending uplink and downlink buffers. */

			/* Get the reference to the skbuf,

			 * which is on the way and free it.

 Free and reset the td and skbuf circular buffers. kfree is save! */

 Unsupported messages in protocol */

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2019-2021 Linaro Ltd. */

* enum ipa_resource_type - IPA resource types for an SoC having IPA v4.2 */

 Source resource types; first must have value 0 */

 Destination resource types; first must have value 0 */

 Resource groups used for an SoC having IPA v4.2 */

 Source resource group identifiers */

 Last in set; not a source group */

 Destination resource group identifiers */

 Last; not a destination group */

 QSB configuration data for an SoC having IPA v4.2 */

 no outstanding read byte (beat) limit */

 Endpoint configuration data for an SoC having IPA v4.2 */

 Source resource configuration data for an SoC having IPA v4.2 */

 Destination resource configuration data for an SoC having IPA v4.2 */

 Resource configuration data for an SoC having IPA v4.2 */

 IPA-resident memory region data for an SoC having IPA v4.2 */

 Memory configuration data for an SoC having IPA v4.2 */

 Interconnect rates are in 1000 byte/second units */

 465 MBps */

 80 MBps */

 Average bandwidth is unused for the next two interconnects */

 68.570 MBps */

 unused */

 30 MBps */

 unused */

 Clock and interconnect configuration data for an SoC having IPA v4.2 */

 Hz */

 Configuration data for an SoC having IPA v4.2 */

 backward_compat value is 0 */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2012-2018, The Linux Foundation. All rights reserved.

 * Copyright (C) 2018-2020 Linaro Ltd.

/**

 * DOC:  The IPA embedded microcontroller

 *

 * The IPA incorporates a microcontroller that is able to do some additional

 * handling/offloading of network activity.  The current code makes

 * essentially no use of the microcontroller, but it still requires some

 * initialization.  It needs to be notified in the event the AP crashes.

 *

 * The microcontroller can generate two interrupts to the AP.  One interrupt

 * is used to indicate that a response to a request from the AP is available.

 * The other is used to notify the AP of the occurrence of an event.  In

 * addition, the AP can interrupt the microcontroller by writing a register.

 *

 * A 128 byte block of structured memory within the IPA SRAM is used together

 * with these interrupts to implement the communication interface between the

 * AP and the IPA microcontroller.  Each side writes data to the shared area

 * before interrupting its peer, which will read the written data in response

 * to the interrupt.  Some information found in the shared area is currently

 * unused.  All remaining space in the shared area is reserved, and must not

 * be read or written by the AP.

 Supports hardware interface version 0x2000 */

 Delay to allow a the microcontroller to save state when crashing */

 microseconds */

/**

 * struct ipa_uc_mem_area - AP/microcontroller shared memory area

 * @command:		command code (AP->microcontroller)

 * @reserved0:		reserved bytes; avoid reading or writing

 * @command_param:	low 32 bits of command parameter (AP->microcontroller)

 * @command_param_hi:	high 32 bits of command parameter (AP->microcontroller)

 *

 * @response:		response code (microcontroller->AP)

 * @reserved1:		reserved bytes; avoid reading or writing

 * @response_param:	response parameter (microcontroller->AP)

 *

 * @event:		event code (microcontroller->AP)

 * @reserved2:		reserved bytes; avoid reading or writing

 * @event_param:	event parameter (microcontroller->AP)

 *

 * @first_error_address: address of first error-source on SNOC

 * @hw_state:		state of hardware (including error type information)

 * @warning_counter:	counter of non-fatal hardware errors

 * @reserved3:		reserved bytes; avoid reading or writing

 * @interface_version:	hardware-reported interface version

 * @reserved4:		reserved bytes; avoid reading or writing

 *

 * A shared memory area at the base of IPA resident memory is used for

 * communication with the microcontroller.  The region is 128 bytes in

 * size, but only the first 40 bytes (structured this way) are used.

 enum ipa_uc_command */

 enum ipa_uc_response */

 enum ipa_uc_event */

* enum ipa_uc_command - commands from the AP to the microcontroller */

* enum ipa_uc_response - microcontroller response codes */

* enum ipa_uc_event - common cpu events reported by the microcontroller */

 Microcontroller event IPA interrupt handler */

 The LOG_INFO event can be safely ignored */

 Microcontroller response IPA interrupt handler */

	/* An INIT_COMPLETED response message is sent to the AP by the

	 * microcontroller when it is operational.  Other than this, the AP

	 * should only receive responses from the microcontroller when it has

	 * sent it a request message.

	 *

	 * We can drop the power reference taken in ipa_uc_power() once we

	 * know the microcontroller has finished its initialization.

 Configure the IPA microcontroller subsystem */

 Inverse of ipa_uc_config() */

 Take a proxy power reference for the microcontroller */

 Only do this on first boot */

 This power reference dropped in ipa_uc_response_hdlr() above */

 Send a command to the microcontroller */

 Fill in the command data */

 Use an interrupt to tell the microcontroller the command is ready */

 Tell the microcontroller the AP is shutting down */

 give uc enough time to save state */

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2021 Linaro Ltd. */

 Won't happen (checked at probe time) */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2012-2018, The Linux Foundation. All rights reserved.

 * Copyright (C) 2018-2021 Linaro Ltd.

/**

 * DOC: IPA Resources

 *

 * The IPA manages a set of resources internally for various purposes.

 * A given IPA version has a fixed number of resource types, and a fixed

 * total number of resources of each type.  "Source" resource types

 * are separate from "destination" resource types.

 *

 * Each version of IPA also has some number of resource groups.  Each

 * endpoint is assigned to a resource group, and all endpoints in the

 * same group share pools of each type of resource.  A subset of the

 * total resources of each type is assigned for use by each group.

 We program at most 8 source or destination resource group limits */

	/* Return an error if a non-zero resource limit is specified

	 * for a resource group not supported by hardware.

 Configure resources; there is no ipa_resource_deconfig() */

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2021 Linaro Ltd. */

* enum ipa_resource_type - IPA resource types for an SoC having IPA v4.5 */

 Source resource types; first must have value 0 */

 Destination resource types; first must have value 0 */

 Resource groups used for an SoC having IPA v4.5 */

 Source resource group identifiers */

 Last in set; not a source group */

 Destination resource group identifiers */

 Last; not a destination group */

 QSB configuration data for an SoC having IPA v4.5 */

 no limit (hardware max) */

 no outstanding read byte (beat) limit */

 Endpoint configuration data for an SoC having IPA v4.5 */

 Source resource configuration data for an SoC having IPA v4.5 */

 Destination resource configuration data for an SoC having IPA v4.5 */

 Resource configuration data for an SoC having IPA v4.5 */

 IPA-resident memory region data for an SoC having IPA v4.5 */

 Memory configuration data for an SoC having IPA v4.5 */

 Interconnect rates are in 1000 byte/second units */

 600 MBps */

 150 MBps */

 1.804 GBps */

 150 MBps */

 Average rate is unused for the next two interconnects */

 450 MBps */

 75 MBps (unused?) */

 171.4 MBps */

 unused */

 Clock and interconnect configuration data for an SoC having IPA v4.5 */

 Hz (150?  60?) */

 Configuration data for an SoC having IPA v4.5 */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2012-2018, The Linux Foundation. All rights reserved.

 * Copyright (C) 2018-2021 Linaro Ltd.

/**

 * DOC: IPA Power Management

 *

 * The IPA hardware is enabled when the IPA core clock and all the

 * interconnects (buses) it depends on are enabled.  Runtime power

 * management is used to determine whether the core clock and

 * interconnects are enabled, and if not in use to be suspended

 * automatically.

 *

 * The core clock currently runs at a fixed clock rate when enabled,

 * an all interconnects use a fixed average and peak bandwidth.

 milliseconds */

/**

 * struct ipa_interconnect - IPA interconnect information

 * @path:		Interconnect path

 * @average_bandwidth:	Average interconnect bandwidth (KB/second)

 * @peak_bandwidth:	Peak interconnect bandwidth (KB/second)

/**

 * enum ipa_power_flag - IPA power flags

 * @IPA_POWER_FLAG_RESUMED:	Whether resume from suspend has been signaled

 * @IPA_POWER_FLAG_SYSTEM:	Hardware is system (not runtime) suspended

 * @IPA_POWER_FLAG_STOPPED:	Modem TX is disabled by ipa_start_xmit()

 * @IPA_POWER_FLAG_STARTED:	Modem TX was enabled by ipa_runtime_resume()

 * @IPA_POWER_FLAG_COUNT:	Number of defined power flags

 Last; not a flag */

/**

 * struct ipa_power - IPA power management information

 * @dev:		IPA device pointer

 * @core:		IPA core clock

 * @spinlock:		Protects modem TX queue enable/disable

 * @flags:		Boolean state flags

 * @interconnect_count:	Number of elements in interconnect[]

 * @interconnect:	Interconnect array

 used with STOPPED/STARTED power flags */

 Initialize interconnects required for IPA operation */

 Inverse of ipa_interconnect_init() */

 Currently we only use one bandwidth level, so just "enable" interconnects */

 To disable an interconnect, we just its bandwidth to 0 */

 Try to disable all; record only the first error */

 Enable IPA power, enabling interconnects and the core clock */

 Inverse of ipa_power_enable() */

 Endpoints aren't usable until setup is complete */

 Endpoints aren't usable until setup is complete */

 Return the current IPA core clock rate */

/**

 * ipa_suspend_handler() - Handle the suspend IPA interrupt

 * @ipa:	IPA pointer

 * @irq_id:	IPA interrupt type (unused)

 *

 * If an RX endpoint is suspended, and the IPA has a packet destined for

 * that endpoint, the IPA generates a SUSPEND interrupt to inform the AP

 * that it should resume the endpoint.  If we get one of these interrupts

 * we just wake up the system.

	/* To handle an IPA interrupt we will have resumed the hardware

	 * just to handle the interrupt, so we're done.  If we are in a

	 * system suspend, trigger a system resume.

 Acknowledge/clear the suspend interrupt on all endpoints */

/* The next few functions coordinate stopping and starting the modem

 * network device transmit queue.

 *

 * Transmit can be running concurrent with power resume, and there's a

 * chance the resume completes before the transmit path stops the queue,

 * leaving the queue in a stopped state.  The next two functions are used

 * to avoid this: ipa_power_modem_queue_stop() is used by ipa_start_xmit()

 * to conditionally stop the TX queue; and ipa_power_modem_queue_start()

 * is used by ipa_runtime_resume() to conditionally restart it.

 *

 * Two flags and a spinlock are used.  If the queue is stopped, the STOPPED

 * power flag is set.  And if the queue is started, the STARTED flag is set.

 * The queue is only started on resume if the STOPPED flag is set.  And the

 * queue is only started in ipa_start_xmit() if the STARTED flag is *not*

 * set.  As a result, the queue remains operational if the two activites

 * happen concurrently regardless of the order they complete.  The spinlock

 * ensures the flag and TX queue operations are done atomically.

 *

 * The first function stops the modem netdev transmit queue, but only if

 * the STARTED flag is *not* set.  That flag is cleared if it was set.

 * If the queue is stopped, the STOPPED flag is set.  This is called only

 * from the power ->runtime_resume operation.

/* This function starts the modem netdev transmit queue, but only if the

 * STOPPED flag is set.  That flag is cleared if it was set.  If the queue

 * was restarted, the STARTED flag is set; this allows ipa_start_xmit()

 * to skip stopping the queue in the event of a race.

 This function clears the STARTED flag once the TX queue is operating */

 Initialize IPA power management */

 Inverse of ipa_power_init() */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2012-2018, The Linux Foundation. All rights reserved.

 * Copyright (C) 2019-2020 Linaro Ltd.

/**

 * DOC: IPA SMP2P communication with the modem

 *

 * SMP2P is a primitive communication mechanism available between the AP and

 * the modem.  The IPA driver uses this for two purposes:  to enable the modem

 * to state that the GSI hardware is ready to use; and to communicate the

 * state of IPA power in the event of a crash.

 *

 * GSI needs to have early initialization completed before it can be used.

 * This initialization is done either by Trust Zone or by the modem.  In the

 * latter case, the modem uses an SMP2P interrupt to tell the AP IPA driver

 * when the GSI is ready to use.

 *

 * The modem is also able to inquire about the current state of IPA

 * power by trigging another SMP2P interrupt to the AP.  We communicate

 * whether power is enabled using two SMP2P state bits--one to indicate

 * the power state (on or off), and a second to indicate the power state

 * bit is valid.  The modem will poll the valid bit until it is set, and

 * at that time records whether the AP has IPA power enabled.

 *

 * Finally, if the AP kernel panics, we update the SMP2P state bits even if

 * we never receive an interrupt from the modem requesting this.

/**

 * struct ipa_smp2p - IPA SMP2P information

 * @ipa:		IPA pointer

 * @valid_state:	SMEM state indicating enabled state is valid

 * @enabled_state:	SMEM state to indicate power is enabled

 * @valid_bit:		Valid bit in 32-bit SMEM state mask

 * @enabled_bit:	Enabled bit in 32-bit SMEM state mask

 * @enabled_bit:	Enabled bit in 32-bit SMEM state mask

 * @clock_query_irq:	IPA interrupt triggered by modem for power query

 * @setup_ready_irq:	IPA interrupt triggered by modem to signal GSI ready

 * @power_on:		Whether IPA power is on

 * @notified:		Whether modem has been notified of power state

 * @disabled:		Whether setup ready interrupt handling is disabled

 * @mutex:		Mutex protecting ready-interrupt/shutdown interlock

 * @panic_notifier:	Panic notifier structure

/**

 * ipa_smp2p_notify() - use SMP2P to tell modem about IPA power state

 * @smp2p:	SMP2P information

 *

 * This is called either when the modem has requested it (by triggering

 * the modem power query IPA interrupt) or whenever the AP is shutting down

 * (via a panic notifier).  It sets the two SMP2P state bits--one saying

 * whether the IPA power is on, and the other indicating the first bit

 * is valid.

 Signal whether the IPA power is enabled */

 Now indicate that the enabled flag is valid */

 Threaded IRQ handler for modem "ipa-clock-query" SMP2P interrupt */

 IPA panic handler needs to run before modem shuts down */

 Do it early */

 Threaded IRQ handler for modem "ipa-setup-ready" SMP2P interrupt */

 If any others arrive, ignore them */

 Power needs to be active for setup */

 An error here won't cause driver shutdown, so warn if one occurs */

 Initialize SMP2P interrupts */

 Drop the power reference if it was taken in ipa_smp2p_notify() */

 Initialize the IPA SMP2P subsystem */

 BITS_PER_U32 */

 BITS_PER_U32 */

	/* These fields are needed by the power query interrupt

	 * handler, so initialize them now.

 We have enough information saved to handle notifications */

 Result will be non-zero (negative for error) */

 We won't get notified any more; drop power reference (if any) */

 Reset state tracking whether we have notified the modem */

 Reset the power enabled valid flag */

 Mark the power disabled for good measure... */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2012-2018, The Linux Foundation. All rights reserved.

 * Copyright (C) 2019-2021 Linaro Ltd.

/**

 * DOC:  IPA Immediate Commands

 *

 * The AP command TX endpoint is used to issue immediate commands to the IPA.

 * An immediate command is generally used to request the IPA do something

 * other than data transfer to another endpoint.

 *

 * Immediate commands are represented by GSI transactions just like other

 * transfer requests, represented by a single GSI TRE.  Each immediate

 * command has a well-defined format, having a payload of a known length.

 * This allows the transfer element's length field to be used to hold an

 * immediate command's opcode.  The payload for a command resides in DRAM

 * and is described by a single scatterlist entry in its transaction.

 * Commands do not require a transaction completion callback.  To commit

 * an immediate command transaction, either gsi_trans_commit_wait() or

 * gsi_trans_commit_wait_timeout() is used.

 Some commands can wait until indicated pipeline stages are clear */

 IPA_CMD_IP_V{4,6}_{FILTER,ROUTING}_INIT */

 Field masks for ipa_cmd_hw_ip_fltrt_init structure fields */

 IPA_CMD_HDR_INIT_LOCAL */

 Field masks for ipa_cmd_hw_hdr_init_local structure fields */

 IPA_CMD_REGISTER_WRITE */

 For IPA v4.0+, the pipeline clear options are encoded in the opcode */

 Unused/reserved prior to IPA v4.0 */

 Unused/reserved for IPA v4.0+ */

 Field masks for ipa_cmd_register_write structure fields */

 The next field is present for IPA v4.0+ */

 The next field is not present for IPA v4.0+ */

 The next field and its values are not present for IPA v4.0+ */

 IPA_CMD_IP_PACKET_INIT */

 Field masks for ipa_cmd_ip_packet_init dest_endpoint field */

 IPA_CMD_DMA_SHARED_MEM */

 For IPA v4.0+, this opcode gets modified with pipeline clear options */

 0 or DMA_SHARED_MEM_CLEAR_AFTER_READ */

 Flag allowing atomic clear of target region after reading data (v4.0+)*/

 Field masks for ipa_cmd_hw_dma_mem_mem structure fields */

 The next two fields are not present for IPA v4.0+ */

 IPA_CMD_IP_PACKET_TAG_STATUS */

 Immediate command payload */

	/* The sizes of a filter and route tables need to fit into fields

	 * in the ipa_cmd_hw_ip_fltrt_init structure.  Although hashed tables

	 * might not be used, non-hashed and hashed tables have the same

	 * maximum size.  IPv4 and IPv6 filter tables have the same number

	 * of entries, as and IPv4 and IPv6 route tables have the same number

	 * of entries.

 Hashed and non-hashed fields are assumed to be the same size */

 Valid endpoint numbers must fit in the IP packet init command */

 Validate a memory region holding a table */

 Size must fit in the immediate command field that holds it */

 Offset must fit in the immediate command field that holds it */

 Entire memory range must fit within IPA-local memory */

 Validate the memory region that holds headers */

	/* In ipa_cmd_hdr_init_local_add() we record the offset and size of

	 * the header table memory area in an immediate command.  Make sure

	 * the offset and size fit in the fields that need to hold them, and

	 * that the entire range is within the overall IPA memory range.

	/* The header memory area contains both the modem and AP header

	 * regions.  The modem portion defines the address of the region.

 Make sure the offset fits in the IPA command */

 Add the size of the AP portion (if defined) to the combined size */

 Make sure the combined size fits in the IPA command */

 Make sure the entire combined area fits in IPA memory */

 Indicate whether an offset can be used with a register_write command */

	/* The maximum offset in a register_write immediate command depends

	 * on the version of IPA.  A 16 bit offset is always supported,

	 * but starting with IPA v4.0 some additional high-order bits are

	 * allowed.

	/* Make sure the offset can be represented by the field(s)

	 * that holds it.  Also make sure the offset is not outside

	 * the overall IPA memory range.

 Check whether offsets passed to register_write are valid */

	/* If hashed tables are supported, ensure the hash flush register

	 * offset will fit in a register write IPA immediate command.

	/* Each endpoint can have a status endpoint associated with it,

	 * and this is recorded in an endpoint register.  If the modem

	 * crashes, we reset the status endpoint for all modem endpoints

	 * using a register write IPA immediate command.  Make sure the

	 * worst case (highest endpoint number) offset of that endpoint

	 * fits in the register write command field(s) that must hold it.

 This is as good a place as any to validate build constants */

	/* Even though command payloads are allocated one at a time,

	 * a single transaction can require up to tlv_count of them,

	 * so we treat them as if that many can be allocated at once.

 Each TRE needs a command info structure */

 If hash_size is 0, hash_offset and hash_addr ignored. */

 Record the non-hash table offset and size */

 The hash table offset and address are zero if its size is 0 */

 Record the hash table offset and size */

 Fill in all offsets and sizes and the non-hash table address */

 Initialize header space in IPA-local memory */

	/* With this command we tell the IPA where in its local memory the

	 * header tables reside.  The content of the buffer provided is

	 * also written via DMA into that space.  The IPA hardware owns

	 * the table, but the AP must initialize it.

 pipeline_clear_src_grp is not used */

	/* IPA v4.0+ represents the pipeline clear options in the opcode.  It

	 * also supports a larger offset by encoding additional high-order

	 * bits in the payload flags field.

 Opcode encodes pipeline clear options */

 SKIP_CLEAR is always 0 (don't skip pipeline clear) */

 Extract the high 4 bits from the offset */

 Extract the top 4 bits and encode it into the flags field */

 reserved */

 SKIP_CLEAR flag is always 0 */

 Skip IP packet processing on the next data transfer on a TX channel */

 Use a DMA command to read or write a block of IPA-resident memory */

 size and offset must fit in 16 bit fields */

	/* payload->clear_after_read was reserved prior to IPA v4.0.  It's

	 * never needed for current code, so it's 0 regardless of version.

	/* payload->flags:

	 *   direction:		0 = write to IPA, 1 read from IPA

	 * Starting at v4.0 these are reserved; either way, all zero:

	 *   pipeline clear:	0 = wait for pipeline clear (don't skip)

	 *   clear_options:	0 = pipeline_clear_hps

	 * Instead, for v4.0+ these are encoded in the opcode.  But again

	 * since both values are 0 we won't bother OR'ing them in.

 Issue a small command TX data transfer */

 Just transfer a zero-filled payload structure */

 Add immediate commands to a transaction to clear the hardware pipeline */

 This will complete when the transfer is received */

 Issue a no-op register write command (mask 0 means no write) */

	/* Send a data packet through the IPA pipeline.  The packet_init

	 * command says to send the next packet directly to the exception

	 * endpoint without any other IPA processing.  The tag_status

	 * command requests that status be generated on completion of

	 * that transfer, and that it will be tagged with a value.

	 * Finally, the transfer command sends a small packet of data

	 * (instead of a command) using the command endpoint.

 Returns the number of commands required to clear the pipeline */

 Allocate a transaction for the command TX endpoint */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2013-2018, The Linux Foundation. All rights reserved.

 * Copyright (C) 2018-2020 Linaro Ltd.

/**

 * DOC: AP/Modem QMI Handshake

 *

 * The AP and modem perform a "handshake" at initialization time to ensure

 * both sides know when everything is ready to begin operating.  The AP

 * driver (this code) uses two QMI handles (endpoints) for this; a client

 * using a service on the modem, and server to service modem requests (and

 * to supply an indication message from the AP).  Once the handshake is

 * complete, the AP and modem may begin IPA operation.  This occurs

 * only when the AP IPA driver, modem IPA driver, and IPA microcontroller

 * are ready.

 *

 * The QMI service on the modem expects to receive an INIT_DRIVER request from

 * the AP, which contains parameters used by the modem during initialization.

 * The AP sends this request as soon as it is knows the modem side service

 * is available.  The modem responds to this request, and if this response

 * contains a success result, the AP knows the modem IPA driver is ready.

 *

 * The modem is responsible for loading firmware on the IPA microcontroller.

 * This occurs only during the initial modem boot.  The modem sends a

 * separate DRIVER_INIT_COMPLETE request to the AP to report that the

 * microcontroller is ready.  The AP may assume the microcontroller is

 * ready and remain so (even if the modem reboots) once it has received

 * and responded to this request.

 *

 * There is one final exchange involved in the handshake.  It is required

 * on the initial modem boot, but optional (but in practice does occur) on

 * subsequent boots.  The modem expects to receive a final INIT_COMPLETE

 * indication message from the AP when it is about to begin its normal

 * operation.  The AP will only send this message after it has received

 * and responded to an INDICATION_REGISTER request from the modem.

 *

 * So in summary:

 * - Whenever the AP learns the modem has booted and its IPA QMI service

 *   is available, it sends an INIT_DRIVER request to the modem.  The

 *   modem supplies a success response when it is ready to operate.

 * - On the initial boot, the modem sets up the IPA microcontroller, and

 *   sends a DRIVER_INIT_COMPLETE request to the AP when this is done.

 * - When the modem is ready to receive an INIT_COMPLETE indication from

 *   the AP, it sends an INDICATION_REGISTER request to the AP.

 * - On the initial modem boot, everything is ready when:

 *	- AP has received a success response from its INIT_DRIVER request

 *	- AP has responded to a DRIVER_INIT_COMPLETE request

 *	- AP has responded to an INDICATION_REGISTER request from the modem

 *	- AP has sent an INIT_COMPLETE indication to the modem

 * - On subsequent modem boots, everything is ready when:

 *	- AP has received a success response from its INIT_DRIVER request

 *	- AP has responded to a DRIVER_INIT_COMPLETE request

 * - The INDICATION_REGISTER request and INIT_COMPLETE indication are

 *   optional for non-initial modem boots, and have no bearing on the

 *   determination of when things are "ready"

 A minute in milliseconds */

 Send an INIT_COMPLETE indication message to the modem */

 If requested (and not already sent) send the INIT_COMPLETE indication */

/* Determine whether everything is ready to start normal operation.

 * We know everything (else) is ready when we know the IPA driver on

 * the modem is ready, and the microcontroller is ready.

 *

 * When the modem boots (or reboots), the handshake sequence starts

 * with the AP sending the modem an INIT_DRIVER request.  Within

 * that request, the uc_loaded flag will be zero (false) for an

 * initial boot, non-zero (true) for a subsequent (SSR) boot.

 We aren't ready until the modem and microcontroller are */

 Send the indication message if it was requested */

 The initial boot requires us to send the indication. */

 The initial modem boot completed successfully */

 We're ready.  Start up normal operation */

 All QMI clients from the modem node are gone (modem shut down or crashed). */

 The modem client and server go away at the same time */

 initial_boot doesn't change when modem reboots */

 uc_ready doesn't change when modem reboots */

/* Callback function to handle an INDICATION_REGISTER request message from the

 * modem.  This informs the AP that the modem is now ready to receive the

 * INIT_COMPLETE indication message.

 We might be ready now */

 Respond to a DRIVER_INIT_COMPLETE request message from the modem. */

 We might be ready now */

 The server handles two request message types sent by the modem. */

 Handle an INIT_DRIVER response message from the modem. */

 IPA_QMI_INIT_DRIVER request was successful */

 The client handles one response message type sent by the modem. */

/* Return a pointer to an init modem driver request structure, which contains

 * configuration parameters for the modem.  The modem may be started multiple

 * times, but generally these parameters don't change so we can reuse the

 * request structure once it's initialized.  The only exception is the

 * skip_uc_load field, which will be set only after the microcontroller has

 * reported it has completed its initialization.

 The microcontroller is initialized on the first boot */

 We only have to initialize most of it once */

 skip_uc_load_valid and skip_uc_load are set above */

 Nothing to report for the compression table (zip_tbl_info) */

 The stats fields are only valid for IPA v4.0+ */

 If the DROP stats region is defined, include it */

 Send an INIT_DRIVER request to the modem, and wait for it to complete. */

 Send the request, and if successful wait for its response */

 We might be ready now */

 If any error occurs we need to cancel the transaction */

/* The modem server is now available.  We will send an INIT_DRIVER request

 * to the modem, but can't wait for it to complete in this callback thread.

 * Schedule a worker on the global workqueue to do that for us.

 Set up for QMI message exchange */

	/* The server handle is used to handle the DRIVER_INIT_COMPLETE

	 * request on the first modem boot.  It also receives the

	 * INDICATION_REGISTER request on the first boot and (optionally)

	 * subsequent boots.  The INIT_COMPLETE indication message is

	 * sent over the server handle if requested.

	/* The client handle is only used for sending an INIT_DRIVER request

	 * to the modem, and receiving its response message.

 We need this ready before the service lookup is added */

 Releasing the handle also removes registered lookups */

 Releasing the handle also removes registered services */

 Tear down IPA QMI handles */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2014-2018, The Linux Foundation. All rights reserved.

 * Copyright (C) 2018-2020 Linaro Ltd.

/* DOC: IPA Interrupts

 *

 * The IPA has an interrupt line distinct from the interrupt used by the GSI

 * code.  Whereas GSI interrupts are generally related to channel events (like

 * transfer completions), IPA interrupts are related to other events related

 * to the IPA.  Some of the IPA interrupts come from a microcontroller

 * embedded in the IPA.  Each IPA interrupt type can be both masked and

 * acknowledged independent of the others.

 *

 * Two of the IPA interrupts are initiated by the microcontroller.  A third

 * can be generated to signal the need for a wakeup/resume when an IPA

 * endpoint has been suspended.  There are other IPA events, but at this

 * time only these three are supported.

/**

 * struct ipa_interrupt - IPA interrupt information

 * @ipa:		IPA pointer

 * @irq:		Linux IRQ number used for IPA interrupts

 * @enabled:		Mask indicating which interrupts are enabled

 * @handler:		Array of handlers indexed by IPA interrupt ID

 Returns true if the interrupt type is associated with the microcontroller */

 Process a particular interrupt type that has been received */

	/* For microcontroller interrupts, clear the interrupt right away,

	 * "to avoid clearing unhandled interrupts."

	/* Clearing the SUSPEND_TX interrupt also clears the register

	 * that tells us which suspended endpoint(s) caused the interrupt,

	 * so defer clearing until after the handler has been called.

 IPA IRQ handler is threaded */

	/* The status register indicates which conditions are present,

	 * including conditions whose interrupt is not enabled.  Handle

	 * only the enabled ones.

 If any disabled interrupts are pending, clear them */

 Common function used to enable/disable TX_SUSPEND for an endpoint */

 IPA version 3.0 does not support TX_SUSPEND interrupt control */

 Enable TX_SUSPEND for an endpoint */

 Disable TX_SUSPEND for an endpoint */

 Clear the suspend interrupt for all endpoints that signaled it */

 SUSPEND interrupt status isn't cleared on IPA version 3.0 */

 Simulate arrival of an IPA TX_SUSPEND interrupt */

 Add a handler for an IPA interrupt */

 Update the IPA interrupt mask to enable it */

 Remove the handler for an IPA interrupt type */

 Update the IPA interrupt mask to disable it */

 Configure the IPA interrupt framework */

 Start with all IPA interrupts disabled */

 Inverse of ipa_interrupt_config() */

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2021 Linaro Ltd. */

* enum ipa_resource_type - IPA resource types for an SoC having IPA v4.11 */

 Source resource types; first must have value 0 */

 Destination resource types; first must have value 0 */

 Resource groups used for an SoC having IPA v4.11 */

 Source resource group identifiers */

 Last in set; not a source group */

 Destination resource group identifiers */

 Last; not a destination group */

 QSB configuration data for an SoC having IPA v4.11 */

 Endpoint configuration data for an SoC having IPA v4.11 */

 Source resource configuration data for an SoC having IPA v4.11 */

 Destination resource configuration data for an SoC having IPA v4.11 */

 Resource configuration data for an SoC having IPA v4.11 */

 IPA-resident memory region data for an SoC having IPA v4.11 */

 Memory configuration data for an SoC having IPA v4.11 */

 Interconnect rates are in 1000 byte/second units */

 600 MBps */

 150 MBps */

 Average rate is unused for the next interconnect */

 74 MBps */

 unused */

 Clock and interconnect configuration data for an SoC having IPA v4.11 */

 Hz */

 Configuration data for an SoC having IPA v4.11 */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2012-2018, The Linux Foundation. All rights reserved.

 * Copyright (C) 2018-2021 Linaro Ltd.

/**

 * DOC: The IP Accelerator

 *

 * This driver supports the Qualcomm IP Accelerator (IPA), which is a

 * networking component found in many Qualcomm SoCs.  The IPA is connected

 * to the application processor (AP), but is also connected (and partially

 * controlled by) other "execution environments" (EEs), such as a modem.

 *

 * The IPA is the conduit between the AP and the modem that carries network

 * traffic.  This driver presents a network interface representing the

 * connection of the modem to external (e.g. LTE) networks.

 *

 * The IPA provides protocol checksum calculation, offloading this work

 * from the AP.  The IPA offers additional functionality, including routing,

 * filtering, and NAT support, but that more advanced functionality is not

 * currently supported.  Despite that, some resources--including routing

 * tables and filter tables--are defined in this driver because they must

 * be initialized even when the advanced hardware features are not used.

 *

 * There are two distinct layers that implement the IPA hardware, and this

 * is reflected in the organization of the driver.  The generic software

 * interface (GSI) is an integral component of the IPA, providing a

 * well-defined communication layer between the AP subsystem and the IPA

 * core.  The GSI implements a set of "channels" used for communication

 * between the AP and the IPA.

 *

 * The IPA layer uses GSI channels to implement its "endpoints".  And while

 * a GSI channel carries data between the AP and the IPA, a pair of IPA

 * endpoints is used to carry traffic between two EEs.  Specifically, the main

 * modem network interface is implemented by two pairs of endpoints:  a TX

 * endpoint on the AP coupled with an RX endpoint on the modem; and another

 * RX endpoint on the AP receiving data from a TX endpoint on the modem.

 The name of the GSI firmware file relative to /lib/firmware */

 Shift of 19.2 MHz timestamp to achieve lower resolution timestamps */

 ~1.172 kHz, ~853 usec per tick */

 ~1.144 Hz, ~874 msec per tick */

 Divider for 19.2 MHz crystal oscillator clock to get common timer clock */

 1 is subtracted where used */

/**

 * ipa_setup() - Set up IPA hardware

 * @ipa:	IPA pointer

 *

 * Perform initialization that requires issuing immediate commands on

 * the command TX endpoint.  If the modem is doing GSI firmware load

 * and initialization, this function will be called when an SMP2P

 * interrupt has been signaled by the modem.  Otherwise it will be

 * called from ipa_probe() after GSI firmware has been successfully

 * loaded, authenticated, and started by Trust Zone.

	/* We need to use the AP command TX endpoint to perform other

	 * initialization, so we enable first.

 No matching teardown required */

 No matching teardown required */

	/* Enable the exception handling endpoint, and tell the hardware

	 * to use it by default.

 We're all set.  Now prepare for communication with the modem */

/**

 * ipa_teardown() - Inverse of ipa_setup()

 * @ipa:	IPA pointer

 We're going to tear everything down, as if setup never completed */

 Configure bus access behavior for IPA components */

 Nothing to configure prior to IPA v4.0 */

 For IPA v4.5 IPA_FULL_FLUSH_WAIT_RSC_CLOSE_EN is 0 */

 Configure DDR and (possibly) PCIe max read/write QSB values */

 QMB 0 represents DDR; QMB 1 (if present) represents PCIe */

 Max outstanding write accesses for QSB masters */

 Max outstanding read accesses for QSB masters */

 The internal inactivity timer clock is used for the aggregation timer */

 32 KHz inactivity timer clock */

/* Compute the value to use in the COUNTER_CFG register AGGR_GRANULARITY

 * field to represent the given number of microseconds.  The value is one

 * less than the number of timer ticks in the requested period.  0 is not

 * a valid granularity value (so for example @usec must be at least 16 for

 * a TIMER_FREQUENCY of 32000).

/* IPA uses unified Qtime starting at IPA v4.5, implementing various

 * timestamps and timers independent of the IPA core clock rate.  The

 * Qtimer is based on a 56-bit timestamp incremented at each tick of

 * a 19.2 MHz SoC crystal oscillator (XO clock).

 *

 * For IPA timestamps (tag, NAT, data path logging) a lower resolution

 * timestamp is achieved by shifting the Qtimer timestamp value right

 * some number of bits to produce the low-order bits of the coarser

 * granularity timestamp.

 *

 * For timers, a common timer clock is derived from the XO clock using

 * a divider (we use 192, to produce a 100kHz timer clock).  From

 * this common clock, three "pulse generators" are used to produce

 * timer ticks at a configurable frequency.  IPA timers (such as

 * those used for aggregation or head-of-line block handling) now

 * define their period based on one of these pulse generators.

 Timer clock divider must be disabled when we change the rate */

 Set DPL time stamp resolution to use Qtime (instead of 1 msec) */

 Configure tag and NAT Qtime timestamp resolution as well */

 Set granularity of pulse generators used for other timers */

 Actual divider is 1 more than value supplied here */

 Divider value is set; re-enable the common timer clock divider */

/**

 * ipa_hardware_dcd_config() - Enable dynamic clock division on IPA

 * @ipa:	IPA pointer

 *

 * Configures when the IPA signals it is idle to the global clock

 * controller, which can respond by scaling down the clock to save

 * power.

 Recommended values for IPA 3.5 and later according to IPA HPG */

 Power-on reset values */

/**

 * ipa_hardware_config() - Primitive hardware initialization

 * @ipa:	IPA pointer

 * @data:	IPA configuration data

 IPA v4.5+ has no backward compatibility register */

 Implement some hardware workarounds */

 Disable PA mask to allow HOLB drop */

 Enable open global clocks in the CLKON configuration */

 Disable MISC clock gating */

 No CLKON configuration needed */

 Configure system bus limits */

 Configure aggregation timer granularity */

 IPA v4.2 does not support hashed tables, so disable them */

 Enable dynamic clock division */

/**

 * ipa_hardware_deconfig() - Inverse of ipa_hardware_config()

 * @ipa:	IPA pointer

 *

 * This restores the power-on reset values (even if they aren't different)

 Mostly we just leave things as we set them. */

/**

 * ipa_config() - Configure IPA hardware

 * @ipa:	IPA pointer

 * @data:	IPA configuration data

 *

 * Perform initialization requiring IPA power to be enabled.

 No deconfig required */

 Assign resource limitation to each group; no deconfig required */

/**

 * ipa_deconfig() - Inverse of ipa_config()

 * @ipa:	IPA pointer

 Use name from DTB if specified; use default for *any* error */

/* Check things that can be validated at build time.  This just

 * groups these things BUILD_BUG_ON() calls don't clutter the rest

 * of the code.

	/* At one time we assumed a 64-bit build, allowing some do_div()

	 * calls to be replaced by simple division or modulo operations.

	 * We currently only perform divide and modulo operations on u32,

	 * u16, or size_t objects, and of those only size_t has any chance

	 * of being a 64-bit value.  (It should be guaranteed 32 bits wide

	 * on a 32-bit build, but there is no harm in verifying that.)

 Code assumes the EE ID for the AP is 0 (zeroed structure field) */

 There's no point if we have no channels or event rings */

 GSI hardware design limits */

	/* The number of TREs in a transaction is limited by the channel's

	 * TLV FIFO size.  A transaction structure uses 8-bit fields

	 * to represents the number of TREs it has allocated and used.

 This is used as a divisor */

 Aggregation granularity value can't be 0, and must fit */

/**

 * ipa_probe() - IPA platform driver probe function

 * @pdev:	Platform device pointer

 *

 * Return:	0 if successful, or a negative error code (possibly

 *		EPROBE_DEFER)

 *

 * This is the main entry point for the IPA driver.  Initialization proceeds

 * in several stages:

 *   - The "init" stage involves activities that can be initialized without

 *     access to the IPA hardware.

 *   - The "config" stage requires IPA power to be active so IPA registers

 *     can be accessed, but does not require the use of IPA immediate commands.

 *   - The "setup" stage uses IPA immediate commands, and so requires the GSI

 *     layer to be initialized.

 *

 * A Boolean Device Tree "modem-init" property determines whether GSI

 * initialization will be performed by the AP (Trust Zone) or the modem.

 * If the AP does GSI initialization, the setup phase is entered after

 * this has completed successfully.  Otherwise the modem initializes

 * the GSI layer and signals it has finished by sending an SMP2P interrupt

 * to the AP; this triggers the start if IPA setup.

 Get configuration data early; needed for power initialization */

 If we need Trust Zone, make sure it's available */

	/* The clock and interconnects might not be ready when we're

	 * probed, so might return -EPROBE_DEFER.

 No more EPROBE_DEFER.  Allocate and initialize the IPA structure */

 Result is a non-zero mask of endpoints that support filtering */

 Power needs to be active for config and setup */

	/* If the modem is doing early initialization, it will trigger a

	 * call to ipa_setup() when it has finished.  In that case we're

	 * done here.

	/* Otherwise we need to load the firmware and have Trust Zone validate

	 * and install it.  If that succeeds we can proceed with setup.

 If starting or stopping is in progress, try once more */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2012-2018, The Linux Foundation. All rights reserved.

 * Copyright (C) 2019-2020 Linaro Ltd.

 Setup IPA register memory  */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2012-2018, The Linux Foundation. All rights reserved.

 * Copyright (C) 2019-2021 Linaro Ltd.

* enum ipa_resource_type - IPA resource types for an SoC having IPA v3.5.1 */

 Source resource types; first must have value 0 */

 Destination resource types; first must have value 0 */

 Resource groups used for an SoC having IPA v3.5.1 */

 Source resource group identifiers */

 Last in set; not a source group */

 Destination resource group identifiers */

 Last; not a destination group */

 QSB configuration data for an SoC having IPA v3.5.1 */

 Endpoint datdata for an SoC having IPA v3.5.1 */

 Source resource configuration data for an SoC having IPA v3.5.1 */

 Destination resource configuration data for an SoC having IPA v3.5.1 */

 Resource configuration data for an SoC having IPA v3.5.1 */

 IPA-resident memory region data for an SoC having IPA v3.5.1 */

 Memory configuration data for an SoC having IPA v3.5.1 */

 Interconnect bandwidths are in 1000 byte/second units */

 600 MBps */

 80 MBps */

 Average bandwidth is unused for the next two interconnects */

 350 MBps */

 unused */

 40 MBps */

 unused */

 Clock and interconnect configuration data for an SoC having IPA v3.5.1 */

 Hz */

 Configuration data for an SoC having IPA v3.5.1 */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2012-2018, The Linux Foundation. All rights reserved.

 * Copyright (C) 2019-2021 Linaro Ltd.

* enum ipa_resource_type - IPA resource types for an SoC having IPA v3.1 */

 Source resource types; first must have value 0 */

 Destination resource types; first must have value 0 */

 Resource groups used for an SoC having IPA v3.1 */

 Source resource group identifiers */

 Last in set; not a source group */

 Destination resource group identifiers */

 Last; not a destination group */

 QSB configuration data for an SoC having IPA v3.1 */

 Endpoint data for an SoC having IPA v3.1 */

 Source resource configuration data for an SoC having IPA v3.1 */

 3 downstream */

 7 downstream */

 Destination resource configuration data for an SoC having IPA v3.1 */

 2 downstream */

 0 downstream */

 IPA_RSRC_GROUP_DST_DMA uses 2 downstream */

 Resource configuration data for an SoC having IPA v3.1 */

 IPA-resident memory region data for an SoC having IPA v3.1 */

 Memory configuration data for an SoC having IPA v3.1 */

 Interconnect bandwidths are in 1000 byte/second units */

 640 MBps */

 80 MBps */

 640 MBps */

 80 MBps */

 Average bandwidth is unused for the next interconnect */

 80 MBps */

 unused */

 Clock and interconnect configuration data for an SoC having IPA v3.1 */

 Hz */

 Configuration data for an SoC having IPA v3.1 */

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2021 Linaro Ltd. */

* enum ipa_resource_type - IPA resource types for an SoC having IPA v4.9 */

 Source resource types; first must have value 0 */

 Destination resource types; first must have value 0 */

 Resource groups used for an SoC having IPA v4.9 */

 Source resource group identifiers */

 Last in set; not a source group */

 Destination resource group identifiers */

 Last; not a destination group */

 QSB configuration data for an SoC having IPA v4.9 */

 no limit (hardware max) */

 Endpoint configuration data for an SoC having IPA v4.9 */

 Source resource configuration data for an SoC having IPA v4.9 */

 Destination resource configuration data for an SoC having IPA v4.9 */

 Resource configuration data for an SoC having IPA v4.9 */

 IPA-resident memory region data for an SoC having IPA v4.9 */

 Memory configuration data for an SoC having IPA v4.9 */

 Interconnect rates are in 1000 byte/second units */

 600 MBps */

 150 MBps */

 Average rate is unused for the next interconnect */

 74 MBps */

 unused */

 Clock and interconnect configuration data for an SoC having IPA v4.9 */

 Hz */

 Configuration data for an SoC having IPA v4.9. */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2012-2018, The Linux Foundation. All rights reserved.

 * Copyright (C) 2019-2020 Linaro Ltd.

 Indicate whether an endpoint config data entry is "empty" */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2012-2018, The Linux Foundation. All rights reserved.

 * Copyright (C) 2019-2020 Linaro Ltd.

/**

 * DOC: GSI Transactions

 *

 * A GSI transaction abstracts the behavior of a GSI channel by representing

 * everything about a related group of IPA commands in a single structure.

 * (A "command" in this sense is either a data transfer or an IPA immediate

 * command.)  Most details of interaction with the GSI hardware are managed

 * by the GSI transaction core, allowing users to simply describe commands

 * to be performed.  When a transaction has completed a callback function

 * (dependent on the type of endpoint associated with the channel) allows

 * cleanup of resources associated with the transaction.

 *

 * To perform a command (or set of them), a user of the GSI transaction

 * interface allocates a transaction, indicating the number of TREs required

 * (one per command).  If sufficient TREs are available, they are reserved

 * for use in the transaction and the allocation succeeds.  This way

 * exhaustion of the available TREs in a channel ring is detected

 * as early as possible.  All resources required to complete a transaction

 * are allocated at transaction allocation time.

 *

 * Commands performed as part of a transaction are represented in an array

 * of Linux scatterlist structures.  This array is allocated with the

 * transaction, and its entries are initialized using standard scatterlist

 * functions (such as sg_set_buf() or skb_to_sgvec()).

 *

 * Once a transaction's scatterlist structures have been initialized, the

 * transaction is committed.  The caller is responsible for mapping buffers

 * for DMA if necessary, and this should be done *before* allocating

 * the transaction.  Between a successful allocation and commit of a

 * transaction no errors should occur.

 *

 * Committing transfers ownership of the entire transaction to the GSI

 * transaction core.  The GSI transaction code formats the content of

 * the scatterlist array into the channel ring buffer and informs the

 * hardware that new TREs are available to process.

 *

 * The last TRE in each transaction is marked to interrupt the AP when the

 * GSI hardware has completed it.  Because transfers described by TREs are

 * performed strictly in order, signaling the completion of just the last

 * TRE in the transaction is sufficient to indicate the full transaction

 * is complete.

 *

 * When a transaction is complete, ipa_gsi_trans_complete() is called by the

 * GSI code into the IPA layer, allowing it to perform any final cleanup

 * required before the transaction is freed.

 Hardware values representing a transfer element type */

 An entry in a channel ring */

 DMA address */

 length in bytes or enum IPA_CMD_* */

 TRE_FLAGS_* */

 gsi_tre->flags mask values (in CPU byte order) */

	/* By allocating a few extra entries in our pool (one less

	 * than the maximum number that will be requested in a

	 * single allocation), we can always satisfy requests without

	 * ever worrying about straddling the end of the pool array.

	 * If there aren't enough entries starting at the free index,

	 * we just allocate free entries from the beginning of the pool.

 If the allocator gave us any extra memory, use it */

 Only used for DMA pools */

 Allocate the requested number of (zeroed) entries from the pool */

/* Home-grown DMA pool.  This way we can preallocate and use the tre_count

 * to guarantee allocations will succeed.  Even though we specify max_alloc

 * (and it can be more than one), we only allow allocation of a single

 * element from a DMA pool.

 Don't let allocations cross a power-of-two boundary */

	/* The allocator will give us a power-of-2 number of pages

	 * sufficient to satisfy our request.  Round up our requested

	 * size to avoid any unused space in the allocation.  This way

	 * gsi_trans_pool_exit_dma() can assume the total allocated

	 * size is exactly (count * size).

 Return the byte offset of the next free entry in the pool */

 Allocate from beginning if wrap would occur */

 Allocate a contiguous block of zeroed entries from a pool */

 Allocate a single zeroed entry from a DMA pool */

/* Return the pool element that immediately follows the one given.

 * This only works done if elements are allocated one at a time.

 Map a given ring entry index to the transaction associated with it */

 Note: index *must* be used modulo the ring count here */

 Return the transaction mapped to a given ring entry */

 Note: index *must* be used modulo the ring count here */

 Return the oldest completed transaction for a channel (or null) */

 Move a transaction from the allocated list to the pending list */

/* Move a transaction and all of its predecessors from the pending list

 * to the completed list.

 Move this transaction and all predecessors to completed list */

 Move a transaction from the completed list to the polled list */

 Reserve some number of TREs on a channel.  Returns true if successful */

 Release previously-reserved TRE entries to a channel */

 Allocate a GSI transaction on a channel */

	/* We reserve the TREs now, but consume them at commit time.

	 * If there aren't enough available, we're done.

 Allocate and initialize non-zero fields in the the transaction */

 Allocate the scatterlist and (if requested) info entries. */

 Free a previously-allocated transaction */

 We must hold the lock to release the last reference */

 Reference might have been added before we got the lock */

	/* Releasing the reserved TREs implicitly frees the sgl[] and

	 * (if present) info[] arrays, plus the transaction itself.

 Add an immediate command to a transaction */

	/* Commands are quite different from data transfer requests.

	 * Their payloads come from a pool whose memory is allocated

	 * using dma_alloc_coherent().  We therefore do *not* map them

	 * for DMA (unlike what we do for pages and skbs).

	 *

	 * When a transaction completes, the SGL is normally unmapped.

	 * A command transaction has direction DMA_NONE, which tells

	 * gsi_trans_complete() to skip the unmapping step.

	 *

	 * The only things we use directly in a command scatter/gather

	 * entry are the DMA address and length.  We still need the SG

	 * table flags to be maintained though, so assign a NULL page

	 * pointer for that purpose.

 Add a page transfer to a transaction.  It will fill the only TRE. */

 Transaction now owns the (DMA mapped) page */

 Add an SKB transfer to a transaction.  No other TREs will be used. */

 skb->len will not be 0 (checked early) */

 Transaction now owns the (DMA mapped) skb */

 Compute the length/opcode value to use for a TRE */

 Compute the flags value to use for a given TRE */

 Last TRE contains interrupt flags */

 All transactions end in a transfer completion interrupt */

 Don't interrupt when outbound commands are acknowledged */

 All others indicate there's more to come */

	/* ARM64 can write 16 bytes as a unit with a single instruction.

	 * Doing the assignment this way is an attempt to make that happen.

/**

 * __gsi_trans_commit() - Common GSI transaction commit code

 * @trans:	Transaction to commit

 * @ring_db:	Whether to tell the hardware about these queued transfers

 *

 * Formats channel ring TRE entries based on the content of the scatterlist.

 * Maps a transaction pointer to the last ring entry used for the transaction,

 * so it can be recovered when it completes.  Moves the transaction to the

 * pending list.  Finally, updates the channel ring pointer and optionally

 * rings the doorbell.

	/* Consume the entries.  If we cross the end of the ring while

	 * filling them we'll switch to the beginning to finish.

	 * If there is no info array we're doing a simple data

	 * transfer request, whose opcode is IPA_CMD_NONE.

 We record TX bytes when they are sent */

 Associate the last TRE with the transaction */

 Ring doorbell if requested, or if all TREs are allocated */

 Report what we're handing off to hardware for TX channels */

 Commit a GSI transaction */

 Commit a GSI transaction and wait for it to complete */

 Commit a GSI transaction and wait for it to complete, with timeout */

 In case of empty transaction */

 Process the completion of a transaction; called while polling */

 If the entire SGL was mapped when added, unmap it now */

 Cancel a channel's pending transactions */

 channel->gsi->mutex is held by caller */

 Schedule NAPI polling to complete the cancelled transactions */

 Issue a command to read a single byte from a channel */

 First reserve the TRE, if possible */

 Now fill the the reserved TRE and tell the hardware */

 Mark a gsi_trans_read_byte() request done */

 Initialize a channel's GSI transaction info */

 Ensure the size of a channel element is what's expected */

	/* The map array is used to determine what transaction is associated

	 * with a TRE that the hardware reports has completed.  We need one

	 * map entry per TRE.

	/* We can't use more TREs than there are available in the ring.

	 * This limits the number of transactions that can be oustanding.

	 * Worst case is one TRE per transaction (but we actually limit

	 * it to something a little less than that).  We allocate resources

	 * for transactions (including transaction structures) based on

	 * this maximum number.

 Transactions are allocated one at a time. */

	/* A transaction uses a scatterlist array to represent the data

	 * transfers implemented by the transaction.  Each scatterlist

	 * element is used to fill a single TRE when the transaction is

	 * committed.  So we need as many scatterlist elements as the

	 * maximum number of TREs that can be outstanding.

	 *

	 * All TREs in a transaction must fit within the channel's TLV FIFO.

	 * A transaction on a channel can allocate as many TREs as that but

	 * no more.

	/* Finally, the tre_avail field is what ultimately limits the number

	 * of outstanding transactions and their resources.  A transaction

	 * allocation succeeds only if the TREs available are sufficient for

	 * what the transaction might need.  Transaction resource pools are

	 * sized based on the maximum number of outstanding TREs, so there

	 * will always be resources available if there are TREs available.

 Inverse of gsi_channel_trans_init() */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2018, The Linux Foundation. All rights reserved.

 * Copyright (C) 2018-2020 Linaro Ltd.

 QMI message structure definition for struct ipa_indication_register_req */

 QMI message structure definition for struct ipa_indication_register_rsp */

 QMI message structure definition for struct ipa_driver_init_complete_req */

 QMI message structure definition for struct ipa_driver_init_complete_rsp */

 QMI message structure definition for struct ipa_init_complete_ind */

 QMI message structure definition for struct ipa_mem_bounds */

 QMI message structure definition for struct ipa_mem_array */

 QMI message structure definition for struct ipa_mem_range */

 QMI message structure definition for struct ipa_init_modem_driver_req */

 QMI message structure definition for struct ipa_init_modem_driver_rsp */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2015-2018, The Linux Foundation. All rights reserved.

 * Copyright (C) 2018-2021 Linaro Ltd.

/**

 * DOC: The IPA Generic Software Interface

 *

 * The generic software interface (GSI) is an integral component of the IPA,

 * providing a well-defined communication layer between the AP subsystem

 * and the IPA core.  The modem uses the GSI layer as well.

 *

 *	--------	     ---------

 *	|      |	     |	     |

 *	|  AP  +<---.	.----+ Modem |

 *	|      +--. |	| .->+	     |

 *	|      |  | |	| |  |	     |

 *	--------  | |	| |  ---------

 *		  v |	v |

 *		--+-+---+-+--

 *		|    GSI    |

 *		|-----------|

 *		|	    |

 *		|    IPA    |

 *		|	    |

 *		-------------

 *

 * In the above diagram, the AP and Modem represent "execution environments"

 * (EEs), which are independent operating environments that use the IPA for

 * data transfer.

 *

 * Each EE uses a set of unidirectional GSI "channels," which allow transfer

 * of data to or from the IPA.  A channel is implemented as a ring buffer,

 * with a DRAM-resident array of "transfer elements" (TREs) available to

 * describe transfers to or from other EEs through the IPA.  A transfer

 * element can also contain an immediate command, requesting the IPA perform

 * actions other than data transfer.

 *

 * Each TRE refers to a block of data--also located DRAM.  After writing one

 * or more TREs to a channel, the writer (either the IPA or an EE) writes a

 * doorbell register to inform the receiving side how many elements have

 * been written.

 *

 * Each channel has a GSI "event ring" associated with it.  An event ring

 * is implemented very much like a channel ring, but is always directed from

 * the IPA to an EE.  The IPA notifies an EE (such as the AP) about channel

 * events by adding an entry to the event ring associated with the channel.

 * The GSI then writes its doorbell for the event ring, causing the target

 * EE to be interrupted.  Each entry in an event ring contains a pointer

 * to the channel TRE whose completion the event represents.

 *

 * Each TRE in a channel ring has a set of flags.  One flag indicates whether

 * the completion of the transfer operation generates an entry (and possibly

 * an interrupt) in the channel's event ring.  Other flags allow transfer

 * elements to be chained together, forming a single logical transaction.

 * TRE flags are used to control whether and when interrupts are generated

 * to signal completion of channel transfers.

 *

 * Elements in channel and event rings are completed (or consumed) strictly

 * in order.  Completion of one entry implies the completion of all preceding

 * entries.  A single completion interrupt can therefore communicate the

 * completion of many transfers.

 *

 * Note that all GSI registers are little-endian, which is the assumed

 * endianness of I/O space accesses.  The accessor functions perform byte

 * swapping if needed (i.e., for a big endian CPU).

 Delay period for interrupt moderation (in 32KHz IPA internal timer ticks) */

 1ms under 32KHz clock */

 milliseconds */

 1st reserved event id */

 Last reserved event id */

 Detect interrupt storms */

 An entry in an event ring */

/** gsi_channel_scratch_gpi - GPI protocol scratch register

 * @max_outstanding_tre:

 *	Defines the maximum number of TREs allowed in a single transaction

 *	on a channel (in bytes).  This determines the amount of prefetch

 *	performed by the hardware.  We configure this to equal the size of

 *	the TLV FIFO for the channel.

 * @outstanding_threshold:

 *	Defines the threshold (in bytes) determining when the sequencer

 *	should update the channel doorbell.  We configure this to equal

 *	the size of two TREs.

/** gsi_channel_scratch - channel scratch configuration area

 *

 * The exact interpretation of this register is protocol-specific.

 * We only use GPI channels; see struct gsi_channel_scratch_gpi, above.

 Check things that can be validated at build time. */

 This is used as a divisor */

	/* Code assumes the size of channel and event ring element are

	 * the same (and fixed).  Make sure the size of an event ring

	 * element is what's expected.

	/* Hardware requires a 2^n ring size.  We ensure the number of

	 * elements in an event ring is a power of 2 elsewhere; this

	 * ensure the elements themselves meet the requirement.

 The channel element size must fit in this field */

 The event ring element size must fit in this field */

 Return the channel id associated with a given channel */

 An initialized channel has a non-null GSI pointer */

 Update the GSI IRQ type register with the cached value */

/* Event ring commands are performed one at a time.  Their completion

 * is signaled by the event ring control GSI interrupt type, which is

 * only enabled when we issue an event ring command.  Only the event

 * ring being operated on has this interrupt enabled.

	/* There's a small chance that a previous command completed

	 * after the interrupt was disabled, so make sure we have no

	 * pending interrupts before we enable them.

 Disable event ring control interrupts */

/* Channel commands are performed one at a time.  Their completion is

 * signaled by the channel control GSI interrupt type, which is only

 * enabled when we issue a channel command.  Only the channel being

 * operated on has this interrupt enabled.

	/* There's a small chance that a previous command completed

	 * after the interrupt was disabled, so make sure we have no

	 * pending interrupts before we enable them.

 Disable channel control interrupts */

 Enable the interrupt type if this is the first channel enabled */

 Disable the interrupt type if this was the last enabled channel */

 Enable all GSI_interrupt types */

	/* Global interrupts include hardware error reports.  Enable

	 * that so we can at least report the error should it occur.

	/* General GSI interrupts are reported to all EEs; if they occur

	 * they are unrecoverable (without reset).  A breakpoint interrupt

	 * also exists, but we don't support that.  We want to be notified

	 * of errors so we can report them, even if they can't be handled.

 Disable all GSI interrupt types */

 Clear the type-specific interrupt masks set by gsi_irq_enable() */

 Return the virtual address associated with a ring index */

 Note: index *must* be used modulo the ring count here */

 Return the 32-bit DMA address associated with a ring index */

 Return the ring index of a 32-bit ring offset */

/* Issue a GSI command by writing a value to a register, then wait for

 * completion to be signaled.  Returns true if the command completes

 * or false if it times out.

 Return the hardware's notion of the current state of an event ring */

 Issue an event ring command and wait for it to complete */

 Enable the completion interrupt for the command */

 Allocate an event ring in NOT_ALLOCATED state */

 Get initial event ring state */

 If successful the event ring state will have changed */

 Reset a GSI event ring in ALLOCATED or ERROR state. */

 If successful the event ring state will have changed */

 Issue a hardware de-allocation request for an allocated event ring */

 If successful the event ring state will have changed */

 Fetch the current state of a channel from hardware */

 Issue a channel command and wait for it to complete */

 Enable the completion interrupt for the command */

 Allocate GSI channel in NOT_ALLOCATED state */

 Get initial channel state */

 If successful the channel state will have changed */

 Start an ALLOCATED channel */

 If successful the channel state will have changed */

 Stop a GSI channel in STARTED state */

	/* Channel could have entered STOPPED state since last call

	 * if it timed out.  If so, we're done.

 If successful the channel state will have changed */

 We may have to try again if stop is in progress */

 Reset a GSI channel in ALLOCATED or ERROR state. */

 A short delay is required before a RESET command */

 No need to reset a channel already in ALLOCATED state */

 If successful the channel state will have changed */

 Deallocate an ALLOCATED GSI channel */

 If successful the channel state will have changed */

/* Ring an event ring doorbell, reporting the last entry processed by the AP.

 * The index argument (modulo the ring count) is the first unfilled entry, so

 * we supply one less than that with the doorbell.  Update the event ring

 * index field with the value provided.

 Next unused entry */

 Note: index *must* be used modulo the ring count here */

 Program an event ring for use */

 We program all event rings as GPI type/protocol */

	/* The context 2 and 3 registers store the low-order and

	 * high-order 32 bits of the address of the event ring,

	 * respectively.

 Enable interrupt moderation by setting the moderation delay */

 comes from channel */

 No MSI write data, and MSI address high and low address is 0 */

 We don't need to get event read pointer updates */

 Finally, tell the hardware we've completed event 0 (arbitrary) */

 Find the transaction whose completion indicates a channel is quiesced */

	/* There is a small chance a TX transaction got allocated just

	 * before we disabled transmits, so check for that.

	/* Otherwise (TX or RX) we want to wait for anything that

	 * has completed, or has been polled but not released yet.

 Caller will wait for this, so take a reference */

 Wait for transaction activity on a channel to complete */

 Get the last transaction, and wait for it to complete */

 Program a channel for use; there is no gsi_channel_deprogram() */

 Arbitrarily pick TRE 0 as the first channel element to use */

 We program all channels as GPI type/protocol */

	/* The context 2 and 3 registers store the low-order and

	 * high-order 32 bits of the address of the channel ring,

	 * respectively.

 Command channel gets low weighted round-robin priority */

 Max prefetch is 1 segment (do not set MAX_PREFETCH_FMASK) */

 No need to use the doorbell engine starting at IPA v4.0 */

	/* v4.0 introduces an escape buffer for prefetch.  We use it

	 * on all but the AP command channel.

 If not otherwise set, prefetch buffers are used */

 All channels set DB_IN_BYTES */

 Now update the scratch registers for GPI protocol */

	/* We must preserve the upper 16 bits of the last scratch register.

	 * The next sequence assumes those bits remain unchanged between the

	 * read and the write.

 All done! */

 Prior to IPA v4.0 suspend/resume is not implemented by GSI */

 Start an allocated GSI channel */

 Enable NAPI and the completion interrupt */

 Wait for any underway transactions to complete before stopping. */

 Prior to IPA v4.0 suspend/resume is not implemented by GSI */

 Stop a started channel */

 Disable the completion interrupt and NAPI if successful */

 Reset and reconfigure a channel, (possibly) enabling the doorbell engine */

 Due to a hardware quirk we may need to reset RX channels twice. */

 Stop a started channel for suspend */

 Ensure NAPI polling has finished. */

 Resume a suspended channel (starting if stopped) */

 Prevent all GSI interrupts while suspended */

 Allow all GSI interrupts again when resuming */

/**

 * gsi_channel_tx_queued() - Report queued TX transfers for a channel

 * @channel:	Channel for which to report

 *

 * Report to the network stack the number of bytes and transactions that

 * have been queued to hardware since last call.  This and the next function

 * supply information used by the network stack for throttling.

 *

 * For each channel we track the number of transactions used and bytes of

 * data those transactions represent.  We also track what those values are

 * each time this function is called.  Subtracting the two tells us

 * the number of bytes and transactions that have been added between

 * successive calls.

 *

 * Calling this each time we ring the channel doorbell allows us to

 * provide accurate information to the network stack about how much

 * work we've given the hardware at any point in time.

/**

 * gsi_channel_tx_update() - Report completed TX transfers

 * @channel:	Channel that has completed transmitting packets

 * @trans:	Last transation known to be complete

 *

 * Compute the number of transactions and bytes that have been transferred

 * over a TX channel since the given transaction was committed.  Report this

 * information to the network stack.

 *

 * At the time a transaction is committed, we record its channel's

 * committed transaction and byte counts *in the transaction*.

 * Completions are signaled by the hardware with an interrupt, and

 * we can determine the latest completed transaction at that time.

 *

 * The difference between the byte/transaction count recorded in

 * the transaction and the count last time we recorded a completion

 * tells us exactly how much data has been transferred between

 * completions.

 *

 * Calling this each time we learn of a newly-completed transaction

 * allows us to provide accurate information to the network stack

 * about how much work has been completed by the hardware at a given

 * point in time.

 Channel control interrupt handler */

 Event ring control interrupt handler */

 Global channel error interrupt handler */

 Report, but otherwise ignore all other error codes */

 Global event error interrupt handler */

 Report, but otherwise ignore all other error codes */

 Global error interrupt handler */

 Get the logged error, then reinitialize the log */

 type GSI_ERR_TYPE_GLOB should be fatal */

 Generic EE interrupt handler */

	/* This interrupt is used to handle completions of the two GENERIC

	 * GSI commands.  We use these to allocate and halt channels on

	 * the modem's behalf due to a hardware quirk on IPA v4.2.  Once

	 * allocated, the modem "owns" these channels, and as a result we

	 * have no way of knowing the channel's state at any given time.

	 *

	 * It is recommended that we halt the modem channels we allocated

	 * when shutting down, but it's possible the channel isn't running

	 * at the time we issue the HALT command.  We'll get an error in

	 * that case, but it's harmless (the channel is already halted).

	 *

	 * For this reason, we silently ignore a CHANNEL_NOT_RUNNING error

	 * if we receive it.

 Inter-EE interrupt handler */

 I/O completion interrupt event */

 General event interrupts represent serious problems, so report them */

/**

 * gsi_isr() - Top level GSI interrupt service routine

 * @irq:	Interrupt number (ignored)

 * @dev_id:	GSI pointer supplied to request_irq()

 *

 * This is the main handler function registered for the GSI IRQ. Each type

 * of interrupt has a separate handler function that is called from here.

 enum gsi_irq_type_id defines GSI interrupt types */

 intr_mask contains bitmask of pending GSI interrupts */

 Init function for GSI IRQ lookup; there is no gsi_irq_exit() */

 Return the transaction associated with a transfer completion event */

 Event xfer_ptr records the TRE it's associated with */

/**

 * gsi_evt_ring_rx_update() - Record lengths of received data

 * @evt_ring:	Event ring associated with channel that received packets

 * @index:	Event index in ring reported by hardware

 *

 * Events for RX channels contain the actual number of bytes received into

 * the buffer.  Every event has a transaction associated with it, and here

 * we update transactions to record their actual received lengths.

 *

 * This function is called whenever we learn that the GSI hardware has filled

 * new events since the last time we checked.  The ring's index field tells

 * the first entry in need of processing.  The index provided is the

 * first *unfilled* event in the ring (following the last filled one).

 *

 * Events are sequential within the event ring, and transactions are

 * sequential within the transaction pool.

 *

 * Note that @index always refers to an element *within* the event ring.

	/* We'll start with the oldest un-processed event.  RX channels

	 * replenish receive buffers in single-TRE transactions, so we

	 * can just map that event to its transaction.  Transactions

	 * associated with completion events are consecutive.

	/* Compute the number of events to process before we wrap,

	 * and determine when we'll be done processing events.

 Move on to the next event and transaction */

 We record RX bytes when they are received */

 Initialize a ring, including allocating DMA memory for its entries */

	/* Hardware requires a 2^n ring size, with alignment equal to size.

	 * The DMA address returned by dma_alloc_coherent() is guaranteed to

	 * be a power-of-2 number of pages, which satisfies the requirement.

 Free a previously-allocated ring */

 Allocate an available event ring id */

 Free a previously-allocated event ring id */

 Ring a channel doorbell, reporting the first un-filled entry */

 Note: index *must* be used modulo the ring count here */

 Consult hardware, move any newly completed transactions to completed list */

	/* See if there's anything new to process; if not, we're done.  Note

	 * that index always refers to an entry *within* the event ring.

	/* Get the transaction for the latest completed event.  Take a

	 * reference to keep it from completing before we give the events

	 * for this and previous transactions back to the hardware.

	/* For RX channels, update each completed transaction with the number

	 * of bytes that were actually received.  For TX channels, report

	 * the number of transactions and bytes this completion represents

	 * up the network stack.

 Tell the hardware we've handled these events */

/**

 * gsi_channel_poll_one() - Return a single completed transaction on a channel

 * @channel:	Channel to be polled

 *

 * Return:	Transaction pointer, or null if none are available

 *

 * This function returns the first entry on a channel's completed transaction

 * list.  If that list is empty, the hardware is consulted to determine

 * whether any new transactions have completed.  If so, they're moved to the

 * completed list and the new first entry is returned.  If there are no more

 * completed transactions, a null pointer is returned.

 Get the first transaction from the completed list */

 List is empty; see if there's more to do */

/**

 * gsi_channel_poll() - NAPI poll function for a channel

 * @napi:	NAPI structure for the channel

 * @budget:	Budget supplied by NAPI core

 *

 * Return:	Number of items polled (<= budget)

 *

 * Single transactions completed by hardware are polled until either

 * the budget is exhausted, or there are no more.  Each transaction

 * polled is passed to gsi_trans_complete(), to perform remaining

 * completion processing and retire/free the transaction.

/* The event bitmap represents which event ids are available for allocation.

 * Set bits are not available, clear bits can be used.  This function

 * initializes the map so all events supported by the hardware are available,

 * then precludes any reserved events from being allocated.

 Setup function for a single channel */

 We've done nothing with the event ring yet so don't reset */

 Inverse of gsi_channel_setup_one() */

	/* The error global interrupt type is always enabled (until we

	 * teardown), so we won't change that.  A generic EE command

	 * completes with a GSI global interrupt of type GP_INT1.  We

	 * only perform one generic command at a time (to allocate or

	 * halt a modem channel) and only from this function.  So we

	 * enable the GP_INT1 IRQ type here while we're expecting it.

 First zero the result code field */

 Now issue the command */

 Disable the GP_INT1 IRQ type again */

 Setup function for channels */

 Make sure no channels were defined that hardware does not support */

 Allocate modem channels if necessary */

 Clear bit from mask only after success (for unwind) */

 Compute which modem channels need to be deallocated */

 Inverse of gsi_channel_setup() */

 Turn off all GSI interrupts initially */

 Writing 1 indicates IRQ interrupts; 0 would be MSI */

 Disable all interrupt types */

 Clear all type-specific interrupt masks */

 The inter-EE interrupts are not supported for IPA v3.0-v3.1 */

 These registers are in the non-adjusted address range */

 Get # supported channel and event rings; there is no gsi_ring_teardown() */

 No HW_PARAM_2 register prior to IPA v3.5.1, assume the max */

 Setup function for GSI.  GSI firmware must be loaded and initialized */

 Here is where we first touch the GSI hardware */

 No matching teardown required */

 Initialize the error log */

 Inverse of gsi_setup() */

 Initialize a channel's event ring */

 Success! */

 Inverse of gsi_channel_evt_ring_init() */

 Init function for event rings; there is no gsi_evt_ring_exit() */

 Make sure channel ids are in the range driver supports */

	/* We have to allow at least one maximally-sized transaction to

	 * be outstanding (which would use tlv_count TREs).  Given how

	 * gsi_channel_tre_max() is computed, tre_count has to be almost

	 * twice the TLV FIFO size to satisfy this requirement.

 Init function for a single channel */

 Worst case we need an event for every outstanding TRE */

 Success! */

 Mark it not (fully) initialized */

 Inverse of gsi_channel_init_one() */

 Init function for channels */

 IPA v4.2 requires the AP to allocate channels for the modem */

 No matching exit required */

 The endpoint data array is indexed by endpoint name */

 Skip over empty slots */

 Mark modem channels to be allocated (hardware workaround) */

 Inverse of gsi_channel_init() */

 Init function for GSI.  GSI hardware does not need to be "ready" */

	/* GSI uses NAPI on all channels.  Create a dummy network device

	 * for the channel NAPI contexts to be associated with.

 Get GSI memory range and map it */

 Make sure we can make our pointer adjustment if necessary */

 Most registers are accessed using an adjusted register range */

 No matching exit required */

 Inverse of gsi_init() */

/* The maximum number of outstanding TREs on a channel.  This limits

 * a channel's maximum number of transactions outstanding (worst case

 * is one TRE per transaction).

 *

 * The absolute limit is the number of TREs in the channel's TRE ring,

 * and in theory we should be able use all of them.  But in practice,

 * doing that led to the hardware reporting exhaustion of event ring

 * slots for writing completion information.  So the hardware limit

 * would be (tre_count - 1).

 *

 * We reduce it a bit further though.  Transaction resource pools are

 * sized to be a little larger than this maximum, to allow resource

 * allocations to always be contiguous.  The number of entries in a

 * TRE ring buffer is a power of 2, and the extra resources in a pool

 * tends to nearly double the memory allocated for it.  Reducing the

 * maximum number of outstanding TREs allows the number of entries in

 * a pool to avoid crossing that power-of-2 boundary, and this can

 * substantially reduce pool memory requirements.  The number we

 * reduce it by matches the number added in gsi_trans_pool_init().

 Hardware limit is channel->tre_count - 1 */

 Returns the maximum number of TREs in a single transaction for a channel */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2014-2018, The Linux Foundation. All rights reserved.

 * Copyright (C) 2018-2021 Linaro Ltd.

 for padding by mux layer */

 seconds */

/**

 * struct ipa_priv - IPA network device private data

 * @ipa:	IPA pointer

 * @work:	Work structure used to wake the modem netdev TX queue

* ipa_open() - Opens the modem network interface */

* ipa_stop() - Stops the modem network interface. */

/** ipa_start_xmit() - Transmits an skb.

 * @skb: skb to be transmitted

 * @dev: network device

 *

 * Return codes:

 * NETDEV_TX_OK: Success

 * NETDEV_TX_BUSY: Error while transmitting the skb. Try again later

 The hardware must be powered for us to transmit */

 If a resume won't happen, just drop the packet */

		/* No power (yet).  Stop the network stack from transmitting

		 * until we're resumed; ipa_modem_resume() arranges for the

		 * TX queue to be started again.

* ipa_modem_netdev_setup() - netdev setup function for the modem */

 No header ops (override value set by ether_setup()) */

 The endpoint is configured for QMAP */

/** ipa_modem_suspend() - suspend callback

 * @netdev:	Network device

 *

 * Suspend the modem's endpoints.

/**

 * ipa_modem_wake_queue_work() - enable modem netdev queue

 * @work:	Work structure

 *

 * Re-enable transmit on the modem network device.  This is called

 * in (power management) work queue context, scheduled when resuming

 * the modem.  We can't enable the queue directly in ipa_modem_resume()

 * because transmits restart the instant the queue is awakened; but the

 * device power state won't be ACTIVE until *after* ipa_modem_resume()

 * returns.

/** ipa_modem_resume() - resume callback for runtime_pm

 * @dev: pointer to device

 *

 * Resume the modem's endpoints.

 Arrange for the TX queue to be restarted */

 Only attempt to start the modem if it's stopped */

 Silently ignore attempts when running, or when changing state */

 Only attempt to stop the modem if it's running */

 Silently ignore attempts when already stopped */

 If we're somewhere between stopped and starting, we're busy */

 Prevent the modem from triggering a call to ipa_setup() */

 Clean up the netdev and endpoints if it was started */

 If it was opened, stop it first */

 Treat a "clean" modem stop the same as a crash */

 Now prepare for the next modem boot */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2012-2018, The Linux Foundation. All rights reserved.

 * Copyright (C) 2019-2021 Linaro Ltd.

 RX buffer is 1 page (or a power-of-2 contiguous pages) */

 PAGE_SIZE > 4096 wastes a LOT */

 The amount of RX buffer space consumed by standard skb overhead */

 Where to find the QMAP mux_id for a packet within modem-supplied metadata */

 host byte order */

 microseconds */

* enum ipa_status_opcode - status element opcode hardware values */

* enum ipa_status_exception - status element exception type */

 0 means no exception */

 Status element provided by hardware */

 enum ipa_status_opcode */

 enum ipa_status_exception */

 Field masks for struct ipa_status structure fields */

 Nothing more to check for RX */

 Status endpoint must be defined... */

 ...and has to be an RX endpoint... */

 ...and if it's to be an AP endpoint... */

 ...make sure it has status enabled. */

	/* The aggregation byte limit defines the point at which an

	 * aggregation window will close.  It is programmed into the

	 * IPA hardware as a number of KB.  We don't use "hard byte

	 * limit" aggregation, which means that we need to supply

	 * enough space in a receive buffer to hold a complete MTU

	 * plus normal skb overhead *after* that aggregation byte

	 * limit has been crossed.

	 *

	 * This check ensures we don't define a receive buffer size

	 * that would exceed what we can represent in the field that

	 * is used to program its size.

 Make sure needed endpoints have defined data */

 Allocate a transaction to use on a non-command endpoint */

/* suspend_delay represents suspend for RX, delay for TX endpoints.

 * Note that suspend is not supported starting with IPA v4.0.

	/* Suspend is not supported for IPA v4.0+.  Delay doesn't work

	 * correctly on IPA v4.2.

 Don't bother if it's already in the requested state */

 We currently don't care what the previous state was for delay mode */

 Delay mode doesn't work properly for IPA v4.2 */

/**

 * ipa_endpoint_suspend_aggr() - Emulate suspend interrupt

 * @endpoint:	Endpoint on which to emulate a suspend

 *

 *  Emulate suspend IPA interrupt to unsuspend an endpoint suspended

 *  with an open aggregation frame.  This is to work around a hardware

 *  issue in IPA version 3.5.1 where the suspend interrupt will not be

 *  generated when it should be.

 Nothing to do if the endpoint doesn't have aggregation open */

 Force close aggregation */

 Returns previous suspend state (true means suspend was enabled) */

 For IPA v4.0+, no change made */

	/* A client suspended with an open aggregation frame will not

	 * generate a SUSPEND IPA interrupt.  If enabling suspend, have

	 * ipa_endpoint_suspend_aggr() handle this.

 Enable or disable delay or suspend mode on all modem endpoints */

 DELAY mode doesn't work correctly on IPA v4.2 */

 Set TX delay mode or RX suspend mode */

 Reset all modem endpoints to use the default exception endpoint */

	/* We need one command per modem TX endpoint.  We can get an upper

	 * bound on that by assuming all initialized endpoints are modem->IPA.

	 * That won't happen, and we could be more precise, but this is fine

	 * for now.  End the transaction with commands to clear the pipeline.

 We only reset modem TX endpoints */

		/* Value written is 0, and all bits are updated.  That

		 * means status is disabled on the endpoint, and as a

		 * result all other fields in the register are ignored.

 XXX This should have a 1 second timeout */

 FRAG_OFFLOAD_EN is 0 */

 Checksum header offset is in 4-byte units */

 CS_GEN_QMB_MASTER_SEL is 0 */

 Without checksum offload, we just have the MAP header */

 Checksum header inserted for AP TX endpoints only */

 Checksum header is used in both directions */

/**

 * ipa_endpoint_init_hdr() - Initialize HDR endpoint configuration register

 * @endpoint:	Endpoint pointer

 *

 * We program QMAP endpoints so each packet received is preceded by a QMAP

 * header structure.  The QMAP header contains a 1-byte mux_id and 2-byte

 * packet size field, and we have the IPA hardware populate both for each

 * received packet.  The header is configured (in the HDR_EXT register)

 * to use big endian format.

 *

 * The packet size is written into the QMAP header's pkt_len field.  That

 * location is defined here using the HDR_OFST_PKT_SIZE field.

 *

 * The mux_id comes from a 4-byte metadata value supplied with each packet

 * by the modem.  It is *not* a QMAP header, but it does contain the mux_id

 * value that we want, in its low-order byte.  A bitmask defined in the

 * endpoint's METADATA_MASK register defines which byte within the modem

 * metadata contains the mux_id.  And the OFST_METADATA field programmed

 * here indicates where the extracted byte should be placed within the QMAP

 * header.

 Define how to fill fields in a received QMAP header */

 Field offset within header */

 Where IPA will write the metadata value */

 Where IPA will write the length */

 Upper bits are stored in HDR_EXT with IPA v4.5 */

 For QMAP TX, metadata offset is 0 (modem assumes this) */

 HDR_ADDITIONAL_CONST_LEN is 0; (RX only) */

 HDR_A5_MUX is 0 */

 HDR_LEN_INC_DEAGG_HDR is 0 */

 HDR_METADATA_REG_VALID is 0 (TX only, version < v4.5) */

 big endian */

	/* A QMAP header contains a 6 bit pad field at offset 0.  The RMNet

	 * driver assumes this field is meaningful in packets it receives,

	 * and assumes the header's payload length includes that padding.

	 * The RMNet driver does *not* pad packets it sends, however, so

	 * the pad field (although 0) should be ignored.

 HDR_TOTAL_LEN_OR_PAD is 0 (pad, not total_len) */

 HDR_TOTAL_LEN_OR_PAD_OFFSET is 0 */

 HDR_PAYLOAD_LEN_INC_PADDING is 0 */

	/* IPA v4.5 adds some most-significant bits to a few fields,

	 * two of which are defined in the HDR (not HDR_EXT) register.

 HDR_TOTAL_LEN_OR_PAD_OFFSET is 0, so MSB is 0 */

 HDR_ADDITIONAL_CONST_LEN is 0 so MSB is 0 */

 Register not valid for TX endpoints */

 Note that HDR_ENDIANNESS indicates big endian header fields */

 Register not valid for RX endpoints */

 All other bits unspecified (and 0) */

 Compute the aggregation size value to use for a given buffer size */

	/* We don't use "hard byte limit" aggregation, so we define the

	 * aggregation limit such that our buffer has enough space *after*

	 * that limit to receive a full MTU of data, plus overhead.

 Encoded values for AGGR endpoint register fields */

 Encode the aggregation timer limit (microseconds) based on IPA version */

 We set aggregation granularity in ipa_hardware_config() */

	/* IPA v4.5 expresses the time limit using Qtime.  The AP has

	 * pulse generators 0 and 1 available, which were configured

	 * in ipa_qtime_config() to have granularity 100 usec and

	 * 1 msec, respectively.  Use pulse generator 0 if possible,

	 * otherwise fall back to pulse generator 1.

 Have to use pulse generator 1 (millisecond granularity) */

 We can use pulse generator 0 (100 usec granularity) */

 AGGR_PKT_LIMIT is 0 (unlimited) */

 AGGR_HARD_BYTE_LIMIT_ENABLE is 0 */

 other fields ignored */

 AGGR_FORCE_CLOSE is 0 */

 AGGR_GRAN_SEL is 0 for IPA v4.5 */

 other fields ignored */

/* Return the Qtime-based head-of-line blocking timer value that

 * represents the given number of microseconds.  The result

 * includes both the timer value and the selected timer granularity.

	/* IPA v4.5 expresses time limits using Qtime.  The AP has

	 * pulse generators 0 and 1 available, which were configured

	 * in ipa_qtime_config() to have granularity 100 usec and

	 * 1 msec, respectively.  Use pulse generator 0 if possible,

	 * otherwise fall back to pulse generator 1.

 Have to use pulse generator 1 (millisecond granularity) */

 We can use pulse generator 0 (100 usec granularity) */

/* The head-of-line blocking timer is defined as a tick count.  For

 * IPA version 4.5 the tick count is based on the Qtimer, which is

 * derived from the 19.2 MHz SoC XO clock.  For older IPA versions

 * each tick represents 128 cycles of the IPA core clock.

 *

 * Return the encoded value that should be written to that register

 * that represents the timeout period provided.  For IPA v4.2 this

 * encodes a base and scale value, while for earlier versions the

 * value is a simple tick count.

 Nothing to compute if timer period is 0 */

 Use 64 bit arithmetic to avoid overflow... */

 ...but we still need to fit into a 32-bit register */

 IPA v3.5.1 through v4.1 just record the tick count */

	/* For IPA v4.2, the tick count is represented by base and

	 * scale fields within the 32-bit timer register, where:

	 *     ticks = base << scale;

	 * The best precision is achieved when the base value is as

	 * large as possible.  Find the highest set bit in the tick

	 * count, and extract the number of bits in the base field

	 * such that high bit is included.

 1..32 */

 If we're scaling, round up to get a closer result */

 High bit was set, so rounding might have affected it */

 If microseconds is 0, timeout is immediate */

 This should only be changed when HOL_BLOCK_EN is disabled */

 When enabling, the register must be written twice for IPA v4.5+ */

 Register not valid for RX endpoints */

 DEAGGR_HDR_LEN is 0 */

 PACKET_OFFSET_VALID is 0 */

 PACKET_OFFSET_LOCATION is ignored (not valid) */

 MAX_PACKET_LEN is 0 (not enforced) */

 Register not valid for RX endpoints */

 Low-order byte configures primary packet processing */

 Second byte configures replicated packet processing */

/**

 * ipa_endpoint_skb_tx() - Transmit a socket buffer

 * @endpoint:	Endpoint pointer

 * @skb:	Socket buffer to send

 *

 * Returns:	0 if successful, or a negative error code

	/* Make sure source endpoint's TLV FIFO has enough entries to

	 * hold the linear portion of the skb and all its fragments.

	 * If not, see if we can linearize it before giving up.

 transaction owns skb now */

		/* STATUS_LOCATION is 0, meaning status element precedes

		 * packet (not present for IPA v4.5)

 STATUS_PKT_SUPPRESS_FMASK is 0 (not present for v3.5.1) */

 Offset the buffer to make space for skb headroom */

 transaction owns page now */

/**

 * ipa_endpoint_replenish() - Replenish endpoint receive buffers

 * @endpoint:	Endpoint to be replenished

 * @add_one:	Whether this is replacing a just-consumed buffer

 *

 * The IPA hardware can hold a fixed number of receive buffers for an RX

 * endpoint, based on the number of entries in the underlying channel ring

 * buffer.  If an endpoint's "backlog" is non-zero, it indicates how many

 * more receive buffers can be supplied to the hardware.  Replenishing for

 * an endpoint can be disabled, in which case requests to replenish a

 * buffer are "saved", and transferred to the backlog once it is re-enabled

 * again.

 The last one didn't succeed, so fix the backlog */

	/* Whenever a receive buffer transaction completes we'll try to

	 * replenish again.  It's unlikely, but if we fail to supply even

	 * one buffer, nothing will trigger another replenish attempt.

	 * Receive buffer transactions use one TRE, so schedule work to

	 * try replenishing again if our backlog is *all* available TREs.

 Start replenishing if hardware currently has no buffers */

 Now receive it, or drop it if there's no netdev */

 Nothing to do if there's no netdev */

 Reserve the headroom and account for the data */

 Receive the buffer (or record drop if unable to build it) */

/* The format of a packet status element is the same for several status

 * types (opcodes).  Other types aren't currently supported.

 Don't skip this packet, process it */

 No valid tag */

	/* The status contains a valid tag.  We know the packet was sent to

	 * this endpoint (already verified by ipa_endpoint_status_skip()).

	 * If the packet came from the AP->command TX endpoint we know

	 * this packet was sent as part of the pipeline clear process.

 Return whether the status indicates the packet should be dropped */

 If the status indicates a tagged transfer, we'll drop the packet */

 Deaggregation exceptions we drop; all other types we consume */

 Drop the packet if it fails to match a routing rule; otherwise no */

 Skip over status packets that lack packet data */

		/* Compute the amount of buffer space consumed by the packet,

		 * including the status element.  If the hardware is configured

		 * to pad packet data to an aligned boundary, account for that.

		 * And if checksum offload is enabled a trailer containing

		 * computed checksum information will be appended.

 Client receives only packet data (no status) */

			/* Have the true size reflect the extra unused space in

			 * the original receive buffer.  Distribute the "cost"

			 * proportionately across all aggregated packets in the

			 * buffer.

 Consume status and the full packet it describes */

 Complete a TX transaction, command or from ipa_endpoint_skb_tx() */

 Complete transaction initiated in ipa_endpoint_replenish_one() */

 Parse or build a socket buffer using the actual received length */

 Pages have been consumed */

 Nothing to do for command transactions */

 ROUTE_DIS is 0 */

/**

 * ipa_endpoint_reset_rx_aggr() - Reset RX endpoint with aggregation active

 * @endpoint:	Endpoint to be reset

 *

 * If aggregation is active on an RX endpoint when a reset is performed

 * on its underlying GSI channel, a special sequence of actions must be

 * taken to ensure the IPA pipeline is properly cleared.

 *

 * Return:	0 if successful, or a negative error code

 Force close aggregation before issuing the reset */

	/* Reset and reconfigure the channel with the doorbell engine

	 * disabled.  Then poll until we know aggregation is no longer

	 * active.  We'll re-enable the doorbell (if appropriate) when

	 * we reset again below.

 Make sure the channel isn't suspended */

 Start channel and do a 1 byte read */

 Wait for aggregation to be closed on the channel */

 Check one last time */

	/* Finally, reset and reconfigure the channel again (re-enabling

	 * the doorbell engine if appropriate).  Sleep for 1 millisecond to

	 * complete the channel reset sequence.  Finish by suspending the

	 * channel again (if necessary).

	/* On IPA v3.5.1, if an RX endpoint is reset while aggregation

	 * is active, we need to handle things specially to recover.

	 * All other cases just need to reset the underlying GSI channel.

 Note that if stop fails, the channel's state is not well-defined */

 Only AP endpoints get set up */

		/* RX transactions require a single TRE, so the maximum

		 * backlog is the same as the maximum outstanding TREs.

	/* Prior to IPAv3.5, the FLAVOR_0 register was not supported.

	 * Furthermore, the endpoints were not grouped such that TX

	 * endpoint numbers started with 0 and RX endpoints had numbers

	 * higher than all TX endpoints, so we can't do the simple

	 * direction check used for newer hardware below.

	 *

	 * For hardware that doesn't support the FLAVOR_0 register,

	 * just set the available mask to support any endpoint, and

	 * assume the configuration is valid.

	/* Find out about the endpoints supplied by the hardware, and ensure

	 * the highest one doesn't exceed the number we support.

 Our RX is an IPA producer */

 Our TX is an IPA consumer */

 Check for initialized endpoints not supported by the hardware */

 Report other errors too */

 Make sure it's pointing in the right direction */

 Nothing more to do */

 Returns a bitmask of endpoints that support filtering, or 0 on error */

 Error */

 Skip over empty slots */

 Non-zero bitmask */

 Error */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2012-2018, The Linux Foundation. All rights reserved.

 * Copyright (C) 2018-2021 Linaro Ltd.

/**

 * DOC: IPA Filter and Route Tables

 *

 * The IPA has tables defined in its local (IPA-resident) memory that define

 * filter and routing rules.  An entry in either of these tables is a little

 * endian 64-bit "slot" that holds the address of a rule definition.  (The

 * size of these slots is 64 bits regardless of the host DMA address size.)

 *

 * Separate tables (both filter and route) used for IPv4 and IPv6.  There

 * are normally another set of "hashed" filter and route tables, which are

 * used with a hash of message metadata.  Hashed operation is not supported

 * by all IPA hardware (IPA v4.2 doesn't support hashed tables).

 *

 * Rules can be in local memory or in DRAM (system memory).  The offset of

 * an object (such as a route or filter table) in IPA-resident memory must

 * 128-byte aligned.  An object in system memory (such as a route or filter

 * rule) must be at an 8-byte aligned address.  We currently only place

 * route or filter rules in system memory.

 *

 * A rule consists of a contiguous block of 32-bit values terminated with

 * 32 zero bits.  A special "zero entry" rule consisting of 64 zero bits

 * represents "no filtering" or "no routing," and is the reset value for

 * filter or route table rules.

 *

 * Each filter rule is associated with an AP or modem TX endpoint, though

 * not all TX endpoints support filtering.  The first 64-bit slot in a

 * filter table is a bitmap indicating which endpoints have entries in

 * the table.  The low-order bit (bit 0) in this bitmap represents a

 * special global filter, which applies to all traffic.  This is not

 * used in the current code.  Bit 1, if set, indicates that there is an

 * entry (i.e. slot containing a system address referring to a rule) for

 * endpoint 0 in the table.  Bit 3, if set, indicates there is an entry

 * for endpoint 2, and so on.  Space is set aside in IPA local memory to

 * hold as many filter table entries as might be required, but typically

 * they are not all used.

 *

 * The AP initializes all entries in a filter table to refer to a "zero"

 * entry.  Once initialized the modem and AP update the entries for

 * endpoints they "own" directly.  Currently the AP does not use the

 * IPA filtering functionality.

 *

 *                    IPA Filter Table

 *                 ----------------------

 * endpoint bitmap | 0x0000000000000048 | Bits 3 and 6 set (endpoints 2 and 5)

 *                 |--------------------|

 * 1st endpoint    | 0x000123456789abc0 | DMA address for modem endpoint 2 rule

 *                 |--------------------|

 * 2nd endpoint    | 0x000123456789abf0 | DMA address for AP endpoint 5 rule

 *                 |--------------------|

 * (unused)        |                    | (Unused space in filter table)

 *                 |--------------------|

 *                          . . .

 *                 |--------------------|

 * (unused)        |                    | (Unused space in filter table)

 *                 ----------------------

 *

 * The set of available route rules is divided about equally between the AP

 * and modem.  The AP initializes all entries in a route table to refer to

 * a "zero entry".  Once initialized, the modem and AP are responsible for

 * updating their own entries.  All entries in a route table are usable,

 * though the AP currently does not use the IPA routing functionality.

 *

 *                    IPA Route Table

 *                 ----------------------

 * 1st modem route | 0x0001234500001100 | DMA address for first route rule

 *                 |--------------------|

 * 2nd modem route | 0x0001234500001140 | DMA address for second route rule

 *                 |--------------------|

 *                          . . .

 *                 |--------------------|

 * Last modem route| 0x0001234500002280 | DMA address for Nth route rule

 *                 |--------------------|

 * 1st AP route    | 0x0001234500001100 | DMA address for route rule (N+1)

 *                 |--------------------|

 * 2nd AP route    | 0x0001234500001140 | DMA address for next route rule

 *                 |--------------------|

 *                          . . .

 *                 |--------------------|

 * Last AP route   | 0x0001234500002280 | DMA address for last route rule

 *                 ----------------------

 Assignment of route table entries to the modem and AP */

/* Filter or route rules consist of a set of 32-bit values followed by a

 * 32-bit all-zero rule list terminator.  The "zero rule" is simply an

 * all-zero rule followed by the list terminator.

 Check things that can be validated at build time. */

	/* Filter and route tables contain DMA addresses that refer

	 * to filter or route rules.  But the size of a table entry

	 * is 64 bits regardless of what the size of an AP DMA address

	 * is.  A fixed constant defines the size of an entry, and

	 * code in ipa_table_init() uses a pointer to __le64 to

	 * initialize tables.

	/* A "zero rule" is used to represent no filtering or no routing.

	 * It is a 64-bit block of zeroed memory.  Code in ipa_table_init()

	 * assumes that it can be written using a pointer to __le64.

 Impose a practical limit on the number of routes */

 The modem must be allotted at least one route table entry */

 But it can't have more than what is available */

 mem->size >= size is sufficient, but we'll demand more */

 Hashed table regions can be zero size if hashing is not supported */

 Verify the filter and route table memory regions are the expected size */

 Zero entry count means no table, so just return a 0 address */

 Skip over the zero rule and possibly the filter mask */

 Nothing to do if the table memory region is empty */

 skip over bitmap */

/* Reset entries in a single filter table belonging to either the AP or

 * modem to refer to the zero entry.  The memory region supplied will be

 * for the IPv4 and IPv6 non-hashed and hashed filter tables.

/* Theoretically, each filter table could have more filter slots to

 * update than the maximum number of commands in a transaction.  So

 * we do each table separately.

/* The AP routes and modem routes are each contiguous within the

 * table.  We can update each table with a single command, and we

 * won't exceed the per-transaction command limit.

 Report errors, but reset filter and route tables */

	/* The number of filtering endpoints determines number of entries

	 * in the filter table.  The hashed and non-hashed filter table

	 * will have the same number of entries.  The size of the route

	 * table region determines the number of entries it has.

 Include one extra "slot" to hold the filter map itself */

/**

 * ipa_filter_tuple_zero() - Zero an endpoint's hashed filter tuple

 * @endpoint:	Endpoint whose filter hash tuple should be zeroed

 *

 * Endpoint must be for the AP (not modem) and support filtering. Updates

 * the filter hash values without changing route ones.

 Zero all filter-related fields, preserving the rest */

 Configure a hashed filter table; there is no ipa_filter_deconfig() */

/**

 * ipa_route_tuple_zero() - Zero a hashed route table entry tuple

 * @ipa:	IPA pointer

 * @route_id:	Route table entry whose hash tuple should be zeroed

 *

 * Updates the route hash values without changing filter ones.

 Zero all route-related fields, preserving the rest */

 Configure a hashed route table; there is no ipa_route_deconfig() */

 Configure a filter and route tables; there is no ipa_table_deconfig() */

/*

 * Initialize a coherent DMA allocation containing initialized filter and

 * route table data.  This is used when initializing or resetting the IPA

 * filter or route table.

 *

 * The first entry in a filter table contains a bitmap indicating which

 * endpoints contain entries in the table.  In addition to that first entry,

 * there are at most IPA_FILTER_COUNT_MAX entries that follow.  Filter table

 * entries are 64 bits wide, and (other than the bitmap) contain the DMA

 * address of a filter rule.  A "zero rule" indicates no filtering, and

 * consists of 64 bits of zeroes.  When a filter table is initialized (or

 * reset) its entries are made to refer to the zero rule.

 *

 * Each entry in a route table is the DMA address of a routing rule.  For

 * routing there is also a 64-bit "zero rule" that means no routing, and

 * when a route table is initialized or reset, its entries are made to refer

 * to the zero rule.  The zero rule is shared for route and filter tables.

 *

 * Note that the IPA hardware requires a filter or route rule address to be

 * aligned on a 128 byte boundary.  The coherent DMA buffer we allocate here

 * has a minimum alignment, and we place the zero rule at the base of that

 * allocated space.  In ipa_table_init() we verify the minimum DMA allocation

 * meets our requirement.

 *

 *	     +-------------------+

 *	 --> |     zero rule     |

 *	/    |-------------------|

 *	|    |     filter mask   |

 *	|\   |-------------------|

 *	| ---- zero rule address | \

 *	|\   |-------------------|  |

 *	| ---- zero rule address |  |	IPA_FILTER_COUNT_MAX

 *	|    |-------------------|   >	or IPA_ROUTE_COUNT_MAX,

 *	|	      ...	    |	whichever is greater

 *	 \   |-------------------|  |

 *	  ---- zero rule address | /

 *	     +-------------------+

	/* The IPA hardware requires route and filter table rules to be

	 * aligned on a 128-byte boundary.  We put the "zero rule" at the

	 * base of the table area allocated here.  The DMA address returned

	 * by dma_alloc_coherent() is guaranteed to be a power-of-2 number

	 * of pages, which satisfies the rule alignment requirement.

 First slot is the zero rule */

	/* Next is the filter table bitmap.  The "soft" bitmap value

	 * must be converted to the hardware representation by shifting

	 * it left one position.  (Bit 0 repesents global filtering,

	 * which is possible but not used.)

 All the rest contain the DMA address of the zero rule */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2012-2018, The Linux Foundation. All rights reserved.

 * Copyright (C) 2019-2021 Linaro Ltd.

 "Canary" value placed between memory regions to detect overflow */

 SMEM host id representing the modem. */

 Add an immediate command to a transaction that zeroes a memory region */

/**

 * ipa_mem_setup() - Set up IPA AP and modem shared memory areas

 * @ipa:	IPA pointer

 *

 * Set up the shared memory regions in IPA local memory.  This involves

 * zero-filling memory regions, and in the case of header memory, telling

 * the IPA where it's located.

 *

 * This function performs the initial setup of this memory.  If the modem

 * crashes, its regions are re-zeroed in ipa_mem_zero_modem().

 *

 * The AP informs the modem where its portions of memory are located

 * in a QMI exchange that occurs at modem startup.

 *

 * There is no need for a matching ipa_mem_teardown() function.

 *

 * Return:	0 if successful, or a negative error code

	/* Get a transaction to define the header memory region and to zero

	 * the processing context and modem memory regions.

	/* Initialize IPA-local header memory.  The AP header region, if

	 * present, is contiguous with and follows the modem header region,

	 * and they are initialized together.

 Tell the hardware where the processing context area is located */

 Is the given memory region ID is valid for the current IPA version? */

 pseudo region */

 Must the given memory region be present in the configuration? */

 Anything else is optional */

 Make sure the memory region is valid for this version of IPA */

 Other than modem memory, sizes must be a multiple of 8 */

 Verify each defined memory region is valid. */

 Defined regions have non-zero size and/or canary count */

 Now see if any required regions are not defined */

 Do all memory regions fit within the IPA local memory? */

/**

 * ipa_mem_config() - Configure IPA shared memory

 * @ipa:	IPA pointer

 *

 * Return:	0 if successful, or a negative error code

 Check the advertised location and size of the shared memory area */

 The fields in the register are in 8 byte units */

 Make sure the end is within the region's mapped space */

 If the sizes don't match, issue a warning */

 We know our memory size; make sure regions are all in range */

 Prealloc DMA memory for zeroing regions */

	/* For each defined region, write "canary" values in the

	 * space prior to the region's base address if indicated.

 Write canary values in the space before the region */

 Make sure filter and route table memory regions are valid */

 Validate memory-related properties relevant to immediate commands */

 Verify the microcontroller ring alignment (if defined) */

 Inverse of ipa_mem_config() */

/**

 * ipa_mem_zero_modem() - Zero IPA-local memory regions owned by the modem

 * @ipa:	IPA pointer

 *

 * Zero regions of IPA-local memory used by the modem.  These are configured

 * (and initially zeroed) by ipa_mem_setup(), but if the modem crashes and

 * restarts via SSR we need to re-initialize them.  A QMI message tells the

 * modem where to find regions of IPA local memory it needs to know about

 * (these included).

	/* Get a transaction to zero the modem memory, modem header,

	 * and modem processing context regions.

/**

 * ipa_imem_init() - Initialize IMEM memory used by the IPA

 * @ipa:	IPA pointer

 * @addr:	Physical address of the IPA region in IMEM

 * @size:	Size (bytes) of the IPA region in IMEM

 *

 * IMEM is a block of shared memory separate from system DRAM, and

 * a portion of this memory is available for the IPA to use.  The

 * modem accesses this memory directly, but the IPA accesses it

 * via the IOMMU, using the AP's credentials.

 *

 * If this region exists (size > 0) we map it for read/write access

 * through the IOMMU using the IPA device.

 *

 * Note: @addr and @size are not guaranteed to be page-aligned.

 IMEM memory not used */

 Align the address down and the size up to page boundaries */

 We just want a direct mapping */

/**

 * ipa_smem_init() - Initialize SMEM memory used by the IPA

 * @ipa:	IPA pointer

 * @item:	Item ID of SMEM memory

 * @size:	Size (bytes) of SMEM memory region

 *

 * SMEM is a managed block of shared DRAM, from which numbered "items"

 * can be allocated.  One item is designated for use by the IPA.

 *

 * The modem accesses SMEM memory directly, but the IPA accesses it

 * via the IOMMU, using the AP's credentials.

 *

 * If size provided is non-zero, we allocate it and map it for

 * access through the IOMMU.

 *

 * Note: @size and the item address are is not guaranteed to be page-aligned.

 SMEM memory not used */

	/* SMEM is memory shared between the AP and another system entity

	 * (in this case, the modem).  An allocation from SMEM is persistent

	 * until the AP reboots; there is no way to free an allocated SMEM

	 * region.  Allocation only reserves the space; to use it you need

	 * to "get" a pointer it (this does not imply reference counting).

	 * The item might have already been allocated, in which case we

	 * use it unless the size isn't what we expect.

 Now get the address of the SMEM memory region */

 In case the region was already allocated, verify the size */

 Align the address down and the size up to a page boundary */

 We just want a direct mapping */

 Perform memory region-related initialization */

 Make sure the set of defined memory regions is valid */

 Inverse of ipa_mem_init() */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Microchip MRF24J40 802.15.4 Wireless-PAN Networking controller

 *

 * Copyright (C) 2012 Alan Ott <alan@signal11.us>

 *                    Signal 11 Software

 MRF24J40 Short Address Registers */

 Receive MAC control */

 PAN ID (low) */

 PAN ID (high) */

 Short address (low) */

 Short address (high) */

 Long address (low) (high is EADR7) */

 Transmit MAC control */

 Power Amplifier Control */

 Power Amplifier Control */

 Power Amplifier Control */

 Transmit Normal FIFO Control */

 TX MAC Status Register */

 Soft Reset */

 TX Stabilization */

 Interrupt Status */

 Interrupt Control */

 GPIO */

 GPIO direction */

 RF Control Mode Register */

 Baseband Registers */

 */

 */

 Energy Detection Threshold */

 MRF24J40 Long Address Registers */

 RF Control Registers */

 Sleep Clock Control Registers */

 Wake-up Time Match Value Low */

 Wake-up Time Match Value High */

 Test mode */

 Receive FIFO */

 Device configuration: Only channels 11-26 on page 0 are supported. */

 From datasheet */

 From datasheet */

 From datasheet */

 Device Private Data */

 for writing txfifo */

 post transmit message to send frame out  */

 for protect/unprotect/read length rxfifo */

 receive handling */

 isr handling for reading intstat */

 regmap information for short address register access */

 regmap information for long address register access */

 Read/Write SPI Commands for Short and Long Address registers. */

 The datasheet indicates the theoretical maximum for SCK to be 10MHz */

 all writeable are also readable */

 readonly regs */

 can be changed during runtime */

 use them in spi_async and regmap so it's volatile */

 don't clear irq line on read */

 all writeable are also readable */

 readonly regs */

 can be changed during runtime */

	/* regmap supports read/write mask only in frist byte

	 * long write access need to set the 12th bit, so we

	 * make special handling for write.

/* This function relies on an undocumented write method. Once a write command

   and address is set, as many bytes of data as desired can be clocked into

 Range check the length. 2 bytes are used for the length fields.*/

 Header Length. Set to 0 for now. TODO */

 Total length */

 TODO: */

 Clear TXNIE and RXIE. Enable interrupts */

 Set TXNIE and RXIE. Disable Interrupts */

 Set Channel TODO */

 RF Reset */

 per datasheet */

 Short Addr */

 Device Address */

 PAN ID */

 Pan Coordinator */

		/* REG_SLOTTED is maintained as default (unslotted/CSMA-CA).

		 * REG_ORDER is maintained as default (no beacon/superframe).

 Turn back on reception of packets off the air. */

 CLR RXDECINV */

 if length is invalid read the full MTU */

 read the length of received frame */

	/* Turn off reception of packets off the air. This prevents the

	 * device from overwriting the buffer while we're reading it.

 SET RXDECINV */

 min_be */

 csma backoffs */

 mapping 802.15.4 to driver spec */

 array for representing ed levels */

 map ed levels to register value */

 set PROMI, ERRPKT and NOACKRSP */

 clear PROMI, ERRPKT and NOACKRSP */

 Ignore Rx security decryption */

 Check for TX complete */

 Check for Rx */

 Read the interrupt status */

	/* Initialize the device.

 Set RX Mode. RXMCR<1:0>: 0x0 normal, 0x1 promisc, 0x2 error */

		/* Enable external amplifier.

		 * From MRF24J40MC datasheet section 1.3: Operation.

 Set GPIO3 as output. */

 Set GPIO3 HIGH to enable U5 voltage regulator */

		/* Reduce TX pwr to meet FCC requirements.

		 * From MRF24J40MC datasheet section 3.1.1

 set interrupt polarity to rising */

 default is falling edge */

 mrf24j40 supports max_minbe 0 - 3 */

	/* datasheet doesn't say anything about max_be, but we have min_be

	 * So we assume the max_be default.

 Register with the 802154 subsystem */

 request IRQF_TRIGGER_LOW as fallback default */

	/* TODO: Will ieee802154_free_device() wait until ->xmit() is

 SPDX-License-Identifier: GPL-2.0-only

/*

 * atusb.c - Driver for the ATUSB IEEE 802.15.4 dongle

 *

 * Written 2013 by Werner Almesberger <werner@almesberger.net>

 *

 * Copyright (c) 2015 - 2016 Stefan Schmidt <stefan@datenfreihafen.org>

 *

 * Based on at86rf230.c and spi_atusb.c.

 * at86rf230.c is

 * Copyright (C) 2009 Siemens AG

 * Written by: Dmitry Eremin-Solenikov <dmitry.baryshkov@siemens.com>

 *

 * spi_atusb.c is

 * Copyright (c) 2011 Richard Sharpe <realrichardsharpe@gmail.com>

 * Copyright (c) 2011 Stefan Schmidt <stefan@datenfreihafen.org>

 * Copyright (c) 2011 Werner Almesberger <werner@almesberger.net>

 *

 * USB initialization is

 * Copyright (c) 2013 Alexander Aring <alex.aring@gmail.com>

 *

 * Busware HUL support is

 * Copyright (c) 2017 Josef Filzmaier <j.filzmaier@gmx.at>

 JEDEC manufacturer ID */

 allow for a bit of local latency */

 delay after failed allocation */

 on the air timeout */

 non-zero if shutting down */

 set by first error */

 RX variables */

 memory allocations */

 URBs waiting to be submitted */

 URBs waiting for reception */

 TX variables */

 current TX ACK sequence number */

 Firmware variable */

 Firmware major version number */

 Firmware minor version number */

 Firmware hardware type */

 ----- USB commands without data ----------------------------------------- */

/* To reduce the number of error checks in the code, we record the first error

 * in atusb->err and reject all subsequent requests until the error is cleared.

	/* Write the value only into that part of the register which is allowed

	 * by the mask. All other bits stay as before.

 ----- skb allocation ---------------------------------------------------- */

 PHR+PSDU+CRC+LQI */

 ----- Asynchronous USB -------------------------------------------------- */

 TODO check for ifs handling in firmware */

		/* TODO I experience this case when atusb has a tx complete

		 * irq before probing, we should fix the firmware it's an

		 * unlikely case now that seq == expect is then true, but can

		 * happen and fail with a tx_skb = NULL;

 remove PHR */

 get payload only */

 skb is gone */

 being killed */

 ----- URB allocation/deallocation --------------------------------------- */

 ----- IEEE 802.15.4 interface operations -------------------------------- */

 mapping 802.15.4 to driver spec */

 @@@ ugly synchronization */

	/* This sets the symbol_duration according frequency on the 212.

	 * TODO move this handling while set channel and page in cfg802154.

	 * We can do that, this timings are according 802.15.4 standard.

	 * If we do that in cfg802154, this is a more generic calculation.

	 *

	 * This should also protected from ifs_timer. Means cancel timer and

	 * init with a new value. For now, this is okay.

 SUB:0 and BPSK:0 -> BPSK-20 */

 SUB:1 and BPSK:0 -> BPSK-40 */

 SUB:0 and BPSK:1 -> OQPSK-100/200/400 */

 SUB:1 and BPSK:1 -> OQPSK-250/500/1000 */

 ----- Firmware and chip version information ----------------------------- */

 Get a couple of the ATMega Firmware values */

 reset default */

 reset default */

	/* Firmware versions before 0.3 do not support the EUI64_READ command.

	 * Just use a random address and be done.

 Firmware is new enough so we fetch the address from EEPROM */

 Check if read address is not empty and the unicast bit is set correctly */

 ----- Setup ------------------------------------------------------------- */

	/* If we just powered on, we're now in P_ON and need to enter TRX_OFF

	 * explicitly. Any resets after that will send us straight to TRX_OFF,

	 * making the command below redundant.

 reset => TRX_OFF, tTR13 = 37 us */

	/* Calculating the maximum time available to empty the frame buffer

	 * on reception:

	 *

	 * According to [1], the inter-frame gap is

	 * R * 20 * 16 us + 128 us

	 * where R is a random number from 0 to 7. Furthermore, we have 20 bit

	 * times (80 us at 250 kbps) of SHR of the next frame before the

	 * transceiver begins storing data in the frame buffer.

	 *

	 * This yields a minimum time of 208 us between the last data of a

	 * frame and the first data of the next frame. This time is further

	 * reduced by interrupt latency in the atusb firmware.

	 *

	 * atusb currently needs about 500 us to retrieve a maximum-sized

	 * frame. We therefore have to allow reception of a new frame to begin

	 * while we retrieve the previous frame.

	 *

	 * [1] "JN-AN-1035 Calculating data rates in an IEEE 802.15.4-based

	 *      network", Jennic 2006.

	 *     http://www.jennic.com/download_file.php?supportFile=JN-AN-1035%20Calculating%20802-15-4%20Data%20Rates-1v0.pdf

 The devices we work with */

 end with null element */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * HWSIM IEEE 802.15.4 interface

 *

 * (C) 2018 Mojatau, Alexander Aring <aring@mojatau.com>

 * Copyright 2007-2012 Siemens AG

 *

 * Based on fakelb, original Written by:

 * Sergey Lapin <slapin@ossfans.org>

 * Dmitry Eremin-Solenikov <dbaryshkov@gmail.com>

 * Alexander Smirnov <alex.bluesman.smirnov@gmail.com>

 MAC802154_HWSIM netlink family */

		/* Can be changed later in rx_irqsafe, but this is only a

		 * performance tweak. Received radio should drop the frame

		 * in mac802154 stack anyway... so we don't need to be

		 * 100% of locking here to check on suspended

 caller need to held hwsim_phys_lock */

	/* wait until changes are done under hwsim_phys_lock lock

	 * should prevent of calling this function twice while

	 * edges list has not the changes yet.

 same again - wait until list changes are done */

 MAC802154_HWSIM netlink policy */

 Generic Netlink operations array */

 going to all phy edges and remove phy from it */

 868 MHz BPSK	802.15.4-2003 */

 915 MHz BPSK	802.15.4-2003 */

 2.4 GHz O-QPSK 802.15.4-2003 */

 868 MHz ASK 802.15.4-2006 */

 915 MHz ASK 802.15.4-2006 */

 868 MHz O-QPSK 802.15.4-2006 */

 915 MHz O-QPSK 802.15.4-2006 */

 2.4 GHz CSS 802.15.4a-2007 */

 UWB Sub-gigahertz 802.15.4a-2007 */

 UWB Low band 802.15.4a-2007 */

 UWB High band 802.15.4a-2007 */

 750 MHz O-QPSK 802.15.4c-2009 */

 750 MHz MPSK 802.15.4c-2009 */

 950 MHz BPSK 802.15.4d-2009 */

 950 MHz GFSK 802.15.4d-2009 */

 hwsim phy channel 13 as default */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for NXP MCR20A 802.15.4 Wireless-PAN Networking controller

 *

 * Copyright (C) 2018 Xue Liu <liuxuenetmail@gmail.com>

 Number of Interrupt Request Status Register */

 only IRQ_STS1 and IRQ_STS2 */

 MCR20A CCA Type */

 energy detect - CCA bit not active,

 not to be used for T and CCCA sequences

 energy detect - CCA bit ACTIVE

 802.15.4 compliant signal detect - CCA bit ACTIVE

 IEEE-802.15.4 defined constants (2.4 GHz logical channels) */

 MCR20A CCA Threshold constans */

 version 0C */

 MCR20A PLL configurations */

 2405 */ 0x0B,	 2415 */ 0x0B,

 2420 */ 0x0B,	 2430 */ 0x0B,

 2435 */ 0x0C,	 2445 */ 0x0C,

 2450 */ 0x0C,	 2460 */ 0x0C,

 2465 */ 0x0D,	 2475 */ 0x0D,

 2480 */ 0x0D

 2405 */ 0x28,	 2415 */ 0x78,

 2420 */ 0xA0,	 2430 */ 0xF0,

 2435 */ 0x18,	 2445 */ 0x68,

 2450 */ 0x90,	 2460 */ 0xE0,

 2465 */ 0x08,	 2475 */ 0x58,

 2480 */ 0x80

 regmap information for Direct Access Register (DAR) access */

 regmap information for Indirect Access Register (IAR) access */

 Read/Write SPI Commands for DAR and IAR registers. */

 Type definitions for link configuration of instantiable layers  */

 no DAR_ACM */

 all writeable are also readable */

 readonly regs */

 can be changed during runtime */

 use them in spi_async and regmap so it's volatile */

 don't clear irq line on read */

 all writeable are also readable */

 readonly regs */

 can be changed during runtime */

 for writing tx buffer */

 burst buffer write command */

 len of tx packet */

 data of tx packet */

 for read length rxfifo */

 receive handling */

 isr handling for reading intstat */

 freqency = ((PLL_INT+64) + (PLL_FRAC/65536)) * 32 MHz */

 No slotted operation */

 enable irq */

 Unmask SEQ interrupt */

 Start the RX sequence */

 stop all running sequence */

 disable irq */

 -30 dBm to 10 dBm */

 mapping 802.15.4 to driver spec */

 All frame types accepted*/

 Start the RX sequence */

 get rid of frame check field */

 start RX sequence */

 get the length of received frame */

 prepare to read the rx buf */

 write tx buffer */

 add 2 bytes of FCS */

 add 1 byte psduLength */

 TX IRQ, RX IRQ and SEQ IRQ */

 rx is starting */

 tx is done */

 rx is starting */

 read IRQSTSx */

 initiating cca_ed_levels */

 MCR20A default reset value */

 Disable Tristate on COCO MISO for SPI reads */

	/* Clear all PP IRQ bits in IRQSTS1 to avoid unexpected interrupts

	 * immediately after init

 Clear all PP IRQ bits in IRQSTS2 */

 Disable all timer interrupts */

  PHY_CTRL1 : default HW settings + AUTOACK enabled */

  PHY_CTRL2 : disable all interrupts */

 PHY_CTRL3 : disable all timers and remaining interrupts */

	/* SRC_CTRL : enable Acknowledge Frame Pending and

	 * Source Address Matching Enable

  RX_FRAME_FILTER */

  FRM_VER[1:0] = b11. Accept FrameVersion 0 and 1 packets */

 Overwrites direct registers  */

 Overwrites indirect registers  */

 Clear HW indirect queue */

 Assign HW Indirect hash table to PAN0 */

 Clear current lvl */

 Set new lvl */

 Set CCA threshold to -75 dBm */

 Set prescaller to obtain 1 symbol (16us) timebase */

 Enable autodoze mode. */

 Disable clk_out */

 reset mcr20a */

 allocate ieee802154_hw and private data */

 init mcr20a local data */

 init ieee802154_hw */

 init buf */

 setup regmap */

 disable_irq by default and wait for starting hardware */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Analog Devices ADF7242 Low-Power IEEE 802.15.4 Transceiver

 *

 * Copyright 2009-2017 Analog Devices Inc.

 *

 * https://www.analog.com/ADF7242

 All Registers */

 RW External LNA/PA and internal PA control */

 RW TX FSK test mode configuration */

 RW RSSI threshold for CCA */

 RW CCA mode configuration */

 RW RX_BUFFER overwrite control */

 RW FCS evaluation configuration */

 RW RC_RX command to SFD or sync word delay */

 RW RC_TX command to TX state */

 RW Mac delay extension */

 RW sync word bits [7:0] of [23:0]  */

 RW sync word bits [15:8] of [23:0]  */

 RW sync word bits [23:16] of [23:0]	*/

 RW sync word configuration */

 RW RX / TX packet configuration */

 RW RESERVED */

 RW Channel Frequency Settings - Low */

 RW Channel Frequency Settings - Middle */

 RW Channel Frequency Settings - High */

 RW TX Frequency Deviation Register */

 RW RX Discriminator BW Register */

 RW TX Mode Register */

 RW RX Mode Register */

 R RSSI Readback Register */

 R Link Quality Readback Register */

 RW bits [15:8] of [15:0] data rate setting */

 RW bits [7:0] of [15:0] data rate setting */

 RW RESERVED */

 RW TX Packet Storage Base Address */

 RW RX Packet Storage Base Address */

 RW Wake up Timer Conf Register - High */

 RW Wake up Timer Conf Register - Low */

 RW Wake up Timer Value Register - High */

 RW Wake up Timer Value Register - Low  */

 RW Wake up Timer Timeout flag */

 RW Battmon enable */

 RW GPIO Configuration */

 RW GPIO Configuration */

 R GPIO Configuration */

 RW bandwidth calibration timers */

 RW Calibration Settings */

 RW PA BIAS */

 RW Oscillator and Doubler Configuration */

 RW BB Filter Decimation Rate */

 RW CDR kVCO */

 RW Postdemodulator Filter */

 R RXBB Ref Osc Calibration Engine Readback */

 RW RX BB filter tuning, LSB */

 RW RX BB filter tuning, MSB */

 RW RXBB Ref Osc & RXFE Calibration */

 RW Set PA ramp rate */

 RW PA enable */

 RW External PA BIAS DAC */

 RW PA Bias Mode */

 R Readback temp */

 RW GC Parameters */

 RW Slew rate	 */

 RW RSSI Parameters */

 RW RSSI Parameters */

 RW RSSI Parameters */

 RW RSSI & NDEC Parameters */

 RW NDEC Parameters */

 RW OCL System Parameters */

 RW Interrupt Mask set bits for IRQ1 */

 RW Interrupt Mask set bits for IRQ1 */

 RW Interrupt Mask set bits for IRQ2 */

 RW Interrupt Mask set bits for IRQ2 */

 RW Interrupt Source bits for IRQ */

 RW Interrupt Source bits for IRQ */

 RW OCL System Parameters */

 RW OCL System Parameters */

 RW OCL System Parameters */

 RW OCL System Parameters */

 RW OCL System Parameters */

 RW OCL System Parameters */

 RW OCL System Parameters */

 RW I/O pads Configuration and bg trim */

 RW Batt. Monitor Threshold Voltage setting */

 RW Option to set non standard SFD */

 RW AFC mode and polarity */

 RW AFC ki and kp */

 RW AFC range */

 RW Readback frequency error */

 REG_EXTPA_MSC */

 REG_PA_CFG */

 REG_PA_BIAS */

 REG_FFILT_CFG */

 REG_AUTO_CFG */

 REG_AUTO_TX1 */

 REG_AUTO_TX2 */

 No operation. Use for dummy writes */

#define CMD_SPI_PKT_WR		0x10 /* Write telegram to the Packet RAM

				      * starting from the TX packet base address

				      * pointer tx_packet_base

#define CMD_SPI_PKT_RD		0x30 /* Read telegram from the Packet RAM

				      * starting from RX packet base address

				      * pointer rxpb.rx_packet_base

#define CMD_SPI_MEM_WR(x)	(0x18 + (x >> 8)) /* Write data to MCR or

						   * Packet RAM sequentially

#define CMD_SPI_MEM_RD(x)	(0x38 + (x >> 8)) /* Read data from MCR or

						   * Packet RAM sequentially

#define CMD_SPI_MEMR_WR(x)	(0x08 + (x >> 8)) /* Write data to MCR or Packet

						   * RAM as random block

#define CMD_SPI_MEMR_RD(x)	(0x28 + (x >> 8)) /* Read data from MCR or

						   * Packet RAM random block

#define CMD_SPI_PRAM_WR		0x1E /* Write data sequentially to current

				      * PRAM page selected

#define CMD_SPI_PRAM_RD		0x3E /* Read data sequentially from current

				      * PRAM page selected

#define CMD_RC_SLEEP		0xB1 /* Invoke transition of radio controller

				      * into SLEEP state

#define CMD_RC_IDLE		0xB2 /* Invoke transition of radio controller

				      * into IDLE state

#define CMD_RC_PHY_RDY		0xB3 /* Invoke transition of radio controller

				      * into PHY_RDY state

#define CMD_RC_RX		0xB4 /* Invoke transition of radio controller

				      * into RX state

#define CMD_RC_TX		0xB5 /* Invoke transition of radio controller

				      * into TX state

#define CMD_RC_MEAS		0xB6 /* Invoke transition of radio controller

				      * into MEAS state

 Invoke Clear channel assessment */

#define CMD_RC_CSMACA		0xC1 /* initiates CSMA-CA channel access

				      * sequence and frame transmission

 Program counter reset */

#define CMD_RC_RESET		0xC8 /* Resets the ADF7242 and puts it in

				      * the sleep state

 STATUS */

 AUTO_STATUS */

 IRQ1 */

 framework doesn't handle yet */

 protect SPI messages */

	/* DMA (thus cache coherency maintenance) requires the

	 * transfer buffers to live in their own cache lines.

 PHR */

 Wait until the ACK is sent */

	/* Reissuing RC_RX every 400ms - to adjust for offset

	 * drift in receiver (datasheet page 61, OCL section)

 ensure existing instances of the IRQ handler have completed */

 Don't put RSSI/LQI or CRC into the frame */

 save CSMA-CA completion status */

 Invalid packet received - drop it and restart */

		/* This can only be xmit without IRQ, likely a RX packet.

		 * we get an TX IRQ shortly - do nothing or let the xmit

		 * timeout handle this

	/* get ADF7242 addon firmware

	 * build this driver as module

	 * and place under /lib/firmware/adf7242_firmware.bin

	 * or compile firmware into the kernel.

 We support only 2.4 Ghz */

 Setup Status Message */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * AT86RF230/RF231 driver

 *

 * Copyright (C) 2009-2012 Siemens AG

 *

 * Written by:

 * Dmitry Eremin-Solenikov <dbaryshkov@gmail.com>

 * Alexander Smirnov <alex.bluesman.smirnov@gmail.com>

 * Alexander Aring <aar@pengutronix.de>

/* at86rf2xx chip depend data.

 * All timings are in us.

/* tx retries to access the TX_ON state

 * if it's above then force change will be started.

 *

 * We assume the max_frame_retries (7) value of 802.15.4 here.

 We use the recommended 5 minutes timeout to recalibrate */

 awake for register setting if sleep */

 sleep again if was sleeping */

 awake for register setting if sleep */

 sleep again if was sleeping */

 awake for register setting if sleep */

 sleep again if was sleeping */

 all writeable are also readable */

 readonly regs */

 can be changed during runtime */

 don't clear irq line on read */

 Generic function to get some register value in async mode */

 Assert state change */

		/* Special handling if transceiver state is in

		 * STATE_BUSY_RX_AACK and a SHR was detected.

			/* Undocumented race condition. If we send a state

			 * change to STATE_RX_AACK_ON the transceiver could

			 * change his state automatically to STATE_BUSY_RX_AACK

			 * if a SHR was detected. This is not an error, but we

			 * can't assert this.

			/* If we change to STATE_TX_ON without forcing and

			 * transceiver state is STATE_BUSY_RX_AACK, we wait

			 * 'tFrame + tPAck' receiving time. In this time the

			 * PDU should be received. If the transceiver is still

			 * in STATE_BUSY_RX_AACK, we run a force state change

			 * to STATE_TX_ON. This is a timeout handling, if the

			 * transceiver stucks in STATE_BUSY_RX_AACK.

			 *

			 * Additional we do several retries to try to get into

			 * TX_ON state without forcing. If the retries are

			 * higher or equal than AT86RF2XX_MAX_TX_RETRIES we

			 * will do a force change.

 Do state change timing delay. */

	/* The force state changes are will show as normal states in the

	 * state status subregister. We change the to_state to the

	 * corresponding one and remember if it was a force change, this

	 * differs if we do a state change from STATE_BUSY_RX_AACK.

			/* state change from TRX_OFF to RX_AACK_ON to do a

			 * calibration, we need to reset the timeout for the

			 * next one.

			/* state change from TRX_OFF to TX_ON or ARET_ON to do

			 * a calibration, we need to reset the timeout for the

			 * next one.

			/* Wait for worst case receiving time if we

			 * didn't make a force change from BUSY_RX_AACK

			 * to TX_ON or TRX_OFF.

 Default value, means RESET state */

 Default delay is 1us in the most cases */

 Check for "possible" STATE_TRANSITION_IN_PROGRESS */

 Check if we already are in the state which we change in */

 Set current state to the context of state change */

	/* Going into the next step for a state change which do a timing

	 * relevant delay.

 Initialization for the state change context */

/* This function do a sync framework above the async state change.

 * Some callbacks of the IEEE 802.15.4 driver interface need to be

 * handled synchronously.

 tell on error handling to free ctx */

 check if we change from off state */

	/* After 5 minutes in PLL and the same frequency we run again the

	 * calibration loops which is recommended by at86rf2xx datasheets.

	 *

	 * The calibration is initiate by a state change from TRX_OFF

	 * to TX_ON, the lp->cal_timeout should be reinit by state_delay

	 * function then to start in the next 5 minutes.

 reset trac stats on start */

	/* It's recommended to set random new csma_seeds before sleep state.

	 * Makes only sense in the stop callback, not doing this inside of

	 * at86rf230_sleep, this is also used when we don't transmit afterwards

	 * when calling start callback again.

	/* This sets the symbol_duration according frequency on the 212.

	 * TODO move this handling while set channel and page in cfg802154.

	 * We can do that, this timings are according 802.15.4 standard.

	 * If we do that in cfg802154, this is a more generic calculation.

	 *

	 * This should also protected from ifs_timer. Means cancel timer and

	 * init with a new value. For now, this is okay.

 SUB:0 and BPSK:0 -> BPSK-20 */

 SUB:1 and BPSK:0 -> BPSK-40 */

 SUB:0 and BPSK:1 -> OQPSK-100/200/400 */

 SUB:1 and BPSK:1 -> OQPSK-250/500/1000 */

 Wait for PLL */

 mapping 802.15.4 to driver spec */

 reset values differs in at86rf231 and at86rf233 */

 CLKM changes are applied immediately */

 Turn CLKM Off */

 Wait the next SLEEP cycle */

	/* xtal_trim value is calculated by:

	 * CL = 0.5 * (CX + CTRIM + CPAR)

	 *

	 * whereas:

	 * CL = capacitor of used crystal

	 * CX = connected capacitors at xtal pins

	 * CPAR = in all at86rf2xx datasheets this is a constant value 3 pF,

	 *	  but this is different on each board setup. You need to fine

	 *	  tuning this value via CTRIM.

	 * CTRIM = variable capacitor setting. Resolution is 0.3 pF range is

	 *	   0 pF upto 4.5 pF.

	 *

	 * Examples:

	 * atben transceiver:

	 *

	 * CL = 8 pF

	 * CX = 12 pF

	 * CPAR = 3 pF (We assume the magic constant from datasheet)

	 * CTRIM = 0.9 pF

	 *

	 * (12+0.9+3)/2 = 7.95 which is nearly at 8 pF

	 *

	 * xtal_trim = 0x3

	 *

	 * openlabs transceiver:

	 *

	 * CL = 16 pF

	 * CX = 22 pF

	 * CPAR = 3 pF (We assume the magic constant from datasheet)

	 * CTRIM = 4.5 pF

	 *

	 * (22+4.5+3)/2 = 14.75 which is the nearest value to 16 pF

	 *

	 * xtal_trim = 0xf

	/* Force setting slotted operation bit to 0. Sometimes the atben

	 * sets this bit and I don't know why. We set this always force

	 * to zero while probing.

 Reset */

 Read irq status register to reset irq line */

 disable_irq by default and wait for starting hardware */

 going into sleep by default */

 mask all at86rf230 irq's */

/*

 * http://www.cascoda.com/products/ca-821x/

 * Copyright (c) 2016, Cascoda, Ltd.

 * All rights reserved.

 *

 * This code is dual-licensed under both GPLv2 and 3-clause BSD. What follows is

 * the license notice for both respectively.

 *

 *******************************************************************************

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License

 * as published by the Free Software Foundation; either version 2

 * of the License, or (at your option) any later version.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 *******************************************************************************

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions are met:

 *

 * 1. Redistributions of source code must retain the above copyright notice,

 * this list of conditions and the following disclaimer.

 *

 * 2. Redistributions in binary form must reproduce the above copyright notice,

 * this list of conditions and the following disclaimer in the documentation

 * and/or other materials provided with the distribution.

 *

 * 3. Neither the name of the copyright holder nor the names of its contributors

 * may be used to endorse or promote products derived from this software without

 * specific prior written permission.

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"

 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE

 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE

 * POSSIBILITY OF SUCH DAMAGE.

 external clock frequencies */

 spi constants */

 Timeout for synchronous commands [ms] */

 test interface constants */

 MAC status enumerations */

 HWME attribute IDs */

 TDME attribute IDs */

 PHY/MAC PIB Attribute Enumerations */

 Non-standard IEEE address */

 MAC Address Mode Definitions */

 MAC constants */

 MAC workarounds for V1.1 and MPW silicon (V0.x) */

 memory manipulation macros */

 message ID codes in SPI commands */

 downstream */

 upstream */

 SPI command IDs */

 bit indicating a confirm or indication from slave to master */

 bit indicating a synchronous message */

 SPI command definitions */

 TDME SFR addresses */

 Page 0 */

 Page 1 */

 10dB */

 21dB */

 27dB */

 30dB */

 33dB */

 34dB */

 36dB */

 37dB */

 Structs/Enums */

/**

 * struct cas_control - spi transfer structure

 * @msg:                  spi_message for each exchange

 * @transfer:             spi_transfer for each exchange

 * @tx_buf:               source array for transmission

 * @tx_in_buf:            array storing bytes received during transmission

 * @priv:                 pointer to private data

 *

 * This structure stores all the necessary data passed around during a single

 * spi exchange.

/**

 * struct ca8210_test - ca8210 test interface structure

 * @ca8210_dfs_spi_int: pointer to the entry in the debug fs for this device

 * @up_fifo:            fifo for upstream messages

 * @readq:              read wait queue

 *

 * This structure stores all the data pertaining to the debug interface

/**

 * struct ca8210_priv - ca8210 private data structure

 * @spi:                    pointer to the ca8210 spi device object

 * @hw:                     pointer to the ca8210 ieee802154_hw object

 * @hw_registered:          true if hw has been registered with ieee802154

 * @lock:                   spinlock protecting the private data area

 * @mlme_workqueue:           workqueue for triggering MLME Reset

 * @irq_workqueue:          workqueue for irq processing

 * @tx_skb:                 current socket buffer to transmit

 * @nextmsduhandle:         msdu handle to pass to the 15.4 MAC layer for the

 *                           next transmission

 * @clk:                    external clock provided by the ca8210

 * @last_dsn:               sequence number of last data packet received, for

 *                           resend detection

 * @test:                   test interface data section for this instance

 * @async_tx_pending:       true if an asynchronous transmission was started and

 *                           is not complete

 * @sync_command_response:  pointer to buffer to fill with sync response

 * @ca8210_is_awake:        nonzero if ca8210 is initialised, ready for comms

 * @sync_down:              counts number of downstream synchronous commands

 * @sync_up:                counts number of upstream synchronous commands

 * @spi_transfer_complete:  completion object for a single spi_transfer

 * @sync_exchange_complete: completion object for a complete synchronous API

 *                          exchange

 * @promiscuous:            whether the ca8210 is in promiscuous mode or not

 * @retries:                records how many times the current pending spi

 *                          transfer has been retried

/**

 * struct work_priv_container - link between a work object and the relevant

 *                              device's private data

 * @work: work object being executed

 * @priv: device's private data section

 *

/**

 * struct ca8210_platform_data - ca8210 platform data structure

 * @extclockenable: true if the external clock is to be enabled

 * @extclockfreq:   frequency of the external clock

 * @extclockgpio:   ca8210 output gpio of the external clock

 * @gpio_reset:     gpio number of ca8210 reset line

 * @gpio_irq:       gpio number of ca8210 interrupt line

 * @irq_id:         identifier for the ca8210 irq

 *

/**

 * struct fulladdr - full MAC addressing information structure

 * @mode:    address mode (none, short, extended)

 * @pan_id:  16-bit LE pan id

 * @address: LE address, variable length as specified by mode

 *

/**

 * union macaddr: generic MAC address container

 * @short_address: 16-bit short address

 * @ieee_address:  64-bit extended address as LE byte array

 *

/**

 * struct secspec: security specification for SAP commands

 * @security_level: 0-7, controls level of authentication & encryption

 * @key_id_mode:    0-3, specifies how to obtain key

 * @key_source:     extended key retrieval data

 * @key_index:      single-byte key identifier

 *

 downlink functions parameter set definitions */

 uplink functions parameter set definitions */

 reserved */        : 1;

/**

 * link_to_linux_err() - Translates an 802.15.4 return code into the closest

 *                       linux error

 * @link_status:  802.15.4 status code

 *

 * Return: 0 or Linux error code

 status is already a Linux code */

/**

 * ca8210_test_int_driver_write() - Writes a message to the test interface to be

 *                                  read by the userspace

 * @buf:  Buffer containing upstream message

 * @len:  length of message to write

 * @spi:  SPI device of message originator

 *

 * Return: 0 or linux error code

 SPI Operation */

/**

 * ca8210_reset_send() - Hard resets the ca8210 for a given time

 * @spi:  Pointer to target ca8210 spi device

 * @ms:   Milliseconds to hold the reset line low for

 Wait until wakeup indication seen */

/**

 * ca8210_mlme_reset_worker() - Resets the MLME, Called when the MAC OVERFLOW

 *                              condition happens.

 * @work:  Pointer to work being executed

/**

 * ca8210_rx_done() - Calls various message dispatches responding to a received

 *                    command

 * @cas_ctl: Pointer to the cas_control object for the relevant spi transfer

 *

 * Presents a received SAP command from the ca8210 to the Cascoda EVBME, test

 * interface and network driver.

/**

 * ca8210_spi_transfer_complete() - Called when a single spi transfer has

 *                                  completed

 * @context:  Pointer to the cas_control object for the finished transfer

 ca8210 is busy */

/**

 * ca8210_spi_transfer() - Initiate duplex spi transfer with ca8210

 * @spi: Pointer to spi device for transfer

 * @buf: Octet array to send

 * @len: length of the buffer being sent

 *

 * Return: 0 or linux error code

 1 MOSI line */

 1 MISO line */

 Use device setting */

 Use device setting */

/**

 * ca8210_spi_exchange() - Exchange API/SAP commands with the radio

 * @buf:         Octet array of command being sent downstream

 * @len:         length of buf

 * @response:    buffer for storing synchronous response

 * @device_ref:  spi_device pointer for ca8210

 *

 * Effectively calls ca8210_spi_transfer to write buf[] to the spi, then for

 * synchronous commands waits for the corresponding response to be read from

 * the spi before returning. The response is written to the response parameter.

 *

 * Return: 0 or linux error code

 if sync wait for confirm */

/**

 * ca8210_interrupt_handler() - Called when an irq is received from the ca8210

 * @irq:     Id of the irq being handled

 * @dev_id:  Pointer passed by the system, pointing to the ca8210's private data

 *

 * This function is called when the irq line from the ca8210 is asserted,

 * signifying that the ca8210 has a message to send upstream to us. Starts the

 * asynchronous spi read.

 *

 * Return: irq return code

 Cascoda API / 15.4 SAP Primitives */

/**

 * tdme_setsfr_request_sync() - TDME_SETSFR_request/confirm according to API

 * @sfr_page:    SFR Page

 * @sfr_address: SFR Address

 * @sfr_value:   SFR Value

 * @device_ref:  Nondescript pointer to target device

 *

 * Return: 802.15.4 status code of TDME-SETSFR.confirm

/**

 * tdme_chipinit() - TDME Chip Register Default Initialisation Macro

 * @device_ref: Nondescript pointer to target device

 *

 * Return: 802.15.4 status code of API calls

 LNA Gain Settings */

 Preamble Timing Config */

 Preamble Threshold High */

 Tx Output Power 8 dBm */

/**

 * tdme_channelinit() - TDME Channel Register Default Initialisation Macro (Tx)

 * @channel:    802.15.4 channel to initialise chip for

 * @device_ref: Nondescript pointer to target device

 *

 * Return: 802.15.4 status code of API calls

	/* Transceiver front-end local oscillator tx two-point calibration

	 * value. Tuned for the hardware.

 LO Tx Cal */

/**

 * tdme_checkpibattribute() - Checks Attribute Values that are not checked in

 *                            MAC

 * @pib_attribute:        Attribute Number

 * @pib_attribute_length: Attribute length

 * @pib_attribute_value:  Pointer to Attribute Value

 *

 * Return: 802.15.4 status code of checks

 PHY */

 MAC */

 boolean */

 MAC SEC */

/**

 * tdme_settxpower() - Sets the tx power for MLME_SET phyTransmitPower

 * @txp:        Transmit Power

 * @device_ref: Nondescript pointer to target device

 *

 * Normalised to 802.15.4 Definition (6-bit, signed):

 * Bit 7-6: not used

 * Bit 5-0: tx power (-32 - +31 dB)

 *

 * Return: 802.15.4 status code of api calls

 extend from 6 to 8 bit */

 8 dBm: ptrim = 5, itrim = +3 => +4 dBm */

 0 dBm: ptrim = 7, itrim = +3 => -6 dBm */

 write PACFG */

		/* Look-Up Table for Setting Current and Frequency Trim values

		 * for desired Output Power

 < 0 */

 write PACFGIB */

/**

 * mcps_data_request() - mcps_data_request (Send Data) according to API Spec

 * @src_addr_mode:    Source Addressing Mode

 * @dst_address_mode: Destination Addressing Mode

 * @dst_pan_id:       Destination PAN ID

 * @dst_addr:         Pointer to Destination Address

 * @msdu_length:      length of Data

 * @msdu:             Pointer to Data

 * @msdu_handle:      Handle of Data

 * @tx_options:       Tx Options Bit Field

 * @security:         Pointer to Security Structure or NULL

 * @device_ref:       Nondescript pointer to target device

 *

 * Return: 802.15.4 status code of action

 MAC_MODE_LONG_ADDR*/

/**

 * mlme_reset_request_sync() - MLME_RESET_request/confirm according to API Spec

 * @set_default_pib: Set defaults in PIB

 * @device_ref:      Nondescript pointer to target device

 *

 * Return: 802.15.4 status code of MLME-RESET.confirm

 reset COORD Bit for Channel Filtering as Coordinator */

/**

 * mlme_set_request_sync() - MLME_SET_request/confirm according to API Spec

 * @pib_attribute:        Attribute Number

 * @pib_attribute_index:  Index within Attribute if an Array

 * @pib_attribute_length: Attribute length

 * @pib_attribute_value:  Pointer to Attribute Value

 * @device_ref:           Nondescript pointer to target device

 *

 * Return: 802.15.4 status code of MLME-SET.confirm

	/* pre-check the validity of pib_attribute values that are not checked

	 * in MAC

/**

 * hwme_set_request_sync() - HWME_SET_request/confirm according to API Spec

 * @hw_attribute:        Attribute Number

 * @hw_attribute_length: Attribute length

 * @hw_attribute_value:  Pointer to Attribute Value

 * @device_ref:          Nondescript pointer to target device

 *

 * Return: 802.15.4 status code of HWME-SET.confirm

/**

 * hwme_get_request_sync() - HWME_GET_request/confirm according to API Spec

 * @hw_attribute:        Attribute Number

 * @hw_attribute_length: Attribute length

 * @hw_attribute_value:  Pointer to Attribute Value

 * @device_ref:          Nondescript pointer to target device

 *

 * Return: 802.15.4 status code of HWME-GET.confirm

 Network driver operation */

/**

 * ca8210_async_xmit_complete() - Called to announce that an asynchronous

 *                                transmission has finished

 * @hw:          ieee802154_hw of ca8210 that has finished exchange

 * @msduhandle:  Identifier of transmission that has completed

 * @status:      Returned 802.15.4 status code of the transmission

 *

 * Return: 0 or linux error code

/**

 * ca8210_skb_rx() - Contructs a properly framed socket buffer from a received

 *                   MCPS_DATA_indication

 * @hw:        ieee802154_hw that MCPS_DATA_indication was received by

 * @len:       length of MCPS_DATA_indication

 * @data_ind:  Octet array of MCPS_DATA_indication

 *

 * Called by the spi driver whenever a SAP command is received, this function

 * will ascertain whether the command is of interest to the network driver and

 * take necessary action.

 *

 * Return: 0 or linux error code

 Allocate mtu size buffer for every rx packet */

 msdu_length */

 Populate hdr */

 Fill in FC implicitly */

 Data frame */

 Add hdr to front of buffer */

 Add <msdulen> bytes of space to the back of the buffer */

 Copy msdu to skb */

/**

 * ca8210_net_rx() - Acts upon received SAP commands relevant to the network

 *                   driver

 * @hw:       ieee802154_hw that command was received by

 * @command:  Octet array of received command

 * @len:      length of the received command

 *

 * Called by the spi driver whenever a SAP command is received, this function

 * will ascertain whether the command is of interest to the network driver and

 * take necessary action.

 *

 * Return: 0 or linux error code

 Received data */

/**

 * ca8210_skb_tx() - Transmits a given socket buffer using the ca8210

 * @skb:         Socket buffer to transmit

 * @msduhandle:  Data identifier to pass to the 802.15.4 MAC

 * @priv:        Pointer to private data section of target ca8210

 *

 * Return: 0 or linux error code

	/* Get addressing info from skb - ieee802154 layer creates a full

	 * packet

 Pass to Cascoda API */

/**

 * ca8210_start() - Starts the network driver

 * @hw:  ieee802154_hw of ca8210 being started

 *

 * Return: 0 or linux error code

 Turn receiver on when idle for now just to test rx */

/**

 * ca8210_stop() - Stops the network driver

 * @hw:  ieee802154_hw of ca8210 being stopped

 *

 * Return: 0 or linux error code

/**

 * ca8210_xmit_async() - Asynchronously transmits a given socket buffer using

 *                       the ca8210

 * @hw:   ieee802154_hw of ca8210 to transmit from

 * @skb:  Socket buffer to transmit

 *

 * Return: 0 or linux error code

/**

 * ca8210_get_ed() - Returns the measured energy on the current channel at this

 *                   instant in time

 * @hw:     ieee802154_hw of target ca8210

 * @level:  Measured Energy Detect level

 *

 * Return: 0 or linux error code

/**

 * ca8210_set_channel() - Sets the current operating 802.15.4 channel of the

 *                        ca8210

 * @hw:       ieee802154_hw of target ca8210

 * @page:     Channel page to set

 * @channel:  Channel number to set

 *

 * Return: 0 or linux error code

/**

 * ca8210_set_hw_addr_filt() - Sets the address filtering parameters of the

 *                             ca8210

 * @hw:       ieee802154_hw of target ca8210

 * @filt:     Filtering parameters

 * @changed:  Bitmap representing which parameters to change

 *

 * Effectively just sets the actual addressing information identifying this node

 * as all filtering is performed by the ca8210 as detailed in the IEEE 802.15.4

 * 2006 specification.

 *

 * Return: 0 or linux error code

 TODO: Should use MLME_START to set coord bit? */

/**

 * ca8210_set_tx_power() - Sets the transmit power of the ca8210

 * @hw:   ieee802154_hw of target ca8210

 * @mbm:  Transmit power in mBm (dBm*100)

 *

 * Return: 0 or linux error code

/**

 * ca8210_set_cca_mode() - Sets the clear channel assessment mode of the ca8210

 * @hw:   ieee802154_hw of target ca8210

 * @cca:  CCA mode to set

 *

 * Return: 0 or linux error code

 cca_mode 0 == CS OR ED, 3 == CS AND ED */

/**

 * ca8210_set_cca_ed_level() - Sets the CCA ED level of the ca8210

 * @hw:     ieee802154_hw of target ca8210

 * @level:  ED level to set (in mbm)

 *

 * Sets the minimum threshold of measured energy above which the ca8210 will

 * back off and retry a transmission.

 *

 * Return: 0 or linux error code

/**

 * ca8210_set_csma_params() - Sets the CSMA parameters of the ca8210

 * @hw:       ieee802154_hw of target ca8210

 * @min_be:   Minimum backoff exponent when backing off a transmission

 * @max_be:   Maximum backoff exponent when backing off a transmission

 * @retries:  Number of times to retry after backing off

 *

 * Return: 0 or linux error code

/**

 * ca8210_set_frame_retries() - Sets the maximum frame retries of the ca8210

 * @hw:       ieee802154_hw of target ca8210

 * @retries:  Number of retries

 *

 * Sets the number of times to retry a transmission if no acknowledgment was

 * was received from the other end when one was requested.

 *

 * Return: 0 or linux error code

 Test/EVBME Interface */

/**

 * ca8210_test_int_open() - Opens the test interface to the userspace

 * @inodp:  inode representation of file interface

 * @filp:   file interface

 *

 * Return: 0 or linux error code

/**

 * ca8210_test_check_upstream() - Checks a command received from the upstream

 *                                testing interface for required action

 * @buf:        Buffer containing command to check

 * @device_ref: Nondescript pointer to target device

 *

 * Return: 0 or linux error code

 reset COORD Bit for Channel Filtering as Coordinator */

 End of EVBMECheckSerialCommand() */

/**

 * ca8210_test_int_user_write() - Called by a process in userspace to send a

 *                                message to the ca8210 drivers

 * @filp:    file interface

 * @in_buf:  Buffer containing message to write

 * @len:     length of message

 * @off:     file offset

 *

 * Return: 0 or linux error code

 effectively 0 bytes were written successfully */

/**

 * ca8210_test_int_user_read() - Called by a process in userspace to read a

 *                               message from the ca8210 drivers

 * @filp:  file interface

 * @buf:   Buffer to write message to

 * @len:   length of message to read (ignored)

 * @offp:  file offset

 *

 * If the O_NONBLOCK flag was set when opening the file then this function will

 * not block, i.e. it will return if the fifo is empty. Otherwise the function

 * will block, i.e. wait until new data arrives.

 *

 * Return: number of bytes read

 Non-blocking mode */

 Blocking mode */

/**

 * ca8210_test_int_ioctl() - Called by a process in userspace to enact an

 *                           arbitrary action

 * @filp:        file interface

 * @ioctl_num:   which action to enact

 * @ioctl_param: arbitrary parameter for the action

 *

 * Return: status

/**

 * ca8210_test_int_poll() - Called by a process in userspace to determine which

 *                          actions are currently possible for the file

 * @filp:   file interface

 * @ptable: poll table

 *

 * Return: set of poll return flags

 Init/Deinit */

/**

 * ca8210_get_platform_data() - Populate a ca8210_platform_data object

 * @spi_device:  Pointer to ca8210 spi device object to get data for

 * @pdata:       Pointer to ca8210_platform_data object to populate

 *

 * Return: 0 or linux error code

/**

 * ca8210_config_extern_clk() - Configure the external clock provided by the

 *                              ca8210

 * @pdata:  Pointer to ca8210_platform_data containing clock parameters

 * @spi:    Pointer to target ca8210 spi device

 * @on:	    True to turn the clock on, false to turn off

 *

 * The external clock is configured with a frequency and output pin taken from

 * the platform data.

 *

 * Return: 0 or linux error code

 off */

/**

 * ca8210_register_ext_clock() - Register ca8210's external clock with kernel

 * @spi:  Pointer to target ca8210 spi device

 *

 * Return: 0 or linux error code

/**

 * ca8210_unregister_ext_clock() - Unregister ca8210's external clock with

 *                                 kernel

 * @spi:  Pointer to target ca8210 spi device

/**

 * ca8210_reset_init() - Initialise the reset input to the ca8210

 * @spi:  Pointer to target ca8210 spi device

 *

 * Return: 0 or linux error code

/**

 * ca8210_interrupt_init() - Initialise the irq output from the ca8210

 * @spi:  Pointer to target ca8210 spi device

 *

 * Return: 0 or linux error code

/**

 * ca8210_dev_com_init() - Initialise the spi communication component

 * @priv:  Pointer to private data structure

 *

 * Return: 0 or linux error code

/**

 * ca8210_dev_com_clear() - Deinitialise the spi communication component

 * @priv:  Pointer to private data structure

/**

 * ca8210_hw_setup() - Populate the ieee802154_hw phy attributes with the

 *                     ca8210's defaults

 * @ca8210_hw:  Pointer to ieee802154_hw to populate

 Support channels 11-26 */

/**

 * ca8210_test_interface_init() - Initialise the test file interface

 * @priv:  Pointer to private data structure

 *

 * Provided as an alternative to the standard linux network interface, the test

 * interface exposes a file in the filesystem (ca8210_test) that allows

 * 802.15.4 SAP Commands and Cascoda EVBME commands to be sent directly to

 * the stack.

 *

 * Return: 0 or linux error code

 S_IRUSR | S_IWUSR */

/**

 * ca8210_test_interface_clear() - Deinitialise the test file interface

 * @priv:  Pointer to private data structure

/**

 * ca8210_remove() - Shut down a ca8210 upon being disconnected

 * @spi_device:  Pointer to spi device data structure

 *

 * Return: 0 or linux error code

 get spi_device private data */

/**

 * ca8210_probe() - Set up a connected ca8210 upon being detected by the system

 * @spi_device:  Pointer to spi device data structure

 *

 * Return: 0 or linux error code

 allocate ieee802154_hw and private data */

 wait for pending spi transfers to complete */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Driver for TI CC2520 802.15.4 Wireless-PAN Networking controller

 *

 * Copyright (C) 2014 Varka Bhadram <varkab@cdac.in>

 *		      Md.Jamal Mohiuddin <mjmohiuddin@cdac.in>

 *		      P Sowjanya <sowjanyap@cdac.in>

 status byte values */

 IEEE-802.15.4 defined constants (2.4 GHz logical channels) */

 command strobes */

 status registers */

 frame registers */

 CC2520_FRMFILT0 */

 CC2520_FRMCTRL0 */

 CC2520_FRMCTRL1 */

 Driver private information */

 SPI device structure */

 IEEE-802.15.4 device */

 SPI TX/Rx data buffer */

 SPI buffer mutex */

 Flag for sync b/w Tx and Rx */

 Flag for CC2591 */

 FIFO GPIO pin number */

 Workqueue for FIFOP */

 Lock for is_tx*/

 Work completion for Tx */

 Flag for promiscuous mode */

 Generic Functions */

	/* length byte must include FCS even

	 * if it is calculated in the hardware

	/* In promiscuous mode we disable AUTOCRC so we can get the raw CRC

	 * values on RX. This means we need to manually add the CRC on TX.

 Read single length byte from the radio. */

		/* Corrupted frame received, clear frame buffer by

		 * reading entire buffer.

	/* In promiscuous mode, we configure the radio to include the

	 * CRC (AUTOCRC==0) and we pass on the packet unconditionally. If not

	 * in promiscuous mode, we check the CRC here, but leave the

	 * RSSI/LQI/CRC_OK bytes as they will get removed in the mac layer.

		/* Check if the CRC is valid. With AUTOCRC set, the most

		 * significant bit of the last byte returned from the CC2520

		 * is CRC_OK flag. See section 20.3.4 of the datasheet.

 If we failed CRC drop the packet in the driver layer. */

		/* To calculate LQI, the lower 7 bits of the last byte (the

		 * correlation value provided by the radio) must be scaled to

		 * the range 0-255. According to section 20.6, the correlation

		 * value ranges from 50-110. Ideally this would be calibrated

		 * per hardware design, but we use roughly the datasheet values

		 * to get close enough while avoiding floating point.

 level = RSSI(rssi) - OFFSET [dBm] : offset is 76dBm */

 Disable automatic ACK, automatic CRC, and frame filtering. */

 We do support only 2.4 Ghz */

 CC2591 front end for CC2520 */

	/* If the CC2520 is connected to a CC2591 amplifier, we must both

	 * configure GPIOs on the CC2520 to correctly configure the CC2591

	 * and change a couple settings of the CC2520 to work with the

	 * amplifier. See section 8 page 17 of TI application note AN065.

	 * http://www.ti.com/lit/an/swra229a/swra229a.pdf

 Registers default value: section 28.1 in Datasheet */

	/* Set the CCA threshold to -50 dBm. This seems to have been copied

	 * from the TinyOS CC2520 driver and is much higher than the -84 dBm

	 * threshold suggested in the datasheet.

 Configure registers correctly for this driver. */

 Assumption that CC2591 is not connected */

 Request all the gpio's */

 Set up fifop interrupt */

 Set up sfd interrupt */

 SPI driver structure */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Loopback IEEE 802.15.4 interface

 *

 * Copyright 2007-2012 Siemens AG

 *

 * Written by:

 * Sergey Lapin <slapin@ossfans.org>

 * Dmitry Eremin-Solenikov <dbaryshkov@gmail.com>

 * Alexander Smirnov <alex.bluesman.smirnov@gmail.com>

 Number of dummy devices to be set up by this module. */

 868 MHz BPSK	802.15.4-2003 */

 915 MHz BPSK	802.15.4-2003 */

 2.4 GHz O-QPSK 802.15.4-2003 */

 868 MHz ASK 802.15.4-2006 */

 915 MHz ASK 802.15.4-2006 */

 868 MHz O-QPSK 802.15.4-2006 */

 915 MHz O-QPSK 802.15.4-2006 */

 2.4 GHz CSS 802.15.4a-2007 */

 UWB Sub-gigahertz 802.15.4a-2007 */

 UWB Low band 802.15.4a-2007 */

 UWB High band 802.15.4a-2007 */

 750 MHz O-QPSK 802.15.4c-2009 */

 750 MHz MPSK 802.15.4c-2009 */

 950 MHz BPSK 802.15.4d-2009 */

 950 MHz GFSK 802.15.4d-2009 */

 fake phy channel 13 as default */

 SPDX-License-Identifier: GPL-2.0

/*

 * Lantiq / Intel GSWIP switch driver for VRX200, xRX300 and xRX330 SoCs

 *

 * Copyright (C) 2010 Lantiq Deutschland

 * Copyright (C) 2012 John Crispin <john@phrozen.org>

 * Copyright (C) 2017 - 2019 Hauke Mehrtens <hauke@hauke-m.de>

 *

 * The VLAN and bridge model the GSWIP hardware uses does not directly

 * matches the model DSA uses.

 *

 * The hardware has 64 possible table entries for bridges with one VLAN

 * ID, one flow id and a list of ports for each bridge. All entries which

 * match the same flow ID are combined in the mac learning table, they

 * act as one global bridge.

 * The hardware does not support VLAN filter on the port, but on the

 * bridge, this driver converts the DSA model to the hardware.

 *

 * The CPU gets all the exception frames which do not match any forwarding

 * rule and the CPU port is also added to all bridges. This makes it possible

 * to handle all the special cases easily in software.

 * At the initialization the driver allocates one bridge table entry for

 * each switch port which is used when the port is used without an

 * explicit bridge. This prevents the frames from being forwarded

 * between all LAN ports by default.

 GSWIP MDIO Registers */

 GSWIP MII Registers */

 GSWIP Core Registers */

 GSWIP Software reset */

 GSWIP Hardware reset */

 buffer management Port Configuration Register */

 RMON Counter Enable */

 Ingres Special Tag RMON count */

 buffer management Port Control Register */

 Software Reset for RMON RAM 1 */

 Software Reset for RMON RAM 2 */

 PCE */

 Monitoring port map */

 Default Multicast port map */

 Default Unknown Unicast port map */

 MAC Table Flushing */

 VLAN aware Switching */

 MAC Address table lock */

 Mac address table lock forwarding mode */

 Transparent VLAN mode */

 VLAN Replace Mode */

 Accept special tag in ingress */

 Unknown VLAN Rule */

 VLAN Ingress Member violation rule */

 VLAN Egress Member violation rule */

 VLAN Security */

 Priority Tagged Rule */

 Maximum Untagged Frame Lnegth */

 Ethernet Switch Fetch DMA Port Control Register */

 FDMA Port Enable */

 Special Tag Insertion Enable */

 VLAN Modification Control */

 VLAN Modification Control */

 Ethernet Switch Store DMA Port Control Register */

 SDMA Port Enable */

 Flow Control Enable */

 Pause Frame Forwarding */

 Static not, aging entry */

 PCE_TBL_ADDR.ADDR = pData->table_index

 PCE_TBL_CTRL.ADDR = pData->table

* Receive Packet Count (only packets that are accepted and not discarded). */

* Receive Size 1024-1522 (or more, if configured) Packet Count. */

* Transmit Size 1024-1522 (or more, if configured) Packet Count. */

 There's no MII_CFG register for the CPU port */

/* Add the LAN port into a bridge with the CPU port by

 * default. This prevents automatic forwarding of

 * packages between the LAN ports when no explicit

 * bridge is configured.

 vid */

 fid */;

 vid */;

 RMON Counter Enable for port */

 enable port fetch/store dma & VLAN Modification */

 start the table access: */

 tell the switch that the microcode is loaded */

 Do not allow changing the VLAN filtering options while in bridge */

 Use port based VLAN tag */

 Use port based VLAN tag */

 disable port fetch/store dma on all ports */

 enable Switch */

 Default unknown Broadcast/Multicast/Unicast port maps */

	/* Deactivate MDIO PHY auto polling. Some PHYs as the AR8030 have an

	 * interoperability problem with this auto polling mechanism because

	 * their status registers think that the link is in a different state

	 * than it actually is. For the AR8030 it has the BMSR_ESTATEN bit set

	 * as well as ESTATUS_1000_TFULL and ESTATUS_1000_XFULL. This makes the

	 * auto polling state machine consider the link being negotiated with

	 * 1Gbit/s. Since the PHY itself is a Fast Ethernet RMII PHY this leads

	 * to the switch port being completely dead (RX and TX are both not

	 * working).

	 * Also with various other PHY / port combinations (PHY11G GPHY, PHY22F

	 * GPHY, external RGMII PEF7071/7072) any traffic would stop. Sometimes

	 * it would work fine for a few minutes to hours and then stop, on

	 * other device it would no traffic could be sent or received at all.

	 * Testing shows that when PHY auto polling is disabled these problems

	 * go away.

 Configure the MDIO Clock 2.5 MHz */

 Disable the xMII interface and clear it's isolation bit */

 enable special tag insertion on cpu port */

 accept special tag in ingress direction */

 VLAN aware Switching */

 Flush MAC Table */

 Look for a free slot */

 Check if there is already a page for this bridge */

	/* If this bridge is not programmed yet, add a Active VLAN table

	 * entry in a free slot and prepare the VLAN mapping table entry.

 VLAN ID byte, maps to the VLAN ID of vlan active table */

 Read the existing VLAN mapping entry from the switch */

 Update the VLAN mapping entry and write it to the switch */

 In case an Active VLAN was creaetd delete it again */

 Check if there is already a page for this bridge */

	/* If this bridge is not programmed yet, add a Active VLAN table

	 * entry in a free slot and prepare the VLAN mapping table entry.

 VLAN ID byte, maps to the VLAN ID of vlan active table */

 Read the existing VLAN mapping entry from the switch */

 Update the VLAN mapping entry and write it to the switch */

 In case an Active VLAN was creaetd delete it again */

 Check if there is already a page for this bridge */

 In case all ports are removed from the bridge, remove the VLAN */

 GSWIP 2.2 (GRX300) and later program here the VID directly. */

	/* When the bridge uses VLAN filtering we have to configure VLAN

	 * specific bridges. No bridge is configured here.

	/* When the bridge uses VLAN filtering we have to configure VLAN

	 * specific bridges. No bridge is configured here.

 We only support VLAN filtering on bridges */

 Check if there is already a page for this VLAN */

	/* If this VLAN is not programmed yet, we have to reserve

	 * one entry in the VLAN table. Make sure we start at the

	 * next position round.

 Look for a free slot */

	/* We have to receive all packets on the CPU port and should not

	 * do any VLAN filtering here. This is also called with bridge

	 * NULL and then we do not know for which bridge to configure

	 * this.

	/* We have to receive all packets on the CPU port and should not

	 * do any VLAN filtering here. This is also called with bridge

	 * NULL and then we do not know for which bridge to configure

	 * this.

 port map */

 Allow all the expected bits */

	/* With the exclusion of MII, Reverse MII and Reduced MII, we

	 * support Gigabit, including Half duplex

 Configure the RMII clock as output: */

	/* The vendor BSP uses a 200ms delay after asserting the reset line.

	 * Without this some users are observing that the PHY is not coming up

	 * on the MDIO bus.

	/* GPHY cores need the firmware code in a persistent and contiguous

	 * memory area with a 16 kB boundary aligned start address.

 Default to GE mode */

 check if the device was fully probed */

	/* The VRX200 rev 1.1 uses the GSWIP 2.0 and needs the older

	 * GPHY firmware. The VRX200 rev 1.2 uses the GSWIP 2.1 and also

	 * needs a different GPHY firmware.

	/* The standalone PHY11G requires 300ms to be fully

	 * initialized and ready for any MDIO communication after being

	 * taken out of reset. For the SoC-internal GPHY variant there

	 * is no (known) documentation for the minimum time after a

	 * reset. Use the same value as for the standalone variant as

	 * some users have reported internal PHYs not being detected

	 * without any delay.

 bring up the mdio bus */

 bring up the mdio bus */

 disable the switch */

 SPDX-License-Identifier: GPL-2.0

/* DSA driver for:

 * Vitesse VSC7385 SparX-G5 5+1-port Integrated Gigabit Ethernet Switch

 * Vitesse VSC7388 SparX-G8 8-port Integrated Gigabit Ethernet Switch

 * Vitesse VSC7395 SparX-G5e 5+1-port Integrated Gigabit Ethernet Switch

 * Vitesse VSC7398 SparX-G8e 8-port Integrated Gigabit Ethernet Switch

 *

 * This driver takes control of the switch chip connected over CPU-attached

 * address bus and configures it to route packages around when connected to

 * a CPU port.

 *

 * Copyright (C) 2019 Pawel Dembicki <paweldembicki@gmail.com>

 * Based on vitesse-vsc-spi.c by:

 * Copyright (C) 2018 Linus Wallej <linus.walleij@linaro.org>

 * Includes portions of code from the firmware uploader by:

 * Copyright (C) 2009 Gabor Juhos <juhosg@openwrt.org>

/*

 * struct vsc73xx_platform - VSC73xx Platform state container

	/* By default vsc73xx running in big-endian mode.

	 * (See "Register Addressing" section 5.5.3 in the VSC7385 manual.)

 obtain I/O memory space */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Distributed Switch Architecture loopback driver

 *

 * Copyright (C) 2016, Florian Fainelli <f.fainelli@gmail.com>

 Just do a sleeping operation to make lockdep checks effective */

 Just do a sleeping operation to make lockdep checks effective */

 SPDX-License-Identifier: GPL-2.0+

/*

 * net/dsa/mv88e6060.c - Driver for Marvell 88e6060 switch chips

 * Copyright (c) 2008-2009 Marvell Semiconductor

 Set all ports to the disabled state. */

 Wait for transmit queues to drain. */

 Reset the switch. */

 Wait up to one second for reset to complete. */

	/* Disable discarding of frames with excessive collisions,

	 * set the maximum frame size to 1536 bytes, and mask all

	 * interrupt sources.

	/* Disable automatic address learning.

	/* Do not force flow control, disable Ingress and Egress

	 * Header tagging, disable VLAN tunneling, and set the port

	 * state to Forwarding.  Additionally, if this is the CPU

	 * port, enable Ingress and Egress Trailer tagging mode.

	/* Port based VLAN map: give each port its own address

	 * database, allow the CPU port to talk to each of the 'real'

	 * ports, and allow each of the 'real' ports to only talk to

	 * the CPU port.

	/* Port Association Vector: when learning source addresses

	 * of packets, add the address to the address database using

	 * a port bitmap that has only the bit for this port set and

	 * the other bits clear.

	/* The multicast bit is always transmitted as a zero, so the switch uses

	 * bit 8 for "DiffAddr", where 0 means all ports transmit the same SA.

 @@@ initialise atu */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0

/* DSA driver for:

 * Vitesse VSC7385 SparX-G5 5+1-port Integrated Gigabit Ethernet Switch

 * Vitesse VSC7388 SparX-G8 8-port Integrated Gigabit Ethernet Switch

 * Vitesse VSC7395 SparX-G5e 5+1-port Integrated Gigabit Ethernet Switch

 * Vitesse VSC7398 SparX-G8e 8-port Integrated Gigabit Ethernet Switch

 *

 * This driver takes control of the switch chip over SPI and

 * configures it to route packages around when connected to a CPU port.

 *

 * Copyright (C) 2018 Linus Wallej <linus.walleij@linaro.org>

 * Includes portions of code from the firmware uploader by:

 * Copyright (C) 2009 Gabor Juhos <juhosg@openwrt.org>

/*

 * struct vsc73xx_spi - VSC73xx SPI state container

 Protects SPI traffic */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2017 Pengutronix, Juergen Borleis <kernel@pengutronix.de>

 address bits 0..1 are not used */

 link forward and backward */

-------------------------------------------------------------------------*/

 sentinel */ }

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0

/* Realtek SMI library helpers for the RTL8366x variants

 * RTL8366RB and RTL8366S

 *

 * Copyright (C) 2017 Linus Walleij <linus.walleij@linaro.org>

 * Copyright (C) 2009-2010 Gabor Juhos <juhosg@openwrt.org>

 * Copyright (C) 2010 Antti Seppälä <a.seppala@gmail.com>

 * Copyright (C) 2010 Roman Yeryomin <roman@advem.lv>

 * Copyright (C) 2011 Colin Leitner <colin.leitner@googlemail.com>

/**

 * rtl8366_obtain_mc() - retrieve or allocate a VLAN member configuration

 * @smi: the Realtek SMI device instance

 * @vid: the VLAN ID to look up or allocate

 * @vlanmc: the pointer will be assigned to a pointer to a valid member config

 * if successful

 * @return: index of a new member config or negative error number

 Try to find an existing member config entry for this VID */

 We have no MC entry for this VID, try to find an empty one */

 Update the entry from the 4K table */

 MC table is full, try to find an unused entry and replace it */

 Update the entry from the 4K table */

 Update the 4K table */

 Find or allocate a member config for this VID */

 Update the MC entry */

 Commit updates to the MC entry */

 Find or allocate a member config for this VID */

	/* To enable 4k VLAN, ordinary VLAN must be enabled first,

	 * but if we disable 4k VLAN it is fine to leave ordinary

	 * VLAN enabled.

 Make sure VLAN is ON */

	/* If we turn VLAN off, make sure that we turn off

	 * 4k VLAN as well, if that happened to be on.

 Clear the 16 VLAN member configurations */

	/* Enable VLAN in the hardware

	 * FIXME: what's with this 4k business?

	 * Just rtl8366_enable_vlan() seems inconclusive.

 Remove this port from the VLAN */

			/*

			 * If no ports are members of this VLAN

			 * anymore then clear the whole member

			 * config so it can be reused.

 We only support SS_STATS */

 SPDX-License-Identifier: GPL-2.0

/* Realtek SMI subdriver for the Realtek RTL8365MB-VC ethernet switch.

 *

 * Copyright (C) 2021 Alvin Šipraga <alsi@bang-olufsen.dk>

 * Copyright (C) 2021 Michael Rasmussen <mir@bang-olufsen.dk>

 *

 * The RTL8365MB-VC is a 4+1 port 10/100/1000M switch controller. It includes 4

 * integrated PHYs for the user facing ports, and an extension interface which

 * can be connected to the CPU - or another PHY - via either MII, RMII, or

 * RGMII. The switch is configured via the Realtek Simple Management Interface

 * (SMI), which uses the MDIO/MDC lines.

 *

 * Below is a simplified block diagram of the chip and its relevant interfaces.

 *

 *                          .-----------------------------------.

 *                          |                                   |

 *         UTP <---------------> Giga PHY <-> PCS <-> P0 GMAC   |

 *         UTP <---------------> Giga PHY <-> PCS <-> P1 GMAC   |

 *         UTP <---------------> Giga PHY <-> PCS <-> P2 GMAC   |

 *         UTP <---------------> Giga PHY <-> PCS <-> P3 GMAC   |

 *                          |                                   |

 *     CPU/PHY <-MII/RMII/RGMII--->  Extension  <---> Extension |

 *                          |       interface 1        GMAC 1   |

 *                          |                                   |

 *     SMI driver/ <-MDC/SCL---> Management    ~~~~~~~~~~~~~~   |

 *        EEPROM   <-MDIO/SDA--> interface     ~REALTEK ~~~~~   |

 *                          |                  ~RTL8365MB ~~~   |

 *                          |                  ~GXXXC TAIWAN~   |

 *        GPIO <--------------> Reset          ~~~~~~~~~~~~~~   |

 *                          |                                   |

 *      Interrupt  <----------> Link UP/DOWN events             |

 *      controller          |                                   |

 *                          '-----------------------------------'

 *

 * The driver uses DSA to integrate the 4 user and 1 extension ports into the

 * kernel. Netdevices are created for the user ports, as are PHY devices for

 * their integrated PHYs. The device tree firmware should also specify the link

 * partner of the extension port - either via a fixed-link or other phy-handle.

 * See the device tree bindings for more detailed information. Note that the

 * driver has only been tested with a fixed-link, but in principle it should not

 * matter.

 *

 * NOTE: Currently, only the RGMII interface is implemented in this driver.

 *

 * The interrupt line is asserted on link UP/DOWN events. The driver creates a

 * custom irqchip to handle this interrupt and demultiplex the events by reading

 * the status registers via SMI. Interrupts are then propagated to the relevant

 * PHY device.

 *

 * The EEPROM contains initial register values which the chip will read over I2C

 * upon hardware reset. It is also possible to omit the EEPROM. In both cases,

 * the driver will manually reprogram some registers using jam tables to reach

 * an initial state defined by the vendor driver.

 *

 * This Linux driver is written based on an OS-agnostic vendor driver from

 * Realtek. The reference GPL-licensed sources can be found in the OpenWrt

 * source tree under the name rtl8367c. The vendor driver claims to support a

 * number of similar switch controllers from Realtek, but the only hardware we

 * have is the RTL8365MB-VC. Moreover, there does not seem to be any chip under

 * the name RTL8367C. Although one wishes that the 'C' stood for some kind of

 * common hardware revision, there exist examples of chips with the suffix -VC

 * which are explicitly not supported by the rtl8367c driver and which instead

 * require the rtl8367d vendor driver. With all this uncertainty, the driver has

 * been modestly named rtl8365mb. Future implementors may wish to rename things

 * accordingly.

 *

 * In the same family of chips, some carry up to 8 user ports and up to 2

 * extension ports. Where possible this driver tries to make things generic, but

 * more work must be done to support these configurations. According to

 * documentation from Realtek, the family should include the following chips:

 *

 *  - RTL8363NB

 *  - RTL8363NB-VB

 *  - RTL8363SC

 *  - RTL8363SC-VB

 *  - RTL8364NB

 *  - RTL8364NB-VB

 *  - RTL8365MB-VC

 *  - RTL8366SC

 *  - RTL8367RB-VB

 *  - RTL8367SB

 *  - RTL8367S

 *  - RTL8370MB

 *  - RTL8310SR

 *

 * Some of the register logic for these additional chips has been skipped over

 * while implementing this driver. It is therefore not possible to assume that

 * things will work out-of-the-box for other chips, and a careful review of the

 * vendor driver may be needed to expand support. The RTL8365MB-VC seems to be

 * one of the simpler chips.

 Chip-specific data and limits */

 Family-specific data and limits */

 Chip identification registers */

 Chip reset register */

 Interrupt polarity register */

 Interrupt control/status register - enable/check specific interrupt types */

 Per-port interrupt type status registers */

 PHY indirect access registers */

 PHY OCP address prefix register */

 The PHY OCP addresses of PHY registers 0~31 start here */

 EXT port interface mode values - used in DIGITAL_INTERFACE_SELECT */

 EXT port interface mode configuration registers 0~1 */

 EXT port RGMII TX/RX delay configuration registers 1~2 */

 External port speed values - used in DIGITAL_INTERFACE_FORCE */

 EXT port force configuration registers 0~2 */

 CPU port mask register - controls which ports are treated as CPU ports */

 CPU control register */

 Maximum packet length register */

 Port learning limit registers */

 Port isolation (forwarding mask) registers */

 MSTP port state registers - indexed by tree instancrSTI (tree ine */

 MIB counter value registers */

 MIB counter address register */

/* The DSA callback .get_stats64 runs in atomic context, so we are not allowed

 * to block. On the other hand, accessing MIB counters absolutely requires us to

 * block. The solution is thus to schedule work which polls the MIB counters

 * asynchronously and updates some private data, which the callback can then

 * fetch atomically. Three seconds should be a good enough polling interval.

 Lifted from the vendor driver sources */

/**

 * struct rtl8365mb_cpu - CPU port configuration

 * @enable: enable/disable hardware insertion of CPU tag in switch->CPU frames

 * @mask: port mask of ports that parse should parse CPU tags

 * @trap_port: forward trapped frames to this port

 * @insert: CPU tag insertion mode in switch->CPU frames

 * @position: position of CPU tag in frame

 * @rx_length: minimum CPU RX length

 * @format: CPU tag format

 *

 * Represents the CPU tagging and CPU port configuration of the switch. These

 * settings are configurable at runtime.

/**

 * struct rtl8365mb_port - private per-port data

 * @smi: pointer to parent realtek_smi data

 * @index: DSA port index, same as dsa_port::index

 * @stats: link statistics populated by rtl8365mb_stats_poll, ready for atomic

 *         access via rtl8365mb_get_stats64

 * @stats_lock: protect the stats structure during read/update

 * @mib_work: delayed work for polling MIB counters

/**

 * struct rtl8365mb - private chip-specific driver data

 * @smi: pointer to parent realtek_smi data

 * @irq: registered IRQ or zero

 * @chip_id: chip identifier

 * @chip_ver: chip silicon revision

 * @port_mask: mask of all ports

 * @learn_limit_max: maximum number of L2 addresses the chip can learn

 * @cpu: CPU tagging and CPU port configuration for this chip

 * @mib_lock: prevent concurrent reads of MIB counters

 * @ports: per-port data

 * @jam_table: chip-specific initialization jam table

 * @jam_size: size of the chip's jam table

 *

 * Private data for this driver.

 Set OCP prefix */

 Set PHY register address */

 Execute read operation */

 Get PHY register data */

 Set PHY register data */

 Execute write operation */

	/* Set the RGMII TX/RX delay

	 *

	 * The Realtek vendor driver indicates the following possible

	 * configuration settings:

	 *

	 *   TX delay:

	 *     0 = no delay, 1 = 2 ns delay

	 *   RX delay:

	 *     0 = no delay, 7 = maximum delay

	 *     No units are specified, but there are a total of 8 steps.

	 *

	 * The vendor driver also states that this must be configured *before*

	 * forcing the external interface into a particular mode, which is done

	 * in the rtl8365mb_phylink_mac_link_{up,down} functions.

	 *

	 * Only configure an RGMII TX (resp. RX) delay if the

	 * tx-internal-delay-ps (resp. rx-internal-delay-ps) OF property is

	 * specified. We ignore the detail of the RGMII interface mode

	 * (RGMII_{RXID, TXID, etc.}), as this is considered to be a PHY-only

	 * property.

	 *

	 * For the RX delay, we assume that a register value of 4 corresponds to

	 * 2 ns. But this is just an educated guess, so ignore all other values

	 * to avoid too much confusion.

 convert to ns */

 convert to ns */

 Force the link up with the desired configuration */

 Force the link down and reset any programmed configuration */

 Internal PHY */

 Extension MAC */

	/* include/linux/phylink.h says:

	 *     When @state->interface is %PHY_INTERFACE_MODE_NA, phylink

	 *     expects the MAC driver to return all supported link modes.

	/* TODO: Implement MII and RMII modes, which the RTL8365MB-VC also

	 * supports

	/* Enable/disable learning by limiting the number of L2 addresses the

	 * port can learn. Realtek documentation states that a limit of zero

	 * disables learning. When enabling learning, set it to the chip's

	 * maximum.

	/* The MIB address is an SRAM address. We request a particular address

	 * and then poll the control register before reading the value from some

	 * counter registers.

 Poll for completion */

 Presumably this indicates a MIB counter read failure */

	/* There are four MIB counter registers each holding a 16 bit word of a

	 * MIB counter. Depending on the offset, we should read from the upper

	 * two or lower two registers. In case the MIB counter is 4 words, we

	 * read from all four registers.

 Read the MIB counter 16 bits at a time */

 Only commit the result if no error occurred */

 Only fetch required MIB counters (marked = 1 above) */

	/* The RTL8365MB-VC exposes MIB objects, which we have to translate into

	 * IEEE 802.3 Managed Objects. This is not always completely faithful,

	 * but we try out best. See RFC 3635 for a detailed treatment of the

	 * subject.

 Only fetch required MIB counters (marked = 1 above) */

 Don't update statistics if there was an error reading the counters */

 if{In,Out}Octets includes FCS - remove it */

	/* Per-chip global mutex to protect MIB counter access, since doing

	 * so requires accessing a series of registers in a particular order.

 Per-port spinlock to protect the stats64 data */

		/* This work polls the MIB counters and keeps the stats64 data

		 * up-to-date.

 The hardware doesn't support masking IRQs on a per-port basis */

 rtl8365mb IRQs cascade off this one */

 Configure chip interrupt signal polarity */

 Disable the interrupt in case the chip has it enabled on reset */

 Clear the interrupt status register */

 Store the irq so that we know to free it during teardown */

 Do any chip-specific init jam before getting to the common stuff */

 Common init jam */

	/* Realtek documentation says the chip needs 1 second to reset. Sleep

	 * for 100 ms before accessing any registers to prevent ACK timeouts.

 Configure switch to vendor-defined initial state */

 Set up cascading IRQs */

 Configure CPU tagging */

 Configure ports */

 Set up per-port private data */

 Forward only to the CPU */

 Disable learning */

		/* Set the initial STP state of all ports to DISABLED, otherwise

		 * ports will still forward frames to the CPU despite being

		 * administratively down by default.

 Set maximum packet length to 1536 bytes */

 Start statistics counter polling */

	/* For some reason we have to write a magic value to an arbitrary

	 * register whenever accessing the chip ID/version registers.

 Reset magic register */

 SPDX-License-Identifier: GPL-2.0+

/* Realtek Simple Management Interface (SMI) driver

 * It can be discussed how "simple" this interface is.

 *

 * The SMI protocol piggy-backs the MDIO MDC and MDIO signals levels

 * but the protocol is not MDIO at all. Instead it is a Realtek

 * pecularity that need to bit-bang the lines in a special way to

 * communicate with the switch.

 *

 * ASICs we intend to support with this driver:

 *

 * RTL8366   - The original version, apparently

 * RTL8369   - Similar enough to have the same datsheet as RTL8366

 * RTL8366RB - Probably reads out "RTL8366 revision B", has a quite

 *             different register layout from the other two

 * RTL8366S  - Is this "RTL8366 super"?

 * RTL8367   - Has an OpenWRT driver as well

 * RTL8368S  - Seems to be an alternative name for RTL8366RB

 * RTL8370   - Also uses SMI

 *

 * Copyright (C) 2017 Linus Walleij <linus.walleij@linaro.org>

 * Copyright (C) 2010 Antti Seppälä <a.seppala@gmail.com>

 * Copyright (C) 2010 Roman Yeryomin <roman@advem.lv>

 * Copyright (C) 2011 Colin Leitner <colin.leitner@googlemail.com>

 * Copyright (C) 2009-2010 Gabor Juhos <juhosg@openwrt.org>

 msecs */

 msecs */

	/* Set GPIO pins to output mode, with initial state:

	 * SCK = 0, SDA = 1

 CLK 1: 0 -> 1, 1 -> 0 */

 CLK 2: */

 Add a click */

 Set GPIO pins to input mode */

 Prepare data */

 Clocking */

 Clocking */

 Read data */

 Send an ACK */

 Read data */

 Send an ACK */

 Send READ command */

 Set ADDR[7:0] */

 Set ADDR[15:8] */

 Read DATA[7:0] */

 Read DATA[15:8] */

 Send WRITE command */

 Set ADDR[7:0] */

 Set ADDR[15:8] */

 Write DATA[7:0] */

 Write DATA[15:8] */

/* There is one single case when we need to use this accessor and that

 * is when issueing soft reset. Since the device reset as soon as we write

 * that bit, no ACK will come back for natural reasons.

 Regmap accessors */

 A4..A0 R4..R0 */

 PHY regs are at 0x8000 */

 Link forward and backward */

 TODO: if power is software controlled, set up any regulators here */

 Assert then deassert RESET */

 Fetch MDIO pins */

 FIXME: add support for RTL8366S and more */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0

/* DSA driver for:

 * Vitesse VSC7385 SparX-G5 5+1-port Integrated Gigabit Ethernet Switch

 * Vitesse VSC7388 SparX-G8 8-port Integrated Gigabit Ethernet Switch

 * Vitesse VSC7395 SparX-G5e 5+1-port Integrated Gigabit Ethernet Switch

 * Vitesse VSC7398 SparX-G8e 8-port Integrated Gigabit Ethernet Switch

 *

 * These switches have a built-in 8051 CPU and can download and execute a

 * firmware in this CPU. They can also be configured to use an external CPU

 * handling the switch in a memory-mapped manner by connecting to that external

 * CPU's memory bus.

 *

 * Copyright (C) 2018 Linus Wallej <linus.walleij@linaro.org>

 * Includes portions of code from the firmware uploader by:

 * Copyright (C) 2009 Gabor Juhos <juhosg@openwrt.org>

 Subblocks 0-4, 6 (CPU port) */

 Only subblock 0 */

 Subblocks 0 and 1 */

 Only subblock 2 */

 Only subblock 2 */

 Only subblock 0 */

 Only subblock 0 */

 CPU port */

 MAC Block registers */

 MAC_CFG register bits */

 Not in manual */

 Flow control register bits */

 ADVPORTM advanced port setup register bits */

 CAT_DROP categorizer frame dropping register bits */

 Frame analyzer block 2 registers */

 Until 0x3f */

 Until 0x7f */

 Until 0x87 */

 MII block 3 registers */

 Arbiter block 5 registers */

 System block 7 registers */

/* Counters are named according to the MIB standards where applicable.

 * Some counters are custom, non-standard. The standard counters are

 * named in accordance with RFC2819, RFC2021 and IEEE Std 802.3-2002 Annex

 * 30A Counters.

 non-standard counter */

 non-standard counter */

 non-standard counter */

 non-standard counter */

 non-standard counter */

 non-standard counter */

 22-24 are undefined */

 non-standard counter */

 non-standard counter */

 non-standard counter */

 non-standard counter */

 non-standard counter */

 non-standard counter */

 non-standard counter */

 non-standard counter */

 non-standard counter */

 21-24 are undefined */

 non-standard counter */

 non-standard counter */

 non-standard counter */

 non-standard counter */

 Same read-modify-write algorithm as e.g. regmap */

	/* The iCPU can always be used but can boot in different ways.

	 * If it is initially disabled and has no external memory,

	 * we are in control and can do whatever we like, else we

	 * are probably in trouble (we need some way to communicate

	 * with the running firmware) so we bail out for now.

 !icpu_si_boot_en && !cpu_pi_en */

 Setting bit 26 means "read" */

	/* It was found through tedious experiments that this router

	 * chip really hates to have it's PHYs reset. They

	 * never recover if that happens: autonegotiation stops

	 * working after a reset. Just filter out this command.

	 * (Resetting the whole chip is OK.)

	/* The switch internally uses a 8 byte header with length,

	 * source port, tag, LPA and priority. This is supposedly

	 * only accessible when operating the switch using the internal

	 * CPU or with an external CPU mapping the device in, but not

	 * when operating the switch over SPI and putting frames in/out

	 * on port 6 (the CPU port). So far we must assume that we

	 * cannot access the tag. (See "Internal frame header" section

	 * 3.9.1 in the manual.)

 Issue RESET */

	/* Initialize memory, initialize RAM bank 0..15 except 6 and 7

	 * This sequence appears in the

	 * VSC7385 SparX-G5 datasheet section 6.6.1

	 * VSC7395 SparX-G5e datasheet section 6.6.1

	 * "initialization sequence".

	 * No explanation is given to the 0x1010400 magic number.

 Clear MAC table */

 Clear VLAN table */

	/* Use 20KiB buffers on all ports on VSC7395

	 * The VSC7385 has 16KiB buffers and that is the

	 * default if we don't set this up explicitly.

	 * Port "31" is "all ports".

 Put all ports into reset until enabled */

 MII delay, set both GTX and RX delay to 2 ns */

 Enable reception of frames on all ports */

 IP multicast flood mask (table 144) */

 Release reset from the internal PHYs */

 MAC configure, first reset the port and then write defaults */

	/* Take up the port in 1Gbit mode by default, this will be

	 * augmented after auto-negotiation on the PHY-facing

	 * ports.

	/* Flow control for the CPU port:

	 * Use a zero delay pause frame when pause condition is left

	 * Obey pause control frames

	/* Issue pause control frames on PHY facing ports.

	 * Allow early initiation of MAC transmission if the amount

	 * of egress data is below 512 bytes on CPU port.

	 * FIXME: enable 20KiB buffers?

 Flow control MAC: a MAC address used in flow control frames */

	/* Tell the categorizer to forward pause frames, not control

	 * frame. Do not drop anything.

 Clear all counters */

 Reset this port FIXME: break out subroutine */

 Seed the port randomness with randomness */

	/* Flow control for the PHY facing ports:

	 * Use a zero delay pause frame when pause condition is left

	 * Obey pause control frames

	 * When generating pause frames, use 0xff as pause value

 Disallow backward dropping of frames from this port */

 Enable TX, RX, deassert reset, stop loading seed */

 Special handling of the CPU-facing port */

 Other ports are already initialized but not this one */

		/* Select the external port for this interface (EXT_PORT)

		 * Enable the GMII GTX external clock

		 * Use double data rate (DDR mode)

	/* This is the MAC confiuration that always need to happen

	 * after a PHY or the CPU port comes up or down.

 Disable RX on this port */

 Discard packets */

 Wait until queue is empty */

 Continue anyway */

 Put this port into reset */

 Accept packets again */

 Allow backward dropping of frames from this port */

 Receive mask (disable forwarding) */

 Figure out what speed was negotiated */

 Set up default for internal port or external RGMII */

 Enable port (forwarding) in the receieve mask */

 Just put the port into reset */

 RX counter 0 */

 RX counter 1 */

 RX counter 2 */

 TX counter 0 */

 TX counter 1 */

 TX counter 2 */

 The first counters is the RX octets */

	/* Each port supports recording 3 RX counters and 3 TX counters,

	 * figure out what counters we use in this set-up and return the

	 * names of them. The hardware default counters will be number of

	 * packets on RX/TX, combined broadcast+multicast packets RX/TX and

	 * total error packets RX/TX.

 TX stats begins with the number of TX octets */

 We only support SS_STATS */

 RX and TX packets, then 3 RX counters, 3 TX counters */

/* According to application not "VSC7398 Jumbo Frames" setting

 * up the MTU to 9.6 KB does not affect the performance on standard

 * frames. It is clear from the application note that

 * "9.6 kilobytes" == 9600 bytes.

 Release reset, if any */

 Wait 20ms according to datasheet table 245 */

		/* Reset pulse should be 20ns minimum, according to datasheet

		 * table 245, so 10us should be fine

 Wait 20ms according to datasheet table 245 */

	/* The VSC7395 switch chips have 5+1 ports which means 5

	 * ordinary ports and a sixth CPU port facing the processor

	 * with an RGMII interface. These ports are numbered 0..4

	 * and 6, so they leave a "hole" in the port map for port 5,

	 * which is invalid.

	 *

	 * The VSC7398 has 8 ports, port 7 is again the CPU port.

	 *

	 * We allocate 8 ports and avoid access to the nonexistant

	 * ports.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2009 Felix Fietkau <nbd@nbd.name>

 * Copyright (C) 2011-2012 Gabor Juhos <juhosg@openwrt.org>

 * Copyright (c) 2015, 2019, The Linux Foundation. All rights reserved.

 * Copyright (c) 2016 John Crispin <john@phrozen.org>

/* The 32bit switch registers are accessed indirectly. To achieve this we need

 * to set the page of the register. Track the last page that was set to reduce

 * mdio writes

 Global control */

 EEE control */

 Parser control */

 ACL */

 Lookup */

 QM */

 PKT */

 L3 */

 MIB - Port0 */

 MIB - Port1 */

 MIB - Port2 */

 MIB - Port3 */

 MIB - Port4 */

 MIB - Port5 */

 MIB - Port6 */

 end MIB - Port6 range */

	/* Check if qca8k_read has failed for a different reason

	 * before returning -ETIMEDOUT

 load the ARL table into an array */

 vid - 83:72 */

 aging - 67:64 */

 portmask - 54:48 */

 mac - 47:0 */

 vid - 83:72 */

 aging - 67:64 */

 portmask - 54:48 */

 mac - 47:0 */

 load the array into the ARL table */

 Set the command and FDB index */

 Write the function register triggering the table access */

 wait for completion */

 Check for table full violation when adding an entry */

 Set the command and VLAN index */

 Write the function register triggering the table access */

 wait for completion */

 Check for table full violation when adding an entry */

	/*

	   We do the right thing with VLAN 0 and treat it as untagged while

	   preserving the tag on egress.

 Check if we're the last member to be removed */

 Port 0 and 6 have no internal PHY */

	/* From Andrew Lunn:

	 * Port 0 has no internal phy.

	 * Port 1 has an internal PHY at MDIO address 0.

	 * Port 2 has an internal PHY at MDIO address 1.

	 * ...

	 * Port 5 has an internal PHY at MDIO address 4.

	 * Port 6 has no internal PHY.

	/* Check if qca8k_read has failed for a different reason

	 * before returnting -ETIMEDOUT

 even if the busy_wait timeouts try to clear the MASTER_EN */

 even if the busy_wait timeouts try to clear the MASTER_EN */

	/* Check if the legacy mapping should be used and the

	 * port is not correctly mapped to the right PHY in the

	 * devicetree

	/* Check if the legacy mapping should be used and the

	 * port is not correctly mapped to the right PHY in the

	 * devicetree

	/* The QCA8K_MDIO_MASTER_EN Bit, which grants access to PHYs through

	 * the MDIO_MASTER register also _disconnects_ the external MDC

	 * passthrough to the internal PHYs. It's not possible to use both

	 * configurations at the same time!

	 *

	 * Because this came up during the review process:

	 * If the external mdio-bus driver is capable magically disabling

	 * the QCA8K_MDIO_MASTER_EN and mutex/spin-locking out the qca8k's

	 * accessors for the time being, it would be possible to pull this

	 * off.

		/* Make sure to disable the internal mdio bus in cases

		 * a dt-overlay and driver reload changed the configuration

 Check if the devicetree declare the port:phy mapping */

	/* If a mapping can't be found the legacy mapping is used,

	 * using the qca8k_port_to_phy function

	/* SoC specific settings for ipq8064.

	 * If more device require this consider adding

	 * a dedicated binding.

 SoC specific settings for ipq8065 */

 Find the connected cpu port. Valid port are 0 or 6 */

	/* QCA8327 require to set to the correct mode.

	 * His bigger brother QCA8328 have the 172 pin layout.

	 * Should be applied by default but we set this just to make sure.

 Set the correct package of 148 pin for QCA8327 */

 We have 2 CPU port. Check them */

 Skip every other port */

 Switch regs accept value in ns, convert ps to ns */

 Switch regs accept value in ns, convert ps to ns */

 Skip sgmii parsing for rgmii* mode */

 Parse CPU port config to be later used in phy_link mac_config */

 Start by setting up the register mapping */

 Make sure MAC06 is disabled */

 Enable CPU Port */

 Enable MIB counters */

 Initial setup of all ports */

 Disable forwarding by default on all ports */

 Enable QCA header mode on all cpu ports */

 Disable MAC by default on all user ports */

	/* Forward all unknown frames to CPU port for Linux processing

	 * Notice that in multi-cpu config only one port should be set

	 * for igmp, unknown, multicast and broadcast packet

	/* Setup connection between CPU port & user ports

	 * Configure specific switch configuration for ports

 CPU port gets connected to all user ports of the switch */

 Individual user ports get connected to CPU port only */

 Enable ARP Auto-learning by default */

			/* For port based vlans to work we need to set the

			 * default egress vid

		/* The port 5 of the qca8337 have some problem in flood condition. The

		 * original legacy driver had some specific buffer and priority settings

		 * for the different port suggested by the QCA switch team. Add this

		 * missing settings to improve switch stability under load condition.

		 * This problem is limited to qca8337 and other qca8k switch are not affected.

			/* The 2 CPU port and port 5 requires some different

			 * priority than any other ports.

		/* Set initial MTU for every port.

		 * We have only have a general MTU setting. So track

		 * every port and set the max across all port.

 Special GLOBAL_FC_THRESH value are needed for ar8327 switch */

 Setup our port MTUs to match power on defaults */

 Flush the FDB table */

 We don't have interrupts for link changes, so we need to poll */

	/* Delay can be declared in 3 different way.

	 * Mode to rgmii and internal-delay standard binding defined

	 * rgmii-id or rgmii-tx/rx phy mode set.

	 * The parse logic set a delay different than 0 only when one

	 * of the 3 different way is used. In all other case delay is

	 * not enabled. With ID or TX/RXID delay is enabled and set

	 * to the default and recommended value.

 Set RGMII delay based on the selected values */

 1st CPU port */

 Internal PHY, nothing to do */

 2nd CPU port / external PHY */

 Configure rgmii delay */

		/* QCA8337 requires to set rgmii rx delay for all ports.

		 * This is enabled through PORT5_PAD_CTRL for all ports,

		 * rather than individual port registers.

 Enable SGMII on the port */

 Enable/disable SerDes auto-negotiation as necessary */

 Configure the SGMII parameters */

 CPU port, we're talking to the CPU MAC, be a PHY */

		/* For qca8327/qca8328/qca8334/qca8338 sgmii is unique and

		 * falling edge is set writing in the PORT0 PAD reg

 SGMII Clock phase configuration */

		/* From original code is reported port instability as SGMII also

		 * require delay set. Apply advised values here or take them from DT.

 1st CPU port */

 Internal PHY */

 2nd CPU port / external PHY */

 Nothing to do on the port's MAC */

		/* Add this port to the portvlan mask of the other ports

		 * in the bridge

 Add all other ports to this ports portvlan mask */

		/* Remove this port to the portvlan mask of the other ports

		 * in the bridge

	/* Set the cpu port to be the only one in the portvlan mask of

	 * this port

 Include L2 header / FCS length */

 Set the vid to the port vlan id if no vid is set */

	/* Communicate to the phy internal driver the switch revision.

	 * Based on the switch revision different values needs to be

	 * set to the dbg and mmd reg on the phy.

	 * The first 2 bit are used to communicate the switch revision

	 * to the phy driver.

 get the switches ID from the compatible */

 Save revision to communicate to the internal PHY driver */

	/* allocate the private data struct so that we can probe the switches

	 * ID register

		/* The active low duration must be greater than 10 ms

		 * and checkpatch.pl wants 20 ms.

 Check the detected switch id */

 CONFIG_PM_SLEEP */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Mediatek MT7530 DSA Switch driver

 * Copyright (C) 2017 Sean Wang <sean.wang@mediatek.com>

 String, offset, and register size in bytes if different from 4 bytes */

/* Since phy_device has not yet been created and

 * phy_{read,write}_mmd_indirect is not available, we provide our own

 * core_{read,write}_mmd_indirect with core_{clear,write,set} wrappers

 * to complete this function.

 Write the desired MMD Devad */

 Write the desired MMD register address */

 Select the Function : DATA with no post increment */

 Read the content of the MMD's selected register */

 Write the desired MMD Devad */

 Write the desired MMD register address */

 Select the Function : DATA with no post increment */

 Write the data into MMD's selected register */

 MT7530 uses 31 as the pseudo port */

 MT7530 uses 31 as the pseudo port */

 Set the command operating upon the MAC address entries */

	/* Additional sanity for read command if the specified

	 * entry is invalid

 Read from ARL table into an array */

	/* STATIC_ENT indicate that entry is static wouldn't

	 * be aged out and STATIC_EMP specified as erasing an

	 * entry

 Write array into the ARL table */

 Setup TX circuit including relevant PAD and driving */

 PLL frequency: 125MHz */

 PLL frequency: 150MHz: 1.2GBit */

 PLL frequency: 250MHz: 2.0Gbit */

 Lower Tx Driving for TRGMII path */

 Disable MT7530 core and TRGMII Tx clocks */

 Setup core clock for MT7530 */

 Disable PLL */

 Set core clock into 500Mhz */

 Enable PLL */

 Setup the MT7530 TRGMII Tx Clock */

 Enable MT7530 core and TRGMII Tx clocks */

 Step 1 : Disable MT7531 COREPLL */

 Step 2: switch to XTAL output */

 Step 3: disable PLLGP and enable program PLLGP */

 Step 4: program COREPLL output frequency to 500MHz */

 Set feedback divide ratio update signal to high */

 Wait for at least 16 XTAL clocks */

 Step 5: set feedback divide ratio update signal to low */

 Enable 325M clock for SGMII */

 Enable 250SSC clock for RGMII */

 Step 6: Enable MT7531 PLL */

 Applied timer is (AGE_CNT + 1) * (AGE_UNIT + 1) seconds */

 iterate through all possible age_count to find the closest pair */

 found a closer pair */

 found the exact match, so break the loop */

 MT7530_P5_MODE_GPHY_P0: 2nd GMAC -> P5 -> P0 */

 MT7530_P5_MODE_GPHY_P4: 2nd GMAC -> P5 -> P4 */

 Setup the MAC by default for the cpu port */

 MT7530_P5_MODE_GMAC: P5 -> External phy or 2nd GMAC */

 Setup RGMII settings */

 P5 RGMII RX Clock Control: delay setting for 1000M */

 Don't set delay in DSA mode */

 n * 0.5 ns */

 P5 RGMII TX Clock Control: delay x */

 reduce P5 RGMII Tx driving, 8mA */

 Setup max capability of CPU port at first */

 Enable Mediatek header mode on the cpu port */

 Disable flooding by default */

 Set CPU port number */

	/* CPU port gets connected to all user ports of

	 * the switch.

 Set to fallback mode for independent VLAN learning */

	/* Allow the user port gets connected to the cpu port and also

	 * restore the port matrix if the port is the member of a certain

	 * bridge.

	/* Clear up all port matrix which could be restored in the next

	 * enablement for the port.

	/* When a new MTU is set, DSA always set the CPU port's MTU to the

	 * largest MTU of the slave ports. Because the switch only has a global

	 * RX length register, only allowing CPU port here is enough.

 RX length also includes Ethernet header, MTK tag, and FCS length */

		/* Add this port to the port matrix of the other ports in the

		 * same bridge. If the port is disabled, port matrix is kept

		 * and not being setup until the port becomes enabled.

 Add the all other ports to this port matrix. */

 Set to fallback mode for independent VLAN learning */

	/* This is called after .port_bridge_leave when leaving a VLAN-aware

	 * bridge. Don't set standalone ports to fallback mode.

 Set PVID to 0 */

	/* CPU port also does the same thing until all user ports belonging to

	 * the CPU port get out of VLAN filtering mode.

	/* Trapped into security mode allows packet forwarding through VLAN

	 * table lookup.

 Only accept tagged frames if PVID is not set */

	/* Set the port as a user port which is to be able to recognize VID

	 * from incoming packets before fetching entry within the VLAN table.

		/* Remove this port from the port matrix of the other ports

		 * in the same bridge. If the port is disabled, port matrix

		 * is kept and not being setup until the port becomes enabled.

	/* Set the cpu port to be the only one in the port matrix of

	 * this port.

	/* When a port is removed from the bridge, the port would be set up

	 * back to the default as is at initial boot which is a VLAN-unaware

	 * port.

		/* The port is being kept as VLAN-unaware port when bridge is

		 * set up with vlan_filtering not being set, Otherwise, the

		 * port and the corresponding CPU port is required the setup

		 * for becoming a VLAN-aware port.

	/* Validate the entry with independent learning, create egress tag per

	 * VLAN and joining the port as one of the port members.

	/* Decide whether adding tag or not for those outgoing packets from the

	 * port inside the VLAN.

	/* CPU port is always taken as a tagged port for serving more than one

	 * VLANs across and also being applied with egress type stack mode for

	 * that VLAN tags would be appended after hardware special tag used as

	 * DSA tag.

	/* If certain member apart from CPU port is still alive in the VLAN,

	 * the entry would be kept valid. Otherwise, the entry is got to be

	 * disabled.

 Fetch entry */

 Manipulate entry */

 Flush result to hardware */

	/* Validate the entry with independent learning, keep the original

	 * ingress tag attribute.

 Accept all frames if PVID is set */

 Only configure PVID if VLAN filtering is enabled */

 This VLAN is overwritten without PVID, so unset it */

 Only accept tagged frames if the port is VLAN-aware */

	/* PVID is being restored to the default whenever the PVID port

	 * is being removed from the VLAN.

 Only accept tagged frames if the port is VLAN-aware */

 Check for existent entry */

 MT7530 only supports one monitor port */

	/* Map GPIO offset to register bit

	 * [ 2: 0]  port 0 LED 0..2 as GPIO 0..2

	 * [ 6: 4]  port 1 LED 0..2 as GPIO 3..5

	 * [10: 8]  port 2 LED 0..2 as GPIO 6..8

	 * [14:12]  port 3 LED 0..2 as GPIO 9..11

	 * [18:16]  port 4 LED 0..2 as GPIO 12..14

 CONFIG_GPIOLIB */

 This register must be set for MT7530 to properly fire interrupts */

	/* The parent node of master netdev which holds the common system

	 * controller also is the container for two GMACs nodes representing

	 * as two netdev instances.

	/* Reset whole chip through gpio pin or memory-mapped registers for

	 * different type of hardware

 Waiting for MT7530 got to stable */

 Reset the switch through internal reset */

 Enable Port 6 only; P5 as GMAC5 which currently is not supported */

 Enable and reset MIB counters */

 Disable forwarding by default on all ports */

 Disable learning by default on all ports */

 Set default PVID to 0 on all user ports */

 Enable consistent egress tag */

 Setup VLAN ID 0 for VLAN-unaware bridges */

 Setup port 5 */

 Scan the ethernet nodes. look for GMAC1, lookup used phy */

 CONFIG_GPIOLIB */

 Flush the FDB table */

	/* Reset whole chip through gpio pin or memory-mapped registers for

	 * different type of hardware

 Waiting for MT7530 got to stable */

 Reset the switch through internal reset */

 Let ds->slave_mii_bus be able to access external phy. */

 Let phylink decide the interface later. */

	/* Enable PHY core PLL, since phy_device has not yet been created

	 * provided for phy_[read,write]_mmd_indirect is called, we provide

	 * our own mt7531_ind_mmd_phy_[read,write] to complete this

	 * function.

 BPDU to CPU port */

 Enable and reset MIB counters */

 Disable forwarding by default on all ports */

 Disable learning by default on all ports */

 Set default PVID to 0 on all user ports */

 Enable consistent egress tag */

 Setup VLAN ID 0 for VLAN-unaware bridges */

 Flush the FDB table */

 Internal phy */

 2nd cpu port with phy of port 0 or 4 / external phy */

 1st cpu port */

 Internal phy */

 2nd cpu port supports either rgmii or sgmii/8023z */

 1st cpu port supports sgmii/8023z only */

 Only need to setup port5. */

 Do not adjust rgmii delay when vendor phy driver presents. */

	/* Port5 supports ethier RGMII or SGMII.

	 * Port6 supports SGMII only.

 For adjusting speed and duplex of SGMII force mode. */

 SGMII force mode setting */

	/* MT7531 SGMII 1G force mode can only work in full duplex mode,

	 * no matter MT7531_SGMII_FORCE_HALF_DUPLEX is set or not.

	/* Setup 2.5 times faster clock for 2.5Gbps data speeds with 10B/8B

	 * encoding.

	/* MT7531 SGMII 1G and 2.5G force mode can only work in full duplex

	 * mode, no matter MT7531_SGMII_FORCE_HALF_DUPLEX is set or not.

 Only restart AN when AN is enabled */

 Internal phy */

 2nd cpu port with phy of port 0 or 4 / external phy */

 1st cpu port */

 Are we connected to external phy */

	/* MT753x MAC works in 1G full duplex mode for all up-clocked

	 * variants.

 This switch only supports 1G full-duplex. */

	/* We can only operate at 2500BaseX or 1000BaseX.  If requested

	 * to advertise both, only report advertising at 2500BaseX.

 Force LPI Mode without a delay */

 sentinel */ },

	/* Use medatek,mcm property to distinguish hardware type that would

	 * casues a little bit differences on power-on sequence.

	/* Get the hardware identifier from the devicetree node.

	 * We will need it for some of the clock and regulator setup.

	/* Sanity check if these required device operations are filled

	 * properly.

	/* Not MCM that indicates switch works as the remote standalone

	 * integrated circuit so the GPIO pin would be used to complete

	 * the reset, otherwise memory-mapped register accessing used

	 * through syscon provides in the case of MCM.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Broadcom Starfighter 2 DSA switch CFP support

 *

 * Copyright (C) 2016, Broadcom

 UDF slices layout for a TCPv4/UDPv4 specification */

 End of L2, byte offset 12, src IP[0:15] */

 End of L2, byte offset 14, src IP[16:31] */

 End of L2, byte offset 16, dst IP[0:15] */

 End of L2, byte offset 18, dst IP[16:31] */

 End of L3, byte offset 0, src port */

 End of L3, byte offset 2, dst port */

 UDF slices layout for a TCPv6/UDPv6 specification */

 End of L2, byte offset 8, src IP[0:15] */

 End of L2, byte offset 10, src IP[16:31] */

 End of L2, byte offset 12, src IP[32:47] */

 End of L2, byte offset 14, src IP[48:63] */

 End of L2, byte offset 16, src IP[64:79] */

 End of L2, byte offset 18, src IP[80:95] */

 End of L2, byte offset 20, src IP[96:111] */

 End of L2, byte offset 22, src IP[112:127] */

 End of L3, byte offset 0, src port */

 End of L2, byte offset 24, dst IP[0:15] */

 End of L2, byte offset 26, dst IP[16:31] */

 End of L2, byte offset 28, dst IP[32:47] */

 End of L2, byte offset 30, dst IP[48:63] */

 End of L2, byte offset 32, dst IP[64:79] */

 End of L2, byte offset 34, dst IP[80:95] */

 End of L2, byte offset 36, dst IP[96:111] */

 End of L2, byte offset 38, dst IP[112:127] */

 End of L3, byte offset 2, dst port */

 Entry #0 is reserved */

	/* Replace ARL derived destination with DST_MAP derived, define

	 * which port and queue this should be forwarded to.

 Enable looping back to the original port */

 Set classification ID that needs to be put in Broadcom tag */

 Configure policer RAM now */

 Disable the policer */

 Now the rate meter */

	/* UDF_Valid[7:0]	[31:24]

	 * S-Tag		[23:8]

	 * C-Tag		[7:0]

	/* C-Tag		[31:24]

	 * UDF_n_A8		[23:8]

	 * UDF_n_A7		[7:0]

	/* UDF_n_A7		[31:24]

	 * UDF_n_A6		[23:8]

	 * UDF_n_A5		[7:0]

	/* UDF_n_A5		[31:24]

	 * UDF_n_A4		[23:8]

	 * UDF_n_A3		[7:0]

	/* UDF_n_A3		[31:24]

	 * UDF_n_A2		[23:8]

	 * UDF_n_A1		[7:0]

	/* UDF_n_A1		[31:24]

	 * UDF_n_A0		[23:8]

	 * Reserved		[7:4]

	 * Slice ID		[3:2]

	 * Slice valid		[1:0]

 Extract VLAN TCI */

 Locate the first rule available */

 We only use one UDF slice for now */

 Apply the UDF layout for this filter */

 Apply to all packets received through this port */

 Source port map match */

	/* S-Tag status		[31:30]

	 * C-Tag status		[29:28]

	 * L2 framing		[27:26]

	 * L3 framing		[25:24]

	 * IP ToS		[23:16]

	 * IP proto		[15:08]

	 * IP Fragm		[7]

	 * Non 1st frag		[6]

	 * IP Authen		[5]

	 * TTL range		[4:3]

	 * PPPoE session	[2]

	 * Reserved		[1]

	 * UDF_Valid[8]		[0]

 Mask with the specific layout for IPv4 packets */

 Program the match and the mask */

 Insert into TCAM now */

 Insert into Action and policer RAMs now */

 Turn on CFP for this rule now */

 Flag the rule as being used and return it */

	/* UDF_Valid[7:0]	[31:24]

	 * S-Tag		[23:8]

	 * C-Tag		[7:0]

	/* C-Tag		[31:24]

	 * UDF_n_B8		[23:8]	(port)

	 * UDF_n_B7 (upper)	[7:0]	(addr[15:8])

	/* UDF_n_B7 (lower)	[31:24]	(addr[7:0])

	 * UDF_n_B6		[23:8] (addr[31:16])

	 * UDF_n_B5 (upper)	[7:0] (addr[47:40])

	/* UDF_n_B5 (lower)	[31:24] (addr[39:32])

	 * UDF_n_B4		[23:8] (addr[63:48])

	 * UDF_n_B3 (upper)	[7:0] (addr[79:72])

	/* UDF_n_B3 (lower)	[31:24] (addr[71:64])

	 * UDF_n_B2		[23:8] (addr[95:80])

	 * UDF_n_B1 (upper)	[7:0] (addr[111:104])

	/* UDF_n_B1 (lower)	[31:24] (addr[103:96])

	 * UDF_n_B0		[23:8] (addr[127:112])

	 * Reserved		[7:4]

	 * Slice ID		[3:2]

	 * Slice valid		[1:0]

 Compare VLAN TCI values as well */

 Extract VLAN TCI */

	/* Negotiate two indexes, one for the second half which we are chained

	 * from, which is what we will return to user-space, and a second one

	 * which is used to store its first half. That first half does not

	 * allow any choice of placement, so it just needs to find the next

	 * available bit. We return the second half as fs->location because

	 * that helps with the rule lookup later on since the second half is

	 * chained from its first half, we can easily identify IPv6 CFP rules

	 * by looking whether they carry a CHAIN_ID.

	 *

	 * We also want the second half to have a lower rule_index than its

	 * first half because the HW search is by incrementing addresses.

	/* Flag it as used (cleared on error path) such that we can immediately

	 * obtain a second one to chain from.

 Apply the UDF layout for this filter */

 Apply to all packets received through this port */

 Source port map match */

	/* S-Tag status		[31:30]

	 * C-Tag status		[29:28]

	 * L2 framing		[27:26]

	 * L3 framing		[25:24]

	 * IP ToS		[23:16]

	 * IP proto		[15:08]

	 * IP Fragm		[7]

	 * Non 1st frag		[6]

	 * IP Authen		[5]

	 * TTL range		[4:3]

	 * PPPoE session	[2]

	 * Reserved		[1]

	 * UDF_Valid[8]		[0]

	/* Mask with the specific layout for IPv6 packets including

	 * UDF_Valid[8]

 Slice the IPv6 source address and port */

 Insert into TCAM now because we need to insert a second rule */

 Insert into Action and policer RAMs now */

 Now deal with the second slice to chain this rule */

 Apply the UDF layout for this filter */

	/* Chained rule, source port match is coming from the rule we are

	 * chained from.

	/*

	 * CHAIN ID		[31:24] chain to previous slice

	 * Reserved		[23:20]

	 * UDF_Valid[11:8]	[19:16]

	 * UDF_Valid[7:0]	[15:8]

	 * UDF_n_D11		[7:0]

 Mask all except chain ID, UDF Valid[8] and UDF Valid[7:0] */

 Insert into TCAM now */

	/* Insert into Action and policer RAMs now, set chain ID to

	 * the one we are chained to

 Turn on CFP for this rule now */

	/* Flag the second half rule as being used now, return it as the

	 * location, and flag it as unique while dumping rules

	/* This rule is a Wake-on-LAN filter and we must specifically

	 * target the CPU port in order for it to be working.

	/* We do not support discarding packets, check that the

	 * destination port is enabled and that we are within the

	 * number of ports supported by the switch

	/* If the rule is matching a particular VLAN, make sure that we honor

	 * the matching and have it tagged or untagged on the destination port,

	 * we do this on egress with a VLAN entry. The egress tagging attribute

	 * is expected to be provided in h_ext.data[1] bit 0. A 1 means untagged,

	 * a 0 means tagged.

 We cannot support matching multiple VLAN IDs yet */

	/*

	 * We have a small oddity where Port 6 just does not have a

	 * valid bit here (so we substract by one).

 Check for unsupported extensions */

 Indicate which rule we want to read */

	/* Check if this is possibly an IPv6 rule that would

	 * indicate we need to delete its companion rule

	 * as well

 Clear its valid bits */

 Write back this entry into the TCAM now */

 If this was an IPv6 rule, delete is companion rule too */

	/* Refuse deleting unused rules, and those that are not unique since

	 * that could leave IPv6 rules with one of the chained rule in the

	 * table.

 Put the TCAM size here */

 We implement the search doing a TCAM search operation */

 Put the TCAM size here */

 Subtract the default, unusable rule */

 We support specifying rule locations */

 Pass up the commands to the attached master network device */

	/* Pass up the commands to the attached master network device.

	 * This can fail, so rollback the operation if we need to.

 3 counters per CFP rules */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Broadcom Starfighter 2 DSA switch driver

 *

 * Copyright (C) 2014, Broadcom Corporation

 RO fallback reg */

 Return the number of active ports, not counting the IMP (CPU) port */

 Frequenty in Mhz */

	/* If we overflow our table, just use the recommended operational

	 * frequency

 Enable the port memories */

 Enable forwarding */

 Enable IMP port in dumb mode */

	/* Configure Traffic Class to QoS mapping, allow each priority to map

	 * to a different queue number

 Force link status for IMP port */

 Enable Broadcast, Multicast, Unicast forwarding to IMP port */

 Use PHY-driven LED signaling */

 Port 0 interrupts are located on the first bank */

 Port 0 interrupts are located on the first bank */

 Clear the memory power down */

 Enable Broadcom tags for that port if requested */

	/* Configure Traffic Class to QoS mapping, allow each priority to map

	 * to a different queue number

 Re-enable the GPHY and re-apply workarounds */

			/* if phy_stop() has been called before, phy

			 * will be in halted state, and phy_start()

			 * will call resume.

			 *

			 * the resume path does not configure back

			 * autoneg settings, and since we hard reset

			 * the phy manually here, we need to reset the

			 * state machine also.

 Enable MoCA port interrupts to get notified */

 Set per-queue pause threshold to 32 */

 Set ACB threshold to 24 */

 Disable learning while in WoL mode */

 Power down the port memory */

 Page << 8 | offset */

 Page << 8 | offset */

	/* Intercept reads from Broadcom pseudo-PHY address, else, send

	 * them to our master MDIO bus controller

	/* Intercept writes to the Broadcom pseudo-PHY address, else,

	 * send them to our master MDIO bus controller

	/* The watchdog reset does not work on 7278, we need to hit the

	 * "external" reset line through the reset controller.

 FIXME */

		/* Internal PHYs get assigned a specific 'phy-mode' property

		 * value: "internal" to help flag them before MDIO probing

		 * has completed, since they might be turned off at that

		 * time

		/* Ensure that port 5 is not picked up as a DSA CPU port

		 * flavour but a regular port instead. We should be using

		 * devlink to be able to set the port flavour.

 Find our integrated MDIO bus node */

	/* Include the pseudo-PHY address to divert reads towards our

	 * workaround. This is only required for 7445D0, since 7445E0

	 * disconnects the internal switch pseudo-PHY such that we can use the

	 * regular SWITCH_MDIO master controller instead.

	 *

	 * Here we flag the pseudo PHY as needing special treatment and would

	 * otherwise make all other PHY read/writes go to the master MDIO bus

	 * controller that comes with this switch backed by the "mdio-unimac"

	 * driver.

	/* We need to make sure that of_phy_connect() will not work by

	 * removing the 'phandle' and 'linux,phandle' properties and

	 * unregister the existing PHY device that was already registered.

	/* The BCM7xxx PHY driver expects to find the integrated PHY revision

	 * in bits 15:8 and the patch level in bits 7:0 which is exactly what

	 * the REG_PHY_REVISION register layout is.

 Allow all the expected bits */

	/* With the exclusion of MII and Reverse MII, we support Gigabit,

	 * including Half duplex

 Nothing required for all other PHYs: internal and MoCA */

	/* Clear id_mode_dis bit, and the existing port mode, let

	 * RGMII_MODE_EN bet set by mac_link_{up,down}

 If the link is down, just disable the interface to conserve power */

	/* MoCA port is special as we do not get link status from CORE_LNKSTS,

	 * which means that we need to force the link at the port override

	 * level to get the data to flow. We do use what the interrupt handler

	 * did determine before.

	 *

	 * For the other ports, we just force the link status, since this is

	 * a fixed PHY device.

		/* For MoCA interfaces, also force a link down notification

		 * since some version of the user-space daemon (mocad) use

		 * cmd->autoneg to force the link, which messes up the PHY

		 * state machine and make it go in PHY_FORCING state instead.

 Enable ACB globally */

	/* Disable all ports physically present including the IMP

	 * port, the other ones have already been disabled during

	 * bcm_sf2_sw_setup

 Get the parent device WoL settings */

 Advertise the parent device supported settings */

	/* If we have at least one port enabled, make sure the CPU port

	 * is also enabled. If the CPU port is the last one enabled, we disable

	 * it since this configuration does not make sense.

 Enable all valid ports and disable those unused */

 IMP port receives special treatment */

/* The SWITCH_CORE register space is managed by b53 but operates on a page +

 * register basis so we need to translate that into an address that the

 * bus-glue understands.

 Register offsets for the SWITCH_REG_* block */

 sentinel */ },

 Set SWITCH_REG register offsets and SWITCH_CORE align factor */

	/* Auto-detection using standard registers will not work, so

	 * provide an indication of what kind of device we are for

	 * b53_common to work with

 Advertise the 8 egress queues */

	/* CFP rule #0 cannot be used for specific classifications, flag it as

	 * permanently used

 Balance of_node_put() done by of_find_node_by_name() */

 Disable all interrupts and request them */

 Reset the MIB counters */

 Get the maximum number of ports for this switch */

 Assume a single GPHY setup if we can't read that property */

 Disable interrupts */

	/* For a kernel about to be kexec'd we want to keep the GPHY on for a

	 * successful MDIO bus scan to occur. If we did turn off the GPHY

	 * before (e.g: port_disable), this will also power it back on.

	 *

	 * Do not rely on kexec_in_progress, just power the PHY on.

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2017 Pengutronix, Juergen Borleis <kernel@pengutronix.de>

 *

 * Partially based on a patch from

 * Copyright (c) 2014 Stefan Roese <sr@denx.de>

 Generate phy-addr and -reg from the input address */

 reg num to offset */

 reg num to offset */

 address bits 0..1 are not used */

 link forward and backward */

-------------------------------------------------------------------------*/

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0

/* Realtek SMI subdriver for the Realtek RTL8366RB ethernet switch

 *

 * This is a sparsely documented chip, the only viable documentation seems

 * to be a patched up code drop from the vendor that appear in various

 * GPL source trees.

 *

 * Copyright (C) 2017 Linus Walleij <linus.walleij@linaro.org>

 * Copyright (C) 2009-2010 Gabor Juhos <juhosg@openwrt.org>

 * Copyright (C) 2010 Antti Seppälä <a.seppala@gmail.com>

 * Copyright (C) 2010 Roman Yeryomin <roman@advem.lv>

 * Copyright (C) 2011 Colin Leitner <colin.leitner@googlemail.com>

 Switch Global Configuration register */

 Port Enable Control register */

 Switch per-port learning disablement register */

 Security control, actually aging register */

 Port Mode Control registers */

 Port Mirror Control Register */

 bits 0..7 = port 0, bits 8..15 = port 1 */

 bits 0..7 = port 2, bits 8..15 = port 3 */

 bits 0..7 = port 4, bits 8..15 = port 5 */

 bits 0..7 = port 0, bits 8..15 = port 1 */

 bits 0..7 = port 2, bits 8..15 = port 3 */

 bits 0..7 = port 4, bits 8..15 = port 5 */

 Spanning tree status (STP) control, two bits per port per FID */

 0x0050..0x0057 */

 CPU port control reg */

 Disables inserting custom tag length/type 0x8899 */

 bits 0..15 */

 bits 16..31 */

 bits 32..47 */

 PHY registers control */

/* VLAN Ingress Control Register 1, one bit per port.

 * bit 0 .. 5 will make the switch drop ingress frames without

 * VID such as untagged or priority-tagged frames for respective

 * port.

 * bit 6 .. 11 will make the switch drop ingress frames carrying

 * a C-tag with VID != 0 for respective port.

/* VLAN Ingress Control Register 2, one bit per port.

 * bit0 .. bit5 will make the switch drop all ingress frames with

 * a VLAN classification that does not include the port is in its

 * member set.

 LED control registers */

 In userspace port 0 */

 In userspace port 1 */

 In userspace port 2 */

 In userspace port 3 */

 In userspace port 4 */

 CPU port */

 First configuration word per member config, VID and prio */

 Second configuration word per member config, member and untagged */

 Third config word per member config, STAG currently unused */

 Port ingress bandwidth control */

 Port egress bandwidth control */

 1048576? */

 QOS */

 Include/Exclude Preamble and IFG (20 bytes). 0:Exclude, 1:Include. */

 Interrupt handling */

 0..13 */

 Port isolation registers */

 bits 0..5 enable force when cleared */

/**

 * struct rtl8366rb - RTL8366RB-specific data

 * @max_mtu: per-port max MTU setting

 * @pvid_enabled: if PVID is set for respective port

	/* Writing access counter address first

	 * then ASIC will prepare 64bits counter wait for being retrived

 Write whatever */

 Read MIB control register */

 Read each individual MIB 16 bits at the time */

	/* For line interrupts we combine link down in bits

	 * 6..11 with link up in bits 0..5 into one interrupt.

 This clears the IRQ status register */

		/* For line interrupts we combine link down in bits

		 * 6..11 with link up in bits 0..5 into one interrupt.

 RB8366RB IRQs cascade off this one */

 This clears the IRQ status register */

 Fetch IRQ edge information from the descriptor */

 Found in a vendor driver */

 Struct for handling the jam tables' entries */

 For the "version 0" early silicon, appear in most source releases */

 This v1 init sequence is from Belkin F5D8235 U-Boot release */

 This v2 init sequence is from Belkin F5D8235 U-Boot release */

 Appears in a DDWRT code dump */

 Belkin F5D8235 v1, "belkin,f5d8235-v1" */

 DGN3500, "netgear,dgn3500", "netgear,dgn3500b" */

/* This jam table activates "green ethernet", which means low power mode

 * and is claimed to detect the cable length and not use more power than

 * necessary, and the ports should enter power saving mode 10 seconds after

 * a cable is disconnected. Seems to always be the same.

 Function that jams the tables in the proper registers */

 Do the init dance using the right jam table */

	/* Special jam tables for special routers

	 * TODO: are these necessary? Maintainers, please test

	 * without them, using just the off-the-shelf tables.

 Isolate all user ports so they can only send packets to itself and the CPU port */

 CPU port can send packets to all ports */

 Set up the "green ethernet" feature */

 Vendor driver sets 0x240 in registers 0xc and 0xd (undocumented) */

 Set some random MAC address */

	/* Enable CPU port with custom DSA tag 8899.

	 *

	 * If you set RTL8368RB_CPU_NO_TAG (bit 15) in this registers

	 * the custom tag is turned off.

 Make sure we default-enable the fixed CPU port */

 Set maximum packet length to 1536 bytes */

 layer 2 size, see rtl8366rb_change_mtu() */

 Disable learning for all ports */

 Enable auto ageing for all ports */

	/* Port 4 setup: this enables Port 4, usually the WAN port,

	 * common PHY IO mode is apparently mode 0, and this is not what

	 * the port is initialized to. There is no explanation of the

	 * IO modes in the Realtek source code, if your WAN port is

	 * connected to something exotic such as fiber, then this might

	 * be worth experimenting with.

 Accept all packets by default, we enable filtering on-demand */

 Don't drop packets whose DA has not been learned */

 Set blinking, TODO: make this configurable */

	/* Set up LED activity:

	 * Each port has 4 LEDs, we configure all ports to the same

	 * behaviour (no individual config) but we can set up each

	 * LED separately.

 Turn everything off */

 TODO: make this configurable per LED */

 This switch uses the 4 byte protocol A Realtek DSA tag */

 Force the fixed CPU port into 1Gbit mode, no autonegotiation */

 Enable the CPU port */

 Disable the CPU port */

 Loop over all other ports than the current one */

 Current port handled last */

 Not on this bridge */

 Join this port to each other port on the bridge */

 Set the bits for the ports we can access */

 Loop over all other ports than this one */

 Current port handled last */

 Not on this bridge */

 Remove this port from any other port on the bridge */

 Clear the bits for the ports we can not access, leave ourselves */

/**

 * rtl8366rb_drop_untagged() - make the switch drop untagged and C-tagged frames

 * @smi: SMI state container

 * @port: the port to drop untagged and C-tagged frames on

 * @drop: whether to drop or pass untagged and C-tagged frames

 If the port is not in the member set, the frame will be dropped */

	/* If VLAN filtering is enabled and PVID is also enabled, we must

	 * not drop any untagged or C-tagged frames. If we turn off VLAN

	 * filtering on a port, we need to accept any frames.

 We support enabling/disabling learning */

 Set the same status for the port on all the FIDs */

 This will age out any learned L2 entries */

 Restore the normal state of things */

 Cache the per-port MTU setting */

	/* Roof out the MTU for the entire switch to the greatest

	 * common denominator: the biggest set for any one port will

	 * be the biggest MTU for the switch.

	 *

	 * The first setting, 1522 bytes, is max IP packet 1500 bytes,

	 * plus ethernet header, 1518 bytes, plus CPU tag, 4 bytes.

	 * This function should consider the parameter an SDU, so the

	 * MTU passed for this setting is 1518 bytes. The same logic

	 * of subtracting the DSA tag of 4 bytes apply to the other

	 * settings.

	/* The max MTU is 16000 bytes, so we subtract the CPU tag

	 * and the max presented to the system is 15996 bytes.

 write VID */

 write table access control word */

 write table access control word */

	/* If VLAN filtering is enabled and PVID is also enabled, we must

	 * not drop any untagged or C-tagged frames. Make sure to update the

	 * filtering setting.

 Detect device */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2017 Pengutronix, Juergen Borleis <kernel@pengutronix.de>

/* 13.2 System Control and Status Registers

 * Multiply register number by 4 to get address offset.

Turbo MII Enable*/

/*13.4 Switch Fabric Control and Status Registers

 * Accessed indirectly via SWITCH_CSR_CMD, SWITCH_CSR_DATA.

 the built-in PHYs are of type LAN911X */

 misc, interrupt */

 endian test */

 hardware config */

 general purpose timer */

 counter */

 PMI index regs */

 flow control */

 switch fabric indirect regs */

 misc */

 virtual phy */

 GPIO */

 MAC & reset */

 switch fabric direct regs (wr only) */

	/* we can lose arbitration for the I2C case, because the device

	 * tries to detect and read an external EEPROM after reset and acts as

	 * a master on the shared I2C bus itself. This conflicts with our

	 * attempts to access the device as a slave at the same moment.

 start the MII read cycle */

 read the result of this operation */

 write the data first... */

 ...then start the MII write cycle */

 trigger write */

 trigger read */

	/* Calculate chip->phy_addr_base:

	 * Depending on the 'phy_addr_sel_strap' setting, the three phys are

	 * using IDs 0-1-2 or IDs 1-2-3. We cannot read back the

	 * 'phy_addr_sel_strap' setting directly, so we need a test, which

	 * configuration is active:

	 * Special reg 18 of phy 3 reads as 0x0000, if 'phy_addr_sel_strap' is 0

	 * and the IDs are 0-1-2, else it contains something different from

	 * 0x0000, which means 'phy_addr_sel_strap' is 1 and the IDs are 1-2-3.

	 * 0xffff is returned on MDIO read with no response.

 Map ALR-port bits to port bitmap, and back */

 Return pointer to first free ALR cache entry, return NULL if none */

 Return pointer to ALR cache entry matching MAC address */

 Clear learned (non-static) entry on given port */

 learned entries has only one port, we can just delete */

 delete entry */

 Set a static ALR entry. Delete entry if port_map is zero */

 otherwise no ports: delete entry */

 Add port to static ALR entry, create new static entry if needed */

New entry */

 Delete static port from ALR entry, delete entry if last port */

 no static entry found */

 zero means its free again */

 disable RX, but keep register reset default values else */

 disable TX, but keep register reset default values else */

 enable RX and keep register reset default values else */

 enable TX and keep register reset default values else */

 forward special tagged packets from port 0 to port 1 *or* port 2 */

	/* enable defining the destination port via special VLAN tagging

	 * for port 0

	/* tag incoming packets at port 1 and 2 on their way to port 0 to be

	 * able to discover their source port

/* We want a special working switch:

 * - do not forward packets between port 1 and 2

 * - forward everything from port 1 to port 0

 * - forward everything from port 2 to port 0

 prevent port 1 and 2 from forwarding packets by their own */

 ports bridged: remove mirroring */

 release (deassert) reset and activate the device */

 stop processing packets for all ports */

	/* The default state of the LAN9303 device is to forward packets between

	 * all ports (if not configured differently by an external EEPROM).

	 * The initial state of a DSA device must be forwarding packets only

	 * between the external and the internal ports and no forwarding

	 * between the external ports. In preparation we stop packet handling

	 * at all for now until the LAN9303 device is re-programmed accordingly.

 ---------------------------- DSA -----------------------------------*/

 Make sure that port 0 is the cpu port */

 Trap IGMP to port 0 */

 offset of first MAC */

 Virtual Phy: Remove Turbo 200Mbit mode */

 unleash stp_state_set() */

 else: touching SWE_PORT_STATE would break port separation */

 A sane reset duration should not be longer than 1s */

 assert reset to the whole device to prevent it from doing anything */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2019 Pengutronix, Oleksij Rempel <kernel@pengutronix.de>

/*

 *                   +----------------------+

 * GMAC1----RGMII----|--MAC0                |

 *      \---MDIO1----|--REGs                |----MDIO3----\

 *                   |                      |             |  +------+

 *                   |                      |             +--|      |

 *                   |                 MAC1-|----RMII--M-----| PHY0 |-o P0

 *                   |                      |          |  |  +------+

 *                   |                      |          |  +--|      |

 *                   |                 MAC2-|----RMII--------| PHY1 |-o P1

 *                   |                      |          |  |  +------+

 *                   |                      |          |  +--|      |

 *                   |                 MAC3-|----RMII--------| PHY2 |-o P2

 *                   |                      |          |  |  +------+

 *                   |                      |          |  +--|      |

 *                   |                 MAC4-|----RMII--------| PHY3 |-o P3

 *                   |                      |          |  |  +------+

 *                   |                      |          |  +--|      |

 *                   |                 MAC5-|--+-RMII--M-----|-PHY4-|-o P4

 *                   |                      |  |       |     +------+

 *                   +----------------------+  |       \--CFG_SW_PHY_SWAP

 * GMAC0---------------RMII--------------------/        \-CFG_SW_PHY_ADDR_SWAP

 *      \---MDIO0--NC

 *

 * GMAC0 and MAC5 are connected together and use same PHY. Depending on

 * configuration it can be PHY4 (default) or PHY0. Only GMAC0 or MAC5 can be

 * used at same time. If GMAC0 is used (default) then MAC5 should be disabled.

 *

 * CFG_SW_PHY_SWAP - swap connections of PHY0 and PHY4. If this bit is not set

 * PHY4 is connected to GMAC0/MAC5 bundle and PHY0 is connected to MAC1. If this

 * bit is set, PHY4 is connected to MAC1 and PHY0 is connected to GMAC0/MAC5

 * bundle.

 *

 * CFG_SW_PHY_ADDR_SWAP - swap addresses of PHY0 and PHY4

 *

 * CFG_SW_PHY_SWAP and CFG_SW_PHY_ADDR_SWAP are part of SoC specific register

 * set and not related to switch internal registers.

 dummy reg to change page */

 Global Interrupt */

/* FLOW_LINK_EN - enable mac flow control config auto-neg with phy.

 * If not set, mac can be config by software.

/* LINK_EN - If set, MAC is configured from PHY link status.

 * If not set, MAC should be configured by software.

 MIB registers */

/* Phy bypass mode

 * ------------------------------------------------------------------------

 * Bit:   | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |10 |11 |12 |13 |14 |15 |

 *

 * real   | start |   OP  | PhyAddr           |  Reg Addr         |  TA   |

 * atheros| start |   OP  | 2'b00 |PhyAdd[2:0]|  Reg Addr[4:0]    |  TA   |

 *

 *

 * Bit:   |16 |17 |18 |19 |20 |21 |22 |23 |24 |25 |26 |27 |28 |29 |30 |31 |

 * real   |  Data                                                         |

 * atheros|  Data                                                         |

 *

 * ------------------------------------------------------------------------

 * Page address mode

 * ------------------------------------------------------------------------

 * Bit:   | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |10 |11 |12 |13 |14 |15 |

 * real   | start |   OP  | PhyAddr           |  Reg Addr         |  TA   |

 * atheros| start |   OP  | 2'b11 |                          8'b0 |  TA   |

 *

 * Bit:   |16 |17 |18 |19 |20 |21 |22 |23 |24 |25 |26 |27 |28 |29 |30 |31 |

 * real   |  Data                                                         |

 * atheros|                       | Page [9:0]                            |

/* In case of Page Address mode, Bit[18:9] of 32 bit register address should be

 * written to bits[9:0] of mdio data register.

/* ------------------------------------------------------------------------

 * Normal register access mode

 * ------------------------------------------------------------------------

 * Bit:   | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |10 |11 |12 |13 |14 |15 |

 * real   | start |   OP  | PhyAddr           |  Reg Addr         |  TA   |

 * atheros| start |   OP  | 2'b10 |  low_addr[7:0]                |  TA   |

 *

 * Bit:   |16 |17 |18 |19 |20 |21 |22 |23 |24 |25 |26 |27 |28 |29 |30 |31 |

 * real   |  Data                                                         |

 * atheros|  Data                                                         |

 * ------------------------------------------------------------------------

 Empirical determined values */

 The interval should be small enough to avoid overflow of 32bit MIBs */

/*

 * FIXME: until we can read MIBs from stats64 call directly (i.e. sleep

 * there), we have to poll stats more frequently then it is actually needed.

 * For overflow protection, normally, 100 sec interval should have been OK.

 0x00 */

 0x04 */

 0x08 */

 0x0c */

 0x10 */

 0x14 */

 0x18 */

 0x1c */

 0x20 */

 0x24 */

 0x28 */

 0x2c */

 0x30 */

 0x34 */

 0x38 */

 0x3c */

 0x44 */

 0x4c */

 0x50 */

 0x54 */

 0x58 */

 0x5c */

 0x60 */

 0x64 */

 0x68 */

 0x6c */

 0x70 */

 0x74 */

 0x78 */

 0x7c */

 0x80 */

 0x84 */

 0x8c */

 0x90 */

 0x94 */

 0x98 */

 0x9c */

 0xa0 */

 0xa4 */

 mdio master */

 mdio slave */

/* Warning: switch reset will reset last AR9331_SW_MDIO_PHY_MODE_PAGE request

 * If some kind of optimization is used, the request should be repeated.

	/* AR9331 doc do not provide any information about proper reset

	 * sequence. The AR8136 (the closes switch to the AR9331) doc says:

	 * reset duration should be greater than 10ms. So, let's use this value

	 * for now.

	/* There is no information on how long should we wait after reset.

	 * AR8136 has an EEPROM and there is an Interrupt for EEPROM load

	 * status. AR9331 has no EEPROM support.

	 * For now, do not wait. In case AR8136 will be needed, the after

	 * reset delay can be added as well.

 Generate default port settings */

		/* CPU port should be allowed to communicate with all user

		 * ports.

		/* Enable Atheros header on CPU port. This will allow us

		 * communicate with each port separately

		/* User ports should communicate only with the CPU port.

 Other ports do not need to communicate at all */

	/* Reset will set proper defaults. CPU - Port0 will be enabled and

	 * configured. All other ports (ports 1 - 5) are disabled

 Do not drop broadcast frames */

 Set max frame size to the maximum supported value */

 Do the slowest part first, to avoid needless locking for long time */

 All MIB counters are cleared automatically on read */

		/* We cannot read the page selector register from hardware and

		 * we cache its value in regmap. Return all bits set here,

		 * that regmap will always write the page on first use.

	/* In case of this switch we work with 32bit registers on top of 16bit

	 * bus. Some registers (for example access to forwarding database) have

	 * trigger bit on the first 16bit half of request, the result and

	 * configuration of request in the second half.

	 * To make it work properly, we should do the second part of transfer

	 * before the first one is done.

 dummy page selector reg */

 SPDX-License-Identifier: (GPL-2.0 OR MIT)

/*

 * DSA driver for:

 * Hirschmann Hellcreek TSN switch.

 *

 * Copyright (C) 2019,2020 Hochschule Offenburg

 * Copyright (C) 2019,2020 Linutronix GmbH

 * Authors: Kamil Alkhouri <kamil.alkhouri@hs-offenburg.de>

 *	    Kurt Kanzenbach <kurt@linutronix.de>

 Get nanoseconds from PTP clock */

 Take a snapshot */

	/* The time of the day is saved as 96 bits. However, due to hardware

	 * limitations the seconds are not or only partly kept in the PTP

	 * core. Currently only three bits for the seconds are available. That's

	 * why only the nanoseconds are used and the seconds are tracked in

	 * software. Anyway due to internal locking all five registers should be

	 * read.

/* Retrieve the seconds parts in nanoseconds for a packet timestamped with @ns.

 * There has to be a check whether an overflow occurred between the packet

 * arrival and now. If so use the correct seconds (-1) for calculating the

 * packet arrival time.

 Update overflow data structure */

 Set time in clock */

	/* IP-Core adjusts the nominal frequency by adding or subtracting 1 ns

	 * from the 8 ns (period of the oscillator) every time the accumulator

	 * register overflows. The value stored in the addend register is added

	 * to the accumulator register every 8 ns.

	 *

	 * addend value = (2^30 * accumulator_overflow_rate) /

	 *                oscillator_frequency

	 * where:

	 *

	 * oscillator_frequency = 125 MHz

	 * accumulator_overflow_rate = 125 MHz * scaled_ppm * 2^-16 * 10^-6 * 8

 Set drift register */

	/* If the offset is larger than IP-Core slow offset resources. Don't

	 * consider slow adjustment. Rather, add the offset directly to the

	 * current time

 'count_val' does not exceed the maximum register size (2^30) */

 Set offset write register */

/* There two available LEDs internally called sync_good and is_gm. However, the

 * user might want to use a different label and specify the default state. Take

 * those properties from device tree.

 Set initial state */

 Register both leds */

 Set up the overflow work */

 Setup PTP clock */

	/* IP-Core can add up to 0.5 ns per 8 ns cycle, which means

	 * accumulator_overflow_rate shall not exceed 62.5 MHz (which adjusts

	 * the nominal frequency by 6.25%)

	/* Enable the offset correction process, if no offset correction is

	 * already taking place

 Enable the drift correction process */

 LED setup */

 SPDX-License-Identifier: (GPL-2.0 OR MIT)

/*

 * DSA driver for:

 * Hirschmann Hellcreek TSN switch.

 *

 * Copyright (C) 2019,2020 Hochschule Offenburg

 * Copyright (C) 2019,2020 Linutronix GmbH

 * Authors: Kamil Alkhouri <kamil.alkhouri@hs-offenburg.de>

 *	    Kurt Kanzenbach <kurt@linutronix.de>

 enabled tx timestamping */

 L2 & L4 PTPv2 event rx messages are timestamped */

/* Enabling/disabling TX and RX HW timestamping for different PTP messages is

 * not available in the switch. Thus, this function only serves as a check if

 * the user requested what is actually available or not

	/* Interaction with the timestamp hardware is prevented here.  It is

	 * enabled when this config function ends successfully

 Reserved for future extensions */

 TX HW timestamping can't be disabled on the switch */

 RX HW timestamping can't be disabled on the switch */

 RX HW timestamping can't be enabled for all messages on the switch */

	/* If this point is reached, then the requested hwtstamp config is

	 * compatible with the hwtstamp offered by the switch.  Therefore,

	 * enable the interaction with the HW timestamping

 Save the chosen configuration to be returned later */

/* Returns a pointer to the PTP header if the caller should time stamp, or NULL

 * if the caller should not.

	/* If hwtstamp is not available, this means the previous hwtstamp was

	 * successfully read, and the one we need is not yet available

 Get nanoseconds timestamp from timestamping unit */

 Not available yet? */

		/* Check whether the operation of reading the tx timestamp has

		 * exceeded its allowed period

		/* The timestamp should be available quickly, while getting it

		 * in high priority. Restart the work

	/* Now we have the timestamp in nanoseconds, store it in the correct

	 * structure in order to send it to the user

	/* skb_complete_tx_timestamp() frees up the client to make another

	 * timestampable transmit.  We have to be ready for it by clearing the

	 * ps->tx_skb "flag" beforehand

 Deliver a clone of the original outgoing tx_skb with tx hwtstamp */

 The latched timestamp belongs to one of the received frames. */

 Lock & disable interrupts */

	/* Add the reception queue "rxq" to the "received" queue an reintialize

	 * "rxq".  From now on, we deal with "received" not with "rxq"

 Get nanoseconds from ptp packet */

 Add seconds part */

 Save time stamp */

	/* Make sure the message is a PTP message that needs to be timestamped

	 * and the interaction with the HW timestamping is enabled. If not, stop

	 * here

	/* store the number of ticks occurred since system start-up till this

	 * moment

	/* This check only fails if the user did not initialize hardware

	 * timestamping beforehand.

	/* Make sure the message is a PTP message that needs to be timestamped

	 * and the interaction with the HW timestamping is enabled. If not, stop

	 * here

 Initialize timestamping ports. */

	/* Select the synchronized clock as the source timekeeper for the

	 * timestamps and enable inline timestamping.

 Nothing todo */

 SPDX-License-Identifier: (GPL-2.0 or MIT)

/*

 * DSA driver for:

 * Hirschmann Hellcreek TSN switch.

 *

 * Copyright (C) 2019-2021 Linutronix GmbH

 * Author Kurt Kanzenbach <kurt@linutronix.de>

 Data sheet states to wait at least 20 internal clock cycles */

 Set pvid bit first */

 Set vlan */

 Wait up to 1ms, although 3 us should be enough */

	/* Only detect the size of the FDB table. The size and current

	 * utilization can be queried via devlink.

		/* The registers are locked internally by selecting the

		 * counter. So low and high can be read without reading high

		 * again.

	/* Restriction: Make sure that nobody uses the "private" VLANs. These

	 * VLANs are internally used by the driver to ensure port

	 * separation. Thus, they cannot be used by someone else.

 Setup port vlan membership */

 Setup port vlan membership */

 Default setup for DSA: VLAN <X>: CPU and Port <X> egress untagged. */

 Apply vid to port as egress untagged and port vlan id */

 Apply vid to cpu port as well */

 When joining a vlan_filtering bridge, keep the switch VLAN aware */

 Drop private vlans */

 Enable VLAN awareness */

 Enable private vlans */

 Add mac address */

 Meta data */

 Commit */

 Wait until done */

 Delete by matching idx */

 Wait until done */

 Read values */

 Populate @entry */

/* Retrieve the index of a FDB entry by mac address. Currently we search through

 * the complete table in hardware. If that's too slow, we might have to cache

 * the complete FDB table in software.

	/* Set read pointer to zero: The read of HR_FDBMAX (read-only register)

	 * should reset the internal pointer. But, that doesn't work. The vendor

	 * suggested a subsequent write as workaround. Same for HR_FDBRDH below.

	/* We have to read the complete table, because the switch/driver might

	 * enter new entries anywhere.

 Read entry */

 Force next entry */

 Match found */

 Not found */

 Found */

 Not found */

 Found */

	/* Set read pointer to zero: The read of HR_FDBMAX (read-only register)

	 * should reset the internal pointer. But, that doesn't work. The vendor

	 * suggested a subsequent write as workaround. Same for HR_FDBRDH below.

 Read table */

 Read entry */

 Force next entry */

 Check valid */

 Check port mask */

 Configure port to drop packages with not known vids */

	/* Enable VLAN awareness on the switch. This save due to

	 * ds->vlan_filtering_is_global.

	/* The switch has multiple egress queues per port. The queue is selected

	 * via the PCP field in the VLAN header. The switch internally deals

	 * with traffic classes instead of PCP values and this mapping is

	 * configurable.

	 *

	 * The default mapping is (PCP - TC):

	 *  7 - 7

	 *  6 - 6

	 *  5 - 5

	 *  4 - 4

	 *  3 - 3

	 *  2 - 1

	 *  1 - 0

	 *  0 - 2

	 *

	 * The default should be an identity mapping.

 MAC: 01-1B-19-00-00-00 */

 Management ports */

 TC: 6 as per IEEE 802.1AS */

 MAC: 01-80-C2-00-00-0E */

 Management ports */

 TC: 6 as per IEEE 802.1AS */

	/* Reading this register has side effects. Synchronize against the other

	 * FDB operations.

 Start table read */

 Read current entry */

 Advance read pointer */

 VLAN table */

 FDB table */

 Let's go */

 Enable CPU/Tunnel ports */

	/* Switch config: Keep defaults, enable FDB aging and learning and tag

	 * each frame from/to cpu port for DSA tagging.  Also enable the length

	 * aware shaping mode. This eliminates the need for Qbv guard bands.

 Initial vlan membership to reflect port separation */

 Configure PCP <-> TC mapping */

	/* The VLAN awareness is a global switch setting. Therefore, mixed vlan

	 * filtering setups are not supported.

 Intercept _all_ PTP multicast traffic */

 Register devlink resources with DSA */

	/* The MAC settings are a hardware configuration option and cannot be

	 * changed at run time or by strapping. Therefore the attached PHYs

	 * should be programmed to only advertise settings which are supported

	 * by the hardware.

	/*

	 * Deny VLAN devices on top of lan ports with the same VLAN ids, because

	 * it breaks the port separation due to the private VLANs. Example:

	 *

	 * lan0.100 *and* lan1.100 cannot be used in parallel. However, lan0.99

	 * and lan1.100 works.

 For all ports, check bitmaps */

 Update bitmap */

 Gates states */

 Time interval */

 Commit entry */

 Start schedule at this point of time */

 Arm timer, set seconds and switch schedule */

	/* The switch allows a schedule to be started only eight seconds within

	 * the future. Therefore, check the current PTP time if the schedule is

	 * startable or not.

	/* Use the "cached" time. That should be alright, as it's updated quite

	 * frequently in the PTP code.

 Calculate difference to admin base time */

 First select port */

 Forward base time into the future if needed */

 Set admin base time and switch schedule */

 Check starting time */

 Reschedule */

 First cancel delayed work */

 Then select port */

 Enable gating and keep defaults */

 Cancel pending schedule */

 Setup a new schedule */

 Configure cycle time */

 Check starting time */

 Schedule periodic schedule check */

 First cancel delayed work */

 Then select port */

 Disable gating and return to regular switching flow */

 Does this hellcreek version support Qbv in hardware? */

 cycle time can only be 32bit */

 cycle time extension is not supported */

 Only set command is supported */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0

/* Copyright 2019-2021 NXP

 *

 * This is an umbrella module for all network switches that are

 * register-compatible with Ocelot and that perform I/O to their host CPU

 * through an NPI (Node Processor Interface) Ethernet port.

	/* We don't need to install the rxvlan into the other ports' filtering

	 * tables, because we're just pushing the rxvlan when sending towards

	 * the CPU

	/* tag_8021q.c assumes we are implementing this via port VLAN

	 * membership, which we aren't. So we don't need to add any VCAP filter

	 * for the CPU port.

	/* In rxvlan_add, we had the "if (!pvid) return 0" logic to avoid

	 * installing outer tagging ES0 rules where they weren't needed.

	 * But in rxvlan_del, the API doesn't give us the "flags" anymore,

	 * so that forces us to be slightly sloppy here, and just assume that

	 * if we didn't find an outer_tagging_rule it means that there was

	 * none in the first place, i.e. rxvlan_del is called on a non-pvid

	 * port. This is most probably true though.

/* Alternatively to using the NPI functionality, that same hardware MAC

 * connected internally to the enetc or fman DSA master can be configured to

 * use the software-defined tag_8021q frame format. As far as the hardware is

 * concerned, it thinks it is a "dumb switch" - the queues of the CPU port

 * module are now disconnected from it, but can still be accessed through

 * register-based MMIO.

 Overwrite PGID_CPU with the non-tagging port */

 Restore PGID_CPU */

/* Set up a VCAP IS2 rule for delivering PTP frames to the CPU port module.

 * If the quirk_no_xtr_irq is in place, then also copy those PTP frames to the

 * tag_8021q CPU port.

		/* Redirect to the tag_8021q CPU but also copy PTP packets to

		 * the CPU port module

		/* Trap PTP packets only to the CPU port module (which is

		 * redirected to the NPI port)

	/* The ownership of the CPU port module's queues might have just been

	 * transferred to the tag_8021q tagger from the NPI-based tagger.

	 * So there might still be all sorts of crap in the queues. On the

	 * other hand, the MMIO-based matching of PTP frames is very brittle,

	 * so we need to be careful that there are no extra frames to be

	 * dequeued over MMIO, since we would never know to discard them.

		/* This overwrites ocelot_init():

		 * Do not forward BPDU frames to the CPU port module,

		 * for 2 reasons:

		 * - When these packets are injected from the tag_8021q

		 *   CPU port, we want them to go out, not loop back

		 *   into the system.

		 * - STP traffic ingressing on a user port should go to

		 *   the tag_8021q CPU port, not to the hardware CPU

		 *   port module.

	/* In tag_8021q mode, the CPU port module is unused, except for PTP

	 * frames. So we want to disable flooding of any kind to the CPU port

	 * module, since packets going there will end in a black hole.

		/* Restore the logic from ocelot_init:

		 * do not forward BPDU frames to the front ports.

/* The CPU port module is connected to the Node Processor Interface (NPI). This

 * is the mode through which frames can be injected from and extracted to an

 * external CPU, over Ethernet. In NXP SoCs, the "external CPU" is the ARM CPU

 * running Linux, and this forms a DSA setup together with the enetc or fman

 * DSA master.

 NPI port Injection/Extraction configuration */

 Disable transmission of pause frames */

 Restore hardware defaults */

 Enable transmission of pause frames */

	/* Include the CPU port module (and indirectly, the NPI port)

	 * in the forwarding mask for unknown unicast - the hardware

	 * default value for ANA_FLOODING_FLD_UNICAST excludes

	 * BIT(ocelot->num_phys_ports), and so does ocelot_init,

	 * since Ocelot relies on whitelisting MAC addresses towards

	 * PGID_CPU.

	 * We do this because DSA does not yet perform RX filtering,

	 * and the NPI port does not perform source address learning,

	 * so traffic sent to Linux is effectively unknown from the

	 * switch's perspective.

/* This always leaves the switch in a consistent state, because although the

 * tag_8021q setup can fail, the NPI setup can't. So either the change is made,

 * or the restoration is guaranteed to work.

	/* Ocelot switches copy frames as-is to the CPU, so the flags:

	 * egress-untagged or not, pvid or not, make no difference. This

	 * behavior is already better than what DSA just tries to approximate

	 * when it installs the VLAN with the same flags on the CPU port.

	 * Just accept any configuration, and don't let ocelot deny installing

	 * multiple native VLANs on the NPI port, because the switch doesn't

	 * look at the port tag settings towards the NPI interface anyway.

 Get switch port number from DT */

 Get PHY mode from DT */

/* Hardware initialization done here so that we can allocate structures with

 * devm without fear of dsa_register_switch returning -EPROBE_DEFER and causing

 * us to allocate structures twice (leak memory) and map PCI memory twice

 * (which will not work).

		/* Set the default QoS Classification based on PCP and DEI

		 * bits of vlan tag.

		/* The initial tag protocol is NPI which always returns 0, so

		 * there's no real point in checking for errors.

		/* We trap to the CPU port module all PTP frames, but

		 * felix_rxtstamp() only gets called for event frames.

		 * So we need to avoid sending duplicate general

		 * message frames by running a second BPF classifier

		 * here and dropping those.

	/* If the "no XTR IRQ" workaround is in use, tell DSA to defer this skb

	 * for RX timestamping. Then free it, and poll for its copy through

	 * MMIO in the CPU port module, and inject that into the stack from

	 * ocelot_xtr_poll().

 SPDX-License-Identifier: (GPL-2.0 OR MIT)

/* Copyright 2017 Microsemi Corporation

 * Copyright 2018-2019 NXP

 VCAP_CORE_CFG */

 VCAP_CORE_CACHE */

 VCAP_CONST */

 Addresses are relative to the PCI device's base address */

/* Port MAC 0 Internal MDIO bus through which the SerDes acting as an

 * SGMII/QSGMII MAC PCS can be found.

 Replicated per number of ports (7), register size 4 per port */

 Specific Fields for IS1 Half Key S1_NORMAL */

 Layer-3 Information */

 Layer-4 Information */

 Specific Fields for IS1 Half Key S1_5TUPLE_IP4 */

 The fields below are incorrectly shifted by 2 in the manual */

 Common: 41 bits */

 MAC_ETYPE / MAC_LLC / MAC_SNAP / OAM common */

 MAC_ETYPE (TYPE=000) */

 MAC_LLC (TYPE=001) */

 MAC_SNAP (TYPE=010) */

 MAC_ARP (TYPE=011) */

 IP4_TCP_UDP / IP4_OTHER common */

 IP4_TCP_UDP (TYPE=100) */

 IP4_OTHER (TYPE=101) */

 IP6_STD (TYPE=110) */

 OAM (TYPE=111) */

 HIT_STICKY not included */

 HIT_STICKY not included */

/* CORE_ENA is in SYS:SYSTEM:RESET_CFG

 * RAM_INIT is in SYS:RAM_CTRL:RAM_INIT

 soft-reset the switch core */

 initialize switch mem ~40us */

 enable switch core */

 Not supported on internal to-CPU ports */

/* Watermark encode

 * Bit 8:   Unit; 0:1, 1:16

 * Bit 7-0: Value to be multiplied with unit

	/* This gets added to imdio_regs, which already maps addresses

	 * starting with the proper offset.

 Needed in order to initialize the bus mutex lock */

	/* Enable guard band. The switch will schedule frames without taking

	 * their length into account. Thus we'll always need to enable the

	 * guard band which reserves the time of a maximum sized frame at the

	 * end of the time window.

	 *

	 * Although the ALWAYS_GUARD_BAND_SCH_Q bit is global for all ports, we

	 * need to set PORT_NUM, because subsequent writes to PARAM_CFG_REG_n

	 * operate on the port number.

	/* Hardware errata -  Admin config could not be overwritten if

	 * config is pending, need reset the TAS module

 Rate unit is 100 kbps */

 Avoid using zero rate */

 Burst unit is 4kB */

 Avoid using zero burst size */

	/* The INTB interrupt is used for both PTP TX timestamp interrupt

	 * and preemption status change interrupt on each port.

	 *

	 * - Get txtstamp if have

	 * - TODO: handle preemption. Without handling it, driver may get

	 *   interrupt storm.

 NXP LS1028A */

 SPDX-License-Identifier: (GPL-2.0 OR MIT)

/* Distributed Switch Architecture VSC9953 driver

 * Copyright (C) 2020, Maxim Kochetkov <fido_max@inbox.ru>

 VCAP_CORE_CFG */

 VCAP_CORE_CACHE */

 VCAP_CONST */

 Addresses are relative to the device's base address */

 Replicated per number of ports (11), register size 4 per port */

 VCAP_IS1_HK_OAM_Y1731 not supported */

 Specific Fields for IS1 Half Key S1_NORMAL */

 Layer-3 Information */

 Layer-4 Information */

 Specific Fields for IS1 Half Key S1_5TUPLE_IP4 */

 Common: 41 bits */

 MAC_ETYPE / MAC_LLC / MAC_SNAP / OAM common */

 MAC_ETYPE (TYPE=000) */

 MAC_LLC (TYPE=001) */

 MAC_SNAP (TYPE=010) */

 MAC_ARP (TYPE=011) */

 IP4_TCP_UDP / IP4_OTHER common */

 IP4_TCP_UDP (TYPE=100) */

 IP4_OTHER (TYPE=101) */

 IP6_STD (TYPE=110) */

 HIT_STICKY not included */

 HIT_STICKY not included */

 HIT_CNT not included */

 Wait while MIIM controller becomes idle */

 Wait until MIIM controller becomes idle */

 Write the MIIM COMMAND register */

 Wait while read operation via the MIIM controller is in progress */

/* CORE_ENA is in SYS:SYSTEM:RESET_CFG

 * MEM_INIT is in SYS:SYSTEM:RESET_CFG

 * MEM_ENA is in SYS:SYSTEM:RESET_CFG

 soft-reset the switch core */

 initialize switch mem ~40us */

 enable switch core */

 Not supported on internal to-CPU ports */

/* Watermark encode

 * Bit 9:   Unit; 0:1, 1:16

 * Bit 8-0: Value to be multiplied with unit

 Needed in order to initialize the bus mutex lock */

 SPDX-License-Identifier: GPL-2.0

/*

 * Microchip switch driver main logic

 *

 * Copyright (C) 2017-2019 Microchip Technology Inc.

 Port is a member of the bridge and is forwarding. */

 Some ports may not have MIB counters before SWITCH_COUNTER_NUM. */

 last one in storage */

 Some ports may not have MIB counters after SWITCH_COUNTER_NUM. */

		/* Only read MIB counters when the port is told to do.

		 * If not, read only dropped counters when link is not up.

 Read all MIB counters when the link is going down. */

 timer started */

 Only read dropped counters if no link. */

	/* port_stp_state_set() will be called after to put the port in

	 * appropriate state so there is no need to do anything.

	/* port_stp_state_set() will be called after to put the port in

	 * forwarding state so there is no need to do anything.

 Found one already in static MAC table. */

 Remember the first empty entry. */

 no available entry */

 add entry */

 Need a way to map VID to FID. */

 Found one already in static MAC table. */

 no available entry */

 clear port */

 setup slave port */

	/* port_stp_state_set() will be called after to enable the port so

	 * there is no need to do anything.

	/* Host port interface will be self detected, or specifically set in

	 * device tree.

 Read MIB counters every 30 seconds to avoid overflow. */

 Start the MIB timer. */

 timer started */

 SPDX-License-Identifier: GPL-2.0

/*

 * Microchip KSZ9477 series register access through SPI

 *

 * Copyright (C) 2017-2019 Microchip Technology Inc.

 setup spi */

 Main DSA driver may not be started yet. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Microchip KSZ8795 series register access through SPI

 *

 * Copyright (C) 2017 Microchip Technology Inc.

 *	Tristram Ha <Tristram.Ha@microchip.com>

 setup spi */

 Main DSA driver may not be started yet. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Microchip KSZ8795 switch driver

 *

 * Copyright (C) 2017 Microchip Technology Inc.

 *	Tristram Ha <Tristram.Ha@microchip.com>

 reset switch */

 reset switch */

 Number of queues can only be 1, 2, or 4. */

 Default is port based for egress rate limit. */

	/* It is almost guaranteed to always read the valid bit because of

	 * slow SPI speed.

	/* It is almost guaranteed to always read the valid bit because of

	 * slow SPI speed.

 enable the port for flush/freeze function */

 disable the port after freeze is done */

 flush all enabled port MIB counters */

 Some ports may not have MIB counters before SWITCH_COUNTER_NUM. */

 last one in storage */

 Some ports may not have MIB counters after SWITCH_COUNTER_NUM. */

 Entry is not ready for accessing. */

 Entry is ready for accessing. */

 There is no valid entry in the table. */

 At least one valid entry in the table. */

 Check out how many valid entry in the table. */

 Do not support PHY reset function. */

 Fiber port does not support auto-negotiation. */

 ksz88x3 uses the same tag schema as KSZ9893 */

	/* Silicon Errata Sheet (DS80000830A):

	 * Port 1 does not work with LinkMD Cable-Testing.

	 * Port 1 does not respond to received PAUSE control frames.

 This function is also used internally. */

 Port is a member of a bridge. */

 Port membership may share register with STP state. */

 Check if forwarding needs to be updated. */

	/* When topology has changed the function ksz_update_port_member

	 * should be called to modify port forwarding behavior.

 Flush all ports. */

 Discard packets with VID not enabled on the switch */

 Discard packets with VID not enabled on the ingress port */

	/* If a VLAN is added with untagged flag different from the

	 * port's Remove Tag flag, we need to change the latter.

	 * Ignore VID 0, which is always untagged.

	 * Ignore CPU port, which will always be tagged.

		/* Reject attempts to add a VLAN that requires the

		 * Remove Tag flag to be changed, unless there are no

		 * other VLANs currently configured.

 Skip the VID we are going to add or reconfigure */

 First time to setup the VLAN entry. */

 Need to find a way to map VID to FID. */

 change PVID */

 Invalidate the entry if no more member. */

 configure mirror port */

 Configure MII interface for proper network communication. */

 enable broadcast storm limit */

 disable DiffServ priority */

 replace priority */

 enable 802.1p priority */

 Switch marks the maximum frame with extra byte as oversize. */

		/* Initialize to non-zero so that ksz_cfg_port_member() will

		 * be called.

 Last port may be disabled. */

 Enable automatic fast aging when link changed detected. */

 Enable aggressive back off algorithm in half duplex mode. */

	/*

	 * Make sure unicast VLAN boundary is set as default and

	 * enable no excessive collision drop.

 set broadcast storm protection 10% rate */

 Setup STP address for STP operation. */

 Allow all the expected bits */

	/* Silicon Errata Sheet (DS80000830A):

	 * "Port 1 does not respond to received flow control PAUSE frames"

	 * So, disable Pause support on "Port 1" (port == 0) for all ksz88x3

	 * switches.

 Asym pause is not supported on KSZ8863 and KSZ8873 */

 10M and 100M are only supported */

 read chip id */

 can be configured as cpu port */

 total cpu and user ports */

		/*

		 * WARNING

		 * =======

		 * KSZ8794 is similar to KSZ8795, except the port map

		 * contains a gap between external and CPU ports, the

		 * port map is NOT continuous. The per-port register

		 * map is shifted accordingly too, i.e. registers at

		 * offset 0x40 are NOT used on KSZ8794 and they ARE

		 * used on KSZ8795 for external port 3.

		 *           external  cpu

		 * KSZ8794   0,1,2      4

		 * KSZ8795   0,1,2,3    4

		 * KSZ8765   0,1,2,3    4

 can be configured as cpu port */

 total cpu and user ports */

 can be configured as cpu port */

 total cpu and user ports */

 can be configured as cpu port */

 no switch found */

 set the real number of ports */

	/* We rely on software untagging on the CPU port, so that we

	 * can support both tagged and untagged VLANs

	/* VLAN filtering is partly controlled by the global VLAN

	 * Enable flag

 SPDX-License-Identifier: GPL-2.0

/*

 * Microchip KSZ8863 series register access through SMI

 *

 * Copyright (C) 2019 Pengutronix, Michael Grzeschik <kernel@pengutronix.de>

/* Serial Management Interface (SMI) uses the following frame format:

 *

 *       preamble|start|Read/Write|  PHY   |  REG  |TA|   Data bits      | Idle

 *               |frame| OP code  |address |address|  |                  |

 * read | 32x1´s | 01  |    00    | 1xRRR  | RRRRR |Z0| 00000000DDDDDDDD |  Z

 * write| 32x1´s | 01  |    00    | 0xRRR  | RRRRR |10| xxxxxxxxDDDDDDDD |  Z

 *

 Main DSA driver may not be started yet. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Microchip KSZ9477 switch driver main logic

 *

 * Copyright (C) 2017-2019 Microchip Technology Inc.

 Used with variable features to indicate capabilities. */

 wait to be cleared */

 wait to be cleared */

 update vlan cache table */

 reset switch */

 turn off SPI DO Edge select */

 default configuration */

 disable interrupts */

 set broadcast storm protection 10% rate */

 retain the flush/freeze bit */

 failed to read MIB. get out of loop */

 count resets upon read */

 enable/disable the port for flush/freeze function */

 used by MIB counter reading code to know freeze is enabled */

 flush all enabled port MIB counters */

	/* No real PHY after this. Simulate the PHY.

	 * A fixed PHY can be setup in the device tree, but this function is

	 * still called for that port during initialization.

	 * For RGMII PHY there is no way to access it so the fixed PHY should

	 * be used.  For SGMII PHY the supporting code will be added later.

 No real PHY after this. */

 No gigabit support.  Do not write to this register. */

 This function is also used internally. */

 Port is a member of a bridge. */

 Port membership may share register with STP state. */

 Check if forwarding needs to be updated. */

	/* When topology has changed the function ksz_update_port_member

	 * should be called to modify port forwarding behavior.

 flush individual port */

 flush all */

 change PVID */

 find any entry with mac & vid */

 start read operation */

 wait to be finished */

 read ALU entry */

 update ALU entry */

 wait to be finished */

 read any entry with mac & vid */

 start read operation */

 wait to be finished */

 clear forwarding port */

 if there is no port to forward, clear table */

 wait to be finished */

 start ALU search */

 read ALU table */

 stop ALU search */

 find empty slot first */

 wait to be finished */

 read ALU static table */

 check this has same vid & mac address */

 found matching one */

 found empty one */

 no available entry */

 add entry */

 wait to be finished */

 find empty slot first */

 wait to be finished */

 read ALU static table */

 check this has same vid & mac address */

 found matching one */

 no available entry */

 clear port */

 delete entry */

 wait to be finished */

 configure mirror port */

	/* Apply PHY settings to address errata listed in

	 * KSZ9477, KSZ9897, KSZ9896, KSZ9567, KSZ8565

	 * Silicon Errata and Data Sheet Clarification documents:

	 *

	 * Register settings are needed to improve PHY receive performance

	/* Transmit waveform amplitude can be improved

	 * (1000BASE-T, 100BASE-TX, 10BASE-Te)

	/* Energy Efficient Ethernet (EEE) feature select must

	 * be manually disabled (except on KSZ8565 which is 100Mbit)

	/* Register settings are required to meet data sheet

	 * supply current specifications

 enable tag tail for host port */

 set back pressure */

 enable broadcast storm limit */

 disable DiffServ priority */

 replace priority */

 enable 802.1p priority */

 do not force flow control */

 force flow control */

 configure MAC to 1G & RGMII mode */

 On KSZ9893, disable RGMII in-band status support */

 clear pending interrupts */

			/* Read from XMII register to determine host port

			 * interface.  If set specifically in device tree

			 * note the difference to help debugging.

 enable cpu port */

		/* Initialize to non-zero so that ksz_cfg_port_member() will

		 * be called.

 SGMII PHY detection code is not implemented yet. */

 Required for port partitioning. */

 Do not work correctly with tail tagging. */

 accept packet up to 2000bytes */

 queue based egress rate limit */

 enable global MIB counter freeze function */

 start switch */

 turn off SPI DO Edge select */

 read chip id */

 Number of ports can be reduced depending on chip. */

 Default capability is gigabit capable. */

 Chip is from KSZ9893 design. */

 Chip does not support gigabit. */

 Chip uses new XMII register definitions. */

 Chip does not support gigabit. */

 Change chip id to known ones so it can be matched against them. */

 can be configured as cpu port */

 total physical port count */

 can be configured as cpu port */

 total physical port count */

 can be configured as cpu port */

 total port count */

 can be configured as cpu port */

 total physical port count */

 no switch found */

 set the real number of ports */

 The MAC actually cannot run in 1000 half-duplex mode. */

 PHY does not support gigabit. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Microchip KSZ9477 series register access through I2C

 *

 * Copyright (C) 2018-2019 Microchip Technology Inc.

 Main DSA driver may not be started yet. */

/*

 * B53 register access through SPI

 *

 * Copyright (C) 2011-2013 Jonas Gorski <jogo@openwrt.org>

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 sentinel */ }

/*

 * B53 switch driver main logic

 *

 * Copyright (C) 2011-2013 Jonas Gorski <jogo@openwrt.org>

 * Copyright (C) 2016 Florian Fainelli <f.fainelli@gmail.com>

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 BCM5365 MIB counters */

 BCM63xx MIB counters */

 MIB counters */

	/* Include IMP port in dumb forwarding mode

	/* Look at B53_UC_FWD_EN and B53_MC_FWD_EN to decide whether

	 * frames should be flooded or not.

 enable the high 8 bit vid check on 5325 */

 Only age dynamic entries (default behavior) */

	/* Enable the IMP port to be in the same VLAN as the other ports

	 * on a per-port basis such that we only have Port i and IMP in

	 * the same VLAN.

 Clear the Rx and Tx disable bits and set to no spanning tree */

	/* Set this port, and only this one to be in the default VLAN,

	 * if member of a bridge, restore its membership prior to

	 * bringing down this port.

 If EEE was enabled, restore it */

 Disable Tx/Rx for the port */

 Resolve which bit controls the Broadcom tag */

 Enable management mode if tagging is requested */

 Configure the appropriate IMP port */

 Enable Broadcom tags for IMP port */

 Registers below are only accessible on newer devices */

	/* Enable reception Broadcom tag for CPU TX (switch RX) to

	 * allow us to tag outgoing frames

	/* Enable transmission of Broadcom tags from the switch (CPU RX) to

	 * allow delivering frames to the per-port net_devices

 BCM5325 CPU port is at 8 */

 clear all vlan entries */

	/* Create an untagged VLAN entry for the default PVID in case

	 * CONFIG_VLAN_8021Q is disabled and there are no calls to

	 * dsa_slave_vlan_rx_add_vid() to create the default VLAN

	 * entry. Do this only when the tagging protocol is not

	 * DSA_TAG_PROTO_NONE

	/* Upon initial call we have not set-up any VLANs, but upon

	 * system resume, we need to restore all VLAN entries.

	/* Reset sequence: RESET low(50ms)->high(20ms)

	/* This is specific to 58xx devices here, do not use is58xx() which

	 * covers the larger Starfigther 2 family, including 7445/7278 which

	 * still use this driver as a library and need to perform the reset

	 * earlier.

 reset vlans */

 disable switching */

 enable switching */

 These ports typically do not have built-in PHYs */

	/* Request bridge PVID untagged when DSA_TAG_PROTO_NONE is set

	 * which forces the CPU port to be tagged in all VLANs.

	/* Configure IMP/CPU port, disable all other ports. Enabled

	 * ports will be configured with .port_enable

 Override the port settings */

 Override the port settings */

 Enable flow control on BCM5301x's CPU port */

		/* Configure the port RGMII clock delay by DLL disabled and

		 * tx_clk aligned timing (restoring to reset defaults)

		/* PHY_INTERFACE_MODE_RGMII_TXID means TX internal delay, make

		 * sure that we enable the port TX clock internal delay to

		 * account for this internal delay that is inserted, otherwise

		 * the switch won't be able to receive correctly.

		 *

		 * PHY_INTERFACE_MODE_RGMII means that we are not introducing

		 * any delay neither on transmission nor reception, so the

		 * BCM53125 must also be configured accordingly to account for

		 * the lack of delay and introduce

		 *

		 * The BCM53125 switch has its RX clock and TX clock control

		 * swapped, hence the reason why we modify the TX clock path in

		 * the "RGMII" case

 configure MII port if necessary */

 reverse mii needs to be enabled */

 Re-negotiate EEE if it was enabled already */

 Allow all the expected bits */

	/* With the exclusion of 5325/5365, MII, Reverse MII and 802.3z, we

	 * support Gigabit, including Half duplex.

	/* Port 7 on 7278 connects to the ASP's UniMAC which is not capable of

	 * receiving VLAN tagged frames at all, we can still allow the port to

	 * be configured for egress untagged.

 Address Resolution Logic routines. Caller must hold &dev->arl_mutex. */

 Read the bins */

 Convert the array into a 64-bit MAC */

 Perform a read for the given MAC and VID */

 Issue a read operation for this MAC */

 If this is a read, just finish now */

 We could not find a matching MAC, so reset to a new entry */

	/* For multicast address, the port is a bitmask and the validity

	 * is determined by having at least one port being still active

	/* 5325 and 5365 require some more massaging, but could

	 * be supported eventually

 Start search operation */

	/* 5325 and 5365 require some more massaging, but could

	 * be supported eventually

	/* On 7278, port 7 which connects to the ASP should only receive

	 * traffic from matching CFP rules.

	/* Make this port leave the all VLANs join since we will have proper

	 * VLAN entries from now on

		/* Add this local port to the remote port VLAN control

		 * membership and update the remote port bitmask

	/* Configure the local port VLAN control membership to include

	 * remote ports and update the local port bitmask

 Don't touch the remaining ports */

 Prevent self removal to preserve isolation */

 Make this port join all VLANs without VLAN entries */

	/* Broadcom switches will accept enabling Broadcom tags on the

	 * following ports: 5, 7 and 8, any other port is not supported

 Older models require a different 6 byte tag */

	/* Broadcom BCM58xx chips have a flow accelerator on Port 8

	 * which requires us to use the prepended Broadcom tag type

 Update the desired ingress/egress register */

	/* Now look at the other one to know if we can disable mirroring

	 * entirely

 Both no longer have ports, let's disable mirroring */

/* Returns 0 if EEE was not enabled, or 1 otherwise

 pdata must provide them */

 Starfighter 2 */

 check which BCM5325x version we have */

 check reserved bits */

 BCM5325E */

 BCM5325F - do not use port 4 */

 On the BCM47XX SoCs this is the supported internal switch.*/

 BCM5325M */

 Include non standard CPU port built-in PHYs to be probed */

	/* Let DSA handle the case were multiple bridges span the same switch

	 * device and different VLAN awareness settings are requested, which

	 * would be breaking filtering semantics for any of the other bridge

	 * devices. (not hardware supported)

		/* BCM5325 and BCM5365 do not have this register so reads

		 * return 0. But the read operation did succeed, so assume this

		 * is one of them.

		 *

		 * Next check if we can write to the 5325's VTA register; for

		 * 5365 it is read only.

/*

 * B53 register access through MII registers

 *

 * Copyright (C) 2011-2013 Jonas Gorski <jogo@openwrt.org>

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 MII registers */

 MII Page register */

 MII Address register */

 MII Data register 0 */

 MII Data register 1 */

 MII Data register 2 */

 MII Data register 3 */

 set page number */

 set register address */

 check if operation completed */

	/* allow the generic PHY driver to take over the non-management MDIO

	 * addresses

 read the first port's id */

	/* BCM5325, BCM539x (OUI_1)

	 * BCM53125, BCM53128 (OUI_2)

	 * BCM5365 (OUI_3)

	/* First probe will come from SWITCH_MDIO controller on the 7445D0

	 * switch, which will conflict with the 7445 integrated switch

	 * pseudo-phy (we end-up programming both). In that case, we return

	 * -EPROBE_DEFER for the first time we get here, and wait until we come

	 * back with the slave MDIO bus which has the correct indirection

	 * layer setup

 we don't use page 0xff, so force a page set */

 sentinel */ },

/*

 * B53 register access through Switch Register Access Bridge Registers

 *

 * Copyright (C) 2013 Hauke Mehrtens <hauke@hauke-m.de>

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 command and status register of the SRAB */

 high order word of write data to switch registe */

 low order word of write data to switch registe */

 high order word of read data from switch register */

 low order word of read data from switch register */

 command and status register of the SRAB */

 the register captures interrupt pulses from the switch */

 Port mux configuration registers */

 set register address */

 check if operation completed */

 Acknowledge the interrupt */

	/* Interrupt is optional and was not specified, do not make

	 * this fatal

 sentinel */ },

 Clear all pending interrupts */

 There is no port 6 */

	/* Obtain the port mux configuration so we know which lanes

	 * actually map to SerDes lanes

 SPDX-License-Identifier: GPL-2.0 or BSD-3-Clause

/*

 * Northstar Plus switch SerDes/SGMII PHY main logic

 *

 * Copyright (C) 2018 Florian Fainelli <f.fainelli@gmail.com>

/*

 * B53 register access through memory mapped registers

 *

 * Copyright (C) 2012-2013 Jonas Gorski <jogo@openwrt.org>

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0

/* Copyright 2020 NXP

	/* Make the broadcast policers of all ports attached to this block

	 * point to the newly allocated policer

 TODO: support per-flow MTU */

	/* Make the policers for traffic class @tc of all ports attached to

	 * this block point to the newly allocated policer

 TODO: support per-flow MTU */

		/* Delay scheduling configuration until DESTPORTS has been

		 * populated by all other actions.

 SPDX-License-Identifier: GPL-2.0

/* Copyright 2021 NXP

	/* This addressing scheme reserves register 0xff for the bank address

	 * register, so that can never be addressed.

	/* This addressing scheme reserves register 0xff for the bank address

	 * register, so that can never be addressed.

 Clause 22 read */

 Clause 22 write */

	/* There is no PHY on this MDIO bus => mask out all PHY addresses

	 * from auto probing.

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2018, Sensor-Technik Wiedemann GmbH

 * Copyright (c) 2018-2019, Vladimir Oltean <olteanv@gmail.com>

 Configure the optional reset pin and bring up switch */

 Wait for minimum reset pulse length */

 Wait until chip is ready after reset */

 Return an invalid entry index if not found */

	/* Only force dropping of untagged packets when the port is under a

	 * VLAN-aware bridge. When the tag_8021q pvid is used, we are

	 * deliberately removing the RX VLAN from the port's VMEMB_PORT list,

	 * to prevent DSA tag spoofing from the link partner. Untagged packets

	 * are the only ones that should be received with tag_8021q, so

	 * definitely don't drop them.

		/* Enable all 8 priority queues on egress.

		 * Every queue i holds top[i] - base[i] frames.

		 * Sum of top[i] - base[i] is 511 (max hardware limit).

 Keep standard IFG of 12 bytes on egress. */

		/* Always put the MAC speed in automatic mode, where it can be

		 * adjusted at runtime by PHYLINK.

 No static correction for 1-step 1588 events */

 Disable aging for critical TTEthernet traffic */

 Internal VLAN (pvid) to apply to untagged ingress */

 Don't drop traffic with other EtherType than ETH_P_IP */

 Don't drop double-tagged traffic */

 Don't drop untagged traffic */

 Don't retag 802.1p (VID 0) traffic with the pvid */

		/* Disable learning and I/O on user ports by default -

		 * STP will enable it.

 Discard previous MAC Configuration Table */

		/* Let sja1105_bridge_stp_state_set() keep address learning

		 * enabled for the DSA ports. CPU ports use software-assisted

		 * learning to ensure that only FDB entries belonging to the

		 * bridge are learned, and that they are learned towards all

		 * CPU ports in a cross-chip topology if multiple CPU ports

		 * exist.

		/* Disallow untagged packets from being received on the

		 * CPU and DSA ports.

 Discard previous xMII Mode Parameters Table */

 Override table based on PHYLINK DT bindings */

	/* We only populate the FDB table through dynamic L2 Address Lookup

	 * entries, except for a special entry at the end which is a catch-all

	 * for unknown multicast and will be used to control flooding domain.

 All L2 multicast addresses have an odd first octet */

 Flood multicast to every port by default */

 Learned FDB entries are forgotten after 300 seconds */

 All entries within a FDB bin are available for learning */

 And the P/Q/R/S equivalent setting: */

 2^8 + 2^5 + 2^3 + 2^2 + 2^1 + 1 in Koopman notation */

		/* This selects between Independent VLAN Learning (IVL) and

		 * Shared VLAN Learning (SVL)

		/* Don't discard management traffic based on ENFPORT -

		 * we don't perform SMAC port enforcement anyway, so

		 * what we are setting here doesn't matter.

		/* Don't learn SMAC for mac_fltres1 and mac_fltres0.

		 * Maybe correlate with no_linklocal_learn from bridge driver?

 P/Q/R/S only */

		/* Dynamically learned FDB entries can overwrite other (older)

		 * dynamic FDB entries

 This table only has a single entry */

/* Set up a default VLAN for untagged traffic injected from the CPU

 * using management routes (e.g. STP, PTP) as opposed to tag_8021q.

 * All DT-defined ports are members of this VLAN, and there are no

 * restrictions on forwarding (since the CPU selects the destination).

 * Frames from this VLAN will always be transmitted as untagged, and

 * neither the bridge nor the 8021q module cannot create this VLAN ID.

	/* First 5 entries in the L2 Forwarding Table define the forwarding

	 * rules and the VLAN PCP to ingress queue mapping.

	 * Set up the ingress queue mapping first.

	/* Then manage the forwarding domain for user ports. These can forward

	 * only to the always-on domain (CPU port and DSA links)

	/* Then manage the forwarding domain for DSA links and CPU ports (the

	 * always-on domain). These can send packets to any enabled port except

	 * themselves.

	/* In odd topologies ("H" connections where there is a DSA link to

	 * another switch which also has its own CPU port), TX packets can loop

	 * back into the system (they are flooded from CPU port 1 to the DSA

	 * link, and from there to CPU port 2). Prevent this from happening by

	 * cutting RX from DSA links towards our CPU port, if the remote switch

	 * has its own CPU port and therefore doesn't need ours for network

	 * stack termination.

	/* Finally, manage the egress flooding domain. All ports start up with

	 * flooding enabled, including the CPU port and DSA links.

	/* Next 8 entries define VLAN PCP mapping from ingress to egress.

	 * Create a one-to-one mapping.

 Nothing to do for SJA1105 */

 Repeat the configuration done for vlan_pmap */

 This table only has a single entry */

 Disallow dynamic reconfiguration of vlan_pmap */

 Use a single memory partition for all ingress queues */

	/* If we have any critical-traffic virtual links, we need to reserve

	 * some frame buffer memory for them. At the moment, hardcode the value

	 * at 100 blocks of 128 bytes of memory each. This leaves 829 blocks

	 * remaining for best-effort traffic. TODO: figure out a more flexible

	 * way to perform the frame buffer partitioning.

/* SJA1110 TDMACONFIGIDX values:

 *

 *      | 100 Mbps ports |  1Gbps ports  | 2.5Gbps ports | Disabled ports

 * -----+----------------+---------------+---------------+---------------

 *   0  |   0, [5:10]    |     [1:2]     |     [3:4]     |     retag

 *   1  |0, [5:10], retag|     [1:2]     |     [3:4]     |       -

 *   2  |   0, [5:10]    |  [1:3], retag |       4       |       -

 *   3  |   0, [5:10]    |[1:2], 4, retag|       3       |       -

 *   4  |  0, 2, [5:10]  |    1, retag   |     [3:4]     |       -

 *   5  |  0, 1, [5:10]  |    2, retag   |     [3:4]     |       -

 *  14  |   0, [5:10]    | [1:4], retag  |       -       |       -

 *  15  |     [5:10]     | [0:4], retag  |       -       |       -

	/* All the settings below are "as opposed to SGMII", which is the

	 * other pinmuxing option.

 Retagging port will operate at 1 Gbps */

 Retagging port will operate at 100 Mbps */

 Retagging port will operate at 1 Gbps */

 Retagging port will operate at 1 Gbps */

 Retagging port will operate at 1 Gbps */

	/* The host port is the destination for traffic matching mac_fltres1

	 * and mac_fltres0 on all ports except itself. Default to an invalid

	 * value.

	/* Link-local traffic received on casc_port will be forwarded

	 * to host_port without embedding the source port and device ID

	 * info in the destination MAC address, and no RX timestamps will be

	 * taken either (presumably because it is a cascaded port and a

	 * downstream SJA switch already did that).

	 * To disable the feature, we need to do different things depending on

	 * switch generation. On SJA1105 we need to set an invalid port, while

	 * on SJA1110 which support multiple cascaded ports, this field is a

	 * bitmask so it must be left zero.

		/* Upstream ports can be dedicated CPU ports or

		 * upstream-facing DSA links

 Cascade ports are downstream-facing DSA links */

 Allow dynamic changing of the mirror port */

		/* Priority queue for link-local management frames

		 * (both ingress to and egress from CPU - PTP, STP etc)

 Default to an invalid value */

 No TTEthernet */

 Only update correctionField for 1-step PTP (L2 transport) */

		/* Forcefully disable VLAN filtering by telling

		 * the switch that VLAN has a different EtherType.

 Enable the TTEthernet engine on SJA1110 */

 Set up the EtherType for control packets on SJA1110 */

 This table only has a single entry */

 Discard previous AVB Parameters Table */

 Configure the MAC addresses for meta frames */

	/* On P/Q/R/S, configure the direction of the PTP_CLK pin as input by

	 * default. This is because there might be boards with a hardware

	 * layout where enabling the pin as output might cause an electrical

	 * clash. On E/T the pin is always an output, which the board designers

	 * probably already knew, so even if there are going to be electrical

	 * issues, there's nothing we can do.

/* The L2 policing table is 2-stage. The table is looked up for each frame

 * according to the ingress port, whether it was broadcast or not, and the

 * classified traffic class (given by VLAN PCP). This portion of the lookup is

 * fixed, and gives access to the SHARINDX, an indirection register pointing

 * within the policing table itself, which is used to resolve the policer that

 * will be used for this frame.

 *

 *  Stage 1                              Stage 2

 * +------------+--------+              +---------------------------------+

 * |Port 0 TC 0 |SHARINDX|              | Policer 0: Rate, Burst, MTU     |

 * +------------+--------+              +---------------------------------+

 * |Port 0 TC 1 |SHARINDX|              | Policer 1: Rate, Burst, MTU     |

 * +------------+--------+              +---------------------------------+

 *    ...                               | Policer 2: Rate, Burst, MTU     |

 * +------------+--------+              +---------------------------------+

 * |Port 0 TC 7 |SHARINDX|              | Policer 3: Rate, Burst, MTU     |

 * +------------+--------+              +---------------------------------+

 * |Port 1 TC 0 |SHARINDX|              | Policer 4: Rate, Burst, MTU     |

 * +------------+--------+              +---------------------------------+

 *    ...                               | Policer 5: Rate, Burst, MTU     |

 * +------------+--------+              +---------------------------------+

 * |Port 1 TC 7 |SHARINDX|              | Policer 6: Rate, Burst, MTU     |

 * +------------+--------+              +---------------------------------+

 *    ...                               | Policer 7: Rate, Burst, MTU     |

 * +------------+--------+              +---------------------------------+

 * |Port 4 TC 7 |SHARINDX|                 ...

 * +------------+--------+

 * |Port 0 BCAST|SHARINDX|                 ...

 * +------------+--------+

 * |Port 1 BCAST|SHARINDX|                 ...

 * +------------+--------+

 *    ...                                  ...

 * +------------+--------+              +---------------------------------+

 * |Port 4 BCAST|SHARINDX|              | Policer 44: Rate, Burst, MTU    |

 * +------------+--------+              +---------------------------------+

 *

 * In this driver, we shall use policers 0-4 as statically alocated port

 * (matchall) policers. So we need to make the SHARINDX for all lookups

 * corresponding to this ingress port (8 VLAN PCP lookups and 1 broadcast

 * lookup) equal.

 * The remaining policers (40) shall be dynamically allocated for flower

 * policers, where the key is either vlan_prio or dst_mac ff:ff:ff:ff:ff:ff.

 Discard previous L2 Policing Table */

 Setup shared indices for the matchall policers */

 Only SJA1110 has multicast policers */

 Setup the matchall policer parameters */

 Burst size in bytes */

 Build static configuration */

 Send initial configuration to hardware via SPI */

/* This is the "new way" for a MAC driver to configure its RGMII delay lines,

 * based on the explicit "rx-internal-delay-ps" and "tx-internal-delay-ps"

 * properties. It has the advantage of working with fixed links and with PHYs

 * that apply RGMII delays too, and the MAC driver needs not perform any

 * special checks.

 *

 * Previously we were acting upon the "phy-mode" property when we were

 * operating in fixed-link, basically acting as a PHY, but with a reversed

 * interpretation: PHY_INTERFACE_MODE_RGMII_TXID means that the MAC should

 * behave as if it is connected to a PHY which has applied RGMII delays in the

 * TX direction. So if anything, RX delays should have been added by the MAC,

 * but we were adding TX delays.

 *

 * If the "{rx,tx}-internal-delay-ps" properties are not specified, we fall

 * back to the legacy behavior and apply delays on fixed-link ports based on

 * the reverse interpretation of the phy-mode. This is a deviation from the

 * expected default behavior which is to simply apply no delays. To achieve

 * that behavior with the new bindings, it is mandatory to specify

 * "{rx,tx}-internal-delay-ps" with a value of 0.

 Get switch port number from DT */

 Get PHY mode from DT */

			/* phy-handle is missing, but fixed-link isn't.

			 * So it's a fixed link. Default to PHY role.

 Convert link speed from SJA1105 to ethtool encoding */

 Set link speed in the MAC configuration for a specific port. */

	/* On P/Q/R/S, one can read from the device via the MAC reconfiguration

	 * tables. On E/T, MAC reconfig tables are not readable, only writable.

	 * We have to *know* what the MAC looks like.  For the sake of keeping

	 * the code common, we'll use the static configuration tables as a

	 * reasonable approximation for both E/T and P/Q/R/S.

		/* PHYLINK called sja1105_mac_config() to inform us about

		 * the state->interface, but AN has not completed and the

		 * speed is not yet valid. UM10944.pdf says that setting

		 * SJA1105_SPEED_AUTO at runtime disables the port, so that is

		 * ok for power consumption in case AN will never complete -

		 * otherwise PHYLINK should come back with a new update.

	/* Overwrite SJA1105_SPEED_AUTO from the static MAC configuration

	 * table, since this will be used for the clocking setup, and we no

	 * longer need to store it in the static config (already told hardware

	 * we want auto during upload phase).

	 * Actually for the SGMII port, the MAC is fixed at 1 Gbps and

	 * we need to configure the PCS only (if even that).

 Write to the dynamic reconfiguration tables */

	/* Reconfigure the PLLs for the RGMII interfaces (required 125 MHz at

	 * gigabit, 25 MHz at 100 Mbps and 2.5 MHz at 10 Mbps). For MII and

	 * RMII no change of the clock setup is required. Actually, changing

	 * the clock setup does interrupt the clock signal for a certain time

	 * which causes trouble for all PHYs relying on this signal.

/* The SJA1105 MAC programming model is through the static config (the xMII

 * Mode table cannot be dynamically reconfigured), and we have to program

 * that early (earlier than PHYLINK calls us, anyway).

 * So just error out in case the connected PHY attempts to change the initial

 * system interface MII protocol from what is defined in the DT, at least for

 * now.

	/* Construct a new mask which exhaustively contains all link features

	 * supported by the MAC, and then apply that (logical AND) to what will

	 * be sent to the PHY for "marketing".

	/* include/linux/phylink.h says:

	 *     When @state->interface is %PHY_INTERFACE_MODE_NA, phylink

	 *     expects the MAC driver to return all supported link modes.

	/* The MAC does not support pause frames, and also doesn't

	 * support half-duplex traffic modes.

/* We want FDB entries added statically through the bridge command to persist

 * across switch resets, which are a common thing during normal SJA1105

 * operation. So we have to back them up in the static configuration tables

 * and hence apply them on next static config upload... yay!

 Can't delete a missing entry. */

 No match => new entry */

 Assign pointer after the resize (it may be new memory) */

	/* We have a match.

	 * If the job was to add this FDB entry, it's already done (mostly

	 * anyway, since the port forwarding mask may have changed, case in

	 * which we update it).

	 * Otherwise we have to delete it.

	/* To remove, the strategy is to overwrite the element with

	 * the last one, and then reduce the array size by 1

/* First-generation switches have a 4-way set associative TCAM that

 * holds the FDB entries. An FDB index spans from 0 to 1023 and is comprised of

 * a "bin" (grouping of 4 entries) and a "way" (an entry within a bin).

 * For the placement of a newly learnt FDB entry, the switch selects the bin

 * based on a hash function, and the way within that bin incrementally.

		/* Skip unused entries, optionally marking them

		 * into the return value

 Return an invalid entry index if not found */

		/* We have an FDB entry. Is our port in the destination

		 * mask? If yes, we need to do nothing. If not, we need

		 * to rewrite the entry by adding this port to it.

		/* We don't have an FDB entry. We construct a new one and

		 * try to find a place for it within the FDB table.

			/* Bin is full, need to evict somebody.

			 * Choose victim at random. If you get these messages

			 * often, you may need to consider changing the

			 * distribution function:

			 * static_config[BLK_IDX_L2_LOOKUP_PARAMS].entries->poly

 Evict entry */

 Invalidate a dynamically learned entry if that exists */

	/* We have an FDB entry. Is our port in the destination mask? If yes,

	 * we need to remove it. If the resulting port mask becomes empty, we

	 * need to completely evict the FDB entry.

	 * Otherwise we just write it back.

 Search for an existing entry in the FDB table */

		/* Found a static entry and this port is already in the entry's

		 * port mask => job done

		/* l2_lookup.index is populated by the switch in case it

		 * found something.

	/* Not found, so try to find an unused spot in the FDB.

	 * This is slightly inefficient because the strategy is knock-knock at

	 * every possible position from 0 to 1023.

	/* The switch learns dynamic entries and looks up the FDB left to

	 * right. It is possible that our addition was concurrent with the

	 * dynamic learning of the same address, so now that the static entry

	 * has been installed, we are certain that address learning for this

	 * particular address has been turned off, so the dynamic entry either

	 * is in the FDB at an index smaller than the static one, or isn't (it

	 * can also be at a larger index, but in that case it is inactive

	 * because the static FDB entry will match first, and the dynamic one

	 * will eventually age out). Search for a dynamically learned address

	 * prior to our static one and invalidate it.

	/* Decide whether we remove just this port from the FDB entry,

	 * or if we remove it completely.

 No fdb entry at i, not an issue */

		/* FDB dump callback is per port. This means we have to

		 * disregard a valid entry if it's not for this port, even if

		 * only to revisit it later. This is inefficient because the

		 * 1024-sized FDB table needs to be traversed 4 times through

		 * SPI during a 'bridge fdb show' command.

 We need to hide the FDB entry for unknown multicast */

 We need to hide the dsa_8021q VLANs from the user. */

 No fdb entry at i, not an issue */

 Don't delete static FDB entries */

/* Common function for unicast and broadcast flood configuration.

 * Flooding is configured between each {ingress, egress} port pair, and since

 * the bridge's semantics are those of "egress flooding", it means we must

 * enable flooding towards this port from all ingress ports that are in the

 * same forwarding domain.

 Nothing changed, nothing to do */

		/* Add this port to the forwarding matrix of the

		 * other ports in the same bridge, and viceversa.

		/* For the ports already under the bridge, only one thing needs

		 * to be done, and that is to add this port to their

		 * reachability domain. So we can perform the SPI write for

		 * them immediately. However, for this port itself (the one

		 * that is new to the bridge), we need to add all other ports

		 * to its reachability domain. So we do that incrementally in

		 * this loop, and perform the SPI write only at the end, once

		 * the domain contains all other bridge ports.

		/* From UM10944 description of DRPDTAG (why put this there?):

		 * "Management traffic flows to the port regardless of the state

		 * of the INGRESS flag". So BPDUs are still be allowed to pass.

		 * At the moment no difference between DISABLED and BLOCKING.

	/* locredit and sendslope are negative by definition. In hardware,

	 * positive values must be provided, and the negative sign is implicit.

 User space is in kbits/sec, hardware in bytes/sec */

	/* Convert the negative values from 64-bit 2's complement

	 * to 32-bit 2's complement (for the case of 0x80000000 whose

	 * negative is still negative).

	/* The credit based shapers are only allocated if

	 * CONFIG_NET_SCH_CBS is enabled.

/* For situations where we need to change a setting at runtime that is only

 * available through the static configuration, resetting the switch in order

 * to upload the new static config is unavoidable. Back up the settings we

 * modify at runtime (currently only MAC) and restore them after uploading,

 * such that this operation is relatively seamless.

	/* Back up the dynamic link speed changed by sja1105_adjust_port_config

	 * in order to temporarily restore it to SJA1105_SPEED_AUTO - which the

	 * switch wants to see in the static config in order to allow us to

	 * change it through the dynamic interface later.

 No PTP operations can run right now */

 Reset switch and send updated static configuration */

 Mid point, corresponds to pre-reset PTPCLKVAL */

 Mid point, corresponds to post-reset PTPCLKVAL, aka 0 */

 Advance PTPCLKVAL by the time it took since its readout */

	/* Configure the CGU (PLLs) for MII and RMII PHYs.

	 * For these interfaces there is no dynamic configuration

	 * needed, since PLLs have same settings at all speeds.

/* The TPID setting belongs to the General Parameters table,

 * which can only be partially reconfigured at runtime (and not the TPID).

 * So a switch reset is required.

 Enable VLAN filtering. */

 Disable VLAN filtering. */

 EtherType used to identify inner tagged (C-tag) VLAN traffic */

 EtherType used to identify outer tagged (S-tag) VLAN traffic */

	/* When VLAN filtering is on, we need to at least be able to

	 * decode management traffic through the "backup plan".

	/* VLAN filtering => independent VLAN learning.

	 * No VLAN filtering (or best effort) => shared VLAN learning.

	 *

	 * In shared VLAN learning mode, untagged traffic still gets

	 * pvid-tagged, and the FDB table gets populated with entries

	 * containing the "real" (pvid or from VLAN tag) VLAN ID.

	 * However the switch performs a masked L2 lookup in the FDB,

	 * effectively only looking up a frame's DMAC (and not VID) for the

	 * forwarding decision.

	 *

	 * This is extremely convenient for us, because in modes with

	 * vlan_filtering=0, dsa_8021q actually installs unique pvid's into

	 * each front panel port. This is good for identification but breaks

	 * learning badly - the VID of the learnt FDB entry is unique, aka

	 * no frames coming from any other port are going to have it. So

	 * for forwarding purposes, this is as though learning was broken

	 * (all frames get flooded).

 Assign pointer after the resize (it's new memory) */

 Can't delete a missing entry. */

 Assign pointer after the resize (it's new memory) */

	/* Also unset tag_port, just so we don't have a confusing bitmap

	 * (no practical purpose).

	/* If there's no port left as member of this VLAN,

	 * it's time for it to go.

	/* Be sure to deny alterations to the configuration done by tag_8021q.

 Always install bridge VLANs as egress-tagged on CPU and DSA ports */

	/* In case the pvid was deleted, make sure that untagged packets will

	 * be dropped.

	/* Prevent attackers from trying to inject a DSA tag from

	 * the outside world.

 Transfer skb to the host port. */

 Wait until the switch has processed the frame */

		/* UM10944: The ENFPORT flag of the respective entry is

		 * cleared when a match is found. The host can use this

		 * flag as an acknowledgment.

		/* Clean up the management route so that a follow-up

		 * frame may not match on it by mistake.

		 * This is only hardware supported on P/Q/R/S - on E/T it is

		 * a no-op and we are silently discarding the -EOPNOTSUPP.

/* Deferred work is unfortunately necessary because setting up the management

 * route cannot be done from atomit context (SPI transfer takes a sleepable

 * lock on the bus)

 The clone, if there, was made by dsa_skb_tx_timestamp */

/* The MAXAGE setting belongs to the L2 Forwarding Parameters table,

 * which cannot be reconfigured at runtime. So a switch reset is required.

/* We have a single mirror (@to) port, but can configure ingress and egress

 * mirroring on all other (@from) ports.

 * We need to allow mirroring rules only as long as the @to port is always the

 * same, and we need to unset the @to port from mirr_port only when there is no

 * mirroring rule that references it.

 Anybody still referencing mirr_port? */

 Unset already_enabled for next time */

	/* In hardware, every 8 microseconds the credit level is incremented by

	 * the value of RATE bytes divided by 64, up to a maximum of SMAX

	 * bytes.

	/* For chips that can't offload BR_MCAST_FLOOD independently, there

	 * is nothing to do here, we ensured the configuration is in sync by

	 * offloading BR_FLOOD.

 Connections between dsa_port and sja1105_port */

/* The programming model for the SJA1105 switch is "all-at-once" via static

 * configuration tables. Some of these can be dynamically modified at runtime,

 * but not the xMII mode parameters table.

 * Furthermode, some PHYs may not have crystals for generating their clocks

 * (e.g. RMII). Instead, their 50MHz clock is supplied via the SJA1105 port's

 * ref_clk pin. So port clocking needs to be initialized early, before

 * connecting to PHYs is attempted, otherwise they won't respond through MDIO.

 * Setting correct PHY link speed does not matter now.

 * But dsa_slave_phy_setup is called later than sja1105_setup, so the PHY

 * bindings are not yet parsed by DSA core. We need to parse early so that we

 * can populate the xMII mode parameters table.

 Create and send configuration down to device */

 Configure the CGU (PHY link modes and speeds) */

	/* On SJA1105, VLAN filtering per se is always enabled in hardware.

	 * The only thing we can do to disable it is lie about what the 802.1Q

	 * EtherType is.

	 * So it will still try to apply VLAN filtering, but all ingress

	 * traffic (except frames received with EtherType of ETH_P_SJA1105)

	 * will be internally tagged with a distorted VLAN header where the

	 * TPID is ETH_P_SJA1105, and the VLAN ID is the port pvid.

 tag_8021q has 3 bits for the VBID, and the value 0 is reserved */

 Advertise the 8 egress queues */

 Is what's been probed in our match table at all? */

 But is it what's in the device tree? */

 It isn't. No problem, pick that up. */

	/* Populate our driver private structure (priv) based on

	 * the device tree node that was probed (spi)

 Configure the SPI bus */

	/* In sja1105_xfer, we send spi_messages composed of two spi_transfers:

	 * a small one for the message header and another one for the current

	 * chunk of the packed buffer.

	 * Check that the restrictions imposed by the SPI controller are

	 * respected: the chunk buffer is smaller than the max transfer size,

	 * and the total length of the chunk plus its message header is smaller

	 * than the max message size.

	 * We do that during probe time since the maximum transfer size is a

	 * runtime invariant.

	/* We need to send at least one 64-bit word of SPI payload per message

	 * in order to be able to make useful progress.

 Detect hardware device */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2018-2019, Vladimir Oltean <olteanv@gmail.com>

 * Copyright 2020 NXP

/* Since devlink regions have a fixed size and the static config has a variable

 * size, we need to calculate the maximum possible static config size by

 * creating a dummy config with all table entries populated to the max, and get

 * its packed length. This is done dynamically as opposed to simply hardcoding

 * a number, since currently not all static config tables are implemented, so

 * we are avoiding a possible code desynchronization.

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2019, Vladimir Oltean <olteanv@gmail.com>

	/* Roll the earliest base time over until it is in a comparable

	 * time base with the latest, then compare their deltas.

	 * We want to enforce that all ports' base times are within

	 * SJA1105_TAS_MAX_DELTA 200ns cycles of one another.

/* Lo and behold: the egress scheduler from hell.

 *

 * At the hardware level, the Time-Aware Shaper holds a global linear arrray of

 * all schedule entries for all ports. These are the Gate Control List (GCL)

 * entries, let's call them "timeslots" for short. This linear array of

 * timeslots is held in BLK_IDX_SCHEDULE.

 *

 * Then there are a maximum of 8 "execution threads" inside the switch, which

 * iterate cyclically through the "schedule". Each "cycle" has an entry point

 * and an exit point, both being timeslot indices in the schedule table. The

 * hardware calls each cycle a "subschedule".

 *

 * Subschedule (cycle) i starts when

 *   ptpclkval >= ptpschtm + BLK_IDX_SCHEDULE_ENTRY_POINTS[i].delta.

 *

 * The hardware scheduler iterates BLK_IDX_SCHEDULE with a k ranging from

 *   k = BLK_IDX_SCHEDULE_ENTRY_POINTS[i].address to

 *   k = BLK_IDX_SCHEDULE_PARAMS.subscheind[i]

 *

 * For each schedule entry (timeslot) k, the engine executes the gate control

 * list entry for the duration of BLK_IDX_SCHEDULE[k].delta.

 *

 *         +---------+

 *         |         | BLK_IDX_SCHEDULE_ENTRY_POINTS_PARAMS

 *         +---------+

 *              |

 *              +-----------------+

 *                                | .actsubsch

 *  BLK_IDX_SCHEDULE_ENTRY_POINTS v

 *                 +-------+-------+

 *                 |cycle 0|cycle 1|

 *                 +-------+-------+

 *                   |  |      |  |

 *  +----------------+  |      |  +-------------------------------------+

 *  |   .subschindx     |      |             .subschindx                |

 *  |                   |      +---------------+                        |

 *  |          .address |        .address      |                        |

 *  |                   |                      |                        |

 *  |                   |                      |                        |

 *  |  BLK_IDX_SCHEDULE v                      v                        |

 *  |              +-------+-------+-------+-------+-------+------+     |

 *  |              |entry 0|entry 1|entry 2|entry 3|entry 4|entry5|     |

 *  |              +-------+-------+-------+-------+-------+------+     |

 *  |                                  ^                    ^  ^  ^     |

 *  |                                  |                    |  |  |     |

 *  |        +-------------------------+                    |  |  |     |

 *  |        |              +-------------------------------+  |  |     |

 *  |        |              |              +-------------------+  |     |

 *  |        |              |              |                      |     |

 *  | +---------------------------------------------------------------+ |

 *  | |subscheind[0]<=subscheind[1]<=subscheind[2]<=...<=subscheind[7]| |

 *  | +---------------------------------------------------------------+ |

 *  |        ^              ^                BLK_IDX_SCHEDULE_PARAMS    |

 *  |        |              |                                           |

 *  +--------+              +-------------------------------------------+

 *

 *  In the above picture there are two subschedules (cycles):

 *

 *  - cycle 0: iterates the schedule table from 0 to 2 (and back)

 *  - cycle 1: iterates the schedule table from 3 to 5 (and back)

 *

 *  All other possible execution threads must be marked as unused by making

 *  their "subschedule end index" (subscheind) equal to the last valid

 *  subschedule's end index (in this case 5).

 Discard previous Schedule Table */

 Discard previous Schedule Entry Points Parameters Table */

 Discard previous Schedule Parameters Table */

 Discard previous Schedule Entry Points Table */

 Figure out the dimensioning of the problem */

 Nothing to do */

 Pre-allocate space in the static config tables */

 Schedule Table */

 Schedule Points Parameters Table */

		/* Previously allocated memory will be freed automatically in

		 * sja1105_static_config_free. This is true for all early

		 * returns below.

 Schedule Parameters Table */

 Schedule Entry Points Table */

 Finally start populating the static config tables */

 Relative base time */

		/* This is the base time expressed as a number of TAS ticks

		 * relative to PTPSCHTM, which we'll (perhaps improperly) call

		 * the operational base time.

		/* UM10944.pdf 4.2.2. Schedule Entry Points table says that

		 * delta cannot be zero, which is shitty. Advance all relative

		 * base times by 1 TAS delta, so that even the earliest base

		 * time becomes 1 in relative terms. Then start the operational

		 * base time (PTPSCHTM) one TAS delta earlier than planned.

		/* The subschedule end indices need to be

		 * monotonically increasing.

 Relative base time */

 Gate open */

 Gate closed */

/* Be there 2 port subschedules, each executing an arbitrary number of gate

 * open/close events cyclically.

 * None of those gate events must ever occur at the exact same time, otherwise

 * the switch is known to act in exotically strange ways.

 * However the hardware doesn't bother performing these integrity checks.

 * So here we are with the task of validating whether the new @admin offload

 * has any conflict with the already established TAS configuration in

 * tas_data->offload.  We already know the other ports are in harmony with one

 * another, otherwise we wouldn't have saved them.

 * Each gate event executes periodically, with a period of @cycle_time and a

 * phase given by its cycle's @base_time plus its offset within the cycle

 * (which in turn is given by the length of the events prior to it).

 * There are two aspects to possible collisions:

 * - Collisions within one cycle's (actually the longest cycle's) time frame.

 *   For that, we need to compare the cartesian product of each possible

 *   occurrence of each event within one cycle time.

 * - Collisions in the future. Events may not collide within one cycle time,

 *   but if two port schedules don't have the same periodicity (aka the cycle

 *   times aren't multiples of one another), they surely will some time in the

 *   future (actually they will collide an infinite amount of times).

	/* Check if the two cycle times are multiples of one another.

	 * If they aren't, then they will surely collide.

	/* Calculate the "reduced" base time of each of the two cycles

	 * (transposed back as close to 0 as possible) by dividing to

	 * the cycle time.

	/* delta1 is the relative base time of each GCL entry within

	 * the established ports' TAS config.

		/* delta2 is the relative base time of each GCL entry

		 * within the newly added TAS config.

			/* t1 follows all possible occurrences of the

			 * established ports' GCL entry i within the

			 * first cycle time.

				/* t2 follows all possible occurrences

				 * of the newly added GCL entry j

				 * within the first cycle time.

/* Check the tc-taprio configuration on @port for conflicts with the tc-gate

 * global subschedule. If @port is -1, check it against all ports.

 * To reuse the sja1105_tas_check_conflicts logic without refactoring it,

 * convert the gating configuration to a dummy tc-taprio offload structure.

	/* Can't change an already configured port (must delete qdisc first).

	 * Can't delete the qdisc from an unconfigured port.

	/* The cycle time extension is the amount of time the last cycle from

	 * the old OPER needs to be extended in order to phase-align with the

	 * base time of the ADMIN when that becomes the new OPER.

	 * But of course our switch needs to be reset to switch-over between

	 * the ADMIN and the OPER configs - so much for a seamless transition.

	 * So don't add insult over injury and just say we don't support cycle

	 * time extension.

 Schedule successfully started */

 Schedule is stopped */

 Schedule is probably not configured with PTP clock source */

 Write to PTPCLKCORP */

 Write to PTPSCHTM */

/* The schedule engine and the PTP clock are driven by the same oscillator, and

 * they run in parallel. But whilst the PTP clock can keep an absolute

 * time-of-day, the schedule engine is only running in 'ticks' (25 ticks make

 * up a delta, which is 200ns), and wrapping around at the end of each cycle.

 * The schedule engine is started when the PTP clock reaches the PTPSCHTM time

 * (in PTP domain).

 * Because the PTP clock can be rate-corrected (accelerated or slowed down) by

 * a software servo, and the schedule engine clock runs in parallel to the PTP

 * clock, there is logic internal to the switch that periodically keeps the

 * schedule engine from drifting away. The frequency with which this internal

 * syntonization happens is the PTP clock correction period (PTPCLKCORP). It is

 * a value also in the PTP clock domain, and is also rate-corrected.

 * To be precise, during a correction period, there is logic to determine by

 * how many scheduler clock ticks has the PTP clock drifted. At the end of each

 * correction period/beginning of new one, the length of a delta is shrunk or

 * expanded with an integer number of ticks, compared with the typical 25.

 * So a delta lasts for 200ns (or 25 ticks) only on average.

 * Sometimes it is longer, sometimes it is shorter. The internal syntonization

 * logic can adjust for at most 5 ticks each 20 ticks.

 *

 * The first implication is that you should choose your schedule correction

 * period to be an integer multiple of the schedule length. Preferably one.

 * In case there are schedules of multiple ports active, then the correction

 * period needs to be a multiple of them all. Given the restriction that the

 * cycle times have to be multiples of one another anyway, this means the

 * correction period can simply be the largest cycle time, hence the current

 * choice. This way, the updates are always synchronous to the transmission

 * cycle, and therefore predictable.

 *

 * The second implication is that at the beginning of a correction period, the

 * first few deltas will be modulated in time, until the schedule engine is

 * properly phase-aligned with the PTP clock. For this reason, you should place

 * your best-effort traffic at the beginning of a cycle, and your

 * time-triggered traffic afterwards.

 *

 * The third implication is that once the schedule engine is started, it can

 * only adjust for so much drift within a correction period. In the servo you

 * can only change the PTPCLKRATE, but not step the clock (PTPCLKADD). If you

 * want to do the latter, you need to stop and restart the schedule engine,

 * which is what the state machine handles.

 Can't do anything at all if clock is still being stepped */

		/* Plan to start the earliest schedule first. The others

		 * will be started in hardware, by way of their respective

		 * entry points delta.

		 * Try our best to avoid fringe cases (race condition between

		 * ptpschtm and ptpstrtsch) by pushing the oper_base_time at

		 * least one second in the future from now. This is not ideal,

		 * but this only needs to buy us time until the

		 * sja1105_tas_start command below gets executed.

 Clock was stepped.. bad news for TAS */

		/* Check if TAS has actually started, by comparing the

		 * scheduled start time with the SJA1105 PTP clock

 TAS has not started yet */

 Time elapsed, what happened? */

 TAS has started */

 Clock was stepped.. bad news for TAS */

 No reason to schedule the workqueue, nothing changed */

 SPDX-License-Identifier: BSD-3-Clause

/* Copyright 2016-2018 NXP

 * Copyright (c) 2018, Sensor-Technik Wiedemann GmbH

 * Copyright (c) 2018-2019, Vladimir Oltean <olteanv@gmail.com>

/* If @rw is:

 * - SPI_WRITE: creates and sends an SPI write message at absolute

 *		address reg_addr, taking @len bytes from *buf

 * - SPI_READ:  creates and sends an SPI read message from absolute

 *		address reg_addr, writing @len bytes into *buf

 Populate the transfer's header buffer */

 Ignored */

 Populate the transfer's data buffer */

		/* Request timestamping for the transfer. Instead of letting

		 * callers specify which byte they want to timestamp, we can

		 * make certain assumptions:

		 * - A read operation will request a software timestamp when

		 *   what's being read is the PTP time. That is snapshotted by

		 *   the switch hardware at the end of the command portion

		 *   (hdr_xfer).

		 * - A write operation will request a software timestamp on

		 *   actions that modify the PTP time. Taking clock stepping as

		 *   an example, the switch writes the PTP time at the end of

		 *   the data portion (chunk_xfer).

 Calculate next chunk */

/* If @rw is:

 * - SPI_WRITE: creates and sends an SPI write message at absolute

 *		address reg_addr

 * - SPI_READ:  creates and sends an SPI read message from absolute

 *		address reg_addr

 *

 * The u64 *value is unpacked, meaning that it's stored in the native

 * CPU endianness and directly usable by software running on the core.

 Same as above, but transfers only a 4 byte word */

		/* The packing API only supports u64 as CPU word size,

		 * so we need to convert.

 Cold reset */

 Cold reset */

	/* Only reset the switch core.

	 * A full cold reset would re-enable the BASE_MCSS_CLOCK PLL which

	 * would turn on the microcontroller, potentially letting it execute

	 * code which could interfere with our configuration.

/* This is not reading the entire General Status area, which is also

 * divergent between E/T and P/Q/R/S, but only the relevant bits for

 * ensuring that the static config upload procedure was successful.

 So that addition translates to 4 bytes */

	/* device_id is missing from the buffer, but we don't

	 * want to diverge from the manual definition of the

	 * register addresses, so we'll back off one step with

	 * the register pointer, and never access p[0].

/* Not const because unpacking priv->static_config into buffers and preparing

 * for upload requires the recalculation of table CRCs and updating the

 * structures with these.

 Write Device ID and config tables to config_buf */

	/* Recalculate CRC of the last header (right now 0xDEADBEEF).

	 * Don't include the CRC field itself.

 Read the whole table header */

 Modify */

 Rewrite */

	/* Prevent PHY jabbering during switch reset by inhibiting

	 * Tx on all ports and waiting for current packet to drain.

	 * Otherwise, the PHY will see an unterminated Ethernet packet.

	/* Wait for an eventual egress packet to finish transmission

	 * (reach IFG). It is guaranteed that a second one will not

	 * follow, and that switch cold reset is thus safe

 Put the SJA1105 in programming mode */

 Wait for the switch to come out of reset */

 Upload the static config to the device */

 Check that SJA1105 responded well to the config upload */

 Success! */

 UM10944.pdf, Table 86, ACU Register overview */

 UM10944.pdf, Table 78, CGU Register overview */

 Spans 0x12 to 0x13 */

 Spans 0x18 to 0x19 */

 UM10944.pdf, Table 86, ACU Register overview */

 UM11040.pdf, Table 114 */

 Spans 0x13 to 0x14 */

 actually INHIB_TX */

 Reset Control Register 0 */

	/* Ports 2 and 3 are capable of xMII, but there isn't anything to

	 * configure in the CGU/ACU for them.

 Not supported */

 Not supported */

 Not supported */

 Not supported */

 Not supported */

 Not supported */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2018-2019, Vladimir Oltean <olteanv@gmail.com>

/* In the dynamic configuration interface, the switch exposes a register-like

 * view of some of the static configuration tables.

 * Many times the field organization of the dynamic tables is abbreviated (not

 * all fields are dynamically reconfigurable) and different from the static

 * ones, but the key reason for having it is that we can spare a switch reset

 * for settings that can be changed dynamically.

 *

 * This file creates a per-switch-family abstraction called

 * struct sja1105_dynamic_table_ops and two operations that work with it:

 * - sja1105_dynamic_config_write

 * - sja1105_dynamic_config_read

 *

 * Compared to the struct sja1105_table_ops from sja1105_static_config.c,

 * the dynamic accessors work with a compound buffer:

 *

 * packed_buf

 *

 * |

 * V

 * +-----------------------------------------+------------------+

 * |              ENTRY BUFFER               |  COMMAND BUFFER  |

 * +-----------------------------------------+------------------+

 *

 * <----------------------- packed_size ------------------------>

 *

 * The ENTRY BUFFER may or may not have the same layout, or size, as its static

 * configuration table entry counterpart. When it does, the same packing

 * function is reused (bar exceptional cases - see

 * sja1105pqrs_dyn_l2_lookup_entry_packing).

 *

 * The reason for the COMMAND BUFFER being at the end is to be able to send

 * a dynamic write command through a single SPI burst. By the time the switch

 * reacts to the command, the ENTRY BUFFER is already populated with the data

 * sent by the core.

 *

 * The COMMAND BUFFER is always SJA1105_SIZE_DYN_CMD bytes (one 32-bit word) in

 * size.

 *

 * Sometimes the ENTRY BUFFER does not really exist (when the number of fields

 * that can be reconfigured is small), then the switch repurposes some of the

 * unused 32 bits of the COMMAND BUFFER to hold ENTRY data.

 *

 * The key members of struct sja1105_dynamic_table_ops are:

 * - .entry_packing: A function that deals with packing an ENTRY structure

 *		     into an SPI buffer, or retrieving an ENTRY structure

 *		     from one.

 *		     The @packed_buf pointer it's given does always point to

 *		     the ENTRY portion of the buffer.

 * - .cmd_packing: A function that deals with packing/unpacking the COMMAND

 *		   structure to/from the SPI buffer.

 *		   It is given the same @packed_buf pointer as .entry_packing,

 *		   so most of the time, the @packed_buf points *behind* the

 *		   COMMAND offset inside the buffer.

 *		   To access the COMMAND portion of the buffer, the function

 *		   knows its correct offset.

 *		   Giving both functions the same pointer is handy because in

 *		   extreme cases (see sja1105pqrs_dyn_l2_lookup_entry_packing)

 *		   the .entry_packing is able to jump to the COMMAND portion,

 *		   or vice-versa (sja1105pqrs_l2_lookup_cmd_packing).

 * - .access: A bitmap of:

 *	OP_READ: Set if the hardware manual marks the ENTRY portion of the

 *		 dynamic configuration table buffer as R (readable) after

 *		 an SPI read command (the switch will populate the buffer).

 *	OP_WRITE: Set if the manual marks the ENTRY portion of the dynamic

 *		  table buffer as W (writable) after an SPI write command

 *		  (the switch will read the fields provided in the buffer).

 *	OP_DEL: Set if the manual says the VALIDENT bit is supported in the

 *		COMMAND portion of this dynamic config buffer (i.e. the

 *		specified entry can be invalidated through a SPI write

 *		command).

 *	OP_SEARCH: Set if the manual says that the index of an entry can

 *		   be retrieved in the COMMAND portion of the buffer based

 *		   on its ENTRY portion, as a result of a SPI write command.

 *		   Only the TCAM-based FDB table on SJA1105 P/Q/R/S supports

 *		   this.

 *	OP_VALID_ANYWAY: Reading some tables through the dynamic config

 *			 interface is possible even if the VALIDENT bit is not

 *			 set in the writeback. So don't error out in that case.

 * - .max_entry_count: The number of entries, counting from zero, that can be

 *		       reconfigured through the dynamic interface. If a static

 *		       table can be reconfigured at all dynamically, this

 *		       number always matches the maximum number of supported

 *		       static entries.

 * - .packed_size: The length in bytes of the compound ENTRY + COMMAND BUFFER.

 *		   Note that sometimes the compound buffer may contain holes in

 *		   it (see sja1105_vlan_lookup_cmd_packing). The @packed_buf is

 *		   contiguous however, so @packed_size includes any unused

 *		   bytes.

 * - .addr: The base SPI address at which the buffer must be written to the

 *	    switch's memory. When looking at the hardware manual, this must

 *	    always match the lowest documented address for the ENTRY, and not

 *	    that of the COMMAND, since the other 32-bit words will follow along

 *	    at the correct addresses.

 Command and entry overlap */

 Command and entry are separate */

	/* VALIDENT is supposed to indicate "keep or not", but in SJA1105 E/T,

	 * using it to delete a management route was unsupported. UM10944

	 * said about it:

	 *

	 *   In case of a write access with the MGMTROUTE flag set,

	 *   the flag will be ignored. It will always be found cleared

	 *   for read accesses with the MGMTROUTE flag set.

	 *

	 * SJA1105 P/Q/R/S keeps the same behavior w.r.t. VALIDENT, but there

	 * is now another flag called HOSTCMD which does more stuff (quoting

	 * from UM11040):

	 *

	 *   A write request is accepted only when HOSTCMD is set to write host

	 *   or invalid. A read request is accepted only when HOSTCMD is set to

	 *   search host or read host.

	 *

	 * So it is possible to translate a RDWRSET/VALIDENT combination into

	 * HOSTCMD so that we keep the dynamic command API in place, and

	 * at the same time achieve compatibility with the management route

	 * command structure.

 SPI_WRITE */

	/* Hack - The hardware takes the 'index' field within

	 * struct sja1105_l2_lookup_entry as the index on which this command

	 * will operate. However it will ignore everything else, so 'index'

	 * is logically part of command but physically part of entry.

	 * Populate the 'index' entry field from within the command callback,

	 * such that our API doesn't need to ask for a full-blown entry

	 * structure when e.g. a delete is requested.

/* The switch is so retarded that it makes our command/entry abstraction

 * crumble apart.

 *

 * On P/Q/R/S, the switch tries to say whether a FDB entry

 * is statically programmed or dynamically learned via a flag called LOCKEDS.

 * The hardware manual says about this fiels:

 *

 *   On write will specify the format of ENTRY.

 *   On read the flag will be found cleared at times the VALID flag is found

 *   set.  The flag will also be found cleared in response to a read having the

 *   MGMTROUTE flag set.  In response to a read with the MGMTROUTE flag

 *   cleared, the flag be set if the most recent access operated on an entry

 *   that was either loaded by configuration or through dynamic reconfiguration

 *   (as opposed to automatically learned entries).

 *

 * The trouble with this flag is that it's part of the *command* to access the

 * dynamic interface, and not part of the *entry* retrieved from it.

 * Otherwise said, for a sja1105_dynamic_config_read, LOCKEDS is supposed to be

 * an output from the switch into the command buffer, and for a

 * sja1105_dynamic_config_write, the switch treats LOCKEDS as an input

 * (hence we can write either static, or automatically learned entries, from

 * the core).

 * But the manual contradicts itself in the last phrase where it says that on

 * read, LOCKEDS will be set to 1 for all FDB entries written through the

 * dynamic interface (therefore, the value of LOCKEDS from the

 * sja1105_dynamic_config_write is not really used for anything, it'll store a

 * 1 anyway).

 * This means you can't really write a FDB entry with LOCKEDS=0 (automatically

 * learned) into the switch, which kind of makes sense.

 * As for reading through the dynamic interface, it doesn't make too much sense

 * to put LOCKEDS into the command, since the switch will inevitably have to

 * ignore it (otherwise a command would be like "read the FDB entry 123, but

 * only if it's dynamically learned" <- well how am I supposed to know?) and

 * just use it as an output buffer for its findings. But guess what... that's

 * what the entry buffer is for!

 * Unfortunately, what really breaks this abstraction is the fact that it

 * wasn't designed having the fact in mind that the switch can output

 * entry-related data as writeback through the command buffer.

 * However, whether a FDB entry is statically or dynamically learned *is* part

 * of the entry and not the command data, no matter what the switch thinks.

 * In order to do that, we'll need to wrap around the

 * sja1105pqrs_l2_lookup_entry_packing from sja1105_static_config.c, and take

 * a peek outside of the caller-supplied @buf (the entry buffer), to reach the

 * command buffer.

 Hack - see comments above. */

	/* UM10944: To specify if a PTP egress timestamp shall be captured on

	 * each port upon transmission of the frame, the LSB of VLANID in the

	 * ENTRY field provided by the host must be set.

	 * Bit 1 of VLANID then specifies the register where the timestamp for

	 * this port is stored in.

	/* In P/Q/R/S, enfport got renamed to mgmtvalid, but its purpose

	 * is the same (driver uses it to confirm that frame was sent).

	 * So just keep the name from E/T.

/* In E/T, entry is at addresses 0x27-0x28. There is a 4 byte gap at 0x29,

 * and command is at 0x2a. Similarly in P/Q/R/S there is a 1 register gap

 * between entry (0x2d, 0x2e) and command (0x30).

	/* Hack - see comments above, applied for 'vlanid' field of

	 * struct sja1105_vlan_lookup_entry.

 In SJA1110 there is no gap between the command and the data, yay... */

	/* Hack: treat 'vlanid' field of struct sja1105_vlan_lookup_entry as

	 * cmd->index.

	/* But the VALIDENT bit has disappeared, now we are supposed to

	 * invalidate an entry through the TYPE_ENTRY field of the entry..

	 * This is a hack to transform the non-zero quality of the TYPE_ENTRY

	 * field into a VALIDENT bit.

 Yup, user manual definitions are reversed */

 Yup, user manual definitions are reversed */

	/* MAC configuration table entries which can't be reconfigured:

	 * top, base, enabled, ifg, maxage, drpnona664

 Bogus return value, not used anywhere */

 Bogus return value, not used anywhere */

 Bogus return value, not used anywhere */

 SJA1105E/T: First generation */

 SJA1105P/Q/R/S: Second generation */

 SJA1110: Third generation */

	/* We don't _need_ to read the full entry, just the command area which

	 * is a fixed SJA1105_SIZE_DYN_CMD. But our cmd_packing() API expects a

	 * buffer that contains the full entry too. Additionally, our API

	 * doesn't really know how many bytes into the buffer does the command

	 * area really begin. So just read back the whole entry.

	/* Unpack the command structure, and return it to the caller in case it

	 * needs to perform further checks on it (VALIDENT).

 Hardware hasn't cleared VALID => still working on it */

/* Poll the dynamic config entry's control area until the hardware has

 * cleared the VALID bit, which means we have confirmation that it has

 * finished processing the command.

/* Provides read access to the settings through the dynamic interface

 * of the switch.

 * @blk_idx	is used as key to select from the sja1105_dynamic_table_ops.

 *		The selection is limited by the hardware in respect to which

 *		configuration blocks can be read through the dynamic interface.

 * @index	is used to retrieve a particular table entry. If negative,

 *		(and if the @blk_idx supports the searching operation) a search

 *		is performed by the @entry parameter.

 * @entry	Type-casted to an unpacked structure that holds a table entry

 *		of the type specified in @blk_idx.

 *		Usually an output argument. If @index is negative, then this

 *		argument is used as input/output: it should be pre-populated

 *		with the element to search for. Entries which support the

 *		search operation will have an "index" field (not the @index

 *		argument to this function) and that is where the found index

 *		will be returned (or left unmodified - thus negative - if not

 *		found).

 SPI payload buffer */

 Trigger action on table entry */

 Action is read */

 Avoid copying a signed negative number to an u64 */

 Send SPI write operation: read config table entry */

	/* Don't dereference possibly NULL pointer - maybe caller

	 * only wanted to see whether the entry existed or not.

 SPI payload buffer */

 If false, deletes entry */

 Trigger action on table entry */

 Action is write */

	/* Don't dereference potentially NULL pointer if just

	 * deleting a table entry is what was requested. For cases

	 * where 'index' field is physically part of entry structure,

	 * and needed here, we deal with that in the cmd_packing callback.

 Send SPI write operation: read config table entry */

/* CRC8 algorithm with non-reversed input, non-reversed output,

 * no input xor and no output xor. Code customized for receiving

 * the SJA1105 E/T FDB keys (vlanid, macaddr) as input. CRC polynomial

 * is also received as argument in the Koopman notation that the switch

 * hardware stores it in.

 Convert polynomial from Koopman to 'normal' notation */

 seed */

 Mask the eight bytes starting from MSB one at a time */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2019, Vladimir Oltean <olteanv@gmail.com>

/* The adjfine API clamps ppb between [-32,768,000, 32,768,000], and

 * therefore scaled_ppm between [-2,147,483,648, 2,147,483,647].

 * Set the maximum supported ppb to a round value smaller than the maximum.

 *

 * Percentually speaking, this is a +/- 0.032x adjustment of the

 * free-running counter (0.968x to 1.032x).

/* PTPSYNCTS has no interrupt or update mechanism, because the intended

 * hardware use case is for the timestamp to be collected synchronously,

 * immediately after the CAS_MASTER SJA1105 switch has performed a CASSYNC

 * one-shot toggle (no return to level) on the PTP_CLK pin. When used as a

 * generic extts source, the PTPSYNCTS register needs polling and a comparison

 * with the old value. The polling interval is configured as the Nyquist rate

 * of a signal with 50% duty cycle and 1Hz frequency, which is sadly all that

 * this hardware can do (but may be enough for some setups). Anything of higher

 * frequency than 1 Hz will be lost, since there is no timestamp FIFO.

/*            This range is actually +/- SJA1105_MAX_ADJ_PPB

 *            divided by 1000 (ppb -> ppm) and with a 16-bit

 *            "fractional" part (actually fixed point).

 *                                    |

 *                                    v

 * Convert scaled_ppm from the +/- ((10^6) << 16) range

 * into the +/- (1 << 31) range.

 *

 * This forgoes a "ppb" numeric representation (up to NSEC_PER_SEC)

 * and defines the scaling factor between scaled_ppm and the actual

 * frequency adjustments of the PHC.

 *

 *   ptpclkrate = scaled_ppm * 2^31 / (10^6 * 2^16)

 *   simplifies to

 *   ptpclkrate = scaled_ppm * 2^9 / 5^6

/* Must be called only with priv->tagger_data.state bit

 * SJA1105_HWTS_RX_EN cleared

 Initialize the meta state machine to a known state */

 Called during cleanup */

 No need to keep this as part of the structure */

 No need to keep this as part of the structure */

/* The switch returns partial timestamps (24 bits for SJA1105 E/T, which wrap

 * around in 0.135 seconds, and 32 bits for P/Q/R/S, wrapping around in 34.35

 * seconds).

 *

 * This receives the RX or TX MAC timestamps, provided by hardware as

 * the lower bits of the cycle counter, sampled at the time the timestamp was

 * collected.

 *

 * To reconstruct into a full 64-bit-wide timestamp, the cycle counter is

 * read and the high-order bits are filled in.

 *

 * Must be called within one wraparound period of the partial timestamp since

 * it was generated by the MAC.

	/* Check lower bits of current cycle counter against the timestamp.

	 * If the current cycle counter is lower than the partial timestamp,

	 * then wraparound surely occurred and must be accounted for.

/* Reads the SPI interface for an egress timestamp generated by the switch

 * for frames sent using management routes.

 *

 * SJA1105 E/T layout of the 4-byte SPI payload:

 *

 * 31    23    15    7     0

 * |     |     |     |     |

 * +-----+-----+-----+     ^

 *          ^              |

 *          |              |

 *  24-bit timestamp   Update bit

 *

 *

 * SJA1105 P/Q/R/S layout of the 8-byte SPI payload:

 *

 * 31    23    15    7     0     63    55    47    39    32

 * |     |     |     |     |     |     |     |     |     |

 *                         ^     +-----+-----+-----+-----+

 *                         |                 ^

 *                         |                 |

 *                    Update bit    32-bit timestamp

 *

 * Notice that the update bit is in the same place.

 * To have common code for E/T and P/Q/R/S for reading the timestamp,

 * we need to juggle with the offset and the bit indices.

	/* Point the end bit to the second 32-bit word on P/Q/R/S,

	 * no-op on E/T.

	/* Shift the 24-bit timestamp on E/T to be collected from 31:8.

	 * No-op on P/Q/R/S.

 Caller must hold ptp_data->lock */

 Caller must hold ptp_data->lock */

 Don't restart */

	/* We need to read the full PTP clock to reconstruct the Rx

	 * timestamp. For that we need a sleepable context.

 Don't defer */

 Called from dsa_skb_defer_rx_timestamp */

/* In addition to cloning the skb which is done by the common

 * sja1105_port_txtstamp, we need to generate a timestamp ID and save the

 * packet to the TX timestamping queue.

 Deal automatically with 8-bit wraparound */

/* Called from dsa_skb_tx_timestamp. This callback is just to clone

 * the skb and have it available in SJA1105_SKB_CB in the .port_deferred_xmit

 * callback, where we will timestamp it synchronously.

 Caller must hold ptp_data->lock */

 Caller must hold ptp_data->lock */

 Write to PTPCLKVAL while PTPCLKADD is 0 */

 Take a +/- value and re-center it around 2^31. */

 Write to PTPCLKVAL while PTPCLKADD is 1 */

/* The PTP_CLK pin may be configured to toggle with a 50% duty cycle and a

 * frequency f:

 *

 *           NSEC_PER_SEC

 * f = ----------------------

 *     (PTPPINDUR * 8 ns) * 2

 We only support one channel */

 Reject requests with unsupported flags */

		/* ptppindur: 32 bit register which holds the interval between

		 * 2 edges on PTP_CLK. So check for truncation which happens

		 * at periods larger than around 68.7 seconds.

		/* ptppins: 64 bit register which needs to hold a PTP time

		 * larger than the current time, otherwise the startptpcp

		 * command won't do anything. So advance the current time

		 * by a number of periods in a way that won't alter the

		 * phase offset.

 We only support one channel */

 Reject requests with unsupported flags */

 We can only enable time stamping on both edges, sadly. */

 Only used on SJA1105 */

 Only used on SJA1110 */

 SPDX-License-Identifier: BSD-3-Clause

/* Copyright 2016-2018 NXP

 * Copyright (c) 2018-2019, Vladimir Oltean <olteanv@gmail.com>

/* Convenience wrappers over the generic packing functions. These take into

 * account the SJA1105 memory layout quirks and provide some level of

 * programmer protection against incorrect API use. The errors are not expected

 * to occur durring runtime, therefore printing and swallowing them here is

 * appropriate instead of clutterring up higher-level code.

 Little-endian Ethernet CRC32 of data packed as big-endian u32 words */

 seed */

/* TPID and TPID2 are intentionally reversed so that semantic

 * compatibility with E/T is kept.

 Interpreting vllupformat as 0 */

 Interpreting vllupformat as 1 */

 Interpreting vllupformat as 0 */

 Interpreting vllupformat as 1 */

/* WARNING: the *hdr pointer is really non-const, because it is

 * modifying the CRC of the header for a 2-stage packing operation

	/* First pack the table as-is, then calculate the CRC, and

	 * finally put the proper CRC into the packed buffer

/* The block IDs that the switches support are unfortunately sparse, so keep a

 * mapping table to "block indices" and translate back and forth so that we

 * don't waste useless memory in struct sja1105_static_config.

 * Also, since the block id comes from essentially untrusted input (unpacking

 * the static config from userspace) it has to be sanitized (range-checked)

 * before blindly indexing kernel memory with the blk_idx.

	/* Final header:

	 * Block ID does not matter

	 * Length of 0 marks that header is final

	 * CRC will be replaced on-the-fly on "config upload"

 Ending header */

 Tables (headers and entries) */

 Headers have an additional CRC at the end */

 Last header does not have an extra CRC because there is no data */

 Compatibility matrices */

 SJA1105E: First generation, no TTEthernet */

 SJA1105T: First generation, TTEthernet */

 SJA1105P: Second generation, no TTEthernet, no SGMII */

 SJA1105Q: Second generation, TTEthernet, no SGMII */

 SJA1105R: Second generation, no TTEthernet, SGMII */

 SJA1105S: Second generation, TTEthernet, SGMII */

 SJA1110A: Third generation */

	/* Transfer static_ops array from priv into per-table ops

	 * for handier access

 No pointers to table->entries should be kept when this is called. */

 SPDX-License-Identifier: GPL-2.0

/* Copyright (c) 2018-2019, Vladimir Oltean <olteanv@gmail.com>

 MAC */

 HL1 */

 HL2 */

 P/Q/R/S only */

 ETHER */

 MAC-Level Diagnostic Counters */

 MAC-Level Diagnostic Flags */

 High-Level Diagnostic Counters */

 Ether Stats */

 SPDX-License-Identifier: GPL-2.0

/* Copyright 2020 NXP

 Insert into the global gate list, sorted by gate action time. */

/* The gate entries contain absolute times in their e->interval field. Convert

 * that to proper intervals (i.e. "0, 5, 10, 15" to "5, 5, 5, 5").

		/* Calculate the difference between this gating schedule's

		 * base time, and the base time of the gating schedule with the

		 * longest cycle time. We call it the relative base time (rbt).

/* The switch flow classification core implements TTEthernet, which 'thinks' in

 * terms of Virtual Links (VL), a concept borrowed from ARINC 664 part 7.

 * However it also has one other operating mode (VLLUPFORMAT=0) where it acts

 * somewhat closer to a pre-standard implementation of IEEE 802.1Qci

 * (Per-Stream Filtering and Policing), which is what the driver is going to be

 * implementing.

 *

 *                                 VL Lookup

 *        Key = {DMAC && VLANID   +---------+  Key = { (DMAC[47:16] & VLMASK ==

 *               && VLAN PCP      |         |                         VLMARKER)

 *               && INGRESS PORT} +---------+                      (both fixed)

 *            (exact match,            |             && DMAC[15:0] == VLID

 *         all specified in rule)      |                    (specified in rule)

 *                                     v             && INGRESS PORT }

 *                               ------------

 *                    0 (PSFP)  /            \  1 (ARINC664)

 *                 +-----------/  VLLUPFORMAT \----------+

 *                 |           \    (fixed)   /          |

 *                 |            \            /           |

 *  0 (forwarding) v             ------------            |

 *           ------------                                |

 *          /            \  1 (QoS classification)       |

 *     +---/  ISCRITICAL  \-----------+                  |

 *     |   \  (per rule)  /           |                  |

 *     |    \            /   VLID taken from      VLID taken from

 *     v     ------------     index of rule       contents of rule

 *  select                     that matched         that matched

 * DESTPORTS                          |                  |

 *  |                                 +---------+--------+

 *  |                                           |

 *  |                                           v

 *  |                                     VL Forwarding

 *  |                                   (indexed by VLID)

 *  |                                      +---------+

 *  |                       +--------------|         |

 *  |                       |  select TYPE +---------+

 *  |                       v

 *  |   0 (rate      ------------    1 (time

 *  |  constrained) /            \   triggered)

 *  |       +------/     TYPE     \------------+

 *  |       |      \  (per VLID)  /            |

 *  |       v       \            /             v

 *  |  VL Policing   ------------         VL Policing

 *  | (indexed by VLID)                (indexed by VLID)

 *  |  +---------+                        +---------+

 *  |  | TYPE=0  |                        | TYPE=1  |

 *  |  +---------+                        +---------+

 *  |  select SHARINDX                 select SHARINDX to

 *  |  to rate-limit                 re-enter VL Forwarding

 *  |  groups of VL's               with new VLID for egress

 *  |  to same quota                           |

 *  |       |                                  |

 *  |  select MAXLEN -> exceed => drop    select MAXLEN -> exceed => drop

 *  |       |                                  |

 *  |       v                                  v

 *  |  VL Forwarding                      VL Forwarding

 *  | (indexed by SHARINDX)             (indexed by SHARINDX)

 *  |  +---------+                        +---------+

 *  |  | TYPE=0  |                        | TYPE=1  |

 *  |  +---------+                        +---------+

 *  |  select PRIORITY,                 select PRIORITY,

 *  | PARTITION, DESTPORTS            PARTITION, DESTPORTS

 *  |       |                                  |

 *  |       v                                  v

 *  |  VL Policing                        VL Policing

 *  | (indexed by SHARINDX)           (indexed by SHARINDX)

 *  |  +---------+                        +---------+

 *  |  | TYPE=0  |                        | TYPE=1  |

 *  |  +---------+                        +---------+

 *  |       |                                  |

 *  |       v                                  |

 *  |  select BAG, -> exceed => drop           |

 *  |    JITTER                                v

 *  |       |             ----------------------------------------------

 *  |       |            /    Reception Window is open for this VL      \

 *  |       |           /    (the Schedule Table executes an entry i     \

 *  |       |          /   M <= i < N, for which these conditions hold):  \ no

 *  |       |    +----/                                                    \-+

 *  |       |    |yes \       WINST[M] == 1 && WINSTINDEX[M] == VLID       / |

 *  |       |    |     \     WINEND[N] == 1 && WINSTINDEX[N] == VLID      /  |

 *  |       |    |      \                                                /   |

 *  |       |    |       \ (the VL window has opened and not yet closed)/    |

 *  |       |    |        ----------------------------------------------     |

 *  |       |    v                                                           v

 *  |       |  dispatch to DESTPORTS when the Schedule Table               drop

 *  |       |  executes an entry i with TXEN == 1 && VLINDEX == i

 *  v       v

 * dispatch immediately to DESTPORTS

 *

 * The per-port classification key is always composed of {DMAC, VID, PCP} and

 * is non-maskable. This 'looks like' the NULL stream identification function

 * from IEEE 802.1CB clause 6, except for the extra VLAN PCP. When the switch

 * ports operate as VLAN-unaware, we do allow the user to not specify the VLAN

 * ID and PCP, and then the port-based defaults will be used.

 *

 * In TTEthernet, routing is something that needs to be done manually for each

 * Virtual Link. So the flow action must always include one of:

 * a. 'redirect', 'trap' or 'drop': select the egress port list

 * Additionally, the following actions may be applied on a Virtual Link,

 * turning it into 'critical' traffic:

 * b. 'police': turn it into a rate-constrained VL, with bandwidth limitation

 *    given by the maximum frame length, bandwidth allocation gap (BAG) and

 *    maximum jitter.

 * c. 'gate': turn it into a time-triggered VL, which can be only be received

 *    and forwarded according to a given schedule.

 Keys are equal */

 Figure out the dimensioning of the problem */

 Each VL lookup entry matches on a single ingress port */

 Discard previous VL Lookup Table */

 Discard previous VL Policing Table */

 Discard previous VL Forwarding Table */

 Discard previous VL Forwarding Parameters Table */

 Nothing to do */

 Pre-allocate space in the static config tables */

 VL Lookup Table */

			/* For critical VLs, the DESTPORTS mask is taken from

			 * the VL Forwarding Table, so no point in putting it

			 * in the VL Lookup Table

	/* UM10944.pdf chapter 4.2.3 VL Lookup table:

	 * "the entries in the VL Lookup table must be sorted in ascending

	 * order (i.e. the smallest value must be loaded first) according to

	 * the following sort order: MACADDR, VLANID, PORT, VLANPRIOR."

 VL Policing Table */

 VL Forwarding Table */

 VL Forwarding Parameters Table */

 TODO: support per-flow MTU */

 SPDX-License-Identifier: BSD-3-Clause

/* Copyright 2016-2018 NXP

 * Copyright (c) 2018-2019, Vladimir Oltean <olteanv@gmail.com>

 Common structure for CFG_PAD_MIIx_RX and CFG_PAD_MIIx_TX */

/* UM10944 Table 82.

 * IDIV_0_C to IDIV_4_C control registers

 * (addr. 10000Bh to 10000Fh)

/* PLL_1_C control register

 *

 * SJA1105 E/T: UM10944 Table 81 (address 10000Ah)

 * SJA1105 P/Q/R/S: UM11040 Table 116 (address 10000Ah)

/* UM10944 Table 83.

 * MIIx clock control registers 1 to 30

 * (addresses 100013h to 100035h)

 Payload for packed_buf */

 25MHz */

 Block clk automatically */

 Divide by 1 or 10 */

 Power down? */

 Payload for packed_buf */

 Autoblock clk while changing clksrc */

 Power Down off => enabled */

 Payload for packed_buf */

 Autoblock clk while changing clksrc */

 Power Down off => enabled */

 Payload for packed_buf */

 Autoblock clk while changing clksrc */

 Power Down off => enabled */

 Payload for packed_buf */

 Autoblock clk while changing clksrc */

 Power Down off => enabled */

	/* If role is MAC, disable IDIV

	 * If role is PHY, enable IDIV and configure for 1/1 divider

	/* Configure CLKSRC of MII_TX_CLK_n

	 *   * If role is MAC, select TX_CLK_n

	 *   * If role is PHY, select IDIV_n

	/* Configure CLKSRC of MII_RX_CLK_n

	 * Select RX_CLK_n

 Per MII spec, the PHY (which is us) drives the TX_CLK pin */

		/* Configure CLKSRC of EXT_TX_CLK_n

		 * Select IDIV_n

		/* Configure CLKSRC of EXT_RX_CLK_n

		 * Select IDIV_n

 RGMII: 125MHz for 1000, 25MHz for 100, 2.5MHz for 10 */

 Autoblock clk while changing clksrc */

 Power Down off => enabled */

 AGU */

 Payload */

 TXD[3:2] output stage: */

          high noise/high speed */

 TXD[1:0] output stage: */

          high noise/high speed */

 TXD[3:2] input stage: */

          plain input (default) */

 TXD[1:0] input stage: */

          plain input (default) */

 TX_CTL / TX_ER output stage */

 TX_CTL / TX_ER input stage (default) */

 TX_CLK output stage */

 TX_CLK input hysteresis (default) */

 TX_CLK input stage (default) */

 Payload */

 RXD[3:2] input stage hysteresis: */

          non-Schmitt (default) */

 RXD[3:2] input weak pull-up/down */

          plain input (default) */

 RXD[1:0] input stage hysteresis: */

          non-Schmitt (default) */

 RXD[1:0] input weak pull-up/down */

          plain input (default) */

 RX_DV/CRS_DV/RX_CTL and RX_ER */

 input stage hysteresis: */

 non-Schmitt (default) */

 RX_DV/CRS_DV/RX_CTL and RX_ER */

 input stage weak pull-up/down: */

 pull-down */

 RX_CLK/RXC output stage: */

 medium noise/fast speed (default) */

 RX_CLK/RXC input hysteresis: */

 non-Schmitt (default) */

 RX_CLK/RXC input pull-up/down: */

 plain input (default) */

	/* Fields RXC_RANGE and TXC_RANGE select the input frequency range:

	 * 0 = 2.5MHz

	 * 1 = 25MHz

	 * 2 = 50MHz

	 * 3 = 125MHz

	 * 4 = Automatically determined by port speed.

	 * There's no point in defining a structure different than the one for

	 * SJA1105, so just hardcode the frequency range to automatic, just as

	 * before.

/* The RGMII delay setup procedure is 2-step and gets called upon each

 * .phylink_mac_config. Both are strategic.

 * The reason is that the RX Tunable Delay Line of the SJA1105 MAC has issues

 * with recovering from a frequency change of the link partner's RGMII clock.

 * The easiest way to recover from this is to temporarily power down the TDL,

 * as it will re-lock at the new frequency afterwards.

 Stage 1: Turn the RGMII delay lines off. */

 Stage 2: Turn the RGMII delay lines on. */

 The "BYPASS" bit in SJA1110 is actually a "don't bypass" */

 1000Mbps, IDIV disabled (125 MHz) */

 100Mbps, IDIV enabled, divide by 1 (25 MHz) */

 10Mbps, IDIV enabled, divide by 10 (2.5 MHz) */

		/* Skip CGU configuration if there is no speed available

		 * (e.g. link is not established yet)

 Payload for packed_buf */

 Autoblock clk while changing clksrc */

 Power Down off => enabled */

 Payload for packed_buf */

 Autoblock clk while changing clksrc */

 Power Down off => enabled */

	/* PLL1 must be enabled and output 50 Mhz.

	 * This is done by writing first 0x0A010941 to

	 * the PLL_1_C register and then deasserting

	 * power down (PD) 0x0A010940.

 Step 1: PLL1 setup for 50Mhz */

 Step 2: Enable PLL1 */

 AH1601.pdf chapter 2.5.1. Sources */

 Configure and enable PLL1 for 50Mhz output */

 Disable IDIV for this port */

 Source to sink mappings */

 RGMII etc */

 MAC or PHY, for applicable types (not RGMII) */

 Nothing to do in the CGU for SGMII */

 Internally pull down the RX_DV/CRS_DV/RX_CTL and RX_ER inputs */

 Power down the BASE_TIMER_CLK to disable the watchdog timer */

 Power down the BASE_MCSS_CLOCK to gate the microcontroller off */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell 88E6xxx System Management Interface (SMI) support

 *

 * Copyright (c) 2008 Marvell Semiconductor

 *

 * Copyright (c) 2019 Vivien Didelot <vivien.didelot@gmail.com>

/* The switch ADDR[4:1] configuration pins define the chip SMI device address

 * (ADDR[0] is always zero, thus only even SMI addresses can be strapped).

 *

 * When ADDR is all zero, the chip uses Single-chip Addressing Mode, assuming it

 * is the only device connected to the SMI master. In this mode it responds to

 * all 32 possible SMI addresses, and thus maps directly the internal devices.

 *

 * When ADDR is non-zero, the chip uses Multi-chip Addressing Mode, allowing

 * multiple devices to share the SMI interface. In this mode it responds to only

 * 2 registers, used to indirectly access the internal SMI devices.

 *

 * Some chips use a different scheme: Only the ADDR4 pin is used for

 * configuration, and the device responds to 16 of the 32 SMI

 * addresses, allowing two to coexist on the same SMI interface.

/* Offset 0x00: SMI Command Register

 * Offset 0x01: SMI Data Register

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell 88E6xxx Switch Port Registers support

 *

 * Copyright (c) 2008 Marvell Semiconductor

 *

 * Copyright (c) 2016-2017 Savoir-faire Linux Inc.

 *	Vivien Didelot <vivien.didelot@savoirfairelinux.com>

/* Offset 0x00: MAC (or PCS or Physical) Status Register

 *

 * For most devices, this is read only. However the 6185 has the MyPause

 * bit read/write.

/* Offset 0x01: MAC (or PCS or Physical) Control Register

 *

 * Link, Duplex and Flow Control have one force bit, one value bit.

 *

 * For port's MAC speed, ForceSpd (or SpdValue) bits 1:0 program the value.

 * Alternative values require the 200BASE (or AltSpeed) bit 12 set.

 * Newer chips need a ForcedSpd bit 13 set to consider the value.

 normal link detection */

 all bits set, fall through... */

 normal duplex detection */

 Support 10, 100, 200 Mbps (e.g. 88E6065 family) */

 Setting 200 Mbps on port 0 to 3 selects 100 Mbps */

 Support 10, 100, 1000 Mbps (e.g. 88E6185 family) */

 Support 10, 100 Mbps (e.g. 88E6250 family) */

 Support 10, 100, 200, 1000, 2500 Mbps (e.g. 88E6341) */

 Support 10, 100, 200, 1000 Mbps (e.g. 88E6352 family) */

 Support 10, 100, 200, 1000, 2500 Mbps (e.g. 88E6390) */

 Support 10, 100, 200, 1000, 2500, 10000 Mbps (e.g. 88E6190X) */

/* Support 10, 100, 200, 1000, 2500, 5000, 10000 Mbps (e.g. 88E6393X)

 * Function mv88e6xxx_port_set_speed_duplex() can't be used as the register

 * values for speeds 2500 & 5000 conflict.

 normal duplex detection */

	/* Default to a slow mode, so freeing up SERDES interfaces for

	 * other ports which might use them for SFPs.

 cmode doesn't change, nothing to do for us unless forced */

 mv88e6393x errata 4.5: EEE should be disabled on SERDES ports */

/* Offset 0x02: Jamming Control

 *

 * Do not limit the period of time that this port can be paused for by

 * the remote end or the period of time that this port can pause the

 * remote end.

 Offset 0x04: Port Control Register */

 Offset 0x05: Port Control 1 */

 Offset 0x06: Port Based VLAN Map */

 Port's default FID lower 4 bits are located in reg 0x06, offset 12 */

 Port's default FID upper bits are located in reg 0x05, offset 0 */

 Port's default FID lower 4 bits are located in reg 0x06, offset 12 */

 Port's default FID upper bits are located in reg 0x05, offset 0 */

 Offset 0x07: Default Port VLAN ID & Priority */

 Offset 0x08: Port Control 2 Register */

 Offset 0x09: Port Rate Control */

 Offset 0x0B: Port Association Vector */

 Offset 0x0C: Port ATU Control */

 Offset 0x0D: (Priority) Override Register */

 Offset 0x0E: Policy & MGMT Control Register for FAMILY 6191X 6193X 6393X */

	/* Consider the frames with reserved multicast destination

	 * addresses matching 01:80:c2:00:00:00 and

	 * 01:80:c2:00:00:02 as MGMT.

 Offset 0x10 & 0x11: EPC */

 Port Ether type for 6393X family */

 Offset 0x0f: Port Ether type */

/* Offset 0x18: Port IEEE Priority Remapping Registers [0-3]

 * Offset 0x19: Port IEEE Priority Remapping Registers [4-7]

 Use a direct priority mapping for all IEEE tagged frames */

 Offset 0x0E: Policy Control Register */

	/* The 16-bit Port Policy CTL register from older chips is on 6393x

	 * changed to Port Policy MGMT CTL, which can access more data, but

	 * indirectly. The original 16-bit value is divided into two 8-bit

	 * registers.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell 88E6xxx Switch Global (1) Registers support

 *

 * Copyright (c) 2008 Marvell Semiconductor

 *

 * Copyright (c) 2016-2017 Savoir-faire Linux Inc.

 *	Vivien Didelot <vivien.didelot@savoirfairelinux.com>

 Offset 0x00: Switch Global Status Register */

	/* Wait up to 1 second for the switch to be ready. The InitReady bit 11

	 * is set to a one when all units inside the device (ATU, VTU, etc.)

	 * have finished their initialization and are ready to accept frames.

	/* Wait up to 1 second for the switch to finish reading the

	 * EEPROM.

		/* If the switch is still resetting, it may not

		 * respond on the bus, and so MDIO read returns

		 * 0xffff. Differentiate between that, and waiting for

		 * the EEPROM to be done by bit 0 being set.

/* Offset 0x01: Switch MAC Address Register Bytes 0 & 1

 * Offset 0x02: Switch MAC Address Register Bytes 2 & 3

 * Offset 0x03: Switch MAC Address Register Bytes 4 & 5

 Offset 0x04: Switch Global Control Register */

	/* Set the SWReset bit 15 along with the PPUEn bit 14, to also restart

	 * the PPU, including re-doing PHY detection and initialization

 Set the SWReset bit 15 */

/* Offset 0x10: IP-PRI Mapping Register 0

 * Offset 0x11: IP-PRI Mapping Register 1

 * Offset 0x12: IP-PRI Mapping Register 2

 * Offset 0x13: IP-PRI Mapping Register 3

 * Offset 0x14: IP-PRI Mapping Register 4

 * Offset 0x15: IP-PRI Mapping Register 5

 * Offset 0x16: IP-PRI Mapping Register 6

 * Offset 0x17: IP-PRI Mapping Register 7

 Reset the IP TOS/DiffServ/Traffic priorities to defaults */

 Offset 0x18: IEEE-PRI Register */

 Reset the IEEE Tag priorities to defaults */

 Reset the IEEE Tag priorities to defaults */

 Offset 0x1a: Monitor Control */

 Offset 0x1a: Monitor & MGMT Control on some devices */

/* Older generations also call this the ARP destination. It has been

 * generalized in more modern devices such that more than ARP can

 * egress it

	/* Use the default high priority for management frames sent to

	 * the CPU.

 01:80:c2:00:00:00-01:80:c2:00:00:07 are Management */

 01:80:c2:00:00:08-01:80:c2:00:00:0f are Management */

 01:80:c2:00:00:20-01:80:c2:00:00:27 are Management */

 01:80:c2:00:00:28-01:80:c2:00:00:2f are Management */

 Offset 0x1c: Global Control 2 */

 Offset 0x1d: Statistics Operation 2 */

 Snapshot the hardware statistics counters for this port. */

 Wait for the snapshotting to complete. */

 Snapshot the hardware statistics counters for this port. */

 Wait for the snapshotting to complete. */

 Keep the histogram mode bits */

 Wait for the flush to complete. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell 88E6xxx Switch PTP support

 *

 * Copyright (c) 2008 Marvell Semiconductor

 *

 * Copyright (c) 2017 National Instruments

 *      Erik Hons <erik.hons@ni.com>

 *      Brandon Streiff <brandon.streiff@ni.com>

 *      Dane Wagner <dane.wagner@ni.com>

/* Family MV88E6250:

 * Raw timestamps are in units of 10-ns clock periods.

 *

 * clkadj = scaled_ppm * 10*2^28 / (10^6 * 2^16)

 * simplifies to

 * clkadj = scaled_ppm * 2^7 / 5^5

/* Other families:

 * Raw timestamps are in units of 8-ns clock periods.

 *

 * clkadj = scaled_ppm * 8*2^28 / (10^6 * 2^16)

 * simplifies to

 * clkadj = scaled_ppm * 2^9 / 5^6

 TODO: places where this are called should be using pinctrl */

/* mv88e6352_config_eventcap - configure TAI event capture

 * @event: PTP_CLOCK_PPS (internal) or PTP_CLOCK_EXTTS (external)

 * @rising: zero for falling-edge trigger, else rising-edge trigger

 *

 * This will also reset the capture sequence counter.

 if STATUS_CAP_TRIG is unset we capture PTP_EVREQ events */

 Write the capture config; this also clears the capture counter */

 Clear the valid bit so the next timestamp can come in */

 This is an external timestamp */

 We only have one timestamping channel. */

 Reject requests with unsupported flags */

 Reject requests to enable time stamping on both edges. */

/* With a 125MHz input clock, the 32-bit timestamp counter overflows in ~34.3

 * seconds; this task forces periodic reads so that we don't miss any.

 Set up the cycle counter */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell 88E6xxx Switch Hidden Registers support

 *

 * Copyright (c) 2008 Marvell Semiconductor

 *

 * Copyright (c) 2019 Andrew Lunn <andrew@lunn.ch>

/* The mv88e6390 and mv88e6341 have some hidden registers used for debug and

 * development. The errata also makes use of them.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell 88e6xxx Ethernet switch single-chip support

 *

 * Copyright (c) 2008 Marvell Semiconductor

 *

 * Copyright (c) 2016 Andrew Lunn <andrew@lunn.ch>

 *

 * Copyright (c) 2016-2017 Savoir-faire Linux Inc.

 *	Vivien Didelot <vivien.didelot@savoirfairelinux.com>

 There's no bus specific operation to wait for a mask */

 To be called with reg_lock held */

	/*

	 * free_irq must be called without reg_lock taken because the irq

	 * handler takes this lock, too.

 Reading the interrupt status clears (most of) them */

	/* These lock classes tells lockdep that global 1 irqs are in

	 * a different category than their parent GPIO, so it won't

	 * report false recursion.

 Port's MAC control must not be changed unless the link is down */

 10M and 100M are only supported in non-802.3z mode */

	/* FIXME: if the port is in 1000Base-X mode, then it only supports

	 * 1000M FD speeds.  In this case, CMODE will indicate 5.

 No ethtool bits for 200Mbps */

 No ethtool bits for 200Mbps */

 No ethtool bits for 200Mbps */

 Allow all the expected bits */

	/* We can only operate at 2500BaseX or 1000BaseX.  If requested

	 * to advertise both, only report advertising at 2500BaseX.

	/* FIXME: is this the correct test? If we're in fixed mode on an

	 * internal port, why should we process this any different from

	 * PHY mode? On the other hand, the port may be automedia between

	 * an internal PHY and the serdes...

	/* In inband mode, the link may come up at any time while the link

	 * is not forced down. Force the link down while we reconfigure the

	 * interface mode.

	/* FIXME: we should restart negotiation if something changed - which

	 * is something we get if we convert to using phylinks PCS operations.

	/* Undo the forced down state above after completing configuration

	 * irrespective of its state on entry, which allows the link to come up.

	/* Internal PHYs propagate their configuration directly to the MAC.

	 * External PHYs depend on whether the PPU is enabled for this port.

	/* Internal PHYs propagate their configuration directly to the MAC.

	 * External PHYs depend on whether the PPU is enabled for this port.

		/* FIXME: for an automedia port, should we force the link

		 * down here - what if the link comes up due to "other" media

		 * while we're bringing the port up, how is the exclusivity

		 * handled in the Marvell hardware? E.g. port 2 on 88E6390

		 * shared between internal PHY and Serdes.

 Nothing to do on the port's MAC */

 Nothing to do on the port's MAC */

 Mask of the local ports allowed to receive frames from a given fabric port */

 dev is a physical switch */

				/* dp might be a DSA link or a user port, so it

				 * might or might not have a bridge_dev

				 * pointer. Use the "found" variable for both

				 * cases.

 dev is a virtual bridge */

 Prevent frames from unknown switch or virtual bridge */

 Frames from DSA links and CPU ports can egress any local port */

	/* Frames from user ports can egress any local DSA links and CPU ports,

	 * as well as any local member of their bridge group.

 prevent frames from going back out of the port they came in on */

 Initialize the routing port to the 32 possible target devices */

 Clear all trunk masks and mapping */

	/* The chips that have a "learn2all" bit in Global1, ATU

	 * Control are precisely those whose port registers have a

	 * Message Port bit in Port Control 1 and hence implement

	 * ->port_setup_message_port.

		/* Disable ingress rate limiting by resetting all per port

		 * ingress rate limit resources to their initial state.

 Skip the local source device, which uses in-chip port VLAN */

			/* As the PVT is used to limit flooding of

			 * FORWARD frames, which use the LAG ID as the

			 * source port, we must translate dev/port to

			 * the special "LAG device" in the PVT, using

			 * the LAG ID as the port number.

	/* Clear 5 Bit Port for usage with Marvell Link Street devices:

	 * use 4 bits for the Src_Port/Src_Trunk and 5 bits for the Src_Dev.

		/* Hardware is incapable of fast-aging a LAG through a

		 * regular ATU move operation. Until we have something

		 * more fancy in place this is a no-op.

 Set every FID bit used by the (un)bridged ports */

 Set every FID bit used by the VLAN entries */

	/* The reset value 0x000 is used to indicate that multiple address

	 * databases are not needed. Return the next positive available.

 Clear the database */

 DSA and CPU ports have to be members of multiple vlans */

 same bridge, check next VLAN */

	/* If the requested port doesn't belong to the same bridge as the VLAN

	 * members, do not support it (yet) and fallback to software VLAN.

	/* Ports have two private address databases: one for when the port is

	 * standalone and one for when the port is under a bridge and the

	 * 802.1Q mode is disabled. When the port is standalone, DSA wants its

	 * address database to remain 100% empty, so we never load an ATU entry

	 * into a standalone port's database. Therefore, translate the null

	 * VLAN ID into the port's database used for VLAN-unaware bridging.

 switchdev expects -EOPNOTSUPP to honor software VLANs */

 Initialize a fresh ATU entry if it isn't found */

 Purge the ATU entry only if no port is using it anymore */

 Dissociate the port and address */

 Skip the port's policy clearing if the mapping is still in use */

 Cannot support DA and SA mapping in the same rule */

			/* Skip bridged user ports where broadcast

			 * flooding is disabled.

 Update the port's private database... */

 ...and the database for all VLANs. */

	/* net/dsa/slave.c will call dsa_port_vlan_add() for the affected port

	 * and then the CPU port. Do not warn for duplicates for the CPU port.

 The old pvid was reinstalled as a non-pvid VLAN */

	/* If the VLAN doesn't exist in hardware or the port isn't a member,

	 * tell switchdev that this VLAN is likely handled in software.

 keep the VLAN unless all ports are excluded */

 Dump port's default Filtering Information Database (VLAN ID 0) */

				/* This is a local bridge group member,

				 * remap its Port VLAN Map.

				/* This is an external bridge group member,

				 * remap its cross-chip Port VLAN Table entry.

/* Treat the software bridge as a virtual single-port switch behind the

 * CPU and map in the PVT. First dst->last_switch elements are taken by

 * physical switches, so start from beyond that range.

 If there is a GPIO connected to the reset pin, toggle it */

 Set all ports to the Disabled state */

	/* Wait for transmit queues to drain,

	 * i.e. 2ms for a maximum frame to be transmitted at 10 Mbps.

 Setup CPU port mode depending on its supported tag format */

 Nothing to request if this SERDES port has no IRQ */

 Requesting the IRQ will trigger IRQ callbacks, so release the lock */

 Nothing to free if no IRQ has been requested */

 Freeing the IRQ will trigger IRQ callbacks, so release the lock */

	/* MAC Forcing register: don't force link, speed, duplex or flow control

	 * state to any particular values on physical ports, but force the CPU

	 * port and all DSA ports to their maximum bandwidth and full duplex.

	/* Port Control: disable Drop-on-Unlock, disable Drop-on-Lock,

	 * disable Header mode, enable IGMP/MLD snooping, disable VLAN

	 * tunneling, determine priority by looking at 802.1p and IP

	 * priority fields (IP prio has precedence), and set STP state

	 * to Forwarding.

	 *

	 * If this is the CPU link, use DSA or EDSA tagging depending

	 * on which tagging mode was configured.

	 *

	 * If this is a link to another switch, use DSA tagging mode.

	 *

	 * If this is the upstream port for this switch, enable

	 * forwarding of unknown unicasts and multicasts.

	/* Port Control 2: don't force a good FCS, set the MTU size to

	 * 10222 bytes, disable 802.1q tags checking, don't discard tagged or

	 * untagged frames on this port, do a destination address lookup on all

	 * received packets as usual, disable ARP mirroring and don't send a

	 * copy of all transmitted/received frames on this port to the CPU.

	/* Associate MV88E6XXX_VID_BRIDGED with MV88E6XXX_FID_BRIDGED in the

	 * ATU by virtue of the fact that mv88e6xxx_atu_new() will pick it as

	 * the first free FID after MV88E6XXX_FID_STANDALONE. This will be used

	 * as the private PVID on ports under a VLAN-unaware bridge.

	 * Shared (DSA and CPU) ports must also be members of it, to translate

	 * the VID from the DSA tag into MV88E6XXX_FID_BRIDGED, instead of

	 * relying on their port default FID.

	/* Port Association Vector: disable automatic address learning

	 * on all user ports since they start out in standalone

	 * mode. When joining a bridge, learning will be configured to

	 * match the bridge port settings. Enable learning on all

	 * DSA/CPU ports. NOTE: FROM_CPU frames always bypass the

	 * learning process.

	 *

	 * Disable HoldAt1, IntOnAgeOut, LockedPort, IgnoreWrongData,

	 * and RefreshLocked. I.e. setup standard automatic learning.

 Egress rate control 2: disable egress rate control. */

	/* Port based VLAN map: give each port the same default address

	 * database, and allow bidirectional communication between the

	 * CPU and DSA port(s), and the other ports.

	/* Default VLAN ID and priority: don't set a default VLAN

	 * ID, and set the default packet priority to zero.

 Initialize the statistics unit */

 Check if the errata has already been applied. */

/* The 6390 copper ports have an errata which require poking magic

 * values into undocumented hidden registers and then performing a

 * software reset.

 Set the ports into blocking mode */

	/* Since virtual bridges are mapped in the PVT, the number we support

	 * depends on the physical switch topology. We need to let DSA figure

	 * that out and therefore we cannot set this at dsa_register_switch()

	 * time.

 Cache the cmode of each port. */

 Setup Switch Port Registers */

 Prevent the use of an invalid port. */

 Setup PTP Hardware Clock and timestamping */

	/* Have to be called without holding the register lock, since

	 * they take the devlink lock, and we later take the locks in

	 * the reverse order when getting/setting parameters or

	 * resource occupancy.

 prod_id for switch families which do not have a PHY model number */

 Some internal PHYs don't have a model number. */

	/* Always register one mdio bus for the internal/default mdio

	 * bus. This maybe represented in the device tree, but is

	 * optional.

	/* Walk the device tree, and see if there are any other nodes

	 * which say they are compatible with the external mdio

	 * bus.

 MV88E6XXX_FAMILY_6097 */

 MV88E6XXX_FAMILY_6095 */

 MV88E6XXX_FAMILY_6097 */

 MV88E6XXX_FAMILY_6165 */

 MV88E6XXX_FAMILY_6185 */

 MV88E6XXX_FAMILY_6341 */

 Check status register pause & lpa register */

 MV88E6XXX_FAMILY_6165 */

 MV88E6XXX_FAMILY_6165 */

 MV88E6XXX_FAMILY_6351 */

 MV88E6XXX_FAMILY_6352 */

 MV88E6XXX_FAMILY_6351 */

 MV88E6XXX_FAMILY_6352 */

 MV88E6XXX_FAMILY_6185 */

 MV88E6XXX_FAMILY_6390 */

 Check status register pause & lpa register */

 MV88E6XXX_FAMILY_6390 */

 Check status register pause & lpa register */

 MV88E6XXX_FAMILY_6390 */

 Check status register pause & lpa register */

 MV88E6XXX_FAMILY_6352 */

 MV88E6XXX_FAMILY_6250 */

 MV88E6XXX_FAMILY_6390 */

 Check status register pause & lpa register */

 MV88E6XXX_FAMILY_6320 */

 MV88E6XXX_FAMILY_6320 */

 MV88E6XXX_FAMILY_6341 */

 Check status register pause & lpa register */

 MV88E6XXX_FAMILY_6351 */

 MV88E6XXX_FAMILY_6351 */

 MV88E6XXX_FAMILY_6352 */

 MV88E6XXX_FAMILY_6390 */

 Check status register pause & lpa register */

 MV88E6XXX_FAMILY_6390 */

 MV88E6XXX_FAMILY_6393 */

	/* .set_cpu_port is missing because this family does not support a global

	 * CPU port, only per port CPU port which is set via

	 * .port_set_upstream_port method.

 TODO: serdes stats */

 10 + Z80 */

 10 + Z80 */

 10 + Z80 */

 10 + Z80 */

 10 + Z80 */

		/* Ports 2-4 are not routed to pins

		 * => usable ports 0, 1, 5, 6

 10 + Z80 */

 10 + Z80 */

 10 + Z80 */

 10 + Z80 */

 Update the compatible info with the probed one */

 Can't change egress port when other mirror is active */

 Reset egress port when no other mirror is active */

 Includes the port joining the LAG */

	/* We could potentially relax this to include active

	 * backup in the future.

	/* Ideally we would also validate that the hash type matches

	 * the hardware. Alas, this is always set to unknown on team

	 * interfaces.

	/* Build the map of all ports to distribute flows destined for

	 * this LAG. This can be either a local user port, or a DSA

	 * port if the LAG port is on a remote chip.

	/* Row number corresponds to the number of active members in a

	 * LAG. Each column states which of the eight hash buckets are

	 * mapped to the column:th port in the LAG.

	 *

	 * Example: In a LAG with three active ports, the second port

	 * ([2][1]) would be selected for traffic mapped to buckets

	 * 3,4,5 (0x38).

 Assume no port is a member of any LAG. */

 Disable all masks for ports that _are_ members of a LAG. */

	/* Enable the correct subset of masks for all LAG ports that

	 * are in the Tx set.

	/* Some chips support up to 32, but that requires enabling the

	 * 5-bit port mode, which we do not support. 640k^W16 ought to

	 * be enough for anyone.

/* There is no suspend to RAM support at DSA level yet, the switch configuration

 * would be lost after a power cycle so prevent it to be suspended.

	/* Has to be performed before the MDIO bus is created, because

	 * the PHYs will link their interrupts to these interrupt

	 * controllers

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell 88E6xxx Switch hardware timestamping support

 *

 * Copyright (c) 2008 Marvell Semiconductor

 *

 * Copyright (c) 2017 National Instruments

 *      Erik Hons <erik.hons@ni.com>

 *      Brandon Streiff <brandon.streiff@ni.com>

 *      Dane Wagner <dane.wagner@ni.com>

/* TX_TSTAMP_TIMEOUT: This limits the time spent polling for a TX

 * timestamp. When working properly, hardware will produce a timestamp

 * within 1ms. Software may enounter delays due to MDIO contention, so

 * the timeout is set accordingly.

	/* Prevent the TX/RX paths from trying to interact with the

	 * timestamp hardware while we reconfigure it.

 reserved for future extensions */

	/* The switch supports timestamping both L2 and L4; one cannot be

	 * disabled independently of the other.

	/* Once hardware has been configured, enable timestamp checks

	 * in the RX/TX paths.

 Save the chosen configuration to be returned later. */

/* Returns a pointer to the PTP header if the caller should time stamp,

 * or NULL if the caller should not.

 The latched timestamp belongs to one of the received frames. */

	/* Since the device can only handle one time stamp at a time,

	 * we purge any extra frames from the queue.

		/* The timestamp should be available quickly, while getting it

		 * is high priority and time bounded to only 10ms. A poll is

		 * warranted so restart the work.

 We have the timestamp; go ahead and clear valid now */

	/* skb_complete_tx_timestamp() will free up the client to make

	 * another timestamp-able transmit. We have to be ready for it

	 * -- by clearing the ps->tx_skb "flag" -- beforehand.

 Disable timestamping on all ports. */

 Disable PTP globally */

 Set the ethertype of L2 PTP messages */

	/* MV88E6XXX_PTP_MSG_TYPE is a mask of PTP message types to

	 * timestamp. This affects all ports that have timestamping enabled,

	 * but the timestamp config is per-port; thus we configure all events

	 * here and only support the HWTSTAMP_FILTER_*_EVENT filter types.

 Use ARRIVAL1 for peer delay response messages. */

	/* 88E6341 devices default to timestamping at the PHY, but this has

	 * a hardware issue that results in unreliable timestamps. Force

	 * these devices to timestamp at the MAC.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell 88E6xxx VLAN [Spanning Tree] Translation Unit (VTU [STU]) support

 *

 * Copyright (c) 2008 Marvell Semiconductor

 * Copyright (c) 2015 CMC Electronics, Inc.

 * Copyright (c) 2017 Savoir-faire Linux, Inc.

 Offset 0x02: VTU FID Register */

 Offset 0x03: VTU SID Register */

 Offset 0x05: VTU Operation Register */

 Offset 0x06: VTU VID Register */

/* Offset 0x07: VTU/STU Data Register 1

 * Offset 0x08: VTU/STU Data Register 2

 * Offset 0x09: VTU/STU Data Register 3

 Read all 3 VTU/STU Data registers */

 Extract MemberTag data */

 Extract PortState data */

 Insert MemberTag and PortState data */

 Write all 3 VTU/STU Data registers */

 Read the 2 VTU/STU Data registers */

 Extract data */

 Insert data */

 Write the 2 VTU/STU Data registers */

 VLAN Translation Unit Operations */

	/* To get the next higher active VID, the VTU GetNext operation can be

	 * started again without setting the VID registers since it already

	 * contains the last VID.

	 *

	 * To save a few hardware accesses and abstract this to the caller,

	 * write the VID only once, when the entry is given as invalid.

		/* VTU DBNum[3:0] are located in VTU Operation 3:0

		 * VTU DBNum[7:4] ([5:4] for 6250) are located in VTU Operation 11:8 (9:8)

 Fetch VLAN MemberTag data from the VTU */

 Fetch VLAN PortState data from the STU */

 Fetch VLAN MemberTag data from the VTU */

 Fetch VLAN PortState data from the STU */

		/* VTU DBNum[3:0] are located in VTU Operation 3:0

		 * VTU DBNum[7:4] are located in VTU Operation 11:8

		 *

		 * For the 6250/6220, the latter are really [5:4] and

		 * 9:8, but in those cases bits 7:6 of entry->fid are

		 * 0 since they have num_databases = 64.

 Write MemberTag and PortState data */

 Load STU entry */

 Load/Purge VTU entry */

 Write PortState data */

 Load STU entry */

 Write MemberTag data */

 Load/Purge VTU entry */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell 88E6xxx Switch Global 2 Registers support

 *

 * Copyright (c) 2008 Marvell Semiconductor

 *

 * Copyright (c) 2016-2017 Savoir-faire Linux Inc.

 *	Vivien Didelot <vivien.didelot@savoirfairelinux.com>

 for MV88E6XXX_G1_STS_IRQ_DEVICE */

 Offset 0x00: Interrupt Source Register */

 Read (and clear most of) the Interrupt Source bits */

 Offset 0x01: Interrupt Mask Register */

 Offset 0x02: Management Enable 2x */

 Offset 0x03: Management Enable 0x */

 Offset 0x05: Switch Management Register */

	/* Consider the frames with reserved multicast destination

	 * addresses matching 01:80:c2:00:00:0x as MGMT.

	/* Consider the frames with reserved multicast destination

	 * addresses matching 01:80:c2:00:00:2x as MGMT.

 Offset 0x06: Device Mapping Table register */

	/* Modern chips use 5 bits to define a device mapping port,

	 * but bit 4 is reserved on older chips, so it is safe to use.

 Offset 0x07: Trunk Mask Table register */

 Offset 0x08: Trunk Mapping Table register */

 Clear all eight possible Trunk Mask vectors */

 Clear all sixteen possible Trunk ID routing vectors */

/* Offset 0x09: Ingress Rate Command register

 * Offset 0x0A: Ingress Rate Data register

/* Offset 0x0B: Cross-chip Port VLAN (Addr) Register

 * Offset 0x0C: Cross-chip Port VLAN Data Register

	/* 9-bit Cross-chip PVT pointer: with MV88E6XXX_G2_MISC_5_BIT_PORT

	 * cleared, source device is 5-bit, source port is 4-bit.

 Offset 0x0D: Switch MAC/WoL/WoF register */

 Offset 0x0E: ATU Statistics */

 Offset 0x0F: Priority Override Table */

 Clear all sixteen possible Priority Override entries */

/* Offset 0x14: EEPROM Command

 * Offset 0x15: EEPROM Data (for 16-bit data access)

 * Offset 0x15: EEPROM Addr (for 8-bit data access)

 Ensure the RO WriteEn bit is set */

/* Offset 0x18: SMI PHY Command Register

 * Offset 0x19: SMI PHY Data Register

 empty mask */

 empty mask */

 IEEE 802.3 Clause 22 Read Data Register */

 IEEE 802.3 Clause 22 Write Data Register */

 IEEE 802.3 Clause 45 Write Address Register */

 IEEE 802.3 Clause 45 Read Data Register */

 IEEE 802.3 Clause 45 Write Data Register */

 Offset 0x1B: Watchdog Control */

 Trigger a software reset to try to recover the switch */

 Offset 0x1D: Misc Register */

 SPDX-License-Identifier: GPL-2.0-or-later

/* The ATU entry varies between mv88e6xxx chipset generations. Define

 * a generic format which covers all the current and hopefully future

 * mv88e6xxx generations

 The FID is scattered over multiple registers. */

/**

 * struct mv88e6xxx_devlink_vtu_entry - Devlink VTU entry

 * @fid:   Global1/2:   FID and VLAN policy.

 * @sid:   Global1/3:   SID, unknown filters and learning.

 * @op:    Global1/5:   FID (old chipsets).

 * @vid:   Global1/6:   VID, valid, and page.

 * @data:  Global1/7-9: Membership data and priority override.

 * @resvd: Reserved. Also happens to align the size to 16B.

 *

 * The VTU entry format varies between chipset generations, the

 * descriptions above represent the superset of all possible

 * information, not all fields are valid on all devices. Since this is

 * a low-level debug interface, copy all data verbatim and defer

 * parsing to the consumer.

 calculated at runtime */

 calculated at runtime */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell 88E6xxx Address Translation Unit (ATU) support

 *

 * Copyright (c) 2008 Marvell Semiconductor

 * Copyright (c) 2017 Savoir-faire Linux, Inc.

 Offset 0x01: ATU FID Register */

 Offset 0x0A: ATU Control Register */

 Round to nearest multiple of coeff */

 AgeTime is 11:4 bits */

 Offset 0x0B: ATU Operation Register */

 FID bits are dispatched all around gradually as more are supported */

 ATU DBNum[7:4] are located in ATU Control 15:12 */

 ATU DBNum[5:4] are located in ATU Operation 9:8 */

 ATU DBNum[3:0] are located in ATU Operation 3:0 */

 Offset 0x0C: ATU Data Register */

/* Offset 0x0D: ATU MAC Address Register Bytes 0 & 1

 * Offset 0x0E: ATU MAC Address Register Bytes 2 & 3

 * Offset 0x0F: ATU MAC Address Register Bytes 4 & 5

 Address Translation Unit operations */

 Write the MAC address to iterate from only once */

 Flush/Move all or non-static entries from all or a given database */

 Null EntryState means Flush */

 Full EntryState means Move */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell 88e6xxx Ethernet switch PHY and PPU support

 *

 * Copyright (c) 2008 Marvell Semiconductor

 *

 * Copyright (c) 2017 Andrew Lunn <andrew@lunn.ch>

 PHY devices addresses start at 0x0 */

 PHY devices addresses start at 0x0 */

	/* Restore PHY page Copper 0x0 for access via the registered

	 * MDIO bus

 There is no paging for registers 22 */

 There is no paging for registers 22 */

	/* If the PHY polling unit is enabled, disable it so that

	 * we can access the PHY registers.  If it was already

	 * disabled, cancel the timer that is going to re-enable

	 * it.

 Schedule a timer to re-enable the PHY polling unit. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell 88E6xxx SERDES manipulation, via SMI bus

 *

 * Copyright (c) 2008 Marvell Semiconductor

 *

 * Copyright (c) 2017 Andrew Lunn <andrew@lunn.ch>

 Unused */

 If the link has dropped, we want to know about it. */

	/* The serdes power can't be controlled on this switch chip but we need

	 * to supply this function to avoid returning -EOPNOTSUPP in

	 * mv88e6xxx_serdes_power_up/mv88e6xxx_serdes_power_down

	/* There are no configurable serdes lanes on this switch chip but we

	 * need to return a non-negative lane number so that callers of

	 * mv88e6xxx_serdes_get_lane() know this is a serdes port.

	/* The serdes interrupts are enabled in the G2_INT_MASK register. We

	 * need to return 0 to avoid returning -EOPNOTSUPP in

	 * mv88e6xxx_serdes_irq_enable/mv88e6xxx_serdes_irq_disable

/* Only Ports 0, 9 and 10 have SERDES lanes. Return the SERDES lane address

 * a port is using else Returns -ENODEV.

 Set power up/down for 10GBASE-R and 10GBASE-X4/X2 */

 Set power up/down for SGMII and 1000Base-X */

 setting ANENABLE triggers a restart of negotiation */

 If the link has dropped, we want to know about it. */

 If the link has dropped, we want to know about it. */

 SERDES common registers */

 SGMII */

 10Gbase-X */

 10Gbase-R */

	/* mv88e6393x family errata 4.6:

	 * Cannot clear PwrDn bit on SERDES if device is configured CPU_MGD

	 * mode or P0_mode is configured for [x]MII.

	 * Workaround: Set SERDES register 4.F002 bit 5=0 and bit 15=1.

	 *

	 * It seems that after this workaround the SERDES is automatically

	 * powered up (the bit is cleared), so power it down.

	/* mv88e6393x family errata 4.8:

	 * When a SERDES port is operating in 1000BASE-X or SGMII mode link may

	 * not come up after hardware reset or software reset of SERDES core.

	 * Workaround is to write SERDES register 4.F074.14=1 for only those

	 * modes and 0 in all other modes.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell 88E6xxx Switch Global 2 Registers support

 *

 * Copyright (c) 2008 Marvell Semiconductor

 *

 * Copyright (c) 2016-2017 Savoir-faire Linux Inc.

 *	Vivien Didelot <vivien.didelot@savoirfairelinux.com>

 *

 * Copyright (c) 2017 National Instruments

 *	Brandon Streiff <brandon.streiff@ni.com>

/* Offset 0x16: AVB Command Register

 * Offset 0x17: AVB Data Register

 *

 * There are two different versions of this register interface:

 *    "6352": 3-bit "op" field, 4-bit "port" field.

 *    "6390": 2-bit "op" field, 5-bit "port" field.

 *

 * The "op" codes are different between the two, as well as the special

 * port fields for global PTP and TAI configuration.

/* mv88e6xxx_g2_avb_read -- Read one or multiple 16-bit words.

 * The hardware supports snapshotting up to four contiguous registers.

 Hardware can only snapshot four words. */

 mv88e6xxx_g2_avb_write -- Write one 16-bit word. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell 88E6xxx Switch Global 2 Scratch & Misc Registers support

 *

 * Copyright (c) 2008 Marvell Semiconductor

 *

 * Copyright (c) 2017 National Instruments

 *      Brandon Streiff <brandon.streiff@ni.com>

 Offset 0x1A: Scratch and Misc. Register */

/**

 * mv88e6xxx_g2_scratch_get_bit - get a bit

 * @chip: chip private data

 * @base_reg: base of scratch bits

 * @offset: index of bit within the register

 * @set: is bit set?

/**

 * mv88e6xxx_g2_scratch_set_bit - set (or clear) a bit

 * @chip: chip private data

 * @base_reg: base of scratch bits

 * @offset: index of bit within the register

 * @set: should this bit be set?

 *

 * Helper function for dealing with the direction and data registers.

/**

 * mv88e6352_g2_scratch_gpio_get_data - get data on gpio pin

 * @chip: chip private data

 * @pin: gpio index

 *

 * Return: 0 for low, 1 for high, negative error

/**

 * mv88e6352_g2_scratch_gpio_set_data - set data on gpio pin

 * @chip: chip private data

 * @pin: gpio index

 * @value: value to set

/**

 * mv88e6352_g2_scratch_gpio_get_dir - get direction of gpio pin

 * @chip: chip private data

 * @pin: gpio index

 *

 * Return: 0 for output, 1 for input (same as GPIOF_DIR_XXX).

/**

 * mv88e6352_g2_scratch_gpio_set_dir - set direction of gpio pin

 * @chip: chip private data

 * @pin: gpio index

 * @input: should the gpio be an input, or an output?

/**

 * mv88e6352_g2_scratch_gpio_get_pctl - get pin control setting

 * @chip: chip private data

 * @pin: gpio index

 * @func: function number

 *

 * Note that the function numbers themselves may vary by chipset.

/**

 * mv88e6352_g2_scratch_gpio_set_pctl - set pin control setting

 * @chip: chip private data

 * @pin: gpio index

 * @func: function number

/**

 * mv88e6xxx_g2_scratch_gpio_set_smi - set gpio muxing for external smi

 * @chip: chip private data

 * @external: set mux for external smi, or free for gpio usage

 *

 * Some mv88e6xxx models have GPIO pins that may be configured as

 * an external SMI interface, or they may be made free for other

 * GPIO uses.

 NO_CPU being 0 inverts the meaning of the bit */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2020 NovaTech LLC

 * George McCollister <george.mccollister@gmail.com>

 Main DSA driver may not be started yet. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2020 NovaTech LLC

 * George McCollister <george.mccollister@gmail.com>

 Main DSA driver may not be started yet. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2020 NovaTech LLC

 * George McCollister <george.mccollister@gmail.com>

 Capture counter values */

	/* multicast must be added to rx_packets (which already includes

	 * unicast and broadcast)

	/* Enable/disable inbound policy added by xrs700x_port_add_bpdu_ipf()

	 * which allows BPDU forwarding to the CPU port when the front facing

	 * port is in disabled/learning state.

/* Add an inbound policy filter which matches the BPDU destination MAC

 * and forwards to the CPU port. Leave the policy disabled, it will be

 * enabled as needed.

 Compare all 48 bits of the destination MAC address. */

 match BPDU destination 01:80:c2:00:00:00 */

 Mirror BPDU to CPU port */

/* Add an inbound policy filter which matches the HSR/PRP supervision MAC

 * range and forwards to the CPU port without discarding duplicates.

 * This is required to correctly populate the HSR/PRP node_table.

 * Leave the policy disabled, it will be enabled as needed.

 Compare 40 bits of the destination MAC address. */

 match HSR/PRP supervision destination 01:15:4e:00:01:XX */

 Mirror HSR/PRP supervision to CPU port */

 Allow must be set prevent duplicate discard */

 Disable forwarding to non-CPU ports */

 1 = Disable forwarding to the port */

 The switch only supports full duplex. */

 1 = Disable forwarding to the port */

 Only ports 1 and 2 can be HSR/PRP redundant ports. */

	/* We can't enable redundancy on the switch until both

	 * redundant ports have signed up.

	/* Clear bits for both redundant ports (HSR only) and the CPU port to

	 * enable forwarding.

	/* Enable inbound policy which allows HSR/PRP supervision forwarding

	 * to the CPU port without discarding duplicates. Continue to

	 * forward to redundant ports when in HSR mode while discarding

	 * duplicates.

 Clear bit for the CPU port to enable forwarding. */

	/* Disable inbound policy added by xrs700x_port_add_hsrsup_ipf()

	 * which allows HSR/PRP supervision forwarding to the CPU port without

	 * discarding duplicates.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2009, Microsoft Corporation.

 *

 * Authors:

 *   Haiyang Zhang <haiyangz@microsoft.com>

 *   Hank Janssen  <hjanssen@microsoft.com>

	/*

	 * The buffer for extended info after the RNDIS response message. It's

	 * referenced based on the data offset in the RNDIS message. Its size

	 * is enough for current needs, and should be sufficient for the near

	 * future.

 Simplify allocation by having a netvsc packet inline */

	/*

	 * The buffer for the extended info after the RNDIS request message.

	 * It is referenced and sized in a similar way as response_ext.

	/*

	 * Set the request id. This field is always after the rndis header for

	 * request/response packet types so we just used the SetRequest as a

	 * template

 Add to the request list */

 Setup the packet to send it */

 Add one page_buf when request_msg crossing page boundary */

 Ensure the packet is big enough to access its fields */

	/* This should never happen, it means control message

	 * response received after device removed.

	/* Ensure the packet is big enough to read req_id. Req_id is the 1st

	 * field in any request/response message, so the payload should have at

	 * least sizeof(u32) bytes

 Copy the request ID into nvchan->recv_buf */

		/*

		 * All request/response message contains RequestId as the 1st

		 * field

 does not have a request id field */

/*

 * Get the Per-Packet-Info with the specified type

 * return NULL if not found.

 Validate info_offset and info_len */

 Copy the PPIs into nvchan->recv_buf */

 Validate ppi_offset and ppi_size */

 ppi->size should be big enough to hold the returned object. */

		/* The data/values pointed by vlan, csum_info and hash_info are shared

		 * across the different 'fragments' of the RSC packet; store them into

		 * the packet itself.

 Ensure data_buflen is big enough to read header fields */

 Copy the RNDIS packet into nvchan->recv_buf */

 Validate rndis_pkt offset */

 Remove the rndis header and pass it back up the stack */

	/*

	 * Make sure we got a valid RNDIS message, now total_data_buflen

	 * should be the data packet size plus the trailer padding size

 Identify RSC frags, drop erroneous packets */

	/* Put data into per channel structure.

	 * Also, remove the rndis trailer padding from rndis packet message

	 * rndis_pkt->data_len tell us the real data length, we only copy

	 * the data packet to the stack, without the rndis trailer padding

 Copy the RNDIS msg header into nvchan->recv_buf */

 Validate incoming rndis_message packet */

 completion msgs */

 notification msgs */

 Setup the rndis query */

 Copy the response back */

 Ensure the packet is big enough to access its fields */

 Get the hardware offload capabilities */

 Multiply by 2 because host needs 2 bytes (utf16) for each char */

 Multiply by 4 because each MAC byte displayed as 2 utf16 chars */

		/* On NVSP_PROTOCOL_VERSION_4 and below, we do not support

		 * UDP checksum offload.

 Set indirection table entries */

 Set hask key values */

 Disable RSS before change */

		/* The link speed reported from host is in 100bps unit, so

		 * we convert it to Mbps here.

 Setup the rndis set */

 Setup the rndis set */

 Attempt to do a rndis device halt */

 Setup the rndis set */

 Ignore return since this msg is optional. */

 Force flag to be ordered before waiting */

 Wait for all send completions */

 Make sure rndis_set_multicast doesn't re-enable filter! */

	/* This is safe because this callback only happens when

	 * new device is being setup and waiting on the channel_init_wait.

	/* Because the device uses NAPI, all the interrupt batching and

	 * control is done via Net softirq, not the channel handling

 Set the channel before opening.*/

/* Open sub-channels after completing the handling of the device probe.

 * This breaks overlap of processing the host message for the

 * new primary channel with the initialization of sub-channels.

 Check that number of allocated sub channel is within the expected range */

 wait for all sub channels to open */

 ignore failures from setting rss parameters, still have channels */

 Find HW offload capabilities */

 A value of zero means "no change"; now turn on what we want. */

 Linux does not care about IP checksum, always does in kernel */

 Reset previously set hw_features flags */

 Compute tx offload settings based on hw capabilities */

 Can checksum TCP */

	/* In case some hw_features disappeared we need to remove them from

	 * net->features list as they're no longer supported.

 ignore if host does not support */

 name not set */

 Convert Windows Unicode string to UTF-8 */

 ignore the default value from host */

	/* Let the inner driver handle this first to create the netvsc channel

	 * NOTE! Once the channel is created, we may get a receive callback

	 * (RndisFilterOnReceive()) before this call is completed

 Initialize the rndis device */

 Send the rndis initialization message */

 Get the MTU from the host */

 Get the mac address */

 Get friendly name as ifalias*/

 Query and set hardware capabilities */

 vRSS setup */

 This guarantees that num_possible_rss_qs <= num_online_cpus */

 We will use the given number of channels if available. */

 setting up multiple channels failed */

 Halt and release the rndis device */

 SPDX-License-Identifier: GPL-2.0-only

/* Copyright (c) 2019, Microsoft Corporation.

 *

 * Author:

 *   Haiyang Zhang <haiyangz@microsoft.com>

 Ensure that the below memcpy() won't overflow the page buffer. */

 allocate page buffer for data */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2009, Microsoft Corporation.

 *

 * Authors:

 *   Haiyang Zhang <haiyangz@microsoft.com>

 *   Hank Janssen  <hjanssen@microsoft.com>

 ensure queue wake up mechanism is on */

 Open up the device */

		/* Setting synthetic device up transparently sets

		 * slave as up. If open fails, then slave will be

		 * still be offline (and not used).

 Ensure pending bytes in ring are read */

 make sure receive not running now */

 ensure txq will not wake up after stop */

 No need to close rndis filter if it is removed already */

/* Azure hosts don't support non-TCP port numbers in hashing for fragmented

 * packets. We can use ethtool to change UDP hash level when necessary.

 If queue index changed record the new value */

/*

 * Select queue for transmit.

 *

 * If a valid queue has already been assigned, then use that.

 * Otherwise compute tx queue based on hash and the send table.

 *

 * This is basically similar to default (netdev_pick_tx) with the added step

 * of using the host send_table when no other queue has been assigned.

 *

 * TODO support XPS - but get_xps_queue not exported

		/* If forwarding a packet, we use the recorded queue when

		 * available for better cache locality.

		/* Record the queue selected by VF so that it can be

		 * used for common case where VF has more queues than

		 * the synthetic device.

	/* The packet is laid out thus:

	 * 1. hdr: RNDIS header and PPI

	 * 2. skb linear data

	 * 3. skb fragment data

 Skip unused frames from start of page */

 Send skb on the slave VF device. */

	/* If VF is present and up then redirect packets to it.

	 * Skip the VF if it is marked down or has no carrier.

	 * If netpoll is in uses, then VF can not be used either.

	/* We will atmost need two pages to describe the rndis

	 * header. We can only transmit MAX_PAGE_BUFFER_COUNT number

	 * of pages in a single packet. If skb is scattered around

	 * more pages we try linearizing it.

	/*

	 * Place the rndis header in the skb head room and

	 * the skb->cb will be used for hv_netvsc_packet

	 * structure.

 Use the skb control buffer for building up the packet */

 Add the rndis header */

	/* When using AF_PACKET we need to drop VLAN header from

	 * the frame and update the SKB to allow the HOST OS

	 * to transmit the 802.1Q packet

 Update the NDIS header pkt lengths */

 Can't do offload of this type of checksum */

 Start filling in the page buffers with the rndis hdr */

 timestamp packet in software */

/*

 * netvsc_linkstatus_callback - Link up/down notification

 Ensure the packet is big enough to access its fields */

 Copy the RNDIS indicate status into nvchan->recv_buf */

 Update the physical link speed when changing to another vSwitch */

		/* Validate status_buf_offset and status_buflen.

		 *

		 * Certain (pre-Fe) implementations of Hyper-V's vSwitch didn't account

		 * for the status buffer field in resp->msg_len; perform the validation

		 * using data_buflen (>= resp->msg_len).

 Handle these link change statuses below */

 This function should only be called after skb_record_rx_queue() */

		/* Copy to skb. This copy is needed here since the memory

		 * pointed by hv_netvsc_packet cannot be deallocated.

 skb is already created with CHECKSUM_NONE */

	/* Incoming packets may have IP header checksum verified by the host.

	 * They may not have IP header checksum computed after coalescing.

	 * We compute it here if the flags are set, because on Linux, the IP

	 * checksum is always checked.

 Check that there is enough space to hold the IP header. */

 Do L4 checksum offload if enabled and present. */

/*

 * netvsc_recv_callback -  Callback when we receive a packet from the

 * "wire" on the specified device.

 consumed by XDP */

 Allocate a skb - TODO direct I/O to pages? */

	/*

	 * Even if injecting the packet, record the statistics

	 * on the synthetic device because modifying the VF device

	 * statistics will not work correctly.

/* Alloc struct netvsc_device_info, and initialize it from either existing

 * struct netvsc_device, or from default values.

 Free struct netvsc_device_info */

 Don't try continuing to try and setup sub channels */

 If device was up (receiving) then shutdown */

 if unavailable, just proceed with one queue */

 In any case device is now ready */

 Note: enable and attach happen when sub-channels setup */

 We do not support separate count for rx, tx, or other */

 Change MTU of underlying VF netdev first. */

 Attempt rollback to original MTU */

 fetch percpu stats of vf */

 fetch percpu stats of netvsc */

 rollback change on VF */

 statistics per queue (rx/tx packets/bytes) */

 5 statistics per queue (rx/tx packets/bytes, rx xdp_drop) */

 Toeplitz */

/* Hyper-V RNDIS protocol does not have ring in the HW sense.

 * It does have pre-allocated receive area which is divided into sections.

 no change */

 increase the version, if buffer format is changed. */

/*

 * Handle link status changes. For RNDIS_STATUS_NETWORK_CHANGE emulate link

 * down/up sequence. In case of RNDIS_STATUS_MEDIA_CONNECT when carrier is

 * present send GARP packet to network peers with netif_notify_peers().

 if changes are happening, comeback later */

		/* link_watch only sends one notification with current state

		 * per second, avoid doing reconfig more frequently. Handle

		 * wrap around.

		/* Only the following events are possible due to the check in

		 * netvsc_linkstatus_callback()

 Only makes sense if carrier is present */

	/* link_watch only sends one notification with current state per

	 * second, handle next reconfig event in 2 seconds.

 not a netvsc device */

 device is removed */

/* Called when VF is injecting data into network stack.

 * Change the associated network device from VF to netvsc.

 * note: already called with rcu_read_lock

 set slave flag before open to prevent IPv6 addrconf */

 Align MTU of VF with master */

 set multicast etc flags on VF */

 sync address list from ndev to VF */

/* Setup VF as slave of the synthetic device.

 * Runs in workqueue to avoid recursion in netlink callbacks.

/* Find netvsc by VF serial number.

 * The PCI hyperv controller records the serial number as the slot kobj name.

 not a PCI device */

	/* if synthetic interface is a different namespace,

	 * then move the VF to that namespace; join will be

	 * done again in that context.

/* Change the data path when VF UP/DOWN/CHANGE are detected.

 *

 * Typically a UP or DOWN event is followed by a CHANGE event, so

 * net_device_ctx->data_path_is_vf is used to cache the current data path

 * to avoid the duplicate call of netvsc_switch_datapath() and the duplicate

 * message.

 *

 * During hibernation, if a VF NIC driver (e.g. mlx5) preserves the network

 * interface, there is only the CHANGE event and no UP or DOWN event.

 We always need headroom for rndis header */

	/* Initialize the number of queues to be 1, we may change it if more

	 * channels are offered later.

 Notify the netvsc driver of the new device */

	/* We must get rtnl lock before scheduling nvdev->subchan_work,

	 * otherwise netvsc_subchan_work() can get rtnl lock first and wait

	 * all subchannels to show up, but that may not happen because

	 * netvsc_probe() can't get rtnl lock and as a result vmbus_onoffer()

	 * -> ... -> device_add() -> ... -> __device_attach() can't get

	 * the device lock, so all the subchannels can't be processed --

	 * finally netvsc_subchan_work() hangs forever.

 hw_features computed in rndis_netdev_set_hwcaps() */

 MTU range: 68 - 1500 or 65521 */

	/*

	 * Call to the vsc driver to let it know that the device is being

	 * removed. Also blocks mtu and channel changes.

 Save the current config info */

	/* Reset the data path to the netvsc NIC before re-opening the vmbus

	 * channel. Later netvsc_netdev_event() will switch the data path to

	 * the VF upon the UP or CHANGE event.

 Network guid */

 The one and only one */

/*

 * On Hyper-V, every VF interface is matched with a corresponding

 * synthetic interface. The synthetic interface is presented first

 * to the guest. When the corresponding VF instance is registered,

 * we will take care of switching the data path.

 Skip our own events */

 Avoid non-Ethernet type devices */

 Avoid Vlan dev with same MAC registering as VF */

 Avoid Bonding master dev with same MAC registering as VF */

 SPDX-License-Identifier: GPL-2.0 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2009, Microsoft Corporation.

 *

 * Authors:

 *   Haiyang Zhang <haiyangz@microsoft.com>

 *   Hank Janssen  <hjanssen@microsoft.com>

/*

 * Switch the data path from the synthetic interface to the VF

 * interface.

 Block sending traffic to VF if it's about to be gone */

	/* If failed to switch to/from VF, let data_path_is_vf stay false,

	 * so we use synthetic path to send data.

/* Worker to setup sub channels on initial setup

 * Initial hotplug event occurs in softirq context

 * and can't wait for channels.

 Avoid deadlock with device removal already under RTNL */

 fallback to only primary channel */

	/*

	 * If we got a section count, it means we received a

	 * SendReceiveBufferComplete msg (ie sent

	 * NvspMessage1TypeSendReceiveBuffer msg) therefore, we need

	 * to send a revoke msg here

 Send the revoke receive buffer */

		/* If the failure is because the channel is rescinded;

		 * ignore the failure since we cannot send on a rescinded

		 * channel. This would allow us to properly cleanup

		 * even when the channel is rescinded.

		/*

		 * If we failed here, we might as well return and

		 * have a leak rather than continue and a bugchk

	/* Deal with the send buffer we may have setup.

	 * If we got a  send section size, it means we received a

	 * NVSP_MSG1_TYPE_SEND_SEND_BUF_COMPLETE msg (ie sent

	 * NVSP_MSG1_TYPE_SEND_SEND_BUF msg) therefore, we need

	 * to send a revoke msg here

 Send the revoke receive buffer */

		/* If the failure is because the channel is rescinded;

		 * ignore the failure since we cannot send on a rescinded

		 * channel. This would allow us to properly cleanup

		 * even when the channel is rescinded.

		/* If we failed here, we might as well return and

		 * have a leak rather than continue and a bugchk

		/* If we failed here, we might as well return and have a leak

		 * rather than continue and a bugchk

		/* If we failed here, we might as well return and have a leak

		 * rather than continue and a bugchk

 Get receive buffer area. */

 Legacy hosts only allow smaller receive buffer */

	/*

	 * Establish the gpadl handle for this buffer on this

	 * channel.  Note: This call uses the vmbus connection rather

	 * than the channel to establish the gpadl handle.

 Notify the NetVsp of the gpadl handle */

 Send the gpadl notification request */

 Check the response */

 Parse the response */

 There should only be one section for the entire receive buffer */

 Ensure buffer will not overflow */

	/* Setup receive completion ring.

	 * Add 1 to the recv_section_cnt because at least one entry in a

	 * ring buffer has to be empty.

 Now setup the send buffer. */

	/* Establish the gpadl handle for this buffer on this

	 * channel.  Note: This call uses the vmbus connection rather

	 * than the channel to establish the gpadl handle.

 Notify the NetVsp of the gpadl handle */

 Send the gpadl notification request */

 Check the response */

 Parse the response */

 Section count is simply the size divided by the section size. */

 Setup state for managing the send buffer. */

 Negotiate NVSP protocol version */

 Send the init request */

 NVSPv2 or later: Send NDIS config */

 Teaming bit is needed to receive link speed updates */

 Negotiate the latest NVSP protocol supported */

 Send the ndis version */

 Send the init request */

/*

 * netvsc_device_remove - Callback when the root bus device is removed

	/*

	 * Revoke receive buffer. If host is pre-Win2016 then tear down

	 * receive buffer GPADL. Do the same for send buffer.

 Disable NAPI and disassociate its context from the device. */

 See also vmbus_reset_channel_cb(). */

	/*

	 * At this point, no one should be accessing net_device

	 * except in here

 Now, we can close the channel safely */

	/*

	 * If host is Win2016 or higher then we do the GPADL tear down

	 * here after VMBus is closed.

 Release all resources */

 Notify the layer above us */

 First check if this is a VMBUS completion without data payload */

 Ensure packet is big enough to read header fields */

 Copy the response back */

 Add padding */

 0 is RMC_DATA */

 1 is RMC_CONTROL */

 Move packet out of multi send data (msd), and clear msd */

 RCU already held by caller */

/* Batching/bouncing logic is designed to attempt to optimize

 * performance.

 *

 * For small, non-LSO packets we copy the packet to a send buffer

 * which is pre-registered with the Hyper-V side. This enables the

 * hypervisor to avoid remapping the aperture to access the packet

 * descriptor and data.

 *

 * If we already started using a buffer and the netdev is transmitting

 * a burst of packets, keep on copying into the buffer until it is

 * full or we are done collecting a burst. If there is an existing

 * buffer with space for the RNDIS descriptor but not the packet, copy

 * the RNDIS descriptor to the buffer, keeping the packet in place.

 *

 * If we do batching and send more than one packet using a single

 * NetVSC message, free the SKBs of the packets copied, except for the

 * last packet. This is done to streamline the handling of the case

 * where the last packet only had the RNDIS descriptor copied to the

 * send buffer, with the data pointers included in the NetVSC message.

 If device is rescinded, return error and packet will get dropped. */

	/* Send a control message or XDP packet directly without accessing

	 * msd (Multi-Send Data) field which may be changed during data packet

	 * processing.

 batch packets in send buffer if possible */

	/* Keep aggregating only if stack says more data is coming

	 * and not doing mixed modes send and not flow blocked

 Send pending recv completions */

 receive completion ring has been emptied */

 Count how many receive completions are outstanding */

 Add receive complete to ring to send to host. */

 Ensure packet is big enough to read header fields */

 Make sure this is a valid nvsp packet */

 Validate xfer page pkt header */

 Check count for a valid value */

 Each range represents 1 RNDIS pkt that contains 1 ethernet frame */

		/* We're going to copy (sections of) the packet into nvchan->recv_buf;

		 * make sure that nvchan->recv_buf is large enough to hold the packet.

 Pass it to the upper layer */

 Drop incomplete packet */

 Ensure packet is big enough to read send_table fields */

	/* If negotiated version <= NVSP_PROTOCOL_VERSION_6, the offset may be

	 * wrong due to a host bug. So fix the offset here.

 Boundary check for all versions */

 Ensure packet is big enough to read its fields */

 Ensure packet is big enough to read header fields */

/* Network processing softirq

 * Process data in incoming ring buffer from host

 * Stops when ring is empty or budget is met or exceeded.

 If starting a new interval */

 Send any pending receive completions */

	/* If it did not exhaust NAPI budget this time

	 *  and not doing busy poll

	 * then re-enable host interrupts

	 *  and reschedule if ring is not empty

	 *   or sending receive completion failed.

 Driver may overshoot since multiple packets per descriptor */

/* Call back when data is available in host ring buffer.

 * Processing is deferred until network softirq (NAPI)

 preload first vmpacket descriptor */

 disable interrupts from host */

/*

 * netvsc_device_add - Callback when the device belonging to this

 * driver is added

	/* Because the device uses NAPI, all the interrupt batching and

	 * control is done via Net softirq, not the channel handling

	/* If we're reopening the device we may have multiple queues, fill the

	 * chn_table with the default channel to use it before subchannels are

	 * opened.

	 * Initialize the channel state before we open;

	 * we can be interrupted as soon as we open the channel.

 Enable NAPI handler before init callbacks */

 Open the channel */

 Channel is opened */

 Connect with the NetVsp */

	/* Writing nvdev pointer unlocks netvsc_send(), make sure chn_table is

	 * populated.

 Now, we can close the channel safely */

 SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)

/* Copyright 2020 NXP

 * Lynx PCS MDIO helpers

 PCS is clocked at 125 MHz */

 defined by SGMII spec */

 Adjust link timer for SGMII */

 Configure device ability for the USXGMII Replicator */

 Nothing to do here for 10GBASER */

	/* The PCS needs to be configured manually only

	 * when not operating on in-band mode

 Silently don't do anything */

/* 2500Base-X is SerDes protocol 7 on Felix and 6 on ENETC. It is a SerDes lane

 * clocked at 3.125 GHz which encodes symbols with 8b/10b and does not have

 * auto-negotiation of any link parameters. Electrically it is compatible with

 * a single lane of XAUI.

 * The hardware reference manual wants to call this mode SGMII, but it isn't

 * really, since the fundamental features of SGMII:

 * - Downgrading the link speed by duplicating symbols

 * - Auto-negotiation

 * are not there.

 * The speed is configured at 1000 in the IF_MODE because the clock frequency

 * is actually given by a PLL configured in the Reset Configuration Word (RCW).

 * Since there is no difference between fixed speed SGMII w/o AN and 802.3z w/o

 * AN, we call this PHY interface type 2500Base-X. In case a PHY negotiates a

 * lower link speed on line side, the system-side interface remains fixed at

 * 2500 Mbps and we do rate adaptation through pause frames.

		/* At the moment, only in-band AN is supported for USXGMII

		 * so nothing to do in link_up

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2020 Synopsys, Inc. and/or its affiliates.

 * Synopsys DesignWare XPCS helpers

 *

 * Author: Jose Abreu <Jose.Abreu@synopsys.com>

 Poll until the reset bit clears (50ms per retry == 0.6 sec) */

 Nothing to do here */

	/* By default, in USXGMII mode XPCS operates at 10G baud and

	 * replicates data to achieve lower speeds. Hereby, in this

	 * default configuration we need to advertise all supported

	 * modes and not only the ones we want to use.

 SR_AN_ADV3 */

 TODO: 5000baseKR */

 SR_AN_ADV2 */

 SR_AN_ADV1 */

 Check if Aneg outcome is valid */

 Clause 73 outcome */

	/* phylink expects us to report all supported modes with

	 * PHY_INTERFACE_MODE_NA, just don't limit the supported and

	 * advertising masks and exit.

	/* Populate the supported link modes for this

	 * PHY interface type

 Enable EEE */

	/* For AN for C37 SGMII mode, the settings are :-

	 * 1) VR_MII_MMD_CTRL Bit(12) [AN_ENABLE] = 0b (Disable SGMII AN in case

	      it is already enabled)

	 * 2) VR_MII_AN_CTRL Bit(2:1)[PCS_MODE] = 10b (SGMII AN)

	 * 3) VR_MII_AN_CTRL Bit(3) [TX_CONFIG] = 0b (MAC side SGMII)

	 *    DW xPCS used with DW EQoS MAC is always MAC side SGMII.

	 * 4) VR_MII_DIG_CTRL1 Bit(9) [MAC_AUTO_SW] = 1b (Automatic

	 *    speed/duplex mode change by HW after SGMII AN complete)

	 * 5) VR_MII_MMD_CTRL Bit(12) [AN_ENABLE] = 1b (Enable SGMII AN)

	 *

	 * Note: Since it is MAC side SGMII, there is no need to set

	 *	 SR_MII_AN_ADV. MAC side SGMII receives AN Tx Config from

	 *	 PHY about the link state change after C28 AN is completed

	 *	 between PHY and Link Partner. There is also no need to

	 *	 trigger AN restart for MAC-side SGMII.

 Link needs to be read first ... */

 ... and then we check the faults. */

 Reset link_state */

	/* For C37 SGMII mode, we check DW_VR_MII_AN_INTR_STS for link

	 * status, speed and duplex.

 First, search C73 PCS using PCS MMD */

	/* If Device IDs are not all zeros or all ones,

	 * we found C73 AN-type device

 Next, search C37 PCS using Vendor-Specific MII MMD */

 If Device IDs are not all zeros, we found C37 AN-type device */

 SPDX-License-Identifier: GPL-2.0

/* Copyright 2021 NXP

 LANE_DRIVER1_0 register */

 LANE_DRIVER2_0 register */

 LANE_DRIVER2_1 register */

 LANE_TRIM register */

 LANE_DATAPATH_1 register */

 POWERDOWN_ENABLE register */

 RXPLL_CTRL0 register */

 RXPLL_CTRL1 register */

 TXPLL_CTRL0 register */

 TXPLL_CTRL1 register */

 RX_DATA_DETECT register */

 RX_CDR_CTLE register */

/* In NXP SJA1105, the PCS is integrated with a PMA that has the TX lane

 * polarity inverted by default (PLUS is MINUS, MINUS is PLUS). To obtain

 * normal non-inverted behavior, the TX lane polarity must be inverted in the

 * PCS, via the DIGITAL_CONTROL_2 register.

	/* Program TX PLL feedback divider and reference divider settings for

	 * correct oscillation frequency.

 Program transmitter amplitude and disable amplitude trimming */

 Enable input and output resistor terminations for low BER. */

 Select PCS as transmitter data source. */

	/* Program RX PLL feedback divider and reference divider for correct

	 * oscillation frequency.

	/* Program threshold for receiver signal detector.

	 * Enable control of RXPLL by receiver signal detector to disable RXPLL

	 * when an input signal is not present.

	/* Enable TX and RX PLLs and circuits.

	 * Release reset of PMA to enable data flow to/from PCS.

 Program continuous-time linear equalizer (CTLE) settings. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  FUJITSU Extended Socket Network Device driver

 *  Copyright (c) 2015 FUJITSU LIMITED

 ethtool support for fjes */

 20Gb/s */

 Information registers */

 Device Control registers */

 Command Control registers */

 Interrupt Control registers */

 enable debug mode */

 disable debug mode */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  FUJITSU Extended Socket Network Device driver

 *  Copyright (c) 2015-2016 FUJITSU LIMITED

 __CHECKER__ */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  FUJITSU Extended Socket Network Device driver

 *  Copyright (c) 2015-2016 FUJITSU LIMITED

 debugfs support for fjes driver */

 CONFIG_DEBUG_FS */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  FUJITSU Extended Socket Network Device driver

 *  Copyright (c) 2015 FUJITSU LIMITED

 create platform_device */

 fjes_open - Called when a network interface is made active */

 fjes_close - Disables a network interface */

 version is NOT 0 */

 fjes_probe - Device Initialization Routine */

 setup the private structure */

 setup MAC address (02:00:00:00:00:[epid])*/

 EPID */

 fjes_remove - Device Removal Routine */

 fjes_netdev_setup - netdevice initialization routine */

 fjes_init_module - Driver Registration Routine */

 fjes_exit_module - Driver Exit Cleanup Routine */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  FUJITSU Extended Socket Network Device driver

 *  Copyright (c) 2015 FUJITSU LIMITED

 supported MTU list */

 version 0 */

 Request Buffer length */

 Response Buffer Length */

 Request Buffer Address */

 Response Buffer Address */

 Share status address */

 disable debug mode */

 SPDX-License-Identifier: GPL-2.0+

/*

 * drivers/net/phy/smsc.c

 *

 * Driver for SMSC PHYs

 *

 * Author: Herbert Valerio Riedel

 *

 * Copyright (c) 2006 Herbert Valerio Riedel <hvr@gnu.org>

 *

 * Support added for SMSC LAN8187 and LAN8700 by steve.glendinning@shawell.net

 *

 Vendor-specific PHY Definitions */

 EDPD NLP / crossover time configuration */

 Control/Status Indication Register */

 Enable energy detect mode for this SMSC Transceivers */

	/* If the SMSC PHY is in power down mode, then set it

	 * in all capable mode before using it.

 set "all capable" mode */

 reset the phy */

 not (LAN9500A or LAN9505A) */

 Extend Manual AutoMDIX timer */

/*

 * The LAN87xx suffers from rare absence of the ENERGYON-bit when Ethernet cable

 * plugs in while LAN87xx is in Energy Detect Power-Down mode. This leads to

 * unstable detection of plugging in Ethernet cable.

 * This workaround disables Energy Detect Power-Down mode and waiting for

 * response on link pulses to detect presence of plugged Ethernet cable.

 * The Energy Detect Power-Down mode is enabled again in the end of procedure to

 * save approximately 220 mW of power if cable is unplugged.

 Disable EDPD to wake up PHY */

		/* Wait max 640 ms to detect energy and the timeout is not

		 * an actual error.

 Re-enable EDPD */

 Make clk optional to keep DTB backward compatibility. */

 OUI=0x00800f, Model#=0x0a */

 PHY_BASIC_FEATURES */

 basic functions */

 IRQ related */

 OUI=0x00800f, Model#=0x0b */

 PHY_BASIC_FEATURES */

 basic functions */

 IRQ related */

 Statistics */

	/* This covers internal PHY (phy_id: 0x0007C0C3) for

	 * LAN9500 (PID: 0x9500), LAN9514 (PID: 0xec00), LAN9505 (PID: 0x9505)

 OUI=0x00800f, Model#=0x0c */

 PHY_BASIC_FEATURES */

 basic functions */

 IRQ related */

 Statistics */

 OUI=0x00800f, Model#=0x0d */

 PHY_BASIC_FEATURES */

 basic functions */

 IRQ related */

	/* This covers internal PHY (phy_id: 0x0007C0F0) for

	 * LAN9500A (PID: 0x9E00), LAN9505A (PID: 0x9E01)

 OUI=0x00800f, Model#=0x0f */

 PHY_BASIC_FEATURES */

 basic functions */

 IRQ related */

 Statistics */

 PHY_BASIC_FEATURES */

 basic functions */

 IRQ related */

 Statistics */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for Vitesse PHYs

 *

 * Author: Kriston Carson

 Vitesse Extended Page Magic Register(s) */

 Vitesse Extended Control Register 1 */

 Vitesse Interrupt Mask Register */

 Vitesse Interrupt Status Register */

 Vitesse Auxiliary Control/Status Register */

 need to set this bit? */

 Vitesse Extended Page Access Register */

 Vitesse VSC8601 Extended PHY Control Register 1 */

 Receiver init */

 Config LEDs 0x61 */

	/* This magic sequence appear in the application note

	 * "VSC7385/7388 PHY Configuration".

	 *

	 * Maybe one day we will get to know what it all means.

 Read revision */

 Special quirk for revision 0 */

		/* bits 14-15 in extended register 0x14 controls DACG amplitude

		 * 6 = -8%, 2 is hardware default

	/* This magic sequence appears in the VSC7395 SparX-G5e application

	 * note "VSC7395/VSC7398 PHY Configuration"

	 *

	 * Maybe one day we will get to know what it all means.

	/* The VSC73xx switches does not like to be instructed to

	 * do autonegotiation in any way, it prefers that you just go

	 * with the power-on/reset defaults. Writing some registers will

	 * just make autonegotiation permanently fail.

/* This adds a skew for both TX and RX clocks, so the skew should only be

 * applied to "rgmii-id" interfaces. It may not work as expected

 * on "rgmii-txid", "rgmii-rxid" or "rgmii" interfaces.

		/* Don't bother to ACK the interrupts since the 824x cannot

		 * clear the interrupts if they are disabled.

		/* The Vitesse PHY cannot clear the interrupt

		 * once it has disabled them, so we clear them first

	/* Perhaps we should set EXT_CON1 based on the interface?

	 * Options are 802.3Z SerDes or SGMII

/* vsc82x4_config_autocross_enable - Enable auto MDI/MDI-X for forced links

 * @phydev: target phy_device struct

 *

 * Enable auto MDI/MDI-X when in 10/100 forced link speeds by writing

 * special values in the VSC8234/VSC8244 extended reserved registers

 map extended registers set 0x10 - 0x1e */

 map standard registers set 0x10 - 0x1e */

/* vsc82x4_config_aneg - restart auto-negotiation or write BMCR

 * @phydev: target phy_device struct

 *

 * Description: If auto-negotiation is enabled, we configure the

 *   advertising, and then restart auto-negotiation.  If it is not

 *   enabled, then we write the BMCR and also start the auto

 *   MDI/MDI-X feature

	/* Enable auto MDI/MDI-X when in 10/100 forced link speeds by

	 * writing special values in the VSC8234 extended reserved registers

 error */

 Vitesse 82xx */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 Vitesse 8221 */

 PHY_GBIT_FEATURES */

 Vitesse 8211 */

 PHY_GBIT_FEATURES */

 SPDX-License-Identifier: GPL-2.0+

/* Framework for finding and configuring PHYs.

 * Also contains generic PHY driver

 *

 * Author: Andy Fleming

 *

 * Copyright (c) 2004 Freescale Semiconductor, Inc.

 10/100 half/full*/

 100 full, TP */

 10/100 half/full + 1000 half/full */

 10/100 half/full + 1000 half/full + fibre*/

 10/100 half/full + 1000 half/full + TP/MII/FIBRE/AUI/BNC/Backplane*/

 10/100 half/full + 1000 half/full + 10G full*/

 10/100/1000/10G full */

 10G FEC only */

	/* PHY not attached? May suspend if the PHY has not already been

	 * suspended as part of a prior call to phy_disconnect() ->

	 * phy_detach() -> phy_suspend() because the parent netdev might be the

	 * MDIO bus driver and clock gated at this point.

	/* As long as not all affected network drivers support the

	 * wol_enabled flag, let's check for hints that WoL is enabled.

	 * Don't suspend PHY if the attached netdev parent may wake up.

	 * The parent may point to a PCI device, as in tg3 driver.

	/* Also don't suspend PHY if the netdev itself may wakeup. This

	 * is the case for devices w/o underlaying pwr. mgmt. aware bus,

	 * e.g. SoC devices.

	/* We must stop the state machine manually, otherwise it stops out of

	 * control, possibly with the phydev->lock held. Upon resume, netdev

	 * may call phy routines that try to grab the same lock, and that may

	 * lead to a deadlock.

/**

 * phy_register_fixup - creates a new phy_fixup and adds it to the list

 * @bus_id: A string which matches phydev->mdio.dev.bus_id (or PHY_ANY_ID)

 * @phy_uid: Used to match against phydev->phy_id (the UID of the PHY)

 *	It can also be PHY_ANY_UID

 * @phy_uid_mask: Applied to phydev->phy_id and fixup->phy_uid before

 *	comparison

 * @run: The actual code to be run when a matching PHY is found

 Registers a fixup to be run on any PHY with the UID in phy_uid */

 Registers a fixup to be run on the PHY with id string bus_id */

/**

 * phy_unregister_fixup - remove a phy_fixup from the list

 * @bus_id: A string matches fixup->bus_id (or PHY_ANY_ID) in phy_fixup_list

 * @phy_uid: A phy id matches fixup->phy_id (or PHY_ANY_UID) in phy_fixup_list

 * @phy_uid_mask: Applied to phy_uid and fixup->phy_uid before comparison

 Unregisters a fixup of any PHY with the UID in phy_uid */

 Unregisters a fixup of the PHY with id string bus_id */

/* Returns 1 if fixup matches phydev in bus_id and phy_uid.

 * Fixups can be set to match any in one or more fields.

 Runs any matching fixups for this phydev */

	/* We only check for failures in executing the usermode binary,

	 * not whether a PHY driver module exists for the PHY ID.

	 * Accept -ENOENT because this may occur in case no initramfs exists,

	 * then modprobe isn't available.

 We allocate the device, and initialize the default values */

	/* Request the appropriate module unconditionally; don't

	 * bother trying to do so only if it isn't already loaded,

	 * because that gets complicated. A hotplug event would have

	 * done an unconditional modprobe anyway.

	 * We don't do normal hotplug because it won't work for MDIO

	 * -- because it relies on the device staying around for long

	 * enough for the driver to get loaded. With MDIO, the NIC

	 * driver will get bored and give up as soon as it finds that

	 * there's no driver _already_ loaded.

/* phy_c45_probe_present - checks to see if a MMD is present in the package

 * @bus: the target MII bus

 * @prtad: PHY package address on the MII bus

 * @devad: PHY device (MMD) address

 *

 * Read the MDIO_STAT2 register, and check whether a device is responding

 * at this address.

 *

 * Returns: negative error number on bus access error, zero if no device

 * is responding, or positive if a device is present.

/* get_phy_c45_devs_in_pkg - reads a MMD's devices in package registers.

 * @bus: the target MII bus

 * @addr: PHY address on the MII bus

 * @dev_addr: MMD address in the PHY.

 * @devices_in_package: where to store the devices in package information.

 *

 * Description: reads devices in package registers of a MMD at @dev_addr

 * from PHY at @addr on @bus.

 *

 * Returns: 0 on success, -EIO on failure.

/**

 * get_phy_c45_ids - reads the specified addr for its 802.3-c45 IDs.

 * @bus: the target MII bus

 * @addr: PHY address on the MII bus

 * @c45_ids: where to store the c45 ID information.

 *

 * Read the PHY "devices in package". If this appears to be valid, read

 * the PHY identifiers for each device. Return the "devices in package"

 * and identifiers in @c45_ids.

 *

 * Returns zero on success, %-EIO on bus access error, or %-ENODEV if

 * the "devices in package" is invalid.

	/* Find first non-zero Devices In package. Device zero is reserved

	 * for 802.3 c45 complied PHYs, so don't probe it at first.

			/* Check that there is a device present at this

			 * address before reading the devices-in-package

			 * register to avoid reading garbage from the PHY.

			 * Some PHYs (88x3310) vendor space is not IEEE802.3

			 * compliant.

		/* If mostly Fs, there is no device there, then let's probe

		 * MMD 0, as some 10G PHYs have zero Devices In package,

		 * e.g. Cortina CS4315/CS4340 PHY.

 no device there, let's get out of here */

 Now probe Device Identifiers for each device present. */

			/* Probe the "Device Present" bits for the vendor MMDs

			 * to ignore these if they do not contain IEEE 802.3

			 * registers.

 Bit 0 doesn't represent a device, it indicates c22 regs presence */

/**

 * get_phy_c22_id - reads the specified addr for its clause 22 ID.

 * @bus: the target MII bus

 * @addr: PHY address on the MII bus

 * @phy_id: where to store the ID retrieved.

 *

 * Read the 802.3 clause 22 PHY ID from the PHY at @addr on the @bus,

 * placing it in @phy_id. Return zero on successful read and the ID is

 * valid, %-EIO on bus access error, or %-ENODEV if no device responds

 * or invalid ID.

 Grab the bits from PHYIR1, and put them in the upper half */

 returning -ENODEV doesn't stop bus scanning */

 Grab the bits from PHYIR2, and put them in the lower half */

 returning -ENODEV doesn't stop bus scanning */

 If the phy_id is mostly Fs, there is no device there */

/* Extract the phy ID from the compatible string of the form

 * ethernet-phy-idAAAA.BBBB.

/**

 * get_phy_device - reads the specified PHY device and returns its @phy_device

 *		    struct

 * @bus: the target MII bus

 * @addr: PHY address on the MII bus

 * @is_c45: If true the PHY uses the 802.3 clause 45 protocol

 *

 * Probe for a PHY at @addr on @bus.

 *

 * When probing for a clause 22 PHY, then read the ID registers. If we find

 * a valid ID, allocate and return a &struct phy_device.

 *

 * When probing for a clause 45 PHY, read the "devices in package" registers.

 * If the "devices in package" appears valid, read the ID registers for each

 * MMD, allocate and return a &struct phy_device.

 *

 * Returns an allocated &struct phy_device on success, %-ENODEV if there is

 * no PHY present, or %-EIO on bus access error.

	/* PHY device such as the Marvell Alaska 88E2110 will return a PHY ID

	 * of 0 when probed using get_phy_c22_id() with no error. Proceed to

	 * probe with C45 to see if we're able to get a valid PHY ID in the C45

	 * space, if successful, create the C45 PHY device.

/**

 * phy_device_register - Register the phy device on the MDIO bus

 * @phydev: phy_device structure to be added to the MDIO bus

 Deassert the reset signal */

 Run all of the fixups for this PHY */

 Assert the reset signal */

/**

 * phy_device_remove - Remove a previously registered phy device from the MDIO bus

 * @phydev: phy_device structure to remove

 *

 * This doesn't free the phy_device itself, it merely reverses the effects

 * of phy_device_register(). Use phy_device_free() to free the device

 * after calling this function.

 Assert the reset signal */

/**

 * phy_get_c45_ids - Read 802.3-c45 IDs for phy device.

 * @phydev: phy_device structure to read 802.3-c45 IDs

 *

 * Returns zero on success, %-EIO on bus access error, or %-ENODEV if

 * the "devices in package" is invalid.

/**

 * phy_find_first - finds the first PHY device on the bus

 * @bus: the target MII bus

/**

 * phy_prepare_link - prepares the PHY layer to monitor link status

 * @phydev: target phy_device struct

 * @handler: callback function for link status change notifications

 *

 * Description: Tells the PHY infrastructure to handle the

 *   gory details on monitoring link status (whether through

 *   polling or an interrupt), and to call back to the

 *   connected device driver when the link status changes.

 *   If you want to monitor your own link state, don't call

 *   this function.

/**

 * phy_connect_direct - connect an ethernet device to a specific phy_device

 * @dev: the network device to connect

 * @phydev: the pointer to the phy device

 * @handler: callback function for state change notifications

 * @interface: PHY device's interface

/**

 * phy_connect - connect an ethernet device to a PHY device

 * @dev: the network device to connect

 * @bus_id: the id string of the PHY device to connect

 * @handler: callback function for state change notifications

 * @interface: PHY device's interface

 *

 * Description: Convenience function for connecting ethernet

 *   devices to PHY devices.  The default behavior is for

 *   the PHY infrastructure to handle everything, and only notify

 *   the connected driver when the link status changes.  If you

 *   don't want, or can't use the provided functionality, you may

 *   choose to call only the subset of functions which provide

 *   the desired functionality.

	/* Search the list of PHY devices on the mdio bus for the

	 * PHY with the requested name

/**

 * phy_disconnect - disable interrupts, stop state machine, and detach a PHY

 *		    device

 * @phydev: target phy_device struct

/**

 * phy_poll_reset - Safely wait until a PHY reset has properly completed

 * @phydev: The PHY device to poll

 *

 * Description: According to IEEE 802.3, Section 2, Subsection 22.2.4.1.1, as

 *   published in 2008, a PHY reset may take up to 0.5 seconds.  The MII BMCR

 *   register must be polled until the BMCR_RESET bit clears.

 *

 *   Furthermore, any attempts to write to PHY registers may have no effect

 *   or even generate MDIO bus errors until this is complete.

 *

 *   Some PHYs (such as the Marvell 88E1111) don't entirely conform to the

 *   standard and do not fully reset after the BMCR_RESET bit is set, and may

 *   even *REQUIRE* a soft-reset to properly restart autonegotiation.  In an

 *   effort to support such broken PHYs, this function is separate from the

 *   standard phy_init_hw() which will zero all the other bits in the BMCR

 *   and reapply all driver-specific and board-specific fixups.

 Poll until the reset bit clears (50ms per retry == 0.6 sec) */

	/* Some chips (smsc911x) may still need up to another 1ms after the

	 * BMCR_RESET bit is cleared before they are usable.

 Deassert the reset signal */

 see comment in genphy_soft_reset for an explanation */

		/* non-fatal - some net drivers can use one netdevice

		 * with more then one phy

/**

 * phy_sfp_attach - attach the SFP bus to the PHY upstream network device

 * @upstream: pointer to the phy device

 * @bus: sfp bus representing cage being attached

 *

 * This is used to fill in the sfp_upstream_ops .attach member.

/**

 * phy_sfp_detach - detach the SFP bus from the PHY upstream network device

 * @upstream: pointer to the phy device

 * @bus: sfp bus representing cage being attached

 *

 * This is used to fill in the sfp_upstream_ops .detach member.

/**

 * phy_sfp_probe - probe for a SFP cage attached to this PHY device

 * @phydev: Pointer to phy_device

 * @ops: SFP's upstream operations

/**

 * phy_attach_direct - attach a network device to a given PHY device pointer

 * @dev: network device to attach

 * @phydev: Pointer to phy_device to attach

 * @flags: PHY device's dev_flags

 * @interface: PHY device's interface

 *

 * Description: Called by drivers to attach to a particular PHY

 *     device. The phy_device is found, and properly hooked up

 *     to the phy_driver.  If no driver is attached, then a

 *     generic driver is used.  The phy_device is given a ptr to

 *     the attaching device, and given a callback for link status

 *     change.  The phy_device is returned to the attaching driver.

 *     This function takes a reference on the phy device.

	/* For Ethernet device drivers that register their own MDIO bus, we

	 * will have bus->owner match ndev_mod, so we do not want to increment

	 * our own module->refcnt here, otherwise we would not be able to

	 * unload later on.

	/* Assume that if there is no driver, that it doesn't

	 * exist, and we should use the genphy driver.

	/* Some Ethernet drivers try to connect to a PHY device before

	 * calling register_netdevice() -> netdev_register_kobject() and

	 * does the dev->dev.kobj initialization. Here we only check for

	 * success which indicates that the network device kobject is

	 * ready. Once we do that we still need to keep track of whether

	 * links were successfully set up or not for phy_detach() to

	 * remove them accordingly.

	/* Port is set to PORT_TP by default and the actual PHY driver will set

	 * it to different value depending on the PHY configuration. If we have

	 * the generic PHY driver we can't figure it out, thus set the old

	 * legacy PORT_MII value.

	/* Initial carrier state is off as the phy is about to be

	 * (re)initialized.

	/* Do initial configuration here, now that

	 * we have certain key parameters

	 * (dev_flags and interface)

 phy_detach() does all of the cleanup below */

/**

 * phy_attach - attach a network device to a particular PHY device

 * @dev: network device to attach

 * @bus_id: Bus ID of PHY device to attach

 * @interface: PHY device's interface

 *

 * Description: Same as phy_attach_direct() except that a PHY bus_id

 *     string is passed instead of a pointer to a struct phy_device.

	/* Search the list of PHY devices on the mdio bus for the

	 * PHY with the requested name

/**

 * phy_package_join - join a common PHY group

 * @phydev: target phy_device struct

 * @addr: cookie and PHY address for global register access

 * @priv_size: if non-zero allocate this amount of bytes for private data

 *

 * This joins a PHY group and provides a shared storage for all phydevs in

 * this group. This is intended to be used for packages which contain

 * more than one PHY, for example a quad PHY transceiver.

 *

 * The addr parameter serves as a cookie which has to have the same value

 * for all members of one group and as a PHY address to access generic

 * registers of a PHY package. Usually, one of the PHY addresses of the

 * different PHYs in the package provides access to these global registers.

 * The address which is given here, will be used in the phy_package_read()

 * and phy_package_write() convenience functions. If your PHY doesn't have

 * global registers you can just pick any of the PHY addresses.

 *

 * This will set the shared pointer of the phydev to the shared storage.

 * If this is the first call for a this cookie the shared storage will be

 * allocated. If priv_size is non-zero, the given amount of bytes are

 * allocated for the priv member.

 *

 * Returns < 1 on error, 0 on success. Esp. calling phy_package_join()

 * with the same cookie but a different priv_size is an error.

/**

 * phy_package_leave - leave a common PHY group

 * @phydev: target phy_device struct

 *

 * This leaves a PHY group created by phy_package_join(). If this phydev

 * was the last user of the shared data between the group, this data is

 * freed. Resets the phydev->shared pointer to NULL.

/**

 * devm_phy_package_join - resource managed phy_package_join()

 * @dev: device that is registering this PHY package

 * @phydev: target phy_device struct

 * @addr: cookie and PHY address for global register access

 * @priv_size: if non-zero allocate this amount of bytes for private data

 *

 * Managed phy_package_join(). Shared storage fetched by this function,

 * phy_package_leave() is automatically called on driver detach. See

 * phy_package_join() for more information.

/**

 * phy_detach - detach a PHY device from its network device

 * @phydev: target phy_device struct

 *

 * This detaches the phy device from its network device and the phy

 * driver, and drops the reference count taken in phy_attach_direct().

	/* If the device had no specific driver before (i.e. - it

	 * was using the generic driver), we unbind the device

	 * from the generic driver so that there's a chance a

	 * real driver could be loaded

	/*

	 * The phydev might go away on the put_device() below, so avoid

	 * a use-after-free bug by reading the underlying bus first.

 Assert the reset signal */

 If the device has WOL enabled, we cannot suspend the PHY */

/**

 * phy_reset_after_clk_enable - perform a PHY reset if needed

 * @phydev: target phy_device struct

 *

 * Description: Some PHYs are known to need a reset after their refclk was

 *   enabled. This function evaluates the flags and perform the reset if it's

 *   needed. Returns < 0 on error, 0 if the phy wasn't reset and 1 if the phy

 *   was reset.

 Generic PHY support and helper functions */

/**

 * genphy_config_advert - sanitize and advertise auto-negotiation parameters

 * @phydev: target phy_device struct

 *

 * Description: Writes MII_ADVERTISE with the appropriate values,

 *   after sanitizing the values to make sure we only advertise

 *   what is supported.  Returns < 0 on error, 0 if the PHY's advertisement

 *   hasn't changed, and > 0 if it has changed.

 Only allow advertising what this PHY supports */

 Setup standard advertisement */

	/* Per 802.3-2008, Section 22.2.4.2.16 Extended status all

	 * 1000Mbits/sec capable PHYs shall have the BMSR_ESTATEN bit set to a

	 * logical 1.

/**

 * genphy_c37_config_advert - sanitize and advertise auto-negotiation parameters

 * @phydev: target phy_device struct

 *

 * Description: Writes MII_ADVERTISE with the appropriate values,

 *   after sanitizing the values to make sure we only advertise

 *   what is supported.  Returns < 0 on error, 0 if the PHY's advertisement

 *   hasn't changed, and > 0 if it has changed. This function is intended

 *   for Clause 37 1000Base-X mode.

 Only allow advertising what this PHY supports */

/**

 * genphy_config_eee_advert - disable unwanted eee mode advertisement

 * @phydev: target phy_device struct

 *

 * Description: Writes MDIO_AN_EEE_ADV after disabling unsupported energy

 *   efficent ethernet modes. Returns 0 if the PHY's advertisement hasn't

 *   changed, and 1 if it has changed.

 Nothing to disable */

 If the call failed, we assume that EEE is not supported */

/**

 * genphy_setup_forced - configures/forces speed/duplex from @phydev

 * @phydev: target phy_device struct

 *

 * Description: Configures MII_BMCR to force speed/duplex

 *   to the values in phydev. Assumes that the values are valid.

 *   Please see phy_sanitize_settings().

 this bits are valid only for active link */

/**

 * genphy_restart_aneg - Enable and Restart Autonegotiation

 * @phydev: target phy_device struct

 Don't isolate the PHY if we're negotiating */

/**

 * genphy_check_and_restart_aneg - Enable and restart auto-negotiation

 * @phydev: target phy_device struct

 * @restart: whether aneg restart is requested

 *

 * Check, and restart auto-negotiation if needed.

		/* Advertisement hasn't changed, but maybe aneg was never on to

		 * begin with?  Or maybe phy was isolated?

/**

 * __genphy_config_aneg - restart auto-negotiation or write BMCR

 * @phydev: target phy_device struct

 * @changed: whether autoneg is requested

 *

 * Description: If auto-negotiation is enabled, we configure the

 *   advertising, and then restart auto-negotiation.  If it is not

 *   enabled, then we write the BMCR.

 error */

/**

 * genphy_c37_config_aneg - restart auto-negotiation or write BMCR

 * @phydev: target phy_device struct

 *

 * Description: If auto-negotiation is enabled, we configure the

 *   advertising, and then restart auto-negotiation.  If it is not

 *   enabled, then we write the BMCR. This function is intended

 *   for use with Clause 37 1000Base-X mode.

 error */

		/* Advertisement hasn't changed, but maybe aneg was never on to

		 * begin with?  Or maybe phy was isolated?

 do restart aneg */

	/* Only restart aneg if we are advertising something different

	 * than we were before.

/**

 * genphy_aneg_done - return auto-negotiation status

 * @phydev: target phy_device struct

 *

 * Description: Reads the status register and returns 0 either if

 *   auto-negotiation is incomplete, or if there was an error.

 *   Returns BMSR_ANEGCOMPLETE if auto-negotiation is done.

/**

 * genphy_update_link - update link status in @phydev

 * @phydev: target phy_device struct

 *

 * Description: Update the value in phydev->link to reflect the

 *   current link value.  In order to do this, we need to read

 *   the status register twice, keeping the second value.

	/* Autoneg is being started, therefore disregard BMSR value and

	 * report link as down.

	/* The link state is latched low so that momentary link

	 * drops can be detected. Do not double-read the status

	 * in polling mode to detect such short link drops except

	 * the link was already down.

 Read link and autonegotiation status */

	/* Consider the case that autoneg was started and "aneg complete"

	 * bit has been reset, but "link up" bit not yet.

/**

 * genphy_read_status_fixed - read the link parameters for !aneg mode

 * @phydev: target phy_device struct

 *

 * Read the current duplex and speed state for a PHY operating with

 * autonegotiation disabled.

/**

 * genphy_read_status - check the link status and update current link state

 * @phydev: target phy_device struct

 *

 * Description: Check the link, then figure out the current state

 *   by comparing what we advertise with what the link partner

 *   advertises.  Start by checking the gigabit possibilities,

 *   then move on to 10/100.

 Update the link, but return if there was an error */

 why bother the PHY if nothing can have changed */

/**

 * genphy_c37_read_status - check the link status and update current link state

 * @phydev: target phy_device struct

 *

 * Description: Check the link, then figure out the current state

 *   by comparing what we advertise with what the link partner

 *   advertises. This function is for Clause 37 1000Base-X mode.

 Update the link, but return if there was an error */

 why bother the PHY if nothing can have changed */

/**

 * genphy_soft_reset - software reset the PHY via BMCR_RESET bit

 * @phydev: target phy_device struct

 *

 * Description: Perform a software PHY reset using the standard

 * BMCR_RESET bit and poll for the reset bit to be cleared.

 *

 * Returns: 0 on success, < 0 on failure

	/* Clause 22 states that setting bit BMCR_RESET sets control registers

	 * to their default value. Therefore the POWER DOWN bit is supposed to

	 * be cleared after soft reset.

 BMCR may be reset to defaults */

	/* It seems there are cases where the interrupts are handled by another

	 * entity (ie an IRQ controller embedded inside the PHY) and do not

	 * need any other interraction from phylib. In this case, just trigger

	 * the state machine directly.

/**

 * genphy_read_abilities - read PHY abilities from Clause 22 registers

 * @phydev: target phy_device struct

 *

 * Description: Reads the PHY's abilities and populates

 * phydev->supported accordingly.

 *

 * Returns: 0 on success, < 0 on failure

/* This is used for the phy device which doesn't support the MMD extended

 * register access, but it does have side effect when we are trying to access

 * the MMD register via indirect method.

/**

 * phy_remove_link_mode - Remove a supported link mode

 * @phydev: phy_device structure to remove link mode from

 * @link_mode: Link mode to be removed

 *

 * Description: Some MACs don't support all link modes which the PHY

 * does.  e.g. a 1G MAC often does not support 1000Half. Add a helper

 * to remove a link mode.

/**

 * phy_advertise_supported - Advertise all supported modes

 * @phydev: target phy_device struct

 *

 * Description: Called to advertise all supported modes, doesn't touch

 * pause mode advertising.

/**

 * phy_support_sym_pause - Enable support of symmetrical pause

 * @phydev: target phy_device struct

 *

 * Description: Called by the MAC to indicate is supports symmetrical

 * Pause, but not asym pause.

/**

 * phy_support_asym_pause - Enable support of asym pause

 * @phydev: target phy_device struct

 *

 * Description: Called by the MAC to indicate is supports Asym Pause.

/**

 * phy_set_sym_pause - Configure symmetric Pause

 * @phydev: target phy_device struct

 * @rx: Receiver Pause is supported

 * @tx: Transmit Pause is supported

 * @autoneg: Auto neg should be used

 *

 * Description: Configure advertised Pause support depending on if

 * receiver pause and pause auto neg is supported. Generally called

 * from the set_pauseparam .ndo.

/**

 * phy_set_asym_pause - Configure Pause and Asym Pause

 * @phydev: target phy_device struct

 * @rx: Receiver Pause is supported

 * @tx: Transmit Pause is supported

 *

 * Description: Configure advertised Pause support depending on if

 * transmit and receiver pause is supported. If there has been a

 * change in adverting, trigger a new autoneg. Generally called from

 * the set_pauseparam .ndo.

/**

 * phy_validate_pause - Test if the PHY/MAC support the pause configuration

 * @phydev: phy_device struct

 * @pp: requested pause configuration

 *

 * Description: Test if the PHY/MAC combination supports the Pause

 * configuration the user is requesting. Returns True if it is

 * supported, false otherwise.

/**

 * phy_get_pause - resolve negotiated pause modes

 * @phydev: phy_device struct

 * @tx_pause: pointer to bool to indicate whether transmit pause should be

 * enabled.

 * @rx_pause: pointer to bool to indicate whether receive pause should be

 * enabled.

 *

 * Resolve and return the flow control modes according to the negotiation

 * result. This includes checking that we are operating in full duplex mode.

 * See linkmode_resolve_pause() for further details.

/**

 * phy_get_internal_delay - returns the index of the internal delay

 * @phydev: phy_device struct

 * @dev: pointer to the devices device struct

 * @delay_values: array of delays the PHY supports

 * @size: the size of the delay array

 * @is_rx: boolean to indicate to get the rx internal delay

 *

 * Returns the index within the array of internal delay passed in.

 * If the device property is not present then the interface type is checked

 * if the interface defines use of internal delay then a 1 is returned otherwise

 * a 0 is returned.

 * The array must be in ascending order. If PHY does not have an ascending order

 * array then size = 0 and the value of the delay property is returned.

 * Return -EINVAL if the delay is invalid or cannot be found.

 Find an approximate index by looking up the table */

/**

 * fwnode_mdio_find_device - Given a fwnode, find the mdio_device

 * @fwnode: pointer to the mdio_device's fwnode

 *

 * If successful, returns a pointer to the mdio_device with the embedded

 * struct device refcount incremented by one, or NULL on failure.

 * The caller should call put_device() on the mdio_device after its use.

/**

 * fwnode_phy_find_device - For provided phy_fwnode, find phy_device.

 *

 * @phy_fwnode: Pointer to the phy's fwnode.

 *

 * If successful, returns a pointer to the phy_device with the embedded

 * struct device refcount incremented by one, or NULL on failure.

/**

 * device_phy_find_device - For the given device, get the phy_device

 * @dev: Pointer to the given device

 *

 * Refer return conditions of fwnode_phy_find_device().

/**

 * fwnode_get_phy_node - Get the phy_node using the named reference.

 * @fwnode: Pointer to fwnode from which phy_node has to be obtained.

 *

 * Refer return conditions of fwnode_find_reference().

 * For ACPI, only "phy-handle" is supported. Legacy DT properties "phy"

 * and "phy-device" are not supported in ACPI. DT supports all the three

 * named references to the phy node.

 Only phy-handle is used for ACPI */

/**

 * phy_probe - probe and init a PHY device

 * @dev: device to probe and init

 *

 * Description: Take care of setting up the phy_device structure,

 *   set the state to READY (the driver's init function should

 *   set it to STARTING if needed).

	/* Disable the interrupt if the PHY doesn't support it

	 * but the interrupt is still a valid one

 Deassert the reset signal */

	/* Start out supporting everything. Eventually,

	 * a controller will attach, and may modify one

	 * or both of these values

	/* Get the EEE modes we want to prohibit. We will ask

	 * the PHY stop advertising these mode later on

	/* The Pause Frame bits indicate that the PHY can support passing

	 * pause frames. During autonegotiation, the PHYs will determine if

	 * they should allow pause frames to pass.  The MAC driver should then

	 * use that result to determine whether to enable flow control via

	 * pause frames.

	 *

	 * Normally, PHY drivers should not set the Pause bits, and instead

	 * allow phylib to do that.  However, there may be some situations

	 * (e.g. hardware erratum) where the driver wants to set only one

	 * of these bits.

 Set the state to READY by default */

 Assert the reset signal */

 Assert the reset signal */

/**

 * phy_driver_register - register a phy_driver with the PHY layer

 * @new_driver: new phy_driver to register

 * @owner: module owning this PHY

	/* Either the features are hard coded, or dynamically

	 * determined. It cannot be both.

	/* PHYLIB device drivers must not match using a DT compatible table

	 * as this bypasses our checks that the mdiodev that is being matched

	 * is backed by a struct phy_device. If such a case happens, we will

	 * make out-of-bounds accesses and lockup in phydev->lock.

 SPDX-License-Identifier: GPL-2.0

 Broadcom BCM84881 NBASE-T PHY driver, as found on a SFP+ module.

 Copyright (C) 2019 Russell King, Deep Blue Solutions Ltd.



 Like the Marvell 88x3310, the Broadcom 84881 changes its host-side

 interface according to the operating speed between 10GBASE-R,

 2500BASE-X and SGMII (but unlike the 88x3310, without the control

 word).



 This driver only supports those aspects of the PHY that I'm able to

 observe and test with the SFP+ module, which is an incomplete subset

 of what this PHY is able to support. For example, I only assume it

 supports a single lane Serdes connection, but it may be that the PHY

 is able to support more than that.

 This driver requires PMAPMD and AN blocks */

 Although the PHY sets bit 1.11.8, it does not support 10M modes */

	/* Wait for the PHY to finish initialising, otherwise our

	 * advertisement may be overwritten.

 We don't support manual MDI control */

 disabled autoneg doesn't seem to work with this PHY */

		/* disabled autoneg doesn't seem to work, so force the link

		 * down.

	/* Set the host link mode - we set the phy interface mode and

	 * the speed according to this register so that downshift works.

	 * We leave the duplex setting as per the resolution from the

	 * above.

 FIXME: module auto-loading for Clause 45 PHYs seems non-functional */

 SPDX-License-Identifier: GPL-2.0

/* HWMON driver for Aquantia PHY

 *

 * Author: Nikita Yushchenko <nikita.yoush@cogentembedded.com>

 * Author: Andrew Lunn <andrew@lunn.ch>

 * Author: Heiner Kallweit <hkallweit1@gmail.com>

 Vendor specific 1, MDIO_MMD_VEND2 */

 16 bit value is 2's complement with LSB = 1/256th degree Celsius */

 temp is in s16 range and we're interested in lower 16 bits only */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Amlogic Meson GXL Internal PHY Driver

 *

 * Copyright (C) 2015 Amlogic, Inc. All rights reserved.

 * Copyright (C) 2016 BayLibre, SAS. All rights reserved.

 * Author: Neil Armstrong <narmstrong@baylibre.com>

 WOL Registers */

 BIST Registers */

	/* Enable Analog and DSP register Bank access by

	 * toggling TSTCNTL_TEST_MODE bit in the TSTCNTL register

 Close the bank access on our way out */

 Close the bank access on our way out */

 Enable fractional PLL */

 Program fraction FR_PLL_DIV1 */

 Program fraction FR_PLL_DIV1 */

/* This function is provided to cope with the possible failures of this phy

 * during aneg process. When aneg fails, the PHY reports that aneg is done

 * but the value found in MII_LPA is wrong:

 *  - Early failures: MII_LPA is just 0x0001. if MII_EXPANSION reports that

 *    the link partner (LP) supports aneg but the LP never acked our base

 *    code word, it is likely that we never sent it to begin with.

 *  - Late failures: MII_LPA is filled with a value which seems to make sense

 *    but it actually is not what the LP is advertising. It seems that we

 *    can detect this using a magic bit in the WOL bank (reg 12 - bit 12).

 *    If this particular bit is not set when aneg is reported being done,

 *    it means MII_LPA is likely to be wrong.

 *

 * In both case, forcing a restart of the aneg process solve the problem.

 * When this failure happens, the first retry is usually successful but,

 * in some cases, it may take up to 6 retries to get a decent result

 Aneg is done, let's check everything is fine */

 Looks like aneg failed after all */

 Ack any pending IRQ */

 Ack any pending IRQ */

 PHY_BASIC_FEATURES */

 PHY_BASIC_FEATURES */

 SPDX-License-Identifier: GPL-2.0+

/*

 * drivers/net/phy/at803x.c

 *

 * Driver for Qualcomm Atheros AR803x PHY

 *

 * Author: Matus Ujhelyi <ujhelyi.m@gmail.com>

PHY-Specific Status Register*/

/* AT803x supports either the XTAL input pad, an internal PLL or the

 * DSP as clock reference for the clock output pad. The XTAL reference

 * is only used for 25 MHz output, all other frequencies need the PLL.

 * The DSP as a clock reference is used in synchronous ethernet

 * applications.

 *

 * By default the PLL is only enabled if there is a link. Otherwise

 * the PHY will go into low power state and disabled the PLL. You can

 * set the PLL_ON bit (see debug register 0x1f) to keep the PLL always

 * enabled.

/* The AR8035 has another mask which is compatible with the AR8031/AR8033 mask

 * but doesn't support choosing between XTAL/PLL and DSP.

 don't turn off internal PLL */

 ADC threshold */

 CLD control */

 AZ control */

 master/slave seed config */

/* Hibernation yields lower power consumpiton in contrast with normal operation mode.

 * when the copper cable is unplugged, the PHY enters into hibernation mode in about 10s.

 save relevant PHY registers to private copy */

 restore relevant PHY registers from private copy */

 Enable WOL function */

 Enable WOL interrupt */

 Disable WoL function */

 Disable WOL interrupt */

 Clear WOL status */

	/* Check if there are other interrupts except for WOL triggered when PHY is

	 * in interrupt mode, only the interrupts enabled by AT803X_INTR_ENABLE can

	 * be passed up to the interrupt PIN.

		/* Fixup for the AR8030/AR8035. This chip has another mask and

		 * doesn't support the DSP reference. Eg. the lowest bit of the

		 * mask. The upper two bits select the same frequencies. Mask

		 * the lowest bit here.

		 *

		 * Warning:

		 *   There was no datasheet for the AR8030 available so this is

		 *   just a guess. But the AR8035 is listed as pin compatible

		 *   to the AR8030 so there might be a good chance it works on

		 *   the AR8030 too.

	/* Only supported on AR8031/AR8033, the AR8030/AR8035 use strapping

	 * options.

	/* Some bootloaders leave the fiber page selected.

	 * Switch to the copper page, as otherwise we read

	 * the PHY capabilities from the fiber side.

	/* AR8031/AR8033 have different status registers

	 * for copper and fiber operation. However, the

	 * extended status register is the same for both

	 * operation modes.

	 *

	 * As a result of that, ESTATUS_1000_XFULL is set

	 * to 1 even when operating in copper TP mode.

	 *

	 * Remove this mode from the supported link modes,

	 * as this driver currently only supports copper

	 * operation.

	/* The default after hardware reset is PLL OFF. After a soft reset, the

	 * values are retained.

	/* The RX and TX delay default is:

	 *   after HW reset: RX delay enabled and TX delay disabled

	 *   after SW reset: RX delay enabled, while TX delay retains the

	 *   value before reset.

	/* Ar803x extended next page bit is enabled by default. Cisco

	 * multigig switches read this bit and attempt to negotiate 10Gbps

	 * rates even if the next page bit is disabled. This is incorrect

	 * behaviour but we still need to accommodate it. XNP is only needed

	 * for 10Gbps support, so disable XNP.

 Clear any pending interrupts */

 Clear any pending interrupts */

 Read the current enabled interrupts */

 See if this was one of our enabled interrupts */

	/*

	 * Conduct a hardware reset for AT8030 every time a link loss is

	 * signalled. This is necessary to circumvent a hardware bug that

	 * occurs when the cable is unplugged while TX packets are pending

	 * in the FIFO. In such cases, the FIFO enters an error mode it

	 * cannot recover from by software.

	/* Read the AT8035 PHY-Specific Status register, which indicates the

	 * speed and duplex that the PHY is actually using, irrespective of

	 * whether we are in autoneg mode or not.

 qca8081 takes the different bits for speed value from at803x */

 Update the link, but return if there was an error */

 why bother the PHY if nothing can have changed */

	/* Changes of the midx bits are disruptive to the normal operation;

	 * therefore any changes to these registers must be followed by a

	 * software reset to take effect.

	/* Do not restart auto-negotiation by setting ret to 0 defautly,

	 * when calling __genphy_config_aneg later.

		/* The reg MII_BMCR also needs to be configured for force mode, the

		 * genphy_config_aneg is also needed.

	/* After changing the smart speed settings, we need to perform a

	 * software reset, use phy_init_hw() to make sure we set the

	 * reapply any values which might got lost during software reset.

	/* According to the datasheet the distance to the fault is

	 * DELTA_TIME * 0.824 meters.

	 *

	 * The author suspect the correct formula is:

	 *

	 *   fault_distance = DELTA_TIME * (c * VF) / 125MHz / 2

	 *

	 * where c is the speed of light, VF is the velocity factor of

	 * the twisted pair cable, 125MHz the counter frequency and

	 * we need to divide by 2 because the hardware will measure the

	 * round trip time to the fault and back to the PHY.

	 *

	 * With a VF of 0.69 we get the factor 0.824 mentioned in the

	 * datasheet.

 qca8081 takes the different bit 15 to enable CDT test */

 One test run takes about 25ms */

	/* According to the datasheet the CDT can be performed when

	 * there is no link partner or when the link partner is

	 * auto-negotiating. Starting the test will restart the AN

	 * automatically. It seems that doing this repeatedly we will

	 * get a slot where our link partner won't disturb our

	 * measurement.

	/* Enable auto-negotiation, but advertise no capabilities, no link

	 * will be established. A restart of the auto-negotiation is not

	 * required, because the cable test will automatically break the link.

 we do all the (time consuming) work later */

 For 100M waveform */

 Turn on Gigabit clock */

	/* QCA8327 require DAC amplitude adjustment for 100m set to +6%.

	 * Disable on init and enable only with 100m speed following

	 * qca original source code.

 Following original QCA sourcecode set port to prefer master */

 QCA8337 doesn't require DAC Amplitude adjustement */

 Set DAC Amplitude adjustment to +6% for 100m on link running */

 Reset DAC Amplitude adjustment */

 Skip reset if not suspended */

 Reinit the port, reset values set by suspend */

 Reset the port on port resume */

	/* On resume from suspend the switch execute a reset and

	 * restart auto-negotiation. Wait for reset to complete.

	/* Only QCA8337 support actual suspend.

	 * QCA8327 cause port unreliability when phy suspend

	 * is set.

 Enable fast retrain */

 Active adc&vga on 802.3az for the link 1000M and 100M */

 Adjust the threshold on 802.3az for the link 1000M */

 Config the fast retrain for the link 2500M */

 Configure lower ramdom seed to make phy linked as slave mode */

 Enable seed */

 Configure adc threshold as 100mv for the link 10M */

	/* generate seed as a lower random value to make PHY linked as SLAVE easily,

	 * except for master/slave configuration fault detected.

	 * the reason for not putting this code into the function link_change_notify is

	 * the corner case where the link partner is also the qca8081 PHY and the seed

	 * value is configured as the same value, the link can't be up and no link change

	 * occurs.

	/* perform CDT with the following configs:

	 * 1. disable hibernation.

	 * 2. force PHY working in MDI mode.

	 * 3. for PHY working in 1000BaseT.

	 * 4. configure the threshold.

 Force 1000base-T needs to configure PMA/PMD and MII_BMCR */

 configure the thresholds for open, short, pair ok test */

 Qualcomm Atheros AR8035 */

 PHY_GBIT_FEATURES */

 Qualcomm Atheros AR8030 */

 PHY_BASIC_FEATURES */

 Qualcomm Atheros AR8031/AR8033 */

 Qualcomm Atheros AR8032 */

 PHY_BASIC_FEATURES */

 ATHEROS AR9331 */

 PHY_BASIC_FEATURES */

 Qualcomm Atheros QCA9561 */

 PHY_BASIC_FEATURES */

 QCA8337 */

 PHY_GBIT_FEATURES */

 QCA8327-A from switch QCA8327-AL1A */

 PHY_GBIT_FEATURES */

 QCA8327-B from switch QCA8327-BL1A */

 PHY_GBIT_FEATURES */

 Qualcomm QCA8081 */

 SPDX-License-Identifier: GPL-2.0

/* Driver for the Texas Instruments DP83822, DP83825 and DP83826 PHYs.

 *

 * Copyright (C) 2017 Texas Instruments Inc.

 GENCFG */

 Control Register 2 bits */

 PHY STS bits */

 PHYSCR Register Fields */

 Interrupt Output Enable */

 Interrupt Enable */

 MISR1 bits */

 MISR2 bits */

 INT_STAT1 bits */

 WoL Registers */

 WoL bits */

 RSCR bits */

 SOR1 mode */

		/* MAC addresses start with byte 5, but stored in mac[0].

		 * 822 PHYs store bytes 4|5, 2|3, 0|1

 Clear any pending WoL interrupt */

 WoL is not enabled so set wolopts to 0 */

	/* The MISR1 and MISR2 registers are holding the interrupt status in

	 * the upper half (15:8), while the lower half (7:0) is used for

	 * controlling the interrupt enable state of those individual interrupt

	 * sources. To determine the possible interrupt sources, just read the

	 * MISR* register and use it directly to know which interrupts have

	 * been enabled previously or not.

 Only allow advertising what this PHY supports */

 Auto neg is not supported in fiber mode */

 Setup fiber advertisement */

	/* Signal detection for the PHY is only enabled if the FX_EN and the

	 * SD_EN pins are strapped. Signal detection can only enabled if FX_EN

	 * is strapped otherwise signal detection is disabled for the PHY.

 CONFIG_OF_MDIO */

 PHY_BASIC_FEATURES */			\

 PHY_BASIC_FEATURES */			\

 SPDX-License-Identifier: GPL-2.0

/* t_start_up (SFF-8431) or t_init (SFF-8472) is the time required for a

 * non-cooled module to initialise its laser safety circuitry. We wait

 * an initial T_WAIT period before we check the tx fault to give any PHY

 * on board (for a copper SFP) time to initialise.

/* t_reset is the time required to assert the TX_DISABLE signal to reset

 * an indicated TX_FAULT.

/* N_FAULT_INIT is the number of recovery attempts at module initialisation

 * time. If the TX_FAULT signal is not deasserted after this number of

 * attempts at clearing it, we decide that the module is faulty.

 * N_FAULT is the same but after the module has initialised.

/* T_PHY_RETRY is the time interval between attempts to probe the PHY.

 * R_PHY_RETRY is the number of attempts.

/* SFP module presence detection is poor: the three MOD DEF signals are

 * the same length on the PCB, which means it's possible for MOD DEF 0 to

 * connect before the I2C bus on MOD DEF 1/2.

 *

 * The SFF-8472 specifies t_serial ("Time from power on until module is

 * ready for data transmission over the two wire serial bus.") as 300ms.

/* SFP modules appear to always have their PHY configured for bus address

 * 0x56 (which with mdio-i2c, translates to a PHY address of 22).

 Protects state */

 Protects state machine */

	/* SFP GPON module Ubiquiti U-Fiber Instant has in its EEPROM stored

	 * phys id SFF instead of SFP. Therefore mark this module explicitly

	 * as supported based on vendor name and pn match.

 If the module is present, drive the signals */

 Otherwise, let them float to the pull-ups */

 Interface */

 Preserve the current state */

 hwmon */

		/* External calibration of receive power requires

		 * floating point arithmetic. Doing that in the kernel

		 * is not easy, so just skip it. If the module does

		 * not require external calibration, we can however

		 * show receiver power, since FP is then not needed.

 Transmit power */

 Receive power */

	/* hwmon interface needs to access 16bit registers in atomic way to

	 * guarantee coherency of the diagnostic monitoring data. If it is not

	 * possible to guarantee coherency because EEPROM is broken in such way

	 * that does not support atomic 16bit read operation then we have to

	 * skip registration of hwmon device.

		/* This driver in general does not support address

		 * change.

 Helpers */

 SFP state machine */

	/* If neither SFP_OPTIONS_LOS_INVERTED nor SFP_OPTIONS_LOS_NORMAL

	 * are set, we assume that no LOS signal is available. If both are

	 * set, we assume LOS is not implemented (and is meaningless.)

/* Probe a SFP for a PHY device if the module supports copper - the PHY

 * normally sits at I2C bus address 0x56, and may either be a clause 22

 * or clause 45 PHY.

 *

 * Clause 22 copper SFP modules normally operate in Cisco SGMII mode with

 * negotiation enabled, but some may be in 1000base-X - which is for the

 * PHY driver to determine.

 *

 * Clause 45 copper SFP+ modules (10G) appear to switch their interface

 * mode according to the negotiated line speed.

 Module power specification exceeds the allowed maximum. */

			/* The module appears not to implement bus address

			 * 0xa2, so assume that the module powers up in the

			 * indicated mode.

	/* If the module requires a higher power mode, but also requires

	 * an address change sequence, warn the user that the module may

	 * not be functional.

	/* DM7052 reports as a high power module, responds to reads (with

	 * all bytes 0xff) at 0x51 but does not accept writes.  In any case,

	 * if the bit is already set, we're already in high power mode.

/* GPON modules based on Realtek RTL8672 and RTL9601C chips (e.g. V-SOL

 * V2801F, CarlitoxxPro CPGOS03-0490, Ubiquiti U-Fiber Instant, ...) do

 * not support multibyte reads from the EEPROM. Each multi-byte read

 * operation returns just one byte of EEPROM followed by zeros. There is

 * no way to identify which modules are using Realtek RTL8672 and RTL9601C

 * chips. Moreover every OEM of V-SOL V2801F module puts its own vendor

 * name and vendor id into EEPROM, so there is even no way to detect if

 * module is V-SOL V2801F. Therefore check for those zeros in the read

 * data and then based on check switch to reading EEPROM to one byte

 * at a time.

 Already using byte IO */

 Cotsworks modules have been found to require a delay between write operations. */

 Update base structure checksum */

 SFP module inserted - read I2C data */

	/* Some SFP modules and also some Linux I2C drivers do not like reads

	 * longer than 16 bytes, so read the EEPROM in chunks of 16 bytes at

	 * a time.

	/* Some SFP modules (e.g. Nokia 3FE46541AA) lock up if read from

	 * address 0x51 is just one byte at a time. Also SFF-8472 requires

	 * that EEPROM supports atomic 16bit read operation for diagnostic

	 * fields, so do not switch to one byte reading at a time unless it

	 * is really required and we have no other option.

	/* Cotsworks do not seem to update the checksums when they

	 * do the final programming with the final module part number,

	 * serial number and date code.

	/* Cotsworks SFF module EEPROM do not always have valid phys_id,

	 * phys_ext_id, and connector bytes.  Rewrite SFF EEPROM bytes if

	 * Cotsworks PN matches and bytes are not correct.

 Validate the checksum over the base structure */

 Check whether we support this module */

 If the module requires address swap mode, warn about it */

 Parse the module power requirement */

 This state machine tracks the upstream's state */

/* This state machine tracks the insert/remove state of the module, probes

 * the on-board EEPROM, and sets up the power level.

 Handle remove event globally, it resets this state machine */

 Handle device detach globally */

 Wait for T_PROBE_INIT to time out */

 Ensure that the device is attached before proceeding */

 Report the module insertion to the upstream device */

 If this is a power level 1 module, we are done */

 Enable high power mode */

 Wait for T_HPOWER_LEVEL to time out */

 Some events are global */

 The main state machine */

 Initialise the fault clearance retries */

		/* We need to check the TX_FAULT state, which is not defined

		 * while TX_DISABLE is asserted. The earliest we want to do

		 * anything (such as probe for a PHY) is 50ms.

			/* Wait up to t_init (SFF-8472) or t_start_up (SFF-8431)

			 * from the TX_DISABLE deassertion for the module to

			 * initialise, which is indicated by TX_FAULT

			 * deasserting.

			/* TX_FAULT is not asserted, assume the module has

			 * finished initialising.

			/* TX_FAULT is still asserted after t_init

			 * or t_start_up, so assume there is a fault.

		/* TX_FAULT deasserted or we timed out with TX_FAULT

		 * clear.  Probe for the PHY and check the LOS state.

 Reset the fault retry count */

 locking... and check module is present */

 Modules that have no detect signal are always present */

	/* Get the initial state, and always signal TX disable,

	 * since the network interface will not be up.

	/* We could have an issue in cases no Tx disable pin is available or

	 * wired as modules using a laser as their light source will continue to

	 * be active when the fiber is removed. This could be a safety issue and

	 * we should at least warn the user about that.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2015-2017 Broadcom

 Restore default value.  It's O.K. if this write fails. */

	/* The register must be written to both the Shadow Register Select and

	 * the Shadow Read Register Selector

 Clear pending interrupts.  */

	/* If a bit from the Interrupt Mask register is set, the corresponding

	 * bit from the Interrupt Status register is masked. So read the IMR

	 * and then flip the bits to get the list of possible interrupt

	 * sources.

 Clear APD bits */

 Enable energy detect single link pulse for easy wakeup */

 Enable Auto Power-Down (APD) for the PHY */

 Enable EEE at PHY level */

 Advertise EEE */

 Check if wirespeed is enabled or not */

 Downgrade after one link attempt */

 Downgrade after configured retry count */

 Range check the number given */

 Se the write enable bit */

 Counters freeze at either 0xffff or 0xff, better than nothing */

/* Caller is supposed to provide appropriate storage for the library code to

 * access the shadow copy

 Reset R_CAL/RC_CAL Engine */

 Disable Reset R_AL/RC_CAL Engine */

	/* Increase VCO range to prevent unlocking problem of PLL at low

	 * temp

 Change Ki to 011 */

	/* Disable loading of TVCO buffer to bandgap, set bandgap trim

	 * to 111

 Adjust bias current trim by -3 */

 Switch to CORE_BASE1E */

 write AFE_RXCONFIG_0 */

 write AFE_RXCONFIG_1 */

 write AFE_RX_LP_COUNTER */

 write AFE_HPF_TRIM_OTHERS */

 write AFTE_TX_CONFIG */

 Enable extended length packet reception */

	/* Enable the elastic FIFO for raising the transmission limit from

	 * 4.5KB to 10KB, at the expense of an additional 16 ns in propagation

	 * latency.

	/* Auto-negotiation must be enabled for cable diagnostics to work, but

	 * don't advertise any capabilities.

 re-enable the RDB access even if there was an error */

 re-enable the RDB access even if there was an error */

/* We assume that all PHYs which support RDB access can be switched to legacy

 * mode. If, in the future, this is not true anymore, we have to re-implement

 * this with RDB access.

 SPDX-License-Identifier: GPL-2.0+

/* Driver for Asix PHYs

 *

 * Author: Michael Schmitz <schmitzmic@gmail.com>

/**

 * asix_soft_reset - software reset the PHY via BMCR_RESET bit

 * @phydev: target phy_device struct

 *

 * Description: Perform a software PHY reset using the standard

 * BMCR_RESET bit and poll for the reset bit to be cleared.

 * Toggle BMCR_RESET bit off to accommodate broken AX8796B PHY implementation

 * such as used on the Individual Computers' X-Surf 100 Zorro card.

 *

 * Returns: 0 on success, < 0 on failure

 Asix PHY won't reset unless reset bit toggles */

/* AX88772A is not working properly with some old switches (NETGEAR EN 108TP):

 * after autoneg is done and the link status is reported as active, the MII_LPA

 * register is 0. This issue is not reproducible on AX88772C.

	/* If MII_LPA is 0, phy_resolve_aneg_linkmode() will fail to resolve

	 * linkmode so use MII_BMCR as default values.

	/* Reset PHY, otherwise MII_LPA will provide outdated information.

	 * This issue is reproducible only with some link partner PHYs

 PHY_BASIC_FEATURES */

 SPDX-License-Identifier: GPL-2.0

/*

 * SPI driver for Micrel/Kendin KS8995M and KSZ8864RMN ethernet switches

 *

 * Copyright (C) 2008 Gabor Juhos <juhosg at openwrt.org>

 *

 * This file was based on: drivers/spi/at25.c

 *     Copyright (C) 2006 David Brownell

 ------------------------------------------------------------------------ */

 Chip ID0 */

 Chip ID1 */

 Global Control 0 */

 Global Control 1 */

 Global Control 2 */

 Global Control 3 */

 Global Control 4 */

 Global Control 5 */

 Global Control 6 */

 Global Control 7 */

 Global Control 8 */

 Global Control 9 */

 Port Control */

 Port Status */

 TOS Priority Control 0 */

 TOS Priority Control 1 */

 TOS Priority Control 2 */

 TOS Priority Control 3 */

 TOS Priority Control 4 */

 TOS Priority Control 5 */

 TOS Priority Control 6 */

 TOS Priority Control 7 */

 MAC address 0 */

 MAC address 1 */

 MAC address 2 */

 MAC address 3 */

 MAC address 4 */

 MAC address 5 */

 Indirect Access Control 0 */

 Indirect Access Control 0 */

 Indirect Access Data 7 */

 Indirect Access Data 6 */

 Indirect Access Data 5 */

 Indirect Access Data 4 */

 Indirect Access Data 3 */

 Indirect Access Data 2 */

 Indirect Access Data 1 */

 Indirect Access Data 0 */

 Chip ID in bit 7 */

 start the switch */

 usec */

/* create_spi_cmd - create a chip specific SPI command header

 * @ks: pointer to switch instance

 * @cmd: SPI command for switch

 * @address: register address for command

 *

 * Different chip families use different bit pattern to address the switches

 * registers:

 *

 * KS8995: 8bit command + 8bit address

 * KSZ8795: 3bit command + 12bit address + 1bit TR (?)

 make room for address (incl. address shift) */

 add address */

 SPI protocol needs big endian */

 ------------------------------------------------------------------------ */

 ------------------------------------------------------------------------ */

/* ks8995_get_revision - get chip revision

 * @ks: pointer to switch instance

 *

 * Verify chip family and id and get chip revision.

 read family id */

 verify family id */

 try reading chip id at CHIP ID1 */

 verify chip id */

 KS8995MA */

 KSZ8864RMN */

 try reading chip id at CHIP ID1 */

/* ks8995_parse_dt - setup platform data from devicetree

 * @ks: pointer to switch instance

 *

 * Parses supported DT properties and sets up platform data

 * accordingly.

 ------------------------------------------------------------------------ */

 de-assert switch reset */

 assert reset */

 ------------------------------------------------------------------------ */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2015 Broadcom Corporation

 Broadcom Cygnus SoC internal transceivers support. */

 Broadcom Cygnus Phy specific registers */

 VDAL Control register */

 ensure smdspclk is enabled */

 AFE_VDAC_ICTRL_0 bit 7:4 Iq=1100 for 1g 10bt, normal modes */

 AFE_HPF_TRIM_OTHERS bit11=1, short cascode enable for all modes*/

 AFE_TX_CONFIG_1 bit 7:4 Iq=1100 for test modes */

 AFE TEMPSEN_OTHERS rcal_HT, rcal_LT 10000 */

 AFE_FUTURE_RSV bit 2:0 rccal <2:0>=100 */

 Adjust bias current trim to overcome digital offSet */

 make rcal=100, since rdb default is 000 */

 CORE_EXPB0, Reset R_CAL/RC_CAL Engine */

 CORE_EXPB0, Disable Reset R_CAL/RC_CAL Engine */

 Mask interrupts globally. */

 Unmask events of interest */

 Apply AFE settings for the PHY */

 Advertise EEE */

 Enable APD */

	/* Re-initialize the PHY to apply AFE work-arounds and

	 * configurations when coming out of suspend.

 restart auto negotiation with the new settings */

	/* Dummy read to a register to workaround an issue upon reset where the

	 * internal inverter may not allow the first MDIO transaction to pass

	 * the MDIO management controller and make us return 0xffff for such

	 * reads.

 Only enable EEE if Wirespeed/downshift is disabled */

 Re-apply workarounds coming out suspend/resume */

	/* 28nm Gigabit PHYs come out of reset without any half-duplex

	 * or "hub" compliant advertised mode, fix that. This does not

	 * cause any problems with the PHY library since genphy_config_aneg()

	 * gracefully handles auto-negotiated and forced modes.

	/* Disable EEE advertisement since this prevents the PHY

	 * from successfully linking up, trigger auto-negotiation restart

	 * to let the MAC decide what to do.

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 SPDX-License-Identifier: GPL-2.0

/* Driver for the Texas Instruments DP83869 PHY

 * Copyright (C) 2019 Texas Instruments Inc.

 Extended Registers */

 MICR Interrupt bits */

 This is the same bit mask as the BMCR so re-use the BMCR default */

 CFG1 bits */

 RGMIICTL bits */

 RGMIIDCTL */

 STRAP_STS1 bits */

 PHYCTRL bits */

 PHY_CTRL lower bytes 0x48 are declared as reserved */

 IO_MUX_CFG bits */

 CFG3 bits */

 CFG4 bits */

 OP MODE */

 RXFCFG bits*/

 CFG2 bits */

 Optional configuration */

 If the lane swap is not in the DT then check the straps */

 CONFIG_OF_MDIO */

 Only allow advertising what this PHY supports */

 Auto neg is not supported in 100base FX mode */

 Update advertising from supported */

	/* Below init sequence for each operational mode is defined in

	 * section 9.4.8 of the datasheet.

 Force speed optimization for the PHY even if it strapped */

 Enable Interrupt output INT_OE in CFG4 register */

 Clock output selection if muxing property is set */

	/* Global sw reset sets all registers to default.

	 * Need to set the registers in the PHY to the right config.

 IRQ related */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2012 Daniel Schwierzeck <daniel.schwierzeck@googlemail.com>

 * Copyright (C) 2016 Hauke Mehrtens <hauke@hauke-m.de>

 mii control */

 interrupt mask */

 interrupt status */

 led control */

 bit 15:12 are reserved */

 Enable the integrated function of LED3 */

 Enable the integrated function of LED2 */

 Enable the integrated function of LED1 */

 Enable the integrated function of LED0 */

 bit 7:4 are reserved */

 Direct Access to LED3 */

 Direct Access to LED2 */

 Direct Access to LED1 */

 Direct Access to LED0 */

 Wake-On-LAN */

 Auto-Neg error */

 Auto-Neg complete */

 Link auto-downspeed detect */

 Duplex mode change */

 Link speed change */

 Link state change */

 Multi-port device */

 LED Configuration */

 Inverse of SCAN Function */

 Slow Blink Frequency */

 Fast Blink Frequency */

 LED Configuration */

 Complex Blinking Configuration */

 Complex SCAN Configuration */

 Configuration for LED Pin x */

 Fast Blinking Configuration */

 Constant On Configuration */

 Configuration for LED Pin x */

 Pulsing Configuration */

 Slow Blinking Configuration */

	/* Existing behavior was to use default pin strapping delay in rgmii

	 * mode, but rgmii should have meant no delay.  Warn existing users,

	 * but do not change anything at the moment.

 if rx-internal-delay-ps is missing, use default of 2.0 ns */

 2000 ps */

 if tx-internal-delay-ps is missing, use default of 2.0 ns */

 2000 ps */

 Mask all interrupts */

 Clear all pending interrupts */

 Ensure that integrated led function is enabled for all leds */

	/**

	 * In most cases only one LED is connected to this phy, so

	 * configure them all to constant on and pulse mode. LED3 is

	 * only available in some packages, leave it in its reset

	 * configuration.

 Advertise as multi-port device, see IEEE802.3-2002 40.5.1.1 */

 This is a workaround for an errata in rev < 1.5 devices */

 PHY_GBIT_FEATURES */

 PHY_BASIC_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_BASIC_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_BASIC_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_BASIC_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_BASIC_FEATURES */

 SPDX-License-Identifier: GPL-2.0+

/*

 * drivers/net/phy/lxt.c

 *

 * Driver for Intel LXT PHYs

 *

 * Author: Andy Fleming

 *

 * Copyright (c) 2004 Freescale Semiconductor, Inc.

 The Level one LXT970 is used by many boards				     */

 Interrupt Enable Register */

 Interrupt Status Register */

 Configuration Register    */

 ------------------------------------------------------------------------- */

 The Level one LXT971 is used on some of my custom boards                  */

 register definitions for the 971 */

 Interrupt Enable Register */

 Interrupt Status Register */

 register definitions for the 973 */

 Port Configuration Register */

	/* The interrupt status register is cleared by reading BMSR

	 * followed by MII_LXT970_ISR

/*

 * A2 version of LXT973 chip has an ERRATA: it randomly return the contents

 * of the previous even register when you read a odd register regularly

 we try 8 times */

 Do a fake read */

 Read link and autonegotiation status */

 Update the link, but return if there was an error */

			/* If both registers are equal, it is suspect but not

			 * impossible, hence a new try

		/*

		 * If fiber is selected, then the only correct setting

		 * is 100Mbps, full duplex, and auto negotiation off.

 Remember that the port is in fiber mode. */

 Do nothing if port is in fiber mode. */

 PHY_BASIC_FEATURES */

 PHY_BASIC_FEATURES */

 PHY_BASIC_FEATURES */

 PHY_BASIC_FEATURES */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for the Texas Instruments DP83TC811 PHY

 *

 * Copyright (C) 2018 Texas Instruments Incorporated - http://www.ti.com/

 *

 INT_STAT1 bits */

 INT_STAT2 bits */

 INT_STAT3 bits */

 WoL Registers */

 WoL bits */

 SGMII CTRL bits */

		/* MAC addresses start with byte 5, but stored in mac[0].

		 * 811 PHYs store bytes 4|5, 2|3, 0|1

 Clear any pending WoL interrupt */

 WoL is not enabled so set wolopts to 0 */

	/* The INT_STAT registers 1, 2 and 3 are holding the interrupt status

	 * in the upper half (15:8), while the lower half (7:0) is used for

	 * controlling the interrupt enable state of those individual interrupt

	 * sources. To determine the possible interrupt sources, just read the

	 * INT_STAT* register and use it directly to know which interrupts have

	 * been enabled previously or not.

 PHY_BASIC_FEATURES */

 SPDX-License-Identifier: GPL-2.0+

/* Framework for MDIO devices, other than PHYs.

 *

 * Copyright (c) 2016 Andrew Lunn <andrew@lunn.ch>

 We allocate the device, and initialize the default values */

/**

 * mdio_device_register - Register the mdio device on the MDIO bus

 * @mdiodev: mdio_device structure to be added to the MDIO bus

/**

 * mdio_device_remove - Remove a previously registered mdio device from the

 *			MDIO bus

 * @mdiodev: mdio_device structure to remove

 *

 * This doesn't free the mdio_device itself, it merely reverses the effects

 * of mdio_device_register(). Use mdio_device_free() to free the device

 * after calling this function.

/**

 * mdio_probe - probe an MDIO device

 * @dev: device to probe

 *

 * Description: Take care of setting up the mdio_device structure

 * and calling the driver to probe the device.

 Deassert the reset signal */

 Assert the reset signal */

 Assert the reset signal */

/**

 * mdio_driver_register - register an mdio_driver with the MDIO layer

 * @drv: new mdio_driver to register

 SPDX-License-Identifier: GPL-2.0+

/*

 * drivers/net/phy/national.c

 *

 * Driver for National Semiconductor PHYs

 *

 * Author: Stuart Menefy <stuart.menefy@st.com>

 * Maintainer: Giuseppe Cavallaro <peppe.cavallaro@st.com>

 *

 * Copyright (c) 2008 STMicroelectronics Limited

 DP83865 phy identifier values */

 Advanced proprietary configuration */

	/* Clear the interrupt status bit by writing a “1”

	 * to the corresponding bit in INT_CLEAR (2:0 are reserved)

 clear the interrupt */

 Enable 8 bit expended memory read/write (no auto increment) */

	/* In the latest MAC or switches design, the 10 Mbps loopback

	 * is desired to be turned off.

 PHY_GBIT_FEATURES */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for Motorcomm PHYs

 *

 * Author: Peter Geis <pgwipeout@gmail.com>

/* 2b00 25m from pll

 * 2b01 25m from xtl *default*

 * 2b10 62.m from pll

 * 2b11 125m from pll

 RX Delay enabled = 1.8ns 1000T, 8ns 10/100T */

/* TX Gig-E Delay is bits 7:4, default 0x5

 * TX Fast-E Delay is bits 15:12, default 0xf

 * Delay = 150ps * N - 250ps

 * On = 2000ps, off = 50ps

 set rgmii delay mode */

 do not support other modes */

 set clock mode to 125mhz */

 fast ethernet delay is in a separate page */

 leave pll enabled in sleep */

 sentinal */ }

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2018 Microchip Technology

 External Register Control Register */

 External Register Read Data Register */

 External Register Write Data Register */

 Interrupt Source Register */

 Interrupt Mask Register */

 MISC Control 1 Register */

 phyaccess nested types */

 measurement defines */

 TX Amplitude = 5 */

 Clear SMI interrupts */

 Clear MISC interrupts */

 Turn on TC10 Ring Oscillator (ROSC) */

 WUR Detect Length to 1.2uS, LPC Detect Length to 1.09uS */

 Wake_In Debounce Length to 39uS, Wake_Out Length to 79uS */

		/* Enable Auto Wake Forward to Wake_Out, ROSC on, Sleep,

		 * and Wake_In to wake PHY

		/* Enable WUP Auto Fwd, Enable Wake on MDI, Wakeup Debouncer

		 * to 128 uS

 Enable HW Init */

 Start manual initialization procedures in Managed Mode */

 Soft Reset the SMI block */

 Check to see if the self-clearing bit is cleared */

 PHY Initialization */

 unmask all source and clear them before enable */

	/* If auto-negotiation is enabled, but not complete, the cable

	 * test never completes. So disable auto-neg.

 If the link is up, allow it some time to go down */

 min wait */

 max wait */

 pulse cycle */

 cable diag thresh */

 max gain */

 clock align for each iteration */

 max cycle wait config */

 start cable diag*/

 start cable diag */

 check if part is alive - if not, return diagnostic error */

 master/slave specific configs */

 DUT is Slave */

 DUT is Master */

 wait 50ms */

 cable diag started */

 DIAGNOSTIC_ERROR */

 read non-hybrid results */

 calculate non-hybrid values */

 process values */

 check if cable diag was finished */

 stop cable diag*/

 SPDX-License-Identifier: GPL-2.0+

/*

 * Broadcom BCM7xxx internal transceivers support.

 *

 * Copyright (C) 2014-2017 Broadcom

 Broadcom BCM7xxx internal PHY registers */

 EPHY only register definitions */

 AFE_RXCONFIG_0 */

 AFE_RXCONFIG_1 */

 AFE_RXCONFIG_2, set rCal offset for HT=0 code and LT=-2 code */

 AFE_RX_LP_COUNTER, set RX bandwidth to maximum */

 AFE_TX_CONFIG, set 100BT Cfeed=011 to improve rise/fall time */

 AFE_VDCA_ICTRL_0, set Iq=1101 instead of 0111 for AB symmetry */

 AFE_VDAC_OTHERS_0, set 1000BT Cidac=010 for all ports */

	/* AFE_HPF_TRIM_OTHERS, set 100Tx/10BT to -4.5% swing and set rCal

	 * offset for HT=0 code

 CORE_BASE1E, force trim to overwrite and set I_ext trim to 0000 */

 DSP_TAP10, adjust bias current trim (+0% swing, +0 tick) */

 Reset R_CAL/RC_CAL engine */

 AFE_RXCONFIG_1, provide more margin for INL/DNL measurement */

 AFE_TX_CONFIG, set 100BT Cfeed=011 to improve rise/fall time */

 AFE_VDCA_ICTRL_0, set Iq=1101 instead of 0111 for AB symmetry */

	/* AFE_HPF_TRIM_OTHERS, set 100Tx/10BT to -4.5% swing and set rCal

	 * offset for HT=0 code

 CORE_BASE1E, force trim to overwrite and set I_ext trim to 0000 */

 DSP_TAP10, adjust bias current trim (+0% swing, +0 tick) */

 Reset R_CAL/RC_CAL engine */

 +1 RC_CAL codes for RL centering for both LT and HT conditions */

 Cut master bias current by 2% to compensate for RC_CAL offset */

 Improve hybrid leakage */

 Change rx_on_tune 8 to 0xf */

 Change 100Tx EEE bandwidth */

 Enable ffe zero detection for Vitesse interoperability */

	/* Newer devices have moved the revision information back into a

	 * standard location in MII_PHYS_ID[23]

	/* Dummy read to a register to workaround an issue upon reset where the

	 * internal inverter may not allow the first MDIO transaction to pass

	 * the MDIO management controller and make us return 0xffff for such

	 * reads.

 Rev G0 introduces a roll over */

 Only enable EEE if Wirespeed/downshift is disabled */

 Re-apply workarounds coming out suspend/resume */

	/* 28nm Gigabit PHYs come out of reset without any half-duplex

	 * or "hub" compliant advertised mode, fix that. This does not

	 * cause any problems with the PHY library since genphy_config_aneg()

	 * gracefully handles auto-negotiated and forced modes.

 set shadow mode 2 */

 Set current trim values INT_trim = -1, Ext_trim =0 */

 Cal reset */

 Cal reset disable */

 reset shadow mode 2 */

 The 28nm EPHY does not support Clause 45 (MMD) used by bcm-phy-lib */

 set shadow mode 1 */

 Enable auto-power down */

 reset shadow mode 1 */

 set shadow mode 2 */

 Advertise supported modes */

 Restore Defaults */

 Enable EEE autonegotiation */

 reset shadow mode 2 */

 Restart autoneg */

	/* Dummy read to a register to workaround a possible issue upon reset

	 * where the internal inverter may not allow the first MDIO transaction

	 * to pass the MDIO management controller and make us return 0xffff for

	 * such reads.

 Apply AFE software work-around if necessary */

 Reset PHY */

 Reset AFE and PLL */

 Clear reset */

 Write PLL/AFE control register to select 54MHz crystal */

 Change Ka,Kp,Ki to pdiv=1 */

 Configuration override */

 Change PLL_NDIV and PLL_NUDGE */

	/* Reference frequency is 54Mhz, config_mode[15:14] = 3 (low

	 * phase)

 Initialize bypass mode */

 Bypass code, default: VCOCLK enabled */

 LDOs at default setting */

 Release PLL reset */

 Bandgap curvature correction to correct default */

 Run RCAL */

 AFE_CAL_CONFIG_0, Vref=1000, Target=10, averaging enabled */

 AFE_CAL_CONFIG_0, no reset and analog powerup */

 AFE_CAL_CONFIG_0, start calibration */

 AFE_CAL_CONFIG_0, clear start calibration, set HiBW */

 AFE_CAL_CONFIG_0, start calibration with hi BW mode set */

 Adjust 10BT amplitude additional +7% and 100BT +2% */

 Adjust 1G mode amplitude and 1G testmode1 */

 Read CORE_EXPA9 */

 CORE_EXPA9[6:1] is rcalcode[5:0] */

 Correct RCAL code + 1 is -1% rprogr, LP: +16 */

 Correct RCAL code + 1 is -15 rprogr, 11: +10 */

 Saturate if necessary */

 REXT=1 BYP=1 RCAL_st1<5:0>=new rcal code */

 Program into AFE_CAL_CONFIG_2 */

 AFE_BIAS_CONFIG_0 10BT bias code (Bias: E4) */

	/* invert adc clock output and 'adc refp ldo current To correct

	 * default

 100BT stair case, high BW, 1G stair case, alternate encode */

	/* 1000BT DAC transition method per Erol, bits[32], DAC Shuffle

	 * sequence 1 + 10BT imp adjust bits

 Non-overlap fix */

	/* pwdb override (rxconfig<5>) to turn on RX LDO indpendent of

	 * pwdb controls from DSP_TAP10

 Remove references to channel 2 and 3 */

 Set cal_bypassb bit rxconfig<43> */

	/* Revert pwdb_override (rxconfig<5>) to 0 so that the RX pwr

	 * is controlled by DSP.

 Drop LSB */

 Clear bits [11:5] */

 set txcfg_ch0<5>=1 (enable + set local rcal) */

	/* set txcfg<45:44>=11 (enable Rextra + invert fullscaledetect)

	/* Auto power down of DLL enabled,

	 * TXC/RXC disabled during auto power down.

 Re-apply workarounds coming out suspend/resume */

 set shadow mode 2 */

 Access the desired shadow register address */

 reset shadow mode 2 */

 set shadow mode 2 */

 Access the desired shadow register address */

 Write the desired value in the shadow register */

 reset shadow mode 2 */

 Re-apply workarounds coming out suspend/resume */

 Enable 64 clock MDIO */

 set shadow mode 2 */

 set iddq_clkbias */

 reset iddq_clkbias */

 reset shadow mode 2 */

/* Workaround for putting the PHY in IDDQ mode, required

 * for all BCM7XXX 40nm and 65nm PHYs

	/* Disable EEE advertisement since this prevents the PHY

	 * from successfully linking up, trigger auto-negotiation restart

	 * to let the MAC decide what to do.

	/* Dummy read to a register to workaround an issue upon reset where the

	 * internal inverter may not allow the first MDIO transaction to pass

	 * the MDIO management controller and make us return 0xffff for such

	 * reads. This is needed to ensure that any subsequent reads to the

	 * PHY will succeed.

 PHY_GBIT_FEATURES */						\

 PHY_BASIC_FEATURES */					\

 PHY_BASIC_FEATURES */					\

 PHY_BASIC_FEATURES */					\

 SPDX-License-Identifier: GPL-2.0+

/*

 * drivers/net/phy/et1011c.c

 *

 * Driver for LSI ET1011C PHYs

 *

 * Author: Chaithrika U S

 *

 * Copyright (c) 2008 Texas Instruments

 First clear the PHY */

 PHY_GBIT_FEATURES */

 SPDX-License-Identifier: GPL-2.0

/* NXP TJA1100 BroadRReach PHY driver

 *

 * Copyright (C) 2018 Marek Vasut <marex@denx.de>

 According to the documentation this test takes 100 usec */

 ACK interrupts by reading the status register */

			/* Currently we care only about double PHY chip TJA1102.

			 * If some day NXP will decide to bring chips with more

			 * PHYs, this logic should be reworked.

 Real PHY ID of Port 1 is 0 */

		/* Overwrite parent device. phy_device_create() set parent to

		 * the mii_bus->dev, which is not correct in case.

			/* All resources needed for Port 1 should be already

			 * available for Port 0. Both ports use the same

			 * interrupt line, so -EPROBE_DEFER would make no sense

			 * here.

	/* TJA1102 Port 1 has phyid 0 and doesn't support temperature

	 * and undervoltage alarms.

/*

 * | BI_DA+           | BI_DA-                 | Result

 * | open             | open                   | open

 * | + short to -     | - short to +           | short

 * | short to Vdd     | open                   | open

 * | open             | shot to Vdd            | open

 * | short to Vdd     | short to Vdd           | short

 * | shot to GND      | open                   | open

 * | open             | shot to GND            | open

 * | short to GND     | shot to GND            | short

 * | connected to active link partner (master) | shot and open

 connected to active link partner (master) */

 Statistics */

 Statistics */

 Statistics */

 currently no probe for Port 1 is need */

 Statistics */

 SPDX-License-Identifier: GPL-2.0+

/*

 *	Driver for Broadcom 63xx SOCs integrated PHYs

 interrupt register */

 global interrupt enable */

 duplex changed */

 speed changed */

 link changed */

 global interrupt mask */

 ASYM_PAUSE bit is marked RO in datasheet, so don't cheat */

 Mask interrupts globally.  */

 Unmask events we are interested in  */

 PHY_BASIC_FEATURES */

 same phy as above, with just a different OUI */

 PHY_BASIC_FEATURES */

 SPDX-License-Identifier: GPL-2.0+

/*

 * drivers/net/phy/micrel.c

 *

 * Driver for Micrel PHYs

 *

 * Author: David J. Choi

 *

 * Copyright (c) 2010-2013 Micrel, Inc.

 * Copyright (c) 2014 Johan Hovold <johan@kernel.org>

 *

 * Support : Micrel Phys:

 *		Giga phys: ksz9021, ksz9031, ksz9131

 *		100/10 Phys : ksz8001, ksz8721, ksz8737, ksz8041

 *			   ksz8021, ksz8031, ksz8051,

 *			   ksz8081, ksz8091,

 *			   ksz8061,

 *		Switch : ksz8873, ksz886x

 *			 ksz9477

 Operation Mode Strap Override */

 general Interrupt control/status reg in vendor specific block. */

 LinkMD Control/Status */

 Short cable (<10 meter) has been detected by LinkMD */

 PHY Control 1 */

 PHY Control 2 / PHY Control (if no PHY Control 1) */

 bitmap of PHY register to set interrupt mode */

 Write/read to/from extended registers */

 Extended registers */

 bit[7..0] int status, which is a read and clear register. */

 set the interrupt pin active low */

 enable / disable interrupts */

/* Disable PHY address 0 as the broadcast address, so that it can be used as a

 * unique (non-broadcast) address on a shared bus.

 Some config bits need to be set again on resume, handle them here. */

 Limit supported and advertised modes in fiber mode */

 Skip auto-negotiation in fiber mode */

	/* KSZ8051 PHY and KSZ8794/KSZ8795/KSZ8765 switch share the same

	 * exact PHY ID. However, they can be told apart by the extended

	 * capability registers presence. The KSZ8051 PHY has them while

	 * the switch does not.

	/* KSZPHY_OMSO_FACTORY_TEST is set at de-assertion of the reset line

	 * based on the RXER (KSZ8081RNA/RND) or TXC (KSZ8081MNX/RNB) pin. If a

	 * pull-down is missing, the factory test mode should be cleared by

	 * manually writing a 0.

	/* The MDI-X configuration is automatically changed by the PHY after

	 * switching from autoneg off to on. So, take MDI-X configuration under

	 * own control and set it after autoneg configuration was done.

	/* The Micrel driver has a deprecated option to place phy OF

	 * properties in the MAC node. Walk up the tree of devices to

	 * find a device with an OF node.

 Extended registers */

 MMD Address 0x0 */

 MMD Address 0x2 */

/* KSZ9031 has internal RGMII_IDRX = 1.2ns and RGMII_IDTX = 0ns. To

 * provide different RGMII options we need to configure delay offset

 * for each pad relative to build in delay.

/* keep rx as "No delay adjustment" and set rx_clk to +0.60ns to get delays of

 * 1.80ns

/* set rx to +0.30ns and rx_clk to -0.90ns to compensate the

 * internal 1.2ns delay.

 set tx to -0.42ns and tx_clk to +0.96ns to get 1.38ns delay */

/* set tx and tx_clk to "No delay adjustment" to keep 0ns

 * dealy

 MMD Address 0x1C */

 Center KSZ9031RNX FLP timing at 16ms. */

 Enable energy-detect power-down mode */

	/* The Micrel driver has a deprecated option to place phy OF

	 * properties in the MAC node. Walk up the tree of devices to

	 * find a device with an OF node.

		/* Silicon Errata Sheet (DS80000691D or DS80000692D):

		 * When the device links in the 1000BASE-T slave mode only,

		 * the optional 125MHz reference output clock (CLK125_NDO)

		 * has wide duty cycle variation.

		 *

		 * The optional CLK125_NDO clock does not meet the RGMII

		 * 45/55 percent (min/max) duty cycle requirement and therefore

		 * cannot be used directly by the MAC side for clocking

		 * applications that have setup/hold time requirements on

		 * rising and falling clock edges.

		 *

		 * Workaround:

		 * Force the phy to be the master to receive a stable clock

		 * which meets the duty cycle requirement.

 enable master mode, config & prefer master */

 psec properties in dts should mean x pico seconds */

/* Silicon Errata DS80000693B

 *

 * When LEDs are configured in Individual Mode, LED1 is ON in a no-link

 * condition. Workaround is to set register 0x1e, bit 9, this way LED1 behaves

 * according to the datasheet (off if there is no link).

 dummy read */

	/* Silicon Errata Sheet (DS80000691D or DS80000692D):

	 * Whenever the device's Asymmetric Pause capability is set to 1,

	 * link-up may fail after a link-up to link-down transition.

	 *

	 * The Errata Sheet is for ksz9031, but ksz9021 has the same issue

	 *

	 * Workaround:

	 * Do not enable the Asymmetric Pause capability bit.

	/* We force setting the Pause capability as the core will force the

	 * Asymmetric Pause capability to 1 otherwise.

	/* Make sure the PHY is not broken. Read idle error count,

	 * and reset the PHY if it is maxed out.

		/* Note: The naming of the bit KSZ886X_BMCR_FORCE_MDI is bit

		 * counter intuitive, the "-X" in "1 = Force MDI" in the data

		 * sheet seems to be missing:

		 * 1 = Force MDI (sic!) (transmit on RX+/RX- pins)

		 * 0 = Normal operation (transmit on TX+/TX- pins)

	/* The MDI-X configuration is automatically changed by the PHY after

	 * switching from autoneg off to on. So, take MDI-X configuration under

	 * own control and set it after autoneg configuration was done.

 Same reverse logic as KSZ886X_BMCR_FORCE_MDI */

 Disable PHY Interrupts */

	/* After switching from power-down to normal mode, an internal global

	 * reset is automatically generated. Wait a minimum of 1 ms before

	 * read/write access to the PHY registers.

 Enable PHY Interrupts */

 NOTE: clk may be NULL if building without CONFIG_HAVE_CLK */

 Support legacy board-file configuration */

	/* If autoneg is enabled, we won't be able to test cross pair

	 * short. In this case, the PHY will "detect" a link and

	 * confuse the internal state machine - disable auto neg here.

	 * If autoneg is disabled, we should set the speed to 10mbit.

	/* According to the data sheet the distance to the fault is

	 * DELTA_TIME * 0.4 meters.

	/* There is no way to choice the pair, like we do one ksz9031.

	 * We can workaround this limitation by using the MDI-X functionality.

	/* Now we are ready to fire. This command will send a 100ns pulse

	 * to the pair.

 Try harder if link partner is active */

		/* If link partner is in autonegotiation mode it will send 2ms

		 * of FLPs with at least 6ms of silence.

		 * Add 2ms sleep to have better chances to hit this silence.

 MDI-X setting for swap A,B transmit */

	/* Make sure that the PHY will not stop generating the clock when the

	 * link partner goes down

 PHY_BASIC_FEATURES */

 PHY_BASIC_FEATURES */

 PHY_BASIC_FEATURES */

 PHY_BASIC_FEATURES */

	/* No suspend/resume callbacks because of errata DS80000700A,

	 * receiver error following software power down.

 PHY_BASIC_FEATURES */

 PHY_BASIC_FEATURES */

 PHY_BASIC_FEATURES */

 PHY_BASIC_FEATURES */

 PHY_BASIC_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_BASIC_FEATURES */

 PHY_BASIC_FEATURES */

 PHY_BASIC_FEATURES */

 PHY_GBIT_FEATURES */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for the Texas Instruments DP83848 PHY

 *

 * Copyright (C) 2015-2016 Texas Instruments Incorporated - http://www.ti.com/

 Registers */

 MII Interrupt Control Register */

 MII Interrupt Status Register */

 MICR Register Fields */

 Interrupt Output Enable */

 Interrupt Enable */

 MISR Register Fields */

 Receive Error Counter */

 False Carrier Counter */

 Auto-negotiation complete */

 Duplex Status */

 Speed status */

 Link status */

 Energy detect */

 Link Quality Monitor */

	/* DP83620 always reports Auto Negotiation Ability on BMSR. Instead,

	 * we check initial value of BMCR Auto negotiation enable bit

 PHY_BASIC_FEATURES */			\

 IRQ related */				\

 SPDX-License-Identifier: GPL-2.0+

/*

 * drivers/net/phy/qsemi.c

 *

 * Driver for Quality Semiconductor PHYs

 *

 * Author: Andy Fleming

 *

 * Copyright (c) 2004 Freescale Semiconductor, Inc.

 ------------------------------------------------------------------------- */

 The Quality Semiconductor QS6612 is used on the RPX CLLF                  */

 register definitions */

 Mode Control Register      */

 Factory Test Register      */

 Misc. Control Register     */

 Interrupt Source Register  */

 Interrupt Mask Register    */

 100BaseTx PHY Control Reg. */

 Returns 0, unless there's a write error */

	/* The PHY powers up isolated on the RPX,

	 * so send a command to allow operation.

	 * XXX - My docs indicate this should be 0x0940

	 * ...or something.  The current value sets three

	 * reserved bits, bit 11, which specifies it should be

	 * set to one, bit 10, which specifies it should be set

	 * to 0, and bit 7, which doesn't specify.  However, my

	 * docs are preliminary, and I will leave it like this

	 * until someone more knowledgable corrects me or it.

	 * -- Andy Fleming

	/* The Interrupt Source register is not self-clearing, bits 4 and 5 are

	 * cleared when MII_BMSR is read and bits 1 and 3 are cleared when

	 * MII_EXPANSION is read

 clear any interrupts before enabling them */

 clear any leftover interrupts */

 the interrupt source register is not self-clearing */

 PHY_BASIC_FEATURES */

 SPDX-License-Identifier: GPL-2.0+

/*

 * mdio-boardinfo - Collect pre-declarations for MDIO devices

/**

 * mdiobus_setup_mdiodev_from_board_info - create and setup MDIO devices

 * from pre-collected board specific MDIO information

 * @bus: Bus the board_info belongs to

 * @cb: Callback to create device on bus

 * Context: can sleep

/**

 * mdiobus_register_board_info - register MDIO devices for a given board

 * @info: array of devices descriptors

 * @n: number of descriptors provided

 * Context: can sleep

 *

 * The board info passed can be marked with __initdata but be pointers

 * such as platform_data etc. are copied as-is

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for ICPlus PHYs

 *

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

 IP101A/G - IP1001 */

 Spec. Control Register */

 Add delay on RX_CLK */

 Add delay on TX_CLK */

 IP1001 Spec. Control Reg 2 */

 IP1001 APS Mode  bit */

 IP101A/G APS Mode bit */

 Conf Info IRQ & Status Reg */

 INTR pin used */

 IRQ's inactive */

/* The 32-pin IP101GR package can re-configure the mode of the RXER/INTR_32 pin

 * (pin number 21). The hardware default is RXER (receive error) mode. But it

 * can be configured to interrupt mode manually.

 master reset */

 ensure no bus delays overlap reset period */

 data sheet specifies reset period is 2 msec */

 enable IP175C mode */

 Set MII0 speed and duplex (in PHY mode) */

 reset switch ports */

 Enable Auto Power Saving mode */

 WAN port */

 Don't need to read status for switch ports */

 WAN port */

	/* Both functions (RX error and interrupt status) are sharing the same

	 * pin on the 32-pin IP101GR, so this is an exclusive choice.

 configure the RXER/INTR_32 pin of the 32-pin IP101GR if needed: */

		/* Don't touch IP101G_DIGITAL_IO_SPEC_CTRL because it's not

		 * documented on IP101A and it's not clear whether this would

		 * cause problems.

		 * For the 32-pin IP101GR we simply keep the SEL_INTR32

		 * configuration as set by the bootloader when not configured

		 * to one of the special functions.

 Enable Auto Power Saving mode */

 Enable the PHY counters */

 Clear error counters on read */

 INTR pin used: Speed/link/duplex will cause an interrupt */

/* The IP101A doesn't really have a page register. We just pretend to have one

 * so we can use the paged versions of the callbacks of the IP101G.

	/* The IP101A and the IP101G share the same PHY identifier.The IP101G

	 * seems to be a successor of the IP101A and implements more functions.

	 * Amongst other things there is a page select register, which is not

	 * available on the IP101A. Use this to distinguish these two.

 PHY_BASIC_FEATURES */

 PHY_GBIT_FEATURES */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Driver for Analog Devices Industrial Ethernet PHYs

 *

 * Copyright 2019 Analog Devices Inc.

/* EEE register addresses, accessible via Clause 22 access using

 * ADIN1300_MII_EXT_REG_PTR & ADIN1300_MII_EXT_REG_DATA.

 * The bit-fields are the same as specified by IEEE for EEE.

/*

 * The XSIM3/2/1 and XSHRT3/2/1 are actually relative.

 * For CDIAG_DTLD_RSLTS(0) it's ADIN1300_CDIAG_RSLT_XSIM3/2/1

 * For CDIAG_DTLD_RSLTS(1) it's ADIN1300_CDIAG_RSLT_XSIM3/2/0

 * For CDIAG_DTLD_RSLTS(2) it's ADIN1300_CDIAG_RSLT_XSIM3/1/0

 * For CDIAG_DTLD_RSLTS(3) it's ADIN1300_CDIAG_RSLT_XSIM2/1/0

 RGMII internal delay settings for rx and tx for ADIN1300 */

 RMII fifo depth values */

/**

 * struct adin_cfg_reg_map - map a config value to aregister value

 * @cfg:	value in device configuration

 * @reg:	value in the register

/**

 * struct adin_clause45_mmd_map - map to convert Clause 45 regs to Clause 22

 * @devad:		device address used in Clause 45 access

 * @cl45_regnum:	register address defined by Clause 45

 * @adin_regnum:	equivalent register address accessible via Clause 22

 hi + lo */

/**

 * struct adin_priv - ADIN PHY driver private data

 * @stats:		statistic counters for the PHY

 default is 1 second */

 1 second */

 Clear pending interrupts */

 If MDI/MDIX is forced, just read it from the control reg */

	/**

	 * Otherwise, we need to deduce it from the PHY status2 reg.

	 * When Auto-MDI is enabled, the ADIN1300_MAN_MDIX_EN bit implies

	 * a preference for MDIX when it is set.

 The reset bit is self-clearing, set it and wait */

 If we get a read error something may be wrong */

 latch copies of all the frame-checker counters */

 wait a bit for the clock to stabilize */

 short with other pairs */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Software PHY emulation

 *

 * Code taken from fixed_phy.c by Russell King.

 *

 * Author: Vitaly Bordug <vbordug@ru.mvista.com>

 *         Anton Vorontsov <avorontsov@ru.mvista.com>

 *

 * Copyright (c) 2006-2007 MontaVista Software, Inc.

/*

 * These two tables get bitwise-anded together to produce the final result.

 * This means the speed table must contain both duplex settings, and the

 * duplex table must contain all speed settings.

/**

 * swphy_validate_state - validate the software phy status

 * @state: software phy status

 *

 * This checks that we can represent the state stored in @state can be

 * represented in the emulated MII registers.  Returns 0 if it can,

 * otherwise returns -EINVAL.

/**

 * swphy_read_reg - return a MII register from the fixed phy state

 * @reg: MII register

 * @state: fixed phy status

 *

 * Return the MII @reg register generated from the fixed phy state @state.

	/*

	 * We do not support emulating Clause 45 over Clause 22 register

	 * reads.  Return an error instead of bogus data.

 SPDX-License-Identifier: GPL-2.0+

/*

 * drivers/net/phy/davicom.c

 *

 * Driver for Davicom PHYs

 *

 * Author: Andy Fleming

 *

 * Copyright (c) 2004 Freescale Semiconductor, Inc.

 DM9161 Interrupt Register */

 DM9161 10BT Configuration/Status */

 Isolate the PHY */

 Configure the new settings */

 Isolate the PHY */

 Do not bypass the scrambler/descrambler */

 Clear 10BTCSR to default */

 Reconnect the PHY, and enable Autonegotiation */

 PHY_BASIC_FEATURES */

 PHY_BASIC_FEATURES */

 PHY_BASIC_FEATURES */

 PHY_BASIC_FEATURES */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Fixed MDIO bus (MDIO bus emulation with fixed PHYs)

 *

 * Author: Vitaly Bordug <vbordug@ru.mvista.com>

 *         Anton Vorontsov <avorontsov@ru.mvista.com>

 *

 * Copyright (c) 2006-2007 MontaVista Software, Inc.

 Issue callback if user registered it. */

 Check the GPIO for change in status */

/*

 * If something weird is required to be done with link/speed,

 * network driver is able to assign a function to implement this.

 * May be useful for PHY's that need to be software-driven.

	/*

	 * As the fixed link is just a device tree node without any

	 * Linux device associated with it, we simply have obtain

	 * the GPIO descriptor from the device tree like this.

 Check if we have a GPIO associated with this fixed phy */

 Get the next available PHY address, up to PHY_MAX_ADDR */

 propagate the fixed link values to struct phy_device */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2015 Microchip Technology

 unmask all source and clear them before enable */

 Ack interrupts after they have been disabled */

 do not power down PHY when WOL is enabled */

 Save current page */

 Switch to TR page */

 Config control bits [15:13] of register */

 Clr [14:13] to write data in reg */

 Set [15] to Packet transmit */

 Wait for Data to be written */

	/* Get access to Channel 0x1, Node 0xF , Register 0x01.

	 * Write 24-bit value 0x12B00A to register. Setting MrvlTrFix1000Kf,

	 * MrvlTrFix1000Kp, MasterEnableTR bits.

	/* Get access to Channel b'10, Node b'1101, Register 0x06.

	 * Write 24-bit value 0xD2C46F to register. Setting SSTrKf1000Slv,

	 * SSTrKp1000Mas bits.

	/* Get access to Channel b'10, Node b'1111, Register 0x11.

	 * Write 24-bit value 0x620 to register. Setting rem_upd_done_thresh

	 * bits

	/* Get access to Channel b'10, Node b'1101, Register 0x10.

	 * Write 24-bit value 0xEEFFDD to register. Setting

	 * eee_TrKp1Long_1000, eee_TrKp2Long_1000, eee_TrKp3Long_1000,

	 * eee_TrKp1Short_1000,eee_TrKp2Short_1000, eee_TrKp3Short_1000 bits.

	/* Get access to Channel b'10, Node b'1101, Register 0x13.

	 * Write 24-bit value 0x071448 to register. Setting

	 * slv_lpi_tr_tmr_val1, slv_lpi_tr_tmr_val2 bits.

	/* Get access to Channel b'10, Node b'1101, Register 0x12.

	 * Write 24-bit value 0x13132F to register. Setting

	 * slv_sigdet_timer_val1, slv_sigdet_timer_val2 bits.

	/* Get access to Channel b'10, Node b'1101, Register 0x14.

	 * Write 24-bit value 0x0 to register. Setting eee_3level_delay,

	 * eee_TrKf_freeze_delay bits.

	/* Get access to Channel b'01, Node b'1111, Register 0x34.

	 * Write 24-bit value 0x91B06C to register. Setting

	 * FastMseSearchThreshLong1000, FastMseSearchThreshShort1000,

	 * FastMseSearchUpdGain1000 bits.

	/* Get access to Channel b'01, Node b'1111, Register 0x3E.

	 * Write 24-bit value 0xC0A028 to register. Setting

	 * FastMseKp2ThreshLong1000, FastMseKp2ThreshShort1000,

	 * FastMseKp2UpdGain1000, FastMseKp2ExitEn1000 bits.

	/* Get access to Channel b'01, Node b'1111, Register 0x35.

	 * Write 24-bit value 0x041600 to register. Setting

	 * FastMseSearchPhShNum1000, FastMseSearchClksPerPh1000,

	 * FastMsePhChangeDelay1000 bits.

	/* Get access to Channel b'10, Node b'1101, Register 0x03.

	 * Write 24-bit value 0x000004 to register. Setting TrFreeze bits.

 these values can be used to identify internal PHY */

Zerodetect delay enable */

 Config DSP registers */

 PHY_GBIT_FEATURES */

 SPDX-License-Identifier: GPL-2.0+

/* MDIO Bus interface

 *

 * Author: Andy Fleming

 *

 * Copyright (c) 2004 Freescale Semiconductor, Inc.

 Deassert the optional reset signal */

 Assert the reset signal */

/**

 * mdiobus_alloc_size - allocate a mii_bus structure

 * @size: extra amount of memory to allocate for private storage.

 * If non-zero, then bus->priv is points to that memory.

 *

 * Description: called by a bus driver to allocate an mii_bus

 * structure to fill in.

 If we alloc extra space, it should be aligned */

 Initialise the interrupts to polling and 64-bit seqcounts */

/**

 * mdiobus_release - mii_bus device release callback

 * @d: the target struct device that contains the mii_bus

 *

 * Description: called when the last reference to an mii_bus is

 * dropped, to free the underlying memory.

 for compatibility with error handling in drivers */

/**

 * mdio_find_bus - Given the name of a mdiobus, find the mii_bus.

 * @mdio_name: The name of a mdiobus.

 *

 * Returns a reference to the mii_bus, or NULL if none found.  The

 * embedded struct device will have its reference count incremented,

 * and this must be put_deviced'ed once the bus is finished with.

/**

 * of_mdio_find_bus - Given an mii_bus node, find the mii_bus.

 * @mdio_bus_np: Pointer to the mii_bus.

 *

 * Returns a reference to the mii_bus, or NULL if none found.  The

 * embedded struct device will have its reference count incremented,

 * and this must be put once the bus is finished with.

 *

 * Because the association of a device_node and mii_bus is made via

 * of_mdiobus_register(), the mii_bus cannot be found before it is

 * registered with of_mdiobus_register().

 *

/* Walk the list of subnodes of a mdio bus and look for a node that

 * matches the mdio device's address with its 'reg' property. If

 * found, set the of_node pointer for the mdio device. This allows

 * auto-probed phy devices to be supplied with information passed in

 * via DT.

 !IS_ENABLED(CONFIG_OF_MDIO) */

/**

 * mdiobus_create_device - create a full MDIO device given

 * a mdio_board_info structure

 * @bus: MDIO bus to create the devices on

 * @bi: mdio_board_info structure describing the devices

 *

 * Returns 0 on success or < 0 on error.

/**

 * __mdiobus_register - bring up all the PHYs on a given bus and attach them to bus

 * @bus: target mii_bus

 * @owner: module containing bus accessor functions

 *

 * Description: Called by a bus driver to bring up all the PHYs

 *   on a given bus, and attach them to the bus. Drivers should use

 *   mdiobus_register() rather than __mdiobus_register() unless they

 *   need to pass a specific owner module. MDIO devices which are not

 *   PHYs will not be brought up by this function. They are expected

 *   to be explicitly listed in DT and instantiated by of_mdiobus_register().

 *

 * Returns 0 on success or < 0 on error.

	/* We need to set state to MDIOBUS_UNREGISTERED to correctly release

	 * the device in mdiobus_free()

	 *

	 * State will be updated later in this function in case of success

 assert bus level PHY GPIO reset */

 Put PHYs in RESET to save power */

 Put PHYs in RESET to save power */

/**

 * mdiobus_free - free a struct mii_bus

 * @bus: mii_bus to free

 *

 * This function releases the reference to the underlying device

 * object in the mii_bus.  If this is the last reference, the mii_bus

 * will be freed.

 For compatibility with error handling in drivers. */

/**

 * mdiobus_scan - scan a bus for MDIO devices.

 * @bus: mii_bus to scan

 * @addr: address on bus to scan

 *

 * This function scans the MDIO bus, looking for devices which can be

 * identified using a vendor/product ID in registers 2 and 3. Not all

 * MDIO devices have such registers, but PHY devices typically

 * do. Hence this function assumes anything found is a PHY, or can be

 * treated as a PHY. Other MDIO devices, such as switches, will

 * probably not be found during the scan.

	/*

	 * For DT, see if the auto-probed phy has a correspoding child

	 * in the bus node, and set the of_node pointer in this case.

/**

 * __mdiobus_read - Unlocked version of the mdiobus_read function

 * @bus: the mii_bus struct

 * @addr: the phy address

 * @regnum: register number to read

 *

 * Read a MDIO bus register. Caller must hold the mdio bus lock.

 *

 * NOTE: MUST NOT be called from interrupt context.

/**

 * __mdiobus_write - Unlocked version of the mdiobus_write function

 * @bus: the mii_bus struct

 * @addr: the phy address

 * @regnum: register number to write

 * @val: value to write to @regnum

 *

 * Write a MDIO bus register. Caller must hold the mdio bus lock.

 *

 * NOTE: MUST NOT be called from interrupt context.

/**

 * __mdiobus_modify_changed - Unlocked version of the mdiobus_modify function

 * @bus: the mii_bus struct

 * @addr: the phy address

 * @regnum: register number to modify

 * @mask: bit mask of bits to clear

 * @set: bit mask of bits to set

 *

 * Read, modify, and if any change, write the register value back to the

 * device. Any error returns a negative number.

 *

 * NOTE: MUST NOT be called from interrupt context.

/**

 * mdiobus_read_nested - Nested version of the mdiobus_read function

 * @bus: the mii_bus struct

 * @addr: the phy address

 * @regnum: register number to read

 *

 * In case of nested MDIO bus access avoid lockdep false positives by

 * using mutex_lock_nested().

 *

 * NOTE: MUST NOT be called from interrupt context,

 * because the bus read/write functions may wait for an interrupt

 * to conclude the operation.

/**

 * mdiobus_read - Convenience function for reading a given MII mgmt register

 * @bus: the mii_bus struct

 * @addr: the phy address

 * @regnum: register number to read

 *

 * NOTE: MUST NOT be called from interrupt context,

 * because the bus read/write functions may wait for an interrupt

 * to conclude the operation.

/**

 * mdiobus_write_nested - Nested version of the mdiobus_write function

 * @bus: the mii_bus struct

 * @addr: the phy address

 * @regnum: register number to write

 * @val: value to write to @regnum

 *

 * In case of nested MDIO bus access avoid lockdep false positives by

 * using mutex_lock_nested().

 *

 * NOTE: MUST NOT be called from interrupt context,

 * because the bus read/write functions may wait for an interrupt

 * to conclude the operation.

/**

 * mdiobus_write - Convenience function for writing a given MII mgmt register

 * @bus: the mii_bus struct

 * @addr: the phy address

 * @regnum: register number to write

 * @val: value to write to @regnum

 *

 * NOTE: MUST NOT be called from interrupt context,

 * because the bus read/write functions may wait for an interrupt

 * to conclude the operation.

/**

 * mdiobus_modify - Convenience function for modifying a given mdio device

 *	register

 * @bus: the mii_bus struct

 * @addr: the phy address

 * @regnum: register number to write

 * @mask: bit mask of bits to clear

 * @set: bit mask of bits to set

/**

 * mdiobus_modify_changed - Convenience function for modifying a given mdio

 *	device register and returning if it changed

 * @bus: the mii_bus struct

 * @addr: the phy address

 * @regnum: register number to write

 * @mask: bit mask of bits to clear

 * @set: bit mask of bits to set

/**

 * mdio_bus_match - determine if given MDIO driver supports the given

 *		    MDIO device

 * @dev: target MDIO device

 * @drv: given MDIO driver

 *

 * Description: Given a MDIO device, and a MDIO driver, return 1 if

 *   the driver supports the device.  Otherwise, return 0. This may

 *   require calling the devices own match function, since different classes

 *   of MDIO devices have different match criteria.

 Both the driver and device must type-match */

 Some devices have extra OF data and an OF-style MODALIAS */

 no module_exit, intentional */

 SPDX-License-Identifier: GPL-2.0+

/*

 *    Copyright 2017 NXP

 *

 *    CORTINA is a registered trademark of Cortina Systems, Inc.

 *

 up when edc_convergedS set */

 Read device id from phy registers. */

	/* Make sure the device tree binding matched the driver with the

	 * right device.

 SPDX-License-Identifier: GPL-2.0-or-later

/**

 * devm_mdiobus_alloc_size - Resource-managed mdiobus_alloc_size()

 * @dev:		Device to allocate mii_bus for

 * @sizeof_priv:	Space to allocate for private structure

 *

 * Managed mdiobus_alloc_size. mii_bus allocated with this function is

 * automatically freed on driver detach.

 *

 * RETURNS:

 * Pointer to allocated mii_bus on success, NULL on out-of-memory error.

/**

 * __devm_mdiobus_register - Resource-managed variant of mdiobus_register()

 * @dev:	Device to register mii_bus for

 * @bus:	MII bus structure to register

 * @owner:	Owning module

 *

 * Returns 0 on success, negative error number on failure.

/**

 * devm_of_mdiobus_register - Resource managed variant of of_mdiobus_register()

 * @dev:	Device to register mii_bus for

 * @mdio:	MII bus structure to register

 * @np:		Device node to parse

 CONFIG_OF_MDIO */

 SPDX-License-Identifier: GPL-2.0+

/*

 * drivers/net/phy/ste10Xp.c

 *

 * Driver for STMicroelectronics STe10Xp PHYs

 *

 * Author: Giuseppe Cavallaro <peppe.cavallaro@st.com>

 *

 * Copyright (c) 2008 STMicroelectronics Limited

 Configuration Info IRQ & Status Reg */

 Interrupt Enable Register */

 ANE complete, Remote Fault, Link Down */

 Software Reset PHY */

 clear any pending interrupts */

 Enable all STe101P interrupts (PR12) */

 PHY_BASIC_FEATURES */

 PHY_BASIC_FEATURES */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for the Renesas PHY uPD60620.

 *

 * Copyright (C) 2015 Softing Industrial Automation GmbH

 Extended Registers and values */

 PHY Special Control/Status    */

 PHY.31 */

 PHY speed = 10mb */

 PHY speed = 100mb */

 PHY Duplex */

 PHY Special Modes */

 PHY.18 */

 Init PHY */

 Enable support for passive HUBs (could be a strap option) */

 PHYMODE: All speeds, HD in parallel detect */

 Get PHY status from common registers */

 Read negotiated state */

 PHY_BASIC_FEATURES */

 SPDX-License-Identifier: GPL-2.0+

 Copyright (C) 2016 National Instruments Corp. */

 SPDX-License-Identifier: GPL-2.0

/* Driver for the Texas Instruments DP83867 PHY

 *

 * Copyright (C) 2015 Texas Instruments Inc.

 Extended Registers */

 MICR Interrupt bits */

 RGMIICTL bits */

 SGMIICTL bits */

 RXFCFG bits*/

 STRAP_STS1 bits */

 STRAP_STS2 bits */

 PHY CTRL bits */

 RGMIIDCTL bits */

 IO_MUX_CFG bits */

 PHY STS bits */

 CFG2 bits */

 CFG3 bits */

 CFG4 bits */

 FLD_THR_CFG */

	/* Existing behavior was to use default pin strapping delay in rgmii

	 * mode, but rgmii should have meant no delay.  Warn existing users.

 RX delay *must* be specified if internal delay of RX is used. */

 TX delay *must* be specified if internal delay of TX is used. */

 Optional configuration */

 If not set, keep default */

		/* Valid values are 0 to DP83867_CLK_O_SEL_REF_CLK or

		 * DP83867_CLK_O_SEL_OFF.

 leave at default */

	/* For non-OF device, the RX and TX ID values are either strapped

	 * or take from default value. So, we init RX & TX ID values here

	 * so that the RGMIIDCTL is configured correctly later in

	 * dp83867_config_init();

	/* Per datasheet, IO impedance is default to 50-ohm, so we set the

	 * same here or else the default '0' means highest IO impedance

	 * which is wrong.

 CONFIG_OF_MDIO */

 Force speed optimization for the PHY even if it strapped */

 RX_DV/RX_CTRL strapped in mode 1 or mode 2 workaround */

		/* When using strap to enable FLD, the ENERGY_LOST_FLD_THR will

		 * be set to 0x2. This may causes the PHY link to be unstable -

		 * the default value 0x1 need to be restored.

		/* The code below checks if "port mirroring" N/A MODE4 has been

		 * enabled during power on bootstrap.

		 *

		 * Such N/A mode enabled by mistake can put PHY IC in some

		 * internal testing mode and disable RGMII transmission.

		 *

		 * In this particular case one needs to check STRAP_STS1

		 * register's bit 11 (marked as RESERVED).

		/* If rgmii mode with no internal delay is selected, we do NOT use

		 * aligned mode as one might expect.  Instead we use the PHY's default

		 * based on pin strapping.  And the "mode 0" default is to *use*

		 * internal delay with a value of 7 (2.00 ns).

		 *

		 * Set up RGMII delays

 If specified, set io impedance */

		/* For support SPEED_10 in SGMII mode

		 * DP83867_10M_SGMII_RATE_ADAPT bit

		 * has to be cleared by software. That

		 * does not affect SPEED_100 and

		 * SPEED_1000.

		/* After reset SGMII Autoneg timer is set to 2us (bits 6 and 5

		 * are 01). That is not enough to finalize autoneg on some

		 * devices. Increase this timer duration to maximum 16ms.

		/* SGMII type is set to 4-wire mode by default.

		 * If we place appropriate property in dts (see above)

		 * switch on 6-wire mode.

 Enable Interrupt output INT_OE in CFG3 register */

 Clock output selection if muxing property is set */

 PHY_GBIT_FEATURES */

 IRQ related */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2011 - 2012 Cavium, Inc.

/* Set and/or override some configuration registers based on the

 * broadcom,c45-reg-init property stored in the of_node for the phydev.

 *

 * broadcom,c45-reg-init = <devid reg mask value>,...;

 *

 * There may be one or more sets of <devid reg mask value>:

 *

 * devid: which sub-device to use.

 * reg: the register.

 * mask: if non-zero, ANDed with existing register value.

 * value: ORed with the masked value and written to the regiser.

 *

 CONFIG_OF_MDIO */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for AMD am79c PHYs

 *

 * Author: Heiko Schocher <hs@denx.de>

 *

 * Copyright (c) 2011 DENX Software Engineering GmbH

 Interrupt Status/Control Register */

 IR enable Linkstate */

 IR enable Aneg Complete */

 PHY_BASIC_FEATURES */

 SPDX-License-Identifier: GPL-2.0

/*

 * phylink models the MAC to optional PHY connection, supporting

 * technologies such as SFP cages where the PHY is hot-pluggable.

 *

 * Copyright (C) 2015 Russell King

/**

 * struct phylink - internal data type for phylink

 private: */

 bitmask of disables */

 PHY_INTERFACE_xxx */

 MLO_AN_xxx */

 The current non-phy ethtool port */

 The link configuration settings */

 The current settings */

/**

 * phylink_set_port_modes() - set the port type modes in the ethtool mask

 * @mask: ethtool link mode mask

 *

 * Sets all the port type modes in the ethtool mask.  MAC drivers should

 * use this in their 'validate' callback.

		/* We treat the "pause" and "asym-pause" terminology as

		 * defining the link partner's ability.

 Check if MAC/PCS also supports Autoneg. */

 If autoneg is disabled, pause AN is also disabled */

 Manual configuration of pause modes */

/*

 * Reconfigure for a change of inband advertisement.

 * If we have a separate PCS, we only need to call its pcs_config() method,

 * and then restart AN if it indicates something changed. Otherwise, we do

 * the full MAC reconfiguration.

 Legacy method */

	/* Modern PCS-based method; update the advert at the PCS, and

	 * restart negotiation if the pcs_config() helper indicates that

	 * the programmed advertisement has changed.

/* The fixed state is... fixed except for the link state,

 * which may be determined by a GPIO or a callback.

 can't happen */

			/* If we have a phy, the "up" state is the union of

			 * both the PHY and the MAC

 Only update if the PHY link is up */

				/* If we have a PHY, we need to update with

				 * the PHY flow control bits.

			/* The interface has changed, force the link down and

			 * then reconfigure.

			/* The interface remains unchanged, only the speed,

			 * duplex or pause settings have changed. Call the

			 * old mac_config() method to configure the MAC/PCS

			 * only if we do not have a PCS installed (an

			 * unconverted user.)

/**

 * phylink_create() - create a phylink instance

 * @config: a pointer to the target &struct phylink_config

 * @fwnode: a pointer to a &struct fwnode_handle describing the network

 *	interface

 * @iface: the desired link mode defined by &typedef phy_interface_t

 * @mac_ops: a pointer to a &struct phylink_mac_ops for the MAC.

 *

 * Create a new phylink instance, and parse the link parameters found in @np.

 * This will parse in-band modes, fixed-link or SFP configuration.

 *

 * Note: the rtnl lock must not be held when calling this function.

 *

 * Returns a pointer to a &struct phylink, or an error-pointer value. Users

 * must use IS_ERR() to check for errors from this function.

/**

 * phylink_set_pcs() - set the current PCS for phylink to use

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 * @pcs: a pointer to the &struct phylink_pcs

 *

 * Bind the MAC PCS to phylink.  This may be called after phylink_create(),

 * in mac_prepare() or mac_config() methods if it is desired to dynamically

 * change the PCS.

 *

 * Please note that there are behavioural changes with the mac_config()

 * callback if a PCS is present (denoting a newer setup) so removing a PCS

 * is not supported, and if a PCS is going to be used, it must be registered

 * by calling phylink_set_pcs() at the latest in the first mac_config() call.

/**

 * phylink_destroy() - cleanup and destroy the phylink instance

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 *

 * Destroy a phylink instance. Any PHY that has been attached must have been

 * cleaned up via phylink_disconnect_phy() prior to calling this function.

 *

 * Note: the rtnl lock must not be held when calling this function.

	/*

	 * This is the new way of dealing with flow control for PHYs,

	 * as described by Timur Tabi in commit 529ed1275263 ("net: phy:

	 * phy drivers should not set SUPPORTED_[Asym_]Pause") except

	 * using our validate call to the MAC, we rely upon the MAC

	 * clearing the bits from both supported and advertising fields.

	/* Clause 45 PHYs switch their Serdes lane between several different

	 * modes, normally 10GBASE-R, SGMII. Some use 2500BASE-X for 2.5G

	 * speeds. We really need to know which interface modes the PHY and

	 * MAC supports to properly work out which linkmodes can be supported.

 Restrict the phy advertisement according to the MAC support. */

/**

 * phylink_connect_phy() - connect a PHY to the phylink instance

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 * @phy: a pointer to a &struct phy_device.

 *

 * Connect @phy to the phylink instance specified by @pl by calling

 * phy_attach_direct(). Configure the @phy according to the MAC driver's

 * capabilities, start the PHYLIB state machine and enable any interrupts

 * that the PHY supports.

 *

 * This updates the phylink's ethtool supported and advertising link mode

 * masks.

 *

 * Returns 0 on success or a negative errno.

 Use PHY device/driver interface */

/**

 * phylink_of_phy_connect() - connect the PHY specified in the DT mode.

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 * @dn: a pointer to a &struct device_node.

 * @flags: PHY-specific flags to communicate to the PHY device driver

 *

 * Connect the phy specified in the device node @dn to the phylink instance

 * specified by @pl. Actions specified in phylink_connect_phy() will be

 * performed.

 *

 * Returns 0 on success or a negative errno.

/**

 * phylink_fwnode_phy_connect() - connect the PHY specified in the fwnode.

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 * @fwnode: a pointer to a &struct fwnode_handle.

 * @flags: PHY-specific flags to communicate to the PHY device driver

 *

 * Connect the phy specified @fwnode to the phylink instance specified

 * by @pl.

 *

 * Returns 0 on success or a negative errno.

 Fixed links and 802.3z are handled without needing a PHY */

 We're done with the phy_node handle */

/**

 * phylink_disconnect_phy() - disconnect any PHY attached to the phylink

 *   instance.

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 *

 * Disconnect any current PHY from the phylink instance described by @pl.

/**

 * phylink_mac_change() - notify phylink of a change in MAC state

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 * @up: indicates whether the link is currently up.

 *

 * The MAC driver should call this driver when the state of its link

 * changes (eg, link failure, new negotiation results, etc.)

/**

 * phylink_start() - start a phylink instance

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 *

 * Start the phylink instance specified by @pl, configuring the MAC for the

 * desired link mode(s) and negotiation style. This should be called from the

 * network device driver's &struct net_device_ops ndo_open() method.

 Always set the carrier off */

	/* Apply the link configuration to the MAC when starting. This allows

	 * a fixed-link to start with the correct parameters, and also

	 * ensures that we set the appropriate advertisement for Serdes links.

	 *

	 * Restart autonegotiation if using 802.3z to ensure that the link

	 * parameters are properly negotiated.  This is necessary for DSA

	 * switches using 802.3z negotiation to ensure they see our modes.

/**

 * phylink_stop() - stop a phylink instance

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 *

 * Stop the phylink instance specified by @pl. This should be called from the

 * network device driver's &struct net_device_ops ndo_stop() method.  The

 * network device's carrier state should not be changed prior to calling this

 * function.

 *

 * This will synchronously bring down the link if the link is not already

 * down (in other words, it will trigger a mac_link_down() method call.)

/**

 * phylink_suspend() - handle a network device suspend event

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 * @mac_wol: true if the MAC needs to receive packets for Wake-on-Lan

 *

 * Handle a network device suspend event. There are several cases:

 * - If Wake-on-Lan is not active, we can bring down the link between

 *   the MAC and PHY by calling phylink_stop().

 * - If Wake-on-Lan is active, and being handled only by the PHY, we

 *   can also bring down the link between the MAC and PHY.

 * - If Wake-on-Lan is active, but being handled by the MAC, the MAC

 *   still needs to receive packets, so we can not bring the link down.

 Wake-on-Lan enabled, MAC handling */

 Stop the resolver bringing the link up */

		/* Disable the carrier, to prevent transmit timeouts,

		 * but one would hope all packets have been sent. This

		 * also means phylink_resolve() will do nothing.

		/* We do not call mac_link_down() here as we want the

		 * link to remain up to receive the WoL packets.

/**

 * phylink_resume() - handle a network device resume event

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 *

 * Undo the effects of phylink_suspend(), returning the link to an

 * operational state.

 Wake-on-Lan enabled, MAC handling */

		/* Call mac_link_down() so we keep the overall state balanced.

		 * Do this under the state_mutex lock for consistency. This

		 * will cause a "Link Down" message to be printed during

		 * resume, which is harmless - the true link state will be

		 * printed when we run a resolve.

		/* Re-apply the link parameters so that all the settings get

		 * restored to the MAC.

 Re-enable and re-resolve the link parameters */

/**

 * phylink_ethtool_get_wol() - get the wake on lan parameters for the PHY

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 * @wol: a pointer to &struct ethtool_wolinfo to hold the read parameters

 *

 * Read the wake on lan parameters from the PHY attached to the phylink

 * instance specified by @pl. If no PHY is currently attached, report no

 * support for wake on lan.

/**

 * phylink_ethtool_set_wol() - set wake on lan parameters

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 * @wol: a pointer to &struct ethtool_wolinfo for the desired parameters

 *

 * Set the wake on lan parameters for the PHY attached to the phylink

 * instance specified by @pl. If no PHY is attached, returns %EOPNOTSUPP

 * error.

 *

 * Returns zero on success or negative errno code.

/**

 * phylink_ethtool_ksettings_get() - get the current link settings

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 * @kset: a pointer to a &struct ethtool_link_ksettings to hold link settings

 *

 * Read the current link settings for the phylink instance specified by @pl.

 * This will be the link settings read from the MAC, PHY or fixed link

 * settings depending on the current negotiation mode.

		/* We are using fixed settings. Report these as the

		 * current link settings - and note that these also

		 * represent the supported speeds/duplex/pause modes.

		/* If there is a phy attached, then use the reported

		 * settings from the phy with no modification.

		/* The MAC is reporting the link results from its own PCS

		 * layer via in-band status. Report these as the current

		 * link settings.

/**

 * phylink_ethtool_ksettings_set() - set the link settings

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 * @kset: a pointer to a &struct ethtool_link_ksettings for the desired modes

		/* We can rely on phylib for this update; we also do not need

		 * to update the pl->link_config settings:

		 * - the configuration returned via ksettings_get() will come

		 *   from phylib whenever a PHY is present.

		 * - link_config.interface will be updated by the PHY calling

		 *   back via phylink_phy_change() and a subsequent resolve.

		 * - initial link configuration for PHY mode comes from the

		 *   last phy state updated via phylink_phy_change().

		 * - other configuration changes (e.g. pause modes) are

		 *   performed directly via phylib.

		 * - if in in-band mode with a PHY, the link configuration

		 *   is passed on the link from the PHY, and all of

		 *   link_config.{speed,duplex,an_enabled,pause} are not used.

		 * - the only possible use would be link_config.advertising

		 *   pause modes when in 1000base-X mode with a PHY, but in

		 *   the presence of a PHY, this should not be changed as that

		 *   should be determined from the media side advertisement.

 Mask out unsupported advertisements */

 FIXME: should we reject autoneg if phy/mac does not support it? */

		/* Autonegotiation disabled, select a suitable speed and

		 * duplex.

		/* If we have a fixed link, refuse to change link parameters.

		 * If the link parameters match, accept them but do nothing.

		/* If we have a fixed link, allow autonegotiation (since that

		 * is our default case) but do not allow the advertisement to

		 * be changed. If the advertisement matches, simply return.

	/* We have ruled out the case with a PHY attached, and the

	 * fixed-link cases.  All that is left are in-band links.

	/* If this link is with an SFP, ensure that changes to advertised modes

	 * also cause the associated interface to be selected such that the

	 * link can be configured correctly.

 Revalidate with the selected interface */

 Validate without changing the current supported mask. */

 If autonegotiation is enabled, we must have an advertisement */

 The interface changed, e.g. 1000base-X <-> 2500base-X */

 We need to force the link down, then change the interface */

/**

 * phylink_ethtool_nway_reset() - restart negotiation

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 *

 * Restart negotiation for the phylink instance specified by @pl. This will

 * cause any attached phy to restart negotiation with the link partner, and

 * if the MAC is in a BaseX mode, the MAC will also be requested to restart

 * negotiation.

 *

 * Returns zero on success, or negative error code.

/**

 * phylink_ethtool_get_pauseparam() - get the current pause parameters

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 * @pause: a pointer to a &struct ethtool_pauseparam

/**

 * phylink_ethtool_set_pauseparam() - set the current pause parameters

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 * @pause: a pointer to a &struct ethtool_pauseparam

	/*

	 * See the comments for linkmode_set_pause(), wrt the deficiencies

	 * with the current implementation.  A solution to this issue would

	 * be:

	 * ethtool  Local device

	 *  rx  tx  Pause AsymDir

	 *  0   0   0     0

	 *  1   0   1     1

	 *  0   1   0     1

	 *  1   1   1     1

	 * and then use the ethtool rx/tx enablement status to mask the

	 * rx/tx pause resolution.

	/* Update our in-band advertisement, triggering a renegotiation if

	 * the advertisement changed.

	/* If we have a PHY, a change of the pause frame advertisement will

	 * cause phylib to renegotiate (if AN is enabled) which will in turn

	 * call our phylink_phy_change() and trigger a resolve.  Note that

	 * we can't hold our state mutex while calling phy_set_asym_pause().

	/* If the manual pause settings changed, make sure we trigger a

	 * resolve to update their state; we can not guarantee that the

	 * link will cycle.

/**

 * phylink_get_eee_err() - read the energy efficient ethernet error

 *   counter

 * @pl: a pointer to a &struct phylink returned from phylink_create().

 *

 * Read the Energy Efficient Ethernet error counter from the PHY associated

 * with the phylink instance specified by @pl.

 *

 * Returns positive error counter value, or negative error code.

/**

 * phylink_init_eee() - init and check the EEE features

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 * @clk_stop_enable: allow PHY to stop receive clock

 *

 * Must be called either with RTNL held or within mac_link_up()

/**

 * phylink_ethtool_get_eee() - read the energy efficient ethernet parameters

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 * @eee: a pointer to a &struct ethtool_eee for the read parameters

/**

 * phylink_ethtool_set_eee() - set the energy efficient ethernet parameters

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 * @eee: a pointer to a &struct ethtool_eee for the desired parameters

/* This emulates MII registers for a fixed-mode phy operating as per the

 * passed in state. "aneg" defines if we report negotiation is possible.

 *

 * FIXME: should deal with negotiation state too.

/**

 * phylink_mii_ioctl() - generic mii ioctl interface

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 * @ifr: a pointer to a &struct ifreq for socket ioctls

 * @cmd: ioctl cmd to execute

 *

 * Perform the specified MII ioctl on the PHY attached to the phylink instance

 * specified by @pl. If no PHY is attached, emulate the presence of the PHY.

 *

 * Returns: zero on success or negative error code.

 *

 * %SIOCGMIIPHY:

 *  read register from the current PHY.

 * %SIOCGMIIREG:

 *  read register from the specified PHY.

 * %SIOCSMIIREG:

 *  set a register on the specified PHY.

 PHYs only exist for MLO_AN_PHY and SGMII */

/**

 * phylink_speed_down() - set the non-SFP PHY to lowest speed supported by both

 *   link partners

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 * @sync: perform action synchronously

 *

 * If we have a PHY that is not part of a SFP module, then set the speed

 * as described in the phy_speed_down() function. Please see this function

 * for a description of the @sync parameter.

 *

 * Returns zero if there is no PHY, otherwise as per phy_speed_down().

/**

 * phylink_speed_up() - restore the advertised speeds prior to the call to

 *   phylink_speed_down()

 * @pl: a pointer to a &struct phylink returned from phylink_create()

 *

 * If we have a PHY that is not part of a SFP module, then restore the

 * PHY speeds as per phy_speed_up().

 *

 * Returns zero if there is no PHY, otherwise as per phy_speed_up().

 Ignore errors if we're expecting a PHY to attach later */

 If this module may have a PHY connecting later, defer until later */

 If this SFP module has a PHY, start the PHY now. */

	/* If the module may have a PHY but we didn't detect one we

	 * need to configure the MAC here.

 If this SFP module has a PHY, stop it. */

/* The Broadcom BCM84881 in the Methode DM7052 is unable to provide a SGMII

 * or 802.3z control word, so inband will not work.

	/*

	 * This is the new way of dealing with flow control for PHYs,

	 * as described by Timur Tabi in commit 529ed1275263 ("net: phy:

	 * phy drivers should not set SUPPORTED_[Asym_]Pause") except

	 * using our validate call to the MAC, we rely upon the MAC

	 * clearing the bits from both supported and advertising fields.

 Do the initial configuration */

 Helpers for MAC drivers */

/**

 * phylink_helper_basex_speed() - 1000BaseX/2500BaseX helper

 * @state: a pointer to a &struct phylink_link_state

 *

 * Inspect the interface mode, advertising mask or forced speed and

 * decide whether to run at 2.5Gbit or 1Gbit appropriately, switching

 * the interface mode to suit.  @state->interface is appropriately

 * updated, and the advertising mask has the "other" baseX_Full flag

 * cleared.

 negotiation failure */

/**

 * phylink_decode_usxgmii_word() - decode the USXGMII word from a MAC PCS

 * @state: a pointer to a struct phylink_link_state.

 * @lpa: a 16 bit value which stores the USXGMII auto-negotiation word

 *

 * Helper for MAC PCS supporting the USXGMII protocol and the auto-negotiation

 * code word.  Decode the USXGMII code word and populate the corresponding fields

 * (speed, duplex) into the phylink_link_state structure.

/**

 * phylink_mii_c22_pcs_get_state() - read the MAC PCS state

 * @pcs: a pointer to a &struct mdio_device.

 * @state: a pointer to a &struct phylink_link_state.

 *

 * Helper for MAC PCS supporting the 802.3 clause 22 register set for

 * clause 37 negotiation and/or SGMII control.

 *

 * Read the MAC PCS state from the MII device configured in @config and

 * parse the Clause 37 or Cisco SGMII link partner negotiation word into

 * the phylink @state structure. This is suitable to be directly plugged

 * into the mac_pcs_get_state() member of the struct phylink_mac_ops

 * structure.

	/* If there is no link or autonegotiation is disabled, the LP advertisement

	 * data is not meaningful, so don't go any further.

/**

 * phylink_mii_c22_pcs_set_advertisement() - configure the clause 37 PCS

 *	advertisement

 * @pcs: a pointer to a &struct mdio_device.

 * @interface: the PHY interface mode being configured

 * @advertising: the ethtool advertisement mask

 *

 * Helper for MAC PCS supporting the 802.3 clause 22 register set for

 * clause 37 negotiation and/or SGMII control.

 *

 * Configure the clause 37 PCS advertisement as specified by @state. This

 * does not trigger a renegotiation; phylink will do that via the

 * mac_an_restart() method of the struct phylink_mac_ops structure.

 *

 * Returns negative error code on failure to configure the advertisement,

 * zero if no change has been made, or one if the advertisement has changed.

 Nothing to do for other modes */

/**

 * phylink_mii_c22_pcs_config() - configure clause 22 PCS

 * @pcs: a pointer to a &struct mdio_device.

 * @mode: link autonegotiation mode

 * @interface: the PHY interface mode being configured

 * @advertising: the ethtool advertisement mask

 *

 * Configure a Clause 22 PCS PHY with the appropriate negotiation

 * parameters for the @mode, @interface and @advertising parameters.

 * Returns negative error number on failure, zero if the advertisement

 * has not changed, or positive if there is a change.

 Ensure ISOLATE bit is disabled */

/**

 * phylink_mii_c22_pcs_an_restart() - restart 802.3z autonegotiation

 * @pcs: a pointer to a &struct mdio_device.

 *

 * Helper for MAC PCS supporting the 802.3 clause 22 register set for

 * clause 37 negotiation.

 *

 * Restart the clause 37 negotiation with the link partner. This is

 * suitable to be directly plugged into the mac_pcs_get_state() member

 * of the struct phylink_mac_ops structure.

 SPDX-License-Identifier: GPL-2.0



 Support for generic time stamping devices on MII buses.

 Copyright (C) 2018 Richard Cochran <richardcochran@gmail.com>



/**

 * register_mii_tstamp_controller() - registers an MII time stamping device.

 *

 * @device:	The device to be registered.

 * @ctrl:	Pointer to device's control interface.

 *

 * Returns zero on success or non-zero on failure.

/**

 * unregister_mii_tstamp_controller() - unregisters an MII time stamping device.

 *

 * @device:	A device previously passed to register_mii_tstamp_controller().

/**

 * register_mii_timestamper - Enables a given port of an MII time stamper.

 *

 * @node:	The device tree node of the MII time stamp controller.

 * @port:	The index of the port to be enabled.

 *

 * Returns a valid interface on success or ERR_PTR otherwise.

/**

 * unregister_mii_timestamper - Disables a given MII time stamper.

 *

 * @mii_ts:	An interface obtained via register_mii_timestamper().

 *

	/* mii_timestamper statically registered by the PHY driver won't use the

	 * register_mii_timestamper() and thus don't have ->device set. Don't

	 * try to unregister these.

 SPDX-License-Identifier: GPL-2.0+

/*

 * drivers/net/phy/cicada.c

 *

 * Driver for Cicada PHYs

 *

 * Author: Andy Fleming

 *

 * Copyright (c) 2004 Freescale Semiconductor, Inc.

 Cicada Extended Control Register 1 */

 Cicada Interrupt Mask Register */

 Cicada Interrupt Status Register */

 Cicada Auxiliary Control/Status Register */

 Cicada 8201, a.k.a Vitesse VSC8201 */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Clause 45 PHY support

/**

 * genphy_c45_pma_can_sleep - checks if the PMA have sleep support

 * @phydev: target phy_device struct

/**

 * genphy_c45_pma_resume - wakes up the PMA module

 * @phydev: target phy_device struct

/**

 * genphy_c45_pma_suspend - suspends the PMA module

 * @phydev: target phy_device struct

/**

 * genphy_c45_pma_setup_forced - configures a forced speed

 * @phydev: target phy_device struct

 Half duplex is not supported */

	/*

	 * PMA/PMD type selection is 1.7.5:0 not 1.7.3:0.  See 45.2.1.6.1

	 * in 802.3-2012 and 802.3-2015.

 Assume 1000base-T */

 Assume 2.5Gbase-T */

 Assume 5Gbase-T */

 Assume 10Gbase-T */

/**

 * genphy_c45_an_config_aneg - configure advertisement registers

 * @phydev: target phy_device struct

 *

 * Configure advertisement registers based on modes set in phydev->advertising

 *

 * Returns negative errno code on failure, 0 if advertisement didn't change,

 * or 1 if advertised modes changed.

/**

 * genphy_c45_an_disable_aneg - disable auto-negotiation

 * @phydev: target phy_device struct

 *

 * Disable auto-negotiation in the Clause 45 PHY. The link parameters

 * are controlled through the PMA/PMD MMD registers.

 *

 * Returns zero on success, negative errno code on failure.

/**

 * genphy_c45_restart_aneg - Enable and restart auto-negotiation

 * @phydev: target phy_device struct

 *

 * This assumes that the auto-negotiation MMD is present.

 *

 * Enable and restart auto-negotiation.

/**

 * genphy_c45_check_and_restart_aneg - Enable and restart auto-negotiation

 * @phydev: target phy_device struct

 * @restart: whether aneg restart is requested

 *

 * This assumes that the auto-negotiation MMD is present.

 *

 * Check, and restart auto-negotiation if needed.

 Configure and restart aneg if it wasn't set before */

/**

 * genphy_c45_aneg_done - return auto-negotiation complete status

 * @phydev: target phy_device struct

 *

 * This assumes that the auto-negotiation MMD is present.

 *

 * Reads the status register from the auto-negotiation MMD, returning:

 * - positive if auto-negotiation is complete

 * - negative errno code on error

 * - zero otherwise

/**

 * genphy_c45_read_link - read the overall link status from the MMDs

 * @phydev: target phy_device struct

 *

 * Read the link status from the specified MMDs, and if they all indicate

 * that the link is up, set phydev->link to 1.  If an error is encountered,

 * a negative errno will be returned, otherwise zero.

		/* Autoneg is being started, therefore disregard current

		 * link status and report link as down.

		/* The link state is latched low so that momentary link

		 * drops can be detected. Do not double-read the status

		 * in polling mode to detect such short link drops except

		 * the link was already down.

/**

 * genphy_c45_read_lpa - read the link partner advertisement and pause

 * @phydev: target phy_device struct

 *

 * Read the Clause 45 defined base (7.19) and 10G (7.33) status registers,

 * filling in the link partner advertisement, pause and asym_pause members

 * in @phydev.  This assumes that the auto-negotiation MMD is present, and

 * the backplane bit (7.48.0) is clear.  Clause 45 PHY drivers are expected

 * to fill in the remainder of the link partner advert from vendor registers.

 Read the link partner's base page advertisement */

 Read the link partner's 10G advertisement */

/**

 * genphy_c45_read_pma - read link speed etc from PMA

 * @phydev: target phy_device struct

/**

 * genphy_c45_read_mdix - read mdix status from PMA

 * @phydev: target phy_device struct

/**

 * genphy_c45_pma_read_abilities - read supported link modes from PMA

 * @phydev: target phy_device struct

 *

 * Read the supported link modes from the PMA Status 2 (1.8) register. If bit

 * 1.8.9 is set, the list of supported modes is build using the values in the

 * PMA Extended Abilities (1.11) register, indicating 1000BASET an 10G related

 * modes. If bit 1.11.14 is set, then the list is also extended with the modes

 * in the 2.5G/5G PMA Extended register (1.21), indicating if 2.5GBASET and

 * 5GBASET are supported.

/**

 * genphy_c45_read_status - read PHY status

 * @phydev: target phy_device struct

 *

 * Reads status from PHY and sets phy_device members accordingly.

/**

 * genphy_c45_config_aneg - restart auto-negotiation or forced setup

 * @phydev: target phy_device struct

 *

 * Description: If auto-negotiation is enabled, we configure the

 *   advertising, and then restart auto-negotiation.  If it is not

 *   enabled, then we force a configuration.

 The gen10g_* functions are the old Clause 45 stub */

/**

 * genphy_c45_fast_retrain - configure fast retrain registers

 * @phydev: target phy_device struct

 * @enable: enable fast retrain or not

 *

 * Description: If fast-retrain is enabled, we configure PHY as

 *   advertising fast retrain capable and THP Bypass Request, then

 *   enable fast retrain. If it is not enabled, we configure fast

 *   retrain disabled.

 SPDX-License-Identifier: GPL-2.0+

/* Xilinx GMII2RGMII Converter driver

 *

 * Copyright (C) 2016 Xilinx, Inc.

 * Copyright (C) 2016 Andrew Lunn <andrew@lunn.ch>

 *

 * Author: Andrew Lunn <andrew@lunn.ch>

 * Author: Kedareswara rao Appana <appanad@xilinx.com>

 *

 * Description:

 * This driver is developed for Xilinx GMII2RGMII Converter

 SPDX-License-Identifier: GPL-2.0+

/* drivers/net/phy/realtek.c

 *

 * Driver for Realtek PHYs

 *

 * Author: Johnson Leung <r58129@freescale.com>

 *

 * Copyright (c) 2004 Freescale Semiconductor, Inc.

	/* Quirk was copied from vendor driver. Unfortunately it includes no

	 * description of the magic numbers.

 RTL8211C has an issue when operating in Gigabit slave mode */

 the rest of the modes imply leaving delay as is. */

 enable TX/RX delay for rgmii-* modes, and disable them for rgmii. */

 the rest of the modes imply leaving delays as is. */

	/* According to a sample driver there is a 0x1c config register on the

	 * 0xa4 extension page (0x7) layout. It can be used to disable/enable

	 * the RX/TX delays otherwise controlled by RXDLY/TXDLY pins.

	 * The configuration register definition:

	 * 14 = reserved

	 * 13 = Force Tx RX Delay controlled by bit12 bit11,

	 * 12 = RX Delay, 11 = TX Delay

	 * 10:0 = Test && debug settings reserved by realtek

 get actual speed to cover the downshift case */

 Internal PHY's from RTL8168h up may not be instantly ready */

		/* These interrupts are handled by the irq controller

		 * embedded inside the RTL8366RB, they get unmasked when the

		 * irq is requested and ACKed by reading the status register,

		 * which is done by the irqchip code.

 Interrupt handling analogous to RTL8366RB */

 SPDX-License-Identifier: GPL-2.0+

/*

 * drivers/net/phy/rockchip.c

 *

 * Driver for ROCKCHIP Ethernet PHYs

 *

 * Copyright (c) 2017, Fuzhou Rockchip Electronics Co., Ltd

 *

 * David Wu <david.wu@rock-chips.com>

 Enable access to Analog and DSP register banks */

 Back to basic register bank */

	/*

	 * Adjust tx amplitude to make sginal better,

	 * the default value is 0x8.

	/*

	 * The auto MIDX has linked problem on some board,

	 * workround to disable auto MDIX.

	/*

	 * If mode switch happens from 10BT to 100BT, all DSP/AFE

	 * registers are set to default values. So any AFE/DSP

	 * registers have to be re-initialized in this case.

 get the current settings */

 Set the new polarity value in the register */

 PHY_BASIC_FEATURES */

 SPDX-License-Identifier: GPL-2.0

/* NXP C45 PHY driver

 * Copyright (C) 2021 NXP

 * Author: Radu Pirea <radu-nicolae.pirea@oss.nxp.com>

 used to access the PTP registers atomic */

 Still more skbs in the queue */

	/* There is no need for ACK.

	 * The irq signal will be asserted until the EGR TS FIFO will be

	 * emptied.

	/* The delay in degree phase is 73.8 + phase_offset_raw * 0.9.

	 * To avoid floating point operations we'll multiply by 10

	 * and get 1 decimal point precision.

	/* Bug workaround for SJA1110 rev B: enable write access

	 * to MDIO_MMD_PMAPMD

sentinel*/ },

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for Teranetics PHY

 *

 * Author: Shaohui Xie <Shaohui.Xie@freescale.com>

 *

 * Copyright 2015 Freescale Semiconductor, Inc.

	/* auto negotiation state can only be checked when using copper

	 * port, if using fiber port, just lie it's done.

 SPDX-License-Identifier: GPL-2.0+

/*

 *	drivers/net/phy/broadcom.c

 *

 *	Broadcom BCM5411, BCM5421 and BCM5461 Gigabit Ethernet

 *	transceivers.

 *

 *	Copyright (c) 2006  Maciej W. Rozycki

 *

 *	Inspired by code written by Amy Fong.

 handling PHY's internal RX clock delay */

 Disable RGMII RXC-RXD skew */

 Enable RGMII RXC-RXD skew */

 handling PHY's internal TX clock delay */

 Disable internal TX clock delay */

 Enable internal TX clock delay */

 Enable CLK125 MUX on LED4 if ref clock is enabled. */

 Ensure proper interface mode is selected. */

 Disable RGMII mode */

 Select 1000BASE-X register set (primary SerDes) */

 Power down SerDes interface */

 Select proper interface mode */

 Power up SerDes interface */

 Select copper register set */

 Power up copper interface */

 Needs SMDSP clock enabled via bcm54xx_phydsp_config() */

 Enable the SMDSP clock */

 Clear bit 9 to fix a phy interop issue. */

 Disable the SMDSP clock */

 Return the first error reported. */

 Abort if we are using an untested phy. */

		/*

		 * Here, bit 0 _disables_ CLK125 when set.

		 * This bit is set by default.

 Here, bit 0 _enables_ CLK125 when set */

 Mask interrupts globally.  */

 Unmask events we are interested in.  */

 For BCM54810, we need to disable BroadR-Reach function */

	/* For non-SFP setups, encode link speed into LED1 and LED3 pair

	 * (green/amber).

	 * Also flash these two LEDs on activity. This means configuring

	 * them for MULTICOLOR and encoding link/activity into them.

	 * Don't do this for devices on an SFP module, since some of these

	 * use the LED outputs to control the SFP LOS signal, and changing

	 * these settings will cause LOS to malfunction.

	/* We cannot use a read/modify/write here otherwise the PHY gets into

	 * a bad state where its LEDs keep flashing, thus defeating the purpose

	 * of low power mode.

	/* Writes to register other than BMCR would be ignored

	 * unless we clear the PDOWN bit first

	/* Upon exiting power down, the PHY remains in an internal reset state

	 * for 40us

	/* Issue a soft reset after clearing the power down bit

	 * and before doing any other configuration.

 Disable BroadR-Reach function. */

 Enable CLK125 MUX on LED4 if ref clock is enabled. */

 Aneg firstly. */

 Then we can set up the delay. */

 Lane Swap - Undocumented register...magic! */

	/* The PHY is strapped in RGMII-fiber mode when INTERF_SEL[1:0]

	 * is 01b, and the link between PHY and its link partner can be

	 * either 1000Base-X or 100Base-FX.

	 * RGMII-1000Base-X is properly supported, but RGMII-100Base-FX

	 * support is still missing as of now.

		/* Bit 0 of the SerDes 100-FX Control register, when set

		 * to 1, sets the MII/RGMII -> 100BASE-FX configuration.

		 * When this bit is set to 0, it sets the GMII/RGMII ->

		 * 1000BASE-X configuration.

 Aneg firstly. */

 Then we can set up the delay. */

 Reset the PHY to bring it to a known state. */

 Unmask events we are interested in and mask interrupts globally. */

 Enable shadow register access */

 Set the LED mode */

 Enable auto MDIX */

 Enable auto power down */

 Disable shadow register access */

 Clear pending interrupts.  */

	/* Don't change the DAC wake settings if auto power down

	 * is not requested.

	/* Enable/disable 10BaseT auto and forced early DAC wake depending

	 * on the negotiated speed, those settings should only be done

	 * for 10Mbits/sec.

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_BASIC_FEATURES */

 PHY_BASIC_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 SPDX-License-Identifier: GPL-2.0+

/*

 * drivers/net/phy/marvell.c

 *

 * Driver for Marvell PHYs

 *

 * Author: Andy Fleming

 *

 * Copyright (c) 2004 Freescale Semiconductor, Inc.

 *

 * Copyright (c) 2013 Michael Stapelberg <michael@stapelberg.de>

 Copper Specific Interrupt Enable Register */

 WOL Event Interrupt Enable */

 LED Timer Control Register */

 Magic Packet MAC address registers */

 RGMII to copper */

 SGMII to copper */

 RGMII to 1000BASE-X */

 RGMII to 100BASE-FX */

 RGMII to SGMII */

 Soft reset */

/* For TDR measurements less than 11 meters, a short pulse should be

 * used.

 Clear the interrupts by reading the reg */

		/* A write to speed/duplex bits (that is performed by

		 * genphy_config_aneg() call above) must be followed by

		 * a software reset. Otherwise, the write has no effect.

	/* This Marvell PHY has an errata which requires

	 * that certain registers get written in order

	 * to restart autonegotiation

/* Set and/or override some configuration registers based on the

 * marvell,reg-init property stored in the of_node for the phydev.

 *

 * marvell,reg-init = <reg-page reg mask value>,...;

 *

 * There may be one or more sets of <reg-page reg mask value>:

 *

 * reg-page: which register bank to use.

 * reg: the register.

 * mask: if non-zero, ANDed with existing register value.

 * value: ORed with the masked value and written to the regiser.

 *

 CONFIG_OF_MDIO */

		/* A software reset is used to ensure a "commit" of the

		 * changes is done.

/**

 * linkmode_adv_to_fiber_adv_t

 * @advertise: the linkmode advertisement settings

 *

 * A small helper function that translates linkmode advertisement

 * settings to phy autonegotiation advertisements for the MII_ADV

 * register for fiber link.

/**

 * marvell_config_aneg_fiber - restart auto-negotiation or write BMCR

 * @phydev: target phy_device struct

 *

 * Description: If auto-negotiation is enabled, we configure the

 *   advertising, and then restart auto-negotiation.  If it is not

 *   enabled, then we write the BMCR. Adapted for fiber link in

 *   some Marvell's devices.

 Only allow advertising what this PHY supports */

 Setup fiber advertisement */

	/* If not using SGMII or copper 1000BaseX modes, use normal process.

	 * Steps below are only required for these modes.

 Configure the copper link first */

 Then the fiber link */

		/* Do not touch the fiber advertisement if we're in copper->sgmii mode.

		 * Just ensure that SGMII-side autonegotiation is enabled.

		 * If we switched from some other mode to SGMII it may not be.

 Configure the copper link first */

 Do not touch the fiber page if we're in copper->sgmii mode */

 Then the fiber link */

 Default PHY LED config: LED[0] .. Link, LED[1] .. Activity */

	/* Default PHY LED config:

	 * LED[0] .. 1000Mbps Link

	 * LED[1] .. 100Mbps Link

	 * LED[2] .. Blink, Activity

 Set default LED */

 Set registers from marvell,reg-init DT property */

 Enable Scrambler and Auto-Crossover */

 make sure copper is selected */

 soft reset */

 If using copper mode, ensure 1000BaseX auto-negotiation is enabled */

 SGMII-to-Copper mode initialization */

 Select page 18 */

 In reg 20, write MODE[2:0] = 0x1 (SGMII to Copper) */

 PHY reset is necessary after changing MODE[2:0] */

 Reset page selection */

 Change address */

 Enable 1000 Mbit */

 Change address */

 Adjust LED Control */

 Reset address */

 Change address */

 Enable 1000 Mbit */

 Reset address */

 36 ohm */

 39 ohm */

 Take care of errata E0 & E1 */

	/* According to the Marvell data sheet EEE must be disabled for

	 * Fast Link Down detection to work properly

/* The VOD can be out of specification on link up. Poke an

 * undocumented register, in an undocumented page, with a magic value

 * to fix this.

/**

 * fiber_lpa_mod_linkmode_lpa_t

 * @advertising: the linkmode advertisement settings

 * @lpa: value of the MII_LPA register for fiber link

 *

 * A small helper function that translates MII_LPA bits to linkmode LP

 * advertisement settings. Other bits in advertising are left

 * unchanged.

 The fiber link is only 1000M capable */

/* marvell_read_status_page

 *

 * Description:

 *   Check the link, then figure out the current state

 *   by comparing what we advertise with what the link partner

 *   advertises.  Start by checking the gigabit possibilities,

 *   then move on to 10/100.

	/* Use the generic register for copper link status,

	 * and the PHY status register for fiber link status.

/* marvell_read_status

 *

 * Some Marvell's phys have two modes: fiber and copper.

 * Both need status checked.

 * Description:

 *   First, check the fiber link and status.

 *   If the fiber link is down, check the copper link and status which

 *   will be the default value if both link are down.

 Check the fiber mode first */

		/* If the fiber link is up, it is the selected and

		 * used link. In this case, we need to stay in the

		 * fiber page. Please to be careful about that, avoid

		 * to restore Copper page in other functions which

		 * could break the behaviour for some fiber phy like

		 * 88E1512.

 If fiber link is down, check and save copper mode state */

/* marvell_suspend

 *

 * Some Marvell's phys have two modes: fiber and copper.

 * Both need to be suspended

 Suspend the fiber mode first */

 With the page set, use the generic suspend */

 Then, the copper link */

 With the page set, use the generic suspend */

/* marvell_resume

 *

 * Some Marvell's phys have two modes: fiber and copper.

 * Both need to be resumed

 Resume the fiber mode first */

 With the page set, use the generic resume */

 Then, the copper link */

 With the page set, use the generic resume */

 Explicitly switch to page 0x00, just to be sure */

		/* If WOL event happened once, the LED[2] interrupt pin

		 * will not be cleared unless we reading the interrupt status

		 * register. If interrupts are in use, the normal interrupt

		 * handling will clear the WOL event. Clear the WOL event

		 * before enabling it if !phy_interrupt_is_valid()

 Enable the WOL interrupt */

 Setup LED[2] as interrupt pin (active low) */

 Store the device address for the magic packet */

 Clear WOL status and enable magic packet matching */

 Clear WOL status and disable magic packet matching */

 Clear WOL status and enable link up event */

 Clear WOL status and disable link up event */

	/* Reading the TDR data is very MDIO heavy. We need to optimize

	 * access to keep the time to a minimum. So lock the bus once,

	 * and don't release it until complete. We can then avoid having

	 * to change the page for every access, greatly speeding things

	 * up.

	/* If auto-negotiation is enabled, but not complete, the cable

	 * test never completes. So disable auto-neg.

 If the link is up, allow it some time to go down */

	/* Reset the VCT5 API control to defaults, otherwise

	 * VCT7 does not work correctly.

 Disable  VCT7 */

 Enable temperature sensor */

 Wait for temperature to stabilize */

 Disable temperature sensor */

 convert to mC */

 Enable temperature sensor */

 Wait for temperature to stabilize */

	/* Reading the temperature sense has an errata. You need to read

	 * a number of times and take an average.

 Disable temperature sensor */

	/* 88E1510 measures T + 25, while the PHY on 88E6393X switch

	 * T + 75, so we have to subtract another 50

/* we can define HWMON_T_CRIT and HWMON_T_MAX_ALARM even though these are not

 * defined for all PHYs, because the hwmon code checks whether the attributes

 * exists via the .is_visible method

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_BASIC_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 SPDX-License-Identifier: GPL-2.0-only

/**

 * struct sfp_bus - internal representation of a sfp bus

 private: */

	/* Ubiquiti U-Fiber Instant module claims that support all transceiver

	 * types including 10G Ethernet which is not truth. So clear all claimed

	 * modes and set only one mode which module supports: 1000baseX_Full.

 Alcatel Lucent G-010S-P can operate at 2500base-X, but

 incorrectly report 2500MBd NRZ in their EEPROM

 Alcatel Lucent G-010S-A can operate at 2500base-X, but

 report 3.2GBd NRZ in their EEPROM

 Huawei MA5671A can operate at 2500base-X, but report 1.2GBd

 NRZ in their EEPROM

 Trailing characters should be filled with space chars */

/**

 * sfp_parse_port() - Parse the EEPROM base ID, setting the port type

 * @bus: a pointer to the &struct sfp_bus structure for the sfp module

 * @id: a pointer to the module's &struct sfp_eeprom_id

 * @support: optional pointer to an array of unsigned long for the

 *   ethtool support mask

 *

 * Parse the EEPROM identification given in @id, and return one of

 * %PORT_TP, %PORT_FIBRE or %PORT_OTHER. If @support is non-%NULL,

 * also set the ethtool %ETHTOOL_LINK_MODE_xxx_BIT corresponding with

 * the connector type.

 *

 * If the port type is not known, returns %PORT_OTHER.

 port is the physical connector, set this from the connector field. */

 guess */

/**

 * sfp_may_have_phy() - indicate whether the module may have a PHY

 * @bus: a pointer to the &struct sfp_bus structure for the sfp module

 * @id: a pointer to the module's &struct sfp_eeprom_id

 *

 * Parse the EEPROM identification given in @id, and return whether

 * this module may have a PHY.

/**

 * sfp_parse_support() - Parse the eeprom id for supported link modes

 * @bus: a pointer to the &struct sfp_bus structure for the sfp module

 * @id: a pointer to the module's &struct sfp_eeprom_id

 * @support: pointer to an array of unsigned long for the ethtool support mask

 *

 * Parse the EEPROM identification information and derive the supported

 * ethtool link modes for the module.

 Decode the bitrate information to MBd */

		/* When using passive cables, in case neither BR,min nor BR,max

		 * are specified, set br_min to 0 as the nominal value is then

		 * used as the maximum.

 Set ethtool support from the compliance fields. */

 1000Base-PX or 1000Base-BX10 */

 100Base-FX, 100Base-LX, 100Base-PX, 100Base-BX10 */

	/* For active or passive cables, select the link modes

	 * based on the bit rates and the cable compliance bytes.

 This may look odd, but some manufacturers use 12000MBd */

 For fibre channel SFP, derive possible BaseX modes */

	/* If we haven't discovered any modes that this module supports, try

	 * the bitrate to determine supported modes. Some BiDi modules (eg,

	 * 1310nm/1550nm) are not 1000BASE-BX compliant due to the differing

	 * wavelengths, so do not set any transceiver bits.

	 *

	 * Do the same for modules supporting 2500BASE-X. Note that some

	 * modules use 2500Mbaud rather than 3100 or 3200Mbaud for

	 * 2500BASE-X, so we allow some slack here.

/**

 * sfp_select_interface() - Select appropriate phy_interface_t mode

 * @bus: a pointer to the &struct sfp_bus structure for the sfp module

 * @link_modes: ethtool link modes mask

 *

 * Derive the phy_interface_t mode for the SFP module from the link

 * modes mask.

/**

 * sfp_bus_put() - put a reference on the &struct sfp_bus

 * @bus: the &struct sfp_bus found via sfp_bus_find_fwnode()

 *

 * Put a reference on the &struct sfp_bus and free the underlying structure

 * if this was the last reference.

/**

 * sfp_get_module_info() - Get the ethtool_modinfo for a SFP module

 * @bus: a pointer to the &struct sfp_bus structure for the sfp module

 * @modinfo: a &struct ethtool_modinfo

 *

 * Fill in the type and eeprom_len parameters in @modinfo for a module on

 * the sfp bus specified by @bus.

 *

 * Returns 0 on success or a negative errno number.

/**

 * sfp_get_module_eeprom() - Read the SFP module EEPROM

 * @bus: a pointer to the &struct sfp_bus structure for the sfp module

 * @ee: a &struct ethtool_eeprom

 * @data: buffer to contain the EEPROM data (must be at least @ee->len bytes)

 *

 * Read the EEPROM as specified by the supplied @ee. See the documentation

 * for &struct ethtool_eeprom for the region to be read.

 *

 * Returns 0 on success or a negative errno number.

/**

 * sfp_get_module_eeprom_by_page() - Read a page from the SFP module EEPROM

 * @bus: a pointer to the &struct sfp_bus structure for the sfp module

 * @page: a &struct ethtool_module_eeprom

 * @extack: extack for reporting problems

 *

 * Read an EEPROM page as specified by the supplied @page. See the

 * documentation for &struct ethtool_module_eeprom for the page to be read.

 *

 * Returns 0 on success or a negative errno number. More error

 * information might be provided via extack

/**

 * sfp_upstream_start() - Inform the SFP that the network device is up

 * @bus: a pointer to the &struct sfp_bus structure for the sfp module

 *

 * Inform the SFP socket that the network device is now up, so that the

 * module can be enabled by allowing TX_DISABLE to be deasserted. This

 * should be called from the network device driver's &struct net_device_ops

 * ndo_open() method.

/**

 * sfp_upstream_stop() - Inform the SFP that the network device is down

 * @bus: a pointer to the &struct sfp_bus structure for the sfp module

 *

 * Inform the SFP socket that the network device is now up, so that the

 * module can be disabled by asserting TX_DISABLE, disabling the laser

 * in optical modules. This should be called from the network device

 * driver's &struct net_device_ops ndo_stop() method.

/**

 * sfp_bus_find_fwnode() - parse and locate the SFP bus from fwnode

 * @fwnode: firmware node for the parent device (MAC or PHY)

 *

 * Parse the parent device's firmware node for a SFP bus, and locate

 * the sfp_bus structure, incrementing its reference count.  This must

 * be put via sfp_bus_put() when done.

 *

 * Returns:

 *	- on success, a pointer to the sfp_bus structure,

 *	- %NULL if no SFP is specified,

 *	- on failure, an error pointer value:

 *

 *	- corresponding to the errors detailed for

 *	  fwnode_property_get_reference_args().

 *	- %-ENOMEM if we failed to allocate the bus.

 *	- an error from the upstream's connect_phy() method.

/**

 * sfp_bus_add_upstream() - parse and register the neighbouring device

 * @bus: the &struct sfp_bus found via sfp_bus_find_fwnode()

 * @upstream: the upstream private data

 * @ops: the upstream's &struct sfp_upstream_ops

 *

 * Add upstream driver for the SFP bus, and if the bus is complete, register

 * the SFP bus using sfp_register_upstream().  This takes a reference on the

 * bus, so it is safe to put the bus after this call.

 *

 * Returns:

 *	- on success, a pointer to the sfp_bus structure,

 *	- %NULL if no SFP is specified,

 *	- on failure, an error pointer value:

 *

 *	- corresponding to the errors detailed for

 *	  fwnode_property_get_reference_args().

 *	- %-ENOMEM if we failed to allocate the bus.

 *	- an error from the upstream's connect_phy() method.

 If no bus, return success */

/**

 * sfp_bus_del_upstream() - Delete a sfp bus

 * @bus: a pointer to the &struct sfp_bus structure for the sfp module

 *

 * Delete a previously registered upstream connection for the SFP

 * module. @bus should have been added by sfp_bus_add_upstream().

 Socket driver entry points */

 SPDX-License-Identifier: GPL-2.0+

/**

 * linkmode_resolve_pause - resolve the allowable pause modes

 * @local_adv: local advertisement in ethtool format

 * @partner_adv: partner advertisement in ethtool format

 * @tx_pause: pointer to bool to indicate whether transmit pause should be

 * enabled.

 * @rx_pause: pointer to bool to indicate whether receive pause should be

 * enabled.

 *

 * Flow control is resolved according to our and the link partners

 * advertisements using the following drawn from the 802.3 specs:

 *  Local device  Link partner

 *  Pause AsymDir Pause AsymDir Result

 *    0     X       0     X     Disabled

 *    0     1       1     0     Disabled

 *    0     1       1     1     TX

 *    1     0       0     X     Disabled

 *    1     X       1     X     TX+RX

 *    1     1       0     1     RX

/**

 * linkmode_set_pause - set the pause mode advertisement

 * @advertisement: advertisement in ethtool format

 * @tx: boolean from ethtool struct ethtool_pauseparam tx_pause member

 * @rx: boolean from ethtool struct ethtool_pauseparam rx_pause member

 *

 * Configure the advertised Pause and Asym_Pause bits according to the

 * capabilities of provided in @tx and @rx.

 *

 * We convert as follows:

 *  tx rx  Pause AsymDir

 *  0  0   0     0

 *  0  1   1     1

 *  1  0   0     1

 *  1  1   1     0

 *

 * Note: this translation from ethtool tx/rx notation to the advertisement

 * is actually very problematical. Here are some examples:

 *

 * For tx=0 rx=1, meaning transmit is unsupported, receive is supported:

 *

 *  Local device  Link partner

 *  Pause AsymDir Pause AsymDir Result

 *    1     1       1     0     TX + RX - but we have no TX support.

 *    1     1       0     1	Only this gives RX only

 *

 * For tx=1 rx=1, meaning we have the capability to transmit and receive

 * pause frames:

 *

 *  Local device  Link partner

 *  Pause AsymDir Pause AsymDir Result

 *    1     0       0     1     Disabled - but since we do support tx and rx,

 *				this should resolve to RX only.

 *

 * Hence, asking for:

 *  rx=1 tx=0 gives Pause+AsymDir advertisement, but we may end up

 *            resolving to tx+rx pause or only rx pause depending on

 *            the partners advertisement.

 *  rx=0 tx=1 gives AsymDir only, which will only give tx pause if

 *            the partners advertisement allows it.

 *  rx=1 tx=1 gives Pause only, which will only allow tx+rx pause

 *            if the other end also advertises Pause.

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for Aquantia PHY

 *

 * Author: Shaohui Xie <Shaohui.Xie@freescale.com>

 *

 * Copyright 2015 Freescale Semiconductor, Inc.

 MDIO_MMD_C22EXT */

 Vendor specific 1, MDIO_MMD_VEND1 */

	/* Clause 45 has no standardized support for 1000BaseT, therefore

	 * use vendor registers for this mode.

 Clear any pending interrupts before enabling them */

 Clear any pending interrupts after we have disabled them */

 Read possibly downshifted rate from vendor register */

/* If we configure settings whilst firmware is still initializing the chip,

 * then these settings may be overwritten. Therefore make sure chip

 * initialization has completed. Use presence of the firmware ID as

 * indicator for initialization having completed.

 * The chip also provides a "reset completed" bit, but it's cleared after

 * read. Therefore function would time out if called again.

 Check that the PHY interface type is compatible */

 Check that the PHY interface type is compatible */

	/* AQCS109 belongs to a chip family partially supporting 10G and 5G.

	 * PMA speed ability bits are the same for all members of the family,

	 * AQCS109 however supports speeds up to 2.5G only.

 call failed or link partner is no Aquantia PHY */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for the National Semiconductor DP83640 PHYTER

 *

 * Copyright (C) 2010 OMICRON electronics GmbH

 phyter seems to miss the mark by 16 ns */

 jiffies */

 ns[15:0] */

 overflow[1:0], ns[29:16] */

 sec[15:0] */

 sec[31:16] */

 sequenceId[15:0] */

 messageType[3:0], hash[11:0] */

 ns[15:0] */

 overflow[1:0], ns[29:16] */

 sec[15:0] */

 sec[31:16] */

 remember state of cfg0 during calibration */

 remember the last event time stamp */

 list of rx timestamps */

 protects above three fields from concurrent access */

 queues of incoming and outgoing packets */

 keeps the instance in the 'phyter_clocks' list */

 we create one clock instance per MII bus */

 protects extended registers from concurrent access */

 remembers which page was last selected */

 our advertised capabilities */

 protects the three fields below from concurrent access */

 the one phyter from which we shall read */

 list of the other attached phyters, not chosen */

 reference to our PTP hardware clock */

 globals */

 a list of clocks and a mutex to protect it */

 extended register access functions */

 Caller must hold extreg_lock. */

 Caller must hold extreg_lock. */

 Caller must hold extreg_lock. */

 ns[15:0]  */

 ns[31:16] */

 sec[15:0] */

 sec[31:16]*/

 convert phy timestamps into driver timestamps */

load trigger*/

 ns[15:0] */

 ns[31:16] */

 sec[15:0] */

 sec[31:16] */

 ns[15:0] */

 ns[31:16] */

 Triggers 0 and 1 has programmable pulsewidth2 */

enable trigger*/

 ptp clock methods */

 ns[15:0] */

 ns[31:16] */

 sec[15:0] */

 sec[31:16] */

 Reject requests with unsupported flags */

 Reject requests to enable time stamping on both edges. */

 Reject requests with unsupported flags */

 Caller must hold rx_lock. */

 synchronize the phyters so they act as one clock */

	/*

	 * enable broadcast, disable status frames, enable ptp clock

	/*

	 * enable an event timestamp

	/*

	 * configure a trigger

 load trigger */

 enable trigger */

 disable trigger */

	/*

	 * read out and correct offsets

	/*

	 * restore status frames

 time stamping methods */

 calculate length of the event timestamp status message */

 check if enough data is available */

 Compensate for input path and synchronization delays */

 check sequenceID, messageType, 12 bit hash of offset 20-29 */

 We must already have the skb that triggered this. */

	/*

	 * Convert the module param defaults into a dynamic pin configuration.

	/*

	 * Get a reference to this bus instance.

/*

 * Look up and lock a clock by bus instance.

 * If there is no clock for this bus, then create it first.

	/* From DP83640 datasheet: "Software driver code must wait 3 us

	 * following a software reset before allowing further serial MII

	 * operations with the DP83640."

 Taking udelay inaccuracy into account */

 reserved for future extensions */

 Deliver expired packets. */

 PHY_BASIC_FEATURES */

 SPDX-License-Identifier: GPL-2.0+

/* Broadcom BCM54140 Quad SGMII/QSGMII Copper/Fiber Gigabit PHY

 *

 * Copyright (c) 2020 Michael Walle <michael@walle.cc>

/* RDB per-port registers

 interrupt status */

 interrupt mask */

 link status changed */

 link speed change */

 duplex mode changed */

 spare control 1 */

 link speed LED mode */

 spare control 2 */

 wirespeed retry disable */

 retry limit */

 spare control 3 */

 LED control */

 auto power down control */

 single pulse */

 ADP disable */

 ADP enable */

 ADP disable */

 ADP enable w/ aneg */

 sleep timer */

 2.7s */

 5.4s */

 copper power control */

 super isolate mode */

 misc copper control */

 wirespeed enable */

/* RDB global registers

 interrupt mask */

 monitor control */

 voltage mode */

 meassure temperature */

 meassure AVDDL 1.0V */

 meassure AVDDH 3.3V */

 meassure all round-robin */

 power-down monitor */

 temperature value */

 temperature high thresh */

 temperature low thresh */

 AVDDL 1.0V value */

 AVDDL 1.0V high thresh */

 AVDDL 1.0V low thresh */

 AVDDH 3.3V value */

 AVDDH 3.3V high thresh */

 AVDDH 3.3V low thresh */

 interrupt status */

 AVDDH 3.3V alarm */

 AVDDL 1.0V alarm */

 temperature alarm */

/* According to the datasheet the formula is:

 *   T = 413.35 - (0.49055 * bits[9:0])

/* According to the datasheet the formula is:

 *   U = bits[11:0] / 1024 * 220 / 0.2

 *

 * Normalized:

 *   U = bits[11:0] / 4096 * 2514

/* According to the datasheet the formula is:

 *   U = bits[10:0] / 1024 * 880 / 0.7

 *

 * Normalized:

 *   U = bits[10:0] / 2048 * 4400

/* This PHY has two different PHY IDs depening on its MODE_SEL pin. This

 * pin choses between 4x SGMII and QSGMII mode:

 *   AE02_5009 4x SGMII

 *   AE02_5019 QSGMII

 protect the alarm bits */

 latch any alarm bits */

 3.3V voltage mode */

 select round-robin */

 remove power-down bit */

 enable hardware monitoring */

/* Under some circumstances a core PLL may not lock, this will then prevent

 * a successful link establishment. Restart the PLL after the voltages are

 * stable to workaround this issue.

/* The BCM54140 is a quad PHY where only the first port has access to the

 * global register. Thus we need to find out its PHY address.

 *

	/* We scan forward and backwards and look for PHYs which have the

	 * same phy_id like we do. Step 1 will scan forward, step 2

	 * backwards. Once we are finished, we have a min_addr and

	 * max_addr which resembles the range of PHY addresses of the same

	 * type of PHY. There is one caveat; there may be many PHYs of

	 * the same type, but we know that each PHY takes exactly 4

	 * consecutive addresses. Therefore we can deduce our offset

	 * to the base address of this quad PHY.

 read the PHY id */

 see if it is still the same PHY */

	/* The range we get should be a multiple of four. Please note that both

	 * the min_addr and max_addr are inclusive. So we have to add one if we

	 * subtract them.

 Apply hardware errata */

 Unmask events we are interested in. */

 LED1=LINKSPD[1], LED2=LINKSPD[2], LED3=LINK/ACTIVITY */

 disable super isolate mode */

 clear pending interrupts */

 enable single pulse mode */

 set sleep timer */

 SPDX-License-Identifier: GPL-2.0+

/* Framework for configuring and reading PHY devices

 * Based on code in sungem_phy.c and gianfar_phy.c

 *

 * Author: Andy Fleming

 *

 * Copyright (c) 2004 Freescale Semiconductor, Inc.

 * Copyright (c) 2006, 2007  Maciej W. Rozycki

/**

 * phy_print_status - Convenience function to print out the current phy status

 * @phydev: the phy_device struct

/**

 * phy_config_interrupt - configure the PHY device for the requested interrupts

 * @phydev: the phy_device struct

 * @interrupts: interrupt flags to configure for this @phydev

 *

 * Returns 0 on success or < 0 on error.

/**

 * phy_restart_aneg - restart auto-negotiation

 * @phydev: target phy_device struct

 *

 * Restart the autonegotiation on @phydev.  Returns >= 0 on success or

 * negative errno on error.

/**

 * phy_aneg_done - return auto-negotiation status

 * @phydev: target phy_device struct

 *

 * Description: Return the auto-negotiation status from this @phydev

 * Returns > 0 on success or < 0 on error. 0 means that auto-negotiation

 * is still pending.

/**

 * phy_find_valid - find a PHY setting that matches the requested parameters

 * @speed: desired speed

 * @duplex: desired duplex

 * @supported: mask of supported link modes

 *

 * Locate a supported phy setting that is, in priority order:

 * - an exact match for the specified speed and duplex mode

 * - a match for the specified speed, or slower speed

 * - the slowest supported speed

 * Returns the matched phy_setting entry, or %NULL if no supported phy

 * settings were found.

/**

 * phy_supported_speeds - return all speeds currently supported by a phy device

 * @phy: The phy device to return supported speeds of.

 * @speeds: buffer to store supported speeds in.

 * @size:   size of speeds buffer.

 *

 * Description: Returns the number of supported speeds, and fills the speeds

 * buffer with the supported speeds. If speeds buffer is too small to contain

 * all currently supported speeds, will return as many speeds as can fit.

/**

 * phy_check_valid - check if there is a valid PHY setting which matches

 *		     speed, duplex, and feature mask

 * @speed: speed to match

 * @duplex: duplex to match

 * @features: A mask of the valid settings

 *

 * Description: Returns true if there is a valid setting, false otherwise.

/**

 * phy_sanitize_settings - make sure the PHY is set to supported speed and duplex

 * @phydev: the target phy_device struct

 *

 * Description: Make sure the PHY is set to supported speeds and

 *   duplexes.  Drop down by one in this order:  1000/FULL,

 *   1000/HALF, 100/FULL, 100/HALF, 10/FULL, 10/HALF.

 We failed to find anything (no supported speeds?) */

/**

 * phy_mii_ioctl - generic PHY MII ioctl interface

 * @phydev: the phy_device struct

 * @ifr: &struct ifreq for socket ioctl's

 * @cmd: ioctl cmd to execute

 *

 * Note that this function is currently incompatible with the

 * PHYCONTROL layer.  It changes registers without regard to

 * current state.  Use at own risk.

 do nothing */

/**

 * phy_do_ioctl - generic ndo_eth_ioctl implementation

 * @dev: the net_device struct

 * @ifr: &struct ifreq for socket ioctl's

 * @cmd: ioctl cmd to execute

/**

 * phy_do_ioctl_running - generic ndo_eth_ioctl implementation but test first

 *

 * @dev: the net_device struct

 * @ifr: &struct ifreq for socket ioctl's

 * @cmd: ioctl cmd to execute

 *

 * Same as phy_do_ioctl, but ensures that net_device is running before

 * handling the ioctl.

/**

 * phy_queue_state_machine - Trigger the state machine to run soon

 *

 * @phydev: the phy_device struct

 * @jiffies: Run the state machine after these jiffies

/**

 * phy_trigger_machine - Trigger the state machine to run now

 *

 * @phydev: the phy_device struct

/**

 * phy_ethtool_get_strings - Get the statistic counter names

 *

 * @phydev: the phy_device struct

 * @data: Where to put the strings

/**

 * phy_ethtool_get_sset_count - Get the number of statistic counters

 *

 * @phydev: the phy_device struct

/**

 * phy_ethtool_get_stats - Get the statistic counters

 *

 * @phydev: the phy_device struct

 * @stats: What counters to get

 * @data: Where to store the counters

/**

 * phy_start_cable_test - Start a cable test

 *

 * @phydev: the phy_device struct

 * @extack: extack for reporting useful error messages

 Mark the carrier down until the test is complete */

/**

 * phy_start_cable_test_tdr - Start a raw TDR cable test

 *

 * @phydev: the phy_device struct

 * @extack: extack for reporting useful error messages

 * @config: Configuration of the test to run

 Mark the carrier down until the test is complete */

	/* Clause 45 PHYs that don't implement Clause 22 registers are not

	 * allowed to call genphy_config_aneg()

/**

 * phy_check_link_status - check link status and set state accordingly

 * @phydev: the phy_device struct

 *

 * Description: Check for link and whether autoneg was triggered / is running

 * and set state accordingly

	/* Keep previous state if loopback is enabled because some PHYs

	 * report that Link is Down when loopback is enabled.

/**

 * _phy_start_aneg - start auto-negotiation for this PHY device

 * @phydev: the phy_device struct

 *

 * Description: Sanitizes the settings (if we're not autonegotiating

 *   them), and then calls the driver's config_aneg function.

 *   If the PHYCONTROL Layer is operating, we change the state to

 *   reflect the beginning of Auto-negotiation or forcing.

/**

 * phy_start_aneg - start auto-negotiation for this PHY device

 * @phydev: the phy_device struct

 *

 * Description: Sanitizes the settings (if we're not autonegotiating

 *   them), and then calls the driver's config_aneg function.

 *   If the PHYCONTROL Layer is operating, we change the state to

 *   reflect the beginning of Auto-negotiation or forcing.

 We make sure that we don't pass unsupported values in to the PHY */

 Verify the settings we care about. */

 Restart the PHY */

/**

 * phy_speed_down - set speed to lowest speed supported by both link partners

 * @phydev: the phy_device struct

 * @sync: perform action synchronously

 *

 * Description: Typically used to save energy when waiting for a WoL packet

 *

 * WARNING: Setting sync to false may cause the system being unable to suspend

 * in case the PHY generates an interrupt when finishing the autonegotiation.

 * This interrupt may wake up the system immediately after suspend.

 * Therefore use sync = false only if you're sure it's safe with the respective

 * network chip.

/**

 * phy_speed_up - (re)set advertised speeds to all supported speeds

 * @phydev: the phy_device struct

 *

 * Description: Used to revert the effect of phy_speed_down

/**

 * phy_start_machine - start PHY state machine tracking

 * @phydev: the phy_device struct

 *

 * Description: The PHY infrastructure can run a state machine

 *   which tracks whether the PHY is starting up, negotiating,

 *   etc.  This function starts the delayed workqueue which tracks

 *   the state of the PHY. If you want to maintain your own state machine,

 *   do not call this function.

/**

 * phy_stop_machine - stop the PHY state machine tracking

 * @phydev: target phy_device struct

 *

 * Description: Stops the state machine delayed workqueue, sets the

 *   state to UP (unless it wasn't up yet). This function must be

 *   called BEFORE phy_detach.

/**

 * phy_error - enter HALTED state for this PHY device

 * @phydev: target phy_device struct

 *

 * Moves the PHY to the HALTED state in response to a read

 * or write error, and tells the controller the link is down.

 * Must not be called from interrupt context, or while the

 * phydev->lock is held.

/**

 * phy_disable_interrupts - Disable the PHY interrupts from the PHY side

 * @phydev: target phy_device struct

 Disable PHY interrupts */

/**

 * phy_interrupt - PHY interrupt handler

 * @irq: interrupt line

 * @phy_dat: phy_device pointer

 *

 * Description: Handle PHY interrupt

/**

 * phy_enable_interrupts - Enable the interrupts from the PHY side

 * @phydev: target phy_device struct

/**

 * phy_request_interrupt - request and enable interrupt for a PHY device

 * @phydev: target phy_device struct

 *

 * Description: Request and enable the interrupt for the given PHY.

 *   If this fails, then we set irq to PHY_POLL.

 *   This should only be called with a valid IRQ number.

/**

 * phy_free_interrupt - disable and free interrupt for a PHY device

 * @phydev: target phy_device struct

 *

 * Description: Disable and free the interrupt for the given PHY.

 *   This should only be called with a valid IRQ number.

/**

 * phy_stop - Bring down the PHY link, and stop checking the status

 * @phydev: target phy_device struct

	/* Cannot call flush_scheduled_work() here as desired because

	 * of rtnl_lock(), but PHY_HALTED shall guarantee irq handler

	 * will not reenable interrupts.

/**

 * phy_start - start or restart a PHY device

 * @phydev: target phy_device struct

 *

 * Description: Indicates the attached device's readiness to

 *   handle PHY-related work.  Used during startup to start the

 *   PHY, and after a call to phy_stop() to resume operation.

 *   Also used to indicate the MDIO bus has cleared an error

 *   condition.

 if phy was suspended, bring the physical link up again */

/**

 * phy_state_machine - Handle the state machine

 * @work: work_struct that describes the work to be done

	/* Only re-schedule a PHY state machine change if we are polling the

	 * PHY, if PHY_MAC_INTERRUPT is set, then we will be moving

	 * between states from phy_mac_interrupt().

	 *

	 * In state PHY_HALTED the PHY gets suspended, so rescheduling the

	 * state machine would be pointless and possibly error prone when

	 * called from phy_disconnect() synchronously.

/**

 * phy_mac_interrupt - MAC says the link has changed

 * @phydev: phy_device struct with changed link

 *

 * The MAC layer is able to indicate there has been a change in the PHY link

 * status. Trigger the state machine and work a work queue.

 Trigger a state machine change */

/**

 * phy_init_eee - init and check the EEE feature

 * @phydev: target phy_device struct

 * @clk_stop_enable: PHY may stop the clock during LPI

 *

 * Description: it checks if the Energy-Efficient Ethernet (EEE)

 * is supported by looking at the MMD registers 3.20 and 7.60/61

 * and it programs the MMD register 3.0 setting the "Clock stop enable"

 * bit if required.

	/* According to 802.3az,the EEE is supported only in full duplex-mode.

 Read phy status to properly get the right settings */

 First check if the EEE ability is supported */

		/* Check which link settings negotiated and verify it in

		 * the EEE advertising registers.

			/* Configure the PHY to stop receiving xMII

			 * clock while it is signaling LPI.

 EEE supported */

/**

 * phy_get_eee_err - report the EEE wake error count

 * @phydev: target phy_device struct

 *

 * Description: it is to report the number of time where the PHY

 * failed to complete its normal wake sequence.

/**

 * phy_ethtool_get_eee - get EEE supported and status

 * @phydev: target phy_device struct

 * @data: ethtool_eee data

 *

 * Description: it reportes the Supported/Advertisement/LP Advertisement

 * capabilities.

 Get Supported EEE */

 Get advertisement EEE */

 Get LP advertisement EEE */

/**

 * phy_ethtool_set_eee - set EEE supported and status

 * @phydev: target phy_device struct

 * @data: ethtool_eee data

 *

 * Description: it is to program the Advertisement EEE register.

 Get Supported EEE */

 Mask prohibited EEE modes */

		/* Restart autonegotiation so the new modes get sent to the

		 * link partner.

/**

 * phy_ethtool_set_wol - Configure Wake On LAN

 *

 * @phydev: target phy_device struct

 * @wol: Configuration requested

/**

 * phy_ethtool_get_wol - Get the current Wake On LAN configuration

 *

 * @phydev: target phy_device struct

 * @wol: Store the current configuration here

/**

 * phy_ethtool_nway_reset - Restart auto negotiation

 * @ndev: Network device to restart autoneg for

 SPDX-License-Identifier: GPL-2.0+

/* Copyright (C) 2021 Maxlinear Corporation

 * Copyright (C) 2020 Intel Corporation

 *

 * Drivers for Maxlinear Ethernet GPY

 *

 PHY ID */

 MII state */

 interrupt mask */

 interrupt status */

 firmware version */

 Wake-on-LAN */

 Auto-Neg complete */

 Link auto-downspeed detect */

 Duplex mode change */

 Link speed change */

 Link state change */

 SGMII */

 Aneg enable */

 Restart Aneg */

 WoL */

 Mask all interrupts */

 Clear all pending interrupts */

 Show GPY PHY FW version in dmesg */

		/* Configure half duplex with genphy_setup_forced,

		 * because genphy_c45_pma_setup_forced does not support.

	/* No need to trigger re-ANEG if link speed is 2.5G or SGMII ANEG is

	 * disabled.

	/* There is a design constraint in GPY2xx device where SGMII AN is

	 * only triggered when there is change of speed. If, PHY link

	 * partner`s speed is still same even after PHY TPI is down and up

	 * again, SGMII AN is not triggered and hence no new in-band message

	 * from GPY to MAC side SGMII.

	 * This could cause an issue during power up, when PHY is up prior to

	 * MAC. At this condition, once MAC side SGMII is up, MAC side SGMII

	 * wouldn`t receive new in-band message from GPY with correct link

	 * status, speed and duplex info.

	 *

	 * 1) If PHY is already up and TPI link status is still down (such as

	 *    hard reboot), TPI link status is polled for 4 seconds before

	 *    retriggerring SGMII AN.

	 * 2) If PHY is already up and TPI link status is also up (such as soft

	 *    reboot), polling of TPI link status is not needed and SGMII AN is

	 *    immediately retriggered.

	 * 3) Other conditions such as PHY is down, speed change etc, skip

	 *    retriggering SGMII AN. Note: in case of speed change, GPY FW will

	 *    initiate SGMII AN.

 Trigger SGMII AN. */

 Interface mode is fixed for USXGMII and integrated PHY */

	/* Automatically switch SERDES interface between SGMII and 2500-BaseX

	 * according to speed. Disable ANEG in 2500-BaseX mode.

		/* Enable and restart SGMII ANEG for 10/100/1000Mbps link speed

		 * if ANEG is disabled (in 2500-BaseX mode).

 Read the link partner's 1G advertisement */

		/* MAC address - Byte0:Byte1:Byte2:Byte3:Byte4:Byte5

		 * VPSPEC2_WOL_AD45 = Byte0:Byte1

		 * VPSPEC2_WOL_AD23 = Byte2:Byte3

		 * VPSPEC2_WOL_AD01 = Byte4:Byte5

 Enable the WOL interrupt */

 Enable magic packet matching */

		/* Clear the interrupt status register.

		 * Only WoL is enabled so clear all.

 Disable magic packet matching */

 Enable the link state change interrupt */

 Clear the interrupt status register */

 Disable the link state change interrupt */

		/* It takes some time for PHY device to switch

		 * into/out-of loopback mode.

 SPDX-License-Identifier: GPL-2.0+

 Disable EEE */

 Enable HW auto downshift */

 Increase SlvDPSready time */

 Adjust 100_mse_threshold */

 Disable mcc */

 Increase post_update_timer */

 PHY link down power saving enable */

 Set TX Pair delay selection */

		/* Interrupts are handled by the switch, not the PHY

		 * itself.

		/* Interrupts are handled by the switch, not the PHY

		 * itself.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Core PHY library, taken from phy.c

/**

 * phy_speed_to_str - Return a string representing the PHY link speed

 *

 * @speed: Speed of the link

/**

 * phy_duplex_to_str - Return string describing the duplex

 *

 * @duplex: Duplex setting to describe

/* A mapping of all SUPPORTED settings to speed/duplex.  This table

 * must be grouped by speed and sorted in descending match priority

 * - iow, descending speed.

 400G */

 200G */

 100G */

 56G */

 50G */

 40G */

 25G */

 20G */

 10G */

 5G */

 2.5G */

 1G */

 100M */

 10M */

/**

 * phy_lookup_setting - lookup a PHY setting

 * @speed: speed to match

 * @duplex: duplex to match

 * @mask: allowed link modes

 * @exact: an exact match is required

 *

 * Search the settings array for a setting that matches the speed and

 * duplex, and which is supported.

 *

 * If @exact is unset, either an exact match or %NULL for no match will

 * be returned.

 *

 * If @exact is set, an exact match, the fastest supported setting at

 * or below the specified speed, the slowest supported setting, or if

 * they all fail, %NULL will be returned.

 Exact match for speed and duplex */

 Candidate */

/**

 * phy_set_max_speed - Set the maximum speed the PHY should support

 *

 * @phydev: The phy_device struct

 * @max_speed: Maximum speed

 *

 * The PHY might be more capable than the MAC. For example a Fast Ethernet

 * is connected to a 1G PHY. This function allows the MAC to indicate its

 * maximum speed, and so limit what the PHY will advertise.

/**

 * phy_resolve_aneg_pause - Determine pause autoneg results

 *

 * @phydev: The phy_device struct

 *

 * Once autoneg has completed the local pause settings can be

 * resolved.  Determine if pause and asymmetric pause should be used

 * by the MAC.

/**

 * phy_resolve_aneg_linkmode - resolve the advertisements into PHY settings

 * @phydev: The phy_device struct

 *

 * Resolve our and the link partner advertisements into their corresponding

 * speed and duplex. If full duplex was negotiated, extract the pause mode

 * from the link partner mask.

/**

 * phy_check_downshift - check whether downshift occurred

 * @phydev: The phy_device struct

 *

 * Check whether a downshift to a lower speed occurred. If this should be the

 * case warn the user.

 * Prerequisite for detecting downshift is that PHY driver implements the

 * read_status callback and sets phydev->speed to the actual link speed.

 Write the desired MMD Devad */

 Write the desired MMD register address */

 Select the Function : DATA with no post increment */

/**

 * __phy_read_mmd - Convenience function for reading a register

 * from an MMD on a given PHY.

 * @phydev: The phy_device struct

 * @devad: The MMD to read from (0..31)

 * @regnum: The register on the MMD to read (0..65535)

 *

 * Same rules as for __phy_read();

 Read the content of the MMD's selected register */

/**

 * phy_read_mmd - Convenience function for reading a register

 * from an MMD on a given PHY.

 * @phydev: The phy_device struct

 * @devad: The MMD to read from

 * @regnum: The register on the MMD to read

 *

 * Same rules as for phy_read();

/**

 * __phy_write_mmd - Convenience function for writing a register

 * on an MMD on a given PHY.

 * @phydev: The phy_device struct

 * @devad: The MMD to read from

 * @regnum: The register on the MMD to read

 * @val: value to write to @regnum

 *

 * Same rules as for __phy_write();

 Write the data into MMD's selected register */

/**

 * phy_write_mmd - Convenience function for writing a register

 * on an MMD on a given PHY.

 * @phydev: The phy_device struct

 * @devad: The MMD to read from

 * @regnum: The register on the MMD to read

 * @val: value to write to @regnum

 *

 * Same rules as for phy_write();

/**

 * phy_modify_changed - Function for modifying a PHY register

 * @phydev: the phy_device struct

 * @regnum: register number to modify

 * @mask: bit mask of bits to clear

 * @set: new value of bits set in mask to write to @regnum

 *

 * NOTE: MUST NOT be called from interrupt context,

 * because the bus read/write functions may wait for an interrupt

 * to conclude the operation.

 *

 * Returns negative errno, 0 if there was no change, and 1 in case of change

/**

 * __phy_modify - Convenience function for modifying a PHY register

 * @phydev: the phy_device struct

 * @regnum: register number to modify

 * @mask: bit mask of bits to clear

 * @set: new value of bits set in mask to write to @regnum

 *

 * NOTE: MUST NOT be called from interrupt context,

 * because the bus read/write functions may wait for an interrupt

 * to conclude the operation.

/**

 * phy_modify - Convenience function for modifying a given PHY register

 * @phydev: the phy_device struct

 * @regnum: register number to write

 * @mask: bit mask of bits to clear

 * @set: new value of bits set in mask to write to @regnum

 *

 * NOTE: MUST NOT be called from interrupt context,

 * because the bus read/write functions may wait for an interrupt

 * to conclude the operation.

/**

 * __phy_modify_mmd_changed - Function for modifying a register on MMD

 * @phydev: the phy_device struct

 * @devad: the MMD containing register to modify

 * @regnum: register number to modify

 * @mask: bit mask of bits to clear

 * @set: new value of bits set in mask to write to @regnum

 *

 * Unlocked helper function which allows a MMD register to be modified as

 * new register value = (old register value & ~mask) | set

 *

 * Returns negative errno, 0 if there was no change, and 1 in case of change

/**

 * phy_modify_mmd_changed - Function for modifying a register on MMD

 * @phydev: the phy_device struct

 * @devad: the MMD containing register to modify

 * @regnum: register number to modify

 * @mask: bit mask of bits to clear

 * @set: new value of bits set in mask to write to @regnum

 *

 * NOTE: MUST NOT be called from interrupt context,

 * because the bus read/write functions may wait for an interrupt

 * to conclude the operation.

 *

 * Returns negative errno, 0 if there was no change, and 1 in case of change

/**

 * __phy_modify_mmd - Convenience function for modifying a register on MMD

 * @phydev: the phy_device struct

 * @devad: the MMD containing register to modify

 * @regnum: register number to modify

 * @mask: bit mask of bits to clear

 * @set: new value of bits set in mask to write to @regnum

 *

 * NOTE: MUST NOT be called from interrupt context,

 * because the bus read/write functions may wait for an interrupt

 * to conclude the operation.

/**

 * phy_modify_mmd - Convenience function for modifying a register on MMD

 * @phydev: the phy_device struct

 * @devad: the MMD containing register to modify

 * @regnum: register number to modify

 * @mask: bit mask of bits to clear

 * @set: new value of bits set in mask to write to @regnum

 *

 * NOTE: MUST NOT be called from interrupt context,

 * because the bus read/write functions may wait for an interrupt

 * to conclude the operation.

/**

 * phy_save_page() - take the bus lock and save the current page

 * @phydev: a pointer to a &struct phy_device

 *

 * Take the MDIO bus lock, and return the current page number. On error,

 * returns a negative errno. phy_restore_page() must always be called

 * after this, irrespective of success or failure of this call.

/**

 * phy_select_page() - take the bus lock, save the current page, and set a page

 * @phydev: a pointer to a &struct phy_device

 * @page: desired page

 *

 * Take the MDIO bus lock to protect against concurrent access, save the

 * current PHY page, and set the current page.  On error, returns a

 * negative errno, otherwise returns the previous page number.

 * phy_restore_page() must always be called after this, irrespective

 * of success or failure of this call.

/**

 * phy_restore_page() - restore the page register and release the bus lock

 * @phydev: a pointer to a &struct phy_device

 * @oldpage: the old page, return value from phy_save_page() or phy_select_page()

 * @ret: operation's return code

 *

 * Release the MDIO bus lock, restoring @oldpage if it is a valid page.

 * This function propagates the earliest error code from the group of

 * operations.

 *

 * Returns:

 *   @oldpage if it was a negative value, otherwise

 *   @ret if it was a negative errno value, otherwise

 *   phy_write_page()'s negative value if it were in error, otherwise

 *   @ret.

		/* Propagate the operation return code if the page write

		 * was successful.

 Propagate the phy page selection error code */

/**

 * phy_read_paged() - Convenience function for reading a paged register

 * @phydev: a pointer to a &struct phy_device

 * @page: the page for the phy

 * @regnum: register number

 *

 * Same rules as for phy_read().

/**

 * phy_write_paged() - Convenience function for writing a paged register

 * @phydev: a pointer to a &struct phy_device

 * @page: the page for the phy

 * @regnum: register number

 * @val: value to write

 *

 * Same rules as for phy_write().

/**

 * phy_modify_paged_changed() - Function for modifying a paged register

 * @phydev: a pointer to a &struct phy_device

 * @page: the page for the phy

 * @regnum: register number

 * @mask: bit mask of bits to clear

 * @set: bit mask of bits to set

 *

 * Returns negative errno, 0 if there was no change, and 1 in case of change

/**

 * phy_modify_paged() - Convenience function for modifying a paged register

 * @phydev: a pointer to a &struct phy_device

 * @page: the page for the phy

 * @regnum: register number

 * @mask: bit mask of bits to clear

 * @set: bit mask of bits to set

 *

 * Same rules as for phy_read() and phy_write().

 SPDX-License-Identifier: GPL-2.0+

/*

 * Marvell 10G 88x3310 PHY driver

 *

 * Based upon the ID registers, this PHY appears to be a mixture of IPs

 * from two different companies.

 *

 * There appears to be several different data paths through the PHY which

 * are automatically managed by the PHY.  The following has been determined

 * via observation and experimentation for a setup using single-lane Serdes:

 *

 *       SGMII PHYXS -- BASE-T PCS -- 10G PMA -- AN -- Copper (for <= 1G)

 *  10GBASE-KR PHYXS -- BASE-T PCS -- 10G PMA -- AN -- Copper (for 10G)

 *  10GBASE-KR PHYXS -- BASE-R PCS -- Fiber

 *

 * With XAUI, observation shows:

 *

 *        XAUI PHYXS -- <appropriate PCS as above>

 *

 * and no switching of the host interface mode occurs.

 *

 * If both the fiber and copper ports are connected, the first to gain

 * link takes priority and the other port is completely locked out.

 Temperature read register (88E2110 only) */

 Number of ports on the device */

	/* These registers appear at 0x800X and 0xa00X - the 0xa00X control

	 * registers appear to set themselves to the 0x800X when AN is

	 * restarted, but status registers appear readable from either.

 1000base-T control register */

 1000base-T status register */

 Vendor2 MMD registers */

 Wake on LAN registers */

 Temperature control/read registers (88X3310 only) */

 unknown function */

 assume that all fields are the same */

	/* DOWNSHIFT_DEV_DEFAULT_COUNT is confusing. It looks like it should

	 * set the default settings for the PHY. However, it is used for

	 * "ethtool --set-phy-tunable ethN downshift on". The intention is

	 * to enable downshift at a default number of retries. The default

	 * settings for 88x3310 are for two retries with downshift disabled.

	 * So let's use two retries with downshift enabled.

 Powering down the port when not in use saves about 600mW */

/* Some PHYs in the Alaska family such as the 88X3310 and the 88E2010

 * don't set bit 14 in PMA Extended Abilities (1.11), although they do

 * support 2.5GBASET and 5GBASET. For these models, we can still read their

 * 2.5G/5G extended abilities register (1.21). We detect these models based on

 * the PMA device identifier, with a mask matching models known to have this

 * issue

 Only some revisions of the 88X3310 family PMA seem to be impacted */

 Check that the PHY interface type is compatible */

 Power up so reset works */

 Enable EDPD mode - saving 600mW */

 Allow downshift */

	/* Clause 45 has no standardized support for 1000BaseT, therefore

	 * use vendor registers for this mode.

	/* In all of the "* with Rate Matching" modes the PHY interface is fixed

	 * at 10Gb. The PHY adapts the rate to actual wire speed with help of

	 * internal 16KB buffer.

	 *

	 * In USXGMII mode the PHY interface mode is also fixed.

	/* The PHY automatically switches its serdes interface (and active PHYXS

	 * instance) between Cisco SGMII, 2500BaseX, 5GBase-R and 10GBase-R /

	 * xaui / rxaui modes according to the speed.

	 * Florian suggests setting phydev->interface to communicate this to the

	 * MAC. Only do this if we are already in one of the above modes.

 10GBASE-ER,LR,LRM,SR do not support autonegotiation. */

 If the link settings are not resolved, mark the link down */

 Read the copper link settings */

 Read the link partner's 1G advertisement */

 Update the pause status */

 Fails to downshift with firmware older than v0.3.5.0 */

 Enable the WOL interrupt */

 Store the device address for the magic packet */

 Clear WOL status and enable magic packet matching */

 Disable magic packet matching & reset WOL status bit */

 Reset the clear WOL status bit as it does not self-clear */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Marvell 88x2222 dual-port multi-speed ethernet transceiver.

 *

 * Supports:

 *	XAUI on the host side.

 *	1000Base-X or 10GBase-R on the line side.

 *	SGMII over 1000Base-X.

 Port PCS Configuration */

 Port Reset and Power Down */

 PMD Receive Signal Detect */

 1000Base-X/SGMII Control Register */

 1000BASE-X/SGMII Status Register */

 1000Base-X Auto-Negotiation Advertisement Register */

 1000Base-X PHY Specific Status Register */

 SFI PMA transmit enable */

 SFI PMA transmit disable */

 Switch between 1G (1000Base-X/SGMII) and 10G (10GBase-R) modes */

 SFP is not present, do nothing */

 Returns negative on error, 0 if link is down, 1 if link is up */

 10GBASE-R do not support auto-negotiation */

 Returns negative on error, 0 if link is down, 1 if link is up */

 All supported linkmodes are set at probe */

 SPDX-License-Identifier: (GPL-2.0 OR MIT)

/*

 * Driver for Microsemi VSC85xx PHYs

 *

 * Author: Bjarni Jonasson <bjarni.jonassoni@microchip.com>

 * License: Dual MIT/GPL

 * Copyright (c) 2021 Microsemi Corporation

 ena_loop = 8 for eloop */

          = 4 for floop */

          = 2 for iloop */

          = 1 for ploop */

 qrate    = 1 for SGMII, 0 for QSGMII */

 if_mode  = 1 for SGMII, 3 for QSGMII */

 configurable terms */

 constant terms */

 configurable terms */

 constant terms */

 configurable terms */

 constant terms */

 configurable terms */

 configurable terms */

 configurable terms */

 Access LCPLL Cfg_0 */

 constant terms */

 configurable terms */

 Detune/Unlock LCPLL */

 0. Reset RCPLL */

 1. Configure sd6g for SGMII prior to sd6g_IB_CAL */

 2. Start rcpll_fsm */

 wait for bit 12 to clear */

 4. Release digital reset and disable transmitter */

 5. Apply a frequency offset on RX-side (using internal FoJi logic) */

 6. Prepare required settings for IBCAL */

 7. Start IB_CAL */

 11 cycles (for ViperA) or 5 cycles (for ViperB & Elise) w/ SW clock */

 set gp(0) */

 clear gp(0) */

 8. Wait for IB cal to complete */

 wait for bit 8 to set */

 9. Restore cfg values for mission mode */

 10. Re-enable transmitter */

 11. Disable frequency offset generation (using internal FoJi logic) */

 Tune/Re-lock LCPLL */

 12. Configure for Final Configuration and Settings */

 a. Reset RCPLL */

 b. Configure sd6g for desired operating mode */

 QSGMII */

 SGMII */

 13. Start rcpll_fsm */

 14. Wait for PLL cal to complete */

 wait for bit 12 to clear */

 release lane reset */

 SPDX-License-Identifier: (GPL-2.0 OR MIT)

/*

 * Driver for Microsemi VSC85xx PHYs - MACsec support

 *

 * Author: Antoine Tenart

 * License: Dual MIT/GPL

 * Copyright (c) 2020 Microsemi Corporation

 non-MACsec access */

 MACsec access */

 enable VLAN tag parsing */

 MACsec untagged */

 MACsec tagged */

 Bad tag */

 Kay tag */

 MACsec untagged */

 MACsec tagged */

 Bad tag */

 Kay tag */

 Set default rules to pass unmatched frames */

 Set the MACsec block out of s/w reset and enable clocks */

 Clear the counters */

 Enable octet increment mode */

 Set the MTU */

 Enable the MACsec block */

 Clear host & line stats */

 Must be called with mdio_lock taken */

 Action for matching packets */

 Enable */

 Set in-use */

 Disable */

 Clear in-use */

 Derive the AES key to get a key for the hash autentication */

 Set the control word */

 Set the context ID. Must be unique. */

 Set the encryption/decryption key */

 Set the authentication key */

 Initial sequence number */

 Set the mask (replay window size) */

 Set the input vectors */

 Add a rule to let the MKA traffic go through, ingress */

 Add a rule to let the MKA traffic go through, egress */

 Always match tagged packets on ingress */

 Always match untagged packets on egress */

 No operation to perform before the commit step */

 No operation to perform before the commit step */

 No operation to perform before the commit step */

 No operation to perform before the commit step */

 Nothing to do */

 No operation to perform before the commit step */

 Make sure the flow is disabled before updating it */

 Make sure the flow is disabled before updating it */

 Check MACsec PN rollover */

 SPDX-License-Identifier: (GPL-2.0 OR MIT)

/*

 * Driver for Microsemi VSC85xx PHYs - timestamping and PHC support

 *

 * Authors: Quentin Schulz & Antoine Tenart

 * License: Dual MIT/GPL

 * Copyright (c) 2020 Microsemi Corporation

/* Two PHYs share the same 1588 processor and it's to be entirely configured

 * through the base PHY of this processor.

 phydev->bus->mdio_lock should be locked when using this function */

 phydev->bus->mdio_lock should be locked when using this function */

 Pick bytes from PTP header */

 Seq ID is 2B long and starts at 30th byte */

 DomainNum */

 MsgType */

 MAC address is 6B long */

 Fill the last bytes of the signature to reach a 16B signature */

 Copper Egress */

 1000Mbps */

 100Mbps */

 10Mbps */

 Fiber Egress */

 1000Mbps */

 100Mbps */

 Copper Egress ON */

 1000Mbps */

 100Mbps */

 10Mbps */

 Fiber Egress ON */

 1000Mbps */

 100Mbps */

 Copper Ingress */

 1000Mbps */

 100Mbps */

 10Mbps */

 Fiber Ingress */

 1000Mbps */

 100Mbps */

 Copper Ingress */

 1000Mbps */

 100Mbps */

 10Mbps */

 Fiber Ingress */

 1000Mbps */

 100Mbps */

 No need to set latencies of packets if the PHY is not connected */

 Fill the last bytes of the signature to reach a 16B signature */

 Read the current FIFO item. Reading FIFO6 pops the next one. */

		/* Can't get the signature of the packet, won't ever

		 * be able to have one so let's dequeue the packet.

 Check if we found the signature we were looking for. */

		/* Valid signature but does not match the one of the

		 * packet in the FIFO right now, reschedule it for later

		 * packets.

 If other timestamps are available in the FIFO, process them. */

 Match on dest port only, ignore src */

 Match all IPs */

 Update the ppb val in nano seconds to the auto adjust reg. */

 The auto adjust update val is set to 0 after write operation. */

	/* Local Time Counter (LTC) is put in SAVE* regs on rising edge of

	 * LOAD_SAVE pin.

	/* Local Time Counter (LTC) is set from LOAD* regs on rising edge of

	 * LOAD_SAVE pin.

 Can't recover that big of an offset. Let's set the time directly. */

 Check non-zero reserved field */

 Rewrite timestamp directly in frame */

 no rewrite */

 Write in reserved field */

 no need to know Sync t when sending in one_step */

 PTP over Ethernet multicast address for SYNC and DELAY msg */

 Matching UDP protocol number */

 End of IP protocol, start of next protocol (UDP) */

	/* UDP checksum offset in IPv4 packet

	 * according to: https://tools.ietf.org/html/rfc768

 Disable INGRESS and EGRESS so engine eng_id can be reconfigured */

 Header length of IPv[4/6] + UDP */

 ETH->IP->UDP->PTP */

 ETH->PTP */

 Disable predictor while configuring the 1588 block */

 Bypass egress or ingress blocks if timestamping isn't used */

 Resetting FIFO so that it's empty after reconfiguration */

 Re-enable predictors now */

 nsec is in reserved field */

		/* 1588_DIFF_INPUT_CLK configuration: Use an external clock for

		 * the LTC, as per 3.13.29 in the VSC8584 datasheet.

 Disable predictor before configuring the 1588 block */

 By default, the internal clock of fixed rate 250MHz is used */

 Enable n-phase sampler for Viper Rev-B */

 Do not access FIFO via SI */

 Put the flag that indicates the frame has been modified to bit 7 */

	/* 30bit mode for RX timestamp, only the nanoseconds are kept in

	 * reserved field.

 Set the Egress timestamp FIFO configuration and status register */

 16 bytes for the signature, 10 for the timestamp in the TS FIFO */

 Disable INGRESS and EGRESS so engine eng_id can be reconfigured */

	/* Strict matching in flow (packets should match flows from the same

	 * index in all enabled comparators (except PTP)).

	/* Initialized for ingress and egress flows:

	 * - The Ethernet comparator.

	 * - The IP comparator.

	 * - The PTP comparator.

 Ack the PTP interrupt */

	/* Retrieve the shared load/save GPIO. Request it as non exclusive as

	 * the same GPIO can be requested by all the PHYs of the same package.

	 * This GPIO must be used with the gpio_lock taken (the lock is shared

	 * between all PHYs).

 Initialize shared GPIO lock */

 SPDX-License-Identifier: (GPL-2.0 OR MIT)

/*

 * Driver for Microsemi VSC85xx PHYs

 *

 * Author: Nagaraju Lakkaraju

 * License: Dual MIT/GPL

 * Copyright (c) 2016 Microsemi Corporation

 Default downshift count 3 (i.e. Bit3:2 = 0b01) */

 Downshift count is either 2,3,4 or 5 */

 Store the device address for the magic packet */

 Enable the WOL interrupt */

 Disable the WOL interrupt */

 Clear WOL iterrupt status */

 CONFIG_OF_MDIO */

/* Set the RGMII RX and TX clock skews individually, according to the PHY

 * interface type, to:

 *  * 0.2 ns (their default, and lowest, hardware value) if delays should

 *    not be enabled

 *  * 2.0 ns (which causes the data to be sampled at exactly half way between

 *    clock transitions at 1000 Mbps) if delays should be enabled

 mdiobus lock should be locked when using this function */

 phydev->bus->mdio_lock should be locked when using this function */

 phydev->bus->mdio_lock should be locked when using this function */

	/* CSR registers are grouped under different Target IDs.

	 * 6-bit Target_ID is split between MSCC_EXT_PAGE_CSR_CNTL_20 and

	 * MSCC_EXT_PAGE_CSR_CNTL_19 registers.

	 * Target_ID[5:2] maps to bits[3:0] of MSCC_EXT_PAGE_CSR_CNTL_20

	 * and Target_ID[1:0] maps to bits[13:12] of MSCC_EXT_PAGE_CSR_CNTL_19.

 Setup the Target ID */

 non-MACsec access */

 Trigger CSR Action - Read into the CSR's */

 Wait for register access*/

 Read the Least Significant Word (LSW) (17) */

 Read the Most Significant Word (MSW) (18) */

	/* CSR registers are grouped under different Target IDs.

	 * 6-bit Target_ID is split between MSCC_EXT_PAGE_CSR_CNTL_20 and

	 * MSCC_EXT_PAGE_CSR_CNTL_19 registers.

	 * Target_ID[5:2] maps to bits[3:0] of MSCC_EXT_PAGE_CSR_CNTL_20

	 * and Target_ID[1:0] maps to bits[13:12] of MSCC_EXT_PAGE_CSR_CNTL_19.

 Setup the Target ID */

 Write the Least Significant Word (LSW) (17) */

 Write the Most Significant Word (MSW) (18) */

 non-MACsec access */

 Trigger CSR Action - Write into the CSR's */

 Wait for register access */

 bus->mdio_lock should be locked when using this function */

 bus->mdio_lock should be locked when using this function */

 bus->mdio_lock should be locked when using this function */

 Clear all patches */

	/* Enable 8051 Micro clock; CLEAR/SET patch present; disable PRAM clock

	 * override and addr. auto-incr; operate at 125 MHz

 Release 8051 Micro SW reset */

 bus->mdio_lock should be locked when using this function */

 bus->mdio_lock should be locked when using this function */

 Start Micro command */

 bus->mdio_lock should be locked when using this function */

	/* Hold 8051 Micro in SW Reset, Enable auto incr address and patch clock

	 * Disable the 8051 Micro clock

 Clear internal memory access */

 bus->mdio_lock should be locked when using this function */

 bus->mdio_lock should be locked when using this function */

 all writes below are broadcasted to all PHYs in the same package */

	/* The below register writes are tweaking analog and electrical

	 * configuration that were determined through characterization by PHY

	 * engineers. These don't mean anything more than "these are the best

	 * values".

 end of write broadcasting */

 Add one byte to size for the one added by the patch_fw function */

		/* Add one byte to size for the one added by the patch_fw

		 * function

 Access LCPLL Cfg_2 */

 trigger a read to the spcified MCB */

 read MCB */

 trigger a write to the spcified MCB */

 write back MCB */

 Sequence to Reset LCPLL for the VIPER and ELISE PHY */

 Reset LCPLL */

 write back LCPLL MCB */

 10 mSec sleep while LCPLL is hold in reset */

 read LCPLL MCB into CSRs */

 Release the Reset of LCPLL */

 write back LCPLL MCB */

 bus->mdio_lock should be locked when using this function */

 all writes below are broadcasted to all PHYs in the same package */

	/* The below register writes are tweaking analog and electrical

	 * configuration that were determined through characterization by PHY

	 * engineers. These don't mean anything more than "these are the best

	 * values".

 end of write broadcasting */

 Add one byte to size for the one added by the patch_fw function */

 Add one byte to size for the one added by the patch_fw function */

 Write patch vector 0, to skip IB cal polling  */

 ROM address to trap, for patch vector 0 */

 RAM address to jump to, when patch vector 0 enabled */

 bit 8, enable patch vector 0 */

	/* In the package, there are two pairs of PHYs (PHY0 + PHY2 and

	 * PHY1 + PHY3). The first PHY of each pair (PHY0 and PHY1) is

	 * the base PHY for timestamping operations.

	/* The coma mode (pin or reg) provides an optional feature that

	 * may be used to control when the PHYs become active.

	 * Alternatively the COMA_MODE pin may be connected low

	 * so that the PHYs are fully active once out of reset.

 Enable output (mode=0) and write zero to it */

 Disable SerDes for 100Base-FX */

 Disable SerDes for 1000Base-X */

 Disable SerDes for 100Base-FX */

 Disable SerDes for 1000Base-X */

	/* Some parts of the init sequence are identical for every PHY in the

	 * package. Some parts are modifying the GPIO register bank which is a

	 * set of registers that are affecting all PHYs, a few resetting the

	 * microprocessor common to all PHYs. The CRC check responsible of the

	 * checking the firmware within the 8051 microprocessor can only be

	 * accessed via the PHY whose internal address in the package is 0.

	 * All PHYs' interrupts mask register has to be zeroed before enabling

	 * any PHY's interrupt in this register.

	 * For all these reasons, we need to do the init sequence once and only

	 * once whatever is the first PHY in the package that is initialized and

	 * do the correct init sequence for all PHYs that are package-critical

	 * in this pre-init function.

		/* The following switch statement assumes that the lowest

		 * nibble of the phy_id_mask is always 0. This works because

		 * the lowest nibble of the PHY_ID's below are also 0.

	/* Timestamping IRQ does not set a bit in the global INT_STATUS, so

	 * irq_status would be 0.

 Trigger a read to the specified MCB */

 Trigger a write to the specified MCB */

	/* Apply 6G SerDes FOJI Algorithm

	 *  Initial condition requirement:

	 *  1. hold 8051 in reset

	 *  2. disable patch vector 0, in order to allow IB cal poll during FoJi

	 *  3. deassert 8051 reset after change patch vector status

	 *  4. proceed with FoJi (vsc85xx_sd6g_config_v2)

 clear bit 8, to disable patch vector 0 */

 Enable 8051 clock, don't set patch present, disable PRAM clock override */

	/* These are the settings to override the silicon default

	 * values to handle hardware performance of PHY. They

	 * are set at Power-On state and remain until PHY Reset.

 all writes below are broadcasted to all PHYs in the same package */

	/* Add pre-patching commands to:

	 * 1. enable 8051 clock, operate 8051 clock at 125 MHz

	 * instead of HW default 62.5MHz

	 * 2. write patch vector 0, to skip IB cal polling executed

	 * as part of the 0x80E0 ROM command

 ROM address to trap, for patch vector 0 */

 RAM address to jump to, when patch vector 0 enabled */

 bit 8, enable patch vector 0 */

	/* Enable 8051 clock, don't set patch present

	 * yet, disable PRAM clock override

 restore 8051 and bail w error */

	/* Some parts of the init sequence are identical for every PHY in the

	 * package. Some parts are modifying the GPIO register bank which is a

	 * set of registers that are affecting all PHYs, a few resetting the

	 * microprocessor common to all PHYs.

	 * All PHYs' interrupts mask register has to be zeroed before enabling

	 * any PHY's interrupt in this register.

	 * For all these reasons, we need to do the init sequence once and only

	 * once whatever is the first PHY in the package that is initialized and

	 * do the correct init sequence for all PHYs that are package-critical

	 * in this pre-init function.

 Microsemi VSC85xx PHYs */

 PHY_BASIC_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_BASIC_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_BASIC_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 PHY_GBIT_FEATURES */

 SPDX-License-Identifier: GPL-2.0

 4 bytes */

 2 bytes */

 1 byte */

 4 bytes */

 8 bytes */

 PMStatus: Clear WakeStatus/PwrBtnStatus */

 GPEStatus: Clear all generated events */

 PM Status Base */

 PM Control Base */

 GPM Base */

 ACPI End */

	/* IO Decode: When AcpiDecodeEnable set, South-Bridge uses the contents

 SCI_EN set */

 Enable to generate SCI */

 GPM3/GPM9 enable */

 Set GPM9 as input */

 Set GPM9 as non-output */

 GPM3 config ACPI trigger SCIOUT */

 GPM9 config ACPI trigger SCIOUT */

 GPM3 config falling edge trigger */

 No wait for STPGNT# in ACPI Sx state */

 Set GPM3 pull-down enable */

 Set GPM9 pull-down enable */

 SCI interrupt need acpi space, allocate here */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Loongson-3 series cpu has two sensors inside,

 * each of them from 0 to 255,

 * if more than 127, that is dangerous.

 * here only provide sensor1 data, because it always hot than sensor0

 Hwmon device attribute group */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Asus PC WMI hotkey driver

 *

 * Copyright(C) 2010 Intel Corporation.

 * Copyright(C) 2010-2011 Corentin Chary <corentin.chary@gmail.com>

 *

 * Portions based on wistron_btns.c:

 * Copyright (C) 2005 Miloslav Trmac <mitr@volny.cz>

 * Copyright (C) 2005 Bernhard Rosenkraenzer <bero@arklinux.org>

 * Copyright (C) 2005 Dmitry Torokhov <dtor@mail.ru>

 Based on standard hwmon pwmX_enable values */

 The WMI hotkey event value is always the same. */

 At least TUF Gaming series uses 3 dword input buffer. */

/*

 * Struct that's used for all methods called via AGFN. Naming is

 * identically to the AML code.

 probably "Multi-function" to be called */

 probably "Sub-function" to be called */

 size of the hole struct, including subfunction fields */

 not used by now */

 zero on success */

 struct used for calling fan read and write methods */

 common fields */

 fan number: 0: set auto mode 1: 1st fan */

 read: RPM/100 - write: 0-255 */

/*

 * <platform>/    - debugfs root directory

 *   dev_id      - current dev_id

 *   ctrl_param  - current ctrl_param

 *   method_id   - current method_id

 *   devs        - call DEVS(dev_id, ctrl_param) and print result

 *   dsts        - call DSTS(dev_id)  and print result

 *   call        - call method_id(dev_id, ctrl_param) and print result

 deprecated on newer platforms */

 starting in Spec 8.3, use CPU_FAN_CTRL */

 0 = enable

 The RSOC controls the maximum charging percentage.

 WMI ************************************************************************/

	/*

	 * Copy to dma capable address otherwise memory corruption occurs as

	 * bios has to be able to access it.

 Helper for special devices with magic return codes */

 Input **********************************************************************/

 Tablet mode ****************************************************************/

 dGPU ********************************************************************/

 Don't rely on type conversion */

/*

 * A user may be required to store the value twice, typcial store first, then

 * rescan PCI bus to activate power, then store a second time to save correctly.

 * The reason for this is that an extra code path in the ACPI is enabled when

 * the device and bus are powered.

 eGPU ********************************************************************/

 Don't rely on type conversion */

 The ACPI call to enable the eGPU also disables the internal dGPU */

 Ensure that the kernel status of dgpu is updated */

 Battery ********************************************************************/

 The battery maximum charging percentage */

	/* There isn't any method in the DSDT to read the threshold, so we

	 * save the threshold.

	/* The WMI method does not provide a way to specific a battery, so we

	 * just assume it is the first battery.

	 * Note: On some newer ASUS laptops (Zenbook UM431DA), the primary/first

	 * battery is named BATT.

	/* The charge threshold is only reset when the system is power cycled,

	 * and we can't get the current threshold so let set it to 100% when

	 * a battery is added.

 LEDs ***********************************************************************/

/*

 * These functions actually update the LED's, and are called from a

 * workqueue. By doing this as separate work rather than when the LED

 * subsystem asks, we avoid messing with the Asus ACPI stuff during a

 * potentially bad time, such as a timer interrupt.

	/*

	 * bits 0-2: level

	 * bit 7: light on/off

	 * bit 8-10: environment (0: dark, 1: normal, 2: light)

	 * bit 17: status unknown

 Unknown status is considered as off */

 Prevent disabling keyboard backlight on module unregister */

 RF *************************************************************************/

/*

 * PCI hotplug (for wlan rfkill)

 Device already present */

	/*

	 * We can't call directly asus_rfkill_hotplug because most

	 * of the time WMBC is still being executed and not reetrant.

	 * There is currently no way to tell ACPICA that  we want this

	 * method to be serialized, we schedule a asus_rfkill_hotplug

	 * call later, in a safer context.

/*

 * Rfkill devices

	/*

	 * If the user bit is set, BIOS can't set and record the wlan status,

	 * it will report the value read from id ASUS_WMI_DEVID_WLAN_LED

	 * while we query the wlan status through WMI(ASUS_WMI_DEVID_WLAN).

	 * So, we have to record wlan status in id ASUS_WMI_DEVID_WLAN_LED

	 * while setting the wlan status through WMI.

	 * This is also the behavior that windows app will do.

	/*

	 * This handler is enabled only if hotplug is enabled.

	 * In this case, the asus_wmi_set_devstate() will

	 * trigger a wmi notification and we need to wait

	 * this call to finish before being able to call

	 * any wmi method

	/*

	 * Refresh pci hotplug in case the rfkill state was changed after

	 * asus_unregister_rfkill_notifier()

	/*

	 * If we get -EBUSY then something else is handling the PCI hotplug -

	 * don't fail in this case

	/*

	 * Refresh pci hotplug in case the rfkill state was changed during

	 * setup.

 Panel Overdrive ************************************************************/

 Don't rely on type conversion */

 Quirks *********************************************************************/

/*

 * Some devices dont support or have borcken get_als method

 * but still support set method.

 Hwmon device ***************************************************************/

 1: for setting 1st fan's speed 0: setting auto mode */

/*

 * Check if we can read the speed of one fan. If true we assume we can also

 * control it.

	/*

	 * We need to find a better way, probably using sfun,

	 * bits or spec ...

	 * Currently we disable it if:

	 * - ASUS_WMI_UNSUPPORTED_METHOD is returned

	 * - reverved bits are non-zero

	 * - sfun and presence bit are not set

 If we already set a value then just return it */

	/*

	 * If we haven't set already set a value through the AGFN interface,

	 * we read a current value through the (now-deprecated) FAN_CTRL device.

 Low Speed */

 no speed readable on manual mode */

	/*

	 * Just read back the cached pwm mode.

	 *

	 * For the CPU_FAN device, the spec indicates that we should be

	 * able to read the device status and consult bit 19 to see if we

	 * are in Full On or Automatic mode. However, this does not work

	 * in practice on X532FL at least (the bit is always 0) and there's

	 * also nothing in the DSDT to indicate that this behaviour exists.

 standard documented hwmon values */

 Fan1 */

 Temperature */

 can't return negative here */

		/*

		 * If the temperature value in deci-Kelvin is near the absolute

		 * zero temperature, something is clearly wrong

 Fan mode *******************************************************************/

 Fan boost mode: 0 - normal, 1 - overboost, 2 - silent

 Throttle thermal policy ****************************************************/

	/*

	 * Ensure that platform_profile updates userspace with the change to ensure

	 * that platform_profile and throttle_thermal_policy_mode are in sync.

	/*

	 * Ensure that platform_profile updates userspace with the change to ensure

	 * that platform_profile and throttle_thermal_policy_mode are in sync.

 Throttle thermal policy: 0 - default, 1 - overboost, 2 - silent

 Platform profile ***********************************************************/

	/*

	 * Not an error if a component platform_profile relies on is unavailable

	 * so early return, skipping the setup of platform_profile.

 Backlight ******************************************************************/

		/* When using scalar brightness, updating the brightness

 display toggle keys */

 Fn-lock ********************************************************************/

 WMI events *****************************************************************/

		/*

		 * Double check that queue is present:

		 * ATK (with queue) uses 0xff, ASUSWMI (without) 0xd2.

 Sysfs **********************************************************************/

 Platform device ************************************************************/

 INIT enable hotkeys on some models */

 We don't know yet what to do with this version... */

	/*

	 * The SFUN method probably allows the original driver to get the list

	 * of features supported by a given model. For now, 0x0100 or 0x0800

	 * bit signifies that the laptop is equipped with a Wi-Fi MiniPCI card.

	 * The significance of others is yet to be found.

	/*

	 * Eee PC and Notebooks seems to have different method_id for DSTS,

	 * but it may also be related to the BIOS's SPEC.

	 * Note, on most Eeepc, there is no way to check if a method exist

	 * or note, while on notebooks, they returns 0xFFFFFFFE on failure,

	 * but once again, SPEC may probably be used for that kind of things.

	 *

	 * Additionally at least TUF Gaming series laptops return nothing for

	 * unknown methods, so the detection in this way is not possible.

	 *

	 * There is strong indication that only ACPI WMI devices that have _UID

	 * equal to "ASUSWMI" use DCTS whereas those with "ATK" use DSTS.

	/*

	 * Some devices can have multiple event codes stored in a queue before

	 * the module load if it was unloaded intermittently after calling

	 * the INIT method (enables event handling). The WMI notify handler is

	 * expected to retrieve all event codes until a retrieved code equals

	 * queue end marker (One or Ones). Old codes are flushed from the queue

	 * upon module load. Not enabling this when it should be has minimal

	 * visible impact so fall back if anything goes wrong.

	/* CWAP allow to define the behavior of the Fn+F2 key,

 debugfs ********************************************************************/

 Init / exit ****************************************************************/

 probably no problems on error */

	/* Some Asus desktop boards export an acpi-video backlight interface,

 Platform driver - hibernate/resume callbacks *******************************/

		/*

		 * Work around bios bug - acpi _PTS turns off the wireless led

		 * during suspend.  Normally it restores it on resume, but

		 * we should kick it ourselves in case hibernation is aborted.

 Refresh both wlan rfkill state and pci hotplug */

 Registration ***************************************************************/

 SPDX-License-Identifier: GPL-2.0-only

/*

 * hdaps.c - driver for IBM's Hard Drive Active Protection System

 *

 * Copyright (C) 2005 Robert Love <rml@novell.com>

 * Copyright (C) 2005 Jesper Juhl <jj@chaosbits.net>

 *

 * The HardDisk Active Protection System (hdaps) is present in IBM ThinkPads

 * starting with the R40, T41, and X40.  It provides a basic two-axis

 * accelerometer and other data, such as the device's temperature.

 *

 * This driver is based on the document by Mark A. Smith available at

 * http://www.almaden.ibm.com/cs/people/marksmith/tpaps.html and a lot of trial

 * and error.

 first port used by hdaps */

 number of ports: 0x1600 - 0x162f */

 device state */

 y-axis position */

 x-axis position */

 device temperature, in Celsius */

 y-axis variance (what is this?) */

 x-axis variance (what is this?) */

 device temperature (again?) */

 what is this? */

 keyboard or mouse activity */

 accelerometer data is fresh */

 set if keyboard activity */

 set if mouse activity */

 keyboard used? */

 mouse used? */

 wait up to 4s for device init ... */

 ... in 200ms increments */

 poll for input every 1/20s (50 ms)*/

 input event threshold */

/*

 * __get_latch - Get the value from a given port.  Callers must hold hdaps_mtx.

/*

 * __check_latch - Check a port latch for a given value.  Returns zero if the

 * port contains the given value.  Callers must hold hdaps_mtx.

/*

 * __wait_latch - Wait up to 100us for a port latch to get a certain value,

 * returning zero if the value is obtained.  Callers must hold hdaps_mtx.

/*

 * __device_refresh - request a refresh from the accelerometer.  Does not wait

 * for refresh to complete.  Callers must hold hdaps_mtx.

/*

 * __device_refresh_sync - request a synchronous refresh from the

 * accelerometer.  We wait for the refresh to complete.  Returns zero if

 * successful and nonzero on error.  Callers must hold hdaps_mtx.

/*

 * __device_complete - indicate to the accelerometer that we are done reading

 * data, and then initiate an async refresh.  Callers must hold hdaps_mtx.

/*

 * hdaps_readb_one - reads a byte from a single I/O port, placing the value in

 * the given pointer.  Returns zero on success or a negative error on failure.

 * Can sleep.

 do a sync refresh -- we need to be sure that we read fresh data */

 __hdaps_read_pair - internal lockless helper for hdaps_read_pair(). */

 do a sync refresh -- we need to be sure that we read fresh data */

 hdaps_invert is a bitvector to negate the axes */

/*

 * hdaps_read_pair - reads the values from a pair of ports, placing the values

 * in the given pointers.  Returns zero on success.  Can sleep.

/*

 * hdaps_device_init - initialize the accelerometer.  Returns zero on success

 * and negative error code on failure.  Can sleep.

	/*

	 * Most ThinkPads return 0x01.

	 *

	 * Others--namely the R50p, T41p, and T42p--return 0x03.  These laptops

	 * have "inverted" axises.

	 *

	 * The 0x02 value occurs when the chip has been previously initialized.

 we have done our dance, now let's wait for the applause */

 a read of the device helps push it into action */

 Device model stuff */

/*

 * hdaps_calibrate - Set our "resting" values.  Callers must hold hdaps_mtx.

 Sysfs Files */

 Module stuff */

 hdaps_dmi_match - found a match.  return one, short-circuiting the hunt. */

 hdaps_dmi_match_invert - found an inverted match. */

/* Note that HDAPS_DMI_MATCH_NORMAL("ThinkPad T42") would match

   "ThinkPad T42p", so the order of the entries matters.

   If your ThinkPad is not recognized, please update to latest

 initial calibrate for the input device */

 initialize the input class */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Cisco Meraki MX100 (Tinkerbell) board platform driver

 *

 * Based off of arch/x86/platform/meraki/tink.c from the

 * Meraki GPL release meraki-firmware-sources-r23-20150601

 *

 * Format inspired by platform/x86/pcengines-apuv2.c

 *

 * Copyright (C) 2021 Chris Blake <chrisrblake93@gmail.com>

 LEDs */

 Terminating entry */

 Reset Button */

 Terminating entry */

 Board setup */

 Terminating entry */

	/*

	 * We need to make sure that GPIO60 isn't set to native mode as is default since it's our

	 * Reset Button. To do this, write to GPIO_USE_SEL2 to have GPIO60 set to GPIO mode.

	 * This is documented on page 1609 of the PCH datasheet, order number 327879-005US

 SPDX-License-Identifier: GPL-2.0

/*

 * Platform driver for the Intel SCU.

 *

 * Copyright (C) 2019, Intel Corporation

 * Authors: Divya Sasidharan <divya.s.sasidharan@intel.com>

 *	    Mika Westerberg <mika.westerberg@linux.intel.com>

 *	    Rajmohan Mani <rajmohan.mani@intel.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  asus-laptop.c - Asus Laptop Support

 *

 *  Copyright (C) 2002-2005 Julien Lerouge, 2003-2006 Karol Kozimor

 *  Copyright (C) 2006-2007 Corentin Chary

 *  Copyright (C) 2011 Wind River Systems

 *

 *  The development page for this driver is located at

 *  http://sourceforge.net/projects/acpi4asus/

 *

 *  Credits:

 *  Pontus Fuchs   - Helper functions, cleanup

 *  Johann Wiesner - Small compile fixes

 *  John Belmonte  - ACPI code for Toshiba laptop was a good starting point.

 *  Eric Burghard  - LED display support for W1N

 *  Josh Green     - Light Sens support

 *  Thomas Tuttle  - His first patch for led support was very helpful

 *  Sam Lin        - GPS support

/*

 * WAPF defines the behavior of the Fn+Fx wlan key

 * The significance of values is yet to be found, but

 * most of the time:

 * Bit | Bluetooth | WLAN

 *  0  | Hardware  | Hardware

 *  1  | Hardware  | Software

 *  4  | Software  | Software

/*

 * Some events we use, same for all Asus

/*

 * Known bits returned by \_SB.ATKD.HWRS

/*

 * Flags for hotk status

 * WL_ON and BT_ON are also used for wireless_status()

 internal Wifi */

 internal Bluetooth */

 internal wimax */

 internal wwan */

 WLED and BLED type */

 LED */

 W1JC */

 A7J */

 G1, G2 (probably) */

 LEDD */

/*

 * Bluetooth and WLAN

 * WLED and BLED are not handled like other XLED, because in some dsdt

 * they also control the WLAN/Bluetooth device.

 WWAN and WIMAX */

 Brightness */

 Display */

 Z71A Z71V */

 Z71A Z71V */

 GPS */

 R2H use different handle for GPS on/off */

 Keyboard light */

 For Pegatron Lucid tablet */

 1G accel is reported as ~256, so clamp to 2G */

/*

 * Define a specific led structure to keep the main structure clean

/*

 * Same thing for rfkill

 type of control. Maps to PEGA_* values or *_RSTS  */

/*

 * This is the main structure, we can use it to store anything interesting

 * about the hotk device

 laptop name */

 the device we are in */

 the handle of the hotk device */

 status of the LED display */

 light sensor level */

 light sensor switch value */

 count for each event TODO make this better */

 Lenovo SL Specific keycodes */

 Dock */

 End of Lenovo SL Specific keycodes */

 LCD on */

 LCD off */

 Stop/Eject */

 WMP Key */

 Battery mode */

 AC mode */

 Screenlock */

 WLAN Toggle */

 WLAN Enable */

 WLAN Disable */

 SDSP LCD only */

 SDSP CRT only */

 SDSP LCD + CRT */

 SDSP TV */

 SDSP LCD + TV */

 SDSP CRT + TV */

 SDSP LCD + CRT + TV */

 Lock Touchpad Fn + F9 */

 Lock Touchpad */

 Suspend */

 Hibernate */

 Low Battery notification */

 Bluetooth Enable */

 Bluetooth Disable */

 Radio Toggle Key */

 Color enhancement mode */

 SDSP DVI only */

 SDSP LCD + DVI */

 SDSP CRT + DVI */

 SDSP TV + DVI */

 SDSP LCD + CRT + DVI */

 SDSP LCD + TV + DVI */

 SDSP CRT + TV + DVI */

 SDSP LCD + CRT + TV + DVI */

 SDSP HDMI only */

 SDSP LCD + HDMI */

 SDSP CRT + HDMI */

 SDSP TV + HDMI */

 SDSP LCD + CRT + HDMI */

 SDSP LCD + TV + HDMI */

 SDSP CRT + TV + HDMI */

 SDSP LCD + CRT + TV + HDMI */

/*

 * This function evaluates an ACPI method, given an int as parameter, the

 * method is searched within the scope of the handle, can be NULL. The output

 * of the method is written is output, which can also be NULL

 *

 * returns 0 if write is successful, -1 else.

 list of input parameters (an int) */

 the only param we use */

		/* The output is noisy.  From reading the ASL

		 * dissassembly, timeout errors are returned with 1's

		 * in the high word, and the lack of locking around

		 * thei hi/lo byte reads means that a transition

		 * between (for example) -1 and 0 could be read as

	/* In some cases, the very first call to poll causes a

	 * recursive fault under the polldev worker.  This is

	 * apparently related to very early userspace access to the

	/* Note transform, convert to "right/up/out" in the native

	 * landscape orientation (i.e. the vector is the direction of

 Generic LED function */

/*

 * LEDs

 /sys/class/led handlers */

/*

 * Keyboard backlight (also a LED)

  Ugly macro, need to fix that later */

 Led not present */

	/*

	 * The Pegatron Lucid has no physical leds, but all methods are

	 * available in the DSDT...

	/*

	 * Functions that actually update the LED's are called from a

	 * workqueue. By doing this as separate work rather than when the LED

	 * subsystem asks, we avoid messing with the Asus ACPI stuff during a

	 * potentially bad time, such as a timer interrupt.

/*

 * Backlight device

/*

 * Platform device handlers

/*

 * We write our info in page, we begin at offset off and cannot write more

 * than count bytes. We set eof to 1 if we handle those 2 values. We return the

 * number of bytes written in page

 enough for all info */

	/*

	 * We use the easy way, we don't care of off and count,

	 * so we don't set eof to 1

	/*

	 * The SFUN method probably allows the original driver to get the list

	 * of features supported by a given model. For now, 0x0100 or 0x0800

	 * bit signifies that the laptop is equipped with a Wi-Fi MiniPCI card.

	 * The significance of others is yet to be found.

	/*

	 * The HWRS method return informations about the hardware.

	 * 0x80 bit is for WLAN, 0x100 for Bluetooth.

	 * 0x40 for WWAN, 0x10 for WIMAX.

	 * The significance of others is yet to be found.

	 * We don't currently use this for device detection, and it

	 * takes several seconds to run on some systems.

	/*

	 * Another value for userspace: the ASYM method returns 0x02 for

	 * battery low and 0x04 for battery critical, its readings tend to be

	 * more accurate than those provided by _BST.

	 * Note: since not all the laptops provide this method, errors are

	 * silently ignored.

/*

 * LEDD display

/*

 * Wireless

/*

 * WLAN

/*e

 * Bluetooth

/*

 * Wimax

/*

 * Wwan

/*

 * Display

 no sanity check needed for now */

/*

 * Experimental support for display switching. As of now: 1 should activate

 * the LCD output, 2 should do for CRT, 4 for TV-Out and 8 for DVI.

 * Any combination (bitwise) of these will suffice. I never actually tested 4

 * displays hooked up simultaneously, so be warned. See the acpi4asus README

 * for more info.

/*

 * Light Sens

 0 <= value <= 15 */

/*

 * GPS

/*

 * rfkill

/*

 * Input device (i.e. hotkeys)

/*

 * ACPI driver

 TODO Find a better way to handle events count. */

 Brightness events are special */

 Update the backlight device. */

 Accelerometer "coarse orientation change" event */

 no ls_level interface on the Lucid */

/*

 * This function is used to initialize the context with right values. In this

 * method, we can make all the detection we want, and modify the asus_laptop

 * struct

	/*

	 * Get DSDT headers early enough to allow for differentiating between

	 * models, but late enough to allow acpi_bus_register_driver() to fail

	 * before doing anything ACPI-specific. Should we encounter a machine,

	 * which needs special handling (i.e. its hotkey device has a different

	 * HID), this bit will be moved.

 We have to write 0 on init this far for all ASUS models */

 This needs to be called for some laptops to init properly */

 This too ... */

	/*

	 * Try to match the object returned by INIT to the specific model.

	 * Handle every possible object (or the lack of thereof) the DSDT

	 * writers might throw at us. When in trouble, we pass NULL to

	 * asus_model_match() and try something completely different.

 Keyboard Backlight is on by default */

 LED display is off by default */

 Set initial values of light sensor and level */

 level 5 for sensor sensitivity */

 On L1400B WLED control the sound card, don't mess with it ... */

	/*

	 * Need platform type detection first, then the platform

	 * device.  It is used as a parent for the sub-devices below.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Acer Wireless Radio Control Driver

 *

 * Copyright (C) 2017 Endless Mobile, Inc.

 SPDX-License-Identifier: GPL-2.0-or-later

 Firmware attributes class helper module */

first time class is being used*/

 No more consumers */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  eeepc-laptop.c - Asus Eee PC extras

 *

 *  Based on asus_acpi.c as patched for the Eee PC by Asus:

 *  ftp://ftp.asus.com/pub/ASUS/EeePC/701/ASUS_ACPI_071126.rar

 *  Based on eee.c from eeepc-linux

/*

 * Definitions for Asus EeePC

P901*/

 Disable Touchpad */

 AC plugged */

 AC unplugged */

/*

 * This is the main structure, we can use it to store useful information

 the handle of the acpi device */

	u32 cm_supported;		/* the control methods supported

 count for each event */

 the device we are in */

/*

 * ACPI Helpers

/*

 * Sys helpers

/*

 * LEDs

/*

 * These functions actually update the LED's, and are called from a

 * workqueue. By doing this as separate work rather than when the LED

 * subsystem asks, we avoid messing with the Asus ACPI stuff during a

 * potentially bad time, such as a timer interrupt.

 if method is available */

/*

 * PCI hotplug (for wlan rfkill)

 Device already present */

	/*

	 * Refresh pci hotplug in case the rfkill state was

	 * changed during setup.

		/*

		 * Refresh pci hotplug in case the rfkill

		 * state was changed after

		 * eeepc_unregister_rfkill_notifier()

/*

 * Rfkill devices

	/*

	 * If we get -EBUSY then something else is handling the PCI hotplug -

	 * don't fail in this case

/*

 * Platform driver - hibernate/resume callbacks

		/*

		 * Work around bios bug - acpi _PTS turns off the wireless led

		 * during suspend.  Normally it restores it on resume, but

		 * we should kick it ourselves in case hibernation is aborted.

 Refresh both wlan rfkill state and pci hotplug */

/*

 * Hwmon device

 Fan PWM duty cycle (%) */

 High byte, fan speed (RPM) */

 Low byte, fan speed (RPM) */

 Byte containing SF25  */

/*

 * Backlight device

/*

 * Input device (i.e. hotkeys)

/*

 * ACPI driver

 Brightness events are special */

 Ignore them completely if the acpi video driver is used */

 Update the backlight device. */

 Convert event to keypress (obsolescent hack) */

 brightness down */

 brightness up */

		/*

		 * no change in brightness - already at min/max,

		 * event will be desired value (or else ignored)

	/*

	 * Blacklist for setting cpufv (cpu speed).

	 *

	 * EeePC 4G ("701") implements CFVS, but it is not supported

	 * by the pre-installed OS, and the original option to change it

	 * in the BIOS setup screen was removed in later versions.

	 *

	 * Judging by the lack of "Super Hybrid Engine" on Asus product pages,

	 * this applies to all "701" models (4G/4G Surf/2G Surf).

	 *

	 * So Asus made a deliberate decision not to support it on this model.

	 * We have several reports that using it can cause the system to hang

	 *

	 * The hang has also been reported on a "702" (Model name "8G"?).

	 *

	 * We avoid dmi_check_system() / dmi_match(), because they use

	 * substring matching.  We don't want to affect the "701SD"

	 * and "701SDX" models, because they do support S.H.E.

	/*

	 * Blacklist for wlan hotplug

	 *

	 * Eeepc 1005HA doesn't work like others models and don't need the

	 * hotplug code. In fact, current hotplug code seems to unplug another

	 * device...

	/* Some BIOSes do not report cm although it is available.

 get control methods supported */

	/*

	 * If the following call to set_acpi() fails, it's because there's no

	 * camera so we can ignore the error.

	/*

	 * Register the platform device first.  It is used as a parent for the

	 * sub-devices below.

	 *

	 * Note that if there are multiple instances of this ACPI device it

	 * will bail out, because the platform device is registered with a

	 * fixed name.  Of course it doesn't make sense to have more than one,

	 * and machine-specific scripts find the fixed name convenient.  But

	 * It's also good for us to exclude multiple instances because both

	 * our hwmon and our wlan rfkill subdevice use global ACPI objects

	 * (the EC and the wlan PCI slot respectively).

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * MSI WMI hotkeys

 *

 * Copyright (C) 2009 Novell <trenn@suse.de>

 *

 * Most stuff taken over from hp-wmi

 Generic MSI keys (not present on MSI Wind) */

 MSI Wind keys */

 Fn+F3 touchpad toggle */

 Fn+F11 Bluetooth toggle */

 Fn+F6 webcam toggle */

 Fn+F11 Wi-Fi toggle */

 Fn+F10 turbo mode toggle */

 Fn+F10 ECO mode toggle */

 These keys work without WMI. Ignore them to avoid double keycodes */

 These are unknown WMI events found on MSI Wind */

 These are MSI Wind keys that should be handled via WMI */

 Instance 1 is "get backlight", cmp with DSDT */

 Instance 0 is "set backlight" */

			/* Ignore event if any event happened in a 50 ms

 Brightness is served via acpi video driver */

 SPDX-License-Identifier: GPL-2.0

/*

 * Topstar Laptop ACPI Extras driver

 *

 * Copyright (c) 2009 Herton Ronaldo Krzesinski <herton@mandriva.com.br>

 * Copyright (c) 2018 Guillaume Douézan-Grard

 *

 * Implementation inspired by existing x86 platform drivers, in special

 * asus/eepc/fujitsu-laptop, thanks to their authors.

/*

 * LED

	/*

	 * Topstar ACPI returns 0x30001 when the LED is ON and 0x30000 when it

	 * is OFF.

	/*

	 * FNCX(0x83) toggles the LED (more precisely, it is supposed to

	 * act as an hardware switch and disconnect the WLAN adapter but

	 * it seems to be faulty on some models like the Topstar U931

	 * Notebook).

/*

 * Input

 touchpad enable/disable key */

 Known non hotkey events don't handled or that we don't care yet */

 backlight event */

	/*

	 * 'G key' generate two event codes, convert to only

	 * one event/key code for now, consider replacing by

	 * a switch (3G switch - SW_3G?)

/*

 * Platform

/*

 * ACPI

 0x83 and 0x84 key events comes duplicated... */

/*

 * Enable software-based WLAN LED control on systems with defective

 * hardware switch.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * This file supports the /sys/firmware/sgi_uv topology tree on HPE UV.

 *

 *  Copyright (c) 2020 Hewlett Packard Enterprise.  All Rights Reserved.

 *  Copyright (c) Justin Ernst

 Minimum line length

Line must match format "pcibus %4x:%2x" to be valid

	/* Connect pcibus to segment:bus number with '_'

	 * to concatenate name tokens.

	 * pcibus 0000:00 ... -> pcibus_0000:00 ...

	/* Null terminate after the concatencated name tokens

	 * to produce kobj name string.

 Use start to index after name tokens string for remainder of line info.

	/* r001i01b00h0 BASE IO (IIO Stack 0)

	 * r001i01b00h1 PCIe IO (IIO Stack 1)

	 * r001i01b03h1 PCIe SLOT

	 * r001i01b00h0 NODE IO

	 * r001i01b00h0 Riser

	 * (IIO Stack #) may not be present.

	/* PPB at 0000:80:00.00 (slot 3)

	 * (slot #) may not be present.

 SPDX-License-Identifier: GPL-2.0+

/*

 * GPD Pocket fan controller driver

 *

 * Copyright (C) 2017 Hans de Goede <hdegoede@redhat.com>

 Determine minimum speed */

 Use hysteresis before lowering speed again */

 kick start motor */

 When mostly idle (low temp/speed), slow down the poll interval. */

 Note this returns a "weak" reference which we don't need to free */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (C) 2021 Thomas Weißschuh <thomas@weissschuh.net>

 value is a signed 8-bit integer

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Toshiba Bluetooth Enable Driver

 *

 * Copyright (C) 2009 Jes Sorensen <Jes.Sorensen@gmail.com>

 * Copyright (C) 2015 Azael Avalos <coproscefalo@gmail.com>

 *

 * Thanks to Matthew Garrett for background info on ACPI innards which

 * normal people aren't meant to understand :-)

	/*

	 * Some Toshiba laptops may have a fake TOS6205 device in

	 * their ACPI BIOS, so query the _STA method to see if there

	 * is really anything there.

 Helper function */

 RFKill handlers */

	/*

	 * Note the Toshiba Bluetooth RFKill switch seems to be a strange

	 * fish. It only provides a BT event when the switch is flipped to

	 * the 'on' position. When flipping it to 'off', the USB device is

	 * simply pulled away underneath us, without any BT event being

	 * delivered.

 ACPI driver functions */

 clean up */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  OLPC XO-1.5 ebook switch driver

 *  (based on generic ACPI button driver)

 *

 *  Copyright (C) 2009 Paul Fox <pgf@laptop.org>

 *  Copyright (C) 2010 One Laptop per Child

 for input device */

 input layer checks if event is redundant */

 Button's GPE is run-wake GPE */

 SPDX-License-Identifier: GPL-2.0+

/*

 * lg-laptop.c - LG Gram ACPI features and hotkeys Driver

 *

 * Copyright (C) 2018 Matan Ziv-Av <matan@svgalib.org>

 LG control panel (F1) */

 Touchpad toggle (F5) */

 Read mode (F9) */

	{KE_KEY, 0x10000000, {KEY_F16} },/* Keyboard backlight (F8) - pressing

					  * this key both sends an event and

					  * changes backlight level.

 ignored */

 Must be 1 or 2. Does not matter which */

 LEDs are optional */

 SPDX-License-Identifier: GPL-2.0

 WMI driver for Xiaomi Laptops */

 { XIAOMI_DEVICE(XIAOMI_KEY_FN_ESC_0, KEY_FN_ESC) },

 { XIAOMI_DEVICE(XIAOMI_KEY_FN_ESC_1, KEY_FN_ESC) },

 { XIAOMI_DEVICE(XIAOMI_KEY_CAPSLOCK, KEY_CAPSLOCK) },

 Terminating entry */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Eee PC WMI hotkey driver

 *

 * Copyright(C) 2010 Intel Corporation.

 * Copyright(C) 2010-2011 Corentin Chary <corentin.chary@gmail.com>

 *

 * Portions based on wistron_btns.c:

 * Copyright (C) 2005 Miloslav Trmac <mitr@volny.cz>

 * Copyright (C) 2005 Bernhard Rosenkraenzer <bero@arklinux.org>

 * Copyright (C) 2005 Dmitry Torokhov <dtor@mail.ru>

 old _HID used in eeepc-laptop */

 Values for T101MT "Home" key */

 Sleep already handled via generic ACPI code */

 Power Gear key */

 Toggle Touchpad */

 Task Manager */

 Change Resolution */

 Home/Express gate key */

 We need this when ACPI function doesn't do this well */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Asus Notebooks WMI hotkey driver

 *

 * Copyright(C) 2010 Corentin Chary <corentin.chary@gmail.com>

/*

 * WAPF defines the behavior of the Fn+Fx wlan key

 * The significance of values is yet to be found, but

 * most of the time:

 * Bit | Bluetooth | WLAN

 *  0  | Hardware  | Hardware

 *  1  | Hardware  | Software

 *  4  | Software  | Software

/*

 * For those machines that need software to control bt/wifi status

 * and can't adjust brightness through ACPI interface

 * and have duplicate events(ACPI and WMI) for display toggle

		/*

		 * Note this machine has a Brazos APU, and most Brazos Asus

		 * machines need quirk_asus_x55u / wmi_backlight_power but

		 * here acpi-video seems to work fine for backlight control.

 Match *T100* */

 Match UX360* */

 overwrite the wapf setting if the wapf paramater is specified */

 Stop/Eject */

 WMP Key */

 Battery mode */

 AC mode */

 Power Gear key */

 Wireless console Toggle */

 Wireless console Enable */

 Wireless console Disable */

 SDSP LCD only */

 SDSP CRT only */

 SDSP LCD + CRT */

 SDSP TV */

 SDSP LCD + TV */

 SDSP CRT + TV */

 SDSP LCD + CRT + TV */

 Low Battery notification */

 General-purpose button */

 Charger type dectection notification */

 Ambient Light Sensor Toggle */

 Bluetooth Enable */

 Bluetooth Disable */

 Radio Toggle Key */

 Color enhancement mode */

 SDSP DVI only */

 SDSP LCD + DVI */

 SDSP CRT + DVI */

 SDSP TV + DVI */

 SDSP LCD + CRT + DVI */

 SDSP LCD + TV + DVI */

 SDSP CRT + TV + DVI */

 SDSP LCD + CRT + TV + DVI */

 Conflicts with fan mode switch */

 SDSP HDMI only */

 SDSP LCD + HDMI */

 SDSP CRT + HDMI */

 SDSP TV + HDMI */

 SDSP LCD + CRT + HDMI */

 SDSP LCD + TV + HDMI */

 SDSP CRT + TV + HDMI */

 SDSP LCD + CRT + TV + HDMI */

 Ambient Light Sensor notification */

 Lid flip action */

 SPDX-License-Identifier: GPL-2.0+

/*

 * I2C multi-instantiate driver, pseudo driver to instantiate multiple

 * i2c-clients from a single fwnode.

 *

 * Copyright 2018 Hans de Goede <hdegoede@redhat.com>

 Count number of clients to instantiate */

 The resources describe a 3th client, but it is not really there. */

/*

 * Note new device-ids must also be added to i2c_multi_instantiate_ids in

 * drivers/acpi/scan.c: acpi_device_enumeration_by_parent().

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Panasonic HotKey and LCD brightness control driver

 *  (C) 2004 Hiroshi Miura <miura@da-cha.org>

 *  (C) 2004 NTT DATA Intellilink Co. http://www.intellilink.co.jp/

 *  (C) YOKOTA Hiroshi <yokota (at) netlab. is. tsukuba. ac. jp>

 *  (C) 2004 David Bronaugh <dbronaugh>

 *  (C) 2006-2008 Harald Welte <laforge@gnumonks.org>

 *

 *  derived from toshiba_acpi.c, Copyright (C) 2002-2004 John Belmonte

 *

 *---------------------------------------------------------------------------

 *

 * ChangeLog:

 *	Aug.18, 2020	Kenneth Chan <kenneth.t.chan@gmail.com>

 *		-v0.98	add platform devices for firmware brightness registers

 *			add support for battery charging threshold (eco mode)

 *			resolve hotkey double trigger

 *			add write support to mute

 *			fix sticky_key init bug

 *			fix naming of platform files for consistency with other

 *			modules

 *			split MODULE_AUTHOR() by one author per macro call

 *			replace ACPI prints with pr_*() macros

 *		-v0.97	add support for cdpower hardware switch

 *		-v0.96	merge Lucina's enhancement

 *			Jan.13, 2009 Martin Lucina <mato@kotelna.sk>

 *				- add support for optical driver power in

 *				  Y and W series

 *

 *	Sep.23, 2008	Harald Welte <laforge@gnumonks.org>

 *		-v0.95	rename driver from drivers/acpi/pcc_acpi.c to

 *			drivers/misc/panasonic-laptop.c

 *

 * 	Jul.04, 2008	Harald Welte <laforge@gnumonks.org>

 * 		-v0.94	replace /proc interface with device attributes

 * 			support {set,get}keycode on th input device

 *

 *      Jun.27, 2008	Harald Welte <laforge@gnumonks.org>

 *      	-v0.92	merge with 2.6.26-rc6 input API changes

 *      		remove broken <= 2.6.15 kernel support

 *      		resolve all compiler warnings

 *      		various coding style fixes (checkpatch.pl)

 *      		add support for backlight api

 *      		major code restructuring

 *

 * 	Dac.28, 2007	Harald Welte <laforge@gnumonks.org>

 * 		-v0.91	merge with 2.6.24-rc6 ACPI changes

 *

 * 	Nov.04, 2006	Hiroshi Miura <miura@da-cha.org>

 * 		-v0.9	remove warning about section reference.

 * 			remove acpi_os_free

 * 			add /proc/acpi/pcc/brightness interface for HAL access

 * 			merge dbronaugh's enhancement

 * 			Aug.17, 2004 David Bronaugh (dbronaugh)

 *  				- Added screen brightness setting interface

 *				  Thanks to FreeBSD crew (acpi_panasonic.c)

 * 				  for the ideas I needed to accomplish it

 *

 *	May.29, 2006	Hiroshi Miura <miura@da-cha.org>

 *		-v0.8.4 follow to change keyinput structure

 *			thanks Fabian Yamaguchi <fabs@cs.tu-berlin.de>,

 *			Jacob Bower <jacob.bower@ic.ac.uk> and

 *			Hiroshi Yokota for providing solutions.

 *

 *	Oct.02, 2004	Hiroshi Miura <miura@da-cha.org>

 *		-v0.8.2	merge code of YOKOTA Hiroshi

 *					<yokota@netlab.is.tsukuba.ac.jp>.

 *			Add sticky key mode interface.

 *			Refactoring acpi_pcc_generate_keyinput().

 *

 *	Sep.15, 2004	Hiroshi Miura <miura@da-cha.org>

 *		-v0.8	Generate key input event on input subsystem.

 *			This is based on yet another driver written by

 *							Ryuta Nakanishi.

 *

 *	Sep.10, 2004	Hiroshi Miura <miura@da-cha.org>

 *		-v0.7	Change proc interface functions using seq_file

 *			facility as same as other ACPI drivers.

 *

 *	Aug.28, 2004	Hiroshi Miura <miura@da-cha.org>

 *		-v0.6.4 Fix a silly error with status checking

 *

 *	Aug.25, 2004	Hiroshi Miura <miura@da-cha.org>

 *		-v0.6.3 replace read_acpi_int by standard function

 *							acpi_evaluate_integer

 *			some clean up and make smart copyright notice.

 *			fix return value of pcc_acpi_get_key()

 *			fix checking return value of acpi_bus_register_driver()

 *

 *      Aug.22, 2004    David Bronaugh <dbronaugh@linuxboxen.org>

 *              -v0.6.2 Add check on ACPI data (num_sifr)

 *                      Coding style cleanups, better error messages/handling

 *			Fixed an off-by-one error in memory allocation

 *

 *      Aug.21, 2004    David Bronaugh <dbronaugh@linuxboxen.org>

 *              -v0.6.1 Fix a silly error with status checking

 *

 *      Aug.20, 2004    David Bronaugh <dbronaugh@linuxboxen.org>

 *              - v0.6  Correct brightness controls to reflect reality

 *                      based on information gleaned by Hiroshi Miura

 *                      and discussions with Hiroshi Miura

 *

 *	Aug.10, 2004	Hiroshi Miura <miura@da-cha.org>

 *		- v0.5  support LCD brightness control

 *			based on the disclosed information by MEI.

 *

 *	Jul.25, 2004	Hiroshi Miura <miura@da-cha.org>

 *		- v0.4  first post version

 *		        add function to retrive SIFR

 *

 *	Jul.24, 2004	Hiroshi Miura <miura@da-cha.org>

 *		- v0.3  get proper status of hotkey

 *

 *      Jul.22, 2004	Hiroshi Miura <miura@da-cha.org>

 *		- v0.2  add HotKey handler

 *

 *      Jul.17, 2004	Hiroshi Miura <miura@da-cha.org>

 *		- v0.1  start from toshiba_acpi driver written by John Belmonte

 Define ACPI PATHs */

 Lets note hotkeys */

/* LCD_TYPEs: 0 = Normal, 1 = Semi-transparent

   ECO_MODEs: 0x03 = off, 0x83 = on

 R1 handles SINF_AC_CUR_BRIGHT as SINF_CUR_BRIGHT, doesn't know AC state */

 Change CPU boost */

 method access functions */

 backlight API interface functions */

/* This driver currently treats AC and DC brightness identical,

 * since we don't need to invent an interface to the core ACPI

 * logic to receive events in case a power supply is plugged in

 returns ACPI_SUCCESS if methods to control optical drive are present */

 get optical driver power state */

 power off */

 power on */

 set optical drive power state */

 power off */

		/* Call CDDR instead, since they both call the same method

		 * while CDDI takes 1 arg and we are not quite sure what it is.

 power on */

 sysfs user interface functions */

 nothing to do */

 put in device directory */

 hotkey input device driver */

 hack: some firmware sends no key down for sleep / hibernate */

 nothing to do */

 kernel module interface */

 initialize backlight */

 read the initial brightness setting from the hardware */

 Reset initial sticky key mode since the hardware register state is not consistent */

 add sysfs attributes */

 optical drive initialization */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

/*

 * Mellanox platform driver

 *

 * Copyright (C) 2016-2018 Mellanox Technologies

 * Copyright (C) 2016-2018 Vadim Pasternak <vadimp@mellanox.com>

 LPC bus IO offsets */

 Masks for aggregation, psu, pwr and fan event in CPLD related registers. */

 Masks for aggregation for comex carriers */

 Masks for aggregation for modular systems */

 Default I2C parent bus number */

 Maximum number of possible physical buses equipped on system */

 Number of channels in group */

 Start channel numbers */

 Number of LPC attached MUX platform devices */

 Hotplug devices adapter numbers */

 Masks and default values for watchdogs */

 Minimum power required for turning on Ethernet modular system (WATT) */

/* mlxplat_priv - platform private data

 * @pdev_i2c - i2c controller platform device

 * @pdev_mux - array of mux platform devices

 * @pdev_hotplug - hotplug platform devices

 * @pdev_led - led platform devices

 * @pdev_io_regs - register access platform devices

 * @pdev_fan - FAN platform devices

 * @pdev_wd - array of watchdog platform devices

 * @regmap: device register map

 Regions for LPC I2C controller and LPC base register space */

 Platform i2c next generation systems data */

 Platform next generation systems i2c data */

 Platform default channels */

 Platform channels for MSN21xx system family */

 Platform mux data */

 Platform mux configuration variables */

 Platform extended mux data */

 Platform channels for modular system family */

 Platform modular mux data */

 Platform hotplug devices */

 Platform hotplug comex carrier system family data */

 Platform hotplug default data */

 Platform hotplug MSN21xx system family data */

 Platform hotplug msn274x system family data */

 Platform hotplug MSN201x system family data */

 Platform hotplug next generation system family data */

 Platform hotplug extended system family data */

 Platform led default data */

 Platform led default data for water cooling */

 Platform led MSN21xx system family data */

 Platform led for default data for 200GbE systems */

 Platform led for Comex based 100GbE systems */

 Platform led for data for modular systems */

 Platform register access default */

 Platform register access MSN21xx, MSN201x, MSN274x systems families data */

 Platform register access for next generation systems families data */

 Platform register access for modular systems families data */

 Platform FAN default */

/* Watchdog type1: hardware implementation version1

 * (MSN2700, MSN2410, MSN2740, MSN2100 and MSN2140 systems).

/* Watchdog type2: hardware implementation version 2

 * (all systems except (MSN2700, MSN2410, MSN2740, MSN2100 and MSN2140).

/* Watchdog type3: hardware implementation version 3

 * Can be on all systems. It's differentiated by WD capability bit.

 * Old systems (MSN2700, MSN2410, MSN2740, MSN2100 and MSN2140)

 * still have only one main watchdog.

 Scan adapters from expected id to verify it is free. */

 Return if expected parent adapter is free. */

 Return with error if free id for adapter is not found. */

 Shift adapter ids, since expected parent adapter is not free. */

 Add hotplug driver */

 Set default registers. */

 Add LED driver. */

 Add registers io access driver. */

 Add FAN driver. */

 Add WD drivers. */

 Sync registers with hardware. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Think LMI BIOS configuration driver

 *

 * Copyright(C) 2019-2021 Lenovo

 *

 * Original code from Thinkpad-wmi project https://github.com/iksaif/thinkpad-wmi

 * Copyright(C) 2017 Corentin Chary <corentin.chary@gmail.com>

 * Distributed under the GPL-2.0 license

/*

 * Name:

 *  Lenovo_BiosSetting

 * Description:

 *  Get item name and settings for current LMI instance.

 * Type:

 *  Query

 * Returns:

 *  "Item,Value"

 * Example:

 *  "WakeOnLAN,Enable"

/*

 * Name:

 *  Lenovo_SetBiosSetting

 * Description:

 *  Change the BIOS setting to the desired value using the Lenovo_SetBiosSetting

 *  class. To save the settings, use the Lenovo_SaveBiosSetting class.

 *  BIOS settings and values are case sensitive.

 *  After making changes to the BIOS settings, you must reboot the computer

 *  before the changes will take effect.

 * Type:

 *  Method

 * Arguments:

 *  "Item,Value,Password,Encoding,KbdLang;"

 * Example:

 *  "WakeOnLAN,Disable,pa55w0rd,ascii,us;"

/*

 * Name:

 *  Lenovo_SaveBiosSettings

 * Description:

 *  Save any pending changes in settings.

 * Type:

 *  Method

 * Arguments:

 *  "Password,Encoding,KbdLang;"

 * Example:

 * "pa55w0rd,ascii,us;"

/*

 * Name:

 *  Lenovo_BiosPasswordSettings

 * Description:

 *  Return BIOS Password settings

 * Type:

 *  Query

 * Returns:

 *  PasswordMode, PasswordState, MinLength, MaxLength,

 *  SupportedEncoding, SupportedKeyboard

/*

 * Name:

 *  Lenovo_SetBiosPassword

 * Description:

 *  Change a specific password.

 *  - BIOS settings cannot be changed at the same boot as power-on

 *    passwords (POP) and hard disk passwords (HDP). If you want to change

 *    BIOS settings and POP or HDP, you must reboot the system after changing

 *    one of them.

 *  - A password cannot be set using this method when one does not already

 *    exist. Passwords can only be updated or cleared.

 * Type:

 *  Method

 * Arguments:

 *  "PasswordType,CurrentPassword,NewPassword,Encoding,KbdLang;"

 * Example:

 *  "pop,pa55w0rd,newpa55w0rd,ascii,us;”

/*

 * Name:

 *  Lenovo_GetBiosSelections

 * Description:

 *  Return a list of valid settings for a given item.

 * Type:

 *  Method

 * Arguments:

 *  "Item"

 * Returns:

 *  "Value1,Value2,Value3,..."

 * Example:

 *  -> "FlashOverLAN"

 *  <- "Enabled,Disabled"

/*

 * Name:

 *  Lenovo_DebugCmdGUID

 * Description

 *  Debug entry GUID method for entering debug commands to the BIOS

 ------ Utility functions ------------*/

 Convert BIOS WMI error string to suitable error code */

 Extract error string from WMI return buffer */

 Utility function to execute WMI call to BIOS */

	/*

	 * Duplicated call required to match BIOS workaround for behavior

	 * seen when WMI accessed via scripting on other OS.

 (re)initialize output buffer to default state */

 Extract output string from WMI return buffer */

 ------ Core interface functions ------------*/

 Get password settings from BIOS */

	/*

	 * The size of thinkpad_wmi_pcfg on ThinkStation is larger than ThinkPad.

	 * To make the driver compatible on different brands, we permit it to get

	 * the data in below case.

 ---- Authentication sysfs --------------------------------------------------------- */

 pwdlen == 0 is allowed to clear the password */

 Strip out CR if one is present, setting password won't work if it is present */

 Strip out CR if one is present, setting password won't work if it is present */

 pwdlen == 0 is allowed to clear the password */

 Format: 'PasswordType,CurrentPw,NewPw,Encoding,KbdLang;' */

 Scan for a matching profile */

 Calculate length till '\n' or terminating 0 */

 ---- Attributes sysfs --------------------------------------------------------- */

 validate and split from `item,value` -> `value` */

 Strip out CR if one is present */

 let userland know it may need to check reboot pending again */

 ---- Debug interface--------------------------------------------------------- */

 Strip out CR if one is present */

 let userland know it may need to check reboot pending again */

 ---- Initialisation --------------------------------------------------------- */

 Attribute structures */

 Authentication structures */

 Check if index is a valid setting - skip if it isn't */

 check for duplicate or reserved values */

 Build attribute */

 Create authentication entries */

 ---- Base Driver -------------------------------------------------------- */

	/*

	 * Try to find the number of valid settings of this machine

	 * and use it to create sysfs attributes.

 It is not allowed to have '/' for file name. Convert it into '\'. */

 Remove the value part */

 Create a setting entry */

 If BIOS selections supported, load those */

 Create password setting structure */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Gmux driver for Apple laptops

 *

 *  Copyright (C) Canonical Ltd. <seth.forshee@canonical.com>

 *  Copyright (C) 2010-2012 Andreas Heider <andreas@meetr.de>

 *  Copyright (C) 2015 Lukas Wunner <lukas@wunner.de>

/**

 * DOC: Overview

 *

 * gmux is a microcontroller built into the MacBook Pro to support dual GPUs:

 * A `Lattice XP2`_ on pre-retinas, a `Renesas R4F2113`_ on retinas.

 *

 * (The MacPro6,1 2013 also has a gmux, however it is unclear why since it has

 * dual GPUs but no built-in display.)

 *

 * gmux is connected to the LPC bus of the southbridge. Its I/O ports are

 * accessed differently depending on the microcontroller: Driver functions

 * to access a pre-retina gmux are infixed ``_pio_``, those for a retina gmux

 * are infixed ``_index_``.

 *

 * .. _Lattice XP2:

 *     http://www.latticesemi.com/en/Products/FPGAandCPLD/LatticeXP2.aspx

 * .. _Renesas R4F2113:

 *     http://www.renesas.com/products/mpumcu/h8s/h8s2100/h8s2113/index.jsp

 switcheroo data */

/*

 * gmux port offsets. Many of these are not yet used, but may be in the

 * future, and it's useful to have them documented here anyhow.

/**

 * DOC: Backlight control

 *

 * On single GPU MacBooks, the PWM signal for the backlight is generated by

 * the GPU. On dual GPU MacBook Pros by contrast, either GPU may be suspended

 * to conserve energy. Hence the PWM signal needs to be generated by a separate

 * backlight driver which is controlled by gmux. The earliest generation

 * MBP5 2008/09 uses a `TI LP8543`_ backlight driver. All newer models

 * use a `TI LP8545`_.

 *

 * .. _TI LP8543: https://www.ti.com/lit/ds/symlink/lp8543.pdf

 * .. _TI LP8545: https://www.ti.com/lit/ds/symlink/lp8545.pdf

/**

 * DOC: Graphics mux

 *

 * On pre-retinas, the LVDS outputs of both GPUs feed into gmux which muxes

 * either of them to the panel. One of the tricks gmux has up its sleeve is

 * to lengthen the blanking interval of its output during a switch to

 * synchronize it with the GPU switched to. This allows for a flicker-free

 * switch that is imperceptible by the user (`US 8,687,007 B2`_).

 *

 * On retinas, muxing is no longer done by gmux itself, but by a separate

 * chip which is controlled by gmux. The chip is triple sourced, it is

 * either an `NXP CBTL06142`_, `TI HD3SS212`_ or `Pericom PI3VDP12412`_.

 * The panel is driven with eDP instead of LVDS since the pixel clock

 * required for retina resolution exceeds LVDS' limits.

 *

 * Pre-retinas are able to switch the panel's DDC pins separately.

 * This is handled by a `TI SN74LV4066A`_ which is controlled by gmux.

 * The inactive GPU can thus probe the panel's EDID without switching over

 * the entire panel. Retinas lack this functionality as the chips used for

 * eDP muxing are incapable of switching the AUX channel separately (see

 * the linked data sheets, Pericom would be capable but this is unused).

 * However the retina panel has the NO_AUX_HANDSHAKE_LINK_TRAINING bit set

 * in its DPCD, allowing the inactive GPU to skip the AUX handshake and

 * set up the output with link parameters pre-calibrated by the active GPU.

 *

 * The external DP port is only fully switchable on the first two unibody

 * MacBook Pro generations, MBP5 2008/09 and MBP6 2010. This is done by an

 * `NXP CBTL06141`_ which is controlled by gmux. It's the predecessor of the

 * eDP mux on retinas, the difference being support for 2.7 versus 5.4 Gbit/s.

 *

 * The following MacBook Pro generations replaced the external DP port with a

 * combined DP/Thunderbolt port and lost the ability to switch it between GPUs,

 * connecting it either to the discrete GPU or the Thunderbolt controller.

 * Oddly enough, while the full port is no longer switchable, AUX and HPD

 * are still switchable by way of an `NXP CBTL03062`_ (on pre-retinas

 * MBP8 2011 and MBP9 2012) or two `TI TS3DS10224`_ (on retinas) under the

 * control of gmux. Since the integrated GPU is missing the main link,

 * external displays appear to it as phantoms which fail to link-train.

 *

 * gmux receives the HPD signal of all display connectors and sends an

 * interrupt on hotplug. On generations which cannot switch external ports,

 * the discrete GPU can then be woken to drive the newly connected display.

 * The ability to switch AUX on these generations could be used to improve

 * reliability of hotplug detection by having the integrated GPU poll the

 * ports while the discrete GPU is asleep, but currently we do not make use

 * of this feature.

 *

 * Our switching policy for the external port is that on those generations

 * which are able to switch it fully, the port is switched together with the

 * panel when IGD / DIS commands are issued to vga_switcheroo. It is thus

 * possible to drive e.g. a beamer on battery power with the integrated GPU.

 * The user may manually switch to the discrete GPU if more performance is

 * needed.

 *

 * On all newer generations, the external port can only be driven by the

 * discrete GPU. If a display is plugged in while the panel is switched to

 * the integrated GPU, *both* GPUs will be in use for maximum performance.

 * To decrease power consumption, the user may manually switch to the

 * discrete GPU, thereby suspending the integrated GPU.

 *

 * gmux' initial switch state on bootup is user configurable via the EFI

 * variable ``gpu-power-prefs-fa4ce28d-b62f-4c99-9cc3-6815686e30f9`` (5th byte,

 * 1 = IGD, 0 = DIS). Based on this setting, the EFI firmware tells gmux to

 * switch the panel and the external DP connector and allocates a framebuffer

 * for the selected GPU.

 *

 * .. _US 8,687,007 B2: https://pimg-fpiw.uspto.gov/fdd/07/870/086/0.pdf

 * .. _NXP CBTL06141:   https://www.nxp.com/documents/data_sheet/CBTL06141.pdf

 * .. _NXP CBTL06142:   https://www.nxp.com/documents/data_sheet/CBTL06141.pdf

 * .. _TI HD3SS212:     https://www.ti.com/lit/ds/symlink/hd3ss212.pdf

 * .. _Pericom PI3VDP12412: https://www.pericom.com/assets/Datasheets/PI3VDP12412.pdf

 * .. _TI SN74LV4066A:  https://www.ti.com/lit/ds/symlink/sn74lv4066a.pdf

 * .. _NXP CBTL03062:   http://pdf.datasheetarchive.com/indexerfiles/Datasheets-SW16/DSASW00308511.pdf

 * .. _TI TS3DS10224:   https://www.ti.com/lit/ds/symlink/ts3ds10224.pdf

/**

 * DOC: Power control

 *

 * gmux is able to cut power to the discrete GPU. It automatically takes care

 * of the correct sequence to tear down and bring up the power rails for

 * core voltage, VRAM and PCIe.

	/*

	 * Early Macbook Pros with switchable graphics use nvidia

	 * integrated graphics. Hardcode that the 9400M is integrated.

/**

 * DOC: Interrupt

 *

 * gmux is also connected to a GPIO pin of the southbridge and thereby is able

 * to trigger an ACPI GPE. On the MBP5 2008/09 it's GPIO pin 22 of the Nvidia

 * MCP79, on all following generations it's GPIO pin 6 of the Intel PCH.

 * The GPE merely signals that an interrupt occurred, the actual type of event

 * is identified by reading a gmux register.

 to clear interrupts write back current status */

	/*

	 * Invalid version information may indicate either that the gmux

	 * device isn't present or that it's a new one that uses indexed

	 * io

	/*

	 * Currently it's assumed that the maximum brightness is less than

	 * 2^24 for compatibility with old gmux versions. Cap the max

	 * brightness at this value, but print a warning if the hardware

	 * reports something higher so that it can be fixed.

	/*

	 * The backlight situation on Macs is complicated. If the gmux is

	 * present it's the best choice, because it always works for

	 * backlight control and supports more levels than other options.

	 * Disable the other backlight choices.

	/*

	 * If Thunderbolt is present, the external DP port is not fully

	 * switchable. Force its AUX channel to the discrete GPU.

	/*

	 * Retina MacBook Pros cannot switch the panel's AUX separately

	 * and need eDP pre-calibration. They are distinguishable from

	 * pre-retinas by having an "indexed" gmux.

	 *

	 * Pre-retina MacBook Pros can switch the panel's DDC separately.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * AMD SoC Power Management Controller Driver

 *

 * Copyright (c) 2020, Advanced Micro Devices, Inc.

 * All Rights Reserved.

 *

 * Author: Shyam Sundar S K <Shyam-sundar.S-k@amd.com>

 SMU communication registers */

 PMC Scratch Registers */

 Base address of SMU for mapping physical address to virtual address */

 SMU Response Codes */

 FCH SSC Registers */

 SMU Message Definations */

 List of supported CPU ids */

 SMU version information */

 generic mutex lock */

 CONFIG_DEBUG_FS */

 It's in 48MHz. We need to convert it */

 CONFIG_DEBUG_FS */

 Get Active devices list from SMU */

 Get dram address */

 Start the logging */

 Wait until we get a valid response */

 Write zero to response register */

 Write argument into response register */

 Write message ID to message ID register */

 Wait until we get a valid response */

 PMFW may take longer time to return back the data */

 in the past */

	/* will be stored in upper 16 bits of s0i3 hint argument,

	 * so timer wakeup from s0i3 is limited to ~18 hours or less

 Reset and Start SMU logging - to monitor the s0i3 stats */

 Activate CZN specific RTC functionality */

 Dump the IdleMask before we send hint to SMU */

 Let SMU know that we are looking for stats */

 Dump the IdleMask to see the blockers */

 Use FCH registers to get the S0ix stats */

 Use SMU to get the s0i3 debug stats */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Intel Merrifield watchdog platform device library file

 *

 * (C) Copyright 2014 Intel Corporation

 * Author: David Cohen <david.a.cohen@linux.intel.com>

 IOAPIC builds identity mapping between GSI and IRQ on MID */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Driver for Samsung Q10 and related laptops: controls the backlight

 *

 *  Copyright (c) 2011 Frederick van der Wyck <fvanderwyck@gmail.com>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PEAQ 2-in-1 WMI hotkey driver

 * Copyright (C) 2017 Hans de Goede <hdegoede@redhat.com>

/*

 * The Dolby button (yes really a Dolby button) causes an ACPI variable to get

 * set on both press and release. The WMI method checks and clears that flag.

 * So for a press + release we will get back One from the WMI method either once

 * (if polling after the release) or twice (polling between press and release).

 * We ignore events for 0.5s after the first event to avoid reporting 2 presses.

 Some other devices (Shuttle XS35) use the same WMI GUID for other purposes */

 WMI GUID is not unique, also check for a DMI match */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for the Intel SCU IPC mechanism

 *

 * (C) Copyright 2008-2010 Intel Corporation

 * Author: Sreedhara DS (sreedhara.ds@intel.com)

 *

 * This driver provides IOCTL interfaces to call Intel SCU IPC driver API.

 IOCTL commands */

 No. of registers */

 Register addresses */

 Register data */

 Valid for read-modify-write */

/**

 *	scu_reg_access		-	implement register access ioctls

 *	@cmd: command we are doing (read/write/update)

 *	@data: kernel copy of ioctl data

 *

 *	Allow the user to perform register accesses on the SCU via the

 *	kernel interface

/**

 *	scu_ipc_ioctl		-	control ioctls for the SCU

 *	@fp: file handle of the SCU device

 *	@cmd: ioctl coce

 *	@arg: pointer to user passed structure

 *

 *	Support the I/O and firmware flashing interfaces of the SCU

 Only single open at the time */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Asus Wireless Radio Control Driver

 *

 * Copyright (C) 2015-2016 Endless Mobile, Inc.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  toshiba_acpi.c - Toshiba Laptop ACPI Extras

 *

 *  Copyright (C) 2002-2004 John Belmonte

 *  Copyright (C) 2008 Philip Langdale

 *  Copyright (C) 2010 Pierre Ducroquet

 *  Copyright (C) 2014-2016 Azael Avalos

 *

 *  The devolpment page for this driver is located at

 *  http://memebeam.org/toys/ToshibaAcpiDriver.

 *

 *  Credits:

 *	Jonathan A. Buzzard - Toshiba HCI info, and critical tips on reverse

 *		engineering the Windows drivers

 *	Yasushi Nagato - changes for linux kernel 2.4 -> 2.5

 *	Rob Miller - TV out and hotkeys help

 Scan code for Fn key on TOS1900 models */

 Toshiba ACPI method paths */

/*

 * The Toshiba configuration interface is composed of the HCI and the SCI,

 * which are defined as follows:

 *

 * HCI is Toshiba's "Hardware Control Interface" which is supposed to

 * be uniform across all their models.  Ideally we would just call

 * dedicated ACPI methods instead of using this primitive interface.

 * However the ACPI methods seem to be incomplete in some areas (for

 * example they allow setting, but not reading, the LCD brightness value),

 * so this is still useful.

 *

 * SCI stands for "System Configuration Interface" which aim is to

 * conceal differences in hardware between different models.

 Operations */

 Return codes */

 Registers */

 Field definitions */

 Wake from sleep */

 Output changed */

 HDMI plugged/unplugged */

 Protection level set */

 Protection level off */

/*

 * List of models which have a broken acpi-video backlight interface and thus

 * need to use the toshiba (vendor) interface instead.

/*

 * Utility

/*

 * ACPI interface wrappers

/*

 * Perform a raw configuration call.  Here we don't care about input or output

 * buffer format.

/*

 * Common hci tasks

 *

 * In addition to the ACPI status, the HCI system returns a result which

 * may be useful (such as "not supported").

/*

 * Common sci tasks

		/*

		 * Some BIOSes do not have the SCI open/close functions

		 * implemented and return 0x8000 (Not Supported), failing to

		 * register some supported features.

		 *

		 * Simply return 1 if we hit those affected laptops to make the

		 * supported features work.

		 *

		 * In the case that some laptops really do not support the SCI,

		 * all the SCI dependent functions check for TOS_NOT_SUPPORTED,

		 * and thus, not registering support for the queried feature.

 Illumination support */

 First request : initialize communication. */

 Switch the illumination on/off */

 First request : initialize communication. */

 Check the illumination */

 KBD Illumination */

	/*

	 * Check for keyboard backlight timeout max value,

	 * previous kbd backlight implementation set this to

	 * 0x3c0003, and now the new implementation set this

	 * to 0x3c001a, use this to distinguish between them.

 Get the current keyboard backlight mode */

 Get the current time (1-60 seconds) */

 Flag as supported */

 Check the keyboard backlight state */

 Set the keyboard backlight state */

 TouchPad support */

 Eco Mode support */

		/*

		 * If we receive 0x8300 (Input Data Error), it means that the

		 * LED device is present, but that we just screwed the input

		 * parameters.

		 *

		 * Let's query the status of the LED to see if we really have a

		 * success response, indicating the actual presense of the LED,

		 * bail out otherwise.

 Switch the Eco Mode led on/off */

 Accelerometer support */

	/*

	 * Check if the accelerometer call exists,

	 * this call also serves as initialization

 Check the Accelerometer status */

 Sleep (Charge and Music) utilities support */

 Flag as supported */

 Keyboard function keys */

 Panel Power ON */

 USB Three */

 Hotkey Event type */

 Wireless status (RFKill, WLAN, BT, WWAN) */

 WWAN */

	/*

	 * WWAN support can be queried by setting the in[3] value to

	 * HCI_WIRELESS_WWAN (0x03).

	 *

	 * If supported, out[0] contains TOS_SUCCESS and out[2] contains

	 * HCI_WIRELESS_WWAN_STATUS (0x2000).

	 *

	 * If not supported, out[0] contains TOS_INPUT_DATA_ERROR (0x8300)

	 * or TOS_NOT_SUPPORTED (0x8000).

	/*

	 * Some devices only need to call HCI_WIRELESS_WWAN_STATUS to

	 * (de)activate the device, but some others need the

	 * HCI_WIRELESS_WWAN_POWER call as well.

 Cooling Method */

 Transflective Backlight */

 LCD Brightness */

 Video-Out */

	/*

	 * Scan expression.  Multiple expressions may be delimited with ;

	 * NOTE: To keep scanning simple, invalid fields are ignored.

 Advance to one character past the next ; */

		/*

		 * To avoid unnecessary video disruption, only write the new

		 * video setting if something changed.

 Fan status */

/*

 * Proc and module init

 Keyboard backlight work */

/*

 * Sysfs files

 Check for supported modes depending on keyboard backlight type */

 Type 1 supports SCI_KBD_MODE_FNZ and SCI_KBD_MODE_AUTO */

 Type 2 doesn't support SCI_KBD_MODE_FNZ */

	/*

	 * Set the Keyboard Backlight Mode where:

	 *	Auto - KBD backlight turns off automatically in given time

	 *	FN-Z - KBD backlight "toggles" when hotkey pressed

	 *	ON   - KBD backlight is always on

	 *	OFF  - KBD backlight is always off

 Only make a change if the actual mode has changed */

 Shift the time to "base time" (0x3c0000 == 60 seconds) */

 OR the "base time" to the actual method format */

 Type 1 requires the current mode */

 Type 2 requires the desired mode */

		/*

		 * Some laptop models with the second generation backlit

		 * keyboard (type 2) do not generate the keyboard backlight

		 * changed event (0x92), and thus, the driver will never update

		 * the sysfs entries.

		 *

		 * The event is generated right when changing the keyboard

		 * backlight mode and the *notify function will set the

		 * kbd_event_generated to true.

		 *

		 * In case the event is not generated, schedule the keyboard

		 * backlight work to update the sysfs entries and emulate the

		 * event via genetlink.

 Check for supported values depending on kbd_type */

 Set the Keyboard Backlight Timeout */

 Only make a change if the actual timeout has changed */

 Shift the time to "base time" (0x3c0000 == 60 seconds) */

 OR the "base time" to the actual method format */

 Set the TouchPad on/off, 0 - Disable | 1 - Enable */

	/*

	 * Check for supported values, where:

	 * 0 - Disabled

	 * 1 - Alternate (Non USB conformant devices that require more power)

	 * 2 - Auto (USB conformant devices)

	 * 3 - Typical

 Set the USB charging mode to internal value */

 Determine the status: 0x4 - Enabled | 0x1 - Disabled */

 Determine the battery level set */

	/*

	 * Set the status of the function:

	 * 0 - Disabled

	 * 1-100 - Enabled

	/*

	 * Check for the function keys mode where:

	 * 0 - Normal operation (F{1-12} as usual and hotkeys via FN-F{1-12})

	 * 1 - Special functions (Opposite of the above setting)

	/*

	 * Check for USB 3 mode where:

	 * 0 - Disabled (Acts like a USB 2 port, saving power)

	 * 1 - Enabled

	/*

	 * Check for supported values

	 * Depending on the laptop model, some only support these two:

	 * 0 - Maximum Performance

	 * 1 - Battery Optimized

	 *

	 * While some others support all three methods:

	 * 0 - Maximum Performance

	 * 1 - Performance

	 * 2 - Battery Optimized

 Update the sysfs entries */

 Notify LED subsystem about keyboard backlight change */

 Emulate the keyboard backlight event */

/*

 * IIO device

/*

 * Misc device

 Fillout the SMM struct with the TCI call results */

 Ensure we are being called with a SCI_{GET, SET} register */

/*

 * WWAN RFKill handlers

/*

 * Hotkeys

	/*

	 * Enable the "Special Functions" mode only if they are

	 * supported and if they are activated.

/*

 * Returns hotkey scancode, or < 0 on failure.

 Act on key press; ignore key release */

				/*

				 * This is a workaround for an unresolved

				 * issue on some machines where system events

				 * sporadically become disabled.

	/*

	 * For some machines the SCI responsible for providing hotkey

	 * notification doesn't fire. We can trigger the notification

	 * whenever the Fn key is pressed using the NTFY method, if

	 * supported, so if it's present set up an i8042 key filter

	 * for this purpose.

	/*

	 * Determine hotkey query interface. Prefer using the INFO

	 * method when it is available.

	/*

	 * Some machines don't support the backlight methods at all, and

	 * others support it read-only. Either of these is pretty useless,

	 * so only register the backlight device if the backlight method

	 * supports both reads and writes.

	/*

	 * If transflective backlight is supported and the brightness is zero

	 * (lowest brightness level), the set_lcd_brightness function will

	 * activate the transflective backlight, making the LCD appear to be

	 * turned off, simply increment the brightness level to avoid that.

	/*

	 * Tell acpi-video-detect code to prefer vendor backlight on all

	 * systems with transflective backlight and on dmi matched systems.

 Adding an extra level and having 0 change to transflective mode */

 Query the BIOS for supported features */

	/*

	 * The "Special Functions" are always supported by the laptops

	 * with the new keyboard layout, query for its presence to help

	 * determine the keymap layout to use.

 Determine whether or not BIOS supports transflective backlight */

	/*

	 * Only register the LED if KBD illumination is supported

	 * and the keyboard backlight operation mode is set to FN-Z

	 * or we detect a second gen keyboard backlight

 Hotkeys and some system events */

		/*

		 * Machines with this WMI GUID aren't supported due to bugs in

		 * their AML.

		 *

		 * Return silently to avoid triggering a netlink event.

 Dock events */

 Thermal events */

 LID closed */

 LID is closed and Dock has been ejected */

 SATA power events */

 Keyboard backlight mode changed */

 Update sysfs entries */

 Notify LED subsystem about keyboard backlight change */

 Unknown */

 Unknown */

 Unknown */

 Unknown */

 Unknown */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Support for EC-connected GPIOs for identify

 * LED/button on Barco P50 board

 *

 * Copyright (C) 2021 Barco NV

 * Author: Santosh Kumar Yadav <santoshkumar.yadav@barco.com>

 GPIO lines */

 GPIO IO Ports */

 EC output buffer full */

 EC input buffer full */

 EC mailbox registers */

 GPIO LEDs */

 GPIO keyboard */

 low level access routines */

 clear output buffer flag, prevent unfinished commands */

 cmd/address */

 cmd/address */

 data */

 mbox routines */

 cmd is 0 when idle */

 gpio routines */

 reset mbox */

 gpio-keys-polled uses old-style gpio interface, pass the right identifier */

 Board setup */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * WMI embedded Binary MOF driver

 *

 * Copyright (c) 2015 Andrew Lutomirski

 * Copyright (C) 2017 VMware, Inc. All Rights Reserved.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2006-2012 Robert Gerlach <khnz@gmx.de>

 * Copyright (C) 2005-2006 Jan Rychter <jan@rychter.com>

 Fujitsu Siemens Computer GmbH */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for the Intel SCU IPC mechanism

 *

 * (C) Copyright 2008-2010,2015 Intel Corporation

 * Author: Sreedhara DS (sreedhara.ds@intel.com)

 *

 * SCU running in ARC processor communicates with other entity running in IA

 * core through IPC mechanism which in turn messaging between IA core ad SCU.

 * SCU has two IPC mechanism IPC-1 and IPC-2. IPC-1 is used between IA32 and

 * SCU where IPC-2 is used between P-Unit and SCU. This driver delas with

 * IPC-1 Driver provides an API for power control unit registers (e.g. MSIC)

 * along with other APIs.

 IPC defines the following message types */

 Power controller unit read/write */

 Command id associated with message IPCMSG_PCNTRL */

 Register write */

 Register read */

 Register read-modify-write */

/*

 * IPC register summary

 *

 * IPC register blocks are memory mapped at fixed address of PCI BAR 0.

 * To read or write information to the SCU, driver writes to IPC-1 memory

 * mapped registers. The following is the IPC mechanism

 *

 * 1. IA core cDMI interface claims this transaction and converts it to a

 *    Transaction Layer Packet (TLP) message which is sent across the cDMI.

 *

 * 2. South Complex cDMI block receives this message and writes it to

 *    the IPC-1 register block, causing an interrupt to the SCU

 *

 * 3. SCU firmware decodes this interrupt and IPC message and the appropriate

 *    message handler is called within firmware.

 IPC Write buffer Size */

 IPC Read buffer Size */

 IPC command register IOC bit */

/*

 * IPC Write/Read Buffers:

 * 16 byte buffer for sending and receiving data to and from SCU.

 Timeout in jiffies */

 Only one for now */

 lock used to prevent multiple call to SCU */

/**

 * intel_scu_ipc_dev_get() - Get SCU IPC instance

 *

 * The recommended new API takes SCU IPC instance as parameter and this

 * function can be called by driver to get the instance. This also makes

 * sure the driver providing the IPC functionality cannot be unloaded

 * while the caller has the instance.

 *

 * Call intel_scu_ipc_dev_put() to release the instance.

 *

 * Returns %NULL if SCU IPC is not currently available.

		/*

		 * Prevent the IPC provider from being unloaded while it

		 * is being used.

/**

 * intel_scu_ipc_dev_put() - Put SCU IPC instance

 * @scu: SCU IPC instance

 *

 * This function releases the SCU IPC instance retrieved from

 * intel_scu_ipc_dev_get() and allows the driver providing IPC to be

 * unloaded.

/**

 * devm_intel_scu_ipc_dev_get() - Allocate managed SCU IPC device

 * @dev: Device requesting the SCU IPC device

 *

 * The recommended new API takes SCU IPC instance as parameter and this

 * function can be called by driver to get the instance. This also makes

 * sure the driver providing the IPC functionality cannot be unloaded

 * while the caller has the instance.

 *

 * Returns %NULL if SCU IPC is not currently available.

/*

 * Send ipc command

 * Command Register (Write Only):

 * A write to this register results in an interrupt to the SCU core processor

 * Format:

 * |rfu2(8) | size(8) | command id(4) | rfu1(3) | ioc(1) | command(8)|

/*

 * Write ipc data

 * IPC Write Buffer (Write Only):

 * 16-byte buffer for sending data associated with IPC command to

 * SCU. Size of the data is specified in the IPC_COMMAND_REG register

/*

 * Status Register (Read Only):

 * Driver will read this register to get the ready/busy status of the IPC

 * block and error status of the IPC command that was just processed by SCU

 * Format:

 * |rfu3(8)|error code(8)|initiator id(8)|cmd id(4)|rfu1(2)|error(1)|busy(1)|

 Read ipc byte data */

 Read ipc u32 data */

 Wait till scu status is busy */

 Wait till ipc ioc interrupt is received or timeout in 10 HZ */

 Read/Write power control(PMIC in Langwell, MSIC in PenWell) registers */

 Write wbuff */

 Read rbuf */

 Workaround: values are read as 0 without memcpy_fromio */

/**

 * intel_scu_ipc_dev_ioread8() - Read a byte via the SCU

 * @scu: Optional SCU IPC instance

 * @addr: Register on SCU

 * @data: Return pointer for read byte

 *

 * Read a single register. Returns %0 on success or an error code. All

 * locking between SCU accesses is handled for the caller.

 *

 * This function may sleep.

/**

 * intel_scu_ipc_dev_iowrite8() - Write a byte via the SCU

 * @scu: Optional SCU IPC instance

 * @addr: Register on SCU

 * @data: Byte to write

 *

 * Write a single register. Returns %0 on success or an error code. All

 * locking between SCU accesses is handled for the caller.

 *

 * This function may sleep.

/**

 * intel_scu_ipc_dev_readv() - Read a set of registers

 * @scu: Optional SCU IPC instance

 * @addr: Register list

 * @data: Bytes to return

 * @len: Length of array

 *

 * Read registers. Returns %0 on success or an error code. All locking

 * between SCU accesses is handled for the caller.

 *

 * The largest array length permitted by the hardware is 5 items.

 *

 * This function may sleep.

/**

 * intel_scu_ipc_dev_writev() - Write a set of registers

 * @scu: Optional SCU IPC instance

 * @addr: Register list

 * @data: Bytes to write

 * @len: Length of array

 *

 * Write registers. Returns %0 on success or an error code. All locking

 * between SCU accesses is handled for the caller.

 *

 * The largest array length permitted by the hardware is 5 items.

 *

 * This function may sleep.

/**

 * intel_scu_ipc_dev_update() - Update a register

 * @scu: Optional SCU IPC instance

 * @addr: Register address

 * @data: Bits to update

 * @mask: Mask of bits to update

 *

 * Read-modify-write power control unit register. The first data argument

 * must be register value and second is mask value mask is a bitmap that

 * indicates which bits to update. %0 = masked. Don't modify this bit, %1 =

 * modify this bit. returns %0 on success or an error code.

 *

 * This function may sleep. Locking between SCU accesses is handled

 * for the caller.

/**

 * intel_scu_ipc_dev_simple_command() - Send a simple command

 * @scu: Optional SCU IPC instance

 * @cmd: Command

 * @sub: Sub type

 *

 * Issue a simple command to the SCU. Do not use this interface if you must

 * then access data as any data values may be overwritten by another SCU

 * access by the time this function returns.

 *

 * This function may sleep. Locking for SCU accesses is handled for the

 * caller.

/**

 * intel_scu_ipc_dev_command_with_size() - Command with data

 * @scu: Optional SCU IPC instance

 * @cmd: Command

 * @sub: Sub type

 * @in: Input data

 * @inlen: Input length in bytes

 * @size: Input size written to the IPC command register in whatever

 *	  units (dword, byte) the particular firmware requires. Normally

 *	  should be the same as @inlen.

 * @out: Output data

 * @outlen: Output length in bytes

 *

 * Issue a command to the SCU which involves data transfers. Do the

 * data copies under the lock but leave it for the caller to interpret.

/*

 * Interrupt handler gets called when ioc bit of IPC_COMMAND_REG set to 1

 * When ioc bit is set to 1, caller api must wait for interrupt handler called

 * which in turn unlocks the caller api. Currently this is not used

 *

 * This is edge triggered so we need take no action to clear anything

/**

 * __intel_scu_ipc_register() - Register SCU IPC device

 * @parent: Parent device

 * @scu_data: Data used to configure SCU IPC

 * @owner: Module registering the SCU IPC device

 *

 * Call this function to register SCU IPC mechanism under @parent.

 * Returns pointer to the new SCU IPC device or ERR_PTR() in case of

 * failure. The caller may use the returned instance if it needs to do

 * SCU IPC calls itself.

 We support only one IPC */

	/*

	 * After this point intel_scu_ipc_release() takes care of

	 * releasing the SCU IPC resources once refcount drops to zero.

 Assign device at last */

/**

 * intel_scu_ipc_unregister() - Unregister SCU IPC

 * @scu: SCU IPC handle

 *

 * This unregisters the SCU IPC device and releases the acquired

 * resources once the refcount goes to zero.

/**

 * __devm_intel_scu_ipc_register() - Register managed SCU IPC device

 * @parent: Parent device

 * @scu_data: Data used to configure SCU IPC

 * @owner: Module registering the SCU IPC device

 *

 * Call this function to register managed SCU IPC mechanism under

 * @parent. Returns pointer to the new SCU IPC device or ERR_PTR() in

 * case of failure. The caller may use the returned instance if it needs

 * to do SCU IPC calls itself.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  HP Compaq TC1100 Tablet WMI Extras Driver

 *

 *  Copyright (C) 2007 Carlos Corbacho <carlos@strangeworlds.co.uk>

 *  Copyright (C) 2004 Jamey Hicks <jamey.hicks@hp.com>

 *  Copyright (C) 2001, 2002 Andy Grover <andrew.grover@intel.com>

 *  Copyright (C) 2001, 2002 Paul Diefenbaugh <paul.s.diefenbaugh@intel.com>

/* --------------------------------------------------------------------------

				Device Management

/* --------------------------------------------------------------------------

				FS Interface (/sys)

/*

 * Read/ write bool sysfs macro

/* --------------------------------------------------------------------------

				Driver Model

 SPDX-License-Identifier: GPL-2.0

/*

 *  Huawei WMI laptop extras driver

 *

 *  Copyright (C) 2018	      Ayman Bagabas <ayman.bagabas@gmail.com>

/*

 * Huawei WMI GUIDs

 Legacy GUIDs */

 HWMI commands */

 \GBTT */

 \SBTT */

 \GFRS */

 \SFRS */

 \SMLS */

 Huawei |M| key

 Keyboard backlit

 Quirks */

 Utils */

/* HWMI takes a 64 bit input and returns either a package with 2 buffers, one of

 * 4 bytes and the other of 256 bytes, or one buffer of size 0x104 (260) bytes.

 * The first 4 bytes are ignored, we ignore the first 4 bytes buffer if we got a

 * package, or skip the first 4 if a buffer of 0x104 is used. The first byte of

 * the remaining 0x100 sized buffer has the return status of every call. In case

 * the return status is non-zero, we return -ENODEV but still copy the returned

 * buffer to the given buffer parameter (buf).

	/* Some models require calling HWMI twice to execute a command. We evaluate

	 * HWMI and if we get a non-zero return status we evaluate it again.

		/* Models that implement both "legacy" and HWMI tend to return a 0x104

		 * sized buffer instead of a package of 0x4 and 0x100 buffers.

 Skip the first 4 bytes.

		/* HWMI returns a package with 2 buffer elements, one of 4 bytes and the

		 * other is 256 bytes.

 Shouldn't get here! */

 LEDs */

 This is a workaround until the "legacy" interface is implemented. */

 Battery protection */

 Find the last two non-zero values. Return status is ignored. */

	/* This is an edge case were some models turn battery protection

	 * off without changing their thresholds values. We clear the

	 * values before turning off protection. Sometimes we need a sleep delay to

	 * make sure these values make their way to EC memory.

 Fn lock */

 Find the first non-zero value. Return status is ignored. */

 -1 undefined, 0 off, 1 on.

 0 undefined, 1 off, 2 on.

 debugfs */

 Input */

	/*

	 * WMI0 uses code 0x80 to indicate a hotkey event.

	 * The actual key is fetched from the method WQ00

	 * using WMI0_EXPENSIVE_GUID.

 Huawei driver */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2009-2010 Intel Corporation

 *

 * Authors:

 *	Jesse Barnes <jbarnes@virtuousgeek.org>

/*

 * Some Intel Ibex Peak based platforms support so-called "intelligent

 * power sharing", which allows the CPU and GPU to cooperate to maximize

 * performance within a given TDP (thermal design point).  This driver

 * performs the coordination between the CPU and GPU, monitors thermal and

 * power statistics in the platform, and initializes power monitoring

 * hardware.  It also provides a few tunables to control behavior.  Its

 * primary purpose is to safely allow CPU and GPU turbo modes to be enabled

 * by tracking power and thermal budget; secondarily it can boost turbo

 * performance by allocating more power or thermal budget to the CPU or GPU

 * based on available headroom and activity.

 *

 * The basic algorithm is driven by a 5s moving average of temperature.  If

 * thermal headroom is available, the CPU and/or GPU power clamps may be

 * adjusted upwards.  If we hit the thermal ceiling or a thermal trigger,

 * we scale back the clamp.  Aside from trigger events (when we're critically

 * close or over our TDP) we don't adjust the clamps more than once every

 * five seconds.

 *

 * The thermal device (device 31, function 6) has a set of registers that

 * are updated by the ME firmware.  The ME should also take the clamp values

 * written to those registers and write them to the CPU, but we currently

 * bypass that functionality and write the CPU MSR directly.

 *

 * UNSUPPORTED:

 *   - dual MCP configs

 *

 * TODO:

 *   - handle CPU hotplug

 *   - provide turbo enable/disable api

 *

 * Related documents:

 *   - CDI 403777, 403778 - Auburndale EDS vol 1 & 2

 *   - CDI 401376 - Ibex Peak EDS

 *   - ref 26037, 26641 - IPS BIOS spec

 *   - ref 26489 - Nehalem BIOS writer's guide

 *   - ref 26921 - Ibex Peak BIOS Specification

/*

 * Package level MSRs for monitor/control

/*

 * Core/thread MSRs for monitoring

/*

 * Thermal PCI device regs

 No GFX turbo support */

 No CPU turbo support */

 Perf policy up to driver */

 BIOS prefers CPU perf */

 BIOS wants balanced perf */

 BIOS prefers GFX perf */

 BIOS run time support */

 undocumented power accumulator in joules */

 32 bits */

 16 bits */

 turbo disabled due to power */

 turbo disabled due to high temp */

 user disabled turbo */

 platform disabled turbo */

 power management disabled turbo */

 some kind of error disabled turbo */

 ME should update every ~200ms */

 ms */

 For initial average collection */

 ms */

 5s moving window of samples */

 Per-SKU limits */

 mW units */

 degrees C */

 Max temps are -10 degrees C to avoid PROCHOT# */

 Average CPU core temps (all averages in .01 degrees C for precision) */

 GMCH average */

 Average for the CPU (both cores?) */

 Average power consumption (in mW) */

 Offset values */

 Maximums & prefs, protected by turbo status lock */

 Optional MCH interfaces for if i915 is in use */

 For restoration at unload */

/**

 * ips_cpu_busy - is CPU busy?

 * @ips: IPS driver struct

 *

 * Check CPU for load to see whether we should increase its thermal budget.

 *

 * RETURNS:

 * True if the CPU could use more power, false otherwise.

/**

 * ips_cpu_raise - raise CPU power clamp

 * @ips: IPS driver struct

 *

 * Raise the CPU power clamp by %IPS_CPU_STEP, in accordance with TDP for

 * this platform.

 *

 * We do this by adjusting the TURBO_POWER_CURRENT_LIMIT MSR upwards (as

 * long as we haven't hit the TDP limit for the SKU).

 1W increase */

 Clamp to SKU TDP limit */

/**

 * ips_cpu_lower - lower CPU power clamp

 * @ips: IPS driver struct

 *

 * Lower CPU power clamp b %IPS_CPU_STEP if possible.

 *

 * We do this by adjusting the TURBO_POWER_CURRENT_LIMIT MSR down, going

 * as low as the platform limits will allow (though we could go lower there

 * wouldn't be much point).

 1W decrease */

 Clamp to SKU TDP limit */

/**

 * do_enable_cpu_turbo - internal turbo enable function

 * @data: unused

 *

 * Internal function for actually updating MSRs.  When we enable/disable

 * turbo, we need to do it on each CPU; this function is the one called

 * by on_each_cpu() when needed.

/**

 * ips_enable_cpu_turbo - enable turbo mode on all CPUs

 * @ips: IPS driver struct

 *

 * Enable turbo mode by clearing the disable bit in IA32_PERF_CTL on

 * all logical threads.

 Already on, no need to mess with MSRs */

/**

 * do_disable_cpu_turbo - internal turbo disable function

 * @data: unused

 *

 * Internal function for actually updating MSRs.  When we enable/disable

 * turbo, we need to do it on each CPU; this function is the one called

 * by on_each_cpu() when needed.

/**

 * ips_disable_cpu_turbo - disable turbo mode on all CPUs

 * @ips: IPS driver struct

 *

 * Disable turbo mode by setting the disable bit in IA32_PERF_CTL on

 * all logical threads.

 Already off, leave it */

/**

 * ips_gpu_busy - is GPU busy?

 * @ips: IPS driver struct

 *

 * Check GPU for load to see whether we should increase its thermal budget.

 * We need to call into the i915 driver in this case.

 *

 * RETURNS:

 * True if the GPU could use more power, false otherwise.

/**

 * ips_gpu_raise - raise GPU power clamp

 * @ips: IPS driver struct

 *

 * Raise the GPU frequency/power if possible.  We need to call into the

 * i915 driver in this case.

/**

 * ips_gpu_lower - lower GPU power clamp

 * @ips: IPS driver struct

 *

 * Lower GPU frequency/power if possible.  Need to call i915.

/**

 * ips_enable_gpu_turbo - notify the gfx driver turbo is available

 * @ips: IPS driver struct

 *

 * Call into the graphics driver indicating that it can safely use

 * turbo mode.

/**

 * ips_disable_gpu_turbo - notify the gfx driver to disable turbo mode

 * @ips: IPS driver struct

 *

 * Request that the graphics driver disable turbo mode.

 Avoid calling i915 if turbo is already disabled */

/**

 * mcp_exceeded - check whether we're outside our thermal & power limits

 * @ips: IPS driver struct

 *

 * Check whether the MCP is over its thermal or power budget.

/**

 * cpu_exceeded - check whether a CPU core is outside its limits

 * @ips: IPS driver struct

 * @cpu: CPU number to check

 *

 * Check a given CPU's average temp or power is over its limit.

/**

 * mch_exceeded - check whether the GPU is over budget

 * @ips: IPS driver struct

 *

 * Check the MCH temp & power against their maximums.

/**

 * verify_limits - verify BIOS provided limits

 * @ips: IPS structure

 *

 * BIOS can optionally provide non-default limits for power and temp.  Check

 * them here and use the defaults if the BIOS values are not provided or

 * are otherwise unusable.

/**

 * update_turbo_limits - get various limits & settings from regs

 * @ips: IPS driver struct

 *

 * Update the IPS power & temp limits, along with turbo enable flags,

 * based on latest register contents.

 *

 * Used at init time and for runtime BIOS support, which requires polling

 * the regs for updates (as a result of AC->DC transition for example).

 *

 * LOCKING:

 * Caller must hold turbo_status_lock (outside of init)

	/* 

	 * Disable turbo for now, until we can figure out why the power figures

	 * are wrong

 Ignore BIOS CPU vs GPU pref */

/**

 * ips_adjust - adjust power clamp based on thermal state

 * @data: ips driver structure

 *

 * Wake up every 5s or so and check whether we should adjust the power clamp.

 * Check CPU and GPU load to determine which needs adjustment.  There are

 * several things to consider here:

 *   - do we need to adjust up or down?

 *   - is CPU busy?

 *   - is GPU busy?

 *   - is CPU in turbo?

 *   - is GPU in turbo?

 *   - is CPU or GPU preferred? (CPU is default)

 *

 * So, given the above, we do the following:

 *   - up (TDP available)

 *     - CPU not busy, GPU not busy - nothing

 *     - CPU busy, GPU not busy - adjust CPU up

 *     - CPU not busy, GPU busy - adjust GPU up

 *     - CPU busy, GPU busy - adjust preferred unit up, taking headroom from

 *       non-preferred unit if necessary

 *   - down (at TDP limit)

 *     - adjust both CPU and GPU down if possible

 *

		cpu+ gpu+	cpu+gpu-	cpu-gpu+	cpu-gpu-

cpu < gpu <	cpu+gpu+	cpu+		gpu+		nothing

cpu < gpu >=	cpu+gpu-(mcp<)	cpu+gpu-(mcp<)	gpu-		gpu-

cpu >= gpu <	cpu-gpu+(mcp<)	cpu-		cpu-gpu+(mcp<)	cpu-

cpu >= gpu >=	cpu-gpu-	cpu-gpu-	cpu-gpu-	cpu-gpu-

 *

	/*

	 * Adjust CPU and GPU clamps every 5s if needed.  Doing it more

	 * often isn't recommended due to ME interaction.

 Update turbo status if necessary */

 We're outside our comfort zone, crank them down */

/*

 * Helpers for reading out temp/power values and calculating their

 * averages for the decision making and monitoring functions.

 MCH temp reporting buggy */

 discard fractional component */

	/*

	 * CEC is in joules/65535.  Take difference over time to

	 * get watts.

 period is in ms and we want mW */

 Multiply by 100 for extra precision */

/**

 * ips_monitor - temp/power monitoring thread

 * @data: ips driver structure

 *

 * This is the main function for the IPS driver.  It monitors power and

 * tempurature in the MCP and adjusts CPU and GPU power clams accordingly.

 *

 * We keep a 5s moving average of power consumption and tempurature.  Using

 * that data, along with CPU vs GPU preference, we adjust the power clamps

 * up or down.

 Collect an initial average */

 Start the adjustment thread now that we have data */

	/*

	 * Ok, now we have an initial avg.  From here on out, we track the

	 * running avg using a decaying average calculation.  This allows

	 * us to reduce the sample frequency if the CPU and GPU are idle.

 MCP itself */

 Processor 0 */

 Power */

 Processor 1 */

 MCH */

 Power */

		/*

		 * Make sure ME is updating thermal regs.

		 * Note:

		 * If it's been more than a second since the last update,

		 * the ME is probably hung.

 Calculate actual sample period for power averaging */

/**

 * ips_irq_handler - handle temperature triggers and other IPS events

 * @irq: irq number

 * @arg: unused

 *

 * Handle temperature limit trigger events, generally by lowering the clamps.

 * If we're at a critical limit, we clamp back to the lowest possible value

 * to prevent emergency shutdown.

 STS update from EC? */

 ignore EC CPU vs GPU pref */

			/* 

			 * Disable turbo for now, until we can figure

			 * out why the power figures are wrong

 Thermal trip */

 Expose current state and limits in debugfs if possible */

 Convert to .1W/A units */

 Watts Amperes */

 CONFIG_DEBUG_FS */

/**

 * ips_detect_cpu - detect whether CPU supports IPS

 *

 * Walk our list and see if we're on a supported CPU.  If we find one,

 * return the limits for it.

	/*

	 * If the turbo enable bit isn't set, we shouldn't try to enable/disable

	 * turbo manually or we'll get an illegal MSR access, even though

	 * turbo will still be available.

 Sanity check TDP against CPU */

/**

 * ips_get_i915_syms - try to get GPU control methods from i915 driver

 * @ips: IPS driver

 *

 * The i915 driver exports several interfaces to allow the IPS driver to

 * monitor and control graphics turbo mode.  If we can find them, we can

 * enable graphics turbo, otherwise we must disable it to avoid exceeding

 * thermal and power limits in the MCP.

	/* We can't cleanly get at the various ips_driver structs from

	 * this caller (the i915 driver), so just set a flag saying

	 * that it's time to try getting the symbols again.

 terminating entry */

 BIOS may update limits at runtime */

	/*

	 * Check PLATFORM_INFO MSR to make sure this chip is

	 * turbo capable.

	/*

	 * IRQ handler for ME interaction

	 * Note: don't use MSI here as the PCH has bugs.

 Enable aux, hot & critical interrupts */

 Collect adjustment values */

 Save turbo limits & ratios */

 Create thermal adjust thread */

	/*

	 * Set up the work queue and monitor thread. The monitor thread

	 * will wake up ips_adjust thread.

 Release i915 driver */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * toshiba_wmi.c - Toshiba WMI Hotkey Driver

 *

 * Copyright (C) 2015 Azael Avalos <coproscefalo@gmail.com>

 TODO: Add keymap values once found... */

{ KE_KEY, 0x00, { KEY_ } },*/

 TODO: Add proper checks once we have data */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2020, NVIDIA CORPORATION.  All rights reserved.

/**

 * enum wmi_brightness_method - WMI method IDs

 * @WMI_BRIGHTNESS_METHOD_LEVEL:  Get/Set EC brightness level status

 * @WMI_BRIGHTNESS_METHOD_SOURCE: Get/Set EC Brightness Source

/**

 * enum wmi_brightness_mode - Operation mode for WMI-wrapped method

 * @WMI_BRIGHTNESS_MODE_GET:            Get the current brightness level/source.

 * @WMI_BRIGHTNESS_MODE_SET:            Set the brightness level.

 * @WMI_BRIGHTNESS_MODE_GET_MAX_LEVEL:  Get the maximum brightness level. This

 *                                      is only valid when the WMI method is

 *                                      %WMI_BRIGHTNESS_METHOD_LEVEL.

/**

 * enum wmi_brightness_source - Backlight brightness control source selection

 * @WMI_BRIGHTNESS_SOURCE_GPU: Backlight brightness is controlled by the GPU.

 * @WMI_BRIGHTNESS_SOURCE_EC:  Backlight brightness is controlled by the

 *                             system's Embedded Controller (EC).

 * @WMI_BRIGHTNESS_SOURCE_AUX: Backlight brightness is controlled over the

 *                             DisplayPort AUX channel.

/**

 * struct wmi_brightness_args - arguments for the WMI-wrapped ACPI method

 * @mode:    Pass in an &enum wmi_brightness_mode value to select between

 *           getting or setting a value.

 * @val:     In parameter for value to set when using %WMI_BRIGHTNESS_MODE_SET

 *           mode. Not used in conjunction with %WMI_BRIGHTNESS_MODE_GET or

 *           %WMI_BRIGHTNESS_MODE_GET_MAX_LEVEL mode.

 * @ret:     Out parameter returning retrieved value when operating in

 *           %WMI_BRIGHTNESS_MODE_GET or %WMI_BRIGHTNESS_MODE_GET_MAX_LEVEL

 *           mode. Not used in %WMI_BRIGHTNESS_MODE_SET mode.

 * @ignored: Padding; not used. The ACPI method expects a 24 byte params struct.

 *

 * This is the parameters structure for the WmiBrightnessNotify ACPI method as

 * wrapped by WMI. The value passed in to @val or returned by @ret will be a

 * brightness value when the WMI method ID is %WMI_BRIGHTNESS_METHOD_LEVEL, or

 * an &enum wmi_brightness_source value with %WMI_BRIGHTNESS_METHOD_SOURCE.

/**

 * wmi_brightness_notify() - helper function for calling WMI-wrapped ACPI method

 * @w:    Pointer to the struct wmi_device identified by %WMI_BRIGHTNESS_GUID

 * @id:   The WMI method ID to call (e.g. %WMI_BRIGHTNESS_METHOD_LEVEL or

 *        %WMI_BRIGHTNESS_METHOD_SOURCE)

 * @mode: The operation to perform on the method (e.g. %WMI_BRIGHTNESS_MODE_SET

 *        or %WMI_BRIGHTNESS_MODE_GET)

 * @val:  Pointer to a value passed in by the caller when @mode is

 *        %WMI_BRIGHTNESS_MODE_SET, or a value passed out to caller when @mode

 *        is %WMI_BRIGHTNESS_MODE_GET or %WMI_BRIGHTNESS_MODE_GET_MAX_LEVEL.

 *

 * Returns 0 on success, or a negative error number on failure.

	/*

	 * This driver is only to be used when brightness control is handled

	 * by the EC; otherwise, the GPU driver(s) should control brightness.

	/*

	 * Identify this backlight device as a firmware device so that it can

	 * be prioritized over any exposed GPU-driven raw device(s).

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Support for rfkill on some Fujitsu-Siemens Amilo laptops.

 * Copyright 2011 Ben Hutchings.

 *

 * Based in part on the fsam7440 driver, which is:

 * Copyright 2005 Alejandro Vidal Mata & Javier Vidal Mata.

 * and on the fsaa1655g driver, which is:

 * Copyright 2006 Martin Večeřa.

/*

 * These values were obtained from disassembling and debugging the

 * PM.exe program installed in the Fujitsu-Siemens AMILO A1655G

/*

 * These values were obtained from disassembling the PM.exe program

 * installed in the Fujitsu-Siemens AMILO M 7440

 Check whether the state has changed correctly */

 SPDX-License-Identifier: GPL-2.0

/*

 *  adv_swbutton.c - Software Button Interface Driver.

 *

 *  (C) Copyright 2020 Advantech Corporation, Inc

 *

/*-------------------------------------------------------------------------

 *                               Driver Interface

 *--------------------------------------------------------------------------

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Toshiba HDD Active Protection Sensor (HAPS) driver

 *

 * Copyright (C) 2014 Azael Avalos <coproscefalo@gmail.com>

 HAPS functions */

 sysfs files */

	/*

	 * Check for supported levels, which can be:

	 * 0 - Disabled | 1 - Low | 2 - Medium | 3 - High

 Set the sensor level */

 The only accepted value is 1 */

 Reset the protection interface */

/*

 * ACPI stuff

 Helper function */

	/*

	 * A non existent device as well as having (only)

	 * Solid State Drives can cause the call to fail.

 Set the protection level, currently at level 2 (Medium) */

 Deactivate the protection on suspend */

 Set the stored protection level */

 Reset the protection on resume */

 SPDX-License-Identifier: GPL-2.0+

/*

 * PC-Engines APUv2/APUv3 board platform driver

 * for GPIO buttons and LEDs

 *

 * Copyright (C) 2018 metux IT consult

 * Author: Enrico Weigelt <info@metux.net>

/*

 * NOTE: this driver only supports APUv2/3 - not APUv1, as this one

 * has completely different register layouts.

 Register mappings */

 Order in which the GPIO lines are defined in the register list */

 GPIO device */

 GPIO LEDs device */

 Terminating entry */

 GPIO keyboard device */

 Terminating entry */

 Board setup */

 Note: matching works on string prefix, so "apu2" must come before "apu" */

 APU2 w/ legacy BIOS < 4.0.8 */

 APU2 w/ legacy BIOS >= 4.0.8 */

 APU2 w/ mainline BIOS */

 APU3 w/ legacy BIOS < 4.0.8 */

 APU3 w/ legacy BIOS >= 4.0.8 */

 APU3 w/ mainline BIOS */

 APU4 w/ legacy BIOS < 4.0.8 */

 APU4 w/ legacy BIOS >= 4.0.8 */

 APU4 w/ mainline BIOS */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  hp_accel.c - Interface between LIS3LV02DL driver and HP ACPI BIOS

 *

 *  Copyright (C) 2007-2008 Yan Burman

 *  Copyright (C) 2008 Eric Piel

 *  Copyright (C) 2008-2009 Pavel Machek

 Delayed LEDs infrastructure ------------------------------------ */

 Special LED class that can defer work */

 For driver */

 HP-specific accelerometer driver ------------------------------------ */

/* e0 25, e0 26, e0 27, e0 28 are scan codes that the accelerometer with acpi id

 For automatic insertion of the module */

 HP Mobile Data Protection System PNP */

 HP Mobile Data Protection System PNP */

 HP Mobile Data Protection System PNP */

/**

 * lis3lv02d_acpi_init - initialize the device for ACPI

 * @lis3: pointer to the device struct

 *

 * Returns 0 on success.

/**

 * lis3lv02d_acpi_read - ACPI ALRD method: read a register

 * @lis3: pointer to the device struct

 * @reg:    the register to read

 * @ret:    result of the operation

 *

 * Returns 0 on success.

/**

 * lis3lv02d_acpi_write - ACPI ALWR method: write to a register

 * @lis3: pointer to the device struct

 * @reg:    the register to write to

 * @val:    the value to write

 *

 * Returns 0 on success.

 Not used when writting */

/* Represents, for each axis seen by userspace, the corresponding hw axis (+1).

 product names are truncated to match all kinds of a same model */

 Intel-based HP Pavilion dv5 */

 AMD-based HP Pavilion dv5 */

/* Laptop models without axis info (yet):

 * "NC6910" "HP Compaq 6910"

 * "NC2400" "HP Compaq nc2400"

 * "NX74x0" "HP Compaq nx74"

 * "NX6325" "HP Compaq nx6325"

 * "NC4400" "HP Compaq nc4400"

 Not used when writing */

 obtain IRQ number of our device from ACPI */

 If possible use a "standard" axes order */

 call the core layer do its init */

	/* filter to remove HPQ6000 accelerometer data

 make sure the device is off when we suspend */

 For the HP MDPS aka 3D Driveguard */

 SPDX-License-Identifier: GPL-2.0-or-later

-*-linux-c-*-*/

/*

  Copyright (C) 2007,2008 Jonathan Woithe <jwoithe@just42.net>

  Copyright (C) 2008 Peter Gruber <nokos@gmx.net>

  Copyright (C) 2008 Tony Vroon <tony@linx.net>

  Based on earlier work:

    Copyright (C) 2003 Shane Spencer <shane@bogomip.com>

    Adrian Yee <brewt-fujitsu@brewt.org>



  Templated from msi-laptop.c and thinkpad_acpi.c which is copyright

  by its respective authors.



/*

 * fujitsu-laptop.c - Fujitsu laptop support, providing access to additional

 * features made available on a range of Fujitsu laptops including the

 * P2xxx/P5xxx/S6xxx/S7xxx series.

 *

 * This driver implements a vendor-specific backlight control interface for

 * Fujitsu laptops and provides support for hotkeys present on certain Fujitsu

 * laptops.

 *

 * This driver has been tested on a Fujitsu Lifebook S6410, S7020 and

 * P8010.  It should work on most P-series and S-series Lifebooks, but

 * YMMV.

 *

 * The module parameter use_alt_lcd_levels switches between different ACPI

 * brightness controls which are used by different Fujitsu laptops.  In most

 * cases the correct method is automatically detected. "use_alt_lcd_levels=1"

 * is applicable for a Fujitsu Lifebook S6410 if autodetection fails.

 *

 FUNC interface - command values */

 FUNC interface - responses */

 FUNC interface - status flags */

 FUNC interface - LED control */

 FUNC interface - backlight power control */

 Scancodes read from the GIRB register */

 Hotkey ringbuffer limits */

 Module parameters */

 Device controlling the backlight and associated keys */

 Device used to access hotkeys and other features on the laptop */

 Fujitsu ACPI interface function */

 Hardware access for LCD brightness control */

 Backlight device stuff */

 ACPI device for LCD brightness control */

 Brightness notify */

 ACPI device for hotkey handling */

 Soft keys read from status flags */

 "Lock" */

 "Mobility Center */

 "Support" */

 "Presentation" */

 "WWW" */

	/*

	 * Some Fujitsu laptops have a radio toggle button in place of a slide

	 * switch and all such machines appear to also have an RF LED.  Based on

	 * comparing DSDT tables of four Fujitsu Lifebook models (E744, E751,

	 * S7110, S8420; the first one has a radio toggle button, the other

	 * three have slide switches), bit 17 of flags_supported (the value

	 * returned by method S000 of ACPI device FUJ02E3) seems to indicate

	 * whether given model has a radio toggle button.

	/* Support for eco led is not always signaled in bit corresponding

	 * to the bit used to control the led. According to the DSDT table,

	 * bit 14 seems to indicate presence of said led as well.

	 * Confirm by testing the status.

 kfifo */

 No action, result is discarded */

	/* Make sure our bitmask of supported functions is cleared if the

 Suspect this is a keymap of the application panel, print it */

 Sync backlight power status */

	/*

	 * First seen on the Skylake-based Lifebook E736/E746/E756), the

	 * touchpad toggle hotkey (Fn+F4) is handled in software. Other models

	 * have since added additional "soft keys". These are reported in the

	 * status flags queried using FUNC_FLAGS.

 Initialization */

 Register platform stuff */

 Register laptop driver */

