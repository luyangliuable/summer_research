 SPDX-License-Identifier: GPL-2.0

 0 0x00 '^@' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 1 0x01 '^A' */

 00000000 */

 01111000 */

 10000100 */

 11001100 */

 10000100 */

 11001100 */

 10110100 */

 01111000 */

 00000000 */

 00000000 */

 2 0x02 '^B' */

 00000000 */

 01111000 */

 11111100 */

 10110100 */

 11111100 */

 10110100 */

 11001100 */

 01111000 */

 00000000 */

 00000000 */

 3 0x03 '^C' */

 00000000 */

 00000000 */

 00101000 */

 01111100 */

 01111100 */

 00111000 */

 00010000 */

 00000000 */

 00000000 */

 00000000 */

 4 0x04 '^D' */

 00000000 */

 00000000 */

 00010000 */

 00111000 */

 01111100 */

 00111000 */

 00010000 */

 00000000 */

 00000000 */

 00000000 */

 5 0x05 '^E' */

 00000000 */

 00000000 */

 00111000 */

 00111000 */

 01101100 */

 01101100 */

 00010000 */

 00111000 */

 00000000 */

 00000000 */

 6 0x06 '^F' */

 00000000 */

 00000000 */

 00010000 */

 00111000 */

 01111100 */

 01111100 */

 00010000 */

 00111000 */

 00000000 */

 00000000 */

 7 0x07 '^G' */

 00000000 */

 00000000 */

 00000000 */

 00110000 */

 01111000 */

 00110000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 8 0x08 '^H' */

 11111100 */

 11111100 */

 11111100 */

 11001100 */

 10000100 */

 11001100 */

 11111100 */

 11111100 */

 11111100 */

 11111100 */

 9 0x09 '^I' */

 00000000 */

 00000000 */

 00110000 */

 01001000 */

 10000100 */

 01001000 */

 00110000 */

 00000000 */

 00000000 */

 00000000 */

 10 0x0A '^J' */

 11111100 */

 11111100 */

 11001100 */

 10110100 */

 01111000 */

 10110100 */

 11001100 */

 11111100 */

 11111100 */

 11111100 */

 11 0x0B '^K' */

 00000000 */

 00111100 */

 00010100 */

 00100000 */

 01111000 */

 01000100 */

 01000100 */

 00111000 */

 00000000 */

 00000000 */

 12 0x0C '^L' */

 00000000 */

 00111000 */

 01000100 */

 01000100 */

 00111000 */

 00010000 */

 00111000 */

 00010000 */

 00000000 */

 00000000 */

 13 0x0D '^M' */

 00000000 */

 00011000 */

 00010100 */

 00010100 */

 00010000 */

 00010000 */

 01110000 */

 01100000 */

 00000000 */

 00000000 */

 14 0x0E '^N' */

 00000000 */

 00111100 */

 00100100 */

 00111100 */

 00100100 */

 00100100 */

 01101100 */

 01101100 */

 00000000 */

 00000000 */

 15 0x0F '^O' */

 00000000 */

 00010000 */

 01010100 */

 00111000 */

 01101100 */

 00111000 */

 01010100 */

 00010000 */

 00000000 */

 00000000 */

 16 0x10 '^P' */

 00000000 */

 01000000 */

 01100000 */

 01110000 */

 01111000 */

 01110000 */

 01100000 */

 01000000 */

 00000000 */

 00000000 */

 17 0x11 '^Q' */

 00000000 */

 00000100 */

 00001100 */

 00011100 */

 00111100 */

 00011100 */

 00001100 */

 00000100 */

 00000000 */

 00000000 */

 18 0x12 '^R' */

 00000000 */

 00010000 */

 00111000 */

 01010100 */

 00010000 */

 01010100 */

 00111000 */

 00010000 */

 00000000 */

 00000000 */

 19 0x13 '^S' */

 00000000 */

 01001000 */

 01001000 */

 01001000 */

 01001000 */

 01001000 */

 00000000 */

 01001000 */

 00000000 */

 00000000 */

 20 0x14 '^T' */

 00111100 */

 01010100 */

 01010100 */

 01010100 */

 00111100 */

 00010100 */

 00010100 */

 00010100 */

 00000000 */

 00000000 */

 21 0x15 '^U' */

 00111000 */

 01000100 */

 00100000 */

 01010000 */

 01001000 */

 00100100 */

 00010100 */

 00001000 */

 01000100 */

 00111000 */

 22 0x16 '^V' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111000 */

 11111000 */

 11111000 */

 00000000 */

 00000000 */

 23 0x17 '^W' */

 00000000 */

 00010000 */

 00111000 */

 01010100 */

 00010000 */

 01010100 */

 00111000 */

 00010000 */

 01111100 */

 00000000 */

 24 0x18 '^X' */

 00000000 */

 00010000 */

 00111000 */

 01010100 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00000000 */

 00000000 */

 25 0x19 '^Y' */

 00000000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 01010100 */

 00111000 */

 00010000 */

 00000000 */

 00000000 */

 26 0x1A '^Z' */

 00000000 */

 00000000 */

 00010000 */

 00001000 */

 01111100 */

 00001000 */

 00010000 */

 00000000 */

 00000000 */

 00000000 */

 27 0x1B '^[' */

 00000000 */

 00000000 */

 00010000 */

 00100000 */

 01111100 */

 00100000 */

 00010000 */

 00000000 */

 00000000 */

 00000000 */

 28 0x1C '^\' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01000000 */

 01000000 */

 01000000 */

 01111000 */

 00000000 */

 00000000 */

 29 0x1D '^]' */

 00000000 */

 00000000 */

 01001000 */

 10000100 */

 11111100 */

 10000100 */

 01001000 */

 00000000 */

 00000000 */

 00000000 */

 30 0x1E '^^' */

 00000000 */

 00000000 */

 00010000 */

 00010000 */

 00111000 */

 00111000 */

 01111100 */

 01111100 */

 00000000 */

 00000000 */

 31 0x1F '^_' */

 00000000 */

 00000000 */

 01111100 */

 01111100 */

 00111000 */

 00111000 */

 00010000 */

 00010000 */

 00000000 */

 00000000 */

 32 0x20 ' ' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 33 0x21 '!' */

 00000000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00000000 */

 00010000 */

 00000000 */

 00000000 */

 34 0x22 '"' */

 00101000 */

 00101000 */

 00101000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 35 0x23 '#' */

 00000000 */

 00000000 */

 00101000 */

 01111100 */

 00101000 */

 00101000 */

 01111100 */

 00101000 */

 00000000 */

 00000000 */

 36 0x24 '$' */

 00010000 */

 00111000 */

 01010100 */

 01010000 */

 00111000 */

 00010100 */

 01010100 */

 00111000 */

 00010000 */

 00000000 */

 37 0x25 '%' */

 00000000 */

 01100100 */

 01100100 */

 00001000 */

 00010000 */

 00100000 */

 01001100 */

 01001100 */

 00000000 */

 00000000 */

 38 0x26 '&' */

 00000000 */

 00110000 */

 01001000 */

 01010000 */

 00100000 */

 01010100 */

 01001000 */

 00110100 */

 00000000 */

 00000000 */

 39 0x27 ''' */

 00010000 */

 00010000 */

 00010000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 40 0x28 '(' */

 00001000 */

 00010000 */

 00100000 */

 00100000 */

 00100000 */

 00100000 */

 00100000 */

 00010000 */

 00001000 */

 00000000 */

 41 0x29 ')' */

 00100000 */

 00010000 */

 00001000 */

 00001000 */

 00001000 */

 00001000 */

 00001000 */

 00010000 */

 00100000 */

 00000000 */

 42 0x2A '*' */

 00000000 */

 00010000 */

 01010100 */

 00111000 */

 01010100 */

 00010000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 43 0x2B '+' */

 00000000 */

 00000000 */

 00010000 */

 00010000 */

 01111100 */

 00010000 */

 00010000 */

 00000000 */

 00000000 */

 00000000 */

 44 0x2C ',' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00110000 */

 00110000 */

 00010000 */

 00100000 */

 45 0x2D '-' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 46 0x2E '.' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 47 0x2F '/' */

 00000100 */

 00000100 */

 00001000 */

 00001000 */

 00010000 */

 00010000 */

 00100000 */

 00100000 */

 01000000 */

 01000000 */

 48 0x30 '0' */

 00000000 */

 00111000 */

 01000100 */

 01001100 */

 01010100 */

 01100100 */

 01000100 */

 00111000 */

 00000000 */

 00000000 */

 49 0x31 '1' */

 00000000 */

 00010000 */

 00110000 */

 01010000 */

 00010000 */

 00010000 */

 00010000 */

 01111100 */

 00000000 */

 00000000 */

 50 0x32 '2' */

 00000000 */

 00111000 */

 01000100 */

 00000100 */

 00001000 */

 00010000 */

 00100000 */

 01111100 */

 00000000 */

 00000000 */

 51 0x33 '3' */

 00000000 */

 00111000 */

 01000100 */

 00000100 */

 00011000 */

 00000100 */

 01000100 */

 00111000 */

 00000000 */

 00000000 */

 52 0x34 '4' */

 00000000 */

 00001000 */

 00011000 */

 00101000 */

 01001000 */

 01111100 */

 00001000 */

 00001000 */

 00000000 */

 00000000 */

 53 0x35 '5' */

 00000000 */

 01111100 */

 01000000 */

 01111000 */

 00000100 */

 00000100 */

 01000100 */

 00111000 */

 00000000 */

 00000000 */

 54 0x36 '6' */

 00000000 */

 00011000 */

 00100000 */

 01000000 */

 01111000 */

 01000100 */

 01000100 */

 00111000 */

 00000000 */

 00000000 */

 55 0x37 '7' */

 00000000 */

 01111100 */

 00000100 */

 00000100 */

 00001000 */

 00010000 */

 00010000 */

 00010000 */

 00000000 */

 00000000 */

 56 0x38 '8' */

 00000000 */

 00111000 */

 01000100 */

 01000100 */

 00111000 */

 01000100 */

 01000100 */

 00111000 */

 00000000 */

 00000000 */

 57 0x39 '9' */

 00000000 */

 00111000 */

 01000100 */

 01000100 */

 00111100 */

 00000100 */

 00001000 */

 00110000 */

 00000000 */

 00000000 */

 58 0x3A ':' */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 00000000 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 59 0x3B ';' */

 00000000 */

 00000000 */

 00000000 */

 00110000 */

 00110000 */

 00000000 */

 00110000 */

 00110000 */

 00010000 */

 00100000 */

 60 0x3C '<' */

 00000000 */

 00000100 */

 00001000 */

 00010000 */

 00100000 */

 00010000 */

 00001000 */

 00000100 */

 00000000 */

 00000000 */

 61 0x3D '=' */

 00000000 */

 00000000 */

 00000000 */

 01111100 */

 00000000 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 62 0x3E '>' */

 00000000 */

 00100000 */

 00010000 */

 00001000 */

 00000100 */

 00001000 */

 00010000 */

 00100000 */

 00000000 */

 00000000 */

 63 0x3F '?' */

 00000000 */

 00111000 */

 01000100 */

 00000100 */

 00001000 */

 00010000 */

 00000000 */

 00010000 */

 00000000 */

 00000000 */

 64 0x40 '@' */

 00000000 */

 00111000 */

 01000100 */

 01011100 */

 01010100 */

 01011100 */

 01000000 */

 00111000 */

 00000000 */

 00000000 */

 65 0x41 'A' */

 00000000 */

 00010000 */

 00101000 */

 01000100 */

 01000100 */

 01111100 */

 01000100 */

 01000100 */

 00000000 */

 00000000 */

 66 0x42 'B' */

 00000000 */

 01111000 */

 00100100 */

 00100100 */

 00111000 */

 00100100 */

 00100100 */

 01111000 */

 00000000 */

 00000000 */

 67 0x43 'C' */

 00000000 */

 00111000 */

 01000100 */

 01000000 */

 01000000 */

 01000000 */

 01000100 */

 00111000 */

 00000000 */

 00000000 */

 68 0x44 'D' */

 00000000 */

 01111000 */

 00100100 */

 00100100 */

 00100100 */

 00100100 */

 00100100 */

 01111000 */

 00000000 */

 00000000 */

 69 0x45 'E' */

 00000000 */

 01111100 */

 01000000 */

 01000000 */

 01111000 */

 01000000 */

 01000000 */

 01111100 */

 00000000 */

 00000000 */

 70 0x46 'F' */

 00000000 */

 01111100 */

 01000000 */

 01000000 */

 01111000 */

 01000000 */

 01000000 */

 01000000 */

 00000000 */

 00000000 */

 71 0x47 'G' */

 00000000 */

 00111000 */

 01000100 */

 01000000 */

 01011100 */

 01000100 */

 01000100 */

 00111000 */

 00000000 */

 00000000 */

 72 0x48 'H' */

 00000000 */

 01000100 */

 01000100 */

 01000100 */

 01111100 */

 01000100 */

 01000100 */

 01000100 */

 00000000 */

 00000000 */

 73 0x49 'I' */

 00000000 */

 00111000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00111000 */

 00000000 */

 00000000 */

 74 0x4A 'J' */

 00000000 */

 00011100 */

 00001000 */

 00001000 */

 00001000 */

 01001000 */

 01001000 */

 00110000 */

 00000000 */

 00000000 */

 75 0x4B 'K' */

 00000000 */

 01000100 */

 01001000 */

 01010000 */

 01100000 */

 01010000 */

 01001000 */

 01000100 */

 00000000 */

 00000000 */

 76 0x4C 'L' */

 00000000 */

 01000000 */

 01000000 */

 01000000 */

 01000000 */

 01000000 */

 01000000 */

 01111100 */

 00000000 */

 00000000 */

 77 0x4D 'M' */

 00000000 */

 01000100 */

 01101100 */

 01010100 */

 01010100 */

 01000100 */

 01000100 */

 01000100 */

 00000000 */

 00000000 */

 78 0x4E 'N' */

 00000000 */

 01000100 */

 01100100 */

 01010100 */

 01001100 */

 01000100 */

 01000100 */

 01000100 */

 00000000 */

 00000000 */

 79 0x4F 'O' */

 00000000 */

 00111000 */

 01000100 */

 01000100 */

 01000100 */

 01000100 */

 01000100 */

 00111000 */

 00000000 */

 00000000 */

 80 0x50 'P' */

 00000000 */

 01111000 */

 01000100 */

 01000100 */

 01111000 */

 01000000 */

 01000000 */

 01000000 */

 00000000 */

 00000000 */

 81 0x51 'Q' */

 00000000 */

 00111000 */

 01000100 */

 01000100 */

 01000100 */

 01010100 */

 01001000 */

 00110100 */

 00000000 */

 00000000 */

 82 0x52 'R' */

 00000000 */

 01111000 */

 01000100 */

 01000100 */

 01111000 */

 01010000 */

 01001000 */

 01000100 */

 00000000 */

 00000000 */

 83 0x53 'S' */

 00000000 */

 00111000 */

 01000100 */

 01000000 */

 00111000 */

 00000100 */

 01000100 */

 00111000 */

 00000000 */

 00000000 */

 84 0x54 'T' */

 00000000 */

 01111100 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00000000 */

 00000000 */

 85 0x55 'U' */

 00000000 */

 01000100 */

 01000100 */

 01000100 */

 01000100 */

 01000100 */

 01000100 */

 00111000 */

 00000000 */

 00000000 */

 86 0x56 'V' */

 00000000 */

 01000100 */

 01000100 */

 01000100 */

 01000100 */

 01000100 */

 00101000 */

 00010000 */

 00000000 */

 00000000 */

 87 0x57 'W' */

 00000000 */

 01000100 */

 01000100 */

 01000100 */

 01010100 */

 01010100 */

 01101100 */

 01000100 */

 00000000 */

 00000000 */

 88 0x58 'X' */

 00000000 */

 01000100 */

 01000100 */

 00101000 */

 00010000 */

 00101000 */

 01000100 */

 01000100 */

 00000000 */

 00000000 */

 89 0x59 'Y' */

 00000000 */

 01000100 */

 01000100 */

 01000100 */

 00101000 */

 00010000 */

 00010000 */

 00010000 */

 00000000 */

 00000000 */

 90 0x5A 'Z' */

 00000000 */

 01111100 */

 00000100 */

 00001000 */

 00010000 */

 00100000 */

 01000000 */

 01111100 */

 00000000 */

 00000000 */

 91 0x5B '[' */

 00011000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00011000 */

 00000000 */

 92 0x5C '\' */

 01000000 */

 01000000 */

 00100000 */

 00100000 */

 00010000 */

 00010000 */

 00001000 */

 00001000 */

 00000100 */

 00000100 */

 93 0x5D ']' */

 00110000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00110000 */

 00000000 */

 94 0x5E '^' */

 00000000 */

 00010000 */

 00101000 */

 01000100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 95 0x5F '_' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01111100 */

 00000000 */

 96 0x60 '`' */

 00100000 */

 00010000 */

 00001000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 97 0x61 'a' */

 00000000 */

 00000000 */

 00000000 */

 00111000 */

 00000100 */

 00111100 */

 01000100 */

 00111100 */

 00000000 */

 00000000 */

 98 0x62 'b' */

 00000000 */

 01000000 */

 01000000 */

 01011000 */

 01100100 */

 01000100 */

 01100100 */

 01011000 */

 00000000 */

 00000000 */

 99 0x63 'c' */

 00000000 */

 00000000 */

 00000000 */

 00111000 */

 01000100 */

 01000000 */

 01000100 */

 00111000 */

 00000000 */

 00000000 */

 100 0x64 'd' */

 00000000 */

 00000100 */

 00000100 */

 00110100 */

 01001100 */

 01000100 */

 01001100 */

 00110100 */

 00000000 */

 00000000 */

 101 0x65 'e' */

 00000000 */

 00000000 */

 00000000 */

 00111000 */

 01000100 */

 01111100 */

 01000000 */

 00111100 */

 00000000 */

 00000000 */

 102 0x66 'f' */

 00000000 */

 00001100 */

 00010000 */

 00010000 */

 00111000 */

 00010000 */

 00010000 */

 00010000 */

 00000000 */

 00000000 */

 103 0x67 'g' */

 00000000 */

 00000000 */

 00000000 */

 00110100 */

 01001100 */

 01000100 */

 01001100 */

 00110100 */

 00000100 */

 00111000 */

 104 0x68 'h' */

 00000000 */

 01000000 */

 01000000 */

 01111000 */

 01000100 */

 01000100 */

 01000100 */

 01000100 */

 00000000 */

 00000000 */

 105 0x69 'i' */

 00000000 */

 00010000 */

 00000000 */

 00110000 */

 00010000 */

 00010000 */

 00010000 */

 00111000 */

 00000000 */

 00000000 */

 106 0x6A 'j' */

 00000000 */

 00010000 */

 00000000 */

 00110000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 01100000 */

 107 0x6B 'k' */

 00000000 */

 01000000 */

 01000000 */

 01001000 */

 01010000 */

 01110000 */

 01001000 */

 01000100 */

 00000000 */

 00000000 */

 108 0x6C 'l' */

 00000000 */

 00110000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00111000 */

 00000000 */

 00000000 */

 109 0x6D 'm' */

 00000000 */

 00000000 */

 00000000 */

 01101000 */

 01010100 */

 01010100 */

 01010100 */

 01010100 */

 00000000 */

 00000000 */

 110 0x6E 'n' */

 00000000 */

 00000000 */

 00000000 */

 01011000 */

 01100100 */

 01000100 */

 01000100 */

 01000100 */

 00000000 */

 00000000 */

 111 0x6F 'o' */

 00000000 */

 00000000 */

 00000000 */

 00111000 */

 01000100 */

 01000100 */

 01000100 */

 00111000 */

 00000000 */

 00000000 */

 112 0x70 'p' */

 00000000 */

 00000000 */

 00000000 */

 01011000 */

 01100100 */

 01000100 */

 01100100 */

 01011000 */

 01000000 */

 01000000 */

 113 0x71 'q' */

 00000000 */

 00000000 */

 00000000 */

 00110100 */

 01001100 */

 01000100 */

 01001100 */

 00110100 */

 00000100 */

 00000100 */

 114 0x72 'r' */

 00000000 */

 00000000 */

 00000000 */

 01011000 */

 01100100 */

 01000000 */

 01000000 */

 01000000 */

 00000000 */

 00000000 */

 115 0x73 's' */

 00000000 */

 00000000 */

 00000000 */

 00111100 */

 01000000 */

 00111000 */

 00000100 */

 01111000 */

 00000000 */

 00000000 */

 116 0x74 't' */

 00000000 */

 00010000 */

 00010000 */

 00111000 */

 00010000 */

 00010000 */

 00010000 */

 00001100 */

 00000000 */

 00000000 */

 117 0x75 'u' */

 00000000 */

 00000000 */

 00000000 */

 01000100 */

 01000100 */

 01000100 */

 01001100 */

 00110100 */

 00000000 */

 00000000 */

 118 0x76 'v' */

 00000000 */

 00000000 */

 00000000 */

 01000100 */

 01000100 */

 01000100 */

 00101000 */

 00010000 */

 00000000 */

 00000000 */

 119 0x77 'w' */

 00000000 */

 00000000 */

 00000000 */

 01010100 */

 01010100 */

 01010100 */

 01010100 */

 00101000 */

 00000000 */

 00000000 */

 120 0x78 'x' */

 00000000 */

 00000000 */

 00000000 */

 01000100 */

 00101000 */

 00010000 */

 00101000 */

 01000100 */

 00000000 */

 00000000 */

 121 0x79 'y' */

 00000000 */

 00000000 */

 00000000 */

 01000100 */

 01000100 */

 01000100 */

 01000100 */

 00111100 */

 00000100 */

 00111000 */

 122 0x7A 'z' */

 00000000 */

 00000000 */

 00000000 */

 01111100 */

 00001000 */

 00010000 */

 00100000 */

 01111100 */

 00000000 */

 00000000 */

 123 0x7B '{' */

 00001000 */

 00010000 */

 00010000 */

 00010000 */

 00100000 */

 00010000 */

 00010000 */

 00010000 */

 00001000 */

 00000000 */

 124 0x7C '|' */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00000000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00000000 */

 125 0x7D '}' */

 00100000 */

 00010000 */

 00010000 */

 00010000 */

 00001000 */

 00010000 */

 00010000 */

 00010000 */

 00100000 */

 00000000 */

 126 0x7E '~' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00100000 */

 01010100 */

 00001000 */

 00000000 */

 00000000 */

 00000000 */

 127 0x7F '' */

 00000000 */

 00000000 */

 00000000 */

 00010000 */

 00101000 */

 01000100 */

 01000100 */

 01111100 */

 00000000 */

 00000000 */

 128 0x80 '\200' */

 00000000 */

 00111000 */

 01000100 */

 01000000 */

 01000000 */

 01000000 */

 01000100 */

 00111000 */

 00010000 */

 00100000 */

 129 0x81 '\201' */

 00000000 */

 00101000 */

 00000000 */

 01000100 */

 01000100 */

 01000100 */

 01001100 */

 00110100 */

 00000000 */

 00000000 */

 130 0x82 '\202' */

 00001000 */

 00010000 */

 00000000 */

 00111000 */

 01000100 */

 01111100 */

 01000000 */

 00111100 */

 00000000 */

 00000000 */

 131 0x83 '\203' */

 00010000 */

 00101000 */

 00000000 */

 00111000 */

 00000100 */

 00111100 */

 01000100 */

 00111100 */

 00000000 */

 00000000 */

 132 0x84 '\204' */

 00000000 */

 00101000 */

 00000000 */

 00111000 */

 00000100 */

 00111100 */

 01000100 */

 00111100 */

 00000000 */

 00000000 */

 133 0x85 '\205' */

 00010000 */

 00001000 */

 00000000 */

 00111000 */

 00000100 */

 00111100 */

 01000100 */

 00111100 */

 00000000 */

 00000000 */

 134 0x86 '\206' */

 00011000 */

 00100100 */

 00011000 */

 00111000 */

 00000100 */

 00111100 */

 01000100 */

 00111100 */

 00000000 */

 00000000 */

 135 0x87 '\207' */

 00000000 */

 00000000 */

 00000000 */

 00111000 */

 01000100 */

 01000000 */

 01000100 */

 00111000 */

 00010000 */

 00100000 */

 136 0x88 '\210' */

 00010000 */

 00101000 */

 00000000 */

 00111000 */

 01000100 */

 01111100 */

 01000000 */

 00111100 */

 00000000 */

 00000000 */

 137 0x89 '\211' */

 00000000 */

 00101000 */

 00000000 */

 00111000 */

 01000100 */

 01111100 */

 01000000 */

 00111100 */

 00000000 */

 00000000 */

 138 0x8A '\212' */

 00100000 */

 00010000 */

 00000000 */

 00111000 */

 01000100 */

 01111100 */

 01000000 */

 00111100 */

 00000000 */

 00000000 */

 139 0x8B '\213' */

 00000000 */

 00101000 */

 00000000 */

 00110000 */

 00010000 */

 00010000 */

 00010000 */

 00111000 */

 00000000 */

 00000000 */

 140 0x8C '\214' */

 00010000 */

 00101000 */

 00000000 */

 00110000 */

 00010000 */

 00010000 */

 00010000 */

 00111000 */

 00000000 */

 00000000 */

 141 0x8D '\215' */

 00100000 */

 00010000 */

 00000000 */

 00110000 */

 00010000 */

 00010000 */

 00010000 */

 00111000 */

 00000000 */

 00000000 */

 142 0x8E '\216' */

 01000100 */

 00010000 */

 00101000 */

 01000100 */

 01000100 */

 01111100 */

 01000100 */

 01000100 */

 00000000 */

 00000000 */

 143 0x8F '\217' */

 00110000 */

 01001000 */

 00111000 */

 01000100 */

 01000100 */

 01111100 */

 01000100 */

 01000100 */

 00000000 */

 00000000 */

 144 0x90 '\220' */

 00010000 */

 01111100 */

 01000000 */

 01000000 */

 01111000 */

 01000000 */

 01000000 */

 01111100 */

 00000000 */

 00000000 */

 145 0x91 '\221' */

 00000000 */

 00000000 */

 00000000 */

 01111000 */

 00010100 */

 01111100 */

 01010000 */

 00111100 */

 00000000 */

 00000000 */

 146 0x92 '\222' */

 00000000 */

 00111100 */

 01010000 */

 01010000 */

 01111000 */

 01010000 */

 01010000 */

 01011100 */

 00000000 */

 00000000 */

 147 0x93 '\223' */

 00010000 */

 00101000 */

 00000000 */

 00111000 */

 01000100 */

 01000100 */

 01000100 */

 00111000 */

 00000000 */

 00000000 */

 148 0x94 '\224' */

 00000000 */

 00101000 */

 00000000 */

 00111000 */

 01000100 */

 01000100 */

 01000100 */

 00111000 */

 00000000 */

 00000000 */

 149 0x95 '\225' */

 00100000 */

 00010000 */

 00000000 */

 00111000 */

 01000100 */

 01000100 */

 01000100 */

 00111000 */

 00000000 */

 00000000 */

 150 0x96 '\226' */

 00010000 */

 00101000 */

 00000000 */

 01000100 */

 01000100 */

 01000100 */

 01001100 */

 00110100 */

 00000000 */

 00000000 */

 151 0x97 '\227' */

 00100000 */

 00010000 */

 00000000 */

 01000100 */

 01000100 */

 01000100 */

 01001100 */

 00110100 */

 00000000 */

 00000000 */

 152 0x98 '\230' */

 00000000 */

 00101000 */

 00000000 */

 01000100 */

 01000100 */

 01000100 */

 01000100 */

 00111100 */

 00000100 */

 00111000 */

 153 0x99 '\231' */

 10000100 */

 00111000 */

 01000100 */

 01000100 */

 01000100 */

 01000100 */

 01000100 */

 00111000 */

 00000000 */

 00000000 */

 154 0x9A '\232' */

 10001000 */

 01000100 */

 01000100 */

 01000100 */

 01000100 */

 01000100 */

 01000100 */

 00111000 */

 00000000 */

 00000000 */

 155 0x9B '\233' */

 00000000 */

 00000000 */

 00010000 */

 00111000 */

 01010100 */

 01010000 */

 01010100 */

 00111000 */

 00010000 */

 00000000 */

 156 0x9C '\234' */

 00110000 */

 01001000 */

 01000000 */

 01110000 */

 01000000 */

 01000000 */

 01000100 */

 01111000 */

 00000000 */

 00000000 */

 157 0x9D '\235' */

 00000000 */

 01000100 */

 00101000 */

 01111100 */

 00010000 */

 01111100 */

 00010000 */

 00010000 */

 00000000 */

 00000000 */

 158 0x9E '\236' */

 00000000 */

 01110000 */

 01001000 */

 01110000 */

 01001000 */

 01011100 */

 01001000 */

 01000100 */

 00000000 */

 00000000 */

 159 0x9F '\237' */

 00000000 */

 00001100 */

 00010000 */

 00010000 */

 00111000 */

 00010000 */

 00010000 */

 01100000 */

 00000000 */

 00000000 */

 160 0xA0 '\240' */

 00001000 */

 00010000 */

 00000000 */

 00111000 */

 00000100 */

 00111100 */

 01000100 */

 00111100 */

 00000000 */

 00000000 */

 161 0xA1 '\241' */

 00001000 */

 00010000 */

 00000000 */

 00110000 */

 00010000 */

 00010000 */

 00010000 */

 00111000 */

 00000000 */

 00000000 */

 162 0xA2 '\242' */

 00001000 */

 00010000 */

 00000000 */

 00111000 */

 01000100 */

 01000100 */

 01000100 */

 00111000 */

 00000000 */

 00000000 */

 163 0xA3 '\243' */

 00001000 */

 00010000 */

 00000000 */

 01000100 */

 01000100 */

 01000100 */

 01001100 */

 00110100 */

 00000000 */

 00000000 */

 164 0xA4 '\244' */

 00110100 */

 01011000 */

 00000000 */

 01011000 */

 01100100 */

 01000100 */

 01000100 */

 01000100 */

 00000000 */

 00000000 */

 165 0xA5 '\245' */

 01011000 */

 01000100 */

 01100100 */

 01010100 */

 01001100 */

 01000100 */

 01000100 */

 01000100 */

 00000000 */

 00000000 */

 166 0xA6 '\246' */

 00000000 */

 00111000 */

 00000100 */

 00111100 */

 01000100 */

 00111100 */

 00000000 */

 01111100 */

 00000000 */

 00000000 */

 167 0xA7 '\247' */

 00000000 */

 00111000 */

 01000100 */

 01000100 */

 01000100 */

 00111000 */

 00000000 */

 01111100 */

 00000000 */

 00000000 */

 168 0xA8 '\250' */

 00000000 */

 00010000 */

 00000000 */

 00010000 */

 00100000 */

 01000000 */

 01000100 */

 00111000 */

 00000000 */

 00000000 */

 169 0xA9 '\251' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01111100 */

 01000000 */

 01000000 */

 00000000 */

 00000000 */

 00000000 */

 170 0xAA '\252' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01111100 */

 00000100 */

 00000100 */

 00000000 */

 00000000 */

 00000000 */

 171 0xAB '\253' */

 00100000 */

 01100000 */

 00100100 */

 00101000 */

 00010000 */

 00101000 */

 01000100 */

 00001000 */

 00011100 */

 00000000 */

 172 0xAC '\254' */

 00100000 */

 01100000 */

 00100100 */

 00101000 */

 00010000 */

 00101000 */

 01011000 */

 00111100 */

 00001000 */

 00000000 */

 173 0xAD '\255' */

 00000000 */

 00010000 */

 00000000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00000000 */

 00000000 */

 174 0xAE '\256' */

 00000000 */

 00000000 */

 00000000 */

 00100100 */

 01001000 */

 10010000 */

 01001000 */

 00100100 */

 00000000 */

 00000000 */

 175 0xAF '\257' */

 00000000 */

 00000000 */

 00000000 */

 10010000 */

 01001000 */

 00100100 */

 01001000 */

 10010000 */

 00000000 */

 00000000 */

 176 0xB0 '\260' */

 00010000 */

 01000100 */

 00010000 */

 01000100 */

 00010000 */

 01000100 */

 00010000 */

 01000100 */

 00010000 */

 01000100 */

 177 0xB1 '\261' */

 10101000 */

 01010100 */

 10101000 */

 01010100 */

 10101000 */

 01010100 */

 10101000 */

 01010100 */

 10101000 */

 01010100 */

 178 0xB2 '\262' */

 11011100 */

 01110100 */

 11011100 */

 01110100 */

 11011100 */

 01110100 */

 11011100 */

 01110100 */

 11011100 */

 01110100 */

 179 0xB3 '\263' */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 180 0xB4 '\264' */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 11110000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 181 0xB5 '\265' */

 00010000 */

 00010000 */

 00010000 */

 11110000 */

 00010000 */

 11110000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 182 0xB6 '\266' */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 11101000 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 183 0xB7 '\267' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111000 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 184 0xB8 '\270' */

 00000000 */

 00000000 */

 00000000 */

 11110000 */

 00010000 */

 11110000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 185 0xB9 '\271' */

 00101000 */

 00101000 */

 00101000 */

 11101000 */

 00001000 */

 11101000 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 186 0xBA '\272' */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 187 0xBB '\273' */

 00000000 */

 00000000 */

 00000000 */

 11111000 */

 00001000 */

 11101000 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 188 0xBC '\274' */

 00101000 */

 00101000 */

 00101000 */

 11101000 */

 00001000 */

 11111000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 189 0xBD '\275' */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 11111000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 190 0xBE '\276' */

 00010000 */

 00010000 */

 00010000 */

 11110000 */

 00010000 */

 11110000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 191 0xBF '\277' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11110000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 192 0xC0 '\300' */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00011100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 193 0xC1 '\301' */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 11111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 194 0xC2 '\302' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111100 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 195 0xC3 '\303' */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00011100 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 196 0xC4 '\304' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 197 0xC5 '\305' */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 11111100 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 198 0xC6 '\306' */

 00010000 */

 00010000 */

 00010000 */

 00011100 */

 00010000 */

 00011100 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 199 0xC7 '\307' */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 00101100 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 200 0xC8 '\310' */

 00101000 */

 00101000 */

 00101000 */

 00101100 */

 00100000 */

 00111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 201 0xC9 '\311' */

 00000000 */

 00000000 */

 00000000 */

 00111100 */

 00100000 */

 00101100 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 202 0xCA '\312' */

 00101000 */

 00101000 */

 00101000 */

 11101100 */

 00000000 */

 11111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 203 0xCB '\313' */

 00000000 */

 00000000 */

 00000000 */

 11111100 */

 00000000 */

 11101100 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 204 0xCC '\314' */

 00101000 */

 00101000 */

 00101000 */

 00101100 */

 00100000 */

 00101100 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 205 0xCD '\315' */

 00000000 */

 00000000 */

 00000000 */

 11111100 */

 00000000 */

 11111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 206 0xCE '\316' */

 00101000 */

 00101000 */

 00101000 */

 11101100 */

 00000000 */

 11101100 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 207 0xCF '\317' */

 00010000 */

 00010000 */

 00010000 */

 11111100 */

 00000000 */

 11111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 208 0xD0 '\320' */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 11111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 209 0xD1 '\321' */

 00000000 */

 00000000 */

 00000000 */

 11111100 */

 00000000 */

 11111100 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 210 0xD2 '\322' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111100 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 211 0xD3 '\323' */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 00111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 212 0xD4 '\324' */

 00010000 */

 00010000 */

 00010000 */

 00011100 */

 00010000 */

 00011100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 213 0xD5 '\325' */

 00000000 */

 00000000 */

 00000000 */

 00011100 */

 00010000 */

 00011100 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 214 0xD6 '\326' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00111100 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 215 0xD7 '\327' */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 11111100 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 216 0xD8 '\330' */

 00010000 */

 00010000 */

 00010000 */

 11111100 */

 00010000 */

 11111100 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 217 0xD9 '\331' */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 11110000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 218 0xDA '\332' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00011100 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 219 0xDB '\333' */

 11111100 */

 11111100 */

 11111100 */

 11111100 */

 11111100 */

 11111100 */

 11111100 */

 11111100 */

 11111100 */

 11111100 */

 220 0xDC '\334' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111100 */

 11111100 */

 11111100 */

 11111100 */

 11111100 */

 221 0xDD '\335' */

 11100000 */

 11100000 */

 11100000 */

 11100000 */

 11100000 */

 11100000 */

 11100000 */

 11100000 */

 11100000 */

 11100000 */

 222 0xDE '\336' */

 00011100 */

 00011100 */

 00011100 */

 00011100 */

 00011100 */

 00011100 */

 00011100 */

 00011100 */

 00011100 */

 00011100 */

 223 0xDF '\337' */

 11111100 */

 11111100 */

 11111100 */

 11111100 */

 11111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 224 0xE0 '\340' */

 00000000 */

 00000000 */

 00000000 */

 00110100 */

 01001000 */

 01001000 */

 01001000 */

 00110100 */

 00000000 */

 00000000 */

 225 0xE1 '\341' */

 00011000 */

 00100100 */

 01000100 */

 01001000 */

 01001000 */

 01000100 */

 01000100 */

 01011000 */

 01000000 */

 00000000 */

 226 0xE2 '\342' */

 00000000 */

 01111100 */

 01000100 */

 01000100 */

 01000000 */

 01000000 */

 01000000 */

 01000000 */

 00000000 */

 00000000 */

 227 0xE3 '\343' */

 00000000 */

 00000000 */

 00000000 */

 01111100 */

 00101000 */

 00101000 */

 00101000 */

 00101000 */

 00000000 */

 00000000 */

 228 0xE4 '\344' */

 00000000 */

 01111100 */

 00100100 */

 00010000 */

 00001000 */

 00010000 */

 00100100 */

 01111100 */

 00000000 */

 00000000 */

 229 0xE5 '\345' */

 00000000 */

 00000000 */

 00000000 */

 00111100 */

 01001000 */

 01001000 */

 01001000 */

 00110000 */

 00000000 */

 00000000 */

 230 0xE6 '\346' */

 00000000 */

 00000000 */

 00000000 */

 01001000 */

 01001000 */

 01001000 */

 01001000 */

 01110100 */

 01000000 */

 01000000 */

 231 0xE7 '\347' */

 00000000 */

 00000000 */

 00000000 */

 01111100 */

 00010000 */

 00010000 */

 00010000 */

 00001100 */

 00000000 */

 00000000 */

 232 0xE8 '\350' */

 00111000 */

 00010000 */

 00111000 */

 01000100 */

 01000100 */

 00111000 */

 00010000 */

 00111000 */

 00000000 */

 00000000 */

 233 0xE9 '\351' */

 00000000 */

 00111000 */

 01000100 */

 01000100 */

 01111100 */

 01000100 */

 01000100 */

 00111000 */

 00000000 */

 00000000 */

 234 0xEA '\352' */

 00000000 */

 00111000 */

 01000100 */

 01000100 */

 01000100 */

 01000100 */

 00101000 */

 01101100 */

 00000000 */

 00000000 */

 235 0xEB '\353' */

 00000000 */

 00011000 */

 00100000 */

 00011000 */

 00100100 */

 00100100 */

 00100100 */

 00011000 */

 00000000 */

 00000000 */

 236 0xEC '\354' */

 00000000 */

 00000000 */

 00000000 */

 00111000 */

 01010100 */

 01010100 */

 01010100 */

 00111000 */

 00000000 */

 00000000 */

 237 0xED '\355' */

 00000000 */

 00000000 */

 00000100 */

 00111000 */

 01010100 */

 01010100 */

 00111000 */

 01000000 */

 00000000 */

 00000000 */

 238 0xEE '\356' */

 00000000 */

 00111100 */

 01000000 */

 01000000 */

 00111000 */

 01000000 */

 01000000 */

 00111100 */

 00000000 */

 00000000 */

 239 0xEF '\357' */

 00000000 */

 00111000 */

 01000100 */

 01000100 */

 01000100 */

 01000100 */

 01000100 */

 01000100 */

 00000000 */

 00000000 */

 240 0xF0 '\360' */

 00000000 */

 00000000 */

 11111100 */

 00000000 */

 11111100 */

 00000000 */

 11111100 */

 00000000 */

 00000000 */

 00000000 */

 241 0xF1 '\361' */

 00000000 */

 00010000 */

 00010000 */

 01111100 */

 00010000 */

 00010000 */

 00000000 */

 01111100 */

 00000000 */

 00000000 */

 242 0xF2 '\362' */

 00000000 */

 00100000 */

 00010000 */

 00001000 */

 00010000 */

 00100000 */

 00000000 */

 00111000 */

 00000000 */

 00000000 */

 243 0xF3 '\363' */

 00000000 */

 00001000 */

 00010000 */

 00100000 */

 00010000 */

 00001000 */

 00000000 */

 00111000 */

 00000000 */

 00000000 */

 244 0xF4 '\364' */

 00000000 */

 00001100 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 245 0xF5 '\365' */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 00010000 */

 01100000 */

 00000000 */

 246 0xF6 '\366' */

 00000000 */

 00000000 */

 00010000 */

 00000000 */

 01111100 */

 00000000 */

 00010000 */

 00000000 */

 00000000 */

 00000000 */

 247 0xF7 '\367' */

 00000000 */

 00000000 */

 00100000 */

 01010100 */

 00001000 */

 00100000 */

 01010100 */

 00001000 */

 00000000 */

 00000000 */

 248 0xF8 '\370' */

 00110000 */

 01001000 */

 01001000 */

 00110000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 249 0xF9 '\371' */

 00000000 */

 00000000 */

 00000000 */

 00010000 */

 00111000 */

 00010000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 250 0xFA '\372' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00010000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 251 0xFB '\373' */

 00000000 */

 00000100 */

 00001000 */

 00001000 */

 01010000 */

 01010000 */

 00100000 */

 00100000 */

 00000000 */

 00000000 */

 252 0xFC '\374' */

 01100000 */

 01010000 */

 01010000 */

 01010000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 253 0xFD '\375' */

 01100000 */

 00010000 */

 00100000 */

 01110000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 254 0xFE '\376' */

 00000000 */

 00000000 */

 00111000 */

 00111000 */

 00111000 */

 00111000 */

 00111000 */

 00111000 */

 00000000 */

 00000000 */

 255 0xFF '\377' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

/*

 * `Soft' font definitions

 *

 *    Created 1995 by Geert Uytterhoeven

 *    Rewritten 1998 by Martin Mares <mj@ucw.cz>

 *

 *	2001 - Documented with DocBook

 *	- Brad Douglas <brad@neruo.com>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/**

 *	find_font - find a font

 *	@name: string name of a font

 *

 *	Find a specified font with string name @name.

 *

 *	Returns %NULL if no font found, or a pointer to the

 *	specified font.

 *

/**

 *	get_default_font - get default font

 *	@xres: screen size of X

 *	@yres: screen size of Y

 *      @font_w: bit array of supported widths (1 - 32)

 *      @font_h: bit array of supported heights (1 - 32)

 *

 *	Get the default font for a specified screen size.

 *	Dimensions are in pixels.

 *

 *	Returns %NULL if no font is found, or a pointer to the

 *	chosen font.

 *

 prefer a bigger font for high resolution */

 SPDX-License-Identifier: GPL-2.0

*************************************/

 this file adapted from font_8x16.c */

 by Jurriaan Kalkman 05-2005        */

*************************************/

 0 0x00 '^@' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1 0x01 '^A' */

 0000000 */

 0111110 */

 1000001 */

 1010101 */

 1000001 */

 1000001 */

 1011101 */

 1001001 */

 1000001 */

 0111110 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 2 0x02 '^B' */

 0000000 */

 0111110 */

 1111111 */

 1101011 */

 1111111 */

 1111111 */

 1100011 */

 1110111 */

 1111111 */

 1111111 */

 0111110 */

 0000000 */

 0000000 */

 0000000 */

 3 0x03 '^C' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0110110 */

 0111110 */

 1111111 */

 0111110 */

 0011100 */

 0001100 */

 0001000 */

 0000000 */

 0000000 */

 0000000 */

 4 0x04 '^D' */

 0000000 */

 0000000 */

 0000000 */

 0001000 */

 0011100 */

 0111110 */

 1111111 */

 0111110 */

 0011100 */

 0001000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 5 0x05 '^E' */

 0000000 */

 0000000 */

 0011100 */

 0011100 */

 0011100 */

 1110111 */

 1110111 */

 1110111 */

 0001000 */

 0001000 */

 0011100 */

 0000000 */

 0000000 */

 0000000 */

 6 0x06 '^F' */

 0000000 */

 0000000 */

 0001000 */

 0011100 */

 0111110 */

 1111111 */

 1111111 */

 0111110 */

 0001000 */

 0001000 */

 0011100 */

 0000000 */

 0000000 */

 0000000 */

 7 0x07 '^G' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0001100 */

 0011110 */

 0011110 */

 0001100 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 8 0x08 '^H' */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 1110011 */

 1100001 */

 1100001 */

 1110011 */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 9 0x09 '^I' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0011100 */

 0110110 */

 0100010 */

 0110110 */

 0011100 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 10 0x0a '^J' */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 1100011 */

 1001001 */

 1011101 */

 1001001 */

 1100011 */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 11 0x0b '^K' */

 0000000 */

 0001111 */

 0000111 */

 0001101 */

 0001101 */

 0111100 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 12 0x0c '^L' */

 0000000 */

 0011110 */

 0110011 */

 0110011 */

 0110011 */

 0110011 */

 0011110 */

 0001100 */

 0111111 */

 0001100 */

 0001100 */

 0000000 */

 0000000 */

 0000000 */

 13 0x0d '^M' */

 0000000 */

 0011111 */

 0011011 */

 0011111 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0111000 */

 1111000 */

 1110000 */

 0000000 */

 0000000 */

 0000000 */

 14 0x0e '^N' */

 0000000 */

 0111111 */

 0110011 */

 0111111 */

 0110011 */

 0110011 */

 0110011 */

 0110011 */

 0110111 */

 1110111 */

 1110110 */

 1100000 */

 0000000 */

 0000000 */

 15 0x0f '^O' */

 0000000 */

 0000000 */

 0001000 */

 0001000 */

 1101011 */

 0011100 */

 1110111 */

 0011100 */

 1101011 */

 0001000 */

 0001000 */

 0000000 */

 0000000 */

 0000000 */

 16 0x10 '^P' */

 0000000 */

 1000000 */

 1100000 */

 1110000 */

 1111000 */

 1111110 */

 1111000 */

 1110000 */

 1100000 */

 1000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 17 0x11 '^Q' */

 0000000 */

 0000010 */

 0000110 */

 0001110 */

 0011110 */

 1111110 */

 0011110 */

 0001110 */

 0000110 */

 0000010 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 18 0x12 '^R' */

 0000000 */

 0001100 */

 0011110 */

 0111111 */

 0001100 */

 0001100 */

 0001100 */

 0111111 */

 0011110 */

 0001100 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 19 0x13 '^S' */

 0000000 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0000000 */

 0110110 */

 0110110 */

 0000000 */

 0000000 */

 0000000 */

 20 0x14 '^T' */

 0000000 */

 0111111 */

 1101010 */

 1101010 */

 1101010 */

 0111010 */

 0001010 */

 0001010 */

 0001010 */

 0001010 */

 0001011 */

 0000000 */

 0000000 */

 0000000 */

 21 0x15 '^U' */

 0111100 */

 1100110 */

 0110000 */

 0011100 */

 0110110 */

 1100011 */

 1100011 */

 0110110 */

 0011100 */

 0001100 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 22 0x16 '^V' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1111110 */

 1111110 */

 1111110 */

 1111110 */

 0000000 */

 0000000 */

 0000000 */

 23 0x17 '^W' */

 0000000 */

 0001100 */

 0011110 */

 0111111 */

 0001100 */

 0001100 */

 0001100 */

 0111111 */

 0011110 */

 0001100 */

 0111111 */

 0000000 */

 0000000 */

 0000000 */

 24 0x18 '^X' */

 0000000 */

 0001100 */

 0011110 */

 0111111 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0000000 */

 0000000 */

 0000000 */

 25 0x19 '^Y' */

 0000000 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0111111 */

 0011110 */

 0001100 */

 0000000 */

 0000000 */

 0000000 */

 26 0x1a '^Z' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0011000 */

 0001100 */

 1111110 */

 0001100 */

 0011000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 27 0x1b '^[' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0011000 */

 0110000 */

 1111110 */

 0110000 */

 0011000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 28 0x1c '^\' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1100000 */

 1100000 */

 1100000 */

 1111110 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 29 0x1d '^]' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0010100 */

 0110110 */

 1111111 */

 0110110 */

 0010100 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 30 0x1e '^^' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0011000 */

 0011000 */

 0111100 */

 0111100 */

 1111110 */

 1111110 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 31 0x1f '^_' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1111110 */

 1111110 */

 0111100 */

 0111100 */

 0011000 */

 0011000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 32 0x20 ' ' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 33 0x21 '!' */

 0000000 */

 0001100 */

 0011110 */

 0011110 */

 0011110 */

 0001100 */

 0001100 */

 0001100 */

 0000000 */

 0001100 */

 0001100 */

 0000000 */

 0000000 */

 0000000 */

 34 0x22 '"' */

 0000000 */

 0110110 */

 0110110 */

 0110110 */

 0010100 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 35 0x23 '#' */

 0000000 */

 0110110 */

 0110110 */

 1111111 */

 1111111 */

 0110110 */

 0110110 */

 1111111 */

 1111111 */

 0110110 */

 0110110 */

 0000000 */

 0000000 */

 0000000 */

 36 0x24 '$' */

 0011000 */

 0011000 */

 0111100 */

 1100110 */

 1100010 */

 1100000 */

 0111100 */

 0000110 */

 1000110 */

 1100110 */

 0111100 */

 0011000 */

 0011000 */

 0000000 */

 37 0x25 '%' */

 0000000 */

 0000000 */

 0000000 */

 1100000 */

 1100010 */

 0000110 */

 0001100 */

 0011000 */

 0110000 */

 1100110 */

 1000110 */

 0000000 */

 0000000 */

 0000000 */

 38 0x26 '&' */

 0000000 */

 0011100 */

 0110110 */

 0110110 */

 0011100 */

 0111100 */

 1101111 */

 1100110 */

 1100110 */

 1101110 */

 0111011 */

 0000000 */

 0000000 */

 0000000 */

 39 0x27 ''' */

 0000000 */

 0011000 */

 0011000 */

 0011000 */

 0110000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 40 0x28 '(' */

 0000000 */

 0000110 */

 0001100 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0001100 */

 0000110 */

 0000000 */

 0000000 */

 0000000 */

 41 0x29 ')' */

 0000000 */

 0011000 */

 0001100 */

 0000110 */

 0000110 */

 0000110 */

 0000110 */

 0000110 */

 0000110 */

 0001100 */

 0011000 */

 0000000 */

 0000000 */

 0000000 */

 42 0x2a '*' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0110110 */

 0011100 */

 1111111 */

 0011100 */

 0110110 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 43 0x2b '+' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0001000 */

 0001000 */

 0111110 */

 0001000 */

 0001000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 44 0x2c ',' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0001100 */

 0001100 */

 0001100 */

 0011000 */

 0000000 */

 0000000 */

 45 0x2d '-' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1111110 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 46 0x2e '.' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0001100 */

 0001100 */

 0000000 */

 0000000 */

 0000000 */

 47 0x2f '/' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000010 */

 0000110 */

 0001100 */

 0011000 */

 0110000 */

 1100000 */

 1000000 */

 0000000 */

 0000000 */

 0000000 */

 48 0x30 '0' */

 0000000 */

 0011000 */

 0111100 */

 1100110 */

 1100110 */

 1101110 */

 1110110 */

 1100110 */

 1100110 */

 0111100 */

 0011000 */

 0000000 */

 0000000 */

 0000000 */

 49 0x31 '1' */

 0000000 */

 0001100 */

 0011100 */

 0111100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0111110 */

 0000000 */

 0000000 */

 0000000 */

 50 0x32 '2' */

 0000000 */

 0111100 */

 1100110 */

 0000110 */

 0001100 */

 0001100 */

 0011000 */

 0110000 */

 1100000 */

 1100110 */

 1111110 */

 0000000 */

 0000000 */

 0000000 */

 51 0x33 '3' */

 0000000 */

 0111100 */

 1100110 */

 0000110 */

 0000110 */

 0011100 */

 0000110 */

 0000110 */

 0000110 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 52 0x34 '4' */

 0000000 */

 0000110 */

 0001110 */

 0011110 */

 0110110 */

 1100110 */

 1111111 */

 0000110 */

 0000110 */

 0000110 */

 0000110 */

 0000000 */

 0000000 */

 0000000 */

 53 0x35 '5' */

 0000000 */

 1111110 */

 1100000 */

 1100000 */

 1100000 */

 1111100 */

 0000110 */

 0000110 */

 0000110 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 54 0x36 '6' */

 0000000 */

 0011000 */

 0110000 */

 1100000 */

 1100000 */

 1111100 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 55 0x37 '7' */

 0000000 */

 1111110 */

 1100110 */

 0000110 */

 0000110 */

 0001100 */

 0001100 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0000000 */

 0000000 */

 0000000 */

 56 0x38 '8' */

 0000000 */

 0111100 */

 1100110 */

 1100110 */

 1100110 */

 0111100 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 57 0x39 '9' */

 0000000 */

 0111100 */

 1100110 */

 1100110 */

 1100110 */

 0111110 */

 0000110 */

 0000110 */

 0000110 */

 0001100 */

 0111000 */

 0000000 */

 0000000 */

 0000000 */

 58 0x3a ':' */

 0000000 */

 0000000 */

 0000000 */

 0001100 */

 0001100 */

 0000000 */

 0000000 */

 0000000 */

 0001100 */

 0001100 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 59 0x3b ';' */

 0000000 */

 0000000 */

 0000000 */

 0001100 */

 0001100 */

 0000000 */

 0000000 */

 0000000 */

 0001100 */

 0001100 */

 0011000 */

 0000000 */

 0000000 */

 0000000 */

 60 0x3c '<' */

 0000000 */

 0000000 */

 0000010 */

 0000110 */

 0001100 */

 0011000 */

 0110000 */

 0011000 */

 0001100 */

 0000110 */

 0000010 */

 0000000 */

 0000000 */

 0000000 */

 61 0x3d '=' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0111110 */

 0000000 */

 0000000 */

 0111110 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 62 0x3e '>' */

 0000000 */

 0000000 */

 0100000 */

 0110000 */

 0011000 */

 0001100 */

 0000110 */

 0001100 */

 0011000 */

 0110000 */

 0100000 */

 0000000 */

 0000000 */

 0000000 */

 63 0x3f '?' */

 0000000 */

 0111100 */

 1100110 */

 1100110 */

 0001100 */

 0011000 */

 0011000 */

 0011000 */

 0000000 */

 0011000 */

 0011000 */

 0000000 */

 0000000 */

 0000000 */

 64 0x40 '@' */

 0000000 */

 0000000 */

 0000000 */

 0111100 */

 1100110 */

 1100110 */

 1101110 */

 1101110 */

 1101100 */

 1100000 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 65 0x41 'A' */

 0000000 */

 0011000 */

 0111100 */

 1100110 */

 1100110 */

 1100110 */

 1111110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0000000 */

 0000000 */

 0000000 */

 66 0x42 'B' */

 0000000 */

 1111100 */

 0110110 */

 0110110 */

 0110110 */

 0111100 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 1111100 */

 0000000 */

 0000000 */

 0000000 */

 67 0x43 'C' */

 0000000 */

 0011100 */

 0110110 */

 1100010 */

 1100000 */

 1100000 */

 1100000 */

 1100000 */

 1100010 */

 0110110 */

 0011100 */

 0000000 */

 0000000 */

 0000000 */

 68 0x44 'D' */

 0000000 */

 1111000 */

 1101100 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1101100 */

 1111000 */

 0000000 */

 0000000 */

 0000000 */

 69 0x45 'E' */

 0000000 */

 0111110 */

 0110110 */

 0110010 */

 0110100 */

 0111100 */

 0110100 */

 0110000 */

 0110010 */

 0110110 */

 0111110 */

 0000000 */

 0000000 */

 0000000 */

 70 0x46 'F' */

 0000000 */

 0111110 */

 0110010 */

 0110000 */

 0110100 */

 0111100 */

 0110100 */

 0110000 */

 0110000 */

 0110000 */

 0111000 */

 0000000 */

 0000000 */

 0000000 */

 71 0x47 'G' */

 0000000 */

 0011100 */

 0110110 */

 1100010 */

 1100000 */

 1100000 */

 1101110 */

 1100110 */

 1100110 */

 0110110 */

 0011010 */

 0000000 */

 0000000 */

 0000000 */

 72 0x48 'H' */

 0000000 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1111110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0000000 */

 0000000 */

 0000000 */

 73 0x49 'I' */

 0000000 */

 0011110 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0011110 */

 0000000 */

 0000000 */

 0000000 */

 74 0x4a 'J' */

 0000000 */

 0001110 */

 0000110 */

 0000110 */

 0000110 */

 0000110 */

 0000110 */

 1100110 */

 1100110 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 75 0x4b 'K' */

 0000000 */

 1100110 */

 1100110 */

 1100110 */

 1101100 */

 1111000 */

 1111000 */

 1101100 */

 1100110 */

 1100110 */

 1100110 */

 0000000 */

 0000000 */

 0000000 */

 76 0x4c 'L' */

 0000000 */

 1100000 */

 1100000 */

 1100000 */

 1100000 */

 1100000 */

 1100000 */

 1100000 */

 1100010 */

 1100110 */

 1111110 */

 0000000 */

 0000000 */

 0000000 */

 77 0x4d 'M' */

 0000000 */

 1100011 */

 1110111 */

 1111111 */

 1111111 */

 1101011 */

 1100011 */

 1100011 */

 1100011 */

 1100011 */

 1100011 */

 0000000 */

 0000000 */

 0000000 */

 78 0x4e 'N' */

 0000000 */

 1100110 */

 1110110 */

 1110110 */

 1111110 */

 1101110 */

 1101110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0000000 */

 0000000 */

 0000000 */

 79 0x4f 'O' */

 0000000 */

 0111100 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 80 0x50 'P' */

 0000000 */

 1111100 */

 1100110 */

 1100110 */

 1100110 */

 1111100 */

 1100000 */

 1100000 */

 1100000 */

 1100000 */

 1100000 */

 0000000 */

 0000000 */

 0000000 */

 81 0x51 'Q' */

 0000000 */

 0111100 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1101110 */

 0111100 */

 0001100 */

 0001110 */

 0000000 */

 82 0x52 'R' */

 0000000 */

 1111100 */

 1100110 */

 1100110 */

 1100110 */

 1111100 */

 1101100 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0000000 */

 0000000 */

 0000000 */

 83 0x53 'S' */

 0000000 */

 0111110 */

 1100010 */

 1100000 */

 1100000 */

 0110000 */

 0011100 */

 0000110 */

 0000110 */

 1000110 */

 1111100 */

 0000000 */

 0000000 */

 0000000 */

 84 0x54 'T' */

 0000000 */

 1111110 */

 1111110 */

 1011010 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 85 0x55 'U' */

 0000000 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 86 0x56 'V' */

 0000000 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111100 */

 0111100 */

 0011000 */

 0000000 */

 0000000 */

 0000000 */

 87 0x57 'W' */

 0000000 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1111110 */

 1111110 */

 0100100 */

 0000000 */

 0000000 */

 0000000 */

 88 0x58 'X' */

 0000000 */

 1100110 */

 1100110 */

 0111100 */

 0111100 */

 0011000 */

 0011000 */

 0111100 */

 0111100 */

 1100110 */

 1100110 */

 0000000 */

 0000000 */

 0000000 */

 89 0x59 'Y' */

 0000000 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111100 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0000000 */

 0000000 */

 0000000 */

 90 0x5a 'Z' */

 0000000 */

 1111110 */

 1100110 */

 1000110 */

 0001100 */

 0001100 */

 0011000 */

 0110000 */

 1100010 */

 1100110 */

 1111110 */

 0000000 */

 0000000 */

 0000000 */

 91 0x5b '[' */

 0000000 */

 0111100 */

 0110000 */

 0110000 */

 0110000 */

 0110000 */

 0110000 */

 0110000 */

 0110000 */

 0110000 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 92 0x5c '\' */

 0000000 */

 0000000 */

 0000000 */

 1000000 */

 1100000 */

 1110000 */

 0111000 */

 0011100 */

 0001110 */

 0000110 */

 0000010 */

 0000000 */

 0000000 */

 0000000 */

 93 0x5d ']' */

 0000000 */

 0111100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 94 0x5e '^' */

 0001000 */

 0011100 */

 0110110 */

 1100011 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 95 0x5f '_' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1111111 */

 0000000 */

 96 0x60 '`' */

 0000000 */

 0110000 */

 0011000 */

 0001100 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 97 0x61 'a' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0111100 */

 0000110 */

 0111110 */

 1100110 */

 1100110 */

 1100110 */

 0111011 */

 0000000 */

 0000000 */

 0000000 */

 98 0x62 'b' */

 0000000 */

 1100000 */

 1100000 */

 1100000 */

 1111000 */

 1101100 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1111100 */

 0000000 */

 0000000 */

 0000000 */

 99 0x63 'c' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0111100 */

 1100110 */

 1100000 */

 1100000 */

 1100000 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 100 0x64 'd' */

 0000000 */

 0001110 */

 0000110 */

 0000110 */

 0011110 */

 0110110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111011 */

 0000000 */

 0000000 */

 0000000 */

 101 0x65 'e' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0111100 */

 1100110 */

 1111110 */

 1100000 */

 1100000 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 102 0x66 'f' */

 0000000 */

 0011100 */

 0110110 */

 0110010 */

 0110000 */

 1111000 */

 0110000 */

 0110000 */

 0110000 */

 0110000 */

 1111000 */

 0000000 */

 0000000 */

 0000000 */

 103 0x67 'g' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0111011 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111110 */

 0000110 */

 1100110 */

 0111100 */

 104 0x68 'h' */

 0000000 */

 1100000 */

 1100000 */

 1100000 */

 1101100 */

 1110110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0000000 */

 0000000 */

 0000000 */

 105 0x69 'i' */

 0000000 */

 0011000 */

 0011000 */

 0000000 */

 0111000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 106 0x6a 'j' */

 0000000 */

 0000110 */

 0000110 */

 0000000 */

 0001110 */

 0000110 */

 0000110 */

 0000110 */

 0000110 */

 0000110 */

 0000110 */

 1100110 */

 1100110 */

 0111100 */

 107 0x6b 'k' */

 0000000 */

 1100000 */

 1100000 */

 1100000 */

 1100110 */

 1101100 */

 1111000 */

 1111000 */

 1101100 */

 1100110 */

 1100110 */

 0000000 */

 0000000 */

 0000000 */

 108 0x6c 'l' */

 0000000 */

 0111000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 109 0x6d 'm' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1110110 */

 1111111 */

 1101011 */

 1101011 */

 1101011 */

 1101011 */

 1101011 */

 0000000 */

 0000000 */

 0000000 */

 110 0x6e 'n' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1011100 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0000000 */

 0000000 */

 0000000 */

 111 0x6f 'o' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0111100 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 112 0x70 'p' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1011100 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1111100 */

 1100000 */

 1100000 */

 1100000 */

 113 0x71 'q' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0111010 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111110 */

 0000110 */

 0000110 */

 0000110 */

 114 0x72 'r' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1011100 */

 1110110 */

 1100110 */

 1100000 */

 1100000 */

 1100000 */

 1100000 */

 0000000 */

 0000000 */

 0000000 */

 115 0x73 's' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0111100 */

 1100110 */

 0110000 */

 0011000 */

 0001100 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 116 0x74 't' */

 0000000 */

 0001000 */

 0011000 */

 0011000 */

 1111110 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011011 */

 0001110 */

 0000000 */

 0000000 */

 0000000 */

 117 0x75 'u' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111011 */

 0000000 */

 0000000 */

 0000000 */

 118 0x76 'v' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111100 */

 0011000 */

 0000000 */

 0000000 */

 0000000 */

 119 0x77 'w' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1100011 */

 1100011 */

 1101011 */

 1101011 */

 1101011 */

 1111111 */

 0110110 */

 0000000 */

 0000000 */

 0000000 */

 120 0x78 'x' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1100110 */

 1100110 */

 0111100 */

 0011000 */

 0111100 */

 1100110 */

 1100110 */

 0000000 */

 0000000 */

 0000000 */

 121 0x79 'y' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111110 */

 0000110 */

 0001100 */

 1111000 */

 122 0x7a 'z' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1111110 */

 1100110 */

 0001100 */

 0011000 */

 0110000 */

 1100110 */

 1111110 */

 0000000 */

 0000000 */

 0000000 */

 123 0x7b '{' */

 0000000 */

 0001110 */

 0011000 */

 0011000 */

 0011000 */

 1110000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0001110 */

 0000000 */

 0000000 */

 0000000 */

 124 0x7c '|' */

 0000000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0000000 */

 0000000 */

 0000000 */

 125 0x7d '}' */

 0000000 */

 0111000 */

 0001100 */

 0001100 */

 0001100 */

 0000111 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0111000 */

 0000000 */

 0000000 */

 0000000 */

 126 0x7e '~' */

 0000000 */

 1110110 */

 1011100 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 127 0x7f '' */

 0000000 */

 0000000 */

 0000000 */

 0001000 */

 0011100 */

 0110110 */

 1100011 */

 1100011 */

 1100011 */

 1111111 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 128 0x80 'Ç' */

 0000000 */

 0011100 */

 0110110 */

 1100010 */

 1100000 */

 1100000 */

 1100000 */

 1100000 */

 1100010 */

 0110110 */

 0011100 */

 0001100 */

 0111000 */

 0000000 */

 129 0x81 'ü' */

 0000000 */

 1100110 */

 0000000 */

 0000000 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111011 */

 0000000 */

 0000000 */

 0000000 */

 130 0x82 'é' */

 0000110 */

 0001100 */

 0011000 */

 0000000 */

 0111100 */

 1100110 */

 1111110 */

 1100000 */

 1100000 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 131 0x83 'â' */

 0001000 */

 0011100 */

 0110110 */

 0000000 */

 0111100 */

 0000110 */

 0111110 */

 1100110 */

 1100110 */

 1100110 */

 0111011 */

 0000000 */

 0000000 */

 0000000 */

 132 0x84 'ä' */

 0000000 */

 1100110 */

 0000000 */

 0000000 */

 0111100 */

 0000110 */

 0111110 */

 1100110 */

 1100110 */

 1100110 */

 0111011 */

 0000000 */

 0000000 */

 0000000 */

 133 0x85 'à' */

 0110000 */

 0011000 */

 0001100 */

 0000000 */

 0111100 */

 0000110 */

 0111110 */

 1100110 */

 1100110 */

 1100110 */

 0111011 */

 0000000 */

 0000000 */

 0000000 */

 134 0x86 'å' */

 0011100 */

 0110110 */

 0011100 */

 0000000 */

 0111100 */

 0000110 */

 0111110 */

 1100110 */

 1100110 */

 1100110 */

 0111011 */

 0000000 */

 0000000 */

 0000000 */

 135 0x87 'ç' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0111100 */

 1100110 */

 1100000 */

 1100000 */

 1100000 */

 1100110 */

 0111100 */

 0011000 */

 0011000 */

 1110000 */

 136 0x88 'ê' */

 0001000 */

 0011100 */

 0110110 */

 0000000 */

 0111100 */

 1100110 */

 1111110 */

 1100000 */

 1100000 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 137 0x89 'ë' */

 0000000 */

 1100110 */

 0000000 */

 0000000 */

 0111100 */

 1100110 */

 1111110 */

 1100000 */

 1100000 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 138 0x8a 'è' */

 1100000 */

 0110000 */

 0011000 */

 0000000 */

 0111100 */

 1100110 */

 1111110 */

 1100000 */

 1100000 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 139 0x8b 'ï' */

 0000000 */

 0110110 */

 0000000 */

 0000000 */

 0011100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0011110 */

 0000000 */

 0000000 */

 0000000 */

 140 0x8c 'î' */

 0011000 */

 0111100 */

 1100110 */

 0000000 */

 0111000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 141 0x8d 'ì' */

 1100000 */

 0110000 */

 0011000 */

 0000000 */

 0111000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 142 0x8e 'Ä' */

 0000000 */

 1100110 */

 0000000 */

 0011000 */

 0111100 */

 1100110 */

 1100110 */

 1111110 */

 1100110 */

 1100110 */

 1100110 */

 0000000 */

 0000000 */

 0000000 */

 143 0x8f 'Å' */

 0011000 */

 0100100 */

 0100100 */

 0011000 */

 0111100 */

 1100110 */

 1111110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0000000 */

 0000000 */

 0000000 */

 144 0x90 'É' */

 0001100 */

 0011000 */

 1111110 */

 1100110 */

 1100010 */

 1101000 */

 1111000 */

 1101000 */

 1100010 */

 1100110 */

 1111110 */

 0000000 */

 0000000 */

 0000000 */

 145 0x91 'æ' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1110110 */

 0011011 */

 0011011 */

 0111111 */

 1101100 */

 1101100 */

 0110111 */

 0000000 */

 0000000 */

 0000000 */

 146 0x92 'Æ' */

 0000000 */

 0011111 */

 0110110 */

 1100110 */

 1100110 */

 1111111 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100111 */

 0000000 */

 0000000 */

 0000000 */

 147 0x93 'ô' */

 0001000 */

 0011100 */

 0110110 */

 0000000 */

 0111100 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 148 0x94 'ö' */

 0000000 */

 1100110 */

 0000000 */

 0000000 */

 0111100 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 149 0x95 'ò' */

 1100000 */

 0110000 */

 0011000 */

 0000000 */

 0111100 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 150 0x96 'û' */

 0011000 */

 0111100 */

 1100110 */

 0000000 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111011 */

 0000000 */

 0000000 */

 0000000 */

 151 0x97 'ù' */

 0110000 */

 0011000 */

 0001100 */

 0000000 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111011 */

 0000000 */

 0000000 */

 0000000 */

 152 0x98 'ÿ' */

 0000000 */

 1100110 */

 0000000 */

 0000000 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111110 */

 0000110 */

 0001100 */

 0111000 */

 153 0x99 'Ö' */

 1100110 */

 0000000 */

 0111100 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 154 0x9a 'Ü' */

 1100110 */

 0000000 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 155 0x9b '¢' */

 0011000 */

 0011000 */

 0111110 */

 1100110 */

 1100000 */

 1100000 */

 1100000 */

 1100110 */

 0111110 */

 0011000 */

 0011000 */

 0000000 */

 0000000 */

 0000000 */

 156 0x9c '£' */

 0011100 */

 0110110 */

 0110010 */

 0110000 */

 1111000 */

 0110000 */

 0110000 */

 0110000 */

 0110000 */

 1110011 */

 1111110 */

 0000000 */

 0000000 */

 0000000 */

 157 0x9d '¥' */

 0000000 */

 1100110 */

 1100110 */

 0111100 */

 0011000 */

 1111110 */

 0011000 */

 1111110 */

 0011000 */

 0011000 */

 0011000 */

 0000000 */

 0000000 */

 0000000 */

 158 0x9e '₧' */

 1111100 */

 1100110 */

 1100110 */

 1111100 */

 1100010 */

 1100110 */

 1101111 */

 1100110 */

 1100110 */

 1100110 */

 1100011 */

 0000000 */

 0000000 */

 0000000 */

 159 0x9f 'ƒ' */

 0001110 */

 0011011 */

 0011000 */

 0011000 */

 0011000 */

 1111110 */

 0011000 */

 0011000 */

 0011000 */

 1011000 */

 1110000 */

 0000000 */

 0000000 */

 0000000 */

 160 0xa0 'á' */

 0001100 */

 0011000 */

 0110000 */

 0000000 */

 0111100 */

 0000110 */

 0111110 */

 1100110 */

 1100110 */

 1100110 */

 0111011 */

 0000000 */

 0000000 */

 0000000 */

 161 0xa1 'í' */

 0001100 */

 0011000 */

 0110000 */

 0000000 */

 0111000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 162 0xa2 'ó' */

 0001100 */

 0011000 */

 0110000 */

 0000000 */

 0111100 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 163 0xa3 'ú' */

 0001100 */

 0011000 */

 0110000 */

 0000000 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111011 */

 0000000 */

 0000000 */

 0000000 */

 164 0xa4 'ñ' */

 0000000 */

 0111011 */

 1101110 */

 0000000 */

 1011100 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0000000 */

 0000000 */

 0000000 */

 165 0xa5 'Ñ' */

 0111011 */

 1101110 */

 0000000 */

 1100110 */

 1110110 */

 1110110 */

 1111110 */

 1101110 */

 1100110 */

 1100110 */

 1100110 */

 0000000 */

 0000000 */

 0000000 */

 166 0xa6 'ª' */

 0000000 */

 0111100 */

 1101100 */

 1101100 */

 0111110 */

 0000000 */

 1111110 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 167 0xa7 'º' */

 0000000 */

 0111000 */

 1101100 */

 1101100 */

 0111000 */

 0000000 */

 1111100 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 168 0xa8 '¿' */

 0000000 */

 0011000 */

 0011000 */

 0000000 */

 0011000 */

 0011000 */

 0110000 */

 1100000 */

 1100110 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 169 0xa9 '⌐' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1111110 */

 1100000 */

 1100000 */

 1100000 */

 1100000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 170 0xaa '¬' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1111110 */

 0000110 */

 0000110 */

 0000110 */

 0000110 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 171 0xab '½' */

 0110000 */

 1110000 */

 0110001 */

 0110011 */

 0110110 */

 0001100 */

 0011000 */

 0110000 */

 1100000 */

 1011100 */

 0100110 */

 0001100 */

 0011000 */

 0111110 */

 172 0xac '¼' */

 0110000 */

 1110000 */

 0110001 */

 0110011 */

 0110110 */

 0001100 */

 0011000 */

 0110110 */

 1101110 */

 1011010 */

 0111111 */

 0000110 */

 0000110 */

 0000000 */

 173 0xad '¡' */

 0000000 */

 0011000 */

 0011000 */

 0000000 */

 0011000 */

 0011000 */

 0011000 */

 0111100 */

 0111100 */

 0111100 */

 0011000 */

 0000000 */

 0000000 */

 0000000 */

 174 0xae '«' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0011011 */

 0110110 */

 1101100 */

 0110110 */

 0011011 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 175 0xaf '»' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1101100 */

 0110110 */

 0011011 */

 0110110 */

 1101100 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 176 0xb0 '░' */

 1000100 */

 0010001 */

 1000100 */

 0010001 */

 1000100 */

 0010001 */

 1000100 */

 0010001 */

 1000100 */

 0010001 */

 1000100 */

 0010001 */

 1000100 */

 0010001 */

 177 0xb1 '▒' */

 0101010 */

 1010101 */

 0101010 */

 1010101 */

 0101010 */

 1010101 */

 0101010 */

 1010101 */

 0101010 */

 1010101 */

 0101010 */

 1010101 */

 0101010 */

 1010101 */

 178 0xb2 '▓' */

 1110111 */

 1011101 */

 1110111 */

 1011101 */

 1110111 */

 1011101 */

 1110111 */

 1011101 */

 1110111 */

 1011101 */

 1110111 */

 1011101 */

 1110111 */

 1011101 */

 179 0xb3 '│' */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 180 0xb4 '┤' */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 1111000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 181 0xb5 '╡' */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 1111000 */

 0011000 */

 1111000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 182 0xb6 '╢' */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 1110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 183 0xb7 '╖' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1111110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 184 0xb8 '╕' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1111000 */

 0011000 */

 1111000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 185 0xb9 '╣' */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 1110110 */

 0000110 */

 1110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 186 0xba '║' */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 187 0xbb '╗' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1111110 */

 0000110 */

 1110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 188 0xbc '╝' */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 1110110 */

 0000110 */

 1111110 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 189 0xbd '╜' */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 1111110 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 190 0xbe '╛' */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 1111000 */

 0011000 */

 1111000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 191 0xbf '┐' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1111000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 192 0xc0 '└' */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011111 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 193 0xc1 '┴' */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 1111111 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 194 0xc2 '┬' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1111111 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 195 0xc3 '├' */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011111 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 196 0xc4 '─' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1111111 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 197 0xc5 '┼' */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 1111111 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 198 0xc6 '╞' */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011111 */

 0011000 */

 0011111 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 199 0xc7 '╟' */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110111 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 200 0xc8 '╚' */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110111 */

 0110000 */

 0111111 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 201 0xc9 '╔' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0111111 */

 0110000 */

 0110111 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 202 0xca '╩' */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 1110111 */

 0000000 */

 1111111 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 203 0xcb '╦' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1111111 */

 0000000 */

 1110111 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 204 0xcc '╠' */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110111 */

 0110000 */

 0110111 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 205 0xcd '═' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1111111 */

 0000000 */

 1111111 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 206 0xce '╬' */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 1110111 */

 0000000 */

 1110111 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 207 0xcf '╧' */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 1111111 */

 0000000 */

 1111111 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 208 0xd0 '╨' */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 1111111 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 209 0xd1 '╤' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1111111 */

 0000000 */

 1111111 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 210 0xd2 '╥' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1111111 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 211 0xd3 '╙' */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0111111 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 212 0xd4 '╘' */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011111 */

 0011000 */

 0011111 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 213 0xd5 '╒' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0011111 */

 0011000 */

 0011111 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 214 0xd6 '╓' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0111111 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 215 0xd7 '╫' */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 1111111 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 216 0xd8 '╪' */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 1111111 */

 0011000 */

 1111111 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 217 0xd9 '┘' */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 1111000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 218 0xda '┌' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0011111 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 219 0xdb '█' */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 220 0xdc '▄' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 221 0xdd '▌' */

 1110000 */

 1110000 */

 1110000 */

 1110000 */

 1110000 */

 1110000 */

 1110000 */

 1110000 */

 1110000 */

 1110000 */

 1110000 */

 1110000 */

 1110000 */

 1110000 */

 222 0xde '▐' */

 0001111 */

 0001111 */

 0001111 */

 0001111 */

 0001111 */

 0001111 */

 0001111 */

 0001111 */

 0001111 */

 0001111 */

 0001111 */

 0001111 */

 0001111 */

 0001111 */

 223 0xdf '▀' */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 1111111 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 224 0xe0 'α' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0111011 */

 1101110 */

 1101100 */

 1101100 */

 1101100 */

 1101110 */

 0111011 */

 0000000 */

 0000000 */

 0000000 */

 225 0xe1 'ß' */

 0000000 */

 0111100 */

 1100110 */

 1100110 */

 1100110 */

 1101100 */

 1100110 */

 1100011 */

 1100011 */

 1100011 */

 1100110 */

 0000000 */

 0000000 */

 0000000 */

 226 0xe2 'Γ' */

 0000000 */

 1111110 */

 1100110 */

 1100110 */

 1100000 */

 1100000 */

 1100000 */

 1100000 */

 1100000 */

 1100000 */

 1100000 */

 0000000 */

 0000000 */

 0000000 */

 227 0xe3 'π' */

 0000000 */

 0000000 */

 1111111 */

 1111111 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0000000 */

 0000000 */

 0000000 */

 228 0xe4 'Σ' */

 0000000 */

 1111110 */

 1100110 */

 0110000 */

 0011000 */

 0001100 */

 0001100 */

 0011000 */

 0110000 */

 1100110 */

 1111110 */

 0000000 */

 0000000 */

 0000000 */

 229 0xe5 'σ' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0111111 */

 1101100 */

 1101100 */

 1101100 */

 1101100 */

 1101100 */

 0111000 */

 0000000 */

 0000000 */

 0000000 */

 230 0xe6 'µ' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1111100 */

 1100000 */

 1100000 */

 1000000 */

 231 0xe7 'τ' */

 0000000 */

 0000000 */

 0000000 */

 0111011 */

 1101110 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0000000 */

 0000000 */

 0000000 */

 232 0xe8 'Φ' */

 0000000 */

 1111110 */

 0011000 */

 0111100 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111100 */

 0011000 */

 1111110 */

 0000000 */

 0000000 */

 0000000 */

 233 0xe9 'Θ' */

 0000000 */

 0011100 */

 0110110 */

 1100110 */

 1100110 */

 1111110 */

 1100110 */

 1100110 */

 1100110 */

 0110110 */

 0011100 */

 0000000 */

 0000000 */

 0000000 */

 234 0xea 'Ω' */

 0000000 */

 0011100 */

 0110110 */

 1100011 */

 1100011 */

 1100011 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 1110111 */

 0000000 */

 0000000 */

 0000000 */

 235 0xeb 'δ' */

 0000000 */

 0011110 */

 0110000 */

 0011000 */

 0001100 */

 0111110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0111100 */

 0000000 */

 0000000 */

 0000000 */

 236 0xec '∞' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0111110 */

 1101011 */

 1101011 */

 1101011 */

 0111110 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 237 0xed 'φ' */

 0000000 */

 0000000 */

 0000011 */

 0000110 */

 0111110 */

 1101011 */

 1101011 */

 1110011 */

 0111110 */

 0110000 */

 1100000 */

 0000000 */

 0000000 */

 0000000 */

 238 0xee 'ε' */

 0000000 */

 0001110 */

 0011000 */

 0110000 */

 0110000 */

 0111110 */

 0110000 */

 0110000 */

 0110000 */

 0011000 */

 0001110 */

 0000000 */

 0000000 */

 0000000 */

 239 0xef '∩' */

 0000000 */

 0000000 */

 0111100 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 1100110 */

 0000000 */

 0000000 */

 0000000 */

 240 0xf0 '≡' */

 0000000 */

 0000000 */

 0000000 */

 1111110 */

 0000000 */

 0000000 */

 1111110 */

 0000000 */

 0000000 */

 1111110 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 241 0xf1 '±' */

 0000000 */

 0000000 */

 0000000 */

 0011000 */

 0011000 */

 1111110 */

 0011000 */

 0011000 */

 0000000 */

 0000000 */

 1111110 */

 0000000 */

 0000000 */

 0000000 */

 242 0xf2 '≥' */

 0000000 */

 0000000 */

 0110000 */

 0011000 */

 0001100 */

 0000110 */

 0001100 */

 0011000 */

 0110000 */

 0000000 */

 1111110 */

 0000000 */

 0000000 */

 0000000 */

 243 0xf3 '≤' */

 0000000 */

 0000000 */

 0001100 */

 0011000 */

 0110000 */

 1100000 */

 0110000 */

 0011000 */

 0001100 */

 0000000 */

 1111110 */

 0000000 */

 0000000 */

 0000000 */

 244 0xf4 '⌠' */

 0000000 */

 0001110 */

 0011011 */

 0011011 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 0011000 */

 245 0xf5 '⌡' */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 1101100 */

 1101100 */

 1101100 */

 0111000 */

 0000000 */

 0000000 */

 246 0xf6 '÷' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0011000 */

 0000000 */

 1111110 */

 0000000 */

 0011000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 247 0xf7 '≈' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0111011 */

 1101110 */

 0000000 */

 0111011 */

 1101110 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 248 0xf8 '°' */

 0011100 */

 0110110 */

 0110110 */

 0011100 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 249 0xf9 '·' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0011000 */

 0011000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 250 0xfa '•' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0011000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 251 0xfb '√' */

 0001111 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 0001100 */

 1101100 */

 1101100 */

 1101100 */

 0111100 */

 0011100 */

 0000000 */

 0000000 */

 0000000 */

 252 0xfc 'ⁿ' */

 1101100 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0110110 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 253 0xfd '²' */

 0111100 */

 1100110 */

 0001100 */

 0011000 */

 0110010 */

 1111110 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 254 0xfe '■' */

 0000000 */

 0000000 */

 0000000 */

 0111110 */

 0111110 */

 0111110 */

 0111110 */

 0111110 */

 0111110 */

 0111110 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 255 0xff ' ' */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 0000000 */

 SPDX-License-Identifier: GPL-2.0

 Acorn-like font definition, with PC graphics characters */

 00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 01 */  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e, 
 02 */  0x7e, 0xff, 0xbd, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 
 03 */  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 
 04 */  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 
 05 */  0x00, 0x18, 0x3c, 0xe7, 0xe7, 0x3c, 0x18, 0x00, 
 06 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 07 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 08 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 09 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 0A */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 0B */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 0C */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 0D */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 0E */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 0F */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 10 */  0x00, 0x60, 0x78, 0x7e, 0x7e, 0x78, 0x60, 0x00, 
 11 */  0x00, 0x06, 0x1e, 0x7e, 0x7e, 0x1e, 0x06, 0x00, 
 12 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 13 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 14 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 15 */  0x3c, 0x60, 0x3c, 0x66, 0x3c, 0x06, 0x3c, 0x00,

 16 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 17 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 18 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 19 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 1A */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 1B */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 1C */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 1D */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 1E */  0x00, 0x18, 0x18, 0x3c, 0x3c, 0x7e, 0x7e, 0x00, 
 1F */  0x00, 0x7e, 0x7e, 0x3c, 0x3c, 0x18, 0x18, 0x00, 
 20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 21 */  0x18, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x00, 
 22 */  0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 
 23 */  0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00, 
 24 */  0x0C, 0x3F, 0x68, 0x3E, 0x0B, 0x7E, 0x18, 0x00, 
 25 */  0x60, 0x66, 0x0C, 0x18, 0x30, 0x66, 0x06, 0x00, 
 26 */  0x38, 0x6C, 0x6C, 0x38, 0x6D, 0x66, 0x3B, 0x00, 
 27 */  0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
 28 */  0x0C, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00, 
 29 */  0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00, 
 2A */  0x00, 0x18, 0x7E, 0x3C, 0x7E, 0x18, 0x00, 0x00, 
 2B */  0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 
 2C */  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 
 2D */  0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 
 2E */  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 
 2F */  0x00, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00, 0x00, 
 30 */  0x3C, 0x66, 0x6E, 0x7E, 0x76, 0x66, 0x3C, 0x00, 
 31 */  0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00, 
 32 */  0x3C, 0x66, 0x06, 0x0C, 0x18, 0x30, 0x7E, 0x00, 
 33 */  0x3C, 0x66, 0x06, 0x1C, 0x06, 0x66, 0x3C, 0x00, 
 34 */  0x0C, 0x1C, 0x3C, 0x6C, 0x7E, 0x0C, 0x0C, 0x00, 
 35 */  0x7E, 0x60, 0x7C, 0x06, 0x06, 0x66, 0x3C, 0x00, 
 36 */  0x1C, 0x30, 0x60, 0x7C, 0x66, 0x66, 0x3C, 0x00, 
 37 */  0x7E, 0x06, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00, 
 38 */  0x3C, 0x66, 0x66, 0x3C, 0x66, 0x66, 0x3C, 0x00, 
 39 */  0x3C, 0x66, 0x66, 0x3E, 0x06, 0x0C, 0x38, 0x00, 
 3A */  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 
 3B */  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x30, 
 3C */  0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x00, 
 3D */  0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00, 
 3E */  0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x00, 
 3F */  0x3C, 0x66, 0x0C, 0x18, 0x18, 0x00, 0x18, 0x00, 
 40 */  0x3C, 0x66, 0x6E, 0x6A, 0x6E, 0x60, 0x3C, 0x00, 
 41 */  0x3C, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00, 
 42 */  0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x00, 
 43 */  0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x00, 
 44 */  0x78, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x00, 
 45 */  0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x7E, 0x00, 
 46 */  0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x60, 0x00, 
 47 */  0x3C, 0x66, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x00, 
 48 */  0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00, 
 49 */  0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00, 
 4A */  0x3E, 0x0C, 0x0C, 0x0C, 0x0C, 0x6C, 0x38, 0x00, 
 4B */  0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66, 0x00, 
 4C */  0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x00, 
 4D */  0x63, 0x77, 0x7F, 0x6B, 0x6B, 0x63, 0x63, 0x00, 
 4E */  0x66, 0x66, 0x76, 0x7E, 0x6E, 0x66, 0x66, 0x00, 
 4F */  0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, 
 50 */  0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00, 
 51 */  0x3C, 0x66, 0x66, 0x66, 0x6A, 0x6C, 0x36, 0x00, 
 52 */  0x7C, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0x66, 0x00, 
 53 */  0x3C, 0x66, 0x60, 0x3C, 0x06, 0x66, 0x3C, 0x00, 
 54 */  0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 
 55 */  0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, 
 56 */  0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00, 
 57 */  0x63, 0x63, 0x6B, 0x6B, 0x7F, 0x77, 0x63, 0x00, 
 58 */  0x66, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x66, 0x00, 
 59 */  0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x00, 
 5A */  0x7E, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x7E, 0x00, 
 5B */  0x7C, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7C, 0x00, 
 5C */  0x00, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x00, 0x00, 
 5D */  0x3E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3E, 0x00, 
 5E */  0x3C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 5F */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
 60 */  0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 61 */  0x00, 0x00, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00, 
 62 */  0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x00, 
 63 */  0x00, 0x00, 0x3C, 0x66, 0x60, 0x66, 0x3C, 0x00, 
 64 */  0x06, 0x06, 0x3E, 0x66, 0x66, 0x66, 0x3E, 0x00, 
 65 */  0x00, 0x00, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00, 
 66 */  0x1C, 0x30, 0x30, 0x7C, 0x30, 0x30, 0x30, 0x00, 
 67 */  0x00, 0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x3C, 
 68 */  0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x00, 
 69 */  0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00, 
 6A */  0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x70, 
 6B */  0x60, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0x00, 
 6C */  0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 
 6D */  0x00, 0x00, 0x36, 0x7F, 0x6B, 0x6B, 0x63, 0x00, 
 6E */  0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x00, 
 6F */  0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00, 
 70 */  0x00, 0x00, 0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 
 71 */  0x00, 0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x07, 
 72 */  0x00, 0x00, 0x6C, 0x76, 0x60, 0x60, 0x60, 0x00, 
 73 */  0x00, 0x00, 0x3E, 0x60, 0x3C, 0x06, 0x7C, 0x00, 
 74 */  0x30, 0x30, 0x7C, 0x30, 0x30, 0x30, 0x1C, 0x00, 
 75 */  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00, 
 76 */  0x00, 0x00, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00, 
 77 */  0x00, 0x00, 0x63, 0x6B, 0x6B, 0x7F, 0x36, 0x00, 
 78 */  0x00, 0x00, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x00, 
 79 */  0x00, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x06, 0x3C, 
 7A */  0x00, 0x00, 0x7E, 0x0C, 0x18, 0x30, 0x7E, 0x00, 
 7B */  0x0C, 0x18, 0x18, 0x70, 0x18, 0x18, 0x0C, 0x00, 
 7C */  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 
 7D */  0x30, 0x18, 0x18, 0x0E, 0x18, 0x18, 0x30, 0x00, 
 7E */  0x31, 0x6B, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 
 7F */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
 80 */  0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x30, 0x60,

 81 */  0x66, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3e, 0x00,

 82 */  0x0c, 0x18, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,

 83 */  0x18, 0x66, 0x3c, 0x06, 0x3e, 0x66, 0x3e, 0x00,

 84 */  0x66, 0x00, 0x3c, 0x06, 0x3e, 0x66, 0x3e, 0x00,

 85 */  0x30, 0x18, 0x3c, 0x06, 0x3e, 0x66, 0x3e, 0x00,

 86 */  0x3c, 0x66, 0x3c, 0x06, 0x3e, 0x66, 0x3e, 0x00,

 87 */  0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x60,

 88 */  0x3c, 0x66, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,

 89 */  0x66, 0x00, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,

 8A */  0x30, 0x18, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,

 8B */  0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x3c, 0x00,

 8C */  0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x3c, 0x00,

 8D */  0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x3c, 0x00,

 8E */  0x66, 0x66, 0x00, 0x3c, 0x66, 0x7e, 0x66, 0x00,

 8F */  0x18, 0x66, 0x00, 0x3c, 0x66, 0x7e, 0x66, 0x00,

 90 */  0x0c, 0x18, 0x7e, 0x60, 0x7c, 0x60, 0x7e, 0x00,

 91 */  0x00, 0x00, 0x3f, 0x0d, 0x3f, 0x6c, 0x3f, 0x00,

 92 */  0x3f, 0x66, 0x66, 0x7f, 0x66, 0x66, 0x67, 0x00,

 93 */  0x3c, 0x66, 0x00, 0x3c, 0x66, 0x66, 0x3c, 0x00,

 94 */  0x66, 0x00, 0x00, 0x3c, 0x66, 0x66, 0x3c, 0x00,

 95 */  0x30, 0x18, 0x00, 0x3c, 0x66, 0x66, 0x3c, 0x00,

 96 */  0x3c, 0x66, 0x00, 0x66, 0x66, 0x66, 0x3e, 0x00,

 97 */  0x30, 0x18, 0x00, 0x66, 0x66, 0x66, 0x3e, 0x00,

 98 */  0x66, 0x00, 0x66, 0x66, 0x66, 0x3e, 0x06, 0x3c,

 99 */  0x66, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x00,

 9A */  0x66, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00,

 9B */  0x08, 0x3e, 0x6b, 0x68, 0x6b, 0x3e, 0x08, 0x00,

 9C */  0x1c, 0x36, 0x30, 0x7c, 0x30, 0x30, 0x7e, 0x00,

 9D */  0x66, 0x3c, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00,

 9E */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 9F */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 A0 */  0x0c, 0x18, 0x3c, 0x06, 0x3e, 0x66, 0x3e, 0x00,

 A1 */  0x0c, 0x18, 0x00, 0x38, 0x18, 0x18, 0x3c, 0x00,

 A2 */  0x0c, 0x18, 0x00, 0x3c, 0x66, 0x66, 0x3c, 0x00,

 A3 */  0x0c, 0x18, 0x00, 0x66, 0x66, 0x66, 0x3e, 0x00,

 A4 */  0x36, 0x6c, 0x00, 0x7c, 0x66, 0x66, 0x66, 0x00,

 A5 */  0x36, 0x6c, 0x00, 0x66, 0x76, 0x6e, 0x66, 0x00,

 A6 */  0x1c, 0x06, 0x1e, 0x36, 0x1e, 0x00, 0x3e, 0x00,

 A7 */  0x1c, 0x36, 0x36, 0x36, 0x1c, 0x00, 0x3e, 0x00,

 A8 */  0x18, 0x00, 0x18, 0x18, 0x30, 0x66, 0x3c, 0x00,

 A9 */  0x7e, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

 AA */  0x7e, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

 AB */  0x40, 0xc0, 0x40, 0x4f, 0x41, 0x0f, 0x08, 0x0f,

 AC */  0x40, 0xc0, 0x40, 0x48, 0x48, 0x0a, 0x0f, 0x02,

 AD */  0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,

 AE */  0x00, 0x33, 0x66, 0xcc, 0xcc, 0x66, 0x33, 0x00,

 AF */  0x00, 0xcc, 0x66, 0x33, 0x33, 0x66, 0xcc, 0x00,

 B0 */  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,

 B1 */  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,

 B2 */  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,

 B3 */  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,

 B4 */  0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18,

 B5 */  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,

 B6 */  0x66, 0x66, 0x66, 0xe6, 0x66, 0x66, 0x66, 0x66,

 B7 */  0x00, 0x00, 0x00, 0xfe, 0x66, 0x66, 0x66, 0x66,

 B8 */  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,

 B9 */  0x66, 0x66, 0xe6, 0x06, 0xe6, 0x66, 0x66, 0x66,

 BA */  0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,

 BB */  0x00, 0x00, 0xfe, 0x06, 0xe6, 0x66, 0x66, 0x66,

 BC */  0x66, 0x66, 0xe6, 0x06, 0xfe, 0x00, 0x00, 0x00,

 BD */  0x66, 0x66, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,

 BE */  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,

 BF */  0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18,

 C0 */  0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00,

 C1 */  0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00,

 C2 */  0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18,

 C3 */  0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18,

 C4 */  0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,

 C5 */  0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18,

 C6 */  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,

 C7 */  0x66, 0x66, 0x66, 0x67, 0x66, 0x66, 0x66, 0x66,

 C8 */  0x66, 0x66, 0x67, 0x60, 0x7f, 0x00, 0x00, 0x00,

 C9 */  0x00, 0x00, 0x7f, 0x60, 0x67, 0x66, 0x66, 0x66,

 CA */  0x66, 0x66, 0xe7, 0x00, 0xff, 0x00, 0x00, 0x00,

 CB */  0x00, 0x00, 0xff, 0x00, 0xe7, 0x66, 0x66, 0x66,

 CC */  0x66, 0x66, 0x67, 0x60, 0x67, 0x66, 0x66, 0x66,

 CD */  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,

 CE */  0x66, 0x66, 0xe7, 0x00, 0xe7, 0x66, 0x66, 0x66,

 CF */  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,

 D0 */  0x66, 0x66, 0x66, 0xff, 0x00, 0x00, 0x00, 0x00,

 D1 */  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,

 D2 */  0x00, 0x00, 0x00, 0xff, 0x66, 0x66, 0x66, 0x66,

 D3 */  0x66, 0x66, 0x66, 0x7f, 0x00, 0x00, 0x00, 0x00,

 D4 */  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,

 D5 */  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,

 D6 */  0x00, 0x00, 0x00, 0x7f, 0x66, 0x66, 0x66, 0x66,

 D7 */  0x66, 0x66, 0x66, 0xff, 0x66, 0x66, 0x66, 0x66,

 D8 */  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,

 D9 */  0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00,

 DA */  0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18,

 DB */  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

 DC */  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,

 DD */  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,

 DE */  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,

 DF */  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,

 E0 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 E1 */  0x3c, 0x66, 0x66, 0x6c, 0x66, 0x66, 0x6c, 0xc0,

 E2 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 E3 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 E4 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 E5 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 E6 */  0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x3e, 0x60,

 E7 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 E8 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 E9 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 EA */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 EB */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 EC */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 ED */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 EE */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 EF */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 F0 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 F1 */  0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x7e, 0x00,

 F2 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 F3 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 F4 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 F5 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 F6 */  0x00, 0x18, 0x00, 0xff, 0x00, 0x18, 0x00, 0x00,

 F7 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 F8 */  0x3c, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,

 F9 */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 FA */  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,

 FB */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 FC */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 FD */  0x38, 0x04, 0x18, 0x20, 0x3c, 0x00, 0x00, 0x00,

 FE */  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,

 FF */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

 SPDX-License-Identifier: GPL-2.0

/********************************

 * adapted from font_sun12x22.c *

 * by Jurriaan Kalkman 06-2005  *

 0 0x00 '^@' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 1 0x01 '^A' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0011111110 */

 0100000001 */

 0101101101 */

 0100000001 */

 0100010001 */

 0100010001 */

 0101000101 */

 0100111001 */

 0100000001 */

 0011111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 2 0x02 '^B' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0011111110 */

 0111111111 */

 0110010011 */

 0111111111 */

 0111101111 */

 0111101111 */

 0110111011 */

 0111000111 */

 0111111111 */

 0011111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 3 0x03 '^C' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0001000100 */

 0011101110 */

 0111111111 */

 0011111110 */

 0011111110 */

 0001111100 */

 0001111100 */

 0000111000 */

 0000111000 */

 0000010000 */

 0000000000 */

 0000000000 */

 0000000000 */

 4 0x04 '^D' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000010000 */

 0000111000 */

 0000111000 */

 0001111100 */

 0001111100 */

 0011111110 */

 0001111100 */

 0001111100 */

 0000111000 */

 0000111000 */

 0000010000 */

 0000000000 */

 0000000000 */

 0000000000 */

 5 0x05 '^E' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000110000 */

 0001111000 */

 0000110000 */

 0011000110 */

 0111101111 */

 0011010110 */

 0000010000 */

 0000111000 */

 0001111100 */

 0000000000 */

 0000000000 */

 0000000000 */

 6 0x06 '^F' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000010000 */

 0000111000 */

 0001111100 */

 0001111100 */

 0011111110 */

 0111111111 */

 0111111111 */

 0011010110 */

 0000010000 */

 0000111000 */

 0001111100 */

 0000000000 */

 0000000000 */

 0000000000 */

 7 0x07 '^G' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000110000 */

 0001111000 */

 0001111000 */

 0011111100 */

 0011111100 */

 0001111000 */

 0001111000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 8 0x08 '^H' */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111001111 */

 1110000111 */

 1110000111 */

 1100000011 */

 1100000011 */

 1110000111 */

 1110000111 */

 1111001111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 9 0x09 '^I' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000110000 */

 0001001000 */

 0001001000 */

 0010000100 */

 0010000100 */

 0001001000 */

 0001001000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 10 0x0a '^J' */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111001111 */

 1110110111 */

 1110110111 */

 1101111011 */

 1101111011 */

 1110110111 */

 1110110111 */

 1111001111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 11 0x0b '^K' */

 0000000000 */

 0000000000 */

 0000111111 */

 0000111111 */

 0000001111 */

 0000011011 */

 0000110011 */

 0011110000 */

 0110011000 */

 1100001100 */

 1100001100 */

 1100001100 */

 0110011000 */

 0011110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 12 0x0c '^L' */

 0000000000 */

 0000000000 */

 0000000000 */

 0001111000 */

 0011001100 */

 0110000110 */

 0110000110 */

 0110000110 */

 0011001100 */

 0001111000 */

 0000110000 */

 0000110000 */

 0011111100 */

 0000110000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 13 0x0d '^M' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000111110 */

 0000100010 */

 0000111110 */

 0000100000 */

 0000100000 */

 0000100000 */

 0000100000 */

 0000100000 */

 0000100000 */

 0011100000 */

 0111100000 */

 0011000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 14 0x0e '^N' */

 0000000000 */

 0000000000 */

 0000000000 */

 0001111110 */

 0001000010 */

 0001111110 */

 0001000010 */

 0001000010 */

 0001000010 */

 0001000010 */

 0001001110 */

 0001011110 */

 0111001100 */

 1111000000 */

 0110000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 15 0x0f '^O' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000010000 */

 0010010010 */

 0001010100 */

 0101010101 */

 0011111110 */

 0000111000 */

 0000000000 */

 0000111000 */

 0011111110 */

 0101010101 */

 0001010100 */

 0010010010 */

 0000000000 */

 0000000000 */

 0000000000 */

 16 0x10 '^P' */

 0000000010 */

 0000000110 */

 0000001110 */

 0000011110 */

 0000111110 */

 0001111110 */

 0011111110 */

 0111111110 */

 1111111110 */

 0111111110 */

 0011111110 */

 0001111110 */

 0000111110 */

 0000011110 */

 0000001110 */

 0000000110 */

 0000000010 */

 0000000000 */

 17 0x11 '^Q' */

 0100000000 */

 0110000000 */

 0111000000 */

 0111100000 */

 0111110000 */

 0111111000 */

 0111111100 */

 0111111110 */

 0111111111 */

 0111111110 */

 0111111100 */

 0111111000 */

 0111110000 */

 0111100000 */

 0111000000 */

 0110000000 */

 0100000000 */

 0000000000 */

 18 0x12 '^R' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000110000 */

 0001111000 */

 0011111100 */

 0111111110 */

 0000110000 */

 0000110000 */

 0000110000 */

 0111111110 */

 0011111100 */

 0001111000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 19 0x13 '^S' */

 0000000000 */

 0011001100 */

 0011001100 */

 0011001100 */

 0011001100 */

 0011001100 */

 0011001100 */

 0011001100 */

 0011001100 */

 0011001100 */

 0011001100 */

 0000000000 */

 0000000000 */

 0011001100 */

 0011001100 */

 0000000000 */

 0000000000 */

 0000000000 */

 20 0x14 '^T' */

 0000000000 */

 0001111111 */

 0011100110 */

 0111100110 */

 0111100110 */

 0111100110 */

 0011100110 */

 0001100110 */

 0001100110 */

 0001100110 */

 0001100110 */

 0001100110 */

 0001100110 */

 0011100111 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 21 0x15 '^U' */

 0000000000 */

 0000000000 */

 0011111000 */

 0110001100 */

 0110001100 */

 0110000000 */

 0110000000 */

 0011111000 */

 0110001100 */

 0110001100 */

 0011111000 */

 0000001100 */

 0000001100 */

 0110001100 */

 0110001100 */

 0011111000 */

 0000000000 */

 0000000000 */

 22 0x16 '^V' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0111111110 */

 0111111110 */

 0111111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 23 0x17 '^W' */

 0000000000 */

 0000000000 */

 0000110000 */

 0001111000 */

 0011111100 */

 0111111110 */

 0000110000 */

 0000110000 */

 0000110000 */

 0111111110 */

 0011111100 */

 0001111000 */

 0000110000 */

 0111111110 */

 0111111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 24 0x18 '^X' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000110000 */

 0001111000 */

 0011111100 */

 0111111110 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 25 0x19 '^Y' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0111111110 */

 0011111100 */

 0001111000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 26 0x1a '^Z' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000010000 */

 0000011000 */

 0000011100 */

 0111111110 */

 0111111110 */

 0000011100 */

 0000011000 */

 0000010000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 27 0x1b '^[' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000100000 */

 0001100000 */

 0011100000 */

 0111111110 */

 0111111110 */

 0011100000 */

 0001100000 */

 0000100000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 28 0x1c '^\' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0110000000 */

 0110000000 */

 0110000000 */

 0111111110 */

 0111111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 29 0x1d '^]' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0001001000 */

 0011001100 */

 0111001110 */

 1111111111 */

 1111111111 */

 0111001110 */

 0011001100 */

 0001001000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 30 0x1e '^^' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000010000 */

 0000010000 */

 0000111000 */

 0000111000 */

 0001111100 */

 0001111100 */

 0011111110 */

 0011111110 */

 0111111111 */

 0111111111 */

 0000000000 */

 0000000000 */

 0000000000 */

 31 0x1f '^_' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0111111111 */

 0111111111 */

 0011111110 */

 0011111110 */

 0001111100 */

 0001111100 */

 0000111000 */

 0000111000 */

 0000010000 */

 0000010000 */

 0000000000 */

 0000000000 */

 0000000000 */

 32 0x20 ' ' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 33 0x21 '!' */

 0000000000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000000000 */

 0000110000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 34 0x22 '"' */

 0000000000 */

 0110001100 */

 1111011110 */

 1111011110 */

 0011000110 */

 0011000110 */

 0110001100 */

 0100001000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 35 0x23 '#' */

 0000000000 */

 0011001100 */

 0011001100 */

 0111111110 */

 0111111110 */

 0011001100 */

 0011001100 */

 0011001100 */

 0011001100 */

 0111111110 */

 0111111110 */

 0011001100 */

 0011001100 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 36 0x24 '$' */

 0000000000 */

 0000110000 */

 0011111000 */

 0011111100 */

 0110111110 */

 0110110110 */

 0110110010 */

 0011110000 */

 0000111100 */

 0000110110 */

 0100110110 */

 0110110110 */

 0111111100 */

 0011111000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 37 0x25 '%' */

 0000000000 */

 0011000110 */

 0111101100 */

 0111101100 */

 0011011000 */

 0000011000 */

 0000110000 */

 0000110000 */

 0001100000 */

 0001101100 */

 0011011110 */

 0011011110 */

 0110001100 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 38 0x26 '&' */

 0000000000 */

 0000011100 */

 0000111110 */

 0001100110 */

 0001100110 */

 0000111110 */

 0001111000 */

 0011111000 */

 0111011000 */

 0110011001 */

 0110001111 */

 0110001110 */

 0110001100 */

 0011111110 */

 0001110011 */

 0000000000 */

 0000000000 */

 0000000000 */

 39 0x27 ''' */

 0000000000 */

 0011000000 */

 0111100000 */

 0111100000 */

 0001100000 */

 0001100000 */

 0011000000 */

 0010000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 40 0x28 '(' */

 0000000000 */

 0000001100 */

 0000011000 */

 0000110000 */

 0000110000 */

 0001100000 */

 0001100000 */

 0001100000 */

 0001100000 */

 0001100000 */

 0001100000 */

 0000110000 */

 0000110000 */

 0000011000 */

 0000001100 */

 0000000000 */

 0000000000 */

 0000000000 */

 41 0x29 ')' */

 0000000000 */

 0011000000 */

 0001100000 */

 0000110000 */

 0000110000 */

 0000011000 */

 0000011000 */

 0000011000 */

 0000011000 */

 0000011000 */

 0000011000 */

 0000110000 */

 0000110000 */

 0001100000 */

 0011000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 42 0x2a '*' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000110000 */

 0100110010 */

 0110110110 */

 0011111100 */

 0111111110 */

 0011111100 */

 0110110110 */

 0100110010 */

 0000110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 43 0x2b '+' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0111111110 */

 0111111110 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 44 0x2c ',' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0011000000 */

 0111100000 */

 0111100000 */

 0001100000 */

 0001100000 */

 0011000000 */

 0110000000 */

 0100000000 */

 45 0x2d '-' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0111111110 */

 0111111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 46 0x2e '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0001100000 */

 0011110000 */

 0011110000 */

 0001100000 */

 0000000000 */

 0000000000 */

 0000000000 */

 47 0x2f '/' */

 0000000000 */

 0000000110 */

 0000000110 */

 0000001100 */

 0000001100 */

 0000011000 */

 0000011000 */

 0000110000 */

 0000110000 */

 0001100000 */

 0001100000 */

 0011000000 */

 0011000000 */

 0110000000 */

 0110000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 48 0x30 '0' */

 0000000000 */

 0000111000 */

 0001111100 */

 0010001100 */

 0110000110 */

 0110001110 */

 0110010110 */

 0110010110 */

 0110100110 */

 0110100110 */

 0111000110 */

 0110000100 */

 0011000100 */

 0011111000 */

 0001110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 49 0x31 '1' */

 0000000000 */

 0000010000 */

 0000110000 */

 0001110000 */

 0011110000 */

 0110110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0111111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 50 0x32 '2' */

 0000000000 */

 0001111000 */

 0011111100 */

 0110001110 */

 0100000110 */

 0000000110 */

 0000000110 */

 0000001100 */

 0000011000 */

 0000011000 */

 0000110000 */

 0001100000 */

 0011000010 */

 0111111110 */

 0111111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 51 0x33 '3' */

 0000000000 */

 0001110000 */

 0011111000 */

 0100011100 */

 0000001100 */

 0000011100 */

 0000011000 */

 0000111000 */

 0000011100 */

 0000001100 */

 0000000110 */

 0100000110 */

 0110000110 */

 0011111100 */

 0001111000 */

 0000000000 */

 0000000000 */

 0000000000 */

 52 0x34 '4' */

 0000000000 */

 0000011000 */

 0000111000 */

 0001111000 */

 0011011000 */

 0011011000 */

 0110011000 */

 0110011000 */

 1100011000 */

 1100011000 */

 1111111110 */

 1111111110 */

 0000011000 */

 0000011000 */

 0000011000 */

 0000000000 */

 0000000000 */

 0000000000 */

 53 0x35 '5' */

 0000000000 */

 0001111100 */

 0001111100 */

 0011000000 */

 0011000000 */

 0110000000 */

 0111111000 */

 0110011100 */

 0000001110 */

 0000000110 */

 0000000110 */

 0000000110 */

 0100000110 */

 0110001100 */

 0011111000 */

 0000000000 */

 0000000000 */

 0000000000 */

 54 0x36 '6' */

 0000000000 */

 0000011000 */

 0000110000 */

 0001100000 */

 0011000000 */

 0011000000 */

 0110000000 */

 0110111000 */

 0111111100 */

 0111001110 */

 0110000110 */

 0110000110 */

 0111000100 */

 0011111000 */

 0001110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 55 0x37 '7' */

 0000000000 */

 0001111110 */

 0011111110 */

 0110000110 */

 0000000110 */

 0000001100 */

 0000001100 */

 0000011000 */

 0000011000 */

 0000110000 */

 0000110000 */

 0001100000 */

 0001100000 */

 0011000000 */

 0011000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 56 0x38 '8' */

 0000000000 */

 0001111000 */

 0010001100 */

 0110000110 */

 0110000110 */

 0011000100 */

 0001101000 */

 0000110000 */

 0001011000 */

 0010001100 */

 0110000110 */

 0110000110 */

 0110000110 */

 0011000100 */

 0001111000 */

 0000000000 */

 0000000000 */

 0000000000 */

 57 0x39 '9' */

 0000000000 */

 0000111000 */

 0001011100 */

 0010001110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0111001110 */

 0011110110 */

 0001100110 */

 0000000110 */

 0000001100 */

 0000001100 */

 0000011000 */

 0000110000 */

 0001100000 */

 0000000000 */

 0000000000 */

 58 0x3a ':' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0001100000 */

 0011110000 */

 0011110000 */

 0001100000 */

 0000000000 */

 0000000000 */

 0001100000 */

 0011110000 */

 0011110000 */

 0001100000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 59 0x3b ';' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0001100000 */

 0011110000 */

 0011110000 */

 0001100000 */

 0000000000 */

 0001100000 */

 0011110000 */

 0011110000 */

 0000110000 */

 0001100000 */

 0011000000 */

 0010000000 */

 60 0x3c '<' */

 0000000000 */

 0000000000 */

 0000001100 */

 0000011000 */

 0000110000 */

 0001100000 */

 0011000000 */

 0110000000 */

 0110000000 */

 0011000000 */

 0001100000 */

 0000110000 */

 0000011000 */

 0000001100 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 61 0x3d '=' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0111111110 */

 0111111110 */

 0000000000 */

 0000000000 */

 0111111110 */

 0111111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 62 0x3e '>' */

 0000000000 */

 0000000000 */

 0011000000 */

 0001100000 */

 0000110000 */

 0000011000 */

 0000001100 */

 0000000110 */

 0000000110 */

 0000001100 */

 0000011000 */

 0000110000 */

 0001100000 */

 0011000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 63 0x3f '?' */

 0000000000 */

 0000111000 */

 0001111100 */

 0011101110 */

 0010000110 */

 0000000110 */

 0000001100 */

 0000011000 */

 0000011000 */

 0000110000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0000110000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 64 0x40 '@' */

 0000000000 */

 0000000000 */

 0000111000 */

 0011111100 */

 0011000110 */

 0110010110 */

 0110110110 */

 0110110110 */

 0110110110 */

 0110110110 */

 0110111110 */

 0110000000 */

 0011000110 */

 0011111110 */

 0000111100 */

 0000000000 */

 0000000000 */

 0000000000 */

 65 0x41 'A' */

 0000000000 */

 0000010000 */

 0000010000 */

 0000111000 */

 0000111000 */

 0001101100 */

 0001101100 */

 0001100110 */

 0011000110 */

 0011111110 */

 0011000110 */

 0110000110 */

 0110000011 */

 0110000011 */

 1111000111 */

 0000000000 */

 0000000000 */

 0000000000 */

 66 0x42 'B' */

 0000000000 */

 1111110000 */

 0110001000 */

 0110001100 */

 0110001100 */

 0110001100 */

 0110011000 */

 0111111000 */

 0110001100 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110001100 */

 1111111000 */

 0000000000 */

 0000000000 */

 0000000000 */

 67 0x43 'C' */

 0000000000 */

 0000111100 */

 0001000110 */

 0010000010 */

 0010000000 */

 0110000000 */

 0110000000 */

 0110000000 */

 0110000000 */

 0110000000 */

 0110000000 */

 0010000000 */

 0011000010 */

 0001100100 */

 0000111000 */

 0000000000 */

 0000000000 */

 0000000000 */

 68 0x44 'D' */

 0000000000 */

 1111110000 */

 0110011100 */

 0110001100 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000100 */

 0110011000 */

 1111100000 */

 0000000000 */

 0000000000 */

 0000000000 */

 69 0x45 'E' */

 0000000000 */

 0111111110 */

 0011000010 */

 0011000010 */

 0011000000 */

 0011000000 */

 0011000100 */

 0011111100 */

 0011000100 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000010 */

 0011000010 */

 0111111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 70 0x46 'F' */

 0000000000 */

 0111111110 */

 0011000010 */

 0011000010 */

 0011000000 */

 0011000000 */

 0011000100 */

 0011111100 */

 0011000100 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0111100000 */

 0000000000 */

 0000000000 */

 0000000000 */

 71 0x47 'G' */

 0000000000 */

 0000111100 */

 0001000110 */

 0010000010 */

 0010000000 */

 0110000000 */

 0110000000 */

 0110000000 */

 0110000000 */

 0110011111 */

 0110000110 */

 0010000110 */

 0011000110 */

 0001100110 */

 0000111000 */

 0000000000 */

 0000000000 */

 0000000000 */

 72 0x48 'H' */

 0000000000 */

 1111001111 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0111111110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 1111001111 */

 0000000000 */

 0000000000 */

 0000000000 */

 73 0x49 'I' */

 0000000000 */

 0011111100 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0011111100 */

 0000000000 */

 0000000000 */

 0000000000 */

 74 0x4a 'J' */

 0000000000 */

 0011111100 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000100000 */

 0111000000 */

 0110000000 */

 0000000000 */

 75 0x4b 'K' */

 0000000000 */

 1111000110 */

 0110001100 */

 0110011000 */

 0110110000 */

 0111100000 */

 0111000000 */

 0111000000 */

 0111100000 */

 0111100000 */

 0110110000 */

 0110011000 */

 0110001100 */

 0110000110 */

 1111000011 */

 0000000000 */

 0000000000 */

 0000000000 */

 76 0x4c 'L' */

 0000000000 */

 0111100000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000010 */

 0011000010 */

 0111111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 77 0x4d 'M' */

 0000000000 */

 1110000011 */

 0110000110 */

 0111001110 */

 0111001110 */

 0110110110 */

 0110110110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 1111001111 */

 0000000000 */

 0000000000 */

 0000000000 */

 78 0x4e 'N' */

 0000000000 */

 1111001111 */

 0110000110 */

 0110000110 */

 0111000110 */

 0111100110 */

 0111100110 */

 0110110110 */

 0110110110 */

 0110011110 */

 0110011110 */

 0110001110 */

 0110000110 */

 0110000110 */

 1111001111 */

 0000000000 */

 0000000000 */

 0000000000 */

 79 0x4f 'O' */

 0000000000 */

 0000110000 */

 0001011100 */

 0010001100 */

 0010000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0010000100 */

 0011000100 */

 0001101000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 80 0x50 'P' */

 0000000000 */

 1111111000 */

 0110001100 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110001100 */

 0111111000 */

 0110000000 */

 0110000000 */

 0110000000 */

 0110000000 */

 0110000000 */

 0110000000 */

 1111000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 81 0x51 'Q' */

 0000000000 */

 0000111000 */

 0001001100 */

 0010001100 */

 0010000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0011000110 */

 0011101100 */

 0001111000 */

 0000110000 */

 0001111000 */

 0010011000 */

 0000001110 */

 0000000000 */

 82 0x52 'R' */

 0000000000 */

 1111111000 */

 0110001100 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000100 */

 0111111000 */

 0111100000 */

 0110110000 */

 0110111000 */

 0110011100 */

 0110001110 */

 0110000111 */

 1111000011 */

 0000000000 */

 0000000000 */

 0000000000 */

 83 0x53 'S' */

 0000000000 */

 0001111100 */

 0011000110 */

 0110000010 */

 0110000000 */

 0110000000 */

 0011000000 */

 0001100000 */

 0000110000 */

 0000011000 */

 0000001100 */

 0000000110 */

 0100000110 */

 0110001100 */

 0011111000 */

 0000000000 */

 0000000000 */

 0000000000 */

 84 0x54 'T' */

 0000000000 */

 0111111110 */

 0100110010 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0011111100 */

 0000000000 */

 0000000000 */

 0000000000 */

 85 0x55 'U' */

 0000000000 */

 1111001111 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0111001100 */

 0011111100 */

 0001111000 */

 0000000000 */

 0000000000 */

 0000000000 */

 86 0x56 'V' */

 0000000000 */

 1110000111 */

 1100000011 */

 0110000110 */

 0110000110 */

 0110000110 */

 0011001100 */

 0011001100 */

 0011001100 */

 0001001000 */

 0001111000 */

 0001111000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 87 0x57 'W' */

 0000000000 */

 1110000111 */

 1100000011 */

 1100000011 */

 1100000011 */

 1110000011 */

 0110000110 */

 0110110110 */

 0110110110 */

 0111111110 */

 0111011100 */

 0011001100 */

 0011001100 */

 0011001100 */

 0011001100 */

 0000000000 */

 0000000000 */

 0000000000 */

 88 0x58 'X' */

 0000000000 */

 1111011110 */

 0110001100 */

 0110001100 */

 0011011000 */

 0011011000 */

 0011011000 */

 0001110000 */

 0001110000 */

 0011011000 */

 0011011000 */

 0011011000 */

 0110001100 */

 0110001100 */

 1111011110 */

 0000000000 */

 0000000000 */

 0000000000 */

 89 0x59 'Y' */

 0000000000 */

 1111001111 */

 0110000110 */

 0110000110 */

 0011001100 */

 0011001100 */

 0001111000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0001111000 */

 0000000000 */

 0000000000 */

 0000000000 */

 90 0x5a 'Z' */

 0000000000 */

 0011111110 */

 0010000110 */

 0000000110 */

 0000001100 */

 0000001100 */

 0000011000 */

 0000011000 */

 0000110000 */

 0000110000 */

 0001100000 */

 0001100000 */

 0011000000 */

 0011000010 */

 0011111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 91 0x5b '[' */

 0000000000 */

 0001111100 */

 0001111100 */

 0001100000 */

 0001100000 */

 0001100000 */

 0001100000 */

 0001100000 */

 0001100000 */

 0001100000 */

 0001100000 */

 0001100000 */

 0001100000 */

 0001100000 */

 0001111100 */

 0001111100 */

 0000000000 */

 0000000000 */

 92 0x5c '\' */

 0000000000 */

 1100000000 */

 0110000000 */

 0110000000 */

 0011000000 */

 0011000000 */

 0001100000 */

 0001100000 */

 0000110000 */

 0000110000 */

 0000011000 */

 0000011000 */

 0000001100 */

 0000001100 */

 0000000110 */

 0000000110 */

 0000000011 */

 0000000000 */

 93 0x5d ']' */

 0000000000 */

 0011111000 */

 0011111000 */

 0000011000 */

 0000011000 */

 0000011000 */

 0000011000 */

 0000011000 */

 0000011000 */

 0000011000 */

 0000011000 */

 0000011000 */

 0000011000 */

 0000011000 */

 0011111000 */

 0011111000 */

 0000000000 */

 0000000000 */

 94 0x5e '^' */

 0000000000 */

 0000110000 */

 0001111000 */

 0011001100 */

 0110000110 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 95 0x5f '_' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 1111111111 */

 1111111111 */

 0000000000 */

 96 0x60 '`' */

 0000010000 */

 0000110000 */

 0001100000 */

 0001100000 */

 0001111000 */

 0001111000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 97 0x61 'a' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0001111100 */

 0011000110 */

 0010000110 */

 0000011110 */

 0011100110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0111001110 */

 0011110111 */

 0000000000 */

 0000000000 */

 0000000000 */

 98 0x62 'b' */

 0010000000 */

 0110000000 */

 1110000000 */

 0110000000 */

 0110000000 */

 0110011000 */

 0110111100 */

 0111001110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0111000110 */

 0111101100 */

 0100111000 */

 0000000000 */

 0000000000 */

 0000000000 */

 99 0x63 'c' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0001111000 */

 0011011100 */

 0010001100 */

 0110000000 */

 0110000000 */

 0110000000 */

 0110000000 */

 0111000100 */

 0011001100 */

 0001111000 */

 0000000000 */

 0000000000 */

 0000000000 */

 100 0x64 'd' */

 0000000110 */

 0000001110 */

 0000000110 */

 0000000110 */

 0000000110 */

 0000110110 */

 0011011110 */

 0010001110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0111001110 */

 0011010110 */

 0001100111 */

 0000000000 */

 0000000000 */

 0000000000 */

 101 0x65 'e' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000110000 */

 0011001100 */

 0110000110 */

 0110000110 */

 0111111110 */

 0110000000 */

 0110000000 */

 0011000000 */

 0001100110 */

 0000111000 */

 0000000000 */

 0000000000 */

 0000000000 */

 102 0x66 'f' */

 0000011100 */

 0000100110 */

 0000100110 */

 0001100000 */

 0001100000 */

 0001100000 */

 0001100000 */

 0111111100 */

 0001100000 */

 0001100000 */

 0001100000 */

 0001100000 */

 0001100000 */

 0001100000 */

 0011110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 103 0x67 'g' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0001110010 */

 0011011110 */

 0110001100 */

 0110001100 */

 0011011000 */

 0011110000 */

 0110000000 */

 0111111100 */

 0011111110 */

 0010000110 */

 0100000010 */

 0111111100 */

 0011111000 */

 104 0x68 'h' */

 0001000000 */

 0011000000 */

 0111000000 */

 0011000000 */

 0011000000 */

 0011011100 */

 0011101110 */

 0011000110 */

 0011000110 */

 0011000110 */

 0011000110 */

 0011000110 */

 0011000110 */

 0011000110 */

 0111101111 */

 0000000000 */

 0000000000 */

 0000000000 */

 105 0x69 'i' */

 0000000000 */

 0000110000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0011110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0011111100 */

 0000000000 */

 0000000000 */

 0000000000 */

 106 0x6a 'j' */

 0000000000 */

 0000000110 */

 0000000110 */

 0000000000 */

 0000000000 */

 0000011110 */

 0000000110 */

 0000000110 */

 0000000110 */

 0000000110 */

 0000000110 */

 0000000110 */

 0000000110 */

 0100000110 */

 0110000110 */

 0111000110 */

 0011111100 */

 0001110000 */

 107 0x6b 'k' */

 0110000000 */

 1110000000 */

 0110000000 */

 0110000000 */

 0110000000 */

 0110001110 */

 0110011000 */

 0110110000 */

 0111100000 */

 0111000000 */

 0111100000 */

 0110110000 */

 0110111000 */

 0110011100 */

 1111001110 */

 0000000000 */

 0000000000 */

 0000000000 */

 108 0x6c 'l' */

 0011110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0011111100 */

 0000000000 */

 0000000000 */

 0000000000 */

 109 0x6d 'm' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 1101101110 */

 0110110110 */

 0110110110 */

 0110110110 */

 0110110110 */

 0110110110 */

 0110110110 */

 0110110110 */

 0110110110 */

 1110110111 */

 0000000000 */

 0000000000 */

 0000000000 */

 110 0x6e 'n' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0110111100 */

 0111101110 */

 0011000110 */

 0011000110 */

 0011000110 */

 0011000110 */

 0011000110 */

 0011000110 */

 0011000110 */

 0111101111 */

 0000000000 */

 0000000000 */

 0000000000 */

 111 0x6f 'o' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0011110000 */

 0110011000 */

 1100001100 */

 1100000110 */

 1100000110 */

 1100000110 */

 1100000110 */

 1110000110 */

 0111001100 */

 0011110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 112 0x70 'p' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 1101111000 */

 0111011000 */

 0110001100 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0111000110 */

 0111101100 */

 0111111000 */

 0110000000 */

 0110000000 */

 1111000000 */

 113 0x71 'q' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000111011 */

 0001101110 */

 0011001110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0111000110 */

 0011101110 */

 0001111110 */

 0000000110 */

 0000000110 */

 0000001111 */

 114 0x72 'r' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0111001100 */

 0011010110 */

 0011100110 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0111100000 */

 0000000000 */

 0000000000 */

 0000000000 */

 115 0x73 's' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0011111100 */

 0110001100 */

 0110000100 */

 0111000000 */

 0011100000 */

 0000111000 */

 0000011100 */

 0100001100 */

 0110001100 */

 0111111000 */

 0000000000 */

 0000000000 */

 0000000000 */

 116 0x74 't' */

 0000000000 */

 0000000000 */

 0000100000 */

 0000100000 */

 0001100000 */

 0111111110 */

 0001100000 */

 0001100000 */

 0001100000 */

 0001100000 */

 0001100000 */

 0001100000 */

 0001100000 */

 0001110010 */

 0000111100 */

 0000000000 */

 0000000000 */

 0000000000 */

 117 0x75 'u' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 1111011110 */

 0110001100 */

 0110001100 */

 0110001100 */

 0110001100 */

 0110001100 */

 0110001100 */

 0110001100 */

 0111011100 */

 0011110110 */

 0000000000 */

 0000000000 */

 0000000000 */

 118 0x76 'v' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 1111000111 */

 0110000011 */

 0011000110 */

 0011000110 */

 0001100110 */

 0001101100 */

 0000111100 */

 0000111100 */

 0000011000 */

 0000011000 */

 0000000000 */

 0000000000 */

 0000000000 */

 119 0x77 'w' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 1110001111 */

 1100000110 */

 1100000110 */

 1100000110 */

 1100000110 */

 0110101100 */

 0110101100 */

 0111111000 */

 0011011000 */

 0011011000 */

 0000000000 */

 0000000000 */

 0000000000 */

 120 0x78 'x' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 1111011110 */

 0110001100 */

 0011011000 */

 0011011000 */

 0001110000 */

 0001110000 */

 0011011000 */

 0110011000 */

 0110001100 */

 1111011110 */

 0000000000 */

 0000000000 */

 0000000000 */

 121 0x79 'y' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 1111001111 */

 0110000110 */

 0011001100 */

 0001101100 */

 0001111000 */

 0000111000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0001100000 */

 0111100000 */

 0111000000 */

 122 0x7a 'z' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0111111110 */

 0110000110 */

 0100001100 */

 0000011000 */

 0000110000 */

 0001100000 */

 0011000000 */

 0110000010 */

 0110000110 */

 0111111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 123 0x7b '{' */

 0000011100 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0001100000 */

 0111000000 */

 0001100000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000011100 */

 0000000000 */

 0000000000 */

 0000000000 */

 124 0x7c '|' */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000000000 */

 125 0x7d '}' */

 0011100000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000011000 */

 0000001110 */

 0000011000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0011100000 */

 0000000000 */

 0000000000 */

 0000000000 */

 126 0x7e '~' */

 0000000000 */

 0001100010 */

 0011110110 */

 0110111100 */

 0100011000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 127 0x7f '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000110000 */

 0001001000 */

 0010000100 */

 0100000010 */

 0100000010 */

 0100000010 */

 0111111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 128 0x80 '.' */

 0000000000 */

 0001111100 */

 0010000110 */

 0100000010 */

 0100000000 */

 0100000000 */

 0100000000 */

 0100000000 */

 0100000000 */

 0100000000 */

 0110000010 */

 0011000100 */

 0001111000 */

 0000100000 */

 0000010000 */

 0000001000 */

 0000001000 */

 0001110000 */

 129 0x81 '.' */

 0000000000 */

 0001101100 */

 0001101100 */

 0000000000 */

 0000000000 */

 0111101110 */

 0011000100 */

 0011000100 */

 0011000100 */

 0011000100 */

 0011000100 */

 0011000100 */

 0011000100 */

 0011101100 */

 0001110010 */

 0000000000 */

 0000000000 */

 0000000000 */

 130 0x82 '.' */

 0000000000 */

 0000000100 */

 0000001000 */

 0000010000 */

 0000000000 */

 0000110000 */

 0011001100 */

 0110000110 */

 0110000110 */

 0111111110 */

 0110000000 */

 0110000000 */

 0011000000 */

 0001100110 */

 0000111000 */

 0000000000 */

 0000000000 */

 0000000000 */

 131 0x83 '.' */

 0000010000 */

 0000111000 */

 0001101100 */

 0011000110 */

 0000000000 */

 0001111100 */

 0011000110 */

 0010000110 */

 0000011110 */

 0011100110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0111001110 */

 0011110111 */

 0000000000 */

 0000000000 */

 0000000000 */

 132 0x84 '.' */

 0000000000 */

 0001101100 */

 0001101100 */

 0000000000 */

 0000000000 */

 0001111100 */

 0011000110 */

 0010000110 */

 0000011110 */

 0011100110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0111001110 */

 0011110111 */

 0000000000 */

 0000000000 */

 0000000000 */

 133 0x85 '.' */

 0000000000 */

 0001100000 */

 0000110000 */

 0000011000 */

 0000000000 */

 0001111100 */

 0011000110 */

 0010000110 */

 0000011110 */

 0011100110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0111001110 */

 0011110111 */

 0000000000 */

 0000000000 */

 0000000000 */

 134 0x86 '.' */

 0000000000 */

 0000111000 */

 0001101100 */

 0000111000 */

 0000000000 */

 0001111100 */

 0011000110 */

 0010000110 */

 0000011110 */

 0011100110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0111001110 */

 0011110111 */

 0000000000 */

 0000000000 */

 0000000000 */

 135 0x87 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0001111100 */

 0011000110 */

 0010000010 */

 0110000000 */

 0110000000 */

 0110000000 */

 0111000010 */

 0011000010 */

 0001111100 */

 0000010000 */

 0000001000 */

 0000000100 */

 0000111000 */

 136 0x88 '.' */

 0000010000 */

 0000111000 */

 0001101100 */

 0011000110 */

 0000000000 */

 0000110000 */

 0011001100 */

 0110000110 */

 0110000110 */

 0111111110 */

 0110000000 */

 0110000000 */

 0011000000 */

 0001100110 */

 0000111000 */

 0000000000 */

 0000000000 */

 0000000000 */

 137 0x89 '.' */

 0000000000 */

 0011011000 */

 0011011000 */

 0000000000 */

 0000000000 */

 0000110000 */

 0011001100 */

 0110000110 */

 0110000110 */

 0111111110 */

 0110000000 */

 0110000000 */

 0011000000 */

 0001100110 */

 0000111000 */

 0000000000 */

 0000000000 */

 0000000000 */

 138 0x8a '.' */

 0000000000 */

 0011000000 */

 0001100000 */

 0000110000 */

 0000000000 */

 0000110000 */

 0011001100 */

 0110000110 */

 0110000110 */

 0111111110 */

 0110000000 */

 0110000000 */

 0011000000 */

 0001100110 */

 0000111000 */

 0000000000 */

 0000000000 */

 0000000000 */

 139 0x8b '.' */

 0000000000 */

 0011011000 */

 0011011000 */

 0000000000 */

 0000000000 */

 0011110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0011111100 */

 0000000000 */

 0000000000 */

 0000000000 */

 140 0x8c '.' */

 0000100000 */

 0001110000 */

 0011011000 */

 0110001100 */

 0000000000 */

 0011110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0011111100 */

 0000000000 */

 0000000000 */

 0000000000 */

 141 0x8d '.' */

 0000000000 */

 0011000000 */

 0001100000 */

 0000110000 */

 0000000000 */

 0011110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0011111100 */

 0000000000 */

 0000000000 */

 0000000000 */

 142 0x8e '.' */

 0011000110 */

 0011000110 */

 0000010000 */

 0000010000 */

 0000111000 */

 0000111000 */

 0000111000 */

 0001100100 */

 0001100100 */

 0011111100 */

 0011000100 */

 0011000100 */

 0110000010 */

 0110000010 */

 1111001111 */

 0000000000 */

 0000000000 */

 0000000000 */

 143 0x8f '.' */

 0000010000 */

 0000101000 */

 0000101000 */

 0000010000 */

 0000111000 */

 0000111000 */

 0000111000 */

 0001100100 */

 0001100100 */

 0011111100 */

 0011000100 */

 0011000100 */

 0110000010 */

 0110000010 */

 1111001111 */

 0000000000 */

 0000000000 */

 0000000000 */

 144 0x90 '.' */

 0000001100 */

 0000011000 */

 0000110000 */

 0111111110 */

 0011000010 */

 0011000010 */

 0011000000 */

 0011000100 */

 0011111100 */

 0011000100 */

 0011000000 */

 0011000000 */

 0011000010 */

 0011000010 */

 0111111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 145 0x91 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0011101110 */

 0110110011 */

 0100110011 */

 0000110011 */

 0011111111 */

 0110110000 */

 1100110000 */

 1100110000 */

 1110111011 */

 0111101110 */

 0000000000 */

 0000000000 */

 0000000000 */

 146 0x92 '.' */

 0000000000 */

 0000011111 */

 0000111001 */

 0000111001 */

 0000111000 */

 0001011000 */

 0001011010 */

 0001011110 */

 0001011010 */

 0011111000 */

 0010011000 */

 0010011000 */

 0100011001 */

 0100011001 */

 1110111111 */

 0000000000 */

 0000000000 */

 0000000000 */

 147 0x93 '.' */

 0000000000 */

 0000100000 */

 0001110000 */

 0011011000 */

 0000000000 */

 0011110000 */

 0110011000 */

 1100001100 */

 1100000110 */

 1100000110 */

 1100000110 */

 1100000110 */

 1110000110 */

 0111001100 */

 0011110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 148 0x94 '.' */

 0000000000 */

 0000000000 */

 0011001100 */

 0011001100 */

 0000000000 */

 0011110000 */

 0110011000 */

 1100001100 */

 1100000110 */

 1100000110 */

 1100000110 */

 1100000110 */

 1110000110 */

 0111001100 */

 0011110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 149 0x95 '.' */

 0000000000 */

 0001100000 */

 0000110000 */

 0000011000 */

 0000000000 */

 0011110000 */

 0110011000 */

 1100001100 */

 1100000110 */

 1100000110 */

 1100000110 */

 1100000110 */

 1110000110 */

 0111001100 */

 0011110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 150 0x96 '.' */

 0000100000 */

 0001110000 */

 0011011000 */

 0110001100 */

 0000000000 */

 1111011110 */

 0110001100 */

 0110001100 */

 0110001100 */

 0110001100 */

 0110001100 */

 0110001100 */

 0110001100 */

 0111011100 */

 0011110110 */

 0000000000 */

 0000000000 */

 0000000000 */

 151 0x97 '.' */

 0000000000 */

 0110000000 */

 0011000000 */

 0001100000 */

 0000000000 */

 1111011110 */

 0110001100 */

 0110001100 */

 0110001100 */

 0110001100 */

 0110001100 */

 0110001100 */

 0110001100 */

 0111011100 */

 0011110110 */

 0000000000 */

 0000000000 */

 0000000000 */

 152 0x98 '.' */

 0000000000 */

 0011001100 */

 0011001100 */

 0000000000 */

 0000000000 */

 1111001111 */

 0110000110 */

 0011001100 */

 0001101100 */

 0001111000 */

 0000111000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0001100000 */

 0111100000 */

 0111000000 */

 153 0x99 '.' */

 0110000110 */

 0110000110 */

 0000110000 */

 0001011100 */

 0010001100 */

 0010000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0010000100 */

 0011000100 */

 0001101000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 154 0x9a '.' */

 0011001100 */

 0011001100 */

 0000000000 */

 1111000111 */

 0110000010 */

 0110000010 */

 0110000010 */

 0110000010 */

 0110000010 */

 0110000010 */

 0110000010 */

 0110000010 */

 0111000100 */

 0011111100 */

 0001111000 */

 0000000000 */

 0000000000 */

 0000000000 */

 155 0x9b '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000011000 */

 0000011000 */

 0001111110 */

 0011011010 */

 0010011000 */

 0110011000 */

 0110011000 */

 0110011000 */

 0110011000 */

 0111011000 */

 0011011010 */

 0001111110 */

 0000011000 */

 0000011000 */

 0000000000 */

 156 0x9c '.' */

 0000000000 */

 0001111000 */

 0011101100 */

 0011001100 */

 0011000000 */

 0011000000 */

 0011000000 */

 0111111000 */

 0111111000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0111110010 */

 0111111110 */

 0100001100 */

 0000000000 */

 0000000000 */

 157 0x9d '.' */

 0000000000 */

 0100000010 */

 0100000010 */

 0010000100 */

 0011001100 */

 0011001100 */

 0001111000 */

 0000110000 */

 0011111100 */

 0000110000 */

 0011111100 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 158 0x9e '.' */

 0000000000 */

 1011111100 */

 0100000010 */

 0100000010 */

 0111111100 */

 0100000000 */

 0100100000 */

 0100100000 */

 0101111000 */

 0100100000 */

 0100100000 */

 0100100000 */

 0100100010 */

 0100011100 */

 1110000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 159 0x9f '.' */

 0000000000 */

 0000001100 */

 0000010010 */

 0000100000 */

 0000100000 */

 0000100000 */

 0000100000 */

 0000100100 */

 0011111000 */

 0100100000 */

 0000100000 */

 0000100000 */

 0000100000 */

 0000100000 */

 0000100000 */

 1001000000 */

 0110000000 */

 0000000000 */

 160 0xa0 '.' */

 0000000000 */

 0000001100 */

 0000011000 */

 0000110000 */

 0000000000 */

 0001111100 */

 0011000110 */

 0010000110 */

 0000011110 */

 0011100110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0111001110 */

 0011110111 */

 0000000000 */

 0000000000 */

 0000000000 */

 161 0xa1 '.' */

 0000000000 */

 0000001100 */

 0000011000 */

 0000110000 */

 0000000000 */

 0011110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0011111100 */

 0000000000 */

 0000000000 */

 0000000000 */

 162 0xa2 '.' */

 0000000000 */

 0000011000 */

 0000110000 */

 0001100000 */

 0000000000 */

 0011110000 */

 0110011000 */

 1100001100 */

 1100000110 */

 1100000110 */

 1100000110 */

 1100000110 */

 1110000110 */

 0111001100 */

 0011110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 163 0xa3 '.' */

 0000000000 */

 0000011000 */

 0000110000 */

 0001100000 */

 0000000000 */

 1111011110 */

 0110001100 */

 0110001100 */

 0110001100 */

 0110001100 */

 0110001100 */

 0110001100 */

 0110001100 */

 0111011100 */

 0011110110 */

 0000000000 */

 0000000000 */

 0000000000 */

 164 0xa4 '.' */

 0000000000 */

 0011100010 */

 0111111110 */

 0100011100 */

 0000000000 */

 0110111100 */

 0111101110 */

 0011000110 */

 0011000110 */

 0011000110 */

 0011000110 */

 0011000110 */

 0011000110 */

 0011000110 */

 0111101111 */

 0000000000 */

 0000000000 */

 0000000000 */

 165 0xa5 '.' */

 0000000000 */

 0011100010 */

 0111111110 */

 0100011100 */

 0000000000 */

 1110001111 */

 0111000110 */

 0111100110 */

 0111100110 */

 0110110110 */

 0110110110 */

 0110011110 */

 0110001110 */

 0110000110 */

 1111000011 */

 0000000000 */

 0000000000 */

 0000000000 */

 166 0xa6 '.' */

 0000000000 */

 0011111000 */

 0110001100 */

 0000001100 */

 0000111100 */

 0011001100 */

 0110001100 */

 0110001100 */

 0110011100 */

 0011101110 */

 0000000000 */

 0111111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 167 0xa7 '.' */

 0000000000 */

 0000111000 */

 0011001100 */

 0010000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000100 */

 0011001100 */

 0001110000 */

 0000000000 */

 0111111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 168 0xa8 '.' */

 0000000000 */

 0000011000 */

 0000011000 */

 0000000000 */

 0000011000 */

 0000011000 */

 0000110000 */

 0001100000 */

 0011000000 */

 0110000000 */

 0110000000 */

 0110000010 */

 0111001110 */

 0011111100 */

 0001111000 */

 0000000000 */

 0000000000 */

 0000000000 */

 169 0xa9 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0111111110 */

 0111111110 */

 0110000000 */

 0110000000 */

 0110000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 170 0xaa '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0111111110 */

 0111111110 */

 0000000110 */

 0000000110 */

 0000000110 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 171 0xab '.' */

 0000000000 */

 0010000000 */

 0110000000 */

 0010000000 */

 0010000010 */

 0010000100 */

 0010001000 */

 0111010000 */

 0000100000 */

 0001011100 */

 0010100010 */

 0100001100 */

 0000010000 */

 0000100000 */

 0000111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 172 0xac '.' */

 0000000000 */

 0010000000 */

 0110000000 */

 0010000000 */

 0010000010 */

 0010000100 */

 0010001000 */

 0111010000 */

 0000100100 */

 0001001100 */

 0010010100 */

 0100100100 */

 0001111110 */

 0000000100 */

 0000000100 */

 0000000000 */

 0000000000 */

 0000000000 */

 173 0xad '.' */

 0000000000 */

 0000110000 */

 0000110000 */

 0000000000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 174 0xae '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000110110 */

 0001101100 */

 0011011000 */

 0110110000 */

 1101100000 */

 0110110000 */

 0011011000 */

 0001101100 */

 0000110110 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 175 0xaf '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0110110000 */

 0011011000 */

 0001101100 */

 0000110110 */

 0000011011 */

 0000110110 */

 0001101100 */

 0011011000 */

 0110110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 176 0xb0 '.' */

 1100001100 */

 0100000100 */

 0001100001 */

 0001000001 */

 1100001100 */

 0100000100 */

 0001100001 */

 0001000001 */

 1100001100 */

 0100000100 */

 0001100001 */

 0001000001 */

 1100001100 */

 0100000100 */

 0001100001 */

 0001000001 */

 1100001100 */

 0100000100 */

 177 0xb1 '.' */

 0001000100 */

 1011101110 */

 0001000100 */

 0100010001 */

 1110111011 */

 0100010001 */

 0001000100 */

 1011101110 */

 0001000100 */

 0100010001 */

 1110111011 */

 0100010001 */

 0001000100 */

 1011101110 */

 0001000100 */

 0100010001 */

 1110111011 */

 0100010001 */

 178 0xb2 '.' */

 0011110011 */

 1011111011 */

 1110011110 */

 1110111110 */

 0011110011 */

 1011111011 */

 1110011110 */

 1110111110 */

 0011110011 */

 1011111011 */

 1110011110 */

 1110111110 */

 0011110011 */

 1011111011 */

 1110011110 */

 1110111110 */

 0011110011 */

 1011111011 */

 179 0xb3 '.' */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 180 0xb4 '.' */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 1111110000 */

 1111110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 181 0xb5 '.' */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 1111110000 */

 1111110000 */

 0000110000 */

 1111110000 */

 1111110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 182 0xb6 '.' */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 1111101100 */

 1111101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 183 0xb7 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 1111111100 */

 1111111100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 184 0xb8 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 1111110000 */

 1111110000 */

 0000110000 */

 1111110000 */

 1111110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 185 0xb9 '.' */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 1111101100 */

 1111101100 */

 0000001100 */

 1111101100 */

 1111101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 186 0xba '.' */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 187 0xbb '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 1111111100 */

 1111111100 */

 0000001100 */

 1111101100 */

 1111101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 188 0xbc '.' */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 1111101100 */

 1111101100 */

 0000001100 */

 1111111100 */

 1111111100 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 189 0xbd '.' */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 1111111100 */

 1111111100 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 190 0xbe '.' */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 1111110000 */

 1111110000 */

 0000110000 */

 1111110000 */

 1111110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 191 0xbf '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 1111110000 */

 1111110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 192 0xc0 '.' */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000111111 */

 0000111111 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 193 0xc1 '.' */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 1111111111 */

 1111111111 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 194 0xc2 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 1111111111 */

 1111111111 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 195 0xc3 '.' */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000111111 */

 0000111111 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 196 0xc4 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 1111111111 */

 1111111111 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 197 0xc5 '.' */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 1111111111 */

 1111111111 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 198 0xc6 '.' */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000111111 */

 0000111111 */

 0000110000 */

 0000111111 */

 0000111111 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 199 0xc7 '.' */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101111 */

 0001101111 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 200 0xc8 '.' */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101111 */

 0001101111 */

 0001100000 */

 0001111111 */

 0001111111 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 201 0xc9 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0001111111 */

 0001111111 */

 0001100000 */

 0001101111 */

 0001101111 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 202 0xca '.' */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 1111101111 */

 1111101111 */

 0000000000 */

 1111111111 */

 1111111111 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 203 0xcb '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 1111111111 */

 1111111111 */

 0000000000 */

 1111101111 */

 1111101111 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 204 0xcc '.' */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101111 */

 0001101111 */

 0001100000 */

 0001101111 */

 0001101111 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 205 0xcd '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 1111111111 */

 1111111111 */

 0000000000 */

 1111111111 */

 1111111111 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 206 0xce '.' */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 1111101111 */

 1111101111 */

 0000000000 */

 1111101111 */

 1111101111 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 207 0xcf '.' */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 1111111111 */

 1111111111 */

 0000000000 */

 1111111111 */

 1111111111 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 208 0xd0 '.' */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 1111111111 */

 1111111111 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 209 0xd1 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 1111111111 */

 1111111111 */

 0000000000 */

 1111111111 */

 1111111111 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 210 0xd2 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 1111111111 */

 1111111111 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 211 0xd3 '.' */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001111111 */

 0001111111 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 212 0xd4 '.' */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000111111 */

 0000111111 */

 0000110000 */

 0000111111 */

 0000111111 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 213 0xd5 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000111111 */

 0000111111 */

 0000110000 */

 0000111111 */

 0000111111 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 214 0xd6 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0001111111 */

 0001111111 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 215 0xd7 '.' */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 1111111111 */

 1111111111 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 0001101100 */

 216 0xd8 '.' */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 1111111111 */

 1111111111 */

 0000110000 */

 1111111111 */

 1111111111 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 217 0xd9 '.' */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 1111110000 */

 1111110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 218 0xda '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000111111 */

 0000111111 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 219 0xdb '.' */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 220 0xdc '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 221 0xdd '.' */

 1111100000 */

 1111100000 */

 1111100000 */

 1111100000 */

 1111100000 */

 1111100000 */

 1111100000 */

 1111100000 */

 1111100000 */

 1111100000 */

 1111100000 */

 1111100000 */

 1111100000 */

 1111100000 */

 1111100000 */

 1111100000 */

 1111100000 */

 1111100000 */

 222 0xde '.' */

 0000011111 */

 0000011111 */

 0000011111 */

 0000011111 */

 0000011111 */

 0000011111 */

 0000011111 */

 0000011111 */

 0000011111 */

 0000011111 */

 0000011111 */

 0000011111 */

 0000011111 */

 0000011111 */

 0000011111 */

 0000011111 */

 0000011111 */

 0000011111 */

 223 0xdf '.' */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 1111111111 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 224 0xe0 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0001110010 */

 0011010110 */

 0110001100 */

 0110001100 */

 0110001100 */

 0110001100 */

 0110001100 */

 0110001100 */

 0011011110 */

 0001110010 */

 0000000000 */

 0000000000 */

 0000000000 */

 225 0xe1 '.' */

 0000000000 */

 0001111000 */

 0011001100 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110001100 */

 0110111100 */

 0110001100 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110001100 */

 0110111000 */

 0000000000 */

 0000000000 */

 0000000000 */

 226 0xe2 '.' */

 0000000000 */

 0111111110 */

 0110000110 */

 0110000110 */

 0110000000 */

 0110000000 */

 0110000000 */

 0110000000 */

 0110000000 */

 0110000000 */

 0110000000 */

 0110000000 */

 0110000000 */

 0110000000 */

 0110000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 227 0xe3 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0111111110 */

 0011001100 */

 0011001100 */

 0011001100 */

 0011001100 */

 0011001100 */

 0011001100 */

 0011001100 */

 0011001100 */

 0000000000 */

 0000000000 */

 0000000000 */

 228 0xe4 '.' */

 0000000000 */

 0000000000 */

 1111111110 */

 0110000000 */

 0011000000 */

 0011000000 */

 0001100000 */

 0001100000 */

 0000110000 */

 0000110000 */

 0001100000 */

 0011000000 */

 0011000010 */

 0110000110 */

 1111111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 229 0xe5 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0001111111 */

 0011011000 */

 0110001100 */

 0110000110 */

 0110000110 */

 0110000110 */

 0011001100 */

 0011111000 */

 0000000000 */

 0000000000 */

 0000000000 */

 230 0xe6 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0111001110 */

 0110110110 */

 0110000000 */

 0110000000 */

 0110000000 */

 0110000000 */

 1100000000 */

 231 0xe7 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000110 */

 0011011001 */

 0101111000 */

 1000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 232 0xe8 '.' */

 0000000000 */

 0000000000 */

 0111111110 */

 0000110000 */

 0000110000 */

 0001111000 */

 0011001100 */

 0110000110 */

 0110000110 */

 0110000110 */

 0011001100 */

 0001111000 */

 0000110000 */

 0000110000 */

 0111111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 233 0xe9 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000111000 */

 0001111100 */

 0011000110 */

 0011000110 */

 0110000011 */

 0111111111 */

 0111111111 */

 0110000011 */

 0011000110 */

 0011000110 */

 0001111100 */

 0000111000 */

 0000000000 */

 0000000000 */

 0000000000 */

 234 0xea '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0001111000 */

 0011001100 */

 0110000110 */

 1100000011 */

 1100000011 */

 1100000011 */

 0110000110 */

 0011001100 */

 0011001100 */

 0011001100 */

 0011001100 */

 1111001111 */

 0000000000 */

 0000000000 */

 235 0xeb '.' */

 0000000000 */

 0000011100 */

 0001111110 */

 0011000011 */

 0011000000 */

 0001100000 */

 0000110000 */

 0000110000 */

 0011111000 */

 0110011000 */

 1100001100 */

 1100001100 */

 1100001100 */

 0110011000 */

 0011110000 */

 0001100000 */

 0000000000 */

 0000000000 */

 236 0xec '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0011001100 */

 0110110110 */

 1100110011 */

 1100110011 */

 1100110011 */

 1100110011 */

 0110110110 */

 0011001100 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 237 0xed '.' */

 0000000000 */

 0000000110 */

 0000000110 */

 0000001100 */

 0000001100 */

 0011011100 */

 0110110110 */

 1100110011 */

 1100110011 */

 1100110011 */

 1100110011 */

 0110110110 */

 0011101100 */

 0011000000 */

 0011000000 */

 0110000000 */

 0110000000 */

 0000000000 */

 238 0xee '.' */

 0000000000 */

 0000001110 */

 0000111000 */

 0001100000 */

 0001100000 */

 0011000000 */

 0011000000 */

 0011111110 */

 0011111110 */

 0011000000 */

 0011000000 */

 0001100000 */

 0001100000 */

 0000111000 */

 0000001110 */

 0000000000 */

 0000000000 */

 0000000000 */

 239 0xef '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0001111000 */

 0011001100 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0110000110 */

 0000000000 */

 0000000000 */

 0000000000 */

 240 0xf0 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0111111110 */

 0111111110 */

 0000000000 */

 0000000000 */

 0111111110 */

 0111111110 */

 0000000000 */

 0000000000 */

 0111111110 */

 0111111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 241 0xf1 '.' */

 0000000000 */

 0000000000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0111111110 */

 0111111110 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000000000 */

 0111111110 */

 0111111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 242 0xf2 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 1110000000 */

 0011100000 */

 0000111000 */

 0000001110 */

 0000111000 */

 0011100000 */

 1110000000 */

 0000000000 */

 1111111100 */

 1111111100 */

 0000000000 */

 0000000000 */

 0000000000 */

 243 0xf3 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000001110 */

 0000111000 */

 0011100000 */

 1110000000 */

 0011100000 */

 0000111000 */

 0000001110 */

 0000000000 */

 1111111110 */

 1111111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 244 0xf4 '.' */

 0000000000 */

 0000000000 */

 0001111000 */

 0011001100 */

 0011001100 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0011000000 */

 0000000000 */

 245 0xf5 '.' */

 0000000000 */

 0000000000 */

 0001111000 */

 0011001100 */

 0011001100 */

 0000001100 */

 0000001100 */

 0000001100 */

 0000001100 */

 0000001100 */

 0000001100 */

 0000001100 */

 0000001100 */

 0000001100 */

 0000001100 */

 0000001100 */

 0000001100 */

 0000000000 */

 246 0xf6 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000110000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0111111110 */

 0111111110 */

 0000000000 */

 0000000000 */

 0000110000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 247 0xf7 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0011100000 */

 0110110000 */

 0000011011 */

 0000001110 */

 0011100000 */

 0110110000 */

 0000011011 */

 0000001110 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 248 0xf8 '.' */

 0000000000 */

 0001111000 */

 0011001100 */

 0011001100 */

 0001111000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 249 0xf9 '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000110000 */

 0001111000 */

 0001111000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 250 0xfa '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000110000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 251 0xfb '.' */

 0000000000 */

 0000000000 */

 0000111111 */

 0000111111 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 0000110000 */

 1100110000 */

 0110110000 */

 0011110000 */

 0001110000 */

 0000110000 */

 0000000000 */

 0000000000 */

 0000000000 */

 252 0xfc '.' */

 0000000000 */

 0010011100 */

 0111101100 */

 0011000100 */

 0011000100 */

 0011000100 */

 0111101110 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 253 0xfd '.' */

 0000000000 */

 0001111000 */

 0011111100 */

 0110001100 */

 0100001100 */

 0000011000 */

 0000110000 */

 0001100000 */

 0011000010 */

 0111111110 */

 0111111110 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 254 0xfe '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0011111100 */

 0011111100 */

 0011111100 */

 0011111100 */

 0011111100 */

 0011111100 */

 0011111100 */

 0011111100 */

 0011111100 */

 0011111100 */

 0011111100 */

 0011111100 */

 0000000000 */

 0000000000 */

 0000000000 */

 255 0xff '.' */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 0000000000 */

 SPDX-License-Identifier: GPL-2.0

*********************************************/

                                            */

       Font file generated by cpi2fnt       */

                                            */

*********************************************/

 0 0x00 '^@' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 1 0x01 '^A' */

 01111110 */

 10000001 */

 10100101 */

 10000001 */

 10111101 */

 10011001 */

 10000001 */

 01111110 */

 2 0x02 '^B' */

 01111110 */

 11111111 */

 11011011 */

 11111111 */

 11000011 */

 11100111 */

 11111111 */

 01111110 */

 3 0x03 '^C' */

 01101100 */

 11111110 */

 11111110 */

 11111110 */

 01111100 */

 00111000 */

 00010000 */

 00000000 */

 4 0x04 '^D' */

 00010000 */

 00111000 */

 01111100 */

 11111110 */

 01111100 */

 00111000 */

 00010000 */

 00000000 */

 5 0x05 '^E' */

 00111000 */

 01111100 */

 00111000 */

 11111110 */

 11111110 */

 11010110 */

 00010000 */

 00111000 */

 6 0x06 '^F' */

 00010000 */

 00111000 */

 01111100 */

 11111110 */

 11111110 */

 01111100 */

 00010000 */

 00111000 */

 7 0x07 '^G' */

 00000000 */

 00000000 */

 00011000 */

 00111100 */

 00111100 */

 00011000 */

 00000000 */

 00000000 */

 8 0x08 '^H' */

 11111111 */

 11111111 */

 11100111 */

 11000011 */

 11000011 */

 11100111 */

 11111111 */

 11111111 */

 9 0x09 '^I' */

 00000000 */

 00111100 */

 01100110 */

 01000010 */

 01000010 */

 01100110 */

 00111100 */

 00000000 */

 10 0x0a '^J' */

 11111111 */

 11000011 */

 10011001 */

 10111101 */

 10111101 */

 10011001 */

 11000011 */

 11111111 */

 11 0x0b '^K' */

 00001111 */

 00000111 */

 00001111 */

 01111101 */

 11001100 */

 11001100 */

 11001100 */

 01111000 */

 12 0x0c '^L' */

 00111100 */

 01100110 */

 01100110 */

 01100110 */

 00111100 */

 00011000 */

 01111110 */

 00011000 */

 13 0x0d '^M' */

 00111111 */

 00110011 */

 00111111 */

 00110000 */

 00110000 */

 01110000 */

 11110000 */

 11100000 */

 14 0x0e '^N' */

 01111111 */

 01100011 */

 01111111 */

 01100011 */

 01100011 */

 01100111 */

 11100110 */

 11000000 */

 15 0x0f '^O' */

 00011000 */

 11011011 */

 00111100 */

 11100111 */

 11100111 */

 00111100 */

 11011011 */

 00011000 */

 16 0x10 '^P' */

 10000000 */

 11100000 */

 11111000 */

 11111110 */

 11111000 */

 11100000 */

 10000000 */

 00000000 */

 17 0x11 '^Q' */

 00000010 */

 00001110 */

 00111110 */

 11111110 */

 00111110 */

 00001110 */

 00000010 */

 00000000 */

 18 0x12 '^R' */

 00011000 */

 00111100 */

 01111110 */

 00011000 */

 00011000 */

 01111110 */

 00111100 */

 00011000 */

 19 0x13 '^S' */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 00000000 */

 01100110 */

 00000000 */

 20 0x14 '^T' */

 01111111 */

 11011011 */

 11011011 */

 01111011 */

 00011011 */

 00011011 */

 00011011 */

 00000000 */

 21 0x15 '^U' */

 00111110 */

 01100001 */

 00111100 */

 01100110 */

 01100110 */

 00111100 */

 10000110 */

 01111100 */

 22 0x16 '^V' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01111110 */

 01111110 */

 01111110 */

 00000000 */

 23 0x17 '^W' */

 00011000 */

 00111100 */

 01111110 */

 00011000 */

 01111110 */

 00111100 */

 00011000 */

 11111111 */

 24 0x18 '^X' */

 00011000 */

 00111100 */

 01111110 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00000000 */

 25 0x19 '^Y' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 01111110 */

 00111100 */

 00011000 */

 00000000 */

 26 0x1a '^Z' */

 00000000 */

 00011000 */

 00001100 */

 11111110 */

 00001100 */

 00011000 */

 00000000 */

 00000000 */

 27 0x1b '^[' */

 00000000 */

 00110000 */

 01100000 */

 11111110 */

 01100000 */

 00110000 */

 00000000 */

 00000000 */

 28 0x1c '^\' */

 00000000 */

 00000000 */

 11000000 */

 11000000 */

 11000000 */

 11111110 */

 00000000 */

 00000000 */

 29 0x1d '^]' */

 00000000 */

 00100100 */

 01100110 */

 11111111 */

 01100110 */

 00100100 */

 00000000 */

 00000000 */

 30 0x1e '^^' */

 00000000 */

 00011000 */

 00111100 */

 01111110 */

 11111111 */

 11111111 */

 00000000 */

 00000000 */

 31 0x1f '^_' */

 00000000 */

 11111111 */

 11111111 */

 01111110 */

 00111100 */

 00011000 */

 00000000 */

 00000000 */

 32 0x20 ' ' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 33 0x21 '!' */

 00011000 */

 00111100 */

 00111100 */

 00011000 */

 00011000 */

 00000000 */

 00011000 */

 00000000 */

 34 0x22 '"' */

 01100110 */

 01100110 */

 00100100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 35 0x23 '#' */

 01101100 */

 01101100 */

 11111110 */

 01101100 */

 11111110 */

 01101100 */

 01101100 */

 00000000 */

 36 0x24 '$' */

 00011000 */

 00111110 */

 01100000 */

 00111100 */

 00000110 */

 01111100 */

 00011000 */

 00000000 */

 37 0x25 '%' */

 00000000 */

 11000110 */

 11001100 */

 00011000 */

 00110000 */

 01100110 */

 11000110 */

 00000000 */

 38 0x26 '&' */

 00111000 */

 01101100 */

 00111000 */

 01110110 */

 11011100 */

 11001100 */

 01110110 */

 00000000 */

 39 0x27 ''' */

 00011000 */

 00011000 */

 00110000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 40 0x28 '(' */

 00001100 */

 00011000 */

 00110000 */

 00110000 */

 00110000 */

 00011000 */

 00001100 */

 00000000 */

 41 0x29 ')' */

 00110000 */

 00011000 */

 00001100 */

 00001100 */

 00001100 */

 00011000 */

 00110000 */

 00000000 */

 42 0x2a '*' */

 00000000 */

 01100110 */

 00111100 */

 11111111 */

 00111100 */

 01100110 */

 00000000 */

 00000000 */

 43 0x2b '+' */

 00000000 */

 00011000 */

 00011000 */

 01111110 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 44 0x2c ',' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 00110000 */

 45 0x2d '-' */

 00000000 */

 00000000 */

 00000000 */

 01111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 46 0x2e '.' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 00000000 */

 47 0x2f '/' */

 00000110 */

 00001100 */

 00011000 */

 00110000 */

 01100000 */

 11000000 */

 10000000 */

 00000000 */

 48 0x30 '0' */

 00111000 */

 01101100 */

 11000110 */

 11010110 */

 11000110 */

 01101100 */

 00111000 */

 00000000 */

 49 0x31 '1' */

 00011000 */

 00111000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 01111110 */

 00000000 */

 50 0x32 '2' */

 01111100 */

 11000110 */

 00000110 */

 00011100 */

 00110000 */

 01100110 */

 11111110 */

 00000000 */

 51 0x33 '3' */

 01111100 */

 11000110 */

 00000110 */

 00111100 */

 00000110 */

 11000110 */

 01111100 */

 00000000 */

 52 0x34 '4' */

 00011100 */

 00111100 */

 01101100 */

 11001100 */

 11111110 */

 00001100 */

 00011110 */

 00000000 */

 53 0x35 '5' */

 11111110 */

 11000000 */

 11000000 */

 11111100 */

 00000110 */

 11000110 */

 01111100 */

 00000000 */

 54 0x36 '6' */

 00111000 */

 01100000 */

 11000000 */

 11111100 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 55 0x37 '7' */

 11111110 */

 11000110 */

 00001100 */

 00011000 */

 00110000 */

 00110000 */

 00110000 */

 00000000 */

 56 0x38 '8' */

 01111100 */

 11000110 */

 11000110 */

 01111100 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 57 0x39 '9' */

 01111100 */

 11000110 */

 11000110 */

 01111110 */

 00000110 */

 00001100 */

 01111000 */

 00000000 */

 58 0x3a ':' */

 00000000 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 00000000 */

 59 0x3b ';' */

 00000000 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 00110000 */

 60 0x3c '<' */

 00000110 */

 00001100 */

 00011000 */

 00110000 */

 00011000 */

 00001100 */

 00000110 */

 00000000 */

 61 0x3d '=' */

 00000000 */

 00000000 */

 01111110 */

 00000000 */

 00000000 */

 01111110 */

 00000000 */

 00000000 */

 62 0x3e '>' */

 01100000 */

 00110000 */

 00011000 */

 00001100 */

 00011000 */

 00110000 */

 01100000 */

 00000000 */

 63 0x3f '?' */

 01111100 */

 11000110 */

 00001100 */

 00011000 */

 00011000 */

 00000000 */

 00011000 */

 00000000 */

 64 0x40 '@' */

 01111100 */

 11000110 */

 11011110 */

 11011110 */

 11011110 */

 11000000 */

 01111000 */

 00000000 */

 65 0x41 'A' */

 00111000 */

 01101100 */

 11000110 */

 11111110 */

 11000110 */

 11000110 */

 11000110 */

 00000000 */

 66 0x42 'B' */

 11111100 */

 01100110 */

 01100110 */

 01111100 */

 01100110 */

 01100110 */

 11111100 */

 00000000 */

 67 0x43 'C' */

 00111100 */

 01100110 */

 11000000 */

 11000000 */

 11000000 */

 01100110 */

 00111100 */

 00000000 */

 68 0x44 'D' */

 11111000 */

 01101100 */

 01100110 */

 01100110 */

 01100110 */

 01101100 */

 11111000 */

 00000000 */

 69 0x45 'E' */

 11111110 */

 01100010 */

 01101000 */

 01111000 */

 01101000 */

 01100010 */

 11111110 */

 00000000 */

 70 0x46 'F' */

 11111110 */

 01100010 */

 01101000 */

 01111000 */

 01101000 */

 01100000 */

 11110000 */

 00000000 */

 71 0x47 'G' */

 00111100 */

 01100110 */

 11000000 */

 11000000 */

 11001110 */

 01100110 */

 00111010 */

 00000000 */

 72 0x48 'H' */

 11000110 */

 11000110 */

 11000110 */

 11111110 */

 11000110 */

 11000110 */

 11000110 */

 00000000 */

 73 0x49 'I' */

 00111100 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 74 0x4a 'J' */

 00011110 */

 00001100 */

 00001100 */

 00001100 */

 11001100 */

 11001100 */

 01111000 */

 00000000 */

 75 0x4b 'K' */

 11100110 */

 01100110 */

 01101100 */

 01111000 */

 01101100 */

 01100110 */

 11100110 */

 00000000 */

 76 0x4c 'L' */

 11110000 */

 01100000 */

 01100000 */

 01100000 */

 01100010 */

 01100110 */

 11111110 */

 00000000 */

 77 0x4d 'M' */

 11000110 */

 11101110 */

 11111110 */

 11111110 */

 11010110 */

 11000110 */

 11000110 */

 00000000 */

 78 0x4e 'N' */

 11000110 */

 11100110 */

 11110110 */

 11011110 */

 11001110 */

 11000110 */

 11000110 */

 00000000 */

 79 0x4f 'O' */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 80 0x50 'P' */

 11111100 */

 01100110 */

 01100110 */

 01111100 */

 01100000 */

 01100000 */

 11110000 */

 00000000 */

 81 0x51 'Q' */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11001110 */

 01111100 */

 00001110 */

 82 0x52 'R' */

 11111100 */

 01100110 */

 01100110 */

 01111100 */

 01101100 */

 01100110 */

 11100110 */

 00000000 */

 83 0x53 'S' */

 00111100 */

 01100110 */

 00110000 */

 00011000 */

 00001100 */

 01100110 */

 00111100 */

 00000000 */

 84 0x54 'T' */

 01111110 */

 01111110 */

 01011010 */

 00011000 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 85 0x55 'U' */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 86 0x56 'V' */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 01101100 */

 00111000 */

 00000000 */

 87 0x57 'W' */

 11000110 */

 11000110 */

 11000110 */

 11010110 */

 11010110 */

 11111110 */

 01101100 */

 00000000 */

 88 0x58 'X' */

 11000110 */

 11000110 */

 01101100 */

 00111000 */

 01101100 */

 11000110 */

 11000110 */

 00000000 */

 89 0x59 'Y' */

 01100110 */

 01100110 */

 01100110 */

 00111100 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 90 0x5a 'Z' */

 11111110 */

 11000110 */

 10001100 */

 00011000 */

 00110010 */

 01100110 */

 11111110 */

 00000000 */

 91 0x5b '[' */

 00111100 */

 00110000 */

 00110000 */

 00110000 */

 00110000 */

 00110000 */

 00111100 */

 00000000 */

 92 0x5c '\' */

 11000000 */

 01100000 */

 00110000 */

 00011000 */

 00001100 */

 00000110 */

 00000010 */

 00000000 */

 93 0x5d ']' */

 00111100 */

 00001100 */

 00001100 */

 00001100 */

 00001100 */

 00001100 */

 00111100 */

 00000000 */

 94 0x5e '^' */

 00010000 */

 00111000 */

 01101100 */

 11000110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 95 0x5f '_' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111111 */

 96 0x60 '`' */

 00110000 */

 00011000 */

 00001100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 97 0x61 'a' */

 00000000 */

 00000000 */

 01111000 */

 00001100 */

 01111100 */

 11001100 */

 01110110 */

 00000000 */

 98 0x62 'b' */

 11100000 */

 01100000 */

 01111100 */

 01100110 */

 01100110 */

 01100110 */

 11011100 */

 00000000 */

 99 0x63 'c' */

 00000000 */

 00000000 */

 01111100 */

 11000110 */

 11000000 */

 11000110 */

 01111100 */

 00000000 */

 100 0x64 'd' */

 00011100 */

 00001100 */

 01111100 */

 11001100 */

 11001100 */

 11001100 */

 01110110 */

 00000000 */

 101 0x65 'e' */

 00000000 */

 00000000 */

 01111100 */

 11000110 */

 11111110 */

 11000000 */

 01111100 */

 00000000 */

 102 0x66 'f' */

 00111100 */

 01100110 */

 01100000 */

 11111000 */

 01100000 */

 01100000 */

 11110000 */

 00000000 */

 103 0x67 'g' */

 00000000 */

 00000000 */

 01110110 */

 11001100 */

 11001100 */

 01111100 */

 00001100 */

 11111000 */

 104 0x68 'h' */

 11100000 */

 01100000 */

 01101100 */

 01110110 */

 01100110 */

 01100110 */

 11100110 */

 00000000 */

 105 0x69 'i' */

 00011000 */

 00000000 */

 00111000 */

 00011000 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 106 0x6a 'j' */

 00000110 */

 00000000 */

 00000110 */

 00000110 */

 00000110 */

 01100110 */

 01100110 */

 00111100 */

 107 0x6b 'k' */

 11100000 */

 01100000 */

 01100110 */

 01101100 */

 01111000 */

 01101100 */

 11100110 */

 00000000 */

 108 0x6c 'l' */

 00111000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 109 0x6d 'm' */

 00000000 */

 00000000 */

 11101100 */

 11111110 */

 11010110 */

 11010110 */

 11010110 */

 00000000 */

 110 0x6e 'n' */

 00000000 */

 00000000 */

 11011100 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 00000000 */

 111 0x6f 'o' */

 00000000 */

 00000000 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 112 0x70 'p' */

 00000000 */

 00000000 */

 11011100 */

 01100110 */

 01100110 */

 01111100 */

 01100000 */

 11110000 */

 113 0x71 'q' */

 00000000 */

 00000000 */

 01110110 */

 11001100 */

 11001100 */

 01111100 */

 00001100 */

 00011110 */

 114 0x72 'r' */

 00000000 */

 00000000 */

 11011100 */

 01110110 */

 01100000 */

 01100000 */

 11110000 */

 00000000 */

 115 0x73 's' */

 00000000 */

 00000000 */

 01111110 */

 11000000 */

 01111100 */

 00000110 */

 11111100 */

 00000000 */

 116 0x74 't' */

 00110000 */

 00110000 */

 11111100 */

 00110000 */

 00110000 */

 00110110 */

 00011100 */

 00000000 */

 117 0x75 'u' */

 00000000 */

 00000000 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 01110110 */

 00000000 */

 118 0x76 'v' */

 00000000 */

 00000000 */

 11000110 */

 11000110 */

 11000110 */

 01101100 */

 00111000 */

 00000000 */

 119 0x77 'w' */

 00000000 */

 00000000 */

 11000110 */

 11010110 */

 11010110 */

 11111110 */

 01101100 */

 00000000 */

 120 0x78 'x' */

 00000000 */

 00000000 */

 11000110 */

 01101100 */

 00111000 */

 01101100 */

 11000110 */

 00000000 */

 121 0x79 'y' */

 00000000 */

 00000000 */

 11000110 */

 11000110 */

 11000110 */

 01111110 */

 00000110 */

 11111100 */

 122 0x7a 'z' */

 00000000 */

 00000000 */

 01111110 */

 01001100 */

 00011000 */

 00110010 */

 01111110 */

 00000000 */

 123 0x7b '{' */

 00001110 */

 00011000 */

 00011000 */

 01110000 */

 00011000 */

 00011000 */

 00001110 */

 00000000 */

 124 0x7c '|' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00000000 */

 125 0x7d '}' */

 01110000 */

 00011000 */

 00011000 */

 00001110 */

 00011000 */

 00011000 */

 01110000 */

 00000000 */

 126 0x7e '~' */

 01110110 */

 11011100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 127 0x7f '' */

 00000000 */

 00010000 */

 00111000 */

 01101100 */

 11000110 */

 11000110 */

 11111110 */

 00000000 */

 128 0x80 'Ç' */

 01111100 */

 11000110 */

 11000000 */

 11000000 */

 11000110 */

 01111100 */

 00001100 */

 01111000 */

 129 0x81 'ü' */

 11001100 */

 00000000 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 01110110 */

 00000000 */

 130 0x82 'é' */

 00001100 */

 00011000 */

 01111100 */

 11000110 */

 11111110 */

 11000000 */

 01111100 */

 00000000 */

 131 0x83 'â' */

 01111100 */

 10000010 */

 01111000 */

 00001100 */

 01111100 */

 11001100 */

 01110110 */

 00000000 */

 132 0x84 'ä' */

 11000110 */

 00000000 */

 01111000 */

 00001100 */

 01111100 */

 11001100 */

 01110110 */

 00000000 */

 133 0x85 'à' */

 00110000 */

 00011000 */

 01111000 */

 00001100 */

 01111100 */

 11001100 */

 01110110 */

 00000000 */

 134 0x86 'å' */

 00110000 */

 00110000 */

 01111000 */

 00001100 */

 01111100 */

 11001100 */

 01110110 */

 00000000 */

 135 0x87 'ç' */

 00000000 */

 00000000 */

 01111110 */

 11000000 */

 11000000 */

 01111110 */

 00001100 */

 00111000 */

 136 0x88 'ê' */

 01111100 */

 10000010 */

 01111100 */

 11000110 */

 11111110 */

 11000000 */

 01111100 */

 00000000 */

 137 0x89 'ë' */

 11000110 */

 00000000 */

 01111100 */

 11000110 */

 11111110 */

 11000000 */

 01111100 */

 00000000 */

 138 0x8a 'è' */

 00110000 */

 00011000 */

 01111100 */

 11000110 */

 11111110 */

 11000000 */

 01111100 */

 00000000 */

 139 0x8b 'ï' */

 01100110 */

 00000000 */

 00111000 */

 00011000 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 140 0x8c 'î' */

 01111100 */

 10000010 */

 00111000 */

 00011000 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 141 0x8d 'ì' */

 00110000 */

 00011000 */

 00000000 */

 00111000 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 142 0x8e 'Ä' */

 11000110 */

 00111000 */

 01101100 */

 11000110 */

 11111110 */

 11000110 */

 11000110 */

 00000000 */

 143 0x8f 'Å' */

 00111000 */

 01101100 */

 01111100 */

 11000110 */

 11111110 */

 11000110 */

 11000110 */

 00000000 */

 144 0x90 'É' */

 00011000 */

 00110000 */

 11111110 */

 11000000 */

 11111000 */

 11000000 */

 11111110 */

 00000000 */

 145 0x91 'æ' */

 00000000 */

 00000000 */

 01111110 */

 00011000 */

 01111110 */

 11011000 */

 01111110 */

 00000000 */

 146 0x92 'Æ' */

 00111110 */

 01101100 */

 11001100 */

 11111110 */

 11001100 */

 11001100 */

 11001110 */

 00000000 */

 147 0x93 'ô' */

 01111100 */

 10000010 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 148 0x94 'ö' */

 11000110 */

 00000000 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 149 0x95 'ò' */

 00110000 */

 00011000 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 150 0x96 'û' */

 01111000 */

 10000100 */

 00000000 */

 11001100 */

 11001100 */

 11001100 */

 01110110 */

 00000000 */

 151 0x97 'ù' */

 01100000 */

 00110000 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 01110110 */

 00000000 */

 152 0x98 'ÿ' */

 11000110 */

 00000000 */

 11000110 */

 11000110 */

 11000110 */

 01111110 */

 00000110 */

 11111100 */

 153 0x99 'Ö' */

 11000110 */

 00111000 */

 01101100 */

 11000110 */

 11000110 */

 01101100 */

 00111000 */

 00000000 */

 154 0x9a 'Ü' */

 11000110 */

 00000000 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 155 0x9b '¢' */

 00011000 */

 00011000 */

 01111110 */

 11000000 */

 11000000 */

 01111110 */

 00011000 */

 00011000 */

 156 0x9c '£' */

 00111000 */

 01101100 */

 01100100 */

 11110000 */

 01100000 */

 01100110 */

 11111100 */

 00000000 */

 157 0x9d '¥' */

 01100110 */

 01100110 */

 00111100 */

 01111110 */

 00011000 */

 01111110 */

 00011000 */

 00011000 */

 158 0x9e '₧' */

 11111000 */

 11001100 */

 11001100 */

 11111010 */

 11000110 */

 11001111 */

 11000110 */

 11000111 */

 159 0x9f 'ƒ' */

 00001110 */

 00011011 */

 00011000 */

 00111100 */

 00011000 */

 11011000 */

 01110000 */

 00000000 */

 160 0xa0 'á' */

 00011000 */

 00110000 */

 01111000 */

 00001100 */

 01111100 */

 11001100 */

 01110110 */

 00000000 */

 161 0xa1 'í' */

 00001100 */

 00011000 */

 00000000 */

 00111000 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 162 0xa2 'ó' */

 00001100 */

 00011000 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 163 0xa3 'ú' */

 00011000 */

 00110000 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 01110110 */

 00000000 */

 164 0xa4 'ñ' */

 01110110 */

 11011100 */

 00000000 */

 11011100 */

 01100110 */

 01100110 */

 01100110 */

 00000000 */

 165 0xa5 'Ñ' */

 01110110 */

 11011100 */

 00000000 */

 11100110 */

 11110110 */

 11011110 */

 11001110 */

 00000000 */

 166 0xa6 'ª' */

 00111100 */

 01101100 */

 01101100 */

 00111110 */

 00000000 */

 01111110 */

 00000000 */

 00000000 */

 167 0xa7 'º' */

 00111000 */

 01101100 */

 01101100 */

 00111000 */

 00000000 */

 01111100 */

 00000000 */

 00000000 */

 168 0xa8 '¿' */

 00011000 */

 00000000 */

 00011000 */

 00011000 */

 00110000 */

 01100011 */

 00111110 */

 00000000 */

 169 0xa9 '⌐' */

 00000000 */

 00000000 */

 00000000 */

 11111110 */

 11000000 */

 11000000 */

 00000000 */

 00000000 */

 170 0xaa '¬' */

 00000000 */

 00000000 */

 00000000 */

 11111110 */

 00000110 */

 00000110 */

 00000000 */

 00000000 */

 171 0xab '½' */

 01100011 */

 11100110 */

 01101100 */

 01111110 */

 00110011 */

 01100110 */

 11001100 */

 00001111 */

 172 0xac '¼' */

 01100011 */

 11100110 */

 01101100 */

 01111010 */

 00110110 */

 01101010 */

 11011111 */

 00000110 */

 173 0xad '¡' */

 00011000 */

 00000000 */

 00011000 */

 00011000 */

 00111100 */

 00111100 */

 00011000 */

 00000000 */

 174 0xae '«' */

 00000000 */

 00110011 */

 01100110 */

 11001100 */

 01100110 */

 00110011 */

 00000000 */

 00000000 */

 175 0xaf '»' */

 00000000 */

 11001100 */

 01100110 */

 00110011 */

 01100110 */

 11001100 */

 00000000 */

 00000000 */

 176 0xb0 '░' */

 00100010 */

 10001000 */

 00100010 */

 10001000 */

 00100010 */

 10001000 */

 00100010 */

 10001000 */

 177 0xb1 '▒' */

 01010101 */

 10101010 */

 01010101 */

 10101010 */

 01010101 */

 10101010 */

 01010101 */

 10101010 */

 178 0xb2 '▓' */

 01110111 */

 11011101 */

 01110111 */

 11011101 */

 01110111 */

 11011101 */

 01110111 */

 11011101 */

 179 0xb3 '│' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 180 0xb4 '┤' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 11111000 */

 00011000 */

 00011000 */

 00011000 */

 181 0xb5 '╡' */

 00011000 */

 00011000 */

 11111000 */

 00011000 */

 11111000 */

 00011000 */

 00011000 */

 00011000 */

 182 0xb6 '╢' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 11110110 */

 00110110 */

 00110110 */

 00110110 */

 183 0xb7 '╖' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111110 */

 00110110 */

 00110110 */

 00110110 */

 184 0xb8 '╕' */

 00000000 */

 00000000 */

 11111000 */

 00011000 */

 11111000 */

 00011000 */

 00011000 */

 00011000 */

 185 0xb9 '╣' */

 00110110 */

 00110110 */

 11110110 */

 00000110 */

 11110110 */

 00110110 */

 00110110 */

 00110110 */

 186 0xba '║' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 187 0xbb '╗' */

 00000000 */

 00000000 */

 11111110 */

 00000110 */

 11110110 */

 00110110 */

 00110110 */

 00110110 */

 188 0xbc '╝' */

 00110110 */

 00110110 */

 11110110 */

 00000110 */

 11111110 */

 00000000 */

 00000000 */

 00000000 */

 189 0xbd '╜' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 11111110 */

 00000000 */

 00000000 */

 00000000 */

 190 0xbe '╛' */

 00011000 */

 00011000 */

 11111000 */

 00011000 */

 11111000 */

 00000000 */

 00000000 */

 00000000 */

 191 0xbf '┐' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111000 */

 00011000 */

 00011000 */

 00011000 */

 192 0xc0 '└' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011111 */

 00000000 */

 00000000 */

 00000000 */

 193 0xc1 '┴' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 11111111 */

 00000000 */

 00000000 */

 00000000 */

 194 0xc2 '┬' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111111 */

 00011000 */

 00011000 */

 00011000 */

 195 0xc3 '├' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011111 */

 00011000 */

 00011000 */

 00011000 */

 196 0xc4 '─' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111111 */

 00000000 */

 00000000 */

 00000000 */

 197 0xc5 '┼' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 11111111 */

 00011000 */

 00011000 */

 00011000 */

 198 0xc6 '╞' */

 00011000 */

 00011000 */

 00011111 */

 00011000 */

 00011111 */

 00011000 */

 00011000 */

 00011000 */

 199 0xc7 '╟' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110111 */

 00110110 */

 00110110 */

 00110110 */

 200 0xc8 '╚' */

 00110110 */

 00110110 */

 00110111 */

 00110000 */

 00111111 */

 00000000 */

 00000000 */

 00000000 */

 201 0xc9 '╔' */

 00000000 */

 00000000 */

 00111111 */

 00110000 */

 00110111 */

 00110110 */

 00110110 */

 00110110 */

 202 0xca '╩' */

 00110110 */

 00110110 */

 11110111 */

 00000000 */

 11111111 */

 00000000 */

 00000000 */

 00000000 */

 203 0xcb '╦' */

 00000000 */

 00000000 */

 11111111 */

 00000000 */

 11110111 */

 00110110 */

 00110110 */

 00110110 */

 204 0xcc '╠' */

 00110110 */

 00110110 */

 00110111 */

 00110000 */

 00110111 */

 00110110 */

 00110110 */

 00110110 */

 205 0xcd '═' */

 00000000 */

 00000000 */

 11111111 */

 00000000 */

 11111111 */

 00000000 */

 00000000 */

 00000000 */

 206 0xce '╬' */

 00110110 */

 00110110 */

 11110111 */

 00000000 */

 11110111 */

 00110110 */

 00110110 */

 00110110 */

 207 0xcf '╧' */

 00011000 */

 00011000 */

 11111111 */

 00000000 */

 11111111 */

 00000000 */

 00000000 */

 00000000 */

 208 0xd0 '╨' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 11111111 */

 00000000 */

 00000000 */

 00000000 */

 209 0xd1 '╤' */

 00000000 */

 00000000 */

 11111111 */

 00000000 */

 11111111 */

 00011000 */

 00011000 */

 00011000 */

 210 0xd2 '╥' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111111 */

 00110110 */

 00110110 */

 00110110 */

 211 0xd3 '╙' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00111111 */

 00000000 */

 00000000 */

 00000000 */

 212 0xd4 '╘' */

 00011000 */

 00011000 */

 00011111 */

 00011000 */

 00011111 */

 00000000 */

 00000000 */

 00000000 */

 213 0xd5 '╒' */

 00000000 */

 00000000 */

 00011111 */

 00011000 */

 00011111 */

 00011000 */

 00011000 */

 00011000 */

 214 0xd6 '╓' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00111111 */

 00110110 */

 00110110 */

 00110110 */

 215 0xd7 '╫' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 11111111 */

 00110110 */

 00110110 */

 00110110 */

 216 0xd8 '╪' */

 00011000 */

 00011000 */

 11111111 */

 00011000 */

 11111111 */

 00011000 */

 00011000 */

 00011000 */

 217 0xd9 '┘' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 11111000 */

 00000000 */

 00000000 */

 00000000 */

 218 0xda '┌' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00011111 */

 00011000 */

 00011000 */

 00011000 */

 219 0xdb '█' */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 220 0xdc '▄' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 221 0xdd '▌' */

 11110000 */

 11110000 */

 11110000 */

 11110000 */

 11110000 */

 11110000 */

 11110000 */

 11110000 */

 222 0xde '▐' */

 00001111 */

 00001111 */

 00001111 */

 00001111 */

 00001111 */

 00001111 */

 00001111 */

 00001111 */

 223 0xdf '▀' */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 224 0xe0 'α' */

 00000000 */

 00000000 */

 01110110 */

 11011100 */

 11001000 */

 11011100 */

 01110110 */

 00000000 */

 225 0xe1 'ß' */

 01111000 */

 11001100 */

 11001100 */

 11011000 */

 11001100 */

 11000110 */

 11001100 */

 00000000 */

 226 0xe2 'Γ' */

 11111110 */

 11000110 */

 11000000 */

 11000000 */

 11000000 */

 11000000 */

 11000000 */

 00000000 */

 227 0xe3 'π' */

 00000000 */

 00000000 */

 11111110 */

 01101100 */

 01101100 */

 01101100 */

 01101100 */

 00000000 */

 228 0xe4 'Σ' */

 11111110 */

 11000110 */

 01100000 */

 00110000 */

 01100000 */

 11000110 */

 11111110 */

 00000000 */

 229 0xe5 'σ' */

 00000000 */

 00000000 */

 01111110 */

 11011000 */

 11011000 */

 11011000 */

 01110000 */

 00000000 */

 230 0xe6 'µ' */

 00000000 */

 00000000 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 01111100 */

 11000000 */

 231 0xe7 'τ' */

 00000000 */

 01110110 */

 11011100 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00000000 */

 232 0xe8 'Φ' */

 01111110 */

 00011000 */

 00111100 */

 01100110 */

 01100110 */

 00111100 */

 00011000 */

 01111110 */

 233 0xe9 'Θ' */

 00111000 */

 01101100 */

 11000110 */

 11111110 */

 11000110 */

 01101100 */

 00111000 */

 00000000 */

 234 0xea 'Ω' */

 00111000 */

 01101100 */

 11000110 */

 11000110 */

 01101100 */

 01101100 */

 11101110 */

 00000000 */

 235 0xeb 'δ' */

 00001110 */

 00011000 */

 00001100 */

 00111110 */

 01100110 */

 01100110 */

 00111100 */

 00000000 */

 236 0xec '∞' */

 00000000 */

 00000000 */

 01111110 */

 11011011 */

 11011011 */

 01111110 */

 00000000 */

 00000000 */

 237 0xed 'φ' */

 00000110 */

 00001100 */

 01111110 */

 11011011 */

 11011011 */

 01111110 */

 01100000 */

 11000000 */

 238 0xee 'ε' */

 00011110 */

 00110000 */

 01100000 */

 01111110 */

 01100000 */

 00110000 */

 00011110 */

 00000000 */

 239 0xef '∩' */

 00000000 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 00000000 */

 240 0xf0 '≡' */

 00000000 */

 11111110 */

 00000000 */

 11111110 */

 00000000 */

 11111110 */

 00000000 */

 00000000 */

 241 0xf1 '±' */

 00011000 */

 00011000 */

 01111110 */

 00011000 */

 00011000 */

 00000000 */

 01111110 */

 00000000 */

 242 0xf2 '≥' */

 00110000 */

 00011000 */

 00001100 */

 00011000 */

 00110000 */

 00000000 */

 01111110 */

 00000000 */

 243 0xf3 '≤' */

 00001100 */

 00011000 */

 00110000 */

 00011000 */

 00001100 */

 00000000 */

 01111110 */

 00000000 */

 244 0xf4 '⌠' */

 00001110 */

 00011011 */

 00011011 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 245 0xf5 '⌡' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 11011000 */

 11011000 */

 01110000 */

 246 0xf6 '÷' */

 00000000 */

 00011000 */

 00000000 */

 01111110 */

 00000000 */

 00011000 */

 00000000 */

 00000000 */

 247 0xf7 '≈' */

 00000000 */

 01110110 */

 11011100 */

 00000000 */

 01110110 */

 11011100 */

 00000000 */

 00000000 */

 248 0xf8 '°' */

 00111000 */

 01101100 */

 01101100 */

 00111000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 249 0xf9 '·' */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 250 0xfa '•' */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 251 0xfb '√' */

 00001111 */

 00001100 */

 00001100 */

 00001100 */

 11101100 */

 01101100 */

 00111100 */

 00011100 */

 252 0xfc 'ⁿ' */

 01101100 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00000000 */

 00000000 */

 00000000 */

 253 0xfd '²' */

 01111000 */

 00001100 */

 00011000 */

 00110000 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 254 0xfe '■' */

 00000000 */

 00000000 */

 00111100 */

 00111100 */

 00111100 */

 00111100 */

 00000000 */

 00000000 */

 255 0xff ' ' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 SPDX-License-Identifier: GPL-2.0

 0 0x00 '^@' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 1 0x01 '^A' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000111111100 */

 001100000110 */

 011001010011 */

 011011011011 */

 011000000011 */

 011000100011 */

 011000100011 */

 011000000011 */

 011011111011 */

 011001110011 */

 001100000110 */

 000111111100 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 2 0x02 '^B' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000111111100 */

 001111111110 */

 011110101111 */

 011100100111 */

 011111111111 */

 011111011111 */

 011111011111 */

 011111111111 */

 011100000111 */

 011110001111 */

 001111111110 */

 000111111100 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 3 0x03 '^C' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000110011000 */

 001111111100 */

 011111111110 */

 001111111100 */

 001111111100 */

 000111111000 */

 000111111000 */

 000011110000 */

 000011110000 */

 000001100000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 4 0x04 '^D' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000100000 */

 000001110000 */

 000011111000 */

 000011111000 */

 000111111100 */

 000111111100 */

 001111111110 */

 000111111100 */

 000111111100 */

 000011111000 */

 000011111000 */

 000001110000 */

 000000100000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 5 0x05 '^E' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000100000 */

 000001110000 */

 000001110000 */

 000000100000 */

 000110001100 */

 001111011110 */

 001111011110 */

 000110101100 */

 000000100000 */

 000001110000 */

 000011111000 */

 000111111100 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 6 0x06 '^F' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000001100000 */

 000011110000 */

 000111111000 */

 000111111000 */

 001111111100 */

 011111111110 */

 011111111110 */

 001101101100 */

 000001100000 */

 000001100000 */

 000011110000 */

 000111111000 */

 001111111100 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 7 0x07 '^G' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000001100000 */

 000011110000 */

 000011110000 */

 000111111000 */

 000111111000 */

 001111111100 */

 001111111100 */

 000111111000 */

 000111111000 */

 000011110000 */

 000011110000 */

 000001100000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 8 0x08 '^H' */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111110011111 */

 111100001111 */

 111100001111 */

 111000000111 */

 111000000111 */

 110000000011 */

 110000000011 */

 111000000111 */

 111000000111 */

 111100001111 */

 111100001111 */

 111110011111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 9 0x09 '^I' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000001100000 */

 000011110000 */

 000011110000 */

 000110011000 */

 000110011000 */

 001100001100 */

 001100001100 */

 000110011000 */

 000110011000 */

 000011110000 */

 000011110000 */

 000001100000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 10 0x0a '^J' */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111110011111 */

 111100001111 */

 111100001111 */

 111001100111 */

 111001100111 */

 110011110011 */

 110011110011 */

 111001100111 */

 111001100111 */

 111100001111 */

 111100001111 */

 111110011111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 11 0x0b '^K' */

 000000000000 */

 000000000000 */

 000011111110 */

 000011111110 */

 000000011110 */

 000000110110 */

 000001100110 */

 000111100000 */

 001100110000 */

 001100110000 */

 011000011000 */

 011000011000 */

 001100110000 */

 001100110000 */

 000111100000 */

 000011000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 12 0x0c '^L' */

 000000000000 */

 000000000000 */

 000001100000 */

 000011110000 */

 000110011000 */

 001100001100 */

 001100001100 */

 000110011000 */

 000011110000 */

 000001100000 */

 000001100000 */

 000001100000 */

 001111111100 */

 001111111100 */

 000001100000 */

 000001100000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 13 0x0d '^M' */

 000000000000 */

 000000000000 */

 000011111110 */

 000011000110 */

 000011000110 */

 000011111110 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 001111000000 */

 011111000000 */

 011110000000 */

 001100000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 14 0x0e '^N' */

 000000000000 */

 000000000000 */

 000111111110 */

 000110000110 */

 000110000110 */

 000111111110 */

 000110000110 */

 000110000110 */

 000110000110 */

 000110000110 */

 000110000110 */

 000110000110 */

 000110011110 */

 000110111110 */

 000110111100 */

 011110011000 */

 111110000000 */

 111100000000 */

 011000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 15 0x0f '^O' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000110001100 */

 000011011000 */

 011011011011 */

 001111011110 */

 000000000000 */

 001111011110 */

 011011011011 */

 000011011000 */

 000110001100 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 16 0x10 '^P' */

 000000000000 */

 000000000010 */

 000000000110 */

 000000001110 */

 000000011110 */

 000000111110 */

 000001111110 */

 000011111110 */

 000111111110 */

 001111111110 */

 011111111110 */

 001111111110 */

 000111111110 */

 000011111110 */

 000001111110 */

 000000111110 */

 000000011110 */

 000000001110 */

 000000000110 */

 000000000010 */

 000000000000 */

 000000000000 */

 17 0x11 '^Q' */

 000000000000 */

 010000000000 */

 011000000000 */

 011100000000 */

 011110000000 */

 011111000000 */

 011111100000 */

 011111110000 */

 011111111000 */

 011111111100 */

 011111111110 */

 011111111100 */

 011111111000 */

 011111110000 */

 011111100000 */

 011111000000 */

 011110000000 */

 011100000000 */

 011000000000 */

 010000000000 */

 000000000000 */

 000000000000 */

 18 0x12 '^R' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000001000000 */

 000011100000 */

 000111110000 */

 001111111000 */

 011111111100 */

 000011100000 */

 000011100000 */

 011111111100 */

 001111111000 */

 000111110000 */

 000011100000 */

 000001000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 19 0x13 '^S' */

 000000000000 */

 001100011000 */

 001100011000 */

 001100011000 */

 001100011000 */

 001100011000 */

 001100011000 */

 001100011000 */

 001100011000 */

 001100011000 */

 001100011000 */

 001100011000 */

 000000000000 */

 000000000000 */

 001100011000 */

 001100011000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 20 0x14 '^T' */

 000000000000 */

 000000000000 */

 000111111111 */

 001111001100 */

 011111001100 */

 011111001100 */

 011111001100 */

 001111001100 */

 000111001100 */

 000011001100 */

 000011001100 */

 000011001100 */

 000011001100 */

 000011001100 */

 000011001100 */

 000111001110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 21 0x15 '^U' */

 000000000000 */

 000000000000 */

 000111110000 */

 001100011000 */

 001100011000 */

 001100000000 */

 001100000000 */

 000111110000 */

 001100011000 */

 001100011000 */

 000111110000 */

 000000011000 */

 000000011000 */

 001100011000 */

 001100011000 */

 000111110000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 22 0x16 '^V' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 011111111110 */

 011111111110 */

 011111111110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 23 0x17 '^W' */

 000000000000 */

 000000000000 */

 000001000000 */

 000011100000 */

 000111110000 */

 001111111000 */

 011111111100 */

 000011100000 */

 000011100000 */

 011111111100 */

 001111111000 */

 000111110000 */

 000011100000 */

 000001000000 */

 000000000000 */

 011111111110 */

 011111111110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 24 0x18 '^X' */

 000000000000 */

 000000000000 */

 000001000000 */

 000011100000 */

 000111110000 */

 001111111000 */

 011111111100 */

 000011100000 */

 000011100000 */

 000011100000 */

 000011100000 */

 000011100000 */

 000011100000 */

 000011100000 */

 000011100000 */

 000011100000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 25 0x19 '^Y' */

 000000000000 */

 000000000000 */

 000011100000 */

 000011100000 */

 000011100000 */

 000011100000 */

 000011100000 */

 000011100000 */

 000011100000 */

 000011100000 */

 000011100000 */

 000011100000 */

 011111111100 */

 001111111000 */

 000111110000 */

 000011100000 */

 000001000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 26 0x1a '^Z' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000010000000 */

 000110000000 */

 001110000000 */

 011111111110 */

 111111111110 */

 011111111110 */

 001110000000 */

 000110000000 */

 000010000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 27 0x1b '^[' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000010000 */

 000000011000 */

 000000011100 */

 011111111110 */

 011111111111 */

 011111111110 */

 000000011100 */

 000000011000 */

 000000010000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 28 0x1c '^\' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 001100000000 */

 001100000000 */

 001111111110 */

 001111111110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 29 0x1d '^]' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000010010000 */

 000110011000 */

 001110011100 */

 011111111110 */

 111111111111 */

 011111111110 */

 001110011100 */

 000110011000 */

 000010010000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 30 0x1e '^^' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000001000000 */

 000001000000 */

 000011100000 */

 000011100000 */

 000111110000 */

 000111110000 */

 001111111000 */

 001111111000 */

 011111111100 */

 011111111100 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 31 0x1f '^_' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 011111111100 */

 011111111100 */

 001111111000 */

 001111111000 */

 000111110000 */

 000111110000 */

 000011100000 */

 000011100000 */

 000001000000 */

 000001000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 32 0x20 ' ' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 33 0x21 '!' */

 000000000000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000000000000 */

 000000000000 */

 000001100000 */

 000001100000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 34 0x22 '"' */

 000000000000 */

 000110011000 */

 000110011000 */

 000110011000 */

 000110011000 */

 000110011000 */

 000110011000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 35 0x23 '#' */

 000000000000 */

 000000110011 */

 000000110011 */

 000000110011 */

 000001100110 */

 000111111111 */

 000111111111 */

 000011001100 */

 000011001100 */

 000110011000 */

 000110011000 */

 011111111100 */

 011111111100 */

 001100110000 */

 011001100000 */

 011001100000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 36 0x24 '$' */

 000000000000 */

 000001100000 */

 000111111000 */

 001111111100 */

 011001101110 */

 011001100110 */

 011001100000 */

 001111100000 */

 000111111000 */

 000001111100 */

 000001100110 */

 000001100110 */

 011001100110 */

 011111111100 */

 001111111000 */

 000001100000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 37 0x25 '%' */

 000000000000 */

 000000000000 */

 001110001100 */

 010011001100 */

 010001011000 */

 011001011000 */

 001110110000 */

 000000110000 */

 000001100000 */

 000001100000 */

 000011000000 */

 000011011100 */

 000110100110 */

 000110100010 */

 001100110010 */

 001100011100 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 38 0x26 '&' */

 000000000000 */

 000001110000 */

 000011111000 */

 000110001100 */

 000110001100 */

 000110001100 */

 000011111000 */

 000111100000 */

 001111100000 */

 011101110000 */

 011000110110 */

 011000011110 */

 011000011100 */

 011000011000 */

 001111111110 */

 000111100110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 39 0x27 ''' */

 000000000000 */

 000011000000 */

 000111100000 */

 000111100000 */

 000001100000 */

 000001100000 */

 000011000000 */

 000110000000 */

 000100000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 40 0x28 '(' */

 000000000000 */

 000000011000 */

 000000110000 */

 000001100000 */

 000001100000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000001100000 */

 000001100000 */

 000000110000 */

 000000011000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 41 0x29 ')' */

 000000000000 */

 000110000000 */

 000011000000 */

 000001100000 */

 000001100000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000001100000 */

 000001100000 */

 000011000000 */

 000110000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 42 0x2a '*' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000011110000 */

 000001100000 */

 011001100110 */

 011101101110 */

 000110011000 */

 000000000000 */

 000110011000 */

 011101101110 */

 011001100110 */

 000001100000 */

 000011110000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 43 0x2b '+' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 011111111110 */

 011111111110 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 44 0x2c ',' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000011000000 */

 000111100000 */

 000111100000 */

 000001100000 */

 000001100000 */

 000011000000 */

 000110000000 */

 000100000000 */

 000000000000 */

 45 0x2d '-' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 011111111110 */

 011111111110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 46 0x2e '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000011000000 */

 000111100000 */

 000111100000 */

 000011000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 47 0x2f '/' */

 000000000000 */

 000000000110 */

 000000001100 */

 000000001100 */

 000000011000 */

 000000011000 */

 000000110000 */

 000000110000 */

 000001100000 */

 000001100000 */

 000011000000 */

 000011000000 */

 000110000000 */

 000110000000 */

 001100000000 */

 001100000000 */

 011000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 48 0x30 '0' */

 000000000000 */

 000001110000 */

 000011111000 */

 000100011000 */

 000100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001000 */

 000110001000 */

 000111110000 */

 000011100000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 49 0x31 '1' */

 000000000000 */

 000000100000 */

 000001100000 */

 000011100000 */

 000111100000 */

 001101100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 001111111100 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 50 0x32 '2' */

 000000000000 */

 000111110000 */

 001111111000 */

 011000011100 */

 010000001100 */

 000000001100 */

 000000001100 */

 000000001100 */

 000000011000 */

 000000110000 */

 000001100000 */

 000011000000 */

 000110000000 */

 001100000010 */

 011111111110 */

 011111111110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 51 0x33 '3' */

 000000000000 */

 000011111000 */

 000111111100 */

 001000001110 */

 010000000110 */

 000000000110 */

 000000001110 */

 000001111100 */

 000011111100 */

 000000001110 */

 000000000110 */

 000000000110 */

 010000000110 */

 011000000100 */

 001111111000 */

 000111110000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 52 0x34 '4' */

 000000000000 */

 000000011000 */

 000000111000 */

 000000111000 */

 000001011000 */

 000001011000 */

 000010011000 */

 000010011000 */

 000100011000 */

 000100011000 */

 001000011000 */

 001111111110 */

 011111111110 */

 000000011000 */

 000000011000 */

 000000011000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 53 0x35 '5' */

 000000000000 */

 000011111100 */

 000011111100 */

 000100000000 */

 000100000000 */

 001000000000 */

 001111111000 */

 001100011100 */

 000000001110 */

 000000000110 */

 000000000110 */

 000000000110 */

 010000000110 */

 011000000110 */

 001100001100 */

 000111111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 54 0x36 '6' */

 000000000000 */

 000001110000 */

 000011000000 */

 000110000000 */

 001100000000 */

 001100000000 */

 011000000000 */

 011001111000 */

 011011111100 */

 011100001110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011100000100 */

 001111111000 */

 000111110000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 55 0x37 '7' */

 000000000000 */

 000111111110 */

 001111111110 */

 011000000100 */

 000000000100 */

 000000001100 */

 000000001000 */

 000000001000 */

 000000011000 */

 000000010000 */

 000000010000 */

 000000110000 */

 000000100000 */

 000000100000 */

 000001100000 */

 000001000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 56 0x38 '8' */

 000000000000 */

 000011110000 */

 000100011000 */

 001100001100 */

 001100001100 */

 001100001100 */

 000110001000 */

 000011010000 */

 000001100000 */

 000010110000 */

 000100011000 */

 001100001100 */

 001100001100 */

 001100001100 */

 000110001000 */

 000011110000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 57 0x39 '9' */

 000000000000 */

 000011111000 */

 000100011100 */

 001000001110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011100001110 */

 001111110110 */

 000111100110 */

 000000000110 */

 000000001100 */

 000000001100 */

 000000011000 */

 000001110000 */

 001111000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 58 0x3a ':' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000011000000 */

 000111100000 */

 000111100000 */

 000011000000 */

 000000000000 */

 000000000000 */

 000011000000 */

 000111100000 */

 000111100000 */

 000011000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 59 0x3b ';' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000011000000 */

 000111100000 */

 000111100000 */

 000011000000 */

 000000000000 */

 000000000000 */

 000011000000 */

 000111100000 */

 000111100000 */

 000001100000 */

 000001100000 */

 000011000000 */

 000110000000 */

 000100000000 */

 000000000000 */

 60 0x3c '<' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000110 */

 000000011100 */

 000001110000 */

 000111000000 */

 011100000000 */

 011100000000 */

 000111000000 */

 000001110000 */

 000000011100 */

 000000000110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 61 0x3d '=' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 011111111110 */

 011111111110 */

 000000000000 */

 000000000000 */

 011111111110 */

 011111111110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 62 0x3e '>' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 011000000000 */

 001110000000 */

 000011100000 */

 000000111000 */

 000000001110 */

 000000001110 */

 000000111000 */

 000011100000 */

 001110000000 */

 011000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 63 0x3f '?' */

 000000000000 */

 000011110000 */

 000111111000 */

 001110011100 */

 001000001100 */

 000000001100 */

 000000001100 */

 000000011000 */

 000000110000 */

 000001100000 */

 000011000000 */

 000011000000 */

 000000000000 */

 000000000000 */

 000011000000 */

 000011000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 64 0x40 '@' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000011111000 */

 001111111100 */

 001100000110 */

 011000000110 */

 011001110010 */

 011011111010 */

 011011001010 */

 011011001010 */

 011001111110 */

 011000000000 */

 001100000000 */

 001111111110 */

 000011111110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 65 0x41 'A' */

 000000000000 */

 000000000000 */

 000001100000 */

 000001100000 */

 000010110000 */

 000010110000 */

 000010010000 */

 000100011000 */

 000100011000 */

 000100001000 */

 001111111100 */

 001000001100 */

 001000000100 */

 010000000110 */

 010000000110 */

 111000001111 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 66 0x42 'B' */

 000000000000 */

 000000000000 */

 111111110000 */

 011000001000 */

 011000001100 */

 011000001100 */

 011000001100 */

 011000011000 */

 011111111000 */

 011000001100 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000001100 */

 111111111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 67 0x43 'C' */

 000000000000 */

 000000000000 */

 000011111100 */

 000100000110 */

 001000000010 */

 001000000000 */

 011000000000 */

 011000000000 */

 011000000000 */

 011000000000 */

 011000000000 */

 011000000000 */

 001000000000 */

 001100000010 */

 000110000100 */

 000011111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 68 0x44 'D' */

 000000000000 */

 000000000000 */

 111111110000 */

 011000011100 */

 011000001100 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000100 */

 011000011000 */

 111111100000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 69 0x45 'E' */

 000000000000 */

 000000000000 */

 011111111100 */

 001100000100 */

 001100000100 */

 001100000000 */

 001100000000 */

 001100001000 */

 001111111000 */

 001100001000 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000010 */

 001100000010 */

 011111111110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 70 0x46 'F' */

 000000000000 */

 000000000000 */

 011111111100 */

 001100000100 */

 001100000100 */

 001100000000 */

 001100000000 */

 001100001000 */

 001111111000 */

 001100001000 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000000 */

 011110000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 71 0x47 'G' */

 000000000000 */

 000000000000 */

 000011111100 */

 000100000110 */

 001000000010 */

 001000000000 */

 011000000000 */

 011000000000 */

 011000000000 */

 011000000000 */

 011000011111 */

 011000000110 */

 001000000110 */

 001100000110 */

 000110000110 */

 000011111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 72 0x48 'H' */

 000000000000 */

 000000000000 */

 111100001111 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011111111110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 111100001111 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 73 0x49 'I' */

 000000000000 */

 000000000000 */

 000111111000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000111111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 74 0x4a 'J' */

 000000000000 */

 000000000000 */

 000111111000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001000000 */

 001110000000 */

 001100000000 */

 000000000000 */

 75 0x4b 'K' */

 000000000000 */

 000000000000 */

 111100001110 */

 011000011000 */

 011000110000 */

 011001100000 */

 011011000000 */

 011110000000 */

 011110000000 */

 011111000000 */

 011011100000 */

 011001110000 */

 011000111000 */

 011000011100 */

 011000001110 */

 111100000111 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 76 0x4c 'L' */

 000000000000 */

 000000000000 */

 011110000000 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000010 */

 001100000010 */

 011111111110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 77 0x4d 'M' */

 000000000000 */

 000000000000 */

 111000000111 */

 011000001110 */

 011100001110 */

 011100001110 */

 011100001110 */

 010110010110 */

 010110010110 */

 010110010110 */

 010011010110 */

 010011100110 */

 010011100110 */

 010001000110 */

 010001000110 */

 111001001111 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 78 0x4e 'N' */

 000000000000 */

 000000000000 */

 110000000111 */

 011000000010 */

 011100000010 */

 011110000010 */

 010110000010 */

 010011000010 */

 010001100010 */

 010001110010 */

 010000110010 */

 010000011010 */

 010000001110 */

 010000001110 */

 010000000110 */

 111000000011 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 79 0x4f 'O' */

 000000000000 */

 000000000000 */

 000011110000 */

 000100011100 */

 001000001100 */

 001000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 001000000100 */

 001100000100 */

 000110001000 */

 000011110000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 80 0x50 'P' */

 000000000000 */

 000000000000 */

 011111111000 */

 001100001100 */

 001100000110 */

 001100000110 */

 001100000110 */

 001100001100 */

 001101111000 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000000 */

 011110000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 81 0x51 'Q' */

 000000000000 */

 000000000000 */

 000011110000 */

 000100011100 */

 001000001100 */

 001000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 001100000100 */

 001110000100 */

 000111111000 */

 000011100000 */

 000111110000 */

 001000111001 */

 000000011110 */

 000000000000 */

 000000000000 */

 000000000000 */

 82 0x52 'R' */

 000000000000 */

 000000000000 */

 111111110000 */

 011000011000 */

 011000001100 */

 011000001100 */

 011000001100 */

 011000001000 */

 011111110000 */

 011111000000 */

 011011100000 */

 011001110000 */

 011000111000 */

 011000011100 */

 011000001110 */

 111100000111 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 83 0x53 'S' */

 000000000000 */

 000000000000 */

 000111111110 */

 001100000110 */

 011000000010 */

 011000000010 */

 011100000000 */

 001111000000 */

 000111100000 */

 000001111000 */

 000000011100 */

 000000001110 */

 010000000110 */

 010000000110 */

 011000001100 */

 011111111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 84 0x54 'T' */

 000000000000 */

 000000000000 */

 011111111110 */

 010001100010 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000111111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 85 0x55 'U' */

 000000000000 */

 000000000000 */

 111100000111 */

 011000000010 */

 011000000010 */

 011000000010 */

 011000000010 */

 011000000010 */

 011000000010 */

 011000000010 */

 011000000010 */

 011000000010 */

 011000000010 */

 011100000100 */

 001111111100 */

 000111111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 86 0x56 'V' */

 000000000000 */

 000000000000 */

 111000001110 */

 011000000100 */

 001100001000 */

 001100001000 */

 001100001000 */

 000110010000 */

 000110010000 */

 000110010000 */

 000010100000 */

 000011100000 */

 000011100000 */

 000001000000 */

 000001000000 */

 000001000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 87 0x57 'W' */

 000000000000 */

 000000000000 */

 111111101111 */

 011001100010 */

 011001100010 */

 011001100010 */

 011101100010 */

 011101110100 */

 001100110100 */

 001101110100 */

 001110111100 */

 001110111000 */

 000110011000 */

 000110011000 */

 000110011000 */

 000110011000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 88 0x58 'X' */

 000000000000 */

 000000000000 */

 111100000111 */

 011000000010 */

 001100000100 */

 001110001000 */

 000110001000 */

 000011010000 */

 000001100000 */

 000001100000 */

 000010110000 */

 000100011000 */

 000100011100 */

 001000001100 */

 010000000110 */

 111000001111 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 89 0x59 'Y' */

 000000000000 */

 000000000000 */

 111100000111 */

 011000000010 */

 001100000100 */

 000110001000 */

 000110001000 */

 000011010000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000011110000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 90 0x5a 'Z' */

 000000000000 */

 000000000000 */

 001111111110 */

 001000001100 */

 000000001100 */

 000000011000 */

 000000011000 */

 000000110000 */

 000000110000 */

 000001100000 */

 000001100000 */

 000011000000 */

 000011000000 */

 000110000000 */

 000110000010 */

 001111111110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 91 0x5b '[' */

 000000000000 */

 000011111000 */

 000011111000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011111000 */

 000011111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 92 0x5c '\' */

 000000000000 */

 011000000000 */

 001100000000 */

 001100000000 */

 000110000000 */

 000110000000 */

 000011000000 */

 000011000000 */

 000001100000 */

 000001100000 */

 000000110000 */

 000000110000 */

 000000011000 */

 000000011000 */

 000000001100 */

 000000001100 */

 000000000110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 93 0x5d ']' */

 000000000000 */

 000111110000 */

 000111110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000111110000 */

 000111110000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 94 0x5e '^' */

 000000000000 */

 000001000000 */

 000011100000 */

 000110110000 */

 001100011000 */

 011000001100 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 95 0x5f '_' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 111111111111 */

 111111111111 */

 000000000000 */

 000000000000 */

 000000000000 */

 96 0x60 '`' */

 000000000000 */

 000000010000 */

 000000110000 */

 000001100000 */

 000001100000 */

 000001111000 */

 000001111000 */

 000000110000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 97 0x61 'a' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000011111000 */

 000110001100 */

 000100001100 */

 000000111100 */

 000111001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001110011100 */

 000111101110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 98 0x62 'b' */

 000000000000 */

 001000000000 */

 011000000000 */

 111000000000 */

 011000000000 */

 011000000000 */

 011001111000 */

 011011111100 */

 011100001110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011100000110 */

 011110001100 */

 010011111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 99 0x63 'c' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000111111000 */

 001100011100 */

 001000001100 */

 011000000000 */

 011000000000 */

 011000000000 */

 011000000000 */

 011100000100 */

 001100001100 */

 000111111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 100 0x64 'd' */

 000000000000 */

 000000000110 */

 000000001110 */

 000000000110 */

 000000000110 */

 000000000110 */

 000011110110 */

 001100011110 */

 001000001110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011100001110 */

 001110010110 */

 000111100111 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 101 0x65 'e' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000011110000 */

 001100001100 */

 011000000110 */

 011000000110 */

 011111111110 */

 011000000000 */

 011000000000 */

 001100000000 */

 000110000110 */

 000011111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 102 0x66 'f' */

 000000000000 */

 000000111000 */

 000001001100 */

 000001001100 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 001111111000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000111100000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 103 0x67 'g' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000111110010 */

 001100011110 */

 011000001100 */

 011000001100 */

 011000001100 */

 001100011000 */

 001111110000 */

 011000000000 */

 011111111100 */

 001111111110 */

 001000000110 */

 010000000010 */

 010000000010 */

 011111111100 */

 001111111000 */

 000000000000 */

 104 0x68 'h' */

 000000000000 */

 000100000000 */

 001100000000 */

 011100000000 */

 001100000000 */

 001100000000 */

 001101111000 */

 001110011100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 011110011110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 105 0x69 'i' */

 000000000000 */

 000000000000 */

 000001100000 */

 000001100000 */

 000000000000 */

 000000000000 */

 000111100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000111111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 106 0x6a 'j' */

 000000000000 */

 000000000000 */

 000000001100 */

 000000001100 */

 000000000000 */

 000000000000 */

 000000111100 */

 000000001100 */

 000000001100 */

 000000001100 */

 000000001100 */

 000000001100 */

 000000001100 */

 000000001100 */

 000000001100 */

 000000001100 */

 001000001100 */

 001100001100 */

 001110001000 */

 000111110000 */

 000011100000 */

 000000000000 */

 107 0x6b 'k' */

 000000000000 */

 011000000000 */

 111000000000 */

 011000000000 */

 011000000000 */

 011000000000 */

 011000011100 */

 011000110000 */

 011001100000 */

 011111000000 */

 011110000000 */

 011111000000 */

 011011100000 */

 011001110000 */

 011000111000 */

 111100011110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 108 0x6c 'l' */

 000000000000 */

 000111100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000111111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 109 0x6d 'm' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 110111011100 */

 011011101110 */

 011001100110 */

 011001100110 */

 011001100110 */

 011001100110 */

 011001100110 */

 011001100110 */

 011001100110 */

 111011110111 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 110 0x6e 'n' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 001001111000 */

 011110011100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 011110011110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 111 0x6f 'o' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000011111000 */

 000100011100 */

 001000001110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011100000100 */

 001110001000 */

 000111110000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 112 0x70 'p' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 111011111000 */

 011100011100 */

 011000001110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000100 */

 011100001000 */

 011111110000 */

 011000000000 */

 011000000000 */

 011000000000 */

 011000000000 */

 111100000000 */

 000000000000 */

 113 0x71 'q' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000011110010 */

 000100011110 */

 001000001110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011100000110 */

 001110001110 */

 000111111110 */

 000000000110 */

 000000000110 */

 000000000110 */

 000000000110 */

 000000001111 */

 000000000000 */

 114 0x72 'r' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 011100111000 */

 001101001100 */

 001110001100 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000000 */

 011110000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 115 0x73 's' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000111111100 */

 001100001100 */

 001100000100 */

 001110000000 */

 000111100000 */

 000001111000 */

 000000011100 */

 001000001100 */

 001100001100 */

 001111111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 116 0x74 't' */

 000000000000 */

 000000000000 */

 000000000000 */

 000001000000 */

 000001000000 */

 000011000000 */

 011111111100 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000010 */

 000011100100 */

 000001111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 117 0x75 'u' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 011110011110 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001110011100 */

 000111100110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 118 0x76 'v' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 111100000111 */

 011000000010 */

 001100000100 */

 001100000100 */

 000110001000 */

 000110001000 */

 000011010000 */

 000011010000 */

 000001100000 */

 000001100000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 119 0x77 'w' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 111111110111 */

 011001100010 */

 011001100010 */

 011001100010 */

 001101110100 */

 001110110100 */

 001110110100 */

 000110011000 */

 000110011000 */

 000110011000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 120 0x78 'x' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 111110001111 */

 011100000100 */

 001110001000 */

 000111010000 */

 000011100000 */

 000001110000 */

 000010111000 */

 000100011100 */

 001000001110 */

 111100011111 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 121 0x79 'y' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 111100001111 */

 011000000010 */

 001100000100 */

 001100000100 */

 000110001000 */

 000110001000 */

 000011010000 */

 000011010000 */

 000001100000 */

 000001100000 */

 000001000000 */

 000011000000 */

 000010000000 */

 011110000000 */

 011100000000 */

 000000000000 */

 122 0x7a 'z' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 011111111110 */

 011000001110 */

 010000011100 */

 000000111000 */

 000001110000 */

 000011100000 */

 000111000000 */

 001110000010 */

 011100000110 */

 011111111110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 123 0x7b '{' */

 000000000000 */

 000000111000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000011000000 */

 001110000000 */

 000011000000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000000111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 124 0x7c '|' */

 000000000000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000000000000 */

 125 0x7d '}' */

 000000000000 */

 000111000000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000000110000 */

 000000011100 */

 000000110000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000111000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 126 0x7e '~' */

 000000000000 */

 000000000000 */

 000000000000 */

 000111000010 */

 001111100110 */

 011001111100 */

 010000111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 127 0x7f '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 111111111111 */

 111111111111 */

 000000000000 */

 128 0x80 '.' */

 000000000000 */

 000000000000 */

 000011111100 */

 000100000110 */

 001000000010 */

 001000000000 */

 011000000000 */

 011000000000 */

 011000000000 */

 011000000000 */

 011000000000 */

 011000000000 */

 001000000000 */

 001100000010 */

 000110000100 */

 000011111000 */

 000001100000 */

 000000110000 */

 000000011000 */

 000011110000 */

 000000000000 */

 000000000000 */

 129 0x81 '.' */

 000000000000 */

 000000000000 */

 000110011000 */

 000110011000 */

 000000000000 */

 000000000000 */

 011110011110 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001110011100 */

 000111100110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 130 0x82 '.' */

 000000000000 */

 000000000000 */

 000000011000 */

 000000110000 */

 000001100000 */

 000000000000 */

 000011110000 */

 001100001100 */

 011000000110 */

 011000000110 */

 011111111110 */

 011000000000 */

 011000000000 */

 001100000000 */

 000110000110 */

 000011111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 131 0x83 '.' */

 000000000000 */

 000000100000 */

 000001110000 */

 000011011000 */

 000110001100 */

 000000000000 */

 000011111000 */

 000110001100 */

 000100001100 */

 000000111100 */

 000111001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001110011100 */

 000111101110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 132 0x84 '.' */

 000000000000 */

 000000000000 */

 000110011000 */

 000110011000 */

 000000000000 */

 000000000000 */

 000011111000 */

 000110001100 */

 000100001100 */

 000000111100 */

 000111001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001110011100 */

 000111101110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 133 0x85 '.' */

 000000000000 */

 000000000000 */

 000011000000 */

 000001100000 */

 000000110000 */

 000000000000 */

 000011111000 */

 000110001100 */

 000100001100 */

 000000111100 */

 000111001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001110011100 */

 000111101110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 134 0x86 '.' */

 000000000000 */

 000001110000 */

 000011011000 */

 000011011000 */

 000001110000 */

 000000000000 */

 000011111000 */

 000110001100 */

 000100001100 */

 000000111100 */

 000111001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001110011100 */

 000111101110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 135 0x87 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000111111000 */

 001100011100 */

 001000001100 */

 011000000000 */

 011000000000 */

 011000000000 */

 011000000000 */

 011100000100 */

 001100001100 */

 000111111000 */

 000001100000 */

 000000110000 */

 000000011000 */

 000011110000 */

 000000000000 */

 000000000000 */

 136 0x88 '.' */

 000000000000 */

 000000100000 */

 000001110000 */

 000011011000 */

 000110001100 */

 000000000000 */

 000011110000 */

 001100001100 */

 011000000110 */

 011000000110 */

 011111111110 */

 011000000000 */

 011000000000 */

 001100000000 */

 000110000110 */

 000011111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 137 0x89 '.' */

 000000000000 */

 000000000000 */

 000110011000 */

 000110011000 */

 000000000000 */

 000000000000 */

 000011110000 */

 001100001100 */

 011000000110 */

 011000000110 */

 011111111110 */

 011000000000 */

 011000000000 */

 001100000000 */

 000110000110 */

 000011111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 138 0x8a '.' */

 000000000000 */

 000000000000 */

 000011000000 */

 000001100000 */

 000000110000 */

 000000000000 */

 000011110000 */

 001100001100 */

 011000000110 */

 011000000110 */

 011111111110 */

 011000000000 */

 011000000000 */

 001100000000 */

 000110000110 */

 000011111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 139 0x8b '.' */

 000000000000 */

 000000000000 */

 000110011000 */

 000110011000 */

 000000000000 */

 000000000000 */

 000111100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000111111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 140 0x8c '.' */

 000000000000 */

 000001000000 */

 000011100000 */

 000110110000 */

 001100011000 */

 000000000000 */

 000111100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000111111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 141 0x8d '.' */

 000000000000 */

 000000000000 */

 000110000000 */

 000011000000 */

 000001100000 */

 000000000000 */

 000111100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000111111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 142 0x8e '.' */

 000000000000 */

 000110011000 */

 000110011000 */

 000000000000 */

 000001000000 */

 000001100000 */

 000001100000 */

 000010110000 */

 000010110000 */

 000110011000 */

 000100011000 */

 001111111100 */

 001000001100 */

 011000000110 */

 010000000110 */

 111000001111 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 143 0x8f '.' */

 000000000000 */

 000011110000 */

 000110011000 */

 000011110000 */

 000001000000 */

 000001100000 */

 000001100000 */

 000010110000 */

 000010110000 */

 000110011000 */

 000100011000 */

 001111111100 */

 001000001100 */

 011000000110 */

 010000000110 */

 111000001111 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 144 0x90 '.' */

 000000000000 */

 000000110000 */

 000001100000 */

 000010000000 */

 011111111110 */

 001100000010 */

 001100000000 */

 001100000000 */

 001100001000 */

 001111111000 */

 001100001000 */

 001100000000 */

 001100000000 */

 001100000010 */

 001100000010 */

 011111111110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 145 0x91 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 001111011110 */

 011001100011 */

 010001100011 */

 000001100011 */

 001111111111 */

 011001100000 */

 110001100000 */

 110001100000 */

 111001110011 */

 011111011110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 146 0x92 '.' */

 000000000000 */

 000000000000 */

 000000111111 */

 000001110001 */

 000001110001 */

 000010110000 */

 000010110000 */

 000010110010 */

 000100111110 */

 000100110010 */

 001111110000 */

 001000110000 */

 001000110000 */

 010000110001 */

 010000110001 */

 111001111111 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 147 0x93 '.' */

 000000000000 */

 000000100000 */

 000001110000 */

 000011011000 */

 000110001100 */

 000000000000 */

 000011111000 */

 000100011100 */

 001000001110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011100000100 */

 001110001000 */

 000111110000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 148 0x94 '.' */

 000000000000 */

 000000000000 */

 000110011000 */

 000110011000 */

 000000000000 */

 000000000000 */

 000011111000 */

 000100011100 */

 001000001110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011100000100 */

 001110001000 */

 000111110000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 149 0x95 '.' */

 000000000000 */

 000000000000 */

 000011000000 */

 000001100000 */

 000000110000 */

 000000000000 */

 000011111000 */

 000100011100 */

 001000001110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011100000100 */

 001110001000 */

 000111110000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 150 0x96 '.' */

 000000000000 */

 000000100000 */

 000001110000 */

 000011011000 */

 000110001100 */

 000000000000 */

 011110011110 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001110011100 */

 000111100110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 151 0x97 '.' */

 000000000000 */

 000000000000 */

 000110000000 */

 000011000000 */

 000001100000 */

 000000000000 */

 011110011110 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001110011100 */

 000111100110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 152 0x98 '.' */

 000000000000 */

 000000000000 */

 000110011000 */

 000110011000 */

 000000000000 */

 000000000000 */

 111100001111 */

 011000000010 */

 001100000100 */

 001100000100 */

 000110001000 */

 000110001000 */

 000011010000 */

 000011010000 */

 000001100000 */

 000001100000 */

 000001000000 */

 000011000000 */

 000010000000 */

 011110000000 */

 011100000000 */

 000000000000 */

 153 0x99 '.' */

 000000000000 */

 000110011000 */

 000110011000 */

 000000000000 */

 000011111000 */

 000100011100 */

 001000001100 */

 001000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 001000000100 */

 001100000100 */

 000110001000 */

 000011110000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 154 0x9a '.' */

 000000000000 */

 000110011000 */

 000110011000 */

 111000000011 */

 011000000010 */

 011000000010 */

 011000000010 */

 011000000010 */

 011000000010 */

 011000000010 */

 011000000010 */

 011000000010 */

 011000000010 */

 011100000100 */

 001111111100 */

 000111111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 155 0x9b '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000001100000 */

 000001100000 */

 000111111000 */

 001101101100 */

 001001101100 */

 011001100000 */

 011001100000 */

 011001100000 */

 011001100000 */

 011101100100 */

 001101101100 */

 000111111000 */

 000001100000 */

 000001100000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 156 0x9c '.' */

 000000000000 */

 000000000000 */

 000011111000 */

 000111001100 */

 000110001100 */

 000110000000 */

 000110000000 */

 000110000000 */

 011111100000 */

 011111100000 */

 000110000000 */

 000110000000 */

 000110000000 */

 000110000000 */

 001111100010 */

 011111111110 */

 011000011100 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 157 0x9d '.' */

 000000000000 */

 000000000000 */

 011000000110 */

 011000000110 */

 001100001100 */

 000110011000 */

 000110011000 */

 000011110000 */

 000001100000 */

 000111111000 */

 000001100000 */

 000111111000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 158 0x9e '.' */

 000000000000 */

 011111111000 */

 001100001100 */

 001100000110 */

 001100000110 */

 001100000110 */

 001100001100 */

 001101111000 */

 001100000000 */

 001100110000 */

 001101111000 */

 001100110000 */

 001100110000 */

 001100110011 */

 001100011110 */

 011110001100 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 159 0x9f '.' */

 000000000000 */

 000000001100 */

 000000011110 */

 000000110011 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 001111111110 */

 011111111100 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 110011000000 */

 011110000000 */

 001100000000 */

 000000000000 */

 160 0xa0 '.' */

 000000000000 */

 000000000000 */

 000000011000 */

 000000110000 */

 000001100000 */

 000000000000 */

 000011111000 */

 000110001100 */

 000100001100 */

 000000111100 */

 000111001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001110011100 */

 000111101110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 161 0xa1 '.' */

 000000000000 */

 000000000000 */

 000000011000 */

 000000110000 */

 000001100000 */

 000000000000 */

 000111100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000111111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 162 0xa2 '.' */

 000000000000 */

 000000000000 */

 000000011000 */

 000000110000 */

 000001100000 */

 000000000000 */

 000011111000 */

 000100011100 */

 001000001110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011000000110 */

 011100000100 */

 001110001000 */

 000111110000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 163 0xa3 '.' */

 000000000000 */

 000000000000 */

 000000011000 */

 000000110000 */

 000001100000 */

 000000000000 */

 011110011110 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001110011100 */

 000111100110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 164 0xa4 '.' */

 000000000000 */

 000111000100 */

 001111111100 */

 001000111000 */

 000000000000 */

 000000000000 */

 001001111000 */

 011110011100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 011110011110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 165 0xa5 '.' */

 000000000000 */

 000111000100 */

 001111111100 */

 001000111000 */

 110000000111 */

 011000000010 */

 011100000010 */

 011110000010 */

 010111000010 */

 010011100010 */

 010001110010 */

 010000111010 */

 010000011110 */

 010000001110 */

 010000000110 */

 111000000011 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 166 0xa6 '.' */

 000000000000 */

 000000000000 */

 000111110000 */

 001100011000 */

 000000011000 */

 000001111000 */

 000110011000 */

 001100011000 */

 001100011000 */

 001100111000 */

 000111011100 */

 000000000000 */

 001111111100 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 167 0xa7 '.' */

 000000000000 */

 000000000000 */

 000001110000 */

 000110011000 */

 000100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001000 */

 000110011000 */

 000011100000 */

 000000000000 */

 001111111100 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 168 0xa8 '.' */

 000000000000 */

 000000110000 */

 000000110000 */

 000000000000 */

 000000000000 */

 000000110000 */

 000000110000 */

 000001100000 */

 000011000000 */

 000110000000 */

 001100000000 */

 001100000000 */

 001100000100 */

 001110011100 */

 000111111000 */

 000011110000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 169 0xa9 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 001111111100 */

 001111111100 */

 001100000000 */

 001100000000 */

 001100000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 170 0xaa '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 001111111100 */

 001111111100 */

 000000001100 */

 000000001100 */

 000000001100 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 171 0xab '.' */

 000000000000 */

 000000000000 */

 000100000000 */

 001100000000 */

 000100000000 */

 000100000100 */

 000100001000 */

 000100010000 */

 001110100000 */

 000001011100 */

 000010100010 */

 000100000010 */

 001000001100 */

 010000010000 */

 000000100000 */

 000000111110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 172 0xac '.' */

 000000000000 */

 000000000000 */

 000100000000 */

 001100000000 */

 000100000000 */

 000100000100 */

 000100001000 */

 000100010000 */

 001110100100 */

 000001001100 */

 000010010100 */

 000100100100 */

 001001000100 */

 010001111110 */

 000000000100 */

 000000000100 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 173 0xad '.' */

 000000000000 */

 000001100000 */

 000001100000 */

 000000000000 */

 000000000000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 174 0xae '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000001100110 */

 000011001100 */

 000110011000 */

 001100110000 */

 011001100000 */

 001100110000 */

 000110011000 */

 000011001100 */

 000001100110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 175 0xaf '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 011001100000 */

 001100110000 */

 000110011000 */

 000011001100 */

 000001100110 */

 000011001100 */

 000110011000 */

 001100110000 */

 011001100000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 176 0xb0 '.' */

 000011000011 */

 000010000010 */

 011000011000 */

 001000001000 */

 000011000011 */

 000010000010 */

 011000011000 */

 001000001000 */

 000011000011 */

 000010000010 */

 011000011000 */

 001000001000 */

 000011000011 */

 000010000010 */

 011000011000 */

 001000001000 */

 000011000011 */

 000010000010 */

 011000011000 */

 001000001000 */

 000011000011 */

 000010000010 */

 177 0xb1 '.' */

 011101110111 */

 001000100010 */

 100010001000 */

 110111011101 */

 100010001000 */

 001000100010 */

 011101110111 */

 001000100010 */

 100010001000 */

 110111011101 */

 100010001000 */

 001000100010 */

 011101110111 */

 001000100010 */

 100010001000 */

 110111011101 */

 100010001000 */

 001000100010 */

 011101110111 */

 001000100010 */

 100010001000 */

 110111011101 */

 178 0xb2 '.' */

 111100111100 */

 111101111101 */

 100111100111 */

 110111110111 */

 111100111100 */

 111101111101 */

 100111100111 */

 110111110111 */

 111100111100 */

 111101111101 */

 100111100111 */

 110111110111 */

 111100111100 */

 111101111101 */

 100111100111 */

 110111110111 */

 111100111100 */

 111101111101 */

 100111100111 */

 110111110111 */

 111100111100 */

 111101111101 */

 179 0xb3 '.' */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 180 0xb4 '.' */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 111111100000 */

 111111100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 181 0xb5 '.' */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 111111100000 */

 111111100000 */

 000001100000 */

 111111100000 */

 111111100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 182 0xb6 '.' */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 111111011000 */

 111111011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 183 0xb7 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 111111111000 */

 111111111000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 184 0xb8 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 111111100000 */

 111111100000 */

 000001100000 */

 111111100000 */

 111111100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 185 0xb9 '.' */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 111111011000 */

 111111011000 */

 000000011000 */

 111111011000 */

 111111011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 186 0xba '.' */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 187 0xbb '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 111111111000 */

 111111111000 */

 000000011000 */

 111111011000 */

 111111011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 188 0xbc '.' */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 111111011000 */

 111111011000 */

 000000011000 */

 111111111000 */

 111111111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 189 0xbd '.' */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 111111111000 */

 111111111000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 190 0xbe '.' */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 111111100000 */

 111111100000 */

 000001100000 */

 111111100000 */

 111111100000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 191 0xbf '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 111111100000 */

 111111100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 192 0xc0 '.' */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001111111 */

 000001111111 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 193 0xc1 '.' */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 111111111111 */

 111111111111 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 194 0xc2 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 111111111111 */

 111111111111 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 195 0xc3 '.' */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001111111 */

 000001111111 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 196 0xc4 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 111111111111 */

 111111111111 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 197 0xc5 '.' */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 111111111111 */

 111111111111 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 198 0xc6 '.' */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001111111 */

 000001111111 */

 000001100000 */

 000001111111 */

 000001111111 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 199 0xc7 '.' */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011111 */

 000011011111 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 200 0xc8 '.' */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011111 */

 000011011111 */

 000011000000 */

 000011111111 */

 000011111111 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 201 0xc9 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000011111111 */

 000011111111 */

 000011000000 */

 000011011111 */

 000011011111 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 202 0xca '.' */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 111111011111 */

 111111011111 */

 000000000000 */

 111111111111 */

 111111111111 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 203 0xcb '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 111111111111 */

 111111111111 */

 000000000000 */

 111111011111 */

 111111011111 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 204 0xcc '.' */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011111 */

 000011011111 */

 000011000000 */

 000011011111 */

 000011011111 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 205 0xcd '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 111111111111 */

 111111111111 */

 000000000000 */

 111111111111 */

 111111111111 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 206 0xce '.' */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 111111011111 */

 111111011111 */

 000000000000 */

 111111011111 */

 111111011111 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 207 0xcf '.' */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 111111111111 */

 111111111111 */

 000000000000 */

 111111111111 */

 111111111111 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 208 0xd0 '.' */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 111111111111 */

 111111111111 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 209 0xd1 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 111111111111 */

 111111111111 */

 000000000000 */

 111111111111 */

 111111111111 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 210 0xd2 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 111111111111 */

 111111111111 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 211 0xd3 '.' */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011111111 */

 000011111111 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 212 0xd4 '.' */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001111111 */

 000001111111 */

 000001100000 */

 000001111111 */

 000001111111 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 213 0xd5 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000001111111 */

 000001111111 */

 000001100000 */

 000001111111 */

 000001111111 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 214 0xd6 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000011111111 */

 000011111111 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 215 0xd7 '.' */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 111111111111 */

 111111111111 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 000011011000 */

 216 0xd8 '.' */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 111111111111 */

 111111111111 */

 000001100000 */

 111111111111 */

 111111111111 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 217 0xd9 '.' */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 111111100000 */

 111111100000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 218 0xda '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000001111111 */

 000001111111 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 219 0xdb '.' */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 220 0xdc '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 221 0xdd '.' */

 111111000000 */

 111111000000 */

 111111000000 */

 111111000000 */

 111111000000 */

 111111000000 */

 111111000000 */

 111111000000 */

 111111000000 */

 111111000000 */

 111111000000 */

 111111000000 */

 111111000000 */

 111111000000 */

 111111000000 */

 111111000000 */

 111111000000 */

 111111000000 */

 111111000000 */

 111111000000 */

 111111000000 */

 111111000000 */

 222 0xde '.' */

 000000111111 */

 000000111111 */

 000000111111 */

 000000111111 */

 000000111111 */

 000000111111 */

 000000111111 */

 000000111111 */

 000000111111 */

 000000111111 */

 000000111111 */

 000000111111 */

 000000111111 */

 000000111111 */

 000000111111 */

 000000111111 */

 000000111111 */

 000000111111 */

 000000111111 */

 000000111111 */

 000000111111 */

 000000111111 */

 223 0xdf '.' */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 111111111111 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 224 0xe0 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000011110110 */

 000100111110 */

 001000011100 */

 011000001100 */

 011000001100 */

 011000001100 */

 011000001100 */

 011100001000 */

 001110011100 */

 000111110110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 225 0xe1 '.' */

 000000000000 */

 000000000000 */

 000011110000 */

 000110011000 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100011000 */

 001101111000 */

 001100011000 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100011000 */

 011101110000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 226 0xe2 '.' */

 000000000000 */

 000000000000 */

 001111111110 */

 001111111110 */

 001100000110 */

 001100000110 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000000 */

 001100000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 227 0xe3 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 011111111110 */

 011111111110 */

 000110011000 */

 000110011000 */

 000110011000 */

 000110011000 */

 000110011000 */

 000110011000 */

 000110011000 */

 000110011000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 228 0xe4 '.' */

 000000000000 */

 011111111110 */

 011111111110 */

 011000000110 */

 001100000110 */

 001100000000 */

 000110000000 */

 000110000000 */

 000011000000 */

 000110000000 */

 000110000000 */

 001100000000 */

 001100000110 */

 011000000110 */

 011111111110 */

 011111111110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 229 0xe5 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000001111110 */

 000011111110 */

 000100111000 */

 001000011100 */

 011000001100 */

 011000001100 */

 011000001100 */

 011000001100 */

 011100001000 */

 001110010000 */

 000111100000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 230 0xe6 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001110011100 */

 001101101110 */

 001100000000 */

 001100000000 */

 011000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 231 0xe7 '.' */

 000000000000 */

 000110011000 */

 001111111100 */

 011001100110 */

 011001100110 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 232 0xe8 '.' */

 000000000000 */

 000000000000 */

 011111111110 */

 011111111110 */

 000001100000 */

 000001100000 */

 000011110000 */

 000110011000 */

 001100001100 */

 001100001100 */

 000110011000 */

 000011110000 */

 000001100000 */

 000001100000 */

 011111111110 */

 011111111110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 233 0xe9 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000011110000 */

 000111111000 */

 001100001100 */

 011000000110 */

 011000000110 */

 011111111110 */

 011111111110 */

 011000000110 */

 011000000110 */

 001100001100 */

 000111111000 */

 000011110000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 234 0xea '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000111110000 */

 001100011000 */

 001100001100 */

 001100001100 */

 011000000110 */

 011000000110 */

 001100001100 */

 001100001100 */

 000110011000 */

 000110011000 */

 110110011011 */

 011110011110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 235 0xeb '.' */

 000000000000 */

 000001111000 */

 000011001100 */

 000110000110 */

 000110000000 */

 000011000000 */

 000001100000 */

 000000110000 */

 000011111000 */

 000100011100 */

 001000001110 */

 011000000110 */

 011000000110 */

 011100000100 */

 001110001000 */

 000111110000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 236 0xec '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 001110011100 */

 011011110110 */

 011001100110 */

 110001100011 */

 110001100011 */

 011001100110 */

 011011110110 */

 001110011100 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 237 0xed '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000001100 */

 000000001100 */

 000000011000 */

 000000011000 */

 001110111100 */

 011011110110 */

 011001100110 */

 110001100011 */

 110001100011 */

 011001100110 */

 011011110110 */

 001111011100 */

 000110000000 */

 000110000000 */

 001100000000 */

 001100000000 */

 000000000000 */

 000000000000 */

 238 0xee '.' */

 000000000000 */

 000000011100 */

 000000110000 */

 000001100000 */

 000001100000 */

 000011000000 */

 000011000000 */

 000110000000 */

 000111111100 */

 000110000000 */

 000011000000 */

 000011000000 */

 000001100000 */

 000001100000 */

 000000110000 */

 000000011100 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 239 0xef '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000011110000 */

 000111111000 */

 001110011100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 001100001100 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 240 0xf0 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 011111111110 */

 011111111110 */

 000000000000 */

 000000000000 */

 000000000000 */

 011111111110 */

 011111111110 */

 000000000000 */

 000000000000 */

 000000000000 */

 011111111110 */

 011111111110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 241 0xf1 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 011111111110 */

 011111111110 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000000000000 */

 011111111110 */

 011111111110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 242 0xf2 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 011000000000 */

 001110000000 */

 000011100000 */

 000000111000 */

 000000001110 */

 000000001110 */

 000000111000 */

 000011100000 */

 001110000000 */

 011000000000 */

 000000000000 */

 011111111110 */

 011111111110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 243 0xf3 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000110 */

 000000011100 */

 000001110000 */

 000111000000 */

 011100000000 */

 011100000000 */

 000111000000 */

 000001110000 */

 000000011100 */

 000000000110 */

 000000000000 */

 011111111110 */

 011111111110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 244 0xf4 '.' */

 000000000000 */

 000000111000 */

 000001111100 */

 000011000110 */

 000011000110 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 000011000000 */

 245 0xf5 '.' */

 000000000000 */

 000111000000 */

 001111100000 */

 011000110000 */

 011000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 000000110000 */

 246 0xf6 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000001100000 */

 000001100000 */

 000000000000 */

 000000000000 */

 011111111110 */

 011111111110 */

 000000000000 */

 000000000000 */

 000001100000 */

 000001100000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 247 0xf7 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 001110000000 */

 011011000000 */

 000001100011 */

 000000110110 */

 001110011100 */

 011011000000 */

 000001100011 */

 000000110110 */

 000000011100 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 248 0xf8 '.' */

 000000000000 */

 000011110000 */

 000110011000 */

 000110011000 */

 000110011000 */

 000011110000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 249 0xf9 '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000111000000 */

 001111100000 */

 001111100000 */

 001111100000 */

 000111000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 250 0xfa '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000110000000 */

 001111000000 */

 001111000000 */

 000110000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 251 0xfb '.' */

 000000000000 */

 000001111110 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 000001100000 */

 110001100000 */

 011001100000 */

 001101100000 */

 000111100000 */

 000011100000 */

 000001100000 */

 000000100000 */

 000000000000 */

 252 0xfc '.' */

 000000000000 */

 000000000000 */

 000100111000 */

 001111011100 */

 000110001100 */

 000110001100 */

 000110001100 */

 000110001100 */

 001111011110 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 253 0xfd '.' */

 000000000000 */

 000011110000 */

 000111111000 */

 001100011000 */

 001000011000 */

 000000110000 */

 000001100000 */

 000011000000 */

 000110000100 */

 001111111100 */

 001111111100 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 254 0xfe '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 001111111100 */

 001111111100 */

 001111111100 */

 001111111100 */

 001111111100 */

 001111111100 */

 001111111100 */

 001111111100 */

 001111111100 */

 001111111100 */

 001111111100 */

 001111111100 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 255 0xff '.' */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 000000000000 */

 SPDX-License-Identifier: GPL-2.0

 0 0x00 '^@' */

 000000 */

 000000 */

 000000 */

 000000 */

 000000 */

 000000 */

 000000 */

 000000 */

 1 0x01 '^A' */

 011110 */

 100001 */

 110011 */

 100001 */

 110011 */

 101101 */

 011110 */

 000000 */

 2 0x02 '^B' */

 011110 */

 111111 */

 101101 */

 111111 */

 101101 */

 110011 */

 011110 */

 000000 */

 3 0x03 '^C' */

 000000 */

 001010 */

 011111 */

 011111 */

 001110 */

 000100 */

 000000 */

 000000 */

 4 0x04 '^D' */

 000000 */

 000100 */

 001110 */

 011111 */

 001110 */

 000100 */

 000000 */

 000000 */

 5 0x05 '^E' */

 000000 */

 001110 */

 001110 */

 011011 */

 011011 */

 000100 */

 001110 */

 000000 */

 6 0x06 '^F' */

 000000 */

 000100 */

 001110 */

 011111 */

 011111 */

 000100 */

 001110 */

 000000 */

 7 0x07 '^G' */

 000000 */

 000000 */

 001100 */

 011110 */

 001100 */

 000000 */

 000000 */

 000000 */

 8 0x08 '^H' */

 111111 */

 111111 */

 110011 */

 100001 */

 110011 */

 111111 */

 111111 */

 111111 */

 9 0x09 '^I' */

 000000 */

 001100 */

 010010 */

 100001 */

 010010 */

 001100 */

 000000 */

 000000 */

 10 0x0A '^J' */

 111111 */

 110011 */

 101101 */

 011110 */

 101101 */

 110011 */

 111111 */

 111111 */

 11 0x0B '^K' */

 001111 */

 000101 */

 001000 */

 011110 */

 010001 */

 010001 */

 001110 */

 000000 */

 12 0x0C '^L' */

 001110 */

 010001 */

 010001 */

 001110 */

 000100 */

 001110 */

 000100 */

 000000 */

 13 0x0D '^M' */

 000110 */

 000101 */

 000101 */

 000100 */

 000100 */

 011100 */

 011000 */

 000000 */

 14 0x0E '^N' */

 001111 */

 001001 */

 001111 */

 001001 */

 001001 */

 011011 */

 011011 */

 000000 */

 15 0x0F '^O' */

 000100 */

 010101 */

 001110 */

 011011 */

 001110 */

 010101 */

 000100 */

 000000 */

 16 0x10 '^P' */

 010000 */

 011000 */

 011100 */

 011110 */

 011100 */

 011000 */

 010000 */

 000000 */

 17 0x11 '^Q' */

 000001 */

 000011 */

 000111 */

 001111 */

 000111 */

 000011 */

 000001 */

 000000 */

 18 0x12 '^R' */

 000100 */

 001110 */

 010101 */

 000100 */

 010101 */

 001110 */

 000100 */

 000000 */

 19 0x13 '^S' */

 010010 */

 010010 */

 010010 */

 010010 */

 010010 */

 000000 */

 010010 */

 000000 */

 20 0x14 '^T' */

 001111 */

 010101 */

 010101 */

 001111 */

 000101 */

 000101 */

 000101 */

 000000 */

 21 0x15 '^U' */

 001110 */

 010001 */

 001100 */

 001010 */

 000101 */

 000011 */

 010001 */

 001110 */

 22 0x16 '^V' */

 000000 */

 000000 */

 000000 */

 000000 */

 111110 */

 111110 */

 111110 */

 000000 */

 23 0x17 '^W' */

 000100 */

 001110 */

 010101 */

 000100 */

 010101 */

 001110 */

 000100 */

 011111 */

 24 0x18 '^X' */

 000100 */

 001110 */

 010101 */

 000100 */

 000100 */

 000100 */

 000100 */

 000000 */

 25 0x19 '^Y' */

 000100 */

 000100 */

 000100 */

 000100 */

 010101 */

 001110 */

 000100 */

 000000 */

 26 0x1A '^Z' */

 000000 */

 000100 */

 000010 */

 011111 */

 000010 */

 000100 */

 000000 */

 000000 */

 27 0x1B '^[' */

 000000 */

 000100 */

 001000 */

 011111 */

 001000 */

 000100 */

 000000 */

 000000 */

 28 0x1C '^\' */

 000000 */

 000000 */

 000000 */

 010000 */

 010000 */

 010000 */

 011110 */

 000000 */

 29 0x1D '^]' */

 000000 */

 010010 */

 100001 */

 111111 */

 100001 */

 010010 */

 000000 */

 000000 */

 30 0x1E '^^' */

 000000 */

 000100 */

 000100 */

 001110 */

 001110 */

 011111 */

 011111 */

 000000 */

 31 0x1F '^_' */

 000000 */

 011111 */

 011111 */

 001110 */

 001110 */

 000100 */

 000100 */

 000000 */

 32 0x20 ' ' */

 000000 */

 000000 */

 000000 */

 000000 */

 000000 */

 000000 */

 000000 */

 000000 */

 33 0x21 '!' */

 000100 */

 000100 */

 000100 */

 000100 */

 000100 */

 000000 */

 000100 */

 000000 */

 34 0x22 '"' */

 001010 */

 001010 */

 000000 */

 000000 */

 000000 */

 000000 */

 000000 */

 000000 */

 35 0x23 '#' */

 000000 */

 001010 */

 011111 */

 001010 */

 001010 */

 011111 */

 001010 */

 000000 */

 36 0x24 '$' */

 000000 */

 001000 */

 010000 */

 001000 */

 000000 */

 011000 */

 001000 */

 000000 */

 37 0x25 '%' */

 011001 */

 011001 */

 000010 */

 000100 */

 001000 */

 010011 */

 010011 */

 000000 */

 38 0x26 '&' */

 001100 */

 010010 */

 010100 */

 001000 */

 010101 */

 010010 */

 001101 */

 000000 */

 39 0x27 ''' */

 000100 */

 000100 */

 000000 */

 000000 */

 000000 */

 000000 */

 000000 */

 000000 */

 40 0x28 '(' */

 000010 */

 000100 */

 001000 */

 001000 */

 001000 */

 000100 */

 000010 */

 000000 */

 41 0x29 ')' */

 001000 */

 000100 */

 000010 */

 000010 */

 000010 */

 000100 */

 001000 */

 000000 */

 42 0x2A '*' */

 000100 */

 010101 */

 001110 */

 010101 */

 000100 */

 000000 */

 000000 */

 000000 */

 43 0x2B '+' */

 000000 */

 000100 */

 000100 */

 011111 */

 000100 */

 000100 */

 000000 */

 000000 */

 44 0x2C ',' */

 000000 */

 000000 */

 000000 */

 000000 */

 000000 */

 001100 */

 001100 */

 001000 */

 45 0x2D '-' */

 000000 */

 000000 */

 000000 */

 011111 */

 000000 */

 000000 */

 000000 */

 000000 */

 46 0x2E '.' */

 000000 */

 000000 */

 000000 */

 000000 */

 000000 */

 000110 */

 000110 */

 000000 */

 47 0x2F '/' */

 000001 */

 000010 */

 000010 */

 000100 */

 000100 */

 001000 */

 001000 */

 010000 */

 48 0x30 '0' */

 001110 */

 010001 */

 010011 */

 010101 */

 011001 */

 010001 */

 001110 */

 000000 */

 49 0x31 '1' */

 000100 */

 001100 */

 010100 */

 000100 */

 000100 */

 000100 */

 011111 */

 000000 */

 50 0x32 '2' */

 001110 */

 010001 */

 000001 */

 000010 */

 000100 */

 001000 */

 011111 */

 000000 */

 51 0x33 '3' */

 001110 */

 010001 */

 000001 */

 000110 */

 000001 */

 010001 */

 001110 */

 000000 */

 52 0x34 '4' */

 000010 */

 000110 */

 001010 */

 010010 */

 011111 */

 000010 */

 000010 */

 000000 */

 53 0x35 '5' */

 011111 */

 010000 */

 011110 */

 000001 */

 000001 */

 010001 */

 001110 */

 000000 */

 54 0x36 '6' */

 000110 */

 001000 */

 010000 */

 011110 */

 010001 */

 010001 */

 001110 */

 000000 */

 55 0x37 '7' */

 011111 */

 000001 */

 000001 */

 000010 */

 000100 */

 000100 */

 000100 */

 000000 */

 56 0x38 '8' */

 001110 */

 010001 */

 010001 */

 001110 */

 010001 */

 010001 */

 001110 */

 000000 */

 57 0x39 '9' */

 001110 */

 010001 */

 010001 */

 001111 */

 000001 */

 000010 */

 001100 */

 000000 */

 58 0x3A ':' */

 000000 */

 000000 */

 000110 */

 000110 */

 000000 */

 000110 */

 000110 */

 000000 */

 59 0x3B ';' */

 000000 */

 000000 */

 001100 */

 001100 */

 000000 */

 001100 */

 001100 */

 001000 */

 60 0x3C '<' */

 000001 */

 000010 */

 000100 */

 001000 */

 000100 */

 000010 */

 000001 */

 000000 */

 61 0x3D '=' */

 000000 */

 000000 */

 011111 */

 000000 */

 011111 */

 000000 */

 000000 */

 000000 */

 62 0x3E '>' */

 001000 */

 000100 */

 000010 */

 000001 */

 000010 */

 000100 */

 001000 */

 000000 */

 63 0x3F '?' */

 001110 */

 010001 */

 000001 */

 000010 */

 000100 */

 000000 */

 000100 */

 000000 */

 64 0x40 '@' */

 001110 */

 010001 */

 010111 */

 010101 */

 010111 */

 010000 */

 001110 */

 000000 */

 65 0x41 'A' */

 000100 */

 001010 */

 010001 */

 010001 */

 011111 */

 010001 */

 010001 */

 000000 */

 66 0x42 'B' */

 011110 */

 001001 */

 001001 */

 001110 */

 001001 */

 001001 */

 011110 */

 000000 */

 67 0x43 'C' */

 001110 */

 010001 */

 010000 */

 010000 */

 010000 */

 010001 */

 001110 */

 000000 */

 68 0x44 'D' */

 011110 */

 001001 */

 001001 */

 001001 */

 001001 */

 001001 */

 011110 */

 000000 */

 69 0x45 'E' */

 011111 */

 010000 */

 010000 */

 011110 */

 010000 */

 010000 */

 011111 */

 000000 */

 70 0x46 'F' */

 011111 */

 010000 */

 010000 */

 011110 */

 010000 */

 010000 */

 010000 */

 000000 */

 71 0x47 'G' */

 001110 */

 010001 */

 010000 */

 010111 */

 010001 */

 010001 */

 001110 */

 000000 */

 72 0x48 'H' */

 010001 */

 010001 */

 010001 */

 011111 */

 010001 */

 010001 */

 010001 */

 000000 */

 73 0x49 'I' */

 001110 */

 000100 */

 000100 */

 000100 */

 000100 */

 000100 */

 001110 */

 000000 */

 74 0x4A 'J' */

 000111 */

 000010 */

 000010 */

 000010 */

 010010 */

 010010 */

 001100 */

 000000 */

 75 0x4B 'K' */

 010001 */

 010010 */

 010100 */

 011000 */

 010100 */

 010010 */

 010001 */

 000000 */

 76 0x4C 'L' */

 010000 */

 010000 */

 010000 */

 010000 */

 010000 */

 010000 */

 011111 */

 000000 */

 77 0x4D 'M' */

 010001 */

 011011 */

 010101 */

 010101 */

 010001 */

 010001 */

 010001 */

 000000 */

 78 0x4E 'N' */

 010001 */

 011001 */

 010101 */

 010011 */

 010001 */

 010001 */

 010001 */

 000000 */

 79 0x4F 'O' */

 001110 */

 010001 */

 010001 */

 010001 */

 010001 */

 010001 */

 001110 */

 000000 */

 80 0x50 'P' */

 011110 */

 010001 */

 010001 */

 011110 */

 010000 */

 010000 */

 010000 */

 000000 */

 81 0x51 'Q' */

 001110 */

 010001 */

 010001 */

 010001 */

 010101 */

 010010 */

 001101 */

 000000 */

 82 0x52 'R' */

 011110 */

 010001 */

 010001 */

 011110 */

 010100 */

 010010 */

 010001 */

 000000 */

 83 0x53 'S' */

 001110 */

 010001 */

 010000 */

 001110 */

 000001 */

 010001 */

 001110 */

 000000 */

 84 0x54 'T' */

 011111 */

 000100 */

 000100 */

 000100 */

 000100 */

 000100 */

 000100 */

 000000 */

 85 0x55 'U' */

 010001 */

 010001 */

 010001 */

 010001 */

 010001 */

 010001 */

 001110 */

 000000 */

 86 0x56 'V' */

 010001 */

 010001 */

 010001 */

 010001 */

 010001 */

 001010 */

 000100 */

 000000 */

 87 0x57 'W' */

 010001 */

 010001 */

 010001 */

 010101 */

 010101 */

 011011 */

 010001 */

 000000 */

 88 0x58 'X' */

 010001 */

 010001 */

 001010 */

 000100 */

 001010 */

 010001 */

 010001 */

 000000 */

 89 0x59 'Y' */

 010001 */

 010001 */

 010001 */

 001010 */

 000100 */

 000100 */

 000100 */

 000000 */

 90 0x5A 'Z' */

 011111 */

 000001 */

 000010 */

 000100 */

 001000 */

 010000 */

 011111 */

 000000 */

 91 0x5B '[' */

 000110 */

 000100 */

 000100 */

 000100 */

 000100 */

 000100 */

 000110 */

 000000 */

 92 0x5C '\' */

 010000 */

 001000 */

 001000 */

 000100 */

 000100 */

 000010 */

 000010 */

 000001 */

 93 0x5D ']' */

 001100 */

 000100 */

 000100 */

 000100 */

 000100 */

 000100 */

 001100 */

 000000 */

 94 0x5E '^' */

 000100 */

 001010 */

 010001 */

 000000 */

 000000 */

 000000 */

 000000 */

 000000 */

 95 0x5F '_' */

 000000 */

 000000 */

 000000 */

 000000 */

 000000 */

 000000 */

 000000 */

 011111 */

 96 0x60 '`' */

 001000 */

 000100 */

 000010 */

 000000 */

 000000 */

 000000 */

 000000 */

 000000 */

 97 0x61 'a' */

 000000 */

 000000 */

 001110 */

 000001 */

 001111 */

 010001 */

 001111 */

 000000 */

 98 0x62 'b' */

 010000 */

 010000 */

 010110 */

 011001 */

 010001 */

 011001 */

 010110 */

 000000 */

 99 0x63 'c' */

 000000 */

 000000 */

 001110 */

 010001 */

 010000 */

 010001 */

 001110 */

 000000 */

 100 0x64 'd' */

 000001 */

 000001 */

 001101 */

 010011 */

 010001 */

 010011 */

 001101 */

 000000 */

 101 0x65 'e' */

 000000 */

 000000 */

 001110 */

 010001 */

 011111 */

 010000 */

 001111 */

 000000 */

 102 0x66 'f' */

 000011 */

 000100 */

 000100 */

 001110 */

 000100 */

 000100 */

 000100 */

 000000 */

 103 0x67 'g' */

 000000 */

 001101 */

 010011 */

 010001 */

 010011 */

 001101 */

 000001 */

 001110 */

 104 0x68 'h' */

 010000 */

 010000 */

 011110 */

 010001 */

 010001 */

 010001 */

 010001 */

 000000 */

 105 0x69 'i' */

 000100 */

 000000 */

 001100 */

 000100 */

 000100 */

 000100 */

 001110 */

 000000 */

 106 0x6A 'j' */

 000100 */

 000000 */

 001100 */

 000100 */

 000100 */

 000100 */

 000100 */

 011000 */

 107 0x6B 'k' */

 010000 */

 010000 */

 010010 */

 010100 */

 011100 */

 010010 */

 010001 */

 000000 */

 108 0x6C 'l' */

 001100 */

 000100 */

 000100 */

 000100 */

 000100 */

 000100 */

 001110 */

 000000 */

 109 0x6D 'm' */

 000000 */

 000000 */

 011010 */

 010101 */

 010101 */

 010101 */

 010101 */

 000000 */

 110 0x6E 'n' */

 000000 */

 000000 */

 010110 */

 011001 */

 010001 */

 010001 */

 010001 */

 000000 */

 111 0x6F 'o' */

 000000 */

 000000 */

 001110 */

 010001 */

 010001 */

 010001 */

 001110 */

 000000 */

 112 0x70 'p' */

 000000 */

 000000 */

 011110 */

 010001 */

 011001 */

 010110 */

 010000 */

 010000 */

 113 0x71 'q' */

 000000 */

 000000 */

 001111 */

 010001 */

 010011 */

 001101 */

 000001 */

 000001 */

 114 0x72 'r' */

 000000 */

 000000 */

 010110 */

 011001 */

 010000 */

 010000 */

 010000 */

 000000 */

 115 0x73 's' */

 000000 */

 000000 */

 001111 */

 010000 */

 001110 */

 000001 */

 011110 */

 000000 */

 116 0x74 't' */

 000100 */

 000100 */

 001110 */

 000100 */

 000100 */

 000100 */

 000011 */

 000000 */

 117 0x75 'u' */

 000000 */

 000000 */

 010001 */

 010001 */

 010001 */

 010011 */

 001101 */

 000000 */

 118 0x76 'v' */

 000000 */

 000000 */

 010001 */

 010001 */

 010001 */

 001010 */

 000100 */

 000000 */

 119 0x77 'w' */

 000000 */

 000000 */

 010101 */

 010101 */

 010101 */

 010101 */

 001010 */

 000000 */

 120 0x78 'x' */

 000000 */

 000000 */

 010001 */

 001010 */

 000100 */

 001010 */

 010001 */

 000000 */

 121 0x79 'y' */

 000000 */

 000000 */

 010001 */

 010001 */

 010001 */

 001111 */

 000001 */

 001110 */

 122 0x7A 'z' */

 000000 */

 000000 */

 011111 */

 000010 */

 000100 */

 001000 */

 011111 */

 000000 */

 123 0x7B '{' */

 000010 */

 000100 */

 000100 */

 001000 */

 000100 */

 000100 */

 000010 */

 000000 */

 124 0x7C '|' */

 000100 */

 000100 */

 000000 */

 000100 */

 000100 */

 000100 */

 000100 */

 000000 */

 125 0x7D '}' */

 001000 */

 000100 */

 000100 */

 000010 */

 000100 */

 000100 */

 001000 */

 000000 */

 126 0x7E '~' */

 000000 */

 000000 */

 000000 */

 001000 */

 010101 */

 000010 */

 000000 */

 000000 */

 127 0x7F '' */

 000000 */

 000000 */

 000100 */

 001010 */

 010001 */

 010001 */

 011111 */

 000000 */

 128 0x80 '\200' */

 000000 */

 001110 */

 010001 */

 010000 */

 010001 */

 001110 */

 000100 */

 001000 */

 129 0x81 '\201' */

 000000 */

 001010 */

 000000 */

 010001 */

 010001 */

 010011 */

 001101 */

 000000 */

 130 0x82 '\202' */

 000110 */

 000000 */

 001110 */

 010001 */

 011111 */

 010000 */

 001111 */

 000000 */

 131 0x83 '\203' */

 000110 */

 000000 */

 001110 */

 000001 */

 001111 */

 010001 */

 001111 */

 000000 */

 132 0x84 '\204' */

 001010 */

 000000 */

 001110 */

 000001 */

 001111 */

 010001 */

 001111 */

 000000 */

 133 0x85 '\205' */

 000110 */

 000000 */

 001110 */

 000001 */

 001111 */

 010001 */

 001111 */

 000000 */

 134 0x86 '\206' */

 001111 */

 000110 */

 001110 */

 000001 */

 001111 */

 010001 */

 001111 */

 000000 */

 135 0x87 '\207' */

 000000 */

 000000 */

 001110 */

 010001 */

 010000 */

 010001 */

 001110 */

 000100 */

 136 0x88 '\210' */

 000110 */

 000000 */

 001110 */

 010001 */

 011111 */

 010000 */

 001111 */

 000000 */

 137 0x89 '\211' */

 001010 */

 000000 */

 001110 */

 010001 */

 011111 */

 010000 */

 001111 */

 000000 */

 138 0x8A '\212' */

 000110 */

 000000 */

 001110 */

 010001 */

 011111 */

 010000 */

 001111 */

 000000 */

 139 0x8B '\213' */

 001010 */

 000000 */

 001100 */

 000100 */

 000100 */

 000100 */

 001110 */

 000000 */

 140 0x8C '\214' */

 000110 */

 000000 */

 001100 */

 000100 */

 000100 */

 000100 */

 001110 */

 000000 */

 141 0x8D '\215' */

 000110 */

 000000 */

 001100 */

 000100 */

 000100 */

 000100 */

 001110 */

 000000 */

 142 0x8E '\216' */

 010001 */

 000100 */

 001010 */

 010001 */

 011111 */

 010001 */

 010001 */

 000000 */

 143 0x8F '\217' */

 001100 */

 010010 */

 001110 */

 010001 */

 011111 */

 010001 */

 010001 */

 000000 */

 144 0x90 '\220' */

 000100 */

 011111 */

 010000 */

 011110 */

 010000 */

 010000 */

 011111 */

 000000 */

 145 0x91 '\221' */

 000000 */

 000000 */

 011110 */

 000101 */

 011111 */

 010100 */

 001111 */

 000000 */

 146 0x92 '\222' */

 001111 */

 010100 */

 010100 */

 011110 */

 010100 */

 010100 */

 010111 */

 000000 */

 147 0x93 '\223' */

 000110 */

 000000 */

 001110 */

 010001 */

 010001 */

 010001 */

 001110 */

 000000 */

 148 0x94 '\224' */

 001010 */

 000000 */

 001110 */

 010001 */

 010001 */

 010001 */

 001110 */

 000000 */

 149 0x95 '\225' */

 000110 */

 000000 */

 001110 */

 010001 */

 010001 */

 010001 */

 001110 */

 000000 */

 150 0x96 '\226' */

 000100 */

 001010 */

 000000 */

 010001 */

 010001 */

 010011 */

 001101 */

 000000 */

 151 0x97 '\227' */

 001000 */

 000100 */

 000000 */

 010001 */

 010001 */

 010011 */

 001101 */

 000000 */

 152 0x98 '\230' */

 001010 */

 000000 */

 010001 */

 010001 */

 010001 */

 001111 */

 000001 */

 001110 */

 153 0x99 '\231' */

 100001 */

 001110 */

 010001 */

 010001 */

 010001 */

 010001 */

 001110 */

 000000 */

 154 0x9A '\232' */

 100010 */

 010001 */

 010001 */

 010001 */

 010001 */

 010001 */

 001110 */

 000000 */

 155 0x9B '\233' */

 000100 */

 001110 */

 010101 */

 010100 */

 010101 */

 001110 */

 000100 */

 000000 */

 156 0x9C '\234' */

 001100 */

 010010 */

 010000 */

 011100 */

 010000 */

 010001 */

 011110 */

 000000 */

 157 0x9D '\235' */

 010001 */

 001010 */

 011111 */

 000100 */

 011111 */

 000100 */

 000100 */

 000000 */

 158 0x9E '\236' */

 011100 */

 010010 */

 011100 */

 010010 */

 010111 */

 010010 */

 010001 */

 000000 */

 159 0x9F '\237' */

 000011 */

 000100 */

 000100 */

 001110 */

 000100 */

 000100 */

 011000 */

 000000 */

 160 0xA0 '\240' */

 000110 */

 000000 */

 001110 */

 000001 */

 001111 */

 010001 */

 001111 */

 000000 */

 161 0xA1 '\241' */

 000010 */

 000100 */

 000000 */

 001100 */

 000100 */

 000100 */

 001110 */

 000000 */

 162 0xA2 '\242' */

 000010 */

 000100 */

 000000 */

 001110 */

 010001 */

 010001 */

 001110 */

 000000 */

 163 0xA3 '\243' */

 000010 */

 000100 */

 000000 */

 010001 */

 010001 */

 010011 */

 001101 */

 000000 */

 164 0xA4 '\244' */

 001101 */

 010110 */

 000000 */

 010110 */

 011001 */

 010001 */

 010001 */

 000000 */

 165 0xA5 '\245' */

 010110 */

 010001 */

 011001 */

 010101 */

 010011 */

 010001 */

 010001 */

 000000 */

 166 0xA6 '\246' */

 001110 */

 000001 */

 001111 */

 010001 */

 001111 */

 000000 */

 011111 */

 000000 */

 167 0xA7 '\247' */

 001110 */

 010001 */

 010001 */

 010001 */

 001110 */

 000000 */

 011111 */

 000000 */

 168 0xA8 '\250' */

 000100 */

 000000 */

 000100 */

 001000 */

 010000 */

 010001 */

 001110 */

 000000 */

 169 0xA9 '\251' */

 000000 */

 000000 */

 000000 */

 011111 */

 010000 */

 010000 */

 000000 */

 000000 */

 170 0xAA '\252' */

 000000 */

 000000 */

 000000 */

 011111 */

 000001 */

 000001 */

 000000 */

 000000 */

 171 0xAB '\253' */

 001000 */

 001001 */

 001010 */

 000100 */

 001010 */

 010001 */

 000010 */

 000111 */

 172 0xAC '\254' */

 001000 */

 001001 */

 001010 */

 000100 */

 001010 */

 010110 */

 001111 */

 000010 */

 173 0xAD '\255' */

 000100 */

 000000 */

 000100 */

 000100 */

 000100 */

 000100 */

 000100 */

 000000 */

 174 0xAE '\256' */

 000000 */

 000000 */

 001001 */

 010010 */

 100100 */

 010010 */

 001001 */

 000000 */

 175 0xAF '\257' */

 000000 */

 000000 */

 100100 */

 010010 */

 001001 */

 010010 */

 100100 */

 000000 */

 176 0xB0 '\260' */

 000100 */

 010001 */

 000100 */

 010001 */

 000100 */

 010001 */

 000100 */

 010001 */

 177 0xB1 '\261' */

 101010 */

 010101 */

 101010 */

 010101 */

 101010 */

 010101 */

 101010 */

 010101 */

 178 0xB2 '\262' */

 110111 */

 011101 */

 110111 */

 011101 */

 110111 */

 011101 */

 110111 */

 011101 */

 179 0xB3 '\263' */

 000100 */

 000100 */

 000100 */

 000100 */

 000100 */

 000100 */

 000100 */

 000100 */

 180 0xB4 '\264' */

 000100 */

 000100 */

 000100 */

 111100 */

 000100 */

 000100 */

 000100 */

 000100 */

 181 0xB5 '\265' */

 000100 */

 000100 */

 111100 */

 000100 */

 111100 */

 000100 */

 000100 */

 000100 */

 182 0xB6 '\266' */

 001010 */

 001010 */

 001010 */

 111010 */

 001010 */

 001010 */

 001010 */

 001010 */

 183 0xB7 '\267' */

 000000 */

 000000 */

 000000 */

 111110 */

 001010 */

 001010 */

 001010 */

 001010 */

 184 0xB8 '\270' */

 000000 */

 000000 */

 111100 */

 000100 */

 111100 */

 000100 */

 000100 */

 000100 */

 185 0xB9 '\271' */

 001010 */

 001010 */

 111010 */

 000010 */

 111010 */

 001010 */

 001010 */

 001010 */

 186 0xBA '\272' */

 001010 */

 001010 */

 001010 */

 001010 */

 001010 */

 001010 */

 001010 */

 001010 */

 187 0xBB '\273' */

 000000 */

 000000 */

 111110 */

 000010 */

 111010 */

 001010 */

 001010 */

 001010 */

 188 0xBC '\274' */

 001010 */

 001010 */

 111010 */

 000010 */

 111110 */

 000000 */

 000000 */

 000000 */

 189 0xBD '\275' */

 001010 */

 001010 */

 001010 */

 111110 */

 000000 */

 000000 */

 000000 */

 000000 */

 190 0xBE '\276' */

 000100 */

 000100 */

 111100 */

 000100 */

 111100 */

 000000 */

 000000 */

 000000 */

 191 0xBF '\277' */

 000000 */

 000000 */

 000000 */

 111100 */

 000100 */

 000100 */

 000100 */

 000100 */

 192 0xC0 '\300' */

 000100 */

 000100 */

 000100 */

 000111 */

 000000 */

 000000 */

 000000 */

 000000 */

 193 0xC1 '\301' */

 000100 */

 000100 */

 000100 */

 111111 */

 000000 */

 000000 */

 000000 */

 000000 */

 194 0xC2 '\302' */

 000000 */

 000000 */

 000000 */

 111111 */

 000100 */

 000100 */

 000100 */

 000100 */

 195 0xC3 '\303' */

 000100 */

 000100 */

 000100 */

 000111 */

 000100 */

 000100 */

 000100 */

 000100 */

 196 0xC4 '\304' */

 000000 */

 000000 */

 000000 */

 111111 */

 000000 */

 000000 */

 000000 */

 000000 */

 197 0xC5 '\305' */

 000100 */

 000100 */

 000100 */

 111111 */

 000100 */

 000100 */

 000100 */

 000100 */

 198 0xC6 '\306' */

 000100 */

 000100 */

 000111 */

 000100 */

 000111 */

 000100 */

 000100 */

 000100 */

 199 0xC7 '\307' */

 001010 */

 001010 */

 001010 */

 001011 */

 001010 */

 001010 */

 001010 */

 001010 */

 200 0xC8 '\310' */

 001010 */

 001010 */

 001011 */

 001000 */

 001111 */

 000000 */

 000000 */

 000000 */

 201 0xC9 '\311' */

 000000 */

 000000 */

 001111 */

 001000 */

 001011 */

 001010 */

 001010 */

 001010 */

 202 0xCA '\312' */

 001010 */

 001010 */

 111011 */

 000000 */

 111111 */

 000000 */

 000000 */

 000000 */

 203 0xCB '\313' */

 000000 */

 000000 */

 111111 */

 000000 */

 111011 */

 001010 */

 001010 */

 001010 */

 204 0xCC '\314' */

 001010 */

 001010 */

 001011 */

 001000 */

 001011 */

 001010 */

 001010 */

 001010 */

 205 0xCD '\315' */

 000000 */

 000000 */

 111111 */

 000000 */

 111111 */

 000000 */

 000000 */

 000000 */

 206 0xCE '\316' */

 001010 */

 001010 */

 111011 */

 000000 */

 111011 */

 001010 */

 001010 */

 001010 */

 207 0xCF '\317' */

 000100 */

 000100 */

 111111 */

 000000 */

 111111 */

 000000 */

 000000 */

 000000 */

 208 0xD0 '\320' */

 001010 */

 001010 */

 001010 */

 111111 */

 000000 */

 000000 */

 000000 */

 000000 */

 209 0xD1 '\321' */

 000000 */

 000000 */

 111111 */

 000000 */

 111111 */

 000100 */

 000100 */

 000100 */

 210 0xD2 '\322' */

 000000 */

 000000 */

 000000 */

 111111 */

 001010 */

 001010 */

 001010 */

 001010 */

 211 0xD3 '\323' */

 001010 */

 001010 */

 001010 */

 001111 */

 000000 */

 000000 */

 000000 */

 000000 */

 212 0xD4 '\324' */

 000100 */

 000100 */

 000111 */

 000100 */

 000111 */

 000000 */

 000000 */

 000000 */

 213 0xD5 '\325' */

 000000 */

 000000 */

 000111 */

 000100 */

 000111 */

 000100 */

 000100 */

 000100 */

 214 0xD6 '\326' */

 000000 */

 000000 */

 000000 */

 001111 */

 001010 */

 001010 */

 001010 */

 001010 */

 215 0xD7 '\327' */

 001010 */

 001010 */

 001010 */

 111111 */

 001010 */

 001010 */

 001010 */

 001010 */

 216 0xD8 '\330' */

 000100 */

 000100 */

 111111 */

 000100 */

 111111 */

 000100 */

 000100 */

 000100 */

 217 0xD9 '\331' */

 000100 */

 000100 */

 000100 */

 111100 */

 000000 */

 000000 */

 000000 */

 000000 */

 218 0xDA '\332' */

 000000 */

 000000 */

 000000 */

 000111 */

 000100 */

 000100 */

 000100 */

 000100 */

 219 0xDB '\333' */

 111111 */

 111111 */

 111111 */

 111111 */

 111111 */

 111111 */

 111111 */

 111111 */

 220 0xDC '\334' */

 000000 */

 000000 */

 000000 */

 000000 */

 111111 */

 111111 */

 111111 */

 111111 */

 221 0xDD '\335' */

 111000 */

 111000 */

 111000 */

 111000 */

 111000 */

 111000 */

 111000 */

 111000 */

 222 0xDE '\336' */

 000111 */

 000111 */

 000111 */

 000111 */

 000111 */

 000111 */

 000111 */

 000111 */

 223 0xDF '\337' */

 111111 */

 111111 */

 111111 */

 111111 */

 000000 */

 000000 */

 000000 */

 000000 */

 224 0xE0 '\340' */

 000000 */

 000000 */

 001101 */

 010010 */

 010010 */

 010010 */

 001101 */

 000000 */

 225 0xE1 '\341' */

 001001 */

 010001 */

 010010 */

 010010 */

 010001 */

 010001 */

 010110 */

 010000 */

 226 0xE2 '\342' */

 011111 */

 010001 */

 010001 */

 010000 */

 010000 */

 010000 */

 010000 */

 000000 */

 227 0xE3 '\343' */

 000000 */

 000000 */

 011111 */

 001010 */

 001010 */

 001010 */

 001010 */

 000000 */

 228 0xE4 '\344' */

 011111 */

 001001 */

 000100 */

 000010 */

 000100 */

 001001 */

 011111 */

 000000 */

 229 0xE5 '\345' */

 000000 */

 000000 */

 001111 */

 010010 */

 010010 */

 010010 */

 001100 */

 000000 */

 230 0xE6 '\346' */

 000000 */

 000000 */

 010010 */

 010010 */

 010010 */

 010010 */

 011101 */

 010000 */

 231 0xE7 '\347' */

 000000 */

 000000 */

 011111 */

 000100 */

 000100 */

 000100 */

 000011 */

 000000 */

 232 0xE8 '\350' */

 000100 */

 001110 */

 010001 */

 010001 */

 001110 */

 000100 */

 001110 */

 000000 */

 233 0xE9 '\351' */

 001110 */

 010001 */

 010001 */

 011111 */

 010001 */

 010001 */

 001110 */

 000000 */

 234 0xEA '\352' */

 001110 */

 010001 */

 010001 */

 010001 */

 010001 */

 001010 */

 011011 */

 000000 */

 235 0xEB '\353' */

 000110 */

 001000 */

 000110 */

 001001 */

 001001 */

 001001 */

 000110 */

 000000 */

 236 0xEC '\354' */

 000000 */

 000000 */

 001110 */

 010101 */

 010101 */

 010101 */

 001110 */

 000000 */

 237 0xED '\355' */

 000000 */

 000001 */

 001110 */

 010101 */

 010101 */

 001110 */

 010000 */

 000000 */

 238 0xEE '\356' */

 001111 */

 010000 */

 010000 */

 001110 */

 010000 */

 010000 */

 001111 */

 000000 */

 239 0xEF '\357' */

 001110 */

 010001 */

 010001 */

 010001 */

 010001 */

 010001 */

 010001 */

 000000 */

 240 0xF0 '\360' */

 000000 */

 111111 */

 000000 */

 111111 */

 000000 */

 111111 */

 000000 */

 000000 */

 241 0xF1 '\361' */

 000100 */

 000100 */

 011111 */

 000100 */

 000100 */

 000000 */

 011111 */

 000000 */

 242 0xF2 '\362' */

 001000 */

 000100 */

 000010 */

 000100 */

 001000 */

 000000 */

 001110 */

 000000 */

 243 0xF3 '\363' */

 000010 */

 000100 */

 001000 */

 000100 */

 000010 */

 000000 */

 001110 */

 000000 */

 244 0xF4 '\364' */

 000011 */

 000100 */

 000100 */

 000100 */

 000100 */

 000100 */

 000100 */

 000100 */

 245 0xF5 '\365' */

 000100 */

 000100 */

 000100 */

 000100 */

 000100 */

 000100 */

 000100 */

 011000 */

 246 0xF6 '\366' */

 000000 */

 000100 */

 000000 */

 011111 */

 000000 */

 000100 */

 000000 */

 000000 */

 247 0xF7 '\367' */

 000000 */

 001000 */

 010101 */

 000010 */

 001000 */

 010101 */

 000010 */

 000000 */

 248 0xF8 '\370' */

 001100 */

 010010 */

 010010 */

 001100 */

 000000 */

 000000 */

 000000 */

 000000 */

 249 0xF9 '\371' */

 000000 */

 000000 */

 000100 */

 001110 */

 000100 */

 000000 */

 000000 */

 000000 */

 250 0xFA '\372' */

 000000 */

 000000 */

 000000 */

 000100 */

 000000 */

 000000 */

 000000 */

 000000 */

 251 0xFB '\373' */

 000001 */

 000010 */

 000010 */

 010100 */

 010100 */

 001000 */

 001000 */

 000000 */

 252 0xFC '\374' */

 011000 */

 010100 */

 010100 */

 010100 */

 000000 */

 000000 */

 000000 */

 000000 */

 253 0xFD '\375' */

 011000 */

 000100 */

 001000 */

 011100 */

 000000 */

 000000 */

 000000 */

 000000 */

 254 0xFE '\376' */

 000000 */

 001110 */

 001110 */

 001110 */

 001110 */

 001110 */

 001110 */

 000000 */

 255 0xFF '\377' */

 000000 */

 000000 */

 000000 */

 000000 */

 000000 */

 000000 */

 000000 */

 000000 */

 SPDX-License-Identifier: GPL-2.0

*********************************************/

                                            */

       Font file generated by rthelen       */

                                            */

*********************************************/

 0 0x00 '^@' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 1 0x01 '^A' */

 00000000 */

 0    000 */

  0000 00 */

   00  00 */

  0000 00 */

  0  0 00 */

  0000 00 */

 0    000 */

 00000000 */

 00000000 */

 00000000 */

 2 0x02 '^B' */

 00000000 */

 0    000 */

       00 */

  0  0 00 */

       00 */

   00  00 */

       00 */

 0    000 */

 00000000 */

 00000000 */

 00000000 */

 3 0x03 '^C' */

 00000000 */

 00000000 */

 00 0 000 */

 0     00 */

 0     00 */

 00   000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 4 0x04 '^D' */

 00000000 */

 00000000 */

 000 0000 */

 00   000 */

 0     00 */

 00   000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 5 0x05 '^E' */

 00000000 */

 00000000 */

 00   000 */

 00   000 */

 0  0  00 */

 0  0  00 */

 000 0000 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 6 0x06 '^F' */

 00000000 */

 00000000 */

 000 0000 */

 00   000 */

 0     00 */

 0     00 */

 000 0000 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 7 0x07 '^G' */

 00000000 */

 00000000 */

 00000000 */

 00  0000 */

 0    000 */

 00  0000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 8 0x08 '^H' */

          */

          */

          */

   00     */

  0000    */

   00     */

          */

          */

          */

          */

          */

 9 0x09 '^I' */

 00000000 */

 00000000 */

 00  0000 */

 0 00 000 */

  0000 00 */

 0 00 000 */

 00  0000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 10 0x0a '^J' */

          */

          */

   00     */

  0  0    */

 0    0   */

  0  0    */

   00     */

          */

          */

          */

          */

 11 0x0b '^K' */

 00000000 */

 00    00 */

 000 0 00 */

 00 00000 */

 0    000 */

 0 000 00 */

 0 000 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 12 0x0c '^L' */

 00000000 */

 00   000 */

 0 000 00 */

 0 000 00 */

 00   000 */

 000 0000 */

 0     00 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 13 0x0d '^M' */

 00000000 */

 00    00 */

 00 00 00 */

 00    00 */

 00 00000 */

 00 00000 */

    00000 */

   000000 */

 00000000 */

 00000000 */

 00000000 */

 14 0x0e '^N' */

 00000000 */

 0     00 */

 0 000 00 */

 0     00 */

 0 000 00 */

 0 000 00 */

   00  00 */

   00  00 */

 00000000 */

 00000000 */

 00000000 */

 15 0x0f '^O' */

 00000000 */

 000 0000 */

 0 0 0 00 */

 00   000 */

 0  0  00 */

 00   000 */

 0 0 0 00 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 16 0x10 '^P' */

 00000000 */

 0 000000 */

 0  00000 */

 0   0000 */

 0     00 */

 0   0000 */

 0  00000 */

 0 000000 */

 00000000 */

 00000000 */

 00000000 */

 17 0x11 '^Q' */

 00000000 */

 00000 00 */

 0000  00 */

 000   00 */

 0     00 */

 000   00 */

 0000  00 */

 00000 00 */

 00000000 */

 00000000 */

 00000000 */

 18 0x12 '^R' */

 00000000 */

 000 0000 */

 00   000 */

 0 0 0 00 */

 000 0000 */

 0 0 0 00 */

 00   000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 19 0x13 '^S' */

 00000000 */

 0 00 000 */

 0 00 000 */

 0 00 000 */

 0 00 000 */

 0 00 000 */

 00000000 */

 0 00 000 */

 00000000 */

 00000000 */

 00000000 */

 20 0x14 '^T' */

 00    00 */

 0 0 0 00 */

 0 0 0 00 */

 0 0 0 00 */

 00    00 */

 000 0 00 */

 000 0 00 */

 000 0 00 */

 00000000 */

 00000000 */

 00000000 */

 21 0x15 '^U' */

 00   000 */

 0 000 00 */

 00 00 00 */

 0 0 0000 */

 0 00 000 */

 00 00 00 */

 000 0 00 */

 0 00 000 */

 0 000 00 */

 00   000 */

 00000000 */

 22 0x16 '^V' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

      000 */

      000 */

      000 */

 00000000 */

 00000000 */

 00000000 */

 23 0x17 '^W' */

 00000000 */

 000 0000 */

 00   000 */

 0 0 0 00 */

 000 0000 */

 0 0 0 00 */

 00   000 */

 000 0000 */

 0     00 */

 00000000 */

 00000000 */

 24 0x18 '^X' */

 00000000 */

 000 0000 */

 00   000 */

 0 0 0 00 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 25 0x19 '^Y' */

 00000000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 0 0 0 00 */

 00   000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 26 0x1a '^Z' */

 00000000 */

 00000000 */

 000 0000 */

 0000 000 */

 0     00 */

 0000 000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 27 0x1b '^[' */

 00000000 */

 00000000 */

 000 0000 */

 00 00000 */

 0     00 */

 00 00000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 28 0x1c '^\' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 0 000000 */

 0 000000 */

 0 000000 */

 0    000 */

 00000000 */

 00000000 */

 00000000 */

 29 0x1d '^]' */

 00000000 */

 00000000 */

 0 00 000 */

  0000 00 */

       00 */

  0000 00 */

 0 00 000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 30 0x1e '^^' */

 00000000 */

 00000000 */

 000 0000 */

 000 0000 */

 00   000 */

 00   000 */

 0     00 */

 0     00 */

 00000000 */

 00000000 */

 00000000 */

 31 0x1f '^`' */

 00000000 */

 00000000 */

 0     00 */

 0     00 */

 00   000 */

 00   000 */

 000 0000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 32 0x20 ' ' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 33 0x21 '!' */

 00000000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 00000000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 34 0x22 '"' */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 35 0x23 '#' */

 00000000 */

 00000000 */

 00 0 000 */

 0     00 */

 00 0 000 */

 00 0 000 */

 0     00 */

 00 0 000 */

 00000000 */

 00000000 */

 00000000 */

 36 0x24 '$' */

 000 0000 */

 00   000 */

 0 0 0 00 */

 0 0 0000 */

 00   000 */

 000 0 00 */

 0 0 0 00 */

 00   000 */

 000 0000 */

 00000000 */

 00000000 */

 37 0x25 '%' */

 00000000 */

 0  00 00 */

 0  00 00 */

 0000 000 */

 000 0000 */

 00 00000 */

 0 00  00 */

 0 00  00 */

 00000000 */

 00000000 */

 00000000 */

 38 0x26 '&' */

 00000000 */

 00  0000 */

 0 00 000 */

 0 0 0000 */

 00 00000 */

 0 0 0 00 */

 0 00 000 */

 00  0 00 */

 00000000 */

 00000000 */

 00000000 */

 39 0x27 ''' */

 000 0000 */

 000 0000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 40 0x28 '(' */

 00000 00 */

 0000 000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 0000 000 */

 00000 00 */

 00000000 */

 00000000 */

 41 0x29 ')' */

 00 00000 */

 000 0000 */

 0000 000 */

 0000 000 */

 0000 000 */

 0000 000 */

 0000 000 */

 000 0000 */

 00 00000 */

 00000000 */

 00000000 */

 42 0x2a '*' */

 00000000 */

 000 0000 */

 0 0 0 00 */

 00   000 */

 0 0 0 00 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 43 0x2b '+' */

 00000000 */

 00000000 */

 000 0000 */

 000 0000 */

 0     00 */

 000 0000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 44 0x2c ',' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00  0000 */

 00  0000 */

 000 0000 */

 00 00000 */

 00000000 */

 45 0x2d '-' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 0     00 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 46 0x2e '.' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 000  000 */

 000  000 */

 00000000 */

 00000000 */

 00000000 */

 47 0x2f '/' */

 00000 00 */

 00000 00 */

 0000 000 */

 0000 000 */

 000 0000 */

 000 0000 */

 00 00000 */

 00 00000 */

 0 000000 */

 0 000000 */

 00000000 */

 48 0x30 '0' */

 00000000 */

 00   000 */

 0 000 00 */

 0 00  00 */

 0 0 0 00 */

 0  00 00 */

 0 000 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 49 0x31 '1' */

 00000000 */

 0000 000 */

 000  000 */

 0000 000 */

 0000 000 */

 0000 000 */

 0000 000 */

 000   00 */

 00000000 */

 00000000 */

 00000000 */

 50 0x32 '2' */

 00000000 */

 00   000 */

 0 000 00 */

 00000 00 */

 0000 000 */

 000 0000 */

 00 00000 */

 0     00 */

 00000000 */

 00000000 */

 00000000 */

 51 0x33 '3' */

 00000000 */

 00   000 */

 0 000 00 */

 00000 00 */

 000  000 */

 00000 00 */

 0 000 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 52 0x34 '4' */

 00000000 */

 0000 000 */

 000  000 */

 00 0 000 */

 0 00 000 */

 0     00 */

 0000 000 */

 000   00 */

 00000000 */

 00000000 */

 00000000 */

 53 0x35 '5' */

 00000000 */

 0     00 */

 0 000000 */

 0    000 */

 00000 00 */

 00000 00 */

 0 000 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 54 0x36 '6' */

 00000000 */

 00   000 */

 0 000000 */

 0    000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 55 0x37 '7' */

 00000000 */

 0     00 */

 00000 00 */

 00000 00 */

 0000 000 */

 000 0000 */

 000 0000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 56 0x38 '8' */

 00000000 */

 00   000 */

 0 000 00 */

 0 000 00 */

 00   000 */

 0 000 00 */

 0 000 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 57 0x39 '9' */

 00000000 */

 00   000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00    00 */

 00000 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 58 0x3a ':' */

 00000000 */

 00000000 */

 00000000 */

 000  000 */

 000  000 */

 00000000 */

 000  000 */

 000  000 */

 00000000 */

 00000000 */

 00000000 */

 59 0x3b ';' */

 00000000 */

 00000000 */

 00000000 */

 00  0000 */

 00  0000 */

 00000000 */

 00  0000 */

 00  0000 */

 000 0000 */

 00 00000 */

 00000000 */

 60 0x3c '<' */

 00000000 */

 00000 00 */

 0000 000 */

 000 0000 */

 00 00000 */

 000 0000 */

 0000 000 */

 00000 00 */

 00000000 */

 00000000 */

 00000000 */

 61 0x3d '=' */

 00000000 */

 00000000 */

 00000000 */

 0     00 */

 00000000 */

 0     00 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 62 0x3e '>' */

 00000000 */

 00 00000 */

 000 0000 */

 0000 000 */

 00000 00 */

 0000 000 */

 000 0000 */

 00 00000 */

 00000000 */

 00000000 */

 00000000 */

 63 0x3f '?' */

 00000000 */

 00   000 */

 0 000 00 */

 00000 00 */

 0000 000 */

 000 0000 */

 00000000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 64 0x40 '@' */

 00000000 */

 00   000 */

 0 000 00 */

 0   0 00 */

 0 0 0 00 */

 0    000 */

 0 000000 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 65 0x41 'A' */

 00000000 */

 00   000 */

 0 000 00 */

 0 000 00 */

 0     00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00000000 */

 00000000 */

 00000000 */

 66 0x42 'B' */

 00000000 */

 0    000 */

 0 000 00 */

 0 000 00 */

 0    000 */

 0 000 00 */

 0 000 00 */

 0    000 */

 00000000 */

 00000000 */

 00000000 */

 67 0x43 'C' */

 00000000 */

 00   000 */

 0 000 00 */

 0 000000 */

 0 000000 */

 0 000000 */

 0 000 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 68 0x44 'D' */

 00000000 */

 0    000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0    000 */

 00000000 */

 00000000 */

 00000000 */

 69 0x45 'E' */

 00000000 */

 0     00 */

 0 000000 */

 0 000000 */

 0    000 */

 0 000000 */

 0 000000 */

 0     00 */

 00000000 */

 00000000 */

 00000000 */

 70 0x46 'F' */

 00000000 */

 0     00 */

 0 000000 */

 0 000000 */

 0    000 */

 0 000000 */

 0 000000 */

 0 000000 */

 00000000 */

 00000000 */

 00000000 */

 71 0x47 'G' */

 00000000 */

 00   000 */

 0 000 00 */

 0 000000 */

 0 00  00 */

 0 000 00 */

 0 000 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 72 0x48 'H' */

 00000000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0     00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00000000 */

 00000000 */

 00000000 */

 73 0x49 'I' */

 00000000 */

 00   000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 74 0x4a 'J' */

 00000000 */

 00000 00 */

 00000 00 */

 00000 00 */

 00000 00 */

 0 000 00 */

 0 000 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 75 0x4b 'K' */

 00000000 */

 0 000 00 */

 0 00 000 */

 0 0 0000 */

 0  00000 */

 0 0 0000 */

 0 00 000 */

 0 000 00 */

 00000000 */

 00000000 */

 00000000 */

 76 0x4c 'L' */

 00000000 */

 0 000000 */

 0 000000 */

 0 000000 */

 0 000000 */

 0 000000 */

 0 000000 */

 0     00 */

 00000000 */

 00000000 */

 00000000 */

 77 0x4d 'M' */

 00000000 */

 0 000 00 */

 0  0  00 */

 0 0 0 00 */

 0 0 0 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00000000 */

 00000000 */

 00000000 */

 78 0x4e 'N' */

 00000000 */

 0 000 00 */

 0  00 00 */

 0 0 0 00 */

 0 00  00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00000000 */

 00000000 */

 00000000 */

 79 0x4f 'O' */

 00000000 */

 00   000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 80 0x50 'P' */

 00000000 */

 0    000 */

 0 000 00 */

 0 000 00 */

 0    000 */

 0 000000 */

 0 000000 */

 0 000000 */

 00000000 */

 00000000 */

 00000000 */

 81 0x51 'Q' */

 00000000 */

 00   000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 0 0 00 */

 00   000 */

 00000 00 */

 00000000 */

 00000000 */

 82 0x52 'R' */

 00000000 */

 0    000 */

 0 000 00 */

 0 000 00 */

 0    000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00000000 */

 00000000 */

 00000000 */

 83 0x53 'S' */

 00000000 */

 00   000 */

 0 000 00 */

 0 000000 */

 00   000 */

 00000 00 */

 0 000 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 84 0x54 'T' */

 00000000 */

 0     00 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 85 0x55 'U' */

 00000000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 86 0x56 'V' */

 00000000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00 0 000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 87 0x57 'W' */

 00000000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 0 0 00 */

 0 0 0 00 */

 0  0  00 */

 0 000 00 */

 00000000 */

 00000000 */

 00000000 */

 88 0x58 'X' */

 00000000 */

 0 000 00 */

 0 000 00 */

 00 0 000 */

 000 0000 */

 00 0 000 */

 0 000 00 */

 0 000 00 */

 00000000 */

 00000000 */

 00000000 */

 89 0x59 'Y' */

 00000000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00 0 000 */

 000 0000 */

 000 0000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 90 0x5a 'Z' */

 00000000 */

 0     00 */

 00000 00 */

 0000 000 */

 000 0000 */

 00 00000 */

 0 000000 */

 0     00 */

 00000000 */

 00000000 */

 00000000 */

 91 0x5b '[' */

 0000  00 */

 0000 000 */

 0000 000 */

 0000 000 */

 0000 000 */

 0000 000 */

 0000 000 */

 0000 000 */

 0000  00 */

 00000000 */

 00000000 */

 92 0x5c '\' */

 0 000000 */

 0 000000 */

 00 00000 */

 00 00000 */

 000 0000 */

 000 0000 */

 0000 000 */

 0000 000 */

 00000 00 */

 00000 00 */

 00000000 */

 93 0x5d ']' */

 00  0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 00  0000 */

 00000000 */

 00000000 */

 94 0x5e '^' */

 00000000 */

 000 0000 */

 00 0 000 */

 0 000 00 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 95 0x5f '_' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

       00 */

 00000000 */

 00000000 */

 00000000 */

 96 0x60 '`' */

 00 00000 */

 000 0000 */

 0000 000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 97 0x61 'a' */

 00000000 */

 00000000 */

 00000000 */

 00    00 */

 0 000 00 */

 0 000 00 */

 0 00  00 */

 00  0 00 */

 00000000 */

 00000000 */

 00000000 */

 98 0x62 'b' */

 00000000 */

 0 000000 */

 0 000000 */

 0    000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0    000 */

 00000000 */

 00000000 */

 00000000 */

 99 0x63 'c' */

 00000000 */

 00000000 */

 00000000 */

 00   000 */

 0 000 00 */

 0 000000 */

 0 000 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 100 0x64 'd' */

 00000000 */

 00000 00 */

 00000 00 */

 00    00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00    00 */

 00000000 */

 00000000 */

 00000000 */

 101 0x65 'e' */

 00000000 */

 00000000 */

 00000000 */

 00   000 */

 0 000 00 */

 0     00 */

 0 000000 */

 00    00 */

 00000000 */

 00000000 */

 00000000 */

 102 0x66 'f' */

 00000000 */

 0000  00 */

 000 0000 */

 00   000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 103 0x67 'g' */

 00000000 */

 00000000 */

 00000000 */

 00    00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00    00 */

 00000 00 */

 00   000 */

 00000000 */

 104 0x68 'h' */

 00000000 */

 0 000000 */

 0 000000 */

 0    000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00000000 */

 00000000 */

 00000000 */

 105 0x69 'i' */

 00000000 */

 000 0000 */

 00000000 */

 00  0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 106 0x6a 'j' */

 00000000 */

 000 0000 */

 00000000 */

 00  0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 0  00000 */

 00000000 */

 107 0x6b 'k' */

 00000000 */

 0 000000 */

 0 000000 */

 0 00 000 */

 0 0 0000 */

 0   0000 */

 0 00 000 */

 0 000 00 */

 00000000 */

 00000000 */

 00000000 */

 108 0x6c 'l' */

 00000000 */

 00  0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 109 0x6d 'm' */

 00000000 */

 00000000 */

 00000000 */

 0    000 */

 0 0 0 00 */

 0 0 0 00 */

 0 0 0 00 */

 0 0 0 00 */

 00000000 */

 00000000 */

 00000000 */

 110 0x6e 'n' */

 00000000 */

 00000000 */

 00000000 */

 0 0  000 */

 0  00 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00000000 */

 00000000 */

 00000000 */

 111 0x6f 'o' */

 00000000 */

 00000000 */

 00000000 */

 00   000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 112 0x70 'p' */

 00000000 */

 00000000 */

 00000000 */

 0    000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0    000 */

 0 000000 */

 0 000000 */

 00000000 */

 113 0x71 'q' */

 00000000 */

 00000000 */

 00000000 */

 00    00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00    00 */

 00000 00 */

 00000 00 */

 00000000 */

 114 0x72 'r' */

 00000000 */

 00000000 */

 00000000 */

 0 0  000 */

 0  00 00 */

 0 000000 */

 0 000000 */

 0 000000 */

 00000000 */

 00000000 */

 00000000 */

 115 0x73 's' */

 00000000 */

 00000000 */

 00000000 */

 00    00 */

 0 000000 */

 00   000 */

 00000 00 */

 0    000 */

 00000000 */

 00000000 */

 00000000 */

 116 0x74 't' */

 00000000 */

 000 0000 */

 000 0000 */

 00   000 */

 000 0000 */

 000 0000 */

 000 0000 */

 0000  00 */

 00000000 */

 00000000 */

 00000000 */

 117 0x75 'u' */

 00000000 */

 00000000 */

 00000000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 00  00 */

 00  0 00 */

 00000000 */

 00000000 */

 00000000 */

 118 0x76 'v' */

 00000000 */

 00000000 */

 00000000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00 0 000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 119 0x77 'w' */

 00000000 */

 00000000 */

 00000000 */

 0 0 0 00 */

 0 0 0 00 */

 0 0 0 00 */

 0 0 0 00 */

 00 0 000 */

 00000000 */

 00000000 */

 00000000 */

 120 0x78 'x' */

 00000000 */

 00000000 */

 00000000 */

 0 000 00 */

 00 0 000 */

 000 0000 */

 00 0 000 */

 0 000 00 */

 00000000 */

 00000000 */

 00000000 */

 121 0x79 'y' */

 00000000 */

 00000000 */

 00000000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00    00 */

 00000 00 */

 00   000 */

 00000000 */

 122 0x7a 'z' */

 00000000 */

 00000000 */

 00000000 */

 0     00 */

 0000 000 */

 000 0000 */

 00 00000 */

 0     00 */

 00000000 */

 00000000 */

 00000000 */

 123 0x7b '{' */

 00000 00 */

 0000 000 */

 0000 000 */

 0000 000 */

 0000 000 */

 000 0000 */

 0000 000 */

 0000 000 */

 0000 000 */

 0000 000 */

 00000 00 */

 124 0x7c '|' */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 00000000 */

 00000000 */

 125 0x7d '}' */

 00 00000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 0000 000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 00 00000 */

 126 0x7e '~' */

 00000000 */

 00  0 00 */

 0 0  000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 127 0x7f '^?' */

 00000000 */

 00000000 */

 00000000 */

 000 0000 */

 00 0 000 */

 0 000 00 */

 0 000 00 */

 0     00 */

 00000000 */

 00000000 */

 00000000 */

 128 0x80 '\200' */

 00000000 */

 00   000 */

 0 000 00 */

 0 000000 */

 0 000000 */

 0 000000 */

 0 000 00 */

 00   000 */

 000 0000 */

 00 00000 */

 00000000 */

 129 0x81 '\201' */

 00000000 */

 00 0 000 */

 00000000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 00  00 */

 00  0 00 */

 00000000 */

 00000000 */

 00000000 */

 130 0x82 '\202' */

 0000 000 */

 000 0000 */

 00000000 */

 00   000 */

 0 000 00 */

 0     00 */

 0 000000 */

 00    00 */

 00000000 */

 00000000 */

 00000000 */

 131 0x83 '\203' */

 000 0000 */

 00 0 000 */

 00000000 */

 00    00 */

 0 000 00 */

 0 000 00 */

 0 00  00 */

 00  0 00 */

 00000000 */

 00000000 */

 00000000 */

 132 0x84 '\204' */

 00000000 */

 00 0 000 */

 00000000 */

 00    00 */

 0 000 00 */

 0 000 00 */

 0 00  00 */

 00  0 00 */

 00000000 */

 00000000 */

 00000000 */

 133 0x85 '\205' */

 000 0000 */

 0000 000 */

 00000000 */

 00    00 */

 0 000 00 */

 0 000 00 */

 0 00  00 */

 00  0 00 */

 00000000 */

 00000000 */

 00000000 */

 134 0x86 '\206' */

 000  000 */

 00 00 00 */

 000  000 */

 00    00 */

 0 000 00 */

 0 000 00 */

 0 00  00 */

 00  0 00 */

 00000000 */

 00000000 */

 00000000 */

 135 0x87 '\207' */

 00000000 */

 00000000 */

 00000000 */

 00   000 */

 0 000 00 */

 0 000000 */

 0 000000 */

 00    00 */

 000 0000 */

 00 00000 */

 00000000 */

 136 0x88 '\210' */

 000 0000 */

 00 0 000 */

 00000000 */

 00   000 */

 0 000 00 */

 0     00 */

 0 000000 */

 00    00 */

 00000000 */

 00000000 */

 00000000 */

 137 0x89 '\211' */

 00000000 */

 00 0 000 */

 00000000 */

 00   000 */

 0 000 00 */

 0     00 */

 0 000000 */

 00    00 */

 00000000 */

 00000000 */

 00000000 */

 138 0x8a '\212' */

 00 00000 */

 000 0000 */

 00000000 */

 00   000 */

 0 000 00 */

 0     00 */

 0 000000 */

 00    00 */

 00000000 */

 00000000 */

 00000000 */

 139 0x8b '\213' */

 00000000 */

 00 0 000 */

 00000000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 140 0x8c '\214' */

 000 0000 */

 00 0 000 */

 00000000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 141 0x8d '\215' */

 00 00000 */

 000 0000 */

 00000000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 142 0x8e '\216' */

  0000 00 */

 00   000 */

 0 000 00 */

 0 000 00 */

 0     00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00000000 */

 00000000 */

 00000000 */

 143 0x8f '\217' */

 0 0  000 */

 00   000 */

 0 000 00 */

 0 000 00 */

 0     00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00000000 */

 00000000 */

 00000000 */

 144 0x90 '\220' */

 000 0000 */

 0     00 */

 0 000000 */

 0 000000 */

 0    000 */

 0 000000 */

 0 000000 */

 0     00 */

 00000000 */

 00000000 */

 00000000 */

 145 0x91 '\221' */

 00000000 */

 00000000 */

 00000000 */

 00   000 */

 0 0 0 00 */

 0 0   00 */

 0 0 0000 */

 00    00 */

 00000000 */

 00000000 */

 00000000 */

 146 0x92 '\222' */

 00000000 */

 00    00 */

 0 0 0000 */

 0 0 0000 */

 0    000 */

 0 0 0000 */

 0 0 0000 */

 0 0   00 */

 00000000 */

 00000000 */

 00000000 */

 147 0x93 '\223' */

 000 0000 */

 00 0 000 */

 00000000 */

 00   000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 148 0x94 '\224' */

 00000000 */

 00 0 000 */

 00000000 */

 00   000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 149 0x95 '\225' */

 00 00000 */

 000 0000 */

 00000000 */

 00   000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 150 0x96 '\226' */

 000 0000 */

 00 0 000 */

 00000000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 00  00 */

 00  0 00 */

 00000000 */

 00000000 */

 00000000 */

 151 0x97 '\227' */

 00 00000 */

 000 0000 */

 00000000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 00  00 */

 00  0 00 */

 00000000 */

 00000000 */

 00000000 */

 152 0x98 '\230' */

 00000000 */

 00 0 000 */

 00000000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00    00 */

 00000 00 */

 00   000 */

 00000000 */

 153 0x99 '\231' */

  0000 00 */

 00   000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 154 0x9a '\232' */

  000 000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 155 0x9b '\233' */

 00000000 */

 00000000 */

 000 0000 */

 00   000 */

 0 0 0 00 */

 0 0 0000 */

 0 0 0 00 */

 00   000 */

 000 0000 */

 00000000 */

 00000000 */

 156 0x9c '\234' */

 00  0000 */

 0 00 000 */

 0 000000 */

 0   0000 */

 0 000000 */

 0 000000 */

 0 000 00 */

 0    000 */

 00000000 */

 00000000 */

 00000000 */

 157 0x9d '\235' */

 00000000 */

 0 000 00 */

 00 0 000 */

 0     00 */

 000 0000 */

 0     00 */

 000 0000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 158 0x9e '\236' */

 00000000 */

 0   0000 */

 0 00 000 */

 0   0000 */

 0 00 000 */

 0 0   00 */

 0 00 000 */

 0 000 00 */

 00000000 */

 00000000 */

 00000000 */

 159 0x9f '\237' */

 00000000 */

 0000  00 */

 000 0000 */

 000 0000 */

 00   000 */

 000 0000 */

 000 0000 */

 0  00000 */

 00000000 */

 00000000 */

 00000000 */

 160 0xa0 '\240' */

 0000 000 */

 000 0000 */

 00000000 */

 00    00 */

 0 000 00 */

 0 000 00 */

 0 00  00 */

 00  0 00 */

 00000000 */

 00000000 */

 00000000 */

 161 0xa1 '\241' */

 0000 000 */

 000 0000 */

 00000000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 162 0xa2 '\242' */

 0000 000 */

 000 0000 */

 00000000 */

 00   000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 163 0xa3 '\243' */

 0000 000 */

 000 0000 */

 00000000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 00  00 */

 00  0 00 */

 00000000 */

 00000000 */

 00000000 */

 164 0xa4 '\244' */

 00  0 00 */

 0 0  000 */

 00000000 */

 0 0  000 */

 0  00 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00000000 */

 00000000 */

 00000000 */

 165 0xa5 '\245' */

 0 0  000 */

 0 000 00 */

 0  00 00 */

 0 0 0 00 */

 0 00  00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00000000 */

 00000000 */

 00000000 */

 166 0xa6 '\246' */

 00000000 */

 000   00 */

 00 00 00 */

 00 00 00 */

 000   00 */

 00000000 */

 00    00 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 167 0xa7 '\247' */

 00000000 */

 000  000 */

 00 00 00 */

 00 00 00 */

 000  000 */

 00000000 */

 00    00 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 168 0xa8 '\250' */

 00000000 */

 000 0000 */

 00000000 */

 000 0000 */

 00 00000 */

 0 000000 */

 0 000 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 169 0xa9 '\251' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 0     00 */

 0 000000 */

 0 000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 170 0xaa '\252' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 0     00 */

 00000 00 */

 00000 00 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 171 0xab '\253' */

 00 00000 */

 0  00000 */

 00 00 00 */

 00 0 000 */

 000 0000 */

 00 0 000 */

 0 000 00 */

 0000 000 */

 000   00 */

 00000000 */

 00000000 */

 172 0xac '\254' */

 00 00000 */

 0  00000 */

 00 00 00 */

 00 0 000 */

 000 0000 */

 00 0 000 */

 0 0  000 */

 00    00 */

 0000 000 */

 00000000 */

 00000000 */

 173 0xad '\255' */

 00000000 */

 0000 000 */

 00000000 */

 0000 000 */

 0000 000 */

 0000 000 */

 0000 000 */

 0000 000 */

 00000000 */

 00000000 */

 00000000 */

 174 0xae '\256' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00 00 00 */

 0 00 000 */

 0 00 000 */

 00 00 00 */

 00000000 */

 00000000 */

 00000000 */

 175 0xaf '\257' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 0 00 000 */

 00 00 00 */

 00 00 00 */

 0 00 000 */

 00000000 */

 00000000 */

 00000000 */

 176 0xb0 '\260' */

 000 000  */

 0 000 00 */

 000 000  */

 0 000 00 */

 000 000  */

 0 000 00 */

 000 000  */

 0 000 00 */

 000 000  */

 0 000 00 */

 000 000  */

 177 0xb1 '\261' */

 0 0 0 0  */

  0 0 0 0 */

 0 0 0 0  */

  0 0 0 0 */

 0 0 0 0  */

  0 0 0 0 */

 0 0 0 0  */

  0 0 0 0 */

 0 0 0 0  */

  0 0 0 0 */

 0 0 0 0  */

 178 0xb2 '\262' */

   0   0  */

 0   0    */

   0   0  */

 0   0    */

   0   0  */

 0   0    */

   0   0  */

 0   0    */

   0   0  */

 0   0    */

   0   0  */

 179 0xb3 '\263' */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 180 0xb4 '\264' */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

     0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 181 0xb5 '\265' */

 000 0000 */

 000 0000 */

 000 0000 */

     0000 */

 000 0000 */

     0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 182 0xb6 '\266' */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

    0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 183 0xb7 '\267' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

      000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 184 0xb8 '\270' */

 00000000 */

 00000000 */

 00000000 */

     0000 */

 000 0000 */

     0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 185 0xb9 '\271' */

 00 0 000 */

 00 0 000 */

 00 0 000 */

    0 000 */

 0000 000 */

    0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 186 0xba '\272' */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 187 0xbb '\273' */

 00000000 */

 00000000 */

 00000000 */

      000 */

 0000 000 */

    0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 188 0xbc '\274' */

 00 0 000 */

 00 0 000 */

 00 0 000 */

    0 000 */

 0000 000 */

      000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 189 0xbd '\275' */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

      000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 190 0xbe '\276' */

 000 0000 */

 000 0000 */

 000 0000 */

     0000 */

 000 0000 */

     0000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 191 0xbf '\277' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

     0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 192 0xc0 '\300' */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000   00 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 193 0xc1 '\301' */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

       00 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 194 0xc2 '\302' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

       00 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 195 0xc3 '\303' */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000   00 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 196 0xc4 '\304' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

       00 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 197 0xc5 '\305' */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

       00 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 198 0xc6 '\306' */

 000 0000 */

 000 0000 */

 000 0000 */

 000   00 */

 000 0000 */

 000   00 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 199 0xc7 '\307' */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0  00 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 200 0xc8 '\310' */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0  00 */

 00 00000 */

 00    00 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 201 0xc9 '\311' */

 00000000 */

 00000000 */

 00000000 */

 00    00 */

 00 00000 */

 00 0  00 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 202 0xca '\312' */

 00 0 000 */

 00 0 000 */

 00 0 000 */

    0  00 */

 00000000 */

       00 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 203 0xcb '\313' */

 00000000 */

 00000000 */

 00000000 */

       00 */

 00000000 */

    0  00 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 204 0xcc '\314' */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0  00 */

 00 00000 */

 00 0  00 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 205 0xcd '\315' */

 00000000 */

 00000000 */

 00000000 */

       00 */

 00000000 */

       00 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 206 0xce '\316' */

 00 0 000 */

 00 0 000 */

 00 0 000 */

    0  00 */

 00000000 */

    0  00 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 207 0xcf '\317' */

 000 0000 */

 000 0000 */

 000 0000 */

       00 */

 00000000 */

       00 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 208 0xd0 '\320' */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

       00 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 209 0xd1 '\321' */

 00000000 */

 00000000 */

 00000000 */

       00 */

 00000000 */

       00 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 210 0xd2 '\322' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

       00 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 211 0xd3 '\323' */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00    00 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 212 0xd4 '\324' */

 000 0000 */

 000 0000 */

 000 0000 */

 000   00 */

 000 0000 */

 000   00 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 213 0xd5 '\325' */

 00000000 */

 00000000 */

 00000000 */

 000   00 */

 000 0000 */

 000   00 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 214 0xd6 '\326' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00    00 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 215 0xd7 '\327' */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

       00 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 216 0xd8 '\330' */

 000 0000 */

 000 0000 */

 000 0000 */

       00 */

 000 0000 */

       00 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 217 0xd9 '\331' */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

     0000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 218 0xda '\332' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 000      */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 219 0xdb '\333' */

       00 */

       00 */

       00 */

       00 */

       00 */

       00 */

       00 */

       00 */

       00 */

       00 */

       00 */

 220 0xdc '\334' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

       00 */

       00 */

       00 */

       00 */

       00 */

       00 */

 221 0xdd '\335' */

    00000 */

    00000 */

    00000 */

    00000 */

    00000 */

    00000 */

    00000 */

    00000 */

    00000 */

    00000 */

    00000 */

 222 0xde '\336' */

 000   00 */

 000   00 */

 000   00 */

 000   00 */

 000   00 */

 000   00 */

 000   00 */

 000   00 */

 000   00 */

 000   00 */

 000   00 */

 223 0xdf '\337' */

       00 */

       00 */

       00 */

       00 */

       00 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 224 0xe0 '\340' */

 00000000 */

 00000000 */

 00000000 */

 00 00 00 */

 0 0  000 */

 0 0 0000 */

 0 0 0 00 */

 00 0  00 */

 00000000 */

 00000000 */

 00000000 */

 225 0xe1 '\341' */

 000  000 */

 00 00 00 */

 0 000 00 */

 0 00 000 */

 0 00 000 */

 0 000 00 */

 0 000 00 */

 0 0  000 */

 0 000000 */

 00000000 */

 00000000 */

 226 0xe2 '\342' */

 00000000 */

 0     00 */

 0 000 00 */

 0 000 00 */

 0 000000 */

 0 000000 */

 0 000000 */

 0 000000 */

 00000000 */

 00000000 */

 00000000 */

 227 0xe3 '\343' */

 00000000 */

 00000000 */

 00000000 */

 0     00 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00 0 000 */

 00000000 */

 00000000 */

 00000000 */

 228 0xe4 '\344' */

 00000000 */

 0     00 */

 00 00 00 */

 000 0000 */

 0000 000 */

 000 0000 */

 00 00 00 */

 0     00 */

 00000000 */

 00000000 */

 00000000 */

 229 0xe5 '\345' */

 00000000 */

 00000000 */

 00000000 */

 00    00 */

 0 00 000 */

 0 00 000 */

 0 00 000 */

 00  0000 */

 00000000 */

 00000000 */

 00000000 */

 230 0xe6 '\346' */

 00000000 */

 00000000 */

 00000000 */

 0 00 000 */

 0 00 000 */

 0 00 000 */

 0 00 000 */

 0   0 00 */

 0 000000 */

 0 000000 */

 00000000 */

 231 0xe7 '\347' */

 00000000 */

 00000000 */

 00000000 */

 0  0  00 */

  00  000 */

 000 0000 */

 000 0000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 232 0xe8 '\350' */

 00000000 */

 00   000 */

 000 0000 */

 00   000 */

 0 000 00 */

 00   000 */

 000 0000 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 233 0xe9 '\351' */

 00000000 */

 00000000 */

 00000000 */

 00   000 */

 0 00  00 */

 0 0 0 00 */

 0  00 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 234 0xea '\352' */

 00000000 */

 00   000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00 0 000 */

 0  0  00 */

 00000000 */

 00000000 */

 00000000 */

 235 0xeb '\353' */

 00000000 */

 000 0000 */

 0000 000 */

 0000  00 */

 000 0 00 */

 00 00 00 */

 00 00 00 */

 000  000 */

 00000000 */

 00000000 */

 00000000 */

 236 0xec '\354' */

 00000000 */

 00000000 */

 00000000 */

 00   000 */

 0 0 0 00 */

 0 0 0 00 */

 0 0 0 00 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 237 0xed '\355' */

 00000000 */

 00000000 */

 00000 00 */

 00   000 */

 0 000 00 */

 00   000 */

 0 000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 238 0xee '\356' */

 00000000 */

 00    00 */

 0 000000 */

 0 000000 */

 0    000 */

 0 000000 */

 0 000000 */

 00    00 */

 00000000 */

 00000000 */

 00000000 */

 239 0xef '\357' */

 00000000 */

 00   000 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 0 000 00 */

 00000000 */

 00000000 */

 00000000 */

 240 0xf0 '\360' */

 00000000 */

 00000000 */

       00 */

 00000000 */

       00 */

 00000000 */

       00 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 241 0xf1 '\361' */

 00000000 */

 00000000 */

 000 0000 */

 000 0000 */

 0     00 */

 000 0000 */

 000 0000 */

 0     00 */

 00000000 */

 00000000 */

 00000000 */

 242 0xf2 '\362' */

 00000000 */

 000 0000 */

 0000 000 */

 00000 00 */

 0000 000 */

 000 0000 */

 00000000 */

 000   00 */

 00000000 */

 00000000 */

 00000000 */

 243 0xf3 '\363' */

 00000000 */

 0000 000 */

 000 0000 */

 00 00000 */

 000 0000 */

 0000 000 */

 00000000 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 244 0xf4 '\364' */

 00000000 */

 0000  00 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 245 0xf5 '\365' */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 000 0000 */

 0  00000 */

 00000000 */

 246 0xf6 '\366' */

 00000000 */

 00000000 */

 000 0000 */

 00000000 */

 0     00 */

 00000000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 247 0xf7 '\367' */

 00000000 */

 00000000 */

 00  0 00 */

 0 00 000 */

 00000000 */

 00  0 00 */

 0 00 000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 248 0xf8 '\370' */

 000  000 */

 00 00 00 */

 00 00 00 */

 000  000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 249 0xf9 '\371' */

 00000000 */

 00000000 */

 00000000 */

 000 0000 */

 00   000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 250 0xfa '\372' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 000 0000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 251 0xfb '\373' */

 00000000 */

 00000000 */

 0000  00 */

 0000 000 */

 000 0000 */

 0 0 0000 */

 00 00000 */

 00 00000 */

 00000000 */

 00000000 */

 00000000 */

 252 0xfc '\374' */

 00000000 */

 0 0 0000 */

 00 0 000 */

 00 0 000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 253 0xfd '\375' */

 00000000 */

 0   0000 */

 0000 000 */

 00 00000 */

 0    000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 254 0xfe '\376' */

 00000000 */

 00000000 */

 00   000 */

 00   000 */

 00   000 */

 00   000 */

 00   000 */

 00   000 */

 00000000 */

 00000000 */

 00000000 */

 255 0xff '\377' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 Try avoiding this font if possible unless on MAC */

 SPDX-License-Identifier: GPL-2.0

*********************************************/

                                            */

       Font file generated by cpi2fnt       */

       ------------------------------       */

       Combined with the alphanumeric       */

       portion of Greg Harp's old PEARL     */

       font (from earlier versions of       */

       linux-m86k) by John Shifflett        */

                                            */

*********************************************/

 0 0x00 '^@' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 1 0x01 '^A' */

 01111110 */

 10000001 */

 10100101 */

 10000001 */

 10111101 */

 10011001 */

 10000001 */

 01111110 */

 2 0x02 '^B' */

 01111110 */

 11111111 */

 11011011 */

 11111111 */

 11000011 */

 11100111 */

 11111111 */

 01111110 */

 3 0x03 '^C' */

 01101100 */

 11111110 */

 11111110 */

 11111110 */

 01111100 */

 00111000 */

 00010000 */

 00000000 */

 4 0x04 '^D' */

 00010000 */

 00111000 */

 01111100 */

 11111110 */

 01111100 */

 00111000 */

 00010000 */

 00000000 */

 5 0x05 '^E' */

 00111000 */

 01111100 */

 00111000 */

 11111110 */

 11111110 */

 11010110 */

 00010000 */

 00111000 */

 6 0x06 '^F' */

 00010000 */

 00111000 */

 01111100 */

 11111110 */

 11111110 */

 01111100 */

 00010000 */

 00111000 */

 7 0x07 '^G' */

 00000000 */

 00000000 */

 00011000 */

 00111100 */

 00111100 */

 00011000 */

 00000000 */

 00000000 */

 8 0x08 '^H' */

 11111111 */

 11111111 */

 11100111 */

 11000011 */

 11000011 */

 11100111 */

 11111111 */

 11111111 */

 9 0x09 '^I' */

 00000000 */

 00111100 */

 01100110 */

 01000010 */

 01000010 */

 01100110 */

 00111100 */

 00000000 */

 10 0x0a '^J' */

 11111111 */

 11000011 */

 10011001 */

 10111101 */

 10111101 */

 10011001 */

 11000011 */

 11111111 */

 11 0x0b '^K' */

 00001111 */

 00000111 */

 00001111 */

 01111101 */

 11001100 */

 11001100 */

 11001100 */

 01111000 */

 12 0x0c '^L' */

 00111100 */

 01100110 */

 01100110 */

 01100110 */

 00111100 */

 00011000 */

 01111110 */

 00011000 */

 13 0x0d '^M' */

 00111111 */

 00110011 */

 00111111 */

 00110000 */

 00110000 */

 01110000 */

 11110000 */

 11100000 */

 14 0x0e '^N' */

 01111111 */

 01100011 */

 01111111 */

 01100011 */

 01100011 */

 01100111 */

 11100110 */

 11000000 */

 15 0x0f '^O' */

 00011000 */

 11011011 */

 00111100 */

 11100111 */

 11100111 */

 00111100 */

 11011011 */

 00011000 */

 16 0x10 '^P' */

 10000000 */

 11100000 */

 11111000 */

 11111110 */

 11111000 */

 11100000 */

 10000000 */

 00000000 */

 17 0x11 '^Q' */

 00000010 */

 00001110 */

 00111110 */

 11111110 */

 00111110 */

 00001110 */

 00000010 */

 00000000 */

 18 0x12 '^R' */

 00011000 */

 00111100 */

 01111110 */

 00011000 */

 00011000 */

 01111110 */

 00111100 */

 00011000 */

 19 0x13 '^S' */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 00000000 */

 01100110 */

 00000000 */

 20 0x14 '^T' */

 01111111 */

 11011011 */

 11011011 */

 01111011 */

 00011011 */

 00011011 */

 00011011 */

 00000000 */

 21 0x15 '^U' */

 00111110 */

 01100001 */

 00111100 */

 01100110 */

 01100110 */

 00111100 */

 10000110 */

 01111100 */

 22 0x16 '^V' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01111110 */

 01111110 */

 01111110 */

 00000000 */

 23 0x17 '^W' */

 00011000 */

 00111100 */

 01111110 */

 00011000 */

 01111110 */

 00111100 */

 00011000 */

 11111111 */

 24 0x18 '^X' */

 00011000 */

 00111100 */

 01111110 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00000000 */

 25 0x19 '^Y' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 01111110 */

 00111100 */

 00011000 */

 00000000 */

 26 0x1a '^Z' */

 00000000 */

 00011000 */

 00001100 */

 11111110 */

 00001100 */

 00011000 */

 00000000 */

 00000000 */

 27 0x1b '^[' */

 00000000 */

 00110000 */

 01100000 */

 11111110 */

 01100000 */

 00110000 */

 00000000 */

 00000000 */

 28 0x1c '^\' */

 00000000 */

 00000000 */

 11000000 */

 11000000 */

 11000000 */

 11111110 */

 00000000 */

 00000000 */

 29 0x1d '^]' */

 00000000 */

 00100100 */

 01100110 */

 11111111 */

 01100110 */

 00100100 */

 00000000 */

 00000000 */

 30 0x1e '^^' */

 00000000 */

 00011000 */

 00111100 */

 01111110 */

 11111111 */

 11111111 */

 00000000 */

 00000000 */

 31 0x1f '^_' */

 00000000 */

 11111111 */

 11111111 */

 01111110 */

 00111100 */

 00011000 */

 00000000 */

 00000000 */

 32 0x20 ' ' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 33 0x21 '!' */

 00011000 */

 00111100 */

 00111100 */

 00111100 */

 00011000 */

 00000000 */

 00011000 */

 00000000 */

 34 0x22 '"' */

 01101100 */

 01101100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 35 0x23 '#' */

 01101100 */

 01101100 */

 11111110 */

 01101100 */

 11111110 */

 01101100 */

 01101100 */

 00000000 */

 36 0x24 '$' */

 00011000 */

 00111110 */

 01100000 */

 00111100 */

 00000110 */

 01111100 */

 00011000 */

 00000000 */

 37 0x25 '%' */

 00000000 */

 11000110 */

 11001100 */

 00011000 */

 00110000 */

 01100110 */

 11000110 */

 00000000 */

 38 0x26 '&' */

 00111000 */

 01101100 */

 01101000 */

 01110110 */

 11011100 */

 11001100 */

 01110110 */

 00000000 */

 39 0x27 ''' */

 00011000 */

 00011000 */

 00110000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 40 0x28 '(' */

 00001100 */

 00011000 */

 00110000 */

 00110000 */

 00110000 */

 00011000 */

 00001100 */

 00000000 */

 41 0x29 ')' */

 00110000 */

 00011000 */

 00001100 */

 00001100 */

 00001100 */

 00011000 */

 00110000 */

 00000000 */

 42 0x2a '*' */

 00000000 */

 01100110 */

 00111100 */

 11111111 */

 00111100 */

 01100110 */

 00000000 */

 00000000 */

 43 0x2b '+' */

 00000000 */

 00011000 */

 00011000 */

 01111110 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 44 0x2c ',' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 00110000 */

 45 0x2d '-' */

 00000000 */

 00000000 */

 00000000 */

 01111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 46 0x2e '.' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 00000000 */

 47 0x2f '/' */

 00000011 */

 00000110 */

 00001100 */

 00011000 */

 00110000 */

 01100000 */

 11000000 */

 00000000 */

 48 0x30 '0' */

 01111100 */

 11000110 */

 11011110 */

 11111110 */

 11110110 */

 11000110 */

 01111100 */

 00000000 */

 49 0x31 '1' */

 00011000 */

 01111000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00000000 */

 50 0x32 '2' */

 01111100 */

 11000110 */

 00001100 */

 00011000 */

 00110000 */

 01100000 */

 11111110 */

 00000000 */

 51 0x33 '3' */

 01111100 */

 11000110 */

 00000110 */

 00011100 */

 00000110 */

 11000110 */

 01111100 */

 00000000 */

 52 0x34 '4' */

 00011100 */

 00111100 */

 01101100 */

 11001100 */

 11111110 */

 00001100 */

 00001100 */

 00000000 */

 53 0x35 '5' */

 11111110 */

 11000000 */

 11111100 */

 00000110 */

 00000110 */

 11000110 */

 01111100 */

 00000000 */

 54 0x36 '6' */

 00111000 */

 01100000 */

 11000000 */

 11111100 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 55 0x37 '7' */

 11111110 */

 00000110 */

 00001100 */

 00011000 */

 00110000 */

 01100000 */

 01100000 */

 00000000 */

 56 0x38 '8' */

 01111100 */

 11000110 */

 11000110 */

 01111100 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 57 0x39 '9' */

 01111100 */

 11000110 */

 11000110 */

 01111110 */

 00000110 */

 00001100 */

 00111000 */

 00000000 */

 58 0x3a ':' */

 00000000 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 00000000 */

 59 0x3b ';' */

 00000000 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 00110000 */

 60 0x3c '<' */

 00001100 */

 00011000 */

 00110000 */

 01100000 */

 00110000 */

 00011000 */

 00001100 */

 00000000 */

 61 0x3d '=' */

 00000000 */

 00000000 */

 01111110 */

 00000000 */

 00000000 */

 01111110 */

 00000000 */

 00000000 */

 62 0x3e '>' */

 00110000 */

 00011000 */

 00001100 */

 00000110 */

 00001100 */

 00011000 */

 00110000 */

 00000000 */

 63 0x3f '?' */

 00111100 */

 01100110 */

 00000110 */

 00001100 */

 00011000 */

 00000000 */

 00011000 */

 00000000 */

 64 0x40 '@' */

 01111100 */

 11000110 */

 11011110 */

 11011110 */

 11011110 */

 11000000 */

 01111100 */

 00000000 */

 65 0x41 'A' */

 00010000 */

 00111000 */

 01101100 */

 11000110 */

 11111110 */

 11000110 */

 11000110 */

 00000000 */

 66 0x42 'B' */

 11111100 */

 11000110 */

 11000110 */

 11111100 */

 11000110 */

 11000110 */

 11111100 */

 00000000 */

 67 0x43 'C' */

 01111100 */

 11000110 */

 11000000 */

 11000000 */

 11000000 */

 11000110 */

 01111100 */

 00000000 */

 68 0x44 'D' */

 11111100 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11111100 */

 00000000 */

 69 0x45 'E' */

 11111110 */

 11000000 */

 11000000 */

 11111000 */

 11000000 */

 11000000 */

 11111110 */

 00000000 */

 70 0x46 'F' */

 11111110 */

 11000000 */

 11000000 */

 11111000 */

 11000000 */

 11000000 */

 11000000 */

 00000000 */

 71 0x47 'G' */

 01111100 */

 11000110 */

 11000000 */

 11001110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 72 0x48 'H' */

 11000110 */

 11000110 */

 11000110 */

 11111110 */

 11000110 */

 11000110 */

 11000110 */

 00000000 */

 73 0x49 'I' */

 01111110 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 01111110 */

 00000000 */

 74 0x4a 'J' */

 00000110 */

 00000110 */

 00000110 */

 00000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 75 0x4b 'K' */

 11000110 */

 11001100 */

 11011000 */

 11110000 */

 11011000 */

 11001100 */

 11000110 */

 00000000 */

 76 0x4c 'L' */

 11000000 */

 11000000 */

 11000000 */

 11000000 */

 11000000 */

 11000000 */

 11111110 */

 00000000 */

 77 0x4d 'M' */

 10000010 */

 11000110 */

 11101110 */

 11111110 */

 11010110 */

 11000110 */

 11000110 */

 00000000 */

 78 0x4e 'N' */

 11000110 */

 11100110 */

 11110110 */

 11011110 */

 11001110 */

 11000110 */

 11000110 */

 00000000 */

 79 0x4f 'O' */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 80 0x50 'P' */

 11111100 */

 11000110 */

 11000110 */

 11111100 */

 11000000 */

 11000000 */

 11000000 */

 00000000 */

 81 0x51 'Q' */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 11110110 */

 11011110 */

 01111100 */

 00000110 */

 82 0x52 'R' */

 11111100 */

 11000110 */

 11000110 */

 11111100 */

 11011000 */

 11001100 */

 11000110 */

 00000000 */

 83 0x53 'S' */

 01111100 */

 11000110 */

 01100000 */

 00111000 */

 00001100 */

 11000110 */

 01111100 */

 00000000 */

 84 0x54 'T' */

 01111110 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00000000 */

 85 0x55 'U' */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 86 0x56 'V' */

 11000011 */

 11000011 */

 01100110 */

 01100110 */

 00111100 */

 00111100 */

 00011000 */

 00000000 */

 87 0x57 'W' */

 11000110 */

 11000110 */

 11000110 */

 11010110 */

 11111110 */

 11101110 */

 11000110 */

 00000000 */

 88 0x58 'X' */

 11000011 */

 01100110 */

 00111100 */

 00011000 */

 00111100 */

 01100110 */

 11000011 */

 00000000 */

 89 0x59 'Y' */

 11000011 */

 11000011 */

 01100110 */

 00111100 */

 00011000 */

 00011000 */

 00011000 */

 00000000 */

 90 0x5a 'Z' */

 11111110 */

 00000110 */

 00001100 */

 00011000 */

 00110000 */

 01100000 */

 11111110 */

 00000000 */

 91 0x5b '[' */

 00111100 */

 00110000 */

 00110000 */

 00110000 */

 00110000 */

 00110000 */

 00111100 */

 00000000 */

 92 0x5c '\' */

 11000000 */

 01100000 */

 00110000 */

 00011000 */

 00001100 */

 00000110 */

 00000011 */

 00000000 */

 93 0x5d ']' */

 00111100 */

 00001100 */

 00001100 */

 00001100 */

 00001100 */

 00001100 */

 00111100 */

 00000000 */

 94 0x5e '^' */

 00010000 */

 00111000 */

 01101100 */

 11000110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 95 0x5f '_' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111110 */

 96 0x60 '`' */

 00011000 */

 00011000 */

 00001100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 97 0x61 'a' */

 00000000 */

 00000000 */

 01111100 */

 00000110 */

 01111110 */

 11000110 */

 01111110 */

 00000000 */

 98 0x62 'b' */

 11000000 */

 11000000 */

 11111100 */

 11000110 */

 11000110 */

 11000110 */

 11111100 */

 00000000 */

 99 0x63 'c' */

 00000000 */

 00000000 */

 01111100 */

 11000110 */

 11000000 */

 11000110 */

 01111100 */

 00000000 */

 100 0x64 'd' */

 00000110 */

 00000110 */

 01111110 */

 11000110 */

 11000110 */

 11000110 */

 01111110 */

 00000000 */

 101 0x65 'e' */

 00000000 */

 00000000 */

 01111100 */

 11000110 */

 11111110 */

 11000000 */

 01111100 */

 00000000 */

 102 0x66 'f' */

 00111100 */

 01100110 */

 01100000 */

 11110000 */

 01100000 */

 01100000 */

 01100000 */

 00000000 */

 103 0x67 'g' */

 00000000 */

 00000000 */

 01111110 */

 11000110 */

 11000110 */

 01111110 */

 00000110 */

 01111100 */

 104 0x68 'h' */

 11000000 */

 11000000 */

 11111100 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 00000000 */

 105 0x69 'i' */

 00011000 */

 00000000 */

 00111000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00000000 */

 106 0x6a 'j' */

 00000110 */

 00000000 */

 00000110 */

 00000110 */

 00000110 */

 00000110 */

 11000110 */

 01111100 */

 107 0x6b 'k' */

 11000000 */

 11000000 */

 11001100 */

 11011000 */

 11110000 */

 11011000 */

 11001100 */

 00000000 */

 108 0x6c 'l' */

 00111000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00000000 */

 109 0x6d 'm' */

 00000000 */

 00000000 */

 11101100 */

 11111110 */

 11010110 */

 11000110 */

 11000110 */

 00000000 */

 110 0x6e 'n' */

 00000000 */

 00000000 */

 11111100 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 00000000 */

 111 0x6f 'o' */

 00000000 */

 00000000 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 112 0x70 'p' */

 00000000 */

 00000000 */

 11111100 */

 11000110 */

 11000110 */

 11111100 */

 11000000 */

 11000000 */

 113 0x71 'q' */

 00000000 */

 00000000 */

 01111110 */

 11000110 */

 11000110 */

 01111110 */

 00000110 */

 00000110 */

 114 0x72 'r' */

 00000000 */

 00000000 */

 11011100 */

 11100110 */

 11000000 */

 11000000 */

 11000000 */

 00000000 */

 115 0x73 's' */

 00000000 */

 00000000 */

 01111110 */

 11000000 */

 01111100 */

 00000110 */

 11111100 */

 00000000 */

 116 0x74 't' */

 00110000 */

 00110000 */

 01111100 */

 00110000 */

 00110000 */

 00110110 */

 00011100 */

 00000000 */

 117 0x75 'u' */

 00000000 */

 00000000 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 118 0x76 'v' */

 00000000 */

 00000000 */

 11000110 */

 11000110 */

 11000110 */

 01101100 */

 00111000 */

 00000000 */

 119 0x77 'w' */

 00000000 */

 00000000 */

 11000110 */

 11000110 */

 11010110 */

 11111110 */

 01101100 */

 00000000 */

 120 0x78 'x' */

 00000000 */

 00000000 */

 11000110 */

 01101100 */

 00111000 */

 01101100 */

 11000110 */

 00000000 */

 121 0x79 'y' */

 00000000 */

 00000000 */

 11000011 */

 01100110 */

 00111100 */

 00011000 */

 00110000 */

 01100000 */

 122 0x7a 'z' */

 00000000 */

 00000000 */

 11111110 */

 00001100 */

 00111000 */

 01100000 */

 11111110 */

 00000000 */

 123 0x7b '{' */

 00001110 */

 00011000 */

 00011000 */

 01110000 */

 00011000 */

 00011000 */

 00001110 */

 00000000 */

 124 0x7c '|' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00000000 */

 125 0x7d '}' */

 01110000 */

 00011000 */

 00011000 */

 00001110 */

 00011000 */

 00011000 */

 01110000 */

 00000000 */

 126 0x7e '~' */

 01110010 */

 10011100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 127 0x7f '' */

 00000000 */

 00010000 */

 00111000 */

 01101100 */

 11000110 */

 11000110 */

 11111110 */

 00000000 */

 128 0x80 'Ç' */

 01111100 */

 11000110 */

 11000000 */

 11000000 */

 11000110 */

 01111100 */

 00001100 */

 01111000 */

 129 0x81 'ü' */

 11001100 */

 00000000 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 01110110 */

 00000000 */

 130 0x82 'é' */

 00001100 */

 00011000 */

 01111100 */

 11000110 */

 11111110 */

 11000000 */

 01111100 */

 00000000 */

 131 0x83 'â' */

 01111100 */

 10000010 */

 01111000 */

 00001100 */

 01111100 */

 11001100 */

 01110110 */

 00000000 */

 132 0x84 'ä' */

 11000110 */

 00000000 */

 01111000 */

 00001100 */

 01111100 */

 11001100 */

 01110110 */

 00000000 */

 133 0x85 'à' */

 00110000 */

 00011000 */

 01111000 */

 00001100 */

 01111100 */

 11001100 */

 01110110 */

 00000000 */

 134 0x86 'å' */

 00110000 */

 00110000 */

 01111000 */

 00001100 */

 01111100 */

 11001100 */

 01110110 */

 00000000 */

 135 0x87 'ç' */

 00000000 */

 00000000 */

 01111110 */

 11000000 */

 11000000 */

 01111110 */

 00001100 */

 00111000 */

 136 0x88 'ê' */

 01111100 */

 10000010 */

 01111100 */

 11000110 */

 11111110 */

 11000000 */

 01111100 */

 00000000 */

 137 0x89 'ë' */

 11000110 */

 00000000 */

 01111100 */

 11000110 */

 11111110 */

 11000000 */

 01111100 */

 00000000 */

 138 0x8a 'è' */

 00110000 */

 00011000 */

 01111100 */

 11000110 */

 11111110 */

 11000000 */

 01111100 */

 00000000 */

 139 0x8b 'ï' */

 01100110 */

 00000000 */

 00111000 */

 00011000 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 140 0x8c 'î' */

 01111100 */

 10000010 */

 00111000 */

 00011000 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 141 0x8d 'ì' */

 00110000 */

 00011000 */

 00000000 */

 00111000 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 142 0x8e 'Ä' */

 11000110 */

 00111000 */

 01101100 */

 11000110 */

 11111110 */

 11000110 */

 11000110 */

 00000000 */

 143 0x8f 'Å' */

 00111000 */

 01101100 */

 01111100 */

 11000110 */

 11111110 */

 11000110 */

 11000110 */

 00000000 */

 144 0x90 'É' */

 00011000 */

 00110000 */

 11111110 */

 11000000 */

 11111000 */

 11000000 */

 11111110 */

 00000000 */

 145 0x91 'æ' */

 00000000 */

 00000000 */

 01111110 */

 00011000 */

 01111110 */

 11011000 */

 01111110 */

 00000000 */

 146 0x92 'Æ' */

 00111110 */

 01101100 */

 11001100 */

 11111110 */

 11001100 */

 11001100 */

 11001110 */

 00000000 */

 147 0x93 'ô' */

 01111100 */

 10000010 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 148 0x94 'ö' */

 11000110 */

 00000000 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 149 0x95 'ò' */

 00110000 */

 00011000 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 150 0x96 'û' */

 01111000 */

 10000100 */

 00000000 */

 11001100 */

 11001100 */

 11001100 */

 01110110 */

 00000000 */

 151 0x97 'ù' */

 01100000 */

 00110000 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 01110110 */

 00000000 */

 152 0x98 'ÿ' */

 11000110 */

 00000000 */

 11000110 */

 11000110 */

 11000110 */

 01111110 */

 00000110 */

 11111100 */

 153 0x99 'Ö' */

 11000110 */

 00111000 */

 01101100 */

 11000110 */

 11000110 */

 01101100 */

 00111000 */

 00000000 */

 154 0x9a 'Ü' */

 11000110 */

 00000000 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 155 0x9b '¢' */

 00011000 */

 00011000 */

 01111110 */

 11000000 */

 11000000 */

 01111110 */

 00011000 */

 00011000 */

 156 0x9c '£' */

 00111000 */

 01101100 */

 01100100 */

 11110000 */

 01100000 */

 01100110 */

 11111100 */

 00000000 */

 157 0x9d '¥' */

 01100110 */

 01100110 */

 00111100 */

 01111110 */

 00011000 */

 01111110 */

 00011000 */

 00011000 */

 158 0x9e '₧' */

 11111000 */

 11001100 */

 11001100 */

 11111010 */

 11000110 */

 11001111 */

 11000110 */

 11000111 */

 159 0x9f 'ƒ' */

 00001110 */

 00011011 */

 00011000 */

 00111100 */

 00011000 */

 11011000 */

 01110000 */

 00000000 */

 160 0xa0 'á' */

 00011000 */

 00110000 */

 01111000 */

 00001100 */

 01111100 */

 11001100 */

 01110110 */

 00000000 */

 161 0xa1 'í' */

 00001100 */

 00011000 */

 00000000 */

 00111000 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 162 0xa2 'ó' */

 00001100 */

 00011000 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 163 0xa3 'ú' */

 00011000 */

 00110000 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 01110110 */

 00000000 */

 164 0xa4 'ñ' */

 01110110 */

 11011100 */

 00000000 */

 11011100 */

 01100110 */

 01100110 */

 01100110 */

 00000000 */

 165 0xa5 'Ñ' */

 01110110 */

 11011100 */

 00000000 */

 11100110 */

 11110110 */

 11011110 */

 11001110 */

 00000000 */

 166 0xa6 'ª' */

 00111100 */

 01101100 */

 01101100 */

 00111110 */

 00000000 */

 01111110 */

 00000000 */

 00000000 */

 167 0xa7 'º' */

 00111000 */

 01101100 */

 01101100 */

 00111000 */

 00000000 */

 01111100 */

 00000000 */

 00000000 */

 168 0xa8 '¿' */

 00011000 */

 00000000 */

 00011000 */

 00011000 */

 00110000 */

 01100011 */

 00111110 */

 00000000 */

 169 0xa9 '⌐' */

 00000000 */

 00000000 */

 00000000 */

 11111110 */

 11000000 */

 11000000 */

 00000000 */

 00000000 */

 170 0xaa '¬' */

 00000000 */

 00000000 */

 00000000 */

 11111110 */

 00000110 */

 00000110 */

 00000000 */

 00000000 */

 171 0xab '½' */

 01100011 */

 11100110 */

 01101100 */

 01111110 */

 00110011 */

 01100110 */

 11001100 */

 00001111 */

 172 0xac '¼' */

 01100011 */

 11100110 */

 01101100 */

 01111010 */

 00110110 */

 01101010 */

 11011111 */

 00000110 */

 173 0xad '¡' */

 00011000 */

 00000000 */

 00011000 */

 00011000 */

 00111100 */

 00111100 */

 00011000 */

 00000000 */

 174 0xae '«' */

 00000000 */

 00110011 */

 01100110 */

 11001100 */

 01100110 */

 00110011 */

 00000000 */

 00000000 */

 175 0xaf '»' */

 00000000 */

 11001100 */

 01100110 */

 00110011 */

 01100110 */

 11001100 */

 00000000 */

 00000000 */

 176 0xb0 '░' */

 00100010 */

 10001000 */

 00100010 */

 10001000 */

 00100010 */

 10001000 */

 00100010 */

 10001000 */

 177 0xb1 '▒' */

 01010101 */

 10101010 */

 01010101 */

 10101010 */

 01010101 */

 10101010 */

 01010101 */

 10101010 */

 178 0xb2 '▓' */

 01110111 */

 11011101 */

 01110111 */

 11011101 */

 01110111 */

 11011101 */

 01110111 */

 11011101 */

 179 0xb3 '│' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 180 0xb4 '┤' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 11111000 */

 00011000 */

 00011000 */

 00011000 */

 181 0xb5 '╡' */

 00011000 */

 00011000 */

 11111000 */

 00011000 */

 11111000 */

 00011000 */

 00011000 */

 00011000 */

 182 0xb6 '╢' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 11110110 */

 00110110 */

 00110110 */

 00110110 */

 183 0xb7 '╖' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111110 */

 00110110 */

 00110110 */

 00110110 */

 184 0xb8 '╕' */

 00000000 */

 00000000 */

 11111000 */

 00011000 */

 11111000 */

 00011000 */

 00011000 */

 00011000 */

 185 0xb9 '╣' */

 00110110 */

 00110110 */

 11110110 */

 00000110 */

 11110110 */

 00110110 */

 00110110 */

 00110110 */

 186 0xba '║' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 187 0xbb '╗' */

 00000000 */

 00000000 */

 11111110 */

 00000110 */

 11110110 */

 00110110 */

 00110110 */

 00110110 */

 188 0xbc '╝' */

 00110110 */

 00110110 */

 11110110 */

 00000110 */

 11111110 */

 00000000 */

 00000000 */

 00000000 */

 189 0xbd '╜' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 11111110 */

 00000000 */

 00000000 */

 00000000 */

 190 0xbe '╛' */

 00011000 */

 00011000 */

 11111000 */

 00011000 */

 11111000 */

 00000000 */

 00000000 */

 00000000 */

 191 0xbf '┐' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111000 */

 00011000 */

 00011000 */

 00011000 */

 192 0xc0 '└' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011111 */

 00000000 */

 00000000 */

 00000000 */

 193 0xc1 '┴' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 11111111 */

 00000000 */

 00000000 */

 00000000 */

 194 0xc2 '┬' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111111 */

 00011000 */

 00011000 */

 00011000 */

 195 0xc3 '├' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011111 */

 00011000 */

 00011000 */

 00011000 */

 196 0xc4 '─' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111111 */

 00000000 */

 00000000 */

 00000000 */

 197 0xc5 '┼' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 11111111 */

 00011000 */

 00011000 */

 00011000 */

 198 0xc6 '╞' */

 00011000 */

 00011000 */

 00011111 */

 00011000 */

 00011111 */

 00011000 */

 00011000 */

 00011000 */

 199 0xc7 '╟' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110111 */

 00110110 */

 00110110 */

 00110110 */

 200 0xc8 '╚' */

 00110110 */

 00110110 */

 00110111 */

 00110000 */

 00111111 */

 00000000 */

 00000000 */

 00000000 */

 201 0xc9 '╔' */

 00000000 */

 00000000 */

 00111111 */

 00110000 */

 00110111 */

 00110110 */

 00110110 */

 00110110 */

 202 0xca '╩' */

 00110110 */

 00110110 */

 11110111 */

 00000000 */

 11111111 */

 00000000 */

 00000000 */

 00000000 */

 203 0xcb '╦' */

 00000000 */

 00000000 */

 11111111 */

 00000000 */

 11110111 */

 00110110 */

 00110110 */

 00110110 */

 204 0xcc '╠' */

 00110110 */

 00110110 */

 00110111 */

 00110000 */

 00110111 */

 00110110 */

 00110110 */

 00110110 */

 205 0xcd '═' */

 00000000 */

 00000000 */

 11111111 */

 00000000 */

 11111111 */

 00000000 */

 00000000 */

 00000000 */

 206 0xce '╬' */

 00110110 */

 00110110 */

 11110111 */

 00000000 */

 11110111 */

 00110110 */

 00110110 */

 00110110 */

 207 0xcf '╧' */

 00011000 */

 00011000 */

 11111111 */

 00000000 */

 11111111 */

 00000000 */

 00000000 */

 00000000 */

 208 0xd0 '╨' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 11111111 */

 00000000 */

 00000000 */

 00000000 */

 209 0xd1 '╤' */

 00000000 */

 00000000 */

 11111111 */

 00000000 */

 11111111 */

 00011000 */

 00011000 */

 00011000 */

 210 0xd2 '╥' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111111 */

 00110110 */

 00110110 */

 00110110 */

 211 0xd3 '╙' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00111111 */

 00000000 */

 00000000 */

 00000000 */

 212 0xd4 '╘' */

 00011000 */

 00011000 */

 00011111 */

 00011000 */

 00011111 */

 00000000 */

 00000000 */

 00000000 */

 213 0xd5 '╒' */

 00000000 */

 00000000 */

 00011111 */

 00011000 */

 00011111 */

 00011000 */

 00011000 */

 00011000 */

 214 0xd6 '╓' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00111111 */

 00110110 */

 00110110 */

 00110110 */

 215 0xd7 '╫' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 11111111 */

 00110110 */

 00110110 */

 00110110 */

 216 0xd8 '╪' */

 00011000 */

 00011000 */

 11111111 */

 00011000 */

 11111111 */

 00011000 */

 00011000 */

 00011000 */

 217 0xd9 '┘' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 11111000 */

 00000000 */

 00000000 */

 00000000 */

 218 0xda '┌' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00011111 */

 00011000 */

 00011000 */

 00011000 */

 219 0xdb '█' */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 220 0xdc '▄' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 221 0xdd '▌' */

 11110000 */

 11110000 */

 11110000 */

 11110000 */

 11110000 */

 11110000 */

 11110000 */

 11110000 */

 222 0xde '▐' */

 00001111 */

 00001111 */

 00001111 */

 00001111 */

 00001111 */

 00001111 */

 00001111 */

 00001111 */

 223 0xdf '▀' */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 224 0xe0 'α' */

 00000000 */

 00000000 */

 01110110 */

 11011100 */

 11001000 */

 11011100 */

 01110110 */

 00000000 */

 225 0xe1 'ß' */

 01111000 */

 11001100 */

 11001100 */

 11011000 */

 11001100 */

 11000110 */

 11001100 */

 00000000 */

 226 0xe2 'Γ' */

 11111110 */

 11000110 */

 11000000 */

 11000000 */

 11000000 */

 11000000 */

 11000000 */

 00000000 */

 227 0xe3 'π' */

 00000000 */

 00000000 */

 11111110 */

 01101100 */

 01101100 */

 01101100 */

 01101100 */

 00000000 */

 228 0xe4 'Σ' */

 11111110 */

 11000110 */

 01100000 */

 00110000 */

 01100000 */

 11000110 */

 11111110 */

 00000000 */

 229 0xe5 'σ' */

 00000000 */

 00000000 */

 01111110 */

 11011000 */

 11011000 */

 11011000 */

 01110000 */

 00000000 */

 230 0xe6 'µ' */

 00000000 */

 00000000 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 01111100 */

 11000000 */

 231 0xe7 'τ' */

 00000000 */

 01110110 */

 11011100 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00000000 */

 232 0xe8 'Φ' */

 01111110 */

 00011000 */

 00111100 */

 01100110 */

 01100110 */

 00111100 */

 00011000 */

 01111110 */

 233 0xe9 'Θ' */

 00111000 */

 01101100 */

 11000110 */

 11111110 */

 11000110 */

 01101100 */

 00111000 */

 00000000 */

 234 0xea 'Ω' */

 00111000 */

 01101100 */

 11000110 */

 11000110 */

 01101100 */

 01101100 */

 11101110 */

 00000000 */

 235 0xeb 'δ' */

 00001110 */

 00011000 */

 00001100 */

 00111110 */

 01100110 */

 01100110 */

 00111100 */

 00000000 */

 236 0xec '∞' */

 00000000 */

 00000000 */

 01111110 */

 11011011 */

 11011011 */

 01111110 */

 00000000 */

 00000000 */

 237 0xed 'φ' */

 00000110 */

 00001100 */

 01111110 */

 11011011 */

 11011011 */

 01111110 */

 01100000 */

 11000000 */

 238 0xee 'ε' */

 00011110 */

 00110000 */

 01100000 */

 01111110 */

 01100000 */

 00110000 */

 00011110 */

 00000000 */

 239 0xef '∩' */

 00000000 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 00000000 */

 240 0xf0 '≡' */

 00000000 */

 11111110 */

 00000000 */

 11111110 */

 00000000 */

 11111110 */

 00000000 */

 00000000 */

 241 0xf1 '±' */

 00011000 */

 00011000 */

 01111110 */

 00011000 */

 00011000 */

 00000000 */

 01111110 */

 00000000 */

 242 0xf2 '≥' */

 00110000 */

 00011000 */

 00001100 */

 00011000 */

 00110000 */

 00000000 */

 01111110 */

 00000000 */

 243 0xf3 '≤' */

 00001100 */

 00011000 */

 00110000 */

 00011000 */

 00001100 */

 00000000 */

 01111110 */

 00000000 */

 244 0xf4 '⌠' */

 00001110 */

 00011011 */

 00011011 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 245 0xf5 '⌡' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 11011000 */

 11011000 */

 01110000 */

 246 0xf6 '÷' */

 00000000 */

 00011000 */

 00000000 */

 01111110 */

 00000000 */

 00011000 */

 00000000 */

 00000000 */

 247 0xf7 '≈' */

 00000000 */

 01110110 */

 11011100 */

 00000000 */

 01110110 */

 11011100 */

 00000000 */

 00000000 */

 248 0xf8 '°' */

 00111000 */

 01101100 */

 01101100 */

 00111000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 249 0xf9 '·' */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 250 0xfa '•' */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 251 0xfb '√' */

 00001111 */

 00001100 */

 00001100 */

 00001100 */

 11101100 */

 01101100 */

 00111100 */

 00011100 */

 252 0xfc 'ⁿ' */

 01101100 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00000000 */

 00000000 */

 00000000 */

 253 0xfd '²' */

 01111000 */

 00001100 */

 00011000 */

 00110000 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 254 0xfe '■' */

 00000000 */

 00000000 */

 00111100 */

 00111100 */

 00111100 */

 00111100 */

 00000000 */

 00000000 */

 255 0xff ' ' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 SPDX-License-Identifier: GPL-2.0

*********************************************/

                                            */

       Font file generated by cpi2fnt       */

                                            */

*********************************************/

 0 0x00 '^@' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 1 0x01 '^A' */

 00000000 */

 00000000 */

 01111110 */

 10000001 */

 10100101 */

 10000001 */

 10000001 */

 10111101 */

 10011001 */

 10000001 */

 10000001 */

 01111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 2 0x02 '^B' */

 00000000 */

 00000000 */

 01111110 */

 11111111 */

 11011011 */

 11111111 */

 11111111 */

 11000011 */

 11100111 */

 11111111 */

 11111111 */

 01111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 3 0x03 '^C' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01101100 */

 11111110 */

 11111110 */

 11111110 */

 11111110 */

 01111100 */

 00111000 */

 00010000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 4 0x04 '^D' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00010000 */

 00111000 */

 01111100 */

 11111110 */

 01111100 */

 00111000 */

 00010000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 5 0x05 '^E' */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00111100 */

 00111100 */

 11100111 */

 11100111 */

 11100111 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 6 0x06 '^F' */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00111100 */

 01111110 */

 11111111 */

 11111111 */

 01111110 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 7 0x07 '^G' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00111100 */

 00111100 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 8 0x08 '^H' */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11100111 */

 11000011 */

 11000011 */

 11100111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 9 0x09 '^I' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00111100 */

 01100110 */

 01000010 */

 01000010 */

 01100110 */

 00111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 10 0x0a '^J' */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11000011 */

 10011001 */

 10111101 */

 10111101 */

 10011001 */

 11000011 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11 0x0b '^K' */

 00000000 */

 00000000 */

 00011110 */

 00001110 */

 00011010 */

 00110010 */

 01111000 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 01111000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 12 0x0c '^L' */

 00000000 */

 00000000 */

 00111100 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 00111100 */

 00011000 */

 01111110 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 13 0x0d '^M' */

 00000000 */

 00000000 */

 00111111 */

 00110011 */

 00111111 */

 00110000 */

 00110000 */

 00110000 */

 00110000 */

 01110000 */

 11110000 */

 11100000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 14 0x0e '^N' */

 00000000 */

 00000000 */

 01111111 */

 01100011 */

 01111111 */

 01100011 */

 01100011 */

 01100011 */

 01100011 */

 01100111 */

 11100111 */

 11100110 */

 11000000 */

 00000000 */

 00000000 */

 00000000 */

 15 0x0f '^O' */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 11011011 */

 00111100 */

 11100111 */

 00111100 */

 11011011 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 16 0x10 '^P' */

 00000000 */

 10000000 */

 11000000 */

 11100000 */

 11110000 */

 11111000 */

 11111110 */

 11111000 */

 11110000 */

 11100000 */

 11000000 */

 10000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 17 0x11 '^Q' */

 00000000 */

 00000010 */

 00000110 */

 00001110 */

 00011110 */

 00111110 */

 11111110 */

 00111110 */

 00011110 */

 00001110 */

 00000110 */

 00000010 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 18 0x12 '^R' */

 00000000 */

 00000000 */

 00011000 */

 00111100 */

 01111110 */

 00011000 */

 00011000 */

 00011000 */

 01111110 */

 00111100 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 19 0x13 '^S' */

 00000000 */

 00000000 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 00000000 */

 01100110 */

 01100110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 20 0x14 '^T' */

 00000000 */

 00000000 */

 01111111 */

 11011011 */

 11011011 */

 11011011 */

 01111011 */

 00011011 */

 00011011 */

 00011011 */

 00011011 */

 00011011 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 21 0x15 '^U' */

 00000000 */

 01111100 */

 11000110 */

 01100000 */

 00111000 */

 01101100 */

 11000110 */

 11000110 */

 01101100 */

 00111000 */

 00001100 */

 11000110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 22 0x16 '^V' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111110 */

 11111110 */

 11111110 */

 11111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 23 0x17 '^W' */

 00000000 */

 00000000 */

 00011000 */

 00111100 */

 01111110 */

 00011000 */

 00011000 */

 00011000 */

 01111110 */

 00111100 */

 00011000 */

 01111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 24 0x18 '^X' */

 00000000 */

 00000000 */

 00011000 */

 00111100 */

 01111110 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 25 0x19 '^Y' */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 01111110 */

 00111100 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 26 0x1a '^Z' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00001100 */

 11111110 */

 00001100 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 27 0x1b '^[' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00110000 */

 01100000 */

 11111110 */

 01100000 */

 00110000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 28 0x1c '^\' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11000000 */

 11000000 */

 11000000 */

 11111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 29 0x1d '^]' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00101000 */

 01101100 */

 11111110 */

 01101100 */

 00101000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 30 0x1e '^^' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00010000 */

 00111000 */

 00111000 */

 01111100 */

 01111100 */

 11111110 */

 11111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 31 0x1f '^_' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111110 */

 11111110 */

 01111100 */

 01111100 */

 00111000 */

 00111000 */

 00010000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 32 0x20 ' ' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 33 0x21 '!' */

 00000000 */

 00000000 */

 00011000 */

 00111100 */

 00111100 */

 00111100 */

 00011000 */

 00011000 */

 00011000 */

 00000000 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 34 0x22 '"' */

 00000000 */

 01100110 */

 01100110 */

 01100110 */

 00100100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 35 0x23 '#' */

 00000000 */

 00000000 */

 00000000 */

 01101100 */

 01101100 */

 11111110 */

 01101100 */

 01101100 */

 01101100 */

 11111110 */

 01101100 */

 01101100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 36 0x24 '$' */

 00011000 */

 00011000 */

 01111100 */

 11000110 */

 11000010 */

 11000000 */

 01111100 */

 00000110 */

 00000110 */

 10000110 */

 11000110 */

 01111100 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 37 0x25 '%' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11000010 */

 11000110 */

 00001100 */

 00011000 */

 00110000 */

 01100000 */

 11000110 */

 10000110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 38 0x26 '&' */

 00000000 */

 00000000 */

 00111000 */

 01101100 */

 01101100 */

 00111000 */

 01110110 */

 11011100 */

 11001100 */

 11001100 */

 11001100 */

 01110110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 39 0x27 ''' */

 00000000 */

 00110000 */

 00110000 */

 00110000 */

 01100000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 40 0x28 '(' */

 00000000 */

 00000000 */

 00001100 */

 00011000 */

 00110000 */

 00110000 */

 00110000 */

 00110000 */

 00110000 */

 00110000 */

 00011000 */

 00001100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 41 0x29 ')' */

 00000000 */

 00000000 */

 00110000 */

 00011000 */

 00001100 */

 00001100 */

 00001100 */

 00001100 */

 00001100 */

 00001100 */

 00011000 */

 00110000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 42 0x2a '*' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01100110 */

 00111100 */

 11111111 */

 00111100 */

 01100110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 43 0x2b '+' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 01111110 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 44 0x2c ',' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 00011000 */

 00110000 */

 00000000 */

 00000000 */

 00000000 */

 45 0x2d '-' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 46 0x2e '.' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 47 0x2f '/' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000010 */

 00000110 */

 00001100 */

 00011000 */

 00110000 */

 01100000 */

 11000000 */

 10000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 48 0x30 '0' */

 00000000 */

 00000000 */

 00111000 */

 01101100 */

 11000110 */

 11000110 */

 11010110 */

 11010110 */

 11000110 */

 11000110 */

 01101100 */

 00111000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 49 0x31 '1' */

 00000000 */

 00000000 */

 00011000 */

 00111000 */

 01111000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 01111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 50 0x32 '2' */

 00000000 */

 00000000 */

 01111100 */

 11000110 */

 00000110 */

 00001100 */

 00011000 */

 00110000 */

 01100000 */

 11000000 */

 11000110 */

 11111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 51 0x33 '3' */

 00000000 */

 00000000 */

 01111100 */

 11000110 */

 00000110 */

 00000110 */

 00111100 */

 00000110 */

 00000110 */

 00000110 */

 11000110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 52 0x34 '4' */

 00000000 */

 00000000 */

 00001100 */

 00011100 */

 00111100 */

 01101100 */

 11001100 */

 11111110 */

 00001100 */

 00001100 */

 00001100 */

 00011110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 53 0x35 '5' */

 00000000 */

 00000000 */

 11111110 */

 11000000 */

 11000000 */

 11000000 */

 11111100 */

 00000110 */

 00000110 */

 00000110 */

 11000110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 54 0x36 '6' */

 00000000 */

 00000000 */

 00111000 */

 01100000 */

 11000000 */

 11000000 */

 11111100 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 55 0x37 '7' */

 00000000 */

 00000000 */

 11111110 */

 11000110 */

 00000110 */

 00000110 */

 00001100 */

 00011000 */

 00110000 */

 00110000 */

 00110000 */

 00110000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 56 0x38 '8' */

 00000000 */

 00000000 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 57 0x39 '9' */

 00000000 */

 00000000 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 01111110 */

 00000110 */

 00000110 */

 00000110 */

 00001100 */

 01111000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 58 0x3a ':' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 59 0x3b ';' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 00110000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 60 0x3c '<' */

 00000000 */

 00000000 */

 00000000 */

 00000110 */

 00001100 */

 00011000 */

 00110000 */

 01100000 */

 00110000 */

 00011000 */

 00001100 */

 00000110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 61 0x3d '=' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01111110 */

 00000000 */

 00000000 */

 01111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 62 0x3e '>' */

 00000000 */

 00000000 */

 00000000 */

 01100000 */

 00110000 */

 00011000 */

 00001100 */

 00000110 */

 00001100 */

 00011000 */

 00110000 */

 01100000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 63 0x3f '?' */

 00000000 */

 00000000 */

 01111100 */

 11000110 */

 11000110 */

 00001100 */

 00011000 */

 00011000 */

 00011000 */

 00000000 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 64 0x40 '@' */

 00000000 */

 00000000 */

 00000000 */

 01111100 */

 11000110 */

 11000110 */

 11011110 */

 11011110 */

 11011110 */

 11011100 */

 11000000 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 65 0x41 'A' */

 00000000 */

 00000000 */

 00010000 */

 00111000 */

 01101100 */

 11000110 */

 11000110 */

 11111110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 66 0x42 'B' */

 00000000 */

 00000000 */

 11111100 */

 01100110 */

 01100110 */

 01100110 */

 01111100 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 11111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 67 0x43 'C' */

 00000000 */

 00000000 */

 00111100 */

 01100110 */

 11000010 */

 11000000 */

 11000000 */

 11000000 */

 11000000 */

 11000010 */

 01100110 */

 00111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 68 0x44 'D' */

 00000000 */

 00000000 */

 11111000 */

 01101100 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 01101100 */

 11111000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 69 0x45 'E' */

 00000000 */

 00000000 */

 11111110 */

 01100110 */

 01100010 */

 01101000 */

 01111000 */

 01101000 */

 01100000 */

 01100010 */

 01100110 */

 11111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 70 0x46 'F' */

 00000000 */

 00000000 */

 11111110 */

 01100110 */

 01100010 */

 01101000 */

 01111000 */

 01101000 */

 01100000 */

 01100000 */

 01100000 */

 11110000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 71 0x47 'G' */

 00000000 */

 00000000 */

 00111100 */

 01100110 */

 11000010 */

 11000000 */

 11000000 */

 11011110 */

 11000110 */

 11000110 */

 01100110 */

 00111010 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 72 0x48 'H' */

 00000000 */

 00000000 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11111110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 73 0x49 'I' */

 00000000 */

 00000000 */

 00111100 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 74 0x4a 'J' */

 00000000 */

 00000000 */

 00011110 */

 00001100 */

 00001100 */

 00001100 */

 00001100 */

 00001100 */

 11001100 */

 11001100 */

 11001100 */

 01111000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 75 0x4b 'K' */

 00000000 */

 00000000 */

 11100110 */

 01100110 */

 01100110 */

 01101100 */

 01111000 */

 01111000 */

 01101100 */

 01100110 */

 01100110 */

 11100110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 76 0x4c 'L' */

 00000000 */

 00000000 */

 11110000 */

 01100000 */

 01100000 */

 01100000 */

 01100000 */

 01100000 */

 01100000 */

 01100010 */

 01100110 */

 11111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 77 0x4d 'M' */

 00000000 */

 00000000 */

 11000110 */

 11101110 */

 11111110 */

 11111110 */

 11010110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 78 0x4e 'N' */

 00000000 */

 00000000 */

 11000110 */

 11100110 */

 11110110 */

 11111110 */

 11011110 */

 11001110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 79 0x4f 'O' */

 00000000 */

 00000000 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 80 0x50 'P' */

 00000000 */

 00000000 */

 11111100 */

 01100110 */

 01100110 */

 01100110 */

 01111100 */

 01100000 */

 01100000 */

 01100000 */

 01100000 */

 11110000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 81 0x51 'Q' */

 00000000 */

 00000000 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11010110 */

 11011110 */

 01111100 */

 00001100 */

 00001110 */

 00000000 */

 00000000 */

 82 0x52 'R' */

 00000000 */

 00000000 */

 11111100 */

 01100110 */

 01100110 */

 01100110 */

 01111100 */

 01101100 */

 01100110 */

 01100110 */

 01100110 */

 11100110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 83 0x53 'S' */

 00000000 */

 00000000 */

 01111100 */

 11000110 */

 11000110 */

 01100000 */

 00111000 */

 00001100 */

 00000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 84 0x54 'T' */

 00000000 */

 00000000 */

 01111110 */

 01111110 */

 01011010 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 85 0x55 'U' */

 00000000 */

 00000000 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 86 0x56 'V' */

 00000000 */

 00000000 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 01101100 */

 00111000 */

 00010000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 87 0x57 'W' */

 00000000 */

 00000000 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11010110 */

 11010110 */

 11010110 */

 11111110 */

 11101110 */

 01101100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 88 0x58 'X' */

 00000000 */

 00000000 */

 11000110 */

 11000110 */

 01101100 */

 01111100 */

 00111000 */

 00111000 */

 01111100 */

 01101100 */

 11000110 */

 11000110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 89 0x59 'Y' */

 00000000 */

 00000000 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 00111100 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 90 0x5a 'Z' */

 00000000 */

 00000000 */

 11111110 */

 11000110 */

 10000110 */

 00001100 */

 00011000 */

 00110000 */

 01100000 */

 11000010 */

 11000110 */

 11111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 91 0x5b '[' */

 00000000 */

 00000000 */

 00111100 */

 00110000 */

 00110000 */

 00110000 */

 00110000 */

 00110000 */

 00110000 */

 00110000 */

 00110000 */

 00111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 92 0x5c '\' */

 00000000 */

 00000000 */

 00000000 */

 10000000 */

 11000000 */

 11100000 */

 01110000 */

 00111000 */

 00011100 */

 00001110 */

 00000110 */

 00000010 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 93 0x5d ']' */

 00000000 */

 00000000 */

 00111100 */

 00001100 */

 00001100 */

 00001100 */

 00001100 */

 00001100 */

 00001100 */

 00001100 */

 00001100 */

 00111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 94 0x5e '^' */

 00010000 */

 00111000 */

 01101100 */

 11000110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 95 0x5f '_' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111111 */

 00000000 */

 00000000 */

 96 0x60 '`' */

 00000000 */

 00110000 */

 00011000 */

 00001100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 97 0x61 'a' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01111000 */

 00001100 */

 01111100 */

 11001100 */

 11001100 */

 11001100 */

 01110110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 98 0x62 'b' */

 00000000 */

 00000000 */

 11100000 */

 01100000 */

 01100000 */

 01111000 */

 01101100 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 99 0x63 'c' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01111100 */

 11000110 */

 11000000 */

 11000000 */

 11000000 */

 11000110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 100 0x64 'd' */

 00000000 */

 00000000 */

 00011100 */

 00001100 */

 00001100 */

 00111100 */

 01101100 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 01110110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 101 0x65 'e' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01111100 */

 11000110 */

 11111110 */

 11000000 */

 11000000 */

 11000110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 102 0x66 'f' */

 00000000 */

 00000000 */

 00011100 */

 00110110 */

 00110010 */

 00110000 */

 01111000 */

 00110000 */

 00110000 */

 00110000 */

 00110000 */

 01111000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 103 0x67 'g' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01110110 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 01111100 */

 00001100 */

 11001100 */

 01111000 */

 00000000 */

 104 0x68 'h' */

 00000000 */

 00000000 */

 11100000 */

 01100000 */

 01100000 */

 01101100 */

 01110110 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 11100110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 105 0x69 'i' */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 00000000 */

 00111000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 106 0x6a 'j' */

 00000000 */

 00000000 */

 00000110 */

 00000110 */

 00000000 */

 00001110 */

 00000110 */

 00000110 */

 00000110 */

 00000110 */

 00000110 */

 00000110 */

 01100110 */

 01100110 */

 00111100 */

 00000000 */

 107 0x6b 'k' */

 00000000 */

 00000000 */

 11100000 */

 01100000 */

 01100000 */

 01100110 */

 01101100 */

 01111000 */

 01111000 */

 01101100 */

 01100110 */

 11100110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 108 0x6c 'l' */

 00000000 */

 00000000 */

 00111000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 109 0x6d 'm' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11101100 */

 11111110 */

 11010110 */

 11010110 */

 11010110 */

 11010110 */

 11000110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 110 0x6e 'n' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11011100 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 111 0x6f 'o' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 112 0x70 'p' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11011100 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 01111100 */

 01100000 */

 01100000 */

 11110000 */

 00000000 */

 113 0x71 'q' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01110110 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 01111100 */

 00001100 */

 00001100 */

 00011110 */

 00000000 */

 114 0x72 'r' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11011100 */

 01110110 */

 01100110 */

 01100000 */

 01100000 */

 01100000 */

 11110000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 115 0x73 's' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01111100 */

 11000110 */

 01100000 */

 00111000 */

 00001100 */

 11000110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 116 0x74 't' */

 00000000 */

 00000000 */

 00010000 */

 00110000 */

 00110000 */

 11111100 */

 00110000 */

 00110000 */

 00110000 */

 00110000 */

 00110110 */

 00011100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 117 0x75 'u' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 01110110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 118 0x76 'v' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 01101100 */

 00111000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 119 0x77 'w' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11000110 */

 11000110 */

 11010110 */

 11010110 */

 11010110 */

 11111110 */

 01101100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 120 0x78 'x' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11000110 */

 01101100 */

 00111000 */

 00111000 */

 00111000 */

 01101100 */

 11000110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 121 0x79 'y' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 01111110 */

 00000110 */

 00001100 */

 11111000 */

 00000000 */

 122 0x7a 'z' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111110 */

 11001100 */

 00011000 */

 00110000 */

 01100000 */

 11000110 */

 11111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 123 0x7b '{' */

 00000000 */

 00000000 */

 00001110 */

 00011000 */

 00011000 */

 00011000 */

 01110000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00001110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 124 0x7c '|' */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 125 0x7d '}' */

 00000000 */

 00000000 */

 01110000 */

 00011000 */

 00011000 */

 00011000 */

 00001110 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 01110000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 126 0x7e '~' */

 00000000 */

 01110110 */

 11011100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 127 0x7f '' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00010000 */

 00111000 */

 01101100 */

 11000110 */

 11000110 */

 11000110 */

 11111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 128 0x80 'Ç' */

 00000000 */

 00000000 */

 00111100 */

 01100110 */

 11000010 */

 11000000 */

 11000000 */

 11000000 */

 11000000 */

 11000010 */

 01100110 */

 00111100 */

 00011000 */

 01110000 */

 00000000 */

 00000000 */

 129 0x81 'ü' */

 00000000 */

 00000000 */

 11001100 */

 00000000 */

 00000000 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 01110110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 130 0x82 'é' */

 00000000 */

 00001100 */

 00011000 */

 00110000 */

 00000000 */

 01111100 */

 11000110 */

 11111110 */

 11000000 */

 11000000 */

 11000110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 131 0x83 'â' */

 00000000 */

 00010000 */

 00111000 */

 01101100 */

 00000000 */

 01111000 */

 00001100 */

 01111100 */

 11001100 */

 11001100 */

 11001100 */

 01110110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 132 0x84 'ä' */

 00000000 */

 00000000 */

 11001100 */

 00000000 */

 00000000 */

 01111000 */

 00001100 */

 01111100 */

 11001100 */

 11001100 */

 11001100 */

 01110110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 133 0x85 'à' */

 00000000 */

 01100000 */

 00110000 */

 00011000 */

 00000000 */

 01111000 */

 00001100 */

 01111100 */

 11001100 */

 11001100 */

 11001100 */

 01110110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 134 0x86 'å' */

 00000000 */

 00111000 */

 01101100 */

 00111000 */

 00000000 */

 01111000 */

 00001100 */

 01111100 */

 11001100 */

 11001100 */

 11001100 */

 01110110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 135 0x87 'ç' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01111100 */

 11000110 */

 11000000 */

 11000000 */

 11000000 */

 11000110 */

 01111100 */

 00011000 */

 01110000 */

 00000000 */

 00000000 */

 136 0x88 'ê' */

 00000000 */

 00010000 */

 00111000 */

 01101100 */

 00000000 */

 01111100 */

 11000110 */

 11111110 */

 11000000 */

 11000000 */

 11000110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 137 0x89 'ë' */

 00000000 */

 00000000 */

 11000110 */

 00000000 */

 00000000 */

 01111100 */

 11000110 */

 11111110 */

 11000000 */

 11000000 */

 11000110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 138 0x8a 'è' */

 00000000 */

 01100000 */

 00110000 */

 00011000 */

 00000000 */

 01111100 */

 11000110 */

 11111110 */

 11000000 */

 11000000 */

 11000110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 139 0x8b 'ï' */

 00000000 */

 00000000 */

 01100110 */

 00000000 */

 00000000 */

 00111000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 140 0x8c 'î' */

 00000000 */

 00011000 */

 00111100 */

 01100110 */

 00000000 */

 00111000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 141 0x8d 'ì' */

 00000000 */

 01100000 */

 00110000 */

 00011000 */

 00000000 */

 00111000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 142 0x8e 'Ä' */

 00000000 */

 11000110 */

 00000000 */

 00010000 */

 00111000 */

 01101100 */

 11000110 */

 11000110 */

 11111110 */

 11000110 */

 11000110 */

 11000110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 143 0x8f 'Å' */

 00111000 */

 01101100 */

 00111000 */

 00010000 */

 00111000 */

 01101100 */

 11000110 */

 11111110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 144 0x90 'É' */

 00001100 */

 00011000 */

 00000000 */

 11111110 */

 01100110 */

 01100010 */

 01101000 */

 01111000 */

 01101000 */

 01100010 */

 01100110 */

 11111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 145 0x91 'æ' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11101100 */

 00110110 */

 00110110 */

 01111110 */

 11011000 */

 11011000 */

 01101110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 146 0x92 'Æ' */

 00000000 */

 00000000 */

 00111110 */

 01101100 */

 11001100 */

 11001100 */

 11111110 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 11001110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 147 0x93 'ô' */

 00000000 */

 00010000 */

 00111000 */

 01101100 */

 00000000 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 148 0x94 'ö' */

 00000000 */

 00000000 */

 11000110 */

 00000000 */

 00000000 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 149 0x95 'ò' */

 00000000 */

 01100000 */

 00110000 */

 00011000 */

 00000000 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 150 0x96 'û' */

 00000000 */

 00110000 */

 01111000 */

 11001100 */

 00000000 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 01110110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 151 0x97 'ù' */

 00000000 */

 01100000 */

 00110000 */

 00011000 */

 00000000 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 01110110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 152 0x98 'ÿ' */

 00000000 */

 00000000 */

 11000110 */

 00000000 */

 00000000 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 01111110 */

 00000110 */

 00001100 */

 01111000 */

 00000000 */

 153 0x99 'Ö' */

 00000000 */

 11000110 */

 00000000 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 154 0x9a 'Ü' */

 00000000 */

 11000110 */

 00000000 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 155 0x9b '¢' */

 00000000 */

 00011000 */

 00011000 */

 01111100 */

 11000110 */

 11000000 */

 11000000 */

 11000000 */

 11000110 */

 01111100 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 156 0x9c '£' */

 00000000 */

 00111000 */

 01101100 */

 01100100 */

 01100000 */

 11110000 */

 01100000 */

 01100000 */

 01100000 */

 01100000 */

 11100110 */

 11111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 157 0x9d '¥' */

 00000000 */

 00000000 */

 01100110 */

 01100110 */

 00111100 */

 00011000 */

 01111110 */

 00011000 */

 01111110 */

 00011000 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 158 0x9e '₧' */

 00000000 */

 11111000 */

 11001100 */

 11001100 */

 11111000 */

 11000100 */

 11001100 */

 11011110 */

 11001100 */

 11001100 */

 11001100 */

 11000110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 159 0x9f 'ƒ' */

 00000000 */

 00001110 */

 00011011 */

 00011000 */

 00011000 */

 00011000 */

 01111110 */

 00011000 */

 00011000 */

 00011000 */

 11011000 */

 01110000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 160 0xa0 'á' */

 00000000 */

 00011000 */

 00110000 */

 01100000 */

 00000000 */

 01111000 */

 00001100 */

 01111100 */

 11001100 */

 11001100 */

 11001100 */

 01110110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 161 0xa1 'í' */

 00000000 */

 00001100 */

 00011000 */

 00110000 */

 00000000 */

 00111000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 162 0xa2 'ó' */

 00000000 */

 00011000 */

 00110000 */

 01100000 */

 00000000 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 163 0xa3 'ú' */

 00000000 */

 00011000 */

 00110000 */

 01100000 */

 00000000 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 11001100 */

 01110110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 164 0xa4 'ñ' */

 00000000 */

 00000000 */

 01110110 */

 11011100 */

 00000000 */

 11011100 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 165 0xa5 'Ñ' */

 01110110 */

 11011100 */

 00000000 */

 11000110 */

 11100110 */

 11110110 */

 11111110 */

 11011110 */

 11001110 */

 11000110 */

 11000110 */

 11000110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 166 0xa6 'ª' */

 00000000 */

 00000000 */

 00111100 */

 01101100 */

 01101100 */

 00111110 */

 00000000 */

 01111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 167 0xa7 'º' */

 00000000 */

 00000000 */

 00111000 */

 01101100 */

 01101100 */

 00111000 */

 00000000 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 168 0xa8 '¿' */

 00000000 */

 00000000 */

 00110000 */

 00110000 */

 00000000 */

 00110000 */

 00110000 */

 01100000 */

 11000000 */

 11000110 */

 11000110 */

 01111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 169 0xa9 '⌐' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111110 */

 11000000 */

 11000000 */

 11000000 */

 11000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 170 0xaa '¬' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111110 */

 00000110 */

 00000110 */

 00000110 */

 00000110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 171 0xab '½' */

 00000000 */

 01100000 */

 11100000 */

 01100010 */

 01100110 */

 01101100 */

 00011000 */

 00110000 */

 01100000 */

 11011100 */

 10000110 */

 00001100 */

 00011000 */

 00111110 */

 00000000 */

 00000000 */

 172 0xac '¼' */

 00000000 */

 01100000 */

 11100000 */

 01100010 */

 01100110 */

 01101100 */

 00011000 */

 00110000 */

 01100110 */

 11001110 */

 10011010 */

 00111111 */

 00000110 */

 00000110 */

 00000000 */

 00000000 */

 173 0xad '¡' */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 00000000 */

 00011000 */

 00011000 */

 00011000 */

 00111100 */

 00111100 */

 00111100 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 174 0xae '«' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00110110 */

 01101100 */

 11011000 */

 01101100 */

 00110110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 175 0xaf '»' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11011000 */

 01101100 */

 00110110 */

 01101100 */

 11011000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 176 0xb0 '░' */

 00010001 */

 01000100 */

 00010001 */

 01000100 */

 00010001 */

 01000100 */

 00010001 */

 01000100 */

 00010001 */

 01000100 */

 00010001 */

 01000100 */

 00010001 */

 01000100 */

 00010001 */

 01000100 */

 177 0xb1 '▒' */

 01010101 */

 10101010 */

 01010101 */

 10101010 */

 01010101 */

 10101010 */

 01010101 */

 10101010 */

 01010101 */

 10101010 */

 01010101 */

 10101010 */

 01010101 */

 10101010 */

 01010101 */

 10101010 */

 178 0xb2 '▓' */

 11011101 */

 01110111 */

 11011101 */

 01110111 */

 11011101 */

 01110111 */

 11011101 */

 01110111 */

 11011101 */

 01110111 */

 11011101 */

 01110111 */

 11011101 */

 01110111 */

 11011101 */

 01110111 */

 179 0xb3 '│' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 180 0xb4 '┤' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 11111000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 181 0xb5 '╡' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 11111000 */

 00011000 */

 11111000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 182 0xb6 '╢' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 11110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 183 0xb7 '╖' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 184 0xb8 '╕' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111000 */

 00011000 */

 11111000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 185 0xb9 '╣' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 11110110 */

 00000110 */

 11110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 186 0xba '║' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 187 0xbb '╗' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111110 */

 00000110 */

 11110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 188 0xbc '╝' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 11110110 */

 00000110 */

 11111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 189 0xbd '╜' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 11111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 190 0xbe '╛' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 11111000 */

 00011000 */

 11111000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 191 0xbf '┐' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 192 0xc0 '└' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011111 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 193 0xc1 '┴' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 11111111 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 194 0xc2 '┬' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111111 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 195 0xc3 '├' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011111 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 196 0xc4 '─' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111111 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 197 0xc5 '┼' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 11111111 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 198 0xc6 '╞' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011111 */

 00011000 */

 00011111 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 199 0xc7 '╟' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110111 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 200 0xc8 '╚' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110111 */

 00110000 */

 00111111 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 201 0xc9 '╔' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00111111 */

 00110000 */

 00110111 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 202 0xca '╩' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 11110111 */

 00000000 */

 11111111 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 203 0xcb '╦' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111111 */

 00000000 */

 11110111 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 204 0xcc '╠' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110111 */

 00110000 */

 00110111 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 205 0xcd '═' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111111 */

 00000000 */

 11111111 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 206 0xce '╬' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 11110111 */

 00000000 */

 11110111 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 207 0xcf '╧' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 11111111 */

 00000000 */

 11111111 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 208 0xd0 '╨' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 11111111 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 209 0xd1 '╤' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111111 */

 00000000 */

 11111111 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 210 0xd2 '╥' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111111 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 211 0xd3 '╙' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00111111 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 212 0xd4 '╘' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011111 */

 00011000 */

 00011111 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 213 0xd5 '╒' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00011111 */

 00011000 */

 00011111 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 214 0xd6 '╓' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00111111 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 215 0xd7 '╫' */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 11111111 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 216 0xd8 '╪' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 11111111 */

 00011000 */

 11111111 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 217 0xd9 '┘' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 11111000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 218 0xda '┌' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00011111 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 219 0xdb '█' */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 220 0xdc '▄' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 221 0xdd '▌' */

 11110000 */

 11110000 */

 11110000 */

 11110000 */

 11110000 */

 11110000 */

 11110000 */

 11110000 */

 11110000 */

 11110000 */

 11110000 */

 11110000 */

 11110000 */

 11110000 */

 11110000 */

 11110000 */

 222 0xde '▐' */

 00001111 */

 00001111 */

 00001111 */

 00001111 */

 00001111 */

 00001111 */

 00001111 */

 00001111 */

 00001111 */

 00001111 */

 00001111 */

 00001111 */

 00001111 */

 00001111 */

 00001111 */

 00001111 */

 223 0xdf '▀' */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 11111111 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 224 0xe0 'α' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01110110 */

 11011100 */

 11011000 */

 11011000 */

 11011000 */

 11011100 */

 01110110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 225 0xe1 'ß' */

 00000000 */

 00000000 */

 01111000 */

 11001100 */

 11001100 */

 11001100 */

 11011000 */

 11001100 */

 11000110 */

 11000110 */

 11000110 */

 11001100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 226 0xe2 'Γ' */

 00000000 */

 00000000 */

 11111110 */

 11000110 */

 11000110 */

 11000000 */

 11000000 */

 11000000 */

 11000000 */

 11000000 */

 11000000 */

 11000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 227 0xe3 'π' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111110 */

 01101100 */

 01101100 */

 01101100 */

 01101100 */

 01101100 */

 01101100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 228 0xe4 'Σ' */

 00000000 */

 00000000 */

 11111110 */

 11000110 */

 01100000 */

 00110000 */

 00011000 */

 00011000 */

 00110000 */

 01100000 */

 11000110 */

 11111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 229 0xe5 'σ' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01111110 */

 11011000 */

 11011000 */

 11011000 */

 11011000 */

 11011000 */

 01110000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 230 0xe6 'µ' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 01111100 */

 01100000 */

 01100000 */

 11000000 */

 00000000 */

 231 0xe7 'τ' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01110110 */

 11011100 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 232 0xe8 'Φ' */

 00000000 */

 00000000 */

 01111110 */

 00011000 */

 00111100 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 00111100 */

 00011000 */

 01111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 233 0xe9 'Θ' */

 00000000 */

 00000000 */

 00111000 */

 01101100 */

 11000110 */

 11000110 */

 11111110 */

 11000110 */

 11000110 */

 11000110 */

 01101100 */

 00111000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 234 0xea 'Ω' */

 00000000 */

 00000000 */

 00111000 */

 01101100 */

 11000110 */

 11000110 */

 11000110 */

 01101100 */

 01101100 */

 01101100 */

 01101100 */

 11101110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 235 0xeb 'δ' */

 00000000 */

 00000000 */

 00011110 */

 00110000 */

 00011000 */

 00001100 */

 00111110 */

 01100110 */

 01100110 */

 01100110 */

 01100110 */

 00111100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 236 0xec '∞' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01111110 */

 11011011 */

 11011011 */

 11011011 */

 01111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 237 0xed 'φ' */

 00000000 */

 00000000 */

 00000000 */

 00000011 */

 00000110 */

 01111110 */

 11011011 */

 11011011 */

 11110011 */

 01111110 */

 01100000 */

 11000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 238 0xee 'ε' */

 00000000 */

 00000000 */

 00011100 */

 00110000 */

 01100000 */

 01100000 */

 01111100 */

 01100000 */

 01100000 */

 01100000 */

 00110000 */

 00011100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 239 0xef '∩' */

 00000000 */

 00000000 */

 00000000 */

 01111100 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 11000110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 240 0xf0 '≡' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 11111110 */

 00000000 */

 00000000 */

 11111110 */

 00000000 */

 00000000 */

 11111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 241 0xf1 '±' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 01111110 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 01111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 242 0xf2 '≥' */

 00000000 */

 00000000 */

 00000000 */

 00110000 */

 00011000 */

 00001100 */

 00000110 */

 00001100 */

 00011000 */

 00110000 */

 00000000 */

 01111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 243 0xf3 '≤' */

 00000000 */

 00000000 */

 00000000 */

 00001100 */

 00011000 */

 00110000 */

 01100000 */

 00110000 */

 00011000 */

 00001100 */

 00000000 */

 01111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 244 0xf4 '⌠' */

 00000000 */

 00000000 */

 00001110 */

 00011011 */

 00011011 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 245 0xf5 '⌡' */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 00011000 */

 11011000 */

 11011000 */

 11011000 */

 01110000 */

 00000000 */

 00000000 */

 00000000 */

 246 0xf6 '÷' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00000000 */

 01111110 */

 00000000 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 247 0xf7 '≈' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01110110 */

 11011100 */

 00000000 */

 01110110 */

 11011100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 248 0xf8 '°' */

 00000000 */

 00111000 */

 01101100 */

 01101100 */

 00111000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 249 0xf9 '·' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 250 0xfa '•' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00011000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 251 0xfb '√' */

 00000000 */

 00001111 */

 00001100 */

 00001100 */

 00001100 */

 00001100 */

 00001100 */

 11101100 */

 01101100 */

 01101100 */

 00111100 */

 00011100 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 252 0xfc 'ⁿ' */

 00000000 */

 01101100 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00110110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 253 0xfd '²' */

 00000000 */

 00111100 */

 01100110 */

 00001100 */

 00011000 */

 00110010 */

 01111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 254 0xfe '■' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 01111110 */

 01111110 */

 01111110 */

 01111110 */

 01111110 */

 01111110 */

 01111110 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 255 0xff ' ' */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 00000000 */

 SPDX-License-Identifier: GPL-2.0

 */ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x7e,0x81,0xa5,0x81,0x81,0xbd,0x99,0x81,0x81,0x7e,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x7e,0xff,0xdb,0xff,0xff,0xc3,0xe7,0xff,0xff,0x7e,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x6c,0xfe,0xfe,0xfe,0xfe,0x7c,0x38,0x10,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x10,0x38,0x7c,0xfe,0x7c,0x38,0x10,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x18,0x3c,0x3c,0xe7,0xe7,0xe7,0x18,0x18,0x3c,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x18,0x3c,0x7e,0xff,0xff,0x7e,0x18,0x18,0x3c,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x3c,0x3c,0x18,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0xff,0xff,0xff,0xff,0xff,0xff,0xe7,0xc3,0xc3,0xe7,0xff,0xff,0xff,0xff,0xff,0xff,

 */ 0x00,0x00,0x00,0x00,0x00,0x3c,0x66,0x42,0x42,0x66,0x3c,0x00,0x00,0x00,0x00,0x00,

 */ 0xff,0xff,0xff,0xff,0xff,0xc3,0x99,0xbd,0xbd,0x99,0xc3,0xff,0xff,0xff,0xff,0xff,

 */ 0x00,0x00,0x1e,0x0e,0x1a,0x32,0x78,0xcc,0xcc,0xcc,0xcc,0x78,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x3c,0x66,0x66,0x66,0x66,0x3c,0x18,0x7e,0x18,0x18,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x3f,0x33,0x3f,0x30,0x30,0x30,0x30,0x70,0xf0,0xe0,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x7f,0x63,0x7f,0x63,0x63,0x63,0x63,0x67,0xe7,0xe6,0xc0,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x18,0x18,0xdb,0x3c,0xe7,0x3c,0xdb,0x18,0x18,0x00,0x00,0x00,0x00,

 */ 0x00,0x80,0xc0,0xe0,0xf0,0xf8,0xfe,0xf8,0xf0,0xe0,0xc0,0x80,0x00,0x00,0x00,0x00,

 */ 0x00,0x02,0x06,0x0e,0x1e,0x3e,0xfe,0x3e,0x1e,0x0e,0x06,0x02,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x18,0x3c,0x7e,0x18,0x18,0x18,0x7e,0x3c,0x18,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x00,0x66,0x66,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x7f,0xdb,0xdb,0xdb,0x7b,0x1b,0x1b,0x1b,0x1b,0x1b,0x00,0x00,0x00,0x00,

 */ 0x00,0x7c,0xc6,0x60,0x38,0x6c,0xc6,0xc6,0x6c,0x38,0x0c,0xc6,0x7c,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xfe,0xfe,0xfe,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x18,0x3c,0x7e,0x18,0x18,0x18,0x7e,0x3c,0x18,0x7e,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x18,0x3c,0x7e,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x7e,0x3c,0x18,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0x18,0x0c,0xfe,0x0c,0x18,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0x30,0x60,0xfe,0x60,0x30,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xc0,0xc0,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0x24,0x66,0xff,0x66,0x24,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x10,0x38,0x38,0x7c,0x7c,0xfe,0xfe,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0xfe,0xfe,0x7c,0x7c,0x38,0x38,0x10,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

!*/ 0x00,0x00,0x18,0x3c,0x3c,0x3c,0x18,0x18,0x18,0x00,0x18,0x18,0x00,0x00,0x00,0x00,

"*/ 0x00,0x66,0x66,0x66,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

#*/ 0x00,0x00,0x00,0x6c,0x6c,0xfe,0x6c,0x6c,0x6c,0xfe,0x6c,0x6c,0x00,0x00,0x00,0x00,

$*/ 0x18,0x18,0x7c,0xc6,0xc2,0xc0,0x7c,0x06,0x06,0x86,0xc6,0x7c,0x18,0x18,0x00,0x00,

%*/ 0x00,0x00,0x00,0x00,0xc2,0xc6,0x0c,0x18,0x30,0x60,0xc6,0x86,0x00,0x00,0x00,0x00,

&*/ 0x00,0x00,0x38,0x6c,0x6c,0x38,0x76,0xdc,0xcc,0xcc,0xcc,0x76,0x00,0x00,0x00,0x00,

'*/ 0x00,0x30,0x30,0x30,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

(*/ 0x00,0x00,0x0c,0x18,0x30,0x30,0x30,0x30,0x30,0x30,0x18,0x0c,0x00,0x00,0x00,0x00,

)*/ 0x00,0x00,0x30,0x18,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x18,0x30,0x00,0x00,0x00,0x00,

**/ 0x00,0x00,0x00,0x00,0x00,0x66,0x3c,0xff,0x3c,0x66,0x00,0x00,0x00,0x00,0x00,0x00,

+*/ 0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x7e,0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00,

,*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x18,0x30,0x00,0x00,0x00,

-*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

.*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x02,0x06,0x0c,0x18,0x30,0x60,0xc0,0x80,0x00,0x00,0x00,0x00,

0*/ 0x00,0x00,0x7c,0xc6,0xc6,0xce,0xde,0xf6,0xe6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00,

1*/ 0x00,0x00,0x18,0x38,0x78,0x18,0x18,0x18,0x18,0x18,0x18,0x7e,0x00,0x00,0x00,0x00,

2*/ 0x00,0x00,0x7c,0xc6,0x06,0x0c,0x18,0x30,0x60,0xc0,0xc6,0xfe,0x00,0x00,0x00,0x00,

3*/ 0x00,0x00,0x7c,0xc6,0x06,0x06,0x3c,0x06,0x06,0x06,0xc6,0x7c,0x00,0x00,0x00,0x00,

4*/ 0x00,0x00,0x0c,0x1c,0x3c,0x6c,0xcc,0xfe,0x0c,0x0c,0x0c,0x1e,0x00,0x00,0x00,0x00,

5*/ 0x00,0x00,0xfe,0xc0,0xc0,0xc0,0xfc,0x06,0x06,0x06,0xc6,0x7c,0x00,0x00,0x00,0x00,

6*/ 0x00,0x00,0x38,0x60,0xc0,0xc0,0xfc,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00,

7*/ 0x00,0x00,0xfe,0xc6,0x06,0x06,0x0c,0x18,0x30,0x30,0x30,0x30,0x00,0x00,0x00,0x00,

8*/ 0x00,0x00,0x7c,0xc6,0xc6,0xc6,0x7c,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00,

9*/ 0x00,0x00,0x7c,0xc6,0xc6,0xc6,0x7e,0x06,0x06,0x06,0x0c,0x78,0x00,0x00,0x00,0x00,

:*/ 0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00,

;*/ 0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x18,0x18,0x30,0x00,0x00,0x00,0x00,

<*/ 0x00,0x00,0x00,0x06,0x0c,0x18,0x30,0x60,0x30,0x18,0x0c,0x06,0x00,0x00,0x00,0x00,

=*/ 0x00,0x00,0x00,0x00,0x00,0x7e,0x00,0x00,0x7e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

>*/ 0x00,0x00,0x00,0x60,0x30,0x18,0x0c,0x06,0x0c,0x18,0x30,0x60,0x00,0x00,0x00,0x00,

?*/ 0x00,0x00,0x7c,0xc6,0xc6,0x0c,0x18,0x18,0x18,0x00,0x18,0x18,0x00,0x00,0x00,0x00,

@*/ 0x00,0x00,0x7c,0xc6,0xc6,0xc6,0xde,0xde,0xde,0xdc,0xc0,0x7c,0x00,0x00,0x00,0x00,

A*/ 0x00,0x00,0x10,0x38,0x6c,0xc6,0xc6,0xfe,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00,0x00,

B*/ 0x00,0x00,0xfc,0x66,0x66,0x66,0x7c,0x66,0x66,0x66,0x66,0xfc,0x00,0x00,0x00,0x00,

C*/ 0x00,0x00,0x3c,0x66,0xc2,0xc0,0xc0,0xc0,0xc0,0xc2,0x66,0x3c,0x00,0x00,0x00,0x00,

D*/ 0x00,0x00,0xf8,0x6c,0x66,0x66,0x66,0x66,0x66,0x66,0x6c,0xf8,0x00,0x00,0x00,0x00,

E*/ 0x00,0x00,0xfe,0x66,0x62,0x68,0x78,0x68,0x60,0x62,0x66,0xfe,0x00,0x00,0x00,0x00,

F*/ 0x00,0x00,0xfe,0x66,0x62,0x68,0x78,0x68,0x60,0x60,0x60,0xf0,0x00,0x00,0x00,0x00,

G*/ 0x00,0x00,0x3c,0x66,0xc2,0xc0,0xc0,0xde,0xc6,0xc6,0x66,0x3a,0x00,0x00,0x00,0x00,

H*/ 0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xfe,0xc6,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00,0x00,

I*/ 0x00,0x00,0x3c,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x3c,0x00,0x00,0x00,0x00,

J*/ 0x00,0x00,0x1e,0x0c,0x0c,0x0c,0x0c,0x0c,0xcc,0xcc,0xcc,0x78,0x00,0x00,0x00,0x00,

K*/ 0x00,0x00,0xe6,0x66,0x66,0x6c,0x78,0x78,0x6c,0x66,0x66,0xe6,0x00,0x00,0x00,0x00,

L*/ 0x00,0x00,0xf0,0x60,0x60,0x60,0x60,0x60,0x60,0x62,0x66,0xfe,0x00,0x00,0x00,0x00,

M*/ 0x00,0x00,0xc3,0xe7,0xff,0xff,0xdb,0xc3,0xc3,0xc3,0xc3,0xc3,0x00,0x00,0x00,0x00,

N*/ 0x00,0x00,0xc6,0xe6,0xf6,0xfe,0xde,0xce,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00,0x00,

O*/ 0x00,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00,

P*/ 0x00,0x00,0xfc,0x66,0x66,0x66,0x7c,0x60,0x60,0x60,0x60,0xf0,0x00,0x00,0x00,0x00,

Q*/ 0x00,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xd6,0xde,0x7c,0x0c,0x0e,0x00,0x00,

R*/ 0x00,0x00,0xfc,0x66,0x66,0x66,0x7c,0x6c,0x66,0x66,0x66,0xe6,0x00,0x00,0x00,0x00,

S*/ 0x00,0x00,0x7c,0xc6,0xc6,0x60,0x38,0x0c,0x06,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00,

T*/ 0x00,0x00,0xff,0xdb,0x99,0x18,0x18,0x18,0x18,0x18,0x18,0x3c,0x00,0x00,0x00,0x00,

U*/ 0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00,

V*/ 0x00,0x00,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0x66,0x3c,0x18,0x00,0x00,0x00,0x00,

W*/ 0x00,0x00,0xc3,0xc3,0xc3,0xc3,0xc3,0xdb,0xdb,0xff,0x66,0x66,0x00,0x00,0x00,0x00,

X*/ 0x00,0x00,0xc3,0xc3,0x66,0x3c,0x18,0x18,0x3c,0x66,0xc3,0xc3,0x00,0x00,0x00,0x00,

Y*/ 0x00,0x00,0xc3,0xc3,0xc3,0x66,0x3c,0x18,0x18,0x18,0x18,0x3c,0x00,0x00,0x00,0x00,

Z*/ 0x00,0x00,0xff,0xc3,0x86,0x0c,0x18,0x30,0x60,0xc1,0xc3,0xff,0x00,0x00,0x00,0x00,

[*/ 0x00,0x00,0x3c,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x3c,0x00,0x00,0x00,0x00,

\*/ 0x00,0x00,0x00,0x80,0xc0,0xe0,0x70,0x38,0x1c,0x0e,0x06,0x02,0x00,0x00,0x00,0x00,

]*/ 0x00,0x00,0x3c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x3c,0x00,0x00,0x00,0x00,

^*/ 0x10,0x38,0x6c,0xc6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

_*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,

`*/ 0x30,0x30,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

a*/ 0x00,0x00,0x00,0x00,0x00,0x78,0x0c,0x7c,0xcc,0xcc,0xcc,0x76,0x00,0x00,0x00,0x00,

b*/ 0x00,0x00,0xe0,0x60,0x60,0x78,0x6c,0x66,0x66,0x66,0x66,0x7c,0x00,0x00,0x00,0x00,

c*/ 0x00,0x00,0x00,0x00,0x00,0x7c,0xc6,0xc0,0xc0,0xc0,0xc6,0x7c,0x00,0x00,0x00,0x00,

d*/ 0x00,0x00,0x1c,0x0c,0x0c,0x3c,0x6c,0xcc,0xcc,0xcc,0xcc,0x76,0x00,0x00,0x00,0x00,

e*/ 0x00,0x00,0x00,0x00,0x00,0x7c,0xc6,0xfe,0xc0,0xc0,0xc6,0x7c,0x00,0x00,0x00,0x00,

f*/ 0x00,0x00,0x38,0x6c,0x64,0x60,0xf0,0x60,0x60,0x60,0x60,0xf0,0x00,0x00,0x00,0x00,

g*/ 0x00,0x00,0x00,0x00,0x00,0x76,0xcc,0xcc,0xcc,0xcc,0xcc,0x7c,0x0c,0xcc,0x78,0x00,

h*/ 0x00,0x00,0xe0,0x60,0x60,0x6c,0x76,0x66,0x66,0x66,0x66,0xe6,0x00,0x00,0x00,0x00,

i*/ 0x00,0x00,0x18,0x18,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x3c,0x00,0x00,0x00,0x00,

j*/ 0x00,0x00,0x06,0x06,0x00,0x0e,0x06,0x06,0x06,0x06,0x06,0x06,0x66,0x66,0x3c,0x00,

k*/ 0x00,0x00,0xe0,0x60,0x60,0x66,0x6c,0x78,0x78,0x6c,0x66,0xe6,0x00,0x00,0x00,0x00,

l*/ 0x00,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x3c,0x00,0x00,0x00,0x00,

m*/ 0x00,0x00,0x00,0x00,0x00,0xe6,0xff,0xdb,0xdb,0xdb,0xdb,0xdb,0x00,0x00,0x00,0x00,

n*/ 0x00,0x00,0x00,0x00,0x00,0xdc,0x66,0x66,0x66,0x66,0x66,0x66,0x00,0x00,0x00,0x00,

o*/ 0x00,0x00,0x00,0x00,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00,

p*/ 0x00,0x00,0x00,0x00,0x00,0xdc,0x66,0x66,0x66,0x66,0x66,0x7c,0x60,0x60,0xf0,0x00,

q*/ 0x00,0x00,0x00,0x00,0x00,0x76,0xcc,0xcc,0xcc,0xcc,0xcc,0x7c,0x0c,0x0c,0x1e,0x00,

r*/ 0x00,0x00,0x00,0x00,0x00,0xdc,0x76,0x66,0x60,0x60,0x60,0xf0,0x00,0x00,0x00,0x00,

s*/ 0x00,0x00,0x00,0x00,0x00,0x7c,0xc6,0x60,0x38,0x0c,0xc6,0x7c,0x00,0x00,0x00,0x00,

t*/ 0x00,0x00,0x10,0x30,0x30,0xfc,0x30,0x30,0x30,0x30,0x36,0x1c,0x00,0x00,0x00,0x00,

u*/ 0x00,0x00,0x00,0x00,0x00,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0x76,0x00,0x00,0x00,0x00,

v*/ 0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,0xc3,0xc3,0x66,0x3c,0x18,0x00,0x00,0x00,0x00,

w*/ 0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,0xc3,0xdb,0xdb,0xff,0x66,0x00,0x00,0x00,0x00,

x*/ 0x00,0x00,0x00,0x00,0x00,0xc3,0x66,0x3c,0x18,0x3c,0x66,0xc3,0x00,0x00,0x00,0x00,

y*/ 0x00,0x00,0x00,0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7e,0x06,0x0c,0xf8,0x00,

z*/ 0x00,0x00,0x00,0x00,0x00,0xfe,0xcc,0x18,0x30,0x60,0xc6,0xfe,0x00,0x00,0x00,0x00,

{*/ 0x00,0x00,0x0e,0x18,0x18,0x18,0x70,0x18,0x18,0x18,0x18,0x0e,0x00,0x00,0x00,0x00,

|*/ 0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00,

}*/ 0x00,0x00,0x70,0x18,0x18,0x18,0x0e,0x18,0x18,0x18,0x18,0x70,0x00,0x00,0x00,0x00,

~*/ 0x00,0x00,0x76,0xdc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x10,0x38,0x6c,0xc6,0xc6,0xc6,0xfe,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x3c,0x66,0xc2,0xc0,0xc0,0xc0,0xc2,0x66,0x3c,0x0c,0x06,0x7c,0x00,0x00,

 */ 0x00,0x00,0xcc,0x00,0x00,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0x76,0x00,0x00,0x00,0x00,

 */ 0x00,0x0c,0x18,0x30,0x00,0x7c,0xc6,0xfe,0xc0,0xc0,0xc6,0x7c,0x00,0x00,0x00,0x00,

 */ 0x00,0x10,0x38,0x6c,0x00,0x78,0x0c,0x7c,0xcc,0xcc,0xcc,0x76,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0xcc,0x00,0x00,0x78,0x0c,0x7c,0xcc,0xcc,0xcc,0x76,0x00,0x00,0x00,0x00,

 */ 0x00,0x60,0x30,0x18,0x00,0x78,0x0c,0x7c,0xcc,0xcc,0xcc,0x76,0x00,0x00,0x00,0x00,

 */ 0x00,0x38,0x6c,0x38,0x00,0x78,0x0c,0x7c,0xcc,0xcc,0xcc,0x76,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x3c,0x66,0x60,0x60,0x66,0x3c,0x0c,0x06,0x3c,0x00,0x00,0x00,

 */ 0x00,0x10,0x38,0x6c,0x00,0x7c,0xc6,0xfe,0xc0,0xc0,0xc6,0x7c,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0xc6,0x00,0x00,0x7c,0xc6,0xfe,0xc0,0xc0,0xc6,0x7c,0x00,0x00,0x00,0x00,

 */ 0x00,0x60,0x30,0x18,0x00,0x7c,0xc6,0xfe,0xc0,0xc0,0xc6,0x7c,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x66,0x00,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x3c,0x00,0x00,0x00,0x00,

 */ 0x00,0x18,0x3c,0x66,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x3c,0x00,0x00,0x00,0x00,

 */ 0x00,0x60,0x30,0x18,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x3c,0x00,0x00,0x00,0x00,

 */ 0x00,0xc6,0x00,0x10,0x38,0x6c,0xc6,0xc6,0xfe,0xc6,0xc6,0xc6,0x00,0x00,0x00,0x00,

 */ 0x38,0x6c,0x38,0x00,0x38,0x6c,0xc6,0xc6,0xfe,0xc6,0xc6,0xc6,0x00,0x00,0x00,0x00,

 */ 0x18,0x30,0x60,0x00,0xfe,0x66,0x60,0x7c,0x60,0x60,0x66,0xfe,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0x6e,0x3b,0x1b,0x7e,0xd8,0xdc,0x77,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x3e,0x6c,0xcc,0xcc,0xfe,0xcc,0xcc,0xcc,0xcc,0xce,0x00,0x00,0x00,0x00,

 */ 0x00,0x10,0x38,0x6c,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0xc6,0x00,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00,

 */ 0x00,0x60,0x30,0x18,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00,

 */ 0x00,0x30,0x78,0xcc,0x00,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0x76,0x00,0x00,0x00,0x00,

 */ 0x00,0x60,0x30,0x18,0x00,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0x76,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0xc6,0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7e,0x06,0x0c,0x78,0x00,

 */ 0x00,0xc6,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00,

 */ 0x00,0xc6,0x00,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00,

 */ 0x00,0x18,0x18,0x7e,0xc3,0xc0,0xc0,0xc0,0xc3,0x7e,0x18,0x18,0x00,0x00,0x00,0x00,

 */ 0x00,0x38,0x6c,0x64,0x60,0xf0,0x60,0x60,0x60,0x60,0xe6,0xfc,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0xc3,0x66,0x3c,0x18,0xff,0x18,0xff,0x18,0x18,0x18,0x00,0x00,0x00,0x00,

 */ 0x00,0xfc,0x66,0x66,0x7c,0x62,0x66,0x6f,0x66,0x66,0x66,0xf3,0x00,0x00,0x00,0x00,

 */ 0x00,0x0e,0x1b,0x18,0x18,0x18,0x7e,0x18,0x18,0x18,0x18,0x18,0xd8,0x70,0x00,0x00,

 */ 0x00,0x18,0x30,0x60,0x00,0x78,0x0c,0x7c,0xcc,0xcc,0xcc,0x76,0x00,0x00,0x00,0x00,

 */ 0x00,0x0c,0x18,0x30,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x3c,0x00,0x00,0x00,0x00,

 */ 0x00,0x18,0x30,0x60,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00,

 */ 0x00,0x18,0x30,0x60,0x00,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0x76,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x76,0xdc,0x00,0xdc,0x66,0x66,0x66,0x66,0x66,0x66,0x00,0x00,0x00,0x00,

 */ 0x76,0xdc,0x00,0xc6,0xe6,0xf6,0xfe,0xde,0xce,0xc6,0xc6,0xc6,0x00,0x00,0x00,0x00,

 */ 0x00,0x3c,0x6c,0x6c,0x3e,0x00,0x7e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x38,0x6c,0x6c,0x38,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x30,0x30,0x00,0x30,0x30,0x60,0xc0,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xc0,0xc0,0xc0,0xc0,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x06,0x06,0x06,0x06,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0xc0,0xc0,0xc2,0xc6,0xcc,0x18,0x30,0x60,0xce,0x9b,0x06,0x0c,0x1f,0x00,0x00,

 */ 0x00,0xc0,0xc0,0xc2,0xc6,0xcc,0x18,0x30,0x66,0xce,0x96,0x3e,0x06,0x06,0x00,0x00,

 */ 0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x18,0x3c,0x3c,0x3c,0x18,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0x36,0x6c,0xd8,0x6c,0x36,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0xd8,0x6c,0x36,0x6c,0xd8,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,

 */ 0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,

 */ 0xdd,0x77,0xdd,0x77,0xdd,0x77,0xdd,0x77,0xdd,0x77,0xdd,0x77,0xdd,0x77,0xdd,0x77,

 */ 0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,

 */ 0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xf8,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,

 */ 0x18,0x18,0x18,0x18,0x18,0xf8,0x18,0xf8,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,

 */ 0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xf6,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,

 */ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,

 */ 0x00,0x00,0x00,0x00,0x00,0xf8,0x18,0xf8,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,

 */ 0x36,0x36,0x36,0x36,0x36,0xf6,0x06,0xf6,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,

 */ 0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,

 */ 0x00,0x00,0x00,0x00,0x00,0xfe,0x06,0xf6,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,

 */ 0x36,0x36,0x36,0x36,0x36,0xf6,0x06,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x18,0x18,0x18,0x18,0x18,0xf8,0x18,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,

 */ 0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,

 */ 0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x1f,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,

 */ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xff,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,

 */ 0x18,0x18,0x18,0x18,0x18,0x1f,0x18,0x1f,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,

 */ 0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x37,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,

 */ 0x36,0x36,0x36,0x36,0x36,0x37,0x30,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0x3f,0x30,0x37,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,

 */ 0x36,0x36,0x36,0x36,0x36,0xf7,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0xff,0x00,0xf7,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,

 */ 0x36,0x36,0x36,0x36,0x36,0x37,0x30,0x37,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,

 */ 0x00,0x00,0x00,0x00,0x00,0xff,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x36,0x36,0x36,0x36,0x36,0xf7,0x00,0xf7,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,

 */ 0x18,0x18,0x18,0x18,0x18,0xff,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0xff,0x00,0xff,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,

 */ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,

 */ 0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x18,0x18,0x18,0x18,0x18,0x1f,0x18,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0x1f,0x18,0x1f,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,

 */ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,

 */ 0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xff,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,

 */ 0x18,0x18,0x18,0x18,0x18,0xff,0x18,0xff,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,

 */ 0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,

 */ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,

 */ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,

 */ 0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,

 */ 0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,

 */ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0x76,0xdc,0xd8,0xd8,0xd8,0xdc,0x76,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x78,0xcc,0xcc,0xcc,0xd8,0xcc,0xc6,0xc6,0xc6,0xcc,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0xfe,0xc6,0xc6,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0xfe,0x6c,0x6c,0x6c,0x6c,0x6c,0x6c,0x6c,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0xfe,0xc6,0x60,0x30,0x18,0x30,0x60,0xc6,0xfe,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0x7e,0xd8,0xd8,0xd8,0xd8,0xd8,0x70,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x66,0x66,0x7c,0x60,0x60,0xc0,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x76,0xdc,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x7e,0x18,0x3c,0x66,0x66,0x66,0x3c,0x18,0x7e,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x38,0x6c,0xc6,0xc6,0xfe,0xc6,0xc6,0x6c,0x38,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x38,0x6c,0xc6,0xc6,0xc6,0x6c,0x6c,0x6c,0x6c,0xee,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x1e,0x30,0x18,0x0c,0x3e,0x66,0x66,0x66,0x66,0x3c,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0x7e,0xdb,0xdb,0xdb,0x7e,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x03,0x06,0x7e,0xdb,0xdb,0xf3,0x7e,0x60,0xc0,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x1c,0x30,0x60,0x60,0x7c,0x60,0x60,0x60,0x30,0x1c,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0xfe,0x00,0x00,0xfe,0x00,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x18,0x18,0x7e,0x18,0x18,0x00,0x00,0xff,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x30,0x18,0x0c,0x06,0x0c,0x18,0x30,0x00,0x7e,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x0c,0x18,0x30,0x60,0x30,0x18,0x0c,0x00,0x7e,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x0e,0x1b,0x1b,0x1b,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,

 */ 0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xd8,0xd8,0xd8,0x70,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x7e,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0x76,0xdc,0x00,0x76,0xdc,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x38,0x6c,0x6c,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x0f,0x0c,0x0c,0x0c,0x0c,0x0c,0xec,0x6c,0x6c,0x3c,0x1c,0x00,0x00,0x00,0x00,

 */ 0x00,0xd8,0x6c,0x6c,0x6c,0x6c,0x6c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x70,0xd8,0x30,0x60,0xc8,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x7c,0x7c,0x7c,0x7c,0x7c,0x7c,0x7c,0x00,0x00,0x00,0x00,0x00,

 */ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/lib/zlib_deflate/deflate_syms.c

 *

 * Exported symbols for the deflate functionality.

 *

 +++ trees.c */

/* trees.c -- output deflated data using Huffman coding

 * Copyright (C) 1995-1996 Jean-loup Gailly

 * For conditions of distribution and use, see copyright notice in zlib.h 

/*

 *  ALGORITHM

 *

 *      The "deflation" process uses several Huffman trees. The more

 *      common source values are represented by shorter bit sequences.

 *

 *      Each code tree is stored in a compressed form which is itself

 * a Huffman encoding of the lengths of all the code strings (in

 * ascending order by source values).  The actual code strings are

 * reconstructed from the lengths in the inflate process, as described

 * in the deflate specification.

 *

 *  REFERENCES

 *

 *      Deutsch, L.P.,"'Deflate' Compressed Data Format Specification".

 *      Available in ftp.uu.net:/pub/archiving/zip/doc/deflate-1.1.doc

 *

 *      Storer, James A.

 *          Data Compression:  Methods and Theory, pp. 49-50.

 *          Computer Science Press, 1988.  ISBN 0-7167-8156-5.

 *

 *      Sedgewick, R.

 *          Algorithms, p290.

 *          Addison-Wesley, 1983. ISBN 0-201-06672-6.

 From: trees.c,v 1.11 1996/07/24 13:41:06 me Exp $ */

 #include "deflate.h" */

/* ===========================================================================

 * Constants

 Bit length codes must not exceed MAX_BL_BITS bits */

 end of block literal code */

 repeat previous bit length 3-6 times (2 bits of repeat count) */

 repeat a zero length 3-10 times  (3 bits of repeat count) */

 repeat a zero length 11-138 times  (7 bits of repeat count) */

 extra bits for each length code */

 extra bits for each distance code */

 extra bits for each bit length code */

/* The lengths of the bit length codes are sent in order of decreasing

 * probability, to avoid transmitting the lengths for unused bit length codes.

/* ===========================================================================

 * Local data. These are initialized only once.

/* The static literal tree. Since the bit lengths are imposed, there is no

 * need for the L_CODES extra codes used during heap construction. However

 * The codes 286 and 287 are needed to build a canonical tree (see zlib_tr_init

 * below).

/* The static distance tree. (Actually a trivial tree since all codes use

 * 5 bits.)

/* distance codes. The first 256 values correspond to the distances

 * 3 .. 258, the last 256 values correspond to the top 8 bits of

 * the 15 bit distances.

 length code for each normalized match length (0 == MIN_MATCH) */

 First normalized length for each code (0 = MIN_MATCH) */

 First normalized distance for each code (0 = distance of 1) */

 static tree or NULL */

 extra bits for each code or NULL */

 base index for extra_bits */

 max number of elements in the tree */

 max bit length for the codes */

/* ===========================================================================

 * Local (static) routines in this file.

 Send a code of the given tree. c and tree must not have side effects */

 DEBUG_ZLIB */

/* Mapping from a distance to a distance code. dist is the distance - 1 and

 * must not have side effects. dist_code[256] and dist_code[257] are never

 * used.

/* ===========================================================================

 * Initialize the various 'constant' tables. In a multi-threaded environment,

 * this function may be called by two threads concurrently, but this is

 * harmless since both invocations do exactly the same thing.

 iterates over tree elements */

 bit counter */

 length value */

 code value */

 distance index */

 number of codes at each bit length for an optimal tree */

 Initialize the mapping length (0..255) -> length code (0..28) */

    /* Note that the length 255 (match length 258) can be represented

     * in two different ways: code 284 + 5 bits or code 285, so we

     * overwrite length_code[255] to use the best encoding:

 Initialize the mapping dist (0..32K) -> dist code (0..29) */

 from now on, all distances are divided by 128 */

 Construct the codes of the static literal tree */

    /* Codes 286 and 287 do not exist, but we must include them in the

     * tree construction to get a canonical Huffman tree (longest code

     * all ones)

 The static distance tree is trivial: */

/* ===========================================================================

 * Initialize the tree data structures for a new zlib stream.

 enough lookahead for inflate */

 Initialize the first block of the first file: */

/* ===========================================================================

 * Initialize a new block.

 iterates over tree elements */

 Initialize the trees. */

 Index within the heap array of least frequent node in the Huffman tree */

/* ===========================================================================

 * Remove the smallest element from the heap and recreate the heap with

 * one less element. Updates heap and heap_len.

/* ===========================================================================

 * Compares to subtrees, using the tree depth as tie breaker when

 * the subtrees have equal frequency. This minimizes the worst case length.

/* ===========================================================================

 * Restore the heap property by moving down the tree starting at node k,

 * exchanging a node with the smallest of its two sons if necessary, stopping

 * when the heap property is re-established (each father smaller than its

 * two sons).

 the tree to restore */

 node to move down */

 left son of k */

 Set j to the smallest of the two sons: */

 Exit if v is smaller than both sons */

 Exchange v with the smallest son */

 And continue down the tree, setting j to the left son of k */

/* ===========================================================================

 * Compute the optimal bit lengths for a tree and update the total bit length

 * for the current block.

 * IN assertion: the fields freq and dad are set, heap[heap_max] and

 *    above are the tree nodes sorted by increasing frequency.

 * OUT assertions: the field len is set to the optimal bit length, the

 *     array bl_count contains the frequencies for each bit length.

 *     The length opt_len is updated; static_len is also updated if stree is

 *     not null.

 the tree descriptor */

 heap index */

 iterate over the tree elements */

 bit length */

 extra bits */

 frequency */

 number of elements with bit length too large */

    /* In a first pass, compute the optimal bit lengths (which may

     * overflow in the case of the bit length tree).

 root of the heap */

 We overwrite tree[n].Dad which is no longer needed */

 not a leaf node */

 This happens for example on obj2 and pic of the Calgary corpus */

 Find the first bit length which could increase: */

 move one leaf down the tree */

 move one overflow item as its brother */

        /* The brother of the overflow item also moves one step up,

         * but this does not affect bl_count[max_length]

    /* Now recompute all bit lengths, scanning in increasing frequency.

     * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all

     * lengths instead of fixing only the wrong ones. This idea is taken

     * from 'ar' written by Haruhiko Okumura.)

/* ===========================================================================

 * Generate the codes for a given tree and bit counts (which need not be

 * optimal).

 * IN assertion: the array bl_count contains the bit length statistics for

 * the given tree and the field len is set for all tree elements.

 * OUT assertion: the field code is set for all tree elements of non

 *     zero code length.

 the tree to decorate */

 largest code with non zero frequency */

 number of codes at each bit length */

 next code value for each bit length */

 running code value */

 bit index */

 code index */

    /* The distribution counts are first used to generate the code values

     * without bit reversal.

    /* Check that the bit counts in bl_count are consistent. The last code

     * must be all ones.

 Now reverse the bits */

/* ===========================================================================

 * Construct one Huffman tree and assigns the code bit strings and lengths.

 * Update the total bit length for the current block.

 * IN assertion: the field freq is set for all tree elements.

 * OUT assertions: the fields len and code are set to the optimal bit length

 *     and corresponding code. The length opt_len is updated; static_len is

 *     also updated if stree is not null. The field max_code is set.

 the tree descriptor */

 iterate over heap elements */

 largest code with non zero frequency */

 new node being created */

    /* Construct the initial heap, with least frequent element in

     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].

     * heap[0] is not used.

    /* The pkzip format requires that at least one distance code exists,

     * and that at least one bit should be sent even if there is only one

     * possible code. So to avoid special checks later on we force at least

     * two codes of non zero frequency.

 node is 0 or 1 so it does not have extra bits */

    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,

     * establish sub-heaps of increasing lengths:

    /* Construct the Huffman tree by repeatedly combining the least two

     * frequent nodes.

 next internal node of the tree */

 n = node of least frequency */

 m = node of next least frequency */

 keep the nodes sorted by frequency */

 Create a new node father of n and m */

 and insert the new node in the heap */

    /* At this point, the fields freq and dad are set. We can now

     * generate the bit lengths.

 The field len is now set, we can generate the bit codes */

/* ===========================================================================

 * Scan a literal or distance tree to determine the frequencies of the codes

 * in the bit length tree.

 the tree to be scanned */

 and its largest code of non zero frequency */

 iterates over all tree elements */

 last emitted length */

 length of current code */

 length of next code */

 repeat count of the current code */

 max repeat count */

 min repeat count */

 guard */

/* ===========================================================================

 * Send a literal or distance tree in compressed form, using the codes in

 * bl_tree.

 the tree to be scanned */

 and its largest code of non zero frequency */

 iterates over all tree elements */

 last emitted length */

 length of current code */

 length of next code */

 repeat count of the current code */

 max repeat count */

 min repeat count */

 tree[max_code+1].Len = -1; */  
/* ===========================================================================

 * Construct the Huffman tree for the bit lengths and return the index in

 * bl_order of the last bit length code to send.

 index of last bit length code of non zero freq */

 Determine the bit length frequencies for literal and distance trees */

 Build the bit length tree: */

    /* opt_len now includes the length of the tree representations, except

     * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.

    /* Determine the number of bit length codes to send. The pkzip format

     * requires that at least 4 bit length codes be sent. (appnote.txt says

     * 3 but the actual value used is 4.)

 Update opt_len to include the bit length tree and counts */

/* ===========================================================================

 * Send the header for a block using dynamic Huffman trees: the counts, the

 * lengths of the bit length codes, the literal tree and the distance tree.

 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.

 number of codes for each tree */

 number of codes for each tree */

 number of codes for each tree */

 index in bl_order */

 not +255 as stated in appnote.txt */

 not -3 as stated in appnote.txt */

 literal tree */

 distance tree */

/* ===========================================================================

 * Send a stored block

 input block */

 length of input block */

 true if this is the last block for a file */

 send block type */

 with header */

/* Send just the `stored block' type code without any length bytes or data.

/* ===========================================================================

 * Send one empty static block to give enough lookahead for inflate.

 * This takes 10 bits, of which 7 may remain in the bit buffer.

 * The current inflate code requires 9 bits of lookahead. If the

 * last two codes for the previous block (real code plus EOB) were coded

 * on 5 bits or less, inflate may have only 5+3 bits of lookahead to decode

 * the last real code. In this case we send two empty static blocks instead

 * of one. (There are no problems if the previous block is stored or fixed.)

 * To simplify the code, we assume the worst case of last real code encoded

 * on one bit only.

 3 for block type, 7 for EOB */

    /* Of the 10 bits for the empty block, we have already sent

     * (10 - bi_valid) bits. The lookahead for the last real code (before

     * the EOB of the previous block) was thus at least one plus the length

     * of the EOB plus what we have just sent of the empty static block.

/* ===========================================================================

 * Determine the best encoding for the current block: dynamic trees, static

 * trees or store, and output the encoded block to the zip file. This function

 * returns the total compressed length for the file so far.

 input block, or NULL if too old */

 length of input block */

 true if this is the last block for a file */

 opt_len and static_len in bytes */

 index of last bit length code of non zero freq */

 Build the Huffman trees unless a stored block is forced */

 Check if the file is ascii or binary */

 Construct the literal and distance trees */

	/* At this point, opt_len and static_len are the total bit lengths of

	 * the compressed block data, excluding the tree representations.

	/* Build the bit length tree for the above two trees, and get the index

	 * in bl_order of the last bit length code to send.

 Determine the best encoding. Compute first the block length in bytes*/

 force a stored block */

    /* If compression failed and this is the first and last block,

     * and if the .zip file can be seeked (to rewrite the local header),

     * the whole file is transformed into a stored file:

 force stored file */

 Since LIT_BUFSIZE <= 2*WSIZE, the input data must be there: */

 without header */

 STORED_FILE_OK */

 force stored block */

 4: two words for the lengths */

        /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.

         * Otherwise we can't have processed more than WSIZE input bytes since

         * the last block flush, because compression would have been

         * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to

         * transform a block into a stored block.

 force static trees */

 align on byte boundary */

/* ===========================================================================

 * Save the match info and tally the frequency counts. Return true if

 * the current block must be flushed.

 distance of matched string */

 match length-MIN_MATCH or unmatched char (if dist==0) */

 lc is the unmatched char */

 Here, lc is the match length - MIN_MATCH */

 dist = match distance - 1 */

 Try to guess if it is profitable to stop the current block here */

 Compute an upper bound for the compressed length */

    /* We avoid equality with lit_bufsize because of wraparound at 64K

     * on 16 bit machines and because stored blocks are restricted to

     * 64K-1 bytes.

/* ===========================================================================

 * Send the block data compressed using the given Huffman trees

 literal tree */

 distance tree */

 distance of matched string */

 match length or unmatched char (if dist == 0) */

 running index in l_buf */

 the code to send */

 number of extra bits to send */

 send a literal byte */

 Here, lc is the match length - MIN_MATCH */

 send the length code */

 send the extra length bits */

 dist is now the match distance - 1 */

 send the distance code */

 send the extra distance bits */

 literal or match pair ? */

 Check that the overlay between pending_buf and d_buf+l_buf is ok: */

/* ===========================================================================

 * Set the data type to ASCII or BINARY, using a crude approximation:

 * binary if more than 20% of the bytes are <= 6 or >= 128, ascii otherwise.

 * IN assertion: the fields freq of dyn_ltree are set and the total of all

 * frequencies does not exceed 64K (to fit in an int on 16 bit machines).

/* ===========================================================================

 * Copy a stored block, storing first the length and its

 * one's complement if requested.

 the input data */

 its length */

 true if block header must be written */

 align on byte boundary */

 enough lookahead for inflate */

 bundle up the put_byte(s, *buf++) calls */

 +++ deflate.c */

/* deflate.c -- compress data using the deflation algorithm

 * Copyright (C) 1995-1996 Jean-loup Gailly.

 * For conditions of distribution and use, see copyright notice in zlib.h 

/*

 *  ALGORITHM

 *

 *      The "deflation" process depends on being able to identify portions

 *      of the input text which are identical to earlier input (within a

 *      sliding window trailing behind the input currently being processed).

 *

 *      The most straightforward technique turns out to be the fastest for

 *      most input files: try all possible matches and select the longest.

 *      The key feature of this algorithm is that insertions into the string

 *      dictionary are very simple and thus fast, and deletions are avoided

 *      completely. Insertions are performed at each input character, whereas

 *      string matches are performed only when the previous match ends. So it

 *      is preferable to spend more time in matches to allow very fast string

 *      insertions and avoid deletions. The matching algorithm for small

 *      strings is inspired from that of Rabin & Karp. A brute force approach

 *      is used to find longer strings when a small match has been found.

 *      A similar algorithm is used in comic (by Jan-Mark Wams) and freeze

 *      (by Leonid Broukhis).

 *         A previous version of this file used a more sophisticated algorithm

 *      (by Fiala and Greene) which is guaranteed to run in linear amortized

 *      time, but has a larger average cost, uses more memory and is patented.

 *      However the F&G algorithm may be faster for some highly redundant

 *      files if the parameter max_chain_length (described below) is too large.

 *

 *  ACKNOWLEDGEMENTS

 *

 *      The idea of lazy evaluation of matches is due to Jan-Mark Wams, and

 *      I found it in 'freeze' written by Leonid Broukhis.

 *      Thanks to many people for bug reports and testing.

 *

 *  REFERENCES

 *

 *      Deutsch, L.P.,"DEFLATE Compressed Data Format Specification".

 *      Available in ftp://ds.internic.net/rfc/rfc1951.txt

 *

 *      A description of the Rabin and Karp algorithm is given in the book

 *         "Algorithms" by R. Sedgewick, Addison-Wesley, p252.

 *

 *      Fiala,E.R., and Greene,D.H.

 *         Data Compression with Finite Windows, Comm.ACM, 32,4 (1989) 490-595

 *

 architecture-specific bits */

/* ===========================================================================

 *  Function prototypes.

 Compression function. Returns the block state after the call. */

/* ===========================================================================

 * Local data

 Tail of hash chains */

 Matches of length 3 are discarded if their distance exceeds TOO_FAR */

/* Minimum amount of lookahead, except at the end of the input file.

 * See deflate.c for comments about the MIN_MATCH+1.

 Workspace to be allocated for deflate processing */

 State memory for the deflator */

 State memory for s390 hardware deflate */

 dfltcc_state must be doubleword aligned for DFLTCC call */

/* Values for max_lazy_match, good_match and max_chain_length, depending on

 * the desired pack level (0..9). The values given below have been tuned to

 * exclude worst case performance for pathological files. Better values may be

 * found for specific files.

 reduce lazy search above this match length */

 do not perform lazy search above this match length */

 quit search above this match length */

      good lazy nice chain */

 0 */ {0,    0,  0,    0, deflate_stored},  
 1 */ {4,    4,  8,    4, deflate_fast}, 
 2 */ {4,    5, 16,    8, deflate_fast},

 3 */ {4,    6, 32,   32, deflate_fast},

 4 */ {4,    4, 16,   16, deflate_slow},  
 5 */ {8,   16, 32,   32, deflate_slow},

 6 */ {8,   16, 128, 128, deflate_slow},

 7 */ {8,   32, 128, 256, deflate_slow},

 8 */ {32, 128, 258, 1024, deflate_slow},

 9 */ {32, 258, 258, 4096, deflate_slow}}; 
/* Note: the deflate() code requires max_lazy >= MIN_MATCH and max_chain >= 4

 * For deflate_fast() (levels <= 3) good is ignored and lazy has a different

 * meaning.

 result of memcmp for equal strings */

/* ===========================================================================

 * Update a hash value with the given input byte

 * IN  assertion: all calls to UPDATE_HASH are made with consecutive

 *    input characters, so that a running hash key can be computed from the

 *    previous key instead of complete recalculation each time.

/* ===========================================================================

 * Insert string str in the dictionary and set match_head to the previous head

 * of the hash chain (the most recent string with same hash key). Return

 * the previous length of the hash chain.

 * IN  assertion: all calls to INSERT_STRING are made with consecutive

 *    input characters and the first MIN_MATCH bytes of str are valid

 *    (except for the last MIN_MATCH-1 bytes of the input file).

/* ===========================================================================

 * Initialize the hash table (avoiding 64K overflow for 16 bit systems).

 * prev[] will be initialized on the fly.

 ========================================================================= */

    /* We overlay pending_buf and d_buf+l_buf. This works since the average

     * output size for (length,distance) codes is <= 24 bits.

 undocumented feature: suppress zlib header */

    /*

     * Direct the workspace's pointers to the chunks that were allocated

     * along with the deflate_workspace struct.

    /*

     *  DFLTCC requires the window to be page aligned.

     *  Thus, we overallocate and take the aligned portion of the buffer.

 16K elements by default */

 ========================================================================= */

 was set to -1 by deflate(..., Z_FINISH); */

/* =========================================================================

 * Put a short in the pending buffer. The 16-bit value is put in MSB order.

 * IN assertion: the stream state is correct and there is enough room in

 * pending_buf.

 ========================================================================= */

 value of flush param for previous deflate call */

 just in case */

 Write the zlib header */

 Save the adler32 of the preset dictionary: */

 Flush as much pending output as possible */

	    /* Since avail_out is 0, deflate will be called again with

	     * more output space, but possibly with both pending and

	     * avail_in equal to zero. There won't be anything to do,

	     * but this is not an error situation so make sure we

	     * return OK instead of BUF_ERROR at next call of deflate:

    /* Make sure there is something to do and avoid duplicate consecutive

     * flushes. For repeated and useless calls with Z_FINISH, we keep

     * returning Z_STREAM_END instead of Z_BUFF_ERROR.

 User must not provide more input after the first FINISH: */

    /* Start a new block or continue the current one.

 avoid BUF_ERROR next call, see above */

	    /* If flush != Z_NO_FLUSH && avail_out == 0, the next call

	     * of deflate should use the same flush parameter to make sure

	     * that the flush is complete. So we don't have to output an

	     * empty block here, this will be done at next call. This also

	     * ensures that for a very small output buffer, we emit at most

	     * one empty block.

		/* Output just the 3-bit `stored' block type value,

 FULL_FLUSH or SYNC_FLUSH */

                /* For a full flush, this empty block will be recognized

                 * as a special marker by inflate_sync().

 forget history */

 avoid BUF_ERROR at next call, see above */

 Write the zlib trailer (adler32) */

    /* If avail_out is zero, the application will call deflate again

     * to flush the rest.

 write the trailer only once! */

 ========================================================================= */

/* ===========================================================================

 * Read a new buffer from the current input stream, update the adler32

 * and total number of bytes read.  All deflate() input goes through

 * this function so some applications may wish to modify it to avoid

 * allocating a large strm->next_in buffer and copying from it.

 * (See also flush_pending()).

/* ===========================================================================

 * Initialize the "longest match" routines for a new zlib stream

    /* Set the default configuration parameters:

/* ===========================================================================

 * Set match_start to the longest match starting at the given string and

 * return its length. Matches shorter or equal to prev_length are discarded,

 * in which case the result is equal to prev_length and match_start is

 * garbage.

 * IN assertions: cur_match is the head of the hash chain for the current

 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1

 * OUT assertion: the match length is not greater than s->lookahead.

/* For 80x86 and 680x0, an optimized version will be provided in match.asm or

 * match.S. The code will be functionally equivalent.

 current match */

 max hash chain length */

 current string */

 matched string */

 length of current match */

 best match length so far */

 stop if match long enough */

    /* Stop when cur_match becomes <= limit. To simplify the code,

     * we prevent matches with the string of window index 0.

    /* Compare two bytes at a time. Note: this is not always beneficial.

     * Try with and without -DUNALIGNED_OK to check.

    /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.

     * It is easy to get rid of this optimization if necessary.

 Do not waste too much time if we already have a good match: */

    /* Do not look for matches beyond the end of the input. This is necessary

     * to make deflate deterministic.

        /* Skip to next match if the match length cannot increase

         * or if the match length is less than 2:

        /* This code assumes sizeof(unsigned short) == 2. Do not use

         * UNALIGNED_OK if your compiler uses a different size.

        /* It is not necessary to compare scan[2] and match[2] since they are

         * always equal when the other bytes match, given that the hash keys

         * are equal and that HASH_BITS >= 8. Compare 2 bytes at a time at

         * strstart+3, +5, ... up to strstart+257. We check for insufficient

         * lookahead only every 4th comparison; the 128th check will be made

         * at strstart+257. If MAX_MATCH-2 is not a multiple of 8, it is

         * necessary to put more guard bytes at the end of the window, or

         * to check more often for insufficient lookahead.

 The funny "do {}" generates better code on most compilers */

 Here, scan <= window+strstart+257 */

 UNALIGNED_OK */

        /* The check at best_len-1 can be removed because it will be made

         * again later. (This heuristic is not always a win.)

         * It is not necessary to compare scan[2] and match[2] since they

         * are always equal when the other bytes match, given that

         * the hash keys are equal and that HASH_BITS >= 8.

        /* We check for insufficient lookahead only every 8th comparison;

         * the 256th check will be made at strstart+258.

 UNALIGNED_OK */

/* ===========================================================================

 * Check that the match at match_start is indeed a match.

 check that the match is indeed a match */

/* ===========================================================================

 * Fill the window when the lookahead becomes insufficient.

 * Updates strstart and lookahead.

 *

 * IN assertion: lookahead < MIN_LOOKAHEAD

 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD

 *    At least one byte has been read, or avail_in == 0; reads are

 *    performed for at least two bytes (required for the zip translate_eol

 *    option -- not supported here).

 Amount of free space at the end of the window. */

 Deal with !@#$% 64K limit: */

            /* Very unlikely, but possible on 16 bit machine if strstart == 0

             * and lookahead == 1 (input done one byte at time)

        /* If the window is almost full and there is insufficient lookahead,

         * move the upper half to the lower one to make room in the upper half.

 we now have strstart >= MAX_DIST */

            /* Slide the hash table (could be avoided with 32 bit values

               at the expense of memory usage). We slide even when level == 0

               to keep the hash table consistent if we switch back to level > 0

               later. (Using level 0 permanently is not an optimal usage of

               zlib, so we don't care about this pathological case.)

                /* If n is not on any hash chain, prev[n] is garbage but

                 * its value will never be used.

        /* If there was no sliding:

         *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&

         *    more == window_size - lookahead - strstart

         * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)

         * => more >= window_size - 2*WSIZE + 2

         * In the BIG_MEM or MMAP case (not yet supported),

         *   window_size == input_size + MIN_LOOKAHEAD  &&

         *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.

         * Otherwise, window_size == 2*WSIZE so more >= 2.

         * If there was sliding, more >= WSIZE. So in all cases, more >= 2.

 Initialize the hash value now that we have some input: */

        /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,

         * but this is not important since only literal bytes will be emitted.

/* ===========================================================================

 * Flush the current block, with given end-of-file flag.

 * IN assertion: strstart is set to the end of the current match.

 Same but force premature exit if necessary. */

/* ===========================================================================

 * Copy without compression as much as possible from the input stream, return

 * the current block state.

 * This function does not insert new strings in the dictionary since

 * uncompressible data is probably not useful. This function is used

 * only for the level=0 compression option.

 * NOTE: this function should be optimized to avoid extra copying from

 * window to pending_buf.

    /* Stored blocks are limited to 0xffff bytes, pending_buf is limited

     * to pending_buf_size, and each stored block has a 5 byte header:

 Copy as much as possible from input to output: */

 Fill the window as much as possible: */

 flush the current block */

 Emit a stored block if pending_buf will be full: */

 strstart == 0 is possible when wraparound on 16-bit machine */

	/* Flush if we may have to slide, otherwise block_start may become

         * negative and the data will be gone:

/* ===========================================================================

 * Compress as much as possible from the input stream, return the current

 * block state.

 * This function does not perform lazy evaluation of matches and inserts

 * new strings in the dictionary only for unmatched strings or for short

 * matches. It is used only for the fast compression options.

 head of the hash chain */

 set if current block must be flushed */

        /* Make sure that we always have enough lookahead, except

         * at the end of the input file. We need MAX_MATCH bytes

         * for the next match, plus MIN_MATCH bytes to insert the

         * string following the next match.

 flush the current block */

        /* Insert the string window[strstart .. strstart+2] in the

         * dictionary, and set hash_head to the head of the hash chain:

        /* Find the longest match, discarding those <= prev_length.

         * At this point we have always match_length < MIN_MATCH

            /* To simplify the code, we prevent matches with the string

             * of window index 0 (in particular we have to avoid a match

             * of the string with itself at the start of the input file).

 longest_match() sets match_start */

            /* Insert new strings in the hash table only if the match length

             * is not too large. This saves time but degrades compression.

 string at strstart already in hash table */

                    /* strstart never exceeds WSIZE-MAX_MATCH, so there are

                     * always MIN_MATCH bytes ahead.

                /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not

                 * matter since it will be recomputed at next deflate call.

 No match, output a literal byte */

/* ===========================================================================

 * Same as above, but achieves better compression. We use a lazy

 * evaluation for matches: a match is finally adopted only if there is

 * no better match at the next window position.

 head of hash chain */

 set if current block must be flushed */

 Process the input block. */

        /* Make sure that we always have enough lookahead, except

         * at the end of the input file. We need MAX_MATCH bytes

         * for the next match, plus MIN_MATCH bytes to insert the

         * string following the next match.

 flush the current block */

        /* Insert the string window[strstart .. strstart+2] in the

         * dictionary, and set hash_head to the head of the hash chain:

        /* Find the longest match, discarding those <= prev_length.

            /* To simplify the code, we prevent matches with the string

             * of window index 0 (in particular we have to avoid a match

             * of the string with itself at the start of the input file).

 longest_match() sets match_start */

                /* If prev_match is also MIN_MATCH, match_start is garbage

                 * but we will ignore the current match anyway.

        /* If there was a match at the previous step and the current

         * match is not better, output the previous match:

 Do not insert strings in hash table beyond this. */

            /* Insert in hash table all strings up to the end of the match.

             * strstart-1 and strstart are already inserted. If there is not

             * enough lookahead, the last two strings are not inserted in

             * the hash table.

            /* If there was no match at the previous position, output a

             * single literal. If there was a match but the current match

             * is longer, truncate the previous match to a single literal.

            /* There is no previous match to compare with, wait for

             * the next step to decide.

 undocumented feature: suppress zlib header */

 Since the return value is typically passed to vmalloc() unchecked... */

/* mpi-mod.c -  Modular reduction

 * Copyright (C) 1998, 1999, 2001, 2002, 2003,

 *               2007  Free Software Foundation, Inc.

 *

 * This file is part of Libgcrypt.

 Context used with Barrett reduction.  */

 The modulus - may not be modified. */

 If true, M needs to be released.  */

 Helper MPI. */

 Helper MPI. */

 Helper MPI allocated on demand. */

/* This function returns a new context for Barrett based operations on

 * the modulus M.  This context needs to be released using

 * _gcry_mpi_barrett_free.  If COPY is true M will be transferred to

 * the context and the user may change M.  If COPY is false, M may not

 * be changed until gcry_mpi_barrett_free has been called.

 Barrett precalculation: y = floor(b^(2k) / m). */

/* R = X mod M

 *

 * Using Barrett reduction.  Before using this function

 * _gcry_mpi_barrett_init must have been called to do the

 * precalculations.  CTX is the context created by this precalculation

 * and also conveys M.  If the Barret reduction could no be done a

 * straightforward reduction method is used.

 *

 * We assume that these conditions are met:

 * Input:  x =(x_2k-1 ...x_0)_b

 *     m =(m_k-1 ....m_0)_b	  with m_k-1 != 0

 * Output: r = x mod m

	/* 1. q1 = floor( x / b^k-1)

	 *    q2 = q1 * y

	 *    q3 = floor( q2 / b^k+1 )

	 * Actually, we don't need qx, we can work direct on r2

	/* 2. r1 = x mod b^k+1

	 *	r2 = q3 * m mod b^k+1

	 *	r  = r1 - r2

	 * 3. if r < 0 then  r = r + b^k+1

 Quick modulo operation.  */

 Quick modulo operation. */

 4. while r >= m do r = r - m */

/* mpi-bit.c  -  MPI bit level functions

 * Copyright (C) 1998, 1999 Free Software Foundation, Inc.

 *

 * This file is part of GnuPG.

 *

 * GnuPG is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; either version 2 of the License, or

 * (at your option) any later version.

 *

 * GnuPG is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; if not, write to the Free Software

 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA

/****************

 * Sometimes we have MSL (most significant limbs) which are 0;

 * this is for some reasons not good, so this function removes them.

/****************

 * Return the number of bits in A.

/****************

 * Test whether bit N is set.

 too far left: this is a 0 */

/****************

 * Set bit N of A.

/****************

 * Set bit N of A. and clear all bits above

/****************

 * clear bit N of A and all bits above

 not allocated, therefore no need to clear bits :-) */

/****************

 * Clear bit N of A.

 Don't need to clear this bit, it's far too left.  */

/****************

 * Shift A by COUNT limbs to the right

 * This is used only within the MPI library

/*

 * Shift A by N bits to the right.

 In-place operation.  */

 Copy and shift by more or equal bits than in a limb. */

 Copy and shift by less than bits in a limb.  */

				/* The rshift helper function is not specified for

				 * NBITS==0, thus we do a plain copy here.

/****************

 * Shift A by COUNT limbs to the left

 * This is used only within the MPI library

/*

 * Shift A by N bits to the left.

 In-place shift with an amount of zero.  */

 Copy A to X.  */

 Shift a full number of limbs.  */

		/* We use a very dump approach: Shift left by the number of

		 * limbs plus one and than fix it up by an rshift.

/* mpicoder.c  -  Coder for the external representation of MPIs

 * Copyright (C) 1998, 1999 Free Software Foundation, Inc.

 *

 * This file is part of GnuPG.

 *

 * GnuPG is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; either version 2 of the License, or

 * (at your option) any later version.

 *

 * GnuPG is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; if not, write to the Free Software

 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA

/**

 * mpi_read_raw_data - Read a raw byte stream as a positive integer

 * @xbuffer: The data to read

 * @nbytes: The amount of data to read

/****************

 * Fill the mpi VAL from the hex string in STR.

 Skip optional hex prefix.  */

/**

 * mpi_read_buffer() - read MPI to a buffer provided by user (msb first)

 *

 * @a:		a multi precision integer

 * @buf:	buffer to which the output will be written to. Needs to be at

 *		least mpi_get_size(a) long.

 * @buf_len:	size of the buf.

 * @nbytes:	receives the actual length of the data written on success and

 *		the data to-be-written on -EOVERFLOW in case buf_len was too

 *		small.

 * @sign:	if not NULL, it will be set to the sign of a.

 *

 * Return:	0 on success or error code in case of error

/*

 * mpi_get_buffer() - Returns an allocated buffer with the MPI (msb first).

 * Caller must free the return string.

 * This function does return a 0 byte buffer with nbytes set to zero if the

 * value of A is zero.

 *

 * @a:		a multi precision integer.

 * @nbytes:	receives the length of this buffer.

 * @sign:	if not NULL, it will be set to the sign of the a.

 *

 * Return:	Pointer to MPI buffer or NULL on error

/**

 * mpi_write_to_sgl() - Funnction exports MPI to an sgl (msb first)

 *

 * This function works in the same way as the mpi_read_buffer, but it

 * takes an sgl instead of u8 * buf.

 *

 * @a:		a multi precision integer

 * @sgl:	scatterlist to write to. Needs to be at least

 *		mpi_get_size(a) long.

 * @nbytes:	the number of bytes to write.  Leading bytes will be

 *		filled with zero.

 * @sign:	if not NULL, it will be set to the sign of a.

 *

 * Return:	0 on success or error code in case of error

/*

 * mpi_read_raw_from_sgl() - Function allocates an MPI and populates it with

 *			     data from the sgl

 *

 * This function works in the same way as the mpi_read_raw_data, but it

 * takes an sgl instead of void * buffer. i.e. it allocates

 * a new MPI and reads the content of the sgl to the MPI.

 *

 * @sgl:	scatterlist to read from

 * @nbytes:	number of bytes to read

 *

 * Return:	Pointer to a new MPI or NULL on error

 Perform a two's complement operation on buffer P of size N bytes.  */

	/* Libgcrypt does no always care to set clear the sign if the value

	 * is 0.  For printing this is a bit of a surprise, in particular

	 * because if some of the formats don't support negative numbers but

	 * should be able to print a zero.  Thus we need this extra test

	 * for a negative number.

 Need to extend the sign.  */

			/* Positive but the high bit of the returned buffer is set.

			 * Thus we need to print an extra leading 0x00 so that the

			 * output is interpreted as a positive number.

 The provided buffer is too short. */

 Note:  We ignore the sign for this format.  */

		/* FIXME: for performance reasons we should put this into

		 * mpi_aprint because we can then use the buffer directly.

 The PGP format can only handle unsigned integers.  */

 Need to extend the sign.  */

/* ec.c -  Elliptic Curve functions

 * Copyright (C) 2007 Free Software Foundation, Inc.

 * Copyright (C) 2013 g10 Code GmbH

 *

 * This file is part of Libgcrypt.

 *

 * Libgcrypt is free software; you can redistribute it and/or modify

 * it under the terms of the GNU Lesser General Public License as

 * published by the Free Software Foundation; either version 2.1 of

 * the License, or (at your option) any later version.

 *

 * Libgcrypt is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU Lesser General Public License for more details.

 *

 * You should have received a copy of the GNU Lesser General Public

 * License along with this program; if not, see <http://www.gnu.org/licenses/>.

/* Create a new point option.  NBITS gives the size in bits of one

 * coordinate; it is only used to pre-allocate some resources and

 * might also be passed as 0 to use a default value.

 Currently not used.  */

 Release the point object P.  P may be NULL. */

/* Initialize the fields of a point object.  gcry_mpi_point_free_parts

 * may be used to release the fields.

 Release the parts of a point object. */

 Set the value from S into D.  */

 W = W mod P.  */

ec_mod(w, ec);*/

 W = 2 * U mod P.  */

 mpi_abs(w); */

/* Shortcut for

 * ec_powm(B, B, mpi_const(MPI_C_TWO), ctx);

 * for easier optimization.

 Using mpi_mul is slightly faster (at least on amd64).  */

 mpi_powm(w, b, mpi_const(MPI_C_TWO), ctx->p); */

/* Shortcut for

 * ec_powm(B, B, mpi_const(MPI_C_THREE), ctx);

 * for easier optimization.

 Routines for 2^255 - 19.  */

 Routines for 2^448 - 2^224 - 1.  */

 computation routines for the field.  */

 Force recomputation of all helper variables.  */

 Accessor for helper variable.  */

 Accessor for helper variable.  */

/* This function initialized a context for elliptic curve based on the

 * field GF(p).  P is the prime specifying this field, A is the first

 * coefficient.  CTX is expected to be zeroized.

 TODO: 1 or -1 */;

 Fixme: Do we want to check some constraints? e.g.  a < p  */

 Allocate scratch variables.  */

 Domain parameter.  */

 The key.  */

 Private data of ec.c.  */

/* Compute the affine coordinates from the projective coordinates in

 * POINT.  Set them into X and Y.  If one coordinate is not required,

 * X or Y may be passed as NULL.  CTX is the usual context. Returns: 0

 * on success or !0 if POINT is at infinity.

 Using Jacobian coordinates.  */

 z1 = z^(-1) mod p  */

 z2 = z^(-2) mod p  */

 z3 = z^(-3) mod p */

  RESULT = 2 * POINT  (Weierstrass version). */

 P_y == 0 || P_z == 0 => [1:1:0] */

 Use the faster case.  */

 L1 = 3(X - Z^2)(X + Z^2) */

                          T1: used for Z^2. */

                          T2: used for the right term. */

 Standard case. */

 L1 = 3X^2 + aZ^4 */

                          T1: used for aZ^4. */

 Z3 = 2YZ */

 L2 = 4XY^2 */

                              T2: used for Y2; required later. */

 X3 = L1^2 - 2L2 */

                              T1: used for L2^2. */

 L3 = 8Y^4 */

                              T2: taken from above. */

 Y3 = L1(L2 - X3) - L3 */

  RESULT = 2 * POINT  (Montgomery version). */

  RESULT = 2 * POINT  (Twisted Edwards version). */

 Compute: (X_3 : Y_3 : Z_3) = 2( X_1 : Y_1 : Z_1 ) */

 B = (X_1 + Y_1)^2  */

 C = X_1^2 */

 D = Y_1^2 */

 E = aC */

 F = E + D */

 H = Z_1^2 */

 J = F - 2H */

 X_3 = (B - C - D) · J */

 Y_3 = F · (E - D) */

 Z_3 = F · J */

  RESULT = 2 * POINT  */

 RESULT = P1 + P2  (Weierstrass version).*/

 Same point; need to call the duplicate function.  */

 P1 is at infinity.  */

 P2 is at infinity.  */

 l1 = x1 z2^2  */

 l2 = x2 z1^2  */

 l3 = l1 - l2 */

 l4 = y1 z2^3  */

 l5 = y2 z1^3  */

 l6 = l4 - l5  */

 P1 and P2 are the same - use duplicate function. */

 P1 is the inverse of P2.  */

 l7 = l1 + l2  */

 l8 = l4 + l5  */

 z3 = z1 z2 l3  */

 x3 = l6^2 - l7 l3^2  */

 l9 = l7 l3^2 - 2 x3  */

 y3 = (l9 l6 - l8 l3^3)/2  */

 fixme: Use saved value*/

 RESULT = P1 + P2  (Montgomery version).*/

 RESULT = P1 + P2  (Twisted Edwards version).*/

 Compute: (X_3 : Y_3 : Z_3) = (X_1 : Y_1 : Z_1) + (X_2 : Y_2 : Z_3) */

 A = Z1 · Z2 */

 B = A^2 */

 C = X1 · X2 */

 D = Y1 · Y2 */

 E = d · C · D */

 F = B - E */

 G = B + E */

 X_3 = A · F · ((X_1 + Y_1) · (X_2 + Y_2) - C - D) */

 Y_3 = A · G · (D - aC) */

 Z_3 = F · G */

/* Compute a step of Montgomery Ladder (only use X and Z in the point).

 * Inputs:  P1, P2, and x-coordinate of DIF = P1 - P1.

 * Outputs: PRD = 2 * P1 and  SUM = P1 + P2.

 CTX->A: (a-2)/4 */

 RESULT = P1 + P2 */

/* Scalar point multiplication - the main function for ECC.  If takes

 * an integer SCALAR and a POINT as well as the usual context CTX.

 * RESULT will be set to the resulting point.

		/* Simple left to right binary method.  Algorithm 3.27 from

		 * {author={Hankerson, Darrel and Menezes, Alfred J. and Vanstone, Scott},

		 *  title = {Guide to Elliptic Curve Cryptography},

		 *  year = {2003}, isbn = {038795273X},

		 *  url = {http://www.cacr.math.uwaterloo.ca/ecc/},

		 *  publisher = {Springer-Verlag New York, Inc.}}

		/* Compute scalar point multiplication with Montgomery Ladder.

		 * Note that we don't use Y-coordinate in the points at all.

		 * RESULT->Y will be filled by zero.

 h = 3k */

		/* If SCALAR is zero, the above mpi_mul sets H to zero and thus

		 * LOOPs will be zero.  To avoid an underflow of I in the main

		 * loop we set LOOP to 2 and the result to (0,0,0).

 Invert point: y = p - y mod p  */

 Return true if POINT is on the curve described by CTX.  */

	/* Check that the point is in range.  This needs to be done here and

	 * not after conversion to affine coordinates.

 y^2 == x^3 + a·x + b */

 With Montgomery curve, only X-coordinate is valid. */

 The equation is: b * y^2 == x^3 + a · x^2 + x */

			/* We check if right hand is quadratic residue or not by

			 * Euler's criterion.

 CTX->A has (a-2)/4 and CTX->B has b^-1 */

 Compute Euler's criterion: w^(p-1)/2 */

 a · x^2 + y^2 - 1 - b · x^2 · y^2 == 0 */

 SPDX-License-Identifier: GPL-2.0-or-later

/* mpihelp-mul_1.c  -  MPI helper functions

 * Copyright (C) 1994, 1996, 1997, 1998, 2001 Free Software Foundation, Inc.

 *

 * This file is part of GnuPG.

 *

 * Note: This code is heavily based on the GNU MP Library.

 *	 Actually it's the same code with only minor changes in the

 *	 way the data is stored; this is to support the abstraction

 *	 of an optional secure memory allocation which may be used

 *	 to avoid revealing of sensitive data due to paging etc.

 *	 The GNU MP Library itself is published under the LGPL;

 *	 however I decided to publish this code under the plain GPL.

	/* The loop counter and index J goes from -S1_SIZE to -1.  This way

 Offset the base pointers to compensate for the negative indices.  */

/* mpi-div.c  -  MPI functions

 * Copyright (C) 1994, 1996, 1998, 2001, 2002,

 *               2003 Free Software Foundation, Inc.

 *

 * This file is part of Libgcrypt.

 *

 * Note: This code is heavily based on the GNU MP Library.

 *	 Actually it's the same code with only minor changes in the

 *	 way the data is stored; this is to support the abstraction

 *	 of an optional secure memory allocation which may be used

 *	 to avoid revealing of sensitive data due to paging etc.

	/* We need the original value of the divisor after the remainder has been

	 * preliminary calculated.	We have to copy it to temporary space if it's

	 * the same variable as REM.

/* If den == quot, den needs temporary storage.

 * If den == rem, den needs temporary storage.

 * If num == quot, num needs temporary storage.

 * If den has temporary storage, it can be normalized while being copied,

 *   i.e no extra storage should be allocated.

	/* Ensure space is enough for quotient and remainder.

	 * We need space for an extra limb in the remainder, because it's

	 * up-shifted (normalized) below.

 qsize cannot be bigger than this.	*/

			/* This needs to follow the assignment to rem, in case the

			 * numerator and quotient are the same.

 Read pointers here, when reallocation is finished.  */

 Optimize division by a single-limb divisor.  */

		/* Make sure QP and NP point to different objects.  Otherwise the

		 * numerator would be gradually overwritten by the quotient limbs.

 Copy NP object to temporary space.  */

 Put quotient at top of remainder. */

	/* Normalize the denominator, i.e. make its most significant bit set by

	 * shifting it NORMALIZATION_STEPS bits to the left.  Also shift the

	 * numerator the same number of steps (to keep the quotient the same!).

		/* Shift up the denominator setting the most significant bit of

		 * the most significant word.  Use temporary storage not to clobber

		 * the original contents of the denominator.

		/* Shift up the numerator, possibly introducing a new most

		 * significant word.  Move the shifted numerator in the remainder

		 * meanwhile.

		/* The denominator is already normalized, as required.	Copy it to

		 * temporary space if it overlaps with the quotient or remainder.

 Move the numerator to the remainder.  */

 SPDX-License-Identifier: GPL-2.0-or-later

/* mpihelp-add_2.c  -  MPI helper functions

 * Copyright (C) 1994, 1996, 1997, 1998, 2001 Free Software Foundation, Inc.

 *

 * This file is part of GnuPG.

 *

 * Note: This code is heavily based on the GNU MP Library.

 *	 Actually it's the same code with only minor changes in the

 *	 way the data is stored; this is to support the abstraction

 *	 of an optional secure memory allocation which may be used

 *	 to avoid revealing of sensitive data due to paging etc.

 *	 The GNU MP Library itself is published under the LGPL;

 *	 however I decided to publish this code under the plain GPL.

	/* The loop counter and index J goes from -SIZE to -1.  This way

 Offset the base pointers to compensate for the negative indices.  */

 add previous carry to subtrahend */

 get out carry from that addition */

 main subtract */

 get out carry from the subtract, combine */

/* mpi-inv.c  -  MPI functions

 *	Copyright (C) 1998, 2001, 2002, 2003 Free Software Foundation, Inc.

 *

 * This file is part of Libgcrypt.

 *

 * Libgcrypt is free software; you can redistribute it and/or modify

 * it under the terms of the GNU Lesser General Public License as

 * published by the Free Software Foundation; either version 2.1 of

 * the License, or (at your option) any later version.

 *

 * Libgcrypt is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU Lesser General Public License for more details.

 *

 * You should have received a copy of the GNU Lesser General Public

 * License along with this program; if not, see <http://www.gnu.org/licenses/>.

/****************

 * Calculate the multiplicative inverse X of A mod N

 * That is: Find the solution x for

 *		1 = (a*x) mod n

	/* Extended Euclid's algorithm (See TAOCP Vol II, 4.5.2, Alg X)

	 * modified according to Michael Penk's solution for Exercise 35

	 * with further enhancement

 Inverse does not exists.  */

 Inverse does not exists.  */

 U is used as const 1 */

 u is odd */

 one is odd */

 while t3 is even */

 while t3 != 0 */

 mpi_lshift( u3, k ); */

 SPDX-License-Identifier: GPL-2.0-or-later

/* mpihelp-mul_3.c  -  MPI helper functions

 * Copyright (C) 1994, 1996, 1997, 1998, 2001 Free Software Foundation, Inc.

 *

 * This file is part of GnuPG.

 *

 * Note: This code is heavily based on the GNU MP Library.

 *	 Actually it's the same code with only minor changes in the

 *	 way the data is stored; this is to support the abstraction

 *	 of an optional secure memory allocation which may be used

 *	 to avoid revealing of sensitive data due to paging etc.

 *	 The GNU MP Library itself is published under the LGPL;

 *	 however I decided to publish this code under the plain GPL.

	/* The loop counter and index J goes from -SIZE to -1.  This way

/* mpi-mul.c  -  MPI functions

 * Copyright (C) 1994, 1996, 1998, 2001, 2002,

 *               2003 Free Software Foundation, Inc.

 *

 * This file is part of Libgcrypt.

 *

 * Note: This code is heavily based on the GNU MP Library.

 *	 Actually it's the same code with only minor changes in the

 *	 way the data is stored; this is to support the abstraction

 *	 of an optional secure memory allocation which may be used

 *	 to avoid revealing of sensitive data due to paging etc.

 Swap U and V. */

 Ensure W has space enough to store the result.  */

 Make U and V not overlap with W.	*/

 W and U are identical.  Allocate temporary space for U. */

 Is V identical too?  Keep it identical with U.  */

 Copy to the temporary space.  */

 W and V are identical.  Allocate temporary space for V. */

 Copy to the temporary space.  */

 SPDX-License-Identifier: GPL-2.0-or-later

/* mpi-pow.c  -  MPI functions

 *	Copyright (C) 1994, 1996, 1998, 2000 Free Software Foundation, Inc.

 *

 * This file is part of GnuPG.

 *

 * Note: This code is heavily based on the GNU MP Library.

 *	 Actually it's the same code with only minor changes in the

 *	 way the data is stored; this is to support the abstraction

 *	 of an optional secure memory allocation which may be used

 *	 to avoid revealing of sensitive data due to paging etc.

 *	 The GNU MP Library itself is published under the LGPL;

 *	 however I decided to publish this code under the plain GPL.

/****************

 * RES = BASE ^ EXP mod MOD

 to avoid compiler warning */

 fixme: we should check that the warning is void */

		/* Exponent is zero, result is 1 mod MOD, i.e., 1 or 0

	/* Normalize MOD (i.e. make its most significant bit set) as required by

	 * mpn_divrem.  This will make the intermediate values in the calculation

	 * slightly larger, but the correct result is obtained after a final

 The base is larger than the module. Reduce it. */

		/* Allocate (BSIZE + 1) with space for remainder and quotient.

		/* We don't care about the quotient, store it above the remainder,

		/* Canonicalize the base, since we are going to multiply with it

		/* We have to allocate more space for RES.  If any of the input

		 * parameters are identical to RES, defer deallocation of the old

 Make BASE, EXP and MOD not overlap with RES.  */

 RES and BASE are identical.  Allocate temp. space for BASE.  */

 RES and EXP are identical.  Allocate temp. space for EXP.  */

 RES and MOD are identical.  Allocate temporary space for MOD. */

 shift the exp bits to the left, lose msb */

		/* Main loop.

		 *

		 * Make the result be pointed to alternately by XP and RP.  This

		 * helps us avoid block copying, which would otherwise be necessary

		 * with the overlap restrictions of mpihelp_divmod. With 50% probability

		 * the result after this loop will be in the area originally pointed

		 * by RP (==RES->d), and with 50% probability in the area originally

		 * pointed to by XP.

if (mpihelp_mul_n(xp, rp, rp, rsize) < 0) goto enomem */

mpihelp_mul( xp, rp, rsize, bp, bsize ); */

		/* We shifted MOD, the modulo reduction argument, left MOD_SHIFT_CNT

		 * steps.  Adjust the result by reducing it with the original MOD.

		 *

		 * Also make sure the result is put in RES->d (where it already

		 * might be, see above).

 Remove any leading zero words from the result.  */

 SPDX-License-Identifier: GPL-2.0-or-later

/* mpi-sub-ui.c - Subtract an unsigned integer from an MPI.

 *

 * Copyright 1991, 1993, 1994, 1996, 1999-2002, 2004, 2012, 2013, 2015

 * Free Software Foundation, Inc.

 *

 * This file was based on the GNU MP Library source file:

 * https://gmplib.org/repo/gmp-6.2/file/510b83519d1c/mpz/aors_ui.h

 *

 * The GNU MP Library is free software; you can redistribute it and/or modify

 * it under the terms of either:

 *

 *   * the GNU Lesser General Public License as published by the Free

 *     Software Foundation; either version 3 of the License, or (at your

 *     option) any later version.

 *

 * or

 *

 *   * the GNU General Public License as published by the Free Software

 *     Foundation; either version 2 of the License, or (at your option) any

 *     later version.

 *

 * or both in parallel, as here.

 *

 * The GNU MP Library is distributed in the hope that it will be useful, but

 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY

 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License

 * for more details.

 *

 * You should have received copies of the GNU General Public License and the

 * GNU Lesser General Public License along with the GNU MP Library.  If not,

 * see https://www.gnu.org/licenses/.

 If not space for W (and possible carry), increase space. */

		/* The signs are different.  Need exact comparison to determine

		 * which operand to subtract from which.

 Size can decrease with at most one limb. */

/* mpi-add.c  -  MPI functions

 * Copyright (C) 1994, 1996, 1998, 2001, 2002,

 *               2003 Free Software Foundation, Inc.

 *

 * This file is part of Libgcrypt.

 *

 * Note: This code is heavily based on the GNU MP Library.

 *	 Actually it's the same code with only minor changes in the

 *	 way the data is stored; this is to support the abstraction

 *	 of an optional secure memory allocation which may be used

 *	 to avoid revealing of sensitive data due to paging etc.

/****************

 * Add the unsigned integer V to the mpi-integer U and store the

 * result in W. U and V may be the same.

 If not space for W (and possible carry), increase space.  */

 These must be after realloc (U may be the same as W).  */

 simple */

 mpi is not negative */

		/* The signs are different.  Need exact comparison to determine

		 * which operand to subtract from which.

 Size can decrease with at most one limb. */

 Swap U and V. */

 These must be after realloc (u or v may be the same as w).  */

 These must be after realloc (u or v may be the same as w).  */

 simple */

 different sign */

 This test is right since USIZE >= VSIZE */

 U and V have same sign. Add them. */

 SPDX-License-Identifier: GPL-2.0-or-later

/* mpihelp-div.c  -  MPI helper functions

 *	Copyright (C) 1994, 1996 Free Software Foundation, Inc.

 *	Copyright (C) 1998, 1999 Free Software Foundation, Inc.

 *

 * This file is part of GnuPG.

 *

 * Note: This code is heavily based on the GNU MP Library.

 *	 Actually it's the same code with only minor changes in the

 *	 way the data is stored; this is to support the abstraction

 *	 of an optional secure memory allocation which may be used

 *	 to avoid revealing of sensitive data due to paging etc.

 *	 The GNU MP Library itself is published under the LGPL;

 *	 however I decided to publish this code under the plain GPL.

 Botch: Should this be handled at all?  Rely on callers?	*/

	/* If multiplication is much faster than division, and the

	 * dividend is large, pre-invert the divisor, and use

	 * only multiplications in the inner loop.

	 *

	 * This test should be read:

	 *	 Does it ever help to use udiv_qrnnd_preinv?

	 *	   && Does what we save compensate for the inversion overhead?

			/* Compute (2**2N - 2**N * DIVISOR_LIMB) / DIVISOR_LIMB.  The

			 * result is a (N+1)-bit approximation to 1/DIVISOR_LIMB, with the

			 * most significant bit (with weight 2**N) implicit.

			 *

			 * Special case for DIVISOR_LIMB == 100...000.

			/* Possible optimization:

			 * if (r == 0

			 * && divisor_limb > ((n1 << normalization_steps)

			 *		       | (dividend_ptr[dividend_size - 2] >> ...)))

			 * ...one division less...

			/* Compute (2**2N - 2**N * DIVISOR_LIMB) / DIVISOR_LIMB.  The

			 * result is a (N+1)-bit approximation to 1/DIVISOR_LIMB, with the

			 * most significant bit (with weight 2**N) implicit.

			 *

			 * Special case for DIVISOR_LIMB == 100...000.

				/* Possible optimization:

				 * if (r == 0

				 * && divisor_limb > ((n1 << normalization_steps)

				 *		   | (dividend_ptr[dividend_size - 2] >> ...)))

				 * ...one division less...

		/* No normalization needed, either because udiv_qrnnd doesn't require

		 * it, or because DIVISOR_LIMB is already normalized.

/* Divide num (NP/NSIZE) by den (DP/DSIZE) and write

 * the NSIZE-DSIZE least significant quotient limbs at QP

 * and the DSIZE long remainder at NP.	If QEXTRA_LIMBS is

 * non-zero, generate that many fraction bits and append them after the

 * other quotient limbs.

 * Return the most significant limb of the quotient, this is always 0 or 1.

 *

 * Preconditions:

 * 0. NSIZE >= DSIZE.

 * 1. The most significant bit of the divisor must be set.

 * 2. QP must either not overlap with the input operands at all, or

 *    QP + DSIZE >= NP must hold true.	(This means that it's

 *    possible to put the quotient in the high part of NUM, right after the

 *    remainder in NUM.

 * 3. NSIZE >= DSIZE, even if QEXTRA_LIMBS is non-zero.

		/* We are asked to divide by zero, so go ahead and do it!  (To make

		/*

		 * existing clients of this function have been modified

		 * not to call it with dsize == 0, so this should not happen

					/* Q should be either 111..111 or 111..110.  Need special

					 * treatment of this rare case as normal division would

 Carry in the addition? */

 The estimated Q was too large.  */

 If not carry, test Q again.  */

					/* This might over-estimate q, but it's probably not worth

 I.e. "carry in previous addition?" */

				/* Possible optimization: We already have (q * n0) and (1 * n1)

				 * after the calculation of q.  Taking advantage of that, we

/****************

 * Divide (DIVIDEND_PTR,,DIVIDEND_SIZE) by DIVISOR_LIMB.

 * Write DIVIDEND_SIZE limbs of quotient at QUOT_PTR.

 * Return the single-limb remainder.

 * There are no constraints on the value of the divisor.

 *

 * QUOT_PTR and DIVIDEND_PTR might point to the same limb.

	/* If multiplication is much faster than division, and the

	 * dividend is large, pre-invert the divisor, and use

	 * only multiplications in the inner loop.

	 *

	 * This test should be read:

	 * Does it ever help to use udiv_qrnnd_preinv?

	 * && Does what we save compensate for the inversion overhead?

			/* Compute (2**2N - 2**N * DIVISOR_LIMB) / DIVISOR_LIMB.  The

			 * result is a (N+1)-bit approximation to 1/DIVISOR_LIMB, with the

			 * most significant bit (with weight 2**N) implicit.

 Special case for DIVISOR_LIMB == 100...000.  */

			/* Possible optimization:

			 * if (r == 0

			 * && divisor_limb > ((n1 << normalization_steps)

			 *		       | (dividend_ptr[dividend_size - 2] >> ...)))

			 * ...one division less...

			/* Compute (2**2N - 2**N * DIVISOR_LIMB) / DIVISOR_LIMB.  The

			 * result is a (N+1)-bit approximation to 1/DIVISOR_LIMB, with the

			 * most significant bit (with weight 2**N) implicit.

 Special case for DIVISOR_LIMB == 100...000.  */

				/* Possible optimization:

				 * if (r == 0

				 * && divisor_limb > ((n1 << normalization_steps)

				 *		   | (dividend_ptr[dividend_size - 2] >> ...)))

				 * ...one division less...

		/* No normalization needed, either because udiv_qrnnd doesn't require

		 * it, or because DIVISOR_LIMB is already normalized.

 SPDX-License-Identifier: GPL-2.0-or-later

/* mpihelp-mul_2.c  -  MPI helper functions

 * Copyright (C) 1994, 1996, 1997, 1998, 2001 Free Software Foundation, Inc.

 *

 * This file is part of GnuPG.

 *

 * Note: This code is heavily based on the GNU MP Library.

 *	 Actually it's the same code with only minor changes in the

 *	 way the data is stored; this is to support the abstraction

 *	 of an optional secure memory allocation which may be used

 *	 to avoid revealing of sensitive data due to paging etc.

 *	 The GNU MP Library itself is published under the LGPL;

 *	 however I decided to publish this code under the plain GPL.

	/* The loop counter and index J goes from -SIZE to -1.  This way

 SPDX-License-Identifier: GPL-2.0-or-later

/* mpihelp-lshift.c  -	MPI helper functions

 * Copyright (C) 1994, 1996, 1998, 2001 Free Software Foundation, Inc.

 *

 * This file is part of GnuPG.

 *

 * Note: This code is heavily based on the GNU MP Library.

 *	 Actually it's the same code with only minor changes in the

 *	 way the data is stored; this is to support the abstraction

 *	 of an optional secure memory allocation which may be used

 *	 to avoid revealing of sensitive data due to paging etc.

 *	 The GNU MP Library itself is published under the LGPL;

 *	 however I decided to publish this code under the plain GPL.

/* Shift U (pointed to by UP and USIZE digits long) CNT bits to the left

 * and store the USIZE least significant digits of the result at WP.

 * Return the bits shifted out from the most significant digit.

 *

 * Argument constraints:

 * 1. 0 < CNT < BITS_PER_MP_LIMB

 * 2. If the result is to be written over the input, WP must be >= UP.

 SPDX-License-Identifier: GPL-2.0-or-later

/* mpih-rshift.c  -  MPI helper functions

 * Copyright (C) 1994, 1996, 1998, 1999,

 *               2000, 2001 Free Software Foundation, Inc.

 *

 * This file is part of GNUPG

 *

 * Note: This code is heavily based on the GNU MP Library.

 *	 Actually it's the same code with only minor changes in the

 *	 way the data is stored; this is to support the abstraction

 *	 of an optional secure memory allocation which may be used

 *	 to avoid revealing of sensitive data due to paging etc.

 *	 The GNU MP Library itself is published under the LGPL;

 *	 however I decided to publish this code under the plain GPL.

/* Shift U (pointed to by UP and USIZE limbs long) CNT bits to the right

 * and store the USIZE least significant limbs of the result at WP.

 * The bits shifted out to the right are returned.

 *

 * Argument constraints:

 * 1. 0 < CNT < BITS_PER_MP_LIMB

 * 2. If the result is to be written over the input, WP must be <= UP.

/* mpiutil.ac  -  Utility functions for MPI

 * Copyright (C) 1998, 1999 Free Software Foundation, Inc.

 *

 * This file is part of GnuPG.

 *

 * GnuPG is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; either version 2 of the License, or

 * (at your option) any later version.

 *

 * GnuPG is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; if not, write to the Free Software

 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA

 Constants allocated right away at startup.  */

/* Initialize the MPI subsystem.  This is called early and allows to

 * do some initialization without taking care of threading issues.

/* Return a constant MPI descripbed by NO which is one of the

 * MPI_C_xxx macros.  There is no need to copy this returned value; it

 * may be used directly.

/****************

 * Note:  It was a bad idea to use the number of limbs to allocate

 *	  because on a alpha the limbs are large but we normally need

 *	  integers of n bits - So we should change this to bits (or bytes).

 *

 *	  But mpi_alloc is used in a lot of places :-)

/****************

 * Resize the array of A to NLIMBS. the additional space is cleared

 * (set to 0) [done by m_realloc()]

 no need to do it */

/****************

 * Note: This copy function should not interpret the MPI

 *	 but copy it transparently.

 Reset the immutable and constant flags. */

/****************

 * This function allocates an MPI which is optimized to hold

 * a value as large as the one given in the argument and allocates it

 * with the same flags as A.

 Set U into W and release U.  If W is NULL only U will be released. */

 Reset the immutable and constant flags.  */

	/* FIXME: If U is 0 we have no need to resize and thus possible

	 * allocating the the limbs.

/****************

 * Swap the value of A and B, when SWAP is 1.

 * Leave the value when SWAP is 0.

 * This implementation should be constant-time regardless of SWAP.

/* mpi-cmp.c  -  MPI functions

 * Copyright (C) 1998, 1999 Free Software Foundation, Inc.

 *

 * This file is part of GnuPG.

 *

 * GnuPG is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; either version 2 of the License, or

 * (at your option) any later version.

 *

 * GnuPG is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; if not, write to the Free Software

 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA

 Compare sign bits.  */

 U and V are either both positive or both negative.  */

 SPDX-License-Identifier: GPL-2.0-or-later

/* mpihelp-mul.c  -  MPI helper functions

 * Copyright (C) 1994, 1996, 1998, 1999,

 *               2000 Free Software Foundation, Inc.

 *

 * This file is part of GnuPG.

 *

 * Note: This code is heavily based on the GNU MP Library.

 *	 Actually it's the same code with only minor changes in the

 *	 way the data is stored; this is to support the abstraction

 *	 of an optional secure memory allocation which may be used

 *	 to avoid revealing of sensitive data due to paging etc.

 *	 The GNU MP Library itself is published under the LGPL;

 *	 however I decided to publish this code under the plain GPL.

/* Multiply the natural numbers u (pointed to by UP) and v (pointed to by VP),

 * both with SIZE limbs, and store the result at PRODP.  2 * SIZE limbs are

 * always stored.  Return the most significant limb.

 *

 * Argument constraints:

 * 1. PRODP != UP and PRODP != VP, i.e. the destination

 *    must be distinct from the multiplier and the multiplicand.

 *

 *

 * Handle simple cases with traditional multiplication.

 *

 * This is the most critical code of multiplication.  All multiplies rely

 * on this, both small and huge.  Small ones arrive here immediately.  Huge

 * ones arrive here as this is the base case for Karatsuba's recursive

 * algorithm below.

	/* Multiply by the first limb in V separately, as the result can be

	/* For each iteration in the outer loop, multiply one limb from

		/* The size is odd, and the code below doesn't handle that.

		 * Multiply the least significant (size - 1) limbs with a recursive

		 * call, and handle the most significant limb of S1 and S2

		 * separately.

		 * A slightly faster way to do this would be to make the Karatsuba

		 * code below behave as if the size were even, and let it check for

		 * odd size in the end.  I.e., in essence move this code to the end.

		 * Doing so would save us a recursive call, and potentially make the

		 * stack grow a lot less.

 even size */

		/* Anatolij Alekseevich Karatsuba's divide-and-conquer algorithm.

		 *

		 * Split U in two pieces, U1 and U0, such that

		 * U = U0 + U1*(B**n),

		 * and V in V1 and V0, such that

		 * V = V0 + V1*(B**n).

		 *

		 * UV is then computed recursively using the identity

		 *

		 *        2n   n          n                     n

		 * UV = (B  + B )U V  +  B (U -U )(V -V )  +  (B + 1)U V

		 *                1 1        1  0   0  1              0 0

		 *

		 * Where B = 2**BITS_PER_MP_LIMB.

		/* Product H.      ________________  ________________

		 *                |_____U1 x V1____||____U0 x V0_____|

		 * Put result in upper part of PROD and pass low part of TSPACE

		 * as new TSPACE.

		/* Product M.      ________________

		 *                |_(U1-U0)(V0-V1)_|

 No change of NEGFLG.  */

		/* Read temporary operands from low part of PROD.

		 * Put result in low part of TSPACE using upper part of TSPACE

		 * as new TSPACE.

 Add/copy product H. */

 Add product M (if NEGFLG M is a negative number) */

		/* Product L.      ________________  ________________

		 *                |________________||____U0 x V0_____|

		 * Read temporary operands from low part of PROD.

		 * Put result in low part of TSPACE using upper part of TSPACE

		 * as new TSPACE.

 Add/copy Product L (twice) */

	/* Multiply by the first limb in V separately, as the result can be

	/* For each iteration in the outer loop, multiply one limb from

		/* The size is odd, and the code below doesn't handle that.

		 * Multiply the least significant (size - 1) limbs with a recursive

		 * call, and handle the most significant limb of S1 and S2

		 * separately.

		 * A slightly faster way to do this would be to make the Karatsuba

		 * code below behave as if the size were even, and let it check for

		 * odd size in the end.  I.e., in essence move this code to the end.

		 * Doing so would save us a recursive call, and potentially make the

		 * stack grow a lot less.

 even size */

		/* Product H.      ________________  ________________

		 *                |_____U1 x U1____||____U0 x U0_____|

		 * Put result in upper part of PROD and pass low part of TSPACE

		 * as new TSPACE.

		/* Product M.      ________________

		 *                |_(U1-U0)(U0-U1)_|

		/* Read temporary operands from low part of PROD.

		 * Put result in low part of TSPACE using upper part of TSPACE

 Add/copy product H  */

 Add product M (if NEGFLG M is a negative number).  */

		/* Product L.      ________________  ________________

		 *                |________________||____U0 x U0_____|

		 * Read temporary operands from low part of PROD.

		 * Put result in low part of TSPACE using upper part of TSPACE

 Add/copy Product L (twice).  */

/* Multiply the natural numbers u (pointed to by UP, with USIZE limbs)

 * and v (pointed to by VP, with VSIZE limbs), and store the result at

 * PRODP.  USIZE + VSIZE limbs are always stored, but if the input

 * operands are normalized.  Return the most significant limb of the

 * result.

 *

 * NOTE: The space pointed to by PRODP is overwritten before finished

 * with U and V, so overlap is an error.

 *

 * Argument constraints:

 * 1. USIZE >= VSIZE.

 * 2. PRODP != UP and PRODP != VP, i.e. the destination

 *    must be distinct from the multiplier and the multiplicand.

		/* Multiply by the first limb in V separately, as the result can be

		/* For each iteration in the outer loop, multiply one limb from

 SPDX-License-Identifier: GPL-2.0-or-later

/* mpihelp-add_1.c  -  MPI helper functions

 * Copyright (C) 1994, 1996, 1997, 1998,

 *               2000 Free Software Foundation, Inc.

 *

 * This file is part of GnuPG.

 *

 * Note: This code is heavily based on the GNU MP Library.

 *	 Actually it's the same code with only minor changes in the

 *	 way the data is stored; this is to support the abstraction

 *	 of an optional secure memory allocation which may be used

 *	 to avoid revealing of sensitive data due to paging etc.

 *	 The GNU MP Library itself is published under the LGPL;

 *	 however I decided to publish this code under the plain GPL.

	/* The loop counter and index J goes from -SIZE to -1.  This way

 Offset the base pointers to compensate for the negative indices. */

 add previous carry to one addend */

 get out carry from that addition */

 add other addend */

 get out carry from that add, combine */

 SPDX-License-Identifier: GPL-2.0-or-later

/* mpihelp-sub.c  -  MPI helper functions

 *	Copyright (C) 1994, 1996 Free Software Foundation, Inc.

 *	Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.

 *

 * This file is part of GnuPG.

 *

 * Note: This code is heavily based on the GNU MP Library.

 *	 Actually it's the same code with only minor changes in the

 *	 way the data is stored; this is to support the abstraction

 *	 of an optional secure memory allocation which may be used

 *	 to avoid revealing of sensitive data due to paging etc.

 *	 The GNU MP Library itself is published under the LGPL;

 *	 however I decided to publish this code under the plain GPL.

/****************

 * Compare OP1_PTR/OP1_SIZE with OP2_PTR/OP2_SIZE.

 * There are no restrictions on the relative sizes of

 * the two arguments.

 * Return 1 if OP1 > OP2, 0 if they are equal, and -1 if OP1 < OP2.

	/* This can *not* be simplified to

	 *   op2_word - op2_word

 SPDX-License-Identifier: GPL-2.0 OR MIT

/*

 * Copyright (C) 2015-2019 Jason A. Donenfeld <Jason@zx2c4.com>. All Rights Reserved.

 *

 * This is an implementation of the BLAKE2s hash and PRF functions.

 *

 * Information: https://blake2.net/

 *

 SPDX-License-Identifier: GPL-2.0 OR MIT

/*

 * Copyright (C) 2015-2019 Jason A. Donenfeld <Jason@zx2c4.com>. All Rights Reserved.

 *

 * This is based in part on Andrew Moon's poly1305-donna, which is in the

 * public domain.

 r &= 0xffffffc0ffffffc0ffffffc0fffffff */

 s = 20*r */

 h += m[i] */

 h *= r */

 (partial) h %= p */

 fully carry h */

 compute h + -p */

 select h if h < p, or h + -p if h >= p */

 h = (h + nonce) */

 mac = h % (2^128) */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * The ChaCha stream cipher (RFC7539)

 *

 * Copyright (C) 2015 Martin Willi

 for crypto_xor_cpy

 aligned to potentially speed up crypto_xor() */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Cryptographic API

 *

 * ARC4 Cipher Algorithm

 *

 * Jon Oberheide <jon@oberheide.org>

 SPDX-License-Identifier: GPL-2.0 OR MIT

/*

 * Copyright (C) 2015-2016 The fiat-crypto Authors.

 * Copyright (C) 2018-2019 Jason A. Donenfeld <Jason@zx2c4.com>. All Rights Reserved.

 *

 * This is a machine-generated formally verified implementation of Curve25519

 * ECDH from: <https://github.com/mit-plv/fiat-crypto>. Though originally

 * machine generated, it has been tweaked to be suitable for use in the kernel.

 * It is optimized for 32-bit machines and machines that cannot work efficiently

 * with 128-bit integer types.

/* fe means field element. Here the field is \Z/(2^255-19). An element t,

 * entries t[0]...t[9], represents the integer t[0]+2^26 t[1]+2^51 t[2]+2^77

 * t[3]+2^102 t[4]+...+2^230 t[9].

 * fe limbs are bounded by 1.125*2^26,1.125*2^25,1.125*2^26,1.125*2^25,etc.

 * Multiplication and carrying produce fe from fe_loose.

/* fe_loose limbs are bounded by 3.375*2^26,3.375*2^25,3.375*2^26,3.375*2^25,etc

 * Addition and subtraction produce fe_loose from (fe, fe).

 Ignores top bit of s. */

 26 used, 32-26 left.   26 */

 (32-26) + 19 =  6+19 = 25 */

 (32-19) + 13 = 13+13 = 26 */

 (32-13) +  6 = 19+ 6 = 25 */

 (32- 6)              = 26 */

                        25 */

 (32-25) + 19 =  7+19 = 26 */

 (32-19) + 12 = 13+12 = 25 */

 (32-12) +  6 = 20+ 6 = 26 */

                                     25 */

bool*/

bool*/ c, u32 a, u32 b, u32 *low)

	/* This function extracts 25 bits of result and 1 bit of carry

	 * (26 total), so a 32-bit intermediate is sufficient.

bool*/

bool*/ c, u32 a, u32 b, u32 *low)

	/* This function extracts 26 bits of result and 1 bit of carry

	 * (27 total), so a 32-bit intermediate is sufficient.

bool*/

bool*/ c, u32 a, u32 b, u32 *low)

	/* This function extracts 25 bits of result and 1 bit of borrow

	 * (26 total), so a 32-bit intermediate is sufficient.

bool*/

bool*/ c, u32 a, u32 b, u32 *low)

	/* This function extracts 26 bits of result and 1 bit of borrow

	 *(27 total), so a 32-bit intermediate is sufficient.

 all set if nonzero, 0 if 0 */

bool*/ x21 = subborrow_u26(0x0, x2, 0x3ffffed, &x20);

bool*/ x24 = subborrow_u25(x21, x4, 0x1ffffff, &x23);

bool*/ x27 = subborrow_u26(x24, x6, 0x3ffffff, &x26);

bool*/ x30 = subborrow_u25(x27, x8, 0x1ffffff, &x29);

bool*/ x33 = subborrow_u26(x30, x10, 0x3ffffff, &x32);

bool*/ x36 = subborrow_u25(x33, x12, 0x1ffffff, &x35);

bool*/ x39 = subborrow_u26(x36, x14, 0x3ffffff, &x38);

bool*/ x42 = subborrow_u25(x39, x16, 0x1ffffff, &x41);

bool*/ x45 = subborrow_u26(x42, x18, 0x3ffffff, &x44);

bool*/ x48 = subborrow_u25(x45, x17, 0x1ffffff, &x47);

bool*/ x53 = addcarryx_u26(0x0, x20, x50, &x52);

bool*/ x57 = addcarryx_u25(x53, x23, x54, &x56);

bool*/ x61 = addcarryx_u26(x57, x26, x58, &x60);

bool*/ x65 = addcarryx_u25(x61, x29, x62, &x64);

bool*/ x69 = addcarryx_u26(x65, x32, x66, &x68);

bool*/ x73 = addcarryx_u25(x69, x35, x70, &x72);

bool*/ x77 = addcarryx_u26(x73, x38, x74, &x76);

bool*/ x81 = addcarryx_u25(x77, x41, x78, &x80);

bool*/ x85 = addcarryx_u26(x81, x44, x82, &x84);

 h = f */

 h = 0 */

 h = 1 */

/* h = f + g

 * Can overlap h with f or g.

/* h = f - g

 * Can overlap h with f or g.

/* Replace (f,g) with (g,f) if b == 1;

 * replace (f,g) with (f,g) if b == 0.

 *

 * Preconditions: b in {0,1}

 NOTE: based on fiat-crypto fe_mul, edited for in2=121666, 0, 0.*/

	/* The following implementation was transcribed to Coq and proven to

	 * correspond to unary scalar multiplication in affine coordinates given

	 * that x1 != 0 is the x coordinate of some point on the curve. It was

	 * also checked in Coq that doing a ladderstep with x1 = x3 = 0 gives

	 * z2' = z3' = 0, and z2 = z3 = 0 gives z2' = z3' = 0. The statement was

	 * quantified over the underlying field, so it applies to Curve25519

	 * itself and the quadratic twist of Curve25519. It was not proven in

	 * Coq that prime-field arithmetic correctly simulates extension-field

	 * arithmetic on prime-field values. The decoding of the byte array

	 * representation of e was not considered.

	 *

	 * Specification of Montgomery curves in affine coordinates:

	 * <https://github.com/mit-plv/fiat-crypto/blob/2456d821825521f7e03e65882cc3521795b0320f/src/Spec/MontgomeryCurve.v#L27>

	 *

	 * Proof that these form a group that is isomorphic to a Weierstrass

	 * curve:

	 * <https://github.com/mit-plv/fiat-crypto/blob/2456d821825521f7e03e65882cc3521795b0320f/src/Curves/Montgomery/AffineProofs.v#L35>

	 *

	 * Coq transcription and correctness proof of the loop

	 * (where scalarbits=255):

	 * <https://github.com/mit-plv/fiat-crypto/blob/2456d821825521f7e03e65882cc3521795b0320f/src/Curves/Montgomery/XZ.v#L118>

	 * <https://github.com/mit-plv/fiat-crypto/blob/2456d821825521f7e03e65882cc3521795b0320f/src/Curves/Montgomery/XZProofs.v#L278>

	 * preconditions: 0 <= e < 2^255 (not necessarily e < order),

	 * fe_invert(0) = 0

		/* loop invariant as of right before the test, for the case

		 * where x1 != 0:

		 *   pos >= -1; if z2 = 0 then x2 is nonzero; if z3 = 0 then x3

		 *   is nonzero

		 *   let r := e >> (pos+1) in the following equalities of

		 *   projective points:

		 *   to_xz (r*P)     === if swap then (x3, z3) else (x2, z2)

		 *   to_xz ((r+1)*P) === if swap then (x2, z2) else (x3, z3)

		 *   x1 is the nonzero x coordinate of the nonzero

		 *   point (r*P-(r+1)*P)

		/* Coq transcription of ladderstep formula (called from

		 * transcribed loop):

		 * <https://github.com/mit-plv/fiat-crypto/blob/2456d821825521f7e03e65882cc3521795b0320f/src/Curves/Montgomery/XZ.v#L89>

		 * <https://github.com/mit-plv/fiat-crypto/blob/2456d821825521f7e03e65882cc3521795b0320f/src/Curves/Montgomery/XZProofs.v#L131>

		 * x1 != 0 <https://github.com/mit-plv/fiat-crypto/blob/2456d821825521f7e03e65882cc3521795b0320f/src/Curves/Montgomery/XZProofs.v#L217>

		 * x1  = 0 <https://github.com/mit-plv/fiat-crypto/blob/2456d821825521f7e03e65882cc3521795b0320f/src/Curves/Montgomery/XZProofs.v#L147>

	/* here pos=-1, so r=e, so to_xz (e*P) === if swap then (x3, z3)

	 * else (x2, z2)

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SHA-256, as specified in

 * http://csrc.nist.gov/groups/STM/cavp/documents/shs/sha256-384-512.pdf

 *

 * SHA-256 code by Jean-Luc Cooke <jlcooke@certainkey.com>.

 *

 * Copyright (c) Jean-Luc Cooke <jlcooke@certainkey.com>

 * Copyright (c) Andrew McDonald <andrew@mcdonald.org.uk>

 * Copyright (c) 2002 James Morris <jmorris@intercode.com.au>

 * Copyright (c) 2014 Red Hat Inc.

 load the input */

 now blend */

 load the state into our registers */

 now iterate */

 Save number of bits */

 Pad out to 56 mod 64. */

 Append length (before padding) */

 Store state in digest */

 Zeroize sensitive information. */

 SPDX-License-Identifier: GPL-2.0 OR MIT

/*

 * Copyright (C) 2015-2019 Jason A. Donenfeld <Jason@zx2c4.com>. All Rights Reserved.

 wycheproof - normal case */

 wycheproof - public key on twist */

 wycheproof - public key on twist */

 wycheproof - public key on twist */

 wycheproof - public key on twist */

 wycheproof - public key on twist */

 wycheproof - public key = 0 */

 wycheproof - public key = 1 */

 wycheproof - edge case on twist */

 wycheproof - edge case on twist */

 wycheproof - edge case on twist */

 wycheproof - edge case on twist */

 wycheproof - edge case on twist */

 wycheproof - edge case on twist */

 wycheproof - edge case for public key */

 wycheproof - edge case for public key */

 wycheproof - edge case for public key */

 wycheproof - edge case for public key */

 wycheproof - edge case for public key */

 wycheproof - edge case for public key */

 wycheproof - edge case for public key */

 wycheproof - public key with low order */

 wycheproof - public key with low order */

 wycheproof - public key with low order */

 wycheproof - public key with low order */

 wycheproof - public key with low order */

 wycheproof - public key with low order */

 wycheproof - public key with low order */

 wycheproof - public key with low order */

 wycheproof - public key with low order */

 wycheproof - public key with low order */

 wycheproof - public key with low order */

 wycheproof - public key with low order */

 wycheproof - public key >= p */

 wycheproof - public key >= p */

 wycheproof - public key >= p */

 wycheproof - public key >= p */

 wycheproof - public key >= p */

 wycheproof - public key >= p */

 wycheproof - public key >= p */

 wycheproof - public key >= p */

 wycheproof - public key >= p */

 wycheproof - public key >= p */

 wycheproof - public key >= p */

 wycheproof - public key >= p */

 wycheproof - public key >= p */

 wycheproof - public key >= p */

 wycheproof - public key >= p */

 wycheproof - public key >= p */

 wycheproof - RFC 7748 */

 wycheproof - RFC 7748 */

 wycheproof - edge case for shared secret */

 wycheproof - edge case for shared secret */

 wycheproof - edge case for shared secret */

 wycheproof - edge case for shared secret */

 wycheproof - edge case for shared secret */

 wycheproof - edge case for shared secret */

 wycheproof - edge case for shared secret */

 wycheproof - edge case for shared secret */

 wycheproof - edge case for shared secret */

 wycheproof - edge case for shared secret */

 wycheproof - edge case for shared secret */

 wycheproof - edge case for shared secret */

 wycheproof - edge case for shared secret */

 wycheproof - edge case for shared secret */

 wycheproof - checking for overflow */

 wycheproof - checking for overflow */

 wycheproof - checking for overflow */

 wycheproof - checking for overflow */

 wycheproof - checking for overflow */

 wycheproof - private key == -1 (mod order) */

 wycheproof - private key == 1 (mod order) on twist */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Cryptographic API.

 *

 * DES & Triple DES EDE Cipher Algorithms.

 *

 * Copyright (c) 2005 Dag Arne Osvik <da@osvik.no>

 Lookup tables for key expansion */

 S-box lookup tables */

 Encryption components: IP, FP, and round function */

/*

 * PC2 lookup tables are organized as 2 consecutive sets of 4 interleaved

 * tables of 128 elements.  One set is for C_i and the other for D_i, while

 * the 4 interleaved tables correspond to four 7-bit subsets of C_i or D_i.

 *

 * After PC1 each of the variables a,b,c,d contains a 7 bit subset of C_i

 * or D_i in bits 7-1 (bit 0 being the least significant).

/*

 * Encryption key expansion

 *

 * RFC2451: Weak key checks SHOULD be performed.

 *

 * FIPS 74:

 *

 *   Keys having duals are keys which produce all zeros, all ones, or

 *   alternating zero-one patterns in the C and D registers after Permuted

 *   Choice 1 has operated on the key.

 *

 K&R: long is at least 32 bits */

 Check if first half is weak */

 Skip to next table set */

 Check if second half is weak */

 Fixup: 2413 5768 -> 1357 2468 */

 Zero if weak key */

/*

 * Decryption key expansion

 *

 * No weak key checking is performed, as this is only used by triple DES

 *

 K&R: long is at least 32 bits */

 Skip to next table set */

 Fixup: 2413 5768 -> 1357 2468 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Poly1305 authenticator algorithm, RFC7539

 *

 * Copyright (C) 2015 Martin Willi

 *

 * Based on public domain code by Andrew Moon and Daniel J. Bernstein.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/*

 * Copyright (C) 2015-2019 Jason A. Donenfeld <Jason@zx2c4.com>. All Rights Reserved.

 *

 * This is based in part on Andrew Moon's poly1305-donna, which is in the

 * public domain.

 r &= 0xffffffc0ffffffc0ffffffc0fffffff */

 s = 5*r */

 h += m[i] */

 h *= r */

 (partial) h %= p */

 fully carry h */

 compute h + -p */

 select h if h < p, or h + -p if h >= p */

 h = h % (2^128) */

 mac = (h + nonce) % (2^128) */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2017-2019 Linaro Ltd <ard.biesheuvel@linaro.org>

/*

 * Emit the sbox as volatile const to prevent the compiler from doing

 * constant folding on sbox references involving fixed indexes.

 multiply by polynomial 'x' (0b10) in GF(2^8) */

 multiply by polynomial 'x^2' (0b100) in GF(2^8) */

	/*

	 * Perform the following matrix multiplication in GF(2^8)

	 *

	 * | 0x2 0x3 0x1 0x1 |   | x[0] |

	 * | 0x1 0x2 0x3 0x1 |   | x[1] |

	 * | 0x1 0x1 0x2 0x3 | x | x[2] |

	 * | 0x3 0x1 0x1 0x2 |   | x[3] |

	/*

	 * Perform the following matrix multiplication in GF(2^8)

	 *

	 * | 0xe 0xb 0xd 0x9 |   | x[0] |

	 * | 0x9 0xe 0xb 0xd |   | x[1] |

	 * | 0xd 0x9 0xe 0xb | x | x[2] |

	 * | 0xb 0xd 0x9 0xe |   | x[3] |

	 *

	 * which can conveniently be reduced to

	 *

	 * | 0x2 0x3 0x1 0x1 |   | 0x5 0x0 0x4 0x0 |   | x[0] |

	 * | 0x1 0x2 0x3 0x1 |   | 0x0 0x5 0x0 0x4 |   | x[1] |

	 * | 0x1 0x1 0x2 0x3 | x | 0x4 0x0 0x5 0x0 | x | x[2] |

	 * | 0x3 0x1 0x1 0x2 |   | 0x0 0x4 0x0 0x5 |   | x[3] |

/**

 * aes_expandkey - Expands the AES key as described in FIPS-197

 * @ctx:	The location where the computed key will be stored.

 * @in_key:	The supplied key.

 * @key_len:	The length of the supplied key.

 *

 * Returns 0 on success. The function fails only if an invalid key size (or

 * pointer) is supplied.

 * The expanded key size is 240 bytes (max of 14 rounds with a unique 16 bytes

 * key schedule plus a 16 bytes key which is used before the first round).

 * The decryption key is prepared for the "Equivalent Inverse Cipher" as

 * described in FIPS-197. The first slot (16 bytes) of each key (enc or dec) is

 * for the initial combination, the second slot for the first round and so on.

	/*

	 * Generate the decryption keys for the Equivalent Inverse Cipher.

	 * This involves reversing the order of the round keys, and applying

	 * the Inverse Mix Columns transformation to all but the first and

	 * the last one.

/**

 * aes_encrypt - Encrypt a single AES block

 * @ctx:	Context struct containing the key schedule

 * @out:	Buffer to store the ciphertext

 * @in:		Buffer containing the plaintext

	/*

	 * Force the compiler to emit data independent Sbox references,

	 * by xoring the input with Sbox values that are known to add up

	 * to zero. This pulls the entire Sbox into the D-cache before any

	 * data dependent lookups are done.

/**

 * aes_decrypt - Decrypt a single AES block

 * @ctx:	Context struct containing the key schedule

 * @out:	Buffer to store the plaintext

 * @in:		Buffer containing the ciphertext

	/*

	 * Force the compiler to emit data independent Sbox references,

	 * by xoring the input with Sbox values that are known to add up

	 * to zero. This pulls the entire Sbox into the D-cache before any

	 * data dependent lookups are done.

 SPDX-License-Identifier: GPL-2.0-or-later */

/*

 * SM4, as specified in

 * https://tools.ietf.org/id/draft-ribose-cfrg-sm4-10.html

 *

 * Copyright (C) 2018 ARM Limited or its affiliates.

 * Copyright (c) 2021 Tianjia Zhang <tianjia.zhang@linux.alibaba.com>

/**

 * sm4_expandkey - Expands the SM4 key as described in GB/T 32907-2016

 * @ctx:	The location where the computed key will be stored.

 * @in_key:	The supplied key.

 * @key_len:	The length of the supplied key.

 *

 * Returns 0 on success. The function fails only if an invalid key size (or

 * pointer) is supplied.

/**

 * sm4_crypt_block - Encrypt or decrypt a single SM4 block

 * @rk:		The rkey_enc for encrypt or rkey_dec for decrypt

 * @out:	Buffer to store output data

 * @in: 	Buffer containing the input data

 SPDX-License-Identifier: GPL-2.0 OR MIT

/*

 * Copyright (C) 2015-2019 Jason A. Donenfeld <Jason@zx2c4.com>. All Rights Reserved.

 *

 * This is an implementation of the BLAKE2s hash and PRF functions.

 *

 * Information: https://blake2.net/

 *

 SPDX-License-Identifier: GPL-2.0 OR MIT

/*

 * Copyright (C) 2015-2019 Jason A. Donenfeld <Jason@zx2c4.com>. All Rights Reserved.

 *

 * This is an implementation of the Curve25519 ECDH algorithm, using either

 * a 32-bit implementation or a 64-bit implementation with 128-bit integers,

 * depending on what is supported by the target compiler.

 *

 * Information: https://cr.yp.to/ecdh.html

 SPDX-License-Identifier: GPL-2.0 OR MIT

/*

 * Copyright (C) 2015-2019 Jason A. Donenfeld <Jason@zx2c4.com>. All Rights Reserved.

 *

 * This is an implementation of the ChaCha20Poly1305 AEAD construction.

 *

 * Information: https://tools.ietf.org/html/rfc8439

 Compute the subkey given the original key and first 128 nonce bits */

 SPDX-License-Identifier: GPL-2.0 OR MIT

/*

 * Copyright (C) 2016-2017 INRIA and Microsoft Corporation.

 * Copyright (C) 2018-2019 Jason A. Donenfeld <Jason@zx2c4.com>. All Rights Reserved.

 *

 * This is a machine-generated formally verified implementation of Curve25519

 * ECDH from: <https://github.com/mitls/hacl-star>. Though originally machine

 * generated, it has been tweaked to be suitable for use in the kernel. It is

 * optimized for 64-bit machines that can efficiently work with 128-bit

 * integer types.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/*

 * Copyright (C) 2015-2019 Jason A. Donenfeld <Jason@zx2c4.com>. All Rights Reserved.

/* The first of these are the ChaCha20-Poly1305 AEAD test vectors from RFC7539

 * 2.8.2. After they are generated by reference implementations. And the final

 * marked ones are taken from wycheproof, but we only do these for the encrypt

 * side, because mostly we're stressing the primitives rather than the actual

 * chapoly construction.

 wycheproof - rfc7539 */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - misc */

 wycheproof - checking for int overflows */

 wycheproof - checking for int overflows */

 wycheproof - checking for int overflows */

 wycheproof - checking for int overflows */

 wycheproof - checking for int overflows */

 wycheproof - checking for int overflows */

 wycheproof - checking for int overflows */

 wycheproof - checking for int overflows */

 wycheproof - checking for int overflows */

 wycheproof - checking for int overflows */

 wycheproof - checking for int overflows */

 wycheproof - checking for int overflows */

 wycheproof - special case tag */

 wycheproof - special case tag */

 wycheproof - special case tag */

 wycheproof - special case tag */

 wycheproof - special case tag */

 wycheproof - special case tag */

 wycheproof - special case tag */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

 wycheproof - edge case intermediate sums in poly1305 */

/* This is for the selftests-only, since it is only useful for the purpose of

 * testing the underlying primitives and interactions.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/*

 * Copyright (C) 2015-2019 Jason A. Donenfeld <Jason@zx2c4.com>. All Rights Reserved.

 *

 * This is an implementation of the Curve25519 ECDH algorithm, using either

 * a 32-bit implementation or a 64-bit implementation with 128-bit integers,

 * depending on what is supported by the target compiler.

 *

 * Information: https://cr.yp.to/ecdh.html

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * The "hash function" used as the core of the ChaCha stream cipher (RFC7539)

 *

 * Copyright (C) 2015 Martin Willi

 whitelist the allowed round counts */

/**

 * chacha_block_generic - generate one keystream block and increment block counter

 * @state: input state matrix (16 32-bit words)

 * @stream: output keystream block (64 bytes)

 * @nrounds: number of rounds (20 or 12; 20 is recommended)

 *

 * This is the ChaCha core, a function from 64-byte strings to 64-byte strings.

 * The caller has already converted the endianness of the input.  This function

 * also handles incrementing the block counter in the input matrix.

/**

 * hchacha_block_generic - abbreviated ChaCha core, for XChaCha

 * @state: input state matrix (16 32-bit words)

 * @stream: output (8 32-bit words)

 * @nrounds: number of rounds (20 or 12; 20 is recommended)

 *

 * HChaCha is the ChaCha equivalent of HSalsa and is an intermediate step

 * towards XChaCha (see https://cr.yp.to/snuffle/xsalsa-20081128.pdf).  HChaCha

 * skips the final addition of the initial state, and outputs only certain words

 * of the state.  It should not be used for streaming directly.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/*

 * Copyright (C) 2015-2019 Jason A. Donenfeld <Jason@zx2c4.com>. All Rights Reserved.

/*

 * blake2s_testvecs[] generated with the program below (using libb2-dev and

 * libssl-dev [OpenSSL])

 *

 * #include <blake2.h>

 * #include <stdint.h>

 * #include <stdio.h>

 *

 * #include <openssl/evp.h>

 * #include <openssl/hmac.h>

 *

 * #define BLAKE2S_TESTVEC_COUNT	256

 *

 * static void print_vec(const uint8_t vec[], int len)

 * {

 *	int i;

 *

 *	printf("  { ");

 *	for (i = 0; i < len; i++) {

 *		if (i && (i % 12) == 0)

 *			printf("\n    ");

 *		printf("0x%02x, ", vec[i]);

 *	}

 *	printf("},\n");

 * }

 *

 * int main(void)

 * {

 *	uint8_t key[BLAKE2S_KEYBYTES];

 *	uint8_t buf[BLAKE2S_TESTVEC_COUNT];

 *	uint8_t hash[BLAKE2S_OUTBYTES];

 *	int i, j;

 *

 *	key[0] = key[1] = 1;

 *	for (i = 2; i < BLAKE2S_KEYBYTES; ++i)

 *		key[i] = key[i - 2] + key[i - 1];

 *

 *	for (i = 0; i < BLAKE2S_TESTVEC_COUNT; ++i)

 *		buf[i] = (uint8_t)i;

 *

 *	printf("static const u8 blake2s_testvecs[][BLAKE2S_HASH_SIZE] __initconst = {\n");

 *

 *	for (i = 0; i < BLAKE2S_TESTVEC_COUNT; ++i) {

 *		int outlen = 1 + i % BLAKE2S_OUTBYTES;

 *		int keylen = (13 * i) % (BLAKE2S_KEYBYTES + 1);

 *

 *		blake2s(hash, buf, key + BLAKE2S_KEYBYTES - keylen, outlen, i,

 *			keylen);

 *		print_vec(hash, outlen);

 *	}

 *	printf("};\n\n");

 *

 *	printf("static const u8 blake2s_hmac_testvecs[][BLAKE2S_HASH_SIZE] __initconst = {\n");

 *

 *	HMAC(EVP_blake2s256(), key, sizeof(key), buf, sizeof(buf), hash, NULL);

 *	print_vec(hash, BLAKE2S_OUTBYTES);

 *

 *	HMAC(EVP_blake2s256(), buf, sizeof(buf), key, sizeof(key), hash, NULL);

 *	print_vec(hash, BLAKE2S_OUTBYTES);

 *

 *	printf("};\n");

 *

 *	return 0;

 *}

 SPDX-License-Identifier: GPL-2.0

/*

 * Generic Reed Solomon encoder / decoder library

 *

 * Copyright (C) 2004 Thomas Gleixner (tglx@linutronix.de)

 *

 * Reed Solomon code lifted from reed solomon library written by Phil Karn

 * Copyright 2002 Phil Karn, KA9Q

 *

 * Description:

 *

 * The generic Reed Solomon library provides runtime configurable

 * encoding / decoding of RS codes.

 *

 * Each user must call init_rs to get a pointer to a rs_control structure

 * for the given rs parameters. The control struct is unique per instance.

 * It points to a codec which can be shared by multiple control structures.

 * If a codec is newly allocated then the polynomial arrays for fast

 * encoding / decoding are built. This can take some time so make sure not

 * to call this function from a time critical path.  Usually a module /

 * driver should initialize the necessary rs_control structure on module /

 * driver init and release it on exit.

 *

 * The encoding puts the calculated syndrome into a given syndrome buffer.

 *

 * The decoding is a two step process. The first step calculates the

 * syndrome over the received (data + syndrome) and calls the second stage,

 * which does the decoding / error correction itself.  Many hw encoders

 * provide a syndrome calculation over the received data + syndrome and can

 * call the second stage directly.

 This list holds all currently allocated rs codec structures */

 Protection for the list */

/**

 * codec_init - Initialize a Reed-Solomon codec

 * @symsize:	symbol size, bits (1-8)

 * @gfpoly:	Field generator polynomial coefficients

 * @gffunc:	Field generator function

 * @fcr:	first root of RS code generator polynomial, index form

 * @prim:	primitive element to generate polynomial roots

 * @nroots:	RS code generator polynomial degree (number of roots)

 * @gfp:	GFP_ flags for allocations

 *

 * Allocate a codec structure and the polynom arrays for faster

 * en/decoding. Fill the arrays according to the given parameters.

 Allocate the arrays */

 Generate Galois field lookup tables */

 log(zero) = -inf */

 alpha**-inf = 0 */

 If it's not primitive, exit */

 Find prim-th root of 1, used in decoding */

 prim-th root of 1, index form */

 Form RS code generator polynomial from its roots */

 Multiply rs->genpoly[] by  @**(root + x) */

 rs->genpoly[0] can never be zero */

 convert rs->genpoly[] to index form for quicker encoding */

/**

 *  free_rs - Free the rs control structure

 *  @rs:	The control structure which is not longer used by the

 *		caller

 *

 * Free the control structure. If @rs is the last user of the associated

 * codec, free the codec as well.

/**

 * init_rs_internal - Allocate rs control, find a matching codec or allocate a new one

 *  @symsize:	the symbol size (number of bits)

 *  @gfpoly:	the extended Galois field generator polynomial coefficients,

 *		with the 0th coefficient in the low order bit. The polynomial

 *		must be primitive;

 *  @gffunc:	pointer to function to generate the next field element,

 *		or the multiplicative identity element if given 0.  Used

 *		instead of gfpoly if gfpoly is 0

 *  @fcr:	the first consecutive root of the rs code generator polynomial

 *		in index form

 *  @prim:	primitive element to generate polynomial roots

 *  @nroots:	RS code generator polynomial degree (number of roots)

 *  @gfp:	GFP_ flags for allocations

 Sanity checks */

	/*

	 * The decoder needs buffers in each control struct instance to

	 * avoid variable size or large fixed size allocations on

	 * stack. Size the buffers to arrays of [nroots + 1].

 Walk through the list and look for a matching entry */

 We have a matching one already */

 Create a new one */

/**

 * init_rs_gfp - Create a RS control struct and initialize it

 *  @symsize:	the symbol size (number of bits)

 *  @gfpoly:	the extended Galois field generator polynomial coefficients,

 *		with the 0th coefficient in the low order bit. The polynomial

 *		must be primitive;

 *  @fcr:	the first consecutive root of the rs code generator polynomial

 *		in index form

 *  @prim:	primitive element to generate polynomial roots

 *  @nroots:	RS code generator polynomial degree (number of roots)

 *  @gfp:	Memory allocation flags.

/**

 * init_rs_non_canonical - Allocate rs control struct for fields with

 *                         non-canonical representation

 *  @symsize:	the symbol size (number of bits)

 *  @gffunc:	pointer to function to generate the next field element,

 *		or the multiplicative identity element if given 0.  Used

 *		instead of gfpoly if gfpoly is 0

 *  @fcr:	the first consecutive root of the rs code generator polynomial

 *		in index form

 *  @prim:	primitive element to generate polynomial roots

 *  @nroots:	RS code generator polynomial degree (number of roots)

/**

 *  encode_rs8 - Calculate the parity for data values (8bit data width)

 *  @rsc:	the rs control structure

 *  @data:	data field of a given type

 *  @len:	data length

 *  @par:	parity data, must be initialized by caller (usually all 0)

 *  @invmsk:	invert data mask (will be xored on data)

 *

 *  The parity uses a uint16_t data type to enable

 *  symbol size > 8. The calling code must take care of encoding of the

 *  syndrome result for storage itself.

/**

 *  decode_rs8 - Decode codeword (8bit data width)

 *  @rsc:	the rs control structure

 *  @data:	data field of a given type

 *  @par:	received parity data field

 *  @len:	data length

 *  @s: 	syndrome data field, must be in index form

 *		(if NULL, syndrome is calculated)

 *  @no_eras:	number of erasures

 *  @eras_pos:	position of erasures, can be NULL

 *  @invmsk:	invert data mask (will be xored on data, not on parity!)

 *  @corr:	buffer to store correction bitmask on eras_pos

 *

 *  The syndrome and parity uses a uint16_t data type to enable

 *  symbol size > 8. The calling code must take care of decoding of the

 *  syndrome result and the received parity before calling this code.

 *

 *  Note: The rs_control struct @rsc contains buffers which are used for

 *  decoding, so the caller has to ensure that decoder invocations are

 *  serialized.

 *

 *  Returns the number of corrected symbols or -EBADMSG for uncorrectable

 *  errors. The count includes errors in the parity.

/**

 *  encode_rs16 - Calculate the parity for data values (16bit data width)

 *  @rsc:	the rs control structure

 *  @data:	data field of a given type

 *  @len:	data length

 *  @par:	parity data, must be initialized by caller (usually all 0)

 *  @invmsk:	invert data mask (will be xored on data, not on parity!)

 *

 *  Each field in the data array contains up to symbol size bits of valid data.

/**

 *  decode_rs16 - Decode codeword (16bit data width)

 *  @rsc:	the rs control structure

 *  @data:	data field of a given type

 *  @par:	received parity data field

 *  @len:	data length

 *  @s: 	syndrome data field, must be in index form

 *		(if NULL, syndrome is calculated)

 *  @no_eras:	number of erasures

 *  @eras_pos:	position of erasures, can be NULL

 *  @invmsk:	invert data mask (will be xored on data, not on parity!)

 *  @corr:	buffer to store correction bitmask on eras_pos

 *

 *  Each field in the data array contains up to symbol size bits of valid data.

 *

 *  Note: The rc_control struct @rsc contains buffers which are used for

 *  decoding, so the caller has to ensure that decoder invocations are

 *  serialized.

 *

 *  Returns the number of corrected symbols or -EBADMSG for uncorrectable

 *  errors. The count includes errors in the parity.

 SPDX-License-Identifier: GPL-2.0

/*

 * Tests for Generic Reed Solomon encoder / decoder library

 *

 * Written by Ferdinand Blomqvist

 * Based on previous work by Phil Karn, KA9Q

 List of codes to test */

 sent codeword */

 received word */

 syndrome */

 correction buffer */

/*

 * Generates a random codeword and stores it in c. Generates random errors and

 * erasures, and stores the random word with errors in r. Erasure positions are

 * stored in derrlocs, while errlocs has one of three values in every position:

 *

 * 0 if there is no error in this position;

 * 1 if there is a symbol error in this position;

 * 2 if there is an erasure without symbol corruption.

 *

 * Returns the number of corrupted symbols.

 Load c with random data and encode */

 Make copyand add errors and erasures */

 Generating random errors */

 Error value must be nonzero */

 Must not choose the same location twice */

 Generating random erasures */

 Must not choose the same location twice */

 Erasure with the symbol intact */

 Erasure with corrupted symbol */

 Error value must be nonzero */

 Calculating syndrome */

 Convert to index form */

 Test up to error correction capacity */

 Tests for correct behaviour beyond error correction capacity */

			/*

			 * We check that the returned word is actually a

			 * codeword. The obvious way to do this would be to

			 * compute the syndrome, but we don't want to replicate

			 * that code here. However, all the codes are in

			 * systematic form, and therefore we can encode the

			 * returned word, and see whether the parity changes or

			 * not.

 Fail will directly unload the module */

 SPDX-License-Identifier: GPL-2.0

/*

 * Generic Reed Solomon encoder / decoder library

 *

 * Copyright 2002, Phil Karn, KA9Q

 * May be used under the terms of the GNU General Public License (GPL)

 *

 * Adaption to the kernel by Thomas Gleixner (tglx@linutronix.de)

 *

 * Generic data width independent code which is included by the wrappers.

	/*

	 * The decoder buffers are in the rs control struct. They are

	 * arrays sized [nroots + 1]

 Check length parameter for validity */

 Does the caller provide the syndrome ? */

			/* The syndrome is in index form,

			 * so nn represents zero

 syndrome is zero, no errors to correct  */

	/* form the syndromes; i.e., evaluate data(x) at roots of

 Convert syndromes to index form, checking for nonzero condition */

		/* if syndrome is zero, data[] is a codeword and there are no

		 * errors to correct. So return data[] unmodified

 Init lambda to be the erasure locator polynomial */

	/*

	 * Begin Berlekamp-Massey algorithm to determine error+erasure

	 * locator polynomial

 r is the step number */

 Compute discrepancy at the r-th step in poly-form */

 Index form */

 2 lines below: B(x) <-- x*B(x) */

 7 lines below: T(x) <-- lambda(x)-discr_r*x*b(x) */

				/*

				 * 2 lines below: B(x) <-- inv(discr_r) *

				 * lambda(x)

 2 lines below: B(x) <-- x*B(x) */

 Convert lambda to index form and compute deg(lambda(x)) */

		/*

		 * deg(lambda) is zero even though the syndrome is non-zero

		 * => uncorrectable error detected

 Find roots of error+erasure locator polynomial by Chien search */

 Number of roots of lambda(x) */

 lambda[0] is always 0 */

 Not a root */

 Impossible error location. Uncorrectable error. */

 store root (index-form) and error location number */

		/* If we've already found max possible roots,

		 * abort the search to save time

		/*

		 * deg(lambda) unequal to number of roots => uncorrectable

		 * error detected

	/*

	 * Compute err+eras evaluator poly omega(x) = s(x)*lambda(x) (modulo

	 * x**nroots). in index form. Also find deg(omega).

	/*

	 * Compute error values in poly-form. num1 = omega(inv(X(l))), num2 =

	 * inv(X(l))**(fcr-1) and den = lambda_pr(inv(X(l))) all in poly-form

	 * Note: we reuse the buffer for b to store the correction pattern

 Nothing to correct at this position */

		/* lambda[i+1] for i even is the formal derivative

	/*

	 * We compute the syndrome of the 'error' and check that it matches

	 * the syndrome of the received word

	/*

	 * Store the error correction pattern, if a

	 * correction buffer is available

 Apply error to data and parity */

 SPDX-License-Identifier: GPL-2.0

/*

 * Generic Reed Solomon encoder / decoder library

 *

 * Copyright 2002, Phil Karn, KA9Q

 * May be used under the terms of the GNU General Public License (GPL)

 *

 * Adaption to the kernel by Thomas Gleixner (tglx@linutronix.de)

 *

 * Generic data width independent code which is included by the wrappers.

 Check length parameter for validity */

 feedback term is non-zero */

 Shift */

 SPDX-License-Identifier: GPL-2.0

/*

 * sys_ipc() is the old de-multiplexer for the SysV IPC calls.

 *

 * This is really horribly ugly, and new architectures should just wire up

 * the individual syscalls instead.

 hack for backward compatibility */

			/*

			 * This was the entry point for kernel-originating calls

			 * from iBCS2 in 2.2 days.

 hack for backward compatibility */

 struct sembuf is the same on 32 and 64bit :)) */

 SPDX-License-Identifier: GPL-2.0

/*

 * 32 bit compatibility code for System V IPC

 *

 * Copyright (C) 1997,1998	Jakub Jelinek (jj@sunsite.mff.cuni.cz)

 * Copyright (C) 1997		David S. Miller (davem@caip.rutgers.edu)

 * Copyright (C) 1999		Arun Sharma <arun.sharma@intel.com>

 * Copyright (C) 2000		VA Linux Co

 * Copyright (C) 2000		Don Dugger <n0ano@valinux.com>

 * Copyright (C) 2000           Hewlett-Packard Co.

 * Copyright (C) 2000           David Mosberger-Tang <davidm@hpl.hp.com>

 * Copyright (C) 2000           Gerhard Tonn (ton@de.ibm.com)

 * Copyright (C) 2000-2002      Andi Kleen, SuSE Labs (x86-64 port)

 * Copyright (C) 2000		Silicon Graphics, Inc.

 * Copyright (C) 2001		IBM

 * Copyright (C) 2004		IBM Deutschland Entwicklung GmbH, IBM Corporation

 * Copyright (C) 2004		Arnd Bergmann (arnd@arndb.de)

 *

 * This code is collected from the versions for sparc64, mips64, s390x, ia64,

 * ppc64 and x86_64, all of which are based on the original sparc64 version

 * by Jakub Jelinek.

 *

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright (C) 2007 IBM Corporation

 *

 *  Author: Cedric Le Goater <clg@fr.ibm.com>

/*

 * POSIX message queues filesystem for Linux.

 *

 * Copyright (C) 2003,2004  Krzysztof Benedyczak    (golbi@mat.uni.torun.pl)

 *                          Michal Wronski          (michal.wronski@gmail.com)

 *

 * Spinlocks:               Mohamed Abbas           (abbas.mohamed@intel.com)

 * Lockless receive & send, fd based notify:

 *			    Manfred Spraul	    (manfred@colorfullife.com)

 *

 * Audit:                   George Wilson           (ltcgcw@us.ibm.com)

 *

 * This file is released under the GPL.

/*

 * Locking:

 *

 * Accesses to a message queue are synchronized by acquiring info->lock.

 *

 * There are two notable exceptions:

 * - The actual wakeup of a sleeping task is performed using the wake_q

 *   framework. info->lock is already released when wake_up_q is called.

 * - The exit codepaths after sleeping check ext_wait_queue->state without

 *   any locks. If it is STATE_READY, then the syscall is completed without

 *   acquiring info->lock.

 *

 * MQ_BARRIER:

 * To achieve proper release/acquire memory barrier pairing, the state is set to

 * STATE_READY with smp_store_release(), and it is read with READ_ONCE followed

 * by smp_acquire__after_ctrl_dep(). In addition, wake_q_add_safe() is used.

 *

 * This prevents the following races:

 *

 * 1) With the simple wake_q_add(), the task could be gone already before

 *    the increase of the reference happens

 * Thread A

 *				Thread B

 * WRITE_ONCE(wait.state, STATE_NONE);

 * schedule_hrtimeout()

 *				wake_q_add(A)

 *				if (cmpxchg()) // success

 *				   ->state = STATE_READY (reordered)

 * <timeout returns>

 * if (wait.state == STATE_READY) return;

 * sysret to user space

 * sys_exit()

 *				get_task_struct() // UaF

 *

 * Solution: Use wake_q_add_safe() and perform the get_task_struct() before

 * the smp_store_release() that does ->state = STATE_READY.

 *

 * 2) Without proper _release/_acquire barriers, the woken up task

 *    could read stale data

 *

 * Thread A

 *				Thread B

 * do_mq_timedreceive

 * WRITE_ONCE(wait.state, STATE_NONE);

 * schedule_hrtimeout()

 *				state = STATE_READY;

 * <timeout returns>

 * if (wait.state == STATE_READY) return;

 * msg_ptr = wait.msg;		// Access to stale data!

 *				receiver->msg = message; (reordered)

 *

 * Solution: use _release and _acquire barriers.

 *

 * 3) There is intentionally no barrier when setting current->state

 *    to TASK_INTERRUPTIBLE: spin_unlock(&info->lock) provides the

 *    release memory barrier, and the wakeup is triggered when holding

 *    info->lock, i.e. spin_lock(&info->lock) provided a pairing

 *    acquire memory barrier.

 queue of sleeping tasks */

 ptr of loaded message */

 one of STATE_* values */

 user who created, for accounting */

 for tasks waiting for free space and messages, respectively */

 size of queue in memory (sum of all msgs) */

/*

 * This routine should be called with the mq_lock held.

 Auxiliary functions to manipulate messages' list */

	/*

	 * During insert, low priorities go to the left and high to the

	 * right.  On receive, we want the highest priorities first, so

	 * walk all the way to the right.

 mqueue specific info */

 set when all is ok */

		/*

		 * We used to allocate a static array of pointers and account

		 * the size of that array as well as one msg_msg struct per

		 * possible message into the queue size. That's no longer

		 * accurate as the queue is now an rbtree and will grow and

		 * shrink depending on usage patterns.  We can, however, still

		 * account one msg_msg struct per message, but the nodes are

		 * allocated depending on priority usage, and most programs

		 * only use one, or a handful, of priorities.  However, since

		 * this is pinned memory, we need to assume worst case, so

		 * that means the min(mq_maxmsg, max_priorities) * struct

		 * posix_msg_tree_node.

 check for overflow */

 mqueue_evict_inode() releases info->messages */

 Some things misbehave if size == 0 on a directory */

 Total amount of bytes accounted for the mqueue */

		/*

		 * get_ns_from_inode() ensures that the

		 * (ipc_ns = sb->s_fs_info) is either a valid ipc_ns

		 * to which we now hold a reference, or it is NULL.

		 * We can't put it here under mq_lock, though.

/*

*	This is routine for system read from queue file.

*	To avoid mess with doing here some sort of mq_receive we allow

*	to read only queue size & notification info (the only values

*	that are interesting from user point of view and aren't accessible

*	through std routines)

 Adds current to info->e_wait_q[sr] before element with smaller prio */

/*

 * Puts current task to sleep. Caller must hold queue lock. After return

 * lock isn't held.

 * sr: SEND or RECV

 memory barrier not required, we hold info->lock */

 see MQ_BARRIER for purpose/pairing */

 we hold info->lock, so no memory barrier required */

/*

 * Returns waiting task that should be serviced first or NULL if none exists

/*

 * The next function is only to split too long sys_mq_timedsend

	/* notification

	 * invoked when there is registered process and there isn't process

	 * waiting synchronously for message AND state of queue changed from

	 * empty to not empty. Here we are sure that no one is waiting

 do_mq_notify() accepts sigev_signo == 0, why?? */

 map current pid/uid into info->owner's namespaces */

			/*

			 * We can't use kill_pid_info(), this signal should

			 * bypass check_kill_permission(). It is from kernel

			 * but si_fromuser() can't know this.

			 * We do check the self_exec_id, to avoid sending

			 * signals to programs that don't expect them.

 after notification unregisters process */

 it already existed */

 we'll drop it in any case */

/* Pipelined send and receive functions.

 *

 * If a receiver finds no waiting message, then it registers itself in the

 * list of waiting receivers. A sender checks that list before adding the new

 * message into the message array. If there is a waiting receiver, then it

 * bypasses the message array and directly hands the message over to the

 * receiver. The receiver accepts the message and returns without grabbing the

 * queue spinlock:

 *

 * - Set pointer to message.

 * - Queue the receiver task for later wakeup (without the info->lock).

 * - Update its state to STATE_READY. Now the receiver can continue.

 * - Wake up the process after the lock is dropped. Should the process wake up

 *   before this wakeup (due to a timeout or a signal) it will either see

 *   STATE_READY and continue or acquire the lock to check the state again.

 *

 * The same algorithm is used for senders.

 see MQ_BARRIER for purpose/pairing */

/* pipelined_send() - send a message directly to the task waiting in

 * sys_mq_timedreceive() (without inserting message into a queue).

/* pipelined_receive() - if there is task waiting in sys_mq_timedsend()

 for poll */

	/* First try to allocate memory, before doing anything with

	/*

	 * msg_insert really wants us to have a valid, spare node struct so

	 * it doesn't have to kmalloc a GFP_ATOMIC allocation, but it will

	 * fall back to that if necessary.

 Save our speculative allocation into the cache */

 memory barrier not required, we hold info->lock */

			/*

			 * wq_sleep must be called with info->lock held, and

			 * returns with the lock released

 adds message to the queue */

 checks if buffer is big enough */

	/*

	 * msg_insert really wants us to have a valid, spare node struct so

	 * it doesn't have to kmalloc a GFP_ATOMIC allocation, but it will

	 * fall back to that if necessary.

 Save our speculative allocation into the cache */

 memory barrier not required, we hold info->lock */

 There is now free space in queue. */

/*

 * Notes: the case when user wants us to deregister (with NULL as pointer)

 * and he isn't currently owner of notification, will be silently discarded.

 * It isn't explicitly defined in the POSIX.

 create the notify skb */

 TODO: add a header? */

 and attach it to the socket */

 message queue flags		     */

 maximum number of messages	     */

 maximum message size		     */

 number of messages currently queued  */

 ignored for input, zeroed for output */

 ignore failures - they are not fatal */

 SPDX-License-Identifier: GPL-2.0

/*

 * linux/ipc/namespace.c

 * Copyright (C) 2006 Pavel Emelyanov <xemul@openvz.org> OpenVZ, SWsoft Inc.

/*

 * free_ipcs - free all ipcs of one type

 * @ns:   the namespace to remove the ipcs from

 * @ids:  the table of ipcs to free

 * @free: the function called to free each individual ipc

 *

 * Called for each kind of ipc when an ipc_namespace exits.

	/* mq_put_mnt() waits for a grace period as kern_unmount()

	 * uses synchronize_rcu().

/*

 * The work queue is used to avoid the cost of synchronize_rcu in kern_unmount.

/*

 * put_ipc_ns - drop a reference to an ipc namespace.

 * @ns: the namespace to put

 *

 * If this is the last task in the namespace exiting, and

 * it is dropping the refcount to 0, then it can race with

 * a task in another ipc namespace but in a mounts namespace

 * which has this ipcns's mqueuefs mounted, doing some action

 * with one of the mqueuefs files.  That can raise the refcount.

 * So dropping the refcount, and raising the refcount when

 * accessing it through the VFS, are protected with mq_lock.

 *

 * (Clearly, a task raising the refcount on its own ipc_ns

 * needn't take mq_lock since it can't race with the last task

 * in the ipcns exiting).

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * linux/ipc/msgutil.c

 * Copyright (C) 1999, 2004 Manfred Spraul

/*

 * The next 2 defines are here bc this is the only file

 * compiled when either CONFIG_SYSVIPC and CONFIG_POSIX_MQUEUE

 * and not CONFIG_IPC_NS.

 the next part of the message follows immediately */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright (C) 2007

 *

 *  Author: Eric Biederman <ebiederm@xmision.com>

	/*

	 * Reset the semmni value if an error happens.

 SPDX-License-Identifier: GPL-2.0

/*

 * linux/ipc/util.c

 * Copyright (C) 1992 Krishna Balasubramanian

 *

 * Sep 1997 - Call suser() last after "normal" permission checks so we

 *            get BSD style process accounting right.

 *            Occurs in several places in the IPC code.

 *            Chris Evans, <chris@ferret.lmh.ox.ac.uk>

 * Nov 1999 - ipc helper functions, unified SMP locking

 *	      Manfred Spraul <manfred@colorfullife.com>

 * Oct 2002 - One lock per IPC id. RCU ipc_free for lock-free grow_ary().

 *            Mingming Cao <cmm@us.ibm.com>

 * Mar 2006 - support for audit of ipc object properties

 *            Dustin Kirkland <dustin.kirkland@us.ibm.com>

 * Jun 2006 - namespaces ssupport

 *            OpenVZ, SWsoft Inc.

 *            Pavel Emelianov <xemul@openvz.org>

 *

 * General sysv ipc locking scheme:

 *	rcu_read_lock()

 *          obtain the ipc object (kern_ipc_perm) by looking up the id in an idr

 *	    tree.

 *	    - perform initial checks (capabilities, auditing and permission,

 *	      etc).

 *	    - perform read-only operations, such as INFO command, that

 *	      do not demand atomicity

 *	      acquire the ipc lock (kern_ipc_perm.lock) through

 *	      ipc_lock_object()

 *		- perform read-only operations that demand atomicity,

 *		  such as STAT command.

 *		- perform data updates, such as SET, RMID commands and

 *		  mechanism-specific operations (semop/semtimedop,

 *		  msgsnd/msgrcv, shmat/shmdt).

 *	    drop the ipc lock, through ipc_unlock_object().

 *	rcu_read_unlock()

 *

 *  The ids->rwsem must be taken when:

 *	- creating, removing and iterating the existing entries in ipc

 *	  identifier sets.

 *	- iterating through files under /proc/sysvipc/

 *

 *  Note that sems have a special fast path that avoids kern_ipc_perm.lock -

 *  see sem_lock().

/**

 * ipc_init - initialise ipc subsystem

 *

 * The various sysv ipc resources (semaphores, messages and shared

 * memory) are initialised.

 *

 * A callback routine is registered into the memory hotplug notifier

 * chain: since msgmni scales to lowmem this callback routine will be

 * called upon successful memory add / remove to recompute msmgni.

/**

 * ipc_init_ids	- initialise ipc identifiers

 * @ids: ipc identifier set

 *

 * Set up the sequence range to use for the ipc identifier range (limited

 * below ipc_mni) then initialise the keys hashtable and ids idr.

/**

 * ipc_init_proc_interface -  create a proc interface for sysipc types using a seq_file interface.

 * @path: Path in procfs

 * @header: Banner to be printed at the beginning of the file.

 * @ids: ipc id table to iterate.

 * @show: show routine.

 world readable */

 parent dir */

/**

 * ipc_findkey	- find a key in an ipc identifier set

 * @ids: ipc identifier set

 * @key: key to find

 *

 * Returns the locked pointer to the ipc structure if found or NULL

 * otherwise. If key is found ipc points to the owning ipc structure

 *

 * Called with writer ipc_ids.rwsem held.

/*

 * Insert new IPC object into idr tree, and set sequence number and id

 * in the correct order.

 * Especially:

 * - the sequence number must be set before inserting the object into the idr,

 *   because the sequence number is accessed without a lock.

 * - the id can/must be set after inserting the object into the idr.

 *   All accesses must be done after getting kern_ipc_perm.lock.

 *

 * The caller must own kern_ipc_perm.lock.of the new object.

 * On error, the function returns a (negative) error code.

 *

 * To conserve sequence number space, especially with extended ipc_mni,

 * the sequence number is incremented only when the returned ID is less than

 * the last one.

	/*

	 * As soon as a new object is inserted into the idr,

	 * ipc_obtain_object_idr() or ipc_obtain_object_check() can find it,

	 * and the lockless preparations for ipc operations can start.

	 * This means especially: permission checks, audit calls, allocation

	 * of undo structures, ...

	 *

	 * Thus the object must be fully initialized, and if something fails,

	 * then the full tear-down sequence must be followed.

	 * (i.e.: set new->deleted, reduce refcount, call_rcu())

 !CHECKPOINT_RESTORE or next_id is unset */

 allocate the idx, with a NULL struct kern_ipc_perm */

			/*

			 * idx got allocated successfully.

			 * Now calculate the sequence number and set the

			 * pointer for real.

			/* no need for smp_wmb(), this is done

			 * inside idr_replace, as part of

			 * rcu_assign_pointer

/**

 * ipc_addid - add an ipc identifier

 * @ids: ipc identifier set

 * @new: new ipc permission set

 * @limit: limit for the number of used ids

 *

 * Add an entry 'new' to the ipc ids idr. The permissions object is

 * initialised and the first free entry is set up and the index assigned

 * is returned. The 'new' entry is returned in a locked state on success.

 *

 * On failure the entry is not locked and a negative err-code is returned.

 * The caller must use ipc_rcu_putref() to free the identifier.

 *

 * Called with writer ipc_ids.rwsem held.

 1) Initialize the refcount so that ipc_rcu_putref works */

/**

 * ipcget_new -	create a new ipc object

 * @ns: ipc namespace

 * @ids: ipc identifier set

 * @ops: the actual creation routine to call

 * @params: its parameters

 *

 * This routine is called by sys_msgget, sys_semget() and sys_shmget()

 * when the key is IPC_PRIVATE.

/**

 * ipc_check_perms - check security and permissions for an ipc object

 * @ns: ipc namespace

 * @ipcp: ipc permission set

 * @ops: the actual security routine to call

 * @params: its parameters

 *

 * This routine is called by sys_msgget(), sys_semget() and sys_shmget()

 * when the key is not IPC_PRIVATE and that key already exists in the

 * ds IDR.

 *

 * On success, the ipc id is returned.

 *

 * It is called with ipc_ids.rwsem and ipcp->lock held.

/**

 * ipcget_public - get an ipc object or create a new one

 * @ns: ipc namespace

 * @ids: ipc identifier set

 * @ops: the actual creation routine to call

 * @params: its parameters

 *

 * This routine is called by sys_msgget, sys_semget() and sys_shmget()

 * when the key is not IPC_PRIVATE.

 * It adds a new entry if the key is not found and does some permission

 * / security checkings if the key is found.

 *

 * On success, the ipc id is returned.

	/*

	 * Take the lock as a writer since we are potentially going to add

	 * a new entry + read locks are not "upgradable"

 key not used */

 ipc object has been locked by ipc_findkey() */

				/*

				 * ipc_check_perms returns the IPC id on

				 * success

/**

 * ipc_kht_remove - remove an ipc from the key hashtable

 * @ids: ipc identifier set

 * @ipcp: ipc perm structure containing the key to remove

 *

 * ipc_ids.rwsem (as a writer) and the spinlock for this ID are held

 * before this function is called, and remain locked on the exit.

/**

 * ipc_search_maxidx - search for the highest assigned index

 * @ids: ipc identifier set

 * @limit: known upper limit for highest assigned index

 *

 * The function determines the highest assigned index in @ids. It is intended

 * to be called when ids->max_idx needs to be updated.

 * Updating ids->max_idx is necessary when the current highest index ipc

 * object is deleted.

 * If no ipc object is allocated, then -1 is returned.

 *

 * ipc_ids.rwsem needs to be held by the caller.

		/*

		 * "0" is a possible index value, thus search using

		 * e.g. 15,7,3,1,0 instead of 16,8,4,2,1.

/**

 * ipc_rmid - remove an ipc identifier

 * @ids: ipc identifier set

 * @ipcp: ipc perm structure containing the identifier to remove

 *

 * ipc_ids.rwsem (as a writer) and the spinlock for this ID are held

 * before this function is called, and remain locked on the exit.

/**

 * ipc_set_key_private - switch the key of an existing ipc to IPC_PRIVATE

 * @ids: ipc identifier set

 * @ipcp: ipc perm structure containing the key to modify

 *

 * ipc_ids.rwsem (as a writer) and the spinlock for this ID are held

 * before this function is called, and remain locked on the exit.

/**

 * ipcperms - check ipc permissions

 * @ns: ipc namespace

 * @ipcp: ipc permission set

 * @flag: desired permission set

 *

 * Check user, group, other permissions for access

 * to ipc resources. return 0 if allowed

 *

 * @flag will most probably be 0 or ``S_...UGO`` from <linux/stat.h>

 is there some bit set in requested_mode but not in granted_mode? */

/*

 * Functions to convert between the kern_ipc_perm structure and the

 * old/new ipc_perm structures

/**

 * kernel_to_ipc64_perm	- convert kernel ipc permissions to user

 * @in: kernel permissions

 * @out: new style ipc permissions

 *

 * Turn the kernel object @in into a set of permissions descriptions

 * for returning to userspace (@out).

/**

 * ipc64_perm_to_ipc_perm - convert new ipc permissions to old

 * @in: new style ipc permissions

 * @out: old style ipc permissions

 *

 * Turn the new style permissions object @in into a compatibility

 * object and store it into the @out pointer.

/**

 * ipc_obtain_object_idr

 * @ids: ipc identifier set

 * @id: ipc id to look for

 *

 * Look for an id in the ipc ids idr and return associated ipc object.

 *

 * Call inside the RCU critical section.

 * The ipc object is *not* locked on exit.

/**

 * ipc_obtain_object_check

 * @ids: ipc identifier set

 * @id: ipc id to look for

 *

 * Similar to ipc_obtain_object_idr() but also checks the ipc object

 * sequence number.

 *

 * Call inside the RCU critical section.

 * The ipc object is *not* locked on exit.

/**

 * ipcget - Common sys_*get() code

 * @ns: namespace

 * @ids: ipc identifier set

 * @ops: operations to be called on ipc object creation, permission checks

 *       and further checks

 * @params: the parameters needed by the previous operations.

 *

 * Common routine called by sys_msgget(), sys_semget() and sys_shmget().

/**

 * ipc_update_perm - update the permissions of an ipc object

 * @in:  the permission given as input.

 * @out: the permission of the ipc to set.

/**

 * ipcctl_obtain_check - retrieve an ipc object and check permissions

 * @ns:  ipc namespace

 * @ids:  the table of ids where to look for the ipc

 * @id:   the id of the ipc to retrieve

 * @cmd:  the cmd to check

 * @perm: the permission to set

 * @extra_perm: one extra permission parameter used by msq

 *

 * This function does some common audit and permissions check for some IPC_XXX

 * cmd and is called from semctl_down, shmctl_down and msgctl_down.

 *

 * It:

 *   - retrieves the ipc object with the given id in the given table.

 *   - performs some audit and permission check, depending on the given cmd

 *   - returns a pointer to the ipc object or otherwise, the corresponding

 *     error.

 *

 * Call holding the both the rwsem and the rcu read lock.

 successful lookup */

/**

 * ipc_parse_version - ipc call version

 * @cmd: pointer to command

 *

 * Return IPC_64 for new style IPC and IPC_OLD for old style IPC.

 * The @cmd value is turned from an encoding command and version into

 * just the command code.

 CONFIG_ARCH_WANT_IPC_PARSE_VERSION */

/*

 * This routine locks the ipc structure found at least at position pos.

 If we had an ipc id locked before, unlock it */

/*

 * File positions: pos 0 -> header, pos n -> ipc id = n - 1.

 * SeqFile iterator: iterator value locked ipc pointer or SEQ_TOKEN_START.

	/*

	 * Take the lock - this will be released by the corresponding

	 * call to stop().

 pos < 0 is invalid */

 pos == 0 means header */

 Find the (pos-1)th ipc */

 If we had a locked structure, release it */

 Release the lock we took in start() */

 CONFIG_PROC_FS */

 SPDX-License-Identifier: GPL-2.0

/*

 * linux/ipc/sem.c

 * Copyright (C) 1992 Krishna Balasubramanian

 * Copyright (C) 1995 Eric Schenk, Bruno Haible

 *

 * /proc/sysvipc/sem support (c) 1999 Dragos Acostachioaie <dragos@iname.com>

 *

 * SMP-threaded, sysctl's added

 * (c) 1999 Manfred Spraul <manfred@colorfullife.com>

 * Enforced range limit on SEM_UNDO

 * (c) 2001 Red Hat Inc

 * Lockless wakeup

 * (c) 2003 Manfred Spraul <manfred@colorfullife.com>

 * (c) 2016 Davidlohr Bueso <dave@stgolabs.net>

 * Further wakeup optimizations, documentation

 * (c) 2010 Manfred Spraul <manfred@colorfullife.com>

 *

 * support for audit of ipc object properties and permission changes

 * Dustin Kirkland <dustin.kirkland@us.ibm.com>

 *

 * namespaces support

 * OpenVZ, SWsoft Inc.

 * Pavel Emelianov <xemul@openvz.org>

 *

 * Implementation notes: (May 2010)

 * This file implements System V semaphores.

 *

 * User space visible behavior:

 * - FIFO ordering for semop() operations (just FIFO, not starvation

 *   protection)

 * - multiple semaphore operations that alter the same semaphore in

 *   one semop() are handled.

 * - sem_ctime (time of last semctl()) is updated in the IPC_SET, SETVAL and

 *   SETALL calls.

 * - two Linux specific semctl() commands: SEM_STAT, SEM_INFO.

 * - undo adjustments at process exit are limited to 0..SEMVMX.

 * - namespace are supported.

 * - SEMMSL, SEMMNS, SEMOPM and SEMMNI can be configured at runtime by writing

 *   to /proc/sys/kernel/sem.

 * - statistics about the usage are reported in /proc/sysvipc/sem.

 *

 * Internals:

 * - scalability:

 *   - all global variables are read-mostly.

 *   - semop() calls and semctl(RMID) are synchronized by RCU.

 *   - most operations do write operations (actually: spin_lock calls) to

 *     the per-semaphore array structure.

 *   Thus: Perfect SMP scaling between independent semaphore arrays.

 *         If multiple semaphores in one array are used, then cache line

 *         trashing on the semaphore array spinlock will limit the scaling.

 * - semncnt and semzcnt are calculated on demand in count_semcnt()

 * - the task that performs a successful semop() scans the list of all

 *   sleeping tasks and completes any pending operations that can be fulfilled.

 *   Semaphores are actively given to waiting tasks (necessary for FIFO).

 *   (see update_queue())

 * - To improve the scalability, the actual wake-up calls are performed after

 *   dropping all locks. (see wake_up_sem_queue_prepare())

 * - All work is done by the waker, the woken up task does not have to do

 *   anything - not even acquiring a lock or dropping a refcount.

 * - A woken up task may not even touch the semaphore array anymore, it may

 *   have been destroyed already by a semctl(RMID).

 * - UNDO values are stored in an array (one per process and per

 *   semaphore array, lazily allocated). For backwards compatibility, multiple

 *   modes for the UNDO variables are supported (per process, per thread)

 *   (see copy_semundo, CLONE_SYSVSEM)

 * - There are two lists of the pending operations: a per-array list

 *   and per-semaphore list (stored in the array). This allows to achieve FIFO

 *   ordering without always scanning all pending operations.

 *   The worst-case behavior is nevertheless O(N^2) for N wakeups.

 One semaphore structure for each semaphore in the system. */

 current value */

	/*

	 * PID of the process that last modified the semaphore. For

	 * Linux, specifically these are:

	 *  - semop

	 *  - semctl, via SETVAL and SETALL.

	 *  - at task exit when performing undo adjustments (see exit_sem).

 spinlock for fine-grained semtimedop */

 pending single-sop operations */

 that alter the semaphore */

 pending single-sop operations */

 that do not alter the semaphore*/

 candidate for sem_otime */

 One sem_array data structure for each set of semaphores in the system. */

 permissions .. see ipc.h */

 create/last semctl() time */

 pending operations */

 that alter the array */

 pending complex operations */

 that do not alter semvals */

 undo requests on this array */

 no. of semaphores in array */

 pending complex operations */

 >0: global lock required */

 One queue for each sleeping process in the system. */

 queue of pending operations */

 this process */

 undo structure */

 process id of requesting process */

 completion status of operation */

 array of pending operations */

 the operation that blocked */

 number of operations */

 does *sops alter the array? */

 sops on more than one sem_num */

/* Each task has a list of undo requests. They are executed automatically

 * when the process exits.

	struct list_head	list_proc;	/* per-process list: *

						 * all undos from one process

 rcu struct for sem_undo */

 back ptr to sem_undo_list */

	struct list_head	list_id;	/* per semaphore array list:

 semaphore set identifier */

 array of adjustments */

 one per semaphore */

/* sem_undo_list controls shared access to the list of sem_undo structures

 * that may be shared among all a CLONE_SYSVSEM task group.

 512 bytes on stack */

 ~ 372 bytes on stack */

/*

 * Switching from the mode suitable for simple ops

 * to the mode for complex ops is costly. Therefore:

 * use some hysteresis

/*

 * Locking:

 * a) global sem_lock() for read/write

 *	sem_undo.id_next,

 *	sem_array.complex_count,

 *	sem_array.pending{_alter,_const},

 *	sem_array.sem_undo

 *

 * b) global or semaphore sem_lock() for read/write:

 *	sem_array.sems[i].pending_{const,alter}:

 *

 * c) special:

 *	sem_undo_list.list_proc:

 *	* undo_list->lock for write

 *	* rcu for read

 *	use_global_lock:

 *	* global sem_lock() for write

 *	* either local or global sem_lock() for read.

 *

 * Memory ordering:

 * Most ordering is enforced by using spin_lock() and spin_unlock().

 *

 * Exceptions:

 * 1) use_global_lock: (SEM_BARRIER_1)

 * Setting it from non-zero to 0 is a RELEASE, this is ensured by

 * using smp_store_release(): Immediately after setting it to 0,

 * a simple op can start.

 * Testing if it is non-zero is an ACQUIRE, this is ensured by using

 * smp_load_acquire().

 * Setting it from 0 to non-zero must be ordered with regards to

 * this smp_load_acquire(), this is guaranteed because the smp_load_acquire()

 * is inside a spin_lock() and after a write from 0 to non-zero a

 * spin_lock()+spin_unlock() is done.

 * To prevent the compiler/cpu temporarily writing 0 to use_global_lock,

 * READ_ONCE()/WRITE_ONCE() is used.

 *

 * 2) queue.status: (SEM_BARRIER_2)

 * Initialization is done while holding sem_lock(), so no further barrier is

 * required.

 * Setting it to a result code is a RELEASE, this is ensured by both a

 * smp_store_release() (for case a) and while holding sem_lock()

 * (for case b).

 * The ACQUIRE when reading the result code without holding sem_lock() is

 * achieved by using READ_ONCE() + smp_acquire__after_ctrl_dep().

 * (case a above).

 * Reading the result code while holding sem_lock() needs no further barriers,

 * the locks inside sem_lock() enforce ordering (case b above)

 *

 * 3) current->state:

 * current->state is set to TASK_INTERRUPTIBLE while holding sem_lock().

 * The wakeup is handled using the wake_q infrastructure. wake_q wakeups may

 * happen immediately after calling wake_q_add. As wake_q_add_safe() is called

 * when holding sem_lock(), no further barriers are required.

 *

 * See also ipc/mqueue.c for more details on the covered races.

/**

 * unmerge_queues - unmerge queues, if possible.

 * @sma: semaphore array

 *

 * The function unmerges the wait queues if complex_count is 0.

 * It must be called prior to dropping the global semaphore array lock.

 complex operations still around? */

	/*

	 * We will switch back to simple mode.

	 * Move all pending operation back into the per-semaphore

	 * queues.

/**

 * merge_queues - merge single semop queues into global queue

 * @sma: semaphore array

 *

 * This function merges all per-semaphore queues into the global queue.

 * It is necessary to achieve FIFO ordering for the pending single-sop

 * operations when a multi-semop operation must sleep.

 * Only the alter operations must be moved, the const operations can stay.

/*

 * Enter the mode suitable for non-simple operations:

 * Caller must own sem_perm.lock.

		/*

		 * We are already in global lock mode.

		 * Nothing to do, just reset the

		 * counter until we return to simple mode.

/*

 * Try to leave the mode that disallows simple operations:

 * Caller must own sem_perm.lock.

		/* Complex ops are sleeping.

		 * We must stay in complex mode

 See SEM_BARRIER_1 for purpose/pairing */

/*

 * If the request contains only one semaphore operation, and there are

 * no complex transactions pending, lock only the semaphore involved.

 * Otherwise, lock the entire semaphore array, since we either have

 * multiple semaphores in our own semops, or we need to look at

 * semaphores from other pending complex operations.

 Complex operation - acquire a full lock */

 Prevent parallel simple ops */

	/*

	 * Only one semaphore affected - try to optimize locking.

	 * Optimized locking is possible if no complex operation

	 * is either enqueued or processed right now.

	 *

	 * Both facts are tracked by use_global_mode.

	/*

	 * Initial check for use_global_lock. Just an optimization,

	 * no locking, no memory barrier.

		/*

		 * It appears that no complex operation is around.

		 * Acquire the per-semaphore lock.

 see SEM_BARRIER_1 for purpose/pairing */

 fast path successful! */

 slow path: acquire the full lock */

		/*

		 * The use_global_lock mode ended while we waited for

		 * sma->sem_perm.lock. Thus we must switch to locking

		 * with sem->lock.

		 * Unlike in the fast path, there is no need to recheck

		 * sma->use_global_lock after we have acquired sem->lock:

		 * We own sma->sem_perm.lock, thus use_global_lock cannot

		 * change.

		/*

		 * Not a false alarm, thus continue to use the global lock

		 * mode. No need for complexmode_enter(), this was done by

		 * the caller that has set use_global_mode to non-zero.

/*

 * sem_lock_(check_) routines are called in the paths where the rwsem

 * is not held.

 *

 * The caller holds the RCU read lock.

/**

 * newary - Create a new semaphore set

 * @ns: namespace

 * @params: ptr to the structure that contains key, semflg and nsems

 *

 * Called with sem_ids.rwsem held (as a writer)

 ipc_addid() locks sma upon success. */

/*

 * Called with sem_ids.rwsem and ipcp locked.

/**

 * perform_atomic_semop[_slow] - Attempt to perform semaphore

 *                               operations on a given array.

 * @sma: semaphore array

 * @q: struct sem_queue that describes the operation

 *

 * Caller blocking are as follows, based the value

 * indicated by the semaphore operation (sem_op):

 *

 *  (1) >0 never blocks.

 *  (2)  0 (wait-for-zero operation): semval is non-zero.

 *  (3) <0 attempting to decrement semval to a value smaller than zero.

 *

 * Returns 0 if the operation was possible.

 * Returns 1 if the operation is impossible, the caller must sleep.

 * Returns <0 for error codes.

 Exceeding the undo range is an error. */

	/*

	 * We scan the semaphore set twice, first to ensure that the entire

	 * operation can succeed, therefore avoiding any pointless writes

	 * to shared memory and having to undo such changes in order to block

	 * until the operations can go through.

 wait-for-zero */

 Exceeding the undo range is an error. */

 see SEM_BARRIER_2 for purpose/pairing */

/** check_restart(sma, q)

 * @sma: semaphore array

 * @q: the operation that just completed

 *

 * update_queue is O(N^2) when it restarts scanning the whole queue of

 * waiting operations. Therefore this function checks if the restart is

 * really necessary. It is called after a previously waiting operation

 * modified the array.

 * Note that wait-for-zero operations are handled without restart.

 pending complex alter operations are too difficult to analyse */

 we were a sleeping complex operation. Too difficult */

	/* It is impossible that someone waits for the new value:

	 * - complex operations always restart.

	 * - wait-for-zero are handled separately.

	 * - q is a previously sleeping simple operation that

	 *   altered the array. It must be a decrement, because

	 *   simple increments never sleep.

	 * - If there are older (higher priority) decrements

	 *   in the queue, then they have observed the original

	 *   semval value and couldn't proceed. The operation

	 *   decremented to value - thus they won't proceed either.

/**

 * wake_const_ops - wake up non-alter tasks

 * @sma: semaphore array.

 * @semnum: semaphore that was modified.

 * @wake_q: lockless wake-queue head.

 *

 * wake_const_ops must be called after a semaphore in a semaphore array

 * was set to 0. If complex const operations are pending, wake_const_ops must

 * be called with semnum = -1, as well as with the number of each modified

 * semaphore.

 * The tasks that must be woken up are added to @wake_q. The return code

 * is stored in q->pid.

 * The function returns 1 if at least one operation was completed successfully.

 operation completed, remove from queue & wakeup */

/**

 * do_smart_wakeup_zero - wakeup all wait for zero tasks

 * @sma: semaphore array

 * @sops: operations that were performed

 * @nsops: number of operations

 * @wake_q: lockless wake-queue head

 *

 * Checks all required queue for wait-for-zero operations, based

 * on the actual changes that were performed on the semaphore array.

 * The function returns 1 if at least one operation was completed successfully.

 first: the per-semaphore queues, if known */

		/*

		 * No sops means modified semaphores not known.

		 * Assume all were changed.

	/*

	 * If one of the modified semaphores got 0,

	 * then check the global queue, too.

/**

 * update_queue - look for tasks that can be completed.

 * @sma: semaphore array.

 * @semnum: semaphore that was modified.

 * @wake_q: lockless wake-queue head.

 *

 * update_queue must be called after a semaphore in a semaphore array

 * was modified. If multiple semaphores were modified, update_queue must

 * be called with semnum = -1, as well as with the number of each modified

 * semaphore.

 * The tasks that must be woken up are added to @wake_q. The return code

 * is stored in q->pid.

 * The function internally checks if const operations can now succeed.

 *

 * The function return 1 if at least one semop was completed successfully.

		/* If we are scanning the single sop, per-semaphore list of

		 * one semaphore and that semaphore is 0, then it is not

		 * necessary to scan further: simple increments

		 * that affect only one entry succeed immediately and cannot

		 * be in the  per semaphore pending queue, and decrements

		 * cannot be successful if the value is already 0.

 Does q->sleeper still need to sleep? */

/**

 * set_semotime - set sem_otime

 * @sma: semaphore array

 * @sops: operations that modified the array, may be NULL

 *

 * sem_otime is replicated to avoid cache line trashing.

 * This function sets one instance to the current time.

/**

 * do_smart_update - optimized update_queue

 * @sma: semaphore array

 * @sops: operations that were performed

 * @nsops: number of operations

 * @otime: force setting otime

 * @wake_q: lockless wake-queue head

 *

 * do_smart_update() does the required calls to update_queue and wakeup_zero,

 * based on the actual changes that were performed on the semaphore array.

 * Note that the function does not do the actual wake-up: the caller is

 * responsible for calling wake_up_q().

 * It is safe to perform this call after dropping all locks.

 semaphore array uses the global queue - just process it. */

			/*

			 * No sops, thus the modified semaphores are not

			 * known. Check all.

			/*

			 * Check the semaphores that were increased:

			 * - No complex ops, thus all sleeping ops are

			 *   decrease.

			 * - if we decreased the value, then any sleeping

			 *   semaphore ops won't be able to run: If the

			 *   previous value was too small, then the new

			 *   value will be too small, too.

/*

 * check_qop: Test if a queued operation sleeps on the semaphore semnum

	/*

	 * Linux always (since 0.99.10) reported a task as sleeping on all

	 * semaphores. This violates SUS, therefore it was changed to the

	 * standard compliant behavior.

	 * Give the administrators a chance to notice that an application

	 * might misbehave because it relies on the Linux behavior.

/* The following counts are associated to each semaphore:

 *   semncnt        number of tasks waiting on semval being nonzero

 *   semzcnt        number of tasks waiting on semval being zero

 *

 * Per definition, a task waits only on the semaphore of the first semop

 * that cannot proceed, even if additional operation would block, too.

 First: check the simple operations. They are easy to evaluate */

		/* all task on a per-semaphore list sleep on exactly

		 * that semaphore

 Then: check the complex operations. */

/* Free a semaphore set. freeary() is called with sem_ids.rwsem locked

 * as a writer and the spinlock for this semaphore set hold. sem_ids.rwsem

 * remains locked on exit.

 Free the existing undo structures for this semaphore set.  */

 Wake up all pending processes and let them fail with EIDRM. */

 Remove the semaphore set from the IDR */

 IPC_STAT */

 see comment for SHM_STAT_ANY */

		/*

		 * As defined in SUS:

		 * Return 0 on success

		/*

		 * SEM_STAT and SEM_STAT_ANY (both Linux specific)

		 * Return the full id, including the sequence number

 maybe some queued-up processes were waiting for this */

 maybe some queued-up processes were waiting for this */

 GETVAL, GETPID, GETNCTN, GETZCNT: fall-through */

/*

 * This function handles some semctl commands which require the rwsem

 * to be held in write mode.

 * NOTE: no locks must be held, the rwsem is taken inside this function.

 freeary unlocks the ipc object and rcu */

 big-endian 64bit */

 32bit or little-endian 64bit */

/* If the task doesn't already have a undo_list, then allocate one

 * here.  We guarantee there is only one thread using this undo list,

 * and current is THE ONE

 *

 * If this allocation and assignment succeeds, but later

 * portions of this code fail, there is no need to free the sem_undo_list.

 * Just let it stay associated with the task, and it'll be freed later

 * at exit time.

 *

 * This can block, so callers must hold no locks.

/**

 * find_alloc_undo - lookup (and if not present create) undo array

 * @ns: namespace

 * @semid: semaphore array id

 *

 * The function looks up (and if not present creates) the undo structure.

 * The size of the undo structure depends on the size of the semaphore

 * array, thus the alloc path is not that straightforward.

 * Lifetime-rules: sem_undo is rcu-protected, on success, the function

 * performs a rcu_read_lock().

 no undo structure around - allocate one. */

 step 1: figure out the size of the semaphore array */

 step 2: allocate new undo structure */

 step 3: Acquire the lock on semaphore array */

	/*

	 * step 4: check for races: did someone else allocate the undo struct?

 step 5: initialize & link new undo structure */

			/*

			 * There was a previous alter access that appears

			 * to have accessed the same semaphore, thus use

			 * the dupsop logic. "appears", because the detection

			 * can only check % BITS_PER_LONG.

 On success, find_alloc_undo takes the rcu_read_lock */

	/*

	 * We eventually might perform the following check in a lockless

	 * fashion, considering ipc_valid_object() locking constraints.

	 * If nsops == 1 and there is no contention for sem_perm.lock, then

	 * only a per-semaphore lock is held and it's OK to proceed with the

	 * check below. More details on the fine grained locking scheme

	 * entangled here and why it's RMID race safe on comments at sem_lock()

	/*

	 * semid identifiers are not unique - find_alloc_undo may have

	 * allocated an undo structure, it was invalidated by an RMID

	 * and now a new array with received the same id. Check and fail.

	 * This case can be detected checking un->semid. The existence of

	 * "un" itself is guaranteed by rcu.

 non-blocking successful path */

		/*

		 * If the operation was successful, then do

		 * the required updates.

 non-blocking error path */

	/*

	 * We need to sleep on this operation, so we put the current

	 * task into the pending queue and go to sleep.

 memory ordering ensured by the lock in sem_lock() */

 memory ordering is ensured by the lock in sem_lock() */

		/*

		 * fastpath: the semop has completed, either successfully or

		 * not, from the syscall pov, is quite irrelevant to us at this

		 * point; we're done.

		 *

		 * We _do_ care, nonetheless, about being awoken by a signal or

		 * spuriously.  The queue.status is checked again in the

		 * slowpath (aka after taking sem_lock), such that we can detect

		 * scenarios where we were awakened externally, during the

		 * window between wake_q_add() and wake_up_q().

 see SEM_BARRIER_2 for purpose/pairing */

		/*

		 * No necessity for any barrier: We are protect by sem_lock()

		/*

		 * If queue.status != -EINTR we are woken up by another process.

		 * Leave without unlink_queue(), but with sem_unlock().

		/*

		 * If an interrupt occurred we have to clean up the queue.

 spurious */

/* If CLONE_SYSVSEM is set, establish sharing of SEM_UNDO state between

 * parent and child tasks.

/*

 * add semadj values to semaphores, free undo structures.

 * undo structures are not freed when semaphore arrays are destroyed

 * so some of them may be out of date.

 * IMPLEMENTATION NOTE: There is some confusion over whether the

 * set of adjustments that needs to be done should be done in an atomic

 * manner or not. That is, if we are attempting to decrement the semval

 * should we queue up and wait until we can do so legally?

 * The original implementation attempted to do this (queue and wait).

 * The current implementation does not do so. The POSIX standard

 * and SVID should be consulted to determine what behavior is mandated.

			/*

			 * We must wait for freeary() before freeing this ulp,

			 * in case we raced with last sem_undo. There is a small

			 * possibility where we exit while freeary() didn't

			 * finish unlocking sem_undo_list.

 exit_sem raced with IPC_RMID, nothing to do */

 exit_sem raced with IPC_RMID, nothing to do */

 exit_sem raced with IPC_RMID, nothing to do */

			/* exit_sem raced with IPC_RMID+semget() that created

			 * exactly the same semid. Nothing to do.

 remove un from the linked lists */

 perform adjustments registered in un */

				/*

				 * Range checks of the new semaphore value,

				 * not defined by sus:

				 * - Some unices ignore the undo entirely

				 *   (e.g. HP UX 11i 11.22, Tru64 V5.1)

				 * - some cap the value (e.g. FreeBSD caps

				 *   at 0, but doesn't enforce SEMVMX)

				 *

				 * Linux caps the semaphore value, both at 0

				 * and at SEMVMX.

				 *

				 *	Manfred <manfred@colorfullife.com>

 maybe some queued-up processes were waiting for this */

	/*

	 * The proc interface isn't aware of sem_lock(), it calls

	 * ipc_lock_object(), i.e. spin_lock(&sma->sem_perm.lock).

	 * (in sysvipc_find_ipc)

	 * In order to stay compatible with sem_lock(), we must

	 * enter / leave complex_mode.

 SPDX-License-Identifier: GPL-2.0

/*

 * linux/ipc/msg.c

 * Copyright (C) 1992 Krishna Balasubramanian

 *

 * Removed all the remaining kerneld mess

 * Catch the -EFAULT stuff properly

 * Use GFP_KERNEL for messages as in 1.2

 * Fixed up the unchecked user space derefs

 * Copyright (C) 1998 Alan Cox & Andi Kleen

 *

 * /proc/sysvipc/msg support (c) 1999 Dragos Acostachioaie <dragos@iname.com>

 *

 * mostly rewritten, threaded and wake-one semantics added

 * MSGMAX limit removed, sysctl's added

 * (c) 1999 Manfred Spraul <manfred@colorfullife.com>

 *

 * support for audit of ipc object properties and permission changes

 * Dustin Kirkland <dustin.kirkland@us.ibm.com>

 *

 * namespaces support

 * OpenVZ, SWsoft Inc.

 * Pavel Emelianov <xemul@openvz.org>

 one msq_queue structure for each present queue on the system */

 last msgsnd time */

 last msgrcv time */

 last change time */

 current number of bytes on queue */

 number of messages in queue */

 max number of bytes on queue */

 pid of last msgsnd */

 last receive pid */

/*

 * MSG_BARRIER Locking:

 *

 * Similar to the optimization used in ipc/mqueue.c, one syscall return path

 * does not acquire any locks when it sees that a message exists in

 * msg_receiver.r_msg. Therefore r_msg is set using smp_store_release()

 * and accessed using READ_ONCE()+smp_acquire__after_ctrl_dep(). In addition,

 * wake_q_add_safe() is used. See ipc/mqueue.c for more details

 one msg_receiver structure for each sleeping receiver */

 one msg_sender for each sleeping sender */

/**

 * newque - Create a new msg queue

 * @ns: namespace

 * @params: ptr to the structure that contains the key and msgflg

 *

 * Called with msg_ids.rwsem held (writer)

 ipc_addid() locks msq upon success. */

	/*

	 * No memory barrier required: we did ipc_lock_object(),

	 * and the waker obtains that lock before calling wake_q_add().

		/*

		 * Stop at the first task we don't wakeup,

		 * we've already iterated the original

		 * sender queue.

		/*

		 * We are not in an EIDRM scenario here, therefore

		 * verify that we really need to wakeup the task.

		 * To maintain current semantics and wakeup order,

		 * move the sender to the tail on behalf of the

		 * blocked task.

 see MSG_BARRIER for purpose/pairing */

/*

 * freeque() wakes up waiters on the sender and receiver waiting queue,

 * removes the message queue from message queue ID IDR, and cleans up all the

 * messages associated with this queue.

 *

 * msg_ids.rwsem (writer) and the spinlock for this message queue are held

 * before freeque() is called. msg_ids.rwsem remains locked on exit.

/*

 * This function handles some msgctl commands which require the rwsem

 * to be held in write mode.

 * NOTE: no locks must be held, the rwsem is taken inside this function.

 freeque unlocks the ipc object and rcu */

		/*

		 * Sleeping receivers might be excluded by

		 * stricter permissions.

		/*

		 * Sleeping senders might be able to send

		 * due to a larger queue size.

	/*

	 * We must not return kernel stack data.

	 * due to padding, it's not enough

	 * to set all member fields.

 IPC_STAT */

 see comment for SHM_STAT_ANY */

		/*

		 * As defined in SUS:

		 * Return 0 on success

		/*

		 * MSG_STAT and MSG_STAT_ANY (both Linux specific)

		 * Return the full id, including the sequence number

 msqid is an index rather than a msg queue id */

 See expunge_all regarding memory barrier */

 See expunge_all regarding memory barrier */

 raced with RMID? */

 queue full, wait: */

 enqueue the sender and prepare to block */

 raced with RMID? */

 no one is waiting for this message, enqueue it */

	/*

	 *  find message of correct type.

	 *  msgtyp = 0 => get first.

	 *  msgtyp > 0 => get first message of matching type.

	 *  msgtyp < 0 => get message with least type must be < abs(msgtype).

 -LONG_MIN is undefined */

/*

 * This function creates new kernel message structure, large enough to store

 * bufsz message bytes.

	/*

	 * Create dummy message to copy real message to.

 raced with RMID? */

			/*

			 * Found a suitable message.

			 * Unlink it from the queue.

			/*

			 * If we are copying, then do not unlink message and do

			 * not update queue parameters.

 No message waiting. Wait for a message */

 memory barrier not require due to ipc_lock_object() */

 memory barrier not required, we own ipc_lock_object() */

		/*

		 * Lockless receive, part 1:

		 * We don't hold a reference to the queue and getting a

		 * reference would defeat the idea of a lockless operation,

		 * thus the code relies on rcu to guarantee the existence of

		 * msq:

		 * Prior to destruction, expunge_all(-EIRDM) changes r_msg.

		 * Thus if r_msg is -EAGAIN, then the queue not yet destroyed.

		/*

		 * Lockless receive, part 2:

		 * The work in pipelined_send() and expunge_all():

		 * - Set pointer to message

		 * - Queue the receiver task for later wakeup

		 * - Wake up the process after the lock is dropped.

		 *

		 * Should the process wake up before this wakeup (due to a

		 * signal) it will either see the message and continue ...

 see MSG_BARRIER for purpose/pairing */

		 /*

		  * ... or see -EAGAIN, acquire the lock to check the message

		  * again.

 SPDX-License-Identifier: GPL-2.0

/*

 * linux/ipc/shm.c

 * Copyright (C) 1992, 1993 Krishna Balasubramanian

 *	 Many improvements/fixes by Bruno Haible.

 * Replaced `struct shm_desc' by `struct vm_area_struct', July 1994.

 * Fixed the shm swap deallocation (shm_unuse()), August 1998 Andrea Arcangeli.

 *

 * /proc/sysvipc/shm support (c) 1999 Dragos Acostachioaie <dragos@iname.com>

 * BIGMEM support, Andrea Arcangeli <andrea@suse.de>

 * SMP thread shm, Jean-Luc Boyard <jean-luc.boyard@siemens.fr>

 * HIGHMEM support, Ingo Molnar <mingo@redhat.com>

 * Make shmmax, shmall, shmmni sysctl'able, Christoph Rohland <cr@sap.com>

 * Shared /dev/zero support, Kanoj Sarcar <kanoj@sgi.com>

 * Move the mm functionality over to mm/shmem.c, Christoph Rohland <cr@sap.com>

 *

 * support for audit of ipc object properties and permission changes

 * Dustin Kirkland <dustin.kirkland@us.ibm.com>

 *

 * namespaces support

 * OpenVZ, SWsoft Inc.

 * Pavel Emelianov <xemul@openvz.org>

 *

 * Better ipc lock (kern_ipc_perm.lock) handling

 * Davidlohr Bueso <davidlohr.bueso@hp.com>, June 2013.

 private to the kernel */

	/*

	 * The task created the shm object, for

	 * task_lock(shp->shm_creator)

	/*

	 * List by creator. task_lock(->shm_creator) required for read/write.

	 * If list_empty(), then the creator is dead already.

 shm_mode upper byte flags */

 segment will be destroyed on last detach */

 segment will not be swapped */

/*

 * Called with shm_ids.rwsem (writer) and the shp structure locked.

 * Only shm_ids.rwsem remains locked on exit.

 Do not find it any more */

/*

 * shm_lock_(check_) routines are called in the paths where the rwsem

 * is not necessarily held.

	/*

	 * ipc_rmid() may have already freed the ID while ipc_lock_object()

	 * was spinning: here verify that the structure is still valid.

	 * Upon races with RMID, return -EIDRM, thus indicating that

	 * the ID points to a removed identifier.

 return a locked ipc object upon success */

	/*

	 * Callers of shm_lock() must validate the status of the returned ipc

	 * object pointer and error out as appropriate.

/*

 * It has to be called with shp locked.

 * It must be called before ipc_rmid()

 ensure that shm_creator does not disappear */

	/*

	 * A concurrent exit_shm may do a list_del_init() as well.

	 * Just do nothing if exit_shm already did the work

		/*

		 * shp->shm_creator is guaranteed to be valid *only*

		 * if shp->shm_clist is not empty.

		/*

		 * list_del_init() is a nop if the entry was already removed

		 * from the list.

 ID was reused */

 This is called by fork, once for every shm attach. */

	/*

	 * We raced in the idr lookup or with shm_destroy().

	 * Either way, the ID is busted.

/*

 * shm_destroy - free the struct shmid_kernel

 *

 * @ns: namespace

 * @shp: struct to free

 *

 * It has to be called with shp and shm_ids.rwsem (writer) locked,

 * but returns with shp unlocked and freed.

/*

 * shm_may_destroy - identifies whether shm segment should be destroyed now

 *

 * Returns true if and only if there are no active users of the segment and

 * one of the following is true:

 *

 * 1) shmctl(id, IPC_RMID, NULL) was called for this shp

 *

 * 2) sysctl kernel.shm_rmid_forced is set to 1.

/*

 * remove the attach descriptor vma.

 * free memory for segment if it is marked destroyed.

 * The descriptor has already been removed from the current->mm->mmap list

 * and will later be kfree()d.

 remove from the list of attaches of the shm segment */

	/*

	 * We raced in the idr lookup or with shm_destroy().

	 * Either way, the ID is busted.

 no-op */

 Called with ns->shm_ids(ns).rwsem locked */

	/*

	 * We want to destroy segments without users and with already

	 * exit'ed originating process.

	 *

	 * As shp->* are changed under rwsem, it's safe to skip shp locking.

 Locking assumes this will only be called with task == current */

		/*

		 * 1) Get pointer to the ipc namespace. It is worth to say

		 * that this pointer is guaranteed to be valid because

		 * shp lifetime is always shorter than namespace lifetime

		 * in which shp lives.

		 * We taken task_lock it means that shp won't be freed.

		/*

		 * 2) If kernel.shm_rmid_forced is not set then only keep track of

		 * which shmids are orphaned, so that a later set of the sysctl

		 * can clean them up.

		/*

		 * 3) get a reference to the namespace.

		 *    The refcount could be already 0. If it is 0, then

		 *    the shm objects will be free by free_ipc_work().

		/*

		 * 4) get a reference to shp.

		 *   This cannot fail: shm_clist_rm() is called before

		 *   ipc_rmid(), thus the refcount cannot be 0.

		/*

		 * 5) unlink the shm segment from the list of segments

		 *    created by current.

		 *    This must be done last. After unlinking,

		 *    only the refcounts obtained above prevent IPC_RMID

		 *    from destroying the segment or the namespace.

		/*

		 * 6) we have all references

		 *    Thus lock & if needed destroy shp.

		/*

		 * rcu_read_lock was implicitly taken in shm_lock_by_ptr, it's

		 * safe to call ipc_rcu_putref here

			/*

			 * Someone else deleted the shp from namespace

			 * idr/kht while we have waited.

			 * Just unlock and continue.

 paired with get_ipc_ns_not_zero */

	/*

	 * In case of remap_file_pages() emulation, the file can represent an

	 * IPC ID that was removed, and possibly even reused by another shm

	 * segment already.  Propagate this case as an error to caller.

/*

 * shm_file_operations_huge is now identical to shm_file_operations,

 * but we keep it distinct for the sake of is_file_shm_hugepages().

 callback for a new vm-area open */

 callback for when the vm-area is released */

/**

 * newseg - Create a new shared memory segment

 * @ns: namespace

 * @params: ptr to the structure that contains key, size and shmflg

 *

 * Called with shm_ids.rwsem held as a writer.

 hugetlb_file_setup applies strict accounting */

		/*

		 * Do not allow no accounting for OVERCOMMIT_NEVER, even

		 * if it's asked for.

 ipc_addid() locks shp upon success. */

	/*

	 * shmid gets reported as "inode#" in /proc/pid/maps.

	 * proc-ps tools use this. Changing this will break them.

/*

 * Called with shm_ids.rwsem and ipcp locked.

/*

 * Calculate and add used RSS and swap pages of a shm.

 * Called with shm_ids.rwsem held as a reader

/*

 * Called with shm_ids.rwsem held as a reader

/*

 * This function handles some shmctl commands which require the rwsem

 * to be held in write mode.

 * NOTE: no locks must be held, the rwsem is taken inside this function.

 do_shm_rmid unlocks the ipc object and rcu */

 IPC_STAT */

	/*

	 * Semantically SHM_STAT_ANY ought to be identical to

	 * that functionality provided by the /proc/sysvipc/

	 * interface. As such, only audit these calls and

	 * do not do traditional S_IRUGO permission checks on

	 * the ipc object.

		/*

		 * As defined in SUS:

		 * Return 0 on success

		/*

		 * SHM_STAT and SHM_STAT_ANY (both Linux specific)

		 * Return the full id, including the sequence number

 check if shm_destroy() is tearing down shp */

 SHM_UNLOCK */

/*

 * Fix shmaddr, allocate descriptor, map shm, add attach descriptor to lists.

 *

 * NOTE! Despite the name, this is NOT a direct system call entrypoint. The

 * "raddr" thing points to kernel space, and there has to be a wrapper around

 * this.

 round down */

				/*

				 * Ensure that the round-down is non-nil

				 * when remapping. This can happen for

				 * cases when addr < shmlba.

	/*

	 * We cannot rely on the fs check since SYSV IPC does have an

	 * additional creator id...

 check if shm_destroy() is tearing down shp */

	/*

	 * We need to take a reference to the real shm file to prevent the

	 * pointer from becoming stale in cases where the lifetime of the outer

	 * file extends beyond that of the shm segment.  It's not usually

	 * possible, but it can happen during remap_file_pages() emulation as

	 * that unmaps the memory, then does ->mmap() via file reference only.

	 * We'll deny the ->mmap() if the shm segment was since removed, but to

	 * detect shm ID reuse we need to compare the file pointers.

/*

 * detach and kill segment if marked destroyed.

 * The work is done in shm_close.

	/*

	 * This function tries to be smart and unmap shm segments that

	 * were modified by partial mlock or munmap calls:

	 * - It first determines the size of the shm segment that should be

	 *   unmapped: It searches for a vma that is backed by shm and that

	 *   started at address shmaddr. It records it's size and then unmaps

	 *   it.

	 * - Then it unmaps all shm vmas that started at shmaddr and that

	 *   are within the initially determined size and that are from the

	 *   same shm segment from which we determined the size.

	 * Errors from do_munmap are ignored: the function only fails if

	 * it's called with invalid parameters or if it's called to unmap

	 * a part of a vma. Both calls in this function are for full vmas,

	 * the parameters are directly copied from the vma itself and always

	 * valid - therefore do_munmap cannot fail. (famous last words?)

	/*

	 * If it had been mremap()'d, the starting address would not

	 * match the usual checks anyway. So assume all vma's are

	 * above the starting address given.

		/*

		 * Check if the starting address would match, i.e. it's

		 * a fragment created by mprotect() and/or munmap(), or it

		 * otherwise it starts at this address with no hassles.

			/*

			 * Record the file of the shm segment being

			 * unmapped.  With mremap(), someone could place

			 * page from another segment but with equal offsets

			 * in the range we are unmapping.

			/*

			 * We discovered the size of the shm segment, so

			 * break out of here and fall through to the next

			 * loop that uses the size information to stop

			 * searching for matching vma's.

	/*

	 * We need look no further than the maximum address a fragment

	 * could possibly have landed at. Also cast things to loff_t to

	 * prevent overflows and make comparisons vs. equal-width types.

 finding a matching vma now does not alter retval */

 CONFIG_MMU */

	/* under NOMMU conditions, the exact address to be destroyed must be

	 * given

/* Extract X.509 certificate in DER form from PKCS#11 or PEM.

 *

 * Copyright © 2014-2015 Red Hat, Inc. All Rights Reserved.

 * Copyright © 2015      Intel Corporation.

 *

 * Authors: David Howells <dhowells@redhat.com>

 *          David Woodhouse <dwmw2@infradead.org>

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU Lesser General Public License

 * as published by the Free Software Foundation; either version 2.1

 * of the licence, or (at your option) any later version.

 Invoked with no input; create empty file */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * recordmcount.c: construct a table of the locations of calls to 'mcount'

 * so that ftrace can find them quickly.

 * Copyright 2009 John F. Reiser <jreiser@BitWagon.com>.  All rights reserved.

 *

 * Restructured to fit Linux format, as well as other updates:

 *  Copyright 2010 Steven Rostedt <srostedt@redhat.com>, Red Hat Inc.

/*

 * Strategy: alter the .o file in-place.

 *

 * Append a new STRTAB that has the new section names, followed by a new array

 * ElfXX_Shdr[] that has the new section headers, followed by the section

 * contents for __mcount_loc and its relocations.  The old shstrtab strings,

 * and the old ElfXX_Shdr[] array, remain as "garbage" (commonly, a couple

 * kilobytes.)  Subsequent processing by /bin/ld (or the kernel module loader)

 * will ignore the garbage regions, because they are not designated by the

 * new .e_shoff nor the new ElfXX_Shdr[].  [In order to remove the garbage,

 * then use "ld -r" to create a new file that omits the garbage.]

 File descriptor for file being modified. */

 Boolean flag. */

 prefix for global symbol name (sometimes '_') */

 Remember .st_size, etc. */

 alternate mcount symbol name */

 warn when section has mcount not being recorded */

 pointer of the mapped file */

 pointer to the end of the mapped file */

 flag to state file was changed */

 current file pointer location */

 added to the end of the file */

 how much is added to end of file */

 Per-file resource cleanup when multiple files. */

 ulseek, uwrite, ...:  Check return value for errors. */

/*

 * Get the whole file as a programming convenience in order to avoid

 * malloc+lseek+read+free of many pieces.  If successful, then mmap

 * avoids copying unused pieces; else just read the whole file.

 * Open for both read and write; new info will be appended to the file.

 * Use MAP_PRIVATE so that a few changes to the in-memory ElfXX_Ehdr

 * do not propagate to the file until an explicit overwrite at the last.

 * This preserves most aspects of consistency (all except .st_size)

 * for simultaneous readers of the file while we are appending to it.

 * However, multiple writers still are bad.  We choose not to use

 * locking because it is expensive and the use case of kernel build

 * makes multiple writers unlikely.

 Avoid problems if early cleanup() */

 Confirm we have 0xe8 0x0 0x0 0x0 0x0 */

 convert to nop */

 mov r0, r0 */

 mov r0, r0 */

 bl */

 bl */

 push {lr} */

 push {lr} */

 nop */

 nop */

 push {lr}, bl */

 push {lr}, bl */

 Convert to nop */

 bl <_mcount> is 0x94000000 before relocation */

 Convert to nop */

	/*

	 * After reading the entire file into memory, delete it

	 * and write it back, to prevent weird side effects of modifying

	 * an object file in place.

 w8rev, w8nat, ...: Handle endianness. */

 Names of the sections that could contain calls to mcount. */

 our work here is done! */

 32 bit and 64 bit are very similar */

/* 64-bit EM_MIPS has weird ELF64_Rela.r_info.

 * http://techpubs.sgi.com/library/manuals/4000/007-4658-001/pdf/007-4658-001.pdf

 * We interpret Table 29 Relocation Operation (Elf64_Rel, Elf64_Rela) [p.40]

 * to imply the order of the members; the spec does not say so.

 *	typedef unsigned char Elf64_Byte;

 * fails on MIPS64 because their <elf.h> already has it!

 Type for a 8-bit quantity.  */

 Symbol index.  */

 Special symbol.  */

 Third relocation.  */

 Second relocation.  */

 First relocation.  */

 main() is big endian, file.o is little endian. */

 main() is little endian, file.o is big endian. */

 end switch */

 reltype: e_class    */ break;

 reltype: e_class    */ break;

 end switch */

 end switch */

 gcc-4.3.0 false positive complaint */

 Process each file in turn, allowing deep failure. */

		/*

		 * The file kernel/trace/ftrace.o references the mcount

		 * function but does not call it. Since ftrace.o should

		 * not be traced anyway, we just skip it.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * sorttable.c: Sort the kernel's table

 *

 * Added ORC unwind tables sort support and other updates:

 * Copyright (C) 1999-2019 Alibaba Group Holding Limited. by:

 * Shile Zhang <shile.zhang@linux.alibaba.com>

 *

 * Copyright 2011 - 2012 Cavium, Inc.

 *

 * Based on code taken from recortmcount.c which is:

 *

 * Copyright 2009 John F. Reiser <jreiser@BitWagon.com>.  All rights reserved.

 *

 * Restructured to fit Linux format, as well as other updates:

 * Copyright 2010 Steven Rostedt <srostedt@redhat.com>, Red Hat Inc.

/*

 * Strategy: alter the vmlinux file in-place.

/*

 * Get the whole file as a programming convenience in order to avoid

 * malloc+lseek+read+free of many pieces.  If successful, then mmap

 * avoids copying unused pieces; else just read the whole file.

 * Open for both read and write.

/*

 * Move reserved section indices SHN_LORESERVE..SHN_HIRESERVE out of

 * the way to -256..-1, to avoid conflicting with real section

 * indices.

 Accessor for sym->st_shndx, hides ugliness of "64k sections" */

 32 bit and 64 bit are very similar */

	/*

	 * Do the same thing the runtime sort does, first normalize to

	 * being relative to the start of the section.

 Now denormalize. */

 Don't touch the fixup type or data */

 Don't touch the fixup type or data */

 Don't touch the fixup type */

 Don't touch the fixup type */

		/*

		 * 0 is a special self-relative handler value, which means that

		 * handler should be ignored. It is safe, because it means that

		 * handler field points to itself, which should never happen.

		 * When creating extable-relative values, keep it as 0, since

		 * this should never occur either: it would mean that handler

		 * field points to the first extable entry.

 gcc-4.3.0 false positive complaint */

 Process each file in turn, allowing deep failure. */

/* Generate assembler source containing symbol information

 *

 * Copyright 2002       by Kai Germaschewski

 *

 * This software may be used and distributed according to the terms

 * of the GNU General Public License, incorporated herein by reference.

 *

 * Usage: nm -n vmlinux | scripts/kallsyms [--all-symbols] > symbols.S

 *

 *      Table compression uses all the unused char codes on the symbols and

 *  maps these to the most used substrings (tokens). For instance, it might

 *  map char code 0xF7 to represent "write_" and then in every symbol where

 *  "write_" appears it can be replaced by 0xF7, saving 5 bytes.

 *      The used codes themselves are also placed in the table so that the

 *  decompresion can work without "special cases".

 *      Applied to kernel symbols, this usually produces a compression ratio

 *  of about 50%.

 *

 the table that holds the result of the compression */

 Symbol names that exactly match to the following are ignored.*/

		/*

		 * Symbols which vary between passes. Passes 1 and 2 must have

		 * identical symbol lists. The kallsyms_* symbols below are

		 * only added after pass 1, they would be included in pass 2

		 * when --all-symbols is specified so exclude them to get a

		 * stable symbol list.

 Exclude linker generated symbols which vary between passes */

 ppc */

 ppc */

 Symbol names that begin with the following are ignored.*/

 local symbols for ARM, MIPS, etc. */

 s390 kasan local symbols */

 modversions */

 arm64 EFI stub namespace */

 arm64 non-VHE KVM namespace */

 arm64 lld */

 arm lld */

 mips lld */

 Symbol names that end with the following are ignored.*/

 arm */

 arm */

 arm */

 Symbol names that contain the following are ignored.*/

 ppc stub */

 ppc stub */

 exclude debugging symbols */

 Keep these useful absolute symbols */

 Ignore most absolute/undefined (?) symbols. */

	/* include the type field in the symbol name, so that it gets

	/* if --all-symbols is not specified, then symbols outside the text

		/* Corner case.  Discard any symbols with the same value as

		 * _etext _einittext; they can move between pass 1 and 2 when

		 * the kallsyms data are added.  If these symbols move then

		 * they may get dropped in pass 2, which breaks the kallsyms

		 * rules.

 remove all the invalid symbols from the table */

 When valid symbol is not registered, exit to error */

 Provide proper symbols relocatability by their '_text' relativeness. */

/* uncompress a compressed symbol. When this function is called, the best table

		/* if the table holds a single char that is the same as the one

 if not, recurse and expand */

			/*

			 * Use the offset relative to the lowest value

			 * encountered of all relative symbols, and emit

			 * non-relocatable fixed offsets that will be fixed

			 * up at runtime.

	/* table of offset markers, that give the offset in the compressed stream

 table lookup compression functions */

 count all the possible tokens in a symbol */

 decrease the count for all the possible tokens in a symbol */

 do the initial token count */

/* replace a given token in all the valid symbols. Use the sampled symbols

 find the token on the symbol */

 decrease the counts for this symbol's tokens */

 find the token on the symbol */

 increase the counts for this symbol's new tokens */

 search the token with the maximum profit */

 this is the core of the algorithm: calculate the "best" table */

	/* using the '\0' symbol last allows compress_symbols to use standard

		/* if this table slot is empty (it is not used by an actual

 find the token with the best profit value */

 place it in the "best" table */

 replace this token in all the valid symbols */

 start by placing the symbols that are actually used on the table */

 guess for "linker script provide" symbol */

 __start_XXXXX */

 __stop_XXXXX */

 __end_XXXXX */

 __XXXXX_start */

 __XXXXX_end */

 sort by address first */

 sort by "weakness" type */

 sort by "linker script provide" type */

 sort by the number of prefix underscores */

 sort by initial order, so that other symbols are left undisturbed */

			/*

			 * Keep the 'A' override for percpu symbols to

			 * ensure consistent behavior compared to older

			 * versions of this tool.

 find the minimum non-absolute symbol address */

			/*

			 * The table is sorted by address.

			 * Take the first non-absolute symbol value.

/*

 * Unloved program to convert a binary on stdin to a C include on stdout

 *

 * Jan 1999 Matt Mackall <mpm@selenic.com>

 *

 * This software may be used and distributed according to the terms

 * of the GNU General Public License, incorporated herein by reference.

# 27/06/2001 -  Allowed whitespace after initial "/**" and

#               allowed comments before function declarations.

# -- Christian Kreibich <ck@whoop.org>



# Still to do:

# 	- add perldoc documentation

# 	- Look more closely at some of the scarier bits :)



# 26/05/2001 - 	Support for separate source and object trees.

#		Return error code.

# 		Keith Owens <kaos@ocs.com.au>



# 23/09/2001 - Added support for typedefs, structs, enums and unions

#              Support for Context section; can be terminated using empty line

#              Small fixes (like spaces vs. \s in regex)

# -- Tim Jansen <tim@tjansen.de>



# 25/07/2012 - Added support for HTML5

# -- Dan Luedtke <mail@danrl.de>



sub usage {

    my $message = <<"EOF";

Usage: $0 [OPTION ...] FILE ...



Read C language source or header FILEs, extract embedded documentation comments,

and print formatted documentation to standard output.



*" opening comment mark. See

# /**

#  * function_name(:)? (- short description)?

# (* @parameterx: (description of parameter x)?)*

# (* a blank line)?

#  * (Description:)? (Description of function)?

#  * (section header: (section description)? )*

# /**

#  * my_function

# /**

#  * my_function - does my stuff

#  * @my_arg: its mine damnit

#  *

#  * Does my stuff explained.

# /**

#  * my_function - does my stuff

#  * @my_arg: its mine damnit

#  * Description: Does my stuff explained.

# /**

#  * struct my_struct - short description

#  * @a: first member

#  * @b: second member

#  *

#  * Longer description

 private: */

# /**

#  * struct my_struct - short description

#  * @a: first member

#  * @b: second member

#  *

#  * Longer description

#     /**

#      * @c: This is longer description of C

#      *

#      * You can use paragraphs to describe arguments

#      * using this method.

# /**

#  * user_function - function that can only be called in user context

#  * @a: some argument

#  * Context: !in_interrupt()

#  *

#  * Some description

#  * Example:

#  *    user_function(22);

www.oasis-open.org/docbook/documentation/reference/html/refentry.html

my $doc_end = '\*/';

my $doc_com = '\s*\*\s*';

my $doc_com_body = '\s*\* ?';

my $doc_decl = $doc_com . '(\w+)';

# @params and a strictly limited set of supported section names

# Specifically:

#   Match @word:

#	  @...:

#         @{section-name}:

# while trying to not match literal block starts like "example::"

#

my $doc_sect = $doc_com .

    '\s*(\@[.\w]+|\@\.\.\.|description|context|returns?|notes?|examples?)\s*:([^:].*)?$';

my $doc_content = $doc_com_body . '(.*)';

my $doc_block = $doc_com . 'DOC:\s*(.*)?';

my $doc_inline_end = '^\s*\*/\s*$';

my $doc_inline_oneline = '^\s*/\*\*\s*(@[\w\s]+):\s*(.*)\s*\*/\s*$';

my $export_symbol = '^\s*EXPORT_SYMBOL(_GPL)?\s*\(\s*(\w+)\s*\)\s*;';

my $function_pointer = qr{([^\(]*\(\*)\s*\)\s*\(([^\)]*)\)};

my $attribute = qr{__attribute__\s*\(\([a-z0-9,_\*\s\(\)]*\)\)}i;



my %parameterdescs;

my %parameterdesc_start_lines;

my @parameterlist;

my %sections;

my @sectionlist;

my %section_start_lines;

my $sectcheck;

my $struct_actual;



my $contents = "";

my $new_start_line = 0;



# the canonical section names. see also $doc_sect above.

my $section_default = "Description";	# default section

my $section_intro = "Introduction";

my $section = $section_default;

my $section_context = "Context";

my $section_return = "Return";



my $undescribed = "-- undescribed --";



reset_state();



while ($ARGV[0] =~ m/^--?(.*)/) {

    my $cmd = $1;

    shift @ARGV;

    if ($cmd eq "man") {

	$output_mode = "man";

	@highlights = @highlights_man;

	$blankline = $blankline_man;

    } elsif ($cmd eq "rst") {

	$output_mode = "rst";

	@highlights = @highlights_rst;

	$blankline = $blankline_rst;

    } elsif ($cmd eq "none") {

	$output_mode = "none";

    } elsif ($cmd eq "module") { # not needed for XML, inherits from calling document

	$modulename = shift @ARGV;

    } elsif ($cmd eq "function") { # to only output specific functions

	$output_selection = OUTPUT_INCLUDE;

	$function = shift @ARGV;

	$function_table{$function} = 1;

    } elsif ($cmd eq "nosymbol") { # Exclude specific symbols

	my $symbol = shift @ARGV;

	$nosymbol_table{$symbol} = 1;

    } elsif ($cmd eq "export") { # only exported symbols

	$output_selection = OUTPUT_EXPORTED;

	%function_table = ();

    } elsif ($cmd eq "internal") { # only non-exported symbols

	$output_selection = OUTPUT_INTERNAL;

	%function_table = ();

    } elsif ($cmd eq "export-file") {

	my $file = shift @ARGV;

	push(@export_file_list, $file);

    } elsif ($cmd eq "v") {

	$verbose = 1;

    } elsif ($cmd eq "Werror") {

	$Werror = 1;

    } elsif (($cmd eq "h") || ($cmd eq "help")) {

	usage();

    } elsif ($cmd eq 'no-doc-sections') {

	    $no_doc_sections = 1;

    } elsif ($cmd eq 'enable-lineno') {

	    $enable_lineno = 1;

    } elsif ($cmd eq 'show-not-found') {

	$show_not_found = 1;  # A no-op but don't fail

    } elsif ($cmd eq "sphinx-version") {

	my $ver_string = shift @ARGV;

	if ($ver_string =~ m/^(\d+)(\.\d+)?(\.\d+)?/) {

	    $sphinx_major = $1;

	    if (defined($2)) {

		$sphinx_minor = substr($2,1);

	    } else {

		$sphinx_minor = 0;

	    }

	    if (defined($3)) {

		$sphinx_patch = substr($3,1)

	    } else {

		$sphinx_patch = 0;

	    }

	} else {

	    die "Sphinx version should either major.minor or major.minor.patch format\n";

	}

    } else {

	# Unknown argument

        usage();

    }

}



# continue execution near EOF;



# The C domain dialect changed on Sphinx 3. So, we need to check the

# version in order to produce the right tags.

sub findprog($)

{

	foreach(split(/:/, $ENV{PATH})) {

		return "$_/$_[0]" if(-x "$_/$_[0]");

	}

}



sub get_sphinx_version()

{

	my $ver;



	my $cmd = "sphinx-build";

	if (!findprog($cmd)) {

		my $cmd = "sphinx-build3";

		if (!findprog($cmd)) {

			$sphinx_major = 1;

			$sphinx_minor = 2;

			$sphinx_patch = 0;

			printf STDERR "Warning: Sphinx version not found. Using default (Sphinx version %d.%d.%d)\n",

			       $sphinx_major, $sphinx_minor, $sphinx_patch;

			return;

		}

	}



	open IN, "$cmd --version 2>&1 |";

	while (<IN>) {

		if (m/^\s*sphinx-build\s+([\d]+)\.([\d\.]+)(\+\/[\da-f]+)?$/) {

			$sphinx_major = $1;

			$sphinx_minor = $2;

			$sphinx_patch = $3;

			last;

		}

		# Sphinx 1.2.x uses a different format

		if (m/^\s*Sphinx.*\s+([\d]+)\.([\d\.]+)$/) {

			$sphinx_major = $1;

			$sphinx_minor = $2;

			$sphinx_patch = $3;

			last;

		}

	}

	close IN;

}



# get kernel version from env

sub get_kernel_version() {

    my $version = 'unknown kernel version';



    if (defined($ENV{'KERNELVERSION'})) {

	$version = $ENV{'KERNELVERSION'};

    }

    return $version;

}



#

sub print_lineno {

    my $lineno = shift;

    if ($enable_lineno && defined($lineno)) {

        print "#define LINENO " . $lineno . "\n";

    }

}

##

# dumps section contents to arrays/hashes intended for that purpose.

#

sub dump_section {

    my $file = shift;

    my $name = shift;

    my $contents = join "\n", @_;



    if ($name =~ m/$type_param/) {

	$name = $1;

	$parameterdescs{$name} = $contents;

	$sectcheck = $sectcheck . $name . " ";

        $parameterdesc_start_lines{$name} = $new_start_line;

        $new_start_line = 0;

    } elsif ($name eq "@\.\.\.") {

	$name = "...";

	$parameterdescs{$name} = $contents;

	$sectcheck = $sectcheck . $name . " ";

        $parameterdesc_start_lines{$name} = $new_start_line;

        $new_start_line = 0;

    } else {

	if (defined($sections{$name}) && ($sections{$name} ne "")) {

	    # Only warn on user specified duplicate section names.

	    if ($name ne $section_default) {

		print STDERR "${file}:$.: warning: duplicate section name '$name'\n";

		++$warnings;

	    }

	    $sections{$name} .= $contents;

	} else {

	    $sections{$name} = $contents;

	    push @sectionlist, $name;

            $section_start_lines{$name} = $new_start_line;

            $new_start_line = 0;

	}

    }

}



##

# dump DOC: section after checking that it should go out

#

sub dump_doc_section {

    my $file = shift;

    my $name = shift;

    my $contents = join "\n", @_;



    if ($no_doc_sections) {

        return;

    }



    return if (defined($nosymbol_table{$name}));



    if (($output_selection == OUTPUT_ALL) ||

	(($output_selection == OUTPUT_INCLUDE) &&

	 defined($function_table{$name})))

    {

	dump_section($file, $name, $contents);

	output_blockhead({'sectionlist' => \@sectionlist,

			  'sections' => \%sections,

			  'module' => $modulename,

			  'content-only' => ($output_selection != OUTPUT_ALL), });

    }

}



##

# output function

#

# parameterdescs, a hash.

#  function => "function name"

#  parameterlist => @list of parameters

#  parameterdescs => %parameter descriptions

#  sectionlist => @list of sections

#  sections => %section descriptions

#



sub output_highlight {

    my $contents = join "\n",@_;

    my $line;



#   DEBUG

#   if (!defined $contents) {

#	use Carp;

#	confess "output_highlight got called with no args?\n";

#   }



#   print STDERR "contents b4:$contents\n";

    eval $dohighlight;

    die $@ if $@;

#   print STDERR "contents af:$contents\n";



    foreach $line (split "\n", $contents) {

	if (! $output_preformatted) {

;

	$parameter_name =~ s/\[.*//;



	print ".IP \"" . $parameter . "\" 12\n";

	output_highlight($args{'parameterdescs'}{$parameter_name});

    }

    foreach $section (@{$args{'sectionlist'}}) {

	print ".SH \"", uc $section, "\"\n";

	output_highlight($args{'sections'}{$section});

    }

}



##

# output enum in man

sub output_enum_man(%) {

    my %args = %{$_[0]};

    my ($parameter, $section);

    my $count;



    print ".TH \"$args{'module'}\" 9 \"enum $args{'enum'}\" \"$man_date\" \"API Manual\" LINUX\n";



    print ".SH NAME\n";

    print "enum " . $args{'enum'} . " \\- " . $args{'purpose'} . "\n";



    print ".SH SYNOPSIS\n";

    print "enum " . $args{'enum'} . " {\n";

    $count = 0;

    foreach my $parameter (@{$args{'parameterlist'}}) {

	print ".br\n.BI \"    $parameter\"\n";

	if ($count == $#{$args{'parameterlist'}}) {

	    print "\n};\n";

	    last;

	}

	else {

	    print ", \n.br\n";

	}

	$count++;

    }



    print ".SH Constants\n";

    foreach $parameter (@{$args{'parameterlist'}}) {

	my $parameter_name = $parameter;

;

	$parameter_name =~ s/\[.*//;



	($args{'parameterdescs'}{$parameter_name} ne $undescribed) || next;

	print ".IP \"" . $parameter . "\" 12\n";

	output_highlight($args{'parameterdescs'}{$parameter_name});

    }

    foreach $section (@{$args{'sectionlist'}}) {

	print ".SH \"$section\"\n";

	output_highlight($args{'sections'}{$section});

    }

}



##

# output typedef in man

sub output_typedef_man(%) {

    my %args = %{$_[0]};

    my ($parameter, $section);



    print ".TH \"$args{'module'}\" 9 \"$args{'typedef'}\" \"$man_date\" \"API Manual\" LINUX\n";



    print ".SH NAME\n";

    print "typedef " . $args{'typedef'} . " \\- " . $args{'purpose'} . "\n";



    foreach $section (@{$args{'sectionlist'}}) {

	print ".SH \"$section\"\n";

	output_highlight($args{'sections'}{$section});

    }

}



sub output_blockhead_man(%) {

    my %args = %{$_[0]};

    my ($parameter, $section);

    my $count;



    print ".TH \"$args{'module'}\" 9 \"$args{'module'}\" \"$man_date\" \"API Manual\" LINUX\n";



    foreach $section (@{$args{'sectionlist'}}) {

	print ".SH \"$section\"\n";

	output_highlight($args{'sections'}{$section});

    }

}



##

# output in restructured text

#



#

# This could use some work; it's used to output the DOC: sections, and

# starts by putting out the name of the doc section itself, but that tends

# to duplicate a header already in the template file.

#

sub output_blockhead_rst(%) {

    my %args = %{$_[0]};

    my ($parameter, $section);



    foreach $section (@{$args{'sectionlist'}}) {

	next if (defined($nosymbol_table{$section}));



	if ($output_selection != OUTPUT_INCLUDE) {

	    print ".. _$section:\n\n";

	    print "**$section**\n\n";

	}

        print_lineno($section_start_lines{$section});

	output_highlight_rst($args{'sections'}{$section});

	print "\n";

    }

}



#

# Apply the RST highlights to a sub-block of text.

#

sub highlight_block($) {

    # The dohighlight kludge requires the text be called $contents

    my $contents = shift;

    eval $dohighlight;

    die $@ if $@;

    return $contents;

}



#

# Regexes used only here.

#

my $sphinx_literal = '^[^.].*::$';

my $sphinx_cblock = '^\.\.\ +code-block::';



sub output_highlight_rst {

    my $input = join "\n",@_;

    my $output = "";

    my $line;

    my $in_literal = 0;

    my $litprefix;

    my $block = "";



    foreach $line (split "\n",$input) {

	#

	# If we're in a literal block, see if we should drop out

	# of it.  Otherwise pass the line straight through unmunged.

	#

	if ($in_literal) {

	    if (! ($line =~ /^\s*$/)) {

		#

		# If this is the first non-blank line in a literal

		# block we need to figure out what the proper indent is.

		#

		if ($litprefix eq "") {

		    $line =~ /^(\s*)/;

		    $litprefix = '^' . $1;

		    $output .= $line . "\n";

		} elsif (! ($line =~ /$litprefix/)) {

		    $in_literal = 0;

		} else {

		    $output .= $line . "\n";

		}

	    } else {

		$output .= $line . "\n";

	    }

	}

	#

	# Not in a literal block (or just dropped out)

	#

	if (! $in_literal) {

	    $block .= $line . "\n";

	    if (($line =~ /$sphinx_literal/) || ($line =~ /$sphinx_cblock/)) {

		$in_literal = 1;

		$litprefix = "";

		$output .= highlight_block($block);

		$block = ""

	    }

	}

    }



    if ($block) {

	$output .= highlight_block($block);

    }

    foreach $line (split "\n", $output) {

	print $lineprefix . $line . "\n";

    }

}



sub output_function_rst(%) {

    my %args = %{$_[0]};

    my ($parameter, $section);

    my $oldprefix = $lineprefix;

    my $start = "";

    my $is_macro = 0;



    if ($sphinx_major < 3) {

	if ($args{'typedef'}) {

	    print ".. c:type:: ". $args{'function'} . "\n\n";

	    print_lineno($declaration_start_line);

	    print "   **Typedef**: ";

	    $lineprefix = "";

	    output_highlight_rst($args{'purpose'});

	    $start = "\n\n**Syntax**\n\n  ``";

	    $is_macro = 1;

	} else {

	    print ".. c:function:: ";

	}

    } else {

	if ($args{'typedef'} || $args{'functiontype'} eq "") {

	    $is_macro = 1;

	    print ".. c:macro:: ". $args{'function'} . "\n\n";

	} else {

	    print ".. c:function:: ";

	}



	if ($args{'typedef'}) {

	    print_lineno($declaration_start_line);

	    print "   **Typedef**: ";

	    $lineprefix = "";

	    output_highlight_rst($args{'purpose'});

	    $start = "\n\n**Syntax**\n\n  ``";

	} else {

	    print "``" if ($is_macro);

	}

    }

    if ($args{'functiontype'} ne "") {

	$start .= $args{'functiontype'} . " " . $args{'function'} . " (";

    } else {

	$start .= $args{'function'} . " (";

    }

    print $start;



    my $count = 0;

    foreach my $parameter (@{$args{'parameterlist'}}) {

	if ($count ne 0) {

	    print ", ";

	}

	$count++;

	$type = $args{'parametertypes'}{$parameter};



	if ($type =~ m/$function_pointer/) {

	    # pointer-to-function

	    print $1 . $parameter . ") (" . $2 . ")";

	} else {

	    print $type;

	}

    }

    if ($is_macro) {

	print ")``\n\n";

    } else {

	print ")\n\n";

    }

    if (!$args{'typedef'}) {

	print_lineno($declaration_start_line);

	$lineprefix = "   ";

	output_highlight_rst($args{'purpose'});

	print "\n";

    }



    print "**Parameters**\n\n";

    $lineprefix = "  ";

    foreach $parameter (@{$args{'parameterlist'}}) {

	my $parameter_name = $parameter;

;

	$parameter_name =~ s/\[.*//;



	($args{'parameterdescs'}{$parameter_name} ne $undescribed) || next;

	$type = $args{'parametertypes'}{$parameter};

        print_lineno($parameterdesc_start_lines{$parameter_name});

	print "``" . $parameter . "``\n";

	output_highlight_rst($args{'parameterdescs'}{$parameter_name});

	print "\n";

    }

    print "\n";



    $lineprefix = $oldprefix;

    output_section_rst(@_);

}



## none mode output functions



sub output_function_none(%) {

}



sub output_enum_none(%) {

}



sub output_typedef_none(%) {

}



sub output_struct_none(%) {

}



sub output_blockhead_none(%) {

}



##

# generic output function for all types (function, struct/union, typedef, enum);

# calls the generated, variable output_ function name based on

# functype and output_mode

sub output_declaration {

    no strict 'refs';

    my $name = shift;

    my $functype = shift;

    my $func = "output_${functype}_$output_mode";



    return if (defined($nosymbol_table{$name}));



    if (($output_selection == OUTPUT_ALL) ||

	(($output_selection == OUTPUT_INCLUDE ||

	  $output_selection == OUTPUT_EXPORTED) &&

	 defined($function_table{$name})) ||

	($output_selection == OUTPUT_INTERNAL &&

	 !($functype eq "function" && defined($function_table{$name}))))

    {

	&$func(@_);

	$section_counter++;

    }

}



##

# generic output function - calls the right one based on current output mode.

sub output_blockhead {

    no strict 'refs';

    my $func = "output_blockhead_" . $output_mode;

    &$func(@_);

    $section_counter++;

}



##

# takes a declaration (struct, union, enum, typedef) and

# invokes the right handler. NOT called for functions.

sub dump_declaration($$) {

    no strict 'refs';

    my ($prototype, $file) = @_;

    my $func = "dump_" . $decl_type;

    &$func(@_);

}



sub dump_union($$) {

    dump_struct(@_);

}



sub dump_struct($$) {

    my $x = shift;

    my $file = shift;

    my $decl_type;

    my $members;

    my $type = qr{struct|union};

    # For capturing struct/union definition body, i.e. "{members*}qualifiers*"

    my $qualifiers = qr{$attribute|__packed|__aligned|____cacheline_aligned_in_smp|____cacheline_aligned};

    my $definition_body = qr{\{(.*)\}\s*$qualifiers*};

    my $struct_members = qr{($type)([^\{\};]+)\{([^\{\}]*)\}([^\{\}\;]*)\;};



    if ($x =~ /($type)\s+(\w+)\s*$definition_body/) {

	$decl_type = $1;

	$declaration_name = $2;

	$members = $3;

    } elsif ($x =~ /typedef\s+($type)\s*$definition_body\s*(\w+)\s*;/) {

	$decl_type = $1;

	$declaration_name = $3;

	$members = $2;

    }



    if ($members) {

	if ($identifier ne $declaration_name) {

	    print STDERR "${file}:$.: warning: expecting prototype for $decl_type $identifier. Prototype was for $decl_type $declaration_name instead\n";

	    return;

	}



	# ignore members marked private:

	$members =~ s/\/\*\s*private:.*?\/\*\s*public:.*?\*\///gosi;

gosi;

	$members =~ s/\s*__packed\s*/ /gos;

	$members =~ s/\s*CRYPTO_MINALIGN_ATTR/ /gos;

	$members =~ s/\s*____cacheline_aligned_in_smp/ /gos;

	$members =~ s/\s*____cacheline_aligned/ /gos;

	# unwrap struct_group():

	# - first eat non-declaration parameters and rewrite for final match

	# - then remove macro, outer parens, and trailing semicolon

	$members =~ s/\bstruct_group\s*\(([^,]*,)/STRUCT_GROUP(/gos;

	$members =~ s/\bstruct_group_(attr|tagged)\s*\(([^,]*,){2}/STRUCT_GROUP(/gos;

	$members =~ s/\b__struct_group\s*\(([^,]*,){3}/STRUCT_GROUP(/gos;

	$members =~ s/\bSTRUCT_GROUP(\(((?:(?>[^)(]+)|(?1))*)\))[^;]*;/$2/gos;



	my $args = qr{([^,)]+)};

	# replace DECLARE_BITMAP

	$members =~ s/__ETHTOOL_DECLARE_LINK_MODE_MASK\s*\(([^\)]+)\)/DECLARE_BITMAP($1, __ETHTOOL_LINK_MODE_MASK_NBITS)/gos;

	$members =~ s/DECLARE_PHY_INTERFACE_MASK\s*\(([^\)]+)\)/DECLARE_BITMAP($1, PHY_INTERFACE_MODE_MAX)/gos;

	$members =~ s/DECLARE_BITMAP\s*\($args,\s*$args\)/unsigned long $1\[BITS_TO_LONGS($2)\]/gos;

	# replace DECLARE_HASHTABLE

	$members =~ s/DECLARE_HASHTABLE\s*\($args,\s*$args\)/unsigned long $1\[1 << (($2) - 1)\]/gos;

	# replace DECLARE_KFIFO

	$members =~ s/DECLARE_KFIFO\s*\($args,\s*$args,\s*$args\)/$2 \*$1/gos;

	# replace DECLARE_KFIFO_PTR

	$members =~ s/DECLARE_KFIFO_PTR\s*\($args,\s*$args\)/$2 \*$1/gos;

	# replace DECLARE_FLEX_ARRAY

	$members =~ s/(?:__)?DECLARE_FLEX_ARRAY\s*\($args,\s*$args\)/$1 $2\[\]/gos;

	my $declaration = $members;



	# Split nested struct/union elements as newer ones

	while ($members =~ m/$struct_members/) {

		my $newmember;

		my $maintype = $1;

		my $ids = $4;

		my $content = $3;

		foreach my $id(split /,/, $ids) {

			$newmember .= "$maintype $id; ";



;

			$id =~ s/^\s*\**(\S+)\s*/$1/;

			foreach my $arg (split /;/, $content) {

				next if ($arg =~ m/^\s*$/);

				if ($arg =~ m/^([^\(]+\(\*?\s*)([\w\.]*)(\s*\).*)/) {

					# pointer-to-function

					my $type = $1;

					my $name = $2;

					my $extra = $3;

					next if (!$name);

					if ($id =~ m/^\s*$/) {

						# anonymous struct/union

						$newmember .= "$type$name$extra; ";

					} else {

						$newmember .= "$type$id.$name$extra; ";

					}

				} else {

					my $type;

					my $names;

					$arg =~ s/^\s+//;

					$arg =~ s/\s+$//;

					# Handle bitmaps

g;

g;

					$arg =~ s/\s*,\s*/,/g;

					if ($arg =~ m/(.*)\s+([\S+,]+)/) {

						$type = $1;

						$names = $2;

					} else {

						$newmember .= "$arg; ";

						next;

					}

					foreach my $name (split /,/, $names) {

g;

;

;

    $x =~ s@/\*.*?\*/@@gos;	# strip comments.

    # strip #define macros inside enums

    $x =~ s@#\s*((define|ifdef)\s+|endif)[^;]*;@@gos;



    if ($x =~ /typedef\s+enum\s*\{(.*)\}\s*(\w*)\s*;/) {

	$declaration_name = $2;

	$members = $1;

    } elsif ($x =~ /enum\s+(\w*)\s*\{(.*)\}/) {

	$declaration_name = $1;

	$members = $2;

    }



    if ($members) {

	if ($identifier ne $declaration_name) {

	    if ($identifier eq "") {

		print STDERR "${file}:$.: warning: wrong kernel-doc identifier on line:\n";

	    } else {

		print STDERR "${file}:$.: warning: expecting prototype for enum $identifier. Prototype was for enum $declaration_name instead\n";

	    }

	    return;

	}

	$declaration_name = "(anonymous)" if ($declaration_name eq "");



	my %_members;



	$members =~ s/\s+$//;



	foreach my $arg (split ',', $members) {

    $x =~ s@/\*.*?\*/@@gos;	# strip comments.



    # Parse function typedef prototypes

    if ($x =~ $typedef1 || $x =~ $typedef2) {

	$return_type = $1;

	$declaration_name = $2;

	my $args = $3;

	$return_type =~ s/^\s+//;



	if ($identifier ne $declaration_name) {

	    print STDERR "${file}:$.: warning: expecting prototype for typedef $identifier. Prototype was for typedef $declaration_name instead\n";

	    return;

	}



	create_parameterlist($args, ',', $file, $declaration_name);



	output_declaration($declaration_name,

			   'function',

			   {'function' => $declaration_name,

			    'typedef' => 1,

			    'module' => $modulename,

			    'functiontype' => $return_type,

			    'parameterlist' => \@parameterlist,

			    'parameterdescs' => \%parameterdescs,

			    'parametertypes' => \%parametertypes,

			    'sectionlist' => \@sectionlist,

			    'sections' => \%sections,

			    'purpose' => $declaration_purpose

			   });

	return;

    }



    while (($x =~ /\(*.\)\s*;$/) || ($x =~ /\[*.\]\s*;$/)) {

	$x =~ s/\(*.\)\s*;$/;/;

	$x =~ s/\[*.\]\s*;$/;/;

    }



    if ($x =~ /typedef.*\s+(\w+)\s*;/) {

	$declaration_name = $1;



	if ($identifier ne $declaration_name) {

	    print STDERR "${file}:$.: warning: expecting prototype for typedef $identifier. Prototype was for typedef $declaration_name instead\n";

	    return;

	}



	output_declaration($declaration_name,

			   'typedef',

			   {'typedef' => $declaration_name,

			    'module' => $modulename,

			    'sectionlist' => \@sectionlist,

			    'sections' => \%sections,

			    'purpose' => $declaration_purpose

			   });

    }

    else {

	print STDERR "${file}:$.: error: Cannot parse typedef!\n";

	++$errors;

    }

}



sub save_struct_actual($) {

    my $actual = shift;



    # strip all spaces from the actual param so that it looks like one string item

g;

	$arg =~ s/^\s*//;

	$arg =~ s/\s*$//;

	$arg =~ s/\s+/ /;



	if ($arg =~ /^#/) {

	    # Treat preprocessor directive as a typeless variable just to fill

	    # corresponding data structures "correctly". Catch it later in

	    # output_* subs.

	    push_parameter($arg, "", "", $file);

	} elsif ($arg =~ m/\(.+\)\s*\(/) {

	    # pointer-to-function

	    $arg =~ tr/#/,/;

	    $arg =~ m/[^\(]+\(\*?\s*([\w\[\]\.]*)\s*\)/;

	    $param = $1;

	    $type = $arg;

	    $type =~ s/([^\(]+\(\*?)\s*$param/$1/;

	    save_struct_actual($param);

	    push_parameter($param, $type, $arg, $file, $declaration_name);

	} elsif ($arg) {

	    if ($args[0] =~ m/\*/) {

	$param =~ s/[\[\)].*//;



	if ($type eq "" && $param =~ /\.\.\.$/)

	{

	    if (!$param =~ /\w\.\.\.$/) {

	      # handles unnamed variable parameters

	      $param = "...";

	    }

	    elsif ($param =~ /\w\.\.\.$/) {

	      # for named variable parameters of the form `x...`, remove the dots

	      $param =~ s/\.\.\.$//;

	    }

	    if (!defined $parameterdescs{$param} || $parameterdescs{$param} eq "") {

		$parameterdescs{$param} = "variable arguments";

	    }

	}

	elsif ($type eq "" && ($param eq "" or $param eq "void"))

	{

	    $param="void";

	    $parameterdescs{void} = "no arguments";

	}

	elsif ($type eq "" && ($param eq "struct" or $param eq "union"))

	# handle unnamed (anonymous) union or struct:

	{

		$type = $param;

		$param = "{unnamed_" . $param . "}";

		$parameterdescs{$param} = "anonymous\n";

		$anon_struct_union = 1;

	}



	# warn if parameter has no description

	# (but ignore ones starting with # as these are not parameters

	# but inline preprocessor statements);

	# Note: It will also ignore void params and unnamed structs/unions

	if (!defined $parameterdescs{$param} && $param !~ /^#/) {

		$parameterdescs{$param} = $undescribed;



	        if (show_warnings($type, $declaration_name) && $param !~ /\./) {

			print STDERR

			      "${file}:$.: warning: Function parameter or member '$param' not described in '$declaration_name'\n";

			++$warnings;

		}

	}



	# strip spaces from $param so that it is one continuous string

	# on @parameterlist;

	# this fixes a problem where check_sections() cannot find

	# a parameter like "addr[6 + 2]" because it actually appears

	# as "addr[6", "+", "2]" on the parameter list;

	# but it's better to maintain the param string unchanged for output,

	# so just weaken the string compare in check_sections() to ignore

	# "[blah" in a parameter string;

g;

;

i;

			$prm_clean =~ s/\[.*//;



;

;

;

;

;

;

;

;

;

;

;

;

;

;

;

;

;

;

;

; #ak added

;

x;

; #strip leading whitespace

    if ($x =~ m#\s*/\*\s+MACDOC\s*#io || ($x =~ /^#/ && $x !~ /^#\s*define/)) {

	# do nothing

    }

    elsif ($x =~ /([^\{]*)/) {

	$prototype .= $1;

    }



    if (($x =~ /\{/) || ($x =~ /\#\s*define/) || ($x =~ /;/)) {

# STATE_NORMAL: looking for the /** to begin everything.

#

sub process_normal() {

    if (/$doc_start/o) {

	$state = STATE_NAME;	# next line is always the function name

	$in_doc_sect = 0;

	$declaration_start_line = $. + 1;

    }

}



#

# STATE_NAME: Looking for the "name - description" line

#

sub process_name($$) {

    my $file = shift;

    my $descr;



    if (/$doc_block/o) {

	$state = STATE_DOCBLOCK;

	$contents = "";

	$new_start_line = $.;



	if ( $1 eq "" ) {

	    $section = $section_intro;

	} else {

	    $section = $1;

	}

    } elsif (/$doc_decl/o) {

	$identifier = $1;

	my $is_kernel_comment = 0;

	my $decl_start = qr{$doc_com};

	# test for pointer declaration type, foo * bar() - desc

	my $fn_type = qr{\w+\s*\*\s*}; 

	my $parenthesis = qr{\(\w*\)};

	my $decl_end = qr{[-:].*};

	if (/^$decl_start([\w\s]+?)$parenthesis?\s*$decl_end?$/) {

	    $identifier = $1;

	}

	if ($identifier =~ m/^(struct|union|enum|typedef)\b\s*(\S*)/) {

	    $decl_type = $1;

	    $identifier = $2;

	    $is_kernel_comment = 1;

	}

	# Look for foo() or static void foo() - description; or misspelt

	# identifier

	elsif (/^$decl_start$fn_type?(\w+)\s*$parenthesis?\s*$decl_end?$/ ||

	    /^$decl_start$fn_type?(\w+.*)$parenthesis?\s*$decl_end$/) {

	    $identifier = $1;

	    $decl_type = 'function';

	    $identifier =~ s/^define\s+//;

	    $is_kernel_comment = 1;

	}

	$identifier =~ s/\s+$//;



	$state = STATE_BODY;

	# if there's no @param blocks need to set up default section

	# here

	$contents = "";

	$section = $section_default;

	$new_start_line = $. + 1;

	if (/[-:](.*)/) {

	    # strip leading/trailing/multiple spaces

	    $descr= $1;

;

;

	    print STDERR "${file}:$.: warning: This comment starts with '/**', but isn't a kernel-doc comment. Refer Documentation/doc-guide/kernel-doc.rst\n";

	    print STDERR $_;

	    ++$warnings;

	    $state = STATE_NORMAL;

	}



	if (($declaration_purpose eq "") && $verbose) {

	    print STDERR "${file}:$.: warning: missing initial short description on line:\n";

	    print STDERR $_;

	    ++$warnings;

	}



	if ($identifier eq "" && $decl_type ne "enum") {

	    print STDERR "${file}:$.: warning: wrong kernel-doc identifier on line:\n";

	    print STDERR $_;

	    ++$warnings;

	    $state = STATE_NORMAL;

	}



	if ($verbose) {

	    print STDERR "${file}:$.: info: Scanning doc for $decl_type $identifier\n";

	}

    } else {

	print STDERR "${file}:$.: warning: Cannot understand $_ on line $.",

	    " - I thought it was a doc line\n";

	++$warnings;

	$state = STATE_NORMAL;

    }

}





#

# STATE_BODY and STATE_BODY_MAYBE: the bulk of a kerneldoc comment.

#

sub process_body($$) {

    my $file = shift;



    # Until all named variable macro parameters are

    # documented using the bare name (`x`) rather than with

    # dots (`x...`), strip the dots:

    if ($section =~ /\w\.\.\.$/) {

	$section =~ s/\.\.\.$//;



	if ($verbose) {

	    print STDERR "${file}:$.: warning: Variable macro arguments should be documented without dots\n";

	    ++$warnings;

	}

    }



    if ($state == STATE_BODY_WITH_BLANK_LINE && /^\s*\*\s?\S/) {

	dump_section($file, $section, $contents);

	$section = $section_default;

	$new_start_line = $.;

	$contents = "";

    }



    if (/$doc_sect/i) { # case insensitive for supported section names

	$newsection = $1;

	$newcontents = $2;



	# map the supported section names to the canonical names

	if ($newsection =~ m/^description$/i) {

	    $newsection = $section_default;

	} elsif ($newsection =~ m/^context$/i) {

	    $newsection = $section_context;

	} elsif ($newsection =~ m/^returns?$/i) {

	    $newsection = $section_return;

	} elsif ($newsection =~ m/^\@return$/) {

	    # special: @return is a section, not a param description

	    $newsection = $section_return;

	}



	if (($contents ne "") && ($contents ne "\n")) {

	    if (!$in_doc_sect && $verbose) {

		print STDERR "${file}:$.: warning: contents before sections\n";

		++$warnings;

	    }

	    dump_section($file, $section, $contents);

	    $section = $section_default;

	}



	$in_doc_sect = 1;

	$state = STATE_BODY;

	$contents = $newcontents;

	$new_start_line = $.;

	while (substr($contents, 0, 1) eq " ") {

	    $contents = substr($contents, 1);

	}

	if ($contents ne "") {

	    $contents .= "\n";

	}

	$section = $newsection;

	$leading_space = undef;

    } elsif (/$doc_end/) {

	if (($contents ne "") && ($contents ne "\n")) {

	    dump_section($file, $section, $contents);

	    $section = $section_default;

	    $contents = "";

	}

	# look for doc_com + <text> + doc_end:

;

	# Documentation block end */

    } elsif (/$doc_inline_end/) {

	if (($contents ne "") && ($contents ne "\n")) {

	    dump_section($file, $section, $contents);

	    $section = $section_default;

	    $contents = "";

	}

	$state = STATE_PROTO;

	$inline_doc_state = STATE_INLINE_NA;

	# Regular text

    } elsif (/$doc_content/) {

	if ($inline_doc_state == STATE_INLINE_TEXT) {

	    $contents .= $1 . "\n";

	    # nuke leading blank lines

	    if ($contents =~ /^\s*$/) {

		$contents = "";

	    }

	} elsif ($inline_doc_state == STATE_INLINE_NAME) {

	    $inline_doc_state = STATE_INLINE_ERROR;

	    print STDERR "${file}:$.: warning: ";

	    print STDERR "Incorrect use of kernel-doc format: $_";

	    ++$warnings;

	}

    }

}





sub process_file($) {

    my $file;

    my $initial_section_counter = $section_counter;

    my ($orig_file) = @_;



    $file = map_filename($orig_file);



    if (!open(IN_FILE,"<$file")) {

	print STDERR "Error: Cannot open file $file\n";

	++$errors;

	return;

    }



    $. = 1;



    $section_counter = 0;

    while (<IN_FILE>) {

	while (s/\\\s*$//) {

	    $_ .= <IN_FILE>;

	}

	# Replace tabs by spaces

        while ($_ =~ s/\t+/' ' x (length($&) * 8 - length($`) % 8)/e) {};

	# Hand this line to the appropriate state handler

	if ($state == STATE_NORMAL) {

	    process_normal();

	} elsif ($state == STATE_NAME) {

	    process_name($file, $_);

	} elsif ($state == STATE_BODY || $state == STATE_BODY_MAYBE ||

		 $state == STATE_BODY_WITH_BLANK_LINE) {

	    process_body($file, $_);

	} elsif ($state == STATE_INLINE) { # scanning for inline parameters

	    process_inline($file, $_);

	} elsif ($state == STATE_PROTO) {

	    process_proto($file, $_);

	} elsif ($state == STATE_DOCBLOCK) {

	    process_docblock($file, $_);

	}

    }



    # Make sure we got something interesting.

    if ($initial_section_counter == $section_counter && $

	output_mode ne "none") {

	if ($output_selection == OUTPUT_INCLUDE) {

	    print STDERR "${file}:1: warning: '$_' not found\n"

		for keys %function_table;

	}

	else {

	    print STDERR "${file}:1: warning: no structured comments found\n";

	}

    }

    close IN_FILE;

}





if ($output_mode eq "rst") {

	get_sphinx_version() if (!$sphinx_major);

}



$kernelversion = get_kernel_version();



# generate a sequence of code that will splice in highlighting information

# using the s// operator.

for (my $k = 0; $k < @highlights; $k++) {

    my $pattern = $highlights[$k][0];

    my $result = $highlights[$k][1];

#   print STDERR "scanning pattern:$pattern, highlight:($result)\n";

    $dohighlight .=  "\$contents =~ s:$pattern:$result:gs;\n";

}



# Read the file that maps relative names to absolute names for

# separate source and object directories and for shadow trees.

if (open(SOURCE_MAP, "<.tmp_filelist.txt")) {

	my ($relname, $absname);

	while(<SOURCE_MAP>) {

		chop();

		($relname, $absname) = (split())[0..1];

		$relname =~ s:^/+::;

		$source_map{$relname} = $absname;

	}

	close(SOURCE_MAP);

}



if ($output_selection == OUTPUT_EXPORTED ||

    $output_selection == OUTPUT_INTERNAL) {



    push(@export_file_list, @ARGV);



    foreach (@export_file_list) {

	chomp;

	process_export_file($_);

    }

}



foreach (@ARGV) {

    chomp;

    process_file($_);

}

if ($verbose && $errors) {

  print STDERR "$errors errors\n";

}

if ($verbose && $warnings) {

  print STDERR "$warnings warnings\n";

}



if ($Werror && $warnings) {

    print STDERR "$warnings warnings as Errors\n";

    exit($warnings);

} else {

    exit($output_mode eq "none" ? 0 : $errors)

}

/*

 * Copyright (c) 2002 - 2011 Tony Finch <dot@dotat.at>

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 * 1. Redistributions of source code must retain the above copyright

 *    notice, this list of conditions and the following disclaimer.

 * 2. Redistributions in binary form must reproduce the above copyright

 *    notice, this list of conditions and the following disclaimer in the

 *    documentation and/or other materials provided with the distribution.

 *

 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND

 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE

 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL

 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS

 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT

 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY

 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF

 * SUCH DAMAGE.

/*

 * unifdef - remove ifdef'ed lines

 *

 * This code was derived from software contributed to Berkeley by Dave Yost.

 * It was rewritten to support ANSI C by Tony Finch. The original version

 * of unifdef carried the 4-clause BSD copyright licence. None of its code

 * remains in this version (though some of the names remain) so it now

 * carries a more liberal licence.

 *

 *  Wishlist:

 *      provide an option which will append the name of the

 *        appropriate symbol after #else's and #endif's

 *      provide an option which will check symbols after

 *        #else's and #endif's to see that they match their

 *        corresponding #ifdef or #ifndef

 *

 *   These require better buffer handling, which would also make

 *   it possible to handle all "dodgy" directives correctly.

dotat.at/prog/unifdef $\n"

 types of input lines: */

 a true #if with ignore flag */

 a false #if with ignore flag */

 an unknown #if */

 a true #if */

 a false #if */

 an unknown #elif */

 a true #elif */

 a false #elif */

 #else */

 #endif */

 flag: directive is not on one line */

 ordinary line */

 end of file */

 unevaluable #if */

 state of #if processing */

 false #if followed by false #elifs */

 first non-false #(el)if is true */

 first non-false #(el)if is unknown */

 a false #elif after a pass state */

 a true #elif after a pass state */

 an else after a pass state */

 an else after a true state */

 an else after only false states */

 #elifs after a true are false */

 state of comment parser */

 outside a comment */

 in a comment like this one */

 and end of line */

 just after slash-backslash-newline */

 star-backslash-newline in a C comment */

 inside '' */

 inside "" */

 state of preprocessor line parser */

 only space and comments on this line */

 only space, comments, and a hash */

 this line can't be a preprocessor line */

/*

 * Minimum translation limits from ISO/IEC 9899:1999 5.2.4.1

 maximum #if nesting */

 maximum length of line */

 maximum number of symbols */

/*

 * Sometimes when editing a keyword the replacement text is longer, so

 * we leave some space at the end of the tline buffer to accommodate this.

/*

 * For temporary filenames

/*

 * Globals.

 -B: compress blank lines */

 -b: blank deleted lines */

 -c: do the complement */

 -d: debugging reports */

 -e: fewer IOCCC errors */

 -K: keep ambiguous #ifs */

 -k: eval constant #ifs */

 -n: add #line directives */

 -s: output symbol list */

 -S: output symbol depth */

 -t: this is a text file */

 symbol name */

 -Dsym=value */

 -iDsym or -iUsym */

 number of symbols */

 input file pointer */

 input file name */

 current line number */

 output file pointer */

 output file name */

 output overwrites input */

 used when overwriting */

 input buffer plus space */

 used for editing #elif's */

 input file format */

 comment parser state */

 #if line parser state */

 #if processor state */

 ignore comments state */

 start of current #if */

 current #if nesting */

 count of deleted lines */

 count of blank lines */

 maximum recent blankcount */

 constant #if expression */

 to format symdepth output */

 ditto */

 program exit status */

/*

 * The main program.

 treat stuff controlled by these symbols as text */

			/*

			 * For strict backwards-compatibility the U or D

			 * should be immediately after the -i but it doesn't

			 * matter much if we relax that requirement.

 define a symbol */

 undef a symbol */

 no-op for compatibility with cpp */

 blank deleted lines instead of omitting them */

 backwards compatibility */

 compress blank lines around removed section */

 treat -D as -U and vice versa */

 fewer errors from dodgy lines */

 keep ambiguous #ifs */

 process constant #ifs */

 add #line directive after deleted lines */

 output to a file */

 only output list of symbols that control #ifs */

 list symbols with their nesting depth */

 don't parse C comments */

 print version */

 bug */

/*

 * A state transition function alters the global #if processing state

 * in a particular way. The table below is indexed by the current

 * processing state and the type of the current line.

 *

 * Nesting is handled by keeping a stack of states; some transition

 * functions increase or decrease the depth. They also maintain the

 * ignore state on a stack. In some complicated cases they have to

 * alter the preprocessor directive, as follows.

 *

 * When we have processed a group that starts off with a known-false

 * #if/#elif sequence (which has therefore been deleted) followed by a

 * #elif that we don't understand and therefore must keep, we edit the

 * latter into a #if to keep the nesting correct. We use memcpy() to

 * overwrite the 4 byte token "elif" with "if  " without a '\0' byte.

 *

 * When we find a true #elif in a group, the following block will

 * always be kept and the rest of the sequence after the next #elif or

 * #else will be discarded. We edit the #elif into a #else and the

 * following directive to #endif since this has the desired behaviour.

 *

 * "Dodgy" directives are split across multiple lines, the most common

 * example being a multi-line comment hanging off the right of the

 * directive. We can handle them correctly only if there is no change

 * from printing to dropping (or vice versa) caused by that directive.

 * If the directive is the first of a group we have a choice between

 * failing with an error, or passing it through unchanged instead of

 * evaluating it. The latter is not the default to avoid questions from

 * users about unifdef unexpectedly leaving behind preprocessor directives.

 report an error */

 plain line handling */

 output lacks group's start line */

 print/pass this block */

 discard this block */

 first line of group */

 variable pedantry for obfuscated lines */

 ignore comments in this block */

 modify this line */

 IS_OUTSIDE */

 IS_FALSE_PREFIX */

 IS_TRUE_PREFIX */

 IS_PASS_MIDDLE */

 IS_FALSE_MIDDLE */

 IS_TRUE_MIDDLE */

 IS_PASS_ELSE */

 IS_FALSE_ELSE */

 IS_TRUE_ELSE */

 IS_FALSE_TRAILER */

/*TRUEI  FALSEI IF     TRUE   FALSE  ELIF   ELTRUE ELFALSE ELSE  ENDIF

  TRUEI  FALSEI IF     TRUE   FALSE  ELIF   ELTRUE ELFALSE ELSE  ENDIF (DODGY)

/*

 * State machine utility functions

 bug */

 bug */

 bug */

/*

 * Write a line to the output or not, according to command line options.

/*

 * The driver for the state machine.

	/* When compressing blank lines, act as if the file

/*

 * Flush the output and handle errors.

/*

 * Clean up and exit.

/*

 * Parse a line and determine its type. We keep the preprocessor line

 * parser state between calls in the global variable linestate, with

 * help from skipcomment().

 no way can we deal with a continuation inside a keyword */

		/* skipcomment normally changes the state, except

		   if the last line of the file lacks a newline, or

 append the missing newline */

/*

 * These are the binary operators that are supported by the expression

 * evaluator.

/*

 * An evaluation function takes three arguments, as follows: (1) a pointer to

 * an element of the precedence table which lists the operators at the current

 * level of precedence; (2) a pointer to an integer which will receive the

 * value of the expression; and (3) a pointer to a char* that points to the

 * expression to be evaluated and that is updated to the end of the expression

 * when evaluation is complete. The function returns LT_FALSE if the value of

 * the expression is zero, LT_TRUE if it is non-zero, LT_IF if the expression

 * depends on an unknown symbol, or LT_ERROR if there is a parse failure.

/*

 * The precedence table. Expressions involving binary operators are evaluated

 * in a table-driven way by eval_table. When it evaluates a subexpression it

 * calls the inner function with its first argument pointing to the next

 * element of the table. Innermost expressions have special non-table-driven

 * handling.

/*

 * Function for evaluating the innermost parts of expressions,

 * viz. !expr (expr) number defined(symbol) symbol

 * We reset the constexpr flag in the last two cases.

/*

 * Table-driven evaluation of binary operators.

/*

 * Evaluate the expression on a #if or #elif line. If we can work out

 * the result we return LT_TRUE or LT_FALSE accordingly, otherwise we

 * return just a generic LT_IF.

/*

 * Skip over comments, strings, and character literals and stop at the

 * next character position that is not whitespace. Between calls we keep

 * the comment state in the global variable incomment, and we also adjust

 * the global variable linestate when we see a newline.

 * XXX: doesn't cope with the buffer splitting inside a state transition.

 don't reset to LS_START after a line continuation */

			} else if (strncmp(cp, "/*", 2) == 0) {

				incomment = C_COMMENT;

				cp += 2;

			} else if (strncmp(cp, "//", 2) == 0) {

				incomment = CXX_COMMENT;

				cp += 2;

			} else if (strncmp(cp, "\'", 1) == 0) {

				incomment = CHAR_LITERAL;

				linestate = LS_DIRTY;

				cp += 1;

			} else if (strncmp(cp, "\"", 1) == 0) {

				incomment = STRING_LITERAL;

				linestate = LS_DIRTY;

				cp += 1;

			} else if (strncmp(cp, "\n", 1) == 0) {

				linestate = LS_START;

				cp += 1;

			} else if (strchr(" \r\t", *cp) != NULL) {

				cp += 1;

			} else

				return (cp);

			continue;

		case CXX_COMMENT:

			if (strncmp(cp, "\n", 1) == 0) {

				incomment = NO_COMMENT;

				linestate = LS_START;

			}

			cp += 1;

			continue;

		case CHAR_LITERAL:

		case STRING_LITERAL:

			if ((incomment == CHAR_LITERAL && cp[0] == '\'') ||

			    (incomment == STRING_LITERAL && cp[0] == '\"')) {

				incomment = NO_COMMENT;

				cp += 1;

			} else if (cp[0] == '\\') {

				if (cp[1] == '\0')

					cp += 1;

				else

					cp += 2;

			} else if (strncmp(cp, "\n", 1) == 0) {

				if (incomment == CHAR_LITERAL)

					error("unterminated char literal");

				else

					error("unterminated string literal");

			} else

				cp += 1;

			continue;

		case C_COMMENT:

			if (strncmp(cp, "*\\\r\n", 4) == 0) {

				incomment = FINISHING_COMMENT;

				cp += 4;

			} else if (strncmp(cp, "*\\\n", 3) == 0) {

				incomment = FINISHING_COMMENT;

				cp += 3;

 bug */

/*

 * Skip macro arguments.

 Rewind and re-detect the syntax error later. */

/*

 * Skip over an identifier.

/*

 * Look for the symbol in the symbol table. If it is found, we return

 * the symbol table index, else we return -1.

 we don't care about the value of the symbol */

/*

 * Add a symbol to the symbol table.

/*

 * Compare s with n characters of t.

 * The same as strncmp() except that it checks that s[n] == '\0'.

/*

 * Diagnostics.

 SPDX-License-Identifier: GPL-2.0-or-later

/* Simplified ASN.1 notation parser

 *

 * Copyright (C) 2012 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

 EOC goes first */

 14 */

 15 */

 14 */

 15 */

 31 */

debug("cmp(%s,%s) = ", token->content, dir);

debug("%d [cmp]\n", val);

debug("0\n");

debug("%d\n", (int)dlen - (int)token->size);

 shorter -> negative */

/*

 * Tokenise an ASN.1 grammar

	/* Assume we're going to have half as many tokens as we have

	 * characters

 First of all, break out a line */

 Remove "--" comments */

 Found a comment; see if there's a terminator */

 There is - excise the comment */

 Skip white space */

 Handle string tokens */

				/* Can be a directive, type name or element

				 * name.  Find the end of the name.

				/* If it begins with a lowercase letter then

				 * it's an element name

				/* Otherwise we need to search the directive

				 * table

 Handle numbers */

 Find the end of the number */

/*

 *

/*

 * Build up a list of types and a sorted index to that list.

/*

 * Parse the token stream

 Parse one type definition statement at a time */

/*

 * Parse one type definition statement

 Extract the tag value if one given */

 Handle implicit and explicit markers */

 Extract the type we're expecting here */

 Handle elements that are optional */

/*

 * Parse a compound type list

/*

 * Render the grammar into a state machine definition.

	fprintf(hdr, "/*\n");

	fprintf(hdr, " * Automatically generated by asn1_compiler.  Do not edit\n");

	fprintf(hdr, " *\n");

	fprintf(hdr, " * ASN.1 parser for %s\n", grammar_name);

	fprintf(out, "/*\n");

	fprintf(out, " * Automatically generated by asn1_compiler.  Do not edit\n");

	fprintf(out, " *\n");

	fprintf(out, " * ASN.1 parser for %s\n", grammar_name);

 Tabulate the action functions we might have to call */

 We do two passes - the first one calculates all the offsets */

 And then we actually render */

/*

 * Render the out-of-line elements

/*

 * Render an element.

 %s\n", e->type_def->name->content);

 Render the operation */

 %s", e->name->content);

 %s", x->name->content);

 Render the tag */

 Deal with compound types */

			/* Render out-of-line for multiple use or

 --> %s",

 Render inline for single use */

			/* Render out-of-line for multiple use or

 --> %s",

 Render inline for single use */

		/* I can't think of a nice way to do SET support without having

		 * a stack of bitmasks to make sure no element is repeated.

		 * The bitmask has also to be checked that no non-optional

		 * elements are left out whilst not preventing optional

		 * elements from being left out.

/* Sign a module file using the given key.

 *

 * Copyright © 2014-2016 Red Hat, Inc. All Rights Reserved.

 * Copyright © 2015      Intel Corporation.

 * Copyright © 2016      Hewlett Packard Enterprise Development LP

 *

 * Authors: David Howells <dhowells@redhat.com>

 *          David Woodhouse <dwmw2@infradead.org>

 *          Juerg Haefliger <juerg.haefliger@hpe.com>

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU Lesser General Public License

 * as published by the Free Software Foundation; either version 2.1

 * of the licence, or (at your option) any later version.

/*

 * Use CMS if we have openssl-1.0.0 or newer available - otherwise we have to

 * assume that it's not available and its header file is missing and that we

 * should use PKCS#7 instead.  Switching to the older PKCS#7 format restricts

 * the options we have on specifying the X.509 certificate we want.

 *

 * Further, older versions of OpenSSL don't support manually adding signers to

 * the PKCS#7 message so have to accept that we get a certificate included in

 * the signature message.  Nor do such older versions of OpenSSL support

 * signing with anything other than SHA1 - so we're stuck with that if such is

 * the case.

 Public-key crypto algorithm [0] */

 Digest algorithm [0] */

 Key identifier type [PKEY_ID_PKCS7] */

 Length of signer's name [0] */

 Length of key identifier [0] */

 Length of signature data */

 If it's wrong, don't keep trying it. */

 Look at the first two bytes of the file to determine the encoding */

 Assume raw DER encoded X.509 */

 Assume PEM encoded X.509 */

 Open the module file */

		/* Read the private key and the X.509 cert the PKCS#7 message

		 * will point to.

 Digest the module data. */

 Load the signature message from the digest buffer. */

	/* Open the destination file now so that we can shovel the module data

	 * across as we read it.

 Append the marker and the PKCS#7 message to the destination file */

		/* Read the raw signature file and write the data to the

		 * destination file

 Finally, if we're signing in place, replace the original. */

www.gnu.org/software/make/manual/html_node/POSIX-Jobserver.html#POSIX-Jobserver

/* Write the contents of the <certfile> into kernel symbol system_extra_cert

 *

 * Copyright (C) IBM Corporation, 2015

 *

 * Author: Mehmet Kayaalp <mkayaalp@linux.vnet.ibm.com>

 *

 * This software may be used and distributed according to the terms

 * of the GNU General Public License, incorporated herein by reference.

 *

 * Usage: insert-sys-cert [-s <System.map> -b <vmlinux> -c <certfile>

 If the existing cert is the same, don't overwrite */

old-headers := $(wildcard $(obj)/*.h)

unwanted    := $(filter-out $(generic-y) $(generated-y),$(old-headers))



quiet_cmd_wrap = WRAP    $@

      cmd_wrap = echo "\#include <asm-generic/$*.h>" > $@



quiet_cmd_remove = REMOVE  $(unwanted)

      cmd_remove = rm -f $(unwanted)



all: $(generic-y)

	$(if $(unwanted),$(call cmd,remove))

	@:



$(obj)/%.h:

	$(call cmd,wrap)



# Create output directory. Skip it if at least one old header exists

# since we know the output directory already exists.

ifeq ($(old-headers),)

$(shell mkdir -p $(obj))

endif



.PHONY: $(PHONY)

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 * mdp - make dummy policy

 *

 * When pointed at a kernel tree, builds a dummy policy for that kernel

 * with exactly one type with full rights to itself.

 *

 * Copyright (C) IBM Corporation, 2006

 *

 * Authors: Serge E. Hallyn <serue@us.ibm.com>

 NOTE: we really do want to use the kernel headers here */

 Class/perm mapping support */

 print out the classes */

 print out the sids */

 print out the class permissions */

 print out mls declarations and constraints */

			/*

			 * This requires all subjects and objects to be

			 * single-level (l2 eq h2), and that the subject

			 * level dominate the object level (h1 dom h2)

			 * in order to have any permissions to it.

 enable all policy capabilities */

 types, roles, and allows */

 default sids */

	/*

	 * Filesystems whose inode labels can be fetched via getxattr.

	/*

	 * Filesystems whose inodes are labeled from allocating task.

	/*

	 * Filesystems whose inode labels are computed from both

	 * the allocating task and the superblock label.

	/*

	 * Filesystems whose inodes are labeled from path prefix match

	 * relative to the filesystem root.  Depending on the filesystem,

	 * only a single label for all inodes may be supported.  Here

	 * we list the filesystem types for which per-file labeling is

	 * supported using genfscon; any other filesystem type can also

	 * be added by only with a single entry for all of its inodes.

 SPDX-License-Identifier: GPL-2.0

 NOTE: we really do want to use the kernel headers here */

 This file is automatically generated.  Do not edit. */\n");

 This file is automatically generated.  Do not edit. */\n");

 SPDX-License-Identifier: GPL-2.0-only

 According to rth, c99 defines "_Bool", "__restrict", "__restrict__", "restrict".  KAO

 c11 keywords that can be used at module scope

 attribute commented out in modutils 2.4.2.  People are using 'attribute' as a

 field name which breaks the genksyms parser.  It is not a gcc keyword anyway.

 KAO. },

 { "attribute", ATTRIBUTE_KEYW },

 SPDX-License-Identifier: GPL-2.0-or-later

/* Generate kernel symbol version hashes.

   Copyright 1996, 1997 Linux International.



   New implementation contributed by Richard Henderson <rth@tamu.edu>

   Based on original work by Bjorn Ekwall <bj0rn@blox.se>



   This file was part of the Linux modutils 2.4.22: moved back into the

   kernel sources by Rusty Russell/Kai Germaschewski.



 __GNU_LIBRARY__ */

----------------------------------------------------------------------*/

----------------------------------------------------------------------*/

----------------------------------------------------------------------*/

	/* The parser adds symbols in the order their declaration completes,

	 * so it is safe to store the value of the previous enum constant in

	 * a static variable.

 Anonymous enum definition, nothing more to do */

 fall through */ ;

----------------------------------------------------------------------*/

 FIXME: Bad reference files can segfault here. */

 Used as a linker script. */

----------------------------------------------------------------------*/

 __GNU_LIBRARY__ */

 __GNU_LIBRARY__ */

 __GNU_LIBRARY__ */

 __GNU_LIBRARY__ */

 setlinebuf(debugfile); */

/*

 * Copyright 2012-2016 by the PaX Team <pageexec@freemail.hu>

 * Copyright 2016 by Emese Revfy <re.emese@gmail.com>

 * Licensed under the GPL v2

 *

 * Note: the choice of the license means that the compilation process is

 *       NOT 'eligible' as defined by gcc's library exception to the GPL v3,

 *       but for the kernel it doesn't matter since it doesn't link against

 *       any of the gcc libraries

 *

 * This gcc plugin helps generate a little bit of entropy from program state,

 * used throughout the uptime of the kernel. Here is an instrumentation example:

 *

 * before:

 * void __latent_entropy test(int argc, char *argv[])

 * {

 *	if (argc <= 1)

 *		printf("%s: no command arguments :(\n", *argv);

 *	else

 *		printf("%s: %d command arguments!\n", *argv, args - 1);

 * }

 *

 * after:

 * void __latent_entropy test(int argc, char *argv[])

 * {

 *	// latent_entropy_execute() 1.

 *	unsigned long local_entropy;

 *	// init_local_entropy() 1.

 *	void *local_entropy_frameaddr;

 *	// init_local_entropy() 3.

 *	unsigned long tmp_latent_entropy;

 *

 *	// init_local_entropy() 2.

 *	local_entropy_frameaddr = __builtin_frame_address(0);

 *	local_entropy = (unsigned long) local_entropy_frameaddr;

 *

 *	// init_local_entropy() 4.

 *	tmp_latent_entropy = latent_entropy;

 *	// init_local_entropy() 5.

 *	local_entropy ^= tmp_latent_entropy;

 *

 *	// latent_entropy_execute() 3.

 *	if (argc <= 1) {

 *		// perturb_local_entropy()

 *		local_entropy += 4623067384293424948;

 *		printf("%s: no command arguments :(\n", *argv);

 *		// perturb_local_entropy()

 *	} else {

 *		local_entropy ^= 3896280633962944730;

 *		printf("%s: %d command arguments!\n", *argv, args - 1);

 *	}

 *

 *	// latent_entropy_execute() 4.

 *	tmp_latent_entropy = rol(tmp_latent_entropy, local_entropy);

 *	latent_entropy = tmp_latent_entropy;

 * }

 *

 * TODO:

 * - add ipa pass to identify not explicitly marked candidate functions

 * - mix in more program state (function arguments/return values,

 *   loop variables, etc)

 * - more instrumentation control via attribute parameters

 *

 * BUGS:

 * - none known

 *

 * Options:

 * -fplugin-arg-latent_entropy_plugin-disable

 *

 * Attribute: __attribute__((latent_entropy))

 *  The latent_entropy gcc attribute can be only on functions and variables.

 *  If it is on a function then the plugin will instrument it. If the attribute

 *  is on a variable then the plugin will initialize it with a random value.

 *  The variable must be an integer, an integer array type or a structure

 *  with integer fields.

/*

 * get_random_seed() (this is a GCC function) generates the seed.

 * This is a simple random generator without any cryptographic security because

 * the entropy doesn't come from here.

 Initialize the fields with random constants */

 Initialize the variable with a random constant */

			/*

			 * Initialize the elements of the array with random

			 * constants

 don't bother with noreturn functions for now */

 gcc-4.5 doesn't discover some trivial noreturn functions */

/*

 * Set up the next operation and its constant operand to use in the latent

 * entropy PRNG. When RHS is specified, the request is for perturbing the

 * local latent entropy variable, otherwise it is for perturbing the global

 * latent entropy variable where the two operands are already given by the

 * local and global latent entropy variables themselves.

 *

 * The operation is one of add/xor/rol when instrumenting the local entropy

 * variable and one of add/xor when perturbing the global entropy variable.

 * Rotation is not used for the latter case because it would transmit less

 * entropy to the global variable than the other two operations.

			/*

			 * This code limits the value of random_const to

			 * the size of a long for the rotation

 1. create temporary copy of latent_entropy */

 2. read... */

 3. ...modify... */

 4. ...write latent_entropy */

 1. create local_entropy_frameaddr */

 2. local_entropy_frameaddr = __builtin_frame_address() */

 3. create temporary copy of latent_entropy */

 4. read the global entropy variable into local entropy */

 5. mix local_entropy_frameaddr into local entropy */

 prepare for step 2 below */

 1. create the local entropy variable */

 2. initialize the local entropy variable */

	/*

	 * 3. instrument each BB with an operation on the

	 *    local entropy variable

 4. mix local entropy into the global entropy variable */

 extern volatile unsigned long latent_entropy */

/*

 * Copyright 2014-2016 by Open Source Security, Inc., Brad Spengler <spender@grsecurity.net>

 *                   and PaX Team <pageexec@freemail.hu>

 * Licensed under the GPL v2

 *

 * Note: the choice of the license means that the compilation process is

 *       NOT 'eligible' as defined by gcc's library exception to the GPL v3,

 *       but for the kernel it doesn't matter since it doesn't link against

 *       any of the gcc libraries

 *

 * Usage:

 * $ # for 4.5/4.6/C based 4.7

 * $ gcc -I`gcc -print-file-name=plugin`/include -I`gcc -print-file-name=plugin`/include/c-family -fPIC -shared -O2 -o randomize_layout_plugin.so randomize_layout_plugin.c

 * $ # for C++ based 4.7/4.8+

 * $ g++ -I`g++ -print-file-name=plugin`/include -I`g++ -print-file-name=plugin`/include/c-family -fPIC -shared -O2 -o randomize_layout_plugin.so randomize_layout_plugin.c

 * $ gcc -fplugin=./randomize_layout_plugin.so test.c -O2

 NIU overloads mapping with page struct */

 unix_skb_parms via UNIXCB() buffer */

 big_key payload.data struct splashing */

 walk struct security_hook_heads as an array of struct hlist_head */

 from old Linux dcache.h */

 set on complete types that we don't need to inspect further at all */

/*

 * set on types that we've performed a shuffle on, to prevent re-shuffling

 * this does not preclude us from inspecting its fields for potential shuffles

/*

 * 64bit variant of Bob Jenkins' public domain PRNG

 * 256 bits of internal state

 we could handle this case differently if desired

 modern in-place Fisher-Yates shuffle */

 size of type is represented in bits */

 Workaround for 3rd-party VirtualBox source that we can't modify ourselves */

 throw out any structs in uapi */

	/*

	 * enforce that we don't randomize the layout of the last

	 * element of a struct if it's a 0 or 1-length array

	 * or a proper flexible array

	/*

	 * set up a bogus anonymous struct field designed to error out on unnamed struct initializers

	 * as gcc provides no other way to detect such code

 to satisfy the constify plugin

	/*

	 * force a re-layout of the main variant

	 * the TYPE_SIZE for all variants will be recomputed

	 * by finalize_type_size()

 from constify plugin */

 from constify plugin */

 derived from constify plugin */

		/* pipacs' plugin creates franken-arrays that differ from those produced by

 derived from the constify plugin */

/*

 * iterate over all statements to find "bad" casts:

 * those where the address of the start of a structure is cast

 * to a pointer of a structure of a different type, or a

 * structure pointer type is cast to a different structure pointer type

 skip bogus type casts introduced by container_of */

/*

 * Copyright 2013-2017 by PaX Team <pageexec@freemail.hu>

 * Licensed under the GPL v2

 *

 * Note: the choice of the license means that the compilation process is

 *       NOT 'eligible' as defined by gcc's library exception to the GPL v3,

 *       but for the kernel it doesn't matter since it doesn't link against

 *       any of the gcc libraries

 *

 * gcc plugin to forcibly initialize certain local variables that could

 * otherwise leak kernel stack to userland if they aren't properly initialized

 * by later code

 *

 * Homepage: https://pax.grsecurity.net/

 *

 * Options:

 * -fplugin-arg-structleak_plugin-disable

 * -fplugin-arg-structleak_plugin-verbose

 * -fplugin-arg-structleak_plugin-byref

 * -fplugin-arg-structleak_plugin-byref-all

 *

 * Usage:

 * $ # for 4.5/4.6/C based 4.7

 * $ gcc -I`gcc -print-file-name=plugin`/include -I`gcc -print-file-name=plugin`/include/c-family -fPIC -shared -O2 -o structleak_plugin.so structleak_plugin.c

 * $ # for C++ based 4.7/4.8+

 * $ g++ -I`g++ -print-file-name=plugin`/include -I`g++ -print-file-name=plugin`/include/c-family -fPIC -shared -O2 -o structleak_plugin.so structleak_plugin.c

 * $ gcc -fplugin=./structleak_plugin.so test.c -O2

 *

 * TODO: eliminate redundant initializers

 unused C type flag in all versions 4.5-6 */

 check for types? for now accept everything linux has to offer */

 this is the original entry bb before the forced split */

 first check if variable is already initialized, warn otherwise */

 we're looking for an assignment of a single rhs... */

 ... of a non-clobbering expression... */

 ... to our variable... */

 if it's an initializer then we're good */

 these aren't the 0days you're looking for */

 build the initializer expression */

 build the initializer stmt */

 split the first bb where we can put the forced initializers */

 enumerate all local variables and forcibly initialize our targets */

 only care about structure types unless byref-all */

 if the type is of interest, examine the variable */

/*

 * Copyright 2011-2017 by the PaX Team <pageexec@freemail.hu>

 * Modified by Alexander Popov <alex.popov@linux.com>

 * Licensed under the GPL v2

 *

 * Note: the choice of the license means that the compilation process is

 * NOT 'eligible' as defined by gcc's library exception to the GPL v3,

 * but for the kernel it doesn't matter since it doesn't link against

 * any of the gcc libraries

 *

 * This gcc plugin is needed for tracking the lowest border of the kernel stack.

 * It instruments the kernel code inserting stackleak_track_stack() calls:

 *  - after alloca();

 *  - for the functions with a stack frame size greater than or equal

 *     to the "track-min-size" plugin parameter.

 *

 * This plugin is ported from grsecurity/PaX. For more information see:

 *   https://grsecurity.net/

 *   https://pax.grsecurity.net/

 *

 * Debugging:

 *  - use fprintf() to stderr, debug_generic_expr(), debug_gimple_stmt(),

 *     print_rtl_single() and debug_rtx();

 *  - add "-fdump-tree-all -fdump-rtl-all" to the plugin CFLAGS in

 *     Makefile.gcc-plugins to see the verbose dumps of the gcc passes;

 *  - use gcc -E to understand the preprocessing shenanigans;

 *  - use gcc with enabled CFG/GIMPLE/SSA verification (--enable-checking).

/*

 * Mark these global variables (roots) for gcc garbage collector since

 * they point to the garbage-collected memory.

 Insert calling stackleak_track_stack() */

 Update the cgraph */

 'no_caller_saved_registers' is currently supported only for x86 */

	/*

	 * Insert calling stackleak_track_stack() in asm:

	 *   asm volatile("call stackleak_track_stack"

	 *		  :: "r" (current_stack_pointer))

	 * Use ASM_CALL_CONSTRAINT trick from arch/x86/include/asm/asm.h.

	 * This constraint is taken into account during gcc shrink-wrapping

	 * optimization. It is needed to be sure that stackleak_track_stack()

	 * call is inserted after the prologue of the containing function,

	 * when the stack frame is prepared.

	/*

	 * The 'no_caller_saved_registers' attribute is used for

	 * stackleak_track_stack(). If the compiler supports this attribute for

	 * the target arch, we can add calling stackleak_track_stack() in asm.

	 * That improves performance: we avoid useless operations with the

	 * caller-saved registers in the functions from which we will remove

	 * stackleak_track_stack() call during the stackleak_cleanup pass.

/*

 * Work with the GIMPLE representation of the code. Insert the

 * stackleak_track_stack() call after alloca() and into the beginning

 * of the function if it is not instrumented.

	/*

	 * ENTRY_BLOCK_PTR is a basic block which represents possible entry

	 * point of a function. This block does not contain any code and

	 * has a CFG edge to its successor.

	/*

	 * Loop through the GIMPLE statements in each of cfun basic blocks.

	 * cfun is a global variable which represents the function that is

	 * currently processed.

 Leaf function is a function which makes no calls */

 Insert stackleak_track_stack() call after alloca() */

	/*

	 * Special cases to skip the instrumentation.

	 *

	 * Taking the address of static inline functions materializes them,

	 * but we mustn't instrument some of them as the resulting stack

	 * alignment required by the function call ABI will break other

	 * assumptions regarding the expected (but not otherwise enforced)

	 * register clobbering ABI.

	 *

	 * Case in point: native_save_fl on amd64 when optimized for size

	 * clobbers rdx if it were instrumented here.

	 *

	 * TODO: any more special cases?

 Insert stackleak_track_stack() call at the function beginning */

		/* gcc_assert(bb_loop_depth(bb) ||

	/*

	 * Find stackleak_track_stack() calls. Loop through the chain of insns,

	 * which is an RTL representation of the code for a function.

	 *

	 * The example of a matching insn:

	 *  (call_insn 8 4 10 2 (call (mem (symbol_ref ("stackleak_track_stack")

	 *  [flags 0x41] <function_decl 0x7f7cd3302a80 stackleak_track_stack>)

	 *  [0 stackleak_track_stack S1 A8]) (0)) 675 {*call} (expr_list

	 *  (symbol_ref ("stackleak_track_stack") [flags 0x41] <function_decl

	 *  0x7f7cd3302a80 stackleak_track_stack>) (expr_list (0) (nil))) (nil))

 Check the expression code of the insn */

		/*

		 * Check the expression code of the insn body, which is an RTL

		 * Expression (RTX) describing the side effect performed by

		 * that insn.

		/*

		 * Check the first operand of the call expression. It should

		 * be a mem RTX describing the needed subroutine with a

		 * symbol_ref RTX.

 Delete the stackleak_track_stack() call */

 'no_caller_saved_registers' is currently supported only for x86 */

	/*

	 * Find stackleak_track_stack() asm calls. Loop through the chain of

	 * insns, which is an RTL representation of the code for a function.

	 *

	 * The example of a matching insn:

	 *  (insn 11 5 12 2 (parallel [ (asm_operands/v

	 *  ("call stackleak_track_stack") ("") 0

	 *  [ (reg/v:DI 7 sp [ current_stack_pointer ]) ]

	 *  [ (asm_input:DI ("r")) ] [])

	 *  (clobber (reg:CC 17 flags)) ]) -1 (nil))

 Check the expression code of the insn */

		/*

		 * Check the expression code of the insn body, which is an RTL

		 * Expression (RTX) describing the side effect performed by

		 * that insn.

/*

 * Work with the RTL representation of the code.

 * Remove the unneeded stackleak_track_stack() calls from the functions

 * which don't call alloca() and don't have a large enough stack frame size.

	/*

	 * Leave stack tracking in functions that call alloca().

	 * Additional case:

	 *   gcc before version 7 called allocate_dynamic_stack_space() from

	 *   expand_stack_vars() for runtime alignment of constant-sized stack

	 *   variables. That caused cfun->calls_alloca to be set for functions

	 *   that in fact don't use alloca().

	 *   For more info see gcc commit 7072df0aae0c59ae437e.

	 *   Let's leave such functions instrumented as well.

 Leave stack tracking in functions with large stack frame */

 Build the function declaration for stackleak_track_stack() */

 void stackleak_track_stack(void) */

 for LTO */

/*

 * Pass gate function is a predicate function that gets executed before the

 * corresponding pass. If the return value is 'true' the pass gets executed,

 * otherwise, it is skipped.

/*

 * Every gcc plugin exports a plugin_init() function that is called right

 * after the plugin is loaded. This function is responsible for registering

 * the plugin callbacks and doing other required initialization.

 Extra GGC root tables describing our GTY-ed data */

	/*

	 * The stackleak_instrument pass should be executed before the

	 * "optimized" pass, which is the control flow graph cleanup that is

	 * performed just before expanding gcc trees to the RTL. In former

	 * versions of the plugin this new pass was inserted before the

	 * "tree_profile" pass, which is currently called "profile".

	/*

	 * The stackleak_cleanup pass should be executed before the "*free_cfg"

	 * pass. It's the moment when the stack frame size is already final,

	 * function prologues and epilogues are generated, and the

	 * machine-dependent code transformations are not done.

 Parse the plugin arguments */

 Give the information about the plugin */

 Register to be called before processing a translation unit */

 Register an extra GCC garbage collector (GGC) root table */

	/*

	 * Hook into the Pass Manager to register new gcc passes.

	 *

	 * The stack frame size info is available only at the last RTL pass,

	 * when it's too late to insert complex code like a function call.

	 * So we register two gcc passes to instrument every function at first

	 * and remove the unneeded instrumentation later.

 SPDX-License-Identifier: GPL-2.0

		/*

		 * Find a SET insn involving a SYMBOL_REF to __stack_chk_guard

		/*

		 * Replace the source of the SET insn with an expression that

		 * produces the address of the current task's stack canary value

 all remaining options require a value */

/*

 * Copyright 2011-2016 by Emese Revfy <re.emese@gmail.com>

 * Licensed under the GPL v2, or (at your option) v3

 *

 * Homepage:

 * https://github.com/ephox-gcc-plugins/sancov

 *

 * This plugin inserts a __sanitizer_cov_trace_pc() call at the start of basic blocks.

 * It supports all gcc versions with plugin support (from gcc-4.5 on).

 * It is based on the commit "Add fuzzing coverage support" by Dmitry Vyukov <dvyukov@google.com>.

 *

 * You can read about it more here:

 *  https://gcc.gnu.org/viewcvs/gcc?limit_changes=0&view=revision&revision=231296

 *  https://lwn.net/Articles/674854/

 *  https://github.com/google/syzkaller

 *  https://lwn.net/Articles/677764/

 *

 * Usage:

 * make run

	/* Remove this line when this plugin and kcov will be in the kernel.

	if (!strcmp(DECL_NAME_POINTER(current_function_decl), DECL_NAME_POINTER(sancov_fndecl)))

		return 0;

 BBs can be split afterwards?? */

/*

 * "Optimize" a list of dependencies as spit out by gcc -MD

 * for the kernel build

 * ===========================================================================

 *

 * Author       Kai Germaschewski

 * Copyright    2002 by Kai Germaschewski  <kai.germaschewski@gmx.de>

 *

 * This software may be used and distributed according to the terms

 * of the GNU General Public License, incorporated herein by reference.

 *

 *

 * Introduction:

 *

 * gcc produces a very nice and correct list of dependencies which

 * tells make when to remake a file.

 *

 * To use this list as-is however has the drawback that virtually

 * every file in the kernel includes autoconf.h.

 *

 * If the user re-runs make *config, autoconf.h will be

 * regenerated.  make notices that and will rebuild every file which

 * includes autoconf.h, i.e. basically all files. This is extremely

 * annoying if the user just changed CONFIG_HIS_DRIVER from n to m.

 *

 * So we play the same trick that "mkdep" played before. We replace

 * the dependency on autoconf.h by a dependency on every config

 * option which is mentioned in any of the listed prerequisites.

 *

 * kconfig populates a tree in include/config/ with an empty file

 * for each config symbol and when the configuration is updated

 * the files representing changed config options are touched

 * which then let make pick up the changes and the files that use

 * the config symbols are rebuilt.

 *

 * So if the user changes his CONFIG_HIS_DRIVER option, only the objects

 * which depend on "include/config/HIS_DRIVER" will be rebuilt,

 * so most likely only his driver ;-)

 *

 * The idea above dates, by the way, back to Michael E Chastain, AFAIK.

 *

 * So to get dependencies right, there are two issues:

 * o if any of the files the compiler read changed, we need to rebuild

 * o if the command line given to the compile the file changed, we

 *   better rebuild as well.

 *

 * The former is handled by using the -MD output, the later by saving

 * the command line used to compile the old object and comparing it

 * to the one we would now use.

 *

 * Again, also this idea is pretty old and has been discussed on

 * kbuild-devel a long time ago. I don't have a sensibly working

 * internet connection right now, so I rather don't mention names

 * without double checking.

 *

 * This code here has been based partially based on mkdep.c, which

 * says the following about its history:

 *

 *   Copyright abandoned, Michael Chastain, <mailto:mec@shout.net>.

 *   This is a C version of syncdep.pl by Werner Almesberger.

 *

 *

 * It is invoked as

 *

 *   fixdep <depfile> <target> <cmdline>

 *

 * and will read the dependency file <depfile>

 *

 * The transformed dependency snipped is written to stdout.

 *

 * It first generates a line

 *

 *   cmd_<target> = <cmdline>

 *

 * and then basically copies the .<target>.d file to stdout, in the

 * process filtering out the dependency on autoconf.h and adding

 * dependencies on include/config/MY_OPTION for every

 * CONFIG_MY_OPTION encountered in any of the prerequisites.

 *

 * We don't even try to really parse the header files, but

 * merely grep, i.e. if CONFIG_FOO is mentioned in a comment, it will

 * be picked up as well. It's not a problem with respect to

 * correctness, since that can only give too many dependencies, thus

 * we cannot miss a rebuild. Since people tend to not mention totally

 * unrelated CONFIG_ options all over the place, it's not an

 * efficiency problem either.

 *

 * (Note: it'd be easy to port over the complete mkdep state machine,

 *  but I don't think the added complexity is worth it)

/*

 * In the intended usage of this program, the stdout is redirected to .*.cmd

 * files. The return value of printf() must be checked to catch any error,

 * e.g. "No space left on device".

 fnv32 hash */

/*

 * Lookup a value in the configuration string.

/*

 * Add a new value to the configuration string.

/*

 * Record the use of a CONFIG_* word.

 Print out a dependency path from a symbol name. */

 test if s ends in sub */

 Ignore certain dependencies */

/*

 * Important: The below generated source_foo.o and deps_foo.o variable

 * assignments are parsed not only by make, but also by the rather simple

 * parser in scripts/mod/sumversion.c.

 Skip any "white space" */

 Find next "white space" */

 Is the token we found a target name? */

 Don't write any target names into the dependency file */

 The /next/ file is the first dependency */

			/*

			 * Do not list the source file as dependency, so that

			 * kbuild is not confused if a .c file is rewritten

			 * into .S or vice versa. Storing it in source_* is

			 * needed for modpost to compute srcversions.

				/*

				 * If processing the concatenation of multiple

				 * dependency files, only process the first

				 * target name, which will be the original

				 * source name, and ignore any other target

				 * names, which will be intermediate temporary

				 * files.

		/*

		 * Start searching for next token immediately after the first

		 * "whitespace" character that follows this token.

sed -e '/^DEL/d' -e 's/^\t*//' <<EOF

	Name: kernel

	Summary: The Linux Kernel

	Version: $__KERNELRELEASE

	Release: $(cat .version 2>/dev/null || echo 1)

	License: GPL

	Group: System Environment/Kernel

	Vendor: The Linux Community

	URL: https://www.kernel.org

$S	Source: kernel-$__KERNELRELEASE.tar.gz

	Provides: $PROVIDES

	%define __spec_install_post /usr/lib/rpm/brp-compress || :

	%define debug_package %{nil}



	%description

	The Linux Kernel, the operating system core itself



	%package headers

	Summary: Header files for the Linux kernel for use by glibc

	Group: Development/System

	Obsoletes: kernel-headers

	Provides: kernel-headers = %{version}

	%description headers

	Kernel-headers includes the C header files that specify the interface

	between the Linux kernel and userspace libraries and programs.  The

	header files define structures and constants that are needed for

	building most standard programs and are also needed for rebuilding the

	glibc package.



$S$M	%package devel

$S$M	Summary: Development package for building kernel modules to match the $__KERNELRELEASE kernel

$S$M	Group: System Environment/Kernel

$S$M	AutoReqProv: no

$S$M	%description -n kernel-devel

$S$M	This package provides kernel headers and makefiles sufficient to build modules

$S$M	against the $__KERNELRELEASE kernel package.

$S$M

$S	%prep

$S	%setup -q

$S

$S	%build

$S	$MAKE %{?_smp_mflags} KBUILD_BUILD_VERSION=%{release}

$S

	%install

	mkdir -p %{buildroot}/boot

	%ifarch ia64

	mkdir -p %{buildroot}/boot/efi

	cp \$($MAKE image_name) %{buildroot}/boot/efi/vmlinuz-$KERNELRELEASE

	ln -s efi/vmlinuz-$KERNELRELEASE %{buildroot}/boot/

	%else

	cp \$($MAKE image_name) %{buildroot}/boot/vmlinuz-$KERNELRELEASE

	%endif

$M	$MAKE %{?_smp_mflags} INSTALL_MOD_PATH=%{buildroot} modules_install

	$MAKE %{?_smp_mflags} INSTALL_HDR_PATH=%{buildroot}/usr headers_install

	cp System.map %{buildroot}/boot/System.map-$KERNELRELEASE

	cp .config %{buildroot}/boot/config-$KERNELRELEASE

	bzip2 -9 --keep vmlinux

	mv vmlinux.bz2 %{buildroot}/boot/vmlinux-$KERNELRELEASE.bz2

$S$M	rm -f %{buildroot}/lib/modules/$KERNELRELEASE/build

$S$M	rm -f %{buildroot}/lib/modules/$KERNELRELEASE/source

$S$M	mkdir -p %{buildroot}/usr/src/kernels/$KERNELRELEASE

$S$M	tar cf - $EXCLUDES . | tar xf - -C %{buildroot}/usr/src/kernels/$KERNELRELEASE

$S$M	cd %{buildroot}/lib/modules/$KERNELRELEASE

$S$M	ln -sf /usr/src/kernels/$KERNELRELEASE build

$S$M	ln -sf /usr/src/kernels/$KERNELRELEASE source



	%clean

	rm -rf %{buildroot}



	%post

	if [ -x /sbin/installkernel -a -r /boot/vmlinuz-$KERNELRELEASE -a -r /boot/System.map-$KERNELRELEASE ]; then

	cp /boot/vmlinuz-$KERNELRELEASE /boot/.vmlinuz-$KERNELRELEASE-rpm

	cp /boot/System.map-$KERNELRELEASE /boot/.System.map-$KERNELRELEASE-rpm

	rm -f /boot/vmlinuz-$KERNELRELEASE /boot/System.map-$KERNELRELEASE

	/sbin/installkernel $KERNELRELEASE /boot/.vmlinuz-$KERNELRELEASE-rpm /boot/.System.map-$KERNELRELEASE-rpm

	rm -f /boot/.vmlinuz-$KERNELRELEASE-rpm /boot/.System.map-$KERNELRELEASE-rpm

	fi



	%preun

	if [ -x /sbin/new-kernel-pkg ]; then

	new-kernel-pkg --remove $KERNELRELEASE --rminitrd --initrdfile=/boot/initramfs-$KERNELRELEASE.img

	elif [ -x /usr/bin/kernel-install ]; then

	kernel-install remove $KERNELRELEASE

	fi



	%postun

	if [ -x /sbin/update-bootloader ]; then

	/sbin/update-bootloader --remove $KERNELRELEASE

	fi



	%files

	%defattr (-, root, root)

$M	/lib/modules/$KERNELRELEASE

$M	%exclude /lib/modules/$KERNELRELEASE/build

$M	%exclude /lib/modules/$KERNELRELEASE/source



/* Simple code to turn various tables in an ELF file into alias definitions.

 * This deals with kernel datastructures where they should be

 * dealt with: in the kernel source.

 *

 * Copyright 2002-2003  Rusty Russell, IBM Corporation

 *           2003       Kai Germaschewski

 *

 *

 * This software may be used and distributed according to the terms

 * of the GNU General Public License, incorporated herein by reference.

/* We use the ELF typedefs for kernel_ulong_t but bite the bullet and

 backwards compatibility, don't use in new code */

/* Big exception to the "don't include kernel headers into userspace, which

 * even potentially has different endianness and word sizes, since

 This array collects all instances that use the generic do_table */

 name of table, __mod_<name>__*_device_table. */

 Size of alias provided to do_entry functions */

/* Define a variable f that holds the value of field f of struct devid

 * based at address m.

/* Define a variable v that holds the address of field f of struct devid

 * based at address m.  Due to the way typeof works, for a field of type

 * T[N] the variable has type T(*)[N], _not_ T*.

/* Define a variable f that holds the address of field f of struct devid

 * based at address m.  Due to the way typeof works, for a field of type

 * T[N] the variable has type T(*)[N], _not_ T*.

 End in a wildcard, for future extension */

/**

 * Check that sizeof(device_id type) are consistent with size of section

 * in .o file. If in-consistent then userspace and kernel does not agree

 * on actual size which is a bug.

 * Also verify that the final entry in the table is all zeros.

 * Ignore both checks if build host differ from target host and size differs.

 Verify last one is a terminator */

 USB is special because the bcdDevice can be matched against a numeric range */

 Looks like "usb:vNpNdNdcNdscNdpNicNiscNipNinN" */

 Handles increment/decrement of BCD formatted integers */

 Returns the previous value, so it works like i++ or i-- */

 If bcd is not in BCD format, just increment */

 Convert BCD to Decimal */

 force to bcd just in case */

 Do our increment/decrement */

 Convert back to BCD */

 Figure out if this entry is in bcd or hex format */

 Default to decimal format */

	/*

	 * Some modules (visor) have empty slots as placeholder for

	 * run-time specification that results in catch-all alias

 Convert numeric bcdDevice range into fnmatch-able pattern(s) */

 If we are in bcd mode, truncate if necessary */

 Leave last one: it's the terminator. */

 Replace all whitespace with underscores */

 Leave last one: it's the terminator. */

 Looks like: hid:bNvNpN */

 Looks like: ieee1394:venNmoNspNverN */

 Looks like: pci:vNdNsvNsdNbcNscNiN or <prefix>_pci:vNdNsvNsdNbcNscNiN. */

 Class field can be divided into these three. */

 looks like: "ccw:tNmNdtNdmN" */

 looks like: "ap:tN" */

 looks like: "css:tN" */

 Looks like: "serio:tyNprNidNexN" */

/* looks like: "acpi:ACPI0003" or "acpi:PNP0C0B" or "acpi:LNXVIDEO" or

 *             "acpi:bbsspp" (bb=base-class, ss=sub-class, pp=prog-if)

 *

 * NOTE: Each driver should use one of the following : _HID, _CIDs

 *       or _CLS. Also, bb, ss, and pp can be substituted with ??

 *       as don't care byte.

 looks like: "pnp:dD" */

 fix broken pnp bus lowercasing */

 looks like: "pnp:dD" for every device of the card */

 find duplicate, already added value */

 add an individual alias for every device entry */

 fix broken pnp bus lowercasing */

 Looks like: pcmcia:mNcNfNfnNpfnNvaNvbNvcNvdN. */

 Replace all whitespace with underscores */

 input:b0v0p0e0-eXkXrXaXmXlXsXfXwX where X is comma-separated %02X. */

 Looks like: parisc:tNhvNrevNsvN */

 Looks like: sdio:cNvNdN. */

 Looks like: ssb:vNidNrevN. */

 Looks like: bcma:mNidNrevNclN. */

 Looks like: virtio:dNvN */

/*

 * Looks like: vmbus:guid

 * Each byte of the guid will be represented by two hex characters

 * in the name.

 Looks like: rpmsg:S */

 Looks like: i2c:S */

 Looks like: spi:S */

 Filter out characters we don't want to see in the modalias string */

 Terminate the string */

 Looks like: zorro:iN. */

 looks like: "pnp:dD" */

 Looks like: "ipack:fNvNdN". */

/*

 * Append a match expression for a single masked hex digit.

 * outp points to a pointer to the character at which to append.

 *	*outp is updated on return to point just after the appended text,

 *	to facilitate further appending.

		/*

		 * Dumbly emit a match pattern for all possible matching

		 * digits.  This could be improved in some cases using ranges,

		 * but it has the advantage of being trivially correct, and is

		 * often optimal.

 Ensure that the string remains NUL-terminated: */

 Advance the caller's end-of-string pointer: */

/*

 * looks like: "amba:dN"

 *

 * N is exactly 8 digits, where each is an upper-case hex digit, or

 *	a ? or [] pattern matching exactly one digit.

/*

 * looks like: "mipscdmm:tN"

 *

 * N is exactly 2 digits, where each is an upper-case hex digit, or

 *	a ? or [] pattern matching exactly one digit.

/* LOOKS like cpu:type:x86,venVVVVfamFFFFmodMMMM:feature:*,FEAT,*

 * All fields are numbers. It would be nicer to use strings for vendor

 * and feature, but getting those out of the build system here is too

 * complicated.

 LOOKS like cpu:type:*:feature:*FEAT* */

 Looks like: mei:S:uuid:N:* */

 Looks like: rapidio:vNdNavNadN */

 Looks like: ulpi:vNpN */

 Looks like: hdaudio:vNrNaN */

 Looks like: sdw:mNpNvNcN */

 Looks like: fsl-mc:vNdN */

 Looks like: tbsvc:kSpNvNrN */

 Looks like: typec:idNmN */

 Looks like: tee:uuid */

 Looks like: wmi:guid */

 Looks like: mhi:S */

/*

 * Looks like: ssam:dNcNtNiNfN

 *

 * N is exactly 2 digits, where each is an upper-case hex digit.

 Looks like: dfl:tNfN */

 Does namelen bytes of name exactly match the symbol? */

 Leave last one: it's the terminator. */

/* Create MODULE_ALIAS() statements.

 * At this time, we cannot write the actual output C source yet,

 We're looking for a section relative symbol */

 We're looking for an object */

 All our symbols are of form __mod_<name>__<identifier>_device_table. */

 Handle all-NULL symbols allocated into .bss */

 First handle the "special" cases */

 Now add out buffered information to the generated C source */

 SPDX-License-Identifier: GPL-2.0

 empty file to figure out endianness / word size */

/* Postprocess module symbol versions

 *

 * Copyright 2003       Kai Germaschewski

 * Copyright 2002-2004  Rusty Russell, IBM Corporation

 * Copyright 2006-2008  Sam Ravnborg

 * Based in part on module-init-tools/depmod.c,file2alias

 *

 * This software may be used and distributed according to the terms

 * of the GNU General Public License, incorporated herein by reference.

 *

 * Usage: modpost vmlinux module1.o module2.o ...

 Are we using CONFIG_MODVERSIONS? */

 Is CONFIG_MODULE_SRCVERSION_ALL set? */

 If we are modposting external module set to 1 */

 Only warn about unresolved symbols */

 How a symbol is exported */

 ignore missing files */

 If set to 1, only warn (instead of error) about missing ns imports */

/*

 * Cut off the warnings when there are too many. This typically occurs when

 * vmlinux is missing. ('make modules' without building vmlinux.)

/* In kernel, this size is defined in linux/module.h;

 * here we use Elf_Addr instead of long for covering cross-compile

 invalid loglevel, ignore */

 do not return the unwanted extra line at EOF */

 don't use strsep here, it is not available everywhere */

 A list of all modules we processed */

 add to list */

/* A hash of all exported symbols,

 1 if symbol is not global */

 Type of export */

 This is based on the hash algorithm from gdbm, via tdb */

 Used to compute the hash value.  */

 Used to cycle through random values. */

 Set the initial value from the key size. */

/**

 * Allocate a new symbols for use in the hash of exported symbols or

 * the list of unresolved symbols per module

 For the hash of exported symbols */

 For our purposes, .foo matches foo.  PPC64 needs this. */

	/*

	 * That symbol should have been created earlier and thus this is

	 * actually an assertion.

/**

 * Add an exported symbol - it may have already been added without a

 * CRC, in this case just update the CRC

	/*

	 * Ignore stand-alone __crc_*, which might be auto-generated symbols

	 * such as __*_veneer in ARM ELF.

 file too small, assume this is an empty .o file */

 Is this a valid ELF file? */

 Not an ELF file - silently ignore it */

 Fix endianness in ELF header */

 Check if file offset is correct */

		/*

		 * There are more than 64k sections,

		 * read count from .sh_size.

 Fix endianness in section headers */

 Find symbol table. */

 32bit section no. table? ("more than 64k sections") */

 Fix endianness in symbols */

 Fix endianness */

 ignore __this_module, it will be resolved shortly */

 ignore global offset table */

 Special register function linked on all modules during final link of .ko */

 Special register function linked on all modules during final link of .ko */

 Do not ignore this symbol */

 symbol points to the CRC in the ELF object */

 Should warn here, but modpost runs before the linker */

 undefined symbol */

 Ignore register directives. */

 All exported symbols */

/**

 * Parse tag=value strings from .modinfo section

 Skip non-zero chars */

 Skip any zero padding. */

/**

 * Test if string s ends in string sub

 * return 0 if match

/* The pattern is an array of simple patterns.

 * "foo" will match an exact string equal to "foo"

 * "*foo" will match a string that ends with "foo"

 * "foo*" will match a string that begins with "foo"

 * "*foo*" will match a string that contains "foo"

 "*foo*" */

 "*foo" */

 "foo*" */

 no wildcards */

 no match */

 sections that we do not want to do full section mismatch check on */

 sh64 */

 Compressed debug sections. */

 record-gcc-switches */

 alpha, score, mips etc. */

 alpha, score, mips etc. */

 xtensa */

 xtensa */

 arc */

 arc : modules */

 EZchip */

 EZchip */

/*

 * This is used to find sections missing the SHF_ALLOC flag.

 * The cause of this is often a section specified in assembler

 * without "ax" / "aw".

 init data sections */

 all init sections */

 All init and exit sections (code + data) */

 all text sections */

 data section */

 symbols in .data that may refer to init/exit sections */

 scsi uses *_template a lot */			\

 arm uses ops structures named _timer a lot */	\

 scsi also used *_sht to some extent */		\

/**

 * Describe how to match sections on different criteria:

 *

 * @fromsec: Array of sections to be matched.

 *

 * @bad_tosec: Relocations applied to a section in @fromsec to a section in

 * this array is forbidden (black-list).  Can be empty.

 *

 * @good_tosec: Relocations applied to a section in @fromsec must be

 * targeting sections in this array (white-list).  Can be empty.

 *

 * @mismatch: Type of mismatch.

 *

 * @symbol_white_list: Do not match a relocation to a symbol in this list

 * even if it is targeting a section in @bad_to_sec.

 *

 * @handler: Specific handler to call when a match is found.  If NULL,

 * default_mismatch_handler() will be called.

 *

/* Do not reference init/exit code/data from

 * normal code and data

 Do not reference init code/data from meminit code/data */

 Do not reference exit code/data from memexit code/data */

 Do not use exit code/data from init code */

 Do not use init code/data from exit code */

 Do not export init/exit functions or data */

	/* If you're adding any new black-listed sections in here, consider

	 * adding a special 'printer' for them in scripts/check_extable.

	/*

	 * The target section could be the SHT_NUL section when we're

	 * handling relocations to un-resolved symbols, trying to match it

	 * doesn't make much sense and causes build failures on parisc

	 * architectures.

/**

 * Whitelist to allow certain references to pass with no warning.

 *

 * Pattern 1:

 *   If a module parameter is declared __initdata and permissions=0

 *   then this is legal despite the warning generated.

 *   We cannot see value of permissions here, so just ignore

 *   this pattern.

 *   The pattern is identified by:

 *   tosec   = .init.data

 *   fromsec = .data*

 *   atsym   =__param*

 *

 * Pattern 1a:

 *   module_param_call() ops can refer to __init set function if permissions=0

 *   The pattern is identified by:

 *   tosec   = .init.text

 *   fromsec = .data*

 *   atsym   = __param_ops_*

 *

 * Pattern 2:

 *   Many drivers utilise a *driver container with references to

 *   add, remove, probe functions etc.

 *   the pattern is identified by:

 *   tosec   = init or exit section

 *   fromsec = data section

 *   atsym = *driver, *_template, *_sht, *_ops, *_probe,

 *           *probe_one, *_console, *_timer

 *

 * Pattern 3:

 *   Whitelist all references from .head.text to any init section

 *

 * Pattern 4:

 *   Some symbols belong to init section but still it is ok to reference

 *   these from non-init sections as these symbols don't have any memory

 *   allocated for them and symbol address and value are same. So even

 *   if init section is freed, its ok to reference those symbols.

 *   For ex. symbols marking the init section boundaries.

 *   This pattern is identified by

 *   refsymname = __init_begin, _sinittext, _einittext

 *

 * Pattern 5:

 *   GCC may optimize static inlines when fed constant arg(s) resulting

 *   in functions like cpumask_empty() -- generating an associated symbol

 *   cpumask_empty.constprop.3 that appears in the audit.  If the const that

 *   is passed in comes from __init, like say nmi_ipi_mask, we get a

 *   meaningless section warning.  May need to add isra symbols too...

 *   This pattern is identified by

 *   tosec   = init section

 *   fromsec = text section

 *   refsymname = *.constprop.*

 *

 * Pattern 6:

 *   Hide section mismatch warnings for ELF local symbols.  The goal

 *   is to eliminate false positive modpost warnings caused by

 *   compiler-generated ELF local symbol names such as ".LANCHOR1".

 *   Autogenerated symbol names bypass modpost's "Pattern 2"

 *   whitelisting, which relies on pattern-matching against symbol

 *   names to work.  (One situation where gcc can autogenerate ELF

 *   local symbols is when "-fsection-anchors" is used.)

 Check for pattern 1 */

 Check for pattern 1a */

 Check for pattern 2 */

 Check for pattern 3 */

 Check for pattern 4 */

 Check for pattern 5 */

 Check for pattern 6 */

/*

 * If there's no name there, ignore it; likewise, ignore it if it's

 * one of the magic symbols emitted used by current ARM tools.

 *

 * Otherwise if find_symbols_between() returns those symbols, they'll

 * fail the whitelist tests and cause lots of false alarms ... fixable

 * only by merging __exit and __init sections into __text, bloating

 * the kernel (which is especially evil on embedded platforms).

/**

 * Find symbol based on relocation record info.

 * In some cases the symbol supplied is a valid symbol so

 * return refsym. If st_name != 0 we assume this is a valid symbol.

 * In other cases the symbol needs to be looked up in the symbol table

 * based on section and address.

 Find a symbol nearby - addr are maybe negative */

 We need a close match */

/*

 * Find symbols before or equal addr and after addr - in the section sec.

 * If we find two symbols with equal offset prefer one with a valid name.

 * The ELF format may have a better way to detect what type of symbol

 * it is, but this works for now.

/*

 * Convert a section name to the function/data attribute

 * .init.text => __init

 * .memexitconst => __memconst

 * etc.

 *

 * The memory of returned value has been allocated on a heap. The user of this

 * method should free it after usage.

/*

 * Print a warning about a section mismatch.

 * Try to find symbols near it so user can find it.

 * Check whitelist before warning - it may be a false positive.

 check whitelist - we may ignore it */

/*

 * We rely on a gross hack in section_rel[a]() calling find_extable_entry_size()

 * to know the sizeof(struct exception_table_entry) for the target architecture.

	/*

	 * If we're currently checking the second relocation within __ex_table,

	 * that relocation offset tells us the offsetof(struct

	 * exception_table_entry, fixup) which is equal to sizeof(struct

	 * exception_table_entry) divided by two.  We use that to our advantage

	 * since there's no portable way to get that size as every architecture

	 * seems to go with different sized types.  Not pretty but better than

	 * hard-coding the size for every architecture..

	/*

	 * extable_entry_size is only discovered after we've handled the

	 * _second_ relocation in __ex_table, so only abort when we're not

	 * handling the first reloc and extable_entry_size is zero.

 For CONFIG_RELOCATABLE=y */

 From ARM ABI: (S + A) | T */

 From ARM ABI: ((S + A) | T) - P */

 skip this */

 if from section (name) is know good then skip it */

 Skip special sections */

 if from section (name) is know good then skip it */

 Skip special sections */

/**

 * A module includes a number of sections that are discarded

 * either when loaded or when used as built-in.

 * For loaded modules all functions marked __init and all data

 * marked __initdata will be discarded when the module has been initialized.

 * Likewise for modules used built-in the sections marked __exit

 * are discarded because __exit marked function are supposed to be called

 * only when a module is unloaded which never happens for built-in modules.

 * The check_sec_ref() function traverses all relocation records

 * to find all references to a section that reference a section that will

 * be discarded and warns about it.

 Walk through all sections */

 We want to process only relocation sections and not .init */

 strip trailing .lto */

 strip trailing .o */

 strip trailing .lto */

 Apply symbol namespaces from __kstrtabns_<symbol> entries. */

 check for static EXPORT_SYMBOL_* functions && global vars

	/* Our trick to get versioning for module struct etc. - it's

	 * never passed as an argument to an exported function, so

	 * the automatic versioning doesn't pick it up, but it's really

/* We first write the generated file into memory using the

 * following helper, then compare to the file on disk and

 ignore */

/**

 * Header for the generated file

	/*

	 * Include build-salt.h after module.h in order to

	 * inherit the definitions.

 Cannot check for assembler */

/**

 * Record CRCs for unresolved symbols

 Clear ->seen flag of modules that own symbols needed by this. */

/* parse Module.symvers file. line format:

 * 0x12345678<tab>symbol<tab>module<tab>export<tab>namespace

 No symbol versions, silently ignore */

 SPDX-License-Identifier: GPL-2.0

/*

 * Stolen form Cryptographic API.

 *

 * MD4 Message Digest Algorithm (RFC1320).

 *

 * Implementation derived from Andrew Tridgell and Steve French's

 * CIFS MD4 implementation, and the cryptoapi implementation

 * originally based on the public domain implementation written

 * by Colin Plumb in 1993.

 *

 * Copyright (c) Andrew Tridgell 1997-1998.

 * Modified by Steve French (sfrench@us.ibm.com) 2002

 * Copyright (c) Cryptoapi developers.

 * Copyright (c) 2002 David S. Miller (davem@redhat.com)

 * Copyright (c) 2002 James Morris <jmorris@intercode.com.au>

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; either version 2 of the License, or

 * (at your option) any later version.

 *

 XXX: this stuff can be optimized */

 FIXME: Handle .s files differently (eg. # starts comments) --RR */

 Collapse and ignore \ and CR. */

 Ignore whitespace */

 Handle strings as whole units */

 Comments: ignore */

 Check whether the file is a static library or not */

/* We have dir/file.o.  Open dir/.file.o.cmd, look for source_ and deps_ line

 Sum all files in the same dir or subdirs. */

 Continue until line does not end with '\' */

 Terminate line at first space, to get rid of final ' \' */

 Check if this file is in same dir as objfile */

 Everyone parsed OK */

 Calc and record src checksum. */

 objects for a module are listed in the first line of *.mod file. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * (C) Copyright David Gibson <dwg@au1.ibm.com>, IBM Corporation.  2005.

 Adjust all markers after the one we're inserting at */

 Find the end of the markerlist */

 Adjust for the length of d1 */

 So data_free() doesn't clobber them */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2007 Jon Loeliger, Freescale Semiconductor, Inc.

 A node in our list of directories to search for source/include files */

 next node in list, NULL for end */

 name of directory to search */

 This is the list of directories that we search for source files */

 Detect infinite include recursion. */

 = 0 */

 = NULL */

 = NULL */

 = NULL */

 = 0 */

/**

 * Try to open a file in a given directory.

 *

 * If the filename is an absolute path, then dirname is ignored. If it is a

 * relative path, then we look in that directory for the file.

 *

 * @param dirname	Directory to look in, or NULL for none

 * @param fname		Filename to look for

 * @param fp		Set to NULL if file did not open

 * @return allocated filename on success (caller must free), NULL on failure

/**

 * Open a file for read access

 *

 * If it is a relative filename, we search the full search path for it.

 *

 * @param fname	Filename to open

 * @param fp	Returns pointer to opened FILE, or NULL on failure

 * @return pointer to allocated filename, which caller must free

 Try current directory first */

 Failing that, try each search path in turn */

	/* FIXME: We allow the srcfile_state structure to leak,

	 * because it could still be referenced from a location

	 * variable being carried through the parser somewhere.  To

	 * fix this we could either allocate all the files from a

 Create the node */

 Add to the end of our list */

 allocate without free */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * (C) Copyright David Gibson <dwg@au1.ibm.com>, IBM Corporation.  2005.

/*

 * Tree building functions

 Make sure the label isn't already there */

 Add new node labels to old node */

	/* Move properties from the new node to the old node.  If there

 Pop the property off the list */

 Look for a collision, set new value if there is */

 Add new labels to old property */

 if no collision occurred, add property to the old node. */

	/* Move the override child nodes into the primary node.  If

 Pop the child node off the list */

 Search for a collision.  Merge if there is */

 if no collision occurred, add child to the old node. */

	/* The new node contents are now merged into the old node.  Free

/*

 * Tree accessor functions

 FIXME: ick, static local */

	/* If the node *does* have a phandle property, we must

	 * be dealing with a self-referencing phandle, which will be

 FIXME: Sanity check node? */

 utility helper to avoid code duplication */

 if there are labels */

 now add the label in the node */

 check whether the label already exists */

 insert it */

 force allocation of a phandle for this node */

 m->ref can only be a REF_PHANDLE, but check anyway */

 there shouldn't be any ':' in the arguments */

 local fixup node, walk node, new */

 walk back retrieving depth */

 allocate name array */

 store names in the array */

 walk the path components creating nodes if they don't exist */

 if no node exists, create it */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2011 The Chromium OS Authors. All rights reserved.

 These are the operations we support */

 Write a property in a node */

 Create a new node */

 operation to perform */

 data type (s/i/u/x or 0 for default) */

 data size (1/2/4) */

 verbose output */

 automatically create all path components */

/**

 * Report an error with a particular node.

 *

 * @param name		Node name to report error on

 * @param namelen	Length of node name, or -1 to use entire string

 * @param err		Error number to report (-FDT_ERR_...)

/**

 * Encode a series of arguments in a property value.

 *

 * @param disp		Display information / options

 * @param arg		List of arguments from command line

 * @param arg_count	Number of arguments (may be 0)

 * @param valuep	Returns buffer containing value

 * @param *value_len	Returns length of value encoded

 holding area for value */

 size of holding area */

 pointer to current value position */

 length of this cell/string/byte */

 the number of bytes we have written to buf */

 assume integer unless told otherwise */

 enlarge our value buffer by a suitable margin if needed */

/**

 * Create paths as needed for all components of a path

 *

 * Any components of the path that do not exist are created. Errors are

 * reported.

 *

 * @param blob		FDT blob to write into

 * @param in_path	Path to process

 * @return 0 if ok, -1 on error

 skip leading '/' */

 equivalent to strchrnul(), but it requires _GNU_SOURCE */

/**

 * Create a new node in the fdt.

 *

 * This will overwrite the node_name string. Any error is reported.

 *

 * TODO: Perhaps create fdt_path_offset_namelen() so we don't need to do this.

 *

 * @param blob		FDT blob to write into

 * @param node_name	Name of node to create

 * @return new node offset if found, or -1 on failure

		/*

		 * Convert the arguments into a single binary value, then

		 * store them into the property.

		/*

		 * TODO: add options to:

		 * - delete property

		 * - delete node (optionally recursively)

		 * - rename node

		 * - pack fdt before writing

		 * - set amount of free space when writing

		 * - expand fdt if value doesn't fit

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * (C) Copyright David Gibson <dwg@au1.ibm.com>, IBM Corporation.  2007.

/*

 * Utility check functions

 A check which always fails, for testing purposes only */

 Not present, assumed ok */

 Not present, assumed ok */

 Not present, assumed ok */

/*

 * Structural check functions

 HACK: Overlay fragments are a special case */

 Certain names are whitelisted */

		/*

		 * # is only allowed at the beginning of property names not counting

		 * the vendor prefix.

			/* "Set this node's phandle equal to some

			 * other node's phandle".  That's nonsensical

		/* But setting this node's phandle equal to its own

		 * phandle is allowed - that means allocate a unique

		 * phandle for this node, even if it's not otherwise

		 * referenced.  The value will be filled in later, so

 Nothing should have assigned phandles yet */

 No valid phandles; nothing further to check */

 No name property, that's fine */

		/* The name property is correct, and therefore redundant.

/*

 * Reference fixup functions

 mark the entry as unresolved */

/*

 * Semantic checks

 No "reg", that's fine */

 skip of child address */

 Ignore I2C_OWN_SLAVE_ADDRESS */

 Ignore I2C_OWN_SLAVE_ADDRESS */

 Try to detect SPI buses which don't have proper node name */

 skip over 0x for next test */

/*

 * Style checks

 Ignore root node */

		/*

		 * Some bindings use a cell value 0 or -1 to skip over optional

		 * entries when each index position has a specific definition.

 Give up if this is an overlay with external references */

 If we have markers, verify the current cell is a phandle */

	/*

	 * *-gpios and *-gpio can appear in property names,

	 * so skip over any false matches (only one known ATM)

 Skip GPIO hog nodes which have 'gpios' property */

 Give up if this is an overlay with external references */

				/* Give up if this is an overlay with

 We warn about that already in another test. */

 The parent of 'port' nodes can be either 'ports' or a device */

 No error if we have any non-zero unit address */

 Give up if this is an overlay with external references */

 Raising level, also raise it for prereqs */

	/* Lowering level, also lower it for things this is the prereq

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * (C) Copyright David Gibson <dwg@au1.ibm.com>, IBM Corporation.  2005.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * (C) Copyright David Gibson <dwg@au1.ibm.com>, IBM Corporation.  2005.

 %s */", srcstr);

 data type information missing, need to guess */

 %s */", srcstr);

 %s */", srcstr);

 %s */", srcstr);

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2017 Konsulko Group Inc. All rights reserved.

 *

 * Author:

 *	 Pantelis Antoniou <pantelis.antoniou@konsulko.com>

 Usage related data. */

	/*

	 * We take a copies first, because a a failed apply can trash

	 * both the base blob and the overlay

 allocate blob pointer array */

 read and keep track of the overlay blobs */

 apply the overlays in sequence */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * (C) Copyright David Gibson <dwg@au1.ibm.com>, IBM Corporation.  2005.

/*

 * Command line options

 Level of quietness */

 Number of memory reservation slots */

 Minimum blob size */

 Additional padding to blob */

 Additional padding to blob accroding to the alignsize */

 Use linux,phandle or phandle properties */

 enable symbols & fixup support */

 suppress generation of fixups on symbol support */

 auto generate labels -> aliases */

int annotate;		/* Level of annotation: 1 for input source location

 Usage related data. */

 minsize and padsize are mutually exclusive */

 on a plugin, generate by default */

 do nothing */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2011 The Chromium Authors, All Rights Reserved.

 * Copyright 2008 Jon Loeliger, Freescale Semiconductor, Inc.

 *

 * util_is_printable_string contributed by

 *	Pantelis Antoniou <pantelis.antoniou AT gmail.com>

 start with 128 bytes */

 zero length is not */

 must terminate with zero */

 not zero, or not done yet */

/*

 * Parse a octal encoded character starting at index i in string s.  The

 * resulting character will be returned and the index i will be updated to

 * point at the character directly after the end of the encoding, this may be

 * the '\0' terminator of the string.

/*

 * Parse a hexadecimal encoded character starting at index i in string s.  The

 * resulting character will be returned and the index i will be updated to

 * point at the character directly after the end of the encoding, this may be

 * the '\0' terminator of the string.

		j--; /* need to re-read the first digit as

 assume stdin */

 Loop until we have read everything */

 Expand the buffer to hold the next chunk */

 Clean up, including closing stdin; return errno on error */

 Successful read */

 assume stdout */

 Close the file/stdin; return errno on error */

 get the conversion qualifier */

 TODO:		case 'l': qualifier = 'L'; break;*/

 we should now have a type */

 convert qualifier (bhL) to byte size */

 that should be it! */

 no data, don't print */

 prescan the --long opt length to auto-align */

 +1 is for space between --opt and help text */

 helps when adding new applets or options */

 first output the short flag if it has one */

 then the long flag */

 finally the help text */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * (C) Copyright Linaro, Ltd. 2018

 * (C) Copyright Arm Holdings.  2017

 * (C) Copyright David Gibson <dwg@au1.ibm.com>, IBM Corporation.  2005.

 Make sure the entire string is in the lower 7-bit ascii range */

 Emit the property name */

 Boolean properties are easiest to deal with. Length is zero, so just emit 'true' */

 Loop over all the children, emitting them into the map */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2011 The Chromium OS Authors. All rights reserved.

 *

 * Portions from U-Boot cmd_fdt.c (C) Copyright 2007

 * Gerald Van Baren, Custom IDEAS, vanbaren@cideas.com

 * Based on code written by:

 *   Pantelis Antoniou <pantelis.antoniou@gmail.com> and

 *   Matthew McClintock <msm@freescale.com>

 show values for node properties */

 list the properties for a node */

 list the subnodes of a node */

 Holds information which controls our output and options */

 data type (s/i/u/x or 0 for default) */

 data size (1/2/4) */

 display mode that we are using */

 default value if node/property not found */

/**

 * Displays data of a given length according to selected options

 *

 * If a specific data type is provided in disp, then this is used. Otherwise

 * we try to guess the data type / size from the contents.

 *

 * @param disp		Display information / options

 * @param data		Data to display

 * @param len		Maximum length of buffer

 * @return 0 if ok, -1 if data does not match format

 no data, don't print */

/**

 * List all properties in a node, one per line.

 *

 * @param blob		FDT blob

 * @param node		Node to display

 * @return 0 if ok, or FDT_ERR... if not.

 Stop silently when there are no more properties */

 how deeply nested we will go */

/**

 * List all subnodes in a node, one per line

 *

 * @param blob		FDT blob

 * @param node		Node to display

 * @return 0 if ok, or FDT_ERR... if not.

 next node offset from libfdt */

 current tag */

 keep track of nesting level */

 the assumed depth of this node */

 NULL pointer error */";

 root is nameless */

 exit the loop */

/**

 * Show the data for a given node (and perhaps property) according to the

 * display option provided.

 *

 * @param blob		FDT blob

 * @param disp		Display information / options

 * @param node		Node to display

 * @param property	Name of property to display, or NULL if none

 * @return 0 if ok, -ve on error

/**

 * Run the main fdtget operation, given a filename and valid arguments

 *

 * @param disp		Display information / options

 * @param filename	Filename of blob file

 * @param arg		List of arguments to process

 * @param arg_count	Number of arguments

 * @param return 0 if ok, -ve on error

 set defaults */

 Allow no arguments, and silently succeed */

 Check for node, property arguments */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * (C) Copyright David Gibson <dwg@au1.ibm.com>, IBM Corporation.  2005.

 FDT_BEGIN_NODE */\n");

 FDT_END_NODE */\n");

 FDT_PROP */\n");

 FIXME: do this more efficiently? */

	/*

	 * Add additional reserved slots if the user asked for them.

 Reserve map should be doubleword aligned */

 Make header */

	/*

	 * If the user asked for more space than is used, adjust the totalsize.

	/*

	 * Assemble the blob: start with the header, add with alignment

	 * the reserve buffer, add the reserve map terminating zeroes,

	 * the device tree itself, and finally the strings.

	/*

	 * If the user asked for more space than is used, pad out the blob.

	/*

	 * data_merge() frees the right-hand element so only the blob

	 * remains to be freed.

 autogenerated by dtc, do not edit */\n\n");

 magic */\n");

 totalsize */\n");

 off_dt_struct */\n");

 off_dt_strings */\n");

 off_mem_rsvmap */\n");

 version */\n");

 last_comp_version */\n");

 boot_cpuid_phys */\n");

 size_dt_strings */\n");

 size_dt_struct */\n");

	/*

	 * Reserve map entries.

	 * Align the reserve map to a doubleword boundary.

	 * Each entry is an (address, size) pair of u64 values.

	 * Always supply a zero-sized temination entry.

 Memory reserve map from source file */\n");

	/*

	 * Use .long on high and low halves of u64s to avoid .quad

	 * as it appears .quad isn't available in some assemblers.

 FDT_END */\n");

	/*

	 * If the user asked for more space than is used, pad it out.

	/*

	 * Each entry is a pair of u64 (addr, size) values for 4 cell_t's.

	 * List terminates at an entry with size equal to zero.

	 *

	 * First pass, count entries.

 root node is a special case */

 Ignore */

 SPDX-License-Identifier: (GPL-2.0-or-later OR BSD-2-Clause)

/*

 * libfdt - Flat Device Tree manipulation

 * Copyright (C) 2006 David Gibson, IBM Corporation.

/*

 * Minimal sanity check for a read-only tree. fdt_ro_probe_() checks

 * that the given buffer contains what appears to be a flattened

 * device tree with sane information in its header.

 The device tree must be at an 8-byte aligned address */

 Complete tree */

 Unfinished sequential-write blob */

 block start out of bounds */

 overflow */

 block end out of bounds */

 The device tree must be at an 8-byte aligned address */

 Bounds check memrsv block */

 Bounds check structure block */

 Bounds check strings block */

 premature end */

 skip name */

 premature end */

 premature end */

 skip-name offset, length and value */

 premature end */

	/*

	 * With respect to the parent, the depth of the next subnode will be

	 * the same as the last.

 SPDX-License-Identifier: (GPL-2.0-or-later OR BSD-2-Clause)

/*

 * libfdt - Flat Device Tree manipulation

 * Copyright (C) 2006 David Gibson, IBM Corporation.

/* 'memrsv' state:	Initial state after fdt_create()

 *

 * Allowed functions:

 *	fdt_add_reservemap_entry()

 *	fdt_finish_reservemap()		[moves to 'struct' state]

/* 'struct' state:	Enter this state after fdt_finish_reservemap()

 *

 * Allowed functions:

 *	fdt_begin_node()

 *	fdt_end_node()

 *	fdt_property*()

 *	fdt_finish()			[moves to 'complete' state]

 assert: (fdt_magic(fdt) == FDT_SW_MAGIC) */

/* 'complete' state:	Enter this state after fdt_finish()

 *

 * Allowed functions: none

	/*

	 * magic and last_comp_version keep intermediate state during the fdt

	 * creation process, which is replaced with the proper FDT format by

	 * fdt_finish().

	 *

	 * flags should be accessed with sw_flags().

	/* Two cases to avoid clobbering data if the old and new

 no more room :( */

 Must only be used to roll back in case of error */

 String de-duplication can be slow, _NO_NAME_DEDUP skips it */

 Add terminator */

 Relocate the string table */

 Walk the structure, correcting string offsets */

 Finally, adjust the header */

 And fix up fields that were keeping intermediate state. */

 SPDX-License-Identifier: (GPL-2.0-or-later OR BSD-2-Clause)

/*

 * libfdt - Flat Device Tree manipulation

 * Copyright (C) 2006 David Gibson, IBM Corporation.

 short match */

 missing terminating NULL */

 error */

 see if we have an alias */

		/*

		 * For old FDT versions, match the naming conventions of V16:

		 * give only the leaf name (after all /). The actual tree

		 * contents are loosely checked.

	/* Prior to version 16, properties may need realignment

	/* Prior to version 16, properties may need realignment

 Handle realignment */

 Handle realignment */

	/* FIXME: This is a bit sub-optimal, since we potentially scan

 special case so that root path is "/", not "" */

 error from fdt_next_node() */

 error from fdt_next_node() */

	/* FIXME: The algorithm here is pretty horrible: we scan each

	 * property of a node in fdt_getprop(), then if that didn't

	 * find what we want, we scan over them again making our way

	 * to the next node.  Still it's the easiest to implement

 error from fdt_next_node() */

	/* FIXME: The algorithm here is pretty horrible: we

	 * potentially scan each property of a node in

	 * fdt_get_phandle(), then if that didn't find what

	 * we want, we scan over them again making our way to the next

	 * node.  Still it's the easiest to implement approach;

 error from fdt_next_node() */

 malformed strlist.. */

 Abort if the last string isn't properly NUL-terminated. */

 Abort if the last string isn't properly NUL-terminated. */

 Abort if the last string isn't properly NUL-terminated. */

	/* FIXME: The algorithm here is pretty horrible: we scan each

	 * property of a node in fdt_node_check_compatible(), then if

	 * that didn't find what we want, we scan over them again

	 * making our way to the next node.  Still it's the easiest to

 error from fdt_next_node() */

 SPDX-License-Identifier: (GPL-2.0-or-later OR BSD-2-Clause)

/*

 * libfdt - Flat Device Tree manipulation

 * Copyright (C) 2006 David Gibson, IBM Corporation.

 *     EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 SPDX-License-Identifier: (GPL-2.0-or-later OR BSD-2-Clause)

/*

 * libfdt - Flat Device Tree manipulation

 * Copyright (C) 2012 David Gibson, IBM Corporation.

 SPDX-License-Identifier: (GPL-2.0-or-later OR BSD-2-Clause)

/*

 * libfdt - Flat Device Tree manipulation

 * Copyright (C) 2016 Free Electrons

 * Copyright (C) 2016 NextThing Co.

/**

 * overlay_get_target_phandle - retrieves the target phandle of a fragment

 * @fdto: pointer to the device tree overlay blob

 * @fragment: node offset of the fragment in the overlay

 *

 * overlay_get_target_phandle() retrieves the target phandle of an

 * overlay fragment when that fragment uses a phandle (target

 * property) instead of a path (target-path property).

 *

 * returns:

 *      the phandle pointed by the target property

 *      0, if the phandle was not found

 *	-1, if the phandle was malformed

/**

 * overlay_get_target - retrieves the offset of a fragment's target

 * @fdt: Base device tree blob

 * @fdto: Device tree overlay blob

 * @fragment: node offset of the fragment in the overlay

 * @pathp: pointer which receives the path of the target (or NULL)

 *

 * overlay_get_target() retrieves the target offset in the base

 * device tree of a fragment, no matter how the actual targeting is

 * done (through a phandle or a path)

 *

 * returns:

 *      the targeted node offset in the base device tree

 *      Negative error code on error

 Try first to do a phandle based lookup */

 no phandle, try path */

 And then a path based lookup */

	/*

	* If we haven't found either a target or a

	* target-path property in a node that contains a

	* __overlay__ subnode (we wouldn't be called

	* otherwise), consider it a improperly written

	* overlay

 return on error */

 return pointer to path (if available) */

/**

 * overlay_phandle_add_offset - Increases a phandle by an offset

 * @fdt: Base device tree blob

 * @node: Device tree overlay blob

 * @name: Name of the property to modify (phandle or linux,phandle)

 * @delta: offset to apply

 *

 * overlay_phandle_add_offset() increments a node phandle by a given

 * offset.

 *

 * returns:

 *      0 on success.

 *      Negative error code on error

/**

 * overlay_adjust_node_phandles - Offsets the phandles of a node

 * @fdto: Device tree overlay blob

 * @node: Offset of the node we want to adjust

 * @delta: Offset to shift the phandles of

 *

 * overlay_adjust_node_phandles() adds a constant to all the phandles

 * of a given node. This is mainly use as part of the overlay

 * application process, when we want to update all the overlay

 * phandles to not conflict with the overlays of the base device tree.

 *

 * returns:

 *      0 on success

 *      Negative error code on failure

/**

 * overlay_adjust_local_phandles - Adjust the phandles of a whole overlay

 * @fdto: Device tree overlay blob

 * @delta: Offset to shift the phandles of

 *

 * overlay_adjust_local_phandles() adds a constant to all the

 * phandles of an overlay. This is mainly use as part of the overlay

 * application process, when we want to update all the overlay

 * phandles to not conflict with the overlays of the base device tree.

 *

 * returns:

 *      0 on success

 *      Negative error code on failure

	/*

	 * Start adjusting the phandles from the overlay root

/**

 * overlay_update_local_node_references - Adjust the overlay references

 * @fdto: Device tree overlay blob

 * @tree_node: Node offset of the node to operate on

 * @fixup_node: Node offset of the matching local fixups node

 * @delta: Offset to shift the phandles of

 *

 * overlay_update_local_nodes_references() update the phandles

 * pointing to a node within the device tree overlay by adding a

 * constant delta.

 *

 * This is mainly used as part of a device tree application process,

 * where you want the device tree overlays phandles to not conflict

 * with the ones from the base device tree before merging them.

 *

 * returns:

 *      0 on success

 *      Negative error code on failure

			/*

			 * phandles to fixup can be unaligned.

			 *

			 * Use a memcpy for the architectures that do

			 * not support unaligned accesses.

/**

 * overlay_update_local_references - Adjust the overlay references

 * @fdto: Device tree overlay blob

 * @delta: Offset to shift the phandles of

 *

 * overlay_update_local_references() update all the phandles pointing

 * to a node within the device tree overlay by adding a constant

 * delta to not conflict with the base overlay.

 *

 * This is mainly used as part of a device tree application process,

 * where you want the device tree overlays phandles to not conflict

 * with the ones from the base device tree before merging them.

 *

 * returns:

 *      0 on success

 *      Negative error code on failure

 There's no local phandles to adjust, bail out */

	/*

	 * Update our local references from the root of the tree

/**

 * overlay_fixup_one_phandle - Set an overlay phandle to the base one

 * @fdt: Base Device Tree blob

 * @fdto: Device tree overlay blob

 * @symbols_off: Node offset of the symbols node in the base device tree

 * @path: Path to a node holding a phandle in the overlay

 * @path_len: number of path characters to consider

 * @name: Name of the property holding the phandle reference in the overlay

 * @name_len: number of name characters to consider

 * @poffset: Offset within the overlay property where the phandle is stored

 * @label: Label of the node referenced by the phandle

 *

 * overlay_fixup_one_phandle() resolves an overlay phandle pointing to

 * a node in the base device tree.

 *

 * This is part of the device tree overlay application process, when

 * you want all the phandles in the overlay to point to the actual

 * base dt nodes.

 *

 * returns:

 *      0 on success

 *      Negative error code on failure

/**

 * overlay_fixup_phandle - Set an overlay phandle to the base one

 * @fdt: Base Device Tree blob

 * @fdto: Device tree overlay blob

 * @symbols_off: Node offset of the symbols node in the base device tree

 * @property: Property offset in the overlay holding the list of fixups

 *

 * overlay_fixup_phandle() resolves all the overlay phandles pointed

 * to in a __fixups__ property, and updates them to match the phandles

 * in use in the base device tree.

 *

 * This is part of the device tree overlay application process, when

 * you want all the phandles in the overlay to point to the actual

 * base dt nodes.

 *

 * returns:

 *      0 on success

 *      Negative error code on failure

/**

 * overlay_fixup_phandles - Resolve the overlay phandles to the base

 *                          device tree

 * @fdt: Base Device Tree blob

 * @fdto: Device tree overlay blob

 *

 * overlay_fixup_phandles() resolves all the overlay phandles pointing

 * to nodes in the base device tree.

 *

 * This is one of the steps of the device tree overlay application

 * process, when you want all the phandles in the overlay to point to

 * the actual base dt nodes.

 *

 * returns:

 *      0 on success

 *      Negative error code on failure

 We can have overlays without any fixups */

 nothing to do */

 And base DTs without symbols */

/**

 * overlay_apply_node - Merges a node into the base device tree

 * @fdt: Base Device Tree blob

 * @target: Node offset in the base device tree to apply the fragment to

 * @fdto: Device tree overlay blob

 * @node: Node offset in the overlay holding the changes to merge

 *

 * overlay_apply_node() merges a node into a target base device tree

 * node pointed.

 *

 * This is part of the final step in the device tree overlay

 * application process, when all the phandles have been adjusted and

 * resolved and you just have to merge overlay into the base device

 * tree.

 *

 * returns:

 *      0 on success

 *      Negative error code on failure

/**

 * overlay_merge - Merge an overlay into its base device tree

 * @fdt: Base Device Tree blob

 * @fdto: Device tree overlay blob

 *

 * overlay_merge() merges an overlay into its base device tree.

 *

 * This is the next to last step in the device tree overlay application

 * process, when all the phandles have been adjusted and resolved and

 * you just have to merge overlay into the base device tree.

 *

 * returns:

 *      0 on success

 *      Negative error code on failure

		/*

		 * Each fragments will have an __overlay__ node. If

		 * they don't, it's not supposed to be merged

 root? we're done */

 in case of root pretend it's "/" */

/**

 * overlay_symbol_update - Update the symbols of base tree after a merge

 * @fdt: Base Device Tree blob

 * @fdto: Device tree overlay blob

 *

 * overlay_symbol_update() updates the symbols of the base tree with the

 * symbols of the applied overlay

 *

 * This is the last step in the device tree overlay application

 * process, allowing the reference of overlay symbols by subsequent

 * overlay operations.

 *

 * returns:

 *      0 on success

 *      Negative error code on failure

 if no overlay symbols exist no problem */

 it no root symbols exist we should create them */

 any error is fatal now */

 iterate over each overlay symbol */

 verify it's a string property (terminated by a single \0) */

 keep end marker to avoid strlen() */

 get fragment name first */

			/* Symbol refers to something that won't end

 verify format; safe since "s" lies in \0 terminated prop */

 /<fragment-name>/__overlay__/<relative-subnode-path> */

 /<fragment-name>/__overlay__ */

			/* Symbol refers to something that won't end

 find the fragment index in which the symbol lies */

 not found? */

 an __overlay__ subnode must exist */

 get the target of the fragment */

 if we have a target path use */

 again in case setprop_placeholder changed it */

 target is not root */

	/*

	 * The overlay has been damaged, erase its magic.

	/*

	 * The overlay might have been damaged, erase its magic.

	/*

	 * The base device tree might have been damaged, erase its

	 * magic.

 SPDX-License-Identifier: (GPL-2.0-or-later OR BSD-2-Clause)

/*

 * libfdt - Flat Device Tree manipulation

 * Copyright (C) 2014 David Gibson <david@gibson.dropbear.id.au>

 * Copyright (C) 2018 embedded brains GmbH

 This function assumes that [address|size]_cells is 1 or 2 */

 check validity of address */

 check validity of size */

 SPDX-License-Identifier: (GPL-2.0-or-later OR BSD-2-Clause)

/*

 * libfdt - Flat Device Tree manipulation

 * Copyright (C) 2006 David Gibson, IBM Corporation.

 SPDX-License-Identifier: (GPL-2.0-or-later OR BSD-2-Clause)

/*

 * libfdt - Flat Device Tree manipulation

 * Copyright (C) 2006 David Gibson, IBM Corporation.

 Must only be used to roll back in case of error */

/**

 * fdt_find_add_string_() - Find or allocate a string

 *

 * @fdt: pointer to the device tree to check/adjust

 * @s: string to find/add

 * @allocated: Set to 0 if the string was found, 1 if not found and so

 *	allocated. Ignored if can_assume(NO_ROLLBACK)

 * @return offset of string in the string table (whether found or added)

 found it */

 Delete the string if we failed to add it */

 Try to place the new node after the parent's properties */

 the fdt_subnode_offset_namelen() should ensure this never hits */

 no further work necessary */

 Need to reorder */

 First attempt to build converted tree at beginning of buffer */

 But if that overlaps with the old tree... */

 Try right after the old tree instead */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2008 Nir Tzachar <nir.tzachar@gmail.com>

 *

 * Derived from menuconfig.

 the window in which all information appears */

 the largest size of the menu window */

 the window in which we show option buttons */

 the currently selected button */

 help */

 symbole help */

 instructions */

 config */

 back */

 save */

 load */

 search */

 exit */

 return != 0 to indicate the key was handles */

 return the index of the matched item, or -1 if no such item exists */

 Do not search if the menu is empty (i.e. items_num == 0) */

 Make a new item. */

	/*

	if (!k_menu_items[items_num].is_visible)

		item_opts_off(curses_menu_items[items_num], O_SELECTABLE);

 very hackish. adds a string to the last item added */

 get the tag of the currently selected item */

/* return = 0 means we are successful.

 * -1 means go on doing what you were doing

 if we got here, the user really wants to exit */

 strip the prefix if necessary */

/* adjust the menu to show this item.

 this function assumes reset_menu has been called before */

 position the menu at the middle of the screen */

	/* must reassert this after changing items, otherwise returns to a

	 * default of 16

 Post the menu */

 else, do no change.. */

/* Return 0 means I have handled the key. In such a case, ans should hold the

 * item to center, or -1 otherwise.

 * Else return -1 .

 if ESC or left*/

 remember location in the menu */

 ENTER WAS PRESSED */

 this is mostly duplicated from the conf() function. */

 if ESC or left */

 set up the menu and menu window */

 panels order is from bottom to top */

 Silence conf_read() until the real callback is set up */

 Initialize curses */

 set color theme */

 set btns menu */

 check for KEY_FUNC(1) */

 do the work */

 ok, we are done */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2008 Nir Tzachar <nir.tzachar@gmail.com>

 *

 * Derived from menuconfig.

 sentinel */ }

 sentinel */ }

 this changes the windows attributes !!! */

 print all lines to the window. */

 do not go over end of line */

/* get the message, and buttons.

 * each button must be a char*

 * return the selected button

 *

 * this dialog is used for 2 different things:

 * 1) show a text box, no buttons.

 * 2) show a dialog, with horizontal buttons

 find the widest line of msg: */

 place dialog in middle of screen */

 create the windows */

 print message */

 ENTER */

 ESCAPE */

 find the widest line of msg: */

 place dialog in middle of screen */

 create the windows */

 print message */

 create panels */

 show the cursor */

 ENTER */

 ESCAPE */

 ^H */

 ^? */

 one for new char, one for '\0' */

 insert the char at the proper position */

 hide the cursor */

 refresh all windows in the correct order */

 layman's scrollable window... */

 find the widest line of msg: */

 create the pad */

 place window in middle of screen */

 show the help in the help window, and show the help panel */

 handle scrolling */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>

 Helper function to facilitate fgets() by Jean Sacren. */

		/*

		 * Use microseconds derived seed, compensate for systems where it may

		 * be zero.

	/*

	 * If choice is mod then we may have more items selected

	 * and if no then no-one.

	 * In both cases stop.

 count entries in choice block */

	/*

	 * find a random value and set it to yes,

	 * set the rest to no so we have only one set

 clear VALID to get value calculated */

 clear VALID to get value calculated */

	/*

	 * can't go as the default in switch-case below, otherwise gcc whines

	 * about -Wmaybe-uninitialized

 probability of bool     = y */

 probability of tristate = y */

 probability of tristate = m */

	/*

	 * We have different type of choice blocks.

	 * If curr.tri equals to mod then we can select several

	 * choice symbols in one block.

	 * In this case we do nothing.

	 * If curr.tri equals yes then only one symbol can be

	 * selected in a choice block and we set it to yes,

	 * and the rest to no.

 fall through */

 print help */

 fall through */

 fall through */

			/*

			 * Except in oldaskconfig mode, we show only menus that

			 * contain new symbols.

 fall through */

 gcc uninit */;

				/*

				 * syncconfig is invoked during the build stage.

				 * Suppress distracting

				 *   "configuration written to ..."

zconfdump(stdout);

 Really nothing to do in this loop */

 fall through */

 Update until a loop caused no more changes */

		/*

		 * Create auto.conf if it does not exist.

		 * This prevents GNU Make 4.1 or older from emitting

		 * "include/config/auto.conf: No such file or directory"

		 * in the top-level Makefile

		 *

		 * syncconfig always creates or updates auto.conf because it is

		 * used during the build.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>

 *

 * Introduced single menu mode (show all sub-menus in one large tree).

 * 2002-11-06 Petr Baudis <pasky@ucw.cz>

 *

 * i18n, 2005, Arnaldo Carvalho de Melo <acme@conectiva.com.br>

 strip the prefix if necessary */

	/*

	 * note: menu_is_visible() has side effect that it will

	 * recalc the value of the symbol.

 () = 2 */

 fall through */

 Silence conf_read() until the real callback is set up */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2002-2005 Roman Zippel <zippel@linux-m68k.org>

 * Copyright (C) 2002-2005 Sam Ravnborg <sam@ravnborg.org>

 file already present in list? If not add it */

 Allocate initial growable string */

 Free storage for growable string */

 Append to growable string */

 Append printf formatted string to growable string */

 big enough... */

 Retrieve value of growable string */

 SPDX-License-Identifier: GPL-2.0



 Copyright (C) 2018 Masahiro Yamada <yamada.masahiro@socionext.com>

/*

 * Environment variables

 The returned pointer must be freed when done */

	/*

	 * We need to remember all referenced environment variables.

	 * They will be written out to include/config/auto.conf.cmd

/*

 * Built-in functions

 remove trailing new lines */

 replace a new line with a space */

 Name		MIN	MAX	Function */

/*

 * Variables (and user-defined functions)

 For defined variables, += inherits the existing flavor */

 For undefined variables, += assumes the recursive flavor */

/*

 * Evaluate a clause with arguments.  argc/argv are arguments from the upper

 * function call.

 *

 * Returned string must be freed when done

	/*

	 * If variable name is '1', '2', etc.  It is generally an argument

	 * from a user-function call (i.e. local-scope variable).  If not

	 * available, then look-up global-scope variables.

	/*

	 * Split into tokens

	 * The function name and arguments are separated by a comma.

	 * For example, if the function call is like this:

	 *   $(foo,$(x),$(y))

	 *

	 * The input string for this helper should be:

	 *   foo,$(x),$(y)

	 *

	 * and split into:

	 *   new_argv[0] = 'foo'

	 *   new_argv[1] = '$(x)'

	 *   new_argv[2] = '$(y)'

	/*

	 * Shift arguments

	 * new_argv[0] represents a function name or a variable name.  Put it

	 * into 'name', then shift the rest of the arguments.  This simplifies

	 * 'const' handling.

 Search for variables */

 Look for built-in functions */

 Last, try environment variable */

/*

 * Expand a string that follows '$'

 *

 * For example, if the input string is

 *     ($(FOO)$($(BAR)))$(BAZ)

 * this helper evaluates

 *     $($(FOO)$($(BAR)))

 * and returns a new string containing the expansion (note that the string is

 * recursively expanded), also advancing 'str' to point to the next character

 * after the corresponding closing parenthesis, in this case, *str will be

 *     $(BAR)

	/*

	 * In Kconfig, variable/function references always start with "$(".

	 * Neither single-letter variables as in $A nor curly braces as in ${CC}

	 * are supported.  '$' not followed by '(' loses its special meaning.

 Advance 'str' to after the expanded initial portion of the string */

 Advance 'str' to the end character */

/*

 * Expand variables and functions in the given string.  Undefined variables

 * expand to an empty string.

 * The returned string must be freed when done.

/*

 * Expand variables in a token.  The parsing stops when a token separater

 * (in most cases, it is a whitespace) is encountered.  'str' is updated to

 * point to the next character.

 *

 * The returned string must be freed when done.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2002-2003 Romain Lievin <roms@tilp.info>

#define DEBUG

 left  frame

 right frame

 current node for SINGLE view

 browsed node for SPLIT view

 Helping/Debugging Functions */

 Main Window Initialization */

"style", PANGO_STYLE_OBLIQUE, */

 Utility Functions */

 Main Windows Callbacks */

 Menu & Toolbar Callbacks */

 instead of update_tree to speed-up */

 instead of update_tree to speed-up */

 instead of update_tree to speed-up */

www.fsf.org/licenses/licenses.html\n";

 Disable back btn, like in full mode. */

 CTree Callbacks */

 Change hex/int/string value in the cell */

 Change the value of a symbol and update the tree */

fixme: keep exp/coll

fixme: keep exp/coll

 User click: update choice (full) or goes down (single) */

 bug in ctree with earlier version of GTK

 goes down into menu

 Key pressed: update choice */

 Row selection changed: update help */

 User click: display sub-tree in the right frame. */

 Fill a row of strings */

 parse childs for getting final value

 fall through */

 Set the node content with a row of strings */

 Add a node to the tree */

 Find a node in the GTK+ tree */

/*

 * Find a menu in the GtkTree starting at parent.

/*

 * Update the tree by adding/removing entries

 * Does not change other nodes

 force adding of a first child

 remove node */

 next parent */

 next child */

 add node

 remove node

 next parent

 next child

 Display the whole tree (single/split/full view) */

/*

		if (((menu != &rootmenu) && !(menu->flags & MENU_ROOT))

		    || (view_mode == FULL_VIEW)

 Change paned position if the view is not in 'split mode' */

 Display a part of the tree starting at current node (single/split view) */

 Display the list in the left frame (split view) */

 Main */

 GTK stuffs */

 Determine GUI path */

 Conf stuffs */

showAll = 1;

 Load the interface and connect signals */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>

 any prompt visible? */

		/*

		 * Tristate choice_values with visibility 'mod' are

		 * not visible if the corresponding choice's value is

		 * 'yes'.

 defaulting to "yes" if no explicit "depends on" are given */

/*

 * Find the default symbol for a choice.

 * First try the default values for the choice symbol

 * Next locate the first visible choice value

 * Return NULL if none was found

 any of the defaults visible? */

 just get the first visible value */

 failed to locate any defaults */

 first calculate all choice values' visibilities */

 is the user choice visible? */

 no choice? reset tristate value */

 set default if recursively called */

				/* if the symbol is visible use the user value

				 * if available, otherwise try the default value

	/*

	 * setting a choice value also resets the new flag of the choice

	 * symbol and all other choice values.

/*

 * Find the default value associated to a symbol.

 * For tristate symbol handle the modules=n case

 * in which case "m" becomes "y".

 * If the symbol does not have any default then fallback

 * to the fixed default values.

 If symbol has a default value look it up */

 The visibility may limit the value from yes => mod */

			/*

			 * The following fails to handle the situation

			 * where a default value is further limited by

			 * the valid range.

 Handle select statements */

 transpose mod to yes if modules are not enabled */

 transpose mod to yes if type is bool */

 adjust the default value if this symbol is implied by another */

 fnv32 hash */

/* Compare matched symbols as thus:

 * - first, symbols that match exactly

 * - then, alphabetical sort

	/* Exact match:

	 * - if matched length on symbol s1 is the length of that symbol,

	 *   then this symbol should come first;

	 * - if matched length on symbol s2 is the length of that symbol,

	 *   then this symbol should come first.

	 * Note: since the search can be a regexp, both symbols may match

	 * exactly; if this is the case, we can't decide which comes first,

	 * and we fallback to sorting alphabetically.

 As a fallback, sort symbols alphabetically */

 Skip if empty */

		/* As regexec returned 0, we know we have a match, so

		 * we can use match[0].rm_[se]o without further checks

 sym_match_arr can be NULL if no match, but free(NULL) is OK */

/*

 * When we check for recursive dependencies we use a stack to save

 * current state so we can print out relevant info to user.

 * The entries are located on the call stack so no need to free memory.

 * Note insert() remove() must always match to properly clear the stack.

/*

 * Called when we have detected a recursive dependency.

 * check_top point to the top of the stact so we use

 * the ->prev pointer to locate the bottom of the stack.

 for choice values find the menu entry (used below) */

 return NULL when dependencies are OK */

 for choice groups start the check with main choice symbol */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>

 return true if 'path' exists, false otherwise */

 return true if 'path' exists and it is a directory, false otherwise */

 return true if the given two files are the same, false otherwise */

/*

 * Create the parent directory of the given path.

 *

 * For example, if 'include/config/auto.conf' is given, create 'include/config'.

 Remove the base name. Just return if nothing is left */

 Just in case it is an absolute path */

 skip if the directory exists */

 touch depfile for symbol 'name' */

 check overflow: prefix + name + '\0' must fit in buffer. */

 fall through */

 fall through */

 fall through */

 fall through */

					/*

					 * Reading from include/config/auto.conf

					 * If CONFIG_FOO previously existed in

					 * auto.conf but it is missing now,

					 * include/config/FOO must be touched.

 check that calculated value agrees with saved value */

 no previous value and not saved */

 maybe print value in verbose mode... */

			/* Reset values of generates values, so they'll appear

			 * as new, if they should become visible, but that

			 * doesn't quite work if the Kconfig and the saved

			 * configuration disagree.

 Reset a string value if it's out of range */

	.prefix = "/*",

 The returned pointer must be freed on the caller side */

/*

 * Kconfig configuration printer

 *

 * This printer is used when generating the resulting configuration after

 * kconfig invocation and `defconfig' files. Unset symbol might be omitted by

 * passing a non-NULL argument to the printer.

 fall through */

/*

 * Write out a minimal config.

 * All values that has default values are skipped as this is redundant.

 Traverse all menus to find all relevant symbols */

 If we cannot change the symbol - skip */

 If symbol equals to default value - skip */

			/*

			 * If symbol is a choice value and equals to the

			 * default for a choice - skip.

			 * But only if value is bool and equal to "y" and

			 * choice is not "optional".

			 * (If choice is "optional" then all values can be "n")

 write a dependency file as used by kbuild to track dependencies */

 check truncation */

 check truncation */

 error check for all fprintf() calls */

				/*

				 * symbol has old and new value,

				 * so compare them...

				/*

				 * If there is no old value, only 'no' (unset)

				 * is allowed as new value.

 There is neither an old nor a new value. */

		/* else

		 *	There is an old value, but no new value ('no' (unset)

		 *	isn't saved in auto.conf, so the old value is always

		 *	different from 'no').

 check truncation */

 check possible errors in conf_write_heading() and print_symbol() */

	/*

	 * Create include/config/auto.conf. This must be the last step because

	 * Kbuild has a dependency on auto.conf and this marks the successful

	 * completion of the previous steps.

	/*

	 * Set all non-assinged choice values to no

 clear VALID to get value calculated */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>

/*

 * Rewrites 'm' to 'm' && MODULES, so that it evaluates to 'n' when running

 * without modules

 change 'm' into 'm' && MODULES */

 append property to the prop list of symbol */

 Apply all upper menus' visibilities to actual prompts. */

			/*

			 * Do not add a reference to the menu's visibility

			 * expression but use a copy of it. Otherwise the

			 * expression reduction functions will modify

			 * expressions that have multiple references which

			 * can cause unwanted side effects.

		/*

		 * This menu node has children. We (recursively) process them

		 * and propagate parent dependencies before moving on.

 find the first choice value to find out choice type */

 set the type of the remaining choice values */

			/*

			 * Use the choice itself as the parent dependency of

			 * the contained items. This turns the mode of the

			 * choice into an upper bound on the visibility of the

			 * choice value symbols.

 Menu node for 'menu', 'if' */

 For each child menu node... */

			/*

			 * Propagate parent dependencies to the child menu

			 * node, also rewriting and simplifying expressions

				/*

				 * Note: For symbols, all prompts are included

				 * too in the symbol's own property list

				/*

				 * For non-symbol menu nodes, we just need to

				 * handle the prompt

 For each property... */

					/*

					 * Two possibilities:

					 *

					 * 1. The property lacks dependencies

					 *    and so isn't location-specific,

					 *    e.g. an 'option'

					 *

					 * 2. The property belongs to a symbol

					 *    defined in multiple locations and

					 *    is from some other location. It

					 *    will be handled there in that

					 *    case.

					 *

					 * Skip the property.

				/*

				 * Propagate parent dependencies to the

				 * property's condition, rewriting and

				 * simplifying expressions at the same time

				/*

				 * Handle selects and implies, which modify the

				 * dependencies of the selected/implied symbol

		/*

		 * Recursively process children in the same fashion before

		 * moving on

		/*

		 * Automatic submenu creation. If sym is a symbol and A, B, C,

		 * ... are consecutive items (symbols, menus, ifs, etc.) that

		 * all depend on sym, then the following menu structure is

		 * created:

		 *

		 *	sym

		 *	 +-A

		 *	 +-B

		 *	 +-C

		 *	 ...

		 *

		 * This also works recursively, giving the following structure

		 * if A is a symbol and B depends on A:

		 *

		 *	sym

		 *	 +-A

		 *	 | +-B

		 *	 +-C

		 *	 ...

 Examine consecutive elements after sym */

 No dependency, quit */

 Absolute dependency, put in submenu */

			/*

			 * Also consider it a dependency on sym if our

			 * dependencies contain sym and are a "superset" of

			 * sym's dependencies, e.g. '(sym || Q) && R' when sym

			 * depends on R.

			 *

			 * Note that 'R' might be from an enclosing menu or if,

			 * making this a more common case than it might seem.

 Not superset, quit */

 Superset, put in submenu */

			/* Non-tristate choice values of tristate choices must

			 * depend on the choice being set to Y. The choice

			 * values' dependencies were propagated to their

			 * properties above, so the change here must be re-

			 * propagated.

		/*

		 * This code serves two purposes:

		 *

		 * (1) Flattening 'if' blocks, which do not specify a submenu

		 *     and only add dependencies.

		 *

		 *     (Automatic submenu creation might still create a submenu

		 *     from an 'if' before this code runs.)

		 *

		 * (2) "Undoing" any automatic submenus created earlier below

		 *     promptless symbols.

		 *

		 * Before:

		 *

		 *	A

		 *	if ... (or promptless symbol)

		 *	 +-B

		 *	 +-C

		 *	D

		 *

		 * After:

		 *

		 *	A

		 *	if ... (or promptless symbol)

		 *	B

		 *	C

		 *	D

 Check properties connected to this symbol */

	/*

	 * For non-optional choices, add a reverse dependency (corresponding to

	 * a select) of '<visibility> && m'. This prevents the user from

	 * setting the choice mode to 'n' when the choice is visible.

	 *

	 * This would also work for non-choice symbols, but only non-optional

	 * choices clear SYMBOL_OPTIONAL as of writing. Choices are implemented

	 * as a type of symbol.

/*

 * Determine if a menu is empty.

 * A menu is considered empty if it contains no or only

 * invisible entries.

	/*

	 * Most prompts in Linux have visibility that exactly matches their

	 * dependencies. For these, we print only the dependencies to improve

	 * readability. However, prompts with inline "if" expressions and

	 * prompts with a parent that has a "visible if" expression have

	 * differing dependencies and visibility. In these rare cases, we

	 * print both.

			/*

			 * There is not enough room to put the hint at the

			 * beginning of the "Prompt" line. Put the hint on the

			 * last "Location" line even when it would belong on

			 * the former.

 The real rootmenu prompt is ugly */

/*

 * head is optional and may be NULL

 Print the definitions with prompts before the ones without */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>

 * Copyright (C) 2015 Boris Barbulovski <bbarbulovski@gmail.com>

/**

 * Reads a list of integer values from the application settings.

/**

 * Writes a list of integer values to the application settings.

/*

 * update the displayed of a menu entry

			/* a menuconfig entry is displayed differently

			 * depending whether it's at the view root or a child.

 the menu entry changed, so update all list items */

/*

 * construct a menu entry

 Allow to edit "int", "hex", and "string" in-place in

 the data column. Unfortunately, you cannot specify

 the flags per column. Set ItemIsEditable for all

 columns here, and check the column in createEditor().

/*

 * destruct a menu entry

 Only the data column is editable

 You cannot edit invisible menus

 If this is not a QLineEdit, use the parent's default.

 (does this happen?)

/*

 * update all the children of a menu entry

 *   removes/adds the entries from the parent widget as necessary

 *

 * parent: either the menu list widget or a menu entry widget

 * menu: entry to be updated

QPoint p(contentsToViewport(e->pos()));

printf("contentsMousePressEvent: %d,%d\n", p.x(), p.y());

 4 is Hardcoded image offset. There might be a way to do it properly.

printf("contentsMouseReleaseEvent: %d,%d\n", p.x(), p.y());

QPoint p(contentsToViewport(e->pos()));

printf("contentsMouseMoveEvent: %d,%d\n", p.x(), p.y());

printf("contentsMouseDoubleClickEvent: %d,%d\n", p.x(), p.y());

 Seek for exact match */

 Seek for the menu which holds the symbol */

 Symbol is not visible as a menu */

/*

 * Construct the complete config widget

 set up icons

 create config tree

 Set saveAction's initial state

 init tool bar

 create file menu

 create edit menu

 create options menu

 create help menu

if (listMode == "split")*/

 UI setup done, restore splitter positions

 Select the config view */

/*

 * ask for saving configuration before quitting

bugzilla.kernel.org/\n"

zconfdump(stdout);

zconfdump(stdout);

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>

/*

 * expr_eliminate_eq() helper.

 *

 * Walks the two expression trees given in 'ep1' and 'ep2'. Any node that does

 * not have type 'type' (E_OR/E_AND) is considered a leaf, and is compared

 * against all other leaves. Two equal leaves are both replaced with either 'y'

 * or 'n' as appropriate for 'type', to be eliminated later.

 Recurse down to leaves */

 e1 and e2 are leaves. Compare them. */

 e1 and e2 are equal leaves. Prepare them for elimination. */

/*

 * Rewrites the expressions 'ep1' and 'ep2' to remove operands common to both.

 * Example reductions:

 *

 *	ep1: A && B           ->  ep1: y

 *	ep2: A && B && C      ->  ep2: C

 *

 *	ep1: A || B           ->  ep1: n

 *	ep2: A || B || C      ->  ep2: C

 *

 *	ep1: A && (B && FOO)  ->  ep1: FOO

 *	ep2: (BAR && B) && A  ->  ep2: BAR

 *

 *	ep1: A && (B || C)    ->  ep1: y

 *	ep2: (C || B) && A    ->  ep2: y

 *

 * Comparisons are done between all operands at the same "level" of && or ||.

 * For example, in the expression 'e1 && (e2 || e3) && (e4 || e5)', the

 * following operands will be compared:

 *

 *	- 'e1', 'e2 || e3', and 'e4 || e5', against each other

 *	- e2 against e3

 *	- e4 against e5

 *

 * Parentheses are irrelevant within a single level. 'e1 && (e2 && e3)' and

 * '(e1 && e2) && e3' are both a single level.

 *

 * See __expr_eliminate_eq() as well.

/*

 * Returns true if 'e1' and 'e2' are equal, after minor simplification. Two

 * &&/|| expressions are considered equal if every operand in one expression

 * equals some operand in the other (operands do not need to appear in the same

 * order), recursively.

	/*

	 * A NULL expr is taken to be yes, but there's also a different way to

	 * represent yes. expr_is_yes() checks for either representation.

 panic */;

/*

 * Recursively performs the following simplifications in-place (as well as the

 * corresponding simplifications with swapped operands):

 *

 *	expr && n  ->  n

 *	expr && y  ->  expr

 *	expr || n  ->  expr

 *	expr || y  ->  y

 *

 * Returns the optimized expression.

/*

 * bool FOO!=n => FOO

 FOO!=n -> FOO

/*

 * e1 || e2 -> ?

 (a='y') || (a='m') -> (a!='n')

 (a='y') || (a='n') -> (a!='m')

 (a='m') || (a='n') -> (a!='y')

 (a) && (a='y') -> (a='y')

 (a) && (a!='n') -> (a)

 (a) && (a!='m') -> (a='y')

 (a='b') && (a!='c') -> 'b'='c' ? 'n' : a='b'

 (a='b') && (a!='c') -> 'b'='c' ? 'n' : a='b'

 (a!='y') && (a!='n') -> (a='m')

 (a!='y') && (a!='m') -> (a='n')

 (a!='m') && (a!='n') -> (a='m')

/*

 * expr_eliminate_dups() helper.

 *

 * Walks the two expression trees given in 'ep1' and 'ep2'. Any node that does

 * not have type 'type' (E_OR/E_AND) is considered a leaf, and is compared

 * against all other leaves to look for simplifications.

 Recurse down to leaves */

 e1 and e2 are leaves. Compare and process them. */

/*

 * Rewrites 'e' in-place to remove ("join") duplicate and other redundant

 * operands.

 *

 * Example simplifications:

 *

 *	A || B || A    ->  A || B

 *	A && B && A=y  ->  A=y && B

 *

 * Returns the deduplicated expression.

 No simplifications done in this pass. We're done */

/*

 * Performs various simplifications involving logical operators and

 * comparisons.

 *

 * Allocates and returns a new expression.

 !!a -> a

 !a='x' -> a!='x'

 !a<='x' -> a>'x'

 !a<'x' -> a>='x'

 !(a || b) -> !a && !b

 !(a && b) -> !a || !b

 !'y' -> 'n'

 !'m' -> 'm'

 !'n' -> 'y'

/*

 * Inserts explicit comparisons of type 'type' to symbol 'sym' into the

 * expression 'e'.

 *

 * Examples transformations for type == E_UNEQUAL, sym == &symbol_no:

 *

 *	A              ->  A!=n

 *	!A             ->  A=n

 *	A && B         ->  !(A=n || B=n)

 *	A || B         ->  !(A=n && B=n)

 *	A && (B || C)  ->  !(A=n || (B=n && C=n))

 *

 * Allocates and returns a new expression.

 panic */;

 if (k1 == k_signed && k2 == k_signed) */

/*

 * Transform the top level "||" tokens into newlines and prepend each

 * line with a minus. This makes expressions much easier to read.

 * Suitable for reverse dependency expressions.

 SPDX-License-Identifier: GPL-2.0+

/*

 *  yesno.c -- implements the yes/no box

 *

 *  ORIGINAL AUTHOR: Savio Lam (lam836@cs.cuhk.hk)

 *  MODIFIED FOR LINUX KERNEL CONFIG BY: William Roadcap (roadcap@cfw.com)

/*

 * Display termination buttons

/*

 * Display a dialog box with two buttons - Yes and No

 center dialog box on screen */

 ESC pressed */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  textbox.c -- implements the text box

 *

 *  ORIGINAL AUTHOR: Savio Lam (lam836@cs.cuhk.hk)

 *  MODIFIED FOR LINUX KERNEL CONFIG BY: William Roadcap (roadcap@cfw.com)

/*

 * refresh window content

 Restore cursor position */

/*

 * Display text from a file in a dialog box.

 *

 * keys is a null-terminated array

 * update_text() may not add or remove any '\n' or '\0' in tbuf

 page is pointer to start of page to be displayed */

 center dialog box on screen */

 Create window for box region, used for scrolling text */

 register the new window, along with its borders */

 Save cursor position */

 Print first page of text */

 Exit */

 First page */

 Last page */

 point to last char in buf */

 Previous line */

 Previous page */

 Next line */

 Next page */

 Beginning of line */

 Scroll left */

 Reprint current page to scroll horizontally */

 Scroll right */

 Reprint current page to scroll horizontally */

/*

 * Go back 'n' lines in text. Called by dialog_textbox().

 * 'page' will be updated to point to the desired line in 'buf'.

 Go back 'n' lines */

/*

 * Print a new page of text.

/*

 * Print a new line of text.

 Scroll horizontally */

 move cursor to correct line */

 Clear 'residue' of previous line */

/*

 * Return current line of text. Called by dialog_textbox() and print_line().

 * 'page' should point to start of current line before calling, and will be

 * updated to point to start of next line.

 Truncate lines longer than MAX_LEN characters */

 move past '\n' */

/*

 * Print current position

 SPDX-License-Identifier: GPL-2.0+

/*

 *  inputbox.c -- implements the input box

 *

 *  ORIGINAL AUTHOR: Savio Lam (lam836@cs.cuhk.hk)

 *  MODIFIED FOR LINUX KERNEL CONFIG BY: William Roadcap (roadcap@cfw.com)

/*

 *  Print the termination buttons

/*

 * Display a dialog box for inputing a string

 center dialog box on screen */

 Draw the input field box */

 Set up the initial value */

 Input box selected */

 ^H */

 ^? */

 Alarm user about overflow */

 Indicates "Help" button is selected */

 Indicates input box is selected */

 Indicates "OK" button is selected */

 Indicates "OK" button is selected */

 Indicates "Help" button is selected */

 Indicates input box is selected */

 ESC pressed */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  util.c

 *

 *  ORIGINAL AUTHOR: Savio Lam (lam836@cs.cuhk.hk)

 *  MODIFIED FOR LINUX KERNEL CONFIG BY: William Roadcap (roadcap@cfw.com)

 Needed in signal handler in mconf.c */

/*

 * Select color theme

/*

 * Setup for color display

/*

 * Set window to attribute 'attr'

 Display background title if it exists ... - SLH */

 3 is for the arrow and spaces */

/*

 * Do some initialization for dialog

 Init curses */

 Get current cursor position for signal handler in mconf.c */

/*

 * End using dialog functions.

 move cursor back to original position */

/* Print the title of the dialog. Center the title and truncate

 * tile if wider than dialog (- 2 chars).

/*

 * Print a string of text in a window, automatically wrap around to the

 * next line if the string is too long to fit on one line. Newline

 * characters '\n' are properly processed.  We start on a new line

 * if there is no room for at least 4 nonblanks following a double-space.

 If prompt is short */

			/* Wrap to next line if either the word does not fit,

			   or it is the first word of a new sentence, and it is

 Move to the next line if the word separator was a newline */

 double space */

/*

 * Print a button

/*

 * Draw a rectangular box with line drawing characters

/*

 * Draw shadows along the right and bottom edge to give a more 3D look

 * to the boxes

 Whether terminal supports color? */

/*

 *  Return the position of the first alphabetic character in a string.

/*

 * ncurses uses ESC to detect escaped char sequences. This resutl in

 * a small timeout before ESC is actually delivered to the application.

 * lxdialog suggest <ESC> <ESC> which is correctly translated to two

 * times esc. But then we need to ignore the second esc to avoid stepping

 * out one menu too much. Filter away all escaped key sequences since

 * keypad(FALSE) turn off ncurses support for escape sequences - and that's

 * needed to make notimeout() do as expected.

 redraw screen in new size */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  menubox.c -- implements the menu box

 *

 *  ORIGINAL AUTHOR: Savio Lam (lam836@cs.cuhk.hk)

 *  MODIFIED FOR LINUX KERNEL CONFIG BY: William Roadcap (roadcapw@cfw.com)

/*

 *  Changes by Clifford Wolf (god@clifford.at)

 *

 *  [ 1998-06-13 ]

 *

 *    *)  A bugfix for the Page-Down problem

 *

 *    *)  Formerly when I used Page Down and Page Up, the cursor would be set

 *        to the first position in the menu box.  Now lxdialog is a bit

 *        smarter and works more like other menu systems (just have a look at

 *        it).

 *

 *    *)  Formerly if I selected something my scrolling would be broken because

 *        lxdialog is re-invoked by the Menuconfig shell script, can't

 *        remember the last scrolling position, and just sets it so that the

 *        cursor is at the bottom of the box.  Now it writes the temporary file

 *        lxdialog.scrltmp which contains this information. The file is

 *        deleted by lxdialog if the user leaves a submenu or enters a new

 *        one, but it would be nice if Menuconfig could make another "rm -f"

 *        just to be sure.  Just try it out - you will recognise a difference!

 *

 *  [ 1998-06-14 ]

 *

 *    *)  Now lxdialog is crash-safe against broken "lxdialog.scrltmp" files

 *        and menus change their size on the fly.

 *

 *    *)  If for some reason the last scrolling position is not saved by

 *        lxdialog, it sets the scrolling so that the selected item is in the

 *        middle of the menu box, not at the bottom.

 *

 * 02 January 1999, Michael Elizabeth Chastain (mec@shout.net)

 * Reset 'scroll' to 0 if the value from lxdialog.scrltmp is bogus.

 * This fixes a bug in Menuconfig where using ' ' to descend into menus

 * would leave mis-synchronized lxdialog.scrltmp files lying around,

 * fscanf would read in 'scroll', and eventually that value would get used.

/*

 * Print menu item

 Clear 'residue' of last item */

/*

 * Print the scroll indicators.

/*

 * Display the termination buttons.

 scroll up n lines (n may be negative) */

 Scroll menu up */

/*

 * Display a menu for choosing among a number of options

 center dialog box on screen */

 create new window for the menu */

 draw a box around the menu items */

 Set choice to default item */

 get the saved scroll info */

 Print the menu */

 Remove highligt of current item */

 Scroll menu down */

 Scroll menu up */

 wait for another key press */

 save scroll info */

 ESC pressed */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  checklist.c -- implements the checklist box

 *

 *  ORIGINAL AUTHOR: Savio Lam (lam836@cs.cuhk.hk)

 *     Stuart Herbert - S.Herbert@sheffield.ac.uk: radiolist extension

 *     Alessandro Rubini - rubini@ipvvis.unipv.it: merged the two

 *  MODIFIED FOR LINUX KERNEL CONFIG BY: William Roadcap (roadcap@cfw.com)

/*

 * Print list item

 Clear 'residue' of last item */

/*

 * Print the scroll indicators.

/*

 *  Display the termination buttons

/*

 * Display a dialog box with a list of options that can be turned on or off

 * in the style of radiolist (only one option turned on at a time).

 which item to highlight */

 center dialog box on screen */

 create new window for the list */

 draw a box around the list items */

 Find length of longest item in order to center checklist */

 Print the list */

 Scroll list down */

 De-highlight current first item */

 wait for another key press */

 Scroll list up */

 De-highlight current last item before scrolling up */

 wait for another key press */

 De-highlight current item */

 Highlight new item */

 wait for another key press */

 fall-through */

 Now, update everything... */

 ESC pressed */

 SPDX-License-Identifier: GPL-2.0

/*

 * Set up the first task table, touch at your own risk!. Base=0,

 * limit=0x1fffff (=2MB)

 50 usec default slack */

 no locks held yet */

/*

 * Initial thread structure. Alignment of this is handled by a special

 * linker map entry.

 SPDX-License-Identifier: GPL-2.0

 starting block # of image */

/*

 * This routine tries to find a RAM disk image to load, and returns the

 * number of blocks to read for a non-compressed image, 0 if the image

 * is a compressed image, and -1 if an image with the right magic

 * numbers could not be found.

 *

 * We currently check for the following magic numbers:

 *	minix

 *	ext2

 *	romfs

 *	cramfs

 *	squashfs

 *	gzip

 *	bzip2

 *	lzma

 *	xz

 *	lzo

 *	lz4

	/*

	 * Read block 0 to test for compressed kernel

 romfs is at block zero too */

 squashfs is at block zero too */

	/*

	 * Read 512 bytes further to check if cramfs is padded

	/*

	 * Read block 1 to test for minix and ext2 superblock

 Try minix */

 Try ext2 */

	/*

	 * NOTE NOTE: nblocks is not actually blocks but

	 * the number of kibibytes of data to load into a ramdisk.

	/*

	 * OK, time to copy in the data

 SPDX-License-Identifier: GPL-2.0

 do_proc_dointvec cannot handle kdev_t */

 move initrd over / and chdir/chroot in initrd root */

 mount initrd on rootfs' /root */

	/*

	 * In case that a resume from disk is carried out by linuxrc or one of

	 * its children, we need to tell the freezer not to wait for us.

 move initrd to rootfs' /old */

 switch root and cwd back to / of rootfs */

		/*

		 * Load the initrd data into /dev/ram0. Execute it as initrd

		 * unless /dev/ram0 is supposed to be our actual root device,

		 * in that case the ram disk is just set up here, and gets

		 * mounted in the normal path.

 SPDX-License-Identifier: GPL-2.0

/* calibrate.c: default delay calibration

 *

 * Excised from init/main.c

 *  Copyright (C) 1991, 1992  Linus Torvalds

/* This routine uses the read_current_timer() routine and gets the

 * loops per jiffy directly, instead of guessing it using delay().

 * Also, this code tries to handle non-maskable asynchronous events

 * (like SMIs)

 index of measured_times with max/min values or not set */

	/*

	 * A simple loop like

	 *	while ( jiffies < start_jiffies+1)

	 *		start = read_current_timer();

	 * will not do. As we don't really know whether jiffy switch

	 * happened first or timer_value was read first. And some asynchronous

	 * event can happen between these two events introducing errors in lpj.

	 *

	 * So, we do

	 * 1. pre_start <- When we are sure that jiffy switch hasn't happened

	 * 2. check jiffy switch

	 * 3. start <- timer value before or after jiffy switch

	 * 4. post_start <- When we are sure that jiffy switch has happened

	 *

	 * Note, we don't know anything about order of 2 and 3.

	 * Now, by looking at post_start and pre_start difference, we can

	 * check whether any asynchronous event happened or not

		/*

		 * If the upper limit and lower limit of the timer_rate is

		 * >= 12.5% apart, redo calibration.

	/*

	 * Find the maximum & minimum - if they differ too much throw out the

	 * one with the largest difference from the mean and try again...

 compute the estimate */

 if range is within 12% let's take it */

 ok - drop the worse value and try again... */

/*

 * This is the number of bits of precision for the loops_per_jiffy.  Each

 * time we refine our estimate after the first takes 1.5/HZ seconds, so try

 * to start with a good estimate.

 * For the boot cpu we can skip the delay calibration and assign it a value

 * calculated based on the timer frequency.

 * For the rest of the CPUs we cannot assume that the timer frequency is same as

 * the cpu frequency, hence do the calibration for those.

 First stage - slowly accelerate to find initial bounds */

 wait for "start of" clock tick */

 nothing */

 Go .. */

	/*

	 * We overshot, so retreat to a clear underestimate. Then estimate

	 * the largest likely undershoot. This defines our chop bounds.

	/*

	 * Do a binary approximation to get lpj set to

	 * equal one clock (up to LPS_PREC bits)

 nothing */

 longer than 1 tick */

	/*

	 * If we incremented every single time possible, presume we've

	 * massively underestimated initially, and retry with a higher

	 * start, and larger range. (Only seen on x86_64, due to SMIs)

/*

 * Check if cpu calibration delay is already known. For example,

 * some processors with multi-core sockets may have all cores

 * with the same calibration delay.

 *

 * Architectures should override this function if a faster calibration

 * method is available.

/*

 * Indicate the cpu delay calibration is done. This can be used by

 * architectures to stop accepting delay timer registrations after this point.

 SPDX-License-Identifier: GPL-2.0

 sys_write only can write MAX_RW_COUNT aka 2G-4K bytes at most */

 link hash */

 cpio header parsing */

 breaks in y2106 */

 FSM */

 index of next byte to be processed in inbuf */

 Ignore the virtul address computed during device tree parsing */

	/*

	 * Round the memory region to page boundaries as per free_initrd_mem()

	 * This allows us to detect whether the pages overlapping the initrd

	 * are in use, but more importantly, reserves the entire set of pages

	 * as we don't want these pages allocated for other purposes.

 Now convert initrd to virtual addresses */

	/*

	 * If the initrd region is overlapped with crashkernel reserved region,

	 * free only memory that is not part of crashkernel region.

	/*

	 * Initialize initrd memory region since the kexec boot does not do.

 CONFIG_KEXEC_CORE */

 CONFIG_BLK_DEV_RAM */

 Load the built in initramfs */

 Failed to decompress INTERNAL initramfs */

	/*

	 * If the initrd region is overlapped with crashkernel reserved region,

	 * free only memory that is not part of crashkernel region.

		/*

		 * Something before rootfs_initcall wants to access

		 * the filesystem/initramfs. Probably a bug. Make a

		 * note, avoid deadlocking the machine, and let the

		 * caller's access fail as it used to.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * init/noinitramfs.c

 *

 * Copyright (C) 2006, NXP Semiconductors, All Rights Reserved

 * Author: Jean-Paul Saman <jean-paul.saman@nxp.com>

/*

 * Create a simple rootfs that is similar to the default initramfs

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/init/version.c

 *

 *  Copyright (C) 1992  Theodore Ts'o

 *

 *  May be freely distributed as part of Linux.

 FIXED STRINGS! Don't touch! */

 SPDX-License-Identifier: GPL-2.0-only

/**

 * match_dev_by_uuid - callback for finding a partition using its uuid

 * @dev:	device passed in by the caller

 * @data:	opaque pointer to the desired struct uuidcmp to match

 *

 * Returns 1 if the device matches, and 0 otherwise.

/**

 * devt_from_partuuid - looks up the dev_t of a partition by its UUID

 * @uuid_str:	char array containing ascii UUID

 *

 * The function will return the first partition which contains a matching

 * UUID value in its partition_meta_info struct.  This does not search

 * by filesystem UUIDs.

 *

 * If @uuid_str is followed by a "/PARTNROFF=%d", then the number will be

 * extracted and used as an offset from the partition identified by the UUID.

 *

 * Returns the matching dev_t on success or 0 on failure.

 Check for optional partition number offset attributes. */

 Explicitly fail on poor PARTUUID syntax. */

		/*

		 * Attempt to find the requested partition by adding an offset

		 * to the partition number found by UUID.

/**

 * match_dev_by_label - callback for finding a partition using its label

 * @dev:	device passed in by the caller

 * @data:	opaque pointer to the label to match

 *

 * Returns 1 if the device matches, and 0 otherwise.

	/*

	 * Try non-existent, but valid partition, which may only exist after

	 * opening the device, like partitioned md devices.

 try disk name without <part number> */

 try disk name without p<part number> */

 CONFIG_BLOCK */

/*

 *	Convert a name into device number.  We accept the following variants:

 *

 *	1) <hex_major><hex_minor> device number in hexadecimal represents itself

 *         no leading 0x, for example b302.

 *	2) /dev/nfs represents Root_NFS (0xff)

 *	3) /dev/<disk_name> represents the device number of disk

 *	4) /dev/<disk_name><decimal> represents the device number

 *         of partition - device number of disk plus the partition number

 *	5) /dev/<disk_name>p<decimal> - same as the above, that form is

 *	   used when disk name of partitioned disk ends on a digit.

 *	6) PARTUUID=00112233-4455-6677-8899-AABBCCDDEEFF representing the

 *	   unique id of a partition if the partition table provides it.

 *	   The UUID may be either an EFI/GPT UUID, or refer to an MSDOS

 *	   partition using the format SSSSSSSS-PP, where SSSSSSSS is a zero-

 *	   filled hex representation of the 32-bit "NT disk signature", and PP

 *	   is a zero-filled hex representation of the 1-based partition number.

 *	7) PARTUUID=<UUID>/PARTNROFF=<int> to select a partition in relation to

 *	   a partition with a known unique id.

 *	8) <major>:<minor> major and minor number of the device separated by

 *	   a colon.

 *	9) PARTLABEL=<name> with name being the GPT partition label.

 *	   MSDOS partitions do not support labels!

 *	10) /dev/cifs represents Root_CIFS (0xfe)

 *

 *	If name doesn't have fall into the categories above, we return (0,0).

 *	block_class is used to check if something is a disk name. If the disk

 *	name contains slashes, the device name has them replaced with

 *	bangs.

 This can return zero length strings. Caller should check */

 init_mount() requires a full page as fifth argument */

 zero-pad. init_mount() will make sure it's terminated */

	        /*

		 * Allow the user to distinguish between failed sys_open

		 * and bad superblock on root device.

		 * and give them a list of the available devices

	/*

	 * The server or network may not be ready, so try several

	 * times.  Stop after a few tries in case the client wants

	 * to fall back to other boot methods.

 Wait, in case the server refused us immediately */

/*

 * Prepare the namespace - decide what/where to mount, load ramdisks, etc.

	/*

	 * wait for the known devices to complete their probing

	 *

	 * Note: this is a potential source of long boot delays.

	 * For example, it is not atypical to wait 5 seconds here

	 * for the touchpad of a laptop to initialize.

 wait for any asynchronous scanning to complete */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/init/main.c

 *

 *  Copyright (C) 1991, 1992  Linus Torvalds

 *

 *  GK 2/5/95  -  Changed to support mounting root fs via NFS

 *  Added initrd & change_root: Werner Almesberger & Hans Lermen, Feb '96

 *  Moan early if gcc is old, avoiding bogus kernels - Paul Gortmaker, May '96

 *  Simplified starting of init:  Michael A. Griffith <grif@acm.org>

 Enable initcall_debug */

/*

 * Debug helper: via this flag we know that we are in 'early bootup code'

 * where only the boot processor is running with IRQ disabled.  This means

 * two things - IRQ must not be enabled before the flag is cleared and some

 * operations which are not allowed with IRQ disabled are allowed while the

 * flag is set.

/*

 * Boot command-line arguments

 Default late time init is NULL. archs can override this later. */

 Untouched command line saved by arch-specific code. */

 Untouched saved command line (eg. for /proc) */

 Command line for parameter parsing */

 Untouched extra command line */

 Extra init arguments */

 Is bootconfig on command line? */

/*

 * Used to generate warnings if static_key manipulation functions are used

 * before jump_label_init is called.

/*

 * If set, this is an indication to the drivers that reset the underlying

 * device before going ahead with the initialization otherwise driver might

 * rely on the BIOS and skip the reset operation.

 *

 * This is useful if kernel is booting in an unreliable environment.

 * For ex. kdump situation where previous kernel has crashed, BIOS has been

 * skipped and devices will be in unknown state.

				/* Already done in parse_early_param?

				 * (Needs exact match on param part).

				 * Keep iterating, as we can have early

/*

 * This should be approx 2 Bo*oMips to start (note initial shift), and will

 * still work even if initially too large, it will just take slightly longer

	/*

	 * Only update loglevel value when a correct setting was passed,

	 * to prevent blind crashes (when loglevel being set to 0) that

	 * are quite hard to debug

	/*

	 * Since Grub may align the size of initrd to 4, we must

	 * check the preceding 3 bytes as well.

 Remove bootconfig from initramfs/initrd */

 Make an extra command line under given key word */

 Count required buffer size */

 The 'bootconfig' has been handled by bootconfig_params(). */

 Cut out the bootconfig data even if we have no bootconfig option */

 parse_args() stops at the next param of '--' and returns an address */

 keys starting with "kernel." are passed via cmdline */

 Also, "init." keys are init arguments */

 !CONFIG_BOOT_CONFIG */

 Remove bootconfig data from initrd */

 CONFIG_BOOT_CONFIG */

 Change NUL term back to "=", to make "param" the whole string. */

 param=val or param="val"? */

 Anything after -- gets handed straight to init. */

/*

 * Unknown boot options get handed to init, unless they look like

 * unused parameters (modprobe will find them in /proc/cmdline).

 Handle obsolete-style parameters */

 Unused module parameter. */

 Environment option */

 Command line option */

	/*

	 * In case LILO is going to boot us with default command line,

	 * it prepends "auto" before the whole cmdline which makes

	 * the shell think it should execute a script with such name.

	 * So we ignore all arguments entered _before_ init=... [MJ]

 See "auto" comment in init_setup */

/*

 * We need to store the untouched command line for future reference.

 * We also need to store the touched command line since the parameter

 * parsing is performed in place, and we should allow a component to

 * store reference of name/value for future reference.

 for " -- " */

		/*

		 * We have to put extra_command_line before boot command

		 * lines because there could be dashes (separator of init

		 * command line) in the command lines.

		/*

		 * Append supplemental init boot args to saved_command_line

		 * so that user can check what command line options passed

		 * to init.

		 * The order should always be

		 * " -- "[bootconfig init-param][cmdline init-param]

 strlen(extra_init_args) */

/*

 * We need to finalize in a non-__init function or else race conditions

 * between the root thread and the init thread may cause start_kernel to

 * be reaped by free_initmem before the root thread has proceeded to

 * cpu_idle.

 *

 * gcc-3.4 accidentally inlines this function, so use noinline.

	/*

	 * We need to spawn init first so that it obtains pid 1, however

	 * the init task will end up wanting to create kthreads, which, if

	 * we schedule it before we create kthreadd, will OOPS.

	/*

	 * Pin init on the boot CPU. Task migration is not properly working

	 * until sched_init_smp() has been run. It will set the allowed

	 * CPUs for init to the non isolated CPUs.

	/*

	 * Enable might_sleep() and smp_processor_id() checks.

	 * They cannot be enabled earlier because with CONFIG_PREEMPTION=y

	 * kernel_thread() would trigger might_sleep() splats. With

	 * CONFIG_PREEMPT_VOLUNTARY=y the init task might have scheduled

	 * already, but it's stuck on the kthreadd_done completion.

	/*

	 * The boot idle thread must execute schedule()

	 * at least once to get things moving:

 Call into cpu_idle with preempt disabled */

 Check for early params. */

 We accept everything at this stage. */

 Arch code calls this early on, or if not, just before other parsing. */

 All fall through to do_early_param. */

 Report memory auto-initialization states for this boot. */

/*

 * Set up kernel memory allocators

	/*

	 * page_ext requires contiguous pages,

	 * bigger than MAX_ORDER unless SPARSEMEM.

 page_owner must be initialized after buddy is ready */

 Should be run before the first non-init thread is created */

 Should be run after espfix64 is set up. */

	/*

	 * Determine how many options we have to print out, plus a space

	 * before each

 null terminator */

 Start at unknown_options[1] to skip the initial space */

	/*

	 * Interrupts are still disabled. Do necessary setups, then

	 * enable them.

 arch-specific boot-cpu hooks */

 parameters may set static keys */

	/*

	 * These use large bootmem allocations and must precede

	 * kmem_cache_init()

 trace_printk can be enabled here */

	/*

	 * Set up the scheduler prior starting any interrupts (such as the

	 * timer interrupt). Full topology setup happens at smp_init()

	 * time - but meanwhile we still have a functioning scheduler.

	/*

	 * Set up housekeeping before setting up workqueues to allow the unbound

	 * workqueue to take non-housekeeping into account.

	/*

	 * Allow workqueue creation and work item queueing/cancelling

	 * early.  Work item execution depends on kthreads and starts after

	 * workqueue_init().

 Trace events are available after this */

 init some links before init_ISA_irqs() */

	/*

	 * For best initial stack canary entropy, prepare it after:

	 * - setup_arch() for any UEFI RNG entropy and boot cmdline access

	 * - timekeeping_init() for ktime entropy used in rand_initialize()

	 * - rand_initialize() to get any arch-specific entropy like RDRAND

	 * - add_latent_entropy() to get any latent entropy

	 * - adding command line entropy

	/*

	 * HACK ALERT! This is early. We're enabling the console before

	 * we've done PCI setups etc, and console_init() must be aware of

	 * this. But we do want output early, in case something goes wrong.

	/*

	 * Need to run this when irqs are enabled, because it wants

	 * to self-test [hard/soft]-irqs on/off lock inversion bugs

	 * too:

	/*

	 * This needs to be called before any devices perform DMA

	 * operations that might use the SWIOTLB bounce buffers. It will

	 * mark the bounce buffers as decrypted so that their usage will

	 * not cause "plain-text" data to be decrypted when accessed.

 Do the rest non-__init'ed, we're now alive */

 Call all constructor functions linked into the kernel. */

/*

 * For UML, the constructors have already been called by the

 * normal setup code as it's just a normal ELF binary, so we

 * cannot do it again - but we do need CONFIG_CONSTRUCTORS

 * even on UML for modules.

 str argument is a comma-separated list of functions */

	/*

	 * fn will be "function_name [module_name]" where [module_name] is not

	 * displayed for built-in init functions.  Strip off the [module_name].

 !TRACEPOINTS_ENABLED */

 Keep these in sync with initcalls in include/linux/init.h */

 Parser modifies command_line, restore it each time */

/*

 * Ok, the machine is now initialized. None of the devices

 * have been touched yet, but the CPU subsystem is up and

 * running, and memory and process management works.

 *

 * Now we can finally start doing some real work..

		/*

		 * load_module() results in W+X mappings, which are cleaned

		 * up with call_rcu().  Let's make sure that queued work is

		 * flushed so that we don't hit false positives looking for

		 * insecure pages which are W+X.

	/*

	 * Wait until kthreadd is all set-up.

 need to finish all async __init code before freeing the memory */

	/*

	 * Kernel mappings are now finalized - update the userspace page-table

	 * to finalize PTI.

	/*

	 * We try each of these until one succeeds.

	 *

	 * The Bourne shell can be used instead of init if we are

	 * trying to recover a really broken machine.

 Open /dev/console, for stdin/stdout/stderr, this should never fail */

 Now the scheduler is fully set up and can do blocking allocations */

	/*

	 * init can allocate pages on any node

 Initialize page ext after all struct pages are initialized. */

	/*

	 * check if there is an early userspace init.  If yes, let it do all

	 * the work

	/*

	 * Ok, we have completed the initial bootup, and

	 * we're essentially up and running. Get rid of the

	 * initmem segments and start the user-mode stuff..

	 *

	 * rootfs is available now, try loading the public keys

	 * and default modules

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  inode.c - securityfs

 *

 *  Copyright (C) 2005 Greg Kroah-Hartman <gregkh@suse.de>

 *

 *  Based on fs/debugfs/inode.c which had the following copyright notice:

 *    Copyright (C) 2004 Greg Kroah-Hartman <greg@kroah.com>

 *    Copyright (C) 2004 IBM Inc.

 #define DEBUG */

/**

 * securityfs_create_dentry - create a dentry in the securityfs filesystem

 *

 * @name: a pointer to a string containing the name of the file to create.

 * @mode: the permission that the file should have

 * @parent: a pointer to the parent dentry for this file.  This should be a

 *          directory dentry if set.  If this parameter is %NULL, then the

 *          file will be created in the root of the securityfs filesystem.

 * @data: a pointer to something that the caller will want to get to later

 *        on.  The inode.i_private pointer will point to this value on

 *        the open() call.

 * @fops: a pointer to a struct file_operations that should be used for

 *        this file.

 * @iops: a point to a struct of inode_operations that should be used for

 *        this file/dir

 *

 * This is the basic "create a file/dir/symlink" function for

 * securityfs.  It allows for a wide range of flexibility in creating

 * a file, or a directory (if you want to create a directory, the

 * securityfs_create_dir() function is recommended to be used

 * instead).

 *

 * This function returns a pointer to a dentry if it succeeds.  This

 * pointer must be passed to the securityfs_remove() function when the

 * file is to be removed (no automatic cleanup happens if your module

 * is unloaded, you are responsible here).  If an error occurs, the

 * function will return the error value (via ERR_PTR).

 *

 * If securityfs is not enabled in the kernel, the value %-ENODEV is

 * returned.

/**

 * securityfs_create_file - create a file in the securityfs filesystem

 *

 * @name: a pointer to a string containing the name of the file to create.

 * @mode: the permission that the file should have

 * @parent: a pointer to the parent dentry for this file.  This should be a

 *          directory dentry if set.  If this parameter is %NULL, then the

 *          file will be created in the root of the securityfs filesystem.

 * @data: a pointer to something that the caller will want to get to later

 *        on.  The inode.i_private pointer will point to this value on

 *        the open() call.

 * @fops: a pointer to a struct file_operations that should be used for

 *        this file.

 *

 * This function creates a file in securityfs with the given @name.

 *

 * This function returns a pointer to a dentry if it succeeds.  This

 * pointer must be passed to the securityfs_remove() function when the file is

 * to be removed (no automatic cleanup happens if your module is unloaded,

 * you are responsible here).  If an error occurs, the function will return

 * the error value (via ERR_PTR).

 *

 * If securityfs is not enabled in the kernel, the value %-ENODEV is

 * returned.

/**

 * securityfs_create_dir - create a directory in the securityfs filesystem

 *

 * @name: a pointer to a string containing the name of the directory to

 *        create.

 * @parent: a pointer to the parent dentry for this file.  This should be a

 *          directory dentry if set.  If this parameter is %NULL, then the

 *          directory will be created in the root of the securityfs filesystem.

 *

 * This function creates a directory in securityfs with the given @name.

 *

 * This function returns a pointer to a dentry if it succeeds.  This

 * pointer must be passed to the securityfs_remove() function when the file is

 * to be removed (no automatic cleanup happens if your module is unloaded,

 * you are responsible here).  If an error occurs, the function will return

 * the error value (via ERR_PTR).

 *

 * If securityfs is not enabled in the kernel, the value %-ENODEV is

 * returned.

/**

 * securityfs_create_symlink - create a symlink in the securityfs filesystem

 *

 * @name: a pointer to a string containing the name of the symlink to

 *        create.

 * @parent: a pointer to the parent dentry for the symlink.  This should be a

 *          directory dentry if set.  If this parameter is %NULL, then the

 *          directory will be created in the root of the securityfs filesystem.

 * @target: a pointer to a string containing the name of the symlink's target.

 *          If this parameter is %NULL, then the @iops parameter needs to be

 *          setup to handle .readlink and .get_link inode_operations.

 * @iops: a pointer to the struct inode_operations to use for the symlink. If

 *        this parameter is %NULL, then the default simple_symlink_inode

 *        operations will be used.

 *

 * This function creates a symlink in securityfs with the given @name.

 *

 * This function returns a pointer to a dentry if it succeeds.  This

 * pointer must be passed to the securityfs_remove() function when the file is

 * to be removed (no automatic cleanup happens if your module is unloaded,

 * you are responsible here).  If an error occurs, the function will return

 * the error value (via ERR_PTR).

 *

 * If securityfs is not enabled in the kernel, the value %-ENODEV is

 * returned.

/**

 * securityfs_remove - removes a file or directory from the securityfs filesystem

 *

 * @dentry: a pointer to a the dentry of the file or directory to be removed.

 *

 * This function removes a file or directory in securityfs that was previously

 * created with a call to another securityfs function (like

 * securityfs_create_file() or variants thereof.)

 *

 * This function is required to be called in order for the file to be

 * removed. No automatic cleanup of files will happen when a module is

 * removed; you are responsible here.

 SPDX-License-Identifier: GPL-2.0-or-later

/* Common capabilities, needed by capability.o.

/*

 * If a non-root user executes a setuid-root binary in

 * !secure(SECURE_NOROOT) mode, then we raise capabilities.

 * However if fE is also set, then the intent is for only

 * the file capabilities to be applied, and the setuid-root

 * bit is left on either to change the uid (plausible) or

 * to get full privilege on a kernel without file capabilities

 * support.  So in that case we do not raise capabilities.

 *

 * Warn if that happens, once per boot.

/**

 * cap_capable - Determine whether a task has a particular effective capability

 * @cred: The credentials to use

 * @targ_ns:  The user namespace in which we need the capability

 * @cap: The capability to check for

 * @opts: Bitmask of options defined in include/linux/security.h

 *

 * Determine whether the nominated task has the specified capability amongst

 * its effective set, returning 0 if it does, -ve if it does not.

 *

 * NOTE WELL: cap_has_capability() cannot be used like the kernel's capable()

 * and has_capability() functions.  That is, it has the reverse semantics:

 * cap_has_capability() returns 0 when a task has a capability, but the

 * kernel's capable() and has_capability() returns 1 for this case.

	/* See if cred has the capability in the target user namespace

	 * by examining the target user namespace and all of the target

	 * user namespace's parents.

 Do we have the necessary capabilities? */

		/*

		 * If we're already at a lower level than we're looking for,

		 * we're done searching.

		/* 

		 * The owner of the user namespace in the parent of the

		 * user namespace has all caps.

		/*

		 * If you have a capability in a parent user ns, then you have

		 * it over all children user namespaces as well.

 We never get here */

/**

 * cap_settime - Determine whether the current process may set the system clock

 * @ts: The time to set

 * @tz: The timezone to set

 *

 * Determine whether the current process may set the system clock and timezone

 * information, returning 0 if permission granted, -ve if denied.

/**

 * cap_ptrace_access_check - Determine whether the current process may access

 *			   another

 * @child: The process to be accessed

 * @mode: The mode of attachment.

 *

 * If we are in the same or an ancestor user_ns and have all the target

 * task's capabilities, then ptrace access is allowed.

 * If we have the ptrace capability to the target user_ns, then ptrace

 * access is allowed.

 * Else denied.

 *

 * Determine whether a process may access another, returning 0 if permission

 * granted, -ve if denied.

/**

 * cap_ptrace_traceme - Determine whether another process may trace the current

 * @parent: The task proposed to be the tracer

 *

 * If parent is in the same or an ancestor user_ns and has all current's

 * capabilities, then ptrace access is allowed.

 * If parent has the ptrace capability to current's user_ns, then ptrace

 * access is allowed.

 * Else denied.

 *

 * Determine whether the nominated task is permitted to trace the current

 * process, returning 0 if permission is granted, -ve if denied.

/**

 * cap_capget - Retrieve a task's capability sets

 * @target: The task from which to retrieve the capability sets

 * @effective: The place to record the effective set

 * @inheritable: The place to record the inheritable set

 * @permitted: The place to record the permitted set

 *

 * This function retrieves the capabilities of the nominated task and returns

 * them to the caller.

 Derived from kernel/capability.c:sys_capget. */

/*

 * Determine whether the inheritable capabilities are limited to the old

 * permitted set.  Returns 1 if they are limited, 0 if they are not.

	/* they are so limited unless the current task has the CAP_SETPCAP

	 * capability

/**

 * cap_capset - Validate and apply proposed changes to current's capabilities

 * @new: The proposed new credentials; alterations should be made here

 * @old: The current task's current credentials

 * @effective: A pointer to the proposed new effective capabilities set

 * @inheritable: A pointer to the proposed new inheritable capabilities set

 * @permitted: A pointer to the proposed new permitted capabilities set

 *

 * This function validates and applies a proposed mass change to the current

 * process's capability sets.  The changes are made to the proposed new

 * credentials, and assuming no error, will be committed by the caller of LSM.

 incapable of using this inheritable set */

 no new pI capabilities outside bounding set */

 verify restrictions on target's new Permitted set */

 verify the _new_Effective_ is a subset of the _new_Permitted_ */

	/*

	 * Mask off ambient bits that are no longer both permitted and

	 * inheritable.

/**

 * cap_inode_need_killpriv - Determine if inode change affects privileges

 * @dentry: The inode/dentry in being changed with change marked ATTR_KILL_PRIV

 *

 * Determine if an inode having a change applied that's marked ATTR_KILL_PRIV

 * affects the security markings on that inode, and if it is, should

 * inode_killpriv() be invoked or the change rejected.

 *

 * Return: 1 if security.capability has a value, meaning inode_killpriv()

 * is required, 0 otherwise, meaning inode_killpriv() is not required.

/**

 * cap_inode_killpriv - Erase the security markings on an inode

 *

 * @mnt_userns:	user namespace of the mount the inode was found from

 * @dentry:	The inode/dentry to alter

 *

 * Erase the privilege-enhancing security markings on an inode.

 *

 * If the inode has been found through an idmapped mount the user namespace of

 * the vfsmount must be passed through @mnt_userns. This function will then

 * take care to map the inode according to @mnt_userns before checking

 * permissions. On non-idmapped mounts or if permission checking is to be

 * performed on the raw inode simply passs init_user_ns.

 *

 * Return: 0 if successful, -ve on error.

/*

 * getsecurity: We are called for security.* before any attempt to read the

 * xattr from the inode itself.

 *

 * This gives us a chance to read the on-disk value and convert it.  If we

 * return -EOPNOTSUPP, then vfs_getxattr() will call the i_op handler.

 *

 * Note we are not called by vfs_getxattr_alloc(), but that is only called

 * by the integrity subsystem, which really wants the unconverted values -

 * so that's good.

 If this is an idmapped mount shift the kuid. */

	/* If the root kuid maps to a valid uid in current ns, then return

 v2 -> v3 conversion */

 use allocated v3 buffer */

 This comes from a parent namespace.  Return as a v2 capability */

 v3 -> v2 conversion */

 use unconverted v2 */

/**

 * rootid_from_xattr - translate root uid of vfs caps

 *

 * @value:	vfs caps value which may be modified by this function

 * @size:	size of @ivalue

 * @task_ns:	user namespace of the caller

 * @mnt_userns:	user namespace of the mount the inode was found from

 *

 * If the inode has been found through an idmapped mount the user namespace of

 * the vfsmount must be passed through @mnt_userns. This function will then

 * take care to map the inode according to @mnt_userns before checking

 * permissions. On non-idmapped mounts or if permission checking is to be

 * performed on the raw inode simply passs init_user_ns.

/**

 * cap_convert_nscap - check vfs caps

 *

 * @mnt_userns:	user namespace of the mount the inode was found from

 * @dentry:	used to retrieve inode to check permissions on

 * @ivalue:	vfs caps value which may be modified by this function

 * @size:	size of @ivalue

 *

 * User requested a write of security.capability.  If needed, update the

 * xattr to change from v2 to v3, or to fixup the v3 rootid.

 *

 * If the inode has been found through an idmapped mount the user namespace of

 * the vfsmount must be passed through @mnt_userns. This function will then

 * take care to map the inode according to @mnt_userns before checking

 * permissions. On non-idmapped mounts or if permission checking is to be

 * performed on the raw inode simply passs init_user_ns.

 *

 * Return: On success, return the new size; on error, return < 0.

 user is privileged, just write the v2 */

/*

 * Calculate the new process capability sets from the capability sets attached

 * to a file.

		/*

		 * pP' = (X & fP) | (pI & fI)

		 * The addition of pA' is handled later.

 insufficient to execute correctly */

	/*

	 * For legacy apps, with no internal support for recognizing they

	 * do not have enough capabilities, we return an error if they are

	 * missing some "forced" (aka file-permitted) capabilities.

/**

 * get_vfs_caps_from_disk - retrieve vfs caps from disk

 *

 * @mnt_userns:	user namespace of the mount the inode was found from

 * @dentry:	dentry from which @inode is retrieved

 * @cpu_caps:	vfs capabilities

 *

 * Extract the on-exec-apply capability sets for an executable file.

 *

 * If the inode has been found through an idmapped mount the user namespace of

 * the vfsmount must be passed through @mnt_userns. This function will then

 * take care to map the inode according to @mnt_userns before checking

 * permissions. On non-idmapped mounts or if permission checking is to be

 * performed on the raw inode simply passs init_user_ns.

 no data, that's ok */

	/* Limit the caps to the mounter of the filesystem

	 * or the more limited uid specified in the xattr.

/*

 * Attempt to get the on-exec apply capability sets for an executable file from

 * its xattrs and, if present, apply them to the proposed credentials being

 * constructed by execve().

	/*

	 * This check is redundant with mnt_may_suid() but is kept to make

	 * explicit that capability bits are limited to s_user_ns and its

	 * descendants.

/*

 * handle_privileged_root - Handle case of privileged root

 * @bprm: The execution parameters, including the proposed creds

 * @has_fcap: Are any file capabilities set?

 * @effective: Do we have effective root privilege?

 * @root_uid: This namespace' root UID WRT initial USER namespace

 *

 * Handle the case where root is privileged and hasn't been neutered by

 * SECURE_NOROOT.  If file capabilities are set, they won't be combined with

 * set UID root and nothing is changed.  If we are root, cap_permitted is

 * updated.  If we have become set UID root, the effective bit is set.

	/*

	 * If the legacy file capability is set, then don't set privs

	 * for a setuid root binary run by a non-root user.  Do set it

	 * for a root user just to cause least surprise to an admin.

	/*

	 * To support inheritance of root-permissions and suid-root

	 * executables under compatibility mode, we override the

	 * capability sets for the file.

 pP' = (cap_bset & ~0) | (pI & ~0) */

	/*

	 * If only the real uid is 0, we do not set the effective bit.

/*

 * 1) Audit candidate if current->cap_effective is set

 *

 * We do not bother to audit if 3 things are true:

 *   1) cap_effective has all caps

 *   2) we became root *OR* are were already root

 *   3) root is supposed to have all caps (SECURE_NOROOT)

 * Since this is just a normal root execing a process.

 *

 * Number 1 above might fail if you don't have a full bset, but I think

 * that is interesting information to audit.

 *

 * A number of other conditions require logging:

 * 2) something prevented setuid root getting all caps

 * 3) non-setuid root gets fcaps

 * 4) non-setuid root gets ambient

/**

 * cap_bprm_creds_from_file - Set up the proposed credentials for execve().

 * @bprm: The execution parameters, including the proposed creds

 * @file: The file to pull the credentials from

 *

 * Set up the proposed credentials for a new execution context being

 * constructed by execve().  The proposed creds in @bprm->cred is altered,

 * which won't take effect immediately.

 *

 * Return: 0 if successful, -ve on error.

 Process setpcap binaries and capabilities for uid 0 */

 if we have fs caps, clear dangerous personality flags */

	/* Don't let someone trace a set[ug]id/setpcap binary with the revised

	 * credentials unless they have the appropriate permit.

	 *

	 * In addition, if NO_NEW_PRIVS, then ensure we get no new privs.

 downgrade; they get no more than they had, and maybe less */

 File caps or setid cancels ambient. */

	/*

	 * Now that we've computed pA', update pP' to give:

	 *   pP' = (X & fP) | (pI & fI) | pA'

	/*

	 * Set pE' = (fE ? pP' : pA').  Because pA' is zero if fE is set,

	 * this is the same as pE' = (fE ? pP' : 0) | pA'.

 Check for privilege-elevated exec. */

/**

 * cap_inode_setxattr - Determine whether an xattr may be altered

 * @dentry: The inode/dentry being altered

 * @name: The name of the xattr to be changed

 * @value: The value that the xattr will be changed to

 * @size: The size of value

 * @flags: The replacement flag

 *

 * Determine whether an xattr may be altered or set on an inode, returning 0 if

 * permission is granted, -ve if denied.

 *

 * This is used to make sure security xattrs don't get updated or set by those

 * who aren't privileged to do so.

 Ignore non-security xattrs */

	/*

	 * For XATTR_NAME_CAPS the check will be done in

	 * cap_convert_nscap(), called by setxattr()

/**

 * cap_inode_removexattr - Determine whether an xattr may be removed

 *

 * @mnt_userns:	User namespace of the mount the inode was found from

 * @dentry:	The inode/dentry being altered

 * @name:	The name of the xattr to be changed

 *

 * Determine whether an xattr may be removed from an inode, returning 0 if

 * permission is granted, -ve if denied.

 *

 * If the inode has been found through an idmapped mount the user namespace of

 * the vfsmount must be passed through @mnt_userns. This function will then

 * take care to map the inode according to @mnt_userns before checking

 * permissions. On non-idmapped mounts or if permission checking is to be

 * performed on the raw inode simply passs init_user_ns.

 *

 * This is used to make sure security xattrs don't get removed by those who

 * aren't privileged to remove them.

 Ignore non-security xattrs */

 security.capability gets namespaced */

/*

 * cap_emulate_setxuid() fixes the effective / permitted capabilities of

 * a process after a call to setuid, setreuid, or setresuid.

 *

 *  1) When set*uiding _from_ one of {r,e,s}uid == 0 _to_ all of

 *  {r,e,s}uid != 0, the permitted and effective capabilities are

 *  cleared.

 *

 *  2) When set*uiding _from_ euid == 0 _to_ euid != 0, the effective

 *  capabilities of the process are cleared.

 *

 *  3) When set*uiding _from_ euid != 0 _to_ euid == 0, the effective

 *  capabilities are set to the permitted capabilities.

 *

 *  fsuid is handled elsewhere. fsuid == 0 and {r,e,s}uid!= 0 should

 *  never happen.

 *

 *  -astor

 *

 * cevans - New behaviour, Oct '99

 * A process may, via prctl(), elect to keep its capabilities when it

 * calls setuid() and switches away from uid==0. Both permitted and

 * effective sets will be retained.

 * Without this change, it was impossible for a daemon to drop only some

 * of its privilege. The call to setuid(!=0) would drop all privileges!

 * Keeping uid 0 is not an option because uid 0 owns too many vital

 * files..

 * Thanks to Olaf Kirch and Peter Benie for spotting this.

		/*

		 * Pre-ambient programs expect setresuid to nonroot followed

		 * by exec to drop capabilities.  We should make sure that

		 * this remains the case.

/**

 * cap_task_fix_setuid - Fix up the results of setuid() call

 * @new: The proposed credentials

 * @old: The current task's current credentials

 * @flags: Indications of what has changed

 *

 * Fix up the results of setuid() call before the credential changes are

 * actually applied.

 *

 * Return: 0 to grant the changes, -ve to deny them.

		/* juggle the capabilities to follow [RES]UID changes unless

		/* juggle the capabilties to follow FSUID changes, unless

		 * otherwise suppressed

		 *

		 * FIXME - is fsuser used for all CAP_FS_MASK capabilities?

		 *          if not, we might be a bit too harsh here.

/*

 * Rationale: code calling task_setscheduler, task_setioprio, and

 * task_setnice, assumes that

 *   . if capable(cap_sys_nice), then those actions should be allowed

 *   . if not capable(cap_sys_nice), but acting on your own processes,

 *   	then those actions should be allowed

 * This is insufficient now since you can call code without suid, but

 * yet with increased caps.

 * So we check for increased caps on the target process.

/**

 * cap_task_setscheduler - Detemine if scheduler policy change is permitted

 * @p: The task to affect

 *

 * Detemine if the requested scheduler policy change is permitted for the

 * specified task.

 *

 * Return: 0 if permission is granted, -ve if denied.

/**

 * cap_task_setioprio - Detemine if I/O priority change is permitted

 * @p: The task to affect

 * @ioprio: The I/O priority to set

 *

 * Detemine if the requested I/O priority change is permitted for the specified

 * task.

 *

 * Return: 0 if permission is granted, -ve if denied.

/**

 * cap_task_setnice - Detemine if task priority change is permitted

 * @p: The task to affect

 * @nice: The nice value to set

 *

 * Detemine if the requested task priority change is permitted for the

 * specified task.

 *

 * Return: 0 if permission is granted, -ve if denied.

/*

 * Implement PR_CAPBSET_DROP.  Attempt to remove the specified capability from

 * the current task's bounding set.  Returns 0 on success, -ve on error.

/**

 * cap_task_prctl - Implement process control functions for this security module

 * @option: The process control function requested

 * @arg2: The argument data for this function

 * @arg3: The argument data for this function

 * @arg4: The argument data for this function

 * @arg5: The argument data for this function

 *

 * Allow process control functions (sys_prctl()) to alter capabilities; may

 * also deny access to other functions not otherwise implemented here.

 *

 * Return: 0 or +ve on success, -ENOSYS if this function is not implemented

 * here, other -ve on error.  If -ENOSYS is returned, sys_prctl() and other LSM

 * modules will consider performing the function.

	/*

	 * The next four prctl's remain to assist with transitioning a

	 * system from legacy UID=0 based privilege (when filesystem

	 * capabilities are not in use) to a system using filesystem

	 * capabilities only - as the POSIX.1e draft intended.

	 *

	 * Note:

	 *

	 *  PR_SET_SECUREBITS =

	 *      issecure_mask(SECURE_KEEP_CAPS_LOCKED)

	 *    | issecure_mask(SECURE_NOROOT)

	 *    | issecure_mask(SECURE_NOROOT_LOCKED)

	 *    | issecure_mask(SECURE_NO_SETUID_FIXUP)

	 *    | issecure_mask(SECURE_NO_SETUID_FIXUP_LOCKED)

	 *

	 * will ensure that the current process and all of its

	 * children will be locked into a pure

	 * capability-based-privilege environment.

[1]*/

[2]*/

[3]*/

[4]*/

			/*

			 * [1] no changing of bits that are locked

			 * [2] no unlocking of locks

			 * [3] no setting of unsupported bits

			 * [4] doing anything requires privilege (go read about

			 *     the "sendmail capabilities bug")

 cannot change a locked bit */

 Note, we rely on arg2 being unsigned here */

 No functionality available - continue with default */

/**

 * cap_vm_enough_memory - Determine whether a new virtual mapping is permitted

 * @mm: The VM space in which the new mapping is to be made

 * @pages: The size of the mapping

 *

 * Determine whether the allocation of a new virtual mapping by the current

 * task is permitted.

 *

 * Return: 1 if permission is granted, 0 if not.

/**

 * cap_mmap_addr - check if able to map given addr

 * @addr: address attempting to be mapped

 *

 * If the process is attempting to map memory below dac_mmap_min_addr they need

 * CAP_SYS_RAWIO.  The other parameters to this function are unused by the

 * capability security module.

 *

 * Return: 0 if this mapping should be allowed or -EPERM if not.

 set PF_SUPERPRIV if it turns out we allow the low mmap */

 CONFIG_SECURITY */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Security plug functions

 *

 * Copyright (C) 2001 WireX Communications, Inc <chris@wirex.com>

 * Copyright (C) 2001-2002 Greg Kroah-Hartman <greg@kroah.com>

 * Copyright (C) 2001 Networks Associates Technology, Inc <ssmalley@nai.com>

 * Copyright (C) 2016 Mellanox Technologies

 How many LSMs were built into the kernel? */

/*

 * These are descriptions of the reasons that can be passed to the

 * security_locked_down() LSM hook. Placing this array here allows

 * all security modules to use the same descriptions for auditing

 * purposes.

 Boot-time LSM user choice */

 Ordered list of LSMs to initialize. */

 Mark an LSM's enabled flag. */

	/*

	 * When an LSM hasn't configured an enable variable, we can use

	 * a hard-coded location for storing the default enabled state.

 Is an LSM already listed in the ordered LSMs list? */

 Append an LSM to the list of ordered LSMs to initialize. */

 Ignore duplicate selections. */

 Enable this LSM, if it is not already set. */

 Is an LSM allowed to be initialized? */

 Skip if the LSM is disabled. */

 Not allowed if another exclusive LSM already initialized. */

	/*

	 * The inode blob gets an rcu_head in addition to

	 * what the modules might need.

 Prepare LSM for initialization. */

 Record enablement (to handle any following exclusive LSMs). */

 If enabled, do pre-initialization work. */

 Initialize a given LSM, if it is enabled. */

 Populate ordered LSMs list from comma-separated LSM name list. */

 LSM_ORDER_FIRST is always first. */

 Process "security=", if given. */

		/*

		 * To match the original "security=" behavior, this

		 * explicitly does NOT fallback to another Legacy Major

		 * if the selected one was separately disabled: disable

		 * all non-matching Legacy Major LSMs.

 Walk the list, looking for matching LSMs. */

 Process "security=", if given. */

 Disable all LSMs not in the ordered list. */

	/*

	 * Create any kmem_caches needed for blobs

/**

 * security_init - initializes the security framework

 *

 * This should be called early in the kernel initialization sequence.

	/*

	 * Append the names of the early LSM modules now that kmalloc() is

	 * available

 Load LSMs in specified order. */

 Save user chosen LSM */

 Explicitly choose LSM initialization order. */

 Enable LSM order debugging. */

 Pass the comma, strcmp() will check for '\0' */

 Check if it is the last registered name */

/**

 * security_add_hooks - Add a modules hooks to the hook lists.

 * @hooks: the hooks to add

 * @count: the number of hooks to add

 * @lsm: the name of the security module

 *

 * Each LSM has to register its hooks with the infrastructure.

	/*

	 * Don't try to append during early_security_init(), we'll come back

	 * and fix this up afterwards.

/**

 * lsm_cred_alloc - allocate a composite cred blob

 * @cred: the cred that needs a blob

 * @gfp: allocation type

 *

 * Allocate the cred blob for all the modules

 *

 * Returns 0, or -ENOMEM if memory can't be allocated.

/**

 * lsm_early_cred - during initialization allocate a composite cred blob

 * @cred: the cred that needs a blob

 *

 * Allocate the cred blob for all the modules

/**

 * lsm_file_alloc - allocate a composite file blob

 * @file: the file that needs a blob

 *

 * Allocate the file blob for all the modules

 *

 * Returns 0, or -ENOMEM if memory can't be allocated.

/**

 * lsm_inode_alloc - allocate a composite inode blob

 * @inode: the inode that needs a blob

 *

 * Allocate the inode blob for all the modules

 *

 * Returns 0, or -ENOMEM if memory can't be allocated.

/**

 * lsm_task_alloc - allocate a composite task blob

 * @task: the task that needs a blob

 *

 * Allocate the task blob for all the modules

 *

 * Returns 0, or -ENOMEM if memory can't be allocated.

/**

 * lsm_ipc_alloc - allocate a composite ipc blob

 * @kip: the ipc that needs a blob

 *

 * Allocate the ipc blob for all the modules

 *

 * Returns 0, or -ENOMEM if memory can't be allocated.

/**

 * lsm_msg_msg_alloc - allocate a composite msg_msg blob

 * @mp: the msg_msg that needs a blob

 *

 * Allocate the ipc blob for all the modules

 *

 * Returns 0, or -ENOMEM if memory can't be allocated.

/**

 * lsm_early_task - during initialization allocate a composite task blob

 * @task: the task that needs a blob

 *

 * Allocate the task blob for all the modules

/**

 * lsm_superblock_alloc - allocate a composite superblock blob

 * @sb: the superblock that needs a blob

 *

 * Allocate the superblock blob for all the modules

 *

 * Returns 0, or -ENOMEM if memory can't be allocated.

/*

 * The default value of the LSM hook is defined in linux/lsm_hook_defs.h and

 * can be accessed with:

 *

 *	LSM_RET_DEFAULT(<hook_name>)

 *

 * The macros below define static constants for the default value of each

 * LSM hook.

/*

 * Hook list operation macros.

 *

 * call_void_hook:

 *	This is a hook that does not return a value.

 *

 * call_int_hook:

 *	This is a hook that returns a value.

 Security operations */

	/*

	 * The module will respond with a positive value if

	 * it thinks the __vm_enough_memory() call should be

	 * made with the cap_sys_admin set. If all of the modules

	 * agree that it should be set it will. If any module

	 * thinks it should not be set it won't.

	/*

	 * The rcu head is at the start of the inode blob

	/*

	 * The inode may still be referenced in a path walk and

	 * a call to security_inode_permission() can be made

	 * after inode_free_security() is called. Ideally, the VFS

	 * wouldn't do this, but fixing that is a much harder

	 * job. For now, simply free the i_security via RCU, and

	 * leave the current inode->i_security pointer intact.

	 * The inode will be freed after the RCU grace period too.

	/*

	 * SELinux and Smack integrate the cap call,

	 * so assume that all LSMs supplying this call do so.

	/*

	 * SELinux and Smack integrate the cap call,

	 * so assume that all LSMs supplying this call do so.

	/*

	 * Only one module will provide an attribute with a given name.

	/*

	 * Only one module will provide an attribute with a given name.

	/*

	 * The implementation can return 0 (accept the xattr), 1 (discard the

	 * xattr), -EOPNOTSUPP if it does not know anything about the xattr or

	 * any other error code incase of an error.

	/*

	 * Does we have PROT_READ and does the application expect

	 * it to imply PROT_EXEC?  If not, nothing to talk about...

	/*

	 * if that's an anonymous mapping, let it.

	/*

	 * ditto if it's not on noexec mount, except that on !MMU we need

	 * NOMMU_MAP_EXEC (== VM_MAYEXEC) in this case

 anything on noexec mount won't get PROT_EXEC */

	/*

	 * There is a failure case in prepare_creds() that

	 * may result in a call here with ->security being NULL.

	/*

	 * Currently, only one LSM can implement secid_to_secctx (i.e this

	 * LSM hook is not "stackable").

 CONFIG_WATCH_QUEUE */

 CONFIG_SECURITY_NETWORK */

 CONFIG_SECURITY_INFINIBAND */

	/*

	 * Since this function is expected to return 0 or 1, the judgment

	 * becomes difficult if multiple LSMs supply this call. Fortunately,

	 * we can use the first LSM's judgment because currently only SELinux

	 * supplies this call.

	 *

	 * For speed optimization, we explicitly break the loop rather than

	 * using the macro

 CONFIG_SECURITY_NETWORK_XFRM */

 CONFIG_KEYS */

 CONFIG_AUDIT */

 CONFIG_BPF_SYSCALL */

 CONFIG_PERF_EVENTS */

 CONFIG_IO_URING */

 SPDX-License-Identifier: GPL-2.0

 amount of vm to protect from userspace access by both DAC and the LSM*/

 amount of vm to protect from userspace using CAP_SYS_RAWIO (DAC) */

 amount of vm to protect from userspace using the LSM = CONFIG_LSM_MMAP_MIN_ADDR */

/*

 * Update mmap_min_addr = max(dac_mmap_min_addr, CONFIG_LSM_MMAP_MIN_ADDR)

/*

 * sysctl handler which just sets dac_mmap_min_addr = the new value and then

 * calls update_mmap_min_addr() so non MAP_FIXED hints get rounded properly

 SPDX-License-Identifier: GPL-2.0

/*

 * device_cgroup.c - device cgroup subsystem

 *

 * Copyright 2007 IBM Corp

/*

 * exception list locking rules:

 * hold devcgroup_mutex for update/read.

 * hold rcu_read_lock() for read.

/*

 * called under devcgroup_mutex

/*

 * called under devcgroup_mutex

/*

 * called under devcgroup_mutex

/**

 * dev_exception_clean - frees all entries of the exception list

 * @dev_cgroup: dev_cgroup with the exception list to be cleaned

 *

 * called under devcgroup_mutex

/**

 * devcgroup_online - initializes devcgroup's behavior and exceptions based on

 * 		      parent's

 * @css: css getting online

 * returns 0 in case of success, error code otherwise

/*

 * called from kernel/cgroup.c with cgroup_lock() held.

	/*

	 * To preserve the compatibility:

	 * - Only show the "all devices" when the default policy is to allow

	 * - List the exceptions in case the default policy is to deny

	 * This way, the file remains as a "whitelist of devices"

/**

 * match_exception	- iterates the exception list trying to find a complete match

 * @exceptions: list of exceptions

 * @type: device type (DEVCG_DEV_BLOCK or DEVCG_DEV_CHAR)

 * @major: device file major number, ~0 to match all

 * @minor: device file minor number, ~0 to match all

 * @access: permission mask (DEVCG_ACC_READ, DEVCG_ACC_WRITE, DEVCG_ACC_MKNOD)

 *

 * It is considered a complete match if an exception is found that will

 * contain the entire range of provided parameters.

 *

 * Return: true in case it matches an exception completely

 provided access cannot have more than the exception rule */

/**

 * match_exception_partial - iterates the exception list trying to find a partial match

 * @exceptions: list of exceptions

 * @type: device type (DEVCG_DEV_BLOCK or DEVCG_DEV_CHAR)

 * @major: device file major number, ~0 to match all

 * @minor: device file minor number, ~0 to match all

 * @access: permission mask (DEVCG_ACC_READ, DEVCG_ACC_WRITE, DEVCG_ACC_MKNOD)

 *

 * It is considered a partial match if an exception's range is found to

 * contain *any* of the devices specified by provided parameters. This is

 * used to make sure no extra access is being granted that is forbidden by

 * any of the exception list.

 *

 * Return: true in case the provided range mat matches an exception completely

		/*

		 * We must be sure that both the exception and the provided

		 * range aren't masking all devices

		/*

		 * In order to make sure the provided range isn't matching

		 * an exception, all its access bits shouldn't match the

		 * exception's access bits

/**

 * verify_new_ex - verifies if a new exception is allowed by parent cgroup's permissions

 * @dev_cgroup: dev cgroup to be tested against

 * @refex: new exception

 * @behavior: behavior of the exception's dev_cgroup

 *

 * This is used to make sure a child cgroup won't have more privileges

 * than its parent

			/*

			 * new exception in the child doesn't matter, only

			 * adding extra restrictions

			/*

			 * new exception in the child will add more devices

			 * that can be acessed, so it can't match any of

			 * parent's exceptions, even slightly

		/*

		 * Only behavior == DEVCG_DEFAULT_DENY allowed here, therefore

		 * the new exception will add access to more devices and must

		 * be contained completely in an parent's exception to be

		 * allowed

 parent has an exception that matches the proposed */

/*

 * parent_has_perm:

 * when adding a new allow rule to a device exception list, the rule

 * must be allowed in the parent device

/**

 * parent_allows_removal - verify if it's ok to remove an exception

 * @childcg: child cgroup from where the exception will be removed

 * @ex: exception being removed

 *

 * When removing an exception in cgroups with default ALLOW policy, it must

 * be checked if removing it will give the child cgroup more access than the

 * parent.

 *

 * Return: true if it's ok to remove exception, false otherwise

 It's always allowed to remove access to devices */

	/*

	 * Make sure you're not removing part or a whole exception existing in

	 * the parent cgroup

/**

 * may_allow_all - checks if it's possible to change the behavior to

 *		   allow based on parent's rules.

 * @parent: device cgroup's parent

 * returns: != 0 in case it's allowed, 0 otherwise

/**

 * revalidate_active_exceptions - walks through the active exception list and

 * 				  revalidates the exceptions based on parent's

 * 				  behavior and exceptions. The exceptions that

 * 				  are no longer valid will be removed.

 * 				  Called with devcgroup_mutex held.

 * @devcg: cgroup which exceptions will be checked

 *

 * This is one of the three key functions for hierarchy implementation.

 * This function is responsible for re-evaluating all the cgroup's active

 * exceptions due to a parent's exception change.

 * Refer to Documentation/admin-guide/cgroup-v1/devices.rst for more details.

/**

 * propagate_exception - propagates a new exception to the children

 * @devcg_root: device cgroup that added a new exception

 * @ex: new exception to be propagated

 *

 * returns: 0 in case of success, != 0 in case of error

		/*

		 * Because devcgroup_mutex is held, no devcg will become

		 * online or offline during the tree walk (see on/offline

		 * methods), and online ones are safe to access outside RCU

		 * read lock without bumping refcnt.

		/*

		 * in case both root's behavior and devcg is allow, a new

		 * restriction means adding to the exception list

			/*

			 * in the other possible cases:

			 * root's behavior: allow, devcg's: deny

			 * root's behavior: deny, devcg's: deny

			 * the exception will be removed

/*

 * Modify the exception list using allow/deny rules.

 * CAP_SYS_ADMIN is needed for this.  It's at least separate from CAP_MKNOD

 * so we can give a container CAP_MKNOD to let it create devices but not

 * modify the exception list.

 * It seems likely we'll want to add a CAP_CONTAINER capability to allow

 * us to also grant CAP_SYS_ADMIN to containers without giving away the

 * device exception list controls, but for now we'll stick with CAP_SYS_ADMIN

 *

 * Taking rules away is always allowed (given CAP_SYS_ADMIN).  Granting

 * new access is only allowed if you're in the top-level cgroup, or your

 * parent cgroup has the access you're asking for.

 11 + 1 characters needed for a u32 */

 read minor */

		/*

		 * If the default policy is to allow by default, try to remove

		 * an matching exception instead. And be silent about it: we

		 * don't want to break compatibility

 Check if the parent allows removing it first */

		/*

		 * If the default policy is to deny by default, try to remove

		 * an matching exception instead. And be silent about it: we

		 * don't want to break compatibility

 we only propagate new restrictions */

 terminate */

/**

 * devcgroup_legacy_check_permission - checks if an inode operation is permitted

 * @dev_cgroup: the dev cgroup to be tested against

 * @type: device type

 * @major: device major number

 * @minor: device minor number

 * @access: combination of DEVCG_ACC_WRITE, DEVCG_ACC_READ and DEVCG_ACC_MKNOD

 *

 * returns 0 on success, -EPERM case the operation is not permitted

 Can't match any of the exceptions, even partially */

 Need to match completely one exception to be allowed */

 CONFIG_CGROUP_DEVICE */

 CONFIG_CGROUP_DEVICE */

 CONFIG_CGROUP_DEVICE */

 defined(CONFIG_CGROUP_DEVICE) || defined(CONFIG_CGROUP_BPF) */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * common LSM auditing functions

 *

 * Based on code written for SELinux by :

 *			Stephen Smalley, <sds@tycho.nsa.gov>

 * 			James Morris <jmorris@redhat.com>

 * Author : Etienne Basset, <etienne.basset@ensta.org>

/**

 * ipv4_skb_to_auditdata : fill auditdata from skb

 * @skb : the skb

 * @ad : the audit data to fill

 * @proto : the layer 4 protocol

 *

 * return  0 on success

 non initial fragment */

/**

 * ipv6_skb_to_auditdata : fill auditdata from skb

 * @skb : the skb

 * @ad : the audit data to fill

 * @proto : the layer 4 protocol

 *

 * return  0 on success

	/* IPv6 can have several extension header before the Transport header

/**

 * dump_common_audit_data - helper to dump common audit data

 * @a : common audit data

 *

	/*

	 * To keep stack sizes in check force programers to notice if they

	 * start making this union too large!  See struct lsm_network_audit

	 * as an example of how to deal with large data.

 NOTE: we always use init's namespace */

 switch (a->type) */

/**

 * common_lsm_audit - generic LSM auditing function

 * @a:  auxiliary audit data

 * @pre_audit: lsm-specific pre-audit callback

 * @post_audit: lsm-specific post-audit callback

 *

 * setup the audit buffer for common security information

 * uses callback to print LSM specific information

 we use GFP_ATOMIC so we won't sleep */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Simplified MAC Kernel (smack) security module

 *

 *  This file contains the Smack netfilter implementation

 *

 *  Author:

 *	Casey Schaufler <casey@schaufler-ca.com>

 *

 *  Copyright (C) 2014 Casey Schaufler <casey@schaufler-ca.com>

 *  Copyright (C) 2014 Intel Corporation.

 IPV6 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Simplified MAC Kernel (smack) security module

 *

 *  This file contains the smack hook function implementations.

 *

 *  Authors:

 *	Casey Schaufler <casey@schaufler-ca.com>

 *	Jarkko Sakkinen <jarkko.sakkinen@intel.com>

 *

 *  Copyright (C) 2007 Casey Schaufler <casey@schaufler-ca.com>

 *  Copyright (C) 2009 Hewlett-Packard Development Company, L.P.

 *                Paul Moore <paul@paul-moore.com>

 *  Copyright (C) 2010 Nokia Corporation

 *  Copyright (C) 2011 Intel Corporation.

 Unused */

 SMACK_BRINGUP_ALLOW */

 SMACK_UNCONFINED_SUBJECT */

 SMACK_UNCONFINED_OBJECT */

/**

 * smk_fetch - Fetch the smack label from a file.

 * @name: type of the label (attribute)

 * @ip: a pointer to the inode

 * @dp: a pointer to the dentry

 *

 * Returns a pointer to the master list entry for the Smack label,

 * NULL if there was no label to fetch, or an error code.

/**

 * init_inode_smack - initialize an inode security blob

 * @inode: inode to extract the info from

 * @skp: a pointer to the Smack label entry to use in the blob

 *

/**

 * init_task_smack - initialize a task security blob

 * @tsp: blob to initialize

 * @task: a pointer to the Smack label for the running task

 * @forked: a pointer to the Smack label for the forked task

 *

/**

 * smk_copy_rules - copy a rule set

 * @nhead: new rules header pointer

 * @ohead: old rules header pointer

 * @gfp: type of the memory for the allocation

 *

 * Returns 0 on success, -ENOMEM on error

/**

 * smk_copy_relabel - copy smk_relabel labels list

 * @nhead: new rules header pointer

 * @ohead: old rules header pointer

 * @gfp: type of the memory for the allocation

 *

 * Returns 0 on success, -ENOMEM on error

/**

 * smk_ptrace_mode - helper function for converting PTRACE_MODE_* into MAY_*

 * @mode: input mode in form of PTRACE_MODE_*

 *

 * Returns a converted MAY_* mode usable by smack rules

/**

 * smk_ptrace_rule_check - helper for ptrace access

 * @tracer: tracer process

 * @tracee_known: label entry of the process that's about to be traced

 * @mode: ptrace attachment mode (PTRACE_MODE_*)

 * @func: name of the function that called us, used for audit

 *

 * Returns 0 on access granted, -error on error

 In case of rule==SMACK_PTRACE_DEFAULT or mode==PTRACE_MODE_READ */

/*

 * LSM hooks.

 * We he, that is fun!

/**

 * smack_ptrace_access_check - Smack approval on PTRACE_ATTACH

 * @ctp: child task pointer

 * @mode: ptrace attachment mode (PTRACE_MODE_*)

 *

 * Returns 0 if access is OK, an error code otherwise

 *

 * Do the capability checks.

/**

 * smack_ptrace_traceme - Smack approval on PTRACE_TRACEME

 * @ptp: parent task pointer

 *

 * Returns 0 if access is OK, an error code otherwise

 *

 * Do the capability checks, and require PTRACE_MODE_ATTACH.

/**

 * smack_syslog - Smack approval on syslog

 * @typefrom_file: unused

 *

 * Returns 0 on success, error code otherwise.

/*

 * Superblock Hooks.

/**

 * smack_sb_alloc_security - allocate a superblock blob

 * @sb: the superblock getting the blob

 *

 * Returns 0 on success or -ENOMEM on error.

	/*

	 * SMK_SB_INITIALIZED will be zero from kzalloc.

/**

 * smack_fs_context_dup - Duplicate the security data on fs_context duplication

 * @fc: The new filesystem context.

 * @src_fc: The source filesystem context being duplicated.

 *

 * Returns 0 on success or -ENOMEM on error.

/**

 * smack_fs_context_parse_param - Parse a single mount parameter

 * @fc: The new filesystem context being constructed.

 * @param: The parameter.

 *

 * Returns 0 on success, -ENOPARAM to pass the parameter on or anything else on

 * error.

 copy with preceding comma

/**

 * smack_set_mnt_opts - set Smack specific mount options

 * @sb: the file system superblock

 * @mnt_opts: Smack mount options

 * @kern_flags: mount option from kernel space or user space

 * @set_kern_flags: where to store converted mount opts

 *

 * Returns 0 on success, an error code on failure

 *

 * Allow filesystems with binary mount data to explicitly set Smack mount

 * labels.

		/*

		 * Unprivileged mounts don't get to specify Smack values.

		/*

		 * Unprivileged mounts get root and default from the caller.

		/*

		 * For a handful of fs types with no user-controlled

		 * backing store it's okay to trust security labels

		 * in the filesystem. The rest are untrusted.

	/*

	 * Initialize the root inode.

/**

 * smack_sb_statfs - Smack check on statfs

 * @dentry: identifies the file system in question

 *

 * Returns 0 if current can read the floor of the filesystem,

 * and error code otherwise

/*

 * BPRM hooks

/**

 * smack_bprm_creds_for_exec - Update bprm->cred if needed for exec

 * @bprm: the exec information

 *

 * Returns 0 if it gets a blob, -EPERM if exec forbidden and -ENOMEM otherwise

 Decide if this is a secure exec. */

/*

 * Inode hooks

/**

 * smack_inode_alloc_security - allocate an inode blob

 * @inode: the inode in need of a blob

 *

 * Returns 0

/**

 * smack_inode_init_security - copy out the smack from an inode

 * @inode: the newly created inode

 * @dir: containing directory object

 * @qstr: unused

 * @name: where to put the attribute name

 * @value: where to put the attribute value

 * @len: where to put the length of the attribute

 *

 * Returns 0 if it all works out, -ENOMEM if there's no memory

		/*

		 * If the access rule allows transmutation and

		 * the directory requests transmutation then

		 * by all means transmute.

		 * Mark the inode as changed.

/**

 * smack_inode_link - Smack check on link

 * @old_dentry: the existing object

 * @dir: unused

 * @new_dentry: the new object

 *

 * Returns 0 if access is permitted, an error code otherwise

/**

 * smack_inode_unlink - Smack check on inode deletion

 * @dir: containing directory object

 * @dentry: file to unlink

 *

 * Returns 0 if current can write the containing directory

 * and the object, error code otherwise

	/*

	 * You need write access to the thing you're unlinking

		/*

		 * You also need write access to the containing directory

/**

 * smack_inode_rmdir - Smack check on directory deletion

 * @dir: containing directory object

 * @dentry: directory to unlink

 *

 * Returns 0 if current can write the containing directory

 * and the directory, error code otherwise

	/*

	 * You need write access to the thing you're removing

		/*

		 * You also need write access to the containing directory

/**

 * smack_inode_rename - Smack check on rename

 * @old_inode: unused

 * @old_dentry: the old object

 * @new_inode: unused

 * @new_dentry: the new object

 *

 * Read and write access is required on both the old and

 * new directories.

 *

 * Returns 0 if access is permitted, an error code otherwise

/**

 * smack_inode_permission - Smack version of permission()

 * @inode: the inode in question

 * @mask: the access requested

 *

 * This is the important Smack hook.

 *

 * Returns 0 if access is permitted, an error code otherwise

	/*

	 * No permission to check. Existence test. Yup, it's there.

 May be droppable after audit */

/**

 * smack_inode_setattr - Smack check for setting attributes

 * @dentry: the object

 * @iattr: for the force flag

 *

 * Returns 0 if access is permitted, an error code otherwise

	/*

	 * Need to allow for clearing the setuid bit.

/**

 * smack_inode_getattr - Smack check for getting attributes

 * @path: path to extract the info from

 *

 * Returns 0 if access is permitted, an error code otherwise

/**

 * smack_inode_setxattr - Smack check for setting xattrs

 * @mnt_userns: active user namespace

 * @dentry: the object

 * @name: name of the attribute

 * @value: value of the attribute

 * @size: size of the value

 * @flags: unused

 *

 * This protects the Smack attribute explicitly.

 *

 * Returns 0 if access is permitted, an error code otherwise

	/*

	 * Check label validity here so import won't fail in post_setxattr

/**

 * smack_inode_post_setxattr - Apply the Smack update approved above

 * @dentry: object

 * @name: attribute name

 * @value: attribute value

 * @size: attribute size

 * @flags: unused

 *

 * Set the pointer in the inode blob to the entry found

 * in the master label list.

/**

 * smack_inode_getxattr - Smack check on getxattr

 * @dentry: the object

 * @name: unused

 *

 * Returns 0 if access is permitted, an error code otherwise

/**

 * smack_inode_removexattr - Smack check on removexattr

 * @mnt_userns: active user namespace

 * @dentry: the object

 * @name: name of the attribute

 *

 * Removing the Smack attribute requires CAP_MAC_ADMIN

 *

 * Returns 0 if access is permitted, an error code otherwise

	/*

	 * Don't do anything special for these.

	 *	XATTR_NAME_SMACKIPIN

	 *	XATTR_NAME_SMACKIPOUT

/**

 * smack_inode_getsecurity - get smack xattrs

 * @mnt_userns: active user namespace

 * @inode: the object

 * @name: attribute name

 * @buffer: where to put the result

 * @alloc: duplicate memory

 *

 * Returns the size of the attribute or an error code

		/*

		 * The rest of the Smack xattrs are only on sockets.

/**

 * smack_inode_listsecurity - list the Smack attributes

 * @inode: the object

 * @buffer: where they go

 * @buffer_size: size of buffer

/**

 * smack_inode_getsecid - Extract inode's security id

 * @inode: inode to extract the info from

 * @secid: where result will be saved

/*

 * File Hooks

/*

 * There is no smack_file_permission hook

 *

 * Should access checks be done on each read or write?

 * UNICOS and SELinux say yes.

 * Trusted Solaris, Trusted Irix, and just about everyone else says no.

 *

 * I'll say no for now. Smack does not do the frequent

 * label changing that SELinux does.

/**

 * smack_file_alloc_security - assign a file security blob

 * @file: the object

 *

 * The security blob for a file is a pointer to the master

 * label list, so no allocation is done.

 *

 * f_security is the owner security information. It

 * isn't used on file access checks, it's for send_sigio.

 *

 * Returns 0

/**

 * smack_file_ioctl - Smack check on ioctls

 * @file: the object

 * @cmd: what to do

 * @arg: unused

 *

 * Relies heavily on the correct use of the ioctl command conventions.

 *

 * Returns 0 if allowed, error code otherwise

/**

 * smack_file_lock - Smack check on file locking

 * @file: the object

 * @cmd: unused

 *

 * Returns 0 if current has lock access, error code otherwise

/**

 * smack_file_fcntl - Smack check on fcntl

 * @file: the object

 * @cmd: what action to check

 * @arg: unused

 *

 * Generally these operations are harmless.

 * File locking operations present an obvious mechanism

 * for passing information, so they require write access.

 *

 * Returns 0 if current has access, error code otherwise

/**

 * smack_mmap_file - Check permissions for a mmap operation.

 * @file: contains the file structure for file to map (may be NULL).

 * @reqprot: contains the protection requested by the application.

 * @prot: contains the protection that will be applied by the kernel.

 * @flags: contains the operational flags.

 *

 * The @file may be NULL, e.g. if mapping anonymous memory.

 *

 * Return 0 if permission is granted.

	/*

	 * For each Smack rule associated with the subject

	 * label verify that the SMACK64MMAP also has access

	 * to that rule's object label.

		/*

		 * Matching labels always allows access.

		/*

		 * If there is a matching local rule take

		 * that into account as well.

		/*

		 * If may is zero the SMACK64MMAP subject can't

		 * possibly have less access.

		/*

		 * Fetch the global list entry.

		 * If there isn't one a SMACK64MMAP subject

		 * can't have as much access as current.

		/*

		 * If there is a local entry it modifies the

		 * potential access, too.

		/*

		 * If there is any access available to current that is

		 * not available to a SMACK64MMAP subject

		 * deny access.

/**

 * smack_file_set_fowner - set the file security blob value

 * @file: object in question

 *

/**

 * smack_file_send_sigiotask - Smack on sigio

 * @tsk: The target task

 * @fown: the object the signal come from

 * @signum: unused

 *

 * Allow a privileged task to get signals even if it shouldn't

 *

 * Returns 0 if a subject with the object's smack could

 * write to the task, an error code otherwise.

	/*

	 * struct fown_struct is never outside the context of a struct file

 we don't log here as rc can be overriden */

/**

 * smack_file_receive - Smack file receive check

 * @file: the object

 *

 * Returns 0 if current has access, error code otherwise

		/*

		 * If the receiving process can't write to the

		 * passed socket or if the passed socket can't

		 * write to the receiving process don't accept

		 * the passed socket.

	/*

	 * This code relies on bitmasks.

/**

 * smack_file_open - Smack dentry open processing

 * @file: the object

 *

 * Set the security blob in the file structure.

 * Allow the open only if the task has read access. There are

 * many read operations (e.g. fstat) that you can do with an

 * fd even if you have the file open write-only.

 *

 * Returns 0 if current has access, error code otherwise

/*

 * Task hooks

/**

 * smack_cred_alloc_blank - "allocate" blank task-level security credentials

 * @cred: the new credentials

 * @gfp: the atomicity of any memory allocations

 *

 * Prepare a blank set of credentials for modification.  This must allocate all

 * the memory the LSM module might require such that cred_transfer() can

 * complete without error.

/**

 * smack_cred_free - "free" task-level security credentials

 * @cred: the credentials in question

 *

/**

 * smack_cred_prepare - prepare new set of credentials for modification

 * @new: the new credentials

 * @old: the original credentials

 * @gfp: the atomicity of any memory allocations

 *

 * Prepare a new set of credentials for modification.

/**

 * smack_cred_transfer - Transfer the old credentials to the new credentials

 * @new: the new credentials

 * @old: the original credentials

 *

 * Fill in a set of blank credentials from another set of credentials.

 cbs copy rule list */

/**

 * smack_cred_getsecid - get the secid corresponding to a creds structure

 * @cred: the object creds

 * @secid: where to put the result

 *

 * Sets the secid to contain a u32 version of the smack label.

/**

 * smack_kernel_act_as - Set the subjective context in a set of credentials

 * @new: points to the set of credentials to be modified.

 * @secid: specifies the security ID to be set

 *

 * Set the security data for a kernel service.

/**

 * smack_kernel_create_files_as - Set the file creation label in a set of creds

 * @new: points to the set of credentials to be modified

 * @inode: points to the inode to use as a reference

 *

 * Set the file creation context in a set of credentials to the same

 * as the objective context of the specified inode

/**

 * smk_curacc_on_task - helper to log task related access

 * @p: the task object

 * @access: the access requested

 * @caller: name of the calling function for audit

 *

 * Return 0 if access is permitted

/**

 * smack_task_setpgid - Smack check on setting pgid

 * @p: the task object

 * @pgid: unused

 *

 * Return 0 if write access is permitted

/**

 * smack_task_getpgid - Smack access check for getpgid

 * @p: the object task

 *

 * Returns 0 if current can read the object task, error code otherwise

/**

 * smack_task_getsid - Smack access check for getsid

 * @p: the object task

 *

 * Returns 0 if current can read the object task, error code otherwise

/**

 * smack_task_getsecid_subj - get the subjective secid of the task

 * @p: the task

 * @secid: where to put the result

 *

 * Sets the secid to contain a u32 version of the task's subjective smack label.

/**

 * smack_task_getsecid_obj - get the objective secid of the task

 * @p: the task

 * @secid: where to put the result

 *

 * Sets the secid to contain a u32 version of the task's objective smack label.

/**

 * smack_task_setnice - Smack check on setting nice

 * @p: the task object

 * @nice: unused

 *

 * Return 0 if write access is permitted

/**

 * smack_task_setioprio - Smack check on setting ioprio

 * @p: the task object

 * @ioprio: unused

 *

 * Return 0 if write access is permitted

/**

 * smack_task_getioprio - Smack check on reading ioprio

 * @p: the task object

 *

 * Return 0 if read access is permitted

/**

 * smack_task_setscheduler - Smack check on setting scheduler

 * @p: the task object

 *

 * Return 0 if read access is permitted

/**

 * smack_task_getscheduler - Smack check on reading scheduler

 * @p: the task object

 *

 * Return 0 if read access is permitted

/**

 * smack_task_movememory - Smack check on moving memory

 * @p: the task object

 *

 * Return 0 if write access is permitted

/**

 * smack_task_kill - Smack check on signal delivery

 * @p: the task object

 * @info: unused

 * @sig: unused

 * @cred: identifies the cred to use in lieu of current's

 *

 * Return 0 if write access is permitted

 *

 null signal; existence test */

	/*

	 * Sending a signal requires that the sender

	 * can write the receiver.

	/*

	 * If the cred isn't NULL we're dealing with some USB IO

	 * specific behavior. This is not clean. For one thing

	 * we can't take privilege into account.

/**

 * smack_task_to_inode - copy task smack into the inode blob

 * @p: task to copy from

 * @inode: inode to copy to

 *

 * Sets the smack pointer in the inode security blob

/*

 * Socket hooks.

/**

 * smack_sk_alloc_security - Allocate a socket blob

 * @sk: the socket

 * @family: unused

 * @gfp_flags: memory allocation flags

 *

 * Assign Smack pointers to current

 *

 * Returns 0 on success, -ENOMEM is there's no memory

	/*

	 * Sockets created by kernel threads receive web label.

/**

 * smack_sk_free_security - Free a socket blob

 * @sk: the socket

 *

 * Clears the blob pointer

/**

* smack_ipv4host_label - check host based restrictions

* @sip: the object end

*

* looks for host based access restrictions

*

* This version will only be appropriate for really small sets of single label

* hosts.  The caller is responsible for ensuring that the RCU read lock is

* taken before calling this function.

*

* Returns the label of the far end or NULL if it's not special.

		/*

		 * we break after finding the first match because

		 * the list is sorted from longest to shortest mask

		 * so we have found the most specific match

/*

 * smk_ipv6_localhost - Check for local ipv6 host address

 * @sip: the address

 *

 * Returns boolean true if this is the localhost address

/**

* smack_ipv6host_label - check host based restrictions

* @sip: the object end

*

* looks for host based access restrictions

*

* This version will only be appropriate for really small sets of single label

* hosts.  The caller is responsible for ensuring that the RCU read lock is

* taken before calling this function.

*

* Returns the label of the far end or NULL if it's not special.

	/*

	 * It's local. Don't look for a host label.

		/*

		 * If the label is NULL the entry has

		 * been renounced. Ignore it.

		/*

		* we break after finding the first match because

		* the list is sorted from longest to shortest mask

		* so we have found the most specific match

/**

 * smack_netlbl_add - Set the secattr on a socket

 * @sk: the socket

 *

 * Attach the outbound smack value (smk_out) to the socket.

 *

 * Returns 0 on success or an error code

/**

 * smack_netlbl_delete - Remove the secattr from a socket

 * @sk: the socket

 *

 * Remove the outbound smack value from a socket

	/*

	 * Take the label off the socket if one is set.

/**

 * smk_ipv4_check - Perform IPv4 host access checks

 * @sk: the socket

 * @sap: the destination address

 *

 * Set the correct secattr for the given socket based on the destination

 * address and perform any outbound access checks needed.

 *

 * Returns 0 on success or an error code.

 *

		/*

		 * Clear the socket netlabel if it's set.

/**

 * smk_ipv6_check - check Smack access

 * @subject: subject Smack label

 * @object: object Smack label

 * @address: address

 * @act: the action being taken

 *

 * Check an IPv6 access

/**

 * smk_ipv6_port_label - Smack port access table management

 * @sock: socket

 * @address: address

 *

 * Create or update the port list entry

		/*

		 * This operation is changing the Smack information

		 * on the bound socket. Take the changes to the port

		 * as well.

		/*

		 * A NULL address is only used for updating existing

		 * bound entries. If there isn't one, it's OK.

	/*

	 * This is a special case that is safely ignored.

	/*

	 * Look for an existing port list entry.

	 * This is an indication that a port is getting reused.

	/*

	 * A new port entry is required.

/**

 * smk_ipv6_port_check - check Smack port access

 * @sk: socket

 * @address: address

 * @act: the action being taken

 *

 * Create or update the port list entry

	/*

	 * The other end is a single label host.

	/*

	 * It's remote, so port lookup does no good.

	/*

	 * It's local so the send check has to have passed.

/**

 * smack_inode_setsecurity - set smack xattrs

 * @inode: the object

 * @name: attribute name

 * @value: attribute value

 * @size: size of the attribute

 * @flags: unused

 *

 * Sets the named attribute in the appropriate blob

 *

 * Returns 0 on success, or an error code

	/*

	 * The rest of the Smack xattrs are only on sockets.

/**

 * smack_socket_post_create - finish socket setup

 * @sock: the socket

 * @family: protocol family

 * @type: unused

 * @protocol: unused

 * @kern: unused

 *

 * Sets the netlabel information on the socket

 *

 * Returns 0 on success, and error code otherwise

	/*

	 * Sockets created by kernel threads receive web label.

	/*

	 * Set the outbound netlbl.

/**

 * smack_socket_socketpair - create socket pair

 * @socka: one socket

 * @sockb: another socket

 *

 * Cross reference the peer labels for SO_PEERSEC

 *

 * Returns 0

/**

 * smack_socket_bind - record port binding information.

 * @sock: the socket

 * @address: the port address

 * @addrlen: size of the address

 *

 * Records the label bound to a port.

 *

 * Returns 0 on success, and error code otherwise

 SMACK_IPV6_PORT_LABELING */

/**

 * smack_socket_connect - connect access check

 * @sock: the socket

 * @sap: the other end

 * @addrlen: size of sap

 *

 * Verifies that a connection may be possible

 *

 * Returns 0 on success, and error code otherwise

/**

 * smack_flags_to_may - convert S_ to MAY_ values

 * @flags: the S_ value

 *

 * Returns the equivalent MAY_ value

/**

 * smack_msg_msg_alloc_security - Set the security blob for msg_msg

 * @msg: the object

 *

 * Returns 0

/**

 * smack_of_ipc - the smack pointer for the ipc

 * @isp: the object

 *

 * Returns a pointer to the smack value

/**

 * smack_ipc_alloc_security - Set the security blob for ipc

 * @isp: the object

 *

 * Returns 0

/**

 * smk_curacc_shm : check if current has access on shm

 * @isp : the object

 * @access : access requested

 *

 * Returns 0 if current has the requested access, error code otherwise

/**

 * smack_shm_associate - Smack access check for shm

 * @isp: the object

 * @shmflg: access requested

 *

 * Returns 0 if current has the requested access, error code otherwise

/**

 * smack_shm_shmctl - Smack access check for shm

 * @isp: the object

 * @cmd: what it wants to do

 *

 * Returns 0 if current has the requested access, error code otherwise

		/*

		 * System level information.

/**

 * smack_shm_shmat - Smack access for shmat

 * @isp: the object

 * @shmaddr: unused

 * @shmflg: access requested

 *

 * Returns 0 if current has the requested access, error code otherwise

/**

 * smk_curacc_sem : check if current has access on sem

 * @isp : the object

 * @access : access requested

 *

 * Returns 0 if current has the requested access, error code otherwise

/**

 * smack_sem_associate - Smack access check for sem

 * @isp: the object

 * @semflg: access requested

 *

 * Returns 0 if current has the requested access, error code otherwise

/**

 * smack_sem_semctl - Smack access check for sem

 * @isp: the object

 * @cmd: what it wants to do

 *

 * Returns 0 if current has the requested access, error code otherwise

		/*

		 * System level information

/**

 * smack_sem_semop - Smack checks of semaphore operations

 * @isp: the object

 * @sops: unused

 * @nsops: unused

 * @alter: unused

 *

 * Treated as read and write in all cases.

 *

 * Returns 0 if access is allowed, error code otherwise

/**

 * smk_curacc_msq : helper to check if current has access on msq

 * @isp : the msq

 * @access : access requested

 *

 * return 0 if current has access, error otherwise

/**

 * smack_msg_queue_associate - Smack access check for msg_queue

 * @isp: the object

 * @msqflg: access requested

 *

 * Returns 0 if current has the requested access, error code otherwise

/**

 * smack_msg_queue_msgctl - Smack access check for msg_queue

 * @isp: the object

 * @cmd: what it wants to do

 *

 * Returns 0 if current has the requested access, error code otherwise

		/*

		 * System level information

/**

 * smack_msg_queue_msgsnd - Smack access check for msg_queue

 * @isp: the object

 * @msg: unused

 * @msqflg: access requested

 *

 * Returns 0 if current has the requested access, error code otherwise

/**

 * smack_msg_queue_msgrcv - Smack access check for msg_queue

 * @isp: the object

 * @msg: unused

 * @target: unused

 * @type: unused

 * @mode: unused

 *

 * Returns 0 if current has read and write access, error code otherwise

/**

 * smack_ipc_permission - Smack access for ipc_permission()

 * @ipp: the object permissions

 * @flag: access requested

 *

 * Returns 0 if current has read and write access, error code otherwise

/**

 * smack_ipc_getsecid - Extract smack security id

 * @ipp: the object permissions

 * @secid: where result will be saved

/**

 * smack_d_instantiate - Make sure the blob is correct on an inode

 * @opt_dentry: dentry where inode will be attached

 * @inode: the object

 *

 * Set the inode's security blob if it hasn't been done already.

	/*

	 * If the inode is already instantiated

	 * take the quick way out

	/*

	 * We're going to use the superblock default label

	 * if there's no label on the file.

	/*

	 * If this is the root inode the superblock

	 * may be in the process of initialization.

	 * If that is the case use the root value out

	 * of the superblock.

			/*

			 * The cgroup filesystem is never mounted,

			 * so there's no opportunity to set the mount

			 * options.

			/*

			 * What about shmem/tmpfs anonymous files with dentry

			 * obtained from d_alloc_pseudo()?

			/*

			 * Socket access is controlled by the socket

			 * structures associated with the task involved.

	/*

	 * This is pretty hackish.

	 * Casey says that we shouldn't have to do

	 * file system specific code, but it does help

	 * with keeping it simple.

		/*

		 * Casey says that it's a little embarrassing

		 * that the smack file system doesn't do

		 * extended attributes.

		 *

		 * Cgroupfs is special

		/*

		 * devpts seems content with the label of the task.

		 * Programs that change smack have to treat the

		 * pty with respect.

		/*

		 * Casey says procfs appears not to care.

		 * The superblock default suffices.

		/*

		 * Device labels should come from the filesystem,

		 * but watch out, because they're volitile,

		 * getting recreated on every reboot.

		/*

		 * If a smack value has been set we want to use it,

		 * but since tmpfs isn't giving us the opportunity

		 * to set mount options simulate setting the

		 * superblock default.

		/*

		 * This isn't an understood special case.

		 * Get the value from the xattr.

		/*

		 * UNIX domain sockets use lower level socket data.

		/*

		 * No xattr support means, alas, no SMACK label.

		 * Use the aforeapplied default.

		 * It would be curious if the label of the task

		 * does not match that assigned.

		/*

		 * Get the dentry for xattr.

		/*

		 * Transmuting directory

			/*

			 * If this is a new directory and the label was

			 * transmuted when the inode was initialized

			 * set the transmute attribute on the directory

			 * and mark the inode.

			 *

			 * If there is a transmute attribute on the

			 * directory mark the inode.

		/*

		 * Don't let the exec or mmap label be "*" or "@".

/**

 * smack_getprocattr - Smack process attribute access

 * @p: the object task

 * @name: the name of the attribute in /proc/.../attr

 * @value: where to put the result

 *

 * Places a copy of the task Smack into value

 *

 * Returns the length of the smack label or an error code

/**

 * smack_setprocattr - Smack process attribute setting

 * @name: the name of the attribute in /proc/.../attr

 * @value: the value to set

 * @size: the size of the value

 *

 * Sets the Smack value of the task. Only setting self

 * is permitted and only with privilege

 *

 * Returns the length of the smack label or an error code

	/*

	 * No process is ever allowed the web ("@") label

	 * and the star ("*") label.

	/*

	 * process can change its label only once

/**

 * smack_unix_stream_connect - Smack access on UDS

 * @sock: one sock

 * @other: the other sock

 * @newsk: unused

 *

 * Return 0 if a subject with the smack of sock could access

 * an object with the smack of other, otherwise an error code

	/*

	 * Cross reference the peer labels for SO_PEERSEC.

/**

 * smack_unix_may_send - Smack access on UDS

 * @sock: one socket

 * @other: the other socket

 *

 * Return 0 if a subject with the smack of sock could access

 * an object with the smack of other, otherwise an error code

/**

 * smack_socket_sendmsg - Smack check based on destination host

 * @sock: the socket

 * @msg: the message

 * @size: the size of the message

 *

 * Return 0 if the current subject can write to the destination host.

 * For IPv4 this is only a question if the destination is a single label host.

 * For IPv6 this is a check against the label of the port.

	/*

	 * Perfectly reasonable for this to be NULL

 IS_ENABLED(CONFIG_IPV6) */

/**

 * smack_from_secattr - Convert a netlabel attr.mls.lvl/attr.mls.cat pair to smack

 * @sap: netlabel secattr

 * @ssp: socket security information

 *

 * Returns a pointer to a Smack label entry found on the label list.

	/*

	 * Netlabel found it in the cache.

		/*

		 * Looks like a fallback, which gives us a secid.

		/*

		 * Looks like a CIPSO packet.

		 * If there are flags but no level netlabel isn't

		 * behaving the way we expect it to.

		 *

		 * Look it up in the label table

		 * Without guidance regarding the smack value

		 * for the packet fall back on the network

		 * ambient value.

			/*

			 * Compare the catsets. Use the netlbl APIs.

	/*

	 * Without guidance regarding the smack value

	 * for the packet fall back on the network

	 * ambient value.

 CONFIG_IPV6 */

/**

 * smack_from_skb - Smack data from the secmark in an skb

 * @skb: packet

 *

 * Returns smack_known of the secmark or NULL if that won't work.

/**

 * smack_from_netlbl - Smack data from the IP options in an skb

 * @sk: socket data came in on

 * @family: address family

 * @skb: packet

 *

 * Find the Smack label in the IP options. If it hasn't been

 * added to the netlabel cache, add it here.

 *

 * Returns smack_known of the IP options or NULL if that won't work.

/**

 * smack_socket_sock_rcv_skb - Smack packet delivery access check

 * @sk: socket

 * @skb: packet

 *

 * Returns 0 if the packet should be delivered, an error code otherwise

 CONFIG_IPV6 */

		/*

		 * If there is a secmark use it rather than the CIPSO label.

		 * If there is no secmark fall back to CIPSO.

		 * The secmark is assumed to reflect policy better.

		/*

		 * Receiving a packet requires that the other end

		 * be able to write here. Read access is not required.

		 * This is the simplist possible security model

		 * for networking.

 CONFIG_AUDIT */

 SMACK_IPV6_SECMARK_LABELING */

 SMACK_IPV6_PORT_LABELING */

 CONFIG_IPV6 */

/**

 * smack_socket_getpeersec_stream - pull in packet label

 * @sock: the socket

 * @optval: user's destination

 * @optlen: size thereof

 * @len: max thereof

 *

 * returns zero on success, an error code otherwise

/**

 * smack_socket_getpeersec_dgram - pull in packet label

 * @sock: the peer socket

 * @skb: packet data

 * @secid: pointer to where to put the secid of the packet

 *

 * Sets the netlabel socket state on sk from parent

 0 is the invalid secid */

 CONFIG_IPV6 */

		/*

		 * Translate what netlabel gave us.

/**

 * smack_sock_graft - Initialize a newly created socket with an existing sock

 * @sk: child sock

 * @parent: parent socket

 *

 * Set the smk_{in,out} state of an existing sock based on the process that

 * is creating the new socket.

 cssp->smk_packet is already set in smack_inet_csk_clone() */

/**

 * smack_inet_conn_request - Smack access check on connect

 * @sk: socket involved

 * @skb: packet

 * @req: unused

 *

 * Returns 0 if a task with the packet label could write to

 * the socket, otherwise an error code

		/*

		 * Handle mapped IPv4 packets arriving

		 * via IPv6 sockets. Don't set up netlabel

		 * processing on IPv6.

 CONFIG_IPV6 */

	/*

	 * If there is a secmark use it rather than the CIPSO label.

	 * If there is no secmark fall back to CIPSO.

	 * The secmark is assumed to reflect policy better.

	/*

	 * Receiving a packet requires that the other end be able to write

	 * here. Read access is not required.

	/*

	 * Save the peer's label in the request_sock so we can later setup

	 * smk_packet in the child socket so that SO_PEERCRED can report it.

	/*

	 * We need to decide if we want to label the incoming connection here

	 * if we do we only need to label the request_sock and the stack will

	 * propagate the wire-label to the sock when it is created.

/**

 * smack_inet_csk_clone - Copy the connection information to the new socket

 * @sk: the new socket

 * @req: the connection's request_sock

 *

 * Transfer the connection's peer label to the newly created socket.

/*

 * Key management security hooks

 *

 * Casey has not tested key support very heavily.

 * The permission check is most likely too restrictive.

 * If you care about keys please have a look.

/**

 * smack_key_alloc - Set the key security blob

 * @key: object

 * @cred: the credentials to use

 * @flags: unused

 *

 * No allocation required

 *

 * Returns 0

/**

 * smack_key_free - Clear the key security blob

 * @key: the object

 *

 * Clear the blob pointer

/**

 * smack_key_permission - Smack access on a key

 * @key_ref: gets to the object

 * @cred: the credentials to use

 * @need_perm: requested key permission

 *

 * Return 0 if the task has read and write to the object,

 * an error code otherwise

	/*

	 * Validate requested permissions

	/*

	 * If the key hasn't been initialized give it access so that

	 * it may do so.

	/*

	 * This should not occur

/*

 * smack_key_getsecurity - Smack label tagging the key

 * @key points to the key to be queried

 * @_buffer points to a pointer that should be set to point to the

 * resulting string (if no label or an error occurs).

 * Return the length of the string (including terminating NUL) or -ve if

 * an error.

 * May also return 0 (and a NULL buffer pointer) if there is no label.

/**

 * smack_watch_key - Smack access to watch a key for notifications.

 * @key: The key to be watched

 *

 * Return 0 if the @watch->cred has permission to read from the key object and

 * an error otherwise.

	/*

	 * If the key hasn't been initialized give it access so that

	 * it may do so.

	/*

	 * This should not occur

 CONFIG_KEY_NOTIFICATIONS */

 CONFIG_KEYS */

/**

 * smack_post_notification - Smack access to post a notification to a queue

 * @w_cred: The credentials of the watcher.

 * @cred: The credentials of the event source (may be NULL).

 * @n: The notification message to be posted.

 Always let maintenance notifications through. */

 CONFIG_WATCH_QUEUE */

/*

 * Smack Audit hooks

 *

 * Audit requires a unique representation of each Smack specific

 * rule. This unique representation is used to distinguish the

 * object to be audited from remaining kernel objects and also

 * works as a glue between the audit hooks.

 *

 * Since repository entries are added but never deleted, we'll use

 * the smack_known label address related to the given audit rule as

 * the needed unique representation. This also better fits the smack

 * model where nearly everything is a label.

/**

 * smack_audit_rule_init - Initialize a smack audit rule

 * @field: audit rule fields given from user-space (audit.h)

 * @op: required testing operator (=, !=, >, <, ...)

 * @rulestr: smack label to be audited

 * @vrule: pointer to save our own audit rule representation

 *

 * Prepare to audit cases where (@field @op @rulestr) is true.

 * The label to be audited is created if necessay.

/**

 * smack_audit_rule_known - Distinguish Smack audit rules

 * @krule: rule of interest, in Audit kernel representation format

 *

 * This is used to filter Smack rules from remaining Audit ones.

 * If it's proved that this rule belongs to us, the

 * audit_rule_match hook will be called to do the final judgement.

/**

 * smack_audit_rule_match - Audit given object ?

 * @secid: security id for identifying the object to test

 * @field: audit rule flags given from user-space

 * @op: required testing operator

 * @vrule: smack internal rule presentation

 *

 * The core Audit hook. It's used to take the decision of

 * whether to audit or not to audit a given object.

	/*

	 * No need to do string comparisons. If a match occurs,

	 * both pointers will point to the same smack_known

	 * label.

/*

 * There is no need for a smack_audit_rule_free hook.

 * No memory was allocated.

 CONFIG_AUDIT */

/**

 * smack_ismaclabel - check if xattr @name references a smack MAC label

 * @name: Full xattr name to check.

/**

 * smack_secid_to_secctx - return the smack label for a secid

 * @secid: incoming integer

 * @secdata: destination

 * @seclen: how long it is

 *

 * Exists for networking code.

/**

 * smack_secctx_to_secid - return the secid for a smack label

 * @secdata: smack label

 * @seclen: how long result is

 * @secid: outgoing integer

 *

 * Exists for audit and networking code.

/*

 * There used to be a smack_release_secctx hook

 * that did nothing back when hooks were in a vector.

 * Now that there's a list such a hook adds cost.

	/*

	 * Get label from overlay inode and set it in create_sid

	/*

	 * Return 1 if this is the smack access Smack attribute.

	/*

	 * Use the process credential unless all of

	 * the transmuting criteria are met

	/*

	 * the attribute of the containing directory

		/*

		 * If the directory is transmuting and the rule

		 * providing access is transmuting use the containing

		 * directory label instead of the process label.

/**

 * smack_uring_override_creds - Is io_uring cred override allowed?

 * @new: the target creds

 *

 * Check to see if the current task is allowed to override it's credentials

 * to service an io_uring operation.

	/*

	 * Allow the degenerate case where the new Smack value is

	 * the same as the current Smack value.

/**

 * smack_uring_sqpoll - check if a io_uring polling thread can be created

 *

 * Check to see if the current task is allowed to create a new io_uring

 * kernel polling thread.

 CONFIG_IO_URING */

 key management security hooks */

 CONFIG_KEYS */

 Audit hooks */

 CONFIG_AUDIT */

	/*

	 * Initialize rule list locks

	/*

	 * Initialize rule lists

	/*

	 * Create the known labels list

/**

 * smack_init - initialize the smack system

 *

 * Returns 0 on success, -ENOMEM is there's no memory

	/*

	 * Set the security state for the initial task.

	/*

	 * Register with LSM

 initialize the smack_known_list */

/*

 * Smack requires early initialization in order to label

 * all processes and objects when they are created.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2007 Casey Schaufler <casey@schaufler-ca.com>

 *

 * Author:

 *      Casey Schaufler <casey@schaufler-ca.com>

/*

 * The initial value needs to be bigger than any of the

 * known values above.

/*

 * what events do we log

 * can be overwritten at run-time by /smack/logging

/**

 * smk_access_entry - look up matching access rule

 * @subject_label: a pointer to the subject's Smack label

 * @object_label: a pointer to the object's Smack label

 * @rule_list: the list of rules to search

 *

 * This function looks up the subject/object pair in the

 * access rule list and returns the access mode. If no

 * entry is found returns -ENOENT.

 *

 * NOTE:

 *

 * Earlier versions of this function allowed for labels that

 * were not on the label list. This was done to allow for

 * labels to come over the network that had never been seen

 * before on this host. Unless the receiving socket has the

 * star label this will always result in a failure check. The

 * star labeled socket case is now handled in the networking

 * hooks so there is no case where the label is not on the

 * label list. Checking to see if the address of two labels

 * is the same is now a reliable test.

 *

 * Do the object check first because that is more

 * likely to differ.

 *

 * Allowing write access implies allowing locking.

			/*

			 * MAY_WRITE implies MAY_LOCK.

/**

 * smk_access - determine if a subject has a specific access to an object

 * @subject: a pointer to the subject's Smack label entry

 * @object: a pointer to the object's Smack label entry

 * @request: the access requested, in "MAY" format

 * @a : a pointer to the audit data

 *

 * This function looks up the subject/object pair in the

 * access rule list and returns 0 if the access is permitted,

 * non zero otherwise.

 *

 * Smack labels are shared on smack_list

	/*

	 * Hardcoded comparisons.

	/*

	 * A star subject can't access any object.

	/*

	 * An internet object can be accessed by any subject.

	 * Tasks cannot be assigned the internet label.

	 * An internet subject can access any object.

	/*

	 * A star object can be accessed by any subject.

	/*

	 * An object can be accessed in any way by a subject

	 * with the same label.

	/*

	 * A hat subject can read or lock any object.

	 * A floor object can be read or locked by any subject.

	/*

	 * Beyond here an explicit relationship is required.

	 * If the requested access is contained in the available

	 * access (e.g. read is included in readwrite) it's

	 * good. A negative response from smk_access_entry()

	 * indicates there is no entry for this pair.

	/*

	 * Return a positive value if using bringup mode.

	 * This allows the hooks to identify checks that

	 * succeed because of "b" rules.

/**

 * smk_tskacc - determine if a task has a specific access to an object

 * @tsp: a pointer to the subject's task

 * @obj_known: a pointer to the object's label entry

 * @mode: the access requested, in "MAY" format

 * @a : common audit data

 *

 * This function checks the subject task's label/object label pair

 * in the access rule list and returns 0 if the access is permitted,

 * non zero otherwise. It allows that the task may have the capability

 * to override the rules.

	/*

	 * Check the global rule list

		/*

		 * If there is an entry in the task's rule list

		 * it can further restrict access.

	/*

	 * Allow for priviliged to override policy.

/**

 * smk_curacc - determine if current has a specific access to an object

 * @obj_known: a pointer to the object's Smack label entry

 * @mode: the access requested, in "MAY" format

 * @a : common audit data

 *

 * This function checks the current subject label/object label pair

 * in the access rule list and returns 0 if the access is permitted,

 * non zero otherwise. It allows that current may have the capability

 * to override the rules.

/**

 * smack_str_from_perm : helper to transalate an int to a

 * readable string

 * @string : the string to fill

 * @access : the int

 *

/**

 * smack_log_callback - SMACK specific information

 * will be called by generic audit code

 * @ab : the audit_buffer

 * @a  : audit_data

 *

/**

 *  smack_log - Audit the granting or denial of permissions.

 *  @subject_label : smack label of the requester

 *  @object_label  : smack label of the object being accessed

 *  @request: requested permissions

 *  @result: result from smk_access

 *  @ad:  auxiliary audit data

 *

 * Audit the granting or denial of permissions in accordance

 * with the policy.

 check if we have to log the current event */

 end preparing the audit data */

	/*

	 * The result may be positive in bringup mode.

	 * A positive result is an allow, but not for normal reasons.

	 * Mark it as successful, but don't filter it out even if

	 * the logging policy says to do so.

 #ifdef CONFIG_AUDIT */

/**

 * smk_insert_entry - insert a smack label into a hash map,

 * @skp: smack label

 *

 * this function must be called under smack_known_lock

/**

 * smk_find_entry - find a label on the list, return the list entry

 * @string: a text string that might be a Smack label

 *

 * Returns a pointer to the entry in the label list that

 * matches the passed string or NULL if not found.

/**

 * smk_parse_smack - parse smack label from a text string

 * @string: a text string that might contain a Smack label

 * @len: the maximum size, or zero if it is NULL terminated.

 *

 * Returns a pointer to the clean label or an error code.

	/*

	 * Reserve a leading '-' as an indicator that

	 * this isn't a label, but an option to interfaces

	 * including /smack/cipso and /smack/cipso2

/**

 * smk_netlbl_mls - convert a catset to netlabel mls categories

 * @level: MLS sensitivity level

 * @catset: the Smack categories

 * @sap: where to put the netlabel categories

 * @len: number of bytes for the levels in a CIPSO IP option

 *

 * Allocates and fills attr.mls

 * Returns 0 on success, error code on failure.

/**

 * smack_populate_secattr - fill in the smack_known netlabel information

 * @skp: pointer to the structure to fill

 *

 * Populate the netlabel secattr structure for a Smack label.

 *

 * Returns 0 unless creating the category mapping fails

	/*

	 * If direct labeling works use it.

	 * Otherwise use mapped labeling.

/**

 * smk_import_entry - import a label, return the list entry

 * @string: a text string that might be a Smack label

 * @len: the maximum size, or zero if it is NULL terminated.

 *

 * Returns a pointer to the entry in the label list that

 * matches the passed string, adding it if necessary,

 * or an error code.

		/*

		 * Make sure that the entry is actually

		 * filled before putting it on the list.

/**

 * smack_from_secid - find the Smack label associated with a secid

 * @secid: an integer that might be associated with a Smack label

 *

 * Returns a pointer to the appropriate Smack label entry if there is one,

 * otherwise a pointer to the invalid Smack label.

	/*

	 * If we got this far someone asked for the translation

	 * of a secid that is not on the list.

/*

 * Unless a process is running with one of these labels

 * even having CAP_MAC_OVERRIDE isn't enough to grant

 * privilege to violate MAC policy. If no labels are

 * designated (the empty list case) capabilities apply to

 * everyone.

/**

 * smack_privileged_cred - are all privilege requirements met by cred

 * @cap: The requested capability

 * @cred: the credential to use

 *

 * Is the task privileged and allowed to be privileged

 * by the onlycap rule.

 *

 * Returns true if the task is allowed to be privileged, false if it's not.

/**

 * smack_privileged - are all privilege requirements met

 * @cap: The requested capability

 *

 * Is the task privileged and allowed to be privileged

 * by the onlycap rule.

 *

 * Returns true if the task is allowed to be privileged, false if it's not.

	/*

	 * All kernel tasks are privileged

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2007 Casey Schaufler <casey@schaufler-ca.com>

 *

 * Authors:

 * 	Casey Schaufler <casey@schaufler-ca.com>

 * 	Ahmed S. Darwish <darwish.07@gmail.com>

 *

 * Special thanks to the authors of selinuxfs.

 *

 *	Karl MacMillan <kmacmillan@tresys.com>

 *	James Morris <jmorris@redhat.com>

/*

 * smackfs pseudo filesystem.

 load policy */

 load label -> CIPSO mapping */

 CIPSO DOI */

 CIPSO level indicating direct label */

 internet ambient label */

 single label hosts */

 the only "capable" label */

 logging */

 task specific rules */

 access policy */

 CIPSO level indicating mapped label */

 load policy with long labels */

 load task specific rules with long labels */

 make an access check with long labels */

 load long label -> CIPSO mapping */

 set rules with subject label to '-' */

 change or add rules (long labels) */

 change syslog label) */

 set ptrace rule */

 define an unconfined label */

 single label IPv6 hosts */

 CONFIG_IPV6 */

 relabel possible without CAP_MAC_ADMIN */

/*

 * List locks

 CONFIG_IPV6 */

/*

 * This is the "ambient" label for network traffic.

 * If it isn't somehow marked, use this.

 * It can be reset via smackfs/ambient

/*

 * This is the level in a CIPSO header that indicates a

 * smack label is contained directly in the category set.

 * It can be reset via smackfs/direct

/*

 * This is the level in a CIPSO header that indicates a

 * secid is contained directly in the category set.

 * It can be reset via smackfs/mapped

/*

 * Allow one label to be unconfined. This is for

 * debugging and application bring-up purposes only.

 * It is bad and wrong, but everyone seems to expect

 * to have it.

/*

 * If this value is set restrict syslog use to the label specified.

 * It can be reset via smackfs/syslog

/*

 * Ptrace current rule

 * SMACK_PTRACE_DEFAULT    regular smack ptrace rules (/proc based)

 * SMACK_PTRACE_EXACT      labels must match, but can be overriden with

 *			   CAP_SYS_PTRACE

 * SMACK_PTRACE_DRACONIAN  lables must match, CAP_SYS_PTRACE has no effect

/*

 * Certain IP addresses may be designated as single label hosts.

 * Packets are sent there unlabeled, but only from tasks that

 * can write to the specified label.

 CONFIG_IPV6 */

/*

 * Rule lists are maintained for each label.

/*

 * Values for parsing cipso rules

 * SMK_DIGITLEN: Length of a digit field in a rule.

 * SMK_CIPSOMIN: Minimum possible cipso rule length.

 * SMK_CIPSOMAX: Maximum possible cipso rule length.

/*

 * Values for parsing MAC rules

 * SMK_ACCESS: Maximum possible combination of access permissions

 * SMK_ACCESSLEN: Maximum length for a rule access field

 * SMK_LOADLEN: Smack rule length

/*

 * Stricly for CIPSO level manipulation.

 * Set the category bit number in a smack label sized buffer.

/**

 * smk_netlabel_audit_set - fill a netlbl_audit struct

 * @nap: structure to fill

/*

 * Value for parsing single label host rules

 * "1.2.3.4 X"

/**

 * smk_set_access - add a rule to the rule list or replace an old rule

 * @srp: the rule to add or replace

 * @rule_list: the list of rules

 * @rule_lock: the rule list lock

 *

 * Looks through the current subject/object/access list for

 * the subject/object pair and replaces the access that was

 * there. If the pair isn't found add it with the specified

 * access.

 *

 * Returns 0 if nothing goes wrong or -ENOMEM if it fails

 * during the allocation of the new pair to add.

	/*

	 * Because the object label is less likely to match

	 * than the subject label check it first

/**

 * smk_perm_from_str - parse smack accesses from a text string

 * @string: a text string that contains a Smack accesses code

 *

 * Returns an integer with respective bits set for specified accesses.

/**

 * smk_fill_rule - Fill Smack rule from strings

 * @subject: subject label string

 * @object: object label string

 * @access1: access string

 * @access2: string with permissions to be removed

 * @rule: Smack rule

 * @import: if non-zero, import labels

 * @len: label length limit

 *

 * Returns 0 on success, appropriate error code on failure.

/**

 * smk_parse_rule - parse Smack rule from load string

 * @data: string to be parsed whose size is SMK_LOADLEN

 * @rule: Smack rule

 * @import: if non-zero, import labels

 *

 * Returns 0 on success, -1 on errors.

/**

 * smk_parse_long_rule - parse Smack rule from rule string

 * @data: string to be parsed, null terminated

 * @rule: Will be filled with Smack parsed rule

 * @import: if non-zero, import labels

 * @tokens: number of substrings expected in data

 *

 * Returns number of processed bytes on success, -ERRNO on failure.

	/*

	 * Parsing the rule in-place, filling all white-spaces with '\0'

 Unexpected end of data */

 Fixed 24byte label format */

 Variable long label format */

 Rule modification format */

/**

 * smk_write_rules_list - write() for any /smack rule file

 * @file: file pointer, not actually used

 * @buf: where to get the data from

 * @count: bytes sent

 * @ppos: where to start - must be 0

 * @rule_list: the list of rules to write to

 * @rule_lock: lock for the rule list

 * @format: /smack/load or /smack/load2 or /smack/change-rule format.

 *

 * Get one smack access rule from above.

 * The format for SMK_LONG_FMT is:

 *	"subject<whitespace>object<whitespace>access[<whitespace>...]"

 * The format for SMK_FIXED24_FMT is exactly:

 *	"subject                 object                  rwxat"

 * The format for SMK_CHANGE_FMT is:

 *	"subject<whitespace>object<whitespace>

 *	 acc_enable<whitespace>acc_disable[<whitespace>...]"

	/*

	 * No partial writes.

	 * Enough data must be present.

		/*

		 * Minor hack for backward compatibility

	/*

	 * In case of parsing only part of user buf,

	 * avoid having partial rule at the data buffer

/*

 * Core logic for smackfs seq list operations.

	/*

	 * Don't show any rules with label names too long for

	 * interface file (/smack/load or /smack/load2)

	 * because you should expect to be able to write

	 * anything you read back.

/*

 * Seq_file read operations for /smack/load

/**

 * smk_open_load - open() for /smack/load

 * @inode: inode structure representing file

 * @file: "load" file pointer

 *

 * For reading, use load_seq_* seq_file reading operations.

/**

 * smk_write_load - write() for /smack/load

 * @file: file pointer, not actually used

 * @buf: where to get the data from

 * @count: bytes sent

 * @ppos: where to start - must be 0

 *

	/*

	 * Must have privilege.

	 * No partial writes.

	 * Enough data must be present.

/**

 * smk_cipso_doi - initialize the CIPSO domain

/**

 * smk_unlbl_ambient - initialize the unlabeled domain

 * @oldambient: previous domain string

/*

 * Seq_file read operations for /smack/cipso

/*

 * Print cipso labels in format:

 * label level[/cat[,cat]]

	/*

	 * Don't show a label that could not have been set using

	 * /smack/cipso. This is in support of the notion that

	 * anything read from /smack/cipso ought to be writeable

	 * to /smack/cipso.

	 *

	 * /smack/cipso2 should be used instead.

/**

 * smk_open_cipso - open() for /smack/cipso

 * @inode: inode structure representing file

 * @file: "cipso" file pointer

 *

 * Connect our cipso_seq_* operations with /smack/cipso

 * file_operations

/**

 * smk_set_cipso - do the work for write() for cipso and cipso2

 * @file: file pointer, not actually used

 * @buf: where to get the data from

 * @count: bytes sent

 * @ppos: where to start

 * @format: /smack/cipso or /smack/cipso2

 *

 * Accepts only one cipso rule per write call.

 * Returns number of bytes written or error code, as appropriate

	/*

	 * Must have privilege.

	 * No partial writes.

	 * Enough data must be present.

	/*

	 * Only allow one writer at a time. Writes should be

	 * quite rare and small in any case.

		/*

		 * This mapping may have been cached, so clear the cache.

/**

 * smk_write_cipso - write() for /smack/cipso

 * @file: file pointer, not actually used

 * @buf: where to get the data from

 * @count: bytes sent

 * @ppos: where to start

 *

 * Accepts only one cipso rule per write call.

 * Returns number of bytes written or error code, as appropriate

/*

 * Seq_file read operations for /smack/cipso2

/*

 * Print cipso labels in format:

 * label level[/cat[,cat]]

/**

 * smk_open_cipso2 - open() for /smack/cipso2

 * @inode: inode structure representing file

 * @file: "cipso2" file pointer

 *

 * Connect our cipso_seq_* operations with /smack/cipso2

 * file_operations

/**

 * smk_write_cipso2 - write() for /smack/cipso2

 * @file: file pointer, not actually used

 * @buf: where to get the data from

 * @count: bytes sent

 * @ppos: where to start

 *

 * Accepts only one cipso rule per write call.

 * Returns number of bytes written or error code, as appropriate

/*

 * Seq_file read operations for /smack/netlabel

/*

 * Print host/label pairs

/**

 * smk_open_net4addr - open() for /smack/netlabel

 * @inode: inode structure representing file

 * @file: "netlabel" file pointer

 *

 * Connect our net4addr_seq_* operations with /smack/netlabel

 * file_operations

/**

 * smk_net4addr_insert

 * @new : netlabel to insert

 *

 * This helper insert netlabel in the smack_net4addrs list

 * sorted by netmask length (longest to smallest)

 * locked by &smk_net4addr_lock in smk_write_net4addr

 *

 the comparison '>' is a bit hacky, but works */

/**

 * smk_write_net4addr - write() for /smack/netlabel

 * @file: file pointer, not actually used

 * @buf: where to get the data from

 * @count: bytes sent

 * @ppos: where to start

 *

 * Accepts only one net4addr per write call.

 * Returns number of bytes written or error code, as appropriate

	/*

	 * Must have privilege.

	 * No partial writes.

	 * Enough data must be present.

	 * "<addr/mask, as a.b.c.d/e><space><label>"

	 * "<addr, as a.b.c.d><space><label>"

	/*

	 * If smack begins with '-', it is an option, don't import it

		/*

		 * Only the -CIPSO option is supported for IPv4

	/*

	 * Only allow one writer at a time. Writes should be

	 * quite rare and small in any case.

 try to find if the prefix is already in the list */

		/*

		 * Delete the unlabeled entry, only if the previous label

		 * wasn't the special CIPSO option

	/*

	 * Now tell netlabel about the single label nature of

	 * this host so that incoming packets get labeled.

	 * but only if we didn't get the special CIPSO option

/*

 * Seq_file read operations for /smack/netlabel6

/*

 * Print host/label pairs

/**

 * smk_open_net6addr - open() for /smack/netlabel

 * @inode: inode structure representing file

 * @file: "netlabel" file pointer

 *

 * Connect our net6addr_seq_* operations with /smack/netlabel

 * file_operations

/**

 * smk_net6addr_insert

 * @new : entry to insert

 *

 * This inserts an entry in the smack_net6addrs list

 * sorted by netmask length (longest to smallest)

 * locked by &smk_net6addr_lock in smk_write_net6addr

 *

/**

 * smk_write_net6addr - write() for /smack/netlabel

 * @file: file pointer, not actually used

 * @buf: where to get the data from

 * @count: bytes sent

 * @ppos: where to start

 *

 * Accepts only one net6addr per write call.

 * Returns number of bytes written or error code, as appropriate

	/*

	 * Must have privilege.

	 * No partial writes.

	 * Enough data must be present.

	 * "<addr/mask, as a:b:c:d:e:f:g:h/e><space><label>"

	 * "<addr, as a:b:c:d:e:f:g:h><space><label>"

	/*

	 * If smack begins with '-', it is an option, don't import it

		/*

		 * Only -DELETE is supported for IPv6

	/*

	 * Only allow one writer at a time. Writes should be

	 * quite rare and small in any case.

	/*

	 * Try to find the prefix in the list

 CONFIG_IPV6 */

/**

 * smk_read_doi - read() for /smack/doi

 * @filp: file pointer, not actually used

 * @buf: where to put the result

 * @count: maximum to send along

 * @ppos: where to start

 *

 * Returns number of bytes read or error code, as appropriate

/**

 * smk_write_doi - write() for /smack/doi

 * @file: file pointer, not actually used

 * @buf: where to get the data from

 * @count: bytes sent

 * @ppos: where to start

 *

 * Returns number of bytes written or error code, as appropriate

/**

 * smk_read_direct - read() for /smack/direct

 * @filp: file pointer, not actually used

 * @buf: where to put the result

 * @count: maximum to send along

 * @ppos: where to start

 *

 * Returns number of bytes read or error code, as appropriate

/**

 * smk_write_direct - write() for /smack/direct

 * @file: file pointer, not actually used

 * @buf: where to get the data from

 * @count: bytes sent

 * @ppos: where to start

 *

 * Returns number of bytes written or error code, as appropriate

	/*

	 * Don't do anything if the value hasn't actually changed.

	 * If it is changing reset the level on entries that were

	 * set up to be direct when they were created.

/**

 * smk_read_mapped - read() for /smack/mapped

 * @filp: file pointer, not actually used

 * @buf: where to put the result

 * @count: maximum to send along

 * @ppos: where to start

 *

 * Returns number of bytes read or error code, as appropriate

/**

 * smk_write_mapped - write() for /smack/mapped

 * @file: file pointer, not actually used

 * @buf: where to get the data from

 * @count: bytes sent

 * @ppos: where to start

 *

 * Returns number of bytes written or error code, as appropriate

	/*

	 * Don't do anything if the value hasn't actually changed.

	 * If it is changing reset the level on entries that were

	 * set up to be mapped when they were created.

/**

 * smk_read_ambient - read() for /smack/ambient

 * @filp: file pointer, not actually used

 * @buf: where to put the result

 * @cn: maximum to send along

 * @ppos: where to start

 *

 * Returns number of bytes read or error code, as appropriate

	/*

	 * Being careful to avoid a problem in the case where

	 * smack_net_ambient gets changed in midstream.

/**

 * smk_write_ambient - write() for /smack/ambient

 * @file: file pointer, not actually used

 * @buf: where to get the data from

 * @count: bytes sent

 * @ppos: where to start

 *

 * Returns number of bytes written or error code, as appropriate

 Enough data must be present */

/*

 * Seq_file operations for /smack/onlycap

/**

 * smk_list_swap_rcu - swap public list with a private one in RCU-safe way

 * The caller must hold appropriate mutex to prevent concurrent modifications

 * to the public list.

 * Private list is assumed to be not accessible to other threads yet.

 *

 * @public: public list

 * @private: private list

 Remember public list before replacing it */

 Publish private list in place of public in RCU-safe way */

		/* When all readers are done with the old public list,

/**

 * smk_parse_label_list - parse list of Smack labels, separated by spaces

 *

 * @data: the string to parse

 * @list: destination list

 *

 * Returns zero on success or error code, as appropriate

/**

 * smk_destroy_label_list - destroy a list of smack_known_list_elem

 * @list: header pointer of the list to destroy

/**

 * smk_write_onlycap - write() for smackfs/onlycap

 * @file: file pointer, not actually used

 * @buf: where to get the data from

 * @count: bytes sent

 * @ppos: where to start

 *

 * Returns number of bytes written or error code, as appropriate

	/*

	 * Clear the smack_onlycap on invalid label errors. This means

	 * that we can pass a null string to unset the onlycap value.

	 *

	 * Importing will also reject a label beginning with '-',

	 * so "-usecapabilities" will also work.

	 *

	 * But do so only on invalid label, not on system errors.

	 * The invalid label must be first to count as clearing attempt.

/**

 * smk_read_unconfined - read() for smackfs/unconfined

 * @filp: file pointer, not actually used

 * @buf: where to put the result

 * @cn: maximum to send along

 * @ppos: where to start

 *

 * Returns number of bytes read or error code, as appropriate

/**

 * smk_write_unconfined - write() for smackfs/unconfined

 * @file: file pointer, not actually used

 * @buf: where to get the data from

 * @count: bytes sent

 * @ppos: where to start

 *

 * Returns number of bytes written or error code, as appropriate

	/*

	 * Clear the smack_unconfined on invalid label errors. This means

	 * that we can pass a null string to unset the unconfined value.

	 *

	 * Importing will also reject a label beginning with '-',

	 * so "-confine" will also work.

	 *

	 * But do so only on invalid label, not on system errors.

 CONFIG_SECURITY_SMACK_BRINGUP */

/**

 * smk_read_logging - read() for /smack/logging

 * @filp: file pointer, not actually used

 * @buf: where to put the result

 * @count: maximum to send along

 * @ppos: where to start

 *

 * Returns number of bytes read or error code, as appropriate

/**

 * smk_write_logging - write() for /smack/logging

 * @file: file pointer, not actually used

 * @buf: where to get the data from

 * @count: bytes sent

 * @ppos: where to start

 *

 * Returns number of bytes written or error code, as appropriate

/*

 * Seq_file read operations for /smack/load-self

/**

 * smk_open_load_self - open() for /smack/load-self2

 * @inode: inode structure representing file

 * @file: "load" file pointer

 *

 * For reading, use load_seq_* seq_file reading operations.

/**

 * smk_write_load_self - write() for /smack/load-self

 * @file: file pointer, not actually used

 * @buf: where to get the data from

 * @count: bytes sent

 * @ppos: where to start - must be 0

 *

/**

 * smk_user_access - handle access check transaction

 * @file: file pointer

 * @buf: data from user space

 * @count: bytes sent

 * @ppos: where to start - must be 0

 * @format: /smack/load or /smack/load2 or /smack/change-rule format.

		/*

		 * simple_transaction_get() returns null-terminated data

	/*

	 * smk_access() can return a value > 0 in the "bringup" case.

/**

 * smk_write_access - handle access check transaction

 * @file: file pointer

 * @buf: data from user space

 * @count: bytes sent

 * @ppos: where to start - must be 0

/*

 * Seq_file read operations for /smack/load2

/**

 * smk_open_load2 - open() for /smack/load2

 * @inode: inode structure representing file

 * @file: "load2" file pointer

 *

 * For reading, use load2_seq_* seq_file reading operations.

/**

 * smk_write_load2 - write() for /smack/load2

 * @file: file pointer, not actually used

 * @buf: where to get the data from

 * @count: bytes sent

 * @ppos: where to start - must be 0

 *

	/*

	 * Must have privilege.

/*

 * Seq_file read operations for /smack/load-self2

/**

 * smk_open_load_self2 - open() for /smack/load-self2

 * @inode: inode structure representing file

 * @file: "load" file pointer

 *

 * For reading, use load_seq_* seq_file reading operations.

/**

 * smk_write_load_self2 - write() for /smack/load-self2

 * @file: file pointer, not actually used

 * @buf: where to get the data from

 * @count: bytes sent

 * @ppos: where to start - must be 0

 *

/**

 * smk_write_access2 - handle access check transaction

 * @file: file pointer

 * @buf: data from user space

 * @count: bytes sent

 * @ppos: where to start - must be 0

/**

 * smk_write_revoke_subj - write() for /smack/revoke-subject

 * @file: file pointer

 * @buf: data from user space

 * @count: bytes sent

 * @ppos: where to start - must be 0

/**

 * smk_init_sysfs - initialize /sys/fs/smackfs

 *

/**

 * smk_write_change_rule - write() for /smack/change-rule

 * @file: file pointer

 * @buf: data from user space

 * @count: bytes sent

 * @ppos: where to start - must be 0

	/*

	 * Must have privilege.

/**

 * smk_read_syslog - read() for smackfs/syslog

 * @filp: file pointer, not actually used

 * @buf: where to put the result

 * @cn: maximum to send along

 * @ppos: where to start

 *

 * Returns number of bytes read or error code, as appropriate

/**

 * smk_write_syslog - write() for smackfs/syslog

 * @file: file pointer, not actually used

 * @buf: where to get the data from

 * @count: bytes sent

 * @ppos: where to start

 *

 * Returns number of bytes written or error code, as appropriate

 Enough data must be present */

/*

 * Seq_file read operations for /smack/relabel-self

/**

 * smk_open_relabel_self - open() for /smack/relabel-self

 * @inode: inode structure representing file

 * @file: "relabel-self" file pointer

 *

 * Connect our relabel_self_seq_* operations with /smack/relabel-self

 * file_operations

/**

 * smk_write_relabel_self - write() for /smack/relabel-self

 * @file: file pointer, not actually used

 * @buf: where to get the data from

 * @count: bytes sent

 * @ppos: where to start - must be 0

 *

	/*

	 * Must have privilege.

	/*

	 * No partial write.

	 * Enough data must be present.

/**

 * smk_read_ptrace - read() for /smack/ptrace

 * @filp: file pointer, not actually used

 * @buf: where to put the result

 * @count: maximum to send along

 * @ppos: where to start

 *

 * Returns number of bytes read or error code, as appropriate

/**

 * smk_write_ptrace - write() for /smack/ptrace

 * @file: file pointer

 * @buf: data from user space

 * @count: bytes sent

 * @ppos: where to start - must be 0

/**

 * smk_fill_super - fill the smackfs superblock

 * @sb: the empty superblock

 * @fc: unused

 *

 * Fill in the well known entries for the smack filesystem

 *

 * Returns 0 on success, an error code on failure

 CONFIG_IPV6 */

 last one */

/**

 * smk_get_tree - get the smackfs superblock

 * @fc: The mount context, including any options

 *

 * Just passes everything along.

 *

 * Returns what the lower level code does.

/**

 * smk_init_fs_context - Initialise a filesystem context for smackfs

 * @fc: The blank mount context

/**

 * init_smk_fs - get the smackfs superblock

 *

 * register the smackfs

 *

 * Do not register smackfs if Smack wasn't enabled

 * on boot. We can not put this method normally under the

 * smack_init() code path since the security subsystem get

 * initialized before the vfs caches.

 *

 * Returns true if we were not chosen on boot or if

 * we were chosen and filesystem registration succeeded.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * mmap based event notifications for SELinux

 *

 * Author: KaiGai Kohei <kaigai@ak.jp.nec.com>

 *

 * Copyright (C) 2010 NEC corporation

/*

 * The selinux_status_page shall be exposed to userspace applications

 * using mmap interface on /selinux/status.

 * It enables to notify applications a few events that will cause reset

 * of userspace access vector without context switching.

 *

 * The selinux_kernel_status structure on the head of status page is

 * protected from concurrent accesses using seqlock logic, so userspace

 * application should reference the status page according to the seqlock

 * logic.

 *

 * Typically, application checks status->sequence at the head of access

 * control routine. If it is odd-number, kernel is updating the status,

 * so please wait for a moment. If it is changed from the last sequence

 * number, it means something happen, so application will reset userspace

 * avc, if needed.

 * In most cases, application shall confirm the kernel status is not

 * changed without any system call invocations.

/*

 * selinux_kernel_status_page

 *

 * It returns a reference to selinux_status_page. If the status page is

 * not allocated yet, it also tries to allocate it at the first time.

			/*

			 * NOTE: the next policyload event shall set

			 * a positive value on the status->policyload,

			 * although it may not be 1, but never zero.

			 * So, application can know it was updated.

/*

 * selinux_status_update_setenforce

 *

 * It updates status of the current enforcing/permissive mode.

/*

 * selinux_status_update_policyload

 *

 * It updates status of the times of policy reloaded, and current

 * setting of deny_unknown.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Implementation of the kernel access vector cache (AVC).

 *

 * Authors:  Stephen Smalley, <sds@tycho.nsa.gov>

 *	     James Morris <jmorris@redhat.com>

 *

 * Update:   KaiGai, Kohei <kaigai@ak.jp.nec.com>

 *	Replaced the avc_lock spinlock by RCU.

 *

 * Copyright (C) 2003 Red Hat, Inc., James Morris <jmorris@redhat.com>

 anchored in avc_cache->slots[i] */

 list of extended_perms_decision */

 list head of extended_perms_decision */

 head for avc_node->list */

 lock for writes */

 LRU hint for reclaim scan */

 latest revocation notification */

/**

 * avc_init - Initialize the AVC.

 *

 * Initialize the access vector cache.

/*

 * using a linked list for extended_perms_decision lookup because the list is

 * always small. i.e. less than 5, typically 1

/*

 * similar to avc_copy_xperms_decision, but only copy decision

 * information relevant to this perm

	/*

	 * compute index of the u32 of the 256 bits (8 u32s) that contain this

	 * command permission

 for each source xpd allocate a destination xpd and copy */

/**

 * avc_lookup - Look up an AVC entry.

 * @avc: the access vector cache

 * @ssid: source security identifier

 * @tsid: target security identifier

 * @tclass: target security class

 *

 * Look up an AVC entry that is valid for the

 * (@ssid, @tsid), interpreting the permissions

 * based on @tclass.  If a valid AVC entry exists,

 * then this function returns the avc_node.

 * Otherwise, this function returns NULL.

/**

 * avc_insert - Insert an AVC entry.

 * @avc: the access vector cache

 * @ssid: source security identifier

 * @tsid: target security identifier

 * @tclass: target security class

 * @avd: resulting av decision

 * @xp_node: resulting extended permissions

 *

 * Insert an AVC entry for the SID pair

 * (@ssid, @tsid) and class @tclass.

 * The access vectors and the sequence number are

 * normally provided by the security server in

 * response to a security_compute_av() call.  If the

 * sequence number @avd->seqno is not less than the latest

 * revocation notification, then the function copies

 * the access vectors into a cache entry, returns

 * avc_node inserted. Otherwise, this function returns NULL.

/**

 * avc_audit_pre_callback - SELinux specific information

 * will be called by generic audit code

 * @ab: the audit buffer

 * @a: audit_data

/**

 * avc_audit_post_callback - SELinux specific information

 * will be called by generic audit code

 * @ab: the audit buffer

 * @a: audit_data

 in case of invalid context report also the actual context string */

/*

 * This is the slow part of avc audit with big stack footprint.

 * Note that it is non-blocking and can be called from under

 * rcu_read_lock().

/**

 * avc_add_callback - Register a callback for security events.

 * @callback: callback function

 * @events: security events

 *

 * Register a callback function for events in the set @events.

 * Returns %0 on success or -%ENOMEM if insufficient memory

 * exists to add the callback.

/**

 * avc_update_node - Update an AVC entry

 * @avc: the access vector cache

 * @event : Updating event

 * @perms : Permission mask bits

 * @driver: xperm driver information

 * @xperm: xperm permissions

 * @ssid: AVC entry source sid

 * @tsid: AVC entry target sid

 * @tclass : AVC entry target object class

 * @seqno : sequence number when decision was made

 * @xpd: extended_perms_decision to be added to the node

 * @flags: the AVC_* flags, e.g. AVC_EXTENDED_PERMS, or 0.

 *

 * if a valid AVC entry doesn't exist,this function returns -ENOENT.

 * if kmalloc() called internal returns NULL, this function returns -ENOMEM.

 * otherwise, this function updates the AVC entry. The original AVC-entry object

 * will release later by RCU.

 Lock the target slot */

	/*

	 * Copy and replace original node.

/**

 * avc_flush - Flush the cache

 * @avc: the access vector cache

		/*

		 * With preemptable RCU, the outer spinlock does not

		 * prevent RCU grace periods from ending.

/**

 * avc_ss_reset - Flush the cache and revalidate migrated permissions.

 * @avc: the access vector cache

 * @seqno: policy sequence number

			/* save the first error encountered for the return

/*

 * Slow-path helper function for avc_has_perm_noaudit,

 * when the avc_node lookup fails. We get called with

 * the RCU read lock held, and need to return with it

 * still held, but drop if for the security compute.

 *

 * Don't inline this, since it's the slow-path and just

 * results in a bigger stack frame.

/*

 * The avc extended permissions logic adds an additional 256 bits of

 * permissions to an avc node when extended permissions for that node are

 * specified in the avtab. If the additional 256 permissions is not adequate,

 * as-is the case with ioctls, then multiple may be chained together and the

 * driver field is used to specify which set contains the permission.

 if extended permissions are not defined, only consider av_decision */

		/*

		 * Compute the extended_perms_decision only if the driver

		 * is flagged

/**

 * avc_has_perm_noaudit - Check permissions but perform no auditing.

 * @state: SELinux state

 * @ssid: source security identifier

 * @tsid: target security identifier

 * @tclass: target security class

 * @requested: requested permissions, interpreted based on @tclass

 * @flags:  AVC_STRICT or 0

 * @avd: access vector decisions

 *

 * Check the AVC to determine whether the @requested permissions are granted

 * for the SID pair (@ssid, @tsid), interpreting the permissions

 * based on @tclass, and call the security server on a cache miss to obtain

 * a new decision and add it to the cache.  Return a copy of the decisions

 * in @avd.  Return %0 if all @requested permissions are granted,

 * -%EACCES if any permissions are denied, or another -errno upon

 * other errors.  This function is typically called by avc_has_perm(),

 * but may also be called directly to separate permission checking from

 * auditing, e.g. in cases where a lock must be held for the check but

 * should be released for the auditing.

/**

 * avc_has_perm - Check permissions and perform any appropriate auditing.

 * @state: SELinux state

 * @ssid: source security identifier

 * @tsid: target security identifier

 * @tclass: target security class

 * @requested: requested permissions, interpreted based on @tclass

 * @auditdata: auxiliary audit data

 *

 * Check the AVC to determine whether the @requested permissions are granted

 * for the SID pair (@ssid, @tsid), interpreting the permissions

 * based on @tclass, and call the security server on a cache miss to obtain

 * a new decision and add it to the cache.  Audit the granting or denial of

 * permissions in accordance with the policy.  Return %0 if all @requested

 * permissions are granted, -%EACCES if any permissions are denied, or

 * another -errno upon other errors.

	/*

	 * If you are looking at this because you have realized that we are

	 * not destroying the avc_node_cachep it might be easy to fix, but

	 * I don't know the memory barrier semantics well enough to know.  It's

	 * possible that some other task dereferenced security_ops when

	 * it still pointed to selinux operations.  If that is the case it's

	 * possible that it is about to use the avc and is about to need the

	 * avc_node_cachep.  I know I could wrap the security.c security_ops call

	 * in an rcu_lock, but seriously, it's not worth it.  Instead I just flush

	 * the cache and get that memory back.

 kmem_cache_destroy(avc_node_cachep); */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  NSA Security-Enhanced Linux (SELinux) security module

 *

 *  This file contains the SELinux hook function implementations.

 *

 *  Authors:  Stephen Smalley, <sds@tycho.nsa.gov>

 *	      Chris Vance, <cvance@nai.com>

 *	      Wayne Salamon, <wsalamon@nai.com>

 *	      James Morris <jmorris@redhat.com>

 *

 *  Copyright (C) 2001,2002 Networks Associates Technology, Inc.

 *  Copyright (C) 2003-2008 Red Hat, Inc., James Morris <jmorris@redhat.com>

 *					   Eric Paris <eparis@redhat.com>

 *  Copyright (C) 2004-2005 Trusted Computer Solutions, Inc.

 *			    <dgoeddel@trustedcs.com>

 *  Copyright (C) 2006, 2007, 2009 Hewlett-Packard Development Company, L.P.

 *	Paul Moore <paul@paul-moore.com>

 *  Copyright (C) 2007 Hitachi Software Engineering Co., Ltd.

 *		       Yuichi Nakamura <ynakam@hitachisoft.jp>

 *  Copyright (C) 2016 Mellanox Technologies

 for local_port_range[] */

 struct or_callable used in sock_rcv_skb */

 for network interface checks */

 for Unix socket types */

 for Unix socket types */

 for hashlen_string() */

 SECMARK reference count */

/**

 * selinux_secmark_enabled - Check to see if SECMARK is currently enabled

 *

 * Description:

 * This function checks the SECMARK reference counter to see if any SECMARK

 * targets are currently configured, if the reference counter is greater than

 * zero SECMARK is considered to be enabled.  Returns true (1) if SECMARK is

 * enabled, false (0) if SECMARK is disabled.  If the always_check_network

 * policy capability is enabled, SECMARK is always considered enabled.

 *

/**

 * selinux_peerlbl_enabled - Check to see if peer labeling is currently enabled

 *

 * Description:

 * This function checks if NetLabel or labeled IPSEC is enabled.  Returns true

 * (1) if any are enabled or false (0) if neither are enabled.  If the

 * always_check_network policy capability is enabled, peer labeling

 * is always considered enabled.

 *

/*

 * initialise the security for the init task

/*

 * get the security ID of a set of credentials

/*

 * get the subjective security ID of a task

/*

 * get the objective security ID of a task

/*

 * Try reloading inode security labels that have been marked as invalid.  The

 * @may_sleep parameter indicates when sleeping and thus reloading labels is

 * allowed; when set to false, returns -ECHILD when the label is

 * invalid.  The @dentry parameter should be set to a dentry of the inode.

		/*

		 * Try reloading the inode security label.  This will fail if

		 * @opt_dentry is NULL and no dentry for this inode can be

		 * found; in that case, continue using the old label.

/*

 * Get the security label of an inode.

/*

 * Get the security label of a dentry's backing inode.

	/*

	 * As not all inode security structures are in a list, we check for

	 * empty list outside of the lock to make sure that we won't waste

	 * time taking a lock doing nothing.

	 *

	 * The list_del_init() function can be safely called more than once.

	 * It should not be possible for this function to be called with

	 * concurrent list_add(), but for better safety against future changes

	 * in the code, we use list_empty_careful() here.

 Special handling. Genfs but also in-core setxattr handler */

	/*

	 * IMPORTANT: Double-check logic in this function when adding a new

	 * SECURITY_FS_USE_* definition!

 Never allow relabeling on context mounts */

	/*

	 * Make sure that the xattr handler exists and that no

	 * error other than -ENODATA is returned by getxattr on

	 * the root directory.  -ENODATA is ok, as this may be

	 * the first boot of the SELinux kernel before we have

	 * assigned xattr values to the filesystem.

 No xattr support - try to fallback to genfs if possible. */

	/*

	 * Explicitly set or clear SBLABEL_MNT.  It's not sufficient to simply

	 * leave the flag untouched because sb_clone_mnt_opts might be handing

	 * us a superblock that needs the flag to be cleared.

 Initialize the root inode. */

	/* Initialize any other inodes associated with the superblock, e.g.

	   inodes created prior to initial policy load or inodes created

	   during get_sb by a pseudo filesystem that directly

 check if the old mount command had the same options */

	/* check if we were passed the same options twice,

	 * aka someone passed context=a,context=b

/*

 * Allow filesystems with binary mount data to explicitly set mount point

 * labeling information.

			/* Defer initialization until selinux_complete_init,

			   after the initial policy is loaded and the security

		/* Specifying internal flags without providing a place to

	/*

	 * Binary mount data FS will come through this function twice.  Once

	 * from an explicit call and once from the generic calls from the vfs.

	 * Since the generic VFS calls will not contain any security mount data

	 * we need to skip the double mount verification.

	 *

	 * This does open a hole in which we will not notice if the first

	 * mount using this sb set explict options and a second mount using

	 * this sb does not set any security options.  (The first options

	 * will be used for both mounts)

	/*

	 * parse the mount options, check if they are valid sids.

	 * also check if someone is trying to mount the same sb more

	 * than once with different security options.

 previously mounted with options, but not on this attempt? */

		/*

		 * Determine the labeling behavior to use for this

		 * filesystem type.

	/*

	 * If this is a user namespace mount and the filesystem type is not

	 * explicitly whitelisted, then no contexts are allowed on the command

	 * line and security labels must be ignored.

 sets the context of the superblock for the fs being mounted. */

	/*

	 * Switch to using mount point labeling behavior.

	 * sets the label used on all file below the mountpoint, and will set

	 * the superblock context if not already set.

	/*

	 * if the parent was able to be mounted it clearly had no special lsm

	 * mount options.  thus we can safely deal with this superblock later

	/*

	 * Specifying internal flags without providing a place to

	 * place the results is not allowed.

 how can we clone if the old one wasn't set up?? */

 if fs is reusing a sb, make sure that the contexts match */

 eaten and completely ignored */

			/* each process gets a /proc/PID/ entry. Strip off the

			 * PID part to get a valid selinux labeling.

 No match in policy, mark as unlabeled. */

 Need a larger buffer.  Query for the right size. */

 The inode's security attributes must be initialized before first use. */

		/* Defer initialization until selinux_complete_init,

		   after the initial policy is loaded and the security

		/* Need a dentry, since the xattr API requires one.

 Called from d_instantiate or d_splice_alias. */

			/*

			 * Called from selinux_complete_init, try to find a dentry.

			 * Some filesystems really want a connected one, so try

			 * that first.  We could split SECURITY_FS_USE_XATTR in

			 * two, depending upon that...

			/*

			 * this is can be hit on boot when a file is accessed

			 * before the policy is loaded.  When we load policy we

			 * may find inodes that have no dentry on the

			 * sbsec->isec_head list.  No reason to complain as these

			 * will get fixed up the next time we go through

			 * inode_doinit with a dentry, before these inodes could

			 * be used again by userspace.

 Default to the fs SID. */

 Try to obtain a transition SID. */

 Default to the fs superblock SID. */

			/* We must have a dentry to determine the label on

				/* Called from d_instantiate or

				/* Called from selinux_complete_init, try to

				 * find a dentry.  Some filesystems really want

				 * a connected one, so try that first.

			/*

			 * This can be hit on boot when a file is accessed

			 * before the policy is loaded.  When we load policy we

			 * may find inodes that have no dentry on the

			 * sbsec->isec_head list.  No reason to complain as

			 * these will get fixed up the next time we go through

			 * inode_doinit() with a dentry, before these inodes

			 * could be used again by userspace.

 Convert a Linux signal to an access vector. */

 Commonly granted from child to parent. */

 Cannot be caught or ignored */

 Cannot be caught or ignored */

 All other signals. */

 Check whether a task is allowed to use a capability. */

/* Check whether a task has a particular permission to an inode.

   The 'adp' parameter is optional and allows other audit

/* Same as inode_has_perm, but pass explicit audit data containing

   the dentry to help the auditing code to more easily generate the

/* Same as inode_has_perm, but pass explicit audit data containing

   the path to help the auditing code to more easily generate the

 Same as path_has_perm, but uses the inode from the file struct. */

/* Check whether a task can use an open file descriptor to

   access an inode in a given way.  Check access to the

   descriptor itself, and then use dentry_has_perm to

   check a particular permission to the file.

   Access to the descriptor is implicitly granted if it

   has the same SID as the process.  If av is zero, then

   access to the file is not checked, e.g. for cases

 av is zero if only checking access to the descriptor. */

/*

 * Determine the label for an inode that might be unioned.

 Check whether a task can create a file. */

 Check whether a task can link, unlink, or rmdir a file/directory. */

 Check whether a task can perform a filesystem operation. */

 Convert a Linux mode and permission mask to an access vector. */

 Convert a Linux file to an access vector. */

		/*

		 * Special file opened with flags 3 for ioctl-only use.

/*

 * Convert a file to an access vector and include the correct

 * open permission.

 Hook functions begin here. */

/*

 * (This comment used to live with the selinux_task_setuid hook,

 * which was removed).

 *

 * Since setuid only affects the current process, and since the SELinux

 * controls are not based on the Linux identity attributes, SELinux does not

 * need to control this operation.  However, SELinux does control the use of

 * the CAP_SETUID and CAP_SETGID capabilities using the capable hook.

 let the kernel handle invalid cmds */

 Read last kernel messages */

 Return size of the log buffer */

 Disable logging to console */

 Enable logging to console */

 Set level of messages printed to console */

 All other syslog types */

/*

 * Check that a process has enough memory to allocate a new virtual

 * mapping. 0 means there is enough memory for the allocation to

 * succeed and -ENOMEM implies there is not.

 *

 * Do not audit the selinux permission check, as this is applied to all

 * processes that allocate mappings.

 binprm security operations */

 neither NNP nor nosuid */

 No change in credentials */

	/*

	 * If the policy enables the nnp_nosuid_transition policy capability,

	 * then we permit transitions under NNP or nosuid if the

	 * policy allows the corresponding permission between

	 * the old and new contexts.

	/*

	 * We also permit NNP or nosuid transitions to bounded SIDs,

	 * i.e. SIDs that are guaranteed to only be allowed a subset

	 * of the permissions of the current SID.

	/*

	 * On failure, preserve the errno values for NNP vs nosuid.

	 * NNP:  Operation not permitted for caller.

	 * nosuid:  Permission denied to file.

	/* SELinux context only depends on initial program or script and not

 Default to the current task SID. */

 Reset fs, key, and sock SIDs on execve. */

 Reset exec SID on execve. */

 Fail on NNP or nosuid if not an allowed transition. */

 Check for a default transition on this program. */

		/*

		 * Fallback to old SID on NNP or nosuid if not an allowed

		 * transition.

 Check permissions for the transition. */

 Check for shared state */

		/* Make sure that anyone attempting to ptrace over a task that

 Clear any possibly unsafe personality bits on exec: */

		/* Enable secure mode for SIDs transitions unless

		   the noatsecure permission is granted between

 Derived from fs/exec.c:flush_old_files. */

			/* Revalidate access to controlling tty.

			   Use file_path_has_perm on the tty path directly

			   rather than using file_has_perm, as this particular

			   open file may belong to another process and we are

 Reset controlling tty. */

 Revalidate access to inherited open files. */

 none found? */

 replace all the matching ones with this */

/*

 * Prepare a process for imminent new credential changes due to exec

 Close files for which the new task SID is not authorized. */

 Always clear parent death signal on SID transitions. */

	/* Check whether the new SID can inherit resource limits from the old

	 * SID.  If not, reset all soft limits to the lower of the current

	 * task's hard limit and the init task's soft limit.

	 *

	 * Note that the setting of hard limits (even to lower them) can be

	 * controlled by the setrlimit check.  The inclusion of the init task's

	 * soft limit into the computation is to avoid resetting soft limits

	 * higher than the default soft limit for cases where the default is

	 * lower than the hard limit, e.g. RLIMIT_CORE or RLIMIT_STACK.

 protect against do_prlimit() */

/*

 * Clean up the process immediately after the installation of new credentials

 * due to exec

	/* Check whether the new SID can inherit signal state from the old SID.

	 * If not, clear itimers to avoid subsequent signal generation and

	 * flush and unblock signals.

	 *

	 * This must occur _after_ the task SID has been updated so that any

	 * kill done after the flush will be checked against the new SID.

	/* Wake up the parent if it is waiting so that it can recheck

 superblock security operations */

 strip quotes */

 copy with preceding comma

	/*

	 * Superblock not initialized (i.e. no options) - reject if any

	 * options specified, otherwise accept.

	/*

	 * Superblock initialized and no options specified - reject if

	 * superblock has any options set, otherwise accept.

 inode security operations */

 Possibly defer initialization to selinux_complete_init. */

	/*

	 * We only get here once per ephemeral inode.  The inode has

	 * been initialized via inode_alloc_security but is otherwise

	 * untouched.

	/*

	 * Now that we've initialized security, check whether we're

	 * allowed to actually create this type of anonymous inode.

 No permission to check.  Existence test. */

 ATTR_FORCE is just used for ATTR_KILL_S[UG]ID. */

		/* Not an attribute we recognize, so just check the

			/* We strip a nul only if it is at the end, otherwise the

 Not an attribute we recognize, so nothing to do. */

		/* If we haven't even been initialized, then we can't validate

		 * against a policy, so leave the label as invalid. It may

		 * resolve to a valid label on the next revalidation try if

		 * we've since initialized.

		/* Not an attribute we recognize, so just check the

	/* No one is allowed to remove a SELinux security label.

	/*

	 * Set permission needed based on the type of mark being set.

	 * Performs an additional check for sb watches.

 blocking watches require the file:watch_with_perm permission */

 watches on read-like events need the file:watch_reads permission */

/*

 * Copy the inode security context value to the user.

 *

 * Permission check is handled by selinux_inode_getxattr hook.

	/*

	 * If we're not initialized yet, then we can't validate contexts, so

	 * just let vfs_getxattr fall back to using the on-disk xattr.

	/*

	 * If the caller has CAP_MAC_ADMIN, then get the raw context

	 * value even if it is not defined by current policy; otherwise,

	 * use the in-core value under current policy.

	 * Use the non-auditing forms of the permission checks since

	 * getxattr may be called by unprivileged processes commonly

	 * and lack of permission just means that we fall back to the

	 * in-core context value, not a denial.

 Get label from overlay inode and set it in create_sid */

	/* The copy_up hook above sets the initial context on an inode, but we

	 * don't then want to overwrite it by blindly copying all the lower

	 * xattrs up.  Instead, we have to filter out SELinux-related xattrs.

 Discard */

	/*

	 * Any other attribute apart from SELINUX is not claimed, supported

	 * by selinux.

 kernfs node operations */

 file security operations */

 file_mask_to_av won't add FILE__WRITE if MAY_APPEND is set */

 No permission to check.  Existence test. */

 No change since file_open check. */

/*

 * Check whether a task has the ioctl permission and cmd

 * operation to an inode.

 sys_ioctl() checks */

	/* default case assumes that the command will go

	 * to the file's ioctl() function.

		/*

		 * We are making executable an anonymous mapping or a

		 * private file mapping that will also be writable.

		 * This has an additional check.

 read access is always possible with a mapping */

 write access only matters if the mapping is shared */

			/*

			 * We are making executable a file mapping that has

			 * had some COW done. Since pages might have been

			 * written, check ability to execute the possibly

			 * modified content.  This typically should only

			 * occur for text relocations.

 Just check FD__USE permission */

 struct fown_struct is never outside the context of a struct file */

 as per send_sigio_to_task */

	/*

	 * Save inode label and policy sequence number

	 * at open-time so that selinux_file_permission

	 * can determine whether revalidation is necessary.

	 * Task label is already saved in the file security

	 * struct as its SID.

	/*

	 * Since the inode label or policy seqno may have changed

	 * between the selinux_inode_permission check and the saving

	 * of state above, recheck that access is still permitted.

	 * Otherwise, access might never be revalidated against the

	 * new inode label or new policy.

	 * This check is not redundant - do not remove.

 task security operations */

/*

 * prepare a new set of credentials for modification

/*

 * transfer the SELinux data to a blank set of creds

/*

 * set the security data for a kernel service

 * - all the creation contexts are set to unlabelled

/*

 * set the file creation context in a security record to the same as the

 * objective context of the specified inode

 init_module */

 finit_module */

	/* Control the ability to change the hard limit (whether

	   lowering or raising it), so that the hard limit can

	   later be used as a safe reset point for the soft limit

 null signal; existence test */

 Returns error only if unable to parse addresses */

 Returns error only if unable to parse addresses */

 includes fragments */

 IPV6 */

 IPV6 */

/**

 * selinux_skb_peerlbl_sid - Determine the peer label of a packet

 * @skb: the packet

 * @family: protocol family

 * @sid: the packet's peer label SID

 *

 * Description:

 * Check the various different forms of network peer labeling and determine

 * the peer label/SID for the packet; most of the magic actually occurs in

 * the security server function security_net_peersid_cmp().  The function

 * returns zero if the value in @sid is valid (although it may be SECSID_NULL)

 * or -EACCES if @sid is invalid due to inconsistencies with the different

 * peer labels.

 *

/**

 * selinux_conn_sid - Determine the child socket label for a connection

 * @sk_sid: the parent socket's SID

 * @skb_sid: the packet's SID

 * @conn_sid: the resulting connection SID

 *

 * If @skb_sid is valid then the user:role:type information from @sk_sid is

 * combined with the MLS information from @skb_sid in order to create

 * @conn_sid.  If @skb_sid is not valid then @conn_sid is simply a copy

 * of @sk_sid.  Returns zero on success, negative values on failure.

 *

 socket security operations */

 Allows detection of the first association on this socket */

/* Range of port numbers used to automatically bind.

   Need to determine whether we should perform a name_bind

 If PF_INET or PF_INET6, check name_bind permission for the port. */

		/*

		 * sctp_bindx(3) calls via selinux_sctp_bind_connect()

		 * that validates multiple binding addresses. Because of this

		 * need to check address->sa_family as it is possible to have

		 * sk->sk_family = PF_INET6 with addr->sa_family = AF_INET.

				/* see __inet_bind(), we only want to allow

				 * AF_UNSPEC if the address is INADDR_ANY

 Note that SCTP services expect -EINVAL, others -EAFNOSUPPORT. */

/* This supports connect(2) and SCTP connect services such as sctp_connectx(3)

 * and sctp_sendmsg(3) as described in Documentation/security/SCTP.rst

	/* connect(AF_UNSPEC) has special handling, as it is a documented

	 * way to disconnect the socket

	/*

	 * If a TCP, DCCP or SCTP socket, check name_connect permission

	 * for the port.

		/* sctp_connectx(3) calls via selinux_sctp_bind_connect()

		 * that validates multiple connect addresses. Because of this

		 * need to check address->sa_family as it is possible to have

		 * sk->sk_family = PF_INET6 with addr->sa_family = AF_INET.

			/* Note that SCTP services expect -EINVAL, whereas

			 * others expect -EAFNOSUPPORT.

 Supports connect(2), see comments in selinux_socket_connect_helper() */

 server child socket */

 connecting socket */

 Handle mapped IPv4 packets arriving via IPv6 sockets */

	/* If any sort of compatibility mode is enabled then handoff processing

	 * to the selinux_sock_rcv_skb_compat() function to deal with the

	 * special handling.  We do this in an attempt to keep this function

/* Called whenever SCTP receives an INIT chunk. This happens when an incoming

 * connect(2), sctp_connectx(3) or sctp_sendmsg(3) (with no association

 * already present).

		/* This will return peer_sid = SECSID_NULL if there are

		 * no peer labels, see security_net_peersid_resolve().

		/* Here as first association on socket. As the peer SID

		 * was allowed by peer recv (and the netif/node checks),

		 * then it is approved by policy and used as the primary

		 * peer SID for getpeercon(3).

		/* Other association peer SIDs are checked to enforce

		 * consistency among the peer SIDs.

	/* Compute the MLS component for the connection and store

	 * the information in asoc. This will be used by SCTP TCP type

	 * sockets and peeled off connections as they cause a new

	 * socket to be generated. selinux_sctp_sk_clone() will then

	 * plug this into the new socket.

 Set any NetLabel labels including CIPSO/CALIPSO options. */

/* Check if sctp IPv4/IPv6 addresses are valid for binding or connecting

 * based on their @optname.

 Process one or more addresses that may be IPv4 or IPv6 */

 Bind checks */

 Connect checks */

			/* As selinux_sctp_bind_connect() is called by the

			 * SCTP protocol layer, the socket is already locked,

			 * therefore selinux_netlbl_socket_connect_locked()

			 * is called here. The situations handled are:

			 * sctp_connectx(3), sctp_sendmsg(3), sendmsg(2),

			 * whenever a new IP address is added or when a new

			 * primary address is selected.

			 * Note that an SCTP connect(2) call happens before

			 * the SCTP protocol layer and is handled via

			 * selinux_socket_connect().

 Called whenever a new socket is created by accept(2) or sctp_peeloff(3). */

	/* If policy does not support SECCLASS_SCTP_SOCKET then call

	 * the non-sctp clone version.

	/* NOTE: Ideally, we should also get the isec->sid for the

	   new socket in sync, but we don't have the isec available yet.

	   So we will wait until sock_graft to do it, by which

	/* We don't need to take any sort of lock here as we are the only

 handle mapped IPv4 packets arriving via IPv6 sockets */

	/* we aren't taking into account the "sockcreate" SID since the socket

	 * that is being created here is not a socket in the traditional sense,

	 * instead it is a private sock, accessible only to the kernel, and

	 * representing a wide range of network traffic spanning multiple

	 * connections unlike traditional sockets - check the TUN driver to

	/* we don't currently perform any NetLabel based labeling here and it

	 * isn't clear that we would want to do so anyway; while we could apply

	 * labeling without the support of the TUN user the resulting labeled

	 * traffic from the other end of the connection would almost certainly

	 * cause confusion to the TUN user that had no idea network labeling

		/* we do this in the FORWARD path and not the POST_ROUTING

		 * path because we want to make sure we apply the necessary

		 * labeling before IPsec is applied so we can leverage AH

	/* we do this in the LOCAL_OUT path and not the POST_ROUTING path

	 * because we want to make sure we apply the necessary labeling

			/* if the socket is the listening state then this

			 * packet is a SYN-ACK packet which means it needs to

			 * be labeled based on the connection/request_sock and

			 * not the parent socket.  unfortunately, we can't

			 * lookup the request_sock yet as it isn't queued on

			 * the parent socket until after the SYN-ACK is sent.

			 * the "solution" is to simply pass the packet as-is

			 * as any IP option based labeling should be copied

			 * from the initial connection request (in the IP

			 * layer).  it is far from ideal, but until we get a

			 * security label in the packet itself this is the

 standard practice, label using the parent socket */

	/* If any sort of compatibility mode is enabled then handoff processing

	 * to the selinux_ip_postroute_compat() function to deal with the

	 * special handling.  We do this in an attempt to keep this function

	/* If skb->dst->xfrm is non-NULL then the packet is undergoing an IPsec

	 * packet transformation so allow the packet to pass without any checks

	 * since we'll have another chance to perform access control checks

	 * when the packet is on it's final way out.

	 * NOTE: there appear to be some IPv6 multicast cases where skb->dst

	 *       is NULL, in this case go ahead and apply access control.

	 * NOTE: if this is a local socket (skb->sk != NULL) that is in the

	 *       TCP listening state we cannot wait until the XFRM processing

	 *       is done as we will miss out on the SA label if we do;

	 *       unfortunately, this means more work, but it is only once per

		/* Without an associated socket the packet is either coming

		 * from the kernel or it is being forwarded; check the packet

		 * to determine which and if the packet is being forwarded

		/* Locally generated packet but the associated socket is in the

		 * listening state which means this is a SYN-ACK packet.  In

		 * this particular case the correct security label is assigned

		 * to the connection/request_sock but unfortunately we can't

		 * query the request_sock as it isn't queued on the parent

		 * socket until after the SYN-ACK packet is sent; the only

		 * viable choice is to regenerate the label like we do in

		 * selinux_inet_conn_request().  See also selinux_ip_output()

		/* At this point, if the returned skb peerlbl is SECSID_NULL

		 * and the packet has been through at least one XFRM

		 * transformation then we must be dealing with the "final"

		 * form of labeled IPsec packet; since we've already applied

		 * all of our access controls on this packet we can safely

		/* Locally generated packet, fetch the security label from the

 CONFIG_NETFILTER */

		/* NOTE: the nlmsg_len field isn't reliably set by some netlink

		 *       users which means we can't reject skb's with bogus

		 *       length fields; our solution is to follow what

		 *       netlink_rcv_skb() does and simply skip processing at

		 *       messages with length fields that are clearly junk

 -EINVAL is a missing msg/perm mapping */

 -ENOENT is a missing socket/class mapping, ignore */

 move to the next message after applying netlink padding */

 message queue security operations */

 No specific object, just general system-wide information. */

	/*

	 * First time through, need to assign label to the message

		/*

		 * Compute new sid based on current process and

		 * message queue this message will be stored in

 Can this process write to the queue? */

 Can this process send the message */

 Can the message be put in the queue? */

 Shared Memory security operations */

 Note, at this point, shp is locked down */

 No specific object, just general system-wide information. */

 Semaphore security operations */

 Note, at this point, sma is locked down */

 No specific object, just general system-wide information. */

	/*

	 * Basic control over ability to set these attributes at all.

 Obtain a SID for the context, if one was specified. */

				/* We strip a nul only if it is at the end, otherwise the

	/* Permission checking based on the specified context is

	   performed during the actual operation (execve,

	   open/mkdir/...), when we know the full context of the

	   operation.  See selinux_bprm_creds_for_exec for the execve

	   checks and may_create for the file creation checks. The

 Only allow single threaded processes to change context */

 Check permissions for the transition. */

		/* Check for ptracing, and update the task SID if ok.

/*

 *	called with inode->i_mutex locked

 Do not return error when suppressing label (SBLABEL_MNT not set). */

/*

 *	called with inode->i_mutex locked

/* This function will check the file pass through unix socket or binder to see

 * if it is a bpf related object. And apply correspinding checks on the bpf

 * object based on the type. The bpf maps and programs, not like other files and

 * socket, are using a shared anonymous inode inside the kernel as their inode.

 * So checking that inode cannot identify if the process have privilege to

 * access the bpf object and that's why we have to add this additional check in

 * selinux_file_receive and selinux_binder_transfer_files.

/**

 * selinux_uring_override_creds - check the requested cred override

 * @new: the target creds

 *

 * Check to see if the current task is allowed to override it's credentials

 * to service an io_uring operation.

/**

 * selinux_uring_sqpoll - check if a io_uring polling thread can be created

 *

 * Check to see if the current task is allowed to create a new io_uring

 * kernel polling thread.

 CONFIG_IO_URING */

/*

 * IMPORTANT NOTE: When adding new hooks, please be careful to keep this order:

 * 1. any hooks that don't belong to (2.) or (3.) below,

 * 2. hooks that both access structures allocated by other hooks, and allocate

 *    structures that can be later accessed by other hooks (mostly "cloning"

 *    hooks),

 * 3. hooks that only allocate structures that can be later accessed by other

 *    hooks ("allocating" hooks).

 *

 * Please follow block comment delimiters in the list to keep this order.

 *

 * This ordering is needed for SELinux runtime disable to work at least somewhat

 * safely. Breaking the ordering rules above might lead to NULL pointer derefs

 * when disabling SELinux at runtime.

	/*

	 * PUT "CLONING" (ACCESSING + ALLOCATING) HOOKS HERE

	/*

	 * PUT "ALLOCATING" HOOKS HERE

 Set the security state for the initial task. */

 Set up any superblocks initialized prior to the policy load. */

/* SELinux requires early initialization in order to label

 IPV6 */

 CONFIG_NETFILTER */

 CONFIG_NETFILTER */

 Not permitted after initial policy load. */

 Only do this once. */

	/*

	 * Unregister netfilter hooks.

	 * Must be done before security_delete_hooks() to avoid breaking

	 * runtime disable.

 Try to destroy the avc node cache */

 Unregister selinuxfs. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Netlink message type permission tables, for user generated messages.

 *

 * Author: James Morris <jmorris@redhat.com>

 *

 * Copyright (C) 2004 Red Hat, Inc., James Morris <jmorris@redhat.com>

		/* RTM_MAX always points to RTM_SETxxxx, ie RTM_NEWxxx + 3.

		 * If the BUILD_BUG_ON() below fails you must update the

		 * structures at the top of this file with the new mappings

		 * before updating the BUILD_BUG_ON() macro!

		/* If the BUILD_BUG_ON() below fails you must update the

		 * structures at the top of this file with the new mappings

		 * before updating the BUILD_BUG_ON() macro!

 No messaging from userspace, or class unknown/unhandled */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Network port table

 *

 * SELinux must keep a mapping of network ports to labels/SIDs.  This

 * mapping is maintained as part of the normal policy but a fast cache is

 * needed to reduce the lookup overhead.

 *

 * Author: Paul Moore <paul@paul-moore.com>

 *

 * This code is heavily based on the "netif" concept originally developed by

 * James Morris <jmorris@redhat.com>

 *   (see security/selinux/netif.c for more information)

/*

 * (c) Copyright Hewlett-Packard Development Company, L.P., 2008

/* NOTE: we are using a combined hash table for both IPv4 and IPv6, the reason

 * for this is that I suspect most users will not make heavy use of both

 * address families at the same time so one table will usually end up wasted,

 * if this becomes a problem we can always add a hash table for each address

/**

 * sel_netport_hashfn - Hashing function for the port table

 * @pnum: port number

 *

 * Description:

 * This is the hashing function for the port table, it returns the bucket

 * number for the given port.

 *

/**

 * sel_netport_find - Search for a port record

 * @protocol: protocol

 * @pnum: port

 *

 * Description:

 * Search the network port table and return the matching record.  If an entry

 * can not be found in the table return NULL.

 *

/**

 * sel_netport_insert - Insert a new port into the table

 * @port: the new port record

 *

 * Description:

 * Add a new port record to the network address hash table.

 *

	/* we need to impose a limit on the growth of the hash table so check

/**

 * sel_netport_sid_slow - Lookup the SID of a network address using the policy

 * @protocol: protocol

 * @pnum: port

 * @sid: port SID

 *

 * Description:

 * This function determines the SID of a network port by querying the security

 * policy.  The result is added to the network port table to speedup future

 * queries.  Returns zero on success, negative values on failure.

 *

/**

 * sel_netport_sid - Lookup the SID of a network port

 * @protocol: protocol

 * @pnum: port

 * @sid: port SID

 *

 * Description:

 * This function determines the SID of a network port using the fastest method

 * possible.  First the port table is queried, but if an entry can't be found

 * then the policy is queried and the result is added to the table to speedup

 * future queries.  Returns zero on success, negative values on failure.

 *

/**

 * sel_netport_flush - Flush the entire network port table

 *

 * Description:

 * Remove all entries from the network address table.

 *

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Network node table

 *

 * SELinux must keep a mapping of network nodes to labels/SIDs.  This

 * mapping is maintained as part of the normal policy but a fast cache is

 * needed to reduce the lookup overhead since most of these queries happen on

 * a per-packet basis.

 *

 * Author: Paul Moore <paul@paul-moore.com>

 *

 * This code is heavily based on the "netif" concept originally developed by

 * James Morris <jmorris@redhat.com>

 *   (see security/selinux/netif.c for more information)

/*

 * (c) Copyright Hewlett-Packard Development Company, L.P., 2007

/* NOTE: we are using a combined hash table for both IPv4 and IPv6, the reason

 * for this is that I suspect most users will not make heavy use of both

 * address families at the same time so one table will usually end up wasted,

 * if this becomes a problem we can always add a hash table for each address

/**

 * sel_netnode_hashfn_ipv4 - IPv4 hashing function for the node table

 * @addr: IPv4 address

 *

 * Description:

 * This is the IPv4 hashing function for the node interface table, it returns

 * the bucket number for the given IP address.

 *

	/* at some point we should determine if the mismatch in byte order

/**

 * sel_netnode_hashfn_ipv6 - IPv6 hashing function for the node table

 * @addr: IPv6 address

 *

 * Description:

 * This is the IPv6 hashing function for the node interface table, it returns

 * the bucket number for the given IP address.

 *

	/* just hash the least significant 32 bits to keep things fast (they

	 * are the most likely to be different anyway), we can revisit this

/**

 * sel_netnode_find - Search for a node record

 * @addr: IP address

 * @family: address family

 *

 * Description:

 * Search the network node table and return the record matching @addr.  If an

 * entry can not be found in the table return NULL.

 *

/**

 * sel_netnode_insert - Insert a new node into the table

 * @node: the new node record

 *

 * Description:

 * Add a new node record to the network address hash table.

 *

	/* we need to impose a limit on the growth of the hash table so check

/**

 * sel_netnode_sid_slow - Lookup the SID of a network address using the policy

 * @addr: the IP address

 * @family: the address family

 * @sid: node SID

 *

 * Description:

 * This function determines the SID of a network address by querying the

 * security policy.  The result is added to the network address table to

 * speedup future queries.  Returns zero on success, negative values on

 * failure.

 *

/**

 * sel_netnode_sid - Lookup the SID of a network address

 * @addr: the IP address

 * @family: the address family

 * @sid: node SID

 *

 * Description:

 * This function determines the SID of a network address using the fastest

 * method possible.  First the address table is queried, but if an entry

 * can't be found then the policy is queried and the result is added to the

 * table to speedup future queries.  Returns zero on success, negative values

 * on failure.

 *

/**

 * sel_netnode_flush - Flush the entire network address table

 *

 * Description:

 * Remove all entries from the network address table.

 *

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SELinux NetLabel Support

 *

 * This file provides the necessary glue to tie NetLabel into the SELinux

 * subsystem.

 *

 * Author: Paul Moore <paul@paul-moore.com>

/*

 * (c) Copyright Hewlett-Packard Development Company, L.P., 2007, 2008

/**

 * selinux_netlbl_sidlookup_cached - Cache a SID lookup

 * @skb: the packet

 * @family: the packet's address family

 * @secattr: the NetLabel security attributes

 * @sid: the SID

 *

 * Description:

 * Query the SELinux security server to lookup the correct SID for the given

 * security attributes.  If the query is successful, cache the result to speed

 * up future lookups.  Returns zero on success, negative values on failure.

 *

/**

 * selinux_netlbl_sock_genattr - Generate the NetLabel socket secattr

 * @sk: the socket

 *

 * Description:

 * Generate the NetLabel security attributes for a socket, making full use of

 * the socket's attribute cache.  Returns a pointer to the security attributes

 * on success, NULL on failure.

 *

/**

 * selinux_netlbl_sock_getattr - Get the cached NetLabel secattr

 * @sk: the socket

 * @sid: the SID

 *

 * Query the socket's cached secattr and if the SID matches the cached value

 * return the cache, otherwise return NULL.

 *

/**

 * selinux_netlbl_cache_invalidate - Invalidate the NetLabel cache

 *

 * Description:

 * Invalidate the NetLabel security attribute mapping cache.

 *

/**

 * selinux_netlbl_err - Handle a NetLabel packet error

 * @skb: the packet

 * @family: the packet's address family

 * @error: the error code

 * @gateway: true if host is acting as a gateway, false otherwise

 *

 * Description:

 * When a packet is dropped due to a call to avc_has_perm() pass the error

 * code to the NetLabel subsystem so any protocol specific processing can be

 * done.  This is safe to call even if you are unsure if NetLabel labeling is

 * present on the packet, NetLabel is smart enough to only act when it should.

 *

/**

 * selinux_netlbl_sk_security_free - Free the NetLabel fields

 * @sksec: the sk_security_struct

 *

 * Description:

 * Free all of the memory in the NetLabel fields of a sk_security_struct.

 *

/**

 * selinux_netlbl_sk_security_reset - Reset the NetLabel fields

 * @sksec: the sk_security_struct

 *

 * Description:

 * Called when the NetLabel state of a sk_security_struct needs to be reset.

 * The caller is responsible for all the NetLabel sk_security_struct locking.

 *

/**

 * selinux_netlbl_skbuff_getsid - Get the sid of a packet using NetLabel

 * @skb: the packet

 * @family: protocol family

 * @type: NetLabel labeling protocol type

 * @sid: the SID

 *

 * Description:

 * Call the NetLabel mechanism to get the security attributes of the given

 * packet and use those attributes to determine the correct context/SID to

 * assign to the packet.  Returns zero on success, negative values on failure.

 *

/**

 * selinux_netlbl_skbuff_setsid - Set the NetLabel on a packet given a sid

 * @skb: the packet

 * @family: protocol family

 * @sid: the SID

 *

 * Description

 * Call the NetLabel mechanism to set the label of a packet using @sid.

 * Returns zero on success, negative values on failure.

 *

	/* if this is a locally generated packet check to see if it is already

/**

 * selinux_netlbl_sctp_assoc_request - Label an incoming sctp association.

 * @asoc: incoming association.

 * @skb: the packet.

 *

 * Description:

 * A new incoming connection is represented by @asoc, ......

 * Returns zero on success, negative values on failure.

 *

	/* Move skb hdr address info to a struct sockaddr and then call

	 * netlbl_conn_setattr().

/**

 * selinux_netlbl_inet_conn_request - Label an incoming stream connection

 * @req: incoming connection request socket

 * @family: the request socket's address family

 *

 * Description:

 * A new incoming connection request is represented by @req, we need to label

 * the new request_sock here and the stack will ensure the on-the-wire label

 * will get preserved when a full sock is created once the connection handshake

 * is complete.  Returns zero on success, negative values on failure.

 *

/**

 * selinux_netlbl_inet_csk_clone - Initialize the newly created sock

 * @sk: the new sock

 * @family: the sock's address family

 *

 * Description:

 * A new connection has been established using @sk, we've already labeled the

 * socket via the request_sock struct in selinux_netlbl_inet_conn_request() but

 * we need to set the NetLabel state here since we now have a sock structure.

 *

/**

 * selinux_netlbl_sctp_sk_clone - Copy state to the newly created sock

 * @sk: current sock

 * @newsk: the new sock

 *

 * Description:

 * Called whenever a new socket is created by accept(2) or sctp_peeloff(3).

/**

 * selinux_netlbl_socket_post_create - Label a socket using NetLabel

 * @sk: the sock to label

 * @family: protocol family

 *

 * Description:

 * Attempt to label a socket using the NetLabel mechanism using the given

 * SID.  Returns zero values on success, negative values on failure.

 *

/**

 * selinux_netlbl_sock_rcv_skb - Do an inbound access check using NetLabel

 * @sksec: the sock's sk_security_struct

 * @skb: the packet

 * @family: protocol family

 * @ad: the audit data

 *

 * Description:

 * Fetch the NetLabel security attributes from @skb and perform an access check

 * against the receiving socket.  Returns zero on success, negative values on

 * error.

 *

/**

 * selinux_netlbl_option - Is this a NetLabel option

 * @level: the socket level or protocol

 * @optname: the socket option name

 *

 * Description:

 * Returns true if @level and @optname refer to a NetLabel option.

 * Helper for selinux_netlbl_socket_setsockopt().

/**

 * selinux_netlbl_socket_setsockopt - Do not allow users to remove a NetLabel

 * @sock: the socket

 * @level: the socket level or protocol

 * @optname: the socket option name

 *

 * Description:

 * Check the setsockopt() call and if the user is trying to replace the IP

 * options on a socket and a NetLabel is in place for the socket deny the

 * access; otherwise allow the access.  Returns zero when the access is

 * allowed, -EACCES when denied, and other negative values on error.

 *

		/* call the netlabel function directly as we want to see the

		 * on-the-wire label that is assigned via the socket's options

/**

 * selinux_netlbl_socket_connect_helper - Help label a client-side socket on

 * connect

 * @sk: the socket to label

 * @addr: the destination address

 *

 * Description:

 * Attempt to label a connected socket with NetLabel using the given address.

 * Returns zero values on success, negative values on failure.

 *

	/* connected sockets are allowed to disconnect when the address family

	 * is set to AF_UNSPEC, if that is what is happening we want to reset

/**

 * selinux_netlbl_socket_connect_locked - Label a client-side socket on

 * connect

 * @sk: the socket to label

 * @addr: the destination address

 *

 * Description:

 * Attempt to label a connected socket that already has the socket locked

 * with NetLabel using the given address.

 * Returns zero values on success, negative values on failure.

 *

/**

 * selinux_netlbl_socket_connect - Label a client-side socket on connect

 * @sk: the socket to label

 * @addr: the destination address

 *

 * Description:

 * Attempt to label a connected socket with NetLabel using the given address.

 * Returns zero values on success, negative values on failure.

 *

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  NSA Security-Enhanced Linux (SELinux) security module

 *

 *  This file contains the SELinux XFRM hook function implementations.

 *

 *  Authors:  Serge Hallyn <sergeh@us.ibm.com>

 *	      Trent Jaeger <jaegert@us.ibm.com>

 *

 *  Updated: Venkat Yekkirala <vyekkirala@TrustedCS.com>

 *

 *           Granular IPSec Associations for use in MLS environments.

 *

 *  Copyright (C) 2005 International Business Machines Corporation

 *  Copyright (C) 2006 Trusted Computer Solutions, Inc.

/*

 * USAGE:

 * NOTES:

 *   1. Make sure to enable the following options in your kernel config:

 *	CONFIG_SECURITY=y

 *	CONFIG_SECURITY_NETWORK=y

 *	CONFIG_SECURITY_NETWORK_XFRM=y

 *	CONFIG_SECURITY_SELINUX=m/y

 * ISSUES:

 *   1. Caching packets, so they are not dropped during negotiation

 *   2. Emulating a reasonable SO_PEERSEC across machines

 *   3. Testing addition of sk_policy's with security context via setsockopt

 Labeled XFRM instance counter */

/*

 * Returns true if the context is an LSM/SELinux context.

/*

 * Returns true if the xfrm contains a security blob for SELinux.

/*

 * Allocates a xfrm_sec_state and populates it using the supplied security

 * xfrm_user_sec_ctx context.

/*

 * Free the xfrm_sec_ctx structure.

/*

 * Authorize the deletion of a labeled SA or policy rule.

/*

 * LSM hook implementation that authorizes that a flow can use a xfrm policy

 * rule.

	/* All flows should be treated as polmatch'ing an otherwise applicable

 Context sid is either set to label or ANY_ASSOC */

/*

 * LSM hook implementation that authorizes that a state matches

 * the given policy, flow combo.

 unlabeled policy and labeled SA can't match */

 unlabeled policy and unlabeled SA match all flows */

 unlabeled SA and labeled policy can't match */

 Not a SELinux-labeled SA */

	/* We don't need a separate SA Vs. policy polmatch check since the SA

	 * is now of the same label as the flow and a flow Vs. policy polmatch

/*

 * LSM hook implementation that checks and/or returns the xfrm sid for the

 * incoming packet.

/*

 * LSM hook implementation that allocs and transfers uctx spec to xfrm_policy.

/*

 * LSM hook implementation that copies security data structure from old to new

 * for policy cloning.

/*

 * LSM hook implementation that frees xfrm_sec_ctx security information.

/*

 * LSM hook implementation that authorizes deletion of labeled policies.

/*

 * LSM hook implementation that allocates a xfrm_sec_state, populates it using

 * the supplied security context, and assigns it to the xfrm_state.

/*

 * LSM hook implementation that allocates a xfrm_sec_state and populates based

 * on a secid.

/*

 * LSM hook implementation that frees xfrm_state security information.

/*

 * LSM hook implementation that authorizes deletion of labeled SAs.

/*

 * LSM hook that controls access to unlabelled packets.  If

 * a xfrm_state is authorizable (defined by macro) then it was

 * already authorized by the IPSec process.  If not, then

 * we need to check for unlabelled access since this may not have

 * gone thru the IPSec process.

	/* This check even when there's no association involved is intended,

	 * according to Trent Jaeger, to make sure a process can't engage in

/*

 * POSTROUTE_LAST hook's XFRM processing:

 * If we have no security association, then we need to determine

 * whether the socket is allowed to send to an unlabelled destination.

 * If we do have a authorizable security association, then it has already been

 * checked in the selinux_xfrm_state_pol_flow_match hook above.

		/* We should have already seen this packet once before it

		 * underwent xfrm(s). No need to subject it to the unlabeled

	/* This check even when there's no association involved is intended,

	 * according to Trent Jaeger, to make sure a process can't engage in

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Network interface table.

 *

 * Network interfaces (devices) do not have a security field, so we

 * maintain a table associating each interface with a SID.

 *

 * Author: James Morris <jmorris@redhat.com>

 *

 * Copyright (C) 2003 Red Hat, Inc., James Morris <jmorris@redhat.com>

 * Copyright (C) 2007 Hewlett-Packard Development Company, L.P.

 *		      Paul Moore <paul@paul-moore.com>

/**

 * sel_netif_hashfn - Hashing function for the interface table

 * @ns: the network namespace

 * @ifindex: the network interface

 *

 * Description:

 * This is the hashing function for the network interface table, it returns the

 * bucket number for the given interface.

 *

/**

 * sel_netif_find - Search for an interface record

 * @ns: the network namespace

 * @ifindex: the network interface

 *

 * Description:

 * Search the network interface table and return the record matching @ifindex.

 * If an entry can not be found in the table return NULL.

 *

/**

 * sel_netif_insert - Insert a new interface into the table

 * @netif: the new interface record

 *

 * Description:

 * Add a new interface record to the network interface hash table.  Returns

 * zero on success, negative values on failure.

 *

/**

 * sel_netif_destroy - Remove an interface record from the table

 * @netif: the existing interface record

 *

 * Description:

 * Remove an existing interface record from the network interface table.

 *

/**

 * sel_netif_sid_slow - Lookup the SID of a network interface using the policy

 * @ns: the network namespace

 * @ifindex: the network interface

 * @sid: interface SID

 *

 * Description:

 * This function determines the SID of a network interface by querying the

 * security policy.  The result is added to the network interface table to

 * speedup future queries.  Returns zero on success, negative values on

 * failure.

 *

	/* NOTE: we always use init's network namespace since we don't

/**

 * sel_netif_sid - Lookup the SID of a network interface

 * @ns: the network namespace

 * @ifindex: the network interface

 * @sid: interface SID

 *

 * Description:

 * This function determines the SID of a network interface using the fastest

 * method possible.  First the interface table is queried, but if an entry

 * can't be found then the policy is queried and the result is added to the

 * table to speedup future queries.  Returns zero on success, negative values

 * on failure.

 *

/**

 * sel_netif_kill - Remove an entry from the network interface table

 * @ns: the network namespace

 * @ifindex: the network interface

 *

 * Description:

 * This function removes the entry matching @ifindex from the network interface

 * table if it exists.

 *

/**

 * sel_netif_flush - Flush the entire network interface table

 *

 * Description:

 * Remove all entries from the network interface table.

 *

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2021 Microsoft Corporation

 *

 * Author: Lakshmi Ramasubramanian (nramas@linux.microsoft.com)

 *

 * Measure critical data structures maintainted by SELinux

 * using IMA subsystem.

/*

 * selinux_ima_collect_state - Read selinux configuration settings

 *

 * @state: selinux_state

 *

 * On success returns the configuration settings string.

 * On error, returns NULL.

/*

 * selinux_ima_measure_state_locked - Measure SELinux state and hash of policy

 *

 * @state: selinux state struct

	/*

	 * Measure SELinux policy only after initialization is completed.

/*

 * selinux_ima_measure_state - Measure SELinux state and hash of policy

 *

 * @state: selinux state struct

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Netlink event notifications for SELinux.

 *

 * Author: James Morris <jmorris@redhat.com>

 *

 * Copyright (C) 2004 Red Hat, Inc., James Morris <jmorris@redhat.com>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pkey table

 *

 * SELinux must keep a mapping of Infinband PKEYs to labels/SIDs.  This

 * mapping is maintained as part of the normal policy but a fast cache is

 * needed to reduce the lookup overhead.

 *

 * This code is heavily based on the "netif" and "netport" concept originally

 * developed by

 * James Morris <jmorris@redhat.com> and

 * Paul Moore <paul@paul-moore.com>

 *   (see security/selinux/netif.c and security/selinux/netport.c for more

 *   information)

/*

 * (c) Mellanox Technologies, 2016

/**

 * sel_ib_pkey_hashfn - Hashing function for the pkey table

 * @pkey: pkey number

 *

 * Description:

 * This is the hashing function for the pkey table, it returns the bucket

 * number for the given pkey.

 *

/**

 * sel_ib_pkey_find - Search for a pkey record

 * @subnet_prefix: subnet_prefix

 * @pkey_num: pkey_num

 *

 * Description:

 * Search the pkey table and return the matching record.  If an entry

 * can not be found in the table return NULL.

 *

/**

 * sel_ib_pkey_insert - Insert a new pkey into the table

 * @pkey: the new pkey record

 *

 * Description:

 * Add a new pkey record to the hash table.

 *

	/* we need to impose a limit on the growth of the hash table so check

	 * this bucket to make sure it is within the specified bounds

/**

 * sel_ib_pkey_sid_slow - Lookup the SID of a pkey using the policy

 * @subnet_prefix: subnet prefix

 * @pkey_num: pkey number

 * @sid: pkey SID

 *

 * Description:

 * This function determines the SID of a pkey by querying the security

 * policy.  The result is added to the pkey table to speedup future

 * queries.  Returns zero on success, negative values on failure.

 *

	/* If this memory allocation fails still return 0. The SID

	 * is valid, it just won't be added to the cache.

/**

 * sel_ib_pkey_sid - Lookup the SID of a PKEY

 * @subnet_prefix: subnet_prefix

 * @pkey_num: pkey number

 * @sid: pkey SID

 *

 * Description:

 * This function determines the SID of a PKEY using the fastest method

 * possible.  First the pkey table is queried, but if an entry can't be found

 * then the policy is queried and the result is added to the table to speedup

 * future queries.  Returns zero on success, negative values on failure.

 *

/**

 * sel_ib_pkey_flush - Flush the entire pkey table

 *

 * Description:

 * Remove all entries from the pkey table

 *

 SPDX-License-Identifier: GPL-2.0-only

/* Updated: Karl MacMillan <kmacmillan@tresys.com>

 *

 *	Added conditional policy language extensions

 *

 *  Updated: Hewlett-Packard <paul@paul-moore.com>

 *

 *	Added support for the policy capability bitmap

 *

 * Copyright (C) 2007 Hewlett-Packard Development Company, L.P.

 * Copyright (C) 2003 - 2004 Tresys Technology, LLC

 * Copyright (C) 2004 Red Hat, Inc., James Morris <jmorris@redhat.com>

/* selinuxfs pseudo filesystem for exporting the security policy API.

 load policy */

 get or set enforcing status */

 validate context */

 compute access decision */

 compute create labeling decision */

 compute relabeling decision */

 compute reachable user contexts */

 return policy version for this kernel */

 commit new boolean values */

 return if MLS policy is enabled */

 disable SELinux until next reboot */

 compute polyinstantiation membership decision */

 check requested protection, not kernel-applied one */

 whether to use old compat network packet controls */

 export unknown reject handling to userspace */

 export unknown deny handling to userspace */

 export current status using mmap() */

 allow userspace to read the in kernel policy */

 compute validatetrans decision */

 The next inode number to use */

 No partial writes. */

 only allows one page from the head */

 disallow writable mapping */

 disallow mprotect() turns it into writable */

	/* NOTE: we are now officially considering runtime disable as

	 *       deprecated, and using it will become increasingly painful

	 *       (e.g. sleeping/blocking) as we progress through future

	 *       kernel releases until eventually it is removed

 No partial writes. */

 declaration for sel_write_load */

 declaration for sel_make_class_dirs */

 declaration for sel_make_policy_nodes */

 declaration for sel_make_policy_nodes */

 do not allow mprotect to make mapping writable */

 bool_dir cleanup */

 Don't increment last_ino in this function */

 sel_make_dir will increment and set */

 sel_make_dir will increment and set */

 booleans */

 classes */

	/* Since the other temporary dirs are children of tmp_parent

	 * this will handle all the cleanup in the case of a failure before

	 * the swapover

 d_genocide() only handles the children */

 No partial writes. */

 No partial writes. */

 No partial writes. */

/*

 * Remaining nodes use transaction based IO methods like nfsd/nfsctl.c

/*

 * payload - write methods

 * If the method has a response, the response should be put in buf,

 * and the length returned.  Otherwise return 0 or and -error.

		/*

		 * If and when the name of new object to be queried contains

		 * either whitespace or multibyte characters, they shall be

		 * encoded based on the percentage-encoding rule.

		 * If not encoded, the sscanf logic picks up only left-half

		 * of the supplied name; splitted by a whitespace unexpectedly.

 No partial writes. */

 No partial writes. */

 No partial writes. */

 i+1 since perm values are 1-indexed */

 +2 since classes are 1-indexed */

 i+1 since class values are 1-indexed */

 directory inodes start off with i_nlink == 2 (for "." entry) */

 bump link count on parent directory, too */

 directory inodes start off with i_nlink == 2 (for "." entry) */

 last one */ {""}

 SPDX-License-Identifier: GPL-2.0

/*

 * Implementations of the security context functions.

 *

 * Author: Ondrej Mosnacek <omosnacek@gmail.com>

 * Copyright (C) 2020 Red Hat, Inc.

	/*

	 * If a context is invalid, it will always be represented by a

	 * context struct with only the len & str set (and vice versa)

	 * under a given policy. Since context structs from different

	 * policies should never meet, it is safe to hash valid and

	 * invalid contexts differently. The context_cmp() function

	 * already operates under the same assumption.

 SPDX-License-Identifier: GPL-2.0

/*

 * Implementation of the multi-level security (MLS) policy.

 *

 * Author : Stephen Smalley, <sds@tycho.nsa.gov>

/*

 * Updated: Trusted Computer Solutions, Inc. <dgoeddel@trustedcs.com>

 *

 *	Support for enhanced MLS infrastructure.

 *

 * Copyright (C) 2004-2006 Trusted Computer Solutions, Inc.

/*

 * Updated: Hewlett-Packard <paul@paul-moore.com>

 *

 *      Added support to import/export the MLS label from NetLabel

 *

 * (c) Copyright Hewlett-Packard Development Company, L.P., 2006

/*

 * Return the length in bytes for the MLS fields of the

 * security context string representation of `context'.

 for the beginning ":" */

 categories */

 one or more negative bits are skipped */

/*

 * Write the security context string representation of

 * the MLS fields of `context' into the string `*scontext'.

 * Update `*scontext' to point to the end of the MLS fields.

 categories */

 one or more negative bits are skipped */

	/*

	 * Return 1 iff all the bits set in l->cat are also be set in

	 * levdatum->level->cat and no bit in l->cat is larger than

	 * p->p_cats.nprim.

/*

 * Return 1 if the MLS fields in the security context

 * structure `c' are valid.  Return 0 otherwise.

	/*

	 * User must be authorized for the MLS range.

 user may not be associated with range */

/*

 * Set the MLS fields in the security context structure

 * `context' based on the string representation in

 * the string `scontext'.

 *

 * This function modifies the string in place, inserting

 * NULL characters to terminate the MLS fields.

 *

 * If a def_sid is provided and no MLS field is present,

 * copy the MLS field of the associated default context.

 * Used for upgraded to MLS systems where objects may lack

 * MLS fields.

 *

 * Policy read-lock must be held for sidtab lookup.

 *

		/*

		 * With no MLS, only return -EINVAL if there is a MLS field

		 * and it did not come from an xattr.

	/*

	 * No MLS component to the security context, try and map to

	 * default if provided.

	/*

	 * If we're dealing with a range, figure out where the two parts

	 * of the range begin.

 For each part of the range: */

 Split sensitivity and category set. */

 Parse sensitivity. */

 Extract category set. */

 Separate into range if exists */

 Remove '.' */

 If range, set all categories in range */

 If we didn't see a '-', the range start is also the range end. */

/*

 * Set the MLS fields in the security context structure

 * `context' based on the string representation in

 * the string `str'.  This function will allocate temporary memory with the

 * given constraints of gfp_mask.

/*

 * Copies the MLS range `range' into `context'.

 Copy the MLS range into the  context */

 Honor the user's default level if we can */

		/* Lower the clearance of available contexts

		   if the clearance of "fromcon" is lower than

		   that of the user's default clearance (but

		   only if the "fromcon" clearance dominates

/*

 * Convert the MLS fields in the security context

 * structure `oldc' from the values specified in the

 * policy `oldp' to the values specified in the policy `newp',

 * storing the resulting context in `newc'.

 Look for a range transition rule. */

 Use the process MLS attributes. */

 Use the process effective MLS attributes. */

 Use the process effective MLS attributes. */

/**

 * mls_export_netlbl_lvl - Export the MLS sensitivity levels to NetLabel

 * @p: the policy

 * @context: the security context

 * @secattr: the NetLabel security attributes

 *

 * Description:

 * Given the security context copy the low MLS sensitivity level into the

 * NetLabel MLS sensitivity level field.

 *

/**

 * mls_import_netlbl_lvl - Import the NetLabel MLS sensitivity levels

 * @p: the policy

 * @context: the security context

 * @secattr: the NetLabel security attributes

 *

 * Description:

 * Given the security context and the NetLabel security attributes, copy the

 * NetLabel MLS sensitivity level into the context.

 *

/**

 * mls_export_netlbl_cat - Export the MLS categories to NetLabel

 * @p: the policy

 * @context: the security context

 * @secattr: the NetLabel security attributes

 *

 * Description:

 * Given the security context copy the low MLS categories into the NetLabel

 * MLS category field.  Returns zero on success, negative values on failure.

 *

/**

 * mls_import_netlbl_cat - Import the MLS categories from NetLabel

 * @p: the policy

 * @context: the security context

 * @secattr: the NetLabel security attributes

 *

 * Description:

 * Copy the NetLabel security attributes into the SELinux context; since the

 * NetLabel security attribute only contains a single MLS category use it for

 * both the low and high categories of the context.  Returns zero on success,

 * negative values on failure.

 *

 CONFIG_NETLABEL */

/*

 * Implementation of the access vector table type.

 *

 * Author : Stephen Smalley, <sds@tycho.nsa.gov>

/* Updated: Frank Mayer <mayerf@tresys.com> and Karl MacMillan <kmacmillan@tresys.com>

 *

 *	Added conditional policy language extensions

 *

 * Copyright (C) 2003 Tresys Technology, LLC

 *	This program is free software; you can redistribute it and/or modify

 *	it under the terms of the GNU General Public License as published by

 *	the Free Software Foundation, version 2.

 *

 * Updated: Yuichi Nakamura <ynakam@hitachisoft.jp>

 *	Tuned number of hash slots for avtab to reduce memory usage

/* Based on MurmurHash3, written by Austin Appleby and placed in the

 * public domain.

 extended perms may not be unique */

/* Unlike avtab_insert(), this function allow multiple insertions of the same

 * key/specified mask into the table, as needed by the conditional avtab.

 * It also returns a pointer to the node inserted.

/* This search function returns a node pointer, and can be used in

 * conjunction with avtab_search_next_node()

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Implementation of the security services.

 *

 * Authors : Stephen Smalley, <sds@tycho.nsa.gov>

 *	     James Morris <jmorris@redhat.com>

 *

 * Updated: Trusted Computer Solutions, Inc. <dgoeddel@trustedcs.com>

 *

 *	Support for enhanced MLS infrastructure.

 *	Support for context based audit filters.

 *

 * Updated: Frank Mayer <mayerf@tresys.com> and Karl MacMillan <kmacmillan@tresys.com>

 *

 *	Added conditional policy language extensions

 *

 * Updated: Hewlett-Packard <paul@paul-moore.com>

 *

 *      Added support for NetLabel

 *      Added support for the policy capability bitmap

 *

 * Updated: Chad Sellers <csellers@tresys.com>

 *

 *  Added validation of kernel classes and permissions

 *

 * Updated: KaiGai Kohei <kaigai@ak.jp.nec.com>

 *

 *  Added support for bounds domain and audit messaged on masked permissions

 *

 * Updated: Guido Trentalancia <guido@trentalancia.com>

 *

 *  Added support for runtime switching of the policy type

 *

 * Copyright (C) 2008, 2009 NEC Corporation

 * Copyright (C) 2006, 2007 Hewlett-Packard Development Company, L.P.

 * Copyright (C) 2004-2006 Trusted Computer Solutions, Inc.

 * Copyright (C) 2003 - 2004, 2006 Tresys Technology, LLC

 * Copyright (C) 2003 Red Hat, Inc., James Morris <jmorris@redhat.com>

 Forward declaration. */

 Find number of classes in the input mapping */

 Allocate space for the class records, plus one for class zero */

 Store the raw class and permission values */

 An empty class string skips ahead */

 An empty permission string skips ahead */

/*

 * Get real, policy values from mapped values

/*

 * Get kernel value for class from its policy value

		/*

		 * In case the kernel has a bug and requests a permission

		 * between num_perms and the maximum permission number, we

		 * should audit that denial

/*

 * Return the boolean value of a constraint expression

 * when it is applied to the specified source and target

 * security contexts.

 *

 * xcontext is a special beast...  It is used by the validatetrans rules

 * only.  For these rules, scontext is the context before the transition,

 * tcontext is the context after the transition, and xcontext is the context

 * of the process performing the transition.  All other callers of

 * constraint_expr_eval should pass in NULL for xcontext.

/*

 * security_dump_masked_av - dumps masked permissions during

 * security_compute_av due to RBAC, MLS/Constraint and Type bounds.

 init permission_names */

 get scontext/tcontext in text form */

 audit a message */

 release scontext/tcontext */

/*

 * security_boundary_permission - drops violated permissions

 * on boundary constraint.

 no masked permission */

 mask violated permissions */

 audit masked permissions */

/*

 * flag which drivers have permissions

 * only looking for ioctl based extended permssions

 if one or more driver has all permissions allowed */

 if allowing permissions within a driver */

/*

 * Compute access vectors and extended permissions based on a context

 * structure pair for the permissions in a particular class.

	/*

	 * If a specific type enforcement rule was defined for

	 * this permission check, then use it.

 Check conditional av table for additional permissions */

	/*

	 * Remove any permissions prohibited by a constraint (this includes

	 * the MLS policy).

	/*

	 * If checking process transition permission and the

	 * role is changing, then check the (current_role, new_role)

	 * pair.

	/*

	 * If the given source and target types have boundary

	 * constraint, lazy checks have to mask any violated

	 * permission and notice it to userspace via audit.

/*

 * security_bounded_transition - check whether the given

 * transition is directed to bounded, or not.

 * It returns 0, if @newsid is bounded by @oldsid.

 * Otherwise, it returns error code.

 *

 * @state: SELinux state

 * @oldsid : current security identifier

 * @newsid : destinated security identifier

 type/domain unchanged */

 not bounded anymore */

 @newsid is bounded by @oldsid */

/**

 * security_compute_av - Compute access vector decisions.

 * @state: SELinux state

 * @ssid: source security identifier

 * @tsid: target security identifier

 * @orig_tclass: target security class

 * @avd: access vector decisions

 * @xperms: extended permissions

 *

 * Compute a set of access vector decisions based on the

 * SID pair (@ssid, @tsid) for the permissions in @tclass.

 permissive domain? */

 permissive domain? */

/*

 * Write the security context string representation of

 * the context structure `context' into a dynamically

 * allocated string of the correct size.  Set `*scontext'

 * to point to this string and set `*scontext_len' to

 * the length of the string.

 Compute the size of the context. */

 Allocate space for the context; caller must free this space. */

	/*

	 * Copy the user name, role name and type name into the context.

/**

 * security_sid_to_context - Obtain a context for a given SID.

 * @state: SELinux state

 * @sid: security identifier, SID

 * @scontext: security context

 * @scontext_len: length in bytes

 *

 * Write the string representation of the context associated with @sid

 * into a dynamically allocated string of the correct size.  Set @scontext

 * to point to this string and set @scontext_len to the length of the string.

/**

 * security_sid_to_context_inval - Obtain a context for a given SID if it

 *                                 is invalid.

 * @state: SELinux state

 * @sid: security identifier, SID

 * @scontext: security context

 * @scontext_len: length in bytes

 *

 * Write the string representation of the context associated with @sid

 * into a dynamically allocated string of the correct size, but only if the

 * context is invalid in the current policy.  Set @scontext to point to

 * this string (or NULL if the context is valid) and set @scontext_len to

 * the length of the string (or 0 if the context is valid).

/*

 * Caveat:  Mutates scontext.

 Parse the security context. */

 Extract the user. */

 Extract role. */

 Extract type. */

 Check the validity of the new context. */

 An empty security context is never valid. */

 Copy the string to allow changes and ensure a NUL terminator */

 Save another copy for storing in uninterpreted form */

/**

 * security_context_to_sid - Obtain a SID for a given security context.

 * @state: SELinux state

 * @scontext: security context

 * @scontext_len: length in bytes

 * @sid: security identifier, SID

 * @gfp: context for the allocation

 *

 * Obtains a SID associated with the security context that

 * has the string representation specified by @scontext.

 * Returns -%EINVAL if the context is invalid, -%ENOMEM if insufficient

 * memory is available, or 0 on success.

/**

 * security_context_to_sid_default - Obtain a SID for a given security context,

 * falling back to specified default if needed.

 *

 * @state: SELinux state

 * @scontext: security context

 * @scontext_len: length in bytes

 * @sid: security identifier, SID

 * @def_sid: default SID to assign on error

 * @gfp_flags: the allocator get-free-page (GFP) flags

 *

 * Obtains a SID associated with the security context that

 * has the string representation specified by @scontext.

 * The default SID is passed to the MLS layer to be used to allow

 * kernel labeling of the MLS field if the MLS field is not present

 * (for upgrading to MLS without full relabel).

 * Implicitly forces adding of the context even if it cannot be mapped yet.

 * Returns -%EINVAL if the context is invalid, -%ENOMEM if insufficient

 * memory is available, or 0 on success.

 no need to record the NUL with untrusted strings */

	/*

	 * Most filename trans rules are going to live in specific directories

	 * like /dev or /var/run.  This bitmap will quickly skip rule searches

	 * if the ttype does not contain any rules.

 kernel value */

 Set the user identity. */

 notice this gets both DEFAULT_SOURCE and unset */

 Use the process user identity. */

 Use the related object owner. */

 Set the role to default values. */

 Set the type to default values. */

 Use the type of process. */

 Use the type of the related object. */

 Look for a type transition/member/change rule. */

 If no permanent rule, also check for enabled conditional rules */

 Use the type from the type transition/member/change rule. */

 if we have a objname this is a file trans check so check those rules */

 Check for class-specific changes. */

 Look for a role transition rule. */

	/* Set the MLS attributes.

 Check the validity of the context. */

 Obtain the sid for the context. */

/**

 * security_transition_sid - Compute the SID for a new subject/object.

 * @state: SELinux state

 * @ssid: source security identifier

 * @tsid: target security identifier

 * @tclass: target security class

 * @qstr: object name

 * @out_sid: security identifier for new subject/object

 *

 * Compute a SID to use for labeling a new subject or object in the

 * class @tclass based on a SID pair (@ssid, @tsid).

 * Return -%EINVAL if any of the parameters are invalid, -%ENOMEM

 * if insufficient memory is available, or %0 if the new SID was

 * computed successfully.

/**

 * security_member_sid - Compute the SID for member selection.

 * @state: SELinux state

 * @ssid: source security identifier

 * @tsid: target security identifier

 * @tclass: target security class

 * @out_sid: security identifier for selected member

 *

 * Compute a SID to use when selecting a member of a polyinstantiated

 * object of class @tclass based on a SID pair (@ssid, @tsid).

 * Return -%EINVAL if any of the parameters are invalid, -%ENOMEM

 * if insufficient memory is available, or %0 if the SID was

 * computed successfully.

/**

 * security_change_sid - Compute the SID for object relabeling.

 * @state: SELinux state

 * @ssid: source security identifier

 * @tsid: target security identifier

 * @tclass: target security class

 * @out_sid: security identifier for selected member

 *

 * Compute a SID to use for relabeling an object of class @tclass

 * based on a SID pair (@ssid, @tsid).

 * Return -%EINVAL if any of the parameters are invalid, -%ENOMEM

 * if insufficient memory is available, or %0 if the SID was

 * computed successfully.

/*

 * Convert the values in the security context

 * structure `oldc' from the values specified

 * in the policy `p->oldp' to the values specified

 * in the policy `p->newp', storing the new context

 * in `newc'.  Verify that the context is valid

 * under the new policy.

			/*

			 * Retain string representation for later mapping.

			 *

			 * IMPORTANT: We need to copy the contents of oldc->str

			 * back into s again because string_to_context_struct()

			 * may have garbled it.

 Other error condition, e.g. ENOMEM. */

 Convert the user. */

 Convert the role. */

 Convert the type. */

 Convert the MLS fields if dealing with MLS policies */

		/*

		 * Switching between non-MLS and MLS policy:

		 * ensure that the MLS fields of the context for all

		 * existing entries in the sidtab are filled in with a

		 * suitable default value, likely taken from one of the

		 * initial SIDs.

 Check the validity of the new context. */

 Map old representation to string and save it. */

 Flush external caches and notify userspace of policy load */

 If switching between different policy types, log MLS status */

 Set latest granting seqno for new policy. */

 Install the new policy. */

 Load the policycaps from the new policy */

		/*

		 * After first policy load, the security server is

		 * marked as initialized and ready to handle requests and

		 * any objects created prior to policy load are then labeled.

 Free the old policy */

 Notify others of the policy change */

/**

 * security_load_policy - Load a security policy configuration.

 * @state: SELinux state

 * @data: binary policy data

 * @len: length of data in bytes

 * @load_state: policy load state

 *

 * Load a new set of security policy configuration data,

 * validate it and convert the SID table as necessary.

 * This function will flush the access vector cache after

 * loading the new policy.

 First policy load, so no need to preserve state from old policy */

 Preserve active boolean values from the old policy */

	/*

	 * Convert the internal representations of contexts

	 * in the new SID table.

/**

 * ocontext_to_sid - Helper to safely get sid for an ocontext

 * @sidtab: SID table

 * @c: ocontext structure

 * @index: index of the context entry (0 or 1)

 * @out_sid: pointer to the resulting SID value

 *

 * For all ocontexts except OCON_ISID the SID fields are populated

 * on-demand when needed. Since updating the SID value is an SMP-sensitive

 * operation, this helper must be used to do that safely.

 *

 * WARNING: This function may return -ESTALE, indicating that the caller

 * must retry the operation after re-acquiring the policy pointer!

 Ensure the associated sidtab entry is visible to this thread. */

		/*

		 * Ensure the new sidtab entry is visible to other threads

		 * when they see the SID.

/**

 * security_port_sid - Obtain the SID for a port.

 * @state: SELinux state

 * @protocol: protocol number

 * @port: port number

 * @out_sid: security identifier

/**

 * security_ib_pkey_sid - Obtain the SID for a pkey.

 * @state: SELinux state

 * @subnet_prefix: Subnet Prefix

 * @pkey_num: pkey number

 * @out_sid: security identifier

/**

 * security_ib_endport_sid - Obtain the SID for a subnet management interface.

 * @state: SELinux state

 * @dev_name: device name

 * @port_num: port number

 * @out_sid: security identifier

/**

 * security_netif_sid - Obtain the SID for a network interface.

 * @state: SELinux state

 * @name: interface name

 * @if_sid: interface SID

/**

 * security_node_sid - Obtain the SID for a node (host).

 * @state: SELinux state

 * @domain: communication domain aka address family

 * @addrp: address

 * @addrlen: address length in bytes

 * @out_sid: security identifier

/**

 * security_get_user_sids - Obtain reachable SIDs for a user.

 * @state: SELinux state

 * @fromsid: starting SID

 * @username: username

 * @sids: array of reachable SIDs for user

 * @nel: number of elements in @sids

 *

 * Generate the set of SIDs for legal security contexts

 * for a given user that can be reached by @fromsid.

 * Set *@sids to point to a dynamically allocated

 * array containing the set of SIDs.  Set *@nel to the

 * number of elements in the array.

 kernel value */

/**

 * __security_genfs_sid - Helper to obtain a SID for a file in a filesystem

 * @policy: policy

 * @fstype: filesystem type

 * @path: path from root of mount

 * @orig_sclass: file security class

 * @sid: SID for path

 *

 * Obtain a SID to use for a file in a filesystem that

 * cannot support xattr or use a fixed labeling behavior like

 * transition SIDs or task SIDs.

 *

 * WARNING: This function may return -ESTALE, indicating that the caller

 * must retry the operation after re-acquiring the policy pointer!

/**

 * security_genfs_sid - Obtain a SID for a file in a filesystem

 * @state: SELinux state

 * @fstype: filesystem type

 * @path: path from root of mount

 * @orig_sclass: file security class

 * @sid: SID for path

 *

 * Acquire policy_rwlock before calling __security_genfs_sid() and release

 * it afterward.

 no lock required, policy is not yet accessible by other threads */

/**

 * security_fs_use - Determine how to handle labeling for a filesystem.

 * @state: SELinux state

 * @sb: superblock in question

 Consistency check on number of booleans, should never fail */

	/*

	 * Deep copy only the parts of the policydb that might be

	 * modified as a result of changing booleans.

 Update the boolean states in the copy */

 Re-evaluate the conditional rules in the copy */

 Set latest granting seqno for new policy */

 Install the new policy */

	/*

	 * Free the conditional portions of the old policydb

	 * that were copied for the new policy, and the oldpolicy

	 * structure itself but not what it references.

 Notify others of the policy change */

/*

 * security_sid_mls_copy() - computes a new sid based on the given

 * sid and the mls portion of mls_sid.

 Check the validity of the new context. */

 don't record NUL with untrusted strings */

/**

 * security_net_peersid_resolve - Compare and resolve two network peer SIDs

 * @state: SELinux state

 * @nlbl_sid: NetLabel SID

 * @nlbl_type: NetLabel labeling protocol type

 * @xfrm_sid: XFRM SID

 * @peer_sid: network peer sid

 *

 * Description:

 * Compare the @nlbl_sid and @xfrm_sid values and if the two SIDs can be

 * resolved into a single SID it is returned via @peer_sid and the function

 * returns zero.  Otherwise @peer_sid is set to SECSID_NULL and the function

 * returns a negative value.  A table summarizing the behavior is below:

 *

 *                                 | function return |      @sid

 *   ------------------------------+-----------------+-----------------

 *   no peer labels                |        0        |    SECSID_NULL

 *   single peer label             |        0        |    <peer_label>

 *   multiple, consistent labels   |        0        |    <peer_label>

 *   multiple, inconsistent labels |    -<errno>     |    SECSID_NULL

 *

	/* handle the common (which also happens to be the set of easy) cases

	 * right away, these two if statements catch everything involving a

	/* NOTE: an nlbl_type == NETLBL_NLTYPE_UNLABELED is a "fallback" label

	 * and is treated as if nlbl_sid == SECSID_NULL when a XFRM SID/label

	/*

	 * We don't need to check initialized here since the only way both

	 * nlbl_sid and xfrm_sid are not equal to SECSID_NULL would be if the

	 * security server was initialized and state->initialized was true.

	/* at present NetLabel SIDs/labels really only carry MLS

	 * information so if the MLS portion of the NetLabel SID

	 * matches the MLS portion of the labeled XFRM SID/label

	 * then pass along the XFRM SID as it is the most

/**

 * security_policycap_supported - Check for a specific policy capability

 * @state: SELinux state

 * @req_cap: capability

 *

 * Description:

 * This function queries the currently loaded policy to see if it supports the

 * capability specified by @req_cap.  Returns true (1) if the capability is

 * supported, false (0) if it isn't supported.

 *

 only 'equals' and 'not equals' fit user, role, and type */

 we do not allow a range, indicated by the presence of '-' */

 only the above fields are valid */

 Check to see if the rule contains any selinux fields */

	/* a field/op pair that is not caught here will simply fall through

/**

 * security_netlbl_cache_add - Add an entry to the NetLabel cache

 * @secattr: the NetLabel packet security attributes

 * @sid: the SELinux SID

 *

 * Description:

 * Attempt to cache the context in @ctx, which was derived from the packet in

 * @skb, in the NetLabel subsystem cache.  This function assumes @secattr has

 * already been initialized.

 *

/**

 * security_netlbl_secattr_to_sid - Convert a NetLabel secattr to a SELinux SID

 * @state: SELinux state

 * @secattr: the NetLabel packet security attributes

 * @sid: the SELinux SID

 *

 * Description:

 * Convert the given NetLabel security attributes in @secattr into a

 * SELinux SID.  If the @secattr field does not contain a full SELinux

 * SID/context then use SECINITSID_NETMSG as the foundation.  If possible the

 * 'cache' field of @secattr is set and the CACHE flag is set; this is to

 * allow the @secattr to be used by NetLabel to cache the secattr to SID

 * conversion for future lookups.  Returns zero on success, negative values on

 * failure.

 *

/**

 * security_netlbl_sid_to_secattr - Convert a SELinux SID to a NetLabel secattr

 * @state: SELinux state

 * @sid: the SELinux SID

 * @secattr: the NetLabel packet security attributes

 *

 * Description:

 * Convert the given SELinux SID in @sid into a NetLabel security attribute.

 * Returns zero on success, negative values on failure.

 *

 CONFIG_NETLABEL */

/**

 * __security_read_policy - read the policy.

 * @policy: SELinux policy

 * @data: binary policy data

 * @len: length of data in bytes

 *

/**

 * security_read_policy - read the policy.

 * @state: selinux_state

 * @data: binary policy data

 * @len: length of data in bytes

 *

/**

 * security_read_state_kernel - read the policy.

 * @state: selinux_state

 * @data: binary policy data

 * @len: length of data in bytes

 *

 * Allocates kernel memory for reading SELinux policy.

 * This function is for internal use only and should not

 * be used for returning data to user space.

 *

 * This function must be called with policy_mutex held.

 SPDX-License-Identifier: GPL-2.0

/*

 * Implementation of the SID table type.

 *

 * Original author: Stephen Smalley, <sds@tycho.nsa.gov>

 * Author: Ondrej Mosnacek, <omosnacek@gmail.com>

 *

 * Copyright (C) 2018 Red Hat, Inc.

	/*

	 * Multiple initial sids may map to the same context. Check that this

	 * context is not already represented in the context_to_sid hashtable

	 * to avoid duplicate entries and long linked lists upon hash

	 * collision.

 find the level of the subtree we need */

 allocate roots if needed */

 lookup inside the subtree */

 read entries only after reading count */

 lock-free search failed: lock, re-search, and insert if not found */

		/*

		 * This sidtab is now frozen - tell the caller to abort and

		 * get the new one.

 bail out if we already reached max entries */

 insert context into new entry */

	/*

	 * if we are building a new sidtab, we need to convert the context

	 * and insert it there as well

 write entries before updating count */

 concurrent policy loads are not allowed */

	/* allocate last leaf in the new sidtab (to avoid race with

	 * live convert)

 set count in case no new entries are added during conversion */

 enable live convert of new entries */

 we can safely convert the tree outside the lock */

 convert all entries not covered by live convert */

 we need to keep the old table - disable live convert */

	/*

	 * The hashtable can also be modified in sidtab_context_to_sid()

	 * so we must re-acquire the lock here.

 cancelling policy load - disable live convert of sidtab */

	/*

	 * The context_to_sid hashtable's objects are all shared

	 * with the isids array and context tree, and so don't need

	 * to be cleaned up here.

 do not cache invalid contexts */

 entry in cache - just bump to the head of LRU list */

 pop a cache entry from the tail and free it */

 do not cache invalid contexts */

 CONFIG_SECURITY_SELINUX_SID2STR_CACHE_SIZE > 0 */

 SPDX-License-Identifier: GPL-2.0

/*

 * Implementation of the hash table type.

 *

 * Author : Stephen Smalley, <sds@tycho.nsa.gov>

/*

 * Here we simply round the number of elements up to the nearest power of two.

 * I tried also other options like rounding down or rounding to the closest

 * power of two (up or down based on which is closer), but I was unable to

 * find any significant difference in lookup/insert performance that would

 * justify switching to a different (less intuitive) formula. It could be that

 * a different formula is actually more optimal, but any future changes here

 * should be supported with performance/memory usage data.

 *

 * The total memory used by the htable arrays (only) with Fedora policy loaded

 * is approximately 163 KB at the time of writing.

 SPDX-License-Identifier: GPL-2.0-only

/* Authors: Karl MacMillan <kmacmillan@tresys.com>

 *	    Frank Mayer <mayerf@tresys.com>

 *

 * Copyright (C) 2003 - 2004 Tresys Technology, LLC

/*

 * cond_evaluate_expr evaluates a conditional expr

 * in reverse polish notation. It returns true (1), false (0),

 * or undefined (-1). Undefined occurs when the expression

 * exceeds the stack depth of COND_EXPR_MAXDEPTH.

/*

 * evaluate_cond_node evaluates the conditional stored in

 * a struct cond_node and if the result is different than the

 * current state of the node it sets the rules in the true/false

 * list appropriately. If the result of the expression is undefined

 * all of the rules are disabled for safety.

 turn the rules on or off */

 -1 or 1 */

 the avtab_ptr_t nodes are destroyed by the avtab */

	/*

	 * For type rules we have to make certain there aren't any

	 * conflicting rules by searching the te_avtab and the

	 * cond_te_avtab.

		/*

		 * If we are reading the false list other will be a pointer to

		 * the true list. We can have duplicate entries if there is only

		 * 1 other entry and it is in our true list.

		 *

		 * If we are reading the true list (other == NULL) there shouldn't

		 * be any other entries.

 expr */

/*

 * cond_write_cond_av_list doesn't write out the av_list nodes.

 * Instead it writes out the key/value pairs from the avtab. This

 * is necessary because there is no way to uniquely identifying rules

 * in the avtab so it is not possible to associate individual rules

 * in the avtab with a conditional without saving them as part of

 * the conditional. This means that the avtab with the conditional

 * rules will not be saved but will be rebuilt on policy load.

/* Determine whether additional permissions are granted by the conditional

 * av table, and if so, add them to the result

			/* Since a '0' in an auditdeny mask represents a

			 * permission we do NOT want to audit (dontaudit), we use

			 * the '&' operand to ensure that all '0's in the mask

			 * are retained (much unlike the allow and auditallow cases).

 key was not copied so no need to free here */

 No need to copy, never modified */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Implementation of the policy database.

 *

 * Author : Stephen Smalley, <sds@tycho.nsa.gov>

/*

 * Updated: Trusted Computer Solutions, Inc. <dgoeddel@trustedcs.com>

 *

 *	Support for enhanced MLS infrastructure.

 *

 * Updated: Frank Mayer <mayerf@tresys.com> and Karl MacMillan <kmacmillan@tresys.com>

 *

 *	Added conditional policy language extensions

 *

 * Updated: Hewlett-Packard <paul@paul-moore.com>

 *

 *      Added support for the policy capability bitmap

 *

 * Update: Mellanox Techonologies

 *

 *	Added Infiniband support

 *

 * Copyright (C) 2016 Mellanox Techonologies

 * Copyright (C) 2007 Hewlett-Packard Development Company, L.P.

 * Copyright (C) 2004-2005 Trusted Computer Solutions, Inc.

 * Copyright (C) 2003 - 2004 Tresys Technology, LLC

 These need to be updated if SYM_NUM or OCON_NUM changes */

/*

 * The following *_destroy functions are used to

 * free any memory allocated for each kind of

 * symbol data in the policy database.

/*

 * Initialize the role table.

/*

 * Initialize a policy database structure.

/*

 * The following *_index functions are used to

 * define the val_to_name and val_to_struct arrays

 * in a policy database structure.  The val_to_name

 * arrays are used when converting security context

 * structures into string representations.  The

 * val_to_struct arrays are used when the attributes

 * of a class, role, or user are needed.

/*

 * Define the other val_to_name and val_to_struct arrays

 * in a policy database structure.

 *

 * Caller must clean up on failure.

/*

 * Free any memory allocated by a policy database structure.

/*

 * Load the initial SIDs specified in a policy database

 * structure into a SID table.

 Ignore initial SIDs unused by this kernel. */

/*

 * Return 1 if the fields in the security context

 * structure `c' are valid.  Return 0 otherwise.

		/*

		 * Role must be authorized for the type.

 role may not be associated with type */

		/*

		 * User must be authorized for the role.

 user may not be associated with role */

/*

 * Read a MLS range structure from a policydb binary

 * representation file.

/*

 * Read and validate a security context structure

 * from a policydb binary representation file.

/*

 * The following *_read functions are used to

 * read the symbol data from a policy database

 * binary representation file.

 grab the validatetrans rules */

/*

 * Read a MLS level structure from a policydb binary

 * representation file.

 length of the path component string */

 path component string */

 conflicting/duplicate rules are ignored */

 length of the path component string */

 path component string */

 ebitmap_read() will at least init the bitmap */

 network order */

 network order */

 Determined at runtime, not in policy DB. */

 we need to have subnet_prefix in CPU order */

 end case */

 end switch */

/*

 * Read the configuration data from a policy database binary

 * representation file into a policy database structure.

 Read the magic number and string length. */

 Done with policydb_str. */

 Read the version and table sizes. */

 just in case ebitmap_init() becomes more than just a memset(0): */

 add the type itself as the degenerate case */

/*

 * Write a MLS level structure to a policydb binary

 * representation file.

/*

 * Write a MLS range structure to a policydb binary

 * representation file.

/*

 * Write a security context structure

 * to a policydb binary representation file.

/*

 * The following *_write functions are used to

 * write the symbol data to a policy database

 * binary representation file.

 write out the validatetrans rule */

 network order */

 network order */

 network order */

 network order */

 subnet_prefix is in CPU order */

 actually write all of the entries */

/*

 * Write the configuration data in a policy database

 * structure to a policy database binary representation

 * file.

	/*

	 * refuse to write policy older than compressed avtab

	 * to simplify the writer.  There are other tests dropped

	 * since we assume this throughout the writer code.  Be

	 * careful if you ever try to remove this restriction

 Write the magic number and string identifiers. */

 Write the version, config, and table sizes. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Implementation of the extensible bitmap type.

 *

 * Author : Stephen Smalley, <sds@tycho.nsa.gov>

/*

 * Updated: Hewlett-Packard <paul@paul-moore.com>

 *

 *      Added support to import/export the NetLabel category bitmap

 *

 * (c) Copyright Hewlett-Packard Development Company, L.P., 2006

/*

 * Updated: KaiGai Kohei <kaigai@ak.jp.nec.com>

 *      Applied standard bit operations to improve bitmap scanning.

/**

 * ebitmap_netlbl_export - Export an ebitmap into a NetLabel category bitmap

 * @ebmap: the ebitmap to export

 * @catmap: the NetLabel category bitmap

 *

 * Description:

 * Export a SELinux extensibile bitmap into a NetLabel category bitmap.

 * Returns zero on success, negative values on error.

 *

/**

 * ebitmap_netlbl_import - Import a NetLabel category bitmap into an ebitmap

 * @ebmap: the ebitmap to import

 * @catmap: the NetLabel category bitmap

 *

 * Description:

 * Import a NetLabel category bitmap into a SELinux extensibile bitmap.

 * Returns zero on success, negative values on error.

 *

 don't waste ebitmap space if the netlabel bitmap is empty */

 offset will always be aligned to an unsigned long */

 next */

 NOTE: we should never reach this return */

 CONFIG_NETLABEL */

/*

 * Check to see if all the bits set in e2 are also set in e1. Optionally,

 * if last_e2bit is non-zero, the highest set bit in e2 cannot exceed

 * last_e2bit.

 Skip trailing NULL map entries */

 drop this node from the bitmap */

					/*

					 * this was the highest map

					 * within the bitmap

 this node will be the highest map within the bitmap */

 round up e->highbit */

 round down */

 this is the very first bit */

 write the last node */

 set up for the next node */

 write the last node */

 write the last node */

 need to change hash even if ebitmap is empty */

 SPDX-License-Identifier: GPL-2.0

/*

 * Implementation of the symbol table type.

 *

 * Author : Stephen Smalley, <sds@tycho.nsa.gov>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Landlock LSM - Object management

 *

 * Copyright © 2016-2020 Mickaël Salaün <mic@digikod.net>

 * Copyright © 2018-2020 ANSSI

/*

 * The caller must own the object (i.e. thanks to object->usage) to safely put

 * it.

	/*

	 * The call to @object->underops->release(object) might sleep, e.g.

	 * because of iput().

	/*

	 * If the @object's refcount cannot drop to zero, we can just decrement

	 * the refcount without holding a lock. Otherwise, the decrement must

	 * happen under @object->lock for synchronization with things like

	 * get_inode_object().

		/*

		 * With @object->lock initially held, remove the reference from

		 * @object->underobj to @object (if it still exists).

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Landlock LSM - Security framework setup

 *

 * Copyright © 2016-2020 Mickaël Salaün <mic@digikod.net>

 * Copyright © 2018-2020 ANSSI

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Landlock LSM - System call implementations and user space interfaces

 *

 * Copyright © 2016-2020 Mickaël Salaün <mic@digikod.net>

 * Copyright © 2018-2020 ANSSI

/**

 * copy_min_struct_from_user - Safe future-proof argument copying

 *

 * Extend copy_struct_from_user() to check for consistent user buffer.

 *

 * @dst: Kernel space pointer or NULL.

 * @ksize: Actual size of the data pointed to by @dst.

 * @ksize_min: Minimal required size to be copied.

 * @src: User space pointer or NULL.

 * @usize: (Alleged) size of the data pointed to by @src.

 Checks buffer inconsistencies. */

 Checks size ranges. */

 Copies user buffer and fills with zeros. */

/*

 * This function only contains arithmetic operations with constants, leading to

 * BUILD_BUG_ON().  The related code is evaluated and checked at build time,

 * but it is then ignored thanks to compiler optimizations.

	/*

	 * For each user space ABI structures, first checks that there is no

	 * hole in them, then checks that all architectures have the same

	 * struct size.

 Ruleset handling */

 Dummy handler to enable FMODE_CAN_READ. */

 Dummy handler to enable FMODE_CAN_WRITE. */

/*

 * A ruleset file descriptor enables to build a ruleset by adding (i.e.

 * writing) rule after rule, without relying on the task's context.  This

 * reentrant design is also used in a read way to enforce the ruleset on the

 * current task.

/**

 * sys_landlock_create_ruleset - Create a new ruleset

 *

 * @attr: Pointer to a &struct landlock_ruleset_attr identifying the scope of

 *        the new ruleset.

 * @size: Size of the pointed &struct landlock_ruleset_attr (needed for

 *        backward and forward compatibility).

 * @flags: Supported value: %LANDLOCK_CREATE_RULESET_VERSION.

 *

 * This system call enables to create a new Landlock ruleset, and returns the

 * related file descriptor on success.

 *

 * If @flags is %LANDLOCK_CREATE_RULESET_VERSION and @attr is NULL and @size is

 * 0, then the returned value is the highest supported Landlock ABI version

 * (starting at 1).

 *

 * Possible returned errors are:

 *

 * - EOPNOTSUPP: Landlock is supported by the kernel but disabled at boot time;

 * - EINVAL: unknown @flags, or unknown access, or too small @size;

 * - E2BIG or EFAULT: @attr or @size inconsistencies;

 * - ENOMSG: empty &landlock_ruleset_attr.handled_access_fs.

 Build-time checks. */

 Copies raw user space buffer. */

 Checks content (and 32-bits cast). */

 Checks arguments and transforms to kernel struct. */

 Creates anonymous FD referring to the ruleset. */

/*

 * Returns an owned ruleset from a FD. It is thus needed to call

 * landlock_put_ruleset() on the return value.

 Checks FD type and access right. */

 Path handling */

/*

 * @path: Must call put_path(@path) after the call if it succeeded.

 Handles O_PATH. */

	/*

	 * Forbids ruleset FDs, internal filesystems (e.g. nsfs), including

	 * pseudo filesystems that will never be mountable (e.g. sockfs,

	 * pipefs).

/**

 * sys_landlock_add_rule - Add a new rule to a ruleset

 *

 * @ruleset_fd: File descriptor tied to the ruleset that should be extended

 *		with the new rule.

 * @rule_type: Identify the structure type pointed to by @rule_attr (only

 *             LANDLOCK_RULE_PATH_BENEATH for now).

 * @rule_attr: Pointer to a rule (only of type &struct

 *             landlock_path_beneath_attr for now).

 * @flags: Must be 0.

 *

 * This system call enables to define a new rule and add it to an existing

 * ruleset.

 *

 * Possible returned errors are:

 *

 * - EOPNOTSUPP: Landlock is supported by the kernel but disabled at boot time;

 * - EINVAL: @flags is not 0, or inconsistent access in the rule (i.e.

 *   &landlock_path_beneath_attr.allowed_access is not a subset of the rule's

 *   accesses);

 * - ENOMSG: Empty accesses (e.g. &landlock_path_beneath_attr.allowed_access);

 * - EBADF: @ruleset_fd is not a file descriptor for the current thread, or a

 *   member of @rule_attr is not a file descriptor as expected;

 * - EBADFD: @ruleset_fd is not a ruleset file descriptor, or a member of

 *   @rule_attr is not the expected file descriptor type (e.g. file open

 *   without O_PATH);

 * - EPERM: @ruleset_fd has no write access to the underlying ruleset;

 * - EFAULT: @rule_attr inconsistency.

 No flag for now. */

 Copies raw user space buffer, only one type for now. */

 Gets and checks the ruleset. */

	/*

	 * Informs about useless rule: empty allowed_access (i.e. deny rules)

	 * are ignored in path walks.

	/*

	 * Checks that allowed_access matches the @ruleset constraints

	 * (ruleset->fs_access_masks[0] is automatically upgraded to 64-bits).

 Gets and checks the new rule. */

 Imports the new rule. */

 Enforcement */

/**

 * sys_landlock_restrict_self - Enforce a ruleset on the calling thread

 *

 * @ruleset_fd: File descriptor tied to the ruleset to merge with the target.

 * @flags: Must be 0.

 *

 * This system call enables to enforce a Landlock ruleset on the current

 * thread.  Enforcing a ruleset requires that the task has CAP_SYS_ADMIN in its

 * namespace or is running with no_new_privs.  This avoids scenarios where

 * unprivileged tasks can affect the behavior of privileged children.

 *

 * Possible returned errors are:

 *

 * - EOPNOTSUPP: Landlock is supported by the kernel but disabled at boot time;

 * - EINVAL: @flags is not 0.

 * - EBADF: @ruleset_fd is not a file descriptor for the current thread;

 * - EBADFD: @ruleset_fd is not a ruleset file descriptor;

 * - EPERM: @ruleset_fd has no read access to the underlying ruleset, or the

 *   current thread is not running with no_new_privs, or it doesn't have

 *   CAP_SYS_ADMIN in its namespace.

 * - E2BIG: The maximum number of stacked rulesets is reached for the current

 *   thread.

 No flag for now. */

	/*

	 * Similar checks as for seccomp(2), except that an -EPERM may be

	 * returned.

 Gets and checks the ruleset. */

 Prepares new credentials. */

	/*

	 * There is no possible race condition while copying and manipulating

	 * the current credentials because they are dedicated per thread.

 Replaces the old (prepared) domain. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Landlock LSM - Filesystem management and hooks

 *

 * Copyright © 2016-2020 Mickaël Salaün <mic@digikod.net>

 * Copyright © 2018-2020 ANSSI

 Underlying object management */

	/*

	 * Protects against concurrent use by hook_sb_delete() of the reference

	 * to the underlying inode.

	/*

	 * Makes sure that if the filesystem is concurrently unmounted,

	 * hook_sb_delete() will wait for us to finish iput().

	/*

	 * Because object->underobj was not NULL, hook_sb_delete() and

	 * get_inode_object() guarantee that it is safe to reset

	 * landlock_inode(inode)->object while it is not NULL.  It is therefore

	 * not necessary to lock inode->i_lock.

	/*

	 * Now, new rules can safely be tied to @inode with get_inode_object().

 Ruleset management */

		/*

		 * We are racing with release_inode(), the object is going

		 * away.  Wait for release_inode(), then retry.

	/*

	 * If there is no object tied to @inode, then create a new one (without

	 * holding any locks).

	/*

	 * Protects against concurrent calls to get_inode_object() or

	 * hook_sb_delete().

 Someone else just created the object, bail out and retry. */

	/*

	 * @inode will be released by hook_sb_delete() on its superblock

	 * shutdown, or by release_inode() when no more ruleset references the

	 * related object.

 All access rights that can be tied to files. */

/*

 * @path: Should have been checked by get_path_from_fd().

 Files only get access rights that make sense. */

 Transforms relative access rights to absolute ones. */

	/*

	 * No need to check for an error because landlock_insert_rule()

	 * increments the refcount for the new object if needed.

 Access-control management */

 Ignore nonexistent leafs. */

	/*

	 * An access is granted if, for each policy layer, at least one rule

	 * encountered on the pathwalk grants the requested accesses,

	 * regardless of their position in the layer stack.  We must then check

	 * the remaining layers for each inode, from the first added layer to

	 * the last one.

 Checks that the layer grants access to the full request. */

 Make sure all layers can be checked. */

	/*

	 * Allows access to pseudo filesystems that will never be mountable

	 * (e.g. sockfs, pipefs), but can still be reachable through

	 * /proc/<pid>/fd/<file-descriptor> .

 Saves all layers handling a subset of requested accesses. */

 An access request not handled by the domain is allowed. */

	/*

	 * We need to walk through all the hierarchy to not miss any relevant

	 * restriction.

 Stops when a rule from each layer grants access. */

 Ignores hidden mount points. */

				/*

				 * Stops at the real root.  Denies access

				 * because not all layers have granted access.

			/*

			 * Stops at disconnected root directories.  Only allows

			 * access to internal filesystems (e.g. nsfs, which is

			 * reachable through /proc/<pid>/ns/<namespace>).

 Inode hooks */

	/*

	 * All inodes must already have been untied from their object by

	 * release_inode() or hook_sb_delete().

 Super-block hooks */

/*

 * Release the inodes used in a security policy.

 *

 * Cf. fsnotify_unmount_inodes() and invalidate_inodes()

 Only handles referenced inodes. */

		/*

		 * Protects against concurrent modification of inode (e.g.

		 * from get_inode_object()).

		/*

		 * Checks I_FREEING and I_WILL_FREE  to protect against a race

		 * condition when release_inode() just called iput(), which

		 * could lead to a NULL dereference of inode->security or a

		 * second call to iput() for the same Landlock object.  Also

		 * checks I_NEW because such inode cannot be tied to an object.

 Keeps a reference to this inode until the next loop walk. */

		/*

		 * If there is no concurrent release_inode() ongoing, then we

		 * are in charge of calling iput() on this inode, otherwise we

		 * will just wait for it to finish.

			/*

			 * Because object->underobj was not NULL,

			 * release_inode() and get_inode_object() guarantee

			 * that it is safe to reset

			 * landlock_inode(inode)->object while it is not NULL.

			 * It is therefore not necessary to lock inode->i_lock.

			/*

			 * At this point, we own the ihold() reference that was

			 * originally set up by get_inode_object() and the

			 * __iget() reference that we just set in this loop

			 * walk.  Therefore the following call to iput() will

			 * not sleep nor drop the inode because there is now at

			 * least two references to it.

			/*

			 * At this point, we still own the __iget() reference

			 * that we just set in this loop walk.  Therefore we

			 * can drop the list lock and know that the inode won't

			 * disappear from under us until the next loop walk.

			/*

			 * We can now actually put the inode reference from the

			 * previous loop walk, which is not needed anymore.

 Puts the inode reference from the last loop walk, if any. */

 Waits for pending iput() in release_inode(). */

/*

 * Because a Landlock security policy is defined according to the filesystem

 * topology (i.e. the mount namespace), changing it may grant access to files

 * not previously allowed.

 *

 * To make it simple, deny any filesystem topology modification by landlocked

 * processes.  Non-landlocked processes may still change the namespace of a

 * landlocked process, but this kind of threat must be handled by a system-wide

 * access-control security policy.

 *

 * This could be lifted in the future if Landlock can safely handle mount

 * namespace updates requested by a landlocked process.  Indeed, we could

 * update the current domain (which is currently read-only) by taking into

 * account the accesses of the source and the destination of a new mount point.

 * However, it would also require to make all the child domains dynamically

 * inherit these new constraints.  Anyway, for backward compatibility reasons,

 * a dedicated user space option would be required (e.g. as a ruleset flag).

/*

 * Removing a mount point may reveal a previously hidden file hierarchy, which

 * may then grant access to files, which may have previously been forbidden.

/*

 * pivot_root(2), like mount(2), changes the current mount namespace.  It must

 * then be forbidden for a landlocked process.

 *

 * However, chroot(2) may be allowed because it only changes the relative root

 * directory of the current process.  Moreover, it can be used to restrict the

 * view of the filesystem.

 Path hooks */

 A zero mode translates to S_IFREG. */

/*

 * Creating multiple links or renaming may lead to privilege escalations if not

 * handled properly.  Indeed, we must be sure that the source doesn't gain more

 * privileges by being accessible from the destination.  This is getting more

 * complex when dealing with multiple layers.  The whole picture can be seen as

 * a multilayer partial ordering problem.  A future version of Landlock will

 * deal with that.

 The mount points are the same for old and new paths, cf. EXDEV. */

 Gracefully forbids reparenting. */

 The mount points are the same for old and new paths, cf. EXDEV. */

 Gracefully forbids reparenting. */

 RENAME_EXCHANGE is handled because directories are the same. */

 File hooks */

 A directory can only be opened in read mode. */

 __FMODE_EXEC is indeed part of f_flags, not f_mode. */

	/*

	 * Because a file may be opened with O_PATH, get_file_access() may

	 * return 0.  This case will be handled with a future Landlock

	 * evolution.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Landlock LSM - Ruleset management

 *

 * Copyright © 2016-2020 Mickaël Salaün <mic@digikod.net>

 * Copyright © 2018-2020 ANSSI

	/*

	 * hierarchy = NULL

	 * num_rules = 0

	 * fs_access_masks[] = 0

 Informs about useless ruleset. */

 Should already be checked by landlock_merge_ruleset(). */

 Copies the original layer stack. */

 Adds a copy of @new_layer on the layer stack. */

/**

 * insert_rule - Create and insert a rule in a ruleset

 *

 * @ruleset: The ruleset to be updated.

 * @object: The object to build the new rule with.  The underlying kernel

 *          object must be held by the caller.

 * @layers: One or multiple layers to be copied into the new rule.

 * @num_layers: The number of @layers entries.

 *

 * When user space requests to add a new rule to a ruleset, @layers only

 * contains one entry and this entry is not assigned to any level.  In this

 * case, the new rule will extend @ruleset, similarly to a boolean OR between

 * access rights.

 *

 * When merging a ruleset in a domain, or copying a domain, @layers will be

 * added to @ruleset as new constraints, similarly to a boolean AND between

 * access rights.

 Only a single-level layer should match an existing rule. */

 If there is a matching rule, updates it. */

			/*

			 * Extends access rights when the request comes from

			 * landlock_add_rule(2), i.e. @ruleset is not a domain.

		/*

		 * Intersects access rights when it is a merge between a

		 * ruleset and a domain.

 There is no match for @object. */

 @ruleset must be locked by the caller. */

 When @level is zero, insert_rule() extends @ruleset. */

 Should already be checked by landlock_merge_ruleset() */

 Only merge into a domain. */

 Locks @dst first because we are its only owner. */

 Stacks the new layer. */

 Merges the @src tree. */

 Locks @child first because we are its only owner. */

 Copies the @parent tree. */

 Copies the parent layer stack and leaves a space for the new layer. */

/**

 * landlock_merge_ruleset - Merge a ruleset with a domain

 *

 * @parent: Parent domain.

 * @ruleset: New ruleset to be merged.

 *

 * Returns the intersection of @parent and @ruleset, or returns @parent if

 * @ruleset is empty, or returns a duplicate of @ruleset if @parent is empty.

 Creates a new domain... */

 ...as a child of @parent... */

 ...and including @ruleset. */

/*

 * The returned access has the same lifetime as @ruleset.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Landlock LSM - Credential hooks

 *

 * Copyright © 2017-2020 Mickaël Salaün <mic@digikod.net>

 * Copyright © 2018-2020 ANSSI

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Landlock LSM - Ptrace hooks

 *

 * Copyright © 2017-2020 Mickaël Salaün <mic@digikod.net>

 * Copyright © 2019-2020 ANSSI

/**

 * domain_scope_le - Checks domain ordering for scoped ptrace

 *

 * @parent: Parent domain.

 * @child: Potential child of @parent.

 *

 * Checks if the @parent domain is less or equal to (i.e. an ancestor, which

 * means a subset of) the @child domain.

 @parent is in the scoped hierarchy of @child. */

 There is no relationship between @parent and @child. */

 Quick return for non-landlocked tasks. */

/**

 * hook_ptrace_access_check - Determines whether the current process may access

 *			      another

 *

 * @child: Process to be accessed.

 * @mode: Mode of attachment.

 *

 * If the current task has Landlock rules, then the child must have at least

 * the same rules.  Else denied.

 *

 * Determines whether a process may access another, returning 0 if permission

 * granted, -errno if denied.

/**

 * hook_ptrace_traceme - Determines whether another process may trace the

 *			 current one

 *

 * @parent: Task proposed to be the tracer.

 *

 * If the parent has Landlock rules, then the current task must have the same

 * or more rules.  Else denied.

 *

 * Determines whether the nominated task is permitted to trace the current

 * process, returning 0 if permission is granted, -errno if denied.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2013 Intel Corporation

 *

 * Author:

 * Dmitry Kasatkin <dmitry.kasatkin@intel.com>

/*

 * Request an asymmetric key.

 search in specific keyring */

 Hide some search errors */

 edcsa-nist-p192 etc. */

/**

 * integrity_kernel_module_request - prevent crypto-pkcs1pad(rsa,*) requests

 * @kmod_name: kernel module name

 *

 * We have situation, when public_key_verify_signature() in case of RSA

 * algorithm use alg_name to store internal information in order to

 * construct an algorithm on the fly, but crypto_larval_lookup() will try

 * to use alg_name in order to load kernel module with same name.

 * Since we don't have any real "crypto-pkcs1pad(rsa,*)" kernel modules,

 * we are safe to fail such module request from crypto_larval_lookup().

 *

 * In this way we prevent modprobe execution during digsig verification

 * and avoid possible deadlock if modprobe and/or it's dependencies

 * also signed with digsig.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2008 IBM Corporation

 *

 * Authors:

 * Mimi Zohar <zohar@us.ibm.com>

 *

 * File: integrity_iint.c

 *	- implements the integrity hooks: integrity_inode_alloc,

 *	  integrity_inode_free

 *	- cache integrity information associated with an inode

 *	  using a rbtree tree.

/*

 * __integrity_iint_find - return the iint associated with an inode

/*

 * integrity_iint_find - return the iint associated with an inode

/**

 * integrity_inode_get - find or allocate an iint associated with an inode

 * @inode: pointer to the inode

 * @return: allocated iint

 *

 * Caller must lock i_mutex

	/*

	 * The integrity's "iint_cache" is initialized at security_init(),

	 * unless it is not included in the ordered list of LSMs enabled

	 * on the boot command line.

/**

 * integrity_inode_free - called on security_inode_free

 * @inode: pointer to the inode

 *

 * Free the integrity information(iint) associated with an inode.

/*

 * integrity_kernel_read - read data from the file

 *

 * This is a function for reading file content instead of kernel_read().

 * It does not perform locking checks to ensure it cannot be blocked.

 * It does not perform security checks because it is irrelevant for IMA.

 *

/*

 * integrity_load_keys - load integrity keys hook

 *

 * Hooks is called from init/main.c:kernel_init_freeable()

 * when rootfs is ready

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2008 IBM Corporation

 * Author: Mimi Zohar <zohar@us.ibm.com>

 *

 * File: integrity_audit.c

 *	Audit calls for the integrity subsystem

 ima_audit_setup - enable informational auditing messages */

 Skip info messages */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2011 Intel Corporation

 *

 * Author:

 * Dmitry Kasatkin <dmitry.kasatkin@intel.com>

 v1 API expect signature without xattr type */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005,2006,2007,2008 IBM Corporation

 *

 * Authors:

 * Mimi Zohar <zohar@us.ibm.com>

 * Kylene Hall <kjhall@us.ibm.com>

 *

 * File: ima_crypto.c

 *	Calculates md5/sha1 file hash, template hash, boot-aggreate hash

 minimum file size for ahash use */

 default is 0 - 1 page. */

/*

 * Additional number of slots reserved, as needed, for SHA1

 * and IMA default algo.

 unknown TPM algorithm */

/**

 * ima_alloc_pages() - Allocate contiguous pages.

 * @max_size:       Maximum amount of memory to allocate.

 * @allocated_size: Returned size of actual allocation.

 * @last_warn:      Should the min_size allocation warn or not.

 *

 * Tries to do opportunistic allocation for memory first trying to allocate

 * max_size amount of memory and then splitting that until zero order is

 * reached. Allocation is tried without generating allocation warnings unless

 * last_warn is set. Last_warn set affects only last allocation of zero order.

 *

 * By default, ima_maxorder is 0 and it is equivalent to kmalloc(GFP_KERNEL)

 *

 * Return pointer to allocated memory, or NULL on failure.

 order is zero - one page */

/**

 * ima_free_pages() - Free pages allocated by ima_alloc_pages().

 * @ptr:  Pointer to allocated pages.

 * @size: Size of allocated buffer.

	/*

	 * Try to allocate maximum size of memory.

	 * Fail if even a single page cannot be allocated.

 Only allocate one buffer if that is enough. */

		/*

		 * Try to allocate secondary buffer. If that fails fallback to

		 * using single buffering. Use previous memory allocation size

		 * as baseline for possible allocation size.

			/* Not using two buffers, and it is not the first

			 * read/request, wait for the completion of the

			 * previous ahash_update() request.

 read buffer */

			/*

			 * Forward current rc, do not overwrite with return value

			 * from ahash_wait()

			/* Using two buffers, and it is not the first

			 * read/request, wait for the completion of the

			 * previous ahash_update() request.

 swap buffers, if we use two */

 wait for the last update request to complete */

 unexpected EOF */

/*

 * ima_calc_file_hash - calculate file hash

 *

 * Asynchronous hash (ahash) allows using HW acceleration for calculating

 * a hash. ahash performance varies for different data sizes on different

 * crypto accelerators. shash performance might be better for smaller files.

 * The 'ima.ahash_minsize' module parameter allows specifying the best

 * minimum file size for using ahash on the system.

 *

 * If the ima.ahash_minsize parameter is not specified, this function uses

 * shash for the hash calculation.  If ahash fails, it falls back to using

 * shash.

	/*

	 * For consistency, fail file's opened with the O_DIRECT flag on

	 * filesystems mounted with/without DAX option.

 Open a new file instance in O_RDONLY if we cannot read */

/*

 * Calculate the hash of template data

 for unmapped TPM algorithms digest is still a padded SHA1 */

 wait for the update request to complete */

/*

 * The boot_aggregate is a cumulative hash over TPM registers 0 - 7.  With

 * TPM 1.2 the boot_aggregate was based on reading the SHA1 PCRs, but with

 * TPM 2.0 hash agility, TPM chips could support multiple TPM PCR banks,

 * allowing firmware to configure and enable different banks.

 *

 * Knowing which TPM bank is read to calculate the boot_aggregate digest

 * needs to be conveyed to a verifier.  For this reason, use the same

 * hash algorithm for reading the TPM PCRs as for calculating the boot

 * aggregate digest as stored in the measurement list.

 cumulative digest over TPM registers 0-7 */

 now accumulate with current aggregate */

	/*

	 * Extend cumulative digest over TPM registers 8-9, which contain

	 * measurement for the kernel command line (reg. 8) and image (reg. 9)

	 * in a typical PCR allocation. Registers 8-9 are only included in

	 * non-SHA1 boot_aggregate digests to avoid ambiguity.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2008 IBM Corporation

 *

 * Author: Mimi Zohar <zohar@us.ibm.com>

 *

 * File: ima_api.c

 *	Implements must_appraise_or_measure, collect_measurement,

 *	appraise_measurement, store_measurement and store_template.

/*

 * ima_free_template_entry - free an existing template entry

/*

 * ima_alloc_init_template - create and initialize a new template entry

/*

 * ima_store_template - store ima template measurements

 *

 * Calculate the hash of a template entry, add the template entry

 * to an ordered list of measurement entries maintained inside the kernel,

 * and also update the aggregate integrity value (maintained inside the

 * configured TPM PCR) over the hashes of the current list of measurement

 * entries.

 *

 * Applications retrieve the current kernel-held measurement list through

 * the securityfs entries in /sys/kernel/security/ima. The signed aggregate

 * TPM PCR (called quote) can be retrieved using a TPM user space library

 * and is used to validate the measurement list.

 *

 * Returns 0 on success, error code otherwise

/*

 * ima_add_violation - add violation to measurement list.

 *

 * Violations are flagged in the measurement list with zero hash values.

 * By extending the PCR with 0xFF's instead of with zeroes, the PCR

 * value is invalidated.

 can overflow, only indicator */

/**

 * ima_get_action - appraise & measure decision based on policy.

 * @mnt_userns:	user namespace of the mount the inode was found from

 * @inode: pointer to the inode associated with the object being validated

 * @cred: pointer to credentials structure to validate

 * @secid: secid of the task being validated

 * @mask: contains the permission mask (MAY_READ, MAY_WRITE, MAY_EXEC,

 *        MAY_APPEND)

 * @func: caller identifier

 * @pcr: pointer filled in if matched measure policy sets pcr=

 * @template_desc: pointer filled in if matched measure policy sets template=

 * @func_data: func specific data, may be NULL

 * @allowed_algos: allowlist of hash algorithms for the IMA xattr

 *

 * The policy is defined in terms of keypairs:

 *		subj=, obj=, type=, func=, mask=, fsmagic=

 *	subj,obj, and type: are LSM specific.

 *	func: FILE_CHECK | BPRM_CHECK | CREDS_CHECK | MMAP_CHECK | MODULE_CHECK

 *	| KEXEC_CMDLINE | KEY_CHECK | CRITICAL_DATA

 *	mask: contains the permission mask

 *	fsmagic: hex value

 *

 * Returns IMA_MEASURE, IMA_APPRAISE mask.

 *

/*

 * ima_collect_measurement - collect file measurement

 *

 * Calculate the file hash, if it doesn't already exist,

 * storing the measurement and i_version in the iint.

 *

 * Must be called with iint->mutex held.

 *

 * Return 0 on success, error code otherwise

	/*

	 * Always collect the modsig, because IMA might have already collected

	 * the file digest without collecting the modsig in a previous

	 * measurement rule.

	/*

	 * Dectecting file change is based on i_version. On filesystems

	 * which do not support i_version, support is limited to an initial

	 * measurement/appraisal/audit.

 Initialize hash digest to 0's in case of failure */

 Possibly temporary failure due to type of read (eg. O_DIRECT) */

/*

 * ima_store_measurement - store file measurement

 *

 * Create an "ima" template and then store the template by calling

 * ima_store_template.

 *

 * We only get here if the inode has not already been measured,

 * but the measurement could already exist:

 *	- multiple copies of the same file on either the same or

 *	  different filesystems.

 *	- the inode was previously flushed as well as the iint info,

 *	  containing the hashing info.

 *

 * Must be called with iint->mutex held.

	/*

	 * We still need to store the measurement in the case of MODSIG because

	 * we only have its contents to put in the list at the time of

	 * appraisal, but a file measurement from earlier might already exist in

	 * the measurement list.

/*

 * ima_d_path - return a pointer to the full pathname

 *

 * Attempt to return a pointer to the full pathname for use in the

 * IMA measurement list, IMA audit records, and auditing logs.

 *

 * On failure, return a pointer to a copy of the filename, not dname.

 * Returning a pointer to dname, could result in using the pointer

 * after the memory has been freed.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2008 IBM Corporation

 * Author: Mimi Zohar <zohar@us.ibm.com>

 *

 * ima_policy.c

 *	- initialize default measure policy rules

 flags definitions */

 same as IMA_MEASURE */

 same as IMA_APPRAISE */

 Handlers for operators       */

 uid_eq(), uid_gt(), uid_lt() */

 gid_eq(), gid_gt(), gid_lt() */

 bitfield of allowed hash algorithms */

 LSM file metadata specific */

 audit value */

 audit type */

 Measure keys added to these keyrings */

 Measure data grouped under this label */

/*

 * sanity check in case the kernels gains more hash algorithms that can

 * fit in an unsigned int

/*

 * Without LSM specific knowledge, the default policy can only be

 * written in terms of .action, .func, .mask, .fsmagic, .uid, .gid,

 * .fowner, and .fgroup

/*

 * The minimum rule set to allow for full TCB coverage.  Measures all files

 * opened or mmap for exec and everything read by root.  Dangerous because

 * normal users can easily run the machine out of memory simply building

 * and running executables.

 force signature */

 An array of architecture specific rules */

 Don't accept an empty list item */

 Don't accept an empty list */

	/*

	 * strsep() has already replaced all instances of '|' with '\0',

	 * leaving a byte sequence of NUL-terminated strings. Reference each

	 * string with the array of items.

	 *

	 * IMPORTANT: Ownership of the allocated buffer is transferred from

	 * src_copy to the first element in the items array. To free the

	 * buffer, kfree() must only be called on the first element of the

	 * array.

	/*

	 * entry->template->fields may be allocated in ima_parse_rule() but that

	 * reference is owned by the corresponding ima_template_desc element in

	 * the defined_templates list and cannot be freed here

	/*

	 * Immutable elements are copied over as pointers and data; only

	 * lsm rules can change

		/*

		 * Remove the reference from entry so that the associated

		 * memory will not be freed during a later call to

		 * ima_lsm_free_rule(entry).

	/*

	 * ima_lsm_copy_rule() shallow copied all references, except for the

	 * LSM references, from entry to nentry so we only want to free the LSM

	 * references and the entry itself. All other memory refrences will now

	 * be owned by nentry.

/*

 * The LSM policy can be reloaded, leaving the IMA LSM based rules referring

 * to the old, stale LSM policy.  Update the IMA LSM based rules to reflect

 * the reloaded LSM policy.

/**

 * ima_match_rule_data - determine whether func_data matches the policy rule

 * @rule: a pointer to a rule

 * @func_data: data to match against the measure rule data

 * @cred: a pointer to a credentials structure for user validation

 *

 * Returns true if func_data matches one in the rule, false otherwise.

/**

 * ima_match_rules - determine whether an inode matches the policy rule.

 * @rule: a pointer to a rule

 * @mnt_userns:	user namespace of the mount the inode was found from

 * @inode: a pointer to an inode

 * @cred: a pointer to a credentials structure for user validation

 * @secid: the secid of the task to be validated

 * @func: LIM hook identifier

 * @mask: requested action (MAY_READ | MAY_WRITE | MAY_APPEND | MAY_EXEC)

 * @func_data: func specific data, may be NULL

 *

 * Returns true on rule match, false on failure.

/*

 * In addition to knowing that we need to appraise the file in general,

 * we need to differentiate between calling hooks, for hook specific rules.

/**

 * ima_match_policy - decision based on LSM and other conditions

 * @mnt_userns:	user namespace of the mount the inode was found from

 * @inode: pointer to an inode for which the policy decision is being made

 * @cred: pointer to a credentials structure for which the policy decision is

 *        being made

 * @secid: LSM secid of the task to be validated

 * @func: IMA hook identifier

 * @mask: requested action (MAY_READ | MAY_WRITE | MAY_APPEND | MAY_EXEC)

 * @pcr: set the pcr to extend

 * @template_desc: the template that should be used for this rule

 * @func_data: func specific data, may be NULL

 * @allowed_algos: allowlist of hash algorithms for the IMA xattr

 *

 * Measure decision based on func/mask/fsmagic and LSM(subj/obj/type)

 * conditions.

 *

 * Since the IMA policy may be updated multiple times we need to lock the

 * list when walking it.  Reads are many orders of magnitude more numerous

 * than writes so ima_match_policy() is classical RCU candidate.

/**

 * ima_update_policy_flags() - Update global IMA variables

 *

 * Update ima_policy_flag and ima_setxattr_allowed_hash_algorithms

 * based on the currently loaded policy.

 *

 * With ima_policy_flag, the decision to short circuit out of a function

 * or not call the function in the first place can be made earlier.

 *

 * With ima_setxattr_allowed_hash_algorithms, the policy can restrict the

 * set of hash algorithms accepted when updating the security.ima xattr of

 * a file.

 *

 * Context: called after a policy update and at system initialization.

		/*

		 * SETXATTR_CHECK rules do not implement a full policy check

		 * because rule checking would probably have an important

		 * performance impact on setxattr(). As a consequence, only one

		 * SETXATTR_CHECK can be active at a given time.

		 * Because we want to preserve that property, we set out to use

		 * atomic_cmpxchg. Either:

		 * - the atomic was non-zero: a setxattr hash policy is

		 *   already enforced, we do nothing

		 * - the atomic was zero: no setxattr policy was set, enable

		 *   the setxattr hash policy

 SETXATTR_CHECK doesn't impact ima_policy_flag */

 Get number of rules */

 Convert each policy string rules to struct ima_rule_entry format */

/**

 * ima_init_policy - initialize the default measure rules.

 *

 * ima_rules points to either the ima_default_rules or the new ima_policy_rules.

 if !ima_policy, we load NO default rules */

	/*

	 * Based on runtime secure boot flags, insert arch specific measurement

	 * and appraise rules requiring file signatures for both the initial

	 * and custom policies, prior to other appraise rules.

	 * (Highest priority)

	/*

	 * Insert the builtin "secure_boot" policy rules requiring file

	 * signatures, prior to other appraise rules.

	/*

	 * Insert the build time appraise rules requiring file signatures

	 * for both the initial and custom policies, prior to other appraise

	 * rules. As the secure boot rules includes all of the build time

	 * rules, include either one or the other set of rules, but not both.

 Make sure we have a valid policy, at least containing some rules. */

/**

 * ima_update_policy - update default_rules with new measure rules

 *

 * Called on file .release to update the default rules with a complete new

 * policy.  What we do here is to splice ima_policy_rules and ima_temp_rules so

 * they make a queue.  The policy may be updated multiple times and this is the

 * RCU updater.

 *

 * Policy rules are never deleted so ima_policy_flag gets zeroed only once when

 * we switch from the default policy to user defined.

		/*

		 * IMA architecture specific policy rules are specified

		 * as strings and converted to an array of ima_entry_rules

		 * on boot.  After loading a custom policy, free the

		 * architecture specific rules stored as an array.

 Custom IMA policy has been loaded */

 Keep the enumeration in sync with the policy_tokens! */

/*

 * Validating the appended signature included in the measurement list requires

 * the file hash calculated without the appended signature (i.e., the 'd-modsig'

 * field). Therefore, notify the user if they have the 'modsig' field but not

 * the 'd-modsig' field in the template.

 We only need to notify the user once. */

 Ensure that the action is set and is compatible with the flags */

	/*

	 * The IMA_FUNC bit must be set if and only if there's a valid hook

	 * function specified, and vice versa. Enforcing this property allows

	 * for the NONE case below to validate a rule without an explicit hook

	 * function.

	/*

	 * Ensure that the hook function is compatible with the other

	 * components of the rule

 any action other than APPRAISE is unsupported */

 SETXATTR_CHECK requires an appraise_algos parameter */

		/*

		 * full policies are not supported, they would have too

		 * much of a performance impact

 Ensure that combinations of flags are compatible with each other */

 Add the hash algorithm to the 'allowed' bitfield */

 either euid or egid */

 PATH_CHECK is for backwards compat */

 invalid or empty list of algorithms */

			/*

			 * template_desc_init_fields() does nothing if

			 * the template is already initialised, so

			 * it's safe to do this unconditionally

/**

 * ima_parse_add_rule - add a rule to ima_policy_rules

 * @rule - ima measurement policy rule

 *

 * Avoid locking by allowing just one writer at a time in ima_write_policy()

 * Returns the length of the rule parsed, an error code on failure

/**

 * ima_delete_rules() called to cleanup invalid in-flight policy.

 * We don't need locking as we operate on the temp list, which is

 * different from the active one.  There is also only one user of

 * ima_delete_rules() at a time.

/*

 * policy_func_show - display the ima_hooks policy rule

 only add commas if the list contains multiple entries */

 CONFIG_IMA_READ_POLICY */

/*

 * ima_appraise_signature: whether IMA will appraise a given function using

 * an IMA digital signature. This is restricted to cases where the kernel

 * has a set of built-in trusted keys in order to avoid an attacker simply

 * loading additional keys.

		/*

		 * A generic entry will match, but otherwise require that it

		 * match the func we're looking for

		/*

		 * We require this to be a digital signature, not a raw IMA

		 * hash.

		/*

		 * We've found a rule that matches, so break now even if it

		 * didn't require a digital signature - a later rule that does

		 * won't override it, so would be a false positive.

 CONFIG_IMA_APPRAISE && CONFIG_INTEGRITY_TRUSTED_KEYRING */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2016 IBM Corporation

 *

 * Authors:

 * Thiago Jung Bauermann <bauerman@linux.vnet.ibm.com>

 * Mimi Zohar <zohar@linux.vnet.ibm.com>

 segment size can't change between kexec load and execute */

 reserved space */

	/*

	 * fill in reserved space with some buffer details

	 * (eg. version, buffer size, number of measurements)

/*

 * Called during kexec_file_load so that IMA can add a segment to the kexec

 * image for the measurement list for the next kernel.

 *

 * This function assumes that kexec_mutex is held.

 use more understandable variable names than defined in kbuf */

	/*

	 * Reserve an extra half page of memory for additional measurements

	 * added during the kexec load.

 IMA_KEXEC */

/*

 * Restore the measurement list from the previous kernel.

 SPDX-License-Identifier: GPL-2.0+ */

/*

 * Copyright (C) 2018 IBM Corporation

 secureboot arch rules */

 CONFIG_KEXEC_SIG */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005,2006,2007,2008 IBM Corporation

 *

 * Authors:

 * Serge Hallyn <serue@us.ibm.com>

 * Reiner Sailer <sailer@watson.ibm.com>

 * Mimi Zohar <zohar@us.ibm.com>

 *

 * File: ima_queue.c

 *       Implements queues that store template measurements and

 *       maintains aggregate over the stored measurements

 *       in the pre-configured TPM PCR (if available).

 *       The measurement list is append-only. No entry is

 *       ever removed or changed during the boot-cycle.

 pre-allocated array of tpm_digest structures to extend a PCR */

 list of all measurements */

 key: inode (before secure-hashing a file) */

/* mutex protects atomicity of extending measurement list

 * and extending the TPM PCR aggregate. Since tpm_extend can take

 * long (and the tpm driver uses a mutex), we can't use the spinlock.

 lookup up the digest value in the hash table, and return the entry */

/*

 * Calculate the memory required for serializing a single

 * binary_runtime_measurement list entry, which contains a

 * couple of variable length fields (e.g template name and data).

 pcr */

 template name size field */

/* ima_add_template_entry helper function:

 * - Add template entry to the measurement list and hash table, for

 *   all entries except those carried across kexec.

 *

 * (Called with ima_extend_list_mutex held.)

/*

 * Return the amount of memory required for serializing the

 * entire binary_runtime_measurement list, including the ima_kexec_hdr

 * structure.

/*

 * Add template entry to the measurement list and hash table, and

 * extend the pcr.

 *

 * On systems which support carrying the IMA measurement list across

 * kexec, maintain the total memory size required for serializing the

 * binary_runtime_measurements.

 invalidate pcr */

 for unmapped TPM algorithms digest is still a padded SHA1 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2015 Juniper Networks, Inc.

 *

 * Author:

 * Petko Manolov <petko.manolov@konsulko.com>

/*

 * Allocate the IMA blacklist keyring

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2013 Politecnico di Torino, Italy

 *                    TORSEC group -- https://security.polito.it

 *

 * Author: Roberto Sassu <roberto.sassu@polito.it>

 *

 * File: ima_template_lib.c

 *      Library of supported template fields.

	/*

	 * Replace all space characters with underscore for event names and

	 * strings. This avoid that, during the parsing of a measurements list,

	 * filenames with spaces or that end with the suffix ' (deleted)' are

	 * split into multiple template fields (the space is the delimitator

	 * character for measurements lists in ASCII format).

 skip ':' and '\0' */

/**

 * ima_parse_buf() - Parses lengths and data from an input buffer

 * @bufstartp:       Buffer start address.

 * @bufendp:         Buffer end address.

 * @bufcurp:         Pointer to remaining (non-parsed) data.

 * @maxfields:       Length of fields array.

 * @fields:          Array containing lengths and pointers of parsed data.

 * @curfields:       Number of array items containing parsed data.

 * @len_mask:        Bitmap (if bit is set, data length should not be parsed).

 * @enforce_mask:    Check if curfields == maxfields and/or bufcurp == bufendp.

 * @bufname:         String identifier of the input buffer.

 *

 * Return: 0 on success, -EINVAL on error.

	/*

	 * digest formats:

	 *  - DATA_FMT_DIGEST: digest

	 *  - DATA_FMT_DIGEST_WITH_ALGO: [<hash algo>] + ':' + '\0' + digest,

	 *    where <hash algo> is provided if the hash algoritm is not

	 *    SHA1 or MD5

		/*

		 * If digest is NULL, the event being recorded is a violation.

		 * Make room for the digest by increasing the offset of

		 * IMA_DIGEST_SIZE.

/*

 * This function writes the digest of an event (with size limit).

 recording a violation. */

 algo can change depending on available PCR banks */

 missing info to re-calculate the digest */

/*

 * This function writes the digest of an event (without size limit).

 recording a violation. */

/*

 * This function writes the digest of the file which is expected to match the

 * digest contained in the file's appended signature.

 Recording a violation. */

 There was some error collecting the digest. */

		/*

		 * Truncate filename if the latter is too long and

		 * the file descriptor is not available.

/*

 * This function writes the name of an event (with size limit).

/*

 * This function writes the name of an event (without size limit).

/*

 *  ima_eventsig_init - include the file signature as part of the template data

/*

 *  ima_eventbuf_init - include the buffer(kexec-cmldine) as part of the

 *  template data.

/*

 *  ima_eventmodsig_init - include the appended file signature as part of the

 *  template data

	/*

	 * modsig is a runtime structure containing pointers. Get its raw data

	 * instead.

/*

 *  ima_eventevmsig_init - include the EVM portable signature as part of the

 *  template data

/*

 *  ima_eventinodeuid_init - include the inode UID as part of the template

 *  data

/*

 *  ima_eventinodegid_init - include the inode GID as part of the template

 *  data

/*

 *  ima_eventinodemode_init - include the inode mode as part of the template

 *  data

/*

 *  ima_eventinodexattrnames_init - include a list of xattr names as part of the

 *  template data

/*

 *  ima_eventinodexattrlengths_init - include a list of xattr lengths as part of

 *  the template data

/*

 *  ima_eventinodexattrvalues_init - include a list of xattr values as part of

 *  the template data

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2019 Microsoft Corporation

 *

 * Author: Lakshmi Ramasubramanian (nramas@linux.microsoft.com)

 *

 * File: ima_asymmetric_keys.c

 *       Defines an IMA hook to measure asymmetric keys on key

 *       create or update.

/**

 * ima_post_key_create_or_update - measure asymmetric keys

 * @keyring: keyring to which the key is linked to

 * @key: created or updated key

 * @payload: The data used to instantiate or update the key.

 * @payload_len: The length of @payload.

 * @flags: key flags

 * @create: flag indicating whether the key was created or updated

 *

 * Keys can only be measured, not appraised.

 * The payload data used to instantiate or update the key is measured.

 Only asymmetric keys are handled by this hook. */

	/*

	 * keyring->description points to the name of the keyring

	 * (such as ".builtin_trusted_keys", ".ima", etc.) to

	 * which the given key is linked to.

	 *

	 * The name of the keyring is passed in the "eventname"

	 * parameter to process_buffer_measurement() and is set

	 * in the "eventname" field in ima_event_data for

	 * the key measurement IMA event.

	 *

	 * The name of the keyring is also passed in the "keyring"

	 * parameter to process_buffer_measurement() to check

	 * if the IMA policy is configured to measure a key linked

	 * to the given keyring.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2011 IBM Corporation

 *

 * Author:

 * Mimi Zohar <zohar@us.ibm.com>

	/* If appraisal state was changed, but secure boot is enabled,

/*

 * is_ima_appraise_enabled - return appraise status

 *

 * Only return enabled, if not in ima_appraise="fix" or "log" modes.

/*

 * ima_must_appraise - set appraise flag

 *

 * Return 1 to appraise or hash

 Return specific func appraised cached result */

 return default hash algo */

 first byte contains algorithm id */

 this is for backward compatibility */

 return default hash algo */

/*

 * xattr_verify - verify xattr digest or signature

 *

 * Verify whether the hash or signature matches the file contents.

 *

 * Return 0 on success, error code otherwise.

 first byte contains algorithm id */

			/*

			 * xattr length may be longer. md5 hash in previous

			 * version occupied 20 bytes in xattr, instead of 16

/*

 * modsig_verify - verify modsig signature

 *

 * Verify whether the signature matches the file contents.

 *

 * Return 0 on success, error code otherwise.

/*

 * ima_check_blacklist - determine if the binary is blacklisted.

 *

 * Add the hash of the blacklisted binary to the measurement list, based

 * on policy.

 *

 * Returns -EPERM if the hash is blacklisted.

/*

 * ima_appraise_measurement - appraise file measurement

 *

 * Call evm_verifyxattr() to verify the integrity of 'security.ima'.

 * Assuming success, compare the xattr hash with the collected measurement.

 *

 * Return 0 on success, error code otherwise

 If not appraising a modsig, we need an xattr. */

 If reading the xattr failed and there's no modsig, error out. */

 No EVM protected xattrs. */

 It's fine not to have xattrs when using a modsig. */

 No security.evm xattr. */

 Invalid HMAC/signature. */

	/*

	 * If we have a modsig and either no imasig or the imasig's key isn't

	 * known, then try verifying the modsig.

	/*

	 * File signatures on some filesystems can not be properly verified.

	 * When such filesystems are mounted by an untrusted mounter or on a

	 * system not willing to accept such a risk, fail the file signature

	 * verification.

 Fix mode, but don't replace file signatures. */

		/*

		 * Permit new files with file/EVM portable signatures, but

		 * without data.

/*

 * ima_update_xattr - update 'security.ima' hash value

 do not collect and update hash for digital signatures */

/**

 * ima_inode_post_setattr - reflect file metadata changes

 * @mnt_userns:	user namespace of the mount the inode was found from

 * @dentry: pointer to the affected dentry

 *

 * Changes to a dentry's metadata might result in needing to appraise.

 *

 * This function is called from notify_change(), which expects the caller

 * to lock the inode's i_mutex.

/*

 * ima_protect_xattr - protect 'security.ima'

 *

 * Ensure that not just anyone can modify or remove 'security.ima'.

/**

 * validate_hash_algo() - Block setxattr with unsupported hash algorithms

 * @dentry: object of the setxattr()

 * @xattr_value: userland supplied xattr value

 * @xattr_value_len: length of xattr_value

 *

 * The xattr value is mapped to its hash algorithm, and this algorithm

 * must be built in the kernel for the setxattr to be allowed.

 *

 * Emit an audit message when the algorithm is invalid.

 *

 * Return: 0 on success, else an error.

 success if the algorithm is allowed in the ima policy */

		/*

		 * We use a different audit message when the hash algorithm

		 * is denied by a policy rule, instead of not being built

		 * in the kernel image

 allow any xattr using an algorithm built in the kernel */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005,2006,2007,2008 IBM Corporation

 *

 * Authors:

 * Kylene Hall <kjhall@us.ibm.com>

 * Reiner Sailer <sailer@us.ibm.com>

 * Mimi Zohar <zohar@us.ibm.com>

 *

 * File: ima_fs.c

 *	implemenents security file system for reporting

 *	current measurement list and IMA statistics

 greater than largest 'long' string value */

 returns pointer to hlist_node */

 we need a lock since pos could point beyond last element */

	/* lock protects when reading beyond last element

	 * against concurrent list-extension

/* print format:

 *       32bit-le=pcr#

 *       char[20]=template digest

 *       32bit-le=template name size

 *       char[n]=template name

 *       [eventdata length]

 *       eventdata[n]=template specific data

 the list never shrinks, so we don't need a lock here */

 temporary fields */

 get entry */

	/*

	 * 1st: PCRIndex

	 * PCR used defaults to the same (config option) in

	 * little-endian format, unless set in policy

 2nd: template digest */

 3rd: template name size */

 4th:  template name */

 5th:  template length (except for 'ima' template) */

 6th:  template specific data */

 print in ascii */

 the list never shrinks, so we don't need a lock here */

 get entry */

 1st: PCR used (config option) */

 2nd: SHA1 template hash */

 3th:  template name */

 4th:  template specific data */

 remove \n */

 No partial writes. */

/*

 * ima_open_policy: sequentialize access to the policy file

/*

 * ima_release_policy - start using the new measure policy rules.

 *

 * Initially, ima_measure points to the default policy rules, now

 * point to the new policy rules, and remove the securityfs policy file,

 * assuming a valid policy.

 SPDX-License-Identifier: GPL-2.0+

/*

 * IMA support for appraising module-style appended signatures.

 *

 * Copyright (C) 2019  IBM Corporation

 *

 * Author:

 * Thiago Jung Bauermann <bauerman@linux.ibm.com>

 This digest will go in the 'd-modsig' field of the IMA template. */

	/*

	 * This is what will go to the measurement list if the template requires

	 * storing the signature.

/*

 * ima_read_modsig - Read modsig from buf.

 *

 * Return: 0 on success, error code otherwise.

 Allocate sig_len additional bytes to hold the raw PKCS#7 data. */

 We don't know the hash algorithm yet. */

/**

 * ima_collect_modsig - Calculate the file hash without the appended signature.

 *

 * Since the modsig is part of the file contents, the hash used in its signature

 * isn't the same one ordinarily calculated by IMA. Therefore PKCS7 code

 * calculates a separate one for signature verification.

	/*

	 * Provide the file contents (minus the appended sig) so that the PKCS7

	 * code can calculate the file hash.

 Ask the PKCS7 code to calculate the file hash. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2013 Politecnico di Torino, Italy

 *                    TORSEC group -- https://security.polito.it

 *

 * Author: Roberto Sassu <roberto.sassu@polito.it>

 *

 * File: ima_template.c

 *      Helpers to manage template descriptors.

 placeholder for a custom format */

/*

 * Used when restoring measurements carried over from a kexec. 'd' and 'n' don't

 * need to be accounted for since they shouldn't be defined in the same template

 * description as 'd-ng' and 'n-ng' respectively.

/**

 * ima_template_has_modsig - Check whether template has modsig-related fields.

 * @ima_template: IMA template to check.

 *

 * Tells whether the given template has fields referencing a file's appended

 * signature.

	/*

	 * Verify that a template with the supplied name exists.

	 * If not, use CONFIG_IMA_DEFAULT_TEMPLATE.

	/*

	 * Verify whether the current hash algorithm is supported

	 * by the 'ima' template.

 already initialized? */

 Restore the serialized binary measurement list without extending PCRs. */

	/*

	 * ima kexec buffer prefix: version, buffer size, count

	 * v1 format: pcr, digest, template-name-len, template-name,

	 *	      template-data-size, template-data

 template name is not null terminated */

		/*

		 * Only the running system's template format is initialized

		 * on boot.  As needed, initialize the other template formats.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005,2006,2007,2008 IBM Corporation

 *

 * Authors:

 * Reiner Sailer      <sailer@watson.ibm.com>

 * Leendert van Doorn <leendert@watson.ibm.com>

 * Mimi Zohar         <zohar@us.ibm.com>

 *

 * File: ima_init.c

 *             initialization and cleanup functions

 name for boot aggregate entry */

/* Add the boot aggregate to the IMA measurement list and extend

 * the PCR register.

 *

 * Calculate the boot aggregate, a hash over tpm registers 0-7,

 * assuming a TPM chip exists, and zeroes if the TPM chip does not

 * exist.  Add the boot aggregate measurement to the measurement

 * list and extend the PCR register.

 *

 * If a tpm chip does not exist, indicate the core root of trust is

 * not hardware based by invalidating the aggregate PCR value.

 * (The aggregate PCR value is invalidated by adding one value to

 * the measurement list and extending the aggregate PCR value with

 * a different value.) Violations add a zero entry to the measurement

 * list and extend the aggregate PCR value with ff...ff's.

	/*

	 * With TPM 2.0 hash agility, TPM chips could support multiple TPM

	 * PCR banks, allowing firmware to configure and enable different

	 * banks.  The SHA1 bank is not necessarily enabled.

	 *

	 * Use the same hash algorithm for reading the TPM PCRs as for

	 * calculating the boot aggregate digest.  Preference is given to

	 * the configured IMA default hash algorithm.  Otherwise, use the

	 * TCG required banks - SHA256 for TPM 2.0, SHA1 for TPM 1.2.

	 * Ultimately select SHA1 also for TPM 2.0 if the SHA256 PCR bank

	 * is not found.

 load also EVM key to avoid appraisal */

 It can be called before ima_init_digests(), it does not use TPM. */

 boot aggregate must be first entry */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2019 Microsoft Corporation

 *

 * Author: Lakshmi Ramasubramanian (nramas@linux.microsoft.com)

 *

 * File: ima_queue_keys.c

 *       Enables deferred processing of keys

/*

 * Flag to indicate whether a key can be processed

 * right away or should be queued for processing later.

/*

 * To synchronize access to the list of keys that need to be measured

/*

 * If custom IMA policy is not loaded then keys queued up

 * for measurement should be freed. This worker is used

 * for handling this scenario.

 5 Minutes */

/*

 * This worker function frees keys that may still be

 * queued up in case custom IMA policy was not loaded.

/*

 * This function sets up a worker to free queued keys in case

 * custom IMA policy was never loaded.

/*

 * ima_process_queued_keys() - process keys queued for measurement

 *

 * This function sets ima_process_keys to true and processes queued keys.

 * From here on keys will be processed right away (not queued).

	/*

	 * Since ima_process_keys is set to true, any new key will be

	 * processed immediately and not be queued to ima_keys list.

	 * First one setting the ima_process_keys flag to true will

	 * process the queued keys.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Integrity Measurement Architecture

 *

 * Copyright (C) 2005,2006,2007,2008 IBM Corporation

 *

 * Authors:

 * Reiner Sailer <sailer@watson.ibm.com>

 * Serge Hallyn <serue@us.ibm.com>

 * Kylene Hall <kylene@us.ibm.com>

 * Mimi Zohar <zohar@us.ibm.com>

 *

 * File: ima_main.c

 *	implements the IMA hooks: ima_bprm_check, ima_file_mmap,

 *	and ima_file_check.

 Prevent mmap'ing a file execute that is already mmap'ed write */

 ima_rdwr_violation possibly pre-fetched */

/*

 * ima_rdwr_violation_check

 *

 * Only invalidate the PCR for measured files:

 *	- Opening a file for write when already open for read,

 *	  results in a time of measure, time of use (ToMToU) error.

 *	- Opening a file for read when already open for write,

 *	  could result in a file measurement error.

 *

 IMA_MEASURE is set from reader side */

/**

 * ima_file_free - called on __fput()

 * @file: pointer to file structure being freed

 *

 * Flag files that changed, based on i_version

	/* Return an IMA_MEASURE, IMA_APPRAISE, IMA_AUDIT action

	 * bitmask based on the appraise/audit/measurement policy.

	 * Included is the appraise submask.

  Is the appraise rule hook specific?  */

 reset appraisal flags if ima_inode_post_setattr was called */

	/*

	 * Re-evaulate the file if either the xattr has changed or the

	 * kernel has no way of detecting file change on the filesystem.

	 * (Limited to privileged mounted filesystems.)

	/* Determine if already appraised/measured based on bitmask

	 * (IMA_MEASURE, IMA_MEASURED, IMA_XXXX_APPRAISE, IMA_XXXX_APPRAISED,

	 *  IMA_AUDIT, IMA_AUDITED)

 If target pcr is already measured, unset IMA_MEASURE action */

 HASH sets the digital signature and update flags, nothing else */

 Nothing to do, just return existing appraised status */

 read 'security.ima' */

		/*

		 * Read the appended modsig if allowed by the policy, and allow

		 * an additional measurement list entry, if needed, based on the

		 * template format and whether the file was already measured.

 ima_rdwr_violation possibly pre-fetched */

 Ensure the digest was generated using an allowed algorithm */

/**

 * ima_file_mmap - based on policy, collect/store measurement.

 * @file: pointer to the file to be measured (May be NULL)

 * @prot: contains the protection that will be applied by the kernel.

 *

 * Measure files being mmapped executable based on the ima_must_measure()

 * policy decision.

 *

 * On success return 0.  On integrity appraisal error, assuming the file

 * is in policy and IMA-appraisal is in enforcing mode, return -EACCES.

/**

 * ima_file_mprotect - based on policy, limit mprotect change

 * @prot: contains the protection that will be applied by the kernel.

 *

 * Files can be mmap'ed read/write and later changed to execute to circumvent

 * IMA's mmap appraisal policy rules.  Due to locking issues (mmap semaphore

 * would be taken before i_mutex), files can not be measured or appraised at

 * this point.  Eliminate this integrity gap by denying the mprotect

 * PROT_EXECUTE change, if an mmap appraise policy rule exists.

 *

 * On mprotect change success, return 0.  On failure, return -EACESS.

 Is mprotect making an mmap'ed file executable? */

 Is the mmap'ed file in policy? */

/**

 * ima_bprm_check - based on policy, collect/store measurement.

 * @bprm: contains the linux_binprm structure

 *

 * The OS protects against an executable file, already open for write,

 * from being executed in deny_write_access() and an executable file,

 * already open for execute, from being modified in get_write_access().

 * So we can be certain that what we verify and measure here is actually

 * what is being executed.

 *

 * On success return 0.  On integrity appraisal error, assuming the file

 * is in policy and IMA-appraisal is in enforcing mode, return -EACCES.

/**

 * ima_file_check - based on policy, collect/store measurement.

 * @file: pointer to the file to be measured

 * @mask: contains MAY_READ, MAY_WRITE, MAY_EXEC or MAY_APPEND

 *

 * Measure files based on the ima_must_measure() policy decision.

 *

 * On success return 0.  On integrity appraisal error, assuming the file

 * is in policy and IMA-appraisal is in enforcing mode, return -EACCES.

	/*

	 * ima_file_hash can be called when ima_collect_measurement has still

	 * not been called, we might not always have a hash.

/**

 * ima_file_hash - return the stored measurement if a file has been hashed and

 * is in the iint cache.

 * @file: pointer to the file

 * @buf: buffer in which to store the hash

 * @buf_size: length of the buffer

 *

 * On success, return the hash algorithm (as defined in the enum hash_algo).

 * If buf is not NULL, this function also outputs the hash into buf.

 * If the hash is larger than buf_size, then only buf_size bytes will be copied.

 * It generally just makes sense to pass a buffer capable of holding the largest

 * possible hash: IMA_MAX_DIGEST_SIZE.

 * The file hash returned is based on the entire file, including the appended

 * signature.

 *

 * If IMA is disabled or if no measurement is available, return -EOPNOTSUPP.

 * If the parameters are incorrect, return -EINVAL.

/**

 * ima_inode_hash - return the stored measurement if the inode has been hashed

 * and is in the iint cache.

 * @inode: pointer to the inode

 * @buf: buffer in which to store the hash

 * @buf_size: length of the buffer

 *

 * On success, return the hash algorithm (as defined in the enum hash_algo).

 * If buf is not NULL, this function also outputs the hash into buf.

 * If the hash is larger than buf_size, then only buf_size bytes will be copied.

 * It generally just makes sense to pass a buffer capable of holding the largest

 * possible hash: IMA_MAX_DIGEST_SIZE.

 * The hash returned is based on the entire contents, including the appended

 * signature.

 *

 * If IMA is disabled or if no measurement is available, return -EOPNOTSUPP.

 * If the parameters are incorrect, return -EINVAL.

/**

 * ima_post_create_tmpfile - mark newly created tmpfile as new

 * @mnt_userns:	user namespace of the mount the inode was found from

 * @file : newly created tmpfile

 *

 * No measuring, appraising or auditing of newly created tmpfiles is needed.

 * Skip calling process_measurement(), but indicate which newly, created

 * tmpfiles are in policy.

 Nothing to do if we can't allocate memory */

 needed for writing the security xattrs */

/**

 * ima_post_path_mknod - mark as a new inode

 * @mnt_userns:	user namespace of the mount the inode was found from

 * @dentry: newly created dentry

 *

 * Mark files created via the mknodat syscall as new, so that the

 * file data can be written later.

 Nothing to do if we can't allocate memory */

 needed for re-opening empty files */

/**

 * ima_read_file - pre-measure/appraise hook decision based on policy

 * @file: pointer to the file to be measured/appraised/audit

 * @read_id: caller identifier

 * @contents: whether a subsequent call will be made to ima_post_read_file()

 *

 * Permit reading a file based on policy. The policy rules are written

 * in terms of the policy identifier.  Appraising the integrity of

 * a file requires a file descriptor.

 *

 * For permission return 0, otherwise return -EACCES.

	/*

	 * Do devices using pre-allocated memory run the risk of the

	 * firmware being accessible to the device prior to the completion

	 * of IMA's signature verification any more than when using two

	 * buffers? It may be desirable to include the buffer address

	 * in this API and walk all the dma_map_single() mappings to check.

	/*

	 * There will be a call made to ima_post_read_file() with

	 * a filled buffer, so we don't need to perform an extra

	 * read early here.

 Read entire file for all partial reads. */

/**

 * ima_post_read_file - in memory collect/appraise/audit measurement

 * @file: pointer to the file to be measured/appraised/audit

 * @buf: pointer to in memory file contents

 * @size: size of in memory file contents

 * @read_id: caller identifier

 *

 * Measure/appraise/audit in memory file based on policy.  Policy rules

 * are written in terms of a policy identifier.

 *

 * On success return 0.  On integrity appraisal error, assuming the file

 * is in policy and IMA-appraisal is in enforcing mode, return -EACCES.

 permit signed certs */

 should never happen */

/**

 * ima_load_data - appraise decision based on policy

 * @id: kernel load data caller identifier

 * @contents: whether the full contents will be available in a later

 *	      call to ima_post_load_data().

 *

 * Callers of this LSM hook can not measure, appraise, or audit the

 * data provided by userspace.  Enforce policy rules requring a file

 * signature (eg. kexec'ed kernel image).

 *

 * For permission return 0, otherwise return -EACCES.

 INTEGRITY_UNKNOWN */

 INTEGRITY_UNKNOWN */

 INTEGRITY_UNKNOWN */

/**

 * ima_post_load_data - appraise decision based on policy

 * @buf: pointer to in memory file contents

 * @size: size of in memory file contents

 * @id: kernel load data caller identifier

 * @description: @id-specific description of contents

 *

 * Measure/appraise/audit in memory buffer based on policy.  Policy rules

 * are written in terms of a policy identifier.

 *

 * On success return 0.  On integrity appraisal error, assuming the file

 * is in policy and IMA-appraisal is in enforcing mode, return -EACCES.

 INTEGRITY_UNKNOWN */

/**

 * process_buffer_measurement - Measure the buffer or the buffer data hash

 * @mnt_userns:	user namespace of the mount the inode was found from

 * @inode: inode associated with the object being measured (NULL for KEY_CHECK)

 * @buf: pointer to the buffer that needs to be added to the log.

 * @size: size of buffer(in bytes).

 * @eventname: event name to be used for the buffer entry.

 * @func: IMA hook

 * @pcr: pcr to extend the measurement

 * @func_data: func specific data, may be NULL

 * @buf_hash: measure buffer data hash

 * @digest: buffer digest will be written to

 * @digest_len: buffer length

 *

 * Based on policy, either the buffer data or buffer data hash is measured

 *

 * Return: 0 if the buffer has been successfully measured, 1 if the digest

 * has been written to the passed location but not added to a measurement entry,

 * a negative value otherwise.

	/*

	 * Both LSM hooks and auxilary based buffer measurements are

	 * based on policy.  To avoid code duplication, differentiate

	 * between the LSM hooks and auxilary buffer measurements,

	 * retrieving the policy rule information only for the LSM hook

	 * buffer measurements.

/**

 * ima_kexec_cmdline - measure kexec cmdline boot args

 * @kernel_fd: file descriptor of the kexec kernel being loaded

 * @buf: pointer to buffer

 * @size: size of buffer

 *

 * Buffers can only be measured, not appraised.

/**

 * ima_measure_critical_data - measure kernel integrity critical data

 * @event_label: unique event label for grouping and limiting critical data

 * @event_name: event name for the record in the IMA measurement list

 * @buf: pointer to buffer data

 * @buf_len: length of buffer data (in bytes)

 * @hash: measure buffer data hash

 * @digest: buffer digest will be written to

 * @digest_len: buffer length

 *

 * Measure data critical to the integrity of the kernel into the IMA log

 * and extend the pcr.  Examples of critical data could be various data

 * structures, policies, and states stored in kernel memory that can

 * impact the integrity of the system.

 *

 * Return: 0 if the buffer has been successfully measured, 1 if the digest

 * has been written to the passed location but not added to a measurement entry,

 * a negative value otherwise.

 Start IMA after the TPM is available */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Platform keyring for firmware/platform keys

 *

 * Copyright IBM Corporation, 2018

 * Author(s): Nayna Jain <nayna@linux.ibm.com>

/**

 * add_to_platform_keyring - Add to platform keyring without validation.

 * @source: Source of key

 * @data: The blob holding the key

 * @len: The length of the data blob

 *

 * Add a key to the platform keyring without checking its trust chain.  This

 * is available only during kernel initialisation.

/*

 * Create the trusted keyrings.

/*

 * Must be initialised before we try and load the keys into the keyring.

 SPDX-License-Identifier: GPL-2.0

/*

 * Blacklist a hash.

/*

 * Blacklist an X509 TBS hash.

/*

 * Blacklist the hash of an executable.

/*

 * Add an X509 cert to the revocation list.

/*

 * Return the appropriate handler for particular signature list types found in

 * the UEFI db and MokListRT tables.

/*

 * Return the appropriate handler for particular signature list types found in

 * the UEFI dbx and MokListXRT tables.

 SPDX-License-Identifier: GPL-2.0

/*

 * Load the certs contained in the IPL report created by the machine loader

 * into the platform trusted keyring.

 Copy the certificates to the system keyring */

 SPDX-License-Identifier: GPL-2.0+

/* EFI signature/key/certificate list parser

 *

 * Copyright (C) 2012, 2016 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/**

 * parse_efi_signature_list - Parse an EFI signature list for certificates

 * @source: The source of the key

 * @data: The data blob to parse

 * @size: The size of the data blob

 * @get_handler_for_guid: Get the handler func for the sig type (or NULL)

 *

 * Parse an EFI signature list looking for elements of interest.  A list is

 * made up of a series of sublists, where all the elements in a sublist are of

 * the same type, but sublists can be of different types.

 *

 * For each sublist encountered, the @get_handler_for_guid function is called

 * with the type specifier GUID and returns either a pointer to a function to

 * handle elements of that type or NULL if the type is not of interest.

 *

 * If the sublist is of interest, each element is passed to the handler

 * function in turn.

 *

 * Error EBADMSG is returned if the list doesn't parse correctly and 0 is

 * returned if the list was parsed correctly.  No error can be returned from

 * the @get_handler_for_guid function or the element handler function it

 * returns.

 SPDX-License-Identifier: GPL-2.0

/*

 * Look to see if a UEFI variable called MokIgnoreDB exists and return true if

 * it does.

 *

 * This UEFI variable is set by the shim if a user tells the shim to not use

 * the certs/hashes in the UEFI db variable for verification purposes.  If it

 * is set, we should ignore the db variable also and the true return indicates

 * this.

/*

 * Get a certificate list blob from the named EFI variable.

/*

 * load_moklist_certs() - Load MokList certs

 *

 * Load the certs contained in the UEFI MokListRT database into the

 * platform trusted keyring.

 *

 * This routine checks the EFI MOK config table first. If and only if

 * that fails, this routine uses the MokListRT ordinary UEFI variable.

 *

 * Return:	Status

	/* First try to load certs from the EFI MOKvar config table.

	 * It's not an error if the MOKvar config table doesn't exist

	 * or the MokListRT entry is not found in it.

 All done if that worked. */

	/* Get MokListRT. It might not exist, so it isn't an error

	 * if we can't get it.

/*

 * load_uefi_certs() - Load certs from UEFI sources

 *

 * Load the certs contained in the UEFI databases into the platform trusted

 * keyring and the UEFI blacklisted X.509 cert SHA256 hashes into the blacklist

 * keyring.

	/* Get db and dbx.  They might not exist, so it isn't an error

	 * if we can't get them.

 Load the MokListRT certs */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2019 IBM Corporation

 * Author: Nayna Jain

 *

 *      - loads keys and hashes stored and controlled by the firmware.

/*

 * Get a certificate list blob from the named secure variable.

/*

 * Load the certs contained in the keys databases into the platform trusted

 * keyring and the blacklisted X.509 cert SHA256 hashes into the blacklist

 * keyring.

 The following only applies for the edk2-compat backend. */

	/*

	 * Get db, and dbx. They might not exist, so it isn't an error if we

	 * can't get them.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2010 IBM Corporation

 *

 * Authors:

 * Mimi Zohar <zohar@us.ibm.com>

 *

 * File: evm_secfs.c

 *	- Used to signal when key is on keyring

 *	- Get the key and enable EVM

/**

 * evm_read_key - read() for <securityfs>/evm

 *

 * @filp: file pointer, not actually used

 * @buf: where to put the result

 * @count: maximum to send along

 * @ppos: where to start

 *

 * Returns number of bytes read or error code, as appropriate

/**

 * evm_write_key - write() for <securityfs>/evm

 * @file: file pointer, not actually used

 * @buf: where to get the data from

 * @count: bytes sent

 * @ppos: where to start

 *

 * Used to signal that key is on the kernel key ring.

 * - get the integrity hmac key from the kernel key ring

 * - create list of hmac protected extended attributes

 * Returns number of bytes written or error code, as appropriate

 Reject invalid values */

	/*

	 * Don't allow a request to enable metadata writes if

	 * an HMAC key is loaded.

 Forbid further writes after the symmetric key is loaded */

	/* Don't allow protected metadata modification if a symmetric key

	 * is loaded

/**

 * evm_read_xattrs - read() for <securityfs>/evm_xattrs

 *

 * @filp: file pointer, not actually used

 * @buf: where to put the result

 * @count: maximum to send along

 * @ppos: where to start

 *

 * Returns number of bytes read or error code, as appropriate

/**

 * evm_write_xattrs - write() for <securityfs>/evm_xattrs

 * @file: file pointer, not actually used

 * @buf: where to get the data from

 * @count: bytes sent

 * @ppos: where to start

 *

 * Returns number of bytes written or error code, as appropriate

 Remove any trailing newline */

	/*

	 * xattr_list_mutex guards against races in evm_read_xattrs().

	 * Entries are only added to the evm_config_xattrnames list

	 * and never deleted. Therefore, the list is traversed

	 * using list_for_each_entry_lockless() without holding

	 * the mutex in evm_calc_hmac_or_hash(), evm_find_protected_xattrs()

	 * and evm_protected_xattr().

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005-2010 IBM Corporation

 *

 * Authors:

 * Mimi Zohar <zohar@us.ibm.com>

 * Kylene Hall <kjhall@us.ibm.com>

 *

 * File: evm_crypto.c

 *	 Using root's kernel master key (kmk), calculate the HMAC

/**

 * evm_set_key() - set EVM HMAC key from the kernel

 * @key: pointer to a buffer with the key data

 * @size: length of the key data

 *

 * This function allows setting the EVM HMAC key from the kernel

 * without using the "encrypted" key subsystem keys. It can be used

 * by the crypto HW kernel module which has its own way of managing

 * keys.

 *

 * key length should be between 32 and 128 bytes long

/* Protect against 'cutting & pasting' security.evm xattr, include inode

 * specific info.

 *

 * (Additional directory/file metadata needs to be added for more complete

 * protection.)

	/* Don't include the inode or generation number in portable

	 * signatures

	/* The hmac uid and gid must be encoded in the initial user

	 * namespace (not the filesystems user namespace) as encoding

	 * them in the filesystems user namespace allows an attack

	 * where first they are written in an unprivileged fuse mount

	 * of a filesystem and then the system is tricked to mount the

	 * filesystem for real on next boot and trust it because

	 * everything is signed.

/*

 * Dump large security xattr values as a continuous ascii hexademical string.

 * (pr_debug is limited to 64 bytes.)

/*

 * Calculate the HMAC value across the set of protected security xattrs.

 *

 * Instead of retrieving the requested xattr, for performance, calculate

 * the hmac using the requested xattr value. Don't alloc/free memory for

 * each xattr, but attempt to re-use the previously allocated memory.

		/*

		 * Skip non-enabled xattrs for locally calculated

		 * signatures/HMACs.

 Portable EVM signatures must include an IMA hash */

 Do this the hard way */

/*

 * Calculate the hmac and update security.evm xattr

 *

 * Expects to be called with i_mutex locked.

	/*

	 * Don't permit any transformation of the EVM xattr if the signature

	 * is of an immutable type

/*

 * Get the key from the TPM for the SHA1-HMAC

 burn the original key contents */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2011 IBM Corporation

 *

 * Author:

 * Mimi Zohar <zohar@us.ibm.com>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005-2010 IBM Corporation

 *

 * Author:

 * Mimi Zohar <zohar@us.ibm.com>

 * Kylene Hall <kjhall@us.ibm.com>

 *

 * File: evm_main.c

 *	implements evm_inode_setxattr, evm_inode_post_setxattr,

 *	evm_inode_removexattr, and evm_verifyxattr

/*

 * This function determines whether or not it is safe to ignore verification

 * errors, based on the ability of EVM to calculate HMACs. If the HMAC key

 * is not loaded, and it cannot be loaded in the future due to the

 * EVM_SETUP_COMPLETE initialization flag, allowing an operation despite the

 * attrs/xattrs being found invalid will not make them valid.

/*

 * evm_verify_hmac - calculate and compare the HMAC with the EVM xattr

 *

 * Compute the HMAC on the dentry's protected set of extended attributes

 * and compare it against the stored security.evm xattr.

 *

 * For performance:

 * - use the previoulsy retrieved xattr value and length to calculate the

 *   HMAC.)

 * - cache the verification result in the iint, when available.

 *

 * Returns integrity status

 if status is not PASS, try to check again - against -ENOMEM */

 first need to know the sig type */

 new file */

 check value type */

 accept xattr with non-empty signature field */

/**

 * evm_read_protected_xattrs - read EVM protected xattr names, lengths, values

 * @dentry: dentry of the read xattrs

 * @inode: inode of the read xattrs

 * @buffer: buffer xattr names, lengths or values are copied to

 * @buffer_size: size of buffer

 * @type: n: names, l: lengths, v: values

 * @canonical_fmt: data format (true: little endian, false: native format)

 *

 * Read protected xattr names (separated by |), lengths (u32) or values for a

 * given dentry and return the total size of copied data. If buffer is NULL,

 * just return the total size.

 *

 * Returns the total size on success, a negative value on error.

/**

 * evm_verifyxattr - verify the integrity of the requested xattr

 * @dentry: object of the verify xattr

 * @xattr_name: requested xattr

 * @xattr_value: requested xattr value

 * @xattr_value_len: requested xattr value length

 *

 * Calculate the HMAC for the given dentry and verify it against the stored

 * security.evm xattr. For performance, use the xattr value and length

 * previously retrieved to calculate the HMAC.

 *

 * Returns the xattr integrity status.

 *

 * This function requires the caller to lock the inode's i_mutex before it

 * is executed.

/*

 * evm_verify_current_integrity - verify the dentry's metadata integrity

 * @dentry: pointer to the affected dentry

 *

 * Verify and return the dentry's metadata integrity. The exceptions are

 * before EVM is initialized or in 'fix' mode.

/*

 * evm_xattr_acl_change - check if passed ACL changes the inode mode

 * @mnt_userns: user namespace of the idmapped mount

 * @dentry: pointer to the affected dentry

 * @xattr_name: requested xattr

 * @xattr_value: requested xattr value

 * @xattr_value_len: requested xattr value length

 *

 * Check if passed ACL changes the inode mode, which is protected by EVM.

 *

 * Returns 1 if passed ACL causes inode mode change, 0 otherwise.

	/*

	 * user_ns is not relevant here, ACL_USER/ACL_GROUP don't have impact

	 * on the inode mode (see posix_acl_equiv_mode()).

	/*

	 * Passing mnt_userns is necessary to correctly determine the GID in

	 * an idmapped mount, as the GID is used to clear the setgid bit in

	 * the inode mode.

/*

 * evm_xattr_change - check if passed xattr value differs from current value

 * @mnt_userns: user namespace of the idmapped mount

 * @dentry: pointer to the affected dentry

 * @xattr_name: requested xattr

 * @xattr_value: requested xattr value

 * @xattr_value_len: requested xattr value length

 *

 * Check if passed xattr value differs from current value.

 *

 * Returns 1 if passed xattr value differs from current value, 0 otherwise.

/*

 * evm_protect_xattr - protect the EVM extended attribute

 *

 * Prevent security.evm from being modified or removed without the

 * necessary permissions or when the existing value is invalid.

 *

 * The posix xattr acls are 'system' prefixed, which normally would not

 * affect security.evm.  An interesting side affect of writing posix xattr

 * acls is their modifying of the i_mode, which is included in security.evm.

 * For posix xattr acls only, permit security.evm, even if it currently

 * doesn't exist, to be updated unless the EVM signature is immutable.

 Exception if the HMAC is not going to be calculated. */

 exception for pseudo filesystems */

 Exception if the HMAC is not going to be calculated. */

	/*

	 * Writing other xattrs is safe for portable signatures, as portable

	 * signatures are immutable and can never be updated.

/**

 * evm_inode_setxattr - protect the EVM extended attribute

 * @mnt_userns: user namespace of the idmapped mount

 * @dentry: pointer to the affected dentry

 * @xattr_name: pointer to the affected extended attribute name

 * @xattr_value: pointer to the new extended attribute value

 * @xattr_value_len: pointer to the new extended attribute value length

 *

 * Before allowing the 'security.evm' protected xattr to be updated,

 * verify the existing value is valid.  As only the kernel should have

 * access to the EVM encrypted key needed to calculate the HMAC, prevent

 * userspace from writing HMAC value.  Writing 'security.evm' requires

 * requires CAP_SYS_ADMIN privileges.

	/* Policy permits modification of the protected xattrs even though

	 * there's no HMAC key loaded

/**

 * evm_inode_removexattr - protect the EVM extended attribute

 * @mnt_userns: user namespace of the idmapped mount

 * @dentry: pointer to the affected dentry

 * @xattr_name: pointer to the affected extended attribute name

 *

 * Removing 'security.evm' requires CAP_SYS_ADMIN privileges and that

 * the current value is valid.

	/* Policy permits modification of the protected xattrs even though

	 * there's no HMAC key loaded

/**

 * evm_revalidate_status - report whether EVM status re-validation is necessary

 * @xattr_name: pointer to the affected extended attribute name

 *

 * Report whether callers of evm_verifyxattr() should re-validate the

 * EVM status.

 *

 * Return true if re-validation is necessary, false otherwise.

 evm_inode_post_setattr() passes NULL */

/**

 * evm_inode_post_setxattr - update 'security.evm' to reflect the changes

 * @dentry: pointer to the affected dentry

 * @xattr_name: pointer to the affected extended attribute name

 * @xattr_value: pointer to the new extended attribute value

 * @xattr_value_len: pointer to the new extended attribute value length

 *

 * Update the HMAC stored in 'security.evm' to reflect the change.

 *

 * No need to take the i_mutex lock here, as this function is called from

 * __vfs_setxattr_noperm().  The caller of which has taken the inode's

 * i_mutex lock.

/**

 * evm_inode_post_removexattr - update 'security.evm' after removing the xattr

 * @dentry: pointer to the affected dentry

 * @xattr_name: pointer to the affected extended attribute name

 *

 * Update the HMAC stored in 'security.evm' to reflect removal of the xattr.

 *

 * No need to take the i_mutex lock here, as this function is called from

 * vfs_removexattr() which takes the i_mutex.

/**

 * evm_inode_setattr - prevent updating an invalid EVM extended attribute

 * @dentry: pointer to the affected dentry

 *

 * Permit update of file attributes when files have a valid EVM signature,

 * except in the case of them having an immutable portable signature.

	/* Policy permits modification of the protected attrs even though

	 * there's no HMAC key loaded

	/*

	 * Writing attrs is safe for portable signatures, as portable signatures

	 * are immutable and can never be updated.

/**

 * evm_inode_post_setattr - update 'security.evm' after modifying metadata

 * @dentry: pointer to the affected dentry

 * @ia_valid: for the UID and GID status

 *

 * For now, update the HMAC stored in 'security.evm' to reflect UID/GID

 * changes.

 *

 * This function is called from notify_change(), which expects the caller

 * to lock the inode's i_mutex.

/*

 * evm_inode_init_security - initializes security.evm HMAC value

