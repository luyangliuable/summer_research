 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2020 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

 Force disconnect of the mux while updating */

	/*

	 * FIXME:

	 * On this soc, the glue gets the MCLK directly from the clock

	 * controller instead of going the through the TDM interface.

	 *

	 * Here we assume interface A uses clock A, etc ... While it is

	 * true for now, it could be different. Instead the glue should

	 * find out the clock used by the interface and select the same

	 * source. For that, we will need regmap backed clock mux which

	 * is a work in progress

 The glue will provide 1 lane out of the 4 to the output */

 Initialize the static clock parameters */

 Initialize the static clock parameters */

 SPDX-License-Identifier: (GPL-2.0 OR MIT)



 Copyright (c) 2018 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

/*

 * TODO:

 * It would have been nice to check the actual rate against the sample rate

 * requested in hw_params(). Unfortunately, I was not able to make the mode

 * detection and IRQ work reliably:

 *

 * 1. IRQs are generated on mode change only, so there is no notification

 *    on transition between no signal and mode 0 (32kHz).

 * 2. Mode detection very often has glitches, and may detects the

 *    lowest or the highest mode before zeroing in on the actual mode.

 *

 * This makes calling snd_pcm_stop() difficult to get right. Even notifying

 * the kcontrol would be very unreliable at this point.

 * Let's keep things simple until the magic spell that makes this work is

 * found.

	/*

	 * If max width is zero, we are not capturing anything.

	 * Also Sometimes, when the capture is on but there is no data,

	 * mode is SPDIFIN_MODE_NUM, but not always ...

 Apply both reset */

 Clear out reset before in reset */

	/*

	 * Number of period of the reference clock during a period of the

	 * input signal reference clock

 Set spdif input reference clock */

	/*

	 * The rate actually set might be slightly different, get

	 * the actual rate for the following mode calculation

 HW will update mode every 1ms */

 Threshold based on the minimum width between two edges */

 Calculate the last timer which has no threshold */

 Calculate the timer */

 Set the timer value */

 Set the threshold value */

 Save the current timer for the next threshold calculation */

 SPDX-License-Identifier: (GPL-2.0 OR MIT)



 Copyright (c) 2018 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

/*

 * Base params for the codec to codec links

 * Those will be over-written by the CPU side of the link

 The loopback rx_mask is the pad tx_mask */

 extend links */

 Provide the same link data to the loopback */

	/*

	 * axg_card_clean_references() will iterate over this link,

	 * make sure the node count is balanced

 Let add_links continue where it should */

 Disable playback is the interface has no tx slots */

 Disable capture is the interface has no rx slots */

 ... but the interface should at least have one of them */

		/*

		 * If the slot number is not provided, set it such as it

		 * accommodates the largest mask

		/*

		 * Error if the slots can't accommodate the largest mask or

		 * if it is just too big

 Allocate tdm link parameters */

 Setup tdm link */

 Add loopback if the pad dai has playback */

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2020 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

 Setup the fifo boundaries */

 Setup the fifo to read all the memory - no skip */

	/*

	 * Make sure the buffer and period size are multiple of the fifo burst

	 * size

 SPDX-License-Identifier: (GPL-2.0 OR MIT)



 Copyright (c) 2020 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

/*

 * Base params for the codec to codec links

 * Those will be over-written by the CPU side of the link

 Allocate i2s link parameters */

 Setup i2s link */

 dai not matched */

 Or apply codec to codec params if necessary */

 Check if the cpu is the i2s encoder and parse i2s data */

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2020 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

 Force disconnect of the mux while updating */

 The glue will provide 1 lane out of the 4 to the output */

	/*

	 * NOTE: Din Skew setting

	 * According to the documentation, the following update adds one delay

	 * to the din line. Without this, the output saturates. This happens

	 * regardless of the link format (i2s or left_j) so it is not clear what

	 * it actually does but it seems to be required

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2020 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

 Write the 1st half word */

 Write the 2nd half word */

 Disable the clock while changing the settings */

 Set the stream channel status word */

 2 * 32bits per subframe * 2 channels = 128 */

	/*

	 * NOTE: Make sure the spdif block is on its own divider.

	 *

	 * The spdif can be clocked by the i2s master clock or its own

	 * clock. We should (in theory) change the source depending on the

	 * origin of the data.

	 *

	 * However, considering the clocking scheme used on these platforms,

	 * the master clocks will pick the same PLL source when they are

	 * playing from the same FIFO. The clock should be in sync so, it

	 * should not be necessary to reparent the spdif master clock.

 SPDX-License-Identifier: (GPL-2.0 OR MIT)



 Copyright (c) 2018 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

	/*

	 * Distribute the channels of the stream over the available slots

	 * of each TDM lane

	/*

	 * If we still have channel left at the end of the process, it means

	 * the stream has more channels than we can accommodate and we should

	 * have caught this earlier.

 Do nothing if the formatter is already enabled */

	/*

	 * On the g12a (and possibly other SoCs), when a stream using

	 * multiple lanes is restarted, it will sometimes not start

	 * from the first lane, but randomly from another used one.

	 * The result is an unexpected and random channel shift.

	 *

	 * The hypothesis is that an HW counter is not properly reset

	 * and the formatter simply starts on the lane it stopped

	 * before. Unfortunately, there does not seems to be a way to

	 * reset this through the registers of the block.

	 *

	 * However, the g12a has indenpendent reset lines for each audio

	 * devices. Using this reset before each start solves the issue.

	/*

	 * If sclk is inverted, it means the bit should latched on the

	 * rising edge which is what our HW expects. If not, we need to

	 * invert it before the formatter.

 Setup the stream parameter in the formatter */

 Enable the signal clocks feeding the formatter */

 Finally, actually enable the formatter */

 Do nothing if the formatter is already disabled */

 Catch up if the stream is already running when we attach */

	/*

	 * If we don't get a stream at this stage, it would mean that the

	 * widget is powering up but is not attached to any backend DAI.

	 * It should not happen, ever !

 Clock our device */

 Reparent the bit clock to the TDM interface */

 Reparent the sample clock to the TDM interface */

 Peripharal clock */

 Formatter bit clock */

 Formatter sample clock */

 Formatter bit clock input multiplexer */

 Formatter sample clock input multiplexer */

 Formatter dedicated reset line */

 Start all the formatters attached to the stream */

 Stop all the formatters attached to the stream */

	/*

	 * If the list is not empty, it would mean that one of the formatter

	 * widget is still powered and attached to the interface while we

	 * are removing the TDM DAI. It should not be possible

 SPDX-License-Identifier: (GPL-2.0 OR MIT)



 Copyright (c) 2018 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

 Apply both reset */

 Clear out reset before in reset */

 Actually enable tdmout */

 Set the stream skew */

 Set the slot width */

 Set the slot number */

 Set the sample width */

 FIFO data are arranged in chunks of 64bits */

 8 samples of 8 bits */

 4 samples of 16 bits - right justified */

 2 samples of 32 bits - right justified */

 If the sample clock is inverted, invert it back for the formatter */

 Set static swap mask configuration */

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2020 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

 Volume Controls */

 Ramp Controls */

	/*

	 * Initialize output polarity:

	 * ATM the output polarity is fixed but in the future it might useful

	 * to add DT property to set this depending on the platform needs

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2019 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

 Force disconnect of the mux while updating */

 Force disconnect of the mux while updating */

 Initialize the static clock parameters */

 SPDX-License-Identifier: (GPL-2.0 OR MIT)



 Copyright (c) 2018 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

 Reset AFIFO */

 Enable PDM */

	/*

	 * The global oversampling factor is defined by the down sampling

	 * factor applied by each filter (HCIC and LPFs)

	/*

	 * Set the default system clock rate unless it is too fast for

	 * for the requested sample rate. In this case, the sample pointer

	 * counter could overflow so set a lower system clock rate

 Max sample counter value per half period of dclk */

 Check if sysclk is not too fast - should not happen */

 Capture the data when we are at 75% of the half period */

 Put all channel in reset */

 Take the necessary channels out of reset and enable them */

 Enable the filters */

 Make sure the coeffs fit in the memory */

 Set the initial APB bus register address */

 Set the tap filter values of all 3 filters */

	/*

	 * sysclk must be set and enabled as well to access the pdm registers

	 * Accessing the register w/o it will give a bus error.

 Make sure the device is initially disabled */

 Make sure filter bypass is disabled */

 Load filter settings */

/*

 * These values are sane defaults for the axg platform:

 * - OS = 64

 * - Latency = 38700 (?)

 *

 * TODO: There is a lot of different HCIC, LPFs and HPF configurations possible.

 *       the configuration may depend on the dmic used by the platform, the

 *       expected tradeoff between latency and quality, etc ... If/When other

 *       settings are required, we should add a fw interface to this driver to

 *       load new filter settings.

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2020 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

 Required for the SPDIF Source control operation */

 Register the cpu component of the aiu */

 Register the hdmi codec control component */

 Register the internal dac control component on gxl */

 SPDX-License-Identifier: (GPL-2.0 OR MIT)



 Copyright (c) 2018 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

 Count the total number of slots provided by all 4 lanes */

 We should at least have a slot for a valid interface */

 Amend the dai driver and let dpcm merge do its job */

 Apply component wide rate symmetry */

 Save rate and sample_bits for component symmetry */

 Make sure this interface can cope with the stream */

 Save the parameter for tdmout/tdmin widgets */

 50% duty cycle ratio */

		/*

		 * A zero duty cycle ratio will result in setting the mininum

		 * ratio possible which, for this clock, is 1 cycle of the

		 * parent bclk clock high and the rest low, This is exactly

		 * what we want here.

 Set sample clock inversion */

 If no specific mclk is requested, default to bit clock * 4 */

 Check if we can actually get the bit clock from mclk */

 Set the bit clock inversion */

 Stop all attached formatters */

 TDM Backend DAIs */

	/*

	 * Duplicate dai driver: depending on the slot masks configuration

	 * We'll change the number of channel provided by DAI stream, so dpcm

	 * channel merge can be done properly

 Bit clock provided on the pad */

 Sample clock provided on the pad */

	/*

	 * mclk maybe be missing when the cpu dai is in slave mode and

	 * the codec does not require it to provide a master clock.

	 * At this point, ignore the error if mclk is missing. We'll

	 * throw an error if the cpu dai is master and mclk is missing

 SPDX-License-Identifier: (GPL-2.0 OR MIT)



 Copyright (c) 2018 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

/*

 * This driver implements the frontend playback DAI of AXG and G12A based SoCs

 Reset the read pointer to the FIFO_INIT_ADDR */

 Trim the FIFO depth if the period is small to improve latency */

 Enable pclk to access registers and clock the fifo ip */

 Apply single buffer mode to the interface */

 On SM1, the output selection in on CTRL2 */

 SPDX-License-Identifier: (GPL-2.0 OR MIT)



 Copyright (c) 2018 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

/*

 * NOTE:

 * The meaning of bits SPDIFOUT_CTRL0_XXX_SEL is actually the opposite

 * of what the documentation says. Manual control on V, U and C bits is

 * applied when the related sel bits are cleared

 Apply both reset */

 Clear out reset before in reset */

 Enable spdifout */

 Use spdif valid bit to perform digital mute */

 Set the samples spdifout will pull from the FIFO */

 FIFO data are arranged in chunks of 64bits */

 8 samples of 8 bits */

 4 samples of 16 bits - right justified */

 2 samples of 32 bits - right justified */

 Position of the MSB in FIFO samples */

 Setup channel status A bits [31 - 0]*/

 Clear channel status A bits [191 - 32] */

 Setup channel status B bits [31 - 0]*/

 Clear channel status B bits [191 - 32] */

 2 * 32bits per subframe * 2 channels = 128 */

 Clock the spdif output block */

 Make sure the block is initially stopped */

 Insert data from bit 27 lsb first */

 Manual control of V, C and U, U = 0 */

 Static SWAP configuration ATM */

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2020 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

 Force disconnect of the mux while updating */

 Reset the source first */

 Set the appropriate source */

 SPDX-License-Identifier: (GPL-2.0 OR MIT)



 Copyright (c) 2018 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

 This driver implements the frontend capture DAI of AXG based SoCs */

 Reset the write pointer to the FIFO_INIT_ADDR */

 8 samples of 8 bits */

 4 samples of 16 bits - right justified */

 2 samples of 32 bits - right justified */

 Enable pclk to access registers and clock the fifo ip */

 Select orginal data - resampling not supported ATM */

 Only signed format are supported ATM */

 Apply single buffer mode to the interface */

	/*

	 * Make sure the first channel ends up in the at beginning of the output

	 * As weird as it looks, without this the first channel may be misplaced

	 * in memory, with a random shift of 2 channels.

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2020 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

 No real justification for this */

 Number bytes read by the FIFO between each IRQ */

	/*

	 * AUTO_DISABLE and SYNC_HEAD are enabled by default but

	 * this should be disabled in PCM (uncompressed) mode

 SPDX-License-Identifier: (GPL-2.0 OR MIT)



 Copyright (c) 2018 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

/*

 * This file implements the platform operations common to the playback and

 * capture frontend DAI. The logic behind this two types of fifo is very

 * similar but some difference exist.

 * These differences are handled in the respective DAI drivers

 No real justification for this */

 Setup dma memory pointers */

 Setup interrupt periodicity */

	/*

	 * Start the fifo request on the smallest of the following:

	 * - Half the fifo size

	 * - Half the period size

	/*

	 * With the threshold in bytes, register value is:

	 * V = (threshold / burst) - 1

 Enable irq if necessary  */

 Set the initial memory address of the DMA */

 Disable the block count irq */

 Clear must also be cleared */

 Ack irqs */

	/*

	 * Make sure the buffer and period size are multiple of the FIFO

	 * burst

 Enable pclk to access registers and clock the fifo ip */

 Setup status2 so it reports the memory pointer */

 Make sure the dma is initially disabled */

 Disable irqs until params are ready */

 Clear any pending interrupt */

 Take memory arbitror out of reset */

 Put the memory arbitror back in reset */

 Disable fifo ip and register access */

 remove IRQ */

 Error out for anything but a missing property */

		/*

		 * If the property is missing, it might be because of an old

		 * DT. In such case, assume the smallest known fifo depth

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2020 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

 No real justification for this */

 Setup the irq periodicity */

 SPDX-License-Identifier: GPL-2.0



 Xilinx ASoC SPDIF audio support



 Copyright (C) 2018 Xilinx, Inc.



 Author: Maruthi Srinivas Bayyavarapu <maruthis@xilinx.com>



 start capture only if stream is detected within 40ms timeout */

 SPDX-License-Identifier: GPL-2.0



 Xilinx ASoC I2S audio support



 Copyright (C) 2018 Xilinx, Inc.



 Author: Praveen Vuppala <praveenv@xilinx.com>

 Author: Maruthi Srinivas Bayyavarapu <maruthis@xilinx.com>

 SPDX-License-Identifier: GPL-2.0



 Xilinx ASoC audio formatter support



 Copyright (C) 2018 Xilinx, Inc.



 Author: Maruthi Srinivas Bayyavarapu <maruthis@xilinx.com>

/*

 * struct xlnx_pcm_stream_param - stream configuration

 * @mmio: base address offset

 * @interleaved: audio channels arrangement in buffer

 * @xfer_mode: data formatting mode during transfer

 * @ch_limit: Maximum channels supported

 * @buffer_size: stream ring buffer size

 Poll for maximum timeout of approximately 100ms (1 * 100)*/

 Resize the period size divisible by 64 */

 enable DMA IOC irq */

 Try MM2S reset, even if S2MM  reset fails */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * kirkwood-dma.c

 *

 * (c) 2010 Arnaud Patard <apatard@mandriva.com>

 * (c) 2010 Arnaud Patard <arnaud.patard@rtp-net.org>

 we've enabled only bytes interrupts ... */

 ack int */

 First disable and clear windows */

 try to find matching cs for current dma address */

 Ensure that all constraints linked to dma burst are fulfilled */

		/*

		 * Enable Error interrupts. We're only ack'ing them but

		 * it's useful for diagnostics

 compute buffer size in term of "words" as requested in specs */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2014 Marvell

 *

 * Thomas Petazzoni <thomas.petazzoni@free-electrons.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * kirkwood-i2s.c

 *

 * (c) 2010 Arnaud Patard <apatard@mandriva.com>

 * (c) 2010 Arnaud Patard <arnaud.patard@rtp-net.org>

	/*

	 * Set same format for playback and record

	 * This avoids some troubles.

 wait for dco locked */

		/* use internal dco for the supported rates

		/* use the external clock for the other rates

	/*

	 * Size settings in play/rec i2s control regs and play/rec control

	 * regs must be the same.

	/*

	 * doesn't work... S20_3LE != kirkwood 20bit format ?

	 *

	case SNDRV_PCM_FORMAT_S20_3LE:

		i2s_value |= KIRKWOOD_I2S_CTL_SIZE_20;

		ctl_play = KIRKWOOD_PLAYCTL_SIZE_20 |

			   KIRKWOOD_PLAYCTL_I2S_EN;

		ctl_rec = KIRKWOOD_RECCTL_SIZE_20 |

			  KIRKWOOD_RECCTL_I2S_EN;

		break;

		/*

		 * The Armada510 spec says that if we enter pause mode, the

		 * busy bit must be read back as clear _twice_.  Make sure

		 * we respect that otherwise we get DMA underruns.

 configure */

 i2s */

 spdif */

 enable interrupts */

 enable playback */

 stop audio, disable interrupts */

 disable all playbacks */

 configure */

 i2s */

 spdif */

 enable interrupts */

 enable record */

 stop audio, disable interrupts */

 disable all records */

 put system in a "safe" state : */

 disable audio interrupts */

 disable playback/record */

 might be 32 or 128 */

 Some sensible defaults - this reflects the powerup values */

 Select the burst size */

 Module information */

 SPDX-License-Identifier: GPL-2.0



 Generic AC97 sound support for SH7760



 (c) 2007 Manuel Lauss

 HAC0 */

 enable both AC97 controllers in pinmux reg */

 SPDX-License-Identifier: GPL-2.0+



 siu_dai.c - ALSA SoC driver for Renesas SH7343, SH7722 SIU peripheral.



 Copyright (C) 2009-2010 Guennadi Liakhovetski <g.liakhovetski@gmx.de>

 Copyright (C) 2006 Carlos Munoz <carlos@kenati.com>

 Board specifics */

/*

 * SPDIF is only available on port A and on some SIU implementations it is only

 * available for input. Due to the lack of hardware to test it, SPDIF is left

 * disabled in this driver version

 not on all SIU versions */

 impossible - turn off */

 impossible - turn off */

 Issue software reset to siu */

 Wait for the reset to take effect */

 portA, portB, SIU operate */

 portA=256fs, portB=256fs */

 portA's BRG does not divide SIUCKA */

 portB's BRG divides SIUCKB by half */

 portA: 32 bit/fs, master; portB: 32 bit/fs, master */

	/*

	 * Volume levels: looks like the DSP firmware implements volume controls

	 * differently from what's described in the datasheet

 SIU software reset */

 path A use */

 portA */

 portB */

 0x03000300 */

 0 */

 0 */

 path B use */

 portA */

 portB */

 portA operates */

 portB operates */

 Unmute and configure portA */

/*

 * At the moment only fixed Left-upper, Left-lower, Right-upper, Right-lower

 * packing is supported

 Load SPB Program in PRAM */

 XRAM initialization */

 YRAM variable area initialization */

 YRAM FIR coefficient area initialization */

 YRAM IIR coefficient area initialization */

 SPB start condition: software */

 Start SPB */

 Wait for program to halt */

 SPB program start address setting */

 SPB hardware start(FIFOCTL source) */

 SPB stop */

		API functions		*/

 Playback and capture hardware properties are identical */

 Playback is always on port 0 */

 Capture is always on port 1 */

 See comment above - DSP firmware implementation */

 Playback is always on port 0 */

 Capture is always on port 1 */

	/*

	 * Add mixer support. The SPB is used to change the volume. Both

	 * ports use the same SPB. Therefore, we only register one

	 * control instance since it will be used by both channels.

	 * In error case we continue without controls.

 Stop the siu if the other stream is not using it */

 during stmread or stmwrite ? */

 PCM part of siu_dai_playback_prepare() / siu_dai_capture_prepare() */

 Set up the siu if not already done */

 stream-data transfer flag */

/*

 * SIU can set bus format to I2S / PCM / SPDIF independently for playback and

 * capture, however, the current API sets the bus format globally for a DAI.

 Here select between I2S / PCM / SPDIF */

 SPDIF disabled - see comment at the top */

 TODO: when clkdev gets reference counting we'll move these to siu_dai_shutdown() */

	/*

	 * Loaded firmware is "const" - read only, but we have to modify it in

	 * snd_siu_sh7343_spbAselect() and snd_siu_sh7343_spbBselect()

 register using ARRAY version so we can keep dai name */

 SPDX-License-Identifier: GPL-2.0



 Hitachi Audio Controller (AC97) support for SH7760/SH7780



 Copyright (c) 2007 Manuel Lauss <mano@roarinelk.homelinux.net>



 dont forget to set IPSEL/OMSEL register bits (in your board code) to

 enable HAC output pins!

/* BIG FAT FIXME: although the SH7760 has 2 independent AC97 units, only

 * the FIRST can be used since ASoC does not pass any information to the

 * ac97_read/write() functions regarding WHICH unit to use.  You'll have

 * to edit the code a bit to use the other AC97 unit.		--mlau

 regs and bits */

 "codec-ready" indicator */

 cold reset */

 warm reset */

 the mysterious "bit 9" */

 AC97 link start bit */

 AC97 data read bit */

 manual-suggested AC97 codec access timeouts (us) */

 21 < E1 < 1000 */

 13 < E2 */

 21 < E3 */

 21 < E4 < 1000 */

 HAC base address */

/*

 * AC97 read/write flow as outlined in the SH7760 manual (pages 903-906)

 wait for HAC to receive something from the codec */

 codec comm is down */

 manual says: wait at least 21 usec before retrying */

 send_read_request */

 ac97->private_data */;

 write_codec_aux */

 send_write_request */

 poll-wait for CMDAMT and CMDDMT */

 timeout, try again */

 ac97->private_data */;

 ac97->private_data */;

 settings this bit lets us have a conversation with codec */

 ac97->private_data */;

 SPDX-License-Identifier: GPL-2.0



 ALSA SoC driver for Migo-R



 Copyright (C) 2009-2010 Guennadi Liakhovetski <g.liakhovetski@gmx.de>

 Default 8000Hz sampling frequency */

 External clock, sourced from the codec at the SIUMCKB pin */

 initialised at run-time */

	/*

	 * This propagates the parent frequency change to children and

	 * recalculates the frequency table

 Headphone output connected to LHP/RHP, enable OUT4 for VMID */

 On-board microphone */

 External microphone */

 migor digital audio interface glue - connects codec <--> CPU */

 migor audio machine driver */

 Port number used on this machine: port B */

 SPDX-License-Identifier: GPL-2.0



 Fifo-attached Serial Interface (FSI) support for SH7724



 Copyright (C) 2009 Renesas Solutions Corp.

 Kuninori Morimoto <morimoto.kuninori@renesas.com>



 Based on ssi.c

 Copyright (c) 2007 Manuel Lauss <mano@roarinelk.homelinux.net>

 PortA/PortB register */

 master register */

 core register (depend on FSI version) */

 DO_FMT */

 DI_FMT */

 FSI2 */

 FSI2 */

 FSI2 */

 FSI2 */

 FSI2 */

 FSI2 */

 FSI2 */

 OUT_DMAC */

 IN_DMAC */

 Package in front */

 Package in back */

 Stream mode(16bit * 2) */

 DOFF_CTL */

 DIFF_CTL */

 DOFF_ST */

 CKG1 */

 A/B MST_CTLR */

 Fix the signal of Biphase output */

 Fix the master clock */

 CLK_RST */

 IO SHIFT / MACRO */

 SOFT_RST */

 Port B Software Reset */

 Port A Software Reset */

 Interrupt Reset */

 Software Reset */

 OUT_SEL (FSI2) */

 SPDIF output timing 0: Biphase only */

			1: Biphase and serial */

 FIFO_SZ */

/*

 * bus options

 *

 * 0x000000BA

 *

 * A : sample widtht 16bit setting

 * B : sample widtht 24bit setting

/*

 * FSI driver use below type name for variable

 *

 * xxx_num	: number of data

 * xxx_pos	: position of data

 * xxx_capa	: capacity of data

/*

 *	period/frame/sample image

 *

 * ex) PCM (2ch)

 *

 * period pos					   period pos

 *   [n]					     [n + 1]

 *   |<-------------------- period--------------------->|

 * ==|============================================ ... =|==

 *   |							|

 *   ||<-----  frame ----->|<------ frame ----->|  ...	|

 *   |+--------------------+--------------------+- ...	|

 *   ||[ sample ][ sample ]|[ sample ][ sample ]|  ...	|

 *   |+--------------------+--------------------+- ...	|

 * ==|============================================ ... =|==

/*

 *	FSI FIFO image

 *

 *	|	     |

 *	|	     |

 *	| [ sample ] |

 *	| [ sample ] |

 *	| [ sample ] |

 *	| [ sample ] |

 *		--> go to codecs

/*

 *	FSI clock

 *

 * FSIxCLK [CPG] (ick) ------->	|

 *				|-> FSI_DIV (div)-> FSI2

 * FSIxCK [external] (xck) --->	|

/*

 *		struct

	/*

	 * these are initialized by fsi_stream_init()

 sample capacity of FSI FIFO */

 sample capacity of ALSA buffer */

 sample position of ALSA buffer */

 sample number / 1 period */

 current period position */

 sample width */

	/*

	 * bus options

	/*

	 * these are initialized by fsi_handler_init()

	/*

	 * these are for DMAEngine

 see [FSI clock] */

/*

 *		basic read write function

 valid data area is 24bit */

/*

 *		basic function

/*

 *		fsi_stream_xx() function

 ignore 1st err */

 ignore 1st err */

/*

 *	format/bus/dma setting

		/*

		 * FSI2 needs DMA/Bus setting

/*

 *		irq function

 clear interrupt factor */

/*

 *		SPDIF master clock function

 *

 * These functions are used later FSI2

/*

 *		clock function

 external clock */

 FSIACLK/FSIBCLK */

 FSI-DIV */

 check ackmd/bpfmd relationship */

  ACKMD */

 BPFMD */

 check clock rate */

 12288000 or 11289600 */

	/*

	 * The clock flow is

	 *

	 * [CPG] = cout => [FSI_DIV] = audio => [FSI] => [codec]

	 *

	 * But, it needs to find best match of CPG and FSI_DIV

	 * combination, since it is difficult to generate correct

	 * frequency of audio clock from ick clock only.

	 * Because ick is created from its parent clock.

	 *

	 * target	= rate x [512/256/128/64]fs

	 * cout		= round(target x adjustment)

	 * actual	= cout / adjustment (by FSI-DIV) ~= target

	 * audio	= actual

 max clock = 100MHz */

 cout/actual audio clock */

 find best frequency */

/*

 *		pio data transfer handler

		/*

		 * stream mode

		 * see

		 *	fsi_pio_push_init()

 normal mode */

 samples in FSI fifo */

 ALSA free samples space */

 ALSA residue samples */

 FSI fifo free samples space */

	/*

	 * we can use 16bit stream mode

	 * when "playback" and "16bit data"

	 * and platform allows "stream mode"

	 * see

	 *	fsi_pio_push16()

	/*

	 * always 24bit bus, package back when "capture"

 clear irq status */

/*

 *		dma data transfer handler

	/*

	 * 24bit data : 24bit bus / package in back

	 * 16bit data : 16bit bus / stream mode

	/*

	 * FIXME

	 *

	 * In DMAEngine case, codec and FSI cannot be started simultaneously

	 * since FSI is using the scheduler work queue.

	 * Therefore, in capture case, probably FSI FIFO will have got

	 * overflow error in this point.

	 * in that case, DMA cannot start transfer until error was cleared.

 switch to PIO handler */

 probe again */

/*

 *		dai ops

 get on-chip RAM capacity */

	/*

	 * The maximum number of sample data varies depending

	 * on the number of channels selected for the format.

	 *

	 * FIFOs are used in 4-channel units in 3-channel mode

	 * and in 8-channel units in 5- to 7-channel mode

	 * meaning that more FIFOs than the required size of DPRAM

	 * are used.

	 *

	 * ex) if 256 words of DP-RAM is connected

	 * 1 channel:  256 (256 x 1 = 256)

	 * 2 channels: 128 (128 x 2 = 256)

	 * 3 channels:  64 ( 64 x 3 = 192)

	 * 4 channels:  64 ( 64 x 4 = 256)

	 * 5 channels:  32 ( 32 x 5 = 160)

	 * 6 channels:  32 ( 32 x 6 = 192)

	 * 7 channels:  32 ( 32 x 7 = 224)

	 * 8 channels:  32 ( 32 x 8 = 256)

	/*

	 * set interrupt generation factor

	 * clear FIFO

 clock setting */

 clock inversion (CKG2) */

 spdif ? */

	/*

	 * get bus settings

 irq clear */

 fifo init */

 start master clock */

 stop master clock */

 set clock master audio interface */

 cpu is master */

 set clock inversion */

 set format */

/*

 * Select below from Sound Card, not auto

 *	SND_SOC_DAIFMT_CBC_CFC

 *	SND_SOC_DAIFMT_CBP_CFP

/*

 *		pcm ops

/*

 *		snd_soc_component

/*

 *		alsa struct

/*

 *		platform function

 default PIO */

 default PIO */

 Interrupt */

 Interrupt */

 master setting */

 FSI A setting */

 FSI B setting */

 SPDX-License-Identifier: GPL-2.0



 SH7760 ("camelot") DMABRG audio DMA unit support



 Copyright (C) 2007 Manuel Lauss <mano@roarinelk.homelinux.net>



 The SH7760 DMABRG provides 4 dma channels (2x rec, 2x play), which

 trigger an interrupt when one half of the programmed transfer size

 has been xmitted.



 FIXME: little-endian only for now

 registers and bits */

 receiver/transmitter data alignment */

 DMABRG audio channel control reg MMIO */

 ID of first DMABRG IRQ for this unit */

/*

 * set a minimum of 16kb per period, to avoid interrupt-"storm" and

 * resulting skipping. In general, the bigger the minimum size, the

 * better for overall system performance. (The SH7760 is a puny CPU

 * with a slow SDRAM interface and poor internal bus bandwidth,

 * *especially* when the LCDC is active).  The minimum for the DMAC

 * is 8 bytes; 16kbytes are enough to get skip-free playback of a

 * 44kHz/16bit/stereo MP3 on a lightly loaded system, and maintain

 * reasonable responsiveness in MPlayer.

 DMABRG buffer half/full events */

 start DMABRG engine: XFER start, auto-addr-reload */

 forcibly terminate data transmission */

 start DMABRG engine: recv start, auto-reload */

 forcibly terminate data receiver */

	/* cannot use the DMABRG pointer register: under load, by the

	 * time ALSA comes around to read the register, it is already

	 * far ahead (or worse, already done with the fragment) of the

	 * position at the time the IRQ was triggered, which results in

	 * fast-playback sound in my test application (ScummVM)

	/* dont use SNDRV_DMA_TYPE_DEV, since it will oops the SH kernel

	 * in MMAP mode (i.e. aplay -M)

 SPDX-License-Identifier: GPL-2.0



 Renesas RZ/G2L ASoC Serial Sound Interface (SSIF-2) Driver



 Copyright (C) 2021 Renesas Electronics Corp.

 Copyright (C) 2019 Chris Brandt.



 REGISTER OFFSET */

 SSI REGISTER BITS */

 Pre allocated buffers sizes */

 8k-44.1kHz */

 sample capacity of SSI FIFO */

 The address for the next DMA descriptor */

 for keeping track of periods transferred */

 current frame position in the buffer */

 0=stopped, 1=running */

	/*

	 * The SSI supports full-duplex transmission and reception.

	 * However, if an error occurs, channel reset (both transmission

	 * and reception reset) is required.

	 * So it is better to use as half-duplex (playing and recording

	 * should be done on separate channels).

 clock */

 LR clock polarity (SSICR.LRCKP) */

 Bit clock polarity (SSICR.BCKP) */

 fifo init */

 System Word Length */

 Clear AUCKE so we can set MST */

 Continue to output LRCK pin even when idle */

 Clock setting */

 Determine the clock divider */

 try to find an match */

	/*

	 * DWL: Data Word Length = 16 bits

	 * SWL: System Word Length = 32 bits

 FIFO interrupt thresholds */

 enable IRQ */

 Clear all error flags */

 Disable TX/RX */

 Cancel all remaining DMA transactions */

 Disable irqs */

 Clear all error flags */

 Wait for idle */

 Hold FIFOs in reset */

 ring buffer */

 frames left in this period */

 Samples in RX FIFO */

 Only read full frames at a time */

 not enough samples yet */

 calculate new buffer index */

 Note, only supports 16-bit samples */

	/*

	 * If we finished this period, but there are more samples in

	 * the RX FIFO, call this function again

 frames left in this period */

 Only add full frames at a time */

 no space to send anything right now */

 calculate new buffer index */

 Note, only supports 16-bit samples */

 Left over TX/RX interrupt */

 error or idle */

 Error handling */

 You must reset (stop/restart) after each interrupt */

 Clear all flags */

 Add/remove more data */

 Resume */

 tx data empty */

 rx data full */

		/*

		 * Stream is ending, so do not queue up any more DMA

		 * transfers otherwise we play partial sound clips

		 * because we can't shut off the DMA quick enough.

 Always transfer 1 period */

 DMA physical address and size */

 Update DMA pointer */

 Start DMA */

 Note that next DMA transaction has probably already started */

 Queue up another DMA transaction */

 Soft Reset */

 Fallback to pio */

 For DMA, queue up multiple DMA descriptors */

	/*

	 * set clock polarity

	 *

	 * "normal" BCLK = Signal is available at rising edge of BCLK

	 * "normal" FSYNC = (I2S) Left ch starts with falling FSYNC edge

 only i2s support */

 Detect DMA support */

 Error Interrupt */

 Tx and Rx interrupts (pio only) */

 Sentinel */},

 SPDX-License-Identifier: GPL-2.0



 Serial Sound Interface (I2S) support for SH7760/SH7780



 Copyright (c) 2007 Manuel Lauss <mano@roarinelk.homelinux.net>



 dont forget to set IPSEL/OMSEL register bits (in your board code) to

 enable SSI output pins!

/*

 * LIMITATIONS:

 *	The SSI unit has only one physical data line, so full duplex is

 *	impossible.  This can be remedied  on the  SH7760 by  using the

 *	other SSI unit for recording; however the SH7780 has only 1 SSI

 *	unit, and its pins are shared with the AC97 unit,  among others.

 *

 * FEATURES:

 *	The SSI features "compressed mode": in this mode it continuously

 *	streams PCM data over the I2S lines and uses LRCK as a handshake

 *	signal.  Can be used to send compressed data (AC3/DTS) to a DSP.

 *	The number of bits sent over the wire in a frame can be adjusted

 *	and can be independent from the actual sample bit depth. This is

 *	useful to support TDM mode codecs like the AD1939 which have a

 *	fixed TDM slot size, regardless of sample resolution.

 bitclock master bit */

 wordselect master bit */

 I2Sclock polarity */

 LRCK polarity */

 i2s alignment (msb/lsb) */

 fifo data alignment */

 delay data by 1 i2sclk */

 clock gating in burst mode */

 bitclock divider */

 SSI mute */

 compressed mode */

 transmit/receive select */

 enable SSI */

/*

 * track usage of the SSI; it is simplex-only so prevent attempts of

 * concurrent playback + capture. FIXME: any locking required?

 direction (send/receive) */

 transmit */

 channels */

 DATA WORD LENGTH (DWL): databits in audio sample */

	/*

	 * SYSTEM WORD LENGTH: size in bits of half a frame over the I2S

	 * wires. This is usually bits_per_sample x channels/2;  i.e. in

	 * Stereo mode  the SWL equals DWL.  SWL can  be bigger than the

	 * product of (channels_per_slot x samplebits), e.g.  for codecs

	 * like the AD1939 which  only accept 32bit wide TDM slots.  For

	 * "standard" I2S operation we set SWL = chans / 2 * DWL here.

	 * Waiting for ASoC to get TDM support ;-)

 these are padded by the SSI */

ssicr |= CR_PDTA;*/ 
/*

 * This divider is used to generate the SSI_SCK (I2S bitclock) from the

 * clock at the HAC_BIT_CLK ("oversampling clock") pin.

 sample data at low clkedge */

 word select starts low */

/* the SSI depends on an external clocksource (at HAC_BIT_CLK) even in

 * Master mode,  so really this is board specific;  the SSI can do any

 * rate with the right bitclk and divider settings.

 the SSI can do 8-32 bit samples, with 8 possible channels */

 SPDX-License-Identifier: GPL-2.0+



 siu_pcm.c - ALSA driver for Renesas SH7343, SH7722 SIU peripheral.



 Copyright (C) 2009-2010 Guennadi Liakhovetski <g.liakhovetski@gmx.de>

 Copyright (C) 2006 Carlos Munoz <carlos@kenati.com>

 Read in progress */

 Write in progress */

 transfersize is number of u32 dma transfers per period */

 output FIFO disable */

 during stmwrite clear */

 Current period in buffer */

 during stmwrite flag set */

 DMA transfer start */

 Update completed period count */

 Notify alsa: a period is done */

 only output FIFO enable */

 only input FIFO enable */

 DMA transfer start */

 Capture */

 Current period in buffer */

 during stmread flag set */

 input FIFO disable */

 during stmread flag clear */

 Playback / Capture */

 Get DMA channel */

 We only support buffers that are multiples of the period */

/*

 * So far only resolution of one period is supported, subject to extending the

 * dmangine API

	/*

	 * ptr is the offset into the buffer where the dma is currently at. We

	 * check if the dma buffer has just wrapped.

 card->dev == socdev->dev, see snd_soc_new_pcms() */

 pdev->id selects between SIUA and SIUB */

	/*

	 * While the siu has 2 ports, only one port can be on at a time (only 1

	 * SPB). So far all the boards using the siu had only one of the ports

	 * wired to a codec. To simplify things, we only register one port with

	 * alsa. In case both ports are needed, it should be changed here

 IO works */

 SPDX-License-Identifier: GPL-2.0



 Renesas R-Car DVC support



 Copyright (C) 2014 Renesas Solutions Corp.

 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>

/*

 * Playback Volume

 *	amixer set "DVC Out" 100%

 *

 * Capture Volume

 *	amixer set "DVC In" 100%

 *

 * Playback Mute

 *	amixer set "DVC Out Mute" on

 *

 * Capture Mute

 *	amixer set "DVC In Mute" on

 *

 * Volume Ramp

 *	amixer set "DVC Out Ramp Up Rate"   "0.125 dB/64 steps"

 *	amixer set "DVC Out Ramp Down Rate" "0.125 dB/512 steps"

 *	amixer set "DVC Out Ramp" on

 *	aplay xxx.wav &

 *	amixer set "DVC Out"  80%  // Volume Down

 *	amixer set "DVC Out" 100%  // Volume Up

 Ramp Enable */

 Ramp Rate Up */

 Ramp Rate Down */

 Enable Ramp */

 Enable Digital Volume */

 Enable Digital Volume, Zero Cross Mute Mode */

 Enable Ramp */

		/*

		 * FIXME !!

		 * use scale-downed Digital Volume

		 * as Volume Ramp

		 * 7F FFFF -> 3FF

 Initialize operation */

 General Information */

 Volume Ramp Parameter */

 Digital Volume Function Parameter */

 cancel operation */

 Disable DVC Register access */

 Zero Cross Mute Function */

 Volume Ramp Function */

 add DVC_VRWTR here */

 Digital Volume Function Parameter */

 Enable DVC Register access */

 Volume */

 Mute */

 Ramp */

 This driver doesn't support Gen1 at this point */

 not used is not error */

 SPDX-License-Identifier: GPL-2.0



 Renesas R-Car Gen1 SRU/SSI support



 Copyright (C) 2013 Renesas Solutions Corp.

 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>

/*

 * #define DEBUG

 *

 * you can also add below in

 * ${LINUX}/drivers/base/regmap/regmap.c

 * for regmap debug

 *

 * #define LOG_DEVICE "xxxx.rcar_sound"

 RSND_BASE_MAX base */

 RSND_REG_MAX base */

 single address mapping */

 multi address mapping */

/*

 *		basic function

 RSND_BASE_MAX base */

 RSND_REG_MAX base */

/*

 *		Gen2

 FIXME: it needs SSI_MODE2/3 in the future */

/*

 *		Gen1

/*

 *		Gen

 SPDX-License-Identifier: GPL-2.0



 mix.c



 Copyright (c) 2015 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>

/*

 *		    CTUn	MIXn

 *		    +------+	+------+

 * [SRC3 / SRC6] -> |CTU n0| ->	[MIX n0| ->

 * [SRC4 / SRC9] -> |CTU n1| ->	[MIX n1| ->

 * [SRC0 / SRC1] -> |CTU n2| ->	[MIX n2| ->

 * [SRC2 / SRC5] -> |CTU n3| ->	[MIX n3| ->

 *		    +------+	+------+

 *

 * ex)

 *	DAI0 : playback = <&src0 &ctu02 &mix0 &dvc0 &ssi0>;

 *	DAI1 : playback = <&src2 &ctu03 &mix0 &dvc0 &ssi0>;

 *

 * MIX Volume

 *	amixer set "MIX",0  100%  // DAI0 Volume

 *	amixer set "MIX",1  100%  // DAI1 Volume

 *

 * Volume Ramp

 *	amixer set "MIX Ramp Up Rate"   "0.125 dB/1 step"

 *	amixer set "MIX Ramp Down Rate" "4 dB/1 step"

 *	amixer set "MIX Ramp" on

 *	aplay xxx.wav &

 *	amixer set "MIX",0  80%  // DAI0 Volume Down

 *	amixer set "MIX",1 100%  // DAI1 Volume Up

 MDBAR */

 MDBBR */

 MDBCR */

 MDBDR */

 Ramp Enable */

 Ramp Rate Up */

 Ramp Rate Down */

 General Information */

 volume step */

 common volume parameter */

 Disable MIX dB setting */

 common volume parameter */

 Enable MIX dB setting */

 MDBAR */

 MDBBR */

 MDBCR */

 MDBDR */

 Volume */

 Ramp */

 This driver doesn't support Gen1 at this point */

 not used is not error */

 SPDX-License-Identifier: GPL-2.0



 Renesas R-Car Audio DMAC support



 Copyright (C) 2015 Renesas Electronics Corp.

 Copyright (c) 2015 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>

/*

 * Audio DMAC peri peri register

 PDMACHCR */

 for DEBUG */

/*

 *		Audio DMAC

	/*

	 * DMAEngine release uses mutex lock.

	 * Thus, it shouldn't be called under spinlock.

	 * Let's call it under prepare

 maybe suspended */

	/*

	 * DMAEngine request uses mutex lock.

	 * Thus, it shouldn't be called under spinlock.

	 * Let's call it under prepare

	/*

	 * in case of monaural data writing or reading through Audio-DMAC

	 * data is always in Left Justified format, so both src and dst

	 * DMA Bus width need to be set equal to physical data width.

 It should call of_node_put(), since, it is rsnd_xxx_of_node() */

 try to get DMAEngine channel */

 Let's follow when -EPROBE_DEFER case */

		/*

		 * DMA failed. try to PIO mode

		 * see

		 *	rsnd_ssi_fallback()

		 *	rsnd_rdai_continuance_probe()

	/*

	 * use it for IPMMU if needed

	 * see

	 *	rsnd_preallocate_pages()

/*

 *		Audio DMAC peri peri

 SSI00 ~ SSI07 */

 SSI10 ~ SSI17 */

 SSI20 ~ SSI27 */

 SSI30 ~ SSI37 */

 SSI40 ~ SSI47 */

 SSI5 */

 SSI6 */

 SSI7 */

 SSI8 */

 SSI90 ~ SSI97 */

 SCU_SRCI0 */

 SCU_SRCI1 */

 SCU_SRCI2 */

 SCU_SRCI3 */

 SCU_SRCI4 */

 SCU_SRCI5 */

 SCU_SRCI6 */

 SCU_SRCI7 */

 SCU_SRCI8 */

 SCU_SRCI9 */

 SCU_CMD0 */

 SCU_CMD1 */

 use non-prohibited SRS number as error */

 SSI00 */

/*

 *		Common DMAC Interface

/*

 *	DMA read/write register offset

 *

 *	RSND_xxx_I_N	for Audio DMAC input

 *	RSND_xxx_O_N	for Audio DMAC output

 *	RSND_xxx_I_P	for Audio DMAC peri peri input

 *	RSND_xxx_O_P	for Audio DMAC peri peri output

 *

 *	ex) R-Car H2 case

 *	      mod        / DMAC in    / DMAC out   / DMAC PP in / DMAC pp out

 *	SSI : 0xec541000 / 0xec241008 / 0xec24100c

 *	SSIU: 0xec541000 / 0xec100000 / 0xec100000 / 0xec400000 / 0xec400000

 *	SCU : 0xec500000 / 0xec000000 / 0xec004000 / 0xec300000 / 0xec304000

 *	CMD : 0xec500000 /            / 0xec008000                0xec308000

 SRC */

 Capture */

 Playback */

 SSI */

 Capture */

 Playback */

 SSIU */

 Capture */

 Playback */

	/*

	 * FIXME

	 *

	 * We can't support SSI9-4/5/6/7, because its address is

	 * out of calculation rule

 it shouldn't happen */

 use SSIU or SSI ? */

	/*

	 * gen1 uses default DMA addr

 +Memory */

	/*

	 * It should use "rcar_sound,ssiu" on DT.

	 * But, we need to keep compatibility for old version.

	 *

	 * If it has "rcar_sound.ssiu", it will be used.

	 * If not, "rcar_sound.ssi" will be used.

	 * see

	 *	rsnd_ssiu_dma_req()

	 *	rsnd_ssi_dma_req()

 use SSIU */

 keep compatible, use SSI */

	/*

	 * [S] -*-> [E]

	 * [S] -*-> SRC -o-> [E]

	 * [S] -*-> SRC -> DVC -o-> [E]

	 * [S] -*-> SRC -> CTU -> MIX -> DVC -o-> [E]

	 *

	 * playback	[S] = mem

	 *		[E] = SSI

	 *

	 * capture	[S] = SSI

	 *		[E] = mem

	 *

	 * -*->		Audio DMAC

	 * -o->		Audio DMAC peri peri

	/*

	 *		| SSI | SRC |

	 * -------------+-----+-----+

	 *  is_play	|  o  |  *  |

	 * !is_play	|  *  |  o  |

	/*

	 * DMA failed. try to PIO mode

	 * see

	 *	rsnd_ssi_fallback()

	 *	rsnd_rdai_continuance_probe()

 for Gen2 or later */

 for Gen1, overwrite */

	/*

	 * for Gen1

	/*

	 * for Gen2 or later

 it will be PIO mode */

 dummy mem mod for debug */

 SPDX-License-Identifier: GPL-2.0



 Renesas R-Car SSIU support



 Copyright (c) 2015 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>

 for BUSIF0 - BUSIF7 */

 SSI_MODE */

/*

 *	SSI	Gen2		Gen3

 *	0	BUSIF0-3	BUSIF0-7

 *	1	BUSIF0-3	BUSIF0-7

 *	2	BUSIF0-3	BUSIF0-7

 *	3	BUSIF0		BUSIF0-7

 *	4	BUSIF0		BUSIF0-7

 *	5	BUSIF0		BUSIF0

 *	6	BUSIF0		BUSIF0

 *	7	BUSIF0		BUSIF0

 *	8	BUSIF0		BUSIF0

 *	9	BUSIF0-3	BUSIF0-7

 *	total	22		52

 enable busif buffer over/under run interrupt. */

 clear status */

	/*

	 * SSI_MODE0

	/*

	 * SSI_MODE1 / SSI_MODE2

	 *

	 * FIXME

	 * sharing/multi with SSI0 are mainly supported

		/*

		 * Multi SSI

		 *

		 * set synchronized bit here

 SSI4 is synchronized with SSI3 */

 SSI012 are synchronized */

 SSI0129 are synchronized */

 SSI1 is sharing pin with SSI0 */

 SSI2 is sharing pin with SSI0 */

 SSI4 is sharing pin with SSI3 */

 SSI9 is sharing pin with SSI0 */

	/*

	 * Enable busif buffer over/under run interrupt.

	 * It will be handled from ssi.c

	 * see

	 *	__rsnd_ssi_interrupt()

 disable busif buffer over/under run interrupt. */

	/*

	 * TDM Extend/Split Mode

	 * see

	 *	rsnd_ssi_config_init()

 output all same SSI as default */

 see rsnd_ssiu_probe() */

 see rsnd_ssiu_probe() */

	/*

	 * It should use "rcar_sound,ssiu" on DT.

	 * But, we need to keep compatibility for old version.

	 *

	 * If it has "rcar_sound.ssiu", it will be used.

	 * If not, "rcar_sound.ssi" will be used.

	 * see

	 *	rsnd_ssi_dma_req()

	 *	rsnd_dma_of_path()

 select BUSIF0 */

 use rcar_sound,ssiu if exist */

 Keep DT compatibility */

	/*

	 * Keep DT compatibility.

	 * if it has "rcar_sound,ssiu", use it.

	 * if not, use "rcar_sound,ssi"

	 * see

	 *	rsnd_ssiu_bufsif_to_id()

 Keep compatibility */

			/*

			 * see

			 *	rsnd_ssiu_get_id()

			 *	rsnd_ssiu_get_id_sub()

 SPDX-License-Identifier: GPL-2.0



 Renesas R-Car CMD support



 Copyright (C) 2015 Renesas Solutions Corp.

 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>

		/*

		 * it is assuming that integrater is well understanding about

		 * data path. Here doesn't check impossible connection,

		 * like src2 + src5

 This driver doesn't support Gen1 at this point */

 same number as DVC */

 SPDX-License-Identifier: GPL-2.0



 


 Copyright (c) 2021 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>



	> mount -t debugfs none /sys/kernel/debug

	> cd /sys/kernel/debug/asoc/rcar-sound/ec500000.sound/rdai{N}/

	> cat playback/xxx

	> cat capture/xxx



 adg is out of mods */

 Gen1 is not supported */

		/*

		 * created debugfs will be automatically

		 * removed, nothing to do for _remove.

		 * see

		 *	soc_cleanup_component_debugfs()

 CONFIG_DEBUG_FS */

 SPDX-License-Identifier: GPL-2.0



 Helper routines for R-Car sound ADG.



  Copyright (C) 2013  Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>

 RBGA */

 RBGB */

 0000: CLKA */

 0001: CLKB */

 0010: CLKC */

 0011: RBGA */

 0100: RBGB */

 fixme */

			/*

			 * step of 0_0000 / 0_0001 / 0_1101

			 * are out of order

 default = SSI WS */

	/*

	 * SSI 8 is not connected to ADG.

	 * it works with SSI 7

	/*

	 * find suitable clock from

	 * AUDIO_CLKA/AUDIO_CLKB/AUDIO_CLKC/AUDIO_CLKI.

	/*

	 * find divided clock from BRGA/BRGB

			/*

			 * We shouldn't use clk_get_rate() under

			 * atomic context. Let's keep it when

			 * rsnd_adg_clk_enable() was called

 default 1/6 */

 default 1/6 */

	/*

	 * ADG supports BRRA/BRRB output only

	 * this means all clkout0/1/2/3 will be same rate

	/*

	 * This driver is assuming that AUDIO_CLKA/AUDIO_CLKB/AUDIO_CLKC

	 * have 44.1kHz or 48kHz base clocks for now.

	 *

	 * SSI itself can divide parent clock by 1/1 - 1/16

	 * see

	 *	rsnd_adg_ssi_clk_try_start()

	 *	rsnd_ssi_master_clk_start()

 not used */

 RBGA */

 RBGB */

	/*

	 * ADG supports BRRA/BRRB output only.

	 * this means all clkout0/1/2/3 will be * same rate

	/*

	 * for clkout

	/*

	 * for clkout0/1/2/3

	/*

	 * Actual CLKOUT will be exchanged in rsnd_adg_ssi_clk_try_start()

	 * by BRGCKR::BRGCKR_31

 It should be called after rsnd_adg_clk_disable() */

 SPDX-License-Identifier: GPL-2.0



 Renesas R-Car SRU/SCU/SSIU/SSI support



 Copyright (C) 2013 Renesas Solutions Corp.

 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>



 Based on fsi.c

 Kuninori Morimoto <morimoto.kuninori@renesas.com>

/*

 * Renesas R-Car sound device structure

 *

 * Gen1

 *

 * SRU		: Sound Routing Unit

 *  - SRC	: Sampling Rate Converter

 *  - CMD

 *    - CTU	: Channel Count Conversion Unit

 *    - MIX	: Mixer

 *    - DVC	: Digital Volume and Mute Function

 *  - SSI	: Serial Sound Interface

 *

 * Gen2

 *

 * SCU		: Sampling Rate Converter Unit

 *  - SRC	: Sampling Rate Converter

 *  - CMD

 *   - CTU	: Channel Count Conversion Unit

 *   - MIX	: Mixer

 *   - DVC	: Digital Volume and Mute Function

 * SSIU		: Serial Sound Interface Unit

 *  - SSI	: Serial Sound Interface

/*

 *	driver data Image

 *

 * rsnd_priv

 *   |

 *   | ** this depends on Gen1/Gen2

 *   |

 *   +- gen

 *   |

 *   | ** these depend on data path

 *   | ** gen and platform data control it

 *   |

 *   +- rdai[0]

 *   |   |		 sru     ssiu      ssi

 *   |   +- playback -> [mod] -> [mod] -> [mod] -> ...

 *   |   |

 *   |   |		 sru     ssiu      ssi

 *   |   +- capture  -> [mod] -> [mod] -> [mod] -> ...

 *   |

 *   +- rdai[1]

 *   |   |		 sru     ssiu      ssi

 *   |   +- playback -> [mod] -> [mod] -> [mod] -> ...

 *   |   |

 *   |   |		 sru     ssiu      ssi

 *   |   +- capture  -> [mod] -> [mod] -> [mod] -> ...

 *   ...

 *   |

 *   | ** these control ssi

 *   |

 *   +- ssi

 *   |  |

 *   |  +- ssi[0]

 *   |  +- ssi[1]

 *   |  +- ssi[2]

 *   |  ...

 *   |

 *   | ** these control src

 *   |

 *   +- src

 *      |

 *      +- src[0]

 *      +- src[1]

 *      +- src[2]

 *      ...

 *

 *

 * for_each_rsnd_dai(xx, priv, xx)

 *  rdai[0] => rdai[1] => rdai[2] => ...

 *

 * for_each_rsnd_mod(xx, rdai, xx)

 *  [mod] => [mod] => [mod] => ...

 *

 * rsnd_dai_call(xxx, fn )

 *  [mod]->fn() -> [mod]->fn() -> [mod]->fn()...

 *

 Special Handling */

/*

 *	rsnd_mod functions

	/*

	 * Let's use same char to avoid pointlessness memory

	 * Thus, rsnd_mod_name() should be used immediately

	 * Don't keep pointer

 see rsnd_dai_stream_init/quit() */

	/*

	 * params will be added when refine

	 * see

	 *	__rsnd_soc_hw_rule_rate()

	 *	__rsnd_soc_hw_rule_channels()

		/*

		 * !! Note !!

		 *

		 * converted_chan will be used for CTU,

		 * or TDM Split mode.

		 * User shouldn't use CTU with TDM Split mode.

 TDM Extend Mode needs 8ch */

 Use Multi SSI */

/*

 *	ADINR function

/*

 *	DALIGN function

	/*

	 * *Hardware* L/R and *Software* L/R are inverted for 16bit data.

	 *	    31..16 15...0

	 *	HW: [L ch] [R ch]

	 *	SW: [R ch] [L ch]

	 * We need to care about inversion timing to control

	 * Playback/Capture correctly.

	 * The point is [DVC] needs *Hardware* L/R, [MEM] needs *Software* L/R

	 *

	 * sL/R : software L/R

	 * hL/R : hardware L/R

	 * (*)  : conversion timing

	 *

	 * Playback

	 *	     sL/R (*) hL/R     hL/R     hL/R      hL/R     hL/R

	 *	[MEM] -> [SRC] -> [DVC] -> [CMD] -> [SSIU] -> [SSI] -> codec

	 *

	 * Capture

	 *	     hL/R     hL/R      hL/R     hL/R     hL/R (*) sL/R

	 *	codec -> [SSI] -> [SSIU] -> [SRC] -> [DVC] -> [CMD] -> [MEM]

 Target mod needs inverted DALIGN when 16bit */

	/*

	 * This is needed for 24bit data

	 * We need to shift 8bit

	 *

	 * Linux 24bit data is located as 0x00******

	 * HW    24bit data is located as 0x******00

	 *

 shift to Left */

 8bit */

 shift to Right */

 8bit */

/*

 *	rsnd_dai functions

 CAPTURE */

 PLAYBACK */

 no status update */

 underflow case */

/*

 *	rsnd_soc_dai functions

	/*

	 * this function should be called...

	 *

	 * - if rsnd_dai_pointer_update() returns true

	 * - without spin lock

 set clock master for audio interface */

 cpu is master */

 set format */

 set clock inversion */

 use default */

 TDM Split Mode */

 TDM Extend Mode */

	/*

	 * possible sampling rate limitation is same as

	 * 2ch if it supports multi ssi

	 * and same as 8ch if TDM 6ch (see rsnd_ssi_config_init())

	/*

	 * possible sampling rate limitation is same as

	 * 2ch if it supports multi ssi

	 * and same as 8ch if TDM 6ch (see rsnd_ssi_config_init())

	/*

	 * Channel Limitation

	 * It depends on Platform design

	/*

	 * Sampling Rate / Channel Limitation

	 * It depends on Clock Master Mode

	/*

	 * call rsnd_dai_call without spinlock

	/*

	 * 1st Priority

	 *

	 * Well tested formats.

	 * Select below from Sound Card, not auto

	 *	SND_SOC_DAIFMT_CBC_CFC

	 *	SND_SOC_DAIFMT_CBP_CFP

	/*

	 * 2nd Priority

	 *

	 * Supported, but not well tested

	/*

	 * This driver assumes that it is TDM Split mode

	 * if it includes ssiu node

 HDMI0 */

 HDMI1 */

	/*

	 * rsnd is assuming each device nodes are sequential numbering,

	 * but some of them are not.

	 * This function adjusts index for it.

	 *

	 * ex)

	 * Normal case,		special case

	 *	ssi-0

	 *	ssi-1

	 *	ssi-2

	 *	ssi-3		ssi-3

	 *	ssi-4		ssi-4

	 *	...

	 *

	 * assume Max 64 node

	/*

	 * parse both previous dai (= rcar_sound,dai), and

	 * graph dai (= ports/port)

	/*

	 * use Audio-DMAC dev if we can use IPMMU

	 * see

	 *	rsnd_dmaen_attach()

 default 2ch */

 default 1lane */

 default 32bit width */

 should have symmetric_rate if pin sharing */

	/*

	 * parse all dai

/*

 *		pcm ops

	/*

	 * rsnd assumes that it might be used under DPCM if user want to use

	 * channel / rate convert. Then, rsnd should be FE.

	 * And then, this function will be called *after* BE settings.

	 * this means, each BE already has fixuped hw_params.

	 * see

	 *	dpcm_fe_dai_hw_params()

	 *	dpcm_be_dai_hw_params()

			/*

			 * SRC supports convert rates from params_rate(hw_params)/k_down

			 * to params_rate(hw_params)*k_up, where k_up is always 6, and

			 * k_down depends on number of channels and SRC unit.

			 * So all SRC units can upsample audio up to 6 times regardless

			 * its number of channels. And all SRC units can downsample

			 * 2 channel audio up to 6 times too.

			/*

			 * SRC0 can downsample 4, 6 and 8 channel audio up to 4 times.

			 * SRC1, SRC3 and SRC4 can downsample 4 channel audio

			 * up to 4 times.

			 * SRC1, SRC3 and SRC4 can downsample 6 and 8 channel audio

			 * no more than twice.

 Other SRC units do not support more than 2 channels */

			/*

			 * TBD: Max SRC input and output rates also depend on number

			 * of channels and SRC unit:

			 * SRC1, SRC3 and SRC4 do not support more than 128kHz

			 * for 6 channel and 96kHz for 8 channel audio.

			 * Perhaps this function should return EINVAL if the input or

			 * the output rate exceeds the limitation.

/*

 *		snd_kcontrol

 00000 */

 00001 */

 00010 */

 00011 */

 00100 */

 00101 */

 00110 */

 00111 */

 01000 */

 01001 */

 01010 = VOLUME_RAMP_MAX_MIX */

 01011 */

 01100 */

 01101 */

 01110 */

 01111 */

 10000 */

 10001 */

 10010 */

 10011 */

 10100 */

 10101 */

 10110 */

 10111 = VOLUME_RAMP_MAX_DVC */

	/*

	 * 1) Avoid duplicate register for DVC with MIX case

	 * 2) Allow duplicate register for MIX

	 * 3) re-register if card was rebinded

/*

 *		snd_soc_component

		/*

		 * Fallback to PIO mode

		/*

		 * call "remove" for SSI/SRC/DVC

		 * SSI will be switch to PIO mode if it was DMA mode

		 * see

		 *	rsnd_dma_init()

		 *	rsnd_ssi_fallback()

		/*

		 * remove all mod from io

		 * and, re connect ssi

		/*

		 * fallback

		/*

		 * retry to "probe".

		 * DAI has SSI which is PIO mode only now.

/*

 *	rsnd probe

	/*

	 *	init priv data

	/*

	 *	init each module

	/*

	 *	asoc register

	/*

	 * adg is very special mod which can't use rsnd_dai_call(remove),

	 * and it registers ADG clock on probe.

	 * It should be unregister if probe failed.

	 * Mainly it is assuming -EPROBE_DEFER case

 SPDX-License-Identifier: GPL-2.0



 Renesas R-Car SRC support



 Copyright (C) 2013 Renesas Solutions Corp.

 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>

/*

 * You can use Synchronous Sampling Rate Convert (if no DVC)

 *

 *	amixer set "SRC Out Rate" on

 *	aplay xxx.wav &

 *	amixer set "SRC Out Rate" 96000 // convert rate to 96000Hz

 *	amixer set "SRC Out Rate" 22050 // convert rate to 22050Hz

/*

 * you can enable below define if you don't need

 * SSI interrupt status debug message when debugging

 * see rsnd_print_irq_status()

 *

 * #define RSND_DEBUG_NO_IRQ_STATUS 1

 SCU_SYSTEM_STATUS0/1 */

 sync convert enable */

 sync convert */

/*

 *		image of SRC (Sampling Rate Converter)

 *

 * 96kHz   <-> +-----+	48kHz	+-----+	 48kHz	+-------+

 * 48kHz   <-> | SRC | <------>	| SSI |	<----->	| codec |

 * 44.1kHz <-> +-----+		+-----+		+-------+

 * ...

 *

	/*

	 * Playback

	 * runtime_rate -> [SRC] -> convert_rate

	 *

	 * Capture

	 * convert_rate -> [SRC] -> runtime_rate

	/*

	 * return convert rate if SRC is used,

	 * otherwise, return runtime->rate as usual

 6 - 1/6 */

 6 - 1/4 */

 6 - 1/3 */

 6 - 1/2 */

 6 - 2/3 */

 6 - 1   */

 6 - 1/6 */

 6 - 1/4 */

 6 - 1/3 */

 6 - 1/2 */

 6 - 2/3 */

 6 - 1   */

 6 - 1/6 */

 6 - 1/4 */

 6 - 1/3 */

 6 - 1/2 */

 6 - 2/3 */

 6 - 1   */

 1 to 2 */

 1 to 8 */

 1 to 8 */

 1 to 8 */

 1 to 8 */

 1 to 8 */

 1 to 2 */

 1 to 4 */

 1 to 4 */

 1 to 8 */

 1 to 8 */

 1 to 8 */

 1 to 2 */

 1 to 2 */

 1 to 2 */

 1 to 2 */

 1 to 2 */

 1 to 2 */

 6 - 1/6 are very enough ratio for SRC_BSDSR */

	/*

	 * SRC_ADINR

	/*

	 * SRC_IFSCR / SRC_IFSVR

	/*

	 * SRC_SRCCR / SRC_ROUTE_MODE0

	/*

	 * SRC_BSDSR / SRC_BSISR

	 *

	 * see

	 *	Combination of Register Setting Related to

	 *	FSO/FSI Ratio and Channel, Latency

	/*

	 * E3 need to overwrite

 BUSIF_MODE */

 initialize */

 cancel initialize */

	/*

	 * IRQ is not supported on non-DT

	 * see

	 *	rsnd_src_probe_()

	/*

	 * WORKAROUND

	 *

	 * ignore over flow error when rsnd_src_sync_is_enabled()

	/*

	 * WORKAROUND

	 *

	 * ignore over flow error when rsnd_src_sync_is_enabled()

	/*

	 * WORKAROUND

	 *

	 * Enable SRC output if you want to use sync convert together with DVC

 reset sync convert_rate */

 reset sync convert_rate */

 ignore all cases if not working */

		/*

		 * IRQ is not supported on non-DT

		 * see

		 *	rsnd_src_irq()

	/*

	 * enable SRC sync convert if possible

	/*

	 * It can't use SRC Synchronous convert

	 * when Capture if it uses CMD

	/*

	 * enable sync convert

 This driver doesn't support Gen1 at this point */

 not used is not error */

 SPDX-License-Identifier: GPL-2.0



 ctu.c



 Copyright (c) 2015 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>

/*

 * User needs to setup CTU by amixer, and its settings are

 * based on below registers

 *

 * CTUn_CPMDR : amixser set "CTU Pass"

 * CTUn_SV0xR : amixser set "CTU SV0"

 * CTUn_SV1xR : amixser set "CTU SV1"

 * CTUn_SV2xR : amixser set "CTU SV2"

 * CTUn_SV3xR : amixser set "CTU SV3"

 *

 * [CTU Pass]

 * 0000: default

 * 0001: Connect input data of channel 0

 * 0010: Connect input data of channel 1

 * 0011: Connect input data of channel 2

 * 0100: Connect input data of channel 3

 * 0101: Connect input data of channel 4

 * 0110: Connect input data of channel 5

 * 0111: Connect input data of channel 6

 * 1000: Connect input data of channel 7

 * 1001: Connect calculated data by scale values of matrix row 0

 * 1010: Connect calculated data by scale values of matrix row 1

 * 1011: Connect calculated data by scale values of matrix row 2

 * 1100: Connect calculated data by scale values of matrix row 3

 *

 * [CTU SVx]

 * [Output0] = [SV00, SV01, SV02, SV03, SV04, SV05, SV06, SV07]

 * [Output1] = [SV10, SV11, SV12, SV13, SV14, SV15, SV16, SV17]

 * [Output2] = [SV20, SV21, SV22, SV23, SV24, SV25, SV26, SV27]

 * [Output3] = [SV30, SV31, SV32, SV33, SV34, SV35, SV36, SV37]

 * [Output4] = [ 0,   0,    0,    0,    0,    0,    0,    0   ]

 * [Output5] = [ 0,   0,    0,    0,    0,    0,    0,    0   ]

 * [Output6] = [ 0,   0,    0,    0,    0,    0,    0,    0   ]

 * [Output7] = [ 0,   0,    0,    0,    0,    0,    0,    0   ]

 *

 * [SVxx]

 * Plus					Minus

 * value	time		dB	value		time		dB

 * -----------------------------------------------------------------------

 * H'7F_FFFF	2		6	H'80_0000	2		6

 * ...

 * H'40_0000	1		0	H'C0_0000	1		0

 * ...

 * H'00_0001	2.38 x 10^-7	-132

 * H'00_0000	0		Mute	H'FF_FFFF	2.38 x 10^-7	-132

 *

 *

 * Ex) Input ch -> Output ch

 *	1ch     ->  0ch

 *	0ch     ->  1ch

 *

 *	amixer set "CTU Reset" on

 *	amixer set "CTU Pass" 9,10

 *	amixer set "CTU SV0" 0,4194304

 *	amixer set "CTU SV1" 4194304,0

 * or

 *	amixer set "CTU Reset" on

 *	amixer set "CTU Pass" 2,1

 CTU Pass */

 ROW0 */

 ROW1 */

 ROW2 */

 ROW3 */

 Reset */

	/*

	 * ctu00: -> 0, ctu01: -> 0, ctu02: -> 0, ctu03: -> 0

	 * ctu10: -> 1, ctu11: -> 1, ctu12: -> 1, ctu13: -> 1

	/*

	 * ctu00: -> 0, ctu01: -> 1, ctu02: -> 2, ctu03: -> 3

	 * ctu10: -> 0, ctu11: -> 1, ctu12: -> 2, ctu13: -> 3

 This driver doesn't support Gen1 at this point */

 not used is not error */

		/*

		 * CTU00, CTU01, CTU02, CTU03 => CTU0

		 * CTU10, CTU11, CTU12, CTU13 => CTU1

 SPDX-License-Identifier: GPL-2.0



 Renesas R-Car SSIU/SSI support



 Copyright (C) 2013 Renesas Solutions Corp.

 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>



 Based on fsi.c

 Kuninori Morimoto <morimoto.kuninori@renesas.com>

/*

 * you can enable below define if you don't need

 * SSI interrupt status debug message when debugging

 * see rsnd_print_irq_status()

 *

 * #define RSND_DEBUG_NO_IRQ_STATUS 1

/*

 * SSICR

 Fixed */

 DMA Enable */

 Underflow Interrupt Enable */

 Overflow Interrupt Enable */

 Idle Mode Interrupt Enable */

 Data Interrupt Enable */

 Channels */

 Channels */

 Channels */

 Data Word Length mask */

 Data Word Length */

 Data Word Length */

 Data Word Length */

 Data Word Length */

 Data Word Length */

 Data Word Length */

 Data Word Length */

/*

 * System word length

 R/W System Word Length */

 R/W System Word Length */

 R/W System Word Length */

 Serial Bit Clock Direction */

 Serial WS Direction */

 Serial Bit Clock Polarity */

 Serial WS Polarity */

 Serial Data Alignment */

 Parallel Data Alignment */

 Serial Data Delay */

 Serial Clock Division Ratio */

 Transmit/Receive Mode Select */

 SSI Module Enable */

/*

 * SSISR

 Underflow Error Interrupt Status */

 Overflow Error Interrupt Status */

 Idle Mode Interrupt Status */

 Data Interrupt Status Flag */

/*

 * SSIWSR

 WS Continue Function */

 WS Mode */

 for PIO */

 flags */

 SSI+DMA without BUSIF */

		/*

		 * It will set SSIWSR.CONT here, but SSICR.CKDV = 000

		 * with it is not allowed. (SSIWSR.WS_MODE with

		 * SSICR.CKDV = 000 is not allowed either).

		 * Skip it. See SSICR.CKDV

	/*

	 * SSI clock will be output contiguously

	 * by below settings.

	 * This means, rsnd_ssi_master_clk_start()

	 * and rsnd_ssi_register_setup() are necessary

	 * for SSI parent

	 *

	 * SSICR  : FORCE, SCKD, SWSD

	 * SSIWSR : CONT

	/*

	 * TDM Mode

	 * see

	 *	rsnd_ssiu_init_gen2()

	/*

	 * We shouldn't exchange SWSP after running.

	 * This means, parent needs to care it.

		/*

		 * The SWL and DWL bits in SSICR should be fixed at 32-bit

		 * setting when TDM split mode.

		 * see datasheet

		 *	Operation :: TDM Format Split Function (TDM Split Mode)

 over/under run */

 DMA : enable DMA */

 PIO : enable Data interrupt */

/*

 *	SSI mod common functions

 clear error status */

	/*

	 * EN will be set via SSIU :: SSI_CONTROL

	 * if Multi channel mode

	/*

	 * EN is for data output.

	 * SSI parent EN is not needed.

	/*

	 * disable all IRQ,

	 * Playback: Wait all data was sent

	 * Capture:  It might not receave data. Do nothing

	/* In multi-SSI mode, stop is performed by setting ssi0129 in

	 * SSI_CONTROL to 0 (in rsnd_ssio_stop_gen2). Do nothing here.

	/*

	 * disable SSI,

	 * and, wait idle state

 disabled all */

 ignore all cases if not working */

 PIO only */

 DMA only */

	/*

	 * SSIP (= SSI parent) needs to be special, otherwise,

	 * 2nd SSI might doesn't start. see also rsnd_mod_call()

	 *

	 * We can't include parent SSI status on SSI, because we don't know

	 * how many SSI requests parent SSI. Thus, it is localed on "io" now.

	 * ex) trouble case

	 *	Playback: SSI0

	 *	Capture : SSI1 (needs SSI0)

	 *

	 * 1) start Capture  ->	SSI0/SSI1 are started.

	 * 2) start Playback ->	SSI0 doesn't work, because it is already

	 *			marked as "started" on 1)

	 *

	 * OTOH, using each mod's status is good for MUX case.

	 * It doesn't need to start in 2nd start

	 * ex)

	 *	IO-0: SRC0 -> CTU1 -+-> MUX -> DVC -> SSIU -> SSI0

	 *			    |

	 *	IO-1: SRC1 -> CTU2 -+

	 *

	 * 1) start IO-0 ->	start SSI0

	 * 2) start IO-1 ->	SSI0 doesn't need to start, because it is

	 *			already started on 1)

/*

 *		SSI PIO

	/*

	 * rsnd_rdai_is_clk_master() will be enabled after set_fmt,

	 * and, pcm_new will be called after it.

	 * This function reuse pcm_new at this point.

	/*

	 * SSIP/SSIU/IRQ are not needed on

	 * SSI Multi secondaries

	/*

	 * It can't judge ssi parent at this point

	 * see rsnd_ssi_pcm_new()

	/*

	 * SSI might be called again as PIO fallback

	 * It is easy to manual handling for IRQ request/free

	 *

	 * OTOH, this function might be called many times if platform is

	 * using MIX. It needs xxx_attach() many times on xxx_probe().

	 * Because of it, we can't control .probe/.remove calling count by

	 * mod->status.

	 * But it don't need to call request_irq() many times.

	 * Let's control it by RSND_SSI_PROBED flag.

 Do nothing if non SSI (= SSI parent, multi SSI) mod */

 PIO will request IRQ again */

/*

 *	SSI PIO functions

	/*

	 * 8/16/32 data can be assesse to TDR/RDR register

	 * directly as 32bit data

	 * see rsnd_ssi_init()

	/*

	 * SSIP/SSIU/IRQ/DMA are not needed on

	 * SSI Multi secondaries

 SSI probe might be called many times in MUX multi path */

	/*

	 * fallback to PIO

	 *

	 * SSI .probe might be called again.

	 * see

	 *	rsnd_rdai_continuance_probe()

	/*

	 * It should use "rcar_sound,ssiu" on DT.

	 * But, we need to keep compatibility for old version.

	 *

	 * If it has "rcar_sound.ssiu", it will be used.

	 * If not, "rcar_sound.ssi" will be used.

	 * see

	 *	rsnd_ssiu_dma_req()

	 *	rsnd_dma_of_path()

/*

 *		ssi mod function

 try SSI -> SSIM1 -> SSIM2 -> SSIM3 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SoC audio for HTC Magician

 *

 * Copyright (c) 2006 Philipp Zabel <philipp.zabel@gmail.com>

 *

 * based on spitz.c,

 * Authors: Liam Girdwood <lrg@slimlogic.co.uk>

 *          Richard Purdie <richard@openedhand.com>

 check the jack status at stream startup */

/*

 * Magician uses SSP port for playback.

 set codec DAI configuration */

 set cpu DAI configuration */

 set audio clock as clock source */

/*

 * Magician uses I2S for capture.

 set codec DAI configuration */

 set cpu DAI configuration */

 set the I2S system clock as output */

 magician machine dapm widgets */

 magician machine audio_map */

 Headphone connected to VOUTL, VOUTR */

 Speaker connected to VOUTL, VOUTR */

 Mics are connected to VINM */

 magician digital audio interface glue - connects codec <--> CPU */

 magician audio machine driver */

/*

 * FIXME: move into magician board file once merged into the pxa tree

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * tosa.c  --  SoC audio for Tosa

 *

 * Copyright 2005 Wolfson Microelectronics PLC.

 * Copyright 2005 Openedhand Ltd.

 *

 * Authors: Liam Girdwood <lrg@slimlogic.co.uk>

 *          Richard Purdie <richard@openedhand.com>

 *

 * GPIO's

 *  1 - Jack Insertion

 *  5 - Hookswitch (headset answer/hang up switch)

 set up jack connection */

 check the jack status at stream startup */

 tosa dapm event handlers */

 tosa machine dapm widgets */

 tosa audio map */

 headphone connected to HPOUTL, HPOUTR */

 ext speaker connected to LOUT2, ROUT2 */

 internal mic is connected to mic1, mic2 differential - with bias */

 headset is connected to HPOUTR, and LINEINR with bias */

 Module information */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * linux/sound/soc/pxa/mmp-pcm.c

 *

 * Copyright (C) 2011 Marvell International Ltd.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * e740-wm9705.c  --  SoC audio for e740

 *

 * Copyright 2007 (c) Ian Molton <spyro@f2s.com>

 Module information */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * poodle.c  --  SoC audio for Poodle

 *

 * Copyright 2005 Wolfson Microelectronics PLC.

 * Copyright 2005 Openedhand Ltd.

 *

 * Authors: Liam Girdwood <lrg@slimlogic.co.uk>

 *          Richard Purdie <richard@openedhand.com>

 audio clock in Hz - rounded from 12.235MHz */

 set up jack connection */

 set = unmute headphone */

 set the endpoints to their new connection states */

 signal a DAPM event */

 check the jack status at stream startup */

 we need to unmute the HP at shutdown as the mute burns power on poodle */

 set = unmute headphone */

 set the codec system clock for DAC and ADC */

 set the I2S system clock as input (unused) */

 poodle machine dapm widgets */

 Corgi machine connections to the codec pins */

 headphone connected to LHPOUT1, RHPOUT1 */

 speaker connected to LOUT, ROUT */

 poodle digital audio interface glue - connects codec <--> CPU */

 poodle audio machine driver */

 should we mute HP at startup - burning power ?*/

 Module information */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * zylonite.c  --  SoC audio for Zylonite

 *

 * Copyright 2008 Wolfson Microelectronics PLC.

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

/*

 * There is a physical switch SW15 on the board which changes the MCLK

 * for the WM9713 between the standard AC97 master clock and the

 * output of the CLK_POUT signal from the PXA.

 Currently supported audio map */

 Headphone output connected to HPL/HPR */

 On-board earpiece */

 Headphone mic */

 On-board mic */

 Multiactor differentially connected over SPKL/SPKR */

	/* Only support ratios that we can generate neatly from the AC97

	 * based master clock - in particular, this excludes 44.1kHz.

	 * In most applications the voice DAC will be used for telephony

	 * data so multiples of 8kHz will be the common case.

 Don't support OSS emulation */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * pxa2xx-i2s.c  --  ALSA Soc Audio Layer

 *

 * Copyright 2005 Wolfson Microelectronics PLC.

 * Author: Liam Girdwood

 *         lrg@slimlogic.co.uk

/*

 * I2S Controller Register and Bit Definitions

 Global Control Register */

 Serial Audio I 2 S/MSB-Justified Control Register */

 Serial Audio I 2 S/MSB-Justified Interface and FIFO Status Register */

 Serial Audio Interrupt Mask Register */

 Serial Audio Interrupt Clear Register */

 Audio Clock Divider Register. */

 Serial Audio Data Register (TX and RX FIFO access Register). */

 Rx FIFO Interrupt or DMA Trigger Threshold */

 Tx FIFO Interrupt or DMA Trigger Threshold */

 FIFO Select for EFWR Special Function */

 Enable EFWR Function  */

 FIFO, i2s Register Reset */

 Bit Clock Direction */

 Enable I2S Link */

 Enable Loopback */

 Disable Replaying Function */

 Disable Recording Function */

 Specify Alternate Mode */

 Controller Status */

 Rx FIFO Overrun */

 Tx FIFO Underrun */

 Rx FIFO Service Request */

 Tx FIFO Service Request */

 I2S Busy */

 Rx FIFO Not Empty */

 Tx FIFO Not Empty */

 Clear Rx FIFO Overrun Interrupt */

 Clear Tx FIFO Underrun Interrupt */

 Enable Rx FIFO Overrun Condition Interrupt */

 Enable Tx FIFO Underrun Condition Interrupt */

 Enable Rx FIFO Service Interrupt */

 Enable Tx FIFO Service Interrupt */

 wait for I2S controller to be ready */

 flush the Rx FIFO */

 interface format */

 is port used by another stream */

 not in manual and possibly slightly inaccurate */

 store registers */

 deactivate link */

	/*

	 * PXA Developer's Manual:

	 * If SACR0[ENB] is toggled in the middle of a normal operation,

	 * the SACR0[RST] bit must also be set and cleared to reset all

	 * I2S controller registers.

 Make sure RPL and REC are disabled */

 Along with FIFO servicing */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/sound/arm/pxa2xx-pcm.c -- ALSA PCM interface for the Intel PXA2xx chip

 *

 * Author:	Nicolas Pitre

 * Created:	Nov 30, 2004

 * Copyright:	(C) 2004 MontaVista Software, Inc.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * e800-wm9712.c  --  SoC audio for e800

 *

 * Copyright 2007 (c) Ian Molton <spyro@f2s.com>

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/sound/soc/pxa/z2.c

 *

 * SoC Audio driver for Aeronix Zipit Z2

 *

 * Copyright (C) 2009 Ken McGuire <kenm@desertweyr.com>

 * Copyright (C) 2010 Marek Vasut <marek.vasut@gmail.com>

 set the codec system clock for DAC and ADC */

 set the I2S system clock as input (unused) */

 Headset jack detection DAPM pins */

 Headset jack detection gpios */

 z2 machine dapm widgets */

 headset is a mic and mono headphone */

 Z2 machine audio_map */

 headphone connected to LOUT1, ROUT1 */

 ext speaker connected to LOUT2, ROUT2  */

 mic is connected to R input 2 - with bias */

/*

 * Logic for a wm8750 as connected on a Z2 Device

 Jack detection API stuff */

 z2 digital audio interface glue - connects codec <--> CPU */

 z2 audio machine driver */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * spitz.c  --  SoC audio for Sharp SL-Cxx00 models Spitz, Borzoi and Akita

 *

 * Copyright 2005 Wolfson Microelectronics PLC.

 * Copyright 2005 Openedhand Ltd.

 *

 * Authors: Liam Girdwood <lrg@slimlogic.co.uk>

 *          Richard Purdie <richard@openedhand.com>

 audio clock in Hz - rounded from 12.235MHz */

 set up jack connection */

 enable and unmute hp jack, disable mic bias */

 enable mic jack and bias, mute hp */

 enable line jack, disable mic bias and mute hp */

 enable and unmute headset jack enable mic bias, mute L hp */

 jack removed, everything off */

 check the jack status at stream startup */

 set the codec system clock for DAC and ADC */

 set the I2S system clock as input (unused) */

 spitz machine dapm widgets */

 headset is a mic and mono headphone */

 Spitz machine audio_map */

 headphone connected to LOUT1, ROUT1 */

 headset connected to ROUT1 and LINPUT1 with bias (def below) */

 ext speaker connected to LOUT2, ROUT2  */

 mic is connected to input 1 - with bias */

 line is connected to input 1 - no bias */

 spitz digital audio interface glue - connects codec <--> CPU */

 spitz audio machine driver */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SoC audio for HP iPAQ hx4700

 *

 * Copyright (c) 2009 Philipp Zabel

 Headphones jack detection DAPM pin */

 disable speaker when hp jack is inserted */

 Headphones jack detection GPIO */

/*

 * iPAQ hx4700 uses I2S for capture and playback.

 set the I2S system clock as output */

	/* inform codec driver about clock freq *

 hx4700 machine dapm widgets */

 hx4700 machine audio_map */

 Headphone connected to LOUT, ROUT */

 Speaker connected to MOUT2 */

 Microphone connected to MICIN */

/*

 * Logic for a ak4641 as connected on a HP iPAQ hx4700

 Jack detection API stuff */

 hx4700 digital audio interface glue - connects codec <--> CPU */

 hx4700 audio machine driver */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SoC audio driver for EM-X270, eXeda and CM-X300

 *

 * Copyright 2007, 2009 CompuLab, Ltd.

 *

 * Author: Mike Rapoport <mike@compulab.co.il>

 *

 * Copied from tosa.c:

 * Copyright 2005 Wolfson Microelectronics PLC.

 * Copyright 2005 Openedhand Ltd.

 *

 * Authors: Liam Girdwood <lrg@slimlogic.co.uk>

 *          Richard Purdie <richard@openedhand.com>

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * e750-wm9705.c  --  SoC audio for e750

 *

 * Copyright 2007 (c) Ian Molton <spyro@f2s.com>

 use ops to check startup state */

 Module information */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * pxa-ssp.c  --  ALSA Soc Audio Layer

 *

 * Copyright 2005,2008 Wolfson Microelectronics PLC.

 * Author: Liam Girdwood

 *         Mark Brown <broonie@opensource.wolfsonmicro.com>

 *

 * TODO:

 *  o Test network mode for > 16bit sample size

/*

 * SSP audio private data

/*

 * ssp_set_clkdiv - set SSP clock divider

 * @div: serial clock rate divider

 2..512 */

 1..4096 */

/*

 * Set the SSP ports SYSCLK.

		/*

		 * For DT based boards, if an extclk is given, use it

		 * here and configure PXA_SSP_CLK_EXT.

 Internal PLL is fixed */

	/* The SSP clock must be disabled when changing SSP clock mode

/*

 * Configure the PLL frequency pxa27x and (afaik - pxa320 only)

 Disable */

		/* PXA3xx has a clock ditherer which can be used to generate

		 * a wider range of frequencies - calculate a value for it.

/*

 * Set the active slots in TDM/Network mode

 set slot width */

 enable network mode */

 set number of active slots */

 set active slot mask */

/*

 * Tristate the SSP DAI lines

 Settings will be applied in hw_params() */

/*

 * Set up the SSP DAI format.

 * The SSP Port must be inactive before calling this function as the

 * physical interface format is changed.

 check if we need to change anything at all */

 reset port settings */

 See hw_params() */

	/* Since we are configuring the timings for the format by hand

	 * we have to defer some things until hw_params() where we

	 * know parameters like the sample size.

/*

 * Set the SSP audio DMA parameters and sample size.

 * Can be called multiple times by oss emulation.

	/* Network mode with one active slot (ttsa == 1) can be used

	 * to force 16-bit frame width on the wire (for S16_LE), even

	 * with two channels. Use 16-bit DMA transfers for this case.

 we can only change the settings if the port is not in use */

 clear selected SSP bits */

 bit size */

		/*

		 * If we were able to generate the bclk directly,

		 * all is fine. Otherwise, look up the closest rate

		 * from the table and also set the dividers.

 The values in the table are for 16 bits */

		/*

		 * For setups with external clocking, the PLL and its diviers

		 * are not active. Instead, the SCR bits in SSCR0 can be used

		 * to divide the clock.

			/* This is a special case where the bitclk is 64fs

			 * and we're not dealing with 2*32 bits of audio

			 * samples.

			 *

			 * The SSP values used for that are all found out by

			 * trying and failing a lot; some of the registers

			 * needed for that mode are only available on PXA3xx.

			/* The frame width is the width the LRCLK is

			 * asserted for; the delay is expressed in

			 * half cycle units.  We need the extra cycle

			 * because the data starts clocking out one BCLK

			 * after LRCLK changes polarity.

	/* When we use a network mode, we always require TDM slots

	 * - complain loudly and fail if they've not been set up yet.

 Module information */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * linux/sound/soc/pxa/brownstone.c

 *

 * Copyright (C) 2011 Marvell International Ltd.

 set wm8994 sysclk */

 machine stream operations */

 audio machine driver */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Handles the Mitac mioa701 SoC system

 *

 * Copyright (C) 2008 Robert Jarzmik

 *

 * This is a little schema of the sound interconnections :

 *

 *    Sagem X200                 Wolfson WM9713

 *    +--------+             +-------------------+      Rear Speaker

 *    |        |             |                   |           /-+

 *    |        +--->----->---+MONOIN         SPKL+--->----+-+  |

 *    |  GSM   |             |                   |        | |  |

 *    |        +--->----->---+PCBEEP         SPKR+--->----+-+  |

 *    |  CHIP  |             |                   |           \-+

 *    |        +---<-----<---+MONO               |

 *    |        |             |                   |      Front Speaker

 *    +--------+             |                   |           /-+

 *                           |                HPL+--->----+-+  |

 *                           |                   |        | |  |

 *                           |               OUT3+--->----+-+  |

 *                           |                   |           \-+

 *                           |                   |

 *                           |                   |     Front Micro

 *                           |                   |         +

 *                           |               MIC1+-----<--+o+

 *                           |                   |         +

 *                           +-------------------+        ---

 Use GPIO8 for rear speaker amplifier */

 mioa701 machine dapm widgets */

 Call Mic */

 Headset Mic */

 GSM Module */

 headphone connected to HPL, HPR */

 front speaker connected to HPL, OUT3 */

 rear speaker connected to SPKL, SPKR */

 Prepare GPIO8 for rear speaker amplifier */

 Prepare MIC input */

 Module information */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * corgi.c  --  SoC audio for Corgi

 *

 * Copyright 2005 Wolfson Microelectronics PLC.

 * Copyright 2005 Openedhand Ltd.

 *

 * Authors: Liam Girdwood <lrg@slimlogic.co.uk>

 *          Richard Purdie <richard@openedhand.com>

 audio clock in Hz - rounded from 12.235MHz */

 set up jack connection */

 set = unmute headphone */

 reset = mute headphone */

 signal a DAPM event */

 check the jack status at stream startup */

 we need to unmute the HP at shutdown as the mute burns power on corgi */

 set = unmute headphone */

 set the codec system clock for DAC and ADC */

 set the I2S system clock as input (unused) */

 corgi machine dapm widgets */

 Corgi machine audio map (connections to the codec pins) */

 headset Jack  - in = micin, out = LHPOUT*/

 headphone connected to LHPOUT1, RHPOUT1 */

 speaker connected to LOUT, ROUT */

 mic is connected to MICIN (via right channel of headphone jack) */

 Same as the above but no mic bias for line signals */

 corgi digital audio interface glue - connects codec <--> CPU */

 corgi audio machine driver */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

 set the I2S system clock as input (unused) */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/sound/pxa2xx-ac97.c -- AC97 support for the Intel PXA2xx chip.

 *

 * Author:	Nicolas Pitre

 * Created:	Dec 02, 2004

 * Copyright:	MontaVista Software Inc.

/*

 * There is only 1 physical AC97 interface for pxa2xx, but it

 * has extra fifo's that can be used for aux DACs and ADCs.

	/* Punt most of the init to the SoC probe; we may need the machine

	 * driver to do interesting things with the clocking to get us up

	 * and running.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/sound/soc/pxa/palm27x.c

 *

 * SoC Audio driver for Palm T|X, T5 and LifeDrive

 *

 * based on tosa.c

 *

 * Copyright (C) 2008 Marek Vasut <marek.vasut@gmail.com>

 Headphones jack detection DAPM pins */

 Headphones jack detection gpios */

 gpio is set on per-platform basis */

 Palm27x machine dapm widgets */

 PalmTX audio map */

 headphone connected to HPOUTL, HPOUTR */

 ext speaker connected to ROUT2, LOUT2 */

 mic connected to MIC1 */

 Jack detection API stuff */

 Module information */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * linux/sound/soc/pxa/ttc_dkb.c

 *

 * Copyright (C) 2012 Marvell International Ltd.

 ttc machine dapm widgets */

 ttc machine audio map */

 Headset jack detection */

 headphone, microphone detection & headset short detection */

 ttc/td-dkb digital audio interface glue - connects codec <--> CPU */

 ttc/td audio machine driver */

 Module information */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * linux/sound/soc/pxa/mmp-sspa.c

 * Base on pxa2xx-ssp.c

 *

 * Copyright (C) 2011 Marvell International Ltd.

/*

 * SSPA audio private data

/*

 * Set the SSP ports SYSCLK.

 not support yet */

/*

 * Set up the sspa dai format.

 reset port settings */

	/* Since we are configuring the timings for the format by hand

	 * we have to defer some things until hw_params() where we

	 * know parameters like the sample size.

/*

 * Set the SSPA audio DMA parameters and sample size.

 * Can be called multiple times by oss emulation.

		/*

		 * whatever playback or capture, must enable rx.

		 * this is a hw issue, so need check if rx has been

		 * enabled or not; if has been enabled by another

		 * stream, do not enable again.

 have no capture stream, disable rx port */

 we can only change the settings if the port is not in use */

	/*

	 * FIXME: hw issue, for the tx serial port,

	 * can not config the master/slave mode;

	 * so must clean this bit.

	 * The master/slave mode has been set in the

	 * rx port.

 You know, these addresses are actually ignored. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Xtfpga I2S controller driver

 *

 * Copyright (c) 2014 Cadence Design Systems Inc.

/*

 * I2S controller operation:

 *

 * Enabling TX: output 1 period of zeros (starting with left channel)

 * and then queued data.

 *

 * Level status and interrupt: whenever FIFO level is below FIFO trigger,

 * level status is 1 and an IRQ is asserted (if enabled).

 *

 * Underrun status and interrupt: whenever FIFO is empty, underrun status

 * is 1 and an IRQ is asserted (if enabled).

	/* current playback substream. NULL if not playing.

	 *

	 * Access to that field is synchronized between the interrupt handler

	 * and userspace through RCU.

	 *

	 * Interrupt handler (threaded part) does PIO on substream data in RCU

	 * read-side critical section. Trigger callback sets and clears the

	 * pointer when the playback is started and stopped with

	 * rcu_assign_pointer. When userspace is about to free the playback

	 * stream in the pcm_close callback it synchronizes with the interrupt

	 * handler by means of synchronize_rcu call.

 next frame index in the sample buffer */

	/* current fifo level estimate.

	 * Doesn't have to be perfectly accurate, but must be not less than

	 * the actual FIFO level in order to avoid stall on push attempt.

 FIFO level at which level interrupt occurs */

 maximal FIFO level */

/* Generate functions that do PIO from TX DMA area to FIFO for all supported

 * stream formats.

 * Functions will be called xtfpga_pcm_tx_<channels>x<sample bits>, e.g.

 * xtfpga_pcm_tx_2x16 for 16-bit stereo.

 *

 * FIFO consists of 32-bit words, one word per channel, always 2 channels.

 * If I2S interface is configured with smaller sample resolution, only

 * the LSB of each word is used.

		/* After the push the level IRQ is still asserted,

		 * means FIFO level is below tx_fifo_low. Estimate

		 * it as tx_fifo_low.

	/* Update FIFO level estimate in accordance with interrupt status

	 * register.

		/* The FIFO isn't empty, but is below tx_fifo_low. Estimate

		 * it as tx_fifo_low.

	/* Refill FIFO, update allowed IRQ reasons, enable IRQ if FIFO is

	 * not empty.

	/* ratio field of the config register controls MCLK->I2S clock

	 * derivation: I2S clock = MCLK / (2 * (ratio + 2)).

	 *

	 * So with MCLK = 256 * sample rate ratio is 0 for 32 bit stereo

	 * and 2 for 16 bit stereo.

 period_size * 2: FIFO always gets 2 samples per frame */

 PCM */

 SPDX-License-Identifier: GPL-2.0



 dmaengine.c - Samsung dmaengine wrapper



 Author: Mark Brown <broonie@linaro.org>

 Copyright 2013 Linaro

 SPDX-License-Identifier: GPL-2.0



 Copyright (C) 2017 Samsung Electronics Co., Ltd.

 Spinlock protecting fields below */

	/*

	 *  We add 2 to the rclk_freq value in order to avoid too low clock

	 *  frequency values due to the EPLL output frequency not being exact

	 *  multiple of the audio sampling rate.

 DAPM routes for backward compatibility with old DTS */

 Primary FE <-> BE link */

 BE <-> CODECs link */

 Secondary FE <-> BE link */

	/*

	 * For backwards compatibility create the secondary CPU DAI link only

	 * if there are 2 CPU DAI entries in the cpu sound-dai property in DT.

	 * Also add required DAPM routes not available in old DTS.

 Set capture capability only for boards with the MAX98090 CODEC */

 SPDX-License-Identifier: GPL-2.0+



 h1940_uda1380.c - ALSA SoC Audio Layer



 Copyright (c) 2010 Arnaud Patard <arnaud.patard@rtp-net.org>

 Copyright (c) 2010 Vasily Khoruzhick <anarsoul@gmail.com>



 Based on version from Arnaud Patard <arnaud.patard@rtp-net.org>

 select clock source */

 set MCLK division for sample rate */

 set BCLK division for sample rate */

 set prescaler division for sample rate */

 h1940 machine dapm widgets */

 h1940 machine audio_map */

 headphone connected to VOUTLHP, VOUTRHP */

 ext speaker connected to VOUTL, VOUTR  */

 mic is connected to VINM */

 s3c24xx digital audio interface glue - connects codec <--> CPU */

 Module information */

 SPDX-License-Identifier: GPL-2.0+



 Copyright (c) 2014, Insignal Co., Ltd.



  Author: Claude <claude@insginal.co.kr>

 Ensure AIF1CLK is >= 3 MHz for optimal performance */

	/*

	 * We add 1 to the frequency value to ensure proper EPLL setting

	 * for each audio sampling rate (see epll_24mhz_tbl in drivers/clk/

	 * samsung/clk-exynos5250.c for list of available EPLL rates).

	 * The CODEC uses clk API and the value will be rounded hence the MCLK1

	 * clock's frequency will still be exact multiple of the sample rate.

 SPDX-License-Identifier: GPL-2.0



 ASoC machine driver for Snow boards

 In the multi-codec case codec_dais 0 is MAX98095 and 1 is HDMI. */

 Set the MCLK rate for the codec */

 Try new DT bindings with HDMI support first. */

 Update card-name if provided through DT, else use default name */

 SPDX-License-Identifier: GPL-2.0+



 s3c24xx-i2s.c  --  ALSA Soc Audio Layer



 (c) 2006 Wolfson Microelectronics PLC.

 Graeme Gregory graeme.gregory@wolfsonmicro.com or linux@wolfsonmicro.com



 Copyright 2004-2005 Simtec Electronics

	http:
	Ben Dooks <ben@simtec.co.uk>

		/* note, we have to disable the FIFOs otherwise bad things

		 * seem to happen when the DMA stops. According to the

		 * Samsung supplied kernel, this should allow the DMA

		 * engine and FIFOs to reset. If this isn't allowed, the

		 * DMA engine will simply freeze randomly.

		/* note, we have to disable the FIFOs otherwise bad things

		 * seem to happen when the DMA stops. According to the

		 * Samsung supplied kernel, this should allow the DMA

		 * engine and FIFOs to reset. If this isn't allowed, the

		 * DMA engine will simply freeze randomly.

/*

 * Wait for the LR signal to allow synchronisation to the L/R clock

 * from the codec. May only be needed for slave mode.

 5ms */

/*

 * Check whether CPU is the master or slave

/*

 * Set S3C24xx I2S DAI format

 Working copies of register */

/*

 * Set S3C24xx Clock source

/*

 * Set S3C24xx Clock dividers

/*

 * To avoid duplicating clock code, allow machine driver to

 * get the clockrate from here.

 Module information */

 SPDX-License-Identifier: GPL-2.0+



 Tobermory audio support



 Copyright 2011 Wolfson Microelectronics

 Headset jack detection DAPM pins */

 SPDX-License-Identifier: GPL-2.0+



 Speyside audio support



 Copyright 2011 Wolfson Microelectronics

 Headset jack detection DAPM pins */

 Default the headphone selection to active high */

 Re-run DAPM to make sure we're using the correct mic bias */

 At any time the WM9081 is active it will have this clock */

 SPDX-License-Identifier: GPL-2.0



 Copyright 2007,2008 Simtec Electronics



 Based on sound/soc/pxa/spitz.c

	Copyright 2005 Wolfson Microelectronics PLC.

	Copyright 2005 Openedhand Ltd.

 set the codec system clock for DAC and ADC */

 jive audio machine driver */

 SPDX-License-Identifier: GPL-2.0+



 rx1950.c - ALSA SoC Audio Layer



 Copyright (c) 2010 Vasily Khoruzhick <anarsoul@gmail.com>



 Based on smdk2440.c and magician.c



 Authors: Graeme Gregory graeme.gregory@wolfsonmicro.com

          Philipp Zabel <philipp.zabel@gmail.com>

          Denis Grigoriev <dgreenday@gmail.com>

          Vasily Khoruzhick <anarsoul@gmail.com>

 s3c24xx digital audio interface glue - connects codec <--> CPU */

 rx1950 machine dapm widgets */

 rx1950 machine audio_map */

 headphone connected to VOUTLHP, VOUTRHP */

 ext speaker connected to VOUTL, VOUTR  */

 mic is connected to VINM */

 select clock source */

 set MCLK division for sample rate */

 set BCLK division for sample rate */

 set prescaler division for sample rate */

 configure some gpios */

 Module information */

 SPDX-License-Identifier: GPL-2.0+



 ALSA Soc Audio Layer - I2S core for newer Samsung SoCs.



 Copyright (c) 2006 Wolfson Microelectronics PLC.

	Graeme Gregory graeme.gregory@wolfsonmicro.com

	linux@wolfsonmicro.com



 Copyright (c) 2008, 2007, 2004-2005 Simtec Electronics

	http:
	Ben Dooks <ben@simtec.co.uk>

 Turn on or off the transmission path. */

 do nothing, we are in the right mode */

		/* Note, we do not have any indication that the FIFO problems

		 * tha the S3C2410/2440 had apply here, so we should be able

		 * to disable the DMA and TX without resetting the FIFOS.

 do nothing, we are in the right mode */

 See txctrl notes on FIFOs. */

/*

 * Wait for the LR signal to allow synchronisation to the L/R clock

 * from the codec. May only be needed for slave mode.

/*

 * Set S3C2412 I2S DAI format

 Working copies of register */

 Sample size */

 Error if controller doesn't have the CDCLKCON bit */

 On start, ensure that the FIFOs are cleared and reset. */

 clear again, just in case */

/*

 * Set S3C2412 Clock dividers

 default table of all avaialable root fs divisors */

 record our i2s structure for later use in the callbacks */

	/* Mark ourselves as in TXRX mode so we can run through our cleanup

 Allow overriding by (for example) IISv4 */

 SPDX-License-Identifier: GPL-2.0+



 neo1973_wm8753.c - SoC audio for Openmoko Neo1973 and Freerunner devices



 Copyright 2007 Openmoko Inc

 Author: Graeme Gregory <graeme@openmoko.org>

 Copyright 2007 Wolfson Microelectronics PLC.

 Author: Graeme Gregory

         graeme.gregory@wolfsonmicro.com or linux@wolfsonmicro.com

 Copyright 2009 Wolfson Microelectronics

 set the codec system clock for DAC and ADC */

 set MCLK division for sample rate */

 set codec BCLK division for sample rate */

 set prescaler division for sample rate */

 codec PLL input is PCLK/4 */

 disable the PLL */

/*

 * Neo1973 WM8753 HiFi DAI opserations.

 2.048 MHz */

 set the codec system clock for DAC and ADC */

 set codec PCM division for sample rate */

 configure and enable PLL for 12.288MHz output */

 disable the PLL */

 Connections to the GSM Module */

 Connections to Headset */

 Call Mic */

 Connect the ALC pins */

 Connections to the amp */

 Call Speaker */

 set endpoints to default off mode */

 allow audio paths from the GSM modem to run during suspend */

 Hifi Playback - for similatious use with voice below */

 Voice via BT */

 Module information */

 SPDX-License-Identifier: GPL-2.0+



 Copyright (c) 2009 Samsung Electronics Co. Ltd

 Author: Jaswinder Singh <jassisinghbrar@gmail.com>

/*

 * Default CFG switch settings to use this driver:

 *

 *   SMDK6410: Set CFG1 1-3 Off, CFG2 1-4 On

 SMDK has a 12MHZ crystal attached to WM8580 */

	/* The Fvco for WM8580 PLLs must fall within [90,100]MHz.

	 * This criterion can't be met if we request PLL output

	 * as {8000x256, 64000x256, 11025x256}Hz.

	 * As a wayout, we rather change rfs to a minimum value that

	 * results in (params_rate(params) * rfs), and itself, acceptable

	 * to both - the CODEC and the CPU.

 Set WM8580 to drive MCLK from its PLLA */

/*

 * SMDK WM8580 DAI operations.

 SMDK Playback widgets */

 SMDK-PAIFTX connections */

 MicIn feeds AINL */

 LineIn feeds AINL/R */

 Front Left/Right are fed VOUT1L/R */

 Center/Sub are fed VOUT2L/R */

 Rear Left/Right are fed VOUT3L/R */

	/* Enabling the microphone requires the fitting of a 0R

	 * resistor to connect the line from the microphone jack.

 Primary Playback i/f */

 Primary Capture i/f */

 SPDX-License-Identifier: GPL-2.0



 Copyright 2009 Simtec Electronics

/**

 * speaker_gain_get - read the speaker gain setting.

 * @kcontrol: The control for the speaker gain.

 * @ucontrol: The value that needs to be updated.

 *

 * Read the value for the AMP gain control.

/**

 * speaker_gain_set - set the value of the speaker amp gain

 * @value: The value to write.

/**

 * speaker_gain_put - set the speaker gain setting.

 * @kcontrol: The control for the speaker gain.

 * @ucontrol: The value that needs to be set.

 *

 * Set the value of the speaker gain from the specified

 * @ucontrol setting.

 *

 * Note, if the speaker amp is muted, then we do not set a gain value

 * as at-least one of the ICs that is fitted will try and power up even

 * if the main control is set to off.

/**

 * spk_unmute_state - set the unmute state of the speaker

 * @to: zero to unmute, non-zero to ununmute.

 if we're umuting, also re-set the gain */

/**

 * speaker_unmute_get - read the speaker unmute setting.

 * @kcontrol: The control for the speaker gain.

 * @ucontrol: The value that needs to be updated.

 *

 * Read the value for the AMP gain control.

/**

 * speaker_unmute_put - set the speaker unmute setting.

 * @kcontrol: The control for the speaker gain.

 * @ucontrol: The value that needs to be set.

 *

 * Set the value of the speaker gain from the specified

 * @ucontrol setting.

/* This is added as a manual control as the speaker amps create clicks

 * when their power state is changed, which are far more noticeable than

 * anything produced by the CODEC itself.

/**

 * simtec_hw_params - update hardware parameters

 * @substream: The audio substream instance.

 * @params: The parameters requested.

 *

 * Update the codec data routing and configuration  settings

 * from the supplied data.

	/* call any board supplied startup code, this currently only

	 * covers the bast/vr1000 which have a CPLD in the way of the

/**

 * attach_gpio_amp - get and configure the necessary gpios

 * @dev: The device we're probing.

 * @pd: The platform data supplied by the board.

 *

 * If there is a GPIO based amplifier attached to the board, claim

 * the necessary GPIO lines for it, and set default values.

 attach gpio amp gain (if any) */

 note, currently we assume GPA0 isn't valid amp */

 set the amp off at startup */

 SPDX-License-Identifier: GPL-2.0



 ALSA SoC Audio Layer - S3C PCM-Controller driver



 Copyright (c) 2009 Samsung Electronics Co. Ltd

 Author: Jaswinder Singh <jassisinghbrar@gmail.com>

 based upon I2S drivers by Ben Dooks.

Register Offsets */

 PCM_CTL Bit-Fields */

 PCM_CLKCTL Bit-Fields */

 PCM_TXFIFO Bit-Fields */

 PCM_RXFIFO Bit-Fields */

 PCM_IRQCTL Bit-Fields */

 PCM_IRQSTAT Bit-Fields */

 PCM_FIFOSTAT Bit-Fields */

/**

 * struct s3c_pcm_info - S3C PCM Controller information

 * @lock: Spin lock

 * @dev: The parent device passed to use from the probe.

 * @regs: The pointer to the device register block.

 * @sclk_per_fs: number of sclk per frame sync

 * @idleclk: Whether to keep PCMSCLK enabled even when idle (no active xfer)

 * @pclk: the PCLK_PCM (pcm) clock pointer

 * @cclk: the SCLK_AUDIO (audio-bus) clock pointer

 * @dma_playback: DMA information for playback channel.

 * @dma_capture: DMA information for capture channel.

 Whether to keep PCMSCLK enabled even when idle(no active xfer) */

 Strictly check for sample size */

 Get hold of the PCMSOURCE_CLK */

 Set the SCLK divider */

 Set the SYNC divider */

 Nothing to do, IB_NF by default */

 Nothing to do, Master by default */

 Check for valid device index */

 Default is 128fs */

 record our pcm structure for later use in the callbacks */

 Module information */

 SPDX-License-Identifier: GPL-2.0



 ALSA SoC Audio Layer - Samsung I2S Controller driver



 Copyright (c) 2010 Samsung Electronics Co. Ltd.

	Jaswinder Singh <jassisinghbrar@gmail.com>

 Platform device for this DAI */

 Frame clock */

	/*

	 * Specifically requested RCLK, BCLK by machine driver.

	 * 0 indicates CPU driver is free to choose any value.

 Pointer to the Primary_Fifo if this is Sec_Fifo, NULL otherwise */

 Pointer to the Secondary_Fifo if it has one, NULL otherwise */

 DAI is opened */

 DAI is the manager */

 Driver for this DAI */

 DMA parameters */

 Lock for cross interface checks */

 CPU DAIs and their corresponding drivers */

 The I2S controller's core clock */

 Clock for generating I2S signals */

 Rate of RCLK source clock */

 Cache of selected I2S registers for system suspend */

 The clock provider's data */

 Spinlock protecting member fields below */

 Memory mapped SFR region */

 A flag indicating the I2S slave mode operation */

 Returns true if this is the 'overlay' stereo DAI */

 If this interface of the controller is transmitting data */

 Return pointer to the other DAI */

 If the other interface of the controller is transmitting data */

 If any interface of the controller is transmitting data */

 If this interface of the controller is receiving data */

 If the other interface of the controller is receiving data */

 If any interface of the controller is receiving data */

 If the other DAI is transmitting or receiving data */

 If this DAI is transmitting or receiving data */

 If the controller is active anyway */

 Read RCLK of I2S (in multiples of LRCLK) */

 Write RCLK of I2S (in multiples of LRCLK) */

 Read bit-clock of I2S (in multiples of LRCLK) */

 Write bit-clock of I2S (in multiples of LRCLK) */

 Non-TDM I2S controllers do not support BCLK > 48 * FS */

 Sample size */

 TX channel control */

 RX Channel Control */

 Flush FIFO of an interface */

 Flush the FIFO */

 Be patient */

 1 usec */

 Shouldn't matter in GATING(CLOCK_IN) mode */

 clock corrsponding to IISMOD[10] := 0 */

 clock corrsponding to IISMOD[10] := 1 */

 Call can't be on the active DAI */

 Format is priority */

	/*

	 * INV flag is relative to the FORMAT flag - if set it simply

	 * flips the polarity specified by the Standard

		/*

		 * Set default source clock in Master mode, only when the

		 * CLK_I2S_RCLK_SRC clock is not exposed so we ensure any

		 * clock configuration assigned in DT is not overwritten.

	/*

	 * Don't change the I2S mode if any controller is active on this

	 * channel.

 We set constraints on the substream according to the version of I2S */

 Reset any constraint on RFS and BFS */

 Select least possible multiple(2) if no constraint set */

 If already setup and running */

 Don't bother with PSR in Slave mode */

 If this is probe on the secondary DAI */

 Reset any constraint on RFS and BFS */

 Gate CDCLK by default */

 Backend DAI  */

 Playback Mixer */

 Initialize capture only for the primary DAI */

 CONFIG_PM */

 Register the clock provider only if it's expected in the DTB */

 Get the RCLKSRC mux clock parent clock names */

 Activate the prescaler */

 Create platform device for the secondary PCM */

 Nothing to do if it is the secondary device probe */

 The secondary device has no driver data assigned */

 Module information */

 SPDX-License-Identifier: GPL-2.0+

 USB dock */

 Headset jack */

 Temporarily enable micbias and earpath selector */

 failed to read ADC, so assume headphone */

 Disable earpath selector when no mic connected */

 Filter out keypresses when 4 pole jack not detected */

	/**

	 * We have an odd setup - the SPKMODE pin is pulled up so

	 * we only have access to the left side SPK configs,

	 * but SPKOUTR isn't bridged so when playing back in

	 * stereo, we only get the left hand channel.  The only

	 * option we're left with is to force the AIF into mono

	 * mode.

 This must be last as it is conditionally not used */

 AIF1CLK should be >=3MHz for optimal performance */

 Switch sysclk to MCLK1 */

 Stop PLL */

/*

 * Main DAI operations

 Set the codec FLL */

 Set the codec system clock */

 sentinel */ },

 Remove FM widget if not present */

 Update card-name if provided through DT, else use default name */

 Set CPU and platform of_node for main DAI */

 Set CPU of_node for BT DAI */

 SPDX-License-Identifier: GPL-2.0



 Modifications by Christian Pellegrin <chripell@evolware.org>



 s3c24xx_uda134x.c - S3C24XX_UDA134X ALSA SoC Audio board driver



 Copyright 2007 Dension Audio Systems Ltd.

 Author: Zoltan Devai

 #define ENFORCE_RATES 1 */

/*

  Unfortunately the S3C24XX in master mode has a limited capacity of

  generating the clock for the codec. If you define this only rates

  that are really available will be enforced. But be careful, most

  user level application just want the usual sampling frequencies (8,

  11.025, 22.050, 44.1 kHz) and anyway resampling is a costly

  operation for embedded systems. So if you aren't very lucky or your

  hardware engineer wasn't very forward-looking it's better to leave

  this undefined. If you do so an approximate value for the requested

  sampling rate in the range -/+ 5% will be chosen. If this in not

  possible an error will be returned.

 set the codec system clock for DAC and ADC */

 SPDX-License-Identifier: GPL-2.0+



 Copyright (C) 2015 - 2016 Samsung Electronics Co., Ltd.



 Authors: Inha Song <ideal.song@samsung.com>

          Sylwester Nawrocki <s.nawrocki@samsung.com>

/*

 * The source clock is XCLKOUT with its mux set to the external fixed rate

 * oscillator (XXTI).

 Highest possible SYSCLK frequency: 147.456MHz */

 Highest possible SYSCLK frequency: 135.4752 MHz */

 Highest possible ASYNCCLK frequency: 49.152MHz */

 Highest possible ASYNCCLK frequency: 45.1584 MHz */

 disable FLL2 */

 Set the MAX98504 V/I sense PDM Tx DAI channel mapping */

 Skip the HDMI link if not specified in DT */

 Initialize WM5110 - I2S and HDMI - I2S1 DAI links */

 WM5110 */

 HDMI */

 HDMI DAI link (I2S1) */

 SPDX-License-Identifier: GPL-2.0+



 Lowland audio support



 Copyright 2011 Wolfson Microelectronics

 Headset jack detection DAPM pins */

 Clock OPCLK, used by the other audio components. */

 At any time the WM9081 is active it will have this clock */

 SPDX-License-Identifier: GPL-2.0+



 Copyright (c) 2011 Samsung Electronics Co., Ltd

		http:
/*

 * Board Settings:

 *  o '1' means 'ON'

 *  o '0' means 'OFF'

 *  o 'X' means 'Don't care'

 *

 * SMDKC210, SMDKV310: CFG3- 1001, CFG5-1000, CFG7-111111

/*

 * Configure audio route as :-

 * $ amixer sset 'DAC1' on,on

 * $ amixer sset 'Right Headphone Mux' 'DAC'

 * $ amixer sset 'Left Headphone Mux' 'DAC'

 * $ amixer sset 'DAC1R Mixer AIF1.1' on

 * $ amixer sset 'DAC1L Mixer AIF1.1' on

 * $ amixer sset 'IN2L' on

 * $ amixer sset 'IN2L PGA IN2LN' on

 * $ amixer sset 'MIXINL IN2L' on

 * $ amixer sset 'AIF1ADC1L Mixer ADC/DMIC' on

 * $ amixer sset 'IN2R' on

 * $ amixer sset 'IN2R PGA IN2RN' on

 * $ amixer sset 'MIXINR IN2R' on

 * $ amixer sset 'AIF1ADC1R Mixer ADC/DMIC' on

 SMDK has a 16.9344MHZ crystal attached to WM8994 */

 Set PCM source clock on CPU */

 Set SCLK_DIV for making bclk */

 SPDX-License-Identifier: GPL-2.0+



 Copyright 2010 Maurus Cuelenaere <mcuelenaere@gmail.com>



 Based on smdk6410_wm8987.c

     Copyright 2007 Wolfson Microelectronics PLC. - linux@wolfsonmicro.com

     Graeme Gregory - graeme.gregory@wolfsonmicro.com

/*

 * WM8987 is register compatible with WM8750, so using that as base driver.

 Use PCLK for I2S signal generation */

 Gate the RCLK output on PAD */

 set the codec system clock for DAC and ADC */

/*

 * SmartQ WM8987 HiFi DAI operations.

 Disable speaker when headphone is plugged in */

 set endpoints to not connected */

 Headphone jack detection */

 Initialise GPIOs used by amplifiers */

 Module information */

 SPDX-License-Identifier: GPL-2.0+

 /*

  * Default CFG switch settings to use this driver:

  *	SMDKV310: CFG5-1000, CFG7-111111

 /*

  * Configure audio route as :-

  * $ amixer sset 'DAC1' on,on

  * $ amixer sset 'Right Headphone Mux' 'DAC'

  * $ amixer sset 'Left Headphone Mux' 'DAC'

  * $ amixer sset 'DAC1R Mixer AIF1.1' on

  * $ amixer sset 'DAC1L Mixer AIF1.1' on

  * $ amixer sset 'IN2L' on

  * $ amixer sset 'IN2L PGA IN2LN' on

  * $ amixer sset 'MIXINL IN2L' on

  * $ amixer sset 'AIF1ADC1L Mixer ADC/DMIC' on

  * $ amixer sset 'IN2R' on

  * $ amixer sset 'IN2R PGA IN2RN' on

  * $ amixer sset 'MIXINR IN2R' on

  * $ amixer sset 'AIF1ADC1R Mixer ADC/DMIC' on

 SMDK has a 16.934MHZ crystal attached to WM8994 */

 Default SMDKs */

 AIF1CLK should be >=3MHz for optimal performance */

/*

 * SMDK WM8994 DAI operations.

 Other pins NC */

 Primary DAI i/f */

 Sec_Fifo Playback i/f */

 SPDX-License-Identifier: GPL-2.0+



 Littlemill audio support



 Copyright 2011 Wolfson Microelectronics

		/*

		 * If we've not already clocked things via hw_params()

		 * then do so now, otherwise these are noops.

 Default for AMICBIAS jumper */

 Default for DMICBIAS jumper */

 This will check device compatibility itself */

 As will this */

 SPDX-License-Identifier: GPL-2.0



 Copyright 2009 Simtec Electronics

 Headphone connected to HP{L,R}OUT and HP{L,R}COM */

 ZV connected to Line1 */

 Line In connected to Line2 */

 Microphone connected to MIC3R and MIC_BIAS */

 GSM connected to MONO_LOUT and MIC3L (in) */

	/* Speaker is connected to LINEOUT{LN,LP,RN,RP}, however we are

	 * not using the DAPM to power it up and down as there it makes

/**

 * simtec_hermes_init - initialise and add controls

 * @codec; The codec instance to attach to.

 *

 * Attach our controls and configure the necessary codec

 * mappings for our sound card instance.

 simtec audio machine driver */

 SPDX-License-Identifier: GPL-2.0+



 Midas audio support



 Copyright (C) 2018 Simon Shields <simon@lineageos.org>

 Copyright (C) 2020 Samsung Electronics Co., Ltd.

/*

 * The MCLK1 clock source is XCLKOUT with its mux set to the external fixed rate

 * oscillator (XXTI).

	/*

	 * If no new rate is requested, set FLL1 to a sane default for jack

	 * detection.

 while reconfiguring, switch to MCLK2 for SYSCLK */

 AIF1CLK should be at least 3MHz for "optimal performance" */

/*

 * We only have a single external speaker, so mix stereo data

 * to a single mono stream.

 FIXME: toggle MAX77693 on i9300/i9305 */

 Use MCLK2 as SYSCLK for boot */

 SPDX-License-Identifier: GPL-2.0+



 ALSA Soc Audio Layer - S3C2412 I2S driver



 Copyright (c) 2006 Wolfson Microelectronics PLC.

	Graeme Gregory graeme.gregory@wolfsonmicro.com

	linux@wolfsonmicro.com



 Copyright (c) 2007, 2004-2005 Simtec Electronics

	http:
	Ben Dooks <ben@simtec.co.uk>

 Set MPLL as the source for IIS CLK */

 some basic suspend checks */

 Module information */

 SPDX-License-Identifier: GPL-2.0+



 Bells audio support



 Copyright 2012 Wolfson Microelectronics

 BCLK2 is fixed at this currently */

/*

 * Expect a 24.576MHz crystal if one is fitted (the driver will function

 * if this is not fitted).

 SPDX-License-Identifier: GPL-2.0+



 idma.c - I2S0 internal DMA driver



 Copyright (c) 2011 Samsung Electronics Co., Ltd.

		http:
 Internal DMA Level0 Interrupt Address */

 Start address0 of I2S internal DMA operation. */

	/*

	 * Transfer block size for I2S internal DMA.

	 * Should decide transfer size before start dma operation

 flush the DMA channel */

 From snd_pcm_lib_mmap_iomem */

 Assign PCM buffer pointers */

 SPDX-License-Identifier: GPL-2.0



 ALSA SoC Audio Layer - Samsung S/PDIF Controller driver



 Copyright (c) 2010 Samsung Electronics Co. Ltd

		http:
 Registers */

/**

 * struct samsung_spdif_info - Samsung S/PDIF Controller information

 * @lock: Spin lock for S/PDIF.

 * @dev: The parent device passed to use from the probe.

 * @regs: The pointer to the device register block.

 * @clk_rate: Current clock rate for calcurate ratio.

 * @pclk: The peri-clock pointer for spdif master operation.

 * @sclk: The source clock pointer for making sync signals.

 * @saved_clkcon: Backup clkcon reg. in suspend.

 * @saved_con: Backup con reg. in suspend.

 * @saved_cstas: Backup cstas reg. in suspend.

 * @dma_playback: DMA information for playback channel.

 Request S/PDIF Register's memory region */

 SPDX-License-Identifier: GPL-2.0



 Copyright 2009 Simtec Electronics

/* supported machines:

 *

 * Machine	Connections		AMP

 * -------	-----------		---

 * BAST		MIC, HPOUT, LOUT, LIN	TPA2001D1 (HPOUTL,R) (gain hardwired)

 * VR1000	HPOUT, LIN		None

 * VR2000	LIN, LOUT, MIC, HP	LM4871 (HPOUTL,R)

 * DePicture	LIN, LOUT, MIC, HP	LM4871 (HPOUTL,R)

 * Anubis	LIN, LOUT, MIC, HP	TPA2001D1 (HPOUTL,R)

/**

 * simtec_tlv320aic23_init - initialise and add controls

 * @codec; The codec instance to attach to.

 *

 * Attach our controls and configure the necessary codec

 * mappings for our sound card instance.

 simtec audio machine driver */

 SPDX-License-Identifier: GPL-2.0+



 smdk_spdif.c - S/PDIF audio for SMDK



 Copyright (C) 2010 Samsung Electronics Co., Ltd.

/* Audio clock settings are belonged to board specific part. Every

 * board can set audio source clock setting which is matched with H/W

 * like this function-'set_audio_clock_heirachy'.

 Set audio clock hierarchy for S/PDIF */

/* We should haved to set clock directly on this part because of clock

 * scheme of Samsudng SoCs did not support to set rates from abstrct

 * clock of it's hierarchy.

	/* Setting ratio to 512fs helps to use S/PDIF with HDMI without

	 * modify S/PDIF ASoC machine driver.

 Set audio source clock rates */

 Set S/PDIF uses internal source clock */

 Set audio clock hierarchy manually */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * simone.c -- ASoC audio for Simplemachines Sim.One board

 *

 * Copyright (c) 2010 Mika Westerberg

 *

 * Based on snappercl15 machine driver by Ryan Mallon.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/sound/arm/ep93xx-pcm.c - EP93xx ALSA PCM interface

 *

 * Copyright (C) 2006 Lennert Buytenhek <buytenh@wantstofly.org>

 * Copyright (C) 2006 Applied Data Systems

 *

 * Rewritten for the SoC audio subsystem (Based on PXA2xx code):

 *   Copyright (c) 2008 Ryan Mallon

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ASoC driver for Cirrus Logic EP93xx AC97 controller.

 *

 * Copyright (c) 2010 Mika Westerberg

 *

 * Based on s3c-ac97 ASoC driver by Jaswinder Singh.

/*

 * Per channel (1-4) registers.

/*

 * Global AC97 controller registers.

/*

 * Common bits for RGIS, GIS and IM registers.

/**

 * struct ep93xx_ac97_info - EP93xx AC97 controller info structure

 * @lock: mutex serializing access to the bus (slot 1 & 2 ops)

 * @dev: pointer to the platform device dev structure

 * @regs: mapped AC97 controller registers

 * @done: bus ops wait here for an interrupt

 currently ALSA only supports a single AC97 device */

	/*

	 * Writes to the codec need to be done so that slot 2 is filled in

	 * before slot 1.

	/*

	 * We are assuming that before this functions gets called, the codec

	 * BIT_CLK is stopped by forcing the codec into powerdown mode. We can

	 * control the SYNC signal directly via AC97SYNC register. Using

	 * TIMEDSYNC the controller will keep the SYNC high > 1us.

	/*

	 * For doing cold reset, we disable the AC97 controller interface, clear

	 * WINT and CODECREADY bits, and finally enable the interface again.

	/*

	 * Now, assert the reset and wait for the codec to become ready.

	/*

	 * Give the codec some time to come fully out from the reset. This way

	 * we ensure that the subsequent reads/writes will work.

	/*

	 * Just mask out the interrupt and wake up the waiting thread.

	 * Interrupts are cleared via reading/writing to slot 1 & 2 registers by

	 * the waiting thread.

			/*

			 * Enable compact mode, TX slots 3 & 4, and the TX FIFO

			 * itself.

			/*

			 * Enable compact mode, RX slots 3 & 4, and the RX FIFO

			 * itself.

			/*

			 * As per Cirrus EP93xx errata described below:

			 *

			 * https://www.cirrus.com/en/pubs/errata/ER667E2B.pdf

			 *

			 * we will wait for the TX FIFO to be empty before

			 * clearing the TEN bit.

 disable the TX FIFO */

 disable the RX FIFO */

 disable the AC97 controller */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/sound/soc/ep93xx-i2s.c

 * EP93xx I2S driver

 *

 * Copyright (C) 2010 Ryan Mallon

 *

 * Based on the original driver by:

 *   Copyright (C) 2007 Chase Douglas <chasedouglas@gmail>

 *   Copyright (C) 2006 Lennert Buytenhek <buytenh@wantstofly.org>

 Right justify */

 Right justify */

/*

 * Transmit empty interrupt level select:

 * 0 - Generate interrupt when FIFO is half empty

 * 1 - Generate interrupt when FIFO is empty

 Transmit interrupt enable */

 lrclk polarity */

 Bit clock polarity */

 First bit transition */

 Master mode */

 Not bit clock gating */

 Enable clocks */

 Enable i2s */

 Enable fifo */

 Enable TX IRQs (FIFO empty or underflow) */

 Disable IRQs */

 Disable fifo */

 Disable i2s */

 Disable clocks */

/*

 * According to documentation I2S controller can handle underflow conditions

 * just fine, but in reality the state machine is sometimes confused so that

 * the whole stream is shifted by one byte. The watchdog below disables the TX

 * FIFO, fills the buffer with zeroes and re-enables the FIFO. State machine

 * is being reset and by filling the buffer we get some time before next

 * underflow happens.

 Disable FIFO */

	/*

	 * Fill TX FIFO with zeroes, this way we can defer next IRQs as much as

	 * possible and get more time for DMA to catch up. Actually there are

	 * only 8 samples in this FIFO, so even on 8kHz maximum deferral here is

	 * 1ms.

 Re-enable FIFO */

 CPU is provider */

 Codec is provider */

 Negative bit clock, lrclk low on left word */

 Negative bit clock, lrclk low on right word */

 Positive bit clock, lrclk low on left word */

 Positive bit clock, lrclk low on right word */

 Write new register values */

	/*

	 * EP93xx I2S module can be setup so SCLK / LRCLK value can be

	 * 32, 64, 128. MCLK / SCLK value can be 2 and 4.

	 * We set LRCLK equal to `rate' and minimum SCLK / LRCLK 

	 * value is 64, because our sample size is 32 bit * 2 channels.

	 * I2S standard permits us to transmit more bits than

	 * the codec uses.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SoC audio for EDB93xx

 *

 * Copyright (c) 2010 Alexander Sverdlin <subaparts@yandex.ru>

 *

 * This driver support CS4271 codec being master or slave, working

 * in control port mode, connected either via SPI or I2C.

 * The data format accepted is I2S or left-justified.

 * DAPM support not implemented.

	/*

	 * According to CS4271 datasheet we use MCLK/LRCK=256 for

	 * rates below 50kHz and 128 for higher sample rates

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * snappercl15.c -- SoC audio for Bluewater Systems Snapper CL15 module

 *

 * Copyright (C) 2008 Bluewater Systems Ltd

 * Author: Ryan Mallon

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Au1000/Au1500/Au1100 AC97C controller driver for ASoC

 *

 * (c) 2011 Manuel Lauss <manuel.lauss@googlemail.com>

 *

 * based on the old ALSA driver originally written by

 *			Charles Eidsness <charles@cooper-street.com>

 register offsets and bits */

 valid rx slots mask */

 valid tx slots mask */

 sync gate */

 sync control */

 acrst# control */

 tx underflow */

 tx overflow */

 rx underflow */

 rx overflow */

 codec ready */

 command pending */

 tx fifo empty */

 tx fifo full */

 rx fifo empty */

 rx fifo full */

 DISable bit */

 clock enable bit */

 how often to retry failed codec register reads/writes */

/* instance data. There can be only one, MacLeod!!!!, fortunately there IS only

 * once AC97C on early Alchemy chips. The newer ones aren't so lucky.

 wait an ac97 frame time */

		/* stupid errata: data is only valid for 21us, so

		 * poll, Forrest, poll...

 wait for codec ready */

 AC97 controller operations */

 switch it on */

 clock off, disable */

 MDEV */

 clock off, disable */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Au12x0/Au1550 PSC ALSA ASoC audio support.

 *

 * (c) 2007-2009 MSC Vertriebsges.m.b.H.,

 *	Manuel Lauss <manuel.lauss@gmail.com>

 *

 * Au1xxx-PSC AC97 glue.

 how often to retry failed codec register reads/writes */

 instance data. There can be only one, MacLeod!!!! */

/* this could theoretically work, but ac97->bus->card->private_data can be NULL

 * when snd_ac97_mixer() is called; I don't know if the rest further down the

 * chain are always valid either.

 AC97 controller reads codec register */

 drain writebuffer */

 drain writebuffer */

 drain writebuffer */

 wrong register, try again */

 AC97 controller writes to codec register */

 drain writebuffer */

 drain writebuffer */

 drain writebuffer */

 AC97 controller asserts a warm reset */

 drain writebuffer */

 drain writebuffer */

 disable PSC during cold reset */

 drain writebuffer */

 drain writebuffer */

 issue cold reset */

 drain writebuffer */

 drain writebuffer */

 enable PSC */

 drain writebuffer */

 wait for PSC to indicate it's ready */

 enable the ac97 function */

 drain writebuffer */

 wait for AC97 core to become ready */

 AC97 controller operations */

 already active? */

 reject parameters not currently set up */

 set sample bitdepth: REG[24:21]=(BITS-2)/2 */

 channels: enable slots for front L/R channel */

 do we need to poke the hardware? */

 ac97 engine is about to be disabled */

 disable AC97 device controller first... */

 drain writebuffer */

 ...wait for it... */

 ...write config... */

 drain writebuffer */

 ...enable the AC97 controller again... */

 drain writebuffer */

 ...and wait for ready bit */

 drain writebuffer */

 drain writebuffer */

 drain writebuffer */

 drain writebuffer */

 configuration: max dma trigger threshold, enable ac97 */

 preserve PSC clock source set up by platform	 */

 drain writebuffer */

 drain writebuffer */

 drain writebuffer */

 name the DAI like this device instance ("au1xpsc-ac97.PSCINDEX") */

 disable PSC completely */

 drain writebuffer */

 drain writebuffer */

 MDEV */

 save interesting registers and disable PSC */

 drain writebuffer */

 drain writebuffer */

 restore PSC clock config */

 drain writebuffer */

	/* after this point the ac97 core will cold-reset the codec.

	 * During cold-reset the PSC is reinitialized and the last

	 * configuration set up in hw_params() is restored.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Au1000/Au1500/Au1100 Audio DMA support.

 *

 * (c) 2011 Manuel Lauss <manuel.lauss@googlemail.com>

 *

 * copied almost verbatim from the old ALSA driver, written by

 *			Charles Eidsness <charles@cooper-street.com>

 relative to start of buffer */

 playback & capture */

 not changed */

 whoa, has ordering changed? */

 DMA setup */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * DB1000/DB1500/DB1100 ASoC audio fabric support code.

 *

 * (c) 2011 Manuel Lauss <manuel.lauss@googlemail.com>

 *

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Au12x0/Au1550 PSC ALSA ASoC audio support.

 *

 * (c) 2007-2008 MSC Vertriebsges.m.b.H.,

 *	Manuel Lauss <manuel.lauss@gmail.com>

 *

 * DMA glue for Au1x-PSC audio.

#define PCM_DEBUG*/

 DDMA control data */

 DDMA direction ID for this PSC */

 DDMA context */

 PCM context (for irq handlers) */

 current segment DDMA is working on */

 queue period(s) */

 address of queued DMA area */

 start address of DMA area */

 current byte position being played */

 number of SG segments in total */

 size in bytes of one SG segment */

 runtime data */

/*

 * These settings are somewhat okay, at least on my machine audio plays

 * almost skip-free. Especially the 64kB buffer seems to help a LOT.

 PCM hardware DMA capabilities - platform specific */

 2 to as-much-as-you-like */

 fifo entries of AC97/I2S PSC */

 update next-to-queue period */

 update next-to-queue period */

/* in case of missing DMA ring or changed TX-source / RX-dest bit widths,

 * allocate (or reallocate) a 2-descriptor DMA ring with bit depth according

 * to ALSA-supplied sample depth.  This is due to limitations in the dbdma api

 * (cannot adjust source/dest widths of already allocated descriptor ring).

 DMA only in 8/16/32 bit widths */

 check current config: correct bits and descriptors allocated? */

 all ok! */

 whoa, has ordering changed? */

 au1xpsc audio platform */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Au1000/Au1500/Au1100 I2S controller driver for ASoC

 *

 * (c) 2011 Manuel Lauss <manuel.lauss@googlemail.com>

 *

 * Note: clock supplied to the I2S controller must be 256x samplerate.

 tx underflow */

 clock invert */

 set to make I2SDIO INPUT */

 loopback */

 word select invert */

 I2S format */

 left-justified */

 right-justified */

 tx fifo en */

 rx fifo en */

 DISable */

 clock enable */

 only limited by clock generator and board design */

 IB-IF */

 I2S controller only supports provider */

 CODEC consumer */

 power up */

 power off */

 clock off, disable */

 clock off, disable */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Au12x0/Au1550 PSC ALSA ASoC audio support.

 *

 * (c) 2007-2008 MSC Vertriebsges.m.b.H.,

 *	Manuel Lauss <manuel.lauss@gmail.com>

 *

 * Au1xxx-PSC I2S glue.

 *

 * NOTE: so far only PSC slave mode (bit- and frameclock) is supported.

 supported I2S DAI hardware formats */

 supported I2S direction */

 left-justified */

 enable I2S mode */

 LSB (right-) justified */

 IB-IF */

 CODEC provider */

 PSC I2S consumer mode */

 CODEC consumer */

 PSC I2S provider mode */

 check if the PSC is already streaming data */

 reject parameters not currently set up in hardware */

 set sample bitdepth */

 remember current rate for other stream */

/* Configure PSC late:  on my devel systems the codec  is I2S master and

 * supplies the i2sbitclock __AND__ i2sMclk (!) to the PSC unit.  ASoC

 * uses aggressive PM and  switches the codec off  when it is not in use

 * which also means the PSC unit doesn't get any clocks and is therefore

 * dead. That's why this chunk here gets called from the trigger callback

 * because I can be reasonably certain the codec is driving the clocks.

 bring PSC out of sleep, and configure I2S unit */

 drain writebuffer */

 drain writebuffer */

 drain writebuffer */

 wait for I2S controller to become ready */

 drain writebuffer */

 if both TX and RX are idle, configure the PSC  */

 drain writebuffer */

 drain writebuffer */

 wait for start confirmation */

 drain writebuffer */

 drain writebuffer */

 wait for stop confirmation */

 if both TX and RX are idle, disable PSC */

 drain writebuffer */

 drain writebuffer */

 2 without external help */

 2 without external help */

	/* preserve PSC clock source set up by platform (dev.platform_data

	 * is already occupied by soc layer)

 drain writebuffer */

 drain writebuffer */

 preconfigure: set max rx/tx fifo depths */

	/* don't wait for I2S core to become ready now; clocks may not

	 * be running yet; depending on clock input for PSC a wait might

	 * time out.

 name the DAI like this device instance ("au1xpsc-i2s.PSCINDEX") */

 drain writebuffer */

 drain writebuffer */

 save interesting register and disable PSC */

 drain writebuffer */

 drain writebuffer */

 select I2S mode and PSC clock */

 drain writebuffer */

 drain writebuffer */

 drain writebuffer */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * DB1200/DB1300/DB1550 ASoC audio fabric support code.

 *

 * (c) 2008-2011 Manuel Lauss <manuel.lauss@googlemail.com>

 *

-------------------------  AC97 PART  ---------------------------*/

-------------------------  I2S PART  ---------------------------*/

 WM8731 has its own 12MHz crystal */

-------------------------  COMMON PART  ---------------------------*/

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * linux/sound/soc/codecs/tlv320aic32x4.c

 *

 * Copyright 2011 Vista Silicon S.L.

 *

 * Author: Javier Martin <javier.martin@vista-silicon.com>

 *

 * Based on sound/soc/codecs/wm8974 and TI driver for kernel 2.6.27.

	/*

	 * Workaround: the datasheet does not mention a required programming

	 * sequence but experiments show the ADC needs to be reset after each

	 * capture to avoid audible artifacts.

 Change Mic Bias Registor */

 0dB min, 0.5dB steps */

 -63.5dB min, 0.5dB steps */

 -6dB min, 1dB steps */

 -12dB min, 0.5dB steps */

 -6dB min, 1dB steps */

 Left mixer pins */

	Right mixer pins */

 Left Output */

 Right Output */

 Right Input */

 Left Input */

 set master/slave audio interface */

 invert bit clock */

 add offset 1 */

 invert bit clock */

 AIC32x4 */

 Initial cold start */

 setup GPIO functions */

 MFP1 */

 MFP2 */

 MFP3 */

 MFP4 */

 MFP5 */

 Power platform configuration */

 Mic PGA routing */

	/*

	 * Workaround: for an unknown reason, the ADC needs to be powered up

	 * and down for the first capture to work properly. It seems related to

	 * a HW BUG or some kind of behavior not documented in the datasheet.

	/*

	 * Enable the fast charging feature and ensure the needed 40ms ellapsed

	 * before using the analog circuits.

 Left Output */

 Power platform configuration */

	/*

	 * Enable the fast charging feature and ensure the needed 40ms ellapsed

	 * before using the analog circuits.

 Check if the regulator requirements are fulfilled */

 SPDX-License-Identifier: GPL-2.0

/*

 * Texas Instruments PCM186x Universal Audio ADC - I2C

 *

 * Copyright (C) 2015-2017 Texas Instruments Incorporated - https://www.ti.com

 *	Andreas Dannenberg <dannenberg@ti.com>

 *	Andrew F. Davis <afd@ti.com>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rl6347a.c - RL6347A class device shared support

 *

 * Copyright 2015 Realtek Semiconductor Corp.

 *

 * Author: Oder Chiou <oder_chiou@realtek.com>

 handle index registers */

	/*

	 * 4 bit VID: reg should be 0

	 * 12 bit VID: value should be 0

	 * So we use an OR operator to handle it rather than use if condition.

 handle index registers */

 Write register */

 Read data */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rt5665.c  --  RT5665/RT5658 ALSA SoC audio codec driver

 *

 * Copyright 2016 Realtek Semiconductor Corp.

 * Author: Bard Liao <bardliao@realtek.com>

 {0, +20, +24, +30, +35, +40, +44, +50, +52} dB */

 Interface data select */

/**

 * rt5665_sel_asrc_clk_src - select ASRC clock source for a set of filters

 * @component: SoC audio component device.

 * @filter_mask: mask of filters.

 * @clk_src: clock source

 *

 * The ASRC function is for asynchronous MCLK and LRCK. Also, since RT5665 can

 * only support standard 32fs or 64fs i2s format, ASRC should be enabled to

 * support special i2s clock format such as Intel's 100fs(100 * sampling rate).

 * ASRC function will track i2s clock and generate a corresponding system clock

 * for codec. This function provides an API to select the clock source for a

 * set of filters specified by the mask. And the codec driver will turn on ASRC

 * for these filters if ASRC is selected as their clock source.

/**

 * rt5665_headset_detect - Detect headset.

 * @component: SoC audio component device.

 * @jack_insert: Jack insert or not.

 *

 * Detect whether is headset or not when jack inserted.

 *

 * Returns detect status.

 jack out */

 jack in */

 jack was out, report jack type */

 jack is already in, report button event */

			/**

			 * rt5665 can report three kinds of button behavior,

			 * one click, double click and hold. However,

			 * currently we will report button pressed/released

			 * event. So all the three button behaviors are

			 * treated as button pressed.

 unpressed */

 jack out */

 Headphone Output Volume */

 Mono Output Volume */

 Output Volume */

 DAC Digital Volume */

 IN1/IN2/IN3/IN4 Volume */

 INL/INR Volume Control */

 ADC Digital Volume Control */

 ADC Boost Volume Control */

 I2S3 CLK Source */

/**

 * set_dmic_clk - Set parameter of dmic.

 *

 * @w: DAPM widget.

 * @kcontrol: The kcontrol of this widget.

 * @event: Event id.

 *

 * Choose dmic clock between 1MHz and 3MHz.

 * It is better for clock to approximate 3MHz.

 I2S_Pre_Div1 should be 1 in asrc mode */

 Digital Mixer */

 Analog Input Mixer */

DAC L2, DAC R2*/

MX-17 [6:4], MX-17 [2:0]*/

DAC L3, DAC R3*/

MX-1B [6:4], MX-1B [2:0]*/

 STO1 ADC1 Source */

 MX-26 [13] [5] */

 STO1 ADC Source */

 MX-26 [11:10] [3:2] */

 STO1 ADC2 Source */

 MX-26 [12] [4] */

 STO1 DMIC Source */

 MX-26 [8] */

 MX-26 [9] */

 MX-26 [1:0] */

 MONO ADC L2 Source */

 MX-27 [12] */

 MONO ADC L1 Source */

 MX-27 [13] */

 MX-27 [9][1]*/

 MONO ADC L Source, MONO ADC R Source*/

 MX-27 [11:10], MX-27 [3:2] */

 MONO DMIC L Source */

 MX-27 [8] */

 MONO ADC R2 Source */

 MX-27 [4] */

 MONO ADC R1 Source */

 MX-27 [5] */

 MONO DMIC R Source */

 MX-27 [0] */

 STO2 ADC1 Source */

 MX-28 [13] [5] */

 STO2 ADC Source */

 MX-28 [11:10] [3:2] */

 STO2 ADC2 Source */

 MX-28 [12] [4] */

 STO2 DMIC Source */

 MX-28 [8] */

 MX-28 [9] */

 MX-28 [1] */

 DAC R1 Source, DAC L1 Source*/

 MX-29 [11:10], MX-29 [9:8]*/

 DAC Digital Mixer L Source, DAC Digital Mixer R Source*/

 MX-2D [13:12], MX-2D [9:8]*/

 Analog DAC L1 Source, Analog DAC R1 Source*/

 MX-2D [5:4], MX-2D [1:0]*/

 Analog DAC LR Source, Analog DAC R2 Source*/

 MX-2E [5:4], MX-2E [0]*/

 Interface2 ADC Data Input*/

 MX-2F [14:12] */

 MX-2F [6:4] */

 Interface3 ADC Data Input*/

 MX-30 [6:4] */

 PDM 1 L/R*/

 MX-31 [11:10] [9:8] */

 I2S1 TDM ADCDAT Source */

 MX-7a[10] */

 MX-7a[9] */

 MX-7a[8] */

 MX-7b[10] */

 MX-7b[9] */

 MX-7b[8] */

 MX-7b[7] */

 MX-7a[4:0] MX-7b[4:0] */

 Out Volume Switch */

 Out Switch */

Add delay to avoid pop noise*/

 ASRC */

 Input Side */

 Input Lines */

 Boost */

 Input Volume */

 REC Mixer */

 ADCs */

 ADC Mux */

 ADC Mixer */

 ADC PGA */

 Digital Interface */

 Digital Interface Select */

 Audio Interface */

 Output Side */

 DAC mixer before sound effect  */

 DAC channel Mux */

 DAC Mixer */

 DACs */

 OUT Mixer */

 Output Volume */

 MONO/HPO/LOUT */

 PDM */

 CLK DET */

 Output Lines */

PLL*/

ASRC*/

Vref*/

 Sleep for 300 ms miniumum */

 line in diff mode*/

 DMIC pin*/

 Work around for pow_pump */

 Set GPIO4,8 as input for combo jack */

 Enhance performance*/

 SPDX-License-Identifier: GPL-2.0-only



 ALSA SoC Audio driver for CS47L92 codec



 Copyright (C) 2016-2019 Cirrus Logic, Inc. and

                         Cirrus Logic International Semiconductor Ltd.



 EP_SEL should not be modified while HPOUT3 or 4 is enabled */

 wait for wseq to complete */

 wait for wseq */

 enable delay */

 disable delay */

/*

 * mux_in widgets : arranged in the order of sources

 * specified in MADERA_MIXER_INPUT_ROUTES

 end of ordered widget list */

 Internal clock domains */

 quick exit if Madera irqchip driver hasn't completed probe */

 Latch volume update bits */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * stac9766.c  --  ALSA SoC STAC9766 codec support

 *

 * Copyright 2009 Jon Smirl, Digispeaker

 * Author: Jon Smirl <jonsmirl@gmail.com>

 *

 *  Features:-

 *

 *   o Support for AC97 Codec, S/PDIF

 0/10dB */

 0/20dB */

 enable variable rate audio, disable SPDIF output */

 Enable VRA and SPDIF out */

 full On */

 partial On */

 Off, with power */

 Off, without power */

 disable everything including AC link */

 stream cababilities */

 alsa ops */

 stream cababilities */

 alsa ops */

 SPDX-License-Identifier: GPL-2.0-only



 ALSA SoC Audio driver for CS47L35 codec



 Copyright (C) 2015-2019 Cirrus Logic, Inc. and

                         Cirrus Logic International Semiconductor Ltd.



 Only get to here for OUT1L and OUT1R */

/*

 * Input mux widgets arranged in order of sources in MADERA_MIXER_INPUT_ROUTES

 * to take advantage of cache lookup in DAPM

 End of ordered input mux widgets */

 Internal clock domains */

 quick exit if Madera irqchip driver hasn't completed probe */

 Latch volume update bits */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * wm8400.c  --  WM8400 ALSA Soc Audio driver

 *

 * Copyright 2008-11 Wolfson Microelectronics PLC.

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 codec private data */

 now hit the volume update bits (always bit 8) */

 INMIXL */

 INMIXR */

 LOMIX */

 ROMIX */

 LOUT */

 ROUT */

 LOPGA */

 ROPGA */

/*

 * _DAPM_ Controls

 INMIX dB values */

 Left In PGA Connections */

 Right In PGA Connections */

 INMIXL */

 INMIXR */

 AINLMUX */

 DIFFINL */

 AINRMUX */

 LOMIX */

 ROMIX */

 LONMIX */

 LOPMIX */

 RONMIX */

 ROPMIX */

 OUT3MIX */

 OUT4MIX */

 SPKMIX */

 Input Side */

 Input Lines */

 DACs */

 Input PGAs */

 INMIXL */

 AINLMUX */

 INMIXR */

 AINRMUX */

 Output Side */

 DACs */

 LOMIX */

 LONMIX */

 LOPMIX */

 OUT3MIX */

 SPKMIX */

 OUT4MIX */

 ROPMIX */

 RONMIX */

 ROMIX */

 LOUT PGA */

 ROUT PGA */

 LOPGA */

 ROPGA */

 MICBIAS */

 Make DACs turn on when playing even if not mixed into any outputs */

	/* Make ADCs turn on when recording

 Input Side */

 LIN12 PGA */

 LIN34 PGA */

 INMIXL */

 AILNMUX */

 ADC */

 RIN12 PGA */

 RIN34 PGA */

 INMIXR */

 AIRNMUX */

 ADC */

 LOMIX */

 ROMIX */

 SPKMIX */

 LONMIX */

 LOPMIX */

 OUT3MIX */

 OUT4MIX */

 RONMIX */

 ROPMIX */

 Out Mixer PGAs */

 Output Pins */

/*

 * Clock after FLL and dividers

 Ensure we have a fractional part */

 Calculate fractional part - scale up so we can round. */

 Move down to proper range now rounding is done */

		/* Bodge GCC 4.4.0 uninitialised variable warning - it

		 * doesn't seem capable of working out that we exit if

 We *must* disable the FLL before any changes */

/*

 * Sets ADC and Voice DAC format.

 set master/slave audio interface */

 interface format */

/*

 * Set PCM DAI bit size and sample rate.

 bit size */

 TODO: set bias for best performance at standby */

 VMID=2*50k */

 Enable POBCTRL, SOFT_ST, VMIDTOG and BUFDCOPEN */

 Enable VREF & VMID at 2x50k */

 Enable BUFIOEN */

 disable POBCTRL, SOFT_ST and BUFDCOPEN */

 VMID=2*300k */

 Enable POBCTRL and SOFT_ST */

 Enable POBCTRL, SOFT_ST and BUFDCOPEN */

 mute DAC */

 Enable any disabled outputs */

 Disable VMID */

 Enable all output discharge bits */

 Disable VREF */

 disable POBCTRL, SOFT_ST and BUFDCOPEN */

/*

 * The WM8400 supports 2 different and mutually exclusive DAI

 * configurations.

 *

 * 1. ADC/DAC on Primary Interface

 * 2. ADC on Primary Interface/DAC on secondary

 ADC/DAC on primary */

 Latch volume update bits */

 SPDX-License-Identifier: GPL-2.0-only

/*

* alc5632.c  --  ALC5632 ALSA SoC Audio Codec

*

* Copyright (C) 2011 The AC100 Kernel Team <ac100@lists.lauchpad.net>

*

* Authors:  Leon Romanovsky <leon@leon.nu>

*           Andrey Danin <danindrey@mail.ru>

*           Ilya Petrov <ilya.muromec@gmail.com>

*           Marc Dietrich <marvin24@gmx.de>

*

* Based on alc5623.c by Arnaud Patard

/*

 * ALC5632 register cache

 R2   - Speaker Output Volume */

 R4   - Headphone Output Volume */

 R6   - AUXOUT Volume */

 R8   - Phone Input */

 R10  - LINE_IN Volume */

 R12  - STEREO DAC Input Volume */

 R14  - MIC Input Volume */

 R16  - Stereo DAC and MIC Routing Control */

 R18  - ADC Record Gain */

 R20  - ADC Record Mixer Control */

 R24  - Voice DAC Volume */

 R28  - Output Mixer Control */

 R34  - Microphone Control */

	{  36, 0x00C0 },    /* R36  - Codec Digital MIC/Digital Boost

	{  46, 0x0000 },	/* R46  - Stereo DAC/Voice DAC/Stereo ADC

	{  52, 0x8000 },	/* R52  - Main Serial Data Port Control

	{  54, 0x0000 },	/* R54  - Extend Serial Data Port Control

 R58  - Power Management Addition 1 */

 R60  - Power Management Addition 2 */

 R62  - Power Management Addition 3 */

 R64  - General Purpose Control Register 1 */

 R66  - General Purpose Control Register 2 */

 R68  - PLL1 Control */

 R70  - PLL2 Control */

 R76  - GPIO Pin Configuration */

 R78  - GPIO Pin Polarity */

 R80  - GPIO Pin Sticky */

 R82  - GPIO Pin Wake Up */

 R86  - Pin Sharing */

 R90  - Soft Volume Control Setting */

 R92  - GPIO_Output Pin Control */

 R94  - MISC Control */

 R96  - Stereo DAC Clock Control_1 */

 R98  - Stereo DAC Clock Control_2 */

 R100 - VoDAC_PCM Clock Control_1 */

	{ 104, 0x0553 },	/* R104 - Pseudo Stereo and Spatial Effect

 R106 - Private Register Address */

 codec private data */

 to power-on/off class-d amp generators/speaker */

 need to write to 'index-46h' register :        */

 so write index num (here 0x46) to reg 0x6a     */

 and then 0xffff/0 to reg 0x6c                  */

/*

 * ALC5632 Controls

 -34.5db min scale, 1.5db steps, no mute */

 -46.5db min scale, 1.5db steps, no mute */

 -16.5db min scale, 1.5db steps, no mute */

 0db min scale, 6 db steps, no mute */

 0db min scalem 0.75db steps, no mute */

 left starts at bit 8, right at bit 0 */

 31 steps (5 bit), -46.5db scale */

 bit 15 mutes left, bit 7 right */

/*

 * DAPM Controls

 Left Record Mixer */

 Right Record Mixer */

 Dmic Mixer */

 auxout output mux */

 speaker output mux */

 headphone left output mux */

 headphone right output mux */

 speaker output N select */

 speaker amplifier */

 ADC output select */

 I2S out select */

 Muxes */

 output mixers */

 input mixers */

 Playback streams */

 virtual mixer - mixes left & right channels */

 DAC */

 HP mixer */

 speaker mixer */

 mono mixer */

 Left record mixer */

Right record mixer */

 headphone left mux */

 headphone right mux */

 speaker out mux */

 Mono/Aux Out mux */

 output pga */

 input pga */

 left ADC */

 right ADC */

 Digital I2S out */

 Voice Mix */

 Speaker Output */

 PLL divisors */

 Note : pll code from original alc5632 driver. Not sure of how good it is */

 useful only for master mode */

/* FOUT = MCLK*(N+2)/((M+2)*(K+2))

   N: bit 15:8 (div 2 .. div 257)

   K: bit  6:4 typical 2

   M: bit  3:0 (div 2 .. div 17)



   same as for 5623 - thanks!

 Disable PLL power */

 pll is not used in slave mode */

 PLL source from MCLK */

 PLL source from Bitclk */

 PLL source from voice clock */

 choose MCLK/BCLK/VBCLK */

 choose PLL1 clock rate */

 enable PLL1 */

 enable PLL2 */

 use PLL1 as main SYSCLK */

 codec hifi mclk (after PLL) clock divider coefficients */

 values inspired from column BCLK=32Fs of Appendix A table */

/*

 * Clock after PLL and dividers

 set audio interface clocking */

 interface format */

 clock inversion */

 bit size */

 set iface & srate */

 "normal" mode: 0 @ 26 */

 set all PR0-7 mixers to 0 */

 disable HP Depop2 */

 everything off except vref/vmid, */

 "normal" mode: 0 @ 26 */

 everything off, dac mute, inactive */

/*

 * alc5632 2 wire address is determined by A1 pin

 * state during powerup.

 *    low  = 0x1a

 *    high = 0x1b

 i2c codec control layer */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * max98371.c -- ALSA SoC Stereo MAX98371 driver

 *

 * Copyright 2015-16 Maxim Integrated Products

 BCLK/LRCLK ratio calculation */

 enabling both the RX channels*/

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ADAU1977/ADAU1978/ADAU1979 driver

 *

 * Copyright 2014 Analog Devices Inc.

 *  Author: Lars-Peter Clausen <lars@metafoo.de>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8750.c -- WM8750 ALSA SoC audio driver

 *

 * Copyright 2005 Openedhand Ltd.

 *

 * Author: Richard Purdie <richard@openedhand.com>

 *

 * Based on WM8753.c

/*

 * wm8750 register cache

 * We can't read the WM8750 register space when we

 * are using 2 wire for device control, so we cache them instead.

 codec private data */

/*

 * WM8750 Controls

 10 */

 16 */

 Unimplemented */

 ADCDAC Bit 0 - ADCHPD */

 ADCDAC Bit 4 - HPOR */

 ADCTL1 Bit 2,3 - DATSEL */

 ADCTL1 Bit 4,5 - DMONOMIX */

 ADCTL1 Bit 6,7 - VSEL */

 ADCTL2 Bit 2 - LRCM */

 ADCTL2 Bit 3 - TRI */

 ADCTL3 Bit 5 - HPFLREN */

 ADCTL3 Bit 6 - VROI */

 ADCTL3 Bit 7,8 - ADCLRM */

 ADCIN Bit 4 - LDCM */

 ADCIN Bit 5 - RDCM */

/*

 * DAPM Controls

 Left Mixer */

 Right Mixer */

 Mono Mixer */

 Left Line Mux */

 Right Line Mux */

 Left PGA Mux */

 Right PGA Mux */

 Out 3 Mux */

 Differential Mux */

 Mono ADC Mux */

 left mixer */

 right mixer */

 left out 1 */

 left out 2 */

 right out 1 */

 right out 2 */

 mono mixer */

 mono out */

 out 3 */

 Left Line Mux */

 Right Line Mux */

 Left PGA Mux */

 Right PGA Mux */

 Differential Mux */

 Left ADC Mux */

 Right ADC Mux */

 ADC */

 codec hifi mclk clock divider coefficients */

 8k */

 11.025k */

 16k */

 22.05k */

 32k */

 44.1k */

 48k */

 88.2k */

 96k */

 set master/slave audio interface */

 interface format */

 clock inversion */

 bit size */

 set iface & srate */

 set vmid to 50k and unmute dac */

 Set VMID to 5k */

 ...and ramp */

 mute dac and set vmid to 500k, enable VREF */

 set the update bits */

 CONFIG_SPI_MASTER */

 SPDX-License-Identifier: GPL-2.0



 mt6359.c  --  mt6359 ALSA SoC audio codec driver



 Copyright (c) 2020 MediaTek Inc.

 Author: KaiChieh Chuang <kaichieh.chuang@mediatek.com>

 set gpio mosi mode, clk / data mosi */

 sync mosi */

	/* set pad_aud_*_mosi to GPIO mode and dir input

	 * reason:

	 * pad_aud_dat_mosi*, because the pin is used as boot strap

	 * don't clean clk/sync, for mtkaif protocol 2

 set gpio miso mode */

	/* set pad_aud_*_miso to GPIO mode and dir input

	 * reason:

	 * pad_aud_clk_miso, because when playback only the miso_clk

	 * will also have 26m, so will have power leak

	 * pad_aud_dat_miso*, because the pin is used as boot strap

 use only when doing mtkaif calibraiton at the boot time */

 use only when doing mtkaif calibraiton at the boot time */

 Enable/disable CLKSQ 26MHz */

 use only when doing mtkaif calibraiton at the boot time */

 use only when doing mtkaif calibraiton at the boot time */

 MTKAIF TX format setting */

 enable aud_pad TX fifos */

 MTKAIF TX format setting */

 enable aud_pad TX fifos */

 MTKAIF TX format setting */

 enable aud_pad TX fifos */

 disable aud_pad TX fifos */

 set dat_miso_loopback on */

 set dat_miso_loopback off */

 Enable/Reduce HPL/R main output stage step by step */

 Enable/Reduce HP aux feedback loop gain step by step */

 Set input diff pair bias select (Hi-Fi mode) */

 Reduce HP aux feedback loop gain step by step */

 MUX */

 LOL MUX */

HP MUX */

 RCV MUX */

 DAC In MUX */

 AIF Out MUX */

 ul1 ch2 use RG_DMIC_ADC3_SOURCE_SEL */

 ul2 ch1 use RG_DMIC_ADC2_SOURCE_SEL */

 ADC L MUX */

 ADC R MUX */

 ADC 3 MUX */

 sdm audio fifo clock power on */

 scrambler clock on enable */

 sdm power on */

 sdm fifo enable */

 DL scrambler disabling sequence */

 Set HP DR bias current optimization, 010: 6uA */

 Set HP & ZCD bias current optimization */

 01: ZCD: 4uA, HP/HS/LO: 5uA */

 Set HP DR bias current optimization, 001: 5uA */

 Set HP & ZCD bias current optimization */

 00: ZCD: 3uA, HP/HS/LO: 4uA */

 HP damp circuit enable */

 Enable HPRN/HPLN output 4K to VCM */

 HP Feedback Cap select 2'b00: 15pF */

 for >= 96KHz sampling rate: 2'b01: 10.5pF */

 Set HPP/N STB enhance circuits */

 Enable HP aux output stage */

 Enable HP aux feedback loop */

 Enable HP aux CMFB loop */

 Enable HP driver bias circuits */

 Enable HP driver core circuits */

 Short HP main output to HP aux output stage */

 Increase HP input pair current to HPM step by step */

 Enable HP main CMFB loop */

 Disable HP aux CMFB loop */

 Enable HP main output stage */

 Enable HPR/L main output stage step by step */

 Reduce HP aux feedback loop gain */

 Disable HP aux feedback loop */

 apply volume setting */

 Disable HP aux output stage */

 Unshort HP main output to HP aux output stage */

 Enable AUD_CLK */

 Enable Audio DAC  */

 Enable low-noise mode of DAC */

 Disable low-noise mode of DAC */

 Switch HPL MUX to audio DAC */

 Switch HPR MUX to audio DAC */

 Disable Pull-down HPL/R to AVSS28_AUD */

 Pull-down HPL/R to AVSS28_AUD */

 HPR/HPL mux to open */

 Disable low-noise mode of DAC */

 Disable Audio DAC */

 Disable AUD_CLK */

 Short HP main output to HP aux output stage */

 Enable HP aux output stage */

 decrease HPL/R gain to normal gain step by step */

 Enable HP aux feedback loop */

 Reduce HP aux feedback loop gain */

 decrease HPR/L main output stage step by step */

 Disable HP main output stage */

 Enable HP aux CMFB loop */

 Disable HP main CMFB loop */

 Decrease HP input pair current to 2'b00 step by step */

 Unshort HP main output to HP aux output stage */

 Disable HP driver core circuits */

 Disable HP driver bias circuits */

 Disable HP aux CMFB loop */

 Disable HP aux feedback loop */

 Disable HP aux output stage */

 Disable handset short-circuit protection */

 Set RCV DR bias current optimization, 010: 6uA */

 Set RCV & ZCD bias current optimization */

 01: ZCD: 4uA, HP/HS/LO: 5uA */

 Set HS STB enhance circuits */

 Set HS output stage (3'b111 = 8x) */

 Enable HS driver bias circuits */

 Enable HS driver core circuits */

 Set HS gain to normal gain step by step */

 Enable AUD_CLK */

 Enable Audio DAC  */

 Enable low-noise mode of DAC */

 Switch HS MUX to audio DAC */

 HS mux to open */

 Disable Audio DAC */

 Disable AUD_CLK */

 decrease HS gain to minimum gain step by step */

 Disable HS driver core circuits */

 Disable HS driver bias circuits */

 Disable handset short-circuit protection */

 Set LO DR bias current optimization, 010: 6uA */

 Set LO & ZCD bias current optimization */

 01: ZCD: 4uA, HP/HS/LO: 5uA */

 Set LO STB enhance circuits */

 Enable LO driver bias circuits */

 Enable LO driver core circuits */

 Set LO gain to normal gain step by step */

 Enable AUD_CLK */

 Enable Audio DAC (3rd DAC) */

 Enable low-noise mode of DAC */

 Switch LOL MUX to audio 3rd DAC */

 Switch LOL MUX to open */

 Disable Audio DAC */

 Disable AUD_CLK */

 decrease LO gain to minimum gain step by step */

 Disable LO driver core circuits */

 Disable LO driver bias circuits */

 ADC CLK from CLKGEN (6.5MHz) */

 DCC 50k CLK (from 26M) */

 MT6359_AFE_DCCLK_CFG0, bit 3 for dm ck swap */

 DMIC enable */

 MISBIAS0 = 1P9V */

 normal power select */

 Disable MICBIAS0, MISBIAS0 = 1P7V */

 MISBIAS1 = 2P6V */

 normal power select */

 MISBIAS2 = 1P9V */

 normal power select */

 Disable MICBIAS2, MISBIAS0 = 1P7V */

 UL dmic setting */

 default one wire, 3.25M */

 default two wire, 3.25M */

 Audio L preamplifier DCC precharge off */

 Audio R preamplifier DCC precharge off */

 Audio R preamplifier DCC precharge off */

 Audio L preamplifier DCC precharge */

 set mic pga gain */

 L preamplifier DCCEN */

 L preamplifier DCCEN */

 Audio R preamplifier DCC precharge */

 set mic pga gain */

 R preamplifier DCCEN */

 R preamplifier DCCEN */

 Audio 3 preamplifier DCC precharge */

 set mic pga gain */

 3 preamplifier DCCEN */

 3 preamplifier DCCEN */

 It is based on hw's control sequenece to add some delay when PMU/PMD */

 Set HPR/HPL gain to -22dB */

 Set HPL/HPR gain to mute */

 Disable HP damping circuit & HPN 4K load */

 reset CMFB PW level */

 Reduce ESD resistance of AU_REFN */

 Increase ESD resistance of AU_REFN */

 sdm audio fifo clock power on */

 scrambler clock on enable */

 sdm power on */

 sdm fifo enable */

 DL scrambler disabling sequence */

 sdm audio fifo clock power on */

 scrambler clock on enable */

 sdm power on */

 sdm fifo enable */

 DL scrambler disabling sequence */

 DAPM Widgets */

 Global Supply*/

 Digital Clock */

 ch123 share SDM FIFO CLK */

 AFE ON */

 AIF Rx*/

 DL Supply */

 DAC */

 Headphone */

 Receiver */

 LOL */

 Outputs */

 SGEN */

 Uplinks */

 Uplinks MUX */

 UL input */

 mic bias */

 dmic */

 Capture */

	/*

	 * *_ADC_CTL should enable only if UL_SRC in use,

	 * but dm ck may be needed even UL_SRC_x not in use

 ul ch 12 */

 adc */

	/*

	 * amic fifo ch1/2 clk from ADC_L,

	 * enable ADC_L even use ADC_R only

 DL Supply */

 DL Digital Supply */

 DL Path */

 DAC 3RD */

 Lineout Path */

 Headphone Path */

 Receiver Path */

 enable clk buf */

 set those not controlled by dapm widget */

 audio clk source from internal dcxo */

 Disable HeadphoneL/HeadphoneR short circuit protection */

 Disable voice short circuit protection */

 disable LO buffer left short circuit protection */

 set gpio */

 hp hifi mode, default normal mode */

 Disable AUD_ZCD */

 disable clk buf */

 dl pga gain */

 ul pga gain */

 Module information */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2017, Maxim Integrated

 interface format */

 BCLKs per LRCLK */

 match BCLKs per LRCLK */

 BCLK/LRCLK ratio calculation */

 BCLK configuration */

 pcm mode configuration */

 sampling rate configuration */

 set DAI_SR to correct LRCLK frequency */

 set sampling rate of IV */

 BCLK configuration */

 Channel size configuration */

 Rx slot configuration */

 Tx slot Hi-Z configuration */

 cache feedback register values before suspend */

 update interleave mode info */

 regmap initialization */

 voltage/current slot & gpio configuration */

 Power on device */

 Check Revision ID */

 codec registration */

 SPDX-License-Identifier: GPL-2.0



 rt711.c -- rt711 ALSA SoC audio driver



 Copyright(c) 2019 Realtek Semiconductor Corp.





 Calibration manual mode */

 trigger */

 wait for calibration process */

 depop mode */

 pin attached */

 jack in */

 jack is already in, report button event */

 jack out */

 button released */

 pin attached */

 jack is already in, report button event */

 cbj comparator */

 button released */

 power on */

 unsolicited response & IRQ control */

 default settings was already for JD1 */

 power off */

 R Channel */

 L Channel */

 For Verb-Set Amplifier Gain (Verb ID = 3h) */

 Can't use update bit function, so read the original value first */

 output */

 input */

 L Channel */

 for mute/unmute */

 keep gain */

 for gain */

 keep mute status */

 R Channel */

 for mute/unmute */

 keep gain */

 for gain */

 keep mute status */

 retry 3 times at most */

 Set both L/R channels at the same time */

 Lch*/

 Rch */

 check result */

 output */

 input */

 switch to get command */

 output */

 input */

 mute/unmute for switch controls */

 for gain volume controls */

 vid = 0xf01 */

 Verb ID = 0x701h */

 Use tx_mask or rx_mask to configure stream tag and set dma_data */

 SoundWire specific configuration */

 bit 3:0 Number of Channel */

 bit 6:4 Bits per Sample */

 48Khz */

 Bus clock frequency */

	/*

	 * Mark hw_init to false

	 * HW init will be performed when device reports present

 JD source uses JD2 in default */

	/*

	 * PM runtime is only enabled when a Slave reports as Attached

 set autosuspend parameters */

 update count of parent 'active' children */

 make sure the device does not suspend immediately */

 power on */

 Set Pin Widget */

 Mute HP/ADC1/ADC2 */

 Set Configuration Default */

 Data port arrangement */

 Set index */

 Finish Initial Settings, set power to D3 */

	/*

	 * if set_jack callback occurred early than io_init,

	 * we set up the jack detection function now

 Mark Slave initialization complete */

 SPDX-License-Identifier: GPL-2.0-only



 rt5682s.c  --  RT5682I-VS ALSA SoC audio component driver



 Copyright 2021 Realtek Semiconductor Corp.

 Author: Derek Fang <derek.fang@realtek.com>



/**

 * rt5682s_headset_detect - Detect headset.

 * @component: SoC audio component device.

 * @jack_insert: Jack insert or not.

 *

 * Detect whether is headset or not when jack inserted.

 *

 * Returns detect status.

 jack in */

 jack was out, report jack type */

 jack is already in, report button event */

			/**

			 * rt5682s can report three kinds of button behavior,

			 * one click, double click and hold. However,

			 * currently we will report button pressed/released

			 * event. So all the three button behaviors are

			 * treated as button pressed.

 unpressed */

 jack out */

 jack out */

 DAC Digital Volume */

 CBJ Boost Volume */

 ADC Digital Volume Control */

 ADC Boost Volume Control */

/**

 * rt5682s_sel_asrc_clk_src - select ASRC clock source for a set of filters

 * @component: SoC audio component device.

 * @filter_mask: mask of filters.

 * @clk_src: clock source

 *

 * The ASRC function is for asynchronous MCLK and LRCK. Also, since RT5682S can

 * only support standard 32fs or 64fs i2s format, ASRC should be enabled to

 * support special i2s clock format such as Intel's 100fs(100 * sampling rate).

 * ASRC function will track i2s clock and generate a corresponding system clock

 * for codec. This function provides an API to select the clock source for a

 * set of filters specified by the mask. And the component driver will turn on

 * ASRC for these filters if ASRC is selected as their clock source.

/**

 * set_dmic_clk - Set parameter of dmic.

 *

 * @w: DAPM widget.

 * @kcontrol: The kcontrol of this widget.

 * @event: Event id.

 *

 * Choose dmic clock between 1MHz and 3MHz.

 * It is better for clock to approximate 3MHz.

 select over sample rate */

Add delay to avoid pop noise*/

 Interface data select */

 Digital Mixer */

 Analog Input Mixer */

 STO1 ADC1 Source */

 MX-26 [13] [5] */

 STO1 ADC Source */

 MX-26 [11:10] [3:2] */

 STO1 ADC2 Source */

 MX-26 [12] [4] */

 MX-79 [6:4] I2S1 ADC data location */

 Analog DAC L1 Source, Analog DAC R1 Source*/

 MX-2B [4], MX-2B [0]*/

 PLL Powers */

 ASRC */

 Input Side */

 Input Lines */

 Boost */

 REC Mixer */

 ADCs */

 ADC Mux */

 ADC Mixer */

 ADC PGA */

 Digital Interface */

 Digital Interface Select */

 Audio Interface */

 Output Side */

 DAC mixer before sound effect  */

 DAC channel Mux */

 DAC Mixer */

 DACs */

 HPO */

 CLK DET */

 SAR */

 Output Lines */

PLL*/

ASRC*/

 mono mode */

 mono mode */

 Look at PLLA table */

 Look at PLLB table */

 Find a combination of PLLA & PLLB */

 Only need to power PLLB due to the rate set restriction */

	/*

	 * Only accept to set wclk rate to 44.1k or 48kHz.

	/*

	 * Only accept to set wclk rate to 44.1k or 48kHz.

	 * It will force to 48kHz if not both.

	/*

	 * Whether the wclk's parent clk (mclk) exists or not, please ensure

	 * it is fixed or set to 48MHz before setting wclk rate. It's a

	 * temporary limitation. Only accept 48MHz clk as the clk provider.

	 *

	 * It will set the codec anyway by assuming mclk is 48MHz.

	/*

	 * To achieve the rate conversion from 48MHz to 44.1k or 48kHz,

	 * PLL2 is needed.

	/*

	 * BCLK rates are set as a multiplier of WCLK in HW.

	 * We don't allow changing the parent WCLK. We just do

	 * some rounding down based on the parent WCLK rate

	 * and find the appropriate multiplier of BCLK to

	 * get the rounded down BCLK value.

 Make MCLK the parent of WCLK */

 Make WCLK the parent of BCLK */

 Check if MCLK provided */

 Register CCF DAI clock control */

 Initial setup for CCF */

 CONFIG_COMMON_CLK */

 restore settings */

 Sleep for 50 ms minimum */

 DMIC data pin */

 share with LRCK2 */

 share with DACDAT1 */

 DMIC clk pin */

 share with IRQ */

 share with BCLK2 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ALSA SoC TLV320AIC23 codec driver I2C interface

 *

 * Author:      Arun KS, <arunks@mistralsolutions.com>

 * Copyright:   (C) 2008 Mistral Solutions Pvt Ltd.,

 *

 * Based on sound/soc/codecs/wm8731.c by Richard Purdie

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8993.c -- WM8993 ALSA SoC audio driver

 *

 * Copyright 2009-12 Wolfson Microelectronics plc

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 R1   - Power Management (1) */

 R2   - Power Management (2) */

 R3   - Power Management (3) */

 R4   - Audio Interface (1) */

 R5   - Audio Interface (2) */

 R6   - Clocking 1 */

 R7   - Clocking 2 */

 R8   - Audio Interface (3) */

 R9   - Audio Interface (4) */

 R10  - DAC CTRL */

 R11  - Left DAC Digital Volume */

 R12  - Right DAC Digital Volume */

 R13  - Digital Side Tone */

 R14  - ADC CTRL */

 R15  - Left ADC Digital Volume */

 R16  - Right ADC Digital Volume */

 R18  - GPIO CTRL 1 */

 R19  - GPIO1 */

 R20  - IRQ_DEBOUNCE */

 R21  - Inputs Clamp */

 R22  - GPIOCTRL 2 */

 R23  - GPIO_POL */

 R24  - Left Line Input 1&2 Volume */

 R25  - Left Line Input 3&4 Volume */

 R26  - Right Line Input 1&2 Volume */

 R27  - Right Line Input 3&4 Volume */

 R28  - Left Output Volume */

 R29  - Right Output Volume */

 R30  - Line Outputs Volume */

 R31  - HPOUT2 Volume */

 R32  - Left OPGA Volume */

 R33  - Right OPGA Volume */

 R34  - SPKMIXL Attenuation */

 R35  - SPKMIXR Attenuation */

 R36  - SPKOUT Mixers */

 R37  - SPKOUT Boost */

 R38  - Speaker Volume Left */

 R39  - Speaker Volume Right */

 R40  - Input Mixer2 */

 R41  - Input Mixer3 */

 R42  - Input Mixer4 */

 R43  - Input Mixer5 */

 R44  - Input Mixer6 */

 R45  - Output Mixer1 */

 R46  - Output Mixer2 */

 R47  - Output Mixer3 */

 R48  - Output Mixer4 */

 R49  - Output Mixer5 */

 R50  - Output Mixer6 */

 R51  - HPOUT2 Mixer */

 R52  - Line Mixer1 */

 R53  - Line Mixer2 */

 R54  - Speaker Mixer */

 R55  - Additional Control */

 R56  - AntiPOP1 */

 R57  - AntiPOP2 */

 R58  - MICBIAS */

 R60  - FLL Control 1 */

 R61  - FLL Control 2 */

 R62  - FLL Control 3 */

 R63  - FLL Control 4 */

 R64  - FLL Control 5 */

 R65  - Clocking 3 */

 R66  - Clocking 4 */

 R67  - MW Slave Control */

 R69  - Bus Control 1 */

 R70  - Write Sequencer 0 */

 R71  - Write Sequencer 1 */

 R72  - Write Sequencer 2 */

 R73  - Write Sequencer 3 */

 R74  - Write Sequencer 4 */

 R75  - Write Sequencer 5 */

 R76  - Charge Pump 1 */

 R81  - Class W 0 */

 R85  - DC Servo 1 */

 R87  - DC Servo 3 */

 R96  - Analogue HP 0 */

 R98  - EQ1 */

 R99  - EQ2 */

 R100 - EQ3 */

 R101 - EQ4 */

 R102 - EQ5 */

 R103 - EQ6 */

 R104 - EQ7 */

 R105 - EQ8 */

 R106 - EQ9 */

 R107 - EQ10 */

 R108 - EQ11 */

 R109 - EQ12 */

 R110 - EQ13 */

 R111 - EQ14 */

 R112 - EQ15 */

 R113 - EQ16 */

 R114 - EQ17 */

 R115 - EQ18 */

 R116 - EQ19 */

 R117 - EQ20 */

 R118 - EQ21 */

 R119 - EQ22 */

 R120 - EQ23 */

 R121 - EQ24 */

 R122 - Digital Pulls */

 R123 - DRC Control 1 */

 R124 - DRC Control 2 */

 R125 - DRC Control 3 */

 R126 - DRC Control 4 */

 *10 due to .5s */

/* The size in bits of the FLL divide multiplied by 10

 Fref must be <=13.5MHz */

 Apply the division for our remaining calculations */

 Fvco should be 90-100MHz; don't check the upper bound */

 Find an appropriate FLL_FRATIO and factor it out of the target */

 Now, calculate N.K */

 Calculate fractional part - scale up so we can round. */

 Move down to proper range now rounding is done */

 Any change? */

 Disable the FLL */

	/* Any FLL configuration change requires that the FLL be

 Apply the configuration */

 If we've got an interrupt wired up make sure we get it */

 Enable the FLL */

 This should be done on init() for bypass paths */

 VMID=2*40k */

 Bring up VMID with fast soft start */

			/* If either line output is single ended we

 VMID=2*40k */

 Switch to normal bias */

 VMID=2*240k */

 frame inversion not valid for DSP modes */

 What BCLK do we need? */

 Select nearest CLK_SYS_RATE */

 SAMPLE_RATE */

 Closest match */

 BCLK_DIV */

 Table is sorted */

 LRCLK is a simple fraction of BCLK */

 ReTune Mobile? */

 Disable EQ while we reconfigure */

 Don't need to validate anything if we're turning off TDM */

	/* Note that we allow configurations we can't handle ourselves - 

	 * for example, we can generate clocks for slots 2 and up even if

	 * we can't use those slots ourselves.

 The IRQ pin status is visible in the register too */

 Latch volume update bits and default ZC on */

	/* Manualy manage the HPOUT sequencing for independent stereo

 Use automatic clock configuration */

	/* If the line outputs are differential then we aren't presenting

	 * VMID as an output and can disable it.

 Stop the FLL in an orderly fashion */

 Restart the FLL? */

 Tune DC servo configuration */

 Put GPIO1 into interrupt mode (only GPIO1 can output IRQ) */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2016, The Linux Foundation. All rights reserved.

 Codec supports 2 IIR filters */

 Codec supports 5 bands */

 RX1 MIX1 */

 RX2 MIX1 */

 RX3 MIX1 */

 RX1 MIX2 */

 RX2 MIX2 */

 DEC */

 CIC */

 RDAC2 MUX */

 Digital Gain control -38.4 dB to +38.4 dB in 0.3 dB steps */

 Cutoff Freq for High Pass Filter at -3dB */

 cut off for dc blocker inside rx chain */

 Address does not automatically update if reading */

 Mask bits top 2 bits since they are reserved */

 Mask top 2 bits, 7-8 are reserved */

 Mask top bit it is reserved */

 Updates addr automatically for each B2 write */

 apply the digital gain after the interpolator is enabled */

 Enable TX digital mute */

 set cut of freq to CF_MIN_3DB_150HZ (0x1) */

 enable HPF */

 apply the digital gain after the decimator is enabled */

 get dmic number out of widget name */

RX stuff */

 Interpolator */

 TX */

 Digital Mic Inputs */

 Connectivity Clock */

 Sidetone */

 Decimator Inputs */

 RX1 PATH.. */

 RX2 PATH */

 RX3 PATH */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cs35l35.c -- CS35L35 ALSA SoC audio driver

 *

 * Copyright 2017 Cirrus Logic, Inc.

 *

 * Author: Brian Austin <brian.austin@cirrus.com>

/*

 * Some fields take zero as a valid value so use a high bit flag that won't

 * get written to the device to mark those.

 Already muted, so disable volume ramp for faster shutdown */

 If in PDM mode we must use VP for Voltage control */

		/*

		 * If PDM mode we should switch back to pdata value

		 * for Voltage control when we go down

 SYSCLK, Sample Rate, Serial Port Cfg */

	/*

	 * Rev A0 Errata

	 * When configured for the weak-drive detection path (CH_WKFET_DIS = 0)

	 * the Class H algorithm does not enable weak-drive operation for

	 * nonzero values of CH_WKFET_DELAY if SP_RATE = 01 or 10

	/*

	 * You can pull more Monitor data from the SDOUT pin than going to SDIN

	 * Just make sure your SCLK is fast enough to fill the frame

		/* We have to take the SCLK to derive num sclks

		 * to configure the CLOCK_CTL3 register correctly

 Only certain ratios supported when device is a clock consumer */

 Only certain ratios supported when device is a clock provider */

 Need the SCLK Frequency regardless of sysclk source for I2S */

	/*

	 * Digital Boost Converter Configuration for feedback,

	 * ramping, switching frequency, and estimation block seeding.

 1 uH */

 1.2 uH */

 1.5uH */

 2.2uH */

 Set Platform Data */

 ack the irq by reading all status registers */

 Check to see if unmasked bits are active */

 read the current values */

 handle the interrupts */

 error is no longer asserted; safe to reset */

 error is no longer asserted; safe to reset */

 error is no longer asserted; safe to reset */

 error is no longer asserted; safe to reset */

 frame depth location */

 Errata Rev A0 */

 returning NULL can be valid if in stereo mode */

 initialize codec */

 Set the INT Masks for critical errors */

 SPDX-License-Identifier: GPL-2.0



 mt6358.c  --  mt6358 ALSA SoC audio codec driver



 Copyright (c) 2018 MediaTek Inc.

 Author: KaiChieh Chuang <kaichieh.chuang@mediatek.com>

 Supply widget subseq */

 common */

 capture */

 set gpio mosi mode */

	/* set pad_aud_*_mosi to GPIO mode and dir input

	 * reason:

	 * pad_aud_dat_mosi*, because the pin is used as boot strap

	 * don't clean clk/sync, for mtkaif protocol 2

 set gpio miso mode */

	/* set pad_aud_*_miso to GPIO mode and dir input

	 * reason:

	 * pad_aud_clk_miso, because when playback only the miso_clk

	 * will also have 26m, so will have power leak

	 * pad_aud_dat_miso*, because the pin is used as boot strap

 use only when not govern by DAPM */

 use only when not govern by DAPM */

 audio clk source from internal dcxo */

 Enable/disable CLKSQ 26MHz */

 use only when not govern by DAPM */

 use only when not govern by DAPM */

 MTKAIF TX format setting */

 enable aud_pad TX fifos */

 MTKAIF TX format setting */

 enable aud_pad TX fifos */

 MTKAIF TX format setting */

 enable aud_pad TX fifos */

 disable aud_pad TX fifos */

 set dat_miso_loopback on */

 set dat_miso_loopback off */

 dl pga gain */

 Enable/Reduce HPL/R main output stage step by step */

 Reduce HP aux feedback loop gain step by step */

 analog */

 digital */

 digital */

 analog */

 dl pga gain */

 ul pga gain */

 MUX */

 LOL MUX */

HP MUX */

 RCV MUX */

 DAC In MUX */

 AIF Out MUX */

 Mic Type MUX */

 ADC L MUX */

 ADC R MUX */

 PGA L MUX */

 PGA R MUX */

 audio clk source from internal dcxo */

 sdm audio fifo clock power on */

 scrambler clock on enable */

 sdm power on */

 sdm fifo enable */

 DL scrambler disabling sequence */

 sdm audio fifo clock power on */

 scrambler clock on enable */

 sdm power on */

 sdm fifo enable */

 DL scrambler disabling sequence */

 Pull-down HPL/R to AVSS28_AUD */

 release HP CMFB gate rstb */

 Reduce ESD resistance of AU_REFN */

 Set HPR/HPL gain as minimum (~ -40dB) */

 Turn on DA_600K_NCP_VA18 */

 26MHz/43 = 604KHz */

 Toggle RG_DIVCKS_CHG */

 Set NCP soft start mode as default mode: 100us */

 Enable NCP */

 Enable cap-less LDOs (1.5V) */

 Enable NV regulator (-1.2V) */

 Disable AUD_ZCD */

 Disable headphone short-circuit protection */

 Enable IBIST */

 Set HP DR bias current optimization, 010: 6uA */

 Set HP & ZCD bias current optimization */

 01: ZCD: 4uA, HP/HS/LO: 5uA */

 Set HPP/N STB enhance circuits */

 Enable HP aux output stage */

 Enable HP aux feedback loop */

 Enable HP aux CMFB loop */

 Enable HP driver bias circuits */

 Enable HP driver core circuits */

 Short HP main output to HP aux output stage */

 Enable HP main CMFB loop */

 Disable HP aux CMFB loop */

 Select CMFB resistor bulk to AC mode */

 Selec HS/LO cap size (6.5pF default) */

 Enable HP main output stage */

 Enable HPR/L main output stage step by step */

 Reduce HP aux feedback loop gain */

 Disable HP aux feedback loop */

 apply volume setting */

 Disable HP aux output stage */

 Unshort HP main output to HP aux output stage */

 Enable AUD_CLK */

 Enable Audio DAC  */

 Enable low-noise mode of DAC */

 Switch HPL MUX to audio DAC */

 Switch HPR MUX to audio DAC */

 Disable Pull-down HPL/R to AVSS28_AUD */

 Pull-down HPL/R to AVSS28_AUD */

 HPR/HPL mux to open */

 Disable low-noise mode of DAC */

 Disable Audio DAC */

 Disable AUD_CLK */

 Short HP main output to HP aux output stage */

 Enable HP aux output stage */

 decrease HPL/R gain to normal gain step by step */

 Enable HP aux feedback loop */

 Reduce HP aux feedback loop gain */

 decrease HPR/L main output stage step by step */

 Disable HP main output stage */

 Enable HP aux CMFB loop */

 Disable HP main CMFB loop */

 Unshort HP main output to HP aux output stage */

 Disable HP driver core circuits */

 Disable HP driver bias circuits */

 Disable HP aux CMFB loop */

 Disable HP aux feedback loop */

 Disable HP aux output stage */

 Disable IBIST */

 Disable NV regulator (-1.2V) */

 Disable cap-less LDOs (1.5V) */

 Disable NCP */

 Increase ESD resistance of AU_REFN */

 Set HP CMFB gate rstb */

 disable Pull-down HPL/R to AVSS28_AUD */

 Pull-down HPL/R to AVSS28_AUD */

 release HP CMFB gate rstb */

 Reduce ESD resistance of AU_REFN */

 Set HPR/HPL gain to -10dB */

 Turn on DA_600K_NCP_VA18 */

 26MHz/43 = 604KHz */

 Toggle RG_DIVCKS_CHG */

 Set NCP soft start mode as default mode: 100us */

 Enable NCP */

 Enable cap-less LDOs (1.5V) */

 Enable NV regulator (-1.2V) */

 Disable AUD_ZCD */

 Disable headphone short-circuit protection */

 Enable IBIST */

 Set HP DR bias current optimization, 010: 6uA */

 Set HP & ZCD bias current optimization */

 01: ZCD: 4uA, HP/HS/LO: 5uA */

 Set HPP/N STB enhance circuits */

 Disable Pull-down HPL/R to AVSS28_AUD */

 Enable HP driver bias circuits */

 Enable HP driver core circuits */

 Enable HP main CMFB loop */

 Select CMFB resistor bulk to AC mode */

 Selec HS/LO cap size (6.5pF default) */

 Enable HP main output stage */

 Enable HPR/L main output stage step by step */

 Set LO gain as minimum (~ -40dB) */

 apply volume setting */

 Set LO STB enhance circuits */

 Enable LO driver bias circuits */

 Enable LO driver core circuits */

 Set LOL gain to normal gain step by step */

 Enable AUD_CLK */

 Enable Audio DAC  */

 Enable low-noise mode of DAC */

 Switch LOL MUX to audio DAC */

 Switch HPL/R MUX to Line-out */

 HPR/HPL mux to open */

 LOL mux to open */

 Disable Audio DAC */

 Disable AUD_CLK */

 decrease HPL/R gain to normal gain step by step */

 decrease LOL gain to minimum gain step by step */

 decrease HPR/L main output stage step by step */

 Disable HP main output stage */

 Short HP main output to HP aux output stage */

 Enable HP aux output stage */

 Enable HP aux feedback loop */

 Reduce HP aux feedback loop gain */

 Disable HP driver core circuits */

 Disable LO driver core circuits */

 Disable HP driver bias circuits */

 Disable LO driver bias circuits */

 Disable HP aux CMFB loop */

 Disable IBIST */

 Disable NV regulator (-1.2V) */

 Disable cap-less LDOs (1.5V) */

 Disable NCP */

 Set HP CMFB gate rstb */

 disable Pull-down HPL/R to AVSS28_AUD */

 already enabled, do nothing */

 still being used, don't close */

 Reduce ESD resistance of AU_REFN */

 Turn on DA_600K_NCP_VA18 */

 26MHz/43 = 604KHz */

 Toggle RG_DIVCKS_CHG */

 Set NCP soft start mode as default mode: 100us */

 Enable NCP */

 Enable cap-less LDOs (1.5V) */

 Enable NV regulator (-1.2V) */

 Disable AUD_ZCD */

 Disable handset short-circuit protection */

 Enable IBIST */

 Set HP DR bias current optimization, 010: 6uA */

 Set HP & ZCD bias current optimization */

 01: ZCD: 4uA, HP/HS/LO: 5uA */

 Set HS STB enhance circuits */

 Disable HP main CMFB loop */

 Select CMFB resistor bulk to AC mode */

 Selec HS/LO cap size (6.5pF default) */

 Enable HS driver bias circuits */

 Enable HS driver core circuits */

 Enable AUD_CLK */

 Enable Audio DAC  */

 Enable low-noise mode of DAC */

 Switch HS MUX to audio DAC */

 HS mux to open */

 Disable Audio DAC */

 Disable AUD_CLK */

 decrease HS gain to minimum gain step by step */

 Disable HS driver core circuits */

 Disable HS driver bias circuits */

 Disable HP aux CMFB loop */

 Enable HP main CMFB Switch */

 Disable IBIST */

 Disable NV regulator (-1.2V) */

 Disable cap-less LDOs (1.5V) */

 Disable NCP */

 Enable audio ADC CLKGEN  */

 ADC CLK from CLKGEN (13MHz) */

 Enable  LCLDO_ENC 1P8V */

 LCLDO_ENC remote sense */

 LCLDO_ENC remote sense off */

 disable LCLDO_ENC 1P8V */

 ADC CLK from CLKGEN (13MHz) */

 disable audio ADC CLKGEN  */

 DCC 50k CLK (from 26M) */

 mic bias 0 */

 Enable MICBIAS0, MISBIAS0 = 1P9V */

 mic bias 1 */

 Enable MICBIAS1, MISBIAS1 = 2P6V */

 Audio L/R preamplifier DCC precharge */

 reset reg */

 L preamplifier input sel */

 L preamplifier enable */

 L preamplifier DCCEN */

 L ADC input sel : L PGA. Enable audio L ADC */

 R preamplifier input sel */

 R preamplifier enable */

 R preamplifier DCCEN */

 R ADC input sel : R PGA. Enable audio R ADC */

 Audio L preamplifier DCC precharge off */

 Audio R preamplifier DCC precharge off */

 Short body to ground in PGA */

 here to set digital part */

 UL dmic setting off */

 UL turn on */

 UL turn off */

 disable aud_pad TX fifos */

 L ADC input sel : off, disable L ADC */

 L preamplifier DCCEN */

 L preamplifier input sel : off, L PGA 0 dB gain */

 disable L preamplifier DCC precharge */

 R ADC input sel : off, disable R ADC */

 R preamplifier DCCEN */

 R preamplifier input sel : off, R PGA 0 dB gain */

 disable R preamplifier DCC precharge */

 mic bias */

 Disable MICBIAS0, MISBIAS0 = 1P7V */

 Disable MICBIAS1 */

 dcclk_gen_on=1'b0 */

 dcclk_pdn=1'b1 */

 dcclk_ref_ck_sel=2'b00 */

 dcclk_div=11'b00100000011 */

 mic bias */

 Enable MICBIAS0, MISBIAS0 = 1P9V */

 RG_BANDGAPGEN=1'b0 */

 DMIC enable */

 here to set digital part */

 UL dmic setting */

 UL turn on */

 Prevent pop noise form dmic hw */

 UL turn off */

 disable aud_pad TX fifos */

 DMIC disable */

 mic bias */

 MISBIAS0 = 1P7V */

 RG_BANDGAPGEN=1'b0 */

 MICBIA0 disable */

 DAPM Widgets */

 Global Supply*/

 Digital Clock */

 AFE ON */

 AIF Rx*/

 DL Supply */

 DAC */

 LOL */

 Headphone */

 Receiver */

 Outputs */

 SGEN */

 Uplinks */

 Uplinks MUX */

 UL input */

 Capture */

 DL Supply */

 DL Digital Supply */

 DL Path */

 Lineout Path */

 Headphone Path */

 Receiver Path */

 Disable HeadphoneL/HeadphoneR short circuit protection */

 Disable voice short circuit protection */

 disable LO buffer left short circuit protection */

 accdet s/w enable */

 gpio miso driving set to 4mA */

 set gpio */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PCM3168A codec driver

 *

 * Copyright (C) 2015 Imagination Technologies Ltd.

 *

 * Author: Damien Horsley <Damien.Horsley@imgtec.com>

 ADC/DAC side parameters */

 -100db to 0db, register values 0-54 cause mute */

 -100db to 20db, register values 0-14 cause mute */

 Playback */

 Capture */

 Internal reset is de-asserted after 3846 SCKI cycles */

	/*

	 * Some sound card sets 0 Hz as reset,

	 * but it is impossible to set. Ignore it here

 S16_LE is only supported in RIGHT_J mode */

		/*

		 * If multi DIN/DOUT is not selected, RIGHT_J can only support

		 * two channels (no TDM support)

 Ignore the not relevant mask for the DAI/direction */

	/*

	 * Switch the codec to TDM mode when more than 2 TDM slots are needed

	 * for the stream.

	 * If pcm3168a->tdm_slots is not set or set to more than 2 (8/6 usually)

	 * then DIN1/DOUT1 is used in TDM mode.

	 * If pcm3168a->tdm_slots is set to 2 then DIN1/2/3/4 and DOUT1/2/3 is

	 * used in normal mode, no need to switch to TDM modes.

	/*

	 * Select below from Sound Card, not here

	 *	SND_SOC_DAIFMT_CBC_CFC

	 *	SND_SOC_DAIFMT_CBP_CFP

	/*

	 * First Priority

	/*

	 * Second Priority

	 *

	 * These have picky limitation.

	 * see

	 *	pcm3168a_hw_params()

	/*

	 * Request the reset (connected to RST pin) gpio line as non exclusive

	 * as the same reset line might be connected to multiple pcm3168a codec

	 *

	 * The RST is low active, we want the GPIO line to be high initially, so

	 * request the initial level to LOW which in practice means DEASSERTED:

	 * The deasserted level of GPIO_ACTIVE_LOW is HIGH.

		/*

		 * The device is taken out from reset via GPIO line, wait for

		 * 3846 SCKI clock cycles for the internal reset de-assertion

	/*

	 * The RST is low active, we want the GPIO line to be low when the

	 * driver is removed, so set level to 1 which in practice means

	 * ASSERTED:

	 * The asserted level of GPIO_ACTIVE_LOW is LOW.

 SPDX-License-Identifier: GPL-2.0



 cs35l41-i2c.c -- CS35l41 I2C driver



 Copyright 2017-2021 Cirrus Logic, Inc.



 Author: David Rhodes <david.rhodes@cirrus.com>

 Cirrus Logic PnP ID + part ID */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8741.c  --  WM8741 ALSA SoC Audio driver

 *

 * Copyright 2010-1 Wolfson Microelectronics plc

 *

 * Author: Ian Lartey <ian@opensource.wolfsonmicro.com>

 codec private data */

 R0  - DACLLSB Attenuation */

 R1  - DACLMSB Attenuation */

 R2  - DACRLSB Attenuation */

 R3  - DACRMSB Attenuation */

 R4  - Volume Control */

 R5  - Format Control */

 R6  - Filter Control */

 R7  - Mode Control 1 */

 R8  - Mode Control 2 */

 R32 - ADDITONAL_CONTROL_1 */

	/* The set of sample rates that can be supported depends on the

	 * MCLK supplied to the CODEC - enforce this.

 Find a supported LRCLK rate */

 bit size */

 oversampling rate */

 check master/slave audio interface */

 interface format */

 clock inversion */

 Configure differential mode */

 Change some default settings - latch VU */

 CONFIG_SPI_MASTER */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8900.c  --  WM8900 ALSA Soc Audio driver

 *

 * Copyright 2007, 2008 Wolfson Microelectronics PLC.

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 *

 * TODO:

 *  - Tristating.

 *  - TDM.

 *  - Jack detect.

 *  - FLL source configuration, currently only MCLK is supported.

 WM8900 register space */

 FLL input frequency */

 FLL output frequency */

/*

 * wm8900 register cache.  We can't read the entire register space and we

 * have slow control buses so we cache the registers.

 Clamp headphone outputs */

 Enable the input stage */

 Enable the output stage */

 Remove the shorts */

 Short the output */

 Disable the output stage */

 Clamp the outputs and power down input */

 Disable everything */

 Externally visible pins */

 Input */

 Output */

 Target, Path, Source */

 Inputs */

 Outputs */

/* Note that the headphone output stage needs to be connected

 * externally to LINEOUT2 via DC blocking capacitors.  Other

 * configurations are not supported.

 *

 * Note also that left and right headphone paths are treated as a

 * mono path.

 FLL divisors */

/* The size in bits of the FLL divide multiplied by 10

	/* The FLL must run at 90-100MHz which is then scaled down to

 Calculate fractional part - scale up so we can round. */

 Move down to proper range now rounding is done */

 The digital side should be disabled during any change. */

 Disable the FLL? */

	/* The osclilator *MUST* be enabled before we enable the

 set master/slave audio interface */

 Clock inversion */

 frame inversion not valid for DSP modes */

 Enable thermal shutdown */

 Charge capacitors if initial power up */

 STARTUP_BIAS_ENA on */

 Startup bias mode */

 VMID 2x50k */

 Allow capacitors to charge */

 Enable bias */

 Startup bias enable */

 Discharge caps */

 Remove clamp */

 Power down */

		/* Need to let things settle before stopping the clock

		 * to ensure that restart works, see "Stopping the

 Stop the FLL in an orderly fashion */

 Restart the FLL? */

 Turn the chip on */

 Latch the volume update bits */

 Set the DAC and mixer output bias */

 CONFIG_SPI_MASTER */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * TAS571x amplifier audio driver

 *

 * Copyright (C) 2015 Google, Inc.

 * Copyright (c) 2013 Daniel Mack <zonque@gmail.com>

 *

 * TAS5721 support:

 * Copyright (C) 2016 Petr Kulhavy, Barix AG <petr@barix.com>

 *

 * TAS5707 support:

 * Copyright (C) 2018 Jerome Brunet, Baylibre SAS <jbrunet@baylibre.com>

/*

 * register write for 8- and 20-byte registers

/*

 * register read for 8- and 20-byte registers

/*

 * Integer array controls for setting biquad, mixer, DRC coefficients.

 * According to the datasheet each coefficient is effectively 26bits,

 * i.e. stored as 32bits, where bits [31:26] are ignored.

 * TI's TAS57xx Graphical Development Environment tool however produces

 * coefficients with more than 26 bits. For this reason we allow values

 * in the full 32-bits reange.

 * The coefficients are ordered as given in the TAS571x data sheet:

 * b0, b1, b2, a1, a2

 MVOL LSB is ignored - see comments in tas571x_i2c_probe() */

	/*

	 * The biquads are named according to the register names.

	 * Please note that TI's TAS57xx Graphical Development Environment

	 * tool names them different.

 This entry is reused for tas5719 as the software interface is identical. */

 pulse the active low reset line for ~100us */

		/*

		 * The master volume defaults to 0x3ff (mute), but we ignore

		 * (zero) the LSB because the hardware step size is 0.125 dB

		 * and TLV_DB_SCALE_ITEM has a resolution of 0.01 dB.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cs42l52.c -- CS42L52 ALSA SoC audio driver

 *

 * Copyright 2012 CirrusLogic, Inc.

 *

 * Author: Georgi Vlaev <joe@nucleusys.com>

 * Author: Brian Austin <brian.austin@cirrus.com>

 r02 PWRCTL 1 */

 r03 PWRCTL 2 */

 r04 PWRCTL 3 */

 r05 Clocking Ctl */

 r06 Interface Ctl 1 */

 r08 Input A Select */

 r09 Input B Select */

 r0A Analog HPF Ctl */

 r0B ADC HPF Corner Freq */

 r0C Misc. ADC Ctl */

 r0D Playback Ctl 1 */

 r0E Misc. Ctl */

 r0F Playback Ctl 2 */

 r10 MICA Amp Ctl */

 r11 MICB Amp Ctl */

 r12 PGAA Vol, Misc. */

 r13 PGAB Vol, Misc. */

 r14 Bypass A Vol */

 r15 Bypass B Vol */

 r16 ADCA Volume */

 r17 ADCB Volume */

 r18 ADCA Mixer Volume */

 r19 ADCB Mixer Volume */

 r1A PCMA Mixer Volume */

 r1B PCMB Mixer Volume */

 r1C Beep Freq on Time */

 r1D Beep Volume off Time */

 r1E Beep Tone Cfg. */

 r1F Tone Ctl */

 r20 Master A Volume */

 r21 Master B Volume */

 r22 Headphone A Volume */

 r23 Headphone B Volume */

 r24 Speaker A Volume */

 r25 Speaker B Volume */

 r26 Channel Mixer and Swap */

 r27 Limit Ctl 1 Thresholds */

 r28 Limit Ctl 2 Release Rate */

 r29 Limiter Attack Rate */

 r2A ALC Ctl 1 Attack Rate */

 r2B ALC Release Rate */

 r2C ALC Thresholds */

 r2D Noise Gate Ctl */

 r2E Overflow and Clock Status */

 r2F battery Compensation */

 r30 VP Battery Level */

 r31 Speaker Status */

 r32 Temp Ctl */

 r33 Foldback */

 Limiter */

 ALC */

 Noise gate */

8k*/

11.025k*/

16k*/

22.05k*/

 32k */

 44.1k */

 48k */

 88.2k */

 96k */

 interface format */

 clock inversion */

/* For usability define a way of injecting beep events for the device -

 * many systems will not have a keyboard.

 Kick the beep from a workqueue */

 Current and threshold powerup sequence Pg37 */

 Set Platform Data */

 SPDX-License-Identifier: GPL-2.0



 ak4642.c  --  AK4642/AK4643 ALSA Soc Audio driver



 Copyright (C) 2009 Renesas Solutions Corp.

 Kuninori Morimoto <morimoto.kuninori@renesas.com>



 Based on wm8731.c by Richard Purdie

 Based on ak4535.c by Richard Purdie

 Based on wm8753.c by Liam Girdwood

/* ** CAUTION **

 *

 * This is very simple driver.

 * It can use headphone output / stereo input only

 *

 * AK4642 is tested.

 * AK4643 is tested.

 * AK4648 is tested.

 The maximum valid register for ak4642 */

 The maximum valid register for ak4643 */

 The maximum valid register for ak4648 */

 PW_MGMT1*/

 VCOM Power Management */

 MIN Input Power Management */

 DAC Power Management */

 MIC Amp Lch and ADC Lch Power Management */

 PW_MGMT2 */

 master/slave select */

 PW_MGMT3 */

 MIC L / ADC R Power Management */

 SG_SL1 */

 Switch from MIN to Speaker */

 Switch from DAC to Stereo or Receiver */

 MPWR pin Power Management */

 MIC amp gain*/

 SG_SL2 */

 Stero Line-out Power Save Mode */

 TIMER */

 ALC Zero Crossing TimeOut */

 ALC_CTL1 */

 ALC Enable */

 ALC Limiter / Recovery Level */

 MD_CTL1 */

 MD_CTL2 */

 MD_CTL3 */

 MD_CTL4 */

/*

 * Playback Volume (table 39)

 *

 * max : 0x00 : +12.0 dB

 *       ( 0.5 dB step )

 * min : 0xFE : -115.0 dB

 * mute: 0xFF

 event handlers */

 Power save mode ON */

 Power save mode OFF */

 Outputs */

 DAC */

 Outputs */

/*

 * ak4642 register cache

/* The default settings for 0x0 ~ 0x1f registers are the same for ak4642

   and ak4643. So we reuse the ak4643 reg_default for ak4642.

   The valid registers for ak4642 are 0x0 ~ 0x1f which is a subset of ak4643,

   so define NUM_AK4642_REG_DEFAULTS for ak4642.

		/*

		 * start headphone output

		 *

		 * PLL, Master Mode

		 * Audio I/F Format :MSB justified (ADC & DAC)

		 * Bass Boost Level : Middle

		 *

		 * This operation came from example code of

		 * "ASAHI KASEI AK4642" (japanese) manual p97.

 volume */

 volume */

		/*

		 * start stereo input

		 *

		 * PLL Master Mode

		 * Audio I/F Format:MSB justified (ADC & DAC)

		 * Pre MIC AMP:+20dB

		 * MIC Power On

		 * ALC setting:Refer to Table 35

		 * ALC bit=“1”

		 *

		 * This operation came from example code of

		 * "ASAHI KASEI AK4642" (japanese) manual p94.

 stop stereo input */

 use MCKO */

 set clocking for audio interface */

 format type */

	/* FIXME

	 * Please add RIGHT_J / DSP support here

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PCM179X ASoC codec driver

 *

 * Copyright (c) Amarula Solutions B.V. 2013

 *

 *     Michael Trimarchi <michael@amarulasolutions.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for generic Bluetooth SCO link

 * Copyright 2011 Lars-Peter Clausen <lars@metafoo.de>

 SPDX-License-Identifier: GPL-2.0



 Analog Devices ADAU7118 8 channel PDM-to-I2S/TDM Converter driver



 Copyright 2019 Analog Devices Inc.

 Input Enable */

 Input Enable Switches */

 PDM Clocks */

 Output channels */

 set stereo mode */

 delay bclck by 8 */

 delay bclck by 12 */

 delay bclck by 16 */

 power on */

 there's no timing constraints before enabling dvdd */

 sync cache */

 power off */

 cache only */

	/*

	 * If we fail to disable DVDD, don't bother in trying IOVDD. We

	 * actually don't want to be left in the situation where DVDD

	 * is enabled and IOVDD is disabled.

 just assume the device is in reset */

 4 inputs */

		/*

		 * Perform a full soft reset. This will set all register's

		 * with their reset values.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm0010.c  --  WM0010 DSP Driver

 *

 * Copyright 2012 Wolfson Microelectronics PLC.

 *

 * Authors: Mark Brown <broonie@opensource.wolfsonmicro.com>

 *          Dimitris Papastamos <dp@opensource.wolfsonmicro.com>

 *          Scott Ling <sl@opensource.wolfsonmicro.com>

 We only support v1 of the .dfw INFO record */

 Dividers */

 2,32,2  */

 2,64,4  */

 1,39,4  */

 1,50,4  */

 1,70,4  */

 1,64,2  */

 Called with wm0010->lock held */

 Fetch the wm0010 state */

 If there's nothing to do, bail out */

 Remember to put chip back into reset */

 Disable the regulators */

 Called with wm0010->lock held */

 First record should be INFO */

 Check it's a DSP file */

 Skip the info record as we don't need to send it */

 Store max usable spi frequency for later use */

 Copy to local buffer first as vmalloc causes problems for dma */

 Look for errors from the boot ROM */

 Release reset */

 Only initialise PLL if max_spi_freq initialised */

 Initialise a PLL record */

 On wm0010 only the CLKCTRL1 value is used */

 We need to re-order for 0010 */

 Use a second send of the message to get the return status */

 Look for PLL active code from the DSP */

 Put the chip back into reset */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ak4535.c  --  AK4535 ALSA Soc Audio driver

 *

 * Copyright 2005 Openedhand Ltd.

 *

 * Author: Richard Purdie <richard@openedhand.com>

 *

 * Based on wm8753.c by Liam Girdwood

 codec private data */

/*

 * ak4535 register cache

 Mono 1 Mixer */

 Stereo Mixer */

 Input Mixer */

 Input mux */

 HP L switch */

 HP R switch */

 mono 2 switch */

 Line out switch */

 ak4535 dapm widgets */

 speaker powersave bit */

stereo mixer */

 mono1 mixer */

 Mic */

 line out */

 mono1 out */

 left HP */

 right HP */

 speaker */

 mono 2 */

 Aux In */

 ADC */

 set fs */

 set rate */

 interface format */

 use 32 fs for BCLK to save power */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ADAU7002 Stereo PDM-to-I2S/TDM converter driver

 *

 * Copyright 2014-2016 Analog Devices

 *  Author: Lars-Peter Clausen <lars@metafoo.de>

 SPDX-License-Identifier: GPL-2.0

 Audio driver for PCM1789 I2C

 Copyright (C) 2018 Bootlin

 Mylène Josserand <mylene.josserand@bootlin.com>

 SPDX-License-Identifier: GPL-2.0-only



 ALSA SoC Audio driver for CS47L85 codec



 Copyright (C) 2015-2019 Cirrus Logic, Inc. and

                         Cirrus Logic International Semiconductor Ltd.



 Only get to here for OUT1L and OUT1R */

/*

 * Input mux widgets arranged in order of sources in MADERA_MIXER_INPUT_ROUTES

 * to take advantage of cache lookup in DAPM

 End of ordered input mux widgets */

 Internal clock domains */

 quick exit if Madera irqchip driver hasn't completed probe */

 Latch volume update bits */

 SPDX-License-Identifier: GPL-2.0-only



 ALSA SoC Audio driver for CS47L90 codec



 Copyright (C) 2015-2019 Cirrus Logic, Inc. and

                         Cirrus Logic International Semiconductor Ltd.



/*

 * mux_in widgets : arranged in the order of sources

 * specified in MADERA_MIXER_INPUT_ROUTES

 end of ordered widget list */

 Internal clock domains */

 quick exit if Madera irqchip driver hasn't completed probe */

 Latch volume update bits */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8978.c  --  WM8978 ALSA SoC Audio Codec driver

 *

 * Copyright (C) 2009-2010 Guennadi Liakhovetski <g.liakhovetski@gmx.de>

 * Copyright (C) 2007 Carlos Munoz <carlos@kenati.com>

 * Copyright 2006-2009 Wolfson Microelectronics PLC.

 * Based on wm8974 and wm8990 by Liam Girdwood <lrg@slimlogic.co.uk>

 codec private data */

 OUT1 - Headphones */

 OUT2 - Speakers */

 OUT3/4 - Line Output */

 Mixer #3: Boost (Input) mixer */

 Input PGA volume */

 Headphone */

 Speaker */

 DAC / ADC oversampling */

 Mixer #1: Output (OUT1, OUT2) Mixer: mix AUX, Input mixer output and DAC */

 OUT3/OUT4 Mixer not implemented */

 Mixer #2: Input PGA Mute */

 Mixer #1: OUT1,2 */

 Output mixer */

 Outputs */

 Boost Mixer */

 Input PGA */

 PLL divisors */

 MCLK dividers */

/*

 * find index >= idx, such that, for a given f_out,

 * 3 * f_mclk / 4 <= f_PLLOUT < 13 * f_mclk / 4

 * f_out can be f_256fs or f_opclk, currently only used for f_256fs. Can be

 * generalised for f_opclk with suitable coefficient arrays, but currently

 * the OPCLK divisor is calculated directly, not iteratively.

/*

 * Calculate internal frequencies and dividers, according to Figure 40

 * "PLL and Clock Select Circuit" in WM8978 datasheet Rev. 2.6

 Cannot set up MCLK divider now, do later */

		/*

		 * The user needs OPCLK. Choose OPCLKDIV to put

		 * 6 <= R = f2 / f1 < 13, 1 <= OPCLKDIV <= 4.

		 * f_opclk = f_mclk * prescale * R / 4 / OPCLKDIV, where

		 * prescale = 1, or prescale = 2. Prescale is calculated inside

		 * pll_factors(). We have to select f_PLLOUT, such that

		 * f_mclk * 3 / 4 <= f_PLLOUT < f_mclk * 13 / 4. Must be

		 * f_mclk * 3 / 16 <= f_opclk < f_mclk * 13 / 4.

 Have to use OPCLKDIV */

		/*

		 * Not using OPCLK, but PLL is used for the codec, choose R:

		 * 6 <= R = f2 / f1 < 13, to put 1 <= MCLKDIV <= 12.

		 * f_256fs = f_mclk * prescale * R / 4 / MCLKDIV, where

		 * prescale = 1, or prescale = 2. Prescale is calculated inside

		 * pll_factors(). We have to select f_PLLOUT, such that

		 * f_mclk * 3 / 4 <= f_PLLOUT < f_mclk * 13 / 4. Must be

		 * f_mclk * 3 / 48 <= f_256fs < f_mclk * 13 / 4. This means MCLK

		 * must be 3.781MHz <= f_MCLK <= 32.768MHz

 Turn PLL off for configuration... */

 ...and on again */

 Output PLL (OPCLK) to GPIO1 */

/*

 * Configure WM8978 clock dividers.

			/*

			 * We know the MCLK frequency, the user has requested

			 * OPCLK, configure the PLL based on that and start it

			 * and OPCLK immediately. We will configure PLL to match

			 * user-requested OPCLK frquency as good as possible.

			 * In fact, it is likely, that matching the sampling

			 * rate, when it becomes known, is more important, and

			 * we will not be reconfiguring PLL then, because we

			 * must not interrupt OPCLK. But it should be fine,

			 * because typically the user will request OPCLK to run

			 * at 256fs or 512fs, and for these cases we will also

			 * find an exact MCLK divider configuration - it will

			 * be equal to or double the OPCLK divisor.

/*

 * @freq:	when .set_pll() us not used, freq is codec MCLK input frequency

 Even if MCLK is used for system clock, might have to drive OPCLK */

 Our sysclk is fixed to 256 * fs, will configure in .hw_params()  */

 Clock CODEC directly from MCLK */

 GPIO1 into default mode as input - before configuring PLL */

 Turn off PLL */

/*

 * Set ADC and Voice DAC format.

	/*

	 * BCLK polarity mask = 0x100, LRC clock polarity mask = 0x80,

	 * Data Format mask = 0x18: all will be calculated anew

 set master/slave audio interface */

 interface format */

 clock inversion */

/*

 * Set PCM DAI bit size and sample rate.

 Word length mask = 0x60 */

 Sampling rate mask = 0xe (for filters) */

 bit size */

 filter coefficient */

 Sampling rate is known now, can configure the MCLK divider */

 We only enter here, if OPCLK is not used */

 Either MCLK is used directly, or OPCLK is used */

 OPCLK not used, codec driven by PLL */

 MCLK divisor mask = 0xe0 */

 Run CODEC from PLL instead of MCLK */

 Clock CODEC directly from MCLK */

 VMID 75k */

 bit 3: enable bias, bit 2: enable I/O tie off buffer */

 Initial cap charge at VMID 5k */

 VMID 500k */

 Preserve PLL - OPCLK may be used by someone */

 Also supports 12kHz */

 Also switch PLL off */

 Sync reg_cache with the hardware */

 Switch PLL on */

/*

 * These registers contain an "update" bit - bit 8. This means, for example,

 * that one can write new DAC digital volume for both channels, but only when

 * the update bit is set, will also the volume be updated - simultaneously for

 * both channels.

	/*

	 * Set default system clock to PLL, it is more precise, this is also the

	 * default hardware setting

	/*

	 * Set the update bit in all registers, that have one. This way all

	 * writes to those registers will also cause the update bit to be

	 * written.

 Reset the codec */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rt5616.c  --  RT5616 ALSA SoC audio codec driver

 *

 * Copyright 2015 Realtek Semiconductor Corp.

 * Author: Bard Liao <bardliao@realtek.com>

 {0, +20, +24, +30, +35, +40, +44, +50, +52} dB */

 Headphone Output Volume */

 OUTPUT Control */

 DAC Digital Volume */

 IN1/IN2 Control */

 INL/INR Volume Control */

 ADC Digital Volume Control */

 ADC Boost Volume Control */

 Digital Mixer */

 Analog Input Mixer */

 Analog Output Mixer */

 depop parameters */

 headphone amp power on */

 headphone amp power down */

 headphone unmute sequence */

 headphone mute sequence */

 Input Side */

 micbias */

 Input Lines */

 Boost */

 Input Volume */

 REC Mixer */

 ADCs */

 ADC Mixer */

 Digital Interface */

 Digital Interface Select */

 Audio Interface */

 Audio DSP */

 Output Side */

 DAC mixer before sound effect  */

 DAC Mixer */

 DACs */

 OUT Mixer */

 Output Volume */

 HPO/LOUT/Mono Mixer */

 Output Lines */

		/*

		 * SND_SOC_BIAS_PREPARE is called while preparing for a

		 * transition to ON or away from ON. If current bias_level

		 * is SND_SOC_BIAS_ON, then it is preparing for a transition

		 * away from ON. Disable the clock in that case, otherwise

		 * enable it.

 Check if MCLK provided */

 SPDX-License-Identifier: GPL-2.0



 Driver for the Texas Instruments TAS2562 CODEC

 Copyright (C) 2019 Texas Instruments Inc.

/* DVC equation involves floating point math

 * round(10^(volume in dB/20)*2^30)

 * so create a lookup table for 2dB step

 Do not change slot width */

 Digital Volume Control. From 0 dB to -110 dB in 1 dB steps */

	/*

	 * The shut-down property is deprecated but needs to be checked for

	 * backwards compatibility.

/* SPDX-License-Identifier: GPL-2.0

 *

 * Copyright 2011-2019 NW Digital Radio

 *

 * Author: Annaliese McDermond <nh6z@nh6z.net>

 *

 * Based on sound/soc/codecs/wm8974 and TI driver for kernel 2.6.27.

 *

 sentinel */ }

 senitel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rt286.c  --  RT286 ALSA SoC audio codec driver

 *

 * Copyright 2013 Realtek Semiconductor Corp.

 * Author: Bard Liao <bardliao@realtek.com>

 power on HV,VERF */

 power LDO1 */

 enable IRQ */

 Send an initial empty report */

 disable IRQ */

 Digital Mixer */

 Analog Input Mixer */

 ADC0 source */

 HP-OUT source */

 SPK-OUT source */

 Input Lines */

 DMIC */

 REC Mixer */

 ADCs */

 ADC Mux */

 Audio Interface */

 Output Side */

 DACs */

 Output Mux */

 Output Mixer */

 Output Pga */

 Output Lines */

 bit 14 0:48K 1:44.1K */

 bit 3:0 Number of Channel */

 bit 6:4 Bits per Sample */

 bit 15 Stream Type 0:PCM 1:Non-PCM */

 Clear IRQ */

 restore codec default */

 Power down LDO, VREF */

 Set depop parameter */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for ADAU1361/ADAU1461/ADAU1761/ADAU1961 codec

 *

 * Copyright 2014 Analog Devices Inc.

 *  Author: Lars-Peter Clausen <lars@metafoo.de>

	/*

	 * To get the device into SPI mode CLATCH has to be pulled low three

	 * times.  Do this by issuing three dummy reads.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Codec driver for ST STA32x 2.1-channel high-efficiency digital audio system

 *

 * Copyright: 2011 Raumfeld GmbH

 * Author: Johannes Stezenbach <js@sig21.net>

 *

 * based on code from:

 *	Wolfson Microelectronics PLC.

 *	  Mark Brown <broonie@opensource.wolfsonmicro.com>

 *	Freescale Semiconductor, Inc.

 *	  Timur Tabi <timur@freescale.com>

 Power-up register defaults */

 regulator power supply names */

 analog supply, 3.3VV */

 digital supply, 3.3V */

 power amp spply, 10V - 36V */

 codec private data */

/* byte array controls for setting biquad, mixer, scaling coefficients;

 * for biquads all five coefficients need to be set in one go,

 * mixer and pre/postscale coefs can be set individually;

 * each coef is 24bit, the bytes are ordered in the same way

 * as given in the STA32x data sheet (big endian; b1, b2, a1, a2, b0)

 preserve reserved bits in STA32X_CFUD */

	/*

	 * chip documentation does not say if the bits are self clearing,

	 * so do it explicitly

 preserve reserved bits in STA32X_CFUD */

	/*

	 * chip documentation does not say if the bits are self clearing,

	 * so do it explicitly

 preserve reserved bits in STA32X_CFUD */

		/*

		 * chip documentation does not say if the bits are

		 * self-clearing, so do it explicitly

 mute during register sync */

 work around ESD issue where sta32x resets and loses all configuration */

 check if sta32x has reset itself */

/* depending on mode, the attack/release thresholds have

 * two different enum definitions; provide both

 MCLK interpolation ratio per fs */

 MCLK to fs clock ratios */

/**

 * sta32x_set_dai_sysclk - configure MCLK

 * @codec_dai: the codec DAI

 * @clk_id: the clock ID (ignored)

 * @freq: the MCLK input frequency

 * @dir: the clock direction (ignored)

 *

 * The value of MCLK is used to determine which sample rates are supported

 * by the STA32X, based on the mclk_ratios table.

 *

 * This function must be called by the machine driver's 'startup' function,

 * otherwise the list of supported sample rates will not be available in

 * time for ALSA.

 *

 * For setups with variable MCLKs, pass 0 as 'freq' argument. This will cause

 * theoretically possible sample rates to be enabled. Call it again with a

 * proper value set one the external clock is set (most probably you would do

 * that from a machine's driver 'hw_param' hook.

/**

 * sta32x_set_dai_fmt - configure the codec for the selected audio format

 * @codec_dai: the codec DAI

 * @fmt: a SND_SOC_DAIFMT_x value indicating the data format

 *

 * This function takes a bitmask of SND_SOC_DAIFMT_x bits and programs the

 * codec accordingly.

/**

 * sta32x_hw_params - program the STA32X with the given hardware parameters.

 * @substream: the audio stream

 * @params: the hardware parameters to set

 * @dai: the SOC DAI (ignored)

 *

 * This function programs the hardware with the values provided.

 * Specifically, the sample rate and the data format.

/**

 * sta32x_set_bias_level - DAPM callback

 * @component: the component device

 * @level: DAPM power level

 *

 * This is called by ALSA to put the component into low power mode

 * or to wake it up.  If the component is powered off completely

 * all registers must be restored after power on.

 Full power on */

 Power down */

 The chip runs through the power down sequence for us. */

 CONFA */

 CONFC */

 CONFE */

  CONFF */

 select output configuration  */

 channel to output mapping */

 initialize coefficient shadow RAM with reset values */

 Bias level configuration will have done an extra enable */

 CONFE */

 CONFF */

 Clock */

 GPIOs */

 regulators */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8804-spi.c  --  WM8804 S/PDIF transceiver driver - SPI

 *

 * Copyright 2015 Cirrus Logic Inc

 *

 * Author: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>

 SPDX-License-Identifier: GPL-2.0

/*

 * ALSA SoC CPCAP codec driver

 *

 * Copyright (C) 2017 - 2018 Sebastian Reichel <sre@kernel.org>

 *

 * Very loosely based on original driver from Motorola:

 * Copyright (C) 2007 - 2009 Motorola, Inc.

 Register 512 CPCAP_REG_VAUDIOC --- Audio Regulator and Bias Voltage */

 Register 513 CPCAP_REG_CC     --- CODEC */

 Register 514 CPCAP_REG_CDI    --- CODEC Digital Audio Interface */

 Register 515 CPCAP_REG_SDAC   --- Stereo DAC */

 Register 516 CPCAP_REG_SDACDI --- Stereo DAC Digital Audio Interface */

 Register 517 CPCAP_REG_TXI    --- TX Interface */

 Register 518 CPCAP_REG_TXMP   --- Mic Gain */

 Register 519 CPCAP_REG_RXOA   --- RX Output Amplifier */

 Register 520 CPCAP_REG_RXVC   --- RX Volume Control */

 Register 521 CPCAP_REG_RXCOA  --- Codec to Output Amp Switches */

 Register 522 CPCAP_REG_RXSDOA --- RX Stereo DAC to Output Amp Switches */

 Register 523 CPCAP_REG_RXEPOA --- RX External PGA to Output Amp Switches */

 Register 525 CPCAP_REG_A2LA --- SPK Amplifier and Clock Config for Headset */

 constants for ST delay workaround */

 Only CPCAP from ST requires workaround */

 Capture Gain Control: 0dB to 31dB in 1dB steps */

 Playback Gain Control: -33dB to 12dB in 3dB steps */

 Playback Gain */

 Capture Gain */

 Phase Invert */

/*

 * input muxes use unusual register layout, so that we need to use custom

 * getter/setter methods

/*

 * mux uses same bit in CPCAP_REG_RXCOA, CPCAP_REG_RXSDOA & CPCAP_REG_RXEPOA;

 * even though the register layout makes it look like a mixer, this is a mux.

 * Enabling multiple inputs will result in no audio being forwarded.

 DAIs */

 Power Supply */

 Highpass Filters */

 Clocks */

 Microphone Bias */

 Inputs */

 Capture Route */

 Capture PGAs */

 ADC */

 DAC */

 Playback PGA */

 Playback Switch */

 Loopback Switch */

 Mono Mixer */

 Output Routes */

 Output Amplifier */

 Headet Charge Pump */

 Outputs */

 Power Supply */

 Stream -> AIF */

 AIF clocks */

 Digital Loopback */

 Highpass Filters */

 AIF -> DAC mapping */

 DAC -> PGA */

 Ext Input -> PGA */

 Ext PGA -> Ext Playback Switch */

 HiFi PGA -> Mono Mixer */

 Ext Playback Switch -> Ext Mono Mixer */

 HiFi Mono Mixer -> Output Route */

 Voice PGA -> Output Route */

 Ext Mono Mixer -> Output Route */

 Output Route -> Output Amplifier */

 Output Amplifier -> Output */

 Headset Charge Pump -> Headset */

 Mic -> Mic Route */

 Input Route -> Microphone PGA */

 Microphone PGA -> ADC */

 ADC -> Stream */

 Mic Bias */

 setup clk id */

 enable PLL for Voice DAI */

 setup frequency */

 Wait for clock tree reset to complete */

	/*

	 * "HiFi Playback" should always be configured as

	 * SND_SOC_DAIFMT_CBP_CFP - codec clk & frm provider

	 * SND_SOC_DAIFMT_I2S - I2S mode

 01 - 4 slots network mode */

 L on slot 1 */

	/*

	 * "Voice Playback" and "Voice Capture" should always be

	 * configured as SND_SOC_DAIFMT_CBP_CFP - codec clk & frm

	 * provider

 11 - true I2S mode */

 4 timeslots network mode */

/*

 * Configure codec for voice call if requested.

 *

 * We can configure most with snd_soc_dai_set_sysclk(), snd_soc_dai_set_fmt()

 * and snd_soc_dai_set_tdm_slot(). This function configures the rest of the

 * cpcap related hardware as CPU is not involved in the voice call.

 Modem to codec VAUDIO_MODE1 */

 Clear MIC1_MUX for call */

 Set MIC2_MUX for call */

 Enable LDSP for call */

 Enable CPCAP_BIT_PGA_CDC_EN for call */

 Unmute voice for call */

 Set modem to codec mic CDC and HPF for call */

 Enable modem to codec CDC for call*/

	/*

	 * Primitive test for voice call, probably needs more checks

	 * later on for 16-bit calls detected, Bluetooth headset etc.

 Codec on DAI0, HiFi on DAI1 */

 Codec on DAI1, HiFi on DAI0 */

 setup default settings */

 SPDX-License-Identifier: GPL-2.0-only



 nau8821.c -- Nuvoton NAU88L21 audio codec driver



 Copyright 2021 Nuvoton Technology Corp.

 Author: John Hsu <kchsu0@nuvoton.com>

 Co-author: Seven Lee <wtli@nuvoton.com>



 the maximum frequency of CLK_ADC and CLK_DAC */

 scaling for mclk from sysclk_src output */

 ratio for input clk freq */

 over sampling rate */

 OSR 64, SRC 1/4 */

 OSR 256, SRC 1 */

 OSR 128, SRC 1/2 */

 OSR 32, SRC 1/8 */

 OSR 32, SRC 1/8 */

 OSR 64, SRC 1/4 */

 OSR 128, SRC 1/2 */

 OSR 256, SRC 1 */

SPEED 1, SRC 1 */

SPEED 2, SRC 1/2 */

SPEED 4, SRC 1/4 */

SPEED 8, SRC 1/8 */

	/* The DMIC clock is gotten from adc clock divided by

	 * CLK_DMIC_SRC (1, 2, 4, 8). The clock has to be equal or

	 * less than nau8821->dmic_clk_threshold.

 Prevent startup click by letting charge pump to ramp up */

 Disables the TESTDAC to let DAC signal pass through. */

 HPOL/R are ungrounded by disabling 16 Ohm pull-downs on playback */

 High current HPOL/R boost driver */

	/* CLK_DAC or CLK_ADC = OSR * FS

	 * DAC or ADC clock frequency is defined as Over Sampling Rate (OSR)

	 * multiplied by the audio sample rate (Fs). Note that the OSR and Fs

	 * values must be selected such that the maximum frequency is less

	 * than 6.144 MHz.

 make BCLK and LRC divde configuration if the codec as master. */

 get the bclk and fs ratio */

	/* return jack connection status according to jack insertion logic

	 * active high or active low.

	/* Reset the intrruption status from rightmost bit if the corres-

	 * ponding irq event occurs.

 Detach 2kOhm Resistors from MICBIAS to MICGND */

 HPL/HPR short to ground */

 Clear all interruption status */

	/* Enable the insertion interruption, disable the ejection inter-

	 * ruption, and then bypass de-bounce circuit.

 Mask unneeded IRQs: 1 - disable, 0 - enable */

 Close clock for jack type detection at manual mode */

 Recover to normal channel input */

 2kOhm Resistor from MICBIAS to MICGND1 */

		/* Latch Right Channel Analog data

		 * input into the Right Channel Filter

 Enable interruptions with internal clock. */

 Enable internal VCO needed for interruptions */

	/* Chip needs one FSCLK cycle in order to generate interruptions,

	 * as we cannot guarantee one will be provided by the system. Turning

	 * master mode on then off enables us to generate that FSCLK cycle

	 * with a minimum of contention on the clock bus.

 Not bypass de-bounce circuit */

 detect microphone and jack type */

 Turn off insertion interruption at manual mode */

 clears the rightmost interruption */

/**

 * nau8821_calc_fll_param - Calculate FLL parameters.

 * @fll_in: external clock provided to codec.

 * @fs: sampling rate.

 * @fll_param: Pointer to structure of FLL parameters.

 *

 * Calculate FLL parameters to configure codec.

 *

 * Returns 0 for success or negative error code.

	/* Ensure the reference clock frequency (FREF) is <= 13.5MHz by

	 * dividing freq_in by 1, 2, 4, or 8 using FLL pre-scalar.

	 * FREF = freq_in / NAU8821_FLL_REF_DIV_MASK

 Choose the FLL ratio based on FREF */

	/* Calculate the frequency of DCO (FDCO) given freq_out = 256 * Fs.

	 * FDCO must be within the 90MHz - 100MHz or the FFL cannot be

	 * guaranteed across the full range of operation.

	 * FDCO = freq_out * 2 * mclk_src_scaling

	/* Calculate the FLL 10-bit integer input and the FLL 24-bit fractional

	 * input based on FDCO, FREF and FLL ratio.

 Make DSP operate at high speed for better performance. */

 FLL 24-bit fractional input */

 FLL 10-bit integer input */

 FLL pre-scaler */

 select divided VCO input */

 Disable free-running mode */

 set FLL loop filter enable and cutoff frequency at 500Khz */

 disable FLL loop filter and cutoff frequency */

/**

 * nau8821_set_fll - FLL configuration of nau8821

 * @component:  codec component

 * @pll_id:  PLL requested

 * @source:  clock source

 * @freq_in:  frequency of input clock source

 * @freq_out:  must be 256*Fs in order to achieve the best performance

 *

 * The FLL function can select BCLK or MCLK as the input clock source.

 *

 * Returns 0 if the parameters have been applied successfully

 * or negative error code.

 Make DSP operate as default setting for power saving. */

 Clock provided externally and disable internal VCO clock */

 MCLK not changed by clock tree */

			/* Decrease the VCO frequency and make DSP operate

			 * as default setting for power saving.

		/* Higher FLL reference input frequency can only set lower

		 * gain error, such as 0000 for input reference from MCLK

		 * 12.288Mhz.

		/* If FLL reference input is from low frequency source,

		 * higher error gain can apply such as 0xf which has

		 * the most sensitive gain error correction threshold,

		 * Therefore, FLL has the most accurate DCO to

		 * target frequency.

		/* If FLL reference input is from low frequency source,

		 * higher error gain can apply such as 0xf which has

		 * the most sensitive gain error correction threshold,

		 * Therefore, FLL has the most accurate DCO to

		 * target frequency.

 Close clock when jack type detection at manual mode */

 Clear all interruption status */

		/* Enable both insertion and ejection interruptions, and then

		 * bypass de-bounce circuit.

 Setup codec configuration after resume */

 HPL/HPR short to ground */

			/* Reset the configuration of jack type for detection.

			 * Detach 2kOhm Resistors from MICBIAS to MICGND1/2.

			/* Turn off all interruptions before system shutdown.

			 * Keep theinterruption quiet before resume

			 * setup completes.

 Power down codec power; don't support button wakeup */

/**

 * nau8821_enable_jack_detect - Specify a jack for event reporting

 *

 * @component:  component to register the jack with

 * @jack: jack to use to report headset and button events on

 *

 * After this function has been called the headset insert/remove and button

 * events will be routed to the given jack.  Jack can be null to stop

 * reporting.

 Initiate jack detection work queue */

 Enable Bias/Vmid */

	/* VMID Tieoff setting and enable TESTDAC.

	 * This sets the analog DAC inputs to a '0' input signal to avoid

	 * any glitches due to power up transients in both the analog and

	 * digital DAC circuit.

 Disable short Frame Sync detection logic */

 Disable Boost Driver, Automatic Short circuit protection enable */

 Class G timer 64ms */

 Class AB bias current to 2x, DAC Capacitor enable MSB/LSB */

 Disable DACR/L power */

 DAC clock delay 2ns, VREF */

	/* Default oversampling/decimations settings are unusable

	 * (audible hiss). Set it to something better.

 Jack detection */

 jkdet_polarity - 1  is for active-low */

 Pull up IRQ pin */

 Disable interruption before codec initiation done */

 Mask unneeded IRQs: 1 - disable, 0 - enable */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cs47l24.h  --  ALSA SoC Audio driver for Cirrus Logic CS47L24

 *

 * Copyright 2015 Cirrus Logic Inc.

 *

 * Author: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>

 SR2 fixed at 8kHz, SR3 fixed at 16kHz */

 Latch volume update bits */

 SPDX-License-Identifier: GPL-2.0-only



 rt1015p.c  --  RT1015P ALSA SoC audio amplifier driver



 Copyright 2020 The Linux Foundation. All rights reserved.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ALSA SoC Texas Instruments TLV320DAC33 codec driver

 *

 * Author: Peter Ujfalusi <peter.ujfalusi@ti.com>

 *

 * Copyright:   (C) 2009 Nokia Corporation

/*

 * The internal FIFO is 24576 bytes long

 * It can be configured to hold 16bit or 24bit samples

 * In 16bit configuration the FIFO can hold 6144 stereo samples

 * In 24bit configuration the FIFO can hold 4096 stereo samples

 Safety margin for FIFO in Mode7 */

 set to be half of LATENCY_TIME_MS */

 FIFO mode selection */

 Size of the FIFO in samples */

 burst read amount from host */

	int mode1_latency;		/* latency caused by the i2c writes in

 BCLK divider value in burst mode */

 Interface speed in Burst modes */

	int keep_bclk;			/* Keep the BCLK continuously running

 Time stamp for FIFO modes to */

 calculate the FIFO caused delay */

	unsigned int mode1_us_burst;	/* Time to burst read n number of

 Time to reach lthr from uthr */

 0x00 - 0x03 */

 0x04 - 0x07 */

 0x08 - 0x0b */

 0x0c - 0x0f */

 0x10 - 0x13 */

 0x14 - 0x17 */

 0x18 - 0x1b */

 0x1c - 0x1f */

 0x20 - 0x23 */

 0x24 - 0x27 */

 0x28 - 0x2b */

 0x2c - 0x2f */

 0x30 - 0x33 */

 0x34 - 0x37 */

 0x38 - 0x39 */

 Registers 0x3a - 0x3f are reserved  */

 0x3a - 0x3b */

 0x3c - 0x3f */

 0x40 - 0x43 */

 0x44 - 0x45 */

 Registers 0x46 - 0x47 are reserved  */

 0x46 - 0x47 */

 0x48 - 0x4a */

 Registers 0x4b - 0x7c are reserved  */

 0x4b        */

 0x4c - 0x4f */

 0x50 - 0x53 */

 0x54 - 0x57 */

 0x58 - 0x5b */

 0x5c - 0x5f */

 0x60 - 0x63 */

 0x64 - 0x67 */

 0x68 - 0x6b */

 0x6c - 0x6f */

 0x70 - 0x73 */

 0x74 - 0x77 */

 0x78 - 0x7b */

 0x7c        */

 0x7d - 0x7f */

 Register read and write */

 If powered off, return the cached value */

	/*

	 * data is

	 *   D15..D8 dac33 register offset

	 *   D7...D0 register data

	/*

	 * data is

	 *   D23..D16 dac33 register offset

	 *   D15..D8  register data MSB

	 *   D7...D0  register data LSB

 We need to set autoincrement mode for 16 bit writes */

 A : DAC sample rate Fsref/1.5 */

 B : DAC src=normal, not muted */

 C : (defaults) */

	/* 73 : volume soft stepping control,

 Restore only selected registers (gains mostly) */

 Stop the DAI clock */

 Power down the Oscillator, and DACs */

 Safety check */

 Do not allow changes while stream is running*/

 Codec operation modes */

 L/R Line Output Gain */

/*

 * DACL/R digital volume control:

 * from 0 dB to -63.5 in 0.5 dB steps

 * Need to be inverted later on:

 * 0x00 == 0 dB

 * 0x7f == -63.5 dB

 Analog bypass */

 LOP L/R invert selection */

 Analog bypass */

	/*

	 * For DAPM path, when only the anlog bypass path is enabled, and the

	 * LOP inverted from the corresponding DAC side.

	 * This is needed, so we can attach the DAC power supply in this case.

 Analog bypass */

 output */

 Coming from OFF, switch on the component */

 Do not power off, when the component is already off */

 Take the timestamps */

 Enable Alarm Threshold IRQ with a delay */

 Take the timestamp */

 Move back the timestamp with drain time */

 Enable Upper Threshold IRQ */

 Take the timestamp */

 At the moment we are not using interrupts in mode7 */

 Mask all interrupts from dac33 */

 flush fifo */

 Do not schedule the workqueue in Mode7 */

 Stream started, save the substream pointer */

 Check parameters for validity */

/*

 * tlv320dac33 is strict on the sequence of the register writes, if the register

 * writes happens in different order, than dac33 might end up in unknown state.

 * Use the known, working sequence of register writes to initialize the dac33.

 Read FIFO control A, and clear FIFO flush bit */

		/*

		 * Chip is not powered yet.

		 * Do the init in the dac33_set_bias_level later.

 Write registers 0x08 and 0x09 (MSB, LSB) */

 OSC calibration time */

 adjustment treshold & step */

 div=4 / gain=1 / div */

 Generic for all FIFO modes */

 50-51 : ASRC Control registers */

 ??? */

 Write registers 0x34 and 0x35 (MSB, LSB) */

 Set interrupts to high active */

 FIFO bypass mode */

 50-51 : ASRC Control registers */

 ??? */

 Interrupt behaviour configuration */

 in FIFO bypass mode, the interrupts are not used */

		/*

		 * For mode1:

		 * Disable the FIFO bypass (Enable the use of FIFO)

		 * Select nSample mode

		 * BCLK is only running when data is needed by DAC33

		/*

		 * For mode1:

		 * Disable the FIFO bypass (Enable the use of FIFO)

		 * Select Threshold mode

		 * BCLK is only running when data is needed by DAC33

		/*

		 * For FIFO bypass mode:

		 * Enable the FIFO bypass (Disable the FIFO use)

		 * Set the BCLK as continuous

	/*

	 * BCLK divide ratio

	 * 0: 1.5

	 * 1: 1

	 * 2: 2

	 * ...

	 * 254: 254

	 * 255: 255

		/*

		 * Configure the threshold levels, and leave 10 sample space

		 * at the bottom, and also at the top of the FIFO

 In bypass mode we don't need to calculate */

 Number of samples under i2c latency */

			/*

			 * Configure nSamaple to number of periods,

			 * which covers the latency requironment.

 We have not started to fill the FIFO yet, delay is 0 */

			/*

			 * Phase 1:

			 * After Alarm threshold, and before nSample write

			/*

			 * Phase 2:

			 * After nSample write (during burst operation)

			/*

			 * Phase 3:

			 * After burst operation, before next alarm threshold

 We have not started to fill the FIFO yet, delay is 0 */

			/*

			 * Either the timestamps are messed or equal. Report

			 * maximum delay

			/*

			* Phase 1:

			* After burst (draining phase)

			/*

			* Phase 2:

			* During burst operation

 set master/slave audio interface */

 Codec Master */

 Codec Slave */

 Read the tlv320dac33 ID registers */

 Check if the IRQ number is valid and request it */

 Only add the FIFO controls, if we have valid IRQ number */

 10ms */

 Disable FIFO use by default */

 Check if the reset GPIO number is valid and request it */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8804.c  --  WM8804 S/PDIF transceiver driver

 *

 * Copyright 2010-11 Wolfson Microelectronics plc

 *

 * Author: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>

 R3  - PLL1 */

 R4  - PLL2 */

 R5  - PLL3 */

 R6  - PLL4 */

 R7  - PLL5 */

 R8  - PLL6 */

 R9  - SPDMODE */

 R10 - INTMASK */

 R18 - SPDTX1 */

 R19 - SPDTX2 */

 R20 - SPDTX3 */

 R21 - SPDTX4 */

 R22 - SPDTX5 */

 R23 - GPO0 */

 R24 - GPO1 */

 R26 - GPO2 */

 R27 - AIFTX */

 R28 - AIFRX */

 R29 - SPDRX1 */

 R30 - PWRDN */

/*

 * We can't use the same notifier block for more than one supply and

 * there's no way I can see to get from a callback to the caller

 * except container_of().

 power up the aif */

 power down only both paths are disabled */

 save the current power state of the transmitter */

 power down the transmitter */

 set the tx source */

 restore the transmitter's configuration */

 set data format */

 set master/slave mode */

 set frame inversion */

 set word length */

 PLL rate to output rate divisions */

	/*

	 * Scale the output frequency up; the PLL should run in the

	 * region of 90-100MHz.

 disable the PLL */

 power down the PLL before reprogramming it */

 set PLLN and PRESCALE */

 set mclkdiv and freqmode */

 set PLLK */

 power up the PLL */

 This should really be moved into the regulator core */

 Power up OSCCLK */

 Power down OSCCLK */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8903.c  --  WM8903 ALSA SoC Audio driver

 *

 * Copyright 2008-12 Wolfson Microelectronics

 * Copyright 2011-2012 NVIDIA, Inc.

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 *

 * TODO:

 *  - TDM mode configuration.

 *  - Digital microphone support.

 Register defaults at reset */

 R4   - Bias Control 0 */

 R5   - VMID Control 0 */

 R6   - Mic Bias Control 0 */

 R8   - Analogue DAC 0 */

 R10  - Analogue ADC 0 */

 R12  - Power Management 0 */

 R13  - Power Management 1 */

 R14  - Power Management 2 */

 R15  - Power Management 3 */

 R16  - Power Management 4 */

 R17  - Power Management 5 */

 R18  - Power Management 6 */

 R20  - Clock Rates 0 */

 R21  - Clock Rates 1 */

 R22  - Clock Rates 2 */

 R24  - Audio Interface 0 */

 R25  - Audio Interface 1 */

 R26  - Audio Interface 2 */

 R27  - Audio Interface 3 */

 R30  - DAC Digital Volume Left */

 R31  - DAC Digital Volume Right */

 R32  - DAC Digital 0 */

 R33  - DAC Digital 1 */

 R36  - ADC Digital Volume Left */

 R37  - ADC Digital Volume Right */

 R38  - ADC Digital 0 */

 R39  - Digital Microphone 0 */

 R40  - DRC 0 */

 R41  - DRC 1 */

 R42  - DRC 2 */

 R43  - DRC 3 */

 R44  - Analogue Left Input 0 */

 R45  - Analogue Right Input 0 */

 R46  - Analogue Left Input 1 */

 R47  - Analogue Right Input 1 */

 R50  - Analogue Left Mix 0 */

 R51  - Analogue Right Mix 0 */

 R52  - Analogue Spk Mix Left 0 */

 R53  - Analogue Spk Mix Left 1 */

 R54  - Analogue Spk Mix Right 0 */

 R55  - Analogue Spk Mix Right 1 */

 R57  - Analogue OUT1 Left */

 R58  - Analogue OUT1 Right */

 R59  - Analogue OUT2 Left */

 R60  - Analogue OUT2 Right */

 R62  - Analogue OUT3 Left */

 R63  - Analogue OUT3 Right */

 R65  - Analogue SPK Output Control 0 */

 R67  - DC Servo 0 */

 R69  - DC Servo 2 */

 R90  - Analogue HP 0 */

 R94  - Analogue Lineout 0 */

 R98  - Charge Pump 0 */

 R104 - Class W 0 */

 R108 - Write Sequencer 0 */

 R109 - Write Sequencer 1 */

 R110 - Write Sequencer 2 */

 R111 - Write Sequencer 3 */

 R112 - Write Sequencer 4 */

 R114 - Control Interface */

 R116 - GPIO Control 1 */

 R117 - GPIO Control 2 */

 R118 - GPIO Control 3 */

 R119 - GPIO Control 4 */

 R120 - GPIO Control 5 */

 R122 - Interrupt Status 1 Mask */

 R123 - Interrupt Polarity 1 */

 R126 - Interrupt Control */

 R129 - Control Interface Test 1 */

 R149 - Charge Pump Test 1 */

 R164 - Clock Rate Test 4 */

 R172 - Analogue Output Bias 0 */

 Reference count */

 Complete any pending DC servo starts */

 If we've no cached values then we need to do startup */

 Don't trust the cache for analogue */

 Cache the measured offsets for digital */

/*

 * When used with DAC outputs only the WM8903 charge pump supports

 * operation in class W mode, providing very low power consumption

 * when used with digital sources.  Enable and disable this mode

 * automatically depending on the mixer configuration.

 *

 * All the relevant controls are simple switches.

 Turn it off if we're about to enable bypass */

 Implement the change */

 If we've just disabled the last bypass path turn Class W on */

	/* If we're using deemphasis select the nearest available sample

	 * rate.

 ALSA can only do steps of .01dB */

 Input PGAs - No TLV since the scale depends on PGA mode */

 ADCs */

 DAC */

 Headphones */

 Line out */

 Speaker */

			/* By default no bypass paths are enabled so

			 * enable Class W support.

 Clock inversion */

 frame inversion not valid for DSP modes */

/* Lookup table for CLK_SYS/fs ratio.  256fs or more is recommended

 * for optimal performance so we list the lower rates first and match

 CLK_SYS/BCLK ratios - multiplied by 10 due to .5s */

 Sample rates for DSP */

 Enable sloping stopband filter for low sample rates */

 Configure sample rate logic for DSP - choose nearest rate */

	/* We may not have an MCLK which allows us to generate exactly

	 * the clock we want, particularly with USB derived inputs, so

	 * approximate.

	/* We may not get quite the right frequency if using

	 * approximate clocks so look for the closest match that is

	 * higher than the target (we need to ensure that there enough

	 * BCLKs to clock out the samples).

 BCLK table is sorted */

/**

 * wm8903_mic_detect - Enable microphone detection via the WM8903 IRQ

 *

 * @component:  WM8903 component

 * @jack:   jack to report detection events on

 * @det:    value to report for presence detection

 * @shrt:   value to report for short detection

 *

 * Enable microphone detection via IRQ on the WM8903.  If GPIOs are

 * being used to bring out signals to the processor then only platform

 * data configuration is needed for WM8903 and processor GPIOs should

 * be configured using snd_soc_jack_add_gpios() instead.

 *

 * The current threasholds for detection should be configured using

 * micdet_cfg in the platform data.  Using this function will force on

 * the microphone bias for the device.

 Store the configuration */

 Enable interrupts we've got a report configured for */

		/* Enable mic detection, this may not have been set through

	/*

	 * The rest is microphone jack detection.  We need to manually

	 * invert the polarity of the interrupt after each event - to

	 * simplify the code keep track of the last state we reported

	 * and just invert the relevant bits in both the report and

	 * the polarity register.

		/*

		* We assume the controller imposes no restrictions,

		* so we are able to select active-high

		/*

		 * In device tree: 0 means "write 0",

		 * 0xffffffff means "don't touch".

		 *

		 * In platform data: 0 means "don't touch",

		 * 0x8000 means "write 0".

		 *

		 * Note: WM8903_GPIO_CONFIG_ZERO == 0x8000.

		 *

		 *  Convert from DT to pdata representation here,

		 * so no other code needs to change.

 If no platform data was supplied, create storage for defaults */

 Reset the device */

 Set up GPIO pin state, detect if any are MIC detect outputs */

 Set up microphone detection */

 Microphone detection needs the WSEQ clock */

	/* If microphone detection is enabled by pdata but

	 * detected via IRQ then interrupts can be lost before

	 * the machine driver has set up microphone detection

	 * IRQs as the IRQs are clear on read.  The detection

	 * will be enabled when the machine driver configures.

 Enable write sequencer interrupts */

 Latch volume update bits */

 Enable DAC soft mute by default */

 SPDX-License-Identifier: GPL-2.0-only



 rt715-sdca-sdw.c -- rt715 ALSA SoC audio driver



 Copyright(c) 2020 Realtek Semiconductor Corp.





 BRA */

 i2c debug */

 VAD Searching status */

 Update the status */

	/*

	 * Perform initialization only if slave status is present and

	 * hw_init flag is false

 perform I/O transfers required for Slave initialization */

 first we need to allocate memory for set bits in port lists */

 BITMAP: 01010000 */

 BITMAP:  00000000 */

 set the timeout values */

 Regmap Initialization */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ALSA SoC WL1273 codec driver

 *

 * Author:      Matti Aaltonen, <matti.j.aaltonen@nokia.com>

 *

 * Copyright:   (C) 2010, 2011 Nokia Corporation

 codec private data */

/*

 * TODO: Implement the audio routing in the driver. Now this control

 * only indicates the setting that has been done elsewhere (in the user

 * space).

 Do not allow changes while stream is running */

 Audio interface format for the soc_card driver */

/*

 * ASoC codec driver for spear platform

 *

 * sound/soc/codecs/sta529.c -- spear ALSA Soc codec driver

 *

 * Copyright (C) 2012 ST Microelectronics

 * Rajeev Kumar <rajeevkumar.linux@gmail.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 STA529 Register offsets */

mic_select*/

 R0   - FFX Configuration reg 0 */

 R1   - FFX Configuration reg 1 */

 R2   - Master Volume */

 R3   - Left Volume */

 R4  -  Right Volume */

 R10  - S2P Config Reg 0 */

 R11  - S2P Config Reg 1 */

 R12  - P2S Config Reg 0 */

 R13  - P2S Config Reg 1 */

 R30  - ADC Config Reg */

 R31  - clock Out Reg */

 R32  - Misc Register */

 Making FFX output to zero */

 interface format */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * AD193X Audio Codec driver supporting AD1936/7/8/9

 *

 * Copyright 2010 Analog Devices Inc.

 codec private data */

/*

 * AD193X volume/mute/de-emphasis etc. controls

 DAC volume control */

 DAC switch control */

 DAC de-emphasis */

 ADC switch control */

 ADC high-pass filter */

/*

 * DAI ops entries

	/* At present, the driver only support AUX ADC mode(SND_SOC_DAIFMT_I2S

	 * with TDM), ADC&DAC TDM mode(SND_SOC_DAIFMT_DSP_A) and DAC I2S mode

	 * (SND_SOC_DAIFMT_I2S)

 normal bit clock + frame */

 normal bclk + invert frm */

 invert bclk + normal frm */

 invert bclk + frm */

 For DSP_*, LRCLK's polarity must be inverted */

 MCLK must be 512 x fs */

 bit size */

 codec DAI instance */

 codec DAI instance for DAC only */

 codec register values to set after reset */

 PLL_CLK_CTRL0: pll input: mclki/xi 12.288Mhz */

 PLL_CLK_CTRL1: no on-chip Vref */

 DAC_CTRL0: TDM mode */

 DAC_CTRL1: reset */

 DAC_CTRL2: 48kHz de-emphasis, unmute dac */

 DAC_CHNL_MUTE: unmute DAC channels */

 DAC_L1_VOL: no attenuation */

 DAC_R1_VOL: no attenuation */

 DAC_L2_VOL: no attenuation */

 DAC_R2_VOL: no attenuation */

 DAC_L3_VOL: no attenuation */

 DAC_R3_VOL: no attenuation */

 DAC_L4_VOL: no attenuation */

 DAC_R4_VOL: no attenuation */

 ADC_CTRL0: high-pass filter enable */

 ADC_CTRL1: sata delay=1, adc aux mode */

 ADC_CTRL2: reset */

 default setting for ad193x */

 adc only */

 add adc controls */

 add adc widgets */

 add adc routes */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * tas5720.c - ALSA SoC Texas Instruments TAS5720 Mono Audio Amplifier

 *

 * Copyright (C)2015-2016 Texas Instruments Incorporated -  https://www.ti.com

 *

 * Author: Andreas Dannenberg <dannenberg@ti.com>

 Define how often to check (and clear) the fault status register (in ms) */

 Digital power supply. Connect to 3.3-V supply. */

 Class-D amp and analog power supply (connected). */

 1st data bit occur one BCLK cycle after the frame sync */

		/*

		 * Note that although the TAS5720 does not have a dedicated DSP

		 * mode it doesn't care about the LRCLK duty cycle during TDM

		 * operation. Therefore we can use the device's I2S mode with

		 * its delaying of the 1st data bit to receive DSP_A formatted

		 * data. See device datasheet for additional details.

		/*

		 * Similar to DSP_A, we can use the fact that the TAS5720 does

		 * not care about the LRCLK duty cycle during TDM to receive

		 * DSP_B formatted data in LEFTJ mode (no delaying of the 1st

		 * data bit).

 No delay after the frame sync */

	/*

	 * Determine the first slot that is being requested. We will only

	 * use the first slot that is found since the TAS5720 is a mono

	 * amplifier.

 Enable manual TDM slot selection (instead of I2C ID based) */

 Configure the TDM slot to process audio from */

 Configure TDM slot width. This is only applicable to TAS5722. */

 Check/handle all errors except SAIF clock errors */

	/*

	 * Only flag errors once for a given occurrence. This is needed as

	 * the TAS5720 will take time clearing the fault condition internally

	 * during which we don't want to bombard the system with the same

	 * error message over and over.

 Store current fault value so we can detect any changes next time */

	/*

	 * Periodically toggle SDZ (shutdown bit) H->L->H to clear any latching

	 * faults as long as a fault condition persists. Always going through

	 * the full sequence no matter the first return value to minimizes

	 * chances for the device to end up in shutdown mode.

 Schedule the next fault check at the specified interval */

	/*

	 * Take a liberal approach to checking the device ID to allow the

	 * driver to be used even if the device ID does not match, however

	 * issue a warning if there is a mismatch.

 Set device to mute */

	/*

	 * Enter shutdown mode - our default when not playing audio - to

	 * minimize current consumption. On the TAS5720 there is no real down

	 * side doing so as all device registers are preserved and the wakeup

	 * of the codec is rather quick which we do using a dapm widget.

 Take TAS5720 out of shutdown mode */

		/*

		 * Observe codec shutdown-to-active time. The datasheet only

		 * lists a nominal value however just use-it as-is without

		 * additional padding to minimize the delay introduced in

		 * starting to play audio (actually there is other setup done

		 * by the ASoC framework that will provide additional delays,

		 * so we should always be safe).

 Turn on TAS5720 periodic fault checking/handling */

 Disable TAS5720 periodic fault checking/handling */

 Place TAS5720 in shutdown mode to minimize current draw */

/*

 * DAC analog gain. There are four discrete values to select from, ranging

 * from 19.2 dB to 26.3dB.

/*

 * DAC digital volumes. From -103.5 to 24 dB in 0.5 dB or 0.25 dB steps

 * depending on the device. Note that setting the gain below -100 dB

 * (register value <0x7) is effectively a MUTE as per device datasheet.

 *

 * Note that for the TAS5722 the digital volume controls are actually split

 * over two registers, so we need custom getters/setters for access.

 PCM rates supported by the TAS5720 driver */

 Formats supported by TAS5720 driver */

/*

 * TAS5720 DAI structure

 *

 * Note that were are advertising .playback.channels_max = 2 despite this being

 * a mono amplifier. The reason for that is that some serial ports such as TI's

 * McASP module have a minimum number of channels (2) that they can output.

 * Advertising more channels than we have will allow us to interface with such

 * a serial port without really any negative side effects as the TAS5720 will

 * simply ignore any extra channel(s) asides from the one channel that is

 * configured to be played back.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ALSA SoC codec for HDMI encoder drivers

 * Copyright (C) 2015 Texas Instruments Incorporated - https://www.ti.com/

 * Author: Jyri Sarha <jsarha@ti.com>

 This is only to get MAX_ELD_BYTES */

 ALSA API channel map position */

/*

 * CEA speaker placement for HDMI 1.4:

 *

 *  FL  FLC   FC   FRC   FR   FRW

 *

 *                                  LFE

 *

 *  RL  RLC   RC   RRC   RR

 *

 *  Speaker placement has to be extended to support HDMI 2.0

 Front Left           */

 Front Center         */

 Front Right          */

 Front Left Center    */

 Front Right Center   */

 Rear Left            */

 Rear Center          */

 Rear Right           */

 Rear Left Center     */

 Rear Right Center    */

 Low Frequency Effect */

/*

 * cea Speaker allocation structure

 Channel maps  stereo HDMI */

 Channel maps for multi-channel playbacks, up to 8 n_ch */

 CA_ID 0x00 */

 CA_ID 0x01 */

 CA_ID 0x02 */

 CA_ID 0x03 */

 CA_ID 0x04 */

 CA_ID 0x05 */

 CA_ID 0x06 */

 CA_ID 0x07 */

 CA_ID 0x08 */

 CA_ID 0x09 */

 CA_ID 0x0A */

 CA_ID 0x0B */

 CA_ID 0x0C */

 CA_ID 0x0D */

 CA_ID 0x0E */

 CA_ID 0x0F */

 CA_ID 0x10 */

 CA_ID 0x11 */

 CA_ID 0x12 */

 CA_ID 0x13 */

 CA_ID 0x14 */

 CA_ID 0x15 */

 CA_ID 0x16 */

 CA_ID 0x17 */

 CA_ID 0x18 */

 CA_ID 0x19 */

 CA_ID 0x1A */

 CA_ID 0x1B */

 CA_ID 0x1C */

 CA_ID 0x1D */

 CA_ID 0x1E */

 CA_ID 0x1F */

/*

 * hdmi_codec_channel_alloc: speaker configuration available for CEA

 *

 * This is an ordered list that must match with hdmi_codec_8ch_chmaps struct

 * The preceding ones have better chances to be selected by

 * hdmi_codec_get_ch_alloc_table_idx().

 2.1 */

 Dolby Surround */

 surround51 */

 surround40 */

 surround41 */

 surround50 */

 6.1 */

 surround71 */

 others */

 Detect if only stereo supported, else return 8 channels mappings */

 If spk_alloc == 0, HDMI is unplugged return stereo config*/

 Select chmap supported */

 Select a channel allocation that matches with ELD and pcm channels */

 Reset daifmt */

	/*

	 * ignore if direction was CAPTURE

	 * and it had .no_capture_mute flag

	 * see

	 *	snd_soc_dai_digital_mute()

/*

 * This driver can select all SND_SOC_DAIFMT_CBx_CFx,

 * but need to be selected from Sound Card, not be auto selected.

 * Because it might be used from other driver.

 * For example,

 *	${LINUX}/drivers/gpu/drm/bridge/synopsys/dw-hdmi-i2s-audio.c

/*

 * This list is only for formats allowed on the I2S bus. So there is

 * some formats listed that are not supported by HDMI interface. For

 * instance allowing the 32-bit formats enables 24-precision with CPU

 * DAIs that do not support 24-bit formats. If the extra formats cause

 * problems, we should add the video side driver an option to disable

 * them.

 override handlers */

 default chmap supported is stereo */

 add ELD ctl with the device number corresponding to the PCM stream */

 see snd_soc_get_dai_id() */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * L3 code

 *

 *  Copyright (C) 2008, Christian Pellegrin <chripell@evolware.org>

 *

 * based on:

 *

 * L3 bus algorithm module.

 *

 *  Copyright (C) 2001 Russell King, All Rights Reserved.

/*

 * Send one byte of data to the chip.  Data is latched into the chip on

 * the rising edge of the clock.

/*

 * Send a set of bytes to the chip.  We need to pulse the MODE line

 * between each byte, but never at the start nor at the end of the

 * transfer.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8995.c  --  WM8995 ALSA SoC Audio driver

 *

 * Copyright 2010 Wolfson Microelectronics plc

 *

 * Author: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>

 *

 * Based on wm8994.c and wm_hubs.c by Mark Brown

/*

 * We can't use the same notifier block for more than one supply and

 * there's no way I can see to get from a callback to the caller

 * except container_of().

 GCC flow analysis can't track enable */

 We also need the same setting for L/R and only one path */

 Check what we're currently using for CLK_SYS */

 Enable the headphone amp */

 Enable the second stage */

 Bring up the AIF clocks first */

	/*

	 * Then switch CLK_SYS over to the higher of them; a change

	 * can only happen as a result of a clocking change which can

	 * only be made outside of DAPM so we can safely redo the

	 * clocking.

 If they're equal it doesn't matter which is used */

 AIF1 outputs */

 Sidetone */

 DAC1 inputs */

 DAC2/AIF2 outputs */

 Output stages */

 frame inversion not valid for DSP modes */

 reserved */,

		if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK /* ||

		if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK /* ||

 try to find a suitable sample rate */

 AIFCLK/fs ratio; look for a close match in either direction */

	/*

	 * We may not get quite the right frequency if using

	 * approximate clocks so look for the closest match that is

	 * higher than the target (we need to ensure that there enough

	 * BCLKs to clock out the samples).

 BCLK table is sorted */

/* The size in bits of the FLL divide multiplied by 10

 Scale the input frequency down to <= 13.5MHz */

 Scale the output to give 90MHz<=Fvco<=100MHz */

 Now, calculate N.K */

 Calculate fractional part - scale up so we can round. */

 Move down to proper range now rounding is done */

 Allow no source specification when stopping */

 Are we changing anything? */

	/* If we're stopping the FLL redo the old config - no

	 * registers will actually be written but we avoid GCC flow

	 * analysis bugs spewing warnings.

 Gate the AIF clocks while we reclock */

 We always need to disable the FLL while reconfiguring */

 Enable any gated AIF clocks */

 AIF3 shares clocking with AIF1/2 */

 This should really be moved into the regulator core */

 Latch volume updates (right only; we always do left then right). */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * es8328.c  --  ES8328 ALSA SoC SPI Audio driver

 *

 * Copyright 2014 Sutajio Ko-Usagi PTE LTD

 *

 * Author: Sean Cross <xobs@kosagi.com>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2017 BayLibre, SAS.

 * Author: Jerome Brunet <jbrunet@baylibre.com>

/*

 * The everest 7134 is a very simple DA converter with no register

 should not happen */

 mclk has not been provided, assume it is OK */

 Single speed mode */

 Double speed mode */

 Quad speed mode */

 Digital I/O are also supplied by VDD on the es7134 */

 Single speed mode */

 Double speed mode */

 Es7154 has a separate supply for digital I/O  */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * uda1380.c - Philips UDA1380 ALSA SoC audio driver

 *

 * Copyright (c) 2007-2009 Philipp Zabel <philipp.zabel@gmail.com>

 *

 * Modified by Richard Purdie <richard@openedhand.com> to fit into SoC

 * codec model.

 *

 * Copyright (c) 2005 Giorgio Padrin <giorgio@mandarinlogiq.org>

 * Copyright 2005 Openedhand Ltd.

 codec private data */

/*

 * uda1380 register cache

/*

 * read uda1380 register cache

/*

 * write uda1380 register cache

/*

 * write to the UDA1380 register space

	/* data is

	 *   data[0] is register offset

	 *   data[1] is MS byte

	 *   data[2] is LS byte

	/* the interpolator & decimator regs must only be written when the

	 * codec DAI is active.

 Sync reg_cache with the hardware */

 declarations of ALSA reg_elem_REAL controls */

 SEL_MIC, SEL_LNA */

 R02_EN_AVC */

 M */

 SEL_SOURCE */

 SEL_NS */

 MIX, MIX_POS */

 SD_VALUE */

 OS */

/*

 * from -48 dB in 1.5 dB steps (mute instead of -49.5 dB)

/*

 * from -78 dB in 1 dB steps (3 dB steps, really. LSB are ignored),

 * from -66 dB in 0.5 dB steps (2 dB steps, really) and

 * from -52 dB in 0.25 dB steps

/*

 * from -72 dB in 1.5 dB steps (6 dB steps really),

 * from -66 dB in 0.75 dB steps (3 dB steps really),

 * from -60 dB in 0.5 dB steps (2 dB steps really) and

 * from -46 dB in 0.25 dB steps

 from 0 to 6 dB in 2 dB steps if SPF mode != flat */

/* from 0 to 24 dB in 2 dB steps, if SPF mode == maximum, otherwise cuts

 from -63 to 24 dB in 0.5 dB steps (-128...48) */

 from 0 to 24 dB in 3 dB steps */

 from 0 to 30 dB in 2 dB steps */

 AVCR, AVCL */

 MVCL, MVCR */

 VC2 */

 VC1 */

 M */

 TRL, TRR */

 BBL, BBR */

*/	SOC_SINGLE("Master Playback Switch", UDA1380_DEEMP, 14, 1, 1),		
 MT2 from decimation filter */

 DE2 */

 MT1, from digital data input */

 DE1 */

 DA_POL_INV */

 SEL_NS */

 MIX_POS, MIX */

 SDET_ON */

 SD_VALUE */

 OS */

 ML_DEC, MR_DEC */

*/	SOC_SINGLE("ADC Capture Switch", UDA1380_PGA, 15, 1, 1),		
 PGA_GAINCTRLL, PGA_GAINCTRLR */

 ADCPOL_INV */

 VGA_CTRL */

 SKIP_DCFIL (before decimator) */

 EN_DCFIL (at output of decimator) */

 TODO: enum, see table 62 */

 AGC_LEVEL */

 -5.5, -8, -11.5, -14 dBFS */

 Input mux */

 Output mux */

 Capture mux */

 output mux */

 {"DAC", "Digital Mixer", "I2S" } */

 headphone driver */

 input mux */

 right input */

 inputs */

 set up DAI based upon fmt */

 DATAI is slave only, so in single-link mode, this has to be slave */

 set up DAI based upon fmt */

 DATAI is slave only, so this has to be slave */

 set up DAI based upon fmt */

 set WSPLL power and divider if running from this clock */

 clear SEL_LOOP_DIV */

 shut down WSPLL power if running from this clock */

 ADC, DAC on */

		/* Mark mixer regs cache dirty to sync them with

		 * codec regs on power on.

 playback only - dual interface */

 capture only - dual interface*/

 set clock input */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm5100-tables.c  --  WM5100 ALSA SoC Audio driver data

 *

 * Copyright 2011-2 Wolfson Microelectronics plc

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 R0     - software reset */

 R1     - Device Revision */

 R16    - Ctrl IF 1 */

 R32    - Tone Generator 1 */

 R48    - PWM Drive 1 */

 R49    - PWM Drive 2 */

 R50    - PWM Drive 3 */

 R256   - Clocking 1 */

 R257   - Clocking 3 */

 R258   - Clocking 4 */

 R259   - Clocking 5 */

 R260   - Clocking 6 */

 R263   - Clocking 7 */

 R264   - Clocking 8 */

 R288   - ASRC_ENABLE */

 R289   - ASRC_STATUS */

 R290   - ASRC_RATE1 */

 R321   - ISRC 1 CTRL 1 */

 R322   - ISRC 1 CTRL 2 */

 R323   - ISRC 2 CTRL1 */

 R324   - ISRC 2 CTRL 2 */

 R386   - FLL1 Control 1 */

 R387   - FLL1 Control 2 */

 R388   - FLL1 Control 3 */

 R390   - FLL1 Control 5 */

 R391   - FLL1 Control 6 */

 R392   - FLL1 EFS 1 */

 R418   - FLL2 Control 1 */

 R419   - FLL2 Control 2 */

 R420   - FLL2 Control 3 */

 R422   - FLL2 Control 5 */

 R423   - FLL2 Control 6 */

 R424   - FLL2 EFS 1 */

 R512   - Mic Charge Pump 1 */

 R513   - Mic Charge Pump 2 */

 R514   - HP Charge Pump 1 */

 R529   - LDO1 Control */

 R533   - Mic Bias Ctrl 1 */

 R534   - Mic Bias Ctrl 2 */

 R535   - Mic Bias Ctrl 3 */

 R640   - Accessory Detect Mode 1 */

 R648   - Headphone Detect 1 */

 R649   - Headphone Detect 2 */

 R656   - Mic Detect 1 */

 R657   - Mic Detect 2 */

 R658   - Mic Detect 3 */

 R769   - Input Enables */

 R770   - Input Enables Status */

 R784   - Status */

 R785   - IN1R Control */

 R786   - IN2L Control */

 R787   - IN2R Control */

 R788   - IN3L Control */

 R789   - IN3R Control */

 R790   - IN4L Control */

 R791   - IN4R Control */

 R792   - RXANC_SRC */

 R793   - Input Volume Ramp */

 R800   - ADC Digital Volume 1L */

 R801   - ADC Digital Volume 1R */

 R802   - ADC Digital Volume 2L */

 R803   - ADC Digital Volume 2R */

 R804   - ADC Digital Volume 3L */

 R805   - ADC Digital Volume 3R */

 R806   - ADC Digital Volume 4L */

 R807   - ADC Digital Volume 4R */

 R1025  - Output Enables 2 */

 R1026  - Output Status 1 */

 R1027  - Output Status 2 */

 R1032  - Channel Enables 1 */

 R1040  - Out Volume 1L */

 R1041  - Out Volume 1R */

 R1042  - DAC Volume Limit 1L */

 R1043  - DAC Volume Limit 1R */

 R1044  - Out Volume 2L */

 R1045  - Out Volume 2R */

 R1046  - DAC Volume Limit 2L */

 R1047  - DAC Volume Limit 2R */

 R1048  - Out Volume 3L */

 R1049  - Out Volume 3R */

 R1050  - DAC Volume Limit 3L */

 R1051  - DAC Volume Limit 3R */

 R1052  - Out Volume 4L */

 R1053  - Out Volume 4R */

 R1054  - DAC Volume Limit 5L */

 R1055  - DAC Volume Limit 5R */

 R1056  - DAC Volume Limit 6L */

 R1057  - DAC Volume Limit 6R */

 R1088  - DAC AEC Control 1 */

 R1089  - Output Volume Ramp */

 R1152  - DAC Digital Volume 1L */

 R1153  - DAC Digital Volume 1R */

 R1154  - DAC Digital Volume 2L */

 R1155  - DAC Digital Volume 2R */

 R1156  - DAC Digital Volume 3L */

 R1157  - DAC Digital Volume 3R */

 R1158  - DAC Digital Volume 4L */

 R1159  - DAC Digital Volume 4R */

 R1160  - DAC Digital Volume 5L */

 R1161  - DAC Digital Volume 5R */

 R1162  - DAC Digital Volume 6L */

 R1163  - DAC Digital Volume 6R */

 R1216  - PDM SPK1 CTRL 1 */

 R1217  - PDM SPK1 CTRL 2 */

 R1218  - PDM SPK2 CTRL 1 */

 R1219  - PDM SPK2 CTRL 2 */

 R1280  - Audio IF 1_1 */

 R1281  - Audio IF 1_2 */

 R1282  - Audio IF 1_3 */

 R1283  - Audio IF 1_4 */

 R1284  - Audio IF 1_5 */

 R1285  - Audio IF 1_6 */

 R1286  - Audio IF 1_7 */

 R1287  - Audio IF 1_8 */

 R1288  - Audio IF 1_9 */

 R1289  - Audio IF 1_10 */

 R1290  - Audio IF 1_11 */

 R1291  - Audio IF 1_12 */

 R1292  - Audio IF 1_13 */

 R1293  - Audio IF 1_14 */

 R1294  - Audio IF 1_15 */

 R1295  - Audio IF 1_16 */

 R1296  - Audio IF 1_17 */

 R1297  - Audio IF 1_18 */

 R1298  - Audio IF 1_19 */

 R1299  - Audio IF 1_20 */

 R1300  - Audio IF 1_21 */

 R1301  - Audio IF 1_22 */

 R1302  - Audio IF 1_23 */

 R1303  - Audio IF 1_24 */

 R1304  - Audio IF 1_25 */

 R1305  - Audio IF 1_26 */

 R1306  - Audio IF 1_27 */

 R1344  - Audio IF 2_1 */

 R1345  - Audio IF 2_2 */

 R1346  - Audio IF 2_3 */

 R1347  - Audio IF 2_4 */

 R1348  - Audio IF 2_5 */

 R1349  - Audio IF 2_6 */

 R1350  - Audio IF 2_7 */

 R1351  - Audio IF 2_8 */

 R1352  - Audio IF 2_9 */

 R1353  - Audio IF 2_10 */

 R1354  - Audio IF 2_11 */

 R1361  - Audio IF 2_18 */

 R1362  - Audio IF 2_19 */

 R1369  - Audio IF 2_26 */

 R1370  - Audio IF 2_27 */

 R1408  - Audio IF 3_1 */

 R1409  - Audio IF 3_2 */

 R1410  - Audio IF 3_3 */

 R1411  - Audio IF 3_4 */

 R1412  - Audio IF 3_5 */

 R1413  - Audio IF 3_6 */

 R1414  - Audio IF 3_7 */

 R1415  - Audio IF 3_8 */

 R1416  - Audio IF 3_9 */

 R1417  - Audio IF 3_10 */

 R1418  - Audio IF 3_11 */

 R1425  - Audio IF 3_18 */

 R1426  - Audio IF 3_19 */

 R1433  - Audio IF 3_26 */

 R1434  - Audio IF 3_27 */

 R1600  - PWM1MIX Input 1 Source */

 R1601  - PWM1MIX Input 1 Volume */

 R1602  - PWM1MIX Input 2 Source */

 R1603  - PWM1MIX Input 2 Volume */

 R1604  - PWM1MIX Input 3 Source */

 R1605  - PWM1MIX Input 3 Volume */

 R1606  - PWM1MIX Input 4 Source */

 R1607  - PWM1MIX Input 4 Volume */

 R1608  - PWM2MIX Input 1 Source */

 R1609  - PWM2MIX Input 1 Volume */

 R1610  - PWM2MIX Input 2 Source */

 R1611  - PWM2MIX Input 2 Volume */

 R1612  - PWM2MIX Input 3 Source */

 R1613  - PWM2MIX Input 3 Volume */

 R1614  - PWM2MIX Input 4 Source */

 R1615  - PWM2MIX Input 4 Volume */

 R1664  - OUT1LMIX Input 1 Source */

 R1665  - OUT1LMIX Input 1 Volume */

 R1666  - OUT1LMIX Input 2 Source */

 R1667  - OUT1LMIX Input 2 Volume */

 R1668  - OUT1LMIX Input 3 Source */

 R1669  - OUT1LMIX Input 3 Volume */

 R1670  - OUT1LMIX Input 4 Source */

 R1671  - OUT1LMIX Input 4 Volume */

 R1672  - OUT1RMIX Input 1 Source */

 R1673  - OUT1RMIX Input 1 Volume */

 R1674  - OUT1RMIX Input 2 Source */

 R1675  - OUT1RMIX Input 2 Volume */

 R1676  - OUT1RMIX Input 3 Source */

 R1677  - OUT1RMIX Input 3 Volume */

 R1678  - OUT1RMIX Input 4 Source */

 R1679  - OUT1RMIX Input 4 Volume */

 R1680  - OUT2LMIX Input 1 Source */

 R1681  - OUT2LMIX Input 1 Volume */

 R1682  - OUT2LMIX Input 2 Source */

 R1683  - OUT2LMIX Input 2 Volume */

 R1684  - OUT2LMIX Input 3 Source */

 R1685  - OUT2LMIX Input 3 Volume */

 R1686  - OUT2LMIX Input 4 Source */

 R1687  - OUT2LMIX Input 4 Volume */

 R1688  - OUT2RMIX Input 1 Source */

 R1689  - OUT2RMIX Input 1 Volume */

 R1690  - OUT2RMIX Input 2 Source */

 R1691  - OUT2RMIX Input 2 Volume */

 R1692  - OUT2RMIX Input 3 Source */

 R1693  - OUT2RMIX Input 3 Volume */

 R1694  - OUT2RMIX Input 4 Source */

 R1695  - OUT2RMIX Input 4 Volume */

 R1696  - OUT3LMIX Input 1 Source */

 R1697  - OUT3LMIX Input 1 Volume */

 R1698  - OUT3LMIX Input 2 Source */

 R1699  - OUT3LMIX Input 2 Volume */

 R1700  - OUT3LMIX Input 3 Source */

 R1701  - OUT3LMIX Input 3 Volume */

 R1702  - OUT3LMIX Input 4 Source */

 R1703  - OUT3LMIX Input 4 Volume */

 R1704  - OUT3RMIX Input 1 Source */

 R1705  - OUT3RMIX Input 1 Volume */

 R1706  - OUT3RMIX Input 2 Source */

 R1707  - OUT3RMIX Input 2 Volume */

 R1708  - OUT3RMIX Input 3 Source */

 R1709  - OUT3RMIX Input 3 Volume */

 R1710  - OUT3RMIX Input 4 Source */

 R1711  - OUT3RMIX Input 4 Volume */

 R1712  - OUT4LMIX Input 1 Source */

 R1713  - OUT4LMIX Input 1 Volume */

 R1714  - OUT4LMIX Input 2 Source */

 R1715  - OUT4LMIX Input 2 Volume */

 R1716  - OUT4LMIX Input 3 Source */

 R1717  - OUT4LMIX Input 3 Volume */

 R1718  - OUT4LMIX Input 4 Source */

 R1719  - OUT4LMIX Input 4 Volume */

 R1720  - OUT4RMIX Input 1 Source */

 R1721  - OUT4RMIX Input 1 Volume */

 R1722  - OUT4RMIX Input 2 Source */

 R1723  - OUT4RMIX Input 2 Volume */

 R1724  - OUT4RMIX Input 3 Source */

 R1725  - OUT4RMIX Input 3 Volume */

 R1726  - OUT4RMIX Input 4 Source */

 R1727  - OUT4RMIX Input 4 Volume */

 R1728  - OUT5LMIX Input 1 Source */

 R1729  - OUT5LMIX Input 1 Volume */

 R1730  - OUT5LMIX Input 2 Source */

 R1731  - OUT5LMIX Input 2 Volume */

 R1732  - OUT5LMIX Input 3 Source */

 R1733  - OUT5LMIX Input 3 Volume */

 R1734  - OUT5LMIX Input 4 Source */

 R1735  - OUT5LMIX Input 4 Volume */

 R1736  - OUT5RMIX Input 1 Source */

 R1737  - OUT5RMIX Input 1 Volume */

 R1738  - OUT5RMIX Input 2 Source */

 R1739  - OUT5RMIX Input 2 Volume */

 R1740  - OUT5RMIX Input 3 Source */

 R1741  - OUT5RMIX Input 3 Volume */

 R1742  - OUT5RMIX Input 4 Source */

 R1743  - OUT5RMIX Input 4 Volume */

 R1744  - OUT6LMIX Input 1 Source */

 R1745  - OUT6LMIX Input 1 Volume */

 R1746  - OUT6LMIX Input 2 Source */

 R1747  - OUT6LMIX Input 2 Volume */

 R1748  - OUT6LMIX Input 3 Source */

 R1749  - OUT6LMIX Input 3 Volume */

 R1750  - OUT6LMIX Input 4 Source */

 R1751  - OUT6LMIX Input 4 Volume */

 R1752  - OUT6RMIX Input 1 Source */

 R1753  - OUT6RMIX Input 1 Volume */

 R1754  - OUT6RMIX Input 2 Source */

 R1755  - OUT6RMIX Input 2 Volume */

 R1756  - OUT6RMIX Input 3 Source */

 R1757  - OUT6RMIX Input 3 Volume */

 R1758  - OUT6RMIX Input 4 Source */

 R1759  - OUT6RMIX Input 4 Volume */

 R1792  - AIF1TX1MIX Input 1 Source */

 R1793  - AIF1TX1MIX Input 1 Volume */

 R1794  - AIF1TX1MIX Input 2 Source */

 R1795  - AIF1TX1MIX Input 2 Volume */

 R1796  - AIF1TX1MIX Input 3 Source */

 R1797  - AIF1TX1MIX Input 3 Volume */

 R1798  - AIF1TX1MIX Input 4 Source */

 R1799  - AIF1TX1MIX Input 4 Volume */

 R1800  - AIF1TX2MIX Input 1 Source */

 R1801  - AIF1TX2MIX Input 1 Volume */

 R1802  - AIF1TX2MIX Input 2 Source */

 R1803  - AIF1TX2MIX Input 2 Volume */

 R1804  - AIF1TX2MIX Input 3 Source */

 R1805  - AIF1TX2MIX Input 3 Volume */

 R1806  - AIF1TX2MIX Input 4 Source */

 R1807  - AIF1TX2MIX Input 4 Volume */

 R1808  - AIF1TX3MIX Input 1 Source */

 R1809  - AIF1TX3MIX Input 1 Volume */

 R1810  - AIF1TX3MIX Input 2 Source */

 R1811  - AIF1TX3MIX Input 2 Volume */

 R1812  - AIF1TX3MIX Input 3 Source */

 R1813  - AIF1TX3MIX Input 3 Volume */

 R1814  - AIF1TX3MIX Input 4 Source */

 R1815  - AIF1TX3MIX Input 4 Volume */

 R1816  - AIF1TX4MIX Input 1 Source */

 R1817  - AIF1TX4MIX Input 1 Volume */

 R1818  - AIF1TX4MIX Input 2 Source */

 R1819  - AIF1TX4MIX Input 2 Volume */

 R1820  - AIF1TX4MIX Input 3 Source */

 R1821  - AIF1TX4MIX Input 3 Volume */

 R1822  - AIF1TX4MIX Input 4 Source */

 R1823  - AIF1TX4MIX Input 4 Volume */

 R1824  - AIF1TX5MIX Input 1 Source */

 R1825  - AIF1TX5MIX Input 1 Volume */

 R1826  - AIF1TX5MIX Input 2 Source */

 R1827  - AIF1TX5MIX Input 2 Volume */

 R1828  - AIF1TX5MIX Input 3 Source */

 R1829  - AIF1TX5MIX Input 3 Volume */

 R1830  - AIF1TX5MIX Input 4 Source */

 R1831  - AIF1TX5MIX Input 4 Volume */

 R1832  - AIF1TX6MIX Input 1 Source */

 R1833  - AIF1TX6MIX Input 1 Volume */

 R1834  - AIF1TX6MIX Input 2 Source */

 R1835  - AIF1TX6MIX Input 2 Volume */

 R1836  - AIF1TX6MIX Input 3 Source */

 R1837  - AIF1TX6MIX Input 3 Volume */

 R1838  - AIF1TX6MIX Input 4 Source */

 R1839  - AIF1TX6MIX Input 4 Volume */

 R1840  - AIF1TX7MIX Input 1 Source */

 R1841  - AIF1TX7MIX Input 1 Volume */

 R1842  - AIF1TX7MIX Input 2 Source */

 R1843  - AIF1TX7MIX Input 2 Volume */

 R1844  - AIF1TX7MIX Input 3 Source */

 R1845  - AIF1TX7MIX Input 3 Volume */

 R1846  - AIF1TX7MIX Input 4 Source */

 R1847  - AIF1TX7MIX Input 4 Volume */

 R1848  - AIF1TX8MIX Input 1 Source */

 R1849  - AIF1TX8MIX Input 1 Volume */

 R1850  - AIF1TX8MIX Input 2 Source */

 R1851  - AIF1TX8MIX Input 2 Volume */

 R1852  - AIF1TX8MIX Input 3 Source */

 R1853  - AIF1TX8MIX Input 3 Volume */

 R1854  - AIF1TX8MIX Input 4 Source */

 R1855  - AIF1TX8MIX Input 4 Volume */

 R1856  - AIF2TX1MIX Input 1 Source */

 R1857  - AIF2TX1MIX Input 1 Volume */

 R1858  - AIF2TX1MIX Input 2 Source */

 R1859  - AIF2TX1MIX Input 2 Volume */

 R1860  - AIF2TX1MIX Input 3 Source */

 R1861  - AIF2TX1MIX Input 3 Volume */

 R1862  - AIF2TX1MIX Input 4 Source */

 R1863  - AIF2TX1MIX Input 4 Volume */

 R1864  - AIF2TX2MIX Input 1 Source */

 R1865  - AIF2TX2MIX Input 1 Volume */

 R1866  - AIF2TX2MIX Input 2 Source */

 R1867  - AIF2TX2MIX Input 2 Volume */

 R1868  - AIF2TX2MIX Input 3 Source */

 R1869  - AIF2TX2MIX Input 3 Volume */

 R1870  - AIF2TX2MIX Input 4 Source */

 R1871  - AIF2TX2MIX Input 4 Volume */

 R1920  - AIF3TX1MIX Input 1 Source */

 R1921  - AIF3TX1MIX Input 1 Volume */

 R1922  - AIF3TX1MIX Input 2 Source */

 R1923  - AIF3TX1MIX Input 2 Volume */

 R1924  - AIF3TX1MIX Input 3 Source */

 R1925  - AIF3TX1MIX Input 3 Volume */

 R1926  - AIF3TX1MIX Input 4 Source */

 R1927  - AIF3TX1MIX Input 4 Volume */

 R1928  - AIF3TX2MIX Input 1 Source */

 R1929  - AIF3TX2MIX Input 1 Volume */

 R1930  - AIF3TX2MIX Input 2 Source */

 R1931  - AIF3TX2MIX Input 2 Volume */

 R1932  - AIF3TX2MIX Input 3 Source */

 R1933  - AIF3TX2MIX Input 3 Volume */

 R1934  - AIF3TX2MIX Input 4 Source */

 R1935  - AIF3TX2MIX Input 4 Volume */

 R2176  - EQ1MIX Input 1 Source */

 R2177  - EQ1MIX Input 1 Volume */

 R2178  - EQ1MIX Input 2 Source */

 R2179  - EQ1MIX Input 2 Volume */

 R2180  - EQ1MIX Input 3 Source */

 R2181  - EQ1MIX Input 3 Volume */

 R2182  - EQ1MIX Input 4 Source */

 R2183  - EQ1MIX Input 4 Volume */

 R2184  - EQ2MIX Input 1 Source */

 R2185  - EQ2MIX Input 1 Volume */

 R2186  - EQ2MIX Input 2 Source */

 R2187  - EQ2MIX Input 2 Volume */

 R2188  - EQ2MIX Input 3 Source */

 R2189  - EQ2MIX Input 3 Volume */

 R2190  - EQ2MIX Input 4 Source */

 R2191  - EQ2MIX Input 4 Volume */

 R2192  - EQ3MIX Input 1 Source */

 R2193  - EQ3MIX Input 1 Volume */

 R2194  - EQ3MIX Input 2 Source */

 R2195  - EQ3MIX Input 2 Volume */

 R2196  - EQ3MIX Input 3 Source */

 R2197  - EQ3MIX Input 3 Volume */

 R2198  - EQ3MIX Input 4 Source */

 R2199  - EQ3MIX Input 4 Volume */

 R2200  - EQ4MIX Input 1 Source */

 R2201  - EQ4MIX Input 1 Volume */

 R2202  - EQ4MIX Input 2 Source */

 R2203  - EQ4MIX Input 2 Volume */

 R2204  - EQ4MIX Input 3 Source */

 R2205  - EQ4MIX Input 3 Volume */

 R2206  - EQ4MIX Input 4 Source */

 R2207  - EQ4MIX Input 4 Volume */

 R2240  - DRC1LMIX Input 1 Source */

 R2241  - DRC1LMIX Input 1 Volume */

 R2242  - DRC1LMIX Input 2 Source */

 R2243  - DRC1LMIX Input 2 Volume */

 R2244  - DRC1LMIX Input 3 Source */

 R2245  - DRC1LMIX Input 3 Volume */

 R2246  - DRC1LMIX Input 4 Source */

 R2247  - DRC1LMIX Input 4 Volume */

 R2248  - DRC1RMIX Input 1 Source */

 R2249  - DRC1RMIX Input 1 Volume */

 R2250  - DRC1RMIX Input 2 Source */

 R2251  - DRC1RMIX Input 2 Volume */

 R2252  - DRC1RMIX Input 3 Source */

 R2253  - DRC1RMIX Input 3 Volume */

 R2254  - DRC1RMIX Input 4 Source */

 R2255  - DRC1RMIX Input 4 Volume */

 R2304  - HPLP1MIX Input 1 Source */

 R2305  - HPLP1MIX Input 1 Volume */

 R2306  - HPLP1MIX Input 2 Source */

 R2307  - HPLP1MIX Input 2 Volume */

 R2308  - HPLP1MIX Input 3 Source */

 R2309  - HPLP1MIX Input 3 Volume */

 R2310  - HPLP1MIX Input 4 Source */

 R2311  - HPLP1MIX Input 4 Volume */

 R2312  - HPLP2MIX Input 1 Source */

 R2313  - HPLP2MIX Input 1 Volume */

 R2314  - HPLP2MIX Input 2 Source */

 R2315  - HPLP2MIX Input 2 Volume */

 R2316  - HPLP2MIX Input 3 Source */

 R2317  - HPLP2MIX Input 3 Volume */

 R2318  - HPLP2MIX Input 4 Source */

 R2319  - HPLP2MIX Input 4 Volume */

 R2320  - HPLP3MIX Input 1 Source */

 R2321  - HPLP3MIX Input 1 Volume */

 R2322  - HPLP3MIX Input 2 Source */

 R2323  - HPLP3MIX Input 2 Volume */

 R2324  - HPLP3MIX Input 3 Source */

 R2325  - HPLP3MIX Input 3 Volume */

 R2326  - HPLP3MIX Input 4 Source */

 R2327  - HPLP3MIX Input 4 Volume */

 R2328  - HPLP4MIX Input 1 Source */

 R2329  - HPLP4MIX Input 1 Volume */

 R2330  - HPLP4MIX Input 2 Source */

 R2331  - HPLP4MIX Input 2 Volume */

 R2332  - HPLP4MIX Input 3 Source */

 R2333  - HPLP4MIX Input 3 Volume */

 R2334  - HPLP4MIX Input 4 Source */

 R2335  - HPLP4MIX Input 4 Volume */

 R2368  - DSP1LMIX Input 1 Source */

 R2369  - DSP1LMIX Input 1 Volume */

 R2370  - DSP1LMIX Input 2 Source */

 R2371  - DSP1LMIX Input 2 Volume */

 R2372  - DSP1LMIX Input 3 Source */

 R2373  - DSP1LMIX Input 3 Volume */

 R2374  - DSP1LMIX Input 4 Source */

 R2375  - DSP1LMIX Input 4 Volume */

 R2376  - DSP1RMIX Input 1 Source */

 R2377  - DSP1RMIX Input 1 Volume */

 R2378  - DSP1RMIX Input 2 Source */

 R2379  - DSP1RMIX Input 2 Volume */

 R2380  - DSP1RMIX Input 3 Source */

 R2381  - DSP1RMIX Input 3 Volume */

 R2382  - DSP1RMIX Input 4 Source */

 R2383  - DSP1RMIX Input 4 Volume */

 R2384  - DSP1AUX1MIX Input 1 Source */

 R2392  - DSP1AUX2MIX Input 1 Source */

 R2400  - DSP1AUX3MIX Input 1 Source */

 R2408  - DSP1AUX4MIX Input 1 Source */

 R2416  - DSP1AUX5MIX Input 1 Source */

 R2424  - DSP1AUX6MIX Input 1 Source */

 R2432  - DSP2LMIX Input 1 Source */

 R2433  - DSP2LMIX Input 1 Volume */

 R2434  - DSP2LMIX Input 2 Source */

 R2435  - DSP2LMIX Input 2 Volume */

 R2436  - DSP2LMIX Input 3 Source */

 R2437  - DSP2LMIX Input 3 Volume */

 R2438  - DSP2LMIX Input 4 Source */

 R2439  - DSP2LMIX Input 4 Volume */

 R2440  - DSP2RMIX Input 1 Source */

 R2441  - DSP2RMIX Input 1 Volume */

 R2442  - DSP2RMIX Input 2 Source */

 R2443  - DSP2RMIX Input 2 Volume */

 R2444  - DSP2RMIX Input 3 Source */

 R2445  - DSP2RMIX Input 3 Volume */

 R2446  - DSP2RMIX Input 4 Source */

 R2447  - DSP2RMIX Input 4 Volume */

 R2448  - DSP2AUX1MIX Input 1 Source */

 R2456  - DSP2AUX2MIX Input 1 Source */

 R2464  - DSP2AUX3MIX Input 1 Source */

 R2472  - DSP2AUX4MIX Input 1 Source */

 R2480  - DSP2AUX5MIX Input 1 Source */

 R2488  - DSP2AUX6MIX Input 1 Source */

 R2496  - DSP3LMIX Input 1 Source */

 R2497  - DSP3LMIX Input 1 Volume */

 R2498  - DSP3LMIX Input 2 Source */

 R2499  - DSP3LMIX Input 2 Volume */

 R2500  - DSP3LMIX Input 3 Source */

 R2501  - DSP3LMIX Input 3 Volume */

 R2502  - DSP3LMIX Input 4 Source */

 R2503  - DSP3LMIX Input 4 Volume */

 R2504  - DSP3RMIX Input 1 Source */

 R2505  - DSP3RMIX Input 1 Volume */

 R2506  - DSP3RMIX Input 2 Source */

 R2507  - DSP3RMIX Input 2 Volume */

 R2508  - DSP3RMIX Input 3 Source */

 R2509  - DSP3RMIX Input 3 Volume */

 R2510  - DSP3RMIX Input 4 Source */

 R2511  - DSP3RMIX Input 4 Volume */

 R2512  - DSP3AUX1MIX Input 1 Source */

 R2520  - DSP3AUX2MIX Input 1 Source */

 R2528  - DSP3AUX3MIX Input 1 Source */

 R2536  - DSP3AUX4MIX Input 1 Source */

 R2544  - DSP3AUX5MIX Input 1 Source */

 R2552  - DSP3AUX6MIX Input 1 Source */

 R2688  - ASRC1LMIX Input 1 Source */

 R2696  - ASRC1RMIX Input 1 Source */

 R2704  - ASRC2LMIX Input 1 Source */

 R2712  - ASRC2RMIX Input 1 Source */

 R2816  - ISRC1DEC1MIX Input 1 Source */

 R2824  - ISRC1DEC2MIX Input 1 Source */

 R2832  - ISRC1DEC3MIX Input 1 Source */

 R2840  - ISRC1DEC4MIX Input 1 Source */

 R2848  - ISRC1INT1MIX Input 1 Source */

 R2856  - ISRC1INT2MIX Input 1 Source */

 R2864  - ISRC1INT3MIX Input 1 Source */

 R2872  - ISRC1INT4MIX Input 1 Source */

 R2880  - ISRC2DEC1MIX Input 1 Source */

 R2888  - ISRC2DEC2MIX Input 1 Source */

 R2896  - ISRC2DEC3MIX Input 1 Source */

 R2904  - ISRC2DEC4MIX Input 1 Source */

 R2912  - ISRC2INT1MIX Input 1 Source */

 R2920  - ISRC2INT2MIX Input 1 Source */

 R2928  - ISRC2INT3MIX Input 1 Source */

 R2936  - ISRC2INT4MIX Input 1 Source */

 R3072  - GPIO CTRL 1 */

 R3073  - GPIO CTRL 2 */

 R3074  - GPIO CTRL 3 */

 R3075  - GPIO CTRL 4 */

 R3076  - GPIO CTRL 5 */

 R3077  - GPIO CTRL 6 */

 R3107  - Misc Pad Ctrl 1 */

 R3108  - Misc Pad Ctrl 2 */

 R3109  - Misc Pad Ctrl 3 */

 R3110  - Misc Pad Ctrl 4 */

 R3111  - Misc Pad Ctrl 5 */

 R3112  - Misc GPIO 1 */

 R3328  - Interrupt Status 1 */

 R3329  - Interrupt Status 2 */

 R3330  - Interrupt Status 3 */

 R3331  - Interrupt Status 4 */

 R3332  - Interrupt Raw Status 2 */

 R3333  - Interrupt Raw Status 3 */

 R3334  - Interrupt Raw Status 4 */

 R3335  - Interrupt Status 1 Mask */

 R3336  - Interrupt Status 2 Mask */

 R3337  - Interrupt Status 3 Mask */

 R3338  - Interrupt Status 4 Mask */

 R3359  - Interrupt Control */

 R3360  - IRQ Debounce 1 */

 R3361  - IRQ Debounce 2 */

 R3584  - FX_Ctrl */

 R3600  - EQ1_1 */

 R3601  - EQ1_2 */

 R3602  - EQ1_3 */

 R3603  - EQ1_4 */

 R3604  - EQ1_5 */

 R3605  - EQ1_6 */

 R3606  - EQ1_7 */

 R3607  - EQ1_8 */

 R3608  - EQ1_9 */

 R3609  - EQ1_10 */

 R3610  - EQ1_11 */

 R3611  - EQ1_12 */

 R3612  - EQ1_13 */

 R3613  - EQ1_14 */

 R3614  - EQ1_15 */

 R3615  - EQ1_16 */

 R3616  - EQ1_17 */

 R3617  - EQ1_18 */

 R3618  - EQ1_19 */

 R3619  - EQ1_20 */

 R3622  - EQ2_1 */

 R3623  - EQ2_2 */

 R3624  - EQ2_3 */

 R3625  - EQ2_4 */

 R3626  - EQ2_5 */

 R3627  - EQ2_6 */

 R3628  - EQ2_7 */

 R3629  - EQ2_8 */

 R3630  - EQ2_9 */

 R3631  - EQ2_10 */

 R3632  - EQ2_11 */

 R3633  - EQ2_12 */

 R3634  - EQ2_13 */

 R3635  - EQ2_14 */

 R3636  - EQ2_15 */

 R3637  - EQ2_16 */

 R3638  - EQ2_17 */

 R3639  - EQ2_18 */

 R3640  - EQ2_19 */

 R3641  - EQ2_20 */

 R3644  - EQ3_1 */

 R3645  - EQ3_2 */

 R3646  - EQ3_3 */

 R3647  - EQ3_4 */

 R3648  - EQ3_5 */

 R3649  - EQ3_6 */

 R3650  - EQ3_7 */

 R3651  - EQ3_8 */

 R3652  - EQ3_9 */

 R3653  - EQ3_10 */

 R3654  - EQ3_11 */

 R3655  - EQ3_12 */

 R3656  - EQ3_13 */

 R3657  - EQ3_14 */

 R3658  - EQ3_15 */

 R3659  - EQ3_16 */

 R3660  - EQ3_17 */

 R3661  - EQ3_18 */

 R3662  - EQ3_19 */

 R3663  - EQ3_20 */

 R3666  - EQ4_1 */

 R3667  - EQ4_2 */

 R3668  - EQ4_3 */

 R3669  - EQ4_4 */

 R3670  - EQ4_5 */

 R3671  - EQ4_6 */

 R3672  - EQ4_7 */

 R3673  - EQ4_8 */

 R3674  - EQ4_9 */

 R3675  - EQ4_10 */

 R3676  - EQ4_11 */

 R3677  - EQ4_12 */

 R3678  - EQ4_13 */

 R3679  - EQ4_14 */

 R3680  - EQ4_15 */

 R3681  - EQ4_16 */

 R3682  - EQ4_17 */

 R3683  - EQ4_18 */

 R3684  - EQ4_19 */

 R3685  - EQ4_20 */

 R3712  - DRC1 ctrl1 */

 R3713  - DRC1 ctrl2 */

 R3714  - DRC1 ctrl3 */

 R3715  - DRC1 ctrl4 */

 R3716  - DRC1 ctrl5 */

 R3776  - HPLPF1_1 */

 R3777  - HPLPF1_2 */

 R3780  - HPLPF2_1 */

 R3781  - HPLPF2_2 */

 R3784  - HPLPF3_1 */

 R3785  - HPLPF3_2 */

 R3788  - HPLPF4_1 */

 R3789  - HPLPF4_2 */

 R3842  - DSP1 Control 2 */

 R3843  - DSP1 Control 3 */

 R3844  - DSP1 Control 4 */

 R4098  - DSP2 Control 2 */

 R4099  - DSP2 Control 3 */

 R4100  - DSP2 Control 4 */

 R4354  - DSP3 Control 2 */

 R4355  - DSP3 Control 3 */

 R4356  - DSP3 Control 4 */

/*

 * CS4270 ALSA SoC (ASoC) codec driver

 *

 * Author: Timur Tabi <timur@freescale.com>

 *

 * Copyright 2007-2009 Freescale Semiconductor, Inc.  This file is licensed

 * under the terms of the GNU General Public License version 2.  This

 * program is licensed "as is" without any warranty of any kind, whether

 * express or implied.

 *

 * This is an ASoC device driver for the Cirrus Logic CS4270 codec.

 *

 * Current features/limitations:

 *

 * - Software mode is supported.  Stand-alone mode is not supported.

 * - Only I2C is supported, not SPI

 * - Support for master and slave mode

 * - The machine driver's 'startup' function must call

 *   cs4270_set_dai_sysclk() with the value of MCLK.

 * - Only I2S and left-justified modes are supported

 * - Power management is supported

/*

 * The codec isn't really big-endian or little-endian, since the I2S

 * interface requires data to be sent serially with the MSbit first.

 * However, to support BE and LE I2S devices, we specify both here.  That

 * way, ALSA will always match the bit patterns.

 CS4270 registers addresses */

 Chip ID */

 Power Control */

 Mode Control */

 Serial Format, ADC/DAC Control */

 Transition Control */

 Mute Control */

 DAC Channel A Volume Control */

 DAC Channel B Volume Control */

 Bit masks for the CS4270 registers */

/* Power-on default values for the registers

 *

 * This array contains the power-on default values of the registers, with the

 * exception of the "CHIPID" register (01h).  The lower four bits of that

 * register contain the hardware revision, so it is treated as volatile.

 Private data for the CS4270 */

 Input frequency of the MCLK pin */

 The mode (I2S or left-justified) */

 power domain regulators */

 reset gpio */

/**

 * struct cs4270_mode_ratios - clock ratio tables

 * @ratio: the ratio of MCLK to the sample rate

 * @speed_mode: the Speed Mode bits to set in the Mode Control register for

 *              this ratio

 * @mclk: the Ratio Select bits to set in the Mode Control register for this

 *        ratio

 *

 * The data for this chart is taken from Table 5 of the CS4270 reference

 * manual.

 *

 * This table is used to determine how to program the Mode Control register.

 * It is also used by cs4270_set_dai_sysclk() to tell ALSA which sampling

 * rates the CS4270 currently supports.

 *

 * @speed_mode is the corresponding bit pattern to be written to the

 * MODE bits of the Mode Control Register

 *

 * @mclk is the corresponding bit pattern to be wirten to the MCLK bits of

 * the Mode Control Register.

 *

 * In situations where a single ratio is represented by multiple speed

 * modes, we favor the slowest speed.  E.g, for a ratio of 128, we pick

 * double-speed instead of quad-speed.  However, the CS4270 errata states

 * that divide-By-1.5 can cause failures, so we avoid that mode where

 * possible.

 *

 * Errata: There is an errata for the CS4270 where divide-by-1.5 does not

 * work if Vd is 3.3V.  If this effects you, select the

 * CONFIG_SND_SOC_CS4270_VD33_ERRATA Kconfig option, and the driver will

 * never select any sample rates that require divide-by-1.5.

 The number of MCLK/LRCK ratios supported by the CS4270 */

 Unreadable registers are considered volatile */

/**

 * cs4270_set_dai_sysclk - determine the CS4270 samples rates.

 * @codec_dai: the codec DAI

 * @clk_id: the clock ID (ignored)

 * @freq: the MCLK input frequency

 * @dir: the clock direction (ignored)

 *

 * This function is used to tell the codec driver what the input MCLK

 * frequency is.

 *

 * The value of MCLK is used to determine which sample rates are supported

 * by the CS4270.  The ratio of MCLK / Fs must be equal to one of nine

 * supported values - 64, 96, 128, 192, 256, 384, 512, 768, and 1024.

 *

 * This function calculates the nine ratios and determines which ones match

 * a standard sample rate.  If there's a match, then it is added to the list

 * of supported sample rates.

 *

 * This function must be called by the machine driver's 'startup' function,

 * otherwise the list of supported sample rates will not be available in

 * time for ALSA.

 *

 * For setups with variable MCLKs, pass 0 as 'freq' argument. This will cause

 * theoretically possible sample rates to be enabled. Call it again with a

 * proper value set one the external clock is set (most probably you would do

 * that from a machine's driver 'hw_param' hook.

/**

 * cs4270_set_dai_fmt - configure the codec for the selected audio format

 * @codec_dai: the codec DAI

 * @format: a SND_SOC_DAIFMT_x value indicating the data format

 *

 * This function takes a bitmask of SND_SOC_DAIFMT_x bits and programs the

 * codec accordingly.

 *

 * Currently, this function only supports SND_SOC_DAIFMT_I2S and

 * SND_SOC_DAIFMT_LEFT_J.  The CS4270 codec also supports right-justified

 * data for playback only, but ASoC currently does not support different

 * formats for playback vs. record.

 set DAI format */

 set master/slave audio interface */

 all other modes are unsupported by the hardware */

/**

 * cs4270_hw_params - program the CS4270 with the given hardware parameters.

 * @substream: the audio stream

 * @params: the hardware parameters to set

 * @dai: the SOC DAI (ignored)

 *

 * This function programs the hardware with the values provided.

 * Specifically, the sample rate and the data format.

 *

 * The .ops functions are used to provide board-specific data, like input

 * frequencies, to this driver.  This function takes that information,

 * combines it with the hardware parameters provided, and programs the

 * hardware accordingly.

 Figure out which MCLK/LRCK ratio to use */

 Sampling rate, in Hz */

 MCLK/LRCK ratio */

 We did not find a matching ratio */

 Set the sample rate */

 Set the DAI format */

/**

 * cs4270_dai_mute - enable/disable the CS4270 external mute

 * @dai: the SOC DAI

 * @mute: 0 = disable mute, 1 = enable mute

 * @direction: (ignored)

 *

 * This function toggles the mute bits in the MUTE register.  The CS4270's

 * mute capability is intended for external muting circuitry, so if the

 * board does not have the MUTEA or MUTEB pins connected to such circuitry,

 * then this function will do nothing.

/**

 * cs4270_soc_put_mute - put callback for the 'Master Playback switch'

 * 			 alsa control.

 * @kcontrol: mixer control

 * @ucontrol: control element information

 *

 * This function basically passes the arguments on to the generic

 * snd_soc_put_volsw() function and saves the mute information in

 * our private data structure. This is because we want to prevent

 * cs4270_dai_mute() neglecting the user's decision to manually

 * mute the codec's output.

 *

 * Returns 0 for success.

 A list of non-DAPM controls that the CS4270 supports */

/**

 * cs4270_probe - ASoC probe function

 * @component: ASoC component

 *

 * This function is called when ASoC has all the pieces it needs to

 * instantiate a sound driver.

	/* Disable auto-mute.  This feature appears to be buggy.  In some

	 * situations, auto-mute will not deactivate when it should, so we want

	 * this feature disabled by default.  An application (e.g. alsactl) can

	 * re-enabled it by using the controls.

	/* Disable automatic volume control.  The hardware enables, and it

	 * causes volume change commands to be delayed, sometimes until after

	 * playback has started.  An application (e.g. alsactl) can

	 * re-enabled it by using the controls.

/**

 * cs4270_remove - ASoC remove function

 * @component: ASoC component

 *

 * This function is the counterpart to cs4270_probe().

/* This suspend/resume implementation can handle both - a simple standby

 * where the codec remains powered, and a full suspend, where the voltage

 * domain the codec is connected to is teared down and/or any other hardware

 * reset condition is asserted.

 *

 * The codec's own power saving features are enabled in the suspend callback,

 * and all registers are written back to the hardware when resuming.

	/* In case the device was put to hard reset during sleep, we need to

 first restore the entire register cache ... */

 ... then disable the power-down bits */

 CONFIG_PM */

/*

 * ASoC codec driver structure

/*

 * cs4270_of_match - the device tree bindings

/**

 * cs4270_i2c_remove - deinitialize the I2C interface of the CS4270

 * @i2c_client: the I2C client object

 *

 * This function puts the chip into low power mode when the i2c device

 * is removed.

/**

 * cs4270_i2c_probe - initialize the I2C interface of the CS4270

 * @i2c_client: the I2C client object

 * @id: the I2C device ID (ignored)

 *

 * This function is called whenever the I2C subsystem finds a device that

 * matches the device ID given via a prior call to i2c_add_driver().

 get the power supply regulators */

 reset the device */

 Sleep 500ns before i2c communications */

 Verify that we have a CS4270 */

 The top four bits of the chip ID should be 1100. */

/*

 * cs4270_id - I2C device IDs supported by this driver

/*

 * cs4270_i2c_driver - I2C device identification

 *

 * This structure tells the I2C subsystem how to identify and support a

 * given I2C device type.

 SPDX-License-Identifier: GPL-2.0



 Audio driver for AK5558 ADC



 Copyright (C) 2015 Asahi Kasei Microdevices Corporation

 Copyright 2018 NXP

 AK5558 Codec Private Data */

 Reset & Power down GPIO */

 ak5558 register cache & default register settings */

	0x00	AK5558_00_POWER_MANAGEMENT1	*/

	0x01	AK5558_01_POWER_MANAGEMENT2	*/

	0x02	AK5558_02_CONTROL1		*/

	0x03	AK5558_03_CONTROL2		*/

	0x04	AK5558_04_CONTROL3		*/

	0x05	AK5558_05_DSD			*/

 Analog Input */

 Analog Input */

 set master/slave audio interface */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rt5677.c  --  RT5677 ALSA SoC audio codec driver

 *

 * Copyright 2013 Realtek Semiconductor Corp.

 * Author: Oder Chiou <oder_chiou@realtek.com>

 Register controlling boot vector */

 Modified by DSP firmware */

 Modified by DSP firmware */

 Modified by DSP firmware */

/**

 * rt5677_dsp_mode_i2c_write_addr - Write value to address on DSP mode.

 * @rt5677: Private Data.

 * @addr: Address index.

 * @value: Address data.

 * @opcode: opcode value

 *

 * Returns 0 for success or negative error code.

/**

 * rt5677_dsp_mode_i2c_read_addr - Read value from address on DSP mode.

 * @rt5677: Private Data.

 * @addr: Address index.

 * @value: Address data.

 *

 *

 * Returns 0 for success or negative error code.

/**

 * rt5677_dsp_mode_i2c_write - Write register on DSP mode.

 * @rt5677: Private Data.

 * @reg: Register index.

 * @value: Register data.

 *

 *

 * Returns 0 for success or negative error code.

/**

 * rt5677_dsp_mode_i2c_read - Read register on DSP mode.

 * @rt5677: Private Data

 * @reg: Register index.

 * @value: Register data.

 *

 *

 * Returns 0 for success or negative error code.

	/* Force dapm to sync before we enable the

	 * DSP to prevent write corruption

	/* DMIC1 power = enabled

	 * DMIC CLK = 256 * fs / 12

 I2S pre divide 2 = /6 (clk_sys2) */

 DSP Clock = MCLK1 (bypassed PLL2) */

 SAD Threshold1 */

 SAD Threshold2 */

	/* SAD Sample Rate Converter = Up 6 (8K to 48K)

	 * SAD Output Sample Rate = Same as I2S

	 * SAD Threshold3

	/* Minimum frame level within a pre-determined duration = 32 frames

	 * Bypass ADPCM Encoder/Decoder = Bypass ADPCM

	 * Automatic Push Data to SAD Buffer Once SAD Flag is triggered = enable

	 * SAD Buffer Over-Writing = enable

	 * SAD Buffer Pop Mode Control = disable

	 * SAD Buffer Push Mode Control = enable

	 * SAD Detector Control = enable

	 * SAD Function Control = enable

	 * SAD Function Reset = normal

	/* VAD/SAD is not routed to the IRQ output (i.e. MX-BE[14] = 0), but it

	 * is routed to DSP_IRQ_0, so DSP firmware may use it to sleep and save

	 * power. See ALC5677 datasheet section 9.17 "GPIO, Interrupt and Jack

	 * Detection" for more info.

 Private register, no doc */

	/* LDO2 output = 1.2V

	 * LDO1 output = 1.2V (LDO_IN = 1.8V)

	/* Codec core power =  power on

	 * LDO1 power = power on

	/* Isolation for DCVDD4 = normal (set during probe)

	 * Isolation for DCVDD2 = normal (set during probe)

	 * Isolation for DSP = normal

	 * Isolation for Band 0~7 = disable

	 * Isolation for InBound 4~10 and OutBound 4~10 = disable

	/* System Band 0~7 = power on

	 * InBound 4~10 and OutBound 4~10 = power on

	 * DSP = power on

	 * DSP CPU = stop (will be set to "run" after firmware loaded)

 TODO: handle p_memsz != p_filesz */

 Load dsp firmware from rt5677_elf_vad file */

		/* Before a hotword is detected, GPIO1 pin is configured as IRQ

		 * output so that jack detect works. When a hotword is detected,

		 * the DSP firmware configures the GPIO1 pin as GPIO1 and

		 * drives a 1. rt5677_irq() is called after a rising edge on

		 * the GPIO1 pin, due to either jack detect event or hotword

		 * event, or both. All possible events are checked and handled

		 * in rt5677_irq() where GPIO1 pin is configured back to IRQ

		 * output if a hotword is detected.

 Boot the firmware from IRAM instead of SRAM0. */

 Set DSP CPU to Run */

 Don't turn off the DSP while handling irqs */

 Set DSP CPU to Stop */

 Disable and clear VAD interrupt */

 Set GPIO1 pin back to be IRQ output for jack detect */

 {0, +20, +24, +30, +35, +40, +44, +50, +52} dB */

 OUTPUT Control */

 DAC Digital Volume */

 IN1/IN2 Control */

 ADC Digital Volume Control */

 Sidetone Control */

 ADC Boost Volume Control */

/**

 * set_dmic_clk - Set parameter of dmic.

 *

 * @w: DAPM widget.

 * @kcontrol: The kcontrol of this widget.

 * @event: Event id.

 *

 * Choose dmic clock between 1MHz and 3MHz.

 * It is better for clock to approximate 3MHz.

/**

 * rt5677_sel_asrc_clk_src - select ASRC clock source for a set of filters

 * @component: SoC audio component device.

 * @filter_mask: mask of filters.

 * @clk_src: clock source

 *

 * The ASRC function is for asynchronous MCLK and LRCK. Also, since RT5677 can

 * only support standard 32fs or 64fs i2s format, ASRC should be enabled to

 * support special i2s clock format such as Intel's 100fs(100 * sampling rate).

 * ASRC function will track i2s clock and generate a corresponding system clock

 * for codec. This function provides an API to select the clock source for a

 * set of filters specified by the mask. And the codec driver will turn on ASRC

 * for these filters if ASRC is selected as their clock source.

 ASRC 3 */

 ASRC 4 */

 ASRC 5 */

 ASRC 6 */

 ASRC 7 */

 ASRC 8 */

 Digital Mixer */

 Mux */

 DAC1 L/R Source */ 
 ADDA1 L/R Source */ 
DAC2 L/R Source*/ 
DAC3 L/R Source*/ 
DAC4 L/R Source*/ 
 In/OutBound Source Pass SRC */ 
 Stereo ADC Source 2 */ 
 DMIC Source */ 
 Stereo2 ADC Source */ 
 Stereo1 ADC Source 1 */ 
 Mono ADC Left Source 2 */ 
 Mono ADC Left Source 1 */ 
 Mono ADC Right Source 2 */ 
 Mono ADC Right Source 1 */ 
 Stereo4 ADC Source 2 */ 
 Stereo4 ADC Source 1 */ 
 InBound0/1 Source */ 
 InBound2/3 Source */ 
 InBound4/5 Source */ 
 InBound6 Source */ 
 InBound7 Source */ 
 InBound8 Source */ 
 InBound9 Source */ 
 VAD Source */ 
 Sidetone Source */ 
 DAC1/2 Source */ 
 DAC3 Source */ 
 PDM channel Source */ 
 TDM IF1/2 SLB ADC1 Data Selection */ 
 TDM IF1/2 SLB ADC2 Data Selection */ 
 TDM IF1/2 SLB ADC3 Data Selection */ 
 TDM IF1/2 SLB ADC4 Data Selection */ 
 Interface3/4 ADC Data Input */ 
 TDM IF1/2 ADC Data Selection */ 
 TDM IF1 ADC Data Selection */ 
 TDM IF2 ADC Data Selection */ 
/* TDM IF1/2 DAC Data Selection */ /* MX-3E[14:12][10:8][6:4][2:0]

					MX-3F[14:12][10:8][6:4][2:0]

					MX-43[14:12][10:8][6:4][2:0]

 ASRC */

 Input Side */

 micbias */

 Input Lines */

 Boost */

 ADCs */

 ADC Mux */

 ADC Mixer */

 ADC PGA */

 DSP */

 Digital Interface */

 Digital Interface Select */

 Audio Interface */

 Sidetone Mux */

 VAD Mux*/

 Tensilica DSP */

 Output Side */

 DAC mixer before sound effect */

 DAC Mux */

 DAC2 channel Mux */

 DAC3 channel Mux */

 DAC4 channel Mux */

 DAC Mixer */

 DACs */

 PDM */

 Output Lines */

	/* The IB01 Mux controls the source for InBound0 and InBound1.

	 * When the mux option "VAD ADC/DAC1 FS" is selected, "VAD ADC" goes to

	 * InBound0 and "DAC1 FS" goes to InBound1. "VAD ADC" is used for

	 * hotwording. "DAC1 FS" is not used currently.

	 *

	 * Creating a common widget node for "VAD ADC" + "DAC1 FS" and

	 * connecting the common widget to IB01 Mux causes the issue where

	 * there is an active path going from system playback -> "DAC1 FS" ->

	 * IB01 Mux -> DSP Buffer -> hotword stream. This wrong path confuses

	 * DAPM. Therefore "DAC1 FS" is ignored for now.

/**

 * rt5677_pll_calc - Calcualte PLL M/N/K code.

 * @freq_in: external clock provided to codec.

 * @freq_out: target clock which codec works on.

 * @pll_code: Pointer to structure with M, N, K, bypass K and bypass M flag.

 *

 * Calcualte M/N/K code and bypass K/M flag to configure PLL for codec.

 *

 * Returns 0 for success or negative error code.

 Re-enable the DSP if it was turned off at suspend */

 The delay is to wait for MCLK */

 Turn off the DSP before suspend */

/** Configures the gpio as

 *   0 - floating

 *   1 - pull down

 *   2 - pull up

use dmic1 clock by default*/

 Firmware sets GPIO1 pin to be GPIO1 after hotword is detected */

 Set GPIO1 pin back to be IRQ output for jack detect */

	/*

	 * Loop to handle interrupts until the last i2c read shows no pending

	 * irqs. The interrupt line is shared by multiple interrupt sources.

	 * After the regmap_read() below, a new interrupt source line may

	 * become high before the regmap_write() finishes, so there isn't a

	 * rising edge on the shared interrupt line for the new interrupt. Thus,

	 * the loop is needed to avoid missing irqs.

	 *

	 * A safeguard of 20 loops is used to avoid hanging in the irq handler

	 * if there is something wrong with the interrupt status update. The

	 * interrupt sources here are audio jack plug/unplug events which

	 * shouldn't happen at a high frequency for a long period of time.

	 * Empirically, more than 3 loops have never been seen.

 Read interrupt status */

				/* Clear the interrupt by flipping the polarity

				 * of the interrupt source line that fired

		/* Exit the loop only when we know for sure that GPIO1 pin

		 * was low at some point since irq_lock was acquired. Any event

		 * after that point creates a rising edge that triggers another

		 * call to rt5677_irq().

	/* This is needed to check and clear the interrupt status register

	 * at resume. If the headset is plugged/unplugged when the device is

	 * fully suspended, there won't be a rising edge at resume to trigger

	 * the interrupt. Without this, we miss the next unplug/plug event.

	/* Call all enabled jack detect irq handlers again. This is needed in

	 * addition to the above check for a corner case caused by jack gpio

	 * debounce. After codec irq is disabled at suspend, the delayed work

	 * scheduled by soc-jack may run and read wrong jack gpio values, since

	 * the regmap is in cache only mode. At resume, there is no irq because

	 * rt5677_irq has already ran and cleared the irq status at suspend.

	 * Without this explicit check, unplug the headset right after suspend

	 * starts, then after resume the headset is still shown as plugged in.

 Set the enable/disable bits for the jack detect IRQs.

	/*

	 * Select RC as the debounce clock so that GPIO works even when

	 * MCLK is gated which happens when there is no audio stream

	 * (SND_SOC_BIAS_OFF).

 Enable auto power on RC when GPIO states are changed */

 Select and enable jack detection sources per platform data */

 Set GPIO1 pin to be IRQ output */

 Ready to listen for interrupts */

	/* pow-ldo2 and reset are optional. The codec pins may be statically

	 * connected on the board without gpios. If the gpio device property

	 * isn't specified, devm_gpiod_get_optional returns NULL.

		/* Wait a while until I2C bus becomes available. The datasheet

		 * does not specify the exact we should wait but startup

		 * sequence mentiones at least a few milliseconds.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rl6231.c - RL6231 class device shared support

 *

 * Copyright 2014 Realtek Semiconductor Corp.

 *

 * Author: Oder Chiou <oder_chiou@realtek.com>

/**

 * rl6231_get_pre_div - Return the value of pre divider.

 *

 * @map: map for setting.

 * @reg: register.

 * @sft: shift.

 *

 * Return the value of pre divider from given register value.

 * Return negative error code for unexpected register value.

/**

 * rl6231_calc_dmic_clk - Calculate the frequency divider parameter of dmic.

 *

 * @rate: base clock rate.

 *

 * Choose divider parameter that gives the highest possible DMIC frequency in

 * 1MHz - 3MHz range.

 find divider that gives DMIC frequency below 1.536MHz */

/**

 * rl6231_pll_calc - Calcualte PLL M/N/K code.

 * @freq_in: external clock provided to codec.

 * @freq_out: target clock which codec works on.

 * @pll_code: Pointer to structure with M, N, K, m_bypass and k_bypass flag.

 *

 * Calcualte M/N/K code to configure PLL for codec.

 *

 * Returns 0 for success or negative error code.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8776.c  --  WM8776 ALSA SoC Audio driver

 *

 * Copyright 2009-12 Wolfson Microelectronics plc

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 *

 * TODO: Input ALC/limiter support

 codec private data */

 Finally, write out the values */

 Set word length */

 Only need to set MCLK/LRCLK ratio if we're master */

 Disable the global powerdown; DAPM does the rest */

	/* Latch the update bits; right channel only since we always

 CONFIG_SPI_MASTER */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8955.c  --  WM8955 ALSA SoC Audio driver

 *

 * Copyright 2009 Wolfson Microelectronics plc

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 codec private data */

 R2  - LOUT1 volume */

 R3  - ROUT1 volume */

 R5  - DAC Control */

 R7  - Audio Interface */

 R8  - Sample Rate */

 R10 - Left DAC volume */

 R11 - Right DAC volume */

 R12 - Bass control */

 R13 - Treble control */

 R23 - Additional control (1) */

 R24 - Additional control (2) */

 R25 - Power Management (1) */

 R26 - Power Management (2) */

 R27 - Additional Control (3) */

 R34 - Left out Mix (1) */

 R35 - Left out Mix (2) */

 R36 - Right out Mix (1) */

 R37 - Right Out Mix (2) */

 R38 - Mono out Mix (1) */

 R39 - Mono out Mix (2) */

 R40 - LOUT2 volume */

 R41 - ROUT2 volume */

 R42 - MONOOUT volume */

 R43 - Clocking / PLL */

 R44 - PLL Control 1 */

 R45 - PLL Control 2 */

 R46 - PLL Control 3 */

 R59 - PLL Control 4 */

/* The size in bits of the FLL divide multiplied by 10

	/* The oscilator should run at should be 90-100MHz, and

	 * there's a divide by 4 plus an optional divide by 2 in the

	 * output path to generate the system clock.  The clock table

 Now, calculate N.K */

 Calculate fractional part - scale up so we can round. */

 Move down to proper range now rounding is done */

/* Lookup table specifying SRATE (table 25 in datasheet); some of the

 * output frequencies have been rounded to the standard frequencies

 If we're not running a sample rate currently just pick one */

 Can we generate an exact output? */

 We should never get here with an unsupported sample rate */

		/* If we can't generate the right clock from MCLK then

		 * we should configure the PLL to supply us with an

		 * appropriate clock.

		/* Use the last divider configuration we saw for the

 Now start the PLL running */

	/* Always disable the clocks - if we're doing reconfiguration this

	 * avoids misclocking.

	/* If we're using deemphasis select the nearest available sample

	 * rate.

 Not a stereo pair so they line up with the DAPM switches */

 The names are chosen to make the control names nice */

 OUT3 not currently implemented */

	/* If the chip is clocked then disable the clocks and force a

	 * reconfiguration, otherwise DAPM will power up the

 frame inversion not valid for DSP modes */

 VMID resistance 2*50k */

 Default bias current */

 Enable VREF and VMID */

 Let VMID ramp */

 High resistance VROI to maintain outputs */

 Maintain VMID with 2*250k */

 Minimum bias current */

 Low resistance VROI to help discharge */

 Turn off VMID and VREF */

 Change some default settings - latch VU and enable ZC */

 Also enable adaptive bass boost by default */

 Set platform data values */

 Bias level configuration will have done an extra enable */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8983.c  --  WM8983 ALSA SoC Audio driver

 *

 * Copyright 2011 Wolfson Microelectronics plc

 *

 * Author: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>

 R1  - Power management 1 */

 R2  - Power management 2 */

 R3  - Power management 3 */

 R4  - Audio Interface */

 R5  - Companding control */

 R6  - Clock Gen control */

 R7  - Additional control */

 R8  - GPIO Control */

 R9  - Jack Detect Control 1 */

 R10 - DAC Control */

 R11 - Left DAC digital Vol */

 R12 - Right DAC digital vol */

 R13 - Jack Detect Control 2 */

 R14 - ADC Control */

 R15 - Left ADC Digital Vol */

 R16 - Right ADC Digital Vol */

 R18 - EQ1 - low shelf */

 R19 - EQ2 - peak 1 */

 R20 - EQ3 - peak 2 */

 R21 - EQ4 - peak 3 */

 R22 - EQ5 - high shelf */

 R24 - DAC Limiter 1 */

 R25 - DAC Limiter 2 */

 R27 - Notch Filter 1 */

 R28 - Notch Filter 2 */

 R29 - Notch Filter 3 */

 R30 - Notch Filter 4 */

 R32 - ALC control 1 */

 R33 - ALC control 2 */

 R34 - ALC control 3 */

 R35 - Noise Gate */

 R36 - PLL N */

 R37 - PLL K 1 */

 R38 - PLL K 2 */

 R39 - PLL K 3 */

 R41 - 3D control */

 R42 - OUT4 to ADC */

 R43 - Beep control */

 R44 - Input ctrl */

 R45 - Left INP PGA gain ctrl */

 R46 - Right INP PGA gain ctrl */

 R47 - Left ADC BOOST ctrl */

 R48 - Right ADC BOOST ctrl */

 R49 - Output ctrl */

 R50 - Left mixer ctrl */

 R51 - Right mixer ctrl */

 R52 - LOUT1 (HP) volume ctrl */

 R53 - ROUT1 (HP) volume ctrl */

 R54 - LOUT2 (SPK) volume ctrl */

 R55 - ROUT2 (SPK) volume ctrl */

 R56 - OUT3 mixer ctrl */

 R57 - OUT4 (MONO) mix ctrl */

 R61 - BIAS CTRL */

 vol/gain update regs */

 disable the DACs and ADCs */

 set the desired eqmode */

 restore DAC/ADC configuration */

 FIXME: We don't currently support DSP A/B modes */

	/*

	 * match to the nearest possible sample rate and rely

	 * on the array index to configure the SR register

 select the appropriate bclk divider */

 disable the PLL */

 disable the PLL before re-programming it */

 set PLLN and PRESCALE */

 set PLLK */

 enable the PLL */

 VMID at 100k */

 enable anti-pop features */

 enable thermal shutdown */

 enable BIASEN */

 VMID at 100k */

 disable anti-pop features */

 VMID at 500k */

 disable thermal shutdown */

 disable VMIDSEL and BIASEN */

 wait for VMID to discharge */

 set the vol/gain update bits */

 mute all outputs and set PGAs to minimum gain */

 enable soft mute */

 enable BIASCUT */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for the 1250-EV1 audio I/O module

 *

 * Copyright 2011 Wolfson Microelectronics plc

 SPDX-License-Identifier: GPL-2.0



 rt700-sdw.c -- rt700 ALSA SoC audio driver



 Copyright(c) 2019 Realtek Semiconductor Corp.





 i2c read */

 HD-A read */

 BRA */

 i2c debug */

 decoded HD-A */

 index registers */

 for R channel */

 index registers */

 for R channel */

 Update the status */

	/*

	 * Perform initialization only if slave status is present and

	 * hw_init flag is false

 perform I/O transfers required for Slave initialization */

 first we need to allocate memory for set bits in port lists */

 BITMAP: 00010100 */

 BITMAP:  00001010 */

 do this again for sink now */

 set the timeout values */

 wake-up event */

/*

 * slave_ops: callbacks for get_clock_stop_mode, clock_stop and

 * port_prep are not defined for now

 Regmap Initialization */

	/*

	 * prevent new interrupts from being handled after the

	 * deferred work completes and before the parent disables

	 * interrupts on the link

 log but don't prevent suspend from happening */

/* SPDX-License-Identifier: GPL-2.0

 *

 * Clock Tree for the Texas Instruments TLV320AIC32x4

 *

 * Copyright 2019 Annaliese McDermond

 *

 * Author: Annaliese McDermond <nh6z@nh6z.net>

/*

 * struct clk_aic32x4_pll_muldiv - Multiplier/divider settings

 * @p:		Divider

 * @r:		first multiplier

 * @j:		integer part of second multiplier

 * @d:		decimal part of second multiplier

	Change to use regmap_bulk_read? */

	Change to use regmap_bulk_write for some if not all? */

	/*

	 * We scale j by 10000 to account for the decimal part of P and divide

	 * it back out later.

	/*

	 * We scale this figure by 10000 so that we can get the decimal part

	 * of the multiplier.	This is because we can't do floating point

	 * math in the kernel.

	/*

	 * J can't be over 64, so R can scale this.

	 * R can't be greater than 4.

	/*

	 * J can't be < 1.

 Figure out the integer part, J, and the fractional part, D. */

 10ms is the delay to wait before the clocks are stable */

	/*

	 * These lines are here to preserve the current functionality of

	 * the driver with regard to the DT.  These should eventually be set

	 * by DT nodes so that the connections can be set up in configuration

	 * rather than code.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for ADAU1361/ADAU1461/ADAU1761/ADAU1961 codec

 *

 * Copyright 2014 Analog Devices Inc.

 *  Author: Lars-Peter Clausen <lars@metafoo.de>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ALSA SoC TWL6040 codec driver

 *

 * Author:	 Misael Lopez Cruz <x0052729@ti.com>

 codec private data */

 set of rates for each pll: low-power and high-performance */

 DL1 path */

 Change chip defaults */

 No imput selected for microphone amplifiers */

	/*

	 * We need to lower the default gain values, so the ramp code

	 * can work correctly for the first playback.

	 * This reduces the pop noise heard at the first playback.

 set headset dac and driver power mode */

	/*

	 * Workaround for Headset DC offset caused pop noise:

	 * Both HS DAC need to be turned on (before the HS driver) and off at

	 * the same time.

 Earphone doesn't support low power mode */

 Sync status */

 audio interrupt handler */

 Do not allow changes while Input/FF efect is running */

/*

 * MICATT volume control:

 * from -6 to 0 dB in 6 dB steps

/*

 * MICGAIN volume control:

 * from 6 to 30 dB in 6 dB steps

/*

 * AFMGAIN volume control:

 * from -18 to 24 dB in 6 dB steps

/*

 * HSGAIN volume control:

 * from -30 to 0 dB in 2 dB steps

/*

 * HFGAIN volume control:

 * from -52 to 6 dB in 2 dB steps

/*

 * EPGAIN volume control:

 * from -24 to 6 dB in 2 dB steps

 Left analog microphone selection */

 Right analog microphone selection */

 Headset DAC playback switches */

 Handsfree DAC playback switches */

 Vibra playback switches */

 Headset power mode */

 -1dB */

 HSDACL in LP mode */

 -8dB */

 HSDACL in HP mode */

 -1dB */

 0dB */

 For ES under ES_1.3 HS step is 2 mV */

 For ES_1.3 HS step is 1 mV */

 Capture gains */

 AFM gains */

 Playback gains */

 Left HS PDM data routed to Right HSDAC */

 Left HF PDM data routed to Right HFDAC */

 Inputs */

 Outputs */

 Analog input muxes for the capture amplifiers */

 Analog capture PGAs */

 Auxiliary FM PGAs */

 ADCs */

 Microphone bias */

 DACs */

 Virtual DAC for vibra path (DL4 channel) */

 Analog playback Muxes */

 Analog playback drivers */

 Analog playback PGAs */

 Stream -> DAC mapping */

 ADC -> Stream mapping */

 Capture path */

 AFM path */

 Earphone playback path */

 Vibrator paths */

 Select low power PLL in standby */

 Set external boost GPO */

 These rates are not supported when HPPLL is in use */

 Power down drivers and DACs */

 Power down drivers and DACs */

 SPDX-License-Identifier: GPL-2.0-or-later

 /*

 * Audio Codec driver supporting:

 *  AD1835A, AD1836, AD1837A, AD1838A, AD1839A

 *

 * Copyright 2009-2011 Analog Devices Inc.

 codec private data */

/*

 * AD1836 volume/mute/de-emphasis etc. controls

 ADC high-pass filter */

 DAC de-emphasis */

/*

 * DAI ops entries

	/* at present, we support adc aux mode to interface with

	 * blackfin sport tdm mode

 ALCLK,ABCLK are both output, AD1836 can only be provider */

 bit size */

 reset clock control mode */

 restore clock control mode */

 default setting for ad1836 */

 de-emphasis: 48kHz, power-on dac */

 unmute dac channels */

 high-pass filter enable, power-on adc */

 unmute adc channles, adc aux mode */

 volume */

 left/right diff:PGA/MUX */

 power down chip */

 reset clock control mode */

/*

 * Cirrus Logic CS42448/CS42888 Audio CODEC DAI I2C driver

 *

 * Copyright (C) 2014 Freescale Semiconductor, Inc.

 *

 * Author: Nicolin Chen <Guangyu.Chen@freescale.com>

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2. This program is licensed "as is" without any warranty of any

 * kind, whether express or implied.

 SPDX-License-Identifier: GPL-2.0

/*

 * ALSA SoC Texas Instruments TAS6424 Quad-Channel Audio Amplifier

 *

 * Copyright (C) 2016-2017 Texas Instruments Incorporated - https://www.ti.com/

 *	Author: Andreas Dannenberg <dannenberg@ti.com>

 *	Andrew F. Davis <afd@ti.com>

 Define how often to check (and clear) the fault status register (in ms) */

 Digital power supply. Connect to 3.3-V supply. */

 Supply used for higher voltage analog circuits. */

 Class-D amp output FETs supply. */

/*

 * DAC digital volumes. From -103.5 to 24 dB in 0.5 dB steps. Note that

 * setting the gain below -100 dB (register value <0x7) is effectively a MUTE

 * as per device datasheet.

 Observe codec shutdown-to-active time */

 Turn on TAS6424 periodic fault checking/handling */

 Disable TAS6424 periodic fault checking/handling */

 clock masters */

 signal polarity */

 interface format */

		/*

		 * We can use the fact that the TAS6424 does not care about the

		 * LRCLK duty cycle during TDM to receive DSP_B formatted data

		 * in LEFTJ mode (no delaying of the 1st data bit).

 nothing needed to disable TDM mode */

	/*

	 * Determine the first slot and last slot that is being requested so

	 * we'll be able to more easily enforce certain constraints as the

	 * TAS6424's TDM interface is not fully configurable.

		/*

		 * channels are muted via the mute pin.  Don't also mute

		 * them via the registers so that subsequent register

		 * access is not necessary to un-mute the channels

	/* any time we come out of HIZ, the output channels automatically run DC

	 * load diagnostics if autodiagnotics are enabled. wait here until this

	 * completes.

	/*

	 * Only flag errors once for a given occurrence. This is needed as

	 * the TAS6424 will take time clearing the fault condition internally

	 * during which we don't want to bombard the system with the same

	 * error message over and over.

 Store current fault1 value so we can detect any changes next time */

	/*

	 * Ignore any clock faults as there is no clean way to check for them.

	 * We would need to start checking for those faults *after* the SAIF

	 * stream has been setup, and stop checking *before* the stream is

	 * stopped to avoid any false-positives. However there are no

	 * appropriate hooks to monitor these events.

 Store current fault1 value so we can detect any changes next time */

 Store current fault2 value so we can detect any changes next time */

 Store current warn value so we can detect any changes next time */

 Clear any warnings by toggling the CLEAR_FAULT control bit */

 Schedule the next fault check at the specified interval */

	/*

	 * Get control of the standby pin and set it LOW to take the codec

	 * out of the stand-by mode.

	 * Note: The actual pin polarity is taken care of in the GPIO lib

	 * according the polarity specified in the DTS.

	/*

	 * Get control of the mute pin and set it HIGH in order to start with

	 * all the output muted.

	 * Note: The actual pin polarity is taken care of in the GPIO lib

	 * according the polarity specified in the DTS.

 Reset device to establish well-defined startup state */

 put the codec in stand-by */

 SPDX-License-Identifier: GPL-2.0-only



 rt1316-sdw.c -- rt1316 SDCA ALSA SoC amplifier audio driver



 Copyright(c) 2021 Realtek Semiconductor Corp.





 for IV sense */

 first we need to allocate memory for set bits in port lists */

 BITMAP: 00000100 */

 BITMAP:  00000010 */

 do this again for sink now */

 set the timeout values */

		/*

		 * PM runtime is only enabled when a Slave reports as Attached

 set autosuspend parameters */

 update count of parent 'active' children */

 make sure the device does not suspend immediately */

 sw reset */

 initial settings - blind write */

 Mark Slave initialization complete */

 Update the status */

	/*

	 * Perform initialization only if slave status is present and

	 * hw_init flag is false

 perform I/O transfers required for Slave initialization */

 I2S Data Channel Selection */

 XU24 Bypass Control */

 Left/Right IV tag */

 IV mixer Control */

 Audio Interface */

 Digital Interface */

 Output Lines */

 Use tx_mask or rx_mask to configure stream tag and set dma_data */

 SoundWire specific configuration */

 port 1 for playback */

/*

 * slave_ops: callbacks for get_clock_stop_mode, clock_stop and

 * port_prep are not defined for now

	/*

	 * Mark hw_init to false

	 * HW init will be performed when device reports present

 Regmap Initialization */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rt5660.c  --  RT5660 ALSA SoC audio codec driver

 *

 * Copyright 2016 Realtek Semiconductor Corp.

 * Author: Oder Chiou <oder_chiou@realtek.com>

 Speaker Output Volume */

 OUTPUT Control */

 DAC Digital Volume */

 IN1/IN2/IN3 Control */

 ADC Digital Volume Control */

 ADC Boost Volume Control */

/**

 * rt5660_set_dmic_clk - Set parameter of dmic.

 *

 * @w: DAPM widget.

 * @kcontrol: The kcontrol of this widget.

 * @event: Event id.

 *

 Digital Mixer */

 Analog Input Mixer */

 Interface data select */

 MICBIAS */

 Input Side */

 Input Lines */

 Boost */

 REC Mixer */

 ADCs */

 ADC Mixer */

 ADC */

 Digital Interface */

 Audio Interface */

 Output Side */

 DAC mixer before sound effect  */

 DAC Mixer */

 DACs */

 OUT Mixer */

 Output Volume */

 HPO/LOUT/Mono Mixer */

 Output Lines */

 Check if MCLK provided */

 SPDX-License-Identifier: GPL-2.0



 Driver for the MAX9860 Mono Audio Voice Codec



 https:


 The driver does not support sidetone since the DVST register field is

 backwards with the mute near the maximum level instead of the minimum.



 Author: Peter Rosin <peda@axentia.s>

         Copyright 2016 Axentia Technologies

	/*

	 * Check if Integer Clock Mode is possible, but avoid it in slave mode

	 * since we then do not know if lrclk is derived from pclk and the

	 * datasheet mentions that the frequencies have to match exactly in

	 * order for this to work.

				/*

				 * Integer Clock Mode not possible. Leave

				 * sysclk at zero and fall through to the

				 * code below for PLL mode.

	/*

	 * Largest possible n:

	 *    65536 * 96 * 48kHz / 10MHz -> 30199

	 * Smallest possible n:

	 *    65536 * 96 *  8kHz / 20MHz -> 2517

	 * Both fit nicely in the available 15 bits, no need to apply any mask.

 PLL mode */

 trigger rapid pll lock mode */

	/*

	 * mclk has to be in the 10MHz to 60MHz range.

	 * psclk is used to scale mclk into pclk so that

	 * pclk is in the 10MHz to 20MHz range.

 SPDX-License-Identifier: GPL-2.0



 cs35l36.c -- CS35L36 ALSA SoC audio driver



 Copyright 2018 Cirrus Logic, Inc.



 Author: James Schulman <james.schulman@cirrus.com>

/*

 * Some fields take zero as a valid value so use a high bit flag that won't

 * get written to the device to mark those.

 1 uH */

 1.2 uH */

	/*

	 * Rev B0 has 2 versions

	 * L36 is 10V

	 * L37 is 12V

	 * If L36 we need to clamp some values for safety

	 * after probe has setup dt values. We want to make

	 * sure we dont miss any values set in probe

	/*

	 * RevA and B require the disabling of

	 * SYNC_GLOBAL_OVR when GLOBAL_EN = 0.

	 * Just turn it off from default

 ack the irq by reading all status registers */

 Check to see if unmasked bits are active */

	/*

	 * The following interrupts require a

	 * protection release cycle to get the

	 * speaker out of Safe-Mode.

 VPBR Config */

	/*

	 * Magic code for internal PAC

 Errata Writes */

 PAC Config */

 returning NULL can be an option if in stereo mode */

 initialize amplifier */

 Set interrupt masks for critical errors */

 Reset interrupt masks for device removal */

 SPDX-License-Identifier: GPL-2.0



 cs35l41-tables.c -- CS35L41 ALSA SoC audio driver



 Copyright 2017-2021 Cirrus Logic, Inc.



 Author: David Rhodes <david.rhodes@cirrus.com>

test regs*/

 addr         shift   size */

TRIM_OSC_FREQ_TRIM*/

TRIM_OSC_TRIM_DONE*/

TST_DIGREG_VREF_TRIM*/

TST_REF_TRIM*/

TST_REF_TEMPCO_TRIM*/

PLL_LDOA_TST_VREF_TRIM*/

BST_ATEST_CM_VOFF*/

BST_ATRIM_IADC_OFFSET*/

BST_ATRIM_IADC_GAIN1*/

BST_ATRIM_IPKCOMP_OFFSET1*/

BST_ATRIM_IPKCOMP_GAIN1*/

BST_ATRIM_IADC_OFFSET2*/

BST_ATRIM_IADC_GAIN2*/

BST_ATRIM_IPKCOMP_OFFSET2*/

BST_ATRIM_IPKCOMP_GAIN2*/

BST_ATRIM_IADC_OFFSET3*/

BST_ATRIM_IADC_GAIN3*/

BST_ATRIM_IPKCOMP_OFFSET3*/

BST_ATRIM_IPKCOMP_GAIN3*/

BST_ATRIM_IADC_OFFSET4*/

BST_ATRIM_IADC_GAIN4*/

BST_ATRIM_IPKCOMP_OFFSET4*/

BST_ATRIM_IPKCOMP_GAIN4*/

VMON_GAIN_OTP_VAL*/

VMON_OFFSET_OTP_VAL*/

IMON_GAIN_OTP_VAL*/

IMON_OFFSET_OTP_VAL*/

VMON_CM_GAIN_OTP_VAL*/

VMON_CM_GAIN_SIGN_OTP_VAL*/

IMON_CAL_TEMPCO_OTP_VAL*/

IMON_CAL_TEMPCO_SIGN_OTP*/

IMON_CAL_TEMPCO2_OTP_VAL*/

IMON_CAL_TEMPCO2_DN_UPB_OTP_VAL*/

IMON_CAL_TEMPCO_TBASE_OTP_VAL*/

TEMP_GAIN_OTP_VAL*/

TEMP_OFFSET_OTP_VAL*/

VP_SARADC_OFFSET*/

VP_GAIN_INDEX*/

VBST_SARADC_OFFSET*/

VBST_GAIN_INDEX*/

ANA_SELINVREF*/

GAIN_ERR_COEFF_0*/

GAIN_ERR_COEFF_1*/

GAIN_ERR_COEFF_2*/

GAIN_ERR_COEFF_3*/

GAIN_ERR_COEFF_4*/

GAIN_ERR_COEFF_5*/

GAIN_ERR_COEFF_6*/

GAIN_ERR_COEFF_7*/

GAIN_ERR_COEFF_8*/

GAIN_ERR_COEFF_9*/

GAIN_ERR_COEFF_10*/

GAIN_ERR_COEFF_11*/

GAIN_ERR_COEFF_12*/

GAIN_ERR_COEFF_13*/

GAIN_ERR_COEFF_14*/

GAIN_ERR_COEFF_15*/

GAIN_ERR_COEFF_16*/

GAIN_ERR_COEFF_17*/

GAIN_ERR_COEFF_18*/

GAIN_ERR_COEFF_19*/

GAIN_ERR_COEFF_20*/

VOFF_GAIN_0*/

VOFF_GAIN_1*/

VOFF_GAIN_2*/

VOFF_GAIN_3*/

VOFF_GAIN_4*/

VOFF_GAIN_5*/

VOFF_GAIN_6*/

VOFF_GAIN_7*/

VOFF_GAIN_8*/

VOFF_GAIN_9*/

VOFF_GAIN_10*/

VOFF_GAIN_11*/

VOFF_GAIN_12*/

VOFF_GAIN_13*/

VOFF_GAIN_14*/

VOFF_GAIN_15*/

VOFF_GAIN_16*/

VOFF_GAIN_17*/

VOFF_GAIN_18*/

VOFF_GAIN_19*/

VOFF_GAIN_20*/

VOFF_INT1*/

DS_SPK_INT1_CAP_TRIM*/

DS_SPK_INT2_CAP_TRIM*/

DS_SPK_LPF_CAP_TRIM*/

DS_SPK_QUAN_CAP_TRIM*/

FORCE_CAL*/

CAL_OVERRIDE*/

MODIX*/

VIMON_DLY_NOT_COMB*/

VIMON_DLY*/

extra bit*/

X_COORDINATE*/

Y_COORDINATE*/

WAFER_ID*/

DVS*/

LOT_NUMBER*/

 addr         shift   size */

TRIM_OSC_FREQ_TRIM*/

TRIM_OSC_TRIM_DONE*/

TST_DIGREG_VREF_TRIM*/

TST_REF_TRIM*/

TST_REF_TEMPCO_TRIM*/

PLL_LDOA_TST_VREF_TRIM*/

BST_ATEST_CM_VOFF*/

BST_ATRIM_IADC_OFFSET*/

BST_ATRIM_IADC_GAIN1*/

BST_ATRIM_IPKCOMP_OFFSET1*/

BST_ATRIM_IPKCOMP_GAIN1*/

BST_ATRIM_IADC_OFFSET2*/

BST_ATRIM_IADC_GAIN2*/

BST_ATRIM_IPKCOMP_OFFSET2*/

BST_ATRIM_IPKCOMP_GAIN2*/

BST_ATRIM_IADC_OFFSET3*/

BST_ATRIM_IADC_GAIN3*/

BST_ATRIM_IPKCOMP_OFFSET3*/

BST_ATRIM_IPKCOMP_GAIN3*/

BST_ATRIM_IADC_OFFSET4*/

BST_ATRIM_IADC_GAIN4*/

BST_ATRIM_IPKCOMP_OFFSET4*/

BST_ATRIM_IPKCOMP_GAIN4*/

VMON_GAIN_OTP_VAL*/

VMON_OFFSET_OTP_VAL*/

IMON_GAIN_OTP_VAL*/

IMON_OFFSET_OTP_VAL*/

VMON_CM_GAIN_OTP_VAL*/

VMON_CM_GAIN_SIGN_OTP_VAL*/

IMON_CAL_TEMPCO_OTP_VAL*/

IMON_CAL_TEMPCO_SIGN_OTP*/

IMON_CAL_TEMPCO2_OTP_VAL*/

IMON_CAL_TEMPCO2_DN_UPB_OTP_VAL*/

IMON_CAL_TEMPCO_TBASE_OTP_VAL*/

TEMP_GAIN_OTP_VAL*/

TEMP_OFFSET_OTP_VAL*/

VP_SARADC_OFFSET*/

VP_GAIN_INDEX*/

VBST_SARADC_OFFSET*/

VBST_GAIN_INDEX*/

ANA_SELINVREF*/

GAIN_ERR_COEFF_0*/

GAIN_ERR_COEFF_1*/

GAIN_ERR_COEFF_2*/

GAIN_ERR_COEFF_3*/

GAIN_ERR_COEFF_4*/

GAIN_ERR_COEFF_5*/

GAIN_ERR_COEFF_6*/

GAIN_ERR_COEFF_7*/

GAIN_ERR_COEFF_8*/

GAIN_ERR_COEFF_9*/

GAIN_ERR_COEFF_10*/

GAIN_ERR_COEFF_11*/

GAIN_ERR_COEFF_12*/

GAIN_ERR_COEFF_13*/

GAIN_ERR_COEFF_14*/

GAIN_ERR_COEFF_15*/

GAIN_ERR_COEFF_16*/

GAIN_ERR_COEFF_17*/

GAIN_ERR_COEFF_18*/

GAIN_ERR_COEFF_19*/

GAIN_ERR_COEFF_20*/

VOFF_GAIN_0*/

VOFF_GAIN_1*/

VOFF_GAIN_2*/

VOFF_GAIN_3*/

VOFF_GAIN_4*/

VOFF_GAIN_5*/

VOFF_GAIN_6*/

VOFF_GAIN_7*/

VOFF_GAIN_8*/

VOFF_GAIN_9*/

VOFF_GAIN_10*/

VOFF_GAIN_11*/

VOFF_GAIN_12*/

VOFF_GAIN_13*/

VOFF_GAIN_14*/

VOFF_GAIN_15*/

VOFF_GAIN_16*/

VOFF_GAIN_17*/

VOFF_GAIN_18*/

VOFF_GAIN_19*/

VOFF_GAIN_20*/

VOFF_INT1*/

DS_SPK_INT1_CAP_TRIM*/

DS_SPK_INT2_CAP_TRIM*/

DS_SPK_LPF_CAP_TRIM*/

DS_SPK_QUAN_CAP_TRIM*/

FORCE_CAL*/

CAL_OVERRIDE*/

MODIX*/

VIMON_DLY_NOT_COMB*/

VIMON_DLY*/

VMON_POL*/

X_COORDINATE*/

Y_COORDINATE*/

WAFER_ID*/

DVS*/

LOT_NUMBER*/

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8994.c  --  WM8994 ALSA SoC Audio driver

 *

 * Copyright 2009-12 Wolfson Microelectronics plc

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 VU bitfields for ADC2, DAC2 not available on WM1811 */

 Bring up the AIF clocks first */

	/* Then switch CLK_SYS over to the higher of them; a change

	 * can only happen as a result of a clocking change which can

	 * only be made outside of DAPM so we can safely redo the

	 * clocking.

 If they're equal it doesn't matter which is used */

 Check what we're currently using for CLK_SYS */

 Can't enable both ADC and DAC paths simultaneously */

 Save any enables; the configuration should clear them. */

 Icky as hell but saves code duplication */

	/* Find the version of the currently selected configuration

	/* The EQ will be disabled while reconfiguring it, remember the

	 * current configuration.

 Icky as hell but saves code duplication */

 Controls not available on WM1811 */

 We run all mode setting through a function to enforce audio mode */

 Always use audio mode to detect while the system is active */

 If we're using jack detection go into audio mode */

 Go into appropriate detection only mode */

		/*

		 * JACKDET won't run until we start the clock and it

		 * only reports deltas, make sure we notify the state

		 * up the stack on startup.  Use a *very* generous

		 * timeout for paranoia, there's no urgency and we

		 * don't want false reports.

 Startup bias, VMID ramp & buffer */

 Main bias enable, VMID=2x40k */

 Startup bias, slow VMID ramp & buffer */

 Main bias enable, VMID=2x40k */

 Start discharging VMID */

 Active discharge */

 Switch off startup biases */

 GCC flow analysis can't track enable */

 We also need the same AIF source for L/R and only one path */

 Set the source up */

 Don't enable timeslot 2 if not in use */

 We may also have postponed startup of DSP, handle that. */

 Debugging; dump chip status after DAPM transitions */

 Note that these two control shouldn't be simultaneously switched to AIF3 */

/* Power is done with the muxes since the ADC power also controls the

 * downsampling chain, the chip will automatically manage the analogue

 * specific portions.

 AIF1 outputs */

 Pin level routing for AIF3 */

 DAC1 inputs */

 DAC2/AIF2 outputs  */

 AIF3 output */

 Loopback */

 Sidetone */

 Output stages */

/* The size in bits of the FLL divide multiplied by 10

 Scale the input frequency down to <= 13.5MHz */

 Scale the output to give 90MHz<=Fvco<=100MHz */

 Now, calculate N.K */

 Calculate fractional part - scale up so we can round. */

 Move down to proper range now rounding is done */

 Allow no source specification when stopping */

 Are we changing anything? */

	/* If we're stopping the FLL redo the old config - no

	 * registers will actually be written but we avoid GCC flow

	 * analysis bugs spewing warnings.

 Make sure that we're not providing SYSCLK right now */

 We always need to disable the FLL while reconfiguring */

 Disable MCLK if needed before we possibly change to new clock parent */

 Clear any pending completion from a previous failure */

 Enable (with fractional mode if required) */

 Enable VMID if we need it */

	/*

	 * If SYSCLK will be less than 50kHz adjust AIFnCLK dividers

	 * for detection.

 AIF3 shares clocking with AIF1/2 */

 TODO: Set GPIO AF */

		/* Special case - a division (times 10) is given and

		 * no effect on main clocking.

	/*

	 * If SYSCLK will be less than 50kHz adjust AIFnCLK dividers

	 * for detection.

 MICBIAS into regulating mode */

 Optimise performance for rev A */

 Discharge LINEOUT1 & 2 */

 MICBIAS into bypass mode on newer devices */

 Do the sync with the old mode to allow it to clean up */

 frame inversion not valid for DSP modes */

	/* The AIF2 format configuration needs to be mirrored to AIF3

 Try to find an appropriate sample rate; look for an exact match. */

 AIFCLK/fs ratio; look for a close match in either direction */

	/* We may not get quite the right frequency if using

	 * approximate clocks so look for the closest match that is

	 * higher than the target (we need to ensure that there enough

	 * BCLKs to clock out the samples).

 BCLK table is sorted */

 Disable the pulls on the AIF if we're using it to save power. */

	/* We need an array of texts for the enum API but the number

	 * of texts is likely to be less than the number of

	 * configurations due to the sample rate dependency of the

 Expand the array... */

 ...store the new entry... */

 ...and remember the new version. */

 We need an array of texts for the enum API */

/**

 * wm8994_mic_detect - Enable microphone detection via the WM8994 IRQ

 *

 * @component:   WM8994 component

 * @jack:    jack to report detection events on

 * @micbias: microphone bias to detect on

 *

 * Enable microphone detection via IRQ on the WM8994.  If GPIOs are

 * being used to bring out signals to the processor then only platform

 * data configuration is needed for WM8994 and processor GPIOs should

 * be configured using snd_soc_jack_add_gpios() instead.

 *

 * Configuration of detection levels is available via the micbias1_lvl

 * and micbias2_lvl platform data members.

 Store the configuration */

 If either of the jacks is set up then enable detection */

 enable MICDET and MICSHRT deboune */

 Should be called with accdet_lock held */

 Either nothing present or just starting detection */

 If nothing present then clear our statuses */

	/* If the measurement is showing a high impedence we've got a

	 * microphone.

 If we have jackdet that will detect removal */

 Deferred mic detection to allow for extra settling time */

 If required for an external cap force MICBIAS on */

 Use a user-supplied callback if we have one */

		/*

		 * Start off measument of microphone impedence to find out

		 * what's actually there.

 Disable debounce while inserted */

 Enable debounce while removed */

 Turn off MICBIAS if it was on for an external cap */

	/* Since we only report deltas force an update, ensures we

/**

 * wm8958_mic_detect - Enable microphone detection via the WM8958 IRQ

 *

 * @component:   WM8958 component

 * @jack:    jack to report detection events on

 * @det_cb: detection callback

 * @det_cb_data: data for detection callback

 * @id_cb: mic id callback

 * @id_cb_data: data for mic id callback

 *

 * Enable microphone detection functionality for the WM8958.  By

 * default simple detection which supports the detection of up to 6

 * buttons plus video and microphone functionality is supported.

 *

 * The WM8958 has an advanced jack detection facility which is able to

 * support complex accessory detection, especially when used in

 * conjunction with external circuitry.  In order to provide maximum

 * flexiblity a callback is provided which allows a completely custom

 * detection algorithm.

 Detect microphones and short circuits by default */

		/*

		 * If we can use jack detection start off with that,

		 * otherwise jump straight to microphone detection.

 Disable debounce for the initial detect */

	/*

	 * Jack detection may have detected a removal simulataneously

	 * with an update of the MICDET status; if so it will have

	 * stopped detection and we can ignore this interrupt.

	/* We may occasionally read a detection without an impedence

	 * range being provided - if that happens loop again.

 Avoid a transient report when the accessory is being removed */

 By default use idle_bias_off, will override for WM8994 */

 Set revision-specific configuration */

 Single ended line outputs should have VMID on. */

 Make sure we can read from the GPIOs if they're inputs */

	/* Remember if AIFnLRCLK is configured as a GPIO.  This should be

	 * configured on init - if a system wants to do this dynamically

	 * at runtime we can deal with that then.

 Latch volume update bits */

 Set the low bit of the 3D stereo depth so TLV matches */

	/* Unconditionally enable AIF1 ADC TDM mode on chips which can

	 * use this; it only affects behaviour on idle TDM clock

 Put MICBIAS into bypass mode by default on newer devices */

 Drop down to power saving mode when system is suspended */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * max9850.c  --  codec driver for max9850

 *

 * Copyright (C) 2011 taskit GmbH

 *

 * Author: Christian Glindkamp <christian.glindkamp@taskit.de>

 *

 * Initial development of this code was funded by

 * MICRONIC Computer Systeme GmbH, https://www.mcsberlin.de/

/* these registers are not used at the moment but provided for the sake of

 output mixer */

 outputs */

 inputs */

 supplies */

 lrclk_div = 2^22 * rate / iclk with iclk = mclk / sf */

 calculate mclk -> iclk divider */

 set master/slave audio interface */

 interface format */

 clock inversion */

 set da */

 enable zero-detect */

 enable slew-rate control */

 set slew-rate 125ms */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This is a simple driver for the GTM601 Voice PCM interface

 *

 * Copyright (C) 2015 Goldelico GmbH

 *

 * Author: Marek Belisko <marek@goldelico.com>

 *

 * Based on wm8727.c driver

 SPDX-License-Identifier: GPL-2.0-only

 cs4234.c -- ALSA SoC CS4234 driver



 Copyright (C) 2020 Cirrus Logic, Inc. and

                    Cirrus Logic International Semiconductor Ltd.



 -89.92dB to +6.02dB with step of 0.38dB */

 are all the ADCs powerdown

 are all the DACs powerdown

 Playback */

 Capture */

 TDM mode in datasheet */

 Scale MCLK rate by 64 to avoid overflow in the ratnum calculation */

 Single Speed Mode */

 Double Speed Mode */

		/*

		 * Playback only supports 24-bit samples in these modes.

		 * Note: SNDRV_PCM_HW_PARAM_SAMPLE_BITS constrains the physical

		 * width, which we don't care about, so constrain the format.

	/*

	 * MCLK/rate may be a valid ratio but out-of-spec (e.g. 24576000/64000)

	 * so this rule limits the range of sample rate for given MCLK.

 Either 4 or 5 consecutive bits, DAC5 is optional */

 Clear VQ Ramp Bit in cache for the next PowerUp */

 Make sure hardware reset done 2 ms + (3000/MCLK) */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2021, Linaro Limited

	/**

	 * Port map index starts with 0, however the data port for this codec

	 * are from index 1

 SPDX-License-Identifier: GPL-2.0-only

/*

 * alc5623.c  --  alc562[123] ALSA Soc Audio driver

 *

 * Copyright 2008 Realtek Microelectronics

 * Author: flove <flove@realtek.com> Ethan <eku@marvell.com>

 *

 * Copyright 2010 Arnaud Patard <arnaud.patard@rtp-net.org>

 *

 * Based on WM8753.c

 codec private data */

 to power-on/off class-d amp generators/speaker */

 need to write to 'index-46h' register :        */

 so write index num (here 0x46) to reg 0x6a     */

 and then 0xffff/0 to reg 0x6c                  */

/*

 * ALC5623 Controls

/*

 * DAPM Controls

 Left Record Mixer */

 Right Record Mixer */

 auxout output mux */

 speaker output mux */

 headphone left output mux */

 headphone right output mux */

 speaker output N select */

 Muxes */

 output mixers */

 input mixers */

 virtual mixer - mixes left & right channels */

 HP mixer */

 speaker mixer */

 mono mixer */

 Left record mixer */

Right record mixer */

 headphone left mux */

 headphone right mux */

 speaker out mux */

 Mono/Aux Out mux */

 output pga */

 input pga */

 left ADC */

 right ADC */

 PLL divisors */

 Note : pll code from original alc5623 driver. Not sure of how good it is */

 useful only for master mode */

 Disable PLL power */

 pll is not used in slave mode */

 PLL source from MCLK */

 PLL source from Bitclk */

 codec hifi mclk (after PLL) clock divider coefficients */

 values inspired from column BCLK=32Fs of Appendix A table */

/*

 * Clock after PLL and dividers

 set audio interface clocking */

 interface format */

 clock inversion */

 bit size */

 set iface & srate */

 avoid writing '1' into 5622 reserved bits */

 disable HP Depop2 */

 everything off except vref/vmid, */

 everything off, dac mute, inactive */

 Sync reg_cache with the hardware */

 set up audio path interconnects */

/*

 * ALC5623 2 wire address is determined by A1 pin

 * state during powerup.

 *    low  = 0x1a

 *    high = 0x1b

  i2c codec control layer */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * es8316.c -- es8316 ALSA SoC audio driver

 * Copyright Everest Semiconductor Co.,Ltd

 *

 * Authors: David Yang <yangxiaohua@everest-semi.com>,

 *          Daniel Drake <drake@endlessm.com>

/* In slave mode at single speed, the codec is documented as accepting 5

 * MCLK/LRCK ratios, but we also add ratio 400, which is commonly used on

 * Intel Cherry Trail platforms (19.2MHz MCLK, 48kHz LRCK).

/*

 * ES8316 controls

 Analog Input Mux */

 hp mixer mux */

 headphone Output Mixer */

 DAC data source mux */

 Input Mux */

 Digital Interface */

 Headphone Output Side */

	/* pdn_Lical and pdn_Rical bits are documented as Reserved, but must

	 * be explicitly unset in order to enable HP output

 Recording */

	/* It's not clear why, but to avoid recording only silence,

	 * the DAC clock must be running for the ADC to work.

 Playback */

	/* Limit supported sample rates to ones that can be autodetected

	 * by the codec running in slave mode.

 Clock inversion */

 Enable BCLK and MCLK inputs in slave mode */

 Validate supported sample rates that are autodetected from MCLK */

 Powered-down / reset */

 Catch spurious IRQ before set_jack is called */

 Jack removed, or spurious IRQ? */

 Jack inserted, determine type */

 Jack unplugged underneath us */

 Open, headset */

 Keep mic-gnd-short detection on for button press */

 Shorted, headphones */

 No longer need mic-gnd-short detection */

 Interrupt while jack inserted, report button state */

 Open, button release */

 Short, button press */

	/*

	 * Init es8316->jd_inverted here and not in the probe, as we cannot

	 * guarantee that the bytchr-es8316 driver, which might set this

	 * property, will probe before us.

 Enable irq and sync initial jack state */

 Already disabled (or never enabled) */

 Reset codec and enable current state machine */

	/*

	 * Documentation is unclear, but this value from the vendor driver is

	 * needed otherwise audio output is silent.

	/*

	 * Documentation for this register is unclear and incomplete,

	 * but here is a vendor-provided value that improves volume

	 * and quality for Intel CHT platforms.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * es8328-i2c.c  --  ES8328 ALSA SoC I2C Audio driver

 *

 * Copyright 2014 Sutajio Ko-Usagi PTE LTD

 *

 * Author: Sean Cross <xobs@kosagi.com>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8770.c  --  WM8770 ALSA SoC Audio driver

 *

 * Copyright 2010 Wolfson Microelectronics plc

 *

 * Author: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>

/*

 * We can't use the same notifier block for more than one supply and

 * there's no way I can see to get from a callback to the caller

 * except container_of().

 global DAC playback controls */

 global VOUT playback controls */

 VOUT1/2/3/4 specific controls */

 DAC1/2/3/4 specific controls */

 ADC specific controls */

 other controls */

 Only need to set MCLK/LRCLK ratio if we're master */

 global powerup */

 global powerdown */

 latch the volume update bits */

 mute all DACs */

 This should really be moved into the regulator core */

 SPDX-License-Identifier: GPL-2.0-only



 rt5682.c  --  RT5682 ALSA SoC audio component driver



 Copyright 2018 Realtek Semiconductor Corp.

 Author: Bard Liao <bardliao@realtek.com>



 jack out */

 Sleep for 300 ms miniumum */

 DMIC pin*/

 share with LRCK2 */

 share with DACDAT1 */

 share with IRQ */

 share with BCLK2 */

 Check if MCLK provided */

 Register CCF DAI clock control */

 Initial setup for CCF */

 SPDX-License-Identifier: GPL-2.0

 tscs454.c -- TSCS454 ALSA SoC Audio driver

 Copyright 2018 Tempo Semiconductor, Inc.

 Author: Steven Eckhoff <steven.eckhoff.opensource@gmail.com>

 Assign ASRC out of the box so DAI 1 just works */

 PLLs locked */

/*

 * PLL must be enabled after power up and must be disabled before power down

 * for proper clock switching.

		/*

		 * FV_PLL1CLKEN_DISABLE and FV_PLL2CLKEN_DISABLE are

		 * identical zero vzalues, there is no need to test

		 * the PLL index

 Wait for lock

 Do config in slave mode */

 R_PLLCTL PG 0 ADDR 0x15 */

 R_ISRC PG 0 ADDR 0x16 */

 R_SCLKCTL PG 0 ADDR 0x18 */

 R_I2SIDCTL PG 0 ADDR 0x38 */

 R_I2SODCTL PG 0 ADDR 0x39 */

 R_AUDIOMUX1 PG 0 ADDR 0x3A */

 R_AUDIOMUX2 PG 0 ADDR 0x3B */

 R_AUDIOMUX3 PG 0 ADDR 0x3C */

 R_HSDCTL1 PG 1 ADDR 0x01 */

 R_HSDCTL1 PG 1 ADDR 0x02 */

 R_CH0AIC PG 1 ADDR 0x06 */

 R_CH1AIC PG 1 ADDR 0x07 */

 R_ICTL0 PG 1 ADDR 0x0A */

 R_ICTL1 PG 1 ADDR 0x0B */

 R_MICBIAS PG 1 ADDR 0x0C */

 R_PGACTL0 PG 1 ADDR 0x0D */

 R_PGACTL1 PG 1 ADDR 0x0E */

 R_PGACTL2 PG 1 ADDR 0x0F */

 R_PGACTL3 PG 1 ADDR 0x10 */

 R_ICH0VOL PG1 ADDR 0x12 */

 R_ICH1VOL PG1 ADDR 0x13 */

 R_ICH2VOL PG1 ADDR 0x14 */

 R_ICH3VOL PG1 ADDR 0x15 */

 R_ASRCILVOL PG1 ADDR 0x16 */

 R_ASRCIRVOL PG1 ADDR 0x17 */

 R_ASRCOLVOL PG1 ADDR 0x18 */

 R_ASRCORVOL PG1 ADDR 0x19 */

 R_ALCCTL0 PG1 ADDR 0x1D */

 R_ALCCTL1 PG 1 ADDR 0x1E */

 R_ALCCTL2 PG 1 ADDR 0x1F */

 R_NGATE PG 1 ADDR 0x21 */

 R_DMICCTL PG 1 ADDR 0x22 */

 R_DACCTL PG 2 ADDR 0x01 */

 R_SPKCTL PG 2 ADDR 0x02 */

 R_SUBCTL PG 2 ADDR 0x03 */

 R_MVOLL PG 2 ADDR 0x08 */

 R_MVOLR PG 2 ADDR 0x09 */

 R_HPVOLL PG 2 ADDR 0x0A */

 R_HPVOLR PG 2 ADDR 0x0B */

 R_SPKVOLL PG 2 ADDR 0x0C */

 R_SPKVOLR PG 2 ADDR 0x0D */

 R_SPKEQFILT PG 3 ADDR 0x01 */

 R_SPKMBCCTL PG 3 ADDR 0x0B */

 R_SPKMBCMUG1 PG 3 ADDR 0x0C */

 R_SPKMBCTHR1 PG 3 ADDR 0x0D */

 R_SPKMBCRAT1 PG 3 ADDR 0x0E */

 R_SPKMBCMUG2 PG 3 ADDR 0x13 */

 R_SPKMBCRAT2 PG 3 ADDR 0x15 */

 R_SPKMBCMUG3 PG 3 ADDR 0x1A */

 R_SPKMBCRAT3 PG 3 ADDR 0x1C */

 R_SPKCLECTL PG 3 ADDR 0x21 */

 R_SPKCLEMUG PG 3 ADDR 0x22 */

 R_SPKCOMPRAT PG 3 ADDR 0x24 */

 R_SPKEXPTHR PG 3 ADDR 0x2F */

 R_DACEQFILT PG 4 ADDR 0x01 */

 R_DACMBCCTL PG 4 ADDR 0x0B */

 R_DACMBCMUG1 PG 4 ADDR 0x0C */

 R_DACMBCRAT1 PG 4 ADDR 0x0E */

 R_DACMBCMUG2 PG 4 ADDR 0x13 */

 R_DACMBCRAT2 PG 4 ADDR 0x15 */

 R_DACMBCMUG3 PG 4 ADDR 0x1A */

 R_DACMBCRAT3 PG 4 ADDR 0x1C */

 R_DACCLECTL PG 4 ADDR 0x21 */

 R_DACCOMPRAT PG 4 ADDR 0x24 */

 R_DACEXPRAT PG 4 ADDR 0x30 */

 R_SUBEQFILT PG 5 ADDR 0x01 */

 R_SUBMBCCTL PG 5 ADDR 0x0B */

 R_SUBMBCMUG1 PG 5 ADDR 0x0C */

 R_SUBMBCRAT1 PG 5 ADDR 0x0E */

 R_SUBMBCMUG2 PG 5 ADDR 0x13 */

 R_SUBMBCRAT2 PG 5 ADDR 0x15 */

 R_SUBMBCMUG3 PG 5 ADDR 0x1A */

 R_SUBMBCRAT3 PG 5 ADDR 0x1C */

 R_SUBCLECTL PG 5 ADDR 0x21 */

 R_SUBCOMPRAT PG 5 ADDR 0x24 */

 R_SUBEXPRAT PG 5 ADDR 0x30 */

 CH 0_1 Input Mux */

 CH 2_3 Input Mux */

 CH 4_5 Input Mux */

 R_PLLCTL PG 0 ADDR 0x15 */

 R_ISRC PG 0 ADDR 0x16 */

 R_SCLKCTL PG 0 ADDR 0x18 */

 R_ASRC PG 0 ADDR 0x28 */

 R_I2SIDCTL PG 0 ADDR 0x38 */

 R_I2SODCTL PG 0 ADDR 0x39 */

 R_AUDIOMUX1 PG 0 ADDR 0x3A */

 R_AUDIOMUX2 PG 0 ADDR 0x3B */

 R_HSDCTL1 PG 1 ADDR 0x01 */

 R_HSDCTL1 PG 1 ADDR 0x02 */

 R_CH0AIC PG 1 ADDR 0x06 */

 R_CH1AIC PG 1 ADDR 0x07 */

 R_CH2AIC PG 1 ADDR 0x08 */

 R_CH3AIC PG 1 ADDR 0x09 */

 R_ICTL0 PG 1 ADDR 0x0A */

 R_ICTL1 PG 1 ADDR 0x0B */

 R_MICBIAS PG 1 ADDR 0x0C */

 R_PGACTL0 PG 1 ADDR 0x0D */

 R_PGACTL1 PG 1 ADDR 0x0E */

 R_PGACTL2 PG 1 ADDR 0x0F */

 R_PGACTL3 PG 1 ADDR 0x10 */

 R_ICH0VOL PG 1 ADDR 0x12 */

 R_ICH1VOL PG 1 ADDR 0x13 */

 R_ICH2VOL PG 1 ADDR 0x14 */

 R_ICH3VOL PG 1 ADDR 0x15 */

 R_ASRCILVOL PG 1 ADDR 0x16 */

 R_ASRCIRVOL PG 1 ADDR 0x17 */

 R_ASRCOLVOL PG 1 ADDR 0x18 */

 R_ASRCORVOL PG 1 ADDR 0x19 */

 R_IVOLCTLU PG 1 ADDR 0x1C */

 R_ALCCTL0 PG 1 ADDR 0x1D */

 R_ALCCTL1 PG 1 ADDR 0x1E */

 R_ALCCTL2 PG 1 ADDR 0x1F */

 R_ALCCTL3 PG 1 ADDR 0x20 */

 R_NGATE PG 1 ADDR 0x21 */

 R_DMICCTL PG 1 ADDR 0x22 */

 R_DACCTL PG 2 ADDR 0x01 */

 R_SPKCTL PG 2 ADDR 0x02 */

 R_SUBCTL PG 2 ADDR 0x03 */

 R_DCCTL PG 2 ADDR 0x04 */

 R_OVOLCTLU PG 2 ADDR 0x06 */

 R_MVOLL PG 2 ADDR 0x08 */

 R_MVOLR PG 2 ADDR 0x09 */

 R_HPVOLL PG 2 ADDR 0x0A */

 R_HPVOLR PG 2 ADDR 0x0B */

 R_SPKVOLL PG 2 ADDR 0x0C */

 R_SPKVOLR PG 2 ADDR 0x0D */

 R_SUBVOL PG 2 ADDR 0x10 */

 R_SPKEQFILT PG 3 ADDR 0x01 */

 R_SPKMBCEN PG 3 ADDR 0x0A */

 R_SPKMBCCTL PG 3 ADDR 0x0B */

 R_SPKMBCMUG1 PG 3 ADDR 0x0C */

 R_SPKMBCTHR1 PG 3 ADDR 0x0D */

 R_SPKMBCRAT1 PG 3 ADDR 0x0E */

 R_SPKMBCATK1L PG 3 ADDR 0x0F */

 R_SPKMBCATK1H PG 3 ADDR 0x10 */

 R_SPKMBCREL1L PG 3 ADDR 0x11 */

 R_SPKMBCREL1H PG 3 ADDR 0x12 */

 R_SPKMBCMUG2 PG 3 ADDR 0x13 */

 R_SPKMBCTHR2 PG 3 ADDR 0x14 */

 R_SPKMBCRAT2 PG 3 ADDR 0x15 */

 R_SPKMBCATK2L PG 3 ADDR 0x16 */

 R_SPKMBCATK2H PG 3 ADDR 0x17 */

 R_SPKMBCREL2L PG 3 ADDR 0x18 */

 R_SPKMBCREL2H PG 3 ADDR 0x19 */

 R_SPKMBCMUG3 PG 3 ADDR 0x1A */

 R_SPKMBCTHR3 PG 3 ADDR 0x1B */

 R_SPKMBCRAT3 PG 3 ADDR 0x1C */

 R_SPKMBCATK3L PG 3 ADDR 0x1D */

 R_SPKMBCATK3H PG 3 ADDR 0x1E */

 R_SPKMBCREL3L PG 3 ADDR 0x1F */

 R_SPKMBCREL3H PG 3 ADDR 0x20 */

 R_SPKCLECTL PG 3 ADDR 0x21 */

 R_SPKCLEMUG PG 3 ADDR 0x22 */

 R_SPKCOMPTHR PG 3 ADDR 0x23 */

 R_SPKCOMPRAT PG 3 ADDR 0x24 */

 R_SPKCOMPATKL PG 3 ADDR 0x25 */

 R_SPKCOMPATKH PG 3 ADDR 0x26 */

 R_SPKCOMPRELL PG 3 ADDR 0x27 */

 R_SPKCOMPRELH PG 3 ADDR 0x28 */

 R_SPKLIMTHR PG 3 ADDR 0x29 */

 R_SPKLIMTGT PG 3 ADDR 0x2A */

 R_SPKLIMATKL PG 3 ADDR 0x2B */

 R_SPKLIMATKH PG 3 ADDR 0x2C */

 R_SPKLIMRELL PG 3 ADDR 0x2D */

 R_SPKLIMRELR PG 3 ADDR 0x2E */

 R_SPKEXPTHR PG 3 ADDR 0x2F */

 R_SPKEXPRAT PG 3 ADDR 0x30 */

 R_SPKEXPATKL PG 3 ADDR 0x31 */

 R_SPKEXPATKR PG 3 ADDR 0x32 */

 R_SPKEXPRELL PG 3 ADDR 0x33 */

 R_SPKEXPRELR PG 3 ADDR 0x34 */

 R_SPKFXCTL PG 3 ADDR 0x35 */

 R_DACEQFILT PG 4 ADDR 0x01 */

 R_DACMBCEN PG 4 ADDR 0x0A */

 R_DACMBCCTL PG 4 ADDR 0x0B */

 R_DACMBCMUG1 PG 4 ADDR 0x0C */

 R_DACMBCTHR1 PG 4 ADDR 0x0D */

 R_DACMBCRAT1 PG 4 ADDR 0x0E */

 R_DACMBCATK1L PG 4 ADDR 0x0F */

 R_DACMBCATK1H PG 4 ADDR 0x10 */

 R_DACMBCREL1L PG 4 ADDR 0x11 */

 R_DACMBCREL1H PG 4 ADDR 0x12 */

 R_DACMBCMUG2 PG 4 ADDR 0x13 */

 R_DACMBCTHR2 PG 4 ADDR 0x14 */

 R_DACMBCRAT2 PG 4 ADDR 0x15 */

 R_DACMBCATK2L PG 4 ADDR 0x16 */

 R_DACMBCATK2H PG 4 ADDR 0x17 */

 R_DACMBCREL2L PG 4 ADDR 0x18 */

 R_DACMBCREL2H PG 4 ADDR 0x19 */

 R_DACMBCMUG3 PG 4 ADDR 0x1A */

 R_DACMBCTHR3 PG 4 ADDR 0x1B */

 R_DACMBCRAT3 PG 4 ADDR 0x1C */

 R_DACMBCATK3L PG 4 ADDR 0x1D */

 R_DACMBCATK3H PG 4 ADDR 0x1E */

 R_DACMBCREL3L PG 4 ADDR 0x1F */

 R_DACMBCREL3H PG 4 ADDR 0x20 */

 R_DACCLECTL PG 4 ADDR 0x21 */

 R_DACCLEMUG PG 4 ADDR 0x22 */

 R_DACCOMPTHR PG 4 ADDR 0x23 */

 R_DACCOMPRAT PG 4 ADDR 0x24 */

 R_DACCOMPATKL PG 4 ADDR 0x25 */

 R_DACCOMPATKH PG 4 ADDR 0x26 */

 R_DACCOMPRELL PG 4 ADDR 0x27 */

 R_DACCOMPRELH PG 4 ADDR 0x28 */

 R_DACLIMTHR PG 4 ADDR 0x29 */

 R_DACLIMTGT PG 4 ADDR 0x2A */

 R_DACLIMATKL PG 4 ADDR 0x2B */

 R_DACLIMATKH PG 4 ADDR 0x2C */

 R_DACLIMRELL PG 4 ADDR 0x2D */

 R_DACLIMRELR PG 4 ADDR 0x2E */

 R_DACEXPTHR PG 4 ADDR 0x2F */

 R_DACEXPRAT PG 4 ADDR 0x30 */

 R_DACEXPATKL PG 4 ADDR 0x31 */

 R_DACEXPATKR PG 4 ADDR 0x32 */

 R_DACEXPRELL PG 4 ADDR 0x33 */

 R_DACEXPRELR PG 4 ADDR 0x34 */

 R_DACFXCTL PG 4 ADDR 0x35 */

 R_SUBEQFILT PG 5 ADDR 0x01 */

 R_SUBMBCEN PG 5 ADDR 0x0A */

 R_SUBMBCCTL PG 5 ADDR 0x0B */

 R_SUBMBCMUG1 PG 5 ADDR 0x0C */

 R_SUBMBCTHR1 PG 5 ADDR 0x0D */

 R_SUBMBCRAT1 PG 5 ADDR 0x0E */

 R_SUBMBCATK1L PG 5 ADDR 0x0F */

 R_SUBMBCATK1H PG 5 ADDR 0x10 */

 R_SUBMBCREL1L PG 5 ADDR 0x11 */

 R_SUBMBCREL1H PG 5 ADDR 0x12 */

 R_SUBMBCMUG2 PG 5 ADDR 0x13 */

 R_SUBMBCTHR2 PG 5 ADDR 0x14 */

 R_SUBMBCRAT2 PG 5 ADDR 0x15 */

 R_SUBMBCATK2L PG 5 ADDR 0x16 */

 R_SUBMBCATK2H PG 5 ADDR 0x17 */

 R_SUBMBCREL2L PG 5 ADDR 0x18 */

 R_SUBMBCREL2H PG 5 ADDR 0x19 */

 R_SUBMBCMUG3 PG 5 ADDR 0x1A */

 R_SUBMBCTHR3 PG 5 ADDR 0x1B */

 R_SUBMBCRAT3 PG 5 ADDR 0x1C */

 R_SUBMBCATK3L PG 5 ADDR 0x1D */

 R_SUBMBCATK3H PG 5 ADDR 0x1E */

 R_SUBMBCREL3L PG 5 ADDR 0x1F */

 R_SUBMBCREL3H PG 5 ADDR 0x20 */

 R_SUBCLECTL PG 5 ADDR 0x21 */

 R_SUBCLEMUG PG 5 ADDR 0x22 */

 R_SUBCOMPTHR PG 5 ADDR 0x23 */

 R_SUBCOMPRAT PG 5 ADDR 0x24 */

 R_SUBCOMPATKL PG 5 ADDR 0x25 */

 R_SUBCOMPATKH PG 5 ADDR 0x26 */

 R_SUBCOMPRELL PG 5 ADDR 0x27 */

 R_SUBCOMPRELH PG 5 ADDR 0x28 */

 R_SUBLIMTHR PG 5 ADDR 0x29 */

 R_SUBLIMTGT PG 5 ADDR 0x2A */

 R_SUBLIMATKL PG 5 ADDR 0x2B */

 R_SUBLIMATKH PG 5 ADDR 0x2C */

 R_SUBLIMRELL PG 5 ADDR 0x2D */

 R_SUBLIMRELR PG 5 ADDR 0x2E */

 R_SUBEXPTHR PG 5 ADDR 0x2F */

 R_SUBEXPRAT PG 5 ADDR 0x30 */

 R_SUBEXPATKL PG 5 ADDR 0x31 */

 R_SUBEXPATKR PG 5 ADDR 0x32 */

 R_SUBEXPRELL PG 5 ADDR 0x33 */

 R_SUBEXPRELR PG 5 ADDR 0x34 */

 R_SUBFXCTL PG 5 ADDR 0x35 */

 R_PLLCTL PG 0 ADDR 0x15 */

 R_I2SPINC0 PG 0 ADDR 0x22 */

 R_PWRM0 PG 0 ADDR 0x33 */

 R_PWRM1 PG 0 ADDR 0x34 */

 R_PWRM2 PG 0 ADDR 0x35 */

 R_PWRM3 PG 0 ADDR 0x36 */

 R_PWRM4 PG 0 ADDR 0x37 */

 R_AUDIOMUX1  PG 0 ADDR 0x3A */

 R_AUDIOMUX2 PG 0 ADDR 0x3B */

 R_AUDIOMUX3 PG 0 ADDR 0x3C */

 R_HSDCTL1 PG 1 ADDR 0x01 */

 R_CH0AIC PG 1 ADDR 0x06 */

 R_CH1AIC PG 1 ADDR 0x07 */

 Virtual */

 PLLs */

 Inputs */

 Outputs */

 Ch Muxing */

 In/Out Muxing */

	/******************

	 * Playback Paths *

 DAC Path */

 Line Out */

 ClassD Path */

 Sub Path */

	/*****************

	 * Capture Paths *

 This is used when BCLK is sourcing the PLLs */

 First active aif */

 Sync pg sel reg with cache */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PCM179X ASoC I2C driver

 *

 * Copyright (c) Teenage Engineering AB 2016

 *

 *     Jacob Siverskog <jacob@teenage.engineering>

 SPDX-License-Identifier: (GPL-2.0 OR MIT)



 Copyright (c) 2018 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

 put the device in reset */

 set the mode */

 take the device out of reset - datasheet does not specify a delay */

	/*

	 * We can't really set clock ratio, if the mclk/lrclk is different

	 * from what we provide, then error out

 should not happen */

 Single speed mode */

 Double speed mode */

 Quad speed mode */

	/*

	 * The format is given by a pull resistor on the SDOUT pin:

	 * pull-up for i2s, pull-down for left justified.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8998.c -- ALSA SoC Audio driver for WM8998 codecs

 *

 * Copyright 2015 Cirrus Logic, Inc.

 *

 * Author: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>

 IN1L, IN1R, IN2 */

 This may return -EPROBE_DEFER, so do this early on */

 Latch volume update bits */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * sound/soc/codecs/si476x.c -- Codec driver for SI476X chips

 *

 * Copyright (C) 2012 Innovative Converged Devices(ICD)

 * Copyright (C) 2013 Andrey Smirnov

 *

 * Author: Andrey Smirnov <andrew.smirnov@gmail.com>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ADAU1977/ADAU1978/ADAU1979 driver

 *

 * Copyright 2014 Analog Devices Inc.

 *  Author: Lars-Peter Clausen <lars@metafoo.de>

	/*

	 * The reset bit is obviously volatile, but we need to be able to cache

	 * the other bits in the register, so we can't just mark the whole

	 * register as volatile. Since this is the only place where we'll ever

	 * touch the reset bit just bypass the cache for this operation.

/*

 * Returns the appropriate setting for ths FS field in the CTRL0 register

 * depending on the rate.

	/*

	 * rate = sysclk / (512 * mcs_lut[mcs]) * 2**fs

	 * => mcs_lut[mcs] = sysclk / (512 * rate) * 2**fs

	 * => mcs_lut[mcs] = sysclk / ((512 / 2**fs) * rate)

 The factors configured by MCS are 1, 2, 3, 4, 6 */

 In TDM mode there is a fixed slot width */

	/*

	 * The PLL register is not affected by the software reset. It is

	 * possible that the value of the register was changed to the

	 * default value while we were in cache only mode. In this case

	 * regcache_sync will skip over it and we have to manually sync

	 * it.

 0 = No fixed slot width */

 We can only generate 16 bit or 32 bit wide slots */

 In clock provider mode the maximum bitclock is 24.576 MHz */

 All rates >= 32000 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cs4265.c -- CS4265 ALSA SoC audio driver

 *

 * Copyright 2014 Cirrus Logic, Inc.

 *

 * Author: Paul Handrigan <paul.handrigan@cirrus.com>

 Loopback */

 values 1, 2, or 4 */

32k*/

44.1k*/

48k*/

64k*/

 88.2k */

 96k */

 128k */

 176.4k */

 192k */

 interface format */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * SSM4567 amplifier audio driver

 *

 * Copyright 2014 Google Chromium project.

 *  Author: Anatol Pomozov <anatol@chromium.org>

 *

 * Based on code copyright/by:

 *   Copyright 2013 Analog Devices Inc.

 POWER_CTRL */

 DAC_CTRL */

 SAI_CTRL_1 */

 SAI_CTRL_2 */

	/* The datasheet states that soft reset register is read-only,

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm2000.c  --  WM2000 ALSA Soc Audio driver

 *

 * Copyright 2008-2011 Wolfson Microelectronics PLC.

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 *

 * The download image for the WM2000 will be requested as

 * 'wm2000_anc.bin' by default (overridable via platform data) at

 * runtime and is expected to be in flat binary format.  This is

 * generated by Wolfson configuration tools and includes

 * system-specific calibration information.  If supplied as a

 * sequence of ASCII-encoded hexidecimal bytes this can be converted

 * into a flat binary with a command such as this on the command line:

 *

 * perl -e 'while (<>) { s/[\r\n]+// ; printf("%c", hex($_)); }'

 *                 < file  > wm2000_anc.bin

 Wait for ANC engine to become ready */

	/* Open code download of the data since it is the only bulk

 Maintain clock while active */

 Externally visible pins */

 Target, Path, Source */

 This will trigger a transition to standby mode by default */

 Verify that this is a WM2000 */

 Pre-cook the concatenation of the register address onto the image */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2015-2016, The Linux Foundation. All rights reserved.

 Copyright (c) 2017-2018, Linaro Limited

 Fractional Rates */

/* slave port water mark level

 *   (0: 6bytes, 1: 9bytes, 2: 12 bytes, 3: 15 bytes)

 vout step value */

 HPH_L */

 HPH_R */

 LO1_DIFF */

 LO2_DIFF */

 LO3_SE */

 LO4_SE */

 SWR SPK CH1 */

 SWR SPK CH2 */

TX*/

 16 */

 17 */

 48K */

 96K */

 192K */

 8K */

 16K */

 24K */

 32K */

 48K */

 96K */

 192K */

 384K */

 44.1K */

 Rbuckfly/R_EAR(32) */

 Cutoff frequency for high pass filter */

 only add to the list if value not set */

 AMIC: 0, DMIC: 1 */

 Set Look Ahead Delay */

 Set DEM INP Select */

		/*

		 * Loop through all interpolator MUX inputs and find out

		 * to which interpolator input, the slim rx port

		 * is connected

 rate is in Hz */

 set mixing path rate */

 set primary path sample rate */

 Configure slave interface device */

 write to interface device */

 configure the slave port for water mark and enable*/

 ports 8,9 */

 configure the slave port for water mark and enable*/

 Find the SB TX MUX input - which decimator is connected */

 Check if the TX Mux input is RX MIX TXn */

 Any specific register configuration for compander */

 Set Gain Source Select based on compander enable/disable */

 -84dB min - 40dB max */

 Gain Controls */

 EAR PA */

 HPHL */

 HPHR */

 LINEOUT1 */

 LINEOUT2 */

 LINEOUT3 */

 LINEOUT4 */

 SLIMBUS Connections */

 ADC Mux */

 ADC Connections */

		/*

		 * MIC BIAS can also be requested by MBHC,

		 * so use ref count to handle micbias pullup

		 * and enable requests

 wait for cnp time */

 Check whether adc mux input is AMIC or DMIC */

 Enable TX PGA Mute */

 Enable APC */

 Default value to return in case of error */

 EAR does not have compander */

 Enable Compander Clock */

 Reset comander */

 Enables DRE in this path */

 Reset if needed */

	/*

	 * Set HPH_L & HPH_R gain source selection to REGISTER

	 * for better click and pop only if corresponding PAs are

	 * not enabled. Also cache the values of the HPHL/R

	 * PA gains to be applied after PAs are enabled

 Read DEM INP Select */

 1000us required as per HW requirement */

 GAIN Source Selection */

 Read DEM INP Select */

 1000us required as per HW requirement */

		/*

		 * 7ms sleep is required after PA is enabled as per

		 * HW requirement

 Remove mix path mute if it is enabled */

		/* 5ms sleep is required after PA is disabled as per

		 * HW requirement

		/* 5ms sleep is required after PA is enabled as per

		 * HW requirement

 Remove mix path mute if it is enabled */

		/* 5ms sleep is required after PA is disabled as per

		 * HW requirement

		/*

		 * 7ms sleep is required after PA is enabled as per

		 * HW requirement

 Remove mix path mute if it is enabled */

		/* 5ms sleep is required after PA is disabled as per

		 * HW requirement

		/* 5ms sleep is required after PA is enabled as per

		 * HW requirement

 Remove mix path mute if it is enabled */

		/* 5ms sleep is required after PA is disabled as per

		 * HW requirement

			/*

			 * Ignore interrupts for ports for which the

			 * interrupts are not specifically enabled.

 enable interrupts on all slave ports */

 disable interrupts on all slave ports */

		/*

		 * 1ms delay is required after pre-charge is enabled

		 * as per HW requirement

 Enable mclk requires master bias to be enabled first */

		/*

		 * 10us sleep is required after clock is enabled

		 * as per HW requirement

 MCLK to RCO switch */

 get BG */

 get MCLK */

 put MCLK */

 put BG */

 compute the vout_d step value */

 1 msec sleep required after SIDO Vout_D voltage change */

 enable mclk before setting SIDO voltage */

 TODO SPK1 & SPK2 OUT*/

 TX */

 Digital Mic Inputs */

 100us sleep needed after IREF settings */

 100us sleep needed after VREF settings */

	/*

	 * 5ms sleep required after enabling efuse control

	 * before checking the status.

 ungate MCLK and set clk rate */

 Class-H Init*/

 Default HPH Mode to Class-H HiFi */

 INTR_REG 0 */

	/*

	 * For WCD9335, it takes about 600us for the Vout_A and

	 * Vout_D to be ready after BUCK_SIDO is powered up.

	 * SYS_RST_N shouldn't be pulled high during this time

	 * Toggle the reset line to make sure the reset pulse is

	 * correctly applied

	/*

	 * INTR1 consists of all possible interrupt sources Ear OCP,

	 * HPH OCP, MBHC, MAD, VBAT, and SVA

	 * INTR2 is a subset of first interrupt sources MAD, VBAT, and SVA

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Load Analog Devices SigmaStudio firmware files

 *

 * Copyright 2009-2011 Analog Devices Inc.

/**

 * devm_sigmadsp_init_regmap() - Initialize SigmaDSP instance

 * @dev: The parent device

 * @regmap: Regmap instance to use

 * @ops: The sigmadsp_ops to use for this instance

 * @firmware_name: Name of the firmware file to load

 *

 * Allocates a SigmaDSP instance and loads the specified firmware file.

 *

 * Returns a pointer to a struct sigmadsp on success, or a PTR_ERR() on error.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for ADAU1381/ADAU1781 codec

 *

 * Copyright 2011-2013 Analog Devices Inc.

 * Author: Lars-Peter Clausen <lars@metafoo.de>

	/* After any power changes have been made the dejitter circuit

 Precharge */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2018-2020, The Linux Foundation. All rights reserved.

 VA macro registers */

 VA macro */

 VA core */

 Enable TX PGA Mute */

 Enable TX CLK */

			/*

			 * Minimum 1 clk cycle delay is required as per HW spec

		/*

		 * 6ms delay is required as per HW spec

 apply gain after decimator is enabled */

 Disable TX CLK */

 Any other DIV factor is invalid */

 mclk rate */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm9081.c  --  WM9081 ALSA SoC Audio driver

 *

 * Author: Mark Brown

 *

 * Copyright 2009-12 Wolfson Microelectronics plc

 R2  - Analogue Lineout */

 R3  - Analogue Speaker PGA */

 R4  - VMID Control */

 R5  - Bias Control 1 */

 R7  - Analogue Mixer */

 R8  - Anti Pop Control */

 R9  - Analogue Speaker 1 */

 R10 - Analogue Speaker 2 */

 R11 - Power Management */

 R12 - Clock Control 1 */

 R13 - Clock Control 2 */

 R14 - Clock Control 3 */

 R16 - FLL Control 1 */

 R17 - FLL Control 2 */

 R18 - FLL Control 3 */

 R19 - FLL Control 4 */

 R20 - FLL Control 5 */

 R22 - Audio Interface 1 */

 R23 - Audio Interface 2 */

 R24 - Audio Interface 3 */

 R25 - Audio Interface 4 */

 R27 - Interrupt Status Mask */

 R28 - Interrupt Polarity */

 R29 - Interrupt Control */

 R30 - DAC Digital 1 */

 R31 - DAC Digital 2 */

 R32 - DRC 1 */

 R33 - DRC 2 */

 R34 - DRC 3 */

 R35 - DRC 4 */

 R38 - Write Sequencer 1 */

 R39 - Write Sequencer 2 */

 R40 - MW Slave 1 */

 R42 - EQ 1 */

 R43 - EQ 2 */

 R44 - EQ 3 */

 R45 - EQ 4 */

 R46 - EQ 5 */

 R47 - EQ 6 */

 R48 - EQ 7 */

 R49 - EQ 8 */

 R50 - EQ 9 */

 R51 - EQ 10 */

 R52 - EQ 11 */

 R53 - EQ 12 */

 R54 - EQ 13 */

 R55 - EQ 14 */

 R56 - EQ 15 */

 R57 - EQ 16 */

 R58 - EQ 17 */

 R59 - EQ 18 */

 R60 - EQ 19 */

 R61 - EQ 20 */

 *10 due to .5s */

/*

 * Stop any attempts to change speaker mode while the speaker is enabled.

 *

 * We also have some special anti-pop controls dependent on speaker

 * mode which must be changed along with the mode.

 Are we changing anything? */

 Don't try to change modes while enabled */

 Class AB */

 Class D */

/* The size in bits of the FLL divide multiplied by 10

 Fref must be <=13.5MHz */

 Apply the division for our remaining calculations */

 Fvco should be 90-100MHz; don't check the upper bound */

 Find an appropriate FLL_FRATIO and factor it out of the target */

 Now, calculate N.K */

 Calculate fractional part - scale up so we can round. */

 Move down to proper range now rounding is done */

 Any change? */

 Disable the FLL */

 Disable CLK_SYS while we reconfigure */

	/* Any FLL configuration change requires that the FLL be

 Apply the configuration */

 Set gain to the recommended value */

 Enable the FLL */

 Then bring CLK_SYS up again if it was disabled */

		/* If we have a sample rate calculate a CLK_SYS that

		 * gives us a suitable DAC configuration, plus BCLK.

		 * Ideally we would check to see if we can clock

		 * directly from MCLK and only use the FLL if this is

		 * not the case, though care must be taken with free

		 * running mode.

			/* Make sure we can generate CLK_SYS and BCLK

			 * and that we've got 3MHz for optimal

 Switch SYSCLK over to FLL */

 This should be done on init() for bypass paths */

 Disable the FLL if it's running */

 VMID=2*40k */

 Normal bias current */

 Initial cold start */

 Disable LINEOUT discharge */

 Select startup bias source */

 VMID 2*4k; Soft VMID ramp enable */

 Normal bias enable & soft start off */

 Standard bias source */

 VMID 2*240k */

 Standby bias current on */

 Startup bias source and disable bias */

 Disable VMID with soft ramping */

 Actively discharge LINEOUT */

 frame inversion not valid for DSP modes */

 If TDM is set up then that fixes our BCLK. */

 Otherwise work out a BCLK from the sample size */

 Select nearest CLK_SYS_RATE */

 SAMPLE_RATE */

 Closest match */

 BCLK_DIV */

 Table is sorted */

 LRCLK is a simple fraction of BCLK */

 Apply a ReTune Mobile configuration if it's in use */

 If the EQ is enabled then disable it while we write out */

 Write out the other values */

/* We report two channels because the CODEC processes a stereo signal, even

 * though it is only capable of handling a mono output.

 Enable zero cross by default */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2019 MediaTek Inc.

 config to adaptive mode */

 voltage sensing enable */

 voltage sensing disable */

 pop-noise improvement 1 */

 pop-noise improvement 2 */

 config to off mode */

 idle_bias_off = true */

 dai properties */

 dai operations */

 turn on main pll first, then trigger reset */

 chip reset first */

 chip power on */

 chip devid check */

 chip revision get */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ADAV80X Audio Codec driver supporting ADAV801, ADAV803

 *

 * Copyright 2011 Analog Devices Inc.

 * Author: Yi Li <yi.li@analog.com>

 * Author: Lars-Peter Clausen <lars@metafoo.de>

 freq_out = sample_rate * 256 */

 Enforce the same sample rate on all audio interfaces */

 Force PLLs on for SYSCLK output */

 Power down S/PDIF receiver, since it is currently not supported */

 Disable DAC zero flag */

 SPDX-License-Identifier: GPL-2.0-only



 rt711-sdca.c -- rt711 SDCA ALSA SoC audio driver



 Copyright(c) 2021 Realtek Semiconductor Corp.





 RC calibration */

 HP calibration by manual mode setting */

 Calibration manual mode */

 reset HP calibration */

 cal_clk_en_reg */

 trigger */

 wait for calibration process */

 enable impedance sense */

 release HP-JD and trigger FSM */

 get current UMP message owner */

 if owner is device then there is no button event from device */

 read UMP message offset */

 Host is owner, so set back to device */

 set owner to device */

 get detected_mode */

 write selected_mode */

 SDW_SCP_SDCA_INT_SDCA_0 is used for jack detection */

 SDW_SCP_SDCA_INT_SDCA_8 is used for button detection */

 button released */

 pin attached */

 read UMP message offset */

 button released */

 Enable HID1 event & set button RTC mode */

 GE_mode_change_event_en & Hid1_push_button_event_en */

 default settings was already for JD1 */

 set SCP_SDCA_IntMask1[0]=1 */

 set SCP_SDCA_IntMask2[0]=1 */

 disable HID 1/2 event */

 For SDCA control DAC/ADC Gain */

 control value to 2's complement value */

 L Channel */

 boost gain */

 ADC/DAC gain */

 R Channel */

 boost gain */

 ADC/DAC gain */

 retry 3 times at most */

 Lch*/

 Rch */

 2's complement value to control value */

 boost gain */

 ADC/DAC gain */

 boost gain */

 ADC/DAC gain */

 Use tx_mask or rx_mask to configure stream tag and set dma_data */

 SoundWire specific configuration */

 sampling rate configuration */

 set sampling frequency */

	/*

	 * Mark hw_init to false

	 * HW init will be performed when device reports present

 JD source uses JD2 in default */

		/*

		 * PM runtime is only enabled when a Slave reports as Attached

 set autosuspend parameters */

 update count of parent 'active' children */

 make sure the device does not suspend immediately */

 DP4 mux select from 08_filter_Out_pri */

 ge_exclusive_inbox_en disable */

 calibration */

 HP output enable */

	/*

	 * if set_jack callback occurred early than io_init,

	 * we set up the jack detection function now

 Mark Slave initialization complete */

 SPDX-License-Identifier: GPL-2.0-only

/* ALSA SoC TLV320AIC3X codec driver

 *

 * Author:      Vladimir Barinov, <vbarinov@embeddedalley.com>

 * Copyright:   (C) 2007 MontaVista Software, Inc., <source@mvista.com>

 *

 * Based on sound/soc/codecs/wm8753.c by Liam Girdwood

 *

 * Notes:

 *  The AIC3X is a driver for a low power stereo audio

 *  codecs aic31, aic32, aic33, aic3007.

 *

 *  It supports full aic33 codec functionality.

 *  The compatibility with aic32, aic31 and aic3007 is as follows:

 *    aic32/aic3007    |        aic31

 *  ---------------------------------------

 *   MONO_LOUT -> N/A  |  MONO_LOUT -> N/A

 *                     |  IN1L -> LINE1L

 *                     |  IN1R -> LINE1R

 *                     |  IN2L -> LINE2L

 *                     |  IN2R -> LINE2R

 *                     |  MIC3L/R -> N/A

 *   truncated internal functionality in

 *   accordance with documentation

 *  ---------------------------------------

 *

 *  Hence the machine layer should disable unsupported inputs/outputs by

 *  snd_soc_dapm_disable_pin(codec, "MONO_LOUT"), etc.

 I/O Voltage */

 Digital Core Voltage */

 Analog DAC Voltage */

 ADC Analog and Output Driver Voltage */

 codec private data */

 Selects the micbias voltage */

 Output Common-Mode Voltage */

/*

 * All input lines are connected when !0xf and disconnected with 0xf bit field,

 * so we have to use specific dapm_put call for input mixer

/*

 * mic bias power on/off share the same register bits with

 * output voltage of mic bias. when power on mic bias, we

 * need reclaim it to voltage value.

 * 0x0 = Powered off

 * 0x1 = MICBIAS output is powered to 2.0V,

 * 0x2 = MICBIAS output is powered to 2.5V

 * 0x3 = MICBIAS output is connected to AVDD

 change mic bias voltage to user defined */

/*

 * DAC digital volumes. From -63.5 to 0 dB in 0.5 dB steps

 ADC PGA gain volumes. From 0 to 59.5 dB in 0.5 dB steps */

/*

 * Output stage volumes. From -78.3 to 0 dB. Muted below -78.3 dB.

 * Step size is approximately 0.5 dB over most of the scale but increasing

 * near the very low levels.

 * Define dB scale so that it is mostly correct for range about -55 to 0 dB

 * but having increasing dB difference below that (and where it doesn't count

 * so much). This setting shows -50 dB (actual is -50.3 dB) for register

 * value 100 and -58.5 dB (actual is -78.3 dB) for register value 117.

 Output volumes. From 0 to 9 dB in 1 dB steps */

 Output */

	/*

	 * Output controls that map to output mixer switches. Note these are

	 * only for swapped L-to-R and R-to-L routes. See below stereo controls

	 * for direct L-to-L and R-to-R routes.

 Stereo output controls for direct L-to-L and R-to-R routes */

 Output pin controls */

	/*

	 * Note: enable Automatic input Gain Controller with care. It can

	 * adjust PGA to max value when ADC is on and will never go back.

 De-emphasis */

 Input */

 Pop reduction */

 For other than tlv320aic3104 */

	/*

	 * Output controls that map to output mixer switches. Note these are

	 * only for swapped L-to-R and R-to-L routes. See below stereo controls

	 * for direct L-to-L and R-to-R routes.

 Stereo output controls for direct L-to-L and R-to-R routes */

/*

 * Class-D amplifier gain. From 0 to 18 dB in 6 dB steps

 Left DAC Mux */

 Right DAC Mux */

 Left HPCOM Mux */

 Right HPCOM Mux */

 Left Line Mixer */

 Not on tlv320aic3104 */

 Right Line Mixer */

 Not on tlv320aic3104 */

 Mono Mixer */

 Left HP Mixer */

 Not on tlv320aic3104 */

 Right HP Mixer */

 Not on tlv320aic3104 */

 Left HPCOM Mixer */

 Not on tlv320aic3104 */

 Right HPCOM Mixer */

 Not on tlv320aic3104 */

 Left PGA Mixer */

 Right PGA Mixer */

 Left PGA Mixer for tlv320aic3104 */

 Right PGA Mixer for tlv320aic3104 */

 Left Line1 Mux */

 Right Line1 Mux */

 Left Line2 Mux */

 Right Line2 Mux */

 Left DAC to Left Outputs */

 Right DAC to Right Outputs */

 Inputs to Left ADC */

 Inputs to Right ADC */

 Mic Bias */

	/*

	 * Virtual output pin to detection block inside codec. This can be

	 * used to keep codec bias on if gpio or detection features are needed.

	 * Force pin on or construct a path with an input jack and mic bias

	 * widgets.

 For other than tlv320aic3104 */

 Inputs to Left ADC */

 Inputs to Right ADC */

	/*

	 * Not a real mic bias widget but similar function. This is for dynamic

	 * control of GPIO1 digital mic modulator clock output function when

	 * using digital mic.

	/*

	 * Also similar function like mic bias. Selects digital mic with

	 * configurable oversampling rate instead of ADC converter.

 Output mixers */

 For tlv320aic3104 */

 Inputs to Left ADC */

 Inputs to Right ADC */

 Output mixers */

 Mono Output */

 Class-D outputs */

 Left Input */

 Right Input */

 Left DAC Output */

 Right DAC Output */

 Left Line Output */

 Right Line Output */

 Left HP Output */

 Right HP Output */

 Left HPCOM Output */

 Right HPCOM Output */

 For other than tlv320aic3104 */

 Left Input */

 Right Input */

	/*

	 * Logical path between digital mic enable and GPIO1 modulator clock

	 * output function

 Left Line Output */

 Right Line Output */

 Left HP Output */

 Right HP Output */

 Left HPCOM Output */

 Right HPCOM Output */

 For tlv320aic3104 */

 Left Input */

 Right Input */

 Mono Output */

 Class-D outputs */

 select data word length */

 Fsref can be 44100 or 48000 */

	/* Try to find a value for Q which allows us to bypass the PLL and

 disable PLL if it is bypassed */

 enable PLL when it is used */

	/* Route Left DAC to left channel input and

 codec sample rate select */

	/* Use PLL, compute appropriate setup for j, d, r and p, the closest

	 * one wins the game. Try with d==0 first, next with d!=0.

	 * Constraints for j are according to the datasheet.

	 * The sysclk is divided by 1000 to prevent integer overflows.

				/* This is actually 1000*((j+(d/10000))*r)/p

				 * The term had to be converted to get

				 * rid of the division by 10000; d = 0 here

				/* Check whether this values get closer than

				 * the best ones we had before

 Early exit for exact matches */

 try with d != 0 */

 do not use codec_clk here since we'd loose precision */

		/* check whether this values get closer than the best

 Early exit for exact matches */

 TDM slot selection only valid in DSP_A/_B mode */

 Configure data delay */

 set clock on MCLK or GPIO2 or BCLK */

 set master/slave audio interface */

	/*

	 * match both interface format and signal polarities since they

	 * are fixed

 set iface */

 TDM based on DSP mode requires slots to be adjacent */

 DOUT in high-impedance on inactive bit clocks */

		/*

		 * Put codec to reset and require cache sync as at least one

		 * of the supplies was disabled

 Sync reg_cache with the hardware */

		/* Rewrite paired PLL D registers in case cached sync skipped

		 * writing one of them and thus caused other one also not

		 * being written

		/*

		 * Delay is needed to reduce pop-noise after syncing back the

		 * registers

		/*

		 * Do soft reset to this codec instance in order to clear

		 * possible VDD leakage currents in case the supply regulators

		 * remain on

 HW writes are needless when bias is off */

 enable pll */

 disable pll */

 DAC to Mono Line Out default volume and route to Output mixer */

 unmute all outputs */

 PGA to Mono Line Out default volume, disconnect from Output Mixer */

 Line2 to Mono Out default volume, disconnect from Output Mixer */

/*

 * initialise the AIC3X driver

 * register the mixer and dsp interfaces with the kernel

 DAC default volume and mute */

 DAC to HP default volume and route to Output mixer */

 DAC to Line Out default volume and route to Output mixer */

 unmute all outputs */

 ADC default volume and unmute */

 By default route Line1 to ADC PGA mixer */

 PGA to HP Bypass default volume, disconnect from Output Mixer */

 PGA to Line Out default volume, disconnect from Output Mixer */

 On tlv320aic3104, these registers are reserved and must not be written */

 Line2 to HP Bypass default volume, disconnect from Output Mixer */

 Line2 Line Out default volume, disconnect from Output Mixer */

  Output common-mode voltage = 1.5 V */

 setup GPIO functions */

 set mic bias voltage */

		/*

		 * noting to do. target won't enter here. This is just to avoid

		 * compile time warning "warning: enumeration value

		 * 'AIC3X_MICBIAS_OFF' not handled in switch"

 OCMV setting is forced by DT */

 Class-D speaker driver init; datasheet p. 46 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  hdac_hdmi.c - ASoc HDA-HDMI codec driver for Intel platforms

 *

 *  Copyright (C) 2014-2015 Intel Corp

 *  Author: Samreen Nilofer <samreen.nilofer@intel.com>

 *	    Subhransu S. Prusty <subhransu.s.prusty@intel.com>

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 Currently only spk_alloc, more to be added */

 ALSA API channel-map */

		/*

		 * Report Jack connect event when a device is connected

		 * for the first time where same PCM is attached to multiple

		 * ports.

		/*

		 * Report Jack disconnect event when a device is disconnected

		 * is the only last connected device when same PCM is attached

		 * to multiple ports.

 MST supported verbs */

/*

 * Get the no devices that can be connected to a port on the Pin widget.

/*

 * Get the port entry select on the pin. Return the port entry

 * id selected on the pin. Return 0 means the first port entry

 * is selected or MST is not supported.

/*

 * Sets the selected port entry for the configuring Pin widget verb.

 * returns error if port set is not equal to port get otherwise success

 AC_PAR_DEVLIST_LEN is 0 based. */

	/*

	 * Device List Length is a 0 based integer value indicating the

	 * number of sink device that a MST Pin Widget can support.

 AUDIO_CODING_TYPE_LPCM */

			/*

			 * the controller support 20 and 24 bits in 32 bit

			 * container so we set S32

 0x84 */

 0x1b */

 0x11 << 2 */

 match with HDMI infoframe from this on */

 stop infoframe transmission */

  Fill infoframe. Index auto-incremented */

 Start infoframe */

/*

 * Query pcm list and return port to which stream is routed.

 *

 * Also query connection list of the pin, to validate the cvt to port map.

 *

 * Same stream rendering to multiple ports simultaneously can be done

 * possibly, but not supported for now in driver. So return the first port

 * connected.

/*

 * Go through all converters and ensure connection is set to

 * the correct pin as set via kcontrols.

/*

 * This tries to get a valid pin and set the HW constraints based on the

 * ELD. Even if a valid pin is not found return success so that device open

 * doesn't fail.

	/*

	 * To make PA and other userland happy.

	 * userland scans devices so returning error does not help.

 set the device if pin is mst_capable */

 Enable out path for this pin widget */

 Disable out path for this pin widget */

 Enable transmission */

 Category Code (CC) to zero */

		/*

		 * The connection indices are shared by all converters and

		 * may interfere with each other. Ensure correct

		 * routing for all converters at stream start.

 set the device if pin is mst_capable */

/*

 * Based on user selection, map the PINs with the PCMs.

	/*

	 * Jack status is not reported during device probe as the

	 * PCMs are not registered by then. So report it here.

/*

 * Ideally the Mux inputs should be based on the num_muxs enumerated, but

 * the display driver seem to be programming the connection list for the pin

 * widget runtime.

 *

 * So programming all the possible inputs for the mux, the user has to take

 * care of selecting the right one and leaving all other inputs selected to

 * "NONE"

 To hold inputs to the Pin mux */

 enum texts: ["NONE", "cvt #", "cvt #", ...] */

 Add cvt <- input <- mux route map */

/*

 * Widgets are added in the below sequence

 *	Converter widgets for num converters enumerated

 *	Pin-port widgets for num ports for Pins enumerated

 *	Pin-port mux widgets to represent connenction list of pin widget

 *

 * For each port, one Mux and One output widget is added

 * Total widgets elements = num_cvt + (num_ports * 2);

 *

 * Routes are added as below:

 *	pin-port mux -> pin (based on num_ports)

 *	cvt -> "Input sel control" -> pin-port_mux

 *

 * Total route elements:

 *	num_ports + (pin_muxes * num_cvt)

 DAPM widgets to represent each converter widget */

 DAPM widgets to represent the connection list to pin widget */

 For cvt to pin_mux mapping */

 For pin_mux to pin mapping */

 Add pin <- NULL <- mux route map */

	/*

	 * In case of non MST pin, get_eld info API expectes port

	 * to be -1.

		/*

		 * PCMs are not registered during device probe, so don't

		 * report jack here. It will be done in usermode mux

		 * control select.

	/*

	 * FIXME: max_port may vary for each platform, so pass this as

	 * as driver data or query from i915 interface when this API is

	 * implemented.

 enable DP 1.2 features */

 enable 2nd & 3rd pins and convertors */

 enable DP1.2 mode */

 add ELD ctl with the device number corresponding to the PCM stream */

/*

 * Each converter can support a stream independently. So a dai is created

 * based on the number of converter queried.

 Filter out 44.1, 88.2 and 176.4Khz */

		/*

		 * Set caps based on capability queried from the converter.

		 * It will be constrained runtime based on ELD queried.

/*

 * Parse all nodes and store the cvt/pin nids in array

 * Add one time initialization for pin and cvt widgets

 map NID 0x05 -> port #1 */

 Don't know how this mapping is derived */

	/*

	 * skip notification during system suspend (but not in runtime PM);

	 * the state will be updated at resume. Also since the ELD and

	 * connection states are updated in anyway at the end of the resume,

	 * we can skip it when received during PM process.

 In case of non MST pin, pipe is -1 */

 if not MST, default is port[0] */

 create jack pin kcontrols */

 create Jack DAPM widget */

 add to route from Jack widget to output */

 Add Route from Jack widget to the output widget */

 Add Jack Pin switch Kcontrol */

 default set the Jack Pin switch to OFF */

	/*

	 * this is a new PCM device, create new pcm and

	 * add to the pcm list

 add control for ELD Bytes */

	/*

	 * hold the ref while we probe, also no need to drop the ref on

	 * exit, we call pm_runtime_suspend() so that will do for us

 Imp: Store the card pointer in hda_codec */

	/*

	 * Setup a device_link between card device and HDMI codec device.

	 * The card device is the consumer and the HDMI codec device is

	 * the supplier. With this setting, we can make sure that the audio

	 * domain in display power will be always turned on before operating

	 * on the HDMI audio codec registers.

	 * Let's use the flag DL_FLAG_AUTOREMOVE_CONSUMER. This can make

	 * sure the device link is freed when the machine driver is removed.

	/*

	 * hdac_device core already sets the state to active and calls

	 * get_noresume. So enable runtime and set the device to suspend.

	/*

	 * As the ELD notify callback request is not entertained while the

	 * device is in suspend state. Need to manually check detection of

	 * all pins here. pin capablity change is not support, so use the

	 * already set pin caps.

	 *

	 * NOTE: this is safe to call even if the codec doesn't actually resume.

	 * The pin check involves only with DRM audio component hooks, so it

	 * works even if the HD-audio side is still dreaming peacefully.

 hold the ref while we probe */

	/*

	 * Turned off in the runtime_suspend during the first explicit

	 * pm_runtime_suspend call.

 ASoC specific initialization */

 controller may not have been initialized for the first time */

	/*

	 * Power down afg.

	 * codec_read is preferred over codec_write to set the power state.

	 * This way verb is send to set the power state and response

	 * is received. So setting power state is ensured without using loop

	 * to read the state.

 controller may not have been initialized for the first time */

 Power up afg */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8985.c  --  WM8985 / WM8758 ALSA SoC Audio driver

 *

 * Copyright 2010 Wolfson Microelectronics plc

 * Author: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>

 *

 * WM8758 support:

 * Copyright: 2016 Barix AG

 * Author: Petr Kulhavy <petr@barix.com>

 *

 * TODO:

 *  o Add OUT3/OUT4 mixer controls.

 R1  - Power management 1 */

 R2  - Power management 2 */

 R3  - Power management 3 */

 R4  - Audio Interface */

 R5  - Companding control */

 R6  - Clock Gen control */

 R7  - Additional control */

 R8  - GPIO Control */

 R9  - Jack Detect Control 1 */

 R10 - DAC Control */

 R11 - Left DAC digital Vol */

 R12 - Right DAC digital vol */

 R13 - Jack Detect Control 2 */

 R14 - ADC Control */

 R15 - Left ADC Digital Vol */

 R16 - Right ADC Digital Vol */

 R18 - EQ1 - low shelf */

 R19 - EQ2 - peak 1 */

 R20 - EQ3 - peak 2 */

 R21 - EQ4 - peak 3 */

 R22 - EQ5 - high shelf */

 R24 - DAC Limiter 1 */

 R25 - DAC Limiter 2 */

 R27 - Notch Filter 1 */

 R28 - Notch Filter 2 */

 R29 - Notch Filter 3 */

 R30 - Notch Filter 4 */

 R32 - ALC control 1 */

 R33 - ALC control 2 */

 R34 - ALC control 3 */

 R35 - Noise Gate */

 R36 - PLL N */

 R37 - PLL K 1 */

 R38 - PLL K 2 */

 R39 - PLL K 3 */

 R41 - 3D control */

 R42 - OUT4 to ADC */

 R43 - Beep control */

 R44 - Input ctrl */

 R45 - Left INP PGA gain ctrl */

 R46 - Right INP PGA gain ctrl */

 R47 - Left ADC BOOST ctrl */

 R48 - Right ADC BOOST ctrl */

 R49 - Output ctrl */

 R50 - Left mixer ctrl */

 R51 - Right mixer ctrl */

 R52 - LOUT1 (HP) volume ctrl */

 R53 - ROUT1 (HP) volume ctrl */

 R54 - LOUT2 (SPK) volume ctrl */

 R55 - ROUT2 (SPK) volume ctrl */

 R56 - OUT3 mixer ctrl */

 R57 - OUT4 (MONO) mix ctrl */

 R60 - OUTPUT ctrl */

 R61 - BIAS CTRL */

/*

 * latch bit 8 of these registers to ensure instant

 * volume updates

 --- WM8985 only --- */

 --- WM8985 only --- */

 --- WM8985 only --- */

 --- WM8985 only --- */

 disable the DACs and ADCs */

 set the desired eqmode */

 restore DAC/ADC configuration */

 frame inversion is not valid for dsp modes */

	/*

	 * match to the nearest possible sample rate and rely

	 * on the array index to configure the SR register

 select the appropriate bclk divider */

 disable the PLL */

 set PLLN and PRESCALE */

 set PLLK */

 set the source of the clock to be the PLL */

 enable the PLL */

 VMID at 75k */

 enable anti-pop features */

 enable thermal shutdown */

 enable BIASEN */

 VMID at 75k */

 disable anti-pop features */

 VMID at 300k */

 disable thermal shutdown */

 disable VMIDSEL and BIASEN */

 latch volume update bits */

 enable BIASCUT */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * cx20442.c  --  CX20442 ALSA Soc Audio driver

 *

 * Copyright 2009 Janusz Krzysztofik <jkrzyszt@tis.icnet.pl>

 *

 * Initially based on sound/soc/codecs/wm8400.c

 * Copyright 2008, 2009 Wolfson Microelectronics PLC.

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

	/* tty and write pointers required for talking to the modem

/*

 * Line discpline related code

 *

 * Any of the callback functions below can be used in two ways:

 * 1) registerd by a machine driver as one of line discipline operations,

 * 2) called from a machine's provided line discipline callback function

 *    in case when extra machine specific code must be run as well.

 Modem init: echo off, digital speaker off, quiet off, voice mode */

 Line discipline .open() */

 Doesn't make sense without write callback */

 Won't work if no codec pointer has been passed by a card driver */

 Actual setup will be performed after the modem responds. */

 Line discipline .close() */

 Prevent the codec driver from further accessing the modem */

 Line discipline .hangup() */

 Line discipline .receive_buf() */

 First modem response, complete setup procedure */

 Set up codec driver access to modem controls */

/*

 * Codec DAI

		/*

		 * When running on a non-dt platform and requested regulator

		 * is not available, regulator_get() never returns

		 * -EPROBE_DEFER as it is not able to justify if the regulator

		 * may still appear later.  On the other hand, the board can

		 * still set full constraints flag at late_initcall in order

		 * to instruct regulator_get() to return a dummy one if

		 * sufficient.  Hence, if we get -ENODEV here, let's convert

		 * it to -EPROBE_DEFER and wait for the board to decide or

		 * let Deferred Probe infrastructure handle this error.

 power down chip */

 should be already in STANDBY, hence disabled */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8728.c  --  WM8728 ALSA SoC Audio driver

 *

 * Copyright 2008 Wolfson Microelectronics plc

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

/*

 * We can't read the WM8728 register space so we cache them instead.

 * Note that the defaults here aren't the physical defaults, we latch

 * the volume update bits, mute the output and enable infinite zero

 * detect.

 codec private data */

/*

 * DAPM controls.

	/* Currently only I2S is supported by the driver, though the

	 * hardware is more flexible.

 The hardware only support full slave mode */

 Power everything up... */

 ..then sync in the register cache. */

 CONFIG_SPI_MASTER */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cs42l51.c

 *

 * ASoC Driver for Cirrus Logic CS42L51 codecs

 *

 * Copyright (c) 2010 Arnaud Patard <apatard@mandriva.com>

 *

 * Based on cs4270.c - Copyright (c) Freescale Semiconductor

 *

 * For now:

 *  - Only I2C is support. Not SPI

 *  - master mode *NOT* supported

 The mode (I2S or left-justified) */

 same value : (L+R)/2 and (R+L)/2 */

/*

 * to power down, one must:

 * 1.) Enable the PDN bit

 * 2.) enable power-down for the select channels

 * 3.) disable the PDN bit.

 analog/mic */

 HP */

 mux */

 Delay mclk shutdown to fulfill power-down sequence requirements */

/*

 * Master mode mclk/fs ratios.

 * Recommended configurations are SSM for 4-50khz and DSM for 50-100kHz ranges

 * The table below provides support of following ratios:

 * 128: SSM (%128) with div2 disabled

 * 256: SSM (%128) with div2 enabled

 * In both cases, if sampling rate is above 50kHz, SSM is overridden

 * with DSM (%128) configuration

 Figure out which MCLK/LRCK ratio to use */

 Sampling rate, in Hz */

 MCLK/LRCK ratio */

 We did not find a matching ratio */

 Force DSM mode if sampling rate is above 50kHz */

		/*

		 * Auto detect mode is not applicable for master mode and has to

		 * be disabled. Otherwise SPEED[1:0] bits will be ignored.

 return dai id 0, whatever the endpoint index */

	/*

	 * DAC configuration

	 * - Use signal processor

	 * - auto mute

	 * - vol changes immediate

	 * - no de-emphasize

 Verify that we have a CS42L51 */

 SPDX-License-Identifier: GPL-2.0



 rt1308.c  --  RT1308 ALSA SoC amplifier component driver



 Copyright 2019 Realtek Semiconductor Corp.

 Author: Derek Fang <derek.fang@realtek.com>



 I2S Data Channel Selection */

 Audio Interface */

 Supply Widgets */

 Digital Interface */

 Output Lines */

 ignore last byte difference */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm2200.c  --  WM2200 ALSA SoC Audio driver

 *

 * Copyright 2012 Wolfson Microelectronics plc

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 The code assumes DCVDD is generated internally */

 codec private data */

 R11    - Tone Generator 1 */

 R258   - Clocking 3 */

 R259   - Clocking 4 */

 R273   - FLL Control 1 */

 R274   - FLL Control 2 */

 R275   - FLL Control 3 */

 R276   - FLL Control 4 */

 R278   - FLL Control 6 */

 R279   - FLL Control 7 */

 R281   - FLL EFS 1 */

 R282   - FLL EFS 2 */

 R512   - Mic Charge Pump 1 */

 R513   - Mic Charge Pump 2 */

 R514   - DM Charge Pump 1 */

 R524   - Mic Bias Ctrl 1 */

 R525   - Mic Bias Ctrl 2 */

 R527   - Ear Piece Ctrl 1 */

 R528   - Ear Piece Ctrl 2 */

 R769   - Input Enables */

 R770   - IN1L Control */

 R771   - IN1R Control */

 R772   - IN2L Control */

 R773   - IN2R Control */

 R774   - IN3L Control */

 R775   - IN3R Control */

 R778   - RXANC_SRC */

 R779   - Input Volume Ramp */

 R780   - ADC Digital Volume 1L */

 R781   - ADC Digital Volume 1R */

 R782   - ADC Digital Volume 2L */

 R783   - ADC Digital Volume 2R */

 R784   - ADC Digital Volume 3L */

 R785   - ADC Digital Volume 3R */

 R1024  - Output Enables */

 R1025  - DAC Volume Limit 1L */

 R1026  - DAC Volume Limit 1R */

 R1027  - DAC Volume Limit 2L */

 R1028  - DAC Volume Limit 2R */

 R1033  - DAC AEC Control 1 */

 R1034  - Output Volume Ramp */

 R1035  - DAC Digital Volume 1L */

 R1036  - DAC Digital Volume 1R */

 R1037  - DAC Digital Volume 2L */

 R1038  - DAC Digital Volume 2R */

 R1047  - PDM 1 */

 R1048  - PDM 2 */

 R1280  - Audio IF 1_1 */

 R1281  - Audio IF 1_2 */

 R1282  - Audio IF 1_3 */

 R1283  - Audio IF 1_4 */

 R1284  - Audio IF 1_5 */

 R1285  - Audio IF 1_6 */

 R1286  - Audio IF 1_7 */

 R1287  - Audio IF 1_8 */

 R1288  - Audio IF 1_9 */

 R1289  - Audio IF 1_10 */

 R1290  - Audio IF 1_11 */

 R1291  - Audio IF 1_12 */

 R1292  - Audio IF 1_13 */

 R1293  - Audio IF 1_14 */

 R1294  - Audio IF 1_15 */

 R1295  - Audio IF 1_16 */

 R1296  - Audio IF 1_17 */

 R1297  - Audio IF 1_18 */

 R1298  - Audio IF 1_19 */

 R1299  - Audio IF 1_20 */

 R1300  - Audio IF 1_21 */

 R1301  - Audio IF 1_22 */

 R1536  - OUT1LMIX Input 1 Source */

 R1537  - OUT1LMIX Input 1 Volume */

 R1538  - OUT1LMIX Input 2 Source */

 R1539  - OUT1LMIX Input 2 Volume */

 R1540  - OUT1LMIX Input 3 Source */

 R1541  - OUT1LMIX Input 3 Volume */

 R1542  - OUT1LMIX Input 4 Source */

 R1543  - OUT1LMIX Input 4 Volume */

 R1544  - OUT1RMIX Input 1 Source */

 R1545  - OUT1RMIX Input 1 Volume */

 R1546  - OUT1RMIX Input 2 Source */

 R1547  - OUT1RMIX Input 2 Volume */

 R1548  - OUT1RMIX Input 3 Source */

 R1549  - OUT1RMIX Input 3 Volume */

 R1550  - OUT1RMIX Input 4 Source */

 R1551  - OUT1RMIX Input 4 Volume */

 R1552  - OUT2LMIX Input 1 Source */

 R1553  - OUT2LMIX Input 1 Volume */

 R1554  - OUT2LMIX Input 2 Source */

 R1555  - OUT2LMIX Input 2 Volume */

 R1556  - OUT2LMIX Input 3 Source */

 R1557  - OUT2LMIX Input 3 Volume */

 R1558  - OUT2LMIX Input 4 Source */

 R1559  - OUT2LMIX Input 4 Volume */

 R1560  - OUT2RMIX Input 1 Source */

 R1561  - OUT2RMIX Input 1 Volume */

 R1562  - OUT2RMIX Input 2 Source */

 R1563  - OUT2RMIX Input 2 Volume */

 R1564  - OUT2RMIX Input 3 Source */

 R1565  - OUT2RMIX Input 3 Volume */

 R1566  - OUT2RMIX Input 4 Source */

 R1567  - OUT2RMIX Input 4 Volume */

 R1568  - AIF1TX1MIX Input 1 Source */

 R1569  - AIF1TX1MIX Input 1 Volume */

 R1570  - AIF1TX1MIX Input 2 Source */

 R1571  - AIF1TX1MIX Input 2 Volume */

 R1572  - AIF1TX1MIX Input 3 Source */

 R1573  - AIF1TX1MIX Input 3 Volume */

 R1574  - AIF1TX1MIX Input 4 Source */

 R1575  - AIF1TX1MIX Input 4 Volume */

 R1576  - AIF1TX2MIX Input 1 Source */

 R1577  - AIF1TX2MIX Input 1 Volume */

 R1578  - AIF1TX2MIX Input 2 Source */

 R1579  - AIF1TX2MIX Input 2 Volume */

 R1580  - AIF1TX2MIX Input 3 Source */

 R1581  - AIF1TX2MIX Input 3 Volume */

 R1582  - AIF1TX2MIX Input 4 Source */

 R1583  - AIF1TX2MIX Input 4 Volume */

 R1584  - AIF1TX3MIX Input 1 Source */

 R1585  - AIF1TX3MIX Input 1 Volume */

 R1586  - AIF1TX3MIX Input 2 Source */

 R1587  - AIF1TX3MIX Input 2 Volume */

 R1588  - AIF1TX3MIX Input 3 Source */

 R1589  - AIF1TX3MIX Input 3 Volume */

 R1590  - AIF1TX3MIX Input 4 Source */

 R1591  - AIF1TX3MIX Input 4 Volume */

 R1592  - AIF1TX4MIX Input 1 Source */

 R1593  - AIF1TX4MIX Input 1 Volume */

 R1594  - AIF1TX4MIX Input 2 Source */

 R1595  - AIF1TX4MIX Input 2 Volume */

 R1596  - AIF1TX4MIX Input 3 Source */

 R1597  - AIF1TX4MIX Input 3 Volume */

 R1598  - AIF1TX4MIX Input 4 Source */

 R1599  - AIF1TX4MIX Input 4 Volume */

 R1600  - AIF1TX5MIX Input 1 Source */

 R1601  - AIF1TX5MIX Input 1 Volume */

 R1602  - AIF1TX5MIX Input 2 Source */

 R1603  - AIF1TX5MIX Input 2 Volume */

 R1604  - AIF1TX5MIX Input 3 Source */

 R1605  - AIF1TX5MIX Input 3 Volume */

 R1606  - AIF1TX5MIX Input 4 Source */

 R1607  - AIF1TX5MIX Input 4 Volume */

 R1608  - AIF1TX6MIX Input 1 Source */

 R1609  - AIF1TX6MIX Input 1 Volume */

 R1610  - AIF1TX6MIX Input 2 Source */

 R1611  - AIF1TX6MIX Input 2 Volume */

 R1612  - AIF1TX6MIX Input 3 Source */

 R1613  - AIF1TX6MIX Input 3 Volume */

 R1614  - AIF1TX6MIX Input 4 Source */

 R1615  - AIF1TX6MIX Input 4 Volume */

 R1616  - EQLMIX Input 1 Source */

 R1617  - EQLMIX Input 1 Volume */

 R1618  - EQLMIX Input 2 Source */

 R1619  - EQLMIX Input 2 Volume */

 R1620  - EQLMIX Input 3 Source */

 R1621  - EQLMIX Input 3 Volume */

 R1622  - EQLMIX Input 4 Source */

 R1623  - EQLMIX Input 4 Volume */

 R1624  - EQRMIX Input 1 Source */

 R1625  - EQRMIX Input 1 Volume */

 R1626  - EQRMIX Input 2 Source */

 R1627  - EQRMIX Input 2 Volume */

 R1628  - EQRMIX Input 3 Source */

 R1629  - EQRMIX Input 3 Volume */

 R1630  - EQRMIX Input 4 Source */

 R1631  - EQRMIX Input 4 Volume */

 R1632  - LHPF1MIX Input 1 Source */

 R1633  - LHPF1MIX Input 1 Volume */

 R1634  - LHPF1MIX Input 2 Source */

 R1635  - LHPF1MIX Input 2 Volume */

 R1636  - LHPF1MIX Input 3 Source */

 R1637  - LHPF1MIX Input 3 Volume */

 R1638  - LHPF1MIX Input 4 Source */

 R1639  - LHPF1MIX Input 4 Volume */

 R1640  - LHPF2MIX Input 1 Source */

 R1641  - LHPF2MIX Input 1 Volume */

 R1642  - LHPF2MIX Input 2 Source */

 R1643  - LHPF2MIX Input 2 Volume */

 R1644  - LHPF2MIX Input 3 Source */

 R1645  - LHPF2MIX Input 3 Volume */

 R1646  - LHPF2MIX Input 4 Source */

 R1647  - LHPF2MIX Input 4 Volume */

 R1648  - DSP1LMIX Input 1 Source */

 R1649  - DSP1LMIX Input 1 Volume */

 R1650  - DSP1LMIX Input 2 Source */

 R1651  - DSP1LMIX Input 2 Volume */

 R1652  - DSP1LMIX Input 3 Source */

 R1653  - DSP1LMIX Input 3 Volume */

 R1654  - DSP1LMIX Input 4 Source */

 R1655  - DSP1LMIX Input 4 Volume */

 R1656  - DSP1RMIX Input 1 Source */

 R1657  - DSP1RMIX Input 1 Volume */

 R1658  - DSP1RMIX Input 2 Source */

 R1659  - DSP1RMIX Input 2 Volume */

 R1660  - DSP1RMIX Input 3 Source */

 R1661  - DSP1RMIX Input 3 Volume */

 R1662  - DSP1RMIX Input 4 Source */

 R1663  - DSP1RMIX Input 4 Volume */

 R1664  - DSP1AUX1MIX Input 1 Source */

 R1665  - DSP1AUX2MIX Input 1 Source */

 R1666  - DSP1AUX3MIX Input 1 Source */

 R1667  - DSP1AUX4MIX Input 1 Source */

 R1668  - DSP1AUX5MIX Input 1 Source */

 R1669  - DSP1AUX6MIX Input 1 Source */

 R1670  - DSP2LMIX Input 1 Source */

 R1671  - DSP2LMIX Input 1 Volume */

 R1672  - DSP2LMIX Input 2 Source */

 R1673  - DSP2LMIX Input 2 Volume */

 R1674  - DSP2LMIX Input 3 Source */

 R1675  - DSP2LMIX Input 3 Volume */

 R1676  - DSP2LMIX Input 4 Source */

 R1677  - DSP2LMIX Input 4 Volume */

 R1678  - DSP2RMIX Input 1 Source */

 R1679  - DSP2RMIX Input 1 Volume */

 R1680  - DSP2RMIX Input 2 Source */

 R1681  - DSP2RMIX Input 2 Volume */

 R1682  - DSP2RMIX Input 3 Source */

 R1683  - DSP2RMIX Input 3 Volume */

 R1684  - DSP2RMIX Input 4 Source */

 R1685  - DSP2RMIX Input 4 Volume */

 R1686  - DSP2AUX1MIX Input 1 Source */

 R1687  - DSP2AUX2MIX Input 1 Source */

 R1688  - DSP2AUX3MIX Input 1 Source */

 R1689  - DSP2AUX4MIX Input 1 Source */

 R1690  - DSP2AUX5MIX Input 1 Source */

 R1691  - DSP2AUX6MIX Input 1 Source */

 R1792  - GPIO CTRL 1 */

 R1793  - GPIO CTRL 2 */

 R1794  - GPIO CTRL 3 */

 R1795  - GPIO CTRL 4 */

 R1801  - Misc Pad Ctrl 1 */

 R2049  - Interrupt Status 1 Mask */

 R2052  - Interrupt Status 2 Mask */

 R2056  - Interrupt Control */

 R2304  - EQL_1 */

 R2305  - EQL_2 */

 R2306  - EQL_3 */

 R2307  - EQL_4 */

 R2308  - EQL_5 */

 R2309  - EQL_6 */

 R2310  - EQL_7 */

 R2311  - EQL_8 */

 R2312  - EQL_9 */

 R2313  - EQL_10 */

 R2314  - EQL_11 */

 R2315  - EQL_12 */

 R2316  - EQL_13 */

 R2317  - EQL_14 */

 R2318  - EQL_15 */

 R2319  - EQL_16 */

 R2320  - EQL_17 */

 R2321  - EQL_18 */

 R2322  - EQL_19 */

 R2323  - EQL_20 */

 R2326  - EQR_1 */

 R2327  - EQR_2 */

 R2328  - EQR_3 */

 R2329  - EQR_4 */

 R2330  - EQR_5 */

 R2331  - EQR_6 */

 R2332  - EQR_7 */

 R2333  - EQR_8 */

 R2334  - EQR_9 */

 R2335  - EQR_10 */

 R2336  - EQR_11 */

 R2337  - EQR_12 */

 R2338  - EQR_13 */

 R2339  - EQR_14 */

 R2340  - EQR_15 */

 R2341  - EQR_16 */

 R2342  - EQR_17 */

 R2343  - EQR_18 */

 R2344  - EQR_19 */

 R2345  - EQR_20 */

 R2366  - HPLPF1_1 */

 R2367  - HPLPF1_2 */

 R2370  - HPLPF2_1 */

 R2371  - HPLPF2_2 */

 R2560  - DSP1 Control 1 */

 R2562  - DSP1 Control 2 */

 R2563  - DSP1 Control 3 */

 R2564  - DSP1 Control 4 */

 R2566  - DSP1 Control 5 */

 R2567  - DSP1 Control 6 */

 R2568  - DSP1 Control 7 */

 R2569  - DSP1 Control 8 */

 R2570  - DSP1 Control 9 */

 R2571  - DSP1 Control 10 */

 R2572  - DSP1 Control 11 */

 R2573  - DSP1 Control 12 */

 R2575  - DSP1 Control 13 */

 R2576  - DSP1 Control 14 */

 R2577  - DSP1 Control 15 */

 R2578  - DSP1 Control 16 */

 R2579  - DSP1 Control 17 */

 R2580  - DSP1 Control 18 */

 R2582  - DSP1 Control 19 */

 R2583  - DSP1 Control 20 */

 R2584  - DSP1 Control 21 */

 R2586  - DSP1 Control 22 */

 R2587  - DSP1 Control 23 */

 R2588  - DSP1 Control 24 */

 R2590  - DSP1 Control 25 */

 R2592  - DSP1 Control 26 */

 R2593  - DSP1 Control 27 */

 R2594  - DSP1 Control 28 */

 R2595  - DSP1 Control 29 */

 R2596  - DSP1 Control 30 */

 R2598  - DSP1 Control 31 */

 R2816  - DSP2 Control 1 */

 R2818  - DSP2 Control 2 */

 R2819  - DSP2 Control 3 */

 R2820  - DSP2 Control 4 */

 R2822  - DSP2 Control 5 */

 R2823  - DSP2 Control 6 */

 R2824  - DSP2 Control 7 */

 R2825  - DSP2 Control 8 */

 R2826  - DSP2 Control 9 */

 R2827  - DSP2 Control 10 */

 R2828  - DSP2 Control 11 */

 R2829  - DSP2 Control 12 */

 R2831  - DSP2 Control 13 */

 R2832  - DSP2 Control 14 */

 R2833  - DSP2 Control 15 */

 R2834  - DSP2 Control 16 */

 R2835  - DSP2 Control 17 */

 R2836  - DSP2 Control 18 */

 R2838  - DSP2 Control 19 */

 R2839  - DSP2 Control 20 */

 R2840  - DSP2 Control 21 */

 R2842  - DSP2 Control 22 */

 R2843  - DSP2 Control 23 */

 R2844  - DSP2 Control 24 */

 R2846  - DSP2 Control 25 */

 R2848  - DSP2 Control 26 */

 R2849  - DSP2 Control 27 */

 R2850  - DSP2 Control 28 */

 R2851  - DSP2 Control 29 */

 R2852  - DSP2 Control 30 */

 R2854  - DSP2 Control 31 */

 Tone */

 AEC */

 Input */

 AIF */

 EQ */

 LHPF1 */

 LHPF2 */

 DSP1 */

 DSP2 */

	/* Everything needs SYSCLK but only hook up things on the edge

 Data sizes if not using TDM */

 Target BCLK rate */

	/* TODO: Check if MCLKs are in use and enable/disable pulls to

	 * match.

 Fref must be <=13.5MHz */

 Apply the division for our remaining calculations */

 Fvco should be 90-100MHz; don't check the upper bound */

 Find an appropraite FLL_FRATIO and factor it out of the target */

 Disable the FLL while we reconfigure */

 Clear any pending completions */

 Poll for the lock; will use the interrupt to exit quickly */

 Assign slots 1-6 to channels 1-6 for both TX and RX */

 Apply default for bypass mode */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * 88pm860x-codec.c -- 88PM860x ALSA SoC Audio Driver

 *

 * Copyright 2010 Marvell International Ltd.

 * Author: Haojian Zhuang <haojian.zhuang@marvell.com>

 Status Register 1 (0x01) */

 Mic Detection Register (0x37) */

 Headset Detection Register (0x38) */

 Misc2 Register (0x42) */

 PCM Interface Register 2 (0xb1) */

 Bit clock polarity */

 Frame Sync polarity */

 Master / Slave */

 18 / 16 bits */

 I2S Interface Register 4 (0xbe) */

 DAC Offset Register (0xcb) */

 ADC Analog Register 1 (0xd0) */

 Earpiece/Speaker Control Register 2 (0xda) */

 Audio Supplies Register 2 (0xdc) */

 Audio Enable Register 1 (0xdd) */

 Audio Enable Register 2 (0xde) */

 DAC Enable Register 2 (0xe1) */

 Shorts Register (0xeb) */

/*

 * This widget should be just after DAC & PGA in DAPM power-on sequence and

 * before DAC & PGA in DAPM power-off sequence.

 -9450dB to 0dB in 150dB steps ( mute instead of -9450dB) */

 -9dB to 0db in 3dB steps */

 {-23, -17, -13.5, -11, -9, -6, -3, 0}dB */

 {0, 0, 0, -6, 0, 6, 12, 18}dB */

 {-16, -13, -10, -7, -5.2, -3,3, -2.2, 0}dB, mute instead of -16dB */

 Sidetone Gain = M * 2^(-5-N) */

 DAPM Widget Events */

/*

 * A lot registers are belong to RSYNC domain. It requires enabling RSYNC bit

 * after updating these registers. Otherwise, these updated registers won't

 * be effective.

	/*

	 * In order to avoid current on the load, mute power-on and power-off

	 * should be transients.

	 * Unmute by DAC_MUTE. It should be unmuted when DAPM sequence is

	 * finished.

 Auto mute in power-on sequence. */

 update dac */

 Auto mute in power-off sequence. */

 update dac */

/*

 * DAPM Controls

 AUX1 Switch */

 AUX2 Switch */

 Left Ex. PA Switch */

 Right Ex. PA Switch */

 I2S Mux / Mux9 */

 I2S Mic Mux / Mux8 */

 ADCL Mux / Mux2 */

 ADCR Mux / Mux3 */

 ADCR EC Mux / Mux6 */

 EC Mux / Mux4 */

 DAC Headset 1 Mux / Mux10 */

 DAC Headset 2 Mux / Mux11 */

 DAC Lineout 1 Mux / Mux12 */

 DAC Lineout 2 Mux / Mux13 */

 DAC Spearker Earphone Mux / Mux14 */

 Headset 1 Mux / Mux15 */

 Headset 2 Mux / Mux16 */

 Lineout 1 Mux / Mux17 */

 Lineout 2 Mux / Mux18 */

 Speaker Earpiece Demux */

 MIC Mux / Mux1 */

 supply */

 I2S Clock */

 PCM/AIF1 Inputs */

 PCM/AFI2 Outputs */

 I2S/AIF2 Inputs */

 I2S/AIF2 Outputs */

/*

 * Use MUTE_LEFT & MUTE_RIGHT to implement digital mute.

 * These bits can also be used to mute.

 bit size */

 sample rate */

 set audio interface clocking */

 Slave mode is not supported */

 bit size */

 sample rate */

 set audio interface clocking */

 Enable Audio PLL & Audio section */

 DAI PCM */

 DAI I2S */

 headset short detect */

 Lineout short detect */

 sync status */

 sync status */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8524.c  --  WM8524 ALSA SoC Audio driver

 *

 * Copyright 2009 Wolfson Microelectronics plc

 * Copyright 2017 NXP

 *

 * Based on WM8523 ALSA SoC Audio driver written by Mark Brown

 codec private data */

	/* The set of sample rates that can be supported depends on the

	 * MCLK supplied to the CODEC - enforce this.

		/* Check that it's a standard rate since core can't

		 * cope with others and having the odd rates confuses

		 * constraint matching.

 Need at least one supported rate... */

 sentinel*/ }

/* SPDX-License-Identifier: GPL-2.0

 *

 * ALSA SoC TLV320AIC3x codec driver SPI interface

 *

 * Author:      Arun KS, <arunks@mistralsolutions.com>

 * Copyright:   (C) 2008 Mistral Solutions Pvt Ltd.,

 *

 * Based on sound/soc/codecs/wm8731.c by Richard Purdie

 *

 SPDX-License-Identifier: GPL-2.0



 rt700.c -- rt700 ALSA SoC audio driver



 Copyright(c) 2019 Realtek Semiconductor Corp.





 pin attached */

 jack in */

 jack is already in, report button event */

 jack out */

 button released */

 pin attached */

 jack is already in, report button event */

 cbj comparator */

 button released */

 power on */

 Enable Jack Detection */

 power off */

 R Channel */

 L Channel */

 For Verb-Set Amplifier Gain (Verb ID = 3h) */

 Can't use update bit function, so read the original value first */

 output */

 input */

 L Channel */

 for mute */

 keep gain */

 for gain */

 keep mute status */

 R Channel */

 for mute */

 keep gain */

 for gain */

 keep mute status */

 retry 3 times at most */

 Set both L/R channels at the same time */

 Lch*/

 Rch */

 check result */

 output */

 input */

 output */

 input */

 for mute status */

 for gain */

 vid = 0xf01 */

 Verb ID = 0x701h */

 Use tx_mask or rx_mask to configure stream tag and set dma_data */

 SoundWire specific configuration */

 This code assumes port 1 for playback and port 2 for capture */

 bit 3:0 Number of Channel */

 bit 6:4 Bits per Sample */

 48Khz */

 Bus clock frequency */

	/*

	 * Mark hw_init to false

	 * HW init will be performed when device reports present

	/*

	 * PM runtime is only enabled when a Slave reports as Attached

 set autosuspend parameters */

 update count of parent 'active' children */

 make sure the device does not suspend immediately */

 reset */

 power on */

 Set Pin Widget */

 Set Configuration Default */

 Enable Line2 */

 Set index */

 Finish Initial Settings, set power to D3 */

	/*

	 * if set_jack callback occurred early than io_init,

	 * we set up the jack detection function now

 Mark Slave initialization complete */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cs35l33.c -- CS35L33 ALSA SoC audio driver

 *

 * Copyright 2016 Cirrus Logic, Inc.

 *

 * Author: Paul Handrigan <paul.handrigan@cirrus.com>

 these are read only registers */

 set sdout_3st_i2s and reset pdn_tdm */

 reset sdout_3st_tdm */

 reset sdout_3st_i2s and set pdn_tdm */

 set sdout_3st_tdm */

 MCLK, Sample Rate, adsp_rate, int_fs_ratio */

		/*

		 * tdm mode in cs35l33 resembles dsp-a mode very

		 * closely, it is dsp-a with fsync shifted left by half bclk

 scan rx_mask for aud slot */

	/*

	 * scan tx_mask: vmon(2 slots); imon (2 slots);

	 * vpmon (1 slot) vbstmon (1 slot)

 disable vpmon/vbstmon: enable later if set in tx_mask */

 disconnect {vp,vbst}_mon routes: eanble later if set in tx_mask*/

 configure VMON_TX_LOC */

 configure IMON_TX_LOC */

 configure VPMON_TX_LOC */

 configure VBSTMON_TX_LOC */

 Enable the relevant tx slot */

 Boost current in uA */

 Set Platform Data */

 update IMON scaling rate if different from default of 0x8 */

	/*

	 * unmask important interrupts that causes the chip to enter

	 * speaker safe mode and hence deserves user attention

 redo the calibration in next power up */

	/* Check to see if the unmasked bits are active,

	 *  if not then exit.

 handle the interrupts */

 redo the calibration in next power up */

 use default value */

 use default value */

 We could issue !RST or skip it based on AMP topology */

 initialize codec */

 disable mclk and tdm */

 SPDX-License-Identifier: GPL-2.0

/*

 * rt1011.c -- rt1011 ALSA SoC amplifier component driver

 *

 * Copyright(c) 2019 Realtek Semiconductor Corp.

 *

 * Author: Shuming Fan <shumingf@realtek.com>

 *

 1: recevier mode on */

 0: speaker mode on */

 write R0 to register */

 2^24 * 128 */

 I2S Data In Selection */

 TDM Data In Selection */

 TDM1 Data Out Selection */

 Data Out Mode */

 Speaker/Receiver Mode */

 BiQuad/DRC/SmartBoost Settings */

 R0 */

 R0 temperature */

 I2S Reference */

 Audio Interface */

 Digital Interface */

 Output Lines */

 disable MCLK detect in default */

 Rx slot configuration */

 Tx slot configuration */

 DONT change this */

 RC clock */

 ADC/DAC setting */

 DC detection */

 Power */

 POW_PLL / POW_BG / POW_BG_MBIAS_LV / POW_V/I */

 DC offset from EFUSE */

 mixer */

 EFUSE read */

 Class D on */

 STP enable */

 2^24 * 128 */

 depop */

	/*

	 * This flag should reset after booting.

	 * The factory test will do calibration again and use this flag to check

	 * whether the calibration completed

 initial */

 Apply temperature and calibration data from device property */

 2^24 * 128 */

 SPDX-License-Identifier: GPL-2.0-only



 uda1334.c  --  UDA1334 ALSA SoC Audio driver



 Based on WM8523 ALSA SoC Audio driver written by Mark Brown

 codec private data */

	/*

	 * The set of sample rates that can be supported depends on the

	 * MCLK supplied to the CODEC - enforce this.

		/*

		 * Check that it's a standard rate since core can't

		 * cope with others and having the odd rates confuses

		 * constraint matching.

 Need at least one supported rate... */

 sentinel*/ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm5110.c  --  WM5110 ALSA SoC Audio driver

 *

 * Copyright 2012 Wolfson Microelectronics plc

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 Enables are channel wise swapped from the DRE enables */

 Force reset of PGA volumes, if turning DRE off */

	/*

	 * PGA Volume is also used as part of the enable sequence, so

	 * usage of it should be avoided whilst that is running.

	/*

	 * PGA Volume is also used as part of the enable sequence, so

	 * usage of it should be avoided whilst that is running.

 This may return -EPROBE_DEFER, so do this early on */

 SR2 fixed at 8kHz, SR3 fixed at 16kHz */

 Latch volume update bits */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8350.c -- WM8350 ALSA SoC audio driver

 *

 * Copyright (C) 2007-12 Wolfson Microelectronics PLC.

 *

 * Author: Liam Girdwood <lrg@slimlogic.co.uk>

/* We only include the analogue supplies here; the digital supplies

 * need to be available well before this driver can be probed.

/*

 * Ramp OUT1 PGA volume to minimise pops at stream startup and shutdown.

 left channel */

 ramp step up */

 ramp step down */

 right channel */

 ramp step up */

 ramp step down */

 only hit the update bit if either volume has changed this step */

/*

 * Ramp OUT2 PGA volume to minimise pops at stream startup and shutdown.

 left channel */

 ramp step up */

 ramp step down */

 right channel */

 ramp step up */

 ramp step down */

 only hit the update bit if either volume has changed this step */

/*

 * This work ramps both output PGAs at stream start/stop time to

 * minimise pop associated with DAPM power switching.

 * It's best to enable Zero Cross when ramping occurs to minimise any

 * zipper noises.

 do we need to ramp at all ? */

 PGA volumes have 6 bits of resolution to ramp */

 ramp finished ? */

 we need to delay longer on the up ramp */

 delay is longer over 0dB as increases are larger */

 doesn't matter if we delay longer */

/*

 * WM8350 Controls

	/* For OUT1 and OUT2 we shadow the values and only actually write

	 * them out when active in order to ensure the amplifier comes on

 now hit the volume update bits (always bit 8) */

 If these are cached registers use the cache */

/*

 * DAPM Controls

 Left Playback Mixer */

 Right Playback Mixer */

 Out4 Mixer */

 Out3 Mixer */

 Left Input Mixer */

 Right Input Mixer */

 Left Mic Mixer */

 Right Mic Mixer */

 Beep Switch */

 Out4 Capture Mux */

 virtual mixer for Beep and Out2R */

 left playback mixer */

 right playback mixer */

 out4 playback mixer */

 out3 playback mixer */

 out2 */

 out1 */

 ADCs */

 Left capture mixer */

 Right capture mixer */

 L3 Inputs */

 Left Mic mixer */

 Right Mic mixer */

 out 4 capture */

 Beep */

 MCLK direction */

 set master/slave audio interface */

 interface format */

 clock inversion */

 bit size */

	/* The sloping stopband filter is recommended for use with

	 * lower sample rates to improve performance.

 FLL divisors */

 FLL_OUTDIV */

 FLL_FRATIO */

/* The size in bits of the fll divide multiplied by 10

 Check if we need to round */

 Move down to proper range now rounding is done */

 power down FLL - we need to do this for reconfiguration */

 set up N.K & dividers */

 power FLL on */

 Enable the system clock */

 mute DAC & outputs */

 discharge cap memory */

 wait for discharge */

 enable antipop */

 ramp up vmid */

 wait for vmid */

 turn on vmid 300k  */

 enable analogue bias */

 disable antipop */

 turn on vmid 300k and reduce current */

 mute DAC & enable outputs */

 enable anti pop S curve */

 turn off vmid  */

 wait */

 turn off VBuf and drain */

 wait */

 disable anti-pop */

 disable clock gen */

/**

 * wm8350_hp_jack_detect - Enable headphone jack detection.

 *

 * @component:  WM8350 component

 * @which:  left or right jack detect signal

 * @jack:   jack to report detection events on

 * @report: value to report

 *

 * Enables the headphone jack detection of the WM8350.  If no report

 * is specified then detection is disabled.

 Sync status */

/**

 * wm8350_mic_jack_detect - Enable microphone jack detection.

 *

 * @component:         WM8350 component

 * @jack:          jack to report detection events on

 * @detect_report: value to report when presence detected

 * @short_report:  value to report when microphone short detected

 *

 * Enables the microphone jack detection of the WM8350.  If both reports

 * are specified as zero then detection is disabled.

 Put the codec into reset if it wasn't already */

 Enable the codec */

 Enable robust clocking mode in ADC */

 read OUT1 & OUT2 volumes */

 Latch VU bits & mute */

 Make sure AIF tristating is disabled by default */

 Make sure we've got a sane companding setup too */

 Make sure jack detect is disabled to start off with */

	/* if there was any work waiting then we run it now and

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8940.c  --  WM8940 ALSA Soc Audio driver

 *

 * Author: Jonathan Cameron <jic23@cam.ac.uk>

 *

 * Based on wm8510.c

 *    Copyright  2006 Wolfson Microelectronics PLC.

 *    Author:  Liam Girdwood <lrg@slimlogic.co.uk>

 *

 * Not currently handled:

 * Notch filter control

 * AUXMode (inverting vs mixer)

 * No means to obtain current gain if alc enabled.

 * No use made of gpio

 * Fast VMID discharge for power down

 * Soft Start

 * DLR and ALR Swaps not enabled

 * Digital Sidetone not supported

 Power 1 */

 Power 2 */

 Power 3 */

 Interface Control */

 Companding Control */

 Clock Control */

 Additional Controls */

 GPIO Control */

 Auto Increment Control */

 DAC Control */

 DAC Volume */

 ADC Control */

 ADC Volume */

 Notch Filter 1 Control 1 */

 Notch Filter 1 Control 2 */

 Notch Filter 2 Control 1 */

 Notch Filter 2 Control 2 */

 Notch Filter 3 Control 1 */

 Notch Filter 3 Control 2 */

 Notch Filter 4 Control 1 */

 Notch Filter 4 Control 2 */

 DAC Limit Control 1 */

 DAC Limit Control 2 */

 ALC Control 1 */

 ALC Control 2 */

 ALC Control 3 */

 Noise Gate */

 PLLN */

 PLLK1 */

 PLLK2 */

 PLLK3 */

 ALC Control 4 */

 Input Control */

 PGA Gain */

 ADC Boost Control */

 Output Control */

 Speaker Mixer Control */

 Speaker Volume */

 Mono Mixer Control */

 Mono output mixer */

 Speaker output mixer */

 Outputs */

  Microphone PGA */

 Boost Mixer */

 LoutR control */

 ensure bufioen and biasen */

 Enable thermal shutdown */

 set vmid to 75k */

 ensure bufioen and biasen */

 ensure bufioen and biasen */

 set vmid to 300k for standby */

/* The size in bits of the pll divide multiplied by 10

 The left shift ist to avoid accuracy loss when right shifting */

 Multiply by 2 */

 Divide by 4 */

 divide by 2 */

 Check if we need to round */

 Move down to proper range now rounding is done */

 Untested at the moment */

 Turn off PLL */

 Clock CODEC directly from MCLK */

 Pll power down */

 Pll is followed by a frequency divide by 4 */

 No factional component */

 Enable the PLL */

 Run CODEC from PLL instead of MCLK */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm5100.c  --  WM5100 ALSA SoC Audio driver

 *

 * Copyright 2011-2 Wolfson Microelectronics plc

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 If DCVDD is supplied externally specify as LDOVDD */

 codec private data */

 Is this rate already in use? */

 Tone */

 AEC */

 Input */

 AIF */

 AIF3 - check */

 EQ */

 DRC */

 LHPF1 */

 LHPF2 */

 LHPF3 */

 LHPF4 */

 DSP1 */

 DSP2 */

 DSP3 */

 ASRC1 */

 ASRC2 */

 ISRC1DEC1 */

 ISRC1INT1 */

 ISRC2DEC1 */

 ISRC2INT1 */

 Only applicable for analogue inputs */

 FIXME: Only valid from -12dB to 0dB (52-64) */

 Wait for the outputs to flag themselves as enabled */

/* We register a _POST event if we don't have IRQ support so we can

 * look at the error status from the CODEC - if we've got the IRQ

 * hooked up then we will get prompted to look by an interrupt.

 Data sizes if not using TDM */

 Target BCLK rate */

 Root for BCLK depends on SYS/ASYNCCLK */

 If we're in ASYNCCLK set the ASYNC sample rate */

 TODO: We should really check for symmetry */

 The 32kHz clock is slightly different to the others */

 Not real clocks, record which clock domain they're in */

	/* TODO: Check if MCLKs are in use and enable/disable pulls to

	 * match.

	/* If this is SYSCLK then configure the clock rate for the

	 * internal audio functions to the natural sample rate for

	 * this clock rate.

 Fref must be <=13.5MHz */

 Apply the division for our remaining calculations */

 Fvco should be 90-100MHz; don't check the upper bound */

 Find an appropraite FLL_FRATIO and factor it out of the target */

 Disable the FLL while we reconfigure */

 Clear any pending completions */

 Poll for the lock; will use interrupt when we can test */

 Actually go much higher */

 Increase the detection rate a bit for responsiveness. */

 No accessory, reset everything and report removal */

	/* If the measurement is very high we've got a microphone,

	 * either we just detected one or if we already reported then

	 * we've got a button release event.

			/* Increase poll rate to give better responsiveness

	/* If we detected a lower impedence during initial startup

	 * then we probably have the wrong polarity, flip it.  Don't

	 * do this for the lowest impedences to speed up detection of

	 * plain headphones and give up if neither polarity looks

	 * sensible.

	/* Don't distinguish between buttons, just report any low

	 * impedence as BTN_0.

		/* Slowest detection rate, gives debounce for initial

 We need the charge pump to power MICBIAS */

		/* We start off just enabling microphone detection - even a

		 * plain headphone will trigger detection.

 Don't debounce interrupts to support use of SYSCLK only */

 TODO: check if we're symmetric */

 Enable default interrupts */

 SPDX-License-Identifier: GPL-2.0

/*

 * Texas Instruments PCM186x Universal Audio ADC

 *

 * Copyright (C) 2015-2017 Texas Instruments Incorporated - https://www.ti.com

 *	Andreas Dannenberg <dannenberg@ti.com>

 *	Andrew F. Davis <afd@ti.com>

 Analog power supply. Connect to 3.3-V supply. */

 Digital power supply. Connect to 3.3-V supply. */

 I/O power supply. Connect to 3.3-V or 1.8-V. */

 Default for ADC1L */

 Default for ADC2L */

 Default for ADC1R */

 Default for ADC2R */

	/*

	 * Put the codec into SLEEP mode when not in use, allowing the

	 * Energysense mechanism to operate.

	/*

	 * Put the codec into SLEEP mode when not in use, allowing the

	 * Energysense mechanism to operate.

 Select TDM transmission data */

 In DSP/TDM mode, the LRCLK divider must be 256 */

 Configure 1/256 duty cycle for LRCK */

 Only configure clock dividers in master mode. */

 set master/slave audio interface */

 set interface polarity */

 set interface format */

		/* DSP_A uses the same basic config as DSP_B

		 * except we need to shift the TDM output by one BCK cycle

 Reset device registers for a consistent power-on like state */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8997.c  --  WM8997 ALSA SoC Audio driver

 *

 * Copyright 2012 Wolfson Microelectronics plc

 *

 * Author: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>

 This may return -EPROBE_DEFER, so do this early on */

 SR2 fixed at 8kHz, SR3 fixed at 16kHz */

 Latch volume update bits */

 SPDX-License-Identifier: GPL-2.0

/*

 * rt715.c -- rt715 ALSA SoC audio driver

 *

 * Copyright(c) 2019 Realtek Semiconductor Corp.

 *

 * ALC715 ASoC Codec Driver based Intel Dummy SdW codec driver

 *

 R Channel */

 L Channel */

 For Verb-Set Amplifier Gain (Verb ID = 3h) */

 Can't use update bit function, so read the original value first */

 output */

 input */

 L Channel */

 for gain */

 keep mute status */

 R Channel */

 for gain */

 keep mute status */

 retry 3 times at most */

 Set both L/R channels at the same time */

 Lch*/

 Rch */

 check result */

 output */

 input */

 D0:power on state, D3: power saving mode */

 output */

 input */

 for mute status */

 for gain */

 Can't use update bit function, so read the original value first */

 L Channel */

 for mute */

 keep gain */

 R Channel */

 for mute */

 keep gain */

 retry 3 times at most */

 Set both L/R channels at the same time */

 Lch*/

 Rch */

 D0:power on state, D3: power saving mode */

 L Channel */

 for gain */

 keep mute status */

 R Channel */

 for gain */

 keep mute status */

 retry 3 times at most */

 Set both L/R channels at the same time */

 Lch*/

 Rch */

 D0:power on state, D3: power saving mode */

 Capture switch */

 Volume Control */

 MIC Boost Control */

 nid = e->reg, vid = 0xf01 */

	/*

	 * The first two indices of ADC Mux 24/25 are routed to the same

	 * hardware source. ie, ADC Mux 24 0/1 will both connect to MIC2.

	 * To have a unique set of inputs, we skip the index1 of the muxes.

 Verb ID = 0x701h, nid = e->reg */

/*

 * Due to mux design for nid 24 (MUX_IN3)/25 (MUX_IN4), connection index 0 and

 * 1 will be connected to the same dmic source, therefore we skip index 1 to

 * avoid misunderstanding on usage of dapm routing.

 Use tx_mask or rx_mask to configure stream tag and set dma_data */

 bit 14 0:48K 1:44.1K */

 bit 15 Stream Type 0:PCM 1:Non-PCM, should always be PCM */

 bit 3:0 Number of Channel */

 bit 6:4 Bits per Sample */

 Bus clock frequency */

	/*

	 * Mark hw_init to false

	 * HW init will be performed when device reports present

	/*

	 * PM runtime is only enabled when a Slave reports as Attached

 set autosuspend parameters */

 update count of parent 'active' children */

 make sure the device does not suspend immediately */

 Mute nid=08h/09h */

 Mute nid=07h/27h */

 Set Pin Widget */

 Set Converter Stream */

 Set Configuration Default */

 Finish Initial Settings, set power to D3 */

 Mark Slave initialization complete */

 SPDX-License-Identifier: GPL-2.0



 JZ4725B CODEC driver



 Copyright (C) 2019, Paul Cercueil <paul@crapouillou.net>

 ICDC internal register access control register(RGADW) */

 ICDC internal register data output register (RGDATA)*/

 JZ internal register space */

 DAC */

 ADC */

 Mixer */

 Pins */

 Enable sound hardware */

	/* Write CONFIGn (n=1 to 8) bits.

	 * The value 0x0f is specified in the datasheet as a requirement.

 wait 6+ cycles */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ak4671.c  --  audio driver for AK4671

 *

 * Copyright (C) 2009 Samsung Electronics Co.Ltd

 * Author: Joonyoung Shim <jy0922.shim@samsung.com>

 ak4671 register cache & default register settings */

 AK4671_AD_DA_POWER_MANAGEMENT	(0x00)	*/

 AK4671_PLL_MODE_SELECT0		(0x01)	*/

 AK4671_PLL_MODE_SELECT1		(0x02)	*/

 AK4671_FORMAT_SELECT			(0x03)	*/

 AK4671_MIC_SIGNAL_SELECT		(0x04)	*/

 AK4671_MIC_AMP_GAIN			(0x05)	*/

 AK4671_MIXING_POWER_MANAGEMENT0	(0x06)	*/

 AK4671_MIXING_POWER_MANAGEMENT1	(0x07)	*/

 AK4671_OUTPUT_VOLUME_CONTROL		(0x08)	*/

 AK4671_LOUT1_SIGNAL_SELECT		(0x09)	*/

 AK4671_ROUT1_SIGNAL_SELECT		(0x0a)	*/

 AK4671_LOUT2_SIGNAL_SELECT		(0x0b)	*/

 AK4671_ROUT2_SIGNAL_SELECT		(0x0c)	*/

 AK4671_LOUT3_SIGNAL_SELECT		(0x0d)	*/

 AK4671_ROUT3_SIGNAL_SELECT		(0x0e)	*/

 AK4671_LOUT1_POWER_MANAGERMENT	(0x0f)	*/

 AK4671_LOUT2_POWER_MANAGERMENT	(0x10)	*/

 AK4671_LOUT3_POWER_MANAGERMENT	(0x11)	*/

 AK4671_LCH_INPUT_VOLUME_CONTROL	(0x12)	*/

 AK4671_RCH_INPUT_VOLUME_CONTROL	(0x13)	*/

 AK4671_ALC_REFERENCE_SELECT		(0x14)	*/

 AK4671_DIGITAL_MIXING_CONTROL	(0x15)	*/

 AK4671_ALC_TIMER_SELECT		(0x16)	*/

 AK4671_ALC_MODE_CONTROL		(0x17)	*/

 AK4671_MODE_CONTROL1			(0x18)	*/

 AK4671_MODE_CONTROL2			(0x19)	*/

 AK4671_LCH_OUTPUT_VOLUME_CONTROL	(0x1a)	*/

 AK4671_RCH_OUTPUT_VOLUME_CONTROL	(0x1b)	*/

 AK4671_SIDETONE_A_CONTROL		(0x1c)	*/

 AK4671_DIGITAL_FILTER_SELECT		(0x1d)	*/

 AK4671_FIL3_COEFFICIENT0		(0x1e)	*/

 AK4671_FIL3_COEFFICIENT1		(0x1f)	*/

 AK4671_FIL3_COEFFICIENT2		(0x20)	*/

 AK4671_FIL3_COEFFICIENT3		(0x21)	*/

 AK4671_EQ_COEFFICIENT0		(0x22)	*/

 AK4671_EQ_COEFFICIENT1		(0x23)	*/

 AK4671_EQ_COEFFICIENT2		(0x24)	*/

 AK4671_EQ_COEFFICIENT3		(0x25)	*/

 AK4671_EQ_COEFFICIENT4		(0x26)	*/

 AK4671_EQ_COEFFICIENT5		(0x27)	*/

 AK4671_FIL1_COEFFICIENT0		(0x28)	*/

 AK4671_FIL1_COEFFICIENT1		(0x29)	*/

 AK4671_FIL1_COEFFICIENT2		(0x2a)	*/

 AK4671_FIL1_COEFFICIENT3		(0x2b)	*/

 AK4671_FIL2_COEFFICIENT0		(0x2c)	*/

 AK4671_FIL2_COEFFICIENT1		(0x2d)	*/

 AK4671_FIL2_COEFFICIENT2		(0x2e)	*/

 AK4671_FIL2_COEFFICIENT3		(0x2f)	*/

 AK4671_DIGITAL_FILTER_SELECT2	(0x30)	*/

 AK4671_E1_COEFFICIENT0		(0x32)	*/

 AK4671_E1_COEFFICIENT1		(0x33)	*/

 AK4671_E1_COEFFICIENT2		(0x34)	*/

 AK4671_E1_COEFFICIENT3		(0x35)	*/

 AK4671_E1_COEFFICIENT4		(0x36)	*/

 AK4671_E1_COEFFICIENT5		(0x37)	*/

 AK4671_E2_COEFFICIENT0		(0x38)	*/

 AK4671_E2_COEFFICIENT1		(0x39)	*/

 AK4671_E2_COEFFICIENT2		(0x3a)	*/

 AK4671_E2_COEFFICIENT3		(0x3b)	*/

 AK4671_E2_COEFFICIENT4		(0x3c)	*/

 AK4671_E2_COEFFICIENT5		(0x3d)	*/

 AK4671_E3_COEFFICIENT0		(0x3e)	*/

 AK4671_E3_COEFFICIENT1		(0x3f)	*/

 AK4671_E3_COEFFICIENT2		(0x40)	*/

 AK4671_E3_COEFFICIENT3		(0x41)	*/

 AK4671_E3_COEFFICIENT4		(0x42)	*/

 AK4671_E3_COEFFICIENT5		(0x43)	*/

 AK4671_E4_COEFFICIENT0		(0x44)	*/

 AK4671_E4_COEFFICIENT1		(0x45)	*/

 AK4671_E4_COEFFICIENT2		(0x46)	*/

 AK4671_E4_COEFFICIENT3		(0x47)	*/

 AK4671_E4_COEFFICIENT4		(0x48)	*/

 AK4671_E4_COEFFICIENT5		(0x49)	*/

 AK4671_E5_COEFFICIENT0		(0x4a)	*/

 AK4671_E5_COEFFICIENT1		(0x4b)	*/

 AK4671_E5_COEFFICIENT2		(0x4c)	*/

 AK4671_E5_COEFFICIENT3		(0x4d)	*/

 AK4671_E5_COEFFICIENT4		(0x4e)	*/

 AK4671_E5_COEFFICIENT5		(0x4f)	*/

 AK4671_EQ_CONTROL_250HZ_100HZ	(0x50)	*/

 AK4671_EQ_CONTROL_3500HZ_1KHZ	(0x51)	*/

 AK4671_EQ_CONTRO_10KHZ		(0x52)	*/

 AK4671_PCM_IF_CONTROL0		(0x53)	*/

 AK4671_PCM_IF_CONTROL1		(0x54)	*/

 AK4671_PCM_IF_CONTROL2		(0x55)	*/

 AK4671_DIGITAL_VOLUME_B_CONTROL	(0x56)	*/

 AK4671_DIGITAL_VOLUME_C_CONTROL	(0x57)	*/

 AK4671_SIDETONE_VOLUME_CONTROL	(0x58)	*/

 AK4671_DIGITAL_MIXING_CONTROL2	(0x59)	*/

 AK4671_SAR_ADC_CONTROL		(0x5a)	*/

/*

 * LOUT1/ROUT1 output volume control:

 * from -24 to 6 dB in 6 dB steps (mute instead of -30 dB)

/*

 * LOUT2/ROUT2 output volume control:

 * from -33 to 6 dB in 3 dB steps (mute instead of -33 dB)

/*

 * LOUT3/ROUT3 output volume control:

 * from -6 to 3 dB in 3 dB steps

/*

 * Mic amp gain control:

 * from -15 to 30 dB in 3 dB steps

 * REVISIT: The actual min value(0x01) is -12 dB and the reg value 0x00 is not

 * available

 Common playback gain controls */

 Common capture gain controls */

 event handlers */

 Output Mixers */

 Input MUXs */

 Inputs */

 Outputs */

 DAC */

 ADC */

 PGA */

 Output Mixers */

 Input MUXs */

 Mic Power */

 Supply */

 Outputs */

 Inputs */

 Analog Loops */

 set master/slave audio interface */

 interface format */

 set mode and format */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * max98090.c -- MAX98090 ALSA SoC Audio driver

 *

 * Copyright 2011-2012 Maxim Integrated Products

 Allows for sparsely populated register maps */

 00 Software Reset */

 03 Interrupt Masks */

 04 System Clock Quick */

 05 Sample Rate Quick */

 06 DAI Interface Quick */

 07 DAC Path Quick */

 08 Mic/Direct to ADC Quick */

 09 Line to ADC Quick */

 0A Analog Mic Loop Quick */

 0B Analog Line Loop Quick */

 0C Reserved */

 0D Input Config */

 0E Line Input Level */

 0F Line Config */

 10 Mic1 Input Level */

 11 Mic2 Input Level */

 12 Mic Bias Voltage */

 13 Digital Mic Config */

 14 Digital Mic Mode */

 15 Left ADC Mixer */

 16 Right ADC Mixer */

 17 Left ADC Level */

 18 Right ADC Level */

 19 ADC Biquad Level */

 1A ADC Sidetone */

 1B System Clock */

 1C Clock Mode */

 1D Any Clock 1 */

 1E Any Clock 2 */

 1F Any Clock 3 */

 20 Any Clock 4 */

 21 Master Mode */

 22 Interface Format */

 23 TDM Format 1*/

 24 TDM Format 2*/

 25 I/O Configuration */

 26 Filter Config */

 27 DAI Playback Level */

 28 EQ Playback Level */

 29 Left HP Mixer */

 2A Right HP Mixer */

 2B HP Control */

 2C Left HP Volume */

 2D Right HP Volume */

 2E Left Spk Mixer */

 2F Right Spk Mixer */

 30 Spk Control */

 31 Left Spk Volume */

 32 Right Spk Volume */

 33 ALC Timing */

 34 ALC Compressor */

 35 ALC Expander */

 36 ALC Gain */

 37 Rcv/Line OutL Mixer */

 38 Rcv/Line OutL Control */

 39 Rcv/Line OutL Volume */

 3A Line OutR Mixer */

 3B Line OutR Control */

 3C Line OutR Volume */

 3D Jack Detect */

 3E Input Enable */

 3F Output Enable */

 40 Level Control */

 41 DSP Filter Enable */

 42 Bias Control */

 43 DAC Control */

 44 ADC Control */

 45 Device Shutdown */

 46 Equalizer Band 1 Coefficient B0 */

 47 Equalizer Band 1 Coefficient B0 */

 48 Equalizer Band 1 Coefficient B0 */

 49 Equalizer Band 1 Coefficient B1 */

 4A Equalizer Band 1 Coefficient B1 */

 4B Equalizer Band 1 Coefficient B1 */

 4C Equalizer Band 1 Coefficient B2 */

 4D Equalizer Band 1 Coefficient B2 */

 4E Equalizer Band 1 Coefficient B2 */

 4F Equalizer Band 1 Coefficient A1 */

 50 Equalizer Band 1 Coefficient A1 */

 51 Equalizer Band 1 Coefficient A1 */

 52 Equalizer Band 1 Coefficient A2 */

 53 Equalizer Band 1 Coefficient A2 */

 54 Equalizer Band 1 Coefficient A2 */

 55 Equalizer Band 2 Coefficient B0 */

 56 Equalizer Band 2 Coefficient B0 */

 57 Equalizer Band 2 Coefficient B0 */

 58 Equalizer Band 2 Coefficient B1 */

 59 Equalizer Band 2 Coefficient B1 */

 5A Equalizer Band 2 Coefficient B1 */

 5B Equalizer Band 2 Coefficient B2 */

 5C Equalizer Band 2 Coefficient B2 */

 5D Equalizer Band 2 Coefficient B2 */

 5E Equalizer Band 2 Coefficient A1 */

 5F Equalizer Band 2 Coefficient A1 */

 60 Equalizer Band 2 Coefficient A1 */

 61 Equalizer Band 2 Coefficient A2 */

 62 Equalizer Band 2 Coefficient A2 */

 63 Equalizer Band 2 Coefficient A2 */

 64 Equalizer Band 3 Coefficient B0 */

 65 Equalizer Band 3 Coefficient B0 */

 66 Equalizer Band 3 Coefficient B0 */

 67 Equalizer Band 3 Coefficient B1 */

 68 Equalizer Band 3 Coefficient B1 */

 69 Equalizer Band 3 Coefficient B1 */

 6A Equalizer Band 3 Coefficient B2 */

 6B Equalizer Band 3 Coefficient B2 */

 6C Equalizer Band 3 Coefficient B2 */

 6D Equalizer Band 3 Coefficient A1 */

 6E Equalizer Band 3 Coefficient A1 */

 6F Equalizer Band 3 Coefficient A1 */

 70 Equalizer Band 3 Coefficient A2 */

 71 Equalizer Band 3 Coefficient A2 */

 72 Equalizer Band 3 Coefficient A2 */

 73 Equalizer Band 4 Coefficient B0 */

 74 Equalizer Band 4 Coefficient B0 */

 75 Equalizer Band 4 Coefficient B0 */

 76 Equalizer Band 4 Coefficient B1 */

 77 Equalizer Band 4 Coefficient B1 */

 78 Equalizer Band 4 Coefficient B1 */

 79 Equalizer Band 4 Coefficient B2 */

 7A Equalizer Band 4 Coefficient B2 */

 7B Equalizer Band 4 Coefficient B2 */

 7C Equalizer Band 4 Coefficient A1 */

 7D Equalizer Band 4 Coefficient A1 */

 7E Equalizer Band 4 Coefficient A1 */

 7F Equalizer Band 4 Coefficient A2 */

 80 Equalizer Band 4 Coefficient A2 */

 81 Equalizer Band 4 Coefficient A2 */

 82 Equalizer Band 5 Coefficient B0 */

 83 Equalizer Band 5 Coefficient B0 */

 84 Equalizer Band 5 Coefficient B0 */

 85 Equalizer Band 5 Coefficient B1 */

 86 Equalizer Band 5 Coefficient B1 */

 87 Equalizer Band 5 Coefficient B1 */

 88 Equalizer Band 5 Coefficient B2 */

 89 Equalizer Band 5 Coefficient B2 */

 8A Equalizer Band 5 Coefficient B2 */

 8B Equalizer Band 5 Coefficient A1 */

 8C Equalizer Band 5 Coefficient A1 */

 8D Equalizer Band 5 Coefficient A1 */

 8E Equalizer Band 5 Coefficient A2 */

 8F Equalizer Band 5 Coefficient A2 */

 90 Equalizer Band 5 Coefficient A2 */

 91 Equalizer Band 6 Coefficient B0 */

 92 Equalizer Band 6 Coefficient B0 */

 93 Equalizer Band 6 Coefficient B0 */

 94 Equalizer Band 6 Coefficient B1 */

 95 Equalizer Band 6 Coefficient B1 */

 96 Equalizer Band 6 Coefficient B1 */

 97 Equalizer Band 6 Coefficient B2 */

 98 Equalizer Band 6 Coefficient B2 */

 99 Equalizer Band 6 Coefficient B2 */

 9A Equalizer Band 6 Coefficient A1 */

 9B Equalizer Band 6 Coefficient A1 */

 9C Equalizer Band 6 Coefficient A1 */

 9D Equalizer Band 6 Coefficient A2 */

 9E Equalizer Band 6 Coefficient A2 */

 9F Equalizer Band 6 Coefficient A2 */

 A0 Equalizer Band 7 Coefficient B0 */

 A1 Equalizer Band 7 Coefficient B0 */

 A2 Equalizer Band 7 Coefficient B0 */

 A3 Equalizer Band 7 Coefficient B1 */

 A4 Equalizer Band 7 Coefficient B1 */

 A5 Equalizer Band 7 Coefficient B1 */

 A6 Equalizer Band 7 Coefficient B2 */

 A7 Equalizer Band 7 Coefficient B2 */

 A8 Equalizer Band 7 Coefficient B2 */

 A9 Equalizer Band 7 Coefficient A1 */

 AA Equalizer Band 7 Coefficient A1 */

 AB Equalizer Band 7 Coefficient A1 */

 AC Equalizer Band 7 Coefficient A2 */

 AD Equalizer Band 7 Coefficient A2 */

 AE Equalizer Band 7 Coefficient A2 */

 AF ADC Biquad Coefficient B0 */

 B0 ADC Biquad Coefficient B0 */

 B1 ADC Biquad Coefficient B0 */

 B2 ADC Biquad Coefficient B1 */

 B3 ADC Biquad Coefficient B1 */

 B4 ADC Biquad Coefficient B1 */

 B5 ADC Biquad Coefficient B2 */

 B6 ADC Biquad Coefficient B2 */

 B7 ADC Biquad Coefficient B2 */

 B8 ADC Biquad Coefficient A1 */

 B9 ADC Biquad Coefficient A1 */

 BA ADC Biquad Coefficient A1 */

 BB ADC Biquad Coefficient A2 */

 BC ADC Biquad Coefficient A2 */

 BD ADC Biquad Coefficient A2 */

 BE Digital Mic 3 Volume */

 BF Digital Mic 4 Volume */

 C0 Digital Mic 34 Biquad Pre Atten */

 C1 Record TDM Slot */

 C2 Sample Rate */

 C3 Digital Mic 34 Biquad Coefficient C3 */

 C4 Digital Mic 34 Biquad Coefficient C4 */

 C5 Digital Mic 34 Biquad Coefficient C5 */

 C6 Digital Mic 34 Biquad Coefficient C6 */

 C7 Digital Mic 34 Biquad Coefficient C7 */

 C8 Digital Mic 34 Biquad Coefficient C8 */

 C9 Digital Mic 34 Biquad Coefficient C9 */

 CA Digital Mic 34 Biquad Coefficient CA */

 CB Digital Mic 34 Biquad Coefficient CB */

 CC Digital Mic 34 Biquad Coefficient CC */

 CD Digital Mic 34 Biquad Coefficient CD */

 CE Digital Mic 34 Biquad Coefficient CE */

 CF Digital Mic 34 Biquad Coefficient CF */

 D0 Digital Mic 34 Biquad Coefficient D0 */

 D1 Digital Mic 34 Biquad Coefficient D1 */

 Reset the codec by writing to this write-only reset register */

 If on, return the volume */

 If off, return last stored value */

 Setting a volume is only valid if it is already On */

 Write what was already there */

 Update for volatile */

 Update for volatile */

 If turning on, set to most recently selected volume */

 If turning off, turn off */

 LINEA mixer switch */

 LINEB mixer switch */

 Left ADC mixer switch */

 Right ADC mixer switch */

 Left speaker mixer switch */

 Right speaker mixer switch */

 Left headphone mixer switch */

 Right headphone mixer switch */

 Left receiver mixer switch */

 Right receiver mixer switch */

/*

 * This is a mux as it selects the HP output, but to DAPM it is a Mixer enable

/*

 * Note: Sysclk and misc power supplies are taken care of by SHDN

 MIC1 input mux */

 MIC2 input mux */

 Left ADC input mixer */

 Right ADC input mixer */

 Line A input mixer */

 Line B input mixer */

 Inputs */

 Left headphone output mixer */

 Right headphone output mixer */

 Left speaker output mixer */

 Right speaker output mixer */

 Left Receiver output mixer */

 Right Receiver output mixer */

	/*

	 * Disable this for lowest power if bypassing

	 * the DAC with an analog signal

	/*

	 * Disable this for lowest power if bypassing

	 * the DAC with an analog signal

 DMIC inputs */

 Skip configuration when operating as slave */

 Check for supported PCLK to LRCLK ratios */

 Check for user calculated MI and NI ratios */

	/*

	 * Calculate based on MI = 65536 (not as good as either method above)

	/*

	 * Configure NI when operating as master

	 * Note: There is a small, but significant audio quality improvement

	 * by calculating ni and mi.

 Set to slave mode PLL - MAS mode off */

 Set to master mode */

 TDM */

 TDM */

 Few TDM slots, or No TDM */

 Not supported mode */

		/*

		 * This accommodates an inverted logic in the MAX98090 chip

		 * for Bit Clock Invert (BCI). The inverted logic is only

		 * seen for the case of TDM mode. The remaining cases have

		 * normal logic.

 SLOTL SLOTR SLOTDLY */

 FSW TDM */

	/*

	 * Normally advisable to set TDM first, but this permits either order

		/*

		 * SND_SOC_BIAS_PREPARE is called while preparing for a

		 * transition to ON or away from ON. If current bias_level

		 * is SND_SOC_BIAS_ON, then it is preparing for a transition

		 * away from ON. Disable the clock in that case, otherwise

		 * enable it.

 Set internal pull-up to lowest power mode */

 One each for 8, 16, 32, 44.1, 48, and 96 kHz */

 One for each dmic divisor. */

 One for each pclk freq. */

 Remove 24-bit format support if it is not in right justified mode. */

 Update filter mode */

 Update sample rate mode */

/*

 * PLL / Sysclk

 Requested clock frequency is already setup */

	/* Setup clocks for slave mode, and using the PLL

	 * PSCLK = 0x01 (when master clk is 10MHz to 20MHz)

	 *		 0x02 (when master clk is 20MHz to 40MHz)..

	 *		 0x03 (when master clk is 40MHz to 60MHz)..

	/*

	 * Clear status register in order to clear possibly already occurred

	 * PLL unlock. If PLL hasn't still locked, the status will be set

	 * again and PLL unlock interrupt will occur.

	 * Note this will clear all status bits

	/*

	 * Queue jack work in case jack state has just changed but handler

	 * hasn't run yet

 Enable PLL unlock interrupt */

 Disable PLL unlock interrupt */

	/*

	 * As the datasheet suggested, the maximum PLL lock time should be

	 * 7 msec.  The workaround resets the codec softly by toggling SHDN

	 * off and on if PLL failed to lock for 10 msec.  Notably, there is

	 * no suggested hold time for SHDN off.

 Toggle shutdown OFF then ON */

 Give PLL time to lock */

 Check lock status */

 Read a second time */

 Strong pull up allows mic detection */

 Weak pull up allows only insertion detection */

				/*

				 * max98090_headset_button_event(codec)

				 * could be defined, then called here.

 Line is reported as Headphone */

 Nokia Headset is reported as Headphone */

 Mono Headphone is reported as Headphone */

 Treat interrupt before codec is initialized as spurious */

/**

 * max98090_mic_detect - Enable microphone detection via the MAX98090 IRQ

 *

 * @component:  MAX98090 component

 * @jack:   jack to report detection events on

 *

 * Enable microphone detection via IRQ on the MAX98090.  If GPIOs are

 * being used to bring out signals to the processor then only platform

 * data configuration is needed for MAX98090 and processor GPIOs should

 * be configured using snd_soc_jack_add_gpios() instead.

 *

 * If no jack is supplied detection will be disabled.

 Send an initial empty report */

 Reset the codec, the DSP core, and disable all interrupts */

 Initialize private data */

 Enable jack detection */

	/*

	 * Clear any old interrupts.

	 * An old interrupt ocurring prior to installing the ISR

	 * can keep a new interrupt from generating a trigger.

 High Performance is default */

 Turn on VCM bandgap reference */

	/*

	 * Enable volume smoothing, disable zero cross.  This will cause

	 * a quick 40ms ramp to mute on shutdown.

 clear IRQ status */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for ADAU1372 codec

 *

 * Copyright 2016 Analog Devices Inc.

 *  Author: Lars-Peter Clausen <lars@metafoo.de>

 SPDX-License-Identifier: GPL-2.0-only



 rt5682-sdw.c  --  RT5682 ALSA SoC audio component driver



 Copyright 2019 Realtek Semiconductor Corp.

 Author: Oder Chiou <oder_chiou@realtek.com>



 Use tx_mask or rx_mask to configure stream tag and set dma_data */

 SoundWire specific configuration */

	/*

	 * Mark hw_init to false

	 * HW init will be performed when device reports present

	/*

	 * PM runtime is only enabled when a Slave reports as Attached

 set autosuspend parameters */

 update count of parent 'active' children */

 make sure the device does not suspend immediately */

 volatile registers */

 Soundwire */

 Mark Slave initialization complete */

 Update the status */

	/*

	 * Perform initialization only if slave status is present and

	 * hw_init flag is false

 perform I/O transfers required for Slave initialization */

 first we need to allocate memory for set bits in port lists */

 BITMAP: 00000100 */

 BITMAP: 00000010 */

 do this again for sink now */

 set the timeout values */

 wake-up event */

 Bus clock frequency */

 Regmap Initialization */

	/*

	 * prevent new interrupts from being handled after the

	 * deferred work completes and before the parent disables

	 * interrupts on the link

 log but don't prevent suspend from happening */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ALSA SoC CQ0093 Voice Codec Driver for DaVinci platforms

 *

 * Copyright (C) 2010 Texas Instruments, Inc

 *

 * Author: Miguel Aguilar <miguel.aguilar@ridgerun.com>

 force all power off */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm9705.c  --  ALSA Soc WM9705 codec support

 *

 * Copyright 2008 Ian Molton <spyro@f2s.com>

 Headphone Mixer */

 Mic source */

 Capture source */

 DAPM widgets */

/* Audio map

 * WM9705 has no switches to disable the route from the inputs to the HP mixer

 * so in order to prevent active inputs from forcing the audio outputs to be

 * constantly enabled, we use the mutes on those inputs to simulate such

 * controls.

 HP mixer */

 mono mixer */

 outputs */

 inputs */

 Left capture selector */

 Right capture source */

 ADC's */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ADAU1977/ADAU1978/ADAU1979 driver

 *

 * Copyright 2014 Analog Devices Inc.

 *  Author: Lars-Peter Clausen <lars@metafoo.de>

	/*

	 * To get the device into SPI mode CLATCH has to be pulled low three

	 * times.  Do this by issuing three dummy reads.

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2019, Linaro Limited

 Fractional Rates */

/* slave port water mark level

 *   (0: 6bytes, 1: 9bytes, 2: 12 bytes, 3: 15 bytes)

 Only valid for 9.6 MHz mclk */

 Only valid for 12.288 MHz mclk */

 Feature masks to distinguish codec version */

/* As fine version info cannot be retrieved before wcd probe.

 * Define three coarse versions for possible future use before wcd probe.

 Z value defined in milliohm */

 Z floating defined in ohms */

 Z value compared in milliOhm */

 LO3 not avalible in Tavil */

INT7 WSA Speakers via soundwire */

INT8 WSA Speakers via soundwire */

 16 */

 17 */

 Codec supports 2 IIR filters */

 Each IIR has 5 Filter Stages */

 HPH_L */

 HPH_R */

 LO1_DIFF */

 LO2_DIFF */

 LO3_SE - not used in Tavil */

 LO4_SE - not used in Tavil */

 SWR SPK CH1 */

 SWR SPK CH2 */

 mbhc module */

 Cutoff frequency for high pass filter */

	/*

	 * 1ms delay is required after pre-charge is enabled

	 * as per HW requirement

	/*

	 * In data clock contrl register is changed

	 * to CLK_SYS_MCLK_PRG

	/*

	 * 10us sleep is required after clock is enabled

	 * as per HW requirement

 Don't disable clock if soundwire using it.*/

	/*

	 * 5ms sleep required after enabling efuse control

	 * before checking the status.

		/*

		 * Loop through all interpolator MUX inputs and find out

		 * to which interpolator input, the slim rx port

		 * is connected

 Interpolators 5 and 6 are not aviliable in Tavil */

 rate is in Hz */

				/*

				 * Ear and speaker primary path does not support

				 * native sample rates

 Interpolators 5 and 6 are not aviliable in Tavil */

				/*

				 * Ear mix path supports only 48, 96, 192,

				 * 384KHz only

 Find the SB TX MUX input - which decimator is connected */

 Configure slave interface device */

 write to interface device */

 configure the slave port for water mark and enable*/

 ports 8,9 */

 configure the slave port for water mark and enable*/

 convert it to milli volts */

 set SPKR rate to FS_2P4_3P072 */

 Take DMICs out of reset */

 Default pull up current to 2uA */

 min micbias voltage is 1V and maximum is 2.85V */

	/*

	 * If requested micbias voltage is same as current micbias

	 * voltage, then just return. Otherwise, adjust voltage as

	 * per requested value. If micbias is already enabled, then

	 * to avoid slow micbias ramp-up or down enable pull-up

	 * momentarily, change the micbias value and then re-enable

	 * micbias.

		/*

		 * Add 2ms delay as per HW requirement after enabling

		 * micbias

	/*

	 * If device tree micbias level is already above the minimum

	 * voltage needed to detect threshold microphone, then do

	 * not change the micbias, just return.

 If ramp is not complete, give additional 5ms */

 Start impedance measurement for HPH_L */

 Start impedance measurement for HPH_R */

 < 32ohm */

 32ohm < Z < 400ohm */

 400ohm < Z < 1200ohm */

 >1200ohm */

 For NO-jack, disable L_DET_EN before Z-det measurements */

 Turn off 100k pull down on HPHL */

 First get impedance on Left */

 Second ramp for left ch */

 Start of right impedance ramp and calculation */

 Second ramp for right ch */

 Mono/stereo detection */

 Parallel of left Z and 9 ohm pull down resistor */

 Turn on 100k pull down on HPHL */

 For NO-jack, re-enable L_DET_EN after Z-det measurements */

 Class-H Init*/

 Default HPH Mode to Class-H Low HiFi */

 Address does not automatically update if reading */

 Mask bits top 2 bits since they are reserved */

 Mask top 2 bits, 7-8 are reserved */

 Mask top bit it is reserved */

 Updates addr automatically for each B2 write */

 Any specific register configuration for compander */

 Set Gain Source Select based on compander enable/disable */

 Set Look Ahead Delay */

 ADC: 0, DMIC: 1 */

 only add to the list if value not set */

 Gain Controls */

 -84dB min - 40dB max */

 EAR does not have compander */

 Enable Compander Clock */

 Clk enable */

 Clk Disable */

 Reset enable and disable */

 Reset rate to 48K*/

 Clk enable */

 B1 GAIN */

 B2 GAIN */

 B3 GAIN */

 B4 GAIN */

 B5 GAIN */

 Disable AutoChop timer during power up */

 Read DEM INP Select */

 Ripple freq control enable */

 Disable AutoChop timer during power up */

 1000us required as per HW requirement */

 Ripple freq control disable */

 Ripple freq control enable */

 Disable AutoChop timer during power up */

 1000us required as per HW requirement */

 Ripple freq control disable */

		/*

		 * 7ms sleep is required after PA is enabled as per

		 * HW requirement. If compander is disabled, then

		 * 20ms delay is needed.

 Remove Mute on primary path */

 Enable GM3 boost */

 Enable AutoChop timer at the end of power up */

 Remove mix path mute */

 Enable DSD Mute before PA disable */

		/*

		 * 5ms sleep is required after PA disable. If compander is

		 * disabled, then 20ms delay is needed after PA disable.

		/*

		 * 7ms sleep is required after PA is enabled as per

		 * HW requirement. If compander is disabled, then

		 * 20ms delay is needed.

 Remove mute */

 Enable GM3 boost */

 Enable AutoChop timer at the end of power up */

 Remove mix path mute if it is enabled */

		/*

		 * 5ms sleep is required after PA disable. If compander is

		 * disabled, then 20ms delay is needed after PA disable.

 Default value to return in case of error */

			/*

			 * Minimum 1 clk cycle delay is required as per

			 * HW spec.

 apply gain after decimator is enabled */

				/*

				 * Minimum 1 clk cycle delay is required as per

				 * HW spec.

 1 msec delay as per HW requirement */

 Analog Outputs */

 TX */

 Digital Mic Inputs */

 RX0-RX7 */

 RX0 Ear out */

 RX1 Headphone left */

 RX2 Headphone right */

 RX3 HIFi LineOut1 */

 RX4 HIFi LineOut2 */

 RX7 Speaker Left Out PA */

 RX8 Speaker Right Out PA */

 Tx */

 set default rate 9P6MHz */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * lm49453.c  -  LM49453 ALSA Soc Audio driver

 *

 * Copyright (c) 2012 Texas Instruments, Inc

 *

 * Initially based on sound/soc/codecs/wm8350.c

 codec private data */

 capture path controls */

 MUX Controls */

 TLV Declarations */

 Sidetone supports mono only */

 mic1 and mic2 supports mono only */

 Capture path filter enable */

 DAPM widgets */

 All end points HP,EP, LS, Lineout and Haptic */

 playback path driver enables */

 DAC */

 ADC */

 AIF */

 Port1 TX controls */

 Port2 TX controls */

 Sidetone Mixer */

 DAC MIXERS */

 Capture Mixer */

 Port SDI mapping */

 HP mapping */

 Port 2 */

 EP map */

 Speaker map */

 Port 2 */

 Port 2 */

 Haptic map */

 Port 2 */

 Port 2 */

 Lineout map */

 Port 2 */

 Port 2 */

 TX map */

 Port1 mappings */

 AUX connections */

 ADC connection */

 Sidetone map */

 Setting DAC clock dividers based on substream sample rate. */

 pll clk slection */

 Formates supported by LM49453 driver. */

 LM49453 dai structure. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * TAS5086 ASoC codec driver

 *

 * Copyright (c) 2013 Daniel Mack <zonque@gmail.com>

 *

 * TODO:

 *  - implement DAPM and input muxing

 *  - implement modulation limit

 *  - implement non-default PWM start

 *

 * Note that this chip has a very unusual register layout, specifically

 * because the registers are of unequal size, and multi-byte registers

 * require bulk writes to take effect. Regmap does not support that kind

 * of devices.

 *

 * Currently, the driver does not touch any of the registers >= 0x20, so

 * it doesn't matter because the entire map can be accessed as 8-bit

 * array. In case more features will be added in the future

 * that require access to higher registers, the entire regmap H/W I/O

 * routines have to be open-coded.

/*

 * TAS5086 registers

 Clock control register  */

 Device ID register */

 Error status register */

 System control register 1 */

 Serial data interface register  */

 System control register 2 */

 Soft mute register */

 Master volume  */

 Channel 1-6 volume */

 Volume control register */

 Modulation limit register */

 PWM start register */

 Surround register */

 Split cap charge period register */

 Oscillator trim register */

/*

 * Default TAS5086 power-up configuration

 Current sample rate for de-emphasis control */

 GPIO driving Reset pin, if any */

 The TAS5086 can only be slave to all clocks */

 we need to refer to the data format from hw_params() */

 Look up the sample rate and refer to the offset in the list */

 MCLK / Fs ratio */

	/*

	 * The chip has a very unituitive register mapping and muxes information

	 * about data format and sample depth into the same register, but not on

	 * a logical bit-boundary. Hence, we have to refer to the format passed

	 * in the set_dai_fmt() callback and set up everything from here.

	 *

	 * First, determine the 'base' value, using the format ...

 ... then add the offset for the sample bit depth. */

 clock is considered valid now */

 Reset codec - minimum assertion time is 400ns */

 Codec needs ~15ms to wake up */

 charge period values in microseconds */

	/*

	 * If any of the channels is configured to start in Mid-Z mode,

	 * configure 'part 1' of the PWM starts to use Mid-Z, and tell

	 * all configured mid-z channels to start under 'part 1'.

 lookup and set split-capacitor charge period */

 enable factory trim */

 start all channels */

 mute all channels for now */

 TAS5086 controls */

 Input mux controls */

 Output mux controls */

 SDIN inputs -> channel muxes */

 Channel muxes -> PWM muxes */

 The PWM muxes are directly connected to the PWM outputs */

 Shut down all channels */

 CONFIG_PM */

 hardware default is 1300 ms */

 set master volume to 0 dB */

 Set codec to the reset state */

 The TAS5086 always returns 0x03 in its TAS5086_DEV_ID register */

	/*

	 * The chip has been identified, so we can turn off the power

	 * again until the dai link is set up.

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2018-2020, The Linux Foundation. All rights reserved.

 Fractional Rates */

 Convert from vout ctl to micbias voltage in mV */

 Z value defined in milliohm */

 Z floating defined in ohms */

 Z value compared in milliOhm */

 INTR_CTRL_INT_MASK_0 */

 INTR_CTRL_INT_MASK_1 */

 INTR_CTRL_INT_MASK_2 */

 mbhc module */

 1 msec delay as per HW requirement */

 1 msec delay as per HW requirement */

 10 msec delay as per HW requirement */

 Set Noise Filter Resistor value */

 5msec compander delay as per HW requirement */

 5msec compander delay as per HW requirement */

 5 msec delay as per HW requirement */

 100 usec delay as per HW requirement */

		/*

		 * 7ms sleep is required if compander is enabled as per

		 * HW requirement. If compander is disabled, then

		 * 20ms delay is required.

		/*

		 * 7ms sleep is required if compander is enabled as per

		 * HW requirement. If compander is disabled, then

		 * 20ms delay is required.

		/*

		 * 7ms sleep is required if compander is enabled as per

		 * HW requirement. If compander is disabled, then

		 * 20ms delay is required.

 100 usec delay as per HW requirement */

		/*

		 * 7ms sleep is required if compander is enabled as per

		 * HW requirement. If compander is disabled, then

		 * 20ms delay is required.

		/*

		 * 7ms sleep is required if compander is enabled as per

		 * HW requirement. If compander is disabled, then

		 * 20ms delay is required.

		/*

		 * 7ms sleep is required if compander is enabled as per

		 * HW requirement. If compander is disabled, then

		 * 20ms delay is required.

 1 msec delay as per HW requirement */

 1 msec delay as per HW requirement */

		/*

		 * Enable watchdog interrupt for HPHL or AUX

		 * depending on mux value

 6 msec delay as per HW requirement */

 7 msec delay as per HW requirement */

 250us sleep as per HW requirement */

 Setting DMIC clock rate to 2.4MHz */

 enable clock scaling */

 Copy clk settings to active bank */

 1 msec delay as per HW requirement */

 1 msec delay as per HW requirement */

 MBHC related */

 Default pull up current to 2uA */

 min micbias voltage is 1V and maximum is 2.85V */

	/*

	 * If requested micbias voltage is same as current micbias

	 * voltage, then just return. Otherwise, adjust voltage as

	 * per requested value. If micbias is already enabled, then

	 * to avoid slow micbias ramp-up or down enable pull-up

	 * momentarily, change the micbias value and then re-enable

	 * micbias.

		/*

		 * Add 2ms delay as per HW requirement after enabling

		 * micbias

	/*

	 * If device tree micbias level is already above the minimum

	 * voltage needed to detect threshold microphone, then do

	 * not change the micbias, just return.

 If ramp is not complete, give additional 5ms */

 Start impedance measurement for HPH_L */

 Start impedance measurement for HPH_R */

 < 32ohm */

 32ohm < Z < 400ohm */

 400ohm < Z < 1200ohm */

 >1200ohm */

 For NO-jack, disable L_DET_EN before Z-det measurements */

 Turn off 100k pull down on HPHL */

	/* Disable surge protection before impedance detection.

	 * This is done to give correct value for high impedance.

 1ms delay needed after disable surge protection */

 First get impedance on Left */

 Second ramp for left ch */

 Start of right impedance ramp and calculation */

 Second ramp for right ch */

 Mono/stereo detection */

 Parallel of left Z and 9 ohm pull down resistor */

 Enable surge protection again after impedance detection */

 Turn on 100k pull down on HPHL */

 For NO-jack, re-enable L_DET_EN after Z-det measurements */

 Do not enable moisture detection if jack type is NC */

 Do not enable moisture detection if jack type is NC */

	/*

	 * If moisture_en is already enabled, then skip to plug type

	 * detection.

 Read moisture comparator status */

 END MBHC */

input widgets*/

tx widgets*/

tx mixers*/

 micbias widgets*/

 micbias pull up widgets*/

output widgets tx*/

rx widgets*/

 rx mixer widgets*/

output widgets rx*/

 set micbias voltage */

 Set all interrupts as edge triggered */

 Request for watchdog interrupt */

 Disable watchdog interrupt for HPH and AUX */

 20us sleep required after pulling the reset gpio to LOW */

 20us sleep required after pulling the reset gpio to HIGH */

	/* As TX is main CSR reg interface, which should not be suspended first.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Shared helper functions for devices from the ADAU family

 *

 * Copyright 2011-2016 Analog Devices Inc.

 * Author: Lars-Peter Clausen <lars@metafoo.de>

 Fractional mode */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * nau8810.c  --  NAU8810 ALSA Soc Audio driver

 *

 * Copyright 2016 Nuvoton Technology Corp.

 *

 * Author: David Lin <ctlin0@nuvoton.com>

 *

 * Based on WM8974.c

/* The EQ parameters get function is to get the 5 band equalizer control.

 * The regmap raw read can't work here because regmap doesn't provide

 * value format for value width of 9 bits. Therefore, the driver reads data

 * from cache and makes value format according to the endianness of

 * bytes type control element.

		/* conversion of 16-bit integers between native CPU format

		 * and big endian format

/* The EQ parameters put function is to make configuration of 5 band equalizer

 * control. These configuration includes central frequency, equalizer gain,

 * cut-off frequency, bandwidth control, and equalizer path.

 * The regmap raw write can't work here because regmap doesn't provide

 * register and value format for register with address 7 bits and value 9 bits.

 * Therefore, the driver makes value format according to the endianness of

 * bytes type control element and writes data to codec.

		/* conversion of 16-bit integers between native CPU format

		 * and big endian format

 Speaker Output Mixer */

 Mono Output Mixer */

 PGA Mute */

 Input PGA */

 Loopback Switch */

 Mono output mixer */

 Speaker output mixer */

 Outputs */

 Input Boost Stage */

 Input PGA */

 Digital Looptack */

	/* Calculate the PLL 4-bit integer input and the PLL 24-bit fractional

	 * input; round up the 24+4bit.

	/* Configure the master clock prescaler div to make system

	 * clock to approximate the internal master clock (IMCLK);

	 * and large or equal to IMCLK.

 master clock from MCLK and disable PLL */

 Select BCLK configuration if the codec as master. */

 get the bclk and fs ratio */

	/* If the master clock is from MCLK, provide the runtime FS for driver

	 * to get the master clock prescaler configuration.

 Only 1 channel of data */

 Only 1 channel of data */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for the PCM5102A codec

 *

 * Author:	Florian Meier <florian.meier@koalo.de>

 *		Copyright 2013

 SPDX-License-Identifier: GPL-2.0



 rt1015.c  --  RT1015 ALSA SoC audio amplifier driver



 Copyright 2019 Realtek Semiconductor Corp.



 Author: Jack Yu <jack.yu@realtek.com>





 Rx slot configuration */

	/* This is an assumption that the system sends stereo audio to the amplifier typically.

	 * And the stereo audio is placed in slot 0/2/4/6 as the starting slot.

	 * The users could select the channel from L/R/L+R by "Mono LR Select" control.

 Tx slot configuration */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ADAV801 audio driver

 *

 * Copyright 2014 Analog Devices Inc.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * wm8991.c  --  WM8991 ALSA Soc Audio driver

 *

 * Copyright 2007-2010 Wolfson Microelectronics PLC.

 * Author: Graeme Gregory

 *         Graeme.Gregory@wolfsonmicro.com

 R1  - Power Management (1) */

 R2  - Power Management (2) */

 R3  - Power Management (3) */

 R4  - Audio Interface (1) */

 R5  - Audio Interface (2) */

 R6  - Clocking (1) */

 R7  - Clocking (2) */

 R8  - Audio Interface (3) */

 R9  - Audio Interface (4) */

 R10 - DAC CTRL */

 R11 - Left DAC Digital Volume */

 R12 - Right DAC Digital Volume */

 R13 - Digital Side Tone */

 R14 - ADC CTRL */

 R15 - Left ADC Digital Volume */

 R16 - Right ADC Digital Volume */

 R18 - GPIO CTRL 1 */

 R19 - GPIO1 & GPIO2 */

 R20 - GPIO3 & GPIO4 */

 R21 - GPIO5 & GPIO6 */

 R22 - GPIOCTRL 2 */

 R23 - GPIO_POL */

 R24 - Left Line Input 1&2 Volume */

 R25 - Left Line Input 3&4 Volume */

 R26 - Right Line Input 1&2 Volume */

 R27 - Right Line Input 3&4 Volume */

 R28 - Left Output Volume */

 R29 - Right Output Volume */

 R30 - Line Outputs Volume */

 R31 - Out3/4 Volume */

 R32 - Left OPGA Volume */

 R33 - Right OPGA Volume */

 R34 - Speaker Volume */

 R35 - ClassD1 */

 R37 - ClassD3 */

 R39 - Input Mixer1 */

 R40 - Input Mixer2 */

 R41 - Input Mixer3 */

 R42 - Input Mixer4 */

 R43 - Input Mixer5 */

 R44 - Input Mixer6 */

 R45 - Output Mixer1 */

 R46 - Output Mixer2 */

 R47 - Output Mixer3 */

 R48 - Output Mixer4 */

 R49 - Output Mixer5 */

 R50 - Output Mixer6 */

 R51 - Out3/4 Mixer */

 R52 - Line Mixer1 */

 R53 - Line Mixer2 */

 R54 - Speaker Mixer */

 R55 - Additional Control */

 R56 - AntiPOP1 */

 R57 - AntiPOP2 */

 R58 - MICBIAS */

 R60 - PLL1 */

 R61 - PLL2 */

 R62 - PLL3 */

 now hit the volume update bits (always bit 8) */

 INMIXL */

 INMIXR */

 LOMIX */

 ROMIX */

 LOUT */

 ROUT */

 LOPGA */

 ROPGA */

/*

 * _DAPM_ Controls

 INMIX dB values */

 Left In PGA Connections */

 Right In PGA Connections */

 INMIXL */

 INMIXR */

 AINLMUX */

 DIFFINL */

 AINRMUX */

 LOMIX */

 ROMIX */

 LONMIX */

 LOPMIX */

 RONMIX */

 ROPMIX */

 OUT3MIX */

 OUT4MIX */

 SPKMIX */

 Input Side */

 Input Lines */

 DACs */

 Input PGAs */

 INMIXL */

 AINLMUX */

 INMIXR */

 AINRMUX */

 Output Side */

 DACs */

 LOMIX */

 LONMIX */

 LOPMIX */

 OUT3MIX */

 SPKMIX */

 OUT4MIX */

 ROPMIX */

 RONMIX */

 ROMIX */

 LOUT PGA */

 ROUT PGA */

 LOPGA */

 ROPGA */

 MICBIAS */

 Make DACs turn on when playing even if not mixed into any outputs */

 Make ADCs turn on when recording even if not mixed from any inputs */

 Input Side */

 LIN12 PGA */

 LIN34 PGA */

 INMIXL */

 AINLMUX */

 ADC */

 RIN12 PGA */

 RIN34 PGA */

 INMIXL */

 AINRMUX */

 ADC */

 LOMIX */

 ROMIX */

 SPKMIX */

 LONMIX */

 LOPMIX */

 OUT3MIX */

 OUT4MIX */

 RONMIX */

 ROPMIX */

 Out Mixer PGAs */

 Output Pins */

 PLL divisors */

/* The size in bits of the pll divide multiplied by 10

 Check if we need to round */

 Move down to proper range now rounding is done */

 Turn on PLL */

 sysclk comes from PLL */

 set up N , fractional mode and pre-divisor if necessary */

 Turn on PLL */

/*

 * Set's ADC and Voice DAC format.

 set master/slave audio interface */

 interface format */

/*

 * Set PCM DAI bit size and sample rate.

 bit size */

 VMID=2*50k */

 Enable all output discharge bits */

 Enable POBCTRL, SOFT_ST, VMIDTOG and BUFDCOPEN */

 Delay to allow output caps to discharge */

 Disable VMIDTOG */

 disable all output discharge bits */

 Enable outputs */

 Enable VMID at 2x50k */

 Enable VREF */

 Enable BUFIOEN */

 Disable outputs */

 disable POBCTRL, SOFT_ST and BUFDCOPEN */

 VMID=2*250k */

 Enable POBCTRL and SOFT_ST */

 Enable POBCTRL, SOFT_ST and BUFDCOPEN */

 mute DAC */

 Enable any disabled outputs */

 Disable VMID */

 Enable all output discharge bits */

 Disable VREF */

 disable POBCTRL, SOFT_ST and BUFDCOPEN */

/*

 * The WM8991 supports 2 different and mutually exclusive DAI

 * configurations.

 *

 * 1. ADC/DAC on Primary Interface

 * 2. ADC on Primary Interface/DAC on secondary

 ADC/DAC on primary */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PCM1681 ASoC codec driver

 *

 * Copyright (c) StreamUnlimited GmbH 2013

 *	Marek Belisko <marek.belisko@streamunlimited.com>

 Attenuation level */

 Soft mute control register */

 DAC operation control */

 Audio interface data format */

 De-emphasis control */

 Zero detect status reg */

 Current deemphasis status */

 Current rate for deemphasis control */

 enable/disable deemphasis functionality */

 The PCM1681 can only be slave to all clocks */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ak4641.c  --  AK4641 ALSA Soc Audio driver

 *

 * Copyright (C) 2008 Harald Welte <laforge@gnufiish.org>

 * Copyright (C) 2011 Dmitry Artamonow <mad_soft@inbox.ru>

 *

 * Based on ak4535.c by Richard Purdie

 AK4641 register space */

 codec private data */

/*

 * ak4641 register cache

 if deemphasis is on, select the nearest available rate */

 Mono 1 Mixer */

 Stereo Mixer */

 Input Mixer */

 Mic mux */

 Input mux */

 mono 2 switch */

 ak4641 dapm widgets */

 Stereo Mixer */

 Mono 1 Mixer */

 Mic */

 Input Mux */

 Line Out */

 Mono 1 Out */

 Mono 2 Out */

 Aux In */

 ADC */

 set fs */

 Update de-emphasis filter for the new rate */

 interface format */

 MSB after FRM */

 MSB during FRM */

 interface format */

 unmute */

 mute */

 rates are controlled by BT chip */

 > 150 ns */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cs42l56.c -- CS42L56 ALSA SoC audio driver

 *

 * Copyright 2014 CirrusLogic, Inc.

 *

 * Author: Brian Austin <brian.austin@cirrus.com>

 r03	- Power Ctl 1 */

 r04	- Power Ctl 2 */

 ro5	- Clocking Ctl 1 */

 r06	- Clocking Ctl 2 */

 r07	- Serial Format */

 r08	- Class H Ctl */

 r09	- Misc Ctl */

 r0a	- INT Status */

 r0b	- Playback Ctl */

 r0c	- DSP Mute Ctl */

 r0d	- ADCA Mixer Volume */

 r0e	- ADCB Mixer Volume */

 r0f	- PCMA Mixer Volume */

 r10	- PCMB Mixer Volume */

 r11	- Analog Input Advisory Volume */

 r12	- Digital Input Advisory Volume */

 r13	- Master A Volume */

 r14	- Master B Volume */

 r15	- Beep Freq / On Time */

 r16	- Beep Volume / Off Time */

 r17	- Beep Tone Ctl */

 r18	- Tone Ctl */

 r19	- Channel Mixer & Swap */

 r1a	- AIN Ref Config / ADC Mux */

 r1b	- High-Pass Filter Ctl */

 r1c	- Misc ADC Ctl */

 r1d	- Gain & Bias Ctl */

 r1e	- PGAA Mux & Volume */

 r1f	- PGAB Mux & Volume */

 r20	- ADCA Attenuator */

 r21	- ADCB Attenuator */

 r22	- ALC Enable & Attack Rate */

 r23	- ALC Release Rate */

 r24	- ALC Threshold */

 r25	- Noise Gate Ctl */

 r26	- ALC, Limiter, SFT, ZeroCross */

 r27	- Analog Mute, LO & HP Mux */

 r28	- HP A Volume */

 r29	- HP B Volume */

 r2a	- LINEOUT A Volume */

 r2b	- LINEOUT B Volume */

 r2c	- Limit Threshold Ctl */

 r2d	- Limiter Ctl & Release Rate */

 r2e	- Limiter Attack Rate */

 8k */

 11.025k */

 11.0294k */

 12k */

 16k */

 22.050k */

 22.0588k */

 24k */

 32k */

 44.118k */

 44.1k */

 48k */

 interface format */

 sclk inversion */

 Hit the DSP Mixer first */

 Mute ADC's */

 HP And LO */

/* For usability define a way of injecting beep events for the device -

 * many systems will not have a keyboard.

 Kick the beep from a workqueue */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rt5651.c  --  RT5651 ALSA SoC audio codec driver

 *

 * Copyright 2014 Realtek Semiconductor Corp.

 * Author: Bard Liao <bardliao@realtek.com>

 {0, +20, +24, +30, +35, +40, +44, +50, +52} dB */

 Interface data select */

 Headphone Output Volume */

 OUTPUT Control */

 DAC Digital Volume */

 IN1/IN2/IN3 Control */

 INL/INR Volume Control */

 ADC Digital Volume Control */

 ADC Boost Volume Control */

 ASRC */

/**

 * set_dmic_clk - Set parameter of dmic.

 *

 * @w: DAPM widget.

 * @kcontrol: The kcontrol of this widget.

 * @event: Event id.

 *

 Digital Mixer */

 Analog Input Mixer */

 Analog Output Mixer */

 Stereo ADC source */

 Mono ADC source */

 DAC2 channel source */

 IF2_ADC channel source */

 PDM select */

 depop parameters */

 headphone amp power on */

 headphone unmute sequence */

 ASRC */

 micbias */

 Input Lines */

 Boost */

 Input Volume */

 REC Mixer */

 ADCs */

 ADC Mux */

 ADC Mixer */

 Digital Interface */

 Digital Interface Select */

 Audio Interface */

 Audio DSP */

 Output Side */

 DAC mixer before sound effect  */

 DAC2 channel Mux */

 DAC Mixer */

 DACs */

 OUT Mixer */

 Ouput Volume */

 HPO/LOUT/Mono Mixer */

 Output Lines */

 Do not touch the LDO voltage select bits on bias-off */

 Leave PLL1 and jack-detect power as is, all others off */

 OVCD is unreliable when used with RCCLK as sysclk-source */

 Jack detect and button-press timings */

 milli seconds */

 Aprox. 2 seconds worth of tries */

 milli seconds */

 milli seconds */

 assume something is wrong after this */

 Check the jack was not removed underneath us */

 Remember till after JACK_UNPLUG_TIME wait */

	/*

	 * The pins get temporarily shorted on jack unplug, so we poll for

	 * at least JACK_UNPLUG_TIME milli-seconds before reporting a press.

 Re-enable OVCD IRQ to detect next press */

 Stop polling */

	/*

	 * We get the insertion event before the jack is fully inserted at which

	 * point the second ring on a TRRS connector may short the 2nd ring and

	 * sleeve contacts, also the overcurrent detection is not entirely

	 * reliable. So we try several times with a wait in between until we

	 * detect the same type JACK_DETECT_COUNT times in a row.

 Clear any previous over-current status flag */

 Check the jack is still connected before checking ovcd */

			/*

			 * Over current detected, there is a short between the

			 * 2nd ring contact and the ground, so a TRS connector

			 * without a mic contact and thus plain headphones.

 Button press support only works with internal jack-detection */

 Jack removed, or spurious IRQ? */

 Jack inserted */

 Enable ovcd IRQ for button press detect. */

 No more need for overcurrent detect. */

		/*

		 * The ovcd IRQ keeps firing while the button is pressed, so

		 * we disable it and start polling the button until released.

		 *

		 * The disable will make the IRQ pin 0 again and since we get

		 * IRQs on both edges (so as to detect both jack plugin and

		 * unplug) this means we will immediately get another IRQ.

		 * The ovcd_irq_enabled check above makes the 2ND IRQ a NOP.

		/*

		 * If the jack-detect IRQ flag goes high (unplug) after our

		 * above rt5651_jack_inserted() check and before we have

		 * disabled the OVCD IRQ, the IRQ pin will stay high and as

		 * we react to edges, we miss the unplug event -> recheck.

 Select jack detect source */

 No jack detect */

 active-low is normal, set inv flag for active-high */

 active-low is normal, set inv flag for active-high */

 active-low is normal, set inv flag for active-high */

 IRQ output on GPIO1 */

 Enable jack detect power */

 Set OVCD threshold current and scale-factor */

	/*

	 * The over-current-detect is only reliable in detecting the absence

	 * of over-current, when the mic-contact in the jack is short-circuited,

	 * the hardware periodically retries if it can apply the bias-current

	 * leading to the ovcd status flip-flopping 1-0-1 with it being 0 about

	 * 10% of the time, as we poll the ovcd status bit we might hit that

	 * 10%, so we enable sticky mode and when checking OVCD we clear the

	 * status, msleep() a bit and then check to get a reliable reading.

 sync initial jack state */

/*

 * Note on some platforms the platform code may need to add device-properties,

 * rather then relying only on properties set by the firmware. Therefor the

 * property parsing MUST be done from the component driver's probe function,

 * rather then from the i2c driver's probe function, so that the platform-code

 * can attach extra properties before calling snd_soc_register_card().

	/*

	 * Testing on various boards has shown that good defaults for the OVCD

	 * threshold and scale-factor are 2000µA and 0.75. For an effective

	 * limit of 1500µA, this seems to be more reliable then 1500µA and 1.0.

/*

 * Note this function MUST not look at device-properties, see the comment

 * above rt5651_apply_properties().

 Make sure work is stopped on probe-error / remove */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rt5677-spi.c  --  RT5677 ALSA SoC audio codec driver

 *

 * Copyright 2013 Realtek Semiconductor Corp.

 * Author: Oder Chiou <oder_chiou@realtek.com>

/* The AddressPhase and DataPhase of SPI commands are MSB first on the wire.

 * DataPhase word size of 16-bit commands is 2 bytes.

 * DataPhase word size of 32-bit commands is 4 bytes.

 * DataPhase word size of burst commands is 8 bytes.

 * The DSP CPU is little-endian.

 zero-based offset into runtime->dma_area */

 number of new bytes since last period */

 zero-based offset into DSP's mic buffer */

 a new hotword is fired */

	/* The DAI name "rt5677-dsp-cpu-dai" is not used. The actual DAI name

	 * registered with ASoC is the name of the device "spi-RT5677AA:00",

	 * because we only have one DAI. See snd_soc_register_dais().

 PCM for streaming audio from the DSP buffer */

	/* Grab the first 4 bytes that hold the write pointer on the

	 * dsp, and check to make sure that it points somewhere inside the

	 * buffer.

 Adjust the offset so that it's zero-based */

/*

 * Copy one contiguous block of audio samples from the DSP mic buffer to the

 * dma_area of the pcm runtime. The receiving buffer may wrap around.

 * @begin: start offset of the block to copy, in bytes.

 * @end:   offset of the first byte after the block to copy, must be greater

 *         than or equal to begin.

 *

 * Return: Zero if successful, or a negative error code on failure.

 The block to copy is empty */

	/* If the incoming chunk is too big for the receiving buffer, only the

	 * last "receiving buffer size - one frame" bytes are copied.

 May need to split to two chunks, calculate the size of each */

 Receiving buffer wrapped around */

 Copy first chunk */

 Copy second chunk */

/*

 * Copy a given amount of audio samples from the DSP mic buffer starting at

 * mic_read_offset, to the dma_area of the pcm runtime. The source buffer may

 * wrap around. mic_read_offset is updated after successful copy.

 * @amount: amount of samples to copy, in bytes.

 *

 * Return: Zero if successful, or a negative error code on failure.

 Copy the first chunk in DSP's mic buffer */

 Wrap around, copy the second chunk */

/*

 * A delayed work that streams audio samples from the DSP mic buffer to the

 * dma_area of the pcm runtime via SPI.

 Ensure runtime->dma_area buffer does not go away while copying. */

	/* If this is the first time that we've asked for streaming data after

	 * a hotword is fired, we should start reading from the previous 2

	 * seconds of audio from wherever the mic_write_offset is currently.

 See if buffer wraparound happens */

 Calculate the amount of new samples in bytes */

 Copy all new samples from DSP mic buffer, one period at a time */

/* Select a suitable transfer command for the next transfer to ensure

 * the transfer address is always naturally aligned while minimizing

 * the total number of transfers required.

 *

 * 3 transfer commands are available:

 * RT5677_SPI_READ/WRITE_16:	Transfer 2 bytes

 * RT5677_SPI_READ/WRITE_32:	Transfer 4 bytes

 * RT5677_SPI_READ/WRITE_BURST:	Transfer any multiples of 8 bytes

 *

 * Note:

 * 16 Bit writes and reads are restricted to the address range

 * 0x18020000 ~ 0x18021000

 *

 * For example, reading 256 bytes at 0x60030004 uses the following commands:

 * 0x60030004 RT5677_SPI_READ_32	4 bytes

 * 0x60030008 RT5677_SPI_READ_BURST	240 bytes

 * 0x600300F8 RT5677_SPI_READ_BURST	8 bytes

 * 0x60030100 RT5677_SPI_READ_32	4 bytes

 *

 * Input:

 * @read: true for read commands; false for write commands

 * @align: alignment of the next transfer address

 * @remain: number of bytes remaining to transfer

 *

 * Output:

 * @len: number of bytes to transfer with the selected command

 * Returns the selected command

/* Copy dstlen bytes from src to dst, while reversing byte order for each word.

 * If srclen < dstlen, zeros are padded.

 Read DSP address space using SPI. addr and len have to be 4-byte aligned. */

 +4 bytes is for the DummyPhase following the AddressPhase */

 Construct SPI message header */

 Copy data back to caller buffer */

/* Write DSP address space using SPI. addr has to be 4-byte aligned.

 * If len is not 4-byte aligned, then extra zeros are written at the end

 * as padding.

 +1 byte is for the DummyPhase following the DataPhase */

 Construct SPI message header */

 Fetch data from caller buffer */

 SPDX-License-Identifier: GPL-2.0



 Lochnagar sound card driver



 Copyright (c) 2017-2019 Cirrus Logic, Inc. and

                         Cirrus Logic International Semiconductor Ltd.



 Author: Charles Keepax <ckeepax@opensource.cirrus.com>

         Piotr Stankiewicz <piotrs@opensource.cirrus.com>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * max98088.c -- MAX98088 ALSA SoC Audio driver

 *

 * Copyright 2010 Maxim Integrated Products

 0F interrupt enable */

 10 master clock */

 11 DAI1 clock mode */

 12 DAI1 clock control */

 13 DAI1 clock control */

 14 DAI1 format */

 15 DAI1 clock */

 16 DAI1 config */

 17 DAI1 TDM */

 18 DAI1 filters */

 19 DAI2 clock mode */

 1A DAI2 clock control */

 1B DAI2 clock control */

 1C DAI2 format */

 1D DAI2 clock */

 1E DAI2 config */

 1F DAI2 TDM */

 20 DAI2 filters */

 21 data config */

 22 DAC mixer */

 23 left ADC mixer */

 24 right ADC mixer */

 25 left HP mixer */

 26 right HP mixer */

 27 HP control */

 28 left REC mixer */

 29 right REC mixer */

 2A REC control */

 2B left SPK mixer */

 2C right SPK mixer */

 2D SPK control */

 2E sidetone */

 2F DAI1 playback level */

 30 DAI1 playback level */

 31 DAI2 playback level */

 32 DAI2 playbakc level */

 33 left ADC level */

 34 right ADC level */

 35 MIC1 level */

 36 MIC2 level */

 37 INA level */

 38 INB level */

 39 left HP volume */

 3A right HP volume */

 3B left REC volume */

 3C right REC volume */

 3D left SPK volume */

 3E right SPK volume */

 3F MIC config */

 40 MIC threshold */

 41 excursion limiter filter */

 42 excursion limiter threshold */

 43 ALC */

 44 power limiter threshold */

 45 power limiter config */

 46 distortion limiter config */

 47 audio input */

 48 microphone */

 49 level control */

 4A bypass switches */

 4B jack detect */

 4C input enable */

 4D output enable */

 4E bias control */

 4F DAC power */

 50 DAC power */

 51 system */

 52 DAI1 EQ1 */

 53 DAI1 EQ1 */

 54 DAI1 EQ1 */

 55 DAI1 EQ1 */

 56 DAI1 EQ1 */

 57 DAI1 EQ1 */

 58 DAI1 EQ1 */

 59 DAI1 EQ1 */

 5A DAI1 EQ1 */

 5B DAI1 EQ1 */

 5C DAI1 EQ2 */

 5D DAI1 EQ2 */

 5E DAI1 EQ2 */

 5F DAI1 EQ2 */

 60 DAI1 EQ2 */

 61 DAI1 EQ2 */

 62 DAI1 EQ2 */

 63 DAI1 EQ2 */

 64 DAI1 EQ2 */

 65 DAI1 EQ2 */

 66 DAI1 EQ3 */

 67 DAI1 EQ3 */

 68 DAI1 EQ3 */

 69 DAI1 EQ3 */

 6A DAI1 EQ3 */

 6B DAI1 EQ3 */

 6C DAI1 EQ3 */

 6D DAI1 EQ3 */

 6E DAI1 EQ3 */

 6F DAI1 EQ3 */

 70 DAI1 EQ4 */

 71 DAI1 EQ4 */

 72 DAI1 EQ4 */

 73 DAI1 EQ4 */

 74 DAI1 EQ4 */

 75 DAI1 EQ4 */

 76 DAI1 EQ4 */

 77 DAI1 EQ4 */

 78 DAI1 EQ4 */

 79 DAI1 EQ4 */

 7A DAI1 EQ5 */

 7B DAI1 EQ5 */

 7C DAI1 EQ5 */

 7D DAI1 EQ5 */

 7E DAI1 EQ5 */

 7F DAI1 EQ5 */

 80 DAI1 EQ5 */

 81 DAI1 EQ5 */

 82 DAI1 EQ5 */

 83 DAI1 EQ5 */

 84 DAI2 EQ1 */

 85 DAI2 EQ1 */

 86 DAI2 EQ1 */

 87 DAI2 EQ1 */

 88 DAI2 EQ1 */

 89 DAI2 EQ1 */

 8A DAI2 EQ1 */

 8B DAI2 EQ1 */

 8C DAI2 EQ1 */

 8D DAI2 EQ1 */

 8E DAI2 EQ2 */

 8F DAI2 EQ2 */

 90 DAI2 EQ2 */

 91 DAI2 EQ2 */

 92 DAI2 EQ2 */

 93 DAI2 EQ2 */

 94 DAI2 EQ2 */

 95 DAI2 EQ2 */

 96 DAI2 EQ2 */

 97 DAI2 EQ2 */

 98 DAI2 EQ3 */

 99 DAI2 EQ3 */

 9A DAI2 EQ3 */

 9B DAI2 EQ3 */

 9C DAI2 EQ3 */

 9D DAI2 EQ3 */

 9E DAI2 EQ3 */

 9F DAI2 EQ3 */

 A0 DAI2 EQ3 */

 A1 DAI2 EQ3 */

 A2 DAI2 EQ4 */

 A3 DAI2 EQ4 */

 A4 DAI2 EQ4 */

 A5 DAI2 EQ4 */

 A6 DAI2 EQ4 */

 A7 DAI2 EQ4 */

 A8 DAI2 EQ4 */

 A9 DAI2 EQ4 */

 AA DAI2 EQ4 */

 AB DAI2 EQ4 */

 AC DAI2 EQ5 */

 AD DAI2 EQ5 */

 AE DAI2 EQ5 */

 AF DAI2 EQ5 */

 B0 DAI2 EQ5 */

 B1 DAI2 EQ5 */

 B2 DAI2 EQ5 */

 B3 DAI2 EQ5 */

 B4 DAI2 EQ5 */

 B5 DAI2 EQ5 */

 B6 DAI1 biquad */

 B7 DAI1 biquad */

 B8 DAI1 biquad */

 B9 DAI1 biquad */

 BA DAI1 biquad */

 BB DAI1 biquad */

 BC DAI1 biquad */

 BD DAI1 biquad */

 BE DAI1 biquad */

 BF DAI1 biquad */

 C0 DAI2 biquad */

 C1 DAI2 biquad */

 C2 DAI2 biquad */

 C3 DAI2 biquad */

 C4 DAI2 biquad */

 C5 DAI2 biquad */

 C6 DAI2 biquad */

 C7 DAI2 biquad */

 C8 DAI2 biquad */

 C9 DAI2 biquad */

/*

 * Load equalizer DSP coefficient configurations registers

 Load the base register address */

 Add the band address offset, note adjustment for word address */

 Step through the registers and coefs */

/*

 * Excursion limiter modes

 volts PP */

 Left speaker mixer switch */

 Right speaker mixer switch */

 Left headphone mixer switch */

 Right headphone mixer switch */

 Left earpiece/receiver mixer switch */

 Right earpiece/receiver mixer switch */

 Left ADC mixer switch */

 Right ADC mixer switch */

/*

 * The line inputs are 2-channel stereo inputs with the left

 * and right channels sharing a common PGA power control signal.

 Left headphone output mixer */

 Right headphone output mixer */

 Left speaker output mixer */

 Right speaker output mixer */

 Earpiece/Receiver output mixer */

 Earpiece/Receiver output mixer */

 Left ADC input mixer */

 Right ADC input mixer */

 Inputs */

 codec mclk clock divider coefficients */

 Configure NI when operating as master */

 Update sample rate mode */

 Configure NI when operating as master */

 Update sample rate mode */

 Requested clock frequency is already setup */

       /* Setup clocks for slave mode, and using the PLL

        * PSCLK = 0x01 (when master clk is 10MHz to 20MHz)

        *         0x02 (when master clk is 20MHz to 30MHz)..

 Slave mode PLL */

 Set to master mode */

 Slave mode PLL */

 Set to master mode */

		/*

		 * SND_SOC_BIAS_PREPARE is called while preparing for a

		 * transition to ON or away from ON. If current bias_level

		 * is SND_SOC_BIAS_ON, then it is preparing for a transition

		 * away from ON. Disable the clock in that case, otherwise

		 * enable it.

 Find the selected configuration with nearest sample rate */

 Disable EQ while configuring, and save current on/off state */

 Restore the original on/off state */

 Find the selected configuration with nearest sample rate */

 Disable EQ while configuring, and save current on/off state */

 Restore the original on/off state */

       /* Setup an array of texts for the equalizer enum.

        * This is based on Mark Brown's equalizer driver code.

 Expand the array */

 Store the new entry */

 Now point the soc_enum to .texts array items */

 Configure mic for analog/digital mic mode */

 Configure receiver output */

 Configure equalizers */

 initialize private data */

 SPDX-License-Identifier: GPL-2.0-only



 rt1019.c  --  RT1019 ALSA SoC audio amplifier driver

 Author: Jack Yu <jack.yu@realtek.com>



 Copyright(c) 2021 Realtek Semiconductor Corp.





 Rx slot configuration */

	/* This is an assumption that the system sends stereo audio to the

	 * amplifier typically. And the stereo audio is placed in slot 0/2/4/6

	 * as the starting slot. The users could select the channel from

	 * L/R/L+R by "Mono LR Select" control.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rt5670.c  --  RT5670 ALSA SoC audio codec driver

 *

 * Copyright 2014 Realtek Semiconductor Corp.

 * Author: Bard Liao <bardliao@realtek.com>

/**

 * rt5670_headset_detect - Detect headset.

 * @component: SoC audio component device.

 * @jack_insert: Jack insert or not.

 *

 * Detect whether is headset or not when jack inserted.

 *

 * Returns detect status.

 for push button */

 2 port */

 jack in */

 2 port */

 1 port or 2 port */

 for push button and jack out */

 button pressed */

 up */

 center */

 down */

 button release */

 jack out */

 2 port */

 2 port */

 1 port */

 for jack in */

 {0, +20, +24, +30, +35, +40, +44, +50, +52} dB */

 Interface data select */

/*

 * For reliable output-mute LED control we need a "DAC1 Playback Switch" control.

 * We emulate this by only clearing the RT5670_M_DAC1_L/_R AD_DA_MIXER register

 * bits when both our emulated DAC1 Playback Switch control and the DAC1 MIXL/R

 * DAPM-mixer DAC1 input are enabled.

 Headphone Output Volume */

 OUTPUT Control */

 DAC Digital Volume */

 IN1/IN2 Control */

 INL/INR Volume Control */

 ADC Digital Volume Control */

 ADC Boost Volume Control */

/**

 * set_dmic_clk - Set parameter of dmic.

 *

 * @w: DAPM widget.

 * @kcontrol: The kcontrol of this widget.

 * @event: Event id.

 *

 * Choose dmic clock between 1MHz and 3MHz.

 * It is better for clock to approximate 3MHz.

/**

 * rt5670_sel_asrc_clk_src - select ASRC clock source for a set of filters

 * @component: SoC audio component device.

 * @filter_mask: mask of filters.

 * @clk_src: clock source

 *

 * The ASRC function is for asynchronous MCLK and LRCK. Also, since RT5670 can

 * only support standard 32fs or 64fs i2s format, ASRC should be enabled to

 * support special i2s clock format such as Intel's 100fs(100 * sampling rate).

 * ASRC function will track i2s clock and generate a corresponding system clock

 * for codec. This function provides an API to select the clock source for a

 * set of filters specified by the mask. And the codec driver will turn on ASRC

 * for these filters if ASRC is selected as their clock source.

 Digital Mixer */

 See comment above rt5670_update_ad_da_mixer_dac1_m_bits() */

 Apply the update (if any) */

 Analog Input Mixer */

 DAC1 L/R source */ 
DAC2 L/R source*/ 
 TODO Use SOC_VALUE_ENUM_SINGLE_DECL */

RxDP source*/ 
 MX-2D [1] [0] */

 Stereo2 ADC source */

 MX-26 [15] */

 Stereo1 ADC source */

 MX-27 MX-26 [12] */

 MX-27 MX-26 [11] */

 MX-27 MX-26 [9:8] */

 Mono ADC source */

 MX-28 [12] */

 MX-28 [11] */

 MX-28 [9:8] */

 MX-28 [1:0] */

 MX-28 [4] */

 MX-28 [3] */

 MX-2D [3:2] */

 MX-2F [15] */

 MX-2F [14:12] */

 MX-31 [15] [13] [11] [9] */

 MX-FA [12] */

 MX-FA [11] */

 MX-FA [10] */

 MX-9D [9:8] */

 headphone amp power on */

 depop parameters */

 headphone unmute sequence */

 headphone mute sequence */

 ASRC */

 Input Side */

 micbias */

 Input Lines */

 Boost */

 Input Volume */

 REC Mixer */

 ADCs */

 ADC Mux */

 ADC Mixer */

 ADC PGA */

 DSP */

 IF2 Mux */

 Digital Interface */

 Digital Interface Select */

 Audio Interface */

 Audio DSP */

 Output Side */

 DAC mixer before sound effect  */

 DAC2 channel Mux */

 DAC Mixer */

 DACs */

 OUT Mixer */

 Ouput Volume */

 HPO/LOUT/Mono Mixer */

 PDM */

 Output Lines */

 quirk */

	/*

	 * Enable the emulated "DAC1 Playback Switch" by default to avoid

	 * muting the output with older UCM profiles.

 The Power-On-Reset values for the DAC1 mixer have the DAC1 input enabled. */

 for push button */

 for irq */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rt274.c  --  RT274 ALSA SoC audio codec driver

 *

 * Copyright 2017 Realtek Semiconductor Corp.

 * Author: Bard Liao <bardliao@realtek.com>

 Disable jack detection */

 Send an initial report */

 ADC0 source */

 HP-OUT source */

 Line out source */

 Input Lines */

 DMIC */

 ADCs */

 ADC Mux */

 Audio Interface */

 Output Side */

 DACs */

 Output Mux */

 Output Mixer */

 Output Pga */

 Output Lines */

 bit 14 0:48K 1:44.1K */

 bit 3:0 Number of Channel */

 bit 6:4 Bits per Sample */

 bit 15 Stream Type 0:PCM 1:Non-PCM */

 Clear IRQ */

 reset codec */

 Set Pad PDB is floating */

 Combo jack auto detect */

 Aux mode off */

 HP DC Calibration */

 Set NID=58h.Index 00h [15]= 1b; */

 Set pin widget */

 jack detection */

 SPDX-License-Identifier: GPL-2.0

 tscs42xx.c -- TSCS42xx ALSA SoC Audio driver

 Copyright 2017 Tempo Semiconductor, Inc.

 Author: Steven Eckhoff <steven.eckhoff.opensource@gmail.com>

 48k */

 44.1k */

 Input L Capture Route */

 Input R Capture Route */

 Input Channel Mapping */

 Vref */

 PLL */

 Headphone */

 Speaker */

 Capture */

 Capture Input */

 Digital Mic */

 Analog Mic */

 Line In */

/************

 * CONTROLS *

 Volumes */

 INSEL */

 Input Channel Map */

 Mic Bias */

 Headphone Auto Switching */

 Coefficient Ram */

 EQ */

 CLE */

 Effects */

 MBC */

 DAC and ADC share bit and frame clock */

 Slave mode not supported since it needs always-on frame clock */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cs53l30.c  --  CS53l30 ALSA Soc Audio driver

 *

 * Copyright 2015 Cirrus Logic, Inc.

 *

 * Authors: Paul Handrigan <Paul.Handrigan@cirrus.com>,

 *          Tim Howe <Tim.Howe@cirrus.com>

 Note: CS53L30_ADCDMIC1_CTL1 CH_TYPE controls inputs 1 and 2 */

/*

 * TB = 6144*(MCLK(int) scaling factor)/MCLK(internal)

 * TB - Time base

 * NOTE: If MCLK_INT_SCALE = 0, then TB=1

 The noise gate threshold selected will depend on NG Boost */

 Corner frequencies are with an Fs of 48kHz. */

 ADC Input Paths */

 MIC Bias Paths */

 DMIC Paths */

 Output Paths when using SDOUT1 only */

 Output Paths when using both SDOUT1 and SDOUT2 */

 NOTE: Enable MCLK_INT_SCALE to save power. */

 MCLK, Sample Rate, asp_rate, internal_fs_ratio, mclk_int_scale */

 MCLKX -> MCLK */

 DAI mode */

 Set TDM_PDN to turn off TDM mode -- Reset default */

		/*

		 * Clear TDM_PDN to turn on TDM mode; Use ASP_SCLK_INV = 0

		 * with SHIFT_LEFT = 1 combination as Figure 4-13 shows in

		 * the CS53L30 datasheet

 Check to see if the SCLK is inverted */

 MCLK -> srate */

		/*

		 * If digital softramp is set, the amount of time required

		 * for power down increases and depends on the digital

		 * volume setting.

 Set the max possible time if digsft is set */

 PDN_DONE will take a min of 20ms to be set.*/

 Clr status */

 PDN_DONE is set. We now can disable the MCLK */

/*

 * Note: CS53L30 counts the slot number per byte while ASoC counts the slot

 * number per slot_width. So there is a difference between the slots of ASoC

 * and the slots of CS53L30.

 Assuming slot_width is not supposed to be greater than 64 */

 How many bytes in each ASoC slot */

 Find the first slot from LSB */

 Save the slot location by converting to CS53L30 slot */

 Create the mask of CS53L30 slot */

 Clear this slot from rx_mask */

 Error out to avoid slot shift */

 Validate the last active CS53L30 slot */

 SNDRV_PCM_RATE_KNOT -> 12000, 24000 Hz, limit with constraint list */

 Reset the Device */

 Initialize codec */

 Check if MCLK provided */

 Otherwise mark the mclk pointer to NULL */

 Fetch the MUTE control */

 Enable MUTE controls via MUTE pin */

 Flip the polarity of MUTE pin */

 Hold down reset */

 Hold down reset */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for ADAU1361/ADAU1461/ADAU1761/ADAU1961 codec

 *

 * Copyright 2011-2013 Analog Devices Inc.

 * Author: Lars-Peter Clausen <lars@metafoo.de>

	/* After any power changes have been made the dejitter circuit

	/* Enable cache only mode as we could miss writes before bias level

 SPDX-License-Identifier: GPL-2.0



 rt711-sdw.c -- rt711 ALSA SoC audio driver



 Copyright(c) 2019 Realtek Semiconductor Corp.





 HD-A read */

 BRA */

 i2c debug */

 decoded HD-A */

 index registers */

 for R channel */

 index registers */

 for R channel */

 Update the status */

	/*

	 * Perform initialization only if slave status is present and

	 * hw_init flag is false

 perform I/O transfers required for Slave initialization */

 first we need to allocate memory for set bits in port lists */

 BITMAP: 00010100 */

 BITMAP:  00001000 */

 do this again for sink now */

 set the timeout values */

 wake-up event */

 Regmap Initialization */

	/*

	 * prevent new interrupts from being handled after the

	 * deferred work completes and before the parent disables

	 * interrupts on the link

 log but don't prevent suspend from happening */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2016, The Linux Foundation. All rights reserved.

 special event to detect accessory type */

 Voltage threshold when internal current source of 100uA is used */

 Voltage threshold when microphone bias is ON */

 ADC2 MUX */

 RDAC2 MUX */

 Analog Gain control 0 dB to +24 dB in 6 dB steps */

		/*

		 * Special headset needs MICBIAS as 2.7V so wait for

		 * 50 msec for the MICBIAS to reach 2.7 volts.

 use internal 100uA Current source */

 Enable internal 2.2k Internal Rbias Resistor */

 Remove pull down on MIC BIAS2 */

 enable 100uA internal current source */

 program vref ranges for all the buttons */

 split mv in to coarse parts of 100mv & fine parts of 12mv */

 enable MBHC clock */

		/*

		 * Add delay of 10 ms to give sufficient time for the voltage

		 * to shoot up and settle so that the txfe init does not

		 * happen when the input voltage is changing too much.

		/*

		 * Add delay of 12 ms before deasserting the init

		 * to reduce the tx pop

 Delay to reduce ear turn off pop */

 ADC Connections */

 RDAC Connections */

 Earpiece (RX MIX1) */

 Headset (RX MIX1 and RX MIX2) */

 RX stuff */

 Speaker */

 TX */

 Analog path clocks */

 Digital path clocks */

 System Clock source */

 TX ADC and RX DAC Clock source. */

 check if its BTN0 thats released */

 handle BTN_0 specially for type detection */

 Set the detection type appropriately */

 hs insertion */

		/*

		 * if only a btn0 press event is receive just before

		 * insert event then its a 3 pole headphone else if

		 * both press and release event received then its

		 * a headset.

 removal */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ac97.c  --  ALSA Soc AC97 codec support

 *

 * Copyright 2005 Wolfson Microelectronics PLC.

 * Author: Liam Girdwood <lrg@slimlogic.co.uk>

 *

 * Generic AC97 support.

 add codec as bus device for standard ac97 */

 SPDX-License-Identifier: GPL-2.0-only



 Codec driver for Microsemi ZL38060 Connected Home Audio Processor.



 Copyright(c) 2020 Sven Van Asbroeck

 The ZL38060 is very flexible and configurable. This driver implements only a

 tiny subset of the chip's possible configurations:



 - DSP block bypassed: DAI        routed straight to DACs

                       microphone routed straight to DAI

 - chip's internal clock is driven by a 12 MHz external crystal

 - chip's DAI connected to CPU is I2S, and bit + frame clock master

 - chip must be strapped for "host boot": in this mode, firmware will be

   provided by this driver.

	/* execution address from ihex: 32-bit little endian.

	 * device register expects 32-bit big endian.

	/* how to get this firmware:

	 * 1. request and download chip firmware from Microsemi

	 *    (provided by Microsemi in srec format)

	 * 2. convert downloaded firmware from srec to ihex. Simple tool:

	 *    https://gitlab.com/TheSven73/s3-to-irec

	 * 3. convert ihex to binary (.fw) using ihex2fw tool which is included

	 *    with the Linux kernel sources

 regular data ihex record */

 execution address ihex record */

 next ! */

	/* wait for host bus interface to settle.

	 * Not sure if this is required: Microsemi's vendor driver does this,

	 * but the firmware manual does not mention it. Leave it in, there's

	 * little downside, apart from a slower reset.

 firmware default is normal i2s */

 firmware default is normal bitclock and frame */

 always 32 bits per frame (= 16 bits/channel, 2 channels) */

	/* We cannot change hw_params while the dai is already in use - the

	 * software reset will corrupt the audio. However, this is not required,

	 * as the chip's TDM buses are fully symmetric, which mandates identical

	 * rates, channels, and samplebits for record and playback.

 chip requires a software reset to apply audio register changes */

 stereo bypass with no AEC */

 interconnects must be programmed first */

 DAC1   in <= I2S1-L */

 DAC2   in <= I2S1-R */

 I2S1-L in <= MIC1   */

 I2S1-R in <= MIC1   */

 AEC-S  in <= n/a    */

 AEC-R  in <= n/a    */

 output enables must be programmed next */

 enable I2S1 + DAC   */

 get the chip to a known state by putting it in reset */

 datasheet: need > 10us for a digital + analog reset */

 take the chip out of reset */

 datasheet: need > 3ms for digital section to become stable */

 setup the cross-point switch for stereo bypass */

 setup for 12MHz crystal connected to the chip */

 sentinel */ }

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0



 Analog Devices ADAU7118 8 channel PDM-to-I2S/TDM Converter driver over I2C



 Copyright 2019 Analog Devices Inc.

 SPDX-License-Identifier: GPL-2.0



 sgtl5000.c  --  SGTL5000 ALSA SoC Audio driver



 Copyright 2010-2011 Freescale Semiconductor, Inc. All Rights Reserved.

 Delay for the VAG ramp up */

 ms */

 Delay for the VAG ramp down */

 ms */

 default value of sgtl5000 registers */

 AVC: Threshold dB -> register: pre-calculated values */

 regulator supplies for sgtl5000, VDDD is an optional external supply */

 vddd is optional supply */

 sgtl5000 private structure in codec */

 sysclk rate */

 i2s master or not */

 i2s data format */

	/* When VAG powering on to get local loop from Line-In, the sleep

	 * is required to avoid loud pop.

 count dac/adc consumers unconditional */

	/*

	 * If the event comes from HP and Line-In is selected,

	 * current action is 'DAC to be powered down'.

	 * As HP_POWERUP is not set when HP muxed to line-in,

	 * we need to keep VAG power ON.

	/*

	 * This function calls when any of VAG power consumers is disappearing.

	 * Thus, if there is more than one consumer at the moment, as minimum

	 * one consumer will definitely stay after the end of the current

	 * event.

	 * Don't clear VAG_POWERUP if 2 or more consumers of VAG present:

	 * - LINE_IN (for HP events) / HP (for DAC/ADC events)

	 * - DAC

	 * - ADC

	 * (the current consumer is disappearing right now)

	/* In power down case, we need wait 400-1000 ms

	 * when VAG fully ramped down.

	 * As longer we wait, as smaller pop we've got.

/*

 * mic_bias power on/off share the same register bits with

 * output impedance of mic bias, when power on mic bias, we

 * need reclaim it to impedance value.

 * 0x0 = Powered off

 * 0x1 = 2Kohm

 * 0x2 = 4Kohm

 * 0x3 = 8Kohm

 change mic bias resistor */

		/*

		 * Mask for HP_POWER_EVENT.

		 * Muxing Headphones have to be wrapped with mute/unmute

		 * headphones only.

		/*

		 * Masks for DAC_POWER_EVENT/ADC_POWER_EVENT.

		 * Muxing DAC or ADC block have to wrapped with mute/unmute

		 * both headphones and line-out.

/*

 * Mute Headphone when power it up/down.

 * Control VAG power on HP power path.

/* As manual describes, ADC/DAC powering up/down requires

 * to mute outputs to avoid pops.

 * Control VAG power on ADC/DAC power path.

 input sources for ADC */

 input sources for headphone */

 input sources for DAC */

 input sources for DAP */

 input sources for DAP mix */

 aif for i2s input */

 aif for i2s output */

 routes for sgtl5000 */

 line_in --> adc_mux */

 mic_in --> adc_mux */

 adc_mux --> adc */

 adc --> i2s_out */

 adc --> DAP mux */

 i2s --> DAP mux */

 DAP mux --> dap */

 adc --> DAP MIX mux */

 i2s --> DAP MIX mux */

 DAP MIX mux --> dap */

 adc --> audio mux */

 i2s --> audio mux */

 dap --> audio mux */

 audio mux --> dac */

 dac --> hp_mux */

 dac --> line_out */

 line_in --> hp_mux */

 hp_mux --> hp */

 custom function to fetch info of PCM playback volume */

/*

 * custom function to get of PCM playback volume

 *

 * dac volume register

 * 15-------------8-7--------------0

 * | R channel vol | L channel vol |

 *  -------------------------------

 *

 * PCM volume with 0.5017 dB steps from 0 to -90 dB

 *

 * register values map to dB

 * 0x3B and less = Reserved

 * 0x3C = 0 dB

 * 0x3D = -0.5 dB

 * 0xF0 = -90 dB

 * 0xFC and greater = Muted

 *

 * register value map to userspace value

 *

 * register value	0x3c(0dB)	  0xf0(-90dB)0xfc

 *			------------------------------

 * userspace value	0xc0			     0

 get left channel volume */

 get right channel volume */

 make sure value fall in (0x3c,0xfc) */

 invert it and map to userspace value */

/*

 * custom function to put of PCM playback volume

 *

 * dac volume register

 * 15-------------8-7--------------0

 * | R channel vol | L channel vol |

 *  -------------------------------

 *

 * PCM volume with 0.5017 dB steps from 0 to -90 dB

 *

 * register values map to dB

 * 0x3B and less = Reserved

 * 0x3C = 0 dB

 * 0x3D = -0.5 dB

 * 0xF0 = -90 dB

 * 0xFC and greater = Muted

 *

 * userspace value map to register value

 *

 * userspace value	0xc0			     0

 *			------------------------------

 * register value	0x3c(0dB)	0xf0(-90dB)0xfc

 make sure userspace volume fall in (0, 0xfc-0x3c) */

 invert it, get the value can be set to register */

 shift to get the register value */

/*

 * custom function to get AVC threshold

 *

 * The threshold dB is calculated by rearranging the calculation from the

 * avc_put_threshold function: register_value = 10^(dB/20) * 0.636 * 2^15 ==>

 * dB = ( fls(register_value) - 14.347 ) * 6.02

 *

 * As this calculation is expensive and the threshold dB values may not exceed

 * 0 to 96 we use pre-calculated values.

 register value 0 => -96dB */

 get dB from register value (rounded down) */

/*

 * custom function to put AVC threshold

 *

 * The register value is calculated by following formula:

 *                                    register_value = 10^(dB/20) * 0.636 * 2^15

 * As this calculation is expensive and the threshold dB values may not exceed

 * 0 to 96 we use pre-calculated values.

 tlv for mic gain, 0db 20db 30db 40db */

 tlv for DAP channels, 0% - 100% - 200% */

 tlv for bass bands, -11.75db to 12.0db, step .25db */

 tlv for hp volume, -51.5db to 12.0db, step .5db */

 tlv for lineout volume, 31 steps of .5db each */

 tlv for dap avc max gain, 0db, 6db, 12db */

 tlv for dap avc threshold, */

 SOC_DOUBLE_S8_TLV with invert */

 Automatic Volume Control (DAP AVC) */

 mute the codec used by alsa core */

	/*

	 * During 'digital mute' do not mute DAC

	 * because LINE_IN would be muted aswell. We want to mute

	 * only I2S block - this can be done by powering it off

 set codec format */

	/*

	 * i2s clock and frame master setting.

	 * ONLY support:

	 *  - clock and frame slave,

	 *  - clock and frame master

 setting i2s data format */

 Clock inversion */

 set codec sysclk */

/*

 * set clock according to i2s frame clock,

 * sgtl5000 provides 2 clock sources:

 * 1. sys_mclk: sample freq can only be configured to

 *	1/256, 1/384, 1/512 of sys_mclk.

 * 2. pll: can derive any audio clocks.

 *

 * clock setting rules:

 * 1. in slave mode, only sys_mclk can be used

 * 2. as constraint by sys_mclk, sample freq should be set to 32 kHz, 44.1 kHz

 * and above.

 * 3. usage of sys_mclk is preferred over pll to save power.

 sample freq */

	/*

	 * sample freq should be divided by frame clock,

	 * if frame clock is lower than 44.1 kHz, sample freq should be set to

	 * 32 kHz or 44.1 kHz.

 set divided factor of frame clock */

 set the sys_fs according to frame rate */

	/*

	 * calculate the divider of mclk/sample_freq,

	 * factor of freq = 96 kHz can only be 256, since mclk is in the range

	 * of 8 MHz - 27 MHz

 if mclk does not satisfy the divider, use pll */

 if using pll, please check manual 6.4.2 for detail */

 power up pll */

 if using pll, clk_ctrl must be set after pll power up */

 otherwise, clk_ctrl must be set before pll power down */

 power down pll */

/*

 * Set PCM DAI bit size and sample rate.

 * input: params_rate, params_fmt

 sysclk should already set */

 set mono to save power */

 set codec clock base on lrclk */

 set i2s data format */

/*

 * set dac bias

 * common state changes:

 * startup:

 * off --> standby --> prepare --> on

 * standby --> prepare --> on

 *

 * stop:

 * on --> prepare --> standby

		/*

		 * only support 8~48K + 96K,

		 * TODO modify hw_param to support more

/*

 * This precalculated table contains all (vag_val * 100 / lo_calcntrl) results

 * to select an appropriate lo_vol_* in SGTL5000_CHIP_LINE_OUT_VOL

 * The calculatation was done for all possible register values which

 * is the array index and the following formula: 10^((idx−15)/40) * 100

/*

 * sgtl5000 has 3 internal power supplies:

 * 1. VAG, normally set to vdda/2

 * 2. charge pump, set to different value

 *	according to voltage of vdda and vddio

 * 3. line out VAG, normally set to vddio/2

 *

 * and should be set according to:

 * 1. vddd provided by external or not

 * 2. vdda and vddio voltage value. > 3.1v or not

 according to datasheet, maximum voltage of supplies */

 reset value */

 enable internal oscillator used for charge pump */

 Enable VDDC charge pump */

		/*

		 * if vddio == vdda the source of charge pump should be

		 * assigned manually to VDDIO

	/*

	 * set ADC/DAC VAG to vdda / 2,

	 * should stay in range (0.8v, 1.575v)

 set line out VAG to vddio / 2, in range (0.8v, 1.675v) */

	/*

	 * Set lineout output level in range (0..31)

	 * the same value is used for right and left channel

	 *

	 * Searching for a suitable index solving this formula:

	 * idx = 40 * log10(vag_val / lo_cagcntrl) + 15

 See if it's just not registered yet */

 power up sgtl5000 */

 enable small pop, introduce 400ms delay in turning off */

 disable short cut detector */

 enable dac volume ramp by default */

	/*

	 * enable DAP Graphic EQ

	 * TODO:

	 * Add control for changing between PEQ/Tone Control/GEQ

 Unmute DAC after start */

 return dai id 0, whatever the endpoint index */

/*

 * Write all the default values from sgtl5000_reg_defaults[] array into the

 * sgtl5000 registers, to make sure we always start with the sane registers

 * values as stated in the datasheet.

 *

 * Since sgtl5000 does not have a reset line, nor a reset command in software,

 * we follow this approach to guarantee we always start from the default values

 * and avoid problems like, not being able to probe after an audio playback

 * followed by a system reset or a 'reboot' command in Linux

 Defer the probe to see if the clk will be provided later */

 Need 8 clocks before I2C accesses */

 read chip information */

 reconfigure the clocks in case we're using the PLL */

 Mute everything to avoid pop from the following power-up */

	/*

	 * If VAG is powered-on (e.g. from previous boot), it would be disabled

	 * by the write to ANA_POWER in later steps of the probe code. This

	 * may create a loud pop even with all outputs muted. The proper way

	 * to circumvent this is disabling the bit first and waiting the proper

	 * cool-down time.

 Follow section 2.2.1.1 of AN3663 */

 internal VDDD at 1.2V */

		/* using external LDO for VDDD

		 * Clear startup powerup and simple powerup

		 * bits to save power

 default is 4Kohms */

 1250mV => 0 */

 steps of 250mV */

 Ensure sgtl5000 will start with sane register values */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Common code for ADAU1X61 and ADAU1X81 codecs

 *

 * Copyright 2011-2014 Analog Devices Inc.

 * Author: Lars-Peter Clausen <lars@metafoo.de>

		/* Bypass the PLL when disabled, otherwise registers will become

 The PLL register is 6 bytes long and can only be written at once. */

	/*

	 * If we are capturing, toggle the ADOSR bit in Converter Control 0 to

	 * avoid losing SNR (workaround from ADI). This must be done after

	 * the ADC(s) have been enabled. According to the data sheet, it is

	 * normally illegal to set this bit when the sampling rate is 96 kHz,

	 * but according to ADI it is acceptable for this workaround.

/*

 * The MUX register for the Capture and Playback MUXs selects either DSP as

 * source/destination or one of the TDM slots. The TDM slot is selected via

 * snd_soc_dai_set_tdm_slot(), so we only expose whether to go to the DSP or

 * directly to the DAI interface with this control.

 The PLL register is 6 bytes long and can only be written at once. */

 fs */

 fs / 6 */

 fs / 4 */

 fs / 3 */

 fs / 2 */

 fs / 1.5 */

 fs / 0.5 */

 Set the mask to update all relevant bits in ADAU17X1_SERIAL_PORT0 */

 I2S mode */

 SigmaDSP parameter memory */

 SigmaDSP parameter memory */

 SigmaDSP parameter and program memory */

 The PLL register is 6 bytes long */

	/* Check if sample rate is the same as before. If it is there is no

	 * point in performing the below steps as the call to

	 * sigmadsp_setup(...) will return directly when it finds the sample

	 * rate to be the same as before. By checking this we can prevent an

	 * audiable popping noise which occours when toggling DSP_RUN.

	/* write data to safeload addresses. Check if len is not a multiple of

	 * 4 bytes, if so we need to zero pad.

 Write target address, target address is offset by 1 */

 write nbr of words to trigger address */

 Clock is optional (for the driver) */

		/*

		 * Any valid PLL output rate will work at this point, use one

		 * that is likely to be chosen later as well. The register will

		 * be written when the PLL is powered up for the first time.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * AK4104 ALSA SoC (ASoC) driver

 *

 * Copyright (c) 2009 Daniel Mack <daniel@caiaq.de>

 AK4104 registers addresses */

 Bit masks for AK4104 registers */

 set DAI format */

 This device can only be consumer */

 set the IEC958 bits: consumer mode, no copyright bit */

 set power-up and non-reset bits */

 enable transmitter */

 CONFIG_PM */

	/* read the 'reserved' register - according to the datasheet, it

	 * should contain 0x5b. Not a good way to verify the presence of

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Load Analog Devices SigmaStudio firmware files

 *

 * Copyright 2009-2011 Analog Devices Inc.

/**

 * devm_sigmadsp_init_i2c() - Initialize SigmaDSP instance

 * @client: The parent I2C device

 * @ops: The sigmadsp_ops to use for this instance

 * @firmware_name: Name of the firmware file to load

 *

 * Allocates a SigmaDSP instance and loads the specified firmware file.

 *

 * Returns a pointer to a struct sigmadsp on success, or a PTR_ERR() on error.

 SPDX-License-Identifier: GPL-2.0



 nau8822.c  --  NAU8822 ALSA Soc Audio driver



 Copyright 2017 Nuvoton Technology Crop.



 Author: David Lin <ctlin0@nuvoton.com>

 Co-author: John Hsu <kchsu0@nuvoton.com>

 Co-author: Seven Li <wtli@nuvoton.com>



 Based on WM8974.c

/* The EQ parameters get function is to get the 5 band equalizer control.

 * The regmap raw read can't work here because regmap doesn't provide

 * value format for value width of 9 bits. Therefore, the driver reads data

 * from cache and makes value format according to the endianness of

 * bytes type control element.

		/* conversion of 16-bit integers between native CPU format

		 * and big endian format

/* The EQ parameters put function is to make configuration of 5 band equalizer

 * control. These configuration includes central frequency, equalizer gain,

 * cut-off frequency, bandwidth control, and equalizer path.

 * The regmap raw write can't work here because regmap doesn't provide

 * register and value format for register with address 7 bits and value 9 bits.

 * Therefore, the driver makes value format according to the endianness of

 * bytes type control element and writes data to codec.

		/* conversion of 16-bit integers between native CPU format

		 * and big endian format

 LMAIN and RMAIN Mixer */

 AUX1 and AUX2 Mixer */

 Input PGA */

 Loopback Switch */

 LMAIN and RMAIN Mixer */

 AUX1 and AUX2 Mixer */

 Outputs */

 Boost Mixer */

 Input PGA */

 Enable Microphone Power */

 Digital Loopback */

	/* Calculate the PLL 4-bit integer input and the PLL 24-bit fractional

	 * input; round up the 24+4bit.

		/* Configure the master clock prescaler div to make system

		 * clock to approximate the internal master clock (IMCLK);

		 * and large or equal to IMCLK.

 master clock from MCLK and disable PLL */

 master clock from PLL and enable PLL */

 make BCLK and LRC divide configuration if the codec as master. */

 get the bclk and fs ratio */

	/* If the master clock is from MCLK, provide the runtime FS for driver

	 * to get the master clock prescaler configuration.

/*

 * These registers contain an "update" bit - bit 8. This means, for example,

 * that one can write new DAC digital volume for both channels, but only when

 * the update bit is set, will also the volume be updated - simultaneously for

 * both channels.

	/*

	 * Set the update bit in all registers, that have one. This way all

	 * writes to those registers will also cause the update bit to be

	 * written.

 Reset the codec */

 SPDX-License-Identifier: GPL-2.0

/*

 * ALSA SoC TLV320AIC31xx CODEC Driver

 *

 * Copyright (C) 2014-2017 Texas Instruments Incorporated - https://www.ti.com/

 *	Jyri Sarha <jsarha@ti.com>

 *

 * Based on ground work by: Ajit Kulkarni <x0175765@ti.com>

 *

 * The TLV320AIC31xx series of audio codecs are low-power, highly integrated

 * high performance codecs which provides a stereo DAC, a mono ADC,

 * and mono/stereo Class-D speaker driver.

 regmap implementation requires this */

 always clears after write */

 Sticky interrupt flags */

 Sticky interrupt flags */

 Sticky interrupt flags */

 Sticky interrupt flags */

 Sticky interrupt flags */

 Sticky interrupt flags */

 output common-mode voltage */

 ADC dividers can be disabled by configuring them to 0 */

 mclk/p    rate  pll: j     d        dosr ndac mdac  aors nadc madc */

 8k rate */

 11.025k rate */

 16k rate */

 22.05k rate */

 32k rate */

 44.1k rate */

 48k rate */

 88.2k rate */

 96k rate */

 176.4k rate */

 192k rate */

/*

 * controls to be exported to the user space

	/* HP de-pop control: apply power not immediately but via ramp

	 * function with these psarameters. Note that power up sequence

	 * has to wait for this to complete; this is implemented by

	 * polling HP driver status in aic31xx_dapm_power_event()

 change mic bias voltage to user defined */

 turn mic bias off */

 DACs */

 HP */

 Output drivers */

 Mic Bias */

 Keep BCLK/WCLK enabled even if DAC/ADC is powered down */

 Outputs */

 Inputs */

 Output Mixers */

 Inputs */

 Input Selection to MIC_PGA */

 ADC */

 Enabling & Disabling MIC Gain Ctl */

 Output Mixers */

 AIC3111 and AIC3110 have stereo class-D amplifier */

 AIC3100 and AIC3120 have only mono class-D amplifier */

 DAC Input Routing */

 HPL path */

 HPR path */

 Left Output */

 Right Output */

 Mic input */

 Left Output */

 Right Output */

 SP L path */

 SP R path */

 SP L path */

/*

 * Always connected DAPM routes for codec clock master modes.

 * If the codec is the master on the I2S bus, we need to power up components

 * to have valid DAC_CLK.

 *

 * In order to have the I2S clocks on the bus either the DACs/ADC need to be

 * enabled, or the P0/R29/D2 (Keep bclk/wclk in power down) need to be set.

 *

 * Otherwise the codec will not generate clocks on the bus.

 Use PLL as CODEC_CLKIN and DAC_CLK as BDIV_CLKIN */

 See bellow for details how fix this. */

		/* This is fine if using dsp format, but if using i2s

		   there may be trouble. To fix the issue edit the

		   aic31xx_divs table for your mclk and sample

		   rate. Details can be found from:

		   https://www.ti.com/lit/ds/symlink/tlv320aic3100.pdf

		   Section: 5.6 CLOCK Generation and PLL

 PLL configuration */

 DAC dividers configuration */

 ADC dividers configuration. Write reset value 1 if not used. */

 Bit clock divider configuration. */

		/*

		 * Remove the DAPM route(s) for codec clock master modes,

		 * if applied

		/*

		 * Add the needed DAPM route(s) for codec clock master modes,

		 * if it is not done already

 set master/slave audio interface */

 signal polarity */

 interface format */

		/*

		 * NOTE: This CODEC samples on the falling edge of BCLK in

		 * DSP mode, this is inverted compared to what most DAIs

		 * expect, so we invert for this mode

 set clock on MCLK, BCLK, or GPIO1 as PLL input */

		/*

		 * Put codec to reset and as at least one of the

		 * supplies was disabled.

 At least 10ns */

 At least 1ms */

 Reset device registers for a consistent power-on like state */

	/*

	 * The jack detection configuration is in the same register

	 * that is used to report jack detect status so is volatile

	 * and not covered by the cache sync, restore it separately.

 Enable/Disable jack detection */

 set output common-mode voltage */

 CONFIG_OF */

 OCMV setting is forced by DT */

 SPDX-License-Identifier: GPL-2.0



 ALSA SoC Texas Instruments TAS2770 20-W Digital Input Mono Class-D

 Audio Amplifier with Speaker I/V Sense



 Copyright (C) 2016-2017 Texas Instruments Incorporated - https:
	Author: Tracy Yi <tracy-yi@ti.com>

	Frank Shi <shifu0704@thundersoft.com>

 Do not change slot width */

 regmap implementation requires this */

 always clears after write */

 has a self clearing bit */

 Sticky interrupt flags */

 Sticky interrupt flags */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * I2S MEMS microphone driver for InvenSense ICS-43432 and similar

 * MEMS-based microphones.

 *

 * - Non configurable.

 * - I2S interface, 64 BCLs per frame, 32 bits per channel, 24 bit data

 *

 * Copyright (c) 2015 Axis Communications AB

 Hz, from data sheet */

 Hz, from data sheet */

 SPDX-License-Identifier: GPL-2.0-only



 nau8315.c  --  NAU8315 ALSA SoC Audio Amplifier Driver



 Copyright 2020 Nuvoton Technology Crop.



 Author: David Lin <ctlin0@nuvoton.com>



 Based on MAX98357A.c

 SPDX-License-Identifier: GPL-2.0+



 DA7210 ALSA Soc codec driver



 Copyright (c) 2009 Dialog Semiconductor

 Written by David Chen <Dajun.chen@diasemi.com>



 Copyright (C) 2009 Renesas Solutions Corp.

 Cleanups by Kuninori Morimoto <morimoto.kuninori@renesas.com>



 Tested on SuperH Ecovec24 board with S16/S24 LE in 48KHz using I2S

 DA7210 register space */

 STARTUP1 bit fields */

 MIC_L bit fields */

 MIC_R bit fields */

 INMIX_L bit fields */

 INMIX_R bit fields */

 ADC bit fields */

 DAC/ADC HPF fields */

 DAC_SEL bit fields */

 OUTMIX_L bit fields */

 OUTMIX_R bit fields */

 HP_CFG bit fields */

 DAI_SRC_SEL bit fields */

 DAI_CFG1 bit fields */

 DAI_CFG3 bit fields */

PLL_DIV3 bit fields */

 PLL bit fields */

 SOFTMUTE bit fields */

 CONTROL bit fields */

 IN_GAIN bit fields */

 ZERO_CROSS bit fields */

 AUX1_L bit fields */

 AUX1_R bit fields */

 AUX2 bit fields */

 Minimum INPGA and AUX1 volume to enable noise suppression */

 10.5dB */

 6dB */

 OUT1_L bit fields */

 OUT1_R bit fields */

 OUT2 bit fields */

 0 = slave, 1 = master */

 PLL dividers table */

 for MASTER mode, fs = 44.1Khz */

 MCLK=12Mhz */

 MCLK=13Mhz */

 MCLK=13.5Mhz */

 MCLK=14.4Mhz */

 MCLK=19.2Mhz */

 MCLK=19.68Mhz */

 MCLK=19.8Mhz */

 for MASTER mode, fs = 48Khz */

 MCLK=12Mhz */

 MCLK=13Mhz */

 MCLK=13.5Mhz */

 MCLK=14.4Mhz */

 MCLK=19.2Mhz */

 MCLK=19.68Mhz */

 MCLK=19.8Mhz */

 for SLAVE mode with SRM */

 MCLK=12Mhz */

 MCLK=13Mhz */

 MCLK=13.5Mhz */

 MCLK=14.4Mhz */

 MCLK=19.2Mhz */

 MCLK=19.68Mhz */

 MCLK=19.8Mhz  */

/*

 * Playback Volume

 *

 * max		: 0x3F (+15.0 dB)

 *		   (1.5 dB step)

 * min		: 0x11 (-54.0 dB)

 * mute		: 0x10

 * reserved	: 0x00 - 0x0F

 *

 * Reserved area are considered as "mute".

 -54 dB to +15 dB */

 -54dB to 15dB */

 -18dB to 6dB */

 -48dB to 21dB */

 ADC and DAC high pass filter f0 value */

 ADC and DAC voice (8kHz) high pass cutoff value */

 ALC can be enabled only if noise suppression is disabled */

 Check if noise suppression is enabled */

 If all conditions are met or we are actually disabling ALC */

/* Noise suppression can be enabled only if following conditions are met

 *  ALC disabled

 *  ZC enabled for HP and AUX1 PGA

 *  INPGA_L_VOL and INPGA_R_VOL >= 10.5 dB

 *  AUX1_L_VOL and AUX1_R_VOL >= 6 dB

 Check if ALC is enabled */

 Check ZC for HP and AUX1 PGA */

 Check INPGA_L_VOL and INPGA_R_VOL */

 Check AUX1_L_VOL and AUX1_R_VOL */

 If all conditions are met or we are actually disabling Noise sup */

 DAC Equalizer  controls */

 ADC Equalizer  controls */

 Mute controls */

 Zero cross controls */

 ALC controls */

/*

 * DAPM Controls

 *

 * Current DAPM implementation covers almost all codec components e.g. IOs,

 * mixers, PGAs,ADC and DAC.

 In Mixer Left */

 In Mixer Right */

 Out Mixer Left */

 Out Mixer Right */

 Mono Mixer */

 DAPM widgets */

 Input Side */

 Input Lines */

 Input PGAs */

 MICBIAS */

 Input Mixers */

 ADCs */

 Output Side */

 DACs */

 Output Mixers */

 Output PGAs */

 Output Lines */

 DAPM audio route definition */

 Dest       Connecting Widget    source */

 Input path */

 Output path */

 Codec private data */

/*

 * Set PCM DAI word length.

 set DAI source to Left and Right ADC */

 Enable DAI */

 Disable active mode */

 PLL mode, disable PLL bypass */

 PLL slave mode, also enable SRM */

 PLL bypass mode, enable PLL bypass and Auto Detection */

 Enable active mode */

/*

 * Set DAI mode and Format

	/* FIXME

	 *

	 * It support I2S only now

	/* FIXME

	 *

	 * It support 64bit data transmission only now

/**

 * da7210_set_dai_pll	:Configure the codec PLL

 * @codec_dai: pointer to codec DAI

 * @pll_id: da7210 has only one pll, so pll_id is always zero

 * @source: clock source

 * @fref: MCLK frequency, should be < 20MHz

 * @fout: FsDM value, Refer page 44 & 45 of datasheet

 *

 * Note: Supported PLL input frequencies are 12MHz, 13MHz, 13.5MHz, 14.4MHz,

 *       19.2MHz, 19.6MHz and 19.8MHz

 *

 * Return: Zero for success, negative error code for error

 In slave mode, there is only one set of divisors */

 Search pll div array for correct divisors */

 check fref, mode  and fout */

 all match, pick up divisors */

 Disable active mode */

 Write PLL dividers */

 Enable PLL */

 Enable active mode */

 DAI operations */

 playback capabilities */

 capture capabilities */

 This will be set from set_sysclk() */

 This will be set from set_fmt() */

 Enable internal regulator & bias current */

	/*

	 * ADC settings

 Enable Left & Right MIC PGA and Mic Bias */

 Enable Left and Right input PGA */

 Enable Left and Right ADC */

	/*

	 * DAC settings

 Enable Left and Right DAC */

 Enable Left and Right out PGA */

 Enable Left and Right HeadPhone PGA */

 Enable ramp mode for DAC gain update */

	/*

	 * For DA7210 codec, there are two ways to enable/disable analog IOs

	 * and ADC/DAC,

	 * (1) Using "Enable Bit" of register associated with that IO

	 * (or ADC/DAC)

	 *	e.g. Mic Left can be enabled using bit 7 of MIC_L(0x7) reg

	 *

	 * (2) Using "Standby Bit" of STARTUP2 or STARTUP3 register

	 *	e.g. Mic left can be put to STANDBY using bit 0 of STARTUP3(0x5)

	 *

	 * Out of these two methods, the one using STANDBY bits is preferred

	 * way to enable/disable individual blocks. This is because STANDBY

	 * registers are part of system controller which allows system power

	 * up/down in a controlled, pop-free manner. Also, as per application

	 * note of DA7210, STANDBY register bits are only effective if a

	 * particular IO (or ADC/DAC) is already enabled using enable/disable

	 * register bits. Keeping these things in mind, current DAPM

	 * implementation manipulates only STANDBY bits.

	 *

	 * Overall implementation can be outlined as below,

	 *

	 * - "Enable bit" of an IO or ADC/DAC is used to enable it in probe()

	 * - "STANDBY bit" is controlled by DAPM

 Enable Line out amplifiers */

 Enable Aux1 */

 Enable Aux2 */

 Set PLL Master clock range 10-20 MHz, enable PLL bypass */

 Diable PLL and bypass it */

 Activate all enabled subsystem */

 System controller master disable */

 Set PLL Master clock range 10-20 MHz */

 to unlock */

 to re-lock */

 I2C codec control layer */

 Dummy read to give two pulses over nCS for SPI */

 System controller master disable */

 Set PLL Master clock range 10-20 MHz */

 to set PAGE1 of SPI register space */

 to unlock */

 to re-lock */

 to set back PAGE0 of SPI register space */

 SPDX-License-Identifier: GPL-2.0



 Analog Devices SSM2305 Amplifier Driver



 Copyright (C) 2018 Pengutronix, Marco Felsch <kernel@pengutronix.de>



 shutdown gpio  */

 Stereo input/output */

 Allocate the private data */

 Get shutdown gpio */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * da732x.c --- Dialog DA732X ALSA SoC Audio Driver

 *

 * Copyright (C) 2012 Dialog Semiconductor GmbH

 *

 * Author: Michal Hajduk <Michal.Hajduk@diasemi.com>

/*

 * da732x register cache - default settings

 High Pass Filter */

 Input PGAs */

 MICs */

 AUXs */

 ADCs */

 DACs */

 High Pass Filters */

 Equalizers */

 Lineout 2 Reciever*/

 Lineout 3 SPEAKER*/

 Lineout 4 */

 Headphones */

 ADC1LMUX */

 ADC1RMUX */

 ADC2LMUX */

 ADC2RMUX */

 Supplies */

 Micbias */

 Inputs */

 Outputs */

 ADCs */

 DACs */

 Input Pgas */

 MUXs */

 AIF interfaces */

 Inputs */

 Capture Path */

 Output Pgas */

 Outputs */

 Clock inversion */

 Disable PLL */

 Validate Sysclk rate */

 Initialize DAC offset calibration circuits and registers */

 Wait for voltage stabilization */

 Check DAC offset sign */

 Binary search DAC offset values (both channels at once) */

 Write final DAC offsets to registers */

 End DAC calibration mode */

 Initialize output offset calibration circuits and registers  */

 Wait for voltage stabilization */

 Check output offset sign */

 Binary search output offset values (both channels at once) */

 Write final DAC offsets to registers */

 Make sure that we have Soft Mute enabled */

 Init Codec */

 Disable Fast Charge and enable DAC ref voltage */

 Enable bypass DSP routing */

 Enable Digital subsystem */

 Enable Zero Crossing */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2018-2020, The Linux Foundation. All rights reserved.

 TX Macro */

 Update volatile list for tx/tx macros */

 9.6MHz MCLK, set value 0x00 if other frequency */

 Minimum 1 clk cycle delay is required as per HW spec */

 Enable TX PGA Mute */

 Minimum 1 clk cycle delay is required as per HW spec */

 schedule work queue to Remove Mute */

			/*

			 * 6ms delay is required as per HW spec

 apply gain after decimator is enabled */

				/*

				 * Minimum 1 clk cycle delay is required

				 * as per HW spec

 Enable swr mic0 and mic1 clock */

 Update defaults for lpass sc7280 */

 set MCLK and NPL rates */

 SPDX-License-Identifier: GPL-2.0



 rt1308-sdw.c -- rt1308 ALSA SoC audio driver



 Copyright(c) 2019 Realtek Semiconductor Corp.





 Bus clock frequency */

 first we need to allocate memory for set bits in port lists */

 BITMAP: 00010100 (not enable yet) */

 BITMAP:  00000010 */

 for sink */

 set the timeout values */

	/*

	 * PM runtime is only enabled when a Slave reports as Attached

 set autosuspend parameters */

 update count of parent 'active' children */

 make sure the device does not suspend immediately */

 sw reset */

 read efuse */

 initial settings */

 Mark Slave initialization complete */

 Update the status */

	/*

	 * Perform initialization only if slave status is present and

	 * hw_init flag is false

 perform I/O transfers required for Slave initialization */

 I2S Data Channel Selection */

 Audio Interface */

 Supply Widgets */

 Digital Interface */

 Output Lines */

 Use tx_mask or rx_mask to configure stream tag and set dma_data */

 slot_width is not used since it's irrelevant for SoundWire */

 SoundWire specific configuration */

 port 1 for playback */

/*

 * slave_ops: callbacks for get_clock_stop_mode, clock_stop and

 * port_prep are not defined for now

	/*

	 * Mark hw_init to false

	 * HW init will be performed when device reports present

 Regmap Initialization */

/* SPDX-License-Identifier: GPL-2.0

 *

 * Copyright 2011-2019 NW Digital Radio

 *

 * Author: Annaliese McDermond <nh6z@nh6z.net>

 *

 * Based on sound/soc/codecs/wm8974 and TI driver for kernel 2.6.27.

 *

 sentinel */ }

 senitel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * max98925.c -- ALSA SoC Stereo MAX98925 driver

 * Copyright 2013-15 Maxim Integrated Products

 IRQ Enable0 */

 IRQ Enable1 */

 IRQ Enable2 */

 IRQ Clear0 */

 IRQ Clear1 */

 IRQ Clear2 */

 Map0 */

 Map1 */

 Map2 */

 Map3 */

 Map4 */

 Map5 */

 Map6 */

 Map7 */

 Map8 */

 DAI Clock Mode 1 */

 DAI Clock Mode 2 */

 DAI Clock Divider Denominator MSBs */

 DAI Clock Divider Denominator LSBs */

 DAI Clock Divider Numerator MSBs */

 DAI Clock Divider Numerator LSBs */

 Format */

 TDM Slot Select */

 DOUT Configuration VMON */

 DOUT Configuration IMON */

 DOUT Configuration VBAT */

 DOUT Configuration VBST */

 DOUT Configuration FLAG */

 DOUT HiZ Configuration 1 */

 DOUT HiZ Configuration 2 */

 DOUT HiZ Configuration 3 */

 DOUT HiZ Configuration 4 */

 DOUT Drive Strength */

 Filters */

 Gain */

 Gain Ramping */

 Speaker Amplifier */

 Threshold */

 ALC Attack */

 ALC Atten and Release */

 ALC Infinite Hold Release */

 ALC Configuration */

 Boost Converter */

 Block Enable */

 Configuration */

 Global Enable */

 Boost Limiter */

 codec sample rate and n/m dividers parameter table */

 set VMON slots */

 set IMON slots */

 set DAI to slave mode */

		/*

		 * set left channel DAI to master mode,

		 * right channel always slave

 BCLK/LRCLK ratio calculation */

 set DAI_SR to correct LRCLK frequency */

 set DAI m divider */

 set DAI n divider */

 set MDLL */

 use MCLK for Left channel, right channel always BCLK */

 configure dai clock source to BCLK instead of MCLK */

 It's not the default but we need to set DAI_DLY */

 Disable ALC muting */

 SPDX-License-Identifier: GPL-2.0-only



 rt5682.c  --  RT5682 ALSA SoC audio component driver



 Copyright 2018 Realtek Semiconductor Corp.

 Author: Bard Liao <bardliao@realtek.com>



 {0, +20, +24, +30, +35, +40, +44, +50, +52} dB */

 Interface data select */

/**

 * rt5682_sel_asrc_clk_src - select ASRC clock source for a set of filters

 * @component: SoC audio component device.

 * @filter_mask: mask of filters.

 * @clk_src: clock source

 *

 * The ASRC function is for asynchronous MCLK and LRCK. Also, since RT5682 can

 * only support standard 32fs or 64fs i2s format, ASRC should be enabled to

 * support special i2s clock format such as Intel's 100fs(100 * sampling rate).

 * ASRC function will track i2s clock and generate a corresponding system clock

 * for codec. This function provides an API to select the clock source for a

 * set of filters specified by the mask. And the component driver will turn on

 * ASRC for these filters if ASRC is selected as their clock source.

/**

 * rt5682_headset_detect - Detect headset.

 * @component: SoC audio component device.

 * @jack_insert: Jack insert or not.

 *

 * Detect whether is headset or not when jack inserted.

 *

 * Returns detect status.

 jack in */

 jack was out, report jack type */

 jack is already in, report button event */

			/**

			 * rt5682 can report three kinds of button behavior,

			 * one click, double click and hold. However,

			 * currently we will report button pressed/released

			 * event. So all the three button behaviors are

			 * treated as button pressed.

 unpressed */

 jack out */

 DAC Digital Volume */

 IN Boost Volume */

 ADC Digital Volume Control */

 ADC Boost Volume Control */

/**

 * set_dmic_clk - Set parameter of dmic.

 *

 * @w: DAPM widget.

 * @kcontrol: The kcontrol of this widget.

 * @event: Event id.

 *

 * Choose dmic clock between 1MHz and 3MHz.

 * It is better for clock to approximate 3MHz.

 select over sample rate */

 Digital Mixer */

 Analog Input Mixer */

 STO1 ADC1 Source */

 MX-26 [13] [5] */

 STO1 ADC Source */

 MX-26 [11:10] [3:2] */

 STO1 ADC2 Source */

 MX-26 [12] [4] */

 MX-79 [6:4] I2S1 ADC data location */

 Analog DAC L1 Source, Analog DAC R1 Source*/

 MX-2B [4], MX-2B [0]*/

 Out Switch */

Add delay to avoid pop noise*/

 ASRC */

 Input Side */

 Input Lines */

 Boost */

 REC Mixer */

 ADCs */

 ADC Mux */

 ADC Mixer */

 ADC PGA */

 Digital Interface */

 Digital Interface Select */

 Audio Interface */

 Output Side */

 DAC mixer before sound effect  */

 DAC channel Mux */

 DAC Mixer */

 DACs */

 HPO */

 CLK DET */

 Output Lines */

PLL*/

ASRC*/

Vref*/

 mono mode */

 mono mode */

		/**

		 * PLL2 concatenates 2 PLL units.

		 * We suggest the Fout of the front PLL is 3.84MHz.

	/*

	 * Only accept to set wclk rate to 44.1k or 48kHz.

	/*

	 * Only accept to set wclk rate to 44.1k or 48kHz.

	 * It will force to 48kHz if not both.

	/*

	 * Whether the wclk's parent clk (mclk) exists or not, please ensure

	 * it is fixed or set to 48MHz before setting wclk rate. It's a

	 * temporary limitation. Only accept 48MHz clk as the clk provider.

	 *

	 * It will set the codec anyway by assuming mclk is 48MHz.

	/*

	 * To achieve the rate conversion from 48MHz to 44.1k or 48kHz,

	 * PLL2 is needed.

	/*

	 * BCLK rates are set as a multiplier of WCLK in HW.

	 * We don't allow changing the parent WCLK. We just do

	 * some rounding down based on the parent WCLK rate

	 * and find the appropriate multiplier of BCLK to

	 * get the rounded down BCLK value.

 Make MCLK the parent of WCLK */

 Make WCLK the parent of BCLK */

 CONFIG_COMMON_CLK */

 enter SAR ADC power saving mode */

 restore settings */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * CS4271 ASoC codec driver

 *

 * Copyright (c) 2010 Alexander Sverdlin <subaparts@yandex.ru>

 *

 * This driver support CS4271 codec being master or slave, working

 * in control port mode, connected either via SPI or I2C.

 * The data format accepted is I2S or left-justified.

 * DAPM support not implemented.

/*

 * CS4271 registers

 Mode Control 1 */

 DAC Control */

 DAC Volume & Mixing Control */

 DAC Channel A Volume Control */

 DAC Channel B Volume Control */

 ADC Control */

 Mode Control 2 */

 Chip ID */

 Bit masks for the CS4271 registers */

/*

 * Default CS4271 power-up configuration

 * Array contains non-existing in hw register at address 0

 * Array do not include Chip ID, as codec driver does not use

 * registers read operations at all

 Current sample rate for de-emphasis control */

 GPIO driving Reset pin, if any */

 GPIO that disable serial bus, if any */

 enable soft reset workaround */

/*

 * @freq is the desired MCLK rate

 * MCLK rate should (c) be the sample rate, multiplied by one of the

 * ratios listed in cs4271_mclk_fs_ratios table

 Find closest de-emphasis freq */

 codec mode */

 codec speed mode: 1x, 2x, 4x */

 MCLK / sample rate */

 ratio bit mask for Master mode */

		/*

		 * Put the codec in soft reset and back again in case it's not

		 * currently streaming data. This way of bringing the codec in

		 * sync to the current clocks is not explicitly documented in

		 * the data sheet, but it seems to work fine, and in contrast

		 * to a read hardware reset, we don't have to sync back all

		 * registers every time.

 Configure DAC */

 CS4271 controls */

 Set power-down bit */

 Do a proper reset after power up */

 Restore codec state */

 then disable the power-down bit */

 CONFIG_PM */

 Reset codec */

 Power-up sequence requires 85 uS */

 Set codec to the reset state */

 SPDX-License-Identifier: GPL-2.0

/*

 * Texas Instruments PCM186x Universal Audio ADC - SPI

 *

 * Copyright (C) 2015-2017 Texas Instruments Incorporated - https://www.ti.com

 *	Andreas Dannenberg <dannenberg@ti.com>

 *	Andrew F. Davis <afd@ti.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ads117x.c  --  Driver for ads1174/8 ADC chips

 *

 * Copyright 2009 ShotSpotter Inc.

 * Author: Graeme Gregory <gg@slimlogic.co.uk>

 ADC */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2011 LAPIS Semiconductor Co., Ltd.

 Digital volume MUTE On */

 Digital volume MUTE Off */

 For mono (Telecodec) */

 ML26124 configuration */

 Input mux */

 Supply */

 output mixer */

 outputs */

 input */

 PLLOutputFreq(Hz) = InputMclkFreq(Hz) * PLLM / (PLLN * PLLDIV) */

 CLOCK control Register */

 Sampling Rate */

 PLL NL */

 PLLNH */

 PLLML */

 MLLMH */

 PLLDIV */

 Clock Enable */

 CLK Input/Output Control */

 System Control Register */

 Software RESET */

 Record/Playback Run */

 Mic Input/Output control */

 Power Management Register */

 Reference Power Management */

 Input Power Management */

 DAC Power Management */

 SP-AMP Power Management */

 LINEOUT Power Management */

 VIDEO Power Management */

 AC-CMP Power Management */

 Analog reference Control Register */

 MICBIAS Voltage Control */

 Input/Output Amplifier Control Register */

 MIC Input Volume */

 Mic Boost Volume */

 Speaker AMP Volume */

 AMP Volume Control Function Enable */

 Amplifier Volume Fader Control */

 Analog Path Control Register */

 Speaker AMP Output Control */

 Mic IF Control */

 Mic Select Control */

 Audio Interface Control Register */

 SAI-Trans Control */

 SAI-Receive Control */

 SAI Mode select */

 DSP Control Register */

 Filter Func Enable */

 Volume Control Func Enable */

 Mixer & Volume Control*/

 Record Digital Volume */

 Playback Digital Volume */

 Digital Boost Volume */

 EQ gain Band0 */

 EQ gain Band1 */

 EQ gain Band2 */

 EQ gain Band3 */

 EQ gain Band4 */

 HPF2 CutOff*/

 EQ Band0 Coef0L */

 EQ Band0 Coef0H */

 EQ Band0 Coef0L */

 EQ Band0 Coef0H */

 EQ Band1 Coef0L */

 EQ Band1 Coef0H */

 EQ Band1 Coef0L */

 EQ Band1 Coef0H */

 EQ Band2 Coef0L */

 EQ Band2 Coef0H */

 EQ Band2 Coef0L */

 EQ Band2 Coef0H */

 EQ Band3 Coef0L */

 EQ Band3 Coef0H */

 EQ Band3 Coef0L */

 EQ Band3 Coef0H */

 EQ Band4 Coef0L */

 EQ Band4 Coef0H */

 EQ Band4 Coef0L */

 EQ Band4 Coef0H */

 ALC Control Register */

 ALC Mode */

 ALC Attack Time */

 ALC Decay Time */

 ALC Hold Time */

 ALC Target Level */

 ALC Max/Min Gain */

 Noise Gate Threshold */

 ALC ZeroCross TimeOut */

 Playback Limiter Control Register */

 PL Attack Time */

 PL Decay Time */

 PL Target Level */

 PL Max/Min Gain */

 Playback Boost Volume */

 PL ZeroCross TimeOut */

 Video Amplifier Control Register */

 VIDEO AMP Gain Control */

 VIDEO AMP Setup 1 */

 VIDEO AMP Control2 */

 Get sampling rate value of sampling rate setting register (0x0) */

 set master/slave audio interface */

 interface format */

 clock inversion */

 VMID ON */

 VMID OFF */

 Software Reset */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for ADAU1372 codec

 *

 * Copyright 2016 Analog Devices Inc.

 *  Author: Lars-Peter Clausen <lars@metafoo.de>

	/*

	 * To get the device into SPI mode CLATCH has to be pulled low three

	 * times.  Do this by issuing three dummy reads.

 SPDX-License-Identifier: GPL-2.0



 Ingenic JZ4770 CODEC driver



 Copyright (C) 2012, Maarten ter Huurne <maarten@treewalker.org>

 Copyright (C) 2019, Paul Cercueil <paul@crapouillou.net>

 ICDC internal register access control register(RGADW) */

 ICDC internal register data output register (RGDATA)*/

 Internal register space, accessed through regmap */

 codec private data */

 Reset all interrupt flags. */

	/*

	 * SYSCLK output from the codec to the AIC is required to keep the

	 * DMA transfer going during playback when all audible outputs have

	 * been disabled.

 do nothing */

 clear GUP/GDO flag */

 unit: 0.01dB */

 Unconditional controls. */

 record gain control */

		/*

		 * NOTE: DACR/DACL are inversed; the gain value written to DACR

		 * seems to affect the left channel, and the gain value written

		 * to DACL seems to affect the right channel.

 HPR/HPL inversed for the same reason as above */

 unmute HP */

 wait for ramp-up complete (RUP) */

 clear RUP flag */

 mute HP */

 clear RDO flag */

 Unconditional routes. */

 Collect updates for later sending. */

 default HP output to PCM */

 default line output to PCM */

 Disable stereo mic */

 Set mic 1 as default source for ADC */

 ADC/DAC: serial + i2s */

 The generated IRQ is a high level */

 12M oscillator */

 0: 16ohm/220uF, 1: 10kohm/1uF */

 disable automatic gain */

 Disable DAC lrswap */

 Independent L/R DAC gain control */

 Disable ADC lrswap */

 default to cap-less mode(0) */

 Send collected updates. */

 wait 6+ cycles */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * LM4857 AMP driver

 *

 * Copyright 2007 Wolfson Microelectronics PLC.

 * Author: Graeme Gregory

 *         graeme.gregory@wolfsonmicro.com

 * Copyright 2011 Lars-Peter Clausen <lars@metafoo.de>

 The register offsets in the cache array */

 the shifts required to set these bits */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * SSM2602/SSM2603/SSM2604 I2C audio driver

 *

 * Copyright 2014 Analog Devices Inc.

/*

 * ssm2602 2 wire address is determined by GPIO5

 * state during powerup.

 *    low  = 0x1a

 *    high = 0x1b

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for ADAU1701 SigmaDSP processor

 *

 * Copyright 2011 Analog Devices Inc.

 * Author: Lars-Peter Clausen <lars@metafoo.de>

 *	based on an inital version by Cliff Cai <cliff.cai@analog.com>

 fallback */

 minimum reset time is 20ns */

 power-up time may be as long as 85ms */

	/*

	 * Postpone the firmware download to a point in time when we

	 * know the correct PLL setup

	/*

	 * If the mclk/lrclk ratio changes, the chip needs updated PLL

	 * mode GPIO settings, and a full reset cycle, including a new

	 * firmware upload.

 master, 64-bits per sample, 1 frame per sample */

 clock inversion */

 Enable VREF and VREF buffer */

 Disable VREF and VREF buffer */

	/*

	 * Let the pll_clkdiv variable default to something that won't happen

	 * at runtime. That way, we can postpone the firmware download from

	 * adau1701_reset() to a point in time when we know the correct PLL

	 * mode parameters.

 initalize with pre-configured pll mode settings */

 set up pin config */

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Analog Devices ADAU1372 Audio Codec driver

 *

 * Copyright 2016 Analog Devices Inc.

 * Author: Lars-Peter Clausen <lars@metafoo.de>

 8k, 12k, 24k, 48k */

 + 16k, 96k */

 +32k */

 + 192k */

 I2S mode */

 The other settings dont matter in I2S mode */

 We have 8 channels anything outside that is not supported */

 Mask is inverted in hardware */

 Takes about 1ms to lock */

		/*

		 * Clocks needs to be enabled before any other register can be

		 * accessed.

			/*

			 * This will turn everything off and reset the register

			 * map. No need to do any register writes to manually

			 * turn things off.

	/*

	 * The datasheet says that the internal MCLK always needs to run at

	 * 12.288MHz. Automatically choose a valid configuration from the

	 * external clock.

	/*

	 * Most of the registers are inaccessible unless the internal clock is

	 * enabled.

	/*

	 * No pinctrl support yet, put the multi-purpose pins in the most

	 * sensible mode for general purpose CODEC operation.

 SDATA OUT */

 CLOCKOUT */

 CLOCK OUT */

 SPDX-License-Identifier: GPL-2.0-only



 ALSA SoC Audio driver for CS47L15 codec



 Copyright (C) 2016-2019 Cirrus Logic, Inc. and

                         Cirrus Logic International Semiconductor Ltd.



 Mid-mode registers */

 Set IN1 to normal mode */

 Set IN1 to LP mode */

/*

 * mux_in widgets : arranged in the order of sources

 * specified in MADERA_MIXER_INPUT_ROUTES

 end of ordered widget list */

 Internal clock domains */

 quick exit if Madera irqchip driver hasn't completed probe */

 Latch volume update bits */

 SPDX-License-Identifier: GPL-2.0



 PCM3060 SPI driver



 Copyright (C) 2018 Kirill Marinushkin <kmarinushkin@birdec.com>

 CONFIG_OF */

 CONFIG_OF */

 SPDX-License-Identifier: GPL-2.0-only

/* Copyright (c) 2010-2011,2013-2015 The Linux Foundation. All rights reserved.

 *

 * max98357a.c -- MAX98357A ALSA SoC Codec driver

 SPDX-License-Identifier: GPL-2.0-only

/*

 * uda134x.c  --  UDA134X ALSA SoC Codec driver

 *

 * Modifications by Christian Pellegrin <chripell@evolware.org>

 *

 * Copyright 2007 Dension Audio Systems Ltd.

 * Author: Zoltan Devai

 *

 * Based on the WM87xx drivers by Liam Girdwood and Richard Purdie

/*

 * Write to the uda134x registers

 *

 It's an extended address register */

 set SYSCLK / fs ratio */

 set DAI format and word length */

	/* Anything between 256fs*8Khz and 512fs*48Khz should be acceptable

	   because the codec is slave. Of course limitations of the clock

	   master (the IIS controller) apply.

 codec supports only full slave mode */

 no support for clock inversion */

 We can't setup DAI format here as it depends on the word bit num */

 so let's just store the value for later */

 power on */

 power off */

 UDA1341 has the DAC/ADC power down in STATUS1 */

 UDA1340/4/5 has the DAC/ADC pwoer down in DATA0 11 */

 Common DAPM widgets */

 playback capabilities */

 capture capabilities */

 pcm operations */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cs42l56.c -- CS42L51 ALSA SoC I2C audio driver

 *

 * Copyright 2014 CirrusLogic, Inc.

 *

 * Author: Brian Austin <brian.austin@cirrus.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ALSA Soc PCM3008 codec support

 *

 * Author:	Hugo Villeneuve

 * Copyright (C) 2008 Lyrtech inc

 *

 * Based on AC97 Soc codec, original copyright follow:

 * Copyright 2005 Wolfson Microelectronics PLC.

 *

 * Generic PCM3008 support.

	/* DEM1  DEM0  DE-EMPHASIS_MODE

	 * Low   Low   De-emphasis 44.1 kHz ON

	 * Low   High  De-emphasis OFF

	 * High  Low   De-emphasis 48 kHz ON

	 * High  High  De-emphasis 32 kHz ON

 Configure DEM0 GPIO (turning OFF DAC De-emphasis). */

 Configure DEM1 GPIO (turning OFF DAC De-emphasis). */

 Configure PDAD GPIO. */

 Configure PDDA GPIO. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rt5645.c  --  RT5645 ALSA SoC audio codec driver

 *

 * Copyright 2013 Realtek Semiconductor Corp.

 * Author: Bard Liao <bardliao@realtek.com>

 IN2 can optionally be differential */

 0 = IN2N; 1 = GPIO5; 2 = GPIO11 */

 0 = IN2P; 1 = GPIO6; 2 = GPIO10; 3 = GPIO12 */

 Use level triggered irq */

 Invert JD1_1 status polarity */

 Invert HP detect status polarity */

 Value to assign to snd_soc_card.long_name */

 Some (package) variants have the headset-mic pin not-connected */

 {0, +20, +24, +30, +35, +40, +44, +50, +52} dB */

 {-6, -4.5, -3, -1.5, 0, 0.82, 1.58, 2.28} dB */

 The final setting of the table should be RT5645_EQ_CTRL2 */

 Speaker Output Volume */

 ClassD modulator Speaker Gain Ratio */

 Headphone Output Volume */

 OUTPUT Control */

 DAC Digital Volume */

 IN1/IN2 Control */

 INL/INR Volume Control */

 ADC Digital Volume Control */

 ADC Boost Volume Control */

 I2S2 function select */

 Digital Soft Volume Control */

/**

 * set_dmic_clk - Set parameter of dmic.

 *

 * @w: DAPM widget.

 * @kcontrol: The kcontrol of this widget.

 * @event: Event id.

 *

/**

 * rt5645_sel_asrc_clk_src - select ASRC clock source for a set of filters

 * @component: SoC audio component device.

 * @filter_mask: mask of filters.

 * @clk_src: clock source

 *

 * The ASRC function is for asynchronous MCLK and LRCK. Also, since RT5645 can

 * only support standard 32fs or 64fs i2s format, ASRC should be enabled to

 * support special i2s clock format such as Intel's 100fs(100 * sampling rate).

 * ASRC function will track i2s clock and generate a corresponding system clock

 * for codec. This function provides an API to select the clock source for a

 * set of filters specified by the mask. And the codec driver will turn on ASRC

 * for these filters if ASRC is selected as their clock source.

 Digital Mixer */

 Analog Input Mixer */

DAC1 L/R source*/ 
DAC2 L/R source*/ 
 Stereo1 ADC source */

 MX-27 [12] */

 MX-27 [11] */

 MX-27 [8] */

 Mono ADC source */

 MX-28 [12] */

 MX-28 [11] */

 MX-28 [8] */

 MX-28 [1:0] */

 MX-28 [4] */

 MX-28 [3] */

 MX-77 [9:8] */

 MX-78 [4:0] */

 MX-78 [15:14][13:12][11:10] */

 MX-77 [7:6][5:4][3:2] */

 MX-79 [14:12][10:8][6:4][2:0] */

 MX-7a [14:12][10:8][6:4][2:0] */

 MX-2d [3] [2] */

 MX-2d [1] [0] */

 MX-2F [13:12] */

 MX-31 [15] [13] [11] [9] */

 MX-9D [9:8] */

 depop parameters */

 headphone amp power on */

 headphone amp power down */

 headphone unmute sequence */

 headphone mute sequence */

 ASRC */

 Input Side */

 micbias */

 Input Lines */

 Boost */

 Input Volume */

 REC Mixer */

 ADCs */

 ADC Mux */

 ADC Mixer */

 ADC PGA */

 IF1 2 Mux */

 Digital Interface */

 Digital Interface Select */

 Audio Interface */

 Output Side */

 DAC mixer before sound effect  */

 DAC2 channel Mux */

 DAC Mixer */

 DACs */

 OUT Mixer */

 Ouput Volume */

 HPO/LOUT/Mono Mixer */

 PDM */

 Output Lines */

 for jack type detect */

			/* Power up necessary bits for JD if dapm is

 jack out */

 Not using rt5645 JD */

 read rt5645 jd1_1 status */

 jack in */

 for push button and jack out */

 button pressed */

			/* rt5650 can report three kinds of button behavior,

			   one click, double click and hold. However,

			   currently we will report button pressed/released

			   event. So all the three button behaviors are

 unpressed */

 button release */

 jack out */

 for JD function */

 The GPD pocket has a diff. mic, for the win this does not matter. */

		/*

		 * Match for the GPDwin which unfortunately uses somewhat

		 * generic dmi strings, which is why we test for 4 strings.

		 * Comparing against 23 other byt/cht boards, board_vendor

		 * and board_name are unique to the GPDwin, where as only one

		 * other board has the same board_serial and 3 others have

		 * the same default product_name. Also the GPDwin is the

		 * only device to have both board_ and product_name not set.

 The ALC3270 package has the headset-mic pin not-connected */

		/*

		 * Continue if optional gpiod is missing, bail for all other

		 * errors, including -EPROBE_DEFER

	/*

	 * Read after 400msec, as it is the interval required between

	 * read and power On.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * max98927.c  --  MAX98927 ALSA Soc Audio driver

 *

 * Copyright (C) 2016-2017 Maxim Integrated Products

 * Author: Ryan Lee <ryans.lee@maximintegrated.com>

 interface format */

 pcm channel configuration */

 pdm channel configuration */

 codec MCLK rate in master mode */

 BCLKs per LRCLK */

 match BCLKs per LRCLK */

 BCLK/LRCLK ratio calculation */

 match rate to closest value */

 BCLK configuration */

 pcm mode configuration */

 sampling rate configuration */

 set DAI_SR to correct LRCLK frequency */

 set sampling rate of IV */

 BCLK configuration */

 Channel size configuration */

 Rx slot configuration */

 Tx slot configuration */

 Tx slot Hi-Z configuration */

 Plabyack */

 Capture */

 Software Reset */

 IV default slot configuration */

 Set inital volume (+13dB) */

 Enable DC blocker */

 Enable IMON VMON DC blocker */

 Boost Output Voltage & Current limit */

 Measurement ADC config */

 Brownout Level */

 Envelope Tracking configuration */

 voltage, current slot configuration */

 Set interleave mode */

 update interleave mode info */

 regmap initialization */

 Wait for i2c port to be ready */

 Check Revision ID */

 voltage/current slot configuration */

 codec registeration */

 SPDX-License-Identifier: GPL-2.0



 ALSA SoC CX20721/CX20723 codec driver



 Copyright:	(C) 2017 Conexant Systems, Inc.

 Author:	Simon Ho, <Simon.ho@conexant.com>



 TODO: add support for TDM mode.



 codec private data */

/*

 * DAC/ADC Volume

 *

 * max : 74 : 0 dB

 *	 ( in 1 dB  step )

 * min : 0 : -74 dB

 Lookup table for PRE_DIV */

/*

 * cx2072x register cache.

/*

 * register initialization

 DC offset Calibration */

 Disable the PA */

 Set the speaker output gain */

 Enable 30 Hz High pass filter */

 Disable PCBEEP pad */

 Disable SnM mode */

 Enable PortD input */

 Enable GPIO7 pin for button */

 Enable UM for GPIO7 */

 Enable button response */

 Enable headset button */

 Power down class-D during idle */

 Enable I2S TX */

 Enable I2S RX */

 Update the MSB byte only */

 get suggested pre_div valuce from mclk frequency */

 Configure PLL settings */

 Int mode */

 frac mode */

 configure PLL tracking */

 disable PLL tracking */

 configure and enable PLL tracking */

 set master/slave */

 set format */

 clock inversion */

 Configures the BCLK output */

 Disables bclk output before setting new value */

 Configures BCLK rate */

 Data sizes if not using TDM */

 set master/slave */

 set format */

 clock inversion */

Playback*/

Capture*/

 Playback */

 Capture */

/*

 * FIXME: the whole jack detection code below is pretty platform-specific;

 * it has lots of implicit assumptions about the pins, etc.

 * However, since we have no other code and reference, take this hard-coded

 * setup for now.  Once when we have different platform implementations,

 * this needs to be rewritten in a more generic form, or moving into the

 * platform data.

 No-sticky input type */

 Use GPOI0 as interrupt pin */

 Enables unsolitited message on PortA */

 support both nokia and apple headset set. Monitor time = 275 ms */

 Disable TIP detection */

 Switch MusicD3Live pin to GPIO */

 Apple headset */

			/*

			 * Nokia headset (type & 0x4) and

			 * regular Headphone

 clear interrupt */

	/*

	 * FIXME: below is, again, a very platform-specific init sequence,

	 * but we keep the code here just for simplicity.  It seems that all

	 * existing hardware implementations require this, so there is no very

	 * much reason to move this out of the codec driver to the platform

	 * data.

	 * But of course it's no "right" thing; if you are a good boy, don't

	 * read and follow the code like this!

 configure PortC as input device */

/*

 * DAI ops

 playback and capture */

 plabayck only, return echo reference to Conexant DSP chip */

 plabayck only, return echo reference through I2S TX */

 Needs custom read/write functions for various register lengths */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rt5514.c  --  RT5514 ALSA SoC audio codec driver

 *

 * Copyright 2015 Realtek Semiconductor Corp.

 * Author: Oder Chiou <oder_chiou@realtek.com>

 Reset */

 LDO_I_limit */

 I2C bypass enable */

 mini-core reset */

 I2C bypass disable */

 PIN config */

 PLL3(QN)=RCOSC*(10+2) */

 PLL3 source=RCOSC, fsi=rt_clk */

 Power on RCOSC, pll3 */

 DSP clk source = pll3, ENABLE DSP clk */

 Enable DSP clk auto switch */

 Reduce DSP power */

 {-3, 0, +3, +4.5, +7.5, +9.5, +12, +14, +17} dB */

 DSP run */

 ADC Mixer*/

 DMIC Source */

/**

 * rt5514_calc_dmic_clk - Calculate the frequency divider parameter of dmic.

 *

 * @component: only used for dev_warn

 * @rate: base clock rate.

 *

 * Choose divider parameter that gives the highest possible DMIC frequency in

 * 1MHz - 3MHz range.

 find divider that gives DMIC frequency below 3.072MHz */

 Input Lines */

 ADC Mux */

 ADC Mixer */

 ADC PGA */

 Audio Interface */

			/*

			 * If the DSP is enabled in start of recording, the DSP

			 * should be disabled, and sync back to normal recording

			 * settings to make sure recording properly.

	/*

	 * Add a bogus read to avoid rt5514's confusion after s2r in case it

	 * saw glitches on the i2c lines and thought the other side sent a

	 * start bit.

	/*

	 * The rt5514 can get confused if the i2c lines glitch together, as

	 * can happen at bootup as regulators are turned off and on.  If it's

	 * in this glitched state the first i2c read will fail, so we'll give

	 * it one change to retry.

/*

 * Cirrus Logic CS42448/CS42888 Audio CODEC Digital Audio Interface (DAI) driver

 *

 * Copyright (C) 2014 Freescale Semiconductor, Inc.

 *

 * Author: Nicolin Chen <Guangyu.Chen@freescale.com>

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2. This program is licensed "as is" without any warranty of any

 * kind, whether express or implied.

 codec private data */

 -127.5dB to 0dB with step of 0.5dB */

 -64dB to 24dB with step of 0.5dB */

 Playback */

 Capture */

 Capture */

/*

 * According to reference mannual, define the cs42xx8_ratio struct

 * MFreq2 | MFreq1 | MFreq0 |     Description     | SSM | DSM | QSM |

 * 0      | 0      | 0      |1.029MHz to 12.8MHz  | 256 | 128 |  64 |

 * 0      | 0      | 1      |1.536MHz to 19.2MHz  | 384 | 192 |  96 |

 * 0      | 1      | 0      |2.048MHz to 25.6MHz  | 512 | 256 | 128 |

 * 0      | 1      | 1      |3.072MHz to 38.4MHz  | 768 | 384 | 192 |

 * 1      | x      | x      |4.096MHz to 51.2MHz  |1024 | 512 | 256 |

 Set DAI format */

 Set master/slave audio interface */

 Get functional mode for tx and rx according to rate */

 Is the ratio[tx] valid ? */

 Is the ratio[!tx] valid ? */

		/*

		 * Both ratio[tx] and ratio[!tx] is valid, then we get

		 * a proper MFreq.

 Clear stored rate */

 Power Control */

 Functional Mode */

 Interface Formats */

 ADC Control & DAC De-Emphasis */

 Transition Control */

 DAC Channel Mute */

 Volume Control AOUT1 */

 Volume Control AOUT2 */

 Volume Control AOUT3 */

 Volume Control AOUT4 */

 Volume Control AOUT5 */

 Volume Control AOUT6 */

 Volume Control AOUT7 */

 Volume Control AOUT8 */

 DAC Channel Invert */

 Volume Control AIN1 */

 Volume Control AIN2 */

 Volume Control AIN3 */

 Volume Control AIN4 */

 Volume Control AIN5 */

 Volume Control AIN6 */

 ADC Channel Invert */

 Status Control */

 Status Mask */

 MUTEC Pin Control */

 Mute all DAC channels */

 sentinel */ }

 Make sure hardware reset done */

 Validate the chip ID */

 The top four bits of the chip ID should be 0000 */

 Each adc supports stereo input */

 Make sure hardware reset done */

/* SPDX-License-Identifier: GPL-2.0-only

 *

 * ALSA SoC TLV320AIC3x codec driver I2C interface

 *

 * Author:      Arun KS, <arunks@mistralsolutions.com>

 * Copyright:   (C) 2008 Mistral Solutions Pvt Ltd.,

 *

 * Based on sound/soc/codecs/wm8731.c by Richard Purdie

 *

 SPDX-License-Identifier: GPL-2.0

 Audio driver for PCM1789

 Copyright (C) 2018 Bootlin

 Mylène Josserand <mylene.josserand@bootlin.com>

 Perform a software reset to remove codec from desynchronized state */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2008 Juergen Beisert, kernel@pengutronix.de

 * Copyright 2009 Sascha Hauer, s.hauer@pengutronix.de

 * Copyright 2012 Philippe Retornaz, philippe.retornaz@epfl.ch

 *

 * Initial development of this code was funded by

 * Phytec Messtechnik GmbH, https://www.phytec.de

/*

 * MC13783_AUDIO_CODEC and MC13783_AUDIO_DAC mostly share the same

 * register layout

 Mapping between sample rates and register value */

 DAI mode */

 DAI clock inversion */

 DAI clock master masks */

	/*

	 * In synchronous mode force the voice codec into slave mode

	 * so that the clock / framesync from the stereo DAC is used

 12000000, invalid for voice codec */

 3686400, invalid for voice codec */

 primary timeslot RX/TX(?) is 0 */

 secondary timeslot TX is 1 */

/* Virtual mux. The chip does the input selection automatically

 Input */

 Output */

 Input */

 Output */

 these are the reset values */

 Make sure VAUDIOON is off */

/*

 * The mc13783 has two SSI ports, both of them can be routed either

 * to the voice codec or the stereo DAC. When two different SSI ports

 * are used for the voice codec and the stereo DAC we can do different

 * formats and sysclock settings for playback and capture

 * (mc13783-hifi-playback and mc13783-hifi-capture). Using the same port

 * forces us to use symmetric rates (mc13783-hifi).

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2018-2020, The Linux Foundation. All rights reserved.

 SPK_L */

 SPK_R */

 RX0 */

 RX1 */

 8K */

 16K */

 24K */

 32K */

 48K */

 96K */

 192K */

 384K */

 44.1K */

 48K */

 96K */

 192K */

 RX INT0 */

 RX INT1 */

 WSA Macro */

 Update volatile list for rx/tx macros */

 8 but with 32 bit read/write */

/**

 * wsa_macro_set_spkr_mode - Configures speaker compander and smartboost

 * settings based on speaker mode.

 *

 * @component: codec instance

 * @mode: Indicates speaker configuration mode.

 *

 * Returns 0 on success or -EINVAL on error.

		/*

		 * Loop through all interpolator MUX inputs and find out

		 * to which interpolator input, the cdc_dma rx port

		 * is connected

 sample_rate is in Hz */

 set mixing path rate */

 set primary path sample rate */

 9.6MHz MCLK, set value 0x00 if other frequency */

 Enable V&I sensing */

 Disable V&I sensing */

 Enable Compander Clock */

 Enable Softclip clock and mux */

 Enable Softclip control */

 Compander gain in WSA_MACRO_SPKR_MODE1 case is 12 dB */

 Default case compander gain is 15 dB */

 Apply ear spkr gain only if compander is enabled */

 For example, val is -8(-12+5-1) for 4dB of gain */

		/*

		 * Reset RX0 volume to 0 dB if compander is enabled and

		 * ear_spkr_gain is non-zero.

 Reset if needed */

 apply gain after int clk is enabled */

 default set to 48k */

 VI Feedback */

 reset swr ip */

 Bring out of reset */

 set SPKR rate to FS_2P4_3P072 */

 set MCLK and NPL rates */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * max9877.c  --  amp driver for max9877

 *

 * Copyright (C) 2009 Samsung Electronics Co.Ltd

 * Author: Joonyoung Shim <jy0922.shim@samsung.com>

 Ensure the device is in reset state */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * max98926.c -- ALSA SoC MAX98926 driver

 * Copyright 2013-15 Maxim Integrated Products

 IRQ Enable0 */

 IRQ Enable1 */

 IRQ Enable2 */

 IRQ Clear0 */

 IRQ Clear1 */

 IRQ Clear2 */

 Map0 */

 Map1 */

 Map2 */

 Map3 */

 Map4 */

 Map5 */

 Map6 */

 Map7 */

 Map8 */

 DAI Clock Mode 1 */

 DAI Clock Mode 2 */

 DAI Clock Divider Denominator MSBs */

 DAI Clock Divider Denominator LSBs */

 DAI Clock Divider Numerator MSBs */

 DAI Clock Divider Numerator LSBs */

 Format */

 TDM Slot Select */

 DOUT Configuration VMON */

 DOUT Configuration IMON */

 DOUT Configuration VBAT */

 DOUT Configuration VBST */

 DOUT Configuration FLAG */

 DOUT HiZ Configuration 1 */

 DOUT HiZ Configuration 2 */

 DOUT HiZ Configuration 3 */

 DOUT HiZ Configuration 4 */

 DOUT Drive Strength */

 Filters */

 Gain */

 Gain Ramping */

 Speaker Amplifier */

 Threshold */

 ALC Attack */

 ALC Atten and Release */

 ALC Infinite Hold Release */

 ALC Configuration */

 Boost Converter */

 Block Enable */

 Configuration */

 Global Enable */

 Boost Limiter */

 set VMON slots */

 set IMON slots */

 enable interleave mode */

 set interleave slots */

 BCLK/LRCLK ratio calculation */

 find the closest rate */

 set DAI_SR to correct LRCLK frequency */

 Hi-Z all the slots */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PCM179X ASoC SPI driver

 *

 * Copyright (c) Amarula Solutions B.V. 2013

 *

 *     Michael Trimarchi <michael@amarulasolutions.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Codec driver for ST STA350 2.1-channel high-efficiency digital audio system

 *

 * Copyright: 2014 Raumfeld GmbH

 * Author: Sven Brandau <info@brandau.biz>

 *

 * based on code from:

 *	Raumfeld GmbH

 *	  Johannes Stezenbach <js@sig21.net>

 *	Wolfson Microelectronics PLC.

 *	  Mark Brown <broonie@opensource.wolfsonmicro.com>

 *	Freescale Semiconductor, Inc.

 *	  Timur Tabi <timur@freescale.com>

 Power-up register defaults */

 regulator power supply names */

 digital supply, 3.3V */

 pll supply, 3.3V */

 power amp supply, 5V - 26V */

 codec private data */

/*

 * byte array controls for setting biquad, mixer, scaling coefficients;

 * for biquads all five coefficients need to be set in one go,

 * mixer and pre/postscale coefs can be set individually;

 * each coef is 24bit, the bytes are ordered in the same way

 * as given in the STA350 data sheet (big endian; b1, b2, a1, a2, b0)

 preserve reserved bits in STA350_CFUD */

	/*

	 * chip documentation does not say if the bits are self clearing,

	 * so do it explicitly

 preserve reserved bits in STA350_CFUD */

	/*

	 * chip documentation does not say if the bits are self clearing,

	 * so do it explicitly

 preserve reserved bits in STA350_CFUD */

		/*

		 * chip documentation does not say if the bits are

		 * self-clearing, so do it explicitly

 mute during register sync */

 VOL */

 CONFD */

 CONFE */

 MUTE */

 AUTOx */

 CxCFG */

 TONE */

/*

 * depending on mode, the attack/release thresholds have

 * two different enum definitions; provide both

 MCLK interpolation ratio per fs */

 MCLK to fs clock ratios */

/**

 * sta350_set_dai_sysclk - configure MCLK

 * @codec_dai: the codec DAI

 * @clk_id: the clock ID (ignored)

 * @freq: the MCLK input frequency

 * @dir: the clock direction (ignored)

 *

 * The value of MCLK is used to determine which sample rates are supported

 * by the STA350, based on the mcs_ratio_table.

 *

 * This function must be called by the machine driver's 'startup' function,

 * otherwise the list of supported sample rates will not be available in

 * time for ALSA.

/**

 * sta350_set_dai_fmt - configure the codec for the selected audio format

 * @codec_dai: the codec DAI

 * @fmt: a SND_SOC_DAIFMT_x value indicating the data format

 *

 * This function takes a bitmask of SND_SOC_DAIFMT_x bits and programs the

 * codec accordingly.

/**

 * sta350_hw_params - program the STA350 with the given hardware parameters.

 * @substream: the audio stream

 * @params: the hardware parameters to set

 * @dai: the SOC DAI (ignored)

 *

 * This function programs the hardware with the values provided.

 * Specifically, the sample rate and the data format.

/**

 * sta350_set_bias_level - DAPM callback

 * @component: the component device

 * @level: DAPM power level

 *

 * This is called by ALSA to put the component into low power mode

 * or to wake it up.  If the component is powered off completely

 * all registers must be restored after power on.

 Full power on */

 Power down */

 The chip runs through the power down sequence for us */

 power down: low */

 CONFA */

 CONFC */

 CONFE */

  CONFF */

 channel to output mapping */

 miscellaneous registers */

 initialize coefficient shadow RAM with reset values */

 Bias level configuration will have done an extra enable */

 CONFE */

 CONFF */

 MISC */

 GPIOs */

 regulators */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for ADAU1381/ADAU1781 CODEC

 *

 * Copyright 2014 Analog Devices Inc.

 *  Author: Lars-Peter Clausen <lars@metafoo.de>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * DA7213 ALSA SoC Codec Driver

 *

 * Copyright (c) 2013 Dialog Semiconductor

 *

 * Author: Adam Thomson <Adam.Thomson.Opensource@diasemi.com>

 * Based on DA9055 ALSA SoC codec driver.

 Gain and Volume */

 -54dB */

 -52.5dB to 15dB */

 -78dB to 12dB */

 0dB to 36dB */

 ADC and DAC voice mode (8kHz) high pass cutoff value */

 ADC and DAC high pass filter cutoff value */

 Gain ramping rate value */

 DAC noise gate setup time value */

 DAC noise gate rampup rate value */

 DAC noise gate rampdown rate value */

 DAC soft mute rate value */

 ALC Attack Rate select */

 ALC Release Rate select */

 ALC Hold Time select */

 ALC Input Signal Tracking rate select */

/*

 * Control Functions

 Select the left or right channel and capture data */

 Select middle 8 bits for read back from data register */

 Select top 8 bits for read back from data register */

 Calculate average for Left and Right data */

 Left Data */

 Right Data */

 Calculate DC offset */

 Enable analog/digital gain mode & offset cancellation */

 Begin auto calibration and wait for completion */

 If auto calibration fails, fall back to digital gain only mode */

 Enable analog/digital gain mode & offset cancellation */

 Save current values from ADC control registers */

 Save current values from MIXIN_L/R_SELECT registers */

 Save current values from MIC control registers */

 Enable ADC Left and Right */

 Enable MIC paths */

 Mute MIC PGAs */

 Perform calibration */

 Restore MIXIN_L/R_SELECT registers to their original states */

 Restore ADC control registers to their original states */

 Restore original values of MIC control registers */

 If ALC in operation, make sure calibrated offsets are updated */

 Force ALC offset calibration if enabling ALC */

/*

 * KControls

 Volume controls */

 DAC Equalizer controls */

 High Pass Filter and Voice Mode controls */

 Mute controls */

 Zero Cross controls */

 Gain Ramping controls */

 DAC Noise Gate controls */

 DAC Routing & Inversion */

 DMIC controls */

 ALC Controls */

	/*

	 * Rate at which input signal envelope is tracked as the signal gets

	 * larger

	/*

	 * Rate at which input signal envelope is tracked as the signal gets

	 * smaller

/*

 * DAPM

/*

 * Enums

 MIC PGA source select */

 DAI routing select */

 DAC routing select */

/*

 * Mixer Controls

 Mixin Left */

 Mixin Right */

 Mixout Left */

 Mixout Right */

/*

 * DAPM Events

 Enable DAI clks for master mode */

 PC synchronised to DAI */

 If SRM not enabled then nothing more to do */

 Assist 32KHz mode PLL lock */

 Check SRM has locked */

 Revert 32KHz PLL lock udpates if applied previously */

 PC free-running */

 Disable DAI clks if in master mode */

/*

 * DAPM widgets

	/*

	 * Power Supply

	/*

	 * Input & Output

 Use a supply here as this controls both input & output DAIs */

	/*

	 * Input

 Input Lines */

 MUXs for Mic PGA source selection */

 Input PGAs */

 Mic Biases */

 Input Mixers */

 ADCs */

 DAI */

	/*

	 * Output

 DAI */

 DACs */

 Output Mixers */

 Output PGAs */

 Charge Pump */

 Output Lines */

/*

 * DAPM audio route definition

 Dest       Connecting Widget    source */

 Input path */

 Output path */

 Set DAI format */

 Set sampling rate */

 Set master/slave mode */

 Set clock normal/inverted */

 The bclk is inverted wrt ASoC conventions */

 Only I2S is supported */

 L data MSB after FRM LRC */

 L data MSB during FRM LRC */

 By default only 64 BCLK per WCLK is supported */

 Supported PLL input frequencies are 32KHz, 5MHz - 54MHz. */

 Workout input divider based on MCLK rate */

 32KHz PLL Mode */

 Configure PLL */

 Calculate dividers for PLL */

 Write PLL dividers */

 Enable PLL */

 Assist 32KHz mode PLL lock */

 DAI operations */

 Playback Capabilities */

 Capture Capabilities */

 Slave mode needs SRM for non-harmonic frequencies */

 PLL is not required for harmonic frequencies */

 Disable PLL in standby */

 Enable MCLK for transition to ON state */

 Enable VMID reference & master bias */

 Remove MCLK */

 Disable VMID reference & master bias */

 DT */

 Default to using ALC auto offset calibration mode. */

 Default PC counter to free-running */

 Enable all Gain Ramps */

	/*

	 * There are two separate control bits for input and output mixers as

	 * well as headphone and line outs.

	 * One to enable corresponding amplifier and other to enable its

	 * output. As amplifier bits are related to power control, they are

	 * being managed by DAPM while other (non power related) bits are

	 * enabled here

 Handle DT/Platform data */

 Set platform data values */

 Set Mic Bias voltages */

 Set DMIC configuration */

 Check if MCLK provided */

		/* Do automatic PLL handling assuming fixed clock until

		 * set_pll() has been called. This makes the codec usable

 Get required supplies */

 I2C codec control layer */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * wm9713.c  --  ALSA Soc WM9713 codec support

 *

 * Copyright 2006-10 Wolfson Microelectronics PLC.

 * Author: Liam Girdwood <lrg@slimlogic.co.uk>

 *

 *  Features:-

 *

 *   o Support for AC97 Codec, Voice DAC and Aux DAC

 *   o Support for DAPM

 PLL input frequency */

 record mic mixer 0 */

 record mux hp 1 */

 record mux mono 2 */

 record mux left 3 */

 record mux right 4*/

 record step size 5 */

 alc source select 6*/

 mono input select 7 */

 speaker left input select 8 */

 speaker right input select 9 */

 headphone left input 10 */

 headphone right input 11 */

 out 3 source 12 */

 out 4 source 13 */

 dac invert 1 14 */

 dac invert 2 15 */

 bass control 16 */

 noise gate type 17 */

 mic selection 18 */

 mic selection 19 */

 Gracefully shut down the voice interface. */

/* We have to create a fake left and right HP mixers because

 * the codec only has a single control that is shared by both channels.

 * This makes it impossible to determine the audio path using the current

 * register map, thus we add a new (virtual) register to help determine the

 * audio route within the device.

 Left Headphone Mixers */

 Right Headphone Mixers */

 headphone capture mux */

 headphone mic mux */

 Speaker Mixer */

 Mono Mixer */

 mono mic mux */

 mono output mux */

 speaker left output mux */

 speaker right output mux */

 headphone left output mux */

 headphone right output mux */

 Out3 mux */

 Out4 mux */

 DAC inv mux 1 */

 DAC inv mux 2 */

 Capture source left */

 Capture source right */

 mic source */

 mic source B virtual control */

 left HP mixer */

 right HP mixer */

 virtual mixer - mixes left & right channels for spk and mono */

 speaker mixer */

 mono mixer */

 DAC inv mux 1 */

 DAC inv mux 2 */

 headphone left mux */

 headphone right mux */

 speaker left mux */

 speaker right mux */

 mono mux */

 out 3 mux */

 out 4 mux */

 output pga */

 input pga */

 left capture select */

 right capture select */

 left ADC */

 right ADC */

 mic */

 headphone capture */

 mono capture */

 Speaker Output Volume */

 Headphone Output Volume */

 Out3/OUT4 Volume */

 Mono Volume */

 LINEIN Volume */

 DAC PGA Volume */

 MIC PGA Volume */

 MIC Routing Control */

 Record PGA Volume */

 Record Routing */

 PCBEEP Volume */

 VxDAC Volume */

 AUXDAC Volume */

 Output PGA Mux */

 DAC 3D control */

 DAC Tone Control*/

 MIC Input Select & Bias */

 Output Volume Mapping & Jack */

 Powerdown Ctrl/Stat*/

 Extended Audio ID */

 Extended Audio Start/Ctrl */

 Audio DACs Sample Rate */

 AUXDAC Sample Rate */

 Audio ADCs Sample Rate */

 PCM codec control */

 SPDIF control */

 Powerdown 1 */

 Powerdown 2 */

 General Purpose */

 Fast Power-Up Control */

 MCLK/PLL Control */

 MCLK/PLL Control */

 GPIO Pin Configuration */

 GPIO Pin Polarity / Type */

 GPIO Pin Sticky */

 GPIO Pin Wake-Up */

 GPIO Pin Status */

 GPIO Pin Sharing */

 GPIO PullUp/PullDown */

 Additional Functions 1 */

 Additional Functions 2 */

 ALC Control */

 ALC / Noise Gate Control */

 AUXDAC input control */

 Digitiser Reg 1 */

 Digitiser Reg 2 */

 Digitiser Reg 3 */

 Digitiser Read Back */

 PLL divisors */

/* The size in bits of the PLL divide multiplied by 10

 The PLL output is always 98.304MHz. */

 If the input frequency is over 14.4MHz then scale it down. */

	/* Low frequency sources require an additional divide in the

	 * loop.

 Check if we need to round */

 Move down to proper range now rounding is done */

/*

 * Please note that changing the PLL input frequency may require

 * resynchronisation with the AC97 controller.

 turn PLL off ? */

 disable PLL power and select ext source */

 write the fractional k to the reg 0x46 pages */

 K [21:20] */

 K [19:16] */

 K [15:12] */

 K [11:8] */

 K [7:4] */

 K [3:0] */

 turn PLL on and select as source */

 wait 10ms AC97 link frames for the link to stabilise */

/*

 * Tristate the PCM DAI lines, tristate can be disabled by calling

 * wm9713_set_dai_fmt()

/*

 * Configure WM9713 clock dividers.

 * Voice DAC needs 256 FS

 clock masters */

 clock inversion */

 DAI format */

 enable PCM interface in master mode */

 enable thermal shutdown */

 enable master bias and vmid */

 disable everything including AC link */

	/* Disable everything except touchpanel - that will be handled

	 * by the touch driver and left disabled if touch is not in

 do we need to re-start the PLL ? */

 only synchronise the codec if warm reset failed */

 unmute the adc - move to kcontrol */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8804-i2c.c  --  WM8804 S/PDIF transceiver driver - I2C

 *

 * Copyright 2015 Cirrus Logic Inc

 *

 * Author: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>

 Wolfson PCI ID + part ID */

 Cirrus Logic PCI ID + part ID */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * da7219-aad.c - Dialog DA7219 ALSA SoC AAD Driver

 *

 * Copyright (c) 2015 Dialog Semiconductor Ltd.

 *

 * Author: Adam Thomson <Adam.Thomson.Opensource@diasemi.com>

/*

 * Detection control

 Send an initial empty report */

 Enable/Disable jack detection */

/*

 * Button/HPTest work

 Drive headphones/lineout */

 Make sure mic bias is up */

	/*

	 * Mic bias pulse required to enable mic, must be done before enabling

	 * button detection to prevent erroneous button readings.

 Pulse higher level voltage */

 Lock DAPM, Kcontrols affected by this test and the PLL */

 Ensure MCLK is available for HP test procedure */

	/*

	 * If MCLK not present, then we're using the internal oscillator and

	 * require different frequency settings to achieve the same result.

	 *

	 * If MCLK is present, but PLL is not enabled then we enable it here to

	 * ensure a consistent detection procedure.

 Ensure gain ramping at fastest rate */

 Bypass cache so it saves current settings */

 Make sure Tone Generator is disabled */

 Enable HPTest block, 1KOhms check */

 Set gains to 0db */

 Disable DAC filters, EQs and soft mute */

 Enable HP left & right paths */

	/*

	 * If we're running from the internal oscillator then give audio paths

	 * time to settle before running test.

 Configure & start Tone Generator */

 Grab comparator reading */

 Stop tone generator */

 Restore original settings from cache */

 Disable HPTest block */

	/*

	 * If we're running from the internal oscillator then give audio paths

	 * time to settle before allowing headphones to be driven as required.

 Restore gain ramping rate */

 Drive Headphones/lineout */

 Restore PLL to previous configuration, if re-configured */

 Remove MCLK, if previously enabled */

	/*

	 * Only send report if jack hasn't been removed during process,

	 * otherwise it's invalid and we drop it.

/*

 * IRQ

 Read current IRQ events */

 Read status register for jack insertion & type status */

 Clear events */

 Jack Insertion */

 Jack type detection */

			/*

			 * If 4-pole, then enable button detection, else perform

			 * HP impedance test to determine output type to report.

			 *

			 * We schedule work here as the tasks themselves can

			 * take time to complete, and in particular for hptest

			 * we want to be able to check if the jack was removed

			 * during the procedure as this will invalidate the

			 * result. By doing this as work, the IRQ thread can

			 * handle a removal, and we can check at the end of

			 * hptest if we have a valid result or not.

 Button support for 4-pole jack */

 Button Press */

 Button Release */

 Jack removal */

 Un-drive headphones/lineout */

 Ensure button detection disabled */

 Disable mic bias */

 Cancel any pending work */

/*

 * DT/ACPI to pdata conversion

/*

 * Suspend/Resume

 Disable jack detection during suspend */

		/*

		 * If we have a 4-pole jack inserted, then micbias will be

		 * enabled. We can disable micbias here, and keep a note to

		 * re-enable it on resume. If jack removal occurred during

		 * suspend then this will be dealt with through the IRQ handler.

 Re-enable micbias if previously enabled for 4-pole jack */

 Re-enable jack detection */

/*

 * Init/Exit

 Handle any DT/ACPI/platform data */

 Disable button detection */

 Unmask AAD IRQs */

 Mask off AAD IRQs */

/*

 * AAD related I2C probe handling

 Retrieve any DT/ACPI/platform data */

 SPDX-License-Identifier: GPL-2.0



 mt6359-accdet.c  --  ALSA SoC mt6359 accdet driver



 Copyright (C) 2021 MediaTek Inc.

 Author: Argus Lin <argus.lin@mediatek.com>



 global variable definitions */

 mt6359 accdet capability */

 local function declaration */

 ESD switches off */

 enable RG_EINT0CONFIGACCDET */

 enable RG_EINT1CONFIGACCDET */

select 500k, use internal resistor */

 disable inverter */

 disable inverter */

 set DA stable signal */

 set DA stable signal */

 adjust digital setting */

 adjust analog setting */

 set debounce to 1ms */

 ESD switches on */

 disable RG_EINT0CONFIGACCDET */

 disable RG_EINT1CONFIGACCDET */

 enable eint0cen */

 enable eint0cen */

 enable eint1cen */

 enable inverter */

 enable inverter */

 clear accdet int, modify  for fix interrupt trigger twice error */

 recover accdet debounce0,3 */

 set and clear initial bit every eint interrupt */

 enable ACCDET unit */

 get jack detection status */

 adjust eint digital/analog setting */

 debounce8(auxadc debounce) is default, needn't get from dts */

 eint detection mode equals to EINT HW Mode */

 eint use internal resister */

 enable eint cmpmem pwm */

 DA signal stable */

 after receive n+1 number, interrupt issued. */

	/* setting HW mode, enable digital fast discharge

	 * if use EINT0 & EINT1 detection, please modify

	 * ACCDET_HWMODE_EN_ADDR[2:1]

 enable PWM */

 enable inverter detection */

 disable inverter detection */

 ESD switches on */

 before playback, set NCP pull low before nagative voltage */

 current detect set 0.25uA */

 init the debounce time (debounce/32768)sec */

 clear high micbias1 voltage setting */

 init pwm frequency, duty & rise/falling delay */

 micbias1 <= 2.7V */

 micbias1 = 2.8v */

 micbias1 = 2.85v */

 mic mode setting */

 ACC mode*/

 enable analog fast discharge */

 DCC mode Low cost mode without internal bias */

 enable analog fast discharge */

		/* DCC mode Low cost mode with internal bias,

		 * bit8 = 1 to use internal bias

 enable analog fast discharge */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson SA 2012

 *

 * Author: Ola Lilja <ola.o.lilja@stericsson.com>,

 *         Kristoffer Karlsson <kristoffer.karlsson@stericsson.com>,

 *         Roger Nilsson <roger.xr.nilsson@stericsson.com>,

 *         for ST-Ericsson.

 *

 *         Based on the early work done by:

 *         Mikko J. Lehto <mikko.lehto@symbio.com>,

 *         Mikko Sarmanne <mikko.sarmanne@symbio.com>,

 *         Jarmo K. Kuronen <jarmo.kuronen@symbio.com>,

 *         for ST-Ericsson.

 *

 * License terms:

 Macrocell value definitions */

 Macrocell register definitions */

 Bank AB8500_MISC */

 Nr of FIR/IIR-coeff banks in ANC-block */

/* Minimum duration to keep ANC IIR Init bit high or

 Sidetone states */

 Analog microphones */

 Private data for AB8500 device-driver */

 Sidetone */

 ANC */

/*

 * Read'n'write functions

 Read a register from the audio-bank of AB8500 */

 Write to a register in the audio-bank of AB8500 */

/*

 * Controls - DAPM

 Earpiece */

 Earpiece source selector */

 LineOut */

 LineOut source selector */

 Handsfree */

 Speaker Left - ANC selector */

 Speaker Right - ANC selector */

 Mic 1 */

 Mic 1 - Mic 1a or 1b selector */

 Mic 1 - AD3 - Mic 1 or DMic 3 selector */

 Mic 1 - AD6 - Mic 1 or DMic 6 selector */

 Mic 2 */

 Mic 2 - AD5 - Mic 2 or DMic 5 selector */

 LineIn */

 LineIn left - AD1 - LineIn Left or DMic 1 selector */

 LineIn right - Mic 2 or LineIn Right selector */

 LineIn right - AD2 - LineIn Right or DMic2 selector */

 ANC */

 ANC - Enable/Disable */

 ANC to Earpiece - Mute */

 Sidetone left */

 Sidetone left - Input selector */

 Sidetone right path */

 Sidetone right - Input selector */

 Vibra */

/*

 * DAPM-widgets

 Clocks */

 Regulators */

 Power */

 Main supply node */

 DA/AD */

 Headset path */

 LineOut path */

 Earpiece path */

 Handsfree path */

 Vibrator path */

 Mic 1 */

 Mic 2 */

 LineIn */

 LineIn Bypass path */

 LineIn, Mic 2 */

 HD Capture path */

 Digital Microphone path */

 Acoustical Noise Cancellation path */

 Sidetone Filter path */

/*

 * DAPM-routes

 Power AB8500 audio-block when AD/DA is active */

 ANC Configure */

 AD/DA */

 Powerup charge pump if DA1/2 is in use */

 Headset path */

 HF or LineOut path */

 HF path */

 Earpiece path */

 LineOut path stereo */

 LineOut path mono */

 LineOut path */

 Vibrator path */

 Mic 2 */

 LineIn */

 LineIn, Mic 2 */

 Mic 1 */

 HD Capture path */

 Digital Microphone path */

 LineIn Bypass path */

 ANC path (Acoustic Noise Cancellation) */

 Sidetone Filter path */

 ANC FIR-coefficients configuration sequence */

 ANC IIR-coefficients configuration sequence */

 ANC IIR-/FIR-coefficients configuration sequence */

/*

 * Control-events

 Write sidetone FIR-coefficients configuration sequence */

/*

 * Controls - Non-DAPM ASoC

 -32dB = Mute */

 -63dB = Mute */

 -1dB = Mute */

 -38dB = Mute */

 Earpiece */

 DA */

 Digital interface - DA from slot mapping */

 Digital interface - AD to slot mapping */

 Digital interface - Burst mode */

 Sidetone */

 ANC */

 Charge pump */

 Headset */

 Earpiece */

 HandsFree */

 Vibra */

 HandsFree, Vibra */

 Mic 1, Mic 2, LineIn */

 Mic 1 */

 Mic 2 */

 LineIn */

 DMic */

 Digital gains */

 Analog loopback */

 Digital interface - DA from slot mapping */

 Digital interface - AD to slot mapping */

 Digital interface - Loopback */

 Digital interface - Burst FIFO */

 ANC */

 Sidetone */

/*

 * Extended interface for codec-driver

 Reset audio-registers and disable 32kHz-clock output 2 */

 Set DMic-clocks to outputs */

 Attach regulators to AMic DAPM-paths */

 Set AMic-configuration */

 Gates clocking according format mask */

 continuous clock */

 clock is gated */

 Set clock gating */

 Setting data transfer format */

 I2S mode */

 L data MSB after FRM LRC */

 L data MSB during FRM LRC */

 normal bit clock + frame */

 normal BCLK + inv FRM */

 invert BCLK + nor FRM */

 invert BCLK + FRM */

 Setup TDM clocking according to slot count */

 Setup TDM DA according to active tx slots */

 Setup TDM AD according to active RX-slots */

 Has a non-standard Vamic been requested? */

 Override HW-defaults */

 Add filter controls */

 Create driver private-data struct */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ALSA SoC SPDIF DIT driver

 *

 *  This driver is used by controllers which can operate in DIT (SPDI/F) where

 *  no codec is needed.  This file provides stub codec that can be used

 *  in these configurations. TI DaVinci Audio controller uses this driver.

 *

 * Author:      Steve Chen,  <schen@mvista.com>

 * Copyright:   (C) 2009 MontaVista Software, Inc., <source@mvista.com>

 * Copyright:   (C) 2009  Texas Instruments, India

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * wm8727.c

 *

 *  Created on: 15-Oct-2009

 *      Author: neil.jones@imgtec.com

 *

 * Copyright (C) 2009 Imagination Technologies Ltd.

/*

 * Note this is a simple chip with no configuration interface, sample rate is

 * determined automatically by examining the Master clock and Bit clock ratios

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * CS4271 SPI audio driver

 *

 * Copyright (c) 2010 Alexander Sverdlin <subaparts@yandex.ru>

 SPDX-License-Identifier: GPL-2.0



 PCM3060 I2C driver



 Copyright (C) 2018 Kirill Marinushkin <kmarinushkin@birdec.com>

 CONFIG_OF */

 CONFIG_OF */

 SPDX-License-Identifier: GPL-2.0



 Analog Devices ADAU7118 8 channel PDM-to-I2S/TDM Converter Standalone Hw

 driver



 Copyright 2019 Analog Devices Inc.

 SPDX-License-Identifier: GPL-2.0



 ROHM BD28623MUV class D speaker amplifier codec driver.



 Copyright (c) 2018 Socionext Inc.

 SPDX-License-Identifier: GPL-2.0

 ak4554.c



 Copyright (C) 2013 Renesas Solutions Corp.

 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>

/*

 * ak4554 is very simple DA/AD converter which has no setting register.

 *

 * CAUTION

 *

 * ak4554 playback format is SND_SOC_DAIFMT_RIGHT_J,

 * and,   capture  format is SND_SOC_DAIFMT_LEFT_J

 * on same bit clock, LR clock.

 * But, this driver doesn't have snd_soc_dai_ops :: set_fmt

 *

 * CPU/Codec DAI image

 *

 * CPU-DAI1 (plaback only fmt = RIGHT_J) --+-- ak4554

 *					   |

 * CPU-DAI2 (capture only fmt = LEFT_J) ---+

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cs4349.c  --  CS4349 ALSA Soc Audio driver

 *

 * Copyright 2015 Cirrus Logic, Inc.

 *

 * Authors: Tim Howe <Tim.Howe@cirrus.com>

 r02	- Mode Control */

 r03	- Volume, Mixing and Inversion Control */

 r04	- Mute Control */

 r05	- Channel A Volume Control */

 r06	- Channel B Volume Control */

 r07	- Ramp and Filter Control */

 r08	- Misc. Control */

 Private data for the CS4349 */

Normal == Channel A = Left, Channel B = Right*/

 Reset the Device */

 Hold down reset */

 Hold down reset */

 SPDX-License-Identifier: GPL-2.0



 ak4613.c  --  Asahi Kasei ALSA Soc Audio driver



 Copyright (C) 2015 Renesas Electronics Corporation

 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>



 Based on ak4642.c by Kuninori Morimoto

 Based on wm8731.c by Richard Purdie

 Based on ak4535.c by Richard Purdie

 Based on wm8753.c by Liam Girdwood

 Power Management 1 */

 Power Management 2 */

 Power Management 3 */

 Control 1 */

 Control 2 */

 De-emphasis1 */

 De-emphasis2 */

 Overflow Detect */

 Zero Detect */

 Input Control */

 Output Control */

 LOUT1 Volume Control */

 ROUT1 Volume Control */

 LOUT2 Volume Control */

 ROUT2 Volume Control */

 LOUT3 Volume Control */

 ROUT3 Volume Control */

 LOUT4 Volume Control */

 ROUT4 Volume Control */

 LOUT5 Volume Control */

 ROUT5 Volume Control */

 LOUT6 Volume Control */

 ROUT6 Volume Control */

 PW_MGMT1 */

 PW_MGMT2 */

 PW_MGMT3 */

 CTRL1 */

 CTRL2 */

 ICTRL */

 OCTRL */

/*

 * Playback Volume

 *

 * max : 0x00 : 0 dB

 *       ( 0.5 dB step )

 * min : 0xFE : -127.0 dB

 * mute: 0xFF

 capture */				
 [0] - [2] are not supported */

 Outputs */

 Inputs */

 DAC */

 ADC */

	/*

	 * Slave Mode

	 *	Normal: [32kHz, 48kHz] : 256fs,384fs or 512fs

	 *	Double: [64kHz, 96kHz] : 256fs

	 *	Quad  : [128kHz,192kHz]: 128fs

	 *

	 * Master mode

	 *	Normal: [32kHz, 48kHz] : 256fs or 512fs

	 *	Double: [64kHz, 96kHz] : 256fs

	 *	Quad  : [128kHz,192kHz]: 128fs

 minimum fs on each range */

	/*

	 * FIXME

	 *

	 * It doesn't support TDM at this point

	/*

	 * PW_MGMT1 / PW_MGMT3 needs dummy write at least after 5 LR clocks

	 *

	 * Note

	 *

	 * To avoid extra delay, we want to avoid preemption here,

	 * but we can't. Because it uses I2C access which is using IRQ

	 * and sleep. Thus, delay might be more than 5 LR clocks

	 * see also

	 *	ak4613_dai_trigger()

	/*

	 * FIXME

	 *

	 * PW_MGMT1 / PW_MGMT3 needs dummy write at least after 5 LR clocks

	 * from Power Down Release. Otherwise, Playback volume will be 0dB.

	 * To avoid complex multiple delay/dummy_write method from

	 * ak4613_set_bias_level() / SND_SOC_DAPM_DAC_E("DACx", ...),

	 * call it once here.

	 *

	 * But, unfortunately, we can't "write" here because here is atomic

	 * context (It uses I2C access for writing).

	 * Thus, use schedule_work() to switching to normal context

	 * immediately.

	 *

	 * Note

	 *

	 * Calling ak4613_dummy_write() function might be delayed.

	 * In such case, ak4613 volume might be temporarily 0dB when

	 * beggining of playback.

	 * see also

	 *	ak4613_dummy_write()

/*

 * Select below from Sound Card, not Auto

 *	SND_SOC_DAIFMT_CBC_CFC

 *	SND_SOC_DAIFMT_CBP_CFP

 Input 1 - 2 */

 Output 1 - 6 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * extcon-arizona.c - Extcon driver Wolfson Arizona devices

 *

 *  Copyright (C) 2012-2014 Wolfson Microelectronics plc

/*

 * The hardware supports 8 ranges / buttons, but the snd-jack interface

 * only supports 6 buttons (button 0-5).

 The number of levels in arizona_micd_levels valid for button thresholds */

 Keep the HP output stages disabled while doing the clamp */

 Restore the desired state while not doing the clamp */

 Microphone detection can't use idle mode */

 If we go out of range report top of range */

 Convert to ohms, the value is in 0.5 ohm increments */

 Skip up a range, or report? */

	/*

	 * If we're using HPDET for accessory identification we need

	 * to take multiple measurements, step through them in sequence.

 Only check the mic directly if we didn't already ID it */

 OK, got both.  Now, compare... */

 Take the headphone impedance for the main report */

 Sometimes we get false readings due to slow insert */

	/*

	 * If we measure the mic as high impedance

 Make sure everything is reset back to the real polarity */

 If we got a spurious IRQ for some reason then ignore it */

 If the cable was removed while measuring ignore the result */

 Reset back to starting range */

 Report high impedence cables as line outputs */

 Reset back to starting range */

 If we have a mic then reenable MICDET */

 Do not set hp_det done when the cable has been unplugged */

 Make sure we keep the device enabled during the measurement */

 Just report headphone */

 Make sure we keep the device enabled during the measurement */

 Just report headphone */

 Must disable MICD before we read the ADCVAL */

 Due to jack detect this should never happen */

 If we got a high impedence we should have a headset, report it. */

 Don't need to regulate for button detection */

	/* If we detected a lower impedence during initial startup

	 * then we probably have the wrong polarity, flip it.  Don't

	 * do this for the lowest impedences to speed up detection of

	 * plain headphones.  If both polarities report a low

	 * impedence then give up and report headphones.

	/*

	 * If we're still detecting and we detect a short then we've

	 * got a headphone.

	/*

	 * If we're still detecting and we detect a short then we've

	 * got a headphone.  Otherwise it's a button press.

 If the cable was removed while measuring ignore the result */

		/*

		 * If the jack was removed during a headphone detection we

		 * need to wait for the headphone detection to finish, as

		 * it can not be aborted. We don't want to be able to start

		 * a new headphone detection from a fresh insert until this

		 * one is finished.

 Clear trig_sts to make sure DCVDD is not forced up */

 Map a level onto a slot in the register bank */

 Program the level itself */

		/* We can't use devm here because we need to do the get

		 * against the MFD device, as that is where the of_node

		 * will reside, but if we devm against that the GPIO

		 * will not be freed if the extcon driver is unloaded.

 Disable all buttons by default */

 Set up all the buttons the user specified */

 SND_JACK_BTN_# masks start with the most significant bit */

 Enable reporting of that range */

 Set all the remaining keys to a maximum */

	/*

	 * If we have a clamp use it, activating in conjunction with

	 * GPIO5 if that is connected for jack detect operation.

 Put the GPIO into input mode with optional pull */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * TDA7419 audio processor driver

 *

 * Copyright 2018 Konsulko Group

 *

 * Author: Matt Porter <mporter@konsulko.com>

 ASoC Controls */

	/*

	 * Reset registers to power-on defaults. The part does not provide a

	 * soft-reset function and the registers are not readable. This ensures

	 * that the cache matches register contents even if the registers have

	 * been previously initialized and not power cycled before probe.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * es8328.c  --  ES8328 ALSA SoC Audio driver

 *

 * Copyright 2014 Sutajio Ko-Usagi PTE LTD

 *

 * Author: Sean Cross <xobs@kosagi.com>

 regulator supplies for sgtl5000, VDDD is an optional external supply */

 vddd is optional supply */

/*

 * ES8328 Controls

	/*

	 * If we're using deemphasis select the nearest available sample

	 * rate.

/*

 * DAPM Controls

 Left Mixer */

 Right Mixer */

 Left PGA Mux */

 Right PGA Mux */

 Differential Mux */

 Mono ADC Mux */

 Master serial port mode, with BCLK generated automatically */

 Slave serial port mode */

 interface format */

 clock inversion */

 VREF, VMID=2x50k, digital enabled */

 Charge caps */

 VREF, VMID=2*500k, digital stopped */

 Setup clocks */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2015-2016, The Linux Foundation. All rights reserved.

 Copyright (c) 2017-2018, Linaro Limited

 Class-H registers for codecs from and above WCD9335 */

 set to HIFI */

 set to HIFI */

 set to default */

 set to HIFI */

 enable/disable buck */

	/*

	 * 500us sleep is required after buck enable/disable

	 * as per HW requirement

 enable/disable buck */

		/*

		 * 500us sleep is required after buck enable/disable

		 * as per HW requirement

 500usec delay is needed as per HW requirement */

 enable/disable flyback */

 100usec delay is needed as per HW requirement */

	/*

	 * 500us sleep is required after flyback enable/disable

	 * as per HW requirement

 Sleep needed to avoid click and pop as per HW requirement */

 set to Default */

 100usec delay is needed as per HW requirement */

 enable/disable flyback */

		/*

		 * 100us sleep is required after flyback enable/disable

		 * as per HW requirement

 500usec delay is needed as per HW requirement */

 Sleep needed to avoid click and pop as per HW requirement */

 buck and flyback set to default mode and disable */

			/*

			 * These K1 values depend on the Headphone Impedance

			 * For now it is assumed to be 16 ohm

 buck and flyback set to default mode and disable */

 set buck and flyback to Default Mode */

			/*

			 * These K1 values depend on the Headphone Impedance

			 * For now it is assumed to be 16 ohm

 set buck and flyback to Default Mode */

 set buck and flyback to Default Mode */

/*

 * Function: wcd_clsh_is_state_valid

 * Params: state

 * Description:

 * Provides information on valid states of Class H configuration

/*

 * Function: wcd_clsh_fsm

 * Params: ctrl, req_state, req_type, clsh_event

 * Description:

 * This function handles PRE DAC and POST DAC conditions of different devices

 * and updates class H configuration of different combination of devices

 * based on validity of their states. ctrl will contain current

 * class h state information

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * wm8753.c  --  WM8753 ALSA Soc Audio driver

 *

 * Copyright 2003-11 Wolfson Microelectronics PLC.

 * Author: Liam Girdwood <lrg@slimlogic.co.uk>

 *

 * Notes:

 *  The WM8753 is a low power, high quality stereo codec with integrated PCM

 *  codec designed for portable digital telephony applications.

 *

 * Dual DAI:-

 *

 * This driver support 2 DAI PCM's. This makes the default PCM available for

 * HiFi audio (e.g. MP3, ogg) playback/capture and the other PCM available for

 * voice.

 *

 * Please note that the voice PCM can be connected directly to a Bluetooth

 * codec or GSM modem and thus cannot be read or written to, although it is

 * available to be configured with snd_hw_params(), etc and kcontrols in the

 * normal alsa manner.

 *

 * Fast DAI switching:-

 *

 * The driver can now fast switch between the DAI configurations via a

 * an alsa kcontrol. This allows the PCM to remain open.

/*

 * wm8753 register cache

 * We can't read the WM8753 register space when we

 * are using 2 wire for device control, so we cache them instead.

 codec private data */

/*

 * WM8753 Controls

 0000000 - 0101111 = "Analogue mute" */

/*

 * _DAPM_ Controls

 Left Mixer */

 Right mixer */

 Mono mixer */

 Mono 2 Mux */

 Out 3 Mux */

 Out 4 Mux */

 ADC Mono Mix */

 Record mixer */

 Left ADC mux */

 Right ADC mux */

 MIC mux */

 ALC mixer */

 Left Line mux */

 Right Line mux */

 Mono Line mux */

 Line mux and mixer */

 Rx mux and mixer */

 Mic Selector Mux */

 left mixer */

 right mixer */

 mono mixer */

 left out */

 right out */

 mono 1 out */

 mono 2 out */

 out 3 */

 out 4 */

 record mixer  */

 Mic/SideTone Mux */

 Capture Left Mux */

 Capture Right Mux */

 Mono Capture mixer-mux */

 ADC */

 Left Capture Volume */

 Right Capture Volume */

 ALC Mixer */

 Line Left Mux */

 Line Right Mux */

 Line Mono Mux */

 Line Mixer/Mux */

 Rx Mixer/Mux */

 Mic 1 Volume */

 Mic 2 Volume */

 Mic Selector Mux */

 ACOP */

 PLL divisors */

/* The size in bits of the pll divide multiplied by 10

 Check if we need to round */

 Move down to proper range now rounding is done */

 disable PLL  */

 set up N and K PLL divisor ratios */

 bits 8:5 = PLL_N, bits 3:0 = PLL_K[21:18] */

 bits 8:0 = PLL_K[17:9] */

 bits 8:0 = PLL_K[8:0] */

 set PLL as input and enable */

 codec hifi mclk (after PLL) clock divider coefficients */

 8k */

 11.025k */

 16k */

 22.05k */

 32k */

 44.1k */

 48k */

 88.2k */

 96k */

/*

 * Clock after PLL and dividers

/*

 * Set's ADC and Voice DAC format.

 interface format */

/*

 * Set PCM DAI bit size and sample rate.

 bit size */

 sample rate */

/*

 * Set's PCM dai fmt and BCLK.

 set master/slave audio interface */

 clock inversion */

 frame inversion not valid for DSP modes */

/*

 * Set's HiFi DAC format.

 interface format */

/*

 * Set's I2S DAI format.

 set master/slave audio interface */

 clock inversion */

 frame inversion not valid for DSP modes */

/*

 * Set PCM DAI bit size and sample rate.

 is digital filter coefficient valid ? */

 bit size */

 set clk source as pcmclk */

 set clk source as pcmclk */

 set clk source as mclk */

	/* the digital mute covers the HiFi and Voice DAC's on the WM8753.

 Set to 500k */

 set vmid to 50k and unmute dac */

 Wait until fully charged */

 set vmid to 5k for quick power up */

 mute dac and set vmid to 500k, enable VREF */

/*

 * The WM8753 supports up to 4 different and mutually exclusive DAI

 * configurations. This gives 2 PCM's available for use, hifi and voice.

 * NOTE: The Voice PCM cannot play or capture audio to the CPU as it's DAI

 * is connected between the wm8753 and a BT codec or GSM modem.

 *

 * 1. Voice over PCM DAI - HIFI DAC over HIFI DAI

 * 2. Voice over HIFI DAI - HIFI disabled

 * 3. Voice disabled - HIFI over HIFI

 * 4. Voice disabled - HIFI over HIFI, uses voice DAI LRC for capture

 DAI HiFi mode 1 */

 dummy for fast DAI switching */

 DAI Voice mode 1 */

 set the update bits */

 CONFIG_SPI_MASTER */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Analog Devices ADAU1373 Audio Codec drive

 *

 * Copyright 2011 Analog Devices Inc.

 * Author: Lars-Peter Clausen <lars@metafoo.de>

	/* Datasheet claims Left ADC is bit 6 and Right ADC is bit 7, but that

 sysclk / 256 */

 2/3 sysclk / 256 */

 1/2 sysclk / 256 */

 1/3 sysclk / 256 */

 1/4 sysclk / 256 */

 1/6 sysclk / 256 */

 2/11 sysclk / 256 */

	/* APLL input needs to be >= 8Mhz, so in case freq_in is less we use the

 Set sysclk to pll_rate / 4 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rt5668.c  --  RT5668B ALSA SoC audio component driver

 *

 * Copyright 2018 Realtek Semiconductor Corp.

 * Author: Bard Liao <bardliao@realtek.com>

 {0, +20, +24, +30, +35, +40, +44, +50, +52} dB */

 Interface data select */

/**

 * rt5668_sel_asrc_clk_src - select ASRC clock source for a set of filters

 * @component: SoC audio component device.

 * @filter_mask: mask of filters.

 * @clk_src: clock source

 *

 * The ASRC function is for asynchronous MCLK and LRCK. Also, since RT5668 can

 * only support standard 32fs or 64fs i2s format, ASRC should be enabled to

 * support special i2s clock format such as Intel's 100fs(100 * sampling rate).

 * ASRC function will track i2s clock and generate a corresponding system clock

 * for codec. This function provides an API to select the clock source for a

 * set of filters specified by the mask. And the component driver will turn on

 * ASRC for these filters if ASRC is selected as their clock source.

/**

 * rt5668_headset_detect - Detect headset.

 * @component: SoC audio component device.

 * @jack_insert: Jack insert or not.

 *

 * Detect whether is headset or not when jack inserted.

 *

 * Returns detect status.

 jack out */

 jack in */

 jack was out, report jack type */

 jack is already in, report button event */

			/**

			 * rt5668 can report three kinds of button behavior,

			 * one click, double click and hold. However,

			 * currently we will report button pressed/released

			 * event. So all the three button behaviors are

			 * treated as button pressed.

 unpressed */

 jack out */

 Headphone Output Volume */

 DAC Digital Volume */

 IN Boost Volume */

 ADC Digital Volume Control */

 ADC Boost Volume Control */

/**

 * set_dmic_clk - Set parameter of dmic.

 *

 * @w: DAPM widget.

 * @kcontrol: The kcontrol of this widget.

 * @event: Event id.

 *

 * Choose dmic clock between 1MHz and 3MHz.

 * It is better for clock to approximate 3MHz.

 Digital Mixer */

 Analog Input Mixer */

 STO1 ADC1 Source */

 MX-26 [13] [5] */

 STO1 ADC Source */

 MX-26 [11:10] [3:2] */

 STO1 ADC2 Source */

 MX-26 [12] [4] */

 MX-79 [6:4] I2S1 ADC data location */

 Analog DAC L1 Source, Analog DAC R1 Source*/

 MX-2B [4], MX-2B [0]*/

 Out Switch */

Add delay to avoid pop noise*/

 ASRC */

 Input Side */

 Input Lines */

 Boost */

 REC Mixer */

 ADCs */

 ADC Mux */

 ADC Mixer */

 ADC PGA */

 Digital Interface */

 Digital Interface Select */

 Audio Interface */

 Output Side */

 DAC mixer before sound effect  */

 DAC channel Mux */

 DAC Mixer */

 DACs */

 HPO */

 CLK DET */

 Output Lines */

PLL*/

ASRC*/

Vref*/

 mono mode */

 mono mode */

 restore settings */

 Sleep for 300 ms miniumum */

 DMIC pin*/

 share with LRCK2 */

 share with DACDAT1 */

 share with IRQ */

 share with BCLK2 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * TS3A227E Autonomous Audio Accessory Detection and Configuration Switch

 *

 * Copyright (C) 2014 Google, Inc.

 Button values to be reported on the jack */

 TS3A227E registers */

 TS3A227E_REG_INTERRUPT 0x01 */

 TS3A227E_REG_KP_INTERRUPT 0x02 */

 TS3A227E_REG_INTERRUPT_DISABLE 0x03 */

 TS3A227E_REG_SETTING_2 0x05 */

 TS3A227E_REG_SETTING_3 0x06 */

 TS3A227E_REG_ACCESSORY_STATUS  0x0b */

 Enable key press detection. */

 Check for plug/unplug. */

 Report any key events. */

/**

 * ts3a227e_enable_jack_detect - Specify a jack for event reporting

 *

 * @component:  component to register the jack with

 * @jack: jack to use to report headset and button events on

 *

 * After this function has been called the headset insert/remove and button

 * events 0-3 will be routed to the given jack.  Jack can be null to stop

 * reporting.

 Enable interrupts except for ADC complete. */

 Read jack status because chip might not trigger interrupt at boot. */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2015-2017, The Linux Foundation.

 Copyright (c) 2019, Linaro Limited

 Digital register address space */

 Analog Register address space */

 WSA881x Analog registers */

 Default register reset values for WSA881x rev 2.0 */

 4 ports */

 DAC */

 COMP */

 BOOST */

 VISENSE */

 IV feedback */

/*

 * Private data Structure for wsa881x. All parameters related to

 * WSA881X codec needs to be defined here.

 Enable software reset output from soundwire slave */

 Bring out of analog reset */

 Bring out of digital reset */

	/*

	 * Gain has to set incrementally in 4 steps

	 * as per HW sequence

	/*

	 * 1ms delay is needed before change in gain

	 * as per HW requirement.

	/*

	 * 1.5ms sleep is needed after boost enable/disable as per

	 * HW requirement

 Boost Switch */

		/*

		 * 200us sleep is needed after visense txfe disable as per

		 * HW requirement.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ALSA SoC TWL4030 codec driver

 *

 * Author:      Steve Sakoman, <steve@sakoman.com>

 Register descriptions are here */

 TWL4030 PMBR1 Register */

 TWL4030 PMBR1 Register GPIO6 mux bits */

 codec private data */

 reference counts of AIF/APLL users */

 Output (with associated amp) states */

 Decide if the given register can be written */

 All other register can be written */

 Update the ctl cache */

 REVISIT: this delay is present in TI sample drivers */

 but there seems to be no TRM requirement for it     */

 Set TWL4030 GPIO6 as EXTMUTE signal */

 Initialize the local ctl register cache */

 anti-pop when changing analog gain */

 REG_ARXR2_APGA_CTL reset according to the TRM: 0dB, DA_EN */

 Machine dependent setup */

 initiate offset cancellation */

	/*

	 * Wait for offset cancellation to complete.

	 * Since this takes a while, do not slam the i2c.

	 * Start polling the status after ~20ms.

 Earpiece */

 PreDrive Left */

 PreDrive Right */

 Headset Left */

 Headset Right */

 Carkit Left */

 Carkit Right */

 Handsfree Left */

 Handsfree Left virtual mute */

 Handsfree Right */

 Handsfree Right virtual mute */

 Vibra */

 Vibra audio path selection */

 Vibra path selection: local vibrator (PWM) or audio driven */

 Left analog microphone selection */

 Right analog microphone selection */

 TX1 L/R Analog/Digital microphone selection */

 TX2 L/R Analog/Digital microphone selection */

 Analog bypass for AudioR1 */

 Analog bypass for AudioL1 */

 Analog bypass for AudioR2 */

 Analog bypass for AudioL2 */

 Analog bypass for Voice */

 Digital bypass gain, mute instead of -30dB */

 Digital bypass left (TX1L -> RX2L) */

 Digital bypass right (TX1R -> RX2R) */

/*

 * Voice Sidetone GAIN volume control:

 * from -51 to -10 dB in 1 dB steps (mute instead of -51 dB)

 Digital bypass voice: sidetone (VUL -> VDL)*/

/*

 * Output PGA builder:

 * Handle the muting and unmuting of the given output (turning off the

 * amplifier associated with the output pin)

 * On mute bypass the reg_cache and write 0 to the register

 * On unmute: restore the register content from the reg_cache

 * Outputs handled in this way:  Earpiece, PreDrivL/R, CarkitL/R

 HF ramp-up */

 HF ramp-down */

 Enable AIF */

 enable the PLL before we use it to clock the DAI */

 disable the DAI before we stop it's source PLL */

 Base values for ramp delay calculation: 2^19 - 2^26 */

	/* Enable external mute control, this dramatically reduces

 Headset ramp-up according to the TRM */

 Actually write to the register */

 Wait ramp delay time + 1, so the VMID can settle */

		/* Headset ramp-down _not_ according to

 Wait ramp delay time + 1, so the VMID can settle */

 Bypass the reg_cache to mute the headset */

 Disable external mute */

 Do the ramp-up only once */

 Do the ramp-down only if both headsetL/R is disabled */

 Do the ramp-up only once */

 Do the ramp-down only if both headsetL/R is disabled */

/*

 * Some of the gain controls in TWL (mostly those which are associated with

 * the outputs) are implemented in an interesting way:

 * 0x0 : Power down (mute)

 * 0x1 : 6dB

 * 0x2 : 0 dB

 * 0x3 : -6 dB

 * Inverting not going to help with these.

 * Custom volsw and volsw_2r get/put functions to handle these gain bits.

 Codec operation modes */

/*

 * FGAIN volume control:

 * from -62 to 0 dB in 1 dB steps (mute instead of -63 dB)

/*

 * CGAIN volume control:

 * 0 dB to 12 dB in 6 dB steps

 * value 2 and 3 means 12 dB

/*

 * Voice Downlink GAIN volume control:

 * from -37 to 12 dB in 1 dB steps (mute instead of -37 dB)

/*

 * Analog playback gain

 * -24 dB to 12 dB in 2 dB steps

/*

 * Gain controls tied to outputs

 * -6 dB to 6 dB in 6 dB steps (mute instead of -12)

/*

 * Gain control for earpiece amplifier

 * 0 dB to 12 dB in 6 dB steps (mute instead of -6)

/*

 * Capture gain after the ADCs

 * from 0 dB to 31 dB in 1 dB steps

/*

 * Gain control for input amplifiers

 * 0 dB to 30 dB in 6 dB steps

 AVADC clock priority */

 Vibra H-bridge direction mode */

 Vibra H-bridge direction */

 Digimic Left and right swapping */

 Codec operation mode control */

 Common playback gain controls */

 Common voice downlink gain controls */

 Separate output gain controls */

 Common capture gain controls */

 Left channel inputs */

 Right channel inputs */

 Digital microphones (Stereo) */

 Outputs */

 AIF and APLL clocks for running DAIs (including loopback) */

 DACs */

 Analog bypasses */

 Master analog loopback switch */

 Digital bypasses */

 Digital mixers, power control for the physical DACs */

 Analog mixers, power control for the physical PGAs */

 Output MIXER controls */

 Earpiece */

 PreDrivL/R */

 HeadsetL/R */

 CarkitL/R */

 Output MUX controls */

 HandsfreeL/R */

 Vibra */

	/* Introducing four virtual ADC, since TWL4030 have four channel for

	/* Analog/Digital mic path selection.

	   TX1 Left/Right: either analog Left/Right or Digimic0

 Analog input mixers for the capture amplifiers */

 Microphone bias */

 Stream -> DAC mapping */

 ADC -> Stream mapping */

 Supply for the digital part (APLL) */

 Internal playback routings */

 Earpiece */

 PreDrivL */

 PreDrivR */

 HeadsetL */

 HeadsetR */

 CarkitL */

 CarkitR */

 HandsfreeL */

 HandsfreeR */

 Vibra */

 outputs */

 Must be always connected (for AIF and APLL) */

 Must be always connected (for APLL) */

 Physical outputs */

 Capture path */

 Must be always connected (for AIF and APLL) */

 Physical inputs */

 TX1 Left capture path */

 TX1 Right capture path */

 TX2 Left capture path */

 TX2 Right capture path */

 Analog bypass routes */

 Supply for the Analog loopbacks */

 Digital bypass routes */

 Pick the stream, which need to be constrained */

 This should not happen.. */

 Set the constraints according to the already configured stream */

/* In case of 4 channel mode, the RX1 L/R for playback and the TX2 L/R for

		/* The DAI has one configuration for playback and capture, so

		 * if the DAI has been already configured then constrain this

			/* In option2 4 channel is not supported, set the

			 * constraint for the first stream for channels, the

	/* If all streams are closed, or the remaining stream has not yet

 If the closing substream had 4 channel, do the necessary cleanup */

 If the substream has 4 channel, do the necessary setup */

		/* Safety check: are we in the correct operating mode and

 Ignoring hw_params for already configured DAI */

 bit rate */

 sample size */

			/*

			 * If the codec is powered, than we need to toggle the

			 * codec power.

	/* Store the important parameters for the DAI configuration and set

	/* If both playback and capture streams are open, and one of them

	 * is setting the hw parameters right now (since we are here), set

 get format */

 set master/slave audio interface */

 interface format */

			/*

			 * If the codec is powered, than we need to toggle the

			 * codec power.

/* In case of voice mode, the RX1 L(VRX) for downlink and the TX2 L/R

	/* If the system master clock is not 26MHz, the voice PCM interface is

	 * not available.

	/* If the codec mode is not option2, the voice PCM interface is not

	 * available.

 Enable voice digital filters */

 Enable voice digital filters */

 bit rate */

			/*

			 * If the codec is powered, than we need to toggle the

			 * codec power.

 get format */

 set master/slave audio interface */

 clock inversion */

			/*

			 * If the codec is powered, than we need to toggle the

			 * codec power.

 Set the defaults, and power up the codec */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * isabelle.c - Low power high fidelity audio codec driver

 *

 * Copyright (c) 2012 Texas Instruments, Inc

 *

 * Initially based on sound/soc/codecs/twl6040.c

 Register default values for ISABELLE driver. */

 Headset DAC playback switches */

 TX input selection */

 Left analog microphone selection */

 Left analog microphone selection */

 Mixer controls */

 TLV Declarations */

 from -63 to 0 dB in 1 dB steps */

 from -63 to 9 dB in 1 dB steps */

 DMIC Switch */

 Inputs */

 Outputs */

 Analog input muxes for the capture amplifiers */

 AIF */

 Analog Capture PGAs */

 Auxiliary FM PGAs */

 ADCs */

 Microphone Bias */

 Mixers */

 DACs */

 Analog Playback PGAs */

 Analog Playback Mux */

 TX Select */

 Output Drivers */

 Interface mapping */

 Input side mapping */

 Capture path */

 AFM Path */

 Earphone playback path */

 bit size */

 Rates supported by Isabelle driver */

 Formates supported by Isabelle driver. */

 ISABELLE dai structure */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cs35l32.c -- CS35L32 ALSA SoC audio driver

 *

 * Copyright 2014 CirrusLogic, Inc.

 *

 * Author: Brian Austin <brian.austin@cirrus.com>

 Power Ctl 1 */

 Power Ctl 2 */

 Clock Ctl */

 Low Battery Threshold */

 Voltage Monitor [RO] */

 Conv Peak Curr Protection CTL */

 IMON Scaling */

 Audio/LED Pwr Manager */

 Serial Port Control */

 Class D Amp CTL */

 Protection Release CTL */

 Interrupt Mask 1 */

 Interrupt Mask 2 */

 Interrupt Mask 3 */

 LED Flash Mode Current */

 LED Movie Mode Current */

 LED Flash Timer */

 LED Flash Inhibit Current */

 Current and threshold powerup sequence Pg37 in datasheet */

 Reset the Device */

 initialize codec */

 Setup VBOOST Management */

 Setup ADSP Format Config */

 Setup ADSP Data Configuration */

 Setup Low Battery Recovery  */

 Setup Low Battery Threshold */

 Power down the AMP */

 Clear MCLK Error Bit since we don't have the clock yet */

 Hold down reset */

 Hold down reset */

 remove power */

 Enable power */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2020, Maxim Integrated

 SoundWire Control Port Registers */

 Soundwire Data Port 1 Registers */

 Soundwire Data Port 3 Registers */

 SoundWire Control Port Registers */

 Soundwire Data Port 1 Registers */

 Soundwire Data Port 3 Registers */

 Power management functions and structure */

 cache feedback register values before suspend */

 BITMAP: 00001000  Dataport 3 is active */

 BITMAP: 00000010  Dataport 1 is active */

 do this again for sink now */

 set the timeout values */

	/*

	 * PM runtime is only enabled when a Slave reports as Attached

 set autosuspend parameters */

 update count of parent 'active' children */

 make sure the device does not suspend immediately */

 Software Reset */

 Set soundwire mode */

 Enable ADC */

 Set default Soundwire clock */

 Set default sampling rate for speaker and IVDAC */

 IV default slot configuration */

 L/R mix configuration */

 Enable DC blocker */

 Enable IMON VMON DC blocker */

 voltage, current slot configuration */

 speaker feedback slot configuration */

 Set interleave mode */

 Speaker enable */

 Set default clock (12.288 Mhz) if the value is not in the list */

	/*

	 *	Select the proper value for the register based on the

	 *	requested clock. If the value is not in the list,

	 *	use reasonable default - 12.288 Mhz

 SWCLK */

 The default Sampling Rate value for IV is 48KHz*/

 only IV are supported by capture */

 Channel size configuration */

 Sampling rate configuration */

 set correct sampling frequency */

 set sampling rate of IV */

 Use tx_mask or rx_mask to configure stream tag and set dma_data */

 tx_mask is unused since it's irrelevant for I/V feedback */

  Allocate and assign private driver data structure  */

 Read voltage and slot configuration */

 codec registration  */

	/*

	 * Perform initialization only if slave status is SDW_SLAVE_ATTACHED

 perform I/O transfers required for Slave initialization */

/*

 * slave_ops: callbacks for get_clock_stop_mode, clock_stop and

 * port_prep are not defined for now

 Regmap Initialization */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * da7218.c - DA7218 ALSA SoC Codec Driver

 *

 * Copyright (c) 2015 Dialog Semiconductor

 *

 * Author: Adam Thomson <Adam.Thomson.Opensource@diasemi.com>

/*

 * TLVs and Enums

 Input TLVs */

 Input/Output TLVs */

 Output TLVs */

 Input Enums */

 Input/Output Enums */

 Output Enums */

/*

 * Control Functions

 ALC */

 Save current state of MIC control registers */

 Save current state of input mixer control registers */

 Save current state of input filter control registers */

 Save current state of input HPF control registers */

 Enable then Mute MIC PGAs */

 Enable input mixers unmuted */

 Enable input filters unmuted */

	/*

	 * Make sure input HPFs voice mode is disabled, otherwise for sampling

	 * rates above 32KHz the ADC signals will be stopped and will cause

	 * calibration to lock up.

 Perform auto calibration */

 If auto calibration fails, disable DC offset, hybrid ALC */

 Enable DC offset cancellation */

 Enable ALC hybrid mode */

 Restore input HPF control registers to original states */

 Restore input filter control registers to original states */

 Restore input mixer control registers to original state */

 Restore MIC control registers to original states */

	/*

	 * If ALC in operation and value of control has been updated,

	 * make sure calibrated offsets are updated.

 Force ALC offset calibration if enabling ALC */

 Update bits to detail which channels are enabled/disabled */

 ToneGen */

	/*

	 * Frequency value spans two 8-bit registers, lower then upper byte.

	 * Therefore we need to convert to host endianness here.

	/*

	 * Frequency value spans two 8-bit registers, lower then upper byte.

	 * Therefore we need to convert to little endian here to align with

	 * HW registers.

	/*

	 * Here we only enable the feature on paths which are already

	 * powered. If a channel is enabled here for level detect, but that path

	 * isn't powered, then the channel will actually be enabled when we do

	 * power the path (IN_FILTER widget events). This handling avoids

	 * unwanted level detect events.

 Determine which BiQuads we're setting based on size of config data */

	/*

	 * Determine which BiQuads we're setting based on size of config data,

	 * and stored the data for use by get function.

 Make sure at least out filter1 enabled to allow programming */

 Restore filter to previous setting */

/*

 * KControls

 Mics */

 Mixer Input */

 ADCs */

 Input Filters */

 AGS */

 ALC */

 Envelope Tracking */

 Input High-Pass Filters */

 Mic Level Detect */

 Digital Mixer (Input) */

 Digital Mixer (Output) */

 Sidetone Filter */

 Tone Generator */

 Gain ramping */

 DGS */

 Output High-Pass Filter */

 5-Band Equaliser */

 BiQuad Filters */

 Output Filters */

 Mixer Output */

 DAC Noise Gate */

 CP */

 Headphones */

/*

 * DAPM Mux Controls

/*

 * DAPM Mixer Controls

/*

 * DAPM Events

/*

 * We keep track of which input filters are enabled. This is used in the logic

 * for controlling the mic level detect feature.

		/*

		 * If we're enabling path for mic level detect, wait for path

		 * to settle before enabling feature to avoid incorrect and

		 * unwanted detect events.

 Enable configured level detection paths */

 Enable DAI clks for master mode */

 Tune reference oscillator */

 Check tuning complete */

 PC synchronised to DAI */

 If SRM not enabled, we don't need to check status */

 Check SRM has locked */

 PC free-running */

 Disable DAI clks for master mode */

	/*

	 * If this is DA7217 and we're using single supply for differential

	 * output, we really don't want to touch the charge pump.

 Enable headphone output */

 Headphone output high impedance */

/*

 * DAPM Widgets

 Input Supplies */

 Inputs */

 Input Mixer Supplies */

 Input PGAs */

 Mic/DMic Muxes */

 Input Filters */

 Tone Generator */

 Sidetone Input */

 Input Mixers */

 DAI Supply */

 DAI */

 Output Mixers */

 BiQuad Filters */

 Sidetone Mixers */

 Output Filters */

 Output PGAs */

 Output Supplies */

 Outputs */

/*

 * DAPM Mixer Routes

/*

 * DAPM audio route definition

 Input paths */

 Output paths */

/*

 * DAI operations

 Verify 2MHz - 54MHz MCLK provided, and set input divider */

 Configure PLL */

 Calculate dividers for PLL */

 Write PLL config & dividers */

 By default 64 BCLKs per WCLK is supported */

 No channels enabled so disable TDM, revert to 64-bit frames */

 Check we have valid slots */

 Check we have a valid offset given (first 2 bytes of rx_mask) */

 Calculate & validate frame size based on slot info provided. */

 SRs tied for ADCs and DACs. */

 Only 2 channels of data */

/*

 * HP Detect

/*

 * IRQ

 Read IRQ status reg */

 Mic level detect */

 HP detect */

 Clear interrupts */

/*

 * DT

/*

 * Codec driver functions

 Enable MCLK for transition to ON state */

 Master bias */

 Internal LDO */

 Remove MCLK */

 Only disable if jack detection disabled */

 Internal LDO */

 Master bias */

 Get required supplies */

 Determine VDDIO voltage provided */

 Enable main supplies */

 Ensure device in active mode */

 Update IO voltage level range */

 Mic Bias voltages */

 Mic */

 DMic */

 DA7217 Specific */

 DA7218 Specific */

 Regulator configuration */

 Handle DT/Platform data */

 Check if MCLK provided, if not the clock is NULL */

 Default PC to free-running */

	/*

	 * Default Output Filter mixers to off otherwise DAPM will power

	 * Mic to HP passthrough paths by default at startup.

 Default CP to normal load, power mode */

 Default gain ramping */

 Default infinite tone gen, start/stop by Kcontrol */

 DA7217 specific config */

 Only DA7218 supports HP detect, mask off for DA7217 */

 Put device into standby mode if jack detection disabled */

 Put device into active mode if previously moved to standby */

/*

 * Regmap configs

/*

 * I2C layer

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8962.c  --  WM8962 ALSA SoC Audio driver

 *

 * Copyright 2010-2 Wolfson Microelectronics plc

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 codec private data */

 Desired BCLK */

/* We can't use the same notifier block for more than one supply and

 * there's no way I can see to get from a callback to the caller

 * except container_of().

 R0     - Left Input volume */

 R1     - Right Input volume */

 R2     - HPOUTL volume */

 R3     - HPOUTR volume */

 R5     - ADC & DAC Control 1 */

 R6     - ADC & DAC Control 2 */

 R7     - Audio Interface 0 */

 R8     - Clocking2 */

 R9     - Audio Interface 1 */

 R10    - Left DAC volume */

 R11    - Right DAC volume */

 R14    - Audio Interface 2 */

 R15    - Software Reset */

 R17    - ALC1 */

 R18    - ALC2 */

 R19    - ALC3 */

 R20    - Noise Gate */

 R21    - Left ADC volume */

 R22    - Right ADC volume */

 R23    - Additional control(1) */

 R24    - Additional control(2) */

 R25    - Pwr Mgmt (1) */

 R26    - Pwr Mgmt (2) */

 R27    - Additional Control (3) */

 R28    - Anti-pop */

 R30    - Clocking 3 */

 R31    - Input mixer control (1) */

 R32    - Left input mixer volume */

 R33    - Right input mixer volume */

 R34    - Input mixer control (2) */

 R35    - Input bias control */

 R37    - Left input PGA control */

 R38    - Right input PGA control */

 R40    - SPKOUTL volume */

 R41    - SPKOUTR volume */

 R49    - Class D Control 1 */

 R51    - Class D Control 2 */

 R56    - Clocking 4 */

 R57    - DAC DSP Mixing (1) */

 R58    - DAC DSP Mixing (2) */

 R60    - DC Servo 0 */

 R61    - DC Servo 1 */

 R64    - DC Servo 4 */

 R68    - Analogue PGA Bias */

 R69    - Analogue HP 0 */

 R71    - Analogue HP 2 */

 R72    - Charge Pump 1 */

 R82    - Charge Pump B */

 R87    - Write Sequencer Control 1 */

 R90    - Write Sequencer Control 2 */

 R93    - Write Sequencer Control 3 */

 R94    - Control Interface */

 R99    - Mixer Enables */

 R100   - Headphone Mixer (1) */

 R101   - Headphone Mixer (2) */

 R102   - Headphone Mixer (3) */

 R103   - Headphone Mixer (4) */

 R105   - Speaker Mixer (1) */

 R106   - Speaker Mixer (2) */

 R107   - Speaker Mixer (3) */

 R108   - Speaker Mixer (4) */

 R109   - Speaker Mixer (5) */

 R110   - Beep Generator (1) */

 R115   - Oscillator Trim (3) */

 R116   - Oscillator Trim (4) */

 R119   - Oscillator Trim (7) */

 R124   - Analogue Clocking1 */

 R125   - Analogue Clocking2 */

 R126   - Analogue Clocking3 */

 R127   - PLL Software Reset */

 R131   - PLL 4 */

 R136   - PLL 9 */

 R137   - PLL 10 */

 R138   - PLL 11 */

 R139   - PLL 12 */

 R140   - PLL 13 */

 R141   - PLL 14 */

 R142   - PLL 15 */

 R143   - PLL 16 */

 R155   - FLL Control (1) */

 R156   - FLL Control (2) */

 R157   - FLL Control (3) */

 R159   - FLL Control (5) */

 R160   - FLL Control (6) */

 R161   - FLL Control (7) */

 R162   - FLL Control (8) */

 R252   - General test 1 */

 R256   - DF1 */

 R257   - DF2 */

 R258   - DF3 */

 R259   - DF4 */

 R260   - DF5 */

 R261   - DF6 */

 R262   - DF7 */

 R264   - LHPF1 */

 R265   - LHPF2 */

 R268   - THREED1 */

 R269   - THREED2 */

 R270   - THREED3 */

 R271   - THREED4 */

 R276   - DRC 1 */

 R277   - DRC 2 */

 R278   - DRC 3 */

 R279   - DRC 4 */

 R280   - DRC 5 */

 R285   - Tloopback */

 R335   - EQ1 */

 R336   - EQ2 */

 R337   - EQ3 */

 R338   - EQ4 */

 R339   - EQ5 */

 R340   - EQ6 */

 R341   - EQ7 */

 R342   - EQ8 */

 R343   - EQ9 */

 R344   - EQ10 */

 R345   - EQ11 */

 R346   - EQ12 */

 R347   - EQ13 */

 R348   - EQ14 */

 R349   - EQ15 */

 R350   - EQ16 */

 R351   - EQ17 */

 R352   - EQ18 */

 R353   - EQ19 */

 R354   - EQ20 */

 R355   - EQ21 */

 R356   - EQ22 */

 R357   - EQ23 */

 R358   - EQ24 */

 R359   - EQ25 */

 R360   - EQ26 */

 R361   - EQ27 */

 R362   - EQ28 */

 R363   - EQ29 */

 R364   - EQ30 */

 R365   - EQ31 */

 R366   - EQ32 */

 R367   - EQ33 */

 R368   - EQ34 */

 R369   - EQ35 */

 R370   - EQ36 */

 R371   - EQ37 */

 R372   - EQ38 */

 R373   - EQ39 */

 R374   - EQ40 */

 R375   - EQ41 */

 R513   - GPIO 2 */

 R514   - GPIO 3 */

 R516   - GPIO 5 */

 R517   - GPIO 6 */

 R568   - Interrupt Status 1 Mask */

 R569   - Interrupt Status 2 Mask */

 R576   - Interrupt Control */

 R584   - IRQ Debounce */

 R586   -  MICINT Source Pol */

 R768   - DSP2 Power Management */

 R8192  - DSP2 Instruction RAM 0 */

 R9216  - DSP2 Address RAM 2 */

 R9217  - DSP2 Address RAM 1 */

 R9218  - DSP2 Address RAM 0 */

 R12288 - DSP2 Data1 RAM 1 */

 R12289 - DSP2 Data1 RAM 0 */

 R13312 - DSP2 Data2 RAM 1 */

 R13313 - DSP2 Data2 RAM 0 */

 R14336 - DSP2 Data3 RAM 1 */

 R14337 - DSP2 Data3 RAM 0 */

 R15360 - DSP2 Coeff RAM 0 */

 R16384 - RETUNEADC_SHARED_COEFF_1 */

 R16385 - RETUNEADC_SHARED_COEFF_0 */

 R16386 - RETUNEDAC_SHARED_COEFF_1 */

 R16387 - RETUNEDAC_SHARED_COEFF_0 */

 R16388 - SOUNDSTAGE_ENABLES_1 */

 R16389 - SOUNDSTAGE_ENABLES_0 */

 R16896 - HDBASS_AI_1 */

 R16897 - HDBASS_AI_0 */

 R16898 - HDBASS_AR_1 */

 R16899 - HDBASS_AR_0 */

 R16900 - HDBASS_B_1 */

 R16901 - HDBASS_B_0 */

 R16902 - HDBASS_K_1 */

 R16903 - HDBASS_K_0 */

 R16904 - HDBASS_N1_1 */

 R16905 - HDBASS_N1_0 */

 R16906 - HDBASS_N2_1 */

 R16907 - HDBASS_N2_0 */

 R16908 - HDBASS_N3_1 */

 R16909 - HDBASS_N3_0 */

 R16910 - HDBASS_N4_1 */

 R16911 - HDBASS_N4_0 */

 R16912 - HDBASS_N5_1 */

 R16913 - HDBASS_N5_0 */

 R16914 - HDBASS_X1_1 */

 R16915 - HDBASS_X1_0 */

 R16916 - HDBASS_X2_1 */

 R16917 - HDBASS_X2_0 */

 R16918 - HDBASS_X3_1 */

 R16919 - HDBASS_X3_0 */

 R16920 - HDBASS_ATK_1 */

 R16921 - HDBASS_ATK_0 */

 R16922 - HDBASS_DCY_1 */

 R16923 - HDBASS_DCY_0 */

 R16924 - HDBASS_PG_1 */

 R16925 - HDBASS_PG_0 */

 R17408 - HPF_C_1 */

 R17409 - HPF_C_0 */

 R17920 - ADCL_RETUNE_C1_1 */

 R17921 - ADCL_RETUNE_C1_0 */

 R17922 - ADCL_RETUNE_C2_1 */

 R17923 - ADCL_RETUNE_C2_0 */

 R17924 - ADCL_RETUNE_C3_1 */

 R17925 - ADCL_RETUNE_C3_0 */

 R17926 - ADCL_RETUNE_C4_1 */

 R17927 - ADCL_RETUNE_C4_0 */

 R17928 - ADCL_RETUNE_C5_1 */

 R17929 - ADCL_RETUNE_C5_0 */

 R17930 - ADCL_RETUNE_C6_1 */

 R17931 - ADCL_RETUNE_C6_0 */

 R17932 - ADCL_RETUNE_C7_1 */

 R17933 - ADCL_RETUNE_C7_0 */

 R17934 - ADCL_RETUNE_C8_1 */

 R17935 - ADCL_RETUNE_C8_0 */

 R17936 - ADCL_RETUNE_C9_1 */

 R17937 - ADCL_RETUNE_C9_0 */

 R17938 - ADCL_RETUNE_C10_1 */

 R17939 - ADCL_RETUNE_C10_0 */

 R17940 - ADCL_RETUNE_C11_1 */

 R17941 - ADCL_RETUNE_C11_0 */

 R17942 - ADCL_RETUNE_C12_1 */

 R17943 - ADCL_RETUNE_C12_0 */

 R17944 - ADCL_RETUNE_C13_1 */

 R17945 - ADCL_RETUNE_C13_0 */

 R17946 - ADCL_RETUNE_C14_1 */

 R17947 - ADCL_RETUNE_C14_0 */

 R17948 - ADCL_RETUNE_C15_1 */

 R17949 - ADCL_RETUNE_C15_0 */

 R17950 - ADCL_RETUNE_C16_1 */

 R17951 - ADCL_RETUNE_C16_0 */

 R17952 - ADCL_RETUNE_C17_1 */

 R17953 - ADCL_RETUNE_C17_0 */

 R17954 - ADCL_RETUNE_C18_1 */

 R17955 - ADCL_RETUNE_C18_0 */

 R17956 - ADCL_RETUNE_C19_1 */

 R17957 - ADCL_RETUNE_C19_0 */

 R17958 - ADCL_RETUNE_C20_1 */

 R17959 - ADCL_RETUNE_C20_0 */

 R17960 - ADCL_RETUNE_C21_1 */

 R17961 - ADCL_RETUNE_C21_0 */

 R17962 - ADCL_RETUNE_C22_1 */

 R17963 - ADCL_RETUNE_C22_0 */

 R17964 - ADCL_RETUNE_C23_1 */

 R17965 - ADCL_RETUNE_C23_0 */

 R17966 - ADCL_RETUNE_C24_1 */

 R17967 - ADCL_RETUNE_C24_0 */

 R17968 - ADCL_RETUNE_C25_1 */

 R17969 - ADCL_RETUNE_C25_0 */

 R17970 - ADCL_RETUNE_C26_1 */

 R17971 - ADCL_RETUNE_C26_0 */

 R17972 - ADCL_RETUNE_C27_1 */

 R17973 - ADCL_RETUNE_C27_0 */

 R17974 - ADCL_RETUNE_C28_1 */

 R17975 - ADCL_RETUNE_C28_0 */

 R17976 - ADCL_RETUNE_C29_1 */

 R17977 - ADCL_RETUNE_C29_0 */

 R17978 - ADCL_RETUNE_C30_1 */

 R17979 - ADCL_RETUNE_C30_0 */

 R17980 - ADCL_RETUNE_C31_1 */

 R17981 - ADCL_RETUNE_C31_0 */

 R17982 - ADCL_RETUNE_C32_1 */

 R17983 - ADCL_RETUNE_C32_0 */

 R18432 - RETUNEADC_PG2_1 */

 R18433 - RETUNEADC_PG2_0 */

 R18434 - RETUNEADC_PG_1 */

 R18435 - RETUNEADC_PG_0 */

 R18944 - ADCR_RETUNE_C1_1 */

 R18945 - ADCR_RETUNE_C1_0 */

 R18946 - ADCR_RETUNE_C2_1 */

 R18947 - ADCR_RETUNE_C2_0 */

 R18948 - ADCR_RETUNE_C3_1 */

 R18949 - ADCR_RETUNE_C3_0 */

 R18950 - ADCR_RETUNE_C4_1 */

 R18951 - ADCR_RETUNE_C4_0 */

 R18952 - ADCR_RETUNE_C5_1 */

 R18953 - ADCR_RETUNE_C5_0 */

 R18954 - ADCR_RETUNE_C6_1 */

 R18955 - ADCR_RETUNE_C6_0 */

 R18956 - ADCR_RETUNE_C7_1 */

 R18957 - ADCR_RETUNE_C7_0 */

 R18958 - ADCR_RETUNE_C8_1 */

 R18959 - ADCR_RETUNE_C8_0 */

 R18960 - ADCR_RETUNE_C9_1 */

 R18961 - ADCR_RETUNE_C9_0 */

 R18962 - ADCR_RETUNE_C10_1 */

 R18963 - ADCR_RETUNE_C10_0 */

 R18964 - ADCR_RETUNE_C11_1 */

 R18965 - ADCR_RETUNE_C11_0 */

 R18966 - ADCR_RETUNE_C12_1 */

 R18967 - ADCR_RETUNE_C12_0 */

 R18968 - ADCR_RETUNE_C13_1 */

 R18969 - ADCR_RETUNE_C13_0 */

 R18970 - ADCR_RETUNE_C14_1 */

 R18971 - ADCR_RETUNE_C14_0 */

 R18972 - ADCR_RETUNE_C15_1 */

 R18973 - ADCR_RETUNE_C15_0 */

 R18974 - ADCR_RETUNE_C16_1 */

 R18975 - ADCR_RETUNE_C16_0 */

 R18976 - ADCR_RETUNE_C17_1 */

 R18977 - ADCR_RETUNE_C17_0 */

 R18978 - ADCR_RETUNE_C18_1 */

 R18979 - ADCR_RETUNE_C18_0 */

 R18980 - ADCR_RETUNE_C19_1 */

 R18981 - ADCR_RETUNE_C19_0 */

 R18982 - ADCR_RETUNE_C20_1 */

 R18983 - ADCR_RETUNE_C20_0 */

 R18984 - ADCR_RETUNE_C21_1 */

 R18985 - ADCR_RETUNE_C21_0 */

 R18986 - ADCR_RETUNE_C22_1 */

 R18987 - ADCR_RETUNE_C22_0 */

 R18988 - ADCR_RETUNE_C23_1 */

 R18989 - ADCR_RETUNE_C23_0 */

 R18990 - ADCR_RETUNE_C24_1 */

 R18991 - ADCR_RETUNE_C24_0 */

 R18992 - ADCR_RETUNE_C25_1 */

 R18993 - ADCR_RETUNE_C25_0 */

 R18994 - ADCR_RETUNE_C26_1 */

 R18995 - ADCR_RETUNE_C26_0 */

 R18996 - ADCR_RETUNE_C27_1 */

 R18997 - ADCR_RETUNE_C27_0 */

 R18998 - ADCR_RETUNE_C28_1 */

 R18999 - ADCR_RETUNE_C28_0 */

 R19000 - ADCR_RETUNE_C29_1 */

 R19001 - ADCR_RETUNE_C29_0 */

 R19002 - ADCR_RETUNE_C30_1 */

 R19003 - ADCR_RETUNE_C30_0 */

 R19004 - ADCR_RETUNE_C31_1 */

 R19005 - ADCR_RETUNE_C31_0 */

 R19006 - ADCR_RETUNE_C32_1 */

 R19007 - ADCR_RETUNE_C32_0 */

 R19456 - DACL_RETUNE_C1_1 */

 R19457 - DACL_RETUNE_C1_0 */

 R19458 - DACL_RETUNE_C2_1 */

 R19459 - DACL_RETUNE_C2_0 */

 R19460 - DACL_RETUNE_C3_1 */

 R19461 - DACL_RETUNE_C3_0 */

 R19462 - DACL_RETUNE_C4_1 */

 R19463 - DACL_RETUNE_C4_0 */

 R19464 - DACL_RETUNE_C5_1 */

 R19465 - DACL_RETUNE_C5_0 */

 R19466 - DACL_RETUNE_C6_1 */

 R19467 - DACL_RETUNE_C6_0 */

 R19468 - DACL_RETUNE_C7_1 */

 R19469 - DACL_RETUNE_C7_0 */

 R19470 - DACL_RETUNE_C8_1 */

 R19471 - DACL_RETUNE_C8_0 */

 R19472 - DACL_RETUNE_C9_1 */

 R19473 - DACL_RETUNE_C9_0 */

 R19474 - DACL_RETUNE_C10_1 */

 R19475 - DACL_RETUNE_C10_0 */

 R19476 - DACL_RETUNE_C11_1 */

 R19477 - DACL_RETUNE_C11_0 */

 R19478 - DACL_RETUNE_C12_1 */

 R19479 - DACL_RETUNE_C12_0 */

 R19480 - DACL_RETUNE_C13_1 */

 R19481 - DACL_RETUNE_C13_0 */

 R19482 - DACL_RETUNE_C14_1 */

 R19483 - DACL_RETUNE_C14_0 */

 R19484 - DACL_RETUNE_C15_1 */

 R19485 - DACL_RETUNE_C15_0 */

 R19486 - DACL_RETUNE_C16_1 */

 R19487 - DACL_RETUNE_C16_0 */

 R19488 - DACL_RETUNE_C17_1 */

 R19489 - DACL_RETUNE_C17_0 */

 R19490 - DACL_RETUNE_C18_1 */

 R19491 - DACL_RETUNE_C18_0 */

 R19492 - DACL_RETUNE_C19_1 */

 R19493 - DACL_RETUNE_C19_0 */

 R19494 - DACL_RETUNE_C20_1 */

 R19495 - DACL_RETUNE_C20_0 */

 R19496 - DACL_RETUNE_C21_1 */

 R19497 - DACL_RETUNE_C21_0 */

 R19498 - DACL_RETUNE_C22_1 */

 R19499 - DACL_RETUNE_C22_0 */

 R19500 - DACL_RETUNE_C23_1 */

 R19501 - DACL_RETUNE_C23_0 */

 R19502 - DACL_RETUNE_C24_1 */

 R19503 - DACL_RETUNE_C24_0 */

 R19504 - DACL_RETUNE_C25_1 */

 R19505 - DACL_RETUNE_C25_0 */

 R19506 - DACL_RETUNE_C26_1 */

 R19507 - DACL_RETUNE_C26_0 */

 R19508 - DACL_RETUNE_C27_1 */

 R19509 - DACL_RETUNE_C27_0 */

 R19510 - DACL_RETUNE_C28_1 */

 R19511 - DACL_RETUNE_C28_0 */

 R19512 - DACL_RETUNE_C29_1 */

 R19513 - DACL_RETUNE_C29_0 */

 R19514 - DACL_RETUNE_C30_1 */

 R19515 - DACL_RETUNE_C30_0 */

 R19516 - DACL_RETUNE_C31_1 */

 R19517 - DACL_RETUNE_C31_0 */

 R19518 - DACL_RETUNE_C32_1 */

 R19519 - DACL_RETUNE_C32_0 */

 R19968 - RETUNEDAC_PG2_1 */

 R19969 - RETUNEDAC_PG2_0 */

 R19970 - RETUNEDAC_PG_1 */

 R19971 - RETUNEDAC_PG_0 */

 R20480 - DACR_RETUNE_C1_1 */

 R20481 - DACR_RETUNE_C1_0 */

 R20482 - DACR_RETUNE_C2_1 */

 R20483 - DACR_RETUNE_C2_0 */

 R20484 - DACR_RETUNE_C3_1 */

 R20485 - DACR_RETUNE_C3_0 */

 R20486 - DACR_RETUNE_C4_1 */

 R20487 - DACR_RETUNE_C4_0 */

 R20488 - DACR_RETUNE_C5_1 */

 R20489 - DACR_RETUNE_C5_0 */

 R20490 - DACR_RETUNE_C6_1 */

 R20491 - DACR_RETUNE_C6_0 */

 R20492 - DACR_RETUNE_C7_1 */

 R20493 - DACR_RETUNE_C7_0 */

 R20494 - DACR_RETUNE_C8_1 */

 R20495 - DACR_RETUNE_C8_0 */

 R20496 - DACR_RETUNE_C9_1 */

 R20497 - DACR_RETUNE_C9_0 */

 R20498 - DACR_RETUNE_C10_1 */

 R20499 - DACR_RETUNE_C10_0 */

 R20500 - DACR_RETUNE_C11_1 */

 R20501 - DACR_RETUNE_C11_0 */

 R20502 - DACR_RETUNE_C12_1 */

 R20503 - DACR_RETUNE_C12_0 */

 R20504 - DACR_RETUNE_C13_1 */

 R20505 - DACR_RETUNE_C13_0 */

 R20506 - DACR_RETUNE_C14_1 */

 R20507 - DACR_RETUNE_C14_0 */

 R20508 - DACR_RETUNE_C15_1 */

 R20509 - DACR_RETUNE_C15_0 */

 R20510 - DACR_RETUNE_C16_1 */

 R20511 - DACR_RETUNE_C16_0 */

 R20512 - DACR_RETUNE_C17_1 */

 R20513 - DACR_RETUNE_C17_0 */

 R20514 - DACR_RETUNE_C18_1 */

 R20515 - DACR_RETUNE_C18_0 */

 R20516 - DACR_RETUNE_C19_1 */

 R20517 - DACR_RETUNE_C19_0 */

 R20518 - DACR_RETUNE_C20_1 */

 R20519 - DACR_RETUNE_C20_0 */

 R20520 - DACR_RETUNE_C21_1 */

 R20521 - DACR_RETUNE_C21_0 */

 R20522 - DACR_RETUNE_C22_1 */

 R20523 - DACR_RETUNE_C22_0 */

 R20524 - DACR_RETUNE_C23_1 */

 R20525 - DACR_RETUNE_C23_0 */

 R20526 - DACR_RETUNE_C24_1 */

 R20527 - DACR_RETUNE_C24_0 */

 R20528 - DACR_RETUNE_C25_1 */

 R20529 - DACR_RETUNE_C25_0 */

 R20530 - DACR_RETUNE_C26_1 */

 R20531 - DACR_RETUNE_C26_0 */

 R20532 - DACR_RETUNE_C27_1 */

 R20533 - DACR_RETUNE_C27_0 */

 R20534 - DACR_RETUNE_C28_1 */

 R20535 - DACR_RETUNE_C28_0 */

 R20536 - DACR_RETUNE_C29_1 */

 R20537 - DACR_RETUNE_C29_0 */

 R20538 - DACR_RETUNE_C30_1 */

 R20539 - DACR_RETUNE_C30_0 */

 R20540 - DACR_RETUNE_C31_1 */

 R20541 - DACR_RETUNE_C31_0 */

 R20542 - DACR_RETUNE_C32_1 */

 R20543 - DACR_RETUNE_C32_0 */

 R20992 - VSS_XHD2_1 */

 R20993 - VSS_XHD2_0 */

 R20994 - VSS_XHD3_1 */

 R20995 - VSS_XHD3_0 */

 R20996 - VSS_XHN1_1 */

 R20997 - VSS_XHN1_0 */

 R20998 - VSS_XHN2_1 */

 R20999 - VSS_XHN2_0 */

 R21000 - VSS_XHN3_1 */

 R21001 - VSS_XHN3_0 */

 R21002 - VSS_XLA_1 */

 R21003 - VSS_XLA_0 */

 R21004 - VSS_XLB_1 */

 R21005 - VSS_XLB_0 */

 R21006 - VSS_XLG_1 */

 R21007 - VSS_XLG_0 */

 R21008 - VSS_PG2_1 */

 R21009 - VSS_PG2_0 */

 R21010 - VSS_PG_1 */

 R21011 - VSS_PG_0 */

 R21012 - VSS_XTD1_1 */

 R21013 - VSS_XTD1_0 */

 R21014 - VSS_XTD2_1 */

 R21015 - VSS_XTD2_0 */

 R21016 - VSS_XTD3_1 */

 R21017 - VSS_XTD3_0 */

 R21018 - VSS_XTD4_1 */

 R21019 - VSS_XTD4_0 */

 R21020 - VSS_XTD5_1 */

 R21021 - VSS_XTD5_0 */

 R21022 - VSS_XTD6_1 */

 R21023 - VSS_XTD6_0 */

 R21024 - VSS_XTD7_1 */

 R21025 - VSS_XTD7_0 */

 R21026 - VSS_XTD8_1 */

 R21027 - VSS_XTD8_0 */

 R21028 - VSS_XTD9_1 */

 R21029 - VSS_XTD9_0 */

 R21030 - VSS_XTD10_1 */

 R21031 - VSS_XTD10_0 */

 R21032 - VSS_XTD11_1 */

 R21033 - VSS_XTD11_0 */

 R21034 - VSS_XTD12_1 */

 R21035 - VSS_XTD12_0 */

 R21036 - VSS_XTD13_1 */

 R21037 - VSS_XTD13_0 */

 R21038 - VSS_XTD14_1 */

 R21039 - VSS_XTD14_0 */

 R21040 - VSS_XTD15_1 */

 R21041 - VSS_XTD15_0 */

 R21042 - VSS_XTD16_1 */

 R21043 - VSS_XTD16_0 */

 R21044 - VSS_XTD17_1 */

 R21045 - VSS_XTD17_0 */

 R21046 - VSS_XTD18_1 */

 R21047 - VSS_XTD18_0 */

 R21048 - VSS_XTD19_1 */

 R21049 - VSS_XTD19_0 */

 R21050 - VSS_XTD20_1 */

 R21051 - VSS_XTD20_0 */

 R21052 - VSS_XTD21_1 */

 R21053 - VSS_XTD21_0 */

 R21054 - VSS_XTD22_1 */

 R21055 - VSS_XTD22_0 */

 R21056 - VSS_XTD23_1 */

 R21057 - VSS_XTD23_0 */

 R21058 - VSS_XTD24_1 */

 R21059 - VSS_XTD24_0 */

 R21060 - VSS_XTD25_1 */

 R21061 - VSS_XTD25_0 */

 R21062 - VSS_XTD26_1 */

 R21063 - VSS_XTD26_0 */

 R21064 - VSS_XTD27_1 */

 R21065 - VSS_XTD27_0 */

 R21066 - VSS_XTD28_1 */

 R21067 - VSS_XTD28_0 */

 R21068 - VSS_XTD29_1 */

 R21069 - VSS_XTD29_0 */

 R21070 - VSS_XTD30_1 */

 R21071 - VSS_XTD30_0 */

 R21072 - VSS_XTD31_1 */

 R21073 - VSS_XTD31_0 */

 R21074 - VSS_XTD32_1 */

 R21075 - VSS_XTD32_0 */

 R21076 - VSS_XTS1_1 */

 R21077 - VSS_XTS1_0 */

 R21078 - VSS_XTS2_1 */

 R21079 - VSS_XTS2_0 */

 R21080 - VSS_XTS3_1 */

 R21081 - VSS_XTS3_0 */

 R21082 - VSS_XTS4_1 */

 R21083 - VSS_XTS4_0 */

 R21084 - VSS_XTS5_1 */

 R21085 - VSS_XTS5_0 */

 R21086 - VSS_XTS6_1 */

 R21087 - VSS_XTS6_0 */

 R21088 - VSS_XTS7_1 */

 R21089 - VSS_XTS7_0 */

 R21090 - VSS_XTS8_1 */

 R21091 - VSS_XTS8_0 */

 R21092 - VSS_XTS9_1 */

 R21093 - VSS_XTS9_0 */

 R21094 - VSS_XTS10_1 */

 R21095 - VSS_XTS10_0 */

 R21096 - VSS_XTS11_1 */

 R21097 - VSS_XTS11_0 */

 R21098 - VSS_XTS12_1 */

 R21099 - VSS_XTS12_0 */

 R21100 - VSS_XTS13_1 */

 R21101 - VSS_XTS13_0 */

 R21102 - VSS_XTS14_1 */

 R21103 - VSS_XTS14_0 */

 R21104 - VSS_XTS15_1 */

 R21105 - VSS_XTS15_0 */

 R21106 - VSS_XTS16_1 */

 R21107 - VSS_XTS16_0 */

 R21108 - VSS_XTS17_1 */

 R21109 - VSS_XTS17_0 */

 R21110 - VSS_XTS18_1 */

 R21111 - VSS_XTS18_0 */

 R21112 - VSS_XTS19_1 */

 R21113 - VSS_XTS19_0 */

 R21114 - VSS_XTS20_1 */

 R21115 - VSS_XTS20_0 */

 R21116 - VSS_XTS21_1 */

 R21117 - VSS_XTS21_0 */

 R21118 - VSS_XTS22_1 */

 R21119 - VSS_XTS22_0 */

 R21120 - VSS_XTS23_1 */

 R21121 - VSS_XTS23_0 */

 R21122 - VSS_XTS24_1 */

 R21123 - VSS_XTS24_0 */

 R21124 - VSS_XTS25_1 */

 R21125 - VSS_XTS25_0 */

 R21126 - VSS_XTS26_1 */

 R21127 - VSS_XTS26_0 */

 R21128 - VSS_XTS27_1 */

 R21129 - VSS_XTS27_0 */

 R21130 - VSS_XTS28_1 */

 R21131 - VSS_XTS28_0 */

 R21132 - VSS_XTS29_1 */

 R21133 - VSS_XTS29_0 */

 R21134 - VSS_XTS30_1 */

 R21135 - VSS_XTS30_0 */

 R21136 - VSS_XTS31_1 */

 R21137 - VSS_XTS31_0 */

 R21138 - VSS_XTS32_1 */

 R21139 - VSS_XTS32_0 */

 Mute the ADCs and DACs */

 Restore the ADCs and DACs */

/* The VU bits for the headphones are in a different register to the mute

 * bits and only take effect on the PGA if it is actually powered.

 Apply the update (if any) */

 If the left PGA is enabled hit that VU bit... */

 ...otherwise the right.  The VU is stereo. */

/* The VU bits for the speakers are in a different register to the mute

 * bits and only take effect on the PGA if it is actually powered.

 Apply the update (if any) */

 If the left PGA is enabled hit that VU bit... */

 ...otherwise the right.  The VU is stereo. */

 Start the DC servo */

 Wait for it to complete, should be well under 100ms */

 VU bits for the output PGAs only take effect while the PGA is powered */

 -1 for reserved values */

	/* DSPCLK_DIV can be only generated correctly after enabling SYSCLK.

	 * So we here provisionally enable it and then disable it afterward

	 * if current bias_level hasn't reached SND_SOC_BIAS_ON.

 Search a proper bclk, not exact match. */

 Table is sorted */

 VMID 2*50k */

 VMID 2*250k */

/* The size in bits of the FLL divide multiplied by 10

 Fref must be <=13.5MHz */

 Apply the division for our remaining calculations */

 Fvco should be 90-100MHz; don't check the upper bound */

 Find an appropriate FLL_FRATIO and factor it out of the target */

 Any change? */

 Parameters good, disable so we can reprogram */

 Stop the FLL while we reconfigure */

	/* This should be a massive overestimate but go even

	 * higher if we'll error out

	/**

	 * The DAC mute bit is mirrored in two registers, update both to keep

	 * the register cache consistent.

 Acknowledge the interrupts */

/**

 * wm8962_mic_detect - Enable microphone detection via the WM8962 IRQ

 *

 * @component:  WM8962 component

 * @jack:   jack to report detection events on

 *

 * Enable microphone detection via IRQ on the WM8962.  If GPIOs are

 * being used to bring out signals to the processor then only platform

 * data configuration is needed for WM8962 and processor GPIOs should

 * be configured using snd_soc_jack_add_gpios() instead.

 *

 * If no jack is supplied detection will be disabled.

 Send an initial empty report */

/* For usability define a way of injecting beep events for the device -

 * many systems will not have a keyboard.

 Kick the beep from a workqueue */

	/* Some of the GPIOs are behind MFP configuration and need to

	/* The WM8962 GPIOs aren't linearly numbered.  For simplicity

	 * we export linear numbers and error out if the unsupported

	 * ones are requsted.

 Force function 1 (logic output) */

 This should really be moved into the regulator core */

 Save boards having to disable DMIC when not in use */

		/*

		 * Register 515 (WM8962_GPIO_BASE + 3) does not exist,

		 * so skip its access

 Improve power consumption for IN4 DC measurement mode */

			/*

			 * The range of GPIO register value is [0x0, 0xffff]

			 * While the default value of each register is 0x0

			 * Any other value will be regarded as default value

 If platform data was supplied, update the default data in priv */

	/*

	 * We haven't marked the chip revision as volatile due to

	 * sharing a register with the right input volume; explicitly

	 * bypass the cache to read it.

	/* SYSCLK defaults to on; make sure it is off so we can safely

	 * write to registers if the device is declocked.

 Ensure we have soft control over all registers */

 Ensure that the oscillator and PLLs are disabled */

 Apply static configuration for GPIOs */

 Put the speakers into mono mode? */

	/* Micbias setup, detection enable and detection

 Latch volume update bits */

 Stereo control for EQ */

 Don't debouce interrupts so we don't need SYSCLK */

 Non-fatal */

 Enable some IRQs by default */

 The drivers should power up as needed */

	/* SYSCLK defaults to on; make sure it is off so we can safely

	 * write to registers if the device is declocked.

 Ensure we have soft control over all registers */

 Ensure that the oscillator and PLLs are disabled */

 Bias enable at 2*5k (fast start-up) */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2021, Maxim Integrated

 interface format */

 BCLKs per LRCLK */

 match BCLKs per LRCLK */

 BCLK/LRCLK ratio calculation */

 BCLK configuration */

 pcm mode configuration */

 sampling rate configuration */

 set DAI_SR to correct LRCLK frequency */

 BCLK configuration */

 Channel size configuration */

 Rx slot configuration */

 Left Input Selection */

 Right Input Selection */

 Volume */

 Volume Ramp Up/Down Enable*/

 Clock Monitor Enable */

 Clock Monitor Config */

 Dither Enable */

 DC Blocker Enable */

 Speaker Safe Mode Enable */

 AMP SSM Enable */

 Dynamic Headroom Tracking */

 ADC configuration */

 Plabyack */

 Software Reset */

 L/R mono mix configuration : "DAI Sel" for 0x2043 */

 PCM input channles configuration : "Left Input Selection" for 0x2044 */

 PCM input channles configuration : "Right Input Selection" for 0x2044 */

 Enable DC blocker */

 Enable Clock Monitor Auto-restart */

 set Rx Enable */

 regmap initialization */

 Power on device */

 Check Revision ID */

 codec registration */

 SPDX-License-Identifier: GPL-2.0



 Driver for the Texas Instruments TAS2764 CODEC

 Copyright (C) 2020 Texas Instruments Inc.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ALSA SoC Texas Instruments TPA6130A2 headset stereo amplifier driver

 *

 * Copyright (C) Nokia Corporation

 *

 * Author: Peter Ujfalusi <peter.ujfalusi@ti.com>

 This struct is used to save the context */

 Power on */

 Sync registers */

		/* Powered off device does not retain registers. While device

		 * is off, any register updates (i.e. volume changes) should

		 * happen in cache only.

 Power off */

 Before widget power up: turn chip on, sync registers */

 After widget power down: turn chip off */

/*

 * TPA6130 volume. From -59.5 to 4 dB with increasing step size when going

 * down in gain.

 Read version */

 Disable the chip */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ALSA SoC WM9090 driver

 *

 * Copyright 2009-12 Wolfson Microelectronics

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 R1   - Power Management (1) */

 R2   - Power Management (2) */

 R3   - Power Management (3) */

 R6   - Clocking 1 */

 R22  - IN1 Line Control */

 R23  - IN2 Line Control */

 R24  - IN1 Line Input A Volume */

 R25  - IN1  Line Input B Volume */

 R26  - IN2 Line Input A Volume */

 R27  - IN2 Line Input B Volume */

 R28  - Left Output Volume */

 R29  - Right Output Volume */

 R34  - SPKMIXL Attenuation */

 R36  - SPKOUT Mixers */

 R37  - ClassD3 */

 R38  - Speaker Volume Left */

 R45  - Output Mixer1 */

 R46  - Output Mixer2 */

 R47  - Output Mixer3 */

 R48  - Output Mixer4 */

 R54  - Speaker Mixer */

 R57  - AntiPOP2 */

 R70  - Write Sequencer 0 */

 R71  - Write Sequencer 1 */

 R72  - Write Sequencer 2 */

 R73  - Write Sequencer 3 */

 R74  - Write Sequencer 4 */

 R75  - Write Sequencer 5 */

 R76  - Charge Pump 1 */

 R85  - DC Servo 1 */

 R87  - DC Servo 3 */

 R96  - Analogue HP 0 */

 R98  - AGC Control 0 */

 R99  - AGC Control 1 */

 R100 - AGC Control 2 */

 This struct is used to save the context */

		/* Start the DC servo.  We don't currently use the

		 * ability to save the state since we don't have full

		 * control of the analogue paths and they can change

		 * DC offsets; see the WM8904 driver for an example of

		 * doing so.

/*

 * The machine driver should call this from their set_bias_level; if there

 * isn't one then this can just be set as the set_bias_level function.

 Probably an overestimate */

 Restore the register cache */

		/* We keep VMID off during standby since the combination of

		 * ground referenced outputs and class D speaker mean that

		 * latency is not an issue.

	/* Configure some defaults; they will be written out when we

	 * bring the bias up.

 SPDX-License-Identifier: GPL-2.0

/*

 * ak4118.c  --  Asahi Kasei ALSA Soc Audio driver

 *

 * Copyright 2018 DEVIALET

 format not supported */

 release reset */

 unmask all int1 sources */

 rx detect enable on all channels */

 hold reset */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * sound/soc/codecs/wm8782.c

 * simple, strap-pin configured 24bit 2ch ADC

 *

 * Copyright: 2011 Raumfeld GmbH

 * Author: Johannes Stezenbach <js@sig21.net>

 *

 * based on ad73311.c

 * Copyright:	Analog Devices Inc.

 * Author:	Cliff Cai <cliff.cai@analog.com>

 For configurations with FSAMPEN=0 */

 regulator power supply names */

 analog supply, 2.7V - 3.6V */

 digital supply, 2.7V - 5.5V */

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rt5640.c  --  RT5640/RT5639 ALSA SoC audio codec driver

 *

 * Copyright 2011 Realtek Semiconductor Corp.

 * Author: Johnny Hsu <johnnyhsu@realtek.com>

 * Copyright (c) 2013, NVIDIA CORPORATION.  All rights reserved.

 {0, +20, +24, +30, +35, +40, +44, +50, +52} dB */

 Interface data select */

 Class D speaker gain ratio */

 Speaker Output Volume */

 Headphone Output Volume */

 OUTPUT Control */

 DAC Digital Volume */

 IN1/IN2/IN3 Control */

 INL/INR Volume Control */

 ADC Digital Volume Control */

 ADC Boost Volume Control */

 Class D speaker gain ratio */

 MONO Output Control */

/**

 * set_dmic_clk - Set parameter of dmic.

 *

 * @w: DAPM widget.

 * @kcontrol: The kcontrol of this widget.

 * @event: Event id.

 *

 Digital Mixer */

 Analog Input Mixer */

 Analog Output Mixer */

 Stereo ADC source */

 Mono ADC source */

 DAC2 channel source */

 digital interface and iis interface map */

 SDI select */

 depop parameters */

 headphone amp power on */

 ASRC */

 Input Side */

 micbias */

 Input Lines */

 Boost */

 Input Volume */

 REC Mixer */

 ADCs */

 ADC Mux */

 ADC Mixer */

 Digital Interface */

 Digital Interface Select */

 Audio Interface */

 Output Side */

 DAC mixer before sound effect  */

 DAC Mixer */

 DACs */

 SPK/OUT Mixer */

 Ouput Volume */

 SPO/HPO/LOUT/Mono Mixer */

 Output Switch */

 Output Lines */

 Audio DSP */

 ANC */

 DAC2 channel Mux */

		/*

		 * SND_SOC_BIAS_PREPARE is called while preparing for a

		 * transition to ON or away from ON. If current bias_level

		 * is SND_SOC_BIAS_ON, then it is preparing for a transition

		 * away from ON. Disable the clock in that case, otherwise

		 * enable it.

 OVCD is unreliable when used with RCCLK as sysclk-source */

 Jack detect and button-press timings */

 milli seconds */

 Aprox. 2 seconds worth of tries */

 milli seconds */

 milli seconds */

 assume something is wrong after this */

 Check the jack was not removed underneath us */

 Remember till after JACK_UNPLUG_TIME wait */

	/*

	 * The pins get temporarily shorted on jack unplug, so we poll for

	 * at least JACK_UNPLUG_TIME milli-seconds before reporting a press.

 Re-enable OVCD IRQ to detect next press */

 Stop polling */

	/*

	 * We get the insertion event before the jack is fully inserted at which

	 * point the second ring on a TRRS connector may short the 2nd ring and

	 * sleeve contacts, also the overcurrent detection is not entirely

	 * reliable. So we try several times with a wait in between until we

	 * detect the same type JACK_DETECT_COUNT times in a row.

 Clear any previous over-current status flag */

 Check the jack is still connected before checking ovcd */

			/*

			 * Over current detected, there is a short between the

			 * 2nd ring contact and the ground, so a TRS connector

			 * without a mic contact and thus plain headphones.

 Jack removed, or spurious IRQ? */

 Jack inserted */

 Enable ovcd IRQ for button press detect. */

 No more need for overcurrent detect. */

		/*

		 * The ovcd IRQ keeps firing while the button is pressed, so

		 * we disable it and start polling the button until released.

		 *

		 * The disable will make the IRQ pin 0 again and since we get

		 * IRQs on both edges (so as to detect both jack plugin and

		 * unplug) this means we will immediately get another IRQ.

		 * The ovcd_irq_enabled check above makes the 2ND IRQ a NOP.

		/*

		 * If the jack-detect IRQ flag goes high (unplug) after our

		 * above rt5640_jack_inserted() check and before we have

		 * disabled the OVCD IRQ, the IRQ pin will stay high and as

		 * we react to edges, we miss the unplug event -> recheck.

	/*

	 * The over-current-detect is only reliable in detecting the absence

	 * of over-current, when the mic-contact in the jack is short-circuited,

	 * the hardware periodically retries if it can apply the bias-current

	 * leading to the ovcd status flip-flopping 1-0-1 with it being 0 about

	 * 10% of the time, as we poll the ovcd status bit we might hit that

	 * 10%, so we enable sticky mode and when checking OVCD we clear the

	 * status, msleep() a bit and then check to get a reliable reading.

	/*

	 * soc_remove_component() force-disables jack and thus rt5640->jack

	 * could be NULL at the time of driver's module unloading.

 Select JD-source */

 Selecting GPIO01 as an interrupt */

 Set GPIO1 output */

 Enabling jd2 in general control 1 */

 Enabling jd2 in general control 2 */

	/*

	 * All IRQs get or-ed together, so we need the jack IRQ to report 0

	 * when a jack is inserted so that the OVCD IRQ then toggles the IRQ

	 * pin 0/1 instead of it being stuck to 1. So we invert the JD polarity

	 * on systems where the hardware does not already do this.

 Undo above settings */

 sync initial jack state */

 Check if MCLK provided */

	/*

	 * Note on some platforms the platform code may need to add device-props

	 * rather then relying only on properties set by the firmware.

	 * Therefor the property parsing MUST be done here, rather then from

	 * rt5640_i2c_probe(), so that the platform-code can attach extra

	 * properties before calling snd_soc_register_card().

	/*

	 * Testing on various boards has shown that good defaults for the OVCD

	 * threshold and scale-factor are 2000µA and 0.75. For an effective

	 * limit of 1500µA, this seems to be more reliable then 1500µA and 1.0.

	/*

	 * LDO1_EN is optional (it may be statically tied on the board).

	 * -ENOENT means that the property doesn't exist, i.e. there is no

	 * GPIO, so is not an error. Any other error code means the property

	 * exists, but could not be parsed.

 Make sure work is stopped on probe-error / remove */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * NAU85L40 ALSA SoC audio driver

 *

 * Copyright 2016 Nuvoton Technology Corp.

 * Author: John Hsu <KCHSU0@nuvoton.com>

 the maximum frequency of CLK_ADC */

 scaling for mclk from sysclk_src output */

 ratio for input clk freq */

 over sampling rate */

 OSR 32, SRC 1/8 */

 OSR 64, SRC 1/4 */

 OSR 128, SRC 1/2 */

 OSR 256, SRC 1 */

 DO12 and DO34 pad output enable */

	/* CLK_ADC = OSR * FS

	 * ADC clock frequency is defined as Over Sampling Rate (OSR)

	 * multiplied by the audio sample rate (Fs). Note that the OSR and Fs

	 * values must be selected such that the maximum frequency is less

	 * than 6.144 MHz.

/**

 * nau8540_set_tdm_slot - configure DAI TX TDM.

 * @dai: DAI

 * @tx_mask: bitmask representing active TX slots. Ex.

 *                 0xf for normal 4 channel TDM.

 *                 0xf0 for shifted 4 channel TDM

 * @rx_mask: no used.

 * @slots: Number of slots in use.

 * @slot_width: Width in bits for each slot.

 *

 * Configures a DAI for TDM operation. Only support 4 slots TDM.

/**

 * nau8540_calc_fll_param - Calculate FLL parameters.

 * @fll_in: external clock provided to codec.

 * @fs: sampling rate.

 * @fll_param: Pointer to structure of FLL parameters.

 *

 * Calculate FLL parameters to configure codec.

 *

 * Returns 0 for success or negative error code.

	/* Ensure the reference clock frequency (FREF) is <= 13.5MHz by dividing

	 * freq_in by 1, 2, 4, or 8 using FLL pre-scalar.

	 * FREF = freq_in / NAU8540_FLL_REF_DIV_MASK

 Choose the FLL ratio based on FREF */

	/* Calculate the frequency of DCO (FDCO) given freq_out = 256 * Fs.

	 * FDCO must be within the 90MHz - 124MHz or the FFL cannot be

	 * guaranteed across the full range of operation.

	 * FDCO = freq_out * 2 * mclk_src_scaling

	/* Calculate the FLL 10-bit integer input and the FLL 16-bit fractional

	 * input based on FDCO, FREF and FLL ratio.

 FLL 16-bit fractional input */

 FLL 10-bit integer input */

 FLL pre-scaler */

 freq_out must be 256*Fs in order to achieve the best performance */

 Enable Bias/VMID/VMID Tieoff */

	/* ADC OSR selection, CLK_ADC = Fs * OSR;

	 * Channel time alignment enable.

 PGA input mode selection */

 DO12 and DO34 pad output disable */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for ADAU1381/ADAU1781 CODEC

 *

 * Copyright 2014 Analog Devices Inc.

 *  Author: Lars-Peter Clausen <lars@metafoo.de>

	/*

	 * To get the device into SPI mode CLATCH has to be pulled low three

	 * times.  Do this by issuing three dummy reads.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ALSA SoC driver for

 *    Asahi Kasei AK5386 Single-ended 24-Bit 192kHz delta-sigma ADC

 *

 * (c) 2013 Daniel Mack <zonque@gmail.com>

 CONFIG_PM */

	/*

	 * From the datasheet:

	 *

	 * All external clocks (MCLK, SCLK and LRCK) must be present unless

	 * PDN pin = “L”. If these clocks are not provided, the AK5386 may

	 * draw excess current due to its use of internal dynamically

	 * refreshed logic. If the external clocks are not present, place

	 * the AK5386 in power-down mode (PDN pin = “L”).

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rt5514-spi.c  --  RT5514 SPI driver

 *

 * Copyright 2015 Realtek Semiconductor Corp.

 * Author: Oder Chiou <oder_chiou@realtek.com>

	/**

	 * The address area x1800XXXX is the register address, and it cannot

	 * support spi burst read perfectly. So we use the spi burst read

	 * individually to make sure the data correctly.

 PCM for streaming audio from the DSP buffer */

 Read IRQ status and schedule copy accordingly. */

/**

 * rt5514_spi_burst_read - Read data from SPI by rt5514 address.

 * @addr: Start address.

 * @rxbuf: Data Buffer for reading.

 * @len: Data length, it must be a multiple of 8.

 *

 *

 * Returns true for success.

/**

 * rt5514_spi_burst_write - Write data to SPI by rt5514 address.

 * @addr: Start address.

 * @txbuf: Data Buffer for writng.

 * @len: Data length, it must be a multiple of 8.

 *

 *

 * Returns true for success.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * max98390.c  --  MAX98390 ALSA Soc Audio driver

 *

 * Copyright (C) 2020 Maxim Integrated Products

 *

 interface format */

 BCLKs per LRCLK */

 match BCLKs per LRCLK */

 codec MCLK rate in master mode */

 BCLK/LRCLK ratio calculation */

 match rate to closest value */

 BCLK configuration */

 pcm mode configuration */

 sampling rate configuration */

 set DAI_SR to correct LRCLK frequency */

 BCLK configuration */

 Channel size configuration */

 Rx slot configuration */

 Tx slot Hi-Z configuration */

 Do nothing */

 Plabyack */

 voltage, current slot configuration */

 Sleep reset settle time */

 Amp init setting */

 Update dsm bin param */

 Dsm Setting */

 voltage/current slot configuration */

 regmap initialization */

 Check Revision ID */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2018-2020, The Linux Foundation. All rights reserved.

 Fractional Rates */

 HPH_L */

 HPH_R */

 Codec supports 2 IIR filters */

 Each IIR has 5 Filter Stages */

 Main path clock users count */

 RX Macro */

 Update volatile list for rx/tx macros */

 8 but with 32 bit read/write */

 Set Look Ahead Delay */

 Set DEM INP Select */

		/*

		 * Loop through all interpolator MUX inputs and find out

		 * to which interpolator input, the rx port

		 * is connected

 sample_rate is in Hz */

		/*

		 * CDC_DMA_RX_0 port drives RX0/RX1 -- ch_mask 0x1/0x2/0x3

		 * CDC_DMA_RX_1 port drives RX2/RX3 -- ch_mask 0x1/0x2/0x3

		 * CDC_DMA_RX_2 port drives RX4     -- ch_mask 0x1

		 * CDC_DMA_RX_3 port drives RX5     -- ch_mask 0x1

		 * AIFn can pair to any CDC_DMA_RX_n port.

		 * In general, below convention is used::

		 * CDC_DMA_RX_0(AIF1)/CDC_DMA_RX_1(AIF2)/

		 * CDC_DMA_RX_2(AIF3)/CDC_DMA_RX_3(AIF4)

 AUX does not have compander */

 Enable Compander Clock */

 compander coefficients are loaded only for hph path */

 Load Compander Coeff */

 Enable Softclip clock */

 Enable Softclip control */

 Update Aux HPF control */

 Reset to default (HPF=ON) */

		/*

		 * These K1 values depend on the Headphone Impedance

		 * For now it is assumed to be 16 ohm

 Main path PGA mute enable */

 Main path PGA mute enable */

 Clk Disable */

 Reset enable and disable */

 Reset rate to 48K*/

 Clk Disable */

 Reset enable and disable */

 fall through */

 Address does not automatically update if reading */

 Mask bits top 2 bits since they are reserved */

 Mask top 2 bits, 7-8 are reserved */

 Mask top bit it is reserved */

 Updates addr automatically for each B2 write */

 default set to 48k */

 Mixing path INT0 */

 Mixing path INT1 */

 Mixing path INT2 */

 set MCLK and NPL rates */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2015-2021, The Linux Foundation. All rights reserved.

 Delayed work to report long button press */

 Work to correct accessory type */

 track headhpone status */

 impedance of hphl and hphr */

 Holds type of Headset - Mono/Stereo */

 Holds mbhc detection method - ADC/Legacy */

	/*

	 * Some codecs handle micbias/pullup enablement in codec

	 * drivers itself and micbias is not needed for regular

	 * plug type detection. So if micbias_control callback function

	 * is defined, just return.

 Program Button threshold registers as per CS */

 Disable PULL_UP_EN & enable MICBIAS */

 Program Button threshold registers as per MICBIAS */

 Program Button threshold registers as per MICBIAS */

 MICBIAS usage change */

 Disable current source if micbias2 enabled */

		/*

		 * Before MICBIAS_2 is turned off, if FSM is enabled,

		 * make sure current source is enabled so as to detect

		 * button press/release events

 && !mbhc->micbias_enable*/) {

 MICBIAS usage change */

 Enable PULL UP if PA's are enabled */

 enable pullup and cs, disable mb */

 enable current source and disable mb, pullup*/

 check if micbias is enabled */

 Disable cs, pullup & enable micbias */

 Disable micbias, pullup & enable cs */

 check if micbias is enabled */

 Disable cs, pullup & enable micbias */

 Disable micbias, pullup & enable cs */

 check if micbias is enabled */

 Disable cs, pullup & enable micbias */

 Disable micbias, enable pullup & cs */

 check if micbias is enabled */

 Disable cs, pullup & enable micbias */

 Disable micbias, enable pullup & cs */

	/*

	 * cancel possibly scheduled btn work and

	 * report release if we reported button press

 Set MUX_CTL to AUTO for Z-det */

	/*

	 * Report removal of current jack type.

	 * Headphone to headset shouldn't report headphone

	 * removal.

 Report insertion */

	/* Do not calculate impedance again for lineout

	 * as during playback pa is on and impedance values

	 * will not be correct resulting in lineout detected

	 * as headphone.

 Report removal */

 cancel pending button press */

 cancel correct work function */

 Report extension cable */

	/*

	 * Disable HPHL trigger and MIC Schmitt triggers.

	 * Setup for insertion detection.

 Disable HW FSM */

 Set the detection type appropriately */

 Set the detection type appropriately */

 Enable micbias ramp */

 Make sure MASTER_BIAS_CTL is enabled */

 Disable HW FSM */

 Too short, ignore button press */

 If switch interrupt already kicked in, ignore button press */

 Plug isn't headset, ignore button press */

 fake btn press */

 Reporting long button release event */

 Reporting btn press n Release */

 TODO Find a better way to report this to Userspace */

 enable HS detection */

 Insertion debounce set to 96ms */

 Button Debounce set to 16ms */

 enable bias */

 enable MBHC clock */

 program HS_VREF value */

 Read MBHC Micbias (Mic Bias2) voltage */

		/* Formula for getting micbias from vout

		 * micbias = 1.0V + VOUT_CTL * 50mV

	/* Formula for calculating voltage from ADC

	 * Voltage = ADC_RESULT*12.5mV*V_MICBIAS/1.8

 Pre-requisites for ADC continuous measurement */

 Read legacy electircal detection and disable */

 Set ADC to continuous measurement */

 Read ADC Enable bit to restore after adc measurement */

 Disable ADC_ENABLE bit */

 Disable MBHC FSM */

 Set the MUX selection to IN2P */

 Enable MBHC FSM */

 Enable ADC_ENABLE bit */

 wait for 3 msec before reading ADC result */

 Restore ADC Enable */

 Get voltage from ADC result */

 Read ADC Enable bit to restore after adc measurement */

 Trigger ADC one time measurement */

 Set the appropriate MUX selection */

 wait for 600usec to get adc results */

 check for ADC Timeout */

 Read ADC complete bit */

 Read ADC result */

 Get voltage from ADC result */

 Restore ADC Enable */

 To determine if cross connection occurred */

 If PA is enabled, dont check for cross-connection */

 Read legacy electircal detection and disable */

 Read and set ADC to single measurement */

 Read ADC Enable bit to restore after adc measurement */

 Read FSM status */

 Get adc result for HPH L */

 Get adc result for HPH R in mV */

 Set the MUX selection to Auto */

 Restore ADC Enable */

 Restore ADC mode */

 Restore FSM state */

 Restore electrical detection */

 Mask ADC COMPLETE interrupt */

 Check for cross connection */

 Find plug type */

	/*

	 * Report plug type if it is either headset or headphone

	 * else start the 3 sec loop

 Disable BCS slow insertion detection */

		/*

		 * Use ADC single mode to minimize the chance of missing out

		 * btn press/release for HEADSET type during correct work.

 Check for cross connection*/

 cross-connection */

 no cross connection */

 Error */

 US_EU gpio present, flip switch */

 cable is extension cable */

	/*

	 * Set DETECTION_DONE bit for HEADSET

	 * so that btn press/release interrupt can be generated.

	 * For other plug type, clear the bit.

 &&  !mbhc->micbias_enable*/)

	/*

	 * If plug type is corrected from special headset to headphone,

	 * clear the micbias enable flag, set micbias back to 1.8V and

	 * disable micbias.

		/*

		 * Enable ADC COMPLETE interrupt for HEADPHONE.

		 * Btn release may happen after the correct work, ADC COMPLETE

		 * interrupt needs to be captured to correct plug type.

		/*

		 * read output_mv every 10ms to look for

		 * any change in IN2_P

 Check for fake removal */

	/*

	 * ADC COMPLETE and ELEC_REM interrupts are both enabled for

	 * HEADPHONE, need to reject the ADC COMPLETE interrupt which

	 * follows ELEC_REM one when HEADPHONE is removed.

	/*

	 * ADC COMPLETE and ELEC_REM interrupts are both enabled for HEADPHONE,

	 * need to reject the ADC COMPLETE interrupt which follows ELEC_REM one

	 * when HEADPHONE is removed.

		/*

		 * check clamp for 120ms but at 30ms chunks to leave

		 * room for other interrupts to be processed

	/*

	 * If current plug is headphone then there is no chance to

	 * get ADC complete interrupt, so connected cable should be

	 * headset not headphone.

 default voltage */

 Micro to Milli Volts */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8737.c  --  WM8737 ALSA SoC Audio driver

 *

 * Copyright 2010 Wolfson Microelectronics plc

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 codec private data */

 R0  - Left PGA volume */

 R1  - Right PGA volume */

 R2  - AUDIO path L */

 R3  - AUDIO path R */

 R4  - 3D Enhance */

 R5  - ADC Control */

 R6  - Power Management */

 R7  - Audio Format */

 R8  - Clocking */

 R9  - MIC Preamp Control */

 R10 - Misc Bias Control */

 R11 - Noise Gate */

 R12 - ALC1 */

 R13 - ALC2 */

 R14 - ALC3 */

 codec mclk clock divider coefficients */

 VMID at 2*75k */

 Fast VMID ramp at 2*2.5k */

 Bring VMID up */

 VMID at 2*300k */

 Mono modes not yet supported */

 Bias level configuration will have done an extra enable */

 CONFIG_SPI_MASTER */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * AD1938/AD1939 audio driver

 *

 * Copyright 2014 Analog Devices Inc.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PCM3168A codec spi driver

 *

 * Copyright (C) 2015 Imagination Technologies Ltd.

 *

 * Author: Damien Horsley <Damien.Horsley@imgtec.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * wm8996.c - WM8996 audio codec interface

 *

 * Copyright 2011-2 Wolfson Microelectronics PLC.

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 Platform dependant ReTune mobile configuration */

/* We can't use the same notifier block for more than one supply and

 * there's no way I can see to get from a callback to the caller

 * except container_of().

	/* Find the version of the currently selected configuration

	/* The EQ will be disabled while reconfiguring it, remember the

	 * current configuration. 

 Icky as hell but saves code duplication */

 Record which outputs we enabled */

 Use the interrupt if possible */

 Complete any pending DC servo starts */

 Trigger a startup sequence */

/* We route as stereo pairs so define some dummy widgets to squash

	/* Due to the sparseness of the register map the compiler

	 * output from an explicit switch statement ends up being much

	 * more efficient than a table.

	/* Don't bother if we're in a low frequency idle mode that

	 * can't support audio.

 Pick a divisor for BCLK as close as we can get to ideal */

 BCLK table is sorted */

 Put the MICBIASes into regulating mode */

 Bypass the MICBIASes for lowest power */

 Needs looking at for TDM */

 Disable SYSCLK while we reconfigure */

 Fref must be <=13.5MHz */

 Apply the division for our remaining calculations */

 Fvco should be 90-100MHz; don't check the upper bound */

 Find an appropraite FLL_FRATIO and factor it out of the target */

 Any change? */

 Enable the bandgap if it's not already enabled */

 Clear any pending completions (eg, from failed startups) */

	/* The FLL supports live reconfiguration - kick that in case we were

	 * already enabled.

 Wait for the FLL to lock, using the interrupt if possible */

	/* Allow substantially longer if we've actually got the IRQ, poll

	 * at a slightly higher rate if we don't.

 ensure timeout of atleast 1 jiffies */

/**

 * wm8996_detect - Enable default WM8996 jack detection

 * @component: ASoC component

 * @jack: jack pointer

 * @polarity_cb: polarity callback

 *

 * The WM8996 has advanced accessory detection support for headsets.

 * This function provides a default implementation which integrates

 * the majority of this functionality with minimal user configuration.

 *

 * This will detect headset, headphone and short circuit button and

 * will also detect inverted microphone ground connections and update

 * the polarity of the connections.

 Clear discarge to avoid noise during detection */

 LDO2 powers the microphones, SYSCLK clocks detection */

	/* We start off just enabling microphone detection - even a

	 * plain headphone will trigger detection.

 Slowest detection rate, gives debounce for initial detection */

 Enable interrupts and we're off */

	/* Assume headphone in error conditions; we need to report

	 * something or we stall our state machine.

	/* If we've got high enough impedence then report as line,

	 * otherwise assume headphone.

 If the output isn't running re-clamp it */

 Go back to looking at the microphone */

 Unclamp the output, we can't measure while we're shorting it */

 We need bandgap for HPDET */

 Go into headphone detect left mode */

 Trigger a measurement */

 Increase the detection rate a bit for responsiveness. */

 No accessory, reset everything and report removal */

	/* If the measurement is very high we've got a microphone,

	 * either we just detected one or if we already reported then

	 * we've got a button release event.

			/* Increase poll rate to give better responsiveness

	/* If we detected a lower impedence during initial startup

	 * then we probably have the wrong polarity, flip it.  Don't

	 * do this for the lowest impedences to speed up detection of

	 * plain headphones.  If both polarities report a low

	 * impedence then give up and report headphones.

	/* Don't distinguish between buttons, just report any low

	 * impedence as BTN_0.

	/* We need an array of texts for the enum API but the number

	 * of texts is likely to be less than the number of

	 * configurations due to the sample rate dependency of the

 Expand the array... */

 ...store the new entry... */

 ...and remember the new version. */

 Unmask the interrupt */

 Enable error reporting and DC servo status */

 This should really be moved into the regulator core */

 Apply platform data settings */

 Latch volume update bits */

	/* No support currently for the underclocked TDM modes and

	 * pick a default TDM layout with each channel pair working with

	/* If the TX LRCLK pins are not in LRCLK mode configure the

	 * AIFs to source their clocks from the RX LRCLKs.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8960.c  --  WM8960 ALSA SoC Audio driver

 *

 * Copyright 2007-11 Wolfson Microelectronics, plc

 *

 * Author: Liam Girdwood

 R25 - Power 1 */

 R26 - Power 2 */

 R28 - Anti-pop 1 */

 R29 - Anti-pop 2 */

/*

 * wm8960 register cache

 * We can't read the WM8960 register space when we are

 * using 2 wire for device control, so we cache them instead.

 enumerated controls */

	/* If we're using deemphasis select the nearest available sample

	 * rate.

 Represent OUT3 as a PGA so that it gets turned on with LOUT1/ROUT1 */

 Really Boost Switch */

 Really Boost Switch */

	/* In capless mode OUT3 is used to provide VMID for the

	 * headphone outputs, otherwise it is used as a mono mixer.

	/* We need to power up the headphone output stage out of

	 * sequence for capless mode.  To save scanning the widget

	 * list each time to find the desired power state do so now

	 * and save the result.

 set master/slave audio interface */

 interface format */

 clock inversion */

 set iface */

 -1 for reserved value */

 Multiply 256 for internal 256 div */

 Multiply 10 to eliminate decimials */

/**

 * wm8960_configure_sysclk - checks if there is a sysclk frequency available

 *	The sysclk must be chosen such that:

 *		- sysclk     = MCLK / sysclk_divs

 *		- lrclk      = sysclk / dac_divs

 *		- 10 * bclk  = sysclk / bclk_divs

 *

 * @wm8960: codec private data

 * @mclk: MCLK used to derive sysclk

 * @sysclk_idx: sysclk_divs index for found sysclk

 * @dac_idx: dac_divs index for found lrclk

 * @bclk_idx: bclk_divs index for found bclk

 *

 * Returns:

 *  -1, in case no sysclk frequency available found

 * >=0, in case we could derive bclk and lrclk from sysclk using

 *      (@sysclk_idx, @dac_idx, @bclk_idx) dividers

 marker for no match */

 check if the sysclk frequency is available. */

/**

 * wm8960_configure_pll - checks if there is a PLL out frequency available

 *	The PLL out frequency must be chosen such that:

 *		- sysclk      = lrclk * dac_divs

 *		- freq_out    = sysclk * sysclk_divs

 *		- 10 * sysclk = bclk * bclk_divs

 *

 * 	If we cannot find an exact match for (sysclk, lrclk, bclk)

 * 	triplet, we relax the bclk such that bclk is chosen as the

 * 	closest available frequency greater than expected bclk.

 *

 * @component: component structure

 * @freq_in: input frequency used to derive freq out via PLL

 * @sysclk_idx: sysclk_divs index for found sysclk

 * @dac_idx: dac_divs index for found lrclk

 * @bclk_idx: bclk_divs index for found bclk

 *

 * Returns:

 * < 0, in case no PLL frequency out available was found

 * >=0, in case we could derive bclk, lrclk, sysclk from PLL out using

 *      (@sysclk_idx, @dac_idx, @bclk_idx) dividers

	/*

	 * From Datasheet, the PLL performs best when f2 is between

	 * 90MHz and 100MHz, the desired sysclk output is 11.2896MHz

	 * or 12.288MHz, then sysclkdiv = 2 is the best choice.

	 * So search sysclk_divs from 2 to 1 other than from 1 to 2.

	/*

	 * For Slave mode clocking should still be configured,

	 * so this if statement should be removed, but some platform

	 * may not work if the sysclk is not configured, to avoid such

	 * compatible issue, just add '!wm8960->sysclk' condition in

	 * this if statement.

	/*

	 * If it's sysclk auto mode, check if the MCLK can provide sysclk or

	 * not. If MCLK can provide sysclk, using MCLK to provide sysclk

	 * directly. Otherwise, auto select a available pll out frequency

	 * and set PLL.

 disable the PLL and using MCLK to provide sysclk */

 configure sysclk clock */

 configure frame clock */

 configure bit clock */

 bit size */

 right justify mode does not support 32 word length */

 Update filters for the new rate */

 set iface */

 Set VMID to 2x50k */

			/*

			 * If it's sysclk auto mode, and the pll is enabled,

			 * disable the pll

 Enable anti-pop features */

 Enable & ramp VMID at 2x50k */

 Enable VREF */

 Disable anti-pop features */

 Set VMID to 2x250k */

 Enable anti-pop features */

 Disable VMID and VREF, let them discharge */

 Enable anti pop mode */

 Enable LOUT1, ROUT1 and OUT3 if they're enabled */

 Enable VMID at 2*50k */

 Ramp */

 Enable VREF */

			/*

			 * If it's sysclk auto mode, and the pll is enabled,

			 * disable the pll

 Enable anti-pop mode */

 Disable VMID and VREF */

 Disable HP discharge */

 Disable anti-pop features */

 PLL divisors */

 Scale up target to PLL operating frequency */

/* The size in bits of the pll divide multiplied by 10

 Scale up target to PLL operating frequency */

 Check if we need to round */

 Move down to proper range now rounding is done */

	/* Disable the PLL: even if we are changing the frequency the

 Turn it on */

 Latch the update bits */

 ADCLRC pin configured as GPIO. */

 Enable headphone jack detect */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8731.c  --  WM8731 ALSA SoC Audio driver

 *

 * Copyright 2005 Openedhand Ltd.

 * Copyright 2006-12 Wolfson Microelectronics, plc

 *

 * Author: Richard Purdie <richard@openedhand.com>

 *

 * Based on wm8753.c by Liam Girdwood

 codec private data */

/*

 * wm8731 register cache

	/* If we're using deemphasis select the nearest available sample

	 * rate.

 Output Mixer */

 Input mux */

 output mixer */

 outputs */

 input mux */

 inputs */

 codec mclk clock divider coefficients */

 48k */

 32k */

 8k */

 96k */

 44.1k */

 88.2k */

 rates constraints */

 bit size */

 set master/slave audio interface */

 interface format */

 clock inversion */

 set iface */

 Clear PWROFF, gate CLKOUT, everything else as-is */

 Clear POWEROFF, keep everything else disabled */

 Latch the update bits */

 Disable bypass path by default */

 Regulators will be enabled by bias management */

 CONFIG_SPI_MASTER */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver of Inno codec for rk3036 by Rockchip Inc.

 *

 * Author: Rockchip Inc.

 * Author: Zheng ShunQian<zhengsq@rock-chips.com>

 set a big current for capacitor charging. */

 start precharge */

 set a big current for capacitor discharging. */

 start discharge. */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2015-18 Intel Corporation.

/*

 * hdac_hda.c - ASoC extensions to reuse the legacy HDA codec drivers

 * with ASoC platform drivers. These APIs are called by the legacy HDA

 * codec drivers using hdac_ext_bus_ops ops.

	/*

	 * map DAI ID to the closest matching PCM name, using the naming

	 * scheme used by hda-codec snd_hda_gen_build_pcms() and for

	 * HDMI in hda_codec patch_hdmi.c)

	/*

	 * Ensure any HDA display is powered at codec probe.

	 * After snd_hda_codec_device_new(), display power is

	 * managed by runtime PM.

	/*

	 * Overwrite type to HDA_DEV_ASOC since it is a ASoC driver

	 * hda_codec.c will check this flag to determine if unregister

	 * device is needed.

	/*

	 * snd_hda_codec_device_new decrements the usage count so call get pm

	 * else the device will be powered off

 configure codec for 1:1 PCM:DAI mapping */

 HDMI controls need to be created in machine drivers */

 match for forbid call in snd_hda_codec_device_new() */

	/*

	 * hdac_device core already sets the state to active and calls

	 * get_noresume. So enable runtime and set the device to suspend.

	 * pm_runtime_enable is also called during codec registeration

 Audio Interface */

 Input Pins */

 Output Pins */

 hold the ref while we probe */

 ASoC specific initialization */

	/*

	 * Resources are freed in hdac_hda_codec_remove(). This

	 * function is kept to keep hda_codec_driver_remove() happy.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for the PCM512x CODECs

 *

 * Author:	Mark Brown <broonie@kernel.org>

 *		Copyright 2014 Linaro Ltd

 msb needs to be set to enable auto-increment of addresses */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rt5631.c  --  RT5631 ALSA Soc Audio driver

 *

 * Copyright 2011 Realtek Microelectronics

 *

 * Author: flove <flove@realtek.com>

 *

 * Based on WM8753.c

/*

 * rt5631_write_index - write index register of 2nd layer

/*

 * rt5631_read_index - read index register of 2nd layer

 {0, +20, +24, +30, +35, +40, +44, +50, +52}dB */

 MIC Input Type */

 MONO Input Type */

 SPK Ratio Gain Control */

 MIC */

 MONO IN */

 AXI */

 DAC */

 AXO */

 OUTVOL */

 SPK */

 MONO OUT */

 HP */

 DMIC */

 SPK Ratio Gain Control */

/**

 * onebit_depop_power_stage - auto depop in power stage.

 * @component: ASoC component

 * @enable: power on/off

 *

 * When power on/off headphone, the depop sequence is done by hardware.

 enable one-bit depop function */

 keep soft volume and zero crossing setting */

 config one-bit depop parameter */

 power on capless block */

 power off capless block */

 recover soft volume and zero crossing setting */

/**

 * onebit_depop_mute_stage - auto depop in mute stage.

 * @component: ASoC component

 * @enable: mute/unmute

 *

 * When mute/unmute headphone, the depop sequence is done by hardware.

 enable one-bit depop function */

 keep soft volume and zero crossing setting */

 config one-bit depop parameter */

 recover soft volume and zero crossing setting */

/**

 * depop_seq_power_stage - step by step depop sequence in power stage.

 * @component: ASoC component

 * @enable: power on/off

 *

 * When power on/off headphone, the depop sequence is done in step by step.

 depop control by register */

 keep soft volume and zero crossing setting */

 config depop sequence parameter */

 power on headphone and charge pump */

 power on soft generator and depop mode2 */

 stop depop mode */

 config depop sequence parameter */

 start depop mode */

 config depop sequence parameter */

 power down headphone and charge pump */

 recover soft volume and zero crossing setting */

/**

 * depop_seq_mute_stage - step by step depop sequence in mute stage.

 * @component: ASoC component

 * @enable: mute/unmute

 *

 * When mute/unmute headphone, the depop sequence is done in step by step.

 depop control by register */

 keep soft volume and zero crossing setting */

 config depop sequence parameter */

 config depop sequence parameter */

 recover soft volume and zero crossing setting */

 Left SPK Volume Input */

 Left HP Volume Input */

 Left Out Volume Input */

 Right Out Volume Input */

 Right HP Volume Input */

 Right SPK Volume Input */

 SPO Left Channel Input */

 SPO Right Channel Input */

 MONO Input */

 Left HPO Input */

 Right HPO Input */

 Vmid */

 PLL1 */

 Input Side */

 Input Lines */

 MICBIAS */

 Boost */

 MONO In */

 REC Mixer */

	/* Because of record duplication for L/R channel,

 DMIC */

 ADC Data Srouce */

 ADCs */

 DAC and ADC supply power */

 Output Side */

 DACs */

 DAC supply power */

 Left SPK Mixer */

 Left Out Mixer */

 Right Out Mixer */

 Right SPK Mixer */

 Volume Mux */

 DAC To HP */

 HP Depop */

 AXO1 Mixer */

 SPOL Mixer */

 MONO Mixer */

 SPOR Mixer */

 AXO2 Mixer */

 Mux */

 AMP supply */

 Output Lines */

 PLL divisors */

 sysclk is 256fs */

 sysclk is 512fs */

 sysclk is 24.576Mhz or 22.5792Mhz */

 enable HP zero cross */

 power off ClassD auto Recovery */

 DMIC */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * SSM2518 amplifier audio driver

 *

 * Copyright 2013 Analog Devices Inc.

 *  Author: Lars-Peter Clausen <lars@metafoo.de>

 Disable auto samplerate detection */

 We assume the left channel < right channel */

		/* In this case the bitclock is used as the system clock, and

		 * the bitclock signal needs to be connected to the MCLK pin and

	/*

	 * The reset bit is obviously volatile, but we need to be able to cache

	 * the other bits in the register, so we can't just mark the whole

	 * register as volatile. Since this is the only place where we'll ever

	 * touch the reset bit just bypass the cache for this operation.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * wm8971.c  --  WM8971 ALSA SoC Audio driver

 *

 * Copyright 2005 Lab126, Inc.

 *

 * Author: Kenneth Kiraly <kiraly@lab126.com>

 *

 * Based on wm8753.c by Liam Girdwood

 codec private data */

/*

 * wm8971 register cache

 * We can't read the WM8971 register space when we

 * are using 2 wire for device control, so we cache them instead.

 WM8971 Controls */

 0 */

 4 */

 8 */

 12 */

/*

 * DAPM Controls

 Left Mixer */

 Right Mixer */

 Mono Mixer */

 Left Line Mux */

 Right Line Mux */

 Left PGA Mux */

 Right PGA Mux */

 Mono ADC Mux */

 left mixer */

 right mixer */

 left out 1 */

 left out 2 */

 right out 1 */

 right out 2 */

 mono mixer */

 mono out */

 Left Line Mux */

 Right Line Mux */

 Left PGA Mux */

 Right PGA Mux */

 Differential Mux */

 Left ADC Mux */

 Right ADC Mux */

 ADC */

 codec hifi mclk clock divider coefficients */

 8k */

 11.025k */

 16k */

 22.05k */

 32k */

 44.1k */

 48k */

 88.2k */

 96k */

 set master/slave audio interface */

 interface format */

 clock inversion */

 bit size */

 set iface & srate */

 Set to 500k */

 set vmid to 50k and unmute dac */

 Wait until fully charged */

 charge output caps - set vmid to 5k for quick power up */

 mute dac and set vmid to 500k, enable VREF */

 set the update bits */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8958-dsp2.c  --  WM8958 DSP2 support

 *

 * Copyright 2011 Wolfson Microelectronics plc

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 Suppress unneeded downloads */

 Informational text */

 Round up to the next 32 bit word */

 If the DSP is already running then noop */

 If we have MBC firmware download it */

 If we've got user supplied MBC settings use them */

 Run the DSP */

 And we're off! */

 If we've got user supplied settings use them */

 Run the DSP */

 Enable the algorithms we've selected */

 Switch the DSP into the data path */

 If we've got user supplied settings use them */

 Run the DSP */

 Switch the DSP into the data path */

 Do we have both an active AIF and an active algorithm? */

 If the DSP is already running then noop */

 If either AIFnCLK is not yet enabled postpone */

 Switch the clock over to the appropriate AIF */

 If the DSP is already stopped then noop */

 Check if DSP2 is in use on another AIF */

 Don't allow on the fly reconfiguration */

 Don't allow on the fly reconfiguration */

 Don't allow on the fly reconfiguration */

 Don't allow on the fly reconfiguration */

 We don't *require* firmware and don't want to delay boot */

 We need an array of texts for the enum API */

 We need an array of texts for the enum API */

 We need an array of texts for the enum API */

 We need an array of texts for the enum API */

 SPDX-License-Identifier: GPL-2.0-only



 sdw-mockup.c -- a mockup SoundWire codec for tests where only the host

 drives the bus.



 Copyright(c) 2021 Intel Corporation





 Use tx_mask or rx_mask to configure stream tag and set dma_data */

 SoundWire specific configuration */

	/*

	 * first we need to allocate memory for set bits in port lists

	 * the port allocation is completely arbitrary:

	 * DP0 is not supported

	 * DP1 is sink

	 * DP8 is source

 do this again for sink now */

 wake-up event */

/*

 * Intel reserved parts ID with the following mapping expected:

 * 0xAAAA: generic full-duplex codec

 * 0xAA55: headset codec (mock-up of RT711/RT5682) - full-duplex

 * 0x55AA: amplifier (mock-up of RT1308/Maxim 98373) - playback only with

 * IV feedback

 * 0x5555: mic codec (mock-up of RT715) - capture-only

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8904.c  --  WM8904 ALSA SoC Audio driver

 *

 * Copyright 2009-12 Wolfson Microelectronics plc

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 codec private data */

 Platform provided DRC configuration */

 Platform provided ReTune mobile configuration */

 FLL setup */

 Clocking configuration */

 DC servo configuration - cached offset values */

 R4   - Bias Control 0 */

 R5   - VMID Control 0 */

 R6   - Mic Bias Control 0 */

 R7   - Mic Bias Control 1 */

 R8   - Analogue DAC 0 */

 R9   - mic Filter Control */

 R10  - Analogue ADC 0 */

 R12  - Power Management 0 */

 R14  - Power Management 2 */

 R15  - Power Management 3 */

 R18  - Power Management 6 */

 R20  - Clock Rates 0 */

 R21  - Clock Rates 1 */

 R22  - Clock Rates 2 */

 R24  - Audio Interface 0 */

 R25  - Audio Interface 1 */

 R26  - Audio Interface 2 */

 R27  - Audio Interface 3 */

 R30  - DAC Digital Volume Left */

 R31  - DAC Digital Volume Right */

 R32  - DAC Digital 0 */

 R33  - DAC Digital 1 */

 R36  - ADC Digital Volume Left */

 R37  - ADC Digital Volume Right */

 R38  - ADC Digital 0 */

 R39  - Digital Microphone 0 */

 R40  - DRC 0 */

 R41  - DRC 1 */

 R42  - DRC 2 */

 R43  - DRC 3 */

 R44  - Analogue Left Input 0 */

 R45  - Analogue Right Input 0 */

 R46  - Analogue Left Input 1 */

 R47  - Analogue Right Input 1 */

 R57  - Analogue OUT1 Left */

 R58  - Analogue OUT1 Right */

 R59  - Analogue OUT2 Left */

 R60  - Analogue OUT2 Right */

 R61  - Analogue OUT12 ZC */

 R67  - DC Servo 0 */

 R69  - DC Servo 2 */

 R71  - DC Servo 4 */

 R72  - DC Servo 5 */

 R90  - Analogue HP 0 */

 R94  - Analogue Lineout 0 */

 R98  - Charge Pump 0 */

 R104 - Class W 0 */

 R108 - Write Sequencer 0 */

 R109 - Write Sequencer 1 */

 R110 - Write Sequencer 2 */

 R111 - Write Sequencer 3 */

 R112 - Write Sequencer 4 */

 R116 - FLL Control 1 */

 R117 - FLL Control 2 */

 R118 - FLL Control 3 */

 R119 - FLL Control 4 */

 R120 - FLL Control 5 */

 R121 - GPIO Control 1 */

 R122 - GPIO Control 2 */

 R123 - GPIO Control 3 */

 R124 - GPIO Control 4 */

 R126 - Digital Pulls */

 R128 - Interrupt Status Mask */

 R129 - Interrupt Polarity */

 R130 - Interrupt Debounce */

 R134 - EQ1 */

 R135 - EQ2 */

 R136 - EQ3 */

 R137 - EQ4 */

 R138 - EQ5 */

 R139 - EQ6 */

 R140 - EQ7 */

 R141 - EQ8 */

 R142 - EQ9 */

 R143 - EQ10 */

 R144 - EQ11 */

 R145 - EQ12 */

 R146 - EQ13 */

 R147 - EQ14 */

 R148 - EQ15 */

 R149 - EQ16 */

 R150 - EQ17 */

 R151 - EQ18 */

 R152 - EQ19 */

 R153 - EQ20 */

 R154 - EQ21 */

 R155 - EQ22 */

 R156 - EQ23 */

 R157 - EQ24 */

 R161 - Control Interface Test 1 */

 R204 - Analogue Output Bias 0 */

 R247 - FLL NCO Test 0 */

 R248 - FLL NCO Test 1 */

 Gate the clock while we're updating to avoid misclocking */

 This should be done on init() for bypass paths */

 Ensure the FLL is stopped */

 SYSCLK shouldn't be over 13.5MHz */

 Save any enables; the configuration should clear them. */

 Reenable the DRC */

	/* Find the version of the currently selected configuration

	/* The EQ will be disabled while reconfiguring it, remember the

	 * current configuration. 

	/* If we're using deemphasis select the nearest available sample 

	 * rate.

 No TLV since it depends on mode */

 Maximum startup time */

		/* If we're using the FLL then we only start it when

		 * required; we assume that the configuration has been

		 * done previously and all we need to do is kick it

		 * off.

	/* This code is shared between HP and LINEOUT; we do all our

	 * power management in stereo pairs to avoid latency issues so

	 * we reuse shift to identify which rather than strcmp() the

 Power on the PGAs */

 Power on the amplifier */

 Enable the first stage */

 Power up the DC servo */

		/* Either calibrate the DC servo or restore cached state

		 * if we have that.

 Wait for DC servo to complete */

 Enable the output stage */

 Unshort the output itself */

 Short the output */

		/* Cache the DC servo configuration; this will be

 Disable the amplifier input and output stages */

 PGAs too */

 *10 due to .5s */

 What BCLK do we need? */

 Select nearest CLK_SYS_RATE */

 SAMPLE_RATE */

 Closest match */

 Enable sloping stopband filter for low sample rates */

 BCLK_DIV */

 Table is sorted */

 LRCLK is a simple fraction of BCLK */

 Apply the settings */

 Update filters for the new settings */

 frame inversion not valid for DSP modes */

 Don't need to validate anything if we're turning off TDM */

	/* Note that we allow configurations we can't handle ourselves - 

	 * for example, we can generate clocks for slots 2 and up even if

	 * we can't use those slots ourselves.

/* The size in bits of the FLL divide multiplied by 10

 Fref must be <=13.5MHz */

 Apply the division for our remaining calculations */

 Fvco should be 90-100MHz; don't check the upper bound */

 Find an appropriate FLL_FRATIO and factor it out of the target */

 Now, calculate N.K */

 Calculate fractional part - scale up so we can round. */

 Move down to proper range now rounding is done */

 Any change? */

 Gate SYSCLK to avoid glitches */

 Validate the FLL ID */

 Force 12MHz and output/4 for now */

	/* Save current state then disable the FLL and SYSCLK to avoid

 Unlock forced oscilator control to switch it on/off */

 Enable the FLL if it was previously active */

 Reenable SYSCLK if it was previously active */

		/* We don't have any rate constraints, so just ignore the

		 * request to disable constraining.

 enable FLL if a different sysclk is desired */

 VMID resistance 2*50k */

 Normal bias current */

 Enable bias */

 Enable VMID, VMID buffering, 2*5k resistance */

 Let VMID ramp */

 Maintain VMID with 2*250k */

 Bias current *0.5 */

 Turn off VMID */

 Stop bias generation */

	/* We need an array of texts for the enum API but the number

	 * of texts is likely to be less than the number of

	 * configurations due to the sample rate dependency of the

 Expand the array... */

 ...store the new entry... */

 ...and remember the new version. */

 We need an array of texts for the enum API */

 sentinel */

 Change some default settings - latch VU and enable ZC */

 Apply configuration from the platform data. */

 Zero is the default value for these anyway */

	/* Set Class W by default - this will be managed by the Class

	 * G widget at runtime where bypass paths are available.

 Use normal bias source */

 Can leave the device powered off until we need it */

 Actually a subset, updates to follow */

 SPDX-License-Identifier: GPL-2.0



 cs35l41.c -- CS35l41 ALSA SoC audio driver



 Copyright 2017-2021 Cirrus Logic, Inc.



 Author: David Rhodes <david.rhodes@cirrus.com>

 Check to see if unmasked bits are active */

	/*

	 * The following interrupts require a

	 * protection release cycle to get the

	 * speaker out of Safe-Mode.

 Use the lookup table */

 Use hard-coded values */

 1.0 uH */

 1.2 uH */

 1.5 uH */

 2.2 uH */

 201 uF and greater */

 Set Platform Data */

 Required */

 Optional */

 GPIO1 Pin Config */

 GPIO2 Pin Config */

 returning NULL can be an option if in stereo mode */

 satisfy minimum reset pulse width spec */

	/* CS35L41 will have even MTLREVID

	 * CS35L41R will have odd MTLREVID

 Set interrupt masks for critical errors */

 CS35L41 needs INT for PDN_DONE */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2017 BayLibre, SAS.

 * Author: Jerome Brunet <jbrunet@baylibre.com>

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2017, Maxim Integrated

		/*

		 * Register values will be cached before suspend. The cached value

		 * will be a valid value and userspace will happy with that.

 Speaker Amplifier Overcurrent Automatic Restart Enable */

 Thermal Shutdown Automatic Restart Enable */

 Clock Monitor Automatic Restart Enable */

 Dynamic Headroom Tracking */

 ADC configuration */

 Brownout Detection Engine */

 Limiter */

 Plabyack */

 Capture */

 Software Reset */

 Software Reset Verification */

 Software Reset */

 IV default slot configuration */

 L/R mix configuration */

 Enable DC blocker */

 Enable IMON VMON DC blocker */

 voltage, current slot configuration */

 enable auto restart function by default */

 speaker feedback slot configuration */

 Set interleave mode */

 Speaker enable */

 this makes reset_gpio as invalid */

 SPDX-License-Identifier: GPL-2.0



 PCM3060 codec driver



 Copyright (C) 2018 Kirill Marinushkin <kmarinushkin@birdec.com>

 dai */

 dapm */

 soc component */

 regmap */

 PCM3060_REG64 is volatile */

 device */

 soft reset */

 SPDX-License-Identifier: GPL-2.0



 MAX9867 ALSA SoC codec driver



 Copyright 2013-2015 Maxim Integrated Products

 Copyright 2018 Ladislav Michl <ladis@linux-mips.org>



 don't allow change if ADC/DAC active */

 read current filter mode */

 check if change is needed */

 shutdown codec before switching filter mode */

 switch filter mode */

 out of shutdown now */

 Input mixer */

 Output mixer */

 Sidetone mixer */

 Line out switch */

 DMIC mux */

 set up the ni value */

		/*

		 * digital pll locks on to any externally supplied LRCLK signal

		 * and also enable rapid lock mode.

 Set the prescaler based on the master clock frequency*/

 exact integer mode is not supported */

 Clock inversion bits, BCI and WCI */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rt1305.c  --  RT1305 ALSA SoC amplifier component driver

 *

 * Copyright 2018 Realtek Semiconductor Corp.

 * Author: Shuming Fan <shumingf@realtek.com>

 4 ohm 2W  */

 0.2 ohm RSense*/

 I2S Data Channel Selection */

 Audio Interface */

 Digital Interface */

 Output Lines */

 initial settings */

 Sin Gen */

 EFUSE read */

 R0 calibration */

 restore some registers */

 SPDX-License-Identifier: GPL-2.0-only



 Cirrus Logic Madera class codecs common support



 Copyright (C) 2015-2019 Cirrus Logic, Inc. and

                         Cirrus Logic International Semiconductor Ltd.



 Skip this if the chip is down */

	/*

	 * Just read a register a few times to ensure the internal

	 * oscillator sends out a few clocks.

 for safety attempt to shutdown on error */

 missing, ignore */

 trap undersized array initializers */

	/*

	 * We can't rely on the DAPM mutex for locking because we need a lock

	 * that can safely be called in hw_params

 EP_SEL should not be modified while HP or EP driver is enabled */

 wait for wseq to complete */

 change demux setting */

 apply correct setting for mono mode */

 stereo HP */

 EP or mono HP */

	/*

	 * if HPDET has disabled the clamp while switching to HPOUT

	 * OUT1 should remain disabled

 wait for enable wseq */

 wait for disable wseq */

	/*

	 * We don't directly write the rate register here but we want to

	 * maintain consistent behaviour that rate domains cannot be changed

	 * while in use since this is a hardware requirement

 Volatile register so defer until the codec is powered up */

 use legacy frequency registers */

 Configure exact dsp frequency */

	/*

	 * This is called at a higher DAPM priority than the mux widgets so

	 * the muxes are still off at this point and it's safe to change

	 * the rate domain control.

	 * Also called at a lower DAPM priority than the domain group widgets

	 * so locking the reads of adsp_rate_cache is not necessary as we know

	 * changes are locked out by the domain_group_ref reference count.

 The write must be guarded by a number of SYSCLK cycles */

	/*

	 * Prevent the domain powering up while we're checking whether it's

	 * safe to change rate domain

 The write must be guarded by a number of SYSCLK cycles */

	/*

	 * Initialize input modes from the A settings. For muxed inputs the

	 * B settings will be applied if the mux is changed

 Default is 0 so noop with defaults */

 None */

 Tone Generator 1 */

 Tone Generator 2 */

 Haptics */

 AEC */

 AEC2 */

 Noise mixer */

 Comfort noise */

 IN1L */

 AIF1RX1 */

 AIF2RX1 */

 AIF3RX1 */

 AIF4RX1 */

 SLIMRX1 */

 EQ1 */

 DRC1L */

 LHPF1 */

 DSP1.1 */

 DSP2.1 */

 DSP3.1 */

 DSP4.1 */

 DSP5.1 */

 DSP6.1 */

 DSP7.1 */

 ASRC1IN1L */

 ASRC2IN1L */

 ISRC1INT1 */

 ISRC1DEC1 */

 ISRC2DEC1 */

 ISRC2INT1 */

 ISRC3DEC1 */

 ISRC3INT1 */

 ISRC4INT1 */

 ISRC4DEC1 */

 DFC1 */

 DFC8 */

 Cannot change lp mode on an active input */

 Flip bottom bit for channel order */

 If this is the last input pending then allow VU */

 Disable volume updates if no inputs are enabled */

 Store the desired state for the HP outputs */

 if OUT1 is routed to EPOUT, ignore HP clamp and impedance */

 Force off if HPDET has disabled the clamp for this output */

 don't use MADERA_DSP_CLOCK_2 */

 Use new exact frequency control */

 freq * (2^6) / (10^6) */

		/*

		 * We're using the frequency setting in MADERA_DSP_CLOCK_2 so

		 * don't change the frequency select bits in MADERA_DSP_CLOCK_1

 Guard the rate change with SYSCLK cycles */

 Force multiple of 2 channels for I2S mode */

 Save AIF TX/RX state */

 Disable AIF TX/RX before reconfiguring it */

 Restore AIF TX/RX state */

	/*

	 * A connection to SYSCLK is always required, we only add and remove

	 * a connection to ASYNCCLK

 Only support TDM for the physical AIFs */

 main gain */

 alternate integer gain */

 rev A0 uses sync calculation for both loops */

 these use the same calculation for main and sync loops */

 fref must be <=13.5MHz, find initial refdiv */

 Find an appropriate FLL_FRATIO */

	/*

	 * For CS47L35 rev A0, CS47L85 and WM1840 adjust FRATIO/refdiv to avoid

	 * integer mode if possible

		/*

		 * start from init_ratio because this may already give a

		 * fractional N.K

 Find an appropriate FLL_FRATIO and refdiv */

 Apply the division for our remaining calculations */

	/*

	 * Round down to 16bit range with cost of accuracy lost.

	 * Denominator must be bigger than numerator so we only

	 * take care of it.

 Rev A0 uses the sync gains for both loops */

 These use the sync gains for both loops */

 error getting current state */

 Facilitate smooth refclk across the transition */

 Apply SYNCCLK setting */

 Apply REFCLK setting */

 Ref path hardcodes lambda to 65536 when sync is on */

	/*

	 * Increase the bandwidth if we're not using a low frequency

	 * sync source.

 In case of error don't leave the FLL running with an old config */

	/*

	 * fout is ignored, since the synchronizer is an optional extra

	 * constraint on the Fout generated from REFCLK, so the Fout is

	 * set when configuring REFCLK

	/*

	 * Changes of fout on an enabled FLL aren't allowed except when

	 * setting fout==0 to disable the FLL

 FLL_AO_HOLD must be set before configuring any registers */

 modify the patch to apply fll->ref_src as input clock */

 Release the hold so that fll_ao locks to external frequency */

	/*

	 * ctrl_up gates the writes to all fll_ao register, setting it to 0

	 * here ensures that after a runtime suspend/resume cycle when one

	 * enables the fllao then ctrl_up is the last bit that is configured

	 * by the fllao enable code rather than the cache sync operation which

	 * would have updated it much earlier before writing out all fllao

	 * registers

	/* Disable lockdet, but don't set ctrl_upd update but.  This allows the

	 * lock status bit to clear as normal, but should the FLL be enabled

	 * again due to a control clock being required, the lock won't re-assert

	 * as the FLL config registers are automatically applied when the FLL

	 * enables.

	/* ctrl_up gates the writes to all the fll's registers, setting it to 0

	 * here ensures that after a runtime suspend/resume cycle when one

	 * enables the fll then ctrl_up is the last bit that is configured

	 * by the fll enable code rather than the cache sync operation which

	 * would have updated it much earlier before writing out all fll

	 * registers

	/* Use simple heuristic approach to find a configuration that

	 * should work for most input clocks.

		/* For high speed input clocks, enable 300MHz fast oscillator

		 * when we're in fractional divider mode.

 Use high performance mode for fractional configurations. */

 Calculate N.K values */

 Some sanity checks before any registers are written. */

 clear the ctrl_upd bit to guarantee we write to it later. */

 FLLn_HOLD must be set before configuring any registers */

 Apply refclk */

 Release the hold so that flln locks to external frequency */

	/* To remain consistent with previous FLLs, we expect fout to be

	 * provided in the form of the required sysclk rate, which is

	 * 2x the calculated fll out.

/**

 * madera_set_output_mode - Set the mode of the specified output

 *

 * @component: Device to configure

 * @output: Output number

 * @differential: True to set the output to differential mode

 *

 * Some systems use external analogue switches to connect more

 * analogue devices to the CODEC than are supported by the device.  In

 * some systems this requires changing the switched output from single

 * ended to differential mode dynamically at runtime, an operation

 * supported using this function.

 *

 * Most systems have a single static configuration and should use

 * platform data instead.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) STMicroelectronics SA 2015

 * Authors: Arnaud Pouliquen <arnaud.pouliquen@st.com>

 *          for STMicroelectronics.

 DAC definitions */

 stih407 DAC registers */

 sysconf 5041: Audio-Gue-Control */

 sysconf 5042: Audio-DAC-Control */

 DAC definitions */

 SPDIF definitions */

 device data structure */

 DAC function callbacks */

 dapms declaration */

 dapms declaration */

 route declaration */

 route declaration */

 driver data structure */

 Read a register from the sysconf reg bank */

 Read a register from the sysconf reg bank */

	/*

	 * DAC and SPDIF are activated by default

	 * put them in IDLE to save power

 Initialise bi-phase formatter to disabled */

 Initialise bi-phase formatter idle value to 0 */

 Init DAC configuration */

 init configuration */

/*

 * DAC

 Sanity check only */

/*

 * SPDIF

/*

 * sti_sas_spdif_trigger:

 * Trigger function is used to ensure that BiPhase Formater is disabled

 * before CPU dai is stopped.

 * This is mandatory to avoid that BPF is stalled

/*

 * CODEC DAIS

/*

 * sti_sas_set_sysclk:

 * get MCLK input frequency to check that MCLK-FS ratio is coherent

 Allocate device structure */

 Populate data structure depending on compatibility */

 Initialise device structure */

 Request the DAC & SPDIF registers memory region */

 Request the syscon region */

 Set dapms*/

 Store context */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * MAX9768 AMP driver

 *

 * Copyright (C) 2011, 2012 by Wolfram Sang, Pengutronix e.K.

 "Registers" */

 Commands */

 Mute on powerup to avoid clicks */

 Activate chip by releasing shutdown, enables I2C */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8711.c  --  WM8711 ALSA SoC Audio driver

 *

 * Copyright 2006 Wolfson Microelectronics

 *

 * Author: Mike Arthur <Mike.Arthur@wolfsonmicro.com>

 *

 * Based on wm8731.c by Richard Purdie

 codec private data */

/*

 * wm8711 register cache

 * We can't read the WM8711 register space when we are

 * using 2 wire for device control, so we cache them instead.

 * There is no point in caching the reset register

 Output Mixer */

 output mixer */

 outputs */

 codec mclk clock divider coefficients */

 48k */

 32k */

 8k */

 96k */

 44.1k */

 88.2k */

 bit size */

 set active */

 deactivate */

 set master/slave audio interface */

 interface format */

 clock inversion */

 set iface */

 Latch the update bits */

 CONFIG_SPI_MASTER */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * SSM2602 SPI audio driver

 *

 * Copyright 2014 Analog Devices Inc.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * AD1936/AD1937 audio driver

 *

 * Copyright 2014 Analog Devices Inc.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * arizona.c - Wolfson Arizona class device shared support

 *

 * Copyright 2012 Wolfson Microelectronics plc

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 Default is 0 so noop with defaults */

 Default for both is 0 so noop with defaults */

 None */

 Tone */

 Haptics */

 AEC */

 AEC2 */

 Noise mixer */

 Comfort noise */

 IN1L */

 AIF1RX1 */

 AIF2RX1 */

 AIF3RX1 */

 SLIMRX1 */

 EQ1 */

 DRC1L */

 LHPF1 */

 DSP1.1 */

 DSP2.1 */

 DSP3.1 */

 DSP4.1 */

 ASRC1L */

 ISRC1INT1 */

 ISRC1DEC1 */

 ISRC2DEC1 */

 ISRC2INT1 */

 ISRC3DEC1 */

 ISRC3INT1 */

 If this is the last input pending then allow VU */

 Disable volume updates if no inputs are enabled */

 Store the desired state for the HP outputs */

 Force off if HPDET clamp is active */

		/* We must ensure DVFS is disabled before the codec goes into

		 * suspend so that we are never in an illegal state of DVFS

		 * enabled without enough DCVDD

	/*

	 * We will need to be more flexible than this in future,

	 * currently we use a single sample rate for SYSCLK.

 Force multiple of 2 channels for I2S mode */

 Save AIF TX/RX state */

 Disable AIF TX/RX before reconfiguring it */

 Restore AIF TX/RX state */

 Only support TDM for the physical AIFs */

 Find an appropriate FLL_FRATIO */

 Fref must be <=13.5MHz, find initial refdiv */

 Find an appropriate FLL_FRATIO */

 Adjust FRATIO/refdiv to avoid integer mode if possible */

		/* start from init_ratio because this may already give a

		 * fractional N.K

 Fvco should be over the targt; don't check the upper bound */

 Find an appropriate FLL_FRATIO and refdiv */

 Apply the division for our remaining calculations */

	/* Round down to 16bit range with cost of accuracy lost.

	 * Denominator must be bigger than numerator so we only

	 * take care of it.

 Facilitate smooth refclk across the transition */

	/*

	 * If we have both REFCLK and SYNCCLK then enable both,

	 * otherwise apply the SYNCCLK settings to REFCLK.

 Ref path hardcodes lambda to 65536 when sync is on */

	/*

	 * Increase the bandwidth if we're not using a low frequency

	 * sync source.

 Configure default refclk to 32kHz if we have one */

/**

 * arizona_set_output_mode - Set the mode of the specified output

 *

 * @component: Device to configure

 * @output: Output number

 * @diff: True to set the output to differential mode

 *

 * Some systems use external analogue switches to connect more

 * analogue devices to the CODEC than are supported by the device.  In

 * some systems this requires changing the switched output from single

 * ended to differential mode dynamically at runtime, an operation

 * supported using this function.

 *

 * Most systems have a single static configuration and should use

 * platform data instead.

 SPDX-License-Identifier: GPL-2.0



 JZ4740 CODEC driver



 Copyright (C) 2009-2010, Lars-Peter Clausen <lars@metafoo.de>

 The only way to clear the suspend flag is to reset the codec */

 SPDX-License-Identifier: GPL-2.0



 Ingenic JZ4760 CODEC driver



 Copyright (C) 2021, Christophe Branchereau <cbranchereau@gmail.com>

 Copyright (C) 2021, Paul Cercueil <paul@crapouillou.net>

 ICDC internal register access control register(RGADW) */

 ICDC internal register data output register (RGDATA)*/

 Internal register space, accessed through regmap */

 codec private data */

 Reset all interrupt flags. */

	/*

	 * SYSCLK output from the codec to the AIC is required to keep the

	 * DMA transfer going during playback when all audible outputs have

	 * been disabled.

 do nothing */

 clear GUP/GDO flag */

 unit: 0.01dB */

 Unconditional controls. */

 record gain control */

 unmute HP */

 wait for ramp-up complete (RUP) */

 clear RUP flag */

 mute HP */

 clear RDO flag */

 Unconditional routes. */

 Collect updates for later sending. */

 default Amp output to PCM */

 Disable stereo mic */

 Set mic 1 as default source for ADC */

 ADC/DAC: serial + i2s */

 The generated IRQ is a high level */

 12M oscillator */

 0: 16ohm/220uF, 1: 10kohm/1uF */

 default to NOMAD */

 disable automatic gain */

 Independent L/R DAC gain control */

 Send collected updates. */

 wait 6+ cycles */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * wm8580.c  --  WM8580 and WM8581 ALSA Soc Audio driver

 *

 * Copyright 2008-12 Wolfson Microelectronics PLC.

 *

 * Notes:

 *  The WM8580 is a multichannel codec with S/PDIF support, featuring six

 *  DAC channels and two ADC channels.

 *

 *  The WM8581 is a multichannel codec with S/PDIF support, featuring eight

 *  DAC channels and two ADC channels.

 *

 *  Currently only the primary audio interface is supported - S/PDIF and

 *  the secondary audio interfaces are not.

 WM8580 register space */

 PLLB4 (register 7h) */

 CLKSEL (register 8h) */

 AIF control 1 (registers 9h-bh) */

 AIF control 2 (registers ch-eh) */

 Powerdown Register 1 (register 32h) */

 Powerdown Register 2 (register 33h) */

/*

 * wm8580 register cache

 * We can't read the WM8580 register space when we

 * are using 2 wire for device control, so we cache them instead.

 codec private data */

 Clear the register cache VU so we write without VU set */

 Now write again with the volume update bit set */

 PLL divisors */

 The size in bits of the pll divide */

 PLL rate to output rate divisions */

	/* Scale the output frequency up; the PLL should run in the

	 * region of 90-100MHz.

	/* GCC isn't able to work out the ifs below for initialising/using

	 * pll_div so suppress warnings.

	/* Always disable the PLL - it is not safe to leave it running

	 * while reprogramming it.

 All done, turn it on */

/*

 * Set PCM DAI bit size and sample rate.

 bit size */

 Look up the SYSCLK ratio; accept only exact matches */

 Input */

 We really should validate PLL settings but not yet */

 Power up and get individual control of the DACs */

 Make VMID high impedance */

 Get the codec into a known state */

 power down chip */

 SPDX-License-Identifier: GPL-2.0



 mt6351.c  --  mt6351 ALSA SoC audio codec driver



 Copyright (c) 2018 MediaTek Inc.

 Author: KaiChieh Chuang <kaichieh.chuang@mediatek.com>

 MT6351_TOP_CLKSQ */

 MT6351_TOP_CKPDN_CON0 */

 MT6351_AUDDEC_ANA_CON0 */

 MT6351_AUDDEC_ANA_CON1 */

 MT6351_AUDDEC_ANA_CON3 */

 MT6351_AUDDEC_ANA_CON6 */

 MT6351_AUDDEC_ANA_CON9 */

 MT6351_AUDDEC_ANA_CON10 */

 MT6351_AFE_UL_DL_CON0 */

 MT6351_AFE_DL_SRC2_CON0_L */

 MT6351_AFE_UL_SRC_CON0_L */

 MT6351_AFE_TOP_CON0 */

 MT6351_AUDIO_TOP_CON0 */

 MT6351_AFE_SGEN_CFG0 */

 MT6351_AFE_NCP_CFG0 */

 MT6351_LDO_VUSB33_CON0 */

 MT6351_LDO_VA18_CON0 */

 MT6351_AUDENC_ANA_CON0 */

 MT6351_AUDENC_ANA_CON1 */

 MT6351_AUDENC_ANA_CON3 */

 MT6351_AUDENC_ANA_CON9 */

 MT6351_AUDENC_ANA_CON10 */

 Supply subseq */

 0dB */

 0dB */

 check valid range, and set value */

 Enable ZCD, for minimize pop noise */

 when adjust gain during HP buffer on */

 timeout, 1=5ms, 0=30ms */

 dl pga gain */

 ul pga gain */

 MUX */

 LOL MUX */

HP MUX */

 RCV MUX */

 DAC In MUX */

 AIF Out MUX */

 ADC L MUX */

 ADC R MUX */

 PGA L MUX */

 PGA R MUX */

 SET REG */

 CLR REG */

 SET REG */

 CLR REG */

 NCP: ck1 and ck2 clock frequecy adjust configure */

 sdm audio fifo clock power on */

 scrambler clock on enable */

 sdm power on */

 sdm fifo enable */

 set attenuation gain */

 already enabled, do nothing */

 from yoyo HQA script */

 save target gain to restore after hardware open complete */

 Set HPR/HPL gain as minimum (~ -40dB) */

 Set HS gain as minimum (~ -40dB) */

 De_OSC of HP */

 enable output STBENH */

 De_OSC of voice, enable output STBENH */

 Enable voice driver */

 Enable pre-charge buffer  */

 Apply digital DC compensation value to DAC */

 Enable HPR/HPL */

 Disable pre-charge buffer */

 Disable De_OSC of voice */

 Disable voice buffer */

 from yoyo HQ */

 Enable ZCD, for minimize pop noise */

 when adjust gain during HP buffer on */

 apply volume setting */

 still being used, don't close */

 Disable AUD_ZCD */

 Set HPR/HPL gain as -1dB, step by step */

 still being used, don't close */

 reset*/

 De_OSC of HP */

 apply volume setting */

 dcclk_div=11'b00100000011, dcclk_ref_ck_sel=2'b00 */

 dcclk_pdn=1'b0 */

 dcclk_gen_on=1'b1 */

 UL sample rate and mode configure */

 fixed 260k path for 8/16/32/48 */

 anc ul path src on */

 ANC clk pdn release */

 fixed 260k path for 8/16/32/48 */

 anc ul path src on */

 ANC clk pdn release */

 Audio ADC clock gen. mode: 00_divided by 2 (Normal) */

 ADC CLK from: 00_13MHz from CLKSQ (Default) */

 Audio L PGA precharge on */

 Audio L PGA mode: 1_DCC */

 Audio L PGA precharge off */

 Audio R PGA precharge on */

 Audio R PGA mode: 1_DCC */

 Audio R PGA precharge off */

 MIC Bias 0 LowPower: 0_Normal */

 MISBIAS0 = 1P9V */

 MISBIAS0 = 1P97 */

 MIC Bias 1 LowPower: 0_Normal */

 MISBIAS1 = 2P7V */

 MISBIAS1 = 1P7V */

 MIC Bias 2 LowPower: 0_Normal */

 MISBIAS2 = 1P9V */

 MISBIAS2 = 1P97 */

 DAPM Widgets */

 Digital Clock */

 Global Supply*/

 AIF Rx*/

 DL Supply */

 DAC */

 LOL */

 Headphone */

 Receiver */

 Outputs */

 SGEN */

 Uplinks */

 Uplinks MUX */

 main mic mic bias */

 ref mic mic bias */

 headset mic1/2 mic bias */

 UL input */

 Capture */

 DL Supply */

 DL Digital Supply */

 DL Path */

 Headphone Path */

 Receiver Path */

 Disable CLKSQ 26MHz */

 disable AUDGLB */

 Turn off AUDNCP_CLKDIV engine clock,Turn off AUD 26M */

 Disable HeadphoneL/HeadphoneR/voice short circuit protection */

 [5] = 1, disable LO buffer left short circuit protection */

 Reverse the PMIC clock*/

 Module information */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * wm9712.c  --  ALSA Soc WM9712 codec support

 *

 * Copyright 2006-12 Wolfson Microelectronics PLC.

 * Author: Liam Girdwood <lrg@slimlogic.co.uk>

/* We have to create a fake left and right HP mixers because

 * the codec only has a single control that is shared by both channels.

 * This makes it impossible to determine the audio path.

 Left Headphone Mixers */

 Right Headphone Mixers */

 Speaker Mixer */

 Phone Mixer */

 ALC headphone mux */

 out 3 mux */

 spk mux */

 Capture to Phone mux */

 Capture left select */

 Capture right select */

 Mic select */

 diff select */

 virtual mixer - mixes left & right channels for spk and mono */

 Left HP mixer */

 Right HP mixer */

 speaker mixer */

 Phone mixer */

 inputs */

 microphones */

 left capture selector */

 right capture selector */

 ALC Sidetone */

 ADC's */

 outputs */

 mono mixer */

 Out3 Mux */

 speaker Mux */

 disable everything including AC link */

 set alc mux to none */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm_adsp.c  --  Wolfson ADSP support

 *

 * Copyright 2012 Wolfson Microelectronics plc

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 Host buffer pointer */

 Version numbers */

 The buffer name */

 Base addr of first buffer area */

 Size of buf1 area in DSP words */

 Base addr of 2nd buffer area */

 Size of buf1+buf2 in DSP words */

 Base addr of buf3 area */

 Size of buf1+buf2+buf3 in DSP words */

 Point at which IRQ is asserted */

 bits 1-31 count IRQ assertions */

 acked IRQ count, bit 0 enables IRQ */

 word index of next write */

 word index of next read */

 error if any */

 word index of oldest surviving */

 how many blocks rewind was done */

 internal */

 min free space since stream start */

 total blocks written (64 bit) */

 total words written (64 bit) */

 0 means no event */

	/*

	 * Although it's not useful to read an acked control, we must satisfy

	 * user-side assumptions that all controls are readable and that a

	 * write of the same value should be filtered out (it's valid to send

	 * the same event number again to the firmware). We therefore return 0,

	 * meaning "no event" so valid event numbers will always be a change

 Truncate the subname from the start if it is too long */

 Wake the poll so it can see buffer is no longer attached */

	/*

	 * v0 host_buffer coefficients didn't have versioning, so if the

	 * control is one word, assume version 0.

 Only one buffer supported for version 0 */

 Fall back to legacy support */

 Trigger the IRQ at one fragment of data */

 Only sync read index if we haven't already read a valid index */

 Wake poll to report error */

		/*

		 * If we really have less than 1 fragment available tell the

		 * DSP to inform us once a whole fragment is available.

 Calculate read parameters */

 Read data from DSP */

 update read index to account for words read */

 update avail to account for words read */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for the PCM512x CODECs

 *

 * Author:	Mark Brown <broonie@kernel.org>

 *		Copyright 2014 Linaro Ltd

/*

 * We can't use the same notifier block for more than one supply and

 * there's no way I can see to get from a callback to the caller

 * except container_of().

 There are 256 raw register addresses */

 There are 256 raw register addresses */

	/*

	 * If the DAC is not actually overclocked, use the good old

	 * NCP target rate...

	/*

	 * ...but if the DAC is in fact overclocked, bump the NCP target

	 * rate to get the recommended dividers even when overclocking.

 No hole when the frame size is 32. */

		/* There is only one hole in the range of supported

		 * rates, but it moves with the frame size.

 Disable reporting of missing SCLK as an error */

 Switch PLL input to BCLK */

 64 MHz <= pll_rate <= 100 MHz, VREF mode */

 16 MHz <= sck_rate <=  25 MHz, VREF mode */

	/* select sck_rate as a multiple of bclk_rate but still with

	 * as many factors of 2 as possible, as that makes it easier

	 * to find a fast DAC rate

/* pll_rate = pllin_rate * R * J.D / P

 * 1 <= R <= 16

 * 1 <= J <= 63

 * 0 <= D <= 9999

 * 1 <= P <= 15

 * 64 MHz <= pll_rate <= 100 MHz

 * if D == 0

 *     1 MHz <= pllin_rate / P <= 20 MHz

 * else if D > 0

 *     6.667 MHz <= pllin_rate / P <= 20 MHz

 *     4 <= J <= 11

 *     R = 1

 10000 * J.D */

 pllin_rate / P (or here, den) cannot be greater than 20 MHz */

 Try the case with D = 0 */

 factor 'num' into J and R, such that R <= 16 and J <= 63 */

 no luck */

 Try to find an exact pll_rate using the D > 0 case */

 J == 12 is ok if D == 0 */

 Fall back to an approximate pll_rate */

 find smallest possible P */

 J == 12 is ok if D == 0 */

 no PLL to bypass, force SCK as DAC input */

 futile, quit early */

 run DAC no faster than 6144000 Hz */

 DAC divider would be too big */

 the actual rate */

 run DSP no faster than 50 MHz */

		/* the desired clock rate is "compatible" with the pll input

		 * clock, so use that clock as dac input instead of the pll

		 * output clock since the pll will introduce jitter and thus

		 * noise.

 run DAC no faster than 6144000 Hz */

 run NCP no faster than 2048000 Hz, but why? */

 Reset the device, verifying I/O in the process for I2C */

 Default to standby mode */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8974.c  --  WM8974 ALSA Soc Audio driver

 *

 * Copyright 2006-2009 Wolfson Microelectronics PLC.

 *

 * Author: Liam Girdwood <Liam.Girdwood@wolfsonmicro.com>

 adc */

 dac */

 DAC / ADC oversampling */

 Speaker Output Mixer */

 Mono Output Mixer */

 Boost mixer */

 Input PGA */

 Mono output mixer */

 Speaker output mixer */

 Outputs */

 Boost Mixer */

 Input PGA */

 Inputs */

/* The size in bits of the pll divide multiplied by 10

 There is a fixed divide by 4 in the output path */

 Check if we need to round */

 Move down to proper range now rounding is done */

 Clock CODEC directly from MCLK */

 Turn off PLL */

 Run CODEC from PLL instead of MCLK */

/*

 * Configure WM8974 clock dividers.

 The PLL performs best around 90MHz */

 set master/slave audio interface */

 interface format */

 clock inversion */

 bit size */

 filter coefficient */

 liam need to make this lower power with dapm */

 VMID 50k */

 Initial cap charge at VMID 5k */

 VMID 500k */

 Only 1 channel of data */

 Only 1 channel of data */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cs42l73.c  --  CS42L73 ALSA Soc Audio driver

 *

 * Copyright 2011 Cirrus Logic, Inc.

 *

 * Authors: Georgi Vlaev, Nucleus Systems Ltd, <joe@nucleusys.com>

 *	    Brian Austin, Cirrus Logic Inc, <brian.austin@cirrus.com>

 r06	- Power Ctl 1 */

 r07	- Power Ctl 2 */

 r08	- Power Ctl 3 */

 r09	- Charge Pump Freq */

 r0A	- Output Load MicBias Short Detect */

 r0B	- DMIC Master Clock Ctl */

 r0C	- Aux PCM Ctl */

 r0D	- Aux PCM Master Clock Ctl */

 r0E	- Audio PCM Ctl */

 r0F	- Audio PCM Master Clock Ctl */

 r10	- Voice PCM Ctl */

 r11	- Voice PCM Master Clock Ctl */

 r12	- Voice/Aux Sample Rate */

 r13	- Misc I/O Path Ctl */

 r14	- ADC Input Path Ctl */

 r15	- MICA Preamp, PGA Volume */

 r16	- MICB Preamp, PGA Volume */

 r17	- Input Path A Digital Volume */

 r18	- Input Path B Digital Volume */

 r19	- Playback Digital Ctl */

 r1A	- HP/LO Left Digital Volume */

 r1B	- HP/LO Right Digital Volume */

 r1C	- Speakerphone Digital Volume */

 r1D	- Ear/SPKLO Digital Volume */

 r1E	- HP Left Analog Volume */

 r1F	- HP Right Analog Volume */

 r20	- LO Left Analog Volume */

 r21	- LO Right Analog Volume */

 r22	- Stereo Input Path Advisory Volume */

 r23	- Aux PCM Input Advisory Volume */

 r24	- Audio PCM Input Advisory Volume */

 r25	- Voice PCM Input Advisory Volume */

 r26	- Limiter Attack Rate HP/LO */

 r27	- Limter Ctl, Release Rate HP/LO */

 r28	- Limter Threshold HP/LO */

 r29	- Limiter Attack Rate Speakerphone */

 r2A	- Limter Ctl, Release Rate Speakerphone */

 r2B	- Limter Threshold Speakerphone */

 r2C	- Limiter Attack Rate Ear/SPKLO */

 r2D	- Limter Ctl, Release Rate Ear/SPKLO */

 r2E	- Limter Threshold Ear/SPKLO */

 r2F	- ALC Enable, Attack Rate Left/Right */

 r30	- ALC Release Rate Left/Right */

 r31	- ALC Threshold Left/Right */

 r32	- Noise Gate Ctl Left/Right */

 r33	- ALC/NG Misc Ctl */

 r34	- Mixer Ctl */

 r35	- HP/LO Left Mixer Input Path Volume */

 r36	- HP/LO Right Mixer Input Path Volume */

 r37	- HP/LO Left Mixer Aux PCM Volume */

 r38	- HP/LO Right Mixer Aux PCM Volume */

 r39	- HP/LO Left Mixer Audio PCM Volume */

 r3A	- HP/LO Right Mixer Audio PCM Volume */

 r3B	- HP/LO Left Mixer Voice PCM Mono Volume */

 r3C	- HP/LO Right Mixer Voice PCM Mono Volume */

 r3D	- Aux PCM Left Mixer Input Path Volume */

 r3E	- Aux PCM Right Mixer Input Path Volume */

 r3F	- Aux PCM Left Mixer Volume */

 r40	- Aux PCM Left Mixer Volume */

 r41	- Aux PCM Left Mixer Audio PCM L Volume */

 r42	- Aux PCM Right Mixer Audio PCM R Volume */

 r43	- Aux PCM Left Mixer Voice PCM Volume */

 r44	- Aux PCM Right Mixer Voice PCM Volume */

 r45	- Audio PCM Left Input Path Volume */

 r46	- Audio PCM Right Input Path Volume */

 r47	- Audio PCM Left Mixer Aux PCM L Volume */

 r48	- Audio PCM Right Mixer Aux PCM R Volume */

 r49	- Audio PCM Left Mixer Volume */

 r4A	- Audio PCM Right Mixer Volume */

 r4B	- Audio PCM Left Mixer Voice PCM Volume */

 r4C	- Audio PCM Right Mixer Voice PCM Volume */

 r4D	- Voice PCM Left Input Path Volume */

 r4E	- Voice PCM Right Input Path Volume */

 r4F	- Voice PCM Left Mixer Aux PCM L Volume */

 r50	- Voice PCM Right Mixer Aux PCM R Volume */

 r51	- Voice PCM Left Mixer Audio PCM L Volume */

 r52	- Voice PCM Right Mixer Audio PCM R Volume */

 r53	- Voice PCM Left Mixer Voice PCM Volume */

 r54	- Voice PCM Right Mixer Voice PCM Volume */

 r55	- Mono Mixer Ctl */

 r56	- SPK Mono Mixer Input Path Volume */

 r57	- SPK Mono Mixer Aux PCM Mono/L/R Volume */

 r58	- SPK Mono Mixer Audio PCM Mono/L/R Volume */

 r59	- SPK Mono Mixer Voice PCM Mono Volume */

 r5A	- SPKLO Mono Mixer Input Path Mono Volume */

 r5B	- SPKLO Mono Mixer Aux Mono/L/R Volume */

 r5C	- SPKLO Mono Mixer Audio Mono/L/R Volume */

 r5D	- SPKLO Mono Mixer Voice Mono Volume */

 r5E	- Interrupt Mask 1 */

 r5F	- Interrupt Mask 2 */

	/*

	    NG Threshold depends on NG_BOOTSAB, which selects

	    between two threshold scales in decibels.

	    Set linear values for now ..

 150 ms delay between setting PDN and MCLKDIS */

 50 ms delay between setting PDN and MCLKDIS */

 30 ms delay between setting PDN and MCLKDIS */

 SPKLO EARSPK Paths */

 Loopback */

 Speakerphone Paths */

 Loopback */

 HP LineOUT Paths */

 Loopback */

 Capture Paths */

 Audio Capture */

 Auxillary Capture */

 Voice Capture */

 MCLK, Sample Rate, xMMCC[5:0] */

 5644800 */

 6000000 */

 6144000 */

 5644800 */

 6144000 */

 6000000 */

 6500000 */

 6400000 */

 6000000 */

 6500000 */

 6400000 */

 MCLKX -> MCLK */

 Clear PCM mode, clear PCM_BIT_ORDER bit for MSB->LSB */

 0 = Don't know */

 CS42L73 Master */

 MCLK -> srate */

 Use SCLK=64*Fs if internal MCLK >= 6.4MHz */

 CS42L73 Slave */

 Update ASRCs */

			mdelay(15); /* Min amount of time requred to power

				     * down.

 Set Charge Pump Frequency */

 MCLK1 as master clk */

 initialize codec */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * MAX98504 ALSA SoC Audio driver

 *

 * Copyright 2013 - 2014 Maxim Integrated Products

 * Copyright 2016 Samsung Electronics Co., Ltd.

 TODO: Add the PCM interface definitions */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2020 Bootlin SA

 * Author: Alexandre Belloni <alexandre.belloni@bootlin.com>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rt298.c  --  RT298 ALSA SoC audio codec driver

 *

 * Copyright 2015 Realtek Semiconductor Corp.

 * Author: Bard Liao <bardliao@realtek.com>

 power on HV,VERF */

 power LDO1 */

 If jack in NULL, disable HS jack */

 Digital Mixer */

 Analog Input Mixer */

 ADC0 source */

 HP-OUT source */

 SPK-OUT source */

 If MCLK doesn't exist, reset AD filter */

 Input Lines */

 DMIC */

 REC Mixer */

 ADCs */

 ADC Mux */

 Audio Interface */

 Output Side */

 DACs */

 Output Mux */

 Output Mixer */

 Output Pga */

 Output Lines */

 bit 14 0:48K 1:44.1K */

 bit 3:0 Number of Channel */

 bit 6:4 Bits per Sample */

 bit 15 Stream Type 0:PCM 1:Non-PCM */

 Clear IRQ */

 restore codec default */

 enable jack combo mode on supported devices */

 VREF Charging */

 Vref2 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cs43130.c  --  CS43130 ALSA Soc Audio driver

 *

 * Copyright 2017 Cirrus Logic, Inc.

 *

 * Authors: Li Xu <li.xu@cirrus.com>

 clk source has not changed */

 no DAI is currently using clk */

 no DAI is currently using clk */

 DoP bitwidth is always 24-bit */

 Calculate SCLK in master mode if unassigned */

 at this point, SCLK must be set */

 no DAI is currently using clk */

			/*

			 * DSD Power Down Sequence

			 * According to Design, 130ms is preferred.

			/*

			 * PCM Power Down Sequence

			 * According to Design, 130ms is preferred.

			/*

			 * Per datasheet, Sec. PCM Power-Up Sequence.

			 * According to Design, CS43130_DXD12 must be 0 to meet

			 * THDN and Dynamic Range spec.

 AC freq is counted in 5.94Hz step. */

 clk not in use */

 clk not in use */

 needed for regcache_sync */

 Crystal is unused. System clock is used for external MCLK */

 SPDX-License-Identifier: GPL-2.0

/*

 * MAX9759 Amplifier Driver

 *

 * Copyright (c) 2017 BayLibre, SAS.

 * Author: Neil Armstrong <narmstrong@baylibre.com>

 From 6dB to 24dB in steps of 6dB */

 G1, G2 */

 +6dB */

 +12dB */

 +18dB */

 +24dB */

 G1 */

 G2 */

 SPDX-License-Identifier: GPL-2.0

 TLV320ADCX140 Sound driver

 Copyright (C) 2020 Texas Instruments Incorporated - https:
 Digital Volume control. From -100 to 27 dB in 0.5 dB steps */

 ADC gain. From 0 to 42 dB in 1 dB steps */

 DRE Level. From -12 dB to -66 dB in 1 dB steps */

 DRE Max Gain. From 2 dB to 26 dB in 2 dB steps */

 AGC Level. From -6 dB to -36 dB in 2 dB steps */

 AGC Max Gain. From 3 dB to 42 dB in 3 dB steps */

 Analog/Digital Selection */

 Output Mixer */

 Analog Differential Inputs */

 Input Selection to MIC_PGA */

 Input Selection to MIC_PGA */

 Outputs */

 Mic input */

 8.4.1: wait for hw shutdown (25ms) + >= 1ms */

 8.4.2: wait >= 10 ms after entering sleep mode. */

 set master/slave audio interface */

 interface format */

 signal polarity */

 Configure data offset */

 TDM based on DSP mode requires slots to be adjacent */

 8.4.3: Wait >= 1ms after entering active mode. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2021 Stephan Gerhold

 *

 * Register definitions/sequences taken from various tfa98xx kernel drivers:

 * Copyright (C) 2014-2020 NXP Semiconductors, All Rights Reserved.

 * Copyright (C) 2013 Sony Mobile Communications Inc.

 device revision */

 receiver mode */

 amplifier input select */

 sample rate */

 power down */

 I2C reset */

 enable CoolFlux DSP */

 enable amplifier */

 enable boost */

 DSP configured */

 amplifier enabled by DSP */

 speaker impedance */

 DCDC compensation */

 "DSP" */ };

 some other registers must be set for optimal amplifier behaviour */

 peak voltage protection is always on, but may be written */

 TFA989X_SYSCTRL_DCA = 0 */

 Reduce slewrate by clearing iddqtestbst to avoid booster damage */

 Enable clipping */

 Set required TDM configuration */

/*

 * Note: At the moment this driver bypasses the "CoolFlux DSP" built into the

 * TFA989X amplifiers. Unfortunately, there seems to be absolutely

 * no documentation for it - the public "short datasheets" do not provide

 * any information about the DSP or available registers.

 *

 * Usually the TFA989X amplifiers are configured through proprietary userspace

 * libraries. There are also some (rather complex) kernel drivers but even those

 * rely on obscure firmware blobs for configuration (so-called "containers").

 * They seem to contain different "profiles" with tuned speaker settings, sample

 * rates and volume steps (which would be better exposed as separate ALSA mixers).

 *

 * Bypassing the DSP disables volume control (and perhaps some speaker

 * optimization?), but at least allows using the speaker without obscure

 * kernel drivers and firmware.

 *

 * Ideally NXP (or now Goodix) should release proper documentation for these

 * amplifiers so that support for the "CoolFlux DSP" can be implemented properly.

 Clear CHSA to bypass DSP and take input from I2S 1 left channel */

 Set DCDC compensation to off and speaker impedance to 8 ohm */

 Set DCDC to follower mode and disable CoolFlux DSP */

 Bypass regcache for reset and init sequence */

 Dummy read to generate i2c clocks, required on some devices */

 SPDX-License-Identifier: GPL-2.0



 rk3328 ALSA SoC Audio driver



 Copyright (c) 2017, Fuzhou Rockchip Electronics Co., Ltd All rights reserved.

/*

 * volume setting

 * 0: -39dB

 * 26: 0dB

 * 31: 6dB

 * Step: 1.5dB

 msec */

 Workaround for silence when changed Fs 48 -> 44.1kHz */

 enable i2s_acodec_en */

	/*

	 * Rock64 is the only supported platform to have widely relied on

	 * this; if we do happen to come across an old DTB, just leave the

	 * external mute forced off.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2019 Google, Inc.

 *

 * ChromeOS Embedded Controller codec driver.

 *

 * This driver uses the cros-ec interface to communicate with the ChromeOS

 * EC for audio function.

 common */

 DMIC */

 I2S_RX */

 WoV */

		/*

		 * Note: EC codec only requests for `r.len' but we allocate

		 * round up PAGE_SIZE `req'.

 Note: waste 1-byte to differentiate full and empty */

 make sure write to memory before calling host command */

 Skips the TLV header. */

 Reset EC codec i2s rx. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cs42l42.c -- CS42L42 ALSA SoC audio driver

 *

 * Copyright 2016 Cirrus Logic, Inc.

 *

 * Author: James Schulman <james.schulman@cirrus.com>

 * Author: Brian Austin <brian.austin@cirrus.com>

 * Author: Michael White <michael.white@cirrus.com>

 ADC Volume and Filter Controls */

 DAC Volume and Filter Controls */

 Only need one delay if HP and ADC are both powering-up */

 Playback Path */

 Playback Requirements */

 Capture Path */

 Capture Requirements */

 Playback/Capture Requirements */

 Playback Path */

 Playback Requirements */

 Capture Path */

 Capture Requirements */

 Switch to SCLK. Atomic delay after the write to allow the switch to complete. */

 Switch to OSC. Atomic delay after the write to allow the switch to complete. */

/*

 * Common PLL Settings for given SCLK

 * Table 4-5 from the Datasheet

 Don't reconfigure if there is an audio stream running */

 Configure the internal sample rate */

 Set up the LRCLK */

 Set the LRCLK period */

 Set the LRCLK to 50% duty cycle */

 Pass the clock straight through */

 Configure PLL per table 4-5 */

 Don't reconfigure if there is an audio stream running */

 SRC MCLK must be as close as possible to 125 * sample rate */

 Set the sample rates (96k or lower) */

 interface format */

		/*

		 * 5050 mode, frame starts on falling edge of LRCLK,

		 * frame delayed by 1.0 SCLKs

 Bitclock/frame inversion */

	/*

	 * Sample rates < 44.1 kHz would produce an out-of-range SCLK with

	 * a standard I2S frame. If the machine driver sets SCLK it must be

	 * legal.

 Machine driver has not set a SCLK, limit bottom end to 44.1 kHz */

 I2S frame always has 2 channels even for mono audio */

	/*

	 * Assume 24-bit samples are in 32-bit slots, to prevent SCLK being

	 * more than assumed (which would result in overclocking).

 channel 2 on high LRCLK */

 channel 1 on low LRCLK */

 Channel 2 on high LRCLK */

 Channel B comes from the last active channel */

 Both LRCLK slots must be enabled */

 Mute the headphone */

			/*

			 * Switch to the internal oscillator.

			 * SCLK must remain running until after this clock switch.

			 * Without a source of clock the I2C bus doesn't work.

 Must disconnect PLL before stopping it */

 SCLK must be running before codec unmute */

 PLL must be running to drive glitchless switch logic */

 Mark SCLK as present, turn off internal oscillator */

 Un-mute the headphone */

 Set hs detect to manual, active mode */

 Configure HS DET comparator reference levels. */

 Open the SW_HSB_HS3 switch and close SW_HSB_HS4 for a Type 1 headset. */

 Close the SW_HSB_HS3 switch for a Type 2 headset. */

 Use Comparator 1 with 1.25V Threshold. */

 Fallback to Comparator 2 with 1.75V Threshold. */

 Set Switches */

 Set HSDET mode to Manual—Disabled */

 Configure HS DET comparator reference levels. */

 Read and save the hs detection result */

 Mask the auto detect interrupt */

 Set hs detect to automatic, disabled mode */

	/* Run Manual detection if auto detect has not found a headset.

	 * We Re-Run with Manual Detection if the original detection was invalid or headphones,

	 * to ensure that a headset mic is detected in all cases.

 Set up button detection */

 Set auto HS bias settings to default */

 Set up hs detect level sensitivity */

 Set auto HS bias settings to default */

 Turn on level detect circuitry */

 Clear any button interrupts before unmasking them */

 Unmask button detect interrupts */

 Make sure button detect and HS bias circuits are off */

 Unmask tip sense interrupts */

 Mask tip sense interrupts */

 Make sure button detect and HS bias circuits are off */

 Set auto HS bias settings to default */

 Set hs detect to manual, disabled mode */

 Power up HS bias to 2.7V */

 Wait for HS bias to ramp up */

 Unmask auto detect interrupt */

 Set hs detect to automatic, enabled mode */

 Mask button detect interrupts */

 Ground HS bias */

 Set auto HS bias settings to default */

 Set hs detect to manual, disabled mode */

 Mask button detect interrupts */

 Test all 4 level detect biases */

 Adjust button detect level sensitivity */

 Function C button press */

 Function B button press */

 Function D button press */

 Function A button press */

 Set button detect level sensitivity back to default */

 Clear any button interrupts before unmasking them */

 Unmask button detect interrupts */

 Read sticky registers to clear interurpt */

 Read tip sense status before handling type detect */

 Read button sense status */

 Check auto-detect status */

 Check tip sense status */

 Check button detect status */

 Latch analog controls to VP power domain */

 Remove ground noise-suppression clamps */

 Enable the tip sense circuit */

 Save the initial status of the tip sense */

 Reset the Device */

 Request IRQ if one was specified */

 initialize codec */

 Power up the codec */

 Setup headset detection */

 Mask/Unmask Interrupts */

 Register codec for machine driver */

	/*

	 * The driver might not have control of reset and power supplies,

	 * so ensure that the chip internals are powered down.

 SPDX-License-Identifier: GPL-2.0-or-later



 File:         sound/soc/codecs/ssm2602.c

 Author:       Cliff Cai <Cliff.Cai@analog.com>



 Created:      Tue June 06 2008

 Description:  Driver for ssm2602 sound chip



 Modified:

               Copyright 2008 Analog Devices Inc.



 Bugs:         Enter bugs at http:
 codec private data */

/*

 * ssm2602 register cache

 * We can't read the ssm2602 register space when we are

 * using 2 wire for device control, so we cache them instead.

 * There is no point in caching the reset register

Appending several "None"s just for OSS mixer use*/

 Output Mixer */

 Input mux */

	/*

	 * According to the ssm2603 data sheet (control register sequencing),

	 * the digital core should be activated only after all necessary bits

	 * in the power register are enabled, and a delay determined by the

	 * decoupling capacitor on the VMID pin has passed. If the digital core

	 * is activated too early, or even before the ADC is powered up, audible

	 * artifacts appear at the beginning and end of the recorded signal.

	 *

	 * In practice, audible artifacts disappear well over 500 ms.

 Last element is the mic */

 codec mclk clock coefficients */

 48k */

 32k */

 16k */

 8k */

 96k */

 11.025k */

 22.05k */

 44.1k */

 88.2k */

 bit size */

 set master/slave audio interface */

 interface format */

 clock inversion */

 set iface */

 vref/mid on, osc and clkout on if enabled */

 everything off except vref/vmid, */

 everything off */

 set the update bits */

select Line in as default input*/

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm5102.c  --  WM5102 ALSA SoC Audio driver

 *

 * Copyright 2012 Wolfson Microelectronics plc

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 This may return -EPROBE_DEFER, so do this early on */

 SR2 fixed at 8kHz, SR3 fixed at 16kHz */

 Latch volume update bits */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * dmic.c  --  SoC audio for Generic Digital MICs

 *

 * Author: Liam Girdwood <lrg@slimlogic.co.uk>

 Delay after DMIC mode switch */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * wm8990.c  --  WM8990 ALSA Soc Audio driver

 *

 * Copyright 2008 Wolfson Microelectronics PLC.

 * Author: Liam Girdwood <lrg@slimlogic.co.uk>

 codec private data */

 now hit the volume update bits (always bit 8) */

 INMIXL */

 INMIXR */

 LOMIX */

 ROMIX */

 LOUT */

 ROUT */

 LOPGA */

 ROPGA */

/*

 * _DAPM_ Controls

 INMIX dB values */

 Left In PGA Connections */

 Right In PGA Connections */

 INMIXL */

 INMIXR */

 AINLMUX */

 DIFFINL */

 AINRMUX */

 LOMIX */

 ROMIX */

 LONMIX */

 LOPMIX */

 RONMIX */

 ROPMIX */

 OUT3MIX */

 OUT4MIX */

 SPKMIX */

 Input Side */

 Input Lines */

 DACs */

 Input PGAs */

 INMIXL */

 AINLMUX */

 INMIXR */

 AINRMUX */

 Output Side */

 DACs */

 LOMIX */

 LONMIX */

 LOPMIX */

 OUT3MIX */

 SPKMIX */

 OUT4MIX */

 ROPMIX */

 RONMIX */

 ROMIX */

 LOUT PGA */

 ROUT PGA */

 LOPGA */

 ROPGA */

 MICBIAS */

 Make DACs turn on when playing even if not mixed into any outputs */

 Make ADCs turn on when recording even if not mixed from any inputs */

 Input Side */

 LIN12 PGA */

 LIN34 PGA */

 INMIXL */

 AINLMUX */

 ADC */

 RIN12 PGA */

 RIN34 PGA */

 INMIXL */

 AINRMUX */

 ADC */

 LOMIX */

 ROMIX */

 SPKMIX */

 LONMIX */

 LOPMIX */

 OUT3MIX */

 OUT4MIX */

 RONMIX */

 ROPMIX */

 Out Mixer PGAs */

 Output Pins */

 PLL divisors */

/* The size in bits of the pll divide multiplied by 10

 Check if we need to round */

 Move down to proper range now rounding is done */

 Turn on PLL */

 sysclk comes from PLL */

 set up N , fractional mode and pre-divisor if necessary */

 Turn off PLL */

/*

 * Clock after PLL and dividers

/*

 * Set's ADC and Voice DAC format.

 set master/slave audio interface */

 interface format */

/*

 * Set PCM DAI bit size and sample rate.

 bit size */

 VMID=2*50k */

 Enable all output discharge bits */

 Enable POBCTRL, SOFT_ST, VMIDTOG and BUFDCOPEN */

 Delay to allow output caps to discharge */

 Disable VMIDTOG */

 disable all output discharge bits */

 Enable outputs */

 Enable VMID at 2x50k */

 Enable VREF */

 Enable BUFIOEN */

 Disable outputs */

 disable POBCTRL, SOFT_ST and BUFDCOPEN */

 Enable workaround for ADC clocking issue. */

 VMID=2*250k */

 Enable POBCTRL and SOFT_ST */

 Enable POBCTRL, SOFT_ST and BUFDCOPEN */

 mute DAC */

 Enable any disabled outputs */

 Disable VMID */

 Enable all output discharge bits */

 Disable VREF */

 disable POBCTRL, SOFT_ST and BUFDCOPEN */

/*

 * The WM8990 supports 2 different and mutually exclusive DAI

 * configurations.

 *

 * 1. ADC/DAC on Primary Interface

 * 2. ADC on Primary Interface/DAC on secondary

 ADC/DAC on primary */

/*

 * initialise the WM8990 driver

 * register the mixer and dsp interfaces with the kernel

 charge output caps */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Texas Instruments TLV320AIC26 low power audio CODEC

 * ALSA SoC CODEC driver

 *

 * Copyright (C) 2008 Secret Lab Technologies Ltd.

 AIC26 driver private data */

 Keyclick parameters */

/* ---------------------------------------------------------------------

 * Digital Audio Interface Operations

 select data word length */

	/**

	 * Configure PLL

	 * fsref = (mclk * PLLM) / 2048

	 * where PLLM = J.DDDD (DDDD register ranges from 0 to 9999, decimal)

 compute J portion of multiplier */

 compute fractional DDDD component of multiplier */

 Audio Control 3 (master mode, fsref rate) */

 Audio Control 1 (FSref divisor) */

/*

 * aic26_mute - Mute control to reduce noise when changing audio format

 MCLK needs to fall between 2MHz and 50 MHz */

 set master/slave audio interface */

 interface format */

/* ---------------------------------------------------------------------

 * Digital Audio Interface Definition

/* ---------------------------------------------------------------------

 * ALSA controls

 Output */

/* ---------------------------------------------------------------------

 * SPI device portion of driver: sysfs files for debugging

 Any write to the keyclick attribute will trigger the keyclick event */

/* ---------------------------------------------------------------------

 * SoC CODEC portion of driver: probe and release routines

 Reset the codec to power on defaults */

 Power up CODEC */

 Audio Control 3 (master mode, fsref rate) */

 set master mode */

 Register the sysfs files for debugging */

 Create SysFS files */

/* ---------------------------------------------------------------------

 * SPI device portion of driver: probe and release routines and SPI

 * 				 driver registration.

 Allocate driver data */

 Initialize the driver data */

 SPDX-License-Identifier: GPL-2.0



 rk817 ALSA SoC Audio driver



 Copyright (c) 2018, Fuzhou Rockchip Electronics Co., Ltd All rights reserved.

/*

 * This sets the codec up with the values defined in the default implementation including the APLL

 * from the Rockchip vendor kernel. I do not know if these values are universal despite differing

 * from the default values defined above and taken from the datasheet, or implementation specific.

 * I don't have another implementation to compare from the Rockchip sources. Hard-coding for now.

 * Additionally, I do not know according to the documentation the units accepted for the clock

 * values, so for the moment those are left unvalidated.

 Set resistor value and charge pump current for PLL. */

 Set the PLL feedback clock divide value (values not documented). */

 Set the PLL pre-divide value (values not documented). */

	/* Set the PLL VCO output clock divide and PLL divided ratio of PLL High Clk (values not

	 * documented).

/*

 * DDAC/DADC L/R volume setting

 * 0db~-95db, 0.375db/step, for example:

 * 0x00: 0dB

 * 0xff: -95dB

/*

 * PGA GAIN L/R volume setting

 * 27db~-18db, 3db/step, for example:

 * 0x0: -18dB

 * 0xf: 27dB

/* Since the speaker output and L headphone pin are internally the same, make audio path mutually

 * exclusive with a mux.

 capture/playback common */

 capture path common */

 capture path L */

 capture path R */

 playback path common */

 playback path speaker */

 playback path headphones */

 Mux for input/output path selection */

 Pins for Simple Card Bindings */

 capture path */

 left mic */

 right mic */

 playback path */

 speaker path */

 headphone path L */

 headphone path R */

 mux path for output selection */

	/* setting initial pll values so that we can continue to leverage simple-audio-card.

	 * The values aren't important since no parameters are used.

 SPDX-License-Identifier: GPL-2.0+ */

/*

 *  Cirrus Logic CS4341A ALSA SoC Codec Driver

 *  Author: Alexander Shiyan <shc_work@mail.ru>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ALSA SoC TLV320AIC23 codec driver

 *

 * Author:      Arun KS, <arunks@mistralsolutions.com>

 * Copyright:   (C) 2008 Mistral Solutions Pvt Ltd.,

 *

 * Based on sound/soc/codecs/wm8731.c by Richard Purdie

 *

 * Notes:

 *  The AIC23 is a driver for a low power stereo audio

 *  codec tlv320aic23

 *

 *  The machine layer should disable unsupported inputs/outputs by

 *  snd_soc_dapm_disable_pin(codec, "LHPOUT"), etc.

/*

 * AIC23 register cache

	/* linear conversion to userspace

	* 000	=	-6db

	* 001	=	-9db

	* 010	=	-12db

	* 011	=	-18db (Min)

	* 100	=	0db (Max)

 PGA Mixer controls for Line and Mic switch */

 Output Mixer */

 Outputs */

 Inputs */

 input mux */

 AIC23 driver data */

/*

 * Common Crystals used

 * 11.2896 Mhz /128 = *88.2k  /192 = 58.8k

 * 12.0000 Mhz /125 = *96k    /136 = 88.235K

 * 12.2880 Mhz /128 = *96k    /192 = 64k

 * 16.9344 Mhz /128 = 132.3k /192 = *88.2k

 * 18.4320 Mhz /128 = 144k   /192 = *96k

/*

 * Normal BOSR 0-256/2 = 128, 1-384/2 = 192

 * USB BOSR 0-250/2 = 125, 1-272/2 = 136

 Normal, bosr - 0*/

 Usb, bosr - 0*/

 Normal, bosr - 1*/

 Usb, bosr - 1*/

/*

 * Every divisor is a factor of 11*12

	/*

	 * rates given are +/- 1/32

 prefer to have a /2 */

 Search for the right sample rate */

 set active */

 deactivate */

 set master/slave audio interface */

 interface format */

 vref/mid, osc on, dac unmute */

 everything off except vref/vmid, */

 everything off, dac mute, inactive */

 Reset codec */

 Unmute input */

 Default output volume */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ALSA SoC SPDIF DIR (Digital Interface Reciever) driver

 *

 * Based on ALSA SoC SPDIF DIT driver

 *

 *  This driver is used by controllers which can operate in DIR (SPDI/F) where

 *  no codec is needed.  This file provides stub codec that can be used

 *  in these configurations. SPEAr SPDIF IN Audio controller uses this driver.

 *

 * Author:      Vipin Kumar,  <vipin.kumar@st.com>

 * Copyright:   (C) 2012  ST Microelectronics

 SPDX-License-Identifier: GPL-2.0-only



 rt711-sdw-sdca.c -- rt711 SDCA ALSA SoC audio driver



 Copyright(c) 2021 Realtek Semiconductor Corp.





 BRA */

 i2c debug */

 Update the status */

			/*

			 * Due to the SCP_SDCA_INTMASK will be cleared by any reset, and then

			 * if the device attached again, we will need to set the setting back.

			 * It could avoid losing the jack detection interrupt.

			 * This also could sync with the cache value as the rt711_sdca_jack_init set.

	/*

	 * Perform initialization only if slave status is present and

	 * hw_init flag is false

 perform I/O transfers required for Slave initialization */

 first we need to allocate memory for set bits in port lists */

 BITMAP: 00010100 */

 BITMAP:  00001000 */

 do this again for sink now */

 set the timeout values */

 wake-up event */

 avoid the HID owner doesn't change to device */

	/*

	 * The critical section below intentionally protects a rather large piece of code.

	 * We don't want to allow the system suspend to disable an interrupt while we are

	 * processing it, which could be problematic given the quirky SoundWire interrupt

	 * scheme. We do want however to prevent new workqueues from being scheduled if

	 * the disable_irq flag was set during system suspend.

 clear flag */

 check if flag clear or not */

 Regmap Initialization */

	/*

	 * prevent new interrupts from being handled after the

	 * deferred work completes and before the parent disables

	 * interrupts on the link

 log but don't prevent suspend from happening */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * NAU88L24 ALSA SoC audio driver

 *

 * Copyright 2016 Nuvoton Technology Corp.

 * Author: John Hsu <KCHSU0@nuvoton.com>

 the ADC threshold of headset */

 the ADC threshold of headset */

 the parameter threshold of FLL */

 scaling for mclk from sysclk_src output */

 ratio for input clk freq */

 the maximum frequency of CLK_ADC and CLK_DAC */

 over sampling rate */

 OSR 64, SRC 1/4 */

 OSR 256, SRC 1 */

 OSR 128, SRC 1/2 */

 OSR 32, SRC 1/8 */

 OSR 32, SRC 1/8 */

 OSR 64, SRC 1/4 */

 OSR 128, SRC 1/2 */

 OSR 256, SRC 1 */

 Disables the TESTDAC to let DAC signal pass through. */

 Prevent startup click by letting charge pump to ramp up */

		/* Set clock source to disable or internal clock before the

		 * playback or capture end. Codec needs clock for Jack

		 * detection and button press if jack inserted; otherwise,

		 * the clock should be closed.

		/* Check the clock source setting is proper or not

		 * no matter the source is from FLL or MCLK.

 It's error to use internal clock when playback */

 Check error depending on source is FLL or MCLK. */

 Recover the clock source setting if error. */

	/* The DMIC clock is gotten from system clock (256fs) divided by

	 * DMIC_SRC (1, 2, 4, 8, 16, 32). The clock has to be equal or

	 * less than 3.072 MHz.

	/* Reset the intrruption status from rightmost bit if the corres-

	 * ponding irq event occurs.

 Clear all interruption status */

	/* Enable the insertion interruption, disable the ejection

	 * interruption, and then bypass de-bounce circuit.

 Close clock for jack type detection at manual mode */

 Enable short key press and release interruption. */

 Enable jack ejection interruption. */

 Enable internal VCO needed for interruptions */

	/* The chip supports up to 8 buttons, but ALSA defines

	 * only 6 buttons.

		/* release semaphore held after resume,

		 * and cancel jack detection

 lower 8 bits of the register are for pressed keys */

 Turn off insertion interruption at manual mode */

 detect microphone and jack type */

		/* Enable interruption for jack type detection at audo

		 * mode which can detect microphone and jack type.

 clears the rightmost interruption */

	/* CLK_DAC or CLK_ADC = OSR * FS

	 * DAC or ADC clock frequency is defined as Over Sampling Rate (OSR)

	 * multiplied by the audio sample rate (Fs). Note that the OSR and Fs

	 * values must be selected such that the maximum frequency is less

	 * than 6.144 MHz.

 make BCLK and LRC divde configuration if the codec as master. */

 get the bclk and fs ratio */

/**

 * nau8824_set_tdm_slot - configure DAI TDM.

 * @dai: DAI

 * @tx_mask: Bitmask representing active TX slots. Ex.

 *                 0xf for normal 4 channel TDM.

 *                 0xf0 for shifted 4 channel TDM

 * @rx_mask: Bitmask [0:1] representing active DACR RX slots.

 *                 Bitmask [2:3] representing active DACL RX slots.

 *                 00=CH0,01=CH1,10=CH2,11=CH3. Ex.

 *                 0xf for DACL/R selecting TDM CH3.

 *                 0xf0 for DACL/R selecting shifted TDM CH3.

 * @slots: Number of slots in use.

 * @slot_width: Width in bits for each slot.

 *

 * Configures a DAI for TDM operation. Only support 4 slots TDM.

/**

 * nau8824_calc_fll_param - Calculate FLL parameters.

 * @fll_in: external clock provided to codec.

 * @fs: sampling rate.

 * @fll_param: Pointer to structure of FLL parameters.

 *

 * Calculate FLL parameters to configure codec.

 *

 * Returns 0 for success or negative error code.

	/* Ensure the reference clock frequency (FREF) is <= 13.5MHz by dividing

	 * freq_in by 1, 2, 4, or 8 using FLL pre-scalar.

	 * FREF = freq_in / NAU8824_FLL_REF_DIV_MASK

 Choose the FLL ratio based on FREF */

	/* Calculate the frequency of DCO (FDCO) given freq_out = 256 * Fs.

	 * FDCO must be within the 90MHz - 124MHz or the FFL cannot be

	 * guaranteed across the full range of operation.

	 * FDCO = freq_out * 2 * mclk_src_scaling

	/* Calculate the FLL 10-bit integer input and the FLL 16-bit fractional

	 * input based on FDCO, FREF and FLL ratio.

 FLL 16-bit fractional input */

 FLL 10-bit integer input */

 FLL pre-scaler */

 select divided VCO input */

 Disable free-running mode */

 freq_out must be 256*Fs in order to achieve the best performance */

 Clear all interruption status */

		/* Enable jack detection at sleep mode, insertion detection,

		 * and ejection detection.

 Setup codec configuration after resume */

		/* Hold semaphore to postpone playback happening

		 * until jack detection done.

/**

 * nau8824_enable_jack_detect - Specify a jack for event reporting

 *

 * @component:  component to register the jack with

 * @jack: jack to use to report headset and button events on

 *

 * After this function has been called the headset insert/remove and button

 * events will be routed to the given jack.  Jack can be null to stop

 * reporting.

 Initiate jack detection work queue */

 Enable Bias/VMID/VMID Tieoff */

 Disable Boost Driver, Automatic Short circuit protection enable */

 Scaling for ADC and DAC clock */

 Class G timer 64ms */

 Disable DACR/L power */

	/* Enable TESTDAC. This sets the analog DAC inputs to a '0' input

	 * signal to avoid any glitches due to power up transients in both

	 * the analog and digital DAC circuit.

 Config L/R channel */

	/* Default oversampling/decimations settings are unusable

	 * (audible hiss). Set it to something better.

 DAC clock delay 2ns, VREF */

 PGA input mode selection */

 Digital microphone control */

 jkdet_polarity - 1  is for active-low */

 Disable interruption before codec initiation done */

 Please keep this list alphabetically sorted */

 Cyberbook T116 rugged tablet */

 CUBE iwork8 Air */

 Pipo W2S */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8988.c -- WM8988 ALSA SoC audio driver

 *

 * Copyright 2009 Wolfson Microelectronics plc

 * Copyright 2005 Openedhand Ltd.

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

/*

 * wm8988 register cache

 * We can't read the WM8988 register space when we

 * are using 2 wire for device control, so we cache them instead.

 codec private data */

/*

 * WM8988 Controls

/*

 * DAPM Controls

 Use the DAC to gate LRC if active, otherwise use ADC */

 Left Mixer */

 Right Mixer */

 Left PGA Mux */

 Right PGA Mux */

 Differential Mux */

 Mono ADC Mux */

 codec hifi mclk clock divider coefficients */

 8k */

 11.025k */

 16k */

 22.05k */

 32k */

 44.1k */

 48k */

 88.2k */

 96k */

 The set of rates we can generate from the above for each SYSCLK */

/*

 * Note that this should be called from init rather than from hw_params.

 set master/slave audio interface */

 interface format */

 clock inversion */

	/* The set of sample rates that can be supported depends on the

	 * MCLK supplied to the CODEC - enforce this.

 bit size */

 set iface & srate */

 VREF, VMID=2x50k, digital enabled */

 VREF, VMID=2x5k */

 Charge caps */

 VREF, VMID=2*500k, digital stopped */

 set the update bits (we always update left then right) */

 CONFIG_SPI_MASTER */

 SPDX-License-Identifier: GPL-2.0



 cs35l41-spi.c -- CS35l41 SPI driver



 Copyright 2017-2021 Cirrus Logic, Inc.



 Author: David Rhodes	<david.rhodes@cirrus.com>

 Cirrus Logic PnP ID + part ID */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rt5663.c  --  RT5663 ALSA SoC audio codec driver

 *

 * Copyright 2016 Realtek Semiconductor Corp.

 * Author: Jack Yu <jack.yu@realtek.com>

 {0, +20, +24, +30, +35, +40, +44, +50, +52} dB */

 Interface data select */

 reset in-line command */

 reset in-line command */

/**

 * rt5663_v2_jack_detect - Detect headset.

 * @component: SoC audio component device.

 * @jack_insert: Jack insert or not.

 *

 * Detect whether is headset or not when jack inserted.

 *

 * Returns detect status.

/**

 * rt5663_jack_detect - Detect headset.

 * @component: SoC audio component device.

 * @jack_insert: Jack insert or not.

 *

 * Detect whether is headset or not when jack inserted.

 *

 * Returns detect status.

 BST1 power on for JD */

 JD1 */

 jack in */

 jack was out, report jack type */

 Delay the jack insert report to avoid pop noise */

 jack is already in, report button event */

			/**

			 * rt5663 can report three kinds of button behavior,

			 * one click, double click and hold. However,

			 * currently we will report button pressed/released

			 * event. So all the three button behaviors are

			 * treated as button pressed.

 unpressed */

 button release or spurious interrput*/

 jack out */

 jack out */

 DAC Digital Volume */

 ADC Digital Volume Control */

 Headphone Output Volume */

 Mic Boost Volume */

 Mic Boost Volume*/

 Data Swap for Slot0/1 in ADCDAT1 */

 Headphone Output Volume */

/**

 * rt5663_sel_asrc_clk_src - select ASRC clock source for a set of filters

 * @component: SoC audio component device.

 * @filter_mask: mask of filters.

 * @clk_src: clock source

 *

 * The ASRC function is for asynchronous MCLK and LRCK. Also, since RT5663 can

 * only support standard 32fs or 64fs i2s format, ASRC should be enabled to

 * support special i2s clock format such as Intel's 100fs(100 * sampling rate).

 * ASRC function will track i2s clock and generate a corresponding system clock

 * for codec. This function provides an API to select the clock source for a

 * set of filters specified by the mask. And the codec driver will turn on ASRC

 * for these filters if ASRC is selected as their clock source.

 Analog Mixer */

 Digital Mixer */

 Out Switch */

 Stereo ADC source */

 RT5663: Analog DACL1 input source */

 RT5663: Analog DACR1 input source */

 micbias */

 Input Lines */

 REC Mixer Power */

 ADCs */

 ADC Mixer */

 ADC Filter Power */

 Digital Interface */

 Audio Interface */

 DAC mixer before sound effect  */

 DAC Mixer */

 DACs */

 Headphone*/

 Output Lines */

 ASRC */

 Input Lines */

 Boost */

 REC Mixer */

 ADC */

 ADC Mux */

 ADC Mix */

 Analog DAC Clock */

 Headphone out */

 System Clock Pre Divider Gating */

 LDO */

 ASRC */

 Boost */

 STO ADC */

 Analog DAC source */

 PLL */

 ASRC */

 Set load for regulator. */

 reset and calibrate */

 GPIO1 as IRQ */

 4btn inline command debounce */

 JD1 */

 Set GPIO4 and GPIO8 as input for combo jack */

	/*

	 * Error after enabling regulators should goto err_enable

	 * to disable regulators.

 SPDX-License-Identifier: GPL-2.0+



 tfa9879.c  --  driver for NXP Semiconductors TFA9879



 Copyright (C) 2014 Axentia Technologies AB

 Author: Peter Rosin <peda@axentia.se>

 0x00 */

 0x01 */

 0x02 */

 0x03 */

 0x04 */

 0x05 */

 0x06 */

 0x07 */

 0x08 */

 0x09 */

 0x0a */

 0x0b */

 0x0c */

 0x0d */

 0x0e */

 0x0f */

 0x10 */

 0x11 */

 0x12 */

 0x13 */

 0x14 */

 Ensure the device is in reset state */

 SPDX-License-Identifier: GPL-2.0



 rt1016.c  --  RT1016 ALSA SoC audio amplifier driver



 Copyright 2020 Realtek Semiconductor Corp.

 Author: Oder Chiou <oder_chiou@realtek.com>



 Interface data select */

 SPDX-License-Identifier: GPL-2.0

 8000 to 192000 supported , only 176400 not support */

 11bit [min,max,step] = [-103.9375dB, 24dB, 0.0625dB] */

 {6, 8, 10, 12, 13, 14, 15, 16}dB */

 SPKL */

 SPKR */

 Cap */

 Internal setting */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ad73311.c  --  ALSA Soc AD73311 codec support

 *

 * Copyright:	Analog Devices Inc.

 * Author:	Cliff Cai <cliff.cai@analog.com>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8510.c  --  WM8510 ALSA Soc Audio driver

 *

 * Copyright 2006 Wolfson Microelectronics PLC.

 *

 * Author: Liam Girdwood <lrg@slimlogic.co.uk>

/*

 * wm8510 register cache

 * We can't read the WM8510 register space when we are

 * using 2 wire for device control, so we cache them instead.

 codec private data */

 adc */

 dac */

 Speaker Output Mixer */

 Mono Output Mixer */

 Mono output mixer */

 Speaker output mixer */

 Outputs */

 Microphone PGA */

 Boost Mixer */

 prescale - 1 */

/* The size in bits of the pll divide multiplied by 10

 Check if we need to round */

 Move down to proper range now rounding is done */

 Clock CODEC directly from MCLK */

 Turn off PLL */

 Run CODEC from PLL instead of MCLK */

/*

 * Configure WM8510 clock dividers.

 set master/slave audio interface */

 interface format */

 clock inversion */

 bit size */

 filter coefficient */

 liam need to make this lower power with dapm */

 VMID 50k */

 Initial cap charge at VMID 5k */

 VMID 500k */

 CONFIG_SPI_MASTER */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm_hubs.c  --  WM8993/4 common code

 *

 * Copyright 2009-12 Wolfson Microelectronics plc

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 Trigger the command */

 If we're going via the mixer we'll need to do additional checks */

	/* Different chips in the family support different readback

	 * methods.

/*

 * Startup calibration of the DC servo

	/* If we're using a digital only path and have a previously

 Set for 32 series updates */

 Apply correction to DC servo result */

 HPOUT1R */

 HPOUT1L */

 Do it */

	/* Save the callibrated offset if we're in class W mode and

/*

 * Update the DC servo calibration on gain changes

	/* If we're applying an offset correction then updating the

 Only need to do this if the outputs are active */

 Enable the headphone amp */

 Enable the second stage */

 Latch volume update bits & default ZC on */

 Enable the line outputs while we power up */

 Clamp the inputs to VMID while we ramp to charge caps */

 Turn off any unneeded single ended outputs */

 Remove the input clamps */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PCM3168A codec i2c driver

 *

 * Copyright (C) 2015 Imagination Technologies Ltd.

 *

 * Author: Damien Horsley <Damien.Horsley@imgtec.com>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * max98095.c -- MAX98095 ALSA SoC Audio driver

 *

 * Copyright 2011 Maxim Integrated Products

 0F */

 10 */

 11 */

 12 */

 13 */

 14 */

 15 */

 16 */

 17 */

 18 */

 19 */

 1A */

 1B */

 1C */

 1D */

 1E */

 1F */

 20 */

 21 */

 22 */

 23 */

 24 */

 25 */

 26 */

 27 */

 28 */

 29 */

 2A */

 2B */

 2C */

 2D */

 2E */

 2F */

 30 */

 31 */

 32 */

 33 */

 34 */

 35 */

 36 */

 37 */

 38 */

 39 */

 3A */

 3B */

 3C */

 3D */

 3E */

 3F */

 40 */

 41 */

 42 */

 43 */

 44 */

 45 */

 46 */

 47 */

 48 */

 49 */

 4A */

 4B */

 4C */

 4D */

 4E */

 4F */

 50 */

 51 */

 52 */

 53 */

 54 */

 55 */

 56 */

 57 */

 58 */

 59 */

 5A */

 5B */

 5C */

 5D */

 5E */

 5F */

 60 */

 61 */

 62 */

 63 */

 64 */

 65 */

 66 */

 67 */

 68 */

 69 */

 6A */

 6B */

 6C */

 6D */

 6E */

 6F */

 70 */

 71 */

 72 */

 73 */

 74 */

 75 */

 76 */

 77 */

 78 */

 79 */

 7A */

 7B */

 7C */

 7D */

 7E */

 7F */

 80 */

 81 */

 82 */

 83 */

 84 */

 85 */

 86 */

 87 */

 88 */

 89 */

 8A */

 8B */

 8C */

 8D */

 8E */

 8F */

 90 */

 91 */

 92 */

 93 */

 94 */

 95 */

 96 */

 97 */

 FF */

/*

 * Load equalizer DSP coefficient configurations registers

 Load the base register address */

 Add the band address offset, note adjustment for word address */

 Step through the registers and coefs */

/*

 * Load biquad filter coefficient configurations registers

 Load the base register address */

 Add the band address offset, note adjustment for word address */

 Step through the registers and coefs */

 Left speaker mixer switch */

 Right speaker mixer switch */

 Left headphone mixer switch */

 Right headphone mixer switch */

 Receiver earpiece mixer switch */

 Left lineout mixer switch */

 Right lineout mixer switch */

 Left ADC mixer switch */

 Right ADC mixer switch */

/*

 * The line inputs are stereo inputs with the left and right

 * channels sharing a common PGA power control signal.

/*

 * The stereo line out mixer outputs to two stereo line outs.

 * The 2nd pair has a separate set of enables.

 Left headphone output mixer */

 Right headphone output mixer */

 Left speaker output mixer */

 Right speaker output mixer */

 Earpiece/Receiver output mixer */

 Left Lineout output mixer */

 Right lineout output mixer */

 Left ADC input mixer */

 Right ADC input mixer */

 Inputs */

 codec mclk clock divider coefficients */

 Configure NI when operating as master */

 Update sample rate mode */

 Configure NI when operating as master */

 Update sample rate mode */

 Configure NI when operating as master */

 Update sample rate mode */

 Requested clock frequency is already setup */

	/* Setup clocks for slave mode, and using the PLL

	 * PSCLK = 0x01 (when master clk is 10MHz to 20MHz)

	 *         0x02 (when master clk is 20MHz to 40MHz)..

	 *         0x03 (when master clk is 40MHz to 60MHz)..

 Slave mode PLL */

 Set to master mode */

 Slave mode PLL */

 Set to master mode */

 Slave mode PLL */

 Set to master mode */

		/*

		 * SND_SOC_BIAS_PREPARE is called while preparing for a

		 * transition to ON or away from ON. If current bias_level

		 * is SND_SOC_BIAS_ON, then it is preparing for a transition

		 * away from ON. Disable the clock in that case, otherwise

		 * enable it.

 Find the selected configuration with nearest sample rate */

 Disable filter while configuring, and save current on/off state */

 Restore the original on/off state */

	/* Setup an array of texts for the equalizer enum.

	 * This is based on Mark Brown's equalizer driver code.

 Expand the array */

 Store the new entry */

 Now point the soc_enum to .texts array items */

 Find the selected configuration with nearest sample rate */

 Disable filter while configuring, and save current on/off state */

 Restore the original on/off state */

	/* Setup an array of texts for the biquad enum.

	 * This is based on Mark Brown's equalizer driver code.

 Expand the array */

 Store the new entry */

 Now point the soc_enum to .texts array items */

 Configure mic for analog/digital mic mode */

 Configure equalizers */

 Configure bi-quad filters */

 Read the Jack Status Register */

 If ddone is not set, then detection isn't finished yet */

 if hp, check its bit, and if set, clear it */

 if mic, check its bit, and if set, clear it */

 configure auto detection to be enabled */

 configure auto detection to be disabled */

 only progress if we have at least 1 jack pointer */

 enable interrupts for headphone jack detection */

	/* Gracefully reset the DSP core and the codec hardware

	/* Reset to hardware default for registers, as there is not

 reset the codec, the DSP core, and disable all interrupts */

 initialize private data */

 register an audio interrupt */

 take the codec out of the shut down */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8523.c  --  WM8523 ALSA SoC Audio driver

 *

 * Copyright 2009 Wolfson Microelectronics plc

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 codec private data */

 R2 - PSCTRL1 */

 R3 - AIF_CTRL1 */

 R4 - AIF_CTRL2 */

 R5 - DAC_CTRL3 */

 R6 - DAC_GAINL */

 R7 - DAC_GAINR */

 R8 - ZERO_DETECT */

	/* The set of sample rates that can be supported depends on the

	 * MCLK supplied to the CODEC - enforce this.

 Find a supported LRCLK ratio */

 Should never happen, should be handled by constraints */

 Find a fs->bclk ratio */

		/* Check that it's a standard rate since core can't

		 * cope with others and having the odd rates confuses

		 * constraint matching.

 Need at least one supported rate... */

 Full power on */

 Sync back default/cached values */

 Initial power up */

 Power up to mute */

 The chip runs through the power down sequence for us. */

 Mono modes not yet supported */

 Change some default settings - latch VU and enable ZC */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * tas2552.c - ALSA SoC Texas Instruments TAS2552 Mono Audio Amplifier

 *

 * Copyright (C) 2014 Texas Instruments Incorporated -  https://www.ti.com

 *

 * Author: Dan Murphy <dmurphy@ti.com>

 vbat voltage */

 I/O Voltage */

 Analog DAC Voltage */

 Input mux controls */

 MUX Controls */

 By pass the PLL configuration */

		/* Fill in the PLL control registers for J & D

		 * pll_clk = (.5 * pll_clkin * J.D) / 2^p

		 * Need to fill in J and D here based on incoming freq

 Will clear the PLL_BYPASS bit */

 Restore PLL status */

 TDM slot selection only valid in DSP_A/_B mode */

 Configure data delay */

 out of range PLL_CLKIN, fall back to use BCLK */

 bit 4:5 in the register */

 bit 0:1 in the register */

 TDM based on DSP mode requires slots to be adjacent */

 DOUT in high-impedance on inactive bit clocks */

 Formats supported by TAS2552 driver. */

 TAS2552 dai structure. */

/*

 * DAC digital volumes. From -7 to 24 dB in 1 dB steps

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Load Analog Devices SigmaStudio firmware files

 *

 * Copyright 2009-2014 Analog Devices Inc.

 safeload loads up to 20 bytes in a atomic operation */

 Normal ASCII characters are valid */

 Make sure there are no non-displayable characaters in the string */

	/*

	 * Readbacks doesn't work with non-volatile controls, since the

	 * firmware updates the control value without driver interaction. Mark

	 * the readbacks to ensure that the values are not cached.

 We only allow one samplerates block per file */

	/*

	 * Make sure that there is at least one chunk to avoid integer

	 * underflows later on. Empty firmware is still valid though.

		/*

		 * This can not overflow since if length is larger than the

		 * maximum firmware size (0x4000000) we'll error out earilier.

/*

 * Returns a negative error value in case of an error, 0 if processing of

 * the firmware should be stopped after this action, 1 otherwise.

 first load the blob */

 then verify the header */

	/*

	 * Reject too small or unreasonable large files. The upper limit has been

	 * chosen a bit arbitrarily, but it should be enough for all practical

	 * purposes and having the limit makes it easier to avoid integer

	 * overflows later in the loading process.

/**

 * devm_sigmadsp_init() - Initialize SigmaDSP instance

 * @dev: The parent device

 * @ops: The sigmadsp_ops to use for this instance

 * @firmware_name: Name of the firmware file to load

 *

 * Allocates a SigmaDSP instance and loads the specified firmware file.

 *

 * Returns a pointer to a struct sigmadsp on success, or a PTR_ERR() on error.

 All samplerates are supported */

/**

 * sigmadsp_attach() - Attach a sigmadsp instance to a ASoC component

 * @sigmadsp: The sigmadsp instance to attach

 * @component: The component to attach to

 *

 * Typically called in the components probe callback.

 *

 * Note, once this function has been called the firmware must not be released

 * until after the ALSA snd_card that the component belongs to has been

 * disconnected, even if sigmadsp_attach() returns an error.

/**

 * sigmadsp_setup() - Setup the DSP for the specified samplerate

 * @sigmadsp: The sigmadsp instance to configure

 * @samplerate: The samplerate the DSP should be configured for

 *

 * Loads the appropriate firmware program and parameter memory (if not already

 * loaded) and enables the controls for the specified samplerate. Any control

 * parameter changes that have been made previously will be restored.

 *

 * Returns 0 on success, a negative error code otherwise.

/**

 * sigmadsp_reset() - Notify the sigmadsp instance that the DSP has been reset

 * @sigmadsp: The sigmadsp instance to reset

 *

 * Should be called whenever the DSP has been reset and parameter and program

 * memory need to be re-loaded.

/**

 * sigmadsp_restrict_params() - Applies DSP firmware specific constraints

 * @sigmadsp: The sigmadsp instance

 * @substream: The substream to restrict

 *

 * Applies samplerate constraints that may be required by the firmware Should

 * typically be called from the CODEC/component drivers startup callback.

 *

 * Returns 0 on success, a negative error code otherwise.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ALSA SoC TLV320AIC23 codec driver SPI interface

 *

 * Author:      Arun KS, <arunks@mistralsolutions.com>

 * Copyright:   (C) 2008 Mistral Solutions Pvt Ltd.,

 *

 * Based on sound/soc/codecs/wm8731.c by Richard Purdie

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rt5659.c  --  RT5659/RT5658 ALSA SoC audio codec driver

 *

 * Copyright 2015 Realtek Semiconductor Corp.

 * Author: Bard Liao <bardliao@realtek.com>

 Interface data select */

 MICBIAS1 and Mic Det Power for button detect*/

 MICBIAS1 and Mic Det Power for button detect*/

/**

 * rt5659_headset_detect - Detect headset.

 * @component: SoC audio component device.

 * @jack_insert: Jack insert or not.

 *

 * Detect whether is headset or not when jack inserted.

 *

 * Returns detect status.

 jack in */

 jack was out, report jack type */

 jack is already in, report button event */

			/**

			 * rt5659 can report three kinds of button behavior,

			 * one click, double click and hold. However,

			 * currently we will report button pressed/released

			 * event. So all the three button behaviors are

			 * treated as button pressed.

 unpressed */

 button release or spurious interrput*/

 jack out */

 headphone jack */

 mic jack */

 Speaker Output Volume */

 Headphone Output Volume */

 Mono Output Volume */

 Output Volume */

 DAC Digital Volume */

 IN1/IN2/IN3/IN4 Volume */

 INL/INR Volume Control */

 ADC Digital Volume Control */

 ADC Boost Volume Control */

/**

 * set_dmic_clk - Set parameter of dmic.

 *

 * @w: DAPM widget.

 * @kcontrol: The kcontrol of this widget.

 * @event: Event id.

 *

 * Choose dmic clock between 1MHz and 3MHz.

 * It is better for clock to approximate 3MHz.

 Depop */

 I2S_Pre_Div1 should be 1 in asrc mode */

 Digital Mixer */

 Analog Input Mixer */

DAC L2, DAC R2*/

MX-1B [6:4], MX-1B [2:0]*/

 STO1 ADC1 Source */

 MX-26 [13] */

 STO1 ADC Source */

 MX-26 [12] */

 STO1 ADC2 Source */

 MX-26 [11] */

 STO1 DMIC Source */

 MX-26 [8] */

 MONO ADC L2 Source */

 MX-27 [12] */

 MONO ADC L1 Source */

 MX-27 [11] */

 MONO ADC L Source, MONO ADC R Source*/

 MX-27 [10:9], MX-27 [2:1] */

 MONO DMIC L Source */

 MX-27 [8] */

 MONO ADC R2 Source */

 MX-27 [4] */

 MONO ADC R1 Source */

 MX-27 [3] */

 MONO DMIC R Source */

 MX-27 [0] */

 DAC R1 Source, DAC L1 Source*/

 MX-29 [11:10], MX-29 [9:8]*/

 DAC Digital Mixer L Source, DAC Digital Mixer R Source*/

 MX-2C [6], MX-2C [4]*/

 Analog DAC L1 Source, Analog DAC R1 Source*/

 MX-2D [3], MX-2D [2]*/

 Analog DAC LR Source, Analog DAC R2 Source*/

 MX-2D [1], MX-2D [0]*/

 Interface2 ADC Data Input*/

 MX-2F [13:12] */

 Interface3 ADC Data Input*/

 MX-2F [1:0] */

 PDM 1 L/R*/

 MX-31 [15] [13] */

 SPDIF Output source*/

 MX-36 [1:0] */

 I2S1 TDM ADCDAT Source */

 MX-78[4:0] */

 Out Volume Switch */

 Out Switch */

Add delay to avoid pop noise*/

 ASRC */

 Input Side */

 Input Lines */

 Boost */

 Input Volume */

 REC Mixer */

 ADCs */

 ADC Mux */

 ADC Mixer */

 ADC PGA */

 Digital Interface */

 Digital Interface Select */

 Audio Interface */

 Output Side */

 DAC mixer before sound effect  */

 DAC channel Mux */

 DAC Mixer */

 DACs */

 OUT Mixer */

 Output Volume */

 SPO/MONO/HPO/LOUT */

 PDM */

 SPDIF */

 Output Lines */

PLL*/

ASRC*/

 Calibrate HPO Start */

 Fine tune HP Performance */

 Enalbe K ADC Power And Clock */

 K Headphone */

 Manual K ADC Offset */

 Manual K Internal Path Offset */

 Calibrate HPO End */

 Calibrate SPO Start */

 Enalbe K ADC Power And Clock */

 Start Calibration */

 Calibrate SPO End */

 Calibrate MONO Start */

 MONO NG2 GAIN 5dB */

 Start Calibration */

 Calibrate MONO End */

 Power Off */

 Sleep for 300 ms miniumum */

 Check if MCLK provided */

 Otherwise mark the mclk pointer to NULL */

 line in diff mode*/

 DMIC pin*/

 Enable IRQ output for GPIO1 pin any way */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ad1980.c  --  ALSA Soc AD1980 codec support

 *

 * Copyright:	Analog Devices Inc.

 * Author:	Roy Huang <roy.huang@analog.com>

 * 		Cliff Cai <cliff.cai@analog.com>

/*

 * WARNING:

 *

 * Because Analog Devices Inc. discontinued the ad1980 sound chip since

 * Sep. 2009, this ad1980 driver is not maintained, tested and supported

 * by ADI now.

		/*

		 * Set bit 16slot in register 74h, then every slot will has only

		 * 16 bits. This command is sent out in 20bit mode, in which

		 * case the first nibble of data is eaten by the addr. (Tag is

		 * always 16 bit)

 unmute captures and playbacks volume */

power on LFE/CENTER/Surround DACs*/

 SPDX-License-Identifier: GPL-2.0



 Audio driver for AK4458 DAC



 Copyright (C) 2016 Asahi Kasei Microdevices Corporation

 Copyright 2018 NXP

 AK4458 Codec Private Data */

 SSLOW, SD, SLOW bits */

 sampling rate */

 For ak4497 */

	0x00	AK4458_00_CONTROL1	*/

	0x01	AK4458_01_CONTROL2	*/

	0x02	AK4458_02_CONTROL3	*/

	0x03	AK4458_03_LCHATT	*/

	0x04	AK4458_04_RCHATT	*/

	0x05	AK4458_05_CONTROL4	*/

	0x06	AK4458_06_DSD1		*/

	0x07	AK4458_07_CONTROL5	*/

	0x08	AK4458_08_SOUND_CONTROL	*/

	0x09	AK4458_09_DSD2		*/

	0x0A	AK4458_0A_CONTROL6	*/

	0x0B	AK4458_0B_CONTROL7	*/

	0x0C	AK4458_0C_CONTROL8	*/

	0x0D	AK4458_0D_CONTROL9	*/

	0x0E	AK4458_0E_CONTROL10	*/

	0x0F	AK4458_0F_L2CHATT	*/

	0x10	AK4458_10_R2CHATT	*/

	0x11	AK4458_11_L3CHATT	*/

	0x12	AK4458_12_R3CHATT	*/

	0x13	AK4458_13_L4CHATT	*/

	0x14	AK4458_14_R4CHATT	*/

/*

 * Volume control:

 * from -127 to 0 dB in 0.5 dB steps (mute instead of -127.5 dB)

/*

 * DEM1 bit DEM0 bit Mode

 * 0 0 44.1kHz

 * 0 1 OFF (default)

 * 1 0 48kHz

 * 1 1 32kHz

/*

 * SSLOW, SD, SLOW bits Digital Filter Setting

 * 0, 0, 0 : Sharp Roll-Off Filter

 * 0, 0, 1 : Slow Roll-Off Filter

 * 0, 1, 0 : Short delay Sharp Roll-Off Filter

 * 0, 1, 1 : Short delay Slow Roll-Off Filter

 * 1, *, * : Super Slow Roll-Off Filter

/*

 * DZFB: Inverting Enable of DZF

 * 0: DZF goes H at Zero Detection

 * 1: DZF goes L at Zero Detection

/*

 * SC1-0 bits: Sound Mode Setting

 * 0 0 : Sound Mode 0

 * 0 1 : Sound Mode 1

 * 1 0 : Sound Mode 2

 * 1 1 : Reserved

 FIR2-0 bits: FIR Filter Mode Setting */

 ATS1-0 bits Attenuation Speed */

 DIF2 bit Audio Interface Format Setting(BICK fs) */

 write SD bit */

 write SLOW bit */

 write SSLOW bit */

 ak4458 dapm widgets */

pw*/

pw*/

pw*/

pw*/

 ak4497 controls */

 ak4497 dapm widgets */

 ak4497 dapm routes */

 calculate bit clock */

 Master Clock Frequency Auto Setting Mode Enable */

	/*

	 * Enable/disable Daisy Chain if in TDM mode and the number of played

	 * channels is bigger than the maximum supported number of channels

 Consumer Mode */

 Provider Mode is not supported */

 DSD mode */

 External Mute ON */

 ACKS bit = 1; 10000000 */

 CONFIG_PM */

 Optional property for ak4497 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Nuvoton NAU8825 audio codec driver

 *

 * Copyright 2015 Google Chromium project.

 *  Author: Anatol Pomozov <anatol@chromium.org>

 * Copyright 2015 Nuvoton Technology Corp.

 *  Co-author: Meng-Huang Kuo <mhkuo@nuvoton.com>

 cross talk suppression detection */

 the maximum frequency of CLK_ADC and CLK_DAC */

 scaling for mclk from sysclk_src output */

 ratio for input clk freq */

 over sampling rate */

 OSR 64, SRC 1/4 */

 OSR 256, SRC 1 */

 OSR 128, SRC 1/2 */

 OSR 32, SRC 1/8 */

 OSR 32, SRC 1/8 */

 OSR 64, SRC 1/4 */

 OSR 128, SRC 1/2 */

 OSR 256, SRC 1 */

 register backup table when cross talk detection */

/**

 * nau8825_sema_acquire - acquire the semaphore of nau88l25

 * @nau8825:  component to register the codec private data with

 * @timeout: how long in jiffies to wait before failure or zero to wait

 * until release

 *

 * Attempts to acquire the semaphore with number of jiffies. If no more

 * tasks are allowed to acquire the semaphore, calling this function will

 * put the task to sleep. If the semaphore is not released within the

 * specified number of jiffies, this function returns.

 * If the semaphore is not released within the specified number of jiffies,

 * this function returns -ETIME. If the sleep is interrupted by a signal,

 * this function will return -EINTR. It returns 0 if the semaphore was

 * acquired successfully.

 *

 * Acquires the semaphore without jiffies. Try to acquire the semaphore

 * atomically. Returns 0 if the semaphore has been acquired successfully

 * or 1 if it cannot be acquired.

/**

 * nau8825_sema_release - release the semaphore of nau88l25

 * @nau8825:  component to register the codec private data with

 *

 * Release the semaphore which may be called from any context and

 * even by tasks which have never called down().

/**

 * nau8825_sema_reset - reset the semaphore for nau88l25

 * @nau8825:  component to register the codec private data with

 *

 * Reset the counter of the semaphore. Call this function to restart

 * a new round task management.

/**

 * nau8825_hpvol_ramp - Ramp up the headphone volume change gradually to target level.

 *

 * @nau8825:  component to register the codec private data with

 * @vol_from: the volume to start up

 * @vol_to: the target volume

 * @step: the volume span to move on

 *

 * The headphone volume is from 0dB to minimum -54dB and -1dB per step.

 * If the volume changes sharp, there is a pop noise heard in headphone. We

 * provide the function to ramp up the volume up or down by delaying 10ms

 * per step.

 only handle volume from 0dB to minimum -54dB */

/**

 * nau8825_intlog10_dec3 - Computes log10 of a value

 * the result is round off to 3 decimal. This function takes reference to

 * dvb-math. The source code locates as the following.

 * Linux/drivers/media/dvb-core/dvb_math.c

 * @value:  input for log10

 *

 * return log10(value) * 1000

 first detect the msb (count begins at 0) */

	/**

	 *      now we use a logtable after the following method:

	 *

	 *      log2(2^x * y) * 2^24 = x * 2^24 + log2(y) * 2^24

	 *      where x = msb and therefore 1 <= y < 2

	 *      first y is determined by shifting the value left

	 *      so that msb is bit 31

	 *              0x00231f56 -> 0x8C7D5800

	 *      the result is y * 2^31 -> "significand"

	 *      then the highest 9 bits are used for a table lookup

	 *      the highest bit is discarded because it's always set

	 *      the highest nine bits in our example are 100011000

	 *      so we would use the entry 0x18

	/**

	 *      last step we do is interpolation because of the

	 *      limitations of the log table the error is that part of

	 *      the significand which isn't used for lookup then we

	 *      compute the ratio between the error and the next table entry

	 *      and interpolate it between the log table entry used and the

	 *      next one the biggest error possible is 0x7fffff

	 *      (in our example it's 0x7D5800)

	 *      needed value for next table entry is 0x800000

	 *      so the interpolation is

	 *      (error / 0x800000) * (logtable_next - logtable_current)

	 *      in the implementation the division is moved to the end for

	 *      better accuracy there is also an overflow correction if

	 *      logtable_next is 256

	/**

	 *      log10(x) = log2(x) * log10(2)

	/**

	 *      the result is round off to 3 decimal

/**

 * nau8825_xtalk_sidetone - computes cross talk suppression sidetone gain.

 *

 * @sig_org: orignal signal level

 * @sig_cros: cross talk signal level

 *

 * The orignal and cross talk signal vlues need to be characterized.

 * Once these values have been characterized, this sidetone value

 * can be converted to decibel with the equation below.

 * sidetone = 20 * log (original signal level / crosstalk signal level)

 *

 * return cross talk sidetone gain

 Backup some register values to backup table */

	/* Restore register values from backup table; When the driver restores

	 * the headphone volume in XTALK_DONE state, it needs recover to

	 * original level gradually with 3dB per step for less pop noise.

	 * Otherwise, the restore should do ASAP.

 Ramping up the volume change to reduce pop noise */

 Enable power of DAC path */

	/* Prevent startup click by letting charge pump to ramp up and

	 * change bump enable

 Enable clock sync of DAC and DAC clock */

 Power up output driver with 2 stage */

 HP outputs not shouted to ground  */

 Enable HP boost driver */

 Enable class G compare path to supply 1.8V or 0.9V. */

 Power up left ADC and raise 5dB than Vmid for Vref  */

 Recover FLL default value */

 Enable internal VCO clock for detection signal generated */

	/* Given specific clock frequency of internal clock to

	 * generate signal.

 Backup those registers changed by cross talk detection */

 Config IIS as master to output signal by codec */

	/* Ramp up headphone volume to 0dB to get better performance and

	 * avoid pop noise in headphone.

 Config channel path and digital gain */

	/* Config cross talk parameters and generate the 23Hz sine wave with

	 * 1/16 full scale of signal level for impedance measurement.

 RMS intrruption enable */

 Power up left and right DAC */

 Disable HP boost driver */

 HP outputs shouted to ground  */

 Power down left and right DAC */

 Enable the TESTDAC and  disable L/R HP impedance */

 Power down output driver with 2 stage */

 Disable clock sync of DAC and DAC clock */

 Disable charge pump ramp up function and change bump */

 Disable power of DAC path */

 Power down left ADC and restore voltage to Vmid */

 Enable internal VCO needed for interruptions */

 Clear cross talk parameters and disable */

 RMS intrruption disable */

 Recover default value for IIS */

 Restore value of specific register for cross talk */

 Apply ADC volume for better cross talk performance */

	/* Disables JKTIP(HPL) DAC channel for right to left measurement.

	 * Do it before sending signal in order to erase pop noise.

 Enable right headphone impedance */

 Enable left headphone impedance */

 Impedance measurement mode enable */

 Impedance measurement mode disable */

/* The cross talk measurement function can reduce cross talk across the

 * JKTIP(HPL) and JKR1(HPR) outputs which measures the cross talk signal

 * level to determine what cross talk reduction gain is. This system works by

 * sending a 23Hz -24dBV sine wave into the headset output DAC and through

 * the PGA. The output of the PGA is then connected to an internal current

 * sense which measures the attenuated 23Hz signal and passing the output to

 * an ADC which converts the measurement to a binary code. With two separated

 * measurement, one for JKR1(HPR) and the other JKTIP(HPL), measurement data

 * can be separated read in IMM_RMS_L for HSR and HSL after each measurement.

 * Thus, the measurement function has four states to complete whole sequence.

 * 1. Prepare state : Prepare the resource for detection and transfer to HPR

 *     IMM stat to make JKR1(HPR) impedance measure.

 * 2. HPR IMM state : Read out orignal signal level of JKR1(HPR) and transfer

 *     to HPL IMM state to make JKTIP(HPL) impedance measure.

 * 3. HPL IMM state : Read out cross talk signal level of JKTIP(HPL) and

 *     transfer to IMM state to determine suppression sidetone gain.

 * 4. IMM state : Computes cross talk suppression sidetone gain with orignal

 *     and cross talk signal level. Apply this gain and then restore codec

 *     configuration. Then transfer to Done state for ending.

		/* In prepare state, set up clock, intrruption, DAC path, ADC

		 * path and cross talk detection parameters for preparation.

 Trigger right headphone impedance detection */

		/* In right headphone IMM state, read out right headphone

		 * impedance measure result, and then start up left side.

 Disable then re-enable IMM mode to update */

 Trigger left headphone impedance detection */

		/* In left headphone IMM state, read out left headphone

		 * impedance measure result, and delay some time to wait

		 * detection sine wave output finish. Then, we can calculate

		 * the cross talk suppresstion side tone according to the L/R

		 * headphone imedance.

		/* In impedance measure state, the orignal and cross talk

		 * signal level vlues are ready. The side tone gain is deter-

		 * mined with these signal level. After all, restore codec

		 * configuration.

	/* To determine the cross talk side tone gain when reach

	 * the impedance measure state.

	/* Delay jack report until cross talk detection process

	 * completed. It can avoid application to do playback

	 * preparation before cross talk detection is still working.

	 * Meanwhile, the protection of the cross talk detection

	 * is released.

	/* If the crosstalk is eanbled and the process is on going,

	 * the driver forces to cancel the crosstalk task and

	 * restores the configuration to original status.

 Reset parameters for cross talk suppression function */

 Prevent startup click by letting charge pump to ramp up */

 Disables the TESTDAC to let DAC signal pass through. */

		/* Set clock source to disable or internal clock before the

		 * playback or capture end. Codec needs clock for Jack

		 * detection and button press if jack inserted; otherwise,

		 * the clock should be closed.

 programmable biquad filter */

 DAC Mux 0x33[9] and 0x34[9] */

	/* ADC for button press detection. A dapm supply widget is used to

	 * prevent dapm_power_widgets keeping the codec at SND_SOC_BIAS_ON

	 * during suspend.

 HPOL/R are ungrounded by disabling 16 Ohm pull-downs on playback */

 High current HPOL/R boost driver */

 Class G operation control*/

	/* CLK_DAC or CLK_ADC = OSR * FS

	 * DAC or ADC clock frequency is defined as Over Sampling Rate (OSR)

	 * multiplied by the audio sample rate (Fs). Note that the OSR and Fs

	 * values must be selected such that the maximum frequency is less

	 * than 6.144 MHz.

 make BCLK and LRC divde configuration if the codec as master. */

 get the bclk and fs ratio */

 Release the semaphore. */

 Release the semaphore. */

/**

 * nau8825_enable_jack_detect - Specify a jack for event reporting

 *

 * @component:  component to register the jack with

 * @jack: jack to use to report headset and button events on

 *

 * After this function has been called the headset insert/remove and button

 * events will be routed to the given jack.  Jack can be null to stop

 * reporting.

	/* Ground HP Outputs[1:0], needed for headset auto detection

	 * Enable Automatic Mic/Gnd switching reading on insert interrupt[6]

	/* return jack connection status according to jack insertion logic

	 * active high or active low.

	/* this will restart the entire jack detection process including MIC/GND

	 * switching and create interrupts. We have to go from 0 to 1 and back

	 * to 0 to restart.

	/* Reset the intrruption status from rightmost bit if the corres-

	 * ponding irq event occurs.

 Force to cancel the cross talk detection process */

 Detach 2kOhm Resistors from MICBIAS to MICGND1/2 */

 ground HPL/HPR, MICGRND1/2 */

 Clear all interruption status */

	/* Enable the insertion interruption, disable the ejection inter-

	 * ruption, and then bypass de-bounce circuit.

 Disable ADC needed for interruptions at audo mode */

 Close clock for jack type detection at manual mode */

 Enable audo mode interruptions with internal clock. */

	/* Enable headset jack type detection complete interruption and

	 * jack ejection interruption.

 Enable internal VCO needed for interruptions */

 Enable ADC needed for interruptions */

	/* Chip needs one FSCLK cycle in order to generate interruptions,

	 * as we cannot guarantee one will be provided by the system. Turning

	 * master mode on then off enables us to generate that FSCLK cycle

	 * with a minimum of contention on the clock bus.

 Not bypass de-bounce circuit */

 Unmask all interruptions */

 Restart the jack detection process at auto mode */

 The chip supports up to 8 buttons, but ALSA defines only 6 buttons */

 The JKSLV and JKR2 all detected in high impedance headset */

 no mic */

 Unground MICGND1 */

 Attach 2kOhm Resistor from MICBIAS to MICGND1 */

 Attach SARADC to MICGND1 */

 Unground MICGND2 */

 Attach 2kOhm Resistor from MICBIAS to MICGND2 */

 Attach SARADC to MICGND2 */

 detect error case */

	/* Leaving HPOL/R grounded after jack insert by default. They will be

	 * ungrounded as part of the widget power up sequence at the beginning

	 * of playback to reduce pop.

		/* upper 8 bits of the register are for short pressed keys,

		 * lower 8 bits - for long pressed buttons

				/* Apply the cross talk suppression in the

				 * headset without high impedance.

					/* Raise protection for cross talk de-

					 * tection if no protection before.

					 * The driver has to cancel the pro-

					 * cess and restore changes if process

					 * is ongoing when ejection.

 Startup cross talk detection process */

				/* The cross talk suppression shouldn't apply

				 * in the headset with high impedance. Thus,

				 * relieve the protection raised before.

		/* Record the interruption report event for driver to report

		 * the event later. The jack report will delay until cross

		 * talk detection process is done.

 crosstalk detection enable and process on going */

		/* One more step to check GPIO status directly. Thus, the

		 * driver can confirm the real insertion interruption because

		 * the intrruption at manual mode has bypassed debounce

		 * circuit which can get rid of unstable status.

 Turn off insertion interruption at manual mode */

			/* Enable interruption for jack type detection at audo

			 * mode which can detect microphone and jack type.

 clears the rightmost interruption */

	/* Delay jack report until cross talk detection is done. It can avoid

	 * application to do playback preparation when cross talk detection

	 * process is still working. Otherwise, the resource like clock and

	 * power will be issued by them at the same time and conflict happens.

 Enable short press and release interruptions */

 Latch IIC LSB value */

 Enable Bias/Vmid */

 VMID Tieoff */

 Disable Boost Driver, Automatic Short circuit protection enable */

 jkdet_polarity - 1  is for active-low */

 Pull up IRQ pin */

 Mask unneeded IRQs: 1 - disable, 0 - enable */

	/* Default oversampling/decimations settings are unusable

	 * (audible hiss). Set it to something better.

 Disable DACR/L power */

	/* Enable TESTDAC. This sets the analog DAC inputs to a '0' input

	 * signal to avoid any glitches due to power up transients in both

	 * the analog and digital DAC circuit.

 CICCLP off */

 Class AB bias current to 2x, DAC Capacitor enable MSB/LSB */

 Class G timer 64ms */

 DAC clock delay 2ns, VREF */

 Config L/R channel */

 Disable short Frame Sync detection logic */

 Cancel and reset cross tak suppresstion detection funciton */

/**

 * nau8825_calc_fll_param - Calculate FLL parameters.

 * @fll_in: external clock provided to codec.

 * @fs: sampling rate.

 * @fll_param: Pointer to structure of FLL parameters.

 *

 * Calculate FLL parameters to configure codec.

 *

 * Returns 0 for success or negative error code.

	/* Ensure the reference clock frequency (FREF) is <= 13.5MHz by dividing

	 * freq_in by 1, 2, 4, or 8 using FLL pre-scalar.

	 * FREF = freq_in / NAU8825_FLL_REF_DIV_MASK

 Choose the FLL ratio based on FREF */

	/* Calculate the frequency of DCO (FDCO) given freq_out = 256 * Fs.

	 * FDCO must be within the 90MHz - 124MHz or the FFL cannot be

	 * guaranteed across the full range of operation.

	 * FDCO = freq_out * 2 * mclk_src_scaling

	/* Calculate the FLL 10-bit integer input and the FLL 16-bit fractional

	 * input based on FDCO, FREF and FLL ratio.

 Make DSP operate at high speed for better performance. */

 FLL 16-bit fractional input */

 FLL 10-bit integer input */

 FLL pre-scaler */

 select divided VCO input */

 Disable free-running mode */

 set FLL loop filter enable and cutoff frequency at 500Khz */

 disable FLL loop filter and cutoff frequency */

 freq_out must be 256*Fs in order to achieve the best performance */

 Make DSP operate as default setting for power saving. */

 Clock provided externally and disable internal VCO clock */

		/* Acquire the semaphore to synchronize the playback and

		 * interrupt handler. In order to avoid the playback inter-

		 * fered by cross talk process, the driver make the playback

		 * preparation halted until cross talk process finish.

 MCLK not changed by clock tree */

 Release the semaphore. */

			/* Decrease the VCO frequency and make DSP operate

			 * as default setting for power saving.

			/* The clock turns off intentionally for power saving

			 * when no headset connected.

		/* Acquire the semaphore to synchronize the playback and

		 * interrupt handler. In order to avoid the playback inter-

		 * fered by cross talk process, the driver make the playback

		 * preparation halted until cross talk process finish.

		/* Higher FLL reference input frequency can only set lower

		 * gain error, such as 0000 for input reference from MCLK

		 * 12.288Mhz.

 Release the semaphore. */

		/* Acquire the semaphore to synchronize the playback and

		 * interrupt handler. In order to avoid the playback inter-

		 * fered by cross talk process, the driver make the playback

		 * preparation halted until cross talk process finish.

		/* If FLL reference input is from low frequency source,

		 * higher error gain can apply such as 0xf which has

		 * the most sensitive gain error correction threshold,

		 * Therefore, FLL has the most accurate DCO to

		 * target frequency.

 Release the semaphore. */

		/* Acquire the semaphore to synchronize the playback and

		 * interrupt handler. In order to avoid the playback inter-

		 * fered by cross talk process, the driver make the playback

		 * preparation halted until cross talk process finish.

		/* If FLL reference input is from low frequency source,

		 * higher error gain can apply such as 0xf which has

		 * the most sensitive gain error correction threshold,

		 * Therefore, FLL has the most accurate DCO to

		 * target frequency.

 Release the semaphore. */

 Close clock when jack type detection at manual mode */

 Clear all interruption status */

	/* Enable both insertion and ejection interruptions, and then

	 * bypass de-bounce circuit.

 Setup codec configuration after resume */

 Reset the configuration of jack type for detection */

 Detach 2kOhm Resistors from MICBIAS to MICGND1/2 */

 ground HPL/HPR, MICGRND1/2 */

 Cancel and reset cross talk detection funciton */

		/* Turn off all interruptions before system shutdown. Keep the

		 * interruption quiet before resume setup completes.

 Disable ADC needed for interruptions at audo mode */

 Power down codec power; don't suppoet button wakeup */

 The MCLK is managed externally or not used at all */

	/* Initiate parameters, semaphore and work queue which are needed in

	 * cross talk suppression measurment function.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * DA9055 ALSA Soc codec driver

 *

 * Copyright (c) 2012 Dialog Semiconductor

 *

 * Tested on (Samsung SMDK6410 board + DA9055 EVB) using I2S and I2C

 * Written by David Chen <david.chen@diasemi.com> and

 * Ashish Chavan <ashish.chavan@kpitcummins.com>

 DA9055 register space */

 Status Registers */

 System Initialisation Registers */

 Input - Gain, Select and Filter Registers */

 Output - Gain, Select and Filter Registers */

 System Controller Registers */

 Control Registers */

 Configuration Registers */

 SR bit fields */

 REFERENCES bit fields */

 PLL_CTRL bit fields */

 AIF_CLK_MODE bit fields */

 AIF_CTRL bit fields */

 MIC_L_CTRL bit fields */

 MIC_R_CTRL bit fields */

 MIXIN_L_CTRL bit fields */

 MIXIN_R_CTRL bit fields */

 ADC_L_CTRL bit fields */

 ADC_R_CTRL bit fields */

 DAC_L_CTRL bit fields */

 DAC_R_CTRL bit fields */

 HP_L_CTRL bit fields */

 HP_R_CTRL bit fields */

 LINE_CTRL bit fields */

 MIXOUT_L_CTRL bit fields */

 MIXOUT_R_CTRL bit fields */

 MIC bias select bit fields */

 ALC_CIC_OP_LEVEL_CTRL bit fields */

 0 = slave, 1 = master */

 PLL divisor table */

 for MASTER mode, fs = 44.1Khz and its harmonics */

 MCLK=11.2896Mhz */

 MCLK=12Mhz */

 MCLK=12.288Mhz */

 MCLK=13Mhz */

 MCLK=13.5Mhz */

 MCLK=14.4Mhz */

 MCLK=19.2Mhz */

 MCLK=19.68Mhz */

 MCLK=19.8Mhz */

 for MASTER mode, fs = 48Khz and its harmonics */

 MCLK=11.2896Mhz */

 MCLK=12Mhz */

 MCLK=12.288Mhz */

 MCLK=13Mhz */

 MCLK=13.5Mhz */

 MCLK=14.4Mhz */

 MCLK=19.2Mhz */

 MCLK=19.68Mhz */

 MCLK=19.8Mhz */

 for SLAVE mode with SRM */

 MCLK=11.2896Mhz */

 MCLK=12Mhz */

 MCLK=12.288Mhz */

 MCLK=13Mhz */

 MCLK=13.5Mhz */

 MCLK=14.4Mhz */

 MCLK=19.2Mhz */

 MCLK=19.68Mhz */

 MCLK=19.8Mhz  */

 Gain and Volume */

 -54dB to 15dB */

 -78dB to 12dB */

 0dB to 36dB */

 ADC and DAC high pass filter cutoff value */

 ADC and DAC voice mode (8kHz) high pass cutoff value */

 Gain ramping rate value */

 DAC noise gate setup time value */

 DAC noise gate rampup rate value */

 DAC noise gate rampdown rate value */

 DAC soft mute rate value */

 DAC routing select */

 MIC PGA Left source select */

 MIC PGA Right source select */

 ALC Input Signal Tracking rate select */

 ALC Attack Rate select */

 ALC Release Rate select */

 ALC Hold Time select */

 Select the left or right channel and capture data */

 Select middle 8 bits for read back from data register */

 Select top 8 bits for read back from data register */

		/*

		 * While enabling ALC (or ALC sync mode), calibration of the DC

		 * offsets must be done first

 Save current values from Mic control registers */

 Mute Mic PGA Left and Right */

 Save current values from ADC control registers */

 Enable ADC Left and Right */

 Calculate average for Left and Right data */

 Left Data */

 Right Data */

 Calculate DC offset */

 Restore original values of ADC control registers */

 Restore original values of Mic control registers */

 Volume controls */

 DAC Equalizer controls */

 High Pass Filter and Voice Mode controls */

 Mute controls */

 Zero Cross controls */

 Gain Ramping controls */

 DAC Noise Gate controls */

 DAC Invertion control */

 DMIC controls */

 ALC Controls */

	/*

	 * Rate at which input signal envelope is tracked as the signal gets

	 * larger

	/*

	 * Rate at which input signal envelope is tracked as the signal gets

	 * smaller

 DAPM Controls */

 Mic PGA Left Source */

 Mic PGA Right Source */

 In Mixer Left */

 In Mixer Right */

 DAC Left Source */

 DAC Right Source */

 Out Mixer Left */

 Out Mixer Right */

 Headphone Output Enable */

 Lineout Output Enable */

 DAPM widgets */

 Input Side */

 Input Lines */

 MUXs for Mic PGA source selection */

 Input PGAs */

 Input Mixers */

 ADCs */

 Output Side */

 MUXs for DAC source selection */

 AIF input */

 DACs */

 Output Mixers */

 Output Enable Switches */

 Output PGAs */

 Output Lines */

 DAPM audio route definition */

 Dest       Connecting Widget    source */

 Input path */

 Output path */

 Codec private data */

 Set DAI word length */

 Set AIF format */

 PLL Mode, Write actual FS */

		/*

		 * Non-PLL Mode

		 * When PLL is bypassed, chip assumes constant MCLK of

		 * 12.288MHz and uses sample rate value to divide this MCLK

		 * to derive its sys clk. As sys clk has to be 256 * Fs, we

		 * need to write constant sample rate i.e. 48KHz.

 PLL Mode */

 PLL slave mode, enable PLL and also SRM */

 PLL master mode, only enable PLL */

 Non PLL Mode, disable PLL */

 Set DAI mode and Format */

 DA9055 in I2S Master Mode */

 DA9055 in I2S Slave Mode */

 Don't allow change of mode if PLL is enabled */

 Only I2S is supported */

 By default only 32 BCLK per WCLK is supported */

/*

 * da9055_set_dai_pll	: Configure the codec PLL

 * @param codec_dai	: Pointer to codec DAI

 * @param pll_id	: da9055 has only one pll, so pll_id is always zero

 * @param fref		: Input MCLK frequency

 * @param fout		: FsDM value

 * @return int		: Zero for success, negative error code for error

 *

 * Note: Supported PLL input frequencies are 11.2896MHz, 12MHz, 12.288MHz,

 *	 13MHz, 13.5MHz, 14.4MHz, 19.2MHz, 19.6MHz and 19.8MHz

 Disable PLL before setting the divisors */

 In slave mode, there is only one set of divisors */

 Search pll div array for correct divisors */

 Check fref, mode  and fout */

 All match, pick up divisors */

 Write PLL dividers */

 DAI operations */

 Playback Capabilities */

 Capture Capabilities */

 Enable VMID reference & master bias */

 Disable VMID reference & master bias */

 Enable all Gain Ramps */

	/*

	 * There are two separate control bits for input and output mixers.

	 * One to enable corresponding amplifier and other to enable its

	 * output. As amplifier bits are related to power control, they are

	 * being managed by DAPM while other (non power related) bits are

	 * enabled here

 Set this as per your system configuration */

 Set platform data values */

 set mic bias source */

 set mic bias voltage */

/*

 * DO NOT change the device Ids. The naming is intentionally specific as both

 * the CODEC and PMIC parts of this chip are instantiated separately as I2C

 * devices (both have configurable I2C addresses, and are to all intents and

 * purposes separate). As a result there are specific DA9055 Ids for CODEC

 * and PMIC, which must be different to operate together.

 I2C codec control layer */

 SPDX-License-Identifier: GPL-2.0-only



 rt715-sdca.c -- rt715 ALSA SoC audio driver



 Copyright(c) 2020 Realtek Semiconductor Corp.







 SDCA Volume/Boost control */

 Capture switch */

 Volume Control */

 MIC Boost Control */

	/*

	 * The first two indices of ADC Mux 24/25 are routed to the same

	 * hardware source. ie, ADC Mux 24 0/1 will both connect to MIC2.

	 * To have a unique set of inputs, we skip the index1 of the muxes.

 Verb ID = 0x701h, nid = e->reg */

/*

 * Due to mux design for nid 24 (MUX_IN3)/25 (MUX_IN4), connection index 0 and

 * 1 will be connected to the same dmic source, therefore we skip index 1 to

 * avoid misunderstanding on usage of dapm routing.

 Use tx_mask or rx_mask to configure stream tag and set dma_data */

 Bus clock frequency */

	/*

	 * Mark hw_init to false

	 * HW init will be performed when device reports present

	/*

	 * PM runtime is only enabled when a Slave reports as Attached

 set autosuspend parameters */

 update count of parent 'active' children */

 make sure the device does not suspend immediately */

 set clock selector = external */

 set GPIO_4/5/6 to be 3rd/4th DMIC usage */

 DFLL Calibration trigger */

 trigger mode = VAD enable */

 SMPU-1 interrupt enable mask */

 Mark Slave initialization complete */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ADAV803 audio driver

 *

 * Copyright 2014 Analog Devices Inc.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cs35l34.c -- CS35l34 ALSA SoC audio driver

 *

 * Copyright 2016 Cirrus Logic, Inc.

 *

 * Author: Paul Handrigan <Paul.Handrigan@cirrus.com>

 Active-low reset GPIO */

 scan rx_mask for aud slot */

	/* scan tx_mask: vmon(2 slots); imon (2 slots); vpmon (1 slot)

	 * vbstmon (1 slot)

 disable vpmon/vbstmon: enable later if set in tx_mask */

 disconnect {vp,vbst}_mon routes: eanble later if set in tx_mask*/

 configure VMON_TX_LOC */

 configure IMON_TX_LOC */

 configure VPMON_TX_LOC */

 configure VBSTMON_TX_LOC */

 Enable the relevant tx slot */

 MCLK, Sample Rate, adsp_rate */

 1 uH */

 1.2 uH */

 1.5uH */

 2.2uH */

 Set over temperature warning attenuation to 6 dB */

	/* Set Power control registers 2 and 3 to have everything

	 * powered down at initialization

 Set mute bit at startup */

 Set Platform Data */

 Boost Voltage has a maximum of 8V */

 Use VP */

 ack the irq by reading all status registers */

 error is no longer asserted; safe to reset */

 note: amp will re-calibrate on next resume */

 error is no longer asserted; safe to reset */

 error is no longer asserted; safe to reset */

 error is no longer asserted; safe to reset */

 Unmask critical interrupts */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * wm8961.c  --  WM8961 ALSA SoC Audio driver

 *

 * Copyright 2009-10 Wolfson Microelectronics, plc

 *

 * Author: Mark Brown

 *

 * Currently unimplemented features:

 *  - ALC

 R0   - Left Input volume */

 R1   - Right Input volume */

 R2   - LOUT1 volume */

 R3   - ROUT1 volume */

 R4   - Clocking1 */

 R5   - ADC & DAC Control 1 */

 R6   - ADC & DAC Control 2 */

 R7   - Audio Interface 0 */

 R8   - Clocking2 */

 R9   - Audio Interface 1 */

 R10  - Left DAC volume */

 R11  - Right DAC volume */

 R14  - Audio Interface 2 */

 R17  - ALC1 */

 R18  - ALC2 */

 R19  - ALC3 */

 R20  - Noise Gate */

 R21  - Left ADC volume */

 R22  - Right ADC volume */

 R23  - Additional control(1) */

 R24  - Additional control(2) */

 R25  - Pwr Mgmt (1) */

 R26  - Pwr Mgmt (2) */

 R27  - Additional Control (3) */

 R28  - Anti-pop */

 R30  - Clocking 3 */

 R32  - ADCL signal path */

 R33  - ADCR signal path */

 R40  - LOUT2 volume */

 R41  - ROUT2 volume */

 R47  - Pwr Mgmt (3) */

 R48  - Additional Control (4) */

 R49  - Class D Control 1 */

 R51  - Class D Control 2 */

 R56  - Clocking 4 */

 R57  - DSP Sidetone 0 */

 R58  - DSP Sidetone 1 */

 R60  - DC Servo 0 */

 R61  - DC Servo 1 */

 R63  - DC Servo 3 */

 R65  - DC Servo 5 */

 R68  - Analogue PGA Bias */

 R69  - Analogue HP 0 */

 R71  - Analogue HP 2 */

 R72  - Charge Pump 1 */

 R82  - Charge Pump B */

 R87  - Write Sequencer 1 */

 R88  - Write Sequencer 2 */

 R89  - Write Sequencer 3 */

 R90  - Write Sequencer 4 */

 R91  - Write Sequencer 5 */

 R92  - Write Sequencer 6 */

 R93  - Write Sequencer 7 */

 R252 - General test 1 */

/*

 * The headphone output supports special anti-pop sequences giving

 * silent power up and power down.

 Make sure the output is shorted */

 Enable the charge pump */

 Enable the PGA */

 Enable the amplifier */

 Second stage enable */

 Enable the DC servo & trigger startup */

 Enable the output stage */

 Remove the short on the output stage */

 Short the output */

 Disable the output stage */

 Disable DC offset cancellation */

 Finish up */

 Disable the PGA */

 Disable the charge pump */

 Enable the PGA */

 Enable the amplifier */

 Disable the amplifier */

 Disable the PGA */

 Handle as a mono path for DCS */

 Values for CLK_SYS_RATE */

 Values for SAMPLE_RATE */

 Find the closest sample rate for the filters */

 Select a CLK_SYS/fs ratio equal to or higher than required */

 Sloping stop-band filter is recommended for <= 24kHz */

	/* This is all slightly unusual since we have no bypass paths

	 * and the output amplifier structure means we can just slam

	 * the biases straight up rather than having to ramp them

	 * slowly.

 Enable bias generation */

 VMID=2*50k, VREF */

 VREF off */

 Bias generation off */

 VMID off */

 Enable class W */

	/* Latch volume update bits (right channel only, we always

 Use soft mute by default */

	/* Use automatic clocking mode by default; for now this is all

	 * we support.

 This isn't volatile - readback doesn't correspond to write */

 SPDX-License-Identifier: GPL-2.0

/*

 * rt715-sdw.c -- rt715 ALSA SoC audio driver

 *

 * Copyright(c) 2019 Realtek Semiconductor Corp.

 *

 * ALC715 ASoC Codec Driver based Intel Dummy SdW codec driver

 *

 i2c read */

 HD-A read */

 BRA */

 i2c debug */

 decoded HD-A */

 index registers */

 for R channel */

 index registers */

 for R channel */

 Readable registers */

 volatile register */

 Maximum number of register */

 Defaults */

 Total register space for SDW */

 Total number of bits in register */

 Maximum number of register */

 12 bits command */

 special case */

 get command */

 set command */

 7 bits payload */

 4 bits command */

 read */

 write */

 16 bits payload [15:8] */

 0x80: valid bit */

 Update the status */

	/*

	 * Perform initialization only if slave status is present and

	 * hw_init flag is false

 perform I/O transfers required for Slave initialization */

 first we need to allocate memory for set bits in port lists */

 BITMAP: 01010000 */

 BITMAP:  00000000 */

 set the timeout values */

 wake-up event */

 Regmap Initialization */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * CS4271 I2C audio driver

 *

 * Copyright (c) 2010 Alexander Sverdlin <subaparts@yandex.ru>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for the PCM512x CODECs

 *

 * Author:	Mark Brown <broonie@kernel.org>

 *		Copyright 2014 Linaro Ltd

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * da7219.c - DA7219 ALSA SoC Codec Driver

 *

 * Copyright (c) 2015 Dialog Semiconductor

 *

 * Author: Adam Thomson <Adam.Thomson.Opensource@diasemi.com>

/*

 * TLVs and Enums

 Input TLVs */

 Output TLVs */

 -77.25dB to 12dB */

 Input Enums */

 Input/Output Enums */

 Output Enums */

/*

 * Control Functions

 Locked Kcontrol calls */

 ALC */

 Save current state of mic control register */

 Save current state of input mixer control register */

 Save current state of input ADC control register */

 Enable then Mute MIC PGAs */

 Enable input mixers unmuted */

 Enable input filters unmuted */

 Perform auto calibration */

 If auto calibration fails, disable DC offset, hybrid ALC */

 Enable DC offset cancellation, hybrid mode */

 Restore input filter control register to original state */

 Restore input mixer control registers to original state */

 Restore MIC control registers to original states */

	/*

	 * If ALC in operation and value of control has been updated,

	 * make sure calibrated offsets are updated.

 Force ALC offset calibration if enabling ALC */

 ToneGen */

	/*

	 * Frequency value spans two 8-bit registers, lower then upper byte.

	 * Therefore we need to convert to host endianness here.

	/*

	 * Frequency value spans two 8-bit registers, lower then upper byte.

	 * Therefore we need to convert to little endian here to align with

	 * HW registers.

/*

 * KControls

 Mics */

 Mixer Input */

 ADC */

 ALC */

 Input High-Pass Filters */

 Sidetone Filter */

 Tone Generator */

 Gain ramping */

 DAC High-Pass Filter */

 DAC 5-Band Equaliser */

 DAC Softmute */

 DAC Noise Gate */

 DACs */

 CP */

 Headphones */

/*

 * DAPM Mux Controls

/*

 * DAPM Mixer Controls

/*

 * DAPM Events

			/*

			 * Delay only for first capture after bias enabled to

			 * avoid possible DC offset related noise.

 Enable DAI clks for master mode */

 PC synchronised to DAI */

 Slave mode, if SRM not enabled no need for status checks */

 Check SRM has locked */

 PC free-running */

 Disable DAI clks if in master mode */

 Enable minimum gain on HP to avoid pops */

 Remove minimum gain on HP */

 Ensure nominal gain ramping for DAPM sequence */

 Restore previous gain ramp settings */

/*

 * DAPM Widgets

 Input Supplies */

 Inputs */

 Input PGAs */

 Input Filters */

 Tone Generator */

 Sidetone Input */

 Input Mixer Supply */

 Input Mixer */

 Input Muxes */

 DAI Supply */

 DAI */

 Output Muxes */

 Output Mixers */

 Sidetone Mixers */

 DACs */

 Output PGAs */

 Output Supplies */

 Outputs */

 Pre/Post Power */

/*

 * DAPM Mux Routes

/*

 * DAPM Mixer Routes

/*

 * DAPM audio route definition

 Input paths */

 Output paths */

/*

 * DAI operations

 Verify 2MHz - 54MHz MCLK provided, and set input divider */

 Configure PLL */

 Calculate dividers for PLL */

 Write PLL config & dividers */

 No channels enabled so disable TDM */

 Check we have valid slots */

	/*

	 * Ensure we have a valid offset into the frame, based on slot width

	 * and slot offset of first slot we're interested in.

	/*

	 * If we're master, calculate & validate frame size based on slot info

	 * provided as we have a limited set of rates available.

	/*

	 * If we're master, then we have a limited set of BCLK rates we

	 * support. For slave mode this isn't the case and the codec can detect

	 * the BCLK rate automatically.

			/*

			 * Rounding the rate here avoids failure trying to set a

			 * new rate on an already enabled bclk. In that

			 * instance this will just set the same rate as is

			 * currently in use, and so should continue without

			 * problem, as long as the BCLK rate is suitable for the

			 * desired frame size.

/*

 * DT/ACPI

/*

 * Codec driver functions

 Enable MCLK for transition to ON state */

 Master bias */

 Remove MCLK */

 Only disable master bias if we're not a wake-up source */

 Get required supplies */

 Default to upper range */

 Determine VDDIO voltage provided */

 Enable main supplies */

	/*

	 * We don't allow changing the parent rate as some BCLK rates can be

	 * derived from multiple parent WCLK rates (BCLK rates are set as a

	 * multiplier of WCLK in HW). We just do some rounding down based on the

	 * parent WCLK rate set and find the appropriate multiplier of BCLK to

	 * get the rounded down BCLK value.

 For DT platforms allocate onecell data for clock registration */

			/*

			 * If we can, make MCLK the parent of WCLK to ensure

			 * it's enabled as required.

 Make WCLK the parent of BCLK */

 For DT setup onecell data, otherwise create lookup */

 If we're using DT, then register as provider accordingly */

 CONFIG_COMMON_CLK */

 Mic Bias voltages */

		/*

		 * Calculate delay required to compensate for DC offset in

		 * Mic PGA, based on Mic Bias voltage.

 Mic */

/*

 * Regmap configs

 Regulator configuration */

 Disable audio paths if still active from previous start */

 Soft reset component */

 Update IO voltage level range based on supply level */

 Handle DT/ACPI/Platform data */

 Check if MCLK provided */

 Register CCF DAI clock control */

 Default PC counter to free-running */

 Default gain ramping */

 Default minimum gain on HP to avoid pops during DAPM sequencing */

 Default infinite tone gen, start/stop by Kcontrol */

 Initialise AAD block */

 Supplies */

 Suspend AAD if we're not a wake-up source */

 Resume AAD if previously suspended */

/*

 * I2C layer

 Retrieve DT/ACPI/Platform data */

 AAD */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/sound/soc/m8m/hi6210_i2s.c - I2S IP driver

 *

 * Copyright (C) 2015 Linaro, Ltd

 * Author: Andy Green <andy.green@linaro.org>

 *

 * This driver only deals with S2 interface (BT)

 deassert reset on ABB */

 enable clock before frequency division */

 enable codec working clock / == "codec bus clock" */

 deassert reset on codec / interface clock / working clock */

 not interested in i2s irqs */

 reset the stereo downlink fifo */

 mux 11/12 = APB not i2s */

 BT R ch  0 = mixer op of DACR ch */

 BT L ch = 1 = mux 7 = "mixer output of DACL */

 enable S2 TX */

 disable S2 TX */

	/*

	 * We don't actually set the hardware until the hw_params

	 * call, but we need to validate the user input here.

 BT gets the I2S */

 clear loopback, set signed type and word length */

 set DAC and related units to correct rate */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0



 Socionext UniPhier EVEA ADC/DAC codec driver.



 Copyright (c) 2016-2017 Socionext Inc.

 ADAMV will hangup if EXIV reset is asserted */

 SPDX-License-Identifier: GPL-2.0



 Socionext UniPhier AIO ALSA driver for LD11/LD20.



 Copyright (c) 2016-2018 Socionext Inc.

 for HDMI PCM In, Pin:AI1Dx */

 for SIF In, Pin:AI2Dx */

 for Line In, Pin:AI3Dx */

 for S/PDIF In, Pin:AI1IEC */

 for Speaker, Pin:AO1Dx */

 for HDMI PCM, Pin:AO2Dx */

 for Line Out, Pin:LO2_x */

 for Headphone, Pin:HP1_x */

 for HW Sampling Rate Converter */

 for HW Sampling Rate Converter 2 */

 for S/PDIF Out, Pin:AO1IEC */

 for S/PDIF Out, Pin:AO1IEC, Compress */

 SPDX-License-Identifier: GPL-2.0



 Socionext UniPhier AIO ALSA CPU DAI driver.



 Copyright (c) 2016-2018 Socionext Inc.

/**

 * find_volume - find volume supported HW port by HW port number

 * @chip: the AIO chip pointer

 * @oport_hw: HW port number, one of AUD_HW_XXXX

 *

 * Find AIO device from device list by HW port number. Volume feature is

 * available only in Output and PCM ports, this limitation comes from HW

 * specifications.

 *

 * Return: The pointer of AIO substream if successful, otherwise NULL on error.

/**

 * find_spec - find HW specification info by name

 * @aio: the AIO device pointer

 * @name: name of device

 * @direction: the direction of substream, SNDRV_PCM_STREAM_*

 *

 * Find hardware specification information from list by device name. This

 * information is used for telling the difference of SoCs to driver.

 *

 * Specification list is array of 'struct uniphier_aio_spec' which is defined

 * in each drivers (see: aio-i2s.c).

 *

 * Return: The pointer of hardware specification of AIO if successful,

 * otherwise NULL on error.

/**

 * find_divider - find clock divider by frequency

 * @aio: the AIO device pointer

 * @pll_id: PLL ID, should be AUD_PLL_XX

 * @freq: required frequency

 *

 * Find suitable clock divider by frequency.

 *

 * Return: The ID of PLL if successful, otherwise negative error value.

 SPDX-License-Identifier: GPL-2.0



 Socionext UniPhier AIO DMA driver.



 Copyright (c) 2016-2018 Socionext Inc.

 Skip channel that does not trigger */

/**

 * uniphier_aiodma_soc_register_platform - register the AIO DMA

 * @pdev: the platform device

 *

 * Register and setup the DMA of AIO to transfer the sound data to device.

 * This function need to call once at driver startup and need NOT to call

 * unregister function.

 *

 * Return: Zero if successful, otherwise a negative value on error.

 SPDX-License-Identifier: GPL-2.0



 Socionext UniPhier AIO ALSA common driver.



 Copyright (c) 2016-2018 Socionext Inc.

/**

 * aio_iecout_set_enable - setup IEC output via SoC glue

 * @chip: the AIO chip pointer

 * @enable: false to stop the output, true to start

 *

 * Set enabled or disabled S/PDIF signal output to out of SoC via AOnIEC pins.

 * This function need to call at driver startup.

 *

 * The regmap of SoC glue is specified by 'socionext,syscon' optional property

 * of DT. This function has no effect if no property.

/**

 * aio_chip_set_pll - set frequency to audio PLL

 * @chip: the AIO chip pointer

 * @pll_id: PLL

 * @freq: frequency in Hz, 0 is ignored

 *

 * Sets frequency of audio PLL. This function can be called anytime,

 * but it takes time till PLL is locked.

 *

 * Return: Zero if successful, otherwise a negative value on error.

 Not change */

/**

 * aio_chip_init - initialize AIO whole settings

 * @chip: the AIO chip pointer

 *

 * Sets AIO fixed and whole device settings to AIO.

 * This function need to call once at driver startup.

 *

 * The register area that is changed by this function is shared by all

 * modules of AIO. But there is not race condition since this function

 * has always set the same initialize values.

/**

 * aio_init - initialize AIO substream

 * @sub: the AIO substream pointer

 *

 * Sets fixed settings of each AIO substreams.

 * This function need to call once at substream startup.

 *

 * Return: Zero if successful, otherwise a negative value on error.

/**

 * aio_port_reset - reset AIO port block

 * @sub: the AIO substream pointer

 *

 * Resets the digital signal input/output port block of AIO.

/**

 * aio_port_set_ch - set channels of LPCM

 * @sub: the AIO substream pointer, PCM substream only

 *

 * Set suitable slot selecting to input/output port block of AIO.

 *

 * This function may return error if non-PCM substream.

 *

 * Return: Zero if successful, otherwise a negative value on error.

/**

 * aio_port_set_rate - set sampling rate of LPCM

 * @sub: the AIO substream pointer, PCM substream only

 * @rate: Sampling rate in Hz.

 *

 * Set suitable I2S format settings to input/output port block of AIO.

 * Parameter is specified by hw_params().

 *

 * This function may return error if non-PCM substream.

 *

 * Return: Zero if successful, otherwise a negative value on error.

/**

 * aio_port_set_fmt - set format of I2S data

 * @sub: the AIO substream pointer, PCM substream only

 * This parameter has no effect if substream is I2S or PCM.

 *

 * Set suitable I2S format settings to input/output port block of AIO.

 * Parameter is specified by set_fmt().

 *

 * This function may return error if non-PCM substream.

 *

 * Return: Zero if successful, otherwise a negative value on error.

/**

 * aio_port_set_clk - set clock and divider of AIO port block

 * @sub: the AIO substream pointer

 *

 * Set suitable PLL clock divider and relational settings to

 * input/output port block of AIO. Parameters are specified by

 * set_sysclk() and set_pll().

 *

 * Return: Zero if successful, otherwise a negative value on error.

/**

 * aio_port_set_param - set parameters of AIO port block

 * @sub: the AIO substream pointer

 * @pass_through: Zero if sound data is LPCM, otherwise if data is not LPCM.

 * This parameter has no effect if substream is I2S or PCM.

 * @params: hardware parameters of ALSA

 *

 * Set suitable setting to input/output port block of AIO to process the

 * specified in params.

 *

 * Return: Zero if successful, otherwise a negative value on error.

/**

 * aio_port_set_enable - start or stop of AIO port block

 * @sub: the AIO substream pointer

 * @enable: zero to stop the block, otherwise to start

 *

 * Start or stop the signal input/output port block of AIO.

/**

 * aio_port_get_volume - get volume of AIO port block

 * @sub: the AIO substream pointer

 *

 * Return: current volume, range is 0x0000 - 0xffff

/**

 * aio_port_set_volume - set volume of AIO port block

 * @sub: the AIO substream pointer

 * @vol: target volume, range is 0x0000 - 0xffff.

 *

 * Change digital volume and perfome fade-out/fade-in effect for specified

 * output slot of port. Gained PCM value can calculate as the following:

 *   Gained = Original * vol / 0x4000

/**

 * aio_if_set_param - set parameters of AIO DMA I/F block

 * @sub: the AIO substream pointer

 * @pass_through: Zero if sound data is LPCM, otherwise if data is not LPCM.

 * This parameter has no effect if substream is I2S or PCM.

 *

 * Set suitable setting to DMA interface block of AIO to process the

 * specified in settings.

 *

 * Return: Zero if successful, otherwise a negative value on error.

/**

 * aio_oport_set_stream_type - set parameters of AIO playback port block

 * @sub: the AIO substream pointer

 * @pc: Pc type of IEC61937

 *

 * Set special setting to output port block of AIO to output the stream

 * via S/PDIF.

 *

 * Return: Zero if successful, otherwise a negative value on error.

 Do nothing */

/**

 * aio_src_reset - reset AIO SRC block

 * @sub: the AIO substream pointer

 *

 * Resets the digital signal input/output port with sampling rate converter

 * block of AIO.

 * This function has no effect if substream is not supported rate converter.

/**

 * aio_src_set_param - set parameters of AIO SRC block

 * @sub: the AIO substream pointer

 * @params: hardware parameters of ALSA

 *

 * Set suitable setting to input/output port with sampling rate converter

 * block of AIO to process the specified in params.

 * This function has no effect if substream is not supported rate converter.

 *

 * Return: Zero if successful, otherwise a negative value on error.

 Wait for setup */

 Wait for setup */

 Wait for setup */

 Wait for setup */

 SPDX-License-Identifier: GPL-2.0



 Socionext UniPhier AIO Compress Audio driver.



 Copyright (c) 2017-2018 Socionext Inc.

 IEC frame type will be changed after received valid data */

 Size of AIO output format is double of IEC61937 */

 Next data is Pc and Pd */

 Force overwrite IEC frame type */

 Size of AIO output format is double of IEC61937 */

 SPDX-License-Identifier: GPL-2.0



 Socionext UniPhier AIO ALSA driver for PXs2.



 Copyright (c) 2018 Socionext Inc.

 for Line PCM In, Pin:AI1Dx */

 for Speaker/Headphone/Mic PCM In, Pin:AI2Dx */

 for HDMI PCM Out, Pin:AO1Dx (inner) */

 for Line PCM Out, Pin:AO2Dx */

 for Speaker/Headphone/Mic PCM Out, Pin:AO3Dx */

 for HDMI Out, Pin:AO1IEC */

 for HDMI Out, Pin:AO1IEC, Compress */

 for S/PDIF Out, Pin:AO2IEC */

 for S/PDIF Out, Pin:AO2IEC */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (C) 2010, Lars-Peter Clausen <lars@metafoo.de>

 Playback */

 Capture */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/* sound/soc/rockchip/rockchip_i2s.c

 *

 * ALSA SoC Audio Layer - Rockchip I2S Controller driver

 *

 * Copyright (c) 2014 Rockchip Electronics Co. Ltd.

 * Author: Jianqun <jay.xu@rock-chips.com>

/*

 * Used to indicate the tx/rx status.

 * I2S controller hopes to start the tx and rx together,

 * also to stop them when they are both try to stop.

 tx/rx lock */

 Should wait for clear operation to finish */

 Should wait for clear operation to finish */

 Set source clock in Master mode */

 PCM delay 1 bit mode */

 PCM no delay mode */

 PCM delay 1 bit mode */

 PCM no delay mode */

 try to prepare related clocks */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Rockchip machine ASoC driver for RK3288 boards that have an HDMI and analog

 * audio output

 *

 * Copyright (c) 2016, Collabora Ltd.

 *

 * Authors: Sjoerd Simons <sjoerd.simons@collabora.com>,

 *	    Romain Perier <romain.perier@collabora.com>

 Enable Headset Jack detection */

 Set codecs as slave */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Rockchip PDM ALSA SoC Digital Audio Interface(DAI)  driver

 *

 * Copyright (C) 2017 Fuzhou Rockchip Electronics Co., Ltd

 size * width: 8*4 = 32 bytes */

 all channels share the single FIFO */

 SPDX-License-Identifier: GPL-2.0-only

 ALSA SoC Audio Layer - Rockchip I2S/TDM Controller driver

 Copyright (c) 2018 Rockchip Electronics Co. Ltd.

 Author: Sugar Zhang <sugar.zhang@rock-chips.com>

 Author: Nicolas Frattaroli <frattaroli.nicolas@gmail.com>

 The max channel 8 / 2 */

 The mclk_tx_src is parent of mclk_tx */

 The mclk_rx_src is parent of mclk_rx */

	/*

	 * The mclk_root0 and mclk_root1 are root parent and supplies for

	 * the different FS.

	 *

	 * e.g:

	 * mclk_root0 is VPLL0, used for FS=48000Hz

	 * mclk_root1 is VPLL1, used for FS=44100Hz

 xfer lock */

/**

 * i2s_tdm_prepare_enable_mclk - prepare to enable all mclks, disable them on

 *				 failure.

 * @i2s_tdm: rk_i2s_tdm_dev struct

 *

 * This function attempts to enable all mclk clocks, but cleans up after

 * itself on failure. Guarantees to balance its calls.

 *

 * Returns success (0) or negative errno.

/*

 * Makes sure that both tx and rx are reset at the same time to sync lrck

 * when clk_trcm > 0.

	/* This is technically race-y.

	 *

	 * In an ideal world, we could atomically assert both resets at the

	 * same time, through an atomic bulk reset API. This API however does

	 * not exist, so what the downstream vendor code used to do was

	 * implement half a reset controller here and require the CRU to be

	 * passed to the driver as a device tree node. Violating abstractions

	 * like that is bad, especially when it influences something like the

	 * bindings which are supposed to describe the hardware, not whatever

	 * workarounds the driver needs, so it was dropped.

	 *

	 * In practice, asserting the resets one by one appears to work just

	 * fine for playback. During duplex (playback + capture) operation,

	 * this might become an issue, but that should be solved by the

	 * implementation of the aforementioned API, not by shoving a reset

	 * controller into an audio driver.

 Wait on the clear operation to finish */

 only used when clk_trcm > 0 */

 PCM no delay mode */

 PCM delay 1 mode */

 mclk_rx is also ok. */

 Put set mclk rate into rockchip_i2s_tdm_set_mclk() */

 SPDX-License-Identifier: GPL-2.0-only

/* sound/soc/rockchip/rk_spdif.c

 *

 * ALSA SoC Audio Layer - Rockchip I2S Controller driver

 *

 * Copyright (c) 2014 Rockchip Electronics Co. Ltd.

 * Author: Jianqun <jay.xu@rock-chips.com>

 * Copyright (c) 2015 Collabora Ltd.

 * Author: Sjoerd Simons <sjoerd.simons@collabora.co.uk>

 Set clock and calculate divider */

		/* Select the 8 channel SPDIF solution on RK3288 as

		 * the 2 channel one does not appear to work

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Rockchip machine ASoC driver for boards using a MAX90809 CODEC.

 *

 * Copyright (c) 2014, ROCKCHIP CORPORATION.  All rights reserved.

 Headset jack detection DAPM pins */

	/*

	 * The jack has already been created in the rk_98090_headset_init()

	 * function.

 HDMI codec dai does not need to set sysclk. */

	/*

	 * Set period size to 240 because pl330 has issue

	 * dealing with larger period in stress testing.

 enable jack detection */

 max98090 dai_link */

 set max98090 as slave */

 HDMI codec dai_link */

 max98090 and HDMI codec dai_link */

 set max98090 as slave */

 Enable Headset and 4 Buttons Jack detection */

 Parse DTS for I2S controller. */

	/*

	 * Find the card to use based on the presences of audio codec

	 * and hdmi codec in device property. Set their of_node accordingly.

 Parse headset detection codec. */

 Parse card name. */

 register the soc card */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Rockchip machine ASoC driver for boards using a RT5645/RT5650 CODEC.

 *

 * Copyright (c) 2015, ROCKCHIP CORPORATION.  All rights reserved.

 Input Lines */

 Output Lines */

 Enable Headset and 4 Buttons Jack detection */

 set rt5645 as slave */

 register the soc card */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Rockchip machine ASoC driver for boards using MAX98357A/RT5514/DA7219

 *

 * Copyright (c) 2016, ROCKCHIP CORPORATION.  All rights reserved.

 Headset jack detection DAPM pins */

 Wait for DMIC stable */

 in bypass mode, the mclk has to be one of the frequencies below */

 We need default MCLK and PLL settings for the accessory detection */

 Enable Headset and 4 Buttons Jack detection */

 Wait for DMIC stable */

 set da7219 as slave */

 set max98357a as slave */

 set rt5514 as slave */

 RT5514 DSP for voice wakeup via spi bus */

 Output */

 Output */

 Input */

 Input */

 Output */

 Input */

 Set DMIC wakeup delay */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * soc-acpi-intel-hsw-bdw-match.c - tables and support for ACPI enumeration.

 *

 * Copyright (c) 2017, Intel Corporation.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * soc-acpi-intel-icl-match.c - tables and support for ICL ACPI enumeration.

 *

 * Copyright (c) 2018, Intel Corporation.

 *

 4 active links required */

 3 active links required */

 rt700 connected on link0 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * soc-acpi-intel-skl-match.c - tables and support for SKL ACPI enumeration.

 *

 * Copyright (c) 2018, Intel Corporation.

 *

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Intel Smart Sound Technology (SST) DSP Core Driver

 *

 * Copyright (C) 2013, Intel Corporation. All rights reserved.

 Internal generic low-level SST IO functions - can be overidden */

 Public API */

 This is for registers bits with attribute RWC */

 This is for registers bits with attribute RWC */

	/*

	 * split the loop into sleeps of varying resolution. more accurately,

	 * the range of wakeups are:

	 * Phase 1(first 5ms): min sleep 0.5ms; max sleep 1ms.

	 * Phase 2:( 5ms to 10ms) : min sleep 0.5ms; max sleep 10ms

	 * (usleep_range (500, 1000) and usleep_range(5000, 10000) are

	 * both possible in this phase depending on whether k > 10 or not).

	 * Phase 3: (beyond 10 ms) min sleep 5ms; max sleep 10ms.

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * soc-acpi-intel-cht-match.c - tables and support for CHT ACPI enumeration.

 *

 * Copyright (c) 2017, Intel Corporation.

 Cherryview-based platforms: CherryTrail and Braswell */

 some CHT-T platforms rely on RT5640, use Baytrail machine driver */

 some CHT-T platforms rely on RT5651, use Baytrail machine driver */

	/*

	 * This is always last in the table so that it is selected only when

	 * enabled explicitly and there is no codec-related information in SSDT

 SPDX-License-Identifier: GPL-2.0-only

/*

 * soc-acpi-intel-cnl-match.c - tables and support for CNL ACPI enumeration.

 *

 * Copyright (c) 2018, Intel Corporation.

 *

 SPDX-License-Identifier: GPL-2.0-only

/*

 * soc-acpi-intel-bxt-match.c - tables and support for BXT ACPI enumeration.

 *

 * Copyright (c) 2018, Intel Corporation.

 *

 SPDX-License-Identifier: GPL-2.0-only

/*

 * soc-acpi-intel-byt-match.c - tables and support for BYT ACPI enumeration.

 *

 * Copyright (c) 2017, Intel Corporation.

 Point of View mobii wintab p1006w (v1.0) */

 Note 105b is Foxcon's USB/PCI vendor id */

 Aegex 10 tablet (RU2) */

 Dell Venue 10 Pro 5055 */

 Various devices use an ACPI id of 10EC5640 while using a rt5672 codec */

 some Baytrail platforms rely on RT5645, use CHT machine driver */

 use CHT driver to Baytrail Chromebooks */

	/*

	 * This is always last in the table so that it is selected only when

	 * enabled explicitly and there is no codec-related information in SSDT

 SPDX-License-Identifier: GPL-2.0-only



 soc-acpi-intel-sdw-mockup-match.c - tables and support for SoundWire

 mockup device ACPI enumeration.



 Copyright (c) 2021, Intel Corporation.



 SPDX-License-Identifier: GPL-2.0-only

/*

 * Intel SST generic IPC Support

 *

 * Copyright (C) 2015, Intel Corporation. All rights reserved.

 IPC message timeout (msecs) */

 locks held by caller */

 wait for DSP completion (in all cases atm inc pending) */

 copy the data returned from DSP */

		/* if the DSP is busy, we will TX messages after IRQ.

		 * also postpone if we are in the middle of processing

		 * completion irq

	/*

	 * DSP maybe in lower power active state, so

	 * check if the DSP supports DSP lp On method

	 * if so invoke that before sending IPC

 locks held by caller */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * soc-acpi-intel-tgl-match.c - tables and support for TGL ACPI enumeration.

 *

 * Copyright (c) 2019, Intel Corporation.

 *

 unique ID is set for some reason */

 this table is used when there is no I2S codec present */

 mockup tests need to be first */

 4 active links required */

		/*

		 * link_mask should be 0xB, but all links are enabled by BIOS.

		 * This entry will be selected if there is no rt1308 exposed

		 * on link2 since it will fail to match the above entry.

 4 active links required */

		/*

		 * link_mask should be 0xB, but all links are enabled by BIOS.

		 * This entry will be selected if there is no rt1316 amplifier exposed

		 * on link2 since it will fail to match the above entry.

 4 active links required */

 rt711 on link 0 and 1 rt1308 on link 1 */

 rt711 on link 0 and 2 rt1308s on link 1 */

 rt5682 on link0 & 2xmax98373 on link 1 */

 rt711 on link 0 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * soc-acpi-intel-kbl-match.c - tables and support for KBL ACPI enumeration.

 *

 * Copyright (c) 2018, Intel Corporation.

 *

 SPDX-License-Identifier: GPL-2.0-only

/*

 * soc-acpi-intel-glk-match.c - tables and support for GLK ACPI enumeration.

 *

 * Copyright (c) 2018, Intel Corporation.

 *

 SPDX-License-Identifier: GPL-2.0-only

/*

 * soc-acpi-intel-ehl-match.c - tables and support for EHL ACPI enumeration.

 *

 * Copyright (c) 2019, Intel Corporation.

 *

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2018, Intel Corporation.

/*

 * soc-acpi-intel-hda-match.c - tables and support for HDA+ACPI enumeration.

 *

 .id is not used in this file */

 .fw_filename is dynamically set in skylake driver */

 .sof_fw_filename is dynamically set in sof/intel driver */

		/*

		 * .machine_quirk and .quirk_data are not used here but

		 * can be used if we need a more complicated machine driver

		 * combining HDA+other device (e.g. DMIC).

 SPDX-License-Identifier: GPL-2.0-only

/*

 * soc-apci-intel-cfl-match.c - tables and support for CFL ACPI enumeration.

 *

 * Copyright (c) 2019, Intel Corporation.

 *

 SPDX-License-Identifier: GPL-2.0-only

/*

 * soc-acpi-intel-cml-match.c - tables and support for CML ACPI enumeration.

 *

 * Copyright (c) 2019, Intel Corporation.

 *

/*

 * The order of the three entries with .id = "10EC5682" matters

 * here, because DSDT tables expose an ACPI HID for the MAX98357A

 * speaker amplifier which is not populated on the board.

 unique ID is set for some reason */

 4 active links required */

 4 active links required */

		/*

		 * link_mask should be 0xB, but all links are enabled by BIOS.

		 * This entry will be selected if there is no rt1308 exposed

		 * on link2 since it will fail to match the above entry.

 RT700 connected on Link1 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * soc-apci-intel-jsl-match.c - tables and support for JSL ACPI enumeration.

 *

 * Copyright (c) 2019-2020, Intel Corporation.

 *

/*

 * When adding new entry to the snd_soc_acpi_intel_jsl_machines array,

 * use .quirk_data member to distinguish different machine driver,

 * and keep ACPI .id field unchanged for the common codec.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * soc-apci-intel-adl-match.c - tables and support for ADL ACPI enumeration.

 *

 * Copyright (c) 2020, Intel Corporation.

 unique ID is set for some reason */

 this table is used when there is no I2S codec present */

 4 active links required */

 4 active links required */

 4 active links required */

 2 active links required */

 link0 required */

 rt5682 on link0 & 2xmax98373 on link 2 */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright(c) 2019 Intel Corporation.

/*

 * Intel Cometlake I2S Machine driver for RT1011 + RT5682 codec

 The platform clock outputs 24Mhz clock to codec as I2S MCLK */

 Default: Woofer speakers  */

WL/WR speaker*/

 HP jack connectors - unknown if we have jack detection */

 other jacks */

 DMIC */

TL/TR speaker*/

 need to enable ASRC function for 24MHz mclk rate */

	/*

	 * Headset buttons map to the google Reference headset.

	 * These can be configured by userspace.

 Configure sysclk for codec */

	/*

	 * slot_width should be equal or large than data length, set them

	 * be the same

 100 Fs to drive 24 bit data */

		/*

		 * Codec TDM is configured as 24 bit capture/ playback.

		 * 2 CH PB is done over 4 codecs - 2 Woofers and 2 Tweeters.

		 * The Left woofer and tweeter plays the Left playback data

		 * and  similar by the Right.

		 * Hence 2 codecs (1 T and 1 W pair) share same Rx slot.

		 * The feedback is captured for each codec individually.

		 * Hence all 4 codecs use 1 Tx slot each for feedback.

 Cometlake digital audio interface glue - connects codec <--> CPU */

 WL */ COMP_CODEC("i2c-10EC1011:00", CML_RT1011_CODEC_DAI),

 WR */ COMP_CODEC("i2c-10EC1011:01", CML_RT1011_CODEC_DAI)));

 WL */ COMP_CODEC("i2c-10EC1011:00", CML_RT1011_CODEC_DAI),

 WR */ COMP_CODEC("i2c-10EC1011:01", CML_RT1011_CODEC_DAI),

 TL */ COMP_CODEC("i2c-10EC1011:02", CML_RT1011_CODEC_DAI),

 TR */ COMP_CODEC("i2c-10EC1011:03", CML_RT1011_CODEC_DAI)));

 Back End DAI links */

 SSP0 - Codec */

		/*

		 * SSP1 - Codec : added to end of list ensuring

		 * reuse of common topologies for other end points

		 * and changing only SSP1's codec

 Capture stream provides Feedback */

 single configuration structure for 2 and 4 channels */

 Cometlake audio machine driver for RT1011 and RT5682 */

 when 4 speaker is available, update codec config */

 set platform name for each dailink */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright(c) 2019-2020 Intel Corporation.

/*

 * Intel SOF Machine Driver with Realtek rt5682 Codec

 * and speaker codec MAX98357A or RT1015.

 BT audio offload: reserve 3 bits for future */

 Default: MCLK on, MCLK 19.2M, SSP0  */

		/*

		 * Dooly is hatch family but using rt1015 amp so it

		 * requires a quirk before "Google_Hatch".

 dai_link id is 1:1 mapped to the PCM device */

 need to enable ASRC function for 24MHz mclk rate */

		/*

		 * The firmware might enable the clock at

		 * boot (this information may or may not

		 * be reflected in the enable clock register).

		 * To change the rate we must disable the clock

		 * first to cover these cases. Due to common

		 * clock framework restrictions that do not allow

		 * to disable a clock that has not been enabled,

		 * we need to enable the clock first.

	/*

	 * Headset buttons map to the google Reference headset.

	 * These can be configured by userspace.

 get the tplg configured mclk. */

 mclk from the quirk is the first choice */

 use default mclk if not specified correct in topology */

 Configure pll for codec */

 Configure sysclk for codec */

	/*

	 * slot_width should equal or large than data length, set them

	 * be the same

 Configure sysclk for codec */

 name might be overridden during probe */

 HDMI is not supported by SOF on Baytrail/CherryTrail */

 Disable Left and Right Spk pin after boot */

 HP jack connectors - unknown if we have jack detection */

 other jacks */

 digital mics */

 Don't need to add routes if widget addition failed */

 sof audio machine driver for rt5682 codec */

 the sof- prefix is added by the core */

 codec SSP */

		/*

		 * Currently, On SKL+ platforms MCLK will be turned off in sof

		 * runtime suspended, and it will go into runtime suspended

		 * right after playback is stop. However, rt5682 will output

		 * static noise if sysclk turns off during playback. Set

		 * ignore_pmdown_time to power down rt5682 immediately and

		 * avoid the noise.

		 * It can be removed once we can control MCLK by driver.

 dmic */

 at least we have dmic01 */

 set up 2 BE links at most */

 HDMI */

 speaker amp */

 feedback stream */

 BT audio offload */

	/* A speaker amp might not be present when the quirk claims one is.

	 * Detect this via whether the machine driver match includes quirk_data.

 Detect the headset codec variant */

 default quirk for legacy cpu */

 default number of HDMI DAI's */

 need to get main clock from pmc */

 compute number of dai links */

 set platform name for each dailink */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2020 Intel Corporation

/*

 *  sof_sdw_rt1308 - Helpers to handle RT1308 from generic machine driver

/*

 * dapm routes for rt1308 will be registered dynamically according

 * to the number of rt1308 used. The first two entries will be registered

 * for one codec case, and the last two entries are also registered

 * if two 1308s are used.

 Set rt1308 pll */

 Set rt1308 sysclk */

 machine stream operations */

 Count amp number and do init on playback link only. */

		/*

		 * if two 1308s are in one dai link, the init function

		 * in this dai link will be first set for the first speaker,

		 * and it should be reset to initialize all speakers when

		 * the second speaker is found.

 SPDX-License-Identifier: GPL-2.0-only



 ASoC DPCM Machine driver for Baytrail / Cherrytrail platforms with

 CX2072X codec



 External Speakers: HFL, HFR */

 Headset jack detection DAPM pins */

 set the default PLL rate, the clock is handled by the codec driver */

 The DSP will covert the FE rate to 48k, stereo, 24bits */

 set SSP2 to 24-bit */

	/*

	 * Default mode for SSP configuration is TDM 4 slot, override config

	 * with explicit setting to I2S 2ch 24-bit. The word length is set with

	 * dai_set_tdm_slot() since there is no other API exposed

 back ends */

 use space before codec name to simplify card ID, and simplify driver name */

 card name will be 'sof-bytcht cx2072x' */

 card name will be used for driver name */

 SoC card */

 fix index of codec dai */

 fixup codec name based on HID */

 override plaform name, if required */

 set card and driver name */

 set pm ops */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright(c) 2018 Intel Corporation.

/*

 * Intel Kabylake I2S Machine Driver with MAX98927, MAX98373 & DA7219 Codecs

 *

 * Modified from:

 *   Intel Kabylake I2S Machine driver supporting MAX98927 and

 *   RT5663 codecs

 Configure sysclk for codec */

 speaker */

 other jacks */

 CODEC BE connections */

 IV feedback path */

 AEC capture path */

 DMIC */

 other jacks */

 CODEC BE connections */

	/*

	 * The following loop will be called only for playback stream

	 * In this platform, there is only one playback device on every SSP

	/*

	 * This following loop will be called only for capture stream

	 * In this platform, there is only one capture device on every SSP

	/*

	 * The above 2 loops are mutually exclusive based on the stream direction,

	 * thus rtd_dpcm variable will never be overwritten

	/*

	 * The ADSP will convert the FE rate to 48k, stereo, 24 bit

	/*

	 * The speaker on the SSP0 supports S16_LE and not S24_LE.

	 * thus changing the mask here

	/*

	 * Headset buttons map to the google Reference headset.

	 * These can be configured by userspace.

	/*

	 * On this platform for PCM device we support,

	 * 48Khz

	 * stereo

	 * 16 bit audio

	/*

	 * set BE channel constraint as user FE channels

 Left */

 For Right */

 Left */	COMP_CODEC(MAX98927_DEV0_NAME, MAX98927_CODEC_DAI),

 For Right */	COMP_CODEC(MAX98927_DEV1_NAME, MAX98927_CODEC_DAI)));

 kabylake digital audio interface glue - connects codec <--> CPU */

 Front End DAI links */

 Back End DAI links */

 SSP0 - Codec */

 SSP1 - Codec */

 kabylake digital audio interface glue - connects codec <--> CPU */

 Front End DAI links */

 Back End DAI links */

 SSP0 - Codec */

 kabylake audio machine driver for SPT + DA7219 */

 kabylake audio machine driver for Maxim98927 */

 Update codecs for SSP0 with max98373 codec info */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only



 Copyright(c) 2020 Intel Corporation. All rights reserved.

/*

 * Current only 2-amp configuration is supported for rt1011

 speaker */

/*

 * Make sure device's Unique ID follows this configuration:

 *

 * Two speakers:

 *         0: left, 1: right

 * Four speakers:

 *         0: Woofer left, 1: Woofer right

 *         2: Tweeter left, 3: Tweeter right

 100 Fs to drive 24 bit data */

/*

 * rt1015:  i2c mode driver for ALC1015 and ALC1015Q

 * rt1015p: auto-mode driver for ALC1015, ALC1015Q, and ALC1015Q-VB

 *

 * For stereo output, there are always two amplifiers on the board.

 * However, the ACPI implements only one device instance (UID=0) if they

 * are sharing the same enable pin. The code will detect the number of

 * device instance and use corresponding DAPM structures for

 * initialization.

 speaker */

 speaker */

 reserved for debugging purpose */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  bytcht_nocodec.c - ASoc Machine driver for MinnowBoard Max and Up

 *  to make I2S signals observable on the Low-Speed connector. Audio codec

 *  is not managed by ASoC/DAPM

 *

 *  Copyright (C) 2015-2017 Intel Corp

 *

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 The DSP will convert the FE rate to 48k, stereo, 24bits */

 set SSP2 to 24-bit */

	/*

	 * Default mode for SSP configuration is TDM 4 slot, override config

	 * with explicit setting to I2S 2ch 24-bit. The word length is set with

	 * dai_set_tdm_slot() since there is no other API exposed

 CODEC<->CODEC link */

 back ends */

 SoC card */

 register the soc card */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  bytcht-da7213.c - ASoc Machine driver for Intel Baytrail and

 *             Cherrytrail-based platforms, with Dialog DA7213 codec

 *

 *  Copyright (C) 2017 Intel Corporation

 *  Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>

 *

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 Assume Mic1 is linked to Headset and Mic2 to on-board mic */

 SOC-codec link */

 The DSP will convert the FE rate to 48k, stereo, 24bits */

 set SSP2 to 24-bit */

	/*

	 * Default mode for SSP configuration is TDM 4 slot, override config

	 * with explicit setting to I2S 2ch 24-bit. The word length is set with

	 * dai_set_tdm_slot() since there is no other API exposed

 CODEC<->CODEC link */

 back ends */

 use space before codec name to simplify card ID, and simplify driver name */

 card name will be 'sof-bytcht da7213' */

 card name will be used for driver name */

 SoC card */

 fix index of codec dai */

 fixup codec name based on HID */

 override plaform name, if required */

 set card and driver name */

 set pm ops */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2020 Intel Corporation

/*

 * ehl_rt5660 - ASOC Machine driver for Elkhart Lake platforms

 * with rt5660 codec

 There are two MICBIAS in rt5660, each for one MIC */

 dai_link id is 1:1 mapped to the PCM device */

 back ends */

 SoC card */

 If hdmi codec is not supported, switch to use dummy codec */

	/*

	 * if HDMI is not enabled in kernel config, or

	 * hdmi codec is not supported

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  cht-bsw-max98090.c - ASoc Machine driver for Intel Cherryview-based

 *  platforms Cherrytrail and Braswell, with max98090 & TI codec.

 *

 *  Copyright (C) 2015 Intel Corp

 *  Author: Fang, Yang A <yang.a.fang@intel.com>

 *  This file is modified from cht_bsw_rt5645.c

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 See the comment in snd_cht_mc_probe() */

		/*

		 * The jack has already been created in the

		 * cht_max98090_headset_init() function.

		/*

		 * flag error but don't bail if jack detect is broken

		 * due to platform issues or bad BIOS/configuration

 See the comment in snd_cht_mc_probe() */

	/*

	 * The firmware might enable the clock at

	 * boot (this information may or may not

	 * be reflected in the enable clock register).

	 * To change the rate we must disable the clock

	 * first to cover these cases. Due to common

	 * clock framework restrictions that do not allow

	 * to disable a clock that has not been enabled,

	 * we need to enable the clock first.

 The DSP will covert the FE rate to 48k, stereo, 24bits */

 set SSP2 to 16-bit */

	/*

	 * TI supports 4 butons headset detection

	 * KEY_MEDIA

	 * KEY_VOICECOMMAND

	 * KEY_VOLUMEUP

	 * KEY_VOLUMEDOWN

 back ends */

 use space before codec name to simplify card ID, and simplify driver name */

 card name will be 'sof-bytcht max98090 */

 card name will be used for driver name */

 SoC card */

 Banjo model Chromebook */

 Candy model Chromebook */

 Clapper model Chromebook */

 Cyan model Chromebook */

 Enguarde model Chromebook */

 Glimmer model Chromebook */

 Gnawty model Chromebook (Acer Chromebook CB3-111) */

 Heli model Chromebook */

 Kip model Chromebook */

 Ninja model Chromebook */

 Orco model Chromebook */

 Quawks model Chromebook */

 Rambi model Chromebook */

 Squawks model Chromebook */

 Sumo model Chromebook */

 Swanky model Chromebook (Toshiba Chromebook 2) */

 Winky model Chromebook */

 no need probe TI jack detection chip */

 override plaform name, if required */

 register the soc card */

	/*

	 * Boards which have the MAX98090's clk connected to clk_0 do not seem

	 * to like it if we muck with the clock. If we disable the clock when

	 * it is unused we get "max98090 i2c-193C9890:00: PLL unlocked" errors

	 * and the PLL never seems to lock again.

	 * So for these boards we enable it here once and leave it at that.

 set card and driver name */

 set pm ops */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2020 Intel Corporation

/*

 *  sof_sdw - ASOC Machine driver for Intel SoundWire platforms

 CometLake devices */

 early version of SKU 09C6 */

 IceLake devices */

 TigerLake devices */

 Dell XPS 9710 */

		/*

		 * this entry covers multiple HP SKUs. The family name

		 * does not seem robust enough, so we use a partial

		 * match that ignores the product name suffix

		 * (e.g. 15-eb1xxx, 14t-ea000 or 13-aw2xxx)

 NUC15 'Bishop County' LAPBC510 and LAPBC710 skews */

 TigerLake-SDCA devices */

 AlderLake devices */

 name might be overridden during probe */

 these wrappers are only needed to avoid typecast compilation errors */

 Find stream from first CPU DAI */

 Find stream from first CPU DAI */

 Find stream from first CPU DAI */

	/*

	 * force DAI link to use same ID as RT715 and DMIC

	 * to reuse topologies

 generic codec mockup */

 headset codec mockup */

 amplifier mockup */

		/*

		 * A codec info is for all sdw version with the part id if

		 * version_id is not specified in the codec info.

/*

 * get BE dailink number and CPU DAI number based on sdw link adr.

 * Since some sdw slaves may be aggregated, the CPU DAI number

 * may be larger than the number of BE dailinks.

 count DAI number for playback and capture */

 count BE for each non-aggregated slave or group */

 skip itself */

 sanity check */

		/*

		 * Initialize the codec. If codec is part of an aggregated

		 * group (group_id>0), initialize all codecs belonging to

		 * same group.

 The group_id is > 0 iff the codec is aggregated */

/*

 * check endpoint status in slaves and gather link ID for all slaves in

 * the same group to generate different CPU DAI. Now only support

 * one sdw link with all slaves set with only single group id.

 *

 * one slave on one sdw link with aggregated = 0

 * one sdw BE DAI <---> one-cpu DAI <---> one-codec DAI

 *

 * two or more slaves on one sdw link with aggregated = 0

 * one sdw BE DAI  <---> one-cpu DAI <---> multi-codec DAIs

 *

 * multiple links with multiple slaves with aggregated = 1

 * one sdw BE DAI  <---> 1 .. N CPU DAIs <----> 1 .. N codec DAIs

 make sure the link mask has a single bit set */

 gather other link ID of slaves in the same group */

 make sure the link mask has a single bit set */

	/*

	 * indicate CPU DAIs for this group have been generated

	 * to avoid generating CPU DAIs for this group again.

 generate codec name on different links in the same group */

 skip the link excluded by this processed group */

 check next link to create codec dai in the processed group */

 find codec info to create BE DAI */

 create stream name according to first link id */

		/*

		 * generate CPU DAI name base on the sdw link ID and

		 * PIN ID with offset of 2 according to sdw dai driver.

		/*

		 * SoundWire DAILINKs use 'stream' functions and Bank Switch operations

		 * based on wait_for_completion(), tag them as 'nonatomic'.

/*

 * DAI link ID of SSP & DMIC & HDMI are based on last

 * link ID used by sdw link. Since be_id may be changed

 * in init func of sdw codec, it is not equal to be_id

 generate DAI links by each sdw link */

 allocate codec conf, will be populated when dailinks are created */

 reset amp_num to ensure amp_num++ starts from 0 in each probe */

	/*

	 * on generic tgl platform, I2S or sdw mode is supported

	 * based on board rework. A ACPI device is registered in

	 * system only when I2S mode is supported, not sdw mode.

	 * Here check ACPI ID to confirm I2S is supported.

 enable dmic01 & dmic16k */

 allocate BE dailinks */

 allocated CPU DAIs */

 SDW */

	/*

	 * SoundWire Slaves aggregated in the same group may be

	 * located on different hardware links. Clear array to indicate

	 * CPU DAIs for this group have not been generated.

 generate DAI links by each sdw link */

 this group has been generated */

 non-sdw DAI follows sdw DAI */

 get BE ID for non-sdw DAI */

 SSP */

 dmic */

 DMIC only supports capture

 DMIC only supports capture

 don't call sof_sdw_dmic_init() twice */

 HDMI */

 HDMI only supports playback

 SoC card */

	/*

	 * the default amp_num is zero for each codec and

	 * amp_num will only be increased for active amp

	 * codecs on used platform

 Register the card */

		/*

		 * We don't need to call .exit function if there is no matched

		 * dai link found.

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2020 Intel Corporation

/*

 *  sof_sdw_rt5682 - Helpers to handle RT5682 from generic machine driver

Headphones*/

	/*

	 * headset should be initialized once.

	 * Do it with dai link for playback.

 SPDX-License-Identifier: GPL-2.0-only

 Copyright(c) 2021 Intel Corporation.

/*

 * Intel SOF Machine Driver with Cirrus Logic CS42L42 Codec

 * and speaker codec MAX98357A

 Default: SSP2 */

 dai_link id is 1:1 mapped to the PCM device */

	/*

	 * Headset buttons map to the google Reference headset.

	 * These can be configured by userspace.

 BCLK freq */

 Configure sysclk for codec */

 name might be overridden during probe */

 HP jack connectors - unknown if we have jack detection */

 other jacks */

 digital mics */

 Don't need to add routes if widget addition failed */

 sof audio machine driver for cs42l42 codec */

 the sof- prefix is added by the core */

 speaker amp */

 codec SSP */

 dmic */

 at least we have dmic01 */

 set up 2 BE links at most */

 HDMI */

 caught here if it's not used as terminator in macro */

 default number of HDMI DAI's */

 compute number of dai links */

 set platform name for each dailink */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright(c) 2017-18 Intel Corporation.

/*

 * Intel Kabylake I2S Machine Driver with MAX98357A & DA7219 Codecs

 *

 * Modified from:

 *   Intel Kabylake I2S Machine driver supporting MAXIM98927 and

 *   RT5663 codecs

 speaker */

 other jacks */

 CODEC BE connections */

 DMIC */

 The ADSP will convert the FE rate to 48k, stereo */

 set SSP to 24 bit */

 Configure sysclk for codec */

	/*

	 * Headset buttons map to the google Reference headset.

	 * These can be configured by userspace.

	/*

	 * On this platform for PCM device we support,

	 * 48Khz

	 * stereo

	 * 16 bit audio

	/*

	 * set BE channel constraint as user FE channels

 kabylake digital audio interface glue - connects codec <--> CPU */

 Front End DAI links */

 Back End DAI links */

 SSP0 - Codec */

 SSP1 - Codec */

 kabylake audio machine driver for SPT + DA7219 */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2020 Intel Corporation

/*

 *  sof_sdw_rt1316 - Helpers to handle RT1316 from generic machine driver

/*

 * dapm routes for rt1316 will be registered dynamically according

 * to the number of rt1316 used. The first two entries will be registered

 * for one codec case, and the last two entries are also registered

 * if two 1316s are used.

 Count amp number and do init on playback link only. */

		/*

		 * if two 1316s are in one dai link, the init function

		 * in this dai link will be first set for the first speaker,

		 * and it should be reset to initialize all speakers when

		 * the second speaker is found.

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2020 Intel Corporation

/*

 *  sof_sdw_rt715_sdca - Helpers to handle RT715-SDCA from generic machine driver

	/*

	 * DAI ID is fixed at SDW_DMIC_DAI_ID for 715-SDCA to

	 * keep sdw DMIC and HDMI setting static in UCM

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  cht-bsw-nau8824.c - ASoc Machine driver for Intel Cherryview-based

 *          platforms Cherrytrail and Braswell, with nau8824 codec.

 *

 *  Copyright (C) 2018 Intel Corp

 *  Copyright (C) 2018 Nuvoton Technology Corp

 *

 *  Author: Wang, Joseph C <joequant@gmail.com>

 *  Co-author: John Hsu <KCHSU0@nuvoton.com>

 *  This file is based on cht_bsw_rt5672.c and cht-bsw-max98090.c

	/* NAU88L24 supports 4 butons headset detection

	 * KEY_PLAYPAUSE

	 * KEY_VOICECOMMAND

	 * KEY_VOLUMEUP

	 * KEY_VOLUMEDOWN

 The DSP will covert the FE rate to 48k, stereo, 24bits */

 set SSP2 to 24-bit */

 TDM 4 slots 24 bit, set Rx & Tx bitmask to 4 active slots */

 Front End DAI links */

 Back End DAI links */

 SSP2 - Codec */

 use space before codec name to simplify card ID, and simplify driver name */

 card name will be 'sof-bytcht nau8824 */

 card name will be used for driver name */

 SoC card */

 override plaform name, if required */

 set card and driver name */

 set pm ops */

 register the soc card */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2020 Intel Corporation

/*

 *  sof_sdw_hdmi - Helpers to handle HDMI from generic machine driver

 dai_link id is 1:1 mapped to the PCM device */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2020 Intel Corporation

/*

 *  sof_sdw_rt715 - Helpers to handle RT715 from generic machine driver

	/*

	 * DAI ID is fixed at SDW_DMIC_DAI_ID for 715 to

	 * keep sdw DMIC and HDMI setting static in UCM

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2020 Intel Corporation



 sof_sdw_max98373 - Helpers to handle 2x MAX98373

 codec devices from generic machine driver

 set spk pin by playback only */

 according to soc_pcm_prepare dai link prepare is called first */

 according to soc_pcm_hw_free dai link free is called first */

 Disable Left and Right Spk pin after boot */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2020 Intel Corporation

/*

 *  sof_sdw_rt711_sdca - Helpers to handle RT711-SDCA from generic machine driver

/*

 * Note this MUST be called before snd_soc_register_card(), so that the props

 * are in place before the codec component driver's probe function parses them.

 Headphones */

	/*

	 * headset should be initialized once.

	 * Do it with dai link for playback.

 SPDX-License-Identifier: GPL-2.0-only

 Copyright(c) 2018 Intel Corporation.

/*

 * Intel Geminilake I2S Machine Driver with MAX98357A & RT5682 Codecs

 *

 * Modified from:

 *   Intel Apollolake I2S Machine driver

 The platform clock outputs 19.2Mhz clock to codec as I2S MCLK */

 HP jack connectors - unknown if we have jack detection */

 speaker */

 other jacks */

 digital mics */

 CODEC BE connections */

 DMIC */

 The ADSP will convert the FE rate to 48k, stereo */

 set SSP to 24 bit */

 Configure sysclk for codec */

	/*

	 * Headset buttons map to the google Reference headset.

	 * These can be configured by userspace.

 Set valid bitmask & configuration for I2S in 24 bit */

	/*

	 * set BE channel constraint as user FE channels

 geminilake digital audio interface glue - connects codec <--> CPU */

 Front End DAI links */

 Back End DAI links */

 SSP1 - Codec */

 SSP2 - Codec */

 geminilake audio machine driver for SPT + RT5682 */

 Detect the headset codec variant */

 ALC5682I-VS is detected */

 update the dai link to use rt5682s codec */

 override plaform name, if required */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Intel Broxton-P I2S Machine Driver

 *

 * Copyright (C) 2016, Intel Corporation. All rights reserved.

 *

 * Modified from:

 *   Intel Skylake I2S Machine driver

 HP jack connectors - unknown if we have jack detection */

 other jacks */

 digital mics */

 CODEC BE connections */

 DMIC */

 speaker */

 Speaker */

 The ADSP will convert the FE rate to 48k, stereo */

 set SSP to 24 bit */

 Configure sysclk for codec */

	/*

	 * Headset buttons map to the google Reference headset.

	 * These can be configured by userspace.

	/*

	 * On this platform for PCM device we support,

	 * 48Khz

	 * stereo

	 * 16 bit audio

 broxton digital audio interface glue - connects codec <--> CPU */

 Back End DAI */

 Left */	COMP_CODEC(MAX98390_DEV0_NAME, "max98390-aif1"),

 Right */	COMP_CODEC(MAX98390_DEV1_NAME, "max98390-aif1")));

 Front End DAI links */

 Back End DAI links */

 SSP5 - Codec */

 SSP1 - Codec */

 broxton audio machine driver for SPT + da7219 */

 Fixup the SSP entries for geminilake */

 MAXIM_CODEC is connected to SSP1. */

 DIALOG_CODE is connected to SSP2 */

 MAXIM_CODEC is connected to SSP1. */

 DIALOG_CODEC is connected to SSP0 */

 override plaform name, if required */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only



 Copyright(c) 2020 Intel Corporation. All rights reserved.

 speaker */

 For Right */

 For Left */

 DEV0 tdm slot configuration */

 DEV1 tdm slot configuration */

 set spk pin by playback only */

/*

 * Maxim MAX98357A/MAX98360A

 speaker */

 Don't need to add routes if widget addition failed */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  cht_bsw_rt5672.c - ASoc Machine driver for Intel Cherryview-based platforms

 *                     Cherrytrail and Braswell, with RT5672 codec.

 *

 *  Copyright (C) 2014 Intel Corp

 *  Author: Subhransu S. Prusty <subhransu.s.prusty@intel.com>

 *          Mengdong Lin <mengdong.lin@intel.com>

 The platform clock #3 outputs 19.2Mhz clock to codec as I2S MCLK */

 Headset jack detection DAPM pins */

 set codec PLL source to the 19.2MHz platform clock (MCLK) */

 set codec sysclk source to PLL */

		/* Set codec sysclk source to its internal clock because codec

		 * PLL will be off when idle and MCLK will also be off by ACPI

		 * when codec is runtime suspended. Codec needs clock for jack

		 * detection and button press.

 set codec PLL source to the 19.2MHz platform clock (MCLK) */

 set codec sysclk source to PLL */

	/* Select codec ASRC clock source to track I2S1 clock, because codec

	 * is in slave mode and 100fs I2S format (BCLK = 100 * LRCLK) cannot

	 * be supported by RT5672. Otherwise, ASRC will be disabled and cause

	 * noise.

		/*

		 * The firmware might enable the clock at

		 * boot (this information may or may not

		 * be reflected in the enable clock register).

		 * To change the rate we must disable the clock

		 * first to cover these cases. Due to common

		 * clock framework restrictions that do not allow

		 * to disable a clock that has not been enabled,

		 * we need to enable the clock first.

 The DSP will covert the FE rate to 48k, stereo, 24bits */

 set SSP0 to 16-bit */

 set SSP2 to 24-bit */

	/*

	 * The default mode for the cpu-dai is TDM 4 slot. The default mode

	 * for the codec-dai is I2S. So we need to either set the cpu-dai to

	 * I2S mode to match the codec-dai, or set the codec-dai to TDM 4 slot

	 * (or program both to yet another mode).

	 * One board, the Lenovo Miix 2 10, uses not 1 but 2 codecs connected

	 * to SSP2. The second piggy-backed, output-only codec is inside the

	 * keyboard-dock (which has extra speakers). Unlike the main rt5672

	 * codec, we cannot configure this codec, it is hard coded to use

	 * 2 channel 24 bit I2S. For this to work we must use I2S mode on this

	 * board. Since we only support 2 channels anyways, there is no need

	 * for TDM on any cht-bsw-rt5672 designs. So we use I2S 2ch everywhere.

 Front End DAI links */

 Back End DAI links */

 SSP2 - Codec */

 use space before codec name to simplify card ID, and simplify driver name */

 card name will be 'sof-bytcht rt5672' */

 card name will be used for driver name */

 SoC card */

 find index of codec dai */

 fixup codec name based on HID */

 Use SSP0 on Bay Trail CR devices */

 override plaform name, if required */

 set card and driver name */

 set pm ops */

 register the soc card */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Intel Kabylake I2S Machine Driver with MAXIM98927

 * RT5514 and RT5663 Codecs

 *

 * Copyright (C) 2017, Intel Corporation. All rights reserved.

 *

 * Modified from:

 *   Intel Kabylake I2S Machine driver supporting MAXIM98927 and

 *   RT5663 codecs

	/*

	 * MCLK/SCLK need to be ON early for a successful synchronization of

	 * codec internal clock. And the clocks are turned off during

	 * POST_PMD after the stream is stopped.

 Enable MCLK */

 Enable SCLK */

 Headphones */

 speaker */

 other jacks */

 CODEC BE connections */

 IV feedback path */

 DMIC */

	/*

	 * Headset buttons map to the google Reference headset.

	 * These can be configured by userspace.

	/*

	 * On this platform for PCM device we support,

	 * 48Khz

	 * stereo

	 * 16 bit audio

	/*

	 * The following loop will be called only for playback stream

	 * In this platform, there is only one playback device on every SSP

	/*

	 * This following loop will be called only for capture stream

	 * In this platform, there is only one capture device on every SSP

	/*

	 * The above 2 loops are mutually exclusive based on the stream direction,

	 * thus rtd_dpcm variable will never be overwritten

	/*

	 * The ADSP will convert the FE rate to 48k, stereo, 24 bit

	/*

	 * The speaker on the SSP0 supports S16_LE and not S24_LE.

	 * thus changing the mask here

 use ASRC for internal clocks, as PLL rate isn't multiple of BCLK */

 Left */ COMP_CODEC(MAXIM_DEV0_NAME, KBL_MAXIM_CODEC_DAI),

 Right */COMP_CODEC(MAXIM_DEV1_NAME, KBL_MAXIM_CODEC_DAI),

 dmic */ COMP_CODEC(RT5514_DEV_NAME, KBL_REALTEK_DMIC_CODEC_DAI)));

 kabylake digital audio interface glue - connects codec <--> CPU */

 Front End DAI links */

 Back End DAI links */

 single Back end dai for both max speakers and dmic */

 SSP0 - Codec */

	/*

	 * It's required to control mclk directly in the set_bias_level

	 * function for rt5514 codec or the recording function could

	 * break.

 mclk is already enabled in FW */

/*

 * kabylake audio machine driver for  MAX98927 + RT5514 + RT5663

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Intel Kabylake I2S Machine Driver with MAXIM98927

 * and RT5663 Codecs

 *

 * Copyright (C) 2017, Intel Corporation. All rights reserved.

 *

 * Modified from:

 *   Intel Skylake I2S Machine driver

	/*

	 * MCLK/SCLK need to be ON early for a successful synchronization of

	 * codec internal clock. And the clocks are turned off during

	 * POST_PMD after the stream is stopped.

 Enable MCLK */

 Enable SCLK */

 HP jack connectors - unknown if we have jack detection */

 speaker */

 other jacks */

 CODEC BE connections */

 IV feedback path */

 DMIC */

 other jacks */

 CODEC BE connections */

	/*

	 * Headset buttons map to the google Reference headset.

	 * These can be configured by userspace.

	/*

	 * On this platform for PCM device we support,

	 * 48Khz

	 * stereo

	 * 16 bit audio

	/*

	 * The following loop will be called only for playback stream

	 * In this platform, there is only one playback device on every SSP

	/*

	 * This following loop will be called only for capture stream

	 * In this platform, there is only one capture device on every SSP

	/*

	 * The above 2 loops are mutually exclusive based on the stream direction,

	 * thus rtd_dpcm variable will never be overwritten

	/*

	 * The ADSP will convert the FE rate to 48k, stereo, 24 bit

	/*

	 * The speaker on the SSP0 supports S16_LE and not S24_LE.

	 * thus changing the mask here

 use ASRC for internal clocks, as PLL rate isn't multiple of BCLK */

			/*

			 * Use channel 4 and 5 for the first amp

			/*

			 * Use channel 6 and 7 for the second amp

 Left */	COMP_CODEC(MAXIM_DEV0_NAME, KBL_MAXIM_CODEC_DAI),

 Right */	COMP_CODEC(MAXIM_DEV1_NAME, KBL_MAXIM_CODEC_DAI)));

 kabylake digital audio interface glue - connects codec <--> CPU */

 Front End DAI links */

 Back End DAI links */

 SSP0 - Codec */

 SSP1 - Codec */

 Front End DAI links */

 Back End DAI links */

 SSP1 - Codec */

 kabylake audio machine driver for SPT + RT5663 */

 kabylake audio machine driver for RT5663 */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2018-2020, Intel Corporation



 sof-wm8804.c - ASoC machine driver for Up and Up2 board

 based on WM8804/Hifiberry Digi+

 This is fixed on this board */

 use 44.1 kHz root frequency */

		/*

		 * ensure both GPIOs are LOW first, then drive the

		 * relevant one to HIGH

 set sampling frequency status bits */

 machine stream operations */

 back ends */

 SoC card */

 sof- prefix added automatically */

 i2c-<HID>:00 with HID being 8 chars */

/*

 * to control the HifiBerry Digi+ PRO, it's required to toggle GPIO to

 * select the clock source. On the Up2 board, this means

 * Pin29/BCM5/Linux GPIO 430 and Pin 31/BCM6/ Linux GPIO 404.

 *

 * Using the ACPI device name is not very nice, but since we only use

 * the value for the Up2 board there is no risk of conflict with other

 * platforms.

 .dev_id is set during probe */

		/*

		 * The gpios are required for specific boards with

		 * local oscillators, and optional in other cases.

		 * Since we can't identify when they are needed, use

		 * the GPIO as non-optional

 fix index of codec dai */

 fixup codec name based on HID */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2020 Intel Corporation

/*

 *  sof_sdw_rt711 - Helpers to handle RT711 from generic machine driver

/*

 * Note this MUST be called before snd_soc_register_card(), so that the props

 * are in place before the codec component driver's probe function parses them.

 Headphones */

	/*

	 * headset should be initialized once.

	 * Do it with dai link for playback.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Intel Skylake I2S Machine Driver

 *

 * Copyright (C) 2014-2015, Intel Corporation. All rights reserved.

 *

 * Modified from:

 *   Intel Broadwell Wildcatpoint SST Audio

 *

 *   Copyright (C) 2013, Intel Corporation. All rights reserved.

 Headset jack detection DAPM pins */

 speaker */

 HP jack connectors - unknown if we have jack deteck */

 other jacks */

 digital mics */

 CODEC BE connections */

	/*

	 * on this platform for PCM device we support,

	 *	48Khz

	 *	stereo

	 *	16 bit audio

 The output is 48KHz, stereo, 16bits */

 set SSP0 to 24 bit */

 skylake digital audio interface glue - connects codec <--> CPU */

 Front End DAI links */

 Back End DAI links */

 SSP0 - Codec */

 skylake audio machine driver for SPT + RT286S */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Intel Broadwell Wildcatpoint SST Audio

 *

 * Copyright (C) 2013, Intel Corporation. All rights reserved.

 Headset jack detection DAPM pins */

 speaker */

 HP jack connectors - unknown if we have jack deteck */

 other jacks */

 digital mics */

 CODEC BE connections */

 The ADSP will covert the FE rate to 48k, stereo */

 set SSP0 to 16 bit */

 Board supports stereo configuration only */

 broadwell digital audio interface glue - connects codec <--> CPU */

 Front End DAI links */

 Back End DAI links */

 SSP0 - Codec */

 use space before codec name to simplify card ID, and simplify driver name */

 card name will be 'sof-bdw rt286' */

 card name will be used for driver name */

 broadwell audio machine driver for WPT + RT286S */

 override plaform name, if required */

 set card and driver name */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright(c) 2015-18 Intel Corporation.

/*

 * Common functions used in different Intel machine drivers

 skl_hda_digital audio interface glue - connects codec <--> CPU */

 Back End DAI links */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  bytcr_rt5651.c - ASoc Machine driver for Intel Byt CR platform

 *  (derived from bytcr_rt5640.c)

 *

 *  Copyright (C) 2015 Intel Corp

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 default is using AIF1  */

 jack-detect-source + inv + dmic-en + ovcd-th + -sf + terminating entry */

 Default: jack-detect on JD1_1, internal mic on in2, headsetmic on in3 */

 Configure the PLL before selecting it */

		/*

		 * Set codec clock source to internal clock before

		 * turning off the platform clock. Codec needs clock

		 * for Jack detection and button press

 lowercase for rt5651 */

 Chuwi Hi8 Pro (CWI513) */

 Chuwi Vi8 Plus (CWI519) */

 Complet Electro Serv MY8307 */

		/* I.T.Works TW701, Ployer Momo7w and Trekstor ST70416-6

			/* Partial match for all of itWORKS.G.WI71C.JGBMRBA,

 Jumper EZpad 7 */

 Jumper12x.WJ2012.bsBKRCP05 with the version dropped */

 KIANO SlimNote 14.2 */

 Minnowboard Max B3 */

 Minnowboard Turbot */

 Point of View mobii wintab p1006w (v1.0) */

 Note 105b is Foxcon's USB/PCI vendor id */

 VIOS LTH17 */

 Yours Y8W81 (and others using the same mainboard) */

 Partial match for all devs with a W86C mainboard */

/*

 * Note this MUST be called before snd_soc_register_card(), so that the props

 * are in place before the codec component driver's probe function parses them.

 put_device(i2c_dev) is handled in caller */

 Start with RC clk for jack-detect (we disable MCLK below) */

	/*

	 * The firmware might enable the clock at boot (this information

	 * may or may not be reflected in the enable clock register).

	 * To change the rate we must disable the clock first to cover

	 * these cases. Due to common clock framework restrictions that

	 * do not allow to disable a clock that has not been enabled,

	 * we need to enable the clock first.

 The DSP will covert the FE rate to 48k, stereo */

 set SSP0 to 16-bit */

 set SSP2 to 24-bit */

	/*

	 * Default mode for SSP configuration is TDM 4 slot, override config

	 * with explicit setting to I2S 2ch. The word length is set with

	 * dai_set_tdm_slot() since there is no other API exposed

 CODEC<->CODEC link */

 back ends */

 SoC card */

 = "bytcr-rt5651-*-spk-*-mic[-swapped-hp]" */

 = "cfg-spk:* cfg-mic:*" */

 use space before codec name to simplify card ID, and simplify driver name */

 card name will be 'sof-bytcht rt5651' */

 card name will be used for driver name */

	/*

	 * Some boards have I2cSerialBusV2, GpioIo, GpioInt as ACPI resources,

	 * other boards may  have I2cSerialBusV2, GpioInt, GpioIo instead.

	 * We want the GpioIo one for the ext-amp-enable-gpio.

 ACPICA seems to require 64 bit integers */

 1: AIF1, 2: AIF2 */

 usually 25MHz (0x17d7940), ignored */

 register the soc card */

 fix index of codec dai */

 fixup codec name based on HID */

	/*

	 * swap SSP0 if bytcr is detected

	 * (will be overridden if DMI quirk is detected)

		/*

		 * Baytrail CR platforms may have CHAN package in BIOS, try

		 * to find relevant routing quirk based as done on Windows

		 * platforms. We have to read the information directly from the

		 * BIOS, at this stage the card is not created and the links

		 * with the codec driver/pdata are non-existent

 format specified: 2 64-bit integers */

 no BIOS indications, assume SSP0-AIF2 connection */

 check quirks before creating card */

 Must be called before register_card, also see declaration comment. */

 Cherry Trail devices use an external amplifier enable gpio */

		/*

		 * Fall back to bit clock usage when clock is not

		 * available likely due to missing dependencies.

 override plaform name, if required */

 set card and driver name */

 set pm ops */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright(c) 2018-2020 Intel Corporation.

/*

 * Intel SOF Machine Driver for Intel platforms with TI PCM512x codec,

 * e.g. Up or Up2 with Hifiberry DAC+ HAT

 Default: SSP5 */

 dai_link id is 1:1 mapped to the PCM device */

 name might be overridden during probe */

 HDMI is not supported by SOF on Baytrail/CherryTrail */

 Speaker */

 digital mics */

 Don't need to add routes if widget addition failed */

 sof audio machine driver for pcm512x codec */

 codec SSP */

	/*

	 * capture only supported with specific versions of the Hifiberry DAC+

 dmic */

 at least we have dmic01 */

 set up 2 BE links at most */

 HDMI */

		/*

		 * topology cannot be loaded if codec is missing, so

		 * use the dummy codec if needed

 default quirk for legacy cpu */

 links are always present in topology */

 compute number of dai links */

 set platform name for each dailink */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright(c) 2015-18 Intel Corporation.

/*

 * Machine Driver for SKL+ platforms with DSP and iDisp, HDA Codecs

 digital mics */

 CODEC BE connections */

 there are two routes per iDisp output */

 topology with iDisp as the only HDA codec */

		/*

		 * rearrange the dai link array and make the

		 * dmic dai links follow idsp dai links for only

		 * num_links of dai links need to be registered

		 * to ASoC.

 topology with external and iDisp HDA codecs */

			/*

			 * all codecs are on the same bus, so it's sufficient

			 * to look up only the first one

 hdmi codec dai name starts from index 1 */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  cht-bsw-rt5645.c - ASoc Machine driver for Intel Cherryview-based platforms

 *                     Cherrytrail and Braswell, with RT5645 codec.

 *

 *  Copyright (C) 2015 Intel Corp

 *  Author: Fang, Yang A <yang.a.fang@intel.com>

 *	        N,Harshapriya <harshapriya.n@intel.com>

 *  This file is modified from cht_bsw_rt5672.c

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 default is using AIF1  */

		/* Set codec sysclk source to its internal clock because codec PLL will

		 * be off when idle and MCLK will also be off when codec is

		 * runtime suspended. Codec needs clock for jack detection and button

		 * press. MCLK is turned off with clock framework or ACPI.

 set codec PLL source to the 19.2MHz platform clock (MCLK) */

 Strago family Chromebooks */

 Select clk_i2s2_asrc as ASRC clock source */

 Select clk_i2s1_asrc as ASRC clock source */

	/*

	 * The firmware might enable the clock at

	 * boot (this information may or may not

	 * be reflected in the enable clock register).

	 * To change the rate we must disable the clock

	 * first to cover these cases. Due to common

	 * clock framework restrictions that do not allow

	 * to disable a clock that has not been enabled,

	 * we need to enable the clock first.

 The DSP will covert the FE rate to 48k, stereo, 24bits */

 set SSP0 to 16-bit */

		/*

		 * Default mode for SSP configuration is TDM 4 slot, override config

		 * with explicit setting to I2S 2ch 16-bit. The word length is set with

		 * dai_set_tdm_slot() since there is no other API exposed

 set SSP2 to 24-bit */

		/*

		 * Default mode for SSP configuration is TDM 4 slot

 TDM 4 slots 24 bit, set Rx & Tx bitmask to 4 active slots */

 CODEC<->CODEC link */

 back ends */

 use space before codec name to simplify card ID, and simplify driver name */

 card name 'sof-bytcht rt5645' */

 card name 'sof-bytcht rt5650' */

 card name will be used for driver name */

 SoC card */

 ACPICA seems to require 64 bit integers */

 1: AIF1, 2: AIF2 */

 usually 25MHz (0x17d7940), ignored */

 set correct codec name */

 fixup codec name based on HID */

	/*

	 * swap SSP0 if bytcr is detected

	 * (will be overridden if DMI quirk is detected)

		/*

		 * Baytrail CR platforms may have CHAN package in BIOS, try

		 * to find relevant routing quirk based as done on Windows

		 * platforms. We have to read the information directly from the

		 * BIOS, at this stage the card is not created and the links

		 * with the codec driver/pdata are non-existent

 format specified: 2 64-bit integers */

 no BIOS indications, assume SSP0-AIF2 connection */

 check quirks before creating card */

 override plaform name, if required */

 set card and driver name */

 set pm ops */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright(c) 2019 Intel Corporation.

/*

 * Intel SOF Machine driver for DA7219 + MAX98373/MAX98360A codec

 For MAX98373 amp */

 digital mics */

 For MAX98360A amp */

 digital mics */

 Configure sysclk for codec */

	/*

	 * Headset buttons map to the google Reference headset.

	 * These can be configured by userspace.

 vmon_slot_no = 0 imon_slot_no = 1 for TX slots */

 vmon_slot_no = 2 imon_slot_no = 3 for TX slots */

 Left */	COMP_CODEC(MAXIM_DEV0_NAME, MAX98373_CODEC_DAI),

 Right */	COMP_CODEC(MAXIM_DEV1_NAME, MAX98373_CODEC_DAI)));

 subject to be overridden during probe */

 Back End DAI links */

 IV feedback */

 By default dais[0] is configured for max98373 */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  bytcht_es8316.c - ASoc Machine driver for Intel Baytrail/Cherrytrail

 *                    platforms with Everest ES8316 SoC

 *

 *  Copyright (C) 2017 Endless Mobile, Inc.

 *  Authors: David Yang <yangxiaohua@everest-semi.com>,

 *           Daniel Drake <drake@endlessm.com>

 *

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 jd-inv + terminating entry */

	/*

	 * There is no separate speaker output instead the speakers are muxed to

	 * the HP outputs. The mux is controlled by the "Speaker Power" supply.

	/*

	 * The firmware might enable the clock at boot (this information

	 * may or may not be reflected in the enable clock register).

	 * To change the rate we must disable the clock first to cover these

	 * cases. Due to common clock framework restrictions that do not allow

	 * to disable a clock that has not been enabled, we need to enable

	 * the clock first.

 The DSP will covert the FE rate to 48k, stereo */

 set SSP0 to 16-bit */

 set SSP2 to 24-bit */

	/*

	 * Default mode for SSP configuration is TDM 4 slot, override config

	 * with explicit setting to I2S 2ch 24-bit. The word length is set with

	 * dai_set_tdm_slot() since there is no other API exposed

 back ends */

 SoC card */

 = "bytcht-es8316-*-spk-*-mic" */

 = "cfg-spk:* cfg-mic:* */

	/*

	 * Some Cherry Trail boards with an ES8316 codec have a bug in their

	 * ACPI tables where the MSSL1680 touchscreen's _PS0 and _PS3 methods

	 * wrongly also set the speaker-enable GPIO to 1/0. Testing has shown

	 * that this really is a bug and the GPIO has no influence on the

	 * touchscreen at all.

	 *

	 * The silead.c touchscreen driver does not support runtime suspend, so

	 * the GPIO can only be changed underneath us during a system suspend.

	 * This resume() function runs from a pm complete() callback, and thus

	 * is guaranteed to run after the touchscreen driver/ACPI-subsys has

	 * brought the touchscreen back up again (and thus changed the GPIO).

	 *

	 * So to work around this we pass GPIOD_FLAGS_BIT_NONEXCLUSIVE when

	 * requesting the GPIO and we set its value here to undo any changes

	 * done by the touchscreen's broken _PS0 ACPI method.

 use space before codec name to simplify card ID, and simplify driver name */

 card name will be 'sof-bytcht es8316' */

 card name will be used for driver name */

 Please keep this list alphabetically sorted */

 Irbis NB41 */

 Teclast X98 Plus II */

 fix index of codec dai */

 fixup codec name based on HID */

 override plaform name, if required */

 Check for BYTCR or other platform and setup quirks */

 On BYTCR default to SSP0, internal-mic-in2-map, mono-spk */

 Others default to internal-mic-in1-map, mono-speaker */

 get the clock */

 get speaker enable GPIO */

 see comment in byt_cht_es8316_resume() */

 set card and driver name */

 set pm ops */

 register the soc card */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2020 Intel Corporation

/*

 *  sof_sdw_dmic - Helpers to handle dmic from generic machine driver

 digital mics */

 Don't need to add routes if widget addition failed */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  bytcr_wm5102.c - ASoc Machine driver for Intel Baytrail platforms with a

 *                   Wolfson Microelectronics WM5102 codec

 *

 *  Copyright (C) 2020 Hans de Goede <hdegoede@redhat.com>

 *  Loosely based on bytcr_rt5640.c which is:

 *  Copyright (C) 2014-2020 Intel Corp

 *  Author: Subhransu S. Prusty <subhransu.s.prusty@intel.com>

 max sysclk for 4K family */

 max sysclk for 11.025K family */

 Reset FLL1 */

 Configure the FLL1 PLL before selecting it */

		/*

		 * The WM5102 has a separate 32KHz clock for jack-detect

		 * so we can disable the PLL, followed by disabling the

		 * platform clock which is the source-clock for the PLL.

	/*

	 * The Headset Mix uses MICBIAS1 or 2 depending on if a CTIA/OMTP Headset

	 * is connected, as the MICBIAS is applied after the CTIA/OMTP cross-switch.

	/*

	 * The firmware might enable the clock at boot (this information

	 * may or may not be reflected in the enable clock register).

	 * To change the rate we must disable the clock first to cover these

	 * cases. Due to common clock framework restrictions that do not allow

	 * to disable a clock that has not been enabled, we need to enable

	 * the clock first.

 The DSP will covert the FE rate to 48k, stereo */

 set SSP0 to 16-bit */

	/*

	 * Default mode for SSP configuration is TDM 4 slot, override config

	 * with explicit setting to I2S 2ch 16-bit. The word length is set with

	 * dai_set_tdm_slot() since there is no other API exposed

	/*

	 * Note there is no need to overwrite the codec-name as is done in

	 * other bytcr machine drivers, because the codec is a MFD child-dev.

 back ends */

		/*

		 * This must be named SSP2-Codec even though this machine driver

		 * always uses SSP0. Most machine drivers support both and dynamically

		 * update the dailink to point to SSP0 or SSP2, while keeping the name

		 * as "SSP2-Codec". The SOF tplg files hardcode the "SSP2-Codec" even

		 * in the byt-foo-ssp0.tplg versions because the other machine-drivers

		 * use "SSP2-Codec" even when SSP0 is used.

 use space before codec name to simplify card ID, and simplify driver name */

 card name will be 'sof-bytcht wm5102' */

 card name will be used for driver name */

 SoC card */

 Get MCLK */

	/*

	 * Get speaker VDD enable GPIO:

	 * 1. Get codec-device-name

	 * 2. Get codec-device

	 * 3. Get GPIO from codec-device

 Note no devm_ here since we call gpiod_get on codec_dev rather then dev */

 override platform name, if required */

 set card and driver name and pm-ops */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright(c) 2021 Intel Corporation.

/*

 * Intel SOF Machine Driver with es8336 Codec

	/*

	 * There is no separate speaker output instead the speakers are muxed to

	 * the HP outputs. The mux is controlled by the "Speaker Power" supply.

 digital mics */

 dai_link id is 1:1 mapped to the PCM device */

 machine stream operations */

 name might be overridden during probe */

 SoC card */

 sof- prefix added automatically */

 codec SSP */

 dmic */

 at least we have dmic01 */

 set up 2 BE links at most */

 HDMI dai link starts at 3 according to current topology settings */

 HDMI */

 i2c-<HID>:00 with HID being 8 chars */

 fixup codec name based on HID */

 get speaker enable GPIO */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  byt_cr_dpcm_rt5640.c - ASoc Machine driver for Intel Byt CR platform

 *

 *  Copyright (C) 2014 Intel Corp

 *  Author: Subhransu S. Prusty <subhransu.s.prusty@intel.com>

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 default is single-ended */

 default is using AIF1  */

 in-diff or dmic-pin + jdsrc + ovcd-th + -sf + jd-inv + terminating entry */

 Configure the PLL before selecting it */

 use bitclock as PLL input */

 2x16 bit slots on SSP0 */

 2x15 bit slots on SSP2 */

		/*

		 * Set codec clock source to internal clock before

		 * turning off the platform clock. Codec needs clock

		 * for Jack detection and button press

	/*

	 * On devices which use line-out as a second headphones output,

	 * the codec's GPIO1 pin is used to enable an external HP-amp.

 The 2nd headset jack uses lineout with an external HP-amp */

 Please keep this list alphabetically sorted */

 Acer Iconia Tab 8 W1-810 */

 Acer One 10 S1002 */

 Chuwi Vi8 (CWI506) */

 The above are too generic, also match BIOS info */

 Chuwi Vi10 (CWI505) */

 Chuwi Hi8 (CWI509) */

 Connect Tablet 9 */

 Estar Beauty HD MID 7316R */

 Glavey TM800A550L */

 Above strings are too generic, also match on BIOS version */

 HP Pavilion x2 10-k0XX, 10-n0XX */

 HP Pavilion x2 10-p0XX */

 HP Stream 7 */

 I.T.Works TW891 */

 Lamina I8270 / T701BR.SE */

 Lenovo Miix 2 8 */

 Lenovo Miix 3-830 */

 Linx Linx7 tablet */

 Mele PCG03 Mini PC */

 MPMAN Converter 9, similar hw as the I.T.Works TW891 2-in-1 */

 MPMAN MPWIN895CL */

 MSI S100 tablet */

 Nuvison/TMax TM800W560 */

 Onda v975w */

 The above are too generic, also match BIOS info */

 Pipo W4 */

 The above are too generic, also match BIOS info */

 Point of View Mobii TAB-P800W (V2.0) */

 The above are too generic, also match BIOS info */

 Point of View Mobii TAB-P800W (V2.1) */

 The above are too generic, also match BIOS info */

 Point of View Mobii TAB-P1005W-232 (V2.0) */

 Prowise PT301 */

 Teclast X89 */

 Toshiba Satellite Click Mini L9W-B */

 Toshiba Encore WT8-A */

 Toshiba Encore WT10-A */

 Voyo Winpad A15 */

 Above strings are too generic, also match on BIOS date */

 Catch-all for generic Insyde tablets, must be last */

/*

 * Note this MUST be called before snd_soc_register_card(), so that the props

 * are in place before the codec component driver's probe function parses them.

 put_device() is handled in caller */

 Start with RC clk for jack-detect (we disable MCLK below) */

	/*

	 * The firmware might enable the clock at boot (this information

	 * may or may not be reflected in the enable clock register).

	 * To change the rate we must disable the clock first to cover

	 * these cases. Due to common clock framework restrictions that

	 * do not allow to disable a clock that has not been enabled,

	 * we need to enable the clock first.

 The DSP will covert the FE rate to 48k, stereo */

 set SSP0 to 16-bit */

 set SSP2 to 24-bit */

	/*

	 * Default mode for SSP configuration is TDM 4 slot, override config

	 * with explicit setting to I2S 2ch. The word length is set with

	 * dai_set_tdm_slot() since there is no other API exposed

 overwritten for ssp0 routing */

 overwritten with HID */ "i2c-10EC5640:00",

 changed w/ quirk */	"rt5640-aif1")));

 back ends */

 SoC card */

 = "bytcr-rt5640-*-spk-*-mic" */

 = "cfg-spk:* cfg-mic:* ..." */

 use space before codec name to simplify card ID, and simplify driver name */

 card name will be 'sof-bytcht rt5640' */

 card name will be used for driver name */

 ACPICA seems to require 64 bit integers */

 1: AIF1, 2: AIF2 */

 usually 25MHz (0x17d7940), ignored */

 register the soc card */

 fix index of codec dai */

 fixup codec name based on HID */

	/*

	 * swap SSP0 if bytcr is detected

	 * (will be overridden if DMI quirk is detected)

		/*

		 * Baytrail CR platforms may have CHAN package in BIOS, try

		 * to find relevant routing quirk based as done on Windows

		 * platforms. We have to read the information directly from the

		 * BIOS, at this stage the card is not created and the links

		 * with the codec driver/pdata are non-existent

 format specified: 2 64-bit integers */

 no BIOS indications, assume SSP0-AIF2 connection */

 change defaults for Baytrail-CR capture */

 check quirks before creating card */

 Must be called before register_card, also see declaration comment. */

		/*

		 * Fall back to bit clock usage when clock is not

		 * available likely due to missing dependencies.

 override plaform name, if required */

 set card and driver name */

 set pm ops */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Intel Haswell Lynxpoint SST Audio

 *

 * Copyright (C) 2013, Intel Corporation. All rights reserved.

 Haswell ULT platforms have a Headphone and Mic jack */

 CODEC BE connections */

 The ADSP will covert the FE rate to 48k, stereo */

 set SSP0 to 16 bit */

 set correct codec filter for DAI format and clock config */

 Front End DAI links */

 Back End DAI links */

 SSP0 - Codec */

 audio machine driver for Haswell Lynxpoint DSP + RT5640 */

 override plaform name, if required */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ASoC machine driver for Intel Broadwell platforms with RT5677 codec

 *

 * Copyright (c) 2014, The Chromium OS Authors.  All rights reserved.

 Speakers */

 Headset jack connectors */

	/* Digital MICs

	 * Local DMICs: the two DMICs on the mainboard

	 * Remote DMICs: the two DMICs on the camera module

 CODEC BE connections */

 DSP Clock Connections */

 GPIO indexes defined by ACPI */

 The ADSP will covert the FE rate to 48k, stereo */

 set SSP0 to 16 bit */

 Board supports stereo configuration only */

	/* Enable codec ASRC function for Stereo DAC/Stereo1 ADC/DMIC/I2S1.

	 * The ASRC clock source is clk_i2s1_asrc.

	/* Enable codec ASRC function for Mono ADC L.

	 * The ASRC clock source is clk_sys2_asrc.

 Request rt5677 GPIO for headphone amp control */

 Create and initialize headphone jack */

 Create and initialize mic jack */

	/*

	 * The .exit() can be reached without going through the .init()

	 * so explicitly test if the gpiod is valid

 broadwell digital audio interface glue - connects codec <--> CPU */

 Wake on voice interface */

 Front End DAI links */

 Non-DPCM links */

 Back End DAI links */

 SSP0 - Codec */

 use space before codec name to simplify card ID, and simplify driver name */

 card name will be 'sof-bdw rt5677' */

 card name will be used for driver name */

 ASoC machine driver for Broadwell DSP + RT5677 */

 Allocate driver private struct */

 override plaform name, if required */

 set card and driver name */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2020 Intel Corporation

/*

 *  sof_sdw_rt700 - Helpers to handle RT700 from generic machine driver

 Headphones */

	/*

	 * headset should be initialized once.

	 * Do it with dai link for playback.

 SPDX-License-Identifier: GPL-2.0-only

 Copyright(c) 2018-19 Canonical Corporation.

/*

 * Intel Kabylake I2S Machine Driver with RT5660 Codec

 *

 * Modified from:

 *   Intel Kabylake I2S Machine driver supporting MAXIM98357a and

 *   DA7219 codecs

 * Also referred to:

 *   Intel Broadwell I2S Machine driver supporting RT5677 codec

 other jacks */

 CODEC BE connections */

 The ADSP will convert the FE rate to 48k, stereo */

 set SSP0 to 24 bit */

 Request rt5660 GPIO for lineout mute control, return if fails */

 Create and initialize headphone jack, this jack is not mandatory, don't return if fails */

 Create and initialize mic jack, this jack is not mandatory, don't return if fails */

 Here we enable some dapms in advance to reduce the pop noise for recording via line-in */

	/*

	 * The .exit() can be reached without going through the .init()

	 * so explicitly test if the gpiod is valid

	/*

	 * On this platform for PCM device we support,

	 * 48Khz

	 * stereo

	 * 16 bit audio

 kabylake digital audio interface glue - connects rt5660 codec <--> CPU */

 Front End DAI links */

 Back End DAI links */

 SSP0 - Codec */

 kabylake audio machine driver for rt5660 */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Intel Broxton-P I2S Machine Driver

 *

 * Copyright (C) 2014-2016, Intel Corporation. All rights reserved.

 *

 * Modified from:

 *   Intel Skylake I2S Machine driver

 Headset jack detection DAPM pins */

 speaker */

 HP jack connectors - unknown if we have jack detect */

 other jacks */

 digital mics */

 CODEC BE connections */

 speaker */

 HP jack connectors - unknown if we have jack detect */

 other jacks */

 digital mics */

 CODEC BE connections */

 The ADSP will covert the FE rate to 48k, stereo */

 set SSP5 to 24 bit */

	/*

	 * on this platform for PCM device we support:

	 *      48Khz

	 *      stereo

	 *	16-bit audio

 broxton digital audio interface glue - connects codec <--> CPU */

 Front End DAI links */

 Back End DAI links */

 SSP5 - Codec */

 broxton audio machine driver for SPT + RT298S */

 override plaform name, if required */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Intel Skylake I2S Machine Driver with MAXIM98357A

 * and NAU88L25

 *

 * Copyright (C) 2015, Intel Corporation. All rights reserved.

 HP jack connectors - unknown if we have jack detection */

 speaker */

 other jacks */

 CODEC BE connections */

 DMIC */

 The ADSP will covert the FE rate to 48k, stereo */

 set SSP0 to 24 bit */

	/*

	 * Headset buttons map to the google Reference headset.

	 * These can be configured by userspace.

	/*

	 * On this platform for PCM device we support,

	 * 48Khz

	 * stereo

	 * 16 bit audio

 skylake digital audio interface glue - connects codec <--> CPU */

 Front End DAI links */

 Back End DAI links */

 SSP0 - Codec */

 SSP1 - Codec */

 skylake audio machine driver for SPT + NAU88L25 */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only



 Copyright(c) 2019 Intel Corporation. All rights reserved.

/*

 * Search card topology and return PCM device number

 * matching Nth HDMI device (zero-based index).

/*

 * Search card topology and register HDMI PCM related controls

 * to codec driver.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ASoC machine driver for Intel Broadwell platforms with RT5650 codec

 *

 * Copyright 2019, The Chromium OS Authors.  All rights reserved.

 Speakers */

 Headset jack connectors */

	/* Digital MICs

	 * DMIC Pair1 are the two DMICs connected on the DMICN1 connector.

	 * DMIC Pair2 are the two DMICs connected on the DMICN2 connector.

	 * Facing the camera, DMIC Pair1 are on the left side, DMIC Pair2

	 * are on the right side.

 CODEC BE connections */

 The ADSP will covert the FE rate to 48k, max 4-channels */

 set SSP0 to 24 bit */

	/* Workaround: set codec PLL to 19.2MHz that PLL source is

	 * from MCLK(24MHz) to conform 2.4MHz DMIC clock.

	/* The actual MCLK freq is 24MHz. The codec is told that MCLK is

	 * 24.576MHz to satisfy the requirement of rl6231_get_clk_info.

	 * ASRC is enabled on AD and DA filters to ensure good audio quality.

 Board supports stereo and quad configurations for capture */

	/* Enable codec ASRC function for Stereo DAC/Stereo1 ADC/DMIC/I2S1.

	 * The ASRC clock source is clk_i2s1_asrc.

 TDM 4 slots 24 bit, set Rx & Tx bitmask to 4 active slots */

 Create and initialize headphone jack */

 Create and initialize mic jack */

 broadwell digital audio interface glue - connects codec <--> CPU */

 Front End DAI links */

 Back End DAI links */

 SSP0 - Codec */

 use space before codec name to simplify card ID, and simplify driver name */

 card name will be 'sof-bdw rt5650' */

 card name will be used for driver name */

 ASoC machine driver for Broadwell DSP + RT5650 */

 Allocate driver private struct */

 override plaform name, if required */

 set card and driver name */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Intel Skylake I2S Machine Driver for NAU88L25+SSM4567

 *

 * Copyright (C) 2015, Intel Corporation. All rights reserved.

 *

 * Modified from:

 *   Intel Skylake I2S Machine Driver for NAU88L25 and SSM4567

 *

 *   Copyright (C) 2015, Intel Corporation. All rights reserved.

 HP jack connectors - unknown if we have jack detection */

 speaker */

 other jacks */

 CODEC BE connections */

 IV feedback path */

 DMIC */

 Slot 1 for left */

 Slot 2 for right */

	/*

	 * 4 buttons here map to the google Reference headset

	 * The use of these buttons can be decided by the user space.

	/*

	 * on this platform for PCM device we support,

	 *	48Khz

	 *	stereo

	 *	16 bit audio

 The ADSP will covert the FE rate to 48k, stereo */

 set SSP0 to 24 bit */

 Left */	COMP_CODEC("i2c-INT343B:00", SKL_SSM_CODEC_DAI),

 Right */	COMP_CODEC("i2c-INT343B:01", SKL_SSM_CODEC_DAI)));

 skylake digital audio interface glue - connects codec <--> CPU */

 Front End DAI links */

 Back End DAI links */

 SSP0 - Codec */

 SSP1 - Codec */

 skylake audio machine driver for SPT + NAU88L25 */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only



 Copyright (C) 2020 Intel Corporation.



 Intel KeemBay Platform driver.



/*

 * Convert to ADV7511 HDMI hardware format.

 * ADV7511 HDMI chip need parity bit replaced by block start bit and

 * with the preamble bits left out.

 * ALSA IEC958 subframe format:

 * bit 0-3  = preamble (0x8 = block start)

 *     4-7  = AUX (=0)

 *     8-27 = audio data (without AUX if 24bit sample)

 *     28   = validity

 *     29   = user data

 *     30   = channel status

 *     31   = parity

 *

 * ADV7511 IEC958 subframe format:

 * bit 0-23  = audio data

 *     24    = validity

 *     25    = user data

 *     26    = channel status

 *     27    = block start

 *     28-31 = 0

 * MSB to LSB bit reverse by software as hardware not supporting it.

 Replace parity with block start*/

 KMB i2s uses two separate L/R FIFO */

 KMB i2s uses two separate L/R FIFO */

 Disable all channels regardless of configuration*/

 Only check TX interrupt if TX is active */

	/*

	 * Data available. Retrieve samples from FIFO

	/*

	 * 8 channel audio will have isr[0..2] triggered,

	 * reading the specific isr based on the audio configuration,

	 * to avoid reading the buffers too early.

		/*

		 * Check if TX fifo is empty. If empty fill FIFO with samples

 Error Handling: TX */

 Error Handling: RX */

 Use SNDRV_DMA_TYPE_CONTINUOUS as KMB doesn't use PCI sg buffer */

 Enable DMA handshake for stream */

 Disable DMA handshake for stream */

 I2S Programming sequence in Keem_Bay_VPU_DB_v1.1 */

 I2S Programming sequence in Keem_Bay_VPU_DB_v1.1 */

		/* Keep track of i2s activity before turn off

		 * the i2s interface

		/*

		 * Platform is not capable of providing clocks for

		 * multi channel audio

		/*

		 * Platform is only capable of providing clocks need for

		 * 2 channel master mode

 Only 2 ch supported in Master mode */

 I2S Programming sequence in Keem_Bay_VPU_DB_v1.1 */

 Prepare the related clocks */

 To ensure none of the channels are enabled at boot up */

 SPDX-License-Identifier: GPL-2.0-only



 Copyright(c) 2020 Intel Corporation. All rights reserved.



 Author: Cezary Rojewski <cezary.rojewski@intel.com>



/*

 * Either engine 0 or 1 can be used for image loading.

 * Align with Windows driver equivalent and stick to engine 1.

 enable demand mode for dma channel */

 regardless of status, disable access to HOST memory in demand mode */

	/*

	 * Caller is responsible for putting device in D0 to allow

	 * for I/O and memory access before probing DW.

	/*

	 * As do_dma_remove() juggles with pm_runtime_get_xxx() and

	 * pm_runtime_put_xxx() while both ADSP and DW 'devices' are part of

	 * the same module, caller makes sure pm_runtime_disable() is invoked

	 * before removing DW to prevent postmortem resume and suspend.

 wait for SRAM power gating to propagate */

	/*

	 * Dummy read as the very first access after block enable

	 * to prevent byte loss in future operations.

 newly enabled: new bit=0 while old bit=1 */

 flag all busy blocks */

 offset value given mask's start and invert it as ON=b0 */

 disable core clock gating */

 enable core clock gating */

 wait for DSP to signal WAIT state */

 no signal - only high clock selection allowed */

 default to DSP core & audio fabric high clock */

 update PLL accordingly */

 bring registers to their defaults as HW won't reset itself */

 disable core clock gating */

 set 24Mhz clock for both SSPs */

 disable MCLK */

 switch clock gating */

 enable DTCGE separatelly */

 SRAM power gating all */

 give hw time to drop off */

 enable core clock gating */

 disable core clock gating */

 switch clock gating */

 SRAM power gating none */

 restore MCLK */

 set 24Mhz clock for both SSPs */

 enable core clock gating */

 generate int deassert msg to fix inversed int logic */

 account for header of each section and hash chunk */

 navigate to fifth info segment (fw hash) */

 info segments are separated by space each */

 SPDX-License-Identifier: GPL-2.0-only



 Copyright(c) 2020 Intel Corporation. All rights reserved.



 Author: Cezary Rojewski <cezary.rojewski@intel.com>



 FW load (200ms) plus operational delays */

 DRAM with module's initial state */

 advance to data area */

 calculate start offset of common data area */

 advance to data area */

 restore basefw image */

 then proceed with memory dumps */

 restore module state */

		/*

		 * Save state window coordinates - these will be

		 * used to capture module state on D0 exit.

 init module type static info */

 DSP expects address from module header substracted by 4 */

 update sram pg & clock once done booting */

 restrict FW Core dump area */

 restrict entire area following BASE_FW - highest offset in DRAM */

 update dram pg for scratch and restricted regions */

 SPDX-License-Identifier: GPL-2.0-only



 Copyright(c) 2020 Intel Corporation. All rights reserved.



 Author: Cezary Rojewski <cezary.rojewski@intel.com>



 flex array with entries here */

 obsolete */

 re-arrange the input: account for flex array 'entries' */

 SPDX-License-Identifier: GPL-2.0-only



 Copyright(c) 2020 Intel Corporation. All rights reserved.



 Author: Cezary Rojewski <cezary.rojewski@intel.com>



 account for capture in bidirectional dais */

 incrementing by 2 on even and 3 on odd */

 only selected streams have individual controls */

 only offload is set_write_pos driven */

		/*

		 * Dsp operates on buffer halves, thus max 2x set_write_pos

		 * (entire buffer filled) prior to stream start.

 only offload is set_write_pos driven */

	/*

	 * Dsp operates on buffer halves, thus on every notify position

	 * (buffer half consumed) update wp to allow stream progression.

 200 ms for 2 32-bit channels at 48kHz (native format) */

 see if this is a new configuration */

 store device format set for given SSP */

 FE DAIs */

 BE DAIs */

 0db */

 Master volume (mixer stream) */

 Individual volume controls for offload and capture */

 Enable or disable WAVES module */

 WAVES module parameter control */

 allocate single scratch area for all modules */

 SPDX-License-Identifier: GPL-2.0-only



 Copyright(c) 2020 Intel Corporation. All rights reserved.



 Author: Cezary Rojewski <cezary.rojewski@intel.com>



	/*

	 * Both tx and rx are put into and received from outbox. Inbox is

	 * only used for notifications where payload size is known upfront,

	 * thus no separate buffer is allocated for it.

 wait for delayed reply */

 TODO: attempt recovery */

 to fit 32b header original address is shifted right by 3 */

 TODO: attempt recovery */

 signal completion of delayed reply */

 ensure there is delayed reply or notification to process */

 tell DSP processing is completed */

 unmask dsp BUSY interrupt */

 immediate reply */

 mask host DONE interrupt */

 tell DSP processing is completed */

 unmask host DONE interrupt */

 delayed reply or notification */

 mask dsp BUSY interrupt */

 SPDX-License-Identifier: GPL-2.0-only



 Copyright(c) 2020 Intel Corporation. All rights reserved.



 Author: Cezary Rojewski <cezary.rojewski@intel.com>



 SPDX-License-Identifier: GPL-2.0-only



 Copyright(c) 2020 Intel Corporation. All rights reserved.



 Author: Cezary Rojewski <cezary.rojewski@intel.com>



 Special thanks to:

    Marcin Barlik <marcin.barlik@intel.com>

    Piotr Papierkowski <piotr.papierkowski@intel.com>



 for sharing LPT-LP and WTP-LP AudioDSP architecture expertise and

 helping backtrack its historical background



 reconfigure SSP devices after Dx transition */

 machine board owned by CATPT is removed with this hook */

 reflect actual ADSP state in pm_runtime */

	/*

	 * Mark both device formats as uninitialized. Once corresponding

	 * cpu_dai's pcm is created, proper values are assigned.

 map DSP bar address */

 map PCI bar address */

 alloc buffer for storing DRAM context during dx transitions */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  skl-nhlt.c - Intel SKL Platform NHLT parsing

 *

 *  Copyright (C) 2015 Intel Corp

 *  Author: Sanjiv Kumar <sanjiv.kumar@intel.com>

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

			/*

			 * if link type is dmic ignore rate check as the blob is

			 * generic for all rates

 do not check dev_type for DMIC link type */

/*

 * Queries NHLT for all the fmt configuration for a particular endpoint and

 * stores all possible rates supported in a rate table for the corresponding

 * sclk/sclkfs.

		/*

		 * In case of TDM configuration on a ssp, there can

		 * be more than one blob in which channel masks are

		 * different for each usecase for a specific rate and bps.

		 * But the sclk rate will be generated for the total

		 * number of channels used for that endpoint.

		 *

		 * So for the given fs and bps, choose blob which has

		 * the superset of all channels for that endpoint and

		 * derive the rate.

 check if the rate is added already to the given SSP's sclk */

 Fill rate and parent for sclk/sclkfs */

 MCLK Divider Source Select */

			/*

			 * Do not copy the config data if there is no parent

			 * clock available for this clock source select

 MCLK Divider Source Select and divider */

 bypass divider */

 Divider is 2 + clkdiv */

 Calculate MCLK rate from source using div value */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  skl-debug.c - Debugfs for skl driver

 *

 *  Copyright (C) 2016-17 Intel Corp

 print newline for each offset */

 create the debugfs dir with platform component's debugfs as parent */

 now create the module dir */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  bxt-sst.c - DSP library functions for BXT platform

 *

 *  Copyright (C) 2015-16 Intel Corp

 *  Author:Rafal Redzimski <rafal.f.redzimski@intel.com>

 *	   Jeeja KP <jeeja.kp@intel.com>

 Firmware status window */

 Delay before scheduling D0i3 entry */

 library indices start from 1 to N. 0 represents base FW */

/*

 * First boot sequence has some extra steps. Core 0 waits for power

 * status on core 1, so power up core 1 also momentarily, keep it in

 * reset/stall and then turn it off

 Step 1: Power up core 0 and core1 */

 Step 2: Purge FW request */

 Step 3: Unset core0 reset state & unstall/run core0 */

 Step 4: Wait for DONE Bit */

 Step 5: power down core1 */

 Step 6: Enable Interrupt */

 Step 7: Wait for ROM init */

 prase uuids on first boot */

/*

 * Decide the D0i3 state that can be targeted based on the usecase

 * ref counts and DSP state

 *

 * Decision Matrix:  (X= dont care; state = target state)

 *

 * DSP state != SKL_DSP_RUNNING ; state = no d0i3

 *

 * DSP state == SKL_DSP_RUNNING , the following matrix applies

 * non_d0i3 >0; streaming =X; non_streaming =X; state = no d0i3

 * non_d0i3 =X; streaming =0; non_streaming =0; state = no d0i3

 * non_d0i3 =0; streaming >0; non_streaming =X; state = streaming d0i3

 * non_d0i3 =0; streaming =0; non_streaming =X; state = non-streaming d0i3

 D0i3 entry allowed only if core 0 alone is running */

 Set Vendor specific register D0I3C.I3 to enable D0i3*/

 Schedule D0i3 only if the usecase ref counts are appropriate */

 First Cancel any pending attempt to put DSP to D0i3 */

 If DSP is currently in D0i3, bring it to D0i0 */

 Clear Vendor specific register D0I3C.I3 to disable D0i3*/

 If core 0 is being turned on, turn on core 1 as well */

		/*

		 * Enable interrupt after SPA is set and before

		 * DSP is unstalled

 If core 1 was turned on for booting core 0, turn it off */

 Tell FW if additional core in now On */

		/*

		 * In case of D3 failure, re-download the firmware, so set

		 * fw_loaded to false.

 disable Interrupt */

 set the D0i3 check */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * skl-sst.c - HDA DSP library functions for SKL platform

 *

 * Copyright (C) 2014-15, Intel Corporation.

 * Author:Rafal Redzimski <rafal.f.redzimski@intel.com>

 *	Jeeja KP <jeeja.kp@intel.com>

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 Intel HD Audio SRAM Window 0*/

 Firmware status window */

 prase uuids on first boot */

 check for extended manifest */

 enable Interrupt */

 check ROM Status */

 If core0 is being turned on, we need to load the FW */

 load libs as they are also lost on D3 */

	/*

	 * If any core other than core 0 is being moved to D0, enable the

	 * core and send the set dx IPC for the core.

 disable Interrupt */

/*

 * since get/set_module are called from DAPM context,

 * we don't need lock for usage count

 get a module from it's unique ID */

 check is_module flag to load module or library */

	/*

	 * if bytes_left > 0 then wait for BDL complete interrupt and

	 * copy the next chunk till bytes_left is 0. if bytes_left is

	 * zero, then wait for load module IPC reply

 library indices start from 1 to N. 0 represents base FW */

 guid str = 32 chars + 4 hyphens */

 if module is used by others return, no need to unload */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cnl-sst.c - DSP library functions for CNL platform

 *

 * Copyright (C) 2016-17, Intel Corporation.

 *

 * Author: Guneshwor Singh <guneshwor.o.singh@intel.com>

 *

 * Modified from:

 *	HDA DSP library functions for SKL platform

 *	Copyright (C) 2014-15, Intel Corporation.

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 Firmware status window */

 purge FW request */

 enable interrupt */

 parse uuids if first boot */

 enable interrupt */

 disable interrupts if core 0 */

 here we handle ipc interrupts only */

 reply message from dsp */

 clear done bit - tell dsp operation is complete */

 unmask done interrupt */

 new message from dsp */

 Handle Immediate reply from DSP Core */

 clear busy interrupt */

 set done bit to ack dsp */

 continue to send any remaining messages */

	/*

	 * overriding tx_msg and is_dsp_busy since

	 * ipc registers are different for cnl

 SPDX-License-Identifier: GPL-2.0-only

/*

 * skl-sst-dsp.c - SKL SST library generic function

 *

 * Copyright (C) 2014-15, Intel Corporation.

 * Author:Rafal Redzimski <rafal.f.redzimski@intel.com>

 *	Jeeja KP <jeeja.kp@intel.com>

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 various timeout values */

/*

 * Initialize core power state and usage count. To be called after

 * successful first boot. Hence core 0 will be running and other cores

 * will be reset

 Get the mask for all enabled cores */

 Cores having CPA bit set */

 And cores having CRST bit cleared */

 And cores having CSTALL bit cleared */

 update bits */

 poll with timeout to check if operation successful */

 update bits */

 poll with timeout to check if operation successful */

 stall core */

 set reset state */

 unset reset state */

 run core */

 update bits */

 poll with timeout to check if operation successful */

 update bits */

 poll with timeout to check if operation successful */

 power up */

 power down core*/

/*

 * skl_dsp_get_core/skl_dsp_put_core will be called inside DAPM context

 * within the dapm mutex. Hence no separate lock is used.

 Initialise SST Audio DSP */

 Register the ISR */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  skl.c - Implementation of ASoC Intel SKL HD Audio driver

 *

 *  Copyright (C) 2014-2015 Intel Corp

 *  Author: Jeeja KP <jeeja.kp@intel.com>

 *

 *  Derived mostly from Intel HDA driver with following copyrights:

 *  Copyright (c) 2004 Takashi Iwai <tiwai@suse.de>

 *                     PeiSen Hou <pshou@realtek.com.tw>

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

/*

 * initialize the PCI registers

	/*

	 * Clear bits 0-2 of PCI register TCSEL (at offset 0x44)

	 * TCSEL == Traffic Class Select Register, which sets PCI express QOS

	 * Ensuring these bits are 0 clears playback static on some HD Audio

	 * codecs.

	 * The PCI register TCSEL is defined in the Intel manuals.

/*

 * skl_enable_miscbdcge - enable/dsiable CGCTL.MISCBDCGE bits

 *

 * @dev: device pointer

 * @enable: enable/disable flag

/**

 * skl_clock_power_gating: Enable/Disable clock and power gating

 *

 * @dev: Device pointer

 * @enable: Enable/Disable flag

 Update PDCGE bit of CGCTL register */

 Update L1SEN bit of EM2 register */

 Update ADSPPGD bit of PGCTL register */

/*

 * While performing reset, controller may not come back properly causing

 * issues, so recommendation is to set CGCTL.MISCBDCGE to 0 then do reset

 * (init chip) and then again set CGCTL.MISCBDCGE to 1

 Reset stream-to-link mapping */

 Do not write to D0I3C until command in progress bit is cleared */

 Highly unlikely. But if it happens, flag error explicitly */

 Wait for cmd in progress to be cleared before exiting the function */

 Highly unlikely. But if it happens, flag error explicitly */

/**

 * skl_dum_set - set DUM bit in EM2 register

 * @bus: HD-audio core bus

 *

 * Addresses incorrect position reporting for capture streams.

 * Used on device power up.

 For the DUM bit to be set, CRST needs to be out of reset state */

 called from IRQ */

 clear rirb int */

/*

 * power management

	/*

	 * Do not suspend if streams which are marked ignore suspend are

	 * running, we need to save the state for these and continue

 turn off the links and stop the CORB/RIRB DMA if it is On */

	/*

	 * resume only when we are not in suspend active, otherwise need to

	 * restore the device

		/*

		 * turn On the links which are On before active suspend

		 * and start the CORB/RIRB DMA if On before

		 * active suspend.

 turn off the links which are off before suspend */

 CONFIG_PM_SLEEP */

 CONFIG_PM */

/*

 * destructor

 to be sure */

/*

 * For each ssp there are 3 clocks (mclk/sclk/sclkfs).

 * e.g. for ssp0, clocks will be named as

 *      "ssp0_mclk", "ssp0_sclk", "ssp0_sclkfs"

 * So for skl+, there are 6 ssps, so 18 clocks will be created.

 point to common table */

 all entries in the machine table use the same firmware */

 SKL has one dmic port, so allocate dmic device for this */

 Query NHLT to fill the rates and parent */

 Register Platform device */

/*

 * load the legacy codec driver

 CONFIG_SND_SOC_INTEL_SKYLAKE_HDAUDIO_CODEC */

/*

 * Probe the given codec address

 use legacy bus only for HDA codecs, idisp uses ext bus */

 CONFIG_SND_SOC_INTEL_SKYLAKE_HDAUDIO_CODEC */

 Codec initialization */

 First try to probe all given codec slots */

				/*

				 * Some BIOSen give you wrong codec addresses

				 * that don't exist

				/*

				 * More badly, accessing to a non-existing

				 * codec often screws up the controller bus,

				 * and disturbs the further communications.

				 * Thus if an error occurs during probing,

				 * better to reset the controller bus to get

				 * back to the sanity state.

	/*

	 * The HDMI codec is in GPU so we need to ensure that it is powered

	 * up and ready for probe

 codec detection */

 create codec instances */

 register platform dai and controls */

	/*

	 * we are done probing so decrement link counts

 configure PM */

/*

 * constructor

 check if PPCAP exists */

 read number of streams from GCAP register */

 allow 64bit DMA address if supported by H/W */

 initialize streams */

 we use ext core ops, so provide NULL for ops here */

 create device for dsp clk */

 create device for soc dmic */

 codec removal, invoke bus_device_remove */

 PCI IDs */

 Sunrise Point-LP */

 BXT-P */

 KBL */

 GLK */

 CNL */

 CFL */

 CML-LP */

 CML-H */

 pci_driver definition */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  skl-message.c - HDA DSP interface for FW registration, Pipe and Module

 *  configurations

 *

 *  Copyright (C) 2015 Intel Corp

 *  Author:Rafal Redzimski <rafal.f.redzimski@intel.com>

 *	   Jeeja KP <jeeja.kp@intel.com>

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 enable/disable SPIB for this hdac stream */

 set the spib value */

 assign decouple host dma channel */

 enable ppcap interrupt */

 read the BAR of the ADSP MMIO */

 disable  ppcap interrupt */

/*

 * In the case of "suspend_active" i.e, the Audio IP being active

 * during system suspend, immediately excecute any pending D0i3 work

 * before suspending. This is needed for the IP to work in low power

 * mode during system suspend. In the case of normal suspend, cancel

 * any pending D0i3 work.

 if ppcap is not supported return 0 */

 disable ppcap interrupt */

 if ppcap is not supported return 0 */

 enable ppcap interrupt */

 check if DSP 1st boot is done */

	/*

	 * Disable dynamic clock and power gating during firmware

	 * and library download

/*

 * Each module in DSP expects a base module configuration, which consists of

 * PCM format information, which we calculate in driver and resource values

 * which are read from widget information passed through topology binary

 * This is send when we create a module with INIT_INSTANCE IPC msg

/*

 * Any module configuration begins with a base module configuration but

 * can be followed by a generic extension containing audio format for all

 * module's pins that are in use.

/*

 * Copies copier capabilities into copier module and updates copier module

 * config size.

/*

 * Calculate the gatewat settings required for copier module, type of

 * gateway and index of gateway to use

 fallback to 2ms default value */

	/*

	 * if blob size zero, then return

	/*

	 * NHLT blob may contain additional configs along with i2s blob.

	 * firmware expects only the i2s blob size as the config_length.

	 * So fix to i2s blob size.

	 * size in dwords.

/*

 * DSP needs SRC module for frequency conversion, SRC takes base module

 * configuration and the target frequency as extra parameter passed as src

 * config

/*

 * DSP needs updown module to do channel conversion. updown module take base

 * module configuration and channel configuration

 * It also take coefficients and now we have defaults applied here

/*

 * 'copier' is DSP internal module which copies data from Host DMA (HDA host

 * dma) or link (hda link, SSP, PDM)

 * Here we calculate the copier module parameters, like PCM format, output

 * format, gateway settings

 * copier_module_config is sent as input buffer with INIT_INSTANCE IPC msg

/*

 * Mic select module allows selecting one or many input channels, thus

 * acting as a demux.

 *

 * Mic select module take base module configuration and out-format

 * configuration

/*

 * DSP firmware supports various modules like copier, SRC, updown etc.

 * These modules required various parameters to be calculated and sent for

 * the module initialization to DSP. By default a generic module needs only

 * base module format configuration

/*

 * Allocates queue for each module.

 * if dynamic, the pin_index is allocated 0 to max_pin.

 * In static, the pin_index is fixed based on module_id and instance id

	/*

	 * if pin in dynamic, find first free pin

	 * otherwise find match module and instance id pin as topology will

	 * ensure a unique pin is assigned to this so no need to

	 * allocate/free

 Module state will be set to unint, if all the out pin state is UNBIND */

/*

 * A module needs to be instanataited in DSP. A mdoule is present in a

 * collection of module referred as a PIPE.

 * We first calculate the module format, based on module type and then

 * invoke the DSP by sending IPC INIT_INSTANCE using ipc helper

/*

 * On module freeup, we need to unbind the module with modules

 * it is already bind.

 * Find the pin allocated and unbind then using bind_unbind IPC

 get src queue index */

 get dst queue index */

 free queue only if unbind is success */

		/*

		 * check only if src module bind state, bind is

		 * always from src -> sink

/*

 * Once a module is instantiated it need to be 'bind' with other modules in

 * the pipeline. For binding we need to find the module pins which are bind

 * together

 * This function finds the pins and then sends bund_unbind IPC message to

 * DSP using IPC helper

	/*

	 * Copier module requires the separate large_config_set_ipc to

	 * configure the pins other than 0

 Input fmt is same as that of src module input cfg */

 error case , if IPC fails, clear the queue index */

/*

 * A pipeline is a collection of modules. Before a module in instantiated a

 * pipeline needs to be created for it.

 * This function creates pipeline, by sending create pipeline IPC messages

 * to FW

/*

 * A pipeline needs to be deleted on cleanup. If a pipeline is running,

 * then pause it first. Before actual deletion, pipeline should enter

 * reset state. Finish the procedure by sending delete pipeline IPC.

 * DSP will stop the DMA engines and release resources

 If pipe was not created in FW, do not try to delete it */

 If pipe is started, do stop the pipe in FW. */

 reset pipe state before deletion */

/*

 * A pipeline is also a scheduling entity in DSP which can be run, stopped

 * For processing data the pipe need to be run by sending IPC set pipe state

 * to DSP

 If pipe was not created in FW, do not try to pause or delete */

 Pipe has to be paused before it is started */

/*

 * Stop the pipeline by sending set pipe state IPC

 * DSP doesnt implement stop so we always send pause message

 If pipe was not created in FW, do not try to pause or delete */

/*

 * Reset the pipeline by sending set pipe state IPC this will reset the DMA

 * from the DSP side

 If pipe was not created in FW, do not try to pause or delete */

 Algo parameter set helper function */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  skl-pcm.c -ASoC HDA Platform driver file implementing PCM functionality

 *

 *  Copyright (C) 2014-2015 Intel Corp

 *  Author:  Jeeja KP <jeeja.kp@intel.com>

 *

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 legacy */

 avoid wrap-around with wall-clock */

/*

 * check if the stream opened is marked as ignore_suspend by machine, if so

 * then enable suspend_active refcount

 *

 * The count supend_active does not need lock as it is used in open/close

 * and suspend context

	/*

	 * The recommended SDxFMT programming sequence for BXT

	 * platforms is to couple the stream before writing the format

	/*

	 * disable WALLCLOCK timestamps for capture streams

	 * until we figure out how to handle digital inputs

 legacy */

	/*

	 * In case of XRUN recovery or in the case when the application

	 * calls prepare another time, reset the FW pipe to clean state

	/*

	 * now we should set this to NULL as we are freeing by the

	 * dma_params

	/*

	 * check if close is for "Reference Pin" and set back the

	 * CGCTL.MISCBDCGE if disabled by driver

			/*

			 * enable DMA Resume enable bit for the stream, set the

			 * dpib & lpib position to resume before starting the

			 * DMA

		/*

		 * Start HOST DMA and Start FE Pipe.This is to make sure that

		 * there are no underrun/overrun in the case when the FE

		 * pipeline is started but there is a delay in starting the

		 * DMA channel on the host.

		/*

		 * Stop FE Pipe first and stop DMA. This is to make sure that

		 * there are no underrun/overrun in the case if there is a delay

		 * between the two operations.

 save the dpib and lpib positions */

 set the stream tag in the codec dai dma params  */

 In case of XRUN recovery, reset the FW pipe to clean state */

 BE CPU  Dais */

 first, set SYNC bits of corresponding streams */

 reset SYNC bits */

	/*

	 * Use DPIB for Playback stream as the periodic DMA Position-in-

	 * Buffer Writes may be scheduled at the same time or later than

	 * the MSI and does not guarantee to reflect the Position of the

	 * last buffer that was transferred. Whereas DPIB register in

	 * HAD space reflects the actual data that is transferred.

	 * Use the position buffer for capture, as DPIB write gets

	 * completed earlier than the actual data written to the DDR.

	 *

	 * For capture stream following workaround is required to fix the

	 * incorrect position reporting.

	 *

	 * 1. Wait for 20us before reading the DMA position in buffer once

	 * the interrupt is generated for stream completion as update happens

	 * on the HDA frame boundary i.e. 20.833uSec.

	 * 2. Read DPIB register to flush the DMA position value. This dummy

	 * read is required to flush DMA position value.

	 * 3. Read the DMA Position-in-Buffer. This value now will be equal to

	 * or greater than period boundary.

 can be optimized */

 rest of struct is valid */

 24MHzWallClk == 42ns resolution */

 buffer pre-allocation */

 init debugfs */

 load the firmwares, since all is set */

		/*

		 * Disable dynamic clock and power gating during firmware

		 * and library download

 increment refcount when a pcm is opened */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * skl-sst-cldma.c - Code Loader DMA handler

 *

 * Copyright (C) 2015, Intel Corporation.

 * Author: Subhransu S. Prusty <subhransu.s.prusty@intel.com>

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 waiting for hardware to report that the stream Run bit set */

 make sure Run bit is cleared before setting stream register */

 Code loader helper APIs */

/*

 * Setup controller

 * Configure the registers to update the dma buffer address and

 * enable interrupts.

 * Note: Using the channel 1 for transfer

	/*

	 * Check if the size exceeds buffer boundary. If it exceeds

	 * max_buffer size, then copy till buffer size and then copy

	 * remaining buffer from the start of ring buffer.

/*

 * The CL dma doesn't have any way to update the transfer status until a BDL

 * buffer is fully transferred

 *

 * So Copying is divided in two parts.

 * 1. Interrupt on buffer done where the size to be transferred is more than

 *    ring buffer size.

 * 2. Polling on fw register to identify if data left to transferred doesn't

 *    fill the ring buffer. Caller takes care of polling the required status

 *    register to identify the transfer status.

 * 3. if wait flag is set, waits for DBL interrupt to copy the next chunk till

 *    bytes_left is 0.

 *    if wait flag is not set, doesn't wait for BDL interrupt. after ccopying

 *    the first chunk return the no of bytes_left to be copied.

			/*

			 * dma transfers only till the write pointer as

			 * updated in spib

 Allocate cl ops */

 Allocate buffer*/

 Setup Code loader BDL */

 Allocate BDLs */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  skl-sst-utils.c - SKL sst utils functions

 *

 *  Copyright (C) 2016 Intel Corp

 FW Extended Manifest Header id = $AE1 */

/**

 * skl_get_pvt_id: generate a private id for use as module id

 *

 * @skl: driver context

 * @uuid_mod: module's uuid

 * @instance_id: module's instance id

 *

 * This generates a 128 bit private unique id for a module TYPE so that

 * module instance is unique

/**

 * skl_put_pvt_id: free up the private id allocated

 *

 * @skl: driver context

 * @uuid_mod: module's uuid

 * @pvt_id: module pvt id

 *

 * This frees a 128 bit private unique id previously generated

/*

 * Parse the firmware binary to get the UUID, module id

 * and loadable flags

 Get the FW pointer to derive ADSP header */

 check if we have enough space in file to move to header */

 check 1st module entry is in file */

 check all entries are in file */

	/*

	 * Read the UUID(GUID) from FW Manifest.

	 *

	 * The 16 byte UUID format is: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX

	 * Populate the UUID table to store module_id and loadable flags

	 * for the module.

/*

 * some firmware binary contains some extended manifest. This needs

 * to be stripped in that case before we load and use that image.

 *

 * Get the module id for the module by checking

 * the table for the UUID for the module

 check if fw file is greater than header we are looking */

 library indices start from 1 to N. 0 represents base FW */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cnl-sst-dsp.c - CNL SST library generic function

 *

 * Copyright (C) 2016-17, Intel Corporation.

 * Author: Guneshwor Singh <guneshwor.o.singh@intel.com>

 *

 * Modified from:

 *	SKL SST library generic function

 *	Copyright (C) 2014-15, Intel Corporation.

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 various timeout values */

 update bits */

 poll with timeout to check if operation successful */

 update bits */

 poll with timeout to check if operation successful */

 stall core */

 set reset state */

 unset reset state */

 run core */

 update bits */

 poll with timeout to check if operation successful */

 update bits */

 poll with timeout to check if operation successful */

 power up */

 power down core*/

 enable IPC DONE interrupt */

 enable IPC BUSY interrupt */

 disable IPC DONE interrupt */

 disable IPC BUSY interrupt */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  skl-topology.c - Implements Platform component ALSA controls/widget

 *  handlers.

 *

 *  Copyright (C) 2014-2015 Intel Corp

 *  Author: Jeeja KP <jeeja.kp@intel.com>

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

/*

 * SKL DSP driver modelling uses only few DAPM widgets so for rest we will

 * ignore. This helpers checks if the SKL driver handles this widget type

		/*

		 * For 2 channels with starting slot as 0, slot map will

		 * look like 0xFFFFFF10.

		/*

		 * 16 bit is 16 bit container whereas 24 bit is in 32 bit

		 * container so update bit depth accordingly

/*

 * A pipeline may have modules which impact the pcm parameters, like SRC,

 * channel converter, format converter.

 * We need to calculate the output params by applying the 'fixup'

 * Topology will tell driver which type of fixup is to be applied by

 * supplying the fixup mask, so based on that we calculate the output

 *

 * Now In FE the pcm hw_params is source/target format. Same is applicable

 * for BE with its hw_params invoked.

 * here based on FE, BE pipeline and direction we calculate the input and

 * outfix and then apply that for a module

 Fixups will be applied to pin 0 only */

/*

 * A module needs input and output buffers, which are dependent upon pcm

 * params, so once we have calculate params, we need buffer calculation as

 * well.

	/* Since fixups is applied to pin 0 only, ibs, obs needs

	 * change for pin 0 only

 check if we already have blob */

 update the blob based on virtual bus_id and default params */

/*

 * some modules can have multiple params set from user control and

 * need to be set after module is initialized. If set_param flag is

 * set module params will be done after module is initialised.

/*

 * some module param can set from user control and this is required as

 * when module is initailzed. if module param is required in init it is

 * identifed by set_param flag. if set_param flag is not set, then this

 * parameter needs to set as part of module init.

/*

 * Inside a pipe instance, we can have various modules. These modules need

 * to instantiated in DSP by invoking INIT_MODULE IPC, which is achieved by

 * skl_init_module() routine, so invoke that for all modules in a pipeline

 check if module ids are populated */

 prepare the DMA if the module is gateway cpr */

 update blob if blob is null for be with default value */

		/*

		 * apply fix/conversion to module params based on

		 * FE/BE params

 don't return; continue with other modules */

 no modules to unload in this path, so return */

/*

 * Here, we select pipe format based on the pipe type and pipe

 * direction to determine the current config index for the pipeline.

 * The config index is then used to select proper module resources.

 * Intermediate pipes currently have a fixed format hence we select the

 * 0th configuratation by default for such pipes.

/*

 * Mixer module represents a pipeline. So in the Pre-PMU event of mixer we

 * need create the pipeline. So we do following:

 *   - Create the pipeline

 *   - Initialize the modules in pipeline

 *   - finally bind all modules together

	/*

	 * Create a list of modules for pipe.

	 * This list contains modules from source to sink

 Init all pipe modules from source to sink */

 Bind modules from source to sink */

	/*

	 * When the destination module is initialized, check for these modules

	 * in deferred bind list. If found, bind them.

/*

 * Some modules require params to be set after the module is bound to

 * all pins connected.

 *

 * The module provider initializes set_param flag for such modules and we

 * send params after binding

	/*

	 * check all out/in pins are in bind state.

	 * if so set the module param

/*

 * Retrieve the module id from UUID mentioned in the

 * post bind params

	/*

	 * Post bind params are used for only for KPB

	 * to set copier instances to drain the data

	 * in fast mode

 only supported for module with static pin connection */

		/*

		 * here we will check widgets in sink pipelines, so that

		 * can be any widgets type and we are only interested if

		 * they are ones used for SKL so check that first

			/*

			 * Modules other than PGA leaf can be connected

			 * directly or via switch to a module in another

			 * pipeline. EX: reference path

			 * when the path is enabled, the dst module that needs

			 * to be bound may not be initialized. if the module is

			 * not initialized, add these modules in the deferred

			 * bind list and when the dst module is initialised,

			 * bind this module to the dst_module in deferred list.

 Bind source to sink, mixin is always source */

 set module params after bind */

 Start sinks pipe first */

/*

 * A PGA represents a module in a pipeline. So in the Pre-PMU event of PGA

 * we need to do following:

 *   - Bind to sink pipeline

 *      Since the sink pipes can be running and we don't get mixer event on

 *      connect for already running mixer, we need to find the sink pipes

 *      here and bind to them. This way dynamic connect works.

 *   - Start sink pipeline, if not running

 *   - Then run current pipe

	/*

	 * find which sink it is connected to, bind with the sink,

	 * if sink is not started, start sink pipe first, then start

	 * this pipe

 Start source pipe last after starting all sinks */

		/*

		 * here we will check widgets in sink pipelines, so that can

		 * be any widgets type and we are only interested if they are

		 * ones used for SKL so check that first

/*

 * in the Post-PMU event of mixer we need to do following:

 *   - Check if this pipe is running

 *   - if not, then

 *	- bind this pipeline to its source pipeline

 *	  if source pipe is already running, this means it is a dynamic

 *	  connection and we need to bind only to that pipe

 *	- start this pipeline

	/*

	 * If source pipe is already started, that means source is driving

	 * one more sink before this sink got connected, Since source is

	 * started, bind this sink to source and start this pipe.

		/*

		 * check pipe state, then no need to bind or start the

		 * pipe

 set module params after bind */

/*

 * in the Pre-PMD event of mixer we need to do following:

 *   - Stop the pipe

 *   - find the source connections and remove that from dapm_path_list

 *   - unbind with source pipelines if still connected

 Stop the pipe */

/*

 * in the Post-PMD event of mixer we need to do following:

 *   - Unbind the modules within the pipeline

 *   - Delete the pipeline (modules are not required to be explicitly

 *     deleted, pipeline delete is enough here

			/*

			 * When the destination module is deleted, Unbind the

			 * modules from deferred bind list.

			/*

			 * When the source module is deleted, remove this entry

			 * from the deferred bind list.

/*

 * in the Post-PMD event of PGA we need to do following:

 *   - Stop the pipeline

 *   - In source pipe is connected, unbind with source pipelines

 Stop the pipe since this is a mixin module */

			/*

			 * This is a connecter and if path is found that means

			 * unbind between source and sink has not happened yet

/*

 * In modelling, we assume there will be ONLY one mixer in a pipeline. If a

 * second one is required that is created as another pipe entity.

 * The mixer is responsible for pipe management and represent a pipeline

 * instance

/*

 * In modelling, we assumed rest of the modules in pipeline are PGA. But we

 * are interested in last PGA (leaf PGA) in a pipeline to disconnect with

 * the sink when it is running (two FE to one BE or one FE to two BE)

 * scenarios

 decrement size for TLV header */

 check size as we don't want to send kernel data */

 enum control index 0 is INVALID, so no channels to be set */

 No valid channel selection map for index 0, so offset by 1 */

 channel type enum map to number of chanels for that type */

/*

 * Fill the dma id for host and link. In case of passthrough

 * pipeline, this will both host and link in the same

 * pipeline, so need to copy the link and host based on dev_type

/*

 * The FE params are passed by hw_params of the DAI.

 * On hw_params, the params are stored in Gateway module of the FE and we

 * need to calculate the format in DSP module configuration, that

 * conversion is done here

 set the hw_params */

	/*

	 * 16 bit is 16 bit container whereas 24 bit is in 32 bit

	 * container so update bit depth accordingly

/*

 * Query the module config for the FE DAI

 * This is used to find the hw_params set for that DAI and apply to FE

 * pipeline

/*

 * Fill the BE gateway parameters

 * The BE gateway expects a blob of parameters which are kept in the ACPI

 * NHLT blob, so query the blob for interface type (i2s/pdm) and instance.

 * The port can have multiple settings so pick based on the pipeline

 * parameters

 update the blob based on virtual bus_id*/

/*

 * BE hw_params can be a source parameters (capture) or sink parameters

 * (playback). Based on sink and source we need to either find the source

 * list or the sink list and set the pipeline parameters

/*

 * Add pipeline by parsing the relevant tokens

 * Return an existing pipe if the pipe already exists.

/*

 * Parse for pin config specific tokens to fill up the

 * module private data

/*

 * Fill up input/output module config format based

 * on the direction

/*

 * Resource table in the manifest has pin specific resources

 * like pin and pin buffer size

/*

 * Fill module specific resources from the manifest's resource

 * table like CPS, DMA size, mem_pages.

 ignore unused tokens */

/*

 * Parse tokens to fill up the module private data

	/*

	 * If the manifest structure contains no modules, fill all

	 * the module data to 0th index.

	 * res_idx and fmt_idx are default set to 0.

	/*

	 * SKL_TKN_U32_DIR_PIN_COUNT token has the value for both

	 * direction and the pin count. The first four bits represent

	 * direction and next four the pin count.

/*

 * Parse the vendor array for specific tokens to construct

 * module private data

/*

 * Every data block is preceded by a descriptor to read the number

 * of data blocks, they type of the block and it's size

 Functions to parse private data from configuration file format v4 */

/*

 * Add pipeline from topology binary into driver pipeline list

 *

 * If already added we return that instance

 * Otherwise we create a new instance and add into driver list

/*

 * Parse the private data for the token and corresponding value.

 * The private data can have multiple data blocks. So, a data block

 * is preceded by a descriptor for number of blocks and a descriptor

 * for the type and size of the suceeding data block.

	/*

	 * v4 configuration files have a valid UUID at the start of

	 * the widget's private data.

 Read the NUM_DATA_BLOCKS descriptor */

 Read the BLOCK_TYPE and BLOCK_SIZE descriptor */

/*

 * Topology core widget load callback

 *

 * This is used to save the private data for each widget which gives

 * information to the driver about module and pipeline parameters which DSP

 * FW expects like ids, resource values, formats etc

	/*

	 * module binary can be loaded later, so set it to query when

	 * module is load for a use case

 To provide backward compatibility, set default as SKL_PARAM_INIT */

 Parse private data for tuples */

 Fill private data */

		/*

		 * now that the control initializations are done, remove

		 * write permission for the DMIC configuration enums to

		 * avoid conflicts between NHLT settings and user interaction

/*

 * Fill the manifest structure by parsing the tokens based on the

 * type.

/*

 * Parse manifest private data for tokens. The private data block is

 * preceded by descriptors for type and size of data block.

 Read the NUM_DATA_BLOCKS descriptor */

 Read the BLOCK_TYPE and BLOCK_SIZE descriptor */

 proceed only if we have private data defined */

/*

 * A pipe can have multiple modules, each of them will be a DAPM widget as

 * well. While managing a pipeline we need to get the list of all the

 * widgets in a pipelines, so this helper - skl_tplg_create_pipe_widget_list()

 * helps to get the SKL type widgets in that pipeline

/*

 * SKL topology init routine

 clean up topology */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright(c) 2015-17 Intel Corporation

/*

 *  skl-ssp-clk.c - ASoC skylake ssp clock driver

 Remove TLV Header size */

 Remove TLV Header size */

 Sends dma control IPC to turn the clock ON/OFF */

 1 to enable mclk, 0 to enable sclk */

 copy blob */

 copy additional dma controls information */

 Not supported by clk driver. Implemented to satisfy clk fw */

/*

 * prepare/unprepare are used instead of enable/disable as IPC will be sent

 * in non-atomic context.

 Register Parent clock */

 Assign fmt_config to clk_data */

 Register Parent clock */

		/*

		 * Only register valid clocks

		 * i.e. for which nhlt entry is present.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * skl-sst-ipc.c - Intel skl IPC Support

 *

 * Copyright (C) 2014-15, Intel Corporation.

 Global Message - Generic */

 Global Message - Reply */

 Global Notification Message */

 Pipeline operations */

 Create pipeline message */

 Set pipeline state message */

 Module operations primary register */

 Init instance message extension register */

 Bind/Unbind message extension register */

 Load Module count */

 Save pipeline messgae extension register */

 Large Config message extension register */

 Set D0ix IPC extension register */

 Global Message Types */

 Retrieves firmware version */

 Maximum message number */

 Module Message Types */

 Lock to be held by caller */

 check D0i3 support */

 Attempt D0i0 or D0i3 based on state */

			/*

			 * Per HW recomendation, After phrase detection,

			 * clear the CGCTL.MISCBDCGE.

			 *

			 * This will be set back on stream closure

 first process the header */

 copy the rx data from the mailbox */

 Here we handle IPC interrupts only */

 reply message from DSP */

 clear DONE bit - tell DSP we have completed the operation */

 unmask Done interrupt */

 New message from DSP */

 Handle Immediate reply from DSP Core */

 clear  busy interrupt */

 continue to send any remaining messages... */

 enable IPC DONE interrupt */

 Enable IPC BUSY interrupt */

 disable IPC DONE interrupt */

 Disable IPC BUSY interrupt */

 Disable IPC DONE interrupt */

 Disable IPC BUSY interrupt */

 param_block_size must be in dwords */

/*

 * In order to load a module we need to send IPC to initiate that. DMA will

 * performed to load the module memory. The FW supports multiple module load

 * at single shot, so we can send IPC with N modules represented by

 * module_cnt

 clear the fields */

 fill the fields */

	/*

	 * Use the nopm IPC here as we dont want it checking for D0iX

 SPDX-License-Identifier: GPL-2.0-only

 /*

 *  sst-atom-controls.c - Intel MID Platform driver DPCM ALSA controls for Mrfld

 *

 *  Copyright (C) 2013-14 Intel Corp

 *  Author: Omair Mohammed Abdullah <omair.m.abdullah@intel.com>

 *	Vinod Koul <vinod.koul@intel.com>

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 *  In the dpcm driver modelling when a particular FE/BE/Mixer/Pipe is active

 *  we forward the settings and parameters, rest we keep the values  in

 *  driver and forward when DAPM enables them

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

/**

 * sst_fill_and_send_cmd - generate the IPC message and send it to the FW

 * @drv: sst_data

 * @ipc_msg: type of IPC (CMD, SET_PARAMS, GET_PARAMS)

 * @block: block index

 * @task_id: task index

 * @pipe_id: pipe index

 * @cmd_data: the IPC payload

 * @len: length of data to be sent

/*

 * tx map value is a bitfield where each bit represents a FW channel

 *

 *			3 2 1 0		# 0 = codec0, 1 = codec1

 *			RLRLRLRL	# 3, 4 = reserved

 *

 * e.g. slot 0 rx map =	00001100b -> data from slot 0 goes into codec_in1 L,R

 default rx map */

/*

 * rx map value is a bitfield where each bit represents a slot

 *

 *			  76543210	# 0 = slot 0, 1 = slot 1

 *

 * e.g. codec1_0 tx map = 00000101b -> data from codec_out1_0 goes into slot 0, 2

 default tx map */

/*

 * NOTE: this is invoked with lock held

/**

 * sst_slot_get - get the status of the interleaver/deinterleaver control

 * @kcontrol: control pointer

 * @ucontrol: User data

 * Searches the map where the control status is stored, and gets the

 * channel/slot which is currently set for this enumerated control. Since it is

 * an enumerated control, there is only one possible value.

 search which slot/channel has this bit set - there should be only one */

/* sst_check_and_send_slot_map - helper for checking power state and sending

 * slot map cmd

 *

 * called with lock held

/**

 * sst_slot_put - set the status of interleaver/deinterleaver control

 * @kcontrol: control pointer

 * @ucontrol: User data

 * (de)interleaver controls are defined in opposite sense to be user-friendly

 *

 * Instead of the enum value being the value written to the register, it is the

 * register address; and the kcontrol number (register num) is the value written

 * to the register. This is so that there can be only one value for each

 * slot/channel since there is only one control for each slot/channel.

 *

 * This means that whenever an enum is set, we need to clear the bit

 * for that kcontrol_no for all the interleaver OR deinterleaver registers

 first clear all registers of this bit */

 kctl set to 'none' and we reset the bits so send IPC */

 offset by one to take "None" into account */

bc->max includes sizeof algos + length field*/

/**

 * sst_find_and_send_pipe_algo - send all the algo parameters for a pipe

 * @drv: sst_data

 * @pipe: string identifier

 * @ids: list of algorithms

 * The algos which are in each pipeline are sent to the firmware one by one

 *

 * Called with lock held

if pipe is enabled, need to send the algo params from here*/

/**

 * sst_send_gain_cmd - send the gain algorithm IPC to the FW

 * @drv: sst_data

 * @gv:the stored value of gain (also contains rampduration)

 * @task_id: task index

 * @loc_id: location/position index

 * @module_id: module index

 * @mute: flag that indicates whether this was called from the

 *  digital_mute callback or directly. If called from the

 *  digital_mute callback, module will be muted/unmuted based on this

 *  flag. The flag is always 0 if called directly.

 *

 * Called with sst_data.lock held

 *

 * The user-set gain value is sent only if the user-controllable 'mute' control

 * is OFF (indicated by gv->mute). Otherwise, the mute value (MIN value) is

 * sent.

 we are with lock held, so call the unlocked api  to send */

 Look up table to convert MIXER SW bit regs to SWM inputs */

/**

 * fill_swm_input - fill in the SWM input ids given the register

 * @cmpnt: ASoC component

 * @swm_input: array of swm_input_ids

 * @reg: the register value is a bit-field inicated which mixer inputs are ON.

 *

 * Use the lookup table to get the input-id and fill it in the

 * structure.

/*

 * called with lock held

	/*

	 * Identify which mixer input is on and send the bitmap of the

	 * inputs as an IPC to the DSP.

 MMX_SET_SWM == SBA_SET_SWM */

 SBA mixers - 16 inputs */

 18 SBA mixers */

/*

 * sst_handle_vb_timer - Start/Stop the DSP scheduler

 *

 * The DSP expects first cmd to be SBA_VB_START, so at first startup send

 * that.

 * DSP expects last cmd to be SBA_VB_IDLE, so at last shutdown send that.

 *

 * Do refcount internally so that we send command only at first start

 * and last end. Since SST driver does its own ref count, invoke sst's

 * power ops always!

	/*

	 * Send the command only if this call is the first enable or last

	 * disable

/*

 * sst_ssp_config - contains SSP configuration for media UC

 * this can be overwritten by set_dai_xxx APIs

 MMX_SET_MEDIA_PATH == SBA_SET_MEDIA_PATH */

 48khz */

 stereo/Mono */

 24bit left justified */

 Algo sequence: Gain - DRP - FIR - IIR */

 Media Paths */

 MediaX IN paths are set via ALLOC, so no SET_MEDIA_PATH command */

 SBA PCM Paths */

 SBA Loops */

 Media Mixers */

 SBA PCM mixers */

 SBA Loop mixers */

 SBA Backend mixers */

 not supported by FW */

 not supported by FW */

 Gain helper with min/max set */

/* the SST_GAIN macro above will create three alsa controls for each

 * instance invoked, gain, mute and ramp duration, which use the same gain

 * cell sst_gain to keep track of data

 * To calculate number of gain cell instances we need to device by 3 in

 * below caulcation for gain cell memory.

 * This gets rid of static number and issues while adding new controls

allocate space to cache the algo parameters in the driver*/

/**

 * sst_send_pipe_gains - send gains for the front-end DAIs

 * @dai: front-end dai

 * @stream: direction

 * @mute: boolean indicating mute status

 *

 * The gains in the pipes connected to the front-ends are muted/unmuted

 * automatically via the digital_mute() DAPM callback. This function sends the

 * gains for the front-end pipes.

/**

 * sst_fill_module_list - populate the list of modules/gains for a pipe

 * @kctl: kcontrol pointer

 * @w: dapm widget

 * @type: widget type

 *

 * Fills the widget pointer in the kcontrol private data, and also fills the

 * kcontrol pointer in the widget private data.

 *

 * Widget pointer is used to send the algo/gain in the .put() handler if the

 * widget is powerd on.

 *

 * Kcontrol pointer is used to send the algo/gain in the widget power ON/OFF

 * event handler. Each widget (pipe) has multiple algos stored in the algo_list.

/**

 * sst_fill_widget_module_info - fill list of gains/algos for the pipe

 * @w: pipe modeled as a DAPM widget

 * @component: ASoC component

 *

 * Fill the list of gains/algos for the widget by looking at all the card

 * controls and comparing the name of the widget with the first part of control

 * name. First part of control name contains the pipe name (widget name).

/**

 * sst_fill_linked_widgets - fill the parent pointer for the linked widget

 * @component: ASoC component

 * @ids: sst_ids array

/**

 * sst_map_modules_to_pipe - fill algo/gains list for all pipes

 * @component: ASoC component

 fill linked widgets */

 Initialize algo control params */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  sst_mfld_platform.c - Intel MID Platform driver

 *

 *  Copyright (C) 2010-2014 Intel Corp

 *  Author: Vinod Koul <vinod.koul@intel.com>

 *  Author: Harsha Priya <priya.harsha@intel.com>

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 Reserved, not in use */

 helper functions */

 PCM stream via ALSA interface */

 index 0 is not used in stream map */

 For pcm streams */

 set codec params and inform SST driver the same */

 fill the device type and stream id to pass to SST driver */

 get the sst ops */

 allocate memory for SST API set */

	/*

	 * Make sure the period to be multiple of 1ms to align the

	 * design of firmware. Apply same rule to buffer size to make

	 * sure alsa could always find a value for period size

	 * regardless the buffer size given by user space.

 Make sure, that the period size is always even */

 BE CPU  Dais */

 suspend all pcms first */

 set the SSPs to idle */

 restart SSPs */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  sst_mfld_platform.c - Intel MID Platform driver

 *

 *  Copyright (C) 2010-2014 Intel Corp

 *  Author: Vinod Koul <vinod.koul@intel.com>

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 compress stream operations */

 get the sst ops */

 Turn on LPE */

 Turn off LPE */

need to check*/

 construct fw structure for this*/

 fill the device type and stream id to pass to SST driver */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  sst.c - Intel SST Driver for audio engine

 *

 *  Copyright (C) 2008-14	Intel Corp

 *  Authors:	Vinod Koul <vinod.koul@intel.com>

 *		Harsha Priya <priya.harsha@intel.com>

 *		Dharageswari R <dharageswari.r@intel.com>

 *		KP Jeeja <jeeja.kp@intel.com>

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 Interrupt arrived, check src */

 Clear done bit */

 write 1 to clear status register */;

 we can send more messages to DSP so trigger work */

 message from dsp so copy that */

 pvt_id 0 reserved for async messages */

 we use memcpy, so set to 0 */

 Register the ISR */

 default intr are unmasked so set this as masked */

	/*

	 * For acpi devices, the actual physical device state is

	 * initially active. So change the state to active before

	 * enabling the pm

 save fw context */

 Move the SST state to Reset */

 check first if we are already in SW reset */

	/*

	 * check if any stream is active and running

	 * they should already by suspend by soc_suspend

 Move the SST state to Reset */

 tell DSP we are suspending */

 save the memories */

 we have to restore the memory saved */

 start and wait for ack */

 FW download failed due to timeout */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  sst_stream.c - Intel SST Driver for audio engine

 *

 *  Copyright (C) 2008-14 Intel Corp

 *  Authors:	Vinod Koul <vinod.koul@intel.com>

 *		Harsha Priya <priya.harsha@intel.com>

 *		Dharageswari R <dharageswari.r@intel.com>

 *		KP Jeeja <jeeja.kp@intel.com>

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	/*

	 * fill channel map params for multichannel support.

	 * Ideally channel map should be received from upper layers

	 * for multichannel support.

	 * Currently hardcoding as per FW reqm.

/**

 * sst_realloc_stream - Send msg for (re-)allocating a stream using the

 * @sst_drv_ctx: intel_sst_drv context pointer

 * @str_id: stream ID

 *

 * Send a msg for (re-)allocating a stream using the parameters previously

 * passed to sst_alloc_stream_mrfld() for the same stream ID.

 * Return: 0 or negative errno value.

 alloc failed, so reset the state to uninit */

/**

 * sst_start_stream - Send msg for a starting stream

 * @sst_drv_ctx: intel_sst_drv context pointer

 * @str_id: stream ID

 *

 * This function is called by any function which wants to start

 * a stream.

		/*

		 * copy the reply and send back

		 * we need to update only sz and payload

/**

 * sst_pause_stream - Send msg for a pausing stream

 * @sst_drv_ctx: intel_sst_drv context pointer

 * @str_id: stream ID

 *

 * This function is called by any function which wants to pause

 * an already running stream.

/**

 * sst_resume_stream - Send msg for resuming stream

 * @sst_drv_ctx: intel_sst_drv context pointer

 * @str_id: stream ID

 *

 * This function is called by any function which wants to resume

 * an already paused stream.

		/*

		 * Stream was running before suspend and re-created on resume,

		 * start it to get back to running state.

		/*

		 * Stream was idle before suspend and re-created on resume,

		 * keep it as is.

/**

 * sst_drop_stream - Send msg for stopping stream

 * @sst_drv_ctx: intel_sst_drv context pointer

 * @str_id: stream ID

 *

 * This function is called by any function which wants to stop

 * a stream.

/**

 * sst_drain_stream - Send msg for draining stream

 * @sst_drv_ctx: intel_sst_drv context pointer

 * @str_id: stream ID

 * @partial_drain: boolean indicating if a gapless transition is taking place

 *

 * This function is called by any function which wants to drain

 * a stream.

	/*

	 * with new non blocked drain implementation in core we dont need to

	 * wait for respsonse, and need to only invoke callback for drain

	 * complete

/**

 * sst_free_stream - Frees a stream

 * @sst_drv_ctx: intel_sst_drv context pointer

 * @str_id: stream ID

 *

 * This function is called by any function which wants to free

 * a stream.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  sst_pci.c - SST (LPE) driver init file for pci enumeration.

 *

 *  Copyright (C) 2008-14	Intel Corp

 *  Authors:	Vinod Koul <vinod.koul@intel.com>

 *		Harsha Priya <priya.harsha@intel.com>

 *		Dharageswari R <dharageswari.r@intel.com>

 *		KP Jeeja <jeeja.kp@intel.com>

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 map registers */

 DDR base */

 check that the relocated IMR base matches with FW Binary */

 SHIM */

 Shared SRAM */

 IRAM */

 DRAM */

/*

 * intel_sst_probe - PCI probe function

 *

 * @pci:	PCI device structure

 * @pci_id: PCI device ID structure

 *

 Init the device */

/**

 * intel_sst_remove - PCI remove function

 *

 * @pci:	PCI device structure

 *

 * This function is called by OS when a device is unloaded

 * This frees the interrupt etc

 PCI Routines */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  sst_drv_interface.c - Intel SST Driver for audio engine

 *

 *  Copyright (C) 2008-14 Intel Corp

 *  Authors:	Vinod Koul <vinod.koul@intel.com>

 *		Harsha Priya <priya.harsha@intel.com>

 *		Dharageswari R <dharageswari.r@intel.com)

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 str_id is valid, so stream is alloacted */

/*

 * sst_get_sfreq - this function returns the frequency of the stream

 *

 * @str_param : stream params

/*

 * sst_get_num_channel - get number of channels for the stream

 *

 * @str_param : stream params

/*

 * sst_get_stream - this function prepares for stream allocation

 *

 * @str_param : stream param

 stream is not allocated, we are allocating */

 store sampling freq */

/*

 * sst_open_pcm_stream - Open PCM interface

 *

 * @str_param: parameters of pcm stream

 *

 * This function is called by MID sound card driver to open

 * a new pcm interface

 update bytes sent */

 50KB */

 1024KB */

/*

 * sst_close_pcm_stream - Close PCM interface

 *

 * @str_id: stream id to be closed

 *

 * This function is called by MID sound card driver to close

 * an existing pcm interface

/*

 * sst_set_byte_stream - Set generic params

 *

 * @cmd: control cmd to be set

 * @arg: command argument

 *

 * This function is called by MID sound card driver to configure

 * SST runtime params.

/*

 * sst_register - function to register DSP

 *

 * This functions registers DSP with the platform driver

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  sst_pvt.c - Intel SST Driver for audio engine

 *

 *  Copyright (C) 2008-14	Intel Corp

 *  Authors:	Vinod Koul <vinod.koul@intel.com>

 *		Harsha Priya <priya.harsha@intel.com>

 *		Dharageswari R <dharageswari.r@intel.com>

 *		KP Jeeja <jeeja.kp@intel.com>

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

/*

 * sst_wait_interruptible - wait on event

 *

 * @sst_drv_ctx: Driver context

 * @block: Driver block to wait on

 *

 * This function waits without a timeout (and is interruptable) for a

 * given block event

 event wake */

/*

 * sst_wait_timeout - wait on event for timeout

 *

 * @sst_drv_ctx: Driver context

 * @block: Driver block to wait on

 *

 * This function waits with a timeout value (and is not interruptible) on a

 * given block event

	/*

	 * NOTE:

	 * Observed that FW processes the alloc msg and replies even

	 * before the alloc thread has finished execution

 event wake */

/*

 * sst_create_ipc_msg - create a IPC message

 *

 * @arg: ipc message

 * @large: large or short message

 *

 * this function allocates structures to send a large or short

 * message to the firmware

/*

 * sst_create_block_and_ipc_msg - Creates IPC message and sst block

 * @arg: passed to sst_create_ipc_message API

 * @large: large or short message

 * @sst_drv_ctx: sst driver context

 * @block: return block allocated

 * @msg_id: IPC

 * @drv_id: stream id or private id

/*

 * sst_clean_stream - clean the stream context

 *

 * @stream: stream structure

 *

 * this function resets the stream contexts

 * should be called in free

/*

 * sst_assign_pvt_id - assign a pvt id for stream

 *

 * @sst_drv_ctx : driver context

 *

 * this function assigns a private id for calls that dont have stream

 * context yet, should be called with lock held

 * uses bits for the id, and finds first free bits and assigns that

 find first zero index from lsb */

 toggle the index */

 Get the difference from 512MB aligned base addr */

 relocate the base */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * sst_acpi.c - SST (LPE) driver init file for ACPI enumeration.

 *

 * Copyright (c) 2013, Intel Corporation.

 *

 *  Authors:	Ramesh Babu K V <Ramesh.Babu@intel.com>

 *  Authors:	Omair Mohammed Abdullah <omair.m.abdullah@intel.com>

 LPE viewpoint addresses */

 virtual addr in LPE */

 BYTCR has different BIOS from BYT */

/* Cherryview (Cherrytrail and Braswell) uses same mrfld dpcm fw as Baytrail,

 * so pdata is same as Baytrail, minus the streams_lost_on_suspend quirk.

 All ACPI resource request here */

 Get Shim addr */

 reassign physical address to LPE viewpoint address */

 Get mailbox addr */

 reassign physical address to LPE viewpoint address */

 Find the IRQ */

 override resource info */

 update machine parameters */

	/*

	 * Create platform device for sst machine driver,

	 * pass machine info as pdata

 Fill sst platform data */

/**

* sst_acpi_remove - remove function

*

* @pdev:	platform device structure

*

* This function is called by OS when a device is unloaded

* This frees the interrupt etc

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  sst_ipc.c - Intel SST Driver for audio engine

 *

 *  Copyright (C) 2008-14 Intel Corporation

 *  Authors:	Vinod Koul <vinod.koul@intel.com>

 *		Harsha Priya <priya.harsha@intel.com>

 *		Dharageswari R <dharageswari.r@intel.com>

 *		KP Jeeja <jeeja.kp@intel.com>

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

/*

 * while handling the interrupts, we need to check for message status and

 * then if we are blocking for a message

 *

 * here we are unblocking the blocked ones, this is based on id we have

 * passed and search that for block threads.

 * We will not find block in two cases

 *  a) when its small message and block in not there, so silently ignore

 *  them

 *  b) when we are actually not able to find the block (bug perhaps)

 *

 *  Since we have bit of small messages we can spam kernel log with err

 *  print on above so need to keep as debug prints which should be enabled

 *  via dynamic debug while debugging IPC issues

 toggle the index position of pvt_id */

 queue is empty, nothing to send */

 copy msg from list */

 write 1 to clear*/

 Set IA done bit */

 un mask busy interrupt */

/*

 * process_fw_init - process the FW init msg

 *

 * @msg: IPC message mailbox data from FW

 *

 * This function processes the FW init msg from FW

 * marks FW state and prints debug info of loaded FW

 Save FW version */

 If stream is dropped, skip processing this message*/

 Check for async messages first */

FW sent async large message*/

 FW sent short error response for an IPC */

 32-bit FW error code in msg_low */

	/*

	 * Process all valid responses

	 * if it is a large message, the payload contains the size to

	 * copy from mailbox

 Copy command id so that we can use to put sst to reset */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  sst_dsp.c - Intel SST Driver for audio engine

 *

 *  Copyright (C) 2008-14	Intel Corp

 *  Authors:	Vinod Koul <vinod.koul@intel.com>

 *		Harsha Priya <priya.harsha@intel.com>

 *		Dharageswari R <dharageswari.r@intel.com>

 *		KP Jeeja <jeeja.kp@intel.com>

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 *  This file contains all dsp controlling functions like firmware download,

 * setting/resetting dsp cores, etc

	/* __iowrite32_copy uses 32-bit count values so divide by 4 for

	 * right count in words

	/* __ioread32_copy uses 32-bit count values so divide by 4 for

	 * right count in words

/**

 * intel_sst_reset_dsp_mrfld - Resetting SST DSP

 * @sst_drv_ctx: intel_sst_drv context pointer

 *

 * This resets DSP in case of MRFLD platfroms

/**

 * sst_start_mrfld - Start the SST DSP processor

 * @sst_drv_ctx: intel_sst_drv context pointer

 *

 * This starts the DSP in MERRIFIELD platfroms

 Read the header information from the data pointer */

 verify FW */

 Invalid FW signature */

/*

 * sst_fill_memcpy_list - Fill the memcpy list

 *

 * @memcpy_list: List to be filled

 * @destn: Destination addr to be filled in the list

 * @src: Source addr to be filled in the list

 * @size: Size to be filled in the list

 *

 * Adds the node to the list after required fields

 * are populated in the node

/**

 * sst_parse_module_memcpy - Parse audio FW modules and populate the memcpy list

 *

 * @sst_drv_ctx		: driver context

 * @module		: FW module header

 * @memcpy_list	: Pointer to the list to be populated

 * Create the memcpy list as the number of block to be copied

 * returns error or 0 if module sizes are proper

/**

 * sst_parse_fw_memcpy - parse the firmware image & populate the list for memcpy

 *

 * @ctx			: pointer to drv context

 * @size		: size of the firmware

 * @fw_list		: pointer to list_head to be populated

 * This function parses the FW image and saves the parsed image in the list

 * for memcpy

/**

 * sst_do_memcpy - function initiates the memcpy

 *

 * @memcpy_list: Pter to memcpy list on which the memcpy needs to be initiated

 *

 * Triggers the memcpy

 Free the list */

/*

 * sst_request_fw - requests audio fw from kernel and saves a copy

 *

 * This function requests the SST FW from the kernel, parses it and

 * saves a copy in the driver context

/*

 * Writing the DDR physical base to DCCM offset

 * so that FW can use it to setup TLB

/**

 * sst_load_fw - function to load FW into DSP

 * @sst_drv_ctx: intel_sst_drv context pointer

 *

 * Transfers the FW to DSP using dma/memcpy

 Prevent C-states beyond C6 */

 Write the DRAM/DCCM config before enabling FW */

 bring sst out of reset */

 FW download failed due to timeout */

 Re-enable Deeper C-states beyond C6 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * STM32 ALSA SoC Digital Audio Interface (SPDIF-rx) driver.

 *

 * Copyright (C) 2017, STMicroelectronics - All Rights Reserved

 * Author(s): Olivier Moysan <olivier.moysan@st.com> for STMicroelectronics.

 SPDIF-rx Register Map */

 Bit definition for SPDIF_CR register */

 Bit definition for SPDIFRX_IMR register */

 Bit definition for SPDIFRX_SR register */

 Bit definition for SPDIFRX_IFCR register */

 Bit definition for SPDIFRX_DR register (DRFMT = 0b00) */

 Bit definition for SPDIFRX_DR register (DRFMT = 0b01) */

 Bit definition for SPDIFRX_DR register (DRFMT = 0b10) */

 Bit definition for SPDIFRX_CSR register */

 Bit definition for SPDIFRX_DIR register */

 Bit definition for SPDIFRX_VERR register */

 Bit definition for SPDIFRX_IDR register */

 Bit definition for SPDIFRX_SIDR register */

 192 CS bits in S/PDIF frame. i.e 24 CS bytes */

/*

 * CSR register is retrieved as a 32 bits word

 * It contains 1 channel status byte and 2 user data bytes

 * 2 S/PDIF frames are acquired to get all CS/UB bits

/**

 * struct stm32_spdifrx_data - private data of SPDIFRX

 * @pdev: device data pointer

 * @base: mmio register base virtual address

 * @regmap: SPDIFRX register map pointer

 * @regmap_conf: SPDIFRX register map configuration pointer

 * @cs_completion: channel status retrieving completion

 * @kclk: kernel clock feeding the SPDIFRX clock generator

 * @dma_params: dma configuration data for rx channel

 * @substream: PCM substream data pointer

 * @dmab: dma buffer info pointer

 * @ctrl_chan: dma channel for S/PDIF control bits

 * @desc:dma async transaction descriptor

 * @slave_config: dma slave channel runtime config pointer

 * @phys_addr: SPDIFRX registers physical base address

 * @lock: synchronization enabling lock

 * @irq_lock: prevent race condition with IRQ on stream state

 * @cs: channel status buffer

 * @ub: user data buffer

 * @irq: SPDIFRX interrupt line

 * @refcount: keep count of opened DMA channels

 Sync enabling lock */

 Prevent race condition on stream state */

 Enable IRQs */

		/*

		 * Start sync if SPDIFRX is still in idle state.

		 * SPDIFRX reception enabled when sync done

		/*

		 * SPDIFRX configuration:

		 * Wait for activity before starting sync process. This avoid

		 * to issue sync errors when spdif signal is missing on input.

		 * Preamble, CS, user, validity and parity error bits not copied

		 * to DR register.

 dummy read to clear CSRNE and RXNE in status register */

  By default CS bits are retrieved from channel A */

 Channel status control */

 User bits control */

 SERR, TERR, FERR IRQs are generated if IFEIE is set */

 Clear IRQs */

 Enable spdifrx */

 SPDIFRX is in STATE_STOP. Disable SPDIFRX to clear errors */

 If SPDIFRX was in STATE_SYNC, retry synchro */

	/*

	 * Set buswidth to 4 bytes for all data formats.

	 * Packed format: transfer 2 x 2 bytes samples

	 * Left format: transfer 1 x 3 bytes samples + 1 dummy byte

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  STM32 ALSA SoC Digital Audio Interface (I2S) driver.

 *

 * Copyright (C) 2017, STMicroelectronics - All Rights Reserved

 * Author(s): Olivier Moysan <olivier.moysan@st.com> for STMicroelectronics.

 Bit definition for SPI2S_CR1 register */

 Bit definition for SPI_CFG2 register */

 Bit definition for SPI_CFG1 register */

 Bit definition for SPI2S_IER register */

 Bit definition for SPI2S_SR register */

 Bit definition for SPI_IFCR register */

 Bit definition for SPI_I2SCGFR register */

 Registers below apply to I2S version 1.1 and more */

 Bit definition for SPI_HWCFGR register */

 Bit definition for SPI_VERR register */

 Bit definition for SPI_IPIDR register */

 Bit definition for SPI_SIDR register */

/**

 * struct stm32_i2s_data - private data of I2S

 * @regmap_conf: I2S register map configuration pointer

 * @regmap: I2S register map pointer

 * @pdev: device data pointer

 * @dai_drv: DAI driver pointer

 * @dma_data_tx: dma configuration data for tx channel

 * @dma_data_rx: dma configuration data for tx channel

 * @substream: PCM substream data pointer

 * @i2sclk: kernel clock feeding the I2S clock generator

 * @i2smclk: master clock from I2S mclk provider

 * @pclk: peripheral clock driving bus interface

 * @x8kclk: I2S parent clock for sampling frequencies multiple of 8kHz

 * @x11kclk: I2S parent clock for sampling frequencies multiple of 11kHz

 * @base:  mmio register base virtual address

 * @phys_addr: I2S registers physical base address

 * @lock_fd: lock to manage race conditions in full duplex mode

 * @irq_lock: prevent race condition with IRQ

 * @mclk_rate: master clock frequency (Hz)

 * @fmt: DAI protocol

 * @divider: prescaler division ratio

 * @div: prescaler div field

 * @odd: prescaler odd field

 * @refcount: keep count of opened streams on I2S

 * @ms_flg: master mode flag.

 Manage race conditions for full duplex */

 used to prevent race condition with IRQ */

 Check the parity of the divider */

 Compute the div prescaler */

 If div is 0 actual divider is 1 */

 Division by three is not allowed by I2S prescaler */

	/*

	 * Forge mclk clock name from parent clock name and suffix.

	 * String after "_" char is stripped in parent name.

 register mclk provider */

	/*

	 * winv = 0 : default behavior (high/low) for all standards

	 * ckpol = 0 for all standards.

 DSP_B not mapped on I2S PCM long format. 1 bit offset does not fit */

 DAI clock strobing */

 DAI clock master masks */

 MCLK generation is available only in master mode */

 Assume shutdown if requested frequency is 0Hz */

 Release mclk rate only if rate was actually set */

 If master clock is used, set parent clock now */

	/*

	 * mckl = mclk_ratio x ws

	 *   i2s mode : mclk_ratio = 256

	 *   dsp mode : mclk_ratio = 128

	 *

	 * mclk on

	 *   i2s mode : div = i2s_clk / (mclk_ratio * ws)

	 *   dsp mode : div = i2s_clk / (mclk_ratio * ws)

	 * mclk off

	 *   i2s mode : div = i2s_clk / (nb_bits x ws)

	 *   dsp mode : div = i2s_clk / (nb_bits x ws)

 master clock not enabled */

 Set bitclock and frameclock to their inactive state */

 As data length is either 16 or 32 bits, fixch always set */

 Enable i2s */

 dummy write to gate bus clocks */

 Buswidth will be set by framework */

 Get clocks */

 Register mclk provider if requested */

 Get irqs */

 Reset */

 Set SPI/I2S in i2s mode */

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * STM32 ALSA SoC Digital Audio Interface (SAI) driver.

 *

 * Copyright (C) 2016, STMicroelectronics - All Rights Reserved

 * Author(s): Olivier Moysan <olivier.moysan@st.com> for STMicroelectronics.

/*

 * Default settings for stm32 H7 socs and next.

 * These default settings will be overridden if the soc provides

 * support of hardware configuration registers.

 Enable peripheral clock to allow GCR register access */

 Enable peripheral clock to allow GCR register access */

 Configure sync client */

 Configure sync provider */

 init irqs */

 reset */

 Enable peripheral clock to allow register access */

/*

 * When pins are shared by two sai sub instances, pins have to be defined

 * in sai parent node. In this case, pins state is not managed by alsa fw.

 * These pins are managed in suspend/resume callbacks.

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * STM32 ALSA SoC Digital Audio Interface (SAI) driver.

 *

 * Copyright (C) 2016, STMicroelectronics - All Rights Reserved

 * Author(s): Olivier Moysan <olivier.moysan@st.com> for STMicroelectronics.

/**

 * struct stm32_sai_sub_data - private data of SAI sub block (block A or B)

 * @pdev: device data pointer

 * @regmap: SAI register map pointer

 * @regmap_config: SAI sub block register map configuration pointer

 * @dma_params: dma configuration data for rx or tx channel

 * @cpu_dai_drv: DAI driver data pointer

 * @cpu_dai: DAI runtime data pointer

 * @substream: PCM substream data pointer

 * @pdata: SAI block parent data pointer

 * @np_sync_provider: synchronization provider node

 * @sai_ck: kernel clock feeding the SAI clock generator

 * @sai_mclk: master clock from SAI mclk provider

 * @phys_addr: SAI registers physical base address

 * @mclk_rate: SAI block master clock frequency (Hz). set at init

 * @id: SAI sub block id corresponding to sub-block A or B

 * @dir: SAI block direction (playback or capture). set at init

 * @master: SAI block mode flag. (true=master, false=slave) set at init

 * @spdif: SAI S/PDIF iec60958 mode flag. set at init

 * @fmt: SAI block format. relevant only for custom protocols. set at init

 * @sync: SAI block synchronization mode. (none, internal or external)

 * @synco: SAI block ext sync source (provider setting). (none, sub-block A/B)

 * @synci: SAI block ext sync source (client setting). (SAI sync provider index)

 * @fs_length: frame synchronization length. depends on protocol settings

 * @slots: rx or tx slot number

 * @slot_width: rx or tx slot width in bits

 * @slot_mask: rx or tx active slots mask. set at init or at runtime

 * @data_size: PCM data width. corresponds to PCM substream width.

 * @spdif_frm_cnt: S/PDIF playback frame counter

 * @iec958: iec958 data

 * @ctrl_lock: control lock

 * @irq_lock: prevent race condition with IRQ

 protect resources accessed by controls */

 used to prevent race condition with IRQ */

	/*

	 * Forge mclk clock name from parent clock name and suffix.

	 * String after "_" char is stripped in parent name.

 register mclk provider */

 Assume shutdown if requested frequency is 0Hz */

 Release mclk rate only if rate was actually set */

 If master clock is used, set parent clock now */

 tx/rx mask set in machine init, if slot number defined in DT */

 Do not generate master by default */

 SCK active high for all protocols */

 Left justified */

 Right justified */

 DAI clock strobing. Invert setting previously set */

 Invert fs & sck */

 DAI clock master masks */

 codec is master */

 Set slave mode if sub-block is synchronized with another SAI */

 Enable ITs */

	/*

	 * DMA bursts increment is set to 4 words.

	 * SAI fifo threshold is set to half fifo, to keep enough space

	 * for DMA incoming bursts.

 DS bits in CR1 not set for SPDIF (size forced to 24 bits).*/

 Mode, data format and channel config */

	/*

	 * If SLOTSZ is set to auto in SLOTR, align slot width on data size

	 * By default slot width = data size, if not forced from DT

 Slot number is set to 2, if not specified in DT */

 The number of slots in the audio frame is equal to NBSLOT[3:0] + 1*/

 Set default slots mask if not already set from DT */

 Force the sample rate according to runtime rate */

		/* mclk on (NODIV=0)

		 *   mclk_rate = 256 * fs

		 *   MCKDIV = 0 if sai_ck < 3/2 * mclk_rate

		 *   MCKDIV = sai_ck / (2 * mclk_rate) otherwise

		 * mclk off (NODIV=1)

		 *   MCKDIV ignored. sck = sai_ck

		/*

		 * TDM mode :

		 *   mclk on

		 *      MCKDIV = sai_ck / (ws x 256)	(NOMCK=0. OSR=0)

		 *      MCKDIV = sai_ck / (ws x 512)	(NOMCK=0. OSR=1)

		 *   mclk off

		 *      MCKDIV = sai_ck / (frl x ws)	(NOMCK=1)

		 * Note: NOMCK/NODIV correspond to same bit.

 mclk-fs not set, master clock not active */

 Rate not already set in runtime structure */

 Enable SAI */

	/*

	 * DMA supports 4, 8 or 16 burst sizes. Burst size 4 is the best choice,

	 * as it allows bytes, half-word and words transfers. (See DMA fifos

	 * constraints).

 Buswidth will be set by framework at runtime */

 Next settings are not relevant for spdif mode */

 Configure synchronization */

 Configure synchro client and provider */

 Set channel status bit */

 No support of mmap in S/PDIF mode */

 5ms at 48kHz */

 avoid call to fmt_single_name() */

 DMA does not support 24 bits transfers */

 avoid call to fmt_single_name() */

 DMA does not support 24 bits transfers */

 Note: PDM registers not available for sub-block B */

	/*

	 * Do not manage peripheral clock through regmap framework as this

	 * can lead to circular locking issue with sai master clock provider.

	 * Manage peripheral clock directly in driver instead.

 Get direction property */

 Get spdif iec60958 property */

 Get synchronization property */

 Register mclk provider if requested */

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0

/*

 * This file is part of STM32 DFSDM ASoC DAI driver

 *

 * Copyright (C) 2017, STMicroelectronics - All Rights Reserved

 * Authors: Arnaud Pouliquen <arnaud.pouliquen@st.com>

 *          Olivier Moysan <olivier.moysan@st.com>

 IIO */

 PCM buffer */

 protect against race condition on iio state */

 Set IIO frequency if CODEC is master as clock comes from SPI_IN */

	/*

	 * This dummmy callback is requested by iio_channel_get_all_cb() API,

	 * but the stm32_dfsdm_get_buff_cb() API is used instead, to optimize

	 * DMA transfers.

 Associate iio channel */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ASoC driver for PROTO AudioCODEC (with a WM8731)

 *

 * Author:      Florian Meier, <koalo@koalo.de>

 *	      Copyright 2013

 This is fixed on this board */

 Set proto sysclk */

 speaker connected to LHPOUT/RHPOUT */

 mic is connected to Mic Jack, with WM8731 Mic Bias */

 audio machine driver */

 for cpus/codecs/platforms */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Atmel PDMIC driver

 *

 * Copyright (C) 2015 Atmel

 *

 * Author: Songjun Wu <songjun.wu@atmel.com>

 sentinel */

 cpu dai component */

 Clear all bits in the Control Register(PDMIC_CR) */

 Enable the overrun error interrupt */

 Disable the overrun error interrupt */

 Clean the PDMIC Converted Data Register */

 platform */

 codec */

 Mic Gain = dgain * 2^(-scale) */

 range from -90 dB to 90 dB */

 -90, -84 dB */

 -81, -78, -75, -72 dB */

 -70, -68 dB */

 -65 ~ -62 dB */

 -61 ~ -58 dB */

 -57 ~ -54 dB */

 -53 ~ -50 dB */

 -49 ~ -46 dB */

 -45 ~ -42 dB */

 -41 ~ -38 dB */

 -37 ~ -34 dB */

 -33 ~ -30 dB */

 -29 ~ -26 dB */

 -25 ~ -22 dB */

 -21 ~ -18 dB */

 -17 ~ -14 dB */

 -13 ~ -10 dB */

  -9 ~ -6 dB */

  -5 ~ -2 dB */

  -1 ~ 2 dB */

   3 ~ 6 dB */

   7 ~ 10 dB */

  11 ~ 14 dB */

  15 ~ 18 dB */

  19 ~ 22 dB */

  23 ~ 26 dB */

  27 ~ 30 dB */

  31 ~ 34 dB */

  35 ~ 38 dB */

  39 ~ 42 dB */

  43 ~ 46 dB */

  47 ~ 50 dB */

  51 ~ 54 dB */

  55 ~ 58 dB */

  59 ~ 62 dB */

  63 ~ 66 dB */

  67 ~ 70 dB */

  71 ~ 74 dB */

  75 ~ 78 dB */

  79 ~ 82 dB */

  83 ~ 86 dB */

  87 ~ 90 dB */

 PRESCAL = SELCK/(2*f_pdmic) - 1*/

 ASoC sound card */

 PDMIC interrupt handler */

 regmap configuration */

	/* The gclk clock frequency must always be three times

	 * lower than the pclk clock frequency

 Get the minimal and maximal sample rate that the microphone supports */

 register cpu dai */

 register platform */

 register sound card */

 SPDX-License-Identifier: GPL-2.0



 Driver for Microchip I2S Multi-channel controller



 Copyright (C) 2018 Microchip Technology Inc. and its subsidiaries



 Author: Codrin Ciubotariu <codrin.ciubotariu@microchip.com>

/*

 * ---- I2S Controller Register map ----

 Control Register */

 Mode Register A */

 Mode Register B */

 Status Register */

 Interrupt Enable Register A */

 Interrupt Disable Register A */

 Interrupt Mask Register A */

 Interrupt Status Register A */

 Interrupt Enable Register B */

 Interrupt Disable Register B */

 Interrupt Mask Register B */

 Interrupt Status Register B */

 Receiver Holding Register */

 Transmitter Holding Register */

 Receiver Holding Left 0 Register */

 Receiver Holding Right 0 Register */

 Receiver Holding Left 1 Register */

 Receiver Holding Right 1 Register */

 Receiver Holding Left 2 Register */

 Receiver Holding Right 2 Register */

 Receiver Holding Left 3 Register */

 Receiver Holding Right 3 Register */

 Transmitter Holding Left 0 Register */

 Transmitter Holding Right 0 Register */

 Transmitter Holding Left 1 Register */

 Transmitter Holding Right 1 Register */

 Transmitter Holding Left 2 Register */

 Transmitter Holding Right 2 Register */

 Transmitter Holding Left 3 Register */

 Transmitter Holding Right 3 Register */

 Version Register */

/*

 * ---- Control Register (Write-only) ----

 Receiver Enable */

 Receiver Disable */

 Clock Enable */

 Clock Disable */

 Transmitter Enable */

 Transmitter Disable */

 Software Reset */

/*

 * ---- Mode Register A (Read/Write) ----

 Left Justified */

 Transmitter uses one DMA channel ... */

 Left audio samples duplicated to right audio channel */

 I2SDO output of I2SC is internally connected to I2SDI input */

 Receiver uses one DMA channel ... */

 Left audio samples duplicated to right audio channel */

 x sample transmitted when underrun */

 Zero sample */

 Previous sample */

 select between peripheral clock and generated clock */

 Number of TDM Channels - 1 */

 Selected Clock to I2SMCC Master Clock ratio */

 TDM Frame Synchronization */

 Selected Clock to I2SMC Serial Clock ratio */

 Master Clock mode */

 0: No master clock generated*/

 1: master clock generated (internally generated clock drives I2SMCK pin) */

 Slot Width */

 0: slot is 32 bits wide for DATALENGTH = 18/20/24 bits. */

 1: slot is 24 bits wide for DATALENGTH = 18/20/24 bits. */

/*

 * ---- Mode Register B (Read/Write) ----

 all enabled I2S left channels are filled first, then I2S right channels */

/*

 * an enabled I2S left channel is filled, then the corresponding right

 * channel, until all channels are filled

/*

 * ---- Status Registers (Read-only) ----

 Receiver Enabled */

 Transmitter Enabled */

/*

 * ---- Interrupt Enable/Disable/Mask/Status Registers A ----

/*

 * ---- Interrupt Enable/Disable/Mask/Status Registers B ----

/*

 * ---- Version Register (Read-only) ----

	/*

	 * Tx/Rx ready interrupts are enabled when stopping only, to assure

	 * availability and to disable clocks if necessary

 We do not need SYSCLK */

 We don't support any kind of clock inversion */

 We can't generate only FSYNC */

 We can only reconfigure the IP when it's stopped */

 We do not support daisy chain */

 For code simplification */

	/*

	 * MCLK is Selected CLK / (2 * IMCKDIV),

	 * BCLK is Selected CLK / (2 * ISCKDIV);

	 * if IMCKDIV or ISCKDIV are 0, MCLK or BCLK = Selected CLK

 check if clocks returned only errors */

 Configure divisors */

 cpu is BCLK and LRC master */

 cpu is BCLK master */

 cpu is slave */

 for I2S and LEFT_J one pin is needed for every 2 channels */

 enable for interleaved format */

				/*

				 * Duplicate data for even-numbered channels

				 * to odd-numbered channels

	/*

	 * We must have the same burst size configured

	 * in the DMA transfer and in out IP

 enable FIFO if available */

	/*

	 * If we are already running, the wanted setup must be

	 * the same with the one that's currently ongoing

 set the rate */

 Save the number of channels to know what interrupts to enable */

			/*

			 * Enable Tx Ready interrupts on all channels

			 * to assure all data is sent

			/*

			 * Enable Rx Ready interrupts on all channels

			 * to assure all data is received

 Software reset the IP if it's not running */

 sentinel */ }

 Get the optional generated clock */

 Get IP version. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * atmel-pcm-dma.c  --  ALSA PCM DMA support for the Atmel SoC.

 *

 *  Copyright (C) 2012 Atmel

 *

 * Author: Bo Shen <voice.shen@atmel.com>

 *

 * Based on atmel-pcm by:

 * Sedji Gaouaou <sedji.gaouaou@atmel.com>

 * Copyright 2008 Atmel

/*--------------------------------------------------------------------------*\

 * Hardware definition

 lighting DMA overhead */

 if 2 bytes format */

 no limit */

/*

 * atmel_pcm_dma_irq: SSC interrupt handler for DMAENGINE enabled SSC

 *

 * We use DMAENGINE to send/receive data to/from SSC so this ISR is only to

 * check if any overrun occured.

 stop RX and capture: will be enabled again at restart */

 now drain RHR and read status to remove xrun condition */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * sam9g20_wm8731  --  SoC audio for AT91SAM9G20-based

 * 			ATMEL AT91SAM9G20ek board.

 *

 *  Copyright (C) 2005 SAN People

 *  Copyright (C) 2008 Atmel

 *

 * Authors: Sedji Gaouaou <sedji.gaouaou@atmel.com>

 *

 * Based on ati_b1_wm8731.c by:

 * Frank Mandarino <fmandarino@endrelia.com>

 * Copyright 2006 Endrelia Technologies Inc.

 * Based on corgi.c by:

 * Copyright 2005 Wolfson Microelectronics PLC.

 * Copyright 2005 Openedhand Ltd.

/*

 * As shipped the board does not have inputs.  However, it is relatively

 * straightforward to modify the board to hook them up so support is left

 * in the driver.

 speaker connected to LHPOUT/RHPOUT */

 mic is connected to Mic Jack, with WM8731 Mic Bias */

/*

 * Logic for a wm8731 as connected on a at91sam9g20ek board.

	/*

	 * Codec MCLK is supplied by PCK0 - set it up.

 Parse device node info */

 Parse codec info */

 Parse dai and platform info */

 Module information */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * sam9x5_wm8731   --	SoC audio for AT91SAM9X5-based boards

 *			that are using WM8731 as codec.

 *

 *  Copyright (C) 2011 Atmel,

 *		  Nicolas Ferre <nicolas.ferre@atmel.com>

 *

 *  Copyright (C) 2013 Paratronic,

 *		  Richard Genoud <richard.genoud@gmail.com>

 *

 * Based on sam9g20_wm8731.c by:

 * Sedji Gaouaou <sedji.gaouaou@atmel.com>

/*

 * Logic for a wm8731 as connected on a at91sam9x5ek based board.

 set the codec system clock for DAC and ADC */

/*

 * Audio paths on at91sam9x5ek board:

 *

 *  |A| ------------> |      | ---R----> Headphone Jack

 *  |T| <----\        |  WM  | ---L--/

 *  |9| ---> CLK <--> | 8731 | <--R----- Line In Jack

 *  |1| <------------ |      | <--L--/

 Module information */

 SPDX-License-Identifier: GPL-2.0



 Driver for Microchip S/PDIF TX Controller



 Copyright (C) 2020 Microchip Technology Inc. and its subsidiaries



 Author: Codrin Ciubotariu <codrin.ciubotariu@microchip.com>

/*

 * ---- S/PDIF Transmitter Controller Register map ----

 Control Register */

 Mode Register */

 Common Data Register */

 Interrupt Enable Register */

 Interrupt Disable Register */

 Interrupt Mask Register */

 Interrupt Status Register */

 User Data 1 Register x */

 Channel Status 1 Register x */

/*

 * ---- Control Register (Write-only) ----

 Software Reset */

 FIFO clear */

/*

 * ---- Mode Register (Read/Write) ----

 Transmit Enable */

 Multichannel Transfer */

 Data Word Endian Mode */

 Data Justification */

 Common Audio Register Transfer Mode */

 Valid Bits per Sample */

 Chunk Size */

 Validity Bits for Channels 1 and 2 */

 Disable Null Frame on underrun */

 Bytes per Sample */

/*

 * ---- Interrupt Enable/Disable/Mask/Status Register (Write/Read-only) ----

 exclusive access to control data */

 Software reset the IP */

 Disable interrupts */

 do not start/stop while channel status or user data is updated */

 Defaults: Toggle mode, justify to LSB, chunksize 1 */

 Enable interrupts */

 don't enable IP while we copy the channel status */

			/*

			 * if SPDIF is running, wait for interrupt to write

			 * channel status

			/*

			 * if SPDIF is running, wait for interrupt to write

			 * user data

 Channel status controller */

 User bits controller */

 Add controls */

 sentinel */ }

 Get memory for driver data. */

 Get hardware capabilities. */

 Map I/O registers. */

 Request IRQ */

 Get the peripheral clock */

 Get the generic clock */

 Init channel status */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * atmel-pcm.c  --  ALSA PCM interface for the Atmel atmel SoC.

 *

 *  Copyright (C) 2005 SAN People

 *  Copyright (C) 2008 Atmel

 *

 * Authors: Sedji Gaouaou <sedji.gaouaou@atmel.com>

 *

 * Based on at91-pcm. by:

 * Frank Mandarino <fmandarino@endrelia.com>

 * Copyright 2006 Endrelia Technologies Inc.

 *

 * Based on pxa2xx-pcm.c by:

 *

 * Author:	Nicolas Pitre

 * Created:	Nov 30, 2004

 * Copyright:	(C) 2004 MontaVista Software, Inc.

/*--------------------------------------------------------------------------*\

 * Hardware definition

/* TODO: These values were taken from the AT91 platform driver, check

 *	 them against real values for AT32

/*--------------------------------------------------------------------------*\

 * Data types

 physical address of dma buffer */

 first address beyond DMA buffer */

 physical address of next period */

/*--------------------------------------------------------------------------*\

 * ISR

 re-start the PDC */

 Load the PDC next pointer and counter registers */

/*--------------------------------------------------------------------------*\

 * PCM operations

	/* this may get called several times by oss emulation

 SNDRV_PCM_TRIGGER_START */

 ensure that buffer size is a multiple of period size */

 SPDX-License-Identifier: GPL-2.0



 Driver for Microchip S/PDIF RX Controller



 Copyright (C) 2020 Microchip Technology Inc. and its subsidiaries



 Author: Codrin Ciubotariu <codrin.ciubotariu@microchip.com>

/*

 * ---- S/PDIF Receiver Controller Register map ----

 Control Register */

 Mode Register */

 Interrupt Enable Register */

 Interrupt Disable Register */

 Interrupt Mask Register */

 Interrupt Status Register */

 Status Register */

 Holding Register */

 Channel x Status Registers */

 Channel x User Data Registers */

 Write Protection Mode Register */

 Write Protection Status Register */

 Version Register */

/*

 * ---- Control Register (Write-only) ----

 Software Reset */

/*

 * ---- Mode Register (Read/Write) ----

 Receive Enable */

 SPDIF Receiver Disabled */

 SPDIF Receiver Enabled */

 Validity Bit Mode */

 Load sample regardless of validity bit value */

 Load sample only if validity bit is 0 */

 Data Word Endian Mode */

 Little Endian Mode */

 Big Endian Mode */

 Parity Bit Mode */

 Parity Check Enabled */

 Parity Check Disabled */

 Sample Data Width */

 Packed Data Mode in Receive Holding Register */

 Start of Block Bit Mode */

 Consecutive Preamble Error Threshold Automatic Restart */

/*

 * ---- Interrupt Enable/Disable/Mask/Status Register (Write/Read-only) ----

/*

 * ---- Receiver Status Register (Read/Write) ----

 Enable Status */

/*

 *  ---- Version Register (Read-only) ----

 protect access to user data */

 protect access to blockend_refcount */

 called from non-atomic context only */

 don't enable BLOCKEND interrupt if it's already enabled */

 called from atomic context only */

 don't enable BLOCKEND interrupt if it's already enabled */

 enable overrun interrupts */

 disable overrun interrupts */

 check for new data available */

 IP might not be started or valid stream might not be present */

 IP might not be started or valid stream might not be present */

 if the receiver is not locked, ISF data is invalid */

 Channel status controller */

 User bits controller */

 Lock status */

 Bad format */

 Signal */

 Sampling rate */

 Software reset the IP */

 Default configuration */

 Add controls */

 Disable interrupts */

 sentinel */ }

 Get memory for driver data. */

 Map I/O registers. */

 Request IRQ. */

 Get the peripheral clock */

 Get the generated clock */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for Atmel I2S controller

 *

 * Copyright (C) 2015 Atmel Corporation

 *

 * Author: Cyrille Pitchen <cyrille.pitchen@atmel.com>

/*

 * ---- I2S Controller Register map ----

 Control Register */

 Mode Register */

 Status Register */

 Status Clear Register */

 Status Set Register */

 Interrupt Enable Register */

 Interrupt Disable Register */

 Interrupt Mask Register */

 Receiver Holding Register */

 Transmitter Holding Register */

 Version Register */

/*

 * ---- Control Register (Write-only) ----

 Receiver Enable */

 Receiver Disable */

 Clock Enable */

 Clock Disable */

 Transmitter Enable */

 Transmitter Disable */

 Software Reset */

/*

 * ---- Mode Register (Read/Write) ----

 Left Justified */

 Left audio samples duplicated to right audio channel */

 Receiver uses one DMA channel ... */

 for all audio channels */

 per audio channel */

 I2SDO output of I2SC is internally connected to I2SDI input */

 Left audio samples duplicated to right audio channel */

 Transmitter uses one DMA channel ... */

 for all audio channels */

 per audio channel */

 x sample transmitted when underrun */

 Zero sample */

 Previous sample */

 Audio Clock to I2SC Master Clock ratio */

 Master Clock to fs ratio */

 Master Clock mode */

 0: No master clock generated (selected clock drives I2SCK pin) */

 1: master clock generated (internally generated clock drives I2SMCK pin) */

 Slot Width */

 0: slot is 32 bits wide for DATALENGTH = 18/20/24 bits. */

 1: slot is 24 bits wide for DATALENGTH = 18/20/24 bits. */

/*

 * ---- Status Registers ----

 Receiver Enabled */

 Receive Ready */

 Receive Overrun */

 Transmitter Enabled */

 Transmit Ready */

 Transmit Underrun */

 Receive Overrun Channel */

 Transmit Underrun Channel */

/*

 * ---- Interrupt Enable/Disable/Mask Registers ----

 mck = (32 * (imckfs+1) / (imckdiv+1)) * fs */

 mck = 12.288MHz */

 mck = 1536 fs */

 mck =  768 fs */

 mck =  512 fs */

 mck =  384 fs */

 mck =  256 fs */

 mck =  192 fs */

 mck =  128 fs */

 mck =   64 fs */

 mck = 11.2896MHz */

 mck = 1024 fs */

 mck =  512 fs */

 mck =  256 fs */

 mck =  128 fs */

 mck =   64 fs */

			/*

			 * The RX Ready flag should not be set. However if here,

			 * we flush (read) the Receive Holding Register to start

			 * from a clean state.

	/*

	 * Find the best possible settings to generate the I2S Master Clock

	 * from the PLL Audio.

 codec is slave, so cpu is master */

 codec is master, so cpu is slave */

 Disable the I2S Master Clock generator. */

 Reset the I2S Master Clock generator settings. */

 Disable/unprepare the PMC generated clock. */

 Update the Mode Register to generate the I2S Master Clock. */

 Finally enable the I2S Master Clock generator. */

 Read the Mode Register to retrieve the master/slave state. */

 If master starts, enable the audio clock. */

 If master stops, disable the audio clock. */

 muxclk is optional, so we return error for probe defer only */

 sentinel */ }

 Get memory for driver data. */

 Get hardware capabilities. */

 Map I/O registers. */

 Request IRQ. */

 Get the peripheral clock. */

 Get audio clock to generate the I2S Master Clock (I2S_MCK) */

 Master Mode not supported */

 Do hardware specific settings to initialize I2S_MCK generator */

 Enable the peripheral clock. */

 Get IP version. */

 Enable error interrupts. */

 Prepare DMA config. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * atmel_wm8904 - Atmel ASoC driver for boards with WM8904 codec.

 *

 * Copyright (C) 2012 Atmel

 *

 * Author: Bo Shen <voice.shen@atmel.com>

	/*

	 * As here wm8904 use FLL output as its system clock

	 * so calling set_sysclk won't care freq parameter

	 * then we pass 0

 Module information */

 SPDX-License-Identifier: GPL-2.0



 TSE-850 audio - ASoC driver for the Axentia TSE-850 with a PCM5142 codec



 Copyright (C) 2016 Axentia Technologies AB



 Author: Peter Rosin <peda@axentia.se>



               loop1 relays

   IN1 +---o  +------------+  o---+ OUT1

            \                /

             +              +

             |   /          |

             +--o  +--.     |

             |  add   |     |

             |        V     |

             |      .---.   |

   DAC +----------->|Sum|---+

             |      '---'   |

             |              |

             +              +



   IN2 +---o--+------------+--o---+ OUT2

               loop2 relays



 The 'loop1' gpio pin controls two relays, which are either in loop

 position, meaning that input and output are directly connected, or

 they are in mixer position, meaning that the signal is passed through

 the 'Sum' mixer. Similarly for 'loop2'.



 In the above, the 'loop1' relays are inactive, thus feeding IN1 to the

 mixer (if 'add' is active) and feeding the mixer output to OUT1. The

 'loop2' relays are active, short-cutting the TSE-850 from channel 2.

 IN1, IN2, OUT1 and OUT2 are TSE-850 connectors and DAC is the PCB name

 of the (filtered) output from the PCM5142 codec.

	/*

	 * Hmmm, this gpiod_set_value_cansleep call should probably happen

	 * inside snd_soc_dapm_mixer_update_power in the loop.

	/*

	 * Map regulator output values like so:

	 *      -11.5V to "Low" (enum 0)

	 * 11.5V-12.5V to "12V" (enum 1)

	 * 12.5V-13.5V to "13V" (enum 2)

	 *     ...

	 * 18.5V-19.5V to "19V" (enum 8)

	 * 19.5V-      to "20V" (enum 9)

	/*

	 * Map enum zero (Low) to 2 volts on the regulator, do this since

	 * the ana regulator is supplied by the system 12V voltage and

	 * requesting anything below the system voltage causes the system

	 * voltage to be passed through the regulator. Also, the ana

	 * regulator induces noise when requesting voltages near the

	 * system voltage. So, by mapping Low to 2V, that noise is

	 * eliminated when all that is needed is 12V (the system voltage).

/*

 * These connections are not entirely correct, since both IN1 and IN2

 * are always fed to MIX (if the "IN switch" is set so), i.e. without

 * regard to the loop1 and loop2 relays that according to this only

 * control MUX1 and MUX2 but in fact also control how the input signals

 * are routed.

 * But, 1) I don't know how to do it right, and 2) it doesn't seem to

 * matter in practice since nothing is powered in those sections anyway.

 connect board input to the codec left channel output pin */

 sentinel */ }

 Module information */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * atmel_ssc_dai.c  --  ALSA SoC ATMEL SSC Audio Layer Platform driver

 *

 * Copyright (C) 2005 SAN People

 * Copyright (C) 2008 Atmel

 *

 * Author: Sedji Gaouaou <sedji.gaouaou@atmel.com>

 *         ATMEL CORP.

 *

 * Based on at91-ssc.c by

 * Frank Mandarino <fmandarino@endrelia.com>

 * Based on pxa2xx Platform drivers by

 * Liam Girdwood <lrg@slimlogic.co.uk>

/*

 * SSC PDC registers required by the PCM DMA engine.

/*

 * SSC & PDC status bits for transmit and receive.

/*

 * DMA parameters.

/*

 * SSC interrupt handler.  Passes PDC interrupts to the DMA

 * interrupt handler in the PCM driver.

	/*

	 * Loop through the substreams attached to this SSC.  If

	 * a DMA-related interrupt occurred on that substream, call

	 * the DMA interrupt handler function, if one has been

	 * registered in the dma_params structure by the PCM driver.

/*

 * When the bit clock is input, limit the maximum rate according to the

 * Serial Clock Ratio Considerations section from the SSC documentation:

 *

 *   The Transmitter and the Receiver can be programmed to operate

 *   with the clock signals provided on either the TK or RK pins.

 *   This allows the SSC to support many slave-mode data transfers.

 *   In this case, the maximum clock speed allowed on the RK pin is:

 *   - Peripheral clock divided by 2 if Receiver Frame Synchro is input

 *   - Peripheral clock divided by 3 if Receiver Frame Synchro is output

 *   In addition, the maximum clock speed allowed on the TK pin is:

 *   - Peripheral clock divided by 6 if Transmit Frame Synchro is input

 *   - Peripheral clock divided by 2 if Transmit Frame Synchro is output

 *

 * When the bit clock is output, limit the rate according to the

 * SSC divider restrictions.

			/* Receiver Frame Synchro (i.e. capture)

			 * is output (format is _CFS) and the RK pin

			 * is used for input (format is _CBM_).

			/* Transmit Frame Synchro (i.e. playback)

			 * is input (format is _CFM) and the TK pin

			 * is used for input (format _CBM_ but not

			 * using the RK pin).

/*-------------------------------------------------------------------------*\

 * DAI functions

/*

 * Startup.  Only that one substream allowed in each direction.

 Enable PMC peripheral clock for this SSC */

 Reset the SSC unless initialized to keep it in a clean state */

/*

 * Shutdown.  Clear DMA parameters and shutdown the SSC if there

 * are no other substreams open.

 Reset the SSC */

 Clear the SSC dividers */

 Shutdown the SSC clock. */

/*

 * Record the DAI format for use in hw_params().

/*

 * Record SSC clock dividers for use in hw_params().

		/*

		 * The same master clock divider is used for both

		 * transmit and receive, so if a value has already

		 * been set, it must match this value.

 Is the cpu-dai master of the frame clock? */

 Is the cpu-dai master of the bit clock? */

/*

 * Configure the SSC.

	/*

	 * Currently, there is only one set of dma params for

	 * each direction.  If more are added, this code will

	 * have to be changed to select the proper set.

	/*

	 * If the cpu dai should provide BCLK, but noone has provided the

	 * divider needed for that to work, fall back to something sensible.

	/*

	 * If the cpu dai should provide LRCLK, but noone has provided the

	 * dividers needed for that to work, fall back to something sensible.

	/*

	 * Determine sample size in bits and the PDC increment.

	/*

	 * Compute SSC register settings.

		/*

		 * DSP/PCM Mode A format

		 *

		 * Data is transferred on first BCLK after LRC pulse rising

		 * edge.If stereo, the right channel data is contiguous with

		 * the left channel data.

		/*

		 * SSC provides BCLK

		 *

		 * The SSC transmit and receive clocks are generated from the

		 * MCK divider, and the BCLK signal is output

		 * on the SSC TK line.

 set SSC clock mode register */

 set receive clock mode and format */

 set transmit clock mode and format */

 Save the status register before disabling transmit and receive */

 Save the current interrupt mask, then disable unmasked interrupts */

 restore SSC register settings */

 re-enable interrupts */

 Re-enable receive and transmit as appropriate */

 CONFIG_PM */

 CONFIG_PM */

/**

 * atmel_ssc_set_audio - Allocate the specified SSC for audio use.

 * @ssc_id: SSD ID in [0, NUM_SSC_DEVICES[

 If we can grab the SSC briefly to parent the DAI device off it */

 Module information */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Atmel ALSA SoC Audio Class D Amplifier (CLASSD) driver

 *

 * Copyright (C) 2015 Atmel

 *

 * Author: Songjun Wu <songjun.wu@atmel.com>

 sentinel */

 cpu dai component */

 platform */

 codec */

 Closest match */

 ASoC sound card */

 regmap configuration */

 register sound card */

 SPDX-License-Identifier: GPL-2.0-or-later

 linux/sound/bcm/bcm63xx-i2s-whistler.c

 BCM63xx whistler i2s driver

 Copyright (c) 2020 Broadcom Corporation

 Author: Kevin-Ke Li <kevin-ke.li@broadcom.com>

		/* TX and RX block each have an independent bit to indicate

		 * if it is generating the clock for the I2S bus. The bus

		 * clocks need to be generated from either the TX or RX block,

		 * but not both

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ALSA SoC I2S Audio Layer for Broadcom BCM2835 SoC

 *

 * Author:	Florian Meier <florian.meier@koalo.de>

 *		Copyright 2013

 *

 * Based on

 *	Raspberry Pi PCM I2S ALSA Driver

 *	Copyright (c) by Phil Poole 2013

 *

 *	ALSA SoC I2S (McBSP) Audio Layer for TI DAVINCI processor

 *      Vladimir Barinov, <vbarinov@embeddedalley.com>

 *	Copyright (C) 2007 MontaVista Software, Inc., <source@mvista.com>

 *

 *	OMAP ALSA SoC DAI driver using McBSP port

 *	Copyright (C) 2008 Nokia Corporation

 *	Contact: Jarkko Nikula <jarkko.nikula@bitmer.com>

 *		 Peter Ujfalusi <peter.ujfalusi@ti.com>

 *

 *	Freescale SSI ALSA SoC Digital Audio Interface (DAI) driver

 *	Author: Timur Tabi <timur@freescale.com>

 *	Copyright 2007-2010 Freescale Semiconductor, Inc.

 I2S registers */

 I2S register settings */

 Frame length register is 10 bit, maximum length 1024 */

 General device struct */

 Backup the current state */

 Start clock if not running */

 Stop I2S module */

	/*

	 * Clear the FIFOs

	 * Requires at least 2 PCM clock cycles to take effect

 Wait for 2 PCM clock cycles */

	/*

	 * Toggle the SYNC flag. After 2 PCM clock cycles it can be read back

	 * FIXME: This does not seem to work for slave mode!

 Wait for the SYNC flag changing it's state */

 Stop clock if it was not running before */

 Restore I2S state */

 Limit masks to available slots */

		/*

		 * The driver is limited to 2-channel setups.

		 * Check that exactly 2 bits are set in the masks.

/*

 * Convert logical slot number into physical slot number.

 *

 * If odd_offset is 0 sequential number is identical to logical number.

 * This is used for DSP modes with slot numbering 0 1 2 3 ...

 *

 * Otherwise odd_offset defines the physical offset for odd numbered

 * slots. This is used for I2S and left/right justified modes to

 * translate from logical slot numbers 0 1 2 3 ... into physical slot

 * numbers 0 2 ... 3 4 ...

/*

 * Calculate channel position from mask and slot width.

 *

 * Mask must contain exactly 2 set bits.

 * Lowest set bit is channel 1 position, highest set bit channel 2.

 * The constant offset is added to both channel positions.

 *

 * If odd_offset is > 0 slot positions are translated to

 * I2S-style TDM slot numbering ( 0 2 ... 3 4 ...) with odd

 * logical slot numbers starting at physical slot odd_offset.

	/*

	 * If a stream is already enabled,

	 * the registers are already set properly.

 Check if data fits into slots */

 Check if CPU is bit clock provider */

 Check if CPU is frame sync provider */

 Clock should only be set up here if CPU is clock master */

 Setup the frame format */

 CH2 format is the same as for CH1 */

 I2S mode needs an even number of slots */

		/*

		 * Use I2S-style logical slot numbering: even slots

		 * are in first half of frame, odd slots in second half.

 MSB starts one cycle after frame start */

 Setup frame sync signal for 50% duty cycle */

 Odd frame lengths aren't supported */

	/*

	 * Transmitting data immediately after frame start, eg

	 * in left-justified or DSP mode A, only works stable

	 * if bcm2835 is the frame clock provider.

	/*

	 * Set format for both streams.

	 * We cannot set another frame length

	 * (and therefore word length) anyway,

	 * so the format will be the same.

 Setup the I2S mode */

		/*

		 * Use frame packed mode (2 channels per 32 bit word)

		 * We cannot set another frame length in the second stream

		 * (and therefore word length) anyway,

		 * so the format will be the same.

 CLKM selects bcm2835 clock slave mode */

 FSM selects bcm2835 frame sync slave mode */

 CLKI selects normal clocking mode, sampling on rising edge */

 FSI selects frame start on falling edge */

 Setup the DMA parameters */

 Clear FIFOs */

	/*

	 * Clear both FIFOs if the one that should be started

	 * is not empty at the moment. This should only happen

	 * after overrun. Otherwise, hw_params would have cleared

	 * the FIFO.

 Stop also the clock when not SND_SOC_DAIFMT_CONT */

 Should this still be running stop it */

 Enable PCM block */

	/*

	 * Disable STBY.

	 * Requires at least 4 PCM clock cycles to take effect.

 If both streams are stopped, disable module and clock */

 Disable the module */

	/*

	 * Stopping clock is necessary, because stop does

	 * not stop the clock when SND_SOC_DAIFMT_CONT

 get the clock */

 Request ioarea */

 Set the DMA address - we have to parse DT ourselves */

 Set the bus width */

 Set burst */

	/*

	 * Set the PACK flag to enable S16_LE support (2 S16_LE values

	 * packed into 32-bit transfers).

 Store the pdev */

/*

 * Copyright (C) 2014-2015 Broadcom Corporation

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 Register offset needed for ASoC PCM module */

 Ring Buffer Ctrl Regs --- Start */

 AUD_FMM_BF_CTRL_SOURCECH_RINGBUF_X_RDADDR_REG_BASE */

 AUD_FMM_BF_CTRL_SOURCECH_RINGBUF_X_WRADDR_REG_BASE */

 AUD_FMM_BF_CTRL_SOURCECH_RINGBUF_X_BASEADDR_REG_BASE */

 AUD_FMM_BF_CTRL_SOURCECH_RINGBUF_X_ENDADDR_REG_BASE */

 AUD_FMM_BF_CTRL_SOURCECH_RINGBUF_X_FREE_MARK_REG_BASE */

 AUD_FMM_BF_CTRL_DESTCH_RINGBUF_X_RDADDR_REG_BASE */

 AUD_FMM_BF_CTRL_DESTCH_RINGBUF_X_WRADDR_REG_BASE */

 AUD_FMM_BF_CTRL_DESTCH_RINGBUF_X_BASEADDR_REG_BASE */

 AUD_FMM_BF_CTRL_DESTCH_RINGBUF_X_ENDADDR_REG_BASE */

 AUD_FMM_BF_CTRL_DESTCH_RINGBUF_X_FULL_MARK_REG_BASE */

 Ring Buffer Ctrl Regs --- End */

 Error Status Regs --- Start */

 AUD_FMM_BF_ESR_ESRX_STATUS_REG_BASE */

 AUD_FMM_BF_ESR_ESRX_STATUS_CLEAR_REG_BASE */

 AUD_FMM_BF_ESR_ESRX_MASK_REG_BASE */

 AUD_FMM_BF_ESR_ESRX_MASK_SET_REG_BASE */

 AUD_FMM_BF_ESR_ESRX_MASK_CLEAR_REG_BASE */

 Error Status Regs --- End */

 esr0 = fifo underflow */

 esr1 = ringbuf underflow */

 esr2 = ringbuf overflow */

 esr3 = freemark */

 esr4 = fullmark */

 Mask for R5F register.  Set all relevant interrupt for playback handler */

 Mask for R5F register.  Set all relevant interrupt for capture handler */

/*

 * PERIOD_BYTES_MIN is the number of bytes to at which the interrupt will tick.

 * This number should be a multiple of 256. Minimum value is 256

 A period is basically an interrupt */

 period_min/max gives range of approx interrupts per buffer */

	/*

	 * maximum buffer size in bytes = period_bytes_max * periods_max

	 * We allocate this amount of data for each enabled channel

 free or full mark */

 Set the pointers to indicate full (flip uppermost bit) */

 Set the pointers to indicate empty */

	/*

	 * The interrupt will fire when free/full mark is *exceeded*

	 * The fmark value must be multiple of PERIOD_BYTES_MIN so set fmark

	 * to be PERIOD_BYTES_MIN less than the period size.

 Map the ssp portnum to a set of ring buffers. */

 SPDIF */

 The port number maps to the bit position to be cleared */

 Clear interrupt status before enabling them */

 Unmask the interrupts of the given port*/

 The port number maps to the bit position to be set */

 Mask the interrupts of the given port*/

	/*

	 * If free/full mark interrupt occurs, provide timestamp

	 * to ALSA and update appropriate idx by period_bytes

 Set the ring buffer to full */

 Set the ring buffer to empty */

/*

 * ESR0/1/3 status  Description

 *  0x1	I2S0_out port caused interrupt

 *  0x2	I2S1_out port caused interrupt

 *  0x4	I2S2_out port caused interrupt

 *  0x8	SPDIF_out port caused interrupt

	/*

	 * ESR status gets updates with/without interrupts enabled.

	 * So, check the ESR mask, which provides interrupt enable/

	 * disable status and use it to determine which ESR status

	 * should be serviced.

		/*

		 * Ringbuffer or FIFO underflow

		 * If we get this interrupt then, it is also true that we have

		 * not yet responded to the freemark interrupt.

		 * Log a debug message.  The freemark handler below will

		 * handle getting everything going again.

		/*

		 * Freemark is hit. This is the normal interrupt.

		 * In typical operation the read and write regs will be equal

 Clear ESR interrupt */

 Rearm freemark logic by writing 1 to the correct bit */

/*

 * ESR2/4 status  Description

 *  0x1	I2S0_in port caused interrupt

 *  0x2	I2S1_in port caused interrupt

 *  0x4	I2S2_in port caused interrupt

	/*

	 * ESR status gets updates with/without interrupts enabled.

	 * So, check the ESR mask, which provides interrupt enable/

	 * disable status and use it to determine which ESR status

	 * should be serviced.

		/*

		 * Ringbuffer or FIFO overflow

		 * If we get this interrupt then, it is also true that we have

		 * not yet responded to the fullmark interrupt.

		 * Log a debug message.  The fullmark handler below will

		 * handle getting everything going again.

 Rearm fullmark logic by writing 1 to the correct bit */

	/*

	 * R5 status bits	Description

	 *  0		ESR0 (playback FIFO interrupt)

	 *  1		ESR1 (playback rbuf interrupt)

	 *  2		ESR2 (capture rbuf interrupt)

	 *  3		ESR3 (Freemark play. interrupt)

	 *  4		ESR4 (Fullmark capt. interrupt)

 If playback interrupt happened */

 If  capture interrupt happened */

	/*

	 * Keep track of which substream belongs to which port.

	 * This info is needed by snd_pcm_period_elapsed() in irq_handler

	/*

	 * Get the offset of the current read (for playack) or write

	 * index (for capture).  Report this value back to the asoc framework.

	/*

	 * Mask off the MSB of the rdaddr,wraddr and baseaddr

	 * since MSB is not part of the address

 SPDX-License-Identifier: GPL-2.0-or-later

 linux/sound/bcm/bcm63xx-pcm-whistler.c

 BCM63xx whistler pcm interface

 Copyright (c) 2020 Broadcom Corporation

 Author: Kevin-Ke Li <kevin-ke.li@broadcom.com>

 support S32 only */

 rx */

 Clear interrupt by writing 0 */

 tx */

 Clear interrupt by writing 0 */

/*

 * Copyright (C) 2014-2015 Broadcom Corporation

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 Used with stream_on field to indicate which streams are active */

 Begin register offset defines */

 AUD_FMM_BF_CTRL_xxx regs */

 AUD_FMM_IOP_OUT_I2S_xxx regs */

 AUD_FMM_IOP_OUT_SPDIF_xxx regs */

 AUD_FMM_IOP_PLL_0_xxx regs */

 AUD_FMM_IOP_xxx regs */

 AUD_FMM_IOP_IN_I2S_xxx regs */

 AUD_FMM_IOP_MISC_xxx regs */

 End register offset defines */

 AUD_FMM_IOP_OUT_I2S_x_MCLK_CFG_0_REG */

 AUD_FMM_IOP_OUT_I2S_x_MCLK_CFG_REG */

 AUD_FMM_IOP_OUT_I2S_x_STREAM_CFG */

 AUD_FMM_IOP_IN_I2S_x_CAP */

 AUD_FMM_IOP_OUT_I2S_x_I2S_CFG_REG */

 AUD_FMM_BF_CTRL_SOURCECH_CFGx_REG */

 AUD_FMM_BF_CTRL_DESTCH_CFGx_REG */

 AUD_FMM_IOP_OUT_SPDIF_xxx */

 AUD_FMM_IOP_PLL_0_USER */

 AUD_FMM_IOP_PLL_0_ACTIVE */

/*

 * PLL has 3 output channels (1x, 2x, and 4x). Below are

 * the common MCLK frequencies used by audio driver

 List of valid frame sizes for tdm mode */

 Set Group ID */

 Configure the AUD_FMM_IOP_OUT_I2S_x_STREAM_CFG reg */

 FCI ID is the port num */

 Configure the AUD_FMM_BF_CTRL_SOURCECH_CFGX reg */

 Configure the AUD_FMM_IOP_IN_I2S_x_CAP_STREAM_CFG_0 reg */

 Configure the AUD_FMM_BF_CTRL_DESTCH_CFGX_REG_BASE reg */

 Enable the transmit pin for this port */

 Enable and set the FCI ID for the SPDIF channel */

 FCI ID is the port num */

 Enable the spdif output pin */

 If both playback and capture are off */

 If both playback and capture are off */

 set group_sync_dis = 1 */

 set group_sync_dis = 0 */

 IOP SW INIT on OUT_I2S_x */

	/*

	 * Check if the bit clock can be generated from the given MCLK.

	 * MCLK must be a perfect multiple of bit clock and must be one of the

	 * following values... (2,4,6,8,10,12,14)

 Set sclk rate */

 sclks_per_1fs_div = sclk cycles/32 */

 Set number of bitclks per frame */

 Set MCLK_RATE ssp port (spdif and ssp are the same) */

 I2S must be 64 bit per frame */

 32 bit mode is coded as 0 */

/*

 * This function sets the mclk frequency for pll clock

/*

 * Bit    Update  Notes

 * 31     Yes     TDM Mode        (1 = TDM, 0 = i2s)

 * 30     Yes     Slave Mode	  (1 = Slave, 0 = Master)

 * 29:26  No      Sclks per frame

 * 25:18  Yes     FS Width

 * 17:14  No      Valid Slots

 * 13     No      Bits		  (1 = 16 bits, 0 = 32 bits)

 * 12:08  No     Bits per samp

 * 07     Yes     Justifcation    (1 = LSB, 0 = MSB)

 * 06     Yes     Alignment       (1 = Delay 1 clk, 0 = no delay

 * 05     Yes     SCLK polarity   (1 = Rising, 0 = Falling)

 * 04     Yes     LRCLK Polarity  (1 = High for left, 0 = Low for left)

 * 03:02  Yes     Reserved - write as zero

 * 01     No      Data Enable

 * 00     No      CLK Enable

 Input cfg is same as output, but the FS width is not a valid field */

 DSP_A = data after FS, DSP_B = data during FS */

	/*

	 * SSP out cfg.

	 * Retain bits we do not want to update, then OR in new bits

	/*

	 * SSP in cfg.

	 * Retain bits we do not want to update, then OR in new bits

	/*

	 * Configure the word clk and bit clk as output or tristate

	 * Each port has 4 bits for controlling its pins.

	 * Shift the mask based upon port number.

 Set bit for tri-state */

 Clear bit for drive */

 default to 32-bits per slot */

 Slot value must be even */

 We encode 16 slots as 0 in the reg */

 Slot Width is either 16 or 32 */

 Set capture side of ssp port */

 Set playback side of ssp port */

/*

 * Return < 0 if error

 * Return 0 if disabled

 * Return 1 if enabled and node is parsed successfully

 For the purposes of this code SPDIF can be I2S mode */

 Tri-state all controlable pins until we know that we need them */

 negative is err, 0 is active and good, 1 is disabled */

/*

 * ALSA SoC Synopsys I2S Audio Layer

 *

 * sound/soc/dwc/designware_i2s.c

 *

 * Copyright (C) 2010 ST Microelectronics

 * Rajeev Kumar <rajeevkumar.linux@gmail.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

		/*

		 * Check if TX fifo is empty. If empty fill FIFO with samples

		 * NOTE: Only two channels supported

		/*

		 * Data available. Retrieve samples from FIFO

		 * NOTE: Only two channels supported

 Error Handling: TX */

 Error Handling: TX */

/*

 * The following tables allow a direct lookup of various parameters

 * defined in the I2S block's configuration in terms of sound system

 * parameters.  Each table is sized to the number of entries possible

 * according to the number of configuration bits describing an I2S

 * block parameter.

 Maximum bit resolution of a channel - not uniformly spaced */

 Width of (DMA) bus */

 PCM format to support channel resolution */

	/*

	 * Read component parameter registers to extract

	 * the I2S block's configuration.

 Set DMA slaves info */

/*

 * ALSA SoC Synopsys PIO PCM for I2S driver

 *

 * sound/soc/dwc/designware_pcm.c

 *

 * Copyright (C) 2016 Synopsys

 * Jose Abreu <joabreu@synopsys.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>



/*

 * Helper function to determine the target DSP state during

 * system suspend. This function only cares about the device

 * D-states. Platform-specific substates, if any, should be

 * handled by the platform-specific parts.

 DSP should be in D3 if the system is suspending to S3 */

		/*

		 * Currently, the only criterion for retaining the DSP in D0

		 * is that there are streams that ignored the suspend trigger.

		 * Additional criteria such Soundwire clock-stop mode and

		 * device suspend latency considerations will be added later.

 This case would be during runtime suspend */

 configure ctx save ipc message */

 send ctx save ipc to dsp */

 nothing to do if debugfs buffer is not IO mem */

 cache memory that is only accessible in D0 */

 do nothing if dsp resume callbacks are not set */

 DSP was never successfully started, nothing to resume */

	/*

	 * if the runtime_resume flag is set, call the runtime_resume routine

	 * or else call the system resume routine

	/*

	 * Nothing further to be done for platforms that support the low power

	 * D0 substate.

 load the firmware */

	/*

	 * Boot the firmware. The FW boot status will be modified

	 * in snd_sof_run_firmware() depending on the outcome.

 resume DMA trace, only need send ipc */

 non fatal */

 restore pipelines */

 notify DSP of system resume */

 do nothing if dsp suspend callback is not set */

 prepare for streams to be resumed properly upon resume */

 Skip to platform-specific suspend if DSP is entering D0 */

 release trace */

 cache debugfs contents during runtime suspend */

 notify DSP of upcoming power down */

		/*

		 * runtime PM has logic to handle -EBUSY/-EAGAIN so

		 * pass these errors up

 FW in unexpected state, continue to power down */

 return if the DSP was not probed successfully */

 platform-specific suspend */

 Do not reset FW state if DSP is in D0 */

 reset FW state */

 Notify DSP of upcoming power down */

 will suspend to S3 by default */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>



 allow runtime_pm */

	/*

	 * runtime pm for pci device is "forbidden" by default.

	 * so call pm_runtime_allow() to enable it.

 mark last_busy for pm_runtime to make sure not suspend immediately */

 follow recommendation in pci-driver.c to decrement usage counter */

	/*

	 * for platforms using the SOF community key, change the

	 * default path automatically to pick the right files from the

	 * linux-firmware tree. This can be overridden with the

	 * fw_path kernel parameter, e.g. for developers.

 alternate fw and tplg filenames ? */

 set callback to be called on successful device probe to enable runtime_pm */

 call sof helper for DSP hardware probe */

 call sof helper for DSP hardware remove */

 follow recommendation in pci-driver.c to increment usage counter */

 release pci regions and disable device */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 Copyright 2021 NXP



 Author: Daniel Baluta <daniel.baluta@nxp.com>

/*

 * sof compr fragment elapse, this could be called in irq thread context

 use the same workqueue-based solution as for PCM, cf. snd_sof_pcm_elapsed */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 Copyright 2019 NXP



 Author: Daniel Baluta <daniel.baluta@nxp.com>



 platform specific devices */

 allow runtime_pm */

 set callback to be called on successful device probe to enable runtime_pm */

 call sof helper for DSP hardware probe */

 call sof helper for DSP hardware remove */

 DT driver definition */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2019 Intel Corporation. All rights reserved.



 Author: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>



 reset readback offset for scontrol */

 notify DSP of kcontrol values */

 set NONE flag to clear all previous settings */

 set up all controls for the widget */

 only free when use_count is 0 */

 reset route setup status for all routes that contain this widget */

 skip if there is no private data */

 widget already set up */

 append extended data to the end of the component */

 restore kcontrols for widget */

 skip if there's no private data */

 nothing to do if route is already set up */

 send ipc */

 ignore routes involving virtual widgets in topology */

 find route matching source and sink widgets */

	/*

	 * Set up connections between widgets in the sink/source paths based on direction.

	 * Some non-SOF widgets exist in topology either for compatibility or for the

	 * purpose of connecting a pipeline from a host to a DAI in order to receive the DAPM

	 * events. But they are not handled by the firmware. So ignore them.

 nothing to set up */

 set up widgets in the list */

		/*

		 * The scheduler widget for a pipeline is not part of the connected DAPM

		 * widget list and it needs to be set up before the widgets in the pipeline

		 * are set up. The use_count for the scheduler widget is incremented for every

		 * widget in a given pipeline to ensure that it is freed only after the last

		 * widget in the pipeline is freed.

 set up the widget */

	/*

	 * error in setting pipeline connections will result in route status being reset for

	 * routes that were successfully set up when the widgets are freed.

 complete pipelines */

 free all widgets that have been set up successfully */

 nothing to free */

	/*

	 * Free widgets in the list. This can fail but continue freeing other widgets to keep

	 * use_counts balanced.

		/*

		 * free widget and its pipe_widget. Either of these can fail, but free as many as

		 * possible before freeing the list and returning the error.

/*

 * helper to determine if there are only D0i3 compatible

 * streams active

			/*

			 * substream->runtime being not NULL indicates

			 * that the stream is open. No need to check the

			 * stream state.

	/*

	 * SOF requires hw_params to be set-up internally upon resume.

	 * So, set the flag to indicate this for those streams that

	 * have been suspended.

			/*

			 * do not reset hw_params upon resume for streams that

			 * were kept running during suspend

 set internal flag for BE */

 restore pipeline components */

 only set up the widgets belonging to static pipelines */

 update DAI config. The IPC will be sent in sof_widget_setup() */

			/*

			 * The link DMA channel would be invalidated for running

			 * streams but not for streams that were in the PAUSED

			 * state during suspend. So invalidate it here before setting

			 * the dai config in the DSP.

 restore pipeline connections */

 only set up routes belonging to static pipelines */

 complete pipeline */

 only complete static pipelines */

/*

 * This function doesn't free widgets during suspend. It only resets the set up status for all

 * routes and use_count for all widgets.

	/*

	 * This function is called during suspend and for one-time topology verification during

	 * first boot. In both cases, there is no need to protect swidget->use_count and

	 * sroute->setup because during suspend all streams are suspended and during topology

	 * loading the sound card unavailable to open PCMs.

/*

 * Generic object lookup APIs.

 match with PCM dai name */

 match with playback caps name if set */

 match with capture caps name if set */

 find widget by stream name and direction */

 use the tplg configured mclk if existed */

 not yet implemented for platforms other than the above */

/*

 * Helper to get SSP MCLK from a pcm_runtime.

 * Return 0 if not exist.

/*

 * Helper to get SSP BCLK from a pcm_runtime.

 * Return 0 if not exist.

/*

 * SOF Driver enumeration.

 find machine */

 select nocodec mode */

 register machine driver, pass machine info as pdata */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>



 Generic firmware loader.



 keep a local copy of the data */

 create read-only cc_version debugfs to store compiler version info */

 use local copy of the cc_version to prevent data corruption */

 errors are only due to memory allocation, not debugfs */

 parse the extended FW boot data structures from FW boot message */

 get first header */

 read in ext structure */

 process structure data */

 They are supported but we don't do anything here */

 move to next header */

 log ABI versions and check FW compatibility */

 calculate elements counter */

 unused memory space is zero filled - mapped to EMPTY elements */

 TODO: use ipc msg size from config data */

	/*

	 * assert fw size is big enough to contain extended manifest header,

	 * it prevents from reading unallocated memory from `head` in following

	 * step.

	/*

	 * When fw points to extended manifest,

	 * then first u32 must be equal SOF_EXT_MAN_MAGIC_NUMBER.

 otherwise given fw don't have an extended manifest */

 parse extended FW manifest data structures */

 Assert firmware starts with extended manifest */

 incompatible version */

 get first extended manifest element header */

 process structure data */

/*

 * IPC Firmware ready.

 check for ABI compatibility and create memory windows on first boot */

 mailbox must be on 4k boundary */

 no need to re-check version/ABI for subsequent boots */

	/*

	 * copy data from the DSP FW ready offset

	 * Subsequent error handling is not needed for BLK_TYPE_SRAM

 make sure ABI version is compatible */

 now check for extended data */

 generic module parser for mmaped DSPs */

 module->size doesn't include header size */

 check for wrap */

 minus header size of block */

 not handled atm */

 checking block->size to avoid unaligned access */

 minus body size of block */

 next block */

 Read the header information from the data pointer */

 verify FW sig */

 check size is valid */

 parse each module */

 check for wrap */

 check for wrap */

 minus header size of module */

 module */

 minus body size of module */

 Don't request firmware again if firmware is already requested */

github.com/thesofproject/sof-bin/\n");

 check for extended manifest */

 when no error occurred, drop extended manifest */

 No extended manifest, so nothing to skip during FW load */

 make sure the FW header and file is valid */

 prepare the DSP for FW loading */

 parse and load firmware modules to DSP */

 (re-)enable dsp dump */

 create read-only fw_version debugfs to store boot version info */

 errors are only due to memory allocation, not debugfs */

 perform pre fw run operations */

 boot the firmware on the DSP */

	/*

	 * now wait for the DSP to boot. There are 3 possible outcomes:

	 * 1. Boot wait times out indicating FW boot failure.

	 * 2. FW boots successfully and fw_ready op succeeds.

	 * 3. FW boots but fw_ready op fails.

 FW boots but fw_ready op failed */

 perform post fw run operations */

 TODO: support module unloading at runtime */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>



/*

 * Constants used in the computation of linear volume gain

 * from dB gain 20th root of 10 in Q1.16 fixed-point notation

 40th root of 10 in Q1.16 fixed-point notation*/

/*

 * Volume fractional word length define to 16 sets

 * the volume linear gain value to use Qx.16 format

 0.5 dB step value in topology TLV */

 Full volume for default values */

 TLV data items */

 size of tplg abi in byte */

 send pcm params ipc */

 get runtime PCM params using widget's stream name */

 set IPC PCM params */

 set format */

 send IPC to the DSP */

 send stream trigger ipc */

 set IPC stream params */

 send IPC to the DSP */

 get runtime PCM params using widget's stream name */

 process events */

 set pcm params */

 start trigger */

 stop trigger */

 pcm free */

 event handlers for keyword detect component */

 we only support dB scale TLV type at the moment */

 min value in topology tlv data is multiplied by 100 */

 volume steps */

 mute ON/OFF */

/*

 * Function to truncate an unsigned 64-bit number

 * by x bits and return 32-bit unsigned number. This

 * function also takes care of rounding while truncating

 do not truncate more than 32 bits */

/*

 * Function to compute a ^ exp where,

 * a is a fractional number represented by a fixed-point

 * integer with a fractional world length of "fwl"

 * exp is an integer

 * fwl is the fractional word length

 * Return value is a fractional number represented by a

 * fixed-point integer with a fractional word length of "fwl"

 if exponent is 0, return 1 */

 determine the number of iterations based on the exponent */

 mutiply a "iter" times to compute power */

		/*

		 * Product of 2 Qx.fwl fixed-point numbers yields a Q2*x.2*fwl

		 * Truncate product back to fwl fractional bits with rounding

 if exp is positive, return the result */

 if exp is negative, return the multiplicative inverse */

/*

 * Function to calculate volume gain from TLV data.

 * This function can only handle gain steps that are multiples of 0.5 dB

 mute volume */

	/*

	 * compute dB gain from tlv. tlv_step

	 * in topology is multiplied by 100

	/*

	 * compute linear gain represented by fixed-point

	 * int with VOLUME_FWL fractional bits

 extract the fractional part of volume step */

 if volume step is an odd multiple of 0.5 dB */

/*

 * Set up volume table for kcontrols from tlv data

 * "size" specifies the number of entries in the table

 init the volume table */

 populate the volume table */

/*

 * Supported Frame format types and lookup, add new ones to end of list.

 use s32le if nothing is specified */

/*

 * Topology Token Parsing.

 * New tokens should be added to headers and parsing tables below.

 Buffers */

 DAI */

 BE DAI link */

 scheduling */

 volume */

 SRC */

 ASRC */

 Tone */

 EFFECT */

 PCM */

 PCM */

 Generic components */

 SSP */

 ALH */

 DMIC */

 ESAI */

 SAI */

 Core tokens */

 Component extended tokens */

/*

 * DMIC PDM Tokens

 * SOF_TKN_INTEL_DMIC_PDM_CTRL_ID should be the first token

 * as it increments the index while parsing the array of pdm tokens

 * and determines the correct offset

 HDA */

 Leds */

 parse element by element */

 search for token */

 match token type */

 match token id */

 matched - now load token */

 parse element by element */

 search for token */

 match token type */

 match token id */

 matched - now load token */

 parse element by element */

 search for token */

 match token type */

 match token id */

 load token */

/**

 * sof_parse_token_sets - Parse multiple sets of tokens

 * @scomp: pointer to soc component

 * @object: target ipc struct for parsed values

 * @tokens: token definition array describing what tokens to parse

 * @count: number of tokens in definition array

 * @array: source pointer to consecutive vendor arrays to be parsed

 * @priv_size: total size of the consecutive source arrays

 * @sets: number of similar token sets to be parsed, 1 set has count elements

 * @object_size: offset to next target ipc struct with multiple sets

 *

 * This function parses multiple sets of tokens in vendor arrays into

 * consecutive ipc structs.

 validate asize */

 FIXME: A zero-size array makes no sense */

 make sure there is enough data before parsing */

 call correct parser depending on type */

 next array */

 move to next target struct */

	/*

	 * sof_parse_tokens is used when topology contains only a single set of

	 * identical tuples arrays. So additional parameters to

	 * sof_parse_token_sets are sets = 1 (only 1 set) and

	 * object_size = 0 (irrelevant).

/*

 * Standard Kcontrols.

 validate topology data */

	/*

	 * If control has more than 2 channels we need to override the info. This is because even if

	 * ASoC layer has defined topology's max channel count to SND_SOC_TPLG_MAX_CHAN = 8, the

	 * pre-defined dapm control types (and related functions) creating the actual control

	 * restrict the channels only to mono or stereo.

 init the volume get/put data */

 set cmd for mixer control */

 extract tlv data */

 set up volume table */

 set default volume values to 0dB in control */

 set up possible led control from mixer private data */

 validate topology data */

 init the enum get/put data */

 init the get/put bytes data */

 external kcontrol init - used for any driver specific init */

 send IPC to the DSP */

/*

 * DAI Topology

 Static DSP core power management so far, should be extended in the future */

 power up the core if it is host managed */

 Now notify DSP */

 power down core if it is host managed and return the original error if this fails too */

 First enable the pipeline core */

 does stream match DAI link ? */

				/*

				 * Please create DAI widget in the right order

				 * to ensure BE will connect to the right DAI

				 * widget.

				/*

				 * Please create DAI widget in the right order

				 * to ensure BE will connect to the right DAI

				 * widget.

 check we have a connection */

/**

 * sof_comp_alloc - allocate and initialize buffer for a new component

 * @swidget: pointer to struct snd_sof_widget containing extended data

 * @ipc_size: IPC payload size that will be updated depending on valid

 *  extended data.

 * @index: ID of the pipeline the component belongs to

 *

 * Return: The pointer to the new allocated component, NULL if failed.

 only non-zero UUID is valid */

 configure comp new IPC message */

 handle the extended data if needed */

 append extended data to the end of the component */

 update ipc_size and return */

 configure dai IPC message */

		/*

		 * copy only the sof_ipc_comp_dai to avoid collapsing

		 * the snd_sof_dai, the extended data is kept in the

		 * snd_sof_widget.

/*

 * Buffer topology

 configure dai IPC message */

 bind PCM ID to host component ID */

/*

 * PCM Topology

 configure host comp IPC message */

/*

 * Pipeline Topology

 configure dai IPC message */

 component at start of pipeline is our stream id */

/*

 * Mixer topology

 configure mixer IPC message */

/*

 * Mux topology

 configure mux IPC message */

/*

 * PGA Topology

 configure volume IPC message */

/*

 * SRC Topology

 configure src IPC message */

/*

 * ASRC Topology

 configure ASRC IPC message */

/*

 * Signal Generator Topology

 configure siggen IPC message */

 make sure data is valid - data can be updated at runtime */

 get data type */

 allocate struct for widget control data sizes and types */

 get possible component controls and get size of all pdata */

 we are exceeding max ipc size, config needs to be sent separately */

 configure iir IPC message */

	/*

	 * found private data in control, so copy it.

	 * get possible component controls - get size of all pdata,

	 * then memcpy with headers

/*

 * Processing Component Topology - can be "effect", "codec", or general

 * "processing".

 check we have some tokens - we need at least process type */

 get the process token */

 now load process specific data and send IPC */

 validate widget event type */

 only KEYWORD_DETECT comps should handle this */

 bind event to keyword detect comp */

 external widget init - used for any driver specific init */

 handle any special case widgets */

 check IPC reply */

 bind widget to external event */

 free sroute and its private data */

 free dai config */

 power down the pipeline schedule core */

		/*

		 * Runtime PM should still function normally if topology loading fails and

		 * it's components are unloaded. Do not power down the primary core so that the

		 * CTX_SAVE IPC can succeed during runtime suspend.

 free private value */

 remove and free swidget object */

/*

 * DAI HW configuration.

 FE DAI - used for any driver specific init */

 nothing to do for BEs atm */

 do we need to allocate playback PCM DMA pages */

 allocate playback page table buffer */

 bind pcm to host comp */

 do we need to allocate capture PCM DMA pages */

 allocate capture page table buffer */

 bind pcm to host comp */

 free PCM DMA pages */

 remove from list and free spcm */

 clock directions wrt codec */

 codec is bclk provider */

 codec is bclk consumer */

 inverted clocks ? */

/*

 * Send IPC and set the same config for all DAIs with name matching the link

 * name. Note that the function can only be used for the case that all DAIs

 * have a common DAI config for now.

			/*

			 * the same dai config will be applied to all DAIs in

			 * the same dai link. We have to ensure that the ipc

			 * dai config's dai_index match to the component's

			 * dai_index.

	/*

	 * machine driver may define a dai link with playback and capture

	 * dai enabled, but the dai link in topology would support both, one

	 * or none of them. Here print a warning message to notify user

	/*

	 * Parse common data, we should have 1 common data per hw_config.

 process all possible hw configs */

 handle master/slave and inverted clocks */

 copy differentiating hw configs to ipc structs */

 validate SSP fsync rate and channel count */

 set config for all DAI's with name matching the link name */

 handle master/slave and inverted clocks */

 init IPC */

 set config for all DAI's with name matching the link name */

 handle master/slave and inverted clocks */

 init IPC */

 set config for all DAI's with name matching the link name */

 Ensure the entire DMIC config struct is zeros */

 get DMIC tokens */

 get DMIC PDM tokens */

 set IPC header size */

 debug messages */

	/*

	 * this takes care of backwards compatible handling of fifo_bits_b.

	 * It is deprecated since firmware ABI version 3.0.1.

 set config for all DAI's with name matching the link name */

 init IPC */

 get any bespoke DAI tokens */

 init IPC */

 set config for all DAI's with name matching the link name */

 DAI link - used for any driver specific init */

	/*

	 * Set nonatomic property for FE dai links as their trigger action

	 * involves IPC's.

		/*

		 * set default trigger order for all links. Exceptions to

		 * the rule will be handled in sof_pcm_dai_link_fixup()

		 * For playback, the sequence is the following: start FE,

		 * start BE, stop BE, stop FE; for Capture the sequence is

		 * inverted start BE, start FE, stop FE, stop BE

 nothing more to do for FE dai links */

 check we have some tokens - we need at least DAI type */

 get any common DAI tokens */

	/*

	 * DAI links are expected to have at least 1 hw_config.

	 * But some older topologies might have no hw_config for HDA dai links.

 Reserve memory for all hw configs, eventually freed by widget */

 Copy common data to all config ipc structs */

 now load DAI specific data and send IPC - type comes from token */

 DAI link - used for any driver specific init */

 allocate memory for sroute and connect */

 source component */

	/*

	 * Virtual widgets of type output/out_drv may be added in topology

	 * for compatibility. These are not handled by the FW.

	 * So, don't send routes whose source/sink widget is of such types

	 * to the DSP.

 sink component */

	/*

	 * Don't send routes whose sink widget is of type

	 * output or out_drv to the DSP

	/*

	 * For virtual routes, both sink and source are not

	 * buffer. Since only buffer linked to component is supported by

	 * FW, others are reported as error, add check in route function,

	 * do not send it to FW when both source and sink are not buffer

 add route to route list */

/**

 * sof_set_pipe_widget - Set pipe_widget for a component

 * @sdev: pointer to struct snd_sof_dev

 * @pipe_widget: pointer to struct snd_sof_widget of type snd_soc_dapm_scheduler

 * @swidget: pointer to struct snd_sof_widget that has the same pipeline ID as @pipe_widget

 *

 * Return: 0 if successful, -EINVAL on error.

 * The function checks if @swidget is associated with any volatile controls. If so, setting

 * the dynamic_pipeline_widget is disallowed.

 dynamic widgets cannot have volatile kcontrols */

 set the pipe_widget and apply the dynamic_pipeline_widget_flag */

 completion - called at completion of firmware loading */

 set the pipe_widget and apply the dynamic_pipeline_widget_flag */

			/*

			 * Apply the dynamic_pipeline_widget flag and set the pipe_widget field

			 * for all widgets that have the same pipeline ID as the scheduler widget

 verify topology components loading including dynamic pipelines */

 set up static pipelines */

 manifest - optional to inform component of manifest */

 backward compatible with tplg without ABI info */

 vendor specific kcontrol handlers available for binding */

 vendor specific bytes ext handlers available for binding */

 external kcontrol init - used for any driver specific init */

 external kcontrol init - used for any driver specific init */

 external widget init - used for any driver specific init */

 .widget_load is not currently used */

 FE DAI - used for any driver specific init */

 DAI link - used for any driver specific init */

 completion - called at completion of firmware loading */

 manifest - optional to inform component of manifest */

 vendor specific kcontrol handlers available for binding */

 vendor specific bytes ext handlers available for binding */

github.com/thesofproject/sof-bin/\n");

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2019-2021 Intel Corporation. All rights reserved.

 Author: Cezary Rojewski <cezary.rojewski@intel.com>



/**

 * sof_ipc_probe_init - initialize data probing

 * @sdev:		SOF sound device

 * @stream_tag:		Extractor stream tag

 * @buffer_size:	DMA buffer size to set for extractor

 *

 * Host chooses whether extraction is supported or not by providing

 * valid stream tag to DSP. Once specified, stream described by that

 * tag will be tied to DSP for extraction for the entire lifetime of

 * probe.

 *

 * Probing is initialized only once and each INIT request must be

 * matched by DEINIT call.

/**

 * sof_ipc_probe_deinit - cleanup after data probing

 * @sdev:	SOF sound device

 *

 * Host sends DEINIT request to free previously initialized probe

 * on DSP side once it is no longer needed. DEINIT only when there

 * are no probes connected and with all injectors detached.

/**

 * sof_ipc_probe_points_info - retrieve list of active probe points

 * @sdev:	SOF sound device

 * @desc:	Returned list of active probes

 * @num_desc:	Returned count of active probes

 *

 * Host sends PROBE_POINT_INFO request to obtain list of active probe

 * points, valid for disconnection when given probe is no longer

 * required.

/**

 * sof_ipc_probe_points_add - connect specified probes

 * @sdev:	SOF sound device

 * @desc:	List of probe points to connect

 * @num_desc:	Number of elements in @desc

 *

 * Dynamically connects to provided set of endpoints. Immediately

 * after connection is established, host must be prepared to

 * transfer data from or to target stream given the probing purpose.

 *

 * Each probe point should be removed using PROBE_POINT_REMOVE

 * request when no longer needed.

/**

 * sof_ipc_probe_points_remove - disconnect specified probes

 * @sdev:		SOF sound device

 * @buffer_id:		List of probe points to disconnect

 * @num_buffer_id:	Number of elements in @desc

 *

 * Removes previously connected probes from list of active probe

 * points and frees all resources on DSP side.

 disconnect all probe points */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Author: Keyon Jie <yang.jie@linux.intel.com>



/*

 * Register IO

 *

 * The sof_io_xyz() wrappers are typically referenced in snd_sof_dsp_ops

 * structures and cannot be inlined.

/*

 * IPC Mailbox IO

/*

 * Memory copy.

 __iowrite32_copy use 32bit size values so divide by 4 */

		/* first read the 32bit data of dest, then change affected

		 * bytes, and write back to dest. For unaffected bytes, it

		 * should not be changed

/*

 * Generic buffer page table creation.

 * Take the each physical page address and drop the least significant unused

 * bits from each (based on PAGE_SIZE). Then pack valid page address bits

 * into compressed page table.

		/*

		 * The number of valid address bits for each page is 20.

		 * idx determines the byte position within page_table

		 * where the current page's address is stored

		 * in the compressed page_table.

		 * This can be calculated by multiplying the page number by 2.5.

		/*

		 * pagetable compression:

		 * byte 0     byte 1     byte 2     byte 3     byte 4     byte 5

		 * ___________pfn 0__________ __________pfn 1___________  _pfn 2...

		 * .... ....  .... ....  .... ....  .... ....  .... ....  ....

		 * It is created by:

		 * 1. set current location to 0, PFN index i to 0

		 * 2. put pfn[i] at current location in Little Endian byte order

		 * 3. calculate an intermediate value as

		 *    x = (pfn[i+1] << 4) | (pfn[i] & 0xf)

		 * 4. put x at offset (current location + 2) in LE byte order

		 * 5. increment current location by 5 bytes, increment i by 2

		 * 6. continue to (2)

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>



 PCM Layer, interface between ALSA and IPC.



 Create DMA buffer page table for DSP */

 validate offset */

/*

 * sof pcm period elapse work

/*

 * sof pcm period elapse, this could be called at irq thread context.

	/*

	 * snd_pcm_period_elapsed() can be called in interrupt context

	 * before IRQ_HANDLED is returned. Inside snd_pcm_period_elapsed(),

	 * when the PCM is done draining or xrun happened, a STOP IPC will

	 * then be sent and this IPC will hit IPC timeout.

	 * To avoid sending IPC before the previous IPC is handled, we

	 * schedule delayed work here to call the snd_pcm_period_elapsed().

 send IPC to the DSP */

 query DAPM for list of connected widgets and set them up */

 nothing to do for BE */

	/*

	 * Handle repeated calls to hw_params() without free_pcm() in

	 * between. At least ALSA OSS emulation depends on this.

 create compressed page table for audio firmware */

 number of pages should be rounded up */

 set IPC PCM parameters */

 container size */

 format */

 firmware already configured host stream */

 if this is a repeated hw_params without hw_free, skip setting up widgets */

 send hw_params IPC to the DSP */

 save pcm hw_params */

 nothing to do for BE */

 nothing to do for BE */

 set hw_params */

/*

 * FE dai link trigger actions are always executed in non-atomic context because

 * they involve IPC's.

 nothing to do for BE */

			/*

			 * this case will be triggered when INFO_RESUME is

			 * supported, no need to resume streams that remained

			 * enabled in D0ix.

 set up hw_params */

			/*

			 * This case will be triggered when INFO_RESUME is

			 * not supported, no need to re-start streams that

			 * remained enabled in D0ix.

			/*

			 * trap the event, not sending trigger stop to

			 * prevent the FW pipelines from being stopped,

			 * and mark the flag to ignore the upcoming DAPM

			 * PM events.

	/*

	 * DMA and IPC sequence is different for start and stop. Need to send

	 * STOP IPC before stop DMA

 send IPC to the DSP */

 need to STOP DMA even if STOP IPC failed */

 free PCM if reset_hw_params is set and the STOP IPC is successful */

 free widget list only for SUSPEND trigger */

 nothing to do for BE */

 use dsp ops pointer callback directly if set */

 read position from DSP */

 nothing to do for BE */

 set runtime config */

 platform-specific */

 set any runtime constraints based on topology */

	/*

	 * caps->buffer_size_min is not used since the

	 * snd_pcm_hardware structure only defines buffer_bytes_max

 set wait time - TODO: come from topology */

 nothing to do for BE */

		/*

		 * keep going, no point in preventing the close

		 * from happening

/*

 * Pre-allocate playback/capture audio buffer pages.

 * no need to explicitly release memory preallocated by sof_pcm_new in pcm_free

 * snd_pcm_lib_preallocate_free_for_all() is called by the core.

 find SOF PCM for this RTD */

 do we need to pre-allocate playback audio buffer pages */

 pre-allocate playback audio buffer pages */

 do we need to pre-allocate capture audio buffer pages */

 pre-allocate capture audio buffer pages */

	/*

	 * Search for all matching DAIs as we can have both playback and capture DAI

	 * associated with the same link.

 fixup the BE DAI link to match any values from topology */

 no topology exists for this BE, try a common configuration */

  set 48k, stereo, 16bits by default */

 read format from topology */

 read rate and channels from topology */

 search for config to pcm params match, if not found use default */

 DMIC only supports 16 or 32 bit formats */

		/*

		 * HDAudio does not follow the default trigger

		 * sequence due to firmware implementation

		/*

		 * Dai could run with different channel count compared with

		 * front end, so get dai channel count from topology

 load the default topology */

 remove topology */

 increment module refcount when a pcm is opened */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>



 the sof- prefix is added by the core */

 set up BE dai_links */

 create dummy BE dai_links */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>



 Generic IPC layer that can work over MMIO and SPI/I2C. PHY layer provided

 by platform driver code.



/*

 * IPC message Tx/Rx message handling.

 SOF generic IPC data */

 protects messages and the disable flag */

 disables further sending of ipc's */

 wait for IPC message reply */

 wait for DSP IPC completion */

 copy the data returned from DSP */

 re-enable dumps after successful IPC tx */

 send IPC message from host to DSP */

	/*

	 * The spin-lock is also still needed to protect message objects against

	 * other atomic contexts.

 initialise the message */

 attach any data */

 Next reply that we receive will be related to this message */

 now wait for completion */

 send IPC message from host to DSP */

 ensure the DSP is in D0 before sending a new IPC */

/*

 * send IPC message from host to DSP without modifying the DSP state.

 * This will be used for IPC's that can be handled by the DSP

 * even in a low-power D0 substate.

 Serialise IPC TX */

 handle reply message from DSP */

 wake up and return the error if we have waiters on this message ? */

 read back full message */

 DSP firmware has sent host a message  */

 read back header */

 check message type */

 check for FW boot completion */

 wake up firmware loader */

 need to pass msg id into the function */

/*

 * IPC trace mechanism.

 read back full message */

/*

 * IPC stream position.

 only inform ALSA for period_wakeup mode */

 DSP notifies host of an XRUN within FW */

 stop PCM on XRUN - used for pipeline debug */

 stream notifications from DSP FW */

 get msg cmd type and msd id */

 get stream position IPC - use faster MMIO method if available on platform */

 read position via slower IPC */

 send IPC to the DSP */

 calculate payload size and number of messages */

 allocate max ipc size because we have at least one */

 copy the header data */

 Serialise IPC TX */

 copy the payload data in a loop */

/*

 * IPC get()/set() for kcontrols.

	/*

	 * Volatile controls should always be part of static pipelines and the widget use_count

	 * would always be > 0 in this case. For the others, just return the cached value if the

	 * widget is not set up.

 read or write firmware volume */

 write/read value header via mmaped region */

 calculate header and data size */

 send normal size ipc in one part */

 data is bigger than max ipc size, chop into smaller pieces */

 large messages is only supported from ABI 3.3.0 onwards */

 copy the fw_version into debugfs at first boot */

 indicate that we aren't sending a message ATM */

 disable sending of ipc's */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>



 This is for registers bits with attribute RWC */

 This is for registers bits with attribute RWC */

	/*

	 * check if DSP is not ready and did not set the dsp_oops_offset.

	 * if the dsp_oops_offset is not set, set it from the panic message.

	 * Also add a check to memory window setting with panic message.

 We want to see the DSP panic! */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>



 see SOF_DBG_ flags */

 SOF defaults if not provided by the platform in ms */

/*

 * FW Panic/fault handling.

 standard FW panic types */

/*

 * helper to be called from .dbg_dump callbacks. No error code is

 * provided, it's left as an exercise for the caller of .dbg_dump

 * (typically IPC or loader)

 is firmware dead ? */

 no fault ? */

 unknown error */

/*

 *			FW Boot State Transition Diagram

 *

 *    +-----------------------------------------------------------------------+

 *    |									      |

 * ------------------	     ------------------				      |

 * |		    |	     |		      |				      |

 * |   BOOT_FAILED  |	     |  READY_FAILED  |-------------------------+     |

 * |		    |	     |	              |				|     |

 * ------------------	     ------------------				|     |

 *	^			    ^					|     |

 *	|			    |					|     |

 * (FW Boot Timeout)		(FW_READY FAIL)				|     |

 *	|			    |					|     |

 *	|			    |					|     |

 * ------------------		    |		   ------------------	|     |

 * |		    |		    |		   |		    |	|     |

 * |   IN_PROGRESS  |---------------+------------->|    COMPLETE    |	|     |

 * |		    | (FW Boot OK)   (FW_READY OK) |		    |	|     |

 * ------------------				   ------------------	|     |

 *	^						|		|     |

 *	|						|		|     |

 * (FW Loading OK)			       (System Suspend/Runtime Suspend)

 *	|						|		|     |

 *	|						|		|     |

 * ------------------		------------------	|		|     |

 * |		    |		|		 |<-----+		|     |

 * |   PREPARE	    |		|   NOT_STARTED  |<---------------------+     |

 * |		    |		|		 |<---------------------------+

 * ------------------		------------------

 *    |	    ^			    |	   ^

 *    |	    |			    |	   |

 *    |	    +-----------------------+	   |

 *    |		(DSP Probe OK)		   |

 *    |					   |

 *    |					   |

 *    +------------------------------------+

 *	(System Suspend/Runtime Suspend)

 probe the DSP hardware */

 check machine info */

 set up platform component driver */

 register any debug/trace capabilities */

		/*

		 * debugfs issues are suppressed in snd_sof_dbg_init() since

		 * we cannot rely on debugfs

		 * here we trap errors due to memory allocation only.

 init the IPC */

 load the firmware */

	/*

	 * Boot the firmware. The FW boot status will be modified

	 * in snd_sof_run_firmware() depending on the outcome.

 init DMA trace */

 non fatal */

 hereafter all FW boot flows are for PM reasons */

 now register audio DSP platform driver and dai */

	/*

	 * Some platforms in SOF, ex: BYT, may not have their platform PM

	 * callbacks set. Increment the usage count so as to

	 * prevent the device from entering runtime suspend.

 all resources freed, update state to match */

 errors cannot be propagated, log */

 initialize sof device */

 initialize default DSP power state */

 check all mandatory ops */

 set default timeouts if none provided */

	/*

	 * Unregister machine driver. This will unbind the snd_card which

	 * will remove the component driver and unload the topology

	 * before freeing the snd_card.

	/*

	 * Unregistering the machine driver results in unloading the topology.

	 * Some widgets, ex: scheduler, attempt to power down the core they are

	 * scheduled on, when they are unloaded. Therefore, the DSP must be

	 * removed only after the topology has been unloaded.

 release firmware */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>



 Generic debug routines used to export DSP MMIO and memories to userspace

 for firmware debugging.



/**

 * strsplit_u32 - Split string into sequence of u32 tokens

 * @buf:	String to split into tokens.

 * @delim:	String containing delimiter characters.

 * @tkns:	Returned u32 sequence pointer.

 * @num_tkns:	Returned number of tokens obtained.

 add to dfsentry list */

 configure test IPC */

 set test end time for duration flood test */

 send test IPC's */

 compute min and max response times */

 sum up response times */

 test complete? */

 return if the first IPC fails */

 compute average response time */

 clear previous test output */

 format output string */

	/*

	 * write op is only supported for ipc_flood_count or

	 * ipc_flood_duration_ms debugfs entries atm.

	 * ipc_flood_count floods the DSP with the number of IPC's specified.

	 * ipc_duration_ms test floods the DSP for the time specified

	 * in the debugfs entry.

 test completion criterion */

 limit max duration/ipc count for flood test */

 find the minimum. min() is not used to avoid warnings */

 find the minimum. min() is not used to avoid warnings */

 flood test */

 return size if test is successful */

 validate position & count */

 find the minimum. min() is not used since it adds sparse warnings */

 align io read start to u32 multiple */

 intermediate buffer size must be u32 multiple */

 if start position is unaligned, read extra u32 */

		/*

		 * If the DSP is active: copy from IO.

		 * If the DSP is suspended:

		 *	- Copy from IO if the memory is always accessible.

		 *	- Otherwise, copy from cached buffer.

 if the DSP is in D3 */

 copy to userspace */

 update count & position if copy succeeded */

 create FS entry for debug files that can expose DSP memories, registers */

	/*

	 * allocate cache buffer that will be used to save the mem window

	 * contents prior to suspend

 add to dfsentry list */

 create FS entry for debug files to expose kernel memory */

		/*

		 * cache_buf is unused for SOF_DFSENTRY_TYPE_BUF debugfs entries.

		 * So, use it to save the results of the last IPC flood test.

 add to dfsentry list */

 read memory info from FW only once for each file read */

 allocate buffer memory only in first open run, to save memory when unused */

 don't allocate buffer before first usage, to save memory when unused */

 add to dfsentry list */

 use "sof" as top level debugFS dir */

 init dfsentry list */

 create debugFS files for platform specific MMIO/DSP memories */

 errors are only due to memory allocation, not debugfs */

 create read-write ipc_flood_count debugfs entry */

 errors are only due to memory allocation, not debugfs */

 create read-write ipc_flood_duration_ms debugfs entry */

 errors are only due to memory allocation, not debugfs */

 should we prevent DSP entering D3 ? */

 dump vital information to the logs */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2019 Intel Corporation. All rights reserved.



 Authors: Guennadi Liakhovetski <guennadi.liakhovetski@linux.intel.com>

 Generic SOF IPC code */

 Mailbox-based Generic IPC implementation */

 The stream might already be closed */

 check if offset is overflow or it is not aligned */

 binding pcm substream to hda stream */

 align to DMA minimum transfer size */

 avoid circular buffer wrap in middle of period */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>



 Mixer Controls */

 set the ABI header values */

 refresh the component data from DSP */

 Set the flag to re-try next time to get the data */

 read back each channel */

 update each channel */

 notify DSP of mixer updates */

 read back each channel */

 update each channel */

 notify DSP of mixer updates */

 read back each channel */

 update each channel */

 notify DSP of enum updates */

 be->max has been verified to be >= sizeof(struct sof_abi_hdr) */

 copy back to kcontrol */

 be->max has been verified to be >= sizeof(struct sof_abi_hdr) */

 copy from kcontrol */

 notify DSP of byte control updates */

 make sure we have at least a header */

	/*

	 * The beginning of bytes data contains a header from where

	 * the length (as bytes) is needed to know the correct copy

	 * length of data from tlvd->tlv.

 make sure TLV info is consistent */

 be->max is coming from topology */

 Check that header id matches the command */

 be->max has been verified to be >= sizeof(struct sof_abi_hdr) */

 notify DSP of byte control updates */

	/*

	 * Decrement the limit by ext bytes header size to

	 * ensure the user space buffer is not exceeded.

 set the ABI header values */

 get all the component data from DSP */

 check data size doesn't exceed max coming from topology */

 make sure we don't exceed size provided by user space for data */

	/*

	 * Decrement the limit by ext bytes header size to

	 * ensure the user space buffer is not exceeded.

 set the ABI header values */

 check data size doesn't exceed max coming from topology */

 make sure we don't exceed size provided by user space for data */

 copy the new binary data */

 copy the new values */

 Find the swidget first */

 Translate SOF cmd to TPLG type */

 skip non matching types or non matching indexes within type */

		/*

		 * The message includes the updated value/data, update the

		 * control's local cache using the received notification

 Mark the scontrol that the value/data is changed in SOF */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>



 platform specific devices */

 allow runtime_pm */

 alternate fw and tplg filenames ? */

 set callback to be called on successful device probe to enable runtime_pm */

 call sof helper for DSP hardware probe */

 call sof helper for DSP hardware remove */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>



 ignore empty content */

 update counter only when parsing whole entry passed */

	/*

	 * Each entry contains at least 1, up to TRACE_FILTER_ELEMENTS_PER_ENTRY

	 * IPC elements, depending on content. Calculate IPC elements capacity

	 * for the input string where each element is set.

 split input string by ';', and parse each entry separately in trace_filter_parse_entry */

 assert null termination */

 add to dfsentry list */

	/*

	 * If host offset is less than local pos, it means write pointer of

	 * host DMA buffer has been wrapped. We should output the trace data

	 * at the end of host DMA buffer at first.

 If there is available trace data now, it is unnecessary to wait. */

 data immediately available */

		/*

		 * tracing has ended and all traces have been

		 * read by client, return EOF

 wait for available trace data from FW */

 set timeout to max value, no error code */

 make sure we know about any failures on the DSP side */

 check pos and count */

 check for buffer wrap and count overflow */

 min() not used to avoid sparse warnings */

 get available count based on current host offset */

 make sure count is <= avail */

 copy available trace data to debugfs */

 move debugfs reading position */

 avoid duplicate traces at next open */

 set IPC parameters */

 PARAMS_EXT is only supported from ABI 3.7.0 onwards */

 in nanosecond */

 send IPC to the DSP */

 set false before start initialization */

 allocate trace page table buffer */

 allocate trace data buffer */

 create compressed page table for audio firmware */

 an error has occurred within the DSP that prevents further trace */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Author: Pan Xiuli <xiuli.pan@linux.intel.com>



/*

 * From 4.4.1.5 table 4-64 Exception Causes of Xtensa

 * Instruction Set Architecture (ISA) Reference Manual

 only need xtensa atm */

 4 * 8chars + 3 ws + 1 terminating NUL */

	/*

	 * example output:

	 * 0x0049fbb0: 8000f2d0 0049fc00 6f6c6c61 00632e63

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 Copyright(c) 2020 Intel Corporation. All rights reserved.



 Authors: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>



/*

 * Hardware interface for audio DSP on Tigerlake.

 Tigerlake ops */

 probe/remove/shutdown */

 Register IO */

 Block IO */

 Mailbox IO */

 doorbell */

 ipc */

 machine driver */

 debug */

 stream callbacks */

 probe callbacks */

 firmware loading */

 pre/post fw run */

 parse platform specific extended manifest */

 dsp core power up/down */

 firmware run */

 trace callback */

 DAI drivers */

 PM */

 ALSA HW info flags */

 Tigerlake , Alderlake */

 Tigerlake-H */

 Elkhartlake */

 Alderlake-S */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Authors: Liam Girdwood <liam.r.girdwood@linux.intel.com>

	    Ranjani Sridharan <ranjani.sridharan@linux.intel.com>

	    Rander Wang <rander.wang@intel.com>

          Keyon Jie <yang.jie@linux.intel.com>



/*

 * Hardware interface for generic Intel audio DSP HDA IP

 use 48KHz if not found */

 use 16bits format if not found */

 disable SPIB, to enable buffer wrap for stream */

 update no_stream_position flag for ipc params */

		/* For older ABIs set host_period_bytes to zero to inform

		 * FW we don't want position updates. Newer versions use

		 * no_stream_position for this purpose.

 read position from IPC position */

	/*

	 * DPIB/posbuf position mode:

	 * For Playback, Use DPIB register from HDA space which

	 * reflects the actual data transferred.

	 * For Capture, Use the position buffer for pointer, as DPIB

	 * is not accurate enough, its update may be completed

	 * earlier than the data written to DDR.

		/*

		 * For capture stream, we need more workaround to fix the

		 * position incorrect issue:

		 *

		 * 1. Wait at least 20us before reading position buffer after

		 * the interrupt generated(IOC), to make sure position update

		 * happens on frame boundary i.e. 20.833uSec for 48KHz.

		 * 2. Perform a dummy Read to DPIB register to flush DMA

		 * position value.

		 * 3. Read the DMA Position from posbuf. Now the readback

		 * value should be >= period boundary.

	/*

	 * All playback streams are DMI L1 capable, capture streams need

	 * pause push/release to be disabled

 minimum as per HDA spec */

 avoid circular buffer wrap in middle of period */

 binding pcm substream to hda stream */

 unbinding pcm substream to hda stream */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Authors: Liam Girdwood <liam.r.girdwood@linux.intel.com>

	    Ranjani Sridharan <ranjani.sridharan@linux.intel.com>

	    Rander Wang <rander.wang@intel.com>

          Keyon Jie <yang.jie@linux.intel.com>



/*

 * Hardware interface for audio DSP on Cannonlake.

 reply message from DSP */

 mask Done interrupt */

 handle immediate reply from DSP core */

 new message from DSP */

 handle messages from DSP */

		/*

		 * This interrupt is not shared so no need to return IRQ_NONE.

	/*

	 * clear busy interrupt to tell dsp controller this

	 * interrupt has been accepted, not trigger it again

	/*

	 * set done bit to ack dsp the msg has been

	 * processed and send reply msg to dsp

	/*

	 * set DONE bit - tell DSP we have received the reply msg

	 * from DSP, and processed it, don't send more reply to host

 unmask Done interrupt */

 send the compact message via the primary register */

 send payload via the extended data register */

	/*

	 * Currently the only compact IPC supported is the PM_GATE

	 * IPC which is used for transitioning the DSP between the

	 * D0I0 and D0I3 states. And these are sent only during the

	 * set_power_state() op. Therefore, there will never be a case

	 * that a compact IPC results in the DSP exiting D0I3 without

	 * the host and FW being in sync.

 send the message via IPC registers */

 send the message via mailbox */

	/*

	 * Use mod_delayed_work() to schedule the delayed work

	 * to avoid scheduling multiple workqueue items when

	 * IPCs are sent at a high-rate. mod_delayed_work()

	 * modifies the timer if the work is pending.

	 * Also, a new delayed work should not be queued after the

	 * CTX_SAVE IPC, which is sent before the DSP enters D3.

 read IPC status */

 dump the IPC regs */

 TODO: parse the raw msg */

 cannonlake ops */

 probe/remove/shutdown */

 Register IO */

 Block IO */

 Mailbox IO */

 doorbell */

 ipc */

 machine driver */

 debug */

 stream callbacks */

 probe callbacks */

 firmware loading */

 pre/post fw run */

 parse platform specific extended manifest */

 dsp core power up/down */

 firmware run */

 trace callback */

 DAI drivers */

 PM */

 ALSA HW info flags */

 Cannonlake */

 Jasperlake */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>



 platform specific devices */

 PCI IDs */

 CNL-LP */

 CNL-H */

 CML-LP */

 CML-H */

 CML-S */

 pci_driver definition */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Authors: Liam Girdwood <liam.r.girdwood@linux.intel.com>

	    Ranjani Sridharan <ranjani.sridharan@linux.intel.com>

	    Rander Wang <rander.wang@intel.com>

          Keyon Jie <yang.jie@linux.intel.com>



/*

 * Hardware interface for generic Intel audio DSP HDA IP

	/*

	 * tell DSP cmd is done - clear busy

	 * interrupt and send reply msg to dsp

 unmask BUSY interrupt */

	/*

	 * set DONE bit - tell DSP we have received the reply msg

	 * from DSP, and processed it, don't send more reply to host

 unmask Done interrupt */

 send IPC message to DSP */

	/*

	 * Sometimes, there is unexpected reply ipc arriving. The reply

	 * ipc belongs to none of the ipcs sent from driver.

	 * In this case, the driver must ignore the ipc.

		/*

		 * memory windows are powered off before sending IPC reply,

		 * so we can't read the mailbox for CTX_SAVE and PM_GATE

		 * replies.

 get IPC reply from DSP in the mailbox */

 reply correct size ? */

 getter payload is never known upfront */

 read the message */

 IPC handler thread */

 read IPC status */

 is this a reply message from the DSP */

 mask Done interrupt */

		/*

		 * Make sure the interrupt thread cannot be preempted between

		 * waking up the sender and re-enabling the interrupt. Also

		 * protect against a theoretical race with sof_ipc_tx_message():

		 * if the DSP is fast enough to receive an IPC message, reply to

		 * it, and the host interrupt processing calls this function on

		 * a different core from the one, where the sending is taking

		 * place, the message might not yet be marked as expecting a

		 * reply.

 handle immediate reply from DSP core */

 set the done bit */

 is this a new message from DSP */

 mask BUSY interrupt */

 handle messages from DSP */

 this is a PANIC message !! */

 normal message - process normally */

		/*

		 * This interrupt is not shared so no need to return IRQ_NONE.

 Check if an IPC IRQ occurred */

 store status */

 invalid message ? */

 IPC message ? */

 The stream might already be closed */

 validate offset */

 check for unaligned offset or overflow */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018-2021 Intel Corporation. All rights reserved.



 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>



/*

 * Hardware interface for audio DSP on Atom devices

/*

 * Debug

 first read regsisters */

 note: variable AR register array is not read */

 then get panic info */

 then get the stack */

 now try generic SOF status messages */

 provide some context for firmware debug */

/*

 * IPC Doorbell IRQ handler and thread.

 reply message from DSP, Mask Done interrupt first */

 new message from DSP, Mask Busy interrupt first */

 reply message from DSP */

		/*

		 * handle immediate reply from DSP core. If the msg is

		 * found, set done bit in cmd_done which is called at the

		 * end of message processing function, else set it here

		 * because the done bit can't be set in cmd_done function

		 * which is triggered by msg

 new message from DSP */

 Handle messages from DSP Core */

 unmask and prepare to receive Done interrupt */

 send the message */

	/*

	 * Sometimes, there is unexpected reply ipc arriving. The reply

	 * ipc belongs to none of the ipcs sent from driver.

	 * In this case, the driver must ignore the ipc.

 get reply */

 reply correct size ? */

 read the message */

 clear BUSY bit and set DONE bit - accept new messages */

 unmask and prepare to receive next new message */

 clear DONE bit - tell DSP we have completed */

/*

 * DSP control.

 release stall and wait to unstall */

 return init core mask */

 put DSP into reset, set reset vector and stall */

 take DSP out of reset and keep stalled for FW loading */

 this assumes a .tplg extension */

 Atom DAIs */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Authors: Liam Girdwood <liam.r.girdwood@linux.intel.com>

	    Ranjani Sridharan <ranjani.sridharan@linux.intel.com>

	    Rander Wang <rander.wang@intel.com>

          Keyon Jie <yang.jie@linux.intel.com>



/*

 * Hardware interface for generic Intel audio DSP HDA IP

 Non audio DMA user, like dma-trace */

/*

 * set up one of BDL entries for a stream

 program BDL addr */

 program BDL size */

 one BDLE should not cross 4K boundary */

 only program IOC when the whole segment is processed */

/*

 * set up Buffer Descriptor List (BDL) for host memory transfer

 * BDL describes the location of the individual buffers and is little endian.

 program the initial BDL entries */

	/*

	 * set IOC if don't use position IPC

	 * and period_wakeup needed.

 set the last small entry */

 enable/disable SPIB for the stream */

 set the SPIB value */

 get next unused stream */

 get an unused stream */

 check if the host DMA channel is reserved */

 stream found ? */

	/*

	 * Prevent DMI Link L1 entry for streams that don't support it.

	 * Workaround to address a known issue with host DMA that results

	 * in xruns during pause/release in capture scenarios.

 free a stream */

	/*

	 * close stream matching the stream tag and check if there are any open streams

	 * that are DMI L1 incompatible.

 Enable DMI L1 if permitted */

 cmd must be for audio stream */

 minimal recommended programming for ICCMAX stream */

 reset BDL address */

 program BDL address */

 program cyclic buffer length */

 program last valid index */

 decouple host and link DMA, enable DSP features */

 Follow HW recommendation to set the guardband value to 95us during FW boot */

 start DMA */

/*

 * prepare for common hdac registers settings, for both code loader

 * and normal stream.

 decouple host and link DMA */

 clear stream status */

 stream reset */

 wait for hardware to report that stream is out of reset */

 reset BDL address */

 clear stream status */

 program stream tag to set up stream descriptor for DMA */

 program cyclic buffer length */

	/*

	 * Recommended hardware programming sequence for HDAudio DMA format

	 *

	 * 1. Put DMA into coupled mode by clearing PPCTL.PROCEN bit

	 *    for corresponding stream index before the time of writing

	 *    format to SDxFMT register.

	 * 2. Write SDxFMT

	 * 3. Set PPCTL.PROCEN bit for corresponding stream index to

	 *    enable decoupled mode

 couple host and link DMA, disable DSP features */

 program stream format */

 decouple host and link DMA, enable DSP features */

 program last valid index */

 program BDL address */

 enable position buffer */

 set interrupt enable bits */

 read FIFO size */

 couple host and link DMA if link DMA channel is idle */

 The function can be called at irq thread, so use spin_lock_irq */

 if Register inaccessible, ignore it.*/

 Inform ALSA only in case not do that with IPC */

	/*

	 * Loop 10 times to handle missed interrupts caused by

	 * unsolicited responses from the codec

 check streams */

 check and clear RIRB interrupt */

				/*

				 * Clearing the interrupt status here ensures

				 * that no interrupt gets masked after the RIRB

				 * wp is read in snd_hdac_bus_update_rirb.

 get stream count from GCAP */

	/*

	 * mem alloc for the position buffer

	 * TODO: check position buffer update

 mem alloc for the CORB/RIRB ringbuffers */

 create capture streams */

 do we support SPIB */

 memory alloc for stream BDL */

 create playback streams */

 we always have DSP support */

 do we support SPIB */

 mem alloc for stream BDL */

 store total stream count (playback + capture) from GCAP */

 free position buffer */

 free position buffer */

 TODO: decouple */

 free bdl buffer */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Authors: Liam Girdwood <liam.r.girdwood@linux.intel.com>

	    Ranjani Sridharan <ranjani.sridharan@linux.intel.com>

	    Rander Wang <rander.wang@intel.com>

          Keyon Jie <yang.jie@linux.intel.com>



/*

 * Hardware interface for generic Intel audio DSP HDA IP

/*

 * DSP Core control.

 set reset bits for cores */

 poll with timeout to check if operation successful */

 has core entered reset ? */

 clear reset bits for cores */

 poll with timeout to check if operation successful */

 has core left reset ? */

 stall core */

 set reset state */

 leave reset state */

 run core */

 is core now running ? */

/*

 * Power Management.

 update bits */

 poll with timeout to check if operation successful */

 did core power up ? */

 update bits */

 restrict core_mask to host managed cores mask */

 return if core_mask is not valid or cores are already enabled */

 power up */

 restrict core_mask to host managed cores mask */

 return if core_mask is not valid */

 place core in reset prior to power down */

 power down core */

 make sure we are in OFF state */

 enable IPC DONE and BUSY interrupts */

 enable IPC interrupt */

 disable IPC interrupt */

 disable IPC BUSY and DONE interrupt */

 configure pm_gate ipc message */

 send pm_gate ipc to dsp */

 Write to D0I3C after Command-In-Progress bit is cleared */

 Update D0I3C register */

 Wait for cmd in progress to be cleared before exiting the function */

	/*

	 * Sanity check for illegal state transitions

	 * The only allowed transitions are:

	 * 1. D3 -> D0I0

	 * 2. D0I0 -> D0I3

	 * 3. D0I3 -> D0I0

 Follow the sequence below for D0 substate transitions */

 Follow regular flow for D3 -> D0 transition */

 Set flags and register value for D0 target substate */

		/*

		 * Trace DMA need to be disabled when the DSP enters

		 * D0I3 for S0Ix suspend, but it can be kept enabled

		 * when the DSP enters D0I3 while the system is in S0

		 * for debug purpose.

 prevent power gating in D0I0 */

 update D0I3C register */

	/*

	 * Notify the DSP of the state change.

	 * If this IPC fails, revert the D0I3C register update in order

	 * to prevent partial state change.

 fallback to the previous register value */

	/*

	 * This can fail but return the IPC error to signal that

	 * the state change failed.

 helper to log DSP state */

/*

 * All DSP power state transitions are initiated by the driver.

 * If the requested state change fails, the error is simply returned.

 * Further state transitions are attempted only when the set_power_save() op

 * is called again either because of a new IPC sent to the DSP or

 * during system suspend/resume.

	/*

	 * When the DSP is already in D0I3 and the target state is D0I3,

	 * it could be the case that the DSP is in D0I3 during S0

	 * and the system is suspending to S0Ix. Therefore,

	 * hda_dsp_set_D0_state() must be called to disable trace DMA

	 * by sending the PM_GATE IPC to the FW.

	/*

	 * For all other cases, return without doing anything if

	 * the DSP is already in the target state.

 The only allowed transition is: D0I0 -> D3 */

/*

 * Audio DSP states may transform as below:-

 *

 *                                         Opportunistic D0I3 in S0

 *     Runtime    +---------------------+  Delayed D0i3 work timeout

 *     suspend    |                     +--------------------+

 *   +------------+       D0I0(active)  |                    |

 *   |            |                     <---------------+    |

 *   |   +-------->                     |    New IPC	|    |

 *   |   |Runtime +--^--+---------^--+--+ (via mailbox)	|    |

 *   |   |resume     |  |         |  |			|    |

 *   |   |           |  |         |  |			|    |

 *   |   |     System|  |         |  |			|    |

 *   |   |     resume|  | S3/S0IX |  |                  |    |

 *   |   |	     |  | suspend |  | S0IX             |    |

 *   |   |           |  |         |  |suspend           |    |

 *   |   |           |  |         |  |                  |    |

 *   |   |           |  |         |  |                  |    |

 * +-v---+-----------+--v-------+ |  |           +------+----v----+

 * |                            | |  +----------->                |

 * |       D3 (suspended)       | |              |      D0I3      |

 * |                            | +--------------+                |

 * |                            |  System resume |                |

 * +----------------------------+		 +----------------+

 *

 * S0IX suspend: The DSP is in D0I3 if any D0I3-compatible streams

 *		 ignored the suspend trigger. Otherwise the DSP

 *		 is in D3.

 disable IPC interrupts */

 power down all hda link */

 power down DSP */

 disable ppcap interrupt */

 disable hda bus irq and streams */

 disable LP retention mode */

 reset controller */

 display codec can powered off after link reset */

 display codec must be powered before link reset */

	/*

	 * clear TCSEL to clear playback on some HD Audio

	 * codecs. PCI TCSEL is defined in the Intel manuals.

 reset and start hda controller */

 check jack status */

 turn off the links that were off before suspend */

 check dma status and clean up CORB/RIRB buffers */

 enable ppcap interrupt */

 display codec can powered off after controller init */

 resume from D0I3 */

 power up links that were active before suspend */

 set up CORB/RIRB buffers if was on before suspend */

 Set DSP power state */

 restore L1SEN bit */

 restore and disable the system wakeup */

 init hda controller. DSP cores will be powered up during fw boot */

 init hda controller. DSP cores will be powered up during fw boot */

 cancel any attempt for DSP D0I3 */

 stop hda controller and power dsp off */

 cancel any attempt for DSP D0I3 */

 Set DSP power state */

 enable L1SEN to make sure the system can enter S0Ix */

 stop the CORB/RIRB DMA if it is On */

 no link can be powered in s0ix state */

 enable the system waking up via IPC IRQ */

 stop hda controller and power dsp off */

 set internal flag for BE */

		/*

		 * clear stream. This should already be taken care for running

		 * streams when the SUSPEND trigger is called. But paused

		 * streams do not get suspended, so this needs to be done

		 * explicitly during suspend.

 DSP can enter D0I3 iff only D0I3-compatible streams are active */

 remain in D0I0 */

 This can fail but error cannot be propagated */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Authors: Keyon Jie <yang.jie@linux.intel.com>



 CONFIG_SND_SOC_SOF_HDA_AUDIO_CODEC */

 load the legacy HDA codec driver */

 MODULE */

 enable controller wake up event for all codecs with jack connectors */

 check jack status after resuming from suspend mode */

		/*

		 * Wake up all jack-detecting codecs regardless whether an event

		 * has been recorded in STATESTS

 CONFIG_SND_SOC_SOF_HDA_AUDIO_CODEC */

 probe individual codec */

 only probe ASoC codec drivers for HDAC-HDMI */

		/*

		 * handle ret==0 (no driver bound) as an error, but pass

		 * other return codes without modification

 Codec initialization */

 probe codecs in avail slots */

 i915 exposes a HDA codec for HDMI audio */

 codec_mask not yet known, power up for probe */

 power down unconditionally */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018-2021 Intel Corporation. All rights reserved.



 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>



 platform specific devices */

 PCI IDs */

 BXT-P (ApolloLake) */

 BXT-T */

 GeminiLake */

 pci_driver definition */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Authors: Keyon Jie <yang.jie@linux.intel.com>



/*

 * This function checks if the host dma channel corresponding

 * to the link DMA stream_tag argument is assigned to one

 * of the FEs connected to the BE DAI.

 check if link is available */

				/*

				 * check if the stream tag matches the stream

				 * tag of one of the connected FEs

				/*

				 * This must be a hostless stream.

				 * So reserve the host DMA channel.

		/*

		 * Decouple host and link DMA. The decoupled flag

		 * is updated in snd_hdac_ext_stream_decouple().

 Update config for the DAI widget */

 update config with stream tag */

 send DAI_CONFIG IPC */

 set up/free DAI widget and send DAI_CONFIG IPC */

 get stored dma data if resuming from system suspend */

 set up the DAI widget and send the DAI_CONFIG with the new tag */

 set the stream tag in the codec dai dma params */

 set up hw_params */

		/*

		 * clear link DMA channel. It will be assigned when

		 * hw_params is set up again after resume.

 free the link DMA channel in the FW and the DAI widget */

 free the host DMA channel reserved by hostless streams */

 only one flag used so far to harden hw_params/hw_free/trigger/prepare */

 DAI_CONFIG IPC during hw_params is not supported in older firmware */

 params are ignored for now */

	/*

	 * the SSP will only be reconfigured during resume operations and

	 * not in case of xruns

/*

 * common dai driver for skl+ platforms.

 * some products who use this DAI array only physically have a subset of

 * the DAIs, but no harm is done here by adding the whole set.

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Authors: Liam Girdwood <liam.r.girdwood@linux.intel.com>

	    Ranjani Sridharan <ranjani.sridharan@linux.intel.com>

	    Rander Wang <rander.wang@intel.com>

          Keyon Jie <yang.jie@linux.intel.com>



/*

 * Hardware interface for audio DSP on Apollolake and GeminiLake

 apollolake ops */

 probe/remove/shutdown */

 Register IO */

 Block IO */

 Mailbox IO */

 doorbell */

 ipc */

 machine driver */

 debug */

 stream callbacks */

 probe callbacks */

 firmware loading */

 firmware run */

 pre/post fw run */

 parse platform specific extended manifest */

 dsp core power up/down */

 trace callback */

 DAI drivers */

 PM */

 ALSA HW info flags */

 Apollolake */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2019-2020 Intel Corporation. All rights reserved.



 Author: Cezary Rojewski <cezary.rojewski@intel.com>



 compr params do not store bit depth, default to S32_LE */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>



/*

 * Hardware interface for audio DSP on Baytrail, Braswell and Cherrytrail.

 Disable Interrupt from both sides */

 Put DSP into reset, set reset vector */

 enable BUSY and disable DONE Interrupt by default */

 DSP DMA can only access low 31 bits of host memory */

 LPE base */

 TODO: add offsets */

 IMR base - optional */

 some BIOSes don't map IMR */

 register our IRQ */

 enable BUSY and disable DONE Interrupt by default */

 set default mailbox offset for FW ready message */

 baytrail ops */

 device init */

 DSP core boot / reset */

 Register IO */

 Block IO */

 Mailbox IO */

 doorbell */

 ipc */

 machine driver */

 debug */

 stream callbacks */

 module loading */

Firmware loading */

 PM */

 DAI drivers */

 we have only 3 SSPs on byt*/

 ALSA HW info flags */

 cherrytrail and braswell ops */

 device init */

 DSP core boot / reset */

 Register IO */

 Block IO */

 Mailbox IO */

 doorbell */

 ipc */

 machine driver */

 debug */

 stream callbacks */

 module loading */

Firmware loading */

 PM */

 DAI drivers */

 all 6 SSPs may be available for cherrytrail */

 ALSA HW info flags */

 BYTCR uses different IRQ index */

 acpi_driver definition */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018-2021 Intel Corporation. All rights reserved.



 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>



 platform specific devices */

 PCI IDs */

 TGL-LP */

 TGL-H */

 EHL */

 EHL */

 ADL-S */

 ADL-P */

 ADL-M */

 pci_driver definition */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Authors: Liam Girdwood <liam.r.girdwood@linux.intel.com>

	    Ranjani Sridharan <ranjani.sridharan@linux.intel.com>

	    Rander Wang <rander.wang@intel.com>

          Keyon Jie <yang.jie@linux.intel.com>



/*

 * Hardware interface for generic Intel audio DSP HDA IP

 initialize period_bytes */

	/*

	 * initialize capture stream, set BDL address and return corresponding

	 * stream tag which will be sent to the firmware by IPC message.

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Authors: Keyon Jie <yang.jie@linux.intel.com>

	/*

	 * Both codec driver and controller can hold references to

	 * display power. To avoid unnecessary power-up/down cycles,

	 * controller doesn't immediately release its reference.

	 *

	 * If the codec driver powers down the link, release

	 * the controller reference as well.

/*

 * This can be used for both with/without hda link support.

 CONFIG_SND_SOC_SOF_HDA */

	/*

	 * There is only one HDA bus atm. keep the index as 0.

	 * Need to fix when there are more than one HDA bus.

 CONFIG_SND_SOC_SOF_HDA */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018-2021 Intel Corporation. All rights reserved.



 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>



 platform specific devices */

 DSP DMA can only access low 31 bits of host memory */

 LPE base */

 IMR base - optional */

 some BIOSes don't map IMR */

 register our IRQ */

 enable BUSY and disable DONE Interrupt by default */

 set default mailbox offset for FW ready message */

 device init */

 DSP core boot / reset */

 Register IO */

 Block IO */

 Mailbox IO */

 doorbell */

 ipc */

 machine driver */

 debug */

 stream callbacks */

 module loading */

Firmware loading */

 DAI drivers */

 we have only 3 SSPs on byt*/

 ALSA HW info flags */

 IRAM, but subtract IRAM offset */

 PCI IDs */

 pci_driver definition */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Authors: Liam Girdwood <liam.r.girdwood@linux.intel.com>

	    Ranjani Sridharan <ranjani.sridharan@linux.intel.com>

	    Rander Wang <rander.wang@intel.com>

          Keyon Jie <yang.jie@linux.intel.com>



/*

 * Hardware interface for generic Intel audio DSP HDA IP

/*

 * HDA Operations.

 0 to enter reset and 1 to exit reset */

 enter/exit HDA controller reset */

 wait to enter/exit reset */

 enter/exit reset failed */

	/*

	 * On some devices, one reset cycle is necessary before reading

	 * capabilities

/*

 * enable/disable audio dsp clock gating and power gating bits.

 * This allows the HW to opportunistically power and clock gate

 * the audio dsp when it is idle

 enable/disable audio dsp clock gating */

 enable/disable DMI Link L1 support */

 enable/disable audio dsp power gating */

 reset HDA controller */

 exit HDA controller reset */

 check to see if controller is ready */

 Accept unsolicited responses */

 detect codecs */

 clear stream status */

 clear WAKESTS */

 clear rirb status */

 clear interrupt status register */

 initialize the codec command I/O */

 enable CIE and GIE interrupts */

 program the position buffer */

 Reset stream-to-link mapping */

 disable interrupts in stream descriptor */

 disable SIE for all streams */

 disable controller CIE and GIE */

 clear stream status */

 clear WAKESTS */

 clear rirb status */

 clear interrupt status register */

 disable CORB/RIRB */

 disable position buffer */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Authors: Liam Girdwood <liam.r.girdwood@linux.intel.com>

	    Ranjani Sridharan <ranjani.sridharan@linux.intel.com>

	    Rander Wang <rander.wang@intel.com>

          Keyon Jie <yang.jie@linux.intel.com>



/*

 * Hardware interface for HDA DSP code loader

 allocate DMA buffer */

 initialize period_bytes */

/*

 * first boot sequence has some extra steps. core 0 waits for power

 * status on core 1, so power up core 1 also momentarily, keep it in

 * reset/stall and then turn it off

 step 1: power up corex */

 DSP is powered up, set all SSPs to slave mode */

 step 2: purge FW request */

 step 3: unset core 0 reset state & unstall/run core 0 */

 step 4: wait for IPC DONE bit from ROM */

 set DONE bit to clear the reply IPC message */

 step 5: power down cores that are no longer needed */

 step 6: enable IPC interrupts */

 step 7: wait for ROM init */

 after max boot attempts make sure that the dump is printed */

 code loader is special case that reuses stream ops */

 reset BDL address */

	/*

	 * even in case of errors we still need to stop the DMAs,

	 * but we return the initial error should the DMA stop also fail

 save the original LTRP guardband value */

 prepare capture stream for ICCMAX */

	/*

	 * Perform iccmax stream cleanup. This should be done even if firmware loading fails.

	 * If the cleanup also fails, we return the initial error

 set return value to indicate cleanup failure */

 restore the original guardband value after FW boot */

 init for booting wait */

 prepare DMA for code loader stream */

 try ROM init a few times before giving up */

 don't retry anymore if successful */

	/*

	 * When a SoundWire link is in clock stop state, a Slave

	 * device may trigger in-band wakes for events such as jack

	 * insertion or acoustic event detection. This event will lead

	 * to a WAKEEN interrupt, handled by the PCI device and routed

	 * to PME if the PCI device is in D3. The resume function in

	 * audio PCI driver will be invoked by ACPI for PME event and

	 * initialize the device and process WAKEEN interrupt.

	 *

	 * The WAKEEN interrupt should be processed ASAP to prevent an

	 * interrupt flood, otherwise other interrupts, such IPC,

	 * cannot work normally.  The WAKEEN is handled after the ROM

	 * is initialized successfully, which ensures power rails are

	 * enabled before accessing the SoundWire SHIM registers

	/*

	 * at this point DSP ROM has been initialized and

	 * should be ready for code loading and firmware boot

	/*

	 * Perform codeloader stream cleanup.

	 * This should be done even if firmware loading fails.

	 * If the cleanup also fails, we return the initial error

 set return value to indicate cleanup failure */

	/*

	 * return primary core id if both fw copy

	 * and stream clean up are successful

 disable DSP */

 pre fw run operations */

 disable clock gating and power gating */

 post fw run operations */

 re-enable clock gating and power gating */

/*

 * post fw run operations for ICL,

 * Core 3 will be powered up and in stall when HPRO is enabled

	/*

	 * The recommended HW programming sequence for ICL is to

	 * power up core 3 and keep it in stall if HPRO is enabled.

	 * Major difference between ICL and TGL, on ICL core 3 is managed by

	 * the host whereas on TGL it is handled by the firmware.

 re-enable clock gating and power gating */

 calculate total number of config data elements */

 skip empty token */

 These elements are defined but not being used yet. No warn is required */

 make sure core_mask in host managed cores */

 stall core */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>



/*

 * Hardware interface for audio DSP on Broadwell

 BARs */

/*

 * Debug

 DSP memories for BDW */

 DSP peripherals */

/*

 * DSP Control.

 set opportunistic mode on engine 0,1 for all channels */

 set DSP to RUN */

 return init core mask */

 put DSP into reset and stall */

 keep in reset for 10ms */

 take DSP out of reset and keep stalled for FW loading */

 Disable core clock gating (VDRTCTL2.DCLCGE = 0) */

 Disable D3PG (VDRTCTL0.D3PGD = 1) */

 Set D0 state */

 check that ADSP shim is enabled */

	/*

	 * select SSP1 19.2MHz base clock, SSP clock 0,

	 * turn off Low Power Clock

 stall DSP core, set clk to 192/96Mhz */

 Set 24MHz MCLK, prevent local clock gating, enable SSP0 clock */

 Stall and reset core, set CSR */

 Enable core clock gating (VDRTCTL2.DCLCGE = 1), delay 50 us */

 switch on audio PLL */

	/*

	 * set default power gating control, enable power gating control for

	 * all blocks. that is, can't be accessed, please enable each block

	 * before accessing.

 disable DMA finish function for SSP0 & SSP1 */

 set on-demond mode on engine 0,1 for all channels */

 Enable Interrupt from both sides */

 clear IPC registers */

 first read registers */

 note: variable AR register array is not read */

 then get panic info */

 then get the stack */

 now try generic SOF status messages */

 provide some context for firmware debug */

/*

 * IPC Doorbell IRQ handler and thread.

 Interrupt arrived, check src */

 reply message from DSP */

 Mask Done interrupt before return */

		/*

		 * handle immediate reply from DSP core. If the msg is

		 * found, set done bit in cmd_done which is called at the

		 * end of message processing function, else set it here

		 * because the done bit can't be set in cmd_done function

		 * which is triggered by msg

 new message from DSP */

 Mask Busy interrupt before return */

 Handle messages from DSP Core */

/*

 * IPC Mailbox IO

 send the message */

	/*

	 * Sometimes, there is unexpected reply ipc arriving. The reply

	 * ipc belongs to none of the ipcs sent from driver.

	 * In this case, the driver must ignore the ipc.

 get reply */

 reply correct size ? */

 read the message */

 clear BUSY bit and set DONE bit - accept new messages */

 unmask busy interrupt */

 clear DONE bit - tell DSP we have completed */

 unmask Done interrupt */

/*

 * Probe and remove.

 LPE base */

 TODO: add offsets */

 PCI base */

 register our IRQ */

 enable the DSP SHIM */

 DSP DMA can only access low 31 bits of host memory */

 set default mailbox offset for FW ready message */

 Broadwell DAIs */

 broadwell ops */

Device init */

 DSP Core Control */

 Register IO */

 Block IO */

 Mailbox IO */

 ipc */

 machine driver */

 debug */

 stream callbacks */

 Module loading */

Firmware loading */

 DAI drivers */

 ALSA HW info flags */

 acpi_driver definition */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018-2021 Intel Corporation. All rights reserved.



 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>



 platform specific devices */

 PCI IDs */

 ICL-LP */

 ICL-H */

 ICL-N */

 JSL-N */

 pci_driver definition */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license.  When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2018 Intel Corporation. All rights reserved.



 Authors: Liam Girdwood <liam.r.girdwood@linux.intel.com>

	    Ranjani Sridharan <ranjani.sridharan@linux.intel.com>

	    Rander Wang <rander.wang@intel.com>

          Keyon Jie <yang.jie@linux.intel.com>



/*

 * Hardware interface for generic Intel audio DSP HDA IP

 platform specific devices */

	/*

	 * For static pipelines, the DAI widget would already be set up and calling

	 * sof_widget_setup() simply returns without doing anything.

	 * For dynamic pipelines, the DAI widget will be set up now.

 set HW_PARAMS flag */

 send DAI_CONFIG IPC */

 nothing to do if hw_free() is called without restarting the stream after resume. */

 set HW_FREE flag */

	/*

	 * Reset the configured_flag and free the widget even if the IPC fails to keep

	 * the widget use_count balanced

/*

 * The default for SoundWire clock stop quirks is to power gate the IP

 * and do a Bus Reset, this will need to be modified when the DSP

 * needs to remain in D0i3 so that the Master does not lose context

 * and enumeration is not required on clock restart

 update config with link and stream ID */

 send invalid stream_id */

 save ACPI info for the probe step */

	/*

	 * ops and arg fields are not populated for now,

	 * they will be needed when the DAI callbacks are

	 * provided

 we could filter links here if needed, e.g for quirks */

 save context */

 store status */

 invalid message ? */

 SDW message ? */

 IS_ENABLED(CONFIG_SND_SOC_SOF_INTEL_SOUNDWIRE) */

 IS_ENABLED(CONFIG_SND_SOC_SOF_INTEL_SOUNDWIRE) */

/*

 * Debug

 not for us, must be generic sof message */

 first read registers */

 note: variable AR register array is not read */

 then get panic info */

 then get the stack */

 dump the first 8 dwords representing the extended ROM status */

 print ROM/FW status */

 read key IRQ stats and config registers */

 read IPC status */

 dump the IPC regs */

 TODO: parse the raw msg */

 HDA bus init */

 initialise hdac bus */

 HDA base */

 init i915 and HDMI codecs */

 get controller capabilities */

 this assumes a .tplg extension */

 first check NHLT for DMICs */

 allow for module parameter override */

 check if dsp is there */

 Init HDA controller after i915 init */

 scan SoundWire capabilities exposed by DSDT */

	/*

	 * probe/allocate SoundWire resources.

	 * The hardware configuration takes place in hda_sdw_startup

	 * after power rails are enabled.

	 * It's entirely possible to have a mix of I2S/DMIC/SoundWire

	 * devices, so we allocate the resources in all cases.

 create codec instances */

	/*

	 * we are done probing so decrement link counts

	/*

	 * Get global interrupt status. It includes all hardware interrupt

	 * sources in the Intel HD Audio controller.

 disable GIE interrupt */

 deal with streams and controller first */

 enable GIE interrupt */

	/*

	 * detect DSP by checking class/subclass/prog-id information

	 * class=04 subclass 03 prog-if 00: no DSP, legacy driver is required

	 * class=04 subclass 01 prog-if 00: DSP is present

	 *   (and may be required e.g. for DMIC or SSP support)

	 * class=04 subclass 03 prog-if 80: either of DSP or legacy mode works

	/*

	 * use position update IPC if either it is forced

	 * or we don't have other choice

 set up HDA base */

 DSP base */

 allow 64bit DMA address if supported by H/W */

 init streams */

		/*

		 * not all errors are due to memory issues, but trying

		 * to free everything does not harm

	/*

	 * register our IRQ

	 * let's try to enable msi firstly

	 * if it fails, use legacy interrupt mode

	 * TODO: support msi multiple vectors

 initialised to "false" by kzalloc() */

		/*

		 * in IO-APIC mode, hda->irq and ipc_irq are using the same

		 * irq number of pci->irq

	/*

	 * clear TCSEL to clear playback on some HD Audio

	 * codecs. PCI TCSEL is defined in the Intel manuals.

 init HDA capabilities */

 enable ppcap interrupt */

 set default mailbox offset for FW ready message */

 dsp_unmap: not currently used */

 cancel any attempt for DSP D0I3 */

 codec removal, invoke bus_device_remove */

 disable DSP IRQ */

 disable CIE and GIE interrupts */

 disable cores */

 disable DSP */

 codec detection */

		/*

		 * If no machine driver is found, then:

		 *

		 * generic hda machine driver can handle:

		 *  - one HDMI codec, and/or

		 *  - one external HDAudio codec

 topology: use the info from hda_machines */

				/*

				 * Prevent SoundWire links from starting when an external

				 * HDaudio codec is used

 used by hda machine driver to create dai links */

 Check if all Slaves defined on the link can be found */

 find out how many identical parts were reported on that link */

 find out how many identical parts are expected */

				/*

				 * we have to check unique id

				 * if there is more than one

				 * Slave on the link

	/*

	 * Select SoundWire machine driver if needed using the

	 * alternate tables. This case deals with SoundWire-only

	 * machines, for mixed cases with I2C/I2S the detection relies

	 * on the HID list.

			/*

			 * On some platforms such as Up Extreme all links

			 * are enabled but only one link can be used by

			 * external codec. Instead of exact match of two masks,

			 * first check whether link_mask of mach is subset of

			 * link_mask supported by hw and then go on searching

			 * link_adr

 No need to match adr if there is no links defined */

				/*

				 * Try next machine if any expected Slaves

				 * are not found on this link.

 Found if all Slaves are checked */

			/*

			 * DMICs use up to 4 pins and are typically pin-muxed with SoundWire

			 * link 2 and 3, thus we only try to enable dmics if all conditions

			 * are true:

			 * a) link 2 and 3 are not used by SoundWire

			 * b) the NHLT table reports the presence of microphones

		/*

		 * If tplg file name is overridden, use it instead of

		 * the one set in mach table

	/*

	 * If I2S fails, try SoundWire

	/*

	 * Choose HDA generic machine driver if mach is NULL.

	 * Otherwise, set certain mach params.

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 Copyright(c) 2020 Intel Corporation. All rights reserved.



 Author: Fred Oh <fred.oh@linux.intel.com>



/*

 * Hardware interface for audio DSP on IceLake.

 Icelake ops */

 probe/remove/shutdown */

 Register IO */

 Block IO */

 Mailbox IO */

 doorbell */

 ipc */

 machine driver */

 debug */

 stream callbacks */

 probe callbacks */

 firmware loading */

 pre/post fw run */

 parse platform specific extended manifest */

 dsp core power up/down */

 firmware run */

 trace callback */

 DAI drivers */

 PM */

 ALSA HW info flags */

 Icelake */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 Copyright 2019 NXP



 Author: Daniel Baluta <daniel.baluta@nxp.com>



 Hardware interface for audio DSP on i.MX8

 DSP memories */

 DSP IPC handler */

 System Controller IPC handler */

 Power domain handling */

 get reply */

 reply has correct size? */

 read the message */

 panic code */

 Read the message from the debug box. */

 Check to see if the message is a panic code (0x0dead***) */

/*

 * DSP control.

 power up device associated power domains */

 DSP IPC driver not probed yet, try later */

 DSP base */

 set default mailbox offset for FW ready message */

 on i.MX8 there is 1 to 1 match between type and BAR idx */

 Only IRAM and SRAM bars are valid */

 i.MX8 ops */

 probe and remove */

 DSP core boot */

 Block IO */

 Mailbox IO */

 ipc */

 module loading */

 firmware loading */

 Debug information */

 stream callbacks */

 Firmware ops */

 DAI drivers */

 ALSA HW info flags */

 i.MX8X ops */

 probe and remove */

 DSP core boot */

 Block IO */

 Mailbox IO */

 ipc */

 module loading */

 firmware loading */

 Debug information */

 stream callbacks */

 Firmware ops */

 DAI drivers */

 ALSA HW info flags */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 Copyright 2020 NXP



 Common helpers for the audio DSP on i.MX8

/**

 * imx8_get_registers() - This function is called in case of DSP oops

 * in order to gather information about the registers, filename and

 * linenumber and stack.

 * @sdev: SOF device

 * @xoops: Stores information about registers.

 * @panic_info: Stores information about filename and line number.

 * @stack: Stores the stack dump.

 * @stack_words: Size of the stack dump.

 first read registers */

 then get panic info */

 then get the stack */

/**

 * imx8_dump() - This function is called when a panic message is

 * received from the firmware.

 * @sdev: SOF device

 * @flags: parameter not used but required by ops prototype

	/* Get information about the panic status from the debug box area.

	 * Compute the trace point based on the status.

	/* Get information about the registers, the filename and line

	 * number and the stack.

 Print the information to the console */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 Copyright 2020 NXP



 Author: Daniel Baluta <daniel.baluta@nxp.com>



 Hardware interface for audio DSP on i.MX8M

 DSP IPC handler */

 get reply */

 reply has correct size? */

 read the message */

 Panic code */

 Read the message from the debug box. */

 Check to see if the message is a panic code (0x0dead***) */

/*

 * DSP control.

 TODO: start DSP using Audio MIX bits */

 DSP IPC driver not probed yet, try later */

 DSP base */

 set default mailbox offset for FW ready message */

 on i.MX8 there is 1 to 1 match between type and BAR idx */

 Only IRAM and SRAM bars are valid */

 i.MX8 ops */

 probe and remove */

 DSP core boot */

 Block IO */

 Mailbox IO */

 ipc */

 module loading */

 firmware loading */

 Debug information */

 stream callbacks */

 Firmware ops */

 DAI drivers */

 SPDX-License-Identifier: GPL-2.0



 Mediatek ALSA BT SCO CVSD/MSBC Driver



 Copyright (c) 2019 MediaTek Inc.

 Author: KaiChieh Chuang <kaichieh.chuang@mediatek.com>

 TX */

 18 = 6 * 180 / SCO_TX_ENCODE_SIZE */

 RX */

 spinlock for bt tx stream control */

 spinlock for bt rx stream control */

 write encoded mute data to bt sram */

 prepare encoded mute data */

 write mute data to bt tx sram buffer */

 bt return 0xdeadfeed if read register during bt sleep */

 bt return 0xdeadfeed if read register during bt sleep */

 store bt tx buffer sram info */

 bt return 0xdeadfeed if read reg during bt sleep */

				/*

				 * free space is larger then

				 * twice interrupt rx data size

 tx */

			/* prepared data is larger then twice

			 * interrupt tx data size

 one interrupt period = 22.5ms */

 in ns (10^9) */

			/*

			 * error, -ERESTARTSYS if it was interrupted by

			 * a signal

 conidtion is false after timeout */

 available data in RX packet buffer */

 count must be multiple of packet_size */

 calculate continue space */

	/*

	 * save current timestamp & buffer time in times_tamp and

	 * buf_data_equivalent_time

 return equivalent time(us) to data count */

	/*

	 * save current timestamp & buffer time in time_stamp and

	 * buf_data_equivalent_time

 return equivalent time(us) to data count */

 free space of TX packet buffer */

 count must be multiple of bt->tx->packet_size */

 calculate continue space */

 pcm ops */

 spinlock for bt stream control */

 get packet diff from last time */

 integer overflow */

 increased bytes */

 kcontrol */

 init btcvsd private data */

 init tx/rx */

 irq */

 iomap */

 get offset */

 init state */

 SPDX-License-Identifier: GPL-2.0

/*

 * mtk-afe-platform-driver.c  --  Mediatek afe platform driver

 *

 * Copyright (c) 2016 MediaTek Inc.

 * Author: Garlic Tseng <garlic.tseng@mediatek.com>

 calcualte total dai driver size */

 combine sub_dais */

 dai driver */

 add routes after all widgets are added */

 SPDX-License-Identifier: GPL-2.0

/*

 * mtk-afe-fe-dais.c  --  Mediatek afe fe dai operator

 *

 * Copyright (c) 2016 MediaTek Inc.

 * Author: Garlic Tseng <garlic.tseng@mediatek.com>

 enable agent */

	/*

	 * Capture cannot use ping-pong buffer since hw_ptr at IRQ may be

	 * smaller than period_size due to AFE's internal buffer.

	 * This easily leads to overrun when avail_min is period_size.

	 * One more period can hold the possible unread buffer.

 dynamic allocate irq to memif */

 link */

 set addr */

 set channel */

 set rate */

 set format */

 set irq counter */

 set irq fs */

 enable interrupt */

 disable interrupt */

 and clear pending IRQ */

 start */

 end */

 set start, end, upper 32 bits */

	/*

	 * set MSB to 33-bit, for memif address

	 * only for memif base address, if msb_end_reg exists

 set MSB to 33-bit, for memif end address */

 for specific configuration of memif mono mode */

 set hd mode */

 SPDX-License-Identifier: GPL-2.0

/*

 * mt2701-afe-clock-ctrl.c  --  Mediatek 2701 afe clock ctrl

 *

 * Copyright (c) 2016 MediaTek Inc.

 * Author: Garlic Tseng <garlic.tseng@mediatek.com>

 *	   Ryder Lee <ryder.lee@mediatek.com>

 Get I2S related clocks */

 Some platforms may support BT path */

 Enable infra clock gate */

 Enable top a1sys clock gate */

 Enable top a2sys clock gate */

 Internal clock gates */

 Enable audio system */

 Configure ASRC */

 Set mclk source */

 Set mclk divider */

 SPDX-License-Identifier: GPL-2.0

/*

 * mt2701-cs42448.c  --  MT2701 CS42448 ALSA SoC machine driver

 *

 * Copyright (c) 2016 MediaTek Inc.

 * Author: Ir Lian <ir.lian@mediatek.com>

 *	   Garlic Tseng <garlic.tseng@mediatek.com>

 mt2701 mclk */

 codec mclk */

 FE */

 BE */

 Module information */

 SPDX-License-Identifier: GPL-2.0

/*

 * mt2701-wm8960.c  --  MT2701 WM8960 ALSA SoC machine driver

 *

 * Copyright (c) 2017 MediaTek Inc.

 * Author: Ryder Lee <ryder.lee@mediatek.com>

 FE */

 BE */

 Module information */

 SPDX-License-Identifier: GPL-2.0

/*

 * Mediatek ALSA SoC AFE platform driver for 2701

 *

 * Copyright (c) 2016 MediaTek Inc.

 * Author: Garlic Tseng <garlic.tseng@mediatek.com>

 *	   Ir Lian <ir.lian@mediatek.com>

 *	   Ryder Lee <ryder.lee@mediatek.com>

 disable i2s */

 need to disable i2s-out path when disable i2s-in */

 disable mclk */

 now we support bck 64bits only */

 no need to enable if already done */

 0 */

 enable i2s */

 reset i2s hw status before enable */

 need to enable i2s-out path when enable i2s-in */

 mclk */

 if the other direction stream is not occupied */

 can't run single DL & DLM at the same time */

 single DL use PAIR_INTERLEAVE */

 enable agent for all signal DL (due to hw design) */

 FE DAIs */

 I2S BE DAIs */

 MRG BE DAIs */

 FE DAIs: memory intefaces to CPU */

 BE DAIs */

 inter-connections */

 I02,03 link to UL2, also need to open I2S0 */

 TODO - extend control registers supported by newer SoCs */

 memif initialize */

 irq initialize */

 I2S initialize */

 initial audio related clock */

 SPDX-License-Identifier: GPL-2.0



 MediaTek ALSA SoC Audio DAI I2S Control



 Copyright (c) 2020 MediaTek Inc.

 Author: Shane Chien <shane.chien@mediatek.com>



 bck sync length = 1 */

 bck sync length = PCM_INTF_CON1[9:13] */

 slave mode & external modem uses different crystal */

 slave mode & external modem uses the same crystal */

 dai component */

 inter-connections */

 dai ops */

 dai driver */

 SPDX-License-Identifier: GPL-2.0



 Mediatek ALSA SoC AFE platform driver for 8192



 Copyright (c) 2020 MediaTek Inc.

 Author: Shane Chien <shane.chien@mediatek.com>



 FE DAIs: memory intefaces to CPU */

 dma widget & routes*/

 TINYCONN MUX */

 inter-connections */

 these auto-gen reg has read-only bit, so put it as volatile */

 volatile reg cannot be cached, so cannot be set when power off */

 reg bit controlled by CCF */

 reg bit controlled by CCF */

 [20:31] is monitor */

 [20:31] is monitor */

 get irq that is sent to MCU */

 only care IRQ which is sent to MCU */

 clear irq */

 disable AFE */

 make sure all irq status are cleared */

 reset sgen */

 cache only */

 enable audio sys DCM for power saving */

 force cpu use 8_24 format when writing 32bit data */

 set all output port to 24bit */

 enable AFE */

 init audio related clock */

 reset controller to reset audio regs before regmap cache */

 regmap init */

 enable clock for regcache get default value from hw */

 init memif */

 needed when dynamic irq */

 init irq */

 request irq */

 init sub_dais */

 init dai_driver and component_driver */

 others */

 register platform */

 disable afe clock */

 SPDX-License-Identifier: GPL-2.0



 MediaTek ALSA SoC Audio Control



 Copyright (c) 2020 MediaTek Inc.

 Author: Shane Chien <shane.chien@mediatek.com>



 SPDX-License-Identifier: GPL-2.0



 MediaTek ALSA SoC Audio DAI TDM Control



 Copyright (c) 2020 MediaTek Inc.

 Author: Shane Chien <shane.chien@mediatek.com>

 according to sample rate */

 interconnection */

 which apll */

 dai ops */

 calculate mclk_rate, if not set explicitly */

 calculate bck */

 set tdm */

 DAI mode*/

 DAI clock inversion*/

 dai driver */

 SPDX-License-Identifier: GPL-2.0



 MediaTek ALSA SoC Audio DAI I2S Control



 Copyright (c) 2020 MediaTek Inc.

 Author: Shane Chien <shane.chien@mediatek.com>



 for determine which apll to use */

 low jitter control */

 dai component */

 i2s virtual mux to output widget */

 Tinyconn Mux */

 i2s in lpbk */

 interconnection */

 i2s en*/

 i2s hd en */

 i2s mclk en */

 apll */

 allow i2s on without codec on */

 i2s in lpbk */

 check if share i2s need hd en */

 which apll */

 choose APLL from i2s rate */

 check if share i2s need mclk */

 which apll */

 i2s0 */

 i2s1 */

 i2s2 */

 i2s3 */

 i2s5 */

 i2s6 */

 i2s7 */

 i2s8 */

 i2s9 */

 allow i2s on without codec on */

 i2s in lpbk */

 dai ops */

 non-inverse, i2s mode, proxy mode, 16bits, from connsys */

 use asrc */

 proxy mode, set i2s for asrc */

 Calibration setting */

 0:Stereo 1:Mono */

 i2s enable */

 calibrator enable */

 asrc enable */

 i2s disable */

 bypass asrc */

 i2s */

 set share i2s */

 dai driver */

 this enum is merely for mtk_afe_i2s_priv declare */

 set all dai i2s private data */

 parse share i2s */

 SPDX-License-Identifier: GPL-2.0



 mt8192-mt6359-rt1015-rt5682.c  --

	MT8192-MT6359-RT1015-RT6358 ALSA SoC machine driver



 Copyright (c) 2020 MediaTek Inc.

 Author: Jiaxin Yu <jiaxin.yu@mediatek.com>



 set clock protocol 2 */

 set test type to synchronizer pulse */

 mt6359: 0 ~ 42 */

 handle if never test done */

 disable rx fifo */

 set mtkaif protocol */

 mtkaif calibration */

 fix BE i2s format to 32bit, clean param mask first */

 FE */

 BE */

 Front End DAI links */

 Back End DAI links */

 speaker */

 headset */

 TDM */

 speaker */

 headset */

 Module information */

 SPDX-License-Identifier: GPL-2.0



 mt8192-afe-clk.c  --  Mediatek 8192 afe clock ctrl



 Copyright (c) 2020 MediaTek Inc.

 Author: Shane Chien <shane.chien@mediatek.com>



 180.6336 / 4 = 45.1584MHz */

 196.608 / 4 = 49.152MHz */

 setting for APLL */

 setting for APLL */

 mck */

 below will be deprecated */

 select apll */

 enable div, set rate */

 SPDX-License-Identifier: GPL-2.0



 MediaTek ALSA SoC Audio DAI ADDA Control



 Copyright (c) 2020 MediaTek Inc.

 Author: Shane Chien <shane.chien@mediatek.com>



 if you change level normal */

 you need to change formula of hp impedance and dc trim too */

 dai component */

 dmic mode, 3.25M*/

 turn on dmic, ch1, ch2 */

 update setting to dmic */

 mtkaif_rxif_data_mode = 1, dmic */

 dmic mode, 3.25M*/

 should delayed 1/fs(smallest is 8k) = 125us before afe off */

 update setting to dmic */

 mtkaif_rxif_data_mode = 1, dmic */

 dmic mode, 3.25M*/

		/* when using adda6 without adda enabled,

		 * RG_ADDA6_MTKAIF_RX_SYNC_WORD2_DISABLE_SFT need to be set or

		 * data cannot be received.

 should delayed 1/fs(smallest is 8k) = 125us before afe off */

 reset dmic */

 set protocol 2 */

 mtkaif_rxif_clkinv_adc inverse for calibration */

 set delay for ch12 */

 set delay between ch3 and ch2 */

 ch3 */

 ch2 */

 should delayed 1/fs(smallest is 8k) = 125us before afe off */

 should delayed 1/fs(smallest is 8k) = 125us before afe off */

 stf */

 set side tone gain = 0 */

 don't bypass stf */

 set stf half tap num */

 set side tone coefficient */

 wait until flag write_ready changed */

 flip => ok */

 need write -> read -> write to write next coeff */

 bypass stf */

 set side tone gain = 0 */

 stf mux */

 ADDA UL MUX */

 inter-connections */

 stf */

 clock */

 playback */

 capture */

 sidetone filter */

 clk */

 dai ops */

 set sampling rate */

 set output mode, UP_SAMPLING_RATE_X8 */

 turn off mute function */

 set voice input data if input sample rate is 8k or 16k */

 SA suggest apply -0.3db to audio/speech path */

 turn on down-link gain */

 clean predistortion */

 set sdm gain */

 2nd sdm */

 sdm auto reset */

 clean predistortion */

 set sdm gain */

 2nd sdm */

 sdm auto reset */

 default value */

 enable iir */

 35Hz @ 48k */

 Using Internal ADC */

 mtkaif_rxif_data_mode = 0, amic */

 35Hz @ 48k */

 Using Internal ADC */

 mtkaif_rxif_data_mode = 0, amic */

 ap dmic */

 dai driver */

 ap dmic priv share with adda */

 SPDX-License-Identifier: GPL-2.0



 mt8192-afe-gpio.c  --  Mediatek 8192 afe gpio ctrl



 Copyright (c) 2020 MediaTek Inc.

 Author: Shane Chien <shane.chien@mediatek.com>



 gpio status init */

 SPDX-License-Identifier: GPL-2.0



 MediaTek ALSA SoC Audio DAI TDM Control



 Copyright (c) 2018 MediaTek Inc.

 Author: KaiChieh Chuang <kaichieh.chuang@mediatek.com>

 according to sample rate */

 interconnection */

 which apll */

 dai ops */

 calculate mclk_rate, if not set explicitly */

 calculate bck */

 set tdm */

 enable Out control */

 enable tdm */

 disable tdm */

 disable Out control */

 DAI mode*/

 DAI clock inversion*/

 dai driver */

 SPDX-License-Identifier: GPL-2.0



 MediaTek ALSA SoC Audio DAI ADDA Control



 Copyright (c) 2018 MediaTek Inc.

 Author: KaiChieh Chuang <kaichieh.chuang@mediatek.com>

 if you change level normal */

 you need to change formula of hp impedance and dc trim too */

 dai component */

 update setting to dmic */

 mtkaif_rxif_data_mode = 1, dmic */

 dmic mode, 3.25M*/

 turn on dmic, ch1, ch2 */

 should delayed 1/fs(smallest is 8k) = 125us before afe off */

 mtkaif dmic */

 adda */

 playback */

 adda enable */

 clk */

 mtkaif_rxif_clkinv_adc inverse for calibration */

 dai ops */

 clean predistortion */

 set sampling rate */

 set output mode */

 UP_SAMPLING_RATE_X2 */

 UP_SAMPLING_RATE_X4 */

 UP_SAMPLING_RATE_X8 */

 turn off mute function */

 set voice input data if input sample rate is 8k or 16k */

 SA suggest apply -0.3db to audio/speech path */

 turn on down-link gain */

 set sdm gain */

 default value */

 set mtkaif protocol */

 Using Internal ADC */

 enable iir */

 35Hz @ 48k */

 mtkaif_rxif_data_mode = 0, amic */

 dai driver */

 SPDX-License-Identifier: GPL-2.0



 MediaTek ALSA SoC Audio DAI Hostless Control



 Copyright (c) 2018 MediaTek Inc.

 Author: KaiChieh Chuang <kaichieh.chuang@mediatek.com>

 dai component */

 Hostless ADDA Loopback */

 Hostless Speech */

 dai ops */

 dai driver */

 SPDX-License-Identifier: GPL-2.0



 MediaTek ALSA SoC Audio DAI I2S Control



 Copyright (c) 2018 MediaTek Inc.

 Author: KaiChieh Chuang <kaichieh.chuang@mediatek.com>

 for determine which apll to use */

 low jitter control */

 dai component */

 interconnection */

 i2s en*/

 i2s hd en */

 i2s mclk en */

 apll */

 check if share i2s need hd en */

 which apll */

 choose APLL from i2s rate */

 check if share i2s need mclk */

 which apll */

 i2s0 */

 i2s1 */

 i2s2 */

 i2s3 */

 i2s5 */

 dai ops */

 set share i2s */

 dai driver */

 this enum is merely for mtk_afe_i2s_priv declare */

 set all dai i2s private data */

 parse share i2s */

 SPDX-License-Identifier: GPL-2.0



 Mediatek ALSA SoC AFE platform driver for 8183



 Copyright (c) 2018 MediaTek Inc.

 Author: KaiChieh Chuang <kaichieh.chuang@mediatek.com>

 FE DAIs: memory intefaces to CPU */

 dma widget & routes*/

 memif */

 capture */

 control in tdm for sync start */

 these auto-gen reg has read-only bit, so put it as volatile */

 volatile reg cannot be cached, so cannot be set when power off */

 reg bit controlled by CCF */

 reg bit controlled by CCF */

 get irq that is sent to MCU */

 only care IRQ which is sent to MCU */

 clear irq */

 disable AFE */

 make sure all irq status are cleared, twice intended */

 cache only */

 enable audio sys DCM for power saving */

 force cpu use 8_24 format when writing 32bit data */

 set all output port to 24bit */

 enable AFE */

 initial audio related clock */

 regmap init */

 enable clock for regcache get default value from hw */

 init memif */

 init memif */

 irq initialize */

 request irq */

 init sub_dais */

 init dai_driver and component_driver */

 register component */

 SPDX-License-Identifier: GPL-2.0



 mt8183-afe-clk.c  --  Mediatek 8183 afe clock ctrl



 Copyright (c) 2018 MediaTek Inc.

 Author: KaiChieh Chuang <kaichieh.chuang@mediatek.com>

 apll related mux */

 apll */

 180.6336 / 8 = 22.5792MHz */

 196.608 / 8 = 24.576MHz */

 setting for APLL */

 setting for APLL */

 mck */

 i2s5 mck not support */

 select apll */

 enable div, set rate */

 i2s5 mck not support */

 SPDX-License-Identifier: GPL-2.0



 mt8183-da7219-max98357.c

	--  MT8183-DA7219-MAX98357 ALSA SoC machine driver



 Copyright (c) 2018 MediaTek Inc.

 Author: Shunli Wang <shunli.wang@mediatek.com>

 fix BE i2s format to 32bit, clean param mask first */

 fix BE i2s format to 32bit, clean param mask first */

 FE */

 BE */

 FE */

 BE */

 Enable Headset and 4 Buttons Jack detection */

 Module information */

 SPDX-License-Identifier: GPL-2.0



 mt8183-mt6358.c  --

	MT8183-MT6358-TS3A227-MAX98357 ALSA SoC machine driver



 Copyright (c) 2018 MediaTek Inc.

 Author: Shunli Wang <shunli.wang@mediatek.com>

 fix BE i2s format to 32bit, clean param mask first */

 fix BE i2s format to 32bit, clean param mask first */

 FE */

 BE */

 FE */

 BE */

 Enable Headset and 4 Buttons Jack detection */

 Module information */

 SPDX-License-Identifier: GPL-2.0



 MediaTek ALSA SoC Audio DAI I2S Control



 Copyright (c) 2018 MediaTek Inc.

 Author: KaiChieh Chuang <kaichieh.chuang@mediatek.com>

 bck sync length = 1 */

 bck sync length = PCM_INTF_CON1[9:13] */

 slave mode & external modem uses different crystal */

 slave mode & external modem uses the same crystal */

 dai component */

 inter-connections */

 dai ops */

 dai driver */

 SPDX-License-Identifier: GPL-2.0

/*

 * mt8195-afe-clk.c  --  Mediatek 8195 afe clock ctrl

 *

 * Copyright (c) 2021 MediaTek Inc.

 * Author: Bicycle Tsai <bicycle.tsai@mediatek.com>

 *         Trevor Wu <trevor.wu@mediatek.com>

 xtal */

 divider */

 mux */

 clock gate */

 afe clock gate */

 bus clock for infra */

 clock for ADSP bus */

 bus clock for DRAM access */

 bus clock for AFE SRAM access */

 audio 26M clock */

 AFE HW master switch */

 AFE HW clock*/

 AFE HW clock */

 SPDX-License-Identifier: GPL-2.0

/*

 * mt8195-audsys-clk.h  --  Mediatek 8195 audsys clock control

 *

 * Copyright (c) 2021 MediaTek Inc.

 * Author: Trevor Wu <trevor.wu@mediatek.com>

 AUD0 */

 AUD1 */

 AUD3 */

 AUD4 */

 AUD5 */

 AUD6 */

 add clk_lookup for devm_clk_get(SND_SOC_DAPM_CLOCK_SUPPLY) */

 SPDX-License-Identifier: GPL-2.0

/*

 * MediaTek ALSA SoC Audio DAI ADDA Control

 *

 * Copyright (c) 2021 MediaTek Inc.

 * Author: Bicycle Tsai <bicycle.tsai@mediatek.com>

 *         Trevor Wu <trevor.wu@mediatek.com>

 set rx protocol 2 & mtkaif_rxif_clkinv_adc inverse */

 set delay for ch1, ch2 */

 set delay between ch3 and ch2 */

 should delayed 1/fs(smallest is 8k) = 125us before afe off */

 turn on dmic, ch1, ch2 */

 should delayed 1/fs(smallest is 8k) = 125us before afe off */

 should delayed 1/fs(smallest is 8k) = 125us before afe off */

 set sampling rate */

 turn off saturation */

 turn off mute function */

 set voice input data if input sample rate is 8k or 16k */

 new 2nd sdm */

 dai driver */

 SPDX-License-Identifier: GPL-2.0

/*

 * Mediatek ALSA SoC AFE platform driver for 8195

 *

 * Copyright (c) 2021 MediaTek Inc.

 * Author: Bicycle Tsai <bicycle.tsai@mediatek.com>

 *         Trevor Wu <trevor.wu@mediatek.com>

 DL8_DL10_MEM */

 DL8_DL10_AGENT */

 DL8_DL10_AGENT */

 DL8_DL10_MEM */

 FE DAIs: memory intefaces to CPU */

 DL6 */

 DL3 */

 DL11 */

 DL11/DL8 */

 DL2 */

 UL9 */

 UL4 */

 UL5 */

 UL10 */

 UL2 */

 these auto-gen reg has read-only bit, so put it as volatile */

 volatile reg cannot be cached, so cannot be set when power off */

 only clr cpu irq */

 clear irq */

 initial audio related clock */

 irq initialize */

 init memif */

 request irq */

 init sub_dais */

 init dai_driver and component_driver */

 enable clock for regcache get default value from hw */

 register component */

 SPDX-License-Identifier: GPL-2.0



 mt8195-mt6359-rt1011-rt5682.c  --

	MT8195-MT6359-RT1011-RT5682 ALSA SoC machine driver



 Copyright (c) 2021 MediaTek Inc.

 Author: Trevor Wu <trevor.wu@mediatek.com>



 speaker */

 headset */

 set test type to synchronizer pulse */

 mt6359: 0 ~ 42 */

 handle if never test done */

 set mtkaif protocol */

 mtkaif calibration */

 fix BE i2s format to 32bit, clean param mask first */

 fix BE i2s format to 32bit, clean param mask first */

 FE */

 BE */

 FE */

 BE */

 Module information */

 SPDX-License-Identifier: GPL-2.0

/*

 * MediaTek ALSA SoC Audio DAI eTDM Control

 *

 * Copyright (c) 2021 MediaTek Inc.

 * Author: Bicycle Tsai <bicycle.tsai@mediatek.com>

 *         Trevor Wu <trevor.wu@mediatek.com>

dai id

dai_id

 HDMI_OUT_MUX */

 DPTX_OUT_MUX */

 HDMI_CH0_MUX ~ HDMI_CH7_MUX */

 eTDM_IN2 */

 eTDM_IN1 */

 eTDM_OUT2 */

 eTDM_OUT1 */

 eTDM_OUT3 */

 dai ops */

 afifo */

 con1 */

 con2 */

 con3 */

 con4 */

 con5 */

 con0 */

 con1 */

 con2 */

 con4 */

 con5 */

 select apll */

 set rate */

 con0 */

open master first

 close master at last

 dptx configure */

 enable dptx interface */

 enable etdm_out3 */

 disable etdm_out3 */

 disable dptx interface */

 dai driver */

 etdm in only */

 SPDX-License-Identifier: GPL-2.0



 mt8195-mt6359-rt1019-rt5682.c  --

	MT8195-MT6359-RT1019-RT6358 ALSA SoC machine driver



 Copyright (c) 2021 MediaTek Inc.

 Author: Trevor Wu <trevor.wu@mediatek.com>



 speaker */

 headset */

 set test type to synchronizer pulse */

 mt6359: 0 ~ 42 */

 handle if never test done */

 set mtkaif protocol */

 mtkaif calibration */

 fix BE i2s format to 32bit, clean param mask first */

 fix BE i2s format to 32bit, clean param mask first */

 FE */

 BE */

 FE */

 BE */

 Module information */

 SPDX-License-Identifier: GPL-2.0

/*

 * MediaTek ALSA SoC Audio DAI PCM I/F Control

 *

 * Copyright (c) 2020 MediaTek Inc.

 * Author: Bicycle Tsai <bicycle.tsai@mediatek.com>

 *         Trevor Wu <trevor.wu@mediatek.com>

 sync freq mode */

 clk domain sel */

 pcm mode */

 pcm format */

 pcm sync length */

 pcm bits, word length */

 master/slave */

 TODO: add asrc setting for slave mode */

 dai ops */

 dai driver */

 SPDX-License-Identifier: GPL-2.0



 MediaTek ALSA SoC Audio DAI ADDA Control



 Copyright (c) 2018 MediaTek Inc.

 Author: KaiChieh Chuang <kaichieh.chuang@mediatek.com>

 dai component */

 should delayed 1/fs(smallest is 8k) = 125us before afe off */

 adda */

 playback */

 adda enable */

 clk */

 dai ops */

 clean predistortion */

 set input sampling rate */

 set output mode */

 UP_SAMPLING_RATE_X2 */

 UP_SAMPLING_RATE_X4 */

 UP_SAMPLING_RATE_X8 */

 turn off mute function */

 set voice input data if input sample rate is 8k or 16k */

 SA suggest apply -0.3db to audio/speech path */

			/* SA suggest apply -0.3db to audio/speech path

			 * with DL gain set to half,

			 * 0xFFFF = 0dB -> 0x8000 = 0dB when 96k, 192k

 turn on down-link gain */

 default value */

 Using Internal ADC */

 up8x txif sat on */

 hires */

 use hires format [1 0 23] */

 normal 8~48k */

 use fixed 260k anc path */

 ul_use_cic_out */

 dai driver */

 SPDX-License-Identifier: GPL-2.0



 MediaTek ALSA SoC Audio DAI Hostless Control



 Copyright (c) 2018 MediaTek Inc.

 Author: KaiChieh Chuang <kaichieh.chuang@mediatek.com>

 dai component */

 Hostless ADDA Loopback */

 Hostless Speech */

 dai ops */

 dai driver */

 SPDX-License-Identifier: GPL-2.0



 mt6797-mt6351.c  --  MT6797 MT6351 ALSA SoC machine driver



 Copyright (c) 2018 MediaTek Inc.

 Author: KaiChieh Chuang <kaichieh.chuang@mediatek.com>

 FE */

 BE */

 Module information */

 SPDX-License-Identifier: GPL-2.0



 mt6797-afe-clk.c  --  Mediatek 6797 afe clock ctrl



 Copyright (c) 2018 MediaTek Inc.

 Author: KaiChieh Chuang <kaichieh.chuang@mediatek.com>

 SPDX-License-Identifier: GPL-2.0



 MediaTek ALSA SoC Audio DAI I2S Control



 Copyright (c) 2018 MediaTek Inc.

 Author: KaiChieh Chuang <kaichieh.chuang@mediatek.com>

 bck sync length = 1 */

 bck sync length = PCM_INTF_CON1[9:13] */

 slave mode & external modem uses different crystal */

 slave mode & external modem uses the same crystal */

 dai component */

 inter-connections */

 dai ops */

 dai driver */

 SPDX-License-Identifier: GPL-2.0



 Mediatek ALSA SoC AFE platform driver for 6797



 Copyright (c) 2018 MediaTek Inc.

 Author: KaiChieh Chuang <kaichieh.chuang@mediatek.com>

 FE DAIs: memory intefaces to CPU */

 dma widget & routes*/

 memif */

 capture */

 get irq that is sent to MCU */

 only clear IRQ which is sent to MCU */

 clear irq */

 disable AFE */

 make sure all irq status are cleared */

 irq signal to mcu only */

 force all memif use normal mode */

 force cpu use normal mode when access sram data */

 force cpu use 8_24 format when writing 32bit data */

 set all output port to 24bit */

 enable AFE */

 initial audio related clock */

 regmap init */

 init memif */

 irq initialize */

 request irq */

 init sub_dais */

 init dai_driver and component_driver */

 register component */

 SPDX-License-Identifier: GPL-2.0

/*

 * mt8173-rt5650-rt5514.c  --  MT8173 machine driver with RT5650/5514 codecs

 *

 * Copyright (c) 2016 MediaTek Inc.

 * Author: Koro Chen <koro.chen@mediatek.com>

 pll from mclk 12.288M */

 sysclk from pll */

 enable jack detection */

 Digital audio interface glue - connects codec <---> CPU */

 Front End DAI links */

 Back End DAI links */

 Module information */

 SPDX-License-Identifier: GPL-2.0

/*

 * mt8173-rt5650.c  --  MT8173 machine driver with RT5650 codecs

 *

 * Copyright (c) 2016 MediaTek Inc.

 * Author: Koro Chen <koro.chen@mediatek.com>

 0 = external oscillator; 1 = internal source from mt8173 */

 mclk = 12.288M */

 mclk = sampling rate*256 */

 mclk = 12.288M */

 pll from mclk */

 sysclk from pll */

 enable jack detection */

 Playback */

 Capture */

 Digital audio interface glue - connects codec <---> CPU */

 Front End DAI links */

 Back End DAI links */

 Module information */

 SPDX-License-Identifier: GPL-2.0

/*

 * Mediatek 8173 ALSA SoC AFE platform driver

 *

 * Copyright (c) 2015 MediaTek Inc.

 * Author: Koro Chen <koro.chen@mediatek.com>

 *             Sascha Hauer <s.hauer@pengutronix.de>

 *             Hidalgo Huang <hidalgo.huang@mediatek.com>

 *             Ir Lian <ir.lian@mediatek.com>

/*****************************************************************************

 *                  R E G I S T E R       D E F I N I T I O N

 Memory interface */

 AUDIO_TOP_CON0 (0x0000) */

 AFE_I2S_CON1 (0x0034) */

 AFE_I2S_CON2 (0x0038) */

 AFE_CONN_24BIT (0x006c) */

 AFE_HDMI_CONN0 (0x0390) */

 AFE_TDM_CON1 (0x0548) */

 from external ADC */

 set input */

 set output */

 input */

 output */

 config I2S */

 I2S mode */

 set tdm2 config */

 set connections:  O30~O37: L/R/LS/RS/C/LFE/CH7/CH8 */

 enable Out control */

 enable tdm */

 disable tdm */

 disable Out control */

 BE DAIs */

 FE DAIs: memory intefaces to CPU */

 downlink 1 */

 voice uplink */

 BE DAIs */

 FE DAIs */

 BE DAIs */

 inter-connections */

 clear irq */

 disable AFE */

 disable AFE clk */

 enable AFE clk */

 set O3/O4 16bits */

 unmask all IRQs */

 enable AFE */

 22M */

 24M */

 initial audio related clock */

 memif % irq initialize*/

 SPDX-License-Identifier: GPL-2.0

/*

 * mt8173-rt5650-rt5676.c  --  MT8173 machine driver with RT5650/5676 codecs

 *

 * Copyright (c) 2015 MediaTek Inc.

 * Author: Koro Chen <koro.chen@mediatek.com>

 IF2 ADC to 5650  */

 DMIC from 5676 */

 IF2 ADC to 5650  */

 IF2 DAC from 5650  */

 pll from mclk 12.288M */

 sysclk from pll */

 enable jack detection */

 Digital audio interface glue - connects codec <---> CPU */

 Front End DAI links */

 Back End DAI links */

 rt5676 <-> rt5650 intercodec link: Sets rt5676 I2S2 as master */

 Module information */

 SPDX-License-Identifier: GPL-2.0

/*

 * mt8173-max98090.c  --  MT8173 MAX98090 ALSA SoC machine driver

 *

 * Copyright (c) 2015 MediaTek Inc.

 * Author: Koro Chen <koro.chen@mediatek.com>

 enable jack detection */

 Digital audio interface glue - connects codec <---> CPU */

 Front End DAI links */

 Back End DAI links */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) STMicroelectronics SA 2015

 * Authors: Arnaud Pouliquen <arnaud.pouliquen@st.com>

 *          for STMicroelectronics.

/*

 * User frame size shall be 2, 4, 6 or 8 32-bits words length

 * (i.e. 8, 16, 24 or 32 bytes)

 * This constraint comes from allowed values for

 * UNIPERIF_I2S_FMT_NUM_CH register

 Nb available player instances */

 player IP version */

 Reset uniperipheral uni */

 store info in unip context */

 unip is unidirectionnal */

 number of available timeslots */

 frame size in bytes */

 check frame size is allowed */

 clear remaining indexes */

	/* word16_pos:

	 * word16_pos[0] = WORDX_LSB

	 * word16_pos[1] = WORDX_MSB,

	 * word16_pos[2] = WORDX+1_LSB

	 * word16_pos[3] = WORDX+1_MSB

 set unip word position */

/*

 * sti_uniperiph_dai_create_ctrl

 * This function is used to create Ctrl associated to DAI but also pcm device.

 * Request is done by front end to associate ctrl with pcm device id

		/*

		 * Several Control can have same name. Controls are indexed on

		 * Uniperipheral instance ID

/*

 * DAI

 transfer size = user frame size (in 32-bits FIFO cell) */

 The uniperipheral should be in stopped state */

 Pinctrl: switch pinstate to sleep */

 pinctrl: switch pinstate to default */

 DMA settings*/

 Populate data structure depending on compatibility */

 Get resources and base address */

 check if player should be configured for tdm */

 Allocate the private data and the CPU_DAI array */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) STMicroelectronics SA 2015

 * Authors: Arnaud Pouliquen <arnaud.pouliquen@st.com>

 *          for STMicroelectronics.

/*

 * Some hardware-related definitions

 sys config registers definitions */

/*

 * Driver specific types.

 player id connected to I2S/TDM TX bus */

/*

 * Note: snd_pcm_hardware is linked to DMA controller but is declared here to

 * integrate  DAI_CPU capability in term of rate and supported channels

/*

 * uni_player_irq_handler

 * In case of error audio stream is stopped; stop action is protected via PCM

 * stream lock to avoid race condition with trigger callback.

 Get interrupt status & clear them immediately */

 Check for fifo error (underrun) */

 Interrupt is just for information when underflow recovery */

 Update state to underflow */

 Disable interrupt so doesn't continually fire */

 Stop the player */

 Check for dma error (overrun) */

 Disable interrupt so doesn't continually fire */

 Stop the player */

 Check for underflow recovery done */

 Read the underflow recovery duration */

 Clear the underflow recovery duration */

 Update state to started */

 Check if underflow recovery failed */

 Stop the player */

	/*

	 *             a

	 * F = f + --------- * f = f + d

	 *          1000000

	 *

	 *         a

	 * d = --------- * f

	 *      1000000

	 *

	 * where:

	 *   f - nominal rate

	 *   a - adjustment in ppm (parts per milion)

	 *   F - rate to be set in synthesizer

	 *   d - delta (difference) between f and F

 div64_64 operates on unsigned values... */

 500000 ppm is 0.5, which is used to round up values */

 Adjusted rate should never be == 0 */

 If value is 0 means that clock or parent not valid */

	/*

	 * Using ALSA's adjustment control, we can modify the rate to be up

	 * to twice as much as requested, but no more

 div64_64 operates on unsigned values... */

 Frequency/2 is added to round up result */

	/*

	 * Some AVRs and TVs require the channel status to contain a correct

	 * sampling frequency. If no sample rate is already specified, then

	 * set one.

 Mark as sampling frequency not indicated */

	/* Audio mode:

	 * Use audio mode status to select PCM or encoded mode

 Clear user validity bits */

 Set user validity bits */

 Program the new channel status */

 Update the channel status */

 Oversampling must be multiple of 128 as iec958 frame is 32-bits */

 16/16 memory format */

 16-bits per sub-frame */

 Set 16-bit sample precision */

 16/0 memory format */

 32-bits per sub-frame */

 Set 24-bit sample precision */

 Set parity to be calculated by the hardware */

 Set channel status bits to be inserted by the hardware */

 Set user data bits to be inserted by the hardware */

 Set validity bits to be inserted by the hardware */

 Set full software control to disabled */

 Update the channel status */

 Clear the user validity user bits */

 Disable one-bit audio mode */

 Enable consecutive frames repetition of Z preamble (not for HBRA) */

 Change to SUF0_SUBF1 and left/right channels swap! */

 Set data output as MSB first */

 Set rounding to off */

 Set clock divisor */

 Set the spdif latency to not wait before starting player */

	/*

	 * Ensure iec958 formatting is off. It will be enabled in function

	 * uni_player_start() at the same time as the operation

	 * mode is set to work around a silicon issue.

 Force slot width to 32 in I2S mode (HW constraint) */

	/*

	 * For 32 bits subframe clk_div must be a multiple of 128,

	 * for 16 bits must be a multiple of 64

	/*

	 * Number of bits per subframe (which is one channel sample)

	 * on output - Transfer 16 or 32 bits from FIFO

 Configure data memory format */

 One data word contains two samples */

		/*

		 * Actually "16 bits/0 bits" means "32/28/24/20/18/16 bits

		 * on the left than zeros (if less than 32 bytes)"... ;-)

 Set rounding to off */

 Set clock divisor */

 Number of channelsmust be even*/

 Set 1-bit audio format to disabled */

 No iec958 formatting as outputting to DAC  */

 unip tdm frame size in bytes */

 user tdm frame size in bytes */

 default unip TDM_WORD_POS_X_Y */

 fix 16/0 format */

 number of words inserted on the TDM line */

 Enable the tdm functionality */

 number of 8 bits timeslots avail in unip tdm frame */

 set the timeslot allocation for words in FIFO */

 set unip clk rate (not done vai set_sysclk ops) */

/*

 * ALSA uniperipheral iec958 controls

/*

 * uniperif rate adjustement control

 refine hw constraint in tdm mode */

 The player should be stopped */

 Calculate transfer size (in fifo cells and bytes) for frame count */

 transfer size = user frame size (in 32 bits FIFO cell) */

 Calculate number of empty cells available before asserting DREQ */

		/*

		 * Since SND_ST_UNIPERIF_VERSION_UNI_PLR_TOP_1_0

		 * FDMA_TRIGGER_LIMIT also controls when the state switches

		 * from OFF or STANDBY to AUDIO DATA.

 Trigger limit must be an even number */

 Uniperipheral setup depends on player type */

 The player should be stopped */

 Clear any pending interrupts */

 Set the interrupt mask */

 Enable underflow recovery interrupts */

	/*

	 * Does not use IEC61937 features of the uniperipheral hardware.

	 * Instead it performs IEC61937 in software and inserts it directly

	 * into the audio data stream. As such, when encoded mode is selected,

	 * linear pcm mode is still used, but with the differences of the

	 * channel status bits set for encoded mode and the validity bits set.

	/*

	 * If iec958 formatting is required for hdmi or spdif, then it must be

	 * enabled after the operation mode is set. If set prior to this, it

	 * will not take affect and hang the player.

 Force channel status update (no update if clk disable) */

 Update state to started */

 The player should not be in stopped state */

 Turn the player off */

 Disable interrupts */

 Disable clock */

 Update state to stopped and return */

 Select the frequency synthesizer clock */

 Stop the player */

 PCM_CLK_SEL */

 PCMP_VALID_SEL */

 Get PCM_CLK_SEL & PCMP_VALID_SEL from audio-glue-ctrl SoC reg */

 Underflow recovery is only supported on later ip revisions */

 Get uniperif resource */

 Select the frequency synthesizer clock */

 connect to I2S/TDM TX bus */

 Ensure that disabled by default */

 Set default iec958 status bits  */

 Consumer, PCM, copyright, 2ch, mode 0 */

 Broadcast reception category */

 Do not take into account source or channel number */

 Sampling frequency not indicated */

 Max sample word 24-bit, sample word length not indicated */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) STMicroelectronics SA 2015

 * Authors: Arnaud Pouliquen <arnaud.pouliquen@st.com>

 *          for STMicroelectronics.

 reader id connected to I2S/TDM TX bus */

/*

 * Note: snd_pcm_hardware is linked to DMA controller but is declared here to

 * integrate unireader capability in term of rate and supported channels

/*

 * uni_reader_irq_handler

 * In case of error audio stream is stopped; stop action is protected via PCM

 * stream lock  to avoid race condition with trigger callback.

 Unexpected IRQ: do nothing */

 Get interrupt status & clear them immediately */

 Check for fifo overflow error */

 Force slot width to 32 in I2S mode */

 Number of bits per subframe (i.e one channel sample) on input. */

 Configure data memory format */

 One data word contains two samples */

		/*

		 * Actually "16 bits/0 bits" means "32/28/24/20/18/16 bits

		 * on the MSB then zeros (if less than 32 bytes)"...

 Number of channels must be even */

 user tdm frame size in bytes */

 default unip TDM_WORD_POS_X_Y */

 fix 16/0 format */

 number of words inserted on the TDM line */

	/*

	 * set the timeslots allocation for words in FIFO

	 *

	 * HW bug: (LSB word < MSB word) => this config is not possible

	 *         So if we want (LSB word < MSB) word, then it shall be

	 *         handled by user

 The reader should be stopped */

 Calculate transfer size (in fifo cells and bytes) for frame count */

 transfer size = unip frame size (in 32 bits FIFO cell) */

 Calculate number of empty cells available before asserting DREQ */

		/*

		 * Since SND_ST_UNIPERIF_VERSION_UNI_PLR_TOP_1_0

		 * FDMA_TRIGGER_LIMIT also controls when the state switches

		 * from OFF or STANDBY to AUDIO DATA.

 Trigger limit must be an even number */

 Data clocking (changing) on the rising/falling edge */

 Clear any pending interrupts */

 Set the interrupt mask */

 Enable underflow recovery interrupts */

 Reset uniperipheral reader */

 The reader should be stopped */

 Enable reader interrupts (and clear possible stalled ones) */

 Launch the reader */

 Update state to started */

 The reader should not be in stopped state */

 Turn the reader off */

 Disable interrupts */

 Update state to stopped and return */

 refine hw constraint in tdm mode */

 Stop the reader */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2011 Freescale Semiconductor, Inc.

/*

 * SAIF is a little different with other normal SOC DAIs on clock using.

 *

 * For MXS, two SAIF modules are instantiated on-chip.

 * Each SAIF has a set of clock pins and can be operating in master

 * mode simultaneously if they are connected to different off-chip codecs.

 * Also, one of the two SAIFs can master or drive the clock pins while the

 * other SAIF, in slave mode, receives clocking from the master SAIF.

 * This also means that both SAIFs must operate at the same sample rate.

 *

 * We abstract this as each saif has a master, the master could be

 * itself or other saifs. In the generic saif driver, saif does not need

 * to know the different clkmux. Saif only needs to know who is its master

 * and operating its master to generate the proper clock rate for it.

 * The master id is provided in mach-specific layer according to different

 * clkmux setting.

/*

 * Since SAIF may work on EXTMASTER mode, IOW, it's working BITCLK&LRCLK

 * is provided by other SAIF, we provide a interface here to get its master

 * from its master_id.

 * Note that the master could be itself.

/*

 * Set SAIF clock and MCLK

 Set master saif to generate proper clock */

 Checking if can playback and capture simutaneously */

	/*

	 * Set SAIF clock

	 *

	 * The SAIF clock should be either 384*fs or 512*fs.

	 * If MCLK is used, the SAIF clk ratio needs to match mclk ratio.

	 *  For 256x, 128x, 64x, and 32x sub-rates, set saif clk as 512*fs.

	 *  For 192x, 96x, and 48x sub-rates, set saif clk as 384*fs.

	 *

	 * If MCLK is not used, we just set saif clk to 512*fs.

 SAIF MCLK should be a sub-rate of 512x or 384x */

	/*

	 * Program the over-sample rate for MCLK output

	 *

	 * The available MCLK range is 32x, 48x... 512x. The rate

	 * could be from 8kHz to 192kH.

/*

 * Put and disable MCLK.

 disable MCLK output */

/*

 * Get MCLK and set clock rate, then enable it

 *

 * This interface is used for codecs who are using MCLK provided

 * by saif.

 Clear Reset */

 FIXME: need clear clk gate for register r/w */

 enable MCLK output */

/*

 * SAIF DAI format configuration.

 * Should only be called when port is inactive.

	/* If SAIF1 is configured as slave, the clk gate needs to be cleared

	 * before the register can be written.

 DAI mode */

 data frame low 1clk before data */

 data frame high with data */

 DAI clock inversion */

	/*

	 * Note: We simply just support master mode since SAIF TX can only

	 * work as master.

	 * Here the master is relative to codec side.

	 * Saif internally could be slave when working on EXTMASTER mode.

	 * We just hide this to machine driver.

 clear error status to 0 for each re-open */

 Clear Reset for normal operations */

 clear clock gate */

/*

 * Should only be called when port is inactive.

 * although can be called multiple times by upper layers.

 mclk should already be set */

	/*

	 * Set saif clk based on sample rate.

	 * If mclk is used, we also set mclk, if not, saif->mclk is

	 * default 0, means not used.

		/*

		* Set an initial clock rate for the saif internal logic to work

		* properly. This is important when working in EXTMASTER mode

		* that uses the other saif's BITCLK&LRCLK but it still needs a

		* basic clock which should be fast enough for the internal

		* logic.

 Tx/Rx config */

 enable TX mode */

 enable RX mode */

 enable FIFO error irqs */

		/*

		 * If the saif's master is not itself, we also need to enable

		 * itself clk for its internal basic logic to work.

			/*

			 * write data to saif data register to trigger

			 * the transfer.

			 * For 24-bit format the 32-bit FIFO register stores

			 * only one channel, so we need to write twice.

			 * This is also safe for the other non 24-bit formats.

			/*

			 * read data from saif data register to trigger

			 * the receive.

			 * For 24-bit format the 32-bit FIFO register stores

			 * only one channel, so we need to read twice.

			 * This is also safe for the other non 24-bit formats.

 wait a while for the current sample to complete */

	/*

	 * If there is no "fsl,saif-master" phandle, it's a saif

	 * master.  Otherwise, it's a slave and its phandle points

	 * to the master.

 We only support saif0 being tx and clock master */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2011 Freescale Semiconductor, Inc.

 sgtl5000 does not support 512*rate when in 96000 fs */

 Set SGTL5000's SYSCLK (provided by SAIF MCLK) */

 The SAIF MCLK should be the same as SGTL5000_SYSCLK */

	/*

	 * Set an init clock(11.28Mhz) for sgtl5000 initialization(i2c r/w).

	 * The Sgtl5000 sysclk is derived from saif0 mclk and it's range

	 * should be >= 8MHz and <= 27M.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2011 Freescale Semiconductor, Inc. All Rights Reserved.

 *

 * Based on sound/soc/imx/imx-pcm-dma-mx2.c

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2015 Andrea Venturi

 * Andrea Venturi <be17068@iperbole.bo.it>

 *

 * Copyright (C) 2016 Maxime Ripard

 * Maxime Ripard <maxime.ripard@free-electrons.com>

 Defines required for sun8i-h3 support */

 Defines required for sun50i-h6 support */

/**

 * struct sun4i_i2s_quirks - Differences between SoC variants.

 * @has_reset: SoC needs reset deasserted.

 * @reg_offset_txdata: offset of the tx fifo.

 * @sun4i_i2s_regmap: regmap config to use.

 * @field_clkdiv_mclk_en: regmap field to enable mclk output.

 * @field_fmt_wss: regmap field to set word select size.

 * @field_fmt_sr: regmap field to set sample resolution.

 * @bclk_dividers: bit clock dividers array

 * @num_bclk_dividers: number of bit clock dividers

 * @mclk_dividers: mclk dividers array

 * @num_mclk_dividers: number of mclk dividers

 * @get_bclk_parent_rate: callback to get bclk parent rate

 * @get_sr: callback to get sample resolution

 * @get_wss: callback to get word select size

 * @set_chan_cfg: callback to set channel configuration

 * @set_fmt: callback to set format

 TX FIFO */

 Register fields for i2s */

	/*

	 * In the set_chan_cfg() function pointer:

	 * @slots: channels per frame + padding slots, regardless of format

	 * @slot_width: bits per sample + padding bits, regardless of format

 Register fields for i2s */

 TODO - extend divide ratio supported by newer SoCs */

 TODO - extend divide ratio supported by newer SoCs */

 Map the channels for playback and capture */

 Configure the channels */

 Map the channels for playback and capture */

 Configure the channels */

 Map the channels for playback and capture */

 Configure the channels */

 Set significant bits in our FIFOs */

 DAI clock polarity */

 Invert both clocks */

 Invert bit clock */

 Invert frame clock */

 DAI Mode */

 DAI clock master masks */

 BCLK and LRCLK master */

 BCLK and LRCLK slave */

	/*

	 * DAI clock polarity

	 *

	 * The setup for LRCK contradicts the datasheet, but under a

	 * scope it's clear that the LRCK polarity is reversed

	 * compared to the expected polarity on the bus.

 Invert both clocks */

 Invert bit clock */

 Invert frame clock */

 DAI Mode */

 DAI clock master masks */

 BCLK and LRCLK master */

 BCLK and LRCLK slave */

 Set sign extension to pad out LSB with 0 */

	/*

	 * DAI clock polarity

	 *

	 * The setup for LRCK contradicts the datasheet, but under a

	 * scope it's clear that the LRCK polarity is reversed

	 * compared to the expected polarity on the bus.

 Invert both clocks */

 Invert bit clock */

 Invert frame clock */

 DAI Mode */

 DAI clock master masks */

 BCLK and LRCLK master */

 BCLK and LRCLK slave */

 Set sign extension to pad out LSB with 0 */

 Flush RX FIFO */

 Clear RX counter */

 Enable RX Block */

 Enable RX DRQ */

 Flush TX FIFO */

 Clear TX counter */

 Enable TX Block */

 Enable TX DRQ */

 Disable RX Block */

 Disable RX DRQ */

 Disable TX Block */

 Disable TX DRQ */

 Enable the whole hardware block */

 Enable the first output line */

 Disable our output lines */

 Disable the whole hardware block */

/*

 * This doesn't describe the TDM controller documented in the A83t

 * datasheet, but the three undocumented I2S controller that use the

 * older design.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ALSA SoC SPDIF Audio Layer

 *

 * Copyright 2015 Andrea Venturi <be17068@iperbole.bo.it>

 * Copyright 2015 Marcus Cooper <codekipper@gmail.com>

 *

 * Based on the Allwinner SDK driver, released under the GPL.

 v even */

 Defines for Sampling Frequency */

/**

 * struct sun4i_spdif_quirks - Differences between SoC variants.

 *

 * @reg_dac_txdata: TX FIFO offset for DMA config.

 * @has_reset: SoC needs reset deasserted.

 * @val_fctl_ftx: TX FIFO flush bitmask.

 soft reset SPDIF */

 flush TX FIFO */

 clear TX counter */

 SPDIF TX ENABLE */

 DRQ ENABLE */

 Global enable */

 SPDIF TX DISABLE */

 DRQ DISABLE */

 Global disable */

 Add the PCM and raw data select interface */

 PCM mode */

 raw data mode */

 set non audio and bit depth */

 sentinel */ }

 Initialize this copy of the CPU DAI driver structure */

 Get the addresses */

 Clocks */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2014 Emilio López <emilio@elopez.com.ar>

 * Copyright 2014 Jon Smirl <jonsmirl@gmail.com>

 * Copyright 2015 Maxime Ripard <maxime.ripard@free-electrons.com>

 * Copyright 2015 Adam Sampson <ats@offog.org>

 * Copyright 2016 Chen-Yu Tsai <wens@csie.org>

 *

 * Based on the Allwinner SDK driver, released under the GPL.

 Codec DAC digital controls and FIFO registers */

 Codec DAC side analog signal controls */

 Codec ADC digital controls and FIFO registers */

 Codec ADC side analog signal controls */

 FIFO counters */

 Calibration register (sun7i only) */

 Microphone controls (sun7i only) */

/*

 * sun6i specific registers

 *

 * sun6i shares the same digital control and FIFO registers as sun4i,

 * but only the DAC digital controls are at the same offset. The others

 * have been moved around to accommodate extra analog controls.

 Codec DAC digital controls and FIFO registers */

 Output mixer and gain controls */

 Microphone, line out and phone out controls */

 ADC mixer controls */

 Analog performance tuning controls */

 Calibration controls */

 FIFO counters */

 headset jack detection and button support registers */

 TODO sun6i DAP (Digital Audio Processing) bits */

 FIFO counters moved on A23 */

 TX FIFO moved on H3 */

 TODO H3 DAP (Digital Audio Processing) bits */

 ADC_FIFOC register is at different offset on different SoCs */

 Flush TX FIFO */

 Enable DAC DRQ */

 Disable DAC DRQ */

 Enable ADC DRQ */

 Disable ADC DRQ */

 Flush RX FIFO */

 Set RX FIFO trigger level */

	/*

	 * FIXME: Undocumented in the datasheet, but

	 *        Allwinner's code mentions that it is

	 *        related to microphone gain

 FIXME: Undocumented bits */

 Flush the TX FIFO */

 Set TX FIFO Empty Trigger Level */

 Use 64 bits FIR filter */

 Use 32 bits FIR filter */

 Send zeros when we have an underrun */

 Set ADC sample rate */

 Set the number of channels we want to use */

 Set the number of sample bits to either 16 or 24 bits */

 Fill most significant bits with valid data MSB */

 Set DAC sample rate */

 Set the number of channels we want to use */

 Set the number of sample bits to either 16 or 24 bits */

 Set TX FIFO mode to padding the LSBs with 0 */

 Set TX FIFO mode to repeat the MSB */

	/*

	 * Stop issuing DRQ when we have room for less than 16 samples

	 * in our TX FIFO

** sun4i Codec ***/

 Digital parts of the ADCs */

 Digital parts of the DACs */

 Analog parts of the ADCs */

 Analog parts of the DACs */

 Mixers */

 Global Mixer Enable */

 VMIC */

 Mic Pre-Amplifiers */

 Power Amplifier */

 Left ADC / DAC Routes */

 Right ADC / DAC Routes */

 Right Mixer Routes */

 Left Mixer Routes */

 Power Amplifier Routes */

 Headphone Output Routes */

 Mic1 Routes */

 Mic2 Routes */

** sun6i Codec ***/

 mixer controls */

 ADC mixer controls */

 headphone controls */

 microphone controls */

 line out controls */

 volume / mute controls */

 Mixer pre-gains */

 Microphone Amp boost gains */

 Microphone inputs */

 Microphone Bias */

 Mic input path */

 Line In */

 Digital parts of the ADCs */

 Analog parts of the ADCs */

 ADC Mixers */

 Digital parts of the DACs */

 Analog parts of the DACs */

 Mixers */

 Headphone output path */

 Line Out path */

 DAC Routes */

 Microphone Routes */

 Left Mixer Routes */

 Right Mixer Routes */

 Left ADC Mixer Routes */

 Right ADC Mixer Routes */

 Headphone Routes */

 Line Out Routes */

 ADC Routes */

 sun8i A23 codec */

 Digital parts of the ADCs */

 Digital parts of the DACs */

		/*

		 * Need a delay to wait for DAC to push the data. 700ms seems

		 * to be the best compromise not to feel this delay while

		 * playing a sound.

 Connect digital side enables to analog side widgets */

 ADC Routes */

 DAC Routes */

 used for regmap_field */

 TX FIFO offset for DMA config */

 RX FIFO offset for DMA config */

	/*

	 * TODO Share the codec structure with A23 for now.

	 * This should be split out when adding digital audio

	 * processing support for the H3.

	/*

	 * TODO The codec structure should be split out, like

	 * H3, when adding digital audio processing support.

 Get the clocks from the DT */

 reg_field setup */

 Enable the bus clock */

 Deassert the reset control */

 DMA configuration for TX FIFO */

 DMA configuration for RX FIFO */

 SPDX-License-Identifier: GPL-2.0+

/*

 * This driver supports the analog controls for the internal codec

 * found in Allwinner's A64 SoC.

 *

 * Copyright (C) 2016 Chen-Yu Tsai <wens@csie.org>

 * Copyright (C) 2017 Marcus Cooper <codekipper@gmail.com>

 * Copyright (C) 2018 Vasily Khoruzhick <anarsoul@gmail.com>

 *

 * Based on sun8i-codec-analog.c

 *

 Codec analog control register offsets and bit fields */

 mixer controls */

 ADC mixer controls */

 volume / mute controls */

 Mixer pre-gain */

 Microphone Amp boost gain */

 Mixer pre-gain */

 Microphone Amp boost gain */

 ADC */

 Mixer pre-gain */

 DAC */

 ADC */

	/*

	 * Due to this component and the codec belonging to separate DAPM

	 * contexts, we need to manually link the above widgets to their

	 * stream widgets at the card level.

 Microphone inputs */

 Microphone Bias */

 Mic input path */

 Microphone input */

 Microphone Bias */

 Mic input path */

 Line input */

 Mixers */

 Left Mixer Routes */

 Right Mixer Routes */

 Left ADC Mixer Routes */

 Right ADC Mixer Routes */

 ADC Routes */

 Headphone Routes */

 Microphone Routes */

 Microphone Routes */

 Line-out Routes */

 Earpiece Routes */

 SPDX-License-Identifier: GPL-2.0+

/*

 * This driver provides regmap to access to analog part of audio codec

 * found on Allwinner A23, A31s, A33, H3 and A64 Socs

 *

 * Copyright 2016 Chen-Yu Tsai <wens@csie.org>

 * Copyright (C) 2018 Vasily Khoruzhick <anarsoul@gmail.com>

 Analog control register access bits */

 PRCM base + 0x1c0 */

 regmap access bits */

 De-assert reset */

 Clear write bit */

 Set register address */

 Read back value */

 De-assert reset */

 Set register address */

 Set data to write */

 Set write bit to signal a write */

 Clear write bit */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * This driver supports the analog controls for the internal codec

 * found in Allwinner's A31s, A23, A33 and H3 SoCs.

 *

 * Copyright 2016 Chen-Yu Tsai <wens@csie.org>

 Codec analog control register offsets and bit fields */

 H3 specific */

 mixer controls */

 mixer controls */

 ADC mixer controls */

 ADC mixer controls */

 volume / mute controls */

 Mixer pre-gain */

 Microphone Amp boost gain */

 ADC */

 ADC */

 DAC */

	/*

	 * Due to this component and the codec belonging to separate DAPM

	 * contexts, we need to manually link the above widgets to their

	 * stream widgets at the card level.

 Microphone input */

 Mic input path */

 Microphone Routes */

 Left Mixer Routes */

 Right Mixer Routes */

 Left ADC Mixer Routes */

 Right ADC Mixer Routes */

 ADC Routes */

 headphone specific controls, widgets, and routes */

		/*

		 * Need a delay to have the amplifier up. 700ms seems the best

		 * compromise between the time to let the amplifier up and the

		 * time not to feel this delay while playing a sound.

 mbias specific widget */

 hmic specific widget */

 line in specific controls, widgets and rines */

 Mixer pre-gain */

 Line input */

 line out specific controls, widgets and routes */

 It is unclear if this is a buffer or gate, model it as a supply */

 mic2 specific controls, widgets and routes */

 Mixer pre-gain */

 Microphone Amp boost gain */

 Microphone input */

 Mic input path */

		/*

		 * Apply the special widget set which has uses a control

		 * without MIC2 and Line In, for SoCs without these.

		 * TODO: not all special cases are supported now, this case

		 * is present because it's the case of V3s.

 Apply the generic mixer widget set. */

	/*

	 * This would never return NULL unless someone directly registers a

	 * platform device matching this driver's name, without specifying a

	 * device tree node.

 Add controls, widgets, and routes for individual features */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * This driver supports the digital controls for the internal codec

 * found in Allwinner's A33 SoCs.

 *

 * (C) Copyright 2010-2016

 * Reuuimlla Technology Co., Ltd. <www.reuuimllatech.com>

 * huangxin <huangxin@Reuuimllatech.com>

 * Mylène Josserand <mylene.josserand@free-electrons.com>

 Set the sample rate for ADC->DAC passthrough when no AIF is active. */

 clock masters */

 Codec slave, DAI master */

 Codec Master, DAI slave */

 AIF3 only supports master mode. */

 Use the AIF2 BCLK and LRCK for AIF3. */

 DAI format */

 Set LRCK_INV to 0 */

 Set LRCK_INV to 1 */

 AIF3 only supports DSP mode. */

 clock inversion */

 Normal */

 Inverted LRCK */

 Inverted BCLK */

 Both inverted */

 Inverted LRCK is not available in DSP mode. */

 Instead, the bit selects between DSP A/B formats. */

		/*

		 * It appears that the DAI and the codec in the A33 SoC don't

		 * share the same polarity for the LRCK signal when they mean

		 * 'normal' and 'inverted' in the datasheet.

		 *

		 * Since the DAI here is our regular i2s driver that have been

		 * tested with way more codecs than just this one, it means

		 * that the codec probably gets it backward, and we have to

		 * invert the value here.

 hw_constraints is not relevant for codec2codec DAIs. */

 word size */

 LRCK divider (BCLK/LRCK ratio) */

 AIF2 and AIF3 share AIF2's BCLK and LRCK generation circuitry. */

 BCLK divider (SYSCLK/BCLK ratio) */

	/*

	 * SYSCLK rate

	 *

	 * Clock rate protection is reference counted; but hw_params may be

	 * called many times per substream, without matching calls to hw_free.

	 * Protect the clock rate once per AIF, on the first hw_params call

	 * for the first substream. clk_set_rate() will allow clock rate

	 * changes on subsequent calls if only one AIF has open streams.

 Drop references when the last substream for the AIF is freed. */

 capture capabilities */

 playback capabilities */

 capture capabilities */

 playback capabilities */

 capture capabilities */

 playback capabilities */

 System Clocks */

 Module Clocks */

 Module Resets */

 Module Supplies */

 AIF "ADC" Outputs */

 AIF "ADC" Mono/Stereo Muxes */

 AIF "ADC" Output Muxes */

 AIF "ADC" Mixers */

 AIF "DAC" Input Muxes */

 AIF "DAC" Mono/Stereo Muxes */

 AIF "DAC" Inputs */

 ADC Inputs (connected to analog codec DAPM context) */

 DAC Outputs (connected to analog codec DAPM context) */

 DAC Mixers */

 Clock Routes */

 AIF "ADC" Output Routes */

 AIF "ADC" Mono/Stereo Mux Routes */

 AIF "ADC" Output Mux Routes */

 AIF "ADC" Mixer Routes */

 AIF "DAC" Input Mux Routes */

 AIF "DAC" Mono/Stereo Mux Routes */

 DAC Output Routes */

 DAC Mixer Routes */

 Legacy ADC Inputs (connected to analog codec DAPM context) */

 Legacy DAC Outputs (connected to analog codec DAPM context) */

 Legacy ADC Routes */

 Legacy DAC Routes */

 Add widgets for backward compatibility with old device trees. */

	/*

	 * AIF1CLK and AIF2CLK share a pair of clock parents: PLL_AUDIO ("mod")

	 * and MCLK (from the CPU DAI connected to AIF1). MCLK's parent is also

	 * PLL_AUDIO, so using it adds no additional flexibility. Use PLL_AUDIO

	 * directly to simplify the clock tree.

 Use AIF1CLK as the SYSCLK parent since AIF1 is used most often. */

 Program the default sample rate. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * AMD ALSA SoC PCM Driver for ACP 2.x

 *

 * Copyright 2014-2015 Advanced Micro Devices, Inc.

/*

 * Configure a given dma channel parameters - enable/disable,

 * number of descriptors, priority

 disable the channel run field */

 program a DMA channel with first descriptor to be processed. */

	/*

	 * program a DMA channel with the number of descriptors to be

	 * processed in the transfer

 set DMA channel priority */

 Initialize a dma descriptor in SRAM based on descriptor information passed */

 program the source base address. */

 program the destination base address. */

 program the number of bytes to be transferred for this descriptor. */

 clear the reset bit */

 check the reset bit before programming configuration registers */

/*

 * Initialize the DMA descriptor information for transfer between

 * system memory <-> ACP SRAM

/*

 * Initialize the DMA descriptor information for transfer between

 * ACP SRAM <-> I2S

 dmadscr[i].dest is unused by hardware. */

 dmadscr[i].src is unused by hardware. */

 Configure the DMA channel with the above descriptor */

 Create page table entries in ACP SRAM for the allocated memory */

 Load the low address of page int ACP SRAM through SRBM */

 Load the High address of page int ACP SRAM through SRBM */

 page enable in ACP */

 Move to next physically contiguous page */

 Configure System memory <-> ACP SRAM DMA descriptors */

 Configure ACP SRAM <-> I2S DMA descriptors */

 Set 16bit resolution on capture */

 Start a given DMA channel transfer */

 read the dma control register and disable the channel run field */

 Invalidating the DAGB cache */

	/*

	 * configure the DMA channel and start the DMA transfer

	 * set dmachrun bit to start the transfer and enable the

	 * interrupt on completion of the dma transfer

 enable for ACP to SRAM DMA channel */

 Stop a given DMA channel transfer */

	/*

	 * clear the dma control register fields before writing zero

	 * in reset bit

		/*

		 * set the reset bit for this channel to stop the dma

		 *  transfer

 check the channel status bit for some time and return the status */

			/*

			 * clear the reset flag after successfully stopping

			 * the dma transfer and break from the loop

 bank is in off state */

 request to on */

 request to off */

 bank is in on state */

 request to off */

 request to on */

 Initialize and bring ACP hardware to default state. */

 Assert Soft reset of ACP */

 Enable clock to ACP and wait until the clock is enabled */

 Deassert the SOFT RESET flags */

 For BT instance change pins from UART to BT */

 initialize Onion control DAGB register */

 initialize Garlic control DAGB registers */

 Num of descriptors in SRAM 0x4, means 256 descriptors;(64 * 4) */

       /*

	* When ACP_TILE_P1 is turned on, all SRAM banks get turned on.

	* Now, turn off all of them. This can't be done in 'poweron' of

	* ACP pm domain, as this requires ACP to be initialized.

	* For Stoney, Memory gating is disabled,i.e SRAM Banks

	* won't be turned off. The default state for SRAM banks is ON.

	* Setting SRAM bank state code skipped for STONEY platform.

 Deinitialize ACP */

 Assert Soft reset of ACP */

 Disable ACP clock */

 ACP DMA irq handler routine for playback, capture usecases */

	/*

	 * Enable ACP irq, when neither playback or capture streams are

	 * active by the time when a new stream is being opened.

	 * This enablement is not required for another stream, if current

	 * stream is not closed

		/*

		 * For Stoney, Memory gating is disabled,i.e SRAM Banks

		 * won't be turned off. The default state for SRAM banks is ON.

		 * Setting SRAM bank state code skipped for STONEY platform.

 Save for runtime private data */

 Fill the page table entries in ACP SRAM */

			/*

			 * For Stoney, Memory gating is disabled,i.e SRAM Banks

			 * won't be turned off. The default state for SRAM banks

			 * is ON.Setting SRAM bank state code skipped for STONEY

			 * platform. Added condition checks for Carrizo platform

			 * only.

	/*

	 * Disable ACP irq, when the current stream is being closed and

	 * another stream is also not active.

	/*

	 * The following members gets populated in device 'open'

	 * function. Till then interrupts are disabled in 'acp_init'

	 * and device doesn't generate any interrupts.

 Initialize the ACP */

		/*

		 * For Stoney, Memory gating is disabled,i.e SRAM Banks

		 * won't be turned off. The default state for SRAM banks is ON.

		 * Setting SRAM bank state code skipped for STONEY platform.

 SPDX-License-Identifier: MIT



 Machine driver for AMD ACP Audio engine using DA7219, RT5682 & MAX98357 codec



Copyright 2017-2021 Advanced Micro Devices, Inc.

	/*

	 * Set wclk to 48000 because the rate constraint of this driver is

	 * 48000. ADAU7002 spec: "The ADAU7002 requires a BCLK rate that is

	 * minimum of 64x the LRCLK sample rate." DA7219 is the only clk

	 * source so for all codecs we have to limit bclk to 64X lrclk.

 Set codec sysclk */

 set codec PLL */

	/*

	 * Set wclk to 48000 because the rate constraint of this driver is

	 * 48000. ADAU7002 spec: "The ADAU7002 requires a BCLK rate that is

	 * minimum of 64x the LRCLK sample rate." RT5682 is the only clk

	 * source so for all codecs we have to limit bclk to 64X lrclk.

	/*

	 * On this platform for PCM device we support stereo

	/*

	 * On this platform for PCM device we support stereo

	/*

	 * On this platform for PCM device we support stereo

	/*

	 * On this platform for PCM device we support stereo

	/*

	 * On this platform for PCM device we support stereo

	/*

	 * On this platform for PCM device we support stereo

	/*

	 * On this platform for PCM device we support stereo

	/*

	 * On this platform for PCM device we support stereo

	/*

	 * On this platform for PCM device we support stereo

	/*

	 * On this platform for PCM device we support stereo

 C panel DMIC */

 A/B panel DMIC */

 C panel DMIC */

 A/B panel DMIC */

 1.8V */

 SPDX-License-Identifier: GPL-2.0+



 Machine driver for AMD ACP Audio engine using DA7219 & MAX98357 codec.



Copyright 2016 Advanced Micro Devices, Inc.

 set rt5682 dai fmt */

 set codec PLL */

 Set codec sysclk */

 Set tdm/i2s1 master bclk ratio */

 RT5682 will support only 48K output with 48M mclk */

 speaker */

/*

 * Machine driver for AMD ACP Audio engine using Realtek RT5645 codec

 *

 * Copyright 2017 Advanced Micro Devices, Inc.

 *

 * This file is modified from rt288 machine driver

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 *

 SPDX-License-Identifier: GPL-2.0+



 AMD ALSA SoC PCM Driver



 Copyright (C) 2021 Advanced Micro Devices, Inc. All rights reserved.

 Group Enable */

 Load the low address of page int ACP SRAM through SRBM */

 Move to next physically contiguous page */

 SPDX-License-Identifier: GPL-2.0+



 AMD ALSA SoC PCM Driver



 Copyright (C) 2021 Advanced Micro Devices, Inc. All rights reserved.

 These values are as per Hardware Spec */

 These values are as per Hardware Spec */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Machine driver for AMD Vangogh platform using NAU8821 & CS35L41

 * codecs.

 *

 * Copyright 2021 Advanced Micro Devices, Inc.

	/*

	 * Headset buttons map to the google Reference headset.

	 * These can be configured by userspace.

 HP jack connectors - unknown if we have jack detection */

 SPDX-License-Identifier: GPL-2.0+



 AMD Vangogh ACP PCI Driver



 Copyright (C) 2021 Advanced Micro Devices, Inc. All rights reserved.

 power on */

 Reset */

 Reset */

 SPDX-License-Identifier: GPL-2.0+



 AMD Renoir ACP PCI Driver



Copyright 2020 Advanced Micro Devices, Inc.

/*

 * dmic_acpi_check = -1 - Use ACPI/DMI method to detect the DMIC hardware presence at runtime

 *                 =  0 - Skip the DMIC device creation and return probe failure

 *                 =  1 - Force DMIC support

 power on */

 Reset */

 Reset */

 power off */

 Lenovo IdeaPad S340-14API */

 Lenovo IdeaPad Flex 5 14ARE05 */

 Lenovo IdeaPad 5 15ARE05 */

 Lenovo ThinkPad E14 Gen 2 */

 Lenovo ThinkPad X395 */

 Renoir device check */

 check for msi interrupt support */

 msi is not enabled */

 msi is enabled */

 SPDX-License-Identifier: GPL-2.0+



 AMD ALSA SoC PDM Driver



Copyright 2020 Advanced Micro Devices, Inc.

 Group Enable */

 Load the low address of page int ACP SRAM through SRBM */

 SPDX-License-Identifier: GPL-2.0+



 Machine driver for AMD Renoir platform using DMIC



Copyright 2020 Advanced Micro Devices, Inc.

 SPDX-License-Identifier: GPL-2.0+

/*

 * AMD Yellow Carp ACP PCI Driver

 *

 * Copyright 2021 Advanced Micro Devices, Inc.

 power on */

 Reset */

 Reset */

 Yellow Carp device check */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Machine driver for AMD Yellow Carp platform using DMIC

 *

 * Copyright 2021 Advanced Micro Devices, Inc.

 SPDX-License-Identifier: GPL-2.0+

/*

 * AMD ALSA SoC Yellow Carp PDM Driver

 *

 * Copyright 2021 Advanced Micro Devices, Inc.

 Group Enable */

 Load the low address of page int ACP SRAM through SRBM */

 SPDX-License-Identifier: GPL-2.0+



 AMD ALSA SoC PCM Driver



Copyright 2016 Advanced Micro Devices, Inc.

 These values are as per Hardware Spec */

 These values are as per Hardware Spec */

 As we use devm_ memory alloc there is nothing TBD here */

 SPDX-License-Identifier: GPL-2.0+



 AMD ALSA SoC PCM Driver



Copyright 2016 Advanced Micro Devices, Inc.

 Group Enable */

 Load the low address of page int ACP SRAM through SRBM */

 Move to next physically contiguous page */

 SPDX-License-Identifier: GPL-2.0+



 AMD ACP PCI Driver



Copyright 2016 Advanced Micro Devices, Inc.

			/* ACP power On clears PME_EN.

			 * Restore the value to its prior state

 power on */

 Reset */

 Reset */

 Raven device detection */

 Save ACP_PME_EN state */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license. When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2021 Advanced Micro Devices, Inc.



 Authors: Ajit Kumar Pandey <AjitKumar.Pandey@amd.com>



/*

 * Machine Driver Legacy Support for ACP HW block

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license. When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2021 Advanced Micro Devices, Inc.



 Authors: Ajit Kumar Pandey <AjitKumar.Pandey@amd.com>

/*

 * Generic interface for ACP audio blck PCM component

 Use ATU base Group5 */

 Group Enable */

 Load the low address of page int ACP SRAM through SRBM */

 Move to next physically contiguous page */

 Configure ACP DMA block with params */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license. When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2021 Advanced Micro Devices, Inc.



 Authors: Ajit Kumar Pandey <AjitKumar.Pandey@amd.com>



/*

 * Hardware interface for Renoir ACP block

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license. When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2021 Advanced Micro Devices, Inc.



 Authors: Ajit Kumar Pandey <AjitKumar.Pandey@amd.com>

	    Vijendar Mukunda <Vijendar.Mukunda@amd.com>



/*

 * Machine Driver Interface for ACP HW block

 Declare RT5682 codec components */

 Define card ops for RT5682 CODEC */

 Set tdm/i2s1 master bclk ratio */

 Define RT5682S CODEC component*/

 Set tdm/i2s1 master bclk ratio */

 Declare RT1019 codec components */

 Declare Maxim codec components */

 Declare DMIC codec components */

 Declare ACP CPU components */

 Use dummy codec if codec id not specified */

 Use dummy codec if codec id not specified */

 Use dummy codec if codec id not specified */

 Use dummy codec if codec id not specified */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license. When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2021 Advanced Micro Devices, Inc.



 Authors: Ajit Kumar Pandey <AjitKumar.Pandey@amd.com>



/*

 * Generic Hardware interface for ACP Audio I2S controller

 These values are as per Hardware Spec */

 Save runtime dai configuration in stream */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



 This file is provided under a dual BSD/GPLv2 license. When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2021 Advanced Micro Devices, Inc.



 Authors: Ajit Kumar Pandey <AjitKumar.Pandey@amd.com>



/*

 * SOF Machine Driver Support for ACP HW block

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * imx-pcm-dma-mx2.c  --  ALSA Soc Audio Layer

 *

 * Copyright 2009 Sascha Hauer <s.hauer@pengutronix.de>

 *

 * This code is based on code copyrighted by Freescale,

 * Liam Girdwood, Javier Martin and probably others.

 SPDX-License-Identifier: GPL-2.0+



 Copyright 2012 Freescale Semiconductor, Inc.

 Copyright 2012 Linaro Ltd.

 Headphone jack detection */

	/*

	 * The port numbering in the hardware manual starts at 1, while

	 * the audmux API expects it starts at 0.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+



 Copyright 2012 Freescale Semiconductor, Inc.

 Copyright 2012 Linaro Ltd.

 Copyright 2009 Pengutronix, Sascha Hauer <s.hauer@pengutronix.de>



 Initial development of this code was funded by

 Phytec Messtechnik GmbH, https:
/* There is an annoying discontinuity in the SSI numbering with regard

 sentinel */ }

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0

 Copyright 2017-2020 NXP

/**

 * struct cpu_priv - CPU private data

 * @sysclk_id: SYSCLK ids for set_sysclk()

 * @slot_width: Slot width of each frame

 *

 * Note: [1] for tx and [0] for rx

 MCLK always is (256 or 192) * rate. */

 enable jack detection */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0



 Freescale ALSA SoC Machine driver utility



 Author: Timur Tabi <timur@freescale.com>



 Copyright 2010 Freescale Semiconductor, Inc.

/**

 * fsl_asoc_get_dma_channel - determine the dma channel for a SSI node

 *

 * @ssi_np: pointer to the SSI device tree node

 * @name: name of the phandle pointing to the dma channel

 * @dai: ASoC DAI link pointer to be filled with platform_name

 * @dma_channel_id: dma channel id to be returned

 * @dma_id: dma id to be returned

 *

 * This function determines the dma and channel id for given SSI node.  It

 * also discovers the platform_name for the ASoC DAI link.

	/* Determine the dev_name for the device_node.  This code mimics the

	 * behavior of of_device_make_bus_id(). We need this because ASoC uses

	 * the dev_name() of the device to match the platform (DMA) device with

	 * the CPU (SSI) device.  It's all ugly and hackish, but it works (for

	 * now).

	 *

	 * dai->platform name should already point to an allocated buffer.

 SPDX-License-Identifier: GPL-2.0



 Phytec pcm030 driver for the PSC of the Freescale MPC52xx

 configured as AC97 interface



 Copyright 2008 Jon Smirl, Digispeaker

 Author: Jon Smirl <jonsmirl@gmail.com>

 SPDX-License-Identifier: GPL-2.0+

 Copyright 2017-2020 NXP

/*

 * struct imx_audio_rpmsg: private data

 *

 * @rpmsg_pdev: pointer of platform device

 TYPE C is notification from M core */

 TYPE B is response msg */

 Register platform driver for rpmsg routine */

 SPDX-License-Identifier: GPL-2.0

 Copyright 2019 NXP

/*

 * fsl_easrc_set_rs_ratio

 *

 * According to the resample taps, calculate the resample ratio

 * ratio = in_rate / out_rate

 integer bits = 5; */

 integer bits = 6; */

 integer bits = 7; */

 Normalize input and output sample rates */

 Divide by gcd to normalize the rate */

 Resets the pointer of the coeff memory pointers */

 This resets the prefilter memory pointer addr */

 This resets the resampling memory pointer addr */

	/*

	 * To reset the write pointer back to zero, the register field

	 * ASRC_CTX_CTRL_EXT1x[PF_COEFF_MEM_RST] can be toggled from

	 * 0x0 to 0x1 to 0x0.

	/*

	 * RS_LOW - first half of center tap of the sinc function

	 * RS_HIGH - second half of center tap of the sinc function

	 * This is due to the fact the resampling function must be

	 * symetrical - i.e. odd number of taps

	/*

	 * Write Number of Resampling Coefficient Taps

	 * 00b - 32-Tap Resampling Filter

	 * 01b - 64-Tap Resampling Filter

	 * 10b - 128-Tap Resampling Filter

	 * 11b - N/A

 Reset prefilter coefficient pointer back to 0 */

	/*

	 * When the filter is programmed to run in:

	 * 32-tap mode, 16-taps, 128-phases 4-coefficients per phase

	 * 64-tap mode, 32-taps, 64-phases 4-coefficients per phase

	 * 128-tap mode, 64-taps, 32-phases 4-coefficients per phase

	 * This means the number of writes is constant no matter

	 * the mode we are using

/**

 *  fsl_easrc_normalize_filter - Scale filter coefficients (64 bits float)

 *  For input float32 normalized range (1.0,-1.0) -> output int[16,24,32]:

 *      scale it by multiplying filter coefficients by 2^31

 *  For input int[16, 24, 32] -> output float32

 *      scale it by multiplying filter coefficients by 2^-15, 2^-23, 2^-31

 *  input:

 *      @easrc:  Structure pointer of fsl_asrc

 *      @infilter : Pointer to non-scaled input filter

 *      @shift:  The multiply factor

 *  output:

 *      @outfilter: scaled filter

	/*

	 * If exponent is zero (value == 0), or 7ff (value == NaNs)

	 * dont touch the content

 coef * 2^shift ==> exp + shift */

 If STx_NUM_TAPS is set to 0x0 then return */

	/*

	 * When switching between stages, the address pointer

	 * should be reset back to 0x0 before performing a write

	/*

	 * The audio float point data range is (-1, 1), the asrc would output

	 * all zero for float point input and integer output case, that is to

	 * drop the fractional part of the data directly.

	 *

	 * In order to support float to int conversion or int to float

	 * conversion we need to do special operation on the coefficient to

	 * enlarge/reduce the data to the expected range.

	 *

	 * For float to int case:

	 * Up sampling:

	 * 1. Create a 1 tap filter with center tap (only tap) of 2^31

	 *    in 64 bits floating point.

	 *    double value = (double)(((uint64_t)1) << 31)

	 * 2. Program 1 tap prefilter with center tap above.

	 *

	 * Down sampling,

	 * 1. If the filter is single stage filter, add "shift" to the exponent

	 *    of stage 1 coefficients.

	 * 2. If the filter is two stage filter , add "shift" to the exponent

	 *    of stage 2 coefficients.

	 *

	 * The "shift" is 31, same for int16, int24, int32 case.

	 *

	 * For int to float case:

	 * Up sampling:

	 * 1. Create a 1 tap filter with center tap (only tap) of 2^-31

	 *    in 64 bits floating point.

	 * 2. Program 1 tap prefilter with center tap above.

	 *

	 * Down sampling,

	 * 1. If the filter is single stage filter, subtract "shift" to the

	 *    exponent of stage 1 coefficients.

	 * 2. If the filter is two stage filter , subtract "shift" to the

	 *    exponent of stage 2 coefficients.

	 *

	 * The "shift" is 15,23,31, different for int16, int24, int32 case.

	 *

		/*

		 * In prefilter coeff array, first st1_num_taps represent the

		 * stage1 prefilter coefficients followed by next st2_num_taps

		 * representing stage 2 coefficients

 only change stage2 coefficient for 2 stage case */

	/*

	 * To modify the value of a prefilter coefficient, the user must

	 * perform a write to the register ASRC_PRE_COEFF_FIFOn[COEFF_DATA]

	 * while the respective context RUN_EN bit is set to 0b0

 Update ctx ST1_NUM_TAPS in Context Control Extended 2 register */

 Prefilter Coefficient Write Select to write in ST1 coeff */

		/*

		 * Enable prefilter stage1 writeback floating point

		 * which is used for FLOAT_LE case

 Update ctx ST2_NUM_TAPS in Context Control Extended 2 reg */

 Prefilter Coefficient Write Select to write in ST2 coeff */

/*

 * fsl_easrc_config_slot

 *

 * A single context can be split amongst any of the 4 context processing pipes

 * in the design.

 * The total number of channels consumed within the context processor must be

 * less than or equal to 8. if a single context is configured to contain more

 * than 8 channels then it must be distributed across multiple context

 * processing pipe slots.

 *

/*

 * fsl_easrc_release_slot

 *

 * Clear the slot configuration

 set registers */

 set registers */

/*

 * fsl_easrc_config_context

 *

 * Configure the register relate with context.

 Initialize the context coeficients */

	/*

	 * Both prefilter and resampling filters can use following

	 * initialization modes:

	 * 2 - zero-fil mode

	 * 1 - replication mode

	 * 0 - software control

	/*

	 * Context Input FIFO Watermark

	 * DMA request is generated when input FIFO < FIFO_WTMK

	/*

	 * Context Output FIFO Watermark

	 * DMA request is generated when output FIFO > FIFO_WTMK

	 * So we set fifo_wtmk -1 to register.

 Number of channels */

	/*

	 * Context Input Floating Point Format

	 * 0 - Integer Format

	 * 1 - Single Precision FP Format

 Get the data width */

	/*

	 * Data Endianness

	 * 0 - Little-Endian

	 * 1 - Big-Endian

	/*

	 * Input Data sign

	 * 0b - Signed Format

	 * 1b - Unsigned Format

 Get the bitfield values for input data format */

 In Sample Position */

 Get the bitfield values for input data format */

 Out Sample Position */

/*

 * The ASRC provides interleaving support in hardware to ensure that a

 * variety of sample sources can be internally combined

 * to conform with this format. Interleaving parameters are accessed

 * through the ASRC_CTRL_IN_ACCESSa and ASRC_CTRL_OUT_ACCESSa registers

 input interleaving parameters */

 output interleaving parameters */

/*

 * Request one of the available contexts

 *

 * Returns a negative number on error and >=0 as context id

 * on success

/*

 * Release the context

 *

 * This funciton is mainly doing the revert thing in request context

/*

 * Start the context

 *

 * Enable the DMA request and context

/*

 * Stop the context

 *

 * Disable the DMA request and context

 Read FIFO, drop the data */

 Check RUN_STOP_DONE */

Clear RUN_STOP_DONE*/

 Example of dma name: ctx0_rx */

	/*

	 * Set the input and output ratio so we can compute

	 * the resampling ratio in RS_LOW/HIGH

	/*

	 * Do only rate conversion and keep the same format for input

	 * and output data

 Set default value */

	/*

	 * Write Resampling Coefficients

	 * The coefficient RAM must be configured prior to beginning of

	 * any context processing within the ASRC

 SPDX-License-Identifier: GPL-2.0+

 Copyright 2020 NXP

 DMA request when number of entries < WTMK_LOW */

 Disable interrupts*/

 Configure watermark */

 SPDX-License-Identifier: GPL-2.0

 Copyright 2019 NXP

 min=0x18, max=0x38 */

 signed int, 2's compl., min=0x3FFF0000, max=0x00010000 */

 unsigned int */

 Fout = Fref*(MFI + MFN/MFD), Fref is 24MHz */

 1.3 GHz */

 8000 Hz */

 11025 Hz */

 700 MHz */

/*

 * HDMI2.1 spec defines 6- and 12-channels layout for one bit audio

 * stream. Todo: to check how this case can be considered below

 Capabilities data structure, bytes */

 nothing to do */

 Allow playback for SPDIF only */

* phy: true => phy, false => pll */

 Release AI interface from reset */

 PLL: BANDGAP_SET: EN_VBG (enable bandgap) */

 PLL: CTRL0: DIV_INTEGER */

 PLL: NUMERATOR: MFN */

 PLL: DENOMINATOR: MFD */

 PLL: CTRL0_SET: HOLD_RING_OFF, POWER_UP */

 PLL: CTRL0: Clear Hold Ring Off */

 TX is enabled for SPDIF only */

 PLL: POSTDIV: PDIV0 */

 PLL: CTRL_SET: CLKMUX0_EN */

 eARC RX */

 PLL: POSTDIV: PDIV1 */

 PLL: CTRL_SET: CLKMUX1_EN */

 SPDIF / ARC RX */

 PLL: POSTDIV: PDIV2 */

 PLL: CTRL_SET: CLKMUX2_EN */

 eARC mode */

 PHY: CTRL_SET: TX_DIFF_OE, PHY_EN */

 PHY: CTRL2_SET: EARC_TX_MODE */

 SPDIF / ARC RX mode */

 PHY: CTRL_SET: SPDIF_EN */

 PHY: CTRL_SET: ARC RX setup */

 Release AI interface from reset */

 eARC mode */

 PHY: CTRL_SET: TX_DIFF_OE, PHY_EN */

 PHY: CTRL2_SET: EARC_TX_MODE */

 SPDIF mode */

 PHY: CTRL_SET: TX_CLK_AUD_SS | SPDIF_EN */

			/**

			 * set SPDIF MODE - this flag is used to gate

			 * SPDIF output, useless for SPDIF RX

			/**

			 * Clear RX FIFO, flip RX FIFO bits,

			 * disable eARC related HW mode detects

* Clear RX FIFO, flip RX FIFO bits */

* Enable eARC related HW mode detects */

 clear CMDC RESET */

 set TX_RX_MODE */

 set DPATH RESET */

 Disable XCVR controls if there is stream started */

 Enable XCVR controls if there is no stream started */

 clear SPDIF MODE */

 set CMDC RESET */

 set isr_cmdc_tx_en, w1c */

 enable DMA RD/WR */

 clear DPATH RESET */

 disable DMA RD/WR */

 clear ISR_CMDC_TX_EN, W1C */

 RAM is 20KiB = 16KiB code + 4KiB data => max 10 pages 2KiB each */

 IPG clock is assumed to be running, otherwise it will hang */

 write firmware into code memory */

 last part of firmware written */

 clean remaining part of code memory page */

 clean current page, including data memory */

 configure watermarks */

 disable DMA RD/WR */

 Data RAM is 4KiB, last two pages: 8 and 9. Select page 8. */

 Store Capabilities Data Structure into Data RAM */

 Channel status controller */

 Capture channel status, bytes */

 Channel status controller */

 Playback channel status, bytes */

 Data RAM is 4KiB, last two pages: 8 and 9. Select page 8. */

 Find updated CS buffer */

 copy CS buffer */

 clear CS control register */

 sentinel */ }

 get IRQs */

	/*

	 * Register platform component before registering cpu dai for there

	 * is not defer probe for platform component in snd_soc_add_pcm_runtime().

	/*

	 * Clear interrupts, when streams starts or resumes after

	 * suspend, interrupts are enabled in prepare(), so no need

	 * to enable interrupts in resume().

 Assert M0+ reset */

 Release M0+ reset */

 Let M0+ core complete firmware initialization */

 SPDX-License-Identifier: GPL-2.0



 Freescale MPC8610HPCD ALSA SoC Machine driver



 Author: Timur Tabi <timur@freescale.com>



 Copyright 2007-2010 Freescale Semiconductor, Inc.

 There's only one global utilities register */

/**

 * mpc8610_hpcd_data: machine-specific ASoC device data

 *

 * This structure contains data for a single sound platform device on an

 * MPC8610 HPCD.  Some of the data is taken from the device tree.

 0 = SSI1, 1 = SSI2, etc */

 0 = DMA1, 1 = DMA2, etc */

 0 = ch 0, 1 = ch 1, etc*/

 One for each DMA channel */

/**

 * mpc8610_hpcd_machine_probe: initialize the board

 *

 * This function is used to initialize the board-specific hardware.

 *

 * Here we program the DMACR and PMUXCR registers.

 Program the signal routing between the SSI and the DMA */

/**

 * mpc8610_hpcd_startup: program the board with various hardware parameters

 *

 * This function takes board-specific information, like clock frequencies

 * and serial data formats, and passes that information to the codec and

 * transport drivers.

 Tell the codec driver what the serial protocol is. */

	/*

	 * Tell the codec driver what the MCLK frequency is, and whether it's

	 * a slave or master.

/**

 * mpc8610_hpcd_machine_remove: Remove the sound device

 *

 * This function is called to remove the sound device for one SSI.  We

 * de-program the DMACR and PMUXCR register.

 Restore the signal routing */

/**

 * mpc8610_hpcd_ops: ASoC machine driver operations

/**

 * mpc8610_hpcd_probe: platform probe function for the machine driver

 *

 * Although this is a machine driver, the SSI node is the "master" node with

 * respect to audio hardware connections.  Therefore, we create a new ASoC

 * device for each new SSI node that has a codec attached.

 ssi_pdev is the platform device for the SSI node that probed us */

 Find the codec node for this SSI. */

 ASoC core can match codec with device node */

 The DAI name from the codec (snd_soc_dai_driver.name) */

	/* We register two DAIs per SSI, one for playback and the other for

	 * capture.  Currently, we only support codecs that have one DAI for

	 * both playback and capture.

 Get the device ID */

 Get the serial format and clock direction. */

		/* In i2s-slave mode, the codec has its own clock source, so we

		 * need to get the frequency from the device tree and pass it to

		 * the codec driver.

 Find the playback DMA channel to use. */

 Find the capture DMA channel to use. */

 Initialize our DAI data structure.  */

 The platform driver name */

 Register with ASoC */

/**

 * mpc8610_hpcd_remove: remove the platform device

 *

 * This function is called when the platform device is removed.

		/* The name must match 'compatible' property in the device tree,

		 * in lowercase letters.

/**

 * mpc8610_hpcd_init: machine driver initialization.

 *

 * This function is called when this module is loaded.

 Get the physical address of the global utilities registers */

/**

 * mpc8610_hpcd_exit: machine driver exit

 *

 * This function is called when this driver is unloaded.

 SPDX-License-Identifier: GPL-2.0



 Freescale ASRC ALSA SoC Platform (DMA) driver



 Copyright (C) 2014 Freescale Semiconductor, Inc.



 Author: Nicolin Chen <nicoleotsuka@gmail.com>

 Limited by SDMA engine */

 Prepare and submit Front-End DMA channel */

 Prepare and submit Back-End DMA channel */

 Fetch the Back-End dma_data from DPCM */

 Override dma_data of the Front-End and config its dmaengine */

 Request and config DMA channel for Back-End */

	/*

	 * The Back-End device might have already requested a DMA channel,

	 * so try to reuse it first, and then request a new one upon NULL.

	/*

	 * An EDMA DEV_TO_DEV channel is fixed and bound with DMA event of each

	 * peripheral, unlike SDMA channel that is allocated dynamically. So no

	 * need to configure dma_request and dma_request2, but get dma_chan of

	 * Back-End device directly via dma_request_slave_channel.

 Get DMA request of Back-End */

 Get DMA request of Front-End */

 Do not flag to release if we are reusing the Back-End one */

 release dev_to_dev chan if we aren't reusing the Back-End one */

	/* Request a dummy pair, which will be released later.

	 * Request pair function needs channel num as input, for this

	 * dummy pair, we just request "1" channel temporarily.

 Request a dummy dma channel, which will be released later. */

 Refine the snd_imx_hardware according to caps of DMA. */

 SPDX-License-Identifier: GPL-2.0-only



 Freescale MPC5200 PSC DMA

 ALSA SoC Platform driver



 Copyright (C) 2008 Secret Lab Technologies Ltd.

 Copyright (C) 2009 Jon Smirl, Digispeaker

/*

 * Interrupt handlers

 Playback underrun error */

 Capture overrun error */

/**

 * psc_dma_bcom_enqueue_next_buffer - Enqueue another audio buffer

 * @s: pointer to stream private data structure

 *

 * Enqueues another audio period buffer into the bestcomm queue.

 *

 * Note: The routine must only be called when there is space available in

 * the queue.  Otherwise the enqueue will fail and the audio ring buffer

 * will get out of sync

 Prepare and enqueue the next buffer descriptor */

 Update for next period */

 Bestcomm DMA irq handler */

	/* For each finished period, dequeue the completed period buffer

	/* If the stream is active, then also inform the PCM middle layer

/**

 * psc_dma_trigger: start and stop the DMA transfer.

 *

 * This function is called by ALSA to start, stop, pause, and resume the DMA

 * transfer of data.

		/* Fill up the bestcomm bd queue and enable DMA.

		 * This will begin filling the PSC's fifo.

 Update interrupt enable settings */

/* ---------------------------------------------------------------------

 * The PSC DMA 'ASoC platform' driver

 *

 * Can be referenced by an 'ASoC machine' driver

 * This driver only deals with the audio bus; it doesn't have any

 * interaction with the attached codec

 Disable all interrupts and reset the PSC */

 reset error */

 Fetch the registers and IRQ of the PSC */

 Allocate and initialize the driver private data */

 Get the PSC ID */

	/* Find the address of the fifo data registers and setup the

 Disable all interrupts and reset the PSC */

 reset receiver */

 reset transmitter */

 reset error */

 reset mode */

	/* Set up mode register;

	 * First write: RxRdy (FIFO Alarm) generates rx FIFO irq

	 * Second write: register Normal mode for non loopback

 Set the TX and RX fifo alarm thresholds */

 Lookup the IRQ numbers */

 Save what we've done so it can be found again later */

 Tell the ASoC OF helpers about it */

 Release irqs */

 SPDX-License-Identifier: GPL-2.0+

 Copyright 2017-2021 NXP

 No receive msg for TYPE_C command */

 wait response from rpmsg */

	/*

	 * Reset the buffer pointer to be zero, actully we have

	 * set the buffer pointer to be zero in imx_rpmsg_terminate_all

	 * But if there is timer task queued in queue, after it is

	 * executed the buffer pointer will be changed, so need to

	 * reset it again with TERMINATE command.

	/*

	 * Queue the work to workqueue.

	 * If the queue is full, drop the message.

 reinitialize buffer counter*/

 reinitialize buffer counter*/

 Create timer*/

 Flush work in workqueue to make TX_CLOSE is the last message */

	/*

	 * NON-MMAP mode, NONBLOCK, Version 2, enable lpa in dts

	 * four conditions to determine the lpa is enabled.

		/*

		 * Ignore suspend operation in low power mode

		 * M core will continue playback music on A core suspend.

 Send buffer address and buffer size */

 Clear buffer count*/

 Clear buffer count*/

/*

 * imx_rpmsg_pcm_ack

 *

 * Send the period index to M core through rpmsg, but not send

 * all the period index to M core, reduce some unnessesary msg

 * to reduce the pressure of rpmsg bandwidth.

 There is update for period index */

 The notification message is updated to latest */

		/*

		 * If the data in the buffer is less than one period before

		 * this fill, which means the data may not enough on M

		 * core side, we need to send message immediately to let

		 * M core know the pointer is updated.

		 * if there is more than one period data in the buffer before

		 * this fill, which means the data is enough on M core side,

		 * we can delay one period (using timer) to send the message

		 * for reduce the message number in workqueue, because the

		 * pointer may be updated by ack function later, we can

		 * send latest pointer to M core side.

	/*

	 * Every work in the work queue, first we check if there

	 * is update for period is filled, because there may be not

	 * enough data in M core side, need to let M core know

	 * data is updated immediately.

 Skip the notification message for it has been processed above */

 update read index */

 Setup work queue */

 Write index initialize 1, make it differ with the read index */

 Initialize msg */

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0+



 eukrea-tlv320.c  --  SoC audio for eukrea_cpuimxXX in I2S mode



 Copyright 2010 Eric Bénard, Eukréa Electromatique <eric@eukrea.com>



 based on sound/soc/s3c24xx/s3c24xx_simtec_tlv320aic23.c

 which is Copyright 2009 Simtec Electronics

 and on sound/soc/imx/phycore-ac97.c which is

 Copyright 2009 Sascha Hauer, Pengutronix <s.hauer@pengutronix.de>

 fsl_ssi lacks the set_sysclk ops */

		/*

		 * The port numbering in the hardware manual starts at 1, while

		 * the audmux API expects it starts at 0.

			/* The eukrea,asoc-tlv320 driver was explicitly

			 * requested (through the device tree).

			/* Return happy.

			 * We might run on a totally different machine.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0



 ALSA SoC IMX MQS driver



 Copyright (C) 2014-2015 Freescale Semiconductor, Inc.

 Copyright 2019 NXP

 codec private data */

	/*

	 * mclk_rate / (oversample(32,64) * FS * 2 * divider ) = repeat_rate;

	 * if repeat_rate is 8, mqs can achieve better quality.

	 * oversample rate is fix to 32 currently.

 Only LEFT_J & SLAVE mode is supported. */

	/* On i.MX6sx the MQS control register is in GPR domain

	 * But in i.MX8QM/i.MX8QXP the control register is moved

	 * to its own domain.

 SPDX-License-Identifier: GPL-2.0



 Freescale S/PDIF ALSA SoC Digital Audio Interface (DAI) driver



 Copyright (C) 2013 Freescale Semiconductor, Inc.



 Based on stmp3xxx_spdif_dai.c

 Vladimir Barinov <vbarinov@embeddedalley.com>

 Copyright 2008 SigmaTel, Inc

 Copyright 2008 Embedded Alley Solutions, Inc

 Index list for the values that has if (DPLL Locked) condition */

/**

 * struct fsl_spdif_soc_data: soc specific data

 *

 * @imx: for imx platform

 * @shared_root_clock: flag of sharing a clock source with others;

 *                     so the driver shouldn't set root clock rate

 * @raw_capture_mode: if raw capture mode support

 * @interrupts: interrupt number

 * @tx_burst: tx maxburst size

 * @rx_burst: rx maxburst size

 * @tx_formats: tx supported data format

/*

 * SPDIF control structure

 * Defines channel status, subcode and Q sub

 spinlock to access control data */

 IEC958 channel tx status bit */

 User bits */

 Q subcode part of user bits */

 Buffer offset for U/Q */

 Ready buffer index of the two buffers */

/**

 * struct fsl_spdif_priv - Freescale SPDIF private data

 * @soc: SPDIF soc data

 * @fsl_spdif_control: SPDIF control data

 * @cpu_dai_drv: cpu dai driver

 * @pdev: platform device pointer

 * @regmap: regmap handler

 * @dpll_locked: dpll lock flag

 * @txrate: the best rates for playback

 * @txclk_df: STC_TXCLK_DF dividers value for playback

 * @sysclk_df: STC_SYSCLK_DF dividers value for playback

 * @txclk_src: STC_TXCLK_SRC values for playback

 * @rxclk_src: SRPC_CLKSRC_SEL values for capture

 * @txclk: tx clock sources for playback

 * @rxclk: rx clock sources for capture

 * @coreclk: core clock for register access via DMA

 * @sysclk: system clock for rx clock rate measurement

 * @spbaclk: SPBA clock (optional, depending on SoC design)

 * @dma_params_tx: DMA parameters for transmit channel

 * @dma_params_rx: DMA parameters for receive channel

 * @regcache_srpc: regcache for SRPC

 * @bypass: status of bypass input to output

 regcache for SRPC */

 Applied for EDMA */

 Applied for EDMA */

 Applied for EDMA */

 Applied for EDMA */

 Applied for EDMA */

 Applied for EDMA */

 Check if clk is a root clock that does not share clock source with others */

 DPLL locked and lock loss interrupt handler */

 Receiver found illegal symbol interrupt handler */

 Clear illegal symbol if DPLL unlocked since no audio stream */

 U/Q Channel receive register full */

 U/Q Channel sync found */

 U/Q buffer reset */

 Set ready to this buffer */

 U/Q Channel framing error */

 Read U/Q data to clear the irq and do buffer reset */

 Drop this U/Q buffer */

 Get spdif interrupt status and clear the interrupt */

 FIXME: Write Tx FIFO to clear TxEm */

 FIXME: Read Rx FIFO to clear RxFIFOFul */

	/*

	 * RESET bit would be cleared after finishing its reset procedure,

	 * which typically lasts 8 cycles. 1000 cycles will keep it safe.

 Set SPDIF PhaseConfig register for rx clock */

 The S/PDIF block needs a clock of 64 * fs * txclk_df */

 set fs field in consumer channel status */

 select clock source and divisor */

 Reset module and interrupts only for first initialization */

 Disable all the interrupts */

 Power up SPDIF module */

 Power down SPDIF module only if tx&rx are both inactive */

 Setup rx clock source */

/*

 * FSL SPDIF IEC958 controller(mixer) functions

 *

 *	Channel status get/put control

 *	User bit value get/put control

 *	Valid bit value get control

 *	DPLL lock status get control

 *	User bit sync mode selection control

 Get channel status from SPDIF_RX_CCHAN register */

 Clear intr */

/*

 * Get User bits (subcode) from chip value which readed out

 * in UChannel register.

 Q-subcode information. The byte size is SPDIF_UBITS_SIZE/8 */

 Get Q subcode from chip value which readed out in QChannel register */

 Get valid good bit from interrupt status register */

 nothing to do */

 Disable interrupts */

 Configure BYPASS mode */

 Power up SPDIF module */

 Power down SPDIF module, disable TX */

 Disable playback & capture if BYPASS mode is enabled, enable otherwise */

 DPLL lock information */

 Get RX data clock rate given the SPDIF bus_clk */

 Get bus clock from system */

 FreqMeas_CLK = (BUS_CLK * FreqMeas) / 2 ^ 10 / GAINSEL / 128 */

/*

 * Get DPLL lock or not info from stable interrupt status register.

 * User application must use this control to get locked,

 * then can do next PCM operation

/*

 * User bit sync mode:

 * 1 CD User channel subcode

 * 0 Non-CD data

/*

 * User bit sync mode:

 * 1 CD User channel subcode

 * 0 Non-CD data

 FSL SPDIF IEC958 controller defines */

 Status cchanel controller */

 User bits controller */

 Valid bit error controller */

 DPLL lock info get controller */

 RX bypass controller */

 User bit sync mode set/get controller */

Clear the val bit for Tx*/

 FSL SPDIF REGMAP */

 The sysclk has an extra divisor [2, 512] */

 We are lucky */

 A little bigger than expect */

 A little smaller than expect */

 To quick catch a divisor, we allow a 0.1% deviation */

 Initialize this copy of the CPU DAI driver structure */

 Get the addresses and IRQ */

 Get system clock for rx clock rate calculation */

 Get core clock for data register access via DMA */

 Select clock source for rx/tx clock */

 Initial spinlock for control data */

 Init tx channel status default value */

 Register with ASoC */

	/*

	 * Register platform component before registering cpu dai for there

	 * is not defer probe for platform component in snd_soc_add_pcm_runtime().

 Disable all the interrupts */

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0



 Freescale SSI ALSA SoC Digital Audio Interface (DAI) driver



 Author: Timur Tabi <timur@freescale.com>



 Copyright 2007-2010 Freescale Semiconductor, Inc.



 Some notes why imx-pcm-fiq is used instead of DMA on some boards:



 The i.MX SSI core has some nasty limitations in AC97 mode. While most

 sane processor vendors have a FIFO per AC97 slot, the i.MX has only

 one FIFO which combines all valid receive slots. We cannot even select

 which slots we want to receive. The WM9712 with which this driver

 was developed with always sends GPIO status data in slot 12 which

 we receive in our (PCM-) data stream. The only chance we have is to

 manually skip this data in the FIQ handler. With sampling rates different

 from 48000Hz not every frame has valid receive data, so the ratio

 between pcm data and GPIO status data changes. Our FIQ handler is not

 able to handle this, hence this driver only works with 48000Hz sampling

 rate.

 Reading and writing AC97 registers is another challenge. The core

 provides us status bits when the read register is updated with *another*

 value. When we read the same register two times (and the register still

 contains the same value) these status bits are not set. We work

 around this by not polling these bits but only wait a fixed delay.

 Define RX and TX to index ssi->regvals array; Can be 0 or 1 only */

/**

 * FSLSSI_I2S_FORMATS: audio formats supported by the SSI

 *

 * The SSI has a limitation in that the samples must be in the same byte

 * order as the host CPU.  This is because when multiple bytes are written

 * to the STX register, the bytes and bits must be written in the same

 * order.  The STX is a shift register, so all the bits need to be aligned

 * (bit-endianness must match byte-endianness).  Processors typically write

 * the bits within a byte in the same order that the bytes of a word are

 * written in.  So if the host CPU is big-endian, then only big-endian

 * samples will be written to STX properly.

/*

 * In AC97 mode, TXDIR bit is forced to 0 and TFDIR bit is forced to 1:

 *  - SSI inputs external bit clock and outputs frame sync clock -- CBM_CFS

 *  - Also have NB_NF to mark these two clocks will not be inverted

 imx21-class SSI - no SACC{ST,EN,DIS} regs */

/**

 * struct fsl_ssi - per-SSI private data

 * @regs: Pointer to the regmap registers

 * @irq: IRQ of this SSI

 * @cpu_dai_drv: CPU DAI driver for this device

 * @dai_fmt: DAI configuration this device is currently used with

 * @streams: Mask of current active streams: BIT(TX) and BIT(RX)

 * @i2s_net: I2S and Network mode configurations of SCR register

 *           (this is the initial settings based on the DAI format)

 * @synchronous: Use synchronous mode - both of TX and RX use STCK and SFCK

 * @use_dma: DMA is used or FIQ with stream filter

 * @use_dual_fifo: DMA with support for dual FIFO mode

 * @has_ipg_clk_name: If "ipg" is in the clock name list of device tree

 * @fifo_depth: Depth of the SSI FIFOs

 * @slot_width: Width of each DAI slot

 * @slots: Number of slots

 * @regvals: Specific RX/TX register settings

 * @clk: Clock source to access register

 * @baudclk: Clock source to generate bit and frame-sync clocks

 * @baudclk_streams: Active streams that are using baudclk

 * @regcache_sfcsr: Cache sfcsr register value during suspend and resume

 * @regcache_sacnt: Cache sacnt register value during suspend and resume

 * @dma_params_tx: DMA transmit parameters

 * @dma_params_rx: DMA receive parameters

 * @ssi_phys: physical address of the SSI registers

 * @fiq_params: FIQ stream filtering parameters

 * @card_pdev: Platform_device pointer to register a sound card for PowerPC or

 *             to register a CODEC platform device for AC97

 * @card_name: Platform_device name to register a sound card for PowerPC or

 *             to register a CODEC platform device for AC97

 * @card_idx: The index of SSI to register a sound card for PowerPC or

 *            to register a CODEC platform device for AC97

 * @dbg_stats: Debugging statistics

 * @soc: SoC specific data

 * @dev: Pointer to &pdev->dev

 * @fifo_watermark: The FIFO watermark setting. Notifies DMA when there are

 *                  @fifo_watermark or fewer words in TX fifo or

 *                  @fifo_watermark or more empty words in RX fifo.

 * @dma_maxburst: Max number of words to transfer in one go. So far,

 *                this is always the same as fifo_watermark.

 * @ac97_reg_lock: Mutex lock to serialize AC97 register access operations

/*

 * SoC specific data

 *

 * Notes:

 * 1) SSI in earlier SoCS has critical bits in control registers that

 *    cannot be changed after SSI starts running -- a software reset

 *    (set SSIEN to 0) is required to change their values. So adding

 *    an offline_config flag for these SoCs.

 * 2) SDMA is available since imx35. However, imx35 does not support

 *    DMA bits changing when SSI is running, so set offline_config.

 * 3) imx51 and later versions support register configurations when

 *    SSI is running (SSIEN); For these versions, DMA needs to be

 *    configured before SSI sends DMA request to avoid an undefined

 *    DMA request on the SDMA side.

/**

 * fsl_ssi_isr - Interrupt handler to gather states

 * @irq: irq number

 * @dev_id: context

 Clear the bits that we set */

/**

 * fsl_ssi_config_enable - Set SCR, SIER, STCR and SRCR registers with

 * cached values in regvals

 * @ssi: SSI context

 * @tx: direction

 *

 * Notes:

 * 1) For offline_config SoCs, enable all necessary bits of both streams

 *    when 1st stream starts, even if the opposite stream will not start

 * 2) It also clears FIFO before setting regvals; SOR is safe to set online

 Clear dirty data in the FIFO; It also prevents channel slipping */

	/*

	 * On offline_config SoCs, SxCR and SIER are already configured when

	 * the previous stream started. So skip all SxCR and SIER settings

	 * to prevent online reconfigurations, then jump to set SCR directly

		/*

		 * Online reconfiguration not supported, so enable all bits for

		 * both streams at once to avoid necessity of reconfigurations

 Otherwise, only set bits for the current stream */

 Configure SRCR, STCR and SIER at once */

	/*

	 * Start DMA before setting TE to avoid FIFO underrun

	 * which may cause a channel slip or a channel swap

	 *

	 * TODO: FIQ cases might also need this upon testing

 Enable SSI first to send TX DMA request */

 Busy wait until TX FIFO not empty -- DMA working */

 FIFO still empty -- something might be wrong */

 Enable all remaining bits in SCR */

 Log the enabled stream to the mask */

/*

 * Exclude bits that are used by the opposite stream

 *

 * When both streams are active, disabling some bits for the current stream

 * might break the other stream if these bits are used by it.

 *

 * @vals : regvals of the current stream

 * @avals: regvals of the opposite stream

 * @aactive: active state of the opposite stream

 *

 *  1) XOR vals and avals to get the differences if the other stream is active;

 *     Otherwise, return current vals if the other stream is not active

 *  2) AND the result of 1) with the current vals

/**

 * fsl_ssi_config_disable - Unset SCR, SIER, STCR and SRCR registers

 * with cached values in regvals

 * @ssi: SSI context

 * @tx: direction

 *

 * Notes:

 * 1) For offline_config SoCs, to avoid online reconfigurations, disable all

 *    bits of both streams at once when the last stream is abort to end

 * 2) It also clears FIFO after unsetting regvals; SOR is safe to set online

 Check if the opposite stream is active */

 Get regvals of the opposite stream to keep opposite stream safe */

	/*

	 * To keep the other stream safe, exclude shared bits between

	 * both streams, and get safe bits to disable current stream

 Disable safe bits of SCR register for the current stream */

 Log the disabled stream to the mask */

	/*

	 * On offline_config SoCs, if the other stream is active, skip

	 * SxCR and SIER settings to prevent online reconfigurations

 Now there is only current stream active, disable all bits */

		/*

		 * To keep the other stream safe, exclude shared bits between

		 * both streams, and get safe bits to disable current stream

 Clear configurations of SRCR, STCR and SIER at once */

 Clear remaining data in the FIFO */

 no SACC{ST,EN,DIS} regs on imx21-class SSI */

 Disable all channel slots */

 Enable slots 3 & 4 -- PCM Playback Left & Right channels */

/**

 * fsl_ssi_setup_regvals - Cache critical bits of SIER, SRCR, STCR and

 * SCR to later set them safely

 * @ssi: SSI context

 AC97 has already enabled SSIEN, RE and TE, so ignore them */

 Setup the clock control register */

 Enable AC97 mode and startup the SSI */

 AC97 has to communicate with codec before starting a stream */

	/*

	 * When using dual fifo mode, it is safer to ensure an even period

	 * size. If appearing to an odd number while DMA always starts its

	 * task from fifo0, fifo1 would be neglected at the end of each

	 * period. But SSI would still access fifo1 with an invalid data.

/**

 * fsl_ssi_set_bclk - Configure Digital Audio Interface bit clock

 * @substream: ASoC substream

 * @dai: pointer to DAI

 * @hw_params: pointers to hw_params

 *

 * Notes: This function can be only called when using SSI as DAI master

 *

 * Quick instruction for parameters:

 * freq: Output BCLK frequency = samplerate * slots * slot_width

 *       (In 2-channel I2S Master mode, slot_width is fixed 32)

 Override slots and slot_width if being specifically set... */

 ...but force 32 bits for stereo audio using I2S Master Mode */

 Generate bit clock based on the slot number and slot width */

 Don't apply it to any non-baudclk circumstance */

	/*

	 * Hardware limitation: The bclk rate must be

	 * never greater than 1/5 IPG clock rate

 It should be already enough to divide clock by setting pm alone */

 Calculate the fraction */

 We are lucky */

 No proper pm found if it is still remaining the initial value */

 STCCR is used for RX in synchronous mode */

/**

 * fsl_ssi_hw_params - Configure SSI based on PCM hardware parameters

 * @substream: ASoC substream

 * @hw_params: pointers to hw_params

 * @dai: pointer to DAI

 *

 * Notes:

 * 1) SxCCR.WL bits are critical bits that require SSI to be temporarily

 *    disabled on offline_config SoCs. Even for online configurable SoCs

 *    running in synchronous mode (both TX and RX use STCCR), it is not

 *    safe to re-configure them when both two streams start running.

 * 2) SxCCR.PM, SxCCR.DIV2 and SxCCR.PSR bits will be configured in the

 *    fsl_ssi_set_bclk() if SSI is the DAI clock master.

 Do not enable the clock if it is already enabled */

	/*

	 * SSI is properly configured if it is enabled and running in

	 * the synchronous mode; Note that AC97 mode is an exception

	 * that should set separate configurations for STCCR and SRCCR

	 * despite running in the synchronous mode.

		/*

		 * Keep the ssi->i2s_net intact while having a local variable

		 * to override settings for special use cases. Otherwise, the

		 * ssi->i2s_net will lose the settings for regular use cases.

 Normal + Network mode to send 16-bit data in 32-bit frames */

 Use Normal mode to send mono data at 1st slot of 2 slots */

 In synchronous mode, the SSI uses STCCR for capture */

 Synchronize frame sync clock for TE to avoid data slipping */

 Set to default shifting settings: LSB_ALIGNED */

 Use Network mode as default */

 Data on rising edge of bclk, frame low, 1clk before data */

 Data on rising edge of bclk, frame high */

 Data on rising edge of bclk, frame high, 1clk before data */

 Data on rising edge of bclk, frame high */

 Data on falling edge of bclk, frame high, 1clk before data */

 DAI clock inversion */

 Nothing to do for both normal cases */

 Invert bit clock */

 Invert frame clock */

 Invert both clocks */

 DAI clock provider masks */

 Output bit and frame sync clocks */

 Input bit or frame sync clocks */

 Input bit clock but output frame sync clock */

 Set SYN mode and clear RXDIR bit when using SYN or AC97 mode */

/**

 * fsl_ssi_set_dai_fmt - Configure Digital Audio Interface (DAI) Format

 * @dai: pointer to DAI

 * @fmt: format mask

 AC97 configured DAIFMT earlier in the probe() */

/**

 * fsl_ssi_set_dai_tdm_slot - Set TDM slot number and slot width

 * @dai: pointer to DAI

 * @tx_mask: mask for TX

 * @rx_mask: mask for RX

 * @slots: number of slots

 * @slot_width: number of bits per slot

 The word length should be 8, 10, 12, 16, 18, 20, 22 or 24 */

 The slot number should be >= 2 if using Network mode or I2S mode */

 Save the SCR register value */

 Temporarily enable SSI to allow SxMSKs to be configurable */

 Restore the value of SSIEN bit */

/**

 * fsl_ssi_trigger - Start or stop SSI and corresponding DMA transaction.

 * @substream: ASoC substream

 * @cmd: trigger command

 * @dai: pointer to DAI

 *

 * The DMA channel is in external master start and pause mode, which

 * means the SSI completely controls the flow of data.

		/*

		 * SACCST might be modified via AC Link by a CODEC if it sends

		 * extra bits in their SLOTREQ requests, which'll accidentally

		 * send valid data to slots other than normal playback slots.

		 *

		 * To be safe, configure SACCST right before TX starts.

 16-bit capture is broken (errata ERR003778) */

/**

 * fsl_ssi_hw_init - Initialize SSI registers

 * @ssi: SSI context

 Initialize regvals */

 Set watermarks */

 Enable Dual FIFO mode */

 AC97 should start earlier to communicate with CODECs */

/**

 * fsl_ssi_hw_clean - Clear SSI registers

 * @ssi: SSI context

 Disable registers for AC97 */

 Disable TE and RE bits first */

 Disable AC97 mode */

 Unset WAIT bits */

 Disable SSI -- software reset */

/*

 * Make every character in a string lower-case

 Backward compatible for a DT without ipg clock name assigned */

 Enable the clock since regmap will not handle it in this case */

 Do not error out for consumer cases that live without a baud clock */

 Use even numbers to avoid channel swap due to SDMA script design */

		/*

		 * Some boards use an incompatible codec. Use imx-fiq-pcm-audio

		 * to get it working, as DMA is not possible in this situation.

 Get error code if not found */

 Check if being used in AC97 mode */

		/*

		 * In synchronous mode, STCK and STFS ports are used by RX

		 * as well. So the software should limit the sample rates,

		 * sample bits and channels to be symmetric.

		 *

		 * This is exclusive with FSLSSI_AC97_FORMATS as AC97 runs

		 * in the SSI synchronous mode however it does not have to

		 * limit symmetric sample rates and sample bits.

 Select DMA or FIQ */

 Fetch FIFO depth; Set to 8 for older DT without this property */

 Use dual FIFO mode depending on the support from SDMA script */

	/*

	 * Backward compatible for older bindings by manually triggering the

	 * machine driver's probe(). Use /compatible property, including the

	 * address of CPU DAI driver structure, as the name of machine driver

	 *

	 * If card_name is set by AC97 earlier, bypass here since it uses a

	 * different name to register the device.

 Strip "fsl," in the compatible name if applicable */

 Probe from DT */

 No SACC{ST,EN,DIS} regs in imx21-class SSI */

 Set software limitations for synchronous mode except AC97 */

	/*

	 * Configure TX and RX DMA watermarks -- when to send a DMA request

	 *

	 * Values should be tested to avoid FIFO under/over run. Set maxburst

	 * to fifo_watermark to maxiumize DMA transaction to reduce overhead.

		/*

		 * Set to 8 as a balanced configuration -- When TX FIFO has 8

		 * empty slots, send a DMA request to fill these 8 slots. The

		 * remaining 7 slots should be able to allow DMA to finish the

		 * transaction before TX FIFO underruns; Same applies to RX.

		 *

		 * Tested with cases running at 48kHz @ 16 bits x 16 channels

 Safely use old watermark configurations for older chips */

 Initially configures SSI registers */

 Register a platform device for older bindings or AC97 */

		/*

		 * Do not set SSI dev as the parent of AC97 CODEC device since

		 * it does not have a DT node. Otherwise ASoC core will assume

		 * CODEC has the same DT node as the SSI, so it may bypass the

		 * dai_probe() of SSI and then cause NULL DMA data pointers.

 Clean up SSI registers */

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0+



 Freescale ALSA SoC Digital Audio Interface (SAI) driver.



 Copyright 2012-2015 Freescale Semiconductor, Inc.

/**

 * fsl_sai_dir_is_synced - Check if stream is synced by the opposite stream

 *

 * SAI supports synchronous mode using bit/frame clocks of either Transmitter's

 * or Receiver's for both streams. This function is used to check if clocks of

 * the stream's are synced by the opposite stream.

 *

 * @sai: SAI context

 * @dir: stream direction

 current dir in async mode while opposite dir in sync mode */

	/*

	 * Both IRQ status bits and IRQ mask bits are in the xCSR but

	 * different shifts. And we here create a mask only for those

	 * IRQs that we activated.

 Tx IRQ */

 FIFO reset for safety */

 Rx IRQ */

 FIFO reset for safety */

 DAI mode */

		/*

		 * Frame low, 1clk before data, one word length for frame sync,

		 * frame sync starts one serial clock cycle earlier,

		 * that is, together with the last bit of the previous

		 * data word.

		/*

		 * Frame high, one word length for frame sync,

		 * frame sync asserts with the first bit of the frame.

		/*

		 * Frame high, 1clk before data, one bit for frame sync,

		 * frame sync starts one serial clock cycle earlier,

		 * that is, together with the last bit of the previous

		 * data word.

		/*

		 * Frame high, one bit for frame sync,

		 * frame sync asserts with the first bit of the frame.

 To be done */

 DAI clock inversion */

 Invert both clocks */

 Invert bit clock */

 Invert frame clock */

 Nothing to do for both normal cases */

 DAI clock provider masks */

 Don't apply to consumer mode */

	/*

	 * There is no point in polling MCLK0 if it is identical to MCLK1.

	 * And given that MQS use case has to use MCLK1 though two clocks

	 * are the same, we simply skip MCLK0 and start to find from MCLK1.

		/*

		 * Drop the source that can not be

		 * divided into the required rate.

	/*

	 * 1) For Asynchronous mode, we must set RCR2 register for capture, and

	 *    set TCR2 register for playback.

	 * 2) For Tx sync with Rx clock, we must set RCR2 register for playback

	 *    and capture.

	 * 3) For Rx sync with Tx clock, we must set TCR2 register for playback

	 *    and capture.

	 * 4) For Tx and Rx are both Synchronous with another SAI, we just

	 *    ignore it.

 Do not enable the clock if it is already enabled */

 Set to output mode to avoid tri-stated data pins */

	/*

	 * For SAI provider mode, when Tx(Rx) sync with Rx(Tx) clock, Rx(Tx) will

	 * generate bclk and frame clock for Tx(Rx), we should set RCR4(TCR4),

	 * RCR5(TCR5) for playback(capture), or there will be sync error.

 TERE will remain set till the end of current frame */

	/*

	 * For sai master mode, after several open/close sai,

	 * there will be no frame clock, and can't recover

	 * anymore. Add software reset to fix this issue.

	 * This is a hardware bug, and will be fix in the

	 * next sai version.

 Software Reset */

 Clear SR bit to finish the reset */

	/*

	 * Asynchronous mode: Clear SYNC for both Tx and Rx.

	 * Rx sync with Tx clocks: Clear SYNC for Tx, set it for Rx.

	 * Tx sync with Rx clocks: Clear SYNC for Rx, set it for Tx.

	/*

	 * It is recommended that the transmitter is the last enabled

	 * and the first disabled.

		/*

		 * Enable the opposite direction for synchronous mode

		 * 1. Tx sync with Rx: only set RE for Rx; set TE & RE for Tx

		 * 2. Rx sync with Tx: only set TE for Tx; set RE & TE for Rx

		 *

		 * RM recommends to enable RE after TE for case 1 and to enable

		 * TE after RE for case 2, but we here may not always guarantee

		 * that happens: "arecord 1.wav; aplay 2.wav" in case 1 enables

		 * TE after RE, which is against what RM recommends but should

		 * be safe to do, judging by years of testing results.

 Check if the opposite FRDE is also disabled */

		/*

		 * If opposite stream provides clocks for synchronous mode and

		 * it is inactive, disable it before disabling the current one

		/*

		 * Disable current stream if either of:

		 * 1. current stream doesn't provide clocks for synchronous mode

		 * 2. current stream provides clocks for synchronous mode but no

		 *    more stream is active.

	/*

	 * EDMA controller needs period size to be a multiple of

	 * tx/rx maxburst

 Software Reset for both Tx and Rx */

 Clear SR bit to finish the reset */

 Set VERID and PARAM be volatile for reading value in probe */

 Max slots per frame, power of 2 */

 Words per fifo, power of 2 */

 Number of datalines implemented */

 Compatible with old DTB cases */

 -EPROBE_DEFER */

 Sync Tx with Rx as default by following old DT binding */

 error out if both synchronous and asynchronous are present */

 Sync Rx with Tx */

 Discard all settings for asynchronous mode */

 Get sai version */

 Select MCLK direction */

	/*

	 * Register platform component before registering cpu dai for there

	 * is not defer probe for platform component in snd_soc_add_pcm_runtime().

 sentinel */ }

/*

 * Efika driver for the PSC of the Freescale MPC52xx

 * configured as AC97 interface

 *

 * Copyright 2008 Jon Smirl, Digispeaker

 * Author: Jon Smirl <jonsmirl@gmail.com>

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2. This program is licensed "as is" without any warranty of any

 * kind, whether express or implied.

 SPDX-License-Identifier: GPL-2.0

/*

 * NXP AUDMIX ALSA SoC Digital Audio Interface (DAI) driver

 *

 * Copyright 2017 NXP

 FSL_AUDMIX_CTR enums */

 FSL_AUDMIX_ATCR0 enums */

 FSL_AUDMIX_ATCR1 enums */

 DIS->DIS, do nothing */

 DIS->TDM1*/

 DIS->TDM2*/

 DIS->MIX */

 TDM1->DIS */

 TDM1->TDM1, do nothing */

 TDM1->TDM2 */

 TDM1->MIX */

 TDM2->DIS */

 TDM2->TDM1 */

 TDM2->TDM2, do nothing */

 TDM2->MIX */

 MIX->DIS */

 MIX->TDM1 */

 MIX->TDM2 */

 MIX->MIX, do nothing */

 Enforce all required TDMs are started */

 Set mix clock */

 Get current state */

	/**

	 * Ensure the current selected mixer clock is available

	 * for configuration propagation

 Get current state */

 "From" state */

 "To" state */

 Check if state is changing ... */

	/**

	 * Ensure the current selected mixer clock is available

	 * for configuration propagation

 Check state transition constraints */

 Complete transition to new state */

 FSL_AUDMIX_CTR controls */

 TDM1 Attenuation controls */

 TDM2 Attenuation controls */

 AUDMIX is working in DSP_A format only */

 For playback the AUDMIX is consumer, and for record is provider */

 Output data will be written on positive edge of the clock */

 Output data will be written on negative edge of the clock */

 Capture stream shall not be handled */

 sentinel */ }

 Get the addresses */

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0



 Freescale Generic ASoC Sound Card driver with ASRC



 Copyright (C) 2014 Freescale Semiconductor, Inc.



 Author: Nicolin Chen <nicoleotsuka@gmail.com>

 Default DAI format without Master and Slave flag */

/**

 * struct codec_priv - CODEC private data

 * @mclk_freq: Clock rate of MCLK

 * @free_freq: Clock rate of MCLK for hw_free()

 * @mclk_id: MCLK (or main clock) id for set_sysclk()

 * @fll_id: FLL (or secordary clock) id for set_sysclk()

 * @pll_id: PLL id for set_pll()

/**

 * struct cpu_priv - CPU private data

 * @sysclk_freq: SYSCLK rates for set_sysclk()

 * @sysclk_dir: SYSCLK directions for set_sysclk()

 * @sysclk_id: SYSCLK ids for set_sysclk()

 * @slot_width: Slot width of each frame

 *

 * Note: [1] for tx and [0] for rx

/**

 * struct fsl_asoc_card_priv - Freescale Generic ASOC card private data

 * @dai_link: DAI link structure including normal one and DPCM link

 * @hp_jack: Headphone Jack structure

 * @mic_jack: Microphone Jack structure

 * @pdev: platform device pointer

 * @codec_priv: CODEC private data

 * @cpu_priv: CPU private data

 * @card: ASoC card structure

 * @streams: Mask of current active streams

 * @sample_rate: Current sample rate

 * @sample_format: Current sample format

 * @asrc_rate: ASRC sample rate used by Back-Ends

 * @asrc_format: ASRC sample format used by Back-Ends

 * @dai_fmt: DAI format between CPU and CODEC

 * @name: Card name

/*

 * This dapm route map exists for DPCM link only.

 * The other routes shall go through Device Tree.

 *

 * Note: keep all ASRC routes in the second half

 *	 to drop them easily for non-ASRC cases.

 1st half -- Normal DAPM routes */

 2nd half -- ASRC DAPM routes */

 1st half -- Normal DAPM routes */

 2nd half -- ASRC DAPM routes */

 1st half -- Normal DAPM routes */

 2nd half -- ASRC DAPM routes */

 1st half -- Normal DAPM routes */

 2nd half -- ASRC DAPM routes */

 Add all possible widgets into here without being redundant */

 Specific configurations of DAIs starts from here */

 Specific configuration for PLL */

 Force freq to be free_freq to avoid error message in codec */

 Default ASoC DAI Link*/

 DPCM Link between Front-End and Back-End (Optional) */

	/*

	 * The port numbering in the hardware manual starts at 1, while

	 * the AUDMUX API expects it starts at 0.

	/*

	 * Use asynchronous mode (6 wires) for all cases except AC97.

	 * If only 4 wires are needed, just set SSI into

	 * synchronous mode and enable 4 PADs in IOMUX.

 Asynchronous mode can not be set along with RCLKDIR */

 Disable speaker if headphone is plugged in */

 Disable dmic if microphone is plugged in */

		/*

		 * Use slots 3/4 for S/PDIF so SSI won't try to enable

		 * other slots and send some samples there

		 * due to SLOTREQ bits for S/PDIF received from codec

 Give a chance to old DT binding */

 Get the MCLK rate only, and leave it controlled by CODEC drivers */

 Default sample rate and format, will be updated in hw_params() */

 Assign a default DAI format, and allow each card to overwrite it */

 Diversify the card configurations */

 Format info from DT is optional. */

 Override dai_fmt with value from DT */

 Change direction according to format */

 Common settings for corresponding Freescale CPU DAI driver */

 Only SSI needs to configure AUDMUX */

 Initialize sound card */

 Drop the second half of DAPM routes -- ASRC */

 Normal DAI Link */

 DPCM DAI Links only if ASRC exsits */

 Fallback to old binding; translate to asrc_format */

 Finish card registering */

	/*

	 * Properties "hp-det-gpio" and "mic-det-gpio" are optional, and

	 * asoc_simple_init_jack uses these properties for creating

	 * Headphone Jack and Microphone Jack.

	 *

	 * The notifier is initialized in snd_soc_card_jack_new(), then

	 * snd_soc_jack_notifier_register can be called.

 SPDX-License-Identifier: GPL-2.0

 Copyright 2018 NXP

QUALITY 2-0 bits */

/* Table 5. Quality Modes

 * Medium	0 0 0

 * High		0 0 1

 * Very Low 2	1 0 0

 * Very Low 1	1 0 1

 * Very Low 0	1 1 0

 * Low		1 1 1

 kfactor = 0.5 */

 kfactor = 1 */

 kfactor = 2 */

 kfactor = 4 */

/* The SRES is a self-negated bit which provides the CPU with the

 * capability to initialize the PDM Interface module through the

 * slave-bus interface. This bit always reads as zero, and this

 * bit is only effective when MDIS is cleared

		/* DMA Interrupt Selection - DISEL bits

		 * 00 - DMA and IRQ disabled

		 * 01 - DMA req enabled

		 * 10 - IRQ enabled

		 * 11 - reserved

 Enable the module */

 Disable the module */

 set CICOSR */

 set CLK_DIV */

 1. Disable the module */

 enable channels */

 set qsel to medium */

 set default gain to max_gain */

 FIFO Watermark Control - FIFOWMK*/

 REGMAP */

 Write 1 to Clear */

 Write 1 to Clear */

 Write 1 to Clear */

 Write 1 to Clear */

 END OF REGMAP */

 Channel 0-7 Output Data Flags */

		/* if DMA is not enabled, field must be written with 1

		 * to clear

	/* ipg_clk is used to control the registers

	 * ipg_clk_app is used to operate the filter

 init regmap */

 dataline mask for RX */

 get IRQs */

 Digital Microphone interface interrupt */

 Digital Microphone interface error interrupt */

	/*

	 * Register platform component before registering cpu dai for there

	 * is not defer probe for platform component in snd_soc_add_pcm_runtime().

 SPDX-License-Identifier: GPL-2.0+

 Copyright 2018-2021 NXP

 192kHz/32bit/2ch/60s size is 0x574e00 */

 Get current pll parent */

 Switch to another pll parent if needed. */

 sentinel */ }

 Get the optional clocks */

 SPDX-License-Identifier: GPL-2.0-only



 Freescale MPC5200 PSC in I2S mode

 ALSA SoC Digital Audio Interface (DAI) driver



 Copyright (C) 2008 Secret Lab Technologies Ltd.

 Copyright (C) 2009 Jon Smirl, Digispeaker

/**

 * PSC_I2S_RATES: sample rates supported by the I2S

 *

 * This driver currently only supports the PSC running in I2S slave mode,

 * which means the codec determines the sample rate.  Therefore, we tell

 * ALSA that we support all rates and let the codec driver decide what rates

 * are really supported.

/**

 * PSC_I2S_FORMATS: audio formats supported by the PSC I2S mode

/**

 * psc_i2s_set_sysclk: set the clock frequency and direction

 *

 * This function is called by the machine driver to tell us what the clock

 * frequency and direction are.

 *

 * Currently, we only support operating as a clock slave (SND_SOC_CLOCK_IN),

 * and we don't care about the frequency.  Return an error if the direction

 * is not SND_SOC_CLOCK_IN.

 *

 * @clk_id: reserved, should be zero

 * @freq: the frequency of the given clock ID, currently ignored

 * @dir: SND_SOC_CLOCK_IN (clock slave) or SND_SOC_CLOCK_OUT (clock master)

/**

 * psc_i2s_set_fmt: set the serial format.

 *

 * This function is called by the machine driver to tell us what serial

 * format to use.

 *

 * This driver only supports I2S mode.  Return an error if the format is

 * not SND_SOC_DAIFMT_I2S.

 *

 * @format: one of SND_SOC_DAIFMT_xxx

/* ---------------------------------------------------------------------

 * ALSA SoC Bindings

 *

 * - Digital Audio Interface (DAI) template

 * - create/destroy dai hooks

/**

 * psc_i2s_dai_template: template CPU Digital Audio Interface

/* ---------------------------------------------------------------------

 * OF platform bus binding code:

 * - Probe/remove operations

 * - OF device match table

 Configure the serial interface mode; defaulting to CODEC8 mode */

	/* Check for the codec handle.  If it is not present then we

	/* Due to errata in the dma mode; need to line up enabling

	 * the transmitter with a transition on the frame sync

 first make sure it is low */

 then wait for the transition to high */

	/* Finally, enable the PSC.

	 * Receiver must always be enabled; even when we only want

 Go */

 Match table for of_platform binding */

 SPDX-License-Identifier: GPL-2.0+

 imx-pcm-fiq.c  --  ALSA Soc Audio Layer



 Copyright 2009 Sascha Hauer <s.hauer@pengutronix.de>



 This code is based on code copyrighted by Freescale,

 Liam Girdwood, Javier Martin and probably others.

 SPDX-License-Identifier: GPL-2.0+



 Copyright 2012 Freescale Semiconductor, Inc.

 Copyright 2012 Linaro Ltd.

	/*

	 * The port numbering in the hardware manual starts at 1, while

	 * the audmux API expects it starts at 0.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0



 linux/sound/mpc5200-ac97.c -- AC97 support for the Freescale MPC52xx chip.



 Copyright (C) 2009 Jon Smirl, Digispeaker

 Author: Jon Smirl <jonsmirl@gmail.com>

 ALSA only supports a single AC97 device so static is recommend here */

 Wait for command send status zero = ready */

 Force clear the data valid bit */

 Send the read */

 Wait for the answer */

 Get the data */

 Wait for command status zero = ready */

 Write data */

 Notify the PSC that a reset has occurred */

 Re-enable RX and TX */

 Determine the set of enable bits to turn on */

 Set the slot enable bits */

 Clear the slot enable bits */

 Go */

/* ---------------------------------------------------------------------

 * ALSA SoC Bindings

 *

 * - Digital Audio Interface (DAI) template

 * - create/destroy dai hooks

/**

 * psc_ac97_dai_template: template CPU Digital Audio Interface

/* ---------------------------------------------------------------------

 * OF platform bus binding code:

 * - Probe/remove operations

 * - OF device match table

 Configure the serial interface mode to AC97 */

 No slots active */

 Match table for of_platform binding */

 SPDX-License-Identifier: GPL-2.0



 Freescale DMA ALSA SoC PCM driver



 Author: Timur Tabi <timur@freescale.com>



 Copyright 2007-2010 Freescale Semiconductor, Inc.



 This driver implements ASoC support for the Elo DMA controller, which is

 the DMA controller on Freescale 83xx, 85xx, and 86xx SOCs. In ALSA terms,

 the PCM driver is what handles the DMA buffer.

 For the offset of stx0 and srx0 */

/*

 * The formats that the DMA controller supports, which is anything

 * that is 8, 16, or 32 bits.

/*

 * The number of DMA links to use.  Two is the bare minimum, but if you

 * have really small links you might need more.

/** fsl_dma_private: p-substream DMA data

 *

 * Each substream has a 1-to-1 association with a DMA channel.

 *

 * The link[] array is first because it needs to be aligned on a 32-byte

 * boundary, so putting it first will ensure alignment without padding the

 * structure.

 *

 * @link[]: array of link descriptors

 * @dma_channel: pointer to the DMA channel's registers

 * @irq: IRQ for this DMA channel

 * @substream: pointer to the substream object, needed by the ISR

 * @ssi_sxx_phys: bus address of the STX or SRX register to use

 * @ld_buf_phys: physical address of the LD buffer

 * @current_link: index into link[] of the link currently being processed

 * @dma_buf_phys: physical address of the DMA buffer

 * @dma_buf_next: physical address of the next period to process

 * @dma_buf_end: physical address of the byte after the end of the DMA

 * @buffer period_size: the size of a single period

 * @num_periods: the number of periods in the DMA buffer

/**

 * fsl_dma_hardare: define characteristics of the PCM hardware.

 *

 * The PCM hardware is the Freescale DMA controller.  This structure defines

 * the capabilities of that hardware.

 *

 * Since the sampling rate and data format are not controlled by the DMA

 * controller, we specify no limits for those values.  The only exception is

 * period_bytes_min, which is set to a reasonably low value to prevent the

 * DMA controller from generating too many interrupts per second.

 *

 * Since each link descriptor has a 32-bit byte count field, we set

 * period_bytes_max to the largest 32-bit number.  We also have no maximum

 * number of periods.

 *

 * Note that we specify SNDRV_PCM_INFO_JOINT_DUPLEX here, but only because a

 * limitation in the SSI driver requires the sample rates for playback and

 * capture to be the same.

 A reasonable limit */

 A reasonable limit */

/**

 * fsl_dma_abort_stream: tell ALSA that the DMA transfer has aborted

 *

 * This function should be called by the ISR whenever the DMA controller

 * halts data transfer.

/**

 * fsl_dma_update_pointers - update LD pointers to point to the next period

 *

 * As each period is completed, this function changes the link

 * descriptor pointers for that period to point to the next period.

	/* Update our link descriptors to point to the next period. On a 36-bit

	 * system, we also need to update the ESAD bits.  We also set (keep) the

	 * snoop bits.  See the comments in fsl_dma_hw_params() about snooping.

 Update our variables for next time */

/**

 * fsl_dma_isr: interrupt handler for the DMA controller

 *

 * @irq: IRQ of the DMA channel

 * @dev_id: pointer to the dma_private structure for this DMA channel

	/* We got an interrupt, so read the status register to see what we

	   were interrupted for.

 Tell ALSA we completed a period. */

		/*

		 * Update our link descriptors to point to the next period. We

		 * only need to do this if the number of periods is not equal to

		 * the number of links.

 Clear the bits that we set */

/**

 * fsl_dma_new: initialize this PCM driver.

 *

 * This function is called when the codec driver calls snd_soc_new_pcms(),

 * once for each .dai_link in the machine driver's snd_soc_card

 * structure.

 *

 * snd_dma_alloc_pages() is just a front-end to dma_alloc_coherent(), which

 * (currently) always allocates the DMA buffer in lowmem, even if GFP_HIGHMEM

 * is specified. Therefore, any DMA buffers we allocate will always be in low

 * memory, but we support for 36-bit physical addresses anyway.

 *

 * Regardless of where the memory is actually allocated, since the device can

 * technically DMA to any 36-bit address, we do need to set the DMA mask to 36.

/**

 * fsl_dma_open: open a new substream.

 *

 * Each substream has its own DMA buffer.

 *

 * ALSA divides the DMA buffer into N periods.  We create NUM_DMA_LINKS link

 * descriptors that ping-pong from one period to the next.  For example, if

 * there are six periods and two link descriptors, this is how they look

 * before playback starts:

 *

 *      	   The last link descriptor

 *   ____________  points back to the first

 *  |   	 |

 *  V   	 |

 *  ___    ___   |

 * |   |->|   |->|

 * |___|  |___|

 *   |      |

 *   |      |

 *   V      V

 *  _________________________________________

 * |      |      |      |      |      |      |  The DMA buffer is

 * |      |      |      |      |      |      |    divided into 6 parts

 * |______|______|______|______|______|______|

 *

 * and here's how they look after the first period is finished playing:

 *

 *   ____________

 *  |   	 |

 *  V   	 |

 *  ___    ___   |

 * |   |->|   |->|

 * |___|  |___|

 *   |      |

 *   |______________

 *          |       |

 *          V       V

 *  _________________________________________

 * |      |      |      |      |      |      |

 * |      |      |      |      |      |      |

 * |______|______|______|______|______|______|

 *

 * The first link descriptor now points to the third period.  The DMA

 * controller is currently playing the second period.  When it finishes, it

 * will jump back to the first descriptor and play the third period.

 *

 * There are four reasons we do this:

 *

 * 1. The only way to get the DMA controller to automatically restart the

 *    transfer when it gets to the end of the buffer is to use chaining

 *    mode.  Basic direct mode doesn't offer that feature.

 * 2. We need to receive an interrupt at the end of every period.  The DMA

 *    controller can generate an interrupt at the end of every link transfer

 *    (aka segment).  Making each period into a DMA segment will give us the

 *    interrupts we need.

 * 3. By creating only two link descriptors, regardless of the number of

 *    periods, we do not need to reallocate the link descriptors if the

 *    number of periods changes.

 * 4. All of the audio data is still stored in a single, contiguous DMA

 *    buffer, which is what ALSA expects.  We're just dividing it into

 *    contiguous parts, and creating a link descriptor for each one.

 Pointer to next link descriptor */

	/*

	 * Reject any DMA buffer whose size is not a multiple of the period

	 * size.  We need to make sure that the DMA buffer can be evenly divided

	 * into periods.

 Program the fixed DMA controller parameters */

 The last link descriptor points to the first */

 Tell the DMA controller where the first link descriptor is */

 The manual says the BCR must be clear before enabling EMP */

	/*

	 * Program the mode register for interrupts, external master control,

	 * and source/destination hold.  Also clear the Channel Abort bit.

	/*

	 * We want External Master Start and External Master Pause enabled,

	 * because the SSI is controlling the DMA controller.  We want the DMA

	 * controller to be set up in advance, and then we signal only the SSI

	 * to start transferring.

	 *

	 * We want End-Of-Segment Interrupts enabled, because this will generate

	 * an interrupt at the end of each segment (each link descriptor

	 * represents one segment).  Each DMA segment is the same thing as an

	 * ALSA period, so this is how we get an interrupt at the end of every

	 * period.

	 *

	 * We want Error Interrupt enabled, so that we can get an error if

	 * the DMA controller is mis-programmed somehow.

	/* For playback, we want the destination address to be held.  For

/**

 * fsl_dma_hw_params: continue initializing the DMA links

 *

 * This function obtains hardware parameters about the opened stream and

 * programs the DMA controller accordingly.

 *

 * One drawback of big-endian is that when copying integers of different

 * sizes to a fixed-sized register, the address to which the integer must be

 * copied is dependent on the size of the integer.

 *

 * For example, if P is the address of a 32-bit register, and X is a 32-bit

 * integer, then X should be copied to address P.  However, if X is a 16-bit

 * integer, then it should be copied to P+2.  If X is an 8-bit register,

 * then it should be copied to P+3.

 *

 * So for playback of 8-bit samples, the DMA controller must transfer single

 * bytes from the DMA buffer to the last byte of the STX0 register, i.e.

 * offset by 3 bytes. For 16-bit samples, the offset is two bytes.

 *

 * For 24-bit samples, the offset is 1 byte.  However, the DMA controller

 * does not support 3-byte copies (the DAHTS register supports only 1, 2, 4,

 * and 8 bytes at a time).  So we do not support packed 24-bit samples.

 * 24-bit data must be padded to 32 bits.

 Number of bits per sample */

 Number of bytes per frame */

 Bus address of SSI STX register */

 Size of the DMA buffer, in bytes */

 Number of bytes per period */

 Pointer to next period */

 Pointer to DMA controller */

 DMA Mode Register */

 Initialize our DMA tracking variables */

 This happens if the number of periods == NUM_DMA_LINKS */

	/* Due to a quirk of the SSI's STX register, the target address

	 * for the DMA operations depends on the sample size.  So we calculate

	 * that offset here.  While we're at it, also tell the DMA controller

	 * how much data to transfer per sample.

 We should never get here */

	/*

	 * BWC determines how many bytes are sent/received before the DMA

	 * controller checks the SSI to see if it needs to stop. BWC should

	 * always be a multiple of the frame size, so that we always transmit

	 * whole frames.  Each frame occupies two slots in the FIFO.  The

	 * parameter for CCSR_DMA_MR_BWC() is rounded down the next power of two

	 * (MR[BWC] can only represent even powers of two).

	 *

	 * To simplify the process, we set BWC to the largest value that is

	 * less than or equal to the FIFO watermark.  For playback, this ensures

	 * that we transfer the maximum amount without overrunning the FIFO.

	 * For capture, this ensures that we transfer the maximum amount without

	 * underrunning the FIFO.

	 *

	 * f = SSI FIFO depth

	 * w = SSI watermark value (which equals f - 2)

	 * b = DMA bandwidth count (in bytes)

	 * s = sample size (in bytes, which equals frame_size * 2)

	 *

	 * For playback, we never transmit more than the transmit FIFO

	 * watermark, otherwise we might write more data than the FIFO can hold.

	 * The watermark is equal to the FIFO depth minus two.

	 *

	 * For capture, two equations must hold:

	 *	w > f - (b / s)

	 *	w >= b / s

	 *

	 * So, b > 2 * s, but b must also be <= s * w.  To simplify, we set

	 * b = s * w, which is equal to

	 *      (dma_private->ssi_fifo_depth - 2) * sample_bytes.

		/* The snoop bit tells the DMA controller whether it should tell

		 * the ECM to snoop during a read or write to an address. For

		 * audio, we use DMA to transfer data between memory and an I/O

		 * device (the SSI's STX0 or SRX0 register). Snooping is only

		 * needed if there is a cache, so we need to snoop memory

		 * addresses only.  For playback, that means we snoop the source

		 * but not the destination.  For capture, we snoop the

		 * destination but not the source.

		 *

		 * Note that failing to snoop properly is unlikely to cause

		 * cache incoherency if the period size is larger than the

		 * size of L1 cache.  This is because filling in one period will

		 * flush out the data for the previous period.  So if you

		 * increased period_bytes_min to a large enough size, you might

		 * get more performance by not snooping, and you'll still be

		 * okay.  You'll need to update fsl_dma_update_pointers() also.

/**

 * fsl_dma_pointer: determine the current position of the DMA transfer

 *

 * This function is called by ALSA when ALSA wants to know where in the

 * stream buffer the hardware currently is.

 *

 * For playback, the SAR register contains the physical address of the most

 * recent DMA transfer.  For capture, the value is in the DAR register.

 *

 * The base address of the buffer is stored in the source_addr field of the

 * first link descriptor.

	/* Obtain the current DMA pointer, but don't read the ESAD bits if we

	 * only have 32-bit DMA addresses.  This function is typically called

	 * in interrupt context, so we need to optimize it.

	/*

	 * When capture is started, the SSI immediately starts to fill its FIFO.

	 * This means that the DMA controller is not started until the FIFO is

	 * full.  However, ALSA calls this function before that happens, when

	 * MR.DAR is still zero.  In this case, just return zero to indicate

	 * that nothing has been received yet.

	/*

	 * If the current address is just past the end of the buffer, wrap it

	 * around.

/**

 * fsl_dma_hw_free: release resources allocated in fsl_dma_hw_params()

 *

 * Release the resources allocated in fsl_dma_hw_params() and de-program the

 * registers.

 *

 * This function can be called multiple times.

 Stop the DMA */

 Reset all the other registers */

/**

 * fsl_dma_close: close the stream.

 Deallocate the fsl_dma_private structure */

/**

 * find_ssi_node -- returns the SSI node that points to its DMA channel node

 *

 * Although this DMA driver attempts to operate independently of the other

 * devices, it still needs to determine some information about the SSI device

 * that it's working with.  Unfortunately, the device tree does not contain

 * a pointer from the DMA channel node to the SSI node -- the pointer goes the

 * other way.  So we need to scan the device tree for SSI nodes until we find

 * the one that points to the given DMA channel node.  It's ugly, but at least

 * it's contained in this one function.

		/* Check each DMA phandle to see if it points to us.  We

		 * assume that device_node pointers are a valid comparison.

 Find the SSI node that points to us. */

 Store the SSI-specific information that we need */

 Older 8610 DTs didn't have the fifo-depth property */

 SPDX-License-Identifier: GPL-2.0+

 Copyright 2017-2021 NXP

/*

 * Mapping LRCK fs and frame width, table 3 & 4 in datasheet

 * @rmin: min rate

 * @rmax: max rate

 * @wmin: min frame ratio

 * @wmax: max frame ratio

/*

 * Mapping TDM mode and frame width

/*

 * struct imx_card_plat_data - specific info for codecs

 *

 * @fs_mul: ratio of mclk/fs for normal mode

 * @tdm_fs_mul: ratio of mclk/fs for tdm mode

 * @support_rates: supported sample rate

 * @support_tdm_rates: supported sample rate for tdm mode

 * @support_channels: supported channels

 * @support_tdm_channels: supported channels for tdm mode

 * @num_fs_mul: ARRAY_SIZE of fs_mul

 * @num_tdm_fs_mul: ARRAY_SIZE of tdm_fs_mul

 * @num_rates: ARRAY_SIZE of support_rates

 * @num_tdm_rates: ARRAY_SIZE of support_tdm_rates

 * @num_channels: ARRAY_SIZE of support_channels

 * @num_tdm_channels: ARRAY_SIZE of support_tdm_channels

 * @type: codec type

/*

 * struct dai_link_data - specific info for dai link

 *

 * @slots: slot number

 * @slot_width: slot width value

 * @cpu_sysclk_id: sysclk id for cpu dai

 * @one2one_ratio: true if mclk equal to bclk

/*

 * struct imx_card_data - platform device data

 *

 * @plat_data: pointer of imx_card_plat_data

 * @dapm_routes: pointer of dapm_routes

 * @link_data: private data for dai link

 * @card: card instance

 * @num_dapm_routes: number of dapm_routes

 * @asrc_rate: asrc rates

 * @asrc_format: asrc format

 Normal, < 32kHz */

 Normal, 32kHz */

 Normal */

 Double */

 Quad */

 Oct */

 Hex */

	/*

	 * Table 13	- Audio Interface Format

	 * For TDM mode, MCLK should is set to

	 * obtained from 2 * slots * slot_width

 TDM128 */

 TDM256 */

 TDM512 */

	/**

	 * Table 7      - mapping multiplier and speed mode

	 * Tables 8 & 9 - mapping speed mode and LRCK fs

 Normal, <= 32kHz */

 Normal */

 Double */

 Quad */

 Oct */

 Hex */

/*

 * Auto MCLK selection based on LRCK for Normal Mode

 * (Table 4 from datasheet)

/*

 * MCLK and BCLK selection based on TDM mode

 * because of SAI we also add the restriction: MCLK >= 2 * BCLK

 * (Table 9 from datasheet)

 min = max = slots * slots_width */

 Adjust SAI bclk:mclk ratio */

 Let DAI manage clk frequency by default */

 Set MCLK freq */

 Use the maximum freq from DSD512 (512*44100 = 22579200) */

 Identify maximum supported rate */

 Adjust SAI bclk:mclk ratio */

 Skip rates for which MCLK is beyond supported value */

 DAPM routes */

 Populate links */

 Allocate the DAI link array */

 sai sysclk id */

 sai may support mclk/bclk = 1 */

 Check the akcodec type */

 DPCM frontend */

 Fallback to old binding; translate to asrc_format */

 DPCM backend */

 Get dai fmt */

 Get tdm slot */

 default value */

 configure the dapm routes */

 default platform data for akcodecs */

 with asrc as front end */

 SPDX-License-Identifier: GPL-2.0



 Freescale SSI ALSA SoC Digital Audio Interface (DAI) debugging functions



 Copyright 2014 Markus Pargmann <mpa@pengutronix.de>, Pengutronix



 Split from fsl_ssi.c

/*

 * Show the statistics of a flag only if its interrupt is enabled

 *

 * Compilers will optimize it to a no-op if the interrupt is disabled

/*

 * Display the statistics for the current SSI device

 *

 * To avoid confusion, only show those counts that are enabled

 SPDX-License-Identifier: GPL-2.0+

 Copyright 2017-2020 NXP

 rpmsg_pdev is the platform device for the rpmsg node that probed us */

 Optional codec node */

	/*

	 * Inoder to use common api to get card name and audio routing.

	 * Use parent of_node for this device, revert it after finishing using

 SPDX-License-Identifier: GPL-2.0



 Freescale ASRC ALSA SoC Digital Audio Interface (DAI) driver



 Copyright (C) 2014 Freescale Semiconductor, Inc.



 Author: Nicolin Chen <nicoleotsuka@gmail.com>

 Corresponding to process_option */

/*

 * The following tables map the relationship between asrc_inclk/asrc_outclk in

 * fsl_asrc.h and the registers of ASRCSR

 i.MX53 uses the same map for input and output */

	0x0  0x1  0x2  0x3  0x4  0x5  0x6  0x7  0x8  0x9  0xa  0xb  0xc  0xd  0xe  0xf */

	0x0  0x1  0x2  0x3  0x4  0x5  0x6  0x7  0x8  0x9  0xa  0xb  0xc  0xd  0xe  0xf */

/*

 * i.MX8QM/i.MX8QXP uses the same map for input and output.

 * clk_map_imx8qm[0] is for i.MX8QM asrc0

 * clk_map_imx8qm[1] is for i.MX8QM asrc1

 * clk_map_imx8qxp[0] is for i.MX8QXP asrc0

 * clk_map_imx8qxp[1] is for i.MX8QXP asrc1

/**

 * fsl_asrc_sel_proc - Select the pre-processing and post-processing options

 * @inrate: input sample rate

 * @outrate: output sample rate

 * @pre_proc: return value for pre-processing option

 * @post_proc: return value for post-processing option

 *

 * Make sure to exclude following unsupported cases before

 * calling this function:

 * 1) inrate > 8.125 * outrate

 * 2) inrate > 16.125 * outrate

 *

 select pre_proc between [0, 2] */

 Condition for selection of post-processing */

/**

 * fsl_asrc_request_pair - Request ASRC pair

 * @channels: number of channels

 * @pair: pointer to pair

 *

 * It assigns pair by the order of A->C->B because allocation of pair B,

 * within range [ANCA, ANCA+ANCB-1], depends on the channels of pair A

 * while pair A and pair C are comparatively independent.

/**

 * fsl_asrc_release_pair - Release ASRC pair

 * @pair: pair to release

 *

 * It clears the resource from asrc and releases the occupied channels.

 Make sure the pair is disabled */

/**

 * fsl_asrc_set_watermarks- configure input and output thresholds

 * @pair: pointer to pair

 * @in: input threshold

 * @out: output threshold

/**

 * fsl_asrc_cal_asrck_divisor - Calculate the total divisor between asrck clock rate and sample rate

 * @pair: pointer to pair

 * @div: divider

 *

 * It follows the formula clk_rate = samplerate * (2 ^ prescaler) * divider

 Calculate the divisors: prescaler [2^0, 2^7], divder [1, 8] */

/**

 * fsl_asrc_set_ideal_ratio - Calculate and set the ratio for Ideal Ratio mode only

 * @pair: pointer to pair

 * @inrate: input rate

 * @outrate: output rate

 *

 * The ratio is a 32-bit fixed point value with 26 fractional bits.

 Calculate the intergal part of the ratio */

 ... and then the 26 depth decimal part */

/**

 * fsl_asrc_config_pair - Configure the assigned ASRC pair

 * @pair: pointer to pair

 * @use_ideal_rate: boolean configuration

 *

 * It configures those ASRC registers according to a configuration instance

 * of struct asrc_config which includes in/output sample rate, width, channel

 * and clock settings.

 *

 * Note:

 * The ideal ratio configuration can work with a flexible clock rate setting.

 * Using IDEAL_RATIO_RATE gives a faster converting speed but overloads ASRC.

 * For a regular audio playback, the clock rate should not be slower than an

 * clock rate aligning with the output sample rate; For a use case requiring

 * faster conversion, set use_ideal_rate to have the faster speed.

 Validate channels */

 Validate input and output sample rates */

 Validate input and output clock sources */

 We only have output clock for ideal ratio mode */

	/*

	 * The divider range is [1, 1024], defined by the hardware. For non-

	 * ideal ratio configuration, clock rate has to be strictly aligned

	 * with the sample rate. For ideal ratio configuration, clock rates

	 * only result in different converting speeds. So remainder does not

	 * matter, as long as we keep the divider within its valid range.

 Output divider has the same limitation as the input one */

 Set the channel number */

 Update channels for current pair */

 Default setting: Automatic selection for processing mode */

 Set the input and output clock sources */

 Calculate the input clock divisors */

 Suppose indiv and outdiv includes prescaler, so add its MASK too */

 Implement word_width configurations */

 Enable BUFFER STALL */

 Set default thresholds for input and output FIFO */

 Configure the following only for Ideal Ratio mode */

 Clear ASTSx bit to use Ideal Ratio mode */

 Enable Ideal Ratio mode */

 Apply configurations for pre- and post-processing */

/**

 * fsl_asrc_start_pair - Start the assigned ASRC pair

 * @pair: pointer to pair

 *

 * It enables the assigned pair and makes it stopped at the stall level.

 Enable the current pair */

 Wait for status of initialization */

 Make the input fifo to ASRC STALL level */

 Enable overload interrupt */

/**

 * fsl_asrc_stop_pair - Stop the assigned ASRC pair

 * @pair: pointer to pair

 Stop the current pair */

/**

 * fsl_asrc_get_dma_channel- Get DMA channel according to the pair and direction.

 * @pair: pointer to pair

 * @dir: DMA direction

 Odd channel number is not valid for older ASRC (channel_bits==3) */

 Select proper clock source for internal ratio mode */

 Array size 2 means IN and OUT */

 Select proper clock source for internal ratio mode */

 Only match a perfect clock source with no remainder */

 Switch to ideal ratio mode if there is no proper clock source */

/**

 * fsl_asrc_init - Initialize ASRC registers with a default configuration

 * @asrc: ASRC context

 Halt ASRC internal FP when input FIFO needs data for pair A, B, C */

 Disable interrupt by default */

 Apply recommended settings for parameters from Reference Manual */

 Base address for task queue FIFO. Set to 0x7C */

	/*

	 * Set the period of the 76KHz and 56KHz sampling clocks based on

	 * the ASRC processing clock.

	 * On iMX6, ipg_clk = 133MHz, REG_ASR76K = 0x06D6, REG_ASR56K = 0x0947

/**

 * fsl_asrc_isr- Interrupt handler for ASRC

 * @irq: irq number

 * @dev_id: ASRC context

 Clean overload error */

	/*

	 * We here use dev_dbg() for all exceptions because ASRC itself does

	 * not care if FIFO overflowed or underrun while a warning in the

	 * interrupt would result a ridged conversion.

 Get the addresses and IRQ */

 Stop all pairs provisionally */

 Restore all registers */

 Restart enabled pairs */

 SPDX-License-Identifier: GPL-2.0+



 Copyright (C) 2013 Freescale Semiconductor, Inc.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0



 Freescale P1022DS ALSA SoC Machine driver



 Author: Timur Tabi <timur@freescale.com>



 Copyright 2010 Freescale Semiconductor, Inc.

 P1022-specific PMUXCR and DMUXCR bit definitions */

 DMA controller/channel set to pad */

 DMA controller/channel set to SSI */

/*

 * Set the DMACR register in the GUTS

 *

 * The DMACR register determines the source of initiated transfers for each

 * channel on each DMA controller.  Rather than have a bunch of repetitive

 * macros for the bit patterns, we just have a function that calculates

 * them.

 *

 * guts: Pointer to GUTS structure

 * co: The DMA controller (0 or 1)

 * ch: The channel on the DMA controller (0, 1, 2, or 3)

 * device: The device to set as the target (CCSR_GUTS_DMUXCR_xxx)

 There's only one global utilities register */

/**

 * machine_data: machine-specific ASoC device data

 *

 * This structure contains data for a single sound platform device on an

 * P1022 DS.  Some of the data is taken from the device tree.

 0 = SSI1, 1 = SSI2, etc */

 0 = DMA1, 1 = DMA2, etc */

 0 = ch 0, 1 = ch 1, etc*/

 One for each DMA channel */

/**

 * p1022_ds_machine_probe: initialize the board

 *

 * This function is used to initialize the board-specific hardware.

 *

 * Here we program the DMACR and PMUXCR registers.

 Enable SSI Tx signal */

 Enable SSI Rx signal */

 Enable DMA Channel for SSI */

/**

 * p1022_ds_startup: program the board with various hardware parameters

 *

 * This function takes board-specific information, like clock frequencies

 * and serial data formats, and passes that information to the codec and

 * transport drivers.

 Tell the codec driver what the serial protocol is. */

	/*

	 * Tell the codec driver what the MCLK frequency is, and whether it's

	 * a slave or master.

/**

 * p1022_ds_machine_remove: Remove the sound device

 *

 * This function is called to remove the sound device for one SSI.  We

 * de-program the DMACR and PMUXCR register.

 Restore the signal routing */

/**

 * p1022_ds_ops: ASoC machine driver operations

/**

 * p1022_ds_probe: platform probe function for the machine driver

 *

 * Although this is a machine driver, the SSI node is the "master" node with

 * respect to audio hardware connections.  Therefore, we create a new ASoC

 * device for each new SSI node that has a codec attached.

 ssi_pdev is the platform device for the SSI node that probed us */

 Find the codec node for this SSI. */

 ASoC core can match codec with device node */

	/* We register two DAIs per SSI, one for playback and the other for

	 * capture.  We support codecs that have separate DAIs for both playback

	 * and capture.

 The DAI names from the codec (snd_soc_dai_driver.name) */

 Get the device ID */

 Get the serial format and clock direction. */

		/* In i2s-slave mode, the codec has its own clock source, so we

		 * need to get the frequency from the device tree and pass it to

		 * the codec driver.

 Find the playback DMA channel to use. */

 Find the capture DMA channel to use. */

 Initialize our DAI data structure.  */

 The platform driver name */

 Register with ASoC */

/**

 * p1022_ds_remove: remove the platform device

 *

 * This function is called when the platform device is removed.

		/*

		 * The name must match 'compatible' property in the device tree,

		 * in lowercase letters.

/**

 * p1022_ds_init: machine driver initialization.

 *

 * This function is called when this module is loaded.

 Get the physical address of the global utilities registers */

/**

 * p1022_ds_exit: machine driver exit

 *

 * This function is called when this driver is unloaded.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2017 NXP

 *

 * The code contained herein is licensed under the GNU General Public

 * License. You may obtain a copy of the GNU General Public License

 * Version 2 or later at the following locations:

 *

 * https://www.opensource.org/licenses/gpl-license.html

 * https://www.gnu.org/copyleft/gpl.html

 For playback the AUDMIX is consumer, and for record is provider */

 set DAI configuration */

	/*

	 * Per datasheet, AUDMIX expects 8 slots and 32 bits

	 * for every slot in TDM mode.

 For playback the AUDMIX is consumer */

 set AUDMIX DAI configuration */

 for CPU/Codec/Platform x 2 */

 Add AUDMIX Backend */

 SPDX-License-Identifier: GPL-2.0



 Freescale P1022RDK ALSA SoC Machine driver



 Author: Timur Tabi <timur@freescale.com>



 Copyright 2012 Freescale Semiconductor, Inc.



 Note: in order for audio to work correctly, the output controls need

 to be enabled, because they control the clock.  So for playback, for

 example:



      amixer sset 'Left Output Mixer PCM' on

      amixer sset 'Right Output Mixer PCM' on

 P1022-specific PMUXCR and DMUXCR bit definitions */

 DMA controller/channel set to pad */

 DMA controller/channel set to SSI */

/*

 * Set the DMACR register in the GUTS

 *

 * The DMACR register determines the source of initiated transfers for each

 * channel on each DMA controller.  Rather than have a bunch of repetitive

 * macros for the bit patterns, we just have a function that calculates

 * them.

 *

 * guts: Pointer to GUTS structure

 * co: The DMA controller (0 or 1)

 * ch: The channel on the DMA controller (0, 1, 2, or 3)

 * device: The device to set as the target (CCSR_GUTS_DMUXCR_xxx)

 There's only one global utilities register */

/**

 * machine_data: machine-specific ASoC device data

 *

 * This structure contains data for a single sound platform device on an

 * P1022 RDK.  Some of the data is taken from the device tree.

 0 = DMA1, 1 = DMA2, etc */

 0 = ch 0, 1 = ch 1, etc*/

 One for each DMA channel */

/**

 * p1022_rdk_machine_probe: initialize the board

 *

 * This function is used to initialize the board-specific hardware.

 *

 * Here we program the DMACR and PMUXCR registers.

 Enable SSI Tx signal */

 Enable SSI Rx signal */

 Enable DMA Channel for SSI */

/**

 * p1022_rdk_startup: program the board with various hardware parameters

 *

 * This function takes board-specific information, like clock frequencies

 * and serial data formats, and passes that information to the codec and

 * transport drivers.

 Tell the codec driver what the serial protocol is. */

/**

 * p1022_rdk_machine_remove: Remove the sound device

 *

 * This function is called to remove the sound device for one SSI.  We

 * de-program the DMACR and PMUXCR register.

 Restore the signal routing */

/**

 * p1022_rdk_ops: ASoC machine driver operations

/**

 * p1022_rdk_probe: platform probe function for the machine driver

 *

 * Although this is a machine driver, the SSI node is the "master" node with

 * respect to audio hardware connections.  Therefore, we create a new ASoC

 * device for each new SSI node that has a codec attached.

 ssi_pdev is the platform device for the SSI node that probed us */

 Find the codec node for this SSI. */

 ASoC core can match codec with device node */

	/*

	 * We register two DAIs per SSI, one for playback and the other for

	 * capture.  We support codecs that have separate DAIs for both playback

	 * and capture.

 The DAI names from the codec (snd_soc_dai_driver.name) */

	/*

	 * Configure the SSI for I2S slave mode.  Older device trees have

	 * an fsl,mode property, but we ignore that since there's really

	 * only one way to configure the SSI.

	/*

	 * In i2s-slave mode, the codec has its own clock source, so we

	 * need to get the frequency from the device tree and pass it to

	 * the codec driver.

 Find the playback DMA channel to use. */

 Find the capture DMA channel to use. */

 Initialize our DAI data structure.  */

 The platform driver name */

 Register with ASoC */

/**

 * p1022_rdk_remove: remove the platform device

 *

 * This function is called when the platform device is removed.

		/*

		 * The name must match 'compatible' property in the device tree,

		 * in lowercase letters.

/**

 * p1022_rdk_init: machine driver initialization.

 *

 * This function is called when this module is loaded.

 Get the physical address of the global utilities registers */

/**

 * p1022_rdk_exit: machine driver exit

 *

 * This function is called when this driver is unloaded.

 SPDX-License-Identifier: GPL-2.0



 Freescale ESAI ALSA SoC Digital Audio Interface (DAI) driver



 Copyright (C) 2014 Freescale Semiconductor, Inc.

/**

 * struct fsl_esai_soc_data - soc specific data

 * @reset_at_xrun: flags for enable reset operaton

/**

 * struct fsl_esai - ESAI private data

 * @dma_params_rx: DMA parameters for receive channel

 * @dma_params_tx: DMA parameters for transmit channel

 * @pdev: platform device pointer

 * @regmap: regmap handler

 * @coreclk: clock source to access register

 * @extalclk: esai clock source to derive HCK, SCK and FS

 * @fsysclk: system clock source to derive HCK, SCK and FS

 * @spbaclk: SPBA clock (optional, depending on SoC design)

 * @work: work to handle the reset operation

 * @soc: soc specific data

 * @lock: spin lock between hw_reset() and trigger()

 * @fifo_depth: depth of tx/rx FIFO

 * @slot_width: width of each DAI slot

 * @slots: number of slots

 * @tx_mask: slot mask for TX

 * @rx_mask: slot mask for RX

 * @channels: channel num for tx or rx

 * @hck_rate: clock rate of desired HCKx clock

 * @sck_rate: clock rate of desired SCKx clock

 * @hck_dir: the direction of HCKx pads

 * @sck_div: if using PSR/PM dividers for SCKx clock

 * @consumer_mode: if fully using DAI clock consumer mode

 * @synchronous: if using tx/rx synchronous mode

 * @name: driver name

 Protect hw_reset and trigger */

/**

 * fsl_esai_divisor_cal - This function is used to calculate the

 * divisors of psr, pm, fp and it is supposed to be called in

 * set_dai_sysclk() and set_bclk().

 *

 * @dai: pointer to DAI

 * @tx: current setting is for playback or capture

 * @ratio: desired overall ratio for the paticipating dividers

 * @usefp: for HCK setting, there is no need to set fp divider

 * @fp: bypass other dividers by setting fp directly if fp != 0

 Do not loop-search if PM (1 ~ 256) alone can serve the ratio */

 Set the max fluctuation -- 0.1% of the max devisor */

 Find the best value for PM */

 PSR (1 or 8) * PM (1 ~ 256) * FP (1 ~ 16) */

 Calculate the fraction */

 We are lucky */

 Bypass fp if not being required */

/**

 * fsl_esai_set_dai_sysclk - configure the clock frequency of MCLK (HCKT/HCKR)

 * @dai: pointer to DAI

 * @clk_id: The clock source of HCKT/HCKR

 *	  (Input from outside; output from inside, FSYS or EXTAL)

 * @freq: The required clock rate of HCKT/HCKR

 * @dir: The clock direction of HCKT/HCKR

 *

 * Note: If the direction is input, we do not care about clk_id.

 Bypass divider settings if the requirement doesn't change */

 sck_div can be only bypassed if ETO/ERO=0 and SNC_SOC_CLOCK_OUT */

 Set the direction of HCKT/HCKR pins */

 Block if clock source can not be divided into the required rate */

 Only EXTAL source can be output directly without using PSR and PM */

 Bypass all the dividers if not being needed */

 The ratio should be no less than 2 if using other sources */

/**

 * fsl_esai_set_bclk - configure the related dividers according to the bclk rate

 * @dai: pointer to DAI

 * @tx: direction boolean

 * @freq: bclk freq

 Don't apply for fully consumer mode or unchanged bclk */

 Block if clock source can not be divided into the required rate */

 The ratio should be contented by FP alone if bypassing PM and PSR */

 Save current bclk rate */

 DAI mode */

 Data on rising edge of bclk, frame low, 1clk before data */

 Data on rising edge of bclk, frame high */

 Data on rising edge of bclk, frame high, right aligned */

 Data on rising edge of bclk, frame high, 1clk before data */

 Data on rising edge of bclk, frame high */

 DAI clock inversion */

 Nothing to do for both normal cases */

 Invert bit clock */

 Invert frame clock */

 Invert both clocks */

 DAI clock provider masks */

 Set synchronous mode */

 Set slots count */

 Override slot_width if being specifically set */

 Recording in synchronous mode needs to set TCR also */

 Use Normal mode to support monaural audio */

 Remove ESAI personal reset by configuring ESAI_PCRC and ESAI_PRRC */

 Reset ESAI unit */

	/*

	 * We need to enable ESAI so as to access some of its registers.

	 * Otherwise, we would fail to dump regmap from user space.

 FIFO reset for safety */

 FIFO reset done */

 Write initial words reqiured by ESAI as normal procedure */

	/*

	 * When set the TE/RE in the end of enablement flow, there

	 * will be channel swap issue for multi data line case.

	 * In order to workaround this issue, we switch the bit

	 * enablement sequence to below sequence

	 * 1) clear the xSMB & xSMA: which is done in probe and

	 *                           stop state.

	 * 2) set TE/RE

	 * 3) set xSMB

	 * 4) set xSMA:  xSMA is the last one in this flow, which

	 *               will trigger esai to start.

 Enable Exception interrupt */

 Disable and reset FIFO */

 Save the registers */

 Stop the tx & rx */

 Reset the esai, and ignore return value */

 Enforce ESAI personal resets for both TX and RX */

 Restore registers by regcache_sync, and ignore return value */

 Remove ESAI personal resets by configuring PCRC and PRRC also */

 Restart tx / rx, if they already enabled */

 Get the addresses and IRQ */

 Set a default slot number */

 Set a default clock provider state */

 Determine the FIFO depth */

 Implement full symmetry for synchronous mode */

 Clear the TSMA, TSMB, RSMA, RSMB */

	/*

	 * Register platform component before registering cpu dai for there

	 * is not defer probe for platform component in snd_soc_add_pcm_runtime().

	/*

	 * Some platforms might use the same bit to gate all three or two of

	 * clocks, so keep all clocks open/close at the same time for safety

/*

 * ALSA SoC SPDIF In Audio Layer for spear processors

 *

 * Copyright (C) 2012 ST Microelectronics

 * Vipin Kumar <vipin.kumar@st.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

/*

 * ALSA SoC SPDIF Out Audio Layer for spear processors

 *

 * Copyright (C) 2012 ST Microelectronics

 * Vipin Kumar <vipin.kumar@st.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

		/*

		 * The clock is multiplied by 10 to bring it to feasible range

		 * of frequencies for sscg

 81.92 MHz */

 22.5792 MHz */

 24.576 MHz */

/*

 * ALSA PCM interface for ST SPEAr Processors

 *

 * sound/soc/spear/spear_pcm.c

 *

 * Copyright (C) 2012 ST Microelectronics

 * Rajeev Kumar<rajeevkumar.linux@gmail.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 max buffer size */

 1 msec data minimum period size */

 maximum period size */

 min # periods */

 max # of periods */

 fifo size in bytes */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson SA 2012

 *

 * Author: Ola Lilja <ola.o.lilja@stericsson.com>,

 *         Roger Nilsson <roger.xr.nilsson@stericsson.com>

 *         for ST-Ericsson.

 *

 * License terms:

 To avoid division by zero */

 Enable regulator */

 Prepare and enable clocks */

 Disable and unprepare clocks */

 Disable regulator */

 Set OPP-level */

		/* If the bit-clock is higher than 19.2MHz, Vape should be

		 * run in 100% OPP. Only when bit-clock is used (MSP master)

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson SA 2012

 *

 * Author: Ola Lilja (ola.o.lilja@stericsson.com)

 *         for ST-Ericsson.

 *

 * License terms:

 Define the whole MOP500 soundcard, linking platform to the codec-drivers  */

 Both links use the same codec, which is refcounted only once */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson SA 2012

 *

 * Author: Ola Lilja <ola.o.lilja@stericsson.com>,

 *         Roger Nilsson <roger.xr.nilsson@stericsson.com>,

 *         Sandeep Kaushik <sandeep.kaushik@st.com>

 *         for ST-Ericsson.

 *

 * License terms:

 Protocol desciptors */

 I2S */

 PCM */

 Companded PCM */

 The code below should not be separated. */

 Enable bit-clock */

 Configure msp with protocol dependent settings */

 Make sure the correct DMA-directions are configured */

 Enable frame generation logic */

 First do the global config register */

 Flush FIFOs */

 Flush TX-FIFO */

 Disable TX-channel */

 Flush RX-FIFO */

 Disable Loopback and Receive channel */

 disable sample rate and frame generators */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson SA 2012

 *

 * Author: Ola Lilja <ola.o.lilja@stericsson.com>,

 *         Roger Nilsson <roger.xr.nilsson@stericsson.com>

 *         for ST-Ericsson.

 *

 * License terms:

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson SA 2012

 *

 * Author: Ola Lilja <ola.o.lilja@stericsson.com>,

 *         Kristoffer Karlsson <kristoffer.karlsson@stericsson.com>

 *         for ST-Ericsson.

 *

 * License terms:

 Slot configuration */

 Configuration consistency parameters */

 Clocks */

 Private data for machine-part MOP500<->AB8500 */

 Clocks */

/*

 * Control-events

/*

 * Controls

 ASoC */

 Set audio-clock source */

 Reset slots configuration to default(s) */

 Ensure configuration consistency between DAIs */

 Setup codec depending on driver-mode */

 Setup format */

 Setup TDM-slots */

 Create driver private-data struct */

 Setup clocks */

 Set intclk default parent to ulpclk */

 Add controls */

 SPDX-License-Identifier: GPL-2.0-only



 tegra210_dmic.c - Tegra210 DMIC driver



 Copyright (c) 2020 NVIDIA CORPORATION.  All rights reserved.

 Below enables all filters - DCR, LP and SC */

 Below as per latest POR value */

 LP filter is configured for pass through and used to apply gain */

	/*

	 * DMIC clock rate is a multiple of 'Over Sampling Ratio' and

	 * 'Sample Rate'. The supported OSR values are 64, 128 and 256.

 Reg */

 Mask */

 Value */

	/*

	 * Use LP filter gain register to apply boost.

	 * Boost Gain Volume control has 100x factor.

 "CH0" */

 SPDX-License-Identifier: GPL-2.0-only



 tegra210_adx.c - Tegra210 ADX driver



 Copyright (c) 2021 NVIDIA CORPORATION.  All rights reserved.

 Ensure if ADX status is disabled */

	/*

	 * Soft Reset: Below performs module soft reset which clears

	 * all FSM logic, flushes flow control of FIFO and resets the

	 * state register. It also brings module back to disabled

	 * state (without flushing the data in the pipe).

 update byte map and enable slot */

 reset byte map and disable slot */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * tegra20_spdif.c - Tegra20 SPDIF driver

 *

 * Author: Stephen Warren <swarren@nvidia.com>

 * Copyright (C) 2011-2012 - NVIDIA, Inc.

 SPDX-License-Identifier: GPL-2.0-only



 tegra210_i2s.c - Tegra210 I2S driver



 Copyright (c) 2020 NVIDIA CORPORATION.  All rights reserved.

	/*

	 * Below update does not have any effect on Tegra186 and Tegra194.

	 * On Tegra210, I2S4 has "i2s4a" and "i2s4b" pins and below update

	 * is required to select i2s4b for it to be functional for I2S

	 * operation.

 No need to set rates if I2S is being operated in slave */

		/*

		 * Other I/O modules in AHUB can use i2s bclk as reference

		 * clock. Below sets sync input clock rate as per bclk,

		 * which can be used as input to other I/O modules.

 Store CIF and I2S control values */

 Reset to make sure the previous transactions are clean */

 Restore CIF and I2S control values */

 Ensure I2S is in disabled state before new session */

 Capture path */

 Playback path */

 I2S mode has data offset of 1 */

	/*

	 * For RJ mode data offset is dependent on the sample size

	 * and the bclk ratio, and so is set when hw_params is called.

 Copy the required tx and rx mask */

		/*

		 * Frame sync width is used only for FSYNC modes and not

		 * applicable for LRCK modes. Reset value for this field is "0",

		 * which means the width is one bit clock wide.

		 * The width requirement may depend on the codec and in such

		 * cases mixer control is used to update custom values. A value

		 * of "N" here means, width is "N + 1" bit clock wide.

 I2S bit clock rate */

	/*

	 * For LRCK mode, channel bit count depends on number of bit clocks

	 * on the left channel, where as for FSYNC mode bit count depends on

	 * the number of bit clocks in both left and right channels for DSP

	 * mode or the number of bit clocks in one TDM frame.

	 *

 Program sample size */

 For playback I2S RX-CIF and for capture TX-CIF is used */

 FIFO threshold in terms of frames */

 Playback route from XBAR */

 Capture route to XBAR */

	/*

	 * Not an error, as this clock is needed only when some other I/O

	 * requires input clock from current I2S instance, which is

	 * configurable from DT.

 SPDX-License-Identifier: GPL-2.0-only



 tegra210_amx.c - Tegra210 AMX driver



 Copyright (c) 2021 NVIDIA CORPORATION.  All rights reserved.

/*

 * The counter is in terms of AHUB clock cycles. If a frame is not

 * received within these clock cycles, the AMX input channel gets

 * automatically disabled. For now the counter is calculated as a

 * function of sample rate (8 kHz) and AHUB clock (49.152 MHz).

 * If later an accurate number is needed, the counter needs to be

 * calculated at runtime.

 *

 *     count = ahub_clk / sample_rate

 Ensure if AMX is disabled */

	/*

	 * Soft Reset: Below performs module soft reset which clears

	 * all FSM logic, flushes flow control of FIFO and resets the

	 * state register. It also brings module back to disabled

	 * state (without flushing the data in the pipe).

 Update byte map and enable slot */

 Reset byte map and disable slot */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * tegra20_das.c - Tegra20 DAS driver

 *

 * Author: Stephen Warren <swarren@nvidia.com>

 * Copyright (C) 2010 - NVIDIA, Inc.

 SPDX-License-Identifier: GPL-2.0-only



 tegra210_ahub.c - Tegra210 AHUB driver



 Copyright (c) 2020 NVIDIA CORPORATION.  All rights reserved.

	/*

	 * Find the bit position of current MUX input.

	 * If nothing is set, position would be 0 and it corresponds to 'None'.

 Find index related to the item in array *_ahub_mux_texts[] */

 Get the register index and value to set */

	/*

	 * Run through all parts of a MUX register to find the state changes.

	 * There will be an additional update if new MUX input value is from

	 * different part of the MUX register.

 Update widget power if state has changed */

 XBAR <-> I2S <-> Codec */

 XBAR <- DMIC <- Codec */

 XBAR -> SFC -> XBAR */

 XBAR -> MVC -> XBAR */

 XBAR -> AMX(4:1) -> XBAR */

 XBAR -> ADX(1:4) -> XBAR */

 XBAR -> MIXER(10:5) -> XBAR */

 XBAR <-> I2S <-> Codec */

 XBAR <- DMIC <- Codec */

 XBAR -> DSPK -> Codec */

 XBAR -> SFC -> XBAR */

 XBAR -> MVC -> XBAR */

 XBAR -> AMX(4:1) -> XBAR */

 XBAR -> ADX(1:4) -> XBAR */

 XBAR -> MIXER1(10:5) -> XBAR */

 ADMAIF */

 I2S */

 DMIC */

 SFC */

 MVC */

 AMX */

 ADX */

 MIXER */

 ADMAIF */

 I2S */

 ADMAIF */

 DMIC */

 SFC */

 MVC */

 AMX */

 ADX */

 MIXER */

 Controls for t210 */

 Controls for t186 */

/*

 * The number of entries in, and order of, this array is closely tied to the

 * calculation of tegra210_ahub_codec.num_dapm_widgets near the end of

 * tegra210_ahub_probe()

 Connect FEs with XBAR */

/*

 * The number of entries in, and order of, this array is closely tied to the

 * calculation of tegra210_ahub_codec.num_dapm_routes near the end of

 * tegra210_ahub_probe()

 SPDX-License-Identifier: GPL-2.0-only



 tegra210_mixer.c - Tegra210 MIXER driver



 Copyright (c) 2021 NVIDIA CORPORATION.  All rights reserved.

 Inputs */

 Outputs */

 Default gain parameters */

 Polynomial coefficients */

 Gain value */

 Duration Parameters */

 Check if busy */

 Write default gain poly coefficients */

 Write stored gain value */

 Write duration parameters */

 Trigger to apply gain configurations */

 Save gain value for specific MIXER input */

 Mixer Input */

 Mixer Output */

 Volume controls for all MIXER inputs */

 Input */

 Output */

 Use default gain value for all MIXER inputs */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * tegra20_ac97.c - Tegra20 AC97 platform driver

 *

 * Copyright (c) 2012 Lucas Stach <dev@lynxeye.de>

 *

 * Partly based on code copyright/by:

 *

 * Copyright (c) 2011,2012 Toradex Inc.

 reset line is not driven by DAC pad group, have to toggle GPIO */

	/*

	 * although sync line is driven by the DAC pad group warm reset using

	 * the controller cmd is not working, have to toggle sync line

	 * manually.

 XXX: crufty ASoC AC97 API - only one AC97 codec allowed */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * tegra30_ahub.c - Tegra30 AHUB driver

 *

 * Copyright (c) 2011,2012, NVIDIA CORPORATION.  All rights reserved.

/*

 * clk_apbif isn't required for an I2S<->I2S configuration where no PCM data

 * is read from or sent to memory. However, that's not something the rest of

 * the driver supports right now, so we'll just treat the two clocks as one

 * for now.

 *

 * These functions should not be a plain ref-count. Instead, each active stream

 * contributes some requirement to the minimum clock rate, so starting or

 * stopping streams should dynamically adjust the clock as required.  However,

 * this is not yet implemented.

 Tegra114+ */

 Tegra114+ */

 Tegra124 */

 Tegra124 */

 Tegra124 */

 Tegra124 */

 Tegra124 */

 Tegra124 */

 Tegra124 */

 Tegra124 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * tegra_asoc_machine.c - Universal ASoC machine driver for NVIDIA Tegra boards.

 Headphones Jack */

 Headset Jack */

 Mic Jack */

 Don't set cdev1/extern1 rate; it's locked to pll_a_out0 */

	/*

	 * If clock parents are not set in DT, configure here to use clk_out_1

	 * as mclk and extern1 as parent for Tegra30 and higher.

		/*

		 * AC97 rate is fixed at 24.576MHz and is used for both the

		 * host controller and the external codec

	/*

	 * FIXME: There is some unknown dependency between audio MCLK disable

	 * and suspend-resume functionality on Tegra30, although audio MCLK is

	 * only needed for audio.

 WM8753 machine */

 WM9712 machine */

 MAX98090 machine */

 SGTL5000 machine */

 TLV320AIC23 machine */

 RT5677 machine */

 RT5640 machine */

 RT5632 machine */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * tegra20_i2s.c - Tegra20 I2S driver

 *

 * Author: Stephen Warren <swarren@nvidia.com>

 * Copyright (C) 2010,2012 - NVIDIA, Inc.

 *

 * Based on code copyright/by:

 *

 * Copyright (c) 2009-2010, NVIDIA Corporation.

 * Scott Peterson <speterson@nvidia.com>

 *

 * Copyright (C) 2010 Google, Inc.

 * Iliyan Malchev <malchev@google.com>

 Final "* 2" required by Tegra hardware */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * tegra_pcm.c - Tegra PCM driver

 *

 * Author: Stephen Warren <swarren@nvidia.com>

 * Copyright (C) 2010,2012 - NVIDIA, Inc.

 *

 * Based on code copyright/by:

 *

 * Copyright (c) 2009-2010, NVIDIA Corporation.

 * Scott Peterson <speterson@nvidia.com>

 * Vijay Mali <vmali@nvidia.com>

 *

 * Copyright (C) 2010 Google, Inc.

 * Iliyan Malchev <malchev@google.com>

 Set HW params now that initialization is complete */

 Ensure period size is multiple of 8 */

	/*

	 * Fallback for backwards-compatibility with older device trees that

	 * have the iommus property in the virtual, top-level "sound" node.

 SPDX-License-Identifier: GPL-2.0-only



 tegra210_mvc.c - Tegra210 MVC driver



 Copyright (c) 2021 NVIDIA CORPORATION.  All rights reserved.

	/*

	 * Volume control read from mixer control is with

	 * 100x scaling; for CURVE_POLY the reg range

	 * is 0-100 (linear, Q24) and for CURVE_LINEAR

	 * it is -120dB to +40dB (Q8)

 Check if VOLUME_SWITCH is triggered */

 Check if VOLUME_SWITCH is triggered */

 Configure init volume same as target volume */

 Change volume to default init for new curve type */

 Program curve type */

 Init volume for all channels */

 Trigger volume switch */

	/*

	 * Soft Reset: Below performs module soft reset which clears

	 * all FSM logic, flushes flow control of FIFO and resets the

	 * state register. It also brings module back to disabled

	 * state (without flushing the data in the pipe).

 Set RX CIF */

 Set TX CIF */

 Program poly_n1, poly_n2, duration */

 Program duration_inv */

 Per channel volume control */

 Per channel mute */

 Input */

 Output */

 SPDX-License-Identifier: GPL-2.0-only



 tegra210_admaif.c - Tegra ADMAIF driver



 Copyright (c) 2020 NVIDIA CORPORATION.  All rights reserved.

 Disable TX/RX channel */

 Wait until ADMAIF TX/RX status is disabled */

 SW reset */

 Wait till SW reset is complete */

/*

 * Below macro is added to avoid looping over all ADMAIFx controls related

 * to mono/stereo conversions in get()/put() callbacks.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * tegra_wm8903.c - Tegra machine ASoC driver for boards using WM8903 codec.

 *

 * Author: Stephen Warren <swarren@nvidia.com>

 * Copyright (C) 2010-2012 - NVIDIA, Inc.

 *

 * Based on code copyright/by:

 *

 * (c) 2009, 2010 Nvidia Graphics Pvt. Ltd.

 *

 * Copyright 2007 Wolfson Microelectronics PLC.

 * Author: Graeme Gregory

 *         graeme.gregory@wolfsonmicro.com or linux@wolfsonmicro.com

 FIXME: Codec only requires >= 3MHz if OSR==0 */

	/*

	 * Older version of machine driver was ignoring GPIO polarity,

	 * forcing it to active-low.  This means that all older device-trees

	 * which set the polarity to active-high are wrong and we need to fix

	 * them up.

 older device-trees used wrong polarity for the headphones-detection GPIO */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * tegra30_i2s.c - Tegra30 I2S driver

 *

 * Author: Stephen Warren <swarren@nvidia.com>

 * Copyright (c) 2010-2012, NVIDIA CORPORATION.  All rights reserved.

 *

 * Based on code copyright/by:

 *

 * Copyright (c) 2009-2010, NVIDIA Corporation.

 * Scott Peterson <speterson@nvidia.com>

 *

 * Copyright (C) 2010 Google, Inc.

 * Iliyan Malchev <malchev@google.com>

 Final "* 2" required by Tegra hardware */

 set the fsync width to minimum of 1 clock width */

 SPDX-License-Identifier: GPL-2.0-only



 tegra_audio_graph_card.c - Audio Graph based Tegra Machine Driver



 Copyright (c) 2020-2021 NVIDIA CORPORATION.  All rights reserved.

	/*

	 * Sample rates multiple of 8000 Hz and below are supported:

	 * ( 8000, 16000, 32000, 48000, 96000, 192000 Hz )

	/*

	 * Sample rates multiple of 11025 Hz and below are supported:

	 * ( 11025, 22050, 44100, 88200, 176400 Hz )

 Tegra audio chip data */

 Setup PLL clock as per the given sample rate */

	/*

	 * Below is the clock relation:

	 *

	 *	PLLA

	 *	  |

	 *	  |--> PLLA_OUT0

	 *		  |

	 *		  |---> I2S modules

	 *		  |

	 *		  |---> DMIC modules

	 *		  |

	 *		  |---> DSPK modules

	 *

	 *

	 * Default PLLA_OUT0 rate might be too high when I/O is running

	 * at minimum PCM configurations. This may result in incorrect

	 * clock rates and glitchy audio. The maximum divider is 128

	 * and any thing higher than that won't work. Thus reduce PLLA_OUT0

	 * to work for lower configurations.

	 *

	 * This problem is seen for I2S only, as DMIC and DSPK minimum

	 * clock requirements are under allowed divider limits.

 Set PLLA rate */

 Set PLLA_OUT0 rate */

	/*

	 * This gets called for each DAI link (FE or BE) when DPCM is used.

	 * We may not want to update PLLA rate for each call. So PLLA update

	 * must be restricted to external I/O links (I2S, DMIC or DSPK) since

	 * they actually depend on it. I/O modules update their clocks in

	 * hw_param() of their respective component driver and PLLA rate

	 * update here helps them to derive appropriate rates.

	 *

	 * TODO: When more HW accelerators get added (like sample rate

	 * converter, volume gain controller etc., which don't really

	 * depend on PLLA) we need a better way to filter here.

 audio_graph_parse_of() depends on below */

 PLLA */

 PLLA_OUT0 */

 PLLA */

 PLLA_OUT0 */

 SPDX-License-Identifier: GPL-2.0-only



 tegra186_dspk.c - Tegra186 DSPK driver



 Copyright (c) 2020 NVIDIA CORPORATION. All rights reserved.

 Client channel */

 RX FIFO threshold in terms of frames */

	/*

	 * DSPK clock and PDM codec clock should be synchronous with 4:1 ratio,

	 * this is because it takes 4 clock cycles to send out one sample to

	 * codec by sigma delta modulator. Finally the clock rate is a multiple

	 * of 'Over Sampling Ratio', 'Sample Rate' and 'Interface Clock Ratio'.

 Reg */

 Mask */

 Value */

 "Zero" */

 SPDX-License-Identifier: GPL-2.0-only



 tegra210_sfc.c - Tegra210 SFC driver



 Copyright (c) 2021 NVIDIA CORPORATION.  All rights reserved.

 coeff RAM tables required for SFC */

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

interpolation + IIR filter

input gain

ouptut gain

interpolation + IIR filter

input gain

Output gain

Farrow filter

interpolation + IIR Filter

input gain

ouptut gain

interpolation + IIR filter

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

interpolation + IIR filter

input gain

output gain

interpolation + IIR filter

input gain

output gain

Farrow Filter

IIR Filter + Decimator

input gain

output gain

interpolation + IIR Filter

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

IIR Filter

input gain

output gain

Farrow Filter + decimation

IIR Filter + Decimator

input gain

output gain

header

input gain

output gain

header

input gain

output gain

IIR Filter + interpolation

input gain

output gain

Farrow Filter + decimation

IIR Filter + Decimator

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

IIR Filter + Decimator

input gain

output gain

IIR Filter + Decimator

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

IIR Filter + Decimator

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

header

input gain

output gain

header

input gain

output gain

farrow

header

input gain

output gain

/*

 * Coefficient table for various sample rate conversions. The sample

 * rates available are as per tegra210_sfc_rates[].

 Convertions from 8 kHz */

 Convertions from 11.025 kHz */

 Convertions from 16 kHz */

 Convertions from 22.05 kHz */

 Convertions from 24 kHz */

 Convertions from 32 kHz */

 Convertions from 44.1 kHz */

 Convertions from 48 kHz */

 Convertions from 88.2 kHz */

 Convertions from 96 kHz */

 Convertions from 176.4 kHz */

 Convertions from 192 kHz */

 Bypass */

	/*

	 * Soft Reset: Below performs module soft reset which clears

	 * all FSM logic, flushes flow control of FIFO and resets the

	 * state register. It also brings module back to disabled

	 * state (without flushing the data in the pipe).

 SPDX-License-Identifier: GPL-2.0-only

/*

 * omap-abe-twl6040.c  --  SoC audio for TI OMAP based boards with ABE and

 *			   twl6040 codec

 *

 * Author: Misael Lopez Cruz <misael.lopez@ti.com>

 board can detect jack events */

 MCLK frequency speed for twl6040 */

 set the codec mclk */

 Headset jack */

Headset jack detection DAPM pins */

 SDP4430 machine DAPM */

 Outputs */

 Inputs */

 Digital microphones */

 Routings for outputs */

 Routings for inputs */

	/*

	 * Configure McPDM offset cancellation based on the HSOTRIM value from

	 * twl6040.

 Headset jack detection only if it is supported */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * omap-mcbsp.c  --  OMAP ALSA SoC DAI driver using McBSP port

 *

 * Copyright (C) 2008 Nokia Corporation

 *

 * Contact: Jarkko Nikula <jarkko.nikula@bitmer.com>

 *          Peter Ujfalusi <peter.ujfalusi@ti.com>

 Writing zero to XSYNC_ERR clears the IRQ */

 Writing zero to RSYNC_ERR clears the IRQ */

/*

 * omap_mcbsp_config simply write a config to the

 * appropriate McBSP.

 * You either call this function or set the McBSP registers

 * by yourself before calling omap_mcbsp_start().

 We write the given config */

 Enable wakeup behavior */

 Enable TX/RX sync error interrupts by default */

/**

 * omap_mcbsp_dma_reg_params - returns the address of mcbsp data register

 * @mcbsp: omap_mcbsp struct for the McBSP instance

 * @stream: Stream direction (playback/capture)

 *

 * Returns the address of mcbsp data transmit register or data receive register

 * to be used by DMA for transferring/receiving data

/*

 * omap_mcbsp_set_rx_threshold configures the transmit threshold in words.

 * The threshold parameter is 1 based, and it is converted (threshold - 1)

 * for the THRSH2 register.

/*

 * omap_mcbsp_set_rx_threshold configures the receive threshold in words.

 * The threshold parameter is 1 based, and it is converted (threshold - 1)

 * for the THRSH1 register.

/*

 * omap_mcbsp_get_tx_delay returns the number of used slots in the McBSP FIFO

 Returns the number of free locations in the buffer */

 Number of slots are different in McBSP ports */

/*

 * omap_mcbsp_get_rx_delay returns the number of free slots in the McBSP FIFO

 * to reach the threshold value (when the DMA will be triggered to read it)

 Returns the number of used locations in the buffer */

 RX threshold */

 Return the number of location till we reach the threshold limit */

	/*

	 * Make sure that transmitter, receiver and sample-rate generator are

	 * not running before activating IRQs.

 Disable wakeup behavior */

 Disable wakeup behavior */

 Disable interrupt requests */

	/*

	 * Select CLKS source from internal source unconditionally before

	 * marking the McBSP port as free.

	 * If the external clock source via MCBSP_CLKS pin has been selected the

	 * system will refuse to enter idle if the CLKS pin source is not reset

	 * back to internal source.

/*

 * Here we start the McBSP, by enabling transmitter, receiver or both.

 * If no transmitter or receiver is active prior calling, then sample-rate

 * generator and frame sync are started.

 Only enable SRG, if McBSP is master */

 Start the sample generator */

 Enable transmitter and receiver */

	/*

	 * Worst case: CLKSRG*2 = 8000khz: (1/8000) * 2 * 2 usec

	 * REVISIT: 100us may give enough time for two CLKSRG, however

	 * due to some unknown PM related, clock gating etc. reason it

	 * is now at 500us.

 Start frame sync */

 Release the transmitter and receiver */

 Dump McBSP Regs */

 Reset transmitter */

 Reset receiver */

 Reset the sample rate generator */

/*

 * McBSP1 and McBSP3 are directly mapped on 1610 and 1510.

 * 730 has only 2 McBSP, and both of them are MPU peripherals.

	/*

	 * OMAP1, 2 uses two interrupt lines: TX, RX

	 * OMAP2430, OMAP3 SoC have combined IRQ line as well.

	 * OMAP4 and newer SoC only have the combined IRQ line.

	 * Use the combined IRQ if available since it gives better debugging

	 * possibilities.

		/*

		 * Initially configure the maximum thresholds to a safe value.

		 * The McBSP FIFO usage with these values should not go under

		 * 16 locations.

		 * If the whole FIFO without safety buffer is used, than there

		 * is a possibility that the DMA will be not able to push the

		 * new data on time, causing channel shifts in runtime.

/*

 * Stream DMA parameters. DMA request line and port address are set runtime

 * since they are different between OMAP1 and later OMAPs

 No need to proceed further if McBSP does not have FIFO */

	/*

	 * Configure McBSP threshold based on either:

	 * packet_size, when the sDMA is in packet mode, or based on the

	 * period size in THRESHOLD mode, otherwise use McBSP threshold = 1

	 * for mono streams.

 Configure McBSP internal buffer usage */

	/*

	 * OMAP3 McBSP FIFO is word structured.

	 * McBSP2 has 1024 + 256 = 1280 word long buffer,

	 * McBSP1,3,4,5 has 128 word long buffer

	 * This means that the size of the FIFO depends on the sample format.

	 * For example on McBSP3:

	 * 16bit samples: size is 128 * 2 = 256 bytes

	 * 32bit samples: size is 128 * 4 = 512 bytes

	 * It is simpler to place constraint for buffer and period based on

	 * channels.

	 * McBSP3 as example again (16 or 32 bit samples):

	 * 1 channel (mono): size is 128 frames (128 words)

	 * 2 channels (stereo): size is 128 / 2 = 64 frames (2 * 64 words)

	 * 4 channels: size is 128 / 4 = 32 frames (4 * 32 words)

		/*

		* Rule for the buffer size. We should not allow

		* smaller buffer than the FIFO size to avoid underruns.

		* This applies only for the playback stream.

 Make sure, that the period size is always even */

 Prevent omap hardware from hitting off between FIFO fills */

 No need to proceed further if McBSP does not have FIFO */

	/*

	 * Divide the used locations with the channel count to get the

	 * FIFO usage in samples (don't care about partial samples in the

	 * buffer).

			/*

			 * Use sDMA packet mode if McBSP is in threshold mode:

			 * If period words less than the FIFO size the packet

			 * size is set to the number of period words, otherwise

			 * Look for the biggest threshold value which divides

			 * the period size evenly.

 Use packet mode for non mono streams */

 McBSP already configured by another stream */

 Use dual-phase frames */

 Set 1 word per (McBSP) frame for phase1 and phase2 */

 Set word lengths */

 Set word lengths */

 Unsupported PCM format */

	/* In McBSP master modes, FRAME (i.e. sample rate) is generated

 Set FS period and length in terms of bit clock periods */

/*

 * This must be called before _set_clkdiv and _set_sysclk since McBSP register

 * cache is initialized here

 Generic McBSP register settings */

 RFIG and XFIG are not defined in 2430 and on OMAP3+ */

 Configure XCCR/RCCR only for revisions which have ccr registers */

 1-bit data delay */

 0-bit data delay */

 Invert FS polarity configuration */

 1-bit data delay */

 Invert FS polarity configuration */

 0-bit data delay */

 Invert FS polarity configuration */

 Unsupported data format */

 McBSP master. Set FS and bit clocks as outputs */

 Sample rate generator drives the FS */

 McBSP slave. FS clock as output */

 McBSP slave */

 Unsupported master/slave configuration */

 Set bit clock (CLKX/CLKR) and FS polarities */

		/*

		 * Normal BCLK + FS.

		 * FS active low. TX data driven on falling edge of bit clock

		 * and RX data sampled on rising edge of bit clock.

		/*

		 * If McBSP is master but yet the CLKX/CLKR pin drives the SRG,

		 * disable output on those pins. This enables to inject the

		 * reference clock through CLKX/CLKR. For this to work

		 * set_dai_sysclk() _needs_ to be called after set_dai_fmt().

 Disable ouput on CLKR pin in master mode */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * osk5912.c  --  SoC audio for OSK 5912

 *

 * Copyright (C) 2008 Mistral Solutions

 *

 * Contact: Arun KS  <arunks@mistralsolutions.com>

 Set the codec system clock for DAC and ADC */

 Digital audio interface glue - connects codec <--> CPU */

 Audio machine driver */

	/*

	 * Configure 12 MHz output on MCLK.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * omap3pandora.c  --  SoC audio for Pandora Handheld Console

 *

 * Author: Gražvydas Ignotas <notasas@gmail.com>

 Set the codec system clock for DAC and ADC */

 Set McBSP clock to external */

	/*

	 * The PCM1773 DAC datasheet requires 1ms delay between switching

	 * VCC power on/off and /PD pin high/low

/*

 * Audio paths on Pandora board:

 *

 *  |O| ---> PCM DAC +-> AMP -> Headphone Jack

 *  |M|         A    +--------> Line Out

 *  |A| <~~clk~~+

 *  |P| <--- TWL4030 <--------- Line In and MICs

 All TWL4030 output pins are floating */

 Not comnnected */

 Digital audio interface glue - connects codec <--> CPU */

 SoC card */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * omap-dmic.c  --  OMAP ASoC DMIC DAI driver

 *

 * Copyright (C) 2010 - 2011 Texas Instruments

 *

 * Author: David Lambert <dlambert@ti.com>

 *	   Misael Lopez Cruz <misael.lopez@ti.com>

 *	   Liam Girdwood <lrg@ti.com>

 *	   Peter Ujfalusi <peter.ujfalusi@ti.com>

 Configure DMA controller */

 Disable DMA request generation */

	/*

	 * 192KHz rate is only supported with 19.2MHz/3.84MHz clock

	 * configuration.

 Divider: 5 (192KHz sampling rate) */

 Divider: 16 */

 Divider: 5 */

 Divider: 8 */

 Divider: 10 */

 Divider: 8 */

 Divider: 5 (96KHz sampling rate) */

 packet size is threshold * channels */

 Configure uplink threshold */

 Set dmic out format */

 Configure dmic clock divider */

 re-parent not allowed if a stream is ongoing */

 disable clock while reparenting */

 Disable lines while request is ongoing */

 Configure DMIC threshold value */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * omap-twl4030.c  --  SoC audio for TI SoC based boards with twl4030 codec

 *

 * Copyright (C) 2012 Texas Instruments Incorporated - https://www.ti.com

 * All rights reserved.

 *

 * Author: Peter Ujfalusi <peter.ujfalusi@ti.com>

 *

 * This driver replaces the following machine drivers:

 * omap3beagle (Author: Steve Sakoman <steve@sakoman.com>)

 * omap3evm (Author: Anuj Aggarwal <anuj.aggarwal@ti.com>)

 * overo (Author: Steve Sakoman <steve@sakoman.com>)

 * igep0020 (Author: Enric Balletbo i Serra <eballetbo@iseebcn.com>)

 * zoom2 (Author: Misael Lopez Cruz <misael.lopez@ti.com>)

 * sdp3430 (Author: Misael Lopez Cruz <misael.lopez@ti.com>)

 board can detect jack events */

 Stereo I2S mode */

 Four channel TDM mode */

 Headset Stereophone:  HSOL, HSOR */

 External Speakers: HFL, HFR */

 External Speakers: PredrivL, PredrivR */

 Carkit speakers:  CARKITL, CARKITR */

 Earpiece */

 External Mics: MAINMIC, SUBMIC with bias */

 Headset Mic: HSMIC with bias */

 Digital Mics: DIGIMIC0, DIGIMIC1 with bias */

 Carkit In: CARKITMIC */

 Aux In: AUXL, AUXR */

 Headset jack detection DAPM pins */

 Headset jack detection gpios */

 Headset jack detection only if it is supported */

	/*

	 * NULL pdata means we booted with DT. In this case the routing is

	 * provided and the card is fully routed, no need to mark pins.

 Disable not connected paths if not used */

 Digital audio interface glue - connects codec <--> CPU */

 Audio machine driver */

 Optional: audio routing can be provided */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ALSA SoC Voice Codec Interface for TI DAVINCI processor

 *

 * Copyright (C) 2010 Texas Instruments.

 *

 * Author: Miguel Aguilar <miguel.aguilar@ridgerun.com>

 Start the sample generator and enable transmitter/receiver */

 Reset transmitter/receiver and sample rate/frame sync generators */

 Restart the codec before setup */

 General line settings */

 Determine xfer data type */

 DMA tx params */

 DMA rx params */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * edma-pcm.c - eDMA PCM driver using dmaengine for AM3xxx, AM4xxx

 *

 * Copyright (C) 2014 Texas Instruments, Inc.

 *

 * Author: Peter Ujfalusi <peter.ujfalusi@ti.com>

 *

 * Based on: sound/soc/tegra/tegra_pcm.c

 Limit by edma dmaengine driver */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * n810.c  --  SoC audio for Nokia N810

 *

 * Copyright (C) 2008 Nokia Corporation

 *

 * Contact: Jarkko Nikula <jarkko.nikula@bitmer.com>

 Set the codec system clock for DAC and ADC */

	/*

	 * Note that the mic bias is coming from Retu/Vilma and we don't have

	 * control over it atm. The analog HS mic is not working. <- TODO

 Digital audio interface glue - connects codec <--> CPU */

 Audio machine driver */

	/*

	 * Configure 12 MHz output on SYS_CLKOUT2. Therefore we must use

	 * 96 MHz as its parent in order to get 12 MHz

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ams-delta.c  --  SoC audio for Amstrad E3 (Delta) videophone

 *

 * Copyright (C) 2009 Janusz Krzysztofik <jkrzyszt@tis.icnet.pl>

 *

 * Initially based on sound/soc/omap/osk5912.x

 * Copyright (C) 2008 Mistral Solutions

 Board specific DAPM widgets */

 Handset */

 Handsfree/Speakerphone */

 How they are connected to codec pins */

/*

 * Controls, functional after the modem line discipline is activated.

 Virtual switch: audio input/output constellations */

 Selection <-> pin translation */

/*

 * Used for passing a codec structure pointer

 * from the board initialization code to the tty line discipline.

 Refuse any mode changes if we are not able to control the codec. */

 Translate selection to bitmap */

 Setup pins after corresponding bits if changed */

 Hook switch */

/* After we are able to control the codec over the modem,

 Handset */

 Handsfree */

/*

 * Modem line discipline, required for making above controls functional.

 * Activated from userspace with ldattach, possibly invoked from udev rule.

/* To actually apply any modem controlled configuration changes to the codec,

 * we must connect codec DAI pins to the modem for a moment.  Be careful not

	/* Reconnect the codec DAI back from the modem to the CPU DAI

 Line discipline .open() */

	/*

	 * Pass the codec structure pointer for use by other ldisc callbacks,

	 * both the card and the codec specific parts.

 Line discipline .close() */

 Prevent the hook switch from further changing the DAPM pins */

 Revert back to default audio input/output constellation */

 Line discipline .hangup() */

 Line discipline .receive_buf() */

 First modem response, complete setup procedure */

 Initialize timer used for config pulse generation */

 Link hook switch to DAPM pins */

 Complete modem response received, apply config to codec */

		/* Apply config pulse by connecting the codec to the modem

 Line discipline .write_wakeup() */

/*

 * Even if not very useful, the sound card can still work without any of the

 * above functionality activated.  You can still control its audio input/output

 * constellation and speakerphone gain from userspace by issuing AT commands

 * over the modem port.

/* Digital mute implemented using modem/CPU multiplexer.

 Our codec DAI probably doesn't have its own .ops structure */

 Will be used if the codec ever has its own digital_mute function */

/*

 * Card initialization

 Codec is ready, now add/activate board specific controls */

 Store a pointer to the codec structure for tty ldisc use */

	/* Add hook switch - can be used to control the codec from userspace

 Set up digital mute if not provided by the codec */

 Register optional line discipline for over the modem control */

 Set up initial pin constellation */

 DAI glue - connects codec <--> CPU */

 Audio card driver */

 Module init/exit */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ALSA SoC I2S (McBSP) Audio Layer for TI DAVINCI processor

 *

 * Author:      Vladimir Barinov, <vbarinov@embeddedalley.com>

 * Copyright:   (C) 2007 MontaVista Software, Inc., <source@mvista.com>

 *

 * DT support	(c) 2016 Petr Kulhavy, Barix AG <petr@barix.com>

 *		based on davinci-mcasp.c DT support

 *

 * TODO:

 * on DA850 implement HW FIFOs instead of DMA into DXR and DRR registers

/*

 * NOTE:  terminology here is confusing.

 *

 *  - This driver supports the "Audio Serial Port" (ASP),

 *    found on dm6446, dm355, and other DaVinci chips.

 *

 *  - But it labels it a "Multi-channel Buffered Serial Port"

 *    (McBSP) as on older chips like the dm642 ... which was

 *    backward-compatible, possibly explaining that confusion.

 *

 *  - OMAP chips have a controller called McBSP, which is

 *    incompatible with the DaVinci flavor of McBSP.

 *

 *  - Newer DaVinci chips have a controller called McASP,

 *    incompatible with ASP and with either McBSP.

 *

 * In short:  this uses ASP to implement I2S, not McBSP.

 * And it won't be the only DaVinci implemention of I2S.

	/*

	 * Combining both channels into 1 element will at least double the

	 * amount of time between servicing the dma channel, increase

	 * effiency, and reduce the chance of overrun/underrun. But,

	 * it will result in the left & right channels being swapped.

	 *

	 * If relabeling the left and right channels is not possible,

	 * you may want to let the codec know to swap them back.

	 *

	 * It may allow x10 the amount of time to service dma requests,

	 * if the codec is master and is using an unnecessarily fast bit clock

	 * (ie. tlvaic23b), independent of the sample rate. So, having an

	 * entire frame at once means it can be serviced at the sample rate

	 * instead of the bit clock rate.

	 *

	 * In the now unlikely case that an underrun still

	 * occurs, both the left and right samples will be repeated

	 * so that no pops are heard, and the left and right channels

	 * won't end up being swapped because of the underrun.

	/* The clock needs to toggle to complete reset.

	 * So, fake it by toggling the clk polarity.

 Enable transmitter or receiver */

 Start frame sync */

 Reset transmitter/receiver and sample rate/frame sync generators */

 Attention srgr is updated by hw_params! */

 set master/slave audio interface */

 cpu is master */

		/*

		 * Selection of the clock input pin that is the

		 * input for the Sample Rate Generator.

		 * McBSP FSR and FSX are driven by the Sample Rate

		 * Generator.

 codec is master */

 interface format */

		/* Davinci doesn't support TRUE I2S, but some codecs will have

		 * the left and right channels contiguous. This allows

		 * dsp_a mode to be used with an inverted normal frame clk.

		 * If your codec is master and does not have contiguous

		 * channels, then you will have sound on only one channel.

		 * Try using a different mode, or codec as slave.

		 *

		 * The TLV320AIC33 is an example of a codec where this works.

		 * It has a variable bit clock frequency allowing it to have

		 * valid data on every bit clock.

		 *

		 * The TLV320AIC23 is an example of a codec where this does not

		 * work. It has a fixed bit clock frequency with progressively

		 * more empty bit clock slots between channels as the sample

		 * rate is lowered.

		/* CLKRP Receive clock polarity,

		 *	1 - sampled on rising edge of CLKR

		 *	valid on rising edge

		 * CLKXP Transmit clock polarity,

		 *	1 - clocked on falling edge of CLKX

		 *	valid on rising edge

		 * FSRP  Receive frame sync pol, 0 - active high

		 * FSXP  Transmit frame sync pol, 0 - active high

		/* CLKRP Receive clock polarity,

		 *	0 - sampled on falling edge of CLKR

		 *	valid on falling edge

		 * CLKXP Transmit clock polarity,

		 *	0 - clocked on rising edge of CLKX

		 *	valid on falling edge

		 * FSRP  Receive frame sync pol, 1 - active low

		 * FSXP  Transmit frame sync pol, 1 - active low

		/* CLKRP Receive clock polarity,

		 *	1 - sampled on rising edge of CLKR

		 *	valid on rising edge

		 * CLKXP Transmit clock polarity,

		 *	1 - clocked on falling edge of CLKX

		 *	valid on rising edge

		 * FSRP  Receive frame sync pol, 1 - active low

		 * FSXP  Transmit frame sync pol, 1 - active low

		/* CLKRP Receive clock polarity,

		 *	0 - sampled on falling edge of CLKR

		 *	valid on falling edge

		 * CLKXP Transmit clock polarity,

		 *	0 - clocked on rising edge of CLKX

		 *	valid on falling edge

		 * FSRP  Receive frame sync pol, 0 - active high

		 * FSXP  Transmit frame sync pol, 0 - active high

 general line settings */

 symmetric waveforms */

 Clock and frame sync given from external sources */

 Determine xfer data type */

 start off disabled */

 Start the sample generator */

 Enable the transmitter */

 wait for any unexpected frame sync error to occur */

 Disable the transmitter to clear any outstanding XSYNCERR */

 setup DMA, first TX, then RX */

 SPDX-License-Identifier: GPL-2.0

/*

 * McBSP Sidetone support

 *

 * Copyright (C) 2004 Nokia Corporation

 * Author: Samuel Ortiz <samuel.ortiz@nokia.com>

 *

 * Contact: Jarkko Nikula <jarkko.nikula@bitmer.com>

 *          Peter Ujfalusi <peter.ujfalusi@ti.com>

 OMAP3 sidetone control registers */

********************* McBSP SSELCR bit definitions ***********************/

********************* McBSP Sidetone SYSCONFIG bit definitions ***********/

********************* McBSP Sidetone SGAINCR bit definitions *************/

 Bits 0:15 */

 Bits 16:31 */

********************* McBSP Sidetone SFIRCR bit definitions **************/

 Bits 0:15 */

********************* McBSP Sidetone SSELCR bit definitions **************/

 Sidetone filter coefficients */

 Number of filter coefficients in use */

 Disable Sidetone clock auto-gating for normal operation */

 Enable McBSP Sidetone */

 Enable Sidetone from Sidetone Core */

 Enable Sidetone clock auto-gating to reduce power consumption */

 OMAP McBSP implementation uses index values 0..4 */		\

 McBSP 2 */

 McBSP 3 */

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 2018 Texas Instruments Incorporated - https://www.ti.com

 *  Author: Peter Ujfalusi <peter.ujfalusi@ti.com>

 Standard names for the directions: 'tx' and 'rx' */

 One direction only PCM */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * omap-hdmi-audio.c -- OMAP4+ DSS HDMI audio support library

 *

 * Copyright (C) 2014 Texas Instruments Incorporated - https://www.ti.com

 *

 * Author: Jyri Sarha <jsarha@ti.com>

	/*

	 * Make sure that the period bytes are multiple of the DMA packet size.

	 * Largest packet size we use is 32 32-bit words = 128 bytes

	/*

	 * fill the IEC-60958 channel status word

 initialize the word bytes */

 specify IEC-60958-3 (commercial use) */

 specify that the audio is LPCM*/

 specify the clock accuracy */

	/*

	 * specify the word length. The same word length value can mean

	 * two different lengths. Hence, we need to specify the maximum

	 * word length as well.

	/*

	 * Fill the CEA-861 audio infoframe (see spec for details)

 not used, all zeros */

 the expression is trivial but makes clear what we are doing */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * omap-mcpdm.c  --  OMAP ALSA SoC DAI driver using McPDM port

 *

 * Copyright (C) 2009 - 2011 Texas Instruments

 *

 * Author: Misael Lopez Cruz <misael.lopez@ti.com>

 * Contact: Jorge Eduardo Candelaria <x0107209@ti.com>

 *          Margarita Olaya <magi.olaya@ti.com>

 *          Peter Ujfalusi <peter.ujfalusi@ti.com>

 channel mask for the direction */

 FIFO threshold */

 Playback/Capture configuration */

 McPDM dn offsets for rx1, and 2 channels */

 McPDM needs to be restarted due to runtime reconfiguration */

 pm state for suspend/resume handling */

/*

 * Stream DMA parameters

/*

 * Enables the transfer through the PDM interface to/from the Phoenix

 * codec by enabling the corresponding UP or DN channels.

/*

 * Disables the transfer through the PDM interface to/from the Phoenix

 * codec by disabling the corresponding UP or DN channels.

/*

 * Is the physical McPDM interface active.

/*

 * Configures McPDM uplink, and downlink for audio.

 * This function should be called before omap_mcpdm_start.

 Enable DN RX1/2 offset cancellation feature, if configured */

/*

 * Cleans McPDM uplink, and downlink configuration.

 * This function should be called when the stream is closed.

 Disable irq request generation for downlink */

 Disable DMA request generation for downlink */

 Disable irq request generation for uplink */

 Disable DMA request generation for uplink */

 Disable RX1/2 offset cancellation */

 Acknowledge irq event */

 up to 3 channels for capture */

 up to 3 channels for capture */

 unsupported number of channels */

 Configure McPDM channels, and DMA packet size */

 If capture is not running assume a stereo stream to come */

 If playback is not running assume a stereo stream to come */

	/*

	 * The DMA must act to a DMA request within latency time (usec) to avoid

	 * under/overflow

 Check if we need to restart McPDM with this stream */

 Prevent omap hardware from hitting off between FIFO fills */

 Disable lines while request is ongoing */

 Configure McPDM threshold values */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ALSA SoC McASP Audio Layer for TI DAVINCI processor

 *

 * Multi-channel Audio Serial Port Driver

 *

 * Author: Nirmal Pandey <n-pandey@ti.com>,

 *         Suresh Rajashekara <suresh.r@ti.com>

 *         Steve Chen <schen@.mvista.com>

 *

 * Copyright:   (C) 2009 MontaVista Software, Inc., <source@mvista.com>

 * Copyright:   (C) 2009  Texas Instruments, India

 for read/write fifo control registers */

 for serializer configuration */

 Audio can not be enabled due to missing parameter(s) */

 McASP specific data */

 Pin direction bitfield */

 McASP FIFO related */

 Used for comstraint setting on the second stream */

 programming GBLCTL needs to read back from GBLCTL and verfiy */

 loop count is to avoid the lock-up */

 enable FIFO */

 Start clocks */

	/*

	 * When ASYNC == 0 the transmit and receive sections operate

	 * synchronously from the transmit clock and frame sync. We need to make

	 * sure that the TX signlas are enabled when starting reception.

 Activate serializer(s) */

 Release RX state machine */

 Release Frame Sync generator */

 enable receive IRQs */

 enable FIFO */

 Start clocks */

 Activate serializer(s) */

 wait for XDATA to be cleared */

 Release TX state machine */

 Release Frame Sync generator */

 enable transmit IRQs */

 disable IRQ sources */

	/*

	 * In synchronous mode stop the TX clocks if no other stream is

	 * running

 disable FIFO */

 disable IRQ sources */

	/*

	 * In synchronous mode keep TX clocks running if the capture stream is

	 * still running.

 disable FIFO */

 Ack the handled event only */

 Ack the handled event only */

 1st data bit occur one ACLK cycle after the frame sync */

 No delay after FS */

 configure a full-word SYNC pulse (LRCLK) */

 1st data bit occur one ACLK cycle after the frame sync */

 FS need to be inverted */

 configure a full-word SYNC pulse (LRCLK) */

 No delay after FS */

 codec is clock and frame slave */

 BCLK */

 Frame Sync */

 codec is clock slave and frame master */

 BCLK */

 Frame Sync */

 codec is clock master and frame slave */

 BCLK */

 Frame Sync */

 codec is clock and frame master */

 BCLK */

 Frame Sync */

 MCLK divider */

 BCLK divider */

		/*

		 * BCLK/LRCLK ratio descries how many bit-clock cycles

		 * fit into one frame. The clock ratio is given for a

		 * full period of data (for I2S format both left and

		 * right channels), so it has to be divided by number

		 * of tdm-slots (for I2S - divided by 2).

		 * Instead of storing this ratio, we calculate a new

		 * tdm_slot width by dividing the ratio by the

		 * number of configured tdm slots.

 Select AUXCLK as HCLK */

	/*

	 * When AHCLK X/R is selected to be output it means that the HCLK is

	 * the same clock - coming via AUXCLK.

 All serializers must have equal number of channels */

	/*

	 * TX rotation:

	 * right aligned formats: rotate w/ slot_width

	 * left aligned formats: rotate w/ sample_width

	 *

	 * RX rotation:

	 * right aligned formats: no rotation needed

	 * left aligned formats: rotate w/ (slot_width - sample_width)

 mapping of the XSSZ bit-field as described in the datasheet */

		/*

		 * according to the TRM it should be TXROT=0, this one works:

		 * 16 bit to 23-8 (TXROT=6, rotate 24 bits)

		 * 24 bit to 23-0 (TXROT=0, rotate 0 bits)

		 *

		 * TXROT = 0 only works with 24bit samples

 In DIT mode we only allow maximum of one serializers for now */

 Default configuration */

 Inactive or unused pin, set it to inactive */

 If unused, set DISMOD for the pin */

 AFIFO is not in use */

 Configure the burst size for platform drivers */

			/*

			 * If more than one serializers are in use we have one

			 * DMA request to provide data for all serializers.

			 * For example if three serializers are enabled the DMA

			 * need to transfer three words per DMA request.

	/*

	 * Calculate the optimal AFIFO depth for platform side:

	 * The number of words for numevt need to be in steps of active

	 * serializers.

 Configure the burst size for platform drivers */

	/*

	 * If more than one serializer is needed, then use them with

	 * all the specified tdm_slots. Otherwise, one serializer can

	 * cope with the transaction using just as many slots as there

	 * are channels in the stream.

		/*

		 * If McASP is set to be TX/RX synchronous and the playback is

		 * not running already we need to configure the TX slots in

		 * order to have correct FSX on the bus

 S/PDIF */

 Set TX frame synch : DIT Mode, 1 bit width, internal, rising edge */

 Set the TX tdm : for all the slots */

 Set the TX clock controls : div = 1 and internal */

 Set S/PDIF channel status bits */

 Enable the DIT */

	/*

	 * Divide the used locations with the channel count to get the

	 * FIFO usage in samples (don't care about partial samples in the

	 * buffer).

	/*

	 * If mcasp is BCLK master, and a BCLK divider was not provided by

	 * the machine driver, we need to calculate the ratio.

 Do not allow more then one stream per direction */

	/*

	 * Limit the maximum allowed channels for the first stream:

	 * number of serializers for the direction * tdm slots per serializer

	/*

	 * If the already active stream has less channels than the calculated

	 * limit based on the seirializers * tdm_slots, and only one serializer

	 * is in use we need to use that as a constraint for the second stream.

	 * Otherwise (first stream or less allowed channels or more than one

	 * serializer in use) we use the calculated constraint.

	/*

	 * But we can always allow channels upto the amount of

	 * the available tdm_slots.

		/*

		 * Only allow formats which require same amount of bits on the

		 * bus as the currently running stream

 Only allow formats require <= slot_width bits on the bus */

	/*

	 * If we rely on implicit BCLK divider setting we should

	 * set constraints based on what we can provide.

 Some HW specific values and defaults. The rest is filled in from DT. */

 The CFG port offset will be calculated if it is needed */

 sentinel */ }

 sanity check for tdm slots parameter */

 Do not change the PIN yet */

 Set the direction to input */

 Set the pin as McASP pin */

 Set the pin as GPIO pin */

 Set the direction to output */

 Set the direction to input */

 Set the pin as GPIO pin */

 CONFIG_GPIOLIB */

 CONFIG_GPIOLIB */

 All PINS as McASP */

 Skip audio related setup code if the configuration is not adequat */

		/*

		 * According to the TRM there should be 0x200 offset added to

		 * the DAT port address

 RX is not valid in DIT mode */

 dma_params->dma_addr is pointing to the data port address */

	/* Allocate memory for long enough list for all possible

	 * scenarios. Maximum number tdm slots is 32 and there cannot

	 * be more serializers than given in the configuration.  The

	 * serializer directions could be taken into account, but it

	 * would make code much more complex and save only couple of

	 * bytes.

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 2020 Texas Instruments Incorporated - http://www.ti.com

 *  Author: Peter Ujfalusi <peter.ujfalusi@ti.com>

/*

 * Maximum number of configuration entries for prefixes:

 * CPB: 2 (mcasp10 + codec)

 * IVI: 3 (mcasp0 + 2x codec)

 Reset TDM slots to 32 */

 Set up initial clock configuration */

 Set initial tdm slots */

 CPB pcm3168a */

 PLL15 */

 PLL4 */

 CPB pcm3168a + 2x pcm3168a on IVI */

 PLL15 */

 PLL4 */

 CPB pcm3168a */

 PLL4 */

	/*

	 * Common Processor Board, two links

	 * Link 1: McASP10 -> pcm3168a_1 DAC

	 * Link 2: McASP10 <- pcm3168a_1 ADC

	/*

	 * IVI extension, two links

	 * Link 1: McASP0 -> pcm3168a_a DAC

	 *		  \> pcm3168a_b DAC

	 * Link 2: McASP0 <- pcm3168a_a ADC

	 *		   \ pcm3168a_b ADC

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 2020 Texas Instruments Incorporated - https://www.ti.com

 *  Author: Peter Ujfalusi <peter.ujfalusi@ti.com>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ASoC driver for TI DAVINCI EVM platform

 *

 * Author:      Vladimir Barinov, <vbarinov@embeddedalley.com>

 * Copyright:   (C) 2007 MontaVista Software, Inc., <source@mvista.com>

 set the codec system clock */

 set the CPU system clock */

 davinci-evm machine dapm widgets */

 davinci-evm machine audio_mapnections to the codec pins */

 Headphone connected to HPLOUT, HPROUT */

 Line Out connected to LLOUT, RLOUT */

 Mic connected to (MIC3L | MIC3R) */

 Line In connected to (LINE1L | LINE2L), (LINE1R | LINE2R) */

 Logic for a aic3x as connected on a davinci-evm */

 Add davinci-evm specific widgets */

 Set up davinci-evm specific audio path audio_map */

 not connected */

 davinci-evm digital audio interface glue - connects codec <--> CPU */

 davinci dm6446 evm audio machine driver */

/*

 * ASP0 in DM6446 EVM is clocked by U55, as configured by

 * board-dm644x-evm.c using GPIOs from U18.  There are six

 * options; here we "know" we use a 48 KHz sample rate.

 davinci dm355 evm audio machine driver */

 ASP1 on DM355 EVM is clocked by an external oscillator */

 davinci dm365 evm audio machine driver */

 davinci dm6467 evm audio machine driver */

/*

 * The struct is used as place holder. It will be completely

 * filled with data from dt node.

 sentinel */ }

 davinci evm audio machine driver */

	/*

	 * If dtb is there, the devices will be created dynamically.

	 * Only register platfrom driver structure.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rx51.c  --  SoC audio for Nokia RX-51

 *

 * Copyright (C) 2008 - 2009 Nokia Corporation

 *

 * Contact: Peter Ujfalusi <peter.ujfalusi@ti.com>

 *          Eduardo Valentin <eduardo.valentin@nokia.com>

 *          Jarkko Nikula <jarkko.nikula@bitmer.com>

 tv-out with stereo output */

 headphone: stereo output, no mic */

 headset: stereo output with mic */

 Set the codec system clock for DAC and ADC */

 AV jack detection */

 prepare gpio for snd_soc_jack_add_gpios */

 Digital audio interface glue - connects codec <--> CPU */

 Audio card */

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2019 Spreadtrum Communications Inc.

		/*

		 * Configure the link-list address for the DMA engine link-list

		 * mode.

		/*

		 * We configure the DMA request mode, interrupt mode, channel

		 * mode and channel trigger mode by the flags.

		/*

		 * We just get current transfer address from the DMA engine, so

		 * we need convert to current pointer.

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2019 Spreadtrum Communications Inc.

 MCDT registers definition */

 Channel water mark definition */

 DMA channel select definition */

 DMA channel ACK select definition */

 Channel FIFO definition */

/**

 * sprd_mcdt_chan_write - write data to the MCDT channel's fifo

 * @chan: the MCDT channel

 * @tx_buf: send buffer

 * @size: data size

 *

 * Note: We can not write data to the channel fifo when enabling the DMA mode,

 * otherwise the channel fifo data will be invalid.

 *

 * If there are not enough space of the channel fifo, it will return errors

 * to users.

 *

 * Returns 0 on success, or an appropriate error code on failure.

/**

 * sprd_mcdt_chan_read - read data from the MCDT channel's fifo

 * @chan: the MCDT channel

 * @rx_buf: receive buffer

 * @size: data size

 *

 * Note: We can not read data from the channel fifo when enabling the DMA mode,

 * otherwise the reading data will be invalid.

 *

 * Usually user need start to read data once receiving the fifo full interrupt.

 *

 * Returns data size of reading successfully, or an error code on failure.

/**

 * sprd_mcdt_chan_int_enable - enable the interrupt mode for the MCDT channel

 * @chan: the MCDT channel

 * @water_mark: water mark to trigger a interrupt

 * @cb: callback when a interrupt happened

 *

 * Now it only can enable fifo almost full interrupt for ADC channel and fifo

 * almost empty interrupt for DAC channel. Morevoer for interrupt mode, user

 * should use sprd_mcdt_chan_read() or sprd_mcdt_chan_write() to read or write

 * data manually.

 *

 * For ADC channel, user can start to read data once receiving one fifo full

 * interrupt. For DAC channel, user can start to write data once receiving one

 * fifo empty interrupt or just call sprd_mcdt_chan_write() to write data

 * directly.

 *

 * Returns 0 on success, or an error code on failure.

/**

 * sprd_mcdt_chan_int_disable - disable the interrupt mode for the MCDT channel

 * @chan: the MCDT channel

/**

 * sprd_mcdt_chan_dma_enable - enable the DMA mode for the MCDT channel

 * @chan: the MCDT channel

 * @dma_chan: specify which DMA channel will be used for this MCDT channel

 * @water_mark: water mark to trigger a DMA request

 *

 * Enable the DMA mode for the MCDT channel, that means we can use DMA to

 * transfer data to the channel fifo and do not need reading/writing data

 * manually.

 *

 * Returns 0 on success, or an error code on failure.

/**

 * sprd_mcdt_chan_dma_disable - disable the DMA mode for the MCDT channel

 * @chan: the MCDT channel

/**

 * sprd_mcdt_request_chan - request one MCDT channel

 * @channel: channel id

 * @type: channel type, it can be one ADC channel or DAC channel

 *

 * Rreturn NULL if no available channel.

/**

 * sprd_mcdt_free_chan - free one MCDT channel

 * @chan: the channel to be freed

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2019 Spreadtrum Communications Inc.

 Default values if userspace does not set */

 DSP FIFO size */

 Stage 0 IRAM buffer size definition */

 Stage 1 DDR buffer size definition */

/*

 * The Spreadtrum Audio compress offload mode will use 2-stage DMA transfer to

 * save power. That means we can request 2 dma channels, one for source channel,

 * and another one for destination channel. Once the source channel's transaction

 * is done, it will trigger the destination channel's transaction automatically

 * by hardware signal.

 *

 * For 2-stage DMA transfer, we can allocate 2 buffers: IRAM buffer (always

 * power-on) and DDR buffer. The source channel will transfer data from IRAM

 * buffer to the DSP fifo to decoding/encoding, once IRAM buffer is empty by

 * transferring done, the destination channel will start to transfer data from

 * DDR buffer to IRAM buffer.

 *

 * Since the DSP fifo is only 512B, IRAM buffer is allocated by 32K, and DDR

 * buffer is larger to 2M. That means only the IRAM 32k data is transferred

 * done, we can wake up the AP system to transfer data from DDR to IRAM, and

 * other time the AP system can be suspended to save power.

 DMA engine channel number */

 Stage 0 IRAM buffer */

 Stage 1 DDR buffer */

 DSP play information IRAM buffer */

 Data size copied to IRAM buffer */

 Total received data size from userspace */

 Stage 0 IRAM buffer received data size */

 Stage 1 DDR buffer received data size */

 Stage 1 DDR buffer pointer */

 Update data size copied to IRAM buffer */

	/*

	 * Configure the link-list address for the DMA engine link-list

	 * mode.

	/*

	 * We configure the DMA request mode, interrupt mode, channel

	 * mode and channel trigger mode by the flags.

 Only channel 1 transfer can wake up the AP system. */

	/*

	 * Configure the DMA engine 2-stage transfer mode. Channel 1 set as the

	 * destination channel, and channel 0 set as the source channel, that

	 * means once the source channel's transaction is done, it will trigger

	 * the destination channel's transaction automatically.

	/*

	 * Allocate the stage 0 IRAM buffer size, including the DMA 0

	 * link-list size and play information of DSP address size.

 Use to save link-list configuration for DMA 0. */

 Use to update the current data offset of DSP. */

	/*

	 * Allocate the stage 1 DDR buffer size, including the DMA 1 link-list

	 * size.

 Use to save link-list configuration for DMA 1. */

	/*

	 * We usually set fragment size as 32K, and the stage 0 IRAM buffer

	 * size is 32K too. So if now the received data size of the stage 0

	 * IRAM buffer is less than 32K, that means we have some available

	 * spaces for the stage 0 IRAM buffer.

			/*

			 * Copy data to the stage 0 IRAM buffer directly if

			 * spaces are enough.

			/*

			 * If the data count is larger than the available spaces

			 * of the stage 0 IRAM buffer, we should copy one

			 * partial data to the stage 0 IRAM buffer, and copy

			 * the left to the stage 1 DDR buffer.

	/*

	 * Copy data to the stage 1 DDR buffer if no spaces for the stage 0 IRAM

	 * buffer.

 Update the copied data size. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * IMG I2S output controller driver

 *

 * Copyright (C) 2015 Imagination Technologies Ltd.

 *

 * Author: Damien Horsley <Damien.Horsley@imgtec.com>

 If diffs are equal, use lower clock rate */

	/*

	 * Another driver (eg alsa machine driver) may have rejected the above

	 * change. Get the current rate and set the register bit according to

	 * the new minimum diff

 SPDX-License-Identifier: GPL-2.0-only

/*

 * IMG parallel output controller driver

 *

 * Copyright (C) 2015 Imagination Technologies Ltd.

 *

 * Author: Damien Horsley <Damien.Horsley@imgtec.com>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * IMG SPDIF output controller driver

 *

 * Copyright (C) 2015 Imagination Technologies Ltd.

 *

 * Author: Damien Horsley <Damien.Horsley@imgtec.com>

 If diffs are equal, use lower clock rate */

	/*

	 * Another driver (eg machine driver) may have rejected the above

	 * change. Get the current rate and set the register bit according to

	 * the new min diff

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pistachio internal dac driver

 *

 * Copyright (C) 2015 Imagination Technologies Ltd.

 *

 * Author: Damien Horsley <Damien.Horsley@imgtec.com>

 codec private data */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * IMG I2S input controller driver

 *

 * Copyright (C) 2015 Imagination Technologies Ltd.

 *

 * Author: Damien Horsley <Damien.Horsley@imgtec.com>

	/*

	 * BLKP and LRD must be set during separate register writes

 SPDX-License-Identifier: GPL-2.0-only

/*

 * IMG SPDIF input controller driver

 *

 * Copyright (C) 2015 Imagination Technologies Ltd.

 *

 * Author: Damien Horsley <Damien.Horsley@imgtec.com>

 Write-only registers */

 Clock rate must be at least 24x the bit rate */

	/*

	 * Calculate oversampling ratio, nominal phase increment and hold

	 * increment for the given rate / frequency

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  als300.c - driver for Avance Logic ALS300/ALS300+ soundcards.

 *  Copyright (C) 2005 by Ash Willis <ashwillis@programmer.net>

 *

 *  TODO

 *  4 channel playback for ALS300+

 *  gameport

 *  mpu401

 *  opl3

 *

 *  NOTES

 *  The BLOCK_COUNTER registers for the ALS300(+) return a figure related to

 *  the position in the current period, NOT the whole buffer. It is important

 *  to know which period we are in so we can calculate the correct pointer.

 *  This is why we always use 2 periods. We can then use a flip-flop variable

 *  to keep track of what period we are in.

 snd_als300_set_irq_flag */

 I/O port layout */

 ALS300 Only */

 ALS300+ Only */

 ALS300 Rev. E+, ALS300+ */

 ALS300+ Only */

 General Control Registers */

 ALS300 or ALS300+ */

 Enable/Disable Interrupts */

	/* boolean XOR check, since old vs. new hardware have

	   directly reversed bit setting for ENABLE and DISABLE.

 shared IRQ, for different device?? Exit ASAP! */

 ACK everything ASAP */

 shared IRQ, for different device?? Exit ASAP! */

	/* FIXME: Ack other interrupt types. Not important right now as

/* hardware definition

 *

 * In AC97 mode, we always use 48k/16bit/stereo.

 * Any request to change data type is ignored by

 * the card when it is running outside of legacy

 * mode.

 set block size */

 set dma area */

 set block size */

 set dma area */

 set operators */

 pre-allocation of buffers */

 Setup DRAM */

 Enable IRQ output */

	/* Unmute hardware devices so their outputs get routed to

 Reset volumes */

 Make sure playback transfer is stopped */

		/* don't know much about ALS300+ yet

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   ALSA modem driver for Intel ICH (i8x0) chipsets

 *

 *	Copyright (c) 2000 Jaroslav Kysela <perex@perex.cz>

 *

 *   This is modified (by Sasha Khapyorsky <sashak@alsa-project.org>) version

 *   of ALSA ICH sound driver intel8x0.c .

 Exclude the first card */

 ID for this card */

 just for backward compatibility */

/*

 *  Direct registers

 dword - buffer descriptor list base address */ \

 byte - current index value */ \

 byte - last valid index */ \

 byte - status register */ \

 word - position in current buffer */ \

 byte - prefetched index value */ \

 byte - control register */ \

 busmaster blocks */

 offset */

 values for each busmaster block */

 LVI */

 SR */

 FIFO error */

 buffer completion interrupt status */

 last valid buffer completion interrupt */

 current equals last valid */

 DMA controller halted */

 PIV */

 mask */

 CR */

 interrupt on completion enable */

 fifo error interrupt enable */

 last valid buffer interrupt enable */

 reset busmaster registers */

 start busmaster operation */

 global block */

 dword - global control */

 tertiary resume interrupt enable */

 secondary resume interrupt enable */

 primary resume interrupt enable */

 AClink shut off */

 AC'97 warm reset */

 AC'97 cold reset */

 GPI interrupt enable */

 dword - global status */

 ICH4: tertiary (AC_SDIN2) resume interrupt */

 ICH4: tertiary (AC_SDIN2) codec ready */

 ICH4: bit clock stopped */

 ICH4: S/PDIF interrupt */

 ICH4: PCM2-In interrupt */

 ICH4: Mic2-In interrupt */

 ICH4: sample capability bits (RO) */

 ICH4: multi-channel capability bits (RO) */

 modem power down semaphore */

 audio power down semaphore */

 read completion status */

 bit 3 slot 12 */

 bit 2 slot 12 */

 bit 1 slot 12 */

 secondary (AC_SDIN1) resume interrupt */

 primary (AC_SDIN0) resume interrupt */

 secondary (AC_SDIN1) codec ready */

 primary (AC_SDIN0) codec ready */

 MIC capture interrupt */

 playback interrupt */

 capture interrupt */

 nforce spdif interrupt */

 modem playback interrupt */

 modem capture interrupt */

 GPI status change interrupt */

 byte - codec write semaphore */

 codec access semaphore */

 max hw frags */

/*

 *  

 ich device number */

 offset to bmaddr */

 CPU address (32bit) */

 PCI bus address (32bit) */

 physical address (32bit) */

 interrupt status mask */

 ALI DMA slot */

 interrupt status register */

 interrupt status mask */

 82801AA */

 82901AB */

 82801BA */

 ICH3 */

 ICH4 */

 ICH5 */

 ICH6 */

 ICH7 */

 440MX */

 AMD768 */

 SI7013 */

 NFORCE */

 NFORCE2 */

 NFORCE2s */

 NFORCE3 */

 AMD8111 */

 Ali5455 */

/*

 *  Lowlevel I/O - busmaster

/*

 *  Lowlevel I/O - AC'97 registers

/*

 *  Basic I/O

/*

 * access to AC97 codec via normal i/o (for ICH and SIS7013)

 return the GLOB_STA bit for the corresponding codec */

 codec ready ? */

 Anyone holding a semaphore for 1 msec should be shot... */

	/* access to some forbidden (non existent) ac97 registers will not

	 * reset the semaphore. So even if you don't get the semaphore, still

 clear semaphore flag */

 I don't care about the semaphore */

 reset RCS and preserve other R/WC bits */

 clear semaphore */

/*

 * DMA I/O

 interrupt on completion */

 interrupt on completion */

 interrupt on completion */

			/*

			dev_dbg(chip->card->dev, "bdbar[%i] = 0x%x [0x%x]\n",

			       idx + 0, bdbar[idx + 0], bdbar[idx + 1]);

 clear interrupts */

/*

 *  Interrupt handler

 snd_printd("civ same %d\n", civ);

 if (step != 1)

	snd_printd("step = %d, %d -> %d\n", step, ichdev->civ, civ);

 we are not yet resumed */

 ack them */

/*

 *  PCM part

 wait until DMA stopped */

 reset whole DMA things */

 activate PCM only when associated AC'97 codec */

/*

 *  Mixer part

 clear the cold-reset bit for the next chance */

/*

 *

 put logic to right state */

 first clear status bits */

 ACLink on, 2 channels */

 finish cold or do warm reset */

 give warm reset some time */

		/* wait for any codec ready status.

		 * Once it becomes ready it should remain ready

		 * as long as we do not disable the ac97 link.

 no codec is found */

 up to two codecs (modem cannot be tertiary with ICH4) */

 wait for other codecs ready status. */

 resume phase */

 wait until all the probed codecs are ready */

 unmute the output on SIS7012 */

 clear semaphore flag */

 disable interrupts */

 reset channels */

 initialize Buffer Descriptor Lists */

 disable interrupts */

 reset channels */

/*

 * power management

 CONFIG_PM_SLEEP */

 ALI5455 has no ac97 region */

 ICH4 and Nforce */

 ICH4 */

 initialize offsets */

 SiS 7013 swaps the registers */

 SIS7013 handles the pcm data in bytes, others are in words */

 allocate buffer descriptor lists */

 the start of each lists must be aligned to 8 bytes */

	/* tables must be aligned to 8 bytes here, but the kernel pages

	/* NOTE: we don't use devm version here since it's released /

	 * re-acquired in PM callbacks.

	 * It's released explicitly in snd_intel8x0m_free(), too.

 SPDX-License-Identifier: GPL-2.0-or-later

/*  azt3328.c - driver for Aztech AZF3328 based soundcards (e.g. PCI168).

 *  Copyright (C) 2002, 2005 - 2011 by Andreas Mohr <andi AT lisas.de>

 *

 *  Framework borrowed from Bart Hartgers's als4000.c.

 *  Driver developed on PCI168 AP(W) version (PCI rev. 10, subsystem ID 1801),

 *  found in a Fujitsu-Siemens PC ("Cordant", aluminum case).

 *  Other versions are:

 *  PCI168 A(W), sub ID 1800

 *  PCI168 A/AP, sub ID 8000

 *  Please give me feedback in case you try my driver with one of these!!

 *

 *  Keywords: Windows XP Vista 168nt4-125.zip 168win95-125.zip PCI 168 download

 *  (XP/Vista do not support this card at all but every Linux distribution

 *   has very good support out of the box;

 *   just to make sure that the right people hit this and get to know that,

 *   despite the high level of Internet ignorance - as usual :-P -

 *   about very good support for this card - on Linux!)

 *

 * NOTES

 *  Since Aztech does not provide any chipset documentation,

 *  even on repeated request to various addresses,

 *  and the answer that was finally given was negative

 *  (and I was stupid enough to manage to get hold of a PCI168 soundcard

 *  in the first place >:-P}),

 *  I was forced to base this driver on reverse engineering

 *  (3 weeks' worth of evenings filled with driver work).

 *  (and no, I did NOT go the easy way: to pick up a SB PCI128 for 9 Euros)

 *

 *  It is quite likely that the AZF3328 chip is the PCI cousin of the

 *  AZF3318 ("azt1020 pnp", "MM Pro 16") ISA chip, given very similar specs.

 *

 *  The AZF3328 chip (note: AZF3328, *not* AZT3328, that's just the driver name

 *  for compatibility reasons) from Azfin (joint-venture of Aztech and Fincitec,

 *  Fincitec acquired by National Semiconductor in 2002, together with the

 *  Fincitec-related company ARSmikro) has the following features:

 *

 *  - compatibility & compliance:

 *    - Microsoft PC 97 ("PC 97 Hardware Design Guide",

 *                       http://www.microsoft.com/whdc/archive/pcguides.mspx)

 *    - Microsoft PC 98 Baseline Audio

 *    - MPU401 UART

 *    - Sound Blaster Emulation (DOS Box)

 *  - builtin AC97 conformant codec (SNR over 80dB)

 *    Note that "conformant" != "compliant"!! this chip's mixer register layout

 *    *differs* from the standard AC97 layout:

 *    they chose to not implement the headphone register (which is not a

 *    problem since it's merely optional), yet when doing this, they committed

 *    the grave sin of letting other registers follow immediately instead of

 *    keeping a headphone dummy register, thereby shifting the mixer register

 *    addresses illegally. So far unfortunately it looks like the very flexible

 *    ALSA AC97 support is still not enough to easily compensate for such a

 *    grave layout violation despite all tweaks and quirks mechanisms it offers.

 *    Well, not quite: now ac97 layer is much improved (bus-specific ops!),

 *    thus I was able to implement support - it's actually working quite well.

 *    An interesting item might be Aztech AMR 2800-W, since it's an AC97

 *    modem card which might reveal the Aztech-specific codec ID which

 *    we might want to pretend, too. Dito PCI168's brother, PCI368,

 *    where the advertising datasheet says it's AC97-based and has a

 *    Digital Enhanced Game Port.

 *  - builtin genuine OPL3 - verified to work fine, 20080506

 *  - full duplex 16bit playback/record at independent sampling rate

 *  - MPU401 (+ legacy address support, claimed by one official spec sheet)

 *    FIXME: how to enable legacy addr??

 *  - game port (legacy address support)

 *  - builtin DirectInput support, helps reduce CPU overhead (interrupt-driven

 *    features supported). - See common term "Digital Enhanced Game Port"...

 *    (probably DirectInput 3.0 spec - confirm)

 *  - builtin 3D enhancement (said to be YAMAHA Ymersion)

 *  - built-in General DirectX timer having a 20 bits counter

 *    with 1us resolution (see below!)

 *  - I2S serial output port for external DAC

 *    [FIXME: 3.3V or 5V level? maximum rate is 66.2kHz right?]

 *  - supports 33MHz PCI spec 2.1, PCI power management 1.0, compliant with ACPI

 *  - supports hardware volume control

 *  - single chip low cost solution (128 pin QFP)

 *  - supports programmable Sub-vendor and Sub-system ID [24C02 SEEPROM chip]

 *    required for Microsoft's logo compliance (FIXME: where?)

 *    At least the Trident 4D Wave DX has one bit somewhere

 *    to enable writes to PCI subsystem VID registers, that should be it.

 *    This might easily be in extended PCI reg space, since PCI168 also has

 *    some custom data starting at 0x80. What kind of config settings

 *    are located in our extended PCI space anyway??

 *  - PCI168 AP(W) card: power amplifier with 4 Watts/channel at 4 Ohms

 *    [TDA1517P chip]

 *

 *  Note that this driver now is actually *better* than the Windows driver,

 *  since it additionally supports the card's 1MHz DirectX timer - just try

 *  the following snd-seq module parameters etc.:

 *  - options snd-seq seq_default_timer_class=2 seq_default_timer_sclass=0

 *    seq_default_timer_card=0 seq_client_load=1 seq_default_timer_device=0

 *    seq_default_timer_subdevice=0 seq_default_timer_resolution=1000000

 *  - "timidity -iAv -B2,8 -Os -EFreverb=0"

 *  - "pmidi -p 128:0 jazz.mid"

 *

 *  OPL3 hardware playback testing, try something like:

 *  cat /proc/asound/hwdep

 *  and

 *  aconnect -o

 *  Then use

 *  sbiload -Dhw:x,y --opl3 /usr/share/sounds/opl3/std.o3 ......./drums.o3

 *  where x,y is the xx-yy number as given in hwdep.

 *  Then try

 *  pmidi -p a:b jazz.mid

 *  where a:b is the client number plus 0 usually, as given by aconnect above.

 *  Oh, and make sure to unmute the FM mixer control (doh!)

 *  NOTE: power use during OPL3 playback is _VERY_ high (70W --> 90W!)

 *  despite no CPU activity, possibly due to hindering ACPI idling somehow.

 *  Shouldn't be a problem of the AZF3328 chip itself, I'd hope.

 *  Higher PCM / FM mixer levels seem to conflict (causes crackling),

 *  at least sometimes.   Maybe even use with hardware sequencer timer above :)

 *  adplay/adplug-utils might soon offer hardware-based OPL3 playback, too.

 *

 *  Certain PCI versions of this card are susceptible to DMA traffic underruns

 *  in some systems (resulting in sound crackling/clicking/popping),

 *  probably because they don't have a DMA FIFO buffer or so.

 *  Overview (PCI ID/PCI subID/PCI rev.):

 *  - no DMA crackling on SiS735: 0x50DC/0x1801/16

 *  - unknown performance: 0x50DC/0x1801/10

 *    (well, it's not bad on an Athlon 1800 with now very optimized IRQ handler)

 *

 *  Crackling happens with VIA chipsets or, in my case, an SiS735, which is

 *  supposed to be very fast and supposed to get rid of crackling much

 *  better than a VIA, yet ironically I still get crackling, like many other

 *  people with the same chipset.

 *  Possible remedies:

 *  - use speaker (amplifier) output instead of headphone output

 *    (in case crackling is due to overloaded output clipping)

 *  - plug card into a different PCI slot, preferably one that isn't shared

 *    too much (this helps a lot, but not completely!)

 *  - get rid of PCI VGA card, use AGP instead

 *  - upgrade or downgrade BIOS

 *  - fiddle with PCI latency settings (setpci -v -s BUSID latency_timer=XX)

 *    Not too helpful.

 *  - Disable ACPI/power management/"Auto Detect RAM/PCI Clk" in BIOS

 *

 * BUGS

 *  - full-duplex might *still* be problematic, however a recent test was fine

 *  - (non-bug) "Bass/Treble or 3D settings don't work" - they do get evaluated

 *    if you set PCM output switch to "pre 3D" instead of "post 3D".

 *    If this can't be set, then get a mixer application that Isn't Stupid (tm)

 *    (e.g. kmix, gamix) - unfortunately several are!!

 *  - locking is not entirely clean, especially the audio stream activity

 *    ints --> may be racy

 *  - an _unconnected_ secondary joystick at the gameport will be reported

 *    to be "active" (floating values, not precisely -1) due to the way we need

 *    to read the Digital Enhanced Game Port. Not sure whether it is fixable.

 *

 * TODO

 *  - use PCI_VDEVICE

 *  - verify driver status on x86_64

 *  - test multi-card driver operation

 *  - (ab)use 1MHz DirectX timer as kernel clocksource

 *  - test MPU401 MIDI playback etc.

 *  - add more power micro-management (disable various units of the card

 *    as long as they're unused, to improve audio quality and save power).

 *    However this requires more I/O ports which I haven't figured out yet

 *    and which thus might not even exist...

 *    The standard suspend/resume functionality could probably make use of

 *    some improvement, too...

 *  - figure out what all unknown port bits are responsible for

 *  - figure out some cleverly evil scheme to possibly make ALSA AC97 code

 *    fully accept our quite incompatible ""AC97"" mixer and thus save some

 *    code (but I'm not too optimistic that doing this is possible at all)

 *  - use MMIO (memory-mapped I/O)? Slightly faster access, e.g. for gameport.

 WARN_ONCE */

/*

 * Config switch, to use ALSA's AC97 layer instead of old custom mixer crap.

 * If the AC97 compatibility parts we needed to implement locally turn out

 * to work nicely, then remove the old implementation eventually.

/* === Debug settings ===

  Further diagnostic functionality than the settings below

  does not need to be provided, since one can easily write a POSIX shell script

  to dump the card's I/O ports (those listed in lspci -v -v):

  dump()

  {

    local descr=$1; local addr=$2; local count=$3



    echo "${descr}: ${count} @ ${addr}:"

    dd if=/dev/port skip=`printf %d ${addr}` count=${count} bs=1 \

      2>/dev/null| hexdump -C

  }

  and then use something like

  "dump joy200 0x200 8", "dump mpu388 0x388 4", "dump joy 0xb400 8",

  "dump codec00 0xa800 32", "dump mixer 0xb800 64", "dump synth 0xbc00 8",

  possibly within a "while true; do ... sleep 1; done" loop.

  Tweaking ports could be done using

  VALSTRING="`printf "%02x" $value`"

  printf "\x""$VALSTRING"|dd of=/dev/port seek=`printf %d ${addr}` bs=1 \

    2>/dev/null

 Index 0-MAX */

 ID for this card */

 Enable this card */

 warning: fixed indices (also used for bitmask checks!) */

 keep first! (avoid offset calc) */

 helper to avoid an indirection in hotpath */

 TODO: convert to our own per-codec lock member */

 often-used fields towards beginning, then grouped */

 usually 0xb000, size 128 */

 usually 0xb400, size 8 */

 usually 0xb800, size 4 */

 usually 0xbc00, size 8 */

 usually 0xc000, size 64 */

 playback, recording and I2S out codecs */

	/* register 0x6a is write-only, thus need to remember setting.

	 * If we need to add more registers here, then we might try to fold this

	 * into some transparent combined shadow register handling with

	/* register value containers for power management

 PCI168/3328 */

 3328 */

	/* Well, strictly spoken, the inb/outb sequence isn't atomic

	   and would need locking. However we currently don't care

	/* we need to always write the new value no matter whether it differs

	/* the mute bit is on the *second* (i.e. right) register of a

 indicate whether it was muted before */

	/* reset (close) mixer:

	 * first mute master volume, then reset

 need to add some more or less clever emulation? */

/*

 * Need to have _special_ AC97 mixer hardware register index mapper,

 * to compensate for the issue of a rather AC97-incompatible hardware layout.

		/* Especially when taking into consideration

		 * mono/stereo-based sequence of azf vs. AC97 control series,

		 * it's quite obvious that azf simply got rid

		 * of the AC97_HEADPHONE control at its intended offset,

		 * thus shifted _all_ controls by one,

		 * and _then_ simply added it as an FMSYNTH control at the end,

		 * to make up for the offset.

		 * This means we'll have to translate indices here as

		 * needed and then do some tiny AC97 patch action

		 * (snd_ac97_rename_vol_ctl() etc.) - that's it.

 AC97_RESET */ IDX_MIXER_RESET

 AC97_MASTER */ IDX_MIXER_PLAY_MASTER },

 note large shift: AC97_HEADPHONE to IDX_MIXER_FMSYNTH! */

 AC97_HEADPHONE */ IDX_MIXER_FMSYNTH },

 AC97_MASTER_MONO */ IDX_MIXER_MODEMOUT },

 AC97_MASTER_TONE */ IDX_MIXER_BASSTREBLE },

 AC97_PC_BEEP */ IDX_MIXER_PCBEEP },

 AC97_PHONE */ IDX_MIXER_MODEMIN },

 AC97_MIC */ IDX_MIXER_MIC },

 AC97_LINE */ IDX_MIXER_LINEIN },

 AC97_CD */ IDX_MIXER_CDAUDIO },

 AC97_VIDEO */ IDX_MIXER_VIDEO },

 AC97_AUX */ IDX_MIXER_AUX },

 AC97_PCM */ IDX_MIXER_WAVEOUT },

 AC97_REC_SEL */ IDX_MIXER_REC_SELECT },

 AC97_REC_GAIN */ IDX_MIXER_REC_VOLUME },

 AC97_REC_GAIN_MIC */ AZF_AC97_REG_EMU_IO_RW },

 AC97_GENERAL_PURPOSE */ IDX_MIXER_ADVCTL2 },

 AC97_3D_CONTROL */ IDX_MIXER_ADVCTL1 },

	/* azf3328 supports the low-numbered and low-spec:ed range

 a translation-only entry means it's real read/write: */

			/* I don't know what the h*ll AC97 layer

			 * would consult this _extended_ register for

			 * given a base-AC97-advertised card,

			 * but let's just emulate it anyway :-P

 Headphone is an FM Synth control here */

 no AC97_BC_LOUDNESS! */

	/* mask 0x7c00 is

	   vendor-specific 3D enhancement

	   vendor indicator.

	   Since there actually _is_ an

	   entry for Aztech Labs

	   (13), make damn sure

 pretend everything to be active */

/*

 * Emulated, _inofficial_ vendor ID

 * (there might be some devices such as the MR 2800-W

 * which could reveal the real Aztech AC97 ID).

 * We choose to use "AZT" prefix, and then use 1 to indicate PCI168

 * (better don't use 0x68 since there's a PCI368 as well).

			/*

			 * Proceed with dummy I/O read,

			 * to ensure compatible timing where this may matter.

			 * (ALSA AC97 layer usually doesn't call I/O functions

			 * due to intelligent I/O caching anyway)

			 * Choose a mixer register that's thoroughly unrelated

			 * to common audio (try to minimize distortion).

 AFAICS we simply can't support anything: */

				/*

				 * Silently swallow these writes.

				 * Since for most registers our card doesn't

				 * actually support a comparable feature,

				 * this is exactly what we should do here.

				 * The AC97 layer's I/O caching probably

				 * automatically takes care of all the rest...

				 * (remembers written values etc.)

 we support audio! */

	/*

	 * ALSA's AC97 layer has terrible init crackling issues,

	 * unfortunately, and since it makes use of AC97_RESET,

	 * there's no use trying to mute Master Playback proactively.

		/*

		 * Make sure to complain loudly in case of AC97 init failure,

		 * since failure may happen quite often,

		 * due to this card being a very quirky AC97 "lookalike".

	/* If we return an error here, then snd_card_free() should

	 * free up any ac97 codecs that got created, as well as the bus.

 AZF_USE_AC97_LAYER */

 take care of muting flag contained in left channel */

			/* during volume change, the right channel is crackling

			 * somewhat more than the left channel, unfortunately.

/*

 * general mixer element

/*

 * mixer switches/volumes

 it's a volume control, so better take care */

 just set both channels, doesn't matter */

 modem out sel */

 mono sel source */

 PCM Out Path */

 PCM Out Path, place in front since it controls *both* 3D and Bass/Treble! */

 "3D Width" */

 "Hifi 3D" */

 mixer reset */

 mute and zero volume channels */

 add mixer controls */

 AZF_USE_AC97_LAYER */

 the AZF3328 names it "5510" for some strange reason */

 val = 0xff07; 3m27.993s (65301Hz; -> 64000Hz???) hmm, 66120, 65967, 66123 */

 val = 0xff09; 17m15.098s (13123,478Hz; -> 12000Hz???) hmm, 13237.2Hz? */

 val = 0xff0a; 47m30.599s (4764,891Hz; -> 4800Hz???) yup, 4803Hz */

 val = 0xff0c; 57m0.510s (4010,263Hz; -> 4000Hz???) yup, 4003Hz */

 val = 0xff05; 5m11.556s (... -> 44100Hz) */

 val = 0xff03; 10m21.529s (21872,463Hz; -> 22050Hz???) */

 val = 0xff0f; 20m41.883s (10937,993Hz; -> 11025Hz???) */

 val = 0xff0d; 41m23.135s (5523,600Hz; -> 5512Hz???) */

 val = 0xff0e; 28m30.777s (8017Hz; -> 8000Hz???) */

 set bitrate/format */

	/* changing the bitrate/format settings switches off the

	 * audio output with an annoying click in case of 8/16bit format change

	 * (maybe shutting down DAC/ADC?), thus immediately

	 * do some tweaking to reenable it and get rid of the clicking

	 * (FIXME: yes, it works, but what exactly am I doing here?? :)

	 * FIXME: does this have some side effects for full-duplex

 do it for non-capture codecs only */

	/* choose lowest frequency for low power consumption.

	 * While this will cause louder noise due to rather coarse frequency,

	 * it should never matter since output should always

	/* no idea what exactly is being done here, but I strongly assume it's

			/* if enable codec, call enable_codecs func

			/* ...otherwise call enable_codecs func

			   (which globally shuts down operation of codecs)

			   only in case the other codecs are currently

		/* ...and adjust clock, too

 AZF3328 uses a two buffer pointer DMA transfer approach */

 width 32bit (prevent overflow): */

		/* Hmm, are we really supposed to decrement this by 1??

		   Most definitely certainly not: configuring full length does

		   work properly (i.e. likely better), and BTW we

		   violated possibly differing frame sizes with this...



		area_length--; |* max. index *|

 build combined I/O buffer length word */

 mute WaveOut (avoid clicking during setup) */

 first, remember current value: */

 stop transfer */

 FIXME: clear interrupts or what??? */

 FIXME: enable playback/recording??? */

 start transfer again */

 FIXME: what is this value (0x0010)??? */

 NT4 */

 now unmute WaveOut */

 resume codec if we were active */

 mute WaveOut (avoid clicking during setup) */

 first, remember current value: */

 stop transfer */

		/* hmm, is this really required? we're resetting the same bit

 now unmute WaveOut */

 make sure codec is stopped */

 calculate offset */

*****************************************************************/

	/*

	 * skeleton handler only

	 * (we do not want axis reading in interrupt handler - too much load!)

 this should ACK the gameport IRQ properly, hopefully. */

	/* ok, this one is a bit dirty: cooked_read is being polled by a timer,

	 * thus we're atomic and cannot actively wait in here

	 * (which would be useful for us since it probably would be better

	 * to trigger a measurement in here, then wait a short amount of

	 * time until it's finished, then read values of _this_ measurement).

	 *

	 * Thus we simply resort to reading values if they're available already

	 * and trigger the next measurement.

 configure the axis to read */

	/* trigger next sampling of axes, to be evaluated the next time we

	/* for some very, very strange reason we cannot enable

	 * Measurement Ready monitoring for all axes here,

 we're able to monitor axes 1 and 2 only */

 seems ok */

 DISABLE legacy address: we don't need it! */

 SUPPORT_GAMEPORT */

*****************************************************************/

 skip codec if there's no interrupt for it */

 ack all IRQ types immediately */

 fast path out, to ease interrupt sharing */

 must be interrupt for another device */

 debug-only */,

		/* dev_dbg(chip->card->dev, "timer %ld\n",

			snd_azf3328_codec_inl(chip, IDX_IO_TIMER_VALUE)

				& TIMER_VALUE_MASK

 ACK timer */

	/* MPU401 has less critical IRQ requirements

		/* hmm, do we have to ack the IRQ here somehow?

****************************************************************/

/* as long as we think we have identical snd_pcm_hardware parameters

   for playback, capture and i2s out, we can use the same physical struct

   since the struct is simply being copied into a member.

 FIXME!! Correct? */

	/* We simply have two DMA areas (instead of a list of descriptors

	   such as other cards); I believe that this is a fixed hardware

	   attribute and there isn't much driver magic to be done to expand it.

	/* FIXME: maybe that card actually has a FIFO?

	 * Hmm, it seems newer revisions do have one, but we still don't know

****************************************************************/

 same parameters for all our codecs - at least we think so... */

*****************************************************************/

 pcm devices */

 same pcm object for playback/capture (see snd_pcm_new() above) */

*****************************************************************/

/*** NOTE: the physical timer resolution actually is 1024000 ticks per second

 *** (probably derived from main crystal via a divider of 24),

 *** but announcing those attributes to user-space would make programs

 *** configure the timer to a 1 tick value, resulting in an absolutely fatal

 *** timer IRQ storm.

 *** Thus I chose to announce a down-scaled virtual timer to the outside and

 *** calculate real timer countdown values internally.

 *** (the scale factor can be set via module parameter "seqtimer_scaling").

		/* uhoh, that's not good, since user-space won't know about

		 * this timing tweak

 minimum time is 49 ticks */

 disable timer countdown and interrupt */

	/* Hmm, should we write TIMER_IRQ_ACK here?

	   YES indeed, otherwise a rogue timer operation - which prompts

	   ALSA(?) to call repeated stop() in vain, but NOT start() -

	   will never end (value 0x03 is kept shown in control byte).

	   Simply manually poking 0x04 _once_ immediately successfully stops

 1000000/1024000 = 0.9765625us */

 max tick count, defined by the value register; actually it's not 1024000, but 1048576, but we don't care */

*****************************************************************/

 check whether a bit can be modified */

 check if we can restrict PCI DMA transfers to 24 bits */

 create mixer interface & switches */

 standard codec init stuff */

 default DMA init value */

 shutdown codecs to reduce power / noise */

 have ...ctrl_codec_activity() act properly */

	/* chose to use MPU401_HW_AZT2320 ID instead of MPU401_HW_MPU401,

 need to use IDs 1, 2 since ID 0 is snd_azf3328_timer above */

 make sure to disable master volume etc. to prevent looping sound */

 AZF_USE_AC97_LAYER */

	/* unfortunately with 32bit transfers, IDX_MIXER_PLAY_MASTER (0x02)

	   and IDX_MIXER_RESET (offset 0x00) get touched at the same time,

	   resulting in a mixer reset condition persisting until _after_

 AZF_USE_AC97_LAYER */

 manually store the one currently relevant write-only reg, too */

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for S3 SonicVibes soundcard

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *

 *  BUGS:

 *    It looks like 86c617 rev 3 doesn't supports DDMA buffers above 16MB?

 *    Driver sometimes hangs... Nobody knows why at this moment...

 Index 0-MAX */

 ID for this card */

 Enable this card */

 DDMA i/o address */

/*

 * Enhanced port direct registers

 R/W: CODEC/Mixer control register */

 audio mode select - enhanced mode */

 test bit */

 reverb enable */

 wavetable active / FM active if not set */

 INTA driving - should be always 1 */

 reset chip */

 R/W: CODEC/Mixer interrupt mask register */

 mask DMA-A interrupt */

 mask DMA-C interrupt */

 special interrupt mask - should be always masked */

 Up/Down button interrupt mask */

 mask MIDI interrupt */

 R/O: CODEC/Mixer status register */

 DMA-A interrupt */

 DMA-C interrupt */

 special interrupt */

 Up/Down interrupt */

 MIDI interrupt */

 R/W: CODEC/Mixer index address register */

 mode change enable */

 DMA transfer request disabled */

 R/W: CODEC/Mixer index data register */

/*

 * Enhanced port indirect registers

 Left ADC Input Control */

 Right ADC Input Control */

 Left AUX1 Input Control */

 Right AUX1 Input Control */

 Left CD Input Control */

 Right CD Input Control */

 Left Line Input Control */

 Right Line Input Control */

 MIC Input Control */

 Game Port Control */

 Left Synth Input Control */

 Right Synth Input Control */

 Left AUX2 Input Control */

 Right AUX2 Input Control */

 Left Analog Mixer Output Control */

 Right Analog Mixer Output Control */

 Left PCM Input Control */

 Right PCM Input Control */

 DMA Data Format */

 Playback/Capture Enable Register */

 Up/Down Button Register */

 Revision */

 ADC Output Control */

 DMA A Upper Base Count */

 DMA A Lower Base Count */

 DMA C Upper Base Count */

 DMA C Lower Base Count */

 PCM Sampling Rate Low Byte */

 PCM Sampling Rate High Byte */

 Synthesizer Sampling Rate Low Byte */

 Synthesizer Sampling Rate High Byte */

 ADC Clock Source Selection */

 ADC Alternative Sampling Rate Selection */

 ADC PLL M Register */

 ADC PLL N Register */

 Synthesizer PLL M Register */

 Synthesizer PLL N Register */

 MPU-401 UART Operation */

 Drive Control */

 SRS Space Control */

 SRS Center Control */

 Wavetable Sample Source Select */

 Analog Power Down Control */

 Digital Power Down Control */

/*

 *  DMA registers

/*

 *  Record sources

/*

 *  constants

/*



 S3FM */

/*

 *  common I/O routines

 note: dmac is working in word mode!!! */

 note: dmac is working in word mode!!! */

 slight violation of specs, needed for continuous sampling rates */

 35 */

 use the alternate clock */

 use the PLL source */

 failure */

/*

 *  PCM part

/*

 *  Mixer part

/*



/*



 enable PCI device */

 check, if we can restrict PCI DMA transfers to 24 bits */

 enable + enhanced */

 enable */

 ok.. initialize S3 SonicVibes chip */

 reset chip */

 release reset */

 clear IRQs */

 drive current 16mA */

 drive current 8mA */

 disable playback & capture */

 clear IRQs */

 use PLL as clock source */

 power up analog parts */

 power up digital parts */

 SRS space off */

 SRS center off */

 MPU-401 switch */

 onboard ROM */

/*

 *  MIDI section

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * cs5530.c - Initialisation code for Cyrix/NatSemi VSA1 softaudio

 *

 * 	(C) Copyright 2007 Ash Willis <ashwillis@programmer.net>

 *	(C) Copyright 2003 Red Hat Inc <alan@lxorguk.ukuu.org.uk>

 *

 * This driver was ported (shamelessly ripped ;) from oss/kahlua.c but I did

 * mess with it a bit. The chip seems to have to have trouble with full duplex

 * mode. If we're recording in 8bit 8000kHz, say, and we then attempt to

 * simultaneously play back audio at 16bit 44100kHz, the device actually plays

 * back in the same format in which it is capturing. By forcing the chip to

 * always play/capture in 16/44100, we can let alsa-lib convert the samples and

 * that way we can hack up some full duplex audio. 

 * 

 * XpressAudio(tm) is used on the Cyrix MediaGX (now NatSemi Geode) systems.

 * The older version (VSA1) provides fairly good soundblaster emulation

 * although there are a couple of bugs: large DMA buffers break record,

 * and the MPU event handling seems suspect. VSA2 allows the native driver

 * to control the AC97 audio engine directly and requires a different driver.

 *

 * Thanks to National Semiconductor for providing the needed information

 * on the XpressAudio(tm) internals.

 *

 * TO DO:

 *	Investigate whether we can portably support Cognac (5520) in the

 *	same manner.

	/* Map bits

		0:1	* 0x20 + 0x200 = sb base

		2	sb enable

		3	adlib enable

		5	MPU enable 0x330

		6	MPU enable 0x300



 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Driver for SiS7019 Audio Accelerator

 *

 *  Copyright (C) 2004-2007, David Dillow

 *  Written by David Dillow <dave@thedillows.org>

 *  Inspired by the Trident 4D-WaveDX/NX driver.

 *

 *  All rights reserved.

 Index 0-MAX */

 ID for this card */

/* There are three timing modes for the voices.

 *

 * For both playback and capture, when the buffer is one or two periods long,

 * we use the hardware's built-in Mid-Loop Interrupt and End-Loop Interrupt

 * to let us know when the periods have ended.

 *

 * When performing playback with more than two periods per buffer, we set

 * the "Stop Sample Offset" and tell the hardware to interrupt us when we

 * reach it. We then update the offset and continue on until we are

 * interrupted for the next period.

 *

 * Capture channels do not have a SSO, so we allocate a playback channel to

 * use as a timer for the capture periods. We use the SSO on the playback

 * channel to clock out virtual periods, and adjust the virtual period length

 * to maintain synchronization. This algorithm came from the Trident driver.

 *

 * FIXME: It'd be nice to make use of some of the synth features in the

 * hardware, but a woeful lack of documentation is a significant roadblock.

/* We need four pages to store our wave parameters during a suspend. If

 * we're not doing power management, we still need to allocate a page

 * for the silence buffer.

	/* Protect against more than one thread hitting the AC97

	 * registers (in a more polite manner than pounding the hardware

	 * semaphore)

	/* voice_lock protects allocation/freeing of the voice descriptions

	/* Allocate pages to store the internal wave state during

	 * suspends. When we're operating, this can be used as a silence

	 * buffer for a timing channel.

/* These values are also used by the module param 'codecs' to indicate

 * which codecs should be present.

/* The HW offset parameters (Loop End, Stop Sample, End Sample) have a

 * documented range of 8-0xfff8 samples. Given that they are 0-based,

 * that places our period/buffer range at 9-0xfff9 samples. That makes the

 * max buffer size 0xfff9 samples * 2 channels * 2 bytes per sample, and

 * max samples / min samples gives us the max periods in a buffer.

 *

 * We'll add a constraint upon open that limits the period and buffer sample

 * size to values that are legal for the hardware.

 Enforce the documented hardware minimum offset */

 The SSO is in the upper 16 bits of the register. */

		/* If we've not hit the end of the virtual period, update

		 * our records and keep going.

		/* Calculate our relative offset between the target and

		 * the actual CSO value. Since we're operating in a loop,

		 * if the value is more than half way around, we can

		 * consider ourselves wrapped.

		/* If sync is positive, then we interrupted too early, and

		 * we'll need to come back in a few samples and try again.

		 * There's a minimum wait, as it takes some time for the DMA

		 * engine to startup, etc...

		/* Ok, we interrupted right on time, or (hopefully) just

		 * a bit late. We'll adjst our next waiting period based

		 * on how close we got.

		 *

		 * We need to stay just behind the actual channel to ensure

		 * it really is past a period when we get our interrupt --

		 * otherwise we'll fall into the early code above and have

		 * a minimum wait time, which makes us quite late here,

		 * eating into the user's time to refresh the buffer, esp.

		 * if using small periods.

		 *

		 * If we're less than 9 samples behind, we're on target.

		 * Otherwise, shorten the next vperiod by the amount we've

		 * been delayed.

	/* We only use the DMA interrupts, and we don't enable any other

	 * source of interrupts. But, it is possible to see an interrupt

	 * status that didn't actually interrupt us, so eliminate anything

	 * we're not expecting to avoid falsely claiming an IRQ, and an

	 * ensuing endless loop.

	/* This was copied from the trident driver, but it seems its gotten

	 * around a bit... nevertheless, it works well.

	 *

	 * We special case 44100 and 8000 since rounding with the equation

	 * does not give us an accurate enough value. For 11025 and 22050

	 * the equation gives us the best answer. All other frequencies will

	 * also use the equation. JDW

 Helper function: must hold sis->voice_lock on entry */

 Helper function: must hold sis->voice_lock on entry */

 Must hold the voice_lock on entry */

	/* If there are one or two periods per buffer, we don't need a

	 * timing voice, as we can use the capture channel's interrupts

	 * to clock out the periods.

	/* We rely on the PCM core to ensure that the parameters for this

	 * substream do not change on us while we're programming the HW.

	/* The baseline setup is for a single period per buffer, and

	 * we add bells and whistles as needed from there.

	/* Ok, we're ready to go, set up the channel.

 Force PCI writes to post. */

	/* No locks needed, as the PCM core will hold the locks on the

	 * substreams, and the HW will only start/stop the indicated voices

	 * without changing the state of the others.

 Make sure it is for us... */

		/* voice could be NULL if this a recording stream, and it

		 * doesn't have an external timing channel.

	/* FIXME: The driver only supports recording from one channel

	 * at the moment, but it could support more.

	/* Set our initial buffer and period as large as we can given a

	 * single page of silence.

	/* Initially, we want to interrupt just a bit behind the end of

	 * the period we're clocking out. 12 samples seems to give a good

	 * delay.

	 *

	 * We want to spread our interrupts throughout the virtual period,

	 * so that we don't end up with two interrupts back to back at the

	 * end -- this helps minimize the effects of any jitter. Adjust our

	 * clocking period size so that the last period is at least a fourth

	 * of a full period.

	 *

	 * This is all moot if we don't need to use virtual periods.

		/* The initial period will fit inside the buffer, so we

		 * don't need to use virtual periods -- disable them.

	/* The interrupt handler implements the timing synchronization, so

	 * setup its state.

	/* Using unsigned samples with the all-zero silence buffer

	 * forces the output to the lower rail, killing playback.

	 * So ignore unsigned vs signed -- it doesn't change the timing.

	/* We've done the math, now configure the channel.

	/* We rely on the PCM core to ensure that the parameters for this

	 * substream do not change on us while we're programming the HW.

	/* If we've got more than two periods per buffer, then we have

	 * use a timing voice to clock out the periods. Otherwise, we can

	 * use the capture channel's interrupts.

 Force the writes to post. */

	/* We have 64 voices, and the driver currently records from

	 * only one channel, though that could change in the future.

	/* Try to preallocate some memory, but it's not the end of the

	 * world if this fails.

	/* Get the AC97 semaphore -- software first, so we don't spin

	 * pounding out IO reads on the hardware semaphore...

	/* ... and wait for any outstanding commands to complete ...

	/* ... before sending our command and waiting for it to finish ...

	/* ... and reading the results (if any).

	/* If we return an error here, then snd_card_free() should

	 * free up any ac97 codecs that got created, as well as the bus.

	/* Reset the chip, and disable all interrputs.

	/* Now, free everything we allocated.

	/* Reset the audio controller

	/* Get the AC-link semaphore, and reset the codecs

	/* Command complete, we can let go of the semaphore now.

	/* Now that we've finished the reset, find out what's attached.

	 * There are some codec/board combinations that take an extremely

	 * long time to come up. 350+ ms has been observed in the field,

	 * so we'll give them up to 500ms.

	/* All done, check for errors.

	/* Let the hardware know that the audio driver is alive,

	 * and enable PCM slots on the AC-link for L/R playback (3 & 4) and

	 * record channels. We're going to want to use Variable Rate Audio

	 * for recording, to avoid needlessly resampling from 48kHZ.

	/* All AC97 PCM slots should be sourced from sub-mixer 0.

	/* There is only one valid DMA setup for a PCI environment.

	/* Reset the synchronization groups for all of the channels

	 * to be asynchronous. If we start doing SPDIF or 5.1 sound, etc.

	 * we'll need to change how we handle these. Until then, we just

	 * assign sub-mixer 0 to all playback channels, and avoid any

	 * attenuation on the audio.

	/* Don't attenuate any audio set for the wave amplifier.

	 *

	 * FIXME: Maximum attenuation is set for the music amp, which will

	 * need to change if we start using the synth engine.

	/* Ensure that the wave engine is in normal operating mode.

	/* Go ahead and enable the DMA interrupts. They won't go live

	 * until we start a channel.

	/* snd_pcm_suspend_all() stopped all channels, so we're quiescent.

	/* Save the internal state away

	/* Restore saved state, then clear out the page we use for the

	 * silence buffer.

 CONFIG_PM_SLEEP */

	/* We need 16K to store the internal wave engine state during a

	 * suspend, but we don't need it to be contiguous, so play nice

	 * with the memory system. We'll also use this area for a silence

	 * buffer.

	/* The user can specify which codecs should be present so that we

	 * can wait for them to show up if they are slow to recover from

	 * the AC97 cold reset. We default to a single codec, the primary.

	 *

	 * We assume that SIS_PRIMARY_*_PRESENT matches bits 0-2.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for Ensoniq ES1370/ES1371 AudioPCI soundcard

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>,

 *		     Thomas Sailer <sailer@ife.ee.ethz.ch>

/* Power-Management-Code ( CONFIG_PM )

 * for ens1371 only ( FIXME )

 * derived from cs4281.c, atiixp.c and via82xx.c

 * using http://www.alsa-project.org/~tiwai/writing-an-alsa-driver/ 

 * by Kurt J. Bosch

 it can be ENS but just to keep compatibility... */

 Index 0-MAX */

 ID for this card */

 Enable switches */

 SUPPORT_JOYSTICK */

 ES1371 chip ID */

/* This is a little confusing because all ES1371 compatible chips have the

   same DEVICE_ID, the only thing differentiating them is the REV_ID field.

   This is only significant if you want to enable features on the later parts.

   Yes, I know it's stupid and why didn't we use the sub IDs?

 ??? -jk */

 mw */

/*

 * Direct registers

 R/W: Interrupt/Chip select control register */

 disable capture buffer transfers */

 general purpose output bit */

 bypass SRC for PB1 */

 bypass SRC for PB2 */

 bypass SRC for REC */

 should be set to 0 for normal operation */

 mix record with playback for I2S/SPDIF out */

 0 = SPDIF thru mode, 1 = SPDIF == dig out */

 joystick port mapping */

 mask for above */

 GPIO in [3:0] pins - R/O */

 clock divide ratio for DAC2 */

 mask for above */

 clock divide ratio for DAC2 */

 GPIO out [3:0] pins - W/R */

 mask for above */

 MPEG serial data format; 0 = SONY, 1 = I2S */

 clock source for DAC - 0 = clock generator; 1 = MPEG clocks */

 Warm AC97 reset */

 fixed frequency clock for DAC1 */

 mask for above */

 disable CCB transfer capture information */

 power level change interrupts enable */

 DAC's are synchronous */

 capture clock source; 0 = AC'97 ADC; 1 = I2S */

 CCB voice interrupts enable */

 capture clock source; 0 = ADC; 1 = MPEG */

 generap purpose output bit */

 current power down level */

 mask for above */

 memory bus request enable */

 DAC1 playback channel enable */

 DAC2 playback channel enable */

 ADC capture channel enable */

 UART enable */

 Joystick module enable */

 Codec interface enable */

 Xtal clock disable */

 PCI serr signal disable */

 PCI clock disable */

 R/O: Interrupt/Chip select status register */

 Interrupt is pending */

 CT5880 AC'97 Reset bit */

 rear bits: 000 - front, 010 - mirror, 101 - separate */

 GPIO [3:0] pins - interrupt enable */

 SPDIF enable */

 SPDIF test */

 test ASIC */

 GPIO [3:0] pins - interrupt pending */

 CODEC is busy or register write in progress */

 CODEC is busy */

 CODEC register write in progress */

 CODEC synchronization error occurred */

 voice code from CCB module */

 voice code from CCB module */

 power level interrupt pending */

 CCB interrupt pending */

 UART interrupt pending */

 DAC1 channel interrupt pending */

 DAC2 channel interrupt pending */

 ADC channel interrupt pending */

 R/W: UART data register */

 R/O: UART status register */

 RX interrupt occurred */

 TX interrupt occurred */

 transmitter ready */

 receiver ready */

 W/O: UART control register */

 RX interrupt enable */

 TX interrupt enable */

 mask for above */

 control */

 mask for above */

 R/W: UART reserver register */

 test mode enabled */

 R/W: Memory page register */

 memory page select - out */

 mask for above */

 memory page select - in */

 W/O: Codec write register address */

 W/R: Codec Read/Write register address */

 codec ready */

 codec register access in progress */

 codec read/write select register */

 W/R: Codec rate converter interface register */

 address of the sample rate converter */

 mask for above */

 address of the sample rate converter */

 R/W: read/write control for sample rate converter */

 R/O: sample rate memory is busy */

 sample rate converter disable */

 playback channel 1 accumulator update disable */

 playback channel 1 accumulator update disable */

 capture channel accumulator update disable */

 current value of the sample rate converter */

 mask for above */

 current value of the sample rate converter */

 W/R: Legacy control/status register */

 fast joystick timing */

 host interrupt blocking enable */

 SB; 0 = addr 0x220xH, 1 = 0x22FxH */

 base register address; 0 = 0x320xH; 1 = 0x330xH; 2 = 0x340xH; 3 = 0x350xH */

 mask for above */

 base register address */

 CODEC; 0 = 0x530xH; 1 = undefined; 2 = 0xe80xH; 3 = 0xF40xH */

 mask for above */

 CODEC address */

 force an interrupt */

 enable event capture for slave DMA controller */

 enable event capture for slave IRQ controller */

 enable event capture for master DMA controller */

 enable event capture for master IRQ controller */

 enable event capture for ADLIB register; 0x388xH */

 enable event capture for SB registers */

 enable event capture for CODEC registers */

 enable event capture for SoundScape base address */

 event number */

 event significant I/O address */

 event capture; 0 = read; 1 = write */

 interrupt for legacy events; 0 = interrupt did occur */

 R/W: first 32-bits from S/PDIF channel status block, es1373 */

 R/W: Serial interface control register */

 DAC test mode enable */

 binary offset value to increment / loop end */

 mask for above */

 binary offset value to increment / loop end */

 binary offset value to increment / start */

 mask for above */

 binary offset value to increment / start */

 ADC; 0 - loop mode; 1 = stop mode */

 DAC2; 0 - loop mode; 1 = stop mode */

 DAC1; 0 - loop mode; 1 = stop mode */

 DAC2; 0 - play mode; 1 = pause mode */

 DAC1; 0 - play mode; 1 = pause mode */

 ADC interrupt enable */

 DAC2 interrupt enable */

 DAC1 interrupt enable */

 force sample counter reload for DAC1 */

 when stop mode: 0 - DAC2 play back zeros; 1 = DAC2 play back last sample */

 ADC mode; 0 = 8-bit mono; 1 = 8-bit stereo; 2 = 16-bit mono; 3 = 16-bit stereo */

 mask for above */

 DAC2 mode; -- '' -- */

 mask for above */

 DAC1 mode; -- '' -- */

 mask for above */

 R/W: DAC1 sample count register */

 R/W: DAC2 sample count register */

 R/W: ADC sample count register */

 R/W: PAGE 0x0c; DAC1 frame address */

 R/W: PAGE 0x0c; DAC1 frame size */

 R/W: PAGE 0x0c; DAC2 frame address */

 R/W: PAGE 0x0c; DAC2 frame size */

 R/W: PAGE 0x0d; ADC frame address */

 R/W: PAGE 0x0d; ADC frame size */

 R/W: PAGE 0x0d: phantom frame address */

 R/W: PAGE 0x0d: phantom frame count */

 R/W: PAGE 0x0e; UART FIFO register */

/*

 *  Pages

/*

 *  Sample rate converter addresses

/*

 *  Some contants

/*

 *  Open modes

 for MIDI */

 for MIDI */

/*



 UART mode */

 control register */

 serial control register */

 control status register */

 uart control register */

 chip revision */

 DAC1/ADC PCM */

 DAC2 PCM */

 ES1370 */

 ES1371 */

 ES1373 - CT5880 */

 Ectiva EV1938 */

/*

 *  constants

/*

 *  common I/O routines

 wait for ready */

 expose the SRC state bits */

 now, wait for busy and the correct time to read */

 wait for the right state */

 hide the state bits */	

 CHIP1371 */

 CHIP1370 */

 save the current state for latter */

			/* wait for not busy (state 0) first to avoid

 wait for a SAFE time to write addr/data and then do it, dammit */

 restore SRC reg */

 save the current state for latter */

			/* wait for not busy (state 0) first to avoid

 wait for a SAFE time to write addr/data and then do it, dammit */

 restore SRC reg */

 wait for WIP again */

 now wait for the stinkin' data (RDY) */

 CHIP1371 */

/*

 *  PCM part

 48k doesn't need SRC (it breaks AC3-passthru) */

 5512Hz rate */

/*

 *  Mixer section

/*

 * ENS1371 mixer (including SPDIF interface)

 spdif controls */

 switch line-in -> rear out */

 vendor ID */

 device ID */

 revision */

 GA-7DXR */

 GA-8IEXP */

 end */

 mirror rear to front speakers */

 CHIP1371 */

 generic control callbacks for ens1370 */

/*

 * ENS1370 mixer

 try reset AK4531 */

 CHIP1370 */

 disabled */

 auto-detect */

 auto_detect */

 SUPPORT_JOYSTICK */

/*



/*



 switch everything off */

 clear serial interface */

 switch everything off */

 clear serial interface */

 Gateway Solo 2150 */

 EV1938 on Mebius PC-MJ100V */

 Targa Xtender300 */

 IPC Topnote G notebook */

 end */

	/* this code was part of snd_ensoniq_create before intruduction

	  * of suspend/resume

	    /* need to delay around 20ms(bleech) to give

 AC'97 warm reset to start the bitclk */

 Init the sample rate converter */

	/* WARNING:

	 * enabling the sample rate converter without properly programming

	 * its parameters causes the chip to lock up (the SRC busy bit will

	 * be stuck high, and I've found no way to rectify this other than

	 * power cycle) - Thomas Sailer

 try reset codec directly */

 try to reset AK4531 */

 CONFIG_PM_SLEEP */

 get microphone working */

 turn amplifier on */

/*

 *  MIDI section

 do Rx at first */

 do Tx at second */

 empty input FIFO */

 fill UART FIFO buffer at first, and turn Tx interrupts only if necessary */

/*

 *  Interrupt handler

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for ESS Maestro3/Allegro (ES1988) soundcards.

 * Copyright (c) 2000 by Zach Brown <zab@zabbo.net>

 *                       Takashi Iwai <tiwai@suse.de>

 *

 * Most of the hardware init stuffs are based on maestro3 driver for

 * OSS/Free by Zach Brown.  Many thanks to Zach!

 *

 * ChangeLog:

 * Aug. 27, 2001

 *     - Fixed deadlock on capture

 *     - Added Canyon3D-2 support by Rob Riggs <rob@pangalactic.org>

 Index 0-MAX */

 ID for this card */

 all enabled */

/*

 * maestro3 registers

 Allegro PCI configuration registers */

 M3 */

 Allegro registers */

/*

 * should be using the above defines, probably.

 default m3 amp */

 default allegro amp */

 M3 */

/*

 * ASSP control regs

/*

 * Kernel data layout

/*

 * second 'segment' (?) reserved for mixer

 * buffers..

/*

 * client data area offsets

/*

 * an arbitrary volume we set the internal

 * volume settings to so that the ac97 volume

 * range is a little less insane.  0x7fff is 

 * max.

/*

 for storing reset state..*/

 gpio pin #  for external amp, -1 = default */

 hardware-volume config bits */

	unsigned irda_workaround :1;	/* avoid to touch 0x10 on GPIO_DIRECTION

 Do HP OmniBook GPIO magic? */

 midi */

 pcm streams */

 physical device path */

/*

 * pci ids

 END */

 END */

 hardware volume quirks */

 Allegro chips */

 HP OmniBook 6100 */

 Maestro3 chips */

 END */

 HP Omnibook quirks */

 HP OmniBook 6000 */

 HP OmniBook 500 */

 END */

/*

 * lowlevel functions

/*

 * access 16bit words to the code or data regions of the dsp's memory.

 * index addresses 16bit words.

/*

 * This makes me sad. the maestro3 has lists

 * internally that must be packed.. 0 terminates,

 * apparently, or maybe all unused entries have

 * to be 0, the lists have static lengths set

 * by the binary code images.

/*

 * start/stop

 spinlock held! */

 spinlock held! */

 should return error? */

/*

 * setup

 host dma buffer pointers */

 dsp buffers */

	/* 

	 * put us in the lists if we're not already there

 write to 'mono' word */

 write to '8bit' word */

 set up dac/adc rate */

 +1, +2 are stereo/16 bit */

 fraction? */

 first l */

 first r */

 second l */

 second r */

 delta l */

 delta r */

 round */

 higher bute mark */

 temp0 */

 c fraction */

 counter */

 numin */

 numout */

 numstage */

 filtertap */

 booster */

 the mode passed should be already shifted and masked */

	/*

	 * some per client initializers

 enable or disable low pass filter? */

 tell it which way dma is going? */

	/*

	 * set an armload of static initializers

/*

 *    Native record driver 

 +1, +2 are stereo/16 bit */

 fraction? */

 first l */

 first r */

 second l */

 second r */

 delta l */

 delta r */

 round */

 higher bute mark */

 temp0 */

 c fraction */

 counter */

 numin */

 numout */

 numstage */

 coef */

 filtertap */

 booster */

 skip lpf */

	/*

	 * some per client initializers

 tell it which way dma is going? */

	/*

	 * set an armload of static initializers

 set buffer address */

/*

 * get current pointer

	/*

	 * try and get a valid answer

 update pointer */

 spinlock held! */

 try to avoid expensive modulo divisions */

/* The m3's hardware volume works by incrementing / decrementing 2 counters

   (without wrap around) in response to volume button presses and then

   generating an interrupt. The pair of counters is stored in bits 1-3 and 5-7

	/* Figure out which volume control button was pushed,

	   based on differences from the default register

	/* Reset the volume counters to 4. Tests on the allegro integrated

	   into a Compaq N600C laptop, have revealed that:

	   1) Writing any value will result in the 2 counters being reset to

	      4 so writing 0x88 is not strictly necessary

	   2) Writing to any of the 4 involved registers will reset all 4

	      of them (and reading them always returns the same value for all

	      of them)

	   It could be that a maestro deviates from this, so leave the code

	/* Ignore spurious HV interrupts during suspend / resume, this avoids

		/* The counters have not changed, yet we've received a HV

		   interrupt. According to tests run by various people this

 counters increased by 1 -> volume up */

 counters decreased by 1 -> volume down */

		/* The counters have not changed, yet we've received a HV

		   interrupt. According to tests run by various people this

 counters increased by 1 -> volume up */

 counters decreased by 1 -> volume down */

	/*

	 * ack an assp int if its running

	 * and has an int pending

 update adc/dac info if it was a timer int */

 TODO: not supported yet */

 ack ints */

/*

SNDRV_PCM_INFO_PAUSE |*/

SNDRV_PCM_INFO_PAUSE |*/

/*

 set list owners */

 not opened properly */

 does this happen? */

/*

 * create pcm instance

/*

 * ac97 interface

/*

 * Wait for the ac97 serial bus to be free.

 * return nonzero if the bus is still busy.

	/*

	 * Workaround for buggy ES1988 integrated AC'97 codec. It remains silent

	 * until the MASTER volume or mute is touched (alsactl restore does not

	 * work).

 enable dock on Dell Latitude C810 */

/* 

 * hack, returns non zero on err 

		/*

		 * the onboard codec on the allegro seems 

		 * to want to wait a very long time before

		 * coming back to life 

 maestro3 */

 assuming pci bus master? */

 ok, bring back the ac-link */

	/* more gung-ho reset that doesn't

	 * seem to work anywhere :)

 seems ac97 PCM needs initialization.. hack hack.. */

/*

 * initialize ASSP

 zero kernel data */

 zero mixer data? */

 init dma pointer */

 write kernel into code memory.. */

	/*

	 * We only have this one client and we know that 0x400

	 * is free in our kernel's mem map, so lets just

	 * drop it there.  It seems that the minisrc doesn't

	 * need vectors, so we won't bother with them..

	/*

	 * write the coefficients for the low pass filter?

	/*

	 * the minisrc is the only thing on

	 * our task list..

	/*

	 * init the mixer number..

	/*

	 * EXTREME KERNEL MASTER VOLUME

	/*

	 * the revb memory map has 0x1100 through 0x1c00

	 * free.  

	/*

	 * align instance address to 256 bytes so that its

	 * shifted list address is aligned.

	 * list address = (mem address >> 1) >> 7;

/* 

 * this works for the reference board, have to find

 * out about others

 *

 * this needs more magic for 4 speaker, but..

	/*

	 * Volume buttons on some HP OmniBook laptops

	 * require some GPIO magic to work correctly.

 makes as much sense as 'n', no? */

 For some reason we must always use reduced debounce. */

 download DSP code before starting ASSP below */

 TODO: MPU401 not supported yet */

| MPU401_INT_ENABLE*/;

/*

 check surviving pcms; this should not happen though.. */

 disable ints */

/*

 * APM support

 give the assp a chance to idle.. */

 save dsp image */

 first lets just bring everything back. .*/

 restore dsp image */

 tell the dma engine to restart itself */

 restore ac97 registers */

 CONFIG_PM_SLEEP */

 CONFIG_INPUT */

/*

 check, if we can restrict PCI DMA transfers to 28 bits */

 presumably this is for all 'maestro3's.. */

 just to be sure */

/*

 don't pick up modems */

 TODO: not supported yet */

 TODO enable MIDI IRQ and I/O */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *  Universal routines for AK4531 codec

/*

MODULE_AUTHOR("Jaroslav Kysela <perex@perex.cz>");

MODULE_DESCRIPTION("Universal routines for AK4531 codec");

MODULE_LICENSE("GPL");

/*

 *

/*

 *

 00: Master Volume Lch */

 01: Master Volume Rch */

 02: Voice Volume Lch */

 03: Voice Volume Rch */

 04: FM Volume Lch */

 05: FM Volume Rch */

 06: CD Audio Volume Lch */

 07: CD Audio Volume Rch */

 08: Line Volume Lch */

 09: Line Volume Rch */

 0a: Aux Volume Lch */

 0b: Aux Volume Rch */

 0c: Mono1 Volume */

 0d: Mono2 Volume */

 0e: Mic Volume */

 0f: Mono-out Volume */

 10: Output Mixer SW1 */

 11: Output Mixer SW2 */

 12: Lch Input Mixer SW1 */

 13: Rch Input Mixer SW1 */

 14: Lch Input Mixer SW2 */

 15: Rch Input Mixer SW2 */

 16: Reset & Power Down */

 17: Clock Select */

 18: AD Input Select */

 19: Mic Amp Setup */

 no RST, PD */

 CODEC ADC and CODEC DAC use {LR,B}CLK2 and run off LRCLK2 PLL */

 recording source is mixer */

/*

 * power management

 mute */

 powerdown */

 initialize */

 restore mixer registers */

/*

 * /proc interface

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   ALSA driver for VIA VT82xx (South Bridge)

 *

 *   VT82C686A/B/C, VT8233A/C, VT8235

 *

 *	Copyright (c) 2000 Jaroslav Kysela <perex@perex.cz>

 *	                   Tjeerd.Mulder <Tjeerd.Mulder@fujitsu-siemens.com>

 *                    2002 Takashi Iwai <tiwai@suse.de>

/*

 * Changes:

 *

 * Dec. 19, 2002	Takashi Iwai <tiwai@suse.de>

 *	- use the DSX channels for the first pcm playback.

 *	  (on VIA8233, 8233C and 8235 only)

 *	  this will allow you play simultaneously up to 4 streams.

 *	  multi-channel playback is assigned to the second device

 *	  on these chips.

 *	- support the secondary capture (on VIA8233/C,8235)

 *	- SPDIF support

 *	  the DSX3 channel can be used for SPDIF output.

 *	  on VIA8233A, this channel is assigned to the second pcm

 *	  playback.

 *	  the card config of alsa-lib will assign the correct

 *	  device for applications.

 *	- clean up the code, separate low-level initialization

 *	  routines for each chipset.

 *

 * Sep. 26, 2005	Karsten Wiese <annabellesgarden@yahoo.de>

 *	- Optimize position calculation for the 823x chips. 

 Index 0-MAX */

 ID for this card */

 just for backward compatibility */

 revision numbers for via686 */

 revision numbers for via8233 */

 not in market */

 2 rec, 4 pb, 1 multi-pb */

 2 rec, 4 pb, 1 multi-pb, spdif */

 1 rec, 1 multi-pb, spdf */

 2 rec, 4 pb, 1 multi-pb, spdif */

/*

 *  Direct registers

 common offsets */

 byte - channel status */

 RO */

 RO */

 RO */

 RO */

 RWC */

 RWC */

 RWC */

 byte - channel control */

 WO */

 WO */

 RW */

 RW - probably reset? undocumented */

 byte - channel type (686 only) */

 RW - autostart at EOL */

 RW */

 RW */

 dword - channel table pointer */

 dword - channel current pointer */

 dword - stop index, channel type, sample rate */

 RW */

 RW */

 dword - channel current count (24 bit) */

 byte - channel current index (for via8233 only) */

 playback block */

 AC'97 */

 dword */

 dword */

 via686 */

 via8233 */

 multi-channel and capture registers for via8233 */

 via8233-specific registers */

 byte */

 byte */

 byte - format and channels */

 # channels << 4 (valid = 1,2,4,6) */

 byte - bit 6 = fifo  enable */

 max. volume (attenuation) of reg 0x32/33 */

 byte - input select */

 recording source codec (0 = primary) */

 pci space */

 secondary codec ready */

 low-power state */

 primary codec ready */

 0: disable, 1: enable */

 0: assert, 1: de-assert */

 0: release SYNC, 1: force SYNC hi */

 0: release SDO, 1: force SDO hi */

 0: disable VRA, 1: enable VRA */

 0: disable PCM, 1: enable PCM */

 via686 only */

 via686 only */

 FIXME: it's 0x40 in the datasheet! */

 FIXME: not documented! */

/*

/*

 * pcm stream

 playback = 0, capture = 1 */

 # descriptors */

 for recovery from the unexpected pointer */

 processed frame position in the buffer */

 4 playback, 1 multi, 2 capture */

 for VIA8233/C/8235; default = 0 */

 for VIA8233/C/8235; default = 0 */

 SGD_SHADOW mask to check interrupts */

 playback and capture */

 DXS channel accepts only 48kHz */

 no need to set VRA on DXS channels */

 use full SRC capabilities of DXS */

 only spdif rates work to external DACs */

 secondary AC'97 codec is present */

 0x1106, 0x3058 */

 686A */

 0x1106, 0x3059 */

 VT8233 */

/*

/*

 * allocate and initialize the descriptor buffers

 * periods = number of periods

 * fragsize = period size in bytes

		/* the start of each lists must be aligned to 8 bytes,

		 * but the kernel pages are much bigger, so we don't care

 fill the entries */

		/* fill descriptors for a period.

		 * a period can be split to several descriptors if it's

		 * over page boundary.

 buffer boundary */

 period boundary */

 period continues to the next */

			/*

			dev_dbg(&pci->dev,

				"tbl %d: at %d  size %d (rest %d)\n",

				idx, ofs, r, rest);

/*

 *  Basic I/O

 1ms */

 1ms */

 here we need to wait fairly for long time.. */

 disable interrupts */

 clear interrupts */

 for via686 */

 outl(0, VIADEV_REG(viadev, OFFSET_CURR_PTR));

/*

 *  Interrupt handler

 *  Used for 686 and 8233A

 check mpu401 interrupt */

 check status for each stream */

			/*

			 * Update hwptr_done based on 'period elapsed'

			 * interrupts. We'll use it, when the chip returns 0 

			 * for OFFSET_CURR_COUNT.

 ack */

/*

 *  Interrupt handler

 check status for each stream */

			/*

			 * Update hwptr_done based on 'period elapsed'

			 * interrupts. We'll use it, when the chip returns 0 

			 * for OFFSET_CURR_COUNT.

 ack */

/*

 *  PCM callbacks

/*

 * trigger callback

/*

 * pointer callbacks

/*

 * calculate the linear position at the given sg-buffer index and the rest count

 check the validity of the calculated position */

			/* Some mobos report count = 0 on the DMA boundary,

			 * i.e. count = size indeed.

			 * Let's check whether this step is above the expected size.

 count register returns full size when end of buffer is reached */

/*

 * get the current pointer on via686

	/* The via686a does not have the current index register,

	 * so we need to calculate the index from CURR_PTR.

 CURR_PTR holds the address + 8 */

 remember the last position */

/*

 * get the current pointer on via823x

	/* An apparent bug in the 8251 is worked around by sending a 

/*

 * hw_params callback:

 * allocate the buffer and build up the buffer description table

/*

 * hw_free callback:

 * clean up the buffer description table and release the buffer

/*

 * set up the table pointer

/*

 * prepare callback for playback and capture on via686

 this must be set after channel_reset */

/*

 * lock the current rate

 already set */

/*

 * prepare callback for DSX playback on via823x

 format */

 stereo */

 rate */

 STOP index is never reached */

/*

 * prepare callback for multi-channel playback on via823x

 set sample number to slot 3, 4, 7, 8, 6, 9 (for VIA8233/C,8235) */

 corresponding to FL, FR, RL, RR, C, LFE ?? */

 STOP index is never reached */

/*

 * prepare callback for capture on via823x

 STOP index is never reached */

/*

 * pcm hardware definition, identical for both playback and capture

 SNDRV_PCM_INFO_RESUME | */

/*

 * open callback skeleton

 set the hw rate condition */

 DXS#3 and spdif is on */

 fixed DXS playback rate */

 use full SRC capabilities of DXS */

 a fixed rate */

	/* we may remove following constaint when we modify table entries

/*

 * open callback for playback on via686

/*

 * open callback for playback on via823x DXS

/*

 * open callback for playback on via823x multi-channel

	/* channels constraint for VIA8233A

	 * 3 and 5 channels are not supported

/*

 * open callback for capture on via686 and via823x

/*

 * close callback

 release the rate lock */

 via686 playback callbacks */

 via686 capture callbacks */

 via823x DSX playback callbacks */

 via823x multi-channel playback callbacks */

 via823x capture callbacks */

/*

 * create pcm instances for VIA8233, 8233C and 8235 (not 8233A)

 x 4 */

 x 1 */

 x 2 */

 FLAG|EOL for rec0-1, mc, sdx0-3 */

 PCM #0:  4 DSX playbacks and 1 capture */

 set up playbacks */

 capture */

 PCM #1:  multi-channel playback and 2nd capture */

 set up playback */

 set up capture */

/*

 * create pcm instances for VIA8233A

 FLAG|EOL for rec0, mc, sdx3 */

 PCM #0:  multi-channel playback and capture */

 set up playback */

 capture */

 SPDIF supported? */

 PCM #1:  DXS3 playback (for spdif) */

 set up playback */

/*

 * create a pcm instance for via686a/b

 FLAG | EOL for PB, CP, FM */

/*

 *  Mixer part

	/* formerly they were "Line" and "Mic", but it looks like that they

	 * have nothing to do with the actual physical connections...

 save the spdif flag for rate filtering */

 .subdevice set later */

/*

 VT1612A */

 FIXME: which codec? */

 VT1616 */

launchpad.net/bugs/38546 */

 terminator */

 use slot 10/11 */

 Enable legacy joystick port */

/*

 *

		/* when no h/w PCM volume control is found, use DXS volume control

		 * as the PCM vol control

 Using DXS when PCM emulation is enabled is really weird */

 select spdif data slot 10/11 */

 SPDIF off as default */

 FIXME: correct? (disable MIDI) */

 disable joystick */

 force MIDI */

 force MIDI */

 no, use BIOS settings */

 enable PCI I/O 2 */

 disable PCI I/O 2 */

 enable MIDI interrupt */

/*

 * proc interface

/*

 *

 broken on K7M? */

 disable all legacy ports */

 codec not ready? */

 deassert ACLink reset, force SYNC */

 FIXME: should we do full reset here for all chip models? */

 deassert ACLink reset, force SYNC (warm AC'97 reset) */

 ACLink on, deassert ACLink reset, VSR, SGD data out */

 note - FM data out has trouble with non VRA codecs !! */

	/* Make sure VRA is enabled, in case we didn't do a

 ACLink on, deassert ACLink reset, VSR, SGD data out */

 note - FM data out has trouble with non VRA codecs !! */

 wait until codec ready */

 primary codec ready */

 FIXME: we don't support the second codec yet so skip the detection now.. */

 This is ok, the most of motherboards have only one codec */

 route FM trap to IRQ, disable FM trap */

 disable all GPI interrupts */

		/* Workaround for Award BIOS bug:

		 * DXS channels don't work properly with VRA if MC97 is disabled.

 MC97 */

/*

 * power management

 save misc values */

 CONFIG_PM_SLEEP */

 disable interrupts */

	/* The 8233 ac97 controller does not implement the master bit

	 * in the pci command register. IMHO this is a violation of the PCI spec.

/*

 * auto detection of DXS channel supports.

 terminator */

 for newer revision, default to DXS_SRC */

	/*

	 * not detected, try 48k rate only to be sure.

			/* force to use VIA8233 or 8233A model according to

			 * dxs_support module option

 no slog assignment */

 chip->dxs_fixed = 1; /* FIXME: use 48k for DXS #3? */

 disable interrupts */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for ESS Solo-1 (ES1938, ES1946, ES1969) soundcard

 *  Copyright (c) by Jaromir Koutek <miri@punknet.cz>,

 *                   Jaroslav Kysela <perex@perex.cz>,

 *                   Thomas Sailer <sailer@ife.ee.ethz.ch>,

 *                   Abramo Bagnara <abramo@alsa-project.org>,

 *                   Markus Gruber <gruber@eikon.tum.de>

 * 

 * Rewritten from sonicvibes.c source.

 *

 *  TODO:

 *    Rewrite better spinlocks

/*

  NOTES:

  - Capture data is written unaligned starting from dma_base + 1 so I need to

    disable mmap and to add a copy callback.

  - After several cycle of the following:

    while : ; do arecord -d1 -f cd -t raw | aplay -f cd ; done

    a "playback write error (DMA or IRQ trouble?)" may happen.

    This is due to playback interrupts not generated.

    I suspect a timing issue.

  - Sometimes the interrupt handler is invoked wrongly during playback.

    This generates some harmless "Unexpected hw_pointer: wrong interrupt

    acknowledge".

    I've seen that using small period sizes.

    Reproducible with:

    mpg123 test.mp3 &

    hdparm -t -T /dev/hda

 Index 0-MAX */

 ID for this card */

 Enable this card */

/*



 max. number of registers to save */

 Solo-1 */

/* -----------------------------------------------------------------

 * Write to a mixer register

/* -----------------------------------------------------------------

 * Read from a mixer register

/* -----------------------------------------------------------------

 * Write to some bits of a mixer register (return old value)

/* -----------------------------------------------------------------

 * Write command to Controller Registers

/* -----------------------------------------------------------------

 * Read the Read Data Buffer

/* -----------------------------------------------------------------

 * Write value cmd register

/* -----------------------------------------------------------------

 * Read data from cmd register and return it

/* -----------------------------------------------------------------

 * Write data to cmd register and return old value

/* --------------------------------------------------------------------

 * Reset the chip

 Demand transfer DMA: 4 bytes per DMA request */

	/* Change behaviour of register A1

	   4x oversampling

 enable/select DMA channel and IRQ channel */

 Set spatializer parameters to recommended values */

/* --------------------------------------------------------------------

 * Reset the FIFOs

 set filter register */

/* --------------------------------------------------------------------

 * Configure Solo1 builtin DMA Controller

 Enable DMA controller */

 1. Master reset */

 2. Mask DMA */

 3. Unmask DMA */

 Enable DMA controller */

 1. Master reset */

 2. Mask DMA */

 3. Unmask DMA */

/* ----------------------------------------------------------------------

 *

 *                           *** PCM part ***

		/* According to the documentation this should be:

                /* This two stage init gives the FIFO -> DAC connection time to

                 * settle before first data from DMA flows in.  This should ensure

/* --------------------------------------------------------------------

 * First channel for Extended Mode Audio 1 ADC Operation

 program type */

 set clock and counters */

 initialize and configure ADC */

	snd_es1938_reset_fifo(chip);	

 11. configure system interrupt controller and DMA controller */

/* ------------------------------------------------------------------------------

 * Second Audio channel DAC Operation

 set clock and counters */

 initialize and configure Audio 2 DAC */

 program DMA */

 reset */

 set clock and counters */

 initialized and configure DAC */

 program DMA */

/* during the incrementing of dma counters the DMA register reads sometimes

   returns garbage. To ensure a valid hw pointer, the following checks which

   should be very unlikely to fail are used:

   - is the current DMA address in the valid DMA range ?

   - is the sum of DMA address and DMA counter pointing to the last DMA byte ?

   One can argue this could differ by one byte depending on which register is

   updated first, so the implementation below allows for that.

 This stuff is *needed*, don't ask why - AB */

 bad, use last saved */

 good, remember it */

 This stuff is *needed*, don't ask why - AB */

/* ----------------------------------------------------------------------

 * Audio1 Capture (ADC)

 DMA controller screws on higher values */

/* -----------------------------------------------------------------------

 * Audio2 Playback (DAC)

 DMA controller screws on higher values */

/* -------------------------------------------------------------------

 * 

 *                       *** Mixer part ***

 ---------------------------------------------------------------------------- */

 ---------------------------------------------------------------------------- */

/*

 * initialize the chip - used by resume callback, too

 reset chip */

 configure native mode */

 enable bus master */

 disable legacy audio */

 set DDMA base */

 set DMA/IRQ policy */

 enable Audio 1, Audio 2, MPU401 IRQ and HW volume IRQ*/

 reset DMA */

/*

 * PM support

 save mixer-related registers */

 disable irqs */

 restore mixer-related registers */

 CONFIG_PM_SLEEP */

 SUPPORT_JOYSTICK */

 disable irqs */

 enable PCI device */

 check, if we can restrict PCI DMA transfers to 24 bits */

 still use non-managed irq handler as it's re-acquired at PM resume */

 fix from Thomas Sailer */

/* --------------------------------------------------------------------

 * Interrupt handler

 AUDIO 1 */

 clear irq */

 AUDIO 2 */

 clear irq */

 Hardware volume */

 ack interrupt */

 MPU401 */

 the following line is evil! It switches off MIDI interrupt handling after the first interrupt received.

 replacing the last 0 by 0x40 works for ESS-Solo1, but just doing nothing works as well!

 andreas@flying-snail.de

 snd_es1938_mixer_bits(chip, ESSSB_IREG_MPU401CONTROL, 0x40, 0); /* ack? */

 this line is vital for MIDI interrupt handling on ess-solo1

 andreas@flying-snail.de

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for Cirrus Logic CS4281 based PCI soundcard

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>,

 Index 0-MAX */

 ID for this card */

 Enable switches */

 dual codec */

/*

 *  Direct registers

/*

 *  BA0 registers

 Host Interrupt Status Register */

 Internal Interrupt Enable Bit */

 MIDI port interrupt */

 FIFO polled interrupt */

 DMA interrupt (half or end) */

 FIFO channel interrupt */

 DMA channel interrupt */

 General Purpose Input (Primary chip) */

 General Purpose Input (Secondary chip) */

 GPIO3 pin Interrupt */

 GPIO1 pin Interrupt */

 VOLUP pin Interrupt */

 VOLDN pin Interrupt */

 Host Interrupt Control Register */

 INTENA Change Mask */

 INTENA Value */

 End of Interrupt command */

 Host Interrupt Mask Register */

 Use same contants as for BA0_HISR */

 ISA Interrupt Enable Register */

 Host DMA Engine 0 Status Register */

 Host DMA Engine 1 Status Register */

 Host DMA Engine 2 Status Register */

 Host DMA Engine 3 Status Register */

 Channel 1 Pending */

 Channel 2 Pending */

 DMA Half Terminal Count */

 DMA Terminal Count */

 DMA Running */

 Pending Request */

 Host DMA Engine 0 Current Address */

 Host DMA Engine 0 Current Count */

 Host DMA Engine 0 Base Address */

 Host DMA Engine 0 Base Count */

 Host DMA Engine 1 Current Address */

 Host DMA Engine 1 Current Count */

 Host DMA Engine 1 Base Address */

 Host DMA Engine 1 Base Count */

 Host DMA Engine 2 Current Address */

 Host DMA Engine 2 Current Count */

 Host DMA Engine 2 Base Address */

 Host DMA Engine 2 Base Count */

 Host DMA Engine 3 Current Address */

 Host DMA Engine 3 Current Count */

 Host DMA Engine 3 Base Address */

 Host DMA Engine 3 Base Count */

 Host DMA Engine 0 Mode */

 Host DMA Engine 0 Command */

 Host DMA Engine 1 Mode */

 Host DMA Engine 1 Command */

 Host DMA Engine 2 Mode */

 Host DMA Engine 2 Command */

 Host DMA Engine 3 Mode */

 Host DMA Engine 3 Command */

 Enable DMA mode */

 Enable poll mode */

 Transfer By Channel */

 Count By Channel (0 = frame resolution) */

 Swap Left/Right Channels */

 Sample is 20-bit */

 Unsigned */

 Big Endian */

 Mono */

 Sample is 8-bit */

 Not supported */

 Access Increment (0) or Decrement (1) */

 Auto-Initialize */

 Verify Transfer */

 Write Transfer */

 Read Transfer */

 Half Terminal Count Interrupt */

 Terminal Count Interrupt */

 DMA Mask bit */

 FIFO Control 0 */

 FIFO Control 1 */

 FIFO Control 2 */

 FIFO Control 3 */

 FIFO Enable bit */

 DAC Zero */

 Previous Sample Hold */

 Right Slot Mapping */

 Left Slot Mapping */

 FIFO buffer size (in samples) */

 FIFO starting offset (in samples) */

 FIFO Polled Data 0 */

 FIFO Polled Data 1 */

 FIFO Polled Data 2 */

 FIFO Polled Data 3 */

 FIFO Channel Status */

 Right Channel Out */

 Left Channel Out */

 Move Read Pointer */

 FIFO Empty */

 FIFO Full */

 Internal Overrun Flag */

 Right Channel In */

 Left Channel In */

 FIFO Status and Interrupt Control 0 */

 FIFO Status and Interrupt Control 1 */

 FIFO Status and Interrupt Control 2 */

 FIFO Status and Interrupt Control 3 */

 FIFO Interrupt Count */

 FIFO OverRun Interrupt Enable */

 FIFO UnderRun Interrupt Enable */

 FIFO Sample Count Interrupt Enable */

 FIFO Sample Count */

 FIFO OverRun */

 FIFO UnderRun */

 FIFO Sample Count Reached */

 Power Management Control/Status */

 Configuration Write Protect */

 Extended PCI Power Management Control */

 Full Power DowN */

 GPIO Pin Interface Register */

 Serial Port Power Management Control (& ASDIN2 enable) */

 GP INT Primary PME# Enable */

 GP INT Secondary PME# Enable */

 EEPROM Serial Port Disable */

 ASDIN2 Enable */

 Asynchronous ASDOUT Assertion */

 Wakeup for Secondary Input */

 Wakeup for Primary Input */

 Asynchronous ASYNC Assertion */

 Reset Not! */

 Configuration Load Register (EEPROM or BIOS) */

 CFLR must be in AC97 link mode */

 ISA Interrupt Select */

 Test Register */

 Subsystem ID register */

 Clock Control Register 1 */

 Read Only */

 DLL Ready */

 DLL Output Select */

 Clock Enable */

 DLL PowerUp */

 DLL Source Select */

 Feature Reporting Register */

 Slot 12 GPIO Output Register for AC-Link */

 Serial Port Master Control */

 Force Codec Ready Not */

 On-Demand Support Enable ASDIN2 */

 On-Demand Support Enable ASDIN1 */

 ASDIN2 to ASDOUT Loopback */

 ASDOUT to ASDIN2 Loopback */

 Loopback Output Valid Frame bit */

 Target Secondary Codec ID */

 Primary Port External Loopback */

 Primary Port Internal Loopback */

 Port Timing Configuration */

 AC97 mode */

 Master Serial Port Enable */

 Serial Port Configuration 1 */

 Primary Output Port Format */

 Primary Output Port Enable */

 Serial Port Configuration 2 */

 Primary Input Port Format */

 Primary Input Port Enable */

 Slot 12 Monitor Register for Primary AC-Link */

 AC'97 Control */

 Target Codec */

 0=Write, 1=Read Command */

 Dynamic Command Valid */

 Valid Frame */

 Enable Sync */

 AC'97 Status */

 Valid Status */

 Codec Ready */

 AC'97 Output Slot Valid */

 AC'97 Command Address */

 AC'97 Command Data */

 AC'97 Input Slot Valid */

 AC'97 Status Address */

 AC'97 Status Data */

 Joystick poll/trigger */

 Joystick control */

 Joystick control */

 Joystick control */

 MIDI Control */

 Reset MIDI Interface */

 MIDI Loop Back Enable */

 MIDI Transmuit Interrupt Enable */

 MIDI Receive Interrupt Enable */

 MIDI Receive Enable */

 MIDI Transmit Enable */

 MIDI Command (wo) */

 MIDI Status (ro) */

 Sticky bit (RBE 1->0) */

 Sticky bit (TBF 0->1) */

 Receive Buffer Empty */

 Transmit Buffer Full */

 MIDI Write */

 MIDI Read (ro) */

 AC'97 On-Demand Slot Disable for primary link (ro) */

 AC'97 On-Demand Slot Disable for secondary link (ro) */

 Configure Interface (EEPROM interface) */

 Slot 12 Monitor Register 2 for secondary AC-link */

 AC'97 Status Register 2 */

 AC'97 Input Slot Valid Register 2 */

 AC'97 Status Address Register 2 */

 AC'97 Status Data Register 2 */

 FM Synthesis Status (ro) */

 FM Bank 0 Address Port (wo) */

 FM Data Port */

 FM Bank 1 Address Port */

 FM Bank 1 Data Port */

 Sound System Power Management */

 Playback SRC + FM/Wavetable MIX */

 Capture Sample Rate Converter Enable */

 Playback Sample Rate Converter Enable */

 Joystick Enable */

 Serial Port Engine and AC-Link Enable */

 FM Synthesis Block Enable */

 DAC Sample Rate - Playback SRC */

 ADC Sample Rate - Capture SRC */

 Sound System Control Register */

 Hardwave Volume Step (0=1,1=2) */

 Master Volume Codec Select */

 Master Volume Line Out Disable */

 Master Volume Alternate Out Disable */

 Master Volume Mono Out Disable */

 External SRC Loopback Mode */

 SRC Loopback Mode */

 CD Transfer Data */

 Harware Volume Control Enable */

 FM Synthesis Left Volume Control */

 FM Synthesis Right Volume Control */

 SRC Slot Assignments */

 PCM Playback Left Volume Control */

 PCM Playback Right Volume Control */

 playback sample rate */

 capture sample rate */

 Source Slot Numbers - Playback */

 invalid for BA0_SRCSA */

 invalid for BA0_SRCSA */

 Source Slot Numbers - Capture */

 Source Slot Numbers - Others */

 MIDI modes */

 joystick bits */

 Bits for JSPT */

 Bits for JSCTL */

 Data register pairs masks */

 JS GPIO */

/*

 *

 offset to DBA register */

 offset to DCA register */

 offset to DBC register */

 offset to DCC register */

 offset to DMR register */

 offset to DCR register */

 offset to HDSR register */

 offset to FCR register */

 offset to FSIC register */

 DMA mode */

 DMA command */

 FIFO control */

 FIFO offset within BA1 */

 FIFO left slot */

 FIFO right slot */

 period number */

 virtual (accessible) address */

 virtual (accessible) address */

 CS4281 */

/*

 *  constants

/*

 *  common I/O routines

	/*

	 *  1. Write ACCAD = Command Address Register = 46Ch for AC97 register address

	 *  2. Write ACCDA = Command Data Register = 470h    for data to write to AC97

	 *  3. Write ACCTL = Control Register = 460h for initiating the write

	 *  4. Read ACCTL = 460h, DCV should be reset by now and 460h = 07h

	 *  5. if DCV not cleared, break and return error

	/*

	 *  Setup the AC97 control registers on the CS461x to send the

	 *  appropriate command to the AC97 to perform the read.

	 *  ACCAD = Command Address Register = 46Ch

	 *  ACCDA = Command Data Register = 470h

	 *  ACCTL = Control Register = 460h

	 *  set DCV - will clear when process completed

	 *  reset CRW - Write command

	 *  set VFRM - valid frame enabled

	 *  set ESYN - ASYNC generation enabled

	 *  set RSTN - ARST# inactive, AC97 codec not reset

		/*

		 *  First, we want to wait for a short time.

		/*

		 *  Now, check to see if the write has completed.

		 *  ACCTL = 460h, DCV should be reset by now and 460h = 07h

 FIXME: volatile is necessary in the following due to a bug of

 some gcc versions

	/*

	 *  1. Write ACCAD = Command Address Register = 46Ch for AC97 register address

	 *  2. Write ACCDA = Command Data Register = 470h    for data to write to AC97 

	 *  3. Write ACCTL = Control Register = 460h for initiating the write

	 *  4. Read ACCTL = 460h, DCV should be reset by now and 460h = 17h

	 *  5. if DCV not cleared, break and return error

	 *  6. Read ACSTS = Status Register = 464h, check VSTS bit

	/*

	 *  Setup the AC97 control registers on the CS461x to send the

	 *  appropriate command to the AC97 to perform the read.

	 *  ACCAD = Command Address Register = 46Ch

	 *  ACCDA = Command Data Register = 470h

	 *  ACCTL = Control Register = 460h

	 *  set DCV - will clear when process completed

	 *  set CRW - Read command

	 *  set VFRM - valid frame enabled

	 *  set ESYN - ASYNC generation enabled

	 *  set RSTN - ARST# inactive, AC97 codec not reset

	/*

	 *  Wait for the read to occur.

		/*

		 *  First, we want to wait for a short time.

		/*

		 *  Now, check to see if the read has completed.

		 *  ACCTL = 460h, DCV should be reset by now and 460h = 17h

	/*

	 *  Wait for the valid status bit to go active.

		/*

		 *  Read the AC97 status register.

		 *  ACSTS = Status Register = 464h

		 *  VSTS - Valid Status

	/*

	 *  Read the data returned from the AC97 register.

	 *  ACSDA = Status Data Register = 474h

/*

 *  PCM part

 Leave wave playback FIFO enabled for FM */

 special "hardcoded" rates */

 for workaround */

 Initialize DMA */

 Deactivate wave playback FIFO before changing slot assignments */

 Initialize FIFO */

 Activate FIFO again for FM playback */

 Clear FIFO Status and Interrupt Control Register */

	/*

	dev_dbg(chip->card->dev,

		"DCC = 0x%x, buffer_size = 0x%x, jiffies = %li\n",

		snd_cs4281_peekBA0(chip, dma->regDCC), runtime->buffer_size,

	       jiffies);

	/* should be detected from the AC'97 layer, but it seems

	   that although CS4297A rev B reports 18-bit ADC resolution,

	/* should be detected from the AC'97 layer, but it seems

	   that although CS4297A rev B reports 18-bit ADC resolution,

/*

 *  Mixer section

/*

 * proc interface

/*

 * joystick support

 ?

 IS_REACHABLE(CONFIG_GAMEPORT) */

 Mask interrupts */

 Stop the DLL Clock logic. */

 Sound System Power Management - Turn Everything OFF */

 defined below */

 2 BARs */

 Having EPPMC.FPDN=1 prevent proper chip initialisation */

	/* Set the 'Configuration Write Protect' register

	 * to 4281h.  Allows vendor-defined configuration

 Sound System Power Management */

 Serial Port Power Management */

 	/* Blast the clock control register to zero so that the

         * PLL starts out in a known state, and blast the master serial

         * port control register to zero so that the serial ports also

        /* Make ESYN go to zero to turn off

	/*  Drive the ARST# pin low for a minimum of 1uS (as defined in the AC97

	 *  spec) and then drive it high.  This is done for non AC97 modes since

	 *  there might be logic external to the CS4281 that uses the ARST# line

	/*

	 *  Set the serial port timing configuration.

	/*

	 *  Start the DLL Clock logic.

	/*

	 * Wait for the DLL ready signal from the clock logic.

		/*

		 *  Read the AC97 status register to see if we've seen a CODEC

		 *  signal from the AC97 codec.

	/*

	 *  The first thing we do here is to enable sync generation.  As soon

	 *  as we start receiving bit clock, we'll start producing the SYNC

	 *  signal.

	/*

	 * Wait for the codec ready signal from the AC97 codec.

		/*

		 *  Read the AC97 status register to see if we've seen a CODEC

		 *  signal from the AC97 codec.

	/*

	 *  Assert the valid frame signal so that we can start sending commands

	 *  to the AC97 codec.

	/*

	 *  Wait until we've sampled input slots 3 and 4 as valid, meaning that

	 *  the codec is pumping ADC data across the AC-link.

		/*

		 *  Read the input slot valid register and see if input slots 3

		 *  4 are valid yet.

	/*

	 *  Now, assert valid frame and the slot 3 and 4 valid bits.  This will

	 *  commense the transfer of digital audio data to the AC97 codec.

	/*

	 *  Initialize DMA structures

 AC'97 left PCM playback (3) */

 AC'97 right PCM playback (4) */

 AC'97 left PCM record (3) */

 AC'97 right PCM record (4) */

 Activate wave playback FIFO for FM playback */

 Initialize digital volume */

 Enable IRQs */

 Unmask interrupts */

/*

 *  MIDI section

 fill UART FIFO buffer at first, and turn Tx interrupts only if necessary */

/*

 *  Interrupt handler

 ack DMA IRQ */

 workaround, sometimes CS4281 acknowledges */

 end or middle transfer position twice */

 EOI to the PCI part... reenables interrupts */

/*

 * OPL3 command

 right port */

 left port */

/*

 * Power Management

 Disable interrupts. */

 remember the status registers */

 Turn off the serial ports. */

 Power off FM, Joystick, AC link, */

 DLL off. */

 AC link off. */

 restore the status registers */

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  card-als4000.c - driver for Avance Logic ALS4000 based soundcards.

 *  Copyright (C) 2000 by Bart Hartgers <bart@etpmod.phys.tue.nl>,

 *			  Jaroslav Kysela <perex@perex.cz>

 *  Copyright (C) 2002, 2008 by Andreas Mohr <hw7oshyuv3001@sneakemail.com>

 *

 *  Framework borrowed from Massimo Piccioni's card-als100.c.

 *

 * NOTES

 *

 *  Since Avance does not provide any meaningful documentation, and I

 *  bought an ALS4000 based soundcard, I was forced to base this driver

 *  on reverse engineering.

 *

 *  Note: this is no longer true (thank you!):

 *  pretty verbose chip docu (ALS4000a.PDF) can be found on the ALSA web site.

 *  Page numbers stated anywhere below with the "SPECS_PAGE:" tag

 *  refer to: ALS4000a.PDF specs Ver 1.0, May 28th, 1998.

 *

 *  The ALS4000 seems to be the PCI-cousin of the ALS100. It contains an

 *  ALS100-like SB DSP/mixer, an OPL3 synth, a MPU401 and a gameport 

 *  interface. These subsystems can be mapped into ISA io-port space, 

 *  using the PCI-interface. In addition, the PCI-bit provides DMA and IRQ 

 *  services to the subsystems.

 * 

 * While ALS4000 is very similar to a SoundBlaster, the differences in

 * DMA and capturing require more changes to the SoundBlaster than

 * desirable, so I made this separate driver.

 * 

 * The ALS4000 can do real full duplex playback/capture.

 *

 * FMDAC:

 * - 0x4f -> port 0x14

 * - port 0x15 |= 1

 *

 * Enable/disable 3D sound:

 * - 0x50 -> port 0x14

 * - change bit 6 (0x40) of port 0x15

 *

 * Set QSound:

 * - 0xdb -> port 0x14

 * - set port 0x15:

 *   0x3e (mode 3), 0x3c (mode 2), 0x3a (mode 1), 0x38 (mode 0)

 *

 * Set KSound:

 * - value -> some port 0x0c0d

 *

 * ToDo:

 * - by default, don't enable legacy game and use PCI game I/O

 * - power management? (card can do voice wakeup according to datasheet!!)

 Index 0-MAX */

 ID for this card */

 Enable this card */

 most frequent access first */

 ALS4000 */

 IOx: B == Byte, W = Word, D = DWord; SPECS_PAGE: 37 */

 2nd function */

 2nd function */

 2nd function */

 all registers 32bit wide; SPECS_PAGE: 38 to 42 */

 SPECS_PAGE: 37/38 */

 all registers 8bit wide; SPECS_PAGE: 20 to 23 */

 secondary PCM FIFO (recording) */

 for testing, activate via CR3A */

 IRQ/FIFO controlled for 0/1 */

 IRQ/FIFO controlled for 0/1 */

	/* Control Register is reg | 0xc0 (bit 7, 6 set) on sbmixer_index

	 * NOTE: assumes chip->mixer_lock to be locked externally already!

 NOTE: assumes chip->mixer_lock to be locked externally already! */

 SPECS_PAGE: 40 */

 SPECS_PAGE: 38 */

 structure for setting up playback */

 ALS4000_FORMAT_U8_MONO */

 ALS4000_FORMAT_S8_MONO */	

 ALS4000_FORMAT_U16L_MONO */

 ALS4000_FORMAT_S16L_MONO */

 ALS4000_FORMAT_U8_STEREO */

 ALS4000_FORMAT_S8_STEREO */	

 ALS4000_FORMAT_U16L_STEREO */

 ALS4000_FORMAT_S16L_STEREO */

 structure for setting up capture */

 ALS4000_FORMAT_U8_MONO */

 ALS4000_FORMAT_S8_MONO */	

 ALS4000_FORMAT_U16L_MONO */

 ALS4000_FORMAT_S16L_MONO */

 ALS4000_FORMAT_U8_STEREO */

 ALS4000_FORMAT_S8_STEREO */	

 ALS4000_FORMAT_U16L_STEREO */

 ALS4000_FORMAT_S16L_STEREO */

	/* FIXME: from second playback on, there's a lot more clicks and pops

	 * involved here than on first playback. Fiddling with

	 * tons of different settings didn't help (DMA, speaker on/off,

	 * reordering, ...). Something seems to get enabled on playback

	 * that I haven't found out how to disable again, which then causes

 SPEAKER_ON not needed, since dma_on seems to also enable speaker */

 snd_sbdsp_command(chip, SB_DSP_SPEAKER_ON); */

	/* FIXME race condition in here!!!

	   chip->mode non-atomic update gets consistently protected

	   by reg_lock always, _except_ for this place!!

	   Probably need to take reg_lock as outer (or inner??) lock, too.

	   (or serialize both lock operations? probably not, though... - racy?)

/* FIXME: this IRQ routine doesn't really support IRQ sharing (we always

 * return IRQ_HANDLED no matter whether we actually had an IRQ flag or not).

 * ALS4000a.PDF writes that while ACKing IRQ in PCI block will *not* ACK

 * the IRQ in the SB core, ACKing IRQ in SB block *will* ACK the PCI IRQ

 * register (alt_port + ALS4K_IOB_0E_IRQTYPE_SB_CR1E_MPU). Probably something

 * could be optimized here to query/write one register only...

 * And even if both registers need to be queried, then there's still the

 * question of whether it's actually correct to ACK PCI IRQ before reading

 * SB IRQ like we do now, since ALS4000a.PDF mentions that PCI IRQ will *clear*

 * SB IRQ status.

 * (hmm, SPECS_PAGE: 38 mentions it the other way around!)

 * And do we *really* need the lock here for *reading* SB_DSP4_IRQSTATUS??

	/* find out which bit of the ALS4000 PCI block produced the interrupt,

 playback */

 capturing */

 MPU401 interrupt */

 ACK the PCI block IRQ */

 SPECS_PAGE: 20 */

	/* dev_dbg(chip->card->dev, "als4000: irq 0x%04x 0x%04x\n",

 only ack the things we actually handled above */

****************************************************************/

 formats */

 formats */

****************************************************************/

*****************************************************************/

*****************************************************************/

 do some more configuration */

	/* always select DMA channel 0, since we do not actually use DMA

 enable interrupts */

 SPECS_PAGE: 39 */

 enable burst mode to prevent dropouts during high PCI bus usage */

 auto-detect */

 Enable legacy joystick port */

 disable joystick */

 make sure that interrupts are disabled */

 free resources */

 enable PCI device */

 check, if we can restrict PCI DMA transfers to 24 bits */

 private_data: acard */,

 disable all legacy ISA stuff */

 internally registered as IRQF_SHARED in case of ALS4000 SB */

	/* FIXME: ALS4000 has interesting MPU401 configuration features

	 * at ALS4K_CR1A_MPU401_UART_MODE_CONTROL

	 * (pass-thru / UART switching, fast MIDI clock, etc.),

	 * however there doesn't seem to be an ALSA API for this...

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   ALSA driver for ATI IXP 150/200/250 AC97 modem controllers

 *

 *	Copyright (c) 2004 Takashi Iwai <tiwai@suse.de>

 Exclude the first card */

 ID for this card */

 just for backward compatibility */

/*

 interrupt source */

 interrupt enable */

 (RO */

 (WO) modem is running */

 command */

 modem only */

 modem only */

 modem only */

 modem only */

 modem only */

 modem only */

 modem only */

 modem only */

 modem only */

 modem only */

 slot # */

 RO */

 RO */

 RO */

 output threshold */

 LINKPTR */

 max number of descriptor packets */

/*

 * DMA packate descriptor

 DMA buffer address */

 status bits */

 size of the packet in dwords */

 address of the next packet descriptor */

/*

 * stream enum

 DMAs */

 AC97 pcm slots */

 pcm devices */

/*

 * constants and callbacks for each DMA type

 ATI_DMA_XXX */

 LINKPTR offset */

 DT_CUR offset */

 called from open callback */

 called from trigger (START/STOP) */

 called from trigger (STOP only) */

/*

 * DMA stream

 assigned PCM substream */

 DMA buffer address, bytes */

 index # of ac97_pcm to access, -1 = not used */

/*

 * ATI IXP chip

 memory i/o */

 max. channels for PCM out */

 for codec detection */

 passed from the module option */

 playback open mutex */

/*

 SB200 */

 SB400 */

/*

 * lowlevel functions

/*

 * update the bits of the given register.

 * return 1 if the bits changed.

/*

 * macros for easy use

/*

 * handling DMA packets

 *

 * we allocate a linear buffer for the DMA, and split it to  each packet.

 * in a future version, a scatter-gather buffer should be implemented.

/*

 * build packets ring for the given buffer size.

 *

 * IXP handles the buffer descriptors, which are connected as a linked

 * list.  although we can change the list dynamically, in this version,

 * a static RING of buffer descriptors is used.

 *

 * the ring is built in this function, and is set up to the hardware. 

 clear */

 reset DMA before changing the descriptor table */

 fill the entries */

 in dwords */

/*

 * remove the ring buffer and release it if assigned

/*

 * AC97 interface

 time out may happen during reset */

/*

 * reset AC link

 reset powerdoewn */

 perform a software reset */

 do a hard reset */

 deassert RESET and assert SYNC to make sure */

 if (atiixp_read(chip, MODEM_MIRROR) & 0x1) /* modem running, too? */

	return -EBUSY;

/*

 * auto-detection of codecs

 *

 * the IXP chip can generate interrupts for the non-existing codecs.

 * NEW_FRAME interrupt is used to make sure that the interrupt is generated

 * even if all three codecs are connected.

 wait for the interrupts */

 disable irqs */

/*

 * enable DMA and irqs

 set up spdif, enable burst mode */

 clear all interrupt source */

 enable irqs */

/*

 * disable DMA and IRQs

 clear interrupt source */

 disable irqs */

/*

 * PCM section

/*

 * pointer callback simplly reads XXX_DMA_DT_CUR register as the current

 * position.  when SG-buffer is implemented, the offset must be calculated

 * correctly...

/*

 * XRUN detected, and stop the PCM substream

/*

 * the period ack.  update the substream.

 set BUS_BUSY interrupt bit if any DMA is running */

 call with spinlock held */

/* common trigger callback

 * calling the lowlevel callbacks in it

/*

 * lowlevel callbacks for each DMA type

 *

 * every callback is supposed to be called in chip->reg_lock spinlock

 flush FIFO of analog OUT DMA */

 enable/disable analog OUT DMA */

 start/stop transfer over OUT DMA */

 enable/disable analog IN DMA */

 start/stop analog IN DMA */

 flush FIFO of analog IN DMA */

 set up slots and formats for analog OUT */

 set output threshold */

 set up slots and formats for analog IN */

/*

 * hw_params - allocate the buffer and set up buffer descriptors

 set up modem rate */

/*

 * pcm hardware definition, identical for all DMA types

 enable DMA bits */

 disable DMA bits */

/*

 AC97 playback */

 AC97 capture */

 initialize constants */

 PCM #0: analog I/O */

/*

 * interrupt handler

 process audio DMA */

 for codec detection */

 disable the detected irqs */

 ack */

/*

 * ac97 mixer section

 to be sure */

 snd_ac97_tune_hardware(chip->ac97, ac97_quirks); */

/*

 * power management

 CONFIG_PM_SLEEP */

/*

 * proc interface for register dump

/*

 * destructor

/*

 * constructor for chip instance

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for C-Media CMI8338 and 8738 PCI soundcards.

 * Copyright (c) 2000 by Takashi Iwai <tiwai@suse.de>

 Does not work. Warning may block system in capture mode */

 #define USE_VAR48KRATE */

 Index 0-MAX */

 ID for this card */

 Enable switches */

/*

 * CM8x38 registers definition

 ch1: enable */

 ch0: enable */

 ch1: pause */

 ch0: pause */

 ch1, 0:playback, 1:record */

 ch0, 0:playback, 1:record */

 channel 1 (DAC?) sampling frequency */

 channel 0 (ADC?) sampling frequency */

 SPDIF IN/OUT at channel B */

 SPDIF OUT only channel A */

 ext. SPDIIF/IN -> OUT loopback */

 SPDIF/OUT can be heard from internal DAC */

 master control block (MCB) interrupt enabled */

 bus master enabled */

 legacy voice (SB16,FM) */

 legacy UART */

 legacy joystick */

 ZVPORT */

 5,6 channels */

 initial FM PCM offset 2 when Fmute=1 */

 4 channels */

 set latency timer 48h */

 emulated edge trigger legacy IRQ */

 24-bit spdif: model 039 */

 enable AC3: model 037 */

 for model <= 037 ? */

 24bit spdif: model 037 */

 #define CM_SPDIF_INVERSE	0x00010000 */ 
 model 037 */

 model 039 */

 model 055? */

 model 055? */

 model 055? */

 double SPDIF sample rate 88.2/96 */

 inverse SPDIF/IN valid bit */

 bit 3: 16 bits, bit 2: stereo */

 bit 1: 16 bits, bit 0: stereo */

 ? */

 Voice Control? CMI8738 */

 Master Control Block abort cond.? */

 Modell 033? Direct programming EEPROM (read data register) */

 High/Low status from DMA ctrl register */

 Legacy is in High DMA channel */

 Legacy is in Stereo mode */

 don't map base reg dword->sample */

 MPU401 i/o port address */

 enable bus master to write 8237 base reg */

 SB16 base address */

 FM OPL3 base address */

 enable XSPDIF/OUT to I/O interface */

 spdif in/out copyright bit */

 enable wave+fm_midi -> SPDIF/OUT */

 internal vendor ID write enable, model 039? */

 0: legacy i/o wait (default), 1: legacy i/o bus retry */

 direct programming eeprom regs */

 5.1 channels support */

 line-in as center out */

 line-in as bass out */

 external bass input enable */

 power down */

 filter control at front end DAC, model 037? */

 analog master amp +6dB, model 039? */

 model 037? */

 copy front to rear */

 5V spdif output (1 = 0.5v (coax)) */

 write */

 read */

 enable double dac */

 0: front=ch0, 1: front=ch1 */

 0: 16bit SPDIF, 1: 32bit */

 int. SPDIF-OUT -> int. IN */

 enable legacy FM */

 enable AC3: model 039 */

 choose writable internal SUBID (audio) */

 model 037? */

 0: SPDIF/OUT 44.1K, 1: 48K */

 activate channel mask on legacy DMA */

 choose writable internal SUBID (modem) */

 model 037? */

 filter stepping at front end DAC, model 037? */

 model DAA interface mode */

 for model > 039 ? */

 force modem link detection on, model 037 */

 mute PCI ch1 to DAC */

 force modem link detection off, model 037 */

 1/2 interpolation at front end DAC */

 TDMA position update notification */

 model 037 */

 FM i/o cycle, 0: 48, 1: 64 PCICLKs */

 i/o cycle, 0: 4, 1: 6 PCICLKs */

 current byte/word count */

 current address */

 byte */

 write: sb16 version */

 read: hardware device version */

 ? */

 SB16 ADPCM enable */

 SBPro left/right channel switching */

 SB16 compatible */

 14.31818 Mhz reference clock frequency pin XIN */

 Guessed (487 best for 44.1kHz, not for 88/176kHz) */

 Tolerance sample rate pitch (1000ppm) */

 Note more than 80MHz */

 mute FM */

 mute PCM */

 lin-in -> rear line out */

 exchange rear/front */

 digital wave rec. left chan */

 digical wave rec. right */

 3D surround enable */

 enable SPDIF/IN PCM -> DAC */

 AUX right capture */

 AUX left capture */

 AUX right mute */

 AUX left mute */

 mic gain level (0-3) << 1 */

 mic boost */

 ? */

 #define CM_XGPBIO		0x04

 mic as center/lfe out? (model 039 or later?) */

 spdif input phase inverse (model 037) */

 spdif input valid check */

 SB16 DMA auto detect */

 hmmm.. do we have ac97 link? */

/*

 * For CMI-8338 (0x28 - 0x2b) .. is this valid for CMI-8738

 * or identical with AC97 codec?

/*

 * MPU401 pci port index address 0x40 - 0x4f (CMI-8738 spec ver. 0.6)

/*

 * FM pci port index address 0x50 - 0x5f (CMI-8738 spec ver. 0.6)

/*

 * access from SB-mixer port

 Phone volume control (0-3) << 5 */

 Phone mute control */

 Speaker mute control, default high */

 Rec. R-channel enable */

 Rec. L-channel enable */

 Mic record boost */

/*

 * CMI-8338 spec ver 0.5 (this is not valid for CMI-8738):

 * the 8 registers 0xf8 - 0xff are used for programming m/n counter by the PLL

 * unit (readonly?).

/*

 * extended registers

 write: base address */

 read: current address */

 0-15: count of samples at bus master; buffer size */

 16-31: count of samples at codec; fragment size */

 ADC parameters group, 0: 44k, 1: 48k */

 7.1 channels support */

 SPDIF/IN 32k sample rate */

 ADC output to SPDIF/OUT */

 DAC in ADC as Center/LFE */

 monitor the CMPL/CMPR of ADC */

 invert ZVPORT's LRCK */

 ? */

/*

 * size of i/o region

/*

 * channels for playback / capture

/*

 * flags to check device open/close

/*

 * driver data

 dac/adc running? */

 format bits */

 in frames */

 channel (0/1) */

 physical address of the buffer */

 mixer elements toggled/resumed during ac3 playback */

 switch to toggle */

 value to change when ac3 mode */

 {"IEC958 Out To DAC", 1}, 
 device ID */

 FUNCTRL0 current value */

 DAC/ADC PCM */

 2nd DAC */

 SPDIF */

 samplerate above 48k */

 spdif ready? */

 spdif switch enabled? */

 for software AC3 */

 for playbacks */

 open mode */

 ch0 - DAC, ch1 - ADC or 2nd DAC */

 external MIDI */

 read/write operations for dword register */

 read/write operations for word register */

 read/write operations for byte register */

 bit operations for dword register */

 bit operations for byte register */

/*

 * PCM interface

/*

 * calculate frequency

/*

 * Determine PLL values for frequency setup, maybe the CMI8338 (CMI8738???)

 * does it this way .. maybe not.  Never get any information from C-Media about

 * that <werner@suse.de>.

			/*

			 * If we found one, remember this,

			 * and try to find a closer one

/*

 * Program pll register bits, I assume that the 8 registers 0xf8 up to 0xff

 * are mapped onto the 8 ADC/DAC sampling frequency which can be chosen

 * at the register CM_REG_FUNCTRL1 (0x04).

 * Problem: other ways are also possible (any information about that?)

	/*

	 * Guess that this programs at reg. 0x04 the pos 15:13/12:10

	 * for DSFC/ASFC (000 up to 111).

 FIXME: Init (Do we've to set an other register first before programming?) */

 FIXME: Is this correct? Or shouldn't the m/n/r values be used for that? */

 FIXME: Setup (Do we've to set an other register first to enable this?) */

 USE_VAR48KRATE */

 reserve the channel A */

/*

 stereo 16bit only */

/*

 * prepare playback/capture channel

 * channel to be used must have been set in rec->ch.

 24/32bit */

 buffer and period sizes in frame */

 multi-channels */

 set buffer address */

 program sample counts */

 set adc/dac flag */

 dev_dbg(cm->card->dev, "functrl0 = %08x\n", cm->ctrl); */

 set sample rate */

 set format */

/*

 * PCM trigger/stop

 set interrupt */

 enable channel */

 disable interrupt */

 reset */

/*

 * return the current pointer

 this seems better..

/*

 * playback

/*

 * capture

/*

 * hw preparation for spdif

/*

 save mixer setting and mute for AC3 playback */

 toggle */

 restore the previously saved mixer status */

		cm->mixer_insensitive = 0; /* at first clear this;

 spinlock held! */

 AC3EN for 037 */

 AC3EN for 039 */

 SPD24SEL for 037, 0x02 */

 SPD24SEL for 039, 0x20, but cannot be set */

 can_ac3_sw */

 SPD32SEL for 037 & 039, 0x20 */

 set 176K sample rate to fix 033 HW bug */

 chip model >= 37 */

 they are controlled via "IEC958 Output Switch" */

 snd_cmipci_set_bit(cm, CM_REG_LEGACY_CTRL, CM_ENSPDOUT); */

 snd_cmipci_set_bit(cm, CM_REG_FUNCTRL1, CM_SPDO2DAC); */

 they are controlled via "IEC958 Output Switch" */

 snd_cmipci_clear_bit(cm, CM_REG_LEGACY_CTRL, CM_ENSPDOUT); */

 snd_cmipci_clear_bit(cm, CM_REG_FUNCTRL1, CM_SPDO2DAC); */

/*

 * preparation

 playback - enable spdif only on the certain condition */

 playback  (via device #2) - enable spdif always */

 doesn't matter */

/*

 * Apparently, the samples last played on channel A stay in some buffer, even

 * after the channel is reset, and get added to the data for the rear DACs when

 * playing a multichannel stream on channel B.  This is likely to generate

 * wraparounds and thus distortions.

 * To avoid this, we play at least one zero sample after the actual stream has

 * stopped.

 set up a small silence buffer */

 configure for 16 bits, 2 channels, 8 kHz */

 start stream (we don't need interrupts) */

 stop and reset stream */

 capture */

 capture with spdif (via device #2) */

/*

 * interrupt handler

 fastpath out, to ease interrupt sharing */

 acknowledge interrupt */

/*

 * h/w infos

 playback on channel A */

 capture on channel B */

 playback on channel B - stereo 16bit only? */

 spdif playback on channel A */

 spdif playback on channel A (32bit, IEC958 subframes) */

 spdif capture on channel B */

/*

 * check device open/close

	/* FIXME: a file should wait until the device becomes free

	 * when it's opened on blocking mode.  however, since the current

	 * pcm framework doesn't pass file pointer before actually opened,

	 * we can't know whether blocking mode or not in open callback..

 disable dual DAC mode */

 enable dual DAC mode again */

/*

 8768 only supports 44k/48k recording

 use channel B */

 use channel A */

 use channel B */

/*

/*

 channel B */

 channel B */

 channel B */

 set up rate */

/*

/*

 * mixer interface:

 * - CM8338/8738 has a compatible mixer interface with SB16, but

 *   lack of some elements like tone control, i/o gain and AGC.

 * - Access to native registers:

 *   - A 3D switch

 *   - Output mute switches

/*

 * general mixer element

/*

 * input route (left,right) -> (left,right)

/*

 * native mixer switches/volumes

/*

 * special case - check mixer sensitivity

struct cmipci *cm = snd_kcontrol_chip(kcontrol);

 ignored */

CMIPCI_MIXER_SW_MONO("PCM Playback Switch", CM_REG_MIXER1, CM_WSMUTE_SHIFT, 1),

 switch with sensitivity */

/*

 * other switches

 register index */

 mask bits */

 mask bits to turn on */

 byte access? */

	unsigned int ac3_sensitive: 1;	/* access forbidden during

					 * non-audio operation?

 ignored */

 these will be controlled in pcm device */

 inverse: 0 = 5V */

 DEFINE_BIT_SWITCH_ARG(spdo_48k, CM_REG_MISC_CTRL, CM_SPDF_AC97|CM_SPDIF48K, 0, 1);

 DEFINE_BIT_SWITCH_ARG(spdi_phase, CM_REG_CHFORMAT, CM_SPDIF_INVERSE, 0, 0); */

 reversed */

 DEFINE_BIT_SWITCH_ARG(line_rear, CM_REG_MIXER1, CM_REAR2LIN, 1, 0);

 DEFINE_BIT_SWITCH_ARG(line_bass, CM_REG_LEGACY_CTRL, CM_CENTR2LIN|CM_BASE2LIN, 0, 0);

 DEFINE_BIT_SWITCH_ARG(joystick, CM_REG_FUNCTRL1, CM_JYSTK_EN, 0, 0); /* now module option */

/*

 * callbacks for spdif output switch

 * needs toggle two registers..

 same bit as spdi_phase */

 both for CM8338/8738 */

 for non-multichannel chips */

 only for CM8738 */

 controlled in pcm device */

 DEFINE_MIXER_SWITCH("IEC958 Output Switch", spdif_enable),

	DEFINE_MIXER_SWITCH("IEC958 In/Out 48KHz", spdo_48k),

 only for model 033/037 */

 only for model 039 or later */

 card control switches */

 mixer reset */

 8768 has no PCM volume

 mixer switches */

 card switches */

	/*

	 * newer chips don't have the register bits to force modem link

	 * detection; the bit that was FLINKON now mutes CH1

/*

 * proc interface

/*

 * check chip version and capabilities

 * driver name is modified according to the chip model

 check reg 0Ch, bit 24-31 */

 check reg 08h, bit 24-28 */

 4 or 6 channels */

 FIXME: majority is 0x201? */

 auto-detect */

 disable ints */

 disable channels */

 reset mixer */

 first try FM regs in PCI port range */

 then try legacy ports */

 enable FM */

 dual DAC mode */

	/*

	 * check chip version, max channels and capabilities

 added -MCx suffix for chip supporting multi-channels */

 default FUNCNTRL0 */

 default FUNCNTRL0 */

 initialize codec registers */

 disable ints */

 disable channels */

 magic */

 more magic */

 Set Bus Master Request */

 Assume TX and compatible chip set (Autodetection required for VX chip sets) */

 enable UART */

 reset mixer */

 create pcm devices */

 create mixer interface & switches */

	/*

	 * (Re-)Enable external switch spdo_48k

 USE_VAR48KRATE */

/*

/*

 * power management

 save registers */

 disable ints */

 reset / initialize to a sane state */

 restore registers */

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  The driver for the ForteMedia FM801 based soundcards

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 Index 0-MAX */

 ID for this card */

 Enable this card */

/*

 *  Enable TEA575x tuner

 *    1 = MediaForte 256-PCS

 *    2 = MediaForte 256-PCP

 *    3 = MediaForte 64-PCR

 *   16 = setup tuner only (this is additional bit), i.e. SF64-PCR FM card

 *  High 16-bits are video (radio) device number + 1

/*

 *  Direct registers

 PCM Output Volume */

 FM Output Volume */

 I2S Volume */

 Record Source */

 Playback Control */

 Playback Count */

 Playback Bufer I */

 Playback Buffer II */

 Capture Control */

 Capture Count */

 Capture Buffer I */

 Capture Buffer II */

 Codec Control */

 I2S Mode Control */

 Volume Up/Down/Mute Status */

 I2C Control */

 AC'97 Command */

 AC'97 Data */

 MPU401 Data */

 MPU401 Command */

 General Purpose I/O Control */

 General Control */

 Interrupt Mask */

 Interrupt Status */

 OPL3 Status Read / Bank 0 Write */

 OPL3 Data 0 Write */

 OPL3 Bank 1 Write */

 OPL3 Bank 1 Write */

 Blocks Power Down Control */

 codec access */

 read=1, write=0 */

 port valid=1 */

 busy=1 */

 codec id (2bit) */

 playback and record control register bits */

 playback only */

 playback only */

 playback only */

 IRQ status bits */

 GPIO control register */

 read/write */

 directions: 1 = input, 0 = output*/

 function select: */

    1 = GPIO */

    0 = other (S/PDIF, VOL) */

/**

 * struct fm801 - describes FM801 chip

 * @dev:		device for this chio

 * @irq:		irq number

 * @port:		I/O port number

 * @multichannel:	multichannel support

 * @secondary:		secondary codec

 * @secondary_addr:	address of the secondary codec

 * @tea575x_tuner:	tuner access method & flags

 * @ply_ctrl:		playback control

 * @cap_ctrl:		capture control

 * @ply_buffer:		playback buffer

 * @ply_buf:		playback buffer index

 * @ply_count:		playback buffer count

 * @ply_size:		playback buffer size

 * @ply_pos:		playback position

 * @cap_buffer:		capture buffer

 * @cap_buf:		capture buffer index

 * @cap_count:		capture buffer count

 * @cap_size:		capture buffer size

 * @cap_pos:		capture position

 * @ac97_bus:		ac97 bus handle

 * @ac97:		ac97 handle

 * @ac97_sec:		ac97 secondary handle

 * @card:		ALSA card

 * @pcm:		PCM devices

 * @rmidi:		rmidi device

 * @playback_substream:	substream for playback

 * @capture_substream:	substream for capture

 * @p_dma_size:		playback DMA size

 * @c_dma_size:		capture DMA size

 * @reg_lock:		lock

 * @proc_entry:		/proc entry

 * @v4l2_dev:		v4l2 device

 * @tea:		tea575a structure

 * @saved_regs:		context saved during suspend

/*

 * IO accessors

 FM801 */

 Gallant Odyssey Sound 4 */

/*

 *  common I/O routines

	/*

	 *  Wait until the codec interface is not ready..

 write data and address */

	/*

	 *  Wait until the write command is not completed..

	/*

	 *  Wait until the codec interface is not ready..

 read command */

/*

 *  Sample rate routines

/*

 *  PCM part

 ack first */

 TODO */

/*

 *  TEA5757 radio

 GPIO to TEA575x maps */

 WRITE_ENABLE is inverted */

 use GPIO lines and set write enable bit */

 all of lines are in the write direction */

 clear data and clock lines */

 use GPIO lines, set data direction to input */

 all of lines are in the write direction, except data */

 clear data, write enable and clock lines */

/*

 *  Mixer routines

/*

 *  initialization routines

 codec cold reset + AC'97 warm reset */

 flush posting data */

 my card has the secondary codec */

 at address #3, so the loop is inverted */

 the recovery phase, it seems that probing for non-existing codec might */

 cause timeout problems */

 init volume */

 I2S control - I2S mode */

 interrupt setup */

 mask everything, no PCM nor MPU */

 unmask MPU, PLAYBACK & CAPTURE */

 interrupt clear */

 interrupt setup - mask everything */

 FM801-AU */

 autodetect tuner connection */

 FIXME: tea575x suspend */

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0-only

/* Analog Devices 1889 audio driver

 *

 * This is a driver for the AD1889 PCI audio chipset found

 * on the HP PA-RISC [BCJ]-xxx0 workstations.

 *

 * Copyright (C) 2004-2005, Kyle McMartin <kyle@parisc-linux.org>

 * Copyright (C) 2005, Thibaut Varene <varenet@parisc-linux.org>

 *   Based on the OSS AD1889 driver by Randolph Chung <tausq@debian.org>

 *

 * TODO:

 *	Do we need to take care of CCS register?

 *	Maybe we could use finer grained locking (separate locks for pb/cap)?

 * Wishlist:

 *	Control Interface (mixer) support

 *	Better AC97 support (VSR...)?

 *	PM support

 *	MIDI support

 *	Game Port support

 *	SG DMA support (this will need *a lot* of work)

 keep track of some hw registers */

 reg setup */

 dma base address */

 DMA buffer size */

 playback register state */

 Disable wave channel */

 disable IRQs */

 clear IRQ and address counters and pointers */

 flush */

 Disable ADC channel */

 flush */

 average needs 352 msec */

 docs say 7000, but we're lazy */

.fifo_size = 0,*/

 docs say we could to VSR, but we're lazy */

.fifo_size = 0,*/

 Mask out 16-bit / Stereo */

 let's make sure we don't clobber ourselves */

 Set sample rates on the codec */

 Set up DMA */

 writes flush */

 Mask out 16-bit / Stereo */

 let's make sure we don't clobber ourselves */

 Set up DMA */

 writes flush */

/* this is called in atomic context with IRQ disabled.

   Must be as fast as possible and not sleep.

   DMA should be *triggered* by this call.

 enable DMA loop & interrupts */

 1 to clear CHSS bit */

 flush */

 reset the chip when STOP - will disable IRQs */

/* this is called in atomic context with IRQ disabled.

   Must be as fast as possible and not sleep.

   DMA should be *triggered* by this call.

 enable DMA loop & interrupts */

 1 to clear CHSS bit */

 flush */

 reset the chip when STOP - will disable IRQs */

 Called in atomic context with IRQ disabled */

 Called in atomic context with IRQ disabled */

 clear ISR */

 WARQ is at offset 12 */

 SYRQ is at offset 4 */

 ACRQ is at offset 4 */

 RERQ is at offset 12 */

	/* doc says LSB represents -1.5dB, but the max value (-94.5dB)

	suggests that LSB is -3dB, which is more coherent with the logarithmic

 AD */

 AD1889 */

 terminator */

 Reset Disable */

 flush posted write */

 Interface Enable */

 Audio Stream Output | Variable Sample Rate Mode */

 flush posted write */

 doing that here, it works. */

 Turn off interrupt on count and zero DMA registers */

 clear DISR. If we don't, we'd better jump off the Eiffel Tower */

 flush, dammit! */

 check PCI availability (32bit DMA) */

 (1) PCI resource allocation */

 only now can we call ad1889_free */

 (2) initialization of the chip hardware */

 turn on clock */

 flush posted write */

 enable Master and Target abort interrupts */

 (1) */

 (2) */

 (3) */

 (4) */

 (5) */

 register AC97 mixer */

 register proc interface */

 (6) */

 (7) */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   ALSA driver for RME Digi32, Digi32/8 and Digi32 PRO audio interfaces

 *

 *      Copyright (c) 2002-2004 Martin Langer <martin-langer@gmx.de>,

 *                              Pilo Chambert <pilo.c@wanadoo.fr>

 *

 *      Thanks to :        Anders Torger <torger@ludd.luth.se>,

 *                         Henk Hesselink <henk@anda.nl>

 *                         for writing the digi96-driver 

 *                         and RME for all informations.

 * 

 * ****************************************************************************

 * 

 * Note #1 "Sek'd models" ................................... martin 2002-12-07

 * 

 * Identical soundcards by Sek'd were labeled:

 * RME Digi 32     = Sek'd Prodif 32

 * RME Digi 32 Pro = Sek'd Prodif 96

 * RME Digi 32/8   = Sek'd Prodif Gold

 * 

 * ****************************************************************************

 * 

 * Note #2 "full duplex mode" ............................... martin 2002-12-07

 * 

 * Full duplex doesn't work. All cards (32, 32/8, 32Pro) are working identical

 * in this mode. Rec data and play data are using the same buffer therefore. At

 * first you have got the playing bits in the buffer and then (after playing

 * them) they were overwitten by the captured sound of the CS8412/14. Both 

 * modes (play/record) are running harmonically hand in hand in the same buffer

 * and you have only one start bit plus one interrupt bit to control this 

 * paired action.

 * This is opposite to the latter rme96 where playing and capturing is totally

 * separated and so their full duplex mode is supported by alsa (using two 

 * start bits and two interrupts for two different buffers). 

 * But due to the wrong sequence of playing and capturing ALSA shows no solved

 * full duplex support for the rme32 at the moment. That's bad, but I'm not

 * able to solve it. Are you motivated enough to solve this problem now? Your

 * patch would be welcome!

 * 

 * ****************************************************************************

 *

 * "The story after the long seeking" -- tiwai

 *

 * Ok, the situation regarding the full duplex is now improved a bit.

 * In the fullduplex mode (given by the module parameter), the hardware buffer

 * is split to halves for read and write directions at the DMA pointer.

 * That is, the half above the current DMA pointer is used for write, and

 * the half below is used for read.  To mangle this strange behavior, an

 * software intermediate buffer is introduced.  This is, of course, not good

 * from the viewpoint of the data transfer efficiency.  However, this allows

 * you to use arbitrary buffer sizes, instead of the fixed I/O buffer size.

 *

 * ****************************************************************************

 Index 0-MAX */

 ID for this card */

 Enable this card */

 = {[0 ... (SNDRV_CARDS - 1)] = 1};

 Defines for RME Digi32 series */

 Playback and capture buffer size */

 IO area size */

 IO area offsets */

 Write control register bits */

 startbit */

#define RME32_WCR_MONO      (1 << 1)    /* 0=stereo, 1=mono

                                           Setting the whole card to mono

                                           doesn't seem to be very useful.

                                           A software-solution can handle 

                                           full-duplex with one direction in

                                           stereo and the other way in mono. 

                                           So, the hardware should work all 

 0=16bit, 1=32bit */

 0=input on output, 1=normal playback/capture */

 frequency (play) */

 input switch */

 Reset address */

 digital mute for output */

 1=professional, 0=consumer */

 1=DoubleSpeed (only PRO-Version); 1=BlockMode (only Adat-Version) */

 Adat Mode (only Adat-Version) */

 AutoSync */

 DAC Reset (only PRO-Version) */

 1=Emphasis on (only PRO-Version) */

 Read control register bits */

 1=locked, 0=not locked */

 1=Error, 0=no Error */

 CS841x frequency (record) */

 card mode: 1=PLL, 0=quartz */

 interrupt */

 Input types */

 Clock modes */

 Block sizes in bytes */

 Software intermediate buffer (max) size */

 Hardware revisions */

 cached write control register value */

 S/PDIF setup */

 S/PDIF setup (temporary) */

 cached read control register value */

 card revision number */

 log2 of framesize */

 in bytes, zero if not used */

 in bytes, zero if not used */

 silence callback for halfduplex mode */

 copy callback for halfduplex mode */

 copy callback for halfduplex mode */

/*

 * SPDIF I/O capabilities (half-duplex mode)

/*

 * ADAT I/O capabilities (half-duplex mode)

/*

 * SPDIF I/O capabilities (full-duplex mode)

/*

 * ADAT I/O capabilities (full-duplex mode)

 ADAT rate */

 S/PDIF rate */

 supporting the CS8414 */

 supporting the CS8412 */

 change to/from double-speed: reset the DAC (if available) */

 AutoSync */

 Internal 32.0kHz */

 Internal 44.1kHz */

 Internal 48.0kHz */

 assume 8 channels */

 AutoSync */

 S/PDIF setup */

 enable AutoSync for record-preparing */

 AutoSync off for recording */

	/*

	 * Check if there is an unconfirmed IRQ, if so confirm it, or else

	 * the hardware will not stop generating interrupts

 AutoSync */

 AutoSync */

 remember the current DMA position */

 pointer callback for halfduplex mode */

 ack and pointer callbacks for fullduplex mode */

 for halfduplex mode */

 for fullduplex mode */

 read the card's revision number */

 set up ALSA pcm device for S/PDIF */

 set up ALSA pcm device for ADAT */

 ADAT is not available on DIGI32 and DIGI32 Pro */

 make sure playback/capture is stopped, if by some reason active */

 reset DAC */

 reset buffer pointer */

 set default values in registers */

 normal playback */

 input select */

 muting on */

 init switch interface */

 init proc interface */

/*

 * proc interface

 master output frequency */

/*

 * control interface

 IEC958 (S/PDIF) Stream */

/*

 * Card initialisation

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   ALSA driver for RME Digi96, Digi96/8 and Digi96/8 PRO/PAD/PST audio

 *   interfaces 

 *

 *	Copyright (c) 2000, 2001 Anders Torger <torger@ludd.luth.se>

 *    

 *      Thanks to Henk Hesselink <henk@anda.nl> for the analog volume control

 *      code.

 note, two last pcis should be equal, it is not a bug */

 Index 0-MAX */

 ID for this card */

 Enable this card */

/*

 * Defines for RME Digi96 series, from internal RME reference documents

 * dated 12.01.00

 Playback and capture buffer size */

 IO area size */

 IO area offsets */

 Write control register bits */

 Read control register bits */

 Additional register bits */

 Monitor tracks */

 Attenuation */

 Input types */

 Clock modes */

 Block sizes in bytes */

 Volume control */

 Defines for snd_rme96_trigger */

 cached write control register value */

 S/PDIF setup */

 S/PDIF setup (temporary) */

 cached read control register value */

 cached additional register value */

 cached volume of analog output */

 card revision number */

 log2 of framesize */

 in bytes, zero if not used */

 in bytes, zero if not used */

/*

 * Digital output capabilities (S/PDIF)

/*

 * Digital input capabilities (S/PDIF)

/*

 * Digital output capabilities (ADAT)

/*

 * Digital input capabilities (ADAT)

/*

 * The CDATA, CCLK and CLATCH bits can be used to write to the SPI interface

 * of the AD1852 or AD1852 D/A converter on the board.  CDATA must be set up

 * on the falling edge of CCLK and be stable on the rising edge.  The rising

 * edge of CLATCH after the last data bit clocks in the whole data word.

 * A fast processor could probably drive the SPI interface faster than the

 * DAC can handle (3MHz for the 1855, unknown for the 1852).  The udelay(1)

 * limits the data rate to 500KHz and only causes a delay of 33 microsecs.

 *

 * NOTE: increased delay from 1 to 10, since there where problems setting

 * the volume.

 Analog input, overrides S/PDIF setting */

 ADAT rate */

 S/PDIF rate */

 slave clock */

 change to/from double-speed: reset the DAC (if available) */

 need to restore volume */

 AutoSync */ 

 Internal */

 Word clock is a master mode */

 Only Digi96/8 PRO and Digi96/8 PAD supports XLR */

			/*

			 * Revision less than 004 does not support 64 and

			 * 88.2 kHz

 assume 8 channels */

 slave clock */

 need to restore volume later? */

 S/PDIF setup */

 fastpath out, to ease interrupt sharing */

 playback */

 capture */

 slave clock */

 slave clock */

                /* makes no sense to use analog input. Note that analog

 read the card's revision number */

 set up ALSA pcm device for S/PDIF */

 set up ALSA pcm device for ADAT */

 ADAT is not available on the base model */

 make sure playback/capture is stopped, if by some reason active */

 set default values in registers */

 set 44.1 kHz playback */

 normal playback */

 set to master clock mode */

 set coaxial input */

 set 44.1 kHz analog capture */

 reset the ADC */

 reset and enable the DAC (order is important). */

 reset playback and record buffer pointers */

 reset volume */

 init switch interface */

 init proc interface */

/*

 * proc interface

/*

 * control interface

 PST */

 Analog instead of XLR */

 PAD */

 for handling PST case, (INPUT_ANALOG is moved to INPUT_XLR */

 special case for PST */

 IEC958 (S/PDIF) Stream */

/*

 * Card initialisation

 save capture & playback pointers */

 save playback and capture buffers */

 disable the DAC  */

 reset playback and record buffer pointers */

 restore playback and capture buffers */

 reset the ADC */

 reset and enable DAC, restore analog volume */

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for ESS Maestro 1/2/2E Sound Card (started 21.8.99)

 *  Copyright (c) by Matze Braun <MatzeBraun@gmx.de>.

 *                   Takashi Iwai <tiwai@suse.de>

 *                  

 *  Most of the driver code comes from Zach Brown(zab@redhat.com)

 *	Alan Cox OSS Driver

 *  Rewritted from card-es1938.c source.

 *

 *  TODO:

 *   Perhaps Synth

 *

 *  Notes from Zach Brown about the driver code

 *

 *  Hardware Description

 *

 *	A working Maestro setup contains the Maestro chip wired to a 

 *	codec or 2.  In the Maestro we have the APUs, the ASSP, and the

 *	Wavecache.  The APUs can be though of as virtual audio routing

 *	channels.  They can take data from a number of sources and perform

 *	basic encodings of the data.  The wavecache is a storehouse for

 *	PCM data.  Typically it deals with PCI and interracts with the

 *	APUs.  The ASSP is a wacky DSP like device that ESS is loth

 *	to release docs on.  Thankfully it isn't required on the Maestro

 *	until you start doing insane things like FM emulation and surround

 *	encoding.  The codecs are almost always AC-97 compliant codecs, 

 *	but it appears that early Maestros may have had PT101 (an ESS

 *	part?) wired to them.  The only real difference in the Maestro

 *	families is external goop like docking capability, memory for

 *	the ASSP, and initialization differences.

 *

 *  Driver Operation

 *

 *	We only drive the APU/Wavecache as typical DACs and drive the

 *	mixers in the codecs.  There are 64 APUs.  We assign 6 to each

 *	/dev/dsp? device.  2 channels for output, and 4 channels for

 *	input.

 *

 *	Each APU can do a number of things, but we only really use

 *	3 basic functions.  For playback we use them to convert PCM

 *	data fetched over PCI by the wavecahche into analog data that

 *	is handed to the codec.  One APU for mono, and a pair for stereo.

 *	When in stereo, the combination of smarts in the APU and Wavecache

 *	decide which wavecache gets the left or right channel.

 *

 *	For record we still use the old overly mono system.  For each in

 *	coming channel the data comes in from the codec, through a 'input'

 *	APU, through another rate converter APU, and then into memory via

 *	the wavecache and PCI.  If its stereo, we mash it back into LRLR in

 *	software.  The pass between the 2 APUs is supposedly what requires us

 *	to have a 512 byte buffer sitting around in wavecache/memory.

 *

 *	The wavecache makes our life even more fun.  First off, it can

 *	only address the first 28 bits of PCI address space, making it

 *	useless on quite a few architectures.  Secondly, its insane.

 *	It claims to fetch from 4 regions of PCI space, each 4 meg in length.

 *	But that doesn't really work.  You can only use 1 region.  So all our

 *	allocations have to be in 4meg of each other.  Booo.  Hiss.

 *	So we have a module parameter, dsps_order, that is the order of

 *	the number of dsps to provide.  All their buffer space is allocated

 *	on open time.  The sonicvibes OSS routines we inherited really want

 *	power of 2 buffers, so we have all those next to each other, then

 *	512 byte regions for the recording wavecaches.  This ends up

 *	wasting quite a bit of memory.  The only fixes I can see would be 

 *	getting a kernel allocator that could work in zones, or figuring out

 *	just how to coerce the WP into doing what we want.

 *

 *	The indirection of the various registers means we have to spinlock

 *	nearly all register accesses.  We have the main register indirection

 *	like the wave cache, maestro registers, etc.  Then we have beasts

 *	like the APU interface that is indirect registers gotten at through

 *	the main maestro indirection.  Ouch.  We spinlock around the actual

 *	ports on a per card basis.  This means spinlock activity at each IO

 *	operation, but the only IO operation clusters are in non critical 

 *	paths and it makes the code far easier to follow.  Interrupts are

 *	blocked while holding the locks because the int handler has to

 *	get at some of them :(.  The mixer interface doesn't, however.

 *	We also have an OSS state lock that is thrown around in a few

 *	places.

 Index 1-MAX */

 ID for this card */

 Enable this card */

 NEC Versas ? */

 Mode Flags */

 Values for the ESM_LEGACY_AUDIO_CONTROL */

 Values for the ESM_CONFIG_A */

 Values for the ESM_CONFIG_B */

undoc */

undoc */

undoc */

 Values for Ring Bus Control B */

 ****Port Addresses**** */

   Write & Read */

   AC97 + RingBus */

   WaveCache*/

   ASSP*/

 Midi */

 Others */

 PCI Register */

 Bob Bits */

 Host IRQ Control Bits */

 What's that? */

 Host IRQ Status Bits */

 default rate 48000 */

 APU Modes: reg 0x00, bit 4-7 */

 16-Bit Linear Sample Player */

 16-Bit Stereo Sample Player */

 8-Bit Linear Sample Player */

 8-Bit Stereo Sample Player */

 8-Bit Differential Sample Playrer */

 Digital Delay Line */

 Dual Tap Reader */

 Correlator */

 Input Mixer */

 Wave Table Mode */

 Sample Rate Convertor */

 16-Bit Ping-Pong Sample Player */

 Reserved 1 */

 Reserved 2 */

 Reserved 3 */

 reg 0x00 */

 APU Filtey Q Control */

 reg 0x02 */

 reg 0x03 */

 reg 0x04 */

 most 8bit of wave start offset */

 reg 0x05 - wave start offset */

 reg 0x06 - wave end offset */

 reg 0x07 - wave loop length */

 reg 0x08 */

 reg 0x09 */

 bit 0-7 amplitude dest? */

 reg 0x0a */

 Polar Pan Control */

 reg 0x0b */

 reg 0x0c */

 APU Filter Control */

 APU ATFP Type */

 APU ATFP Flags */

 capture mixing buffer size */

 APU use in the driver */

 chip type */

 DMA Hack! */

 status */

 Playback Channel */

 playback/capture pcm buffer */

 capture mixer buffer */

 current hw pointer in bytes */

 sample counter in bytes */

 total buffer size in bytes */

 period size in bytes */

 offset for ptr */

 stereo/16bit flag */

 playback / capture */

 required timer frequency */

 linked list */

 Module Config */

 in bytes */

 clock */

 for clock measurement */

 buffer */

 Resources... */

 power-management enabled */

 DMA memory block */

 ALSA Stuff */

 Maestro Stuff */

 active timer instancs */

 timer frequency */

 memory lock */

 APU states */

 active substreams */

 physical device path */

 for h/w volume control */

 Maestro 1 */

 Maestro 2 */

 Maestro 2E */

/* *********************

   * Low Level Funcs!  *

 no spinlock */

 no spinlock */

 Wait for the codec bus to be free */

 timeout */

 timeout */

 Write the bus */

msleep(1);*/

msleep(1);*/

msleep(1);*/

msleep(1);*/

 no spinlock */

 no spinlock */

 no spinlock */

 ASSP is not supported */

/* *******************

   * Bob the Timer!  *

 compute ideal interrupt frequency for buffer size & play rate */

 first, find best prescaler value to match freq */

 next, back off prescaler whilst getting divider into optimum range */

 now fine-tune the divider for best match */

 divide = 0 is illegal, but don't let prescale = 4! */

 set reg */

 Now set IDR 11/17 */

 call with substream spinlock */

 call with substream spinlock */

 check reduction of timer frequency */

 we acquire 4 interrupts per period for precise control.. */

/*************

 *  PCM Part *

 XXX: do we need this? */ 

 get current pointer */

 hardware is in words */

 spin lock held */

 set the APU mode */

 set the wavecache control reg */

 8bit */

 stereo */

 set the wavecache control reg */

 Offset to PCMBAR */

 words */

 System RAM (Bit 22) */

 Enable stereo */

 (Bit 23) */

		/* base offset of dma calcs when reading the pointer

 Load the buffer into the wave engine */

 setting loop == sample len */

 clear effects/env.. */

 set amp now to 0xd0 (?), low byte is 'amplitude dest'? */

 clear routing stuff */

 dma on, no envelopes, filter to all 1s) */

 set panning: left or right */

			/* Check: different panning. On my Canyon 3D Chipset the

			   Channels are swapped. I don't know, about the output

			   to the SPDif Link. Perhaps you have to change this

 stereo */

 clear WP interrupts */

 enable WP ints */

 set frequency */

 hmmm.. */

 Load the frequency, turn on 6dB */

 set the wavecache control reg */

 Offset to PCMBAR */

 words */

	/* base offset of dma calcs when reading the pointer

 bit 22 -> System RAM */

 Begin loading the APU */

	/* need to enable subgroups.. and we should probably

 Load the buffer into the wave engine */

 clear effects/env.. */

 amplitude now?  sure.  why not.  */

 set filter tune, radius, polar pan */

 route input */

 dma on, no envelopes, filter to all 1s) */

	/* APU assignments:

	   0 = mono/left SRC

	   1 = right SRC

	   2 = mono/left Input Mixer

	   3 = right Input Mixer

	/* data seems to flow from the codec, through an apu into

	   the 'mixbuf' bit of page, then through the SRC apu

 input mixer (left/mono) */

 parallel in crap, see maestro reg 0xC [8-11] */

 in words */

 SRC (left/mono); get input from inputing apu */

 input mixer (right) */

 in words */

 SRC (right) */

 Sample Rate conversion APUs don't like 0x10000 for their rate */

 Load the frequency, turn on 6dB */

 fix mixer rate at 48khz.  and its _must_ be 0x10000. */

 clear WP interrupts */

 enable WP ints */

/*******************

 *  ALSA Interface *

 maestro handles always 16bit */

 8bit is already word shifted */

SNDRV_PCM_INFO_PAUSE |*/

SNDRV_PCM_INFO_PAUSE |*/

SNDRV_PCM_FMTBIT_U8 |*/ SNDRV_PCM_FMTBIT_S16_LE,

/* *************************

   * DMA memory management *

/* Because the Maestro can only take addresses relative to the PCM base address

 allocate a new memory chunk with the specified size */

 free a memory chunk */

 allocate an empty chunk */

 setup the dma_areas */

 buffer is extracted from the pre-allocated memory chunk */

 area was changed */

 remove dma areas if allocated */

/*

 * allocate APU pair

/*

 * release APU pair

/******************

 * PCM open/close *

 search 2 APUs */

 get mixbuffer */

 keep MIXBUF size */

/*

 * measure clock

 enough large for a single shot */

 default clock value */

 search 2 APUs (although one apu is enough) */

 System RAM (Bit 22) */

 initialize apu */

 clear WP interrupts */

 enable WP ints */

 48000 Hz */

 stop */

 check the current position */

/*

 get DMA buffer */

 set PCMBAR */

/*

 * suppress jitter on some maestros when playing stereo

/*

 * update pointer

/* The hardware volume works by incrementing / decrementing 2 counters

   (without wrap around) in response to volume button presses and then

   generating an interrupt. The pair of counters is stored in bits 1-3 and 5-7

	/* Figure out which volume control button was pushed,

	   based on differences from the default register

 Reset the volume control registers. */

 mute */

 volume up */

 volume down */

		/* The counters have not changed, yet we've received a HV

		   interrupt. According to tests run by various people this

 counters increased by 1 -> volume up */

 counters decreased by 1 -> volume down */

/*

 * interrupt handler

 else ack 'em all, i imagine */

/*

 *  Mixer stuff

 ES1968 doesn't need VRA */

 attach master switch / volumes for h/w volume control */

/*

 * reset ac97 codec

 save configuration */

outw(inw(ioaddr + 0x38) & 0xfffc, ioaddr + 0x38); /* clear second codec id? */

 set command/status address i/o to 1st codec */

 disable ac link */

 something magical with gpio and bus arb. */

 unmask gpio 0 */

 gpio write */

 write 0 to gpio 0 */

 write 1 to gpio 1 */

 now restore .. */

 now the second codec */

 disable ac link */

 unmask gpio 3 */

 gpio write 0 & 3 ?? */

 write 1 to gpio */

 write 9 to gpio */

outw(inw(ioaddr + 0x38) & 0xfffc, ioaddr + 0x38);

 the loop here needs to be much better if we want it.. */

 try and do a software reset */

 do a software reset */

 oh my.. */

 turn on external amp? */

 restore.. */

	/* Turn on the 978 docking chip.

	   First frob the "master output enable" bit,

 Reset */

/*

 * initialize maestro chip

	/* We used to muck around with pci config space that

	 * we had no business messing with.  We don't know enough

	 * about the machine to know which DMA mode is appropriate, 

	 * etc.  We were guessing wrong on some machines and making

	 * them unhappy.  We now trust in the BIOS to do things right,

	 * which almost certainly means a new host of problems will

	 * arise with broken BIOS implementations.  screw 'em. 

	 * We're already intolerant of machines that don't assign

	 * IRQs.

 Config Reg A */

 Clear DMA bits */

 Clear Pic Snoop Mode Bits */

 Safeguard off */

 Posted write */

 PCI timing on */

 XXX huh?  claims to be reserved.. */

	w &= ~SWAP_LR;		/* swap left/right 

				   seems to only have effect on SB

 Subtractive decode off */

 Config Reg B */

 Turn off internal clock multiplier */

 XXX how do we know which to use? */

 External clock */

 disable S/PDIF output */

 HWV on */

 Debounce off: easier to push the HW buttons */

 GPIO 4:5 */

 Disconnect from the CHI.  Enabling this made a dell 7500 work. */

 IDMA off (undocumented) */

 MIDI fix off (undoc) */

 reserved, always write 0 */

 IRQ to ISA off (undoc) */

 DDMA off */

	/*

	 *	Legacy mode

 Disable Legacy Audio */

 Disable SIRQ */

 disable mpu irq/io, game port, fm, SB */

 Set up 978 docking control chip. */

 Enable 978. */

 Turn on 978 hardware volume control. */

 Turn on 978 mixer volume control. */

 Sound Reset */

	/*

	 *	Ring Bus Setup

 setup usual 0x34 stuff.. 0x36 may be chip specific */

 direct sound, stereo */

 enable ringbus/serial */

	/*

	 *	Reset the CODEC

 Ring Bus Control B */

 SPDIF off */

w |= RINGB_EN_2CODEC;	/* enable 2nd codec */

	/* Set hardware volume control registers to midpoints.

	/* it appears some maestros (dell 7500) only work if these are set,

 M: Reserved bits... */

 M: Disable ASSP, ASSP IRQ's and FM Port */

	/*

	 * set up wavecache

 Write 0 into the buffer area 0x1E0->1EF */

		/* The 1.10 test program seem to write 0 into the buffer area

 Now back to the DirectSound stuff */

 audio serial configuration.. ? */

 parallel in, has something to do with recording :) */

 parallel out */

	/* Wave cache control on - test off, sg off, 

 Seems to be reserved? I don't know */

 reserved... I don't know */

	w &= ~0x0200;		/* Channels 56,57,58,59 as Extra Play,Rec Channel enable

 Wave Cache Operation Enabled */

 Channels 60/61 as Placback/Record enabled */

 Clear Wavtable Size */

 Wavetable Size : 1MB */

 Bit 4 is reserved */

 DMA Stuff? I don't understand what the datasheet means */

 Bit 1 is reserved */

 Test Mode off */

 Now clear the APU control ram */

 Enable IRQ's */

/*

 * PM support

 need to restore the base pointers.. */ 

 set PCMBAR */

 restore ac97 state */

 start timer again */

 CONFIG_PM_SLEEP */

 CONFIG_SND_ES1968_INPUT */

#define IO_MASK		4      /* mask      register offset from GPIO_DATA

#define IO_DIR		8      /* direction register offset from GPIO_DATA

 GPIO to TEA575x maps */

 clear WP interrupts */

 disable IRQ */

 chip type */

 subsystem vendor id */

 Compaq Armada */

 HP omnibook 4150 */

 a PCI card, e.g. Terratec DMX */

 a PCI card, e.g. SF64-PCE2 */

 enable PCI device */

 check, if we can restrict PCI DMA transfers to 28 bits */

 Set Vars */

 in bytes */

 Clear Maestro_map */

 Clear Apu Map */

 just to be sure */

 disable power-management if not on the allowlist */

 not matched; disabling pm */

 don't play with GPIOs on laptops */

/*

 in bytes */

 check the deny list */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * bt87x.c - Brooktree Bt878/Bt879 driver for ALSA

 *

 * Copyright (c) Clemens Ladisch <clemens@ladisch.de>

 *

 * based on btaudio.c by Gerd Knorr <kraxel@bytesex.org>

 Exclude the first card */

 ID for this card */

 Enable this card */

 digital input rate */

 allow to load cards not the allowlist */

 register offsets */

 interrupt status */

 interrupt mask */

 audio control */

 audio packet lengths */

 RISC program start address */

 RISC program counter */

 interrupt bits */

 audio A/D overflow */

 RISC instruction IRQ bit set */

 FIFO overrun due to bus access latency */

 FIFO overrun due to target latency */

 FIFO data stream resynchronization */

 PCI parity error */

 RISC instruction parity error */

 PCI master or target abort */

 invalid opcode */

 sync counter overflow */

 DMA controller running */

 RISC status bits */

 audio control bits */

 enable audio data FIFO */

 enable audio DMA controller */

 packet mode FIFO trigger point - 4 DWORDs */

 8 DWORDs */

 16 DWORDs */

 enable audio capture */

 GPIO input */

 audio A/D input */

 digital audio input */

 DDF first stage decimation rate */

 limit audio data values */

 enable DDF stage 2 */

 samples rounded to 8 bits */

 data packet mode */

 ALRCK delay */

 MSB/LSB format */

 left/right indication */

 sample clock edge */

 TV tuner audio input */

 FM audio input */

 mic/line audio input */

 MUX bypass */

 analog audio power-down */

 audio gain boost */

 audio input gain */

 RISC instruction opcodes */

 write FIFO data to memory at address */

 write FIFO data to memory at current address */

 skip FIFO data */

 jump to address */

 synchronize with FIFO */

 RISC instruction bits */

 byte enable bits */

 disable FDSR errors */

 set status bits */

 clear status bits */

 interrupt */

 end of line */

 start of line */

 SYNC status bits values */

 SYNC, one WRITE per line, one extra WRITE per page boundary, SYNC, JUMP */

 Cards with configuration information */

 both an & dig interfaces, 32kHz */

 board with no external A/D */

 Card configuration */

 Digital input sampling rate */

 Register settings for digital input */

 No analog input */

 No digital input */

 just a guess */

 error 'handling' similar to aic7xxx_pci.c: */

 assume that exactly one line has been recorded */

 but check if some interrupts have been skipped */

 set at runtime */

 driver_data is the card id for that device */

 Hauppauge WinTV series */

 Hauppauge WinTV series */

 Viewcast Osprey 200 */

 Viewcast Osprey 440 (rate is configurable via gpio) */

 ATI TV-Wonder */

 Leadtek Winfast tv 2000xp delux */

 Pinnacle PCTV */

 Voodoo TV 200 */

 Askey Computer Corp. MagicTView'99 */

 AVerMedia Studio No. 103, 203, ...? */

 Prolink PixelView PV-M4900 */

 Pinnacle  Studio PCTV rave */

/* cards known not to have audio

 Nebula Electronics DigiTV */

 Pinnacle PCTV Sat */

 Pinnacle PCTV SAT CI */

 AVermedia AverTV DVB-T */

 AVermedia DVB-T 771 */

 Twinhan VisionPlus DVB-T */

 DVICO FusionHDTV 5 Lite */

 DVICO FusionHDTV DVB-T Lite */

 Ultraview DVB-T Lite */

 Chaintech Digitop DST-1000 DVB-S */

 pcHDTV HD-2000 TV */

 return the id of the card, or a negative value if it's on the denylist */

 default entries for all Bt87x cards - it's not exported */

 driver_data is set to 0 to call detection */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   ALSA driver for Intel ICH (i8x0) chipsets

 *

 *	Copyright (c) 2000 Jaroslav Kysela <perex@perex.cz>

 *

 *   This code also contains alpha support for SiS 735 chipsets provided

 *   by Mike Pieper <mptei@users.sourceforge.net>. We have no datasheet

 *   for SiS735, so the code is not fully functional.

 *



 Index 0-MAX */

 ID for this card */

 auto-check */

 just for backward compatibility */

/*

 *  Direct registers

 dword - buffer descriptor list base address */ \

 byte - current index value */ \

 byte - last valid index */ \

 byte - status register */ \

 word - position in current buffer */ \

 byte - prefetched index value */ \

 byte - control register */ \

 busmaster blocks */

 offset */

 PCM in */

 PCM out */

 Mic in */

 ICH4 busmaster blocks */

 Mic in 2 */

 PCM in 2 */

 SPDIF out */

 values for each busmaster block */

 LVI */

 SR */

 FIFO error */

 buffer completion interrupt status */

 last valid buffer completion interrupt */

 current equals last valid */

 DMA controller halted */

 PIV */

 mask */

 CR */

 interrupt on completion enable */

 fifo error interrupt enable */

 last valid buffer interrupt enable */

 reset busmaster registers */

 start busmaster operation */

 global block */

 dword - global control */

 s/pdif pcm slot mask (ICH4) */

 reserved - undefined */

 s/pdif pcm on slots 7&8 */

 s/pdif pcm on slots 6&9 */

 s/pdif pcm on slots 10&11 */

 20-bit samples (ICH4) */

 chan mask (not all chips) */

 8 channels (not all chips) */

 6 channels (not all chips) */

 4 channels (not all chips) */

 2 channels (stereo) */

 6 channels (SIS7012) */

 6 channels (SIS7012) */

 4 channels (SIS7012) */

 2 channels (SIS7012) */

 tertiary resume interrupt enable */

 secondary resume interrupt enable */

 primary resume interrupt enable */

 AClink shut off */

 AC'97 warm reset */

 AC'97 cold reset */

 GPI interrupt enable */

 dword - global status */

 ICH4: tertiary (AC_SDIN2) resume interrupt */

 ICH4: tertiary (AC_SDIN2) codec ready */

 ICH4: bit clock stopped */

 ICH4: S/PDIF interrupt */

 ICH4: PCM2-In interrupt */

 ICH4: Mic2-In interrupt */

 ICH4: sample capability bits (RO) */

 ICH4: 16- and 20-bit samples */

 ICH4: multi-channel capability bits (RO) */

 SIS: tertiary resume irq */

 SIS: tertiary codec ready */

 modem power down semaphore */

 audio power down semaphore */

 read completion status */

 bit 3 slot 12 */

 bit 2 slot 12 */

 bit 1 slot 12 */

 secondary (AC_SDIN1) resume interrupt */

 primary (AC_SDIN0) resume interrupt */

 secondary (AC_SDIN1) codec ready */

 primary (AC_SDIN0) codec ready */

 MIC capture interrupt */

 playback interrupt */

 capture interrupt */

 nforce spdif interrupt */

 modem playback interrupt */

 modem capture interrupt */

 GPI status change interrupt */

 byte - codec write semaphore */

 codec access semaphore */

 PCM In 2, Mic In 2 data in line */

 PCM In 1, Mic In 1 data in line */

 steer enable */

 last codec read data input */

 max hw frags */

/*

 * registers for Ali5455

 ALi 5455 busmaster blocks */

 ALi PCM in */

 Ali PCM out */

 Ali Mic in */

 Ali Codec SPDIF out */

 Ali center out */

 Ali center out */

 Ali Controller SPDIF in */

 Ali Controller SPDIF out */

 Ali I2S in */

 Ali PCM2 in */

 Ali Mic2 in */

 System Control Register */

 System Status Register  */

 DMA Control Register    */

 FIFO Control Register 1  */

 Interface Control Register */

 Interrupt control Register */

 Interrupt  Status Register */

 FIFO Control Register 2   */

 Command Port Register     */

 ac97 addr write */

 Status Port Register      */

 ac97 addr read */

 FIFO Control Register 3  */

 Transmit Tag Slot Register */

 Receive Tag Slot  Register */

 Command/Status Port Status Register */

 Codec Write Semaphore Register */

 hardware volume control/status */

 I2S control/status */

 spdif channel status register  */

 spdif interface control/status  */

 interrupts for the whole chip by interrupt status register finish */

 controller spdif out INTERRUPT */

 command port available */

 status port available */

 master reset */

 1=7/8, 2=6/9, 3=10/11 */

 0/1 = slot 3/6 */

 0/1 = slot 3/6 */

 00 = PCM, 01 = AC97-in, 10 = spdif-in, 11 = i2s */

 00 = PCM, 10 = spdif-in, 11 = i2s */

/*

 *  

 ich device number */

 offset to bmaddr */

 CPU address (32bit) */

 PCI bus address (32bit) */

 physical address (32bit) */

 interrupt status mask */

 ALI DMA slot */

 during ac97 clock measurement */

 workaround for 440MX */

 workaround for buggy mobos */

 workaround for Xbox AC'97 detection */

 workaround for buggy codec semaphore */

 enable VM optimization */

 SPDIF BAR index; *_SPBAR or -1 if use PCMOUT */

 SDM reg value */

 interrupt status register */

 interrupt status mask */

 82801AA */

 82901AB */

 82801BA */

 ICH3 */

 ICH4 */

 ICH5 */

 ESB */

 ICH6 */

 ICH7 */

 ESB2 */

 440MX */

 SI7012 */

 NFORCE */

 MCP04 */

 NFORCE2 */

 CK804 */

 CK8 */

 NFORCE3 */

 CK8S */

 MCP51 */

 AMD8111 */

 AMD768 */

 Ali5455 */

/*

 *  Lowlevel I/O - busmaster

/*

 *  Lowlevel I/O - AC'97 registers

/*

 *  Basic I/O

/*

 * access to AC97 codec via normal i/o (for ICH and SIS7012)

 we don't know the ready bit assignment at the moment */

 so we check any */

 codec ready ? */

 just ignore ... */

 Anyone holding a semaphore for 1 msec should be shot... */

	/* access to some forbidden (non existent) ac97 registers will not

	 * reset the semaphore. So even if you don't get the semaphore, still

 clear semaphore flag */

 I don't care about the semaphore */

 reset RCS and preserve other R/WC bits */

 reset RCS and preserve other R/WC bits */

/*

 * access to AC97 for Ali5455

 just ignore ... */

/*

 * DMA I/O

 interrupt on completion */

 interrupt on completion */

 interrupt on completion */

 clear interrupts */

/*

 *  Interrupt handler

 snd_printd("civ same %d\n", civ);

 if (step != 1)

	snd_printd("step = %d, %d -> %d\n", step, ichdev->civ, civ);

 we are not yet resumed */

 ack */

 ack them */

/*

 *  PCM part

 wait until DMA stopped */

 reset whole DMA things */

 clear FIFO for synchronization of channels */

 clear PAUSE flag */

 start DMA */

 pause */

 reset whole DMA things */

 clear interrupts */

 Force SPDIF setting */

			/* reset to 2ch once to keep the 6 channel data in alignment,

			 * to start from Front Left always

 grrr... */

		/* IO read operation is very expensive inside virtual machine

		 * as it is emulated. The probability that subsequent PICB read

		 * will return different result is high enough to loop till

		 * timeout here.

		 * Same CIV is strict enough condition to be sure that PICB

			/* another sanity check; ptr1 can go back to full

			 * before the base position is updated

 also needs to set ALI_SC_CODEC_SPDF correctly */

 NYI

 NYI

 NYI

 .capture_ops = &snd_intel8x0_ali_spdifin_ops, */

 NYI

 activate PCM only when associated AC'97 codec */

/*

 *  Mixer part

 front PCM */

 PCM IN #1 */

 MIC IN #1 */

 S/PDIF PCM */

 PCM IN #2 */

 MIC IN #2 */

 AD1885 */

 AD1885 */

 AD1981B */

 AD1885 */

 which model?  AD1885 */

 AD1981A */

 AD1981A */

 AD1981B*/

 which model?  AD1981B*/

 AD1981B */

 STAC9750/51 */

 STAC9750/51 */

 STAC9750/51 */

 STAC9750/51 */

 cf. Malone #41015 */

 cf. Malone #41015 */

AD1981B*/

 FIXME: which codec? */

 AD1981B*/

 AD1981B*/

AD1981B*/

AD1981B*/

 STAC9750/51 */

 AD1981? */

 ALC650 */

 AD1981? */

 AD1981B */

 AD1981 */

 AD1885 */

 FIXME: this seems wrong on most boards */

 terminator */

 use PCMOUT (or disabled) */

 detect the secondary codec */

 FIXME: my test board doesn't work well with VRA... */

 tune up the primary codec */

 enable separate SDINs for ICH4 */

 find the available PCM streams */

 do not allocate PCM2IN and MIC2 */

 do not allocate S/PDIF */

 enable separate SDINs for ICH4 */

 steer enable for multiple SDINs */

 steer disable */

 48kHz only */

 use slot 10/11 for SPDIF */

 clear the cold-reset bit for the next chance */

/*

 *

 end */

 ACLink on, 2 channels */

	/* do cold reset - the full ac97 powerdown may leave the controller

	 * in a warm state but actually it cannot communicate with the codec.

 ACLink on, 2 channels */

 finish cold or do warm reset */

 put logic to right state */

 first clear status bits */

		/* wait for any codec ready status.

		 * Once it becomes ready it should remain ready

		 * as long as we do not disable the ac97 link.

 no codec is found */

 wait for other codecs ready status. */

 resume phase */

 wait until all the probed codecs are ready */

 unmute the output on SIS7012 */

 enable SPDIF interrupt */

 Cold required */

 Warm */

 ACLink on */

 primary codec */

 clear semaphore flag */

 disable interrupts */

 reset channels */

 initialize Buffer Descriptor Lists */

 disable interrupts */

 reset channels */

 stop the spdif interrupt */

 --- */

/*

 * power management

 re-initialize mixer stuff */

 enable separate SDINs for ICH4 */

 use slot 10/11 for SPDIF */

 resume status */

 CONFIG_PM_SLEEP */

 enough large for one shot */

 specified in module option */

 no measurement on VM */

 don't process interrupts */

 set rate */

 trigger */

 check the position */

 oops, this value is not reliable */

 stop */

 abnormal value. hw problem? */

 first exception - 41000Hz reference clock */

 second exception - 44100HZ reference clock */

 not 48000Hz, tuning the clock.. */

 terminator */

 check module parameter first (override detection) */

 check for known (emulated) devices */

 KVM emulated sound, PCI SSID: 1af4:1100 */

 Parallels VM emulated sound, PCI SSID: 1ab8:xxxx */

 DEVICE_INTEL */

 DEVICE_INTEL_ICH4 */

 DEVICE_SIS */

 DEVICE_ALI */

 DEVICE_NFORCE */

 module parameters */

	/*

	 * Intel 82443MX running a 100MHz processor system bus has a hardware

	 * bug, which aborts PCI busmaster for audio transfer.  A workaround

	 * is to set the pages as non-cached.  For details, see the errata in

	 *     http://download.intel.com/design/chipsets/specupdt/24505108.pdf

 enable workaround */

 ALI5455 has no ac97 region */

 ICH4 and Nforce */

 ICH4 */

 initialize offsets */

 SiS 7012 swaps the registers */

 SIS7012 handles the pcm data in bytes, others are in samples */

 allocate buffer descriptor lists */

 the start of each lists must be aligned to 8 bytes */

	/* tables must be aligned to 8 bytes here, but the kernel pages

 ICH4 can have three codecs */

 recent SIS7012 can have three codecs */

 others up to two codecs */

 request irq after initializaing int_sta_mask, etc */

	/* NOTE: we don't use devm version here since it's released /

	 * re-acquired in PM callbacks.

	 * It's released explicitly in snd_intel8x0_free(), too.

 end */

 look up allow/deny list for SPDIF over ac-link */

		/* some Nforce[2] and ICH boards have problems with IRQ handling.

		 * Needs to return IRQ_HANDLED for unknown irqs.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   ALSA driver for ATI IXP 150/200/250/300 AC97 controllers

 *

 *	Copyright (c) 2004 Takashi Iwai <tiwai@suse.de>

 Index 0-MAX */

 ID for this card */

 just for backward compatibility */

/*

 interrupt source */

 interrupt enable */

 (RO */

 (WO) audio is running */

 command */

 slot # */

 RO */

 RO */

 RO */

 RO */

 RO */

 RO */

 RO */

 RO */

 RO */

 RO */

 reorder slots for 6ch */

 3,4,7,8,6,9 -> 3,4,6,9,7,8 */

 LINKPTR */

 [INT|OUT|SPDIF]_DMA_DT_SIZE */

 max number of descriptor packets */

/*

 * DMA packate descriptor

 DMA buffer address */

 status bits */

 size of the packet in dwords */

 address of the next packet descriptor */

/*

 * stream enum

 DMAs */

 AC97 pcm slots */

 pcm devices */

/*

 * constants and callbacks for each DMA type

 ATI_DMA_XXX */

 LINKPTR offset */

 DT_CUR offset */

 called from open callback */

 called from trigger (START/STOP) */

 called from trigger (STOP only) */

/*

 * DMA stream

 assigned PCM substream */

 DMA buffer address, bytes */

 index # of ac97_pcm to access, -1 = not used */

/*

 * ATI IXP chip

 max. channels for PCM out */

 for codec detection */

 passed from the module option */

 playback open mutex */

/*

 SB200 */

 SB300 */

 SB400 */

 SB600 */

 terminator */

/*

 * lowlevel functions

/*

 * update the bits of the given register.

 * return 1 if the bits changed.

/*

 * macros for easy use

/*

 * handling DMA packets

 *

 * we allocate a linear buffer for the DMA, and split it to  each packet.

 * in a future version, a scatter-gather buffer should be implemented.

/*

 * build packets ring for the given buffer size.

 *

 * IXP handles the buffer descriptors, which are connected as a linked

 * list.  although we can change the list dynamically, in this version,

 * a static RING of buffer descriptors is used.

 *

 * the ring is built in this function, and is set up to the hardware. 

 clear */

 reset DMA before changing the descriptor table */

 fill the entries */

 in dwords */

/*

 * remove the ring buffer and release it if assigned

/*

 * AC97 interface

 time out may happen during reset */

/*

 * reset AC link

 reset powerdoewn */

 perform a software reset */

 do a hard reset */

 deassert RESET and assert SYNC to make sure */

 if (atiixp_read(chip, MODEM_MIRROR) & 0x1) /* modem running, too? */

	return -EBUSY;

/*

 * auto-detection of codecs

 *

 * the IXP chip can generate interrupts for the non-existing codecs.

 * NEW_FRAME interrupt is used to make sure that the interrupt is generated

 * even if all three codecs are connected.

 this hardware doesn't need workarounds.  Probe for codec */

 wait for the interrupts */

 disable irqs */

/*

 * enable DMA and irqs

 set up spdif, enable burst mode */

 clear all interrupt source */

 enable irqs */

/*

 * disable DMA and IRQs

 clear interrupt source */

 disable irqs */

/*

 * PCM section

/*

 * pointer callback simplly reads XXX_DMA_DT_CUR register as the current

 * position.  when SG-buffer is implemented, the offset must be calculated

 * correctly...

/*

 * XRUN detected, and stop the PCM substream

/*

 * the period ack.  update the substream.

 set BUS_BUSY interrupt bit if any DMA is running */

 call with spinlock held */

/* common trigger callback

 * calling the lowlevel callbacks in it

/*

 * lowlevel callbacks for each DMA type

 *

 * every callback is supposed to be called in chip->reg_lock spinlock

 flush FIFO of analog OUT DMA */

 enable/disable analog OUT DMA */

 start/stop transfer over OUT DMA */

 enable/disable analog IN DMA */

 start/stop analog IN DMA */

 FIXME: this causes the endless loop */

 wait until slot 3/4 are finished */

 flush FIFO of analog IN DMA */

 enable/disable SPDIF OUT DMA */

 start/stop SPDIF OUT DMA */

 flush FIFO of SPDIF OUT DMA */

 DMA off, transfer on */

 set up slots and formats for SPDIF OUT */

 enable slots 10/11 */

 set up slots and formats for analog OUT */

 set output threshold */

	/*

	 * enable 6 channel re-ordering bit if needed

 set up slots and formats for analog IN */

/*

 * hw_params - allocate the buffer and set up buffer descriptors

		/* PCM is bound to AC97 codec(s)

		 * set up the AC97 codecs

/*

 * pcm hardware definition, identical for all DMA types

 direct SPDIF */

 enable DMA bits */

 disable DMA bits */

/*

 channels must be even */

 share DMA_PLAYBACK */

 AC97 playback */

 AC97 capture */

 SPDIF playback */

 front PCM */

 PCM IN #1 */

 S/PDIF OUT (optional) */

 initialize constants */

 assign AC97 pcm */

 PCM #0: analog I/O */

 no SPDIF support on codec? */

 FIXME: non-48k sample rate doesn't work on my test machine with AD1888 */

 PCM #1: spdif playback */

 pre-select AC97 SPDIF slots 10/11 */

/*

 * interrupt handler

 process audio DMA */

 for codec detection */

 disable the detected irqs */

 ack */

/*

 * ac97 mixer section

 terminator */

 to be sure */

/*

 * power management

 CONFIG_PM_SLEEP */

/*

 * proc interface for register dump

/*

 * destructor

/*

 * constructor for chip instance

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   ALSA modem driver for VIA VT82xx (South Bridge)

 *

 *   VT82C686A/B/C, VT8233A/C, VT8235

 *

 *	Copyright (c) 2000 Jaroslav Kysela <perex@perex.cz>

 *	                   Tjeerd.Mulder <Tjeerd.Mulder@fujitsu-siemens.com>

 *                    2002 Takashi Iwai <tiwai@suse.de>

/*

 * Changes:

 *

 * Sep. 2,  2004  Sasha Khapyorsky <sashak@alsa-project.org>

 *      Modified from original audio driver 'via82xx.c' to support AC97

 *      modems.

 Exclude the first card */

 ID for this card */

 just for backward compatibility */

/*

 *  Direct registers

 common offsets */

 byte - channel status */

 RO */

 RO */

 RO */

 RWC */

 RWC */

 RWC */

 byte - channel control */

 WO */

 WO */

 RW */

 RW - probably reset? undocumented */

 byte - channel type (686 only) */

 RW - autostart at EOL */

 RW */

 RW */

 dword - channel table pointer */

 dword - channel current pointer */

 dword - stop index, channel type, sample rate */

 dword - channel current count (24 bit) */

 byte - channel current index (for via8233 only) */

 modem block */

 AC'97 */

 dword */

 dword */

 pci space */

 secondary codec ready */

 low-power state */

 primary codec ready */

 0: disable, 1: enable */

 0: assert, 1: de-assert */

 0: release SYNC, 1: force SYNC hi */

 0: release SDO, 1: force SDO hi */

 0: disable VRA, 1: enable VRA */

 0: disable PCM, 1: enable PCM */

 via686 only */

 via686 only */

 FIXME: it's 0x40 in the datasheet! */

 FIXME: not documented! */

/*

 * pcm stream

 playback = 0, capture = 1 */

 # descriptors */

 for recovery from the unexpected pointer */

 SGD_SHADOW mask to check interrupts */

 secondary AC'97 codec is present */

/*

/*

 * allocate and initialize the descriptor buffers

 * periods = number of periods

 * fragsize = period size in bytes

		/* the start of each lists must be aligned to 8 bytes,

		 * but the kernel pages are much bigger, so we don't care

 fill the entries */

		/* fill descriptors for a period.

		 * a period can be split to several descriptors if it's

		 * over page boundary.

 buffer boundary */

 period boundary */

 period continues to the next */

			/*

			dev_dbg(&pci->dev,

				"tbl %d: at %d  size %d (rest %d)\n",

				idx, ofs, r, rest);

/*

 *  Basic I/O

 1ms */

 1ms */

 here we need to wait fairly for long time.. */

 disable interrupts */

 clear interrupts */

 for via686 */

 outl(0, VIADEV_REG(viadev, OFFSET_CURR_PTR));

/*

 *  Interrupt handler

 _skip_sgd:

 check status for each stream */

 ack */

/*

 *  PCM callbacks

/*

 * trigger callback

/*

 * pointer callbacks

/*

 * calculate the linear position at the given sg-buffer index and the rest count

 check the validity of the calculated position */

 bogus count 0 on the DMA boundary? */

				/* count register returns full size

				 * when end of buffer is reached

 remember the last position */

/*

 * get the current pointer on via686

	/* The via686a does not have the current index register,

	 * so we need to calculate the index from CURR_PTR.

 CURR_PTR holds the address + 8 */

/*

 * hw_params callback:

 * allocate the buffer and build up the buffer description table

/*

 * hw_free callback:

 * clean up the buffer description table and release the buffer

/*

 * set up the table pointer

/*

 * prepare callback for playback and capture

 this must be set after channel_reset */

/*

 * pcm hardware definition, identical for both playback and capture

 SNDRV_PCM_INFO_RESUME | */

/*

 * open callback skeleton

	/* we may remove following constaint when we modify table entries

/*

 * open callback for playback

/*

 * open callback for capture

/*

 * close callback

 via686 playback callbacks */

 via686 capture callbacks */

/*

 * create a pcm instance for via686a/b

 FLAGS | EOL for MR, MW */

/*

 *  Mixer part

/*

 * proc interface

/*

 *

 codec not ready? */

 deassert ACLink reset, force SYNC */

 FIXME: should we do full reset here for all chip models? */

 deassert ACLink reset, force SYNC (warm AC'97 reset) */

 ACLink on, deassert ACLink reset, VSR, SGD data out */

 ACLink on, deassert ACLink reset, VSR, SGD data out */

 wait until codec ready */

 primary codec ready */

 This is ok, the most of motherboards have only one codec */

 route FM trap to IRQ, disable FM trap */

 pci_write_config_byte(chip->pci, VIA_FM_NMI_CTRL, 0);

 disable all GPI interrupts */

/*

 * power management

 CONFIG_PM_SLEEP */

 disable interrupts */

	/* The 8233 ac97 controller does not implement the master bit

	 * in the pci command register. IMHO this is a violation of the PCI spec.

 disable interrupts */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Matt Wu <Matt_Wu@acersoftech.com.cn>

 *  Apr 26, 2001

 *  Routines for control of ALi pci audio M5451

 *

 *  BUGS:

 *    --

 *

 *  TODO:

 *    --

 Index */

 ID for this card */

 just for backward compatibility */

/*

 *  Constants definition

/*

 *  Direct Registers

 ADR0 */

 CNT0 */

 MOD  */

 MMR  */

 bit 10 */

 bit 11 */

 bit 15 */

 bit 19 */

 bit 31 */

 register data */

 register addresses */

 PCM data */

 final ESO value for channel */

 runtime->period_size */

 --- */

 num of opened channels */

 bitmap for opened channels */

 S/PDIF Mask */

/*

 *  AC97 ACCESS

 bit 15*/

/*

 *	AC97 Reset

 non-fatal if you have a non PM capable codec */

 dev_warn(codec->card->dev, "ali5451: reset time out\n"); */

/*

 *  ALI 5451 Controller

 recording */

 playback... */

/*

 *    S/PDIF Part

 select right */

 select left */

/*

	wVal = inw(ALI_REG(codec, ALI_SPDIF_CS));

	if (flag & ALI_SPDIF_OUT_NON_PCM)

   		wVal |= 0x0002;

	else	

		wVal &= (~0x0002);

   	outw(wVal, ALI_REG(codec, ALI_SPDIF_CS));

 check if interrupt occurred for channel */

 pcm interrupt */

 synth interrupt */

 midi interrupt */

 unknown interrupt */

 get interrupt status for all channels */

 Still Mode */

 Still Mode */

	/* set ctrl mode

	   CTRL default: 8-bit (unsigned) mono, loop mode enabled

 16-bit data */

 signed data */

 stereo data */

/*

 *  PCM part

 voice management */

 set Delta (rate) value */

 set Loop Back Address */

 set interrupt count size */

 set target ESO for channel */

 set ESO to capture first MIDLP interrupt */

 set ctrl mode */

 cso */

 alpha */

 cso */

 alpha */

 Prepare capture intr channel */

 set target ESO for channel  */

 set interrupt count size  */

 set Loop Back Address  */

 set ESO to capture first MIDLP interrupt  */

 cso */

 alpha */

/*

 *  Capture support device description

/*

 * Modem PCM

 spdif aplayback switch */

 FIXME: "IEC958 Playback Switch" may conflict with one on ac97_codec */

 spdif out to spdif channel */

 spdif in from spdif channel */

 im->regs[ALI_START >> 2] = inl(ALI_REG(chip, ALI_START)); */

 disable all IRQ bits */

 stop all HW channel */

 start HW channel */

 restore IRQ enable bits */

 CONFIG_PM_SLEEP */

 secondary codec - modem */

 proc for register dump */

 enable PCI device */

 check, if we can restrict PCI DMA transfers to 31 bits */

 M1533: southbridge */

 M7101: power management */

 initialise synth voices*/

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   ALSA driver for RME Hammerfall DSP MADI audio interface(s)

 *

 *      Copyright (c) 2003 Winfried Ritsch (IEM)

 *      code based on hdsp.c   Paul Davis

 *                             Marcus Andersson

 *                             Thomas Charbonnel

 *      Modified 2006-06-01 for AES32 support by Remy Bruno

 *                                               <remy.bruno@trinnov.com>

 *

 *      Modified 2009-04-13 for proper metering by Florian Faber

 *                                               <faber@faberman.de>

 *

 *      Modified 2009-04-14 for native float support by Florian Faber

 *                                               <faber@faberman.de>

 *

 *      Modified 2009-04-26 fixed bug in rms metering by Florian Faber

 *                                               <faber@faberman.de>

 *

 *      Modified 2009-04-30 added hw serial number support by Florian Faber

 *

 *      Modified 2011-01-14 added S/PDIF input on RayDATs by Adrian Knoth

 *

 *	Modified 2011-01-25 variable period sizes on RayDAT/AIO by Adrian Knoth

 *

 *      Modified 2019-05-23 fix AIO single speed ADAT capture and playback

 *      by Philippe.Bekaert@uhasselt.be

/* *************    Register Documentation   *******************************************************

 *

 * Work in progress! Documentation is based on the code in this file.

 *

 * --------- HDSPM_controlRegister ---------

 * :7654.3210:7654.3210:7654.3210:7654.3210: bit number per byte

 * :||||.||||:||||.||||:||||.||||:||||.||||:

 * :3322.2222:2222.1111:1111.1100:0000.0000: bit number

 * :1098.7654:3210.9876:5432.1098:7654.3210: 0..31

 * :||||.||||:||||.||||:||||.||||:||||.||||:

 * :8421.8421:8421.8421:8421.8421:8421.8421: hex digit

 * :    .    :    .    :    .    :  x .    :  HDSPM_AudioInterruptEnable \_ setting both bits

 * :    .    :    .    :    .    :    .   x:  HDSPM_Start                /  enables audio IO

 * :    .    :    .    :    .    :   x.    :  HDSPM_ClockModeMaster - 1: Master, 0: Slave

 * :    .    :    .    :    .    :    .210 :  HDSPM_LatencyMask - 3 Bit value for latency

 * :    .    :    .    :    .    :    .    :      0:64, 1:128, 2:256, 3:512,

 * :    .    :    .    :    .    :    .    :      4:1024, 5:2048, 6:4096, 7:8192

 * :x   .    :    .    :    .   x:xx  .    :  HDSPM_FrequencyMask

 * :    .    :    .    :    .    :10  .    :  HDSPM_Frequency1|HDSPM_Frequency0: 1=32K,2=44.1K,3=48K,0=??

 * :    .    :    .    :    .   x:    .    :  <MADI> HDSPM_DoubleSpeed

 * :x   .    :    .    :    .    :    .    :  <MADI> HDSPM_QuadSpeed

 * :    .  3 :    .  10:  2 .    :    .    :  HDSPM_SyncRefMask :

 * :    .    :    .   x:    .    :    .    :  HDSPM_SyncRef0

 * :    .    :    .  x :    .    :    .    :  HDSPM_SyncRef1

 * :    .    :    .    :  x .    :    .    :  <AES32> HDSPM_SyncRef2

 * :    .  x :    .    :    .    :    .    :  <AES32> HDSPM_SyncRef3

 * :    .    :    .  10:    .    :    .    :  <MADI> sync ref: 0:WC, 1:Madi, 2:TCO, 3:SyncIn

 * :    .  3 :    .  10:  2 .    :    .    :  <AES32>  0:WC, 1:AES1 ... 8:AES8, 9: TCO, 10:SyncIn?

 * :    .  x :    .    :    .    :    .    :  <MADIe> HDSPe_FLOAT_FORMAT

 * :    .    :    .    : x  .    :    .    :  <MADI> HDSPM_InputSelect0 : 0=optical,1=coax

 * :    .    :    .    :x   .    :    .    :  <MADI> HDSPM_InputSelect1

 * :    .    :    .x   :    .    :    .    :  <MADI> HDSPM_clr_tms

 * :    .    :    .    :    . x  :    .    :  <MADI> HDSPM_TX_64ch

 * :    .    :    .    :    . x  :    .    :  <AES32> HDSPM_Emphasis

 * :    .    :    .    :    .x   :    .    :  <MADI> HDSPM_AutoInp

 * :    .    :    . x  :    .    :    .    :  <MADI> HDSPM_SMUX

 * :    .    :    .x   :    .    :    .    :  <MADI> HDSPM_clr_tms

 * :    .    :   x.    :    .    :    .    :  <MADI> HDSPM_taxi_reset

 * :    .   x:    .    :    .    :    .    :  <MADI> HDSPM_LineOut

 * :    .   x:    .    :    .    :    .    :  <AES32> ??????????????????

 * :    .    :   x.    :    .    :    .    :  <AES32> HDSPM_WCK48

 * :    .    :    .    :    .x   :    .    :  <AES32> HDSPM_Dolby

 * :    .    : x  .    :    .    :    .    :  HDSPM_Midi0InterruptEnable

 * :    .    :x   .    :    .    :    .    :  HDSPM_Midi1InterruptEnable

 * :    .    :  x .    :    .    :    .    :  HDSPM_Midi2InterruptEnable

 * :    . x  :    .    :    .    :    .    :  <MADI> HDSPM_Midi3InterruptEnable

 * :    . x  :    .    :    .    :    .    :  <AES32> HDSPM_DS_DoubleWire

 * :    .x   :    .    :    .    :    .    :  <AES32> HDSPM_QS_DoubleWire

 * :   x.    :    .    :    .    :    .    :  <AES32> HDSPM_QS_QuadWire

 * :    .    :    .    :    .  x :    .    :  <AES32> HDSPM_Professional

 * : x  .    :    .    :    .    :    .    :  HDSPM_wclk_sel

 * :    .    :    .    :    .    :    .    :

 * :7654.3210:7654.3210:7654.3210:7654.3210: bit number per byte

 * :||||.||||:||||.||||:||||.||||:||||.||||:

 * :3322.2222:2222.1111:1111.1100:0000.0000: bit number

 * :1098.7654:3210.9876:5432.1098:7654.3210: 0..31

 * :||||.||||:||||.||||:||||.||||:||||.||||:

 * :8421.8421:8421.8421:8421.8421:8421.8421:hex digit

 *

 *

 *

 * AIO / RayDAT only

 *

 * ------------ HDSPM_WR_SETTINGS ----------

 * :3322.2222:2222.1111:1111.1100:0000.0000: bit number per byte

 * :1098.7654:3210.9876:5432.1098:7654.3210:

 * :||||.||||:||||.||||:||||.||||:||||.||||: bit number

 * :7654.3210:7654.3210:7654.3210:7654.3210: 0..31

 * :||||.||||:||||.||||:||||.||||:||||.||||:

 * :8421.8421:8421.8421:8421.8421:8421.8421: hex digit

 * :    .    :    .    :    .    :    .   x: HDSPM_c0Master 1: Master, 0: Slave

 * :    .    :    .    :    .    :    .  x : HDSPM_c0_SyncRef0

 * :    .    :    .    :    .    :    . x  : HDSPM_c0_SyncRef1

 * :    .    :    .    :    .    :    .x   : HDSPM_c0_SyncRef2

 * :    .    :    .    :    .    :   x.    : HDSPM_c0_SyncRef3

 * :    .    :    .    :    .    :   3.210 : HDSPM_c0_SyncRefMask:

 * :    .    :    .    :    .    :    .    :  RayDat: 0:WC, 1:AES, 2:SPDIF, 3..6: ADAT1..4,

 * :    .    :    .    :    .    :    .    :          9:TCO, 10:SyncIn

 * :    .    :    .    :    .    :    .    :  AIO: 0:WC, 1:AES, 2: SPDIF, 3: ATAT,

 * :    .    :    .    :    .    :    .    :          9:TCO, 10:SyncIn

 * :    .    :    .    :    .    :    .    :

 * :    .    :    .    :    .    :    .    :

 * :3322.2222:2222.1111:1111.1100:0000.0000: bit number per byte

 * :1098.7654:3210.9876:5432.1098:7654.3210:

 * :||||.||||:||||.||||:||||.||||:||||.||||: bit number

 * :7654.3210:7654.3210:7654.3210:7654.3210: 0..31

 * :||||.||||:||||.||||:||||.||||:||||.||||:

 * :8421.8421:8421.8421:8421.8421:8421.8421: hex digit

 *

 Index 0-MAX */

 ID for this card */

 Enable this card */

/* --- Write registers. ---

 not in specs ???????? */

 for setting arbitrary clock values (DDS feature) */

 just believe in old code */

 for AES32 */

 DMA enable for 64 channels, only Bit 0 is relevant */

 512-767  input  DMA */

 768-1023 output DMA */

/* 16 page addresses for each of the 64 channels DMA buffer in and out

 32768-65535 for 2x64x64 Fader */

 = 2*64*64 * 4 Byte => 32kB */

/* --- Read registers. ---

#define HDSPM_statusRegister2  96 */

/* after RME Windows driver sources, status2 is 4-byte word # 48 = word at

 * offset 192, for AES32 *and* MADI

 AIO, RayDAT */

 status is data bytes in MIDI-FIFO (0-128) */

/* the meters are regular i/o-mapped registers, but offset

   considerably from the rest. the peak registers are reset

   when read; the least-significant 4 bits are full-scale counters;

   the actual peak value is in the most-significant 24 bits.

 --- Control Register bits --------- */

 start engine */

 buffer size = 2^n */

 where n is defined */

 by Latency{2,1,0} */

 1=Master, 0=Autosync */

#define HDSPM_c0Master		0x1    /* Master clock bit in settings

 what do you think ? */

 0=44.1kHz/88.2kHz 1=48kHz/96kHz */

 0=32kHz/64kHz */

 0=normal speed, 1=double speed */

 quad speed bit */

 Professional */ 
#define HDSPM_TX_64ch     (1<<10) /* Output 64channel MODE=1,

 MADI ONLY*/

 Emphasis */ 
#define HDSPM_AutoInp     (1<<11) /* Auto Input (takeover) == Safe Mode,

 MADI ONLY */

 Dolby = "NonAudio" ?? */ 
#define HDSPM_InputSelect0 (1<<14) /* Input select 0= optical, 1=coax

				    * -- MADI ONLY

 should be 0 */

 Frame ??? */ 
#define HDSPM_clr_tms      (1<<19) /* clear track marker, do not use

                                      AES additional bits in

 ??? */ 
 Frame ??? = HDSPM_SMUX */ 
 Analog Out on channel 63/64 on=1, mute=0 */

 AES32 ONLY */

 AES32 ONLY */

 AES32 ONLY */

 additional control register bits for AIO*/

 also RayDAT */

 --- bit helper defines */

 Preferred sync reference */

 choices - used by "pref_sync_ref" */

 Synccheck Status */

 AutoSync References - used by "autosync_ref" control switch */

 Possible sources of MADI input */

 optical   */

 BNC */

 --- control2 register bits --- */

#define HDSPM_VERSION_BIT     (1<<8) not defined any more*/

/* --- Status Register bits --- */ /* MADI ONLY */ /* Bits defined here and

     that do not conflict with specific bits for AES32 seem to be valid also

     for the AES32

 IRQ is high and pending */

 Input 64chan. MODE=1, 56chn MODE=0 */

#define HDSPM_AB_int             (1<<2)	/* InputChannel Opt=0, Coax=1

					 * (like inp0)

 MADI Locked =1, no=0 */

 MADI is in sync */

 Optional TCO locked status for HDSPe MADI*/

 Optional TCO sync status for HDSPe MADI and AES32!*/

 Sync In lock status for HDSPe MADI! */

 Sync In sync status for HDSPe MADI! */

 Bit 6..15 : h/w buffer pointer */

 since 64byte accurate, last 6 bits are not used */

 (input) card in double speed */

 system freq 0=error */

 1=32, 2=44.1 3=48 */

 4=64, 5=88.2 6=96 */

 7=128, 8=176.4 9=192 */

#define HDSPM_BufferID          (1<<26)	/* (Double)Buffer ID toggles with

					 * Interrupt

 Optional TCO locked status for HDSPe AES */

 --- status bit helpers */

 Status2 Register bits */ 
 not really defined but I guess */

 in former cards it was ??? */

 Wordclock is detected and locked */

 Wordclock is in sync with systemclock */

 input freq detected via autosync  */

 001=32, 010==44.1, 011=48, */

 100=64, 101=88.2, 110=96, 111=128 */

 1000=176.4, 1001=192 */

 Sync Reference */

 AutoSync Source */

 000=word, 001=MADI, */

 111=no valid signal */

/*

   For AES32, bits for status, status2 and timecode are different

 status */

/* (status >> HDSPM_AES32_wcFreq_bit) & 0xF gives WC frequency (cf function

 (status >> HDSPM_AES32_syncref_bit) & 0xF gives sync source */

  status2 */

 HDSPM_LockAES_bit is given by HDSPM_LockAES >> (AES# - 1) */

/*

   Timecode

   After windows driver sources, bits 4*i to 4*i+3 give the input frequency on

   AES i+1

 bits 3210

      0001  32kHz

      0010  44.1kHz

      0011  48kHz

      0100  64kHz

      0101  88.2kHz

      0110  96kHz

      0111  128kHz

      1000  176.4kHz

      1001  192kHz

  NB: Timecode register doesn't seem to work on AES32 card revision 230

 Mixer Values */

 = 65536/2 */

 Number of channels for different Speed Modes */

 the size of a substream (1 mono data stream) */

/* the size of the area we need to allocate for DMA transfers. the

   size is the same regardless of the number of channels, and

   also the latency to use.

   for one direction !!!

 speed factor modes */

 names for speed modes */

/* These tables map the ALSA channels 1..N to the channels that we

   need to use in order to find the relevant channel buffer. RME

   refers to this kind of mapping as between "the ADAT channel and

   the DMA channel." We index it using the logical audio channel,

   and the value is the DMA channel (i.e. channel buffer number)

   where the data for that channel can be read/written from/to.

 ADAT 1 */

 ADAT 2 */

 ADAT 3 */

 ADAT 4 */

 AES */

 SPDIF */

 ADAT 1 */

 ADAT 2 */

 ADAT 3 */

 ADAT 4 */

 AES */

 SPDIF */

 ADAT 1 */

 ADAT 2 */

 ADAT 3 */

 ADAT 4 */

 AES */

 SPDIF */

 line in */

 aes in, */

 spdif in */

 ADAT in */

 AEB */

 line out */

 aes out */

 spdif out */

 ADAT out */

 phone out */

 AEB */

 line in */

 aes in */

 spdif in */

 adat in */

 AEB */

 line out */

 aes out */

 spdif out */

 adat out */

 phone out */

 AEB */

 line in */

 aes in */

 spdif in */

 adat in */

 AEB */

 line out */

 aes out */

 spdif out */

 adat out */

 phone out */

 AEB */

 timer in use */

 0: LTC, 1:Video, 2: WC*/

 0=24, 1=25, 2=29.97, 3=29.97d, 4=30, 5=30d */

 0=1:1, 1=44.1->48, 2=48->44.1 */

 0=44.1, 1=48, 2= freq from app */

   0=0, 1=+0.1%, 2=-0.1%, 3=+4%, 4=-4%*/

 0 = off, 1 = on */

 only one playback and/or capture stream */

 for procinfo */

 dont know if relevant (yes if AES32)*/

 set up monitoring outs init flag */

 cached value */

 cached value */

 cached value for AIO / RayDat (sync reference, master/slave) */

 suitably aligned address */

 suitably aligned address */

 process id which uses capture */

 process id which uses capture */

 running status */

 samplerate mystic ... */

 Hardware vars... */

 for debug */

 one card */

 has one pcm */

 and a hwdep for additional ioctl */

 and an pci info */

 Mixer vars */

 fast alsa mixer */

 but input to much, so not used */

 full mixer accessible over mixer ioctl or hwdep-device */

 NULL if no TCO detected */

 prototypes */

/* Write/read to/from HDSPM with Adresses in Bytes

/* for each output channel (chan) I have an Input (in) and Playback (pb) Fader

   mixer is write only on hardware so we have to cache him for read

 enable DMA for specific channels, now available for DSP-MADI */

 check if same process is writing and reading */

 round arbitrary sample rates to commonly known rates */

/* QS and DS rates normally can not be detected

 * automatically by the card. Only exception is MADI

 * in 96k frame mode.

 *

 * So if we read SS values (32 .. 48k), check for

 * user-provided DS/QS bits in the control register

 * and multiply the base frequency accordingly.

 check for external sample rate, returns the sample rate in Hz*/

 Check WC sync and get sample rate */

 Check AES sync and get sample rate */

 Check TCO sync and get sample rate */

 end switch(syncref) */

 no lock */

 if wordclock has synced freq and wordclock is valid */

		/* if rate detected and Syncref is Word than have it,

		 * word has priority to MADI

 maybe a madi input (which is taken if sel sync is madi) */

 endif HDSPM_madiLock */

 check sample rate from TCO or SYNC_IN */

 return latency in samples per period */

	/* Special case for new RME cards with 32 samples period size.

	 * The three latency bits in the control register

	 * (HDSP_LatencyMask) encode latency values of 64 samples as

	 * 0, 128 samples as 1 ... 4096 samples as 6. For old cards, 7

	 * denotes 8192 samples, but on new cards like RayDAT or AIO,

	 * it corresponds to 32 samples.

 Latency function */

 Bytes per sample */

 should I silence all or only opened ones ? doit all for first even is 4MB*/

		/* Special case for new RME cards like RayDAT/AIO which

		 * support period sizes of 32 samples. Since latency is

		 * encoded in the three bits of HDSP_LatencyMask, we can only

		 * have values from 0 .. 7. While 0 still means 64 samples and

		 * 6 represents 4096 samples on all cards, 7 represents 8192

		 * on older cards and 32 samples on new cards.

		 *

		 * In other words, period size in samples is calculated by

		 * 2^(n+6) with n ranging from 0 .. 7.

 125 MHz */

 105 MHz */

 100 MHz */

 n should be less than 2^32 for being written to FREQ register */

 dummy set rate lets see what happens */

	/* ASSUMPTION: hdspm->lock is either set, or there is no need for

	   it (e.g. during module initialization).

 SLAVE --- */

			/* request from ctl or card initialization

			   just make a warning an remember setting

 hw_param request while in AutoSync mode */

	/* Changing between Singe, Double and Quad speed is not

	   allowed if any substreams are open. This is because such a change

	   causes a shift in the location of the DMA buffers and a reduction

	   in the number of available buffers.



	   Note that a similar but essentially insoluble problem exists for

	   externally-driven rate changes. All we can do is to flag rate

	   changes in the read/write routines.

	/* For AES32, need to set DDS value in FREQ register

 mainly for init to 0 on load */

/*----------------------------------------------------------------------------

   MIDI

 the hardware already does the relevant bit-mask with 0xff */

 the hardware already does the relevant bit-mask with 0xff */

 Output is not interrupt driven */

	unsigned char buf[128]; /* this buffer is designed to match the MIDI

				 * input FIFO size

 flush the MIDI input FIFO */

	/* this does not bump hmidi->istimer, because the

	   kernel automatically removed the timer when it

	   expired, and we are now adding it back, thus

	   leaving istimer wherever it was set before.

 MIDI-over-MADI on HDSPe MADIface */

 MIDI-over-MADI on HDSPe MADI */

 TCO MTC, read only */

 TCO MTC on HDSPe MADI */

 TCO MTC, read only */

/*-----------------------------------------------------------------------------

  Status Interface

 get the system sample rate which is set */

/*

 * Calculate the real sample rate from the

 * current DDS value.

 Unreasonable high sample rate as seen on PCI MADI cards. */

 master mode, return internal sample rate */

 slave mode, return external sample rate */

/*

 * Returns the WordClock sample rate class for the given card.

/*

 * Returns the TCO sample rate class for the given card.

/*

 * Returns the SYNC_IN sample rate class for the given card.

/*

 * Returns the AES sample rate class for the given card.

/*

 * Returns the sample rate class for input source <idx> for

 * 'new style' cards like the AIO and RayDAT.

/* Helper function to query the external sample rate and return the

 * corresponding enum to be returned to userspace.

 WC */

 TCO */

 SYNC_IN */

 WC */

 TCO */

 SYNC_IN */

 External Rate */

 AES1 to AES8 */

/*

 * Returns the system clock mode for the given card.

 * @returns 0 - master, 1 - slave

/*

 * Sets the system clock mode.

 * @param mode 0 - master, 1 - slave

/*

 * Returns the current preferred sync reference setting.

 * The semantics of the return value are depending on the

 * card, please see the comments for clarification.

 WC */

 AES 1 */

 AES 2 */

 AES 3 */

 AES 4 */

 AES 5 */

 AES 6 */

 AES 7 */

 AES 8 */

 TCO */

 WC */

 MADI */

 TCO */

 SYNC_IN */

 WC */

 MADI */

 SYNC_IN */

 WC */

 ADAT 1 */

 ADAT 2 */

 ADAT 3 */

 ADAT 4 */

 AES */

 SPDIF */

 TCO */

 SYNC_IN */

 WC */

 ADAT 1 */

 ADAT 2 */

 ADAT 3 */

 ADAT 4 */

 AES */

 SPDIF */

 SYNC_IN */

 WC */

 ADAT */

 AES */

 SPDIF */

 TCO */

 SYNC_IN */

 WC */

 ADAT */

 AES */

 SPDIF */

 SYNC_IN */

/*

 * Set the preferred sync reference to <pref>. The semantics

 * of <pref> are depending on the card type, see the comments

 * for clarification.

 WC  */

 AES 1 */

 AES 2 */

 AES 3 */

 AES 4 */

 AES 5 */

 AES 6 */

 AES 7 */

 AES 8 */

 TCO */

 WC */

 MADI */

 TCO */

 SYNC_IN */

 WC */

 MADI */

 SYNC_IN */

 WC */

 ADAT 1 */

 ADAT 2 */

 ADAT 3 */

 ADAT 4 */

 AES */

 SPDIF */

 TCO */

 SYNC_IN */

 WC */

 ADAT 1 */

 ADAT 2 */

 ADAT 3 */

 ADAT 4 */

 AES */

 SPDIF */

 SYNC_IN */

 WC */

 ADAT */

 AES */

 SPDIF */

 TCO */

 SYNC_IN */

 WC */

 ADAT */

 AES */

 SPDIF */

 SYNC_IN */

 This looks at the autosync selected sync reference */

 syncref >= HDSPM_AES32_AUTOSYNC_FROM_WORD is always true */

 ntsc */

 pal */

 no video */

 24 fps */

 25 fps */

 29.97 fps */

 30 fps */

/* The simple mixer control(s) provide gain control for the

   basic 1:1 mappings of playback streams to output

   streams.

 Sync */

 Lock */

 No signal */

 N/A */

 WC */

 TCO */

 SYNC IN */

 WC */

 TCO */

 SYNC IN */

 WC */

 MADI */

 TCO */

 SYNC_IN */

 MADI */

 WC */

 TCO */

 SYNC IN */:

 AES1 to AES8 */

 Check TCO for lock state of its current input */

 Check TCO for valid time code on LTC input. */

/*

 * TCO controls

 TODO freq from app could be supported here, see tco->samplerate */

		/*

		   HDSPM_INPUT_SELECT("Input Select", 0),

		   HDSPM_SPDIF_OPTICAL("SPDIF Out Optical", 0),

		   HDSPM_PROFESSIONAL("SPDIF Out Professional", 0);

		   HDSPM_SPDIF_IN("SPDIF In", 0);

		   HDSPM_BREAKOUT_CABLE("Breakout Cable", 0);

		   HDSPM_INPUT_LEVEL("Input Level", 0);

		   HDSPM_OUTPUT_LEVEL("Output Level", 0);

		   HDSPM_PHONES("Phones", 0);

 Control elements for the optional TCO module */

 create simple 1:1 playback mixer controls */

 add tco control elements */

/*------------------------------------------------------------

   /proc interface

 no TCO possible */

 rate = freq_const/period; */

 call readout function for TCO specific status */

 call readout function for TCO specific status */

 s1 */

 freq */

 s2 */

 1024*64 */; i += j) {

 read = snd_hdspm_proc_read_madiface; */

 debug file to read all hdspm registers */

/*------------------------------------------------------------

   hdspm intitialize

	/* ASSUMPTION: hdspm->lock is either held, or there is no need to

	   hold it (e.g. during module initialization).

 set defaults:       */

		/* Magic values are: LAT_0, LAT_2, Master, freq1, tx64ch, inp_0,

 Master Clock Mode on */

 latency max=8192samples */

 AES1 is syncclock */

 Analog output in */

 Professional mode */

 No control2 register for AES32 */

 silence everything */

 set a default rate so that the channel map is set up. */

/*------------------------------------------------------------

   interrupt

 cycles_t now; */

 now = get_cycles(); */

	/*

	 *   LAT_2..LAT_0 period  counter (win)  counter (mac)

	 *          6       4096   ~256053425     ~514672358

	 *          5       2048   ~128024983     ~257373821

	 *          4       1024    ~64023706     ~128718089

	 *          3        512    ~32005945      ~64385999

	 *          2        256    ~16003039      ~32260176

	 *          1        128     ~7998738      ~16194507

	 *          0         64     ~3998231       ~8191558

	/*

	  dev_info(hdspm->card->dev, "snd_hdspm_interrupt %llu @ %llx\n",

	   now-hdspm->last_interrupt, status & 0xFFC0);

	   hdspm->last_interrupt = now;

				/* we disable interrupts for this input until

				 * processing is done

/*------------------------------------------------------------

   pcm interface

		/* The other stream is open, and not by the same

		   task as this one. Make sure that the parameters

		   that matter are the same.

 We're fine. */

 how to make sure that the rate matches an externally-set one ?   */

	/* Memory allocation, takashi's method, dont know if we should

	 * spinlock

 malloc all buffer even if not enabled to get sure */

	/* Update for MADI rev 204: we need to allocate for all channels,

 just make sure */

	/*

	   dev_dbg(hdspm->card->dev,

	   "Allocated sample buffer for %s at 0x%08X\n",

	   substream->stream == SNDRV_PCM_STREAM_PLAYBACK ?

	   "playback" : "capture",

	   snd_pcm_sgbuf_get_addr(substream, 0));

	/*

	   dev_dbg(hdspm->card->dev,

	   "set_hwparams: %s %d Hz, %d channels, bs = %d\n",

	   substream->stream == SNDRV_PCM_STREAM_PLAYBACK ?

	   "playback" : "capture",

	   params_rate(params), params_channels(params),

	   params_buffer_size(params));

	/*  For AES cards, the float format bit is the same as the

	 *  preferred sync reference. Since we don't want to break

	 *  sync settings, we have to skip the remaining part of this

	 *  function.

 Switch to native float format if requested */

 Just disable all channels. The saving when disabling a */

 smaller set is not worth the trouble. */

 RayDAT & AIO have a fixed buffer of 16384 samples per channel */

 we have nothing to initialize but the call is required */

			/* dev_err(hdspm->card->dev, "copy_to_user(.., .., %lu): %lu

			 [Levels]\n", sizeof(struct hdspm_peak_rms), s);

			/*

 TODO: Mac driver sets it when f_s>48kHz */

/*------------------------------------------------------------

   memory interface

 Inform the card what DMA addresses to use for the indicated channel. */

 Each channel got 16 4K pages allocated for DMA transfers. */

 ------------- ALSA Devices ---------------------------- */

 TCO detection */

 texts */

		/* id contains either a user-provided value or the default

		 * NULL. If it's the default, we're safe to

		 * fill card->id with the serial number.

		 *

		 * If the serial number is 0xFFFFFF, then we're dealing with

		 * an old PCI revision that comes without a sane number. In

		 * this case, we don't set card->id to avoid collisions

		 * when running with multiple cards.

 stop th audio, and cancel all interrupts */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   ALSA driver for RME Digi9652 audio interfaces 

 *

 *	Copyright (c) 1999 IEM - Winfried Ritsch

 *      Copyright (c) 1999-2001  Paul Davis

 Index 0-MAX */

 ID for this card */

 Enable this card */

 Enable precise pointer */

/* The Hammerfall has two sets of 24 ADAT + 2 S/PDIF channels, one for

   capture, one for playback. Both the ADAT and S/PDIF channels appear

   to the host CPU in the same block of memory. There is no functional

   difference between them in terms of access.

   

   The Hammerfall Light is identical to the Hammerfall, except that it

   has 2 sets 18 channels (16 ADAT + 2 S/PDIF) for capture and playback.

 Preferred sync source choices - used by "sync_pref" control switch */

 Possible sources of S/PDIF input */

 optical (ADAT1) */

 coaxial (RCA) */

 internal (CDROM) */

 ------------- Status-Register bits --------------------- */

 IRQ is High if not reset by irq_clear */

 ADAT 3-PLL: 1=locked, 0=unlocked */

 ADAT 2-PLL: 1=locked, 0=unlocked */

 ADAT 1-PLL: 1=locked, 0=unlocked */

 sample rate is 0=44.1/88.2,1=48/96 Khz */

 if Word-Clock is used and valid then 1 */

 bits 6-15 encode h/w buffer pointer position */

 if ADAT-IN 3 in sync to system clock */

 if ADAT-IN 2 in sync to system clock */

 if ADAT-IN 1 in sync to system clock */

 1=Double Speed Mode, 0=Normal Speed */

 1=time-code copy in progress (960ms) */

 time-code out bit */

 000=64kHz, 100=88.2kHz, 011=96kHz  */

 111=32kHz, 110=44.1kHz, 101=48kHz, */

 external Crystal Chip if ERF=1 */

 Error-Flag of SDPIF Receiver (1=No Lock) */

 toggles by each interrupt on rec/play */

 1 = a signal is detected on time-code input */

 byte available from Rev 1.5+ S/PDIF interface */

 Bit 6..15 : h/w buffer pointer */

/* Bits 31,30,29 are bits 5,4,3 of h/w pointer position on later

   Rev G EEPROMS and Rev 1.5 cards or later.

/* amount of io space we remap for register access. i'm not sure we

   even need this much, but 1K is nice round number :)

 holds ptr to 26x64kBit host RAM */

 holds ptr to 26x64kBit host RAM */

 useful if used with alesis adat */

 132...228 Thru for 26 channels */

 Read-only registers */

/* Writing to any of the register locations writes to the status

   register. We'll use the first location as our point of access.

 --------- Control-Register Bits ---------------- */

 start record/play */

 bits 1-3 encode buffersize/latency */

 Clock Mode Master=1,Slave/Auto=0 */

 Interrupt Enable */

 samplerate 0=44.1/88.2, 1=48/96 kHz */

 if 0, 32kHz, else always 1 */

 Doule Speed 0=44.1/48, 1=88.2/96 Khz */

 S/PDIF out: 0=consumer, 1=professional */

  Emphasis 0=None, 1=ON */

  Non-audio bit 1=set, 0=unset */

 Use 1st optical OUT as SPDIF: 1=yes,0=no */

 use Wordclock as sync (overwrites master) */

 SPDIF-IN: 00=optical (ADAT1),     */

 01=koaxial (Cinch), 10=Internal CDROM */

 Rev 1.5+: h/w S/PDIF receiver */

 Rev 1.5+: if set, internal CD connector carries ADAT */

 buffersize = 512Bytes * 2^n, where n is made from Bit2 ... Bit0 */

 the size of a substream (1 mono data stream) */

/* the size of the area we need to allocate for DMA transfers. the

   size is the same regardless of the number of channels - the 

   9636 still uses the same memory area.



   Note that we allocate 1 more channel than is apparently needed

   because the h/w seems to write 1 byte beyond the end of the last

   page. Sigh.

 cached value */

 thru 1=on, 0=off channel 1=Bit1... channel 26= Bit26 */

 hammerfall or hammerfall light names */

 &-with status register to get real hw_offset */

 previous hw offset */

	size_t max_jitter;		/* maximum jitter in frames for 

 guess what this is */

 different for hammerfall/hammerfall-light */

	/* DMA buffers; those are copied instances from the original snd_dma_buf

	 * objects (which are managed via devres) for the address alignments

 suitably aligned address */

 suitably aligned address */

 non-zero if doing pass-thru */

 h/w rev * 10 (i.e. 1.5 has hw_rev = 15) */

 so that we can catch externally ... */

 ... induced rate changes            */

/* These tables map the ALSA channels 1..N to the channels that we

   need to use in order to find the relevant channel buffer. RME

   refer to this kind of mapping as between "the ADAT channel and

   the DMA channel." We index it using the logical audio channel,

   and the value is the DMA channel (i.e. channel buffer number)

   where the data for that channel can be read/written from/to.

 channels 16 and 17 are S/PDIF */

 channels 18-25 don't exist */

 ADAT channels are remapped */

 channels 12 and 13 are S/PDIF */

 others don't exist */

 ADAT channels are remapped */

 channels 8 and 9 are S/PDIF */

 others don't exist */

 RME Digi9652 */

	/* The hardware may give a backward movement for up to 80 frames

           Martin Kirst <martin.kirst@freenet.de> knows the details.

	/* reset the FIFO pointer to zero. We do this by writing to 8

	   registers, each of which is a 32bit wide register, and set

	   them all to zero. Note that s->iobase is a pointer to

	   int32, not pointer to char.  

	/* Changing from a "single speed" to a "double speed" rate is

	   not allowed if any substreams are open. This is because

	   such a change causes a shift in the location of 

	   the DMA buffers and a reduction in the number of available

	   buffers. 



	   Note that a similar but essentially insoluble problem

	   exists for externally-driven rate changes. All we can do

	   is to flag rate changes in the read/write routines.

 set thru for all channels */

		/* we don't want interrupts, so do a

		   custom version of rme9652_start().

 XXX what unsets this ? */

 error condition */

/*-----------------------------------------------------------------------------

  Control Interface

 XXX do we actually need to stop the card when we do this ? */

 Not reachable */

 Read-only switches */

 FIXME: this routine needs a port to the new control API --jk */

 timecode request */

 XXX bug alert: loop-based timing !!!! */

 ALSA_HAS_STANDARD_WAY_OF_RETURNING_TIMECODE */

 IEC958 (S/PDIF) Stream */

/*------------------------------------------------------------

   /proc interface 

 Sync Check */

 thru modes */

 copy to the own data for alignment */

 Align to bus-space 64K boundary */

 Tell the card where it is */

	/* ASSUMPTION: rme9652->lock is either held, or

	   there is no need to hold it (e.g. during module

	   initialization).

	/* set defaults:



	   SPDIF Input via Coax 

	   autosync clock mode

	   maximum latency (7 = 8192 samples, 64Kbyte buffer,

	   which implies 2 4096 sample, 32Kbyte periods).

	   

	   if rev 1.5, initialize the S/PDIF receiver.



 default: thru off for all channels */

 set a default rate so that the channel map is set up */

		/* The other stream is open, and not by the same

		   task as this one. Make sure that the parameters

		   that matter are the same.

 We're fine. */

	/* how to make sure that the rate matches an externally-set one ?

 who knows? */

	/* Determine the h/w rev level of the card. This seems like

	   a particularly kludgy way to encode it, but its what RME

	   chose to do, so we follow them ...

	/* Differentiate between the standard Hammerfall, and the

	   "Light", which does not have the expansion board. This

	   method comes from information received from Mathhias

	   Clausen at RME. Display the EEPROM and h/w revID where

	   relevant.  

 original eprom */

 W36_G EPROM */

 W52_G EPROM */

 original eprom */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   ALSA driver for RME Hammerfall DSP audio interface(s)

 *

 *      Copyright (c) 2002  Paul Davis

 *                          Marcus Andersson

 *                          Thomas Charbonnel

 Index 0-MAX */

 ID for this card */

 Enable this card */

/* This does not include possible Analog Extension Boards

   AEBs are detected at card initialization

/* Write registers. These are defined as byte-offsets from the iobase value.

/* Read registers. These are defined as byte-offsets from the iobase value

/* the meters are regular i/o-mapped registers, but offset

   considerably from the rest. the peak registers are reset

   when read; the least-significant 4 bits are full-scale counters;

   the actual peak value is in the most-significant 24 bits.

 26 * 32 bit values */

 26 * 32 bit values */

 (26+2) * 32 bit values */

 26 * 64 bit values */

 26 * 64 bit values */

/* This is for H9652 cards

   Peak values are read downward from the base

   Rms values are read upward

   There are rms values for the outputs too

   26*3 values are read in ss mode

   14*3 in ds mode, with no gap between values

 c.f. the hdsp_9632_meters_t struct */

 control2 register bits */

 dummy, purpose of 0x100 unknown */

 Control Register bits */

 start engine */

 buffer size = 2^n where n is defined by Latency{2,1,0} */

 [ see above ] */

 [ see above ] */

 1=Master, 0=Slave/Autosync */

 what do you think ? */

 0=44.1kHz/88.2kHz/176.4kHz 1=48kHz/96kHz/192kHz */

 0=32kHz/64kHz/128kHz */

 0=normal speed, 1=double speed */

 0=consumer, 1=professional */

 0=none, 1=on */

 0=off, 1=on */

 1=use 1st ADAT connector for SPDIF, 0=do not */

 For H9632 cards */

 For H9632 cards */

 From here : H9632 specific */

 RPM uses some of the registers for special purposes */

 Dolby */

 .. */

 inp_0 */

 Dolby+PRO */

 PRO */

 SyncRef1 */

 .. */

 SyncRef2 */

 SyncRef1+SyncRef0 */

 SyncRef0 */

 Sample Clock Sources */

 Preferred sync reference choices - used by "pref_sync_ref" control switch */

 SyncCheck status */

 AutoSync references - used by "autosync_ref" control switch */

 Possible sources of S/PDIF input */

 optical  (ADAT1) */

 coaxial (RCA) */

 internal (CDROM) */

 xlr for H9632 (AES)*/

 For H9632 cards */

/* RME says n = 104857600000000, but in the windows MADI driver, I see:

	return 104857600000000 / rate; // 100 MHz

	return 110100480000000 / rate; // 105 MHz

  =  2^20 * 10^8 */

 Status Register bits */

 this is for Digiface and H9652 */

 this is for H9632 only */

 Bit 6..15 : h/w buffer pointer */

 H9632 specific Analog Extension Boards */

 0 = present, 1 = absent */

 This is for H9632 cards */

 Status2 Register bits */

 FIXME : more values for 9632 cards ? */

 Card state flags */

 FIFO wait times, defined in terms of 1/10ths of msecs */

 the size of a substream (1 mono data stream) */

/* the size of the area we need to allocate for DMA transfers. the

   size is the same regardless of the number of channels - the

   Multiface still uses the same memory area.



   Note that we allocate 1 more channel than is apparently needed

   because the h/w seems to write 1 byte beyond the end of the last

   page. Sigh.

 timer in use */

 cached value */

 cached value */

 digiface/multiface/rpm */

 ditto, but for code use */

 stores state bits */

 guess what this is */

 quad speed mode for H9632 */

 different for multiface/digiface */

 output loopback channel states*/

	/* DMA buffers; those are copied instances from the original snd_dma_buf

	 * objects (which are managed via devres) for the address alignments

 suitably aligned address */

 suitably aligned address */

 last value written to freq register */

/* These tables map the ALSA channels 1..N to the channels that we

   need to use in order to find the relevant channel buffer. RME

   refer to this kind of mapping as between "the ADAT channel and

   the DMA channel." We index it using the logical audio channel,

   and the value is the DMA channel (i.e. channel buffer number)

   where the data for that channel can be read/written from/to.

 Multiface */

 Analog */

 ADAT 2 */

 SPDIF */

 ADAT channels are remapped */

 channels 12 and 13 are S/PDIF */

 others don't exist */

 ADAT channels */

 SPDIF */

 Analog */

 AO4S-192 and AI4S-192 extension boards */

 others don't exist */

 ADAT */

 SPDIF */

 Analog */

 AO4S-192 and AI4S-192 extension boards */

 others don't exist */

 ADAT is disabled in this mode */

 SPDIF */

 Analog */

 AO4S-192 and AI4S-192 extension boards */

 others don't exist */

 RME Hammerfall-DSP */

 prototypes */

 firmware was already loaded, get iobox type */

 try to load firmware */

	/* the fifoStatus registers reports on how many words

	   are available in the command FIFO.

		/* not very friendly, but we only do this during a firmware

		   load and changing the mixer, so we just put up with it.

		/* from martin bjornsen:



		   "You can only write dwords to the

		   mixer memory which contain two

		   mixer values in the low and high

		   word. So if you want to change

		   value 0 you have to read value 1

		   from the cache and write both to

		   the first dword in the mixer

		   memory."

		/* `addr' addresses a 16-bit wide address, but

		   the address space accessed via hdsp_write

		   uses byte offsets. put another way, addr

		   varies from 0 to 1351, but to access the

		   corresponding memory location, we need

		   to access 0 to 2703 ...

 For the 9632, the mask is different */

	/* For the 9632 card, there seems to be no bit for indicating external

	 * sample rate greater than 96kHz. The card reports the corresponding

	 * single speed. So the best means seems to get spdif rate when

		/* HDSP_resetPointer = HDSP_freqReg, which is strange and

		 * requires (?) to write again DDS value after a reset pointer

 n should be less than 2^32 for being written to FREQ register */

	/* HDSP_freqReg and HDSP_resetPointer are the same, so keep the DDS

	/* ASSUMPTION: hdsp->lock is either held, or

	   there is no need for it (e.g. during module

	   initialization).

 request from ctl or card initialization */

 hw_param request while in AutoSync mode */

	/* Changing from a "single speed" to a "double speed" rate is

	   not allowed if any substreams are open. This is because

	   such a change causes a shift in the location of

	   the DMA buffers and a reduction in the number of available

	   buffers.



	   Note that a similar but essentially insoluble problem

	   exists for externally-driven rate changes. All we can do

 For HDSP9632 rev 152, need to set DDS value in FREQ register */

 should never happen */

/*----------------------------------------------------------------------------

   MIDI

 the hardware already does the relevant bit-mask with 0xff */

 the hardware already does the relevant bit-mask with 0xff */

 Output is not interrupt driven */

 this buffer is designed to match the MIDI input FIFO size */

 flush the MIDI input FIFO */

	/* this does not bump hmidi->istimer, because the

	   kernel automatically removed the timer when it

	   expired, and we are now adding it back, thus

	   leaving istimer wherever it was set before.

/*-----------------------------------------------------------------------------

  Control Interface

	/* Notice that this looks at the requested sync source,

	   not the one actually in use.

 clear SyncRef bits */

 This looks at the autosync selected sync reference */

	/*

	 * dds_value = n / rate

	 * rate = n / dds_value

 'Sample Clock Source' complies with the alsa control naming scheme */

 'External Rate' complies with the alsa control naming scheme */

 RPM Bypass switch */

 RPM Disconnect switch */

 RPM Bypass, Disconnect and Input switches */

 IEC958 (S/PDIF) Stream */

 ADAT SyncCheck status */

 DA, AD and Phone gain and XLR breakout cable controls for H9632 cards */

 Output loopback controls for H9632 cards */

 AEB control for H96xx card */

/*------------------------------------------------------------

   /proc interface

 Sync Check */

 relax */

 Informations about H9632 specific controls */

 copy to the own data for alignment */

 Align to bus-space 64K boundary */

 Tell the card where it is */

	/* ASSUMPTION: hdsp->lock is either held, or

	   there is no need to hold it (e.g. during module

	   initialization).

	/* set defaults:



	   SPDIF Input via Coax

	   Master clock mode

	   maximum latency (7 => 2^7 = 8192 samples, 64Kbyte buffer,

	                    which implies 2 4096 sample, 32Kbyte periods).

           Enable line out.

 silence everything */

 H9632 specific defaults */

	/* set a default rate so that the channel map is set up.

 we disable interrupts for this input until processing is done */

 we disable interrupts for this input until processing is done */

		/* The other stream is open, and not by the same

		   task as this one. Make sure that the parameters

		   that matter are the same.

 We're fine. */

	/* how to make sure that the rate matches an externally-set one ?

 no auto-loading in trigger */

 helper functions for copying meter values */

 SNDRV_HDSP_IOCTL_GET_VERSION must have been called */

 HDSP_AEBx bits are low when AEB are connected */

		/* Disable loopback of output channels, as the set function

		 * only sets on a change we fake all bits (channels) as enabled.

 should never get here */

 load firmware via hotplug fw loader */

 caution: max length of firmware filename is 30! */

	/* From Martin Bjoernsen :

	    "It is important that the card's latency timer register in

	    the PCI configuration space is set to a value much larger

	    than 0 by the computer's BIOS or the driver.

	    The windows driver always sets this 8 bit register [...]

	    to its maximum 255 to avoid problems with some computers."

		/* we wait a maximum of 10 seconds to let freshly

				/* we don't fail as this can happen

				   if userspace is not ready for

				   firmware upload

 init is complete, we return */

 we defer initialization */

 stop the audio, and cancel all interrupts */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Support for Digigram Lola PCI-e boards

 *

 *  Copyright (c) 2011 Takashi Iwai <tiwai@suse.de>

 direct codec access for debugging */

/*

 * dump some registers

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Support for Digigram Lola PCI-e boards

 *

 *  Copyright (c) 2011 Takashi Iwai <tiwai@suse.de>

 Standard options */

 Lola-specific options */

/* for instance use always max granularity which is compatible

 * with all sample rates

 below a sample_rate of 16kHz the analogue audio quality is NOT excellent */

/*

/*

 * pseudo-codec read/write via CORB/RIRB

 retrieve RIRB entry - called from interrupt handler */

 an RIRB entry is 8-bytes */

 aynchronous write of a codec verb with data */

 write a codec verb with data and read the returned status */

 flush all pending codec writes */

/*

 * interrupt handler

 clear Input Interrupts */

 error */

 notify */

 clear */

 clear Output Interrupts */

 error */

 notify */

 ring status is byte access */

 clear global fifo error interrupt */

/*

 * controller

 to be sure */

 enalbe all I/O streams */

 enable global irqs */

 disable ringbuffer DMAs */

 CORB set up */

 set the corb size to 256 entries */

 set the corb write pointer to 0 */

 reset the corb hw read pointer */

 enable corb dma */

 clear flags if set */

 RIRB set up */

 set the rirb size to 256 entries */

 reset the rirb hw write pointer */

 set N=1, get RIRB response interrupt for new entry */

 enable rirb dma and response irq */

 clear flags if set */

 disable ringbuffer DMAs */

 update the granularity */

 update the sample clock */

 enable unsolicited events of the clock widget */

 update the analog gains */

 input, update */

 update SRC configuration if applicable */

 update the analog outputs */

 output, update */

 enable unsolicited events of the clock widget */

	/* if last ResetController was not a ColdReset, we don't know

	 * the state of the card; initialize here again

 set the granularity if it is not the default */

 Test LOLA_BAR1_DEVER */

 PCI IDs */

 pci_driver definition */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Support for Digigram Lola PCI-e boards

 *

 *  Copyright (c) 2011 Takashi Iwai <tiwai@suse.de>

 test TYPE and bits 0..11 */

 Type = 4, Digital = 1 */

 Dig=0, InAmp/ovrd */

 Dig=0, OutAmp/ovrd */

	/* analog parameters only following, so continue in case of Digital pin

 zero as mute state */

 10 bits */

 test SubType and Type */

 reserve memory to copy mixer data for sleep mode transitions */

 mixer matrix sources are physical input data and play streams */

 mixer matrix destinations are record streams and physical output */

	/* mixer matrix may have unused areas between PhysIn and

	 * Play or Record and PhysOut zones

	/* example : MixerMatrix of LoLa881 (LoLa16161 uses unused zones)

	 * +-+  0-------8------16-------8------16

	 * | |  |       |       |       |       |

	 * |s|  | INPUT |       | INPUT |       |

	 * | |->|  ->   |unused |  ->   |unused |

	 * |r|  |CAPTURE|       | OUTPUT|       |

	 * | |  |  MIX  |       |  MIX  |       |

	 * |c|  8--------------------------------

	 * | |  |       |       |       |       |

	 * | |  |       |       |       |       |

	 * |g|  |unused |unused |unused |unused |

	 * | |  |       |       |       |       |

	 * |a|  |       |       |       |       |

	 * | |  16-------------------------------

	 * |i|  |       |       |       |       |

	 * | |  | PLAYBK|       | PLAYBK|       |

	 * |n|->|  ->   |unused |  ->   |unused |

	 * | |  |CAPTURE|       | OUTPUT|       |

	 * | |  |  MIX  |       |  MIX  |       |

	 * |a|  8--------------------------------

	 * |r|  |       |       |       |       |

	 * |r|  |       |       |       |       |

	 * |a|  |unused |unused |unused |unused |

	 * |y|  |       |       |       |       |

	 * | |  |       |       |       |       |

	 * +++  16--|---------------|------------

	 *      +---V---------------V-----------+

	 *      |  dest_mix_gain_enable array   |

	 *      +-------------------------------+

	/* example : MixerMatrix of LoLa280

	 * +-+  0-------8-2

	 * | |  |       | |

	 * |s|  | INPUT | |     INPUT

	 * |r|->|  ->   | |      ->

	 * |c|  |CAPTURE| | <-  OUTPUT

	 * | |  |  MIX  | |      MIX

	 * |g|  8----------

	 * |a|  |       | |

	 * |i|  | PLAYBK| |     PLAYBACK

	 * |n|->|  ->   | |      ->

	 * | |  |CAPTURE| | <-  OUTPUT

	 * |a|  |  MIX  | |      MIX

	 * |r|  8---|----|-

	 * |r|  +---V----V-------------------+

	 * |a|  | dest_mix_gain_enable array |

	 * |y|  +----------------------------+

 test if values unchanged */

 inform micro-controller about the new source gain */

 not used */

 update for all srcs at once */

 update manually */

 not used */

 not used */

 update for all dests at once */

 not used */

/*

 set volume and do not save the value */

 mute analog output */

 store contents of mixer array */

 output mute */

lola_reset_setups(chip);*/

 restore contents of mixer array */

		/* inform micro-controller about all restored values

		 * and ignore return values

/*

 SRC can be activated and the dwInputSRCMask is valid? */

 handle all even Inputs - SRC is a stereo setting !!! */

 handle the stereo case */

 if one IO needs SRC, both stereo IO will get SRC */

 nothing to change for this IO */

/*

 all sample rate converters on */

 clear all mixer matrix settings */

 inform firmware about all updated matrix columns - capture part */

 inform firmware about all updated matrix columns - output part */

 set all digital input source (master) gains to 0dB */

 0dB */

 set all digital playback source (master) gains to 0dB */

 0dB */

 set gain value 0dB diagonally in matrix - part INPUT -> CAPTURE */

	/* set gain value 0dB diagonally in matrix , part PLAYBACK -> OUTPUT

	 * (LoLa280 : playback channel 0,2,4,6 linked to output channel 0)

	 * (LoLa280 : playback channel 1,3,5,7 linked to output channel 1)

/*

 * analog mixer control element

 no analog volumes on digital only adapters */

/*

 * Hardware sample rate converter on digital input

/*

 * Lola16161 or Lola881 can have Hardware sample rate converters

 * on its digital input pins

/*

 * src gain mixer

 raw value: 0 = -84dB, 336 = 0dB, 408=18dB, incremented 1 for mute */

 not used */

/*

 * destination gain (matrix-like) mixer

 not used */

/*

 FIXME: buggy mixer matrix handling */

 FIXME */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Support for Digigram Lola PCI-e boards

 *

 *  Copyright (c) 2011 Takashi Iwai <tiwai@suse.de>

 base frequency */

 error */

 multiplier / devisor */

 error */

 ajustement */

 error */

/*

 * Granualrity

 change Gran only if there are no streams allocated ! */

 audio function group */

 this can be a very slow function !!! */

/*

 * Clock widget handling

 test SubType and Type */

 video clock has a format (0:NTSC, 1:PAL)*/

 keep the index used with the board */

 enable unsolicited events of the clock widget */

	/* the current EXTERNAL clock information gets updated by interrupt

	 * with an unsolicited response

 only for current = external clocks */

 current clock is allowed */

 internal clocks allowed */

 update new settings */

 search for new dwClockIndex */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Support for Digigram Lola PCI-e boards

 *

 *  Copyright (c) 2011 Takashi Iwai <tiwai@suse.de>

 clear any pending interrupt status */

/* sync for FIFO ready/empty for all linked streams;

 * clear paused flag when FIFO gets ready again

 finish pause - prepare for a new resume */

 sample rate is locked */

 period size = multiple of chip->granularity (8, 16 or 32 frames)*/

 release sample rate */

/*

 * set up a BDL entry

 program the address field of the BDL entry */

 program the size field of the BDL entry */

		/* program the IOC to enable interrupt

		 * only when the whole fragment is processed

/*

 * set up BDL entries

 program the initial BDL entries */

	/* set format info for all channels

	 * (with only one command for the first channel)

 update stream - channel config */

/*

 * set up the SD for streaming

 set up BDL */

 program the stream LVI (last valid index) of the BDL */

 sample rate gets locked */

	/*

	 * sample correct synchronization is only needed starting several

	 * streams. On stop or if only one stream do as quick as possible

 buffer pre-allocation */

/*

 test TYPE and bits 0..11 (no test bit9 : Digital = 0/1) */

		/* test TYPE and bits 0..11 (no test bit9 : Digital = 0/1)

		 * (bug : ignore bit8: Conn list = 0/1)

 test bit9:DIGITAL and bit12:SRC_PRESENT*/

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************



    AudioScience HPI driver

    Copyright (C) 1997-2014  AudioScience Inc. <support@audioscience.com>





 Hardware Programming Interface (HPI) Utility functions.



 (C) Copyright AudioScience Inc. 2007

 The actual message size for each object type */

 The actual response size for each object type */

 Flag to enable alternate message type for SSX2 bypass. */

/** \internal

  * initialize the HPI message structure

 Expect actual adapter index to be set by caller */

/** \internal

  * initialize the HPI response structure

	/* default error return if the response is

 Expect adapter index to be set by caller */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Asihpi soundcard

 *  Copyright (c) by AudioScience Inc <support@audioscience.com>

 *

 *  The following is not a condition of use, merely a request:

 *  If you modify this program, particularly if you fix errors, AudioScience Inc

 *  would appreciate it if you grant us the right to use those modifications

 *  for any purpose including commercial applications.

/**

 * snd_printddd - very verbose debug printk

 * @format: format string

 *

 * Works like snd_printk() for debugging purposes.

 * Ignored when CONFIG_SND_DEBUG_VERBOSE is not set.

 * Must set snd module debug parameter to 3 to enable at runtime.

 index 0-MAX */

 ID for this card */

 identify driver */

 set to 1 to dump every control from adapter to log */

 defaults */

 Per card data */

	/* In low latency mode there is only one stream, a pointer to its

	 * private data is stored here on trigger and cleared on stop.

	 * The interrupt handler uses it as a parameter when calling

	 * snd_card_asihpi_timer_function().

 Per stream data */

 Host R/W pos */

 DMA R/W offset in buffer */

 DMA R/W offset in buffer */

 universal stream verbs work with out or in stream handles */

 Functions to allow driver to give a buffer to HPI for busmastering */

 handle to outstream. */

 size in bytes of bus mastering buffer */

**************************** GENERAL PCM ****************/

 INVALID */

 HPI_FORMAT_PCM8_UNSIGNED        1 */

 HPI_FORMAT_PCM16_SIGNED         2 */

 HPI_FORMAT_MPEG_L1              3 */

 HPI_FORMAT_MPEG_L2              4 */

 HPI_FORMAT_MPEG_L3              5 */

 HPI_FORMAT_DOLBY_AC2            6 */

 HPI_FORMAT_DOLBY_AC3            7 */

 HPI_FORMAT_PCM16_BIGENDIAN      8 */

 HPI_FORMAT_AA_TAGIT1_HITS       9 */

 HPI_FORMAT_AA_TAGIT1_INSERTS   10 */

 HPI_FORMAT_PCM32_SIGNED        11 */

 HPI_FORMAT_RAW_BITSTREAM       12 */

 HPI_FORMAT_AA_TAGIT1_HITS_EX1  13 */

 HPI_FORMAT_PCM32_FLOAT         14 */

	/* ALSA can't handle 3 byte sample size together with power-of-2

	 *  constraint on buffer_bytes, so disable this format

 SNDRV_PCM_FORMAT_S24_3LE */ 
		/* on cards without SRC,

 some other rate */

 don't let it be zero! */

 don't link Cap and Play */

				/* How do I know how much valid data is present

				* in buffer? Must be at least one period!

				* Guessing 2 periods, but if

				* buffer is bigger it may contain even more

				* data??

 start the master stream */

 don't link Cap and Play */

			/*? workaround linked streams don't

 _prepare and _hwparams reset the stream */

/*algorithm outline

 Without linking degenerates to getting single stream pos etc

 Without mmap 2nd loop degenerates to snd_pcm_period_elapsed

/*

pcm_buf_dma_ofs=get_buf_pos(s);

for_each_linked_stream(s) {

	pcm_buf_dma_ofs=get_buf_pos(s);

	min_buf_pos = modulo_min(min_buf_pos, pcm_buf_dma_ofs, buffer_bytes)

	new_data = min(new_data, calc_new_data(pcm_buf_dma_ofs,irq_pos)

}

timer.expires = jiffies + predict_next_period_ready(min_buf_pos);

for_each_linked_stream(s) {

	s->pcm_buf_dma_ofs = min_buf_pos;

	if (new_data > period_bytes) {

		if (mmap) {

			irq_pos = (irq_pos + period_bytes) % buffer_bytes;

			if (playback) {

				write(period_bytes);

			} else {

				read(period_bytes);

			}

		}

		snd_pcm_period_elapsed(s);

	}

}

/** Minimum of 2 modulo values.  Works correctly when the difference between

* the values is less than half the modulus

/** Timer function, equivalent to interrupt service routine for cards

 find minimum newdata and buffer pos in group */

 don't link Cap and Play */

 number of bytes in on-card buffer */

 can't statically init min when wrap is involved */

 a multiple of period_bytes */

	/* come back when on_card_bytes has decreased enough to allow

	   write to happen, or when data has been consumed to make another

	   period

 don't link Cap and Play */

 Store dma offset for use by pointer callback */

 Limit use of on card fifo for playback */

 buffer wrap is handled at lower level */

 ? host_rw_ofs always ahead of elapsed_dma_ofs by preload size? */

**************************** PLAYBACK OPS ****************/

	/* on cards without SRC, must query at valid rate,

	* maybe set by external sync

	/*? also check ASI5000 samplerate source

	    If external, only support external rate.

	    If internal and other stream playing, can't switch

 snd_card_asihpi_playback.fifo_size = 0; */

 struct is copied, so can create initializer dynamically */

**************************** CAPTURE OPS ****************/

	/* NOTE Unlike playback can't use actual samples_played

		for the capture position, because those samples aren't yet in

		the local buffer available for reading.

	/* on cards without SRC, must query at valid rate,

 snd_card_asihpi_capture.fifo_size = 0; */

 pointer to ops struct is stored, dont change ops afterwards! */

	/*? do we want to emulate MMAP for non-BBM cards?

**************************** MIXER CONTROLS ****************/

 copied to snd_ctl_elem_id.name[44]; */

 Number of strings must match the enumerations for HPI_TUNER_BAND in hpi.h */

 Number of strings must match the enumerations for HPI_SOURCENODES in hpi.h */

 Number of strings must match the enumerations for HPI_DESTNODES in hpi.h */

 Convert HPI control name and location into ALSA control name */

 clock is neither capture nor playback */

 On or towards a PCM capture destination*/

 On a source node that is not PCM playback */

 Between an input and an output */

 PCM Playback source, or  output node */

	/* printk(KERN_INFO "Adding %s %d to %d ",  hpi_ctl->name,

/*------------------------------------------------------------

   Volume controls

 native gains are in millibels */

	/*  change = asihpi->mixer_volume[addr][0] != left ||

	   asihpi->mixer_volume[addr][1] != right;

	/* HPI currently only supports all or none muting of multichannel volume

	ALSA Switch element has opposite sense to HPI mute: on==unmuted, off=muted

/*------------------------------------------------------------

   Level controls

	/*  change = asihpi->mixer_level[addr][0] != left ||

	   asihpi->mixer_level[addr][1] != right;

 can't use 'volume' cos some nodes have volume as well */

/*------------------------------------------------------------

   AESEBU controls

 AESEBU format */

 default to N/A */

 return success but set the control to N/A */

 default to S/PDIF */

/*------------------------------------------------------------

   Tuner controls

 Gain */

	/*

	struct snd_card_asihpi *asihpi = snd_kcontrol_chip(kcontrol);

	/*

	struct snd_card_asihpi *asihpi = snd_kcontrol_chip(kcontrol);

 Band  */

	/*

	struct snd_card_asihpi *asihpi = snd_kcontrol_chip(kcontrol);

	/*

	struct snd_card_asihpi *asihpi = snd_kcontrol_chip(kcontrol);

 Freq */

 skip band with bogus stepping */

 Tuner control group initializer  */

/*------------------------------------------------------------

   Meter controls

 linear values for 10dB steps */

 0dB */

 -60dB */

 -80 */

 -100 */

			/* -ve is log value in millibels < -60dB,

			* convert to (roughly!) linear,

/*------------------------------------------------------------

   Multiplexer controls

 Should cache this search result! */

/*------------------------------------------------------------

   Channel mode controls

	/* HPI channel mode values can be from 1 to 6

	Some adapters only support a contiguous subset

/*------------------------------------------------------------

   Sampleclock source  controls

 Number of strings must match expected enumerated values */

/*------------------------------------------------------------

   Clkrate controls

 Need to change this to enumerated control with list of rates */

	/*  change = asihpi->mixer_clkrate[addr][0] != left ||

	   asihpi->mixer_clkrate[addr][1] != right;

 already will have picked up index 0 above */

/*------------------------------------------------------------

   Mixer

		/* ASI50xx in SSX mode has multiple meters on the same node.

		   Use subindex to create distinct ALSA controls

		   for any duplicated controls.

 ignore these */

/*------------------------------------------------------------

   /proc interface

/*------------------------------------------------------------

   HWDEP

/* results in /dev/snd/hwC#D0 file for each card with index #

   also /proc/asound/hwdep will contain '#-00: asihpi (HPI) for each card'

/*------------------------------------------------------------

   CARD

 Should this be enable[hpi->index] ? */

 Initialise low-level HPI driver */

 first try to give the card the same index as its hardware index */

 if that fails, try the default index==next available */

 assume LL mode */

	/* always create, can be enabled or disabled dynamically

 Stop interrupts */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************



    AudioScience HPI driver

    Copyright (C) 1997-2014  AudioScience Inc. <support@audioscience.com>





Extended Message Function With Response Caching



(C) Copyright AudioScience Inc. 2002

		/* HPI_DEBUG_LOG(DEBUG, " %x,%lx\n", i,

 Globals */

 use these to keep track of opens from user mode apps/DLLs */

 return major.minor */

 return major.minor.release */

do not propagate the message down the chain */

do not propagate the message down the chain */

 Initialize this module's internal state */

 Init subsys_findadapters response to no-adapters */

 individual HPIs dont implement driver load */

 Must explicitly handle every subsys message in this switch */

/* NOTE: HPI_Message() must be defined in the driver as a wrapper for

 * HPI_MessageEx so that functions in hpifunc.c compile.

 issue a reset */

		/* HPI_DEBUG_LOG(INFO,"closing adapter %d "

		   "instream %d owned by %p\n",

 issue a reset */

 issue a reset */

		/* HPI_DEBUG_LOG(INFO,"closing adapter %d "

		   "outstream %d owned by %p\n",

 issue a reset */

 Open the adapter and streams */

 call to HPI_ADAPTER_OPEN */

 call to HPI_ADAPTER_GET_INFO */

 call to HPI_OSTREAM_OPEN */

 call to HPI_ISTREAM_OPEN */

 call to HPI_MIXER_OPEN */

 HPI_SUBSYS_CREATE_ADAPTER structure with */

 resource list or NULL=find all */

 response from HPI_ADAPTER_GET_INFO */

 Init response here so we can pass in previous adapter list */

		/* the adapter was created successfully

 prepare adapter (pre-open streams etc.) */

      printk(KERN_INFO "Cleanup adapter #%d\n",wAdapter); */

 SPDX-License-Identifier: GPL-2.0-only

/***********************************************************************



    AudioScience HPI driver

    Functions for reading DSP code using hotplug firmware loader



    Copyright (C) 1997-2014  AudioScience Inc. <support@audioscience.com>





*  Firmware descriptor */

-------------------------------------------------------------------*/

 "CODE" */

 Major version change probably means Host-DSP protocol change */

-------------------------------------------------------------------*/

-------------------------------------------------------------------*/

 Go back to start of  data, after header */

-------------------------------------------------------------------*/

-------------------------------------------------------------------*/

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************



    AudioScience HPI driver

    Copyright (C) 1997-2014  AudioScience Inc. <support@audioscience.com>





\file hpicmn.c



 Common functions used by hpixxxx.c modules



(C) Copyright AudioScience Inc. 1998-2003

/**

 * hpi_validate_response - Given an HPI Message that was sent out and

 * a response that was received, validate that the response has the

 * correct fields filled in, i.e ObjectType, Function etc

 * @phm: message

 * @phr: response

HPI_ASSERT(pao->type); */

/**

 * hpi_find_adapter - FindAdapter returns a pointer to the struct

 * hpi_adapter_obj with index wAdapterIndex in an HPI_ADAPTERS_LIST

 * structure.

 * @adapter_index: value in [0, HPI_MAX_ADAPTERS[

		/*

		   HPI_DEBUG_LOG(VERBOSE, "Found adapter index %d\n",

		   wAdapterIndex);

		/*

		   HPI_DEBUG_LOG(VERBOSE, "No adapter index %d\n",

		   wAdapterIndex);

/**

 * wipe_adapter_list - wipe an HPI_ADAPTERS_LIST structure.

 *

 find the nCount'th nonzero adapter in array */

				/* The cache is invalid.

				 * Minimum valid entry size is

				 * sizeof(struct hpi_control_cache_info)

 dummy cache entry */

			/* quit loop early if whole cache has been scanned.

			 * dwControlCount is the maximum possible entries

			 * but some may be absent from the cache

 have seen last control index */

/** Find a control.

 allow unified treatment of several string fields within struct */

 HPI_PAD_CHANNEL_NAME */

 HPI_PAD_ARTIST */

 HPI_PAD_TITLE */

 HPI_PAD_COMMENT */

/** CheckControlCache checks the cache and fills the struct hpi_response

 * accordingly. It returns one if a cache hit occurred, zero otherwise.

 set the default response size */

 Ensure null terminator */

/** Updates the cache with Set values.



Only update if no error.

Volume and Level return the limited values in the response, so use these

Multiplexer does so use sent values

 mux does not return its setting on Set command. */

 mode does not return its setting on Set command. */

	/* pC is the default cached control strucure.

	   May be cast to something else in the following switch statement.

/** Allocate control cache.



\return Cache pointer, or NULL if allocation fails.

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0-only

/************************************************************************



    AudioScience HPI driver

    Copyright (C) 1997-2011  AudioScience Inc. <support@audioscience.com>





Debug macro translation.



 Debug level; 0 quiet; 1 informative, 2 debug, 3 verbose debug.  */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************



    AudioScience HPI driver

    Copyright (C) 1997-2011  AudioScience Inc. <support@audioscience.com>





 Hardware Programming Interface (HPI) for AudioScience ASI6200 series adapters.

 These PCI bus adapters are based on the TI C6711 DSP.



 Exported functions:

 void HPI_6000(struct hpi_message *phm, struct hpi_response *phr)



 #defines

 HIDE_PCI_ASSERTS to show the PCI asserts

 PROFILE_DSP2 get profile data from DSP2 if present (instead of DSP 1)



(C) Copyright AudioScience Inc. 1998-2003

 start of C67xx internal RAM */

 HPI6000 specific error codes */

 not actually used anywhere */

 operational/messaging errors */

 Initialisation/bootload errors */

 can't access PCI2040 */

 can't access DSP HPI i/f */

 can't access internal DSP memory */

 can't access SDRAM - test#1 */

 can't access SDRAM - test#2 */

 local defines */

 for PCI2040 i/f chip */

 HPI CSR registers */

 word offsets from CSR base */

 use when io addresses defined as u32 * */

 HPI registers, spaced 8K bytes = 2K words apart */

A, B */

 local globals */

 used to count PCI2040 errors */

 used to count PCI2040 errors */

		/* Don't let these messages go to the HW function because

		 * they're called without locking the spinlock.

		 * For the HPI6000 adapters the HW would return

		 * HPI_ERROR_INVALID_FUNC anyway.

		/* Don't let these messages go to the HW function because

		 * they're called without locking the spinlock.

		 * For the HPI6000 adapters the HW would return

		 * HPI_ERROR_INVALID_FUNC anyway.

***********************************************************************/

/** HPI_6000()

 * Entry point from HPIMAN

 * All calls to the HPI start here

 Don't even try to communicate with crashed DSP */

 Init default response including the size field */

***********************************************************************/

 SUBSYSTEM */

/* create an adapter object and initialise it based on resource information

 * passed in in the message

 * NOTE - you cannot use this function AND the FindAdapters function at the

 * same time, the application must use only one of them to get the adapters

 create temp adapter obj, because we don't know what index yet */

 create the adapter object based on the resource information */

 need to update paParentAdapter */

 We just added this adapter, why can't we find it!? */

 this routine is called from SubSysFindAdapter and SubSysCreateAdapter */

 The PCI2040 has the following address map */

 BAR0 - 4K = HPI control and status registers on PCI2040 (HPI CSR) */

 BAR1 - 32K = HPI registers on DSP */

 set addresses for the possible DSP HPI interfaces */

 Set the default number of DSPs on this card */

 This is (conditionally) adjusted after bootloading */

 of the first DSP in the bootload section. */

 get info about the adapter by asking the adapter */

 send a HPI_ADAPTER_GET_INFO message */

 response from DSP 0 */

 response from DSP 1 */

 Read the control cache length to figure out if it is turned on */

 reset DSPs on adapter */

***********************************************************************/

 ADAPTER */

 if we have PCI2040 asserts then collect them */

 assert count */

 "dsp index" */

get DSP asserts */

***********************************************************************/

 LOW-LEVEL */

 NOTE don't use wAdapterType in this routine. It is not setup yet */

 ASI5100 revB or higher with C6711D */

 ASI5200 PCIe version of ASI5100 */

	/* reset all DSPs, indicate two DSPs are present

	 * set RST3-=1 to disconnect HAD8 to set DSP in little endian mode

	/* read back register to make sure PCI2040 chip is functioning

	 * note that bits 4..15 are read-only and so should always return zero,

	 * even though we wrote 1 to them

 Indicate that DSP#0,1 is a C6X */

	/* set Bit30 and 29 - which will prevent Target aborts from being

	 * issued upon HPI or GP error

	/* isolate DSP HAD8 line from PCI2040 so that

	 * Little endian can be set by pullup

 revB */

 revB */

Take both DSPs out of reset, setting HAD8 to the correct Endian */

 start DSP 0 */

 start DSP 1 */

 set HAD8 back to PCI2040, now that DSP set to little endian mode */

delay to allow DSP to get going */

 loop through all DSPs, downloading DSP code */

 configure DSP so that we download code into the SRAM */

 set control reg for little endian, HWOB=1 */

 test access to the HPI address register (HPIA) */

/* if C6713 the setup PLL to generate 225MHz from 25MHz.

* Since the PLLDIV1 read is sometimes wrong, even on a C6713,

* we're going to do this unconditionally

 PLLDIV1 should have a value of 8000 after reset */

/*

	if (HpiReadWord(pdo,0x01B7C118) == 0x8000)

			/* C6713 datasheet says we cannot program PLL from HPI,

			 * and indeed if we try to set the PLL multiply from the

			 * HPI, the PLL does not seem to lock,

			 * so we enable the PLL and use the default of x 7

 bypass PLL */

  ** use default of PLL  x7 ** */

 EMIF = 225/3=75MHz */

 peri = 225/2 */

 cpu  = 225/1 */

 ~2ms delay */

 PLL not bypassed */

 ~2ms delay */

		/* test r/w to internal DSP memory

		 * C6711 has L2 cache mapped to 0x0 when reset

		 *

		 *  revB - because of bug 3.0.1 last HPI read

		 * (before HPI address issued) must be non-autoinc

 test each bit in the 32bit word */

		/* memory map of ASI6200

		   00000000-0000FFFF    16Kx32 internal program

		   01800000-019FFFFF    Internal peripheral

		   80000000-807FFFFF    CE0 2Mx32 SDRAM running @ 100MHz

		   90000000-9000FFFF    CE1 Async peripherals:



		   EMIF config

		   ------------

		   Global EMIF control

		   0 -

		   1 -

		   2 -

		   3 CLK2EN = 1   CLKOUT2 enabled

		   4 CLK1EN = 0   CLKOUT1 disabled

		   5 EKEN = 1 <--!! C6713 specific, enables ECLKOUT

		   6 -

		   7 NOHOLD = 1   external HOLD disabled

		   8 HOLDA = 0    HOLDA output is low

		   9 HOLD = 0             HOLD input is low

		   10 ARDY = 1    ARDY input is high

		   11 BUSREQ = 0   BUSREQ output is low

		   12,13 Reserved = 1

		/* EMIF CE0 setup - 2Mx32 Sync DRAM

		   31..28       Wr setup

		   27..22       Wr strobe

		   21..20       Wr hold

		   19..16       Rd setup

		   15..14       -

		   13..8        Rd strobe

		   7..4         MTYPE   0011            Sync DRAM 32bits

		   3            Wr hold MSB

		   2..0         Rd hold

		/* EMIF SDRAM Extension

		   31-21        0

		   20           WR2RD = 0

		   19-18        WR2DEAC = 1

		   17           WR2WR = 0

		   16-15        R2WDQM = 2

		   14-12        RD2WR = 4

		   11-10        RD2DEAC = 1

		   9            RD2RD = 1

		   8-7          THZP = 10b

		   6-5          TWR  = 2-1 = 01b (tWR = 10ns)

		   4            TRRD = 0b = 2 ECLK (tRRD = 14ns)

		   3-1          TRAS = 5-1 = 100b (Tras=42ns = 5 ECLK)

		   1            CAS latency = 3 ECLK

		   (for Micron 2M32-7 operating at 100Mhz)

 need to use this else DSP code crashes */

		/* EMIF SDRAM control - set up for a 2Mx32 SDRAM (512x32x4 bank)

		   31           -               -

		   30           SDBSZ   1               4 bank

		   29..28       SDRSZ   00              11 row address pins

		   27..26       SDCSZ   01              8 column address pins

		   25           RFEN    1               refersh enabled

		   24           INIT    1               init SDRAM

		   23..20       TRCD    0001

		   19..16       TRP             0001

		   15..12       TRC             0110

		   11..0        -               -

      need to use this else DSP code crashes */

 EMIF SDRAM Refresh Timing */

		/*MIF CE1 setup - Async peripherals

		   @100MHz bus speed, each cycle is 10ns,

		   31..28       Wr setup  = 1

		   27..22       Wr strobe = 3                   30ns

		   21..20       Wr hold = 1

		   19..16       Rd setup =1

		   15..14       Ta = 2

		   13..8        Rd strobe = 3                   30ns

		   7..4         MTYPE   0010            Async 32bits

		   3            Wr hold MSB =0

		   2..0         Rd hold = 1

 delay a little to allow SDRAM and DSP to "get going" */

 test access to SDRAM */

 test each bit in the 32bit word */

 test every Nth address in the DRAM */

2_mx32 */

 write the DSP code down into the DSPs memory */

 end of code */

 verify that code was written correctly */

 this time through, assume no errors in DSP code file/array */

 end of code */

 zero out the hostmailbox */

 write the DSP number into the hostmailbox */

 structure before starting the DSP */

 write the DSP adapter Info into the */

 hostmailbox before starting the DSP */

 step 3. Start code by sending interrupt */

		/* wait for a non-zero value in hostcmd -

		 * indicating initialization is complete

		 *

		 * Init could take a while if DSP checks SDRAM memory

		 * Was 200000. Increased to 2000000 for ASI8801 so we

		 * don't get 938 errors.

			/* The following is a workaround for bug #94:

			 * Bluescreen on install and subsequent boots on a

			 * DELL PowerEdge 600SC PC with 1.8GHz P4 and

			 * ServerWorks chipset. Without this delay the system

			 * locks up with a bluescreen (NOT GPF or pagefault).

 read the DSP adapter Info from the */

 hostmailbox structure after starting the DSP */

u32 dwTestData=0; */

 all 6200 cards have this many DSPs */

 test that the PLD is programmed */

 and we can read/write 24bits */

for ASI6100/6200/8800 */

 ASI6100/6200 has 24bit path to FPGA */

 ASI5100 uses AX6 code, */

 but has no PLD r/w register to test */

 ASI5200 uses AX6 code, */

 but has no PLD r/w register to test */

 ASI8800 has 16bit path to FPGA */

 write to 24 bit Debug register (D31-D8) */

 for numDSP */

 write one word to the HPI port */

 read one word from the HPI port */

? No way to return error */

 take care of errata in revB DSP (2.0.1) */

 write a block of 32bit words to the DSP HPI port using auto-inc mode */

 take care of errata in revB DSP (2.0.1) */

 must end with non auto-inc */

/** read a block of 32bit words from the DSP HPI port using auto-inc mode

 take care of errata in revB DSP (2.0.1) */

 must end with non auto-inc */

 get the message address and size */

 send the message */

 get the response address */

 read the length of the response back from the DSP */

 get the response */

 set i/f back to idle */

 have to set up the below defines to match stuff in the MAP file */

 comment this line in to enable checking */

 round dwDataSize down to nearest 4 bytes */

 get the address and size */

 DSP returns number of DWORDS */

		/* send the data. break data into 512 DWORD blocks (2K bytes)

		 * and send using block write. 2Kbytes is the max as this is the

		 * memory window given to the HPI data register by the PCI2040

 this parameter not used! */

 round dwDataSize down to nearest 4 bytes */

 get the address and size */

 read the data */

 DSPINT */

 set command */

 flush the FIFO */

 reset the interrupt bit */

 if the PCI2040 has recorded an HPI timeout, reset the error and return 1 */

 read the error bits from the PCI2040 */

 reset the error flag */

************ inc global */

 wait for host interrupt to signal ack is ready */

 0x04 = HINT from DSP */

 wait for dwAckValue */

 read the ack mailbox */

for (i=0;i<1000;i++) */

      dwPause=i+1; */

		/* indicates bad read from DSP -

 read the cached controls */

 flush the FIFO */

* Get dsp index for multi DSP adapters only */

/** Complete transaction with DSP



Send message, get response, send or get stream data if any.

 is this  checked on the DSP anyway? */

 something failed in the HPI/DSP interface */

 something failed in the DSP */

 dsp 0 default */

 no assert from dsp 0, check dsp 1 */

 just the header of the response is valid */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************



    AudioScience HPI driver

    Copyright (C) 1997-2014  AudioScience Inc. <support@audioscience.com>





 Hardware Programming Interface (HPI) for AudioScience

 ASI50xx, AS51xx, ASI6xxx, ASI87xx ASI89xx series adapters.

 These PCI and PCIe bus adapters are based on a

 TMS320C6205 PCI bus mastering DSP,

 and (except ASI50xx) TI TMS320C6xxx floating point DSP



 Exported function:

 void HPI_6205(struct hpi_message *phm, struct hpi_response *phr)



(C) Copyright AudioScience Inc. 1998-2010

****************************************************************************/

 HPI6205 specific error codes */

 not actually used anywhere */

 operational/messaging errors */

 initialization/bootload errors */

****************************************************************************/

 for C6205 PCI i/f */

 Host Status Register (HSR) bitfields */

 Host-to-DSP Control Register (HDCR) bitfields */

 DSP Page Register (DSPP) bitfields, */

 defines 4 Mbyte page that BAR0 points to */

/* BAR0 maps to prefetchable 4 Mbyte memory block set by DSPP.

 * BAR1 maps to non-prefetchable 8 Mbyte memory block

 * of DSP memory mapped registers (starting at 0x01800000).

 * 0x01800000 is hardcoded in the PCI i/f, so that only the offset from this

 * needs to be added to the BAR1 base address set in the PCI config reg

 used to control LED (revA) and reset C6713 (revB) */

 For first 6713 in CE1 space, using DA17,16,2 */

 PCI registers */

 a non-NULL handle means there is an HPI allocated buffer */

 non-zero size means a buffer exists, may be external */

****************************************************************************/

 local prototypes */

****************************************************************************/

 make sure we see updates DMAed from DSP */

****************************************************************************/

/** Entry point to this HPI backend

 * All calls to the HPI start here

 allow last resort debug read even after crash */

 Init default response  */

 normal messages must have valid adapter index */

 subsys messages don't address an adapter */

****************************************************************************/

 SUBSYSTEM */

/** Create an adapter object and initialise it based on resource information

 * passed in in the message

 * *** NOTE - you cannot use this function AND the FindAdapters function at the

 * same time, the application must use only one of them to get the adapters ***

 create temp adapter obj, because we don't know what index yet */

* delete an adapter - required by WDM driver */

 reset adapter h/w */

 Reset C6713 #1 */

 reset C6205 */

/** Create adapter object

  allocate buffers, bootload DSPs, initialise control cache

 init error reporting */

 The C6205 memory area 1 is 8Mbyte window into DSP registers */

 no need to clean up as SubSysCreateAdapter */

 calls DeleteAdapter on error. */

 allow boot load even if mem alloc wont work */

 make sure the DSP has started ok */

	/* Note that *pao, *phw are zeroed after allocation,

	 * so pointers and flags are NULL by default.

	 * Allocate bus mastering control cache buffer and tell the DSP about it

 wAdapterIndex == version == 0 */

/** Free memory areas allocated by adapter

 * this routine is called from AdapterDelete,

  * and SubSysCreateAdapter if duplicate index

?phw->InStreamHostBuffers[i] = NULL; */

****************************************************************************/

 Adapter functions */

 reset the interrupt from the DSP */

****************************************************************************/

 OutStream Host buffer functions */

/** Allocate or attach buffer for busmastering

		/* ALLOC phase, allocate a buffer with power of 2 size,

		   get its bus address for PCI bus mastering

		/* return old size and allocated size,

 Same size, no action required */

		/* get the phys addr into msg for single call alloc caller

		 * needs to do this for split alloc (or use the same message)

		 * return the phy address for split alloc in the respose too

		/* GRANT phase.  Set up the BBM status, tell the DSP about

		   the buffer so it can start using BBM.

 Tell adapter to stop using the host buffer. */

	/* Should HPI_ERROR_INVALID_OPERATION be returned

 there  is no BBM buffer, write via message */

	/* HostBuffers is used to indicate host buffer is internally allocated.

		/* either all data,

 remaining data if any */

	/*

	 * This version relies on the DSP code triggering an OStream buffer

	 * update immediately following a SET_FORMAT call. The host has

	 * already written data into the BBM buffer, but the DSP won't know

	 * about it until dwHostIndex is adjusted.

 Format can only change after reset. Must tell DSP. */

 send the format to the DSP */

****************************************************************************/

 InStream Host buffer functions */

 Same size, no action required */

		/* get the phys addr into msg for single call alloc. Caller

		/* Should HPI_ERROR_INVALID_OPERATION be returned

		/* either all data,

 remaining data if any */

****************************************************************************/

 LOW-LEVEL */

 fix up cases where bootcode id[1] != subsys id */

 reset DSP by writing a 1 to the WARMRESET bit */

 check that PCI i/f was configured by EEPROM */

 disable PINTA interrupt */

 check control register reports PCI boot mode */

 try writing a few numbers to the DSP page register */

 and reading them back. */

 reset DSP page to the correct number */

	/* release 6713 from reset before 6205 is bootloaded.

	   This ensures that the EMIF is inactive,

	   and the 6713 HPI gets the correct bootmode etc

 DSP 1 is a C6713 */

 CLKX0 <- '1' release the C6205 bootmode pulldowns */

 Reset the 6713 #1 - revB */

 value of bit 3 is unknown after DSP reset, other bits shoudl be 0 */

 Release C6713 from reset - revB */

 is there a DSP to load? */

 write the DSP code down into the DSPs memory */

 end of code */

 dummy read every 4 words */

 for 6205 advisory 1.4.4 */

 verify code */

 end of code */

	/* After bootloading all DSPs, start DSP0 running

	 * The DSP0 code will handle starting and synchronizing with its slaves

 we need to tell the card the physical PCI address */

 set ack so we know when DSP is ready to go */

 (dwDspAck will be changed to HIF_RESET) */

 ensure ack is written before dsp writes back */

 locate the host mailbox on the DSP. */

 enable interrupts */

 start code running... */

 give the DSP 10ms to start up */

****************************************************************************/

 Bootloader utility functions */

 DSP 0 is always C6205 */

 BAR1 register access */

			/* HPI_DEBUG_LOG(WARNING,

 *INDENT OFF* */

 *INDENT-ON* */

 address within 4M page */

 BAR0 memory access */

 DSP 1 is a C6713 */

      u32 dwVerifyData=0; */

 DSP 0 is always C6205 */

 BAR1 - DSP  register access using */

 Non-prefetchable PCI access */

 BAR0 access - all of DSP memory using */

 pre-fetchable PCI access */

 *INDENT-OFF* */

 *INDENT-ON* */

 address within 4M page */

 DSP 1 is a C6713 */

 dummy read every 4 words for 6205 advisory 1.4.4 */

 dummy read every 4 words for 6205 advisory 1.4.4 */

 DSP 0 is always C6205 */

 Set the EMIF */

 memory map of C6205 */

 00000000-0000FFFF    16Kx32 internal program */

 00400000-00BFFFFF    CE0     2Mx32 SDRAM running @ 100MHz */

 EMIF config */

------------ */

 Global EMIF control */

 EMIF CE0 setup - 2Mx32 Sync DRAM on ASI5000 cards only */

 EMIF CE1 setup - 32 bit async. This is 6713 #1 HPI, */

 which occupies D15..0. 6713 starts at 27MHz, so need */

 plenty of wait states. See dsn8701.rtf, and 6713 errata. */

 WST should be 71, but 63  is max possible */

 EMIF CE2 setup - 32 bit async. This is 6713 #2 HPI, */

 which occupies D15..0. 6713 starts at 27MHz, so need */

 plenty of wait states */

 EMIF CE3 setup - 32 bit async. */

 This is the PLD on the ASI5000 cards only */

 set EMIF SDRAM control for 2Mx32 SDRAM (512x32x4 bank) */

  need to use this else DSP code crashes? */

 EMIF SDRAM Refresh Timing */

 EMIF SDRAM timing  (orig = 0x410, emulator = 0x61a) */

 test access to the C6713s HPI registers */

 Set up HPIC for little endian, by setiing HPIC:HWOB=1 */

 C67 HPI is on lower 16bits of 32bit EMIF */

 HPIA - walking ones test */

		/* setup C67x PLL

		 *  ** C6713 datasheet says we cannot program PLL from HPI,

		 * and indeed if we try to set the PLL multiply from the HPI,

		 * the PLL does not seem to lock, so we enable the PLL and

		 * use the default multiply of x 7, which for a 27MHz clock

		 * gives a DSP speed of 189MHz

 bypass PLL */

 EMIF = 189/3=63MHz */

 peri = 189/2 */

 cpu  = 189/1 */

 ** SGT test to take GPO3 high when we start the PLL */

 and low when the delay is completed */

 FSX0 <- '1' (GPO3) */

 PLL not bypassed */

 FSX0 <- '0' (GPO3) */

 6205 EMIF CE1 resetup - 32 bit async. */

 Now 6713 #1 is running at 189MHz can reduce waitstates */

 CE1 */

 check that we can read one of the PLL registers */

 PLL should not be bypassed! */

		/* setup C67x EMIF  (note this is the only use of

		/* EMIF CE0 setup - 2Mx32 Sync DRAM

		   31..28       Wr setup

		   27..22       Wr strobe

		   21..20       Wr hold

		   19..16       Rd setup

		   15..14       -

		   13..8        Rd strobe

		   7..4         MTYPE   0011            Sync DRAM 32bits

		   3            Wr hold MSB

		   2..0         Rd hold

		/* EMIF SDRAM Extension

		   0x00

		   31-21        0000b 0000b 000b

		   20           WR2RD = 2cycles-1  = 1b



		   19-18        WR2DEAC = 3cycle-1 = 10b

		   17           WR2WR = 2cycle-1   = 1b

		   16-15        R2WDQM = 4cycle-1  = 11b

		   14-12        RD2WR = 6cycles-1  = 101b



		   11-10        RD2DEAC = 4cycle-1 = 11b

		   9            RD2RD = 2cycle-1   = 1b

		   8-7          THZP = 3cycle-1    = 10b

		   6-5          TWR  = 2cycle-1    = 01b (tWR = 17ns)

		   4            TRRD = 2cycle      = 0b  (tRRD = 14ns)

		   3-1          TRAS = 5cycle-1    = 100b (Tras=42ns)

		   1            CAS latency = 3cyc = 1b

		   (for Micron 2M32-7 operating at 100MHz)

		/* EMIF SDRAM control - set up for a 2Mx32 SDRAM (512x32x4 bank)

		   31           -       0b       -

		   30           SDBSZ   1b              4 bank

		   29..28       SDRSZ   00b             11 row address pins



		   27..26       SDCSZ   01b             8 column address pins

		   25           RFEN    1b              refersh enabled

		   24           INIT    1b              init SDRAM!



		   23..20       TRCD    0001b                   (Trcd/Tcyc)-1 = (20/10)-1 = 1



		   19..16       TRP     0001b                   (Trp/Tcyc)-1 = (20/10)-1 = 1



		   15..12       TRC     0110b                   (Trc/Tcyc)-1 = (70/10)-1 = 6



		   11..0        -       0000b 0000b 0000b

		/* SDRAM refresh timing

		   Need 4,096 refresh cycles every 64ms = 15.625us = 1562cycles of 100MHz = 0x61A

 DSP 2 is a C6713 */

 for 1st word, test each bit in the 32bit word, */

 dwLength specifies number of 32bit words to test */

for(i=0; i<dwLength; i++) */

 error */

 for(j) */

 for(i) */

 for the next 100 locations test each location, leaving it as zero */

 write a zero to the next word in memory before we read */

 the previous write to make sure every memory location is unique */

 error */

 leave location as zero */

 zero out entire memory block */

 DSP 0 is a C6205 */

 64K prog mem */

 64K data mem */

 DSP 1 is a C6713 */

 192K internal mem */

 64K internal mem / L2 cache */

 only test for SDRAM if an ASI5000 card */

 DSP 0 is always C6205 */

dwDRAMinc=1024; */

 DSP 1 is a C6713 */

dwDRAMinc=1024; */

 only test for DSP0 PLD on ASI5000 card */

 PLD is located at CE3=0x03000000 */

 DSP 1 is a C6713 */

 PLD is located at CE1=0x90000000 */

 8713 - LED on */

/** Transfer data to or from DSP

 nOperation = H620_H620_HIF_SEND_DATA or H620_HIF_GET_DATA

 round data_size down to nearest 4 bytes */

 make sure state is IDLE */

 DSP must change this back to nOperation */

 timed out */

                      err=HPI_ERROR_DSP_HARDWARE; */

/* wait for up to timeout_us microseconds for the DSP

   to signal state by DMA into dwDspAck

 ensure interface->dsp_ack is up to date */

 DSP changes dsp_ack by DMA */

HPI_DEBUG_LOG(VERBOSE, "Spun %d for %d\n", timeout_us/4-t, state); */

 set the busmaster interface to cmd, then interrupt the DSP */

 DSP gets state by DMA, make sure it is written to memory */

 before we interrupt the DSP */

	/* Assume buffer of type struct bus_master_interface_62

 signal we want a response */

 spin waiting on HIF interrupt flag (end of msg process) */

 read the result */

 set interface back to idle */

 special case for adapter close - */

 wait for the DSP to indicate it is idle */

 maybe an error response */

 something failed in the HPI/DSP interface */

 just the header of the response is valid */

 something failed in the DSP */

 SPDX-License-Identifier: GPL-2.0-only

/*******************************************************************************

    AudioScience HPI driver

    Common Linux HPI ioctl and module probe/remove functions



    Copyright (C) 1997-2014  AudioScience Inc. <support@audioscience.com>





/* Allow the debug level to be changed after module load.

 E.g.   echo 2 > /sys/module/asihpi/parameters/hpiDebugLevel

 List of adapters found */

/* Wrapper function to HPI_Message to enable dumping of the

   message and response types.

/* This is called from hpifunc.c functions, called by ALSA

 * (or other kernel process) In this case there is no file descriptor

 * available for the message cache code

 for radio-asihpi */

 HPI_DEBUG_LOG(INFO,"hpi_release file %p, pid %d\n", file, current->pid); */

 close the subsystem just in case the application forgot to. */

 Read the message and response pointers from user space.  */

 Now read the message size and data from user space.  */

 printk(KERN_INFO "message size %d\n", hm->h.wSize); */

 Override h.size in case it is changed between two userspace fetches */

 printk(KERN_INFO "user response size %d\n", res_max_size); */

 Application must not use these functions! */

 -1=no data 0=read from user mem, 1=write to user mem */

 Dig out any pointers embedded in the message.  */

 Yes, sparse, this is correct. */

				/* Allocate buffer according to application request.

				   ?Is it better to alloc/free for the duration

				   of the transaction?

 from card, WRITE to user mem */

 on return response size must be set */

printk(KERN_INFO "response size %d\n", hr->h.wSize); */

	/* printk(KERN_INFO "asihpi_isr %d ASI%04X:%d irq handled\n",

 also sets latency timer if < 16 */

 unmap previously mapped pci mem space */

 call CreateAdapterObject on the relevant hpi module */

 Check if current mode == Low Latency mode */

 Check if IRQs are supported */

	/* WARNING can't init mutex in 'adapter'

	 * and then copy it to adapters[] ?!?!

 Disable IRQ generation on DSP side by setting the rate to 0 */

 Note: request_irq calls asihpi_isr here */

 Disable IRQ generation on DSP side */

 unmap PCI memory space, mapped during device init. */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************



    AudioScience HPI driver

    Copyright (C) 1997-2012  AudioScience Inc. <support@audioscience.com>





HPI Operating System function implementation for Linux



(C) Copyright AudioScience Inc. 1997-2003

 MUST NOT SCHEDULE IN INTERRUPT CONTEXT! */

/** Allocate an area of locked memory for bus master DMA operations.



If allocation fails, return 1, and *pMemArea.size = 0

?? any benefit in using managed dmam_alloc_coherent? */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *                   Creative Labs, Inc.

 *  Routines for control of EMU10K1 chips

 *

 *  Copyright (c) by James Courtier-Dutton <James@superbug.co.uk>

 *      Added support for Audigy 2 Value.

 *  	Added EMU 1010 support.

 *  	General bug fixes and enhancements.

 *

 *  BUGS:

 *    --

 *

 *  TODO:

 *    --

/*************************************************************************

 * EMU10K1 init / done

 1 Hz */

 1 Hz */

** these are last so OFF prevents writing ***/

 Audigy extra stuffs */

 ?? */

 ?? */

 ?? */

 ?? */

 Reset */

 Timeout */

 Interface control */

 Master mode control */

 Powerdown control */

 Attenuation Left  0x01 = -103dB, 0xff = 24dB */

 Attenuation Right 0.5dB steps */

 ALC Control 1 */

 ALC Control 2 */

 ALC Control 3 */

 Noise gate control */

 Limiter control */

 ADC Mixer control. Mic for A2ZS Notebook */

 disable audio and lock cache */

 reset recording buffers */

 disable channel interrupt */

 set SPDIF bypass mode */

 enable rear left + rear right AC97 slots */

 init envelope engine */

 audigy2 */

 Hacks for Alice3 to work independent of haP16V driver */

 Setup SRCMulti_I2S SamplingRate */

 Setup SRCSel (Enable Spdif,I2S SRCMulti) */

 Setup SRCMulti Input Audio Enable */

 Use 0xFFFFFFFF to enable P16V sounds. */

 Enabled Phased (8-channel) P16V playback */

 Set playback routing. */

 audigy2 Value */

 Hacks for Alice3 to work independent of haP16V driver */

 Setup SRCMulti_I2S SamplingRate */

 Setup SRCSel (Enable Spdif,I2S SRCMulti) */

 Setup SRCMulti Input Audio Enable */

 Setup SPDIF Out Audio Enable */

		/* The Audigy 2 Value has a separate SPDIF out,

		 * so no need for a mixer switch

 Clear bit 3 */

 Audigy 2 ZS Notebook with DAC Wolfson WM8768/WM8568 */

		/* Enable GPIOs

		 * GPIO0: Unknown

		 * GPIO1: Speakers-enabled.

		 * GPIO2: Unknown

		 * GPIO3: Unknown

		 * GPIO4: IEC958 Output on.

		 * GPIO5: Unknown

		 * GPIO6: Unknown

		 * GPIO7: Unknown

 Windows uses 0x3f76 */

 Audigy 2 ZS Notebook with ADC Wolfson WM8775 */

 Set bit 2 for mic input */

 taken from original driver */

 taken from original driver */

	/*

	 *  Hokay, setup HCFG

	 *   Mute Disable Audio = 0

	 *   Lock Tank Memory = 1

	 *   Lock Sound Memory = 0

	 *   Auto Mute = 1

 audigy2 */

	/* FIXME: Remove all these emu->model and replace it with a card recognition parameter,

 With on-chip joystick */

 enable IR for SB Live */

 Disable all access to A_IOCFG for the emu1010 */

 Disable A_IOCFG for Audigy 2 ZS Notebook */

 Disable all access to A_IOCFG for the emu1010 */

 Disable A_IOCFG for Audigy 2 ZS Notebook */

 enable analog output */

 use 16M in 4G */

	/*

	 *  Enable the audio bit

 Enable analog/digital outs on audigy */

 Disable all access to A_IOCFG for the emu1010 */

 Disable A_IOCFG for Audigy 2 ZS Notebook */

 audigy2 */

			/* Unmute Analog now.  Set GPO6 to 1 for Apollo.

			 * This has to be done after init ALice3 I2SOut beyond 48KHz.

 audigy2 value */

 Unmute Analog now. */

 Disable routing from AC97 line out to Front speakers */

 FIXME: the following routine disables LiveDrive-II !! */

 TOSLink detection */

	/*

	 *  Shutdown the chip

 reset recording buffers */

 disable channel interrupt */

 disable audio and lock cache */

/*************************************************************************

 * ECARD functional implementation

 In A1 Silicon, these bits are in the HC register */

#define EC_CURRENT_PROM_VERSION 0x01	/* Self-explanatory.  This should

					 * be incremented any time the EEPROM's

 ECARD EEPROM has 64 16-bit words */

 Addresses for special values stored in to EEPROM */

 Address of the current prom version */

 LSW of board rev */

 MSW of board rev */

#define EC_SERIALNUM_ADDR	0x30	/* First word of serial number.  The

					 * can be up to 30 characters in length

					 * and is stored as a NULL-terminated

					 * ASCII string.  Any unused bytes must be

 Location at which checksum is stored */

/* Most of this stuff is pretty self-evident.  According to the hardware

 * dudes, we need to leave the ADCCAL bit low in order to avoid a DC

 * offset problem.  Weird.

/**************************************************************************

 * @func Clock bits into the Ecard's control latch.  The Ecard uses a

 *  control latch will is loaded bit-serially by toggling the Modem control

 *  lines from function 2 on the E8010.  This function hides these details

 *  and presents the illusion that we are actually writing to a distinct

 *  register.

 Set up the value */

 Clock the shift register */

 Latch the bits */

/**************************************************************************

 * @func Set the gain of the ECARD's CS3310 Trim/gain controller.  The

 * trim value consists of a 16bit value which is composed of two

 * 8 bit gain/trim values, one for the left channel and one for the

 * right channel.  The following table maps from the Gain/Attenuation

 * value in decibels into the corresponding bit pattern for a single

 * channel.

 Enable writing to the TRIM registers */

 Do it again to insure that we meet hold time requirements */

 Clock the bit */

 Set up the initial settings */

	/* Step 0: Set the codec type in the hardware control register

 Step 1: Turn off the led and deassert TRIM_CS */

 Step 2: Calibrate the ADC and DAC */

	/* Step 3: Wait for awhile;   XXX We can't get away with this

	 * under a real operating system; we'll need to block and wait that

	/* Step 4: Switch off the DAC and ADC calibration.  Note

	 * That ADC_CAL is actually an inverted signal, so we assert

 Step 4: Switch into run mode */

 Step 5: Set the analog input gain */

	/* Special initialisation routine

	 * before the rest of the IO-Ports become active.

 Defaults to 0x30303030 */

 Delay to give time for ADC chip to switch on. It needs 113ms */

 The FPGA is a Xilinx Spartan IIE XC2S50E */

	/* GPIO7 -> FPGA PGMN

	 * GPIO6 -> FPGA CCLK

	 * GPIO5 -> FPGA DIN

	 * FPGA CONFIG OFF -> FPGA PGMN

 Set PGMN low for 1uS. */

 Leave bit 7 set during netlist setup. */

 Allow FPGA memory to clean */

 After programming, set GPIO bit 4 high again. */

 firmware file names, per model, init-fw and dock-fw (optional) */

 IRQ Status */

 OPTIONS: Which cards are attached to the EMU */

 Audio Dock attached */

 Return to Audio Dock programming mode */

 ID, should read & 0x7f = 0x55 when FPGA programmed. */

 FPGA failed to be programmed */

 Sync clocking between 1010 and Dock */

 Allow DLL to settle */

 Unmute all. Default is muted after a firmware load */

 Audio Dock removed */

 Unmute all */

/*

 * EMU-1010 - details found out from this driver, official MS Win drivers,

 * testing the card:

 *

 * Audigy2 (aka Alice2):

 * ---------------------

 * 	* communication over PCI

 * 	* conversion of 32-bit data coming over EMU32 links from HANA FPGA

 *	  to 2 x 16-bit, using internal DSP instructions

 * 	* slave mode, clock supplied by HANA

 * 	* linked to HANA using:

 * 		32 x 32-bit serial EMU32 output channels

 * 		16 x EMU32 input channels

 * 		(?) x I2S I/O channels (?)

 *

 * FPGA (aka HANA):

 * ---------------

 * 	* provides all (?) physical inputs and outputs of the card

 * 		(ADC, DAC, SPDIF I/O, ADAT I/O, etc.)

 * 	* provides clock signal for the card and Alice2

 * 	* two crystals - for 44.1kHz and 48kHz multiples

 * 	* provides internal routing of signal sources to signal destinations

 * 	* inputs/outputs to Alice2 - see above

 *

 * Current status of the driver:

 * ----------------------------

 * 	* only 44.1/48kHz supported (the MS Win driver supports up to 192 kHz)

 * 	* PCM device nb. 2:

 *		16 x 16-bit playback - snd_emu10k1_fx8010_playback_ops

 * 		16 x 32-bit capture - snd_emu10k1_capture_efx_ops

	/* AC97 2.1, Any 16Meg of 4Gig address, Auto-Mute, EMU32 Slave,

	 * Lock Sound Memory Cache, Lock Tank Memory Cache,

	 * Mute all codecs.

	/* AC97 2.1, Any 16Meg of 4Gig address, Auto-Mute, EMU32 Slave,

	 * Lock Tank Memory Cache,

	 * Mute all codecs.

	/* AC97 2.1, Any 16Meg of 4Gig address, Auto-Mute, EMU32 Slave,

	 * Mute all codecs.

	/* AC97 2.1, Any 16Meg of 4Gig address, Auto-Mute, EMU32 Slave,

	 * Mute all codecs.

 Disable 48Volt power to Audio Dock */

 ID, should read & 0x7f = 0x55. (Bit 7 is the IRQ bit) */

 FPGA netlist already present so clear it */

 Return to programming mode */

 FPGA failed to return to programming mode */

 ID, should read & 0x7f = 0x55 when FPGA programmed. */

 FPGA failed to be programmed */

 Enable 48Volt power to Audio Dock */

 Optical -> ADAT I/O  */

	/* 0 : SPDIF

	 * 1 : ADAT

 IN_ADAT */

 IN_ADAT */

 Set no attenuation on Audio Dock pads. */

 Unmute Audio dock DACs, Headphone source DAC-4. */

 DAC PADs. */

 SPDIF Format. Set Consumer mode, 24bit, copy enable */

 MIDI routing */

 Unknown. */

 IRQ Enable: All on */

 snd_emu1010_fpga_write(emu, 0x09, 0x0f ); */

 IRQ Enable: All off */

 Default WCLK set to 48kHz. */

 Word Clock source, Internal 48kHz x1 */

 snd_emu1010_fpga_write(emu, EMU_HANA_WCLOCK, EMU_HANA_WCLOCK_INT_48K | EMU_HANA_WCLOCK_4X); */

 Audio Dock LEDs. */

 For 96kHz */

 For 192kHz */

 For 48kHz */

	/* Pavel Hofman - setting defaults for 8 more capture channels

	 * Defaults only, users will set their own values anyways, let's

	 * just copy/paste.

 Original */

 AudioDock Elink <- Silence */

 Hana SPDIF Out <- Silence */

 Hamoa DAC <- Silence */

 Hana ADAT Out <- Silence */

 Unmute all */

	/* AC97 1.03, Any 32Meg of 2Gig address, Auto-Mute, EMU32 Slave,

	 * Lock Sound Memory Cache, Lock Tank Memory Cache,

	 * Mute all codecs.

	/* AC97 1.03, Any 32Meg of 2Gig address, Auto-Mute, EMU32 Slave,

	 * Lock Sound Memory Cache, Lock Tank Memory Cache,

	 * Un-Mute all codecs.

 Initial boot complete. Now patches */

 MIDI Route */

 Unknown */

 MIDI Route */

 Unknown */

 SPDIF Format spdif  (or 0x11 for aes/ebu) */

 ALICE2 bus 0xa2 */

 ALICE2 bus 0xa3 */

 ALICE2 bus 0xb2 */

 ALICE2 bus 0xb3 */

 Default outputs */

 1616(M) cardbus default outputs */

 ALICE2 bus 0xa0 */

 ALICE2 bus 0xa0 */

 ALICE2 bus 0xa0 */

 ALICE2 bus 0xa0 */

 ALICE2 bus 0xa0 */

 ALICE2 bus 0xa0 */

 ALICE2 bus 0xa0 */

 ALICE2 bus 0xa0 */

 TEMP: Select SPDIF in/out */

 snd_emu1010_fpga_write(emu, EMU_HANA_OPTICAL_TYPE, 0x0); */ 
 TEMP: Select 48kHz SPDIF out */

 Mute all */

 Default fallback clock 48kHz */

 Word Clock source, Internal 48kHz x1 */

 snd_emu1010_fpga_write(emu, EMU_HANA_WCLOCK, EMU_HANA_WCLOCK_INT_48K | EMU_HANA_WCLOCK_4X); */

 48000 */

 Set LEDs on Audio Dock */

 Unmute all */

 snd_emu1010_fpga_write(emu, 0x7, 0x0); */ 
 snd_emu1010_fpga_write(emu, 0x7, 0x1); */ 
 snd_emu1010_fpga_write(emu, 0xe, 0x12); */ 
/*

 *  Create the EMU10K1 instance

 avoid access to already used hardware */

 Disable 48Volt power to Audio Dock */

 Audigy 5/Rx SB1550 */

 Tested by michael@gernoth.net 28 Mar 2015 */

	/* DSP: CA10300-IAT LF

	 * DAC: Cirrus Logic CS4382-KQZ

	 * ADC: Philips 1361T

	 * AC97: Sigmatel STAC9750

	 * CA0151: None

 24 bit capture instead of 16bit */

 Audigy4 (Not PRO) SB0610 */

 Tested by James@superbug.co.uk 4th April 2006 */

	/* A_IOCFG bits

	 * Output

	 * 0: ?

	 * 1: ?

	 * 2: ?

	 * 3: 0 - Digital Out, 1 - Line in

	 * 4: ?

	 * 5: ?

	 * 6: ?

	 * 7: ?

	 * Input

	 * 8: ?

	 * 9: ?

	 * A: Green jack sense (Front)

	 * B: ?

	 * C: Black jack sense (Rear/Side Right)

	 * D: Yellow jack sense (Center/LFE/Side Left)

	 * E: ?

	 * F: ?

	 *

	 * Digital Out/Line in switch using A_IOCFG bit 3 (0x08)

	 * 0 - Digital Out

	 * 1 - Line in

	/* Mic input not tested.

	 * Analog CD input not tested

	 * Digital Out not tested.

	 * Line in working.

	 * Audio output 5.1 working. Side outputs not working.

	/* DSP: CA10300-IAT LF

	 * DAC: Cirrus Logic CS4382-KQZ

	 * ADC: Philips 1361T

	 * AC97: Sigmatel STAC9750

	 * CA0151: None

 24 bit capture instead of 16bit */

	/* Audigy 2 Value AC3 out does not work yet.

	 * Need to find out how to turn off interpolators.

 Tested by James@superbug.co.uk 3rd July 2005 */

	/* DSP: CA0108-IAT

	 * DAC: CS4382-KQ

	 * ADC: Philips 1361T

	 * AC97: STAC9750

	 * CA0151: None

 Audigy 2 ZS Notebook Cardbus card.*/

 Tested by James@superbug.co.uk 6th November 2006 */

	/* Audio output 7.1/Headphones working.

	 * Digital output working. (AC3 not checked, only PCM)

	 * Audio Mic/Line inputs working.

	 * Digital input not tested.

	/* DSP: Tina2

	 * DAC: Wolfson WM8768/WM8568

	 * ADC: Wolfson WM8775

	 * AC97: None

	 * CA0151: None

 Tested by James@superbug.co.uk 4th April 2006 */

	/* A_IOCFG bits

	 * Output

	 * 0: Not Used

	 * 1: 0 = Mute all the 7.1 channel out. 1 = unmute.

	 * 2: Analog input 0 = line in, 1 = mic in

	 * 3: Not Used

	 * 4: Digital output 0 = off, 1 = on.

	 * 5: Not Used

	 * 6: Not Used

	 * 7: Not Used

	 * Input

	 *      All bits 1 (0x3fxx) means nothing plugged in.

	 * 8-9: 0 = Line in/Mic, 2 = Optical in, 3 = Nothing.

	 * A-B: 0 = Headphones, 2 = Optical out, 3 = Nothing.

	 * C-D: 2 = Front/Rear/etc, 3 = nothing.

	 * E-F: Always 0

	 *

 Tested by James@superbug.co.uk 4th Nov 2007. */

 Tested by James@superbug.co.uk 4th Nov 2007. */

 This is MAEM8960, 0202 is MAEM 8980 */

 EMU 1010 new revision */

 Tested by Maxim Kachur <mcdebugger@duganet.ru> 17th Oct 2012. */

 This is MAEM8986, 0202 is MAEM8980 */

 EMU 1010 PCIe */

 Tested by James@superbug.co.uk 8th July 2005. */

 This is MAEM8810, 0202 is MAEM8820 */

 EMU 1010 old revision */

 EMU0404b */

 EMU 0404 new revision */

 Tested by James@superbug.co.uk 20-3-2007. */

 EMU 0404 */

 EMU0404 PCIe */

 EMU 0404 PCIe ver_03 */

 Note that all E-mu cards require kernel 2.6 or newer. */

 Tested by James@superbug.co.uk 3rd July 2005 */

 Tested by shane-alsa@cm.nu 5th Nov 2005 */

	/* The 0x20061102 does have SB0350 written on it

	 * Just like 0x20021102

 digital/analog switch swapped */

	/* 0x20051102 also has SB0350 written on it, treated as Audigy 2 ZS by

 digital/analog switch swapped */

 digital/analog switch swapped */

 digital/analog switch swapped */

 Audigy 2 */

 Tested by James@superbug.co.uk 3rd July 2005 */

	/* DSP: CA0102-IAT

	 * DAC: CS4382-KQ

	 * ADC: Philips 1361T

	 * AC97: STAC9721

	 * CA0151: Yes

 24 bit capture instead of 16bit */

 Dell OEM/Creative Labs Audigy 2 ZS */

 See ALSA bug#1365 */

 digital/analog switch swapped */

 digital/analog switch swapped */

 24 bit capture instead of 16bit. Fixes ALSA bug#324 */

 Tested by ALSA bug#1680 26th December 2005 */

 note: It really has SB0220 written on the card, */

 but it's SB0228 according to kx.inf */

 Tested by Thomas Zehetbauer 27th Aug 2005 */

 Tested by alsa bugtrack user "hus" bug #1297 12th Aug 2005 */

	 .ac97_chip = 2, /* ac97 is optional; both SBLive 5.1 and platinum

			  * share the same IDs!

 Tested by James@superbug.co.uk 3rd July 2005 */

 terminator */

/*

 * The chip (at least the Audigy 2 CA0102 chip, but most likely others, too)

 * has a problem that from time to time it likes to do few DMA reads a bit

 * beyond its normal allocation and gets very confused if these reads get

 * blocked by a IOMMU.

 *

 * This behaviour has been observed for the first (reserved) page

 * (for which it happens multiple times at every playback), often for various

 * synth pages and sometimes for PCM playback buffers and the page table

 * memory itself.

 *

 * As a workaround let's widen these DMA allocations by an extra page if we

 * detect that the device is behind a non-passthrough IOMMU.

 enable PCI device */

 read revision & serial */

 set addressing mode */

 set the DMA transfer mask */

		/* 5.1: Enable the additional AC97 Slots. If the emu10k1 version

 initialize TRAM setup */

 irq handler must be registered after I/O ports are activated */

	/*

	 *  Init to 0x02109204 :

	 *  Clock accuracy    = 0     (1000ppm)

	 *  Sample Rate       = 2     (48kHz)

	 *  Audio Channel     = 1     (Left of 2)

	 *  Source Number     = 0     (Unspecified)

	 *  Generation Status = 1     (Original for Cat Code 12)

	 *  Cat Code          = 12    (Digital Signal Mixer)

	 *  Mode              = 0     (Mode 0)

	 *  Emphasis          = 0     (None)

	 *  CP                = 1     (Copyright unasserted)

	 *  AN                = 0     (Audio data)

	 *  P                 = 0     (Consumer)

 Clear silent pages and set up pointers */

 set up voice indices */

  Initialize the effect engine */

 end */

 end */

 resore for spdif */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *                   Creative Labs, Inc.

 *  Routines for control of EMU10K1 chips / proc interface routines

 *

 *  Copyright (c) by James Courtier-Dutton <James@superbug.co.uk>

 *  	Added EMU 1010 support.

 *

 *  BUGS:

 *    --

 *

 *  TODO:

 *    --

 From ((Rate * 48000 ) / 262144); */

 FIXME - output names are in emufx.c too */

 00 */ "AC97 Left",

 01 */ "AC97 Right",

 02 */ "Optical IEC958 Left",

 03 */ "Optical IEC958 Right",

 04 */ "Center",

 05 */ "LFE",

 06 */ "Headphone Left",

 07 */ "Headphone Right",

 08 */ "Surround Left",

 09 */ "Surround Right",

 10 */ "PCM Capture Left",

 11 */ "PCM Capture Right",

 12 */ "MIC Capture",

 13 */ "AC97 Surround Left",

 14 */ "AC97 Surround Right",

 15 */ "???",

 16 */ "???",

 17 */ "Analog Center",

 18 */ "Analog LFE",

 19 */ "???",

 20 */ "???",

 21 */ "???",

 22 */ "???",

 23 */ "???",

 24 */ "???",

 25 */ "???",

 26 */ "???",

 27 */ "???",

 28 */ "???",

 29 */ "???",

 30 */ "???",

 31 */ "???"

 00 */ "Digital Front Left",

 01 */ "Digital Front Right",

 02 */ "Digital Center",

 03 */ "Digital LEF",

 04 */ "Headphone Left",

 05 */ "Headphone Right",

 06 */ "Digital Rear Left",

 07 */ "Digital Rear Right",

 08 */ "Front Left",

 09 */ "Front Right",

 10 */ "Center",

 11 */ "LFE",

 12 */ "???",

 13 */ "???",

 14 */ "Rear Left",

 15 */ "Rear Right",

 16 */ "AC97 Front Left",

 17 */ "AC97 Front Right",

 18 */ "ADC Capture Left",

 19 */ "ADC Capture Right",

 20 */ "???",

 21 */ "???",

 22 */ "???",

 23 */ "???",

 24 */ "???",

 25 */ "???",

 26 */ "???",

 27 */ "???",

 28 */ "???",

 29 */ "???",

 30 */ "???",

 31 */ "???",

 32 */ "FXBUS2_0",

 33 */ "FXBUS2_1",

 34 */ "FXBUS2_2",

 35 */ "FXBUS2_3",

 36 */ "FXBUS2_4",

 37 */ "FXBUS2_5",

 38 */ "FXBUS2_6",

 39 */ "FXBUS2_7",

 40 */ "FXBUS2_8",

 41 */ "FXBUS2_9",

 42 */ "FXBUS2_10",

 43 */ "FXBUS2_11",

 44 */ "FXBUS2_12",

 45 */ "FXBUS2_13",

 46 */ "FXBUS2_14",

 47 */ "FXBUS2_15",

 48 */ "FXBUS2_16",

 49 */ "FXBUS2_17",

 50 */ "FXBUS2_18",

 51 */ "FXBUS2_19",

 52 */ "FXBUS2_20",

 53 */ "FXBUS2_21",

 54 */ "FXBUS2_22",

 55 */ "FXBUS2_23",

 56 */ "FXBUS2_24",

 57 */ "FXBUS2_25",

 58 */ "FXBUS2_26",

 59 */ "FXBUS2_27",

 60 */ "FXBUS2_28",

 61 */ "FXBUS2_29",

 62 */ "FXBUS2_30",

 63 */ "FXBUS2_31"

 0x%04x: 0x%08x%08x */\n",

 0x%04x: 0x%08x%08x */\n",

| S_IWUSR*/;

| S_IWUSR*/;

| S_IWUSR*/;

| S_IWUSR*/;

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (C) 2000 Takashi Iwai <tiwai@suse.de>

 *

 *  Routines for control of EMU10K1 WaveTable synth

/*

 * create a new hardware dependent device for Emu10k1

 nothing */

 maximum two ports */

 audigy has two external midis */

 FIXED */

 not registered actually */

/*

 *  INIT part

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *                   Creative Labs, Inc.

 *  Routines for control of EMU10K1 chips

 *

 *  BUGS:

 *    --

 *

 *  TODO:

 *    --

 This function is not re-entrant, so protect against it. */

 PTR20, reg 0x3c */

		/* For other chip types the SPI register

 Only 16bit values allowed */

 Set xxx20000 */

 Set xxx1xxxx */

 write post */

 Wait for status bit to return to 0 */

 Timed out */

 Write post */

 The ADC does not support i2c read, so only write is implemented */

 This function is not re-entrant, so protect against it. */

 This controls the I2C connected to the WM8775 ADC Codec */

 write post */

 Send the data to i2c */

 Wait till the transaction ends */

Read back and see if the transaction is successful

 dump_stack(); */

 0x40 upwards are registers. */

 0 to 0x3f are values */

 High bit clocks the value into the fpga. */

 High bit clocks the value into the fpga. */

 0x40 upwards are registers. */

 High bit clocks the value into the fpga. */

/* Each Destination has one and only one Source,

 * but one Source can feed any number of Destinations simultaneously.

 voice interrupt */

 voice interrupt */

 voice interrupt */

 voice interrupt */

 voice interrupt */

 voice interrupt */

 voice interrupt */

 voice interrupt */

/*

 *  convert rate to pitch

 Bail out if no leading "1" */

 Scale 48000 to 0x20002380 */

 Detect leading "1" */

 Should never reach this point */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *                   Creative Labs, Inc.

 *                   Lee Revell <rlrevell@joe-job.com>

 *  Routines for control of EMU10K1 chips - voice manager

 *

 *  Rewrote voice allocator for multichannel support - rlrevell 12/2004

 * 

 *  BUGS:

 *    --

 *

 *  TODO:

 *    --

/* Previously the voice allocator started at 0 every time.  The new voice 

 * allocator uses a round robin scheme.  The next free voice is tracked in 

 * the card record and each allocation begins where the last left off.  The 

 * hardware requires stereo interleaved voices be aligned to an even/odd 

 * boundary.  For multichannel voice allocation we ensure than the block of 

 * voices does not cross the 32 voice boundary.  This simplifies the 

 * multichannel support and ensures we can use a single write to the 

 * (set|clear)_loop_stop registers.  Otherwise (for example) the voices would 

 * get out of sync when pausing/resuming a stream.

 *							--rlrevell

		/*

		dev_dbg(emu->card->dev, "i %d j %d next free %d!\n",

		       i, j, emu->next_free_voice);

 stereo voices must be even/odd */

 dev_dbg(emu->card->dev, "allocated voice %d\n", i); */

		/*

		dev_dbg(emu->card->dev, "voice alloc - %i, %i of %i\n",

		       voice->number, idx-first_voice+1, number);

 free a voice from synth */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *  Routines for control of EMU10K1 MPU-401 in UART mode

/*



 mpu401_clear_rx(emu, midi); */

 try to send some amount of bytes here before interrupts */

 no more data */

/*



 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Francisco Moraes <fmoraes@nc.rr.com>

 *  Driver EMU10K1X chips

 *

 *  Parts of this code were adapted from audigyls.c driver which is

 *  Copyright (c) by James Courtier-Dutton <James@superbug.demon.co.uk>

 *

 *  BUGS:

 *    --

 *

 *  TODO:

 *

 *  Chips (SB0200 model):

 *    - EMU10K1X-DBQ

 *    - STAC 9708T

 module parameters (see "Module Parameters")

 some definitions were borrowed from emu10k1 driver as they seem to be the same

***********************************************************************************************/

 PCI function 0 registers, address = <val> + PCIBASE0						*/

***********************************************************************************************/

 Indexed register set pointer register	*/

 NOTE: The CHANNELNUM and ADDRESS words can	*/

 be modified independently of each other.	*/

 Indexed register set data register		*/

 Global interrupt pending register		*/

 Clear pending interrupts by writing a 1 to	*/

 the relevant bits and zero to the other bits	*/

 MIDI UART transmit buffer empty		*/

 MIDI UART receive buffer empty		*/

 Channel 0 loop                               */

 Channel 0 half loop                          */

 Channel capture loop                         */

 Channel capture half loop                    */

 Interrupt enable register			*/

 Enable MIDI transmit-buffer-empty interrupts	*/

 Enable MIDI receive-buffer-empty interrupts	*/

 Channel 0 loop                               */

 Channel 0 half loop                          */

 Channel capture loop                         */

 Channel capture half loop                    */

 Hardware config register			*/

 1 = Cancel bustmaster accesses to soundcache */

 NOTE: This should generally never be used.  	*/

 0 = CODECs transmit zero-valued samples	*/

 Should be set to 1 when the EMU10K1 is	*/

 completely initialized.			*/

 Defaults: 00001080-Analog, 00001000-SPDIF.   */

 AC97 register set data register (16 bit)	*/

 AC97 register set address register (8 bit)	*/

*******************************************************************************************************/

 Emu10k1x pointer-offset register set, accessed through the PTR and DATA registers			*/

*******************************************************************************************************/

 Base DMA address of a list of pointers to each period/size */

						/* One list entry: 4 bytes for DMA address, 

						 * 4 bytes for period_size << 16.

						 * One list entry is 8 bytes long.

						 * One list entry for each period in the buffer.

 Size of list in bytes << 16. E.g. 8 periods -> 0x00380000  */

 Pointer to the current period being played */

 Playback DMA address */

 Playback period size */

 Playback period pointer. Sample currently in DAC */

 Only one capture channel supported */

 Capture DMA address */

 Capture buffer size */

 Capture buffer pointer. Sample currently in ADC */

 From 0x20 - 0x3f, last samples played on each channel */

 Trigger channel playback                     */

 Trigger channel 0                            */

 Trigger channel 1                            */

 Trigger channel 2                            */

 Trigger capture channel                      */

 Setup sound routing ?                        */

 SPDIF output Channel Status 0 register	*/

 SPDIF output Channel Status 1 register	*/

 SPDIF output Channel Status 2 register	*/

 Clock accuracy				*/

 1000 parts per million			*/

 50 parts per million				*/

 Variable accuracy				*/

 Sample rate					*/

 44.1kHz sample rate				*/

 48kHz sample rate				*/

 32kHz sample rate				*/

 Channel number				*/

 Unspecified channel number			*/

 Left channel					*/

 Right channel				*/

 Source number				*/

 Unspecified source number			*/

 Originality flag (see IEC-958 spec)		*/

 Category code (see IEC-958 spec)		*/

 Mode (see IEC-958 spec)			*/

 Emphasis					*/

 No emphasis					*/

 50/15 usec 2 channel				*/

 Copyright asserted flag -- do not modify	*/

 0 = Digital audio, 1 = not audio		*/

 0 = Consumer (IEC-958), 1 = pro (AES3-1992)	*/

 Enables SPDIF or Analogue outputs 0-Analogue, 0x700-SPDIF */

 This is the MPU port on the card                      					*/

 From 0x50 - 0x5f, last samples captured */

/*

 * The hardware has 3 channels for playback and 1 for capture.

 *  - channel 0 is the front channel

 *  - channel 1 is the rear channel

 *  - channel 2 is the center/lfe channel

 * Volume is controlled by the AC97 for the front and rear channels by

 * the PCM Playback Volume, Sigmatel Surround Playback Volume and 

 * Surround Playback Volume. The Sigmatel 4-Speaker Stereo switch affects

 * the front/rear channel mixing in the REAR OUT jack. When using the

 * 4-Speaker Stereo, both front and rear channels will be mixed in the

 * REAR OUT.

 * The center/lfe channel has no volume control and cannot be muted during

 * playback.

 definition of the chip-specific record

 chip revision */

 serial number */

 subsystem id */

 SPDIF out setup

 hardware definition */

 open callback */

 close callback */

 hw_params callback */

 hw_free callback */

 prepare callback */

 trigger callback */

	/*

	dev_dbg(emu->card->dev,

		"trigger - emu10k1x = 0x%x, cmd = %i, pointer = %d\n",

		(int)emu, cmd, (int)substream->ops->pointer(substream));

 pointer callback */

 operators */

 open_capture callback */

 close callback */

 hw_params callback */

 hw_free callback */

 prepare capture callback */

 buffer size in bytes

 trigger_capture callback */

 pointer_capture callback */

 we don't need VRA */

 disable interrupts

 disable audio

 capture interrupt

 acknowledge the interrupt if necessary

 dev_dbg(chip->card->dev, "interrupt %08x\n", status); */

 read revision & serial */

	/*

	 *  Init to 0x02109204 :

	 *  Clock accuracy    = 0     (1000ppm)

	 *  Sample Rate       = 2     (48kHz)

	 *  Audio Channel     = 1     (Left of 2)

	 *  Source Number     = 0     (Unspecified)

	 *  Generation Status = 1     (Original for Cat Code 12)

	 *  Cat Code          = 12    (Digital Signal Mixer)

	 *  Mode              = 0     (Mode 0)

	 *  Emphasis          = 0     (None)

	 *  CP                = 1     (Copyright unasserted)

	 *  AN                = 0     (Audio data)

	 *  P                 = 0     (Consumer)

 disable SPDIF

 routing

 analog mode

 enable spdif output

 disable spdif output

/*



 mpu401_clear_rx(emu, midi); */

 try to send some amount of bytes here before interrupts */

 no more data */

/*



 PCI IDs

 Dell OEM version (EMU10K1) */

 pci_driver definition

