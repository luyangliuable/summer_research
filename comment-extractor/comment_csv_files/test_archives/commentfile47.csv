 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2006, 2007 Eugene Konev <ejka@openwrt.org>

 *

 * Parts of the VLYNQ specification can be found here:

 * http://www.ti.com/litv/pdf/sprue36a

 Check the VLYNQ link status with a given device */

 Wait for the devices to finish resetting */

 Remove reset bit */

 Give some time for the devices to settle */

 Clear local and remote error bits */

 Now setup interrupts */

/*

 * A VLYNQ remote device can clock the VLYNQ bus master

 * using a dedicated clock line. In that case, both the

 * remove device and the bus master should have the same

 * serial clock dividers configured. Iterate through the

 * 8 possible dividers until we actually link with the

 * device.

/*

 * A VLYNQ remote device can be clocked by the VLYNQ bus

 * master using a dedicated clock line. In that case, only

 * the bus master configures the serial clock divider.

 * Iterate through the 8 possible dividers until we

 * actually get a link with the device.

/*

 * When using external clocking method, serial clock

 * is supplied by an external oscillator, therefore we

 * should mask the local clock bit in the clock control

 * register for both the bus master and the remote device.

		/* When the device is brought from reset it should have clock

		 * generation negotiated by hardware.

		 * Check which device is generating clocks and perform setup

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Force-disables a regulator to power down a device

 *

 * Michael Klein <michael@fossekall.de>

 *

 * Copyright (C) 2020 Michael Klein

 *

 * Based on the gpio-poweroff driver.

/*

 * Hold configuration here, cannot be more than one instance of the driver

 * since pm_power_off itself is global.

 give it some time */

 If a pm_power_off function has already been added, leave it alone */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * QNAP Turbo NAS Board power off. Can also be used on Synology devices.

 *

 * Copyright (C) 2012 Andrew Lunn <andrew@lunn.ch>

 *

 * Based on the code from:

 *

 * Copyright (C) 2009  Martin Michlmayr <tbm@cyrius.com>

 * Copyright (C) 2008  Byron Bradley <byron.bbradley@gmail.com>

 hijack UART1 and reset into sane state */

 send the power-off command to PIC */

 We need to know tclk in order to calculate the UART divisor */

 Check that nothing else has already setup a handler */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2021 Emil Renner Berthing

 give it a little time */

 sentinel */ }

/*

 * Atmel AT91 SAM9 & SAMA5 SoCs reset code

 *

 * Copyright (C) 2007 Atmel Corporation.

 * Copyright (C) BitBox Ltd 2010

 * Copyright (C) 2011 Jean-Christophe PLAGNIOL-VILLARD <plagnioj@jcosoft.com>

 * Copyright (C) 2014 Free Electrons

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 Reset Controller Control Register */

 Processor Reset */

 Peripheral Reset */

 External Reset */

 KEY Password */

 Reset Controller Status Register */

 User Reset Status */

 Reset Type */

 NRST Pin Level */

 Software Reset Command in Progress */

 Reset Controller Mode Register */

 User Reset Enable */

 User Reset Asynchronous Control */

 User Reset Interrupt Enable */

 External Reset Length */

/*

* unless the SDRAM is cleanly shutdown before we hit the

* reset register it can be left driving the data bus and

* killing the chance of a subsequent boot from NAND

 Align to cache lines */

 Disable SDRAM0 accesses */

 Power down SDRAM0 */

 Disable SDRAM1 accesses */

 Power down SDRAM1 */

 Reset CPU */

 sentinel */ }

 sentinel */ }

 we need to shutdown the ddr controller, so get ramc base */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2017-18 Linaro Limited

 SPDX-License-Identifier: GPL-2.0-only

/*

 * HiSilicon SoC reset code

 *

 * Copyright (c) 2014 HiSilicon Ltd.

 * Copyright (c) 2014 Linaro Ltd.

 *

 * Author: Haojian Zhuang <haojian.zhuang@linaro.org>

 SPDX-License-Identifier: GPL-2.0-only

/* Copyright (c) 2013, The Linux Foundation. All rights reserved.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2014 Linaro Ltd.

 *

 * Author: Linus Walleij <linus.walleij@linaro.org>

 Magic unlocking token used on all Versatile boards */

/*

 * We detect the different syscon types from the compatible strings.

 Pointer to the system controller */

 Unlock the reset register */

 Then hit reset on the different machines */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Reset driver for Axxia devices

 *

 * Copyright (C) 2014 LSI

 Access Key (0xab) */

 Select internal boot from 0xffff0000 */

 Assert ResetReadDone (to avoid hanging in boot ROM) */

 Assert chip reset */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2016, Fuzhou Rockchip Electronics Co., Ltd

/**

 * reboot_mode_register - register a reboot mode driver

 * @reboot: reboot mode driver

 *

 * Returns: 0 on success or a negative error code on failure.

/**

 * reboot_mode_unregister - unregister a reboot mode driver

 * @reboot: reboot mode driver

/**

 * devm_reboot_mode_register() - resource managed reboot_mode_register()

 * @dev: device to associate this resource with

 * @reboot: reboot mode driver

 *

 * Returns: 0 on success or a negative error code on failure.

/**

 * devm_reboot_mode_unregister() - resource managed reboot_mode_unregister()

 * @dev: device to associate this resource with

 * @reboot: reboot mode driver

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Power off by restarting and let u-boot keep hold of the machine

 * until the user presses a button for example.

 *

 * Andrew Lunn <andrew@lunn.ch>

 *

 * Copyright (C) 2012 Andrew Lunn

 If a pm_power_off function has already been added, leave it alone */

 SPDX-License-Identifier: GPL-2.0

/*

 * LinkStation power off restart driver

 * Copyright (C) 2020 Daniel Gonz√°lez Cabanelas <dgcbueu@gmail.com>

 Defines from the eth phy Marvell driver */

 Force manual LED2 control to let INTn work */

 Set the LED[2]/INTn pin to the required state */

 Clear interrupts to ensure INTn won't be holded in high state */

		/* If WOL was enabled and a magic packet was received before powering

		 * off, we won't be able to wake up by sending another magic packet.

		 * Clear WOL status.

 Set the LED[2].0 Polarity bit to the required state */

		/* If WOL was enabled and a magic packet was received before powering

		 * off, we won't be able to wake up by sending another magic packet.

		 * Clear WOL status.

 SPDX-License-Identifier: (GPL-2.0 OR MIT)

/*

 * Microsemi MIPS SoC reset driver

 *

 * License: Dual MIT/GPL

 * Copyright (c) 2017 Microsemi Corporation

 Make sure the core is not protected from reset */

 Make the SI back to boot mode */

 n/a */

sentinel*/ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Generic Syscon Reboot Driver

 *

 * Copyright (c) 2013, Applied Micro Circuits Corporation

 * Author: Feng Kan <fkan@apm.com>

 Issue the reboot */

 support old binding */

 support value without mask*/

 SPDX-License-Identifier: GPL-2.0

/*

 * Renesas R-Mobile Reset Driver

 *

 * Copyright (C) 2014 Glider bvba

 SYSC Register Bank 2 */

 Reset Control Register 2 */

 Reset Control Register 2 */

 Soft power-on reset */

 Let's assume we have acquired the HPB semaphore */

 sentinel */ }

 SPDX-License-Identifier: (GPL-2.0)

/*

 * oxnas SoC reset driver

 * based on:

 * Microsemi MIPS SoC reset driver

 * and ox820_assert_system_reset() written by Ma Hajun <mahaijuns@gmail.com>

 *

 * Copyright (c) 2013 Ma Hajun <mahaijuns@gmail.com>

 * Copyright (c) 2017 Microsemi Corporation

 * Copyright (c) 2020 Daniel Golle <daniel@makrotopia.org>

 bit numbers of reset control register */

 bit numbers of clock control register */

 Regmap offsets */

	/*

	 * Assert reset to cores as per power on defaults

	 * Don't touch the DDR interface as things will come to an impromptu

	 * stop NB Possibly should be asserting reset for PLLB, but there are

	 * timing concerns here according to the docs

 Release reset to cores as per power on defaults */

	/*

	 * Disable clocks to cores as per power-on defaults - must leave DDR

	 * related clocks enabled otherwise we'll stop rather abruptly.

 Enable clocks to cores as per power-on defaults */

 Set sys-control pin mux'ing as per power-on defaults */

	/*

	 * No need to save any state, as the ROM loader can determine whether

	 * reset is due to power cycling or programatic action, just hit the

	 * (self-clearing) CPU reset bit of the block reset register

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Generic Syscon Poweroff Driver

 *

 * Copyright (c) 2015, National Instruments Corp.

 * Author: Moritz Fischer <moritz.fischer@ettus.com>

 Issue the poweroff */

 support old binding */

 support value without mask*/

/*

 * Copyright (C) 2016 Broadcom

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

	/*

	 * A soft reset is triggered by writing a 0 to bit 0 of the soft reset

	 * register. To write to that register we must first write the password

	 * and the enable bit in the write access enable register.

/*

 * Copyright (C) 2013 Broadcom Corporation

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * LTC2952 (PowerPath) driver

 *

 * Copyright (C) 2014, Xsens Technologies BV <info@xsens.com>

 * Maintainer: Ren√© Moll <linux@r-moll.nl>

 *

 * ----------------------------------------

 * - Description

 * ----------------------------------------

 *

 * This driver is to be used with an external PowerPath Controller (LTC2952).

 * Its function is to determine when a external shut down is triggered

 * and react by properly shutting down the system.

 *

 * This driver expects a device tree with a ltc2952 entry for pin mapping.

 *

 * ----------------------------------------

 * - GPIO

 * ----------------------------------------

 *

 * The following GPIOs are used:

 * - trigger (input)

 *     A level change indicates the shut-down trigger. If it's state reverts

 *     within the time-out defined by trigger_delay, the shut down is not

 *     executed. If no pin is assigned to this input, the driver will start the

 *     watchdog toggle immediately. The chip will only power off the system if

 *     it is requested to do so through the kill line.

 *

 * - watchdog (output)

 *     Once a shut down is triggered, the driver will toggle this signal,

 *     with an internal (wde_interval) to stall the hardware shut down.

 *

 * - kill (output)

 *     The last action during shut down is triggering this signalling, such

 *     that the PowerPath Control will power down the hardware.

 *

 * ----------------------------------------

 * - Interrupts

 * ----------------------------------------

 *

 * The driver requires a non-shared, edge-triggered interrupt on the trigger

 * GPIO.

/*

 * This global variable is only needed for pm_power_off. We should

 * remove it entirely once we don't need the global state anymore.

/**

 * ltc2952_poweroff_timer_wde - Timer callback

 * Toggles the watchdog reset signal each wde_interval

 *

 * @timer: corresponding timer

 *

 * Returns HRTIMER_RESTART for an infinite loop which will only stop when the

 * machine actually shuts down

/**

 * ltc2952_poweroff_handler - Interrupt handler

 * Triggered each time the trigger signal changes state and (de)activates a

 * time-out (timer_trigger). Once the time-out is actually reached the shut

 * down is executed.

 *

 * @irq: IRQ number

 * @dev_id: pointer to the main data structure

 shutdown is already triggered, nothing to do any more */

		/*

		 * It's not a problem if the trigger gpio isn't available, but

		 * it is worth a warning if its use was defined in the device

		 * tree.

		/*

		 * Some things may have happened:

		 * - No trigger input was defined

		 * - Claiming the GPIO failed

		 * - We could not map to an IRQ

		 * - We couldn't register an interrupt handler

		 *

		 * None of these really are problems, but all of them

		 * disqualify the push button from controlling the power.

		 *

		 * It is therefore important to note that if the ltc2952

		 * detects a button press for long enough, it will still start

		 * its own powerdown window and cut the power on us if we don't

		 * start the watchdog trigger.

 TODO: remove ltc2952_data */

/*

 * Atmel AT91 SAM9 SoCs reset code

 *

 * Copyright (C) 2007 Atmel Corporation.

 * Copyright (C) 2011 Jean-Christophe PLAGNIOL-VILLARD <plagnioj@jcrosoft.com>

 * Copyright (C) 2014 Free Electrons

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 Shut Down Control Register */

 Shut Down command */

 KEY Password */

 Shut Down Mode Register */

 Wake-up 0 Mode Selection */

 Maximum Counter On Wake Up 0 */

 Counter On Wake Up 0 */

 Real Time Timer Wake-up Enable */

 Real Time Clock Wake-up Enable */

 Shut Down Status Register */

 Wake-up 0 Status */

 Real-time Timer Wake-up */

 Real-time Clock Wake-up [SAM9RL] */

 Simple power-on, just bail out */

 Align to cache lines */

 Ensure AT91_SHDW_CR is in the TLB by reading it */

 Power down SDRAM0 */

 Shutdown CPU */

sentinel*/ }

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2018 Spreadtrum Communications Inc.

 * Copyright (C) 2018 Linaro Ltd.

/*

 * On Spreadtrum platform, we need power off system through external SC27xx

 * series PMICs, and it is one similar SPI bus mapped by regmap to access PMIC,

 * which is not fast io access.

 *

 * So before stopping other cores, we need release other cores' resource by

 * taking cpus down to avoid racing regmap or spi mutex lock when poweroff

 * system through PMIC.

 Disable the external subsys connection's power firstly */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Toggles a GPIO pin to restart a device

 *

 * Copyright (C) 2014 Google, Inc.

 *

 * Based on the gpio-poweroff driver.

 drive it active, also inactive->active edge */

 drive inactive, also active->inactive edge */

 drive it active, also inactive->active edge */

 give it some time */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (c) Vaisala Oyj. All rights reserved.

 SPDX-License-Identifier: GPL-2.0

/*

 * Gemini power management controller

 * Copyright (C) 2017 Linus Walleij <linus.walleij@linaro.org>

 *

 * Inspired by code from the SL3516 board support by Jason Lee

 * Inspired by code from Janos Laube <janos.dev@gmail.com>

 ACK the IRQ */

		/*

		 * We do not yet have a driver for the infrared

		 * controller so it can cause spurious poweroff

		 * events. Ignore those for now.

 This callback needs this static local as it has void as argument */

	/*

	 * Enable the power controller. This is crucial on Gemini

	 * systems: if this is not done, pressing the power button

	 * will result in unconditional poweroff without any warning.

	 * This makes the kernel handle the poweroff.

 Clear the IRQ */

 Wait for this to clear */

 Clear the IRQ again */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2016 Imagination Technologies

 * Author: Paul Burton <paul.burton@mips.com>

 Ensure the power button status is clear */

 Enable entry to suspend */

 If the special cycle occurs too soon this doesn't work... */

	/*

	 * The PIIX4 will enter the suspend state only after seeing a special

	 * cycle with the correct magic data on the PCI bus. Generate that

	 * cycle now.

 Give the system some time to power down, then error */

 Request access to the PIIX4 PM IO registers */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Copyright (C) 2012 ARM Limited

 SPDX-License-Identifier: GPL-2.0-only

/*

 * TI keystone reboot driver

 *

 * Copyright (C) 2014 Texas Instruments Incorporated. https://www.ti.com/

 *

 * Author: Ivan Khoronzhuk <ivan.khoronzhuk@ti.com>

/**

 * rsctrl_enable_rspll_write - enable access to RSCTRL, RSCFG

 * To be able to access to RSCTRL, RSCFG registers

 * we have to write a key before

 enable write access to RSTCTRL */

 reset the SOC */

 get regmaps */

 set soft/hard reset */

 disable a reset isolation for all module clocks */

 enable a reset for watchdogs from wdt-list */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Toggles a GPIO pin to power down a device

 *

 * Jamie Lentin <jm@lentin.co.uk>

 * Andrew Lunn <andrew@lunn.ch>

 *

 * Copyright (C) 2012 Jamie Lentin

/*

 * Hold configuration here, cannot be more than one instance of the driver

 * since pm_power_off itself is global.

 drive it active, also inactive->active edge */

 drive inactive, also active->inactive edge */

 drive it active, also inactive->active edge */

 give it some time */

 If a pm_power_off function has already been added, leave it alone */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2016, Fuzhou Rockchip Electronics Co., Ltd

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * AppliedMicro X-Gene SoC Reboot Driver

 *

 * Copyright (c) 2013, Applied Micro Circuits Corporation

 * Author: Feng Kan <fkan@apm.com>

 * Author: Loc Ho <lho@apm.com>

 *

 * This driver provides system reboot functionality for APM X-Gene SoC.

 * For system shutdown, this is board specify. If a board designer

 * implements GPIO shutdown, use the gpio-poweroff.c driver.

 Issue the reboot */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Power off driver for ams AS3722 device.

 *

 * Copyright (c) 2013, NVIDIA CORPORATION.  All rights reserved.

 *

 * Author: Laxman Dewangan <ldewangan@nvidia.com>

 SPDX-License-Identifier: GPL-2.0+

/*

 * Poweroff & reset driver for Actions Semi ATC260x PMICs

 *

 * Copyright (c) 2020 Cristian Ciocaltea <cristian.ciocaltea@gmail.com>

 Global variable needed only for pm_power_off */

 S4-Deep Sleep Mode is NOT available for WALL/USB power */

 Update wakeup sources */

 Update power mode */

 Trigger poweroff / restart sequence */

 Wait for trigger completion */

 S4-Deep Sleep Mode is NOT available for WALL/USB power */

 Update wakeup sources */

 Update power mode */

 Trigger poweroff / restart sequence */

 Wait for trigger completion */

	/*

	 * Delay transition from S2/S3 to S1 in order to avoid

	 * DDR init failure in Bootloader.

 Set wakeup sources */

 Set wakeup sources */

 SPDX-License-Identifier: GPL-2.0

/*

 * Power off through MediaTek PMIC

 *

 * Copyright (C) 2018 MediaTek Inc.

 *

 * Author: Sean Wang <sean.wang@mediatek.com>

 *

 Wait some time until system down, otherwise, notice with a warn */

/*

 * Atmel SAMA5D2-Compatible Shutdown Controller (SHDWC) driver.

 * Found on some SoCs as the sama5d2 (obviously).

 *

 * Copyright (C) 2015 Atmel Corporation,

 *                    Nicolas Ferre <nicolas.ferre@atmel.com>

 *

 * Evolved from driver at91-poweroff.c.

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 *

 * TODO:

 * - addition to status of other wake-up inputs [1 - 15]

 * - Analog Comparator wake-up alarm

 * - Serial RX wake-up alarm

 * - low power debouncer

 Shut Down Control Register */

 Shut Down command */

 KEY Password */

 Shut Down Mode Register */

 Shut Down Status Register */

 Shutdown Wake-up Inputs Register */

/*

 * Hold configuration here, cannot be more than one instance of the driver

 * since pm_power_off itself is global.

 Simple power-on, just bail out */

 Align to cache lines */

 Ensure AT91_SHDW_CR is in the TLB by reading it */

 Power down SDRAM0 */

 Switch the master clock source to slow clock. */

 Wait for clock switch. */

 Shutdown CPU */

sentinel*/

 Sentinel. */ }

 Reset values to disable wake-up features  */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2014 STMicroelectronics

 *

 * Power off Restart driver, used in STMicroelectronics devices.

 *

 * Author: Christophe Kerello <christophe.kerello@st.com>

 syscfg used for reset */

 syscfg used for unmask the reset */

 STiH407 */

 reset syscfg updated */

 unmask the reset */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Nokia RX-51 battery driver

 *

 * Copyright (C) 2012  Pali Roh√°r <pali@kernel.org>

/*

 * Read ADCIN channel value, code copied from maemo kernel

/*

 * Read ADCIN channel 12 (voltage) and convert RAW value to micro voltage

 * This conversion formula was extracted from maemo program bsi-read

/*

 * Temperature look-up tables

 * TEMP = (1/(t1 + 1/298) - 273.15)

 * Where t1 = (1/B) * ln((RAW_ADC_U * 2.5)/(R * I * 255))

 * Formula is based on experimental data, RX-51 CAL data, maemo program bme

 * and formula from da9052 driver with values R = 100, B = 3380, I = 0.00671

/*

 * Table1 (temperature for first 25 RAW values)

 * Usage: TEMP = rx51_temp_table1[RAW]

 *   RAW is between 1 and 24

 *   TEMP is between 201 C and 55 C

/*

 * Table2 (lowest RAW value for temperature)

 * Usage: RAW = rx51_temp_table2[TEMP-rx51_temp_table2_first]

 *   TEMP is between 53 C and -32 C

 *   RAW is between 25 and 993

/*

 * Read ADCIN channel 0 (battery temp) and convert value to tenths of Celsius

 * Use Temperature look-up tables for conversation

 Zero and negative values are undefined */

 ADC channels are 10 bit, higher value are undefined */

 First check for temperature in first direct table */

 Binary search RAW value in second inverse table */

/*

 * Read ADCIN channel 4 (BSI) and convert RAW value to micro Ah

 * This conversion formula was extracted from maemo program bsi-read

/*

 * Return power_supply property

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2018 Spreadtrum Communications Inc.

 PMIC global control registers definition */

 FGU registers definition */

 micro Ohms */

/*

 * struct sc27xx_fgu_data: describe the FGU device

 * @regmap: regmap for register access

 * @dev: platform device

 * @battery: battery power supply

 * @base: the base offset for the controller

 * @lock: protect the structure

 * @gpiod: GPIO for battery detection

 * @channel: IIO channel to get battery temperature

 * @charge_chan: IIO channel to get charge voltage

 * @internal_resist: the battery internal resistance in mOhm

 * @total_cap: the total capacity of the battery in mAh

 * @init_cap: the initial capacity of the battery in mAh

 * @alarm_cap: the alarm capacity

 * @init_clbcnt: the initial coulomb counter

 * @max_volt: the maximum constant input voltage in millivolt

 * @min_volt: the minimum drained battery voltage in microvolt

 * @boot_volt: the voltage measured during boot in microvolt

 * @table_len: the capacity table length

 * @resist_table_len: the resistance table length

 * @cur_1000ma_adc: ADC value corresponding to 1000 mA

 * @vol_1000mv_adc: ADC value corresponding to 1000 mV

 * @calib_resist: the real resistance of coulomb counter chip in uOhm

 * @cap_table: capacity table with corresponding ocv

 * @resist_table: resistance percent table with corresponding temperature

	/*

	 * We use low 4 bits to save the last battery capacity and high 12 bits

	 * to save the system boot mode.

	/*

	 * When FGU has been powered down, the user area registers became

	 * default value (0xffff), which can be used to valid if the system is

	 * first power on or not.

	/*

	 * Since the user area registers are put on power always-on region,

	 * then these registers changing time will be a little long. Thus

	 * here we should delay 200us to wait until values are updated

	 * successfully according to the datasheet.

	/*

	 * Since the user area registers are put on power always-on region,

	 * then these registers changing time will be a little long. Thus

	 * here we should delay 200us to wait until values are updated

	 * successfully according to the datasheet.

	/*

	 * According to the datasheet, we should set the USER_AREA_CLEAR to 0 to

	 * make the user area data available, otherwise we can not save the user

	 * area data.

	/*

	 * Since the user area registers are put on power always-on region,

	 * then these registers changing time will be a little long. Thus

	 * here we should delay 200us to wait until values are updated

	 * successfully according to the datasheet.

	/*

	 * Since the user area registers are put on power always-on region,

	 * then these registers changing time will be a little long. Thus

	 * here we should delay 200us to wait until values are updated

	 * successfully according to the datasheet.

	/*

	 * According to the datasheet, we should set the USER_AREA_CLEAR to 0 to

	 * make the user area data available, otherwise we can not save the user

	 * area data.

/*

 * When system boots on, we can not read battery capacity from coulomb

 * registers, since now the coulomb registers are invalid. So we should

 * calculate the battery open circuit voltage, and get current battery

 * capacity according to the capacity table.

	/*

	 * If system is not the first power on, we should use the last saved

	 * battery capacity as the initial battery capacity. Otherwise we should

	 * re-calculate the initial battery capacity.

	/*

	 * After system booting on, the SC27XX_FGU_CLBCNT_QMAXL register saved

	 * the first sampled open circuit current.

	/*

	 * Should get the OCV from SC27XX_FGU_POCV register at the system

	 * beginning. It is ADC values reading from registers which need to

	 * convert the corresponding voltage.

	/*

	 * Parse the capacity table to look up the correct capacity percent

	 * according to current battery's corresponding OCV values.

	/*

	 * It is ADC values reading from registers which need to convert to

	 * corresponding voltage values.

	/*

	 * It is ADC values reading from registers which need to convert to

	 * corresponding current values.

 Get current coulomb counters firstly */

	/*

	 * Convert coulomb counter to delta capacity (mAh), and set multiplier

	 * as 10 to improve the precision.

	/*

	 * Convert to capacity percent of the battery total capacity,

	 * and multiplier is 100 too.

 Calibrate the battery capacity in a normal range. */

	/*

	 * It is ADC values reading from registers which need to convert to

	 * corresponding voltage values.

	/*

	 * It is ADC values reading from registers which need to convert to

	 * corresponding current values.

 Return the battery OCV in micro volts. */

	/*

	 * If we are in charging mode, then we do not need to calibrate the

	 * lower capacity.

		/*

		 * If current OCV value is larger than the max OCV value in

		 * OCV table, or the current capacity is larger than 100,

		 * we should force the inititial capacity to 100.

		/*

		 * If current OCV value is leass than the minimum OCV value in

		 * OCV table, we should force the inititial capacity to 0.

		/*

		 * If current OCV value is not matchable with current capacity,

		 * we should re-calculate current capacity by looking up the

		 * OCV table.

		/*

		 * If current OCV value is less than the low alarm voltage, but

		 * current capacity is larger than the alarm capacity, we should

		 * adjust the inititial capacity to alarm capacity.

			/*

			 * If current capacity is equal with 0 or less than 0

			 * (some error occurs), we should adjust inititial

			 * capacity to the capacity corresponding to current OCV

			 * value.

		/*

		 * After adjusting the battery capacity, we should set the

		 * lowest alarm voltage instead.

	/*

	 * When low overload voltage interrupt happens, we should calibrate the

	 * battery capacity in lower voltage stage.

	/*

	 * Get current capacity (mAh) = battery total capacity (mAh) *

	 * current capacity percent (capacity / 100).

	/*

	 * Convert current capacity (mAh) to coulomb counter according to the

	 * formula: 1 mAh =3.6 coulomb.

	/*

	 * Get the ADC value corresponding to 4200 mV from eFuse controller

	 * according to below formula. Then convert to ADC values corresponding

	 * to 1000 mV and 1000 mA.

	/*

	 * For SC27XX fuel gauge device, we only use one ocv-capacity

	 * table in normal temperature 20 Celsius.

 Enable the FGU module */

 Enable the FGU RTC clock to make it work */

	/*

	 * Set the voltage low overload threshold, which means when the battery

	 * voltage is lower than this threshold, the controller will generate

	 * one interrupt to notify.

	/*

	 * Set the coulomb counter delta threshold, that means when the coulomb

	 * counter change is multiples of the delta threshold, the controller

	 * will generate one interrupt to notify the users to update the battery

	 * capacity. Now we set the delta threshold as a counter value of 1%

	 * capacity.

	/*

	 * Get the boot battery capacity when system powers on, which is used to

	 * initialize the coulomb counter. After that, we can read the coulomb

	 * counter to measure the battery capacity.

	/*

	 * Convert battery capacity to the corresponding initial coulomb counter

	 * and set into coulomb counter registers.

	/*

	 * If we are charging, then no need to enable the FGU interrupts to

	 * adjust the battery capacity.

	/*

	 * If current OCV is less than the minimum voltage, we should enable the

	 * coulomb counter threshold interrupt to notify events to adjust the

	 * battery capacity.

 SPDX-License-Identifier: GPL-2.0



  max17040_battery.c

  fuel-gauge systems for lithium-ion (Li+) batteries



  Copyright (C) 2009 Samsung Electronics

  Minkyu Kang <mk7.kang@samsung.com>

 values that differ by chip_id */

 battery capacity */

 Low alert threshold from 32% to 1% of the State of Charge */

 some devices return twice the capacity */

 higher 8 bits for 17043+, 16 bits for 17040,41 */

 store SOC to check changes */

 check changes and send uevent */

 Returns true if alert cause was SOC change, not low SOC */

 this alert was caused by low soc

 soc change bit -- deassert to mark as handled

 read registers */

 send uevent */

 reset alert bit */

 alert threshold can be programmed from 1% up to 16/32% */

 check interrupt */

 soc alerts negate the need for polling */

 disable soc alert to prevent wakeup

 CONFIG_PM_SLEEP */

 sentinel */ }

 sentinel */ },

/*

 * Copyright ¬© 2007 Anton Vorontsov <cbou@mail.ru>

 * Copyright ¬© 2007 Eugeny Boger <eugenyboger@dgap.mipt.ru>

 *

 * Author: Eugeny Boger <eugenyboger@dgap.mipt.ru>

 *

 * Use consistent with the GNU GPL is permitted,

 * provided that this copyright notice is

 * preserved in its entirety in all copies and derived works.

 nice, we explicitly asked to report this battery. */

 try guess battery with more capacity */

 give up, choice any */

 give up, try the last if any */

 if battery can't report average value, use momentary */

 if battery can't report this property, use design value */

 if battery can't report this property, use design value */

 if battery can't report average value, use momentary */

 if battery can't report this property, use design value */

 if battery can't report average value, use momentary */

 if battery can't report this property, use design value */

 status */

 ac line status */

 battery life (i.e. capacity, in percents) */

 try calculate using energy */

 if failed try calculate using charge instead */

 charging status */

 time */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Backup battery driver for Wolfson Microelectronics wm831x PMICs

 *

 * Copyright 2009 Wolfson Microelectronics PLC.

/*********************************************************************

 *		Backup supply properties

/*********************************************************************

 *		Initialisation

	/* We ignore configuration failures since we can still read

	 * back the status without enabling the charger (which may

	 * already be enabled anyway).

 SPDX-License-Identifier: GPL-2.0-only

/*

 * I2C client/driver for the Maxim/Dallas DS2782 Stand-Alone Fuel Gauge IC

 *

 * Copyright (C) 2009 Bluewater Systems Ltd

 *

 * Author: Ryan Mallon

 *

 * DS2786 added by Yulia Vilensky <vilensky@compulab.co.il>

 *

 * UEvent sending added by Evgeny Romanov <romanov@neurosoft.ru>

 Remaining active relative capacity */

 EEPROM Block */

 Sense resistor value */

 Current unit measurement in uA for a 1 milli-ohm sense resistor */

 Remaining active relative capacity */

 State Of Charge */

	/*

	 * Temperature is measured in units of 0.125 degrees celcius, the

	 * power_supply class measures temperature in tenths of degrees

	 * celsius. The temperature value is stored as a 10 bit number, plus

	 * sign in the upper bits of a 16 bit register.

	/*

	 * The units of measurement for current are dependent on the value of

	 * the sense resistor.

	/*

	 * Voltage is measured in units of 4.88mV. The voltage is stored as

	 * a 10-bit number plus sign, in the upper bits of a 16-bit register

	/*

	 * Voltage is measured in units of 1.22mV. The voltage is stored as

	 * a 12-bit number plus sign, in the upper bits of a 16-bit register

 Relative capacity is displayed with resolution 0.5 % */

 CONFIG_PM_SLEEP */

	/*

	 * ds2786 should have the sense resistor value set

	 * in the platform data

 Get an ID for this battery */

 SPDX-License-Identifier: GPL-2.0

/*

 * Power supply driver for the goldfish emulator

 *

 * Copyright (C) 2008 Google, Inc.

 * Copyright (C) 2012 Intel, Inc.

 * Copyright (C) 2013 Intel, Inc.

 * Author: Mike Lockwood <lockwood@android.com>

 status register */

 set this to enable IRQ */

 read status flags, which will clear the interrupt */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * axp288_fuel_gauge.c - Xpower AXP288 PMIC Fuel Gauge Driver

 *

 * Copyright (C) 2020-2021 Andrejus Basovas <xxx@yyy.tld>

 * Copyright (C) 2016-2021 Hans de Goede <hdegoede@redhat.com>

 * Copyright (C) 2014 Intel Corporation

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 4 bits */

 200mA */

 200mA */

 20% of CC */

 2 bits */

 4.10V */

 4.15V */

 4.20V */

 4.35V */

 1.456mAhr */

 1.456mAhr */

 5% tp 20% */

 15 perc */

 0% to 15% */

 14 perc */

 4 perc */

 0 perc */

 1.1mV per LSB expressed in uV */

 properties converted to uV, uA */

 zero until following fields are valid */

 in jiffies */

 12-bit data values have upper 8 bits in buf[0], lower 4 in buf[1] */

 Report full if Vbus is valid and the reported capacity is 100% */

	/*

	 * Sometimes the charger turns itself off before fg-res reaches 100%.

	 * When this happens the AXP288 reports a not-charging status and

	 * 0 mA discharge current.

 Force updating of the cached registers */

 Force updating of the cached registers */

/*

 * Some devices have no battery (HDMI sticks) and the axp288 battery's

 * detection reports one despite it not being there.

 * Please keep this listed sorted alphabetically.

 ACEPC T8 Cherry Trail Z8350 mini PC */

 also match on somewhat unique bios-version */

 ACEPC T11 Cherry Trail Z8350 mini PC */

 also match on somewhat unique bios-version */

 ECS EF20EA */

 Intel Cherry Trail Compute Stick, Windows version */

 Intel Cherry Trail Compute Stick, version without an OS */

 Meegopad T02 */

 Mele PCG03 Mini PC */

 Minix Neo Z83-4 mini PC */

 Various Ace PC/Meegopad/MinisForum/Wintel Mini-PCs/HDMI-sticks */

		/*

		 * Note cannot use devm_iio_channel_get because x86 systems

		 * lack the device<->channel maps which iio_channel_get will

		 * try to use when passed a non NULL device pointer.

 Wait for axp288_adc to load */

	/*

	 * On some devices the fuelgauge and charger parts of the axp288 are

	 * not used, check that the fuelgauge is enabled (CC_CTRL != 0).

 In case we arrive here by goto because of a register access error */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * I2C client/driver for the Linear Technology LTC2941, LTC2942, LTC2943

 * and LTC2944 Battery Gas Gauge IC

 *

 * Copyright (C) 2014 Topic Embedded Systems

 *

 * Author: Auryn Verwegen

 * Author: Mike Looijmans

 Update delay in seconds */

 I2C Client pointer */

 Supply pointer */

 Supply description */

 Work scheduler */

 Chip type */

 Last charge register content */

 mOhm */

 nAh */

 Read status and control registers */

 Put device into "monitor" mode */

 2942 measures every 2 sec */

 2943 and 2944 measure every 10 sec */

 When r_sense < 0, this counts up when the battery discharges */

 Direction depends on how sense+/- were connected */

 input validation */

 Read control register */

 Disable analog section */

 Set new charge value */

 Enable analog section */

 Direction depends on how sense+/- were connected */

 input validation */

 Set new charge value */

	/* Value is in range -32k..+32k, r_sense is usually 10..50 mOhm,

	 * the formula below keeps everything in s32 range while preserving

 in uA */

 Full-scale is 600 Kelvin */

 Full-scale is 510 Kelvin */

 Convert to tenths of degree Celsius */

	/* r_sense can be negative, when sense+ is connected to the battery

 Read status register to check for LTC2942 */

 The LTC2941 does not need any special handling */

 Read control register */

 Disable continuous ADC conversion as this drains the battery */

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * h3xxx atmel micro companion support, battery subdevice

 * based on previous kernel 2.4 version

 * Author : Alessandro Gardich <gremlin@gremlin.it>

 * Author : Linus Walleij <linus.walleij@linaro.org>

 100 seconds in milliseconds */

 Battery will not charge */

 For expansion pack batteries */

 Battery fully charged */

 First send battery message */

	/*

	 * Returned message format:

	 * byte 0:   0x00 = Not plugged in

	 *           0x01 = AC adapter plugged in

	 * byte 1:   chemistry

	 * byte 2:   voltage LSB

	 * byte 3:   voltage MSB

	 * byte 4:   flags

	 * byte 5-9: same for battery 2

 Then read the sensor */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Universal power supply monitor class

 *

 *  Copyright ¬© 2007  Anton Vorontsov <cbou@mail.ru>

 *  Copyright ¬© 2004  Szabolcs Gyurko

 *  Copyright ¬© 2003  Ian Molton <spyro@f2s.com>

 *

 *  Modified: 2004, Oct     Szabolcs Gyurko

 exported for the APM Power driver, APM emulation */

 Support both supplied_to and supplied_from modes */

	/*

	 * Check 'changed' here to avoid issues due to race between

	 * power_supply_changed() and this routine. In worst case

	 * power_supply_changed() can be called again just before we take above

	 * lock. During the first call of this routine we will mark 'changed' as

	 * false and it will stay false for the next call as well.

	/*

	 * Hold the wakeup_source until all events are processed.

	 * power_supply_changed() might have called again and have set 'changed'

	 * to true.

/*

 * Notify that power supply was registered after parent finished the probing.

 *

 * Often power supply is registered from driver's probe function. However

 * calling power_supply_changed() directly from power_supply_register()

 * would lead to execution of get_property() function provided by the driver

 * too early - before the probe ends.

 *

 * Avoid that by waiting on parent's mutex.

 returning non-zero breaks out of class_for_each_device loop */

	/*

	 * class_for_each_device() either returns its own errors or values

	 * returned by __power_supply_find_supply_from_node().

	 *

	 * __power_supply_find_supply_from_node() will return 0 (no match)

	 * or 1 (match).

	 *

	 * We return 0 if class_for_each_device() returned 1, -EPROBE_DEFER if

	 * it returned 0, or error as returned by it.

 If there is already a list honor it */

 No device node found, nothing to do */

 Missing valid "power-supplies" entries */

 All supplies found, allocate char ** array for filling */

	/*

	 * If no power class device was found at all, most probably we are

	 * running on a desktop system, so assume we are on mains power.

	/*

	 * This function is not intended for use with a supply with multiple

	 * suppliers, we simply pick the first supply to report a non 0

	 * max-current.

/**

 * power_supply_get_by_name() - Search for a power supply and returns its ref

 * @name: Power supply name to fetch

 *

 * If power supply was found, it increases reference count for the

 * internal power supply's device. The user should power_supply_put()

 * after usage.

 *

 * Return: On success returns a reference to a power supply with

 * matching name equals to @name, a NULL otherwise.

/**

 * power_supply_put() - Drop reference obtained with power_supply_get_by_name

 * @psy: Reference to put

 *

 * The reference to power supply should be put before unregistering

 * the power supply.

/**

 * power_supply_get_by_phandle() - Search for a power supply and returns its ref

 * @np: Pointer to device node holding phandle property

 * @property: Name of property holding a power supply name

 *

 * If power supply was found, it increases reference count for the

 * internal power supply's device. The user should power_supply_put()

 * after usage.

 *

 * Return: On success returns a reference to a power supply with

 * matching name equals to value under @property, NULL or ERR_PTR otherwise.

/**

 * devm_power_supply_get_by_phandle() - Resource managed version of

 *  power_supply_get_by_phandle()

 * @dev: Pointer to device holding phandle property

 * @property: Name of property holding a power supply phandle

 *

 * Return: On success returns a reference to a power supply with

 * matching name equals to value under @property, NULL or ERR_PTR otherwise.

 CONFIG_OF */

	/* The property and field names below must correspond to elements

	 * in enum power_supply_property. For reasoning, see

	 * Documentation/power/power_supply_class.rst.

 Imprecise lithium-ion type */

/**

 * power_supply_temp2resist_simple() - find the battery internal resistance

 * percent

 * @table: Pointer to battery resistance temperature table

 * @table_len: The table length

 * @temp: Current temperature

 *

 * This helper function is used to look up battery internal resistance percent

 * according to current temperature value from the resistance temperature table,

 * and the table must be ordered descending. Then the actual battery internal

 * resistance = the ideal battery internal resistance * percent / 100.

 *

 * Return: the battery internal resistance percent

/**

 * power_supply_ocv2cap_simple() - find the battery capacity

 * @table: Pointer to battery OCV lookup table

 * @table_len: OCV table length

 * @ocv: Current OCV value

 *

 * This helper function is used to look up battery capacity according to

 * current OCV value from one OCV table, and the OCV table must be ordered

 * descending.

 *

 * Return: the battery capacity.

 Convert tenths of degree Celsius to milli degree Celsius. */

 Register battery zone device psy reports temperature */

 thermal cooling device callbacks */

 Register for cooling device if psy can control charging */

	/*

	 * Update use_cnt after any uevents (most notably from device_add()).

	 * We are here still during driver's probe but

	 * the power_supply_uevent() calls back driver's get_property

	 * method so:

	 * 1. Driver did not assigned the returned struct power_supply,

	 * 2. Driver could not finish initialization (anything in its probe

	 *    after calling power_supply_register()).

/**

 * power_supply_register() - Register new power supply

 * @parent:	Device to be a parent of power supply's device, usually

 *		the device which probe function calls this

 * @desc:	Description of power supply, must be valid through whole

 *		lifetime of this power supply

 * @cfg:	Run-time specific configuration accessed during registering,

 *		may be NULL

 *

 * Return: A pointer to newly allocated power_supply on success

 * or ERR_PTR otherwise.

 * Use power_supply_unregister() on returned power_supply pointer to release

 * resources.

/**

 * power_supply_register_no_ws() - Register new non-waking-source power supply

 * @parent:	Device to be a parent of power supply's device, usually

 *		the device which probe function calls this

 * @desc:	Description of power supply, must be valid through whole

 *		lifetime of this power supply

 * @cfg:	Run-time specific configuration accessed during registering,

 *		may be NULL

 *

 * Return: A pointer to newly allocated power_supply on success

 * or ERR_PTR otherwise.

 * Use power_supply_unregister() on returned power_supply pointer to release

 * resources.

/**

 * devm_power_supply_register() - Register managed power supply

 * @parent:	Device to be a parent of power supply's device, usually

 *		the device which probe function calls this

 * @desc:	Description of power supply, must be valid through whole

 *		lifetime of this power supply

 * @cfg:	Run-time specific configuration accessed during registering,

 *		may be NULL

 *

 * Return: A pointer to newly allocated power_supply on success

 * or ERR_PTR otherwise.

 * The returned power_supply pointer will be automatically unregistered

 * on driver detach.

/**

 * devm_power_supply_register_no_ws() - Register managed non-waking-source power supply

 * @parent:	Device to be a parent of power supply's device, usually

 *		the device which probe function calls this

 * @desc:	Description of power supply, must be valid through whole

 *		lifetime of this power supply

 * @cfg:	Run-time specific configuration accessed during registering,

 *		may be NULL

 *

 * Return: A pointer to newly allocated power_supply on success

 * or ERR_PTR otherwise.

 * The returned power_supply pointer will be automatically unregistered

 * on driver detach.

/**

 * power_supply_unregister() - Remove this power supply from system

 * @psy:	Pointer to power supply to unregister

 *

 * Remove this power supply from the system. The resources of power supply

 * will be freed here or on last power_supply_put() call.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * TI BQ24257 charger driver

 *

 * Copyright (C) 2015 Intel Corporation

 *

 * Datasheets:

 * https://www.ti.com/product/bq24250

 * https://www.ti.com/product/bq24251

 * https://www.ti.com/product/bq24257

 msec */

/*

 * When adding support for new devices make sure that enum bq2425x_chip and

 * bq2425x_chip_name[] always stay in sync!

 REG 1 */

 REG 2 */

 REG 3 */

 REG 4 */

 REG 5 */

 REG 6 */

 REG 7 */

 initial field values, converted from uV/uA */

 charge current      */

 regulation voltage  */

 termination current */

 input current limit */

 over voltage protection voltage */

 VDMP input threshold voltage */

 protect state data */

 REG 1 */

 REG 2 */

 REG 3 */

 REG 4 */

 REG 5 */

 REG 6 */

 REG 7 */

	/*

	 * The "External ILIM" and "Production & Test" modes are not exposed

	 * through this driver and not being covered by the lookup table.

	 * Should such a mode have become active let's return an error rather

	 * than exceeding the bounds of the lookup table and returning

	 * garbage.

	/*

	 * Address the case where the user manually sets an input current limit

	 * while the charger auto-detection mechanism is is active. In this

	 * case we want to abort and go straight to the user-specified value.

		/*

		 * If we have a chip without a dedicated power-good GPIO or

		 * some other explicit bit that would provide this information

		 * assume the power is good if there is no supply related

		 * fault - and not good otherwise. There is a possibility for

		 * other errors to mask that power in fact is not good but this

		 * is probably the best we can do here.

 Dedicated Charging Port */

 Charging Downstream Port */

 Standard Downstream Port */

	/*

	 * All USB ports should be able to handle 500mA. If not, DPM will lower

	 * the charging current to accommodate the power source. No need to set

	 * a lower IILIMIT value.

	/*

	 * Handle BQ2425x state changes observing whether the D+/D- based input

	 * current limit autoset functionality is enabled.

 activate D+/D- port detection algorithm */

		/*

		 * When power is removed always return to the default input

		 * current limit as configured during probe.

 configure input current limit */

	/*

	 * Disable the watchdog timer to prevent the IC from going back to

	 * default settings after 50 seconds of I2C inactivity.

 configure the charge currents and voltages */

 program fixed input current limit */

 activate D+/D- detection algorithm */

 Required properties */

 Optional properties. If not provided use reasonable default. */

		/*

		 * Explicitly set a default value which will be needed for

		 * devices that don't support the automatic setting of the input

		 * current limit through the charger type detection mechanism.

	/*

	 * The BQ24250 doesn't support the D+/D- based charger type detection

	 * used for the automatic setting of the input current limit setting so

	 * explicitly disable that feature.

	/*

	 * The BQ24250 doesn't have a dedicated Power Good (PG) pin so let's

	 * not probe for it and instead use a SW-based approach to determine

	 * the PG state. We also use a SW-based approach for all other devices

	 * if the PG pin is either not defined or can't be probed.

 reset all registers to defaults */

	/*

	 * Put the RESET bit back to 0, in cache. For some reason the HW always

	 * returns 1 on this bit, so this is the only way to avoid resetting the

	 * chip every time we update another field in this register.

 reset to defaults */

 reset all registers to default (and activate standalone mode) */

 signal userspace, maybe state changed while suspended */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Motorola CPCAP PMIC battery charger driver

 *

 * Copyright (C) 2017 Tony Lindgren <tony@atomide.com>

 *

 * Rewritten for Linux power framework with some parts based on

 * on earlier driver found in the Motorola Linux kernel:

 *

 * Copyright (C) 2009-2010 Motorola, Inc.

/*

 * CPCAP_REG_CRM register bits. For documentation of somewhat similar hardware,

 * see NXP "MC13783 Power Management and Audio Circuit Users's Guide"

 * MC13783UG.pdf chapter "8.5 Battery Interface Register Summary". The registers

 * and values for CPCAP are different, but some of the internal components seem

 * similar. Also see the Motorola Linux kernel cpcap-regbits.h. CPCAP_REG_CHRGR_1

 * bits that seem to describe the CRM register.

 641 = register number */

 641 = register number */

 Charger LED */

 USB VBUS output enable */

 Trickle charge current */

 0 = hardware, 1 = FET_CTRL */

 BPFET 1 if FET_OVRD set */

 Charge voltage bits */

 Charge current bits */

 CPCAP_REG_CRM trickle charge voltages */

/*

 * CPCAP_REG_CRM charge voltages based on the ADC channel 1 values.

 * Note that these register bits don't match MC13783UG.pdf VCHRG

 * register bits.

/*

 * CPCAP_REG_CRM charge currents. These seem to match MC13783UG.pdf

 * values in "Table 8-3. Charge Path Regulator Current Limit

 * Characteristics" for the nominal values.

 *

 * Except 70mA and 1.596A and unlimited, these are simply 88.7mA / step.

 CPCAP_REG_VUSBC register bits needed for VBUS */

 VBUS boost to 5V */

 gpio_reven0 & 1 */

 For USB VBUS */

 VBUS control functions for the USB PHY companion */

 Charger interrupt handling functions */

 Update battery state before disconnecting the charger */

 Just init the state if a charger is connected with no chrg_det set */

	/*

	 * If battery voltage is higher than charge voltage, it may have been

	 * charged to 4.35V by Android. Try again in 10 minutes.

 Delay for 80ms to avoid vbus bouncing when usb cable is plugged in */

 Throttle chrgcurr2 interrupt for charger done and retry */

 REG_INT_0 */

 REG_INT1 */

 REG_INT_3 */

 SPDX-License-Identifier: GPL-2.0

/*

 * These are the defined batteries that uses a NTC and ID resistor placed

 * inside of the battery pack.

 * Note that the res_to_temp table must be strictly sorted by falling resistance

 * values to work.

/*

 * Note that the res_to_temp table must be strictly sorted by falling

 * resistance values to work.

/*

 * Note that the batres_vs_temp table must be strictly sorted by falling

 * temperature values to work.

/*

 * Note that the batres_vs_temp table must be strictly sorted by falling

 * temperature values to work.

 battery resistance table for LI ION 9100 battery */

 First element always represent the UNKNOWN battery */

 First element always represent the UNKNOWN battery */

/*

 * These are the batteries that doesn't have an internal NTC resistor to measure

 * its temperature. The temperature in this case is measure with a NTC placed

 * near the battery but on the PCB.

/*

 * This array maps the raw hex value to charger output current used by the

 * AB8500 values

/*

 * This array maps the raw hex value to charger input current used by the

 * AB8500 values

 select the battery resolution table */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Battery driver for Acer Iconia Tab A500.

 *

 * Copyright 2020 GRATE-driver project.

 *

 * Based on downstream driver from Acer Inc.

 * Based on NVIDIA Gas Gauge driver for SBS Compliant Batteries.

 *

 * Copyright (c) 2010, NVIDIA Corporation.

 capacity can be >100% even if max value is 100% */

	/*

	 * DESIGN_CAPACITY register always returns a non-zero value if

	 * battery is connected and zero if disconnected, hence we'll use

	 * it for judging the battery presence.

 convert units to match requirements of power supply class */

 return NODATA for properties if battery not presents */

 continuously send uevent notification */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * AXP20x PMIC USB power supply status driver

 *

 * Copyright (C) 2015 Hans de Goede <hdegoede@redhat.com>

 * Copyright (C) 2014 Bruno Pr√©mont <bonbons@linux-vserver.org>

/*

 * Note do not raise the debounce time, we must report Vusb high within

 * 100ms otherwise we get Vbus errors in musb.

	/*

	 * Polling is only necessary while VBUS is offline. While online, a

	 * present->absent transition implies an online->offline transition

	 * and will trigger the VBUS_REMOVAL IRQ.

 No 100mA limit */

			/*

			 * IIO framework gives mV but Power Supply framework

			 * gives uV.

 1 step = 1.7 mV */

			/*

			 * IIO framework gives mA but Power Supply framework

			 * gives uA.

 1 step = 0.375 mA */

 All the properties below need the input-status reg value */

	/*

	 * The VBUS path select flag works differently on AXP288 and newer:

	 *  - On AXP20x and AXP22x, the flag enables VBUS (ignoring N_VBUSEN).

	 *  - On AXP288 and AXP8xx, the flag disables VBUS (ignoring N_VBUSEN).

	 * We only expose the control on variants where it can be used to force

	 * the VBUS input offline.

	/*

	 * Allow wake via VBUS_PLUGIN only.

	 *

	 * As nested threaded IRQs are not automatically disabled during

	 * suspend, we must explicitly disable the remainder of the IRQs.

 Enable vbus voltage and current measurement */

 Enable vbus valid checking */

 Enable USB Battery Charging specification detection */

 Request irqs after registering, as irqs may trigger immediately */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Battery class driver for Apple PMU

 *

 *	Copyright ¬© 2006  David Woodhouse <dwmw2@infradead.org>

/*********************************************************************

 *		Power

/*********************************************************************

 *		Battery properties

 mWh -> ¬µWh */

 mWh -> ¬µWh */

 mA -> ¬µA */

 mV -> ¬µV */

/*********************************************************************

 *		Initialisation

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ADP5061 I2C Programmable Linear Battery Charger

 *

 * Copyright 2018 Analog Devices Inc.

 ADP5061 registers definition */

 ADP5061_VINX_SET */

 ADP5061_TERM_SET */

 ADP5061_CHG_CURR */

 ADP5061_VOLTAGE_TH */

 ADP5061_CHG_STATUS_1 */

 ADP5061_CHG_STATUS_2 */

 ADP5061_IEND */

 mA

 CHG_STATUS1 and CHG_STATUS2 are adjacent regs */

 Convert from uA to mA */

 Convert from uV to mV */

 Convert from uV to mV */

 Convert from uV to mV */

 Convert from uA to mA */

 Convert from uA to mA */

 Convert from uV to mV */

 The battery must be discharging if there is a charge fault */

 Battery monitor off */

 No battery */

 VBAT < VTRK */

 VTRK < VBAT_SNS < VWEAK */

 VBAT_SNS > VWEAK */

		/* This property is used to indicate the input current

		 * limit into VINx (ILIM)

		/* This property is used to indicate the termination

		 * voltage (VTRM)

		/*

		 * This property is used to indicate the trickle to fast

		 * charge threshold (VTRK_DEAD)

		/* This property is used to indicate the charging

		 * voltage limit (CHG_VLIM)

		/*

		 * This property is used to indicate the value of the constant

		 * current charge (ICHG)

		/*

		 * This property is used to indicate the value of the trickle

		 * and weak charge currents (ITRK_DEAD)

		/*

		 * This property is used to set the VWEAK threshold

		 * bellow this value, weak charge mode is entered

		 * above this value, fast chargerge mode is entered

		/*

		 * Indicate the charger status in relation to power

		 * supply status property

		/*

		 * Indicate the battery status in relation to power

		 * supply capacity level property

 Indicate the values of the termination current */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Maxim MAX14656 / AL32 USB Charger Detector driver

 *

 * Copyright (C) 2014 LG Electronics, Inc

 * Copyright (C) 2016 Alexander Kurz <akurz@blala.de>

 *

 * Components from Maxim AL32 Charger detection Driver for MX50 Yoshi Board

 * Copyright (C) Amazon Technologies Inc. All rights reserved.

 * Manish Lachwani (lachwani@lab126.com)

 Turn on ADC_EN */

 turn on interrupts and low power mode */

 SPDX-License-Identifier: GPL-2.0

 Battery charger driver for TI's tps65217



 Copyright (C) 2015 Collabora Ltd.

 Author: Enric Balletbo i Serra <enric.balletbo@collabora.com>

/*

 * Battery charger driver for TI's tps65217

	/*

	 * tps65217 rev. G, p. 31 (see p. 32 for NTC schematic)

	 *

	 * The device can be configured to support a 100k NTC (B = 3960) by

	 * setting the the NTC_TYPE bit in register CHGCONFIG1 to 1. However it

	 * is not recommended to do so. In sleep mode, the charger continues

	 * charging the battery, but all register values are reset to default

	 * values. Therefore, the charger would get the wrong temperature

	 * information. If 100k NTC setting is required, please contact the

	 * factory.

	 *

	 * ATTENTION, conflicting information, from p. 46

	 *

	 * NTC TYPE (for battery temperature measurement)

	 *   0 ‚Äì 100k (curve 1, B = 3960)

	 *   1 ‚Äì 10k  (curve 2, B = 3480) (default on reset)

	 *

 charger already enabled */

 check for charger status bit */

 Create a polling thread if an interrupt is invalid */

 Create IRQ threads for charger interrupts */

 Check current state */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Battery driver for Marvell 88PM860x PMIC

 *

 * Copyright (c) 2012 Marvell International Ltd.

 * Author:	Jett Zhou <jtzhou@marvell.com>

 *		Haojian Zhuang <haojian.zhuang@marvell.com>

 bit definitions of Status Query Interface 2 */

 bit definitions of Reset Out Register */

 bit definitions of PreReg 1 */

 bit definitions of Charger Control 1 Register */

 bit definitions of Charger Control 2 Register */

 bit definitions of Charger Control 3 Register */

 bit definitions of Charger Control 4 Register */

 bit definitions of Charger Control 6 Register */

 2.8v */

 bit definitions of Charger Control 7 Register */

 bit definitions of Measurement Enable 1 Register */

 bit definitions of Measurement Enable 3 Register */

 over-temperature on PM8606 setting */

 over-voltage protect on vchg setting mv */

 fsm state */

 usb charger */

 battery present */

 V_BATT_MEAS(mV) = value * 5 * 1.8 * 1000 / (2^12) */

 (tmp << 8) * / 5 / 1800 */

 (tmp << 8) * 3 / 1800 */

 stop charging */

 set 270 minutes timeout */

 set precharge current, termination voltage, IBAT & TBAT monitor */

 trigger precharge */

 set fastcharge termination current & voltage, disable charging */

 set 270 minutes timeout */

 set IBAT & TBAT monitor */

 launch fast-charge */

 vchg threshold setting */

 Temperature < -10 C or >40 C, Will not allow charge */

 pre-charge done, will transimit to fast-charge stage */

	/*

	 * Fast charge done, delay to read

	 * the correct status of CHG_DET.

	/*

	 * CHG_DONE interrupt is faster than CHG_DET interrupt when

	 * plug in/out usb, So we can not rely on info->online, we

	 * need check pm8607 status register to check usb is online

	 * or not, then we can decide it is real charge done

	 * automatically or it is triggered by usb plug out;

 check if over-temp on pm8606 or not */

 clear over temp flag and set auto recover */

 set init value for the case we are not using battery */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for Analog Devices (Linear Technology) LTC4162-L charger IC.

 *  Copyright (C) 2020, Topic Embedded Products

 Registers (names based on what datasheet uses) */

 Enumeration as in datasheet. Individual bits are mutually exclusive. */

 trickle on low bat voltage */

 normal charge */

 battery is full */

 Individual bits are mutually exclusive. Only active in charging states.*/

 Magic number to write to ARM_SHIP_MODE register */

 Series resistor that sets charge current, microOhm */

 Series resistor to measure input current, microOhm */

 Number of connected cells, 0 while unknown */

 Once read successfully */

 Lower 4 bits is the cell count, or 0 if the chip doesn't know yet */

 Once determined, keep the value */

 Convert enum value to POWER_SUPPLY_STATUS value */

 constant voltage/current and input_current limit are "fast" modes */

 Anything that's not fast we'll return as trickle */

 BIT(2) indicates if input voltage is sufficient to charge */

 cell_count √ó 192.4ŒºV/LSB */

 Signed 16-bit number, 1.466ŒºV / RSNSB amperes/LSB. */

 1.649mV/LSB */

 Signed 16-bit number, 1.466ŒºV / RSNSI amperes/LSB. */

 Only the lower 5 bits */

 The charge current servo level: (icharge_dac + 1) √ó 1mV/RSNSB */

 Round to lowest possible */

 Only the lower 5 bits */

	/*

	 * charge voltage setting can be computed from

	 * cell_count √ó (vcharge_setting √ó 12.5mV + 3.8125V)

	 * where vcharge_setting ranges from 0 to 31 (4.2V max).

 Not available yet, try again later */

 Only 6 bits */

 (iin_limit_dac + 1) √ó 500ŒºV / RSNSI */

 die_temp √ó 0.0215¬∞C/LSB - 264.4¬∞C */

 Centidegrees scale */

 Check if C_OVER_X_THRESHOLD is enabled */

 1.466ŒºV / RSNSB amperes/LSB */

 Disable en_c_over_x_term when set to zero */

 Set en_c_over_x_term after changing the threshold value */

 Custom properties */

 32 */

 0 */

 Only one bit is set according to datasheet, let's be safe here */

 put in device directory */

 Charger power supply property routines */

 all registers up to this one are writeable */

 The ALERTS registers can be written to clear alerts */

 all registers after this one are read-only status registers */

 Acknowledge interrupt to chip by clearing all events */

 Disable the threshold alerts, we're not using them */

 Enable interrupts on all status changes */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * AXP20X and AXP22X PMICs' ACIN power supply driver

 *

 * Copyright (C) 2016 Free Electrons

 *	Quentin Schulz <quentin.schulz@free-electrons.com>

 ACIN_PATH_SEL disables ACIN even if ACIN_AVAIL is set. */

 IIO framework gives mV but Power Supply framework gives uV */

 IIO framework gives mA but Power Supply framework gives uA */

 AXP813 datasheet defines values 11x as 4000mA */

	/*

	 * Allow wake via ACIN_PLUGIN only.

	 *

	 * As nested threaded IRQs are not automatically disabled during

	 * suspend, we must explicitly disable the remainder of the IRQs.

 Request irqs after registering, as irqs may trigger immediately */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Power supply driver for testing.

 *

 * Copyright 2010  Anton Vorontsov <cbouatmailru@gmail.com>

 *

 * Dynamic module parameter code from the Virtual Battery Driver

 * Copyright (C) 2008 Pylone, Inc.

 * By: Masashi YOKOTA <yokota@pylone.jp>

 * Originally found here:

 * http://downloads.pylone.jp/src/virtual_battery/virtual_battery-0.0.1.tar.bz2

 true */

 test_ac */

 test_battery */

 test_usb */

 Let's see how we handle changes... */

 SPDX-License-Identifier: GPL-2.0

 BQ2515X Battery Charger Driver

 Copyright (C) 2020 Texas Instruments Incorporated - https:
/**

 * struct bq2515x_init_data -

 * @ilim: input current limit

 * @ichg: fast charge current

 * @vbatreg: battery regulation voltage

 * @iprechg: precharge current

/**

 * struct bq2515x_device -

 * @mains: mains properties

 * @battery: battery properties

 * @regmap: register map structure

 * @dev: device structure

 *

 * @reset_gpio: manual reset (MR) pin

 * @powerdown_gpio: low power mode pin

 * @ac_detect_gpio: power good (PG) pin

 * @ce_gpio: charge enable (CE) pin

 *

 * @model_name: string value describing device model

 * @device_id: value of device_id

 * @mains_online: boolean value indicating power supply online

 *

 * @init_data: charger initialization data structure

	/* Read the STAT register if we can read it then the device is out

	 * of ship mode.  If the register cannot be read then attempt to wake

	 * it up and enable the ADC.

	/* Need to toggle LP and bring device out of ship mode. The device

	 * will exit the ship mode when the MR pin is held low for at least

	 * t_WAKE2 as shown in section 8.3.7.1 of the datasheet.

	/*

	 * The code block below is used to determine if any faults from the

	 * STAT0 register are disbaling charging or if the charge has completed

	 * according to the CHARGE_DONE_STAT bit.

	/*

	 * The code block below is used to determine if any faults from the

	 * STAT1 register are disbaling charging

	/*

	 * If there are no faults and charging is enabled, then status is

	 * charging. Otherwise, if charging is complete, then status is full.

	 * Otherwise, if a fault exists or charging is disabled, then status is

	 * not charging

 SPDX-License-Identifier: GPL-2.0



 iPAQ h1930/h1940/rx1950 battery controller driver

 Copyright (c) Vasily Khoruzhick

 Based on h1940_battery.c by Arnaud Patard

 ms */

 ms */

 default to 1 if nothing is set */

 Could be probe deferral etc */

 Schedule timer to check current status */

 Schedule timer to check current status */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * max8903_charger.c - Maxim 8903 USB/Adapter Charger Driver

 *

 * Copyright (C) 2011 Samsung Electronics

 * MyungJoo Ham <myungjoo.ham@samsung.com>

	/*

	 * GPIOs

	 * chg, flt, dcm and usus are optional.

	 * dok or uok must be present.

	 * If dok is present, cen must be present.

 Charger Enable input */

 DC (Adapter) Power OK output */

 USB Power OK output */

 Charger status output */

 Fault output */

 Current-Limit Mode input (1: DC, 2: USB) */

 USB Suspend Input (1: suspended) */

 Charger status output */

 External power source */

 Fault or OK */

 CHG asserted */

	/*

	 * This means the line is asserted.

	 *

	 * The signal is active low, but the inversion is handled in the GPIO

	 * library as the line should be flagged GPIO_ACTIVE_LOW in the device

	 * tree.

 Set Current-Limit-Mode 1:DC 0:USB */

 Charger Enable / Disable */

 Certainly enable if DOK is asserted */

 Enable if the USB charger is enabled */

 Else default-disable */

	/*

	 * This means the line is asserted.

	 *

	 * The signal is active low, but the inversion is handled in the GPIO

	 * library as the line should be flagged GPIO_ACTIVE_LOW in the device

	 * tree.

 Do not touch Current-Limit-Mode */

 Charger Enable / Disable */

 Certainly enable if UOK is asserted */

 Enable if the DC charger is enabled */

 Else default-disable */

	/*

	 * This means the line is asserted.

	 *

	 * The signal is active low, but the inversion is handled in the GPIO

	 * library as the line should be flagged GPIO_ACTIVE_LOW in the device

	 * tree.

		/*

		 * The DC OK is pulled up to 1 and goes low when a charger

		 * is plugged in (active low) but in the device tree the

		 * line is marked as GPIO_ACTIVE_LOW so we get a 1 (asserted)

		 * here if the DC charger is plugged in.

		/*

		 * The USB OK is pulled up to 1 and goes low when a USB charger

		 * is plugged in (active low) but in the device tree the

		 * line is marked as GPIO_ACTIVE_LOW so we get a 1 (asserted)

		 * here if the USB charger is plugged in.

 Either DC OK or USB OK must be provided */

	/*

	 * If either charger is already connected at this point,

	 * assert the CEN line and enable charging from the start.

	 *

	 * The line is active low but also marked with GPIO_ACTIVE_LOW

	 * in the device tree, so when we assert the line with

	 * GPIOD_OUT_HIGH the line will be driven low.

	/*

	 * If DC OK is provided, Charger Enable CEN is compulsory

	 * so this is not optional here.

	/*

	 * If the DC charger is connected, then select it.

	 *

	 * The DCM line should be marked GPIO_ACTIVE_HIGH in the

	 * device tree. Driving it high will enable the DC charger

	 * input over the USB charger input.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for LP8727 Micro/Mini USB IC with integrated charger

 *

 *			Copyright (C) 2011 Texas Instruments

 *			Copyright (C) 2011 National Semiconductor

 Registers */

 CTRL1 register */

 CTRL2 register */

 SWCTRL register */

 INT1 register */

 STATUS1 register */

 STATUS2 register */

 CHGCTRL2 register */

 Charger Data */

 Interrupt Handling */

 clear interrupts */

 skip if no charger exists */

 update charging parameters */

 Only for ac and usb */

 If charging parameter is not defined, just skip parsing the dt */

 SPDX-License-Identifier: GPL-2.0

/*

 * BQ27xxx battery monitor I2C driver

 *

 * Copyright (C) 2015 Texas Instruments Incorporated - https://www.ti.com/

 *	Andrew F. Davis <afd@ti.com>

 Get new ID for the new battery device */

 Schedule a polling after about 1 min */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PMU driver for Wolfson Microelectronics wm831x PMICs

 *

 * Copyright 2009 Wolfson Microelectronics PLC.

/*********************************************************************

 *		WALL Power

/*********************************************************************

 *		USB Power

 In milliamps */

 Find the highest supported limit */

/*********************************************************************

 *		Battery properties

	/* The battery charger is autonomous so we don't need to do

/*********************************************************************

 *		Initialisation

	/* Not much we can actually *do* but tell people for

 Just notify for everything - little harm in overnotifying. */

	/* We ignore configuration failures since we can still read back

	 * the status without enabling the charger.

 ignore missing usb-phy, it's optional */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Battery measurement code for WM97xx

 *

 * based on tosa_battery.c

 *

 * Copyright (C) 2008 Marek Vasut <marek.vasut@gmail.com>

 POWER_SUPPLY_PROP_PRESENT */

 POWER_SUPPLY_PROP_STATUS */

 POWER_SUPPLY_PROP_TECHNOLOGY */

 POWER_SUPPLY_PROP_TEMP */

 POWER_SUPPLY_PROP_VOLTAGE_NOW */

 POWER_SUPPLY_PROP_VOLTAGE_MAX */

 POWER_SUPPLY_PROP_VOLTAGE_MIN */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Battery and Power Management code for the Sharp SL-6000x

 *

 * Copyright (c) 2005 Dirk Opfer

 * Copyright (c) 2008 Dmitry Baryshkov

 protects gpio pins */

 protects data */

 flush all pending status updates */

 things may have changed while we were away */

 see comment in tosa_bat_remove */

	/*

	 * Now cancel the bat_work.  We won't get any more schedules,

	 * since all sources (isr and external_power_changed) are

	 * unregistered now.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2021 MediaTek Inc.

 MT6360_PMU_CHG_CTRL1 */

 MT6360_PMU_CHG_CTRL2 */

 MT6360_PMU_CHG_CTRL3 */

 MT6360_PMU_CHG_CTRL4 */

 MT6360_PMU_CHG_CTRL5 */

 MT6360_PMU_CHG_CTRL6 */

 MT6360_PMU_CHG_CTRL7 */

 MT6360_PMU_CHG_CTRL8 */

 MT6360_PMU_CHG_CTRL9 */

 MT6360_PMU_CHG_CTRL10 */

 MT6360_PMU_DEVICE_TYPE */

 MT6360_PMU_USB_STATUS1 */

 MT6360_PMU_CHG_STAT */

 MT6360_PMU_CHG_CTRL19 */

 MT6360_PMU_FOD_STAT */

 uV */

 uA */

 uV */

 uA */

 uA */

 uA */

 Charge in Progress */

 Not Charging */

 Charge Done */

 Charge Fault */

 Plug in */

 Select the smaller and equal supported value */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Gas Gauge driver for SBS Compliant Batteries

 *

 * Copyright (c) 2010, NVIDIA Corporation.

 Battery Mode defines */

 manufacturer access defines */

 battery status value bits */

 min_value and max_value are only valid for numerical data */

 Properties of type `const char *' */

 Properties of type `const char *' */

 Supports special manufacturer commands from TI BQ20Z65 and BQ20Z75 IC. */

 Disable PEC when no device is present */

 Check if device supports packet error checking and use it */

		/*

		 * Some batteries trigger the detection pin before the

		 * I2C bus is properly connected. This works around the

		 * issue.

 fallback to old behaviour */

 Adapter needs to support these two functions */

 Get the length of block data */

 block_length does not include NULL terminator */

 Get the block data */

 block_buffer[0] == block_length */

 add string termination */

 Not drawing current -> not charging (i.e. idle) */

 Drawing or providing current when full */

	/*

	 * Write to ManufacturerAccess with ManufacturerAccess command

	 * and then read the status.

 battery removed */

 battery removed */

	/* Mask the upper nibble of 2nd byte and

	 * lower byte of response then

 battery removed */

 Dummy command; if it succeeds, battery is present. */

 battery not present*/

 battery present */

 POWER_SUPPLY_PROP_HEALTH */

 SBS spec doesn't have a general health command. */

 returned values are 16 bit */

			/* sbs spec says that this can be >100 %

			 * even if max value is 100 %

		/* sbs provides energy in units of 10mWh.

		 * Convert to ¬µWh

		/* sbs provides battery temperature in 0.1K

		 * so convert it to 0.1¬∞C

		/* sbs provides time to empty and time to full in minutes.

		 * Convert to seconds

 this can only be true if no gpio is used */

 don't trigger power_supply_changed()! */

		/* sbs_get_battery_capacity() will change the battery mode

		 * temporarily to read the requested attribute. Ensure we stay

		 * in the desired mode for the duration of the attribute read.

 Convert units to match requirements for power supply class */

 battery not present, so return NODATA for properties */

 cancel outstanding work */

 if the read failed, give up on this work */

	/* use pdata if available, fall back to DT properties,

	 * or hardcoded defaults if not

	/*

	 * Before we register, we might need to make sure we can actually talk

	 * to the battery.

 Write to manufacturer access with sleep command. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for the TI bq24190 battery charger.

 *

 * Author: Mark A. Greer <mgreer@animalcreek.com>

 Input Source Control */

 Power-On Configuration */

 Charge Current Control */

 Pre-charge/Termination Current Cntl */

 Charge Voltage Control */

 Charge Term/Timer Control */

 IR Comp/Thermal Regulation Control */

 Misc. Operation Control */

 System Status */

 Fault */

 Vendor/Part/Revision Status */

 Also 24193, 24196 */

/*

 * The FAULT register is latched by the bq24190 (except for NTC_FAULT)

 * so the first read after a fault returns the latched value and subsequent

 * reads return the current value.  In order to return the fault status

 * to the user, have the interrupt handler save the reg's value and retrieve

 * it in the appropriate health/status routine.

/*

 * The tables below provide a 2-way mapping for the value that goes in

 * the register field and the real-world value that it represents.

 * The index of the array is the value that goes in the register; the

 * number at that index in the array is the real-world value that it

 * represents.

 REG00[2:0] (IINLIM) in uAh */

 REG02[7:2] (ICHG) in uAh */

 REG04[7:2] (VREG) in uV */

 REG06[1:0] (TREG) in tenths of degrees Celsius */

/*

 * Return the index in 'tbl' of greatest value that is less than or equal to

 * 'val'.  The index range returned is 0 to 'tbl_size' - 1.  Assumes that

 * the values in 'tbl' are sorted from smallest to largest and 'tbl_size'

 * is less than 2^8.

 Basic driver I/O routines */

/*

 * There are a numerous options that are configurable on the bq24190

 * that go well beyond what the power_supply properties provide access to.

 * Provide sysfs access to them so they can be examined and possibly modified

 * on the fly.  They will be provided for the charger power_supply object only

 * and will be prefixed by 'f_' to make them easier to recognize.

 On i386 ptrace-abi.h defines SS that breaks the macro calls below. */

	sysfs name	reg	field in reg */

 Has additional entry for this */

	/*

	 * According to the "Host Mode and default Mode" section of the

	 * manual, a write to any register causes the bq24190 to switch

	 * from default mode to host mode.  It will switch back to default

	 * mode after a WDT timeout unless the WDT is turned off as well.

	 * So, by simply turning off the WDT, we accomplish both with the

	 * same write.

 manual section 9.5.1.2, table 9

 manual section 9.5.1.4, table 11

 manual section 9.5.1.4, table 11

	/*

	 * This prop. can be passed on device instantiation from platform code:

	 * struct property_entry pe[] =

	 *   { PROPERTY_ENTRY_BOOL("disable-reset"), ... };

	 * struct i2c_board_info bi =

	 *   { .type = "bq24190", .addr = 0x6b, .properties = pe, .irq = irq };

	 * struct i2c_adapter ad = { ... };

	 * i2c_add_adapter(&ad);

	 * i2c_new_client_device(&ad, &bi);

 Reset the registers */

 Reset bit will be cleared by hardware so poll until it is */

 Charger power supply property routines */

 If POC[CHG_CONFIG] (REG01[5:4]) == 0, charge is disabled */

	/*

	 * According to the "Termination when REG02[0] = 1" section of

	 * the bq24190 manual, the trickle charge could be less than the

	 * termination current so it recommends turning off the termination

	 * function.

	 *

	 * Note: AFAICT from the datasheet, the user will have to manually

	 * turn off the charging when in 20% mode.  If its not turned off,

	 * there could be battery damage.  So, use this mode at your own risk.

 Enabling the charger */

 TS1  Cold */

 TS2  Cold */

 Both Cold */

 TS1  Hot */

 TS2  Hot */

 Both Hot */

 Input Fault (VBUS OVP or VBAT<VBUS<3.8V) */

			/*

			 * This could be over-voltage or under-voltage

			 * and there's no way to tell which.  Instead

			 * of looking foolish and returning 'OVERVOLTAGE'

			 * when its really under-voltage, just return

			 * 'UNSPEC_FAILURE'.

 Thermal Shutdown */

 Charge Safety Timer Expiration */

 prevent compiler warning */

		/*

		 * This could be over-current or over-voltage but there's

		 * no way to tell which.  Return 'OVERVOLTAGE' since there

		 * isn't an 'OVERCURRENT' value defined that we can return

		 * even if it was over-current.

 If FORCE_20PCT is enabled, then current is 20% of ICHG value */

 If FORCE_20PCT is enabled, have to multiply value passed in by 5 */

 Sync the input-current-limit with our parent supply (if we have one) */

	/*

	 * The Power-Good detection may take up to 220ms, sometimes

	 * the external charger detection is quicker, and the bq24190 will

	 * reset to iinlim based on its own charger detection (which is not

	 * hooked up when using external charger detection) resulting in a

	 * too low default 500mA iinlim. Delay setting the input-current-limit

	 * for 300ms to avoid this.

 Battery power supply property routines */

	/*

	 * The battery must be discharging when any of these are true:

	 * - there is no good power source;

	 * - there is a charge fault.

	 * Could also be discharging when in "supplement mode" but

	 * there is no way to tell when its in that mode.

 Not Charging */

 Pre-charge */

 Fast Charging */

 Charge Termination Done */

 Normal */

 TS1 Cold */

 TS2 Cold */

 Both Cold */

 TS1 Hot */

 TS2 Hot */

 Both Hot */

 Could be Li-on or Li-polymer but no way to tell which */

 ignore over/under voltage fault after disconnect */

		/*

		 * The device is in host mode so when PG_STAT goes from 1->0

		 * (i.e., power removed) HIZ needs to be disabled.

 First check that the device really is what its supposed to be */

 impossible state */

 the battery class is deprecated and will be removed. */

 in the interim, this property hides it.              */

 impossible state */

 Things may have changed while suspended so alert upper layer */

/*

 * Battery power supply driver for X-Powers AXP20X and AXP22X PMICs

 *

 * Copyright 2016 Free Electrons NextThing Co.

 *	Quentin Schulz <quentin.schulz@free-electrons.com>

 *

 * This driver is based on a previous upstreaming attempt by:

 *	Bruno Pr√©mont <bonbons@linux-vserver.org>

 *

 * This file is subject to the terms and conditions of the GNU General

 * Public License. See the file "COPYING" in the main directory of this

 * archive for more details.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the

 * GNU General Public License for more details.

 Maximum constant charge current */

		/*

		 * Fuel Gauge data takes 7 bits but the stored value seems to be

		 * directly the raw percentage without any scaling to 7 bits.

 IIO framework gives mA but Power Supply framework gives uA */

 When no battery is present, return capacity is 100% */

		/*

		 * Fuel Gauge data takes 7 bits but the stored value seems to be

		 * directly the raw percentage without any scaling to 7 bits.

 IIO framework gives mV but Power Supply framework gives uV */

		/*

		 * AXP20x max voltage can be set to 4.36V and AXP22X max voltage

		 * can be set to 4.22V and 4.24V, but these voltages are too

		 * high for Lithium based batteries (AXP PMICs are supposed to

		 * be used with these kinds of battery).

		/*

		 * AXP20x max voltage can be set to 4.36V and AXP22X max voltage

		 * can be set to 4.22V and 4.24V, but these voltages are too

		 * high for Lithium based batteries (AXP PMICs are supposed to

		 * be used with these kinds of battery).

 sentinel */ },

 Set max to unverified value to be able to set CCC */

	/*

	 * Update max CCC to a valid value if battery info is present or set it

	 * to current register value by default.

 SPDX-License-Identifier: GPL-2.0-only

/* Copyright (c) 2014, Sony Mobile Communications Inc.

 *

 * This driver is for the multi-block Switch-Mode Battery Charger and Boost

 * (SMBB) hardware, found in Qualcomm PM8941 PMICs.  The charger is an

 * integrated, single-cell lithium-ion battery charger.

 *

 * Sub-components:

 *  - Charger core

 *  - Buck

 *  - DC charge-path

 *  - USB charge-path

 *  - Battery interface

 *  - Boost (not implemented)

 *  - Misc

 *  - HF-Buck

 USB connection is valid */

 DC connection is valid */

 Battery temp 1=Hot, 0=Cold */

 Battery temp OK */

 Battery is present */

 Charge cycle is complete */

 Trickle charging */

 Fast charging */

 No charger is connected */

 everything is ok for charging, but we are not... */

		/* this charger is a single-cell lithium-ion battery charger

		* only.  If you hook up some other technology, there will be

		* fireworks.

 single-cell li-ion low end */

 The bootloader is supposed to set this... make sure anyway. */

 Disable software timer */

 Clear and disable watchdog */

 Use charger based EoC detection */

	/* Disable GSM PA load adjustment.

	* The PA signal is incorrectly connected on v2.

 Use VBAT (not VSYS) to compensate for IR drop during fast charging */

 Enable battery temperature comparators */

 Stop USB enumeration timer */

 FIXME supposedly only to disable hardware ARB termination */

 Stop USB enumeration timer, again */

 Enable charging */

	/*

	 * otg regulator is used to control VBUS voltage direction

	 * when USB switches between host and gadget mode

 Set temperature range to [35%:70%] or [25%:80%] accordingly */

 SPDX-License-Identifier: GPL-2.0

 BQ256XX Battery Charger Driver

 Copyright (C) 2020 Texas Instruments Incorporated - http:
/**

 * struct bq256xx_init_data -

 * @ichg: fast charge current

 * @iindpm: input current limit

 * @vbatreg: charge voltage

 * @iterm: termination current

 * @iprechg: precharge current

 * @vindpm: input voltage limit

 * @ichg_max: maximum fast charge current

 * @vbatreg_max: maximum charge voltage

/**

 * struct bq256xx_state -

 * @vbus_stat: VBUS status according to BQ256XX_CHARGER_STATUS_0

 * @chrg_stat: charging status according to BQ256XX_CHARGER_STATUS_0

 * @online: PG status according to BQ256XX_CHARGER_STATUS_0

 *

 * @wdt_fault: watchdog fault according to BQ256XX_CHARGER_STATUS_1

 * @bat_fault: battery fault according to BQ256XX_CHARGER_STATUS_1

 * @chrg_fault: charging fault according to BQ256XX_CHARGER_STATUS_1

 * @ntc_fault: TS fault according to BQ256XX_CHARGER_STATUS_1

/**

 * struct bq256xx_device -

 * @client: i2c client structure

 * @regmap: register map structure

 * @dev: device structure

 * @charger: power supply registered for the charger

 * @battery: power supply registered for the battery

 * @lock: mutex lock structure

 *

 * @usb2_phy: usb_phy identifier

 * @usb3_phy: usb_phy identifier

 * @usb_nb: notifier block

 * @usb_work: usb work queue

 * @usb_event: usb_event code

 *

 * @model_name: i2c name string

 *

 * @init_data: initialization data

 * @chip_info: device variant information

 * @state: device status and faults

 * @watchdog_timer: watchdog timer value in milliseconds

/**

 * struct bq256xx_chip_info -

 * @model_id: device instance

 *

 * @bq256xx_regmap_config: regmap configuration struct

 * @bq256xx_get_ichg: pointer to instance specific get_ichg function

 * @bq256xx_get_iindpm: pointer to instance specific get_iindpm function

 * @bq256xx_get_vbatreg: pointer to instance specific get_vbatreg function

 * @bq256xx_get_iterm: pointer to instance specific get_iterm function

 * @bq256xx_get_iprechg: pointer to instance specific get_iprechg function

 * @bq256xx_get_vindpm: pointer to instance specific get_vindpm function

 *

 * @bq256xx_set_ichg: pointer to instance specific set_ichg function

 * @bq256xx_set_iindpm: pointer to instance specific set_iindpm function

 * @bq256xx_set_vbatreg: pointer to instance specific set_vbatreg function

 * @bq256xx_set_iterm: pointer to instance specific set_iterm function

 * @bq256xx_set_iprechg: pointer to instance specific set_iprechg function

 * @bq256xx_set_vindpm: pointer to instance specific set_vindpm function

 *

 * @bq256xx_def_ichg: default ichg value in microamps

 * @bq256xx_def_iindpm: default iindpm value in microamps

 * @bq256xx_def_vbatreg: default vbatreg value in microvolts

 * @bq256xx_def_iterm: default iterm value in microamps

 * @bq256xx_def_iprechg: default iprechg value in microamps

 * @bq256xx_def_vindpm: default vindpm value in microvolts

 *

 * @bq256xx_max_ichg: maximum charge current in microamps

 * @bq256xx_max_vbatreg: maximum battery regulation voltage in microvolts

 *

 * @has_usb_detect: indicates whether device has BC1.2 detection

 OTG reporting */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Battery driver for Marvell 88PM860x PMIC

 *

 * Copyright (c) 2012 Marvell International Ltd.

 * Author:	Jett Zhou <jtzhou@marvell.com>

 *		Haojian Zhuang <haojian.zhuang@marvell.com>

 bit definitions of Status Query Interface 2 */

 bit definitions of Measurement Enable 1 Register */

 bit definitions of Measurement Enable 3 Register */

 bit definitions of Measurement Off Time Register */

 bit definitions of GPADC Bias Current 2 Register */

 GPADC1 Bias Current value in uA unit */

 bit definitions of GPADC Misc 1 Register */

 bit definitions of Charger Control 6 Register */

 bit definitions of Coulomb Counter Reading Register */

 bit definitions of RTC miscellaneous Register1 */

 bit definitions of RTC Register1 */

 bit definitions of Power up Log register */

 coulomb counter index */

 OCV -- Open Circuit Voltage */

 Vbat range of CC for measuring Rbat */

 TBAT for batt, TINT for chip itself */

/*

 * Battery temperature based on NTC resistor, defined

 * corresponding resistor value  -- Ohm / C degeree.

 -25 */

 -10 */

 0 */

 10 */

 20 */

 30 */

 40 */

 Battery Internal Resistor */

 TINT or TBAT */

 mAh(3.6C) */

 mAh(3.6C) */

/*

 * State of Charge.

 * The first number is mAh(=3.6C), and the second number is percent point.

/*

 * register 1 bit[7:0] -- bit[11:4] of measured value of voltage

 * register 0 bit[3:0] -- bit[3:0] of measured value of voltage

 V_MEAS(mV) = data * 1.8 * 1000 / (2^12) */

 V_BATT_MEAS(mV) = value * 3 * 1.8 * 1000 / (2^12) */

		/*

		 * voltage value of VBATT in sleep mode is saved in different

		 * registers.

		 * bit[11:10] -- bit[7:6] of LDO9(0x18)

		 * bit[9:8] -- bit[7:6] of LDO8(0x17)

		 * bit[7:6] -- bit[7:6] of LDO7(0x16)

		 * bit[5:4] -- bit[7:6] of LDO6(0x15)

		 * bit[3:0] -- bit[7:4] of LDO5(0x14)

 V_BATT_MEAS(mV) = data * 3 * 1.8 * 1000 / (2^12) */

/*

 * Return value is signed data.

 * Negative value means discharging, and positive value means charging.

 current(mA) = value * 0.125 */

 since it's negative */

	/*

	 * charge(mAh)  = count * 1.6984 * 1e(-8)

	 *              = count * 16984 * 1.024 * 1.024 * 1.024 / (2 ^ 40)

	 *              = count * 18236 / (2 ^ 40)

 read to clear ccnt */

 Calculate Open Circuit Voltage */

 Calculate State of Charge (percent points) */

 clear ccnt since battery is attached or dettached */

 measure enable on GPADC1 */

 measure enable on IBAT, BAT_DET, CC. IBAT is depend on CC. */

 measure disable CC in sleep time  */

 enable GPADC */

 detect battery via GPADC1 */

 set GPADC1 bias */

 check whether battery present) */

 restore SOC from RTC domain register */

 (tmp << 8) / 1800 */

 meausered Vtbat(mV) / Ibias_current(11uA)*/

 over cold , suppose -30 roughly */

 -15 degree, code */

 -5 degree */

 in range of (0, 10) */

 in range of (10, 20) */

 in range of (20, 30) */

 in range of (30, 40) */

 over heat ,suppose 45 roughly */

 make sure that charging is launched by data > 0 */

 calculate resistor only in CC charge mode */

 current is saved */

	/*

	 * set charge current as 500mA, wait about 500ms till charging

	 * process is launched and stable with the newer charging current.

 discharging */

 charging */

	/*

	 * set charge current as 100mA, wait about 500ms till charging

	 * process is launched and stable with the newer charging current.

 discharging */

 charging */

 restore current setting */

 calculate resistor in discharging case */

 Calculate the capacity when discharging(ibat < 0) */

			/* choose the lower capacity value to report

			 * between vbat and CC when vbat < 3.6v;

			 * than 3.6v;

			/* when detect vbat > 3.6v, but cap_cc < 15,and

			 * cap_ocv is 10% larger than cap_cc, we can think

			 * CC have some accumulation error, switch to OCV

			 * to estimate capacity;

		/* when discharging, make sure current capacity

	/*

	 * store the current capacity to RTC domain register,

	 * after next power up , it will be restored.

 return 100 if battery is not attached */

 return real vbatt Voltage */

 return Open Circuit Voltage (not measured voltage) */

 Fake Temp 25C Without Battery */

 set default capacity */

 set default internal resistor */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Battery driver for Maxim MAX8925

 *

 * Copyright (c) 2009-2010 Marvell International Ltd.

 *	Haojian Zhuang <haojian.zhuang@marvell.com>

 registers in GPM */

 bits definition */

 registers in ADC */

 2 bytes registers in below. MSB is 1st, LSB is 2nd. */

 detecing MB by ID pin */

 enable charger in platform */

 enable charger */

 disable charge */

 Battery is not ready yet */

 Battery is ready now */

 VSYS is low */

 unit is uV */

 unit is uV */

 unit is uV */

 assume r_sns is 0.02 */

 uA */;

 unit is mA */

 check for power - can miss interrupt at boot time */

		/*

		 * If battery detection is enabled, ID pin of battery is

		 * connected to MBDET pin of MAX8925. It could be used to

		 * detect battery presence.

		 * Otherwise, we have to assume that battery is always on.

 disable charge */

 set charging current in charge topoff mode */

 set charing current in fast charge mode */

 Only for ac and usb */

 SPDX-License-Identifier: GPL-2.0+



 max14577_charger.c - Battery charger driver for the Maxim 14577/77836



 Copyright (C) 2013,2014 Samsung Electronics

 Krzysztof Kozlowski <krzk@kernel.org>

/*

 * Helper function for mapping values of STATUS2/CHGTYP register on max14577

 * and max77836 chipsets to enum maxim_muic_charger_type.

	/*

	 * Charging occurs only if:

	 *  - CHGCTRL2/MBCHOSTEN == 1

	 *  - STATUS2/CGMBC == 1

	 *

	 * TODO:

	 *  - handle FULL after Top-off timer (EOC register may be off

	 *    and the charger won't be charging although MBCHOSTEN is on)

	 *  - handle properly dead-battery charging (respect timer)

	 *  - handle timers (fast-charge and prequal) /MBCCHGERR/

 Charger or USB-cable is connected */

/*

 * Supported charge types:

 *  - POWER_SUPPLY_CHARGE_TYPE_NONE

 *  - POWER_SUPPLY_CHARGE_TYPE_FAST

	/*

	 * TODO: CHARGE_TYPE_TRICKLE (VCHGR_RC or EOC)?

	 * As spec says:

	 * [after reaching EOC interrupt]

	 * "When the battery is fully charged, the 30-minute (typ)

	 *  top-off timer starts. The device continues to trickle

	 *  charge the battery until the top-off timer runs out."

/*

 * Supported health statuses:

 *  - POWER_SUPPLY_HEALTH_DEAD

 *  - POWER_SUPPLY_HEALTH_OVERVOLTAGE

 *  - POWER_SUPPLY_HEALTH_GOOD

 Not dead, not overvoltage */

/*

 * Always returns 1.

 * The max14577 chip doesn't report any status of battery presence.

 * Lets assume that it will always be used with some battery.

 Disable */

 Fix for gap between 4.18V and 4.22V */

 Requested current is too low */

 <5000, 7499> and <10000, 50000> */

 Requested current is too low */

/*

 * Sets charger registers to proper and safe default values.

 * Some of these values are equal to defaults in MAX14577E

 * data sheet but there are minor differences.

	/*

	 * Charger-Type Manual Detection, default off (set CHGTYPMAN to 0)

	 * Charger-Detection Enable, default on (set CHGDETEN to 1)

	 * Combined mask of CHGDETEN and CHGTYPMAN will zero the CHGTYPMAN bit

	/*

	 * Wall-Adapter Rapid Charge, default on

	 * Battery-Charger, default on

 Auto Charging Stop, default off */

 Initialize Overvoltage-Protection Threshold */

 Support property from charger */

 CONFIG_OF */

 CONFIG_OF */

 Check for valid values for charger */

/*

 * Battery driver for LEGO MINDSTORMS EV3

 *

 * Copyright (C) 2017 David Lechner <david@lechnology.com>

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License version 2 as

 * published by the Free Software Foundation.



 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 battery voltage is iio channel * 2 + Vce of transistor */

 plus adjust for shunt resistor drop */

 battery current is iio channel / 15 / 0.05 ohms */

		/*

		 * Only allow changing technology from Unknown to NiMH. Li-ion

		 * batteries are automatically detected and should not be

		 * overridden. Rechargeable AA batteries, on the other hand,

		 * cannot be automatically detected, and so must be manually

		 * specified. This should only be set once during system init,

		 * so there is no mechanism to go back to Unknown.

	/*

	 * The rechargeable battery indication switch cannot be changed without

	 * removing the battery, so we only need to read it once.

 2-cell Li-ion, 7.4V nominal */

 6x AA Alkaline, 9V nominal */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson SA 2012

 *

 * Battery temperature driver for AB8500

 *

 * Author:

 *	Johan Palsson <johan.palsson@stericsson.com>

 *	Karl Komierowski <karl.komierowski@stericsson.com>

 *	Arun R Murthy <arun.murthy@stericsson.com>

/**

 * struct ab8500_btemp_interrupts - ab8500 interrupts

 * @name:	name of the interrupt

 * @isr		function pointer to the isr

/**

 * struct ab8500_btemp - ab8500 BTEMP device information

 * @dev:		Pointer to the structure device

 * @node:		List of AB8500 BTEMPs, hence prepared for reentrance

 * @curr_source:	What current source we use, in uA

 * @bat_temp:		Dispatched battery temperature in degree Celsius

 * @prev_bat_temp	Last measured battery temperature in degree Celsius

 * @parent:		Pointer to the struct ab8500

 * @adc_btemp_ball:	ADC channel for the battery ball temperature

 * @adc_bat_ctrl:	ADC channel for the battery control

 * @fg:			Pointer to the struct fg

 * @bm:           	Platform specific battery management information

 * @btemp_psy:		Structure for BTEMP specific battery properties

 * @events:		Structure for information about events triggered

 * @btemp_ranges:	Battery temperature range structure

 * @btemp_wq:		Work queue for measuring the temperature periodically

 * @btemp_periodic_work:	Work for measuring the temperature periodically

 * @initialized:	True if battery id read.

 BTEMP power supply properties */

/**

 * ab8500_btemp_batctrl_volt_to_res() - convert batctrl voltage to resistance

 * @di:		pointer to the ab8500_btemp structure

 * @v_batctrl:	measured batctrl voltage

 * @inst_curr:	measured instant current

 *

 * This function returns the battery resistance that is

 * derived from the BATCTRL voltage.

 * Returns value in Ohms.

		/*

		 * For ABB cut1.0 and 1.1 BAT_CTRL is internally

		 * connected to 1.8V through a 450k resistor

		/*

		 * If the battery has internal NTC, we use the current

		 * source to calculate the resistance.

		/*

		 * BAT_CTRL is internally

		 * connected to 1.8V through a 80k resistor

/**

 * ab8500_btemp_read_batctrl_voltage() - measure batctrl voltage

 * @di:		pointer to the ab8500_btemp structure

 *

 * This function returns the voltage on BATCTRL. Returns value in mV.

/**

 * ab8500_btemp_curr_source_enable() - enable/disable batctrl current source

 * @di:		pointer to the ab8500_btemp structure

 * @enable:	enable or disable the current source

 *

 * Enable or disable the current sources for the BatCtrl AD channel

	/*

	 * BATCTRL current sources are included on AB8500 cut2.0

	 * and future versions

 Only do this for batteries with internal NTC */

		/*

		 * We have to wait one 32kHz cycle before enabling

		 * the current source, since ForceBatCtrlCmpHigh needs

		 * to be written in a separate cycle

 Write 0 to the curr bits */

 Enable Pull-Up and comparator */

		/*

		 * We have to wait one 32kHz cycle before disabling

		 * ForceBatCtrlCmpHigh since this needs to be written

		 * in a separate cycle

 Disable 'force comparator' */

	/*

	 * We have to try unsetting FORCE_BAT_CTRL_CMP_HIGH one more time

	 * if we got an error above

 Write 0 to the curr bits */

 Enable Pull-Up and comparator */

	/*

	 * We have to wait one 32kHz cycle before disabling

	 * ForceBatCtrlCmpHigh since this needs to be written

	 * in a separate cycle

 Disable 'force comparator' */

/**

 * ab8500_btemp_get_batctrl_res() - get battery resistance

 * @di:		pointer to the ab8500_btemp structure

 *

 * This function returns the battery pack identification resistance.

 * Returns value in Ohms.

	/*

	 * BATCTRL current sources are included on AB8500 cut2.0

	 * and future versions

/**

 * ab8500_btemp_res_to_temp() - resistance to temperature

 * @di:		pointer to the ab8500_btemp structure

 * @tbl:	pointer to the resiatance to temperature table

 * @tbl_size:	size of the resistance to temperature table

 * @res:	resistance to calculate the temperature from

 *

 * This function returns the battery temperature in degrees Celsius

 * based on the NTC resistance.

	/*

	 * Calculate the formula for the straight line

	 * Simple interpolation if we are within

	 * the resistance table limits, extrapolate

	 * if resistance is outside the limits.

/**

 * ab8500_btemp_measure_temp() - measure battery temperature

 * @di:		pointer to the ab8500_btemp structure

 *

 * Returns battery temperature (on success) else the previous temperature

			/*

			 * Return out-of-range temperature so that

			 * charging is stopped

		/*

		 * The PCB NTC is sourced from VTVOUT via a 230kOhm

		 * resistor.

/**

 * ab8500_btemp_id() - Identify the connected battery

 * @di:		pointer to the ab8500_btemp structure

 *

 * This function will try to identify the battery by reading the ID

 * resistor. Some brands use a combined ID resistor with a NTC resistor to

 * both be able to identify and to read the temperature of it.

 BATTERY_UNKNOWN is defined on position 0, skip it! */

	/*

	 * We only have to change current source if the

	 * detected type is Type 1.

/**

 * ab8500_btemp_periodic_work() - Measuring the temperature periodically

 * @work:	pointer to the work_struct structure

 *

 * Work function for measuring the temperature periodically

 Identify the battery */

	/*

	 * Filter battery temperature.

	 * Allow direct updates on temperature only if two samples result in

	 * same temperature. Else only allow 1 degree change from previous

	 * reported value in the direction of the new measurement.

 Schedule a new measurement */

/**

 * ab8500_btemp_batctrlindb_handler() - battery removal detected

 * @irq:       interrupt number

 * @_di:       void pointer that has to address of ab8500_btemp

 *

 * Returns IRQ status(IRQ_HANDLED)

/**

 * ab8500_btemp_templow_handler() - battery temp lower than 10 degrees

 * @irq:       interrupt number

 * @_di:       void pointer that has to address of ab8500_btemp

 *

 * Returns IRQ status(IRQ_HANDLED)

/**

 * ab8500_btemp_temphigh_handler() - battery temp higher than max temp

 * @irq:       interrupt number

 * @_di:       void pointer that has to address of ab8500_btemp

 *

 * Returns IRQ status(IRQ_HANDLED)

/**

 * ab8500_btemp_lowmed_handler() - battery temp between low and medium

 * @irq:       interrupt number

 * @_di:       void pointer that has to address of ab8500_btemp

 *

 * Returns IRQ status(IRQ_HANDLED)

/**

 * ab8500_btemp_medhigh_handler() - battery temp between medium and high

 * @irq:       interrupt number

 * @_di:       void pointer that has to address of ab8500_btemp

 *

 * Returns IRQ status(IRQ_HANDLED)

/**

 * ab8500_btemp_periodic() - Periodic temperature measurements

 * @di:		pointer to the ab8500_btemp structure

 * @enable:	enable or disable periodic temperature measurements

 *

 * Starts of stops periodic temperature measurements. Periodic measurements

 * should only be done when a charger is connected.

	/*

	 * Make sure a new measurement is done directly by cancelling

	 * any pending work

/**

 * ab8500_btemp_get_temp() - get battery temperature

 * @di:		pointer to the ab8500_btemp structure

 *

 * Returns battery temperature

	/*

	 * The BTEMP events are not reliabe on AB8500 cut3.3

	 * and prior versions

/**

 * ab8500_btemp_get_property() - get the btemp properties

 * @psy:        pointer to the power_supply structure

 * @psp:        pointer to the power_supply_property structure

 * @val:        pointer to the power_supply_propval union

 *

 * This function gets called when an application tries to get the btemp

 * properties by reading the sysfs files.

 * online:	presence of the battery

 * present:	presence of the battery

 * technology:	battery technology

 * temp:	battery temperature

 * Returns error code in case of failure else 0(on success)

	/*

	 * For all psy where the name of your driver

	 * appears in any supplied_to

 Go through all properties for the psy */

 AC disconnected */

 AC connected */

 USB disconnected */

 USB connected */

/**

 * ab8500_btemp_external_power_changed() - callback for power supply changes

 * @psy:       pointer to the structure power_supply

 *

 * This function is pointing to the function pointer external_power_changed

 * of the structure power_supply.

 * This function gets executed when there is a change in the external power

 * supply to the btemp.

 ab8500 btemp driver interrupts and their respective isr */

 Create a work queue for the btemp */

 Kick off periodic temperature measurements */

 Delete the work queue */

 get parent data */

 Get ADC channels */

 Init work for measuring temperature periodically */

 Set BTEMP thermal limits. Low and Med are fixed */

 Register BTEMP power supply class */

 Register interrupts */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Power supply driver for the Active-semi ACT8945A PMIC

 *

 * Copyright (C) 2015 Atmel Corporation

 *

 * Author: Wenyou Yang <wenyou.yang@atmel.com>

/*

 * ACT8945A Charger Register Map

 0x70: Reserved */

 ACT8945A_APCH_CFG */

/*

 * Riset(K) = 2336 * (1V/Ichg(mA)) - 0.205

 * Riset = 2.43K

 SPDX-License-Identifier: GPL-2.0+



 max8998_charger.c - Power supply consumer driver for the Maxim 8998/LP3974



  Copyright (C) 2009-2010 Samsung Electronics

  MyungJoo Ham <myungjoo.ham@samsung.com>

 the presence of battery */

 charger is active or not */

 charger is charging/discharging/full */

 Note that the charger control is done by a current regulator "CHARGER" */

 Setup "End of Charge" */

	/* If EOC value equals 0,

 Setup Charge Restart Level */

 Setup Charge Full Timeout */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for SBS compliant Smart Battery System Managers

 *

 * The device communicates via i2c at address 0x0a and multiplexes access to up

 * to four smart batteries at address 0x0b.

 *

 * Via sysfs interface the online state and charge type are presented.

 *

 * Datasheet SBSM:    http://sbs-forum.org/specs/sbsm100b.pdf

 * Datasheet LTC1760: http://cds.linear.com/docs/en/datasheet/1760fb.pdf

 *

 * Karl-Heinz Schneider <karl-heinz@schneider-inet.de>

 registers addresses */

 currently selected channel */

 special capabilities */

 charge mode fast if turbo is active */

 write 1 to TURBO if type fast is given */

/*

 * Switch to battery

 * Parameter chan is directly the content of SMB_BAT* nibble

 chan goes from 1 ... 4 */

/*

 * This needs to be defined or the GPIO lib fails to register the pin.

 * But the 'gpio' is always an input.

 Device listens only at address 0x0a */

 register muxed i2c channels. One for each supported battery */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * DA9150 Fuel-Gauge Driver

 *

 * Copyright (c) 2015 Dialog Semiconductor

 *

 * Author: Adam Thomson <Adam.Thomson.Opensource@diasemi.com>

 Core2Wire */

 QIF Codes */

 QIF Sync Timeout */

 QIF E_FG_STATUS */

 Private data */

 Battery Properties */

 Set QIF code (READ mode) */

 Set QIF code (WRITE mode) */

 Trigger QIF Sync to update QIF readable data */

 Check if QIF sync already requested, and write to sync if not */

 Wait for sync to complete */

 Check if sync completed */

/*

 * Should always be called after QIF sync read has been performed, and all

 * attributes required have been accessed.

 Sync read of single QIF attribute */

 Wait for QIF Sync, write QIF data and wait for ack */

 Check if QIF sync already requested */

 Wait for an existing sync to complete */

 Write value for QIF code */

 Wait for write acknowledgment */

 Check write was actually successful */

 Power Supply attributes */

/*

 * Temperature reading from device is only valid if battery/system provides

 * valid NTC to associated pin of DA9150 chip.

 Repeated SOC check */

 Report if SOC has changed */

 SOC level event configuration */

 If SOC > warn level, set discharge warn level event */

		/*

		 * If SOC <= warn level, set discharge crit level event,

		 * and set charge warn level event.

 If SOC <= crit level, set charge crit level event */

 Read FG IRQ status info */

 Handle warning/critical threhold events */

 Clear any FG IRQs */

 Enable QIF */

 Handle DT data if provided */

 Handle any pdata provided */

 Configure initial SOC level events */

	/*

	 * If an interval period has been provided then setup repeating

	 * work for reporting data updates.

 Register IRQ */

	/*

	 * Trigger SOC check to happen now so as to indicate any value change

	 * since last check before suspend.

/*

 * Battery driver for CPCAP PMIC

 *

 * Copyright (C) 2017 Tony Lindgren <tony@atomide.com>

 *

 * Some parts of the code based on earlier Motorola mapphone Linux kernel

 * drivers:

 *

 * Copyright (C) 2009-2010 Motorola, Inc.

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License version 2 as

 * published by the Free Software Foundation.



 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

/*

 * Register bit defines for CPCAP_REG_BPEOL. Some of these seem to

 * map to MC13783UG.pdf "Table 5-19. Register 13, Power Control 0"

 * to enable BATTDETEN, LOBAT and EOL features. We currently use

 * LOBAT interrupts instead of EOL.

 Set for EOL irq */

 Set for EOL irq */

 Set for multiple EOL irqs */

 Enable battery detect */

 BPDET = 0, EOL = 1 */

/*

 * Register bit defines for CPCAP_REG_CCC1. These seem similar to the twl6030

 * coulomb counter registers rather than the mc13892 registers. Both twl6030

 * and mc13892 set bits 2 and 1 to reset and clear registers. But mc13892

 * sets bit 0 to start the coulomb counter while twl6030 sets bit 0 to stop

 * the coulomb counter like cpcap does. So for now, we use the twl6030 style

 * naming for the registers.

 Update rate */

 Update rate */

 Resets sample registers */

 Clears after write in 1s */

 Stop counters, allow write */

 24 or 32 bits */

 9 bits */

 13 or 16 bits */

 ŒºAms per LSB */

/**

 * cpcap_battery_cc_raw_div - calculate and divide coulomb counter ŒºAms values

 * @ddata: device driver data

 * @sample: coulomb counter sample value

 * @accumulator: coulomb counter integrator value

 * @offset: coulomb counter offset value

 * @divider: conversion divider

 *

 * Note that cc_lsb and cc_dur values are from Motorola Linux kernel

 * function data_get_avg_curr_ua() and seem to be based on measured test

 * results. It also has the following comment:

 *

 * Adjustment factors are applied here as a temp solution per the test

 * results. Need to work out a formal solution for this adjustment.

 *

 * A coulomb counter for similar hardware seems to be documented in

 * "TWL6030 Gas Gauging Basics (Rev. A)" swca095a.pdf in chapter

 * "10 Calculating Accumulated Current". We however follow what the

 * Motorola mapphone Linux kernel is doing as there may be either a

 * TI or ST coulomb counter in the PMIC.

 3600000ŒºAms = 1ŒºAh */

/**

 * cpcap_battery_read_accumulated - reads cpcap coulomb counter

 * @ddata: device driver data

 * @ccd: coulomb counter values

 *

 * Based on Motorola mapphone kernel function data_read_regs().

 * Looking at the registers, the coulomb counter seems similar to

 * the coulomb counter in TWL6030. See "TWL6030 Gas Gauging Basics

 * (Rev. A) swca095a.pdf for "10 Calculating Accumulated Current".

 *

 * Note that swca095a.pdf instructs to stop the coulomb counter

 * before reading to avoid values changing. Motorola mapphone

 * Linux kernel does not do it, so let's assume they've verified

 * the data produced is correct.

 CPCAP_REG_CCS1 to CCI */

 Read coulomb counter register range */

 Sample value CPCAP_REG_CCS1 & 2 */

 Accumulator value CPCAP_REG_CCA1 & 2 */

	/*

	 * Coulomb counter calibration offset is CPCAP_REG_CCM,

	 * REG_CCO seems unused

 Integrator register CPCAP_REG_CCI */

/**

 * cpcap_battery_cc_get_avg_current - read cpcap coulumb counter

 * @ddata: cpcap battery driver device data

 Coulomb counter integrator */

 Coulomb counter calibration offset  */

	/*

	 * The full battery voltage here can be inaccurate, it's used just to

	 * filter out any trickle charging events. We clear the is_full status

	 * on charger disconnect above anyways.

/*

 * Update battery status when cpcap-charger calls power_supply_changed().

 * This allows us to detect battery full condition before the charger

 * disconnects.

 (ddata->charge_full / 200) is needed for rounding */

 Assume invalid config if CHARGE_NOW is -20% */

 Assume invalid config if CHARGE_NOW exceeds CHARGE_FULL by 20% */

 Allow charger const voltage lower than battery const voltage */

 Enable calibration interrupt if already available in dts */

 Enable low battery interrupts for 3.3V high and 3.1V low */

 Calibrate coulomb counter */

 Start calibration */

 Read calibration offset from CCM */

/*

 * Based on the values from Motorola mapphone Linux kernel. In the

 * the Motorola mapphone Linux kernel tree the value for pm_cd_factor

 * is passed to the kernel via device tree. If it turns out to be

 * something device specific we can consider that too later.

 *

 * And looking at the battery full and shutdown values for the stock

 * kernel on droid 4, full is 4351000 and software initiates shutdown

 * at 3078000. The device will die around 2743000.

 ŒºAms per LSB */

 ŒºAms per LSB */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * bq2415x charger driver

 *

 * Copyright (C) 2011-2013  Pali Roh√°r <pali@kernel.org>

 *

 * Datasheets:

 * https://www.ti.com/product/bq24150

 * https://www.ti.com/product/bq24150a

 * https://www.ti.com/product/bq24152

 * https://www.ti.com/product/bq24153

 * https://www.ti.com/product/bq24153a

 * https://www.ti.com/product/bq24155

 * https://www.ti.com/product/bq24157s

 * https://www.ti.com/product/bq24158

 timeout for resetting chip timer */

 reset state for all registers */

 status register */

 control register */

 voltage register */

 vender register */

 current register */

 N/A					BIT(3) */

 mode reported by hook function */

 currently configured mode */

 1 - if driver automatically reset timer, 0 - not */

 1 - enabled, 0 - disabled; -1 - not supported */

 each registered chip must have unique id */

*** i2c read functions ****/

 read value from register */

 read value from register, apply mask and right shift it */

 read value from register and return one specified bit */

*** i2c write functions ****/

 write value to register */

 i2c_transfer returns number of messages transferred */

 read value from register, change it with mask left shifted and write back */

 change only one bit in register */

*** global functions ****/

 exec command function */

 detect chip type */

 detect chip revision */

 return chip vender code */

 convert to binary */

 reset all chip registers to default state */

*** properties functions ****/

 set current limit in mA */

 get current limit in mA */

 set weak battery voltage in mV */

 round to 100mV */

 get weak battery voltage in mV */

 set battery regulation voltage in mV */

	/*

	 * According to datasheet, maximum battery regulation voltage is

	 * 4440mV which is b101111 = 47.

 get battery regulation voltage in mV */

 set charge current in mA (platform data must provide resistor sense) */

 get charge current in mA (platform data must provide resistor sense) */

 set termination current in mA (platform data must provide resistor sense) */

 get termination current in mA (platform data must provide resistor sense) */

 set default value of property */

 set default values of all properties */

*** charger mode functions ****/

 set charger mode */

 Boost mode */

 Ignore event if it was not send by notify_node/notify_device */

 if automode is not enabled do not tell about reported_mode */

*** timer functions ****/

 enable/disable auto resetting chip timer */

 called by bq2415x_timer_work on timer error */

 delayed work function for auto resetting chip timer */

 Non fatal errors, chip is OK */

 No error */

 Timer expired */

 Battery voltage too low */

 Fatal errors, disable and reset chip */

 Overvoltage protection (chip fried) */

 Overload */

 Battery overvoltage protection */

 Thermal shutdown (too hot) */

 N/A */

 Non fatal errors, chip is OK */

 No error */

 Sleep mode */

 Poor input source */

 Timer expired */

 No battery */

 Fatal errors, disable and reset chip */

 Overvoltage protection (chip fried) */

 Battery overvoltage protection */

 Thermal shutdown (too hot) */

*** power supply interface code ****/

 TODO: maybe add more power supply properties */

 Ready */

 Charge in progress */

 Charge done */

*** additional sysfs entries for power supply interface ****/

 show *_status entries */

/*

 * set timer entry:

 *    auto - enable auto mode

 *    off - disable auto mode

 *    (other values) - reset chip timer

 show timer entry (auto or off) */

/*

 * set mode entry:

 *    auto - if automode is supported, enable it and set mode to reported

 *    none - disable charger and boost mode

 *    host - charging mode for host/hub chargers (current limit 500mA)

 *    dedicated - charging mode for dedicated chargers (unlimited current limit)

 *    boost - disable charger and enable boost mode

 show mode entry (auto, none, host, dedicated or boost) */

 show reported_mode entry (none, host, dedicated or boost) */

 directly set raw value to chip register, format: 'register value' */

 print value of chip register, format: 'register=value' */

 show all raw values of chip register, format per line: 'register=value' */

 set current and voltage limit entries (in mA or mV) */

 show current and voltage limit entries (in mA or mV) */

 set *_enable entries */

 show *_enable entries */

	/*

	 * TODO: some (appropriate) of these attrs should be switched to

	 * use power supply class props.

 main bq2415x probe function */

 Get new ID for the new device */

 Query for initial reported_mode and set it */

 main bq2415x remove function */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for UCS1002 Programmable USB Port Power Controller

 *

 * Copyright (C) 2019 Zodiac Inflight Innovations

 UCS1002 Registers */

/*

 * The Total Accumulated Charge registers store the total accumulated

 * charge delivered from the VS source to a portable device. The total

 * value is calculated using four registers, from 01h to 04h. The bit

 * weighting of the registers is given in mA/hrs.

 Other Status Register */

 Interrupt Status */

 Pin Status Register */

 General Configuration Register */

 Emulation Configuration Register */

 Switch Configuration Register */

 Current Limit Register */

 Product ID */

 Manufacture name */

 the presence of PED */

	/*

	 * To fit within 32 bits some values are rounded (uA/h)

	 *

	 * For Total Accumulated Charge Middle Low Byte register, addr

	 * 03h, byte 2

	 *

	 *   B0: 0.01084 mA/h rounded to 11 uA/h

	 *   B1: 0.02169 mA/h rounded to 22 uA/h

	 *   B2: 0.04340 mA/h rounded to 43 uA/h

	 *   B3: 0.08676 mA/h rounded to 87 uA/h

	 *   B4: 0.17350 mA/h rounded to 173 u√Å/h

	 *

	 * For Total Accumulated Charge Low Byte register, addr 04h,

	 * byte 3

	 *

	 *   B6: 0.00271 mA/h rounded to 3 uA/h

	 *   B7: 0.005422 mA/h rounded to 5 uA/h

		/*

		 * Bit corresponding to low byte (offset 0x04)

		 * B0 B1 B2 B3 B4 B5 B6 B7

		/*

		 * Bit corresponding to middle low byte (offset 0x03)

		 * B0 B1 B2 B3 B4 B5 B6 B7

		/*

		 * Bit corresponding to middle high byte (offset 0x02)

		 * B0 B1 B2 B3 B4 B5 B6 B7

		/*

		 * Bit corresponding to high byte (offset 0x01)

		 * B0 B1 B2 B3 B4 B5 B6 B7

 BE as per offsets above */

	/*

	 * The Current Measurement register stores the measured

	 * current value delivered to the portable device. The range

	 * is from 9.76 mA to 2.5 A.

/*

 * The Current Limit register stores the maximum current used by the

 * port switch. The range is from 500mA to 2.5 A.

	/*

	 * Any current limit setting exceeding the one set via ILIM

	 * pin will be rejected, so we read out freshly changed limit

	 * to make sure that it took effect.

 bad health and no status change, just schedule us again in a while */

 update attached status */

 notify the change */

	/*

	 * If the output is disabled due to 0 maximum current, just pretend the

	 * enable did work. The regulator will be enabled as soon as we get a

	 * a non-zero maximum current budget.

 Enable charge rationing by default */

	/*

	 * Ignore the M1, M2, PWR_EN, and EM_EN pin states. Set active

	 * mode selection to BC1.2 CDP.

	/*

	 * Be safe and set initial current limit to 500mA

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0+



 Fuel gauge driver for Maxim 17042 / 8966 / 8997

  Note that Maxim 8966 and 8997 are mfd and this is its subdevice.



 Copyright (C) 2011 Samsung Electronics

 MyungJoo Ham <myungjoo.ham@samsung.com>



 This driver is based on max17040_battery.c

 Status register bits */

 Interrupt mask bits */

 50 mV */

 these two have to be at the end on the list

 The value is converted into deci-centigrade scale */

 Units of LSB = 1 / 256 degree Celsius */

	/*

	 * The MAX170xx has builtin end-of-charge detection and will update

	 * FullCAP to match RepCap when it detects end of charging.

	 *

	 * When this cycle the battery gets charged to a higher (calculated)

	 * capacity then the previous cycle then FullCAP will get updated

	 * continuously once end-of-charge detection kicks in, so allow the

	 * 2 to differ a bit.

	/*

	 * Even though we are supplied, we may still be discharging if the

	 * supply is e.g. only delivering 5V 0.5A. Check current if available.

 bits [0-3] unused */

 Convert to millivolts */

 bits [0-3] unused */

 Convert to millivolts */

 Units of LSB = 20mV */

 Units of 20mV */

 Units of LSB = 10mV */

 LSB is Alert Minimum. In deci-centigrade */

 MSB is Alert Maximum. In deci-centigrade */

 Input in deci-centigrade, convert to centigrade */

 force min < max */

 Write both MAX and MIN ALERT */

 Input in Deci-Centigrade, convert to centigrade */

 force max > min */

 Write both MAX and MIN ALERT */

	/* fg_vfSoc needs to shifted by 8 bits to get the

	 * perc in 1% accuracy, to get the right rem_cap multiply

	 * full_cap0, fg_vfSoc and devide by 100

 Write dQ_acc to 200% of Capacity and dP_acc to 200% */

 Update SOC register with new SOC */

/*

 * Block write all the override values coming from platform data.

 * This function MUST be called before the POR initialization procedure

 * specified by maxim.

	/* After Power up, the MAX17042 requires 500mS in order

	 * to perform signal debouncing and initial SOC reporting

 Initialize configuration */

 write cell characterization data */

 write custom parameters */

 update capacity params */

	/* delay must be atleast 350mS to allow VFSOC

	 * to be calculated from the new configuration

 reset vfsoc0 reg */

 load new capacity params */

 Init complete, Clear the POR bit */

	/* program interrupt thresholds such that we should

	 * get interrupt for every 'off' perc change in the soc

 we implicitly handle all alerts via power_supply_changed */

 Initialize registers according to values from the platform data */

	/*

	 * Require current sense resistor value to be specified for

	 * current-sense functionality to be enabled at all.

	/*

	 * Some firmwares do not set FullSOCThr, Enable End-of-Charge Detection

	 * when the voltage FG reports 95%, as recommended in the datasheet.

	/*

	 * The MAX17047 gets used on x86 where we might not have pdata, assume

	 * the firmware will already have initialized the fuel-gauge and provide

	 * default values for the non init bits to make things work.

 If bits 0-1 are set to 3 then only Voltage readings are used */

	/* When current is not measured,

		/*

		 * On ACPI systems the IRQ may be handled by ACPI-event code,

		 * so we need to share (if the ACPI code is willing to share).

 Not able to update the charge threshold when exceeded? -> disable */

	/*

	 * disable the irq and enable irq_wake

	 * capability to the interrupt line.

 re-program the SOC thresholds to 1% change */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Battery driver for 7th-generation Microsoft Surface devices via Surface

 * System Aggregator Module (SSAM).

 *

 * Copyright (C) 2019-2021 Maximilian Luz <luzmaximilian@gmail.com>

 -- SAM interface. -------------------------------------------------------- */

 Equivalent to data returned in ACPI _BIX method, revision 0. */

 Equivalent to data returned in ACPI _BST method. */

 Get battery status (_STA) */

 Get battery static information (_BIX). */

 Get battery dynamic information (_BST). */

 Set battery trip point (_BTP). */

 -- Device structures. ---------------------------------------------------- */

 Guards access to state data below. */

 -- Module parameters. ---------------------------------------------------- */

 -- State management. ----------------------------------------------------- */

/*

 * Delay for battery update quirk. See spwr_external_power_changed() below

 * for more details.

 Enforce NULL terminated strings in case anything goes wrong... */

 If battery has been attached, (re-)initialize alarm. */

	/*

	 * Warn if the unit has changed. This is something we genuinely don't

	 * expect to happen, so make this a big warning. If it does, we'll

	 * need to add support for it.

	/*

	 * We cannot use strict matching when registering the notifier as the

	 * EC expects us to register it against instance ID 0. Strict matching

	 * would thus drop events, as those may have non-zero instance IDs in

	 * this subsystem. So we need to check the instance ID of the event

	 * here manually.

		/*

		 * TODO: Implement support for battery protection status change

		 *       event.

		/*

		 * TODO: Implement support for DPTF event.

	/*

	 * Handle battery update quirk: When the battery is fully charged (or

	 * charged up to the limit imposed by the UEFI battery limit) and the

	 * adapter is plugged in or removed, the EC does not send a separate

	 * event for the state (charging/discharging) change. Furthermore it

	 * may take some time until the state is updated on the battery.

	 * Schedule an update to solve this.

 -- Properties. ----------------------------------------------------------- */

 Abort if battery is not present. */

 -- Alarm attribute. ------------------------------------------------------ */

 -- Device setup. --------------------------------------------------------- */

 need to register with instance 0 */

 Make sure the device is there and functioning properly. */

 Satisfy lockdep although we are in an exclusive context here. */

 -- Driver setup. --------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson SA 2012

 *

 * Charger driver for AB8500

 *

 * Author:

 *	Johan Palsson <johan.palsson@stericsson.com>

 *	Karl Komierowski <karl.komierowski@stericsson.com>

 *	Arun R Murthy <arun.murthy@stericsson.com>

 Charger constants */

 seconds */

 HW failure constants */

 UsbLineStatus register bit masks */

 Watchdog timeout constant */

 4min */

 Lowest charger voltage is 3.39V -> 0x4E */

 Step up/down delay in us */

 in ms */

 Wait for enumeration before charing in us */

External charger control*/

 UsbLineStatus register - usb types */

 HighSpeed Reset */

 FullSpeed/LowSpeed Reset */

 VBUS input current limits supported in AB8500 in mA */

/**

 * struct ab8500_charger_interrupts - ab8500 interupts

 * @name:	name of the interrupt

 * @isr		function pointer to the isr

/**

 * struct ab8500_charger - ab8500 Charger device information

 * @dev:		Pointer to the structure device

 * @vbus_detected:	VBUS detected

 * @vbus_detected_start:

 *			VBUS detected during startup

 * @ac_conn:		This will be true when the AC charger has been plugged

 * @vddadc_en_ac:	Indicate if VDD ADC supply is enabled because AC

 *			charger is enabled

 * @vddadc_en_usb:	Indicate if VDD ADC supply is enabled because USB

 *			charger is enabled

 * @vbat		Battery voltage

 * @old_vbat		Previously measured battery voltage

 * @usb_device_is_unrecognised	USB device is unrecognised by the hardware

 * @autopower		Indicate if we should have automatic pwron after pwrloss

 * @autopower_cfg	platform specific power config support for "pwron after pwrloss"

 * @invalid_charger_detect_state State when forcing AB to use invalid charger

 * @is_aca_rid:		Incicate if accessory is ACA type

 * @current_stepping_sessions:

 *			Counter for current stepping sessions

 * @parent:		Pointer to the struct ab8500

 * @adc_main_charger_v	ADC channel for main charger voltage

 * @adc_main_charger_c	ADC channel for main charger current

 * @adc_vbus_v		ADC channel for USB charger voltage

 * @adc_usb_charger_c	ADC channel for USB charger current

 * @bm:           	Platform specific battery management information

 * @flags:		Structure for information about events triggered

 * @usb_state:		Structure for usb stack information

 * @max_usb_in_curr:	Max USB charger input current

 * @ac_chg:		AC charger power supply

 * @usb_chg:		USB charger power supply

 * @ac:			Structure that holds the AC charger properties

 * @usb:		Structure that holds the USB charger properties

 * @regu:		Pointer to the struct regulator

 * @charger_wq:		Work queue for the IRQs and checking HW state

 * @usb_ipt_crnt_lock:	Lock to protect VBUS input current setting from mutuals

 * @pm_lock:		Lock to prevent system to suspend

 * @check_vbat_work	Work for checking vbat threshold to adjust vbus current

 * @check_hw_failure_work:	Work for checking HW state

 * @check_usbchgnotok_work:	Work for checking USB charger not ok status

 * @kick_wd_work:		Work for kicking the charger watchdog in case

 *				of ABB rev 1.* due to the watchog logic bug

 * @ac_charger_attached_work:	Work for checking if AC charger is still

 *				connected

 * @usb_charger_attached_work:	Work for checking if USB charger is still

 *				connected

 * @ac_work:			Work for checking AC charger connection

 * @detect_usb_type_work:	Work for detecting the USB type connected

 * @usb_link_status_work:	Work for checking the new USB link status

 * @usb_state_changed_work:	Work for checking USB state

 * @attach_work:		Work for detecting USB type

 * @vbus_drop_end_work:		Work for detecting VBUS drop end

 * @check_main_thermal_prot_work:

 *				Work for checking Main thermal status

 * @check_usb_thermal_prot_work:

 *				Work for checking USB thermal status

 * @charger_attached_mutex:	For controlling the wakelock

 AC properties */

 USB properties */

/*

 * Function for enabling and disabling sw fallback mode

 * should always be disabled when no charger is connected.

 read the register containing fallback bit */

 enable the OPT emulation registers */

 write back the changed fallback bit value to register */

 disable the set OTP registers again */

/**

 * ab8500_power_supply_changed - a wrapper with local extensions for

 * power_supply_changed

 * @di:	  pointer to the ab8500_charger structure

 * @psy:  pointer to power_supply_that have changed.

 *

	/*

	 * This happens if we get notifications or interrupts and

	 * the platform has been configured not to support one or

	 * other type of charging.

		/*

		 * Sometimes the platform is configured not to support

		 * USB charging and no psy has been created, but we still

		 * will get these notifications.

/**

 * ab8500_charger_get_ac_voltage() - get ac charger voltage

 * @di:		pointer to the ab8500_charger structure

 *

 * Returns ac charger voltage (on success)

 Only measure voltage if the charger is connected */

/**

 * ab8500_charger_ac_cv() - check if the main charger is in CV mode

 * @di:		pointer to the ab8500_charger structure

 *

 * Returns ac charger CV mode (on success) else error code

 Only check CV mode if the charger is online */

/**

 * ab8500_charger_get_vbus_voltage() - get vbus voltage

 * @di:		pointer to the ab8500_charger structure

 *

 * This function returns the vbus voltage.

 * Returns vbus voltage (on success)

 Only measure voltage if the charger is connected */

/**

 * ab8500_charger_get_usb_current() - get usb charger current

 * @di:		pointer to the ab8500_charger structure

 *

 * This function returns the usb charger current.

 * Returns usb current (on success) and error code on failure

 Only measure current if the charger is online */

/**

 * ab8500_charger_get_ac_current() - get ac charger current

 * @di:		pointer to the ab8500_charger structure

 *

 * This function returns the ac charger current.

 * Returns ac current (on success) and error code on failure.

 Only measure current if the charger is online */

/**

 * ab8500_charger_usb_cv() - check if the usb charger is in CV mode

 * @di:		pointer to the ab8500_charger structure

 *

 * Returns ac charger CV mode (on success) else error code

 Only check CV mode if the charger is online */

/**

 * ab8500_charger_detect_chargers() - Detect the connected chargers

 * @di:		pointer to the ab8500_charger structure

 * @probe:	if probe, don't delay and wait for HW

 *

 * Returns the type of charger connected.

 * For USB it will not mean we can actually charge from it

 * but that there is a USB cable connected that we have to

 * identify. This is used during startup when we don't get

 * interrupts of the charger detection

 *

 * Returns an integer value, that means,

 * NO_PW_CONN  no power supply is connected

 * AC_PW_CONN  if the AC power supply is connected

 * USB_PW_CONN  if the USB power supply is connected

 * AC_PW_CONN + USB_PW_CONN if USB and AC power supplies are both connected

 Check for AC charger */

 Check for USB charger */

		/*

		 * AB8500 says VBUS_DET_DBNC1 & VBUS_DET_DBNC100

		 * when disconnecting ACA even though no

		 * charger was connected. Try waiting a little

		 * longer than the 100 ms of VBUS_DET_DBNC100...

/**

 * ab8500_charger_max_usb_curr() - get the max curr for the USB type

 * @di:			pointer to the ab8500_charger structure

 * @link_status:	the identified USB type

 *

 * Get the maximum current that is allowed to be drawn from the host

 * based on the USB type.

 * Returns error code in case of failure else 0 on success

	/*

	 * Platform only supports USB 2.0.

	 * This means that charging current from USB source

	 * is maximum 500 mA. Every occurrence of USB_STAT_*_HOST_*

	 * should set USB_CH_IP_CUR_LVL_0P5.

		/*

		 * Dedicated charger level minus maximum current accessory

		 * can consume (900mA). Closest level is 500mA

		/*

		 * Dedicated charger level minus 120mA (20mA for ACA and

		 * 100mA for potential accessory). Closest level is 1300mA

/**

 * ab8500_charger_read_usb_type() - read the type of usb connected

 * @di:		pointer to the ab8500_charger structure

 *

 * Detect the type of the plugged USB

 * Returns error code in case of failure else 0 on success

 get the USB type */

/**

 * ab8500_charger_detect_usb_type() - get the type of usb connected

 * @di:		pointer to the ab8500_charger structure

 *

 * Detect the type of the plugged USB

 * Returns error code in case of failure else 0 on success

	/*

	 * On getting the VBUS rising edge detect interrupt there

	 * is a 250ms delay after which the register UsbLineStatus

	 * is filled with valid data.

		/*

		 * Until the IT source register is read the UsbLineStatus

		 * register is not updated, hence doing the same

		 * Revisit this:

 get the USB type */

/*

 * This array maps the raw hex value to charger voltage used by the AB8500

 * Values taken from the UM0836

 Special case for voltage below 3.5V */

 If not last element, return error */

 If not last element, return error */

 If not last element, return error */

/**

 * ab8500_charger_get_usb_cur() - get usb current

 * @di:		pointer to the ab8500_charger structre

 *

 * The usb stack provides the maximum current that can be drawn from

 * the standard usb host. This will be in mA.

 * This function converts current in mA to a value that can be written

 * to the register. Returns -1 if charging is not allowed

/**

 * ab8500_charger_check_continue_stepping() - Check to allow stepping

 * @di:		pointer to the ab8500_charger structure

 * @reg:	select what charger register to check

 *

 * Check if current stepping should be allowed to continue.

 * Checks if charger source has not collapsed. If it has, further stepping

 * is not allowed.

/**

 * ab8500_charger_set_current() - set charger current

 * @di:		pointer to the ab8500_charger structure

 * @ich:	charger current, in mA

 * @reg:	select what charger register to set

 *

 * Set charger current.

 * There is no state machine in the AB to step up/down the charger

 * current to avoid dips and spikes on MAIN, VBUS and VBAT when

 * charging is started. Instead we need to implement

 * this charger current step-up/down here.

 * Returns error code in case of failure else 0(on success)

 only update current if it's been changed */

/**

 * ab8500_charger_set_vbus_in_curr() - set VBUS input current limit

 * @di:		pointer to the ab8500_charger structure

 * @ich_in:	charger input current limit

 *

 * Sets the current that can be drawn from the USB host

 * Returns error code in case of failure else 0(on success)

 We should always use to lowest current limit */

/**

 * ab8500_charger_set_main_in_curr() - set main charger input current

 * @di:		pointer to the ab8500_charger structure

 * @ich_in:	input charger current, in mA

 *

 * Set main charger input current.

 * Returns error code in case of failure else 0(on success)

/**

 * ab8500_charger_set_output_curr() - set charger output current

 * @di:		pointer to the ab8500_charger structure

 * @ich_out:	output charger current, in mA

 *

 * Set charger output current.

 * Returns error code in case of failure else 0(on success)

/**

 * ab8500_charger_led_en() - turn on/off chargign led

 * @di:		pointer to the ab8500_charger structure

 * @on:		flag to turn on/off the chargign led

 *

 * Power ON/OFF charging LED indication

 * Returns error code in case of failure else 0(on success)

 Power ON charging LED indicator, set LED current to 5mA */

 LED indicator PWM duty cycle 252/256 */

 Power off charging LED indicator */

/**

 * ab8500_charger_ac_en() - enable or disable ac charging

 * @di:		pointer to the ab8500_charger structure

 * @enable:	enable/disable flag

 * @vset:	charging voltage

 * @iset:	charging current

 *

 * Enable/Disable AC/Mains charging and turns on/off the charging led

 * respectively.

 Check if AC is connected */

 Enable AC charging */

		/*

		 * Due to a bug in AB8500, BTEMP_HIGH/LOW interrupts

		 * will be triggered every time we enable the VDD ADC supply.

		 * This will turn off charging for a short while.

		 * It can be avoided by having the supply on when

		 * there is a charger enabled. Normally the VDD ADC supply

		 * is enabled every time a GPADC conversion is triggered.

		 * We will force it to be enabled from this driver to have

		 * the GPADC module independent of the AB8500 chargers

 Check if the requested voltage or current is valid */

 ChVoltLevel: maximum battery charging voltage */

 MainChInputCurr: current that can be drawn from the charger*/

 ChOutputCurentLevel: protected output current */

 Check if VBAT overshoot control should be enabled */

 Enable Main Charger */

 Power on charging LED indication */

 Disable AC charging */

			/*

			 * For ABB revision 1.0 and 1.1 there is a bug in the

			 * watchdog logic. That means we have to continuously

			 * kick the charger watchdog even when no charger is

			 * connected. This is only valid once the AC charger

			 * has been enabled. This is a bug that is not handled

			 * by the algorithm and the watchdog have to be kicked

			 * by the charger driver when the AC charger

			 * is disabled

			/*

			 * We can't turn off charging completely

			 * due to a bug in AB8500 cut1.

			 * If we do, charging will not start again.

			 * That is why we set the lowest voltage

			 * and current possible

 Disable regulator if enabled */

/**

 * ab8500_charger_usb_en() - enable usb charging

 * @di:		pointer to the ab8500_charger structure

 * @enable:	enable/disable flag

 * @vset:	charging voltage

 * @ich_out:	charger output current

 *

 * Enable/Disable USB charging and turns on/off the charging led respectively.

 * Returns error code in case of failure else 0(on success)

 Check if USB is connected */

		/*

		 * Due to a bug in AB8500, BTEMP_HIGH/LOW interrupts

		 * will be triggered every time we enable the VDD ADC supply.

		 * This will turn off charging for a short while.

		 * It can be avoided by having the supply on when

		 * there is a charger enabled. Normally the VDD ADC supply

		 * is enabled every time a GPADC conversion is triggered.

		 * We will force it to be enabled from this driver to have

		 * the GPADC module independent of the AB8500 chargers

 Enable USB charging */

 Check if the requested voltage or current is valid */

		/*

		 * ChVoltLevel: max voltage up to which battery can be

		 * charged

 Check if VBAT overshoot control should be enabled */

 Enable USB Charger */

 If success power on charging LED indication */

 USBChInputCurr: current that can be drawn from the usb */

 ChOutputCurentLevel: protected output current */

 Disable USB charging */

 USBChInputCurr: current that can be drawn from the usb */

 ChOutputCurentLevel: protected output current */

 Disable regulator if enabled */

 Cancel any pending Vbat check work */

Toggle External charger control pin*/

/**

 * ab8500_charger_usb_check_enable() - enable usb charging

 * @charger:	pointer to the ux500_charger structure

 * @vset:	charging voltage

 * @iset:	charger output current

 *

 * Check if the VBUS charger has been disconnected and reconnected without

 * AB8500 rising an interrupt. Returns 0 on success.

/**

 * ab8500_charger_ac_check_enable() - enable usb charging

 * @charger:	pointer to the ux500_charger structure

 * @vset:	charging voltage

 * @iset:	charger output current

 *

 * Check if the AC charger has been disconnected and reconnected without

 * AB8500 rising an interrupt. Returns 0 on success.

/**

 * ab8500_charger_watchdog_kick() - kick charger watchdog

 * @di:		pointer to the ab8500_charger structure

 *

 * Kick charger watchdog

 * Returns error code in case of failure else 0(on success)

/**

 * ab8500_charger_update_charger_current() - update charger current

 * @di:		pointer to the ab8500_charger structure

 *

 * Update the charger output current for the specified charger

 * Returns error code in case of failure else 0(on success)

 Reset the main and usb drop input current measurement counter */

 For all psy where the driver name appears in any supplied_to */

 Go through all properties for the psy */

/**

 * ab8500_charger_check_vbat_work() - keep vbus current within spec

 * @work	pointer to the work_struct structure

 *

 * Due to a asic bug it is necessary to lower the input current to the vbus

 * charger when charging with at some specific levels. This issue is only valid

 * for below a certain battery voltage. This function makes sure that the

 * the allowed current limit isn't exceeded.

 First run old_vbat is 0. */

	/*

	 * No need to check the battery voltage every second when not close to

	 * the threshold.

/**

 * ab8500_charger_check_hw_failure_work() - check main charger failure

 * @work:	pointer to the work_struct structure

 *

 * Work queue function for checking the main charger status

 Check if the status bits for HW failure is still active */

 If we still have a failure, schedule a new check */

/**

 * ab8500_charger_kick_watchdog_work() - kick the watchdog

 * @work:	pointer to the work_struct structure

 *

 * Work queue function for kicking the charger watchdog.

 *

 * For ABB revision 1.0 and 1.1 there is a bug in the watchdog

 * logic. That means we have to continuously kick the charger

 * watchdog even when no charger is connected. This is only

 * valid once the AC charger has been enabled. This is

 * a bug that is not handled by the algorithm and the

 * watchdog have to be kicked by the charger driver

 * when the AC charger is disabled

 Schedule a new watchdog kick */

/**

 * ab8500_charger_ac_work() - work to get and set main charger status

 * @work:	pointer to the work_struct structure

 *

 * Work queue function for checking the main charger status

	/*

	 * Since we can't be sure that the events are received

	 * synchronously, we have the check if the main charger is

	 * connected by reading the status register

/**

 * ab8500_charger_detect_usb_type_work() - work to detect USB type

 * @work:	Pointer to the work_struct structure

 *

 * Detect the type of USB plugged

	/*

	 * Since we can't be sure that the events are received

	 * synchronously, we have the check if is

	 * connected by reading the status register

			/*

			 * For ABB cut2.0 and onwards we have an IRQ,

			 * USB_LINK_STATUS that will be triggered when the USB

			 * link status changes. The exception is USB connected

			 * during startup. Then we don't get a

			 * USB_LINK_STATUS IRQ

/**

 * ab8500_charger_usb_link_attach_work() - work to detect USB type

 * @work:	pointer to the work_struct structure

 *

 * Detect the type of USB plugged

 Update maximum input current if USB enumeration is not detected */

/**

 * ab8500_charger_usb_link_status_work() - work to detect USB type

 * @work:	pointer to the work_struct structure

 *

 * Detect the type of USB plugged

	/*

	 * Since we can't be sure that the events are received

	 * synchronously, we have the check if  is

	 * connected by reading the status register

	/*

	 * Some chargers that breaks the USB spec is

	 * identified as invalid by AB8500 and it refuse

	 * to start the charging process. but by jumping

	 * through a few hoops it can be forced to start.

Enable charger*/

Enable charger detection*/

exit and wait for new link status interrupt.*/

Stop charger detection*/

Check link status*/

 No valid charger type detected */

 Only wait once */

		/*

		 * when suspend->resume there should be delay

		 * of 1sec for enabling charging

		/*

		 * USB is configured, enable charging with the charging

		 * input current obtained from USB driver

 Update maximum input current */

/**

 * ab8500_charger_check_usbchargernotok_work() - check USB chg not ok status

 * @work:	pointer to the work_struct structure

 *

 * Work queue function for checking the USB charger Not OK status

 Check if the status bit for usbchargernotok is still active */

 Check again in 1sec */

/**

 * ab8500_charger_check_main_thermal_prot_work() - check main thermal status

 * @work:	pointer to the work_struct structure

 *

 * Work queue function for checking the Main thermal prot status

 Check if the status bit for main_thermal_prot is still active */

/**

 * ab8500_charger_check_usb_thermal_prot_work() - check usb thermal status

 * @work:	pointer to the work_struct structure

 *

 * Work queue function for checking the USB thermal prot status

 Check if the status bit for usb_thermal_prot is still active */

/**

 * ab8500_charger_mainchunplugdet_handler() - main charger unplugged

 * @irq:       interrupt number

 * @_di:       pointer to the ab8500_charger structure

 *

 * Returns IRQ status(IRQ_HANDLED)

/**

 * ab8500_charger_mainchplugdet_handler() - main charger plugged

 * @irq:       interrupt number

 * @_di:       pointer to the ab8500_charger structure

 *

 * Returns IRQ status(IRQ_HANDLED)

/**

 * ab8500_charger_mainextchnotok_handler() - main charger not ok

 * @irq:       interrupt number

 * @_di:       pointer to the ab8500_charger structure

 *

 * Returns IRQ status(IRQ_HANDLED)

 Schedule a new HW failure check */

/**

 * ab8500_charger_mainchthprotr_handler() - Die temp is above main charger

 * thermal protection threshold

 * @irq:       interrupt number

 * @_di:       pointer to the ab8500_charger structure

 *

 * Returns IRQ status(IRQ_HANDLED)

/**

 * ab8500_charger_mainchthprotf_handler() - Die temp is below main charger

 * thermal protection threshold

 * @irq:       interrupt number

 * @_di:       pointer to the ab8500_charger structure

 *

 * Returns IRQ status(IRQ_HANDLED)

 Reset the drop counter */

 USB source is collapsing */

		/*

		 * USB source can not give more than this amount.

		 * Taking more will collapse the source.

/**

 * ab8500_charger_vbusdetf_handler() - VBUS falling detected

 * @irq:       interrupt number

 * @_di:       pointer to the ab8500_charger structure

 *

 * Returns IRQ status(IRQ_HANDLED)

/**

 * ab8500_charger_vbusdetr_handler() - VBUS rising detected

 * @irq:       interrupt number

 * @_di:       pointer to the ab8500_charger structure

 *

 * Returns IRQ status(IRQ_HANDLED)

/**

 * ab8500_charger_usblinkstatus_handler() - USB link status has changed

 * @irq:       interrupt number

 * @_di:       pointer to the ab8500_charger structure

 *

 * Returns IRQ status(IRQ_HANDLED)

/**

 * ab8500_charger_usbchthprotr_handler() - Die temp is above usb charger

 * thermal protection threshold

 * @irq:       interrupt number

 * @_di:       pointer to the ab8500_charger structure

 *

 * Returns IRQ status(IRQ_HANDLED)

/**

 * ab8500_charger_usbchthprotf_handler() - Die temp is below usb charger

 * thermal protection threshold

 * @irq:       interrupt number

 * @_di:       pointer to the ab8500_charger structure

 *

 * Returns IRQ status(IRQ_HANDLED)

/**

 * ab8500_charger_usbchargernotokr_handler() - USB charger not ok detected

 * @irq:       interrupt number

 * @_di:       pointer to the ab8500_charger structure

 *

 * Returns IRQ status(IRQ_HANDLED)

/**

 * ab8500_charger_chwdexp_handler() - Charger watchdog expired

 * @irq:       interrupt number

 * @_di:       pointer to the ab8500_charger structure

 *

 * Returns IRQ status(IRQ_HANDLED)

	/*

	 * The charger that was online when the watchdog expired

	 * needs to be restarted for charging to start again

/**

 * ab8500_charger_vbuschdropend_handler() - VBUS drop removed

 * @irq:       interrupt number

 * @_di:       pointer to the ab8500_charger structure

 *

 * Returns IRQ status(IRQ_HANDLED)

	/*

	 * VBUS might have dropped due to bad connection.

	 * Schedule a new input limit set to the value SW requests.

/**

 * ab8500_charger_vbusovv_handler() - VBUS overvoltage detected

 * @irq:       interrupt number

 * @_di:       pointer to the ab8500_charger structure

 *

 * Returns IRQ status(IRQ_HANDLED)

 Schedule a new HW failure check */

/**

 * ab8500_charger_ac_get_property() - get the ac/mains properties

 * @psy:       pointer to the power_supply structure

 * @psp:       pointer to the power_supply_property structure

 * @val:       pointer to the power_supply_propval union

 *

 * This function gets called when an application tries to get the ac/mains

 * properties by reading the sysfs files.

 * AC/Mains properties are online, present and voltage.

 * online:     ac/mains charging is in progress or not

 * present:    presence of the ac/mains

 * voltage:    AC/Mains voltage

 * Returns error code in case of failure else 0(on success)

 On error, use previous value */

		/*

		 * This property is used to indicate when CV mode is entered

		 * for the AC charger

/**

 * ab8500_charger_usb_get_property() - get the usb properties

 * @psy:        pointer to the power_supply structure

 * @psp:        pointer to the power_supply_property structure

 * @val:        pointer to the power_supply_propval union

 *

 * This function gets called when an application tries to get the usb

 * properties by reading the sysfs files.

 * USB properties are online, present and voltage.

 * online:     usb charging is in progress or not

 * present:    presence of the usb

 * voltage:    vbus voltage

 * Returns error code in case of failure else 0(on success)

		/*

		 * This property is used to indicate when CV mode is entered

		 * for the USB charger

		/*

		 * This property is used to indicate when VBUS has collapsed

		 * due to too high output current from the USB charger

/**

 * ab8500_charger_init_hw_registers() - Set up charger related registers

 * @di:		pointer to the ab8500_charger structure

 *

 * Set up charger OVV, watchdog and maximum voltage registers as well as

 * charging of the backup battery

 Setup maximum charger current and voltage for ABB cut2.0 */

		/*

		 * VBUS OVV set to 6.3V and enable automatic current limitation

 Enable main watchdog in OTP */

 Enable main watchdog */

	/*

	 * Due to internal synchronisation, Enable and Kick watchdog bits

	 * cannot be enabled in a single write.

	 * A minimum delay of 2*32 kHz period (62.5¬µs) must be inserted

	 * between writing Enable then Kick bits.

 Kick main watchdog */

 Disable main watchdog */

 Set watchdog timeout */

 Enable backup battery charging */

/*

 * ab8500 charger driver interrupts and their respective isr

	/* TODO: State is fabricate  here. See if charger really needs USB

	 * state or if mA is enough

 8, 100, 500 */

 Should never occur */

	/*

	 * wait for some time until you get updates from the usb stack

	 * and negotiations are completed

	/*

	 * For ABB revision 1.0 and 1.1 there is a bug in the watchdog

	 * logic. That means we have to continuously kick the charger

	 * watchdog even when no charger is connected. This is only

	 * valid once the AC charger has been enabled. This is

	 * a bug that is not handled by the algorithm and the

	 * watchdog have to be kicked by the charger driver

	 * when the AC charger is disabled

 If not already pending start a new timer */

 If we still have a HW failure, schedule a new check */

 Cancel any pending jobs */

 Create a work queue for the charger */

 Disable AC charging */

 Disable USB charging */

 Backup battery voltage and current disable */

 Delete the work queue */

 Unbind fg, btemp, algorithm */

 get parent data */

 Get ADC channels */

	/*

	 * VDD ADC supply needs to be enabled from this driver when there

	 * is a charger connected to avoid erroneous BTEMP_HIGH/LOW

	 * interrupts during charging

 Request interrupts */

 initialize lock */

 AC and USB supply config */

 AC supply */

 ux500_charger sub-class */

	/*

	 * The AB8505 only supports USB charging. If we are not the

	 * AB8505, register an AC charger.

	 *

	 * TODO: if this should be opt-in, add DT properties for this.

 USB supply */

 ux500_charger sub-class */

 Init work for HW failure check */

	/*

	 * For ABB revision 1.0 and 1.1 there is a bug in the watchdog

	 * logic. That means we have to continuously kick the charger

	 * watchdog even when no charger is connected. This is only

	 * valid once the AC charger has been enabled. This is

	 * a bug that is not handled by the algorithm and the

	 * watchdog have to be kicked by the charger driver

	 * when the AC charger is disabled

 Init work for charger detection */

 Init work for checking HW status */

 Initialize OVV, and other registers */

 Register AC charger class */

 Register USB charger class */

 Identify the connected charger types during startup */

 Create something that will match the subdrivers when we bind */

 Notifier for external charger enabling */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2011 Samsung Electronics Co., Ltd.

 * MyungJoo Ham <myungjoo.ham@samsung.com>

 *

 * This driver enables to monitor battery health and control charger

 * during suspend-to-mem.

 * Charger manager depends on other devices. Register this later than

 * the depending devices.

 *

 Current textual representations */

 Deprecated textual representations */

/*

 * Default temperature threshold for charging.

 * Every temperature units are in tenth of centigrade.

/*

 * Regard CM_JIFFIES_SMALL jiffies is small enough to ignore for

 * delayed works so that we can run delayed works with CM_JIFFIES_SMALL

 * without any delays.

 If y is valid (> 0) and smaller than x, do x = y */

/*

 * Regard CM_RTC_SMALL (sec) is small enough to ignore error in invoking

 * rtc alarm. It should be 2 or larger

 About in-suspend (suspend-again) monitoring */

 About normal (not suspended) monitoring */

 ULONG_MAX: no polling */

 Next appointed polling time */

 init at driver add */

 init at driver add */

/**

 * is_batt_present - See if the battery presents in place.

 * @cm: the Charger Manager representing the battery.

/**

 * is_ext_pwr_online - See if an external power source is attached to charge

 * @cm: the Charger Manager representing the battery.

 *

 * Returns true if at least one of the chargers of the battery has an external

 * power source attached to charge the battery regardless of whether it is

 * actually charging or not.

 If at least one of them has one, it's yes. */

/**

 * get_batt_uV - Get the voltage level of the battery

 * @cm: the Charger Manager representing the battery.

 * @uV: the voltage level returned.

 *

 * Returns 0 if there is no error.

 * Returns a negative value on error.

/**

 * is_charging - Returns true if the battery is being charged.

 * @cm: the Charger Manager representing the battery.

 If there is no battery, it cannot be charged */

 If at least one of the charger is charging, return yes */

 1. The charger sholuld not be DISABLED */

 2. The charger should be online (ext-power) */

		/*

		 * 3. The charger should not be FULL, DISCHARGING,

		 * or NOT_CHARGING.

 Then, this is charging. */

/**

 * is_full_charged - Returns true if the battery is fully charged.

 * @cm: the Charger Manager representing the battery.

 If there is no battery, it cannot be charged */

 Full, if it's over the fullbatt voltage */

 Battery is already full, checks voltage drop. */

 Not full if capacity of fuel gauge isn't full */

 Full, if the capacity is more than fullbatt_soc */

/**

 * is_polling_required - Return true if need to continue polling for this CM.

 * @cm: the Charger Manager representing the battery.

/**

 * try_charger_enable - Enable/Disable chargers altogether

 * @cm: the Charger Manager representing the battery.

 * @enable: true: enable / false: disable

 *

 * Note that Charger Manager keeps the charger enabled regardless whether

 * the charger is charging or not (because battery is full or no external

 * power source exists) except when CM needs to disable chargers forcibly

 * because of emergency causes; when the battery is overheated or too cold.

 Ignore if it's redundant command */

		/*

		 * Save start time of charging to limit

		 * maximum possible charging time.

		/*

		 * Save end time of charging to maintain fully charged state

		 * of battery after full-batt.

		/*

		 * Abnormal battery state - Stop charging forcibly,

		 * even if charger was enabled at the other places

/**

 * check_charging_duration - Monitor charging/discharging duration

 * @cm: the Charger Manager representing the battery.

 *

 * If whole charging duration exceed 'charging_max_duration_ms',

 * cm stop charging to prevent overcharge/overheat. If discharging

 * duration exceed 'discharging _max_duration_ms', charger cable is

 * attached, after full-batt, cm start charging to maintain fully

 * charged state for battery.

 Calibrate temperature unit */

 if-else continued from CONFIG_THERMAL */

		/* FIXME:

		 * No information of battery temperature might

		 * occur hazardous result. We have to handle it

		 * depending on battery type.

/**

 * cm_get_target_status - Check current status and get next target status.

 * @cm: the Charger Manager representing the battery.

 Check if discharging duration exceeds limit. */

 Check if charging duration exceeds limit. */

 Charging is allowed. */

/**

 * _cm_monitor - Monitor the temperature and return true for exceptions.

 * @cm: the Charger Manager representing the battery.

 *

 * Returns true if there is an event to notify for the battery.

 * (True if the status of "emergency_stop" changes)

/**

 * cm_monitor - Monitor every battery.

 *

 * Returns true if there is an event to notify from any of the batteries.

 * (True if the status of "emergency_stop" changes)

/**

 * _setup_polling - Setup the next instance of polling.

 * @work: work_struct of the function _setup_polling.

	/*

	 * Use mod_delayed_work() iff the next polling interval should

	 * occur before the currently scheduled one.  If @cm_monitor_work

	 * isn't active, the end result is the same, so no need to worry

	 * about stale @next_polling.

/**

 * cm_monitor_poller - The Monitor / Poller.

 * @work: work_struct of the function cm_monitor_poller

 *

 * During non-suspended state, cm_monitor_poller is used to poll and monitor

 * the batteries.

 There is no battery. Assume 100% */

 Do not adjust SOC when charging: voltage is overrated */

		/*

		 * If the capacity value is inconsistent, calibrate it base on

		 * the battery voltage values and the thresholds given as desc

 Voltage information not available. No calibration */

 Guaranteed to provide */

	/*

	 * Optional properties are:

	 * POWER_SUPPLY_PROP_CHARGE_FULL,

	 * POWER_SUPPLY_PROP_CHARGE_NOW,

	 * POWER_SUPPLY_PROP_CURRENT_NOW,

	 * POWER_SUPPLY_PROP_TEMP,

/**

 * cm_setup_timer - For in-suspend monitoring setup wakeup alarm

 *		    for suspend_again.

 *

 * Returns true if the alarm is set for Charger Manager to use.

 * Returns false if

 *	cm_setup_timer fails to set an alarm,

 *	cm_setup_timer does not need to set an alarm for Charger Manager,

 *	or an alarm previously configured is to be used.

 Skip if polling is not required for this CM */

		/*

		 * Set alarm with the polling interval (wakeup_ms)

		 * The alarm time should be NOW + CM_RTC_SMALL or later.

/**

 * charger_extcon_work - enable/diable charger according to the state

 *			of charger cable

 *

 * @work: work_struct of the function charger_extcon_work.

/**

 * charger_extcon_notifier - receive the state of charger cable

 *			when registered cable is attached or detached.

 *

 * @self: the notifier block of the charger_extcon_notifier.

 * @event: the cable state.

 * @ptr: the data pointer of notifier block.

	/*

	 * The newly state of charger cable.

	 * If cable is attached, cable->attached is true.

	/*

	 * Setup work for controlling charger(regulator)

	 * according to charger cable.

/**

 * charger_extcon_init - register external connector to use it

 *			as the charger cable

 *

 * @cm: the Charger Manager representing the battery.

 * @cable: the Charger cable representing the external connector.

	/*

	 * Charger manager use Extcon framework to identify

	 * the charger cable among various external connector

	 * cable (e.g., TA, USB, MHL, Dock).

/**

 * charger_manager_register_extcon - Register extcon device to receive state

 *				     of charger cable.

 * @cm: the Charger Manager representing the battery.

 *

 * This function support EXTCON(External Connector) subsystem to detect the

 * state of charger cables for enabling or disabling charger(regulator) and

 * select the charger cable for charging among a number of external cable

 * according to policy of H/W board.

 help function of sysfs node to control charger(regulator) */

			/*

			 * At least, one charger is controlled by

			 * charger-manager

/**

 * charger_manager_prepare_sysfs - Prepare sysfs entry for each charger

 * @cm: the Charger Manager representing the battery.

 *

 * This function add sysfs entry for charger(regulator) to control charger from

 * user-space. If some development board use one more chargers for charging

 * but only need one charger on specific case which is dependent on user

 * scenario or hardware restrictions, the user enter 1 or 0(zero) to '/sys/

 * class/power_supply/battery/charger.[index]/externally_control'. For example,

 * if user enter 1 to 'sys/class/power_supply/battery/charger.[index]/

 * externally_control, this charger isn't controlled from charger-manager and

 * always stay off state of regulator.

 Create sysfs entry to control charger(regulator) */

 Verify whether fuel gauge provides battery temperature */

 Use external thermometer */

 NOTICE : Default allowable minimum charge temperature is 0 */

 chargers */

 Allocate empty bin at the tail of array */

 battery charger regulators */

 charger cables */

 Basic Values. Unspecified are Null or 0 */

 Initialize alarm timer */

	/*

	 * Some of the following do not need to be errors.

	 * Users may intentionally ignore those features.

 Check if charger's supplies are present at probe */

 Allocate for psy properties because they may vary */

 Find which optional psy-properties are available */

 Register sysfs entry for charger(regulator) */

 Register extcon device for charger cable */

 Add to the list */

	/*

	 * Charger-manager is capable of waking up the system from sleep

	 * when event is happened through cm_notify_event()

	/*

	 * Charger-manager have to check the charging state right after

	 * initialization of charger-manager and then update current charging

	 * state.

 Remove from the list */

 SPDX-License-Identifier: GPL-2.0

/*

 * Power supply driver for ChromeOS EC based Peripheral Device Charger.

 *

 * Copyright 2020 Google LLC.

	/*

	 * todo: Retrieve device event mask in common place

	 * (e.g. cros_ec_proto.c).

		/*

		 * This feature is enabled by the EC and the kernel driver is

		 * included by default for CrOS devices. Don't need to be loud

		 * since this error can be normal.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Battery charger driver for Dialog Semiconductor DA9030

 *

 * Copyright (C) 2008 Compulab, Ltd.

 * 	Mike Rapoport <mike@compulab.co.il>

 charger status */

 platform callbacks for battery low and critical events */

 we wake or boot with external power on */

 Charger has been pulled out */

			/* we are charging and passed LOW_THRESH,

			   so upate DA9030 VBAT threshold

 Tempreture readings are negative */

 disable charger */

 reschedule for the next time */

 set VBAT threshold for critical */

 notify the system of battery critical */

	/*

	 * Enable reference voltage supply for ADC from the LDO_INTERNAL

	 * regulator. Must be set before ADC measurements can be made.

 enable auto ADC measuremnts */

	/* 10 seconds between monitor runs unless platform defines other

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (C) 2010, Lars-Peter Clausen <lars@metafoo.de>

 *  Driver for chargers which report their online status through a GPIO pin

 default to smallest current limitation for safety reasons */

/*

 * The entries will be overwritten by driver's probe routine depending

 * on the available features. This list ensures, that the array is big

 * enough for all optional features.

	/*

	 * This will fetch a GPIO descriptor from device tree, ACPI or

	 * boardfile descriptor tables. It's good to try this first.

 Just try again if this happens */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * TI LP8788 MFD - battery charger driver

 *

 * Copyright 2012 Texas Instruments

 *

 * Author: Milo(Woogyom) Kim <milo.kim@ti.com>

 register address */

 mask/shift bits */

 Addr 07h */

 Addr 14h */

 Addr 15h */

 Addr 16h */

/*

 * struct lp8788_chg_irq

 * @which        : lp8788 interrupt id

 * @virq         : Linux IRQ number from irq_domain

/*

 * struct lp8788_charger

 * @lp           : used for accessing the registers of mfd lp8788 device

 * @charger      : power supply driver for the battery charger

 * @battery      : power supply driver for the battery

 * @charger_work : work queue for charger input interrupts

 * @chan         : iio channels for getting adc values

 *                 eg) battery voltage, capacity and temperature

 * @irqs         : charger dedicated interrupts

 * @num_irqs     : total numbers of charger interrupts

 * @pdata        : charger platform specific data

 unit: 0.1 'C */

 settting charging parameters */

 report charger dectection event if used */

 no error even if no irq resource */

 ADC channel for battery voltage */

 ADC channel for battery temperature */

 SPDX-License-Identifier: GPL-2.0

/*

 * BQ27xxx battery monitor HDQ/1-wire driver

 *

 * Copyright (C) 2007-2017 Texas Instruments Incorporated - https://www.ti.com/

 *

		/*

		 * Make sure the value has not changed in between reading the

		 * lower and the upper part

 SPDX-License-Identifier: GPL-2.0+

/*

 * AC driver for 7th-generation Microsoft Surface devices via Surface System

 * Aggregator Module (SSAM).

 *

 * Copyright (C) 2019-2021 Maximilian Luz <luzmaximilian@gmail.com>

 -- SAM interface. -------------------------------------------------------- */

 Get battery status (_STA). */

 Get platform power source for battery (_PSR / DPTF PSRC). */

 -- Device structures. ---------------------------------------------------- */

 Guards access to state below. */

 -- State management. ----------------------------------------------------- */

	/*

	 * Allow events of all targets/instances here. Global adapter status

	 * seems to be handled via target=1 and instance=1, but events are

	 * reported on all targets/instances in use.

	 *

	 * While it should be enough to just listen on 1/1, listen everywhere to

	 * make sure we don't miss anything.

 -- Properties. ----------------------------------------------------------- */

 -- Device setup. --------------------------------------------------------- */

 Make sure the device is there and functioning properly. */

 -- Driver setup. --------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Battery driver for wm8350 PMIC

 *

 * Copyright 2007, 2008 Wolfson Microelectronics PLC.

 *

 * Based on OLPC Battery Driver

 *

 * Copyright 2006  David Woodhouse <dwmw2@infradead.org>

 USB_SM */

 CHG_ISEL */

	/* If the USB state machine is active then we're using that with or

 make sure USB fast charge current is not > 500mA */

		/* Supply change.  We will overnotify but it should do

/*********************************************************************

 *		AC Power

/*********************************************************************

 *		USB Power

/*********************************************************************

 *		Battery properties

/*********************************************************************

 *		Initialisation

 register our interest in charger events */

 and supply change events */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Richtek RT9455WSC battery charger.

 *

 * Copyright (C) 2015 Intel Corporation

 1 second */

 6 hrs */

 60 seconds */

 CTRL1 reg address */

 CTRL2 reg address */

 CTRL3 reg address */

 DEV_ID reg address */

 CTRL4 reg address */

 CTRL5 reg address */

 CTRL6 reg address */

 CTRL7 reg address */

 IRQ1 reg address */

 IRQ2 reg address */

 IRQ3 reg address */

 MASK1 reg address */

 MASK2 reg address */

 MASK3 reg address */

 CTRL1 reg fields */

 CTRL2 reg fields */

 CTRL3 reg fields */

 DEV_ID reg fields */

 CTRL4 reg fields */

 CTRL5 reg fields*/

 CTRL6 reg fields */

 CTRL7 reg fields */

 IRQ1 reg fields */

 IRQ2 reg fields */

 IRQ3 reg fields */

 MASK1 reg fields */

 MASK2 reg fields */

 MASK3 reg fields */

/*

 * Each array initialised below shows the possible real-world values for a

 * group of bits belonging to RT9455 registers. The arrays are sorted in

 * ascending order. The index of each real-world value represents the value

 * that is encoded in the group of bits belonging to RT9455 registers.

 REG06[6:4] (ICHRG) in uAh */

/*

 * When the charger is in charge mode, REG02[7:2] represent battery regulation

 * voltage.

 REG02[7:2] (VOREG) in uV */

/*

 * When the charger is in boost mode, REG02[7:2] represent boost output

 * voltage.

 REG02[7:2] (Boost output voltage) in uV */

 REG07[3:0] (VMREG) in uV */

 REG05[5:4] (IEOC_PERCENTAGE) */

 REG05[1:0] (MIVR) in uV */

 REG05[1:0] (IAICR) in uA */

/*

 * Iterate through each element of the 'tbl' array until an element whose value

 * is greater than v is found. Return the index of the respective element,

 * or the index of the last element in the array, if no such element is found.

	/*

	 * No need to iterate until the last index in the table because

	 * if no element greater than v is found in the table,

	 * or if only the last element is greater than v,

	 * function returns the index of the last element.

	/*

	 * To make sure that reset operation has finished, loop until RST bit

	 * is set to 0.

 Charger power supply property routines */

	/*

	 * If PWR_RDY bit is unset, the battery is discharging. Otherwise,

	 * STAT bits value must be checked.

		/*

		 * If PWR_RDY bit is set, but STAT bits value is 0, the charger

		 * may be in one of the following cases:

		 * 1. CHG_EN bit is 0.

		 * 2. CHG_EN bit is 1 but the battery is not connected.

		 * In any of these cases, POWER_SUPPLY_STATUS_NOT_CHARGING is

		 * returned.

	/*

	 * Since BATAB is 1 when battery is NOT present and 0 otherwise,

	 * !BATAB is returned.

 Set TE bit in order to enable end of charge detection */

 Set TE_SHDN_EN bit in order to enable end of charge detection */

	/*

	 * Set BATD_EN bit in order to enable battery detection

	 * when charging is done

	/*

	 * Disable Safety Timer. In charge mode, this timer terminates charging

	 * if no read or write via I2C is done within 32 minutes. This timer

	 * avoids overcharging the baterry when the OS is not loaded and the

	 * charger is connected to a power source.

	 * In boost mode, this timer triggers BST32SI interrupt if no read or

	 * write via I2C is done within 32 seconds.

	 * When the OS is loaded and the charger driver is inserted, it is used

	 * delayed_work, named max_charging_time_work, to avoid overcharging

	 * the battery.

 Set ICHRG to value retrieved from device-specific data */

 Set IEOC Percentage to value retrieved from device-specific data */

 Set VOREG to value retrieved from device-specific data */

 Set VMREG value to maximum (4.45V). */

	/*

	 * Set MIVR to value retrieved from device-specific data.

	 * If no value is specified, default value for MIVR is 4.5V.

	/*

	 * Set IAICR to value retrieved from device-specific data.

	 * If no value is specified, default value for IAICR is 500 mA.

	/*

	 * Set IAICR_INT bit so that IAICR value is determined by IAICR bits

	 * and not by OTG pin.

	/*

	 * Disable CHMIVRI interrupt. Because the driver sets MIVR value,

	 * CHMIVRI is triggered, but there is no action to be taken by the

	 * driver when CHMIVRI is triggered.

/*

 * Before setting the charger into boost mode, boost output voltage is

 * set. This is needed because boost output voltage may differ from battery

 * regulation voltage. F_VOREG bits represent either battery regulation voltage

 * or boost output voltage, depending on the mode the charger is. Both battery

 * regulation voltage and boost output voltage are read from DT/ACPI during

 * probe.

/*

 * Before setting the charger into charge mode, battery regulation voltage is

 * set. This is needed because boost output voltage may differ from battery

 * regulation voltage. F_VOREG bits represent either battery regulation voltage

 * or boost output voltage, depending on the mode the charger is. Both battery

 * regulation voltage and boost output voltage are read from DT/ACPI during

 * probe.

		/*

		 * When the battery is absent, max_charging_time_work is

		 * cancelled, since no charging is done.

		/*

		 * Since no interrupt is triggered when the battery is

		 * reconnected, max_charging_time_work is not rescheduled.

		 * Therefore, batt_presence_work is scheduled to check whether

		 * the battery is still absent or not.

		/*

		 * CHRVPI bit is set in 2 cases:

		 * 1. when the power source is connected to the charger.

		 * 2. when the power source is disconnected from the charger.

		 * To identify the case, PWR_RDY bit is checked. Because

		 * PWR_RDY bit is set / cleared after CHRVPI interrupt is

		 * triggered, it is used delayed_work to later read PWR_RDY bit.

		 * Also, do not set to true alert_userspace, because there is no

		 * need to notify userspace when CHRVPI interrupt has occurred.

		 * Userspace will be notified after PWR_RDY bit is read.

				/*

				 * Update MASK2 value, since CHTERMIM bit is

				 * set.

 Update MASK2 value, since CHTERMIM bit is cleared. */

			/*

			 * No need to check whether the charger is connected to

			 * power source when CHRCHGI is received, since CHRCHGI

			 * is not triggered if the charger is not connected to

			 * the power source.

	/*

	 * Each function that processes an IRQ register receives as output

	 * parameter alert_userspace pointer. alert_userspace is set to true

	 * in such a function only if an interrupt has occurred in the

	 * respective interrupt register. This way, it is avoided the following

	 * case: interrupt occurs only in IRQ1 register,

	 * rt9455_irq_handler_check_irq1_register() function sets to true

	 * alert_userspace, but rt9455_irq_handler_check_irq2_register()

	 * and rt9455_irq_handler_check_irq3_register() functions set to false

	 * alert_userspace and power_supply_changed() is never called.

		/*

		 * Sometimes, an interrupt occurs while rt9455_probe() function

		 * is executing and power_supply_register() is not yet called.

		 * Do not call power_supply_changed() in this case.

	/*

	 * ICHRG, IEOC_PERCENTAGE, VOREG and boost output voltage are mandatory

	 * parameters.

	/*

	 * MIVR and IAICR are optional parameters. Do not return error if one of

	 * them is not present in ACPI table or device tree specification.

		/*

		 * If the charger is in boost mode, and it has received

		 * USB_EVENT_NONE, this means the consumer device powered by the

		 * charger is not connected anymore.

		 * In this case, the charger goes into charge mode.

		/*

		 * If the charger is in boost mode, and it has received

		 * USB_EVENT_VBUS, this means the consumer device powered by the

		 * charger is not connected anymore.

		 * In this case, the charger goes into charge mode.

		/*

		 * If the charger is in charge mode, and it has received

		 * USB_EVENT_ID, this means a consumer device is connected and

		 * it should be powered by the charger.

		 * In this case, the charger goes into boost mode.

		/*

		 * If the charger is in boost mode, and it has received

		 * USB_EVENT_CHARGER, this means the consumer device powered by

		 * the charger is not connected anymore.

		 * In this case, the charger goes into charge mode.

	/*

	 * Determine whether the charger is in charge mode

	 * or in boost mode.

	/*

	 * Notify userspace that the charger has been either connected to or

	 * disconnected from the power source.

	/*

	 * If the battery is still absent, batt_presence_work is rescheduled.

	 * Otherwise, max_charging_time is scheduled.

		/*

		 * Notify userspace that the battery is now connected to the

		 * charger.

	/*

	 * Mandatory device-specific data values. Also, VOREG and boost output

	 * voltage are mandatory values, but they are stored in rt9455_info

	 * structure.

 Optional device-specific data values. */

			/*

			 * If usb_register_notifier() fails, set notifier_call

			 * to NULL, to avoid calling usb_unregister_notifier().

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Batttery Driver for Dialog DA9052 PMICs

 *

 * Copyright(c) 2011 Dialog Semiconductor Ltd.

 *

 * Author: David Dajun Chen <dchen@diasemi.com>

 STATIC CONFIGURATION */

 Lookup table for voltage vs capacity */

 For temperature 10 degree Celsius */

 For temperature 25 degree Celsius */

 For temperature 40 degree Celsius */

 Preference to WALL(DCIN) charger unit */

		/* If charging end flag is set and Charging current is greater

		 * than charging end limit then battery is charging

			/* If Charging end flag is cleared then battery is

			 * charging

	/*

	 * For some reason authors of the driver didn't presume that we can

	 * end up here. It might be OK, but might be not, no one knows for

	 * sure. Go check your battery, is it on fire?

 SPDX-License-Identifier: GPL-2.0

/*

 *  power_supply_hwmon.c - power supply hwmon support.

		/* unreachable, but see:

		 * gcc bug #51513 [1] and clang bug #978 [2]

		 *

		 * [1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=51513

		 * [2] https://github.com/ClangBuiltLinux/linux/issues/978

	/*

	 * Both voltage and current is reported in units of

	 * microvolts/microamps, so we need to adjust it to

	 * milliamps(volts)

	/*

	 * Temp needs to be converted from 1/10 C to milli-C

	/*

	 * Both voltage and current is reported in units of

	 * microvolts/microamps, so we need to adjust it to

	 * milliamps(volts)

	/*

	 * Temp needs to be converted from 1/10 C to milli-C

 SPDX-License-Identifier: GPL-2.0

/*

 * Charging control driver for the Wilco EC

 *

 * Copyright 2019 Google LLC

 *

 * See Documentation/ABI/testing/sysfs-class-power and

 * Documentation/ABI/testing/sysfs-class-power-wilco for userspace interface

 * and other info.

 Property IDs and related EC constants */

 Used for Standard */

 Express Charge, used for Fast */

 Mostly AC use, used for Trickle */

 Used for Adaptive */

 Used for Custom */

 Used for Long Life */

 Convert from POWER_SUPPLY_PROP_CHARGE_TYPE value to the EC's charge mode */

 Convert from EC's charge mode to POWER_SUPPLY_PROP_CHARGE_TYPE value */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Power supply driver for ChromeOS EC based USB PD Charger.

 *

 * Copyright (c) 2014 - 2018 Google, Inc

 Input voltage/current limit in mV/mA. Default to none. */

		/*

		 * For dual-role devices when we are a source, the firmware

		 * reports the type as NONE. Report such chargers as type

		 * USB_PD_DRP.

		/*

		 * While the EC is trying to determine the type of charger that

		 * has been plugged in, it will report the charger type as

		 * unknown. Additionally since the power capabilities are

		 * unknown, report the max current and voltage as zero.

	/*

	 * If power supply type or status changed, explicitly call

	 * power_supply_changed. This results in udev event getting generated

	 * and allows user mode apps to react quicker instead of waiting for

	 * their next poll of power supply status.

 Only refresh ec_port_status for dynamic properties */

		/*

		 * If mkbp_event_supported, then we can be assured that

		 * the driver's state for the online property is consistent

		 * with the hardware. However, if we aren't event driven,

		 * the optimization before to skip an ec_port_status get

		 * and only returned cached values of the online property will

		 * cause a delay in detecting a cable attach until one of the

		 * other properties are read.

		 *

		 * Allow an ec_port_status refresh for online property check

		 * if we're not already online to check for plug events if

		 * not mkbp_event_supported.

 U16_MAX in mV/mA is the maximum supported value */

 A negative number is used to clear the limit */

 Convert from uA/uV to mA/mV */

	/*

	 * We need to know the number of USB PD ports in order to know whether

	 * there is a dedicated port. The dedicated port will always be

	 * after the USB PD ports, and there should be only one.

		/*

		 * This can happen on a system that doesn't support USB PD.

		 * Log a message, but no need to warn.

		/*

		 * This can happen on a system that doesn't support USB PD.

		 * Log a message, but no need to warn.

		 * Older ECs do not support the above command, in that case

		 * let's set up the number of charger ports equal to the number

		 * of USB PD ports

		/*

		 * This can happen on a system that doesn't support USB PD and

		 * doesn't have a dedicated port.

		 * Log a message, but no need to warn.

	/*

	 * Sanity checks on the number of ports:

	 *  there should be at most 1 dedicated port

 Get PD events from the EC */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * 1-wire client/driver for the Maxim/Dallas DS2780 Stand-Alone Fuel Gauge IC

 *

 * Copyright (C) 2010 Indesign, LLC

 *

 * Author: Clifton Barnes <cabarnes@indesign-llc.com>

 *

 * Based on ds2760_battery and ds2782_battery drivers

 Current unit measurement in uA for a 1 milli-ohm sense resistor */

 Charge unit measurement in uAh for a 1 milli-ohm sense resistor */

 Number of bytes in user EEPROM space */

 Number of bytes in parameter EEPROM space */

 Set sense resistor value in mhos */

 Get RSGAIN value from 0 to 1.999 in steps of 0.001 */

 Set RSGAIN value from 0 to 1.999 in steps of 0.001 */

	/*

	 * The voltage value is located in 10 bits across the voltage MSB

	 * and LSB registers in two's complement form

	 * Sign bit of the voltage value is in bit 7 of the voltage MSB register

	 * Bits 9 - 3 of the voltage value are in bits 6 - 0 of the

	 * voltage MSB register

	 * Bits 2 - 0 of the voltage value are in bits 7 - 5 of the

	 * voltage LSB register

	/*

	 * DS2780 reports voltage in units of 4.88mV, but the battery class

	 * reports in units of uV, so convert by multiplying by 4880.

	/*

	 * The temperature value is located in 10 bits across the temperature

	 * MSB and LSB registers in two's complement form

	 * Sign bit of the temperature value is in bit 7 of the temperature

	 * MSB register

	 * Bits 9 - 3 of the temperature value are in bits 6 - 0 of the

	 * temperature MSB register

	 * Bits 2 - 0 of the temperature value are in bits 7 - 5 of the

	 * temperature LSB register

	/*

	 * Temperature is measured in units of 0.125 degrees celcius, the

	 * power_supply class measures temperature in tenths of degrees

	 * celsius. The temperature value is stored as a 10 bit number, plus

	 * sign in the upper bits of a 16 bit register.

	/*

	 * The units of measurement for current are dependent on the value of

	 * the sense resistor.

	/*

	 * The current value is located in 16 bits across the current MSB

	 * and LSB registers in two's complement form

	 * Sign bit of the current value is in bit 7 of the current MSB register

	 * Bits 14 - 8 of the current value are in bits 6 - 0 of the current

	 * MSB register

	 * Bits 7 - 0 of the current value are in bits 7 - 0 of the current

	 * LSB register

	/*

	 * The units of measurement for accumulated current are dependent on

	 * the value of the sense resistor.

	/*

	 * The ACR value is located in 16 bits across the ACR MSB and

	 * LSB registers

	 * Bits 15 - 8 of the ACR value are in bits 7 - 0 of the ACR

	 * MSB register

	 * Bits 7 - 0 of the ACR value are in bits 7 - 0 of the ACR

	 * LSB register

	/*

	 * The RAAC value is located in 16 bits across the RAAC MSB and

	 * LSB registers

	 * Bits 15 - 8 of the RAAC value are in bits 7 - 0 of the RAAC

	 * MSB register

	 * Bits 7 - 0 of the RAAC value are in bits 7 - 0 of the RAAC

	 * LSB register

 Get power mode */

 Set power mode */

 Gain can only be from 0 to 1.999 in steps of .001 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * MP2629 battery charger driver

 *

 * Copyright 2020 Monolithic Power Systems, Inc

 *

 * Author: Saravanan Sekar <sravanhome@gmail.com>

 multiples of 10 mohm so round off */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * 1-wire client/driver for the Maxim/Dallas DS2781 Stand-Alone Fuel Gauge IC

 *

 * Author: Renata Sayakhova <renata@oktetlabs.ru>

 *

 * Based on ds2780_battery drivers

 Current unit measurement in uA for a 1 milli-ohm sense resistor */

 Charge unit measurement in uAh for a 1 milli-ohm sense resistor */

 Number of bytes in user EEPROM space */

 Number of bytes in parameter EEPROM space */

 Set sense resistor value in mhos */

 Get RSGAIN value from 0 to 1.999 in steps of 0.001 */

 Set RSGAIN value from 0 to 1.999 in steps of 0.001 */

	/*

	 * The voltage value is located in 10 bits across the voltage MSB

	 * and LSB registers in two's complement form

	 * Sign bit of the voltage value is in bit 7 of the voltage MSB register

	 * Bits 9 - 3 of the voltage value are in bits 6 - 0 of the

	 * voltage MSB register

	 * Bits 2 - 0 of the voltage value are in bits 7 - 5 of the

	 * voltage LSB register

	/* DS2781 reports voltage in units of 9.76mV, but the battery class

	/*

	 * The temperature value is located in 10 bits across the temperature

	 * MSB and LSB registers in two's complement form

	 * Sign bit of the temperature value is in bit 7 of the temperature

	 * MSB register

	 * Bits 9 - 3 of the temperature value are in bits 6 - 0 of the

	 * temperature MSB register

	 * Bits 2 - 0 of the temperature value are in bits 7 - 5 of the

	 * temperature LSB register

	/*

	 * The units of measurement for current are dependent on the value of

	 * the sense resistor.

	/*

	 * The current value is located in 16 bits across the current MSB

	 * and LSB registers in two's complement form

	 * Sign bit of the current value is in bit 7 of the current MSB register

	 * Bits 14 - 8 of the current value are in bits 6 - 0 of the current

	 * MSB register

	 * Bits 7 - 0 of the current value are in bits 7 - 0 of the current

	 * LSB register

	/*

	 * The units of measurement for accumulated current are dependent on

	 * the value of the sense resistor.

	/*

	 * The ACR value is located in 16 bits across the ACR MSB and

	 * LSB registers

	 * Bits 15 - 8 of the ACR value are in bits 7 - 0 of the ACR

	 * MSB register

	 * Bits 7 - 0 of the ACR value are in bits 7 - 0 of the ACR

	 * LSB register

	/*

	 * The RAAC value is located in 16 bits across the RAAC MSB and

	 * LSB registers

	 * Bits 15 - 8 of the RAAC value are in bits 7 - 0 of the RAAC

	 * MSB register

	 * Bits 7 - 0 of the RAAC value are in bits 7 - 0 of the RAAC

	 * LSB register

 Get power mode */

 Set power mode */

 Gain can only be from 0 to 1.999 in steps of .001 */

 SPDX-License-Identifier: GPL-2.0

/*

 * BQ27xxx battery driver

 *

 * Copyright (C) 2008 Rodolfo Giometti <giometti@linux.it>

 * Copyright (C) 2008 Eurotech S.p.A. <info@eurotech.it>

 * Copyright (C) 2010-2011 Lars-Peter Clausen <lars@metafoo.de>

 * Copyright (C) 2011 Pali Roh√°r <pali@kernel.org>

 * Copyright (C) 2017 Liam Breck <kernel@networkimprov.net>

 *

 * Based on a previous work by Copyright (C) 2008 Texas Instruments, Inc.

 *

 * Datasheets:

 * https://www.ti.com/product/bq27000

 * https://www.ti.com/product/bq27200

 * https://www.ti.com/product/bq27010

 * https://www.ti.com/product/bq27210

 * https://www.ti.com/product/bq27500

 * https://www.ti.com/product/bq27510-g1

 * https://www.ti.com/product/bq27510-g2

 * https://www.ti.com/product/bq27510-g3

 * https://www.ti.com/product/bq27520-g1

 * https://www.ti.com/product/bq27520-g2

 * https://www.ti.com/product/bq27520-g3

 * https://www.ti.com/product/bq27520-g4

 * https://www.ti.com/product/bq27530-g1

 * https://www.ti.com/product/bq27531-g1

 * https://www.ti.com/product/bq27541-g1

 * https://www.ti.com/product/bq27542-g1

 * https://www.ti.com/product/bq27546-g1

 * https://www.ti.com/product/bq27742-g1

 * https://www.ti.com/product/bq27545-g1

 * https://www.ti.com/product/bq27421-g1

 * https://www.ti.com/product/bq27425-g1

 * https://www.ti.com/product/bq27426

 * https://www.ti.com/product/bq27411-g1

 * https://www.ti.com/product/bq27441-g1

 * https://www.ti.com/product/bq27621-g1

 * https://www.ti.com/product/bq27z561

 * https://www.ti.com/product/bq28z610

 * https://www.ti.com/product/bq34z100-g1

 * https://www.ti.com/product/bq78z100

 BQ27XXX Flags */

 State-of-Charge threshold final */

 State-of-Charge threshold 1 */

 BQ27000 has different layout for Flags register */

 Final End-of-Discharge-Voltage flag */

 First End-of-Discharge-Voltage flag */

 Capacity Inaccurate flag */

 Charge state flag */

 BQ27Z561 has different layout for Flags register */

 Battery fully discharged */

 Battery fully charged */

 Battery is discharging */

 control register params */

 Resistor sense mOhm */

 29.2 ¬µV^2 * 1000 */

 3.57 ¬µV * 1000 */

/*

 * bq27xxx_reg_index - Register names

 *

 * These are indexes into a device's register mapping array.

 Control */

 Temperature */

 Internal Temperature */

 Voltage */

 Average Current */

 Flags */

 Time-to-Empty */

 Time-to-Full */

 Time-to-Empty Standby */

 Time-to-Empty at Constant Power */

 Nominal Available Capacity */

 Remaining Capacity */

 Full Charge Capacity */

 Cycle Count */

 Available Energy */

 State-of-Charge */

 Design Capacity */

 Average Power */

 Block Data Control */

 Data Class */

 Data Block */

 Block Data */

 Block Data Checksum */

 sentinel */

 Register mappings */

 not yet tested */

 missing on chip */

 todo create data memory definitions from datasheets and test on chips */

 not yet tested */

 not yet tested */

 not yet tested */

 has OTC/OTD overtemperature flags */

 has OT overtemperature flag */

 SoC is single register */

 has Capacity Inaccurate flag */

 multiple chemistries supported */

/**

 * struct bq27xxx_dm_buf - chip data memory buffer

 * @class: data memory subclass_id

 * @block: data memory block number

 * @data: data from/for the block

 * @has_data: true if data has been filled by read

 * @dirty: true if data has changed since last read/write

 *

 * Encapsulates info required to manage chip data memory blocks.

/*

 * Common code for BQ27xxx devices

 devicetree and NVM differ; defer to NVM */

 425 has a bug

	/* DO NOT read BQ27XXX_DM_CKSUM here to verify it! That may cause NVM

	 * corruption on the '425 chip (and perhaps others), which can damage

	 * the chip.

 flash DM updates in <100ms */

 assume design energy & capacity are in same block */

 reset time is not documented */

 assume bq27xxx_battery_update() is called hereafter */

 assume min == 0 */

 assume min == 0 */

/*

 * Return the battery State-of-Charge

 * Or < 0 if something fails.

/*

 * Return a battery charge value in ¬µAh

 * Or < 0 if something fails.

/*

 * Return the battery Nominal available capacity in ¬µAh

 * Or < 0 if something fails.

/*

 * Return the battery Remaining Capacity in ¬µAh

 * Or < 0 if something fails.

/*

 * Return the battery Full Charge Capacity in ¬µAh

 * Or < 0 if something fails.

/*

 * Return the Design Capacity in ¬µAh

 * Or < 0 if something fails.

/*

 * Return the battery Available energy in ¬µWh

 * Or < 0 if something fails.

/*

 * Return the battery temperature in tenths of degree Kelvin

 * Or < 0 if something fails.

/*

 * Return the battery Cycle count total

 * Or < 0 if something fails.

/*

 * Read a time register.

 * Return < 0 if something fails.

/*

 * Returns true if a battery over temperature condition is detected

/*

 * Returns true if a battery under temperature condition is detected

/*

 * Returns true if a low state of charge condition is detected

 Unlikely but important to return first */

 read error */

 We only have to read charge design full once */

/*

 * Return the battery average current in ¬µA and the status

 * Note that current can be negative signed as well

 * Or 0 if something fails.

 Other gauges return signed value */

/*

 * Get the average power in ¬µW

 * Return < 0 if something fails.

 Other gauges return a signed value in units of 10mW */

/*

 * Return the battery Voltage in millivolts

 * Or < 0 if something fails.

 convert decidegree k to c */

	/*

	 * TODO: Implement these to make registers set from

	 * power_supply_battery_info visible in sysfs.

	/*

	 * power_supply_unregister call bq27xxx_battery_get_property which

	 * call bq27xxx_battery_poll.

	 * Make sure that bq27xxx_battery_poll will not call

	 * schedule_delayed_work again after unregister (which cause OOPS).

 SPDX-License-Identifier: GPL-2.0-or-later

/* NXP PCF50633 Main Battery Charger Driver

 *

 * (C) 2006-2008 by Openmoko, Inc.

 * Author: Balaji Rao <balajirrao@openmoko.org>

 * All rights reserved.

 *

 * Broken down from monstrous PCF50633 driver mainly by

 * Harald Welte, Andy Green and Werner Almesberger

	/*

	 * We limit the charging current to be the USB current limit.

	 * The reason is that on pcf50633, when it enters PMU Standby mode,

	 * which it does when the device goes "off", the USB current limit

	 * reverts to the variant default.  In at least one common case, that

	 * default is 500mA.  By setting the charging current to be the same

	 * as the USB limit we set here before PMU standby, we enforce it only

	 * using the correct amount of current even when the USB current limit

	 * gets reset to the wrong thing

	/* If chgmod == BATFULL, setting chgena has no effect.

	 * Datasheet says we need to set resume instead but when autoresume is

	 * used resume doesn't work. Clear and set chgena instead.

/*

 * This attribute allows to change MBC charging limit on the fly

 * independently of usb current limit. It also gets set automatically every

 * time usb current limit is changed.

 USB */

 Adapter */

 Set up IRQ handlers */

 Create power supplies */

 Remove IRQ handlers */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson SA 2012

 * Copyright (c) 2012 Sony Mobile Communications AB

 *

 * Charging algorithm driver for AB8500

 *

 * Authors:

 *	Johan Palsson <johan.palsson@stericsson.com>

 *	Karl Komierowski <karl.komierowski@stericsson.com>

 *	Arun R Murthy <arun.murthy@stericsson.com>

 *	Author: Imre Sunyi <imre.sunyi@sonymobile.com>

 Watchdog kick interval */

 End-of-charge criteria counter */

 One hour expressed in seconds */

 Five minutes expressed in seconds */

/**

 * struct ab8500_charge_curr_maximization - Charger maximization parameters

 * @original_iset:	the non optimized/maximised charger current

 * @current_iset:	the charging current used at this moment

 * @test_delta_i:	the delta between the current we want to charge and the

			current that is really going into the battery

 * @condition_cnt:	number of iterations needed before a new charger current

			is set

 * @max_current:	maximum charger current

 * @wait_cnt:		to avoid too fast current step down in case of charger

 *			voltage collapse, we insert this delay between step

 *			down

 * @level:		tells in how many steps the charging current has been

			increased

/**

 * struct ab8500_chargalg - ab8500 Charging algorithm device information

 * @dev:		pointer to the structure device

 * @charge_status:	battery operating status

 * @eoc_cnt:		counter used to determine end-of_charge

 * @maintenance_chg:	indicate if maintenance charge is active

 * @t_hyst_norm		temperature hysteresis when the temperature has been

 *			over or under normal limits

 * @t_hyst_lowhigh	temperature hysteresis when the temperature has been

 *			over or under the high or low limits

 * @charge_state:	current state of the charging algorithm

 * @ccm			charging current maximization parameters

 * @chg_info:		information about connected charger types

 * @batt_data:		data of the battery

 * @susp_status:	current charger suspension status

 * @bm:           	Platform specific battery management information

 * @curr_status:	Current step status for over-current protection

 * @parent:		pointer to the struct ab8500

 * @chargalg_psy:	structure that holds the battery properties exposed by

 *			the charging algorithm

 * @events:		structure for information about events triggered

 * @chargalg_wq:		work queue for running the charging algorithm

 * @chargalg_periodic_work:	work to run the charging algorithm periodically

 * @chargalg_wd_work:		work to kick the charger watchdog periodically

 * @chargalg_work:		work to run the charging algorithm instantly

 * @safety_timer:		charging safety timer

 * @maintenance_timer:		maintenance charging timer

 * @chargalg_kobject:		structure of type kobject

External charger prepare notifier*/

 Main battery properties */

/**

 * ab8500_chargalg_safety_timer_expired() - Expiration of the safety timer

 * @timer:     pointer to the hrtimer structure

 *

 * This function gets called when the safety timer for the charger

 * expires

 Trigger execution of the algorithm instantly */

/**

 * ab8500_chargalg_maintenance_timer_expired() - Expiration of

 * the maintenance timer

 * @timer:     pointer to the timer structure

 *

 * This function gets called when the maintenence timer

 * expires

 Trigger execution of the algorithm instantly */

/**

 * ab8500_chargalg_state_to() - Change charge state

 * @di:		pointer to the ab8500_chargalg structure

 *

 * This function gets called when a charge state change should occur

/**

 * ab8500_chargalg_check_charger_connection() - Check charger connection change

 * @di:		pointer to the ab8500_chargalg structure

 *

 * This function will check if there is a change in the charger connection

 * and change charge state accordingly. AC has precedence over USB.

		/*

		 * Charger state changed or suspension

		 * has changed since last update

/**

 * ab8500_chargalg_check_current_step_status() - Check charging current

 * step status.

 * @di:		pointer to the ab8500_chargalg structure

 *

 * This function will check if there is a change in the charging current step

 * and change charge state accordingly.

/**

 * ab8500_chargalg_start_safety_timer() - Start charging safety timer

 * @di:		pointer to the ab8500_chargalg structure

 *

 * The safety timer is used to avoid overcharging of old or bad batteries.

 * There are different timers for AC and USB

 Charger-dependent expiration time in hours*/

/**

 * ab8500_chargalg_stop_safety_timer() - Stop charging safety timer

 * @di:		pointer to the ab8500_chargalg structure

 *

 * The safety timer is stopped whenever the NORMAL state is exited

/**

 * ab8500_chargalg_start_maintenance_timer() - Start charging maintenance timer

 * @di:		pointer to the ab8500_chargalg structure

 * @duration:	duration of ther maintenance timer in hours

 *

 * The maintenance timer is used to maintain the charge in the battery once

 * the battery is considered full. These timers are chosen to match the

 * discharge curve of the battery

/**

 * ab8500_chargalg_stop_maintenance_timer() - Stop maintenance timer

 * @di:		pointer to the ab8500_chargalg structure

 *

 * The maintenance timer is stopped whenever maintenance ends or when another

 * state is entered

/**

 * ab8500_chargalg_kick_watchdog() - Kick charger watchdog

 * @di:		pointer to the ab8500_chargalg structure

 *

 * The charger watchdog have to be kicked periodically whenever the charger is

 * on, else the ABB will reset the system

 Check if charger exists and kick watchdog if charging */

		/*

		 * If AB charger watchdog expired, pm2xxx charging

		 * gets disabled. To be safe, kick both AB charger watchdog

		 * and pm2xxx watchdog.

/**

 * ab8500_chargalg_ac_en() - Turn on/off the AC charger

 * @di:		pointer to the ab8500_chargalg structure

 * @enable:	charger on/off

 * @vset:	requested charger output voltage

 * @iset:	requested charger output current

 *

 * The AC charger will be turned on/off with the requested charge voltage and

 * current

 Select maximum of what both the charger and the battery supports */

 Enable external charger */

/**

 * ab8500_chargalg_usb_en() - Turn on/off the USB charger

 * @di:		pointer to the ab8500_chargalg structure

 * @enable:	charger on/off

 * @vset:	requested charger output voltage

 * @iset:	requested charger output current

 *

 * The USB charger will be turned on/off with the requested charge voltage and

 * current

 Select maximum of what both the charger and the battery supports */

/**

 * ab8500_chargalg_update_chg_curr() - Update charger current

 * @di:		pointer to the ab8500_chargalg structure

 * @iset:	requested charger output current

 *

 * The charger output current will be updated for the charger

 * that is currently in use

 Check if charger exists and update current if charging */

		/*

		 * Select maximum of what both the charger

		 * and the battery supports

		/*

		 * Select maximum of what both the charger

		 * and the battery supports

/**

 * ab8500_chargalg_stop_charging() - Stop charging

 * @di:		pointer to the ab8500_chargalg structure

 *

 * This function is called from any state where charging should be stopped.

 * All charging is disabled and all status parameters and timers are changed

 * accordingly

/**

 * ab8500_chargalg_hold_charging() - Pauses charging

 * @di:		pointer to the ab8500_chargalg structure

 *

 * This function is called in the case where maintenance charging has been

 * disabled and instead a battery voltage mode is entered to check when the

 * battery voltage has reached a certain recharge voltage

/**

 * ab8500_chargalg_start_charging() - Start the charger

 * @di:		pointer to the ab8500_chargalg structure

 * @vset:	requested charger output voltage

 * @iset:	requested charger output current

 *

 * A charger will be enabled depending on the requested charger type that was

 * detected previously.

/**

 * ab8500_chargalg_check_temp() - Check battery temperature ranges

 * @di:		pointer to the ab8500_chargalg structure

 *

 * The battery temperature is checked against the predefined limits and the

 * charge state is changed accordingly

 Temp OK! */

 TEMP minor!!!!! */

 TEMP major!!!!! */

 Within hysteresis */

/**

 * ab8500_chargalg_check_charger_voltage() - Check charger voltage

 * @di:		pointer to the ab8500_chargalg structure

 *

 * Charger voltage is checked against maximum limit

/**

 * ab8500_chargalg_end_of_charge() - Check if end-of-charge criteria is fulfilled

 * @di:		pointer to the ab8500_chargalg structure

 *

 * End-of-charge criteria is fulfilled when the battery voltage is above a

 * certain limit and the battery current is below a certain limit for a

 * predefined number of consecutive seconds. If true, the battery is full

/**

 * ab8500_chargalg_chg_curr_maxim - increases the charger current to

 *			compensate for the system load

 * @di		pointer to the ab8500_chargalg structure

 *

 * This maximization function is used to raise the charger current to get the

 * battery current as close to the optimal value as possible. The battery

 * current during charging is affected by the system load

 Let's go in here twice before lowering curr again */

 Increse the iset with cco.test_delta_i */

 Do nothing..*/

 For all psy where the driver name appears in any supplied_to */

	/*

	 *  If external is not registering 'POWER_SUPPLY_PROP_CAPACITY' to its

	 * property because of handling that sysfs entry on its own, this is

	 * the place to get the battery capacity.

 Go through all properties for the psy */

		/*

		 * Initialize chargers if not already done.

 Battery present */

 Battery removed */

 AC disconnected */

 AC connected */

 USB disconnected */

 USB connected */

 AC offline */

 AC online */

 USB offline */

 USB online */

				/* AVG is used to indicate when we are

				/* AVG is used to indicate when we are

/**

 * ab8500_chargalg_external_power_changed() - callback for power supply changes

 * @psy:       pointer to the structure power_supply

 *

 * This function is the entry point of the pointer external_power_changed

 * of the structure power_supply.

 * This function gets executed when there is a change in any external power

 * supply that this driver needs to be notified of.

	/*

	 * Trigger execution of the algorithm instantly and read

	 * all power_supply properties there instead

/**

 * ab8500_chargalg_algorithm() - Main function for the algorithm

 * @di:		pointer to the ab8500_chargalg structure

 *

 * This is the main control function for the charging algorithm.

 * It is called periodically or when something happens that will

 * trigger a state change

 Collect data from all power_supply class devices */

	/*

	 * First check if we have a charger connected.

	 * Also we don't allow charging of unknown batteries if configured

	 * this way

 If suspended, we should not continue checking the flags */

 We don't do anything here, just don,t continue */

 Safety timer expiration */

	/*

	 * Check if any interrupts has occured

	 * that will prevent us from charging

 Battery removed */

 Main or USB charger not ok. */

		/*

		 * If vbus_collapsed is set, we have to lower the charger

		 * current, which is done in the normal state below

 VBUS, Main or VBAT OVV. */

 USB Thermal, stop charging */

 Battery temp over/under */

 Watchdog expired */

 Battery temp high/low */

 CHARGING is suspended */

 We exit this state when charger is removed */

 This state will be used when the maintenance state is disabled */

 Start charging directly if the new state is a charge state */

/**

 * ab8500_chargalg_periodic_work() - Periodic work for the algorithm

 * @work:	pointer to the work_struct structure

 *

 * Work queue function for the charging algorithm

	/*

	 * If a charger is connected then the battery has to be monitored

	 * frequently, else the work can be delayed.

/**

 * ab8500_chargalg_wd_work() - periodic work to kick the charger watchdog

 * @work:	pointer to the work_struct structure

 *

 * Work queue function for kicking the charger watchdog

/**

 * ab8500_chargalg_work() - Work to run the charging algorithm instantly

 * @work:	pointer to the work_struct structure

 *

 * Work queue function for calling the charging algorithm

/**

 * ab8500_chargalg_get_property() - get the chargalg properties

 * @psy:	pointer to the power_supply structure

 * @psp:	pointer to the power_supply_property structure

 * @val:	pointer to the power_supply_propval union

 *

 * This function gets called when an application tries to get the

 * chargalg properties by reading the sysfs files.

 * status:     charging/discharging/full/unknown

 * health:     health of the battery

 * Returns error code in case of failure else 0 on success

 Exposure to the sysfs interface */

 Disable charging */

 Trigger a state change */

 Enable AC Charging */

 Trigger a state change */

 Enable USB charging */

 Trigger a state change */

/**

 * ab8500_chargalg_sysfs_exit() - de-init of sysfs entry

 * @di:                pointer to the struct ab8500_chargalg

 *

 * This function removes the entry in sysfs.

/**

 * ab8500_chargalg_sysfs_init() - init of sysfs entry

 * @di:                pointer to the struct ab8500_chargalg

 *

 * This function adds an entry in sysfs.

 * Returns error code in case of failure else 0(on success)

 Exposure to the sysfs interface <<END>> */

 Kick charger watchdog if charging (any charger online) */

	/*

	 * Run the charging algorithm directly to be sure we don't

	 * do it too seldom

 Create a work queue for the chargalg */

 Run the charging algorithm */

 Stop all timers and work */

 Delete the work queue */

 get device struct and parent */

 Initilialize safety timer */

 Initilialize maintenance timer */

 Init work for chargalg */

 Init work for chargalg */

 To detect charger at startup */

 Register chargalg power supply class */

 sysfs interface to enable/disable charging from user space */

 sysfs interface to enable/disable charging from user space */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ISP1704 USB Charger Detection driver

 *

 * Copyright (C) 2010 Nokia Corporation

 * Copyright (C) 2012 - 2013 Pali Roh√°r <pali@kernel.org>

 Vendor specific Power Control register */

 properties */

/*

 * Determine is the charging port DCP (dedicated charger) or CDP (Host/HUB

 * chargers).

 *

 * REVISIT: The method is defined in Battery Charging Specification and is

 * applicable to any ULPI transceiver. Nothing isp170x specific here.

 disable pulldowns */

 full speed */

 Enable strong pull-up on DP (1.5K) and reset */

 recover original state */

/*

 * ISP1704 detects PS/2 adapters as charger. To make sure the detected charger

 * is actually a dedicated charger, the following steps need to be taken.

 Reset the transceiver */

 Set normal mode */

 Clear the DP and DM pull-down bits */

 Enable strong pull-up on DP (1.5K) and reset */

 Read the line state */

 Disable strong pull-up on DP (1.5K) */

 Is it a charger or PS/2 connection */

 Enable weak pull-up resistor on DP */

 Disable strong pull-up on DP (1.5K) */

 Enable weak pull-down resistor on DM */

 It's a charger if the line states are clear */

 Disable weak pull-up resistor on DP */

 set SW control bit in PWR_CTRL register */

 enable manual charger detection */

 Check if there is a charger */

 recover original state */

 do not call wall charger detection more times */

 detect wall charger */

 enable data pullups */

			/*

			 * Only 500mA here or high speed chirp

			 * handshaking may break

		/*

		 * Disable data pullups. We need to prevent the controller from

		 * enumerating.

		 *

		 * FIXME: This is here to allow charger detection with Host/HUB

		 * chargers. The pullups may be enabled elsewhere, so this can

		 * not be the final solution.

 Test ULPI interface */

 Verify the product and vendor id matches */

	/*

	 * REVISIT: using work in order to allow the usb notifications to be

	 * made atomically in the future.

	/*

	 * Taking over the D+ pullup.

	 *

	 * FIXME: The device will be disconnected if it was already

	 * enumerated. The charger driver should be always loaded before any

	 * gadget is loaded.

 Detect charger if VBUS is valid (the cable was already plugged). */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Sysfs interface for the universal power supply monitor class

 *

 *  Copyright ¬© 2007  David Woodhouse <dwmw2@infradead.org>

 *  Copyright ¬© 2007  Anton Vorontsov <cbou@mail.ru>

 *  Copyright ¬© 2004  Szabolcs Gyurko

 *  Copyright ¬© 2003  Ian Molton <spyro@f2s.com>

 *

 *  Modified: 2004, Oct     Szabolcs Gyurko

 Properties of type `int' */

 Properties of type `const char *' */

	/*

	 * If no match was found, then check to see if it is an integer.

	 * Integer values are valid for enums in addition to the text value.

		/*

		 * When a battery is absent, we expect -ENODEV. Don't abort;

		 * send the uevent with at least the the PRESENT=0 property

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  LEDs triggers for power supply class

 *

 *  Copyright ¬© 2007  Anton Vorontsov <cbou@mail.ru>

 *  Copyright ¬© 2004  Szabolcs Gyurko

 *  Copyright ¬© 2003  Ian Molton <spyro@f2s.com>

 *

 *  Modified: 2004, Oct     Szabolcs Gyurko

 Battery specific LEDs triggers. */

 Generated power specific LEDs triggers. */

 Choice what triggers to create&update. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2016, Prodys S.L.

 *

 * This adds support for sbs-charger compilant chips as defined here:

 * http://sbs-forum.org/specs/sbc110.pdf

 *

 * Implemetation based on sbs-battery.c

 since based on SMBus */

	/*

	 * Before we register, we need to make sure we can actually talk

	 * to the battery.

	/*

	 * The sbs-charger spec doesn't impose the use of an interrupt. So in

	 * the case it wasn't provided we use polling in order get the charger's

	 * status.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Fuel gauge driver for Richtek RT5033

 *

 * Copyright (C) 2014 Samsung Electronics, Co., Ltd.

 * Author: Beomho Seo <beomho.seo@samsung.com>

 SPDX-License-Identifier: GPL-2.0+

/*

 * Power supply driver for the RICOH RN5T618 power management chip family

 *

 * Copyright (C) 2020 Andreas Kemnade

/*

 * Formula seems accurate for battery current, but for USB current around 70mA

 * per step was seen on Kobo Clara HD but all sources show the same formula

 * also fur USB current. To avoid accidentially unwanted high currents we stick

 * to that formula

 input current limit is not very accurate */

 input current limit is not very accurate */

 Prevent races when registers are changing. */

 USB or ADP plugged */

 current is negative when discharging */

		/* E.g. the vendor kernels of various Kobo and Tolino Ebook

		 * readers disable the fuel gauge on shutdown. If a kernel

		 * without fuel gauge support is booted after that, the fuel

		 * gauge will get decalibrated.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Battery charger driver for TI's tps65090

 *

 * Copyright (c) 2013, NVIDIA CORPORATION.  All rights reserved.



 Used when no irq */

 Enable the VACG interrupt for AC power detect */

 Clear interrupts. */

 Check for charger presence */

 end */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * axp288_charger.c - X-power AXP288 PMIC Charger driver

 *

 * Copyright (C) 2016-2017 Hans de Goede <hdegoede@redhat.com>

 * Copyright (C) 2014 Intel Corporation

 * Author: Ramakrishna Pallala <ramakrishna.pallala@intel.com>

 900mA */

 1500mA */

 2000mA */

 2500mA */

 4000mV */

 100mV */

 4300mV */

 4 bits */

 200mA */

 200mA */

 20% of CC */

 2 bits */

 4.10V */

 4.15V */

 4.20V */

 4.35V */

 2 bits */

 6 Hrs */

 2 Hrs */

 12 Hrs */

 40 mins */

 10 mins */

 100mA */

 500mA */

 900mA */

 1500mA */

 2000mA */

 2500mA */

 3000mA */

 3500mA */

 4000mA */

 0 DegC */

 45 DegC */

 4100mV */

 4150mV */

 4200mV */

 4350mV */

 OTG/Host mode */

 SDP/CDP/DCP USB charging cable notifications */

 All b1xxx values map to 4000 mA */

 Check for OTG case first */

 Check for OTG case first */

/*

 * The HP Pavilion x2 10 series comes in a number of variants:

 * Bay Trail SoC    + AXP288 PMIC, Micro-USB, DMI_BOARD_NAME: "8021"

 * Bay Trail SoC    + AXP288 PMIC, Type-C,    DMI_BOARD_NAME: "815D"

 * Cherry Trail SoC + AXP288 PMIC, Type-C,    DMI_BOARD_NAME: "813E"

 * Cherry Trail SoC + TI PMIC,     Type-C,    DMI_BOARD_NAME: "827C" or "82F4"

 *

 * The variants with the AXP288 + Type-C connector are all kinds of special:

 *

 * 1. They use a Type-C connector which the AXP288 does not support, so when

 * using a Type-C charger it is not recognized. Unlike most AXP288 devices,

 * this model actually has mostly working ACPI AC / Battery code, the ACPI code

 * "solves" this by simply setting the input_current_limit to 3A.

 * There are still some issues with the ACPI code, so we use this native driver,

 * and to solve the charging not working (500mA is not enough) issue we hardcode

 * the 3A input_current_limit like the ACPI code does.

 *

 * 2. If no charger is connected the machine boots with the vbus-path disabled.

 * Normally this is done when a 5V boost converter is active to avoid the PMIC

 * trying to charge from the 5V boost converter's output. This is done when

 * an OTG host cable is inserted and the ID pin on the micro-B receptacle is

 * pulled low and the ID pin has an ACPI event handler associated with it

 * which re-enables the vbus-path when the ID pin is pulled high when the

 * OTG host cable is removed. The Type-C connector has no ID pin, there is

 * no ID pin handler and there appears to be no 5V boost converter, so we

 * end up not charging because the vbus-path is disabled, until we unplug

 * the charger which automatically clears the vbus-path disable bit and then

 * on the second plug-in of the adapter we start charging. To solve the not

 * charging on first charger plugin we unconditionally enable the vbus-path at

 * probe on this model, which is safe since there is no 5V boost converter.

 Terminating entry */

 Offline? Disable charging and bail */

 Determine cable/charger type */

 See comment above axp288_hp_x2_dmi_ids declaration */

 Charger type detection still in progress, bail. */

 Set vbus current limit first, then enable charger */

	/*

	 * Set usb_id_short flag to avoid running charger detection logic

	 * in case usb host.

 Disable VBUS path before enabling the 5V boost */

 Program temperature thresholds */

 Do not turn-off charger o/p after charge cycle ends */

 Setup ending condition for charging to be 10% of I(chrg) */

 Disable OCV-SOC curve calibration */

 See comment above axp288_hp_x2_dmi_ids declaration */

 Read current charge voltage and current limit */

 Determine charge voltage */

 Determine charge current limit */

	/*

	 * Do not allow the user to configure higher settings then those

	 * set by the firmware

	/*

	 * On some devices the fuelgauge and charger parts of the axp288 are

	 * not used, check that the fuelgauge is enabled (CC_CTRL != 0).

 Register with power supply class */

 Cancel our work on cleanup, register this before the notifiers */

 Register for extcon notification */

 Register for OTG notification */

 Register charger interrupts */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Common power driver for PDAs and phones with one or two external

 * power supplies (AC/USB) connected to main and backup batteries,

 * and optional builtin charger.

 *

 * Copyright ¬© 2007 Anton Vorontsov <cbou@mail.ru>

	/*

	 * Okay, charger set. Now wait a bit before notifying supplicants,

	 * charge power should stabilize.

	/*

	 * Wait a bit before reading ac/usb line status and setting charger,

	 * because ac/usb status readings may lag from irq.

	/*

	 * Wait a bit before reading ac/usb line status and setting charger,

	 * because ac/usb status readings may lag from irq.

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0



 Copyright (C) 2018 BayLibre SAS

 Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>



 Battery charger driver for MAXIM 77650/77651 charger/power-supply.

 Charger is OFF. */

 Charger is in prequalification mode. */

 Charger is in fast-charge constant current mode. */

 Charger is in JEITA modified fast-charge constant-current mode. */

 Charger is in fast-charge constant-voltage mode. */

 Charger is in JEITA modified fast-charge constant-voltage mode. */

 Charger is in top-off mode. */

 Charger is in JEITA modified top-off mode. */

 Charger is done. */

 Charger is JEITA modified done. */

 Charger is suspended due to a prequalification timer fault. */

 Charger is suspended due to a fast-charge timer fault. */

 Charger is suspended due to a battery temperature fault. */

 May be 0x10 - debouncing */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Battery measurement code for Zipit Z2

 *

 * Copyright (C) 2009 Peter Edwards <sweetlilmre@gmail.com>

 POWER_SUPPLY_PROP_STATUS */

 POWER_SUPPLY_PROP_TECHNOLOGY */

 POWER_SUPPLY_PROP_VOLTAGE_NOW */

 POWER_SUPPLY_PROP_VOLTAGE_MAX */

 POWER_SUPPLY_PROP_VOLTAGE_MIN */

 POWER_SUPPLY_PROP_PRESENT */

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2018 Spreadtrum Communications Inc.

 PMIC global registers definition */

 SC2731 switch charger registers definition */

 SC2731_CHG_CFG0 register definition */

 SC2731_CHG_CFG1 register definition */

 SC2731_CHG_CFG5 register definition */

 Default current definition (unit is mA) */

 Enable charger constant current mode */

 Start charging */

 Calculate the step value, each step is 50 mA */

 Set pre-charge current as 450 mA */

 set current limitation and start to charge */

 Stop charging */

 Enable charger module */

		/*

		 * If no battery information is supplied, we should set

		 * default charge termination current to 120 mA, and default

		 * charge termination voltage to 4.35V.

 Set charge termination current */

 Set charge termination voltage */

	/*

	 * If the USB charger status has been USB_CHARGER_PRESENT before

	 * registering the notifier, we should start to charge with getting

	 * the charge current.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson AB 2012

 *

 * Main and Back-up battery management driver.

 *

 * Note: Backup battery management is required in case of Li-Ion battery and not

 * for capacitive battery. HREF boards have capacitive battery and hence backup

 * battery management is not used and the supported code is available in this

 * driver.

 *

 * Author:

 *	Johan Palsson <johan.palsson@stericsson.com>

 *	Karl Komierowski <karl.komierowski@stericsson.com>

 *	Arun R Murthy <arun.murthy@stericsson.com>

 62.5 ms */

 45 minutes */

 mV */

 mV */

 FG constants */

/**

 * struct ab8500_fg_interrupts - ab8500 fg interrupts

 * @name:	name of the interrupt

 * @isr		function pointer to the isr

/**

 * struct ab8500_fg - ab8500 FG device information

 * @dev:		Pointer to the structure device

 * @node:		a list of AB8500 FGs, hence prepared for reentrance

 * @irq			holds the CCEOC interrupt number

 * @vbat:		Battery voltage in mV

 * @vbat_nom:		Nominal battery voltage in mV

 * @inst_curr:		Instantenous battery current in mA

 * @avg_curr:		Average battery current in mA

 * @bat_temp		battery temperature

 * @fg_samples:		Number of samples used in the FG accumulation

 * @accu_charge:	Accumulated charge from the last conversion

 * @recovery_cnt:	Counter for recovery mode

 * @high_curr_cnt:	Counter for high current mode

 * @init_cnt:		Counter for init mode

 * @low_bat_cnt		Counter for number of consecutive low battery measures

 * @nbr_cceoc_irq_cnt	Counter for number of CCEOC irqs received since enabled

 * @recovery_needed:	Indicate if recovery is needed

 * @high_curr_mode:	Indicate if we're in high current mode

 * @init_capacity:	Indicate if initial capacity measuring should be done

 * @turn_off_fg:	True if fg was off before current measurement

 * @calib_state		State during offset calibration

 * @discharge_state:	Current discharge state

 * @charge_state:	Current charge state

 * @ab8500_fg_started	Completion struct used for the instant current start

 * @ab8500_fg_complete	Completion struct used for the instant current reading

 * @flags:		Structure for information about events triggered

 * @bat_cap:		Structure for battery capacity specific parameters

 * @avg_cap:		Average capacity filter

 * @parent:		Pointer to the struct ab8500

 * @main_bat_v:		ADC channel for the main battery voltage

 * @bm:           	Platform specific battery management information

 * @fg_psy:		Structure that holds the FG specific battery properties

 * @fg_wq:		Work queue for running the FG algorithm

 * @fg_periodic_work:	Work to run the FG algorithm periodically

 * @fg_low_bat_work:	Work to check low bat condition

 * @fg_reinit_work	Work used to reset and reinitialise the FG algorithm

 * @fg_work:		Work to run the FG algorithm instantly

 * @fg_acc_cur_work:	Work to read the FG accumulator

 * @fg_check_hw_failure_work:	Work for checking HW state

 * @cc_lock:		Mutex for locking the CC

 * @fg_kobject:		Structure of type kobject

/**

 * ab8500_fg_get() - returns a reference to the primary AB8500 fuel gauge

 * (i.e. the first fuel gauge in the instance list)

 Main battery properties */

/*

 * This array maps the raw hex value to lowbat voltage used by the AB8500

 * Values taken from the UM0836

 If not captured above, return index of last element */

/**

 * ab8500_fg_is_low_curr() - Low or high current mode

 * @di:		pointer to the ab8500_fg structure

 * @curr:	the current to base or our decision on

 *

 * Low current mode if the current consumption is below a certain threshold

	/*

	 * We want to know if we're in low current mode

/**

 * ab8500_fg_add_cap_sample() - Add capacity to average filter

 * @di:		pointer to the ab8500_fg structure

 * @sample:	the capacity in mAh to add to the filter

 *

 * A capacity is added to the filter and a new mean capacity is calculated and

 * returned

		/*

		 * Check the time stamp for each sample. If too old,

		 * replace with latest sample

/**

 * ab8500_fg_clear_cap_samples() - Clear average filter

 * @di:		pointer to the ab8500_fg structure

 *

 * The capacity filter is is reset to zero.

/**

 * ab8500_fg_fill_cap_sample() - Fill average filter

 * @di:		pointer to the ab8500_fg structure

 * @sample:	the capacity in mAh to fill the filter with

 *

 * The capacity filter is filled with a capacity in mAh

/**

 * ab8500_fg_coulomb_counter() - enable coulomb counter

 * @di:		pointer to the ab8500_fg structure

 * @enable:	enable/disable

 *

 * Enable/Disable coulomb counter.

 * On failure returns negative value.

		/* To be able to reprogram the number of samples, we have to

 Program the samples */

 Start the CC */

 Clear any pending read requests */

 Stop the CC */

/**

 * ab8500_fg_inst_curr_start() - start battery instantaneous current

 * @di:         pointer to the ab8500_fg structure

 *

 * Returns 0 or error code

 * Note: This is part "one" and has to be called before

 * ab8500_fg_inst_curr_finalize()

 Program the samples */

 Start the CC */

 Return and WFI */

 Note: cc_lock is still locked */

/**

 * ab8500_fg_inst_curr_started() - check if fg conversion has started

 * @di:         pointer to the ab8500_fg structure

 *

 * Returns 1 if conversion started, 0 if still waiting

/**

 * ab8500_fg_inst_curr_done() - check if fg conversion is done

 * @di:         pointer to the ab8500_fg structure

 *

 * Returns 1 if conversion done, 0 if still waiting

/**

 * ab8500_fg_inst_curr_finalize() - battery instantaneous current

 * @di:         pointer to the ab8500_fg structure

 * @res:	battery instantenous current(on success)

 *

 * Returns 0 or an error code

 * Note: This is part "two" and has to be called at earliest 250 ms

 * after ab8500_fg_inst_curr_start()

 100uS between read request and read is needed */

 Read CC Sample conversion value Low and high */

	/*

	 * negative value for Discharging

	 * convert 2's complement into decimal

	/*

	 * Convert to unit value in mA

	 * Full scale input voltage is

	 * 63.160mV => LSB = 63.160mV/(4096*res) = 1.542mA

	 * Given a 250ms conversion cycle time the LSB corresponds

	 * to 107.1 nAh. Convert to current by dividing by the conversion

	 * time in hours (250ms = 1 / (3600 * 4)h)

	 * 107.1nAh assumes 10mOhm, but fg_res is in 0.1mOhm

 Clear any pending read requests */

 Stop the CC */

/**

 * ab8500_fg_inst_curr_blocking() - battery instantaneous current

 * @di:         pointer to the ab8500_fg structure

 * @res:	battery instantenous current(on success)

 *

 * Returns 0 else error code

 Wait for CC to actually start */

/**

 * ab8500_fg_acc_cur_work() - average battery current

 * @work:	pointer to the work_struct structure

 *

 * Updated the average battery current obtained from the

 * coulomb counter.

 Check for sign bit in case of negative value, 2's complement */

	/*

	 * Convert to uAh

	 * Given a 250ms conversion cycle time the LSB corresponds

	 * to 112.9 nAh.

	 * 112.9nAh assumes 10mOhm, but fg_res is in 0.1mOhm

	/*

	 * Convert to unit value in mA

	 * by dividing by the conversion

	 * time in hours (= samples / (3600 * 4)h)

	 * and multiply with 1000

/**

 * ab8500_fg_bat_voltage() - get battery voltage

 * @di:		pointer to the ab8500_fg structure

 *

 * Returns battery voltage(on success) else error code

/**

 * ab8500_fg_volt_to_capacity() - Voltage based capacity

 * @di:		pointer to the ab8500_fg structure

 * @voltage:	The voltage to convert to a capacity

 *

 * Returns battery capacity in per mille based on voltage

/**

 * ab8500_fg_uncomp_volt_to_capacity() - Uncompensated voltage based capacity

 * @di:		pointer to the ab8500_fg structure

 *

 * Returns battery capacity based on battery voltage that is not compensated

 * for the voltage drop due to the load

/**

 * ab8500_fg_battery_resistance() - Returns the battery inner resistance

 * @di:		pointer to the ab8500_fg structure

 *

 * Returns battery inner resistance added with the fuel gauge resistor value

 * to get the total resistance in the whole link from gnd to bat+ node.

 fg_res variable is in 0.1mOhm */

/**

 * ab8500_fg_load_comp_volt_to_capacity() - Load compensated voltage based capacity

 * @di:		pointer to the ab8500_fg structure

 *

 * Returns battery capacity based on battery voltage that is load compensated

 * for the voltage drop

 Use Ohms law to get the load compensated voltage */

/**

 * ab8500_fg_convert_mah_to_permille() - Capacity in mAh to permille

 * @di:		pointer to the ab8500_fg structure

 * @cap_mah:	capacity in mAh

 *

 * Converts capacity in mAh to capacity in permille

/**

 * ab8500_fg_convert_permille_to_mah() - Capacity in permille to mAh

 * @di:		pointer to the ab8500_fg structure

 * @cap_pm:	capacity in permille

 *

 * Converts capacity in permille to capacity in mAh

/**

 * ab8500_fg_convert_mah_to_uwh() - Capacity in mAh to uWh

 * @di:		pointer to the ab8500_fg structure

 * @cap_mah:	capacity in mAh

 *

 * Converts capacity in mAh to capacity in uWh

 Make sure to round upwards if necessary */

/**

 * ab8500_fg_calc_cap_charging() - Calculate remaining capacity while charging

 * @di:		pointer to the ab8500_fg structure

 *

 * Return the capacity in mAh based on previous calculated capcity and the FG

 * accumulator register value. The filter is filled with this capacity

 Capacity should not be less than 0 */

	/*

	 * We force capacity to 100% once when the algorithm

	 * reports that it's full.

 We need to update battery voltage and inst current when charging */

/**

 * ab8500_fg_calc_cap_discharge_voltage() - Capacity in discharge with voltage

 * @di:		pointer to the ab8500_fg structure

 * @comp:	if voltage should be load compensated before capacity calc

 *

 * Return the capacity in mAh based on the battery voltage. The voltage can

 * either be load compensated or not. This value is added to the filter and a

 * new mean value is calculated and returned.

/**

 * ab8500_fg_calc_cap_discharge_fg() - Capacity in discharge with FG

 * @di:		pointer to the ab8500_fg structure

 *

 * Return the capacity in mAh based on previous calculated capcity and the FG

 * accumulator register value. This value is added to the filter and a

 * new mean value is calculated and returned.

 Capacity should not be less than 0 */

	/*

	 * Check against voltage based capacity. It can not be lower

	 * than what the uncompensated voltage says

/**

 * ab8500_fg_capacity_level() - Get the battery capacity level

 * @di:		pointer to the ab8500_fg structure

 *

 * Get the battery capacity level based on the capacity in percent

/**

 * ab8500_fg_calculate_scaled_capacity() - Capacity scaling

 * @di:		pointer to the ab8500_fg structure

 *

 * Calculates the capacity to be shown to upper layers. Scales the capacity

 * to have 100% as a reference from the actual capacity upon removal of charger

 * when charging is in maintenance mode.

	/*

	 * As long as we are in fully charge mode scale the capacity

	 * to show 100%.

 Calculates the scaled capacity. */

/**

 * ab8500_fg_update_cap_scalers() - Capacity scaling

 * @di:		pointer to the ab8500_fg structure

 *

 * To be called when state change from charge<->discharge to update

 * the capacity scalers.

/**

 * ab8500_fg_check_capacity_limits() - Check if capacity has changed

 * @di:		pointer to the ab8500_fg structure

 * @init:	capacity is allowed to go up in init mode

 *

 * Check if capacity or capacity limit has changed and notify the system

 * about it using the power_supply framework

		/*

		 * We do not allow reported capacity level to go up

		 * unless we're charging or if we're in init

	/*

	 * If we have received the LOW_BAT IRQ, set capacity to 0 to initiate

	 * shutdown

		/*

		 * We report 100% if algorithm reported fully charged

		 * and show 100% during maintenance charging (scaling).

			/*

			 * We will not report 0% unless we've got

			 * the LOW_BAT IRQ, no matter what the FG

			 * algorithm says.

			/*

			 * We do not allow reported capacity to go up

			 * unless we're charging or if we're in init

/**

 * ab8500_fg_algorithm_charging() - FG algorithm for when charging

 * @di:		pointer to the ab8500_fg structure

 *

 * Battery capacity calculation state machine for when we're charging

	/*

	 * If we change to discharge mode

	 * we should start with recovery

		/*

		 * Read the FG and calculate the new capacity

 Wasn't the CC IRQ that got us here */

 Check capacity limits */

 1000 is permille, -> 100 percent */

 If within limits, use the saved capacity and exit estimation...*/

/**

 * ab8500_fg_algorithm_discharging() - FG algorithm for when discharging

 * @di:		pointer to the ab8500_fg structure

 *

 * Battery capacity calculation state machine for when we're discharging

 If we change to charge mode we should start with init */

 We use the FG IRQ to work on */

		/*

		 * Discard a number of samples during startup.

		 * After that, use compensated voltage for a few

		 * samples to get an initial capacity.

		 * Then go to READOUT

 Discard the first [x] seconds */

		/*

		 * We should check the power consumption

		 * If low, go to READOUT (after x min) or

		 * RECOVERY_SLEEP if time left.

		 * If high, go to READOUT

 Detect mode change */

 Wasn't the CC IRQ that got us here */

 Detect mode change */

/**

 * ab8500_fg_algorithm_calibrate() - Internal columb counter offset calibration

 * @di:		pointer to the ab8500_fg structure

 *

 Something went wrong, don't calibrate then */

/**

 * ab8500_fg_algorithm() - Entry point for the FG algorithm

 * @di:		pointer to the ab8500_fg structure

 *

 * Entry point for the battery capacity calculation state machine

/**

 * ab8500_fg_periodic_work() - Run the FG state machine periodically

 * @work:	pointer to the work_struct structure

 *

 * Work queue function for periodic work

 Get an initial capacity calculation */

/**

 * ab8500_fg_check_hw_failure_work() - Check OVV_BAT condition

 * @work:	pointer to the work_struct structure

 *

 * Work queue function for checking the OVV_BAT condition

	/*

	 * If we have had a battery over-voltage situation,

	 * check ovv-bit to see if it should be reset.

 Not yet recovered from ovv, reschedule this test */

/**

 * ab8500_fg_low_bat_work() - Check LOW_BAT condition

 * @work:	pointer to the work_struct structure

 *

 * Work queue function for checking the LOW_BAT condition

 Check if LOW_BAT still fulfilled */

 Is it time to shut down? */

			/*

			* Else we need to re-schedule this check to be able to detect

			* if the voltage increases again during charging or

			* due to decreasing load.

 This is needed to dispatch LOW_BAT */

/**

 * ab8500_fg_battok_calc - calculate the bit pattern corresponding

 * to the target voltage.

 * @di:       pointer to the ab8500_fg structure

 * @target:   target voltage

 *

 * Returns bit pattern closest to the target voltage

 * valid return values are 0-14. (0-BATT_OK_MAX_NR_INCREMENTS)

/**

 * ab8500_fg_battok_init_hw_register - init battok levels

 * @di:       pointer to the ab8500_fg structure

 *

/**

 * ab8500_fg_instant_work() - Run the FG state machine instantly

 * @work:	pointer to the work_struct structure

 *

 * Work queue function for instant work

/**

 * ab8500_fg_cc_data_end_handler() - end of data conversion isr.

 * @irq:       interrupt number

 * @_di:       pointer to the ab8500_fg structure

 *

 * Returns IRQ status(IRQ_HANDLED)

/**

 * ab8500_fg_cc_int_calib_handler () - end of calibration isr.

 * @irq:       interrupt number

 * @_di:       pointer to the ab8500_fg structure

 *

 * Returns IRQ status(IRQ_HANDLED)

/**

 * ab8500_fg_cc_convend_handler() - isr to get battery avg current.

 * @irq:       interrupt number

 * @_di:       pointer to the ab8500_fg structure

 *

 * Returns IRQ status(IRQ_HANDLED)

/**

 * ab8500_fg_batt_ovv_handler() - Battery OVV occured

 * @irq:       interrupt number

 * @_di:       pointer to the ab8500_fg structure

 *

 * Returns IRQ status(IRQ_HANDLED)

 Schedule a new HW failure check */

/**

 * ab8500_fg_lowbatf_handler() - Battery voltage is below LOW threshold

 * @irq:       interrupt number

 * @_di:       pointer to the ab8500_fg structure

 *

 * Returns IRQ status(IRQ_HANDLED)

 Initiate handling in ab8500_fg_low_bat_work() if not already initiated. */

		/*

		 * Start a timer to check LOW_BAT again after some time

		 * This is done to avoid shutdown on single voltage dips

/**

 * ab8500_fg_get_property() - get the fg properties

 * @psy:	pointer to the power_supply structure

 * @psp:	pointer to the power_supply_property structure

 * @val:	pointer to the power_supply_propval union

 *

 * This function gets called when an application tries to get the

 * fg properties by reading the sysfs files.

 * voltage_now:		battery voltage

 * current_now:		battery instant current

 * current_avg:		battery average current

 * charge_full_design:	capacity where battery is considered full

 * charge_now:		battery capacity in nAh

 * capacity:		capacity in percent

 * capacity_level:	capacity level

 *

 * Returns error code in case of failure else 0 on success

	/*

	 * If battery is identified as unknown and charging of unknown

	 * batteries is disabled, we always report 100% capacity and

	 * capacity level UNKNOWN, since we can't calculate

	 * remaining capacity

	/*

	 * For all psy where the name of your driver

	 * appears in any supplied_to

 Go through all properties for the psy */

 Save current capacity as maximum */

/**

 * ab8500_fg_init_hw_registers() - Set up FG related registers

 * @di:		pointer to the ab8500_fg structure

 *

 * Set up battery OVV, low battery voltage registers

 Set VBAT OVV threshold */

 Enable VBAT OVV detection */

 Low Battery Voltage */

 Battery OK threshold */

/**

 * ab8500_fg_external_power_changed() - callback for power supply changes

 * @psy:       pointer to the structure power_supply

 *

 * This function is the entry point of the pointer external_power_changed

 * of the structure power_supply.

 * This function gets executed when there is a change in any external power

 * supply that this driver needs to be notified of.

/**

 * ab8500_fg_reinit_work() - work to reset the FG algorithm

 * @work:	pointer to the work_struct structure

 *

 * Used to reset the current battery capacity to be able to

 * retrigger a new voltage base capacity calculation. For

 * test and verification purpose.

 Wait one second until next try*/

 Exposure to the sysfs interface */

/**

 * ab8500_fg_sysfs_exit() - de-init of sysfs entry

 * @di:                pointer to the struct ab8500_chargalg

 *

 * This function removes the entry in sysfs.

/**

 * ab8500_fg_sysfs_init() - init of sysfs entry

 * @di:                pointer to the struct ab8500_chargalg

 *

 * This function adds an entry in sysfs.

 * Returns error code in case of failure else 0(on success)

 Exposure to the sysfs interface <<END>> */

	/*

	 * Change state if we're not charging. If we're charging we will wake

	 * up on the FG IRQ

	/*

	 * If the FG is enabled we will disable it before going to suspend

	 * only if we're not charging

 ab8500 fg driver interrupts and their respective isr */

 Create a work queue for running the FG algorithm */

 Start the coulomb counter */

 Run the FG algorithm */

 Disable coulomb counter */

 get parent data */

 Init work for running the fg algorithm instantly */

 Init work for getting the battery accumulated current */

 Init work for reinitialising the fg algorithm */

 Work delayed Queue to run the state machine */

 Work to check low battery condition */

 Init work for HW failure check */

 Reset battery low voltage flag */

 Initialize low battery counter */

 Initialize OVV, and other registers */

 Consider battery unknown until we're informed otherwise */

 Register FG power supply class */

	/*

	 * Initialize completion used to notify completion and start

	 * of inst current

 Register primary interrupt handlers */

 Calibrate the fg first time */

 Use room temp as default value until we get an update from driver. */

/*

 * Battery charger driver for TI BQ24735

 *

 * Copyright (c) 2013, NVIDIA CORPORATION.  All rights reserved.

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation;

 *

 * This program is distributed in the hope that it will be useful, but WITHOUT

 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or

 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for

 * more details.

 *

 * You should have received a copy of the GNU General Public License along

 * with this program; if not, write to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

 BQ24735 available commands and their respective masks */

 ChargeOptions bits of interest */

 end */ }

 SPDX-License-Identifier: GPL-2.0+



 max8997_charger.c - Power supply consumer driver for the Maxim 8997/8966



  Copyright (C) 2011 Samsung Electronics

  MyungJoo Ham <myungjoo.ham@samsung.com>

 MAX8997_REG_STATUS4 */

 MAX8997_REG_MBCCTRL1 */

 MAX8997_REG_MBCCTRL5 */

 "FULL", "CHARGING" or "DISCHARGING". */

 the presence of battery */

 charger is active or not */

 Note that the charger control is done by a current regulator "CHARGER" */

 grab regulator from parent device's node

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ROHM BD99954 charger driver

 *

 * Copyright (C) 2020 Rohm Semiconductors

 *	Originally written by:

 *		Mikko Mutanen <mikko.mutanen@fi.rohmeurope.com>

 *		Markus Laine <markus.laine@fi.rohmeurope.com>

 *	Bugs added by:

 *		Matti Vaittinen <matti.vaittinen@fi.rohmeurope.com>

/*

 *   The battery charging profile of BD99954.

 *

 *   Curve (1) represents charging current.

 *   Curve (2) represents battery voltage.

 *

 *   The BD99954 data sheet divides charging to three phases.

 *   a) Trickle-charge with constant current (8).

 *   b) pre-charge with constant current (6)

 *   c) fast-charge, first with constant current (5) phase. After

 *      the battery voltage has reached target level (4) we have constant

 *      voltage phase until charging current has dropped to termination

 *      level (7)

 *

 *    V ^                                                        ^ I

 *      .                                                        .

 *      .                                                        .

 *(4)` `.` ` ` ` ` ` ` ` ` ` ` ` ` ` ----------------------------.

 *      .                           :/                           .

 *      .                     o----+/:/ ` ` ` ` ` ` ` ` ` ` ` ` `.` ` (5)

 *      .                     +   ::  +                          .

 *      .                     +  /-   --                         .

 *      .                     +`/-     +                         .

 *      .                     o/-      -:                        .

 *      .                    .s.        +`                       .

 *      .                  .--+         `/                       .

 *      .               ..``  +          .:                      .

 *      .             -`      +           --                     .

 *      .    (2)  ...``       +            :-                    .

 *      .    ...``            +             -:                   .

 *(3)` `.`.""  ` ` ` `+-------- ` ` ` ` ` ` `.:` ` ` ` ` ` ` ` ` .` ` (6)

 *      .             +                       `:.                .

 *      .             +                         -:               .

 *      .             +                           -:.            .

 *      .             +                             .--.         .

 *      .   (1)       +                                `.+` ` ` `.` ` (7)

 *      -..............` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` + ` ` ` .` ` (8)

 *      .                                                +       -

 *      -------------------------------------------------+++++++++-->

 *      |   trickle   |  pre  |          fast            |

 *

 * Details of DT properties for different limits can be found from BD99954

 * device tree binding documentation.

 Trickle-charge Current */

 Fast Charging Regulation Voltage */

 Initial field values, converted to initial register values */

 VSYS Regulation Setting */

 VBUS input current limitation */

 VCC/VACP Input Current Limit Setting */

 Trickle-charge Current Setting */

 Pre-Charge Current Setting */

 Fast-Charge constant current */

 Fast Charging Regulation Voltage */

 Pre-charge Voltage Threshold Setting */

 Re-charge Battery Voltage Setting */

 Battery Over Voltage Threshold Setting */

 Charging termination current */

 Protect state data */

 Measurement regs */

 TODO: Check these against datasheet page 34 */

 Rest of the states are error related, no charging */

		/*

		 * Currently the DT uses this property to give the

		 * target current for fast-charging constant current phase.

		 * I think it is correct in a sense.

		 *

		 * Yet, this prop we read and return here is the programmed

		 * safety limit for combined input currents. This feels

		 * also correct in a sense.

		 *

		 * However, this results a mismatch to DT value and value

		 * read from sysfs.

		/*

		 * The actual range : 2560 to 19200 mV. No matter what the

		 * register says

 Start step is 64 mA */

 Maximum is 1024 mA - no matter what register says */

 Battery properties which we access through charger */

	/*

	 * The bd9995x does not seem to generate big amount of interrupts.

	 * The logic regarding which interrupts can cause relevant

	 * status changes seem to be pretty complex.

	 *

	 * So lets implement really simple and hopefully bullet-proof handler:

	 * It does not really matter which IRQ we handle, we just go and

	 * re-read all interesting statuses + give the framework a nudge.

	 *

	 * Other option would be building a _complex_ and error prone logic

	 * trying to decide what could have been changed (resulting this IRQ

	 * we are now handling). During the normal operation the BD99954 does

	 * not seem to be generating much of interrupts so benefit from such

	 * logic would probably be minimal.

 Handle only IRQs that are not masked */

 Lowest bit does not represent any sub-registers */

	/*

	 * Mask and ack IRQs we will handle (+ the idiot bit)

 Clear sub IRQs */

 Ack active sub-statuses */

 May as well retry once */

 Read whole chip state */

 Enable the charging trigger after SDP charger attached */

 Enable charging trigger after SDP charger attached */

 Disable charging trigger by BC1.2 detection */

 Disable charging trigger by BC1.2 detection */

 Disable automatic limitation of the input current */

 Select current limitation when SDP charger attached*/

 Select current limitation when DCP charger attached */

 Activate USB charging and DC/DC converter */

 DCDC clock: 1200 kHz*/

 Enable charging */

 Disable Input current Limit setting voltage measurement */

 Disable input current limiting */

 Charge Termination Current Setting to 0*/

 Trickle-charge Current Setting */

 Pre-charge Current setting */

 Fast Charge Current for constant current phase */

 Fast Charge Voltage Regulation Setting */

 Set Pre-charge Voltage Threshold for trickle charging. */

 Reverse buck boost voltage Setting */

 Disable fast-charging watchdog */

 Disable pre-charging watchdog */

 Power save off */

	/*

	 * Currently we initialize charger to a known state at startup.

	 * If we want to allow for example the boot code to initialize

	 * charger we should get rid of this.

 Initialize currents/voltages and other parameters */

 Battery props we access through charger */

/*

 * Limit configurations for vbus-input-current and vcc-vacp-input-current

 * Minimum limit is 0 uA. Max is 511 * 32000 uA = 16352000 uA. This is

 * configured by writing a register so that each increment in register

 * value equals to 32000 uA limit increment.

 *

 * Eg, value 0x0 is limit 0, value 0x1 is limit 32000, ...

 * Describe the setting in linear_range table.

 Possible trickle, pre-charging and termination current values */

/*

 * Fast charging voltage regulation, starting re-charging limit

 * and battery over voltage protection have same possible values

 Possible VSYS voltage regulation values */

 Possible settings for switching from trickle to pre-charging limits */

 Possible current values for fast-charging constant current phase */

	/*

	 * The power_supply_get_battery_info() does not support getting values

	 * from ACPI. Let's fix it if ACPI is required here.

	/*

	 * We need to init the psy before we can call

	 * power_supply_get_battery_info() for it

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Battery driver for One Laptop Per Child board.

 *

 *	Copyright ¬© 2006-2010  David Woodhouse <dwmw2@infradead.org>

 uint16_t,	*9.76/32,    mV   */

 int16_t,	*15.625/120, mA   */

 int16_t,	*6250/15,    ¬µAh  */

 uint16_t,	*100/256,   ¬∞C  */

 uint16_t,	*100/256,   ¬∞C  */

 uint8_t,	bitmask */

 uint8_t,	percentage */

 uint8_t[6] */

 uint8_t adr as input, uint8_t output */

 uint8_t,	bitmask */

/*********************************************************************

 *		Power

 er,... */

 Older EC didn't report charge/discharge bits */

 No AC means discharging */

 Not _necessarily_ true but EC doesn't tell all yet */

 Eep. We don't know this failure code */

 Gold Peak */

 Gold Peak, fall through */

 BYD */

 Gold Peak */

 Gold Peak */

 BYD */

/*********************************************************************

 *		Battery properties

	/* Theoretically there's a race here -- the battery could be

	   removed immediately after we check whether it's present, and

	   then we query for some other property of the now-absent battery.

	   It doesn't matter though -- the EC will return the last-known

	   information, and it's as if we just ran that _little_ bit faster

 XO-1.5 does not have ambient temperature property */

 EEPROM reading goes completely around the power_supply API, sadly */

 Allow userspace to see the specific error value pulled from the EC */

/*********************************************************************

 *		Initialisation

 See if the EC is already there and get the EC revision */

 XO 1.75 */

 XO 1 or 1.5 with a new EC firmware. */

		/*

		 * We've seen a number of EC protocol changes; this driver

		 * requires the latest EC protocol, supported by 0x44 and above.

 Ignore the status. It doesn't actually matter */

 XO-1.5 */

 XO-1 */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Driver for Analog Devices (Linear Technology) LT3651 charger IC.

 *  Copyright (C) 2017, Topic Embedded Products

		/*

		 * If the fault pin is active, the chrg pin explains the type

		 * of failure.

	/*

	 * Acquire IRQs for the GPIO pins if possible. If the system does not

	 * support IRQs on these pins, userspace will have to poll the sysfs

	 * files manually.

 DEPRECATED */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Battery and Power Management code for the Sharp SL-5x00

 *

 * Copyright (C) 2009 Thomas Kunze

 *

 * based on tosa_battery.c

 protects gpio pins */

 protects data */

 Obtained but unused GPIO */

 flush all pending status updates */

 things may have changed while we were away */

 Obtain all the main battery GPIOs */

 COLLIE_GPIO_MBAT_ON = GPIO 7 on the UCB (TC35143) */

 COLLIE_GPIO_TMP_ON = GPIO 9 on the UCB (TC35143) */

	/*

	 * Obtain the backup battery COLLIE_GPIO_BBAT_ON which is

	 * GPIO 8 on the UCB (TC35143)

 see comment in collie_bat_remove */

 These are obtained from the machine */

 These are directly from the UCB so let's free them */

	/*

	 * Now cancel the bat_work.  We won't get any more schedules,

	 * since all sources (isr and external_power_changed) are

	 * unregistered now.

 SPDX-License-Identifier: GPL-2.0

/*

 * Battery driver for the Ingenic JZ47xx SoCs

 * Copyright (c) 2019 Artur Rojek <contact@artur-rojek.eu>

 *

 * based on drivers/power/supply/jz4740-battery.c

/* Set the most appropriate IIO channel voltage reference scale

 * based on the battery's max voltage.

 Only set scale if there is more than one (fractional) entry */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * DA9150 Charger Driver

 *

 * Copyright (c) 2014 Dialog Semiconductor

 *

 * Author: Adam Thomson <Adam.Thomson.Opensource@diasemi.com>

 Private data */

 Charger Properties */

 Read processed value - mV units */

 Convert voltage to expected uV units */

 Read processed value - mA units */

 Convert current to expected uA units */

 Read processed value - 0.001 degrees C units */

 Convert temp to expect 0.1 degrees C units */

 Battery Properties */

 Check to see if battery is discharging */

 Now check for other states */

 Check if temperature limit reached */

 Check for other health states */

 Check if battery present or removed */

 Value starts at 2500 mV, 50 mV increments, presented in uV */

 Read processed value - mV units */

 25mA increments */

 Value starts at 3650 mV, 25 mV increments, presented in uV */

 Nothing we can really do except report this. */

 Nothing we can really do except report this. */

 Charger plugged in or battery only */

 Enable OTG Boost */

 Revert to charge mode */

 Acquire ADC channels */

 Register power supplies */

 Get initial online supply */

 Setup OTG reporting & configuration */

 Register IRQs */

 Make sure IRQs are released before unregistering power supplies */

 Release ADC channels */

 SPDX-License-Identifier: GPL-2.0

 BQ25980 Battery Charger Driver

 Copyright (C) 2020 Texas Instruments Incorporated - http:
/*

 * 1-Wire implementation for Maxim Semiconductor

 * MAX7211/MAX17215 standalone fuel gauge chip

 *

 * Copyright (C) 2017 Radioavionica Corporation

 * Author: Alex A. Mihaylov <minimumlaw@rambler.ru>

 *

 * Use consistent with the GNU GPL is permitted,

 * provided that this copyright notice is

 * preserved in its entirety in all copies and derived works.

 *

 Number of valid register addresses in W1 mode */

 Factory settings (nonvolatile registers) (W1 specific) */

 RSense in 10^-5 Ohm */

 Strings */

 HEX Strings */

 MAX172XX Output Registers for W1 chips */

 status reg */

 battery connected bit */

 chip config */

 chip type mask */

 Temperature */

 Battery voltage */

 Actual current */

 Average current */

 Percentage of charge */

 Design capacity */

 Average capacity */

 Time to empty */

 Time to full */

 battery design format */

 in tenths uOhm */

 see get_sn_str() later for comment */

 Convert regs value to power_supply units */

 in sec. */

 in percent from 0 to 100 */

 in uV */

 in uAh */

/*

 * Current and temperature is signed values, so unsigned regs

 * value must be converted to signed type

 in tenths of deg. C */

/*

 * Calculating current registers resolution:

 *

 * RSense stored in 10^-5 Ohm, so measurement voltage must be

 * in 10^-11 Volts for get current in uA.

 * 16 bit current reg fullscale +/-51.2mV is 102400 uV.

 * So: 102400 / 65535 * 10^5 = 156252

		/*

		 * POWER_SUPPLY_PROP_PRESENT will always readable via

		 * sysfs interface. Value return 0 if battery not

		 * present or unaccessible via W1.

 We need signed current, so must cast info->rsense to signed type */

	/*

	 * Strings already received and inited by probe.

	 * We do dummy read for check battery still available.

 int */

 strings */

 Maxim say: Serial number is a hex string up to 12 hex characters */

/*

 * MAX1721x registers description for w1-regmap

 volatile data */

 non-volatile memory */

 non-volatile history (unused) */

 volatile data unused registers */

 hole between volatile and non-volatile registers */

/*

 * Model Gauge M5 Algorithm output register

 * Volatile data (must not be cached)

/*

 * W1-regmap config

	/*

	 * power_supply class battery name translated from W1 slave device

	 * unique ID (look like 26-0123456789AB) to "max1721x-0123456789AB\0"

	 * so, 26 (device family) correspond to max1721x devices.

	 * Device name still unique for any number of connected devices.

	/*

	 * FixMe: battery device name exceed max len for thermal_zone device

	 * name and translation to thermal_zone must be disabled.

 regmap init */

 rsense init */

 in regs in 10^-5 */

 SPDX-License-Identifier: GPL-2.0+



 max77693_charger.c - Battery charger driver for the Maxim 77693



 Copyright (C) 2014 Samsung Electronics

 Krzysztof Kozlowski <krzk@kernel.org>

 In high temp the charging current is reduced, but still charging */

	/*

	 * Top-off: trickle or fast? In top-off the current varies between

	 * 100 and 250 mA. It is higher than prequalification current.

 In high temp the charging current is reduced, but still charging */

/*

 * Supported health statuses:

 *  - POWER_SUPPLY_HEALTH_DEAD

 *  - POWER_SUPPLY_HEALTH_GOOD

 *  - POWER_SUPPLY_HEALTH_OVERVOLTAGE

 *  - POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE

 *  - POWER_SUPPLY_HEALTH_UNKNOWN

 *  - POWER_SUPPLY_HEALTH_UNSPEC_FAILURE

		/*

		 * Took longer to charge than expected, charging suspended.

		 * Damaged battery?

	/*

	 * Read CHG_INT_OK register. High DETBAT bit here should be

	 * equal to value 0x0 in CHG_DETAILS_01/BAT field.

 Starting from 4 hours, step by 2 hours */

	/*

	 * 0x00 - disable

	 * 0x01 - 4h

	 * 0x02 - 6h

	 * ...

	 * 0x07 - 16h

	 * Round down odd values.

 Disable */

 (200000, 350000> */

	/*

	 * 0x00 - 3.650 V

	 * 0x01 - 3.675 V

	 * ...

	 * 0x1b - 4.325 V

	 * 0x1c - 4.340 V

	 * 0x1d - 4.350 V

	 * 0x1e - 4.375 V

	 * 0x1f - 4.400 V

 disable */

/*

 * Sets charger registers to proper and safe default values.

 Unlock charger register protection */

 CONFIG_OF */

 CONFIG_OF */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Summit Microelectronics SMB347 Battery Charger Driver

 *

 * Copyright (C) 2011, Intel Corporation

 *

 * Authors: Bruce E. Robertson <bruce.e.robertson@intel.com>

 *          Mika Westerberg <mika.westerberg@linux.intel.com>

 Use the default compensation method */

 Use default factory programmed value for hard/soft temperature limit */

/*

 * Configuration registers. These are mirrored to volatile RAM and can be

 * written once %CMD_A_ALLOW_WRITE is set in %CMD_A register. They will be

 * reloaded from non-volatile registers after POR.

 Command registers */

 Interrupt Status registers */

 Status registers */

/**

 * struct smb347_charger - smb347 charger instance

 * @dev: pointer to device

 * @regmap: pointer to driver regmap

 * @mains: power_supply instance for AC/DC power

 * @usb: power_supply instance for USB power

 * @usb_rdev: USB VBUS regulator device

 * @id: SMB charger ID

 * @mains_online: is AC/DC input connected

 * @usb_online: is USB input connected

 * @irq_unsupported: is interrupt unsupported by SMB hardware

 * @usb_vbus_enabled: is USB VBUS powered by SMB charger

 * @max_charge_current: maximum current (in uA) the battery can be charged

 * @max_charge_voltage: maximum voltage (in uV) the battery can be charged

 * @pre_charge_current: current (in uA) to use in pre-charging phase

 * @termination_current: current (in uA) used to determine when the

 *			 charging cycle terminates

 * @pre_to_fast_voltage: voltage (in uV) treshold used for transitioning to

 *			 pre-charge to fast charge mode

 * @mains_current_limit: maximum input current drawn from AC/DC input (in uA)

 * @usb_hc_current_limit: maximum input high current (in uA) drawn from USB

 *			  input

 * @chip_temp_threshold: die temperature where device starts limiting charge

 *			 current [%100 - %130] (in degree C)

 * @soft_cold_temp_limit: soft cold temperature limit [%0 - %15] (in degree C),

 *			  granularity is 5 deg C.

 * @soft_hot_temp_limit: soft hot temperature limit [%40 - %55] (in degree  C),

 *			 granularity is 5 deg C.

 * @hard_cold_temp_limit: hard cold temperature limit [%-5 - %10] (in degree C),

 *			  granularity is 5 deg C.

 * @hard_hot_temp_limit: hard hot temperature limit [%50 - %65] (in degree C),

 *			 granularity is 5 deg C.

 * @suspend_on_hard_temp_limit: suspend charging when hard limit is hit

 * @soft_temp_limit_compensation: compensation method when soft temperature

 *				  limit is hit

 * @charge_current_compensation: current (in uA) for charging compensation

 *				 current when temperature hits soft limits

 * @use_mains: AC/DC input can be used

 * @use_usb: USB input can be used

 * @use_usb_otg: USB OTG output can be used (not implemented yet)

 * @enable_control: how charging enable/disable is controlled

 *		    (driver/pin controls)

 * @inok_polarity: polarity of INOK signal which denotes presence of external

 *		   power supply

 *

 * @use_main, @use_usb, and @use_usb_otg are means to enable/disable

 * hardware support for these. This is useful when we want to have for

 * example OTG charging controlled via OTG transceiver driver and not by

 * the SMB347 hardware.

 *

 * Hard and soft temperature limit values are given as described in the

 * device data sheet and assuming NTC beta value is %3750. Even if this is

 * not the case, these values should be used. They can be mapped to the

 * corresponding NTC beta values with the help of table %2 in the data

 * sheet. So for example if NTC beta is %3375 and we want to program hard

 * hot limit to be %53 deg C, @hard_hot_temp_limit should be set to %50.

 *

 * If zero value is given in any of the current and voltage values, the

 * factory programmed default will be used. For soft/hard temperature

 * values, pass in %SMB3XX_TEMP_USE_DEFAULT instead.

 Fast charge current in uA */

 Pre-charge current in uA */

 Termination current in uA */

 Input current limit in uA */

 Charge current compensation in uA */

 Convert register value to current using lookup table */

 Convert current to register value using lookup table */

/**

 * smb347_update_ps_status - refreshes the power source status

 * @smb: pointer to smb347 charger instance

 *

 * Function checks whether any power source is connected to the charger and

 * updates internal state accordingly. If there is a change to previous state

 * function returns %1, otherwise %0 and negative errno in case of errror.

	/*

	 * Dc and usb are set depending on whether they are enabled in

	 * platform data _and_ whether corresponding undervoltage is set.

/*

 * smb347_is_ps_online - returns whether input power source is connected

 * @smb: pointer to smb347 charger instance

 *

 * Returns %true if input power source is connected. Note that this is

 * dependent on what platform has configured for usable power sources. For

 * example if USB is disabled, this will return %false even if the USB cable

 * is connected.

/**

 * smb347_charging_status - returns status of charging

 * @smb: pointer to smb347 charger instance

 *

 * Function returns charging status. %0 means no charging is in progress,

 * %1 means pre-charging, %2 fast-charging and %3 taper-charging.

	/*

	 * Depending on whether valid power source is connected or not, we

	 * disable or enable the charging. We do it manually because it

	 * depends on how the platform has configured the valid inputs.

 uV */

 uV */

 degree C */

 this goes from higher to lower so invert the value */

 this goes from higher to lower so invert the value */

	/*

	 * If any of the temperature limits are set, we also enable the

	 * thermistor monitoring.

	 *

	 * When soft limits are hit, the device will start to compensate

	 * current and/or voltage depending on the configuration.

	 *

	 * When hard limit is hit, the device will suspend charging

	 * depending on the configuration.

/*

 * smb347_set_writable - enables/disables writing to non-volatile registers

 * @smb: pointer to smb347 charger instance

 *

 * You can enable/disable writing to the non-volatile configuration

 * registers by calling this function.

 *

 * Returns %0 on success and negative errno in case of failure.

	/*

	 * Program the platform specific configuration values to the device

	 * first.

 If USB charging is disabled we put the USB in suspend mode */

	/*

	 * If configured by platform data, we enable hardware Auto-OTG

	 * support for driving VBUS. Otherwise we disable it.

 Activate pin control, making it writable. */

	/*

	 * Make the charging functionality controllable by a write to the

	 * command register unless pin control is specified in the platform

	 * data.

 Disable Automatic Power Source Detection (APSD) interrupt. */

 SMB347 it needs at least 20ms for setting IRQSTAT_E_*IN_UV_IRQ */

	/*

	 * If we get charger error we report the error back to user.

	 * If the error is recovered charging will resume again.

	/*

	 * If we reached the termination current the battery is charged and

	 * we can update the status now. Charging is automatically

	 * disabled by the hardware.

	/*

	 * If we got a charger timeout INT that means the charge

	 * full is not detected with in charge timeout value.

	/*

	 * If we got an under voltage interrupt it means that AC/USB input

	 * was connected or disconnected.

	/*

	 * Enable/disable interrupts for:

	 *	- under voltage

	 *	- termination current reached

	 *	- charger timeout

	 *	- charger error

	/*

	 * Interrupt pin is optional. If it is connected, we setup the

	 * interrupt support here.

	/*

	 * Configure the STAT output to be suitable for interrupts: disable

	 * all other output (except interrupts) and make it active low.

/*

 * Returns the constant charge current programmed

 * into the charger in uA.

	/*

	 * The current value is composition of FCC and PCC values

	 * and we can detect which table to use from bit 5.

/*

 * Returns the constant charge voltage programmed

 * into the charger in uV.

		/*

		 * set to NOT CHARGING upon charger error

		 * or charging has stopped.

			/*

			 * set to charging if battery is in pre-charge,

			 * fast charge or taper charging mode.

			/*

			 * set the status to FULL if battery is not in pre

			 * charge, fast charge or taper charging mode AND

			 * charging is terminated at least once.

			/*

			 * in this case no charger error or termination

			 * occured but charging is not in progress!!!

		/*

		 * We handle trickle and pre-charging the same, and taper

		 * and none the same.

	/*

	 * These properties come from the battery info, still we need to

	 * pre-initialize the values. See smb347_get_battery_info() below.

 Charging constraints */

 For thermometer monitoring */

 Supported charging mode */

 Select charging control */

	/*

	 * Polarity of INOK signal indicating presence of external power

	 * supply connected to the charger.

 Suspend when battery temperature is outside hard limits */

	/*

	 * It's unknown what happens if this bit is unset due to lack of

	 * access to the datasheet, assume it's limit-enable.

		/*

		 * VBUS won't be powered if INOK is active, so we need to

		 * manually disable INOK on some platforms.

 SPDX-License-Identifier: GPL-2.0

/*

 * Fuel gauge driver for CellWise 2013 / 2015

 *

 * Copyright (C) 2012, RockChip

 * Copyright (C) 2020, Tobias Schramm

 *

 * Authors: xuhuicong <xhc@rock-chips.com>

 * Authors: Tobias Schramm <t.schramm@manjaro.org>

 reset gauge of no valid state of charge could be polled for 40s */

 reset gauge if state of charge stuck for half an hour during charging */

 poll interval from CellWise GPL Android driver example */

 make sure gauge is not in sleep mode */

 write new battery info */

 set config update flag  */

 reset gauge to apply new battery profile */

 wait for gauge to reset */

 clear reset flag */

 wait for gauge to become ready */

 wait for gauge to enter sleep */

 Reset gauge if stuck while charging */

 Ignore voltage dips during charge */

 Ignore voltage spikes during discharge */

	/*

	 * 305 uV per ADC step

	 * Use 312 / 1024  as efficient approximation of 305 / 1000

	 * Negligible error of 0.1%

 calculate remaining capacity */

 estimate current based on time to empty */

 try again if this happens */

/*

 * Generic battery driver code using IIO

 * Copyright (C) 2012, Anish Kumar <anish198519851985@gmail.com>

 * based on jz4740-battery.c

 * based on s3c_adc_battery.c

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive for

 * more details.

 *

 hope 10ms is enough */

/*

 * gab_chan_name suggests the standard channel names for commonly used

 * channel types.

/*

 * This properties are set based on the received platform data and this

 * should correspond one-to-one with enum chan_type.

 bootup default values for the battery */

	/*

	 * copying the static properties and allocating extra memory for holding

	 * the extra configurable properties received from platform data.

	/*

	 * getting channel from iio and copying the battery properties

	 * based on the channel supported by consumer device.

 copying properties for supported channels only */

 already known */

 really new */

 none of the channels are supported so let's bail out */

	/*

	 * Total number of properties is equal to static properties

	 * plus the dynamic properties.Some properties may not be set

	 * as come channels may be not be supported by the device.So

	 * we need to take care of that.

 Schedule timer to check current status */

 Schedule timer to check current status */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * TI BQ25890 charger driver

 *

 * Copyright (C) 2015 Intel Corporation

 Reg00 */

 Reg01 */

 Reg02 */

 Reg03 */

 Reg04 */

 Reg05 */

 Reg06 */

 Reg07 */

 Reg08 */

 Reg09 */

 Reg0A */

 Reg0B */

 Reg0C */

 Reg0D */

 Reg0E */

 Reg0F */

 Reg10 */

 Reg11 */

 Reg12 */

 Reg13 */

 Reg14 */

 initial field values, converted to register values */

 charge current		*/

 regulation voltage		*/

 termination current		*/

 precharge current		*/

 minimum system voltage limit */

 boost regulation voltage	*/

 boost current limit		*/

 boost frequency		*/

 enable ILIM pin		*/

 thermal regulation threshold */

 IBAT sense resistor value    */

 IBAT compensation voltage limit */

 protect state data */

 REG00 */

 REG01 */

 REG02 */

 reserved on BQ25896

 reserved on BQ25896

 REG03 */

 BQ25896 only

 REG04 */

 REG05 */

 REG06 */

 REG07 */

 reserved on BQ25895

 REG08 */

 REG09 */

 reserved on BQ25895

 REG0A */

 reserved on BQ25895

 BQ25896 only

 REG0B */

 reserved on BQ25896

 REG0C */

 REG0D */

 REG0E */

 REG0F */

 REG10 */

 REG11 */

 REG12 */

 REG13 */

 REG14 */

/*

 * Most of the val -> idx conversions can be computed, given the minimum,

 * maximum and the step between values. For the rest of conversions, we use

 * lookup tables.

 range tables */

 lookup tables */

 Thermal Regulation Threshold lookup table, in degrees Celsius */

 Boost mode current limit lookup table, in uA */

 range tables */

 TODO: BQ25896 has max ICHG 3008 mA */

 uA */

 uA */

 uA */

 uV */

 uV */

 uV */

 uV */

 uOhm */

 lookup tables */

 lookup table? */

 range table */

 update state in case we lost an interrupt */

 unreachable */

 read measured value */

 converted_val = 2.304V + ADC_val * 20mV (table 10.3.15) */

 read measured value */

 converted_val = 2.304V + ADC_val * 20mV (table 10.3.15) */

 read measured value */

 converted_val = ADC_val * 50mA (table 10.3.19) */

 power removed */

 disable ADC */

 power inserted */

 enable ADC, to have control of charge current/voltage */

 disable watchdog */

 initialize currents/voltages and other parameters */

 Configure ADC for continuous conversions when charging */

 Enable boost mode */

 Disable boost mode */

 BQ25892 and BQ25896 share same ID 0 */

 holds converted value from given property */

 required properties */

 optional properties */

 initialize data for optional properties */

 120 degrees Celsius */

 IBAT compensation disabled */

 OTG reporting */

 reset all registers to default values */

	/*

	 * If charger is removed, while in suspend, make sure ADC is diabled

	 * since it consumes slightly more power.

 Re-enable ADC only if charger is plugged in. */

 signal userspace, maybe state changed while suspended */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * TWL4030/TPS65950 BCI (Battery Charger Interface) driver

 *

 * Copyright (C) 2010 Gra≈ævydas Ignotas <notasas@gmail.com>

 *

 * based on twl4030_bci_battery.c by TI

 * Copyright (C) 2008 Texas Instruments, Inc.

 BCI interrupts */

 Watchdog overflow */

 Timer overflow */

 Battery charge current high */

 Battery cc. low / FSM state change */

 Battery current end-of-charge */

 Battery temperature out of range 2 */

 Battery temperature out of range 1 */

 Battery status */

 VBAT level */

 VBAT overvoltage */

 VBUS overvoltage */

 Ac charger overvoltage */

/*

 * If AC (Accessory Charger) voltage exceeds 4.5V (MADC 11)

 * then AC is available.

	/*

	 * ichg_* and *_cur values in uA. If any are 'large', we set

	 * CGAIN to '1' which doubles the range for half the

	 * precision.

 charging mode requested */

	/* When setting the USB current we slowly increase the

	 * requested current until target is reached or the voltage

	 * drops below 4.75V.  In the latter case we step back one

	 * step.

 20mA at a time */

 4.75V */

 TWL4030 caps at 1.7A */

 strings for 'usb_mode' values */

/*

 * clear and set bits on an given register on a given module

 read MSB */

 read LSB */

/*

 * TI provided formulas:

 * CGAIN == 0: ICHG = (BCIICHG * 1.7) / (2^10 - 1) - 0.85

 * CGAIN == 1: ICHG = (BCIICHG * 3.4) / (2^10 - 1) - 1.7

 * Here we use integer approximation of:

 * CGAIN == 0: val * 1.6618 - 0.85 * 1000

 * CGAIN == 1: (val * 1.6618 - 0.85 * 1000) * 2

/*

 * convert twl register value for currents into uA

/*

 * convert uA currents into twl register value

 rounding problems */

	/*

	 * If AC (Accessory Charger) voltage exceeds 4.5V (MADC 11)

	 * and AC is enabled, set current for 'ac'

 First, check thresholds and see if cgain is needed */

		/* Need to turn for charging while we change the

		 * CGAIN bit.  Leave it off while everything is

		 * updated.

	/*

	 * For ichg_eoc, the hardware only supports reg values matching

	 * 100XXXX000, and requires the XXXX be stored in the high nibble

	 * of TWL4030_BCIMFTH8.

	/*

	 * For ichg_lo, reg value must match 10XXXX0000.

	 * XXXX is stored in low nibble of TWL4030_BCIMFTH8.

 ichg_eoc and ichg_lo live in same register */

 ichg_hi threshold must be 1XXXX01100 (I think) */

	/*

	 * And finally, set the current.  This is stored in

	 * two registers.

 we have only 10 bits */

		/* disable write protection for one write access for

		/* disable write protection for one write access for

 Flip CGAIN and re-enable charging */

 BCIVBUS uses ADCIN8, 7/1023 V/step */

 Back up and stop adjusting. */

 Reached target and voltage is OK - stop */

/*

 * Enable/Disable USB Charge functionality.

 Need to keep phy powered */

 Enable interrupts now. */

 forcing the field BCIAUTOUSB (BOOT_BCI[1]) to 1 */

 forcing USBFASTMCHG(BCIMFSTS4[2]) to 1 */

 Enable interrupts now. */

 Watch dog key: WOVF acknowledge */

 0x24 + EKEY6: off mode */

 EKEY2: Linear charge: USB path */

 WDKEY5: stop watchdog count */

 enable MFEN3 access */

			 /* ICHGEOCEN - end-of-charge monitor (current < 80mA)

			  *                      (charging continues)

			  * ICHGLOWEN - current level monitor (charge continues)

			  * don't monitor over-current or heat save

/*

 * Enable/Disable AC Charge funtionality.

/*

 * Enable/Disable charging of Backup Battery.

 disable charging of backup battery */

/*

 * TWL4030 CHG_PRES (AC charger presence) events

 reset current on each 'plug' event */

/*

 * TWL4030 BCI monitoring events

 charger state change, inform the core */

 various monitoring events, for now we just log them here */

 reset current on each 'plug' event */

/*

 * sysfs charger enabled store

/*

 * sysfs charger enabled show

/*

 * Returns the main charge FSM state

 * Or < 0 on failure.

 A little white lie */

 charging must be active for meaningful result */

 BCIVBUS uses ADCIN8, 7/1023 V/step */

 BCIVAC uses ADCIN11, 10/1023 V/step */

 current measurement is shared between AC and USB */

 Stop charging when current drops to here */

 Low threshold */

 High threshold */

 500mA */

 500mA */

 100mA */

 iio not ready */

 phy not ready */

 Enable interrupts now. */

 mask interrupts */

/*

 * Driver for batteries with DS2760 chips inside.

 *

 * Copyright ¬© 2007 Anton Vorontsov

 *	       2004-2007 Matt Reimer

 *	       2004 Szabolcs Gyurko

 *

 * Use consistent with the GNU GPL is permitted,

 * provided that this copyright notice is

 * preserved in its entirety in all copies and derived works.

 *

 * Author:  Anton Vorontsov <cbou@mail.ru>

 *	    February 2007

 *

 *	    Matt Reimer <mreimer@vpop.net>

 *	    April 2004, 2005, 2007

 *

 *	    Szabolcs Gyurko <szabolcs.gyurko@tlt.hu>

 *	    September 2004

 Known commands to the DS2760 chip */

 Number of valid register addresses */

 DS2760 data, valid after calling ds2760_battery_read_status() */

 jiffies when data read */

 raw DS2760 data */

 units of 4.88 mV */

 units of ¬µV */

 units of 0.625 mA */

 units of ¬µA */

 units of 0.25 mAh */

 units of ¬µAh */

 units of 0.125 ¬∞C */

 units of 0.1 ¬∞C */

 units of ¬µAh */

 percentage */

 units of ¬µAh */

 units of ¬µAh */

 units of seconds */

 POWER_SUPPLY_STATUS_* */

 XXX w1_write_block returns void, not n_written */

/* Some batteries have their rated capacity stored a N * 10 mAh, while

 Samsung */

 BYD */

 Lishen */

 NEC */

 Samsung */

 BYD */

 HP iPAQ hx4700 3.7V 1800mAh (359113-001) */

 Lishen */

 NEC */

 Samsung */

 BYD */

 Lishen */

 NEC */

 HP iPAQ hx4700 3.7V 3600mAh (359114-001) */

/* array is level at temps 0¬∞C, 10¬∞C, 20¬∞C, 30¬∞C, 40¬∞C

	/* The first time we read the entire contents of SRAM/EEPROM,

	/* DS2760 reports voltage in units of 4.88mV, but the battery class

	/* DS2760 reports current in signed units of 0.625mA, but the battery

 DS2760 reports accumulated current in signed units of 0.25mAh. */

	/* DS2760 reports temperature in signed units of 0.125¬∞C, but the

	 * battery class reports in units of 1/10 ¬∞C, so we convert by

	/* At least some battery monitors (e.g. HP iPAQ) store the battery's

 convert to ¬µAh */

 Calculate the full level at the present temperature. */

	/* If the full_active_uAh value is not given, fall back to the rated

	 * capacity. This is likely to happen when chips are not part of the

 convert to ¬µAh */

 Calculate the empty level at the present temperature. */

 convert to ¬µAh */

		/* From Maxim Application Note 131: remaining capacity =

 acr is in units of 0.25 mAh */

			/* Don't consider the battery to be full unless

			 * we've seen the current < 10 mA at least two

	/* Write to the di->raw[] buffer directly - the DS2760_ACTIVE_FULL

	/* When we get notified by external circuitry that the battery is

	 * considered fully charged now, we know that there is no current

	 * flow any more. However, the ds2760's internal current meter is

	 * too inaccurate to rely on - spec say something ~15% failure.

	 * Hence, we use the current offset bias register to compensate

	 * that error.

	/* Write to the di->raw[] buffer directly - the CURRENT_OFFSET_BIAS

	/* postpone the actual work by 20 secs. This is for debouncing GPIO

 the interface counts in uAh, convert the value */

 ds2760_battery_set_current_accum() does the conversion */

 property is in mAh */

 enable sleep mode feature */

 set rated capacity from module param or device tree */

	/* set current accumulator if given as parameter.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Dumb driver for LiIon batteries using TWL4030 madc.

 *

 * Copyright 2013 Golden Delicious Computers

 * Lukas M√§rdian <lukas@goldelico.com>

 *

 * Based on dumb driver for gta01 battery

 * Copyright 2009 Openmoko, Inc

 * Balaji Rao <balajirrao@openmoko.org>

 choose charging curve */

 interval found - interpolate within range */

 assume battery is always present */

 in mAh */

 assume discharge with 400 mA (ca. 1.5W) */

 sort charging and discharging calibration data */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright(c) 2017 Intel Corporation. All rights reserved.

/**

 * struct dax_device - anchor object for dax services

 * @inode: core vfs

 * @cdev: optional character interface for "device dax"

 * @host: optional name for lookups where the device path is not available

 * @private: dax driver private data

 * @flags: state and boolean properties

/**

 * dax_get_by_host() - temporary lookup mechanism for filesystem-dax

 * @host: alternate name for the device registered by a dax driver

		/*

		 * An arch that has enabled the pmem api should also

		 * have its drivers support pfn_t_devmap()

		 *

		 * This is a developer warning and should not trigger in

		 * production. dax_flush() will crash since it depends

		 * on being able to do (page_address(pfn_to_page())).

 CONFIG_FS_DAX */

 CONFIG_BLOCK */

 !alive + rcu grace period == no new operations / mappings */

 gate whether dax_flush() calls the low level flush routine */

 flag to check if device supports synchronous flush */

/**

 * dax_direct_access() - translate a device pgoff to an absolute pfn

 * @dax_dev: a dax_device instance representing the logical memory range

 * @pgoff: offset in pages from the start of the device to translate

 * @nr_pages: number of consecutive pages caller can handle relative to @pfn

 * @kaddr: output parameter that returns a virtual address mapping of pfn

 * @pfn: output parameter that returns an absolute pfn translation of @pgoff

 *

 * Return: negative errno if an error occurs, otherwise the number of

 * pages accessible at the device relative @pgoff.

	/*

	 * There are no callers that want to zero more than one page as of now.

	 * Once users are there, this check can be removed after the

	 * device mapper code has been updated to split ranges across targets.

/*

 * Note, rcu is not protecting the liveness of dax_dev, rcu is ensuring

 * that any fault handlers or operations that might have seen

 * dax_alive(), have completed.  Any operations that start after

 * synchronize_srcu() has run will abort upon seeing !dax_alive().

	/*

	 * Unconditionally init dax_dev since it's coming from a

	 * non-zeroed slab cache

/**

 * inode_dax: convert a public inode into its dax_dev

 * @inode: An inode with i_cdev pointing to a dax_dev

 *

 * Note this is not equivalent to to_dax_dev() which is for private

 * internal use where we know the inode filesystem type == dax_fs_type.

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2016-2019 Intel Corporation. All rights reserved. */

 Memory resource name used for add_memory_driver_managed(). */

 Set if any memory will remain added when the driver will be unloaded. */

 memory-block align the hotplug range */

	/*

	 * Ensure good NUMA information for the persistent memory.

	 * Without this check, there is a risk that slow memory

	 * could be mixed in a node with faster memory, causing

	 * unavoidable performance issues.

 Region is permanently reserved if hotremove fails. */

			/*

			 * Once some memory has been onlined we can't

			 * assume that it can be un-onlined safely.

		/*

		 * Set flags appropriate for System RAM.  Leave ..._BUSY clear

		 * so that add_memory() can add a child resource.  Do not

		 * inherit flags from the parent since it may set new flags

		 * unknown to us that will break add_memory() below.

		/*

		 * Ensure that future kexec'd kernels will not treat

		 * this as RAM automatically.

	/*

	 * We have one shot for removing memory, if some memory blocks were not

	 * offline prior to calling this function remove_memory() will fail, and

	 * there is no way to hotremove this memory until reboot because device

	 * unbind will succeed even if we return failure.

	/*

	 * Without hotremove purposely leak the request_mem_region() for the

	 * device-dax range and return '0' to ->remove() attempts. The removal

	 * of the device from the driver always succeeds, but the region is

	 * permanently pinned as reserved by the unreleased

	 * request_mem_region().

 CONFIG_MEMORY_HOTREMOVE */

 Resource name is permanently allocated if any hotremove fails. */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2017-2018 Intel Corporation. All rights reserved. */

	/*

	 * We only ever expect to handle device-dax instances, i.e. the

	 * @type argument to MODULE_ALIAS_DAX_DEVICE() is always zero

	/*

	 * Track new seed creation only after successful probe of the

	 * previous seed.

	/*

	 * All but the 'device-dax' driver, which has 'match_always'

	 * set, requires an exact id match.

/*

 * Rely on the fact that drvdata is set before the attributes are

 * registered, and that the attributes are unregistered before drvdata

 * is cleared to assume that drvdata is always valid.

			/*

			 * In support of crafting multiple new devices

			 * simultaneously multiple seeds can be created,

			 * but only the first one that has not been

			 * successfully bound is tracked as the region

			 * seed.

 a return value >= 0 indicates this invocation invalidated the id */

		/*

		 * Invalidate the device so it does not become active

		 * again, but always preserve device-id-0 so that

		 * /sys/bus/dax/ is guaranteed to be populated while any

		 * dax_region is registered.

 won the race to invalidate the device, clean it up */

	/*

	 * The DAX core assumes that it can store its private data in

	 * parent->driver_data. This WARN is a reminder / safeguard for

	 * developers of device-dax drivers.

 handle the seed alloc special case */

 nr_range == 0 is elsewhere special cased as 0-size device */

	/*

	 * A dev_dax instance must be registered before mapping device

	 * children can be added. Defer to devm_create_dev_dax() to add

	 * the initial mapping device.

	/*

	 * The minimum mapping granularity for a device instance is a

	 * single subsection, unless the arch says otherwise.

/*

 * Only allow adjustments that preserve the relative pgoff of existing

 * allocations. I.e. the dev_dax->ranges array is ordered by increasing pgoff.

	/*

	 * Expand the device into the unused portion of the region. This

	 * may involve adjusting the end of an existing resource, or

	 * allocating a new resource.

 space at the beginning of the region */

 space between allocations */

 space at the end of the region */

	/*

	 * We only ever expect to handle device-dax instances, i.e. the

	 * @type argument to MODULE_ALIAS_DAX_DEVICE() is always zero

	/*

	 * No 'host' or dax_operations since there is no access to this

	 * device outside of mmap of the resulting character device.

 a device_dax instance is dead while the driver is not attached */

 register mapping device for the initial allocation range */

	/*

	 * dax_bus_probe() calls dax_drv->probe() unconditionally.

	 * So better be safe than sorry and ensure it is provided.

 there can only be one default driver */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2016-2018 Intel Corporation. All rights reserved. */

 prevent private mappings from being established */

 see "strong" declaration in tools/testing/nvdimm/dax-dev.c */

 if we are outside of the VMA */

 if we are outside of the VMA */

 !CONFIG_HAVE_ARCH_TRANSPARENT_HUGEPAGE_PUD */

		/*

		 * In the device-dax case the only possibility for a

		 * VM_FAULT_NOPAGE result is when device-dax capacity is

		 * mapped. No need to consider the zero page, or racing

		 * conflicting mappings.

	/*

	 * We lock to check dax_dev liveness and will re-check at

	 * fault time.

 return an unmapped area aligned to the dax region specified alignment */

 don't update the range for static pgmap */

 for the CONFIG_DEV_DAX_PMEM_COMPAT case */

 all probe actions are unwound by devm, so .remove isn't necessary */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2016 - 2018 Intel Corporation. All rights reserved. */

 For compat builds, don't load this module by default */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2016 - 2018 Intel Corporation. All rights reserved. */

 we need the private definitions to implement compat suport */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2016 - 2018 Intel Corporation. All rights reserved. */

 parse the 'pfn' info block via ->rw_bytes */

 reserve the metadata area, device-dax will reserve the data */

 adjust the dax_region range to the start of data */

 child dev_dax instances now own the lifetime of the dax_region */

 SPDX-License-Identifier: GPL-2.0

 child dev_dax instances now own the lifetime of the dax_region */

 devm handles teardown */

 SPDX-License-Identifier: GPL-2.0

 define a clean / non-busy resource for the platform device */

	/*

	 * If the resource is not a top-level resource it was already

	 * assigned to a device by the HMAT parsing.

/*

 * As this is a fallback for address ranges unclaimed by the ACPI HMAT

 * parsing it must be at an initcall level greater than hmat_init().

 SPDX-License-Identifier: GPL-2.0-only

/* sunvdc.c: Sun LDOM Virtual Disk Client.

 *

 * Copyright (C) 2007, 2008 David S. Miller <davem@davemloft.net>

	/* The server fills these in for us in the disk attribute

	 * ACK packet.

 Ordered from largest major to lowest */

/* Add ioctl/CDROM_GET_CAPABILITY to support cdrom_id in udev

 * when vdisk_mtype is VD_MEDIA_TYPE_CD or VD_MEDIA_TYPE_DVD.

 * Needed to be able to install inside an ldom from an iso image.

	/* restart blk queue when ring is half emptied. also called after

	 * handshake completes, so check for initial handshake before we've

	 * allocated a disk.

 XXX Implement me XXX */

	/* This has to be a non-SMP write barrier because we are writing

	 * to memory which is shared with the peer LDOM.

	/*

	 * Doing drain, just end the request in error

	/* XXX If we want to use this code generically we have to

	 * XXX handle TX ring exhaustion etc.

	/* This has to be a non-SMP write barrier because we are writing

	 * to memory which is shared with the peer LDOM.

	/* Using version 1.2 means vdisk_phys_blksz should be set unless the

	 * disk is reserved by another system.

		/* vdisk_size should be set during the handshake, if it wasn't

		 * then the underlying disk is reserved by another system

 Each segment in a request is up to an aligned page in size. */

		/* This device has already been configured

		 * by vdc_port_probe()

/* Determine whether the VIO device is part of an mpgroup

 * by locating all the virtual-device-port nodes associated

 * with the parent virtual-device node for the VIO device

 * and checking whether any of these nodes are vdc-ports

 * which have already been configured.

 *

 * Returns true if this device is part of an mpgroup and has

 * already been probed.

 Check if this device is part of an mpgroup */

	/* Actual wall time may be double due to do_generic_file_read() doing

	 * a readahead I/O first, and once that fails it will try to read a

	 * single page.

	/* Note that the device driver_data is used to determine

	 * whether the port has been probed.

	/*

	 * Mark the queue as draining, then freeze/quiesce to ensure

	 * that all existing requests are seen in ->queue_rq() and killed

 SPDX-License-Identifier: GPL-2.0

/*

 * Support for the N64 cart.

 *

 * Copyright (c) 2021 Lauri Kasanen

/*

 * Process a single bvec of a bio.

 Alignment check */

/*

 * The target device is embedded and RAM-constrained. We save RAM

 * by initializing in __init code that gets dropped late in boot.

 * For the same reason there is no module or unloading support.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Network block device - make block devices work over TCP

 *

 * Note that you can not swap over this thing, yet. Seems to work but

 * deadlocks sometimes - you can not swap over TCP in general.

 * 

 * Copyright 1997-2000, 2008 Pavel Machek <pavel@ucw.cz>

 * Parts copyright 2001 Steven Whitehouse <steve@chygwyn.com>

 *

 * (part of code stolen from loop.c)

 pid of nbd-client, if attached */

/*

 * This flag will be set if nbd_queue_rq() succeed, and will be checked and

 * cleared in completion. Both setting and clearing of the flag are protected

 * by cmd->lock.

	/*

	 * Remove from idr after del_gendisk() completes, so if the same ID is

	 * reused, the following add_disk() will succeed.

 Call del_gendisk() asynchrounously to prevent deadlock */

/*

 * Forcibly shutdown the socket causing all listeners to error

		/*

		 * Hooray we have more connections, requeue this IO, the submit

		 * path will put it on a real connection. Or if only one

		 * connection is configured, the submit path will wait util

		 * a new connection is reconfigured or util dead timeout.

				/* We can have multiple outstanding requests, so

				 * we don't want to mark the nsock dead if we've

				 * already reconnected with a new socket, so

				 * only mark it dead if its the same socket we

				 * were sent out on.

		/*

		 * Userspace sets timeout=0 to disable socket disconnection,

		 * so just warn and reset the timer.

/*

 *  Send or receive packet. Return a positive value on success and

 *  negtive value on failue, and never return 0.

 short read */

/*

 * Different settings for sk->sk_sndtimeo can result in different return values

 * if there is a signal pending when we enter sendmsg, because reasons?

 always call with the tx_lock held */

	/* We did a partial send previously, and we at least sent the whole

	 * request struct, so just go and send the rest of the pages in the

	 * request.

 initialize handle for tracing purposes */

			/* If we havne't sent anything we can just return BUSY,

			 * however if we have sent something we need to make

			 * sure we only allow this req to be sent until we are

			 * completely done.

					/* We've already sent the header, we

					 * have no choice but to set pending and

					 * return BUSY.

			/*

			 * The completion might already have come in,

			 * so break for the last one instead of letting

			 * the iterator do it. This prevents use-after-free

			 * of the bio.

 NULL returned = something went wrong, inform userspace */

				/*

				 * If we've disconnected, we need to make sure we

				 * complete this request, otherwise error out

				 * and let the timeout stuff handle resubmitting

				 * this request onto another connection.

		/*

		 * Grab .q_usage_counter so request pool won't go away, then no

		 * request use-after-free is possible during nbd_handle_reply().

		 * If queue is frozen, there won't be any inflight requests, we

		 * needn't to handle the incoming garbage message.

 don't abort one completed request */

			/* All the sockets should already be down at this point,

			 * we just want to make sure that DISCONNECTED is set so

			 * any requests that come in that were queue'ed waiting

			 * for the reconnect timer don't trigger the timer again

			 * and instead just error out.

	/* Handle the case that we have a pending request that was partially

	 * transmitted that _has_ to be serviced first.  We need to call requeue

	 * here so that it gets put _after_ the request that is already on the

	 * dispatch list.

	/*

	 * Some failures are related to the link going down, so anything that

	 * returns EAGAIN can be retried on a different socket.

	/*

	 * Access to this flag is protected by cmd->lock, thus it's safe to set

	 * the flag after nbd_send_cmd() succeed to send request to server.

	/*

	 * Since we look at the bio's to send the request over the network we

	 * need to make sure the completion work doesn't mark this request done

	 * before we are done doing our send.  This keeps us from dereferencing

	 * freed data if we have particularly fast completions (ie we get the

	 * completion before we exit sock_xmit on the last bvec) or in the case

	 * that the server is misbehaving (or there was an error) before we're

	 * done sending everything over the wire.

	/* We can be called directly from the user space process, which means we

	 * could possibly have signals pending so our sendmsg will fail.  In

	 * this case we need to return that we are busy, otherwise error out as

	 * appropriate.

	/*

	 * We need to make sure we don't get any errant requests while we're

	 * reallocating the ->socks array.

		/* We take the tx_mutex in an error path in the recv_work, so we

		 * need to queue_work outside of the tx_mutex.

			/*

			 * If num_connections is m (2 < m),

			 * and NO.1 ~ NO.n(1 < n < m) kzallocs are successful.

			 * But NO.(n + 1) failed. We still have n recv threads.

			 * So, add flush_workqueue here to prevent recv threads

			 * dropping the last config_refs and trying to destroy

			 * the workqueue from inside the workqueue.

 user requested, ignore socket errors */

 Must be called with config_lock held */

		/*

		 * This is for compatibility only.  The queue is always cleared

		 * by NBD_DO_IT or NBD_CLEAR_SOCK.

		/*

		 * For compatibility only, we no longer keep a list of

		 * outstanding requests.

	/* The block layer will pass back some non-nbd ioctls in case we have

	 * special handling for them, but we don't so just return an error.

	/* Don't allow ioctl operations on a nbd device that was created with

	 * netlink, unless it's DISCONNECT or CLEAR_SOCK, which are fine.

 IS_ENABLED(CONFIG_DEBUG_FS) */

	/*

	 * Tell the block layer that we are not a rotational device

	/*

	 * Start out with a zero references to keep other threads from using

	 * this device until it is fully initialized.

	/* Too big first_minor can cause duplicate creation of

	 * sysfs files/links, since index << part_shift might overflow, or

	 * MKDEV() expect that the max bits of first_minor is 20.

	/*

	 * Now publish the device.

 Netlink interface. */

/* We don't use this right now since we don't parse the incoming list, but we

 * still want it here so userspace knows what to expect.

			/*

			 * We have 1 ref to keep the device around, and then 1

			 * ref for our current operation here, which will be

			 * inherited by the config.  If we already have

			 * DESTROY_ON_DISCONNECT set then we know we don't have

			 * that extra ref already held so we don't need the

			 * put_dev.

	/*

	 * Make sure recv thread has finished, we can safely call nbd_clear_que()

	 * to cancel the inflight I/Os.

	/* This is a little racey, but for status it's ok.  The

	 * reason we don't take a ref here is because we can't

	 * take a ref in the index == -1 case as we would need

	 * to put under the nbd_index_mutex, which could

	 * deadlock if we are configured to remove ourselves

	 * once we're disconnected.

		/*

		 * Adjust max_part according to part_shift as it is exported

		 * to user space so that user can know the max number of

		 * partition kernel should be able to manage.

		 *

		 * Note that -1 is required because partition 0 is reserved

		 * for the whole disk.

 Skip nbd that is being removed asynchronously */

 Also wait for nbd_dev_remove_work() completes */

/*

 * Copyright (C) 2000 Jens Axboe <axboe@suse.de>

 * Copyright (C) 2001-2004 Peter Osterlund <petero2@telia.com>

 * Copyright (C) 2006 Thomas Maier <balagi@justmail.de>

 *

 * May be copied or modified under the terms of the GNU General Public

 * License.  See linux/COPYING for more information.

 *

 * Packet writing layer for ATAPI and SCSI CD-RW, DVD+RW, DVD-RW and

 * DVD-RAM devices.

 *

 * Theory of operation:

 *

 * At the lowest level, there is the standard driver for the CD/DVD device,

 * typically ide-cd.c or sr.c. This driver can handle read and write requests,

 * but it doesn't know anything about the special restrictions that apply to

 * packet writing. One restriction is that write requests must be aligned to

 * packet boundaries on the physical media, and the size of a write request

 * must be equal to the packet size. Another restriction is that a

 * GPCMD_FLUSH_CACHE command has to be issued to the drive before a read

 * command, if the previous command was a write.

 *

 * The purpose of the packet writing driver is to hide these restrictions from

 * higher layers, such as file systems, and present a block device that can be

 * randomly read and written using 2kB-sized blocks.

 *

 * The lowest layer in the packet writing driver is the packet I/O scheduler.

 * Its data is defined by the struct packet_iosched and includes two bio

 * queues with pending read and write requests. These queues are processed

 * by the pkt_iosched_process_queue() function. The write requests in this

 * queue are already properly aligned and sized. This layer is responsible for

 * issuing the flush cache commands and scheduling the I/O in a good order.

 *

 * The next layer transforms unaligned write requests to aligned writes. This

 * transformation requires reading missing pieces of data from the underlying

 * block device, assembling the pieces to full packets and queuing them to the

 * packet I/O scheduler.

 *

 * At the top layer there is a custom ->submit_bio function that forwards

 * read requests directly to the iosched queue and puts write requests in the

 * unaligned write queue. A kernel thread performs the necessary read

 * gathering to convert the unaligned writes to aligned writes and then feeds

 * them to the packet I/O scheduler.

 *

 Serialize open/close/setup/teardown */

 /sys/class/pktcdvd */

 /sys/kernel/debug/pktcdvd */

 forward declaration */

/*

 * create and register a pktcdvd kernel object.

/*

 * remove a pktcdvd kernel object.

/*

 * default release function for pktcdvd kernel objects.

/**********************************************************

 *

 * sysfs interface for pktcdvd

 * by (C) 2006  Thomas Maier <balagi@justmail.de>

 *

/**********************************************************

  /sys/class/pktcdvd/pktcdvd[0-7]/

                     stat/reset

                     stat/packets_started

                     stat/packets_finished

                     stat/kb_written

                     stat/kb_read

                     stat/kb_read_gather

                     write_queue/size

                     write_queue/congestion_off

                     write_queue/congestion_on

/********************************************************************

  /sys/class/pktcdvd/

                     add            map block device

                     remove         unmap packet dev

                     device_map     show mappings

 pkt_setup_dev() expects caller to hold reference to self */

	/*

	 * create control files in sysfs

	 * /sys/class/pktcdvd/...

/********************************************************************

  entries in debugfs



  /sys/kernel/debug/pktcdvd[0-7]/

			info



 ----------------------------------------------------------*/

/*

 * Allocate a packet_data struct

/*

 * Free a packet_data struct

/*

 * Find the first node in the pd->bio_queue rb tree with a starting sector >= s.

/*

 * Insert a node into the pd->bio_queue rb tree.

/*

 * Send a packet_command to the underlying block device and

 * wait for completion.

/*

 * A generic sense dump / resolve mechanism should be implemented across

 * all ATAPI + SCSI devices.

/*

 * flush the drive cache to media

	/*

	 * the IMMED bit -- we default to not setting it, although that

	 * would allow a much faster close, this is safer

/*

 * speed is given as the normal factor, e.g. 4 for 4x

/*

 * Queue a bio for processing by the low-level CD device. Must be called

 * from process context.

/*

 * Process the queued read/write requests. This function handles special

 * requirements for CDRW drives:

 * - A cache flush command must be inserted before a read request if the

 *   previous request was a write.

 * - Switching between reading and writing is slow, so don't do it more often

 *   than necessary.

 * - Optimize for throughput at the expense of latency. This means that streaming

 *   writes will never be interrupted by a read, but if the drive has to seek

 *   before the next write, switch to reading instead if there are any pending

 *   read requests.

 * - Set the read speed according to current usage pattern. When only reading

 *   from the device, it's best to use the highest possible read speed, but

 *   when switching often between reading and writing, it's better to have the

 *   same read and write speeds.

/*

 * Special care is needed if the underlying block device has a small

 * max_phys_segments value.

		/*

		 * The cdrom device can handle one segment/frame

		/*

		 * We can handle this case at the expense of some extra memory

		 * copies during write operations

/*

 * Schedule reads for the holes in a packet

	/*

	 * Figure out which frames we need to read before we can write.

	/*

	 * Schedule reads for missing parts of the packet.

/*

 * Find a packet matching zone, or the least recently used packet if

 * there is no match.

/*

 * Scan the work queue to see if we can start a new packet.

 * returns non-zero if any work was done.

 Suppress gcc warning */

	/*

	 * Try to find a zone we are not already working on.

	/*

	 * Scan work queue for bios in the same zone and link them

	 * to this packet.

	/* check write congestion marks, and if bio_queue_size is

/**

 * bio_list_copy_data - copy contents of data buffers from one chain of bios to

 * another

 * @src: source bio list

 * @dst: destination bio list

 *

 * Stops when it reaches the end of either the @src list or @dst list - that is,

 * copies min(src->bi_size, dst->bi_size) bytes (or the equivalent for lists of

 * bios).

/*

 * Assemble a bio to write one packet and queue the bio for processing

 * by the underlying block device.

 XXX: locking? */

	/*

	 * Fill-in bvec with data from orig_bios.

 Start the write request */

 Finish all bios corresponding to this packet */

	/*

	 * Run state machine for active packets

	/*

	 * Move no longer active packets to the free list

/*

 * kcdrwd is woken up when writes have been queued for one of our

 * registered devices

		/*

		 * Wait until there is something to do

 Check if we need to run pkt_handle_queue */

 Check if we need to run the state machine for some packet */

 Check if we need to process the iosched queues */

 Otherwise, go to sleep */

 make swsusp happy with our thread */

		/*

		 * if pkt_handle_queue returns true, we can queue

		 * another request.

		/*

		 * Handle packet state machine

		/*

		 * Handle iosched queues

 PF */

 set up command and get the disc info */

	/* not all drives have the same disc_info length, so requeue

	 * packet with the length the drive tells us it can supply

 if this track is blank, try the previous. */

 if last recorded field is valid, return it. */

 make it up instead */

/*

 * write mode select package based on pd->settings

 doesn't apply to DVD+RW or DVD-RAM */

	/*

	 * now get it all

	/*

	 * write page is offset header + block descriptor length

		/*

		 * paranoia

/*

 * 1 -- we can write to this track, 0 -- we can't

 DVD+RW */

 DVD-RAM */

 The track is always writable on DVD+RW/DVD-RAM */

	/*

	 * "good" settings as per Mt Fuji.

/*

 * 1 -- we can write to this disc, 0 -- we can't

 CD-RW */

 MMC3 not supported */

 DVD+RW */

 DVD-RW */

 DVD-RAM */

	/*

	 * for disc type 0xff we should probably reserve a new track.

	 * but i'm not sure, should we leave this to user apps? probably.

 (di.last_track_msb << 8) | di.last_track_lsb; */

	/*

	 * we keep packet size in 512 byte units, makes it easier to

	 * deal with request calculations.

	/*

	 * in theory we could use lra on -RW media as well and just zero

	 * blocks that haven't been written yet, but in practice that

	 * is just a no-go. we'll use that for -R, naturally.

	/*

	 * fine for now

 packet */

	/*

	 * mode1 or mode2 disc

/*

 * enable/disable write caching on drive

	/*

	 * caching mode page might not be there, so quiet this command

/*

 * Returns drive maximum write speed

 Obsoleted field, used by older drives */

 Current write speed selected */

		/* If the drive reports at least one "Logical Unit Write

		 * Speed Performance Descriptor Block", use the information

		 * in the first block. (contains the highest speed)

 These tables from cdrecord - I don't have orange book */

 standard speed CD-RW (1-4x) */

 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 */

 high speed CD-RW (-10x) */

 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 */

 ultra high speed CD-RW */

 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 */

/*

 * reads the maximum media speed from ATIP

 READ ATIP */

 disc sub-type */

 max speed from ATIP A1 field */

 Info from cdrecord */

 standard speed */

 high speed */

 ultra high speed */

 DVD-RW */

 DVD+RW */

 DVD-RAM */

/*

 * called at open time.

	/*

	 * We need to re-open the cdrom device without O_NONBLOCK to be able

	 * to read/write from/to it. It is already opened in O_NONBLOCK mode

	 * so open should not fail.

		/*

		 * Some CDRW drives can not handle writes larger than one packet,

		 * even if the size is a multiple of the packet size.

/*

 * called when the device is closed. makes sure that the device flushes

 * the internal cache before we close.

		/*

		 * needed here as well, since ext2 (among others) may change

		 * the blocksize at mount time

	/*

	 * If we find a matching packet in state WAITING or READ_WAIT, we can

	 * just append this bio to that packet.

 	/*

	 * Test if there is enough room left in the bio work queue

	 * (queue size >= congestion on mark).

	 * If not, wait till the work queue size is below the congestion off mark.

	/*

	 * No matching packet found. Store the bio in the work queue.

	/*

	 * Wake up the worker thread.

 This wake_up is required for correct operation */

		/*

		 * This wake up is not required for correct operation,

		 * but improves performance in some cases.

	/*

	 * Clone READ bios so we can have our own bi_end_io callback.

 This is safe, since we have a reference from open(). */

 This is safe: open() is still holding a reference. */

		/*

		 * The door gets locked when the device is opened, so we

		 * have to unlock it or else the eject command fails.

	/*

	 * forward selected CDROM ioctls to CD-ROM, for UDF

/*

 * Set up mapping from pktcdvd device to CD-ROM device.

 inherit events of the host device */

/*

 * Tear down mapping from pktcdvd device to CD-ROM device.

 This is safe: open() is still holding a reference. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/amiga/amiflop.c

 *

 *  Copyright (C) 1993  Greg Harp

 *  Portions of this driver are based on code contributed by Brad Pepers

 *  

 *  revised 28.5.95 by Joerg Dorchain

 *  - now no bugs(?) any more for both HD & DD

 *  - added support for 40 Track 5.25" drives, 80-track hopefully behaves

 *    like 3.5" dd (no way to test - are there any 5.25" drives out there

 *    that work on an A4000?)

 *  - wrote formatting routine (maybe dirty, but works)

 *

 *  june/july 1995 added ms-dos support by Joerg Dorchain

 *  (portions based on messydos.device and various contributors)

 *  - currently only 9 and 18 sector disks

 *

 *  - fixed a bug with the internal trackbuffer when using multiple 

 *    disks the same time

 *  - made formatting a bit safer

 *  - added command line and machine based default for "silent" df0

 *

 *  december 1995 adapted for 1.2.13pl4 by Joerg Dorchain

 *  - works but I think it's inefficient. (look in redo_fd_request)

 *    But the changes were very efficient. (only three and a half lines)

 *

 *  january 1996 added special ioctl for tracking down read/write problems

 *  - usage ioctl(d, RAW_TRACK, ptr); the raw track buffer (MFM-encoded data

 *    is copied to area. (area should be large enough since no checking is

 *    done - 30K is currently sufficient). return the actual size of the

 *    trackbuffer

 *  - replaced udelays() by a timer (CIAA timer B) for the waits 

 *    needed for the disk mechanic.

 *

 *  february 1996 fixed error recovery and multiple disk access

 *  - both got broken the first time I tampered with the driver :-(

 *  - still not safe, but better than before

 *

 *  revised Marts 3rd, 1996 by Jes Sorensen for use in the 1.3.28 kernel.

 *  - Minor changes to accept the kdev_t.

 *  - Replaced some more udelays with ms_delays. Udelay is just a loop,

 *    and so the delay will be different depending on the given

 *    processor :-(

 *  - The driver could use a major cleanup because of the new

 *    major/minor handling that came with kdev_t. It seems to work for

 *    the time being, but I can't guarantee that it will stay like

 *    that when we start using 16 (24?) bit minors.

 *

 * restructured jan 1997 by Joerg Dorchain

 * - Fixed Bug accessing multiple disks

 * - some code cleanup

 * - added trackbuffer for each drive to speed things up

 * - fixed some race conditions (who finds the next may send it to me ;-)

 print _LOTS_ of infos */

 'RTRK' */

/*

 *  Defines

/*

 * CIAAPRA bits (read only)

 disk ready when low */

 head at track zero when low */

 disk protected when low */

 low when disk removed */

/*

 * CIAAPRB bits (read/write)

 motor on when low */

 select drive 3 when low */

 select drive 2 when low */

 select drive 1 when low */

 select drive 0 when low */

 side selection: 0 = upper, 1 = lower */

 step direction: 0=in, 1=out (to trk 0) */

 pulse low to step head 1 track */

/*

 * DSKBYTR bits (read only)

 register contains valid byte when set */

 disk DMA enabled */

 disk write bit in DSKLEN enabled */

 DSKSYNC register match when true */

 bits 7-0 are data */

/*

 * ADKCON/ADKCONR bits

 control bit */

 precompensation selection */

 00=none, 01=140ns, 10=280ns, 11=500ns */

 0=GCR precomp., 1=MFM precomp. */

 enable DSKSYNC auto DMA */

 when 1, enable sync on MSbit (for GCR) */

 bit cell: 0=2us (GCR), 1=1us (MFM) */

/*

 * DSKLEN bits

/*

 * INTENA/INTREQ bits

 DSKINDEX bit */

/*

 * Misc

 standard MFM sync value */

 Values for FD_COMMAND */

 move to track 0 */

 seek track */

 read with MT, MFM, SKip deleted */

 write with MT, MFM */

 Sense Interrupt Status */

 specify HUT etc */

 format one track */

 get version code */

 configure FIFO operation */

 perpendicular r/w mode */

 Max. Number of drives */

 Max. Number of sectors per track */

 description of data type */

 sectors per track */

 read whole track */

 write whole track */

 code returned from drive */

 description of drive */

 number of tracks */

 number of heads */

 raw read size for one track */

 raw write size for one track */

 sectors and gap multiplier (HD = 2) */

 start track for precomp 1 */

 start track for precomp 2 */

 time (in ms) for delay after step */

 time to settle after dir change */

 time needed to change sides */

 type of floppy for this unit */

 type of floppy for this unit */

 current track (-1 == unknown) */

 current track (kmaloc()'d */

 total # blocks on disk */

 true when not known */

 disk in drive (-1 == unknown) */

 true when motor is at speed */

 true when drive is active */

 true when trackbuf is not on disk */

 current error code for unit */

/*

 *  Error codes

 operation succeeded */

 general error (seek, read, write, etc) */

 unit does not exist */

 unit already active */

 unit is not active */

 unit is not ready (motor not on/no disk) */

/*

 *  Floppy ID values

 response when no unit is present */

 double-density 3.5" (880K) drive */

 high-density 3.5" (1760K) drive */

 double-density 5.25" (440K) drive */

 default for df0 if it doesn't identify */

/*

 *  Macros

  code	name	   tr he   rdsz   wrsz sm pc1 pc2 sd  st st*/

  warning: times are now in milliseconds (ms)                    */

 current info on each unit */

 Synchronization of FDC access */

 request loop (trackbuffer) */

 currently selected drive */

 size of raw disk data */

/*

 * These are global variables, as that's the easiest way to give

 * information to interrupts. They are the data used for the current

 * request.

 MS-Dos MFM Coding tables (should go quick and easy) */

 floppy internal millisecond timer stuff */

/*

 * Note that MAX_ERRORS=X doesn't imply that we retry every bad read

 * max X times - some types of errors increase the errorcount by 2 or

 * even 3, so we might actually retry only X/2 times before giving up.

 Prevent "aliased" accesses. */

/*

 * Here come the actual hardware access and helper functions.

 * They are not reentrant and single threaded because all drives

 * share the same hardware and the same trackbuffer.

 Milliseconds timer */

/* all waits are queued up 

count eclock, force load, one-shoot, start */

 Hardware semaphore */

 returns true when we would get the semaphore */

 We would be blocked in an interrupt, so try again later */

 set up for ID */

 loop and read disk ID */

 read and store value of DSKRDY */

 cia regs are low-active! */

        /*

         * RB: At least A500/A2000's df0: don't identify themselves.

         * As every (real) Amiga has at least a 3.5" DD drive as df0:

         * we default to that if df0: doesn't identify as a certain

         * type.

 return the ID value */

 writing */

 at least 2 ms */

 reading */

 setup adkcon bits correctly */

 corresponds to rel_fdc() in post_write() */

 clear adkcon bits */

 set appropriate adkcon bits */

/*

 * to be called at least 2ms after the write has finished but before any

 * other access to the hardware.

 corresponds to get_fdc() in raw_write */

/*

 * The following functions are to convert the block contents into raw data

 * written to disk and vice versa.

 * (Add other formats here ;-))

 convert length from bytes to longwords */

 prepare return pointer */

 verify track */

 odd bits */

 even bits */

 gap space */

 sectors */

 0-80 */

 0-1 */

 0-...*/

 2 */

	unsigned short crc;     /* on 68000 we got an alignment problem, 

				   but this compiler solves it  by adding silently 

				   adding a pad byte so data won't fit

 for longword-alignedness (0x4e) */

 crc routines are borrowed from the messydos-handler  */

/* excerpt from the messydos-device           

; The CRC is computed not only over the actual data, but including

; the SYNC mark (3 * $a1) and the 'ID/DATA - Address Mark' ($fe/$fb).

; As we don't read or encode these fields into our buffers, we have to

; preload the registers containing the CRC with the values they would have

; after stepping over these fields.

;

; How CRCs "really" work:

;

; First, you should regard a bitstring as a series of coefficients of

; polynomials. We calculate with these polynomials in modulo-2

; arithmetic, in which both add and subtract are done the same as

; exclusive-or. Now, we modify our data (a very long polynomial) in

; such a way that it becomes divisible by the CCITT-standard 16-bit

;		 16   12   5

; polynomial:	x  + x	+ x + 1, represented by $11021. The easiest

; way to do this would be to multiply (using proper arithmetic) our

; datablock with $11021. So we have:

;   data * $11021		 =

;   data * ($10000 + $1021)      =

;   data * $10000 + data * $1021

; The left part of this is simple: Just add two 0 bytes. But then

; the right part (data $1021) remains difficult and even could have

; a carry into the left part. The solution is to use a modified

; multiplication, which has a result that is not correct, but with

; a difference of any multiple of $11021. We then only need to keep

; the 16 least significant bits of the result.

;

; The following algorithm does this for us:

;

;   unsigned char *data, c, crclo, crchi;

;   while (not done) {

;	c = *data++ + crchi;

;	crchi = (@ c) >> 8 + crclo;

;	crclo = @ c;

;   }

;

; Remember, + is done with EOR, the @ operator is in two tables (high

; and low byte separately), which is calculated as

;

;      $1021 * (c & $F0)

;  xor $1021 * (c & $0F)

;  xor $1021 * (c >> 4)         (* is regular multiplication)

;

;

; Anyway, the end result is the same as the remainder of the division of

; the data by $11021. I am afraid I need to study theory a bit more...





my only works was to code this from manx to C....



 look at the asm-code - what looks in C a bit strange is almost as good as handmade */

 precomputed magic */

 precomputed magic */

 search for the right sync of each sec-hdr */

 loop usually only once done */

 skip over headermark */

 skip data mark (included in checksum) */

 id gap 1 */

 the MFM word before is always 9254 */

 3 sync + 1 headermark */

 fill in the variable parts of the header */

 header (without "magic") and id gap 2*/

id gap 3 */

 3 syncs and 1 datamark */

 data */

data crc + jd's special gap (long words :-/) */

 data gap */

 wrote 652 MFM words */

 really gap4 + indexgap , but we write it first and round it up */

 the following is just guessed */

 check for HD-Disks */

 now the index marks...*/

 sectors */

 MFM word before is always 0x9254 */

/*

 * Here comes the high level stuff (i.e. the filesystem interface)

 * and helper functions.

 * Normally this should be the only part that has to be adapted to

 * different kernel versions.

/* FIXME: this assumes the drive is still spinning -

 * which is only true if we complete writing a track within three seconds

 we might block in an interrupt, so try again later */

 2 ms post_write delay */

 Read Error Handling: recalibrate and try again */

 keep the drive spinning while writes are scheduled */

			/*

			 * setup a callback to write the track buffer

			 * after a short (1 tick) delay.

 reset the timer */

 unconditionally, even if not needed */

 get drive type */

 FD_NODRIVE */

/*

 * floppy_open check for aliasing (/dev/fd0 can be the same as

 * /dev/PS0 etc), and disallows simultaneous access to the same

 * drive with different device numbers.

/*

 * check_events is never called from an interrupt, so we can relax a bit

 * here, sleep etc. Note that floppy-on tries to set current_DOR to point

 * to the desired drive, but it will probably not survive the sleep if

 * several floppies are used at the same time: thus the loop.

 if this was true before, too bad! */

 No usable drives */

 initialize variables */

 make sure that disk DMA is enabled */

 init ms timer */

 one-shot, stop */

 SPDX-License-Identifier: GPL-2.0-only

#define DEBUG

 The maximum number of sg elements that fit into a virtqueue */

	/*

	 * This mutex must be held by anything that may run after

	 * virtblk_remove() sets vblk->vdev to NULL.

	 *

	 * blk-mq, virtqueue processing, and sysfs attribute code paths are

	 * shut down before vblk->vdev is set to NULL and therefore do not need

	 * to hold this mutex.

 The disk structure for the kernel. */

 Block layer tags. */

 Process context for config space updates */

	/*

	 * Tracks references from block_device_operations open/release and

	 * virtio_driver probe/remove so this object can be freed once no

	 * longer in use.

 What host tells us, plus 2 for header & tailer. */

 Ida index - used to track minor number allocations. */

 num of vqs */

	/*

	 * Single max discard segment means multi-range discard isn't

	 * supported, and block layer only runs contiguity merge like

	 * normal RW request. So we can't reply on bio for retrieving

	 * each range info.

 In case queue is stopped waiting for more buffers. */

		/* Don't stop the queue if -ENOMEM: we may have failed to

		 * bounce the buffer due to global resource outage.

/* return id (s/n) string for *disk to *id_str

 We provide getgeo only to please some old bootloader/partitioning tools */

 see if the host passed in geometry config */

 some standard values, similar to sd */

 sysfs gives us a PAGE_SIZE buffer */

 Unsupported? Make it empty. */

 The queue's logical block size must be set before calling this */

 Host must always specify the capacity. */

 Discover virtqueues and write information to configuration.  */

/*

 * Legacy naming scheme used for virtio devices.  We are stuck with it for

 * virtio blk but don't ever use it for any new driver.

	/*

	 * If WCE is not configurable and flush is not available,

	 * assume no writeback cache is in use.

 We need to know how many segments before we allocate. */

 We need at least one SG element, whatever they say. */

 Prevent integer overflows and honor max vq size */

 We need extra sg elements at head and tail. */

 This reference is dropped in virtblk_remove(). */

 Default queue sizing is to fill the ring. */

 ... but without indirect descs, we use 2 descs per req */

 configure queue flush support */

 If disk is read-only in the host, the guest should obey */

 We can handle whatever the host told us to handle. */

 No real sector limit. */

	/* Host can optionally specify maximum segment size and number of

 Host can optionally specify the block size of the device */

 Use topology information if available */

 Make sure no work handler is accessing the device. */

 Stop all the virtqueues. */

 Virtqueues are stopped, nothing can use vblk->vdev anymore. */

 Ensure we don't receive any more interrupts */

 Make sure no work handler is accessing the device. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for the SWIM3 (Super Woz Integrated Machine 3)

 * floppy controller found on Power Macintoshes.

 *

 * Copyright (C) 1996 Paul Mackerras.

/*

 * TODO:

 * handle 2 drives

 * handle GCR disks

/*

 * The names for these registers mostly represent speculation on my part.

 * It will be interesting to see how close they are to the names Apple uses.

 counts down at 1MHz */

 controls CA0, CA1, CA2 and LSTRB signals */

 writing bits clears them */

 writing bits sets them in control */

 # tracks to seek */

 current track number */

 current sector number */

 size of gap 3 in track format */

 sector # to read or write */

 # sectors to read or write */

 Bits in select register */

 Bits in control register */

 Bits in status register */

 Bits in intr and intr_enable registers */

 Bits in error register */

 Bits in setup register */

 Select values for swim3_action */

 Select values for swim3_select and swim3_readbit */

 also eject in progress */

 drive or diskette is 4MB type? */

 Definitions of values used in writing and formatting */

 hardware registers */

 DMA controller registers */

 interrupt number for SWIM3 */

 interrupt number for DMA channel */

 cylinder head is on, or -1 */

 last sector we saw go past */

 the cylinder for the current r/w request */

 head number ditto */

 sector number ditto */

 # sectors we're transferring at present */

 disk geometry information */

 1 if write-protected, 0 if not, -1 dunno */

 gap field */

 sync field */

 data address mark */

 no escape for 512 bytes */

 insert CRC */

 stop writing */

static void fd_dma_interrupt(int irq, void *dev_id);*/

	/*

	 * Do not remove the cast. blk_rq_pos(req) is now a sector_t and can be

	 * 64 bits, but it will never go past 32 bits for this driver anyway, so

	 * we can safely cast it down and not have to do a 64/32 division

 clear SEEN_SECTOR bit */

 enable intr when track found */

 enable timeout */

 enable intr when seek finished */

 enable timeout */

/*

 * XXX: this is a horrible hack, but at least allows ppc32 to get

 * out of defining virt_to_bus, and this driver out of using the

 * deprecated block layer bounce buffering for highmem addresses

 * for no good reason.

 Set up 3 dma commands: write preamble, data, postamble */

 enable intr when transfer complete */

 enable timeout */

 XXX shouldn't get here */

 check for SEEK_COMPLETE after 30ms */

 We must wait a bit for dbdma to stop */

		/*

		 * Check that the main data transfer has finished.

		 * On writing, the swim3 sometimes doesn't use

		 * up all the bytes of the postamble, so we can still

		 * see DMA active here.  That doesn't matter as long

		 * as all the sector data has been transferred.

 wait a little while for DMA to complete */

 turn off DMA */

 musta been an error */

/*

static void fd_dma_interrupt(int irq, void *dev_id)

{

}

 Called under the mutex to grab exclusive access to a drive */

 this will enable irqs in order to sleep */

  7 1.44MB 3.5"   */

 necessary? */

 Clear state */

 Check & Request resources */

 end of list */ }

/*

 *  sx8.c: Driver for Promise SATA SX8 looks-like-I2O hardware

 *

 *  Copyright 2004-2005 Red Hat, Inc.

 *

 *  Author/maintainer:  Jeff Garzik <jgarzik@pobox.com>

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License.  See the file "COPYING" in the main directory of this archive

 *  for more details.

/*

 * SX8 hardware has a single message queue for all ATA ports.

 * When this driver was written, the hardware (firmware?) would

 * corrupt data eventually, if more than one request was outstanding.

 * As one can imagine, having 8 ports bottlenecking on a single

 * command hurts performance.

 *

 * Based on user reports, later versions of the hardware (firmware?)

 * seem to be able to survive with more than one command queued.

 *

 * Therefore, we default to the safe option -- 1 command -- but

 * allow the user to increase this.

 *

 * SX8 should be able to support up to ~60 queued commands (CARM_MAX_REQ),

 * but problems seem to occur when you exceed ~30, even on newer hardware.

 0xf is just arbitrary, non-zero noise; this is sorta like poisoning */

 note: prints function name for you */

 CARM_VERBOSE_DEBUG */

 CARM_DEBUG */

 defines only for the constants which don't work well as enums */

 adapter-wide limits */

 command message queue limits */

 max command msgs per host */

 refill mark */

 S/G limits, host-wide and per-request */

 max s/g entries per request */

 max s/g entries per host */

 re-fill mark */

 hardware registers */

 interrupt status */

 interrupt mask */

 host message unit control */

 response msg DMA buf low 32 bits */

 response msg DMA buf high 32 bits */

 command message size reg 0 */

 bits in CARM_INT_{STAT,MASK} */

 watchdog timer */

 cmd msg q overflow */

 cmd msg q has free space */

 response msg available */

 command messages, and related register bits */

 CARM_MSG_IOCTL messages */

 scan channels for devices */

 get tcq/ncq depth */

 set tcq/ncq depth */

 CARM_MSG_ARRAY messages */

 response messages */

 sizeof(struct carm_response) */

 resp. msg list length */

 bit indicating msg was successful */

 length of entire resp. msg buffer */

 length of entire h/w buffer */

 CARM_MSG_MISC messages */

 MISC_GET_FW_VER feature bits */

 1=4 ports, 0=8 ports */

 1=non-RAID firmware, 0=RAID */

 zero channel RAID (whatever that is) */

 carm_host flags */

 s/g segment boundary */

 invalid state; never used */

 setting up master SHM area */

 we never leave here */

 start dev scan */

 start per-device probe */

 continue per-device probe */

 activate devices we found */

 probe is complete */

 initiate probe */

 tell firmware what time it is */

 get firmware version, adapter port cnt */

 attached device characteristics */

 device list continues beyond this point? */

 terminate list */

 flush */

 flush */

 fill output data area with "no device" default values */

 overrun */

 get scatterlist from block layer */

 map scatterlist to PCI bus addresses */

 obey global hardware limit on S/G entries */

	/*

	 * build read/write message

	/*

	 * queue read/write message to hardware

 should never occur */

 TODO: scan and support non-disk devices */

 direct-access device (disk) */

 fast path */

 unknown / invalid response */

 unknown / invalid response */

 unknown / invalid response */

 unknown / invalid response */

 response to a message we sent */

 asynchronous events the hardware throws our way */

 reading should also clear interrupts */

 FIXME: TODO */

 should never occur */

 flush */

 flush */

 flush */

 start initialization, probing state machine */

	/*

	 * Figure out which major to use: 160, 161, or dynamic

/*

** z2ram - Amiga pseudo-driver to access 16bit-RAM in ZorroII space

**         as a block device, to be used as a RAM disk or swap space

** 

** Copyright (C) 1994 by Ingo Wilken (Ingo.Wilken@informatik.uni-oldenburg.de)

**

** ++Geert: support for zorro_unused_z2ram, better range checking

** ++roman: translate accesses via an array

** ++Milan: support for ChipRAM usage

** ++yambo: converted to 2.0 kernel

** ++yambo: modularized and support added for 3 minor devices including:

**          MAJOR  MINOR  DESCRIPTION

**          -----  -----  ----------------------------------------------

**          37     0       Use Zorro II and Chip ram

**          37     1       Use only Zorro II ram

**          37     2       Use only Chip ram

**          37     4-7     Use memory list entry 1-4 (first is 0)

** ++jskov: support for 1-4th memory list entry.

**

** Permission to use, copy, modify, and distribute this software and its

** documentation for any purpose and without fee is hereby granted, provided

** that the above copyright notice appear in all copies and that both that

** copyright notice and this permission notice appear in supporting

** documentation.  This software is provided "as is" without express or

** implied warranty.

 Move this down when adding a new minor */

 Use a specific list entry. */

 FIXME: ioremap doesn't build correct memory tables. */

	/*

	 * FIXME: unmap memory

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/drivers/block/floppy.c

 *

 *  Copyright (C) 1991, 1992  Linus Torvalds

 *  Copyright (C) 1993, 1994  Alain Knaff

 *  Copyright (C) 1998 Alan Cox

/*

 * 02.12.91 - Changed to static variables to indicate need for reset

 * and recalibrate. This makes some things easier (output_byte reset

 * checking etc), and means less interrupt jumping in case of errors,

 * so the code is hopefully easier to understand.

/*

 * This file is certainly a mess. I've tried my best to get it working,

 * but I don't like programming floppies, and I have only one anyway.

 * Urgel. I should check for more errors, and do more graceful error

 * recovery. Seems there are problems with several drives. I've tried to

 * correct them. No promises.

/*

 * As with hd.c, all routines within this file can (and will) be called

 * by interrupts, so extreme caution is needed. A hardware interrupt

 * handler may not sleep, or a kernel panic will happen. Thus I cannot

 * call "floppy-on" directly, but have to set a special timer interrupt

 * etc.

/*

 * 28.02.92 - made track-buffering routines, based on the routines written

 * by entropy@wintermute.wpi.edu (Lawrence Foard). Linus.

/*

 * Automatic floppy-detection and formatting written by Werner Almesberger

 * (almesber@nessie.cs.id.ethz.ch), who also corrected some problems with

 * the floppy-change signal detection.

/*

 * 1992/7/22 -- Hennus Bergman: Added better error reporting, fixed

 * FDC data overrun bug, added some preliminary stuff for vertical

 * recording support.

 *

 * 1992/9/17: Added DMA allocation & DMA functions. -- hhb.

 *

 * TODO: Errors are still not counted properly.

/* 1992/9/20

 * Modifications for ``Sector Shifting'' by Rob Hooft (hooft@chem.ruu.nl)

 * modeled after the freeware MS-DOS program fdformat/88 V1.8 by

 * Christoph H. Hochst\"atter.

 * I have fixed the shift values to the ones I always use. Maybe a new

 * ioctl() should be created to be able to modify them.

 * There is a bug in the driver that makes it impossible to format a

 * floppy as the first thing after bootup.

/*

 * 1993/4/29 -- Linus -- cleaned up the timer handling in the kernel, and

 * this helped the floppy driver as well. Much cleaner, and still seems to

 * work.

/* 1994/6/24 --bbroad-- added the floppy table entries and made

 * minor modifications to allow 2.88 floppies to be run.

/* 1994/7/13 -- Paul Vojta -- modified the probing code to allow three or more

 * disk types.

/*

 * 1994/8/8 -- Alain Knaff -- Switched to fdpatch driver: Support for bigger

 * format bug fixes, but unfortunately some new bugs too...

/* 1994/9/17 -- Koen Holtman -- added logging of physical floppy write

 * errors to allow safe writing by specialized programs.

/* 1995/4/24 -- Dan Fandrich -- added support for Commodore 1581 3.5" disks

 * by defining bit 1 of the "stretch" parameter to mean put sectors on the

 * opposite side of the disk, leaving the sector IDs alone (i.e. Commodore's

 * drives are "upside-down").

/*

 * 1995/8/26 -- Andreas Busse -- added Mips support.

/*

 * 1995/10/18 -- Ralf Baechle -- Portability cleanup; move machine dependent

 * features to asm/floppy.h.

/*

 * 1998/1/21 -- Richard Gooch <rgooch@atnf.csiro.au> -- devfs support

/*

 * 1998/05/07 -- Russell King -- More portability cleanups; moved definition of

 * interrupt and dma channel to asm/floppy.h. Cleaned up some formatting &

 * use of '0' for NULL.

/*

 * 1998/06/07 -- Alan Cox -- Merged the 2.0.34 fixes for resource allocation

 * failures.

/*

 * 1998/09/20 -- David Weinehall -- Added slow-down code for buggy PS/2-drives.

/*

 * 1999/08/13 -- Paul Slootman -- floppy stopped working on Alpha after 24

 * days, 6 hours, 32 minutes and 32 seconds (i.e. MAXINT jiffies; ints were

 * being used to store jiffies, which are unsigned longs).

/*

 * 2000/08/28 -- Arnaldo Carvalho de Melo <acme@conectiva.com.br>

 * - get rid of check_region

 * - s/suser/capable/

/*

 * 2001/08/26 -- Paul Gortmaker - fix insmod oops on machines with no

 * floppy controller (lingering task on list after module is gone... boom.)

/*

 * 2002/02/07 -- Anton Altaparmakov - Fix io ports reservation to correct range

 * (0x3f2-0x3f5, 0x3f7). This fix is a bit of a hack but the proper fix

 * requires many non-obvious changes in arch dependent code.

/* 2003/07/28 -- Daniele Bellucci <bellucda@tiscali.it>.

 * Better audit of register_blkdev.

 debug disk change line */

 do print messages for unexpected interrupts */

 CMOS defines */

/*

 * PS/2 floppies have much slower step rates than regular floppies.

 * It's been recommended that take about 1/4 of the default speed

 * in some more extreme cases.

/* =======

 * can use virtual DMA:

 * 0 = use of virtual DMA disallowed by config

 * 1 = use of virtual DMA prescribed by config

 * 2 = no virtual DMA preference configured.  By default try hard DMA,

 * but fall back on virtual DMA when not enough memory available

/* =======

 * use virtual DMA

 * 0 using hard DMA

 * 1 using virtual DMA

 * This variable is set to virtual when a DMA mem problem arises, and

 * reset back in floppy_grab_irq_and_dma.

 * It is not safe to reset it in other circumstances, because the floppy

 * driver may have several buffers in use at once, and we do currently not

 * record each buffers capabilities

 64KB */

/* the following is the mask of allowed drives. By default units 2 and

 * 3 of both floppy controllers are disabled, because switching on the

 * motor of these drives causes system hangs on some PCI computers. drive

 * 0 is the low bit (0x1), and drive 7 is the high bit (0x80). Bits are on if

 * a drive is allowed.

 *

 * NOTE: This must come before we include the arch floppy header because

 *       some ports reference this variable from there. -DaveM

 for the compatibility eject ioctl */

 Dma Memory related stuff */

 nothing... */

 we have the memory */

 no fallback allowed */

 End dma memory related stuff */

 drive on fdc */

 fdc of drive */

 reverse mapping from unit and fdc to drive */

 read/write commands */

 format commands */

/*

 * Maximum disk size (in kilobytes).

 * This default is used whenever the current disk size is unknown.

 * [Now it is rather a minimum]

 3984 */

/*

 * globals used by 'result()'

 size of reply buffer, when called from interrupt */

 result of GETSTATUS */

/*

 * this struct defines the different floppy drive types.

 name printed while booting */

/* NOTE: the time values in jiffies should be in msec!

 CMOS drive type

  |     Maximum data rate supported by drive type

  |     |   Head load time, msec

  |     |   |   Head unload time, msec (not used)

  |     |   |   |     Step rate interval, usec

  |     |   |   |     |       Time needed for spinup time (jiffies)

  |     |   |   |     |       |      Timeout for spinning down (jiffies)

  |     |   |   |     |       |      |   Spindown offset (where disk stops)

  |     |   |   |     |       |      |   |     Select delay

  |     |   |   |     |       |      |   |     |     RPS

  |     |   |   |     |       |      |   |     |     |    Max number of tracks

  |     |   |   |     |       |      |   |     |     |    |     Interrupt timeout

  |     |   |   |     |       |      |   |     |     |    |     |   Max nonintlv. sectors

5 1/4 360 KB PC*/

5 1/4 HD AT*/

3 1/2 DD*/

3 1/2 HD*/

3 1/2 ED*/

3 1/2 ED*/

/*    |  --autodetected formats---    |      |      |

 *    read_track                      |      |    Name printed when booting

 *				      |     Native format

/*

 * This struct defines the different floppy types.

 *

 * Bit 0 of 'stretch' tells if the tracks need to be doubled for some

 * types (e.g. 360kB diskette in 1.2MB drive, etc.).  Bit 1 of 'stretch'

 * tells if the disk is in Commodore 1581 format, which means side 0 sectors

 * are located on side 1 of the disk but with a side 0 ID, and vice-versa.

 * This is the same as the Sharp MZ-80 5.25" CP/M disk format, except that the

 * 1581's logical side 0 is on physical side 1, whereas the Sharp's logical

 * side 0 is on physical side 0 (but with the misnamed sector IDs).

 * 'stretch' should probably be renamed to something more general, like

 * 'options'.

 *

 * Bits 2 through 9 of 'stretch' tell the number of the first sector.

 * The LSB (bit 2) is flipped. For most disks, the first sector

 * is 1 (represented by 0x00<<2).  For some CP/M and music sampler

 * disks (such as Ensoniq EPS 16plus) it is 0 (represented as 0x01<<2).

 * For Amstrad CPC disks it is 0xC1 (represented as 0xC0<<2).

 *

 * Other parameters should be self-explanatory (see also setfdprm(8)).

/*

	    Size

	     |  Sectors per track

	     |  | Head

	     |  | |  Tracks

	     |  | |  | Stretch

	     |  | |  | |  Gap 1 size

	     |  | |  | |    |  Data rate, | 0x40 for perp

	     |  | |  | |    |    |  Spec1 (stepping rate, head unload

  0 no testing    */

  1 360KB PC      */

  2 1.2MB AT      */

  3 360KB SS 3.5" */

  4 720KB 3.5"    */

  5 360KB AT      */

  6 720KB AT      */

  7 1.44MB 3.5"   */

  8 2.88MB 3.5"   */

  9 3.12MB 3.5"   */

 10 1.44MB 5.25"  */

 11 1.68MB 3.5"   */

 12 410KB 5.25"   */

 13 820KB 3.5"    */

 14 1.48MB 5.25"  */

 15 1.72MB 3.5"   */

 16 420KB 5.25"   */

 17 830KB 3.5"    */

 18 1.49MB 5.25"  */

 19 1.74 MB 3.5"  */

 20 880KB 5.25"   */

 21 1.04MB 3.5"   */

 22 1.12MB 3.5"   */

 23 1.6MB 5.25"   */

 24 1.76MB 3.5"   */

 25 1.92MB 3.5"   */

 26 3.20MB 3.5"   */

 27 3.52MB 3.5"   */

 28 3.84MB 3.5"   */

 29 1.84MB 3.5"   */

 30 800KB 3.5"    */

 31 1.6MB 3.5"    */

 Auto-detection: Disk type used until the next media change occurs. */

/*

 * User-provided type information. current_type points to

 * the respective entry of this array.

/*

 * The driver is trying to determine the correct media format

 * while probing is set. rw_interrupt() clears it after a

 * successful access.

 Synchronization of FDC access. */

 Errors during formatting are counted here. */

 Format request descriptor. */

/*

 * Rate is 0 for 500kb/s, 1 for 300kbps, 2 for 250kbps

 * Spec1 is 0xSH, where S is stepping rate (F=1ms, E=2ms, D=3ms etc),

 * H is head unload time (1=16ms, 2=32ms, etc)

/*

 * Track buffer

 * Because these are written to by the DMA controller, they must

 * not contain a 64k byte boundary crossing, or data will be

 * corrupted/lost.

				/* this is called after the interrupt of the

 this is called to retry the operation */

 this is called to tally an error */

	done_f done;		/* this is called to say if the operation has

/*

 * The "reset" variable should be tested whenever an interrupt is scheduled,

 * after the commands have been sent. This is to ensure that the driver doesn't

 * get wedged when the interrupt doesn't come because of a failed command.

 * reset doesn't need to be tested before sending commands, because

 * output_byte is automatically disabled when reset is set.

/*

 * These are global variables, as that's the easiest way to give

 * information to interrupts. They are the data used for the current

 * request.

 buffer related variables */

 fdc related variables, should end up in a struct */

 current fdc */

 sector in track */

static unsigned char in_sector_offset;	/* offset within physical sector,

/*

 * Debugging

 * =========

 DEBUGT */

 this routine checks whether the floppy driver is "alive" */

/*

 * Bottom half floppy driver.

 * ==========================

 *

 * This part of the file contains the code talking directly to the hardware,

 * and also the main service loop (seek-configure-spinup-command)

/*

 * disk change.

 * This routine is responsible for maintaining the FD_DISK_CHANGE flag,

 * and the last_checked date.

 *

 * last_checked is the date of the last check which showed 'no disk change'

 * FD_DISK_CHANGE is set under two conditions:

 * 1. The floppy has been changed after some i/o to that floppy already

 *    took place.

 * 2. No floppy disk is in the drive. This is done in order to ensure that

 *    requests are quickly flushed in case there is no disk in the drive. It

 *    follows that FD_DISK_CHANGE can only be cleared if there is a disk in

 *    the drive.

 *

 * For 1., maxblock is observed. Maxblock is 0 if no i/o has taken place yet.

 * For 2., FD_DISK_NEWCHANGE is watched. FD_DISK_NEWCHANGE is cleared on

 *  each seek. If a disk is present, the disk change line should also be

 *  cleared on each seek. Thus, if FD_DISK_NEWCHANGE is clear, but the disk

 *  change line is set, this means either that no disk is in the drive, or

 *  that it has been removed since the last seek.

 *

 * This means that we really have a third possibility too:

 *  The floppy has been changed after the last seek.

 verify write protection */

 mark it changed */

 invalidate its geometry */

/*

 * Reset all driver information about the specified fdc.

 * This is needed after a reset, and after a raw command.

/*

 * selects the fdc and drive, and enables the fdc's input/dma.

 * Both current_drive and current_fdc are changed to match the new drive.

/*

 * locks the driver.

 * Both current_drive and current_fdc are changed to match the new drive.

 unlocks the driver */

 switches the motor off after a given timeout */

 schedules motor off */

	/* make spindle stop in a position which minimizes spinup time

/*

 * cycle through all N_DRIVE floppy drives, for disk change testing.

 * stopping at current drive. This is done before any long operation, to

 * be sure to have up to date disk change information.

 skip closed drives */

			/* switch the motor off again, if it was off to

/* this function makes sure that the disk stays in the drive during the

 waits for a delay (spinup or select) to pass */

		reset_fdc();	/* do the reset during sleep to win time

				 * if we don't need to sleep, it's a good

 waits until the fdc becomes ready */

 sends a command byte to the fdc */

 gets the response from the fdc */

 does the fdc need more output? */

/* Set perpendicular mode as required, based on data rate, if supported.

 * 82077 Now tested. 1Mbps data rate only possible with 82077-1.

					/*

					 * convenient way to return to

					 * redo without too much hassle

					 * (deep stack et al.)

 perpendicular_mode */

 Turn on FIFO */

 pre-compensation from track 0 upwards */

/* Issue a "SPECIFY" command to set the step rate time, head unload time,

 * head load time, and DMA disable flag to values needed by floppy.

 *

 * The value "dtr" is the data transfer rate in Kbps.  It is needed

 * to account for the data rate-based scaling done by the 82072 and 82077

 * FDC types.  This parameter is ignored for other types of FDCs (i.e.

 * 8272a).

 *

 * Note that changing the data transfer rate has a (probably deleterious)

 * effect on the parameters subject to scaling for 82072/82077 FDCs, so

 * fdc_specify is called again after each data transfer rate

 * change.

 *

 * srt: 1000 to 16000 in microseconds

 * hut: 16 to 240 milliseconds

 * hlt: 2 to 254 milliseconds

 *

 * These values are rounded up to the next highest available delay time.

			/* chose the default rate table, not the one

 0==256msec*dtr0/dtr (not linear!) */

 0==256msec*dtr0/dtr (not linear!) */

 Convert step rate from microseconds to milliseconds and 4 bits */

 If these parameters did not change, just return with success */

 Go ahead and set spec1 and spec2 */

 fdc_specify */

/* Set the FDC's data transfer rate on behalf of the specified drive.

 * NOTE: with 82072/82077 FDCs, changing the data rate requires a reissue

 * of the specify command (i.e. using the fdc_specify function).

 If data rate not already set to desired value, set it. */

 Set dtr */

	/* TODO: some FDC/drive combinations (C&T 82C711 with TEAC 1.2MB)

	 * need a stabilization period of several milliseconds to be

	 * enforced after data rate changes before R/W operations.

	 * Pause 5 msec to avoid trouble. (Needs to be 2 jiffies)

 fdc_dtr */

 tell_sector */

 seek error */

 cylinder marked as bad */

/*

 * OK, this error interpreting routine is called after a

 * DMA read/write has succeeded

 * or failed, so we check the results, and copy any buffers.

 * hhb: Added better error reporting.

 * ak: Made this into a separate routine.

 check IC to find cause of interrupt */

 error occurred during command execution */

 occurs with pseudo-DMA */

 wrong cylinder => recal */

 invalid command given */

 (0) Normal command termination */

/*

 * This routine is called when everything should be correctly set up

 * for the transfer (i.e. floppy motor is on, the correct floppy is

 * selected, and the head is sitting on the right track).

		/* If spinup will take a long time, rerun scandrives

		 * again just before spinup completion. Beware that

		 * after scandrives, we must again wait for selection.

 wait until the floppy is spinning fast enough */

/*

 * This is the routine called after every seek (or recalibrate) interrupt

 * from the floppy controller.

 effective seek */

 check write protection */

		/* the media changed flag should be cleared after the seek.

		 * If it isn't, this means that there is really no disk in

		 * the drive.

		/* we seek to clear the media-changed condition. Does anybody

			/* after a second recalibrate, we still haven't

			 * reached track 0. Probably no drive. Raise an

			 * error, as failing immediately might upset

			/* If we already did a recalibrate,

			 * and we are not at track 0, this

			 * means we have moved. (The only way

			 * not to move at recalibration is to

			 * be already at track 0.) Clear the

			/* Recalibrate moves the head by at

			 * most 80 steps. If after one

			 * recalibrate we don't have reached

			 * track 0, this might mean that we

			 * started beyond track 80.  Try

 interrupt handler. Note that this can be called externally on the Sparc */

 we don't even know which FDC is the culprit */

	/* We have to clear the reset flag here, because apparently on boxes

	 * with level triggered interrupts (PS/2, Sparc, ...), it is needed to

	 * emit SENSEI's to clear the interrupt line. And fdc_state[fdc].reset

	 * blocks the emission of the SENSEI's.

	 * It is OK to emit floppy commands because we are in an interrupt

	 * handler here, and thus we have to fear no interference of other

	 * activity.

 FIXME! Was it really for us? */

/*

 * Must do 4 FD_SENSEIs after reset because of ``drive polling''.

 get the status ready for set_fdc */

 a reset just after a reset. BAD! */

/*

 * reset is done by pulling bit 2 of DOR low for a while (old FDCs),

 * or by setting the self clearing bit 7 of STATUS (newer FDCs).

 * This WILL trigger an interrupt, causing the handlers in the current

 * cont's ->redo() to be called via reset_interrupt().

 Pseudo-DMA may intercept 'reset finished' interrupt.  */

 Irrelevant for systems with true DMA (i386).          */

 avoid dma going to a random drive after shutdown */

 this will recall reset when needed */

 start motor, check media-changed condition and write protection */

 no read since this drive is running */

 note motor start time if motor is not yet running */

 starts motor and selects floppy */

 wait_for_completion also schedules reset if needed. */

		twaddle(current_fdc, current_drive);	/* this clears the dcl on certain

 must be done here because of hut, hlt ... */

/*

 * ========================================================================

 * here ends the bottom half. Exported routines are:

 * floppy_start, floppy_off, floppy_ready, lock_fdc, unlock_fdc, set_fdc,

 * start_motor, reset_fdc, reset_fdc_info, interpret_errors.

 * Initialization also uses output_byte, result, set_dor, floppy_interrupt

 * and set_dor.

 * ========================================================================

/*

 * General purpose continuations.

 * ==============================

/* schedules handler, waiting for completion. May be interrupted, will then

 * return -EINTR, in which case the driver will automatically be unlocked.

/*

 * formatting and rw support.

 * ==========================

/*

 * formatting support.

 * ===================

 allow for about 30ms for data transport per track */

 a ``cylinder'' is two tracks plus a little stepping time */

 position of logical sector 1 on this track */

 determine interleave */

 initialize field */

 place logical sectors */

 sector busy, find next free sector */

/*

 * Buffer read/write and support

 * =============================

 current_count_sectors can be zero if transfer failed */

 We're done with the request */

/* new request_done. Can handle physical sectors which are smaller than a

		/* maintain values for invalidation on geometry

 record write error information */

 Interrupt handler evaluating the result of the r/w operation */

		/* some Toshiba floppy controllers occasionnally seem to

		 * return bogus interrupts after read/write operations, which

 transfer directly from buffer */

 Compute the maximal transfer size */

 alignment */

 transfer size, beginning not aligned */

/*

 * Move data from/to the track buffer to/from the buffer cache.

 number of transferred 512-byte sectors */

/* work around a bug in pseudo DMA

 * (on some FDCs) pseudo DMA does not stop when the CPU stops

 * sending data.  Hence we need a different way to signal the

 * transfer length:  We use raw_cmd->cmd[SECT_PER_TRACK].  Unfortunately, this

 * does not work with MT, hence we can only transfer one head at

 * a time

 switch off multiple track mode */

					/* make sure raw_cmd->cmd[SECT_PER_TRACK]

/*

 * Formulate a read/write request.

 * this routine decides where to load the data (directly to buffer, or to

 * tmp floppy area), how much data to load (the size of the buffer, the whole

 * track, or a single sector)

 * All floppy_track_buffer handling goes in here. If we ever add track buffer

 * allocation on the fly, it should be done here. No other part should need

 * modification.

 2M disks have phantom sectors on the first track */

	/* tracksize describes the size which can be filled up with sectors

	 * of size ssize.

 if we are beyond tracksize, fill up using smaller sectors */

 for virtual DMA bug workaround */

 data already in track buffer */

 unbounded */

 claim buffer track if needed */

 bad track */

 bad drive */

 not enough space */

		/* copy write buffer to track buffer.

		 * if we get here, we know that the write

		 * is either aligned or the data already in the buffer

 round up current_count_sectors to get dma xfer size */

/* Starts or continues processing request. Will automatically unlock the

 * driver at end of request.

 Autodetection */

 schedule the request and automatically unlock the driver on completion */

		/* fdc busy, this new request will be treated when the

 no auto-sense, just clear dcl */

/*

 * User triggered reset

 * ====================

/*

 * Resets the FDC connected to drive <drive>.

 * Both current_drive and current_fdc are changed to match the new drive.

		/* note: reset_fdc will take care of unlocking the driver

		 * on completion.

/*

 * Misc Ioctl's and support

 * ========================

 raw commands */

 invalidate the buffer track to force a reread */

 sanity checking for parameters. */

 check for overflow in max_sector */

 check for zero in raw_cmd->cmd[F_SECT_PER_TRACK] */

 check if reserved bits are set */

			/* notice a disk change immediately, else

		/* invalidation. Invalidate only when needed, i.e.

		 * when there are already sectors in the buffer cache

		 * whose number will change. This is useful, because

		 * mtools often changes the geometry of the disk after

 handle obsolete ioctl's */

 geometry */

 parameters coming from user space */

 parameters passed back to user space */

	/* convert compatibility eject ioctls into floppy eject ioctl.

	 * We do this in order to provide a means to eject floppy disks before

 CD-ROM eject */

 SunOS floppy eject */

 convert the old style command into a new style command */

 permission checks */

 copyin */

 somebody else has this drive open */

		/* do the actual eject. Fails on

 CD-ROM eject */

 SunOS floppy eject */

 read drive info out of physical CMOS */

 FIXME: additional physical CMOS drive detection should go here */

/*

 * floppy_open check for aliasing (/dev/fd0 can be the same as

 * /dev/PS0 etc), and disallows simultaneous access to the same

 * drive with different device numbers.

		/* if opening an ED drive, reserve a big buffer,

 Only 48 actually useful */

 Only 24 actually useful */

 buffer only one side */

/*

 * Check if the disk has been changed or if a change has been faked.

/*

 * This implements "read block 0" for floppy_revalidate().

 * Needed for format autodetection, checking whether there is

 * a disk in the drive, and whether that disk is writable.

/* revalidate the floppy disk, i.e. trigger format autodetection by reading

 * the bootblock (block 0). "Autodetection" is also needed to check whether

 * there is a disk in the drive at all... Thus we also do it for fixed

already done by another thread */

 auto-sensing */

/*

 * Floppy Driver initialization

 * =============================

 Determine the floppy disk controller type */

 This routine was written by David C. Niemi */

 82072 and better know DUMPREGS */

 No FDC present ??? */

 8272a/765 don't know DUMPREGS */

 82072 doesn't know CONFIGURE */

 82072A as found on Sparcs. */

		return FDC_82077_ORIG;	/* Pre-1991 82077, doesn't know

 Revised 82077AA passes all the tests */

 Either a 82078-1 or a 82078SL running at 5Volt */

 get_fdc_version */

 lilo configuration */

 obsolete */

 obsolete */

 to be cleaned up... */

sparcs/sun3x don't have a DOR reset which we can fall back on to */

 reset fdc in case of unexpected interrupt */

 initialise drive state */

	/*

	 * Small 10 msec delay to let through any interrupt that

	 * initialization might have triggered, to not

	 * confuse detection:

 free ioports reserved by floppy_grab_irq_and_dma() */

 Try to determine the floppy controller type */

 free ioports reserved by floppy_grab_irq_and_dma() */

		/* Not all FDCs seem to be able to handle the version command

		 * properly, so force a reset for the standard FDC clones,

		 * to avoid interrupt garbage.

 Don't hold up the bootup by the floppy initialization */

 address + 3 is sometimes reserved by pnp bios for motherboard */

	/* address + 6 is reserved, and may be taken by IDE.

	/*

	 * We might have scheduled a free_irq(), wait it to

	 * drain first:

 avoid immediate interrupt */

	/*

	 * The driver will try and free resources and relies on us

	 * to know if they were allocated or not.

 eject disk, if any */

 This doesn't actually get used other than for module information */

/*

   rbd.c -- Export ceph rados objects as a Linux block device





   based on drivers/block/osdblk.c:



   Copyright 2009 Red Hat, Inc.



   This program is free software; you can redistribute it and/or modify

   it under the terms of the GNU General Public License as published by

   the Free Software Foundation.



   This program is distributed in the hope that it will be useful,

   but WITHOUT ANY WARRANTY; without even the implied warranty of

   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

   GNU General Public License for more details.



   You should have received a copy of the GNU General Public License

   along with this program; see the file COPYING.  If not, write to

   the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.







   For usage instructions, please refer to:



                 Documentation/ABI/testing/sysfs-bus-rbd



 Activate rbd_assert() calls */

/*

 * Increment the given counter and return its updated value.

 * If the counter is already 0 it will not be incremented.

 * If the counter is already at its maximum value returns

 * -EINVAL without updating it.

 Decrement the counter.  Return the resulting value, or -EINVAL */

 allows max snapc to fit in 4KB */

 invalid index into snap array */

 This allows a single page to hold an image name sent by OSD */

 seconds */

 Feature bits */

 Features supported by this (client software) implementation. */

/*

 * An RBD device name will be "rbd#", where the "rbd" comes from

 * RBD_DRV_NAME above, and # is a unique integer identifier.

/*

 * block device image metadata (in-memory version)

 These six fields never change for a given rbd image */

 Might be changeable someday? */

 The remaining fields need to be updated occasionally */

 format 1 only */

 format 1 only */

/*

 * An rbd image specification.

 *

 * The tuple (pool_id, image_id, snap_id) is sufficient to uniquely

 * identify an image.  Each rbd_dev structure includes a pointer to

 * an rbd_spec structure that encapsulates this identity.

 *

 * Each of the id's in an rbd_spec has an associated name.  For a

 * user-mapped image, the names are supplied and the id's associated

 * with them are looked up.  For a layered image, a parent image is

 * defined by the tuple, and the names are looked up.

 *

 * An rbd_dev structure contains a parent_spec pointer which is

 * non-null if the image it represents is a child in a layered

 * image.  This pointer will refer to the rbd_spec structure used

 * by the parent rbd_dev for its own identity (i.e., the structure

 * is shared between the parent and child).

 *

 * Since these structures are populated once, during the discovery

 * phase of image construction, they are effectively immutable so

 * we make no effort to synchronize access to them.

 *

 * Note that code herein does not assume the image name is known (it

 * could be a null pointer).

 NULL if default, never "" */

/*

 * an instance of the client.  multiple devices may share an rbd client.

 first nonzero result */

 pointer into provided bio (list) */

 pointer into provided bio_vec array */

 private bio_vec array, doesn't own pages */

/*

 * Writes go through the following state machine to deal with

 * layering:

 *

 *            . . . . . RBD_OBJ_WRITE_GUARD. . . . . . . . . . . . . .

 *            .                 |                                    .

 *            .                 v                                    .

 *            .    RBD_OBJ_WRITE_READ_FROM_PARENT. . .               .

 *            .                 |                    .               .

 *            .                 v                    v (deep-copyup  .

 *    (image  .   RBD_OBJ_WRITE_COPYUP_EMPTY_SNAPC   .  not needed)  .

 * flattened) v                 |                    .               .

 *            .                 v                    .               .

 *            . . . .RBD_OBJ_WRITE_COPYUP_OPS. . . . .      (copyup  .

 *                              |                        not needed) v

 *                              v                                    .

 *                            done . . . . . . . . . . . . . . . . . .

 *                              ^

 *                              |

 *                     RBD_OBJ_WRITE_FLAT

 *

 * Writes start in RBD_OBJ_WRITE_GUARD or _FLAT, depending on whether

 * assert_exists guard is needed or not (in some cases it's not needed

 * even if there is a parent).

 RBD_OBJ_FLAG_* */

 for reads */

 for writes */

 w/ r_private_item */

 initiator: block = 0, child image = 1 */

 ENOENT handling: normal = 0, layered = 1 */

 for reads */

 for writes */

 obj req initiator */

 obj_req.ex structs */

 WatchNotify::ClientId */

/*

 * a single device

 blkdev unique id */

 blkdev assigned major */

 blkdev's gendisk and rq */

 Either 1 or 2 */

 blkdev name, e.g. rbd3 */

 queue, flags, open_count */

 possibly lock protected */

 add{,_single_major} string */

 used for all rbd requests */

 in objects */

 Block layer tags. */

 protects updating the header */

 sysfs related */

 protected by lock */

/*

 * Flag bits for rbd_dev->flags:

 * - REMOVING (which is coupled with rbd_dev->open_count) is protected

 *   by rbd_dev->lock

 rbd_dev_device_setup() ran */

 this mapping is being removed */

 -o ro or snapshot */

 Serialize client creation */

 devices */

 clients */

 Slab caches for frequently-allocated structures */

/*

 * single-major requires >= 0.75 version of userspace rbd utility.

 punt */

 !RBD_DEBUG */

 !RBD_DEBUG */

/*

 * Return true if nothing else is pending.

/*

 * Initialize an rbd client instance.  Success or not, this function

 * consumes ceph_opts.  Caller holds client_mutex.

 Now rbdc->client is responsible for ceph_opts */

/*

 * Find a ceph client with specific addr and configuration.  If

 * found, bump its reference count.

/*

 * (Per device) rbd map options

 int args above */

 string args above */

 CEPH_OSD_OP_ALLOC_HINT_FLAG_* */

 no timeout */

/*

 * Destroy ceph client

 *

 * Caller must hold rbd_client_list_lock.

/*

 * Drop reference to ceph client node. If it's not referenced anymore, release

 * it.

/*

 * Get a ceph client with specific addr and configuration, if one does

 * not exist create it.  Either way, ceph_opts is consumed by this

 * function.

		/*

		 * Using an existing client.  Make sure ->pg_pools is up to

		 * date before we look up the pool id in do_rbd_add().

 The header has to start with the magic rbd header text */

 The bio layer requires at least sector-sized I/O */

 If we use u64 in a few spots we may be able to loosen this */

	/*

	 * The size of a snapshot header has to fit in a size_t, and

	 * that limits the number of snapshots.

	/*

	 * Not only that, but the size of the entire the snapshot

	 * header must also be representable in a size_t.

/*

 * returns the size of an object in the image

/*

 * Fill an rbd image header with information from the given format 1

 * on-disk header.

 Allocate this now to avoid having to handle failure below */

 Allocate the snapshot context and fill it in */

 We'll keep a copy of the snapshot names... */

 ...as well as the array of their sizes. */

		/*

		 * Copy the names, and fill in each snapshot's id

		 * and size.

		 *

		 * Note that rbd_dev_v1_header_info() guarantees the

		 * ondisk buffer we're working with has

		 * snap_names_len bytes beyond the end of the

		 * snapshot id array, this memcpy() is safe.

 We won't fail any more, fill in the header */

 The remaining fields always get updated (when we refresh) */

 Skip over names until we find the one we are looking for */

/*

 * Snapshot id comparison function for use with qsort()/bsearch().

 * Note that result is for snapshots in *descending* order.

/*

 * Search a snapshot context to see if the given snapshot id is

 * present.

 *

 * Returns the position of the snapshot id in the array if it's found,

 * or BAD_SNAP_INDEX otherwise.

 *

 * Note: The snapshot array is in kept sorted (by the osd) in

 * reverse order, highest snapshot id first.

/*

 * Zero a range in @obj_req data buffer defined by a bio (list) or

 * (private) bio_vec array.

 *

 * @off is relative to the start of the data buffer.

 Image request now owns object's original reference */

/*

 * The default/initial value for all image request flags is 0.  Each

 * is conditionally set to 1 at image request initialization time

 * and currently never change thereafter.

/*

 * Must be called after rbd_obj_calc_img_extents().

	/*

	 * Writes aren't allowed to return a data payload.  In some

	 * guarded write cases (e.g. stat + zero on an empty object)

	 * a stat response makes it through, but we don't care.

	/*

	 * Data objects may be stored in a separate pool, but always in

	 * the same namespace in that pool as the header in its pool.

 Nothing to do */

 It's OK to call this for a device with no parent */

/*

 * Parent image reference counting is used to determine when an

 * image's parent fields can be safely torn down--after there are no

 * more in-flight requests to the parent image.  When the last

 * reference is dropped, cleaning them up is safe.

 Last reference; clean up parent data structures */

/*

 * If an image has a non-zero parent overlap, get a reference to its

 * parent.

 *

 * Returns true if the rbd device has a parent with a non-zero

 * overlap and a reference for it was successfully taken, or

 * false otherwise.

	/*

	 * An image mapped read-only can't use the object map -- it isn't

	 * loaded because the header lock isn't acquired.  Someone else can

	 * write to the image and update the object map behind our back.

	 *

	 * A snapshot can't be written to, so using the object map is always

	 * safe.

 fall back to default logic if object map is disabled or invalid */

 already locked by myself */

/*

 * This function needs snap_id (or more precisely just something to

 * distinguish between HEAD and snapshot object maps), new_state and

 * current_state that were passed to rbd_object_map_update().

 *

 * To avoid allocating and stashing a context we piggyback on the OSD

 * request.  A HEAD update has two ops (assert_locked).  For new_state

 * and current_state we decode our own object_map_update op, encoded in

 * rbd_cls_object_map_update().

	/*

	 * Nothing to do for a snapshot object map.

	/*

	 * Update in-memory HEAD object map.

/*

 * Return:

 *   0 - object map update sent

 *   1 - object map update isn't needed

 *  <0 - error

 assert_locked */

		/*

		 * Protect against possible race conditions during lock

		 * ownership transitions.

 drop extents completely beyond the overlap */

 trim final overlapping extent */

/*

 * Determine the byte range(s) covered by either just the object extent

 * or the entire object in the parent image.

	/*

	 * The response data for a STAT call consists of:

	 *     le64 length;

	 *     struct {

	 *         le32 tv_sec;

	 *         le32 tv_nsec;

	 *     } mtime;

 reverse map the entire object onto the parent */

	/*

	 * Align the range to alloc_size boundary and punt on discards

	 * that are too small to free up any space.

	 *

	 * alloc_size == object_size && is_tail() is a special case for

	 * filestore with filestore_punch_hole = false, needed to allow

	 * truncate (in addition to delete).

 reverse map the entire object onto the parent */

 reverse map the entire object onto the parent */

 setallochint + write/writefull */

 write/writefull */

 delete/truncate/zero */

 create + truncate */

 delete/truncate/zero */

/*

 * Prune the list of object requests (adjust offset and/or length, drop

 * redundant requests).  Prepare object request state machines and image

 * request state machine for execution.

/*

 * While su != os && sc == 1 is technically not fancy (it's the same

 * layout as su == os && sc == 1), we can't use the nocopy path for it

 * because ->set_pos_fn() should be called only once per object.

 * ceph_file_to_extents() invokes action_fn once per stripe unit, so

 * treat su != os && sc == 1 as fancy.

	/*

	 * Create object requests and set each object request's starting

	 * position in the provided bio (list) or bio_vec array.

/*

 * Map a list of image extents to a list of object extents, create the

 * corresponding object requests (normally each to a different object,

 * but not always) and add them to @img_req.  For each object request,

 * set up its data descriptor to point to the corresponding chunk(s) of

 * @fctx->pos data buffer.

 *

 * Because ceph_file_to_extents() will merge adjacent object extents

 * together, each object request's data descriptor may point to multiple

 * different chunks of @fctx->pos data buffer.

 *

 * @fctx->pos data buffer is assumed to be large enough.

	/*

	 * Create object requests and determine ->bvec_count for each object

	 * request.  Note that ->bvec_count sum over all object requests may

	 * be greater than the number of bio_vecs in the provided bio (list)

	 * or bio_vec array because when mapped, those bio_vecs can straddle

	 * stripe unit boundaries.

	/*

	 * Fill in each object request's private bio_vec array, splitting and

	 * rearranging the provided bio_vecs in stripe unit chunks as needed.

 avoid parent chain recursion */

 reverse map this object extent onto the parent */

		/*

		 * -ENOENT means a hole in the image -- zero-fill the entire

		 * length of the request.  A short read also implies zero-fill

		 * to the end of the request.

		/*

		 * The parent image is read only up to the overlap -- zero-fill

		 * from the overlap to the end of the request.

/*

 * Return:

 *   0 - object map update sent

 *   1 - object map update isn't needed

 *  <0 - error

 stat */

/*

 * copyup_bvecs pages are never highmem pages

 copyup */

/*

 * The target object doesn't exist.  Read the data for the entire

 * target object up to the overlap point (if any) from the parent,

 * so we can use it for a copyup.

		/*

		 * The overlap has become 0 (most likely because the

		 * image has been flattened).  Re-submit the original write

		 * request -- pass MODS_ONLY since the copyup isn't needed

		 * anymore.

	/*

	 * Only send non-zero copyup data to save some I/O and network

	 * bandwidth -- zero copyup data is equivalent to the object not

	 * existing.

		/*

		 * Send a copyup request with an empty snapshot context to

		 * deep-copyup the object through all existing snapshots.

		 * A second request with the current snapshot context will be

		 * sent for the actual modification.

/*

 * Return:

 *   0 - object map update sent

 *   1 - object map update isn't needed

 *  <0 - error

			/*

			 * On a non-existent object:

			 *   delete - -ENOENT, truncate/zero - 0

/*

 * Return true if @obj_req is completed.

/*

 * This is open-coded in rbd_img_handle_request() to avoid parent chain

 * recursion.

 lock got released? */

	/*

	 * Note the use of mod_delayed_work() in rbd_acquire_lock()

	 * and cancel_delayed_work() in wake_lock_waiters().

/*

 * Return true if @img_req is completed.

/*

 * lock_rwsem must be held for write

 struct */

/*

 * lock_rwsem must be held for write

/*

 * lock_rwsem must be held for write

 treat errors as the image is unlocked */

 encode *LockPayload NotifyMessage (op + ClientId) */

 num_acks */

 skip gid and cookie */

/*

 * Either image request state machine(s) or rbd_add_acquire_lock()

 * (i.e. "rbd map").

		/*

		 * Ignore addr->type while comparing.  This mimics

		 * entity_addr_t::get_legacy_str() + strcmp().

/*

 * lock_rwsem must be held for write

 determine if the current lock holder is still alive */

 request lock or error */

/*

 * Return:

 *   0 - lock acquired

 *   1 - caller should call rbd_request_lock()

 *  <0 - error

 request lock anyway */

		/*

		 * Can't stay in RBD_LOCK_STATE_LOCKED because

		 * rbd_lock_add_request() would let the request through,

		 * assuming that e.g. object map is locked and loaded.

 treat this as a dead client */

		/*

		 * lock owner acked, but resend if we don't see them

		 * release the lock

	/*

	 * Ensure that all in-flight IO is flushed.

/*

 * lock_rwsem must be held for write

	/*

	 * Give others a chance to grab the lock - we would re-acquire

	 * almost immediately if we got new IO while draining the running

	 * list otherwise.  We need to ack our own notifications, so this

	 * lock_dwork will be requeued from rbd_handle_released_lock() by

	 * way of maybe_kick_acquire().

/*

 * Returns result for ResponseMessage to be encoded (<= 0), or 1 if no

 * ResponseMessage is needed.

		/*

		 * encode ResponseMessage(0) so the peer can detect

		 * a missing owner

 refuse to release the lock */

 encode ResponseMessage */

 legacy notification for header updates */

/*

 * watch_mutex must be locked

/*

 * watch_mutex must be locked

/*

 * header_rwsem must not be held to avoid a deadlock with

 * rbd_dev_refresh() when flushing notifies.

/*

 * lock_rwsem must be held for write

		/*

		 * Lock cookie cannot be updated on older OSDs, so do

		 * a manual release and queue an acquire.

/*

 * Synchronous osd object method call.  Returns the number of bytes

 * returned in the outbound buffer, or a negative error code.

	/*

	 * Method calls are ultimately read operations.  The result

	 * should placed into the inbound buffer provided.  They

	 * also supply outbound data--parameters for the object

	 * method.  Currently if this is present it will be a

	 * snapshot id.

 Ignore/skip any zero-length requests */

/*

 * Read the complete header for the given rbd device.  On successful

 * return, the rbd_dev->header field will contain up-to-date

 * information about the image.

	/*

	 * The complete header will include an array of its 64-bit

	 * snapshot ids, followed by the names of those snapshots as

	 * a contiguous block of NUL-terminated strings.  Note that

	 * the number of snapshots could change by the time we read

	 * it in, in which case we re-read it.

	/*

	 * If EXISTS is not set, rbd_dev->disk may be NULL, so don't

	 * try to update its size.  If REMOVING is set, updating size

	 * is just useless work since the device can't be opened.

	/*

	 * If there is a parent, see if it has disappeared due to the

	 * mapped image getting flattened.

 QUEUE_FLAG_ADD_RANDOM is off by default for blk-mq */

/*

  sysfs

/*

 * Shows the name of the currently-mapped snapshot (or

 * RBD_SNAP_HEAD_NAME for the base image).

/*

 * For a v2 image, shows the chain of parent images, separated by empty

 * lines.  For v1 images or if there is no parent, shows "(no parent

 * image)".

 first? */

	/*

	 * This is racy, but way better than putting module outside of

	 * the release callback.  The race window is pretty small, so

	 * doing something similar to dm (dm-builtin.c) is overkill.

/*

 * Create a mapping rbd_dev.

 get an id and fill in device name */

 we have a ref from do_rbd_add() */

/*

 * Get the size and object order for an image snapshot, or if

 * snap_id is CEPH_NOSNAP, gets this information for the base

 * image.

 Response will be an encoded string, which includes a length */

/*

 * These are generic image flags, but since they are used only for

 * object map, store them in rbd_dev->object_map_flags.

 *

 * For the same reason, this function is called only on object map

 * (re)load and not on header refresh.

/*

 * The caller is responsible for @pii.

/*

 * The caller is responsible for @pii.

		/*

		 * Either the parent never existed, or we have

		 * record of it but the image got flattened so it no

		 * longer has a parent.  When the parent of a

		 * layered image disappears we immediately set the

		 * overlap to 0.  The effect of this is that all new

		 * requests will be treated as if the image had no

		 * parent.

		 *

		 * If !pii.has_overlap, the parent image spec is not

		 * applicable.  It's there to avoid duplication in each

		 * snapshot record.

 No parent?  No problem. */

 The ceph file layout needs to fit pool id in 32 bits */

	/*

	 * The parent won't change (except when the clone is

	 * flattened, already handled that).  So we only need to

	 * record the parent spec we have not already done so.

 rbd_dev now owns this */

	/*

	 * We always update the parent overlap.  If it's zero we issue

	 * a warning, as we will proceed as if there was no parent.

 refresh, careful to warn just once */

 initial probe */

 Skip over names until we find the one we are looking for */

 ignore no-longer existing snapshots */

/*

 * Assumes name is never RBD_SNAP_HEAD_NAME; returns CEPH_NOSNAP if

 * no snapshot by that name is found, or if an error occurs.

/*

 * An image being mapped will have everything but the snap id.

/*

 * A parent image will have all ids but none of the names.

 *

 * All names in an rbd spec are dynamically allocated.  It's OK if we

 * can't figure out the name for an image id.

 Get the pool name; we have to make our own copy of this */

 Fetch the image name; tolerate failure here */

 Fetch the snapshot name */

	/*

	 * We'll need room for the seq value (maximum snapshot id),

	 * snapshot count, and array of that many snapshot ids.

	 * For now we have a fixed upper limit on the number we're

	 * prepared to receive.

	/*

	 * Make sure the reported number of snapshot ids wouldn't go

	 * beyond the end of our buffer.  But before checking that,

	 * make sure the computed size of the snapshot context we

	 * allocate is representable in a size_t.

/*

 * Skips over white space at *buf, and updates *buf to point to the

 * first found non-space character (if any). Returns the length of

 * the token (string of non-white space characters) found.  Note

 * that *buf must be terminated with '\0'.

        /*

        * These are the characters that produce nonzero for

        * isspace() in the "C" and "POSIX" locales.

 Find start of token */

 Return token length */

/*

 * Finds the next token in *buf, dynamically allocates a buffer big

 * enough to hold a copy of it, and copies the token into the new

 * buffer.  The copy is guaranteed to be terminated with '\0'.  Note

 * that a duplicate buffer is created even for a zero-length token.

 *

 * Returns a pointer to the newly-allocated duplicate, or a null

 * pointer if memory for the duplicate was not available.  If

 * the lenp argument is a non-null pointer, the length of the token

 * (not including the '\0') is returned in *lenp.

 *

 * If successful, the *buf pointer will be updated to point beyond

 * the end of the found token.

 *

 * Note: uses GFP_KERNEL for allocation.

 0 is "wait forever" (i.e. infinite timeout) */

/*

 * This duplicates most of generic_parse_monolithic(), untying it from

 * fs_context and skipping standard superblock and security options.

/*

 * Parse the options provided for an "rbd add" (i.e., rbd image

 * mapping) request.  These arrive via a write to /sys/bus/rbd/add,

 * and the data written is passed here via a NUL-terminated buffer.

 * Returns 0 if successful or an error code otherwise.

 *

 * The information extracted from these options is recorded in

 * the other parameters which return dynamically-allocated

 * structures:

 *  ceph_opts

 *      The address of a pointer that will refer to a ceph options

 *      structure.  Caller must release the returned pointer using

 *      ceph_destroy_options() when it is no longer needed.

 *  rbd_opts

 *	Address of an rbd options pointer.  Fully initialized by

 *	this function; caller must release with kfree().

 *  spec

 *	Address of an rbd image specification pointer.  Fully

 *	initialized by this function based on parsed options.

 *	Caller must release with rbd_spec_put().

 *

 * The options passed take this form:

 *  <mon_addrs> <options> <pool_name> <image_name> [<snap_id>]

 * where:

 *  <mon_addrs>

 *      A comma-separated list of one or more monitor addresses.

 *      A monitor address is an ip address, optionally followed

 *      by a port number (separated by a colon).

 *        I.e.:  ip1[:port1][,ip2[:port2]...]

 *  <options>

 *      A comma-separated list of ceph and/or rbd options.

 *  <pool_name>

 *      The name of the rados pool containing the rbd image.

 *  <image_name>

 *      The name of the image in that pool to map.

 *  <snap_id>

 *      An optional snapshot id.  If provided, the mapping will

 *      present data from the image at the time that snapshot was

 *      created.  The image head is used if no snapshot id is

 *      provided.  Snapshot mappings are always read-only.

 The first four tokens are required */

	/*

	 * Snapshot name is optional; default is to use "-"

	 * (indicating the head/no snapshot).

 No snapshot supplied */

 Initialize all rbd options to the defaults */

/*

 * If the wait is interrupted, an error is returned even if the lock

 * was successfully acquired.  rbd_dev_image_unlock() will release it

 * if needed.

	/*

	 * The lock may have been released by now, unless automatic lock

	 * transitions are disabled.

/*

 * An rbd format 2 image has a unique identifier, distinct from the

 * name given to it by the user.  Internally, that identifier is

 * what's used to specify the names of objects related to the image.

 *

 * A special "rbd id" object is used to map an rbd image name to its

 * id.  If that object doesn't exist, then there is no v2 rbd image

 * with the supplied name.

 *

 * This function will record the given rbd_dev's image_id field if

 * it can be determined, and in that case will return 0.  If any

 * errors occur a negative errno will be returned and the rbd_dev's

 * image_id field will be unchanged (and should be NULL).

	/*

	 * When probing a parent image, the image id is already

	 * known (and the image name likely is not).  There's no

	 * need to fetch the image id again in this case.  We

	 * do still need to set the image format though.

	/*

	 * First, see if the format 2 image id file exists, and if

	 * so, get the image's persistent id from it.

 Response will be an encoded string, which includes a length */

 If it doesn't exist we'll assume it's a format 1 image */

/*

 * Undo whatever state changes are made by v1 or v2 header info

 * call.

 Free dynamic fields from the header, then zero it out */

	/*

	 * Get the and check features for the image.  Currently the

	 * features are assumed to never change.

 If the image supports fancy striping, get its parameters */

/*

 * @depth is rbd_dev_image_probe() -> rbd_dev_probe_parent() ->

 * rbd_dev_image_probe() recursion depth, which means it's also the

 * length of the already discovered part of the parent chain.

	/*

	 * Images related by parent/child relationships always share

	 * rbd_client and spec/parent_spec, so bump their refcounts.

/*

 * rbd_dev->header_rwsem must be locked for write and will be unlocked

 * upon return.

 Record our major and minor device numbers. */

 Set up the blkdev mapping. */

 Record the header object name for this rbd image. */

/*

 * Probe for the existence of the header object for the given rbd

 * device.  If this image is the one being mapped (i.e., not a

 * parent), initiate a watch on its header object before using that

 * object to get detailed information about the rbd image.

 *

 * On success, returns with header_rwsem held for write if called

 * with @depth == 0.

	/*

	 * Get the id from the image id object.  Unless there's an

	 * error, rbd_dev->spec->image_id will be filled in with

	 * a dynamically-allocated string, and rbd_dev->image_format

	 * will be set to either 1 or 2.

	/*

	 * If this image is the one being mapped, we have pool name and

	 * id, image name and id, and snap name - need to fill snap id.

	 * Otherwise this is a parent image, identified by pool, image

	 * and snap ids - need to fill in names for those ids.

 parse add command */

 pick the pool */

 rbd_dev now owns this */

 rbd_dev now owns this */

 rbd_dev now owns this */

 if we are mapping a snapshot it will be a read-only mapping */

 Everything's ready.  Announce the disk to the world. */

		/*

		 * Follow to the parent with no grandparent and

		 * remove it.

		/*

		 * Prevent new IO from being queued and wait for existing

		 * IO to complete/fail.

/*

 * create control files in sysfs

 * /sys/bus/rbd/...

	/*

	 * The number of active work items is limited by the number of

	 * rbd devices * queue depth, so leave @max_active at default.

 following authorship retained from original osdblk.c */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  drivers/block/ataflop.c

 *

 *  Copyright (C) 1993  Greg Harp

 *  Atari Support by Bjoern Brauel, Roman Hodek

 *

 *  Big cleanup Sep 11..14 1994 Roman Hodek:

 *   - Driver now works interrupt driven

 *   - Support for two drives; should work, but I cannot test that :-(

 *   - Reading is done in whole tracks and buffered to speed up things

 *   - Disk change detection and drive deselecting after motor-off

 *     similar to TOS

 *   - Autodetection of disk format (DD/HD); untested yet, because I

 *     don't have an HD drive :-(

 *

 *  Fixes Nov 13 1994 Martin Schaller:

 *   - Autodetection works now

 *   - Support for 5 1/4'' disks

 *   - Removed drive type (unknown on atari)

 *   - Do seeks with 8 Mhz

 *

 *  Changes by Andreas Schwab:

 *   - After errors in multiple read mode try again reading single sectors

 *  (Feb 1995):

 *   - Clean up error handling

 *   - Set blk_size for proper size checking

 *   - Initialize track register when testing presence of floppy

 *   - Implement some ioctl's

 *

 *  Changes by Torsten Lang:

 *   - When probing the floppies we should add the FDCCMDADD_H flag since

 *     the FDC will otherwise wait forever when no disk is inserted...

 *

 * ++ Freddi Aschwanden (fa) 20.9.95 fixes for medusa:

 *  - MFPDELAY() after each FDC access -> atari 

 *  - more/other disk formats

 *  - DMA to the block buffer directly if we have a 32bit DMA

 *  - for medusa, the step rate is always 3ms

 *  - on medusa, use only cache_push()

 * Roman:

 *  - Make disk format numbering independent from minors

 *  - Let user set max. supported drive type (speeds up format

 *    detection, saves buffer space)

 *

 * Roman 10/15/95:

 *  - implement some more ioctls

 *  - disk formatting

 *  

 * Andreas 95/12/12:

 *  - increase gap size at start of track for HD/ED disks

 *

 * Michael (MSch) 11/07/96:

 *  - implemented FDSETPRM and FDDEFPRM ioctl

 *

 * Andreas (97/03/19):

 *  - implemented missing BLK* ioctls

 *

 *  Things left to do:

 *   - Formatting

 *   - Maybe a better strategy for disk change detection (does anyone

 *     know one?)

/*

 * WD1772 stuff

 register codes */

 command/status register */

 track register */

 sector register */

 data register */

 register names for FDC_READ/WRITE macros */

 command opcodes */

  -                   */

   |                  */

   |  TYP 1 Commands  */

   |                  */

  -                   */

  -   TYP 2 Commands  */

  -          "        */

  -                   */

   |  TYP 3 Commands  */

  -                   */

  -   TYP 4 Command   */

 command modifier bits */

 step rate settings */

 verify */

 wait for spin-up */

 update track register */

 multiple sector access */

 head settling flag */

 precompensation off */

 DAM flag */

 status register bits */

 motor on */

 write protected (FDCCMD_WR*) */

 motor speed stable (Type I) */

 sector has deleted DAM (Type II+III) */

 record not found */

 CRC error */

 Track 00 flag (Type I) */

 Lost Data (Type II+III) */

 Index status (Type I) */

 DRQ status (Type II+III) */

 FDC is busy */

 PSG Port A Bit Nr 0 .. Side Sel .. 0 -> Side 1  1 -> Side 2 */

 step rates */

 to be formatted */

   ""     ""     */

 offset of first sector */

 Disk types: DD, HD, ED */

 sectors per track */

 total number of blocks */

 fdc_speed setting */

 track doubling ? */

  0: 360kB diskette */

  1: 360kb in 720k or 1.2MB drive */

  2: 720kb in 720k or 1.2MB drive */

  3: DD disk with 82 tracks/10 sectors */

 formats above are probed for type DD */

  4: 1.2MB diskette */

  5: 1.4 MB diskette (HD) */

  6: 1.64MB diskette (fat HD) 82 tr 20 sec */

 formats above are probed for types DD and HD */

  7: 2.8 MB diskette (ED) */

  8: 3.2 MB diskette (fat ED) 82 tr 40 sec */

 formats above are probed for types DD, HD and ED */

 types below are never autoprobed */

  9: 1.68MB diskette (fat HD) 80 tr 21 sec */

 10: 410k diskette 41 tr 10 sec, stretch */

 11: 1.48MB diskette 82 tr 18 sec */

 12: 1.72MB diskette 82 tr 21 sec */

 13: 420k diskette 42 tr 10 sec, stretch */

 14: 820k diskette 83 tr 10 sec */

 15: 1.49MB diskette 83 tr 18 sec */

 16: 1.74MB diskette 83 tr 21 sec */

 17: 880k diskette 80 tr 11 sec */

 18: 1.04MB diskette 80 tr 13 sec */

 19: 1.12MB diskette 80 tr 14 sec */

 20: 1.60MB diskette 80 tr 20 sec */

 21: 1.76MB diskette 80 tr 22 sec */

 22: 1.92MB diskette 80 tr 24 sec */

 23: 3.2MB diskette 80 tr 40 sec */

 24: 3.52MB diskette 80 tr 44 sec */

 25: 3.84MB diskette 80 tr 48 sec */

 26: 1.84MB diskette 80 tr 23 sec */

 27: 800k diskette 80 tr 10 sec */

 Array for translating minors into disk formats */

  1: d360 */

  2: h1200 */

  3: D360 */

  4: D720 */

  5: h360 = D360 */

  6: h720 = D720 */

  7: H1440 */

  8: E2880 */

 some PC formats :-) */

  9: E3280    <- was "CompaQ" == E2880 for PC */

 10: h1440 = H1440 */

 11: H1680 */

 12: h410  */

 13: H820     <- == D820, 82x10 */

 14: h1476 */

 15: H1722 */

 16: h420  */

 17: H830  */

 18: h1494 */

 19: H1743 */

 20: h880  */

 21: D1040 */

 22: D1120 */

 23: h1600 */

 24: H1760 */

 25: H1920 */

 26: E3200 */

 27: E3520 */

 28: E3840 */

 29: H1840 */

 30: D800  */

 31: H1640    <- was H1600 == h1600 for PC */

/*

 * Maximum disk size (in kilobytes). This default is used whenever the

 * current disk size is unknown.

/*

 * MSch: User-provided type information. 'drive' points to

 * the respective entry of this array. Set by FDSETPRM ioctls.

/*

 * User-provided permanent type information. 'drive' points to

 * the respective entry of this array.  Set by FDDEFPRM ioctls, 

 * restored upon disk change by floppy_revalidate() if valid (as seen by

 * default_params[].blocks > 0 - a bit in unit[].flags might be used for this?)

 current info on each unit */

 !=0 : drive is connected */

 !=0 : do autoprobe	    */

 current type of disk */

	int track;		/* current head position or -1 if

 steprate setting */

	unsigned int wpstat;	/* current state of WP signal (for

 flags */

 unsigned long __flags; */		\

 local_irq_save(__flags); */		\

 local_irq_restore(__flags); */		\

 unsigned long __flags; */		\

 local_irq_save(__flags); */		\

 local_irq_restore(__flags); */	\

/* Buffering variables:

 * First, there is a DMA buffer in ST-RAM that is used for floppy DMA

 * operations. Second, a track buffer is used to cache a whole track

 * of the disk to save read operations. These are two separate buffers

 * because that allows write operations without clearing the track buffer.

 buffer for writes */

 physical address */

 Do track buffering? */

 buffer for reads */

 physical address */

 non-zero if we are reading whole tracks */

/*

 * These are global variables, as that's the easiest way to give

 * information to interrupts. They are the data used for the current

 * request.

#define RECALIBRATE_ERRORS	4	/* After this many errors the drive

#define MAX_ERRORS		8	/* After this many errors the driver

/*

 * The driver is trying to determine the correct media format

 * while Probing is set. fd_rwsec_done() clears it after a

 * successful access.

/* This flag is set when a dummy seek is necessary to make the WP

 * status bit accessible.

**************************** Prototypes *****************************/

************************ End of Prototypes **************************/

 requeue rest of request */

 Select the side to use. */

 protect against various other ints mucking around with the PSG */

 Select PSG Port A */

/* Select a drive, update the FDC's track register and set the correct

 * clock speed for this disk's type.

 protect against various other ints mucking around with the PSG */

 Select PSG Port A */

 restore track register to saved value */

 select 8/16 MHz */

 Deselect both drives. */

 protect against various other ints mucking around with the PSG */

 Select PSG Port A */

 no drives selected */

	/* On Falcon, the drive B select line is used on the printer port, so

/* This timer function deselects the drives when the FDC switched the

 * motor off. The deselection cannot happen earlier because the FDC

 * counts the index signals, which arrive only if one drive is selected.

 no drive selected, needn't deselect anyone */

 motor already turned off by FDC -> deselect drives */

 not yet off, try again */

	/* Test again later; if tested too often, it seems there is no disk

	 * in the drive and the FDC will leave the motor on forever (or,

	 * at least until a disk is inserted). So we'll test only twice

	 * per second from then on...

/* This function is repeatedly called to detect disk changes (as good

 * as possible) and keep track of the current state of the write protection.

 protect against various other ints mucking around with the PSG */

/* Handling of the Head Settling Flag: This flag should be set after each

 * seek operation, because we don't use seeks with verify.

 General Interrupt Handling */

/* Error handling: If some error happened, retry some times, then

 * recalibrate, then try again, and fail after MAX_ERRORS.

 need to re-run request to recalibrate */

 ---------- Formatting ---------- */

 should be already, just to be sure */

	/* The track buffer is used for the raw track data, so its

 stop deselect timer */

/* do_fd_action() is the general procedure for a fd request: All

 * required parameter settings (drive select, side select, track

 * position) are checked and set if needed. For each of these

 * parameters and the actual reading or writing exist two functions:

 * one that starts the setting (or skips it if possible) and one

 * callback for the "done" interrupt. Each done func calls the next

 * set function to propagate the request down to fd_rwsec_done().

 read next sector */

 all sectors finished */

		    /* cmd == WRITE, pay attention to track buffer

 Seek to track 0 if the current track is unknown */

 always seek with 8 Mhz */

 we can't verify, since the speed may be incorrect */

 wait for IRQ */

 set the correct speed now */

/* Seek the drive to the requested track. The drive must have been

 * calibrated at some point before this.

 always seek witch 8 Mhz */

 wait for IRQ */

 set the correct speed */

 we don't know exactly which track we are on now! */

/* This does the actual reading/writing after positioning the head

 * over the correct track.

 Start sector of this operation */

 Cheat for track if stretch != 0 */

 Setup DMA */

 Clear FIFO and switch DMA to correct mode */  

 How many sectors for DMA */

 Start operation */

 wait for interrupt */

		/* If reading a whole track, wait about one disk rotation and

		 * then check if all sectors are read. The FDC will even

		 * search for the first non-existent sector and need 1 sec to

		 * recognise that it isn't present :-(

 1 rot. + 5 rot.s if motor was off  */

		/* This prevents a race condition that could arise if the

		 * interrupt is triggered while the calling of this timer

		 * callback function takes place. The IRQ function then has

		 * already cleared 'MultReadInProgress'  when flow of control

		 * gets here.

 get the current DMA address */

 ++ f.a. read twice to avoid being fooled by switcher */

		/* already read enough data, force an FDC interrupt to stop

		 * the read operation

		/* No error until now -- the FDC would have interrupted

		 * otherwise!

 not yet finished, wait another tenth rotation */

 Correct the track if stretch != 0 */

	    /* RECNF is no error after a multiple read when the FDC

 try another disk type */

 record not found, but not probing. Maybe stretch wrong ? Restart probing */

 read next sector */

 all sectors finished */

 Cheat for track if stretch != 0 */

 Setup DMA */

 Clear FIFO and switch DMA to correct mode */  

 How many sectors for DMA */

 Start operation */

 wait for interrupt */

	if (!FloppyIRQHandler) goto end; /* int occurred after timer was fired, but

	/* If the timeout occurred while the readtrack_check timer was

/* The (noop) seek operation here is needed to make the WP bit in the

 * FDC status register accessible for check_change. If the last disk

 * operation would have been a RDSEC, this bit would always read as 0

 * no matter what :-( To save time, the seek goes to the track we're

 * already on.

		/* we must wait for the IRQ here, because the ST-DMA

		   is released immediately afterwards and the interrupt

		/* If the check for a disk change is done too early after this

		 * last seek command, the WP bit still reads wrong :-((

/* The detection of disk changes is a dark chapter in Atari history :-(

 * Because the "Drive ready" signal isn't present in the Atari

 * hardware, one has to rely on the "Write Protect". This works fine,

 * as long as no write protected disks are used. TOS solves this

 * problem by introducing tri-state logic ("maybe changed") and

 * looking at the serial number in block 0. This isn't possible for

 * Linux, since the floppy driver can't make assumptions about the

 * filesystem used on the disk and thus the contents of block 0. I've

 * chosen the method to always say "The disk was changed" if it is

 * unsure whether it was. This implies that every open or mount

 * invalidates the disk buffers if you work with write protected

 * disks. But at least this is better than working with incorrect data

 * due to unrecognised disk changes.

 simulated change (e.g. after formatting) */

 surely changed (the WP signal changed at least once) */

		/* WP is on -> could be changed: to be sure, buffers should be

		 * invalidated...

		/* MSch: clearing geometry makes sense only for autoprobe

		   formats, for 'permanent user-defined' parameter:

 This sets up the global variables describing the current request. */

 drive not connected */

 user supplied disk type */

 stop deselect timer */

	        /* 

		 * MSch 7/96: simple 'set geometry' case: just set the

		 * 'default' device params (minor == 0).

		 * Currently, the drive geometry is cleared after each

		 * disk change and subsequent revalidate()! simple

		 * implementation of FDDEFPRM: save geometry from a

		 * FDDEFPRM call and restore it in floppy_revalidate() !

 get the parameters from user space */

		/* 

		 * first of all: check for floppy change and revalidate, 

		 * or the next access will revalidate - and clear UDT :-(

 what if type > 0 here? Overwrite specified entry ? */

 refuse to re-set a predefined type for now */

		/* 

		 * type == 0: first look for a matching entry in the type list,

		 * and set the UD.disktype field to use the perdefined entry.

		 * TODO: add user-defined format to head of autoprobe list ? 

		 * Useful to include the user-type for future autodetection!

 skip this one, invalid for drive ... */

 found matching entry ?? */

 save settings as permanent default type */

 no matching disk type found above - setting user_params */

 set permanent type */

 set user type (reset by disk change!) */

 sanity check */

 MSch: invalidate default_params */

 invalidate the buffer track to force a reread */

 Initialize the 'unit' variable for drive 'drive' */

 should be -1 for "not set by user" */

 from probe restore operation! */

/* This function tests the physical presence of a floppy drive (not

 * whether a disk is inserted). This is done by issuing a restore

 * command, waiting max. 2 seconds (that should be enough to move the

 * head across the whole disk) and looking at the state of the "TR00"

 * signal. This should now be raised if there is a drive connected

 * (and there is no hardware failure :-) Otherwise, the drive is

 * declared absent.

 disable interrupt temporarily */

	/* force interrupt to abort restore operation (FDC would try

 dummy seek command to make WP bit accessible */

/* Look how many and which kind of drives are connected. If there are

 * floppies, additionally start the disk-change and motor-off timers.

 for probing drives, set the FDC speed to 8 MHz */

		/* If FDC is still busy from probing, give it another FORCI

		 * command to abort the operation. If this isn't done, the FDC

		 * will interrupt later and its IRQ line stays low, because

		 * the status register isn't read. And this will block any

		 * interrupts on this IRQ line :-(

/*

 * floppy_open check for aliasing (/dev/fd0 can be the same as

 * /dev/PS0 etc), and disallows simultaneous access to the same

 * drive with different device numbers.

 Amiga, Mac, ... don't have Atari-compatible floppy :-) */

		/* not set by user -> use default: for now, we turn

		   track buffering off for all Medusas, though it

		   could be used with ones that have a counter

 initialize variables */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Ram backed block device driver.

 *

 * Copyright (C) 2007 Nick Piggin

 * Copyright (C) 2007 Novell Inc.

 *

 * Parts derived from drivers/block/rd.c, and drivers/block/loop.c, copyright

 * of their respective owners.

/*

 * Each block ramdisk device has a radix_tree brd_pages of pages that stores

 * the pages containing the block device's contents. A brd page's ->index is

 * its offset in PAGE_SIZE units. This is similar to, but in no way connected

 * with, the kernel's pagecache or buffer cache (which sit above our block

 * device).

	/*

	 * Backing store of pages and lock to protect it. This is the contents

	 * of the block device.

/*

 * Look up and return a brd's page for a given sector.

	/*

	 * The page lifetime is protected by the fact that we have opened the

	 * device node -- brd pages will never be deleted under us, so we

	 * don't need any further locking or refcounting.

	 *

	 * This is strictly true for the radix-tree nodes as well (ie. we

	 * don't actually need the rcu_read_lock()), however that is not a

	 * documented feature of the radix-tree API so it is better to be

	 * safe here (we don't have total exclusion from radix tree updates

	 * here, only deletes).

 sector to page index */

/*

 * Look up and return a brd's page for a given sector.

 * If one does not exist, allocate an empty page, and insert that. Then

 * return it.

	/*

	 * Must use NOIO because we don't want to recurse back into the

	 * block or filesystem layers from page reclaim.

/*

 * Free all backing store pages and radix tree. This must only be called when

 * there are no other users of the device.

		/*

		 * It takes 3.4 seconds to remove 80GiB ramdisk.

		 * So, we need cond_resched to avoid stalling the CPU.

		/*

		 * This assumes radix_tree_gang_lookup always returns as

		 * many pages as possible. If the radix-tree code changes,

		 * so will this have to.

/*

 * copy_to_brd_setup must be called before copy_to_brd. It may sleep.

/*

 * Copy n bytes from src to the brd starting at sector. Does not sleep.

/*

 * Copy n bytes to dst from the brd starting at sector. Does not sleep.

/*

 * Process a single bvec of a bio.

 Don't support un-aligned buffer */

/*

 * And now the modules code and kernel interface.

 Legacy boot options - nonmodular */

/*

 * The device scheme is derived from loop.c. Keep them in synch where possible

 * (should share code eventually).

	/*

	 * This is so fdisk will align partitions on 4k, because of

	 * direct_access API needing 4k alignment, returning a PFN

	 * (This is only a problem on very small devices <= 4M,

	 *  otherwise fdisk will align on 1M. Regardless this call

	 *  is harmless)

 Tell the block layer that this is not a rotational device */

	/*

	 * make sure 'max_part' can be divided exactly by (1U << MINORBITS),

	 * otherwise, it is possiable to get same dev_t when adding partitions.

	/*

	 * brd module now has a feature to instantiate underlying device

	 * structure on-demand, provided that there is an access dev node.

	 *

	 * (1) if rd_nr is specified, create that many upfront. else

	 *     it defaults to CONFIG_BLK_DEV_RAM_COUNT

	 * (2) User can further extend brd devices by create dev node themselves

	 *     and have kernel automatically instantiate actual device

	 *     on-demand. Example:

	 *		mknod /path/devnod_name b 1 X	# 1 is the rd major

	 *		fdisk -l /path/devnod_name

	 *	If (X / max_part) was not already created it will be created

	 *	dynamically.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ps3vram - Use extra PS3 video ram as block device.

 *

 * Copyright 2009 Sony Corporation

 *

 * Based on the MTD ps3vram driver, which is

 * Copyright (c) 2007-2008 Jim Paris <jim@jtan.com>

 * Added support RSX DMA Vivien Chappelier <vivien.chappelier@free.fr>

 XDR buffer (must be 1MiB aligned) */

 protecting list of bios */

 first DMA notifier handle */

 first DMA notifier offset */

 notifier used for completion report */

 asking the HV for a blit will kick the FIFO */

 asking the HV for a blit will kick the FIFO */

 DMA system RAM instance */

 DMA video RAM instance */

 DMA video RAM instance */

 DMA system RAM instance */

 fully associative check */

 choose a random entry */

 Copy from vram to buf */

 Copy from buf to vram */

 PS3 is ppc64, so we don't handle highmem */

 Allocate XDR buffer (1MiB aligned) */

 Put FIFO at begginning of XDR buffer */

 XXX: Need to open GPU, in case ps3fb or snd_ps3 aren't loaded */

 Request memory */

 Request context */

 Map XDR buffer to RSX */

/*

 * blkfront.c

 *

 * XenLinux virtual block device driver.

 *

 * Copyright (c) 2003-2004, Keir Fraser & Steve Hand

 * Modifications by Mark A. Williamson are (c) Intel Research Cambridge

 * Copyright (c) 2004, Christian Limpach

 * Copyright (c) 2004, Andrew Warfield

 * Copyright (c) 2005, Christopher Clark

 * Copyright (c) 2005, XenSource Ltd

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License version 2

 * as published by the Free Software Foundation; or, when distributed

 * separately from the Linux kernel or incorporated into other

 * software packages, subject to the following license:

 *

 * Permission is hereby granted, free of charge, to any person obtaining a copy

 * of this source file (the "Software"), to deal in the Software without

 * restriction, including without limitation the rights to use, copy, modify,

 * merge, publish, distribute, sublicense, and/or sell copies of the Software,

 * and to permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE

 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER

 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING

 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS

 * IN THE SOFTWARE.

/*

 * The minimal size of segment supported by the block framework is PAGE_SIZE.

 * When Linux is using a different page size than Xen, it may not be possible

 * to put all the data in a single segment.

 * This can happen when the backend doesn't support indirect descriptor and

 * therefore the maximum amount of data that a request can carry is

 * BLKIF_MAX_SEGMENTS_PER_REQUEST * XEN_PAGE_SIZE = 44KB

 *

 * Note that we only support one extra request. So the Linux page size

 * should be <= ( 2 * BLKIF_MAX_SEGMENTS_PER_REQUEST * XEN_PAGE_SIZE) =

 * 88KB.

	/*

	 * Id of the sibling if we ever need 2 requests when handling a

	 * block I/O request

/*

 * Maximum number of segments in indirect requests, the actual value used by

 * the frontend driver is the minimum of this value and the value provided

 * by the backend driver.

/*

 * Maximum order of pages to be used for the shared ring between front and

 * backend, 4KB page granularity is used.

/*

 * ring-ref%u i=(-1UL) would take 11 characters + 'ring-ref' is 8, so 19

 * characters are enough. Define to 20 to keep consistent with backend.

/*

 * queue-%u would take 7 + 10(UINT_MAX) = 17 characters.

/*

 *  Per-ring info.

 *  Every blkfront device can associate with one or more blkfront_ring_info,

 *  depending on how many hardware queues/rings to be used.

 Lock to protect data in every ring buffer. */

/*

 * We have one of these per vbd, whether ide, scsi or 'other'.  They

 * hang in private_data off the gendisk structure. We may end up

 * putting all kinds of interesting stuff here :-)

 Number of pages per ring buffer. */

 Number of 4KB segments handled */

 Save uncomplete reqs and bios for migration. */

 name in /dev */

/*

 * Grants are always the same size as a Xen page (i.e 4KB).

 * A physical segment is always the same size as a Linux page.

 * Number of grants per physical segment

 debug */

 Assign a gref to this page */

 Grant access to the GFN passed by the caller */

 Assign a gref to this page */

 Fetch a pre-allocated page to use for indirect grefs */

	/* We don't have real geometry info, but let's at least return

 Fill out a communications ring structure. */

 Copy the request to the ring page. */

 Only used when persistent grant is used and it's a read request */

 Convenient aliases */

	/*

	 * We always use the shadow of the first request to store the list

	 * of grant associated to the block I/O request. This made the

	 * completion more easy to handle even if the block I/O request is

	 * split.

		/*

		 * We are using the second request, setup grant_idx

		 * to be the index of the segment array.

	/*

	 * All the grants are stored in the shadow of the first

	 * request. Therefore we have to use the global index.

		/*

		 * this does not wipe data stored outside the

		 * range sg->offset..sg->offset+sg->length.

		 * Therefore, blkback *could* see data from

		 * previous requests. This is OK as long as

		 * persistent grants are shared with just one

		 * domain. It may need refactoring if this

		 * changes

	/*

	 * The second request is only present when the first request uses

	 * all its segments. It's always the continuity of the first one.

	/*

	 * Used to store if we are able to queue the request by just using

	 * existing persistent grants, or if we have to get new grants,

	 * as there are not sufficiently many free.

		/*

		 * If we are using indirect segments we need to account

		 * for the indirect grefs used in the request.

 Check if we have enough persistent grants to allocate a requests */

 Fill out a communications ring structure. */

 Calculate the number of grant used */

		/*

		 * The indirect operation can only be a BLKIF_OP_READ or

		 * BLKIF_OP_WRITE

			/*

			 * Ideally we can do an unordered flush-to-disk.

			 * In case the backend onlysupports barriers, use that.

			 * A barrier request a superset of FUA, so we can

			 * implement it the same way.  (It's also a FLUSH+FUA,

			 * since it is guaranteed ordered WRT previous writes.)

			/*

			 * Only the first request contains the scatter-gather

			 * list.

 Link the 2 requests together */

 Copy request(s) to the ring page. */

/*

 * Generate a Xen blkfront IO request from a blk layer request.  Reads

 * and writes are handled as expected.

 *

 * @req: a request struct

 Hard sector size and max sectors impersonate the equiv. hardware. */

 Each segment in a request is up to an aligned page in size. */

 Ensure a merged request will fit in a single I/O ring slot. */

 Make sure buffer addresses are sector-aligned. */

 this is above the extended range; something is wrong */

		/*

		 * When indirect descriptior is not supported, the I/O request

		 * will be split between multiple request in the ring.

		 * To avoid problems when sending the request, divide by

		 * 2 the depth of the queue.

 Already hold rinfo->ring_lock. */

	/*

	 * Remove indirect pages, this only happens when using indirect

	 * descriptors but not persistent grants

 Remove all persistent grants. */

		/*

		 * Clear persistent grants present in requests already

		 * on the shared ring

			/*

			 * If this is not an indirect operation don't try to

			 * free indirect segments

 No more gnttab callback work. */

 Flush gnttab callback work. Must be done with no locks held. */

 Free resources associated with old device channel. */

 Prevent new requests being issued until we fix things up. */

 No more blkif_request(). */

 Convenient aliases */

/*

 * Get the final status of the block request based on two ring response

 The I/O request may be split in two. */

 Keep the status of the current response in shadow. */

 Wait the second response if not yet here. */

		/*

		 * All the grants is stored in the first shadow in order

		 * to make the completion code simpler.

		/*

		 * The two responses may not come in order. Only the

		 * first request will store the scatter-gather list.

 Update "id" with the ID of the first response. */

		/*

		 * We don't need anymore the second request, so recycling

		 * it now.

 Add the persistent grant into the list of free grants */

			/*

			 * If the grant is still mapped by the backend (the

			 * backend has chosen to make this grant persistent)

			 * we add it at the head of the list, so it will be

			 * reused first.

			/*

			 * If the grant is not mapped by the backend we end the

			 * foreign access and add it to the tail of the list,

			 * so it will not be picked again unless we run out of

			 * persistent grants.

				/*

				 * Add the used indirect page back to the list of

				 * available pages for indirect grefs.

 Ensure we see queued responses up to 'rp'. */

		/*

		 * The backend has messed up and given us an id that we would

		 * never have given to it (we stamp it up to BLK_RING_SIZE -

		 * look in get_id_from_freelist.

			/*

			 * We may need to wait for an extra response if the

			 * I/O request is split in 2

/*

 * Write out per-ring/queue nodes including ring-ref and event-channel, and each

 * ring buffer may have multi pages depending on ->nr_ring_pages.

 Common code used when first setting up, and when resuming. */

 Create shared ring, alloc event channel. */

 We already got the number of queues/rings in _probe */

 Check if backend supports multiple queues. */

 We need at least one ring. */

 Enable the persistent grants feature. */

/*

 * Entry point to this code when a new device is created.  Allocate the basic

 * structures and the ring buffer for communication with the backend, and

 * inform the backend of the appropriate details for those.  Switch to

 * Initialised state.

 FIXME: Use dynamic device id if this is not set. */

 go looking in the extended area instead */

 no unplug has been done: do not hook devices != xen vbds */

 do not create a PV cdrom device if we are an HVM guest */

 Front end dir is a number, which is used as the id. */

 Reset limits changed by blk_mq_update_nr_hw_queues(). */

 Now safe for us to use the shared ring */

 Kick any other new requests queued since we resumed */

 Requeue pending requests (flush or discard) */

 Traverse the list of pending bios and re-queue them */

/*

 * We are reconnecting to the backend, due to a suspend/resume, or a backend

 * driver restart.  We tear down our blkif structure and recreate it, but

 * leave the device-layer structures intact so that this is transparent to the

 * rest of the kernel.

 Not in use? */

			/*

			 * Get the bios in the request so we can re-queue them.

				/*

				 * Flush operations don't contain bios, so

				 * we need to requeue the whole request

				 *

				 * XXX: but this doesn't make any sense for a

				 * write with the FUA flag set..

	/*

	 * We have to wait for the backend to switch to

	 * connected state, since we want to read which

	 * features it supports.

 No more blkif_request(). */

 No more gnttab callback work. */

 Flush gnttab callback work. Must be done with no locks held. */

			/*

			 * When an extra req is required, the maximum

			 * grants supported is related to the size of the

			 * Linux block segment.

		/*

		 * We are using indirect descriptors but not persistent

		 * grants, we need to allocate a set of pages that can be

		 * used for mapping indirect grefs

/*

 * Gather all backend feature-*

	/*

	 * If there's no "feature-barrier" defined, then it means

	 * we're dealing with a very old backend which writes

	 * synchronously; nothing to do.

	 *

	 * If there are barriers, then we use flush.

	/*

	 * And if there is "feature-flush-cache" use that above

	 * barriers.

/*

 * Invoked when the backend is finally 'ready' (and has told produced

 * the details about the physical device - #sectors, size, etc).

		/*

		 * Potentially, the back-end may be signalling

		 * a capacity change; update the capacity.

		/*

		 * If we are recovering from suspension, we need to wait

		 * for the backend to announce it's features before

		 * reconnecting, at least we need to know if the backend

		 * supports indirect descriptors, and how many.

	/*

	 * physical-sector-size is a newer field, so old backends may not

	 * provide this. Assume physical sector size to be the same as

	 * sector_size in that case.

 Kick pending requests. */

/*

 * Callback received when the backend's state changes.

		/*

		 * talk_to_blkback sets state to XenbusStateInitialised

		 * and blkfront_connect sets it to XenbusStateConnected

		 * (if connection went OK).

		 *

		 * If the backend (or toolstack) decides to poke at backend

		 * state (and re-trigger the watch by setting the state repeatedly

		 * to XenbusStateConnected (4)) we need to deal with this.

		 * This is allowed as this is used to communicate to the guest

		 * that the size of disk has changed!

/*

 *  linux/drivers/block/loop.c

 *

 *  Written by Theodore Ts'o, 3/29/93

 *

 * Copyright 1993 by Theodore Ts'o.  Redistribution of this file is

 * permitted under the GNU General Public License.

 *

 * DES encryption plus some minor changes by Werner Almesberger, 30-MAY-1993

 * more DES encryption plus IDEA encryption by Nicholas J. Leon, June 20, 1996

 *

 * Modularized and updated for 1.1.16 kernel - Mitch Dsouza 28th May 1994

 * Adapted for 1.3.59 kernel - Andries Brouwer, 1 Feb 1996

 *

 * Fixed do_loop_request() re-entrancy - Vincent.Renardias@waw.com Mar 20, 1997

 *

 * Added devfs support - Richard Gooch <rgooch@atnf.csiro.au> 16-Jan-1998

 *

 * Handle sparse backing files correctly - Kenn Humborg, Jun 28, 1998

 *

 * Loadable modules and other fixes by AK, 1998

 *

 * Make real block number available to downstream transfer functions, enables

 * CBC (and relatives) mode encryption requiring unique IVs per data block.

 * Reed H. Petty, rhp@draper.net

 *

 * Maximum number of loop devices now dynamic via max_loop module parameter.

 * Russell Kroll <rkroll@exploits.org> 19990701

 *

 * Maximum number of loop devices when compiled-in now selectable by passing

 * max_loop=<1-255> to the kernel on boot.

 * Erik I. Bols√∏, <eriki@himolde.no>, Oct 31, 1999

 *

 * Completely rewrite request handling to be make_request_fn style and

 * non blocking, pushing work to a helper thread. Lots of fixes from

 * Al Viro too.

 * Jens Axboe <axboe@suse.de>, Nov 2000

 *

 * Support up to 256 loop devices

 * Heinz Mauelshagen <mge@sistina.com>, Feb 2002

 *

 * Support for falling back on the write file operation when the address space

 * operations write_begin is not available on the backing filesystem.

 * Anton Altaparmakov, 16 Feb 2005

 *

 * Still To Fix:

 * - Advisory locking is ignored here.

 * - Should use an own CAP_* category instead of CAP_SYS_ADMIN

 *

/**

 * loop_global_lock_killable() - take locks for safe loop_validate_file() test

 *

 * @lo: struct loop_device

 * @global: true if @lo is about to bind another "struct loop_device", false otherwise

 *

 * Returns 0 on success, -EINTR otherwise.

 *

 * Since loop_validate_file() traverses on other "struct loop_device" if

 * is_loop_device() is true, we need a global lock for serializing concurrent

 * loop_configure()/loop_change_fd()/__loop_clr_fd() calls.

/**

 * loop_global_unlock() - release locks taken by loop_global_lock_killable()

 *

 * @lo: struct loop_device

 * @global: true if @lo was about to bind another "struct loop_device", false otherwise

 Compute loopsize in bytes */

 offset is beyond i_size, weird but possible */

	/*

	 * Unfortunately, if we want to do I/O on the device,

	 * the number of 512-byte sectors has to fit into a sector_t.

	/*

	 * We support direct I/O only if lo_offset is aligned with the

	 * logical I/O size of backing device, and the logical block

	 * size of loop is bigger than the backing device's.

	 *

	 * TODO: the above condition may be loosed in the future, and

	 * direct I/O may be switched runtime at that time because most

	 * of requests in sane applications should be PAGE_SIZE aligned

 flush dirty pages before changing direct IO */

	/*

	 * The flag of LO_FLAGS_DIRECT_IO is handled similarly with

	 * LO_FLAGS_READ_ONLY, both are set from kernel, and losetup

	 * will get updated by ioctl(LOOP_GET_STATUS)

/**

 * loop_set_size() - sets device size and notifies userspace

 * @lo: struct loop_device to set the size for

 * @size: new size of the loop device

 *

 * Callers must validate that the size passed into this function fits into

 * a sector_t, eg using loop_validate_size()

	/*

	 * We use fallocate to manipulate the space mappings used by the image

	 * a.k.a. discard/zerorange.

	/*

	 * Short READ - if we got some data, advance our request and

	 * retry it. If we got no data, end the rest with EIO.

		/*

		 * The bios of the request may be started from the middle of

		 * the 'bvec' because of bio splitting, so we can't directly

		 * copy bio->bi_iov_vec to new bvec. The rq_for_each_bvec

		 * API will take care of all details for us.

		/*

		 * Same here, this bio may be started from the middle of the

		 * 'bvec' because of bio splitting, so offset from the bvec

		 * must be passed to iov iterator

	/*

	 * lo_write_simple and lo_read_simple should have been covered

	 * by io submit style function like lo_rw_aio(), one blocker

	 * is that lo_read_simple() need to call flush_dcache_page after

	 * the page is written from kernel, and it isn't easy to handle

	 * this in io submit style function which submits all segments

	 * of the req at one time. And direct read IO doesn't need to

	 * run flush_dcache_page().

		/*

		 * If the caller doesn't want deallocation, call zeroout to

		 * write zeroes the range.  Otherwise, punch them out.

 Avoid recursion */

 Order wrt setting lo->lo_backing_file in loop_configure(). */

/*

 * loop_change_fd switched the backing store of a loopback device to

 * a new file. This is useful for operating system installers to free up

 * the original file and in High Availability environments to switch to

 * an alternative location for the content in case of server meltdown.

 * This can only work if the loop device is used read-only, and if the

 * new backing store is the same size and type as the old backing store.

 the loop device has to be read-only */

 size of the new backing store needs to be the same */

 and ... switch */

	/*

	 * Flush loop_validate_file() before fput(), for l->lo_backing_file

	 * might be pointing at old_file which might be the last reference.

	/*

	 * We must drop file reference outside of lo_mutex as dropping

	 * the file ref can take open_mutex which creates circular locking

	 * dependency.

 loop sysfs attributes */

	/*

	 * If the backing device is a block device, mirror its zeroing

	 * capability. Set the discard sectors to the block device's zeroing

	 * capabilities because loop discards result in blkdev_issue_zeroout(),

	 * not blkdev_issue_discard(). This maintains consistent behavior with

	 * file-backed loop devices: discarded regions read back as zero.

	/*

	 * We use punch hole to reclaim the free space used by the

	 * image a.k.a. discard.

	/*

	 * In the event we cannot allocate a worker, just queue on the

	 * rootcg worker and issue the I/O as the rootcg

		/*

		 * We need to remove from the idle list here while

		 * holding the lock so that the idle timer doesn't

		 * free the worker

 not all filesystems (e.g. tmpfs) have a sb->s_bdev */

/**

 * loop_set_status_from_info - configure device from loop_info

 * @lo: struct loop_device to configure

 * @info: struct loop_info64 to configure the device with

 *

 * Configures the loop device parameters according to the passed

 * in loop_info64 configuration.

 This is safe, since we have a reference from open(). */

	/*

	 * If we don't hold exclusive handle for the device, upgrade to it

	 * here to avoid changing device under exclusive owner.

 In case of direct I/O, match underlying block size */

 Order wrt reading lo_state in loop_validate_file(). */

 This is safe: open() is still holding a reference. */

	/*

	 * Flush loop_configure() and loop_change_fd(). It is acceptable for

	 * loop_validate_file() to succeed, for actual clear operation has not

	 * started yet.

	/*

	 * loop_validate_file() now fails because l->lo_state != Lo_bound

	 * became visible.

 freeze request queue during the transition */

 let user-space know about this change */

 This is safe: open() is still holding a reference. */

		/*

		 * open_mutex has been held already in release path, so don't

		 * acquire it if this function is called in such case.

		 *

		 * If the reread partition isn't from release path, lo_refcnt

		 * must be at least one and it can only become zero when the

		 * current holder is released.

 Device is gone, no point in returning error */

	/*

	 * lo->lo_state is set to Lo_unbound here after above partscan has

	 * finished.

	 *

	 * There cannot be anybody else entering __loop_clr_fd() as

	 * lo->lo_backing_file is already cleared and Lo_rundown state

	 * protects us from all the other places trying to change the 'lo'

	 * device.

	/*

	 * Need not hold lo_mutex to fput backing file. Calling fput holding

	 * lo_mutex triggers a circular lock dependency possibility warning as

	 * fput can take open_mutex which is usually taken before lo_mutex.

	/*

	 * If we've explicitly asked to tear down the loop device,

	 * and it has an elevated reference count, set it for auto-teardown when

	 * the last reference goes away. This stops $!~#$@ udev from

	 * preventing teardown because it decided that it needs to run blkid on

	 * the loopback device whenever they appear. xfstests is notorious for

	 * failing tests because blkid via udev races with a losetup

	 * <dev>/do something like mkfs/losetup -d <dev> causing the losetup -d

	 * command to fail with EBUSY.

 I/O need to be drained during transfer transition */

 If any pages were dirtied after invalidate_bdev(), try again */

 Mask out flags that can't be set using LOOP_SET_STATUS. */

 For those flags, use the previous values instead */

 For flags that can't be cleared, use previous values too */

 update dio if lo_offset or transfer is changed */

 Drop lo_mutex while we call into the filesystem. */

 error in case values were truncated */

 invalidate_bdev should have truncated all the pages */

		/*

		 * Legacy case - pass in a zeroed out struct loop_config with

		 * only the file descriptor set , which corresponds with the

		 * default parameters we'd have used otherwise.

 ioctl r/o */

 ioctl r/o */

 ioctl r/o */

 ioctl r/o */

 ioctl w/o */

 ioctl r/o */

 ioctl w/o */

/*

 * Transfer 32-bit compatibility structure in userspace to 64-bit loop info

 * - noinlined to reduce stack space usage in main part of driver

/*

 * Transfer 64-bit loop info to 32-bit compatibility structure in userspace

 * - noinlined to reduce stack space usage in main part of driver

 error in case values were truncated */

		/*

		 * In autoclear mode, stop the loop thread

		 * and remove configuration after last close.

		/*

		 * Otherwise keep thread (if running) and config,

		 * but flush possible ongoing bios in thread.

/*

 * And now the modules code and kernel interface.

 always use the first bio's css */

 complete non-aio request */

	/*

	 * We only add to the idle list if there are no pending cmds

	 * *and* the worker will not run again which ensures that it

	 * is safe to free any worker on the idle list

 allocate id, if @id >= 0, we're requesting that specific id */

	/*

	 * By default, we do buffer IO, so it doesn't make sense to enable

	 * merge because the I/O submitted to backing file is handled page by

	 * page. For directio mode, merge does help to dispatch bigger request

	 * to underlayer disk. We will enable merge once directio is enabled.

	/*

	 * Disable partition scanning by default. The in-kernel partition

	 * scanning can be requested individually per-device during its

	 * setup. Userspace can always add and remove partitions from all

	 * devices. The needed partition minors are allocated from the

	 * extended minor space, the main loop device numbers will continue

	 * to match the loop minors, regardless of the number of partitions

	 * used.

	 *

	 * If max_part is given, partition scanning is globally enabled for

	 * all loop devices. The minors for the main loop devices will be

	 * multiples of max_part.

	 *

	 * Note: Global-for-all-devices, set-only-at-init, read-only module

	 * parameteters like 'max_loop' and 'max_part' make things needlessly

	 * complicated, are too static, inflexible and may surprise

	 * userspace tools. Parameters like this in general should be avoided.

 Make this loop device reachable from pathname. */

 Show this loop device. */

 Make this loop device unreachable from pathname. */

 There is no route which can find this loop device. */

 Hide this loop device for serialization. */

 Check whether this loop device can be removed. */

 Mark this loop device no longer open()-able. */

 Show this loop device again. */

 Hitting a race results in creating a new loop device which is harmless. */

		/*

		 * Adjust max_part according to part_shift as it is exported

		 * to user space so that user can decide correct minor number

		 * if [s]he want to create more devices.

		 *

		 * Note that -1 is required because partition 0 is reserved

		 * for the whole disk.

	/*

	 * If max_loop is specified, create that many devices upfront.

	 * This also becomes a hard limit. If max_loop is not specified,

	 * create CONFIG_BLK_DEV_LOOP_MIN_COUNT loop devices at module

	 * init time. Loop devices can be requested on-demand with the

	 * /dev/loop-control interface, or be instantiated by accessing

	 * a 'dead' device node.

 pre-create number of devices given by config or max_loop */

	/*

	 * There is no need to use loop_ctl_mutex here, for nobody else can

	 * access loop_index_idr when this module is unloading (unless forced

	 * module unloading is requested). If this is not a clean unloading,

	 * we have no means to avoid kernel crash.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PS3 Disk Storage Driver

 *

 * Copyright (C) 2007 Sony Computer Entertainment Inc.

 * Copyright 2007 Sony Corp.

 Request queue spinlock */

 memory -> device */

 device -> memory */

 ATA helpers copied from drivers/ata/libata-core.c */

 __BIG_ENDIAN */

 All we're interested in are raw capacity and model name */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for SWIM (Sander Woz Integrated Machine) floppy controller

 *

 * Copyright (C) 2004,2008 Laurent Vivier <Laurent@lvivier.info>

 *

 * based on Alastair Bridgewater SWIM analysis, 2001

 * based on SWIM3 driver (c) Paul Mackerras, 1996

 * based on netBSD IWM driver (c) 1997, 1998 Hauke Fath.

 *

 * 2004-08-21 (lv) - Initial implementation

 * 2008-10-30 (lv) - Port to 2.6

 IWM registers */

 bits in phase register */

 Select values for swim_select and swim_readbit */

 Bits in handshake register */

 bits in setup register */

 bits in mode register */

----------------------------------------------------------------------------*/

 physical properties */

 internal or external drive */

 single- or double-sided drive */

 media */

 in-use information */

 parent controller */

 clear drive 1 bit */

 set drive 0 bit */

 clear drive 0 bit */

 set drive 1 bit */

 wait drive is ready */

 found */

 no testing   */

 360KB SS 3.5"*/

 720KB 3.5"   */

 1.44MB 3.5"  */

 High-Density media */

 double-sided */

 scan floppy drives */

 register floppy drives */

 probe device */

 set platform driver data */

 eject floppies */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

   drbd_receiver.c



   This file is part of DRBD by Philipp Reisner and Lars Ellenberg.



   Copyright (C) 2001-2008, LINBIT Information Technologies GmbH.

   Copyright (C) 1999-2008, Philipp Reisner <philipp.reisner@linbit.com>.

   Copyright (C) 2002-2008, Lars Ellenberg <lars.ellenberg@linbit.com>.



/*

 * some helper functions to deal with single linked page lists,

 * page->private being our "next" pointer.

/* If at least n pages are linked at head, get n pages off.

 * Otherwise, don't modify head, and return NULL.

 * Locking is the responsibility of the caller.

 found sufficient pages */

 insufficient pages, don't use any of them. */

 add end of list marker for the returned list */

 actual return value, and adjustment of head */

/* may be used outside of locks to find the tail of a (usually short)

 * "private" page chain, before adding it back to a global chain head

 add chain to head */

	/* Yes, testing drbd_pp_vacant outside the lock is racy.

	/* GFP_TRY, because we must not cause arbitrary write-out: in a DRBD

	 * "criss-cross" setup, that might cause write-out on some other DRBD,

	/* Not enough pages immediately available this time.

	 * No need to jump around here, drbd_alloc_pages will retry this

	/* The EEs are always appended to the end of the list. Since

	   they are sent in order over the wire, they have to finish

	   in order. As soon as we see the first not finished we can

/**

 * drbd_alloc_pages() - Returns @number pages, retries forever (or until signalled)

 * @peer_device:	DRBD device.

 * @number:		number of pages requested

 * @retry:		whether to retry, if not enough pages are available right now

 *

 * Tries to allocate number pages, first from our own page pool, then from

 * the kernel.

 * Possibly retry until DRBD frees sufficient pages somewhere else.

 *

 * If this allocation would exceed the max_buffers setting, we throttle

 * allocation (schedule_timeout) to give the system some room to breathe.

 *

 * We do not use max-buffers as hard limit, because it could lead to

 * congestion and further to a distributed deadlock during online-verify or

 * (checksum based) resync, if the max-buffers, socket buffer sizes and

 * resync-rate settings are mis-configured.

 *

 * Returns a page chain linked via page->private.

	/* Try to keep the fast path fast, but occasionally we need

/* Must not be used from irq, as that may deadlock: see drbd_alloc_pages.

 * Is also used from inside an other spin_lock_irq(&resource->req_lock);

 * Either links the page chain back to the global pool,

/*

You need to hold the req_lock:

 _drbd_wait_ee_list_empty()



You must not have the req_lock:

 drbd_free_peer_req()

 drbd_alloc_peer_req()

 drbd_free_peer_reqs()

 drbd_ee_fix_bhs()

 drbd_finish_peer_reqs()

 drbd_clear_done_ee()

 drbd_wait_ee_list_empty()

/* normal: payload_size == request size (bi_size)

 * w_same: payload_size == logical_block_size

	/*

	 * The block_id is opaque to the receiver.  It is not endianness

	 * converted, and sent back to the sender unchanged.

/*

 * See also comments in _req_mod(,BARRIER_ACKED) and receive_Barrier.

	/* possible callbacks here:

	 * e_end_block, and e_end_resync_block, e_send_superseded.

	 * all ignore the last argument.

 list_del not necessary, next/prev members not touched */

	/* avoids spin_lock/unlock

/* quoting tcp(7):

 *   On individual connections, the socket buffer size must be set prior to the

 *   listen(2) or connect(2) calls in order to have it take effect.

 * This is our wrapper to do so.

 open coded SO_SNDBUF, SO_RCVBUF */

 AF_INET & AF_SCI */

       /* explicitly bind to the configured IP as source IP

	*  for the outgoing connections.

	*  This is needed for multihomed hosts and to be

	*  able to use lo: interfaces for drbd.

	* Make sure to use 0 as port number, so linux selects

	*  a free one dynamically.

	/* connect may fail, peer not yet available.

 timeout, busy, signal pending */

 peer not (yet) available, network problem */

 SO_REUSEADDR */

 28.5% random jitter */

/**

 * drbd_socket_okay() - Free the socket if its connection is not okay

 * @sock:	pointer to the pointer to the socket.

/* Gets called if a connection is established, or if a new minor gets created

 just start it here. */

/*

 * return values:

 *   1 yes, we have a valid connection

 *   0 oops, did not work out, please try again

 *  -1 peer talks different language,

 *     no point in trying again, please go standalone.

 *  -2 We do not have a network config...

 Assume that the peer only understands protocol 80 until we know better.  */

 SO_REUSEADDR */

 SO_REUSEADDR */

	/* NOT YET ...

	 * sock.socket->sk->sk_sndtimeo = connection->net_conf->timeout*HZ/10;

	 * sock.socket->sk->sk_rcvtimeo = MAX_SCHEDULE_TIMEOUT;

	 * first set it to the P_CONNECTION_FEATURES timeout,

	/* we don't want delays.

 drbd_request_state(device, NS(conn, WFAuth)); */

	/* Prevent a race between resync-handshake and

	 * being promoted to Primary.

	 *

	 * Grab and release the state mutex, so we know that any current

	 * drbd_set_role() is finished, and any incoming drbd_set_role

	 * will see the STATE_SENT flag, and wait for it to be cleared.

 avoid a race with conn_request_state( C_DISCONNECTING ) */

	/* opencoded create_singlethread_workqueue(),

	/* The discard_my_data flag is a single-shot modifier to the next

	 * connection attempt, the handshake of which is now well underway.

	 * No need for rcu style copying of the whole struct

 else: maybe just schedule() ?? */

		/* If we have nothing in the receive buffer now, to reduce

		 * application latency, try to drain the backend queues as

		 * quickly as possible, and let remote TCP know what we have

/* This is blkdev_issue_flush, but asynchronous.

 * We want to submit to all component volumes in parallel,

 * then wait for all completions.

		/* FIXME: what else can I do now?  disconnecting or detaching

		 * really does not help to improve the state of the world, either.

		/* Do we want to add a timeout,

			/* would rather check on EOPNOTSUPP, but that is not reliable.

			 * don't try again for ANY return value != 0

 Any error is already reported by bio_endio callback. */

/**

 * drbd_may_finish_epoch() - Applies an epoch_event to the epoch's state, eventually finishes it.

 * @connection:	DRBD connection.

 * @epoch:	Epoch object.

 * @ev:		Epoch event.

 nothing to do*/

			/* FIXME: dec unacked on connection, once we have

 atomic_set(&epoch->active, 0); is already zero */

/*

 * drbd_bump_write_ordering() - Fall back to an other write ordering method

 * @wo:		Write ordering method to try.

/*

 * Mapping "discard" to ZEROOUT with UNMAP does not work for us:

 * Drivers have to "announce" q->limits.max_write_zeroes_sectors, or it

 * will directly go to fallback mode, submitting normal writes, and

 * never even try to UNMAP.

 *

 * And dm-thin does not do this (yet), mostly because in general it has

 * to assume that "skip_block_zeroing" is set.  See also:

 * https://www.mail-archive.com/dm-devel%40redhat.com/msg07965.html

 * https://www.redhat.com/archives/dm-devel/2018-January/msg00271.html

 *

 * We *may* ignore the discard-zeroes-data setting, if so configured.

 *

 * Assumption is that this "discard_zeroes_data=0" is only because the backend

 * may ignore partial unaligned discards.

 *

 * LVM/DM thin as of at least

 *   LVM version:     2.02.115(2)-RHEL7 (2015-01-28)

 *   Library version: 1.02.93-RHEL7 (2015-01-28)

 *   Driver version:  4.29.0

 * still behaves this way.

 *

 * For unaligned (wrt. alignment and granularity) or too small discards,

 * we zero-out the initial (and/or) trailing unaligned partial chunks,

 * but discard all the aligned full chunks.

 *

 * At least for LVM/DM thin, with skip_block_zeroing=false,

 * the result is effectively "discard_zeroes_data=1".

 flags: EE_TRIM|EE_ZEROOUT */

 Zero-sector (unknown) and one-sector granularities are the same.  */

 start + gran - (start + gran - align) % gran */

		/* don't flag BLKDEV_ZERO_NOUNMAP, we don't know how many

		/* max_discard_sectors is unsigned int (and a multiple of

		 * granularity, we made sure of that above already);

		 * nr is < max_discard_sectors;

	/* If the backend cannot discard, or does not guarantee

	 * read-back zeroes in discarded ranges, we fall back to

	 * zero-out.  Unless configuration specifically requested

/*

 * drbd_submit_peer_request()

 * @device:	DRBD device.

 * @peer_req:	peer request

 *

 * May spread the pages to multiple bios,

 * depending on bio_add_page restrictions.

 *

 * Returns 0 if all bios have been submitted,

 * -ENOMEM if we could not allocate enough bios,

 * -ENOSPC (any better suggestion?) if we have not been able to bio_add_page a

 *  single page to an empty bio (which should never happen and likely indicates

 *  that the lower level IO stack is in some way broken). This has been observed

 *  on certain Xen deployments.

 TODO allocate from our own bio_set. */

	/* TRIM/DISCARD: for now, always use the helper function

	 * blkdev_issue_zeroout(..., discard=true).

	 * It's synchronous, but it does the right thing wrt. bio splitting.

	 * Correctness first, performance later.  Next step is to code an

	 * asynchronous variant of the same.

		/* wait for all pending IO completions, before we start

		/* add it to the active list now,

		/* If this was a resync request from receive_rs_deallocated(),

 EE_WRITE_SAME */

	/* In most cases, we will only need one bio.  But in case the lower

	 * level restrictions happen to be different at this offset on this

	 * side than those of the sending peer, we may need to submit the

	 * request in more than one bio.

	 *

	 * Plain bio_alloc is good enough here, this is no DRBD internally

	 * generated bio, but a bio allocated on behalf of the peer.

 > peer_req->i.sector, unless this is the first bio */

 for debugfs: update timestamp, mark as submitted */

 Wake up any processes waiting for this peer request to complete.  */

	/* FIXME these are unacked on connection,

	 * not a specific (peer)device.

	/* P_BARRIER_ACK may imply that the corresponding extent is dropped from

	 * the activity log, which means it would not be resynced in case the

	 * R_PRIMARY crashes now.

	 * Therefore we must send the barrier_ack after the barrier request was

		/* receiver context, in the writeout path of the other node.

 The current_epoch got recycled while we allocated this one... */

 quick wrapper in case payload size != request_size (write same) */

/* used from receive_RSDataReply (recv_resync_read)

 * and from receive_Data.

 * data_size: actual payload ("data in")

 * 	for normal writes that is bi_size.

 * 	for discards, that is zero.

 * 	for write same, it is logical_block_size.

 * both trim and write same have the bi_size ("data len to be affected")

 * as extra argument in the packet header.

		/*

		 * FIXME: Receive the incoming digest into the receive buffer

		 *	  here, together with its struct p_data?

 assume request_size == data_size, but special case trim and wsame. */

	/* even though we trust out peer,

	/* GFP_NOIO, because we must not cause arbitrary write-out: in a DRBD

	 * "criss-cross" setup, that might cause write-out on some other DRBD,

 receive payload size bytes into page chain */

/* drbd_drain_block() just takes a data block

 * out of the socket input buffer, and discards it.

	/* optimistically update recv_cnt.  if receiving fails below,

/*

 * e_end_resync_block() is called in ack_sender context via

 * drbd_finish_peer_reqs().

 Record failure to sync */

	/* corresponding dec_unacked() in e_end_resync_block()

 don't care for the reason here */

 Request object according to our peer */

	/* hlist_del(&req->collision) is done in _req_may_be_done, to avoid

	 * special casing it there for the various failure cases.

	/* else: nothing. handled from drbd_disconnect...

	 * I don't think we may complete this just yet

		/* data is submitted to disk within recv_resync_read.

		 * corresponding put_ldev done below on error,

		/* as it is RQ_POSTPONED, this will cause it to

/*

 * e_end_block() is called in ack_sender context via drbd_finish_peer_reqs().

			/* we expect it to be marked out of sync anyways...

	/* we delete from the conflict detection hash _after_ we sent out the

	/*

	 * We assume 32-bit wrap-around here.

	 * For 24-bit wrap-around, we would have to shift:

	 *  a <<= 8; b <<= 8;

 wake up only if we actually changed device->peer_seq */

 maybe change sync_ee into interval trees as well? */

/* Called from receive_Data.

 * Synchronize packets on sock with packets on msock.

 *

 * This is here so even when a P_DATA packet traveling via sock overtook an Ack

 * packet traveling on msock, they are still processed in the order they have

 * been sent.

 *

 * Note: we don't care for Ack packets overtaking P_DATA packets.

 *

 * In case packet_seq is larger than device->peer_seq number, there are

 * outstanding packets on the msock. We wait for them to arrive.

 * In case we are the logically next packet, we update device->peer_seq

 * ourselves. Correctly handles 32bit wrap around.

 *

 * Assume we have a 10 GBit connection, that is about 1<<30 byte per second,

 * about 1<<21 sectors per second. So "worst" case, we have 1<<3 == 8 seconds

 * for the 24bit wrap (historical atomic_t guarantee on some archs), and we have

 * 1<<9 == 512 seconds aka ages for the 32bit wrap around...

 *

 * returns 0 if we may process the packet,

 Only need to wait if two_primaries is enabled */

/* see also bio_flags_to_wire()

 * DRBD_REQ_*, because we need to semantically map the flags to data packet

	/*

	 * Inserting the peer request into the write_requests tree will prevent

	 * new conflicting local requests from being added.

			/*

			 * Our peer has sent a conflicting remote request; this

			 * should not happen in a two-node setup.  Wait for the

			 * earlier peer request to complete.

			/*

			 * If the peer request is fully contained within the

			 * overlapping request, it can be considered overwritten

			 * and thus superseded; otherwise, it will be retried

			 * once all overlapping requests have completed.

				/*

				 * Wait for the node with the discard flag to

				 * decide if this request has been superseded

				 * or needs to be retried.

				 * Requests that have been superseded will

				 * disappear from the write_requests tree.

				 *

				 * In addition, wait for the conflicting

				 * request to finish locally before submitting

				 * the conflicting peer request.

			/*

			 * Remember to restart the conflicting requests after

			 * the new peer request has completed.

 mirrored write */

	/*

	 * Corresponding put_ldev done either below (on various errors), or in

	 * drbd_peer_request_endio, if we successfully submit the data at the

	 * end of this function.

		/* need to play safe: an older DRBD sender

 Do (not) pass down BLKDEV_ZERO_NOUNMAP? */

		/* corresponding dec_unacked() in e_end_block()

		/* I really don't like it that the receiver thread

 two primaries implies protocol C */

	/* TRIM and WRITE_SAME are processed synchronously,

	 * we wait for all pending requests, respectively wait for

	 * active_ee to become empty in drbd_submit_peer_request();

 In case we have the only disk of the cluster, */

 don't care for the reason here */

/* We may throttle resync, if the lower device seems to be busy,

 * and current sync rate is above c_min_rate.

 *

 * To decide whether or not the lower device is busy, we use a scheme similar

 * to MD RAID is_mddev_idle(): if the partition stats reveal "significant"

 * (more than 64 sectors) of activity we cannot account for with our own resync

 * activity, it obviously is "busy".

 *

 * The current sync rate used here uses only the most recent two step marks,

 * to have a short time average so we can react faster.

		/* Do not slow down if app IO is already waiting for this extent,

 feature disabled? */

		/* sync speed average over the last 2*DRBD_SYNC_MARK_STEP,

 drain possibly payload */

	/* GFP_NOIO, because we must not cause arbitrary write-out: in a DRBD

	 * "criss-cross" setup, that might cause write-out on some other DRBD,

 application IO, don't drbd_rs_begin_io */

		/* If at some point in the future we have a smart way to

		   find out if this data block is completely deallocated,

		   then we would do something smarter here than reading

 used in the sector offset progress display */

 used in the sector offset progress display */

 remember to report stats in drbd_resync_finished */

 track progress, we may need to throttle */

			/* drbd_rs_begin_io done when we sent this request,

	/* Throttle, drbd_rs_begin_io and submit should become asynchronous

	 * wrt the receiver, but it is not as straightforward as it may seem.

	 * Various places in the resync start and stop logic assume resync

	 * requests are processed in order, requeuing this on the worker thread

	 * introduces a bunch of new code for synchronization between threads.

	 *

	 * Unlimited throttling before drbd_rs_begin_io may stall the resync

	 * "forever", throttling after drbd_rs_begin_io will lock that extent

	 * for application writes for the same time.  For now, just throttle

	 * here, where the rest of the code expects the receiver to sleep for

	 * a while, anyways.

	/* Throttle before drbd_rs_begin_io, as that locks out application IO;

	 * this defers syncer requests for some time, before letting at least

	 * on request through.  The resync controller on the receiving side

	 * will adapt to the incoming rate accordingly.

	 *

	 * We cannot throttle here if remote is Primary/SyncTarget:

	 * we would also throttle its application reads.

	 * In that case, throttling is done on the SyncTarget only.

	/* Even though this may be a resync request, we do add to "read_ee";

	 * "sync_ee" is only used for resync WRITEs.

	 * Add to list early, so debugfs can find this request

 don't care for the reason here */

 no drbd_rs_complete_io(), we are dropping the connection anyways */

/*

 * drbd_asb_recover_0p  -  Recover after split-brain with no remaining primaries

 to one of the other strategies */

 Else fall through to one of the other strategies... */

 ( ch_self == ch_peer ) */

 Well, then use something else. */

/*

 * drbd_asb_recover_1p  -  Recover after split-brain with one remaining primary

			 /* drbd_change_state() does not sleep while in SS_IN_TRANSIENT_STATE,

			  * we might be here in C_WF_REPORT_PARAMS which is transient.

/*

 * drbd_asb_recover_2p  -  Recover after split-brain with two remaining primaries

			 /* drbd_change_state() does not sleep while in SS_IN_TRANSIENT_STATE,

			  * we might be here in C_WF_REPORT_PARAMS which is transient.

/*

  100	after split brain try auto recover

    2	C_SYNC_SOURCE set BitMap

    1	C_SYNC_SOURCE use BitMap

    0	no Sync

   -1	C_SYNC_TARGET use BitMap

   -2	C_SYNC_TARGET set BitMap

 -100	after split brain, disconnect

-1000	unrelated data

-1091   requires proto 91

-1096   requires proto 96

 roles at crash time */

 Common power [off|failure] */

		/* lowest bit is set when we were primary,

		/* Neither has the "crashed primary" flag set,

		/* Current UUID equal and no bitmap uuid; does not necessarily

		 * mean this was a "simultaneous hard crash", maybe IO was

		 * frozen, so no UUID-bump happened.

		 * This is a protocol change, overload DRBD_FF_WSAME as flag

				/* At least one has the "crashed primary" bit set,

				 * both are primary now, but neither has rotated its UUIDs?

		/* Both are secondary.

		 * Really looks like recovery from simultaneous hard crash.

 !self_pri && !peer_pri */ return 0; 
  self_pri && !peer_pri */ return 1;

 !self_pri &&  peer_pri */ return -1;

  self_pri &&  peer_pri */

			/* The last P_SYNC_UUID did not get though. Undo the last start of

			/* The last P_SYNC_UUID did not get though. Undo the last start of

/* drbd_sync_handshake() returns the new conn state on success, or

   CONN_MASK (-1) on failure.

		/* FIXME this log message is not correct if we end up here

		 * after an attempted attach on a diskless node.

		 * We just refuse to attach -- well, we drop the "connection"

 by intention we do not use mydisk here. */

 become sync source. */

 become sync target */

 ASB_DISCARD_REMOTE - ASB_DISCARD_LOCAL is valid */

 any other things with ASB_DISCARD_REMOTE or ASB_DISCARD_LOCAL are invalid */

 everything else is valid if they are equal on both sides. */

		/*

		 * We can only change the peer data integrity algorithm

		 * here.  Changing our own data integrity algorithm

		 * requires that we send a P_PROTOCOL_UPDATE packet at

		 * the same time; otherwise, the peer has no way to

		 * tell between which packets the algorithm should

		 * change.

/* helper function

 * input: alg name, feature name

 * return: NULL (alg name was "")

 *         ERR_PTR(error) if something goes wrong

/*

 * config_unknown_volume  -  device configuration command for unknown volume

 *

 * When a device is added to an existing connection, the node on which the

 * device is added first will send configuration commands to its peer but the

 * peer will not know about the device yet.  It will warn and ignore these

 * commands.  Once the device is added on the second node, the second node will

 * send the same device configuration commands, but in the other direction.

 *

 * (We can also end up here if drbd is misconfigured.)

 apv >= 95 */ sizeof(struct p_rs_param_95);

 initialize verify_alg and csums_alg */

 we expect NUL terminated string */

 but just in case someone tries to be evil */

 apv >= 89 */ {

 we still expect NUL terminated strings */

 but just in case someone tries to be evil */

	/* just for completeness: actually not needed,

 but free the verify_tfm again, if csums_tfm did not work out */

 warn if the arguments differ by more than 12.5% */

 local disk size changed */

	/* just store the peer's disk size for now.

		/* if this is the first connect, or an otherwise expected

		/* Never shrink a device with usable data during connect,

		 * or "attach" on the peer.

	/* Leave drbd_reconsider_queue_parameters() before drbd_determine_dev_size().

	   In case we cleared the QUEUE_FLAG_DISCARD from our queue in

	   drbd_reconsider_queue_parameters(), we can be sure that after

		/*

		 * I am diskless, need to accept the peer's *current* size.

		 * I must NOT accept the peers backing disk size,

		 * it may have been larger than mine all along...

		 *

		 * At this point, the peer knows more about my disk, or at

		 * least about what we last agreed upon, than myself.

		 * So if his c_size is less than his d_size, the most likely

		 * reason is that *my* d_size was smaller last time we checked.

		 *

		 * However, if he sends a zero current size,

		 * take his (user-capped or) backing disk size anyways.

		 *

		 * Unless of course he does not have a disk himself.

		 * In which case we ignore this completely.

 Ignore, peer does not know nothing. */

 nothing to do */

			/* I believe the peer, if

			 *  - I don't have a current size myself

			 *  - we agree on the size anyways

			 *  - I do have a current size, am Secondary,

			 *    and he has the only disk

			 *  - I do have a current size, am Primary,

			 *    and he has the only disk,

			 *    which is larger than my current size

			/* we have different sizes, probably peer

		/* I am a diskless primary, the peer just created a new current UUID

	/* Before we test for the disk state, we should wait until an eventually

	   ongoing cluster wide state change is finished. That is important if

	   we are primary and are detaching from our disk. We need to see the

/**

 * convert_state() - Converts the peer's view of the cluster state to our point of view

 * @ps:		The state as seen by the peer.

 C_NETWORK_FAILURE, */

	/* If some other part of the code (ack_receiver thread, timeout)

	 * already decided to close the connection again,

	/* If this is the "end of sync" confirmation, usually the peer disk

	 * transitions from D_INCONSISTENT to D_UP_TO_DATE. For empty (0 bits

	 * set) resync started in PausedSyncT, or if the timing of pause-/

	 * unpause-sync events has been "just right", the peer disk may

	 * transition from D_CONSISTENT to D_UP_TO_DATE as well.

		/* If we are (becoming) SyncSource, but peer is still in sync

		 * preparation, ignore its uptodate-ness to avoid flapping, it

		 * will change to inconsistent once the peer reaches active

		 * syncing states.

		 * It may have changed syncer-paused flags, however, so we

		/* if peer_state changes to connected at the same time,

		 * it explicitly notifies us that it finished resync.

 explicit verify finished notification, stop sector reached. */

	/* peer says his disk is inconsistent, while we think it is uptodate,

	 * and this happens while the peer still thinks we have a sync going on,

	 * but we think we are already done with the sync.

	 * We ignore this to avoid flapping pdsk.

	/* TODO:

	 * if (primary and diskless and peer uuid != effective uuid)

	 *     abort attach on peer;

	 *

	 * If this node does not have good data, was already connected, but

	 * the peer did a late attach only now, trying to "negotiate" with me,

	 * AND I am currently Primary, possibly frozen, with some specific

	 * "effective" uuid, this should never be reached, really, because

	 * we first send the uuids, then the current state.

	 *

	 * In this scenario, we already dropped the connection hard

	 * when we received the unsuitable uuids (receive_uuids().

	 *

	 * Should we want to change this, that is: not drop the connection in

	 * receive_uuids() already, then we would need to add a branch here

	 * that aborts the attach of "unsuitable uuids" on the peer in case

	 * this node is currently Diskless Primary.

 consider resync */

 if we established a new connection */

		/* if we had an established connection

		/* if we have both been inconsistent, and the peer has been

		/* if we had been plain connected, and the admin requested to

		/* Do not allow tl_restart(RESEND) for a rebooted peer. We can only allow this

 we want resync, peer has not yet decided to sync... */

			/* Nowadays only used when forcing a node into primary role and

 update connected indicator, la_size_sect, ... */

 D_ASSERT(device,  device->state.conn == C_WF_SYNC_UUID ); */

	/* Here the _drbd_uuid_ functions are right, current should

/*

 * receive_bitmap_plain

 *

 * Return 0 when done, 1 when another iteration is needed, and a negative error

 * code upon failure.

/*

 * recv_bm_rle_bits

 *

 * Return 0 when done, 1 when another iteration is needed, and a negative error

 * code upon failure.

 if we consumed all 64 bits, assign 0; >> 64 is "undefined"; */

/*

 * decode_bitmap_c

 *

 * Return 0 when done, 1 when another iteration is needed, and a negative error

 * code upon failure.

	/* other variants had been implemented for evaluation,

	 * but have been dropped as this one turned out to be "best"

 what would it take to transfer it "plaintext" */

 total can not be zero. but just in case: */

 don't report if not compressed */

 total < plain. check for overflow, still */

/* Since we are processing the bitfield from lower addresses to higher,

   it does not matter if the process it in 32 bit chunks or 64 bit

   chunks as long as it is little endian. (Understand it as byte stream,

   beginning with the lowest byte...) If we would use big endian

   we would need to process it from the highest address to the lowest,

   in order to be agnostic to the 32 vs 64 bits issue.



	/* you are supposed to send additional out-of-sync information

			/* MAYBE: sanity check that we speak proto >= 90,

 Omit CS_ORDERED with this state transition to avoid deadlocks. */

		/* admin may have requested C_DISCONNECTING,

	/* Make sure we've acked all the TCP data associated

		/* No put_ldev() here. Gets called in drbd_endio_write_sec_final(),

 sub header size */

	/* We are about to start the cleanup after connection loss.

	 * Make sure drbd_make_request knows about that.

	 * Usually we should be in some network failure state already,

	 * but just in case we are not, we fix it up here.

 ack_receiver does not clean up anything. it must not interfere, either */

 ok, no more ee's on the fly, it is safe to reset the epoch_size */

 wait for current activity to cease. */

	/* We do not have data structures that would allow us to

	 * get the rs_pending_cnt down to 0 again.

	 *  * On C_SYNC_TARGET we do not have any data structures describing

	 *    the pending RSDataRequest's we have sent.

	 *  * On C_SYNC_SOURCE there is no data structure that tracks

	 *    the P_RS_DATA_REPLY blocks that we sent to the SyncTarget.

	 *  And no, it is not the sum of the reference counts in the

	 *  resync_LRU. The resync_LRU tracks the whole operation including

	 *  the disk-IO, while the rs_pending_cnt only tracks the blocks

	/* wait for all w_e_end_data_req, w_e_end_rsdata_req, w_send_barrier,

	 * w_make_resync_request etc. which may still be on the worker queue

	/* This second workqueue flush is necessary, since drbd_finish_peer_reqs()

	   might have issued a work again. The one before drbd_finish_peer_reqs() is

	/* need to do it again, drbd_finish_peer_reqs() may have populated it

	/* tcp_close and release of sendpage pages can be deferred.  I don't

	 * want to use SO_LINGER, because apparently it can be deferred for

	 * more than 20 seconds (longest time I checked).

	 *

	 * Actually we don't care for exactly when the network stack does its

	 * put_page(), but release our reference on these pages right here.

/*

 * We support PRO_VERSION_MIN to PRO_VERSION_MAX. The protocol version

 * we can agree on is stored in agreed_pro_version.

 *

 * feature flags and the reserved array should be enough room for future

 * enhancements of the handshake protocol, and possible plugins...

 *

 * for now, they are expected to be zero, but ignored.

/*

 * return values:

 *   1 yes, we have a valid connection

 *   0 oops, did not work out, please try again

 *  -1 peer talks different language,

 *     no point in trying again, please go standalone.

 ASSERT current == connection->receiver ... */

/* Return value:

	1 - auth succeeded,

	0 - failed, try again (network error),

	-1 - auth failed, don't try again.

 64 Bytes... */

 64 byte */

 FIXME: Put the challenge/response into the preallocated socket buffer.  */

 ********* acknowledge sender ******** */

 restore idle timeout */

 rs_same_csums is supposed to count in units of BM_BLOCK_SIZE */

		/* Protocol A has no P_WRITE_ACKs, but has P_NEG_ACKs.

		   The master bio might already be completed, therefore the

		/* In Protocol B we might already have got a P_RECV_ACK

 let's advance progress step marks only for every other megabyte */

		/* Note:

		 * -EINTR	 (on meta) we got a signal

		 * -EAGAIN	 (on meta) rcvtimeo expired

		 * -ECONNRESET	 other side closed the connection

		 * -ERESTARTSYS  (on data) we got a signal

		 * rv <  0	 other than above: unexpected error!

		 * rv == expected: full header or command

		 * rv <  expected: "woken" by signal during receive

		 * rv == 0	 : "connection shut down by peer"

			/* If the data socket received something meanwhile,

			/* maybe drbd_thread_stop(): the while condition will notice.

			 * maybe woken for send_ping: we'll send a ping above,

	/* get is in drbd_endio_write_sec_final(). That is necessary to keep the

 SPDX-License-Identifier: GPL-2.0-or-later

/*

   drbd_bitmap.c



   This file is part of DRBD by Philipp Reisner and Lars Ellenberg.



   Copyright (C) 2004-2008, LINBIT Information Technologies GmbH.

   Copyright (C) 2004-2008, Philipp Reisner <philipp.reisner@linbit.com>.

   Copyright (C) 2004-2008, Lars Ellenberg <lars.ellenberg@linbit.com>.



/* OPAQUE outside this file!

 * interface defined in drbd_int.h



 * convention:

 * function name drbd_bm_... => used elsewhere, "public".

 * function name      bm_... => internal to implementation, "private".

/*

 * LIMITATIONS:

 * We want to support >= peta byte of backend storage, while for now still using

 * a granularity of one bit per 4KiB of storage.

 * 1 << 50		bytes backend storage (1 PiB)

 * 1 << (50 - 12)	bits needed

 *	38 --> we need u64 to index and count bits

 * 1 << (38 - 3)	bitmap bytes needed

 *	35 --> we still need u64 to index and count bytes

 *			(that's 32 GiB of bitmap for 1 PiB storage)

 * 1 << (35 - 2)	32bit longs needed

 *	33 --> we'd even need u64 to index and count 32bit long words.

 * 1 << (35 - 3)	64bit longs needed

 *	32 --> we could get away with a 32bit unsigned int to index and count

 *	64bit long words, but I rather stay with unsigned long for now.

 *	We probably should neither count nor point to bytes or long words

 *	directly, but either by bitnumber, or by page index and offset.

 * 1 << (35 - 12)

 *	22 --> we need that much 4KiB pages of bitmap.

 *	1 << (22 + 3) --> on a 64bit arch,

 *	we need 32 MiB to store the array of page pointers.

 *

 * Because I'm lazy, and because the resulting patch was too large, too ugly

 * and still incomplete, on 32bit we still "only" support 16 TiB (minus some),

 * (1 << 32) bits * 4k storage.

 *



 * bitmap storage and IO:

 *	Bitmap is stored little endian on disk, and is kept little endian in

 *	core memory. Currently we still hold the full bitmap in core as long

 *	as we are "attached" to a local disk, which at 32 GiB for 1PiB storage

 *	seems excessive.

 *

 *	We plan to reduce the amount of in-core bitmap pages by paging them in

 *	and out against their on-disk location as necessary, but need to make

 *	sure we don't cause too much meta data IO, and must not deadlock in

 *	tight memory situations. This needs some more work.

/*

 * NOTE

 *  Access to the *bm_pages is protected by bm_lock.

 *  It is safe to read the other members within the lock.

 *

 *  drbd_bm_set_bits is called from bio_endio callbacks,

 *  We may be called with irq already disabled,

 *  so we need spin_lock_irqsave().

 *  And we need the kmap_atomic.

	/* exclusively to be used by __al_write_transaction(),

	 * drbd_bm_mark_for_writeout() and

	 * and drbd_bm_write_hinted() -> bm_rw() called from there.

 see LIMITATIONS: above */

 nr of set bits; THINK maybe atomic_t? */

 serializes resize operations */

 used to serialize IO of single pages */

 debugging aid, in case we are still racy somewhere */

 we store some "meta" info about our pages in page->private */

/* at a granularity of 4k storage per bitmap bit:

 * one peta byte storage: 1<<50 byte, 1<<38 * 4k storage blocks

 *  1<<38 bits,

 *  1<<23 4k bitmap pages.

 * Use 24 bits as page index, covers 2 peta byte storage

 * at a granularity of 4k per bit.

 * Used to report the failed page idx on io error from the endio handlers.

 this page is currently read in, or written back */

 if there has been an IO error for this page */

/* this is to be able to intelligently skip disk IO,

/* to mark for lazy writeout once syncer cleared all clearable bits,

/* pages marked with this "HINT" will be considered for writeout

/* store_page_idx uses non-atomic assignment. It is only used directly after

 * allocating the page.  All other bm_set_page_* and bm_clear_page_* need to

 * use atomic bit manipulation, as set_out_of_sync (and therefore bitmap

 * changes) may happen from various contexts, and wait_on_bit/wake_up_bit

/* As is very unlikely that the same page is under IO from more than one

 * context, we can get away with a bit per page and one wait queue per bitmap.

/* set _before_ submit_io, so it may be reset due to being changed

 use cmpxchg? */

/**

 * drbd_bm_mark_for_writeout() - mark a page with a "hint" to be considered for writeout

 * @device:	DRBD device.

 * @page_nr:	the bitmap page to mark with the "hint" flag

 *

 * From within an activity log transaction, we mark a few pages with these

 * hints, then call drbd_bm_write_hinted(), which will only write out changed

 * pages which are flagged with this mark.

 on a 32bit box, this would allow for exactly (2<<38) bits. */

 page_nr = (word*sizeof(long)) >> PAGE_SHIFT; */

 page_nr = (bitnr/8) >> PAGE_SHIFT; */

 long word offset of _bitmap_ sector */

/* word offset from start of bitmap to word number _in_page_

 * modulo longs per page

#define MLPP(X) ((X) % (PAGE_SIZE/sizeof(long))

 hm, well, Philipp thinks gcc might not optimize the % into & (... - 1)

 so do it explicitly:

 Long words per page */

/*

 * actually most functions herein should take a struct drbd_bitmap*, not a

 * struct drbd_device*, but for the debug macros I like to have the device around

 * to be able to report device specific.

/*

 * "have" and "want" are NUMBER OF PAGES.

	/* Trying kmalloc first, falling back to vmalloc.

	 * GFP_NOIO, as this is called while drbd IO is "suspended",

	 * and during resize or attach on diskless Primary,

	 * we must not block on IO to ourselves.

			/* we want to know which page it is

		/* NOT HERE, we are outside the spinlock!

		bm_free_pages(old_pages + want, have - want);

/*

 * allocates the drbd_bitmap and stores it in device->bitmap.

/* called on driver unload. TODO: call when a device is destroyed.

/*

 * since (b->bm_bits % BITS_PER_LONG) != 0,

 * this masks out the remaining bits.

 * Returns the number of bits cleared.

 number of bits modulo bits per page */

 mask the used bits of the word containing the last bit */

	/* bitmap is always stored little endian,

		/* If mask != 0, we are not exactly aligned, so bm now points

		 * to the long containing the last bit.

		 * If mask == 0, bm already points to the word immediately

		/* on a 32bit arch, we may need to zero out

 number of bits modulo bits per page */

 mask the used bits of the word containing the last bit */

	/* bitmap is always stored little endian,

		/* If mask != 0, we are not exactly aligned, so bm now points

		 * to the long containing the last bit.

		 * If mask == 0, bm already points to the word immediately

		/* on a 32bit arch, we may need to zero out

/* you better not modify the bitmap while this is running,

 all but last page */

 last (or only) page */

 32bit arch, may have an unused padding long */

 offset and len in long words.*/

 For the layout, see comment above drbd_md_set_sector_offsets(). */

/*

 * make sure the bitmap has enough room for the attached storage,

 * if necessary, resize.

 * called whenever we may have changed the device size.

 * returns -ENOMEM if we could not allocate enough memory, 0 on success.

 * In case this is actually a resize, we copy the old bitmap into the new one.

 * Otherwise, the bitmap is initialized to all bits set.

 number of pages */

	/* if we would use

	   words = ALIGN(bits,BITS_PER_LONG) >> LN2_BPL;

	   a 32bit host could present the wrong number of words

	   to a 64bit host.

 implicit: (opages != NULL) && (opages != npages) */

/* inherently racy:

 * if not protected by other means, return value may be out of date when

 * leaving this function...

 * we still need to lock it, since it is important that this returns

 * bm_set == 0 precisely.

 *

 * maybe bm_set should be atomic_t ?

 if I don't have a disk, I don't know about out-of-sync status */

/* merge number words from buffer into the bitmap starting at offset.

 * buffer[i] is expected to be little endian unsigned long.

 * bitmap must be locked by drbd_bm_lock.

 * currently only used from receive_bitmap.

	/* with 32bit <-> 64bit cross-platform connect

	 * this is only correct for current usage,

	 * where we _know_ that we are 64 bit aligned,

	 * and know that this function is used in this way, too...

/* copy number words from the bitmap starting at offset into the buffer.

 * buffer[i] will be little endian unsigned long.

 set all bits in the bitmap */

 clear all bits in the bitmap */

 bv_page may be a copy, or may be the original */

		/* ctx error will hold the completed-last non-zero error code,

		/* Not identical to on disk version of it.

	/* this might happen with very small

	 * flexible external meta data device,

 serialize IO on this page */

	/* before memcpy and submit,

	/* bio_add_page of a single page to an empty bio will always succeed,

		/* this should not count as user activity and cause the

/*

 * bm_rw: read/write the whole bitmap from/to its on disk location.

	/*

	 * We are protected against bitmap disappearing/resizing by holding an

	 * ldev reference (caller must have called get_ldev()).

	 * For read/write, we are protected against changes to the bitmap by

	 * the bitmap lock (see drbd_bitmap_io).

	 * For lazy writeout, we don't care for ongoing changes to the bitmap,

	 * as we submit copies of pages anyways.

 put is in drbd_bm_aio_ctx_destroy() */

	/* Here D_ATTACHING is sufficient since drbd_bm_read() is called only from

 let the layers below us try to merge these bios... */

 ASSERT: BM_AIO_WRITE_ALL_PAGES is not set. */

 == -1U: no hint here. */

 Several AL-extents may point to the same page. */

 Has it even changed? */

 ignore completely unchanged pages */

			/* during lazy writeout,

	/*

	 * We initialize ctx->in_flight to one to make sure drbd_bm_endio

	 * will not set ctx->done early, and decrement / test it here.  If there

	 * are still some bios in flight, we need to wait for them here.

	 * If all IO is done already (or nothing had been submitted), there is

	 * no need to wait.  Still, we need to put the kref associated with the

	 * "in_flight reached zero, all done" event.

 summary for global bitmap IO */

 ctx->error ? */

 Disk timeout/force-detach during IO... */

/**

 * drbd_bm_read() - Read the whole bitmap from its on disk location.

 * @device:	DRBD device.

/**

 * drbd_bm_write() - Write the whole bitmap to its on disk location.

 * @device:	DRBD device.

 *

 * Will only write pages that have changed since last IO.

/**

 * drbd_bm_write_all() - Write the whole bitmap to its on disk location.

 * @device:	DRBD device.

 *

 * Will write all pages.

/**

 * drbd_bm_write_lazy() - Write bitmap pages 0 to @upper_idx-1, if they have changed.

 * @device:	DRBD device.

 * @upper_idx:	0: write all changed pages; +ve: page index to stop scanning for changed pages

/**

 * drbd_bm_write_copy_pages() - Write the whole bitmap to its on disk location.

 * @device:	DRBD device.

 *

 * Will only write pages that have changed since last IO.

 * In contrast to drbd_bm_write(), this will copy the bitmap pages

 * to temporary writeout pages. It is intended to trigger a full write-out

 * while still allowing the bitmap to change, for example if a resync or online

 * verify is aborted due to a failed peer disk, while local IO continues, or

 * pending resync acks are still being processed.

/**

 * drbd_bm_write_hinted() - Write bitmap pages with "hint" marks, if they have changed.

 * @device:	DRBD device.

/* NOTE

 * find_first_bit returns int, we return unsigned long.

 * For this to work on 32bit arch with bitnumbers > (1<<32),

 * we'd need to return u64, and get a whole lot of other places

 * fixed where we still use unsigned long.

 *

 * this returns a bit number, NOT a sector!

 bit offset of the first bit in the page */

 not yet needed for anything. */

/* does not spin_lock_irqsave.

 WARN_ON(!(BM_DONT_SET & device->b->bm_flags)); */

 WARN_ON(!(BM_DONT_SET & device->b->bm_flags)); */

/* returns number of bits actually changed.

 * for val != 0, we change 0 -> 1, return code positive

 * for val == 0, we change 1 -> 0, return code negative

 * wants bitnr, not sector.

 * expected to be called for only a few bits (e - s about BITS_PER_LONG).

/* returns number of bits actually changed.

 * for val != 0, we change 0 -> 1, return code positive

 * for val == 0, we change 1 -> 0, return code negative

 returns number of bits changed 0 -> 1 */

 returns number of bits changed 1 -> 0 */

/* sets all bits in full words,

	/* I think it is more cache line friendly to hweight_long then set to ~0UL,

		/* We only need lazy writeout, the information is still in the

		 * remote bitmap as well, and is reconstructed during the next

/* Same thing as drbd_bm_set_bits,

 * but more efficient for a large bit range.

 * You must first drbd_bm_lock().

 * Can be called to set the whole bitmap in one go.

	/* First set_bit from the first bit (s)

	 * up to the next long boundary (sl),

	 * then assign full words up to the last long boundary (el),

	 * then set_bit up to and including the last bit (e).

	 *

	 * Do not use memset, because we must account for changes,

	 * so we need to loop over the words with hweight() anyways.

 don't bother; el and sl may even be wrong. */

 difference is large enough that we can trust sl and el */

 bits filling the current long */

 MLPP: modulo longs per page */

 LWPP: long words per page */

 first and full pages, unless first page == last page */

 last page (respectively only page, for first page == last page) */

	/* consider bitmap->bm_bits = 32768, bitmap->bm_number_of_pages = 1. (or multiples).

	 * ==> e = 32767, el = 32768, last_page = 2,

	 * and now last_word = 0.

	 * We do not want to touch last_page in this case,

	 * as we did not allocate it, it is not present in bitmap->bm_pages.

	/* possibly trailing bits.

	 * example: (e & 63) == 63, el will be e+1.

	 * if that even was the very last bit,

	 * it would trigger an assert in __bm_change_bits_to()

/* returns bit state

 * wants bitnr, NOT sector.

 * inherently racy... area needs to be locked by means of {al,rs}_lru

 *  1 ... bit set

 *  0 ... bit not set

 * -1 ... first out of bounds access, stop testing for bits!

 (bitnr > b->bm_bits) */

 returns number of bits set in the range [s, e] */

	/* If this is called without a bitmap, that is a bug.  But just to be

	 * robust in case we screwed up elsewhere, in that case pretend there

	 * was one dirty bit in the requested area, so we won't try to do a

/* inherently racy...

 * return value may be already out-of-date when this function returns.

 * but the general usage is that this is only use during a cstate when bits are

 * only cleared, not set, and typically only care for the case when the return

 * value is zero, or we already "locked" this "bitmap extent" by other means.

 *

 * enr is bm-extent number, since we chose to name one sector (512 bytes)

 * worth of the bitmap a "bitmap extent".

 *

 * TODO

 * I think since we use it like a reference count, we should use the real

 * reference count of some bitmap extent element from some lru instead...

 *

 SPDX-License-Identifier: GPL-2.0-or-later

/*

  drbd.h



  This file is part of DRBD by Philipp Reisner and Lars Ellenberg.



  Copyright (C) 2003-2008, LINBIT Information Technologies GmbH.

  Copyright (C) 2003-2008, Philipp Reisner <philipp.reisner@linbit.com>.

  Copyright (C) 2003-2008, Lars Ellenberg <lars.ellenberg@linbit.com>.





 enums are unsigned... */

 SPDX-License-Identifier: GPL-2.0

/*

 * interval_end  -  return end of @node

/*

 * drbd_insert_interval  -  insert a new interval into a tree

/**

 * drbd_contains_interval  -  check if a tree contains a given interval

 * @root:	red black tree root

 * @sector:	start sector of @interval

 * @interval:	may not be a valid pointer

 *

 * Returns if the tree contains the node @interval with start sector @start.

 * Does not dereference @interval until @interval is known to be a valid object

 * in @tree.  Returns %false if @interval is in the tree but with a different

 * sector number.

/*

 * drbd_remove_interval  -  remove an interval from a tree

/**

 * drbd_find_overlap  - search for an interval overlapping with [sector, sector + size)

 * @root:	red black tree root

 * @sector:	start sector

 * @size:	size, aligned to 512 bytes

 *

 * Returns an interval overlapping with [sector, sector + size), or NULL if

 * there is none.  When there is more than one overlapping interval in the

 * tree, the interval with the lowest start sector is returned, and all other

 * overlapping intervals will be on the right side of the tree, reachable with

 * rb_next().

 Overlap if any must be on left side */

 Overlap if any must be on right side */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

   drbd_actlog.c



   This file is part of DRBD by Philipp Reisner and Lars Ellenberg.



   Copyright (C) 2003-2008, LINBIT Information Technologies GmbH.

   Copyright (C) 2003-2008, Philipp Reisner <philipp.reisner@linbit.com>.

   Copyright (C) 2003-2008, Lars Ellenberg <lars.ellenberg@linbit.com>.





 all fields on disc in big endian */

 don't we all like magic */

	/* to identify the most recent transaction block

 checksum on the full 4k block, with this field set to 0. */

	/* type of transaction, special transaction types like:

	 * purge-all, set-all-idle, set-all-active, ... to-be-defined

	/* we currently allow only a few thousand extents,

 how many updates in this transaction */

	/* maximum slot number, "al-extents" in drbd.conf speak.

	 * Having this in each transaction should make reconfiguration

 slot number the context starts with */

	/* Some reserved bytes.  Expected usage is a 64bit counter of

	 * sectors-written since device creation, and other data generation tag

 --- 36 byte used --- */

	/* Reserve space for up to AL_UPDATES_PER_TRANSACTION changes

	 * in one transaction, then use the remaining byte in the 4k block for

	 * context information.  "Flexible" number of updates per transaction

	 * does not help, as we have to account for the case when all update

	 * slots are used anyways, so it would only complicate code without

	 * additional benefit.

	/* but the extent number is 32bit, which at an extent size of 4 MiB

 --- 420 bytes used (36 + 64*6) --- */

 4096 - 420 = 3676 = 919 * 4 */

 we do all our meta data IO in aligned 4k blocks. */

 special case, drbd_md_read() during drbd_adm_attach(): no get_ldev */

 Corresponding put_ldev in drbd_md_endio() */

 one bio_put() is in the completion handler */

 drbd_md_put_buffer() is in the completion handler */

	/* for bios crossing activity log extent boundaries,

 FIXME figure out a fast path for bios crossing AL extent boundaries */

	/* for bios crossing activity log extent boundaries,

/* Currently BM_BLOCK_SHIFT, BM_EXT_SHIFT and AL_EXTENT_SHIFT

 * are still coupled, or assume too much about their relation.

 * Code below will not work if this is violated.

 * Will be cleaned up with some followup patch.

 bit to page */

 al extent number to bit */

 transaction number, modulo on-disk ring buffer wrap around */

 ... to aligned 4k on disk block */

 ... to 512 byte sector in activity log */

 ... plus offset to the on disk position */

	/* Even though no one can start to change this list

	 * once we set the LC_LOCKED -- from drbd_al_begin_io(),

	 * lc_try_lock_for_transaction() --, someone may still

 The bitmap write may have failed, causing a state change. */

 protects md_io_buffer, al_tr_cycle, ... */

	/* Serialize multiple transactions.

	 * This uses test_and_set_bit, memory barrier is implicit.

		/* Double check: it may have been committed by someone else,

			/* FIXME

			if (err)

				we need an "lc_cancel" here;

/*

 * @delegate:   delegate activity log I/O to the worker thread

	/* for bios crossing activity log extent boundaries,

 worst case: all touched extends are cold. */

	/* We want all necessary updates for a given request within the same transaction

	 * We could first check how many updates are *actually* needed,

		/* Too many activity log extents are currently "hot".

		 *

		 * If we have accumulated pending changes already,

		 * we made progress.

		 *

		 * If we cannot get even a single pending change through,

		 * stop the fast path until we made some progress,

 Is resync active in this area? */

	/* Checkout the refcounts.

	 * Given that we checked for available elements and update slots above,

	/* for bios crossing activity log extent boundaries,

/**

 * drbd_al_shrink() - Removes all active extents form the activity log

 * @device:	DRBD device.

 *

 * Removes all active extents form the activity log, waiting until

 * the reference count of each entry dropped to 0 first, of course.

 *

 * You need to lock device->act_log with lc_try_lock() / lc_unlock()

 There may or may not have been a pending transaction. */

	/* The rest of the transactions will have an empty "updates" list, and

	 * are written out only to provide the context, and to initialize the

/* ATTENTION. The AL's extents are 4MB each, while the extents in the

 * resync LRU-cache are 16MB each.

 * The caller of this function has to hold an get_ldev() reference.

 *

 * Adjusts the caching members ->rs_left (success) or ->rs_failed (!success),

 * potentially pulling in (and recounting the corresponding bits)

 * this resync extent into the resync extent lru cache.

 *

 * Returns whether all bits have been cleared for this resync extent,

 * precisely: (rs_left <= rs_failed)

 *

 * TODO will be obsoleted once we have a caching lru of the on disk bitmap

	/* When setting out-of-sync bits,

	 * we don't need it cached (lc_find).

	 * But if it is present in the cache,

	 * we should update the cached bit count.

	 * Otherwise, that extent should be in the resync extent lru cache

	 * already -- or we want to pull it in if necessary -- (lc_get),

				/* We don't expect to be able to clear more bits

				 * than have been set when we originally counted

				 * the set bits to cache that value in ext->rs_left.

				 * Whatever the reason (disconnect during resync,

				 * delayed local completion of an application write),

			/* Normally this element should be in the cache,

			 * since drbd_rs_begin_io() pulled it already in.

			 *

			 * But maybe an application write finished, and we set

			 * something outside the resync lru_cache in sync.

			/* we don't keep a persistent log of the resync lru,

 no race, we are within the al_lock! */

 be quiet if lc_find() did not find it. */

 It is called lazy update, so don't do write-out too often. */

 and also set RS_PROGRESS below */

		/* Else: rather wait for explicit notification via receive_state,

		 * to avoid uuids-rotated-too-fast causing full resync

		 * in next handshake, in case the replication link breaks

	/*

	 * We keep a count of set bits per resync-extent in the ->rs_left

	 * caching member, so we need to loop and work within the resync extent

	 * alignment. Typically this loop will execute exactly once.

		/* set temporary boundary bit number to last bit number within

		 * the resync extent of the current start bit number,

			/* Only called from drbd_rs_failed_io(), bits

			 * supposedly still set.  Recount, maybe some

			 * of the bits have been successfully cleared

			 * by application IO meanwhile.

 if (mode == SET_OUT_OF_SYNC) */

/* clear the bit corresponding to the piece of storage in question:

 * size byte of data starting from sector.  Only clear a bits of the affected

 * one ore more _aligned_ BM_BLOCK_SIZE blocks.

 *

 * called by worker on C_SYNC_TARGET and receiver on SyncSource.

 *

 Is called from worker and receiver context _only_ */

 This would be an empty REQ_PREFLUSH, be silent. */

 no disk, no metadata, no bitmap to manipulate bits in */

		/* Round up start sector, round down end sector.  We make sure

		/* We set it out of sync, or record resync failure.

/**

 * drbd_rs_begin_io() - Gets an extent in the resync LRU cache and sets it to BME_LOCKED

 * @device:	DRBD device.

 * @sector:	The sector number.

 *

 * This functions sleeps on al_wait. Returns 0 on success, -EINTR if interrupted.

 step aside only while we are above c-min-rate; unless disabled. */

 clears BME_NO_WRITES and eventually BME_PRIORITY */

/**

 * drbd_try_rs_begin_io() - Gets an extent in the resync LRU cache, does not sleep

 * @device:	DRBD device.

 * @sector:	The sector number.

 *

 * Gets an extent in the resync LRU cache, sets it to BME_NO_WRITES, then

 * tries to set it to BME_LOCKED. Returns 0 upon success, and -EAGAIN

 * if there is still application IO going on in this area.

	/* If we need to throttle, a half-locked (only marked BME_NO_WRITES,

	 * not yet BME_LOCKED) extent needs to be kicked out explicitly if we

	 * need to throttle. There is at most one such half-locked extent,

		/* in case you have very heavy scattered io, it may

		 * stall the syncer undefined if we give up the ref count

		 * when we try again and requeue.

		 *

		 * if we don't give up the refcount, but the next time

		 * we are scheduled this extent has been "synced" by new

		 * application writes, we'd miss the lc_put on the

		 * extent we keep the refcount on.

		 * so we remembered which extent we had to try again, and

		 * if the next requested one is something else, we do

		 * the lc_put here...

		 * we also have to wake_up

 TRY. */

			/* we did set the BME_NO_WRITES,

			 * but then could not set BME_LOCKED,

			 * so we tried again.

 do we rather want to try later? */

 Do or do not. There is no try. -- Yoda */

 clear BME_LOCKED, BME_NO_WRITES and BME_PRIORITY */

/**

 * drbd_rs_cancel_all() - Removes all extents from the resync LRU (even BME_LOCKED)

 * @device:	DRBD device.

 Makes sure ->resync is there. */

/**

 * drbd_rs_del_all() - Gracefully remove all extents from the resync LRU

 * @device:	DRBD device.

 *

 * Returns 0 upon success, -EAGAIN if at least one reference count was

 * not zero.

 ok, ->resync is there. */

 SPDX-License-Identifier: GPL-2.0

	/*

	 * validate_nla (called from nla_parse_nested) ignores attributes

	 * beyond maxtype, and does not understand the DRBD_GENLA_F_MANDATORY flag.

	 * In order to have it validate attributes with the DRBD_GENLA_F_MANDATORY

	 * flag set also, check and remove that flag before calling

	 * nla_parse_nested.

	/*

	 * If any nested attribute has the DRBD_GENLA_F_MANDATORY flag set and

	 * we don't know about that attribute, reject all the nested

	 * attributes.

 SPDX-License-Identifier: GPL-2.0

/**********************************************************************

 * Whenever you change the file format, remember to bump the version. *

 pretty print enum drbd_req_state_bits req->rq_state */

 RQ_WRITE ignored, already reported */

 for_each_connection ... */

 change anything here, fixup header below! */

		/* In theory this is racy,

		 * in the sense that there could have been a

		 * drbd_md_put_buffer(); drbd_md_get_buffer();

			/* if the oldest request does not wait for the activity log

 pretty print enum peer_req->flags */

 don't disable irq "forever" */

		/* This is meant to summarize timing issues, to be able to tell

		 * local disk problems from network problems.

		 * Skip requests, if we have shown an even older request with

 TODO: transfer_log and friends should be moved to resource */

	/* This does not happen, actually.

 BUMP me if you change the file format/content/presentation */

 for each connection ... once we have more than one */

 open coded SIOCINQ, the "relevant" part */

 open coded SIOCOUTQ, the "relevant" part */

 make sure at *open* time that the respective object won't go away. */

	/* Are we still linked,

 serialize with d_delete() */

 Make sure the object is still alive */

 it is ok to call debugfs_remove(NULL) */

	/* No locking...

	/* If not much is going on, this will result in natural ordering.

	 * If it is very busy, we will possibly skip events, or even see wrap

	 * arounds, which could only be avoided with locking.

 BUMP me if you change the file format/content/presentation */

 BUMP me if you change the file format/content/presentation */

	/* Once we enable mutliple peers,

	 * these connections will have descriptive names.

 BUMP me if you change the file format/content/presentation */

 BUMP me if you change the file format/content/presentation */

 BUMP me if you change the file format/content/presentation */

 WRITE, then READ */

 MINORMASK, MINORBITS == 20; */

 volume number vnr is even 16 bit only; */

/* not __exit, may be indirectly called

 SPDX-License-Identifier: GPL-2.0-or-later

/*

   drbd_worker.c



   This file is part of DRBD by Philipp Reisner and Lars Ellenberg.



   Copyright (C) 2001-2008, LINBIT Information Technologies GmbH.

   Copyright (C) 1999-2008, Philipp Reisner <philipp.reisner@linbit.com>.

   Copyright (C) 2002-2008, Lars Ellenberg <lars.ellenberg@linbit.com>.





/* endio handlers:

 *   drbd_md_endio (defined here)

 *   drbd_request_endio (defined here)

 *   drbd_peer_request_endio (defined here)

 *   drbd_bm_endio (defined in drbd_bitmap.c)

 *

 * For all these callbacks, note the following:

 * The callbacks will be called in irq context by the IDE drivers,

 * and in Softirqs/Tasklets/BH context by the SCSI drivers.

 * Try to get the locking right :)

 *

/* used for synchronous meta data and bitmap IO

 * submitted by drbd_md_sync_page_io()

 special case: drbd_md_read() during drbd_adm_attach() */

	/* We grabbed an extra reference in _drbd_md_sync_page_io() to be able

	 * to timeout on the lower level device, and eventually detach from it.

	 * If this io completion runs after that timeout expired, this

	 * drbd_md_put_buffer() may allow us to finally try and re-attach.

	 * During normal operation, this only puts that extra reference

	 * down to 1 again.

	 * Make sure we first drop the reference, and only then signal

	 * completion, or we may (in drbd_al_read_log()) cycle so fast into the

	 * next drbd_md_sync_page_io(), that we trigger the

	 * ASSERT(atomic_read(&device->md_io_in_use) == 1) there.

/* reads on behalf of the partner,

 * "submitted" by the receiver

/* writes on behalf of the partner, or resync writes,

	/* after we moved peer_req to done_ee,

	 * we may no longer access it,

	 * it may be freed/reused already!

		/* In protocol != C, we usually do not send write acks.

	/*

	 * Do not remove from the write_requests tree here: we did not send the

	 * Ack yet and did not wake possibly waiting conflicting requests.

	 * Removed from the tree from "drbd_process_done_ee" within the

	 * appropriate dw.cb (e_end_block/e_end_resync_block) or from

	 * _drbd_clear_done_ee.

	/* FIXME do we want to detach for failed REQ_OP_DISCARD?

 put is in drbd_send_acks_wf() */

/* writes on behalf of the partner, or resync writes,

 * "submitted" by the receiver.

 no need for the bio anymore */

/* read, readA or write requests on R_PRIMARY coming from drbd_make_request

	/* If this request was aborted locally before,

	 * but now was completed "successfully",

	 * chances are that this caused arbitrary data corruption.

	 *

	 * "aborting" requests, or force-detaching the disk, is intended for

	 * completely blocked/hung local backing devices which do no longer

	 * complete requests at all, not even do error completions.  In this

	 * situation, usually a hard-reset and failover is the only way out.

	 *

	 * By "aborting", basically faking a local error-completion,

	 * we allow for a more graceful swichover by cleanly migrating services.

	 * Still the affected node has to be rebooted "soon".

	 *

	 * By completing these requests, we allow the upper layers to re-use

	 * the associated data pages.

	 *

	 * If later the local backing device "recovers", and now DMAs some data

	 * from disk into the original request pages, in the best case it will

	 * just put random data into unused pages; but typically it will corrupt

	 * meanwhile completely unrelated data, causing all sorts of damage.

	 *

	 * Which means delayed successful completion,

	 * especially for READ requests,

	 * is a reason to panic().

	 *

	 * We assume that a delayed *error* completion is OK,

	 * though we still will complain noisily about it.

 to avoid recursion in __req_mod */

 not req_mod(), we need irqsave here! */

 all but the last page will be fully used */

 and now the last, possibly only partially used page */

		/* REQ_OP_WRITE_SAME has only one segment,

 MAYBE merge common code with w_e_end_ov_req */

		/* Free peer_req and pages before send.

		 * In case we block on congestion, we could otherwise run into

		 * some distributed deadlock, if the other side blocks on

		 * congestion as well, because our receiver blocks in

	/* GFP_TRY, because if there is no memory available right now, this may

 unused */, sector,

	/* If it failed because of ENOMEM, retry should help.  If it failed

	 * because bio_add_page failed (probably broken lower level driver),

	 * retry may or may not help.

 The number of sectors we want in-flight */

 Number of sectors to request in this turn */

 Number of sectors more we need in-flight */

 correction per invocation of drbd_rs_controller() */

 Number of time steps to plan ahead */

 (dc->c_plan_ahead * 10 * SLEEP_TIME) / HZ; */

 At start of resync */

 normal path */

 Plan ahead */

 What we do in this step */

	/*

	drbd_warn(device, "si=%u if=%d wa=%u co=%d st=%d cps=%d pl=%d cc=%d rs=%d\n",

		 sect_in, device->rs_in_flight, want, correction,

		 steps, cps, device->rs_planed, curr_corr, req_sect);

 Number of sectors that came in since the last turn */

	/* Don't have more than "max-buffers"/2 in-flight.

	 * Otherwise we may cause the remote site to stall on drbd_alloc_pages(),

	 * potentially causing a distributed deadlock on congestion during

	 * online-verify or (checksum-based) resync, if max-buffers,

	/* note that "number" is in units of "BM_BLOCK_SIZE" (which is 4k),

	 * mxb (as used here, and in drbd_alloc_pages on the peer) is

	 * "number of pages" (typically also 4k),

 empty resync? */

		/* Since we only need to access device->rsync a

		   get_ldev_if_state(device,D_FAILED) would be sufficient, but

		   to continue resync with a broken disk makes no sense at

		/* Stop generating RS requests when half of the send buffer is filled,

		/* try to find some adjacent bits.

		 * we stop if we have already the maximum req size.

		 *

		 * Additionally always align bigger requests, in order to

		 * be prepared for all stripe sizes of software RAIDs.

 Be always aligned */

 do not cross extent boundaries */

			/* now, is it actually dirty, after all?

			 * caution, drbd_bm_test_bit is tri-state for some

			 * obscure reason; ( b == 0 ) would get the out-of-band

			 * only accidentally right because of the "oddly sized"

		/* if we merged some,

 adjust very last sectors, in case we are oddly sized */

 Disk failure */

 allocation failed, or ldev busy */

 everything ok */

		/* last syncer _request_ was sent,

		 * but the P_RS_DATA_REPLY not yet received.  sync will end (and

		 * next sync group will resume), as soon as we receive the last

		 * resync data block, and the last bit is cleared.

		 * until then resync "work" is "inactive" ...

		/* We check for "finished" only in the reply path:

		 * w_e_end_ov_reply().

	/* Remove all elements from the resync LRU. Since future actions

	 * might set bits in the (main) bitmap, then the entries in the

		/* In case this is not possible now, most probably because

		 * there are P_RS_DATA_REPLY Packets lingering on the worker's

		 * queue (or even the read operations for those packets

 adjust for verify start and stop sectors, respective reached position */

	/* This protects us against multiple calls (that can happen in the presence

			/* for verify runs, we don't update uuids here,

				/* Now the two UUID sets are equal, update what we

	/* If we have been sync source, and have an effective fencing-policy,

 reset start sector, if we reached end of device */

 helper */

 This might happen if sendpage() has not finished */

/**

 * w_e_end_data_req() - Worker callback, to send a P_DATA_REPLY packet in response to a P_DATA_REQUEST

 * @w:		work object.

 * @cancel:	The connection will be closed anyways

/**

 * w_e_end_rsdata_req() - Worker callback to send a P_RS_DATA_REPLY packet in response to a P_RS_DATA_REQUEST

 * @w:		work object.

 * @cancel:	The connection will be closed anyways

 update resync data with failure */

		/* quick hack to try to avoid a race against reconfiguration.

		 * a real fix would be much more involved,

 rs_same_csums unit is BM_BLOCK_SIZE */

 By setting block_id, digest pointer becomes invalid! */

 This peer request no longer has a digest pointer */

 terminate the connection in case the allocation failed */

	/* Free e and pages before send.

	 * In case we block on congestion, we could otherwise run into

	 * some distributed deadlock, if the other side blocks on

	 * congestion as well, because our receiver blocks in

	/* after "cancel", because after drbd_disconnect/drbd_rs_cancel_all

	/* Free peer_req and pages before send.

	 * In case we block on congestion, we could otherwise run into

	 * some distributed deadlock, if the other side blocks on

	 * congestion as well, because our receiver blocks in

 let's advance progress step marks only for every other megabyte */

/* FIXME

 * We need to track the number of pending barrier acks,

 * and to be able to wait for them.

 * See also comment in drbd_adm_attach before drbd_suspend_io.

 re-init if first write on this connection */

	/* this time, no connection->send.current_epoch_writes++;

	 * If it was sent, it was the closing barrier for the last

	 * replicated epoch, before we went into AHEAD mode.

/**

 * w_send_dblock() - Worker callback to send a P_DATA packet in order to mirror a write request

 * @w:		work object.

 * @cancel:	The connection will be closed anyways

/**

 * w_send_read_req() - Worker callback to send a read request (P_DATA_REQUEST) packet

 * @w:		work object.

 * @cancel:	The connection will be closed anyways

	/* Even read requests may close a write epoch,

/**

 * drbd_pause_after() - Pause resync on all devices that may not resync now

 * @device:	DRBD device.

 *

 * Called from process context only (admin command and after_state_ch).

/**

 * drbd_resume_next() - Resume resync on all devices that may resync now

 * @device:	DRBD device.

 *

 * Called from process context only (admin command and worker).

 caller must lock_all_resources() */

 check for loops */

		/* You are free to depend on diskless, non-existing,

		 * or not yet/no longer existing minors.

		 * We only reject dependency loops.

		 * We cannot follow the dependency chain beyond a detached or

		 * missing minor.

 dependency chain ends here, no cycles. */

 follow the dependency chain */

 caller must lock_all_resources() */

	/* Updating the RCU protected object in place is necessary since

	   this function gets called from atomic context.

	   It is valid since all other updates also lead to an completely

 supported? */

 configured? */

 use for each resync? */

 or only after Primary crash? */

/**

 * drbd_start_resync() - Start the resync process

 * @device:	DRBD device.

 * @side:	Either C_SYNC_SOURCE or C_SYNC_TARGET

 *

 * This function might bring you directly into one of the

 * C_PAUSED_SYNC_* states.

			/* Since application IO was locked out during C_WF_BITMAP_T and

			   C_WF_SYNC_UUID we are still unmodified. Before going to C_SYNC_TARGET

 C_SYNC_SOURCE */ {

		/* The worker should not sleep waiting for state_mutex,

 Did some connection breakage or IO error race with us? */

 side == C_SYNC_SOURCE */

		/* Forget potentially stale cached per resync extent bit-counts.

		 * Open coded drbd_rs_cancel_all(device), we already have IRQs

 for lc_reset() above */

		/* reset rs_last_bcast when a resync or verify is started,

		/* Since protocol 96, we must serialize drbd_gen_and_send_sync_uuid

		 * with w_send_oos, or the sync target will get confused as to

		 * how much bits to resync.  We cannot do that always, because for an

		 * empty resync and protocol < 95, we need to do it here, as we call

		 * drbd_resync_finished from here in that case.

		 * We drbd_gen_and_send_sync_uuid here for protocol < 96,

			/* This still has a race (about when exactly the peers

			 * detect connection loss) that can lead to a full sync

			 * on next handshake. In 8.3.9 we fixed this with explicit

			 * resync-finished notifications, but the fix

			 * introduces a protocol change.  Sleeping for some

			 * time longer than the ping interval + timeout on the

			 * SyncSource, to give the SyncTarget the chance to

			 * detect connection loss, then waiting for a ping

			 * response (implicit in drbd_resync_finished) reduces

		/* ns.conn may already be != device->state.conn,

		 * we may have been paused in between, or become paused until

		 * the timer triggers.

 update timestamp, in case it took a while to write out stuff */

	/* we cannot assert local_cnt == 0 here, as get_ldev_if_state will

	 * inc/dec it frequently. Once we are D_DISKLESS, no one will touch

	 * the protected members anymore, though, so once put_ldev reaches zero

	/* Try to write changed bitmap pages, read errors may have just

	 * set some bits outside the area covered by the activity log.

	 *

	 * If we have an IO error during the bitmap writeout,

	 * we will want a full sync next time, just in case.

	 * (Do we want a specific meta data flag for this?)

	 *

	 * If that does not make it to stable storage either,

	 * we cannot do anything about that anymore.

	 *

	 * We still need to check if both bitmap and ldev are present, we may

	 * end up here after a failed attach, before ldev was even assigned.

		/* An interrupted resync or similar is allowed to recounts bits

		 * while we detach.

		 * Any modifications would not be expected anymore, though.

 only called from drbd_worker thread, no locking */

	/* Still nothing to do?

	 * Maybe we still need to close the current epoch,

	 * even if no new requests are queued yet.

	 *

	 * Also, poke TCP, just in case.

 FIXME get rid of this one? */

 FIXME get rid of this one? */

		/* We found nothing new to do, no to-be-communicated request,

		 * no other work item.  We may still need to close the last

		 * epoch.  Next incoming request epoch will be connection ->

		 * current transfer log epoch number.  If that is different

		 * from the epoch of the last request we communicated, it is

		 * safe to send the epoch separating barrier now.

 drbd_send() may have called flush_signals() */

		/* may be woken up for other things but new work, too,

		 * e.g. if the current epoch got closed.

 someone may have changed the config while we have been waiting above. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

   drbd.c



   This file is part of DRBD by Philipp Reisner and Lars Ellenberg.



   Copyright (C) 2001-2008, LINBIT Information Technologies GmbH.

   Copyright (C) 1999-2008, Philipp Reisner <philipp.reisner@linbit.com>.

   Copyright (C) 2002-2008, Lars Ellenberg <lars.ellenberg@linbit.com>.



   Thanks to Carter Burden, Bart Grantham and Gennadiy Nerubayev

   from Logicworks, Inc. for making SDP replication support possible.





 only for _req_mod in tl_release and tl_clear */

/* thanks to these macros, if compiled into the kernel (not-module),

 bitmap of enabled faults */

 fault rate % value - applies to all enabled faults */

 count of faults inserted */

 bitmap of devices to insert faults on */

 module parameters we can keep static */

 allow_open_on_secondary */

 module parameters we share */

 Detail level in proc drbd*/

 module parameters shared with defaults */

/* Module parameter for setting the user mode helper program

/* in 2.6.x, our device mapping and config info contains our virtual gendisks

 * as member "struct gendisk *vdisk;"

 peer requests */

 bitmap extents */

 activity log extents */

/* I do not use a standard mempool, because:

   1) I want to hand out the pre-allocated objects first.

   2) I want to be able to interrupt sleeping allocation with a signal.

   Note: This is a single linked list, the next pointer is the private

	 member of struct page.

/* When checking with sparse, and this is an inline function, sparse will

   give tons of false positives. When this is a real functions sparse works.

/**

 * tl_release() - mark as BARRIER_ACKED all requests in the corresponding transfer log epoch

 * @connection:	DRBD connection.

 * @barrier_nr:	Expected identifier of the DRBD write barrier packet.

 * @set_size:	Expected number of requests before that barrier.

 *

 * In case the passed barrier_nr or set_size does not match the oldest

 * epoch of not yet barrier-acked requests, this function will cause a

 * termination of the connection.

	/* find oldest not yet barrier-acked write request,

 if (s & RQ_DONE): not expected */

 if (!(s & RQ_NET_MASK)): not expected */

 first some paranoia code */

 Clean up list of requests processed during current epoch. */

	/* this extra list walk restart is paranoia,

	 * to catch requests being barrier-acked "unexpectedly".

/**

 * _tl_restart() - Walks the transfer log, and applies an action to all requests

 * @connection:	DRBD connection to operate on.

 * @what:       The action/event to perform with all request objects

 *

 * @what might be one of CONNECTION_LOST_WHILE_PENDING, RESEND, FAIL_FROZEN_DISK_IO,

 * RESTART_FROZEN_DISK_IO.

 must hold resource->req_lock */

/**

 * tl_clear() - Clears all requests and &struct drbd_tl_epoch objects out of the TL

 * @connection:	DRBD connection.

 *

 * This is called after the connection to the peer was lost. The storage covered

 * by the requests on the transfer gets marked as our of sync. Called from the

 * receiver thread and the worker thread.

/**

 * tl_abort_disk_io() - Abort disk I/O for all requests for a certain device in the TL

 * @device:	DRBD device.

	/* if the receiver has been "EXITING", the last thing it did

	 * was set the conn state to "StandAlone",

	 * if now a re-connect request comes in, conn state goes C_UNCONNECTED,

	 * and receiver thread will be "started".

	 * drbd_thread_start needs to set "RESTARTING" in that case.

	 * t_state check and assignment needs to be within the same spinlock,

	 * so either thread_start sees EXITING, and can remap to RESTARTING,

	 * or thread_start see NONE, and can proceed as normal.

 Release mod reference taken when thread was started */

	/* is used from state engine doing drbd_thread_stop_nowait,

 Get ref on module for thread - this is released when thread exits */

 otherw. may get -ERESTARTNOINTR */

 may be called from state engine, holding the req lock irqsave */

/*

 * drbd_calc_cpu_mask() - Generate CPU masks, spread over all CPUs

 *

 * Forces all threads of a resource onto the same CPU. This is beneficial for

 * DRBD's performance. May be overwritten by user's configuration.

/**

 * drbd_thread_current_set_cpu() - modifies the cpu mask of the _current_ thread

 * @thi:	drbd_thread object

 *

 * call in the "main loop" of _all_ threads, no need for any mutex, current won't die

 * prematurely.

/*

 * drbd_header_size  -  size of a packet header

 *

 * The header size is a multiple of 8, so any payload following the header is

 * word aligned on 64-bit architectures.  (The bitmap send and receive code

 * relies on this.)

	/*

	 * Called with @data == NULL and the size of the data blocks in @size

	 * for commands that send data blocks.  For those commands, omit the

	 * MSG_MORE flag: this will increase the likelihood that data blocks

	 * which are page aligned on the sender will end up page aligned on the

	 * receiver.

	/* DRBD protocol "pings" are latency critical.

 apv >= 95 */ sizeof(struct p_rs_param_95);

 initialize verify_alg and csums_alg */

 communicated if (agreed_features & DRBD_FF_WSAME) */

 ... multiple BIOs per peer_request */

/**

 * drbd_send_current_state() - Sends the drbd state to the peer

 * @peer_device:	DRBD peer device.

 Within the send mutex */

/**

 * drbd_send_state() - After a state change, sends the new state to the peer

 * @peer_device:      DRBD peer device.

 * @state:     the state to send, not necessarily the current state.

 *

 * Each state change queues an "after_state_ch" work, which will eventually

 * send the resulting new state to the peer. If more state changes happen

 * between queuing and processing of the after_state_ch work, we still

 * want to send each intermediary state in the order it occurred.

 Within the send mutex */

 may we use this feature? */

 nothing to do. */

 use at most thus many bytes */

 plain bits covered in this code string */

	/* p->encoding & 0x80 stores whether the first run length is set.

	 * bit offset is implicit.

	/* see how much plain bits we can stuff into one packet

 first iteration */

				/* the first checked bit was set,

 but skip encoding of zero run length */

		/* paranoia: catch zero runlength.

 buffer full */

		/* incompressible with this method.

	/* RLE + VLI was able to compress it just fine.

 store pad_bits */

/*

 * send_bitmap_rle_or_plain

 *

 * Return 0 when done, 1 when another iteration is needed, and a negative error

 * code upon failure.

 DONE */

		/* was not compressible.

 See the comment at receive_bitmap() */

				/* write_bm did fail! Leave full sync flag set in Meta P_DATA

				 * but otherwise process as per normal - need to tell other

/**

 * _drbd_send_ack() - Sends an ack packet

 * @peer_device:	DRBD peer device.

 * @cmd:		Packet command code.

 * @sector:		sector, needs to be in big endian byte order

 * @blksize:		size in byte, needs to be in big endian byte order

 * @block_id:		Id, big endian byte order

/* dp->sector and dp->block_id already/still in network byte order,

 * data_size is payload size according to dp->head,

/**

 * drbd_send_ack() - Sends an ack packet

 * @peer_device:	DRBD peer device

 * @cmd:		packet command code

 * @peer_req:		peer request

/* This function misuses the block_id field to signal if the blocks

 FIXME: Put the digest into the preallocated socket buffer.  */

 unused */;

 unused */;

/* called on sndtimeo

 * returns false if we should retry,

 * true if we think connection is dead

 long elapsed = (long)(jiffies - device->last_received); */

 && (device->state == R_PRIMARY) */;

/* The idea of sendpage seems to be to put some kind of reference

 * to the page into the skb, and to hand it over to the NIC. In

 * this process get_page() gets called.

 *

 * As soon as the page was really sent over the network put_page()

 * gets called by some part of the network layer. [ NIC driver? ]

 *

 * [ get_page() / put_page() increment/decrement the count. If count

 *   reaches 0 the page will be freed. ]

 *

 * This works nicely with pages from FSs.

 * But this means that in protocol A we might signal IO completion too early!

 *

 * In order not to corrupt data during a resync we must make sure

 * that we do not reuse our own buffer pages (EEs) to early, therefore

 * we have the net_ee list.

 *

 * XFS seems to have problems, still, it submits pages with page_count == 0!

 * As a workaround, we disable sendpage on pages

 * with page_count == 0 or PageSlab.

	/* e.g. XFS meta- & log-data is in slab pages, which have a

	 * page_count of 0 and/or have PageSlab() set.

	 * we cannot use send_page for those, as that does get_page();

	 * put_page(); and would cause either a VM_BUG directly, or

	 * __page_cache_release a page that would actually still be referenced

 THINK && device->cstate >= C_CONNECTED*/);

 hint all but last page with MSG_MORE */

 REQ_OP_WRITE_SAME has only one segment */

 hint all but last page with MSG_MORE */

 REQ_OP_WRITE_SAME has only one segment */

 hint all but last page with MSG_MORE */

/* Used to send write or TRIM aka REQ_OP_DISCARD requests

 * R_PRIMARY -> Peer	(P_DATA, P_TRIM)

		/* During resync, request an explicit write ack,

		/* this will only work if DRBD_FF_WSAME is set AND the

		 * handshake agreed that all nodes and backend devices are

	/* our digest is still only over the payload.

		/* For protocol A, we have to memcpy the payload into

		 * socket buffers, as we may complete right away

		 * as soon as we handed it over to tcp, at which point the data

		 * pages may become invalid.

		 *

		 * For data-integrity enabled, we copy it as well, so we can be

		 * sure that even if the bio pages may still be modified, it

		 * won't change the data on the wire, thus if the digest checks

		 * out ok after sending on this side, but does not fit on the

		 * receiving side, we sure have detected corruption elsewhere.

 double check digest, sometimes buffers have been modified in flight. */

			/* 64 byte, 512 bit, is the largest digest size

		} /* else if (digest_size > 64) {

		     ... Be noisy about digest too large ...

 locked by drbd_prepare_command() */

/* answer packet, used to send data back for read requests:

 *  Peer       -> (diskless) R_PRIMARY   (P_DATA_REPLY)

 *  C_SYNC_SOURCE -> C_SYNC_TARGET         (P_RS_DATA_REPLY)

 unused */

 locked by drbd_prepare_command() */

/*

  drbd_send distinguishes two cases:



  Packets sent via the data socket "sock"

  and packets sent via the meta data socket "msock"



		    sock                      msock

  -----------------+-------------------------+------------------------------

  timeout           conf.timeout / 2          conf.timeout / 2

  timeout action    send a ping via msock     Abort communication

					      and close all sockets

/*

 * you must have down()ed the appropriate [m]sock_mutex elsewhere!

 THINK  if (signal_pending) return ... ? */

/*

 * drbd_send_all  -  Send an entire buffer

 *

 * Returns 0 upon success and a negative error value otherwise.

	/* to have a stable device->state.role

 need to hold resource->req_lock */

	/* Beware! The actual layout differs

	/* the memset(,0,) did most of this.

 maybe never allocated. */

 D_ASSERT(device, atomic_read(&drbd_pp_vacant)==0); */

 caches */

 mempools */

 in case we allocated some */

 caution. no locking. */

 paranoia asserts */

 end paranoia asserts */

	/* cleanup stuff that may have been allocated during

 device->p_uuid = NULL; */

 should no longer be there. */

	/* not for_each_connection(connection, resource):

	 * those may have been cleaned up and disassociated already.

/* One global retry thread, if we need to push back some bio and have it

 * reinserted through our make request function.

		/* We still need to put one kref associated with the

		 * "completion_ref" going zero in the code path that queued it

		 * here.  The request object may still be referenced by a

		 * frozen local req->private_bio, in case we force-detached.

		/* A single suspended or otherwise blocking device may stall

		 * all others as well.  Fortunately, this code path is to

		 * recover from a situation that "should not happen":

		 * concurrent writes in multi-primary setup.

		 * In a "normal" lifecycle, this workqueue is supposed to be

		 * destroyed without ever doing anything.

		 * If it turns out to be an issue anyways, we can do per

		 * resource (replication group) or per device (minor) retry

		 * workqueues instead.

		/* We are not just doing submit_bio_noacct(),

/* called via drbd_req_put_completion_ref(),

	/* Drop the extra reference that would otherwise

	 * have been dropped by complete_master_bio.

	/* first remove proc,

	 * drbdsetup uses it's presence to detect

	 * whether DRBD is loaded.

	 * If we would get stuck in proc removal,

	 * but have netlink already deregistered,

	 * some drbdsetup commands may wait forever

	 * for an answer.

 not _rcu since, no other updater anymore. Genl already unregistered */

 silently ignore cpu mask on UP kernel */

 So what. mask it out. */

 retcode = ERR_CPU_MASK_PARSE; */

 caller must be under adm_mutex */

	/* opencoded create_singlethread_workqueue(),

 GFP_KERNEL, we are outside of all write-out paths */

	/* Setting the max_hw_sectors to an odd value of 8kibyte here

 inherit the connection state */

 move to create_peer_device() */

 move to free_peer_device() */

	/*

	 * allocate all necessary structs

 play safe for drbd_cleanup */

 Success! */

 so debugfs does not need to mutex_lock() */

 meta data management */

 aligned 4kByte */

 last agreed size. */

 UUIDs. */

 MDF */

 offset to this block */

 important for restoring the AL (userspace) */

 `-- act_log->nr_elements <-- ldev->dc.al_extents */

 offset to the bitmap, from here */

 BM_BLOCK_SIZE */

 last peer max_bio_size */

 see al_tr_number_to_on_disk_sector() */

 this was a try anyways ... */

/**

 * drbd_md_sync() - Writes the meta data super block if the MD_DIRTY flag bit is set

 * @device:	DRBD device.

 Don't accidentally change the DRBD meta data layout. */

 timer may be rearmed by drbd_md_mark_dirty() now. */

	/* We use here D_FAILED and not D_ATTACHING because we try to write

	/* Update device->ldev->md.la_size_sect,

 both not set: default to old fixed size activity log */

 some paranoia plausibility checks */

 we need both values to be set */

	/* Upper limit of activity log area, to avoid potential overflow

	 * problems in al_tr_number_to_on_disk_sector(). As right now, more

	 * than 72 * 4k blocks total only increases the amount of history,

	/* Lower limit: we need at least 8 transaction slots (32kB)

	/* The on-disk size of the activity log, calculated from offsets, and

	 * the size of the activity log calculated from the stripe settings,

	 * should match.

	 * Though we could relax this a bit: it is ok, if the striped activity log

	 * fits in the available on-disk activity log size.

	 * Right now, that would break how resize is implemented.

	 * TODO: make drbd_determine_dev_size() (and the drbdmeta tool) aware

 old fixed size meta data is exactly that: fixed. */

 should be aligned, and at least 32k */

	/* should fit (for now: exactly) into the available on-disk space;

 again, should be aligned */

 FIXME check for device grow with flex external meta data? */

 can the available bitmap space cover the last agreed device size? */

/**

 * drbd_md_read() - Reads in the meta data super block

 * @device:	DRBD device.

 * @bdev:	Device from which the meta data should be read in.

 *

 * Return NO_ERROR on success, and an enum drbd_ret_code in case

 * something goes wrong.

 *

 * Called exactly once during drbd_adm_attach(), while still being D_DISKLESS,

 * even before @bdev is assigned to @device->ldev.

	/* First, figure out where our meta data superblock is located,

	/* Even for (flexible or indexed) external meta data,

	 * initially restrict us to the 4k superblock for now.

		/* NOTE: can't do normal error processing here as this is

 btw: that's Activity Log clean, not "all" clean. */

 convert to in_core endian */

/**

 * drbd_md_mark_dirty() - Mark meta data super block as dirty

 * @device:	DRBD device.

 *

 * Call this function if you change anything that should be written to

 * the meta-data super block. This function sets MD_DIRTY, and starts a

 * timer that ensures that within five seconds you have to call drbd_md_sync().

/**

 * drbd_uuid_new_current() - Creates a new current UUID

 * @device:	DRBD device.

 *

 * Creates a new current UUID, and rotates the old current UUID into

 * the bitmap slot. Causes an incremental resync upon next connect.

 get it to stable storage _now_ */

/**

 * drbd_bmio_set_n_write() - io_fn for drbd_queue_bitmap_io() or drbd_bitmap_io()

 * @device:	DRBD device.

 *

 * Sets all bits in the bitmap and writes the whole bitmap to stable storage.

/**

 * drbd_bmio_clear_n_write() - io_fn for drbd_queue_bitmap_io() or drbd_bitmap_io()

 * @device:	DRBD device.

 *

 * Clears all bits in the bitmap and writes the whole bitmap to stable storage.

/**

 * drbd_queue_bitmap_io() - Queues an IO operation on the whole bitmap

 * @device:	DRBD device.

 * @io_fn:	IO callback to be called when bitmap IO is possible

 * @done:	callback to be called after the bitmap IO was performed

 * @why:	Descriptive text of the reason for doing the IO

 * @flags:	Bitmap flags

 *

 * While IO on the bitmap happens we freeze application IO thus we ensure

 * that drbd_set_out_of_sync() can not be called. This function MAY ONLY be

 * called from worker context. It MUST NOT be used while a previous such

 * work is still pending!

 *

 * Its worker function encloses the call of io_fn() by get_ldev() and

 * put_ldev().

	/* don't wait for pending application IO if the caller indicates that

/**

 * drbd_bitmap_io() -  Does an IO operation on the whole bitmap

 * @device:	DRBD device.

 * @io_fn:	IO callback to be called when bitmap IO is possible

 * @why:	Descriptive text of the reason for doing the IO

 * @flags:	Bitmap flags

 *

 * freezes application IO while that the actual IO operations runs. This

 * functions MAY NOT be called from worker context.

 Only suspend io, if some operation is supposed to be locked out */

	/* THINK may need to become several global tables

	 * when we want to support more than

		/* enum drbd_packet, but not commands - obsoleted flags:

		 *	P_MAY_IGNORE

		 *	P_MAX_OPT_CMD

 too big for the array: 0xfffX */

/**

 * drbd_wait_misc  -  wait for a request to make progress

 * @device:	device associated with the request

 * @i:		the struct drbd_interval embedded in struct drbd_request or

 *		struct drbd_peer_request

 Indicate to wake up device->misc_wait on progress.  */

/* Fault insertion support including random number generator shamelessly

 prime */

 prime */

/*

 * Crude but fast random-number generator.  Uses a linear congruential

 * generator, with occasional help from get_random_bytes().

	/* DRBD built from external sources has here a reference to the

 SPDX-License-Identifier: GPL-2.0-or-later

/*

   drbd_req.c



   This file is part of DRBD by Philipp Reisner and Lars Ellenberg.



   Copyright (C) 2001-2008, LINBIT Information Technologies GmbH.

   Copyright (C) 1999-2008, Philipp Reisner <philipp.reisner@linbit.com>.

   Copyright (C) 2002-2008, Lars Ellenberg <lars.ellenberg@linbit.com>.





 one reference to be put by __drbd_make_request */

 one kref as long as completion_ref > 0 */

 Wake up any processes waiting for this request to complete.  */

	/* If called from mod_rq_state (expected normal case) or

	 * drbd_send_and_submit (the less likely normal path), this holds the

	 * req_lock, and req->tl_requests will typicaly be on ->transfer_log,

	 * though it may be still empty (never added to the transfer log).

	 *

	 * If called from do_retry(), we do NOT hold the req_lock, but we are

	 * still allowed to unconditionally list_del(&req->tl_requests),

	/* finally remove the request from the conflict detection

	/* if it was a write, we may have to set the corresponding

	 * bit(s) out-of-sync first. If it had a local part, we need to

		/* Set out-of-sync unless both OK flags are set

		 * (local only or remote failed).

		 * Other places where we set out-of-sync:

		/* There is a special case:

		 * we may notice late that IO was suspended,

		 * and postpone, or schedule for retry, a write,

		 * before it even was submitted or sent.

		 * In that case we do not want to touch the bitmap at all.

		/* one might be tempted to move the drbd_al_complete_io

		 * to the local io completion callback drbd_request_endio.

		 * but, if this was a mirror write, we may only

		 * drbd_al_complete_io after this is RQ_NET_DONE,

		 * otherwise the extent could be dropped from the al

		 * before it has actually been written on the peer.

		 * if we crash before our peer knows about the request,

		 * but after the extent has been dropped from the al,

		 * we would forget to resync the corresponding extent.

 must hold resource->req_lock */

 no point closing an epoch, if it is empty, anyways. */

/* Helper for __req_mod().

 * Set m->bio to the master bio, if it is fit to be completed,

 * or leave it alone (it is initialized to NULL in __req_mod),

 * if it has already been completed, or cannot be completed yet.

 * If m->bio is set, the error status to be returned is placed in m->error.

	/* we must not complete the master bio, while it is

	 *	still being processed by _drbd_send_zc_bio (drbd_send_dblock)

	 *	not yet acknowledged by the peer

	 *	not yet completed by the local io subsystem

	 * these flags may get cleared in any order by

	 *	the worker,

	 *	the receiver,

	 *	the bio_endio completion callbacks.

	/*

	 * figure out whether to report success or failure.

	 *

	 * report success when at least one of the operations succeeded.

	 * or, to put the other way,

	 * only report failure, when both operations failed.

	 *

	 * what to do about the failures is handled elsewhere.

	 * what we need to do here is just: complete the master_bio.

	 *

	 * local completion error, if any, has been stored as ERR_PTR

	 * in private_bio within drbd_request_endio.

	/* Before we can signal completion to the upper layers,

	 * we may need to close the current transfer log epoch.

	 * We are within the request lock, so we can simply compare

	 * the request epoch number with the current transfer log

	 * epoch number.  If they match, increase the current_tle_nr,

	 * and reset the transfer log epoch write_cnt.

 Update disk stats */

	/* If READ failed,

	 * have it be pushed back to the retry work queue,

	 * so it will re-enter __drbd_make_request(),

	 * and be re-assigned to a suitable local or remote path,

	 * or failed if we do not have access to good data anymore.

	 *

	 * Unless it was failed early by __drbd_make_request(),

	 * because no path was available, in which case

	 * it was not even added to the transfer_log.

	 *

	 * read-ahead may fail, and will not be retried.

	 *

	 * WRITE should have used all available paths already.

		/* We leave it in the tree, to be able to verify later

		 * write-acks in protocol != C during resync.

		 * But we mark it as "complete", so it won't be counted as

	/* Either we are about to complete to upper layers,

	 * or we will restart this request.

	 * In either case, the request object will be destroyed soon,

 still holds resource->req_lock */

	/* local completion may still come in later,

		/* don't destroy the req object just yet,

/* I'd like this to be the only place that manipulates

 apply */

 no change? */

 intent: get references */

 wait for the DONE */

 potentially already completed in the ack_receiver thread */

 progress: put references */

		/* in ahead/behind mode, or just in case,

		 * before we finally destroy this request,

 potentially complete and destroy */

 If we made progress, retry conflicting peer requests, if any. */

/* Helper for HANDED_OVER_TO_NETWORK.

 * Is this a protocol A write (neither WRITE_ACK nor RECEIVE_ACK expected)?

 * Is it also still "PENDING"?

 * --> If so, clear PENDING and set NET_OK below.

 * If it is a protocol A write, but not RQ_PENDING anymore, neg-ack was faster

/* obviously this could be coded as many single functions

 * instead of one huge switch,

 * or by putting the code directly in the respective locations

 * (as it has been before).

 *

 * but having it this way

 *  enforces that it is all in this one place, where it is easier to audit,

 *  it makes it obvious that whatever "event" "happens" to a request should

 *  happen "atomically" within the req_lock,

 *  and it enforces that we have to think in a very structured manner

 *  about the "events" that may happen to a request during its life time ...

	/* does not happen...

	 * initialization done in drbd_req_new

	case CREATED:

		break;

 via network */

		/* reached via __drbd_make_request

 locally */

 reached via __drbd_make_request */

 it is legal to fail read-ahead, no __drbd_chk_io_error in that case. */

		/* I'd rather not detach from local disk just because it

		/* READ, and

		 * no local disk,

		 * or target area marked as invalid,

		/* from __drbd_make_request

		/* So we can verify the handle in the answer packet.

		 * Corresponding drbd_remove_request_interval is in

 assert something? */

 from __drbd_make_request only */

		/* Corresponding drbd_remove_request_interval is in

		/* NOTE

		 * In case the req ended up on the transfer log before being

		 * queued on the worker, it could lead to this request being

		 * missed during cleanup after connection loss.

		 * So we have to do both operations here,

		 * within the same lock that protects the transfer log.

		 *

		 * _req_add_to_epoch(req); this has to be after the

		 * _maybe_start_new_epoch(req); which happened in

		 * __drbd_make_request, because we now may set the bit

		 * again ourselves to close the current epoch.

		 *

		/* otherwise we may lose an unplug, which may cause some remote

		 * io-scheduler timeout to expire, increasing maximum latency,

 queue work item to send data */

 close the epoch, in case it outgrew the limit */

		/* real cleanup will be done from tl_clear.  just update flags

 assert something? */

			/* this is what is dangerous about protocol A:

		/* It is still not yet RQ_NET_DONE until the

		 * corresponding epoch barrier got acked as well,

		/* Was not set PENDING, no longer QUEUED, so is now DONE

 transfer log cleanup after connection loss */

		/* for superseded conflicting writes of multiple primaries,

		 * there is no need to keep anything in the tl, potential

		 * node crashes are covered by the activity log.

		 *

		 * If this request had been marked as RQ_POSTPONED before,

		 * it will actually not be completed, but "restarted",

		/* Normal operation protocol C: successfully written on peer.

		 * During resync, even in protocol != C,

		 * we requested an explicit write ack anyways.

		 * Which means we cannot even assert anything here.

		 * Nothing more to do here.

		 * We want to keep the tl in place for all protocols, to cater

		/* protocol B; pretends to be successfully written on peer.

		 * see also notes above in HANDED_OVER_TO_NETWORK about

		/* If this node has already detected the write conflict, the

		 * worker will be waiting on misc_wait.  Wake it up once this

		 * request has completed locally.

		/* Do not clear RQ_NET_PENDING. This request will make further

		 * progress via restart_conflicting_writes() or

 always succeeds in this call path */

 Simply complete (local only) READs. */

		/* If RQ_NET_OK is already set, we got a P_WRITE_ACK or P_RECV_ACK

		   before the connection loss (B&C only); only P_BARRIER_ACK

		   (or the local completion?) was missing when we suspended.

		   Throwing them out of the TL here by pretending we got a BARRIER_ACK.

			/* FIXME could this possibly be a req->dw.cb == w_send_out_of_sync?

 w.cb expected to be w_send_dblock, or w_send_read_req */

 else: FIXME can this happen? */

 to BARRIER_ACKED */

 barrier ack for READ requests does not make sense */

			/* barrier came in before all requests were acked.

			 * this is bad, because if the connection is lost now,

		/* Allowed to complete requests, even while suspended.

		 * As this is called for all requests within a matching epoch,

		 * we need to filter, and only set RQ_NET_DONE for those that

/* we may do a local read if:

 * - we are consistent (of course),

 * - or we are generally inconsistent,

 *   BUT we are still/already IN SYNC for this area.

 *   since size may be bigger than BM_BLOCK_SIZE,

 *   we may need to check several bits.

 stripe_shift = 15 */

 stripe_shift = 20 */

/*

 * complete_conflicting_writes  -  wait for any conflicting write requests

 *

 * The write_requests tree contains all active write requests which we

 * currently know about.  Wait for any requests to complete which conflict with

 * the new one.

 *

 * Only way out: remove the conflicting intervals from the tree.

 Ignore, if already completed to upper layers. */

			/* Handle the first found overlap.  After the schedule

 if any */

 Indicate to wake up device->misc_wait on progress.  */

 called within req_lock */

 nothing to do ... */

	/* If I don't even have good local storage, we can not reasonably try

	 * to pull ahead of the peer. We also need the local reference to make

	 * sure device->act_log is there.

 start a new epoch for non-mirrored writes */

nc->on_congestion == OC_DISCONNECT */

/* If this returns false, and req->private_bio is still set,

 * this should be submitted locally.

 *

 * If it returns false, but req->private_bio is not set,

 * we do not have access to good data :(

 *

 * Otherwise, this destroys req->private_bio, if any,

 * and returns true.

	/* TODO: improve read balancing decisions, take into account drbd

 submit locally */

	/* Before proto 96 that was >= CONNECTED instead of >= C_WF_BITMAP_T.

	   That is equivalent since before 96 IO was frozen in the C_WF_BITMAP*

	/* pdsk = D_INCONSISTENT as a consequence. Protocol 96 check not necessary

/* returns number of connections (== 1, for drbd 8.4)

 * expected to actually write this data,

	/* Need to replicate writes.  Unless it is an empty flush,

	 * which is better mapped to a DRBD P_BARRIER packet,

	 * also for drbd wire protocol compatibility reasons.

	 * If this was a flush, just start a new epoch.

	 * Unless the current epoch was empty anyways, or we are not currently

 The only size==0 bios we expect are empty flushes. */

	/* State may have changed since we grabbed our reference on the

	 * ->ldev member. Double check, and short-circuit to endio.

	 * In case the last activity log transaction failed to get on

	 * stable storage, and this is a WRITE, we may not even submit

 WRITE */]);

 do_submit() may sleep internally on al_wait, too */

/* returns the new drbd_request pointer, if the caller is expected to

 * drbd_send_and_submit() it (to save latency), or NULL if we queued the

 * request on the submitter thread.

 * Returns ERR_PTR(-ENOMEM) if we cannot allocate a drbd_request.

 allocate outside of all locks; */

		/* only pass the error to the upper layers.

 Update disk stats */

 process discards always from our submitter thread */

/* Require at least one path to current data.

 * We don't want to allow writes on C_STANDALONE D_INCONSISTENT:

 * We would not allow to read what was written,

 * we would not have bumped the data generation uuids,

 * we would cause data divergence for all the wrong reasons.

 *

 * If we don't see at least one D_UP_TO_DATE, we will fail this request,

 * which either returns EIO, or, if OND_SUSPEND_IO is set, suspends IO,

 * and queues for retry later.

 do we need more? */

	/* In case the sender did not process it yet, raise the flag to

 but also queue a generic unplug */

	/* A lot of text to say

	/* Will be sent to some peer.

		/* This may temporarily give up the req_lock,

		 * but will re-aquire it before it returns here.

 no more giving up req_lock from now on! */

		/* check for congestion, and potentially stop sending

 push back and retry: */

	/* We fail READ early, if we can not serve it.

	 * We must do this before req is registered on any lists.

 which transfer log epoch does this belong to? */

	/* no point in adding empty flushes to the transfer log,

		/* We either have a private_bio, or we can read from remote.

	/* If it took the fast path in drbd_request_prepare, add it here.

 needs to be marked within the same spinlock */

 but we need to give up the spinlock to submit */

		/* A write may have been queued for send_oos, however.

	/* Even though above is a kref_put(), this is safe.

	 * As long as we still need to submit our private bio,

	 * we hold a completion ref, and the request cannot disappear.

	 * If however this request did not even have a private bio to submit

	 * (e.g. remote read), req may already be invalid now.

 rw != WRITE should not even end up here! */

 from drbd_make_request() */

 to be submitted after next AL-transaction commit */

 blocked by resync requests */

 grab new incoming requests */

 move used-to-be-busy back to front of incoming */

			/* If all currently "hot" activity log extents are kept busy by

			 * incoming requests, we still must not totally starve new

			 * requests to "cold" extents.

			 * Something left on &incoming means there had not been

			 * enough update slots available, and the activity log

			 * has been marked as "starving".

			 *

			 * Try again now, without looking for new requests,

			 * effectively blocking all new requests until we made

			 * at least _some_ progress with what we currently have.

			/* Nothing moved to pending, but nothing left

			 * on incoming: all moved to busy!

		/* If the transaction was full, before all incoming requests

		 * had been processed, skip ahead to commit, and iterate

		 * without splicing in more incoming requests from upper layers.

		 *

		 * Else, if all incoming have been processed,

		 * they have become either "pending" (to be submitted after

		 * next transaction commit) or "busy" (blocked by resync).

		 *

		 * Maybe more was queued, while we prepared the transaction?

		 * Try to stuff those into this transaction as well.

		 * Be strictly non-blocking here,

		 * we already have something to commit.

		 *

		 * Commit if we don't make any more progres.

			/* It is ok to look outside the lock,

	/*

	 * what we "blindly" assume:

	/* We received an ACK already (or are using protocol A),

	 * but are waiting for the epoch closing barrier ack.

	 * Check if we sent the barrier already.  We should not blame the peer

	/* Worst case: we may have been blocked for whatever reason, then

	 * suddenly are able to send a lot of requests (and epoch separating

	 * barriers) in quick succession.

	 * The timestamp of the net_req may be much too old and not correspond

	 * to the sending time of the relevant unack'ed barrier packet, so

	 * would trigger a spurious timeout.  The latest barrier packet may

	 * have a too recent timestamp to trigger the timeout, potentially miss

	 * a timeout.  Right now we don't have a place to conveniently store

	 * these timestamps.

	 * But in this particular situation, the application requests are still

	 * completed to upper layers, DRBD should still "feel" responsive.

	 * No need yet to kill this connection, it may still recover.

	 * If not, eventually we will have queued enough into the network for

	 * us to block. From that point of view, the timestamp of the last sent

	 * barrier packet is relevant enough.

/* A request is considered timed out, if

 * - we have some effective timeout from the configuration,

 *   with some state restrictions applied,

 * - the oldest request is waiting for a response from the network

 *   resp. the local disk,

 * - the oldest request is in fact older than the effective timeout,

 * - the connection was established (resp. disk was attached)

 *   for longer than the timeout already.

 * Note that for 32bit jiffies and very stable connections/disks,

 * we may have a wrap around, which is catched by

 *   !time_in_range(now, last_..._jif, last_..._jif + timeout).

 *

 * Side effect: once per 32bit wrap-around interval, which means every

 * ~198 days with 250 HZ, we have a window where the timeout would need

 * to expire twice (worst case) to become effective. Good enough.

 oldest request */

 effective timeout = ko_count * timeout */

 implicit state.disk >= D_INCONSISTENT */

 Recurring timer stopped */

	/* maybe the oldest request waiting for the peer is in fact still

	 * blocking in tcp sendmsg.  That's ok, though, that's handled via the

	 * socket send timeout, requesting a ping, and bumping ko-count in

	 * we_should_drop_the_connection().

	/* check the oldest request we did successfully sent,

	/* if we don't have such request (e.g. protocoll A)

	 * check the oldest requests which is still waiting on its epoch

 evaluate the oldest peer request only in one timer! */

 do we have something to evaluate? */

	/* Reschedule timer for the nearest not already expired timeout.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

   drbd_proc.c



   This file is part of DRBD by Philipp Reisner and Lars Ellenberg.



   Copyright (C) 2001-2008, LINBIT Information Technologies GmbH.

   Copyright (C) 1999-2008, Philipp Reisner <philipp.reisner@linbit.com>.

   Copyright (C) 2002-2008, Lars Ellenberg <lars.ellenberg@linbit.com>.





 v is in kB/sec. We don't expect TiByte/sec yet. */

 cool: > GiByte/s */

	/* this is to break it at compile time when we change that, in case we

	/* note: both rs_total and rs_left are in bits, i.e. in

	 * units of BM_BLOCK_SIZE.

	/* >> 10 to prevent overflow,

		/* D'oh. Maybe a logic bug somewhere.  More likely just a race

		 * between state change and reset of rs_total.

		/* Make sure the division happens in long context.

		 * We allow up to one petabyte storage right now,

		 * at a granularity of 4k per bit that is 2**38 bits.

		 * After shift right and multiplication by 1000,

		 * this should still fit easily into a 32bit long,

		 * so we don't need a 64bit division on 32bit arch.

		 * Note: currently we don't support such large bitmaps on 32bit

		 * arch anyways, but no harm done to be prepared for it here.

/*lge

 * progress bars shamelessly adapted from driver/md/md.c

 * output looks like

 *	[=====>..............] 33.5% (23456/123456)

 *	finish: 2:20:20 speed: 6,345 (6,456) K/sec

 if more than a few GB, display in MB */

	/* see drivers/md/md.c

	 * We do not want to overflow, so the order of operands and

	 * the * 100 / 100 trick are important. We do a +1 to be

	 * safe against division by zero. We only estimate anyway.

	 *

	 * dt: time from mark until now

	 * db: blocks written from mark until now

	 * rt: remaining time

	/* Rolling marks. last_mark+1 may just now be modified.  last_mark+2 is

	 * at least (DRBD_SYNC_MARKS-2)*DRBD_SYNC_MARK_STEP old, and has at

 ------------------------ ~18s average ------------------------ */

 seconds */

 ------------------------- ~3s average ------------------------ */

 this is what drbd_rs_should_slow_down() uses */

 --------------------- long term average ---------------------- */

	/* mean speed since syncer started

		/* 64 bit:

		/* Total sectors may be slightly off for oddly

	/*

	  cs .. connection state

	  ro .. node role (local/remote)

	  ds .. disk state (local/remote)

	     protocol

	     various flags

	  ns .. network send

	  nr .. network receive

	  dw .. disk write

	  dr .. disk read

	  al .. activity log write count

	  bm .. bitmap update write count

	  pe .. pending (waiting for ack or data reply)

	  ua .. unack'd (still need to send ack or data reply)

	  ap .. application requests accepted, but not yet completed

	  ep .. number of epochs currently "on the fly", P_BARRIER_ACK pending

	  wo .. write ordering mode currently in use

	 oos .. known out-of-sync kB

 reset device->congestion_reason */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

   drbd_nl.c



   This file is part of DRBD by Philipp Reisner and Lars Ellenberg.



   Copyright (C) 2001-2008, LINBIT Information Technologies GmbH.

   Copyright (C) 1999-2008, Philipp Reisner <philipp.reisner@linbit.com>.

   Copyright (C) 2002-2008, Lars Ellenberg <lars.ellenberg@linbit.com>.





 .doit */

 int drbd_adm_create_resource(struct sk_buff *skb, struct genl_info *info);

 int drbd_adm_delete_resource(struct sk_buff *skb, struct genl_info *info);

 .dumpit */

 two. */

 two. */

 used blkdev_get_by_path, to claim our meta data device(s) */

/* Used on a fresh "drbd_adm_prepare"d reply_skb, this cannot fail: The only

 maybe: retry with larger reserve, if truncated */

/* This would be a good candidate for a "pre_doit" hook,

 * and per-family private info->pointers.

 * But we need to stay compatible with older kernels.

 * If it returns successfully, adm_ctx members are valid.

 *

 * At this point, we still rely on the global genl_lock().

 * If we want to avoid that, and allow "genl_family.parallel_ops", we may need

 * to add additional synchronization against object destruction/modification.

 genl_rcv_msg only checks for CAP_NET_ADMIN on "GENL_ADMIN_PERM" :( */

	/* put of a few bytes into a fresh skb of >= 4k will always succeed.

 parse and validate only */

		/* It was present, and valid,

 and assign stuff to the adm_ctx */

	/* We are protected by the global genl_lock().

	 * But we may explicitly drop it/retake it in drbd_adm_set_role(),

 some more paranoia, if the request was over-determined */

 still, provide adm_ctx->resource always, if possible. */

 FIXME: A future version will not allow this case. */

 address family */

 address */

	/* The helper may take some time.

 Ignore any ERRNOs we got. */

 address family */

 address */

 TODO: conn_bcast_event() ?? */

 TODO: conn_bcast_event() ?? */

 Ignore any ERRNOs we got. */

			/* We are no longer suspended due to the fencing policy.

			 * We may still be suspended due to the on-no-data-accessible policy.

		/* Else: in case we raced with a connection handshake,

		 * let the handshake figure out if we maybe can RESEND,

		 * and do not resume/fail pending requests here.

		 * Worst case is we stay suspended for now, which may be

		 * resolved by either re-establishing the replication link, or

 peer is inconsistent */

 peer got outdated, or was already outdated */

 peer was down */

 we will(have) create(d) a new UUID anyways... */

	case P_PRIMARY: /* Peer is primary, voluntarily outdate myself.

		 * This is useful when an unconnected R_SECONDARY is asked to

		/* THINK: do we need to handle this

 The script is broken ... */

 Eventually leave IO frozen */

	/* Not using

	   conn_request_state(connection, mask, val, CS_VERBOSE);

	   here, because we might were able to re-establish the connection in the

			/* In case the connection was established and droped

	/* We may have just sent a signal to this thread

	 * to get it out of some blocking network function.

	 * Clear signals; otherwise kthread_run(), which internally uses

	 * wait_on_completion_killable(), will mistake our pending signal

 Detect dead peers as soon as possible.  */

		/* in case we first succeeded to outdate,

			/* Maybe the peer is detected as dead very soon...

 Wait until nothing is on the fly :) */

 FIXME also wait for all pending P_BARRIER_ACK? */

 without copy; single bit op is atomic */

	/* writeout of activity log covered areas of the bitmap

 if this was forced, we should consider sync */

/* Initializes the md.*_offset members, so we are able to find

 * the on disk meta data.

 *

 * We currently have two possible layouts:

 * external:

 *   |----------- md_size_sect ------------------|

 *   [ 4k superblock ][ activity log ][  Bitmap  ]

 *   | al_offset == 8 |

 *   | bm_offset = al_offset + X      |

 *  ==> bitmap sectors = md_size_sect - bm_offset

 *

 * internal:

 *            |----------- md_size_sect ------------------|

 * [data.....][  Bitmap  ][ activity log ][ 4k superblock ]

 *                        | al_offset < 0 |

 *            | bm_offset = al_offset - Y |

 *  ==> bitmap sectors = Y = al_offset - bm_offset

 *

 *  Activity log size used to be fixed 32kB,

 *  but is about to become configurable.

 v07 style fixed size indexed meta data */

 just occupy the full device; unit: sectors */

 al size is still fixed */

 we need (slightly less than) ~ this much bitmap sectors: */

		/* plus the "drbd meta data super block",

 bitmap offset is adjusted by 'super' block size */

 input size is expected to be in KB */

	/* Needs 9 bytes at max including trailing NUL:

 shift + round */

/* there is still a theoretical deadlock when called from receiver

 * on an D_INCONSISTENT R_PRIMARY:

 *  remote READ does inc_ap_bio, receiver would need to receive answer

 *  packet from remote to dec_ap_bio again.

 *  receiver receive_sizes(), comes here,

 *  waits for ap_bio_cnt == 0. -> deadlock.

 * but this cannot happen, actually, because:

 *  R_PRIMARY D_INCONSISTENT, and peer's disk is unreachable

 *  (not connected, or bad/no disk on peer):

 *  see drbd_fail_request_early, ap_bio_cnt is zero.

 *  R_PRIMARY D_INCONSISTENT, and C_SYNC_TARGET:

 *  peer may not initiate a resize.

/* Note these are not to be confused with

 * drbd_adm_suspend_io/drbd_adm_resume_io,

 * which are (sub) state changes triggered by admin (drbdsetup),

 * and can be long lived.

 * This changes an device->flag, is triggered by drbd internals,

/* It needs to be a counter, since multiple threads might

/*

 * drbd_determine_dev_size() -  Sets the right device size obeying all constraints

 * @device:	DRBD device.

 *

 * Returns 0 on success, negative return values indicate errors.

 * You should call drbd_md_sync() after calling this function.

	/* We may change the on-disk offsets of our meta data below.  Lock out

	 * anything that may cause meta data IO, to avoid acting on incomplete

	 * layout changes or scribbling over meta data that is in the process

	 * of being moved.

	 *

	 * Move is not exactly correct, btw, currently we have all our meta

	 * data in core memory, to "move" it we just write it all out, there

 Lock meta-data IO */

 remember current offset and sizes */

 rs is non NULL if we should change the AL layout only */

			/* Remove "rs &&" later. This check should always be active, but

 currently there is only one error: ENOMEM! */

 racy, see comments above. */

		/* We do some synchronous IO below, which may take some time.

		 * Clear the timer, to avoid scary "timer expired!" messages,

		/* We won't change the "al-extents" setting, we just may need

		 * to move the on-disk location of the activity log ringbuffer.

		 * Lock for transaction is good enough, it may well be "dirty"

 mark current on-disk bitmap and activity log as unreliable */

 next line implicitly does drbd_suspend_io()+drbd_resume_io() */

		/* on-disk bitmap and activity log is authoritative again

 restore previous offset and sizes */

 partner's disk size. */

 last agreed size. */

 my size */

/*

 * drbd_check_al_size() - Ensures that the AL is of the right size

 * @device:	DRBD device.

 *

 * Returns -EBUSY if current al lru is still used, -ENOMEM when allocation

 * failed, and 0 on success. You should call drbd_md_sync() after you called

 * this function.

 we changed device->act_log->nr_elemens */

	/* when we introduced REQ_WRITE_SAME support, we also bumped

 before, with DRBD <= 8.4.6, we only allowed up to one AL_EXTENT_SIZE. */

	/* q = drbd device queue (device->rq_queue)

	 * b = backing device queue (device->ldev->backing_bdev->bd_disk->queue),

	 *     or NULL if diskless

		/* We don't care for the granularity, really.

		 * Stacking limits below should fix it for the local

		 * device.  Whether or not it is a suitable granularity

		 * on the remote device is not our problem, really. If

		 * you care, you need to use devices with similar

	/* To avoid confusion, if this queue does not support discard, clear

	 * max_discard_sectors, which is what lsblk -D reports to the user.

	 * Older kernels got this wrong in "stack limits".

	/* Fixup max_write_zeroes_sectors after blk_stack_limits():

	 * if we can handle "zeroes" efficiently on the protocol,

	 * we want to do that, even if our backend does not announce

	/* If the peer announces WZEROES support, use it.  Otherwise, rather

 logical block size; queue_logical_block_size(NULL) is 512 */

 rather disable write same than trigger some BUG_ON later in the scsi layer. */

			/* We cannot change the logical block size of an in-use queue.

			 * We can only hope that access happens to be properly aligned.

			/* If we introduce an open-coded write-same loop on the receiving side,

 This is the workaround for "bio would need to, but cannot, be split" */

 Eventually last known value, from volatile memory */

 Eventually last known value, from meta data */

	/* We may ignore peer limits if the peer is modern enough.

	   Because new from 8.3.8 onwards the peer can use multiple

 Correct old drbd (up to 8.3.7) if it believes it can do more than 32KiB */

 drbd 8.3.8 onwards, before 8.4.0 */

		/* We may later detach and re-attach on a disconnected Primary.

		 * Avoid this setting to jump back in that case.

		 * We want to store what we know the peer DRBD can handle,

 Starts the worker thread */

 if still unconfigured, stops worker again. */

		/* ack_receiver thread and ack_sender workqueue are implicitly

 Make sure IO is suspended before calling this function(). */

	/* This is limited by 16 bit "slot" numbers,

	 * and by available on-disk context storage.

	 *

	 * Also (u16)~0 is special (denotes a "free" extent).

	 *

	 * One transaction occupies one 4kB on-disk block,

	 * we have n such blocks in the on disk ring buffer,

	 * the "current" transaction may fail (n-1),

	 * and there is 919 slot numbers context information per transaction.

	 *

	 * 72 transaction blocks amounts to more than 2**16 context slots,

	 * so cap there first.

 disable feature */

	/* If IO completion is currently blocked, we would likely wait

	/* we also need a disk

		/* Could be just "busy". Ignore?

	/*

	 * meta_dev_idx >= 0: external fixed size, possibly multiple

	 * drbd sharing one meta device.  TODO in that case, paranoia

	 * check that [md_bdev, meta_dev_idx] is not yet used by some

	 * other drbd minor!  (if you use drbd.conf + drbdadm, that

	 * should check it for you already; but if you don't, or

	 * someone fooled it, we need to double check here)

		/* claim ptr: device, if claimed exclusively; shared drbd_m_holder,

		/* avoid double bd_claim_by_disk() for the same (source,target) tuple,

 new_backing_conf */

 if you want to reconfigure, please tear down first */

	/* It may just now have detached because of IO error.  Make sure

	 * drbd_ldev_destroy is done already, we may end up here very fast,

	 * e.g. if someone calls attach from the on-io-error handler,

 make sure there is no leftover from previous force-detach attempts */

 and no leftover from previously aborted resync or verify, either */

 allocation not in the IO path, drbdsetup context */

	/* Read our meta data super block early.

 at least one MB, otherwise it does not make sense */

	/* Make sure the new disk is big enough

 also wait for the last barrier ack. */

	/* FIXME see also https://daiquiri.linbit/cgi-bin/bugzilla/show_bug.cgi?id=171

	 * We need a way to either ignore barrier acks for barriers sent before a device

	 * was attached, or a way to wait for all pending barrier acks to come in.

	 * As barriers are counted per resource,

	 * we'd need to suspend io on all devices of a resource.

 and for any other previously queued work */

 Since we are diskless, fix the activity log first... */

 Prevent shrinking of consistent devices ! */

	/* Reset the "barriers don't work" bits here, then force meta data to

	/* Point of no return reached.

	 * Devices and memory are no longer released by error cleanup below.

	 * now device takes over responsibility, and the state engine should

	/* If I am currently not R_PRIMARY,

	 * but meta data primary indicator is set,

	 * I just now recover from a hard crash,

	 * and have been R_PRIMARY before that crash.

	 *

	 * Now, if I had no connection before that crash

	 * (have been degraded R_PRIMARY), chances are that

	 * I won't find my peer now either.

	 *

	 * In that case, and _only_ in that case,

	 * we use the degr-wfc-timeout instead of the default,

	 * so we can automatically recover from a crash of a

	 * degraded but active "cluster" after a certain timeout.

 IO is still suspended here... */

	/* If MDF_CONSISTENT is not set go into inconsistent state,

	   otherwise investigate MDF_WasUpToDate...

	   If MDF_WAS_UP_TO_DATE is not set go into D_OUTDATED disk state,

	   otherwise into D_CONSISTENT state.

	/* All tests on MDF_PRIMARY_IND, MDF_CONNECTED_IND,

	   MDF_CONSISTENT and MDF_WAS_UP_TO_DATE must happen before

	   this point, because drbd_request_state() modifies these

	/* In case we are C_CONNECTED postpone any decision on the new disk

		/* We expect to receive up-to-date UUIDs soon.

		   To avoid a race in receive_state, free p_uuid while

/* Detaching the disk is a process in multiple stages.  First we need to lock

 * out application IO, in-flight IO, IO stuck in drbd_al_begin_io.

 * Then we transition to D_DISKLESS, and wait for put_ldev() to return all

 * internal references as well.

 connection->peer_devices protected by genl_lock() here */

 online verify running */

 re-sync running */

 re-sync running */

 online verify running */

 Do this without trying to take connection->data.mutex again.  */

	/* No need for _rcu here. All reconfiguration is

	 * strictly serialized on genl_lock(). We are protected against

 allocation not in the IO path, drbdsetup / netlink process context */

 Our state checking code wants to see the peer outdated. */

 lost connection before graceful disconnect succeeded */

 The peer probably wants to see us outdated. */

 no special handling necessary */

		/* No one else can reconfigure the network while I am here.

		 * The state handling only uses drbd_thread_stop_nowait(),

		 * we want to really wait here until the receiver is no more.

		/* Race breaker.  This additional state change request may be

		 * necessary, if this was a forced disconnect during a receiver

		 * restart.  We may have "killed" the receiver thread just

		 * after drbd_receiver() returned.  Typically, we should be

		 * C_STANDALONE already, now, and this becomes a no-op.

		/* Unlike in DRBD 9, the state engine has generated

 I am sync source */

 enum drbd_ret_code rsp. enum drbd_state_rv */

	/* If there is still bitmap IO pending, probably because of a previous

	 * resync just being finished, wait for it before requesting a new resync.

	/* If we happen to be C_STANDALONE R_SECONDARY, just change to

	 * D_INCONSISTENT, and set all bits in the bitmap.  Otherwise,

	 * try to start a resync handshake as sync target for full sync.

 drbd_ret_code, drbd_state_rv */

	/* If there is still bitmap IO pending, probably because of a previous

	 * resync just being finished, wait for it before requesting a new resync.

	/* If we happen to be C_STANDALONE R_PRIMARY, just set all bits

	 * in the bitmap.  Otherwise, try to start a resync handshake

	 * as sync source for full sync.

		/* The peer will get a resync upon connect anyways. Just make that

 enum drbd_ret_code rsp. enum drbd_state_rv */

			/* This is effectively a multi-stage "forced down".

			 * The NEW_CUR_UUID bit is supposedly only set, if we

			 * lost the replication connection, and are configured

			 * to freeze IO and wait for some fence-peer handler.

			 * So we still don't have a replication connection.

			 * And now we don't have a local disk either.  After

			 * resume, we will fail all pending and new IO, because

			 * we don't have any data anymore.  Which means we will

			 * eventually be able to terminate all users of this

			 * device, and then take it down.  By bumping the

			 * "effective" data uuid, we make sure that you really

			 * need to tear down before you reconfigure, we will

			 * the refuse to re-connect or re-attach (because no

			 * matching real data uuid exists).

/*

 * The generic netlink dump callbacks are called outside the genl_lock(), so

 * they cannot use the simple attribute parsing code which uses global

 * attribute tables.

 resource was probably deleted */

 only one iteration */

 no more devices */

 connection was probably deleted */

 only one iteration */

 resource was probably deleted */

 no more resources */

 FIXME: MDF_PEER_FENCING? */

 peer device was probably deleted */

 Make peer_device point to the list head (not the first entry). */

 only one iteration */

/*

 * Return the connection of @resource if @resource has exactly one connection.

 for sizeof(si->member); */

	/* If sib != NULL, this is drbd_bcast_event, which anyone can listen

	 * to.  So we better exclude_sensitive information.

	 *

	 * If sib == NULL, this is drbd_adm_get_status, executed synchronously

	 * in the context of the requesting user process. Exclude sensitive

	 * information, unless current has superuser.

	 *

	 * NOTE: for drbd_adm_get_status_all(), this is a netlink dump, and

	 * relies on the current implementation of netlink_dump(), which

	 * executes the dump callback successively from netlink_recvmsg(),

	/* We need to add connection name and volume number information still.

	/* Open coded, deferred, iteration:

	 * for_each_resource_safe(resource, tmp, &drbd_resources) {

	 *      connection = "first connection of resource or undefined";

	 *	idr_for_each_entry(&resource->devices, device, i) {

	 *	  ...

	 *	}

	 * }

	 * where resource is cb->args[0];

	 * and i is cb->args[1];

	 *

	 * cb->args[2] indicates if we shall loop over all resources,

	 * or just dump all volumes of a single resource.

	 *

	 * This may miss entries inserted after this dump started,

	 * or entries deleted before they are reached.

	 *

	 * We need to make sure the device won't disappear while

	 * we are looking at it, and revalidate our iterators

	 * on each iteration.

 synchronize with conn_create()/drbd_destroy_connection() */

 revalidate iterator position */

 first iteration */

			/* No more volumes to dump on this resource.

 Did we dump any volume of this resource yet? */

				/* If we reached the end of the list,

				 * or only a single resource dump was requested,

			/* This is a connection without a single volume.

			 * Suprisingly enough, it may have a network

 where to start the next iteration */

	/* No more resources/volumes/minors found results in an empty skb.

/*

 * Request status of all resources, or of all volumes within a single resource.

 *

 * This is a dump, as the answer may not fit in a single reply skb otherwise.

 * Which means we cannot use the family->attrbuf or other such members, because

 * dump is NOT protected by the genl_lock().  During dump, we only have access

 * to the incoming skb, and need to opencode "parsing" of the nlattr payload.

 *

 * Once things are setup properly, we call into get_one_status().

 Is this a followup call? */

		/* ... of a single resource dump,

 DONE. */

	/* First call (from netlink_dump_start).  We need to figure out

 No explicit context given.  Dump all. */

 context given, but no name present? */

 get_one_status() revalidates the resource */

	/* prime iterators, and set "filter" mode mark:

 cb->args[1] = 0; passed in this way. */

 resume from last known position, if possible */

 w_make_ov_request expects position to be aligned */

	/* If there is still bitmap IO pending, e.g. previous resync or verify

 Protects us against serialized state changes. */

 this is "skip initial sync", assume to be clean */

 Rotate UI_BITMAP to History 1, etc... */

 New current, previous to UI_BITMAP */

	/* if we want to use these in sysfs/configfs/debugfs some day,

 else: still NO_ERROR */

 not yet safe for genl_family.parallel_ops */

	/* drbd_adm_prepare made sure already

 else: still NO_ERROR */

	    /* no need to be device->state.conn == C_STANDALONE &&

	     * we may want to delete a minor from a live replication group.

		/* If the state engine hasn't stopped the sender thread yet, we

		 * need to flush the sender work queue before generating the

	/* The state engine has stopped the sender thread, so we don't

	 * need to flush the sender work queue before generating the

	/* Make sure all threads have actually stopped: state handling only

 enum drbd_ret_code rsp. enum drbd_state_rv */

 demote */

 detach */

 delete volumes */

 "can not happen" */

 cannot happen, but anyways. */

 msg has been consumed or freed in netlink_broadcast() */

 skb has been consumed or freed in netlink_broadcast() */

 skb has been consumed or freed in netlink_broadcast() */

 skb has been consumed or freed in netlink_broadcast() */

 skb has been consumed or freed in netlink_broadcast() */

 skb has been consumed or freed in netlink_broadcast() */

	/* There is no need for taking notification_mutex here: it doesn't

	   matter if the initial state events mix with later state chage

	   events; we can always tell the events apart by the NOTIFY_EXISTS

 connect list to head */

 number of iterations */

 detach list from head */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

   drbd_state.c



   This file is part of DRBD by Philipp Reisner and Lars Ellenberg.



   Copyright (C) 2001-2008, LINBIT Information Technologies GmbH.

   Copyright (C) 1999-2008, Philipp Reisner <philipp.reisner@linbit.com>.

   Copyright (C) 2002-2008, Lars Ellenberg <lars.ellenberg@linbit.com>.



   Thanks to Carter Burden, Bart Grantham and Gennadiy Nerubayev

   from Logicworks, Inc. for making SDP replication support possible.



	/* Caller holds req_lock spinlock.

		/* The peer_devices for each device have to be enumerated in

/* Unfortunately the states where not correctly ordered, when

/**

 * cl_wide_st_chg() - true if the state change is a cluster wide one

 * @device:	DRBD device.

 * @os:		old (current) state.

 * @ns:		new (wanted) state.

/**

 * drbd_force_state() - Impose a change which happens outside our control on our state

 * @device:	DRBD device.

 * @mask:	mask of state bits to change.

 * @val:	value of new state bits.

 cont waiting, otherwise fail. */

 cont waiting, otherwise fail. */

/**

 * drbd_req_state() - Perform an eventually cluster wide state change

 * @device:	DRBD device.

 * @mask:	mask of state bits to change.

 * @val:	value of new state bits.

 * @f:		flags

 *

 * Should not be called directly, use drbd_request_state() or

 * _drbd_request_state().

/**

 * _drbd_request_state() - Request a state change (with flags)

 * @device:	DRBD device.

 * @mask:	mask of state bits to change.

 * @val:	value of new state bits.

 * @f:		flags

 *

 * Cousin of drbd_request_state(), useful with the CS_WAIT_COMPLETE

 * flag, or when logging of failed state change requests is not desired.

/*

 * We grab drbd_md_get_buffer(), because we don't want to "fail" the disk while

 * there is IO in-flight: the transition into D_FAILED for detach purposes

 * may get misinterpreted as actual IO error in a confused endio function.

 *

 * We wrap it all into wait_event(), to retry in case the drbd_req_state()

 * returns SS_IN_TRANSIENT_STATE.

 *

 * To avoid potential deadlock with e.g. the receiver thread trying to grab

 * drbd_md_get_buffer() while trying to get out of the "transient state", we

 * need to grab and release the meta data buffer inside of that wait_event loop.

 so no-one is stuck in drbd_al_begin_io */

/**

 * is_valid_state() - Returns an SS_ error code if ns is not valid

 * @device:	DRBD device.

 * @ns:		State to consider.

 See drbd_state_sw_errors in drbd_strings.c */

 already found a reason to abort */

/**

 * is_valid_soft_transition() - Returns an SS_ error code if the state transition is not possible

 * This function limits state transitions that may be declined by DRBD. I.e.

 * user requests (aka soft transitions).

 * @os:		old state.

 * @ns:		new state.

 * @connection:  DRBD connection.

	/* While establishing a connection only allow cstate to change.

	/* Do not promote during resync handshake triggered by "force primary".

	 * This is a hack. It should really be rejected by the peer during the

 No NetworkFailure -> SyncTarget etc... */

 no change -> nothing to do, at least for the connection part */

 disconnect of an unconfigured connection does not make sense */

 from C_STANDALONE, we start with C_UNCONNECTED */

	/* When establishing a connection we need to go through WF_REPORT_PARAMS!

 After a network error only C_UNCONNECTED or C_DISCONNECTING may follow. */

 After C_DISCONNECTING only C_STANDALONE may follow */

/**

 * is_valid_transition() - Returns an SS_ error code if the state transition is not possible

 * This limits hard state transitions. Hard state transitions are facts there are

 * imposed on DRBD by the environment. E.g. disk broke or network broke down.

 * But those hard state transitions are still not allowed to do everything.

 * @ns:		new state.

 * @os:		old state.

 we cannot fail (again) if we already detached */

/**

 * sanitize_state() - Resolves implicitly necessary additional changes to a state transition

 * @device:	DRBD device.

 * @os:		old state.

 * @ns:		new state.

 * @warn:	placeholder for returned state warning.

 *

 * When we loose connection, we have to set the state of the peers disk (pdsk)

 * to D_UNKNOWN. This rule and many more along those lines are in this function.

 Implications from connection to peer and peer_isp */

 Clear the aftr_isp when becoming unconfigured */

 An implication of the disk states onto the connection state */

 Abort resync if a disk fails/detaches */

 Connection breaks down before we finished "Negotiating" */

 D_CONSISTENT and D_OUTDATED vanish when we get connected */

 Implications of the connection state on the disk states */

 D_OUTDATED would be nice. But explicit outdate necessary*/

 Suspend IO while fence-peer handler runs (peer lost) */

 Suspend IO while no data available (no accessible data available) */

 helper for _drbd_set_state */

		/* starting online verify from an arbitrary position

		 * does not fit well into the existing protocol.

		 * on C_VERIFY_T, we initialize ov_left and friends

		 * implicitly in receive_DataRequest once the

/**

 * _drbd_set_state() - Set a new DRBD state

 * @device:	DRBD device.

 * @ns:		new state.

 * @flags:	Flags

 * @done:	Optional completion, that will get completed after the after_state_ch() finished

 *

 * Caller needs to hold req_lock. Do not call directly.

  pre-state-change checks ; only look at ns  */

 See drbd_state_sw_errors in drbd_strings.c */

			/* If the old state was illegal as well, then let

	/* Display changes to the susp* flags that where caused by the call to

	   sanitize_state(). Only display it here if we where not called from

	/* if we are going -> D_FAILED or D_DISKLESS, grab one extra reference

	 * on the ldev here, to be sure the transition -> D_DISKLESS resp.

	 * drbd_ldev_destroy() won't happen before our corresponding

 FIXME: Have any flags been set earlier in this function already? */

	/* changes to local_cnt and device flags should be visible before

	 * changes to state, which again should be visible before anything else

 put replicated vs not-replicated requests in seperate epochs */

 Wake up role changes, that were delayed because of connection establishing */

	/* Aborted verify run, or we reached the stop sector.

 Peer was forced D_UP_TO_DATE & R_PRIMARY, consider to resync */

 Receiver should clean up itself */

 Now the receiver finished cleaning up itself, it should die */

 Upon network failure, we need to restart the receiver. */

 Resume AL writing if we get a connection */

	/* remember last attach time so request_timer_fn() won't

	 * kill newly established sessions while we are still trying to thaw

 open coded non-blocking drbd_suspend_io(device); */

 takes old and new peer disk state */

	/* Scenario, starting with normal operation

	 * Connected Primary/Secondary UpToDate/UpToDate

	 * NetworkFailure Primary/Unknown UpToDate/DUnknown (frozen)

	 * ...

	 * Connected Primary/Secondary UpToDate/Diskless (resumed; needs to bump uuid!)

/**

 * after_state_ch() - Perform after state change actions that may sleep

 * @device:	DRBD device.

 * @os:		old state.

 * @ns:		new state.

 * @flags:	Flags

 * @state_change: state change to broadcast

 Inform userspace about the change... */

	/* Here we have the actions that are performed after a

 case2: The connection was established again: */

			/* We should actively create a new uuid, _before_

			 * we resume/resent, if the peer is diskless

			 * (recovery from a multiple error scenario).

			 * Currently, this happens with a slight delay

			 * below when checking lost_contact_to_peer_data() ...

	/* Became sync source.  With protocol >= 96, we still need to send out

	 * the sync uuid now. Need to do that before any drbd_send_state, or

	 * the other side may go "paused sync" before receiving the sync uuids,

 Do not change the order of the if above and the two below... */

 attach on the peer */

		/* we probably will start a resync soon.

	/* No point in queuing send_bitmap if we don't have a connection

	 * anymore, so check also the _current_ state, not only the new state

 Lost contact to peer's copy of the data */

 D_DISKLESS Peer becomes secondary */

			/* We may still be Primary ourselves.

			 * No harm done if the bitmap still changes,

	/* Write out all changed bits on demote.

	 * Though, no need to da that just yet

		/* No changes to the bitmap expected this time, so assert that,

 Last part of the attaching process ... */

 to start sync... */

 We want to pause/continue resync, tell peer. */

 In case one of the isp bits got set, suspend other devices. */

	/* Make sure the peer gets informed about eventual state

 We are in the progress to start a full sync... */

 no other bitmap changes expected during this phase */

	/* first half of local IO error, failure to attach,

		/* corresponding get_ldev was in _drbd_set_state, to serialize

		 * our cleanup here with the transition to D_DISKLESS.

		 * But is is still not save to dreference ldev here, since

			/* Intentionally call this handler first, before drbd_send_state().

			 * See: 2932204 drbd: call local-io-error handler early

			 * People may chose to hard-reset the box from this handler.

			/* Immediately allow completion of all application IO,

			 * that waits for completion from the local disk,

			 * if this was a force-detach due to disk_timeout

			 * or administrator request (drbdsetup detach --force).

			 * Do NOT abort otherwise.

			 * Aborting local requests may cause serious problems,

			 * if requests are completed to upper layers already,

			 * and then later the already submitted local bio completes.

			 * This can cause DMA into former bio pages that meanwhile

			 * have been re-used for other things.

			 * So aborting local requests may cause crashes,

			 * or even worse, silent data corruption.

			/* current state still has to be D_FAILED,

			 * there is only one way out: to D_DISKLESS,

			/* In case we want to get something to stable storage still,

			 * this may be the last chance.

	/* second half of local IO error, failure to attach,

	 * or administrative detach,

		/* We must still be diskless,

		/* corresponding get_ldev in __drbd_set_state

 Notify peer that I had a local IO error, and did not detached.. */

 Disks got bigger while they were detached */

 A resync finished or aborted, wake paused devices... */

	/* sync target done with resync.  Explicitly notify peer, even though

	/* Verify finished, or reached stop sector.  Peer did not know about

	 * the stop sector, and we may even have changed the stop sector during

	/* This triggers bitmap writeout of potentially still unwritten pages

	 * if the resync finished cleanly, or aborted because of peer disk

	 * failure, or on transition from resync back to AHEAD/BEHIND.

	 *

	 * Connection loss is handled in drbd_disconnected() by the receiver.

	 *

	 * For resync aborted because of local disk failure, we cannot do

	 * any bitmap writeout anymore.

	 *

	 * No harm done if some bits change during this phase.

 new, max state, over all devices */

 Upon network configuration, we need to start the receiver */

 case1: The outdate peer handler is successful: */

		/* remember last connect time so request_timer_fn() won't

		 * kill newly established sessions while we are still trying to thaw

 continue waiting */;

		/* This will be a cluster-wide state change.

		 * Need to give up the spinlock, grab the mutex,

 sending failed. */

 need to re-aquire the spin lock, though */

		/* ... and re-aquire the spinlock.

		 * If _conn_rq_cond() returned >= SS_SUCCESS, we must call

		/* mutex_unlock() "... must not be used in interrupt context.",

 Copyright (c) 2012 Coraid, Inc.  See COPYING for GPL terms. */

/*

 * aoemain.c

 * Module initialization routines, discover timer

 one minute */

 free cache after de-allocating bufs */

 Copyright (c) 2012 Coraid, Inc.  See COPYING for GPL terms. */

/*

 * aoechr.c

 * AoE character device driver

MINOR_STAT = 1, (moved to sysfs)

 message backlog to retain */

/* A ring buffer of error messages, to be read through

 * "/dev/etherd/err".  When no messages are present,

 * readers will block waiting for messages to appear.

	/* try again if we are able to sleep a bit,

	 * otherwise give up this revalidation

 Copyright (c) 2013 Coraid, Inc.  See COPYING for GPL terms. */

/*

 * aoedev.c

 * AoE device utility functions; maintains device list.

/* Because some systems will have one, many, or no

 *   - partitions,

 *   - slots per shelf,

 *   - or shelves,

 * we need some flexibility in the way the minor numbers

 * are allocated.  So they are dynamic.

		/* for backwards compatibility when !aoe_dyndevs,

/*

 * Users who grab a pointer to the device with aoedev_by_aoeaddr

 * automatically get a reference count and must be responsible

 * for performing a aoedev_put.  With the addition of async

 * kthread processing I'm no longer confident that we can

 * guarantee consistency in the face of device flushes.

 *

 * For the time being, we only bother to add extra references for

 * frames sitting on the iocq.  When the kthreads finish processing

 * these frames, they will aoedev_put the device.

 clean out active and to-be-retransmitted buffers */

 reset window dressings */

 clean out the in-process request (if any) */

 fast fail all pending I/O */

 UP is cleared, freeze+quiesce to insure all are errored */

/* return whether the user asked for this particular

 * device to be flushed

 flush a specific device */

 pass one: do aoedev_downdev, which might sleep */

 unconditionally take each device down */

	/* pass two: call freedev, which might sleep,

	 * for aoedevs marked with DEVFL_TKILL

 pass three: remove aoedevs marked with DEVFL_FREED */

/* This has been confirmed to occur once with Tms=3*1000 due to the

 * driver changing link and not processing its transmit ring.  The

 * problem is hard enough to solve by returning an error that I'm

 * still punting on "solving" this.

 find it or allocate it */

 defer to aoeblk_gdalloc */

 Copyright (c) 2013 Coraid, Inc.  See COPYING for GPL terms. */

/*

 * aoeblk.c

 * block device routines

 GPFS needs a larger value than the default. */

 I'd rather see nopen exported so we can ditch closewait */

 firmware version */

 udev calls scsi_id, which uses SG_IO, resulting in noise */

 blk_mq_alloc_disk and add_disk can sleep */

 Copyright (c) 2013 Coraid, Inc.  See COPYING for GPL terms. */

/*

 * aoenet.c

 * Ethernet portion of AoE driver

 enters with txlock held */

 last token in aoe_iflist */

/*

 * (1) len doesn't include the header by default.  I want this.

 (1) */

 ata_rsp may keep skb for later processing or give it back */

 don't complain about vendor commands */

 Copyright (c) 2013 Coraid, Inc.  See COPYING for GPL terms. */

/*

 * aoecmd.c

 * Filesystem request handling methods

 default meant to avoid most soft lockups */

/* The number of online cpus during module initialization gives us a

 * convenient heuristic cap on the parallelism used for ktio threads

 * doing I/O completion.  It is not important that the cap equal the

 * actual number of running CPUs at any given time, but because of CPU

 * hotplug, we take care to use ncpus instead of using

 * num_online_cpus() after module initialization.

 mutex lock used for synchronization while thread spawning */

 io completion queue */

/*

 * Leave the top bit clear so we have tagspace for userland.

 * The bottom 16 bits are the xmit tick for rexmit/rttavg processing.

 * This driver reserves tag -1 to mean "unused frame."

 last used target */

 we've looped and found nada */

 set up ata header */

 LBA bit + obsolete 0xa0 */

 initialize the headers & frame */

 mark all tracking fields and load out */

/* some callers cannot sleep, and they can call this function,

 * transmitting the packets later, when interrupts are on

 probably can't happen, but set it up to fail anyway */

 delta is normally under 4.2 seconds, avoid 64-bit division */

 avoid overflow after 71 minutes */

 don't probe w/o other untainted aoetgts */

 reprobe slowly when taint is high */

 don't probe untainted aoetgts */

 leaving d->kicked, because this is routine */

/* An aoetgt accumulates demerits quickly, and successful

 * probing redeems the aoetgt slowly.

 number of aoetgt descriptors (not slots) */

 timeout based on observed timings and variations */

 collect all frames to rexmit into flist */

 end of expired frames */

 move to flist for later processing */

 process expired frames */

			/* Waited too long.  Device failure.

			 * Hang all frames on first hash bucket for downdev

			 * to clean up.

 avoid this target */

 initializing */

 enters with d->lock held */

/* this function performs work that has been deferred until sleeping is OK

 word 83: command set supported */

 word 86: command set/feature enabled */

 bit 10: LBA 48 */

 word 100: number lba48 sectors */

 set as in ide-disk.c:init_idedisk_capacity */

 number lba28 sectors */

 NOTE: obsolete in ATA 6 */

 serial */

 firmware */

 model */

 cf. Congestion Avoidance and Control, Jacobson & Karels, 1988 */

lore.kernel.org/lkml/20061031071040.GS14055@kernel.dk/ */

 just fail the buf. */

 these bits cleared on success */

/* Enters with iocq.lock held.

 * Returns true iff responses needing processing remain.

 Figure out if extra threads are required. */

 tell spawner we're running */

 tell spawner we're stopping */

 allow kthread to start */

 for waiting for exit later */

 pass it off to kthreads for processing */

		/* The thread with id has not been spawned yet,

		 * so delegate the work to the main thread and

		 * try spawning a new thread.

	/*

	 * Note here that we do not perform an aoedev_put, as we are

	 * leaving this reference for the ktio to release.

 initialize the headers & frame */

 set up ata header */

 end of the valid interfaces */

 we're updating */

 find the min interface */

	/*

	 * Enough people have their dip switches set backwards to

	 * warrant a loud message for this special case.

 keep it reasonable */

 don't change users' perspective */

 get_zeroed_page returns page with ref count 1 */

	/* Free up the iocq and thread speicific configuration

	* allocated during startup.

/* 

        on26.c    (c) 1997-8  Grant R. Guenther <grant@torque.net>

                              Under the terms of the GNU General Public License.



        on26.c is a low-level protocol driver for the 

        OnSpec 90c26 parallel to IDE adapter chip.



/* Changes:



        1.01    GRG 1998.05.06 init_proto, release_proto

	1.02    GRG 1998.09.23 updates for the -E rev chip

	1.03    GRG 1998.12.14 fix for slave drives

	1.04    GRG 1998.12.20 yet another bug fix



/* mode codes:  0  nybble reads, 8-bit writes

                1  8-bit reads and writes

                2  8-bit EPP mode

		3  EPP-16

		4  EPP-32

/* cont = 0 - access the IDE register file 

   cont = 1 - access the IDE command set 

 hard reset */

/*

	ppc6lnx.c (c) 2001 Micro Solutions Inc.

		Released under the terms of the GNU General Public license



	ppc6lnx.c  is a par of the protocol driver for the Micro Solutions

		"BACKPACK" parallel port IDE adapter

		(Works on Series 6 drives)



//***************************************************************************



// PPC 6 Code in C sanitized for LINUX

// Original x86 ASM by Ron, Converted to C by Clive



***************************************************************************

//***************************************************************************



//  60772 Commands



#define ACCESS_REG				0x00

#define ACCESS_PORT				0x40



#define ACCESS_READ				0x00

#define ACCESS_WRITE			0x20



//  60772 Command Prefix



#define CMD_PREFIX_SET		0xe0		// Special command that modifies the next command's operation

#define CMD_PREFIX_RESET	0xc0		// Resets current cmd modifier reg bits

 #define PREFIX_IO16			0x01		// perform 16-bit wide I/O

 #define PREFIX_FASTWR		0x04		// enable PPC mode fast-write

 #define PREFIX_BLK				0x08		// enable block transfer mode



// 60772 Registers



#define REG_STATUS				0x00		// status register

 #define STATUS_IRQA			0x01		// Peripheral IRQA line

 #define STATUS_EEPROM_DO	0x40		// Serial EEPROM data bit

#define REG_VERSION				0x01		// PPC version register (read)

#define REG_HWCFG					0x02		// Hardware Config register

#define REG_RAMSIZE				0x03		// Size of RAM Buffer

 #define RAMSIZE_128K			0x02

#define REG_EEPROM				0x06		// EEPROM control register

 #define EEPROM_SK				0x01		// eeprom SK bit

 #define EEPROM_DI				0x02		// eeprom DI bit

 #define EEPROM_CS				0x04		// eeprom CS bit

 #define EEPROM_EN				0x08		// eeprom output enable

#define REG_BLKSIZE				0x08		// Block transfer len (24 bit)



***************************************************************************

 LPT base address

 operating mode

 0 = PPC Uni SW

 1 = PPC Uni FW

 2 = PPC Bi SW

 3 = PPC Bi FW

 4 = EPP Byte

 5 = EPP Word

 6 = EPP Dword

 original LPT data port contents

 original LPT control port contents

 current control port contents

//***************************************************************************



// ppc_flags



#define fifo_wait					0x10



***************************************************************************

 DONT CHANGE THESE LEST YOU BREAK EVERYTHING - BIT FIELD DEPENDENCIES

//***************************************************************************



static int ppc6_select(Interface *ppc);

static void ppc6_deselect(Interface *ppc);

static void ppc6_send_cmd(Interface *ppc, u8 cmd);

static void ppc6_wr_data_byte(Interface *ppc, u8 data);

static u8 ppc6_rd_data_byte(Interface *ppc);

static u8 ppc6_rd_port(Interface *ppc, u8 port);

static void ppc6_wr_port(Interface *ppc, u8 port, u8 data);

static void ppc6_rd_data_blk(Interface *ppc, u8 *data, long count);

static void ppc6_wait_for_fifo(Interface *ppc);

static void ppc6_wr_data_blk(Interface *ppc, u8 *data, long count);

static void ppc6_rd_port16_blk(Interface *ppc, u8 port, u8 *data, long length);

static void ppc6_wr_port16_blk(Interface *ppc, u8 port, u8 *data, long length);

static void ppc6_wr_extout(Interface *ppc, u8 regdata);

static int ppc6_open(Interface *ppc);

static void ppc6_close(Interface *ppc);



***************************************************************************

 readback ctrl

 DELAY

 EPP

 PPC/ECP

 FAIL

//***************************************************************************



static void ppc6_deselect(Interface *ppc)

{

	if (ppc->mode & 4)	// EPP

		ppc->cur_ctrl |= port_init;

	else								// PPC/ECP

		ppc->cur_ctrl |= port_sel;



	outb(ppc->cur_ctrl, ppc->lpt_addr + 2);



	outb(ppc->org_data, ppc->lpt_addr);



	outb((ppc->org_ctrl | port_sel), ppc->lpt_addr + 2);



	outb(ppc->org_ctrl, ppc->lpt_addr + 2);

}



***************************************************************************

//***************************************************************************



static void ppc6_wr_data_byte(Interface *ppc, u8 data)

{

	switch(ppc->mode)

	{

		case PPCMODE_UNI_SW :

		case PPCMODE_UNI_FW :

		case PPCMODE_BI_SW :

		case PPCMODE_BI_FW :

		{

			outb(data, ppc->lpt_addr);



			ppc->cur_ctrl ^= data_stb;



			outb(ppc->cur_ctrl, ppc->lpt_addr + 2);



			break;

		}



		case PPCMODE_EPP_BYTE :

		case PPCMODE_EPP_WORD :

		case PPCMODE_EPP_DWORD :

		{

			outb(data, ppc->lpt_addr + 4);



			break;

		}

	}

}



***************************************************************************

 DELAY

 DELAY

//***************************************************************************



static u8 ppc6_rd_port(Interface *ppc, u8 port)

{

	ppc6_send_cmd(ppc,(u8)(port | ACCESS_PORT | ACCESS_READ));



	return(ppc6_rd_data_byte(ppc));

}



***************************************************************************

//***************************************************************************



static void ppc6_rd_data_blk(Interface *ppc, u8 *data, long count)

{

	switch(ppc->mode)

	{

		case PPCMODE_UNI_SW :

		case PPCMODE_UNI_FW :

		{

			while(count)

			{

				u8 d;



				ppc->cur_ctrl = (ppc->cur_ctrl & ~port_stb) ^ data_stb;



				outb(ppc->cur_ctrl, ppc->lpt_addr + 2);



				// DELAY



				d = inb(ppc->lpt_addr + 1);



				d = ((d & 0x80) >> 1) | ((d & 0x38) >> 3);



				ppc->cur_ctrl |= port_stb;



				outb(ppc->cur_ctrl, ppc->lpt_addr + 2);



				// DELAY



				d |= inb(ppc->lpt_addr + 1) & 0xB8;



				*data++ = d;

				count--;

			}



			break;

		}



		case PPCMODE_BI_SW :

		case PPCMODE_BI_FW :

		{

			ppc->cur_ctrl |= port_dir;



			outb(ppc->cur_ctrl, ppc->lpt_addr + 2);



			ppc->cur_ctrl |= port_stb;



			while(count)

			{

				ppc->cur_ctrl ^= data_stb;



				outb(ppc->cur_ctrl, ppc->lpt_addr + 2);



				*data++ = inb(ppc->lpt_addr);

				count--;

			}



			ppc->cur_ctrl &= ~port_stb;



			outb(ppc->cur_ctrl, ppc->lpt_addr + 2);



			ppc->cur_ctrl &= ~port_dir;



			outb(ppc->cur_ctrl, ppc->lpt_addr + 2);



			break;

		}



		case PPCMODE_EPP_BYTE :

		{

			outb((ppc->cur_ctrl | port_dir), ppc->lpt_addr + 2);



			// DELAY



			while(count)

			{

				*data++ = inb(ppc->lpt_addr + 4);

				count--;

			}



			outb(ppc->cur_ctrl, ppc->lpt_addr + 2);



			break;

		}



		case PPCMODE_EPP_WORD :

		{

			outb((ppc->cur_ctrl | port_dir), ppc->lpt_addr + 2);



			// DELAY



			while(count > 1)

			{

				*((u16 *)data) = inw(ppc->lpt_addr + 4);

				data  += 2;

				count -= 2;

			}



			while(count)

			{

				*data++ = inb(ppc->lpt_addr + 4);

				count--;

			}



			outb(ppc->cur_ctrl, ppc->lpt_addr + 2);



			break;

		}



		case PPCMODE_EPP_DWORD :

		{

			outb((ppc->cur_ctrl | port_dir),ppc->lpt_addr + 2);



			// DELAY



			while(count > 3)

			{

				*((u32 *)data) = inl(ppc->lpt_addr + 4);

				data  += 4;

				count -= 4;

			}



			while(count)

			{

				*data++ = inb(ppc->lpt_addr + 4);

				count--;

			}



			outb(ppc->cur_ctrl, ppc->lpt_addr + 2);



			break;

		}

	}



}



***************************************************************************

//***************************************************************************



static void ppc6_wr_data_blk(Interface *ppc, u8 *data, long count)

{

	switch(ppc->mode)

	{

		case PPCMODE_UNI_SW :

		case PPCMODE_BI_SW :

		{

			while(count--)

			{

				outb(*data++, ppc->lpt_addr);



				ppc->cur_ctrl ^= data_stb;



				outb(ppc->cur_ctrl, ppc->lpt_addr + 2);

			}



			break;

		}



		case PPCMODE_UNI_FW :

		case PPCMODE_BI_FW :

		{

			u8 this, last;



			ppc6_send_cmd(ppc,(CMD_PREFIX_SET | PREFIX_FASTWR));



			ppc->cur_ctrl |= port_stb;



			outb(ppc->cur_ctrl, ppc->lpt_addr + 2);



			last = *data;



			outb(last, ppc->lpt_addr);



			while(count)

			{

				this = *data++;

				count--;



				if (this == last)

				{

					ppc->cur_ctrl ^= data_stb;



					outb(ppc->cur_ctrl, ppc->lpt_addr + 2);

				}

				else

				{

					outb(this, ppc->lpt_addr);



					last = this;

				}

			}



			ppc->cur_ctrl &= ~port_stb;



			outb(ppc->cur_ctrl, ppc->lpt_addr + 2);



			ppc6_send_cmd(ppc,(CMD_PREFIX_RESET | PREFIX_FASTWR));



			break;

		}



		case PPCMODE_EPP_BYTE :

		{

			while(count)

			{

				outb(*data++,ppc->lpt_addr + 4);

				count--;

			}



			ppc6_wait_for_fifo(ppc);



			break;

		}



		case PPCMODE_EPP_WORD :

		{

			while(count > 1)

			{

				outw(*((u16 *)data),ppc->lpt_addr + 4);

				data  += 2;

				count -= 2;

			}



			while(count)

			{

				outb(*data++,ppc->lpt_addr + 4);

				count--;

			}



			ppc6_wait_for_fifo(ppc);



			break;

		}



		case PPCMODE_EPP_DWORD :

		{

			while(count > 3)

			{

				outl(*((u32 *)data),ppc->lpt_addr + 4);

				data  += 4;

				count -= 4;

			}



			while(count)

			{

				outb(*data++,ppc->lpt_addr + 4);

				count--;

			}



			ppc6_wait_for_fifo(ppc);



			break;

		}

	}

}



***************************************************************************

//***************************************************************************



static void ppc6_wr_port16_blk(Interface *ppc, u8 port, u8 *data, long length)

{

	length = length << 1;



	ppc6_send_cmd(ppc, (REG_BLKSIZE | ACCESS_REG | ACCESS_WRITE));

	ppc6_wr_data_byte(ppc,(u8)length);

	ppc6_wr_data_byte(ppc,(u8)(length >> 8));

	ppc6_wr_data_byte(ppc,0);



	ppc6_send_cmd(ppc, (CMD_PREFIX_SET | PREFIX_IO16 | PREFIX_BLK));



	ppc6_send_cmd(ppc, (u8)(port | ACCESS_PORT | ACCESS_WRITE));



	ppc6_wr_data_blk(ppc, data, length);



	ppc6_send_cmd(ppc, (CMD_PREFIX_RESET | PREFIX_IO16 | PREFIX_BLK));

}



***************************************************************************

//***************************************************************************



static int ppc6_open(Interface *ppc)

{

	int ret;



	ret = ppc6_select(ppc);



	if (ret == 0)

		return(ret);



	ppc->ppc_flags &= ~fifo_wait;



	ppc6_send_cmd(ppc, (ACCESS_REG | ACCESS_WRITE | REG_RAMSIZE));

	ppc6_wr_data_byte(ppc, RAMSIZE_128K);



	ppc6_send_cmd(ppc, (ACCESS_REG | ACCESS_READ | REG_VERSION));



	if ((ppc6_rd_data_byte(ppc) & 0x3F) == 0x0C)

		ppc->ppc_flags |= fifo_wait;



	return(ret);

}



***************************************************************************

//***************************************************************************



/* 

        pt.c    (c) 1998  Grant R. Guenther <grant@torque.net>

                          Under the terms of the GNU General Public License.



        This is the high-level driver for parallel port ATAPI tape

        drives based on chips supported by the paride module.



	The driver implements both rewinding and non-rewinding

	devices, filemarks, and the rewind ioctl.  It allocates

	a small internal "bounce buffer" for each open device, but

        otherwise expects buffering and blocking to be done at the

        user level.  As with most block-structured tapes, short

	writes are padded to full tape blocks, so reading back a file

        may return more data than was actually written.



        By default, the driver will autoprobe for a single parallel

        port ATAPI tape drive, but if their individual parameters are

        specified, the driver can handle up to 4 drives.



	The rewinding devices are named /dev/pt0, /dev/pt1, ...

	while the non-rewinding devices are /dev/npt0, /dev/npt1, etc.



        The behaviour of the pt driver can be altered by setting

        some parameters from the insmod command line.  The following

        parameters are adjustable:



            drive0      These four arguments can be arrays of       

            drive1      1-6 integers as follows:

            drive2

            drive3      <prt>,<pro>,<uni>,<mod>,<slv>,<dly>



                        Where,



                <prt>   is the base of the parallel port address for

                        the corresponding drive.  (required)



                <pro>   is the protocol number for the adapter that

                        supports this drive.  These numbers are

                        logged by 'paride' when the protocol modules

                        are initialised.  (0 if not given)



                <uni>   for those adapters that support chained

                        devices, this is the unit selector for the

                        chain of devices on the given port.  It should

                        be zero for devices that don't support chaining.

                        (0 if not given)



                <mod>   this can be -1 to choose the best mode, or one

                        of the mode numbers supported by the adapter.

                        (-1 if not given)



                <slv>   ATAPI devices can be jumpered to master or slave.

                        Set this to 0 to choose the master drive, 1 to

                        choose the slave, -1 (the default) to choose the

                        first drive found.



                <dly>   some parallel ports require the driver to 

                        go more slowly.  -1 sets a default value that

                        should work with the chosen protocol.  Otherwise,

                        set this to a small integer, the larger it is

                        the slower the port i/o.  In some cases, setting

                        this to zero will speed up the device. (default -1)



	    major	You may use this parameter to override the

			default major number (96) that this driver

			will use.  Be sure to change the device

			name as well.



	    name	This parameter is a character string that

			contains the name the kernel will use for this

			device (in /proc output, for instance).

			(default "pt").



            verbose     This parameter controls the amount of logging

                        that the driver will do.  Set it to 0 for

                        normal operation, 1 to see autoprobe progress

                        messages, or 2 to see additional debugging

                        output.  (default 0)

 

        If this driver is built into the kernel, you can use 

        the following command line parameters, with the same values

        as the corresponding module parameters listed above:



            pt.drive0

            pt.drive1

            pt.drive2

            pt.drive3



        In addition, you can use the parameter pt.disable to disable

        the driver entirely.



/*   Changes:



	1.01	GRG 1998.05.06	Round up transfer size, fix ready_wait,

			        loosed interpretation of ATAPI standard

				for clearing error status.

				Eliminate sti();

	1.02    GRG 1998.06.16  Eliminate an Ugh.

	1.03    GRG 1998.08.15  Adjusted PT_TMO, use HZ in loop timing,

				extra debugging

	1.04    GRG 1998.09.24  Repair minor coding error, added jumbo support

	

/* Here are things one can override from the insmod command.

   Most are autoprobed by paride unless set here.  Verbose is on

   by default.



 end of parameters */

 current, TASK_*, schedule_timeout() */

 interrupt timeout in jiffies */

 spin delay in micro-seconds  */

 30 seconds */

 60 seconds */

 20 minutes */

 bits in tape->flags */

 interface to paride layer */

 various state flags */

 result of last request sense */

 drive */

 1 if access is available 0 otherwise */

 block size */

 Size of tape in KB */

 device present ? */

 pf0, pf1, ... */

 scratch block buffer */

 reference of parport driver */

 kernel glue structures */

 sysfs class support */

 ATAPI packet command */

 timeout */

/*

 * returns  0, with id set if drive is detected

 *	   -1, if drive detection failed

 FIXME: rate limit ?? */

 max per command */

 rounded up to even block */

 max per command */

 rounded up to even block */

 error delivering command only */

/* 

	bpck.c	(c) 1996-8  Grant R. Guenther <grant@torque.net>

		            Under the terms of the GNU General Public License.



	bpck.c is a low-level protocol driver for the MicroSolutions 

	"backpack" parallel port IDE adapter.  



/* Changes:



	1.01	GRG 1998.05.05 init_proto, release_proto, pi->delay 

	1.02    GRG 1998.08.15 default pi->delay returned to 4



/* cont = 0 - access the IDE register file 

   cont = 1 - access the IDE command set 

   cont = 2 - use internal bpck register addressing

 These macros access the bpck registers in native addressing */

 fiddle with ESS logic ??? */

 This fakes the EPP protocol to turn off EPP ... */

 check for 8-bit port */

/* 

        fit2.c        (c) 1998  Grant R. Guenther <grant@torque.net>

                          Under the terms of the GNU General Public License.



	fit2.c is a low-level protocol driver for the older version

        of the Fidelity International Technology parallel port adapter.  

	This adapter is used in their TransDisk 2000 and older TransDisk

	3000 portable hard-drives.  As far as I can tell, this device

	supports 4-bit mode _only_.  



	Newer models of the FIT products use an enhanced protocol.

	The "fit3" protocol module should support current drives.



/* cont = 0 - access the IDE register file 

   cont = 1 - access the IDE command set 



NB:  The FIT adapter does not appear to use the control registers.

So, we map ALT_STATUS to STATUS and NO-OP writes to the device

control register - this means that IDE reset will not work on these

devices.



/* 

        epia.c    (c) 1997-8  Grant R. Guenther <grant@torque.net>

                              Under the terms of the GNU General Public License.



        epia.c is a low-level protocol driver for Shuttle Technologies 

	EPIA parallel to IDE adapter chip.  This device is now obsolete

	and has been replaced with the EPAT chip, which is supported

	by epat.c, however, some devices based on EPIA are still

	available.



/* Changes:



        1.01    GRG 1998.05.06 init_proto, release_proto

	1.02    GRG 1998.06.17 support older versions of EPIA



/* mode codes:  0  nybble reads on port 1, 8-bit writes

                1  5/3 reads on ports 1 & 2, 8-bit writes

                2  8-bit reads and writes

                3  8-bit EPP mode

		4  16-bit EPP

		5  32-bit EPP

/* cont =  0   IDE register file

   cont =  1   IDE control registers

/* The use of register 0x84 is entirely unclear - it seems to control

   some EPP counters ...  currently we know about 3 different block

   sizes:  the standard 512 byte reads and writes, 12 byte writes and 

   2048 byte reads (the last two being used in the CDrom drivers.

 WR(0x84,0x10); */

/* 

	pg.c    (c) 1998  Grant R. Guenther <grant@torque.net>

			  Under the terms of the GNU General Public License.



	The pg driver provides a simple character device interface for

	sending ATAPI commands to a device.  With the exception of the

	ATAPI reset operation, all operations are performed by a pair

	of read and write operations to the appropriate /dev/pgN device.

	A write operation delivers a command and any outbound data in

	a single buffer.  Normally, the write will succeed unless the

	device is offline or malfunctioning, or there is already another

	command pending.  If the write succeeds, it should be followed

	immediately by a read operation, to obtain any returned data and

	status information.  A read will fail if there is no operation

	in progress.



	As a special case, the device can be reset with a write operation,

	and in this case, no following read is expected, or permitted.



	There are no ioctl() operations.  Any single operation

	may transfer at most PG_MAX_DATA bytes.  Note that the driver must

	copy the data through an internal buffer.  In keeping with all

	current ATAPI devices, command packets are assumed to be exactly

	12 bytes in length.



	To permit future changes to this interface, the headers in the

	read and write buffers contain a single character "magic" flag.

	Currently this flag must be the character "P".



	By default, the driver will autoprobe for a single parallel

	port ATAPI device, but if their individual parameters are

	specified, the driver can handle up to 4 devices.



	To use this device, you must have the following device 

	special files defined:



		/dev/pg0 c 97 0

		/dev/pg1 c 97 1

		/dev/pg2 c 97 2

		/dev/pg3 c 97 3



	(You'll need to change the 97 to something else if you use

	the 'major' parameter to install the driver on a different

	major number.)



	The behaviour of the pg driver can be altered by setting

	some parameters from the insmod command line.  The following

	parameters are adjustable:



	    drive0      These four arguments can be arrays of       

	    drive1      1-6 integers as follows:

	    drive2

	    drive3      <prt>,<pro>,<uni>,<mod>,<slv>,<dly>



			Where,



		<prt>   is the base of the parallel port address for

			the corresponding drive.  (required)



		<pro>   is the protocol number for the adapter that

			supports this drive.  These numbers are

			logged by 'paride' when the protocol modules

			are initialised.  (0 if not given)



		<uni>   for those adapters that support chained

			devices, this is the unit selector for the

			chain of devices on the given port.  It should

			be zero for devices that don't support chaining.

			(0 if not given)



		<mod>   this can be -1 to choose the best mode, or one

			of the mode numbers supported by the adapter.

			(-1 if not given)



		<slv>   ATAPI devices can be jumpered to master or slave.

			Set this to 0 to choose the master drive, 1 to

			choose the slave, -1 (the default) to choose the

			first drive found.



		<dly>   some parallel ports require the driver to 

			go more slowly.  -1 sets a default value that

			should work with the chosen protocol.  Otherwise,

			set this to a small integer, the larger it is

			the slower the port i/o.  In some cases, setting

			this to zero will speed up the device. (default -1)



	    major	You may use this parameter to override the

			default major number (97) that this driver

			will use.  Be sure to change the device

			name as well.



	    name	This parameter is a character string that

			contains the name the kernel will use for this

			device (in /proc output, for instance).

			(default "pg").



	    verbose     This parameter controls the amount of logging

			that is done by the driver.  Set it to 0 for 

			quiet operation, to 1 to enable progress

			messages while the driver probes for devices,

			or to 2 for full debug logging.  (default 0)



	If this driver is built into the kernel, you can use 

	the following command line parameters, with the same values

	as the corresponding module parameters listed above:



	    pg.drive0

	    pg.drive1

	    pg.drive2

	    pg.drive3



	In addition, you can use the parameter pg.disable to disable

	the driver entirely.



/* Changes:



	1.01	GRG 1998.06.16	Bug fixes

	1.02    GRG 1998.09.24  Added jumbo support



/* Here are things one can override from the insmod command.

   Most are autoprobed by paride unless set here.  Verbose is 0

   by default.



 end of parameters */

 current, TASK_* */

 spin delay in micro-seconds  */

 interface to paride layer */

 write done, read expected */

 jiffies at command start */

 transfer size requested */

 timeout requested */

 last sense key */

 drive */

 count of active opens ... */

 device present ? */

 pg0, pg1, ... */

 scratch block buffer */

 reference of parport driver */

 kernel glue structures */

 ATAPI packet command */

/*

 * returns  0, with id set if drive is detected

 *	   -1, if drive detection failed

 In case the user specified `major=0' (dynamic) */

/* 

        ktti.c        (c) 1998  Grant R. Guenther <grant@torque.net>

                          Under the terms of the GNU General Public License.



	ktti.c is a low-level protocol driver for the KT Technology

	parallel port adapter.  This adapter is used in the "PHd" 

        portable hard-drives.  As far as I can tell, this device

	supports 4-bit mode _only_.  



/* cont = 0 - access the IDE register file 

   cont = 1 - access the IDE command set 

/*

        kbic.c    (c) 1997-8  Grant R. Guenther <grant@torque.net>

                              Under the terms of the GNU General Public License.



        This is a low-level driver for the KBIC-951A and KBIC-971A

        parallel to IDE adapter chips from KingByte Information Systems.



	The chips are almost identical, however, the wakeup code 

	required for the 971A interferes with the correct operation of

        the 951A, so this driver registers itself twice, once for

	each chip.



/* Changes:



        1.01    GRG 1998.05.06 init_proto, release_proto



/* cont = 0 - access the IDE register file 

   cont = 1 - access the IDE command set 

/* counts must be congruent to 0 MOD 4, but all known applications

   have this property.

/* 

        comm.c    (c) 1997-8  Grant R. Guenther <grant@torque.net>

                              Under the terms of the GNU General Public License.



	comm.c is a low-level protocol driver for some older models

	of the DataStor "Commuter" parallel to IDE adapter.  Some of

	the parallel port devices marketed by Arista currently

	use this adapter.

/* Changes:



	1.01	GRG 1998.05.05  init_proto, release_proto



/* mode codes:  0  nybble reads, 8-bit writes

                1  8-bit reads and writes

                2  8-bit EPP mode

/* cont = 0 - access the IDE register file 

   cont = 1 - access the IDE command set 

 NB: Watch out for the byte swapped writes ! */

/*

	backpack.c (c) 2001 Micro Solutions Inc.

		Released under the terms of the GNU General Public license



	backpack.c is a low-level protocol driver for the Micro Solutions

		"BACKPACK" parallel port IDE adapter

		(Works on Series 6 drives)



	Written by: Ken Hahn     (linux-dev@micro-solutions.com)

	            Clive Turvey (linux-dev@micro-solutions.com)



/*

   This is Ken's linux wrapper for the PPC library

   Version 1.0.0 is the backpack driver for which source is not available

   Version 2.0.0 is the first to have source released 

   Version 2.0.1 is the "Cox-ified" source code 

   Version 2.0.2 - fixed version string usage, and made ppc functions static 

 PARAMETERS */

 set this to 1 to see debugging messages and whatnot */

***************************************************************/

/*

 ATAPI CDROM DRIVE REGISTERS

 data port                  */

 error register (read)      */

 feature register (write)   */

 interrupt reason register  */

 byte count register (low)  */

 byte count register (high) */

 drive select register      */

 status port (read)         */

 command port (write)       */

 alternate status reg (read) */

 device control (write)   */

***************************************************************/

 check for bad settings */

 check for bad settings */

 check for 8-bit port */

copy over duplicate stuff.. initialize state info*/

 look at the parport device to see if what modes we can use */

 Can do EPP*/

Just flat SPP*/

SET PPC UNIT NUMBER*/

LOWER DOWN TO UNIDIRECTIONAL*/

 2-5 use epp (need 8 ports) */

/* 

        dstr.c    (c) 1997-8  Grant R. Guenther <grant@torque.net>

                              Under the terms of the GNU General Public License.



        dstr.c is a low-level protocol driver for the 

        DataStor EP2000 parallel to IDE adapter chip.



/* Changes:



        1.01    GRG 1998.05.06 init_proto, release_proto



/* mode codes:  0  nybble reads, 8-bit writes

                1  8-bit reads and writes

                2  8-bit EPP mode

		3  EPP-16

		4  EPP-32

/* cont = 0 - access the IDE register file 

   cont = 1 - access the IDE command set 

/* 

        fit3.c        (c) 1998  Grant R. Guenther <grant@torque.net>

                          Under the terms of the GNU General Public License.



	fit3.c is a low-level protocol driver for newer models 

        of the Fidelity International Technology parallel port adapter.  

	This adapter is used in their TransDisk 3000 portable 

	hard-drives, as well as CD-ROM, PD-CD and other devices.



	The TD-2000 and certain older devices use a different protocol.

	Try the fit2 protocol module with them.



        NB:  The FIT adapters do not appear to support the control 

	registers.  So, we map ALT_STATUS to STATUS and NO-OP writes 

	to the device control register - this means that IDE reset 

	will not work on these devices.



/* cont = 0 - access the IDE register file 

   cont = 1 - access the IDE command set 



/* 

	on20.c	(c) 1996-8  Grant R. Guenther <grant@torque.net>

		            Under the terms of the GNU General Public License.



        on20.c is a low-level protocol driver for the

        Onspec 90c20 parallel to IDE adapter. 

/* Changes:



        1.01    GRG 1998.05.06 init_proto, release_proto



/* cont = 0 - access the IDE register file 

   cont = 1 - access the IDE command set 

/* 

	friq.c	(c) 1998    Grant R. Guenther <grant@torque.net>

		            Under the terms of the GNU General Public License



	friq.c is a low-level protocol driver for the Freecom "IQ"

	parallel port IDE adapter.   Early versions of this adapter

	use the 'frpw' protocol.

	

	Freecom uses this adapter in a battery powered external 

	CD-ROM drive.  It is also used in LS-120 drives by

	Maxell and Panasonic, and other devices.



	The battery powered drive requires software support to

	control the power to the drive.  This module enables the

	drive power when the high level driver (pcd) is loaded

	and disables it when the module is unloaded.  Note, if

	the friq module is built in to the kernel, the power

	will never be switched off, so other means should be

	used to conserve battery power.



/* Changes:



	1.01	GRG 1998.12.20	 Added support for soft power switch

/* cont = 0 - access the IDE register file 

   cont = 1 - access the IDE command set 

 turn the power on */

 disable sleep timer */

 turn off the power */

/* 

        pf.c    (c) 1997-8  Grant R. Guenther <grant@torque.net>

                            Under the terms of the GNU General Public License.



        This is the high-level driver for parallel port ATAPI disk

        drives based on chips supported by the paride module.



        By default, the driver will autoprobe for a single parallel

        port ATAPI disk drive, but if their individual parameters are

        specified, the driver can handle up to 4 drives.



        The behaviour of the pf driver can be altered by setting

        some parameters from the insmod command line.  The following

        parameters are adjustable:



            drive0      These four arguments can be arrays of       

            drive1      1-7 integers as follows:

            drive2

            drive3      <prt>,<pro>,<uni>,<mod>,<slv>,<lun>,<dly>



                        Where,



                <prt>   is the base of the parallel port address for

                        the corresponding drive.  (required)



                <pro>   is the protocol number for the adapter that

                        supports this drive.  These numbers are

                        logged by 'paride' when the protocol modules

                        are initialised.  (0 if not given)



                <uni>   for those adapters that support chained

                        devices, this is the unit selector for the

                        chain of devices on the given port.  It should

                        be zero for devices that don't support chaining.

                        (0 if not given)



                <mod>   this can be -1 to choose the best mode, or one

                        of the mode numbers supported by the adapter.

                        (-1 if not given)



                <slv>   ATAPI CDroms can be jumpered to master or slave.

                        Set this to 0 to choose the master drive, 1 to

                        choose the slave, -1 (the default) to choose the

                        first drive found.



		<lun>   Some ATAPI devices support multiple LUNs.

                        One example is the ATAPI PD/CD drive from

                        Matshita/Panasonic.  This device has a 

                        CD drive on LUN 0 and a PD drive on LUN 1.

                        By default, the driver will search for the

                        first LUN with a supported device.  Set 

                        this parameter to force it to use a specific

                        LUN.  (default -1)



                <dly>   some parallel ports require the driver to 

                        go more slowly.  -1 sets a default value that

                        should work with the chosen protocol.  Otherwise,

                        set this to a small integer, the larger it is

                        the slower the port i/o.  In some cases, setting

                        this to zero will speed up the device. (default -1)



	    major	You may use this parameter to override the

			default major number (47) that this driver

			will use.  Be sure to change the device

			name as well.



	    name	This parameter is a character string that

			contains the name the kernel will use for this

			device (in /proc output, for instance).

			(default "pf").



            cluster     The driver will attempt to aggregate requests

                        for adjacent blocks into larger multi-block

                        clusters.  The maximum cluster size (in 512

                        byte sectors) is set with this parameter.

                        (default 64)



            verbose     This parameter controls the amount of logging

                        that the driver will do.  Set it to 0 for

                        normal operation, 1 to see autoprobe progress

                        messages, or 2 to see additional debugging

                        output.  (default 0)

 

	    nice        This parameter controls the driver's use of

			idle CPU time, at the expense of some speed.



        If this driver is built into the kernel, you can use the

        following command line parameters, with the same values

        as the corresponding module parameters listed above:



            pf.drive0

            pf.drive1

            pf.drive2

            pf.drive3

	    pf.cluster

            pf.nice



        In addition, you can use the parameter pf.disable to disable

        the driver entirely.



/* Changes:



	1.01	GRG 1998.05.03  Changes for SMP.  Eliminate sti().

				Fix for drives that don't clear STAT_ERR

			        until after next CDB delivered.

				Small change in pf_completion to round

				up transfer size.

	1.02    GRG 1998.06.16  Eliminated an Ugh

	1.03    GRG 1998.08.16  Use HZ in loop timings, extra debugging

	1.04    GRG 1998.09.24  Added jumbo support



/* Here are things one can override from the insmod command.

   Most are autoprobed by paride unless set here.  Verbose is off

   by default.



 end of parameters */

 constants for faking geometry numbers */

 use FD geometry under this size */

 interrupt timeout in jiffies */

 spin delay in micro-seconds  */

 interface to paride layer */

 removable media device  ?  */

 media present ?  WP ? */

 drive */

 count of active opens ... */

 device present ? */

 pf0, pf1, ... */

 scratch block buffer */

/* the variables below are used mainly in the I/O request engine, which

   processes only one request at a time.

 i/o error retry count */

 request being processed ? */

 current request */

 address of next requested block */

 number of blocks still to do */

 sectors in current cluster */

 current command READ/WRITE */

 unit of current request */

 stopper for pseudo-int */

 buffer for request in progress */

 reference of parport driver */

 kernel glue structures */

 ATAPI packet command */

 in tenths of a second */

/* the ATAPI standard actually specifies the contents of all 7 registers

   after a reset, but the specification is ambiguous concerning the last

   two bytes, and different drives interpret the standard differently.

/*

 * returns 0, with id set if drive is detected, otherwise an error code.

 The i/o request engine */

 detach from the calling context - in case the spinlock is held */

 preliminary initialisation */

/* 

	frpw.c	(c) 1996-8  Grant R. Guenther <grant@torque.net>

		            Under the terms of the GNU General Public License



	frpw.c is a low-level protocol driver for the Freecom "Power"

	parallel port IDE adapter.

	

	Some applications of this adapter may require a "printer" reset

	prior to loading the driver.  This can be done by loading and

	unloading the "lp" driver, or it can be done by this driver

	if you define FRPW_HARD_RESET.  The latter is not recommended

	as it may upset devices on other ports.



/* Changes:



        1.01    GRG 1998.05.06 init_proto, release_proto

			       fix chip detect

			       added EPP-16 and EPP-32

	1.02    GRG 1998.09.23 added hard reset to initialisation process

	1.03    GRG 1998.12.14 made hard reset conditional



/* cont = 0 - access the IDE register file 

   cont = 1 - access the IDE command set 

/* Stub logic to see if PNP string is available - used to distinguish

   between the Xilinx and ASIC implementations of the Freecom adapter.

  returns chip_type:   0 = Xilinx, 1 = ASIC   */

 parallel bus reset */

/* We use the pi->private to remember the result of the PNP test.

   To make this work, private = port*2 + chip.  Yes, I know it's

   a hack :-(

/* 

        pd.c    (c) 1997-8  Grant R. Guenther <grant@torque.net>

                            Under the terms of the GNU General Public License.



        This is the high-level driver for parallel port IDE hard

        drives based on chips supported by the paride module.



	By default, the driver will autoprobe for a single parallel

	port IDE drive, but if their individual parameters are

        specified, the driver can handle up to 4 drives.



        The behaviour of the pd driver can be altered by setting

        some parameters from the insmod command line.  The following

        parameters are adjustable:

 

	    drive0  	These four arguments can be arrays of	    

	    drive1	1-8 integers as follows:

	    drive2

	    drive3	<prt>,<pro>,<uni>,<mod>,<geo>,<sby>,<dly>,<slv>



			Where,



		<prt>	is the base of the parallel port address for

			the corresponding drive.  (required)



		<pro>   is the protocol number for the adapter that

			supports this drive.  These numbers are

                        logged by 'paride' when the protocol modules

			are initialised.  (0 if not given)



		<uni>   for those adapters that support chained

			devices, this is the unit selector for the

		        chain of devices on the given port.  It should

			be zero for devices that don't support chaining.

			(0 if not given)



		<mod>   this can be -1 to choose the best mode, or one

		        of the mode numbers supported by the adapter.

			(-1 if not given)



		<geo>   this defaults to 0 to indicate that the driver

			should use the CHS geometry provided by the drive

			itself.  If set to 1, the driver will provide

			a logical geometry with 64 heads and 32 sectors

			per track, to be consistent with most SCSI

		        drivers.  (0 if not given)



		<sby>   set this to zero to disable the power saving

			standby mode, if needed.  (1 if not given)



		<dly>   some parallel ports require the driver to 

			go more slowly.  -1 sets a default value that

			should work with the chosen protocol.  Otherwise,

			set this to a small integer, the larger it is

			the slower the port i/o.  In some cases, setting

			this to zero will speed up the device. (default -1)



		<slv>   IDE disks can be jumpered to master or slave.

                        Set this to 0 to choose the master drive, 1 to

                        choose the slave, -1 (the default) to choose the

                        first drive found.

			



            major       You may use this parameter to override the

                        default major number (45) that this driver

                        will use.  Be sure to change the device

                        name as well.



            name        This parameter is a character string that

                        contains the name the kernel will use for this

                        device (in /proc output, for instance).

			(default "pd")



	    cluster	The driver will attempt to aggregate requests

			for adjacent blocks into larger multi-block

			clusters.  The maximum cluster size (in 512

			byte sectors) is set with this parameter.

			(default 64)



	    verbose	This parameter controls the amount of logging

			that the driver will do.  Set it to 0 for 

			normal operation, 1 to see autoprobe progress

			messages, or 2 to see additional debugging

			output.  (default 0)



            nice        This parameter controls the driver's use of

                        idle CPU time, at the expense of some speed.



        If this driver is built into the kernel, you can use kernel

        the following command line parameters, with the same values

        as the corresponding module parameters listed above:



            pd.drive0

            pd.drive1

            pd.drive2

            pd.drive3

            pd.cluster

            pd.nice



        In addition, you can use the parameter pd.disable to disable

        the driver entirely.

 

/* Changes:



	1.01	GRG 1997.01.24	Restored pd_reset()

				Added eject ioctl

	1.02    GRG 1998.05.06  SMP spinlock changes, 

				Added slave support

	1.03    GRG 1998.06.16  Eliminate an Ugh.

	1.04	GRG 1998.08.15  Extra debugging, use HZ in loop timing

	1.05    GRG 1998.09.24  Added jumbo support



/* Here are things one can override from the insmod command.

   Most are autoprobed by paride unless set here.  Verbose is off

   by default.



 end of parameters */

 for the eject ioctl */

 numbers for "SCSI" geometry */

 interrupt timeout in jiffies */

 spin delay in micro-seconds  */

 interface to paride layer */

 count of active opens ... */

 Size of this volume in sectors */

 physical geometry */

 master=0 slave=1 */

 Have we seen a disk change ? */

 removable media device  ?  */

 pda, pdb, etc ... */

 for REQ_OP_DRV_IN: */

 scratch block buffer */

 reference of parport driver */

  ide command interface */

 called only for MASTER drive */

 polled wait */

 the IDE task file */

 The i/o request engine */

 current request */

 current request's drive */

 current request's PIA */

 i/o error retry count */

 address of next requested block */

 number of blocks still to do */

 sectors in current cluster */

 buffer for request in progress */

 special io requests */

/* According to the ATA standard, the default CHS geometry should be

   available following a reset.  Some Western Digital drives come up

   in a mode where only LBA addresses are accepted until the device

   parameters are initialised.

 say changed if other error */

/* WARNING:  here there may be dragons.  reset() applies to both drives,

   but we call it only on probing the MASTER. This should allow most

   common configurations to work, but be warned that a reset can clear

   settings on the SLAVE drive.

 end of io request engine */

 kernel glue structures */

 probing */

 nothing spec'd - so autoprobe for 1 */

/* 

        paride.c  (c) 1997-8  Grant R. Guenther <grant@torque.net>

                              Under the terms of the GNU General Public License.



	This is the base module for the family of device drivers

        that support parallel port IDE devices.  



/* Changes:



	1.01	GRG 1998.05.03	Use spinlocks

	1.02	GRG 1998.05.05  init_proto, release_proto, ktti

	1.03	GRG 1998.08.15  eliminate compiler warning

	1.04    GRG 1998.11.28  added support for FRIQ 

	1.05    TMW 2000.06.06  use parport_find_number instead of

				parport_enumerate

	1.06    TMW 2001.03.26  more sane parport-or-not resource management

 TASK_* */

 not here if both > 0 */

 still racy */

/* 

        epat.c  (c) 1997-8  Grant R. Guenther <grant@torque.net>

                            Under the terms of the GNU General Public License.



	This is the low level protocol driver for the EPAT parallel

        to IDE adapter from Shuttle Technologies.  This adapter is

        used in many popular parallel port disk products such as the

        SyQuest EZ drives, the Avatar Shark and the Imation SuperDisk.

	

/* Changes:



        1.01    GRG 1998.05.06 init_proto, release_proto

        1.02    Joshua b. Jore CPP(renamed), epat_connect, epat_disconnect



/* cont =  0   IDE register file

   cont =  1   IDE control registers

   cont =  2   internal EPAT registers

 never gets here */

 these macros access the EPAT registers in native addressing */

 and these access the IDE task file */

 FIXME:  the CPP stuff should be fixed to handle multiple EPATs on a chain */

 Initialize the chip */

 WR(0xe,0xa);WR(0xf,4); */

 CPP(0x30); */

 Connect to the chip */

 Idle into SPP */

 Request EPP */

 read the version code */

/* 

	pcd.c	(c) 1997-8  Grant R. Guenther <grant@torque.net>

		            Under the terms of the GNU General Public License.



	This is a high-level driver for parallel port ATAPI CD-ROM

        drives based on chips supported by the paride module.



        By default, the driver will autoprobe for a single parallel

        port ATAPI CD-ROM drive, but if their individual parameters are

        specified, the driver can handle up to 4 drives.



        The behaviour of the pcd driver can be altered by setting

        some parameters from the insmod command line.  The following

        parameters are adjustable:



            drive0      These four arguments can be arrays of       

            drive1      1-6 integers as follows:

            drive2

            drive3      <prt>,<pro>,<uni>,<mod>,<slv>,<dly>



                        Where,



                <prt>   is the base of the parallel port address for

                        the corresponding drive.  (required)



                <pro>   is the protocol number for the adapter that

                        supports this drive.  These numbers are

                        logged by 'paride' when the protocol modules

                        are initialised.  (0 if not given)



                <uni>   for those adapters that support chained

                        devices, this is the unit selector for the

                        chain of devices on the given port.  It should

                        be zero for devices that don't support chaining.

                        (0 if not given)



                <mod>   this can be -1 to choose the best mode, or one

                        of the mode numbers supported by the adapter.

                        (-1 if not given)



		<slv>   ATAPI CD-ROMs can be jumpered to master or slave.

			Set this to 0 to choose the master drive, 1 to

                        choose the slave, -1 (the default) to choose the

			first drive found.



                <dly>   some parallel ports require the driver to 

                        go more slowly.  -1 sets a default value that

                        should work with the chosen protocol.  Otherwise,

                        set this to a small integer, the larger it is

                        the slower the port i/o.  In some cases, setting

                        this to zero will speed up the device. (default -1)

                        

            major       You may use this parameter to override the

                        default major number (46) that this driver

                        will use.  Be sure to change the device

                        name as well.



            name        This parameter is a character string that

                        contains the name the kernel will use for this

                        device (in /proc output, for instance).

                        (default "pcd")



            verbose     This parameter controls the amount of logging

                        that the driver will do.  Set it to 0 for

                        normal operation, 1 to see autoprobe progress

                        messages, or 2 to see additional debugging

                        output.  (default 0)

  

            nice        This parameter controls the driver's use of

                        idle CPU time, at the expense of some speed.

 

	If this driver is built into the kernel, you can use the

        following kernel command line parameters, with the same values

        as the corresponding module parameters listed above:



	    pcd.drive0

	    pcd.drive1

	    pcd.drive2

	    pcd.drive3

	    pcd.nice



        In addition, you can use the parameter pcd.disable to disable

        the driver entirely.



/* Changes:



	1.01	GRG 1998.01.24	Added test unit ready support

	1.02    GRG 1998.05.06  Changes to pcd_completion, ready_wait,

				and loosen interpretation of ATAPI

			        standard for clearing error status.

				Use spinlocks. Eliminate sti().

	1.03    GRG 1998.06.16  Eliminated an Ugh

	1.04	GRG 1998.08.15  Added extra debugging, improvements to

				pcd_completion, use HZ in loop timing

	1.05	GRG 1998.08.16	Conformed to "Uniform CD-ROM" standard

	1.06    GRG 1998.08.19  Added audio ioctl support

	1.07    GRG 1998.09.24  Increased reset timeout, added jumbo support



/* Here are things one can override from the insmod command.

   Most are autoprobed by paride unless set here.  Verbose is off

   by default.



 end of parameters */

 timeout in jiffies */

 spin delay in uS */

 in seconds */

 in tenths of a second */

 interface to paride layer */

 master/slave */

 result of last request sense */

 media change seen */

 does this unit exist ? */

 pcd0, pcd1, etc */

 uniform cdrom interface */

 raw block buffer */

static int pcd_bufblk = -1;	/* block in buffer, in CD units,

				   -1 for nothing there. See also

				   pd_unit.

/* the variables below are used mainly in the I/O request engine, which

   processes only one request at a time.

 current request's drive */

 retries on current request */

 request being processed ? */

 address of next requested sector */

 number of blocks still to do */

 buffer for request in progress */

 reference of parport driver */

 kernel glue structures */

 ATAPI packet command */

 delay a bit */

 timeout */

/*

 * returns 0, with id set if drive is detected, otherwise an error code.

 we should now have the cap page */

 I/O request processing */

 the audio_ioctl stuff is adapted from sr_ioctl.c */

 umm... */

 nothing spec'd - so autoprobe for 1 */

/* 

        aten.c  (c) 1997-8  Grant R. Guenther <grant@torque.net>

                            Under the terms of the GNU General Public License.



	aten.c is a low-level protocol driver for the ATEN EH-100

	parallel port adapter.  The EH-100 supports 4-bit and 8-bit

        modes only.  There is also an EH-132 which supports EPP mode

        transfers.  The EH-132 is not yet supported.



/* Changes:



	1.01	GRG 1998.05.05	init_proto, release_proto



/* cont = 0 - access the IDE register file 

   cont = 1 - access the IDE command set 

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * RDMA Network Block Driver

 *

 * Copyright (c) 2014 - 2018 ProfitBricks GmbH. All rights reserved.

 * Copyright (c) 2018 - 2019 1&1 IONOS Cloud GmbH. All rights reserved.

 * Copyright (c) 2019 - 2020 1&1 IONOS SE. All rights reserved.

 Generate bio with pages pointing to the rdma buffer */

		/*

		 * Destroy kobj only if it was really created.

 free the resources for the id but don't  */

 allow to re-use the id itself because it */

 is still used by the client              */

 wait for inflights to drop to zero */

 It is already started to close by client's close message. */

 first remove sysfs itself to avoid deadlock */

				/*

				 * We lost the race, device is almost dead.

				 *  Continue traversing to find a valid one.

	/*

	 * Replace %SESSNAME% with a real session name in order to

	 * create device namespace.

 eliminitate duplicated slashes */

/**

 * find_srv_sess_dev() - a dev is already opened by this name

 * @srv_sess:	the session to search.

 * @dev_name:	string containing the name of the device.

 *

 * Return struct rnbd_srv_sess_dev if srv_sess already opened the dev_name

 * NULL if the session didn't open the device yet.

	/* Create the srv_dev sysfs files if they haven't been created yet. The

	 * reason to delay the creation is not to create the sysfs files before

	 * we are sure the device can be opened.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * RDMA Network Block Driver

 *

 * Copyright (c) 2014 - 2018 ProfitBricks GmbH. All rights reserved.

 * Copyright (c) 2018 - 2019 1&1 IONOS Cloud GmbH. All rights reserved.

 * Copyright (c) 2019 - 2020 1&1 IONOS SE. All rights reserved.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * RDMA Network Block Driver

 *

 * Copyright (c) 2014 - 2018 ProfitBricks GmbH. All rights reserved.

 * Copyright (c) 2018 - 2019 1&1 IONOS Cloud GmbH. All rights reserved.

 * Copyright (c) 2019 - 2020 1&1 IONOS SE. All rights reserved.

/**

 *	rnbd_bio_map_kern	-	map kernel address into bio

 *	@data: pointer to buffer to map

 *	@bs: bio_set to use.

 *	@len: length in bytes

 *	@gfp_mask: allocation flags for bio allocation

 *

 *	Map the kernel address into a bio suitable for io to a block

 *	device. Returns an error pointer in case of error.

 we don't support partial mappings */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * RDMA Network Block Driver

 *

 * Copyright (c) 2014 - 2018 ProfitBricks GmbH. All rights reserved.

 * Copyright (c) 2018 - 2019 1&1 IONOS Cloud GmbH. All rights reserved.

 * Copyright (c) 2019 - 2020 1&1 IONOS SE. All rights reserved.

 TODO fix cli tool before changing to proper state */

 TODO fix cli tool before changing to proper state */

	/*

	 * We take explicit module reference only for one reason: do not

	 * race with lockless rnbd_destroy_sessions().

	/*

	 * Here device can be vanished!

	/*

	 * The module unload rnbd_client_exit path is racing with unmapping of

	 * the last single device from the sysfs manually

	 * i.e. rnbd_clt_unmap_dev_store() leading to a sysfs warning because

	 * of sysfs link already was removed already.

 It should be freed always. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * RDMA Network Block Driver

 *

 * Copyright (c) 2014 - 2018 ProfitBricks GmbH. All rights reserved.

 * Copyright (c) 2018 - 2019 1&1 IONOS Cloud GmbH. All rights reserved.

 * Copyright (c) 2019 - 2020 1&1 IONOS SE. All rights reserved.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * RDMA Network Block Driver

 *

 * Copyright (c) 2014 - 2018 ProfitBricks GmbH. All rights reserved.

 * Copyright (c) 2018 - 2019 1&1 IONOS Cloud GmbH. All rights reserved.

 * Copyright (c) 2019 - 2020 1&1 IONOS SE. All rights reserved.

/*

 * Maximum number of partitions an instance can have.

 * 6 bits = 64 minors = 63 partitions (one minor is used for the device itself)

		/*

		 * If the device was remapped and the size changed in the

		 * meantime we need to revalidate it

 We can come here from interrupt, thus async=true */

/**

 * rnbd_get_cpu_qlist() - finds a list with HW queues to be rerun

 * @sess:	Session to find a queue for

 * @cpu:	Cpu to start the search from

 *

 * Description:

 *     Each CPU has a list of HW queues, which needs to be rerun.  If a list

 *     is not empty - it is marked with a bit.  This function finds first

 *     set bit in a bitmap and returns corresponding CPU list.

 Search from cpu to nr_cpu_ids */

 Search from 0 to cpu */

/**

 * rnbd_rerun_if_needed() - rerun next queue marked as stopped

 * @sess:	Session to rerun a queue on

 *

 * Description:

 *     Each CPU has it's own list of HW queues, which should be rerun.

 *     Function finds such list with HW queues, takes a list lock, picks up

 *     the first HW queue out of the list and requeues it.

 *

 * Return:

 *     True if the queue was requeued, false otherwise.

 *

 * Context:

 *     Does not matter.

	/*

	 * To keep fairness and not to let other queues starve we always

	 * try to wake up someone else in round-robin manner.  That of course

	 * increases latency but queues always have a chance to be executed.

 Clear bit if nothing is left */

	/**

	 * Saves the CPU that is going to be requeued on the per-cpu var. Just

	 * incrementing it doesn't work because rnbd_get_cpu_qlist() will

	 * always return the first CPU with something on the queue list when the

	 * value stored on the var is greater than the last CPU with something

	 * on the list.

/**

 * rnbd_rerun_all_if_idle() - rerun all queues left in the list if

 *				 session is idling (there are no requests

 *				 in-flight).

 * @sess:	Session to rerun the queues on

 *

 * Description:

 *     This function tries to rerun all stopped queues if there are no

 *     requests in-flight anymore.  This function tries to solve an obvious

 *     problem, when number of tags < than number of queues (hctx), which

 *     are stopped and put to sleep.  If last permit, which has been just put,

 *     does not wake up all left queues (hctxs), IO requests hang forever.

 *

 *     That can happen when all number of permits, say N, have been exhausted

 *     from one CPU, and we have many block devices per session, say M.

 *     Each block device has it's own queue (hctx) for each CPU, so eventually

 *     we can put that number of queues (hctxs) to sleep: M x nr_cpu_ids.

 *     If number of permits N < M x nr_cpu_ids finally we will get an IO hang.

 *

 *     To avoid this hang last caller of rnbd_put_permit() (last caller is the

 *     one who observes sess->busy == 0) must wake up all remaining queues.

 *

 * Context:

 *     Does not matter.

		/* We have a subtle rare case here, when all permits can be

		 * consumed before busy counter increased.  This is safe,

		 * because loser will get NULL as a permit, observe 0 busy

		 * counter and immediately restart the queue himself.

	/* Paired with rnbd_clt_dev_add_to_requeue().  Decrement first

	 * and then check queue bits.

	/*

	 * 1st reference is dropped after finishing sending a "user" message,

	 * 2nd reference is dropped after confirmation with the response is

	 * returned.

	 * 1st and 2nd can happen in any order, so the rnbd_iu should be

	 * released (rtrs_permit returned to rtrs) only after both

	 * are finished.

			/*

			 * If server thinks its fine, but we fail to process

			 * then be nice and send a close to server.

		/*

		 * That can happen only in one case, when RTRS has restablished

		 * the connection and link_ev() is called, but session is almost

		 * dead, last reference on session is put and caller is waiting

		 * for RTRS to close everything.

	/*

	 * Careful here: we are called from RTRS link event directly,

	 * thus we can't send any RTRS request and wait for response

	 * or RTRS will not be able to complete request with failure

	 * if something goes wrong (failing of outstanding requests

	 * happens exactly from the context where we are blocking now).

	 *

	 * So to avoid deadlocks each usr message sent from here must

	 * be asynchronous.

			/*

			 * When device is establishing connection for the first

			 * time - do not remap, it will be closed soon.

	/*

	 * That is simple percpu variable which stores cpu indices, which are

	 * incremented on each access.  We need that for the sake of fairness

	 * to wake up queues in a round-robin manner.

	/* loop in caller, see __find_and_get_sess().

	 * You can't leave mutex locked and call schedule(), you will catch a

	 * deadlock with a caller of free_sess(), which has just put the last

	 * reference and is about to take the sess_lock in order to delete

	 * the session from the list.

			/*

			 * No RTRS connection, session is dying.

			/*

			 * Alive session is found, wait for RTRS connection.

 Session is dying, repeat the loop */

		/*

		 * Ref is 0, session is dying, wait for RTRS disconnect

		 * in order to avoid session names clashes.

		/*

		 * RTRS is disconnected and soon session will be freed,

		 * so repeat a loop.

 caller is responsible for initializing 'first' to false */

 size/64 */

/* The amount of data that belongs to an I/O and the amount of data that

 * should be read or written to the disk (bi_size) can differ.

 *

 * E.g. When WRITE_SAME is used, only a small amount of data is

 * transferred that is then written repeatedly over a lot of sectors.

 *

 * Get the size of data to be transferred via RTRS by summing up the size

 * of the scather-gather list entries.

	/*

	 * We only support discards with single segment for now.

	 * See queue limits.

/**

 * rnbd_clt_dev_add_to_requeue() - add device to requeue if session is busy

 * @dev:	Device to be checked

 * @q:		Queue to be added to the requeue list if required

 *

 * Description:

 *     If session is busy, that means someone will requeue us when resources

 *     are freed.  If session is not doing anything - device is not added to

 *     the list and @false is returned.

			/* Paired with rnbd_put_permit(). Set a bit first

			 * and then observe the busy counter.

			/* Very unlikely, but possible: busy counter was

			 * observed as zero.  Drop all bits and return

			 * false to restart the queue by ourselves.

		/*

		 * If session is not busy we have to restart

		 * the queue ourselves.

ms*/);

				     /* Even-if the request has no segment,

				      * sglist must have one entry at least.

ms*/);

ms*/);

 shared read/write queues */

 dedicated queue for poll */

 for HCTX_TYPE_DEFAULT, HCTX_TYPE_READ, HCTX_TYPE_POLL */

	/*

	 * HCTX_TYPE_DEFAULT and HCTX_TYPE_READ share one set of queues

	 * others are for HCTX_TYPE_POLL

		/*

		 * A device MUST have its own session to use the polling-mode.

		 * It must fail to map new device with the same session.

	/*

	 * Nothing was found, establish rtrs connection and proceed further.

 Do not use pdu of rtrs */

	/*

	 * we don't support discards to "discontiguous" segments

	 * in on request

	/*

	 * nr_cpu_ids: the number of softirq queues

	 * nr_poll_queues: the number of polling queues

	/*

	 * Here we called from sysfs entry, thus clt-sysfs is

	 * responsible that session will not disappear.

 To avoid deadlock firstly remove itself */

 Likely last reference put */

	/*

	 * Here device and session can be vanished!

 Firstly forbid access through sysfs interface */

	/*

	 * Here at this point there is no any concurrent access to sessions

	 * list and devices list:

	 *   1. New session or device can't be created - session sysfs files

	 *      are removed.

	 *   2. Device or session can't be removed - module reference is taken

	 *      into account in unmap device sysfs callback.

	 *   3. No IO requests inflight - each file open of block_dev increases

	 *      module reference in get_disk().

	 *

	 * But still there can be user requests inflights, which are sent by

	 * asynchronous send_msg_*() functions, thus before unmapping devices

	 * RTRS session must be explicitly closed.

			/*

			 * Here unmap happens in parallel for only one reason:

			 * blk_cleanup_queue() takes around half a second, so

			 * on huge amount of devices the whole module unload

			 * procedure takes minutes.

 Wait for all scheduled unmap works */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2014 Sergey Senozhatsky.

/*

 * Initialize zcomp_strm structure with ->tfm initialized by backend, and

 * ->buffer. Return a negative value on error.

	/*

	 * allocate 2 pages. 1 for compressed data, plus 1 extra for the

	 * case when compressed size is larger than the original one

	/*

	 * Crypto does not ignore a trailing new line symbol,

	 * so make sure you don't supply a string containing

	 * one.

	 * This also means that we permit zcomp initialisation

	 * with any compressing algorithm known to crypto api.

 show available compressors */

	/*

	 * Out-of-tree module known to crypto api or a missing

	 * entry in `backends'.

	/*

	 * Our dst memory (zstrm->buffer) is always `2 * PAGE_SIZE' sized

	 * because sometimes we can endup having a bigger compressed data

	 * due to various reasons: for example compression algorithms tend

	 * to add some padding to the compressed buffer. Speaking of padding,

	 * comp algorithm `842' pads the compressed length to multiple of 8

	 * and returns -ENOSP when the dst memory is not big enough, which

	 * is not something that ZRAM wants to see. We can handle the

	 * `compressed_size > PAGE_SIZE' case easily in ZRAM, but when we

	 * receive -ERRNO from the compressing backend we can't help it

	 * anymore. To make `842' happy we need to tell the exact size of

	 * the dst buffer, zram_drv will take care of the fact that

	 * compressed buffer is too big.

/*

 * search available compressors for requested algorithm.

 * allocate new zcomp and initialize it. return compressing

 * backend pointer or ERR_PTR if things went bad. ERR_PTR(-EINVAL)

 * if requested algorithm is not supported, ERR_PTR(-ENOMEM) in

 * case of allocation error, or any other error potentially

 * returned by zcomp_init().

/*

 * Compressed RAM block device

 *

 * Copyright (C) 2008, 2009, 2010  Nitin Gupta

 *               2012, 2013 Minchan Kim

 *

 * This code is released using a dual license strategy: BSD/GPL

 * You can choose the licence that better fits your requirements.

 *

 * Released under the terms of 3-clause BSD License

 * Released under the terms of GNU General Public License Version 2.0

 *

 idr index must be protected */

 Module params (documentation at end) */

/*

 * Pages that compress to sizes equals or greater than this are stored

 * uncompressed in memory.

 flag operations require table entry bit_spin_lock() being held */

/*

 * Check if request is within bounds and aligned on zram logical blocks.

 unaligned request */

 out of range range */

 I/O request is valid */

 no chars parsed, invalid input */

/*

 * Mark all pages which are older than or equal to cutoff as IDLE.

 * Callers should hold the zram init lock in read mode

		/*

		 * Do not mark ZRAM_UNDER_WB slot as ZRAM_IDLE to close race.

		 * See the comment in writeback_store.

		/*

		 * If it did not parse as 'all' try to treat it as an integer when

		 * we have memory tracking enabled.

 A cutoff_time of 0 marks everything as idle, this is the "all" behavior */

 hope filp_close flush all of IO */

 ignore trailing newline */

 Support only block device in this moment */

	/*

	 * With writeback feature, zram does asynchronous IO so it's no longer

	 * synchronous device so let's remove synchronous io flag. Othewise,

	 * upper layer(e.g., swap) could wait IO completion rather than

	 * (submit and return), which will cause system sluggish.

	 * Furthermore, when the IO function returns(e.g., swap_readpage),

	 * upper layer expects IO was done so it could deallocate the page

	 * freely but in fact, IO is going on so finally could cause

	 * use-after-free when the IO is really done.

 skip 0 bit to confuse zram.handle = 0 */

/*

 * Returns 1 if the submission is successful.

		/*

		 * Clearing ZRAM_UNDER_WB is duty of caller.

		 * IOW, zram_free_page never clear it.

 Need for hugepage writeback racing */

		/*

		 * XXX: A single page IO would be inefficient for write

		 * but it would be not bad as starter.

			/*

			 * Return last IO error unless every IO were

			 * not suceeded.

		/*

		 * We released zram_slot_lock so need to check if the slot was

		 * changed. If there is freeing for the slot, we can catch it

		 * easily by zram_allocated.

		 * A subtle case is the slot is freed/reallocated/marked as

		 * ZRAM_IDLE again. To close the race, idle_store doesn't

		 * mark ZRAM_IDLE once it found the slot was ZRAM_UNDER_WB.

		 * Thus, we could close the race by checking ZRAM_IDLE bit.

/*

 * Block layer want one ->submit_bio to be active at a time, so if we use

 * chained IO with parent IO in same context, it's a deadlock. To avoid that,

 * use a worker thread context.

/*

 * We switched to per-cpu streams and this attr is not needed anymore.

 * However, we will keep it around for some time, because:

 * a) we may revert per-cpu streams in the future

 * b) it's visible to user space and we need to follow our 2 years

 *    retirement rule; but we already have a number of 'soon to be

 *    altered' attrs, so max_comp_streams need to wait for the next

 *    layoff cycle.

 ignore trailing newline */

 Free all pages that are still in this zram device */

/*

 * To protect concurrent access to the same index entry,

 * caller should hold this table index entry's bit_spinlock to

 * indicate this index entry is accessing.

	/*

	 * No memory is allocated for same element filled pages.

	 * Simply clear same page flag.

 Should NEVER happen. Return bio error if it does. */

 Use a temporary buffer to decompress the page */

 Free memory associated with this sector now. */

	/*

	 * handle allocation has 2 paths:

	 * a) fast path is executed with preemption disabled (for

	 *  per-cpu streams) and has __GFP_DIRECT_RECLAIM bit clear,

	 *  since we can't sleep;

	 * b) slow path enables preemption and attempts to allocate

	 *  the page with __GFP_DIRECT_RECLAIM bit set. we have to

	 *  put per-cpu compression stream and, thus, to re-do

	 *  the compression once handle is allocated.

	 *

	 * if we have a 'non-null' handle here then we are coming

	 * from the slow path and handle has already been allocated.

	/*

	 * Free memory associated with this sector

	 * before overwriting unused sectors.

 Update stats */

		/*

		 * This is a partial IO. We need to read the full page

		 * before to write the changes.

/*

 * zram_bio_discard - handler on discard request

 * @index: physical block index in PAGE_SIZE units

 * @offset: byte offset within physical block

	/*

	 * zram manages data in physical block size units. Because logical block

	 * size isn't identical with physical block size on some arch, we

	 * could get a discard request pointing to a specific offset within a

	 * certain physical block.  Although we can handle this request by

	 * reading that physiclal block and decompressing and partially zeroing

	 * and re-compressing and then re-storing it, this isn't reasonable

	 * because our intent with a discard request is to save memory.  So

	 * skipping this logical block is appropriate here.

/*

 * Returns errno if it has some problem. Otherwise return 0 or 1.

 * Returns 0 if IO request was done synchronously

 * Returns 1 if IO request was successfully submitted.

/*

 * Handler function for all zram I/O requests.

	/*

	 * If I/O fails, just return error(ie, non-zero) without

	 * calling page_endio.

	 * It causes resubmit the I/O with bio request by upper functions

	 * of rw_page(e.g., swap_readpage, __swap_writepage) and

	 * bio->bi_end_io does things to handle the error

	 * (e.g., SetPageError, set_page_dirty and extra works).

 I/O operation under all of CPU are done so let's free */

 Do not reset an active device or claimed device */

 From now on, anyone can't open /dev/zram[0-9] */

 Make sure all the pending I/O are finished */

 zram was claimed to reset so open request fails */

/*

 * Allocate and initialize new zram device. the function returns

 * '>= 0' device_id upon success, and negative value otherwise.

 gendisk structure */

 Actual capacity set using syfs (/sys/block/zram<id>/disksize */

 zram devices sort of resembles non-rotational disks */

	/*

	 * To ensure that we always get PAGE_SIZE aligned

	 * and n*PAGE_SIZED sized I/O requests.

	/*

	 * zram_bio_discard() will clear all logical blocks if logical block

	 * size is identical with physical block size(PAGE_SIZE). But if it is

	 * different, we will skip discarding some parts of logical blocks in

	 * the part of the request range which isn't aligned to physical block

	 * size.  So we can't ensure that all discarded logical blocks are

	 * zeroed.

		/*

		 * If we were claimed by reset_store(), del_gendisk() will

		 * wait until reset_store() is done, so nothing need to do.

 Make sure all the pending I/O are finished */

 del_gendisk drains pending reset_store */

	/*

	 * disksize_store() may be called in between zram_reset_device()

	 * and del_gendisk(), so run the last reset to avoid leaking

	 * anything allocated with disksize_store()

 zram-control sysfs attributes */

/*

 * NOTE: hot_add attribute is not the usual read-only sysfs attribute. In a

 * sense that reading from this file does alter the state of your system -- it

 * creates a new un-initialized zram device and returns back this device's

 * device_id (or an error code if it fails to create a new device).

 dev_id is gendisk->first_minor, which is `int' */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

* Filename: dma.c

*

* Authors: Joshua Morris <josh.h.morris@us.ibm.com>

*	Philip Kelleher <pjk1939@linux.vnet.ibm.com>

*

* (C) Copyright 2013 IBM Corporation

 Logical address */

 Page Offset */

 This timeout is used to detect a stalled DMA channel */

 Bit[0:2]: 512byte offset */

 Bit[4:6]: 512byte count */

----------------- Misc Utility Functions -------------------*/

 Reset all DMA Command/Status Queues */

----------------- DMA Tracker -------------------*/

----------------- Interrupt Coalescing -------------*/

/*

 * Interrupt Coalescing Register Format:

 * Interrupt Timer (64ns units) [15:0]

 * Interrupt Count [24:16]

 * Reserved [31:25]

----------------- RSXX DMA Handling -------------------*/

	/*

	 * Requeued DMAs go to the front of the queue so they are issued

	 * first.

 Data could not be reconstructed. */

		/*

		 * The dma engine was stalled because the SW_CMD_IDX write

		 * was lost. Issue it again to recover.

 Clean up the DMA queue */

		/*

		 * This will catch any DMAs that slipped in right before the

		 * fault, but was queued after all the other DMAs were

		 * cancelled.

			/*

			 * The function dma_map_page is placed here because we

			 * can only, by design, issue up to 255 commands to the

			 * hardware at one time per DMA channel. So the maximum

			 * amount of mapped memory would be 255 * 4 channels *

			 * 4096 Bytes which is less than 2GB, the limit of a x8

			 * Non-HWWD PCIe slot. This way the dma_map_page

			 * function should never fail because of a lack of

			 * mappable memory.

 Let HW know we've queued commands. */

		/*

		 * The read memory-barrier is necessary to keep aggressive

		 * processors/optimizers (such as the PPC Apple G5) from

		 * reordering the following status-buffer tag & status read

		 * *before* the count read on subsequent iterations of the

		 * loop!

 Queue the DMA */

 sectors are 512 bytes */

----------------- DMA Engine Initialization & Setup -------------------*/

 Regmap is divided up into 4K chunks. One for each DMA channel */

 Reset the DMA queues */

************ Setup DMA Control *************/

 Enable the interrupts after all setup has completed. */

 Clean up issued DMAs */

 Clean up the DMA queue */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

* Filename: config.c

*

* Authors: Joshua Morris <josh.h.morris@us.ibm.com>

*	Philip Kelleher <pjk1939@linux.vnet.ibm.com>

*

* (C) Copyright 2013 IBM Corporation

	/*

	 * Return the compliment of the CRC to ensure compatibility

	 * (i.e. this is how early rsxx drivers did it.)

----------------- Config Byte Swap Functions -------------------*/

----------------- Config Operations ------------------*/

 Convert data to little endian for the CRC calculation. */

	/*

	 * Swap the data from little endian to big endian so it can be

	 * stored.

		/*

		 * We calculate the CRC with the data in little endian, because

		 * early drivers did not take big endian CPUs into account.

		 * The data is always stored in big endian, so we need to byte

		 * swap it before calculating the CRC.

 Check the CRC */

 Convert the data to CPU byteorder */

		/*

		 * Config version changes require special handling from the

		 * user

 SPDX-License-Identifier: GPL-2.0-or-later

/*

* Filename: dev.c

*

* Authors: Joshua Morris <josh.h.morris@us.ibm.com>

*	Philip Kelleher <pjk1939@linux.vnet.ibm.com>

*

* (C) Copyright 2013 IBM Corporation

/*

 * For now I'm making this tweakable in case any applications hit this limit.

 * If you see a "bio too big" error in the log you will need to raise this

 * value.

----------------- Block Device Operations -----------------*/

	/*

	 * get geometry: Fake it. I haven't found any drivers that set

	 * geo->start, so we won't either.

----------------- Device Setup -------------------*/

 The block device requires the stripe size from the config. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

* Filename: core.c

*

* Authors: Joshua Morris <josh.h.morris@us.ibm.com>

*	Philip Kelleher <pjk1939@linux.vnet.ibm.com>

*

* (C) Copyright 2013 IBM Corporation

 10 minutes */

 --------------------Debugfs Setup ------------------- */

----------------- Interrupt Control & Handling -------------------*/

/*

 * NOTE: Disabling the IER will disable the hardware interrupt.

 * Disabling the ISR will disable the software handling of the ISR bit.

 *

 * Enable/Disable interrupt functions assume the card->irq_lock

 * is held by the caller.

			/*

			 * A few systems seem to have an intermittent issue

			 * where PCI reads return all Fs, but retrying the read

			 * a little later will return as expected.

----------------- Card Event Handler -------------------*/

 Don't attach DMA interfaces if the card has an invalid config */

		/*

		 * Fall through so the DMA devices can be attached and

		 * the user can attempt to pull off their data.

 Everything else, detach DMA interface if it's attached. */

	/*

	 * dStroy is a term coined by marketing to represent the low level

	 * secure erase.

	/*

	 * Enable the interrupt now to avoid any weird race conditions where a

	 * state change might occur while rsxx_get_card_state() is

	 * processing a returned creg cmd.

----------------- Card Operations -------------------*/

 We can't issue a shutdown if the card is in a transition state */

 Only issue a shutdown if we need to */

	/*

	 * We need to guarantee that the write for eeh_state and masking

	 * interrupts does not become reordered. This will prevent a possible

	 * race condition with the EEH code.

 We need to wait for the hardware to reset */

 Hardware failed resetting itself. */

 Clears the ISR register from spurious interrupts */

----------------- Driver Initialization & Setup -------------------*/

/* Returns:   0 if the driver is compatible with the device

************ Setup Processor Command Interface *************/

************ Load Card Config *************/

************ Setup DMA Engine *************/

************ Setup Card Event Handler *************/

	/*

	 * Now that the DMA Engine and devices have been setup,

	 * we can enable the event interrupt(it kicks off actions in

	 * those layers so we couldn't enable it right away.)

************ Setup Debugfs *************/

 Sync outstanding event handlers. */

 Prevent work_structs from re-queuing themselves. */

 We don't support suspend at this time. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

* Filename: cregs.c

*

* Authors: Joshua Morris <josh.h.morris@us.ibm.com>

*	Philip Kelleher <pjk1939@linux.vnet.ibm.com>

*

* (C) Copyright 2013 IBM Corporation

------------ Private Functions --------------*/

		/*

		 * Firmware implementation makes it necessary to byte swap on

		 * little endian processors.

		/*

		 * Firmware implementation makes it necessary to byte swap on

		 * little endian processors.

 Setting the valid bit will kick off the command. */

	/*

	 * We have to set the timer before we push the new command. Otherwise,

	 * we could create a race condition that would occur if the timer

	 * was not canceled, and expired after the new command was pushed,

	 * but before the command was issued to hardware.

 Don't queue stuff up if we're halted. */

	/*

	 * The timer could not be cancelled for some reason,

	 * race to pop the active command.

		/*

		 * At this point we're probably reading garbage from HW. Don't

		 * do anything else that could mess up the system and let

		 * the sync function return an error.

 Paranoid Sanity Checks */

	/*

	 * mutex_trylock is used here because if reset_lock is taken then a

	 * reset is already happening. So, we can just go ahead and return.

 Cancel outstanding commands */

 Used for synchronous accesses */

	/*

	 * This timeout is necessary for unresponsive hardware. The additional

	 * 20 seconds to used to guarantee that each cregs requests has time to

	 * complete.

	/*

	 * The creg interface is guaranteed to complete. It has a timeout

	 * mechanism that will kick in if hardware does not respond.

		/*

		 * This is really bad, because the kernel timer did not

		 * expire and notify us of a timeout!

		/*

		* This read is needed to verify that there has not been any

		* extreme errors that might have occurred, i.e. EEH. The

		* function iowrite32 will not detect EEH errors, so it is

		* necessary that we recover if such an error is the reason

		* for the timeout. This is a dummy read.

 ---------------------------- Public API ---------------------------------- */

----------------- HW Log Functions -------------------*/

	/*

	 * New messages start with "<#>", where # is the log level. Messages

	 * that extend past the log buffer will use the previous level

 Skip past the log level. */

/*

 * The substrncpy function copies the src string (which includes the

 * terminating '\0' character), up to the count into the dest pointer.

 * Returns the number of bytes copied to dest.

 Failed getting the log message */

		/*

		 * Flush the log if we've hit the end of a message or if we've

		 * run out of buffer space.

 Don't log blank lines. */

-------------- IOCTL REG Access ------------------*/

------------ Initialization & Setup --------------*/

 Cancel outstanding commands */

 SPDX-License-Identifier: GPL-2.0-or-later

/*  Xenbus code for blkif backend

    Copyright (C) 2005 Rusty Russell <rusty@rustcorp.com.au>

    Copyright (C) 2005 XenSource Ltd





 On the XenBus the max length of 'ring-ref%u'. */

/*

 * The last request could free the device from softirq context and

 * xen_blkif_free() can sleep.

 Not ready to connect? */

 Already connected? */

 Attempt to connect: exit if we fail to. */

	/*

	 * Because freeing back to the cache may be deferred, it is not

	 * safe to unload the module (and hence destroy the cache) until

	 * this has completed. To prevent premature unloading, take an

	 * extra module reference here and release only when the object

	 * has been freed back to the cache.

 Already connected through? */

		/* The above kthread_stop() guarantees that at this point we

		 * don't have any discard_io or other_io requests. So, checking

		 * for inflight IO is enough.

 Remove all persistent grants and the cache of ballooned pages. */

 Check that there is no request in use */

	/*

	 * blkif->rings was allocated in connect_ring, so we should free it in

	 * here.

 Make sure everything is drained before shutting down */

/*

 *  sysfs interface for VBD I/O requests

 Enable the persistent grants feature. */

 Put the reference we set in xen_blkif_alloc(). */

 Optional. */

/*

 * Entry point to this code when a new device is created.  Allocate the basic

 * structures, and watch the store waiting for the hotplug scripts to tell us

 * the device's physical major and minor numbers.  Switch to InitWait.

 match the pr_debug in xen_blkbk_remove */

 Multi-queue: advertise how many queues are supported by us.*/

 setup back pointer */

/*

 * Callback received when the hotplug scripts have placed the physical-device

 * node.  Read it and the mode node, and create a vbd.  If the frontend is

 * ready, connect.

		/*

		 * Since this watch will fire once immediately after it is

		 * registered, we expect this.  Ignore it, and wait for the

		 * hotplug scripts.

 Front end dir is a number, which is used as the handle. */

 We're potentially connected now */

/*

 * Callback received when the frontend's state changes.

		/*

		 * Ensure we connect even when two watches fire in

		 * close succession and we miss the intermediate value

		 * of frontend_state.

		/*

		 * Enforce precondition before potential leak point.

		 * xen_blkif_disconnect() is idempotent.

			/*

			 * Clean up so that memory resources can be used by

			 * other devices. connect_ring reported already error.

 if not online */

 implies xen_blkif_disconnect() via xen_blkbk_remove() */

 Once a memory pressure is detected, squeeze free page pools for a while. */

/*

 * Callback received when the memory pressure is detected.

 ** Connection ** */

/*

 * Write the physical details regarding the block device to the store, and

 * switch to Connected state.

 Supply the information about the device the frontend needs */

 If we can't advertise it is OK. */

 FIXME: use a typename instead */

/*

 * Each ring may have multi pages, depends on "ring-page-order".

 Map the shared frame, irq etc. */

 sufficient for "/queue-NNN" */

	/*

	 * Read the number of hardware queues from frontend.

 Buggy or malicious guest. */

/******************************************************************************

 *

 * Back-end of the driver for virtual block devices. This portion of the

 * driver exports a 'unified' block-device interface that can be accessed

 * by any operating system that implements a compatible front end. A

 * reference front-end implementation can be found in:

 *  drivers/block/xen-blkfront.c

 *

 * Copyright (c) 2003-2004, Keir Fraser & Steve Hand

 * Copyright (c) 2005, Christopher Clark

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License version 2

 * as published by the Free Software Foundation; or, when distributed

 * separately from the Linux kernel or incorporated into other

 * software packages, subject to the following license:

 *

 * Permission is hereby granted, free of charge, to any person obtaining a copy

 * of this source file (the "Software"), to deal in the Software without

 * restriction, including without limitation the rights to use, copy, modify,

 * merge, publish, distribute, sublicense, and/or sell copies of the Software,

 * and to permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE

 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER

 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING

 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS

 * IN THE SOFTWARE.

/*

 * Maximum number of unused free pages to keep in the internal buffer.

 * Setting this to a value too low will reduce memory used in each backend,

 * but can have a performance penalty.

 *

 * A sane value is xen_blkif_reqs * BLKIF_MAX_SEGMENTS_PER_REQUEST, but can

 * be set to a lower value that might degrade performance on some intensive

 * IO workloads.

/*

 * Maximum number of grants to map persistently in blkback. For maximum

 * performance this should be the total numbers of grants that can be used

 * to fill the ring, but since this might become too high, specially with

 * the use of indirect descriptors, we set it to a value that provides good

 * performance without using too much memory.

 *

 * When the list of persistent grants is full we clean it up using a LRU

 * algorithm.

/*

 * How long a persistent grant is allowed to remain allocated without being in

 * use. The time is in seconds, 0 means indefinitely long.

/*

 * Maximum number of rings/queues blkback supports, allow as many queues as there

 * are CPUs if user has not specified a value.

/*

 * Maximum order of pages to be used for the shared ring between front and

 * backend, 4KB page granularity is used.

/*

 * The LRU mechanism to clean the lists of persistent grants needs to

 * be executed periodically. The time interval between consecutive executions

 * of the purge mechanism is set in ms.

/*

 * When the persistent grants list is full we will remove unused grants

 * from the list. The percent number of grants to be removed at each LRU

 * execution.

 Run-time switchable: /sys/module/blkback/parameters/ */

/*

 * We don't need locking around the persistent grant helpers

 * because blkback uses a single-thread for each backend, so we

 * can be sure that this functions will never be called recursively.

 *

 * The only exception to that is put_persistent_grant, that can be called

 * from interrupt context (by xen_blkbk_unmap), so we have to use atomic

 * bit operations to modify the flags of a persistent grant and to count

 * the number of used grants.

 Figure out where to put new node */

 Add new node and rebalance tree. */

	/*

	 * At this point, we can assure that there will be no calls

         * to get_persistent_grant (because we are executing this code from

         * xen_blkif_schedule), there can only be calls to put_persistent_gnt,

         * which means that the number of currently used grants will go down,

         * but never up, so we will always be able to remove the requested

         * number of grants.

	/*

	 * Check whether we also need to start cleaning

	 * grants that were used since last purge in order to cope

	 * with the requested num

 We can defer this work */

/*

 * Retrieve from the 'pending_reqs' a free pending_req structure to be used.

/*

 * Return the 'pending_req' structure back to the freepool. We also

 * wake up the thread if it was waiting for a free page.

/*

 * Routines for managing virtual block devices (vbds).

	/*

	 * Write the current state; we will use this to synchronize

	 * the front-end. If the current state is "connected" the

	 * front-end will get the new size information online.

/*

 * Notification from the guest OS.

/*

 * SCHEDULER FUNCTIONS

 clear flag *before* checking for work */

 Shrink the free pages pool if it is too large. */

 Drain pending purge work */

/*

 * Remove persistent grants and empty the pool of free pages

 Free all persistent grant pages */

 Since we are shutting down remove all pages from the buffer */

 All */);

	/* BUG_ON used to reproduce existing behaviour,

	/*

	 * Make sure the request is freed before releasing blkif,

	 * or there could be a race between free_req and the

	 * cleanup done in xen_blkif_free during shutdown.

	 *

	 * NB: The fact that we might try to wake up pending_free_wq

	 * before drain_complete (in case there's a drain going on)

	 * it's not a problem with our current implementation

	 * because we can assure there's no thread waiting on

	 * pending_free_wq if there's a drain going on, but it has

	 * to be taken into account if the current model is changed.

/*

 * Unmap the grant references.

 *

 * This could accumulate ops up to the batch size to reduce the number

 * of hypercalls, but since this is only used in error paths there's

 * no real need.

	/*

	 * Fill out preq.nr_sects with proper amount of sectors, and setup

	 * assign map[..] with the PFN of the page in our domain with the

	 * corresponding grant reference for each page.

			/*

			 * We are using persistent grants and

			 * the grant is already mapped

	/*

	 * Now swizzle the MFN in our domain with the MFN from the other domain

	 * so that when we access vaddr(pending_req,i) it has the contents of

	 * the page from the other domain.

 This is a newly mapped grant */

			/*

			 * We are using persistent grants, the grant is

			 * not mapped but we might have room for it.

				/*

				 * If we don't have enough memory to

				 * allocate the persistent_gnt struct

				 * map this grant non-persistenly

		/*

		 * We could not map this grant persistently, so use it as

		 * a non-persistent grant.

 Don't zap current batch's valid persistent grants. */

 Map indirect segments */

 An error fails the entire request. */

	/*

	 * If all of the bio's have completed it is time to unmap

	 * the grant references associated with 'request' and provide

	 * the proper response on the ring.

/*

 * bio callback.

/*

 * Function to copy the from the ring buffer the 'struct blkif_request'

 * (which has the sectors we want, number of them, grant references, etc),

 * and transmute  it to the block API to hand it over to the proper block disk.

 Ensure we see queued requests up to 'rp'. */

 We've seen a request, so clear spurious eoi flag. */

 before make_response() */

 Apply all sanity checks to /private copy/ of request. */

 Yield point for this unbounded loop. */

/*

 * Transmutation of the 'struct blkif_request' to a proper 'struct bio'

 * and call the 'submit_bio' to pass it to the underlying storage.

 make gcc happy */

 Check that the number of segments is sane. */

 Haven't submitted any bio's yet. */

	/*

	 * This check _MUST_ be done after xen_vbd_translate as the preq.bdev

	 * is set there.

	/* Wait on all outstanding I/O's and once that has been completed

	 * issue the flush.

	/*

	 * If we have failed at this point, we need to undo the M2P override,

	 * set gnttab_set_unmap_op on all of the grant references and perform

	 * the hypercall to unmap the grants - that is all done in

	 * xen_blkbk_unmap.

	/*

	 * This corresponding xen_blkif_put is done in __end_block_io_op, or

	 * below (in "!bio") if we are handling a BLKIF_OP_DISCARD.

 This will be hit if the operation was a flush or discard. */

 Let the I/Os go.. */

 Haven't submitted any bio's yet. */

 back off a bit */

 back off a bit */

/*

 * Put a response on the ring on how the operation fared.

 Place on the response ring for the relevant domain. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for the Micron P320 SSD

 *   Copyright (C) 2011 Micron Technology, Inc.

 *

 * Portions of this code were derived from works subjected to the

 * following copyright:

 *    Copyright (C) 2009 Integrated Device Technology, Inc.

 DMA region containing RX Fis, Identify, RLE10, and SMART buffers */

 0x100 + 0x200 + 0x200 + 0x200 is smaller than 4k but we pad it out */

 DMA region containing command table (should be 8192 bytes) */

 DMA region per command (contains header and SGL) */

 product numbers */

 Device instance number, incremented each time a device is probed. */

/*

 * Global variable used to hold the major block device number

 * allocated in mtip_init().

/*

 * This function check_for_surprise_removal is called

 * while card is removed from the system and it will

 * read the vendor id from the configuration space

 *

 * @pdev Pointer to the pci_dev structure.

 *

 * return value

 *	 true if device removed, else false

 Read the vendorID from the configuration space */

 device removed */

 device present */

/*

 * Reset the HBA (without sleeping)

 *

 * @dd Pointer to the driver data structure.

 *

 * return value

 *	0	The reset was successful.

 *	-1	The HBA Reset bit did not clear.

 Set the reset bit */

 Flush */

	/*

	 * Spin for up to 10 seconds waiting for reset acknowledgement. Spec

	 * is 1 sec but in LUN failure conditions, up to 10 secs are required

/*

 * Issue a command to the hardware.

 *

 * Set the appropriate bit in the s_active and Command Issue hardware

 * registers, causing hardware command processing to begin.

 *

 * @port Pointer to the port structure.

 * @tag  The tag of the command to be issued.

 *

 * return value

 *      None

 guard SACT and CI registers */

/*

 * Enable/disable the reception of FIS

 *

 * @port   Pointer to the port data structure

 * @enable 1 to enable, 0 to disable

 *

 * return value

 *	Previous state: 1 enabled, 0 disabled

 enable FIS reception */

 Flush */

/*

 * Enable/disable the DMA engine

 *

 * @port   Pointer to the port data structure

 * @enable 1 to enable, 0 to disable

 *

 * return value

 *	Previous state: 1 enabled, 0 disabled.

 enable FIS reception */

/*

 * Enables the port DMA engine and FIS reception.

 *

 * return value

 *	None

 Enable FIS reception */

 Enable the DMA engine */

/*

 * Deinitialize a port by disabling port interrupts, the DMA engine,

 * and FIS reception.

 *

 * @port Pointer to the port structure

 *

 * return value

 *	None

 Disable interrupts on this port */

 Disable the DMA engine */

 Disable FIS reception */

/*

 * Initialize a port.

 *

 * This function deinitializes the port by calling mtip_deinit_port() and

 * then initializes it by setting the command header and RX FIS addresses,

 * clearing the SError register and any pending port interrupts before

 * re-enabling the default set of port interrupts.

 *

 * @port Pointer to the port structure.

 *

 * return value

 *	None

 Program the command list base and FIS base addresses */

 Clear SError */

 reset the completed registers.*/

 Clear any pending interrupts for this port */

 Clear any pending interrupts on the HBA. */

 Enable port interrupts */

/*

 * Restart a port

 *

 * @port Pointer to the port data structure.

 *

 * return value

 *	None

 Disable the DMA engine */

 Chip quirk: wait up to 500ms for PxCMD.CR == 0 */

	/*

	 * Chip quirk: escalate to hba reset if

	 * PxCMD.CR not clear after 500 ms

 30 ms delay before com reset to quiesce chip */

 Set PxSCTL.DET */

 Wait 1 ms to quiesce chip function */

 Clear PxSCTL.DET */

 Wait 500 ms for bit 0 of PORT_SCR_STS to be set */

 Enable interrupts on the HBA. */

/*

 * Helper function for tag logging

/*

 * Handle an error.

 *

 * @dd Pointer to the DRIVER_DATA structure.

 *

 * return value

 *	None

 clear the tag accumulator */

 Loop through all the groups */

 clear completed status register in the hardware.*/

 Process successfully completed commands */

 Skip the internal command slot */

 Restart the port */

 Trying to determine the cause of the error */

 non-critical error, don't fail the load */

 clear the tag accumulator */

 Loop through all the groups */

 Should re-issue? */

			/*

			 * First check if this command has

			 *  exceeded its retries.

 Re-issue the command. */

 Retire a command that will not be reissued */

/*

 * Handle a set device bits interrupt

 clear completed status register in the hardware.*/

 Process completed commands. */

 skip internal command slot. */

 If last, re-enable interrupts */

/*

 * Process legacy pio and d2h interrupts

/*

 * Demux and handle errors

 Acknowledge the interrupt status on the port.*/

 Demux port status */

 Start at 1: group zero is always local? */

				/*

				 * Chip quirk: SDB interrupt but nothing

				 * to complete

 don't proceed further */

 acknowledge interrupt */

/*

 * HBA interrupt subroutine.

 *

 * @irq		IRQ number.

 * @instance	Pointer to the driver data structure.

 *

 * return value

 *	IRQ_HANDLED	A HBA interrupt was pending and handled.

 *	IRQ_NONE	This interrupt was not for the HBA.

 Com reset after secure erase or lowlevel format */

	/*

	 * Ignore s_active bit 0 of array element 0.

	 * This bit will always be set

/*

 * Wait for port to quiesce

 *

 * @port    Pointer to port data structure

 * @timeout Max duration to wait (ms)

 *

 * return value

 *	0	Success

 *	-EBUSY  Commands still active

 svc thd is actively issuing commands */

/*

 * Execute an internal command and wait for the completion.

 *

 * @port    Pointer to the port data structure.

 * @fis     Pointer to the FIS that describes the command.

 * @fis_len  Length in WORDS of the FIS.

 * @buffer  DMA accessible for command data.

 * @buf_len  Length, in bytes, of the data buffer.

 * @opts    Command header options, excluding the FIS length

 *             and the number of PRD entries.

 * @timeout Time in ms to wait for the command to complete.

 *

 * return value

 *	0	 Command completed successfully.

 *	-EFAULT  The buffer address is not correctly aligned.

 *	-EBUSY   Internal command or other IO in progress.

 *	-EAGAIN  Time out waiting for command to complete.

 Make sure the buffer is 8 byte aligned. This is asic specific. */

 wait for io to complete if non atomic */

 Copy the command to the command table */

 insert request and run queue */

 recover from timeout issue */

 Clear the allocated and active bits for the internal command. */

 NCQ paused */

/*

 * Byte-swap ATA ID strings.

 *

 * ATA identify data contains strings in byte-swapped 16-bit words.

 * They must be swapped (on all architectures) to be usable as C strings.

 * This function swaps bytes in-place.

 *

 * @buf The buffer location of the string

 * @len The number of bytes to swap

 *

 * return value

 *	None

 2 minutes */

 2 minutes */

 60 seconds */

 15 seconds */

/*

 * Request the device identity information.

 *

 * If a user space buffer is not specified, i.e. is NULL, the

 * identify information is still read from the drive and placed

 * into the identify data buffer (@e port->identify) in the

 * port data structure.

 * When the identify buffer contains valid identify information @e

 * port->identify_valid is non-zero.

 *

 * @port	 Pointer to the port structure.

 * @user_buffer  A user space buffer where the identify data should be

 *                    copied.

 *

 * return value

 *	0	Command completed successfully.

 *	-EFAULT An error occurred while coping data to the user buffer.

 *	-1	Command failed.

 Build the FIS. */

 Set the identify information as invalid. */

 Clear the identify information. */

 Execute the command. */

	/*

	 * Perform any necessary byte-swapping.  Yes, the kernel does in fact

	 * perform field-sensitive swapping on the string fields.

	 * See the kernel use of ata_id_string() for proof of this.

 model string*/

 firmware string*/

 serial# string*/

 Check security locked state */

 Set the identify buffer as valid. */

/*

 * Issue a standby immediate command to the device.

 *

 * @port Pointer to the port structure.

 *

 * return value

 *	0	Command was executed successfully.

 *	-1	An error occurred while executing the command.

 Build the FIS. */

/*

 * Issue a READ LOG EXT command to the device.

 *

 * @port	pointer to the port structure.

 * @page	page number to fetch

 * @buffer	pointer to buffer

 * @buffer_dma	dma address corresponding to @buffer

 * @sectors	page length to fetch, in sectors

 *

 * return value

 *	@rv	return value from mtip_exec_internal_command()

/*

 * Issue a SMART READ DATA command to the device.

 *

 * @port	pointer to the port structure.

 * @buffer	pointer to buffer

 * @buffer_dma	dma address corresponding to @buffer

 *

 * return value

 *	@rv	return value from mtip_exec_internal_command()

/*

 * Get the value of a smart attribute

 *

 * @port	pointer to the port structure

 * @id		attribute number

 * @attrib	pointer to return attrib information corresponding to @id

 *

 * return value

 *	-EINVAL	NULL buffer passed or unsupported attribute @id.

 *	-EPERM	Identify data not valid, SMART not supported or not enabled

/*

 * Get the drive capacity.

 *

 * @dd      Pointer to the device data structure.

 * @sectors Pointer to the variable that will receive the sector count.

 *

 * return value

 *	1 Capacity was returned successfully.

 *	0 The identify information is invalid.

/*

 * Display the identify command data.

 *

 * @port Pointer to the port data structure.

 *

 * return value

 *	None

/*

 * Map the commands scatter list into the command table.

 *

 * @command Pointer to the command.

 * @nents Number of scatter list entries.

 *

 * return value

 *	None

/*

 * @brief Execute a drive command.

 *

 * return value 0 The command completed successfully.

 * return value -1 An error occurred while executing the command.

 Build the FIS. */

 Clear the dev bit*/

 Execute the command. */

 Status*/

 Error*/

/*

 * @brief Execute a drive command.

 *

 * @param port Pointer to the port data structure.

 * @param command Pointer to the user specified command parameters.

 * @param user_buffer Pointer to the user space buffer where read sector

 *                   data should be copied.

 *

 * return value 0 The command completed successfully.

 * return value -EFAULT An error occurred while copying the completion

 *                 data to the user space buffer.

 * return value -1 An error occurred while executing the command.

 Build the FIS. */

 Execute the command. */

 Collect the completion status. */

 Status*/

 Error*/

/*

 *  Indicates whether a command has a single sector payload.

 *

 *  @command passed to the device to perform the certain event.

 *  @features passed to the device to perform the certain event.

 *

 *  return value

 *	1	command is one that always has a single sector payload,

 *		regardless of the value in the Sector Count field.

 *      0       otherwise

 *

 list of commands that have an implicit sector count of 1 */

/*

 * Executes a taskfile

 * See ide_taskfile_ioctl() for derivation

 130560 = 512 * 0xFF*/

 only supports PIO and non-data commands from this ioctl. */

 Build the FIS. */

 Clear the dev bit*/

 check for erase mode support during secure erase.*/

 Determine the correct transfer size.*/

 Execute the command.*/

 reclaim the DMA buffers.*/

 return the ATA registers to the caller.*/

/*

 * Handle IOCTL calls from the Block Layer.

 *

 * This function is called by the Block Layer when it receives an IOCTL

 * command that it does not understand. If the IOCTL command is not supported

 * this function returns -ENOTTY.

 *

 * @dd  Pointer to the driver data structure.

 * @cmd IOCTL command passed from the Block Layer.

 * @arg IOCTL argument passed from the Block Layer.

 *

 * return value

 *	0	The IOCTL completed successfully.

 *	-ENOTTY The specified command is not supported.

 *	-EFAULT An error occurred copying data to a user space buffer.

 *	-EIO	An error occurred while executing the command.

 Copy the user command info to our buffer. */

 Execute the drive command. */

 Copy the status back to the users buffer. */

 Copy the user command info to our buffer. */

 Execute the drive command. */

 Copy the status back to the users buffer. */

/*

 * Submit an IO to the hw

 *

 * This function is called by the block layer to issue an io

 * to the device. Upon completion, the callback function will

 * be called with the data parameter passed as the callback data.

 *

 * @dd       Pointer to the driver data structure.

 * @start    First sector to read.

 * @nsect    Number of sectors to read.

 * @tag      The tag of this read command.

 * @callback Pointer to the function that should be called

 *	     when the read completes.

 * @data     Callback data passed to the callback function

 *	     when the read completes.

 * @dir      Direction (read or write)

 *

 * return value

 *	None

 Map the scatter list for DMA access */

	/*

	 * The number of retries for this command before it is

	 * reported as a failure to the upper layers.

 Fill out fis */

 Populate the command header */

	/*

	 * To prevent this command from being issued

	 * if an internal command is in progress or error handling is active.

 Issue the command to the hardware */

/*

 * Sysfs status dump.

 *

 * @dev  Pointer to the device structure, passed by the kernrel.

 * @attr Pointer to the device_attribute structure passed by the kernel.

 * @buf  Pointer to the char buffer that will receive the stats info.

 *

 * return value

 *	The size, in bytes, of the data copied into buf.

 debugsfs entries */

/*

 * Perform any init/resume time hardware setup

 *

 * @dd Pointer to the driver data structure.

 *

 * return value

 *	None

 interrupt bug workaround: use only 1 IS bit.*/

/*

 * Detect the details of the product, and store anything needed

 * into the driver data structure.  This includes product type and

 * version and number of slot groups.

 *

 * @dd Pointer to the driver data structure.

 *

 * return value

 *	None

	/*

	 * HBA base + 0xFC [15:0] - vendor-specific hardware interface

	 * info register:

	 * [15:8] hardware/software interface rev#

	 * [   3] asic-style interface

	 * [ 2:0] number of slot groups, minus 1 (only valid for asic-style).

/*

 * Blocking wait for FTL rebuild to complete

 *

 * @dd Pointer to the DRIVER_DATA structure.

 *

 * return value

 *	0	FTL rebuild completed successfully

 *	-EFAULT FTL rebuild error/timeout/interruption

 Print message every 3 minutes */

 Check for timeout */

 Unmap the DMA scatter list entries */

/*

 * service thread to issue queued commands

 *

 * @data Pointer to the driver data structure.

 *

 * return value

 *	0

		/*

		 * the condition is to check neither an internal command is

		 * is in progress nor error handling is active

 Demux bits: start with error handling */

 used to restrict the loop to one iteration */

 Issue the command to the hardware */

/*

 * DMA region teardown

 *

 * @dd Pointer to driver_data structure

 *

 * return value

 *      None

/*

 * DMA region setup

 *

 * @dd Pointer to driver_data structure

 *

 * return value

 *      -ENOMEM Not enough free DMA region space to initialize driver

 Allocate dma memory for RX Fis, Identify, and Sector Bufffer */

 Allocate dma memory for command list */

 Setup all pointers into first DMA region */

 check write protect, over temp and rebuild statuses */

 non-critical error, don't fail the load */

 get write protect progess */

/*

 * Called once for each card.

 *

 * @dd Pointer to the driver data structure.

 *

 * return value

 *	0 on success, else an error code.

 Continue workqueue setup */

 Enable unaligned IO constraints for some devices */

 Spinlock to prevent concurrent issue */

 Set the port mmio base address. */

 DMA allocations */

 Setup the pointers to the extended s_active and CI registers. */

 Conditionally reset the HBA. */

 Clear any pending interrupts on the HBA */

 Setup the ISR and enable interrupts. */

 Enable interrupts on the HBA. */

 Disable interrupts on the HBA. */

 Release the IRQ. */

 Free the memory allocated for the for structure. */

	/*

	 * Send standby immediate (E0h) to the drive so that it

	 * saves its state.

/*

 * Called to deinitialize an interface.

 *

 * @dd Pointer to the driver data structure.

 *

 * return value

 *	0

 de-initialize the port. */

 Disable interrupts on the HBA. */

 Release the IRQ. */

 Free dma regions */

 Free the memory allocated for the for structure. */

/*

 * Issue a Standby Immediate command to the device.

 *

 * This function is called by the Block Layer just before the

 * system powers off during a shutdown.

 *

 * @dd Pointer to the driver data structure.

 *

 * return value

 *	0

	/*

	 * Send standby immediate (E0h) to the drive so that it

	 * saves its state.

/*

 * Suspend function

 *

 * This function is called by the Block Layer just before the

 * system hibernates.

 *

 * @dd Pointer to the driver data structure.

 *

 * return value

 *	0	Suspend was successful

 *	-EFAULT Suspend was not successful

	/*

	 * Send standby immediate (E0h) to the drive

	 * so that it saves its state.

 Disable interrupts on the HBA.*/

/*

 * Resume function

 *

 * This function is called by the Block Layer as the

 * system resumes.

 *

 * @dd Pointer to the driver data structure.

 *

 * return value

 *	0	Resume was successful

 *      -EFAULT Resume was not successful

 Perform any needed hardware setup steps */

 Reset the HBA */

	/*

	 * Enable the port, DMA engine, and FIS reception specific

	 * h/w in controller.

 Enable interrupts on the HBA.*/

/*

 * Helper function for reusing disk name

 * upon hot insertion.

/*

 * Block layer IOCTL handler.

 *

 * @dev Pointer to the block_device structure.

 * @mode ignored

 * @cmd IOCTL command passed from the user application.

 * @arg Argument passed from the user application.

 *

 * return value

 *	0        IOCTL completed successfully.

 *	-ENOTTY  IOCTL not supported or invalid driver data

 *                 structure pointer.

/*

 * Block layer compat IOCTL handler.

 *

 * @dev Pointer to the block_device structure.

 * @mode ignored

 * @cmd IOCTL command passed from the user application.

 * @arg Argument passed from the user application.

 *

 * return value

 *	0        IOCTL completed successfully.

 *	-ENOTTY  IOCTL not supported or invalid driver data

 *                 structure pointer.

/*

 * Obtain the geometry of the device.

 *

 * You may think that this function is obsolete, but some applications,

 * fdisk for example still used CHS values. This function describes the

 * device as having 224 heads and 56 sectors per cylinder. These values are

 * chosen so that each cylinder is aligned on a 4KB boundary. Since a

 * partition is described in terms of a start and end cylinder this means

 * that each partition is also 4KB aligned. Non-aligned partitions adversely

 * affects performance.

 *

 * @dev Pointer to the block_device strucutre.

 * @geo Pointer to a hd_geometry structure.

 *

 * return value

 *	0       Operation completed successfully.

 *	-ENOTTY An error occurred while reading the drive capacity.

/*

 * Block device operation function.

 *

 * This structure contains pointers to the functions required by the block

 * layer.

	/*

	 * If unaligned depth must be limited on this controller, mark it

	 * as unaligned if the IO isn't on a 4k boundary (start of length).

 Populate the SG list */

 Populate the command header */

/*

 * Block layer initialization function.

 *

 * This function is called once by the PCI layer for each P320

 * device that is connected to the system.

 *

 * @dd Pointer to the driver data structure.

 *

 * return value

 *	0 on success else an error code.

 hw init done, before rebuild */

 Initialize the protocol layer. */

	/*

	 * if rebuild pending, start the service thread, and delay the block

	 * queue creation and device_add_disk()

 Set device limits. */

 Set the capacity of the device in 512 byte sectors. */

 Enable the block device and add it to /dev */

 service thread created for handling rebuild */

 Delete our gendisk. This also removes the device from /dev */

 De-initialize the protocol layer. */

/*

 * Block layer deinitialization function.

 *

 * Called by the PCI layer as each P320 device is removed.

 *

 * @dd Pointer to the driver data structure.

 *

 * return value

 *	0

		/*

		 * Explicitly wait here for IOs to quiesce,

		 * as mtip_standby_drive usually won't wait for IOs.

 De-initialize the protocol layer. */

/*

 * Function called by the PCI layer when just before the

 * machine shuts down.

 *

 * If a protocol layer shutdown function is present it will be called

 * by this function.

 *

 * @dd Pointer to the driver data structure.

 *

 * return value

 *	0

 Delete our gendisk structure, and cleanup the blk queue. */

 Helper for selecting a node in round robin mode */

	/*

	 * This workaround is specific to AMD/ATI chipset with a PCI upstream

	 * device with device id 0x5aXX

 Check further up the topology */

/*

 * Called for each supported PCI device detected.

 *

 * This function allocates the private data structure, enables the

 * PCI device and then calls the block layer initialization function.

 *

 * return value

 *	0 on success else an error code.

 Allocate memory for this devices private data. */

 Attach the private data to this PCI device.  */

 Map BAR5 to memory. */

 Copy the info we may need later into the private data structure. */

 first worker context always runs in ISR */

 Log the bindings */

 Initialize the block layer. */

	/*

	 * Increment the instance count so that each device has a unique

	 * instance number.

 device in rebuild state, return 0 from probe */

 Add to online list even if in ftl rebuild */

/*

 * Called for each probed device when the device is removed or the

 * driver is unloaded.

 *

 * return value

 *	None

 Spin until workers are done */

 Clean up the block layer. */

/*

 * Called for each probed device when the device is suspended.

 *

 * return value

 *	0  Success

 *	<0 Error

 Disable ports & interrupts then send standby immediate */

	/*

	 * Save the pci config space to pdev structure &

	 * disable the device

 Move to Low power state*/

/*

 * Called for each probed device when the device is resumed.

 *

 * return value

 *      0  Success

 *      <0 Error

 Move the device to active State */

 Restore PCI configuration space */

 Enable the PCI device*/

	/*

	 * Calls hbaReset, initPort, & startPort function

	 * then enables interrupts

/*

 * Shutdown routine

 *

 * return value

 *      None

 Table of device ids supported by this driver. */

 Structure that describes the PCI driver functions. */

/*

 * Module initialization function.

 *

 * Called once when the module is loaded. This function allocates a major

 * block device number to the Cyclone devices and registers the PCI layer

 * of the driver.

 *

 * Return value

 *      0 on success else error code.

 Allocate a major block device number to use with this driver. */

 Register our PCI operations. */

/*

 * Module de-initialization function.

 *

 * Called once when the module is unloaded. This function deallocates

 * the major block device number allocated by mtip_init() and

 * unregisters the PCI layer of the driver.

 *

 * Return value

 *      none

 Release the allocated major block device number. */

 Unregister the PCI driver. */

 SPDX-License-Identifier: GPL-2.0

/*

 * null_blk trace related helpers.

 *

 * Copyright (C) 2020 Western Digital Corporation or its affiliates.

/*

 * Helper to use for all null_blk traces to extract disk name.

 SPDX-License-Identifier: GPL-2.0

 Max active zones has to be < nbr of seq zones in order to be enforceable */

 Max open zones has to be <= max active zones */

		/*

		 * Stacked DM target drivers will remap the zone information by

		 * modifying the zone information passed to the report callback.

		 * So use a local copy to avoid corruption of the device zone

		 * array.

/*

 * This is called in the case of memory backing from null_process_cmd()

 * with the target zone already locked.

 Read must be below the write pointer position */

 close operation on closed is not an error */

/*

 * This function matches the manage open zone resources function in the ZBC standard,

 * with the addition of max active zones support (added in the ZNS standard).

 *

 * The function determines if a zone can transition to implicit open or explicit open,

 * while maintaining the max open zone (and max active zone) limit(s). It may close an

 * implicit open zone in order to make additional zone resources available.

 *

 * ZBC states that an implicit open zone shall be closed only if there is not

 * room within the open limit. However, with the addition of an active limit,

 * it is not certain that closing an implicit open zone will allow a new zone

 * to be opened, since we might already be at the active limit capacity.

 Should never be called for other states */

 Cannot write to a full zone */

	/*

	 * Regular writes must be at the write pointer position.

	 * Zone append writes are automatically issued at the write

	 * pointer and the position returned using the request or BIO

	 * sector.

 open operation on exp open is not an error */

 finish operation on full is not an error */

 reset operation on empty is not an error */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Add configfs and memory store: Kyungchan Koh <kkc6196@fb.com> and

 * Shaohua Li <shli@fb.com>

/*

 * Status flags for nullb_device.

 *

 * CONFIGURED:	Device has been configured and turned on. Cannot reconfigure.

 * UP:		Device is currently on and visible in userspace.

 * THROTTLED:	Device is being throttled.

 * CACHE:	Device is using a write-back cache.

/*

 * nullb_page is a page in memory for nullb devices.

 *

 * @page:	The page holding the data.

 * @bitmap:	The bitmap represents which sector in the page has data.

 *		Each bit represents one block size. For example, sector 8

 *		will use the 7th bit

 * The highest 2 bits of bitmap are for special purpose. LOCK means the cache

 * page is being flushing to storage. FREE means the cache page is freed and

 * should be skipped from flushing to storage. Please see

 * null_make_cache_space

/*

 * For more details about fault injection, please refer to

 * Documentation/fault-injection/fault-injection.rst.

 The following macro should only be used with TYPE = {uint, ulong, bool}. */

	/*

	 * Make sure at least one queue exists for each of submit and poll.

	/*

	 * Make sure that null_init_hctx() does not access nullb->queues[] past

	 * the end of that array.

	/*

	 * Keep previous and new queue numbers in nullb_device for reference in

	 * the call back function null_map_queues().

 on error, revert the queue numbers */

 enable badblocks */

	/*

	 * nullb_flush_cache_page could unlock before using the c_pages. To

	 * avoid race, we don't allow page free

		/*

		 * We found the page which is being flushed to disk by other

		 * threads

 give other threads a chance */

 race with timer */

 requeue request */

	/*

	 * Since root privileges are required to configure the null_blk

	 * driver, it is fine that this driver does not initialize the

	 * data buffers of read commands. Zero-initialize these buffers

	 * anyway if KMSAN is enabled to prevent that KMSAN complains

	 * about null_blk not initializing read data buffers.

 Complete IO by inline, softirq or timer */

			/*

			 * XXX: no proper submitting cpu information available.

 Do not overwrite errors (e.g. timeout errors) */

		/*

		 * Refer nr_hw_queues of the tag set to check if the expected

		 * number of hardware queues are prepared. If block layer failed

		 * to prepare them, use previous numbers of submit queues and

		 * poll queues to map queues.

	/*

	 * If the device is marked as blocking (i.e. memory backed or zoned

	 * device), the submission path may be blocked waiting for resources

	 * and cause real timeouts. For these real timeouts, the submission

	 * path will complete the request using blk_mq_complete_request().

	 * Only fake timeouts need to execute blk_mq_complete_request() here.

		/*

		 * Alternate between hitting the core BUSY path, and the

		 * driver driven requeue path

 Do memory allocation, so set blocking */

 cache is meaningless */

 can not stop a queue */

/*

 *	TURBOchannel driver services.

 *

 *	Copyright (c) 2005  James Simmons

 *	Copyright (c) 2006  Maciej W. Rozycki

 *

 *	Loosely based on drivers/dio/dio-driver.c and

 *	drivers/pci/pci-driver.c.

 *

 *	This file is subject to the terms and conditions of the GNU

 *	General Public License.  See the file "COPYING" in the main

 *	directory of this archive for more details.

/**

 * tc_register_driver - register a new TC driver

 * @drv: the driver structure to register

 *

 * Adds the driver structure to the list of registered drivers

 * Returns a negative value on error, otherwise 0.

 * If no error occurred, the driver remains registered even if

 * no device was claimed during registration.

/**

 * tc_unregister_driver - unregister a TC driver

 * @drv: the driver structure to unregister

 *

 * Deletes the driver structure from the list of registered TC drivers,

 * gives it a chance to clean up by calling its remove() function for

 * each device it was responsible for, and marks those devices as

 * driverless.

/**

 * tc_match_device - tell if a TC device structure has a matching

 *                   TC device ID structure

 * @tdrv: the TC driver to earch for matching TC device ID strings

 * @tdev: the TC device structure to match against

 *

 * Used by a driver to check whether a TC device present in the

 * system is in its list of supported devices.  Returns the matching

 * tc_device_id structure or %NULL if there is no match.

/**

 * tc_bus_match - Tell if a device structure has a matching

 *                TC device ID structure

 * @dev: the device structure to match against

 * @drv: the device driver to search for matching TC device ID strings

 *

 * Used by a driver to check whether a TC device present in the

 * system is in its list of supported devices.  Returns 1 if there

 * is a match or 0 otherwise.

/*

 *	TURBOchannel bus services.

 *

 *	Copyright (c) Harald Koerfgen, 1998

 *	Copyright (c) 2001, 2003, 2005, 2006, 2018  Maciej W. Rozycki

 *	Copyright (c) 2005  James Simmons

 *

 *	This file is subject to the terms and conditions of the GNU

 *	General Public License.  See the file "COPYING" in the main

 *	directory of this archive for more details.

/*

 * Probing for TURBOchannel modules.

 Found a board, allocate it an entry in the list */

 TURBOchannel has 34-bit DMA addressing (16GiB space). */

/*

 * The main entry.

 Initialize the TURBOchannel bus */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 *  Digianswer Bluetooth USB driver

 *

 *  Copyright (C) 2004-2007  Marcel Holtmann <marcel@holtmann.org>

 Tektronix BPA 100/105 (Digianswer) */

 Terminating entry */

 Read revision string */

 Prepend skb with frame type */

 Enable sniffer operation */

/*

 *

 *  Driver for the 3Com Bluetooth PCMCIA card

 *

 *  Copyright (C) 2001-2002  Marcel Holtmann <marcel@holtmann.org>

 *                           Jose Orlando Pereira <jop@di.uminho.pt>

 *

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License version 2 as

 *  published by the Free Software Foundation;

 *

 *  Software distributed under the License is distributed on an "AS

 *  IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or

 *  implied. See the License for the specific language governing

 *  rights and limitations under the License.

 *

 *  The initial developer of the original code is David A. Hinds

 *  <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds

 *  are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.

 *

 ======================== Module parameters ======================== */

 ======================== Local structures ======================== */

 For serializing operations */

 Transmit states  */

 Receiver states */

 ======================== Special I/O functions ======================== */

 ======================== Interrupt handling ======================== */

 Fill FIFO with current frame */

 Transmit next byte */

 Send frame */

 Allocate packet */

 Unknown packet */

 our irq handler is shared */

 ======================== HCI interface ======================== */

 Drop TX queue */

 Prepend skb with frame type */

 ======================== Card services HCI interaction ======================== */

 Reset */

 Load */

 Boot */

 Clear */

 Initialize HCI device */

 Load firmware */

 Timeout before it is safe to send the first HCI packet */

 Register HCI device */

 Create new info device */

	/* First pass: look for a config entry that looks normal.

	 * Two tries: without IO aliases, then with aliases

	/* Second pass: try to find an entry that isn't picky about

	 * its base address, then try to grab any standard serial port

	 * address, and finally try to get any free port.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 *  Generic Bluetooth SDIO driver

 *

 *  Copyright (C) 2007  Cambridge Silicon Radio Ltd.

 *  Copyright (C) 2007  Marcel Holtmann <marcel@holtmann.org>

 Generic Bluetooth Type-A SDIO device */

 Generic Bluetooth Type-B SDIO device */

 Generic Bluetooth AMP controller */

 Terminating entry */

 Receiver Data */

 Transmitter Data */

 Read Packet Control */

 Write Packet Control */

 Retry Control Status */

 Retry Control Set */

 Interrupt Indication */

 Interrupt Clear */

 Interrupt Enable */

 Bluetooth Mode Status */

 Bluetooth Mode Set */

 Prepend Type-A header */

		/* Out of memory. Prepare a read retry and just

		 * return with the expectation that the next time

		 * we're called we'll have more memory.

	/* Broadcom devices soldered onto the PCB (non-removable) use an

	 * UART connection for Bluetooth, ignore the BT SDIO interface.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 *  Bluetooth HCI UART driver for Intel devices

 *

 *  Copyright (C) 2015  Intel Corporation

 LPM flow is a priority, enqueue packet at list head */

 Even in case of failure, continue and test the suspended flag */

 LPM flow is a priority, enqueue packet at list head */

 Even in case of failure, continue and test the suspended flag */

 CONFIG_PM */

 LPM flow is a priority, enqueue packet at list head */

 Host/Controller are now LPM resumed, trigger a new delayed suspend */

		/* tty device and pdev device should share the same parent

		 * which is the UART port.

		/* Provide to idev a hu reference which is used to run LPM

		 * transactions (lpm suspend/resume) from PM callbacks.

		 * hu needs to be protected against concurrent removing during

		 * these PM ops.

 Link is busy, delay the suspend */

	/* This can be the first command sent to the chip, check

	 * that the controller is ready.

 In case of timeout, try to continue anyway */

	/* Device will not accept speed change if Intel version has not been

	 * previously requested.

 wait 100ms to change baudrate on controller side */

	/* Set the default boot parameter to 0x0 and it is updated to

	 * SKU specific boot parameter after reading Intel_Write_Boot_Params

	 * command while downloading the firmware.

 Check that the controller is ready */

 In case of timeout, try to continue anyway */

	/* Read the Intel version information to determine if the device

	 * is in bootloader mode or if it already has operational firmware

	 * loaded.

	/* The hardware platform number has a fixed value of 0x37 and

	 * for now only accept this single value.

        /* Check for supported iBT hardware variants of this firmware

         * loading method.

         *

         * This check has been put in place to ensure correct forward

         * compatibility options when newer hardware variants come along.

 LnP */

 WsP */

 ThP */

	/* The firmware variant determines if the device is in bootloader

	 * mode or is running operational firmware. The value 0x06 identifies

	 * the bootloader and the value 0x23 identifies the operational

	 * firmware.

	 *

	 * When the operational firmware is already present, then only

	 * the check for valid Bluetooth device address is needed. This

	 * determines if the device will be added as configured or

	 * unconfigured controller.

	 *

	 * It is not possible to use the Secure Boot Parameters in this

	 * case since that command is only available in bootloader mode.

	/* If the device is not in bootloader mode, then the only possible

	 * choice is to return an error and abort the device initialization.

	/* Read the secure boot parameters to identify the operating

	 * details of the bootloader.

	/* It is required that every single firmware fragment is acknowledged

	 * with a command complete event. If the boot parameters indicate

	 * that this bootloader does not send them, then abort the setup.

	/* If the OTP has no valid Bluetooth device address, then there will

	 * also be no valid address for the operational firmware.

	/* With this Intel bootloader only the hardware variant and device

	 * revision information are used to select the right firmware for SfP

	 * and WsP.

	 *

	 * The firmware filename is ibt-<hw_variant>-<dev_revid>.sfi.

	 *

	 * Currently the supported hardware variants are:

	 *   11 (0x0b) for iBT 3.0 (LnP/SfP)

	 *   12 (0x0c) for iBT 3.5 (WsP)

	 *

	 * For ThP/JfP and for future SKU's, the FW name varies based on HW

	 * variant, HW revision and FW revision, as these are dependent on CNVi

	 * and RF Combination.

	 *

	 *   18 (0x12) for iBT3.5 (ThP/JfP)

	 *

	 * The firmware file name for these will be

	 * ibt-<hw_variant>-<hw_revision>-<fw_revision>.sfi.

	 *

 SfP */

 WsP */

 ThP */

 Save the DDC file name for later */

 SfP */

 WsP */

 ThP */

 Start firmware downloading and get boot parameter */

	/* Before switching the device into operational mode and with that

	 * booting the loaded firmware, wait for the bootloader notification

	 * that all fragments have been successfully received.

	 *

	 * When the event processing receives the notification, then the

	 * STATE_DOWNLOADING flag will be cleared.

	 *

	 * The firmware loading should not take longer than 5 seconds

	 * and thus just timeout if that happens and fail the setup

	 * of this device.

	/* Check if there was an error and if is not -EALREADY which means the

	 * firmware has already been loaded.

 We need to restore the default speed before Intel reset */

	/* The bootloader will not indicate when the device is ready. This

	 * is done by the operational firmware sending bootup notification.

	 *

	 * Booting into operational firmware should not take longer than

	 * 1 second. However if that happens, then just fail the setup

	 * since something went wrong.

	/* Enable LPM if matching pdev with wakeup enabled, set TX active

	 * until further LPM TX notification.

 Ignore errors, device can work without DDC parameters */

	/* When the firmware loading completes the device sends

	 * out a vendor specific event indicating the result of

	 * the firmware loading.

	/* When switching to the operational firmware the device

	 * sends a vendor specific event indicating that the bootup

	 * completed.

	/* Be sure our controller is resumed and potential LPM transaction

	 * completed before enqueuing any packet.

		/* When the 0xfc01 command is issued to boot into

		 * the operational firmware, it will actually not

		 * send a command complete event. To keep the flow

		 * control working inject that event here.

 Prepend skb with frame type */

 Only enable wake-up/irq when controller is powered */

 Place this instance on the device list */

/**

 * Marvell Bluetooth driver

 *

 * Copyright (C) 2009, Marvell International Ltd.

 *

 * This software file (the "File") is distributed by Marvell International

 * Ltd. under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/*

 * This function is called by interface specific interrupt handler.

 * It updates Power Save & Host Sleep states, and wakes up the main

 * thread.

	/* header type: byte[3]

	 * HCI_COMMAND = 1, ACL_DATA = 2, SCO_DATA = 3, 0xFE = Vendor

	 * header length: byte[2][1][0]

/*

 * This function handles the event generated by firmware, rx data

 * received from firmware, and tx data sent from kernel.

 Stop the thread servicing the interrupts */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 *  Bluetooth HCI UART driver

 *

 *  Copyright (C) 2000-2001  Qualcomm Incorporated

 *  Copyright (C) 2002-2003  Maxim Krasnyansky <maxk@qualcomm.com>

 *  Copyright (C) 2004-2005  Marcel Holtmann <marcel@holtmann.org>

 Update HCI stat counters */

	/* This may be called in an IRQ context, so we can't sleep. Therefore

	 * we try to acquire the lock only, and if that fails we assume the

	 * tty is being closed because that is the only time the write lock is

	 * acquired. If, however, at some point in the future the write lock

	 * is also acquired in other situations, then this must be revisited.

	/* REVISIT: should we cope with bad skbs or ->write() returning

	 * and error value ?

 ------- Interface to HCI layer ------ */

 Reset device */

 Flush any pending characters in the driver and discipline. */

 Initialize device */

 Undo clearing this from hci_uart_close() */

 Close device */

 Send frames from HCI layer */

 Check the underlying device or tty has flow control support */

 serdev nodes check if the needed operations are present */

 Flow control or un-flow control the device */

 Disable hardware flow control */

 Clear RTS to prevent the device from sending */

 Most UARTs need OUT2 to enable interrupts */

 Set RTS to allow the device to send again */

 Re-enable hardware flow control */

 tty_set_termios() return not checked as it is always 0 */

 Init speed if any */

 Operational speed if any */

 ------ LDISC part ------ */

/* hci_uart_tty_open

 *

 *     Called when line discipline changed to HCI_UART.

 *

 * Arguments:

 *     tty    pointer to tty info structure

 * Return Value:

 *     0 if success, otherwise error code

	/* Error if the tty has no write op instead of leaving an exploitable

	 * hole

 disable alignment support by default */

 Flush any pending characters in the driver */

/* hci_uart_tty_close()

 *

 *    Called when the line discipline is changed to something

 *    else, the tty is closed, or the tty detects a hangup.

 Detach from the tty */

/* hci_uart_tty_wakeup()

 *

 *    Callback for transmit wakeup. Called when low level

 *    device driver can accept more send data.

 *

 * Arguments:        tty    pointer to associated tty instance data

 * Return Value:    None

/* hci_uart_tty_receive()

 *

 *     Called by tty low level driver when receive data is

 *     available.

 *

 * Arguments:  tty          pointer to tty isntance data

 *             data         pointer to received data

 *             flags        pointer to flags for data

 *             count        count of received data in bytes

 *

 * Return Value:    None

	/* It does not need a lock here as it is already protected by a mutex in

	 * tty caller

 Initialize and register HCI device */

	/* Only when vendor specific setup callback is provided, consider

	 * the manufacturer information valid. This avoids filling in the

	 * value for Ericsson when nothing is specified.

	/* Only call open() for the protocol after hdev is fully initialized as

	 * open() (or a timer/workqueue it starts) may attempt to reference it.

/* hci_uart_tty_ioctl()

 *

 *    Process IOCTL system call for the tty device.

 *

 * Arguments:

 *

 *    tty        pointer to tty instance data

 *    file       pointer to open file object for device

 *    cmd        IOCTL command code

 *    arg        argument for IOCTL call (cmd dependent)

 *

 * Return Value:    Command dependent

 Verify the status of the device */

/*

 * We don't provide read/write/poll interface for user space.

 Register the tty discipline */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Atheros Communication Bluetooth HCIATH3K UART protocol

 *

 *  HCIATH3K (HCI Atheros AR300x Protocol) is a Atheros Communication's

 *  power management protocol extension to H4 to support AR300x Bluetooth Chip.

 *

 *  Copyright (c) 2009-2010 Atheros Communications Inc.

 *

 *  Acknowledgements:

 *  This file is based on hci_h4.c, which was written

 *  by Maxim Krasnyansky and Marcel Holtmann.

 Clear RTS first */

 Set RTS, wake up board */

 verify and wake up controller */

 Ready to send Data */

	/* Update power management enable flag with parameters of

	 * HCI sleep enable vendor specific HCI command.

 Prepend skb with frame type */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 *  Bluetooth HCI UART driver for Broadcom devices

 *

 *  Copyright (C) 2015  Intel Corporation

 default autosleep delay */

/**

 * struct bcm_device_data - device specific data

 * @no_early_set_baudrate: Disallow set baudrate before driver setup()

 * @drive_rts_on_open: drive RTS signal on ->open() when platform requires it

/**

 * struct bcm_device - device driver resources

 * @serdev_hu: HCI UART controller struct

 * @list: bcm_device_list node

 * @dev: physical UART slave

 * @name: device name logged by bt_dev_*() functions

 * @device_wakeup: BT_WAKE pin,

 *	assert = Bluetooth device must wake up or remain awake,

 *	deassert = Bluetooth device may sleep when sleep criteria are met

 * @shutdown: BT_REG_ON pin,

 *	power up or power down Bluetooth device internal regulators

 * @reset: BT_RST_N pin,

 *	active low resets the Bluetooth logic core

 * @set_device_wakeup: callback to toggle BT_WAKE pin

 *	either by accessing @device_wakeup or by calling @btlp

 * @set_shutdown: callback to toggle BT_REG_ON pin

 *	either by accessing @shutdown or by calling @btpu/@btpd

 * @btlp: Apple ACPI method to toggle BT_WAKE pin ("Bluetooth Low Power")

 * @btpu: Apple ACPI method to drive BT_REG_ON pin high ("Bluetooth Power Up")

 * @btpd: Apple ACPI method to drive BT_REG_ON pin low ("Bluetooth Power Down")

 * @gpio_count: internal counter for GPIO resources associated with ACPI device

 * @gpio_int_idx: index in _CRS for GpioInt() resource

 * @txco_clk: external reference frequency clock used by Bluetooth device

 * @lpo_clk: external LPO clock used by Bluetooth device

 * @supplies: VBAT and VDDIO supplies used by Bluetooth device

 * @res_enabled: whether clocks and supplies are prepared and enabled

 * @init_speed: default baudrate of Bluetooth device;

 *	the host UART is initially set to this baudrate so that

 *	it can configure the Bluetooth device for @oper_speed

 * @oper_speed: preferred baudrate of Bluetooth device;

 *	set to 0 if @init_speed is already the preferred baudrate

 * @irq: interrupt triggered by HOST_WAKE_BT pin

 * @irq_active_low: whether @irq is active low

 * @irq_acquired: flag to show if IRQ handler has been assigned

 * @hu: pointer to HCI UART controller struct,

 *	used to disable flow control during runtime suspend and system sleep

 * @is_suspended: whether flow control is currently disabled

 * @no_early_set_baudrate: don't set_baudrate before setup()

 * @drive_rts_on_open: drive RTS signal on ->open() when platform requires it

 * @pcm_int_params: keep the initial PCM configuration

 Must be the first member, hci_serdev.c expects this. */

 generic bcm uart resources */

 List of BCM BT UART devices */

		/* This Broadcom specific command changes the UART's controller

		 * clock for baud rate > 3000000.

	/* This Broadcom specific command changes the UART's controller baud

	 * rate.

 bcm_device_exists should be protected by bcm_device_lock */

 Devices using serdev always exist */

		/* Intel Macs use bcm_apple_get_resources() and don't

		 * have regulator supplies configured.

 LPO clock needs to be 32.768 kHz */

		/* Intel Macs use bcm_apple_get_resources() and don't

		 * have regulator supplies configured.

 wait for device to power on and come out of reset */

 0=Disabled, 1=UART, 2=Reserved, 3=USB */

 idle threshold HOST, in 300ms */

 idle threshold device, in 300ms */

 BT_WAKE active mode: 1 = high, 0 = low */

 HOST_WAKE active mode: 1 = high, 0 = low */

 Allow host sleep in SCO flag */

 Combine sleep and LPM flag */

 Allow tri-state control of UART tx flag */

 Irrelevant USB flags */

		/* Retrieve saved bcm_device based on parent of the

		 * platform device (saved during device probe) and

		 * parent of tty device used by hci_uart

		/* If oper_speed is set, ldisc/serdev will set the baudrate

		 * before calling setup()

 Protect bcm->dev against removal of the device or driver */

 Init speed if any */

 Operational speed if any */

 PCM parameters if provided */

	/* Some devices ship with the controller default address.

	 * Allow the bootloader to set a valid address through the

	 * device tree.

 Delay auto-suspend when receiving completed packet */

 Prepend skb with frame type */

 Shall be resumed here */

 Once this returns, driver suspends BT via GPIO */

 Suspend the device */

 When this executes, the device has woken up already */

 suspend callback */

	/*

	 * When used with a device instantiated as platform_device, bcm_suspend

	 * can be called at any time as long as the platform device is bound,

	 * so it should use bcm_device_lock to protect access to hci_uart

	 * and device_wake-up GPIO.

 resume callback */

	/*

	 * When used with a device instantiated as platform_device, bcm_resume

	 * can be called at any time as long as platform device is bound,

	 * so it should use bcm_device_lock to protect access to hci_uart

	 * and device_wake-up GPIO.

 Some firmware reports an IRQ which does not work (wrong pin in fw table?) */

 CONFIG_ACPI */

		/*

		 * The reset line is asserted on powerdown and deasserted

		 * on poweron so the inverse of powered is used. Notice

		 * that the GPIO line BT_RST_N needs to be specified as

		 * active low in the device tree or similar system

		 * description.

 Try a bunch of names for TXCO */

 New explicit name */

 Deprecated name */

 Original code used no name at all */

 Handle deferred probing */

 Ignore all other errors as before */

 Check if we accidentally fetched the lpo clock twice */

 IRQ can be declared in ACPI table as Interrupt or GpioInt */

 Retrieve UART ACPI info */

	/* If the DSDT uses an Interrupt resource for the IRQ, then there are

	 * only 2 GPIO resources, we use the irq-last mapping for this, since

	 * we already have an irq the 3th / last mapping will not be used.

 Warn if our expectations are not met. */

 CONFIG_ACPI */

 Initialize routing field to an unused value */

 Place this instance on the device list */

 suspend and resume callbacks */

 Initialize routing field to an unused value */

	/* For now, we need to keep both platform device

	 * driver (ACPI generated) and serdev driver (DT).

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 *  Bluetooth support for Intel devices

 *

 *  Copyright (C) 2015  Intel Corporation

	/* For some Intel based controllers, the default Bluetooth device

	 * address 00:03:19:9E:8B:00 can be found. These controllers are

	 * fully operational, but have the danger of duplicate addresses

	 * and that in turn can cause problems with Bluetooth operation.

	/* The 2nd command parameter specifies the manufacturing exit method:

	 * 0x00: Just disable the manufacturing mode (0x00).

	 * 0x01: Disable manufacturing mode and reset with patches deactivated.

	 * 0x02: Disable manufacturing mode and reset with patches activated.

	/* Legacy ROM device needs to be in the manufacturer mode to apply

	 * diagnostic setting

	 *

	 * This flag is set after reading the Intel version.

	/* The hardware platform number has a fixed value of 0x37 and

	 * for now only accept this single value.

	/* Check for supported iBT hardware variants of this firmware

	 * loading method.

	 *

	 * This check has been put in place to ensure correct forward

	 * compatibility options when newer hardware variants come along.

 WP - Legacy ROM */

 StP - Legacy ROM */

 SfP */

 WsP */

 JfP */

 ThP */

 HrP */

 CcP */

	/* DDC file contains one or more DDC structure which has

	 * Length (1 byte), DDC ID (2 bytes), and DDC value (Length - 2).

	/* The hardware platform number has a fixed value of 0x37 and

	 * for now only accept this single value.

	/* Check for supported iBT hardware variants of this firmware

	 * loading method.

	 *

	 * This check has been put in place to ensure correct forward

	 * compatibility options when newer hardware variants come along.

 TyP */

 Slr */

 Slr-F */

		/* It is required that every single firmware fragment is acknowledged

		 * with a command complete event. If the boot parameters indicate

		 * that this bootloader does not send them, then abort the setup.

 Secure boot engine type should be either 1 (ECDSA) or 0 (RSA) */

 Consume Command Complete Status field */

	/* Event parameters contatin multiple TLVs. Read each of them

	 * and only keep the required data. Also, it use existing legacy

	 * version field like hw_platform, hw_variant, and fw_variant

	 * to keep the existing setup flow

 Make sure skb has a minimum length of the header */

 Make sure skb has a enough data */

			/* If image type is Operational firmware (0x03), then

			 * running FW Calendar Week and Year information can

			 * be extracted from Timestamp information

			/* If image type is Operational firmware (0x03), then

			 * running FW build number can be extracted from the

			 * Build information

 Ignore rest of information */

 consume the current tlv and move to next*/

 ------- REGMAP IBT SUPPORT ------- */

 regmap provides a little-endian formatted addr */

 regmap provides a little-endian formatted addr/value */

	/* data contains register+value, since we only support 32bit addr,

	 * minimum data size is 4 bytes.

 Config is the same for all register regions */

	/* Start the firmware download transaction with the Init fragment

	 * represented by the 128 bytes of CSS header.

	/* Send the 256 bytes of public key information from the firmware

	 * as the PKey fragment.

	/* Send the 256 bytes of signature information from the firmware

	 * as the Sign fragment.

	/* Start the firmware download transaction with the Init fragment

	 * represented by the 128 bytes of CSS header.

	/* Send the 96 bytes of public key information from the firmware

	 * as the PKey fragment.

	/* Send the 96 bytes of signature information from the firmware

	 * as the Sign fragment

		/* The parameter length of the secure send command requires

		 * a 4 byte alignment. It happens so that the firmware file

		 * contains proper Intel_NOP commands to align the fragments

		 * as needed.

		 *

		 * Send set of commands with 4 byte alignment from the

		 * firmware data buffer as a single Data fragement.

		/* Each SKU has a different reset parameter to use in the

		 * HCI_Intel_Reset command and it is embedded in the firmware

		 * data. So, instead of using static value per SKU, check

		 * the firmware data and save it for later use.

	/* SfP and WsP don't seem to update the firmware version on file

	 * so version checking is currently not possible.

 SfP */

 WsP */

 Skip version checking */

 Skip download if firmware has the same version */

			/* Return -EALREADY to indicate that the firmware has

			 * already been loaded.

	/* The firmware variant determines if the device is in bootloader

	 * mode or is running operational firmware. The value 0x06 identifies

	 * the bootloader and the value 0x23 identifies the operational

	 * firmware.

	 *

	 * If the firmware version has changed that means it needs to be reset

	 * to bootloader when operational so the new firmware can be loaded.

 Skip download if firmware has the same version */

		/* Return -EALREADY to indicate that firmware has

		 * already been loaded.

	/* The firmware variant determines if the device is in bootloader

	 * mode or is running operational firmware. The value 0x01 identifies

	 * the bootloader and the value 0x03 identifies the operational

	 * firmware.

	 *

	 * If the firmware version has changed that means it needs to be reset

	 * to bootloader when operational so the new firmware can be loaded.

	/* iBT hardware variants 0x0b, 0x0c, 0x11, 0x12, 0x13, 0x14 support

	 * only RSA secure boot engine. Hence, the corresponding sfi file will

	 * have RSA header of 644 bytes followed by Command Buffer.

	 *

	 * iBT hardware variants 0x17, 0x18 onwards support both RSA and ECDSA

	 * secure boot engine. As a result, the corresponding sfi file will

	 * have RSA header of 644, ECDSA header of 320 bytes followed by

	 * Command Buffer.

	 *

	 * CSS Header byte positions 0x08 to 0x0B represent the CSS Header

	 * version: RSA(0x00010000) , ECDSA (0x00020000)

 Check if CSS header for ECDSA follows the RSA header */

 Check if the CSS Header version is ECDSA(0x00020000) */

	/* Send Intel Reset command. This will result in

	 * re-enumeration of BT controller.

	 *

	 * Intel Reset parameter description:

	 * reset_type :   0x00 (Soft reset),

	 *		  0x01 (Hard reset)

	 * patch_enable : 0x00 (Do not enable),

	 *		  0x01 (Enable)

	 * ddc_reload :   0x00 (Do not reload),

	 *		  0x01 (Reload)

	 * boot_option:   0x00 (Current image),

	 *                0x01 (Specified boot address)

	 * boot_param:    Boot address

	 *

	/* Current Intel BT controllers(ThP/JfP) hold the USB reset

	 * lines for 2ms when it receives Intel Reset in bootloader mode.

	 * Whereas, the upcoming Intel BT controllers will hold USB reset

	 * for 150ms. To keep the delay generic, 150ms is chosen here.

	/* Intel controller supports two pages, each page is of 128-bit

	 * feature bit mask. And each bit defines specific feature support

	/* Read the supported features page2 if required in future.

 Should stop the trace before writing ddc event mask. */

	/* Read the Intel supported features and if new exception formats

	 * supported, need to load the additional DDC config to enable.

 Set or reset the debug features. */

		/* If the correct firmware patch file is not found, use the

		 * default firmware patch file instead

	/* The first byte indicates the types of the patch command or event.

	 * 0x01 means HCI command and 0x02 is HCI event. If the first bytes

	 * in the current firmware buffer doesn't start with 0x01 or

	 * the size of remain buffer is smaller than HCI command header,

	 * the firmware file is corrupted and it should stop the patching

	 * process.

	/* Ensure that the remain firmware data is long enough than the length

	 * of command parameter. If not, the firmware file is corrupted.

	/* If there is a command that loads a patch in the firmware

	 * file, then enable the patch upon success, otherwise just

	 * disable the manufacturer mode, for example patch activation

	 * is not required when the default firmware patch file is used

	 * because there are no patch data to load.

	/* This reads the expected events when the above command is sent to the

	 * device. Some vendor commands expects more than one events, for

	 * example command status event followed by vendor specific event.

	 * For this case, it only keeps the last expected event. so the command

	 * can be sent with __hci_cmd_sync_ev() which returns the sk_buff of

	 * last expected event.

	/* Every HCI commands in the firmware file has its correspond event.

	 * If event is not found or remain is smaller than zero, the firmware

	 * file is corrupted.

	/* It ensures that the returned event matches the event data read from

	 * the firmware file. At fist, it checks the length and then

	 * the contents of the event.

	/* fw_patch_num indicates the version of patch the device currently

	 * have. If there is no patch data in the device, it is always 0x00.

	 * So, if it is other than 0x00, no need to patch the device again.

	/* Opens the firmware patch file based on the firmware version read

	 * from the controller. If it fails to open the matching firmware

	 * patch file, it tries to open the default firmware patch file.

	 * If no patch file is found, allow the device to operate without

	 * a patch.

	/* Enable the manufacturer mode of the controller.

	 * Only while this mode is enabled, the driver can download the

	 * firmware patch data and configuration parameters.

	/* The firmware data file consists of list of Intel specific HCI

	 * commands and its expected events. The first byte indicates the

	 * type of the message, either HCI command or HCI event.

	 *

	 * It reads the command and its expected event from the firmware file,

	 * and send to the controller. Once __hci_cmd_sync_ev() returns,

	 * the returned event is compared with the event read from the firmware

	 * file and it will continue until all the messages are downloaded to

	 * the controller.

	 *

	 * Once the firmware patching is completed successfully,

	 * the manufacturer mode is disabled with reset and activating the

	 * downloaded patch.

	 *

	 * If the firmware patching fails, the manufacturer mode is

	 * disabled with reset and deactivating the patch.

	 *

	 * If the default patch file is used, no reset is done when disabling

	 * the manufacturer.

	/* Patching completed successfully and disable the manufacturer mode

	 * with reset and activate the downloaded firmware patches.

	/* Need build number for downloaded fw patches in

	 * every power-on boot

 Disable the manufacturer mode without reset */

	/* Patching failed. Disable the manufacturer mode with reset and

	 * deactivate the downloaded firmware patches.

	/* Set the event mask for Intel specific vendor events. This enables

	 * a few extra events that are useful during general operation.

	/* The bootloader will not indicate when the device is ready. This

	 * is done by the operational firmware sending bootup notification.

	 *

	 * Booting into operational firmware should not take longer than

	 * 1 second. However if that happens, then just fail the setup

	 * since something went wrong.

 SfP */

 WsP */

 JfP */

 ThP */

 HrP */

 CcP */

	/* The firmware variant determines if the device is in bootloader

	 * mode or is running operational firmware. The value 0x06 identifies

	 * the bootloader and the value 0x23 identifies the operational

	 * firmware.

	 *

	 * When the operational firmware is already present, then only

	 * the check for valid Bluetooth device address is needed. This

	 * determines if the device will be added as configured or

	 * unconfigured controller.

	 *

	 * It is not possible to use the Secure Boot Parameters in this

	 * case since that command is only available in bootloader mode.

		/* SfP and WsP don't seem to update the firmware version on file

		 * so version checking is currently possible.

 SfP */

 WsP */

 Proceed to download to check if the version matches */

	/* Read the secure boot parameters to identify the operating

	 * details of the bootloader.

	/* It is required that every single firmware fragment is acknowledged

	 * with a command complete event. If the boot parameters indicate

	 * that this bootloader does not send them, then abort the setup.

	/* If the OTP has no valid Bluetooth device address, then there will

	 * also be no valid address for the operational firmware.

	/* With this Intel bootloader only the hardware variant and device

	 * revision information are used to select the right firmware for SfP

	 * and WsP.

	 *

	 * The firmware filename is ibt-<hw_variant>-<dev_revid>.sfi.

	 *

	 * Currently the supported hardware variants are:

	 *   11 (0x0b) for iBT3.0 (LnP/SfP)

	 *   12 (0x0c) for iBT3.5 (WsP)

	 *

	 * For ThP/JfP and for future SKU's, the FW name varies based on HW

	 * variant, HW revision and FW revision, as these are dependent on CNVi

	 * and RF Combination.

	 *

	 *   17 (0x11) for iBT3.5 (JfP)

	 *   18 (0x12) for iBT3.5 (ThP)

	 *

	 * The firmware file name for these will be

	 * ibt-<hw_variant>-<hw_revision>-<fw_revision>.sfi.

	 *

 Firmware has already been loaded */

 Firmware has already been loaded */

 Start firmware downloading and get boot parameter */

 Firmware has already been loaded */

		/* When FW download fails, send Intel Reset to retry

		 * FW download.

	/* Before switching the device into operational mode and with that

	 * booting the loaded firmware, wait for the bootloader notification

	 * that all fragments have been successfully received.

	 *

	 * When the event processing receives the notification, then the

	 * INTEL_DOWNLOADING flag will be cleared.

	 *

	 * The firmware loading should not take longer than 5 seconds

	 * and thus just timeout if that happens and fail the setup

	 * of this device.

	/* Set the default boot parameter to 0x0 and it is updated to

	 * SKU specific boot parameter after reading Intel_Write_Boot_Params

	 * command while downloading the firmware.

 controller is already having an operational firmware */

		/* Once the device is running in operational mode, it needs to

		 * apply the device configuration (DDC) parameters.

		 *

		 * The device can work without DDC parameters, so even if it

		 * fails to load the file, no need to fail the setup.

 Read the Intel version information after loading the FW  */

	/* Set the event mask for Intel specific vendor events. This enables

	 * a few extra events that are useful during general operation. It

	 * does not enable any debugging related events.

	 *

	 * The device will function correctly without these events enabled

	 * and thus no need to fail the setup.

	/* The firmware file name for new generation controllers will be

	 * ibt-<cnvi_top type+cnvi_top step>-<cnvr_top type+cnvr_top step>

	/* The firmware variant determines if the device is in bootloader

	 * mode or is running operational firmware. The value 0x03 identifies

	 * the bootloader and the value 0x23 identifies the operational

	 * firmware.

	 *

	 * When the operational firmware is already present, then only

	 * the check for valid Bluetooth device address is needed. This

	 * determines if the device will be added as configured or

	 * unconfigured controller.

	 *

	 * It is not possible to use the Secure Boot Parameters in this

	 * case since that command is only available in bootloader mode.

	/* If the OTP has no valid Bluetooth device address, then there will

	 * also be no valid address for the operational firmware.

 Firmware has already been loaded */

 Start firmware downloading and get boot parameter */

 Firmware has already been loaded */

		/* When FW download fails, send Intel Reset to retry

		 * FW download.

	/* Before switching the device into operational mode and with that

	 * booting the loaded firmware, wait for the bootloader notification

	 * that all fragments have been successfully received.

	 *

	 * When the event processing receives the notification, then the

	 * BTUSB_DOWNLOADING flag will be cleared.

	 *

	 * The firmware loading should not take longer than 5 seconds

	 * and thus just timeout if that happens and fail the setup

	 * of this device.

 supports only CVSD and mSBC offload codecs */

	/* codec and its capabilities are pre-defined to ids

	 * preset id = 0x00 represents CVSD codec with sampling rate 8K

	 * preset id = 0x01 represents mSBC codec with sampling rate 16K

 Intel uses 1 as data path id for all the usecases */

	/* Set the default boot parameter to 0x0 and it is updated to

	 * SKU specific boot parameter after reading Intel_Write_Boot_Params

	 * command while downloading the firmware.

 check if controller is already having an operational firmware */

	/* Once the device is running in operational mode, it needs to

	 * apply the device configuration (DDC) parameters.

	 *

	 * The device can work without DDC parameters, so even if it

	 * fails to load the file, no need to fail the setup.

 Read supported use cases and set callbacks to fetch datapath id */

 Read the Intel version information after loading the FW  */

	/* Set the event mask for Intel specific vendor events. This enables

	 * a few extra events that are useful during general operation. It

	 * does not enable any debugging related events.

	 *

	 * The device will function correctly without these events enabled

	 * and thus no need to fail the setup.

 Legacy bootloader devices that supports MSFT Extension */

 JfP */

 ThP */

 HrP */

 CcP */

	/* All Intel new genration controllers support the Microsoft vendor

	 * extension are using 0xFC1E for VsMsftOpCode.

 Not supported */

	/* The some controllers have a bug with the first HCI command sent to it

	 * returning number of completed commands as zero. This would stall the

	 * command processing in the Bluetooth core.

	 *

	 * As a workaround, send HCI Reset command first which will reset the

	 * number of completed commands and allow normal command processing

	 * from now on.

	/* Starting from TyP device, the command parameter and response are

	 * changed even though the OCF for HCI_Intel_Read_Version command

	 * remains same. The legacy devices can handle even if the

	 * command has a parameter and returns a correct version information.

	 * So, it uses new format to support both legacy and new format.

 Check the status */

 Apply the common HCI quirks for Intel device */

 Set up the quality report callback for Intel devices */

 For Legacy device, check the HW platform value and size */

 Display version information */

		/* Check for supported iBT hardware variants of this firmware

		 * loading method.

		 *

		 * This check has been put in place to ensure correct forward

		 * compatibility options when newer hardware variants come

		 * along.

 WP */

 StP */

 Legacy ROM product */

			/* Apply the device specific HCI quirks

			 *

			 * WBS for SdP - SdP and Stp have a same hw_varaint but

			 * different fw_variant

			/* These devices have an issue with LED which doesn't

			 * go off immediately during shutdown. Set the flag

			 * here to send the LED OFF command during shutdown.

 SfP */

 WsP */

 JfP */

 ThP */

 HrP */

 CcP */

			/* Apply the device specific HCI quirks

			 *

			 * All Legacy bootloader devices support WBS

 Valid LE States quirk for JfP/ThP familiy */

 Setup MSFT Extension support */

 For TLV type device, parse the tlv data */

	/* Check for supported iBT hardware variants of this firmware

	 * loading method.

	 *

	 * This check has been put in place to ensure correct forward

	 * compatibility options when newer hardware variants come

	 * along.

 JfP */

 ThP */

 HrP */

 CcP */

		/* Some legacy bootloader devices from JfP supports both old

		 * and TLV based HCI_Intel_Read_Version command. But we don't

		 * want to use the TLV based setup routines for those legacy

		 * bootloader device.

		 *

		 * Also, it is not easy to convert TLV based version from the

		 * legacy version format.

		 *

		 * So, as a workaround for those devices, use the legacy

		 * HCI_Intel_Read_Version to get the version information and

		 * run the legacy bootloader setup.

 Display version information of TLV type */

		/* Apply the device specific HCI quirks for TLV based devices

		 *

		 * All TLV based devices support WBS

 Valid LE States quirk for GfP */

 Setup MSFT Extension support */

	/* Send HCI Reset to the controller to stop any BT activity which

	 * were triggered. This will help to save power and maintain the

	 * sync b/w Host and controller

	/* Some platforms have an issue with BT LED when the interface is

	 * down or BT radio is turned off, which takes 5 seconds to BT LED

	 * goes off. This command turns off the BT LED immediately.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 *  Bluetooth virtual HCI driver

 *

 *  Copyright (C) 2000-2001  Qualcomm Incorporated

 *  Copyright (C) 2002-2003  Maxim Krasnyansky <maxk@qualcomm.com>

 *  Copyright (C) 2004-2006  Marcel Holtmann <marcel@holtmann.org>

 bits 0-1 are dev_type (Primary or AMP) */

 bits 2-5 are reserved (must be zero) */

 bit 6 is for external configuration */

 bit 7 is for raw device */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 *  AVM BlueFRITZ! USB driver

 *

 *  Copyright (C) 2003-2006  Marcel Holtmann <marcel@holtmann.org>

 AVM BlueFRITZ! USB */

 Terminating entry */

 Prepend skb with frame type */

 Max HCI frame size seems to be 1511 + 1 */

 Don't send frame with multiple size of bulk max packet */

 Check number of endpoints */

 Initialize control structure and load firmware */

 Initialize and register HCI device */

/**

 * Marvell Bluetooth driver: debugfs related functions

 *

 * Copyright (C) 2009, Marvell International Ltd.

 *

 * This software file (the "File") is distributed by Marvell International

 * Ltd. under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Bluetooth supports for Qualcomm Atheros chips

 *

 *  Copyright (c) 2015 The Linux Foundation. All rights reserved.

	/* Unlike other SoC's sending version command response as payload to

	 * VSE event. WCN3991 sends version command response as a payload to

	 * command complete event.

		/* For Rome version 1.1 to 3.1, all segment commands

		 * are acked by a vendor specific event (VSE).

		 * For Rome >= 3.2, the download mode field indicates

		 * if VSE is skipped by the controller.

		 * In case VSE is skipped, only the last segment is acked.

 Update NVM tags as needed */

				/* HCI transport layer parameters

				 * enabling software inband sleep

				 * onto controller side.

 UART Baud Rate */

				/* Sleep enable mask

				 * enabling deep sleep feature on controller.

	/* Unlike other SoC's sending version command response as payload to

	 * VSE event. WCN3991 sends version command response as a payload to

	 * command complete event.

		/* For WCN6750, if mbn file is not present then check for

		 * tlv file.

 The last segment is always acked regardless download mode */

	/* Latest qualcomm chipsets are not sending a command complete event

	 * for every fw packet sent. They only respond with a vendor specific

	 * event for the last packet. This optimization in the chip will

	 * decrease the BT in initialization time. Here we will inject a command

	 * complete event to avoid a command timeout error message.

 TAG ID */

 size */

	/* Firmware files to download are based on ROM version.

	 * ROM version is derived from last two bytes of soc_ver.

 Download rampatch file */

		/* Choose mbn file by default.If mbn file is not found

		 * then choose tlv file

 Give the controller some time to get ready to receive the NVM */

 Download NVM configuration */

	/* WCN399x and WCN6750 supports the Microsoft vendor extension with 0xFD70 as the

	 * VsMsftOpCode.

 Perform HCI reset */

 get fw build info */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 *  Bluetooth HCI UART driver

 *

 *  Copyright (C) 2002-2003  Fabrizio Gennari <fabrizio.gennari@philips.com>

 *  Copyright (C) 2004-2005  Marcel Holtmann <marcel@holtmann.org>

 Unack'ed packets queue */

 Reliable packets queue */

 Unreliable packets queue */

 rxseq == txack. */

 Last packet sent by us that the peer ack'ed */

 Do we need to send ack's to the peer? */

 Reliable packet sequence number - used to assign seq to each rel pkt. */

 ---- BCSP CRC calculation ---- */

/* Table for calculating CRC for polynomial 0x1021, LSB processed first,

 * initial value 0xffff, bits shifted in reverse order.

 Initialise the crc calculator */

/* Update crc with next data byte

 *

 * Implementation note

 *     The data byte is treated as two nibbles.  The crc is generated

 *     in reverse, i.e., bits are fed into the register from the top.

 ---- BCSP core ---- */

 BCSP ACL channel */

 reliable channel */

 BCSP cmd/evt channel */

 reliable channel */

 BCSP SCO channel */

 unreliable channel */

 BCSP LE channel */

 unreliable channel */

 BCSP internal channel */

 unreliable channel */

 Vendor specific commands */

	/* Max len of packet: (original len +4(bcsp hdr) +2(crc))*2

	 * (because bytes 0xc0 and 0xdb are escaped, worst case is

	 * when the packet is all made of 0xc0 and 0xdb :) )

	 * + 2 (0xc0 delimiters at start and end).

 Put BCSP header */

 Put payload */

 Put CRC */

 This is a rewrite of pkt_avail in ABCSP */

	/* First of all, check for unreliable messages in the queue,

	 * since they have priority

	/* Now, try to send a reliable pkt. We can only send a

	 * reliable packet if the number of packets sent but not yet ack'ed

	 * is < than the winsize

	/* We could not send a reliable packet, either because there are

	 * none or because there are too many unack'ed pkts. Did we receive

	 * any packets we have not acknowledged yet ?

		/* if so, craft an empty ACK pkt and send it on BCSP unreliable

		 * channel 0

 We have nothing to send */

 Remove ack'ed packets */

/* Handle BCSP link-establishment packets. When we

 * detect a "sync" packet, symptom that the BT module has reset,

 * we do nothing :) (yet)

 spot "conf" pkts and reply with a "conf rsp" pkt */

 Spot "sync" pkts. If we find one...disaster! */

 reliable pkt */

 check the rx sequence number is as expected */

			/* handle re-transmitted packet or

			 * when packet was missed

 do not process out-of-order packet payload */

 send current txack value to all received reliable packets */

 If needed, transmit an ack pkt */

	/* handle received ACK indications,

	 * including those from out-of-order packets

 Pull out BCSP hdr */

		/* ignore packet payload of already ACKed re-transmitted

		 * packets or when a packet was missed in the BCSP window

 Recv data */

 May be 0 */

 pkt with crc */

BT_ERR("Ignoring byte %02x", *ptr);*/

				/* Do not increment ptr or decrement count

				 * Allocate packet. Max len of a BCSP pkt=

				 * 0xFFF (payload) +4 (header) +2 (crc)

 Arrange to retransmit all messages in the relq. */

 SPDX-License-Identifier: GPL-2.0-only

 Read Build Information */

 Write BD_ADDR */

 Intel Read Version */

 Intel Write BD Address */

 Read ROM Version */

 Reset */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Bluetooth HCI serdev driver lib

 *

 *  Copyright (C) 2017  Linaro, Ltd., Rob Herring <robh@kernel.org>

 *

 *  Based on hci_ldisc.c:

 *

 *  Copyright (C) 2000-2001  Qualcomm Incorporated

 *  Copyright (C) 2002-2003  Maxim Krasnyansky <maxk@qualcomm.com>

 *  Copyright (C) 2004-2005  Marcel Holtmann <marcel@holtmann.org>

 Update HCI stat counters */

	/* REVISIT:

	 * should we cope with bad skbs or ->write() returning an error value?

 ------- Interface to HCI layer ------ */

 Reset device */

 Flush any pending characters in the driver and discipline. */

 Initialize device */

	/* When Quirk HCI_QUIRK_NON_PERSISTENT_SETUP is set by

	 * driver, BT SoC is completely turned OFF during

	 * BT OFF. Upon next BT ON UART port should be opened.

 Undo clearing this from hci_uart_close() */

 Close device */

	/* When QUIRK HCI_QUIRK_NON_PERSISTENT_SETUP is set by driver,

	 * BT SOC is completely powered OFF during BT OFF, holding port

	 * open may drain the battery.

 Send frames from HCI layer */

 Init speed if any */

 Operational speed if any */

/** hci_uart_write_wakeup - transmit buffer wakeup

 * @serdev: serial device

 *

 * This function is called by the serdev framework when it accepts

 * more data being sent.

/** hci_uart_receive_buf - receive buffer wakeup

 * @serdev: serial device

 * @data:   pointer to received data

 * @count:  count of received data in bytes

 *

 * This function is called by the serdev framework when it received data

 * in the RX buffer.

 *

 * Return: number of processed bytes

	/* It does not need a lock here as it is already protected by a mutex in

	 * tty caller

 Initialize and register HCI device */

	/* Only when vendor specific setup callback is provided, consider

	 * the manufacturer information valid. This avoids filling in the

	 * value for Ericsson when nothing is specified.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 *  Broadcom Blutonium firmware driver

 *

 *  Copyright (C) 2003  Maxim Krasnyansky <maxk@qualcomm.com>

 *  Copyright (C) 2003  Marcel Holtmann <marcel@holtmann.org>

 Broadcom Blutonium (BCM2033) */

 Terminating entry */

 use workqueue to have a small delay */

 use workqueue to have a small delay */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 *  Bluetooth HCI UART driver for marvell devices

 *

 *  Copyright (C) 2016  Marvell International Ltd.

 *  Copyright (C) 2016  Intel Corporation

 Any raw data ? */

 Prepend skb with frame type */

 No H4 payload, only 1 byte header */

		/* Controller drives the firmware load by sending firmware

		 * request packets containing the expected fragment size.

			/* Controller requests a null size once firmware is

			 * fully loaded. If controller expects more data, there

			 * is an issue.

 Let the final ack go out before switching the baudrate */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Texas Instruments' Bluetooth HCILL UART protocol

 *

 *  HCILL (HCI Low Level) is a Texas Instruments' power management

 *  protocol extension to H4.

 *

 *  Copyright (C) 2007 Texas Instruments, Inc.

 *

 *  Written by Ohad Ben-Cohen <ohad@bencohen.org>

 *

 *  Acknowledgements:

 *  This file is based on hci_h4.c, which was written

 *  by Maxim Krasnyansky and Marcel Holtmann.

 Vendor-specific HCI commands */

 HCILL commands */

 HCILL states */

 HCILL state lock	*/

 HCILL power state	*/

 HCILL wait queue	*/

/*

 * Builds and sends an HCILL command packet.

 * These are very simple packets with only 1 cmd byte

 allocate packet */

 prepare packet */

 send packet */

 Initialize protocol */

 Flush protocol data */

 Close protocol */

/*

 * internal function, which does common work of the device wake up process:

 * 1. places all pending packets (waiting in tx_wait_q list) in txq list.

 * 2. changes internal state to HCILL_AWAKE.

 * Note: assumes that hcill_lock spinlock is taken,

 * shouldn't be called otherwise!

/*

 * Called upon a wake-up-indication from the device

 lock hcill state */

		/*

		 * This state means that both the host and the BRF chip

		 * have simultaneously sent a wake-up-indication packet.

		 * Traditionally, in this case, receiving a wake-up-indication

		 * was enough and an additional wake-up-ack wasn't needed.

		 * This has changed with the BRF6350, which does require an

		 * explicit wake-up-ack. Other BRF versions, which do not

		 * require an explicit ack here, do accept it, thus it is

		 * perfectly safe to always send one.

 acknowledge device wake up */

 any other state is illegal */

 send pending packets and change state to HCILL_AWAKE */

 actually send the packets */

/*

 * Called upon a sleep-indication from the device

 lock hcill state */

 sanity check */

 acknowledge device sleep */

 update state */

 actually send the sleep ack packet */

/*

 * Called upon wake-up-acknowledgement from the device

 lock hcill state */

 sanity check */

 send pending packets and change state to HCILL_AWAKE */

 actually send the packets */

 Enqueue frame for transmittion (padding, crc, etc) */

 may be called from two simultaneous tasklets */

 Prepend skb with frame type */

 lock hcill state */

 act according to current state */

 save packet for later */

 awake device */

 transient state; just keep packet for later */

 shouldn't happen */

 Recv data */

		/* ignore remote change

		 * baud rate HCI VS command

/**

 * download_firmware -

 *	internal function which parses through the .bts firmware

 *	script file intreprets SEND, DELAY actions only as of now

 40 char long bts scr name? */

	/* bts_header to remove out magic number and

	 * version

 action send */

 wait */

 no need to wait as command was synchronous */

 sleep */

 fw download complete */

	/* HCI_VS_WRITE_BD_ADDR (at least on a CC2560A chip) expects the BD

	 * address to be MSB first, but bdaddr_t has the convention of being

	 * LSB first.

 Reset the Bluetooth device */

 Toggle BT_EN and retry */

 Set BD address if one was specified at probe */

		/* This means that there was an error getting the BD address

		 * during probe, so mark the device as having a bad address.

 Operational speed if any */

 optional BD address from nvram */

		/* ENOENT means there is no matching nvmem cell and ENOSYS

		 * means that nvmem is not enabled in the kernel configuration.

			/* If there was some other error, give userspace a

			 * chance to fix the problem instead of failing to load

			 * the driver. Using BDADDR_NONE as a flag that is

			 * tested later in the setup function.

		/* As per the device tree bindings, the value from nvmem is

		 * expected to be MSB first, but in the kernel it is expected

		 * that bdaddr_t is LSB first.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 *  Bluetooth support for Broadcom devices

 *

 *  Copyright (C) 2015  Intel Corporation

 For kmalloc-ing the fw-name array instead of putting it on the stack */

	/* Check if the address indicates a controller with either an

	 * invalid or default address. In both cases the device needs

	 * to be marked as not having a valid address.

	 *

	 * The address 00:20:70:02:A0:00 indicates a BCM20702A0 controller

	 * with no configured address.

	 *

	 * The address 20:70:02:A0:00:00 indicates a BCM20702A1 controller

	 * with no configured address.

	 *

	 * The address 20:76:A0:00:56:79 indicates a BCM2076B1 controller

	 * with no configured address.

	 *

	 * The address 43:24:B3:00:00:00 indicates a BCM4324B3 controller

	 * with waiting for configuration state.

	 *

	 * The address 43:30:B1:00:00:00 indicates a BCM4330B1 controller

	 * with waiting for configuration state.

	 *

	 * The address 43:43:A0:12:1F:AC indicates a BCM43430A0 controller

	 * with no configured address.

 Start Download */

 50 msec delay after Download Minidrv completes */

 250 msec delay after Launch Ram completes */

 100 msec delay for module to complete reset process */

 Read Verbose Config Version Info */

 Read Controller Features */

 Read Local Name */

 000.017.017 */

 002.001.003 */

 002.001.013 */

 002.001.014 */

 002.002.004 */

 002.004.006 */

 002.006.006 */

 003.001.009 */

 003.001.012 */

 001.001.034 */

 001.002.009 */

 003.001.025 */

 003.006.006 */

 001.003.015 */

 001.002.014 */

 002.002.023 */

 003.001.006 */

 002.001.006 */

 002.001.012 */

 001.001.005 */

 001.001.011 */

 001.001.018 */

 001.001.024 */

 001.001.038 */

 001.002.014 */

 001.003.015 */

 002.001.006 */

 002.001.014 */

 003.001.009 */

 003.001.012 */

 003.006.007 */

 Reset */

 Read Local Version Info */

 Read controller information */

 Read USB Product Info */

 Re-initialize if necessary */

 Initialize */

 Re-initialize after loading Patch */

 Reset */

 Read Verbose Config Version Info */

 Read USB Product Info */

 Read Controller Features */

 Read Local Name */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 *  Generic Bluetooth USB driver

 *

 *  Copyright (C) 2005-2008  Marcel Holtmann <marcel@holtmann.org>

 Generic Bluetooth USB device */

 Generic Bluetooth AMP device */

 Generic Bluetooth USB interface */

 Apple-specific (Broadcom) devices */

 MediaTek MT76x0E */

 Broadcom SoftSailing reporting vendor specific */

 Apple MacBookPro 7,1 */

 Apple iMac11,1 */

 Apple MacBookPro6,2 */

 Apple MacBookAir3,1, MacBookAir3,2 */

 Apple MacBookAir4,1 */

 Apple MacBookPro8,2 */

 Apple MacMini5,1 */

 AVM BlueFRITZ! USB v2.0 */

 Bluetooth Ultraport Module from IBM */

 ALPS Modules with non-standard id */

 Ericsson with non-standard id */

 Canyon CN-BTU1 with HID interfaces */

 Broadcom BCM20702B0 (Dynex/Insignia) */

 Broadcom BCM43142A0 (Foxconn/Lenovo) */

 Broadcom BCM920703 (HTC Vive) */

 Foxconn - Hon Hai */

 Lite-On Technology - Broadcom based */

 Broadcom devices with vendor specific id */

 ASUSTek Computer - Broadcom based */

 Belkin F8065bf - Broadcom based */

 IMC Networks - Broadcom based */

 Dell Computer - Broadcom based  */

 Toshiba Corp - Broadcom based */

 Intel Bluetooth USB Bootloader (RAM module) */

 Terminating entry */

 CSR BlueCore devices */

 Broadcom BCM2033 without firmware */

 Broadcom BCM2045 devices */

 Atheros 3011 with sflash firmware */

 Atheros AR9285 Malbec with sflash firmware */

 Atheros 3012 with sflash firmware */

 Atheros AR5BBU12 with sflash firmware */

 Atheros AR5BBU12 with sflash firmware */

 QCA ROME chipset */

 QCA WCN6855 chipset */

 Broadcom BCM2035 */

 Broadcom BCM2045 */

 IBM/Lenovo ThinkPad with Broadcom chip */

 HP laptop with Broadcom chip */

 Dell laptop with Broadcom chip */

 Dell Wireless 370 and 410 devices */

 Belkin F8T012 and F8T013 devices */

 Asus WL-BTD202 device */

 Kensington Bluetooth USB adapter */

 RTX Telecom based adapters with buggy SCO support */

 CONWISE Technology based adapters with buggy SCO support */

 Roper Class 1 Bluetooth Dongle (Silicon Wave based) */

 Digianswer devices */

 CSR BlueCore Bluetooth Sniffer */

 Frontline ComProbe Bluetooth Sniffer */

 Marvell Bluetooth devices */

 Intel Bluetooth devices */

 Other Intel Bluetooth devices */

 Realtek 8822CE Bluetooth devices */

 Realtek 8852AE Bluetooth devices */

 Realtek Bluetooth devices */

 MediaTek Bluetooth devices */

 Additional MediaTek MT7615E Bluetooth devices */

 Additional MediaTek MT7668 Bluetooth devices */

 Additional MediaTek MT7921 Bluetooth devices */

 Additional Realtek 8723AE Bluetooth devices */

 Additional Realtek 8723BE Bluetooth devices */

 Additional Realtek 8723BU Bluetooth devices */

 Additional Realtek 8723DE Bluetooth devices */

 Additional Realtek 8761B Bluetooth devices */

 Additional Realtek 8761BU Bluetooth devices */

 Additional Realtek 8821AE Bluetooth devices */

 Additional Realtek 8822BE Bluetooth devices */

 Additional Realtek 8822CE Bluetooth devices */

 Silicon Wave based devices */

 Terminating entry */

/* The Bluetooth USB module build into some devices needs to be reset on resume,

 * this is a problem with the platform (likely shutting off all power) not with

 * the module itself. So we use a DMI list to match known broken platforms.

 Dell OptiPlex 3060 (QCA ROME device 0cf3:e007) */

 Dell XPS 9360 (QCA ROME device 0cf3:e300) */

 Dell Inspiron 5565 (QCA ROME device 0cf3:e009) */

 irq for out-of-band wake-on-bt */

	/*

	 * Toggle the hard reset line if the platform provides one. The reset

	 * is going to yank the device off the USB and then replug. So doing

	 * once is enough. The cleanup is handled correctly on the way out

	 * (standard USB disconnect), and the new device is detected cleanly

	 * and bound to the driver again like it should be.

	/* Toggle the hard reset line. The Realtek device is going to

	 * yank itself off the USB and then replug. The cleanup is handled

	 * correctly on the way out (standard USB disconnect), and the new

	 * device is detected cleanly and bound to the driver again like

	 * it should be.

		/* Toggle the hard reset line. The qca bt device is going to

		 * yank itself off the USB and then replug. The cleanup is handled

		 * correctly on the way out (standard USB disconnect), and the new

		 * device is detected cleanly and bound to the driver again like

		 * it should be.

 This is not an unbalanced PM reference since the device will reset */

 Complete event header */

 Complete frame */

 Complete ACL header */

 Complete frame */

 Complete SCO header */

 Complete frame */

 Avoid suspend failed when usb_kill_urb */

		/* -EPERM: urb is being killed;

		 * -ENODEV: device got disconnected

 Avoid suspend failed when usb_kill_urb */

		/* -EPERM: urb is being killed;

		 * -ENODEV: device got disconnected

 Avoid suspend failed when usb_kill_urb */

		/* -EPERM: urb is being killed;

		 * -ENODEV: device got disconnected

	/* For mSBC ALT 6 setting the host will send the packet at continuous

	 * flow. As per core spec 5, vol 4, part B, table 2.1. For ALT setting

	 * 6 the HCI PACKET INTERVAL should be 7.5ms for every usb packets.

	 * To maintain the rate we send 63bytes of usb packets alternatively for

	 * 7ms and 8ms to maintain the rate as 7.5ms.

 Avoid suspend failed when usb_kill_urb */

		/* -EPERM: urb is being killed;

		 * -ENODEV: device got disconnected

	/* Patching USB firmware files prior to starting any URBs of HCI path

	 * It is more safe to use USB bulk channel for downloading USB patch

 Enable remote wake up for auto-suspend */

		/* When isochronous alternate setting needs to be

		 * changed, because SCO connection has been added

		 * or removed, a packet fragment may be left in the

		 * reassembling state. This could lead to wrongly

		 * assembled fragments.

		 *

		 * Clear outstanding fragment when selecting a new

		 * alternate setting.

			/* Bluetooth USB spec recommends alt 6 (63 bytes), but

			 * many adapters do not support it.  Alt 1 appears to

			 * work for all adapters that do not have alt 6, and

			 * which work with WBS at all.  Some devices prefer

			 * alt 3 (HCI payload >= 60 Bytes let air packet

			 * data satisfy 60 bytes), requiring

			 * MTU >= 3 (packets) * 25 (size) - 3 (headers) = 72

			 * see also Core spec 5, vol 4, B 2.1.1 & Table 2.1.

	/* Detect a wide host of Chinese controllers that aren't CSR.

	 *

	 * Known fake bcdDevices: 0x0100, 0x0134, 0x1915, 0x2520, 0x7558, 0x8891

	 *

	 * The main thing they have in common is that these are really popular low-cost

	 * options that support newer Bluetooth versions but rely on heavy VID/PID

	 * squatting of this poor old Bluetooth 1.1 device. Even sold as such.

	 *

	 * We detect actual CSR devices by checking that the HCI manufacturer code

	 * is Cambridge Silicon Radio (10) and ensuring that LMP sub-version and

	 * HCI rev values always match. As they both store the firmware number.

	/* Known legit CSR firmware build numbers and their supported BT versions:

	 * - 1.1 (0x1) -> 0x0073, 0x020d, 0x033c, 0x034e

	 * - 1.2 (0x2) ->                 0x04d9, 0x0529

	 * - 2.0 (0x3) ->         0x07a6, 0x07ad, 0x0c5c

	 * - 2.1 (0x4) ->         0x149c, 0x1735, 0x1899 (0x1899 is a BlueCore4-External)

	 * - 4.0 (0x6) ->         0x1d86, 0x2031, 0x22bb

	 *

	 * e.g. Real CSR dongles with LMP subversion 0x73 are old enough that

	 *      support BT 1.1 only; so it's a dead giveaway when some

	 *      third-party BT 4.0 dongle reuses it.

 Other clones which beat all the above checks */

		/* Generally these clones have big discrepancies between

		 * advertised features and what's actually supported.

		 * Probably will need to be expanded in the future;

		 * without these the controller will lock up.

		/* Clear the reset quirk since this is not an actual

		 * early Bluetooth 1.1 device from CSR.

		/*

		 * Special workaround for these BT 4.0 chip clones, and potentially more:

		 *

		 * - 0x0134: a Barrot 8041a02                 (HCI rev: 0x1012 sub: 0x0810)

		 * - 0x7558: IC markings FR3191AHAL 749H15143 (HCI rev/sub-version: 0x0709)

		 *

		 * These controllers are really messed-up.

		 *

		 * 1. Their bulk RX endpoint will never report any data unless

		 * the device was suspended at least once (yes, really).

		 * 2. They will not wakeup when autosuspended and receiving data

		 * on their bulk RX endpoint from e.g. a keyboard or mouse

		 * (IOW remote-wakeup support is broken for the bulk endpoint).

		 *

		 * To fix 1. enable runtime-suspend, force-suspend the

		 * HCI and then wake-it up by disabling runtime-suspend.

		 *

		 * To fix 2. clear the HCI's can_wake flag, this way the HCI

		 * will still be autosuspended when it is not open.

		 *

		 * --

		 *

		 * Because these are widespread problems we prefer generic solutions; so

		 * apply this initialization quirk to every controller that gets here,

		 * it should be harmless. The alternative is to not work at all.

 Re-enable autosuspend if this was requested */

	/* When the device is in bootloader mode, then it can send

	 * events via the bulk endpoint. These events are treated the

	 * same way as the ones received from the interrupt endpoint.

				/* When switching to the operational firmware

				 * the device sends a vendor specific event

				 * indicating that the bootup completed.

				/* When the firmware loading completes the

				 * device sends out a vendor specific event

				 * indicating the result of the firmware

				 * loading.

			/* When in bootloader mode and the command 0xfc09

			 * is received, it needs to be send down the

			 * bulk endpoint. So allocate a bulk URB instead.

			/* When the 0xfc01 command is issued to boot into

			 * the operational firmware, it will actually not

			 * send a command complete event. To keep the flow

			 * control working inject that event here.

 UHW CR mapping */

 It is for mt79xx download rom patch*/

		/* WMT event shouldn't be fragmented and the size should be

		 * less than HCI_WMT_MAX_EVENT_SIZE.

		/* Fix up the vendor event id with 0xff for vendor specific

		 * instead of 0xe4 so that event send via monitoring socket can

		 * be parsed properly.

		/* When someone waits for the WMT event, the skb is being cloned

		 * and being processed the events from there then.

 Barrier to sync with other CPUs */

 Avoid suspend failed when usb_kill_urb */

	/* The URB complete handler is still called with urb->actual_length = 0

	 * when the event is not available, so we should keep re-submitting

	 * URB until WMT event returns, Also, It's necessary to wait some time

	 * between the two consecutive control URBs to relax the target device

	 * to generate the event. Otherwise, the WMT event cannot return from

	 * the device successfully.

		/* -EPERM: urb is being killed;

		 * -ENODEV: device got disconnected

 Send the WMT command and wait until the WMT event returns */

 Submit control IN URB on demand to process the WMT event */

	/* The vendor specific WMT commands are all answered by a vendor

	 * specific event and will have the Command Status or Command

	 * Complete as with usual HCI command flow control.

	 *

	 * After sending the command, wait for BTUSB_TX_WAIT_VND_EVT

	 * state to be cleared. The driver specific event receive routine

	 * will clear that state and with that indicate completion of the

	 * WMT command.

 Parse and handle the return WMT event */

 0 means legacy dl mode. */

 Wait a few moments for firmware activation done */

 Power on data RAM the firmware relies on. */

 The size of patch header is 30 bytes, should be skip */

 Tell device the position in sequence */

 Activate funciton the firmware providing to */

 Wait a few moments for firmware activation done */

 Query whether the function is enabled */

 It's Device EndPoint Reset Option Register */

 Enable Bluetooth protocol */

 Query whether the firmware is already download */

 Setup a firmware which the device definitely requires */

 -ETIMEDOUT happens */

 The other errors happen in btusb_mtk_func_query */

 Enable Bluetooth protocol */

 Apply the low power environment setup */

 Disable the device */

 It's MediaTek specific bluetooth reset mechanism via USB */

 It's Device EndPoint Reset Option Register */

 Reset the bluetooth chip via USB interface. */

 MT7921 need to delay 20ms between toggle reset bit */

 Poll the register until reset is completed */

 Firmware dump from device */

		/* When the firmware hangs, the device can no longer

		 * suspend and thus disable auto-suspend.

 Firmware debug logging 1 */

 Firmware debug logging 2 */

 Configure an out-of-band gpio as wake-up pin, if specified in device tree */

 Move on if no wakeup pin specified */

 Vendor specific command to configure a GPIO as wake-up pin */

 length of parameters that follow */

 time in ms, for which wakeup pin should be asserted */

 length of header in rampatch */

 length of header in NVM */

 offset of version structure in rampatch */

 Rome 1.0 */

 Rome 1.1 */

 Rome 2.0 */

 Rome 2.1 */

 Rome 3.0 */

 Rome 3.2 */

 WCN6855 1.0 */

 WCN6855 2.0 */

	/* Found some of USB hosts have IOT issues with ours so that we should

	 * not wait until HCI layer is ready.

	/* USB patches should go down to controller through USB path

	 * because binary format fits to go down through USB channel.

	 * USB control path is for patching headers and USB bulk is for

	 * patch body.

	/* ep2 need time to switch from function acl to function dfu,

	 * so we add 20ms delay here.

 if boardid equal 0, use default nvm without surfix */

 identify the ROM version and check whether patches are needed */

 only low ROM versions need patches */

		/* If the rom_version is not matched in the qca_devices_table

		 * and the high ROM version is not zero, we assume this chip no

		 * need to load the rampatch and nvm.

 Disable only if not already disabled (keep it balanced) */

 QCA6174A */

 QCA6174A (Lite-On) */

 Use an oob wakeup pin? */

 Move on if no IRQ specified */

 interface numbers are hardcoded in the spec */

		/* Old firmware would otherwise let ath3k driver load

		 * patch and sysconfig files

 Allocate extra space for Intel device */

 Override the rx handlers */

 Marvell devices may need a specific chip configuration */

 Broadcom LM_DIAG Interface numbers are hardcoded */

 Broadcom LM_DIAG Interface numbers are hardcoded */

 Combined Intel Device setup to support multiple setup routine */

 Transport specific configuration */

 AMP controllers do not support SCO packets */

 Interface orders are hardcoded in the specification */

 Realtek devices need to set remote wakeup on auto-suspend */

 Old firmware would otherwise execute USB reset */

 This must be set first in case we disable it for fakes */

 Fake CSR devices with broken commands */

 New sniffer firmware has crippled HCI interface */

		/* A bug in the bootloader causes that interrupt interface is

		 * only enabled after receiving SetInterface(0, AltSetting=0).

	/* For global suspend, Realtek devices lose the loaded fw

	 * in them. But for autosuspend, firmware should remain.

	 * Actually, it depends on whether the usb host sends

	 * set feature (enable wakeup) or not.

 Cleanup the rest deferred urbs. */

 Disable only if not already disabled (keep it balanced) */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2018 MediaTek Inc.

/*

 * Bluetooth support for MediaTek serial devices

 *

 * Author: Sean Wang <sean.wang@mediatek.com>

 *

	/* The vendor specific WMT commands are all answered by a vendor

	 * specific event and will not have the Command Status or Command

	 * Complete as with usual HCI command flow control.

	 *

	 * After sending the command, wait for BTMTKUART_TX_WAIT_VND_EVT

	 * state to be cleared. The driver specific event receive routine

	 * will clear that state and with that indicate completion of the

	 * WMT command.

 Parse and handle the return WMT event */

 The size of patch header is 30 bytes, should be skip */

 Tell device the position in sequence */

 Activate funciton the firmware providing to */

 Wait a few moments for firmware activation done */

	/* Fix up the vendor event id with 0xff for vendor specific instead

	 * of 0xe4 so that event send via monitoring socket can be parsed

	 * properly.

	/* When someone waits for the WMT event, the skb is being cloned

	 * and being processed the events from there then.

 Barrier to sync with other CPUs */

 The cursor is reset when all the data of STP is consumed out */

 Filling pad until all STP info is obtained */

 Retrieve STP info and have a sanity check */

 Resync STP when unexpected data is being read */

 Directly quit when there's no data found for H4 can process */

 Tranlate to how much the size of data H4 can handle so far */

 Update the remaining size of STP packet */

 Data points to STP payload which can be handled by H4 */

		/*  The serial data received from MT7622 BT controller is

		 *  at all time padded around with the STP header and tailer.

		 *

		 *  A full STP packet is looking like

		 *   -----------------------------------

		 *  | STP header  |  H:4   | STP tailer |

		 *   -----------------------------------

		 *  but it doesn't guarantee to contain a full H:4 packet which

		 *  means that it's possible for multiple STP packets forms a

		 *  full H:4 packet that means extra STP header + length doesn't

		 *  indicate a full H:4 frame, things can fragment. Whose length

		 *  recorded in STP header just shows up the most length the

		 *  H:4 engine can handle currently.

 Enable the power domain and clock the device requires */

 Shutdown the clock and power domain the device requires */

 Flush any pending characters */

 Query whether the function is enabled */

	/* Indicate the device to enter the probe state the host is

	 * ready to change a new baudrate.

 Send a dummy byte 0xff to activate the new baudrate */

 Wait some time for the device changing baudrate done */

 Test the new baudrate */

	/* Wakeup MCUSYS is required for certain devices before we start to

	 * do any setups.

 Query whether the firmware is already download */

 Setup a firmware which the device definitely requires */

 Query whether the device is already enabled */

 -ETIMEDOUT happens */

 The other errors happen in btusb_mtk_func_query */

 Enable Bluetooth protocol */

 Apply the low power environment setup */

 Disable the device */

 Prepend skb with frame type */

 Make sure that there is enough rooms for STP header and trailer */

 Add the STP header */

 MT7622 doesn't care about checksum value */

 Add the STP trailer */

 Initialize and register HCI device */

			/* Switch to the specific pin state for the booting

			 * requires.

 Power on */

		/* Reset if the reset-gpios is available otherwise the board

		 * -level design should be guaranteed.

		/* Wait some time until device got ready and switch to the pin

		 * mode the device requires for UART transfers.

		/* A standalone device doesn't depends on power domain on SoC,

		 * so mark it as no callbacks.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 *  Bluetooth HCI Three-wire UART driver

 *

 *  Copyright (C) 2012  Intel Corporation

 Sliding window size */

/*

 * Maximum Three-wire packet:

 *     4 byte header + max value for 12-bit length + 2 bytes for CRC

 Convenience macros for reading Three-wire header values */

 H5 state flags */

 SLIP escape mode */

 Pending ack to send */

 Device cannot wake host */

 Use HW flow control */

 Must be the first member, hci_serdev.c expects this. */

 Unack'ed packets queue */

 Reliable packets queue */

 Unreliable packets queue */

 Receive buffer */

 Expecting more bytes */

 Last ack number received */

 Retransmission timer */

 Parent HCI UART */

 Next seq number to send */

 Next ack number to send */

 Sliding window size */

 Sliding window size (first 3 bits) */

 Send reset request to upper stack */

 Send initial sync request */

 Remove Three-wire header */

	/*

	 * Max len of packet: (original len + 4 (H5 hdr) + 2 (crc)) * 2

	 * (because bytes 0xc0 and 0xdb are escaped, worst case is when

	 * the packet is all made of 0xc0 and 0xdb) + 2 (0xc0

	 * delimiters at start and end).

 Reliable packet? */

 Give the device some time to set up the new baudrate. */

 Give the device some time before the hci-core sends it a reset */

	/*

	 * Since h5_btrtl_resume() does a device_reprobe() the suspend handling

	 * done by the hci_suspend_notifier is not necessary; it actually causes

	 * delays and a bunch of errors to get logged, so disable it.

 Devices always start with these fixed parameters */

 The controller needs up to 500ms to wakeup */

/* Suspend/resume support. On many devices the RTL BT device loses power during

 * suspend/resume, causing it to lose its firmware and all state. So we simply

 * turn it off on suspend and reprobe on resume. This mirrors how RTL devices

 * are handled in the USB driver, where the BTUSB_WAKEUP_DISABLE is used which

 * also causes a reprobe on resume.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 *  Bluetooth HCI UART driver

 *

 *  Copyright (C) 2000-2001  Qualcomm Incorporated

 *  Copyright (C) 2002-2003  Maxim Krasnyansky <maxk@qualcomm.com>

 *  Copyright (C) 2004-2005  Marcel Holtmann <marcel@holtmann.org>

 Initialize protocol */

 Flush protocol data */

 Close protocol */

 Enqueue frame for transmission (padding, crc, etc) */

 Prepend skb with frame type */

 Recv data */

 Check for error from previous call */

 remove padding bytes from buffer */

 Check for invalid packet type */

 Check for partial packet */

 No variable data length */

 Single octet variable length */

 Double octet variable length */

 Unsupported variable length */

 No more data, complete frame */

 Complete frame */

/*

 * Copyright (c) 2017 Redpine Signals Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 Insufficient skb headroom - allocate a new skb */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Bluetooth HCI UART H4 driver with Nokia Extensions AKA Nokia H4+

 *

 *  Copyright (C) 2015 Marcel Holtmann <marcel@holtmann.org>

 *  Copyright (C) 2015-2017 Sebastian Reichel <sre@kernel.org>

 reset routine */

 safety check */

 flush queue */

 init uart */

 wait for cts */

	/* Change to previously negotiated speed. Flow Control

	 * is disabled until bluetooth adapter is ready to avoid

	 * broken bytes being received.

 0. reset connection */

 1. negotiate speed etc */

 2. verify correct setup using alive packet */

 3. send firmware */

 disable module */

 Enqueue frame for transmittion (padding, crc, etc) */

 Prepend skb with frame type */

 Packets must be word aligned */

	/* Packets received on the dedicated radio channel are

	 * HCI events and so feed them back into the core.

 Recv data */

 Nokia H4+ is word aligned */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2008-2009 Atheros Communications Inc.

 Atheros AR3011 */

 Atheros AR3011 with sflash firmware*/

 Atheros AR9285 Malbec with sflash firmware */

 Atheros AR3012 with sflash firmware*/

 Atheros AR5BBU12 with sflash firmware */

 Atheros AR5BBU22 with sflash firmware */

 Terminating entry */

/* This table is to load patch and sysconfig files

 * for AR3012

 Atheros AR3012 with sflash firmware*/

 Atheros AR5BBU22 with sflash firmware */

 Terminating entry */

 workaround the compatibility issue with xHCI controller*/

 workaround the compatibility issue with xHCI controller*/

 match device ID in ath3k blacklist table */

 load patch and sysconfig files for AR3012 */

 New firmware with patch and sysconfig files already loaded */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Bluetooth Software UART Qualcomm protocol

 *

 *  HCI_IBS (HCI In-Band Sleep) is Qualcomm's power management

 *  protocol extension to H4.

 *

 *  Copyright (C) 2007 Texas Instruments, Inc.

 *  Copyright (c) 2010, 2012, 2018 The Linux Foundation. All rights reserved.

 *

 *  Acknowledgements:

 *  This file is based on hci_ll.c, which was...

 *  Written by Ohad Ben-Cohen <ohad@bencohen.org>

 *  which was in turn based on hci_h4.c, which was written

 *  by Maxim Krasnyansky and Marcel Holtmann.

 HCI_IBS protocol messages */

 susclk rate */

 Controller debug log header */

 max retry count when init fails */

 Controller dump header */

 HCI_IBS transmit side sleep protocol states */

 HCI_IBS receive side sleep protocol states */

 HCI_IBS transmit and receive side clock state vote */

 Controller memory dump states */

 HCI_IBS wait queue	*/

 Memdump wait queue	*/

 HCI_IBS state lock	*/

 HCI_IBS transmit side power state*/

 HCI_IBS receive side power state */

 Clock must be on for TX */

 Clock must be on for RX */

 For debugging purpose */

/*

 * Voltage regulator information required for configuring the

 * QCA Bluetooth chipset

/*

 * Platform data for the QCA Bluetooth power driver.

	/* TODO: Some chipset requires to enable UART clock on client

	 * side to save power consumption or manual work is required.

	 * Please put your code to control UART clock here if needed

	/* TODO: Some chipset requires to disable UART clock on client

	 * side to save power consumption or manual work is required.

	 * Please put your code to control UART clock off here if needed

 serial_clock_vote needs to be called with the ibs lock held */

/* Builds and sends an HCI_IBS command packet.

 * These are very simple packets with only 1 cmd byte.

 Assign HCI_IBS type */

 Vote for serial clock */

 Send wake indication to device */

 Start retransmit timer */

 Actually send the packets */

	/* Always acknowledge device wake up,

	 * sending IBS message doesn't count as TX ON.

 Actually send the packets */

 Run HCI tx handling unlocked */

	/* Now that message queued to tty driver, vote for tty clocks off.

	 * It is up to the tty driver to pend the clocks off until tx done.

 TX_IDLE, go to SLEEP */

 Don't retransmit the HCI_IBS_WAKE_IND when suspending. */

 No WAKE_ACK, retransmit WAKE */

			/* Inject hw error event to reset the device

			 * and driver.

 Initialize protocol */

 Assume we start with both sides asleep -- extra wakes OK */

 read only */

 read/write */

 Flush protocol data */

 Close protocol */

/* Called upon a wake-up-indication from the device.

 Don't wake the rx up when suspending. */

		/* Make sure clock is on - we may have turned clock off since

		 * receiving the wake up indicator awake rx clock.

		/* Always acknowledge device wake up,

		 * sending IBS message doesn't count as TX ON.

 Any other state is illegal */

 Actually send the packets */

/* Called upon a sleep-indication from the device.

 Update state */

 Vote off rx clock under workqueue */

 Any other state is illegal */

/* Called upon wake-up-acknowledgement from the device

 Don't react to the wake-up-acknowledgment when suspending. */

 Expect one if we send 2 WAKEs */

 Send pending packets */

 Switch timers and change state to HCI_IBS_TX_AWAKE */

 Actually send the packets */

/* Enqueue frame for transmittion (padding, crc, etc) may be called from

 * two simultaneous tasklets.

 As SSR is in progress, ignore the packets */

 Prepend skb with frame type */

	/* Don't go to sleep in middle of patch download or

	 * Out-Of-Band(GPIOs control) sleep is selected.

	 * Don't wake the device up when suspending.

 Act according to current state */

 Save packet for later */

 Schedule a work queue to wake up device */

 Transient state; just keep packet for later */

	/* We receive debug logs from chip as an ACL packets.

	 * Instead of sending the data to ACL to decode the

	 * received data, we are pushing them to the above layers

	 * as a diagnostic packet.

		/* Skip processing the received packets if timeout detected

		 * or memdump collection completed.

			/* This is the first frame of memdump packet from

			 * the controller, Disable IBS to recevie dump

			 * with out any interruption, ideally time required for

			 * the controller to send the dump is 8 seconds. let us

			 * start timer to handle this asynchronous activity.

		/* If sequence no 0 is missed then there is no point in

		 * accepting the other sequences.

		/* There could be chance of missing some packets from

		 * the controller. In such cases let us store the dummy

		 * packets in the buffer.

		/* For QCA6390, controller does not lost packets but

		 * sequence number field of packet sometimes has error

		 * bits, so skip this checking for missing packet.

		/* For the WCN3990 the vendor command for a baudrate change

		 * isn't sent as synchronous HCI command, because the

		 * controller sends the corresponding vendor event with the

		 * new baudrate. The event is received and properly decoded

		 * after changing the baudrate of the host port. It needs to

		 * be dropped, otherwise it can be misinterpreted as

		 * response to a later firmware download command (also a

		 * vendor command).

	/* We receive chip memory dump as an event packet, With a dedicated

	 * handler followed by a hardware error event. When this event is

	 * received we store dump into a file before closing hci. This

	 * dump will help in triaging the issues.

 Assign commands to change baudrate and packet type. */

 Wait for the baudrate change request to be sent */

 Give the controller time to process the request */

	/* These power pulses are single byte command which are sent

	 * at required baudrate to wcn3990. On wcn3990, we have an external

	 * circuit at Tx pin which decodes the pulse sent at specific baudrate.

	 * For example, wcn3990 supports RF COEX antenna for both Wi-Fi/BT

	 * and also we use the same power inputs to turn on and off for

	 * Wi-Fi/BT. Powering up the power sources will not enable BT, until

	 * we send a power on pulse at 115200 bps. This algorithm will help to

	 * save power. Disabling hardware flow control is mandatory while

	 * sending power pulses to SoC.

 Give to controller time to boot/shutdown */

		/* Disable flow control for wcn3990 to deassert RTS while

		 * changing the baudrate of chip and host.

			/* Wait for the controller to send the vendor event

			 * for the baudrate change command.

	/* We forcefully crash the controller, by sending 0xfb byte for

	 * 1024 times. We also might have chance of losing data, To be

	 * on safer side we send 1096 bytes to the SoC.

		/* If hardware error event received for other than QCA

		 * soc memory dump event, then we need to crash the SOC

		 * and wait here for 8 seconds to get the dump packets.

		 * This will block main thread to be on hold until we

		 * collect dump.

		/* Let us wait here until memory dump collected or

		 * memory dump timer expired.

		/* Let us wait here until memory dump collected or

		 * memory dump timer expired.

			/* Inject hw error event to reset the device

			 * and driver.

	/* UART driver handles the interrupt from BT SoC.So we need to use

	 * device handle of UART driver to get the status of device may wakeup.

	/* Check for vregs status, may be hci down has turned

	 * off the voltage regulator.

 Forcefully enable wcn399x to enter in to boot mode. */

 For wcn6750 need to enable gpio bt_en */

	/* Now the device is in ready state to communicate with host.

	 * To sync host with device we need to reopen port.

	 * Without this, we will have RTS and CTS synchronization

	 * issues.

	/* Non-serdev device usually is powered by external power

	 * and don't need additional action in driver for power on

 Controller needs time to bootup. */

 Patch downloading has to be done without IBS mode */

	/* Enable controller to do both LE scan and BR/EDR inquiry

	 * simultaneously.

 Setup user speed if needed */

 Get QCA version information */

 Setup patch / NVM configurations */

 No patch/nvm-config found, run with original fw/config */

		/*

		 * Userspace firmware loader will return -EAGAIN in case no

		 * patch/nvm-config is found, so run with original fw/config.

 Setup bdaddr */

	/* From this point we go into power off state. But serial port is

	 * still open, stop queueing the IBS data and flush all the buffered

	 * data in skb's.

	/* Non-serdev device usually is powered by external power

	 * and don't need additional action in driver for power down

 Stop sending shutdown command if soc crashes. */

 Already enabled */

 Already disabled? */

		/* Wideband speech support must be set per driver since it can't

		 * be queried via hci. Same with the valid le states quirk.

	/* if BT SoC is running with default firmware then it does not

	 * support in-band sleep

	/* During SSR after memory dump collection, controller will be

	 * powered off and then powered on.If controller is powered off

	 * during SSR then we should wait until SSR is completed.

		/* QCA_IBS_DISABLED flag is set to true, During FW download

		 * and during memory dump collection. It is reset to false,

		 * After FW download complete.

	/* Wait for HCI_IBS_SLEEP_IND sent by device to indicate its Tx is going

	 * to sleep, so that the packet does not wake the system later.

 sentinel */ }

/*

 *

 *  A driver for Nokia Connectivity Card DTL-1 devices

 *

 *  Copyright (C) 2001-2002  Marcel Holtmann <marcel@holtmann.org>

 *

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License version 2 as

 *  published by the Free Software Foundation;

 *

 *  Software distributed under the License is distributed on an "AS

 *  IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or

 *  implied. See the License for the specific language governing

 *  rights and limitations under the License.

 *

 *  The initial developer of the original code is David A. Hinds

 *  <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds

 *  are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.

 *

 ======================== Module parameters ======================== */

 ======================== Local structures ======================== */

 For serializing operations */

 HCI flow mask */

 Transmit states  */

 Receiver States */

 Nokia Specific Header */

 Nokia Specific Header Length */

 ======================== Interrupt handling ======================== */

 Tx FIFO should be empty */

 Fill FIFO with current frame */

 Transmit next byte */

 Send frame */

 transition to active state */

 Allocate packet */

 remove PAD byte if it exists */

 remove NSH */

 control data for the Nokia Card */

 send frame to the HCI layer */

 unknown packet */

 Make sure we don't stay here too long */

 our irq handler is shared */

 Clear interrupt */

 Receive interrupt */

 Transmitter ready for data */

 Make sure we don't stay here too long */

 ======================== HCI interface ======================== */

 Drop TX queue */

 PAD */

 Prepend skb with Nokia frame header and queue */

 ======================== Card services HCI interaction ======================== */

 Initialize HCI device */

 Reset UART */

 Turn off interrupts */

 Initialize UART */

 Reset DLAB */

 Turn on interrupts */

 Timeout before it is safe to send the first HCI packet */

 Register HCI device */

 Reset UART */

 Turn off interrupts */

 Create new info device */

 Look for a generic full-sized window */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2019 MediaTek Inc.

/*

 * Bluetooth support for MediaTek SDIO devices

 *

 * This file is written based on btsdio.c and btmtkuart.c.

 *

 * Author: Sean Wang <sean.wang@mediatek.com>

 *

 Terminating entry */

 W1S */

 For write */

 For read */

 CHISR have the same bits field definition with CHIER */

	/* The vendor specific WMT commands are all answered by a vendor

	 * specific event and will not have the Command Status or Command

	 * Complete as with usual HCI command flow control.

	 *

	 * After sending the command, wait for BTMTKSDIO_TX_WAIT_VND_EVT

	 * state to be cleared. The driver specific event receive routine

	 * will clear that state and with that indicate completion of the

	 * WMT command.

 Parse and handle the return WMT event */

 Make sure that there are enough rooms for SDIO header */

 Prepend MediaTek SDIO Specific Header */

	/* Fix up the vendor event id with 0xff for vendor specific instead

	 * of 0xe4 so that event send via monitoring socket can be parsed

	 * properly.

	/* When someone waits for the WMT event, the skb is being cloned

	 * and being processed the events from there then.

 Barrier to sync with other CPUs */

 A SDIO packet is exactly containing a Bluetooth packet */

	/* We assume the default error as -EILSEQ simply to make the error path

	 * be cleaner.

 Remove MediaTek SDIO header */

	/* We have to dig into the packet to get payload size and then know how

	 * many padding bytes at the tail, these padding bytes should be removed

	 * before the packet is indicated to the core layer.

 Remaining bytes cannot hold a header*/

 Remaining bytes cannot hold a payload */

 Remove padding bytes */

 Complete frame */

	/* It is required that the host gets ownership from the device before

	 * accessing any register, however, if SDIO host is not being released,

	 * a potential deadlock probably happens in a circular wait between SDIO

	 * IRQ work and PM runtime work. So, we have to explicitly release SDIO

	 * host here and claim again after the PM runtime work is all done.

 Disable interrupt */

	/* Ack an interrupt as soon as possible before any operation on

	 * hardware.

	 *

	 * Note that we don't ack any status during operations to avoid race

	 * condition between the host and the device such as it's possible to

	 * mistakenly ack RX_DONE for the next packet and then cause interrupts

	 * not be raised again but there is still pending data in the hardware

	 * FIFO.

 Enable interrupt */

 Get ownership from the device */

 Disable interrupt & mask out all interrupt sources */

	/* SDIO CMD 5 allows the SDIO device back to idle state an

	 * synchronous interrupt is supported in SDIO 4-bit mode

 Setup write-1-clear for CHISR register */

 Setup interrupt sources */

 Enable interrupt */

 Disable interrupt */

 Return ownership to the device */

 Query whether the function is enabled */

 Power on data RAM the firmware relies on. */

 The size of patch header is 30 bytes, should be skip */

 Tell device the position in sequence */

 Activate funciton the firmware providing to */

 Wait a few moments for firmware activation done */

 Query whether the firmware is already download */

 Setup a firmware which the device definitely requires */

 Query whether the device is already enabled */

 -ETIMEDOUT happens */

 The other errors happen in btusb_mtk_func_query */

 Enable Bluetooth protocol */

 Apply the low power environment setup */

	/* Default forbid runtime auto suspend, that can be allowed by

	 * enable_autosuspend flag or the PM runtime entry under sysfs.

	/* Get back the state to be consistent with the state

	 * in btmtksdio_setup.

 Disable the device */

 Initialize and register HCI device */

	/* pm_runtime_enable would be done after the firmware is being

	 * downloaded because the core layer probably already enables

	 * runtime PM for this func such as the case host->caps &

	 * MMC_CAP_POWER_OFF_CARD.

	/* As explaination in drivers/mmc/core/sdio_bus.c tells us:

	 * Unbound SDIO functions are always suspended.

	 * During probe, the function is set active and the usage count

	 * is incremented.  If the driver supports runtime PM,

	 * it should call pm_runtime_put_noidle() in its probe routine and

	 * pm_runtime_get_noresume() in its remove routine.

	 *

	 * So, put a pm_runtime_put_noidle here !

 Be consistent the state in btmtksdio_probe */

 CONFIG_PM */

 CONFIG_PM */

/*

 *

 *  Bluetooth driver for the Anycom BlueCard (LSE039/LSE041)

 *

 *  Copyright (C) 2001-2002  Marcel Holtmann <marcel@holtmann.org>

 *

 *

 *  This program is free software; you can redistribute it and/or modify

 *  it under the terms of the GNU General Public License version 2 as

 *  published by the Free Software Foundation;

 *

 *  Software distributed under the License is distributed on an "AS

 *  IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or

 *  implied. See the License for the specific language governing

 *  rights and limitations under the License.

 *

 *  The initial developer of the original code is David A. Hinds

 *  <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds

 *  are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.

 *

 ======================== Module parameters ======================== */

 ======================== Local structures ======================== */

 For serializing operations */

 For LED control */

 Status of the hardware and LED control */

 Default baud rate: 57600, 115200, 230400 or 460800 */

 Hardware states */

 Transmit states  */

 unset = buffer one, set = buffer two */

 Receiver states */

 Special packet types */

 These are the register offsets */

 REG_COMMAND */

 REG_CONTROL */

 REG_RX_CONTROL */

 ======================== LED handling routines ======================== */

 leave LED in inactive state for HZ/10 for blink effect */

 Disable activity LED, enable power LED */

 don't disturb running blink timer */

 Enable activity LED, keep power LED enabled */

 Disable power LED */

 Stop the LED after HZ/10 */

 ======================== Interrupt handling ======================== */

 Disable RTS */

 Activate LED */

 Send frame */

 Tell the FPGA to send the data */

 Mark the buffer as dirty */

 Wait until the command reaches the baseband */

 Set baud on baseband */

 Enable RTS */

 Wait before the next HCI packet can be send */

 Change buffer */

 Allocate packet */

 init packet */

 unknown packet */

 our irq handler is shared */

 Disable interrupt */

 Enable interrupt */

 ======================== Device specific HCI commands ======================== */

 Ericsson baud rate command */

 ======================== HCI interface ======================== */

 Drop TX queue */

 Enable power LED */

 Stop LED timer */

 Disable power LED */

 Prepend skb with frame type */

 ======================== Card services HCI interaction ======================== */

 Initialize HCI device */

 Reset card */

 Turn FPGA off */

 Wait some time */

 Turn FPGA on */

 Activate card */

 Enable interrupt */

 Disable RTS */

 Set baud rate */

 Enable RTS */

 Start the RX buffers */

 Signal that the hardware is ready */

 Drop TX queue */

 Control the point at which RTS is enabled */

 Timeout before it is safe to send the first HCI packet */

 Register HCI device */

 Reset card */

 Turn FPGA off */

 Create new info device */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Bluetooth support for Realtek devices

 *

 *  Copyright (C) 2015 Endless Mobile, Inc.

 8723A */

 8723BS */

 8723B */

 8723D */

 8723DS */

 8821A */

 8821C */

 8761A */

 8761B */

 8761BU */

 8822C with UART interface */

 8822C with USB interface */

 8822B */

 8852A */

 Read RTL ROM version command */

 8723D */

 8821C */

 8822C */

 8761B */

 8852A */

	/* Loop from the end of the firmware parsing instructions, until

	 * we find an instruction that identifies the "project ID" for the

	 * hardware supported by this firwmare file.

	 * Once we have that, we double-check that that project_id is suitable

	 * for the hardware we are working with.

 EOF */

 Find project_id in table */

	/* After the rtl_epatch_header there is a funky patch metadata section.

	 * Assuming 2 patches, the layout is:

	 * ChipID1 ChipID2 PatchLength1 PatchLength2 PatchOffset1 PatchOffset2

	 *

	 * Find the right patch for this chip.

	/* Copy the firmware into a new buffer and write the version at

	 * the end.

 data end */

 Send download command */

	/* Check that the firmware doesn't have the epatch signature

	 * (which is only for RTL8723B and newer).

		/* Ensure the above vendor command is sent to controller and

		 * process has done.

		/* Read the local version again. Expect to have the vanilla

		 * version as cold boot.

	/* The following chips supports the Microsoft vendor extension,

	 * therefore set the corresponding VsMsftOpCode.

	/* Match a set of subver values that correspond to stock firmware,

	 * which is not compatible with standard btusb.

	 * If matched, upload an alternative firmware that does conform to

	 * standard btusb. Once that firmware is uploaded, the subver changes

	 * to a different value.

	/* Enable controller to do both LE scan and BR/EDR inquiry

	 * simultaneously.

	/* Enable central-peripheral role (able to create new connections with

	 * an existing connection in slave role).

 Enable WBS supported for the specific Realtek devices. */

	/* According to the vendor driver, BT must be reset on close to avoid

	 * firmware crash.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 *  Bluetooth HCI UART driver for Intel/AG6xx devices

 *

 *  Copyright (C) 2016  Intel Corporation

 Prepend skb with frame type */

	/* Can write a maximum of 247 bytes per HCI command.

	 * HCI cmd Header (3), Intel mem write header (6), data (247).

	/* The hardware platform number has a fixed value of 0x37 and

	 * for now only accept this single value.

	/* Only the hardware variant iBT 2.1 (AG6XX) is supported by this

	 * firmware setup method.

	/* If there is no applied patch, fw_patch_num is always 0x00. In other

	 * cases, current firmware is already patched. No need to patch it.

	/* PBN patch file contains a list of binary patches to be applied on top

	 * of the embedded firmware. Each patch entry header contains the target

	 * address and patch size.

	 *

	 * Patch entry:

	 * | addr(le) | patch_len(le) | patch_data |

	 * | 4 Bytes  |    4 Bytes    |   n Bytes  |

	 *

	 * PBN file is terminated by a patch entry whose address is 0xffffffff.

 Exit manufacturing mode and reset */

	/* Set the event mask for Intel specific vendor events. This enables

	 * a few extra events that are useful during general operation.

/**

 * Marvell BT-over-SDIO driver: SDIO interface related functions.

 *

 * Copyright (C) 2009, Marvell International Ltd.

 *

 * This software file (the "File") is distributed by Marvell International

 * Ltd. under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/* This function parses device tree node using mmc subnode devicetree API.

 * The device node is saved in card->plt_of_node.

 * If the device tree node exists and includes interrupts attributes, this

 * function will request platform specific wakeup interrupt.

 Configure wakeup (enabled by default) */

/* The btmrvl_sdio_remove() callback function is called

 * when user removes this module from kernel space or ejects

 * the card from the slot. The driver handles these 2 cases

 * differently.

 * If the user is removing the module, a MODULE_SHUTDOWN_REQ

 * command is sent to firmware and interrupt will be disabled.

 * If the card is removed, there is no need to send command

 * or disable interrupt.

 *

 * The variable 'user_rmmod' is used to distinguish these two

 * scenarios. This flag is initialized as FALSE in case the card

 * is removed, and will be set to TRUE for module removal when

 * module_exit function is called.

 Marvell SD8688 Bluetooth device */

 Marvell SD8787 Bluetooth device */

 Marvell SD8787 Bluetooth AMP device */

 Marvell SD8797 Bluetooth device */

 Marvell SD8887 Bluetooth device */

 Marvell SD8897 Bluetooth device */

 Marvell SD8977 Bluetooth device */

 Marvell SD8987 Bluetooth device */

 Marvell SD8997 Bluetooth device */

 Terminating entry */

 Wait for firmware to become ready */

 Perform helper data transfer */

 Check if there is more data? */

 Little-endian */

 Now send the data */

 Ensure aligned firmware buffer */

 Perform firmware data transfer */

 Check if there is more data ? */

 Set txlen to 0 so as to resend from same offset */

 Last block ? */

 Read the length of data to be transferred */

 Allocate buffer */

	/* This is SDIO specific header length: byte[2][1][0], type: byte[3]

	 * (HCI_COMMAND = 1, ACL_DATA = 2, SCO_DATA = 3, 0xFE = Vendor)

		/*

		 * DN_LD_HOST_INT_STATUS and/or UP_LD_HOST_INT_STATUS

		 * Clear the interrupt status register and re-enable the

		 * interrupt.

 Transfer data to card */

 Check if other function driver is downloading the firmware */

 Give other function more time to download the firmware */

	/*

	 * winner or not, with this test the FW synchronizes when the

	 * module can continue its initialization

 Read the registers of SDIO function0 */

 This function read/write firmware */

 This function dump sdio register and memory data */

 dump sdio register first */

 Read the number of the memories which will dump */

 Read the length of every memory which will dump */

	/* Dump all the memory data into single file, a userspace script will

	 * be used to split all the memory data to multiple files

	/* fw_dump_data will be free in device coredump release function

	 * after 5 min

 Disable the interrupts on the card */

 Device tree node parsing and platform specific configuration*/

 Initialize the interface specific function pointers */

			/* Send SHUTDOWN command & disable interrupt

			 * if user removes the module.

 Enable platform specific wakeup interrupt */

 Disable platform specific wakeup interrupt */

 We will keep the power when hs enabled successfully */

 Disable platform specific wakeup interrupt */

			/* Undo our disable, since interrupt handler already

			 * did this.

 Clear the flag in case user removes the card. */

 Set the flag as user is removing this module. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2016, Linaro Ltd.

 * Copyright (c) 2015, Sony Mobile Communications Inc.

 Use GFP_ATOMIC as we're in IRQ context */

	/* Devices do not have persistent storage for BD address. Retrieve

	 * it from the firmware node property.

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 1991, 1992  Linus Torvalds

/*

 * 'tty_io.c' gives an orthogonal feeling to tty's, be they consoles

 * or rs-channels. It also implements echoing, cooked mode etc.

 *

 * Kill-line thanks to John T Kohl, who also corrected VMIN = VTIME = 0.

 *

 * Modified by Theodore Ts'o, 9/14/92, to dynamically allocate the

 * tty_struct and tty_queue structures.  Previously there was an array

 * of 256 tty_struct's which was statically allocated, and the

 * tty_queue structures were allocated at boot time.  Both are now

 * dynamically allocated only when the tty is open.

 *

 * Also restructured routines so that there is more of a separation

 * between the high-level tty routines (tty_io.c and tty_ioctl.c) and

 * the low-level tty routines (serial.c, pty.c, console.c).  This

 * makes for cleaner and more compact code.  -TYT, 9/17/92

 *

 * Modified by Fred N. van Kempen, 01/29/93, to add line disciplines

 * which can be dynamically activated and de-activated by the line

 * discipline handling modules (like SLIP).

 *

 * NOTE: pay no attention to the line discipline code (yet); its

 * interface is still subject to change in this version...

 * -- TYT, 1/31/92

 *

 * Added functionality to the OPOST tty handling.  No delays, but all

 * other bits should be there.

 *	-- Nick Holloway <alfie@dcs.warwick.ac.uk>, 27th May 1993.

 *

 * Rewrote canonical mode and added more termios flags.

 *	-- julian@uhunix.uhcc.hawaii.edu (J. Cowley), 13Jan94

 *

 * Reorganized FASYNC support so mouse code can share it.

 *	-- ctm@ardi.com, 9Sep95

 *

 * New TIOCLINUX variants added.

 *	-- mj@k332.feld.cvut.cz, 19-Nov-95

 *

 * Restrict vt switching via ioctl()

 *      -- grif@cs.ucr.edu, 5-Dec-95

 *

 * Move console and virtual terminal code to more appropriate files,

 * implement CONFIG_VT and generalize console device interface.

 *	-- Marko Kohtala <Marko.Kohtala@hut.fi>, March 97

 *

 * Rewrote tty_init_dev and tty_release_dev to eliminate races.

 *	-- Bill Hawes <whawes@star.net>, June 97

 *

 * Added devfs support.

 *      -- C. Scott Ananian <cananian@alumni.princeton.edu>, 13-Jan-1998

 *

 * Added support for a Unix98-style ptmx device.

 *      -- C. Scott Ananian <cananian@alumni.princeton.edu>, 14-Jan-1998

 *

 * Reduced memory usage for older ARM systems

 *      -- Russell King <rmk@arm.linux.org.uk>

 *

 * Move do_SAK() into process context.  Less stack use in devfs functions.

 * alloc_tty_struct() always uses kmalloc()

 *			 -- Andrew Morton <andrewm@uow.edu.eu> 17Mar01

 for the benefit of tty drivers  */

 .c_line = N_TTY, */

/* This list gets poked at by procfs and various bits of boot up code. This

 * could do with some rationalisation such as pulling the tty proc function

 * into this file.

 linked list of tty drivers */

 Mutex to protect creating and releasing a tty */

/**

 *	free_tty_struct		-	free a disused tty

 *	@tty: tty struct to free

 *

 *	Free the write buffers, tty queue and tty memory itself.

 *

 *	Locking: none. Must be called after tty is definitely unused

 Associate a new file with the tty structure */

/*

 * tty_free_file - free file->private_data

 *

 * This shall be used only for fail path handling when tty_add_file was not

 * called yet.

 Delete file from its tty */

/**

 *	tty_name	-	return tty naming

 *	@tty: tty structure

 *

 *	Convert a tty structure into a name. The name reflects the kernel

 *	naming policy and if udev is in use may not reflect user space

 *

 *	Locking: none

 Hmm.  NULL pointer.  That's fun. */

 Caller must hold tty_lock */

/**

 *	get_tty_driver		-	find device of a tty

 *	@device: device identifier

 *	@index: returns the index of the tty

 *

 *	This routine returns a tty driver structure, given a device number

 *	and also passes back the index number.

 *

 *	Locking: caller must hold tty_mutex

/**

 *	tty_dev_name_to_number	-	return dev_t for device name

 *	@name: user space name of device under /dev

 *	@number: pointer to dev_t that this function will populate

 *

 *	This function converts device names like ttyS0 or ttyUSB1 into dev_t

 *	like (4, 64) or (188, 1). If no corresponding driver is registered then

 *	the function returns -ENODEV.

 *

 *	Locking: this acquires tty_mutex to protect the tty_drivers list from

 *		being modified while we are traversing it, and makes sure to

 *		release it before exiting.

 if here then driver wasn't found */

/**

 *	tty_find_polling_driver	-	find device of a polled tty

 *	@name: name string to match

 *	@line: pointer to resulting tty line nr

 *

 *	This routine returns a tty driver structure, given a name

 *	and the condition that the tty driver is capable of polled

 *	operation.

 Search through the tty devices to look for a match */

 No kernel lock held - none needed ;) */

/**

 *	tty_wakeup	-	request more data

 *	@tty: terminal

 *

 *	Internal and external helper for wakeups of tty. This function

 *	informs the line discipline if present that the driver is ready

 *	to receive more output data.

/**

 *	tty_release_redirect	-	Release a redirect on a pty if present

 *	@tty: tty device

 *

 *	This is available to the pty code so if the master closes, if the

 *	slave is a redirect it can release the redirect.

/**

 *	__tty_hangup		-	actual handler for hangup events

 *	@tty: tty device

 *	@exit_session: if non-zero, signal all foreground group processes

 *

 *	This can be called by a "kworker" kernel thread.  That is process

 *	synchronous but doesn't hold any locks, so we need to make sure we

 *	have the appropriate locks for what we're doing.

 *

 *	The hangup event clears any pending redirections onto the hung up

 *	device. It ensures future writes will error and it does the needed

 *	line discipline hangup and signal delivery. The tty object itself

 *	remains intact.

 *

 *	Locking:

 *		BTM

 *		  redirect lock for undoing redirection

 *		  file list lock for manipulating list of ttys

 *		  tty_ldiscs_lock from called functions

 *		  termios_rwsem resetting termios data

 *		  tasklist_lock to walk task list for hangup event

 *		    ->siglock to protect ->signal/->sighand

	/*

	 * Some console devices aren't actually hung up for technical and

	 * historical reasons, which can lead to indefinite interruptible

	 * sleep in n_tty_read().  The following explicitly tells

	 * n_tty_read() to abort readers.

	/* inuse_filps is protected by the single tty lock,

	 * this really needs to change if we want to flush the

	 * workqueue with the lock held.

 This breaks for file handles being sent over AF_UNIX sockets ? */

 can't block */

 Account for the p->signal references we killed */

	/*

	 * If one of the devices matches a console pointer, we

	 * cannot just call hangup() because that will cause

	 * tty->count and state->count to go out of sync.

	 * So we just call close() the right number of times.

	/*

	 * We don't want to have driver/ldisc interactions beyond the ones

	 * we did here. The driver layer expects no calls after ->hangup()

	 * from the ldisc side, which is now guaranteed.

/**

 *	tty_hangup		-	trigger a hangup event

 *	@tty: tty to hangup

 *

 *	A carrier loss (virtual or otherwise) has occurred on this like

 *	schedule a hangup sequence to run after this event.

/**

 *	tty_vhangup		-	process vhangup

 *	@tty: tty to hangup

 *

 *	The user has asked via system call for the terminal to be hung up.

 *	We do this synchronously so that when the syscall returns the process

 *	is complete. That guarantee is necessary for security reasons.

/**

 *	tty_vhangup_self	-	process vhangup for own ctty

 *

 *	Perform a vhangup on the current controlling tty

/**

 *	tty_vhangup_session		-	hangup session leader exit

 *	@tty: tty to hangup

 *

 *	The session leader is exiting and hanging up its controlling terminal.

 *	Every process in the foreground process group is signalled SIGHUP.

 *

 *	We do this synchronously so that when the syscall returns the process

 *	is complete. That guarantee is necessary for security reasons.

/**

 *	tty_hung_up_p		-	was tty hung up

 *	@filp: file pointer of tty

 *

 *	Return true if the tty has been subject to a vhangup or a carrier

 *	loss

/**

 *	stop_tty	-	propagate flow control

 *	@tty: tty to stop

 *

 *	Perform flow control to the driver. May be called

 *	on an already stopped device and will not re-call the driver

 *	method.

 *

 *	This functionality is used by both the line disciplines for

 *	halting incoming flow and by the driver. It may therefore be

 *	called from any context, may be under the tty atomic_write_lock

 *	but not always.

 *

 *	Locking:

 *		flow.lock

/**

 *	start_tty	-	propagate flow control

 *	@tty: tty to start

 *

 *	Start a tty that has been stopped if at all possible. If this

 *	tty was previous stopped and is now being started, the driver

 *	start method is invoked and the line discipline woken.

 *

 *	Locking:

 *		flow.lock

	/*

	 * We only care if the two values differ in anything other than the

	 * lower three bits (i.e every 8 seconds).  If so, then we can update

	 * the time of the tty device, otherwise it could be construded as a

	 * security leak to let userspace know the exact timing of the tty.

/*

 * Iterate on the ldisc ->read() function until we've gotten all

 * the data the ldisc has for us.

 *

 * The "cookie" is something that the ldisc read function can fill

 * in to let us know that there is more data to be had.

 *

 * We promise to continue to call the ldisc until it stops returning

 * data or clears the cookie. The cookie may be something that the

 * ldisc maintains state for and needs to free.

 Did we have an earlier error (ie -EFAULT)? */

			/*

			 * -EOVERFLOW means we didn't have enough space

			 * for a whole packet, and we shouldn't return

			 * a partial result.

		/*

		 * If the user copy failed, we still need to do another ->read()

		 * call if we had a cookie to let the ldisc clear up.

		 *

		 * But make sure size is zeroed.

 We always clear tty buffer in case they contained passwords */

/**

 *	tty_read	-	read method for tty device files

 *	@iocb: kernel I/O control block

 *	@to: destination for the data read

 *

 *	Perform the read system call function on this terminal device. Checks

 *	for hung up devices before calling the line discipline method.

 *

 *	Locking:

 *		Locks the line discipline internally while needed. Multiple

 *	read calls may be outstanding in parallel.

	/* We want to wait for the line discipline to sort out in this

	 * situation.

/*

 * Split writes up in sane blocksizes to avoid

 * denial-of-service type attacks

	/*

	 * We chunk up writes into a temporary buffer. This

	 * simplifies low-level drivers immensely, since they

	 * don't have locking issues and user mode accesses.

	 *

	 * But if TTY_NO_WRITE_SPLIT is set, we should use a

	 * big chunk-size..

	 *

	 * The default chunk-size is 2kB, because the NTTY

	 * layer has problems with bigger chunks. It will

	 * claim to be able to handle more characters than

	 * it actually does.

	 *

	 * FIXME: This can probably go away now except that 64K chunks

	 * are too likely to fail unless switched to vmalloc...

 write_buf/write_cnt is protected by the atomic_write_lock mutex */

 Do the write .. */

 FIXME! Have Al check this! */

/**

 * tty_write_message - write a message to a certain tty, not just the console.

 * @tty: the destination tty_struct

 * @msg: the message to write

 *

 * This is used for messages that need to be redirected to a specific tty.

 * We don't put it into the syslog queue right now maybe in the future if

 * really needed.

 *

 * We must still hold the BTM and test the CLOSING flag for the moment.

 Short term debug to catch buggy drivers */

/**

 *	tty_write		-	write method for tty device file

 *	@iocb: kernel I/O control block

 *	@from: iov_iter with data to write

 *

 *	Write data to a tty device via the line discipline.

 *

 *	Locking:

 *		Locks the line discipline as required

 *		Writes to the tty driver are serialized by the atomic_write_lock

 *		and are then processed in chunks to the device. The line

 *		discipline write method will not be invoked in parallel for

 *		each device.

	/*

	 * We know the redirected tty is just another tty, we can

	 * call file_tty_write() directly with that file pointer.

/*

 *	tty_send_xchar	-	send priority character

 *

 *	Send a high priority character to the tty even if stopped

 *

 *	Locking: none for xchar method, write ordering for write method.

/**

 *	pty_line_name	-	generate name for a pty

 *	@driver: the tty driver in use

 *	@index: the minor number

 *	@p: output buffer of at least 6 bytes

 *

 *	Generate a name from a driver reference and write it to the output

 *	buffer.

 *

 *	Locking: None

 ->name is initialized to "ttyp", but "tty" is expected */

/**

 *	tty_line_name	-	generate name for a tty

 *	@driver: the tty driver in use

 *	@index: the minor number

 *	@p: output buffer of at least 7 bytes

 *

 *	Generate a name from a driver reference and write it to the output

 *	buffer.

 *

 *	Locking: None

/**

 *	tty_driver_lookup_tty() - find an existing tty, if any

 *	@driver: the driver for the tty

 *	@file:   file object

 *	@idx:	 the minor number

 *

 *	Return the tty, if found. If not found, return NULL or ERR_PTR() if the

 *	driver lookup() method returns an error.

 *

 *	Locking: tty_mutex must be held. If the tty is found, bump the tty kref.

/**

 *	tty_init_termios	-  helper for termios setup

 *	@tty: the tty to set up

 *

 *	Initialise the termios structure for this tty. This runs under

 *	the tty_mutex currently so we can be relaxed about ordering.

 Check for lazy saved data */

 Compatibility until drivers always set this */

/**

 *	tty_driver_install_tty() - install a tty entry in the driver

 *	@driver: the driver for the tty

 *	@tty: the tty

 *

 *	Install a tty object into the driver tables. The tty->index field

 *	will be set by the time this is called. This method is responsible

 *	for ensuring any need additional structures are allocated and

 *	configured.

 *

 *	Locking: tty_mutex for now

/**

 *	tty_driver_remove_tty() - remove a tty from the driver tables

 *	@driver: the driver for the tty

 *	@tty: tty to remove

 *

 *	Remvoe a tty object from the driver tables. The tty->index field

 *	will be set by the time this is called.

 *

 *	Locking: tty_mutex for now

/**

 *	tty_reopen()	- fast re-open of an open tty

 *	@tty: the tty to open

 *

 *	Return 0 on success, -errno on error.

 *	Re-opens on master ptys are not allowed and return -EIO.

 *

 *	Locking: Caller must hold tty_lock

/**

 *	tty_init_dev		-	initialise a tty device

 *	@driver: tty driver we are opening a device on

 *	@idx: device index

 *

 *	Prepare a tty device. This may not be a "new" clean device but

 *	could also be an active device. The pty drivers require special

 *	handling because of this.

 *

 *	Locking:

 *		The function is called under the tty_mutex, which

 *	protects us from the tty struct or driver itself going away.

 *

 *	On exit the tty device has the line discipline attached and

 *	a reference count of 1. If a pair was created for pty/tty use

 *	and the other was a pty master then it too has a reference count of 1.

 *

 * WSH 06/09/97: Rewritten to remove races and properly clean up after a

 * failed open.  The new code protects the open with a mutex, so it's

 * really quite straightforward.  The mutex locking can probably be

 * relaxed for the (most common) case of reopening a tty.

 *

 *	Return: returned tty structure

	/*

	 * First time open is complex, especially for PTY devices.

	 * This code guarantees that either everything succeeds and the

	 * TTY is ready for operation, or else the table slots are vacated

	 * and the allocated memory released.  (Except that the termios

	 * may be retained.)

	/*

	 * Structures all installed ... call the ldisc open routines.

	 * If we fail here just call release_tty to clean up.  No need

	 * to decrement the use counts, as release_tty doesn't care.

 Return the tty locked so that it cannot vanish under the caller */

 call the tty release_tty routine to clean out this slot */

/**

 * tty_save_termios() - save tty termios data in driver table

 * @tty: tty whose termios data to save

 *

 * Locking: Caller guarantees serialisation with tty_init_termios().

 If the port is going to reset then it has no termios to save */

 Stash the termios data */

/**

 *	tty_flush_works		-	flush all works of a tty/pty pair

 *	@tty: tty device to flush works for (or either end of a pty pair)

 *

 *	Sync flush all works belonging to @tty (and the 'other' tty).

/**

 *	release_one_tty		-	release tty structure memory

 *	@work: work of tty we are obliterating

 *

 *	Releases memory associated with a tty structure, and clears out the

 *	driver table slots. This function is called when a device is no longer

 *	in use. It also gets called when setup of a device fails.

 *

 *	Locking:

 *		takes the file list lock internally when working on the list

 *	of ttys that the driver keeps.

 *

 *	This method gets called from a work queue so that the driver private

 *	cleanup ops can sleep (needed for USB at least)

	/* The hangup queue is now free so we can reuse it rather than

	 *  waste a chunk of memory for each port.

/**

 *	tty_kref_put		-	release a tty kref

 *	@tty: tty device

 *

 *	Release a reference to a tty device and if need be let the kref

 *	layer destruct the object for us

/**

 *	release_tty		-	release tty structure memory

 *	@tty: tty device release

 *	@idx: index of the tty device release

 *

 *	Release both @tty and a possible linked partner (think pty pair),

 *	and decrement the refcount of the backing module.

 *

 *	Locking:

 *		tty_mutex

 *		takes the file list lock internally when working on the list

 *	of ttys that the driver keeps.

 *

 This should always be true but check for the moment */

/**

 *	tty_release_checks - check a tty before real release

 *	@tty: tty to check

 *	@idx: index of the tty

 *

 *	Performs some paranoid checking before true release of the @tty.

 *	This is a no-op unless TTY_PARANOIA_CHECK is defined.

 not much to check for devpts */

/**

 *      tty_kclose      -       closes tty opened by tty_kopen

 *      @tty: tty device

 *

 *      Performs the final steps to release and free a tty device. It is the

 *      same as tty_release_struct except that it also resets TTY_PORT_KOPENED

 *      flag on tty->port.

	/*

	 * Ask the line discipline code to release its structures

 Wait for pending work before tty destruction commmences */

	/*

	 * The release_tty function takes care of the details of clearing

	 * the slots and preserving the termios structure.

/**

 *	tty_release_struct	-	release a tty struct

 *	@tty: tty device

 *	@idx: index of the tty

 *

 *	Performs the final steps to release and free a tty device. It is

 *	roughly the reverse of tty_init_dev.

	/*

	 * Ask the line discipline code to release its structures

 Wait for pending work before tty destruction commmences */

	/*

	 * The release_tty function takes care of the details of clearing

	 * the slots and preserving the termios structure.

/**

 *	tty_release		-	vfs callback for close

 *	@inode: inode of tty

 *	@filp: file pointer for handle to tty

 *

 *	Called the last time each file handle is closed that references

 *	this tty. There may however be several such references.

 *

 *	Locking:

 *		Takes bkl. See tty_release_dev

 *

 * Even releasing the tty structures is a tricky business.. We have

 * to be very careful that the structures are all released at the

 * same time, as interrupts might otherwise get the wrong pointers.

 *

 * WSH 09/09/97: rewritten to avoid some nasty race conditions that could

 * lead to double frees or releasing memory still in use.

 If tty is pty master, lock the slave pty (stable lock order) */

	/*

	 * Sanity check: if tty->count is going to zero, there shouldn't be

	 * any waiters on tty->read_wait or tty->write_wait.  We test the

	 * wait queues and kick everyone out _before_ actually starting to

	 * close.  This ensures that we won't block while releasing the tty

	 * structure.

	 *

	 * The test for the o_tty closing is necessary, since the master and

	 * slave sides may close in any order.  If the slave side closes out

	 * first, its count will be one, since the master side holds an open.

	 * Thus this test wouldn't be triggered at the time the slave closed,

	 * so we do it now.

	/*

	 * We've decremented tty->count, so we need to remove this file

	 * descriptor off the tty->tty_files list; this serves two

	 * purposes:

	 *  - check_tty_count sees the correct number of file descriptors

	 *    associated with this tty.

	 *  - do_tty_hangup no longer sees this file descriptor as

	 *    something that needs to be handled for hangups.

	/*

	 * Perform some housekeeping before deciding whether to return.

	 *

	 * If _either_ side is closing, make sure there aren't any

	 * processes that still think tty or o_tty is their controlling

	 * tty.

 check whether both sides are closing ... */

	/* At this point, the tty->count == 0 should ensure a dead tty

	 * cannot be re-opened by a racing opener.

/**

 *	tty_open_current_tty - get locked tty of current task

 *	@device: device number

 *	@filp: file pointer to tty

 *	@return: locked tty of the current task iff @device is /dev/tty

 *

 *	Performs a re-open of the current task's controlling tty.

 *

 *	We cannot return driver and index like for the other nodes because

 *	devpts will not work then. It expects inodes to be from devpts FS.

 Don't let /dev/tty block */

 noctty = 1; */

 safe to drop the kref now */

/**

 *	tty_lookup_driver - lookup a tty driver for a given device file

 *	@device: device number

 *	@filp: file pointer to tty

 *	@index: index for the device in the @return driver

 *	@return: driver for this inode (with increased refcount)

 *

 *	If @return is not erroneous, the caller is responsible to decrement the

 *	refcount by tty_driver_kref_put.

 *

 *	Locking: tty_mutex protects get_tty_driver

 Don't let /dev/console block */

 check whether we're reopening an existing tty */

 drop kref from tty_driver_lookup_tty() */

 tty_init_dev returns tty with the tty_lock held */

/**

 *	tty_kopen_exclusive	-	open a tty device for kernel

 *	@device: dev_t of device to open

 *

 *	Opens tty exclusively for kernel. Performs the driver lookup,

 *	makes sure it's not already opened and performs the first-time

 *	tty initialization.

 *

 *	Returns the locked initialized &tty_struct

 *

 *	Claims the global tty_mutex to serialize:

 *	  - concurrent first-time tty initialization

 *	  - concurrent tty driver removal w/ lookup

 *	  - concurrent tty removal from driver table

/**

 *	tty_kopen_shared	-	open a tty device for shared in-kernel use

 *	@device: dev_t of device to open

 *

 *	Opens an already existing tty for in-kernel use. Compared to

 *	tty_kopen_exclusive() above it doesn't ensure to be the only user.

 *

 *	Locking is identical to tty_kopen() above.

/**

 *	tty_open_by_driver	-	open a tty device

 *	@device: dev_t of device to open

 *	@filp: file pointer to tty

 *

 *	Performs the driver lookup, checks for a reopen, or otherwise

 *	performs the first-time tty initialization.

 *

 *	Returns the locked initialized or re-opened &tty_struct

 *

 *	Claims the global tty_mutex to serialize:

 *	  - concurrent first-time tty initialization

 *	  - concurrent tty driver removal w/ lookup

 *	  - concurrent tty removal from driver table

 check whether we're reopening an existing tty */

 drop kref from tty_driver_lookup_tty() */

 Returns with the tty_lock held for now */

/**

 *	tty_open		-	open a tty device

 *	@inode: inode of device file

 *	@filp: file pointer to tty

 *

 *	tty_open and tty_release keep up the tty count that contains the

 *	number of opens done on a tty. We cannot use the inode-count, as

 *	different inodes might point to the same tty.

 *

 *	Open-counting is needed for pty masters, as well as for keeping

 *	track of serial lines: DTR is dropped when the last close happens.

 *	(This is not done solely through tty->count, now.  - Ted 1/27/92)

 *

 *	The termios state of a pty is reset on first open so that

 *	settings don't persist across reuse.

 *

 *	Locking: tty_mutex protects tty, tty_lookup_driver and tty_init_dev.

 *		 tty->count should protect the rest.

 *		 ->siglock protects ->signal/->sighand

 *

 *	Note: the tty_unlock/lock cases without a ref are only safe due to

 *	tty_mutex

 need to call tty_release without BTM */

		/*

		 * Need to reset f_op in case a hangup happened.

/**

 *	tty_poll	-	check tty status

 *	@filp: file being polled

 *	@wait: poll wait structures to update

 *

 *	Call the line discipline polling method to obtain the poll

 *	status of the device.

 *

 *	Locking: locks called line discipline but ldisc poll method

 *	may be re-entered freely by other callers.

/**

 *	tiocsti			-	fake input character

 *	@tty: tty to fake input into

 *	@p: pointer to character

 *

 *	Fake input to a tty device. Does the necessary locking and

 *	input management.

 *

 *	FIXME: does not honour flow control ??

 *

 *	Locking:

 *		Called functions take tty_ldiscs_lock

 *		current->signal->tty check is safe without locks

/**

 *	tiocgwinsz		-	implement window query ioctl

 *	@tty: tty

 *	@arg: user buffer for result

 *

 *	Copies the kernel idea of the window size into the user buffer.

 *

 *	Locking: tty->winsize_mutex is taken to ensure the winsize data

 *		is consistent.

/**

 *	tty_do_resize		-	resize event

 *	@tty: tty being resized

 *	@ws: new dimensions

 *

 *	Update the termios variables and send the necessary signals to

 *	peform a terminal resize correctly

 Lock the tty */

 Signal the foreground process group */

/**

 *	tiocswinsz		-	implement window size set ioctl

 *	@tty: tty side of tty

 *	@arg: user buffer for result

 *

 *	Copies the user idea of the window size to the kernel. Traditionally

 *	this is just advisory information but for the Linux console it

 *	actually has driver level meaning and triggers a VC resize.

 *

 *	Locking:

 *		Driver dependent. The default do_resize method takes the

 *	tty termios mutex and ctrl.lock. The console takes its own lock

 *	then calls into the default method.

/**

 *	tioccons	-	allow admin to move logical console

 *	@file: the file to become console

 *

 *	Allow the administrator to move the redirected console device

 *

 *	Locking: uses redirect_lock to guard the redirect information

/**

 *	tiocsetd	-	set line discipline

 *	@tty: tty device

 *	@p: pointer to user data

 *

 *	Set the line discipline according to user request.

 *

 *	Locking: see tty_set_ldisc, this function is just a helper

/**

 *	tiocgetd	-	get line discipline

 *	@tty: tty device

 *	@p: pointer to user data

 *

 *	Retrieves the line discipline id directly from the ldisc.

 *

 *	Locking: waits for ldisc reference (in case the line discipline

 *		is changing or the tty is being hungup)

/**

 *	send_break	-	performed time break

 *	@tty: device to break on

 *	@duration: timeout in mS

 *

 *	Perform a timed break on hardware that lacks its own driver level

 *	timed break functionality.

 *

 *	Locking:

 *		atomic_write_lock serializes

 *

 Do the work ourselves */

/**

 *	tty_tiocmget		-	get modem status

 *	@tty: tty device

 *	@p: pointer to result

 *

 *	Obtain the modem status bits from the tty driver if the feature

 *	is supported. Return -ENOTTY if it is not available.

 *

 *	Locking: none (up to the driver)

/**

 *	tty_tiocmset		-	set modem status

 *	@tty: tty device

 *	@cmd: command - clear bits, set bits or set all

 *	@p: pointer to desired bits

 *

 *	Set the modem status bits from the tty driver if the feature

 *	is supported. Return -ENOTTY if it is not available.

 *

 *	Locking: none (up to the driver)

/**

 *	tty_get_icount		-	get tty statistics

 *	@tty: tty device

 *	@icount: output parameter

 *

 *	Gets a copy of the tty's icount statistics.

 *

 *	Locking: none (up to the driver)

/*

 * if pty, return the slave side (real_tty)

 * otherwise, return self

/*

 * Split this up, as gcc can choke on it otherwise..

	/*

	 * Factor out some common prep work

	/*

	 *	Now do the stuff.

	/*

	 * Break handling

 Turn break on, unconditionally */

 Turn break off, unconditionally */

 SVID version: non-zero arg --> no break */

		/* non-zero arg means wait for all output data

		 * to be sent (performed above) but don't send break.

		 * This is used by the tcdrain() termios function.

 support for POSIX tcsendbreak() */

 flush tty buffer and allow ldisc to process ioctl */

 Special because the struct file is needed */

 time to wait before closing */

 no longer used... */

 compat_ulong_t  iomap_base FIXME */

/*

 * This implements the "Secure Attention Key" ---  the idea is to

 * prevent trojan horses by killing all processes associated with this

 * tty when the user hits the "Secure Attention Key".  Required for

 * super-paranoid applications --- see the Orange Book for more details.

 *

 * This code could be nicer; ideally it should send a HUP, wait a few

 * seconds, then send a INT, and then a KILL signal.  But you then

 * have to coordinate with the init process, since all processes associated

 * with the current tty must be dead before the new getty is allowed

 * to spawn.

 *

 * Now, if it would be correct ;-/ The current code has a nasty hole -

 * it doesn't catch files in flight. We may send the descriptor to ourselves

 * via AF_UNIX socket, close it and later fetch from socket. FIXME.

 *

 * Nasty bug: do_SAK is being called in interrupt context.  This can

 * deadlock.  We punt it up to process context.  AKPM - 16Mar2001

 Kill the entire session */

 Now kill any processes that happen to have the tty open */

/*

 * The tq handling here is a little racy - tty->SAK_work may already be queued.

 * Fortunately we don't need to worry, because if ->SAK_work is already queued,

 * the values which we write to it will be identical to the values which it

 * already has. --akpm

 Must put_device() after it's unused! */

/*

 *	alloc_tty_struct

 *

 *	This subroutine allocates and initializes a tty structure.

 *

 *	Locking: none - tty in question is not exposed at this point

/**

 *	tty_put_char	-	write one character to a tty

 *	@tty: tty

 *	@ch: character

 *

 *	Write one byte to the tty using the provided put_char method

 *	if present. Returns the number of characters successfully output.

 *

 *	Note: the specific put_char operation in the driver layer may go

 *	away soon. Don't call it directly, use this method

 init here, since reused cdevs cause crashes */

/**

 *	tty_register_device - register a tty device

 *	@driver: the tty driver that describes the tty device

 *	@index: the index in the tty driver for this tty device

 *	@device: a struct device that is associated with this tty device.

 *		This field is optional, if there is no known struct device

 *		for this tty device it can be set to NULL safely.

 *

 *	Returns a pointer to the struct device for this tty device

 *	(or ERR_PTR(-EFOO) on error).

 *

 *	This call is required to be made to register an individual tty device

 *	if the tty driver's flags have the TTY_DRIVER_DYNAMIC_DEV bit set.  If

 *	that bit is not set, this function should not be called by a tty

 *	driver.

 *

 *	Locking: ??

/**

 *	tty_register_device_attr - register a tty device

 *	@driver: the tty driver that describes the tty device

 *	@index: the index in the tty driver for this tty device

 *	@device: a struct device that is associated with this tty device.

 *		This field is optional, if there is no known struct device

 *		for this tty device it can be set to NULL safely.

 *	@drvdata: Driver data to be set to device.

 *	@attr_grp: Attribute group to be set on device.

 *

 *	Returns a pointer to the struct device for this tty device

 *	(or ERR_PTR(-EFOO) on error).

 *

 *	This call is required to be made to register an individual tty device

 *	if the tty driver's flags have the TTY_DRIVER_DYNAMIC_DEV bit set.  If

 *	that bit is not set, this function should not be called by a tty

 *	driver.

 *

 *	Locking: ??

		/*

		 * Free any saved termios data so that the termios state is

		 * reset when reusing a minor number.

/**

 *	tty_unregister_device - unregister a tty device

 *	@driver: the tty driver that describes the tty device

 *	@index: the index in the tty driver for this tty device

 *

 *	If a tty device is registered with a call to tty_register_device() then

 *	this function must be called when the tty device is gone.

 *

 *	Locking: ??

/**

 * __tty_alloc_driver -- allocate tty driver

 * @lines: count of lines this driver can handle at most

 * @owner: module which is responsible for this driver

 * @flags: some of TTY_DRIVER_* flags, will be set in driver->flags

 *

 * This should not be called directly, some of the provided macros should be

 * used instead. Use IS_ERR and friends on @retval.

/*

 * Called by a tty driver to register itself.

/*

 * Called by a tty driver to unregister itself.

 3/2004 jmc: why do these devices exist? */

 don't resolve tty0 as some programs depend on it */

/*

 * Ok, now we can initialize the rest of the tty devices and can count

 * on memory allocations, interrupts etc..

 SPDX-License-Identifier: GPL-2.0

/*

 *	Linux Magic System Request Key Hacks

 *

 *	(c) 1997 Martin Mares <mj@atrey.karlin.mff.cuni.cz>

 *	based on ideas by Pavel Machek <pavel@atrey.karlin.mff.cuni.cz>

 *

 *	(c) 2000 Crutcher Dunnavant <crutcher+kernel@datastacks.com>

 *	overhauled to use key registration

 *	based upon discusions in irc://irc.openprojects.net/#kernelnewbies

 *

 *	Copyright (c) 2010 Dmitry Torokhov

 *	Input handler conversion

 Whether we react on sysrq keys or just ignore them */

/**

 * sysrq_mask - Getter for sysrq_enabled mask.

 *

 * Return: 1 if sysrq is always enabled, enabled sysrq_key_op mask otherwise.

/*

 * A value of 1 means 'all', other nonzero values are an op mask:

 CONFIG_VT */

 release the RCU read lock before crashing */

 Idle CPUs have no interesting backtrace. */

	/*

	 * Fall back to the workqueue based printing if the

	 * backtrace printing did not succeed or the

	 * architecture has no support for it:

/*

 * Signal sysrq helper function.  Sends a signal to all user processes.

 Key Operations table and lock */

 0 */

 1 */

 2 */

 3 */

 4 */

 5 */

 6 */

 7 */

 8 */

 9 */

	/*

	 * a: Don't use for system provided sysrqs, it is handled specially on

	 * sparc and will never arrive.

 a */

 b */

 c */

 d */

 e */

 f */

 g: May be registered for the kernel debugger */

 g */

 h - reserved for help */

 i */

 j */

 j */

 k */

 l */

 l */

 m */

 n */

 o: This will often be registered as 'Off' at init time */

 o */

 p */

 q */

 r */

 s */

 t */

 u */

 v: May be registered for frame buffer console restore */

 v */

 w */

 x: May be registered on mips for TLB dump */

 x: May be registered on ppc/powerpc for xmon */

 x: May be registered on sparc64 for global PMU dump */

 x */

 y: May be registered on sparc64 for global register dump */

 y */

 z */

 A */

 B */

 C */

 D */

 E */

 F */

 G */

 H */

 I */

 J */

 K */

 L */

 M */

 N */

 O */

 P */

 Q */

 R */

 S */

 T */

 U */

 V */

 W */

 X */

 Y */

 Z */

 key2index calculation, -1 on invalid index */

/*

 * get and put functions for the table, exposed to modules.

	/*

	 * Raise the apparent loglevel to maximum so that the sysrq header

	 * is shown to provide the user with positive feedback.  We do not

	 * simply emit this at KERN_EMERG as that would change message

	 * routing in the consumers of /proc/kmsg.

		/*

		 * Should we check for enabled operations (/proc/sysrq-trigger

		 * should not) and is the invoked operation enabled?

 Only print the help msg once per handler */

 Simple translation table for the SysRq keys */

 0x00 - 0x0f */

 0x10 - 0x1f */

 0x20 - 0x2f */

 0x30 - 0x3f */

 0x40 - 0x4f */

 0x50 - 0x5f */

 0x60 - 0x6f */

 reset sequence handling */

 Should be plenty */

 Disable reset until old keys are not released */

		/*

		 * Pressing any key _not_ in reset sequence cancels

		 * the reset sequence.  Also cancelling the timer in

		 * case additional keys were pressed after a reset

		 * has been requested.

		/*

		 * Key release - all keys in the reset sequence need

		 * to be pressed and held for the reset timeout

		 * to hold.

 key press, not autorepeat */

 Reset in case a __weak definition was present */

 Get reset timeout if any. */

 we do not want the assignment to be reordered */

 Simulate press and release of Alt + SysRq */

 One of ALTs is being released */

 either RESERVED (for released) or actual code */

			/*

			 * If nothing else will be pressed we'll need

			 * to re-inject Alt-SysRq keysroke.

		/*

		 * Pretend that sysrq was never pressed at all. This

		 * is needed to properly handle KGDB which will try

		 * to release all keys after exiting debugger. If we

		 * do not clear key bit it KGDB will end up sending

		 * release events for Alt and SysRq, potentially

		 * triggering print screen function.

		/*

		 * See if reset sequence has changed since the last time.

		/*

		 * If we are not suppressing key presses keep track of

		 * keyboard state so we can release keys that have been

		 * pressed before entering SysRq mode.

 Check for reset sequence */

		/*

		 * Pass on release events for keys that was pressed before

		 * entering SysRq mode.

	/*

	 * Do not filter anything if we are in the process of re-injecting

	 * Alt+SysRq combination.

/*

 * We are matching on KEY_LEFTALT instead of KEY_SYSRQ because not all

 * keyboards have SysRq key predefined and so user may add it to keymap

 * later, but we expect all such keyboards to have left alt.

/*

 * not really modular, but the easiest way to keep compat with existing

 * bootargs behaviour is to continue using module_param here.

 CONFIG_INPUT */

	/*

	 * A concurrent __handle_sysrq either got the old op or the new op.

	 * Wait for it to go away before returning, so the code for an old

	 * op is not freed (eg. on module unload) while it is in use.

/*

 * writing 'C' to /proc/sysrq-trigger is like sysrq-C

 CONFIG_PROC_FS */

 SPDX-License-Identifier: GPL-2.0

/*

 * TTY driver for MIPS EJTAG Fast Debug Channels.

 *

 * Copyright (C) 2007-2015 Imagination Technologies Ltd

 Register offsets */

 FDC Access Control and Status Register */

 FDC Configuration Register */

 FDC Status Register */

 FDC Receive Register */

 FDC Transmit Register n (0..15) */

 Register fields */

 Rx Empty */

 Rx Full */

 Tx Empty */

 Tx Full */

 Default channel for the early console */

/*

 * When the IRQ is unavailable, the FDC state must be polled for incoming data

 * and space becoming available in TX FIFO.

/**

 * struct mips_ejtag_fdc_tty_port - Wrapper struct for FDC tty_port.

 * @port:		TTY port data

 * @driver:		TTY driver.

 * @rx_lock:		Lock for rx_buf.

 *			This protects between the hard interrupt and user

 *			context. It's also held during read SWITCH operations.

 * @rx_buf:		Read buffer.

 * @xmit_lock:		Lock for xmit_*, and port.xmit_buf.

 *			This protects between user context and kernel thread.

 *			It is used from chars_in_buffer()/write_room() TTY

 *			callbacks which are used during wait operations, so a

 *			mutex is unsuitable.

 * @xmit_cnt:		Size of xmit buffer contents.

 * @xmit_head:		Head of xmit buffer where data is written.

 * @xmit_tail:		Tail of xmit buffer where data is read.

 * @xmit_empty:		Completion for xmit buffer being empty.

/**

 * struct mips_ejtag_fdc_tty - Driver data for FDC as a whole.

 * @dev:		FDC device (for dev_*() logging).

 * @driver:		TTY driver.

 * @cpu:		CPU number for this FDC.

 * @fdc_name:		FDC name (not for base of channel names).

 * @driver_name:	Base of driver name.

 * @ports:		Per-channel data.

 * @waitqueue:		Wait queue for waiting for TX data, or for space in TX

 *			FIFO.

 * @lock:		Lock to protect FDCFG (interrupt enable).

 * @thread:		KThread for writing out data to FDC.

 * @reg:		FDC registers.

 * @tx_fifo:		TX FIFO size.

 * @xmit_size:		Size of each port's xmit buffer.

 * @xmit_total:		Total number of bytes (from all ports) to transmit.

 * @xmit_next:		Next port number to transmit from (round robin).

 * @xmit_full:		Indicates TX FIFO is full, we're waiting for space.

 * @irq:		IRQ number (negative if no IRQ).

 * @removing:		Indicates the device is being removed and @poll_timer

 *			should not be restarted.

 * @poll_timer:		Timer for polling for interrupt events when @irq < 0.

 * @sysrq_pressed:	Whether the magic sysrq key combination has been

 *			detected. See mips_ejtag_fdc_handle().

 Hardware access */

 Encoding of byte stream in FDC words */

/**

 * struct fdc_word - FDC word encoding some number of bytes of data.

 * @word:		Raw FDC word.

 * @bytes:		Number of bytes encoded by @word.

/*

 * This is a compact encoding which allows every 1 byte, 2 byte, and 3 byte

 * sequence to be encoded in a single word, while allowing the majority of 4

 * byte sequences (including all ASCII and common binary data) to be encoded in

 * a single word too.

 *    _______________________ _____________

 *   |       FDC Word        |             |

 *   |31-24|23-16|15-8 | 7-0 |    Bytes    |

 *   |_____|_____|_____|_____|_____________|

 *   |     |     |     |     |             |

 *   |0x80 |0x80 |0x80 |  WW | WW          |

 *   |0x81 |0x81 |  XX |  WW | WW XX       |

 *   |0x82 |  YY |  XX |  WW | WW XX YY    |

 *   |  ZZ |  YY |  XX |  WW | WW XX YY ZZ |

 *   |_____|_____|_____|_____|_____________|

 *

 * Note that the 4-byte encoding can only be used where none of the other 3

 * encodings match, otherwise it must fall back to the 3 byte encoding.

 ranges >= 1 && sizes[0] >= 1 */

 Choose the appropriate encoding */

 4 byte encoding, but don't match the 1-3 byte encodings */

 Fall back to a 3 byte encoding */

 3 byte encoding */

 2 byte encoding */

 1 byte encoding */

 Console operations */

/**

 * struct mips_ejtag_fdc_console - Wrapper struct for FDC consoles.

 * @cons:		Console object.

 * @tty_drv:		TTY driver associated with this console.

 * @lock:		Lock to protect concurrent access to other fields.

 *			This is raw because it may be used very early.

 * @initialised:	Whether the console is initialised.

 * @regs:		Registers base address for each CPU.

 Low level console write shared by early console and normal console */

 Number of bytes of input data encoded up to each byte in buf */

 First console output on this CPU? */

 Already tried and failed to find FDC on this CPU? */

		/*

		 * Copy the next few characters to a buffer so we can inject

		 * carriage returns before newlines.

 Busy wait until there's space in fifo */

 Initialise an FDC console (early or normal */

 Don't init twice */

 Look for the FDC device */

 TTY RX/TX operations */

/**

 * mips_ejtag_fdc_put_chan() - Write out a block of channel data.

 * @priv:	Pointer to driver private data.

 * @chan:	Channel number.

 *

 * Write a single block of data out to the debug adapter. If the circular buffer

 * is wrapped then only the first block is written.

 *

 * Returns:	The number of bytes that were written.

 Maybe we raced with the console and TX FIFO is full */

 Reset pointers to avoid wraps */

 If we've made more data available, wake up tty */

/**

 * mips_ejtag_fdc_put() - Kernel thread to write out channel data to FDC.

 * @arg:	Driver pointer.

 *

 * This kernel thread runs while @priv->xmit_total != 0, and round robins the

 * channels writing out blocks of buffered data to the FDC TX FIFO.

 Wait for data to actually write */

 Wait for TX FIFO space to write data */

 Enable TX interrupt */

 Find next channel with data to output */

 Round robin */

 Try writing data to the chosen channel */

		/*

		 * If anything was output, move on to the next channel so as not

		 * to starve other channels.

/**

 * mips_ejtag_fdc_handle() - Handle FDC events.

 * @priv:	Pointer to driver private data.

 *

 * Handle FDC events, such as new incoming data which needs draining out of the

 * RX FIFO and feeding into the appropriate TTY ports, and space becoming

 * available in the TX FIFO which would allow more data to be written out.

 Find which channel the next FDC word is destined for */

 Read out the FDC word, decode it, and pass to tty layer */

 Support just Ctrl+C with KGDB channel */

 ^C */

 Support Ctrl+O for console channel */

 ^O */

 CONFIG_MAGIC_SYSRQ */

 Check the port isn't being shut down */

 If TX FIFO no longer full we may be able to write more data */

 Disable TX interrupt */

 Wait the kthread so it can try writing more data */

/**

 * mips_ejtag_fdc_isr() - Interrupt handler.

 * @irq:	IRQ number.

 * @dev_id:	Pointer to driver private data.

 *

 * This is the interrupt handler, used when interrupts are enabled.

 *

 * It simply triggers the common FDC handler code.

 *

 * Returns:	IRQ_HANDLED if an FDC interrupt was pending.

 *		IRQ_NONE otherwise.

	/*

	 * We're not using proper per-cpu IRQs, so we must be careful not to

	 * handle IRQs on CPUs we're not interested in.

	 *

	 * Ideally proper per-cpu IRQ handlers could be used, but that doesn't

	 * fit well with the whole sharing of the main CPU IRQ lines. When we

	 * have something with a GIC that routes the FDC IRQs (i.e. no sharing

	 * between handlers) then support could be added more easily.

 If no FDC interrupt pending, it wasn't for us */

/**

 * mips_ejtag_fdc_tty_timer() - Poll FDC for incoming data.

 * @opaque:	Pointer to driver private data.

 *

 * This is the timer handler for when interrupts are disabled and polling the

 * FDC state is required.

 *

 * It simply triggers the common FDC handler code and arranges for further

 * polling.

 TTY Port operations */

 Allocate the buffer we use for writing data */

 Allocate the buffer we use for reading data */

		/*

		 * There's still data to write out, so wake and wait for the

		 * writer thread to drain the buffer.

 Null the read buffer (timer could still be running!) */

 Free the read buffer */

 Free the write buffer */

 TTY operations */

 Drop any data in the xmit buffer */

	/*

	 * Write to output buffer.

	 *

	 * The reason that we asynchronously write the buffer is because if we

	 * were to write the buffer synchronously then because the channels are

	 * per-CPU the buffer would be written to the channel of whatever CPU

	 * we're running on.

	 *

	 * What we actually want to happen is have all input and output done on

	 * one CPU.

 Work out how many bytes we can write to the xmit buffer */

 Write the actual bytes (may need splitting if it wraps) */

 Xmit buffer no longer empty? */

 Wake up the kthread */

 Report the space in the xmit buffer */

 Report the number of bytes in the xmit buffer */

 Disable interrupts */

 Make each port's xmit FIFO big enough to fill FDC TX FIFO */

 Auto-allocate */

 The xmit buffer starts empty, i.e. completely written */

 Set up the console */

	/*

	 * Bind the writer thread to the right CPU so it can't migrate.

	 * The channels are per-CPU and we want all channel I/O to be on a

	 * single predictable CPU.

 Look for an FDC IRQ */

 Try requesting the IRQ */

		/*

		 * IRQF_SHARED, IRQF_COND_SUSPEND: The FDC IRQ may be shared with

		 * other local interrupts such as the timer which sets

		 * IRQF_TIMER (including IRQF_NO_SUSPEND).

		 *

		 * IRQF_NO_THREAD: The FDC IRQ isn't individually maskable so it

		 * cannot be deferred and handled by a thread on RT kernels. For

		 * this reason any spinlocks used from the ISR are raw.

 IRQ is usable, enable RX interrupt */

 If we didn't get an usable IRQ, poll instead */

		/*

		 * Always attach the timer to the right CPU. The channels are

		 * per-CPU so all polling should be from a single CPU.

 Disable interrupts */

 Disable interrupts */

		/*

		 * IRQ is usable, enable RX interrupt

		 * This must be before kthread is restarted, as kthread may

		 * enable TX interrupt.

 Restart poll timer */

 Restart the kthread */

 Bind it back to the right CPU and set it off */

 read buffer to allow decompaction */

 write buffer to allow compaction */

 Find address, piggy backing off console percpu regs */

 First console output on this CPU? */

 Already tried and failed to find FDC on this CPU? */

 read a character from the read buffer, filling from FDC RX FIFO */

 No more data, try and read another FDC word from RX FIFO */

 Read next word from KGDB channel */

 No data waiting? */

 Read next word */

 Decode into rbuf */

 push an FDC word from write buffer to TX FIFO */

 Construct a word from any data in buffer */

 Relocate any remaining data to beginnning of buffer */

 Busy wait until there's space in fifo */

 flush the whole write buffer to the TX FIFO */

 write a character into the write buffer, writing out if full */

 SPDX-License-Identifier: GPL-2.0

/*

 * Tty port functions

/**

 * tty_port_link_device - link tty and tty_port

 * @port: tty_port of the device

 * @driver: tty_driver for this device

 * @index: index of the tty

 *

 * Provide the tty layer with a link from a tty (specified by @index) to a

 * tty_port (@port). Use this only if neither tty_port_register_device nor

 * tty_port_install is used in the driver. If used, this has to be called before

 * tty_register_driver.

/**

 * tty_port_register_device - register tty device

 * @port: tty_port of the device

 * @driver: tty_driver for this device

 * @index: index of the tty

 * @device: parent if exists, otherwise NULL

 *

 * It is the same as tty_register_device except the provided @port is linked to

 * a concrete tty specified by @index. Use this or tty_port_install (or both).

 * Call tty_port_link_device as a last resort.

/**

 * tty_port_register_device_attr - register tty device

 * @port: tty_port of the device

 * @driver: tty_driver for this device

 * @index: index of the tty

 * @device: parent if exists, otherwise NULL

 * @drvdata: Driver data to be set to device.

 * @attr_grp: Attribute group to be set on device.

 *

 * It is the same as tty_register_device_attr except the provided @port is

 * linked to a concrete tty specified by @index. Use this or tty_port_install

 * (or both). Call tty_port_link_device as a last resort.

/**

 * tty_port_register_device_attr_serdev - register tty or serdev device

 * @port: tty_port of the device

 * @driver: tty_driver for this device

 * @index: index of the tty

 * @device: parent if exists, otherwise NULL

 * @drvdata: driver data for the device

 * @attr_grp: attribute group for the device

 *

 * Register a serdev or tty device depending on if the parent device has any

 * defined serdev clients or not.

 Skip creating cdev if we registered a serdev device */

/**

 * tty_port_register_device_serdev - register tty or serdev device

 * @port: tty_port of the device

 * @driver: tty_driver for this device

 * @index: index of the tty

 * @device: parent if exists, otherwise NULL

 *

 * Register a serdev or tty device depending on if the parent device has any

 * defined serdev clients or not.

/**

 * tty_port_unregister_device - deregister a tty or serdev device

 * @port: tty_port of the device

 * @driver: tty_driver for this device

 * @index: index of the tty

 *

 * If a tty or serdev device is registered with a call to

 * tty_port_register_device_serdev() then this function must be called when

 * the device is gone.

 We may sleep in get_zeroed_page() */

/**

 * tty_port_destroy -- destroy inited port

 * @port: tty port to be destroyed

 *

 * When a port was initialized using tty_port_init, one has to destroy the

 * port by this function. Either indirectly by using tty_port refcounting

 * (tty_port_put) or directly if refcounting is not used.

 check if last port ref was dropped before tty release */

/**

 *	tty_port_tty_get	-	get a tty reference

 *	@port: tty port

 *

 *	Return a refcount protected tty instance or NULL if the port is not

 *	associated with a tty (eg due to close or hangup)

/**

 *	tty_port_tty_set	-	set the tty of a port

 *	@port: tty port

 *	@tty: the tty

 *

 *	Associate the port and tty pair. Manages any internal refcounts.

 *	Pass NULL to deassociate a port

		/*

		 * Drop DTR/RTS if HUPCL is set. This causes any attached

		 * modem to hang up the line.

/**

 *	tty_port_hangup		-	hangup helper

 *	@port: tty port

 *

 *	Perform port level tty hangup flag and count changes. Drop the tty

 *	reference.

 *

 *	Caller holds tty lock.

/**

 * tty_port_tty_hangup - helper to hang up a tty

 *

 * @port: tty port

 * @check_clocal: hang only ttys with CLOCAL unset?

/**

 * tty_port_tty_wakeup - helper to wake up a tty

 *

 * @port: tty port

/**

 *	tty_port_carrier_raised	-	carrier raised check

 *	@port: tty port

 *

 *	Wrapper for the carrier detect logic. For the moment this is used

 *	to hide some internal details. This will eventually become entirely

 *	internal to the tty port.

/**

 *	tty_port_raise_dtr_rts	-	Raise DTR/RTS

 *	@port: tty port

 *

 *	Wrapper for the DTR/RTS raise logic. For the moment this is used

 *	to hide some internal details. This will eventually become entirely

 *	internal to the tty port.

/**

 *	tty_port_lower_dtr_rts	-	Lower DTR/RTS

 *	@port: tty port

 *

 *	Wrapper for the DTR/RTS raise logic. For the moment this is used

 *	to hide some internal details. This will eventually become entirely

 *	internal to the tty port.

/**

 *	tty_port_block_til_ready	-	Waiting logic for tty open

 *	@port: the tty port being opened

 *	@tty: the tty device being bound

 *	@filp: the file pointer of the opener or NULL

 *

 *	Implement the core POSIX/SuS tty behaviour when opening a tty device.

 *	Handles:

 *		- hangup (both before and during)

 *		- non blocking open

 *		- rts/dtr/dcd

 *		- signals

 *		- port flags and counts

 *

 *	The passed tty_port must implement the carrier_raised method if it can

 *	do carrier detect and the dtr_rts method if it supports software

 *	management of these lines. Note that the dtr/rts raise is done each

 *	iteration as a hangup may have previously dropped them while we wait.

 *

 *	Caller holds tty lock.

 *

 *      NB: May drop and reacquire tty lock when blocking, so tty and tty_port

 *      may have changed state (eg., may have been hung up).

	/* if non-blocking mode is set we can pass directly to open unless

	 * the port has just hung up or is in another error state.

 Indicate we are open */

	/* Block waiting until we can proceed. We may need to wait for the

	 * carrier, but we must also wait for any close that is in progress

	 * before the next open may complete.

 The port lock protects the port counts */

 Indicate we are open */

		/* Check for a hangup or uninitialised port.

		 * Return accordingly.

		/*

		 * Probe the carrier. For devices with no carrier detect

		 * tty_port_carrier_raised will always return true.

		 * Never ask drivers if CLOCAL is set, this causes troubles

		 * on some hardware.

	/* Update counts. A parallel hangup will have set count to zero and

	 * we must not mess that up further.

 Caller holds tty lock. */

 Don't block on a stalled port, just pull the chain */

 Flush the ldisc buffering */

 Report to caller this is the last port reference */

 Caller holds tty lock */

/*

 * tty_port_close

 *

 * Caller holds tty lock

/**

 * tty_port_install - generic tty->ops->install handler

 * @port: tty_port of the device

 * @driver: tty_driver for this device

 * @tty: tty to be installed

 *

 * It is the same as tty_standard_install except the provided @port is linked

 * to a concrete tty specified by @tty. Use this or tty_port_register_device

 * (or both). Call tty_port_link_device as a last resort.

/*

 * tty_port_open

 *

 * Caller holds tty lock.

 *

 * NB: may drop and reacquire tty lock (in tty_port_block_til_ready()) so

 * tty and tty_port may have changed state (eg., may be hung up now)

	/*

	 * Do the device-specific open only if the hardware isn't

	 * already initialized. Serialize open and shutdown using the

	 * port mutex.

 SPDX-License-Identifier: GPL-1.0+

/* generic HDLC line discipline for Linux

 *

 * Written by Paul Fulghum paulkf@microgate.com

 * for Microgate Corporation

 *

 * Microgate and SyncLink are registered trademarks of Microgate Corporation

 *

 * Adapted from ppp.c, written by Michael Callahan <callahan@maths.ox.ac.uk>,

 *	Al Longyear <longyear@netcom.com>,

 *	Paul Mackerras <Paul.Mackerras@cs.anu.edu.au>

 *

 * Original release 01/11/99

 *

 * This module implements the tty line discipline N_HDLC for use with

 * tty device drivers that support bit-synchronous HDLC communications.

 *

 * All HDLC data is frame oriented which means:

 *

 * 1. tty write calls represent one complete transmit frame of data

 *    The device driver should accept the complete frame or none of

 *    the frame (busy) in the write method. Each write call should have

 *    a byte count in the range of 2-65535 bytes (2 is min HDLC frame

 *    with 1 addr byte and 1 ctrl byte). The max byte count of 65535

 *    should include any crc bytes required. For example, when using

 *    CCITT CRC32, 4 crc bytes are required, so the maximum size frame

 *    the application may transmit is limited to 65531 bytes. For CCITT

 *    CRC16, the maximum application frame size would be 65533.

 *

 *

 * 2. receive callbacks from the device driver represents

 *    one received frame. The device driver should bypass

 *    the tty flip buffer and call the line discipline receive

 *    callback directly to avoid fragmenting or concatenating

 *    multiple frames into a single receive callback.

 *

 *    The HDLC line discipline queues the receive frames in separate

 *    buffers so complete receive frames can be returned by the

 *    tty read calls.

 *

 * 3. tty read calls returns an entire frame of data or nothing.

 *

 * 4. all send and receive data is considered raw. No processing

 *    or translation is performed by the line discipline, regardless

 *    of the tty flags

 *

 * 5. When line discipline is queried for the amount of receive

 *    data available (FIOC), 0 is returned if no data available,

 *    otherwise the count of the next available frame is returned.

 *    (instead of the sum of all received frame counts).

 *

 * These conventions allow the standard tty programming interface

 * to be used for synchronous HDLC applications when used with

 * this line discipline (or another line discipline that is frame

 * oriented such as N_PPP).

 *

 * The SyncLink driver (synclink.c) implements both asynchronous

 * (using standard line discipline N_TTY) and synchronous HDLC

 * (using N_HDLC) communications, with the latter using the above

 * conventions.

 *

 * This implementation is very basic and does not maintain

 * any statistics. The main point is to enforce the raw data

 * and frame orientation of HDLC communications.

 *

 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED

 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES

 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE

 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,

 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES

 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR

 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,

 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED

 * OF THE POSSIBILITY OF SUCH DAMAGE.

 used in new tty drivers */

 used in new tty drivers */

/*

 * Buffers for individual HDLC frames

/**

 * struct n_hdlc - per device instance data structure

 * @magic: magic value for structure

 * @tbusy: reentrancy flag for tx wakeup code

 * @woke_up: tx wakeup needs to be run again as it was called while @tbusy

 * @tx_buf_list: list of pending transmit frame buffers

 * @rx_buf_list: list of received frame buffers

 * @tx_free_buf_list: list unused transmit frame buffers

 * @rx_free_buf_list: list unused received frame buffers

/*

 * HDLC buffer list manipulation functions

 Local functions */

 max frame size for memory allocations */

/**

 * n_hdlc_tty_close - line discipline close

 * @tty: pointer to tty info structure

 *

 * Called when the line discipline is changed to something

 * else, the tty is closed, or the tty detects a hangup.

 Ensure that the n_hdlcd process is not hanging on select()/poll() */

 end of n_hdlc_tty_close() */

/**

 * n_hdlc_tty_open - called when line discipline changed to n_hdlc

 * @tty: pointer to tty info structure

 *

 * Returns 0 if success, otherwise error code

 There should not be an existing table for this slot. */

 change tty_io write() to not split large writes into 8K chunks */

 flush receive data from driver */

 end of n_tty_hdlc_open() */

/**

 * n_hdlc_send_frames - send frames on pending send buffer list

 * @n_hdlc: pointer to ldisc instance data

 * @tty: pointer to tty instance data

 *

 * Send frames on pending send buffer list until the driver does not accept a

 * frame (busy) this function is called after adding a frame to the send buffer

 * list and by the tty wakeup callback.

 Send the next block of data to device */

 rollback was possible and has been done */

 if transmit error, throw frame away by */

 pretending it was accepted by driver */

 free current transmit buffer */

 wait up sleeping writers */

 get next pending transmit buffer */

			/*

			 * the buffer was not accepted by driver,

			 * return it back into tx queue

 Clear the re-entry flag */

 end of n_hdlc_send_frames() */

/**

 * n_hdlc_tty_wakeup - Callback for transmit wakeup

 * @tty: pointer to associated tty instance data

 *

 * Called when low level device driver can accept more send data.

 end of n_hdlc_tty_wakeup() */

/**

 * n_hdlc_tty_receive - Called by tty driver when receive data is available

 * @tty: pointer to tty instance data

 * @data: pointer to received data

 * @flags: pointer to flags for data

 * @count: count of received data in bytes

 *

 * Called by tty low level driver when receive data is available. Data is

 * interpreted as one HDLC frame.

 verify line is using HDLC discipline */

 get a free HDLC buffer */

		/*

		 * no buffers in free list, attempt to allocate another rx

		 * buffer unless the maximum count has been reached

 copy received data to HDLC buffer */

 add HDLC buffer to list of received frames */

 wake up any blocked reads and perform async signalling */

 end of n_hdlc_tty_receive() */

/**

 * n_hdlc_tty_read - Called to retrieve one frame of data (if available)

 * @tty: pointer to tty instance data

 * @file: pointer to open file object

 * @kbuf: pointer to returned data buffer

 * @nr: size of returned data buffer

 * @cookie: stored rbuf from previous run

 * @offset: offset into the data buffer

 *

 * Returns the number of bytes returned or error code.

 Is this a repeated call for an rbuf we already found earlier? */

 no data */

 Have we used it up entirely? */

 More data to go, but can't copy any more? EOVERFLOW */

 Copy as much data as possible */

 If we still have data left, we leave the rbuf in the cookie */

 end of n_hdlc_tty_read() */

/**

 * n_hdlc_tty_write - write a single frame of data to device

 * @tty: pointer to associated tty device instance data

 * @file: pointer to file object data

 * @data: pointer to transmit data (one frame)

 * @count: size of transmit frame in bytes

 *

 * Returns the number of bytes written (or error code).

 verify frame size */

 Retrieve the user's buffer */

 Send the data */

 end of n_hdlc_tty_write() */

/**

 * n_hdlc_tty_ioctl - process IOCTL system call for the tty device.

 * @tty: pointer to tty instance data

 * @file: pointer to open file object for device

 * @cmd: IOCTL command code

 * @arg: argument for IOCTL call (cmd dependent)

 *

 * Returns command dependent result.

 Verify the status of the device */

 report count of read data available */

 in next available frame (if any) */

 get the pending tx byte count in the driver */

 add size of next output frame in queue */

 to default */

 end of n_hdlc_tty_ioctl() */

/**

 * n_hdlc_tty_poll - TTY callback for poll system call

 * @tty: pointer to tty instance data

 * @filp: pointer to open file object for device

 * @wait: wait queue for operations

 *

 * Determine which operations (read/write) will not block and return info

 * to caller.

 * Returns a bit mask containing info on which ops will not block.

	/*

	 * queue the current process into any wait queue that may awaken in the

	 * future (read and write)

 set bits for operations that won't block */

 readable */

 writable */

 end of n_hdlc_tty_poll() */

/**

 * n_hdlc_alloc - allocate an n_hdlc instance data structure

 *

 * Returns a pointer to newly created structure if success, otherwise %NULL

 Initialize the control block */

 end of n_hdlc_alloc() */

/**

 * n_hdlc_buf_return - put the HDLC buffer after the head of the specified list

 * @buf_list: pointer to the buffer list

 * @buf: pointer to the buffer

/**

 * n_hdlc_buf_put - add specified HDLC buffer to tail of specified list

 * @buf_list: pointer to buffer list

 * @buf: pointer to buffer

 end of n_hdlc_buf_put() */

/**

 * n_hdlc_buf_get - remove and return an HDLC buffer from list

 * @buf_list: pointer to HDLC buffer list

 *

 * Remove and return an HDLC buffer from the head of the specified HDLC buffer

 * list.

 * Returns a pointer to HDLC buffer if available, otherwise %NULL.

 end of n_hdlc_buf_get() */

 range check maxframe arg */

 end of init_module() */

 SPDX-License-Identifier: GPL-2.0

/*

 * Ldisc rw semaphore

 *

 * The ldisc semaphore is semantically a rw_semaphore but which enforces

 * an alternate policy, namely:

 *   1) Supports lock wait timeouts

 *   2) Write waiter has priority

 *   3) Downgrading is not supported

 *

 * Implementation notes:

 *   1) Upper half of semaphore count is a wait count (differs from rwsem

 *	in that rwsem normalizes the upper half to the wait bias)

 *   2) Lacks overflow checking

 *

 * The generic counting was copied and modified from include/asm-generic/rwsem.h

 * by Paul Mackerras <paulus@samba.org>.

 *

 * The scheduling policy was copied and modified from lib/rwsem.c

 * Written by David Howells (dhowells@redhat.com).

 *

 * This implementation incorporates the write lock stealing work of

 * Michel Lespinasse <walken@google.com>.

 *

 * Copyright (C) 2013 Peter Hurley <peter@hurleysoftware.com>

/*

 * Initialize an ldsem:

	/*

	 * Make sure we are not reinitializing a held semaphore:

	/*

	 * Try to grant read locks to all readers on the read wait list.

	 * Note the 'active part' of the count is incremented by

	 * the number of readers before waking any processes up.

	/*

	 * Only wake this writer if the active part of the count can be

	 * transitioned from 0 -> 1

/*

 * handle the lock release when processes blocked on it that can now run

 * - if we come here from up_xxxx(), then:

 *   - the 'active part' of count (&0x0000ffff) reached 0 (but may have changed)

 *   - the 'waiting part' of count (&0xffff0000) is -ve (and will still be so)

 * - the spinlock must be held by the caller

 * - woken process blocks are discarded from the list after having task zeroed

/*

 * wait for the read lock to be granted

 set up my own style of waitqueue */

	/*

	 * Try to reverse the lock attempt but if the count has changed

	 * so that reversing fails, check if there are are no waiters,

	 * and early-out if not

 if there are no active locks, wake the new lock owner(s) */

 wait to be given the lock */

		/*

		 * Lock timed out but check if this task was just

		 * granted lock ownership - if so, pretend there

		 * was no timeout; otherwise, cleanup lock wait.

/*

 * wait for the write lock to be granted

 set up my own style of waitqueue */

	/*

	 * Try to reverse the lock attempt but if the count has changed

	 * so that reversing fails, check if the lock is now owned,

	 * and early-out if so.

	/*

	 * In case of timeout, wake up every reader who gave the right of way

	 * to writer. Prevent separation readers into two groups:

	 * one that helds semaphore and another that sleeps.

	 * (in case of no contention with a writer)

 lock wait may have timed out */

/*

 * lock for reading -- returns 1 if successful, 0 if timed out

/*

 * trylock for reading -- returns 1 if successful, 0 if contention

/*

 * lock for writing -- returns 1 if successful, 0 if timed out

/*

 * trylock for writing -- returns 1 if successful, 0 if contention

/*

 * release a read lock

/*

 * release a write lock

 SPDX-License-Identifier: GPL-2.0

/* ePAPR hypervisor byte channel device driver

 *

 * Copyright 2009-2011 Freescale Semiconductor, Inc.

 *

 * Author: Timur Tabi <timur@freescale.com>

 *

 * This driver support three distinct interfaces, all of which are related to

 * ePAPR hypervisor byte channels.

 *

 * 1) An early-console (udbg) driver.  This provides early console output

 * through a byte channel.  The byte channel handle must be specified in a

 * Kconfig option.

 *

 * 2) A normal console driver.  Output is sent to the byte channel designated

 * for stdout in the device tree.  The console driver is for handling kernel

 * printk calls.

 *

 * 3) A tty driver, which is used to handle user-space input and output.  The

 * byte channel used for the console is designated as the default tty.

 The size of the transmit circular buffer.  This must be a power of two. */

 Per-byte channel private data */

 lock for transmit buffer */

 transmit circular buffer */

 circular buffer head */

 circular buffer tail */

 true == TX interrupt is enabled */

 Array of byte channel objects */

 Byte channel handle for stdout (and stdin), taken from device tree */

 Virtual IRQ for the byte channel handle for stdin, taken from device tree */

*************************** SUPPORT FUNCTIONS ****************************/

/*

 * Enable the transmit interrupt

 *

 * Unlike a serial device, byte channels have no mechanism for disabling their

 * own receive or transmit interrupts.  To emulate that feature, we toggle

 * the IRQ in the kernel.

 *

 * We cannot just blindly call enable_irq() or disable_irq(), because these

 * calls are reference counted.  This means that we cannot call enable_irq()

 * if interrupts are already enabled.  This can happen in two situations:

 *

 * 1. The tty layer makes two back-to-back calls to ehv_bc_tty_write()

 * 2. A transmit interrupt occurs while executing ehv_bc_tx_dequeue()

 *

 * To work around this, we keep a flag to tell us if the IRQ is enabled or not.

/*

 * find the byte channel handle to use for the console

 *

 * The byte channel to be used for the console is specified via a "stdout"

 * property in the /chosen node.

	/* We don't care what the aliased node is actually called.  We only

	 * care if it's compatible with "epapr,hv-byte-channel", because that

	 * indicates that it's a byte channel node.

	/*

	 * The 'hv-handle' property contains the handle for this byte channel.

************************** EARLY CONSOLE DRIVER ***************************/

/*

 * send a byte to a byte channel, wait if necessary

 *

 * This function sends a byte to a byte channel, and it waits and

 * retries if the byte channel is full.  It returns if the character

 * has been sent, or if some error has occurred.

 *

/*

 * The udbg subsystem calls this function to display a single character.

 * We convert CR to a CR/LF.

/*

 * early console initialization

 *

 * PowerPC kernels support an early printk console, also known as udbg.

 * This function must be called via the ppc_md.init_early function pointer.

 * At this point, the device tree has been unflattened, so we can obtain the

 * byte channel handle for stdout.

 *

 * We only support displaying of characters (putc).  We do not support

 * keyboard input.

 Verify the byte channel handle */

***************************** CONSOLE DRIVER ******************************/

/*

 * Byte channel console sending worker function.

 *

 * For consoles, if the output buffer is full, we should just spin until it

 * clears.

/*

 * write a string to the console

 *

 * This function gets called to write a string from the kernel, typically from

 * a printk().  This function spins until all data is written.

 *

 * We copy the data to a temporary buffer because we need to insert a \r in

 * front of every \n.  It's more efficient to copy the data to the buffer than

 * it is to make multiple hcalls for each character or each newline.

/*

 * When /dev/console is opened, the kernel iterates the console list looking

 * for one with ->device and then calls that method. On success, it expects

 * the passed-in int* to contain the minor number to use.

/*

 * Console initialization

 *

 * This is the first function that is called after the device tree is

 * available, so here is where we determine the byte channel handle and IRQ for

 * stdout/stdin, even though that information is used by the tty and character

 * drivers.

	/* Print a friendly warning if the user chose the wrong byte channel

	 * handle for udbg.

	/* add_preferred_console() must be called before register_console(),

	   otherwise it won't work.  However, we don't want to enumerate all the

******************************* TTY DRIVER ********************************/

/*

 * byte channel receive interrupt handler

 *

 * This ISR is called whenever data is available on a byte channel.

	/* Find out how much data needs to be read, and then ask the TTY layer

	 * if it can handle that much.  We want to ensure that every byte we

	 * read from the byte channel will be accepted by the TTY layer.

	/* 'count' is the maximum amount of data the TTY layer can accept at

	 * this time.  However, during testing, I was never able to get 'count'

	 * to be less than 'rx_count'.  I'm not sure whether I'm calling it

	 * correctly.

		/* Read some data from the byte channel.  This function will

		 * never return more than EV_BYTE_CHANNEL_MAX_BYTES bytes.

		/* 'len' is now the amount of data that's been received. 'len'

		 * can't be zero, and most likely it's equal to one.

 Pass the received data to the tty layer. */

		/* 'ret' is the number of bytes that the TTY layer accepted.

		 * If it's not equal to 'len', then it means the buffer is

		 * full, which should never happen.  If it does happen, we can

		 * exit gracefully, but we drop the last 'len - ret' characters

		 * that we read from the byte channel.

 Tell the tty layer that we're done. */

/*

 * dequeue the transmit buffer to the hypervisor

 *

 * This function, which can be called in interrupt context, dequeues as much

 * data as possible from the transmit buffer to the byte channel.

 'len' is valid only if the return code is 0 or EV_EAGAIN */

		/*

		 * If we haven't emptied the buffer, then enable the TX IRQ.

		 * We'll get an interrupt when there's more room in the

		 * hypervisor's output buffer.

/*

 * byte channel transmit interrupt handler

 *

 * This ISR is called whenever space becomes available for transmitting

 * characters on a byte channel.

/*

 * This function is called when the tty layer has data for us send.  We store

 * the data first in a circular buffer, and then dequeue as much of that data

 * as possible.

 *

 * We don't need to worry about whether there is enough room in the buffer for

 * all the data.  The purpose of ehv_bc_tty_write_room() is to tell the tty

 * layer how much data it can safely send to us.  We guarantee that

 * ehv_bc_tty_write_room() will never lie, so the tty layer will never send us

 * too much data.

/*

 * This function can be called multiple times for a given tty_struct, which is

 * why we initialize bc->ttys in ehv_bc_tty_port_activate() instead.

 *

 * The tty layer will still call this function even if the device was not

 * registered (i.e. tty_register_device() was not called).  This happens

 * because tty_register_device() is optional and some legacy drivers don't

 * use it.  So we need to check for that.

/*

 * Amazingly, if ehv_bc_tty_open() returns an error code, the tty layer will

 * still call this function to close the tty device.  So we can't assume that

 * the tty port has been initialized.

/*

 * Return the amount of space in the output buffer

 *

 * This is actually a contract between the driver and the tty layer outlining

 * how much write room the driver can guarantee will be sent OR BUFFERED.  This

 * driver MUST honor the return value.

/*

 * Stop sending data to the tty layer

 *

 * This function is called when the tty layer's input buffers are getting full,

 * so the driver should stop sending it data.  The easiest way to do this is to

 * disable the RX IRQ, which will prevent ehv_bc_tty_rx_isr() from being

 * called.

 *

 * The hypervisor will continue to queue up any incoming data.  If there is any

 * data in the queue when the RX interrupt is enabled, we'll immediately get an

 * RX interrupt.

/*

 * Resume sending data to the tty layer

 *

 * This function is called after previously calling ehv_bc_tty_throttle().  The

 * tty layer's input buffers now have more room, so the driver can resume

 * sending it data.

	/* If there is any data in the queue when the RX interrupt is enabled,

	 * we'll immediately get an RX interrupt.

/*

 * TTY driver operations

 *

 * If we could ask the hypervisor how much data is still in the TX buffer, or

 * at least how big the TX buffers are, then we could implement the

 * .wait_until_sent and .chars_in_buffer functions.

/*

 * initialize the TTY port

 *

 * This function will only be called once, no matter how many times

 * ehv_bc_tty_open() is called.  That's why we register the ISR here, and also

 * why we initialize tty_struct-related variables here.

 request_irq also enables the IRQ */

	/* The TX IRQ is enabled only when we can't write all the data to the

	 * byte channel at once, so by default it's disabled.

	/* We already told the console layer that the index for the console

	 * device is zero, so we need to make sure that we use that index when

	 * we probe the console byte channel node.

/**

 * ehv_bc_init - ePAPR hypervisor byte channel driver initialization

 *

 * This function is called when this driver is loaded.

 Number of elements in bcs[] */

 Count the number of byte channels */

	/* The array index of an element in bcs[] is the same as the tty index

	 * for that element.  If you know the address of an element in the

	 * array, then you can use pointer math (e.g. "bc - bcs") to get its

	 * tty index.

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 1991, 1992, 1993, 1994  Linus Torvalds

 *

 * Modified by Fred N. van Kempen, 01/29/93, to add line disciplines

 * which can be dynamically activated and de-activated by the line

 * discipline handling modules (like SLIP).

/*

 * Internal flag options for termios setting behavior

/**

 *	tty_chars_in_buffer	-	characters pending

 *	@tty: terminal

 *

 *	Return the number of bytes of data in the device private

 *	output queue. If no private method is supplied there is assumed

 *	to be no queue on the device.

/**

 *	tty_write_room		-	write queue space

 *	@tty: terminal

 *

 *	Return the number of bytes that can be queued to this device

 *	at the present time. The result should be treated as a guarantee

 *	and the driver cannot offer a value it later shrinks by more than

 *	the number of bytes written. If no method is provided 2K is always

 *	returned and data may be lost as there will be no flow control.

/**

 *	tty_driver_flush_buffer	-	discard internal buffer

 *	@tty: terminal

 *

 *	Discard the internal output buffer for this device. If no method

 *	is provided then either the buffer cannot be hardware flushed or

 *	there is no buffer driver side.

/**

 *	tty_unthrottle		-	flow control

 *	@tty: terminal

 *

 *	Indicate that a tty may continue transmitting data down the stack.

 *	Takes the termios rwsem to protect against parallel throttle/unthrottle

 *	and also to ensure the driver can consistently reference its own

 *	termios data at this point when implementing software flow control.

 *

 *	Drivers should however remember that the stack can issue a throttle,

 *	then change flow control method, then unthrottle.

/**

 *	tty_throttle_safe	-	flow control

 *	@tty: terminal

 *

 *	Indicate that a tty should stop transmitting data down the stack.

 *	tty_throttle_safe will only attempt throttle if tty->flow_change is

 *	TTY_THROTTLE_SAFE. Prevents an accidental throttle due to race

 *	conditions when throttling is conditional on factors evaluated prior to

 *	throttling.

 *

 *	Returns 0 if tty is throttled (or was already throttled)

/**

 *	tty_unthrottle_safe	-	flow control

 *	@tty: terminal

 *

 *	Similar to tty_unthrottle() but will only attempt unthrottle

 *	if tty->flow_change is TTY_UNTHROTTLE_SAFE. Prevents an accidental

 *	unthrottle due to race conditions when unthrottling is conditional

 *	on factors evaluated prior to unthrottling.

 *

 *	Returns 0 if tty is unthrottled (or was already unthrottled)

/**

 *	tty_wait_until_sent	-	wait for I/O to finish

 *	@tty: tty we are waiting for

 *	@timeout: how long we will wait

 *

 *	Wait for characters pending in a tty driver to hit the wire, or

 *	for a timeout to occur (eg due to flow control)

 *

 *	Locking: none

/*

 *		Termios Helper Methods

 FIXME: What should we do for i/ospeed */

/**

 *	tty_termios_copy_hw	-	copy hardware settings

 *	@new: New termios

 *	@old: Old termios

 *

 *	Propagate the hardware specific terminal setting bits from

 *	the old termios structure to the new one. This is used in cases

 *	where the hardware does not support reconfiguration or as a helper

 *	in some cases where only minimal reconfiguration is supported

	/* The bits a dumb device handles in software. Smart devices need

/**

 *	tty_termios_hw_change	-	check for setting change

 *	@a: termios

 *	@b: termios to compare

 *

 *	Check if any of the bits that affect a dumb device have changed

 *	between the two termios structures, or a speed change is needed.

/**

 *	tty_get_char_size	-	get size of a character

 *	@cflag: termios cflag value

 *

 *	Get the size (in bits) of a character depending on @cflag's %CSIZE

 *	setting.

/**

 *	tty_get_frame_size	-	get size of a frame

 *	@cflag: termios cflag value

 *

 *	Get the size (in bits) of a frame depending on @cflag's %CSIZE, %CSTOPB,

 *	and %PARENB setting. The result is a sum of character size, start and

 *	stop bits -- one bit each -- second stop bit (if set), and parity bit

 *	(if set).

/**

 *	tty_set_termios		-	update termios values

 *	@tty: tty to update

 *	@new_termios: desired new value

 *

 *	Perform updates to the termios values set on this terminal.

 *	A master pty's termios should never be set.

 *

 *	Locking: termios_rwsem

	/*

	 *	Perform the actual termios internal changes under lock.

	/* FIXME: we need to decide on some locking/ordering semantics

/**

 *	set_termios		-	set termios values for a tty

 *	@tty: terminal device

 *	@arg: user data

 *	@opt: option information

 *

 *	Helper function to prepare termios data and run necessary other

 *	functions before using tty_set_termios to do the actual changes.

 *

 *	Locking:

 *		Called functions take ldisc and termios_rwsem locks

	/* If old style Bfoo values are used then load c_ispeed/c_ospeed

	/* FIXME: Arguably if tmp_termios == tty->termios AND the

	   actual requested termios was not tmp_termios then we may

	   want to return an error as no user requested change has

/*

 * These are deprecated, but there is limited support..

 *

 * The "sg_flags" translation is a joke..

 cbreak */

 raw */

 echo */

 crmod */

 cbreak */

 echo */

 crmod */

 raw */

/**

 *	set_sgttyb		-	set legacy terminal values

 *	@tty: tty structure

 *	@sgttyb: pointer to old style terminal structure

 *

 *	Updates a terminal from the legacy BSD style terminal information

 *	structure.

 *

 *	Locking: termios_rwsem

 Try and encode into Bfoo format */

 what is brkc anyway? */

 what is brkc anyway? */

 what is dsuspc anyway? */

 what is flushc anyway? */

 what is dsuspc anyway? */

 what is flushc anyway? */

/**

 *	tty_change_softcar	-	carrier change ioctl helper

 *	@tty: tty to update

 *	@arg: enable/disable CLOCAL

 *

 *	Perform a change to the CLOCAL state and call into the driver

 *	layer to make it visible. All done with the termios rwsem

/**

 *	tty_mode_ioctl		-	mode related ioctls

 *	@tty: tty for the ioctl

 *	@cmd: command

 *	@arg: ioctl argument

 *

 *	Perform non line discipline specific mode control ioctls. This

 *	is designed to be called by line disciplines to ensure they provide

 *	consistent mode setting.

 Caller guarantees ldisc reference is held */

 Try the mode commands */

 SPDX-License-Identifier: GPL-1.0+

/*

 * Device driver for Microgate SyncLink GT serial adapters.

 *

 * written by Paul Fulghum for Microgate Corporation

 * paulkf@microgate.com

 *

 * Microgate and SyncLink are trademarks of Microgate Corporation

 *

 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED

 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES

 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE

 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,

 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES

 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR

 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,

 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED

 * OF THE POSSIBILITY OF SUCH DAMAGE.

/*

 * DEBUG OUTPUT DEFINITIONS

 *

 * uncomment lines below to enable specific types of debug output

 *

 * DBGINFO   information - most verbose output

 * DBGERR    serious errors

 * DBGBH     bottom half service routine debugging

 * DBGISR    interrupt service routine debugging

 * DBGDATA   output receive and transmit data

 * DBGTBUF   output transmit DMA buffers and registers

 * DBGRBUF   output receive DMA buffers and registers

#define DBGTBUF(info) dump_tbufs(info)*/

#define DBGRBUF(info) dump_rbufs(info)*/

/*

 * module identification

 terminate list */

/*

 * module configuration and status

/*

 * tty support and callbacks

/*

 * generic HDLC support

/*

 * device specific structures, macros and functions

/*

 * conditional wait facility

/*

 * DMA buffer descriptor and access macros

 physical address of data buffer */

 physical address of next descriptor */

 driver book keeping */

 virtual  address of data buffer */

 physical address of this descriptor */

/*

 * device instance data structure

 General purpose pointer (used by SPPP) */

 device list link */

 count of ports on adapter */

 adapter instance number */

 port instance number */

 array of pointers to port contexts on this adapter */

 tty line instance number */

 xon/xoff character */

 spinlock for synchronizing with ISR */

 true if IRQ requested */

 for diagnostics use */

 device configuration */

 memory mapped registers address */

 communications parameters */

 as set by device config */

 device status */

 serial signal states */

 initialization error */

 check counts to prevent */

 too many IRQs if a signal */

 is floating */

 virtual address of DMA buffer lists */

 physical address of buffer descriptors */

 SPPP/Cisco HDLC device parts */

 global status */

 JTAG control */

 GPIO direction */

 GPIO interrupt enable */

 GPIO value */

 GPIO interrupt status */

 tx data */

 rx data */

 tx control */

 tx idle */

 tx preamble */

 rx control */

 V.24 control */

 clock control */

 baud divisor */

 serial control */

 serial status */

 rx DMA control/status */

 tx DMA control/status */

 rx DMA descriptor address */

 tx DMA descriptor address */

 extended sync pattern */

 extended control */

 HDLC */

 HDLC */

 async */

/*

 * ioctl handlers

/*

 * driver functions

/*

 * DEBUG OUTPUT CODE

/*

 * line discipline callback wrappers

 *

 * The wrappers maintain line discipline references

 * while calling into the line discipline.

 *

 * ldisc_receive_buf  - pass receive data to line discipline

 tty callbacks */

 1st open on this device, init hardware */

 tty layer will release tty struct */

 Handle transition to B0 status */

 Handle transition away from B0 status */

 Handle turning off CRTSCTS */

	/*

	 * use worst case speed of 1200bps to calculate transmit timeout

	 * based on data in buffers (tbuf_bytes) and FIFO (128 bytes)

 send accumulated data from send_char() */

	/* Set check interval to 1/5 of estimated time to

	 * send a character, and make it at least 1. The check

	 * interval should also be less than the timeout.

	 * Note: use tight timings here to satisfy the NIST-PCTS.

/*

 * throttle (stop) transmitter

/*

 * release (start) transmitter

/*

 * Service an IOCTL request

 *

 * Arguments

 *

 * 	tty	pointer to tty instance data

 * 	cmd	IOCTL command code

 * 	arg	command argument/context

 *

 * Return 0 if success, otherwise error code

 kernel counter temps */

/*

 * support for 32 bit ioctl calls on 64 bit systems

 ifdef CONFIG_COMPAT */

/*

 * proc fs support

 output current serial signal states */

 Append serial signal status to end */

/* Called to print information about devices

/*

 * return count of bytes in transmit buffer

/*

 * signal remote device to throttle send data (our receive data)

/*

 * signal remote device to stop throttling send data (our receive data)

/*

 * set or clear transmit break condition

 * break_state	-1=set break condition, 0=clear

/**

 * hdlcdev_attach - called by generic HDLC layer when protocol selected (PPP, frame relay, etc.)

 * @dev:      pointer to network device structure

 * @encoding: serial encoding setting

 * @parity:   FCS setting

 *

 * Set encoding and frame check sequence (FCS) options.

 *

 * Return: 0 if success, otherwise error code

 return error if TTY interface open */

 if network interface up, reprogram hardware */

/**

 * hdlcdev_xmit - called by generic HDLC layer to send a frame

 * @skb: socket buffer containing HDLC frame

 * @dev: pointer to network device structure

 stop sending until this frame completes */

 update network statistics */

 save start time for transmit timeout detection */

 done with socket buffer, so free it */

/**

 * hdlcdev_open - called by network layer when interface enabled

 * @dev: pointer to network device structure

 *

 * Claim resources and initialize hardware.

 *

 * Return: 0 if success, otherwise error code

 generic HDLC layer open processing */

 arbitrate between network and tty opens */

 claim resources and init adapter */

 assert RTS and DTR, apply hardware settings */

 enable network layer transmit */

 inform generic HDLC layer of current DCD status */

/**

 * hdlcdev_close - called by network layer when interface is disabled

 * @dev:  pointer to network device structure

 *

 * Shutdown hardware and release resources.

 *

 * Return: 0 if success, otherwise error code

 shutdown adapter and release resources */

/**

 * hdlcdev_ioctl - called by network layer to process IOCTL call to network device

 * @dev: pointer to network device structure

 * @ifr: pointer to network interface request structure

 * @cmd: IOCTL command code

 *

 * Return: 0 if success, otherwise error code

 return error if TTY interface open */

 return current sync_serial_settings */

 data size wanted */

 set sync_serial_settings */

 if network interface up, reprogram hardware */

/**

 * hdlcdev_tx_timeout - called by network layer when transmit timeout is detected

 * @dev: pointer to network device structure

 * @txqueue: unused

/**

 * hdlcdev_tx_done - called by device driver when transmit completes

 * @info: pointer to device instance information

 *

 * Reenable network layer transmit if stopped.

/**

 * hdlcdev_rx - called by device driver when frame received

 * @info: pointer to device instance information

 * @buf:  pointer to buffer contianing frame data

 * @size: count of data bytes in buf

 *

 * Pass frame to network layer.

/**

 * hdlcdev_init - called by device driver when adding device instance

 * @info: pointer to device instance information

 *

 * Do generic HDLC initialization.

 *

 * Return: 0 if success, otherwise error code

 allocate and initialize network and HDLC layer objects */

 for network layer reporting purposes only */

 network layer callbacks and settings */

 generic HDLC layer callbacks and settings */

 register objects with HDLC layer */

/**

 * hdlcdev_exit - called by device driver when removing device instance

 * @info: pointer to device instance information

 *

 * Do generic HDLC cleanup.

 ifdef CONFIG_HDLC */

/*

 * get async data from rx DMA buffers

 discard char if tty control flags say so */

 receive buffer not completed */

 if entire list searched then no frame available */

/*

 * return next bottom half action to perform

 Mark BH routine as complete */

/*

 * perform bottom half processing

 restart receiver if rx DMA buffers exhausted */

 all buffers full */

 async mode saves status byte to buffer for each data byte */

 buffer full or end of frame */

 clear pending */

 process break detection if tty control allows */

	/* RDCSR (rx DMA control/status)

	 *

	 * 31..07  reserved

	 * 06      save status byte to DMA buffer

	 * 05      error

	 * 04      eol (end of list)

	 * 03      eob (end of buffer)

	 * 02      IRQ enable

	 * 01      reset

	 * 00      enable

 clear pending */

	/* TDCSR (tx DMA control/status)

	 *

	 * 31..06  reserved

	 * 05      error

	 * 04      eol (end of list)

	 * 03      eob (end of buffer)

	 * 02      IRQ enable

	 * 01      reset

	 * 00      enable

 clear pending */

 another transmit buffer has completed

 run bottom half to get more send data from user

/*

 * return true if there are unsent tx DMA buffers, otherwise false

 *

 * if there are unsent buffers then info->tbuf_start

 * is set to index of first unsent buffer

	/*

	 * search backwards from last loaded buffer (precedes tbuf_current)

	 * for first unsent buffer (desc_count > 0)

 set reset bit */

 clear reset bit */

 wake processes waiting for specific transitions */

/* interrupt service routine

 *

 * 	irq	interrupt number

 * 	dev_id	device ID supplied during interrupt registration

 read latched state of GPIO signals */

 clear pending GPIO interrupt bits */

 program hardware for current parameters */

/*

 *  called by close() and hangup() to shutdown hardware

 clear status wait queue because status changes */

 can't happen after shutting down the hardware */

/*

 * reconfigure adapter based on new parameters

 if B0 rate (hangup) specified then negate RTS and DTR */

 otherwise assert RTS and DTR */

 byte size and parity */

	/* calculate number of jiffies to transmit a full

	 * FIFO (32 bytes) at specified data rate

 Add .02 seconds of slop */

 process tty input control flags */

		/* If ignoring parity and break indicators, ignore

		 * overruns too.  (For real raw support).

/*

 * abort transmit HDLC frame

	/*

	 * enable[31..16] = receive DMA buffer fill level

	 * 0 = noop (leave fill level unchanged)

	 * fill level must be multiple of 4 and <= buffer size

 PIO mode */

 DMA mode */

 restart receiver to use new fill level */

	/*

	 * enable[1..0] = receiver enable command

	 * 0 = disable

	 * 1 = enable

	 * 2 = enable or force hunt mode if already enabled

 force hunt mode (write 1 to RCR[3]) */

/*

 *  wait for specified event to occur

 return immediately if state matches requested events */

 save current irq counts */

 enable hunt and idle irqs if needed */

 get current irq counts */

 if no change, wait aborted for some reason */

 disable enable exit hunt mode/idle rcvd IRQs */

 TCR (tx control) 07  1=RTS driver control */

/*

 * set extended sync pattern (1 to 4 bytes) for extended sync mode

 *

 * sync pattern is contained in least significant bytes of value

 * most significant byte of sync pattern is oldest (1st sent/detected)

/*

 * set extended control options

 *

 * xctrl[31:19] reserved, must be zero

 * xctrl[18:17] extended sync pattern length in bytes

 *              00 = 1 byte  in xsr[7:0]

 *              01 = 2 bytes in xsr[15:0]

 *              10 = 3 bytes in xsr[23:0]

 *              11 = 4 bytes in xsr[31:0]

 * xctrl[16]    1 = enable terminal count, 0=disabled

 * xctrl[15:0]  receive terminal count for fixed length packets

 *              value is count minus one (0 = 1 byte packet)

 *              when terminal count is reached, receiver

 *              automatically returns to hunt mode and receive

 *              FIFO contents are flushed to DMA buffers with

 *              end of frame (EOF) status

/*

 * set general purpose IO pin state and direction

 *

 * user_gpio fields:

 * state   each bit indicates a pin state

 * smask   set bit indicates pin state to set

 * dir     each bit indicates a pin direction (0=input, 1=output)

 * dmask   set bit indicates pin direction to set

/*

 * get general purpose IO pin state and direction

/*

 * conditional wait facility

/*

 * wait for general purpose I/O pin(s) to enter specified state

 *

 * user_gpio fields:

 * state - bit indicates target pin state

 * smask - set bit indicates watched pin

 *

 * The wait ends when at least one watched pin enters the specified

 * state. When 0 (no error) is returned, user_gpio->state is set to the

 * state of all GPIO pins when the wait ends.

 *

 * Note: Each pin may be a dedicated input, dedicated output, or

 * configurable input/output. The number and configuration of pins

 * varies with the specific adapter model. Only input pins (dedicated

 * or configured) can be monitored with this function.

 ignore output pins identified by set IODR bit */

 enable interrupts for watched pins */

 get current pin states */

 already in target state */

 wait for target state */

 disable all GPIO interrupts if no waiting processes */

 save current irq counts */

 get new irq counts */

 if no change, wait aborted for some reason */

 check for change in caller specified modem input */

/*

 *  return state of serial control and status signals

/*

 * set modem control signals (DTR/RTS)

 *

 * 	cmd	signal command: TIOCMBIS = set bit TIOCMBIC = clear bit

 *		TIOCMSET = set/clear signal values

 * 	value	bit mask for command

/*

 *  block current process until the device is ready to open

 nonblock mode is set or port is not enabled */

	/* Wait for carrier detect and the line to become

	 * free (i.e., not in use by the callout).  While we are in

	 * this loop, port->count is dropped by one, so that

	 * close() knows when to free things.  We restore it upon

	 * exit, either normal or abnormal.

/*

 * allocate buffers used for calling line discipline receive_buf

 * directly in synchronous mode

 * note: add 5 bytes to max frame size to allow appending

 * 32-bit CRC and status byte when configured to do so

 unused flag buffer to satisfy receive_buf calling interface */

/*

 * allocate DMA descriptor lists.

 allocate memory to hold descriptor lists */

	/*

	 * Build circular lists of descriptors

 physical address of this descriptor */

 physical address of next descriptor */

 physical address of this descriptor */

 physical address of next descriptor */

/* Add the specified device instance data structure to the

 * global linked list of devices and increment the device count.

/*

 *  allocate device instance structure, return NULL on failure

 Copy configuration info to device instance data */

 assume error, set to 0 on successful init */

 allocate device instances for all ports */

 give copy of port_array to all ports and add to device list  */

 Allocate and claim adapter resources */

 copy resource information from first port to others */

 reset devices */

 release devices */

/*

 *  Driver initialization entry point.

 Initialize the tty_driver structure */

/*

 * register access routines

 set reset bit */

 wait for enable bit cleared */

 set reset bit */

 wait for enable bit cleared */

/*

 * enable internal loopback

 * TxCLK and RxCLK are generated from BRG

 * and TxD is looped back to RxD internally.

 SCR (serial control) BIT2=loopback enable */

		/* CCR (clock control)

		 * 07..05  tx clock source (010 = BRG)

		 * 04..02  rx clock source (010 = BRG)

		 * 01      auxclk enable   (0 = disable)

		 * 00      BRG enable      (1 = enable)

		 *

		 * 0100 1001

 set speed if available, otherwise use default */

/*

 *  set baud rate generator to specified rate

	/* div = osc/rate - 1

	 *

	 * Round div up if osc/rate is not integer to

	 * force to next slowest rate.

 disable and reset receiver */

 clear enable bit */

 set reset bit */

 clear reset bit */

 clear pending rx interrupts */

 clear pending rx overrun IRQ */

 reset and disable receiver */

 clear enable bit */

 set reset bit */

 clear reset bit */

 rx request when rx FIFO not empty */

 enable saving of rx status */

 rx request when rx FIFO half full */

 set 1st descriptor address */

 enable rx DMA and DMA interrupt */

 enable saving of rx status, rx DMA and DMA interrupt */

 enable receiver */

 clear tx idle and underrun status bits */

 clear tx idle status bit */

 set 1st descriptor address and start DMA */

 reset and disable transmitter */

 clear enable bit */

 set reset bit */

 clear tx idle and underrun status bit */

	/* TCR (tx control)

	 *

	 * 15..13  mode, 010=async

	 * 12..10  encoding, 000=NRZ

	 * 09      parity enable

	 * 08      1=odd parity, 0=even parity

	 * 07      1=RTS driver control

	 * 06      1=break enable

	 * 05..04  character length

	 *         00=5 bits

	 *         01=6 bits

	 *         10=7 bits

	 *         11=8 bits

	 * 03      0=1 stop bit, 1=2 stop bits

	 * 02      reset

	 * 01      enable

	 * 00      auto-CTS enable

	/* RCR (rx control)

	 *

	 * 15..13  mode, 010=async

	 * 12..10  encoding, 000=NRZ

	 * 09      parity enable

	 * 08      1=odd parity, 0=even parity

	 * 07..06  reserved, must be 0

	 * 05..04  character length

	 *         00=5 bits

	 *         01=6 bits

	 *         10=7 bits

	 *         11=8 bits

	 * 03      reserved, must be zero

	 * 02      reset

	 * 01      enable

	 * 00      auto-DCD enable

	/* CCR (clock control)

	 *

	 * 07..05  011 = tx clock source is BRG/16

	 * 04..02  010 = rx clock source is BRG

	 * 01      0 = auxclk disabled

	 * 00      1 = BRG enabled

	 *

	 * 0110 1001

	/* SCR (serial control)

	 *

	 * 15  1=tx req on FIFO half empty

	 * 14  1=rx req on FIFO half full

	 * 13  tx data  IRQ enable

	 * 12  tx idle  IRQ enable

	 * 11  rx break on IRQ enable

	 * 10  rx data  IRQ enable

	 * 09  rx break off IRQ enable

	 * 08  overrun  IRQ enable

	 * 07  DSR      IRQ enable

	 * 06  CTS      IRQ enable

	 * 05  DCD      IRQ enable

	 * 04  RI       IRQ enable

	 * 03  0=16x sampling, 1=8x sampling

	 * 02  1=txd->rxd internal loopback enable

	 * 01  reserved, must be zero

	 * 00  1=master IRQ enable

 JCR[8] : 1 = x8 async mode feature available */

 use 8x sampling */

 use 16x sampling */

	/* TCR (tx control)

	 *

	 * 15..13  mode

	 *         000=HDLC/SDLC

	 *         001=raw bit synchronous

	 *         010=asynchronous/isochronous

	 *         011=monosync byte synchronous

	 *         100=bisync byte synchronous

	 *         101=xsync byte synchronous

	 * 12..10  encoding

	 * 09      CRC enable

	 * 08      CRC32

	 * 07      1=RTS driver control

	 * 06      preamble enable

	 * 05..04  preamble length

	 * 03      share open/close flag

	 * 02      reset

	 * 01      enable

	 * 00      auto-CTS enable

 TPR (transmit preamble) */

	/* RCR (rx control)

	 *

	 * 15..13  mode

	 *         000=HDLC/SDLC

	 *         001=raw bit synchronous

	 *         010=asynchronous/isochronous

	 *         011=monosync byte synchronous

	 *         100=bisync byte synchronous

	 *         101=xsync byte synchronous

	 * 12..10  encoding

	 * 09      CRC enable

	 * 08      CRC32

	 * 07..03  reserved, must be 0

	 * 02      reset

	 * 01      enable

	 * 00      auto-DCD enable

	/* CCR (clock control)

	 *

	 * 07..05  tx clock source

	 * 04..02  rx clock source

	 * 01      auxclk enable

	 * 00      BRG enable

 when RxC source is DPLL, BRG generates 16X DPLL

 reference clock, so take TxC from BRG/16 to get

 transmit clock at actual data rate

 011, txclk = BRG/16 */

 010, txclk = BRG */

 100, txclk = DPLL Input */

 001, txclk = RXC Input */

 010, rxclk = BRG */

 100, rxclk = DPLL */

 001, rxclk = TXC Input */

 program DPLL mode

 NRZ encodings

 DPLL requires a 16X reference clock from BRG

	/* SCR (serial control)

	 *

	 * 15  1=tx req on FIFO half empty

	 * 14  1=rx req on FIFO half full

	 * 13  tx data  IRQ enable

	 * 12  tx idle  IRQ enable

	 * 11  underrun IRQ enable

	 * 10  rx data  IRQ enable

	 * 09  rx idle  IRQ enable

	 * 08  overrun  IRQ enable

	 * 07  DSR      IRQ enable

	 * 06  CTS      IRQ enable

	 * 05  DCD      IRQ enable

	 * 04  RI       IRQ enable

	 * 03  reserved, must be zero

	 * 02  1=txd->rxd internal loopback enable

	 * 01  reserved, must be zero

	 * 00  1=master IRQ enable

/*

 *  set transmit idle mode

	/* if preamble enabled (tcr[6] == 1) then tx idle size = 8 bits

	 * else tcr[5:4] = tx idle size: 00 = 8 bits, 01 = 16 bits

 disable preamble, set idle size to 16 bits */

 MSB of 16 bit idle specified in tx preamble register (TPR) */

 preamble is disabled, set idle size to 8 bits */

 LSB of custom tx idle specified in tx idle register */

 standard 8 bit idle patterns */

/*

 * get state of V24 status (input) signals

 clear all serial signals except RTS and DTR */

/*

 * set V.24 Control Register based on current configuration

	/* VCR (V.24 control)

	 *

	 * 07..04  serial IF select

	 * 03      DTR

	 * 02      RTS

	 * 01      LL

	 * 00      RL

 0010 */

 1110 */

 0100 */

/*

 * set state of V24 control (output) signals

/*

 * free range of receive DMA buffers (i to last)

 reset current buffer for reuse */

/*

 * mark all receive DMA buffers as free

/*

 * pass receive HDLC frame to upper layer

 *

 * return true if frame available, otherwise false

	/* status

	 *

	 * 15      buffer complete

	 * 14..06  reserved

	 * 05..04  residue

	 * 02      eof (end of frame)

	 * 01      CRC error

	 * 00      abort

 ignore CRC bit if not using CRC (bit is undefined) */

 copy dma buffer(s) to contiguous temp buffer */

/*

 * pass receive buffer (RAW synchronous mode) to tty layer

 * return true if buffer available, otherwise false

 ignore residue in byte synchronous modes */

/*

 * return number of free transmit DMA buffers

 buffer in use */

 if tx DMA active, last zero count buffer is in use */

/*

 * return number of bytes in unsent transmit DMA buffers

 * and the serial controller tx FIFO

	/*

	 * Add descriptor counts for all tx DMA buffers.

	 * If count is zero (cleared by DMA controller after read),

	 * the buffer is complete or is actively being read from.

	 *

	 * Record buf_count of last buffer with zero count starting

	 * from current ring position. buf_count is mirror

	 * copy of count and is not cleared by serial controller.

	 * If DMA controller is active, that buffer is actively

	 * being read so add to total.

 read tx DMA status register */

 if tx DMA active, last zero count buffer is in use */

 add tx FIFO count = reg_value[15..8] */

 if transmitter active add one byte for shift register */

/*

 * load data into transmit DMA buffer ring and start transmitter if needed

 * return true if data accepted, otherwise false (buffers full)

 check required buffer space */

	/*

	 * copy data to one or more DMA buffers in circular ring

	 * tbuf_start   = first buffer for this data

	 * tbuf_current = next free buffer

	 *

	 * Copy all data before making data visible to DMA controller by

	 * setting descriptor count of the first buffer.

	 * This prevents an active DMA controller from reading the first DMA

	 * buffers of a frame and stopping before the final buffers are filled.

		/*

		 * set EOF bit for last buffer of HDLC frame or

		 * for every buffer in raw mode

 set descriptor count for all but first buffer */

 set first buffer count to make new data visible to DMA controller */

 start transmitter if needed and update transmit timeout */

 enable transmitter */

 write one byte and wait for tx idle */

 assume failure */

 src=data byte (src+1)=status byte */

 build and send transmit frame */

 program hardware for HDLC and enabled receiver */

 wait for receive complete */

 verify received frame length and contents */

/*

 * transmit timeout handler

/*

 * receive buffer polling timer

 SPDX-License-Identifier: GPL-2.0

/*

 * Serial driver for the amiga builtin port.

 *

 * This code was created by taking serial.c version 4.30 from kernel

 * release 2.3.22, replacing all hardware related stuff with the

 * corresponding amiga hardware actions, and removing all irrelevant

 * code. As a consequence, it uses many of the constants and names

 * associated with the registers and bits of 16550 compatible UARTS -

 * but only to keep track of status, etc in the state variables. It

 * was done this was to make it easier to keep the code in line with

 * (non hardware specific) changes to serial.c.

 *

 * The port is registered with the tty driver as minor device 64, and

 * therefore other ports should should only use 65 upwards.

 *

 * Richard Lucock 28/12/99

 *

 *  Copyright (C) 1991, 1992  Linus Torvalds

 *  Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 

 * 		1998, 1999  Theodore Ts'o

 *

 Set of debugging defines */

/*

 * End of serial driver configuration section.

 Interrupt Enable Register */

 Modem control register */

 xon/xoff character */

 number of characters left in xmit buffer before we ask for more */

 some serial hardware definitions */

/*

 * ------------------------------------------------------------

 * rs_stop() and rs_start()

 *

 * This routines are called before setting or resetting tty->flow.stopped.

 * They enable or disable transmitter interrupts, as necessary.

 * ------------------------------------------------------------

 disable Tx interrupt and remove any pending interrupts */

 set a pending Tx Interrupt, transmitter should restart now */

/*

 * ----------------------------------------------------------------------

 *

 * Here start the interrupt handling routines.

 *

 * -----------------------------------------------------------------------

 We obviously have a character! */

	/*

	 * We don't handle parity or frame errors - but I have left

	 * the code in, since I'm not sure that the errors can't be

	 * detected.

	  /*

	   * For statistics only

	  /*

	   * Now check to see if character should be

	   * ignored, and mask off conditions which

	   * should be ignored.

	    /*

	     * Overrun is special, since it's

	     * reported immediately, and doesn't

	     * affect the current character

 Determine bits that have changed */

 update input line counters */

 set a pending Tx Interrupt, transmitter should restart now */

 disable Tx interrupt and remove any pending interrupts */

 vbl is just a periodic interrupt we tie into to update modem status */

	/*

	 * TBD - is it better to unregister from this interrupt or to

	 * ignore it if MSI is clear ?

/*

 * -------------------------------------------------------------------

 * Here ends the serial interrupt routines.

 * -------------------------------------------------------------------

/*

 * ---------------------------------------------------------------

 * Low level utility subroutines for the serial driver:  routines to

 * figure out the appropriate timeout for an interrupt chain, routines

 * to initialize and startup a serial port, and routines to shutdown a

 * serial port.  Useful stuff like that.

 * ---------------------------------------------------------------

 Clear anything in the input buffer */

 enable both Rx and Tx interrupts */

 remember current state of the DCD and CTS bits */

	/*

	 * and set the speed of the serial port

/*

 * This routine will shutdown a serial port; interrupts are disabled, and

 * DTR is dropped if the hangup on close termio flag is on.

 Disable interrupts */

	/*

	 * clear delta_msr_wait queue to avoid mem leaks: we may free the irq

	 * here so the queue might never be waken up

	/*

	 * Free the IRQ, if necessary

 disable break condition */

/*

 * This routine is called to set the UART divisor registers to match

 * the specified baud rate for a serial port.

 Byte size is always 8 bits plus parity bit if requested */

 Determine divisor based on baud rate */

 B0 transition handled in rs_set_termios */

 Special case since 134 is really 134.5 */

 If the quotient is zero refuse the change */

 FIXME: Will need updating for new tty in the end */

 Special case since 134 is really 134.5 */

 As a last resort, if the quotient is zero, default to 9600 bps */

 Add .02 seconds of slop */

 CTS flow control flag and modem status interrupts */

	/* TBD:

	 * Does clearing IER_MSI imply that we should disable the VBL interrupt ?

	/*

	 * Set up parity check flag

	/*

	 * Characters to ignore

		/*

		 * If we're ignore parity and break indicators, ignore 

		 * overruns too.  (For real raw support).

	/*

	 * !!! ignore all characters if CREAD is not set

 Set up the baud rate */

 Enable or disable parity bit */

 set a pending Tx Interrupt, transmitter should restart now */

 set a pending Tx Interrupt, transmitter should restart now */

/*

 * This function is used to send a high-priority XON/XOFF character to

 * the device

 Make sure transmit interrupts are on */

 Check this ! */

 set a pending Tx Interrupt, transmitter should restart now */

/*

 * ------------------------------------------------------------

 * rs_throttle()

 * 

 * This routine is called by the upper-layer tty layer to signal that

 * incoming characters should be throttled.

 * ------------------------------------------------------------

/*

 * ------------------------------------------------------------

 * rs_ioctl() and friends

 * ------------------------------------------------------------

	/*

	 * OK, past this point, all the error checking has been done.

	 * At this point, we start making changes.....

 warn about deprecation unless clearing */

/*

 * get_lsr_info - get line status register info

 *

 * Purpose: Let user call ioctl() to get info when the UART physically

 * 	    is emptied.  On bus types like RS485, the transmitter must

 * 	    release the bus after transmitting. This must be done when

 * 	    the transmit shift register is empty, not be done when the

 * 	    transmit holding register is empty.  This functionality

 * 	    allows an RS485 driver to be written in user space. 

/*

 * rs_break() --- routine which turns the break handling on or off

/*

 * Get counter of input serial line interrupts (DCD,RI,DSR,CTS)

 * Return: write counters to the user passed counter struct

 * NB: both 1->0 and 0->1 transitions are counted except for

 *     RI where only 0->1 is counted.

 kernel counter temps */

 Get line status register */

		/*

		 * Wait for any of the 4 modem inputs (DCD,RI,DSR,CTS) to change

		 * - mask passed in arg for lines of interest

 		 *   (use |'ed TIOCM_RNG/DSR/CD/CTS for masking)

		 * Caller should use TIOCGICOUNT to see which one it was

 note the counters on entry */

 atomic copy */

 no change => error */

 see if a signal did it */

 Handle transition to B0 status */

 Handle transition away from B0 status */

 Handle turning off CRTSCTS */

	/*

	 * No need to wake up processes in open wait, since they

	 * sample the CLOCAL flag once, and don't recheck it.

	 * XXX  It's not clear whether the current behavior is correct

	 * or not.  Hence, this may change.....

/*

 * ------------------------------------------------------------

 * rs_close()

 * 

 * This routine is called when the serial port gets closed.  First, we

 * wait for the last remaining data to be sent.  Then, we unlink its

 * async structure from the interrupt chain if necessary, and we free

 * that IRQ if nothing is left in the chain.

 * ------------------------------------------------------------

	/*

	 * At this point we stop accepting input.  To do this, we

	 * disable the receive line status interrupts, and tell the

	 * interrupt driver to stop checking the data ready bit in the

	 * line status register.

 disable receive interrupts */

 clear any pending receive interrupt */

		/*

		 * Before we drop DTR, make sure the UART transmitter

		 * has completely drained; this is especially

		 * important if there is a transmit FIFO!

/*

 * rs_wait_until_sent() --- wait until the transmitter is empty

	/*

	 * Set the check interval to be 1/5 of the estimated time to

	 * send a single character, and make it at least 1.  The check

	 * interval should also be less than the timeout.

	 * 

	 * Note: we have to use pretty tight timings here to satisfy

	 * the NIST-PCTS.

	/*

	 * If the transmitter hasn't cleared in twice the approximate

	 * amount of time to send the entire FIFO, it probably won't

	 * ever clear.  This assumes the UART isn't doing flow

	 * control, which is currently the case.  Hence, if it ever

	 * takes longer than info->timeout, this is probably due to a

	 * UART bug of some kind.  So, we clamp the timeout parameter at

	 * 2*info->timeout.

/*

 * rs_hangup() --- called by tty_hangup() when a hangup is signaled.

/*

 * This routine is called whenever a serial port is opened.  It

 * enables interrupts for a serial port, linking in its async structure into

 * the IRQ chain.   It also performs the serial-specific

 * initialization for the tty structure.

/*

 * /proc fs routines....

	/*

	 * Last thing is the RS-232 status lines

/*

 * ---------------------------------------------------------------------

 * rs_init() and friends

 *

 * rs_init() is called at boot-time to initialize the serial driver.

 * ---------------------------------------------------------------------

/*

 * The serial driver boot-time initialization code!

 Initialize the tty_driver structure */

 Just to give it a value */

 Hardware set up */

 set ISRs, and then disable the rx interrupts */

 turn off Rx and Tx interrupts */

 clear any pending interrupt */

	/*

	 * set the appropriate directions for the modem control flags,

	 * and clear RTS and DTR

 outputs */

 inputs */

/*

 * ------------------------------------------------------------

 * Serial console driver

 * ------------------------------------------------------------

/*

 *	Print a string to the serial port trying not to disturb

 *	any possible real use of the port...

 *

 *	The console must be locked when we get here.

/*

 *	Register console.

 CONFIG_SERIAL_CONSOLE && !MODULE */

 SPDX-License-Identifier: GPL-2.0

/*

 *  n_null.c - Null line discipline used in the failure path

 *

 *  Copyright (C) Intel 2017

 SPDX-License-Identifier: GPL-2.0

/* vcc.c: sun4v virtual channel concentrator

 *

 * Copyright (C) 2017 Oracle. All rights reserved.

 only populated while dev is open */

 index into the vcc_table */

	/* This buffer is required to support the tty write_room interface

	 * and guarantee that any characters that the driver accepts will

	 * be eventually sent, either immediately or later.

 Microseconds that thread will delay waiting for a vcc port ref */

 must be zero */

/* Note: Be careful when adding flags to this line discipline.  Don't

 * add anything that will cause echoing or we'll go into recursive

 * loop echoing chars back and forth with the console drivers.

/**

 * vcc_table_add() - Add VCC port to the VCC table

 * @port: pointer to the VCC port

 *

 * Return: index of the port in the VCC table on success,

 *	   -1 on failure

/**

 * vcc_table_remove() - Removes a VCC port from the VCC table

 * @index: Index into the VCC table

/**

 * vcc_get() - Gets a reference to VCC port

 * @index: Index into the VCC table

 * @excl: Indicates if an exclusive access is requested

 *

 * Return: reference to the VCC port, if found

 *	   NULL, if port not found

		/* Threads wanting exclusive access will wait half the time,

		 * probably giving them higher priority in the case of

		 * multiple waiters.

/**

 * vcc_put() - Returns a reference to VCC port

 * @port: pointer to VCC port

 * @excl: Indicates if the returned reference is an exclusive reference

 *

 * Note: It's the caller's responsibility to ensure the correct value

 *	 for the excl flag

 check if caller attempted to put with the wrong flags */

/**

 * vcc_get_ne() - Get a non-exclusive reference to VCC port

 * @index: Index into the VCC table

 *

 * Gets a non-exclusive reference to VCC port, if it's not removed

 *

 * Return: pointer to the VCC port, if found

 *	   NULL, if port not found

	/* tty_buffer_request_room won't sleep because it uses

	 * GFP_ATOMIC flag to allocate buffer

 Read as long as LDC has incoming data. */

 vcc_rx_check ensures memory availability */

/**

 * vcc_event() - LDC event processing engine

 * @arg: VCC private data

 * @event: LDC event

 *

 * Handles LDC events for VCC

 Ordered from largest major to lowest */

/**

 * vcc_probe() - Initialize VCC port

 * @vdev: Pointer to VIO device of the new VCC port

 * @id: VIO device ID

 *

 * Initializes a VCC port to receive serial console data from

 * the guest domain. Sets up a TTY end point on the control

 * domain. Sets up VIO/LDC link between the guest & control

 * domain endpoints.

 *

 * Return: status of the probe

 Register the device using VCC table index as TTY index */

	/* It's possible to receive IRQs in the middle of vio_port_up. Disable

	 * IRQs until the port is up.

/**

 * vcc_remove() - Terminate a VCC port

 * @vdev: Pointer to VIO device of the VCC port

 *

 * Terminates a VCC port. Sets up the teardown of TTY and

 * VIO/LDC link between guest and primary domains.

 *

 * Return: status of removal

	/* If there's a process with the device open, do a synchronous

	 * hangup of the TTY. This *may* cause the process to call close

	 * asynchronously, but it's not guaranteed.

	/* Get exclusive reference to VCC, ensures that there are no other

	 * clients to this port. This cannot fail.

 Minimum of data to write and space available */

		/* Since we know we have enough room in VCC buffer for tosend

		 * we record that it was sent regardless of whether the

		 * hypervisor actually took it because we have it buffered.

 Turn off break */

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 1991, 1992, 1993, 1994  Linus Torvalds

/*

 * Routine which returns the baud rate of the tty

 *

 * Note that the baud_table needs to be kept in sync with the

 * include/asm/termbits.h file.

/**

 *	tty_termios_baud_rate

 *	@termios: termios structure

 *

 *	Convert termios baud rate data into a speed. This should be called

 *	with the termios lock held if this termios is a terminal termios

 *	structure. May change the termios data. Device drivers can call this

 *	function but should use ->c_[io]speed directly as they are updated.

 *

 *	Locking: none

 Magic token for arbitrary speed via c_ispeed/c_ospeed */

/**

 *	tty_termios_input_baud_rate

 *	@termios: termios structure

 *

 *	Convert termios baud rate data into a speed. This should be called

 *	with the termios lock held if this termios is a terminal termios

 *	structure. May change the termios data. Device drivers can call this

 *	function but should use ->c_[io]speed directly as they are updated.

 *

 *	Locking: none

 Magic token for arbitrary speed via c_ispeed*/

 IBSHIFT */

 IBSHIFT */

/**

 *	tty_termios_encode_baud_rate

 *	@termios: ktermios structure holding user requested state

 *	@ibaud: input speed

 *	@obaud: output speed

 *

 *	Encode the speeds set into the passed termios structure. This is

 *	used as a library helper for drivers so that they can report back

 *	the actual speed selected when it differs from the speed requested

 *

 *	For maximal back compatibility with legacy SYS5/POSIX *nix behaviour

 *	we need to carefully set the bits when the user does not get the

 *	desired speed. We allow small margins and preserve as much of possible

 *	of the input intent to keep compatibility.

 *

 *	Locking: Caller should hold termios lock. This is already held

 *	when calling this function from the driver termios handler.

 *

 *	The ifdefs deal with platforms whose owners have yet to update them

 *	and will all go away once this is done.

 CD dropped */

 Clear ibaud to be sure */

 An input speed was specified */

	/* If the user asked for a precise weird speed give a precise weird

	 * answer. If they asked for a Bfoo speed they may have problems

	 * digesting non-exact replies so fuzz a bit.

	/*

	 *	Our goal is to find a close match to the standard baud rate

	 *	returned. Walk the baud rate table and if we get a very close

	 *	match then report back the speed as a POSIX Bxxxx value by

	 *	preference

			/* For the case input == output don't set IBAUD bits

			 * if the user didn't do so.

	/*

	 *	If we found no match then use BOTHER if provided or warn

	 *	the user their platform maintainer needs to wake up if not.

	/* Set exact input bits only if the input and output differ or the

	 * user already did.

/**

 *	tty_encode_baud_rate		-	set baud rate of the tty

 *	@tty:   terminal device

 *	@ibaud: input baud rate

 *	@obaud: output baud rate

 *

 *	Update the current termios data for the tty with the new speed

 *	settings. The caller must hold the termios_rwsem for the tty in

 *	question.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2019 Axis Communications AB

 *

 * Based on ttyprintk.c:

 *  Copyright (C) 2010 Samo Pogacnik

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 1991, 1992  Linus Torvalds

/**

 *	__tty_check_change	-	check for POSIX terminal changes

 *	@tty: tty to check

 *	@sig: signal to send

 *

 *	If we try to write to, or set the state of, a terminal and we're

 *	not in the foreground, send a SIGTTOU.  If the signal is blocked or

 *	ignored, go ahead and perform the operation.  (POSIX 7.2)

 *

 *	Locking: ctrl.lock

/**

 * __proc_set_tty -  set the controlling terminal

 *	@tty: tty structure

 *

 * Only callable by the session leader and only if it does not already have

 * a controlling terminal.

 *

 * Caller must hold:  tty_lock()

 *		      a readlock on tasklist_lock

 *		      sighand lock

	/*

	 * The session and fg pgrp references will be non-NULL if

	 * tiocsctty() is stealing the controlling tty

/*

 * Called by tty_open() to set the controlling tty if applicable.

		/*

		 * Don't let a process that only has write access to the tty

		 * obtain the privileges associated with having a tty as

		 * controlling terminal (being able to reopen it with full

		 * access through /dev/tty, being able to perform pushback).

		 * Many distributions set the group of all ttys to "tty" and

		 * grant write-only access to all terminals for setgid tty

		 * binaries, which should not imply full privileges on all ttys.

		 *

		 * This could theoretically break old code that performs open()

		 * on a write-only file descriptor. In that case, it might be

		 * necessary to also permit this if

		 * inode_permission(inode, MAY_READ) == 0.

/*

 * Called from tty_release().

/**

 *	tty_signal_session_leader	- sends SIGHUP to session leader

 *	@tty: controlling tty

 *	@exit_session: if non-zero, signal all foreground group processes

 *

 *	Send SIGHUP and SIGCONT to the session leader and its process group.

 *	Optionally, signal all processes in the foreground process group.

 *

 *	Returns the number of processes in the session with this tty

 *	as their controlling terminal. This value is used to drop

 *	tty references for those processes.

				/*

				 * We defer the dereferences outside of

				 * the tasklist lock.

 A noop */

/**

 *	disassociate_ctty	-	disconnect controlling tty

 *	@on_exit: true if exiting so need to "hang up" the session

 *

 *	This function is typically called only by the session leader, when

 *	it wants to disassociate itself from its controlling tty.

 *

 *	It performs the following functions:

 *	(1)  Sends a SIGHUP and SIGCONT to the foreground process group

 *	(2)  Clears the tty from being controlling the session

 *	(3)  Clears the controlling tty for all processes in the

 *		session group.

 *

 *	The argument on_exit is set to 1 if called when a process is

 *	exiting; it is 0 if called by the ioctl TIOCNOTTY.

 *

 *	Locking:

 *		BTM is taken for hysterical raisons, and held when

 *		  called from no_tty().

 *		  tty_mutex is taken to protect tty

 *		  ->siglock is taken to protect ->signal/->sighand

 *		  tasklist_lock is taken to walk process list for sessions

 *		    ->siglock is taken to protect ->signal/->sighand

 Now clear signal->tty under the lock */

/*

 *

 *	no_tty	- Ensure the current process does not have a controlling tty

	/*

	 * FIXME: Review locking here. The tty_lock never covered any race

	 * between a new association and proc_clear_tty but possibly we need

	 * to protect against this anyway.

/**

 *	tiocsctty	-	set controlling tty

 *	@tty: tty structure

 *	@file: file structure used to check permissions

 *	@arg: user argument

 *

 *	This ioctl is used to manage job control. It permits a session

 *	leader to set this tty as the controlling tty for the session.

 *

 *	Locking:

 *		Takes tty_lock() to serialize proc_set_tty() for this tty

 *		Takes tasklist_lock internally to walk sessions

 *		Takes ->siglock() when updating signal->tty

	/*

	 * The process must be a session leader and

	 * not have a controlling tty already.

		/*

		 * This tty is already the controlling

		 * tty for another session group!

			/*

			 * Steal it away

 See the comment in tty_open_proc_set_tty(). */

/**

 *	tty_get_pgrp	-	return a ref counted pgrp pid

 *	@tty: tty to read

 *

 *	Returns a refcounted instance of the pid struct for the process

 *	group controlling the tty.

/*

 * This checks not only the pgrp, but falls back on the pid if no

 * satisfactory pgrp is found. I dunno - gdb doesn't work correctly

 * without this...

 *

 * The caller must hold rcu lock or the tasklist lock.

/**

 *	tiocgpgrp		-	get process group

 *	@tty: tty passed by user

 *	@real_tty: tty side of the tty passed by the user if a pty else the tty

 *	@p: returned pid

 *

 *	Obtain the process group of the tty. If there is no process group

 *	return an error.

 *

 *	Locking: none. Reference to current->signal->tty is safe.

	/*

	 * (tty == real_tty) is a cheap way of

	 * testing if the tty is NOT a master pty.

/**

 *	tiocspgrp		-	attempt to set process group

 *	@tty: tty passed by user

 *	@real_tty: tty side device matching tty passed by user

 *	@p: pid pointer

 *

 *	Set the process group of the tty to the session passed. Only

 *	permitted where the tty session is our session.

 *

 *	Locking: RCU, ctrl lock

/**

 *	tiocgsid		-	get session id

 *	@tty: tty passed by user

 *	@real_tty: tty side of the tty passed by the user if a pty else the tty

 *	@p: pointer to returned session id

 *

 *	Obtain the session id of the tty. If there is no session

 *	return an error.

	/*

	 * (tty == real_tty) is a cheap way of

	 * testing if the tty is NOT a master pty.

/*

 * Called from tty_ioctl(). If tty is a pty then real_tty is the slave side,

 * if not then tty == real_tty.

 SPDX-License-Identifier: GPL-2.0

/*

 * Tty buffer allocation management

/*

 * Byte threshold to limit memory consumption for flip buffers.

 * The actual memory limit is > 2x this amount.

/*

 * We default to dicing tty buffer allocations to this many characters

 * in order to avoid multiple page allocations. We know the size of

 * tty_buffer itself but it must also be taken into account that the

 * buffer is 256 byte aligned. See tty_buffer_find for the allocation

 * logic this must match.

/**

 *	tty_buffer_lock_exclusive	-	gain exclusive access to buffer

 *	tty_buffer_unlock_exclusive	-	release exclusive access

 *

 *	@port: tty port owning the flip buffer

 *

 *	Guarantees safe use of the line discipline's receive_buf() method by

 *	excluding the buffer work and any pending flush from using the flip

 *	buffer. Data can continue to be added concurrently to the flip buffer

 *	from the driver side.

 *

 *	On release, the buffer work is restarted if there is data in the

 *	flip buffer

/**

 *	tty_buffer_space_avail	-	return unused buffer space

 *	@port: tty port owning the flip buffer

 *

 *	Returns the # of bytes which can be written by the driver without

 *	reaching the buffer limit.

 *

 *	Note: this does not guarantee that memory is available to write

 *	the returned # of bytes (use tty_prepare_flip_string_xxx() to

 *	pre-allocate if memory guarantee is required).

/**

 *	tty_buffer_free_all		-	free buffers used by a tty

 *	@port: tty port to free from

 *

 *	Remove all the buffers pending on a tty whether queued with data

 *	or in the free ring. Must be called when the tty is no longer in use

/**

 *	tty_buffer_alloc	-	allocate a tty buffer

 *	@port: tty port

 *	@size: desired size (characters)

 *

 *	Allocate a new tty buffer to hold the desired number of characters.

 *	We round our buffers off in 256 character chunks to get better

 *	allocation behaviour.

 *	Return NULL if out of memory or the allocation would exceed the

 *	per device queue

 Round the buffer size out */

	/* Should possibly check if this fails for the largest buffer we

	 * have queued and recycle that ?

/**

 *	tty_buffer_free		-	free a tty buffer

 *	@port: tty port owning the buffer

 *	@b: the buffer to free

 *

 *	Free a tty buffer, or add it to the free list according to our

 *	internal strategy

 Dumb strategy for now - should keep some stats */

/**

 *	tty_buffer_flush		-	flush full tty buffers

 *	@tty: tty to flush

 *	@ld:  optional ldisc ptr (must be referenced)

 *

 *	flush all the buffers containing receive data. If ld != NULL,

 *	flush the ldisc input buffer.

 *

 *	Locking: takes buffer lock to ensure single-threaded flip buffer

 *		 'consumer'

	/* paired w/ release in __tty_buffer_request_room; ensures there are

	 * no pending memory accesses to the freed buffer

/**

 *	__tty_buffer_request_room		-	grow tty buffer if needed

 *	@port: tty port

 *	@size: size desired

 *	@flags: buffer flags if new buffer allocated (default = 0)

 *

 *	Make at least size bytes of linear space available for the tty

 *	buffer. If we fail return the size we managed to find.

 *

 *	Will change over to a new buffer if the current buffer is encoded as

 *	TTY_NORMAL (so has no flags buffer) and the new buffer requires

 *	a flags buffer.

 This is the slow path - looking for new buffers to use */

			/* paired w/ acquire in flush_to_ldisc(); ensures

			 * flush_to_ldisc() sees buffer data.

			/* paired w/ acquire in flush_to_ldisc(); ensures the

			 * latest commit value can be read before the head is

			 * advanced to the next buffer

/**

 *	tty_insert_flip_string_fixed_flag - Add characters to the tty buffer

 *	@port: tty port

 *	@chars: characters

 *	@flag: flag value for each character

 *	@size: size

 *

 *	Queue a series of bytes to the tty buffering. All the characters

 *	passed are marked with the supplied flag. Returns the number added.

		/* There is a small chance that we need to split the data over

		 * several buffers. If this is the case we must loop.

/**

 *	tty_insert_flip_string_flags	-	Add characters to the tty buffer

 *	@port: tty port

 *	@chars: characters

 *	@flags: flag bytes

 *	@size: size

 *

 *	Queue a series of bytes to the tty buffering. For each character

 *	the flags array indicates the status of the character. Returns the

 *	number added.

		/* There is a small chance that we need to split the data over

		 * several buffers. If this is the case we must loop.

/**

 *	__tty_insert_flip_char   -	Add one character to the tty buffer

 *	@port: tty port

 *	@ch: character

 *	@flag: flag byte

 *

 *	Queue a single byte to the tty buffering, with an optional flag.

 *	This is the slow path of tty_insert_flip_char.

/**

 *	tty_schedule_flip	-	push characters to ldisc

 *	@port: tty port to push from

 *

 *	Takes any pending buffers and transfers their ownership to the

 *	ldisc side of the queue. It then schedules those characters for

 *	processing by the line discipline.

	/* paired w/ acquire in flush_to_ldisc(); ensures

	 * flush_to_ldisc() sees buffer data.

/**

 *	tty_prepare_flip_string		-	make room for characters

 *	@port: tty port

 *	@chars: return pointer for character write area

 *	@size: desired size

 *

 *	Prepare a block of space in the buffer for data. Returns the length

 *	available and buffer pointer to the space which is now allocated and

 *	accounted for as ready for normal characters. This is used for drivers

 *	that need their own block copy routines into the buffer. There is no

 *	guarantee the buffer is a DMA target!

/**

 *	tty_ldisc_receive_buf		-	forward data to line discipline

 *	@ld:	line discipline to process input

 *	@p:	char buffer

 *	@f:	TTY_* flags buffer

 *	@count:	number of bytes to process

 *

 *	Callers other than flush_to_ldisc() need to exclude the kworker

 *	from concurrent use of the line discipline, see paste_selection().

 *

 *	Returns the number of bytes processed

/**

 *	flush_to_ldisc

 *	@work: tty structure passed from work queue.

 *

 *	This routine is called out of the software interrupt to flush data

 *	from the buffer chain to the line discipline.

 *

 *	The receive_buf method is single threaded for each tty instance.

 *

 *	Locking: takes buffer lock to ensure single-threaded flip buffer

 *		 'consumer'

 Ldisc or user is trying to gain exclusive access */

		/* paired w/ release in __tty_buffer_request_room();

		 * ensures commit value read is not stale if the head

		 * is advancing to the next buffer

		/* paired w/ release in __tty_buffer_request_room() or in

		 * tty_buffer_flush(); ensures we see the committed buffer data

/**

 *	tty_flip_buffer_push	-	terminal

 *	@port: tty port to push

 *

 *	Queue a push of the terminal flip buffers to the line discipline.

 *	Can be called from IRQ/atomic context.

 *

 *	In the event of the queue being busy for flipping the work will be

 *	held off and retried later.

/**

 *	tty_buffer_init		-	prepare a tty buffer structure

 *	@port: tty port to initialise

 *

 *	Set up the initial state of the buffer management for a tty device.

 *	Must be called before the other tty buffer functions are used.

/**

 *	tty_buffer_set_limit	-	change the tty buffer memory limit

 *	@port: tty port to change

 *	@limit: memory limit to set

 *

 *	Change the tty buffer memory limit.

 *	Must be called before the other tty buffer functions are used.

 slave ptys can claim nested buffer lock when handling BRK and INTR */

 SPDX-License-Identifier: GPL-2.0

 Legacy tty mutex glue */

/*

 * Getting the big tty mutex.

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 1991, 1992  Linus Torvalds

 *

 *  Added support for a Unix98-style ptmx device.

 *    -- C. Scott Ananian <cananian@alumni.princeton.edu>, 14-Jan-1998

 *

 Review - krefs on tty_link ?? */

/*

 * The unthrottle routine is called by the line discipline to signal

 * that it can receive more characters.  For PTY's, the TTY_THROTTLED

 * flag is always set, to force the line discipline to always call the

 * unthrottle routine when there are fewer than TTY_THRESHOLD_UNTHROTTLE

 * characters in the queue.  This is necessary since each time this

 * happens, we need to wake up any sleeping processes that could be

 * (1) trying to send data to the pty, or (2) waiting in wait_until_sent()

 * for the pty buffer to be drained.

/**

 *	pty_write		-	write to a pty

 *	@tty: the tty we write from

 *	@buf: kernel buffer of data

 *	@c: bytes to write

 *

 *	Our "hardware" write method. Data is coming from the ldisc which

 *	may be in a non sleeping state. We simply throw this at the other

 *	end of the link as if we were an IRQ handler receiving stuff for

 *	the other side of the pty/tty pair.

 Stuff the data into the input queue of the other end */

 And shovel */

/**

 *	pty_write_room	-	write space

 *	@tty: tty we are writing from

 *

 *	Report how many bytes the ldisc can send into the queue for

 *	the other device.

 Set the lock flag on a pty */

 Set the packet mode on a pty */

 Get the packet mode of a pty */

 Send a signal to the slave */

 See if packet mode change of state. */

/**

 *	pty_resize		-	resize event

 *	@tty: tty being resized

 *	@ws: window size being set.

 *

 *	Update the termios variables and send the necessary signals to

 *	peform a terminal resize correctly

 For a PTY we need to lock the tty side */

 Signal the foreground process group of both ptys */

 Never used so will go away soon */

/**

 *	pty_start - start() handler

 *	pty_stop  - stop() handler

 *	@tty: tty being flow-controlled

 *

 *	Propagates the TIOCPKT status to the master pty.

 *

 *	NB: only the master pty can be in packet mode so only the slave

 *	    needs start()/stop() handlers

/**

 *	pty_common_install		-	set up the pty pair

 *	@driver: the pty driver

 *	@tty: the tty being instantiated

 *	@legacy: true if this is BSD style

 *

 *	Perform the initial set up for the tty/pty pair. Called from the

 *	tty layer when the port is first opened.

 *

 *	Locking: the caller must hold the tty_mutex

 Opening the slave first has always returned -EIO */

 This cannot in fact currently happen */

		/* We always use new tty termios data so we can do this

	/*

	 * Everything allocated ... set up the o_tty structure.

 Establish the links in both directions */

 Traditional BSD devices */

 Set PT Lock (disallow slave open) */

 Get PT Lock status */

 Set PT packet mode */

 Get PT packet mode */

 Send signal to other side of pty */

 TTY returns ENOTTY, but glibc expects EINVAL here */

	/*

	 * PTY ioctls don't require any special translation between 32-bit and

	 * 64-bit userspace, they are already compatible.

/*

 * not really modular, but the easiest way to keep compat with existing

 * bootargs behaviour is to continue using module_param here.

/*

 * The master side of a pty can do TIOCSPTLCK and thus

 * has pty_bsd_ioctl.

 Unix98 devices */

/**

 *	ptm_open_peer - open the peer of a pty

 *	@master: the open struct file of the ptmx device node

 *	@tty: the master of the pty being opened

 *	@flags: the flags for open

 *

 *	Provide a race free way for userspace to open the slave end of a pty

 *	(where they have the master fd and cannot access or trust the mount

 *	namespace /dev/pts was mounted inside).

 Compute the slave's path */

 Set PT Lock (disallow slave open) */

 Get PT Lock status */

 Set PT packet mode */

 Get PT packet mode */

 Get PT Number */

 Send signal to other side of pty */

	/*

	 * PTY ioctls don't require any special translation between 32-bit and

	 * 64-bit userspace, they are already compatible.

/**

 *	ptm_unix98_lookup	-	find a pty master

 *	@driver: ptm driver

 *	@file: unused

 *	@idx: tty index

 *

 *	Look up a pty master device. Called under the tty_mutex for now.

 *	This provides our locking.

 Master must be open via /dev/ptmx */

/**

 *	pts_unix98_lookup	-	find a pty slave

 *	@driver: pts driver

 *	@file: file pointer to tty

 *	@idx: tty index

 *

 *	Look up a pty master device. Called under the tty_mutex for now.

 *	This provides our locking for the tty pointer.

 Master must be open before slave */

 this is called once with whichever end is closed last */

/**

 *	ptmx_open		-	open a unix 98 pty master

 *	@inode: inode of device file

 *	@filp: file pointer to tty

 *

 *	Allocate a unix98 pty master device from the ptmx driver.

 *

 *	Locking: tty_mutex protects the init_dev work. tty->count should

 *		protect the rest.

 *		allocated_ptys_lock handles the list of free pty numbers

 We refuse fsnotify events on ptmx, since it's a shared resource */

 find a device that is not in use. */

	/* The tty returned here is locked so we can safely

	/*

	 * From here on out, the tty is "live", and the index and

	 * fsi will be killed/put by the tty_release()

 LOCK THE SLAVE */

 This will also put-ref the fsi

 Now create the /dev/ptmx special device */

 SPDX-License-Identifier: GPL-2.0

/*

 * n_gsm.c GSM 0710 tty multiplexor

 * Copyright (c) 2009/10 Intel Corporation

 *

 *	* THIS IS A DEVELOPMENT SNAPSHOT IT IS NOT A FINAL RELEASE *

 *

 * TO DO:

 *	Mostly done:	ioctls for setting modes/timing

 *	Partly done:	hooks so you can pull off frames to non tty devs

 *	Restart DLCI 0 when it closes ?

 *	Improve the tx engine

 *	Resolve tx side locking by adding a queue_head and routing

 *		all control traffic via it

 *	General tidy/document

 *	Review the locking/move to refcounts more (mux now moved to an

 *		alloc/free model ready)

 *	Use newest tty open/close port helpers and install hooks

 *	What to do about power functions ?

 *	Termios setting and negotiation

 *	Do we need a 'which mux are you' ioctl to correlate mux and tty sets

 *

 Defaults: these are from the specification */

 100mS */

 333mS */

 Retry 3 times */

 Use long timers for testing at low speed with debug on */

/*

 * Semi-arbitrary buffer size limits. 0710 is normally run with 32-64 byte

 * limits so this is plenty

/*

 *	struct gsm_mux_net	-	network interface

 *

 *	Created when net interface is initialized.

/*

 *	Each block of data we have queued to go out is in the form of

 *	a gsm_msg which holds everything we need in a link layer independent

 *	format

 DLCI address + flags */

 Control byte + flags */

 Length of data block (can be zero) */

 Points into buffer but not at the start */

 Sending SABM not seen UA */

 SABM/UA complete */

 Sending DISC not seen UA/DM */

 Normal Asynchronous Balanced Mode */

 Asynchronous Disconnected Mode */

/*

 *	Each active data link has a gsm_dlci structure associated which ties

 *	the link layer to an optional tty (if the tty side is open). To avoid

 *	complexity right now these are only ever freed up when the mux is

 *	shut down.

 *

 *	At the moment we don't free DLCI objects until the mux is torn down

 *	this avoid object life time issues but might be worth review later.

 Link layer */

 Protects the internal state */

 Retransmit timer for SABM and UA */

 Uplink tty if active */

 The tty bound to this DLCI if there is one */

 Queue fifo for the DLCI */

 Adaption layer in use */

 Our incoming virtual modem lines */

 Our outgoing modem lines */

 Refuse re-open */

 Flow control */

 Private copy of throttle state */

 Throttle status for outgoing */

 Packetised I/O */

 Frame being sent */

 Queued frames */

 Data handling callback */

 network interface, if created */

 DLCI 0, 62/63 are special or reserved see gsmtty_open */

/*

 *	DLCI 0 is used to pass control blocks out of band of the data

 *	flow (and with a higher link priority). One command can be outstanding

 *	at a time and we use this structure to manage them. They are created

 *	and destroyed by the user context, and updated by the receive paths

 *	and timers

 Command we are issuing */

 Data for the command in case we retransmit */

 Length of block for retransmission */

 Done flag */

 Error if any */

/*

 *	Each GSM mux we have is represented by this structure. If we are

 *	operating as an ldisc then we use this structure as our ldisc

 *	state. We need to sort out lifetimes and locking with respect

 *	to the gsm mux array. For now we don't free DLCI objects that

 *	have been instantiated until the mux itself is terminated.

 *

 *	To consider further: tty open versus mux shutdown.

 The tty our ldisc is bound to */

 Events on the GSM channel */

 Bits for GSM mode decoding */

 Framing Layer */

 TX framing buffer */

 Method for the receiver side */

 Link Layer */

 Did we initiate connection */

 Has the mux been shut down */

 Asked by remote to shut up */

 TX data outstanding */

 Pending data packets */

 Control messages */

 Retransmit timer for commands */

 Command retry counter */

 Our current pending command */

 Protects the pending command */

 Configuration */

 1 or 2 supported */

 UI or UIH */

 Timers in 1/100th of a sec */

 Retry count */

 Statistics (not currently exposed) */

/*

 *	Mux objects - needed so that we can translate a tty index into the

 *	relevant mux and DLCI.

 256 minors */

 GSM muxes */

 Save dlci open address */

 Save dlci open count */

/*

 *	This section of the driver logic implements the GSM encodings

 *	both the basic and the 'advanced'. Reliable transport is not

 *	supported.

 I is special: the rest are ..*/

 Channel commands */

 Virtual modem bits */

/*

 *	CRC table for GSM 0710

/**

 *	gsm_fcs_add	-	update FCS

 *	@fcs: Current FCS

 *	@c: Next data

 *

 *	Update the FCS to include c. Uses the algorithm in the specification

 *	notes.

/**

 *	gsm_fcs_add_block	-	update FCS for a block

 *	@fcs: Current FCS

 *	@c: buffer of data

 *	@len: length of buffer

 *

 *	Update the FCS to include c. Uses the algorithm in the specification

 *	notes.

/**

 *	gsm_read_ea		-	read a byte into an EA

 *	@val: variable holding value

 *	@c: byte going into the EA

 *

 *	Processes one byte of an EA. Updates the passed variable

 *	and returns 1 if the EA is now completely read

 Add the next 7 bits into the value */

 Was this the last byte of the EA 1 = yes*/

/**

 *	gsm_encode_modem	-	encode modem data bits

 *	@dlci: DLCI to encode from

 *

 *	Returns the correct GSM encoded modem status bits (6 bit field) for

 *	the current status of the DLCI and attached tty object

 FC is true flow control not modem bits */

/**

 *	gsm_print_packet	-	display a frame for debug

 *	@hdr: header to print before decode

 *	@addr: address EA from the frame

 *	@cr: C/R bit from the frame

 *	@control: control including PF bit

 *	@data: following data bytes

 *	@dlen: length of data

 *

 *	Displays a packet in human readable format for debugging purposes. The

 *	style is based on amateur radio LAP-B dump display.

/*

 *	Link level transmission side

/**

 *	gsm_stuff_frame	-	bytestuff a packet

 *	@input: input buffer

 *	@output: output buffer

 *	@len: length of input

 *

 *	Expand a buffer by bytestuffing it. The worst case size change

 *	is doubling and the caller is responsible for handing out

 *	suitable sized buffers.

/**

 *	gsm_send	-	send a control frame

 *	@gsm: our GSM mux

 *	@addr: address for control frame

 *	@cr: command/response bit

 *	@control:  control byte including PF bit

 *

 *	Format up and transmit a control frame. These do not go via the

 *	queueing logic as they should be transmitted ahead of data when

 *	they are needed.

 *

 *	FIXME: Lock versus data TX path

 Length of data = 0 */

 Control frame + packing (but not frame stuffing) in mode 1 */

 Stuffing may double the size worst case */

 Now add the SOF markers */

 FIXME: we can omit the lead one in many cases */

/**

 *	gsm_response	-	send a control response

 *	@gsm: our GSM mux

 *	@addr: address for control frame

 *	@control:  control byte including PF bit

 *

 *	Format up and transmit a link level response frame.

/**

 *	gsm_command	-	send a control command

 *	@gsm: our GSM mux

 *	@addr: address for control frame

 *	@control:  control byte including PF bit

 *

 *	Format up and transmit a link level command frame.

 Data transmission */

 ADDR CTRL [LEN.2] DATA FCS */

/**

 *	gsm_data_alloc		-	allocate data frame

 *	@gsm: GSM mux

 *	@addr: DLCI address

 *	@len: length excluding header and FCS

 *	@ctrl: control byte

 *

 *	Allocate a new data buffer for sending frames with data. Space is left

 *	at the front for header bytes but that is treated as an implementation

 *	detail and not for the high level code to use

 Allow for FCS */

/**

 *	gsm_data_kick		-	poke the queue

 *	@gsm: GSM Mux

 *	@dlci: DLCI sending the data

 *

 *	The tty device has called us to indicate that room has appeared in

 *	the transmit queue. Ram more data into the pipe if we have any

 *	If we have been flow-stopped by a CMD_FCOFF, then we can only

 *	send messages on DLCI0 until CMD_FCON

 *

 *	FIXME: lock against link layer control transmissions

 FIXME: Can eliminate one SOF in many more cases */

/**

 *	__gsm_data_queue		-	queue a UI or UIH frame

 *	@dlci: DLCI sending the data

 *	@msg: message queued

 *

 *	Add data to the transmit queue and try and get stuff moving

 *	out of the mux tty if not already doing so. The Caller must hold

 *	the gsm tx lock.

 Fill in the header */

 bits 7 - 15 */

 bits 0 - 6 */

 Ugly protocol layering violation */

	/* Move the header back and adjust the length, also allow for the FCS

 Add to the actual output queue */

/**

 *	gsm_data_queue		-	queue a UI or UIH frame

 *	@dlci: DLCI sending the data

 *	@msg: message queued

 *

 *	Add data to the transmit queue and try and get stuff moving

 *	out of the mux tty if not already doing so. Take the

 *	the gsm tx lock and dlci lock.

/**

 *	gsm_dlci_data_output	-	try and push data out of a DLCI

 *	@gsm: mux

 *	@dlci: the DLCI to pull data from

 *

 *	Pull data from a DLCI and send it into the transmit queue if there

 *	is data. Keep to the MRU of the mux. This path handles the usual tty

 *	interface which is a byte stream with optional modem data.

 *

 *	Caller must hold the tx_lock of the mux.

 MTU/MRU count only the data bits */

		/* FIXME: need a timer or something to kick this so it can't

 Unstructured */

		case 2:	/* Unstructed with modem bits.

 Bytes of data we used up */

/**

 *	gsm_dlci_data_output_framed  -	try and push data out of a DLCI

 *	@gsm: mux

 *	@dlci: the DLCI to pull data from

 *

 *	Pull data from a DLCI and send it into the transmit queue if there

 *	is data. Keep to the MRU of the mux. This path handles framed data

 *	queued as skbuffs to the DLCI.

 *

 *	Caller must hold the tx_lock of the mux.

 One byte per frame is used for B/F flags */

 dlci->skb is locked by tx_lock */

 MTU/MRU count only the data bits */

 Over long frame, bin it */

	/* FIXME: need a timer or something to kick this so it can't

 Interruptible framed (Packetised Data) */

 Flag byte to carry the start/end info */

 EA */

/**

 *	gsm_dlci_data_sweep		-	look for data to send

 *	@gsm: the GSM mux

 *

 *	Sweep the GSM mux channels in priority order looking for ones with

 *	data to send. We could do with optimising this scan a bit. We aim

 *	to fill the queue totally or up to TX_THRESH_HI bytes. Once we hit

 *	TX_THRESH_LO we get called again

 *

 *	FIXME: We should round robin between groups and in theory you can

 *	renegotiate DLCI priorities with optional stuff. Needs optimising.

 Priority ordering: We should do priority with RR of the groups */

 DLCI empty - try the next */

/**

 *	gsm_dlci_data_kick	-	transmit if possible

 *	@dlci: DLCI to kick

 *

 *	Transmit data from this DLCI if the queue is empty. We can't rely on

 *	a tty wakeup except when we filled the pipe so we need to fire off

 *	new data ourselves in other cases.

 If we have nothing running then we need to fire up */

/*

 *	Control message processing

/**

 *	gsm_control_reply	-	send a response frame to a control

 *	@gsm: gsm channel

 *	@cmd: the command to use

 *	@data: data to follow encoded info

 *	@dlen: length of data

 *

 *	Encode up and queue a UI/UIH frame containing our response.

 Clear C/R */

/**

 *	gsm_process_modem	-	process received modem status

 *	@tty: virtual tty bound to the DLCI

 *	@dlci: DLCI to affect

 *	@modem: modem bits (full EA)

 *	@clen: command length

 *

 *	Used when a modem control message or line state inline in adaption

 *	layer 2 is processed. Sort out the local modem state and throttles

	/* The modem status command can either contain one octet (v.24 signals)

	   or two octets (v.24 signals + break signals). The length field will

	   either be 2 or 3 respectively. This is specified in section

 Flow control/ready to communicate */

 Need to throttle our output on this device */

 Map modem bits */

 Carrier drop -> hangup */

/**

 *	gsm_control_modem	-	modem status received

 *	@gsm: GSM channel

 *	@data: data following command

 *	@clen: command length

 *

 *	We have received a modem status control message. This is used by

 *	the GSM mux protocol to pass virtual modem line status and optionally

 *	to indicate break signals. Unpack it, convert to Linux representation

 *	and if need be stuff a break message down the tty.

 Must be at least one byte following the EA */

 Closed port, or invalid ? */

/**

 *	gsm_control_rls		-	remote line status

 *	@gsm: GSM channel

 *	@data: data bytes

 *	@clen: data length

 *

 *	The modem sends us a two byte message on the control channel whenever

 *	it wishes to send us an error state from the virtual link. Stuff

 *	this into the uplink tty if present

 Must be at least one byte following ea */

 Closed port, or invalid ? */

 No error ? */

/**

 *	gsm_control_message	-	DLCI 0 control processing

 *	@gsm: our GSM mux

 *	@command:  the command EA

 *	@data: data beyond the command/length EAs

 *	@clen: length

 *

 *	Input processor for control messages from the other end of the link.

 *	Processes the incoming request and queues a response frame or an

 *	NSC response if not supported

 Modem wishes to close down */

 Modem wishes to test, reply with the data */

 Modem can accept data again */

 Kick the link in case it is idling */

 Modem wants us to STFU */

 Out of band modem line change indicator for a DLCI */

 Out of band error reception for a DLCI */

 Modem wishes to enter power saving state */

 Optional unsupported commands */

 Parameter negotiation */

 Remote port negotiation */

 Service negotiation command */

 Reply to bad commands with an NSC */

/**

 *	gsm_control_response	-	process a response to our control

 *	@gsm: our GSM mux

 *	@command: the command (response) EA

 *	@data: data beyond the command/length EA

 *	@clen: length

 *

 *	Process a response to an outstanding command. We only allow a single

 *	control message in flight so this is fairly easy. All the clean up

 *	is done by the caller, we just update the fields, flag it as done

 *	and return

 Does the reply match our command */

 Our command was replied to, kill the retry timer */

 Rejected by the other end */

/**

 *	gsm_control_transmit	-	send control packet

 *	@gsm: gsm mux

 *	@ctrl: frame to send

 *

 *	Send out a pending control command (called under control lock)

 command */

/**

 *	gsm_control_retransmit	-	retransmit a control frame

 *	@t: timer contained in our gsm object

 *

 *	Called off the T2 timer expiry in order to retransmit control frames

 *	that have been lost in the system somewhere. The control_lock protects

 *	us from colliding with another sender or a receive completion event.

 *	In that situation the timer may still occur in a small window but

 *	gsm->pending_cmd will be NULL and we just let the timer expire.

/**

 *	gsm_control_send	-	send a control frame on DLCI 0

 *	@gsm: the GSM channel

 *	@command: command  to send including CR bit

 *	@data: bytes of data (must be kmalloced)

 *	@clen: length of the block to send

 *

 *	Queue and dispatch a control command. Only one command can be

 *	active at a time. In theory more can be outstanding but the matching

 *	gets really complicated so for now stick to one outstanding.

 If DLCI0 is in ADM mode skip retries, it won't respond */

/**

 *	gsm_control_wait	-	wait for a control to finish

 *	@gsm: GSM mux

 *	@control: control we are waiting on

 *

 *	Waits for the control to complete or time out. Frees any used

 *	resources and returns 0 for success, or an error if the remote

 *	rejected or ignored the request.

/*

 *	DLCI level handling: Needs krefs

/*

 *	State transitions and timers

/**

 *	gsm_dlci_close		-	a DLCI has closed

 *	@dlci: DLCI that closed

 *

 *	Perform processing when moving a DLCI into closed state. If there

 *	is an attached tty this is hung up

 Unregister gsmtty driver,report gsmtty dev remove uevent for user */

	/* A DLCI 0 close is a MUX termination so we need to kick that

/**

 *	gsm_dlci_open		-	a DLCI has opened

 *	@dlci: DLCI that opened

 *

 *	Perform processing when moving a DLCI into open state.

	/* Note that SABM UA .. SABM UA first UA lost can mean that we go

 This will let a tty open continue */

 Register gsmtty driver,report gsmtty dev add uevent for user */

/**

 *	gsm_dlci_t1		-	T1 timer expiry

 *	@t: timer contained in the DLCI that opened

 *

 *	The T1 timer handles retransmits of control frames (essentially of

 *	SABM and DISC). We resend the command until the retry count runs out

 *	in which case an opening port goes back to closed and a closing port

 *	is simply put into closed state (any further frames from the other

 *	end will get a DM response)

 *

 *	Some control dlci can stay in ADM mode with other dlci working just

 *	fine. In that case we can just keep the control dlci open after the

 *	DLCI_OPENING retries time out.

/**

 *	gsm_dlci_begin_open	-	start channel open procedure

 *	@dlci: DLCI to open

 *

 *	Commence opening a DLCI from the Linux side. We issue SABM messages

 *	to the modem which should then reply with a UA or ADM, at which point

 *	we will move into open state. Opening is done asynchronously with retry

 *	running off timers and the responses.

/**

 *	gsm_dlci_begin_close	-	start channel open procedure

 *	@dlci: DLCI to open

 *

 *	Commence closing a DLCI from the Linux side. We issue DISC messages

 *	to the modem which should then reply with a UA, at which point we

 *	will move into closed state. Closing is done asynchronously with retry

 *	off timers. We may also receive a DM reply from the other end which

 *	indicates the channel was already closed.

/**

 *	gsm_dlci_data		-	data arrived

 *	@dlci: channel

 *	@data: block of bytes received

 *	@clen: length of received block

 *

 *	A UI or UIH frame has arrived which contains data for a channel

 *	other than the control channel. If the relevant virtual tty is

 *	open we shovel the bits down it, if not we drop them.

 krefs .. */

 Unsupported types */

 Packetised interruptible data */

 Packetised uininterruptible voice/data */

 Asynchronous serial with line state in each frame */

 Line state will go via DLCI 0 controls only */

/**

 *	gsm_dlci_command	-	data arrived on control channel

 *	@dlci: channel

 *	@data: block of bytes received

 *	@len: length of received block

 *

 *	A UI or UIH frame has arrived which contains data for DLCI 0 the

 *	control channel. This should contain a command EA followed by

 *	control data bytes. The command EA contains a command/response bit

 *	and we divide up the work accordingly.

 See what command is involved */

 FIXME: this is properly an EA */

 Malformed command ? */

/*

 *	Allocate/Free DLCI channels

/**

 *	gsm_dlci_alloc		-	allocate a DLCI

 *	@gsm: GSM mux

 *	@addr: address of the DLCI

 *

 *	Allocate and install a new DLCI object into the GSM mux.

 *

 *	FIXME: review locking races

/**

 *	gsm_dlci_free		-	free DLCI

 *	@port: tty port for DLCI to free

 *

 *	Free up a DLCI.

 *

 *	Can sleep.

/**

 *	gsm_dlci_release		-	release DLCI

 *	@dlci: DLCI to destroy

 *

 *	Release a DLCI. Actual free is deferred until either

 *	mux is closed or tty is closed - whichever is last.

 *

 *	Can sleep.

/*

 *	LAPBish link layer logic

/**

 *	gsm_queue		-	a GSM frame is ready to process

 *	@gsm: pointer to our gsm mux

 *

 *	At this point in time a frame has arrived and been demangled from

 *	the line encoding. All the differences between the encodings have

 *	been handled below us and the frame is unpacked into the structures.

 *	The fcs holds the header FCS but any data FCS must be added here.

	/* We have to sneak a look at the packet body to do the FCS.

		/* WARNING: gsm->received_fcs is used for

		gsm->encoding = 0 only.

		In this case it contain the last piece of data

 C/R bit */

 Flip so 1 always means command */

 Save dlci open address */

 Real close complete */

 clear dlci address */

 DM can be valid unsolicited */

/**

 *	gsm0_receive	-	perform processing for non-transparency

 *	@gsm: gsm data for this ldisc instance

 *	@c: character

 *

 *	Receive bytes in gsm mode 0

 SOF marker */

 Address EA */

 Control Byte */

 Length EA */

 Data */

 FCS follows the packet */

/**

 *	gsm1_receive	-	perform processing for non-transparency

 *	@gsm: gsm data for this ldisc instance

 *	@c: character

 *

 *	Receive bytes in mode 1 (Advanced option)

		/* EOF is only valid in frame if we have got to the data state

 Extract the FCS */

 Any partial frame was a runt so go back to start */

		/* A SOF in GSM_START means we are still reading idling or

 Only an unescaped SOF gets us out of GSM search */

 First byte after SOF */

 Address continuation */

 Control Byte */

 Data */

 Allow one for the FCS */

 Over-long - eg a dropped SOF */

/**

 *	gsm_error		-	handle tty error

 *	@gsm: ldisc data

 *	@data: byte received (may be invalid)

 *	@flag: error received

 *

 *	Handle an error in the receipt of data for a frame. Currently we just

 *	go back to hunting for a SOF.

 *

 *	FIXME: better diagnostics ?

	/* In theory disconnecting DLCI 0 is sufficient but for some

 Now we are sure T2 has stopped */

/**

 *	gsm_cleanup_mux		-	generic GSM protocol cleanup

 *	@gsm: our mux

 *

 *	Clean up the bits of the mux which are the same for all framing

 *	protocols. Remove the mux from the mux table, stop all the timers

 *	and then shut down each device hanging up the channels as we go.

 open failed before registering => nothing to do */

 Now we are sure T2 has stopped */

 Free up any link layer users */

 Now wipe the queues */

/**

 *	gsm_activate_mux	-	generic GSM setup

 *	@gsm: our mux

 *

 *	Set up the bits of the mux which are the same for all framing

 *	protocols. Add the mux to the mux table so it can be opened and

 *	finally kick off connecting to DLCI 0 on the modem.

 Tty opens are now permissible */

/**

 *	gsm_free_mux		-	free up a mux

 *	@gsm: mux to free

 *

 *	Dispose of allocated resources for a dead mux

/**

 *	gsm_free_muxr		-	free up a mux

 *	@ref: kreference to the mux to free

 *

 *	Dispose of allocated resources for a dead mux

/**

 *	gsm_alloc_mux		-	allocate a mux

 *

 *	Creates a new mux ready for activation.

 Default to encoding 1 so these should be 64 */

 Avoid early tty opens */

 Not supported */

 Stuff we don't support yet - UI or I frame transport, windowing */

 Check the MRU/MTU range looks sane */

 Basic, advanced, no I */

 UIH and UI only */

	/*

	 * See what is needed for reconfiguration

 Timing fields */

 Requires care */

	/*

	 * Close down what is needed, restart and initiate the new

	 * configuration

	/*

	 * FIXME: We need to separate activation/deactivation from adding

	 * and removing from the mux array

/**

 *	gsmld_output		-	write to link

 *	@gsm: our mux

 *	@data: bytes to output

 *	@len: size

 *

 *	Write a block of data from the GSM mux to the data channel. This

 *	will eventually be serialized from above but at the moment isn't.

/**

 *	gsmld_attach_gsm	-	mode set up

 *	@tty: our tty structure

 *	@gsm: our mux

 *

 *	Set up the MUX for basic mode and commence connecting to the

 *	modem. Currently called from the line discipline set up but

 *	will need moving to an ioctl path.

		/* Don't register device 0 - this is the control channel and not

 Base for this MUX */

/**

 *	gsmld_detach_gsm	-	stop doing 0710 mux

 *	@tty: tty attached to the mux

 *	@gsm: mux

 *

 *	Shutdown and then clean up the resources used by the line discipline

 Base for this MUX */

 FASYNC if needed ? */

 If clogged call tty_throttle(tty); */

/**

 *	gsmld_flush_buffer	-	clean input queue

 *	@tty:	terminal device

 *

 *	Flush the input buffer. Called when the line discipline is

 *	being closed, when the tty layer wants the buffer flushed (eg

 *	at hangup).

/**

 *	gsmld_close		-	close the ldisc for this tty

 *	@tty: device

 *

 *	Called from the terminal layer when this line discipline is

 *	being shut down, either because of a close or becsuse of a

 *	discipline change. The function will not be called while other

 *	ldisc methods are in progress.

 Do other clean up here */

/**

 *	gsmld_open		-	open an ldisc

 *	@tty: terminal to open

 *

 *	Called when this line discipline is being attached to the

 *	terminal device. Can sleep. Called serialized so that no

 *	other events will occur in parallel. No further open will occur

 *	until a close.

 Attach our ldisc data */

 Attach the initial passive connection */

/**

 *	gsmld_write_wakeup	-	asynchronous I/O notifier

 *	@tty: tty device

 *

 *	Required for the ptys, serial driver etc. since processes

 *	that attach themselves to the master and rely on ASYNC

 *	IO must be woken up

 Queue poll */

/**

 *	gsmld_read		-	read function for tty

 *	@tty: tty device

 *	@file: file object

 *	@buf: userspace buffer pointer

 *	@nr: size of I/O

 *	@cookie: unused

 *	@offset: unused

 *

 *	Perform reads for the line discipline. We are guaranteed that the

 *	line discipline will not be closed under us but we may get multiple

 *	parallel readers and must handle this ourselves. We may also get

 *	a hangup. Always called in user context, may sleep.

 *

 *	This code must be sure never to sleep through a hangup.

/**

 *	gsmld_write		-	write function for tty

 *	@tty: tty device

 *	@file: file object

 *	@buf: userspace buffer pointer

 *	@nr: size of I/O

 *

 *	Called when the owner of the device wants to send a frame

 *	itself (or some other control data). The data is transferred

 *	as-is and must be properly framed and checksummed as appropriate

 *	by userspace. Frames are either sent whole or not at all as this

 *	avoids pain user side.

/**

 *	gsmld_poll		-	poll method for N_GSM0710

 *	@tty: terminal device

 *	@file: file accessing it

 *	@wait: poll table

 *

 *	Called when the line discipline is asked to poll() for data or

 *	for special events. This code is not serialized with respect to

 *	other events save open/close.

 *

 *	This code must be sure never to sleep through a hangup.

 *	Called without the kernel lock held - fine

/*

 *	Network interface

 *

 And tell the kernel when the last transmit started. */

 called when a packet did not ack after watchdogtimeout */

 Tell syslog we are hosed. */

 Update statistics */

 Allocate an sk_buff */

 We got no receive buffer. */

 Ship it off to the kernel */

 update out statistics */

 fill in the other fields */

 caller holds the dlci mutex */

 caller holds the dlci mutex */

 Already in a non tty mode */

 return net name */

 reconfigure dlci for network */

 return network index */

 Line discipline for real tty */

/*

 *	Virtual tty side

 Data bytes */

 DLCI, EA, 1 */

 Valid, EA */

 Not yet open so no carrier info */

	/*

	 * Basic mode with control channel in ADM mode may not respond

	 * to CMD_MSC at all and modem_rx is empty.

 FIXME: we need to lock gsm_mux for lifetimes of ttys eventually */

 62/63 reserved */

	/* If DLCI 0 is not yet fully open return an error.

	This is ok from a locking

	perspective as we don't have to worry about this

	/* We could in theory open and close before we wait - eg if we get

 Start sending off SABM messages */

 And wait for virtual carrier */

 Stuff the bytes into the fifo queue */

 Need to kick the channel */

	/* Caution needed: If we implement reliable transport classes

	   then the data being transmitted can't simply be junked once

	   it has first hit the stack. Until then we can just blow it

 Need to unhook this DLCI from the transmit queue logic */

	/* The FIFO handles the queue so the kernel will do the right

	   thing waiting on chars_in_buffer before calling us. No work

 return net interface index or error code */

	/* For the moment its fixed. In actual fact the speed information

	   for the virtual channel can be propogated in both directions by

	   the RPN control message. This however rapidly gets nasty as we

	   then have to remap modem signals each way according to whether

 Send an MSC with DTR cleared */

 Send an MSC with DTR set */

 Off */

	if (state == -1)	/* "On indefinitely" - we can't encode this

 mS to encoding */

 Best effort */

 Virtual ttys for the demux */

 Fill in our line protocol discipline, and register it */

 Dynamic */

 Fixme */

 SPDX-License-Identifier: GPL-2.0+

/*

 *          mxser.c  -- MOXA Smartio/Industio family multiport serial driver.

 *

 *      Copyright (C) 1999-2006  Moxa Technologies (support@moxa.com).

 *	Copyright (C) 2006-2008  Jiri Slaby <jirislaby@gmail.com>

 *

 *      This code is loosely based on the 1.8 moxa driver which is based on

 *	Linux serial driver, written by Linus Torvalds, Theodore T'so and

 *	others.

 *

 *	Fed through a cleanup, indent and remove of non 2.6 code by Alan Cox

 *	<alan@lxorguk.ukuu.org.uk>. The original 1.8 code is available on

 *	www.moxa.com.

 *	- Fixed x86_64 cleanness

/*

 *	Semi-public control interfaces

/*

 *	MOXA ioctls

 --------------------------------------------------- */

/*

 * Follow just what Moxa Must chip defines.

 *

 * When LCR register (offset 0x03) is written the following value, the Must chip

 * will enter enhanced mode. And a write to EFR (offset 0x02) bit 6,7 will

 * change bank.

 when enhanced mode is enabled, access to general bank register */

 error in receive FIFO */

 enhanced register bank select and enhanced mode setting register */

 This works only when LCR register equals to 0xBF */

 enhanced mode enable */

 enhanced register bank set 0, 1, 2 */

 set XON1 value register, when LCR=0xBF and change to bank0 */

 set XON2 value register, when LCR=0xBF and change to bank0 */

 set XOFF1 value register, when LCR=0xBF and change to bank0 */

 set XOFF2 value register, when LCR=0xBF and change to bank0 */

 good data mode enable */

 only good data put into RxFIFO */

 enable CTS interrupt */

 enable RTS interrupt */

 enable Xon/Xoff interrupt */

 enable GDA interrupt */

 GDA interrupt pending */

 received Xon/Xoff or specical interrupt pending */

 RTS/CTS change state interrupt pending */

 software flow control on chip mask value */

 send Xon1/Xoff1 */

 send Xon2/Xoff2 */

 send Xon1,Xon2/Xoff1,Xoff2 */

 don't send Xon/Xoff */

 Tx software flow control mask */

 don't receive Xon/Xoff */

 receive Xon1/Xoff1 */

 receive Xon2/Xoff2 */

 receive Xon1,Xon2/Xoff1,Xoff2 */

 Rx software flow control mask */

 Max. boards */

 Max. ports per board */

/* driver_data correspond to the lines in the structure above

 RC7000 */

 Variables for insmod */

 UART type */

 xon/xoff character */

 Interrupt Enable Register */

 Modem control register */

 FIFO control register */

 kernel counters for 4 input interrupts */

 0 = OTHER_UART */

	/*

	 * worst case (128 * 1000 * 10 * 18432) needs 35 bits, so divide in the

	 * u64 domain

 Add .02 seconds of slop */

 set DLAB */

 LS of divisor */

 MS of divisor */

 reset DLAB */

/*

 * This routine is called to set the UART divisor registers to match

 * the specified baud rate for a serial port.

 Use previous rate on a failure */

 byte size and parity */

 CTS flow control flag and modem status interrupts */

	/*

	 * Set up parity check flag

		/*

		 * If we're ignore parity and break indicators, ignore

		 * overruns too.  (For real raw support).

 update input line counters */

	/*

	 * Clear the FIFO buffers and disable them

	 * (they will be reenabled in mxser_change_speed())

	/*

	 * At this point there's no way the LSR could still be 0xFF;

	 * if it is, then bail out, because there's likely no UART

	 * here.

	/*

	 * Clear the interrupt registers.

	/*

	 * Now, initialize the UART

 reset DLAB */

	/*

	 * Finally, enable interrupts

 enable interrupts */

	/*

	 * And clear the interrupt registers again for luck.

	/*

	 * and set the speed of the serial port

/*

 * This routine will shutdown a serial port

	/*

	 * clear delta_msr_wait queue to avoid mem leaks: we may free the irq

	 * here so the queue might never be waken up

	/*

	 * Free the xmit buffer, if necessary

 clear Rx/Tx FIFO's */

 read data port to reset things */

/*

 * This routine is called whenever a serial port is opened.  It

 * enables interrupts for a serial port, linking in its async structure into

 * the IRQ chain.   It also performs the serial-specific

 * initialization for the tty structure.

	/*

	 * At this point we stop accepting input.  To do this, we

	 * disable the receive line status interrupts, and tell the

	 * interrupt driver to stop checking the data ready bit in the

	 * line status register.

	/*

	 * Before we drop DTR, make sure the UART transmitter

	 * has completely drained; this is especially

	 * important if there is a transmit FIFO!

/*

 * This routine is called when the serial port gets closed.  First, we

 * wait for the last remaining data to be sent.  Then, we unlink its

 * async structure from the interrupt chain if necessary, and we free

 * that IRQ if nothing is left in the chain.

	/* Right now the tty_port set is done outside of the close_end helper

/*

 * ------------------------------------------------------------

 * friends of mxser_ioctl()

 * ------------------------------------------------------------

		/*

		 * OK, past this point, all the error checking has been done.

		 * At this point, we start making changes.....

/*

 * mxser_get_lsr_info - get line status register info

 *

 * Purpose: Let user call ioctl() to get info when the UART physically

 *	    is emptied.  On bus types like RS485, the transmitter must

 *	    release the bus after transmitting. This must be done when

 *	    the transmit shift register is empty, not be done when the

 *	    transmit holding register is empty.  This functionality

 *	    allows an RS485 driver to be written in user space.

 atomic copy */

 We should likely switch to TIOCGRS485/TIOCSRS485. */

 Get line status register */

		/*

		 * Wait for any of the 4 modem inputs (DCD,RI,DSR,CTS) to change

		 * - mask passed in arg for lines of interest

		 *   (use |'ed TIOCM_RNG/DSR/CD/CTS for masking)

		 * Caller should use TIOCGICOUNT to see which one it was

 note the counters on entry */

	/*

	 * Get counter of input serial line interrupts (DCD,RI,DSR,CTS)

	 * Return: write counters to the user passed counter struct

	 * NB: both 1->0 and 0->1 transitions are counted except for

	 *     RI where only 0->1 is counted.

/*

 * This routine is called by the upper-layer tty layer to signal that

 * incoming characters should be throttled.

 startrx */

/*

 * mxser_stop() and mxser_start()

 *

 * This routines are called before setting or resetting tty->flow.stopped.

 * They enable or disable transmitter interrupts, as necessary.

 Handle sw stopped */

/*

 * mxser_wait_until_sent() --- wait until the transmitter is empty

 Just in case.... */

	/*

	 * Set the check interval to be 1/5 of the estimated time to

	 * send a single character, and make it at least 1.  The check

	 * interval should also be less than the timeout.

	 *

	 * Note: we have to use pretty tight timings here to satisfy

	 * the NIST-PCTS.

	/*

	 * If the transmitter hasn't cleared in twice the approximate

	 * amount of time to send the entire FIFO, it probably won't

	 * ever clear.  This assumes the UART isn't doing flow

	 * control, which is currently the case.  Hence, if it ever

	 * takes longer than info->timeout, this is probably due to a

	 * UART bug of some kind.  So, we clamp the timeout parameter at

	 * 2*info->timeout.

/*

 * This routine is called by tty_hangup() when a hangup is signaled.

/*

 * mxser_rs_break() --- routine which turns the break handling on or off

/*

 * This is the serial driver's generic interrupt routine

/*

 * The MOXA Smartio/Industio serial driver boot-time initialization code!

 exception....CP-102 */

 set to RS232 mode by default */

 Enhance mode enabled here */

 before set INT ISR, disable all int */

 io address */

 vector */

 irq */

 Initialize the tty_driver structure */

 SPDX-License-Identifier: GPL-2.0+

****************************************************************************/

/*

 *           moxa.c  -- MOXA Intellio family multiport serial driver.

 *

 *      Copyright (C) 1999-2000  Moxa Technologies (support@moxa.com).

 *      Copyright (c) 2007 Jiri Slaby <jirislaby@gmail.com>

 *

 *      This code is loosely based on the Linux serial driver, written by

 *      Linus Torvalds, Theodore T'so and others.

/*

 *    MOXA Intellio Series Driver

 *      for             : LINUX

 *      date            : 1999/1/7

 *      version         : 5.1

 get input buffered count */

 get output buffered count */

/*

 *    System Configuration

/*

 *    for C218 BIOS initialization

 BIOS running status    */

 diagnostic status      */

 WORD (0x218 for C218) */

 WORD           */

 BYTE           */

 BYTE (1:ok)            */

 8 bytes for 8 ports    */

 8 bytes for 8 ports    */

 8 bytes for 8 ports    */

 8 bytes for 8 ports    */

/*

 *    for C320 BIOS initialization

 for C320_status        */

 BIOS running status    */

 diagnostic status      */

 WORD (0320H for C320) */

 WORD           */

 WORD           */

 WORD (1:ok)            */

 WORD           */

 WORD           */

 starting addr of static page  */

 starting addr of dynamic page */

 starting addr of C218 BIOS prg */

 select page and reset control */

/*

 *    Function Codes

 C320 firmware not supported */

 C320 firmware not supported */

 C320 firmware not supported */

/*

 *    Dual-Ported RAM

/*

 *    Interrupt Status

 receiver data O.K.             */

 transmit buffer empty  */

 function complete              */

 received break         */

#define IntrLine	0x10	/* line status change

 received INTR code             */

 received QUIT code             */

 received EOF code              */

 rx data count reach trigger value */

 tx data count below trigger value */

/*

 *    DATA BUFFER in DRAM

#define Extern_table	0x400	/* Base address of the external table

				   (24 words *    64) total 3K bytes

 96 bytes                       */

 read pointer for RX buffer     */

 write pointer for RX buffer    */

 read pointer for TX buffer     */

 write pointer for TX buffer    */

 IRQ flag and general flag      */

 B7 B6 B5 B4 B3 B2 B1 B0              */

  x  x  x  x  |  |  |  |            */

              |  |  |  + CTS flow   */

              |  |  +--- RTS flow   */

              |  +------ TX Xon/Xoff */

              +--------- RX Xon/Xoff */

 received break count   */

 if non-0: enable TX irq        */

 8K bytes */

 32K bytes */

/*

 *    Host Status

 used in VTIME control */

/*

 *    Flag status

/*

 *    FlowControl

 mode definition */

 Don't change this value */

 Don't change this value */

/*

 *    Define the Moxa PCI vendor and device IDs.

 CONFIG_PCI */

 Protected by the port lock */

 statusflags */

/*

 * static functions:

/*

 * moxa board interface functions:

/*

 * I/O functions

/*

 * TTY operations

/*

 * HW init

 reset */

 download BIOS */

 restart */

 Select Page 1 */

 Select Page 2 */

 ASIC board */

 may change numPorts */

 0x34303430 */

 UNIX = 3 */

 C218T=1, C320T=2, CP204=3 */

 bios */

 we skip the tty section (lens[1]), since we don't need it */

 comm */

 skip another tty */

 pci hot-un-plug support */

 CONFIG_PCI */

 Having one more port only for ioctls is ugly */

 Find the boards defined from module args. */

 ISA boards */

		/*

		 * Make it possible to wakeup anything waiting for output

		 * in tty_ioctl.c, etc.

 RX */

 flush RX */

 nothing else to do */

 port irq status */

 ACK port */

 disable tx intr */

 BREAK */

 ACK */

*****************************************************************************/

 Not put the baud rate into the termios data */

/*****************************************************************************

 *	Driver level functions: 					     *

/*

 *    Moxa Port Number Description:

 *

 *      MOXA serial driver supports up to 4 MOXA-C218/C320 boards. And,

 *      the port number using in MOXA driver functions will be 0 to 31 for

 *      first MOXA board, 32 to 63 for second, 64 to 95 for third and 96

 *      to 127 for fourth. For example, if you setup three MOXA boards,

 *      first board is C218, second board is C320-16 and third board is

 *      C320-32. The port number of first board (C218 - 8 ports) is from

 *      0 to 7. The port number of second board (C320 - 16 ports) is form

 *      32 to 47. The port number of third board (C320 - 32 ports) is from

 *      64 to 95. And those port numbers form 8 to 31, 48 to 63 and 96 to

 *      127 will be invalid.

 *

 *

 *      Moxa Functions Description:

 *

 *      Function 1:     Driver initialization routine, this routine must be

 *                      called when initialized driver.

 *      Syntax:

 *      void MoxaDriverInit();

 *

 *

 *      Function 2:     Moxa driver private IOCTL command processing.

 *      Syntax:

 *      int  MoxaDriverIoctl(unsigned int cmd, unsigned long arg, int port);

 *

 *           unsigned int cmd   : IOCTL command

 *           unsigned long arg  : IOCTL argument

 *           int port           : port number (0 - 127)

 *

 *           return:    0  (OK)

 *                      -EINVAL

 *                      -ENOIOCTLCMD

 *

 *

 *      Function 6:     Enable this port to start Tx/Rx data.

 *      Syntax:

 *      void MoxaPortEnable(int port);

 *           int port           : port number (0 - 127)

 *

 *

 *      Function 7:     Disable this port

 *      Syntax:

 *      void MoxaPortDisable(int port);

 *           int port           : port number (0 - 127)

 *

 *

 *      Function 10:    Setting baud rate of this port.

 *      Syntax:

 *      speed_t MoxaPortSetBaud(int port, speed_t baud);

 *           int port           : port number (0 - 127)

 *           long baud          : baud rate (50 - 115200)

 *

 *           return:    0       : this port is invalid or baud < 50

 *                      50 - 115200 : the real baud rate set to the port, if

 *                                    the argument baud is large than maximun

 *                                    available baud rate, the real setting

 *                                    baud rate will be the maximun baud rate.

 *

 *

 *      Function 12:    Configure the port.

 *      Syntax:

 *      int  MoxaPortSetTermio(int port, struct ktermios *termio, speed_t baud);

 *           int port           : port number (0 - 127)

 *           struct ktermios * termio : termio structure pointer

 *	     speed_t baud	: baud rate

 *

 *           return:    -1      : this port is invalid or termio == NULL

 *                      0       : setting O.K.

 *

 *

 *      Function 13:    Get the DTR/RTS state of this port.

 *      Syntax:

 *      int  MoxaPortGetLineOut(int port, int *dtrState, int *rtsState);

 *           int port           : port number (0 - 127)

 *           int * dtrState     : pointer to INT to receive the current DTR

 *                                state. (if NULL, this function will not

 *                                write to this address)

 *           int * rtsState     : pointer to INT to receive the current RTS

 *                                state. (if NULL, this function will not

 *                                write to this address)

 *

 *           return:    -1      : this port is invalid

 *                      0       : O.K.

 *

 *

 *      Function 14:    Setting the DTR/RTS output state of this port.

 *      Syntax:

 *      void MoxaPortLineCtrl(int port, int dtrState, int rtsState);

 *           int port           : port number (0 - 127)

 *           int dtrState       : DTR output state (0: off, 1: on)

 *           int rtsState       : RTS output state (0: off, 1: on)

 *

 *

 *      Function 15:    Setting the flow control of this port.

 *      Syntax:

 *      void MoxaPortFlowCtrl(int port, int rtsFlow, int ctsFlow, int rxFlow,

 *                            int txFlow,int xany);

 *           int port           : port number (0 - 127)

 *           int rtsFlow        : H/W RTS flow control (0: no, 1: yes)

 *           int ctsFlow        : H/W CTS flow control (0: no, 1: yes)

 *           int rxFlow         : S/W Rx XON/XOFF flow control (0: no, 1: yes)

 *           int txFlow         : S/W Tx XON/XOFF flow control (0: no, 1: yes)

 *           int xany           : S/W XANY flow control (0: no, 1: yes)

 *

 *

 *      Function 16:    Get ths line status of this port

 *      Syntax:

 *      int  MoxaPortLineStatus(int port);

 *           int port           : port number (0 - 127)

 *

 *           return:    Bit 0 - CTS state (0: off, 1: on)

 *                      Bit 1 - DSR state (0: off, 1: on)

 *                      Bit 2 - DCD state (0: off, 1: on)

 *

 *

 *      Function 19:    Flush the Rx/Tx buffer data of this port.

 *      Syntax:

 *      void MoxaPortFlushData(int port, int mode);

 *           int port           : port number (0 - 127)

 *           int mode    

 *                      0       : flush the Rx buffer 

 *                      1       : flush the Tx buffer 

 *                      2       : flush the Rx and Tx buffer 

 *

 *

 *      Function 20:    Write data.

 *      Syntax:

 *      int  MoxaPortWriteData(int port, unsigned char * buffer, int length);

 *           int port           : port number (0 - 127)

 *           unsigned char * buffer     : pointer to write data buffer.

 *           int length         : write data length

 *

 *           return:    0 - length      : real write data length

 *

 *

 *      Function 21:    Read data.

 *      Syntax:

 *      int  MoxaPortReadData(int port, struct tty_struct *tty);

 *           int port           : port number (0 - 127)

 *	     struct tty_struct *tty : tty for data

 *

 *           return:    0 - length      : real read data length

 *

 *

 *      Function 24:    Get the Tx buffer current queued data bytes

 *      Syntax:

 *      int  MoxaPortTxQueue(int port);

 *           int port           : port number (0 - 127)

 *

 *           return:    ..      : Tx buffer current queued data bytes

 *

 *

 *      Function 25:    Get the Tx buffer current free space

 *      Syntax:

 *      int  MoxaPortTxFree(int port);

 *           int port           : port number (0 - 127)

 *

 *           return:    ..      : Tx buffer current free space

 *

 *

 *      Function 26:    Get the Rx buffer current queued data bytes

 *      Syntax:

 *      int  MoxaPortRxQueue(int port);

 *           int port           : port number (0 - 127)

 *

 *           return:    ..      : Rx buffer current queued data bytes

 *

 *

 *      Function 28:    Disable port data transmission.

 *      Syntax:

 *      void MoxaPortTxDisable(int port);

 *           int port           : port number (0 - 127)

 *

 *

 *      Function 29:    Enable port data transmission.

 *      Syntax:

 *      void MoxaPortTxEnable(int port);

 *           int port           : port number (0 - 127)

 *

 *

 *      Function 31:    Get the received BREAK signal count and reset it.

 *      Syntax:

 *      int  MoxaPortResetBrkCnt(int port);

 *           int port           : port number (0 - 127)

 *

 *           return:    0 - ..  : BREAK signal count

 *

 *

 disable flow control */

 start to send */

/*****************************************************************************

 *	Static local functions: 					     *

 SPDX-License-Identifier: GPL-2.0

 lockdep nested classes for tty->ldisc_sem */

/*

 *	This guards the refcounted line discipline lists. The lock

 *	must be taken with irqs off because there are hangup path

 *	callers who will do ldisc lookups and cannot sleep.

 Line disc dispatch table */

/**

 *	tty_register_ldisc	-	install a line discipline

 *	@new_ldisc: pointer to the ldisc object

 *

 *	Installs a new line discipline into the kernel. The discipline

 *	is set up as unreferenced and then made available to the kernel

 *	from this point onwards.

 *

 *	Locking:

 *		takes tty_ldiscs_lock to guard against ldisc races

/**

 *	tty_unregister_ldisc	-	unload a line discipline

 *	@ldisc: ldisc number

 *

 *	Remove a line discipline from the kernel providing it is not

 *	currently in use.

 *

 *	Locking:

 *		takes tty_ldiscs_lock to guard against ldisc races

/**

 *	tty_ldisc_get		-	take a reference to an ldisc

 *	@tty: tty device

 *	@disc: ldisc number

 *

 *	Takes a reference to a line discipline. Deals with refcounts and

 *	module locking counts.

 *

 *	Returns: -EINVAL if the discipline index is not [N_TTY..NR_LDISCS] or

 *			 if the discipline is not registered

 *		 -EAGAIN if request_module() failed to load or register the

 *			 discipline

 *		 -ENOMEM if allocation failure

 *

 *		 Otherwise, returns a pointer to the discipline and bumps the

 *		 ref count

 *

 *	Locking:

 *		takes tty_ldiscs_lock to guard against ldisc races

	/*

	 * Get the ldisc ops - we may need to request them to be loaded

	 * dynamically and try again.

	/*

	 * There is no way to handle allocation failure of only 16 bytes.

	 * Let's simplify error handling and save more memory.

/*

 *	tty_ldisc_put		-	release the ldisc

 *

 *	Complement of tty_ldisc_get().

/**

 *	tty_ldisc_ref_wait	-	wait for the tty ldisc

 *	@tty: tty device

 *

 *	Dereference the line discipline for the terminal and take a

 *	reference to it. If the line discipline is in flux then

 *	wait patiently until it changes.

 *

 *	Returns: NULL if the tty has been hungup and not re-opened with

 *		 a new file descriptor, otherwise valid ldisc reference

 *

 *	Note 1: Must not be called from an IRQ/timer context. The caller

 *	must also be careful not to hold other locks that will deadlock

 *	against a discipline change, such as an existing ldisc reference

 *	(which we check for)

 *

 *	Note 2: a file_operations routine (read/poll/write) should use this

 *	function to wait for any ldisc lifetime events to finish.

/**

 *	tty_ldisc_ref		-	get the tty ldisc

 *	@tty: tty device

 *

 *	Dereference the line discipline for the terminal and take a

 *	reference to it. If the line discipline is in flux then

 *	return NULL. Can be called from IRQ and timer functions.

/**

 *	tty_ldisc_deref		-	free a tty ldisc reference

 *	@ld: reference to free up

 *

 *	Undoes the effect of tty_ldisc_ref or tty_ldisc_ref_wait. May

 *	be called in IRQ context.

 Kindly asking blocked readers to release the read side */

 Can be cleared here - ldisc_unlock will wake up writers firstly */

 if this is possible, it has lots of implications */

/**

 *	tty_ldisc_flush	-	flush line discipline queue

 *	@tty: tty

 *

 *	Flush the line discipline queue (if any) and the tty flip buffers

 *	for this tty.

/**

 *	tty_set_termios_ldisc		-	set ldisc field

 *	@tty: tty structure

 *	@disc: line discipline number

 *

 *	This is probably overkill for real world processors but

 *	they are not on hot paths so a little discipline won't do

 *	any harm.

 *

 *	The line discipline-related tty_struct fields are reset to

 *	prevent the ldisc driver from re-using stale information for

 *	the new ldisc instance.

 *

 *	Locking: takes termios_rwsem

/**

 *	tty_ldisc_open		-	open a line discipline

 *	@tty: tty we are opening the ldisc on

 *	@ld: discipline to open

 *

 *	A helper opening method. Also a convenient debugging and check

 *	point.

 *

 *	Locking: always called with BTM already held.

 BTM here locks versus a hangup event */

/**

 *	tty_ldisc_close		-	close a line discipline

 *	@tty: tty we are opening the ldisc on

 *	@ld: discipline to close

 *

 *	A helper close method. Also a convenient debugging and check

 *	point.

/**

 *	tty_ldisc_failto	-	helper for ldisc failback

 *	@tty: tty to open the ldisc on

 *	@ld: ldisc we are trying to fail back to

 *

 *	Helper to try and recover a tty when switching back to the old

 *	ldisc fails and we need something attached.

/**

 *	tty_ldisc_restore	-	helper for tty ldisc change

 *	@tty: tty to recover

 *	@old: previous ldisc

 *

 *	Restore the previous line discipline or N_TTY when a line discipline

 *	change fails due to an open error

 There is an outstanding reference here so this is safe */

		/*

		 * The traditional behaviour is to fall back to N_TTY, we

		 * want to avoid falling back to N_NULL unless we have no

		 * choice to avoid the risk of breaking anything

/**

 *	tty_set_ldisc		-	set line discipline

 *	@tty: the terminal to set

 *	@disc: the line discipline number

 *

 *	Set the discipline of a tty line. Must be called from a process

 *	context. The ldisc change logic has to protect itself against any

 *	overlapping ldisc change (including on the other end of pty pairs),

 *	the close of one side of a tty/pty pair, and eventually hangup.

 Check the no-op case */

 We were raced by hangup */

 Shutdown the old discipline. */

 Now set up the new line discipline. */

 Back to the old one or N_TTY if we can't */

	/*

	 * At this point we hold a reference to the new ldisc and a

	 * reference to the old ldisc, or we hold two references to

	 * the old ldisc (if it was restored as part of error cleanup

	 * above). In either case, releasing a single reference from

	 * the old ldisc is correct.

	/*

	 * Restart the work queue in case no characters kick it off. Safe if

	 * already running

 drop the extra reference */

/**

 *	tty_ldisc_kill	-	teardown ldisc

 *	@tty: tty being released

 *

 *	Perform final close of the ldisc and reset tty->ldisc

	/*

	 * Now kill off the ldisc

 Force an oops if we mess this up */

/**

 *	tty_reset_termios	-	reset terminal state

 *	@tty: tty to reset

 *

 *	Restore a terminal to the driver default state.

/**

 *	tty_ldisc_reinit	-	reinitialise the tty ldisc

 *	@tty: tty to reinit

 *	@disc: line discipline to reinitialize

 *

 *	Completely reinitialize the line discipline state, by closing the

 *	current instance, if there is one, and opening a new instance. If

 *	an error occurs opening the new non-N_TTY instance, the instance

 *	is dropped and tty->ldisc reset to NULL. The caller can then retry

 *	with N_TTY instead.

 *

 *	Returns 0 if successful, otherwise error code < 0

 switch the line discipline */

/**

 *	tty_ldisc_hangup		-	hangup ldisc reset

 *	@tty: tty being hung up

 *	@reinit: whether to re-initialise the tty

 *

 *	Some tty devices reset their termios when they receive a hangup

 *	event. In that situation we must also switch back to N_TTY properly

 *	before we reset the termios data.

 *

 *	Locking: We can take the ldisc mutex as the rest of the code is

 *	careful to allow for this.

 *

 *	In the pty pair case this occurs in the close() path of the

 *	tty itself so we must be careful about locking rules.

	/*

	 * Shutdown the current line discipline, and reset it to

	 * N_TTY if need be.

	 *

	 * Avoid racing set_ldisc or tty_ldisc_release

/**

 *	tty_ldisc_setup			-	open line discipline

 *	@tty: tty being shut down

 *	@o_tty: pair tty for pty/tty pairs

 *

 *	Called during the initial open of a tty/pty pair in order to set up the

 *	line disciplines and bind them to the tty. This has no locking issues

 *	as the device isn't yet active.

		/*

		 * Called without o_tty->ldisc_sem held, as o_tty has been

		 * just allocated and no one has a reference to it.

/**

 *	tty_ldisc_release		-	release line discipline

 *	@tty: tty being shut down (or one end of pty pair)

 *

 *	Called during the final close of a tty or a pty pair in order to shut

 *	down the line discpline layer. On exit, each tty's ldisc is NULL.

	/*

	 * Shutdown this line discipline. As this is the final close,

	 * it does not race with the set_ldisc code path.

	/*

	 * And the memory resources remaining (buffers, termios) will be

	 * disposed of when the kref hits zero

/**

 *	tty_ldisc_init		-	ldisc setup for new tty

 *	@tty: tty being allocated

 *

 *	Set up the line discipline objects for a newly allocated tty. Note that

 *	the tty structure is not completely set up when this call is made.

/**

 *	tty_ldisc_deinit	-	ldisc cleanup for new tty

 *	@tty: tty that was allocated recently

 *

 *	The tty structure must not becompletely set up (tty_ldisc_setup) when

 *      this call is made.

 no ldisc_sem, tty is being destroyed */

 SPDX-License-Identifier: GPL-2.0

/*

 * Creating audit events from TTY input.

 *

 * Copyright (C) 2007 Red Hat, Inc.  All rights reserved.

 *

 * Authors: Miloslav Trmac <mitr@redhat.com>

 Protects all data below */

 The TTY which the data is from */

 Allocated size N_TTY_BUF_SIZE */

/*

 *	tty_audit_buf_push	-	Push buffered data out

 *

 *	Generate an audit message from the contents of @buf, which is owned by

 *	the current task.  @buf->mutex must be locked.

/**

 *	tty_audit_exit	-	Handle a task exit

 *

 *	Make sure all buffered data is written out and deallocate the buffer.

 *	Only needs to be called if current->signal->tty_audit_buf != %NULL.

 *

 *	The process is single-threaded at this point; no other threads share

 *	current->signal.

/*

 *	tty_audit_fork	-	Copy TTY audit state for a new task

 *

 *	Set up TTY audit state in @sig from current.  @sig needs no locking.

/*

 *	tty_audit_tiocsti	-	Log TIOCSTI

/*

 *	tty_audit_push	-	Flush current's pending audit data

 *

 *	Returns 0 if success, -EPERM if tty audit is disabled

/*

 *	tty_audit_buf_get	-	Get an audit buffer.

 *

 *	Get an audit buffer, allocate it if necessary.  Return %NULL

 *	if out of memory or ERR_PTR(-ESRCH) if tty_audit_exit() has already

 *	occurred.  Otherwise, return a new reference to the buffer.

 Race to use this buffer, free it if another wins */

/*

 *	tty_audit_add_data	-	Add data for TTY auditing.

 *

 *	Audit @data of @size from @tty, if necessary.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2007 Google, Inc.

 * Copyright (C) 2012 Intel, Inc.

 * Copyright (C) 2017 Imagination Technologies Ltd.

 Goldfish tty register's offsets */

 Goldfish tty commands */

		/*

		 * Goldfish TTY for Ranchu platform uses

		 * physical addresses and DMA for read/write operations

			/*

			 * Map the buffer's virtual address to the DMA address

			 * so the buffer can be accessed by the device.

			/*

			 * Unmap the previously mapped region after

			 * the completion of the read/write operation.

		/*

		 * Old style Goldfish TTY used on the Goldfish platform

		 * uses virtual addresses.

	/*

	 * Goldfish TTY device used by the Goldfish emulator

	 * should identify itself with 0, forcing the driver

	 * to use virtual addresses. Goldfish TTY device

	 * on Ranchu emulator (qemu2) returns 1 here and

	 * driver will use physical addresses.

	/*

	 * Goldfish TTY device on Ranchu emulator (qemu2)

	 * will use DMA for read/write IO operations.

		/*

		 * Initialize dma_mask to 32-bits.

 SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)

/*

 * nozomi.c  -- HSDPA driver Broadband Wireless Data Card - Globe Trotter

 *

 * Written by: Ulf Jakobsson,

 *             Jan √Ökerfeldt,

 *             Stefan Thomasson,

 *

 * Maintained by: Paul Hardwick (p.hardwick@option.com)

 *

 * Patches:

 *          Locking code changes for Vodafone by Sphere Systems Ltd,

 *                              Andrew Bird (ajb@spheresystems.co.uk )

 *                              & Phil Sanderson

 *

 * Source has been ported from an implementation made by Filip Aben @ Option

 *

 * --------------------------------------------------------------------------

 *

 * Copyright (c) 2005,2006 Option Wireless Sweden AB

 * Copyright (c) 2006 Sphere Systems Ltd

 * Copyright (c) 2006 Option Wireless n/v

 * All rights Reserved.

 *

 * --------------------------------------------------------------------------

 Enable this to have a lot of debug printouts */

 Default debug printout level */

    Macros definitions */

 TODO: rewrite to optimize macros... */

    Defines */

 Must be power of 2 */

 Size of tmp send buffer to card */

 Interrupt Identity Register */

 Flow Control Register */

 Interrupt Enable Register */

 Definition of interrupt tokens */

 modem signal definition */

    Type definitions */

/*

 * There are two types of nozomi cards,

 * one with 2048 memory and with 8192 memory

 512 bytes downlink + uplink * 2 -> 2048 */

 3072 bytes downl. + 1024 bytes uplink * 2 -> 8192 */

 Initialization states a card can be in */

 pci device enabled */

 config setup done */

 flowcontrols received */

 Two different toggle channels exist */

 Port definition for the card regarding flow control */

 Ports that the nozomi has */

 Big endian */

	unsigned int enabled:5;	/*

				 * Toggle fields are valid if enabled is 0,

				 * else A-channels must always be used.

 Configuration table to read at startup of card */

 Is for now only needed during initialization phase */

	u16 dl_mdm_len1;	/*

				 * If this is 64, it can hold

				 * 60 bytes + 4 that is length field

	u16 dl_mdm_len2;	/*

				 * If this is 64, it can hold

				 * 60 bytes + 4 that is length field

 This stores all control downlink flags */

 This stores all control uplink flags */

 Little endian */

 This represents the toggle information */

	unsigned int enabled:5;	/*

				 * Toggle fields are valid if enabled is 0,

				 * else A-channels must always be used.

 Configuration table to read at startup of card */

	u16 dl_mdm_len1;	/*

				 * If this is 64, it can hold

				 * 60 bytes + 4 that is length field

 This stores all control downlink flags */

 This stores all control uplink flags */

 This holds all information that is needed regarding a port */

 Private data one for each card in the system */

 Pointers to registers */

 Configuration table */

 secures access to registers and tty */

 Global variables */

 Nozomi HSDPA */

/*

 * find card by tty_index

/*

 * TODO:

 * -Optimize

 * -Rewrite cleaner

 shortcut for extremely often used cases */

 2 bytes */

 4 bytes */

 Handle 2 bytes in the end */

 Read 4 bytes */

/*

 * TODO:

 * -Optimize

 * -Rewrite cleaner

 shortcut for extremely often used cases */

 2 bytes */

	case 1: /*

		 * also needs to write 4 bytes in this case

		 * so falling through..

 4 bytes */

 2 bytes */

 4 bytes */

 Setup pointers to different channels and also setup buffer sizes. */

	/* The length reported is including the length field of 4 bytes,

	 * hence subtract with 4.

 Modem port dl configuration */

 Diag port dl configuration */

 App1 port dl configuration */

 App2 port dl configuration */

 Ctrl dl configuration */

 Modem Port ul configuration */

 Diag port ul configuration */

 App1 port ul configuration */

 App2 port ul configuration */

 Ctrl ul configuration */

 Dump config table under initalization phase */

/*

 * Read configuration table from card under intalization phase

 * Returns 1 if ok, else 0

 Enable control channel */

 Here we should disable all I/O over F32. */

		/*

		 * We should send ALL channel pair tokens back along

		 * with reset token

 push upload modem buffers */

 Enable uplink interrupts  */

 Disable uplink interrupts  */

 Enable downlink interrupts */

 Disable downlink interrupts */

/*

 * Return 1 - send buffer to card and ack.

 * Return 0 - don't ack, don't send buffer to card.

 Get data from tty and place in buf for now */

 DUMP(buf, size); */

 Write length + data */

 If all data has been read, return 1, else 0 */

 disable interrupt in downlink... */

 Debug for interrupts */

/*

 * Receive flow control

 * Return 1 - If ok, else 0

			/*

			 * After card initialization the flow control

			 * received for APP2 is always the last

 Update statistics */

/*

 * Send flow control, can only update one channel at a time

 * Return 0 - If we have updated all flow control

 * Return 1 - If we need to update more flow control, ack current enable more

 We have more flow control to be updated */

/*

 * Handle downlink data, ports that are handled are modem and diagnostics

 * Return 1 - ok

 * Return 0 - toggle fields are out of sync

/*

 * Handle uplink data, this is currently for the modem port

 * Return 1 - ok

 * Return 0 - toggle field are out of sync

 Card removed */

	/*

	 * Just handle interrupt enabled in IER

	 * (by masking with dc->last_ier)

 No more useful info if this was the reset interrupt. */

 Assume card type F32_8 if no match */

 Allocate memory for one device */

 nozomi_private.io_addr */ 0);

 Find out what card type it is */

 Disable all interrupts */

 Enable RESET interrupt */

	/* Racy below - surely should wait for scheduled work to be done or

 Deallocate memory for one device */

 Disable all interrupts */

 Send 0x0001, command card to resend the reset token.  */

 This is to get the reset when the module is reloaded. */

 Setup dc->reg addresses to we can use defines here */

 push the token to the card. */

/*

 * ----------------------------------------------------------------------------

 * TTY code

 * ----------------------------------------------------------------------------

/*

 * called when the userspace process writes to the tty (/dev/noz*).

 * Data is inserted into a fifo, which is then read and transferred to the modem.

 CTS is only valid on the modem channel */

/*

 * Calculate how much is left in device

 * This method is called by the upper tty layer.

 *   #according to sources N_TTY.c it expects a value >= 0 and

 *    does not check for negative values.

 *

 * If the port is unplugged report lots of room and let the bits

 * dribble away so we don't block anything.

 Gets io control parameters */

	/* Note: these could change under us but it is not clear this

 Sets io controls parameters */

/*

 * Called by the upper tty layer when tty buffers are ready

 * to receive data again after a call to throttle.

/*

 * Called by the upper tty layer when the tty buffers are almost full.

 * The driver should stop send more data.

 Returns number of chars in buffer, called by tty layer */

 Module initialization */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2021 STMicroelectronics - All Rights Reserved

 *

 * The rpmsg tty driver implements serial communication on the RPMsg bus to makes

 * possible for user-space programs to send and receive rpmsg messages as a standard

 * tty protocol.

 *

 * The remote processor can instantiate a new tty by requesting a "rpmsg-tty" RPMsg service.

 * The "rpmsg-tty" service is directly used for data exchange. No flow control is implemented yet.

 tty instance id */

 protects tty_idr */

 TTY port data */

 TTY rpmsg index */

 rpmsg device */

	/*

	 * Use rpmsg_trysend instead of rpmsg_send to send the message so the caller is not

	 * hung until a rpmsg buffer is available. In such case rpmsg_trysend returns -ENOMEM.

 User hang up to release the tty */

 Disable unused mode by default */

 SPDX-License-Identifier: GPL-1.0+

/*

 * n_tty.c --- implements the N_TTY line discipline.

 *

 * This code used to be in tty_io.c, but things are getting hairy

 * enough that it made sense to split things off.  (The N_TTY

 * processing has changed so much that it's hardly recognizable,

 * anyway...)

 *

 * Note that the open routine for N_TTY is guaranteed never to return

 * an error.  This is because Linux will fall back to setting a line

 * to N_TTY if it can not switch to any other line discipline.

 *

 * Written by Theodore Ts'o, Copyright 1994.

 *

 * This file also contains code originally written by Linus Torvalds,

 * Copyright 1991, 1992, 1993, and by Julian Cowley, Copyright 1994.

 *

 * Reduced memory usage for older ARM systems  - Russell King.

 *

 * 2000/01/20   Fixed SMP locking on put_tty_queue using bits of

 *		the patch by Andrew J. Kroll <ag784@freenet.buffalo.edu>

 *		who actually finally proved there really was a race.

 *

 * 2002/03/18   Implemented n_tty_wakeup to send SIGIO POLL_OUTs to

 *		waiting writing processes-Sapan Bhatia <sapan@corewars.org>.

 *		Also fixed a bug in BLOCKING mode where n_tty_write returns

 *		EAGAIN

/*

 * Until this number of characters is queued in the xmit buffer, select will

 * return "we have room for writes".

/*

 * This defines the low- and high-watermarks for throttling and

 * unthrottling the TTY driver.  These watermarks are used for

 * controlling the space in the read buffer.

 now based on remaining room */

/*

 * Special byte codes used in the echo buffer to represent operations

 * or special handling of characters.  Bytes in the echo buffer that

 * are not part of such special blocks are treated as normal character

 * codes.

 producer-published */

 private to n_tty_receive_overrun (single-threaded) */

 non-atomic */

 must hold exclusive termios_rwsem to reset these */

 shared by producer and consumer */

 consumer-published */

 protected by output lock */

 Matches smp_wmb() in add_echo_byte(). */

 If we are not echoing the data, perhaps this is a secret so erase it */

/**

 *	n_tty_kick_worker - start input worker (if required)

 *	@tty: terminal

 *

 *	Re-schedules the flip buffer work if it may have stopped

 *

 *	Caller holds exclusive termios_rwsem

 *	   or

 *	n_tty_read()/consumer path:

 *		holds non-exclusive termios_rwsem

 Did the input worker stop? Restart it */

		/* see if ldisc has been killed - if so, this means that

		 * even though the ldisc has been halted and ->buf.work

		 * cancelled, ->buf.work is about to be rescheduled

/**

 *	n_tty_write_wakeup	-	asynchronous I/O notifier

 *	@tty: tty device

 *

 *	Required for the ptys, serial driver etc. since processes

 *	that attach themselves to the master and rely on ASYNC

 *	IO must be woken up

	/*

	 * Check the remaining room for the input canonicalization

	 * mode.  We don't want to throttle the driver if we're in

	 * canonical mode and don't have a newline yet!

	/* If there is enough space in the read buffer now, let the

	 * low-level driver know. We use chars_in_buffer() to

	 * check the buffer, as it now knows about canonical mode.

	 * Otherwise, if the driver is throttled and the line is

	 * longer than TTY_THRESHOLD_UNTHROTTLE in canonical mode,

	 * we won't get any more characters.

/**

 *	put_tty_queue		-	add character to tty

 *	@c: character

 *	@ldata: n_tty data

 *

 *	Add a character to the tty read_buf queue.

 *

 *	n_tty_receive_buf()/producer path:

 *		caller holds non-exclusive termios_rwsem

/**

 *	reset_buffer_flags	-	reset buffer state

 *	@ldata: line disc data to reset

 *

 *	Reset the read buffer counters and clear the flags.

 *	Called from n_tty_open() and n_tty_flush_buffer().

 *

 *	Locking: caller holds exclusive termios_rwsem

 *		 (or locking is not required)

/**

 *	n_tty_flush_buffer	-	clean input queue

 *	@tty:	terminal device

 *

 *	Flush the input buffer. Called when the tty layer wants the

 *	buffer flushed (eg at hangup) or when the N_TTY line discipline

 *	internally has to clean the pending queue (for example some signals).

 *

 *	Holds termios_rwsem to exclude producer/consumer while

 *	buffer indices are reset.

 *

 *	Locking: ctrl.lock, exclusive termios_rwsem

/**

 *	is_utf8_continuation	-	utf8 multibyte check

 *	@c: byte to check

 *

 *	Returns true if the utf8 character 'c' is a multibyte continuation

 *	character. We use this to correctly compute the on screen size

 *	of the character when printing

/**

 *	is_continuation		-	multibyte check

 *	@c: byte to check

 *	@tty: terminal device

 *

 *	Returns true if the utf8 character 'c' is a multibyte continuation

 *	character and the terminal is in unicode mode.

/**

 *	do_output_char			-	output one character

 *	@c: character (or partial unicode symbol)

 *	@tty: terminal device

 *	@space: space available in tty driver write buffer

 *

 *	This is a helper function that handles one output character

 *	(including special characters like TAB, CR, LF, etc.),

 *	doing OPOST processing and putting the results in the

 *	tty driver's write buffer.

 *

 *	Note that Linux currently ignores TABDLY, CRDLY, VTDLY, FFDLY

 *	and NLDLY.  They simply aren't relevant in the world today.

 *	If you ever need them, add them here.

 *

 *	Returns the number of bytes of buffer space used or -1 if

 *	no space left.

 *

 *	Locking: should be called under the output_lock to protect

 *		 the column state and space left in the buffer

/**

 *	process_output			-	output post processor

 *	@c: character (or partial unicode symbol)

 *	@tty: terminal device

 *

 *	Output one character with OPOST processing.

 *	Returns -1 when the output device is full and the character

 *	must be retried.

 *

 *	Locking: output_lock to protect column state and space left

 *		 (also, this is called from n_tty_write under the

 *		  tty layer write lock)

/**

 *	process_output_block		-	block post processor

 *	@tty: terminal device

 *	@buf: character buffer

 *	@nr: number of bytes to output

 *

 *	Output a block of characters with OPOST processing.

 *	Returns the number of characters output.

 *

 *	This path is used to speed up block console writes, among other

 *	things when processing blocks of output data. It handles only

 *	the simple cases normally found and helps to generate blocks of

 *	symbols for the console driver and thus improve performance.

 *

 *	Locking: output_lock to protect column state and space left

 *		 (also, this is called from n_tty_write under the

 *		  tty layer write lock)

/**

 *	process_echoes	-	write pending echo characters

 *	@tty: terminal device

 *

 *	Write previously buffered echo (and other ldisc-generated)

 *	characters to the tty.

 *

 *	Characters generated by the ldisc (including echoes) need to

 *	be buffered because the driver's write buffer can fill during

 *	heavy program output.  Echoing straight to the driver will

 *	often fail under these conditions, causing lost characters and

 *	resulting mismatches of ldisc state information.

 *

 *	Since the ldisc state must represent the characters actually sent

 *	to the driver at the time of the write, operations like certain

 *	changes in column state are also saved in the buffer and executed

 *	here.

 *

 *	A circular fifo buffer is used so that the most recent characters

 *	are prioritized.  Also, when control characters are echoed with a

 *	prefixed "^", the pair is treated atomically and thus not separated.

 *

 *	Locking: callers must hold output_lock

			/*

			 * Since add_echo_byte() is called without holding

			 * output_lock, we might see only portion of multi-byte

			 * operation.

			/*

			 * If the buffer byte is the start of a multi-byte

			 * operation, get the next byte, which is either the

			 * op code or a control character value.

				/*

				 * Determine how many columns to go back

				 * in order to erase the tab.

				 * This depends on the number of columns

				 * used by other characters within the tab

				 * area.  If this (modulo 8) count is from

				 * the start of input rather than from a

				 * previous tab, we offset by canon column.

				 * Otherwise, tab spacing is normal.

 This is an escaped echo op start code */

				/*

				 * If the op is not a special byte code,

				 * it is a ctrl char tagged to be echoed

				 * as "^X" (where X is the letter

				 * representing the control char).

				 * Note that we must ensure there is

				 * enough space for the whole ctrl pair.

				 *

	/* If the echo buffer is nearly full (so that the possibility exists

	 * of echo overrun before the next commit), then discard enough

	/* Process committed echoes if the accumulated # of bytes

	 * is over the threshold (and try again each time another

 NB: echo_mark and echo_head should be equivalent here */

/**

 *	add_echo_byte	-	add a byte to the echo buffer

 *	@c: unicode byte to echo

 *	@ldata: n_tty data

 *

 *	Add a character or operation byte to the echo buffer.

 Matches smp_rmb() in echo_buf(). */

/**

 *	echo_move_back_col	-	add operation to move back a column

 *	@ldata: n_tty data

 *

 *	Add an operation to the echo buffer to move back one column.

/**

 *	echo_set_canon_col	-	add operation to set the canon column

 *	@ldata: n_tty data

 *

 *	Add an operation to the echo buffer to set the canon column

 *	to the current column.

/**

 *	echo_erase_tab	-	add operation to erase a tab

 *	@num_chars: number of character columns already used

 *	@after_tab: true if num_chars starts after a previous tab

 *	@ldata: n_tty data

 *

 *	Add an operation to the echo buffer to erase a tab.

 *

 *	Called by the eraser function, which knows how many character

 *	columns have been used since either a previous tab or the start

 *	of input.  This information will be used later, along with

 *	canon column (if applicable), to go back the correct number

 *	of columns.

 We only need to know this modulo 8 (tab spacing) */

 Set the high bit as a flag if num_chars is after a previous tab */

/**

 *	echo_char_raw	-	echo a character raw

 *	@c: unicode byte to echo

 *	@ldata: line disc data

 *

 *	Echo user input back onto the screen. This must be called only when

 *	L_ECHO(tty) is true. Called from the driver receive_buf path.

 *

 *	This variant does not treat control characters specially.

/**

 *	echo_char	-	echo a character

 *	@c: unicode byte to echo

 *	@tty: terminal device

 *

 *	Echo user input back onto the screen. This must be called only when

 *	L_ECHO(tty) is true. Called from the driver receive_buf path.

 *

 *	This variant tags control characters to be echoed as "^X"

 *	(where X is the letter representing the control char).

/**

 *	finish_erasing		-	complete erase

 *	@ldata: n_tty data

/**

 *	eraser		-	handle erase function

 *	@c: character input

 *	@tty: terminal device

 *

 *	Perform erase and necessary output when an erase character is

 *	present in the stream from the driver layer. Handles the complexities

 *	of UTF-8 multibyte symbols.

 *

 *	n_tty_receive_buf()/producer path:

 *		caller holds non-exclusive termios_rwsem

 process_output('\a', tty); */ 
 Add a newline if ECHOK is on and ECHOKE is off. */

 erase a single possibly multibyte character */

 do not partially erase */

 Equivalent to BSD's ALTWERASE. */

 if cnt > 1, output a multi-byte character */

				/*

				 * Count the columns used for characters

				 * since the start of input or after a

				 * previous tab.

				 * This info is used to go back the correct

				 * number of columns.

/**

 *	isig		-	handle the ISIG optio

 *	@sig: signal

 *	@tty: terminal

 *

 *	Called when a signal is being sent due to terminal input.

 *	Called from the driver receive_buf path so serialized.

 *

 *	Performs input and output flush if !NOFLSH. In this context, the echo

 *	buffer is 'output'. The signal is processed first to alert any current

 *	readers or writers to discontinue and exit their i/o loops.

 *

 *	Locking: ctrl.lock

 signal only */

 signal and flush */

 clear echo buffer */

 clear output buffer */

 clear input buffer */

 notify pty master of flush */

/**

 *	n_tty_receive_break	-	handle break

 *	@tty: terminal

 *

 *	An RS232 break event has been hit in the incoming bitstream. This

 *	can cause a variety of events depending upon the termios settings.

 *

 *	n_tty_receive_buf()/producer path:

 *		caller holds non-exclusive termios_rwsem

 *

 *	Note: may get exclusive termios_rwsem if flushing input buffer

/**

 *	n_tty_receive_overrun	-	handle overrun reporting

 *	@tty: terminal

 *

 *	Data arrived faster than we could process it. While the tty

 *	driver has flagged this the bits that were missed are gone

 *	forever.

 *

 *	Called from the receive_buf path so single threaded. Does not

 *	need locking as num_overrun and overrun_time are function

 *	private.

/**

 *	n_tty_receive_parity_error	-	error notifier

 *	@tty: terminal device

 *	@c: character

 *

 *	Process a parity error and queue the right data to indicate

 *	the error case if necessary.

 *

 *	n_tty_receive_buf()/producer path:

 *		caller holds non-exclusive termios_rwsem

/**

 *	n_tty_receive_char	-	perform processing

 *	@tty: terminal device

 *	@c: character

 *

 *	Process an individual character of input received from the driver.

 *	This is serialized with respect to itself by the rules for the

 *	driver above.

 *

 *	n_tty_receive_buf()/producer path:

 *		caller holds non-exclusive termios_rwsem

 *		publishes canon_head if canonical mode is active

			/*

			 * XXX are EOL_CHAR and EOL2_CHAR echoed?!?

 Record the column of first canon char. */

			/*

			 * XXX does PARMRK doubling happen for

			 * EOL_CHAR and EOL2_CHAR?

 Record the column of first canon char. */

 PARMRK doubling check */

 Record the column of first canon char. */

 PARMRK doubling check */

 publish read_head to consumer */

/**

 *	n_tty_receive_buf_common	-	process input

 *	@tty: device to receive input

 *	@cp: input chars

 *	@fp: flags for each char (if NULL, all chars are TTY_NORMAL)

 *	@count: number of input chars in @cp

 *	@flow: enable flow control

 *

 *	Called by the terminal driver when a block of characters has

 *	been received. This function must be called from soft contexts

 *	not from interrupt context. The driver is responsible for making

 *	calls one at a time and in order (or using flush_to_ldisc)

 *

 *	Returns the # of input chars from @cp which were processed.

 *

 *	In canonical mode, the maximum line length is 4096 chars (including

 *	the line termination char); lines longer than 4096 chars are

 *	truncated. After 4095 chars, input data is still processed but

 *	not stored. Overflow processing ensures the tty can always

 *	receive more input until at least one line can be read.

 *

 *	In non-canonical mode, the read buffer will only accept 4095 chars;

 *	this provides the necessary space for a newline char if the input

 *	mode is switched to canonical.

 *

 *	Note it is possible for the read buffer to _contain_ 4096 chars

 *	in non-canonical mode: the read buffer could already contain the

 *	maximum canon line of 4096 chars when the mode is switched to

 *	non-canonical.

 *

 *	n_tty_receive_buf()/producer path:

 *		claims non-exclusive termios_rwsem

 *		publishes commit_head or canon_head

		/*

		 * When PARMRK is set, each input char may take up to 3 chars

		 * in the read buf; reduce the buffer space avail by 3x

		 *

		 * If we are doing input canonicalization, and there are no

		 * pending newlines, let characters through without limit, so

		 * that erase characters will be handled.  Other excess

		 * characters will be beeped.

		 *

		 * paired with store in *_copy_from_read_buf() -- guarantees

		 * the consumer has loaded the data in read_buf up to the new

		 * read_tail (so this producer will not overwrite unread data)

 ignore parity errors if handling overflow */

 Unthrottle if handling overflow on pty */

/**

 *	n_tty_set_termios	-	termios data changed

 *	@tty: terminal

 *	@old: previous data

 *

 *	Called by the tty layer when the user changes termios flags so

 *	that the line discipline can plan ahead. This function cannot sleep

 *	and is protected from re-entry by the tty layer. The user is

 *	guaranteed that this function will not be re-entered or in progress

 *	when the ldisc is closed.

 *

 *	Locking: Caller holds tty->termios_rwsem

	/*

	 * Fix tty hang when I_IXON(tty) is cleared, but the tty

	 * been stopped by STOP_CHAR(tty) before it.

 The termios change make the tty ready for I/O */

/**

 *	n_tty_close		-	close the ldisc for this tty

 *	@tty: device

 *

 *	Called from the terminal layer when this line discipline is

 *	being shut down, either because of a close or becsuse of a

 *	discipline change. The function will not be called while other

 *	ldisc methods are in progress.

/**

 *	n_tty_open		-	open an ldisc

 *	@tty: terminal to open

 *

 *	Called when this line discipline is being attached to the

 *	terminal device. Can sleep. Called serialized so that no

 *	other events will occur in parallel. No further open will occur

 *	until a close.

 Currently a malloc failure here can panic */

 indicate buffer work may resume */

/**

 *	copy_from_read_buf	-	copy read data directly

 *	@tty: terminal device

 *	@kbp: data

 *	@nr: size of data

 *

 *	Helper function to speed up n_tty_read.  It is only called when

 *	ICANON is off; it copies characters straight from the tty queue.

 *

 *	Called under the ldata->atomic_read_lock sem

 *

 *	Returns true if it successfully copied data, but there is still

 *	more data to be had.

 *

 *	n_tty_read()/consumer path:

 *		caller holds non-exclusive termios_rwsem

 *		read_tail published

 Turn single EOF into zero-length read */

 If we have more to copy, let the caller know */

/**

 *	canon_copy_from_read_buf	-	copy read data in canonical mode

 *	@tty: terminal device

 *	@kbp: data

 *	@nr: size of data

 *

 *	Helper function for n_tty_read.  It is only called when ICANON is on;

 *	it copies one line of input up to and including the line-delimiting

 *	character into the result buffer.

 *

 *	NB: When termios is changed from non-canonical to canonical mode and

 *	the read buffer contains data, n_tty_set_termios() simulates an EOF

 *	push (as if C-d were input) _without_ the DISABLED_CHAR in the buffer.

 *	This causes data already processed as input to be immediately available

 *	as input although a newline has not been received.

 *

 *	Called under the atomic_read_lock mutex

 *

 *	n_tty_read()/consumer path:

 *		caller holds non-exclusive termios_rwsem

 *		read_tail published

 N.B. avoid overrun if nr == 0 */

 scan wrapped without finding set bit */

 No EOL found - do a continuation retry if there is more data */

/**

 *	job_control		-	check job control

 *	@tty: tty

 *	@file: file handle

 *

 *	Perform job control management checks on this file/tty descriptor

 *	and if appropriate send any needed signals and return a negative

 *	error code if action should be taken.

 *

 *	Locking: redirected write test is safe

 *		 current->signal->tty check is safe

 *		 ctrl.lock to safely reference tty->ctrl.pgrp

	/* Job control check -- must be done at start and after

	/* NOTE: not yet done after every sleep pending a thorough

 don't stop on /dev/console */

/**

 *	n_tty_read		-	read function for tty

 *	@tty: tty device

 *	@file: file object

 *	@buf: userspace buffer pointer

 *	@nr: size of I/O

 *

 *	Perform reads for the line discipline. We are guaranteed that the

 *	line discipline will not be closed under us but we may get multiple

 *	parallel readers and must handle this ourselves. We may also get

 *	a hangup. Always called in user context, may sleep.

 *

 *	This code must be sure never to sleep through a hangup.

 *

 *	n_tty_read()/consumer path:

 *		claims non-exclusive termios_rwsem

 *		publishes read_tail

	/*

	 * Is this a continuation of a read started earler?

	 *

	 * If so, we still hold the atomic_read_lock and the

	 * termios_rwsem, and can just continue to copy data.

 No more data - release locks and stop retries */

	/*

	 *	Internal serialization of reads.

 First test for status change. */

				/*

				 * Abort readers for ttys which never actually

				 * get hung up.  See __tty_hangup().

 Deal with packet mode. */

			/*

			 * Copy data, and if there is more to be had

			 * and we have nothing more to wait for, then

			 * let's mark us for retries.

			 *

			 * NOTE! We return here with both the termios_sem

			 * and atomic_read_lock still held, the retries

			 * will release them when done.

/**

 *	n_tty_write		-	write function for tty

 *	@tty: tty device

 *	@file: file object

 *	@buf: userspace buffer pointer

 *	@nr: size of I/O

 *

 *	Write function of the terminal device.  This is serialized with

 *	respect to other write callers but not to termios changes, reads

 *	and other such events.  Since the receive code will echo characters,

 *	thus calling driver write methods, the output_lock is used in

 *	the output processing functions called here as well as in the

 *	echo processing function to protect the column state and space

 *	left in the buffer.

 *

 *	This code must be sure never to sleep through a hangup.

 *

 *	Locking: output_lock to protect column state and space left

 *		 (note that the process_output*() functions take this

 *		  lock themselves)

 Job control check -- must be done at start (POSIX.1 7.1.1.4). */

 Write out any echoed characters that are still pending */

/**

 *	n_tty_poll		-	poll method for N_TTY

 *	@tty: terminal device

 *	@file: file accessing it

 *	@wait: poll table

 *

 *	Called when the line discipline is asked to poll() for data or

 *	for special events. This code is not serialized with respect to

 *	other events save open/close.

 *

 *	This code must be sure never to sleep through a hangup.

 *	Called without the kernel lock held - fine

 Skip EOF-chars.. */

/**

 *	n_tty_inherit_ops	-	inherit N_TTY methods

 *	@ops: struct tty_ldisc_ops where to save N_TTY methods

 *

 *	Enables a 'subclass' line discipline to 'inherit' N_TTY methods.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright IBM Corp. 2001,2008

 *

 * This file contains the IRQ specific code for hvc_console

 *

 if hvc_poll request a repoll, then kick the hvcd thread */

	/*

	 * We're safe to always return IRQ_HANDLED as the hvcd thread will

	 * iterate through each hvc_struct.

/*

 * For IRQ based systems these callbacks can be used

 SPDX-License-Identifier: GPL-2.0

/*

 * z/VM IUCV hypervisor console (HVC) device driver

 *

 * This HVC device driver provides terminal access using

 * z/VM IUCV communication paths.

 *

 * Copyright IBM Corp. 2008, 2013

 *

 * Author(s):	Hendrik Brueckner <brueckner@linux.vnet.ibm.com>

 General device driver settings */

 IUCV TTY message  */

 Message version */

 Error message */

 Terminal environment variable */

 Terminal IO struct update */

 Terminal window size update */

 Terminal data */

 Message version */

 Message type */

 Payload length */

 Payload buffer */

 HVC struct reference */

 IUCV service name (ebcdic) */

 Linux console usage flag */

 IUCV connection status */

 TTY status */

 IUCV path pointer */

 hvc_iucv_private lock */

 must be < MSG_MAX_DATALEN */

 send buffer		  */

 length of send buffer  */

 work: send iucv msg(s) */

 wait for send completion */

 outgoing IUCV messages */

 incoming IUCV messages */

 device structure */

 IUCV path info (dev attr) */

 list pointer */

 store an IUCV message */

 data buffer offset */

 buffer to store input/output data */

 IUCV callback handler */

 Kernel module parameter: use one terminal device as default */

 Array of allocated hvc iucv tty lines... */

 List of z/VM user ID filter entries (struct iucv_vmid_filter) */

 Kmem cache and mempool for iucv_tty_buffer elements */

 IUCV handler callback functions */

/**

 * hvc_iucv_get_private() - Return a struct hvc_iucv_private instance.

 * @num:	The HVC virtual terminal number (vtermno)

 *

 * This function returns the struct hvc_iucv_private instance that corresponds

 * to the HVC virtual terminal number specified as parameter @num.

/**

 * alloc_tty_buffer() - Return a new struct iucv_tty_buffer element.

 * @size:	Size of the internal buffer used to store data.

 * @flags:	Memory allocation flags passed to mempool.

 *

 * This function allocates a new struct iucv_tty_buffer element and, optionally,

 * allocates an internal data buffer with the specified size @size.

 * The internal data buffer is always allocated with GFP_DMA which is

 * required for receiving and sending data with IUCV.

 * Note: The total message size arises from the internal buffer size and the

 *	 members of the iucv_tty_msg structure.

 * The function returns NULL if memory allocation has failed.

/**

 * destroy_tty_buffer() - destroy struct iucv_tty_buffer element.

 * @bufp:	Pointer to a struct iucv_tty_buffer element, SHALL NOT be NULL.

/**

 * destroy_tty_buffer_list() - call destroy_tty_buffer() for each list element.

 * @list:	List containing struct iucv_tty_buffer elements.

/**

 * hvc_iucv_write() - Receive IUCV message & write data to HVC buffer.

 * @priv:		Pointer to struct hvc_iucv_private

 * @buf:		HVC buffer for writing received terminal data.

 * @count:		HVC buffer size.

 * @has_more_data:	Pointer to an int variable.

 *

 * The function picks up pending messages from the input queue and receives

 * the message data that is then written to the specified buffer @buf.

 * If the buffer size @count is less than the data message size, the

 * message is kept on the input queue and @has_more_data is set to 1.

 * If all message data has been written, the message is removed from

 * the input queue.

 *

 * The function returns the number of bytes written to the terminal, zero if

 * there are no pending data messages available or if there is no established

 * IUCV path.

 * If the IUCV path has been severed, then -EPIPE is returned to cause a

 * hang up (that is issued by the HVC layer).

 immediately return if there is no IUCV connection */

	/* if the IUCV path has been severed, return -EPIPE to inform the

 check if there are pending messages */

 receive an iucv message and flip data to the tty (ldisc) */

 message not yet received ... */

		/* allocate mem to store msg data; if no memory is available

 Successful	    */

 No message found */

 Message purged   */

		/* remove buffer if an error has occurred or received data

		/* The caller must ensure that the hvc is locked, which

 ignored ... */

 ignored ... */

 ignored ... */

/**

 * hvc_iucv_get_chars() - HVC get_chars operation.

 * @vtermno:	HVC virtual terminal number.

 * @buf:	Pointer to a buffer to store data

 * @count:	Size of buffer available for writing

 *

 * The HVC thread calls this method to read characters from the back-end.

 * If an IUCV communication path has been established, pending IUCV messages

 * are received and data is copied into buffer @buf up to @count bytes.

 *

 * Locking:	The routine gets called under an irqsave() spinlock; and

 *		the routine locks the struct hvc_iucv_private->lock to call

 *		helper functions.

 if there are still messages on the queue... schedule another run */

/**

 * hvc_iucv_queue() - Buffer terminal data for sending.

 * @priv:	Pointer to struct hvc_iucv_private instance.

 * @buf:	Buffer containing data to send.

 * @count:	Size of buffer and amount of data to send.

 *

 * The function queues data for sending. To actually send the buffered data,

 * a work queue function is scheduled (with QUEUE_SNDBUF_DELAY).

 * The function returns the number of data bytes that has been buffered.

 *

 * If the device is not connected, data is ignored and the function returns

 * @count.

 * If the buffer is full, the function returns 0.

 * If an existing IUCV communicaton path has been severed, -EPIPE is returned

 * (that can be passed to HVC layer to cause a tty hangup).

 ignore data */

/**

 * hvc_iucv_send() - Send an IUCV message containing terminal data.

 * @priv:	Pointer to struct hvc_iucv_private instance.

 *

 * If an IUCV communication path has been established, the buffered output data

 * is sent via an IUCV message and the number of bytes sent is returned.

 * Returns 0 if there is no established IUCV communication path or

 * -EPIPE if an existing IUCV communicaton path has been severed.

	/* allocate internal buffer to store msg data and also compute total

		/* drop the message here; however we might want to handle

/**

 * hvc_iucv_sndbuf_work() - Send buffered data over IUCV

 * @work:	Work structure.

 *

 * This work queue function sends buffered output data over IUCV and,

 * if not all buffered data could be sent, reschedules itself.

/**

 * hvc_iucv_put_chars() - HVC put_chars operation.

 * @vtermno:	HVC virtual terminal number.

 * @buf:	Pointer to an buffer to read data from

 * @count:	Size of buffer available for reading

 *

 * The HVC thread calls this method to write characters to the back-end.

 * The function calls hvc_iucv_queue() to queue terminal data for sending.

 *

 * Locking:	The method gets called under an irqsave() spinlock; and

 *		locks struct hvc_iucv_private->lock.

/**

 * hvc_iucv_notifier_add() - HVC notifier for opening a TTY for the first time.

 * @hp:	Pointer to the HVC device (struct hvc_struct)

 * @id:	Additional data (originally passed to hvc_alloc): the index of an struct

 *	hvc_iucv_private instance.

 *

 * The function sets the tty state to TTY_OPENED for the struct hvc_iucv_private

 * instance that is derived from @id. Always returns 0.

 *

 * Locking:	struct hvc_iucv_private->lock, spin_lock_bh

/**

 * hvc_iucv_cleanup() - Clean up and reset a z/VM IUCV HVC instance.

 * @priv:	Pointer to the struct hvc_iucv_private instance.

/**

 * tty_outqueue_empty() - Test if the tty outq is empty

 * @priv:	Pointer to struct hvc_iucv_private instance.

/**

 * flush_sndbuf_sync() - Flush send buffer and wait for completion

 * @priv:	Pointer to struct hvc_iucv_private instance.

 *

 * The routine cancels a pending sndbuf work, calls hvc_iucv_send()

 * to flush any buffered terminal output data and waits for completion.

 force sending buffered data */

 anything queued ? */

/**

 * hvc_iucv_hangup() - Sever IUCV path and schedule hvc tty hang up

 * @priv:	Pointer to hvc_iucv_private structure

 *

 * This routine severs an existing IUCV communication path and hangs

 * up the underlying HVC terminal device.

 * The hang-up occurs only if an IUCV communication path is established;

 * otherwise there is no need to hang up the terminal device.

 *

 * The IUCV HVC hang-up is separated into two steps:

 * 1. After the IUCV path has been severed, the iucv_state is set to

 *    IUCV_SEVERED.

 * 2. Later, when the HVC thread calls hvc_iucv_get_chars(), the

 *    IUCV_SEVERED state causes the tty hang-up in the HVC layer.

 *

 * If the tty has not yet been opened, clean up the hvc_iucv_private

 * structure to allow re-connects.

 * If the tty has been opened, let get_chars() return -EPIPE to signal

 * the HVC layer to hang up the tty and, if so, wake up the HVC thread

 * to call get_chars()...

 *

 * Special notes on hanging up a HVC terminal instantiated as console:

 * Hang-up:	1. do_tty_hangup() replaces file ops (= hung_up_tty_fops)

 *		2. do_tty_hangup() calls tty->ops->close() for console_filp

 *			=> no hangup notifier is called by HVC (default)

 *		2. hvc_close() returns because of tty_hung_up_p(filp)

 *			=> no delete notifier is called!

 * Finally, the back-end is not being notified, thus, the tty session is

 * kept active (TTY_OPEN) to be ready for re-connects.

 *

 * Locking:	spin_lock(&priv->lock) w/o disabling bh

 console is special (see above) */

 finally sever path (outside of priv->lock due to lock ordering) */

/**

 * hvc_iucv_notifier_hangup() - HVC notifier for TTY hangups.

 * @hp:		Pointer to the HVC device (struct hvc_struct)

 * @id:		Additional data (originally passed to hvc_alloc):

 *		the index of an struct hvc_iucv_private instance.

 *

 * This routine notifies the HVC back-end that a tty hangup (carrier loss,

 * virtual or otherwise) has occurred.

 * The z/VM IUCV HVC device driver ignores virtual hangups (vhangup())

 * to keep an existing IUCV communication path established.

 * (Background: vhangup() is called from user space (by getty or login) to

 *		disable writing to the tty by other applications).

 * If the tty has been opened and an established IUCV path has been severed

 * (we caused the tty hangup), the function calls hvc_iucv_cleanup().

 *

 * Locking:	struct hvc_iucv_private->lock

	/* NOTE: If the hangup was scheduled by ourself (from the iucv

	 *	 path_servered callback [IUCV_SEVERED]), we have to clean up

	 *	 our structure and to set state to TTY_CLOSED.

	 *	 If the tty was hung up otherwise (e.g. vhangup()), then we

	 *	 ignore this hangup and keep an established IUCV path open...

	 *	 (...the reason is that we are not able to connect back to the

/**

 * hvc_iucv_dtr_rts() - HVC notifier for handling DTR/RTS

 * @hp:		Pointer the HVC device (struct hvc_struct)

 * @raise:	Non-zero to raise or zero to lower DTR/RTS lines

 *

 * This routine notifies the HVC back-end to raise or lower DTR/RTS

 * lines.  Raising DTR/RTS is ignored.  Lowering DTR/RTS indicates to

 * drop the IUCV connection (similar to hang up the modem).

	/* Raising the DTR/RTS is ignored as IUCV connections can be

	 * established at any times.

	/* Lowering the DTR/RTS lines disconnects an established IUCV

	 * connection.

 save reference to IUCV path */

	/* Sever IUCV path outside of priv->lock due to lock ordering of:

/**

 * hvc_iucv_notifier_del() - HVC notifier for closing a TTY for the last time.

 * @hp:		Pointer to the HVC device (struct hvc_struct)

 * @id:		Additional data (originally passed to hvc_alloc):

 *		the index of an struct hvc_iucv_private instance.

 *

 * This routine notifies the HVC back-end that the last tty device fd has been

 * closed.  The function cleans up tty resources.  The clean-up of the IUCV

 * connection is done in hvc_iucv_dtr_rts() and depends on the HUPCL termios

 * control setting.

 *

 * Locking:	struct hvc_iucv_private->lock

/**

 * hvc_iucv_filter_connreq() - Filter connection request based on z/VM user ID

 * @ipvmid:	Originating z/VM user ID (right padded with blanks)

 *

 * Returns 0 if the z/VM user ID that is specified with @ipvmid is permitted to

 * connect, otherwise non-zero.

 Note: default policy is ACCEPT if no filter is set */

		/* If a filter entry contains the filter wildcard character,

		 * reduce the length to match the leading portion of the user

		 * ID only (wildcard match).  Characters following the wildcard

		 * are ignored.

/**

 * hvc_iucv_path_pending() - IUCV handler to process a connection request.

 * @path:	Pending path (struct iucv_path)

 * @ipvmid:	z/VM system identifier of originator

 * @ipuser:	User specified data for this path

 *		(AF_IUCV: port/service name and originator port)

 *

 * The function uses the @ipuser data to determine if the pending path belongs

 * to a terminal managed by this device driver.

 * If the path belongs to this driver, ensure that the terminal is not accessed

 * multiple times (only one connection to a terminal is allowed).

 * If the terminal is not yet connected, the pending path is accepted and is

 * associated to the appropriate struct hvc_iucv_private instance.

 *

 * Returns 0 if @path belongs to a terminal managed by the this device driver;

 * otherwise returns -ENODEV in order to dispatch this path to other handlers.

 *

 * Locking:	struct hvc_iucv_private->lock

	/* First, check if the pending path request is managed by this

	 * IUCV handler:

	 * - find a disconnected device if ipuser contains the wildcard

	 * - find the device that matches the terminal ID in ipuser

 Enforce that ipvmid is allowed to connect to us */

	/* If the terminal is already connected or being severed, then sever

	 * this path to enforce that there is only ONE established communication

 accept path */

 remote service (for af_iucv) */

 local service  (for af_iucv) */

 IUCV MSGLIMIT */

 TODO: use IUCV_IPRMDATA */

 store path information */

 flush buffered output data... */

/**

 * hvc_iucv_path_severed() - IUCV handler to process a path sever.

 * @path:	Pending path (struct iucv_path)

 * @ipuser:	User specified data for this path

 *		(AF_IUCV: port/service name and originator port)

 *

 * This function calls the hvc_iucv_hangup() function for the

 * respective IUCV HVC terminal.

 *

 * Locking:	struct hvc_iucv_private->lock

/**

 * hvc_iucv_msg_pending() - IUCV handler to process an incoming IUCV message.

 * @path:	Pending path (struct iucv_path)

 * @msg:	Pointer to the IUCV message

 *

 * The function puts an incoming message on the input queue for later

 * processing (by hvc_iucv_get_chars() / hvc_iucv_write()).

 * If the tty has not yet been opened, the message is rejected.

 *

 * Locking:	struct hvc_iucv_private->lock

 reject messages that exceed max size of iucv_tty_msg->datalen */

 reject messages if tty has not yet been opened */

 allocate tty buffer to save iucv msg only */

 -ENOMEM */

 wake up hvc thread */

/**

 * hvc_iucv_msg_complete() - IUCV handler to process message completion

 * @path:	Pending path (struct iucv_path)

 * @msg:	Pointer to the IUCV message

 *

 * The function is called upon completion of message delivery to remove the

 * message from the outqueue. Additional delivery information can be found

 * msg->audit: rejected messages (0x040000 (IPADRJCT)), and

 *	       purged messages	 (0x010000 (IPADPGNR)).

 *

 * Locking:	struct hvc_iucv_private->lock

 HVC operations */

 IUCV HVC device attributes */

/**

 * hvc_iucv_alloc() - Allocates a new struct hvc_iucv_private instance

 * @id:			hvc_iucv_table index

 * @is_console:		Flag if the instance is used as Linux console

 *

 * This function allocates a new hvc_iucv_private structure and stores

 * the instance in hvc_iucv_table at index @id.

 * Returns 0 on success; otherwise non-zero.

 set console flag */

 allocate hvc device */

		  PAGE_SIZE */

 notify HVC thread instead of using polling */

 setup iucv related information */

 create and setup device */

/**

 * hvc_iucv_destroy() - Destroy and free hvc_iucv_private instances

/**

 * hvc_iucv_parse_filter() - Parse filter for a single z/VM user ID

 * @filter:	String containing a comma-separated list of z/VM user IDs

 * @dest:	Location where to store the parsed z/VM user ID

 check for '\n' (if called from sysfs) */

 prohibit filter entries containing the wildcard character only */

 pad with blanks and save upper case version of user ID */

/**

 * hvc_iucv_setup_filter() - Set up z/VM user ID filter

 * @filter:	String consisting of a comma-separated list of z/VM user IDs

 *

 * The function parses the @filter string and creates an array containing

 * the list of z/VM user ID filter entries.

 * Return code 0 means success, -EINVAL if the filter is syntactically

 * incorrect, -ENOMEM if there was not enough memory to allocate the

 * filter list array, or -ENOSPC if too many z/VM user IDs have been specified.

 clear filter */

 count user IDs in order to allocate sufficient memory */

 check if the specified list exceeds the filter limit */

/**

 * param_set_vmidfilter() - Set z/VM user ID filter parameter

 * @val:	String consisting of a comma-separated list of z/VM user IDs

 * @kp:		Kernel parameter pointing to hvc_iucv_filter array

 *

 * The function sets up the z/VM user ID filter specified as comma-separated

 * list of user IDs in @val.

 * Note: If it is called early in the boot process, @val is stored and

 *	 parsed later in hvc_iucv_init().

 defer... */

/**

 * param_get_vmidfilter() - Get z/VM user ID filter

 * @buffer:	Buffer to store z/VM user ID filter,

 *		(buffer size assumption PAGE_SIZE)

 * @kp:		Kernel parameter pointing to the hvc_iucv_filter array

 *

 * The function stores the filter as a comma-separated list of z/VM user IDs

 * in @buffer. Typically, sysfs routines call this function for attr show.

 replace last comma and update rc */

/**

 * hvc_iucv_init() - z/VM IUCV HVC device driver initialization

 parse hvc_iucv_allow string and create z/VM user ID filter list */

	/* register the first terminal device as console

 allocate hvc_iucv_private structs */

 register IUCV callback handler */

 ensure that we do not provide any device */

/**

 * hvc_iucv_config() - Parsing of hvc_iucv=  kernel command line parameter

 * @val:	Parameter value (numeric)

 SPDX-License-Identifier: GPL-2.0+

/*

 * IBM eServer Hypervisor Virtual Console Server Device Driver

 * Copyright (C) 2003, 2004 IBM Corp.

 *  Ryan S. Arnold (rsa@us.ibm.com)

 *

 * Author(s) :  Ryan S. Arnold <rsa@us.ibm.com>

 *

 * This is the device driver for the IBM Hypervisor Virtual Console Server,

 * "hvcs".  The IBM hvcs provides a tty driver interface to allow Linux

 * user space applications access to the system consoles of logically

 * partitioned operating systems, e.g. Linux, running on the same partitioned

 * Power5 ppc64 system.  Physical hardware consoles per partition are not

 * practical on this hardware so system consoles are accessed by this driver

 * using inter-partition firmware interfaces to virtual terminal devices.

 *

 * A vty is known to the HMC as a "virtual serial server adapter".  It is a

 * virtual terminal device that is created by firmware upon partition creation

 * to act as a partitioned OS's console device.

 *

 * Firmware dynamically (via hotplug) exposes vty-servers to a running ppc64

 * Linux system upon their creation by the HMC or their exposure during boot.

 * The non-user interactive backend of this driver is implemented as a vio

 * device driver so that it can receive notification of vty-server lifetimes

 * after it registers with the vio bus to handle vty-server probe and remove

 * callbacks.

 *

 * Many vty-servers can be configured to connect to one vty, but a vty can

 * only be actively connected to by a single vty-server, in any manner, at one

 * time.  If the HMC is currently hosting the console for a target Linux

 * partition; attempts to open the tty device to the partition's console using

 * the hvcs on any partition will return -EBUSY with every open attempt until

 * the HMC frees the connection between its vty-server and the desired

 * partition's vty device.  Conversely, a vty-server may only be connected to

 * a single vty at one time even though it may have several configured vty

 * partner possibilities.

 *

 * Firmware does not provide notification of vty partner changes to this

 * driver.  This means that an HMC Super Admin may add or remove partner vtys

 * from a vty-server's partner list but the changes will not be signaled to

 * the vty-server.  Firmware only notifies the driver when a vty-server is

 * added or removed from the system.  To compensate for this deficiency, this

 * driver implements a sysfs update attribute which provides a method for

 * rescanning partner information upon a user's request.

 *

 * Each vty-server, prior to being exposed to this driver is reference counted

 * using the 2.6 Linux kernel kref construct.

 *

 * For direction on installation and usage of this driver please reference

 * Documentation/powerpc/hvcs.rst.

/*

 * 1.3.0 -> 1.3.1 In hvcs_open memset(..,0x00,..) instead of memset(..,0x3F,00).

 * Removed braces around single statements following conditionals.  Removed '=

 * 0' after static int declarations since these default to zero.  Removed

 * list_for_each_safe() and replaced with list_for_each_entry() in

 * hvcs_get_by_index().  The 'safe' version is un-needed now that the driver is

 * using spinlocks.  Changed spin_lock_irqsave() to spin_lock() when locking

 * hvcs_structs_lock and hvcs_pi_lock since these are not touched in an int

 * handler.  Initialized hvcs_structs_lock and hvcs_pi_lock to

 * SPIN_LOCK_UNLOCKED at declaration time rather than in hvcs_module_init().

 * Added spin_lock around list_del() in destroy_hvcs_struct() to protect the

 * list traversals from a deletion.  Removed '= NULL' from pointer declaration

 * statements since they are initialized NULL by default.  Removed wmb()

 * instances from hvcs_try_write().  They probably aren't needed with locking in

 * place.  Added check and cleanup for hvcs_pi_buff = kmalloc() in

 * hvcs_module_init().  Exposed hvcs_struct.index via a sysfs attribute so that

 * the coupling between /dev/hvcs* and a vty-server can be automatically

 * determined.  Moved kobject_put() in hvcs_open outside of the

 * spin_unlock_irqrestore().

 *

 * 1.3.1 -> 1.3.2 Changed method for determining hvcs_struct->index and had it

 * align with how the tty layer always assigns the lowest index available.  This

 * change resulted in a list of ints that denotes which indexes are available.

 * Device additions and removals use the new hvcs_get_index() and

 * hvcs_return_index() helper functions.  The list is created with

 * hvsc_alloc_index_list() and it is destroyed with hvcs_free_index_list().

 * Without these fixes hotplug vty-server adapter support goes crazy with this

 * driver if the user removes a vty-server adapter.  Moved free_irq() outside of

 * the hvcs_final_close() function in order to get it out of the spinlock.

 * Rearranged hvcs_close().  Cleaned up some printks and did some housekeeping

 * on the changelog.  Removed local CLC_LENGTH and used HVCS_CLC_LENGTH from

 * arch/powerepc/include/asm/hvcserver.h

 *

 * 1.3.2 -> 1.3.3 Replaced yield() in hvcs_close() with tty_wait_until_sent() to

 * prevent possible lockup with realtime scheduling as similarly pointed out by

 * akpm in hvc_console.  Changed resulted in the removal of hvcs_final_close()

 * to reorder cleanup operations and prevent discarding of pending data during

 * an hvcs_close().  Removed spinlock protection of hvcs_struct data members in

 * hvcs_write_room() and hvcs_chars_in_buffer() because they aren't needed.

/*

 * Wait this long per iteration while trying to push buffered data to the

 * hypervisor before allowing the tty to complete a close operation.

 1/10 of a second */

/*

 * Since the Linux TTY code does not currently (2-04-2004) support dynamic

 * addition of tty derived devices and we shouldn't allocate thousands of

 * tty_device pointers when the number of vty-server & vty partner connections

 * will most often be much lower than this, we'll arbitrarily allocate

 * HVCS_DEFAULT_SERVER_ADAPTERS tty_structs and cdev's by default when we

 * register the tty_driver. This can be overridden using an insmod parameter.

/*

 * The user can't insmod with more than HVCS_MAX_SERVER_ADAPTERS hvcs device

 * nodes as a sanity check.  Theoretically there can be over 1 Billion

 * vty-server & vty partner connections.

/*

 * We let Linux assign us a major number and we start the minors at zero.  There

 * is no intuitive mapping between minor number and the target vty-server

 * adapter except that each new vty-server adapter is always assigned to the

 * smallest minor number available.

/*

 * The hcall interface involves putting 8 chars into each of two registers.

 * We load up those 2 registers (in arch/powerpc/platforms/pseries/hvconsole.c)

 * by casting char[16] to long[2].  It would work without __ALIGNED__, but a 

 * little (tiny) bit slower because an unaligned load is slower than aligned 

 * load.

/*

 * How much data can firmware send with each hvc_put_chars()?  Maybe this

 * should be moved into an architecture specific area.

/*

 * This is the maximum amount of data we'll let the user send us (hvcs_write) at

 * once in a chunk as a sanity check.

/*

 * Be careful when adding flags to this line discipline.  Don't add anything

 * that will cause echoing or we'll go into recursive loop echoing chars back

 * and forth with the console drivers.

/*

 * This value is used to take the place of a command line parameter when the

 * module is inserted.  It starts as -1 and stays as such if the user doesn't

 * specify a module insmod parameter.  If they DO specify one then it is set to

 * the value of the integer passed in.

 Status of partner info rescan triggered via sysfs. */

/*

 * In order to be somewhat sane this driver always associates the hvcs_struct

 * index element with the numerically equal tty->index.  This means that a

 * hotplugged vty-server adapter will always map to the lowest index valued

 * device node.  If vty-servers were hotplug removed from the system and then

 * new ones added the new vty-server may have the largest slot number of all

 * the vty-server adapters in the partition but it may have the lowest dev node

 * index of all the adapters due to the hole left by the hotplug removed

 * adapter.  There are a set of functions provided to get the lowest index for

 * a new device as well as return the index to the list.  This list is allocated

 * with a number of elements equal to the number of device nodes requested when

 * the module was inserted.

/*

 * How large is the list?  This is kept for traversal since the list is

 * dynamically created.

/*

 * Used by the khvcsd to pick up I/O operations when the kernel_thread is

 * already awake but potentially shifted to TASK_INTERRUPTIBLE state.

/*

 * Use by the kthread construct for task operations like waking the sleeping

 * thread and stopping the kthread.

/*

 * We allocate this for the use of all of the hvcs_structs when they fetch

 * partner info.

 Only allow one hvcs_struct to use the hvcs_pi_buff at a time. */

 One vty-server per hvcs_struct */

	/*

	 * This index identifies this hvcs device as the complement to a

	 * specific tty index.

	/*

	 * Used to tell the driver kernel_thread what operations need to take

	 * place upon this hvcs_struct instance.

	/*

	 * This buffer is required so that when hvcs_write_room() reports that

	 * it can send HVCS_BUFF_LEN characters that it will buffer the full

	 * HVCS_BUFF_LEN characters if need be.  This is essential for opost

	 * writes since they do not do high level buffering and expect to be

	 * able to send what the driver commits to sending buffering

	 * [e.g. tab to space conversions in n_tty.c opost()].

	/*

	 * Any variable below is valid before a tty is connected and

	 * stays valid after the tty is disconnected.  These shouldn't be

	 * whacked until the kobject refcount reaches zero though some entries

	 * may be changed via sysfs initiatives.

 is the vty-server currently connected to a vty? */

 partner unit address */

 partner partition ID */

 CLC + Null Term */

 list management */

 The sysfs interface for the driver and devices */

	/*

	 * Don't need this feature at the present time because firmware doesn't

	 * yet support multiple partners.

 writing a '0' to this sysfs entry will result in the disconnect. */

 A 1 means it is updating, a 0 means it is done updating */

/*

 * If the device is being removed we don't have to worry about this interrupt

 * handler taking any further interrupts because they are disabled which means

 * the hvcs_struct will always be valid in this handler.

 This function must be called with the hvcsd->lock held */

 won't send partial writes */

 wmb(); */

 wmb(); */

			/*

			 * We are still obligated to deliver the data to the

			 * hypervisor even if the tty has been closed because

			 * we committed to delivering it.  But don't try to wake

			 * a non-existent tty.

 remove the read masks */

 Give the TTY time to process the data we just sent. */

 This is synch -- FIXME :js: it is not! */

 Do this _after_ the flip_buffer_push */

		/*

		 * If any of the hvcs adapters want to try a write or quick read

		 * don't schedule(), yield a smidgen then execute the hvcs_io

		 * thread again for those that want the write.

 Paranoia check */

 the list_del poisons the pointers */

 Paranoia check */

 Find the numerically lowest first free index. */

 Make sure we are properly initialized */

 early to avoid cleanup on failure */

 hvcsd->index = ++hvcs_struct_count; */

	/*

	 * This will populate the hvcs_struct's partner info fields for the

	 * first time.

	/*

	 * If a user app opens a tty that corresponds to this vty-server before

	 * the hvcs_struct has been added to the devices list then the user app

	 * will get -ENODEV.

	/*

	 * DON'T enable interrupts here because there is no user to receive the

	 * data.

 By this time the vty-server won't be getting any more interrupts */

	/*

	 * Let the last holder of this object cause it to be removed, which

	 * would probably be tty_hangup below.

	/*

	 * The hangup is a scheduled function which will auto chain call

	 * hvcs_hangup.  The tty should always be valid at this time unless a

	 * simultaneous tty close already cleaned up the hvcs_struct.

 Only called from hvcs_get_pi please */

 copy the null-term char too */

/*

 * Traverse the list and add the partner info that is found to the hvcs_struct

 * struct entry. NOTE: At this time I know that partner info will return a

 * single entry but in the future there may be multiple partner info entries per

 * vty-server and you'll want to zero out that list and reset it.  If for some

 * reason you have an old version of this driver but there IS more than one

 * partner info then hvcsd->p_* will hold the last partner info data from the

 * firmware query.  A good way to update this code would be to replace the three

 * partner info fields in hvcs_struct with a list of hvcs_partner_info

 * instances.

 *

 * This function must be called with the hvcsd->lock held.

 nixes the values if the partner vty went away */

/*

 * This function is executed by the driver "rescan" sysfs entry.  It shouldn't

 * be executed elsewhere, in order to prevent deadlock issues.

/*

 * Farm this off into its own function because it could be more complex once

 * multiple partners support is added. This function should be called with

 * the hvcsd->lock held.

/*

 * NOTE: It is possible that the super admin removed a partner vty and then

 * added a different vty as the new partner.

 *

 * This function must be called with the hvcsd->lock held.

	/*

	 * If there wasn't any pi when the device was added it doesn't meant

	 * there isn't any now.  This driver isn't notified when a new partner

	 * vty is added to a vty-server so we discover changes on our own.

	 * Please see comments in hvcs_register_connection() for justification

	 * of this bizarre code.

	/*

	 * As per the spec re-get the pi and try again if -EINVAL after the

	 * first connection attempt.

	/*

	 * EBUSY is the most likely scenario though the vty could have been

	 * removed or there really could be an hcall error due to the parameter

	 * data but thanks to ambiguous firmware return codes we can't really

	 * tell.

 This function must be called with the hvcsd->lock held */

 This helper function must be called WITHOUT the hvcsd->lock held */

	/*

	 * It is possible that the vty-server was removed between the time that

	 * the conn was registered and now.

		/*

		 * It is possible the vty-server was removed after the irq was

		 * requested but before we have time to enable interrupts.

/*

 * This always increments the kref ref count if the call is successful.

 * Please remember to dec when you are done with the instance.

 *

 * NOTICE: Do NOT hold either the hvcs_struct.lock or hvcs_structs_lock when

 * calling this function or you will get deadlock.

	/*

	 * Is there a vty-server that shares the same index?

	 * This function increments the kref index.

	/*

	 * Save these in the spinlock for the enable operations that need them

	 * outside of the spinlock.

	/*

	 * This must be done outside of the spinlock because it requests irqs

	 * and will grab the spinlock and free the connection if it fails.

/*

 * This is invoked via the tty_open interface when a user app connects to the

 * /dev node.

	/*

	 * Is someone trying to close the file associated with this device after

	 * we have hung up?  If so tty->driver_data wouldn't be valid.

	/*

	 * No driver_data means that this close was probably issued after a

	 * failed hvcs_open by the tty layer's release_dev() api and we can just

	 * exit cleanly.

		/*

		 * NULL this early so that the kernel_thread doesn't try to

		 * execute any operations on the TTY even though it is obligated

		 * to deliver any pending I/O to the hypervisor.

	/*

	 * This line is important because it tells hvcs_open that this

	 * device needs to be re-configured the next time hvcs_open is

	 * called.

 Preserve this so that we know how many kref refs to put */

	/*

	 * Don't kref put inside the spinlock because the destruction

	 * callback may use the spinlock and it may get called before the

	 * spinlock has been released.

 I don't think the tty needs the hvcs_struct pointer after a hangup */

	/* This will drop any buffered data on the floor which is OK in a hangup

	/*

	 * We need to kref_put() for every open_count we have since the

	 * tty_hangup() function doesn't invoke a close per open connection on a

	 * non-console device.

		/*

		 * The final put will trigger destruction of the hvcs_struct.

		 * NOTE:  If this hangup was signaled from user space then the

		 * final put will never happen.

/*

 * NOTE: This is almost always from_user since user level apps interact with the

 * /dev nodes. I'm trusting that if hvcs_write gets called and interrupted by

 * hvcs_remove (which removes the target device and executes tty_hangup()) that

 * tty_hangup will allow hvcs_write time to complete execution before it

 * terminates our device.

	/*

	 * If they don't check the return code off of their open they may

	 * attempt this even if there is no connected device.

 Reasonable size to prevent user level flooding */

	/*

	 * Somehow an open succeeded but the device was removed or the

	 * connection terminated between the vty-server and partner vty during

	 * the middle of a write operation?  This is a crummy place to do this

	 * but we want to keep it all in the spinlock.

		/*

		 * No more space, this probably means that the last call to

		 * hvcs_write() didn't succeed and the buffer was filled up.

		/*

		 * If this is true then we don't want to try writing to the

		 * hypervisor because that is the kernel_threads job now.  We'll

		 * just add to the buffer.

 won't send partial writes */

		/*

		 * Since we know we have enough room in hvcsd->buffer for

		 * tosend we record that it was sent regardless of whether the

		 * hypervisor actually took it because we have it buffered.

		/*

		 * Test after the chars_in_buffer reset otherwise this could

		 * deadlock our writes if hvc_put_chars fails.

/*

 * This is really asking how much can we guarantee that we can send or that we

 * absolutely WILL BUFFER if we can't send it.  This driver MUST honor the

 * return value, hence the reason for hvcs_struct buffering.

 Paranoia check to be thorough. */

 Has the user specified an overload with an insmod param? */

	/*

	 * We'll let the system assign us a major number, indicated by leaving

	 * it blank.

	/*

	 * We role our own so that we DONT ECHO.  We can't echo because the

	 * device we are connecting to already echoes by default and this would

	 * throw us into a horrible recursive echo-echo-echo loop.

	/*

	 * The following call will result in sysfs entries that denote the

	 * dynamically assigned major and minor numbers for our devices.

	/* This needs to be done AFTER the vio_register_driver() call or else

	 * the kobjects won't be initialized properly.

	/*

	 * This driver receives hvcs_remove callbacks for each device upon

	 * module removal.

	/*

	 * This synchronous operation  will wake the khvcsd kthread if it is

	 * asleep and will return when khvcsd has terminated.

 SPDX-License-Identifier: GPL-2.0+

/*

 * vio driver interface to hvc_console.c

 *

 * This code was moved here to allow the remaining code to be reused as a

 * generic polling mode with semi-reliable transport driver core to the

 * console and tty subsystems.

 *

 *

 * Copyright (C) 2001 Anton Blanchard <anton@au.ibm.com>, IBM

 * Copyright (C) 2001 Paul Mackerras <paulus@au.ibm.com>, IBM

 * Copyright (C) 2004 Benjamin Herrenschmidt <benh@kernel.crashing.org>, IBM Corp.

 * Copyright (C) 2004 IBM Corporation

 *

 * Additional Author(s):

 *  Ryan S. Arnold <rsa@us.ibm.com>

 *

 * TODO:

 *

 *   - handle error in sending hvsi protocol packets

 *   - retry nego on subsequent sends ?

 HV term number */

 Raw data or HVSI packets */

 HVSI specific data */

 For early boot console */

		/*

		 * Work around a HV bug where it gives us a null

		 * after every \r.  -- paulus

/**

 * hvterm_raw_put_chars: send characters to firmware for given vterm adapter

 * @vtermno: The virtual terminal number.

 * @buf: The characters to send. Because of the underlying hypercall in

 *       hvc_put_chars(), this buffer must be at least 16 bytes long, even if

 *       you are sending fewer chars.

 * @count: number of chars to send.

			/*

			 * hvterm_raw_put_chars requires at least a 16-byte

			 * buffer, so go via the bounce buffer

 This shouldn't be needed...but... */

 probed with invalid parameters. */

 Is it our boot one ? */

 nope, allocate a new one */

 register udbg if it's not there already for console 0 */

 Register as a vio device to receive callbacks */

 after drivers/tty/hvc/hvc_console.c */

 find the boot console from /chosen/stdout */

 Check if it's a virtual terminal */

 Check the protocol */

 HVSI, perform the handshake now */

	/* When using the old HVSI driver don't register the HVC

	 * backend for HVSI, only do udbg

 Check whether the user has requested a different console. */

/* call this from early_init() for a working debug console on

 * vterm capable LPAR machines

	/*

	 * If we're running as a hypervisor then we definitely can't call the

	 * hypervisor to print debug output (we *are* the hypervisor), so don't

	 * register if we detect that MSR_HV=1.

 CONFIG_PPC_EARLY_DEBUG_LPAR */

 See comment above in udbg_init_debug_lpar() */

 CONFIG_PPC_EARLY_DEBUG_LPAR_HVSI */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2001 Anton Blanchard <anton@au.ibm.com>, IBM

 * Copyright (C) 2001 Paul Mackerras <paulus@au.ibm.com>, IBM

 * Copyright (C) 2004 Benjamin Herrenschmidt <benh@kernel.crashing.org>, IBM Corp.

 * Copyright (C) 2004 IBM Corporation

 *

 * Additional Author(s):

 *  Ryan S. Arnold <rsa@us.ibm.com>

/*

 * Wait this long per iteration while trying to push buffered data to the

 * hypervisor before allowing the tty to complete a close operation.

 1/10 of a second */

/*

 * These sizes are most efficient for vio, because they are the

 * native transfer size. We could make them selectable in the

 * future to better deal with backends that want other buffer sizes.

 Picks up late kicks after list walk but before schedule() */

 hvc_init is triggered from hvc_alloc, i.e. only when actually used */

 dynamic list of hvc_struct instances */

/*

 * Protect the list of hvc_struct instances from inserts and removals during

 * list traversal.

/*

 * This value is used to assign a tty->index value to a hvc_struct based

 * upon order of exposure via hvc_probe(), when we can not match it to

 * a console candidate registered with hvc_instantiate().

/*

 * Do not call this function with either the hvc_structs_mutex or the hvc_struct

 * lock held.  If successful, this function increments the kref reference

 * count against the target hvc_struct so it should be released when finished.

/*

 * Wait for the console to flush before writing more to it. This sleeps.

/*

 * Initial console vtermnos for console API usage prior to full console

 * initialization.  Any vty adapter outside this range will not have usable

 * console interfaces but can still be used as a tty device.  This has to be

 * static because kmalloc will not work during early console init.

/*

 * Console APIs, NOT TTY.  These APIs are available immediately when

 * hvc_console_setup() finds adapters.

 Console access attempt outside of acceptable console range. */

 This console adapter was removed so it is not usable. */

				/* throw away characters on error

/*

 * Early console initialization.  Precedes driver initialization.

 *

 * (1) we are first, and the user specified another driver

 * -- index will remain -1

 * (2) we are first and the user specified no driver

 * -- index will be set to 0, then we will fail setup.

 * (3)  we are first and the user specified our driver

 * -- index will be set to user specified driver, and we will fail

 * (4) we are after driver, and this initcall will register us

 * -- if the user didn't specify a driver then the console will match

 *

 * Note that for cases 2 and 3, we will match later when the io driver

 * calls hvc_instantiate() and call register again.

 callback when the kboject ref count reaches zero. */

 Already enabled, bail out */

 	/* If this index is what the user requested, then register

	 * now (setup won't fail at this point).  It's ok to just

	 * call register again if previously .setup failed.

/*

 * hvc_instantiate() is an early console discovery method which locates

 * consoles * prior to the vio subsystem discovering them.  Hotplugged

 * vty adapters do NOT get an hvc_instantiate() callback since they

 * appear after early console init.

 make sure no tty has been registered in this index */

 check if we need to re-register the kernel console */

 Wake the sleeping khvcd */

 Auto increments kref reference if found. */

/*

 * The TTY interface won't be used until after the vio layer has exposed the vty

 * adapter to the kernel.

 Check and then increment for fast path open. */

 else count == 0 */

	/*

	 * If the notifier fails we return an error.  The tty layer

	 * will call hvc_close() after a failed open but we don't want to clean

	 * up there so we'll clean up here and clear out the previously set

	 * tty fields and return the kref reference.

 We are ready... raise DTR/RTS */

 Force wakeup of the polling thread */

 We are done with the tty pointer now. */

 cancel pending tty resize work */

		/*

		 * Chain calls chars_in_buffer() and returns immediately if

		 * there is no buffered data otherwise sleeps on a wait queue

		 * waking periodically to check chars_in_buffer().

 cancel pending tty resize work */

	/*

	 * The N_TTY line discipline has problems such that in a close vs

	 * open->hangup case this can be called after the final close so prevent

	 * that from happening for now.

/*

 * Push buffered characters whether they were just recently buffered or waiting

 * on a blocked hypervisor.  Call this function with hp->lock held.

		/* throw away output on error; this happens when

 This write was probably executed during a tty close. */

 FIXME what's this (unprotected) check for? */

	/*

	 * Racy, but harmless, kick thread if there is still pending data.

/**

 * hvc_set_winsz() - Resize the hvc tty terminal window.

 * @work:	work structure.

 *

 * The routine shall not be called within an atomic context because it

 * might sleep.

 *

 * Locking:	hp->lock

/*

 * This is actually a contract between the driver and the tty layer outlining

 * how much write room the driver can guarantee will be sent OR BUFFERED.  This

 * driver MUST honor the return value.

/*

 * timeout will vary between the MIN and MAX values defined here.  By default

 * and during console activity we will use a default MIN_TIMEOUT of 10.  When

 * the console is idle, we increase the timeout value on each pass through

 * msleep until we reach the max.  This may be noticeable as a brief (average

 * one second) delay on the console before the console responds to input when

 * there has been no input for some time.

/*

 * Maximum number of bytes to get from the console driver if hvc_poll is

 * called from driver (and can't sleep). Any more than this and we break

 * and start polling with khvcd. This value was derived from an OpenBMC

 * console with the OPAL driver that results in about 0.25ms interrupts off

 * latency.

 Push pending writes */

 Reschedule us if still some write pending */

 If hvc_push() was not able to write, sleep a few msecs */

 No tty attached, just skip */

 Now check if we can get data (are we throttled ?) */

	/* If we aren't notifier driven and aren't throttled, we always

	 * request a reschedule

 Read data if any */

 If flip is full, just reschedule a later read */

 Hangup the tty when disconnected from host */

			/*

			 * Some back-ends can only ensure a certain min

			 * num of bytes read, which may be > 'count'.

			 * Let the tty clear the flip buff to make room.

 Handle the SysRq Hack */

 XXX should support a sequence */

 ^O */

				/* if ^O is pressed again, reset

 CONFIG_MAGIC_SYSRQ */

 Keep going until the flip is full */

 Break and defer if it's a large read in atomic */

	/*

	 * Latency break, schedule another poll immediately.

 Wakeup write queue if necessary */

		/* Activity is occurring, so reset the polling backoff value to

/**

 * __hvc_resize() - Update terminal window size information.

 * @hp:		HVC console pointer

 * @ws:		Terminal window size structure

 *

 * Stores the specified window size information in the hvc structure of @hp.

 * The function schedule the tty resize update.

 *

 * Locking:	Locking free; the function MUST be called holding hp->lock

/*

 * This kthread is either polling or interrupt driven.  This is determined by

 * calling hvc_poll() who determines whether a console adapter support

 * interrupts.

				/*

				 * We don't use msleep_interruptible otherwise

				 * "kick" will fail to wake us up

 We wait until a driver actually comes along */

	/*

	 * find index to use:

	 * see if this vterm id matches one registered for console.

 find 'empty' slot for console */

 no matching slot, just use a counter */

 check if we need to re-register the kernel console */

 Don't whack hp->irq because tty_hangup() will need to free the irq. */

	/*

	 * We 'put' the instance that was grabbed when the kref instance

	 * was initialized using kref_init().  Let the last holder of this

	 * kref cause it to be removed, which will probably be the tty_vhangup

	 * below.

	/*

	 * This function call will auto chain call hvc_hangup.

 Driver initialization: called as soon as someone uses hvc_alloc(). */

 We need more than hvc_count adapters due to hotplug additions. */

	/* Always start the kthread because there can be hotplug vty adapters

	/*

	 * Make sure tty is fully registered before allowing it to be

	 * found by hvc_console_device.

 SPDX-License-Identifier: GPL-2.0+

/*

 * xen console driver interface to hvc_console.c

 *

 * (c) 2007 Gerd Hoffmann <kraxel@suse.de>

 "Xen" in hex */

 ------------------------------------------------------------------ */

 Use evtchn: this is called early, before irq is set up. */

 update queue values before going on */

 write ring before updating pointer */

	/*

	 * Make sure the whole buffer is emitted, polling if

	 * necessary.  We don't ever want to rely on the hvc daemon

	 * because the most interesting console output is when the

	 * kernel is crippled.

 get pointers before reading ring */

 read ring before consuming */

/*

 * Either for a dom0 to write to the system console, or a domU with a

 * debug version of Xen

 already configured */

	/*

	 * If the toolstack (or the hypervisor) hasn't set these values, the

	 * default value is 0. Even though gfn = 0 and evtchn = 0 are

	 * theoretically correct values, in practice they never are and they

	 * mean that a legacy toolstack hasn't initialized the pv console correctly.

 GFN == MFN for PV guest */

 already configured */

 Missed the backend's CLOSING state */

 CONFIG_HVC_XEN_FRONTEND */

 NO_IRQ */

 CONFIG_EARLY_PRINTK */

 SPDX-License-Identifier: GPL-2.0+

/*

 * IBM RTAS driver interface to hvc_console.c

 *

 * (C) Copyright IBM Corporation 2001-2005

 * (C) Copyright Red Hat, Inc. 2005

 *

 * Author(s): Maximino Augilar <IBM STI Design Center>

 *	    : Ryan S. Arnold <rsa@us.ibm.com>

 *	    : Utz Bacher <utz.bacher@de.ibm.com>

 *	    : David Woodhouse <dwmw2@infradead.org>

 *

 *    inspired by drivers/char/hvc_console.c

 *    written by Anton Blanchard and Paul Mackerras

	/* Allocate an hvc_struct for the console device we instantiated

 This will happen prior to module init.  There is no tty at this time? */

 SPDX-License-Identifier: GPL-2.0

 Assumes that always succeeds, works in practice */

 Reset state */

 Send version query */

		/* We copy the existing hvsi driver semantics

		 * here which are to trigger a hangup when

		 * we get a carrier loss.

		 * Closing our connection to the server will

		 * do just that.

 We restart the handshaking */

 Transition of carrier detect */

 We only handle version queries */

 Send version response */

 Assume protocol is open now */

	/* Check header validity. If it's invalid, we ditch

	 * the whole buffer and hope we eventually resync

 Packet incomplete ? */

 We have a packet, yay ! Handle it */

 Swallow packet and retry */

 If we have room in the buffer, ask HV for more */

	/*

	 * If we have at least 4 bytes in the buffer, check for

	 * a full packet and retry

	/* If we aren't open, don't do anything in order to avoid races

	 * with connection establishment. The hvc core will call this

	 * before we have returned from notifier_add(), and we need to

	 * avoid multiple users playing with the receive buffer

	/* We try twice, once with what data we have and once more

	 * after we try to fetch some more from the hypervisor

 Consume existing data packet */

 Data packet fully consumed, move down remaning data */

 Try to get another packet */

 During early boot, IRQs are disabled, use mdelay */

 Try for up to 200ms */

	/* Try for up to 200ms, there can be a packet to

	 * start the process waiting for us...

	/* Failed, send a close connection packet just

	 * in case

 Then restart handshake */

 Try for up to 400ms */

 Query modem control lines */

 Set our own DTR */

 Set the opened flag so reads are allowed */

 Keep track of the tty data structure */

 Clear opened, synchronize with khvcd */

 Clear our own DTR */

 Tear down the connection */

 SPDX-License-Identifier: GPL-2.0 */

/*

 * Copyright (C) 2008 David Gibson, IBM Corporation

 * Copyright (C) 2012 Regents of the University of California

 * Copyright (C) 2017 SiFive

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2010, 2014 The Linux Foundation. All rights reserved.  */

 DCC Status Bits */

 Write a test character to check if it is handled */

 Returns -1 if error */

 SPDX-License-Identifier: GPL-2.0+

/*

 * udbg interface to hvc_console.c

 *

 * (C) Copyright David Gibson, IBM Corporation 2008.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2004 Hollis Blanchard <hollisb@us.ibm.com>, IBM

/* Host Virtual Serial Interface (HVSI) is a protocol between the hosted OS

 * and the service processor on IBM pSeries servers. On these servers, there

 * are no serial ports under the OS's control, and sometimes there is no other

 * console available either. However, the service processor has two standard

 * serial ports, so this over-complicated protocol allows the OS to control

 * those ports by proxy.

 *

 * Besides data, the procotol supports the reading/writing of the serial

 * port's DTR line, and the reading of the CD line. This is to allow the OS to

 * control a modem attached to the service processor's serial port. Note that

 * the OS cannot change the speed of the port through this protocol.

/*

 * we pass data via two 8-byte registers, so we would like our char arrays

 * properly aligned for those loads.

 woken when outbuf is emptied */

 woken when HVSI state changes */

 to implement write_room and chars_in_buffer */

 inbuf is for packet reassembly. leave a little room for leftovers. */

 HVSI packet sequence number */

 HVSI protocol state */

 CONFIG_MAGIC_SYSRQ */

 if we're waiting for an mctrl then we're already open */

 DEBUG */

 don't even have the packet header */

 don't have the rest of the packet */

 shift remaining bytes in packetbuf down */

 CD went away; no more connection */

 respond to service processor's version query */

 CONFIG_MAGIC_SYSRQ */

/*

 * We could get 252 bytes of data at once here. But the tty layer only

 * throttles us at TTY_THRESHOLD_THROTTLE (128) bytes, so we could overflow

 * it. Accordingly we won't send more than 128 bytes at a time to the flip

 * buffer, which will give the tty buffer a chance to throttle us. Should the

 * value of TTY_THRESHOLD_THROTTLE change in n_tty.c, this code should be

 * revisited.

		/*

		 * we still have more data to deliver, so we need to save off the

		 * overflow and send it later

/*

 * Returns true/false indicating data successfully read from hypervisor.

 * Used both to get packets for tty connections and to advance the state

 * machine during console handshaking (in which case tty = NULL and we ignore

 * incoming data).

 handle all completed packets */

 skip bytes until we find a header or run out of data */

/*

 * must get all pending data because we only get an irq on empty->non-empty

 * transition

		/* we weren't hung up and we weren't throttled, so we can

 for boot console, before the irq handler is running */

 get pending data */

 wait for irq handler to change our state */

 note that we can only set DTR */

	/*

	 * We could have a CLOSE or other data waiting for us before we even try

	 * to open; try to throw it all away so we don't get confused. (CLOSE

	 * is the first message sent up the pipe when the FSP comes online. We

	 * need to distinguish between "it came up a while ago and we're the first

	 * user" and "it was just reset before it saw our handshake packet".)

		/*

		 * ttys will re-attempt the handshake via hvsi_open, but

		 * the console will not.

 return the number of chars written, not the packet length */

 return any errors */

 this has already been handshaked as the console */

 wait for hvsi_write_worker to empty hp->outbuf */

 'writer' could still be pending if it didn't see n_outbuf = 0 yet */

	/*

	 * it's also possible that our timeout expired and hvsi_write_worker

	 * didn't manage to push outbuf. poof.

 discard remaining partial packets */

 only close down connection if it is not the console */

 no more irqs */

			/*

			 * any data delivered to the tty layer after this will be

			 * discarded (except for XON/XOFF)

 let any existing irq handlers finish. no more will start. */

 hvsi_write_worker will re-schedule until outbuf is empty. */

 tell FSP to stop sending data */

			/*

			 * drain anything FSP is still in the middle of sending, and let

			 * hvsi_handshake drain the rest on the next open.

 called with hp->lock held */

 success */

 hvsi_write_worker will keep rescheduling itself until outbuf is empty */

 DEBUG */

		/*

		 * We could have a non-open connection if the service processor died

		 * while we were busily scheduling ourselves. In that case, it could

		 * be minutes before the service processor comes back, so only try

		 * again once a second.

 DEBUG */

 we're either closing or not yet open; don't accept data */

	/*

	 * when the hypervisor buffer (16K) fills, data will stay in hp->outbuf

	 * and hvsi_write_worker will be scheduled. subsequent hvsi_write() calls

	 * will see there is no room in outbuf and return.

		/*

		 * we weren't able to write it all to the hypervisor.

		 * schedule another push attempt.

/*

 * I have never seen throttle or unthrottle called, so this little throttle

 * buffering scheme may or may not work.

 we can only alter DTR */

 irqs active now */

**** console (not tty) code: *****/

	/*

	 * ugh, we have to translate LF -> CRLF ourselves, in place.

	 * copied from hvc_console.c:

 give the FSP a chance to change the baud rate when we re-open */

 no irqs yet; must poll */

 search device tree for vty nodes */

 SPDX-License-Identifier: GPL-2.0+

/*

 * opal driver interface to hvc_console.c

 *

 * Copyright 2011 Benjamin Herrenschmidt <benh@kernel.crashing.org>, IBM Corp.

 Raw data or HVSI packets */

 HVSI specific data */

 For early boot console */

 Is it our boot one ? */

			/*

			 * We want put_chars to be atomic to avoid mangling of

			 * hvsi packets.

 Instanciate now to establish a mapping index==vtermno */

 hvc consoles on powernv may need to share a single irq */

 Register as a vio device to receive callbacks */

		/* This is needed for the cosole to flush

		 * when there aren't any interrupts.

 If the console wasn't in /chosen, try /ibm,opal */

		/* Current OPAL takeover doesn't provide the stdout

		 * path, so we hard wire it

 Check the protocol */

 HVSI, perform the handshake now */

 CONFIG_PPC_EARLY_DEBUG_OPAL_RAW */

 CONFIG_PPC_EARLY_DEBUG_OPAL_HVSI */

 SPDX-License-Identifier: GPL-2.0

/*

 * Freescale QUICC Engine UART device driver

 *

 * Author: Timur Tabi <timur@freescale.com>

 *

 * Copyright 2007 Freescale Semiconductor, Inc.

 *

 * This driver adds support for UART devices via Freescale's QUICC Engine

 * found on some Freescale SOCs.

 *

 * If Soft-UART support is needed but not already present, then this driver

 * will request and upload the "Soft-UART" microcode upon probe.  The

 * filename of the microcode should be fsl_qe_ucode_uart_X_YZ.bin, where "X"

 * is the name of the SOC (e.g. 8323), and YZ is the revision of the SOC,

 * (e.g. "11" for 1.1).

 mfspr, SPRN_SVR */

/*

 * The GUMR flag for Soft UART.  This would normally be defined in qe.h,

 * but Soft-UART is a hack and we want to keep everything related to it in

 * this file.

 Soft-UART */

/*

 * soft_uart is 1 if we need to use Soft-UART mode

/*

 * firmware_loaded is 1 if the firmware has been loaded, 0 otherwise.

/* Enable this macro to configure all serial ports in internal loopback

 #define LOOPBACK */

/* The major and minor device numbers are defined in

 * http://www.lanana.org/docs/device-list/devices-2.6+.txt.  For the QE

 * UART, we have major number 204 and minor numbers 46 - 49, which are the

 * same as for the CPM2.  This decision was made because no Freescale part

 * has both a CPM and a QE.

 Since we only have minor numbers 46 - 49, there is a hard limit of 4 ports */

 The number of buffer descriptors for receiving characters. */

 The number of buffer descriptors for transmitting characters. */

 The maximum size of the character buffer for a single RX BD. */

 The maximum size of the character buffer for a single TX BD. */

/*

 * The number of jiffies to wait after receiving a close command before the

 * device is actually closed.  This allows the last few characters to be

 * sent over the wire.

 reserved */

 Maximum idle chars */

 temp idle counter */

 Break count register */

 receive parity error counter */

 receive framing error counter */

 receive noise counter */

 receive break condition counter */

 last received break length */

 UART address character 1 & 2 */

 Temp storage */

 Transmit out of sequence char */

 control characters 1-8 */

 receive control character mask */

 receive control character register */

 receive last break character */

 reserved */

 reserved, should be cleared */

 reserved, should be cleared */

 reserved, should be cleared */

 reserved, should be cleared */

 reserved, should be cleared */

 reserved, should be cleared */

 reserved, should be cleared */

 reserved, should be cleared */

 reserved, should be cleared */

 reserved, should be cleared */

 reserved, should be cleared */

 The rest is for Soft-UART only */

 0x90, Shadow UPSMR */

 0x92, reserved, initialize to 0 */

 0x94, RX state, initialize to 0 */

 0x98, RX count, initialize to 0 */

 0x9C, Char length, set to 1+CL+PEN+1+SL */

 0x9D, reserved, initialize to 0 */

 0x9E, reserved, initialize to 0 */

 reserved */

 0xBC, Dump pointer */

 0xC0, reserved, initialize to 0 */

 0xC4, reserved, initialize to 0 */

 0xC5, mode, 0=AHDLC, 1=UART */

 0xC6, TX state */

 reserved */

 0xD0, reserved, initialize to 0 */

 0xD4, reserved, initialize to 0 */

 0xD5, reserved, initialize to 0 */

 SUPSMR definitions, for Soft-UART only */

 Private per-port data structure */

 First ucc is 0, not 1 */

 virtual address of the BD buffers */

 bus address of the BD buffers */

 size of BD buffer space */

/*

 * Virtual to physical address translation.

 *

 * Given the virtual address for a character buffer, this function returns

 * the physical (DMA) equivalent.

 something nasty happened */

/*

 * Physical to virtual address translation.

 *

 * Given the physical (DMA) address for a character buffer, this function

 * returns the virtual equivalent.

 sanity check */

 something nasty happened */

/*

 * Return 1 if the QE is done transmitting all buffers for this port

 *

 * This function scans each BD in sequence.  If we find a BD that is not

 * ready (READY=1), then we return 0 indicating that the QE is still sending

 * data.  If we reach the last BD (WRAP=1), then we know we've scanned

 * the entire list, and all BDs are done.

 This BD is not done, so return "not done" */

			/*

			 * This BD is done and it's the last one, so return

			 * "done"

/*

 * Set the modem control lines

 *

 * Although the QE can control the modem control lines (e.g. CTS), we

 * don't need that support. This function must exist, however, otherwise

 * the kernel will panic.

/*

 * Get the current modem control line status

 *

 * Although the QE can control the modem control lines (e.g. CTS), this

 * driver currently doesn't support that, so we always return Carrier

 * Detect, Data Set Ready, and Clear To Send.

/*

 * Disable the transmit interrupt.

 *

 * Although this function is called "stop_tx", it does not actually stop

 * transmission of data.  Instead, it tells the QE to not generate an

 * interrupt when the UCC is finished sending characters.

/*

 * Transmit as many characters to the HW as possible.

 *

 * This function will attempt to stuff of all the characters from the

 * kernel's transmit buffer into TX BDs.

 *

 * A return value of non-zero indicates that it successfully stuffed all

 * characters from the kernel buffer.

 *

 * A return value of zero indicates that there are still characters in the

 * kernel's buffer that have not been transmitted, but there are no more BDs

 * available.  This function should be called again after a BD has been made

 * available.

 Handle xon/xoff */

 Pick next descriptor and fill from buffer */

 Get next BD. */

 Pick next descriptor and fill from buffer */

 Get next BD. */

		/* The kernel buffer is empty, so turn off TX interrupts.  We

		   don't need to be told when the QE is finished transmitting

/*

 * Start transmitting data

 *

 * This function will start transmitting any available data, if the port

 * isn't already transmitting data.

 If we currently are transmitting, then just return */

 Otherwise, pump the port and start transmission */

/*

 * Stop transmitting data

/* Start or stop sending  break signal

 *

 * This function controls the sending of a break signal.  If break_state=1,

 * then we start sending a break signal.  If break_state=0, then we stop

 * sending the break signal.

/* ISR helper function for receiving character.

 *

 * This function is called by the ISR to handling receiving characters

	/* Just loop through the closed BDs and copy the characters into

	 * the buffer.

 If this one is empty, then we assume we've read them all */

 get number of characters, and check space in RX buffer */

		/* If we don't have enough room in RX buffer for the entire BD,

		 * then we try later, which will be the next RX interrupt.

 get pointer */

 loop through the buffer */

 This BD is ready to be used again. Clear status. get next */

 Write back buffer pointer */

 Activate BH processing */

 Error processing */

 Statistics */

 Mask out ignored conditions */

 Handle the remaining ones */

 Overrun does not affect the current character ! */

/* Interrupt handler

 *

 * This interrupt handler is called after a BD is processed.

 Clear the interrupts */

/* Initialize buffer descriptors

 *

 * This function initializes all of the RX and TX buffer descriptors.

	/* Set the physical address of the host memory buffers in the buffer

	 * descriptors, and the virtual address for us to work with.

 */

	/* Set the physical address of the host memory

	 * buffers in the buffer descriptors, and the

	 * virtual address for us to work with.

 Loopback requires the preamble bit to be set on the first TX BD */

/*

 * Initialize a UCC for UART.

 *

 * This function configures a given UCC to be used as a UART device. Basic

 * UCC initialization is handled in qe_uart_request_port().  This function

 * does all the UART-specific stuff.

 First, disable TX and RX in the UCC */

 Program the UCC UART parameter RAM */

 Configure the GUMR registers for UART */

 Soft-UART requires a 1X multiplier for TX */

 Disable rx interrupts  and clear all pending events.  */

 Initialize UPSMR */

 Soft-UART requires TX to be 1X */

		/* Set UART mode.

		 * Enable receive and transmit.

		/* From the microcode errata:

		 * 1.GUMR_L register, set mode=0010 (QMC).

		 * 2.Set GUMR_H[17] bit. (UART/AHDLC mode).

		 * 3.Set GUMR_H[19:20] (Transparent mode)

		 * 4.Clear GUMR_H[26] (RFW)

		 * ...

		 * 6.Receiver must use 16x over sampling

/*

 * Initialize the port.

	/*

	 * If we're using Soft-UART mode, then we need to make sure the

	 * firmware has been uploaded first.

 Install interrupt handler. */

 Startup rx-int */

/*

 * Shutdown the port.

 Disable RX and TX */

 Wait for all the BDs marked sent */

 Wait a bit longer */

 Stop uarts */

 Shut them really down and reinit buffer descriptors */

/*

 * Set the serial port parameters.

 1 + CL + PEN + 1 + SL */

	/* Character length programmed into the mode register is the

	 * sum of: 1 start bit, number of data bits, 0 or 1 parity bit,

	 * 1 or 2 stop bits, minus 1.

	 * The value 'bits' counts this for us.

 byte size */

 case CS8 */

 If CSTOPB is set, we want two stop bits */

 + SL */

 + PEN */

	/*

	 * Set up parity check flag

	/*

	 * Characters to ignore

		/*

		 * If we're ignore parity and break indicators, ignore

		 * overruns too.  (For real raw support).

	/*

	 * !!! ignore all characters if CREAD is not set

 Do we really need a spinlock here? */

 Update the per-port timeout. */

 Soft-UART requires a 1X multiplier for TX */

/*

 * Return a pointer to a string that describes what kind of port this is.

/*

 * Allocate any memory and I/O resources required by the port.

	/*

	 * Allocate the transmit and receive data buffers.

/*

 * Configure the port.

 *

 * We say we're a CPM-type port because that's mostly true.  Once the device

 * is configured, this driver operates almost identically to the CPM serial

 * driver.

/*

 * Release any memory and I/O resources that were allocated in

 * qe_uart_request_port().

/*

 * Verify that the data in serial_struct is suitable for this device.

/* UART operations

 *

 * Details on these functions can be found in Documentation/driver-api/serial/driver.rst

/*

 * Obtain the SOC model number and revision level

 *

 * This function parses the device tree to obtain the SOC model.  It then

 * reads the SVR register to the revision.

 *

 * The device tree stores the SOC model two different ways.

 *

 * The new way is:

 *

 *      	cpu@0 {

 *      		compatible = "PowerPC,8323";

 *      		device_type = "cpu";

 *      		...

 *

 *

 * The old way is:

 *      	 PowerPC,8323@0 {

 *      		device_type = "cpu";

 *      		...

 *

 * This code first checks the new way, and then the old way.

 Find the CPU node */

 Find the compatible property */

 No compatible property, so try the name. */

 Extract the SOC number from the "PowerPC," string */

 Get the revision from the SVR */

/*

 * requst_firmware_nowait() callback function

 *

 * This function is called by the kernel when a firmware is made available,

 * or if it times out waiting for the firmware.

 Check if the firmware has been uploaded. */

		/*

		 * We call request_firmware_nowait instead of

		 * request_firmware so that the driver can load and

		 * initialize the ports without holding up the rest of

		 * the kernel.  If hotplug support is enabled in the

		 * kernel, then we use it.

 !CONFIG_PPC32 */

 String OF properties */

	/*

	 * Determine if we need Soft-UART mode

 Search for IRQ and mapbase */

 Get the UCC number (device ID) */

 UCCs are numbered 1-7 */

	/*

	 * In the future, we should not require the BRG to be specified in the

	 * device tree.  If no clock-source is specified, then just pick a BRG

	 * to use.  This requires a new QE library function that manages BRG

	 * assignments.

 In internal loopback mode, TX and RX must use the same clock */

 Get the port number, numbered 0-3 */

	/*

	 * Newer device trees have an "fsl,qe" compatible property for the QE

	 * node, but we still need to support older device trees.

		/*

		 * Older versions of U-Boot do not initialize the brg-frequency

		 * property, so in this case we assume the BRG frequency is

		 * half the QE bus frequency.

 Make sure ucc_slow_init() initializes both TX and RX */

	/* Add the port to the uart sub-system.  This will cause

	 * qe_uart_config_port() to be called, so the us_info structure must

	 * be initialized.

 Display the mknod command for this device */

 SPDX-License-Identifier: GPL-2.0

/*

 * MPS2 UART driver

 *

 * Copyright (C) 2015 ARM Limited

 *

 * Author: Vladimir Murzin <vladimir.murzin@arm.com>

 *

 * TODO: support for SysRq

/*

 * Helpers to make typical enable/disable operations more readable.

	/*

	 * We've just unmasked the TX IRQ and now slow-starting via

	 * polling; if there is enough data to fill up the internal

	 * write buffer in one go, the TX IRQ should assert, at which

	 * point we switch to fully interrupt-driven TX.

	/*

	 * It's never been seen in practice and it never *should* happen since

	 * we check if there is enough room in TX buffer before sending data.

	 * So we keep this check in case something suspicious has happened.

 Only combined irq is presesnt */

 SPDX-License-Identifier: GPL-2.0

/*

 * zs.c: Serial port driver for IOASIC DECstations.

 *

 * Derived from drivers/sbus/char/sunserial.c by Paul Mackerras.

 * Derived from drivers/macintosh/macserial.c by Harald Koerfgen.

 *

 * DECstation changes

 * Copyright (C) 1998-2000 Harald Koerfgen

 * Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2007  Maciej W. Rozycki

 *

 * For the rest of the code the original Copyright applies:

 * Copyright (C) 1996 Paul Mackerras (Paul.Mackerras@cs.anu.edu.au)

 * Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

 *

 *

 * Note: for IOASIC systems the wiring is as follows:

 *

 * mouse/keyboard:

 * DIN-7 MJ-4  signal        SCC

 * 2     1     TxD       <-  A.TxD

 * 3     4     RxD       ->  A.RxD

 *

 * EIA-232/EIA-423:

 * DB-25 MMJ-6 signal        SCC

 * 2     2     TxD       <-  B.TxD

 * 3     5     RxD       ->  B.RxD

 * 4           RTS       <- ~A.RTS

 * 5           CTS       -> ~B.CTS

 * 6     6     DSR       -> ~A.SYNC

 * 8           CD        -> ~B.DCD

 * 12          DSRS(DCE) -> ~A.CTS  (*)

 * 15          TxC       ->  B.TxC

 * 17          RxC       ->  B.RxC

 * 20    1     DTR       <- ~A.DTR

 * 22          RI        -> ~A.DCD

 * 23          DSRS(DTE) <- ~B.RTS

 *

 * (*) EIA-232 defines the signal at this pin to be SCD, while DSRS(DCE)

 *     is shared with DSRS(DTE) at pin 23.

 *

 * As you can immediately notice the wiring of the RTS, DTR and DSR signals

 * is a bit odd.  This makes the handling of port B unnecessarily

 * complicated and prevents the use of some automatic modes of operation.

/*

 * It would be nice to dynamically allocate everything that

 * depends on ZS_NUM_SCCS, so we could support any number of

 * Z85C30s, but for now...

 Max # of ZS chips supported.  */

 2 channels per chip.  */

 Index of the channel A.  */

 Index of the channel B.  */

 IOMEM space size.  */

 Register alignment.  */

#define ZS_CHAN_IO_OFFSET 1		/* The SCC resides on the high byte

 Z85C30 PCLK input clock rate.  */

 write 0 */

 write 1 */

 write 2 */

 write 3 */

 write 4 */

 write 5 */

 write 6, 7, 8 */

 write 9 */

 write 10 */

 write 11 */

 BRG time constant, write 12 + 13 */

 write 14 */

 write 15 */

/*

 * Debugging.

/*

 * Reading and writing Z85C30 registers.

 Let the current transmission finish.  */

 Load 'em up.  */

/*

 * Status handling routines.

/*

 * zs_tx_empty() -- get the transmitter empty status

 *

 * Purpose: Let user call ioctl() to get info when the UART physically

 * 	    is emptied.  On bus types like RS485, the transmitter must

 * 	    release the bus after transmitting.  This must be done when

 * 	    the transmit shift register is empty, not be done when the

 * 	    transmit holding register is empty.  This functionality

 * 	    allows an RS485 driver to be written in user space.

 Rarely modified, so don't poke at hardware unless necessary. */

 A-side DCD tracks RI and SYNC tracks DSR.  */

 This-side DCD tracks DCD and CTS tracks CTS.  */

 DCD tracks RI and SYNC tracks DSR for the B side.  */

 Clear Ext interrupts if not being handled already.  */

 A-side DCD tracks RI and SYNC tracks DSR.  */

 This-side DCD tracks DCD and CTS tracks CTS.  */

/*

 * Interrupt handling routines.

 BREAK event software flag.  */

 SysRq event software flag.  */

 Handle the null char got when BREAK is removed.  */

 Reset the error indication.  */

 SysRq discards the null char.  */

 XON/XOFF chars.  */

 If nothing to do or stopped or hardware stopped.  */

 Send char.  */

 Are we are done?  */

 Get status from Read Register 0.  */

 Clear the status condition...  */

/*

 * This is the Z85C30 driver's generic interrupt routine.

	/*

	 * NOTE: The read register 3, which holds the irq status,

	 *       does so for both channels on each chip.  Although

	 *       the status value itself must be read from the A

	 *       channel and is only valid when read from channel A.

	 *       Yes... broken hardware...

		/*

		 * We do not like losing characters, so we prioritise

		 * interrupt sources a little bit differently than

		 * the SCC would, was it allowed to.

/*

 * Finally, routines used to initialize the serial port.

 Clear the receive FIFO.  */

 Clear the interrupt registers.  */

 But Ext only if not being handled already.  */

 Finally, enable sequencing and interrupts.  */

 Record the current state of RR0.  */

 Reset the pointer first, just in case...  */

 And let the current transmission finish.  */

 Byte size.  */

 Parity and stop bits.  */

 Load up the new values.  */

/*

 * Hack alert!

 * Required solely so that the initial PROM-based console

 * works undisturbed in parallel with this one.

/*

 * Initialize Z85C30 port structures.

/*

 * Print a string to the serial port trying not to disturb

 * any possible real use of the port...

 Disable transmit interrupts and enable the transmitter. */

 Restore transmit interrupts and the transmitter enable. */

 Resume any transmission as the TxIP bit won't be set.  */

/*

 * Setup serial console baud/bits/parity.  We do two things here:

 * - construct a cflag setting for the first uart_open()

 * - initialise the serial port

 * Return non-zero if we didn't find a serial port.

/*

 *	Register console.

 CONFIG_SERIAL_ZS_CONSOLE */

 zs_init inits the driver. */

 Find out how many Z85C30 SCCs we have.  */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Driver for CLPS711x serial ports

 *

 *  Based on drivers/char/serial.c, by Linus Torvalds, Theodore Ts'o.

 *

 *  Copyright 1999 ARM Limited

 *  Copyright (C) 2000 Deep Blue Solutions Ltd.

 Disable break */

 Enable the port */

 Disable the port */

 Mask termios capabilities we don't support */

 Ask the core to calculate the divisor for us */

 Enable FIFO */

 Set read status mask */

 Set status ignore mask */

 Wait for FIFO is not full */

 Wait for transmitter to become empty */

 Disable port */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright 2020 NXP

 Transmitter Register */

 TxFIFO full */

 UART Test Register on all other i.mx*/

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for OMAP-UART controller.

 * Based on drivers/serial/8250.c

 *

 * Copyright (C) 2010 Texas Instruments.

 *

 * Authors:

 *	Govindraj R	<govindraj.raja@ti.com>

 *	Thara Gopinath	<thara@ti.com>

 *

 * Note: This driver is made separate from 8250 driver as we cannot

 * over load 8250 driver with omap platform specific configuration for

 * features like DMA, it makes easier to implement features like DMA and

 * hardware flow control and software flow control configuration with

 * this driver as required for the omap-platform.

 Feature flags */

 48Mhz */

 SCR register bitmasks */

 FCR register bitmasks */

 MVR register bitmasks */

/* WER = 0x7F

 * Enable module level wakeup in WER reg

 Enable XON/XOFF flow control on output */

 Enable XON/XOFF flow control on input */

	/*

	 * Buffer for rx dma. It is not required for tx because the buffer

	 * comes from port structure.

 timer to poll activity on rx dma */

	/*

	 * Some bits in registers are cleared on a read, so they must

	 * be saved whenever the register is read, but the bits will not

	 * be immediately processed.

 Forward declaration of functions */

 REVISIT: Remove this when omap3 boots in device tree only mode */

 CONFIG_PM */

/*

 * Calculate the absolute difference between the desired and actual baud

 * rate for the given mode.

/*

 * serial_omap_baud_is_mode16 - check if baud rate is MODE16X

 * @port: uart port info

 * @baud: baudrate for which mode needs to be determined

 *

 * Returns true if baud rate is MODE16X and false if MODE13X

 * Original table in OMAP TRM named "UART Mode Baud Rates, Divisor Values,

 * and Error Rates" determines modes not for all common baud rates.

 * E.g. for 1000000 baud rate mode must be 16x, but according to that

 * table it's determined as 13x.

/*

 * serial_omap_get_divisor - calculate divisor value

 * @port: uart port info

 * @baud: baudrate for which divisor needs to be calculated.

 Handle RS-485 */

			/* THR interrupt is fired when both TX FIFO and TX

			 * shift register are empty. This means there's nothing

			 * left to transmit now, so make sure the THR interrupt

			 * is fired when TX FIFO is below the trigger level,

			 * disable THR interrupts and toggle the RS-485 GPIO

			 * data direction pin if needed.

			/* We're asked to stop, but there's still stuff in the

			 * UART FIFO, so make sure the THR interrupt is fired

			 * when both TX FIFO and TX shift register are empty.

			 * The next THR interrupt (if no transmission is started

			 * in the meantime) will indicate the end of a

			 * transmission. Therefore we _don't_ disable THR

			 * interrupts in this situation.

 Handle RS-485 */

 Fire THR interrupts when FIFO is below trigger level */

 if rts not already enabled */

	/*

	 * Read one data character out to avoid stalling the receiver according

	 * to the table 23-246 of the omap4 TRM.

		/*

		 * We do the SysRQ and SAK checking

		 * here because otherwise the break

		 * may get masked by ignore_status_mask

		 * or read_status_mask.

 Recover the break flag from console xmit */

/**

 * serial_omap_irq() - This handles the interrupt from one port

 * @irq: uart port irq number

 * @dev_id: uart port info

 extract IRQ type from IIR register */

 simply try again */

 Turn off autoRTS if RTS is lowered; restore autoRTS if RTS raised */

	/*

	 * Allocate the IRQ

 Optional wake-up IRQ */

	/*

	 * Clear the FIFO buffers and disable them.

	 * (they will be reenabled in set_termios())

	/*

	 * Clear the interrupt registers.

	/*

	 * Now, initialize the UART

	/*

	 * Most PC uarts need OUT2 raised to enable interrupts.

	/*

	 * Finally, enable interrupts. Note: Modem status interrupts

	 * are set via set_termios(), which will be occurring imminently

	 * anyway, so we don't enable them here.

 Enable module level wake up */

	/*

	 * Disable interrupts from this port

	/*

	 * Disable break condition and FIFOs

	/*

	 * Read data port to reset things, and then free the irq

	/*

	 * Ask the core to calculate the divisor for us.

 calculate wakeup latency constraint */

	/*

	 * Ok, we're now changing the port state. Do it with

	 * interrupts disabled.

	/*

	 * Update the per-port timeout.

	/*

	 * Characters to ignore

		/*

		 * If we're ignoring parity and break indicators,

		 * ignore overruns too (for real raw support).

	/*

	 * ignore all characters if CREAD is not set

	/*

	 * Modem status interrupts

 reset DLAB */

 FIFOs and DMA Settings */

	/* FCR can be changed only when the

	 * baud clock is not running

	 * DLL_REG and DLH_REG set to 0.

 FIFO ENABLE, DMA MODE */

	/*

	 * NOTE: Setting OMAP_UART_SCR_RX_TRIG_GRANU1_MASK

	 * sets Enables the granularity of 1 for TRIGGER RX

	 * level. Along with setting RX FIFO trigger level

	 * to 1 (as noted below, 16 characters) and TLR[3:0]

	 * to zero this will result RX FIFO threshold level

	 * to 1 character, instead of 16 as noted in comment

	 * below.

	/* Set receive FIFO threshold to 16 characters and

	 * transmit FIFO threshold to 32 spaces

 Reset UART_MCR_TCRTLR: this must be done with the EFR_ECB bit set */

 Protocol, Baud Rate, and Interrupt Settings */

 LS of divisor */

 MS of divisor */

 Configure flow control */

 XON1/XOFF1 accessible mode B, TCRTLR=0, ECB=0 */

 Enable access to TCR/TLR */

 Enable AUTOCTS (autoRTS is enabled when RTS is raised) */

 Disable AUTORTS and AUTOCTS */

 clear SW control mode bits */

		/*

		 * IXON Flag:

		 * Enable XON/XOFF flow control on input.

		 * Receiver compares XON1, XOFF1.

		/*

		 * IXOFF Flag:

		 * Enable XON/XOFF flow control on output.

		 * Transmit XON1, XOFF1

		/*

		 * IXANY Flag:

		 * Enable any character to restart output.

		 * Operation resumes after receiving any

		 * character after recognition of the XOFF character

 we don't want the core code to modify any port params */

 Wait up to 10ms for the character(s) to be sent. */

 Wait up to 1s for flow control if necessary */

 CONFIG_CONSOLE_POLL */

 CONFIG_SERIAL_EARLYCON */

	/*

	 * First save the IER then disable the interrupts

	/*

	 * Finally, wait for transmitter to become empty

	 * and restore the IER

	/*

	 * The receive handling will happen properly because the

	 * receive ready bit will still be set; it is not cleared

	 * on read.  However, modem control will not, we must

	 * call it if we have saved something in the saved flags

	 * while processing with interrupts off.

 Enable or disable the rs485 support */

 Disable interrupts from this port */

 Clamp the delays to [0, 100ms] */

 store new config */

 enable / disable rts */

 Enable interrupts */

	/* If RS-485 is disabled, make sure the THR interrupt is fired when

	 * TX FIFO is below the trigger level.

 CONFIG_PM_SLEEP */

 Check revision register scheme */

 Legacy Scheme: OMAP2/3 */

 MINOR_REV[0:4], MAJOR_REV[4:7] */

 New Scheme: OMAP4+ */

 MINOR_REV[0:5], MAJOR_REV[8:10] */

 highest possible revision */

 normalize revision for the driver */

 out of memory */

 check for tx enable gpio */

		/*

		 * FIXME: the code historically ignored any other error than

		 * -EPROBE_DEFER and just went on without GPIO.

 The optional wakeirq may be specified in the board dts file */

/*

 * Work Around for Errata i202 (2430, 3430, 3630, 4430 and 4460)

 * The access to uart register after MDR1 Access

 * causes UART to corrupt data.

 *

 * Need a delay =

 * 5 L4 clock cycles + 5 UART functional clock cycle (@48MHz = ~0.2uS)

 * give 10 times as much

	/*

	 * Wait for FIFO to empty: when empty, RX_FIFO_E bit is 0 and

	 * TX_FIFO_E bit is 1.

 Should *never* happen. we warn and carry on */

 Config B mode */

 Operational mode */

 Config B mode */

 Operational mode */

 Config B mode */

	/*

	* When using 'no_console_suspend', the console UART must not be

	* suspended. Since driver suspend is managed by runtime suspend,

	* preventing runtime suspend (by returning error) will keep device

	* active during suspend.

 SPDX-License-Identifier: GPL-2.0

/*

 * ARC On-Chip(fpga) UART Driver

 *

 * Copyright (C) 2010-2012 Synopsys, Inc. (www.synopsys.com)

 *

 * vineetg: July 10th 2012

 *  -Decoupled the driver from arch/arc

 *    +Using platform_get_resource() for irq/membase (thx to bfin_uart.c)

 *    +Using early_platform_xxx() for early console (thx to mach-shmobile/xxx)

 *

 * Vineetg: Aug 21st 2010

 *  -Is uart_tx_stopped() not done in tty write path as it has already been

 *   taken care of, in serial core

 *

 * Vineetg: Aug 18th 2010

 *  -New Serial Core based ARC UART driver

 *  -Derived largely from blackfin driver albiet with some major tweaks

 *

 * TODO:

 *  -check if sysreq works

/*************************************

 * ARC UART Hardware Specs

/*

 * UART Register set (this is not a Standards Compliant IP)

 * Also each reg is Word aligned, but only 8 bits wide

 Bits for UART Status Reg (R/W) */

 Receive Interrupt Enable */

 Transmit Interrupt Enable */

 Receive FIFO Empty: No char receivede */

 Transmit FIFO Empty, thus char can be written into */

 Receive FIFO full */

 Receive FIFO has space for 1 char (tot space=4) */

 Frame Error: Stop Bit not detected */

 OverFlow Err: Char recv but RXFULL still set */

 Uart bit fiddling helpers: lowest level */

 Uart bit fiddling helpers: API level */

/*

 * Return TIOCSER_TEMT when transmitter is not busy.

/*

 * Driver internal routine, used by both tty(serial core) as well as tx-isr

 *  -Called under spinlock in either cases

 *  -also tty->flow.stopped has already been checked

 *     = by uart_start( ) before calling us

 *     = tx_ist checks that too before calling

	/*

	 * If num chars in xmit buffer are too few, ask tty layer for more.

	 * By Hard ISR to schedule processing in software interrupt part

/*

 * port is locked and interrupts are disabled

 * uart_start( ) calls us under the port spinlock irqsave

	/*

	 * UART has 4 deep RX-FIFO. Driver's recongnition of this fact

	 * is very subtle. Here's how ...

	 * Upon getting a RX-Intr, such that RX-EMPTY=0, meaning data available,

	 * driver reads the DATA Reg and keeps doing that in a loop, until

	 * RX-EMPTY=1. Multiple chars being avail, with a single Interrupt,

	 * before RX-EMPTY=0, implies some sort of buffering going on in the

	 * controller, which is indeed the Rx-FIFO.

		/*

		 * This could be an Rx Intr for err (no data),

		 * so check err and clear that Intr first

/*

 * A note on the Interrupt handling state machine of this driver

 *

 * kernel printk writes funnel thru the console driver framework and in order

 * to keep things simple as well as efficient, it writes to UART in polled

 * mode, in one shot, and exits.

 *

 * OTOH, Userland output (via tty layer), uses interrupt based writes as there

 * can be undeterministic delay between char writes.

 *

 * Thus Rx-interrupts are always enabled, while tx-interrupts are by default

 * disabled.

 *

 * When tty has some data to send out, serial core calls driver's start_tx

 * which

 *   -checks-if-tty-buffer-has-char-to-send

 *   -writes-data-to-uart

 *   -enable-tx-intr

 *

 * Once data bits are pushed out, controller raises the Tx-room-avail-Interrupt.

 * The first thing Tx ISR does is disable further Tx interrupts (as this could

 * be the last char to send, before settling down into the quiet polled mode).

 * It then calls the exact routine used by tty layer write to send out any

 * more char in tty buffer. In case of sending, it re-enables Tx-intr. In case

 * of no data, it remains disabled.

 * This is how the transmit state machine is dynamically switched on/off

	/*

	 * Single IRQ for both Rx (data available) Tx (room available) Interrupt

	 * notifications from the UART Controller.

	 * To demultiplex between the two, we check the relevant bits

 already in ISR, no need of xx_irqsave */

		/* Unconditionally disable further Tx-Interrupts.

		 * will be enabled by tx_chars() if needed.

	/*

	 * Pretend we have a Modem status reg and following bits are

	 *  always set, to satify the serial core state machine

	 *  (DSR) Data Set Ready

	 *  (CTS) Clear To Send

	 *  (CAR) Carrier Detect

 MCR not present */

 ARC UART doesn't support sending Break signal */

 Before we hook up the ISR, Disable all UART Interrupts */

 Only Rx IRQ enabled to begin with */

 This is not really needed */

	/*

	 * Use the generic handler so that any specially encoded baud rates

	 * such as SPD_xx flags or "%B0" can be handled

	 * Max Baud I suppose will not be more than current 115K * 4

	 * Formula for ARC UART is: hw-val = ((CLK/(BAUD*4)) -1)

	 * spread over two 8-bit registers

	/*

	 * UART doesn't support Parity/Hardware Flow Control;

	 * Only supports 8N1 character size

 Don't rewrite B0 */

/*

 * Verify the new serial_struct (for TIOCSSERIAL).

/*

 * Configure/autoconfigure the port.

	/*

	 * The uart port backing the console (e.g. ttyARC1) might not have been

	 * init yet. If so, defer the console setup to after the port.

	/*

	 * Serial core will call port->ops->set_termios( )

	 * which will set the baud reg

/*

 * Interrupts are disabled on entering

 CONFIG_SERIAL_ARC_CONSOLE */

 no device tree device */

 No point of dev_err since UART itself is hosed here */

	/*

	 * uart_insert_char( ) uses it in decideding whether to ignore a

	 * char or not. Explicitly setting it here, removes the subtelty

 This will never be called */

 Sentinel */ }

 SPDX-License-Identifier: GPL-2.0+

/*

 *	Support for the asynchronous serial interface (DUART) included

 *	in the BCM1250 and derived System-On-a-Chip (SOC) devices.

 *

 *	Copyright (c) 2007  Maciej W. Rozycki

 *

 *	Derived from drivers/char/sb1250_duart.c for which the following

 *	copyright applies:

 *

 *	Copyright (c) 2000, 2001, 2002, 2003, 2004  Broadcom Corporation

 *

 *	References:

 *

 *	"BCM1250/BCM1125/BCM1125H User Manual", Broadcom Corporation

/*

 * Per-port state.

/*

 * Per-DUART state for the shared register space.

/*

 * Reading and writing SB1250 DUART registers.

 *

 * There are three register spaces: two per-channel ones and

 * a shared one.  We have to define accessors appropriately.

 * All registers are 64-bit and all but the Baud Rate Clock

 * registers only define 8 least significant bits.  There is

 * also a workaround to take into account.  Raw accessors use

 * the full register width, but cooked ones truncate it

 * intentionally so that the rest of the driver does not care.

/*

 * In bug 1956, we get glitches that can mess up uart registers.  This

 * "read-mode-reg after any register access" is an accepted workaround.

 Enable tx interrupts.  */

 Go!, go!, go!...  */

 XON/XOFF chars.  */

 If nothing to do or stopped or hardware stopped.  */

 Send char.  */

 Are we are done?  */

 Disable tx interrupts.  */

 Clear the receive FIFO.  */

 Clear the interrupt registers.  */

 Set rx/tx interrupt to FIFO available.  */

 Disable tx, enable rx.  */

 Enable interrupts.  */

 There is no DUART reset feature, so just set some sane defaults.  */

 Byte size.  */

 Unsupported, leave unchanged.  */

 Parity and stop bits.  */

 The actual lower bound is 1221bps, so compensate.  */

 Initialize SB1250 DUART port structures.  */

 Set the number of available units based on the SOC type.  */

 Assume at least two serial ports at the normal address.  */

/*

 * Serial console stuff.  Very basic, polling driver for doing serial

 * console output.  The console_lock is held by the caller, so we

 * shouldn't be interrupted for more console activity.

 Disable transmit interrupts and enable the transmitter. */

 Restore transmit interrupts and the transmitter enable. */

 CONFIG_SERIAL_SB1250_DUART_CONSOLE */

 Set up the driver and register it.  */

 Unload the driver.  Unregister stuff, get ready to go away.  */

 SPDX-License-Identifier: GPL-2.0+

/*

 * altera_uart.c -- Altera UART driver

 *

 * Based on mcf.c -- Freescale ColdFire UART driver

 *

 * (C) Copyright 2003-2007, Greg Ungerer <gerg@snapgear.com>

 * (C) Copyright 2008, Thomas Chou <thomas@wytron.com.tw>

 * (C) Copyright 2010, Tobias Klauser <tklauser@distanz.ch>

/*

 * Altera UART register definitions according to the Nios UART datasheet:

 * http://www.altera.com/literature/ds/ds_nios_uart.pdf

 parity error */

 framing error */

 break */

 RX overrun error */

 TX overrun error */

 TX shift register state */

 TX ready */

 RX ready */

 exception condition */

 CTS logic-level change */

 CTS logic state */

 EOP written/read */

 Enable interrupt on... */

 ...parity error */

 ...framing error */

 ...break */

 ...RX overrun */

 ...TX overrun */

 ...TX shift register empty */

 ...TX ready */

 ...RX ready */

 ...exception*/

 TX break */

 Interrupt on CTS change */

 RTS signal */

 Interrupt on EOP */

/*

 * Local per-uart structure.

 Local copy of line sigs */

 Local IMR mirror */

	/*

	 * If the device doesn't have an irq, ensure that the irq bits are

	 * masked out to keep the irq line inactive.

	/*

	 * FIXME: port->read_status_mask and port->ignore_status_mask

	 * need to be initialized based on termios settings for

	 * INPCK, IGNBRK, IGNPAR, PARMRK, BRKINT

 Send special char - probably flow control */

 Clear mask, so no surprise interrupts. */

 Clear status register */

 Enable RX interrupts now */

 Disable all interrupts now */

 UARTs always present */

 Nothing to release... */

/*

 *	Define the basic serial functions we support.

 Enable RX interrupts now */

 CONFIG_SERIAL_ALTERA_UART_CONSOLE */

/*

 *	Define the altera_uart UART driver structure.

 if id is -1 scan for a free id and use that one */

 Check platform data first so we can override device node data */

 CONFIG_OF */

 SPDX-License-Identifier: GPL-2.0+

/*

** mux.c:

**	serial driver for the Mux console found in some PA-RISC servers.

**

**	(c) Copyright 2002 Ryan Bradetich

**	(c) Copyright 2002 Hewlett-Packard Company

**

** This Driver currently only supports the console (port 0) on the MUX.

** Additional work will be needed on this driver to enable the full

** functionality of the MUX.

**

 for udelay */

/**

 * get_mux_port_count - Get the number of available ports on the Mux.

 * @dev: The parisc device.

 *

 * This function is used to determine the number of ports the Mux

 * supports.  The IODC data reports the number of ports the Mux

 * can support, but there are cases where not all the Mux ports

 * are connected.  This function can override the IODC and

 * return the true port count.

	/* If this is the built-in Mux for the K-Class (Eole CAP/MUX),

	 * we only need to allocate resources for 1 port since the

	 * other 7 ports are not connected.

 Return the number of ports specified in the iodc data. */

/**

 * mux_tx_empty - Check if the transmitter fifo is empty.

 * @port: Ptr to the uart_port.

 *

 * This function test if the transmitter fifo for the port

 * described by 'port' is empty.  If it is empty, this function

 * should return TIOCSER_TEMT, otherwise return 0.

/**

 * mux_set_mctrl - Set the current state of the modem control inputs.

 * @ports: Ptr to the uart_port.

 * @mctrl: Modem control bits.

 *

 * The Serial MUX does not support CTS, DCD or DSR so this function

 * is ignored.

/**

 * mux_get_mctrl - Returns the current state of modem control inputs.

 * @port: Ptr to the uart_port.

 *

 * The Serial MUX does not support CTS, DCD or DSR so these lines are

 * treated as permanently active.

/**

 * mux_stop_tx - Stop transmitting characters.

 * @port: Ptr to the uart_port.

 *

 * The Serial MUX does not support this function.

/**

 * mux_start_tx - Start transmitting characters.

 * @port: Ptr to the uart_port.

 *

 * The Serial Mux does not support this function.

/**

 * mux_stop_rx - Stop receiving characters.

 * @port: Ptr to the uart_port.

 *

 * The Serial Mux does not support this function.

/**

 * mux_break_ctl - Control the transmitssion of a break signal.

 * @port: Ptr to the uart_port.

 * @break_state: Raise/Lower the break signal.

 *

 * The Serial Mux does not support this function.

/**

 * mux_write - Write chars to the mux fifo.

 * @port: Ptr to the uart_port.

 *

 * This function writes all the data from the uart buffer to

 * the mux fifo.

/**

 * mux_read - Read chars from the mux fifo.

 * @port: Ptr to the uart_port.

 *

 * This reads all available data from the mux's fifo and pushes

 * the data to the tty layer.

/**

 * mux_startup - Initialize the port.

 * @port: Ptr to the uart_port.

 *

 * Grab any resources needed for this port and start the

 * mux timer.

/**

 * mux_shutdown - Disable the port.

 * @port: Ptr to the uart_port.

 *

 * Release any resources needed for the port.

/**

 * mux_set_termios - Chane port parameters.

 * @port: Ptr to the uart_port.

 * @termios: new termios settings.

 * @old: old termios settings.

 *

 * The Serial Mux does not support this function.

/**

 * mux_type - Describe the port.

 * @port: Ptr to the uart_port.

 *

 * Return a pointer to a string constant describing the

 * specified port.

/**

 * mux_release_port - Release memory and IO regions.

 * @port: Ptr to the uart_port.

 * 

 * Release any memory and IO region resources currently in use by

 * the port.

/**

 * mux_request_port - Request memory and IO regions.

 * @port: Ptr to the uart_port.

 *

 * Request any memory and IO region resources required by the port.

 * If any fail, no resources should be registered when this function

 * returns, and it should return -EBUSY on failure.

/**

 * mux_config_port - Perform port autoconfiguration.

 * @port: Ptr to the uart_port.

 * @type: Bitmask of required configurations.

 *

 * Perform any autoconfiguration steps for the port.  This function is

 * called if the UPF_BOOT_AUTOCONF flag is specified for the port.

 * [Note: This is required for now because of a bug in the Serial core.

 *  rmk has already submitted a patch to linus, should be available for

 *  2.5.47.]

/**

 * mux_verify_port - Verify the port information.

 * @port: Ptr to the uart_port.

 * @ser: Ptr to the serial information.

 *

 * Verify the new serial port information contained within serinfo is

 * suitable for this port type.

/**

 * mux_drv_poll - Mux poll function.

 * @unused: Unused variable

 *

 * This function periodically polls the Serial MUX to check for new data.

 Wait until the FIFO drains. */

/**

 * mux_probe - Determine if the Serial Mux should claim this device.

 * @dev: The parisc device.

 *

 * Deterimine if the Serial Mux should claim this chip (return 0)

 * or not (return 1).

		/* The port->timeout needs to match what is present in

		 * uart_wait_until_sent in serial_core.c.  Otherwise

		 * the time spent in msleep_interruptable will be very

		 * long, causing the appearance of a console hang.

 Find Port 0 for this card in the mux_ports list. */

 Release the resources associated with each port on the device. */

/* Hack.  This idea was taken from the 8250_gsc.c on how to properly order

 * the serial port detection in the proper order.   The idea is we always

 * want the builtin mux to be detected before addin mux cards, so we

 * specifically probe for the builtin mux cards first.

 *

 * This table only contains the parisc_device_id of known builtin mux

 * devices.  All other mux cards will be detected by the generic mux_tbl.

 All K-class */

 E35, E45, and E55 */

/**

 * mux_init - Serial MUX initialization procedure.

 *

 * Register the Serial MUX driver.

 Start the Mux timer */

/**

 * mux_exit - Serial MUX cleanup procedure.

 *

 * Unregister the Serial MUX driver from the tty layer.

 Delete the Mux timer. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for msm7k serial device and console

 *

 * Copyright (C) 2007 Google, Inc.

 * Author: Robert Love <rlove@google.com>

 * Copyright (c) 2011, Code Aurora Forum. All rights reserved.

 UARTDM_1P4 */

 < UARTDM_1P4 */

 UARTDM_1P4 */

 < UARTDM_1P4 */

 in bytes */

 valid for > 1p3 */

 in bytes, valid for <= 1p3 */

/*

 * Setup the MND registers to use the TCXO clock.

/*

 * Setup the MND registers to use the TCXO clock divided by 4.

	/*

	 * These registers don't exist so we change the clk input rate

	 * on uartdm hardware instead

	/*

	 * DMA Stall happens if enqueue and flush command happens concurrently.

	 * For example before changing the baud rate/protocol configuration and

	 * sending flush command to ADM, disable the channel of UARTDM.

	 * Note: should not reset the receiver here immediately as it is not

	 * suggested to do disable/reset or reset/disable at the same time.

 allocate DMA resources, if available */

 allocate DMA resources, if available */

 Already started in DMA mode */

 Already stopped */

 Restore "Tx FIFO below watermark" interrupt */

	/*

	 * Using DMA complete for Tx FIFO reload, no need for

	 * "Tx FIFO below watermark" one, disable it

 Already stopped */

	/*

	 * Using DMA for FIFO off-load, no need for "Rx FIFO over

	 * watermark" or "stale" interrupts, disable them

	/*

	 * Well, when DMA is ADM3 engine(implied by <= UARTDM v1.3),

	 * we need RXSTALE to flush input DMA fifo to memory

	/*

	 * Switch from DMA to SW/FIFO mode. After clearing Rx BAM (UARTDM_DMEN),

	 * receiver must be reset.

 Re-enable RX interrupts */

 TODO: Precise error reporting */

 Try to use DMA */

	/*

	 * Handle overrun. My understanding of the hardware is that overrun

	 * is not tied to the RX buffer, so we handle the case out of band.

 and now the main RX loop */

 Mask conditions we're ignorning. */

 disable tx interrupts if nothing more to send */

 Always DMA */

 fall back to PIO mode */

 disable interrupt */

			/*

			 * Flush DMA input fifo to memory, this will also

			 * trigger DMA RX completion

 restore interrupt */

 reset everything */

 Disable DM modes */

 Default to smallest divider */

 Keep track of best entry */

			/*

			 * The rate didn't get any faster so we can't do

			 * better at dividing it down

 Start the divisor search over at this new rate */

 RX stale watermark */

 set RX watermark */

 set TX watermark */

 Enable RX and TX */

 turn on RX and CTS interrupts */

 set automatic RFR level */

 disable interrupts */

 Terminate if any */

 calculate and set baud rate */

 calculate parity */

 calculate bits per char */

 calculate stop bits */

 set parity, bits per char, and stop bit */

 calculate and set hardware flow control */

 Configure status bits to ignore based on termio flags. */

 Try to use DMA */

 Check if a previous read had more than one char */

 Or if FIFO is empty */

		/*

		 * If RX packing buffer has less than a word, force stale to

		 * push contents into RX FIFO

 FIFO has a word */

 Disable all interrupts */

 Enable interrupts */

 Disable all interrupts */

 Wait until FIFO is empty */

 Write a character */

 Wait until FIFO is empty */

 Enable interrupts */

 Account for newlines that will get a carriage return added */

 SPDX-License-Identifier: GPL-2.0+

/*

 * st-asc.c: ST Asynchronous serial controller (ASC) driver

 *

 * Copyright (C) 2003-2013 STMicroelectronics (R&D) Limited

 Pinctrl states */

---- UART Register definitions ------------------------------*/

 Register offsets */

 ASC_RXBUF */

/*

 * Some of status comes from higher bits of the character and some come from

 * the status register. Combining both of them in to single status using dummy

 * bits.

 ASC_CTL */

 ASC_GUARDTIME */

 ASC_INTEN */

 ASC_RETRIES */

 ASC_RXBUF */

 ASC_STA */

 ASC_TIMEOUT */

 ASC_TXBUF */

---- Inline function definitions ---------------------------*/

/*

 * Some simple utility functions to enable and disable interrupts.

 * Note that these need to be called with interrupts disabled.

 Defeat bus write posting */

 Defeat bus write posting */

----------------------------------------------------------------------*/

/*

 * This section contains code to support the use of the ASC as a

 * generic serial port.

/*

 * Start transmitting chars.

 * This is called from both interrupt and task level.

 * Either way interrupts are disabled.

		/*

		 * We should try and stop the hardware here, but I

		 * don't think the ASC has any way to do that.

	/*

	 * Datasheet states: If the MODE field selects an 8-bit frame then

	 * this [parity error] bit is undefined. Software should ignore this

	 * bit when reading 8-bit frames.

			/*

			 * Reading any data from the RX FIFO clears the

			 * overflow error condition.

 Tell the rest of the system the news. New characters! */

 Receive FIFO not empty */

 Transmitter FIFO at least half empty */

----------------------------------------------------------------------*/

/*

 * UART Functions

	/*

	 * This routine is used for seting signals of: DTR, DCD, CTS and RTS.

	 * We use ASC's hardware for CTS/RTS when hardware flow-control is

	 * enabled, however if the RTS line is required for another purpose,

	 * commonly controlled using HUP from userspace, then we need to toggle

	 * it manually, using GPIO.

	 *

	 * Some boards also have DTR and DCD implemented using PIO pins, code to

	 * do this should be hooked in here.

 If HW flow-control is enabled, we can't fiddle with the RTS line */

	/*

	 * This routine is used for geting signals of: DTR, DCD, DSR, RI,

	 * and CTS/RTS

 There are probably characters waiting to be transmitted. */

 Transmit stop */

 Receive stop */

 Handle breaks - ignored by us */

 Nothing here yet .. */

/*

 * Enable port for reception.

		/*

		 * Disable the ASC baud rate generator, which is as close as

		 * we can come to turning it off. Note this is not called with

		 * the port spinlock held.

 Update termios to reflect hardware capabilities */

 read control register */

 stop serial port and reset value */

 reset fifo rx & tx */

 set character length */

 set stop bit */

 odd parity */

 hardware flow control */

 If flow-control selected, stop handling RTS manually */

 If flow-control disabled, it's safe to handle RTS manually */

		/*

		 * MODE 1: recommended for high bit rates (above 19.2K)

		 *

		 *                   baudrate * 16 * 2^16

		 * ASCBaudRate =   ------------------------

		 *                          inputclock

		 *

		 * To keep maths inside 64bits, we divide inputclock by 16.

	/*

	 * Characters to ignore

		/*

		 * If we're ignoring parity and break indicators,

		 * ignore overruns too (for real raw support).

	/*

	 * Ignore all characters if CREAD is not set.

 Set the timeout */

 write final value and enable port */

/*

 * Called when the port is opened, and UPF_BOOT_AUTOCONF flag is set

 * Set type field if successful

 No user changeable parameters */

/*

 * Console polling routines for writing and reading from the uart while

 * in an interrupt or debug context (i.e. kgdb).

 CONFIG_CONSOLE_POLL */

---------------------------------------------------------------------*/

 CONFIG_CONSOLE_POLL */

 ensure that clk rate is correct by enabling the clk */

 "no-hw-flowctrl" state is optional */

 CONFIG_PM_SLEEP */

----------------------------------------------------------------------*/

 Wait for upto 1 second in case flow control is stopping us. */

/*

 *  Print a string to the serial port trying not to disturb

 *  any possible real use of the port...

 asc_interrupt has already claimed the lock */

	/*

	 * Disable interrupts so we don't get the IRQ line bouncing

	 * up and down while interrupts are disabled.

 Defeat bus write posting */

	/*

	 * This driver does not support early console initialization

	 * (use ARM early printk support instead), so we only expect

	 * this to be called during the uart port registration when the

	 * driver gets probed and the port should be mapped at that point.

 CONFIG_SERIAL_ST_ASC_CONSOLE */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for Motorola/Freescale IMX serial ports

 *

 * Based on drivers/char/serial.c, by Linus Torvalds, Theodore Ts'o.

 *

 * Author: Sascha Hauer <sascha@saschahauer.de>

 * Copyright (C) 2004 Pengutronix

 Register definitions */

 Receiver Register */

 Transmitter Register */

 Control Register 1 */

 Control Register 2 */

 Control Register 3 */

 Control Register 4 */

 FIFO Control Register */

 Status Register 1 */

 Status Register 2 */

 Escape Character Register */

 Escape Timer Register */

 BRM Incremental Register */

 BRM Modulator Register */

 Baud Rate Count Register */

 One Millisecond register */

 UART Test Register on i.mx1 */

 UART Test Register on all other i.mx*/

 UART Control Register Bit Fields.*/

 Auto detect interrupt */

 Auto detect baud rate */

 Transmitter ready interrupt enable */

 Idle condition interrupt */

 idle condition detect */

 Recv ready interrupt enable */

 Recv ready DMA enable */

 Infrared interface enable */

 Transimitter empty interrupt enable */

 RTS delta interrupt enable */

 Send break */

 Transmitter ready DMA enable */

 UART clock enabled, i.mx1 only */

 Aging DMA Timer Enable */

 Doze */

 UART enabled */

 Escape seq interrupt enable */

 Ignore RTS pin */

 CTS pin control */

 Clear to send */

 Escape enable */

 Parity enable */

 Parity odd/even */

 Stop */

 Word size */

 Request to send interrupt enable */

 Aging Timer Enable */

 Transmitter enabled */

 Receiver enabled */

 SW reset */

 DTR interrupt enable */

 Parity enable */

 Frame error interrupt enable */

 Data set ready */

 Data carrier detect */

 Ring indicator */

 Autobaud Detection Not Improved */

 Receive status interrupt enable */

 Async IR wake interrupt enable */

 Async wake interrupt enable */

 Data Terminal Ready Delta Enable. */

 RXD Muxed Input Select */

 Inverted Infrared transmission */

 Preset registers enable */

 CTS trigger level shift */

 CTS trigger is 6 bits wide */

 Inverted infrared reception */

 Serial infrared interrupt enable */

 Wake interrupt enable */

 Ref freq 16 MHz */

 DMA IDLE Condition Detected */

 IR special case */

 Transmit complete interrupt enable */

 Break condition interrupt enable */

 Receiver overrun interrupt enable */

 Recv data ready interrupt enable */

 Receiver trigger level shift */

 DCE/DTE mode select */

 Reference freq divider mask */

 Transmitter trigger level shift */

 Parity error interrupt flag */

 RTS pin status */

 Transmitter ready interrupt/dma flag */

 RTS delta */

 Escape seq interrupt flag */

 Frame error interrupt flag */

 Receiver ready interrupt/dma flag */

 Ageing timer interrupt flag */

 DTR Delta */

 Receiver idle interrupt flag */

 Async IR wake interrupt flag */

 Aysnc wake interrupt flag */

 Auto baud rate detect complete */

 Transmit buffer FIFO empty */

 DTR edge interrupt flag */

 Idle condition */

 Ring Interrupt Delta */

 Ring Indicator Input */

 Serial infrared interrupt flag */

 Wake */

 Data Carrier Detect Input */

 RTS edge interrupt flag */

 Transmitter complete */

 Break condition */

 Overrun error */

 Recv data ready */

 Force parity error */

 Loop tx and rx */

 TxFIFO empty */

 RxFIFO empty */

 TxFIFO full */

 RxFIFO full */

 Software reset */

 We've been assigned a range on the "Low-density serial ports" major */

/*

 * This determines how often we check the modem status signals

 * for any change.  They generally aren't connected to an IRQ

 * so we have to poll them.  We also check immediately before

 * filling the TX fifo incase CTS has been dropped.

 i.MX21 type uart runs on all i.mx except i.MX1 and i.MX6q */

 device type dependent stuff */

 shadow registers */

 DMA fields */

 sentinel */ }

		/*

		 * UCR2_SRST is the only bit in the cached registers that might

		 * differ from the value that was last written. As it only

		 * automatically becomes one after being cleared, reread

		 * conditionally.

/*

 * Save and restore functions for UCR1, UCR2 and UCR3 registers

 save control registers */

 restore control registers */

 called with port.lock taken and irqs caller dependent */

 called with port.lock taken and irqs caller dependent */

 called with port.lock taken and irqs off */

 Write UCR2 first as it includes RXEN */

 called with port.lock taken and irqs off */

	/*

	 * We are maybe in the SMP context, so if the DMA TX thread is running

	 * on other cpu, we have to wait for it to finish.

 The shifter is still busy, so retry once TC triggers */

 in rs485 mode disable transmitter */

 called with port.lock taken and irqs off */

 called with port.lock taken and irqs off */

 called with port.lock taken and irqs off */

 Send next char */

		/*

		 * We've just sent a X-char Ensure the TX DMA is enabled

		 * and the TX IRQ is disabled.

		/* send xmit->buf[xmit->tail]

 update the stat */

 called with port.lock taken and irqs off */

 fire it */

 called with port.lock taken and irqs off */

	/*

	 * We cannot simply do nothing here if sport->tx_state == SEND already

	 * because UCR1_TXMPTYEN might already have been cleared in

	 * imx_uart_stop_tx(), but tx_state is still SEND.

			/*

			 * Enable transmitter and shifter empty irq only if DMA

			 * is off.  In the DMA case this is done in the

			 * tx-callback.

			/* We have X-char to send, so enable TX IRQ and

/*

 * We have a modem side uart, so the meanings of RTS and CTS are inverted.

 in DCE mode DCDIN is always 0 */

/*

 * Handle any change of modem status signal since we were last called.

	/*

	 * Even if a condition is true that can trigger an irq only handle it if

	 * the respective irq source is enabled. This prevents some undesired

	 * actions, for example if a character that sits in the RX FIFO and that

	 * should be fetched via DMA is tried to be fetched using PIO. Or the

	 * receiver is currently off and so reading from URXD0 results in an

	 * exception. So just mask the (raw) status bits for disabled irqs.

/*

 * Return TIOCSER_TEMT when transmitter is not busy.

 If the TX DMA is working, return 0. */

 called with port.lock taken and irqs off */

 called with port.lock taken and irqs off */

		/*

		 * Turn off autoRTS if RTS is lowered and restore autoRTS

		 * setting if RTS is raised.

			/*

			 * UCR2_IRTS is unset if and only if the port is

			 * configured for CRTSCTS, so we use inverted UCR2_IRTS

			 * to get the state to restore to.

/*

 * Interrupts always disabled.

/*

 * This is our per-port timeout handler, for checking the

 * modem status signals.

/*

 * There are two kinds of RX DMA interrupts(such as in the MX6Q):

 *   [1] the RX DMA buffer is full.

 *   [2] the aging timer expires

 *

 * Condition [2] is triggered when a character has been sitting in the FIFO

 * for at least 8 byte durations.

		/*

		 * The state-residue variable represents the empty space

		 * relative to the entire buffer. Taking this in consideration

		 * the head is always calculated base on the buffer total

		 * length - DMA transaction residue. The UART script from the

		 * SDMA firmware will jump to the next buffer descriptor,

		 * once a DMA transaction if finalized (IMX53 RM - A.4.1.2.4).

		 * Taking this in consideration the tail is always at the

		 * beginning of the buffer descriptor that contains the head.

 Calculate the head */

 Calculate the tail. */

 Move data from tail to head */

 CPU claims ownership of RX DMA buffer */

 UART retrieves ownership of RX DMA buffer */

 reset default */

 reset default */

 DMA burst setting */

 DMA burst setting */

 set receiver / transmitter trigger level */

 Prepare for RX : */

 one byte less than the watermark level to enable the aging timer */

 Prepare for TX : */

 set UCR1 */

 clear UCR1 */

 half the RX buffer size */

	/* disable the DREN bit (Data Ready interrupt enable) before

	 * requesting IRQs

 set the trigger level for CTS */

 Can we enable the DMA support? */

 Reset fifo's and state machines */

	/*

	 * Finally, clear and enable interrupts

	/*

	 * configure tx polarity before enabling tx

 disable broken interrupts */

	/*

	 * make sure the edge sensitive RTS-irq is disabled,

	 * we're using RTSD instead.

	/*

	 * Enable modem status interrupts

	/*

	 * Stop our timer.

	/*

	 * Disable all interrupts, port and break condition.

 called with port.lock taken and irqs off */

	/*

	 * According to the Reference Manual description of the UART SRST bit:

	 *

	 * "Reset the transmit and receive state machines,

	 * all FIFOs and register USR1, USR2, UBIR, UBMR, UBRC, URXD, UTXD

	 * and UTS[6-3]".

	 *

	 * We don't need to restore the old values from USR1, USR2, URXD and

	 * UTXD. UBRC is read only, so only save/restore the other three

	 * registers.

 Restore the registers */

	/*

	 * We only support CS7 and CS8.

	/*

	 * Ask the core to calculate the divisor for us.

	/*

	 * Read current UCR2 and save it for future use, then clear all the bits

	 * except those we will or may need to preserve.

		/*

		 * RTS is mandatory for rs485 operation, so keep

		 * it under manual control and keep transmitter

		 * disabled.

		/*

		 * Only let receiver control RTS output if we were not requested

		 * to have RTS inactive (which then should take precedence).

	/*

	 * Characters to ignore

		/*

		 * If we're ignoring parity and break indicators,

		 * ignore overruns too (for real raw support).

	/*

	 * Update the per-port timeout.

 custom-baudrate handling */

	/*

	 *  Two registers below should always be written both and in this

	 *  particular order. One consequence is that we need to check if any of

	 *  them changes and then update both. We do need the check for change

	 *  as even writing the same values seem to "restart"

	 *  transmission/receiving logic in the hardware, that leads to data

	 *  breakage even when rate doesn't in fact change. E.g., user switches

	 *  RTS/CTS handshake and suddenly gets broken bytes.

/*

 * Configure/autoconfigure the port.

/*

 * Verify the new serial_struct (for TIOCSSERIAL).

 * The only change we allow are to the flags and type, and

 * even then only between PORT_IMX and PORT_UNKNOWN

	/*

	 * Be careful about the order of enabling bits here. First enable the

	 * receiver (UARTEN + RXEN) and only then the corresponding irqs.

	 * This prevents that a character that already sits in the RX fifo is

	 * triggering an irq but the try to fetch it from there results in an

	 * exception because UARTEN or RXEN is still off.

 now enable irqs */

 drain */

 write */

 flush */

 called with port.lock taken and irqs off or from .probe without locking */

 RTS is required to control the transmitter */

 Enable receiver if low-active RTS signal is requested */

 disable transmitter */

 Make sure Rx is enabled in case Tx is active with Rx disabled */

/*

 * Interrupts are disabled on entering

	/*

	 *	First, save UCR1/2/3 and then disable interrupts

	/*

	 *	Finally, wait for transmitter to become empty

	 *	and restore UCR1/2/3

/*

 * If the port was already initialised (eg, by a boot loader),

 * try to determine the current setup.

 ok, the port was enabled */

		{	/*

			 * The next code provides exact computation of

			 *   baud_raw = round(((uartclk/16) * (ubir + 1)) / (ubmr + 1))

			 * without need of float support or long long division,

			 * which would be required to prevent 32bit arithmetic overflow

	/*

	 * Check whether an invalid uart number has been specified, and

	 * if so, search for the first available port that does have

	 * console support.

 For setting the registers, we only need to enable the ipg clock. */

 Default RX DMA buffer configuration */

 deprecated */)

 For register access, we only need to enable the ipg clock. */

 initialize shadow register values */

	/*

	 * If using the i.MX UART RTS/CTS control then the RTS (CTS_B)

	 * signal cannot be set low during transmission in case the

	 * receiver is off (limitation of the i.MX UART IP).

 Disable interrupts before requesting them */

		/*

		 * The DCEDTE bit changes the direction of DSR, DCD, DTR and RI

		 * and influences if UCR3_RI and UCR3_DCD changes the level of RI

		 * and DCD (when they are outputs) or enables the respective

		 * irqs. So set this bit early, i.e. before requesting irqs.

		/*

		 * Disable UCR3_RI and UCR3_DCD irqs. They are also not

		 * enabled later because they cannot be cleared

		 * (confirmed on i.MX25) which makes them unusable.

	/*

	 * Allocate the IRQ(s) i.MX1 has three interrupts whereas later

	 * chips only have one interrupt.

 Save necessary regs */

 enable wakeup from i.MX UART */

 disable wakeup from i.MX UART */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Driver for SA11x0 serial ports

 *

 *  Based on drivers/char/serial.c, by Linus Torvalds, Theodore Ts'o.

 *

 *  Copyright (C) 2000 Deep Blue Solutions Ltd.

 We've been assigned a range on the "Low-density serial ports" major */

/*

 * Convert from ignore_status_mask or read_status_mask to UTSR[01]

/*

 * This is the size of our serial port register set.

/*

 * This determines how often we check the modem status signals

 * for any change.  They generally aren't connected to an IRQ

 * so we have to poll them.  We also check immediately before

 * filling the TX fifo incase CTS has been dropped.

/*

 * Handle any change of modem status signal since we were last called.

/*

 * This is our per-port timeout handler, for checking the

 * modem status signals.

/*

 * interrupts disabled on entry

/*

 * port locked and interrupts disabled

/*

 * Interrupts enabled

/*

 * Set the modem control timer to fire immediately.

		/*

		 * note that the error handling code is

		 * out of the main execution path

	/*

	 * Check the modem control lines before

	 * transmitting anything.

	/*

	 * Tried using FIFO (not checking TNF) for fifo fill:

	 * still had the '4 bytes repeated' problem.

 Clear the receiver idle bit, if set */

 Clear the relevant break bits */

/*

 * Return TIOCSER_TEMT when transmitter is not busy.

/*

 * Interrupts always disabled.

	/*

	 * Allocate the IRQ

	/*

	 * Finally, clear and enable interrupts

	/*

	 * Enable modem status interrupts

	/*

	 * Stop our timer.

	/*

	 * Free the interrupt

	/*

	 * Disable all interrupts, port and break condition.

	/*

	 * We only support CS7 and CS8.

	/*

	 * Ask the core to calculate the divisor for us.

	/*

	 * Characters to ignore

		/*

		 * If we're ignoring parity and break indicators,

		 * ignore overruns too (for real raw support).

	/*

	 * Update the per-port timeout.

	/*

	 * disable interrupts and drain transmitter

 then, disable everything */

 set the parity, stop bits and data size */

 set the baud rate */

/*

 * Release the memory region(s) being used by 'port'.

/*

 * Request the memory region(s) being used by 'port'.

/*

 * Configure/autoconfigure the port.

/*

 * Verify the new serial_struct (for TIOCSSERIAL).

 * The only change we allow are to the flags and type, and

 * even then only between PORT_SA1100 and PORT_UNKNOWN

/*

 * Setup the SA1100 serial ports.  Note that we don't include the IrDA

 * port here since we have our own SIR/FIR driver (see drivers/net/irda)

 *

 * Note also that we support "console=ttySAx" where "x" is either 0 or 1.

 * Which serial port this ends up being depends on the machine you're

 * running this kernel on.  I'm not convinced that this is a good idea,

 * but that's the way it traditionally works.

 *

 * Note that NanoEngine UART3 becomes UART2, and UART2 is no longer

 * used here.

	/*

	 * make transmit lines outputs, so that when the port

	 * is closed, the output is in the MARK state.

	/*

	 * FIXME: fns->set_wake is unused - this should be called from

	 * the suspend() callback if device_may_wakeup(dev)) is set.

/*

 * Interrupts are disabled on entering

	/*

	 *	First, save UTCR3 and then disable interrupts

	/*

	 *	Finally, wait for transmitter to become empty

	 *	and restore UTCR3

/*

 * If the port was already initialised (eg, by a boot loader),

 * try to determine the current setup.

 ok, the port was enabled */

	/*

	 * Check whether an invalid uart number has been specified, and

	 * if so, search for the first available port that does have

	 * console support.

 mctrl_gpio_init() requires that the GPIO driver supports interrupts,

 but we need to support GPIO drivers for hardware that has no such

 interrupts.  Use mctrl_gpio_init_noauto() instead.

 SPDX-License-Identifier: GPL-2.0

/*

 *  Based on drivers/char/serial.c, by Linus Torvalds, Theodore Ts'o.

 *

 * Copyright (C) 2004 Infineon IFAP DC COM CPE

 * Copyright (C) 2007 Felix Fietkau <nbd@openwrt.org>

 * Copyright (C) 2007 John Crispin <john@phrozen.org>

 * Copyright (C) 2010 Thomas Langer, <thomas.langer@lantiq.com>

 clock used to derive divider */

 clock gating of the ASC core */

 exclusive access for multi core */

		/*

		 * Note that the error handling code is

		 * out of the main execution path

			/*

			 * Overrun is special, since it's reported

			 * immediately, and doesn't affect the current

			 * character

 clear any pending interrupts */

	/* make sure other settings are written to hardware before

	 * setting enable bits

 Mark/Space parity is not supported */

		/*

		 * If we're ignoring parity and break indicators,

		 * ignore overruns too (for real raw support).

 set error signals  - framing, parity  and overrun, enable receiver */

 set up CON */

 Set baud rate - take a divider of 2 into account */

 disable the baudrate generator */

 make sure the fractional divider is off */

 set up to use divisor of 2 */

 now we can write the new baudrate into the register */

 turn the baudrate generator back on */

 enable rx */

 Don't rewrite B0 */

 CONFIG_SERIAL_LANTIQ_CONSOLE */

 get serial id */

 unused, just to be backward-compatible */

 not all asc ports have clock gates, lets ignore the return code */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for PowerMac Z85c30 based ESCC cell found in the

 * "macio" ASICs of various PowerMac models

 * 

 * Copyright (C) 2003 Ben. Herrenschmidt (benh@kernel.crashing.org)

 *

 * Derived from drivers/macintosh/macserial.c by Paul Mackerras

 * and drivers/serial/sunzilog.c by David S. Miller

 *

 * Hrm... actually, I ripped most of sunzilog (Thanks David !) and

 * adapted special tweaks needed for us. I don't think it's worth

 * merging back those though. The DMA code still has to get in

 * and once done, I expect that driver to remain fairly stable in

 * the long term, unless we change the driver model again...

 *

 * 2004-08-06 Harald Welte <laforge@gnumonks.org>

 *	- Enable BREAK interrupt

 *	- Add support for sysreq

 *

 * TODO:   - Add DMA support

 *         - Defer port shutdown to a few seconds after close

 *         - maybe put something right into uap->clk_divisor

 Not yet implemented */

/*

 * For the sake of early serial console, we can do a pre-probe

 * (optional) of the ports at rather early boot time.

/* 

 * Load all registers to reprogram the port

 * This function must only be called when the TX is not busy.  The UART

 * port lock must be held and local interrupts disabled.

 Let pending transmits finish.  */

 Disable all interrupts.  */

 Set parity, sync config, stop bits, and clock divisor.  */

 Set misc. TX/RX control bits.  */

 Set TX/RX controls sans the enable bits.  */

 now set R7 "prime" on ESCC */

 make sure we use R7 "non-prime" on ESCC */

 Synchronous mode config.  */

 Disable baud generator.  */

 Clock mode control.  */

 Lower and upper byte of baud rate generator divisor.  */

 Now rewrite R14, with BRENAB (if set).  */

 Reset external status interrupts.  */

 Rewrite R3/R5, this time without enables masked.  */

 Rewrite R1, this time without IRQ enabled masked.  */

 Enable interrupts */

/* 

 * We do like sunzilog to avoid disrupting pending Tx

 * Reprogram the Zilog channel HW registers with the copies found in the

 * software state struct.  If the transmitter is busy, we defer this update

 * until the next TX complete interrupt.  Else, we do it right now.

 *

 * The UART port lock must be held and local interrupts disabled.

 Sanity check, make sure the old bug is no longer happening */

 Handle the SysRq ^O Hack */

 USE_CTRL_O_SYSRQ */

 CONFIG_MAGIC_SYSRQ && CONFIG_SERIAL_CORE_CONSOLE */

 A real serial line, record the character and status.  */

		/* We can get stuck in an infinite loop getting char 0 when the

		 * line is in a wrong HW state, we break that here.

		 * When that happens, I disable the receive side of the driver.

		 * Note that what I've been experiencing is a real irq loop where

		 * I'm getting flooded regardless of the actual port speed.

		 * Something strange is going on with the HW

		/* The Zilog just gives us an interrupt when DCD/CTS/etc. change.

		 * But it does not tell us which bit has changed, we have to keep

		 * track of this ourselves.

		 * The CTS input is inverted for some reason.  -- paulus

		/* TX still busy?  Just wait for the next TX done interrupt.

		 *

		 * It can occur because of how we do serial console writes.  It would

		 * be nice to transmit console writes just like we normally would for

		 * a TTY line. (ie. buffered and TX interrupt driven).  That is not

		 * easy because console writes cannot sleep.  One solution might be

		 * to poll on enough port->xmit space becoming free.  -DaveM

	/* Under some circumstances, we see interrupts reported for

	 * a closed channel. The interrupt mask in R1 is clear, but

	 * R3 still signals the interrupts and we see them when taking

	 * an interrupt for the other channel (this could be a qemu

	 * bug but since the ESCC doc doesn't specify precsiely whether

	 * R3 interrup status bits are masked by R1 interrupt enable

	 * bits, better safe than sorry). --BenH.

 Hrm... we register that twice, fixme later.... */

 Channel A */

/*

 * Peek the status register, lock not held by caller

/* 

 * Check if transmitter is empty

 * The port lock is not held.

/* 

 * Set Modem Control (RTS & DTR) bits

 * The port lock is held and interrupts are disabled.

 * Note: Shall we really filter out RTS on external ports or

 * should that be dealt at higher level only ?

 Do nothing for irda for now... */

 We get called during boot with a port not up yet */

 NOTE: Not subject to 'transmitter active' rule.  */ 

/* 

 * Get Modem Control bits (only the input ones, the core will

 * or that with a cached value of the control ones)

 * The port lock is held and interrupts are disabled.

/* 

 * Stop TX side. Dealt like sunzilog at next Tx interrupt,

 * though for DMA, we will have to do a bit more.

 * The port lock is held and interrupts are disabled.

/* 

 * Kick the Tx side.

 * The port lock is held and interrupts are disabled.

 TX busy?  Just wait for the TX done interrupt.  */

	/* Send the first character to jump-start the TX done

	 * IRQ sending engine.

/* 

 * Stop Rx side, basically disable emitting of

 * Rx interrupts on the port. We don't disable the rx

 * side of the chip proper though

 * The port lock is held.

 Disable all RX interrupts.  */

/* 

 * Enable modem status change interrupts

 * The port lock is held.

 NOTE: Not subject to 'transmitter active' rule. */

/* 

 * Control break state emission

 * The port lock is not held.

/*

 * Turn power on or off to the SCC and associated stuff

 * (port drivers, modem, IR port, etc.)

 * Returns the number of milliseconds we should wait before

 * trying to use the port.

 wait for 2.5s before using */

		/* TODO: Make that depend on a timer, don't power down

		 * immediately

 !CONFIG_PPC_PMAC */

/*

 * FixZeroBug....Works around a bug in the SCC receiving channel.

 * Inspired from Darwin code, 15 Sept. 2000  -DanM

 *

 * The following sequence prevents a problem that is seen with O'Hare ASICs

 * (most versions -- also with some Heathrow and Hydra ASICs) where a zero

 * at the input to the receiver becomes 'stuck' and locks up the receiver.

 * This problem can occur as a result of a zero bit at the receiver input

 * coincident with any of the following events:

 *

 *	The SCC is initialized (hardware or software).

 *	A framing error is detected.

 *	The clocking option changes from synchronous or X1 asynchronous

 *		clocking to X16, X32, or X64 asynchronous clocking.

 *	The decoding mode is changed among NRZ, NRZI, FM0, or FM1.

 *

 * This workaround attempts to recover from the lockup condition by placing

 * the SCC in synchronous loopback mode with a fast clock before programming

 * any of the asynchronous modes.

 Didn't we already do this? */

 to kill some time */

	/* The channel should be OK now, but it is probably receiving

	 * loopback garbage.

	 * Switch to asynchronous mode, disable the receiver,

	 * and discard everything in the receive buffer.

/*

 * Real startup routine, powers up the hardware and sets up

 * the SCC. Returns a delay in ms where you need to wait before

 * actually using the port, this is typically the internal modem

 * powerup delay. This routine expect the lock to be taken.

 Power up the SCC & underlying hardware (modem/irda) */

 Nice buggy HW ... */

 Reset the channel */

 Clear the interrupt registers */

 Setup some valid baud rate */

 Clear handshaking, enable BREAK interrupts */

 Master interrupt enable */

 Enable receiver and transmitter.  */

 Remember status for DCD/CTS changes */

/*

 * This is the "normal" startup routine, using the above one

 * wrapped with the lock and doing a schedule delay

	/* A console is never powered down. Else, power up and

	 * initialize the chip

	/* Right now, we deal with delay by blocking here, I'll be

	 * smarter later on

 IrDA reset is done now */

 Enable interrupt requests for the channel */

 Disable interrupt requests for the channel */

 Disable receiver and transmitter */

 Disable break assertion */

 Release interrupt handler */

 Shut the chip down */

/* Shared by TTY driver and serial console setup.  The port lock is held

 * and local interrupts are disabled.

	/* Switch to external clocking for IrDA high clock rates. That

	 * code could be re-used for Midi interfaces with different

	 * multipliers

 BRG off */

 230400 */

 115200 */

 Character size, stop bits, and parity. */

/*

 * Set the irda codec on the imac to the specified baud rate.

 SIR modes */

	/* The FIR modes aren't really supported at this point, how

	 * do we select the speed ? via the FCR on KeyLargo ?

 9600 */

 Wait for transmitter to drain */

 Drain the receiver too */

 Switch to command mode */

 Switch SCC to 19200 */

 Write get_version command byte */

 Send speed mode */

 Switch back to data mode */

	/* XXX Check which revs of machines actually allow 1 and 4Mb speeds

	 * on the IR dongle. Note that the IRTTY driver currently doesn't know

	 * about the FIR mode and high speed modes. So these are unused. For

	 * implementing proper support for these, we should probably add some

	 * DMA as well, at least on the Rx side, which isn't a simple thing

	 * at this point.

 Calc baud rate */

 Cet the irda codec to the right rate */

 Set final baud rate */

 Make sure modem status interrupts are correctly configured */

 Load registers to the chip */

 The port lock is not held.  */

 Disable IRQs on the port */

 Setup new port configuration */

 Re-enable IRQs on the port */

/* We do not request/release mappings of the registers here, this

 * happens at early serial probe time.

 These do not need to do anything interesting either.  */

 We do not support letting the user mess with the divisor, IRQ, etc. */

 Wait for the transmit buffer to empty. */

 CONFIG_CONSOLE_POLL */

/*

 * Setup one port structure after probing, HW is down at this point,

 * Unlike sunzilog, we don't need to pre-init the spinlock as we don't

 * register our console before uart_add_one_port() is called

	/*

	 * Request & map chip registers

	/*

	 * Request & map DBDMA registers

	/*

	 * Detect port type

 1999 Powerbook G3 has slot-names property instead */

	/*

	 * Init remaining bits of "port" structure

	/*

	 * Fixup for the port on Gatwick for which the device-tree has

	 * missing interrupts. Normally, the macio_dev would contain

	 * fixed up interrupt info, but we use the device-tree directly

	 * here due to early probing so we need the fixup too.

 IRQs on gatwick are offset by 64 */

	/* Setup some valid baud rate information in the register

	 * shadows so we don't write crap there before baud rate is

	 * first initialized.

/*

 * Get rid of a port on module removal

/*

 * Called upon match with an escc node in the device-tree.

	/* Iterate the pmz_ports array to find a matching entry

	/* We still activate the port even when failing to request resources

	 * to work around bugs in ancient Apple device-trees

/*

 * That one should not be called, macio isn't really a hotswap device,

 * we don't expect one of those serial ports to go away...

/*

 * Probe all ports in the system and build the ports array, we register

 * with the serial layer later, so we get a proper struct device which

 * allows the tty to attach properly. This is later than it used to be

 * but the tty layer really wants it that way.

	/*

	 * Find all escc chips in the system

		/*

		 * First get channel A/B node pointers

		 * 

		 * TODO: Add routines with proper locking to do that...

		/*

		 * Fill basic fields in the port structures

		/*

		 * Setup the ports for real

/* On PCI PowerMacs, pmz_probe() does an explicit search of the OpenFirmware

 * tree to obtain the device_nodes needed to start the console before the

 * macio driver. On Macs without OpenFirmware, global platform_devices take

 * the place of those device_nodes.

 Iterate the pmz_ports array to find a matching entry */

 !CONFIG_PPC_PMAC */

 CONFIG_SERIAL_PMACZILOG_CONSOLE */

 CONFIG_SERIAL_PMACZILOG_CONSOLE */

/*

 * Register the driver, console driver and ports with the serial

 * core

	/*

	 * Register this driver with the serial core

 !CONFIG_PPC_PMAC */

	/* 

	 * First, we need to do a direct OF-based probe pass. We

	 * do that because we want serial console up before the

	 * macio stuffs calls us back, and since that makes it

	 * easier to pass the proper number of channels to

	 * uart_register_driver()

	/*

	 * Bail early if no port found

	/*

	 * Now we register with the serial layer

 effectively "pmz_unprobe()" */

	/*

	 * Then we register the macio driver itself

 Get rid of macio-driver (detach from macio) */

 Unregister UART driver */

 Wait for the transmit buffer to empty. */

/*

 * Print a string to the serial port trying not to disturb

 * any possible real use of the port...

 Turn of interrupts and enable the transmitter. */

 Restore the values in the registers. */

 Don't disable the transmitter. */

/*

 * Setup the serial console

	/*

	 * XServe's default to 57600 bps

	/*

	 * Check whether an invalid uart number has been specified, and

	 * if so, search for the first available port that does have

	 * console support.

	/*

	 * Mark port as beeing a console

	/*

	 * Temporary fix for uart layer who didn't setup the spinlock yet

	/*

	 * Enable the hardware

 Probe ports */

 TODO: Autoprobe console based on OF */

 pmz_console.index = i; */

 CONFIG_SERIAL_PMACZILOG_CONSOLE */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Freescale LINFlexD UART serial port driver

 *

 * Copyright 2012-2016 Freescale Semiconductor, Inc.

 * Copyright 2017-2019 NXP

 All registers are 32-bit width */

 LIN control register				*/

 LIN interrupt enable register		*/

 LIN status register				*/

 LIN error status register			*/

 UART mode control register			*/

 UART mode status register			*/

 LIN timeout control status register		*/

 LIN output compare register			*/

 LIN timeout control register			*/

 LIN fractional baud rate register		*/

 LIN integer baud rate register		*/

 LIN checksum field register			*/

 LIN control register 2			*/

 Buffer identifier register			*/

 Buffer data register least significant	*/

 Buffer data register most significant	*/

 Identifier filter enable register		*/

 Identifier filter match index		*/

 Identifier filter mode register		*/

 Global control register			*/

 UART preset timeout register			*/

 UART current timeout register		*/

/*

 * Register field definitions

 us */

 sentinel */ }

 Waiting for data transmission completed. */

 waiting for data transmission completed */

 return TIOCSER_TEMT when transmitter is not busy */

 Disable transmission/reception */

 Enter initialization mode by setting INIT bit */

 set the Linflex in master mode and activate by-pass filter */

 wait for init mode entry */

	/*

	 *	UART = 0x1;		- Linflex working in UART mode

	 *	TXEN = 0x1;		- Enable transmission of data now

	 *	RXEn = 0x1;		- Receiver enabled

	 *	WL0 = 0x1;		- 8 bit data

	 *	PCE = 0x0;		- No parity

 set UART bit to allow writing other bits */

 disable interrupts */

 Enter initialization mode by setting INIT bit */

 wait for init mode entry */

	/*

	 * only support CS8 and CS7, and for CS7 must enable PE.

	 * supported mode:

	 *	- (7,e/o,1)

	 *	- (8,n,1)

	 *	- (8,e/o,1)

 enter the UART into configuration mode */

 Word length: WL1WL0:00 */

 Word length: WL1WL0:01 */

 has a space/sticky bit */

 parity must be enabled when CS7 to match 8-bits format */

 characters to ignore */

		/*

		 * if we're ignoring parity and break indicators,

		 * ignore overruns too (for real raw support).

 nothing to do */

 configure/auto-configure the port */

/*

 * if the port was already initialised (eg, by a boot loader),

 * try to determine the current setup.

 ok, the port was enabled */

	/*

	 * check whether an invalid uart number has been specified, and

	 * if so, search for the first available port that does have

	 * console support.

		/* Workaround for character loss or output of many invalid

		 * characters, when INIT mode is entered shortly after a

		 * character has just been printed.

 Emptying buffer */

 SPDX-License-Identifier: GPL-2.0

/*

 * RISC-V SBI based earlycon

 *

 * Copyright (C) 2018 Anup Patel <anup@brainfault.org>

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2012-2015 Spreadtrum Communications Inc.

 device name */

 the offset of serial registers and BITs for them */

 data registers */

 line status register and its BITs  */

 data number in TX and RX fifo */

 interrupt enable register and its BITs */

 interrupt clear register */

 line control register */

 control register 1 */

 fifo threshold register */

 config baud rate register */

 interrupt mask status register */

 The Sprd serial does not support this function. */

 nothing to do */

 statistics */

 mask off conditions which should be ignored */

 this handles the interrupt from one port */

 clear rx fifo */

 clear tx fifo */

 clear interrupt */

 allocate irq */

 enable interrupt */

 ask the core to calculate the divisor for us */

 set data length */

 calculate stop bits */

 calculate parity */

 no support mark/space */

 update the per-port timeout */

 characters to ignore */

		/*

		 * If we're ignoring parity and break indicators,

		 * ignore overruns too (for real raw support).

 flow control */

 clock divider bit0~bit15 */

 clock divider bit16~bit20 */

 Don't rewrite B0 */

 nothing to do */

 wait up to 10ms for the character(s) to be sent */

 wait for transmitter to become empty */

 Support for earlycon */

 !CONFIG_SERIAL_SPRD_CONSOLE */

 To keep console alive even if the error occurred */

	/*

	 * Allocate one dma buffer to prepare for receive transfer, in case

	 * memory allocation failure at runtime.

 SPDX-License-Identifier: GPL-2.0

/*

 *  Driver for GRLIB serial ports (APBUART)

 *

 *  Based on linux/drivers/serial/amba.c

 *

 *  Copyright (C) 2000 Deep Blue Solutions Ltd.

 *  Copyright (C) 2003 Konrad Eisele <eiselekd@web.de>

 *  Copyright (C) 2006 Daniel Hellstrom <daniel@gaisler.com>, Aeroflex Gaisler AB

 *  Copyright (C) 2008 Gilead Kutnick <kutnickg@zin-tech.com>

 *  Copyright (C) 2009 Kristoffer Glembo <kristoffer@gaisler.com>, Aeroflex Gaisler AB

 for ignore all read */

 amba: fill FIFO */

 The GRLIB APBUART handles flow control in hardware */

 The GRLIB APBUART handles flow control in hardware */

 We don't support sending break */

 Allocate the IRQ */

 Finally, enable interrupts */

 disable all interrupts, disable the port */

 Free the interrupt */

 Ask the core to calculate the divisor for us. */

 uart_get_divisor calc a *16 uart freq, apbuart is *8 */

 Enable flow control. */

 Update the per-port timeout. */

 Characters to ignore */

 Ignore all characters if CREAD is not set. */

 Set baud rate */

 Configure/autoconfigure the port */

 Verify the new serial_struct (for TIOCSSERIAL) */

	/*

	 * Enable the transceiver and wait for it to be ready to send data.

	 * Clear interrupts so that this process will not be externally

	 * interrupted in the middle (which can cause the transceiver to

	 * drain prematurely).

	/*

	 * Disable the transceiver so data isn't actually sent during the

	 * actual test.

	/*

	 * So long as transmitting a character increments the tranceivier FIFO

	 * length the FIFO must be at least that big. These bytes will

	 * automatically drain off of the FIFO.

 ======================================================================== */

 Console driver, if enabled                                               */

 ======================================================================== */

 First save the CR then disable the interrupts */

	/*

	 *      Finally, wait for transmitter to become empty

	 *      and restore the TCR

	/*

	 * Check whether an invalid uart number has been specified, and

	 * if so, search for the first available port that does have

	 * console support.

 ======================================================================== */

 OF Platform Driver                                                       */

 ======================================================================== */

 Ignore if used by another OS instance */

 Frequency of APB Bus is frequency of UART */

 We support maximum UART_NR uarts ... */

 Find all APBUARTS in device the tree and initialize their ports */

 SPDX-License-Identifier: GPL-2.0+

/*

 * SiFive UART driver

 * Copyright (C) 2018 Paul Walmsley <paul@pwsan.com>

 * Copyright (C) 2018-2019 SiFive

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; either version 2 of the License, or

 * (at your option) any later version.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 * Based partially on:

 * - drivers/tty/serial/pxa.c

 * - drivers/tty/serial/amba-pl011.c

 * - drivers/tty/serial/uartlite.c

 * - drivers/tty/serial/omap-serial.c

 * - drivers/pwm/pwm-sifive.c

 *

 * See the following sources for further documentation:

 * - Chapter 19 "Universal Asynchronous Receiver/Transmitter (UART)" of

 *   SiFive FE310-G000 v2p3

 * - The tree/master/src/main/scala/devices/uart directory of

 *   https://github.com/sifive/sifive-blocks/

 *

 * The SiFive UART design is not 8250-compatible.  The following common

 * features are not supported:

 * - Word lengths other than 8 bits

 * - Break handling

 * - Parity

 * - Flow control

 * - Modem signals (DSR, RI, etc.)

 * On the other hand, the design is free from the baggage of the 8250

 * programming model.

/*

 * Register offsets

 TXDATA */

 RXDATA */

 TXCTRL */

 RXCTRL */

 IE */

 IP */

 DIV */

/*

 * Config macros

/*

 * SIFIVE_SERIAL_MAX_PORTS: maximum number of UARTs on a device that can

 *                          host a serial console

/*

 * SIFIVE_DEFAULT_BAUD_RATE: default baud rate that the driver should

 *                           configure itself to use

 SIFIVE_SERIAL_NAME: our driver's name that we pass to the operating system */

 SIFIVE_TTY_PREFIX: tty name prefix for SiFive serial ports */

 SIFIVE_TX_FIFO_DEPTH: depth of the TX FIFO (in bytes) */

 SIFIVE_RX_FIFO_DEPTH: depth of the TX FIFO (in bytes) */

/*

 *

/**

 * struct sifive_serial_port - driver-specific data extension to struct uart_port

 * @port: struct uart_port embedded in this struct

 * @dev: struct device *

 * @ier: shadowed copy of the interrupt enable register

 * @clkin_rate: input clock to the UART IP block.

 * @baud_rate: UART serial line rate (e.g., 115200 baud)

 * @clk: reference to this device's clock

 * @clk_notifier: clock rate change notifier for upstream clock changes

 *

 * Configuration data specific to this SiFive UART.

/*

 * Structure container-of macros

/*

 * Forward declarations

/*

 * Internal functions

/**

 * __ssp_early_writel() - write to a SiFive serial port register (early)

 * @port: pointer to a struct uart_port record

 * @offs: register address offset from the IP block base address

 * @v: value to write to the register

 *

 * Given a pointer @port to a struct uart_port record, write the value

 * @v to the IP block register address offset @offs.  This function is

 * intended for early console use.

 *

 * Context: Intended to be used only by the earlyconsole code.

/**

 * __ssp_early_readl() - read from a SiFive serial port register (early)

 * @port: pointer to a struct uart_port record

 * @offs: register address offset from the IP block base address

 *

 * Given a pointer @port to a struct uart_port record, read the

 * contents of the IP block register located at offset @offs from the

 * IP block base and return it.  This function is intended for early

 * console use.

 *

 * Context: Intended to be called only by the earlyconsole code or by

 *          __ssp_readl() or __ssp_writel() (in this driver)

 *

 * Returns: the register value read from the UART.

/**

 * __ssp_writel() - write to a SiFive serial port register

 * @v: value to write to the register

 * @offs: register address offset from the IP block base address

 * @ssp: pointer to a struct sifive_serial_port record

 *

 * Write the value @v to the IP block register located at offset @offs from the

 * IP block base, given a pointer @ssp to a struct sifive_serial_port record.

 *

 * Context: Any context.

/**

 * __ssp_readl() - read from a SiFive serial port register

 * @ssp: pointer to a struct sifive_serial_port record

 * @offs: register address offset from the IP block base address

 *

 * Read the contents of the IP block register located at offset @offs from the

 * IP block base, given a pointer @ssp to a struct sifive_serial_port record.

 *

 * Context: Any context.

 *

 * Returns: the value of the UART register

/**

 * sifive_serial_is_txfifo_full() - is the TXFIFO full?

 * @ssp: pointer to a struct sifive_serial_port

 *

 * Read the transmit FIFO "full" bit, returning a non-zero value if the

 * TX FIFO is full, or zero if space remains.  Intended to be used to prevent

 * writes to the TX FIFO when it's full.

 *

 * Returns: SIFIVE_SERIAL_TXDATA_FULL_MASK (non-zero) if the transmit FIFO

 * is full, or 0 if space remains.

/**

 * __ssp_transmit_char() - enqueue a byte to transmit onto the TX FIFO

 * @ssp: pointer to a struct sifive_serial_port

 * @ch: character to transmit

 *

 * Enqueue a byte @ch onto the transmit FIFO, given a pointer @ssp to the

 * struct sifive_serial_port * to transmit on.  Caller should first check to

 * ensure that the TXFIFO has space; see sifive_serial_is_txfifo_full().

 *

 * Context: Any context.

/**

 * __ssp_transmit_chars() - enqueue multiple bytes onto the TX FIFO

 * @ssp: pointer to a struct sifive_serial_port

 *

 * Transfer up to a TX FIFO size's worth of characters from the Linux serial

 * transmit buffer to the SiFive UART TX FIFO.

 *

 * Context: Any context.  Expects @ssp->port.lock to be held by caller.

/**

 * __ssp_enable_txwm() - enable transmit watermark interrupts

 * @ssp: pointer to a struct sifive_serial_port

 *

 * Enable interrupt generation when the transmit FIFO watermark is reached

 * on the SiFive UART referred to by @ssp.

/**

 * __ssp_enable_rxwm() - enable receive watermark interrupts

 * @ssp: pointer to a struct sifive_serial_port

 *

 * Enable interrupt generation when the receive FIFO watermark is reached

 * on the SiFive UART referred to by @ssp.

/**

 * __ssp_disable_txwm() - disable transmit watermark interrupts

 * @ssp: pointer to a struct sifive_serial_port

 *

 * Disable interrupt generation when the transmit FIFO watermark is reached

 * on the UART referred to by @ssp.

/**

 * __ssp_disable_rxwm() - disable receive watermark interrupts

 * @ssp: pointer to a struct sifive_serial_port

 *

 * Disable interrupt generation when the receive FIFO watermark is reached

 * on the UART referred to by @ssp.

/**

 * __ssp_receive_char() - receive a byte from the UART

 * @ssp: pointer to a struct sifive_serial_port

 * @is_empty: char pointer to return whether the RX FIFO is empty

 *

 * Try to read a byte from the SiFive UART RX FIFO, referenced by

 * @ssp, and to return it.  Also returns the RX FIFO empty bit in

 * the char pointed to by @ch.  The caller must pass the byte back to the

 * Linux serial layer if needed.

 *

 * Returns: the byte read from the UART RX FIFO.

/**

 * __ssp_receive_chars() - receive multiple bytes from the UART

 * @ssp: pointer to a struct sifive_serial_port

 *

 * Receive up to an RX FIFO's worth of bytes from the SiFive UART referred

 * to by @ssp and pass them up to the Linux serial layer.

 *

 * Context: Expects ssp->port.lock to be held by caller.

/**

 * __ssp_update_div() - calculate the divisor setting by the line rate

 * @ssp: pointer to a struct sifive_serial_port

 *

 * Calculate the appropriate value of the clock divisor for the UART

 * and target line rate referred to by @ssp and write it into the

 * hardware.

/**

 * __ssp_update_baud_rate() - set the UART "baud rate"

 * @ssp: pointer to a struct sifive_serial_port

 * @rate: new target bit rate

 *

 * Calculate the UART divisor value for the target bit rate @rate for the

 * SiFive UART described by @ssp and program it into the UART.  There may

 * be some error between the target bit rate and the actual bit rate implemented

 * by the UART due to clock ratio granularity.

/**

 * __ssp_set_stop_bits() - set the number of stop bits

 * @ssp: pointer to a struct sifive_serial_port

 * @nstop: 1 or 2 (stop bits)

 *

 * Program the SiFive UART referred to by @ssp to use @nstop stop bits.

/**

 * __ssp_wait_for_xmitr() - wait for an empty slot on the TX FIFO

 * @ssp: pointer to a struct sifive_serial_port

 *

 * Delay while the UART TX FIFO referred to by @ssp is marked as full.

 *

 * Context: Any context.

 XXX Could probably be more intelligent here */

/*

 * Linux serial API functions

 IP block does not support these signals */

 IP block does not support sending a break */

/**

 * sifive_serial_clk_notifier() - clock post-rate-change notifier

 * @nb: pointer to the struct notifier_block, from the notifier code

 * @event: event mask from the notifier code

 * @data: pointer to the struct clk_notifier_data from the notifier code

 *

 * On the V0 SoC, the UART IP block is derived from the CPU clock source

 * after a synchronous divide-by-two divider, so any CPU clock rate change

 * requires the UART baud rate to be updated.  This presumably corrupts any

 * serial word currently being transmitted or received.  In order to avoid

 * corrupting the output data stream, we drain the transmit queue before

 * allowing the clock's rate to be changed.

		/*

		 * The TX watermark is always set to 1 by this driver, which

		 * means that the TX busy bit will lower when there are 0 bytes

		 * left in the TX queue -- in other words, when the TX FIFO is

		 * empty.

		/*

		 * On the cycle the TX FIFO goes empty there is still a full

		 * UART frame left to be transmitted in the shift register.

		 * The UART provides no way for software to directly determine

		 * when that last frame has been transmitted, so we just sleep

		 * here instead.  As we're not tracking the number of stop bits

		 * they're just worst cased here.  The rest of the serial

		 * framing parameters aren't configurable by software.

 Set number of stop bits */

 Set line rate */

 Update the per-port timeout */

 Ignore all characters if CREAD is not set */

 CONFIG_CONSOLE_POLL */

/*

 * Early console support

 CONFIG_SERIAL_EARLYCON */

/*

 * Linux console interface

 Set up clock divider */

 Enable transmits and set the watermark level to 1 */

 Enable receives and set the watermark level to 0 */

 SPDX-License-Identifier: GPL-2.0

/*

 * timbuart.c timberdale FPGA UART driver

 * Copyright (c) 2009 Intel Corporation

/* Supports:

 * Timberdale FPGA UART

 spin lock held by upper layer, disable all RX interrupts */

 spinlock held by upper layer, disable TX interrupt */

 do not transfer anything here -> fire off the tasklet */

 clear all TX interrupts */

 Re-enable any tx interrupt */

	/* enable interrupts if there are chars in the transmit buffer,

	 * Or if we delivered some bytes and want the almost empty interrupt

	 * we wake up the upper layer later when we got the interrupt

	 * to give it some time to go out...

 Some RX status is set */

 ack all RX interrupts */

 always have the RX interrupts enabled */

 ack */

 N/A */

 Enable all but TX interrupts */

	/* The serial layer calls into this once with old = NULL when setting

/* We do not request/release mappings of the registers here,

 * currently it's done in the proble function.

 disable interrupts, the tasklet enables them again */

 fire off bottom half */

/*

 * Configure/autoconfigure the port.

 we don't want the core code to modify any port params */

 SPDX-License-Identifier: GPL-2.0+

/*

  * icom.c

  *

  * Copyright (C) 2001 IBM Corporation. All rights reserved.

  *

  * Serial device driver.

  *

  * Based on code from serial.c

#define ICOM_TRACE		 enable port trace capabilities */

 spinlock for adapter initialization and changing adapter operations */

	/* FODs: Frame Out Descriptor Queue, this is a FIFO queue that

           indicates that frames are to be transmitted

 FIDs */

 fill in every entry, even if no buffer */

 write flush */

 write flush */

 Clear out any pending interrupts */

 Stop processor */

 Zero out DRAM */

 Load Call Setup into Adapter */

 Load Resident DCE portion of Adapter */

 Set Hardware level */

 Start the processor in Adapter */

 0.5 seconds */

	/*Set up data in icom DRAM to indicate where personality

	 *code is located and its length.

	/*Setting the syncReg to 0x80 causes adapter to start downloading

	   the personality code into adapter instruction RAM.

	   Once code is loaded, it will begin executing and, based on

	   information provided above, will start DMAing data from

	   shared memory to adapter DRAM.

	/* the wait loop below verifies this write operation has been done

	   and processed

 Wait max 1 Sec for data download and processor to start */

	/*

	 * check Cable ID

 Get cable ID into the lower 4 bits (standard form) */

 Clear out any pending interrupts */

 Turn off port */

 Stop processor */

 should NEVER be NULL */

	/*

	 * check Cable ID

 Get cable ID into the lower 4 bits (standard form) */

 Check for valid Cable ID */

 reload adapter code, pick up any potential changes in cable id */

 still no sign of cable, error out */

	/*

	 * Finally, clear and  enable interrupts

 write flush */

	/*

	 * disable all interrupts

 write flush */

	/*

	 * disable break condition

 write flush */

modem input register */

 clear buffer in use bit */

 activate write queue */

 Block copy all but the last byte as this may have status */

 Break detect logic */

			/*

			 * Now check to see if character should be

			 * ignored, and mask off conditions which

			 * should be ignored.

			/*

			 * Overrun is special, since it's

			 * reported immediately, and doesn't

			 * affect the current character

 find icom_port for this interrupt */

 port 2 interrupt,  NOTE:  for all ADAPTER_V2, port 2 will be active */

 port 3 interrupt */

 Clear out any pending interrupts */

 port 0 interrupt, NOTE:  for all adapters, port 0 will be active */

 port 1 interrupt */

 Clear out any pending interrupts */

 flush the write */

/*

 * ------------------------------------------------------------------

 * Begin serial-core API

 * ------------------------------------------------------------------

 wait .1 sec to send char */

 flush write operation */

 stop receiver */

 byte size and parity */

 5 bits/char */

 6 bits/char */

 7 bits/char */

 8 bits/char */

 2 stop bits */

 parity bit enabled */

 odd parity */

 Determine divisor based on baud rate */

 B0 transition handled in rs_set_termios */

 CTS flow control flag and modem status interrupts */

	/*

	 * Set up parity check flag

	/*

	 * Characters to ignore

		/*

		 * If we're ignore parity and break indicators, ignore

		 * overruns too.  (For real raw support).

	/*

	 * !!! ignore all characters if CREAD is not set

 Turn off Receiver to prepare for reset */

 clear all current buffers of data */

 activate changes and start xmit and receiver here */

 Enable the receiver */

 0.5 seconds */

 enable modem signal interrupts */

 reset processor */

 Enable Transmitter and Receiver */

 get port memory */

 be sure that DTR and RTS are dropped */

 Wait 0.1 Sec for simple Init to complete */

 Stop proccessor */

 save off irq and request irq line */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) Maxime Coquelin 2015

 * Copyright (C) STMicroelectronics SA 2017

 * Authors:  Maxime Coquelin <mcoquelin.stm32@gmail.com>

 *	     Gerald Baeza <gerald.baeza@foss.st.com>

 *	     Erwan Le Ray <erwan.leray@foss.st.com>

 *

 * Inspired by st-asc.c from STMicroelectronics (c)

 Return true when data is pending (in pio mode), and false when no data is pending. */

 Get pending characters in RDR or FIFO */

 Get all pending characters from the RDR or the FIFO when using interrupts */

 Handle only RX data errors when using DMA */

 Apply RDR data mask */

		/*

		 * Status bits has to be cleared before reading the RDR:

		 * In FIFO mode, reading the RDR will pop the next data

		 * (if any) along with its status bits into the SR.

		 * Not doing so leads to misalignement between RDR and SR,

		 * and clear status bits of the next rx data.

		 *

		 * Clear errors flags for stm32f7 and stm32h7 compatible

		 * devices. On stm32f4 compatible devices, the error bit is

		 * cleared by the sequence [read SR - read DR].

 Break detection if character is null */

	/*

	 * Apply rdr_mask on buffer in order to mask parity bit.

	 * This loop is useless in cs8 mode because DMA copies only

	 * 8 bits and already ignores parity bit.

 DMA buffer is configured in cyclic mode and handles the rollback of the buffer. */

 Conditional first part: from last_res to end of DMA buffer */

 Empty DMA buffer */

 Disable DMA request line */

 Switch to PIO mode to handle the errors */

 Switch back to DMA mode */

 Disable RX DMA */

 Fall back to interrupt mode */

 Let's see if we have pending data to send */

	/*

	 * Enables TX FIFO threashold irq when FIFO is enabled,

	 * or TX empty irq when FIFO is disabled

 Check that TDR is empty before filling FIFO */

 rely on TXE irq (mask or unmask) for sending remaining data */

 Push current DMA TX transaction in the pending queue */

 dma no yet started, safe to free resources */

 Issue pending DMA TX requests */

 Clear wake up flag and disable wake up interrupt */

	/*

	 * rx errors in dma mode has to be handled ASAP to avoid overrun as the DMA request

	 * line has been masked by HW and rx data are stacking in FIFO.

 Receiver timeout irq for DMA RX */

 This routine is used to get signals of: DCD, DSR, RI, and CTS */

 Transmit stop */

 There are probably characters waiting to be transmitted. */

 Flush the transmit buffer. */

 Throttle the remote when input buffer is about to overflow. */

	/*

	 * Disable DMA request line if enabled, so the RX data gets queued into the FIFO.

	 * Hardware flow control is triggered when RX FIFO is full.

 Unthrottle the remote, the input buffer can now accept data. */

	/*

	 * Switch back to DMA mode (re-enable DMA request line).

	 * Hardware flow control is stopped when FIFO is not full any more.

 Receive stop */

 Disable DMA request line. */

 Handle breaks - ignored by us */

 Prepare a DMA cyclic transaction */

 Push current DMA transaction in the pending queue */

 Issue pending DMA requests */

	/*

	 * DMA request line not re-enabled at resume when port is throttled.

	 * It will be re-enabled by unthrottle ops.

 RX FIFO Flush */

 RX enabling */

 Disable modem control interrupts */

 Send the TC error message only when ISR_TC is not set */

 Disable RX DMA. */

 flush RX & TX FIFO */

 Send the TC error message only when ISR_TC is not set. */

 Stop serial port and reset value */

 flush RX & TX FIFO */

 Tx and RX FIFO configuration */

	/*

	 * Word length configuration:

	 * CS8 + parity, 9 bits word aka [M1:M0] = 0b01

	 * CS7 or (CS6 + parity), 7 bits word aka [M1:M0] = 0b10

	 * CS8 or (CS7 + parity), 8 bits word aka [M1:M0] = 0b00

	 * M0 and M1 already cleared by cr1 initialization.

 1 start bit + 2 stop bits */

 1 start bit + 1 stop bit */

 RX timeout irq to occur after last stop bit + bits */

		/*

		 * Enable fifo threshold irq in two cases, either when there is no DMA, or when

		 * wake up over usart, from low power until the DMA gets re-enabled by resume.

	/*

	 * The USART supports 16 or 8 times oversampling.

	 * By default we prefer 16 times oversampling, so that the receiver

	 * has a better tolerance to clock deviations.

	 * 8 times oversampling is only used to achieve higher speeds.

 Characters to ignore */

		/*

		 * If we're ignoring parity and break indicators,

		 * ignore overruns too (for real raw support).

 Ignore all characters if CREAD is not set */

		/*

		 * Setup DMA to collect only valid data and enable error irqs.

		 * This also enables break reception when using DMA.

 Configure wake up from low power on start bit detection */

 Handle modem control interrupts */

 No user changeable parameters */

/*

 * STM32H7 RX & TX FIFO threshold configuration (CR3 RXFTCFG / TXFTCFG)

 * Note: 1 isn't a valid value in RXFTCFG / TXFTCFG. In this case,

 * RXNEIE / TXEIE can be used instead of threshold irqs: RXFTIE / TXFTIE.

 * So, RXFTCFG / TXFTCFG bitfields values are encoded as array index + 1.

 DT option to get RX & TX FIFO threshold (default to 8 bytes) */

 Provide FIFO threshold ftcfg (1 is invalid: threshold irq unused) */

 Ensure that clk rate is correct by enabling the clk */

	/*

	 * Both CTS/RTS gpios and "st,hw-flow-ctrl" (deprecated) or "uart-has-rtscts"

	 * properties should not be specified.

deprecated*/ ||

	/*

	 * Using DMA and threaded handler for the console could lead to

	 * deadlocks.

 Configure DMA channel */

 Configure DMA channel */

 Fall back in interrupt mode for any non-deferral error */

 Fall back in interrupt mode for any non-deferral error */

 Fall back in interrupt mode */

 Fall back in interrupt mode */

 Save and disable interrupts, enable the transmitter */

 Restore interrupt state */

	/*

	 * This driver does not support early console initialization

	 * (use ARM early printk support instead), so we only expect

	 * this to be called during the uart port registration when the

	 * driver gets probed and the port should be mapped at that point.

 CONFIG_SERIAL_STM32_CONSOLE */

	/*

	 * Enable low-power wake-up and wake-up irq if argument is set to

	 * "enable", disable low-power wake-up and wake-up irq otherwise

		/*

		 * When DMA is used for reception, it must be disabled before

		 * entering low-power mode and re-enabled when exiting from

		 * low-power mode.

 Avoid race with RX IRQ when DMAR is cleared */

 Poll data from DMA RX buffer if any */

 Poll data from RX FIFO if any */

	/*

	 * When "no_console_suspend" is enabled, keep the pinctrl default state

	 * and rely on bootloader stage to restore this state upon resume.

	 * Otherwise, apply the idle or sleep states depending on wakeup

	 * capabilities.

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for the PSC of the Freescale MPC52xx PSCs configured as UARTs.

 *

 * FIXME According to the usermanual the status bits in the status register

 * are only updated when the peripherals access the FIFO and not when the

 * CPU access them. So since we use this bits to know when we stop writing

 * and reading, they may not be updated in-time and a race condition may

 * exists. But I haven't be able to prove this and I don't care. But if

 * any problem arises, it might worth checking. The TX/RX FIFO Stats

 * registers should be used in addition.

 * Update: Actually, they seem updated ... At least the bits we use.

 *

 *

 * Maintainer : Sylvain Munaut <tnt@246tNt.com>

 *

 * Some of the code has been inspired/copied from the 2.4 code written

 * by Dale Farnsworth <dfarnsworth@mvista.com>.

 *

 * Copyright (C) 2008 Freescale Semiconductor Inc.

 *                    John Rigby <jrigby@gmail.com>

 * Added support for MPC5121

 * Copyright (C) 2006 Secret Lab Technologies Ltd.

 *                    Grant Likely <grant.likely@secretlab.ca>

 * Copyright (C) 2004-2006 Sylvain Munaut <tnt@246tNt.com>

 * Copyright (C) 2003 MontaVista, Software, Inc.

 We've been assigned a range on the "Low-density serial ports" major */

 Max number of iteration in the interrupt */

	/* Rem: - We use the read_status_mask as a shadow of

	 *        psc->mpc52xx_psc_imr

	 *      - It's important that is array is all zero on start as we

	 *        use it to know if it's initialized or not ! If it's not sure

	 *        it's cleared, then a memset(...,0,...) should be added to

	 *        the console_init

 lookup table for matching device nodes to index numbers */

 Forward declaration of the interruption handling routine */

 ======================================================================== */

 PSC fifo operations for isolating differences between 52xx and 512x      */

 ======================================================================== */

 setting the prescaler and divisor reg is common for all chips */

 select prescaler */

 clear D_*-bits by reading them */

 enable CTS and DCD as IPC interrupts */

 The 5200 has a fixed /32 prescaler, uartclk contains the ipb freq */

 enable the /32 prescaler and set the divisor */

	/* The 5200B has a selectable /4 or /32 prescaler, uartclk contains the

	/* select the proper prescaler and set the divisor

 /32 */

 /4 */

 52xx specific interrupt handler. The caller holds the port lock */

 CONFIG_PPC_MPC52xx */

 PSC FIFO Controller for mpc512x */

 /32 prescaler */

	/*

	 * The "MPC5121e Microcontroller Reference Manual, Rev. 3" says on

	 * pg. 30-10 that the chip supports a /32 and a /10 prescaler.

	 * Furthermore, it states that "After reset, the prescaler by 10

	 * for the UART mode is selected", but the reset register value is

	 * 0x0000 which means a /32 prescaler. This is wrong.

	 *

	 * In reality using /32 prescaler doesn't work, as it is not supported!

	 * Use /16 or /10 prescaler, see "MPC5121e Hardware Design Guide",

	 * Chapter 4.1 PSC in UART Mode.

	 * Calculate with a /16 prescaler here.

 uartclk contains the ips freq */

 enable the /16 prescaler and set the divisor */

 Init PSC FIFO Controller */

 default error code, potentially overwritten by clock calls */

 backwards compat with device trees that lack clock specs */

 disable the clock, errors are not fatal */

 512x specific interrupt handler. The caller holds the port lock */

 Read pending PSC FIFOC interrupts */

 Check if it is an interrupt for this port */

 called from within the .request_port() callback (allocation) */

 called from within the .release_port() callback (release) */

 implementation of the .clock() callback (enable/disable) */

 /32 prescaler */

 select prescaler */

	/*

	 * Calculate with a /16 prescaler here.

 uartclk contains the ips freq */

 enable the /16 prescaler and set the divisor */

/*

 * MPC5125 have compatible PSC FIFO Controller.

 * Special init not needed.

 clear D_*-bits by reading them */

 enable CTS and DCD as IPC interrupts */

 CONFIG_PPC_MPC512x */

 ======================================================================== */

 UART operations                                                          */

 ======================================================================== */

 port->lock taken by caller */

 port->lock taken by caller */

 port->lock taken by caller */

 Request IRQ */

 Reset/activate the port, clear and enable interrupts */

	/*

	 * According to Freescale's support the RST_TX command can produce a

	 * spike on the TX pin. So they recommend to delay "for one character".

	 * One millisecond should be enough for everyone.

 UART mode DCD ignored */

 Shut down the port.  Leave TX active if on a console port */

 Disable interrupt */

 Release interrupt */

 Prepare what we're gonna write */

 With CMSPAR, PARODD also means high parity (same as termios) */

 Get the lock */

 Do our best to flush TX & RX, so we don't lose anything */

 But we don't wait indefinitely ! */

 Maximum wait */

	/* FIXME Can't receive chars since set_termios might be called at early

	 * boot for the console, all stuff is not yet ready to receive at that

 while (j-- && mpc52xx_uart_int_rx_chars(port)); */

 Reset the TX & RX */

 Send new mode settings */

 Update the per-port timeout */

 Reenable TX & RX */

 We're all set, release the lock */

	/*

	 * We keep using PORT_MPC52xx for historic reasons although it applies

	 * for MPC512x, too, but print "MPC5xxx" to not irritate users

 remapped by us ? */

 Need to remap ? */

	.pm		= mpc52xx_uart_pm,		Not supported yet */

 ======================================================================== */

 Interrupt handling                                                       */

 ======================================================================== */

 While we can read, do so ! */

 Get the char */

 Handle sysreq char */

 Store it */

 Clear error condition */

			/*

			 * Overrun is special, since it's

			 * reported immediately, and doesn't

			 * affect the current character

 Process out of band chars */

 Nothing to do ? */

 Send chars */

 Wake up */

 Maybe we're done after all */

 While we have stuff to do, we continue */

 If we don't find anything to do, we stop */

 Limit number of iteration */

 ======================================================================== */

 Console ( if applicable )                                                */

 ======================================================================== */

 Read the mode registers */

 CT{U,L}R are write-only ! */

 Parse them */

 Disable interrupts */

 Wait the TX buffer to be empty */

 Maximum wait */

 Write all the chars */

 Line return handling */

 Send the char */

 Wait the TX buffer to be empty */

 Maximum wait */

 Restore interrupt state */

 Fetch register locations */

	/* Basic port init. Needed since we use some uart_??? func before

 Setup the port parameters accoding to options */

 Specified on the cmdline (e.g. console=ttyPSC0) */

 ======================================================================== */

 UART Driver                                                              */

 ======================================================================== */

 ======================================================================== */

 OF Platform Driver                                                       */

 ======================================================================== */

 binding used by old lite5200 device trees: */

 binding used by efika: */

 Check validity & presence */

	/* set the uart clock to the input clock of the psc, the different

	 * prescalers are taken into account in the set_baudrate() methods

 Init the port structure */

 Search for IRQ and mapbase */

 Add the port to the uart sub-system */

 Find the first free PSC number */

 Assign index to each PSC in device tree */

 ======================================================================== */

 Module                                                                   */

 ======================================================================== */

	/*

	 * Map the PSC FIFO Controller and init if on MPC512x.

 SPDX-License-Identifier: GPL-2.0

/* sunhv.c: Serial driver for SUN4V hypervisor console.

 *

 * Copyright (C) 2006, 2007 David S. Miller (davem@davemloft.net)

 HV_EWOULDBLOCK, etc.  */

 Unopened serial console */

 port->lock is not held.  */

	/* Transmitter is always empty for us.  If the circ buffer

	 * is non-empty or there is an x_char pending, our caller

	 * will do the right thing and ignore what we return here.

 port->lock held by caller.  */

 port->lock is held by caller and interrupts are disabled.  */

 port->lock held by caller.  */

 port->lock held by caller.  */

 port->lock is not held.  */

 port->lock held by caller.  */

 port->lock is not held.  */

 port->lock is not held.  */

 port->lock is not held.  */

 port->lock is not held.  */

 XXX */

 Migrate hvcons irq to param cpu */

/* Copy 's' into the con_write_page, decoding "\n" into

 * "\r\n" along the way.  We have to return two lengths

 * because the caller needs to know how much to advance

 * 's' and also how many bytes to output via con_write_page.

 arbitrary */

 ...def MODULE ; never supported as such */

 SPDX-License-Identifier: GPL-2.0

/*

 *Copyright (C) 2011 LAPIS Semiconductor Co., Ltd.

/* Set the max number of UART port

 * Intel EG20T PCH: 4 port

 * LAPIS Semiconductor ML7213 IOH: 3 port

 * LAPIS Semiconductor ML7223 IOH: 2 port

   1.8432 MHz */

 192.0000 MHz */

  64.0000 MHz */

  48.0000 MHz */

  64.0000 MHz */

  50.0000 MHz */

 protect the eg20t_port private structure and io access to membase */

/**

 * struct pch_uart_driver_data - private data structure for UART-DMA

 * @port_type:			The type of UART port

 * @line_no:			UART port line number (0, 1, 2...)

 Return UART clock, checking for board specific clocks. */

 Get DMA's dev information */

 Set Tx DMA */

 Tx = 0, 2, 4, ... */

 Set Rx DMA */

 Rx = Tx + 1 */

 Get Consistent memory for DMA */

 Initialize SG table */

 Initialize SG table */

 No Interrupt */

 Receiver Line Status */

 Received Data Ready */

		case PCH_UART_IID_RDR_TO:	/* Received Data Ready

		case PCH_UART_IID_THRE:	/* Transmitter Holding Register

 Modem Status */

			next = 0; /* MS ir prioirty is the lowest. So, MS ir

 Never junp to this label */

/* This function tests whether the transmitter fifo and shifter for the port

 Returns the current state of modem control inputs. */

 Enable the modem status interrupts. */

 Control the transmission of a break signal. */

 Grab any interrupt resources and initialise any low level driver state. */

/* Change the port parameters, including word length, parity, stop

 *bits.  Update read_status_mask and ignore_status_mask to indicate

 CS8 */

 Only UART0 has auto hardware flow function */

 Mark/Space parity is not supported */

 Don't rewrite B0 */

/*

 *	Wait for transmitter & holding register to empty

 Wait up to 10ms for the character(s) to be sent. */

 Wait up to 1s for flow control if necessary */

 CONFIG_CONSOLE_POLL || CONFIG_SERIAL_PCH_UART_CONSOLE */

/*

 * Console polling routines for communicate via uart while

 * in an interrupt or debug context.

	/*

	 * First save the IER then disable the interrupts

	/*

	 * Send the character out.

	/*

	 * Finally, wait for transmitter to become empty

	 * and restore the IER

 CONFIG_CONSOLE_POLL */

	.pm		= pch_uart_pm,		Not supported yet */

/*

 *	Print a string to the serial port trying not to disturb

 *	any possible real use of the port...

 *

 *	The console_lock must be held when we get here.

 call to uart_handle_sysrq_char already took the priv lock */

 serial8250_handle_port() already took the port lock */

	/*

	 *	First save the IER then disable the interrupts

	/*

	 *	Finally, wait for transmitter to become empty

	 *	and restore the IER

	/*

	 * Check whether an invalid uart number has been specified, and

	 * if so, search for the first available port that does have

	 * console support.

 CONFIG_SERIAL_PCH_UART_CONSOLE */

 EG20T/ML7213: UART0 */

 EG20T:UART1~3  ML7213: UART1~2*/

 register as UART driver */

 register as PCI driver */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Freescale lpuart serial port driver

 *

 *  Copyright 2012-2014 Freescale Semiconductor, Inc.

 All registers are 8-bit width */

/* 32-bit global registers only for i.MX7ULP/i.MX8x

 * Used to reset all internal logic and registers, except the Global Register.

 32-bit register definition */

 Rx DMA timeout in ms, which is used to calculate Rx ring buffer size */

 IMX lpuart has four extra unused regs located at the beginning */

 sentinel */ }

 Forward declare this for the dma callbacks*/

 Disable Rx & Tx */

 Enable Rx and Tx FIFO */

 flush Tx and Rx FIFO */

 explicitly clear RDRF */

 Enable Rx and Tx */

 drain */

 Disable Rx & Tx */

 Enable Rx and Tx FIFO */

 flush Tx and Rx FIFO */

 explicitly clear RDRF */

 Enable Rx and Tx */

 return TIOCSER_TEMT when transmitter is not busy */

		/*

		 * to clear the FE, OR, NF, FE, PE flags,

		 * read SR1 then read DR

		/*

		 * Overruns cause FIFO pointers to become missaligned.

		 * Flushing the receive FIFO reinitializes the pointers.

		/*

		 * to clear the FE, OR, NF, FE, PE flags,

		 * read STAT then read DATA reg

		/*

		 * The LPUART can't distinguish between a break and a framing error,

		 * thus we assume it is a break if the received data is zero.

 SysRq, using dma, check for linebreak by framing err. */

 linebreak produces some garbage, removing it */

 Read DR to clear the error flags */

 Disable receiver during this operation... */

 Read DR to clear the error flags */

			/*

			 * At this point parity/framing error is

			 * cleared However, since the DMA already read

			 * the data register and we had to read it

			 * again after reading the status register to

			 * properly clear the flags, the FIFO actually

			 * underflowed... This requires a clearing of

			 * the FIFO...

 CPU claims ownership of RX DMA buffer */

	/*

	 * ring->head points to the end of data already written by the DMA.

	 * ring->tail points to the beginning of data to be read by the

	 * framework.

	 * The current transfer size should not be larger than the dma buffer

	 * length.

	/*

	 * Silent handling of keys pressed in the sysrq timeframe

	/*

	 * At this point ring->head may point to the first byte right after the

	 * last byte of the dma buffer:

	 * 0 <= ring->head <= sport->rx_sgl.length

	 *

	 * However ring->tail must always points inside the dma buffer:

	 * 0 <= ring->tail <= sport->rx_sgl.length - 1

	 *

	 * Since we use a ring buffer, we have to handle the case

	 * where head is lower than tail. In such a case, we first read from

	 * tail to the end of the buffer then reset tail.

 Finally we read data from tail to head */

 Wrap ring->head if needed */

	/*

	 * Calculate length of one DMA buffer size to keep latency below

	 * 10ms at any baud rate.

 clear unsupported configurations */

 Enable auto RS-485 RTS mode */

		/*

		 * RTS needs to be logic HIGH either during transfer _or_ after

		 * transfer, other variants are not supported by the hardware.

		/*

		 * The hardware defaults to RTS logic HIGH while transfer.

		 * Switch polarity in case RTS shall be logic HIGH

		 * after transfer.

		 * Note: UART is assumed to be active high.

 Store the new configuration */

 clear unsupported configurations */

 Enable auto RS-485 RTS mode */

		/*

		 * RTS needs to be logic HIGH either during transfer _or_ after

		 * transfer, other variants are not supported by the hardware.

		/*

		 * The hardware defaults to RTS logic HIGH while transfer.

		 * Switch polarity in case RTS shall be logic HIGH

		 * after transfer.

		 * Note: UART is assumed to be active high.

 Store the new configuration */

 for internal loopback we need LOOPS=1 and RSRC=0 */

 for internal loopback we need LOOPS=1 and RSRC=0 */

 flush Tx and Rx FIFO */

 explicitly clear RDRF */

 Restore cr2 */

 enable FIFO mode */

 set the watermark */

 Restore cr2 */

 set Rx DMA timeout */

 determine FIFO size and enable FIFO mode */

 RXWATER must be 0 */

 determine FIFO size */

	/*

	 * The LS1021A and LS1028A have a fixed FIFO depth of 16 words.

	 * Although they support the RX/TXSIZE fields, their encoding is

	 * different. Eg the reference manual states 0b101 is 16 words.

 disable Rx/Tx and interrupts */

 disable Rx/Tx and interrupts */

	/*

	 * only support CS8 and CS7, and for CS7 must enable PE.

	 * supported mode:

	 *  - (7,e/o,1)

	 *  - (8,n,1)

	 *  - (8,m/s,1)

	 *  - (8,e/o,1)

	/*

	 * When auto RS-485 RTS mode is enabled,

	 * hardware flow control need to be disabled.

 parity must be enabled when CS7 to match 8-bits format */

 ask the core to calculate the divisor */

	/*

	 * Need to update the Ring buffer length according to the selected

	 * baud rate and restart Rx DMA path.

	 *

	 * Since timer function acqures sport->port.lock, need to stop before

	 * acquring same lock because otherwise del_timer_sync() can deadlock.

 characters to ignore */

		/*

		 * if we're ignoring parity and break indicators,

		 * ignore overruns too (for real raw support).

 update the per-port timeout */

 wait transmit engin complete */

 disable transmit and receive */

 restore control register */

	/*

	 * The idea is to use the best OSR (over-sampling rate) possible.

	 * Note, OSR is typically hard-set to 16 in other LPUART instantiations.

	 * Loop to find the best OSR value possible, one that generates minimum

	 * baud_diff iterate through the rest of the supported values of OSR.

	 *

	 * Calculation Formula:

	 *  Baud Rate = baud clock / ((OSR+1) √ó SBR)

 calculate the temporary sbr value  */

		/*

		 * calculate the baud rate difference based on the temporary

		 * osr and sbr values

 select best values between sbr and sbr+1 */

 handle buadrate outside acceptable rate */

	/*

	 * only support CS8 and CS7, and for CS7 must enable PE.

	 * supported mode:

	 *  - (7,e/o,1)

	 *  - (8,n,1)

	 *  - (8,m/s,1)

	 *  - (8,e/o,1)

	/*

	 * When auto RS-485 RTS mode is enabled,

	 * hardware flow control need to be disabled.

 parity must be enabled when CS7 to match 8-bits format */

 ask the core to calculate the divisor */

	/*

	 * Need to update the Ring buffer length according to the selected

	 * baud rate and restart Rx DMA path.

	 *

	 * Since timer function acqures sport->port.lock, need to stop before

	 * acquring same lock because otherwise del_timer_sync() can deadlock.

 characters to ignore */

		/*

		 * if we're ignoring parity and break indicators,

		 * ignore overruns too (for real raw support).

 update the per-port timeout */

 wait transmit engin complete */

 disable transmit and receive */

 restore control register */

 nothing to do */

 configure/autoconfigure the port */

 first save CR2 and then disable interrupts */

 wait for transmitter finish complete and restore CR2 */

 first save CR2 and then disable interrupts */

 wait for transmitter finish complete and restore CR2 */

/*

 * if the port was already initialised (eg, by a boot loader),

 * try to determine the current setup.

 ok, the port was enabled */

	/*

	 * baud = mod_clk/(16*(sbr[13]+(brfa)/32)

 ok, the port was enabled */

	/*

	 * baud = mod_clk/(16*(sbr[13]+(brfa)/32)

	/*

	 * check whether an invalid uart number has been specified, and

	 * if so, search for the first available port that does have

	 * console support.

 set the baudrate */

 enable transmitter */

 disable Rx/Tx and interrupts */

 disable Rx/Tx and interrupts */

 uart_suspend_port() might set wakeup flag */

		/*

		 * EDMA driver during suspend will forcefully release any

		 * non-idle DMA channels. If port wakeup is enabled or if port

		 * is console port or 'no_console_suspend' is set the Rx DMA

		 * cannot resume as as expected, hence gracefully release the

		 * Rx DMA path before suspend and start Rx DMA path on resume.

 Disable Rx DMA to use UART port as wakeup source */

 SPDX-License-Identifier: GPL-2.0

/* sunzilog.c: Zilog serial driver for Sparc systems.

 *

 * Driver for Zilog serial chips found on Sun workstations and

 * servers.  This driver could actually be made more generic.

 *

 * This is based on the old drivers/sbus/char/zs.c code.  A lot

 * of code has been simply moved over directly from there but

 * much has been rewritten.  Credits therefore go out to Eddie

 * C. Dost, Pete Zaitcev, Ted Ts'o and Alex Buell for their

 * work there.

 *

 * Copyright (C) 2002, 2006, 2007 David S. Miller (davem@davemloft.net)

/* On 32-bit sparcs we need to delay after register accesses

 * to accommodate sun4 systems, but we do not need to flush writes.

 * On 64-bit sparc we only need to flush single writes to ensure

 * completion.

 Zilog input clock rate. */

 Divisor this driver uses. */

/*

 * We wrap our port structure around the generic uart_port.

 IRQ servicing chain.  */

 Current values of Zilog write registers.  */

/* Reading and writing Zilog8530 registers.  The delays are to make this

 * driver work on the Sun4 which needs a settling delay after each chip

 * register access, other machines handle this in hardware via auxiliary

 * flip-flops which implement the settle time we do in software.

 *

 * The port lock must be held and local IRQs must be disabled

 * when {read,write}_zsreg is invoked.

/* This function must only be called when the TX is not busy.  The UART

 * port lock must be held and local interrupts disabled.

 Let pending transmits finish.  */

 Disable all interrupts.  */

 Set parity, sync config, stop bits, and clock divisor.  */

 Set misc. TX/RX control bits.  */

 Set TX/RX controls sans the enable bits.  */

 Synchronous mode config.  */

	/* Don't mess with the interrupt vector (R2, unused by us) and

	 * master interrupt control (R9).  We make sure this is setup

	 * properly at probe time then never touch it again.

 Disable baud generator.  */

 Clock mode control.  */

 Lower and upper byte of baud rate generator divisor.  */

 Now rewrite R14, with BRENAB (if set).  */

 External status interrupt control.  */

 ESCC Extension Register */

 External status interrupt and FIFO control.  */

 Clear FIFO bit case it is an issue */

 Reset external status interrupts.  */

 First Latch  */

 Second Latch */

 Rewrite R3/R5, this time without enables masked.  */

 Rewrite R1, this time without IRQ enabled masked.  */

/* Reprogram the Zilog channel HW registers with the copies found in the

 * software state struct.  If the transmitter is busy, we defer this update

 * until the next TX complete interrupt.  Else, we do it right now.

 *

 * The UART port lock must be held and local interrupts disabled.

 Stop-A is handled by drivers/char/keyboard.c now. */

 Unopened serial console */

		/* This funny hack depends upon BRK_ABRT not interfering

		 * with the other bits we care about in R1.

 A real serial line, record the character and status.  */

			/* Wait for BREAK to deassert to avoid potentially

			 * confusing the PROM.

		/* The Zilog just gives us an interrupt when DCD/CTS/etc. change.

		 * But it does not tell us which bit has changed, we have to keep

		 * track of this ourselves.

		/* TX still busy?  Just wait for the next TX done interrupt.

		 *

		 * It can occur because of how we do serial console writes.  It would

		 * be nice to transmit console writes just like we normally would for

		 * a TTY line. (ie. buffered and TX interrupt driven).  That is not

		 * easy because console writes cannot sleep.  One solution might be

		 * to poll on enough port->xmit space becoming free.  -DaveM

 Channel A */

 Channel B */

/* A convenient way to quickly get R0 status.  The caller must _not_ hold the

 * port lock, it is acquired here.

 The port lock is not held.  */

 The port lock is held and interrupts are disabled.  */

 The port lock is held and interrupts are disabled.  */

 NOTE: Not subject to 'transmitter active' rule.  */ 

 The port lock is held and interrupts are disabled.  */

 The port lock is held and interrupts are disabled.  */

 TX busy?  Just wait for the TX done interrupt.  */

	/* Send the first character to jump-start the TX done

	 * IRQ sending engine.

 The port lock is held.  */

 Disable all RX interrupts.  */

 The port lock is held.  */

 NOTE: Not subject to 'transmitter active' rule.  */ 

 The port lock is not held.  */

 NOTE: Not subject to 'transmitter active' rule.  */ 

 Enable receiver and transmitter.  */

/*

 * The test for ZS_IS_CONS is explained by the following e-mail:

 *****

 * From: Russell King <rmk@arm.linux.org.uk>

 * Date: Sun, 8 Dec 2002 10:18:38 +0000

 *

 * On Sun, Dec 08, 2002 at 02:43:36AM -0500, Pete Zaitcev wrote:

 * > I boot my 2.5 boxes using "console=ttyS0,9600" argument,

 * > and I noticed that something is not right with reference

 * > counting in this case. It seems that when the console

 * > is open by kernel initially, this is not accounted

 * > as an open, and uart_startup is not called.

 *

 * That is correct.  We are unable to call uart_startup when the serial

 * console is initialised because it may need to allocate memory (as

 * request_irq does) and the memory allocators may not have been

 * initialised.

 *

 * 1. initialise the port into a state where it can send characters in the

 *    console write method.

 *

 * 2. don't do the actual hardware shutdown in your shutdown() method (but

 *    do the normal software shutdown - ie, free irqs etc)

 *****

 Disable receiver and transmitter.  */

 Disable all interrupts and BRK assertion.  */

/* Shared by TTY driver and serial console setup.  The port lock is held

 * and local interrupts are disabled.

 Program BAUD and clock source. */

 Character size, stop bits, and parity. */

 The port lock is not held.  */

/* We do not request/release mappings of the registers here, this

 * happens at early serial probe time.

 These do not need to do anything interesting either.  */

 We do not support letting the user mess with the divisor, IRQ, etc. */

	/* This funny hack depends upon BRK_ABRT not interfering

	 * with the other bits we care about in R1.

 CONFIG_CONSOLE_POLL */

 10 ms */

	/* This is a timed polling loop so do not switch the explicit

	 * udelay with ZSDELAY as that is a NOP on some platforms.  -DaveM

 CONFIG_SERIO */

 Get firmware console settings.  */

	/* Firmware console speed is limited to 150-->38400 baud so

	 * this hackish cflag thing is OK.

 SDLC Address */

 SDLC Flag    */

 Only enable interrupts if an ISR handler available */

 Normal serial TTY. */

 SDLC Address */

 SDLC Flag    */

 Use FIFO if on ESCC */

 Only enable interrupts if an ISR handler available */

 uarts must come before keyboards/mice */

 Channel A */

 Channel B */

 Enable Interrupts */

 printk (KERN_INFO "Enable IRQ for ZILOG Hardware %p\n", up); */

 Disable Interrupts */

 printk (KERN_INFO "Disable IRQ for ZILOG Hardware %p\n", up); */

 SPDX-License-Identifier: GPL-2.0

/* sunsab.c: ASYNC Driver for the SIEMENS SAB82532 DUSCC.

 *

 * Copyright (C) 1997  Eddie C. Dost  (ecd@skynet.be)

 * Copyright (C) 2002, 2006  David S. Miller (davem@davemloft.net)

 *

 * Rewrote buffer handling to use CIRC(Circular Buffer) macros.

 *   Maxim Krasnyanskiy <maxk@qualcomm.com>

 *

 * Fixed to use tty_get_baud_rate, and to allow for arbitrary baud

 * rates to be programmed into the UART.  Also eliminated a lot of

 * duplicated code in the console setup.

 *   Theodore Ts'o <tytso@mit.edu>, 2001-Oct-12

 *

 * Ported to new 2.5.x UART layer.

 *   David S. Miller <davem@davemloft.net>

 Generic UART port	*/

 Chip registers	*/

 IRQ state flags	*/

 Current DSR state	*/

 Chip poll timeout... */

 likewise		*/

 ISR0 masking		*/

 ISR1 masking		*/

 Which PVR bit is DTR */

 Which PVR bit is DSR */

 SAB82532 version	*/

	/* Setting configuration bits while the transmitter is active

	 * can cause garbage characters to get emitted by the chip.

	 * Therefore, we cache such writes here and do the real register

	 * write the next time the transmitter becomes idle.

/*

 * This assumes you have a 29.4912 MHz clock for your UART.

 1 character time (at 50 baud) */

 2.5 TX CLKs (at 50 baud) */

 Standard async fifo sizes */

 Unopened serial console */

 Read number of BYTES (Character + Status) available. */

 Issue a FIFO read command in case we where idle. */

 Read the FIFO. */

 Issue Receive Message Complete command. */

 Count may be zero for BRK, so we check for it here */

			/*

			 * For statistics only

				/*

				 * We do the SysRQ and SAK checking

				 * here because otherwise the break

				 * may get masked by ignore_status_mask

				 * or read_status_mask.

			/*

			 * Mask off conditions which should be ingored.

 bde@nwlink.com says this check causes problems */

 Stuff 32 bytes into Transmit FIFO. */

 Issue a Transmit Frame command. */

 port->lock is not held.  */

 Do not need a lock for a state test like this.  */

 port->lock held by caller.  */

 port->lock is held by caller and interrupts are disabled.  */

 port->lock held by caller.  */

 port->lock held by caller.  */

 port->lock held by caller.  */

 Issue a Transmit Frame command.  */

 port->lock is not held.  */

 port->lock held by caller.  */

 port->lock is not held.  */

 port->lock is not held.  */

	/*

	 * Wait for any commands or immediate characters

	/*

	 * Clear the FIFO buffers.

	/*

	 * Clear the interrupt registers.

	/*

	 * Now, initialize the UART 

 power-down */

 power-up */

	/*

	 * Finally, enable interrupts

 port->lock is not held.  */

 Disable Interrupts */

 Disable break condition */

 Disable Receiver */	

	/*

	 * XXX FIXME

	 *

	 * If the chip is powered down here the system hangs/crashes during

	 * reboot or shutdown.  This needs to be investigated further,

	 * similar behaviour occurs in 2.4 when the driver is configured

	 * as a module only.  One hint may be that data is sometimes

	 * transmitted at 9600 baud during shutdown (regardless of the

	 * speed the chip was configured for when the port was open).

 Power Down */	

/*

 * This is used to figure out the divisor speeds.

 *

 * The formula is:    Baud = SAB_BASE_BAUD / ((N + 1) * (1 << M)),

 *

 * with               0 <= N < 64 and 0 <= M < 16

	/*

	 * We scale numbers by 10 so that we get better accuracy

	 * without having to use floating point.  Here we increment m

	 * until n is within the valid range.

	/*

	 * We try very hard to avoid speeds with M == 0 since they may

	 * not work correctly for XTAL frequences above 10 MHz.

 Internal routine, port->lock is held and local interrupts are disabled.  */

 Byte size and parity */

 Never happens, but GCC is too dumb to figure it out */

 CTS flow control flags */

	/* We encode read_status_mask and ignore_status_mask like so:

	 *

	 * ---------------------

	 * | ... | ISR1 | ISR0 |

	 * ---------------------

	 *  ..    15   8 7    0

	/*

	 * Characteres to ignore

		/*

		 * If we're ignoring parity and break indicators,

		 * ignore overruns too (for real raw support).

	/*

	 * ignore all characters if CREAD is not set

	/* Now schedule a register update when the chip's

	 * transmitter is idle.

 port->lock is not held.  */

	/*

	 * The console framework calls us for each and every port

	 * registered. Defer the console setup until the requested

	 * port has been properly discovered. A bit of a hack,

	 * though...

	/*

	 * Temporary fix.

	/*

	 * Initialize the hardware

	/*

	 * Finally, enable interrupts

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2010 Alexey Charkov <alchark@gmail.com>

 *

 * Based on msm_serial.c, which is:

 * Copyright (C) 2007 Google, Inc.

 * Author: Robert Love <rlove@google.com>

/*

 * UART Register offsets

 Transmit data */

 Receive data */

 Clock/Baud rate divisor */

 Line control */

 IrDA control */

 Interrupt enable */

 Interrupt status */

 UART status */

 FIFO control */

 FIFO index */

 Break signal count */

 Time out divisor */

 Transmit FIFO (16x8) */

 Receive FIFO (16x10) */

/*

 * Interrupt enable and status bits

 Tx Data empty */

 Rx Data full */

 Tx FIFO almost empty */

 Tx FIFO empty */

 Rx FIFO almost full */

 Rx FIFO full */

 Tx underrun */

 Rx overrun */

 Parity error */

 Frame error */

 Toggle of CTS */

 Rx timeout */

 Break signal done */

 AHB error response */

/*

 * Line control bits

 Enable transmit logic */

 Enable receive logic */

 8-bit data length (vs. 7-bit) */

 2 stop bits (vs. 1) */

 Enable parity */

 Odd parity (vs. even) */

 Ready to send */

 Enable internal loopback */

 Enable DMA mode (needs FIFO) */

 Initiate break signal */

 APB error upon empty RX FIFO read */

 Software-controlled RTS/CTS */

/*

 * Capability flags (driver-internal)

/*

 * we use this variable to keep track of which ports

 * have been allocated as we can't use pdev->id in

 * devicetree

	/*

	 * Handle overrun

 and now the main RX loop */

 Mask conditions we're ignorning. */

 Acknowledge active status bits */

 Effective baud rate */

 Break signal timing depends on baud rate, update accordingly */

 enable TX & RX */

 disable interrupts and FIFOs */

 calculate and set baud rate */

 calculate parity */

 calculate bits per char */

 calculate stop bits */

 set parity, bits per char, and stop bit */

 Configure status bits to ignore based on termio flags. */

 Reset FIFOs */

 Every possible FIFO-related interrupt */

	/*

	 * CTS flow control

 Wait up to 10ms for the character(s) to be sent. */

	/*

	 *	Finally, wait for transmitter to become empty

	 *	and switch back to FIFO

 none required so far */

 calculate the port id */

 reserve the port id */

 port already in use - shouldn't really happen */

 Serial core uses the magic "16" everywhere - adjust for it */

 SPDX-License-Identifier: GPL-2.0

/*

 * uartlite.c: Serial driver for Xilinx uartlite serial controller

 *

 * Copyright (C) 2006 Peter Korsgaard <jacmet@sunsite.dk>

 * Copyright (C) 2007 Secret Lab Technologies Ltd.

/* ---------------------------------------------------------------------

 * Register definitions

 *

 * For register details see datasheet:

 * https://www.xilinx.com/support/documentation/ip_documentation/opb_uartlite.pdf

 ms */

 Static pointer to console port */

/**

 * struct uartlite_data: Driver private data

 * reg_ops: Functions to read/write registers

 * clk: Our parent clock, if present

 * baud: The baud rate configured when this device was synthesized

 * cflags: The cflags for parity and data bits

/* ---------------------------------------------------------------------

 * Core UART driver operations

 stats */

 drop byte with parity error if IGNPAR specificed */

 wake up */

 work done? */

 N/A */

 N/A */

 don't forward any more data (like !CREAD) */

 N/A */

 dummy */

 Set termios to what the hardware supports */

 ignore all characters if CREAD is not set */

 update timeout */

 Endianess detection */

 we don't want the core code to modify any port params */

 write char to device */

/* ---------------------------------------------------------------------

 * Console driver operations

	/*

	 * Spin waiting for TX fifo to have space available.

	 * When using the Microblaze Debug Module this can take up to 1s

 save and disable interrupt */

 restore interrupt state */

 Has the device been initialized yet? */

 not initialized yet? */

 Specified on the cmdline (e.g. console=ttyUL0 ) */

	/*

	 * Limit how many times we'll spin waiting for TX FIFO status.

	 * This will prevent lockups if the base address is incorrectly

	 * set, or any other issue on the UARTLITE.

	 * This limit is pretty arbitrary, unless we are at about 10 baud

	 * we'll never timeout on a working UART.

 Only attempt the iowrite if we didn't timeout */

 CONFIG_SERIAL_UARTLITE_CONSOLE */

/* ---------------------------------------------------------------------

 * Port assignment functions (mapping devices to uart_port structures)

/** ulite_assign: register a uartlite device with the driver

 *

 * @dev: pointer to device structure

 * @id: requested id number.  Pass -1 for automatic port assignment

 * @base: base address of uartlite registers

 * @irq: irq number for uartlite

 * @pdata: private data for uartlite

 *

 * Returns: 0 on success, <0 otherwise

 if id = -1; then scan for a free id and use that */

 mark port in use */

 Register the port */

/** ulite_release: register a uartlite device with the driver

 *

 * @dev: pointer to device structure

/**

 * ulite_suspend - Stop the device.

 *

 * @dev: handle to the device structure.

 * Return: 0 always.

/**

 * ulite_resume - Resume the device.

 *

 * @dev: handle to the device structure.

 * Return: 0 on success, errno otherwise.

/* ---------------------------------------------------------------------

 * Platform bus binding

 Match table for of_platform binding */

 CONFIG_OF */

		/*

		 * Clock framework support is optional, continue on

		 * anyways if we don't find a matching clock.

 work with hotplug and coldplug */

/* ---------------------------------------------------------------------

 * Module setup/teardown

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Driver for NEC VR4100 series Serial Interface Unit.

 *

 *  Copyright (C) 2004-2008  Yoichi Yuasa <yuasa@linux-mips.org>

 *

 *  Based on drivers/serial/8250.c, by Russell King.

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Driver for AMBA serial ports

 *

 *  Based on drivers/char/serial.c, by Linus Torvalds, Theodore Ts'o.

 *

 *  Copyright 1999 ARM Limited

 *  Copyright (C) 2000 Deep Blue Solutions Ltd.

 *

 * This is a generic driver for ARM AMBA-type serial ports.  They

 * have a lot of 16550-like features, but are not register compatible.

 * Note that although they do have CTS, DCD and DSR inputs, they do

 * not have an RI input, nor do they have DTR or RTS outputs.  If

 * required, these have to be supplied via some other means (eg, GPIO)

 * and hooked into this driver.

/*

 * We wrap our port structure around the generic uart_port.

		/*

		 * Note that the error handling code is

		 * out of the main execution path

	/*

	 * Try to enable the clock producer.

	/*

	 * Allocate the IRQ

	/*

	 * initialise the old status of the modem signals

	/*

	 * Finally, enable interrupts

	/*

	 * Free the interrupt

	/*

	 * disable all interrupts, disable the port

 disable break condition and fifos */

	/*

	 * Shut down the clock producer

	/*

	 * Ask the core to calculate the divisor for us.

 CS8

	/*

	 * Update the per-port timeout.

	/*

	 * Characters to ignore

		/*

		 * If we're ignoring parity and break indicators,

		 * ignore overruns too (for real raw support).

	/*

	 * Ignore all characters if CREAD is not set.

 first, disable everything */

 Set baud rate */

	/*

	 * ----------v----------v----------v----------v-----

	 * NOTE: MUST BE WRITTEN AFTER UARTLCR_M & UARTLCR_L

	 * ----------^----------^----------^----------^-----

/*

 * Release the memory region(s) being used by 'port'

/*

 * Request the memory region(s) being used by 'port'

/*

 * Configure/autoconfigure the port.

/*

 * verify the new serial_struct (for TIOCSSERIAL).

	/*

	 *	First save the CR then disable the interrupts

	/*

	 *	Finally, wait for transmitter to become empty

	 *	and restore the TCR

	/*

	 * Check whether an invalid uart number has been specified, and

	 * if so, search for the first available port that does have

	 * console support.

 SPDX-License-Identifier: GPL-2.0+

/*

 * RDA8810PL serial device driver

 *

 * Copyright RDA Microelectronics Company Limited

 * Copyright (c) 2017 Andreas F√§rber

 * Copyright (c) 2018 Manivannan Sadhasivam

 UART_CTRL Bits */

 UART_STATUS Bits */

 UART_RXTX_BUFFER Bits */

 UART_IRQ_MASK Bits */

 UART_IRQ_CAUSE Bits */

 UART_TRIGGERS Bits */

 UART_CMD_SET Bits */

 Clear RTS to stop to receive. */

 Read Rx buffer before reset to avoid Rx timeout interrupt */

 stop bits */

 parity check */

 Mark or Space parity */

 Hardware handshake (RTS/CTS) */

 Don't rewrite B0 */

 update the per-port timeout */

 Re-enable Tx FIFO interrupt */

 Clear IRQ cause */

 enable rx interrupt */

 Clear mask, so no surprise interrupts. */

 Clear status register */

 wait until all contents have been sent out */

 CONFIG_SERIAL_RDA_CONSOLE */

 SPDX-License-Identifier: GPL-2.0

/*

 * Derived from many drivers using generic_serial interface,

 * especially serial_tx3912.c by Steven J. Hill and r39xx_serial.c

 * (was in Linux/VR tree) by Jim Pick.

 *

 *  Copyright (C) 1999 Harald Koerfgen

 *  Copyright (C) 2000 Jim Pick <jim@jimpick.com>

 *  Copyright (C) 2001 Steven J. Hill (sjhill@realitydiluted.com)

 *  Copyright (C) 2000-2002 Toshiba Corporation

 *

 *  Serial driver for TX3927/TX4927/TX4925/TX4938 internal SIO controller

 "ttyS" is used for standard serial driver */

 acts like standard serial driver */

 flag aliases */

 support for Toshiba TC86C001 SIO */

/*

 * Number of serial ports

 No additional info for now */

 TXX9 Serial Registers */

 SILCR : Line Control */

 SIDICR : DMA/Int. Control */

 SIDISR : DMA/Int. Status */

 SICISR : Change Int. Status */

 SIFCR : FIFO Control */

 SIFLCR : Flow Control */

 SIBGR : Baudrate Control */

	/* TX4925 BUG WORKAROUND.  Accessing SIOC register

 TX Int by FIFO Empty, RX Int by Receiving 1 char. */

 initial settings */

 15 */);

 mask out RFDN_MASK bit added by previous overrun */

			/*

			 * For statistics only

				/*

				 * We do the SysRQ and SAK checking

				 * here because otherwise the break

				 * may get masked by ignore_status_mask

				 * or read_status_mask.

				/*

				 * The receiver read buffer still hold

				 * a char which caused overrun.

				 * Ignore next char by adding RFDN_MASK

				 * to ignore_status_mask temporarily.

			/*

			 * Mask off conditions which should be ingored.

 Clear TX/RX Int. Status */

 no modem control lines */

/*

 *	Wait for transmitter & holding register to empty

 Wait up to 10ms for the character(s) to be sent. */

 Wait up to 1s for flow control if necessary */

/*

 * Console polling routines for writing and reading from the uart while

 * in an interrupt or debug context.

	/*

	 *	First save the IER then disable the interrupts

	/*

	 *	Finally, clear RX interrupt status

	 *	and restore the IER

	/*

	 *	First save the IER then disable the interrupts

	/*

	 *	Send the character out.

	/*

	 *	Finally, wait for transmitter to become empty

	 *	and restore the IER

 CONFIG_CONSOLE_POLL */

	/*

	 * Clear the FIFO buffers and disable them.

	 * (they will be reenabled in set_termios())

 clear reset */

	/*

	 * Clear the interrupt registers.

	/*

	 * Now, initialize the UART

 Enable RX/TX */

	/*

	 * Finally, enable interrupts.

	/*

	 * Disable interrupts from this port

 disable all intrs */

	/*

	 * Disable break condition

 reset FIFOs */

 clear reset */

 Disable RX/TX */

	/*

	 * We don't support modem control lines.

 byte size and parity */

 not supported */

 not supported */

	/*

	 * Ask the core to calculate the divisor for us.

 Set up FIFOs */

 TX Int by FIFO Empty, RX Int by Receiving 1 char. */

	/*

	 * Ok, we're now changing the port state.  Do it with

	 * interrupts disabled.

	/*

	 * Update the per-port timeout.

	/*

	 * Characteres to ignore

		/*

		 * If we're ignoring parity and break indicators,

		 * ignore overruns too (for real raw support).

	/*

	 * ignore all characters if CREAD is not set

 CTS flow control flag */

	/*

	 * If oldstate was -1 this is called from

	 * uart_configure_port().  In this case do not initialize the

	 * port now, because the port was already initialized (for

	 * non-console port) or should not be initialized here (for

	 * console port).  If we initialized the port here we lose

	 * serial console settings.

	/*

	 * Find the region that we can probe for.  This in turn

	 * tells us whether we can probe for the type of port.

/*

 *	Print a string to the serial port trying not to disturb

 *	any possible real use of the port...

 *

 *	The console_lock must be held when we get here.

	/*

	 *	First save the UER then disable the interrupts

	/*

	 *	Disable flow-control if enabled (and unnecessary)

	/*

	 *	Finally, wait for transmitter to become empty

	 *	and restore the IER

	/*

	 * Check whether an invalid uart number has been specified, and

	 * if so, search for the first available port that does have

	 * console support.

/**

 *	serial_txx9_register_port - register a serial port

 *	@port: serial port template

 *

 *	Configure the serial port specified by the request.

 *

 *	The port is then probed and if necessary the IRQ is autodetected

 *	If this fails an error is returned.

 *

 *	On success the port is ready to use and the line number is returned.

 Find unused port */

/**

 *	serial_txx9_unregister_port - remove a txx9 serial port at runtime

 *	@line: serial line number

 *

 *	Remove one serial port.  This may not be called from interrupt

 *	context.  We hand the port back to the our control.

/*

 * Register a set of serial devices attached to a platform device.

/*

 * Remove serial ports registered against a platform device.

/*

 * Probe one serial board.  Unfortunately, there is no rhyme nor reason

 * to the arrangement of serial ports on a PCI card.

 ENABLE_SERIAL_TXX9_PCI */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2014 Linaro Ltd.

 * Author: Rob Herring <robh@kernel.org>

 *

 * Based on 8250 earlycon:

 * (c) Copyright 2004 Hewlett-Packard Development Company, L.P.

 *	Bjorn Helgaas <bjorn.helgaas@hp.com>

 fixed up at earlycon registration */

 scan backwards from end of string for first non-numeral */

 On parsing error, pass the options buf to the setup function */

/**

 *	setup_earlycon - match and register earlycon console

 *	@buf:	earlycon param string

 *

 *	Registers the earlycon console matching the earlycon specified

 *	in the param string @buf. Acceptable param strings are of the form

 *	   <name>,io|mmio|mmio32|mmio32be,<addr>,<options>

 *	   <name>,0x<addr>,<options>

 *	   <name>,<options>

 *	   <name>

 *

 *	Only for the third form does the earlycon setup() method receive the

 *	<options> string in the 'options' parameter; all other forms set

 *	the parameter to NULL.

 *

 *	Returns 0 if an attempt to register the earlycon was made,

 *	otherwise negative error code

 prefer entries with empty compatible */

/*

 * This defers the initialization of the early console until after ACPI has

 * been initialized.

 early_param wrapper for setup_earlycon() */

 Just 'earlycon' is a valid param for devicetree and ACPI SPCR. */

 CONFIG_OF_EARLY_FLATTREE */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2018, NVIDIA CORPORATION.  All rights reserved.

 setup the console */

 setup the driver */

 setup the port */

	/*

	 * Request RX channel after creating port to ensure tcu->port

	 * is ready for any immediate incoming bytes.

 SPDX-License-Identifier: GPL-2.0

/* suncore.c

 *

 * Common SUN serial routines.  Based entirely

 * upon drivers/sbus/char/sunserial.c which is:

 *

 * Copyright (C) 1997  Eddie C. Dost  (ecd@skynet.be)

 *

 * Adaptation to new UART layer is:

 *

 * Copyright (C) 2002 David S. Miller (davem@redhat.com)

 Register the driver on the first call */

 XXX handshake is not handled here. */

 Sun serial MOUSE auto baud rate detection.  */

/* Basically, when the baud rate is wrong the mouse spits out

 * breaks to us.

		/* Let a few normal bytes go by before we jump the gun

		 * and say we need to try another baud rate.

 Ok, we need to try another baud. */

 Correct baud rate determined. */

 ..def MODULE ; never supported as such */

 SPDX-License-Identifier: GPL-2.0

/*

 * Derived from many drivers using generic_serial interface.

 *

 * Copyright (C) 2008 Maxime Bizon <mbizon@freebox.fr>

 *

 *  Serial driver for BCM63xx integrated UART.

 *

 * Hardware flow control was _not_ tested since I only have RX/TX on

 * my board.

/*

 * rx interrupt mask / stat

 *

 * mask:

 *  - rx fifo full

 *  - rx fifo above threshold

 *  - rx fifo not empty for too long

/*

 * tx interrupt mask / stat

 *

 * mask:

 * - tx fifo empty

 * - tx fifo below threshold

/*

 * external input interrupt

 *

 * mask: any edge on CTS, DCD

/*

 * handy uart register accessor

/*

 * serial core request to check if uart tx fifo is empty

/*

 * serial core request to set RTS and DTR pin state and loopback mode

 invert of written value is reflected on the pin */

/*

 * serial core request to return RI, CTS, DCD and DSR pin state

/*

 * serial core request to disable tx ASAP (used for flow control)

/*

 * serial core request to (re)enable tx

/*

 * serial core request to stop rx, called before port shutdown

/*

 * serial core request to enable modem status interrupt reporting

/*

 * serial core request to start/stop emitting break char

/*

 * return port type in string format

/*

 * read all chars in rx fifo and send them to core

	/* limit number of char read in interrupt, should not be

	 * higher than fifo size anyway since we're much faster than

		/* get overrun/fifo empty information from ier

			/* fifo reset is required to clear

 do stats first */

 update flag wrt read_status_mask */

/*

 * fill tx fifo with chars to send, stop when fifo is about to be full

 * or when all chars have been sent.

 nothing to send, disable transmit interrupt */

/*

 * process uart interrupt

/*

 * enable rx & tx operation on uart

/*

 * disable rx & tx operation on uart

/*

 * clear all unread data in rx fifo and unsent data in tx fifo

 empty rx and tx fifo */

	/* read any pending char to make sure all irq status are

/*

 * serial core request to initialize uart and start rx operation

 mask all irq and flush port */

 clear any pending external input interrupt */

 set rx/tx fifo thresh to fifo half size */

 set rx fifo timeout to 1 char time */

 report any edge on dcd and cts */

 register irq and enable rx interrupts */

/*

 * serial core request to flush & disable uart

/*

 * serial core request to change current uart setting

 Drain the hot tub fully before we power it off for the winter. */

 disable uart while changing speed */

 update Control register */

 update Baudword register */

 update Interrupt register */

 update read/ignore mask */

/*

 * serial core request to claim uart iomem

 UARTs always present */

/*

 * serial core request to release uart iomem

 Nothing to release ... */

/*

 * serial core request to do any port required autoconfiguration

/*

 * serial core request to check that port information in serinfo are

 * suitable

 serial core callbacks */

 Wait up to 10ms for the character(s) to be sent. */

 Wait up to 1s for flow control if necessary */

/*

 * output given char

/*

 * console core request to output given string

 bcm_uart_interrupt() already took the lock */

 call helper to deal with \r\n */

 and wait for char to be transmitted */

/*

 * console core request to setup given console, find matching uart

 * port and setup it.

 CONFIG_SERIAL_BCM63XX_CONSOLE */

/*

 * platform driver probe/remove callback

 mark port as free */

 sentinel */ }

/*

 * platform driver stuff

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Maxim (Dallas) MAX3107/8/9, MAX14830 serial driver

 *

 *  Copyright (C) 2012-2016 Alexander Shiyan <shc_work@mail.ru>

 *

 *  Based on max3100.c, by Christian Pellegrin <chripell@evolware.org>

 *  Based on max3110.c, by Feng Tang <feng.tang@intel.com>

 *  Based on max3107.c, by Aavamobile

 MAX310X register definitions */

 RX FIFO */

 TX FIFO */

 IRQ enable */

 IRQ status */

 LSR IRQ enable */

 LSR IRQ status */

 Special char IRQ en */

 Special char IRQ status */

 Status IRQ enable */

 Status IRQ status */

 MODE1 */

 MODE2 */

 LCR */

 RX timeout */

 Auto transceiver delays */

 IRDA settings */

 Flow control levels */

 FIFO IRQ trigger levels */

 TX FIFO level */

 RX FIFO level */

 Flow control */

 XON1 character */

 XON2 character */

 XOFF1 character */

 XOFF2 character */

 GPIO config */

 GPIO data */

 PLL config */

 Baud rate generator conf */

 Baud rate divisor LSB */

 Baud rate divisor MSB */

 Clock source */

 Revision ID */

 Global IRQ (RO) */

 Global Command (WO) */

 Extended registers */

 Revision ID */

 IRQ register bits */

 LSR interrupt */

 Special char interrupt */

 Status interrupt */

 RX FIFO interrupt */

 TX FIFO interrupt */

 TX FIFO empty interrupt */

 RX FIFO empty interrupt */

 CTS interrupt */

 LSR register bits */

 RX timeout */

 RX overrun */

 RX parity error */

 Frame error */

 RX break */

 RX noise */

 CTS pin state */

 Special character register bits */

 XON1 character */

 XON2 character */

 XOFF1 character */

 XOFF2 character */

 RX break */

 9-bit multidrop addr char */

 Status register bits */

 GPIO 0 interrupt */

 GPIO 1 interrupt */

 GPIO 2 interrupt */

 GPIO 3 interrupt */

 Clock ready */

 Sleep interrupt */

 MODE1 register bits */

 RX disable */

 TX disable */

 TX pin three-state */

 RTS pin three-state */

 Transceiver ctrl enable */

 Force sleep mode */

 Auto sleep enable */

 IRQ pin enable */

 MODE2 register bits */

 Chip reset */

 FIFO reset */

 RX FIFO INT invert */

 RX FIFO empty INT invert */

 Special chr detect enable */

 Internal loopback enable */

 9-bit multidrop enable */

 ECHO suppression enable */

 LCR register bits */

 Word length bit 0 */

#define MAX310X_LCR_LENGTH1_BIT		(1 << 1) /* Word length bit 1

						  *

						  * Word length bits table:

						  * 00 -> 5 bit words

						  * 01 -> 6 bit words

						  * 10 -> 7 bit words

						  * 11 -> 8 bit words

#define MAX310X_LCR_STOPLEN_BIT		(1 << 2) /* STOP length bit

						  *

						  * STOP length bit table:

						  * 0 -> 1 stop bit

						  * 1 -> 1-1.5 stop bits if

						  *      word length is 5,

						  *      2 stop bits otherwise

 Parity bit enable */

 Even parity bit enable */

 9-bit multidrop parity */

 TX break enable */

 RTS pin control */

 IRDA register bits */

 IRDA mode enable */

 SIR mode enable */

 Flow control trigger level register masks */

 Flow control halt level */

 Flow control resume level */

 FIFO interrupt trigger level register masks */

 TX FIFO trigger level */

 RX FIFO trigger level */

 Flow control register bits */

 Auto RTS flow ctrl enable */

 Auto CTS flow ctrl enable */

#define MAX310X_FLOWCTRL_GPIADDR_BIT	(1 << 2) /* Enables that GPIO inputs

						  * are used in conjunction with

						  * XOFF2 for definition of

 Auto SW flow ctrl enable */

 SWFLOW bit 0 */

#define MAX310X_FLOWCTRL_SWFLOW1_BIT	(1 << 5) /* SWFLOW bit 1

						  *

						  * SWFLOW bits 1 & 0 table:

						  * 00 -> no transmitter flow

						  *       control

						  * 01 -> receiver compares

						  *       XON2 and XOFF2

						  *       and controls

						  *       transmitter

						  * 10 -> receiver compares

						  *       XON1 and XOFF1

						  *       and controls

						  *       transmitter

						  * 11 -> receiver compares

						  *       XON1, XON2, XOFF1 and

						  *       XOFF2 and controls

						  *       transmitter

 SWFLOW bit 2 */

#define MAX310X_FLOWCTRL_SWFLOW3_BIT	(1 << 7) /* SWFLOW bit 3

						  *

						  * SWFLOW bits 3 & 2 table:

						  * 00 -> no received flow

						  *       control

						  * 01 -> transmitter generates

						  *       XON2 and XOFF2

						  * 10 -> transmitter generates

						  *       XON1 and XOFF1

						  * 11 -> transmitter generates

						  *       XON1, XON2, XOFF1 and

						  *       XOFF2

 PLL configuration register masks */

 PLL predivision value */

 PLL multiplication factor */

 Baud rate generator configuration register bits */

 Double baud rate */

 Quadruple baud rate */

 Clock source register bits */

 Crystal osc enable */

 PLL enable */

 PLL bypass */

 External clock enable */

 Baud clk to RTS pin */

 Global commands */

 Misc definitions */

 MAX3107 specific */

 MAX3109 specific */

 MAX14830 specific */

 Clock Disable */

	/* MAX3108 have not REV ID register, we just check default value

	 * from clocksource register to make sure everything works.

	/*

	 * Calculate the integer divisor first. Select a proper mode

	 * in case if the requested baud is too high for the pre-defined

	 * clocks frequency.

 Mode x4 */

 Mode x2 */

 Calculate the divisor in accordance with the fraction coefficient */

 Calculate the baud rate fraction */

 Return the actual baud rate we just programmed */

 Use baudrate 115200 for calculate error */

 First, update error without PLL */

 Try all possible PLL dividers */

 Try multiplier 6 */

 Try multiplier 48 */

 Try multiplier 96 */

 Try multiplier 144 */

 Configure clock source */

 Configure PLL */

 Wait for crystal */

		/* We are just reading, happily ignoring any error conditions.

		 * Break condition, parity checking, framing errors -- they

		 * are all ignored. That means that we can do a batch-read.

		 *

		 * There is a small opportunity for race if the RX FIFO

		 * overruns while we're reading the buffer; the datasheets says

		 * that the LSR register applies to the "current" character.

		 * That's also the reason why we cannot do batched reads when

		 * asked to check the individual statuses.

		/*

		 * Handle the overrun case for the last character only, since

		 * the RxFIFO overflow happens after it is pushed to the FIFO

		 * tail.

 Ensure sanity of RX level */

 Get length of data pending in circular buffer */

 Limit to size of TX FIFO */

			/* It's a circ buffer -- wrap around.

 Add data to send */

 Read IRQ status & RX FIFO level */

	/* DCD and DSR are not wired and CTS/RTS is handled automatically

	 * so just indicate DSR and CAR asserted

 Mask termios capabilities we don't support */

 Word size */

 Parity */

 Stop bits */

 2 stops */

 Update LCR register */

 Set read status mask */

 Set status ignore mask */

 Configure flow control */

	/* Disable transmitter before enabling AutoCTS or auto transmitter

	 * flow control

 Enable AUTORTS and AUTOCTS */

	/* Enable transmitter after disabling AutoCTS and auto transmitter

	 * flow control

 Get baud rate generator configuration */

 Setup baudrate generator */

 Update timeout according to new baud rate */

 Configure MODE1 register */

 Configure MODE2 register & Reset FIFOs*/

 Configure mode1/mode2 to have rs485/rs232 enabled at startup */

 Configure flow control levels */

 Flow control halt level 96, resume level 48 */

 Clear IRQ status register */

 Enable RX, TX, CTS change interrupts */

 Disable all interrupts */

 Do nothing */

 Do nothing */

 Alloc port structure */

 Always ask for fixed clock rate from a property. */

 Check frequency limits */

 Check device to ensure we are talking to what we expect */

 Reset port */

 Clear port reset */

 Wait for port startup */

 Initialize port data */

 Disable all interrupts */

 Clear IRQ status register */

 Initialize queue for start TX */

 Initialize queue for changing LOOPBACK mode */

 Initialize queue for changing RS485 mode */

 Initialize SPI-transfer buffers */

 Register port */

 Go to suspend mode */

 Setup GPIO cotroller */

 Setup interrupt */

 Setup SPI bus */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver core for Samsung SoC onboard UARTs.

 *

 * Ben Dooks, Copyright (c) 2003-2008 Simtec Electronics

 *	http://armlinux.simtec.co.uk/

/* Note on 2410 error handling

 *

 * The s3c2410 manual has a love/hate affair with the contents of the

 * UERSTAT register in the UART blocks, and keeps marking some of the

 * error bits as reserved. Having checked with the s3c2410x01,

 * it copes with BREAKs properly, so I am happy to ignore the RESERVED

 * feature from the latter versions of the manual.

 *

 * If it becomes aparrent that latter versions of the 2410 remove these

 * bits, then action will have to be taken to differentiate the versions

 * and change the policy on BREAK

 *

 * BJD, 04-Nov-2004

 UART name and device definitions */

 flag to ignore all characters coming in */

 uart port features */

 reference to platform data */

 conversion functions */

 register access controls */

 Byte-order aware bit setting/clearing functions. */

 translate a port to the device name */

 Mask Tx interrupt */

 No DMA

 Enable tx dma mode */

 Set ufcon txtrig */

 Enable tx pio mode */

 Unmask Tx interrupt */

	/*

	 * The Apple version only has edge triggered TX IRQs, so we need

	 * to kick off the process by sending some characters here.

 Get data size up to the end of buffer */

 ? - where has parity gone?? */

 set Rx mode to DMA mode */

 set Rx mode to DMA mode */

 Apple types use these bits for IRQ masks */

		/*

		 * Receive all characters known to be in FIFO

		 * before reading FIFO level again

 insert the character into the buffer */

 check for break */

 Ignore character */

 Ignore character */

	/* if there isn't anything more to transmit, or the uart is now

	 * stopped, disable the uart and exit

 try and drain the buffer... */

 interrupt handler for s3c64xx and later SoC's.*/

 interrupt handler for Apple SoC's.*/

 no modem control lines */

 Default slave configuration parameters */

 RX buffer */

 TX buffer */

	/* the port reset code should have done the correct

	 * register setup for the port controls

 For compatibility with s3c24xx Soc's */

 Enable Rx Interrupt */

 For compatibility with s3c24xx Soc's */

 Enable Rx Interrupt */

 Clear the software reset of USI block (it's set at startup) */

 Continuously provide the clock to USI IP w/o gating (for Rx mode) */

 power power management control */

/* baud rate calculation

 *

 * The UARTs on the S3C2410/S3C2440 can take their clocks from a number

 * of different sources, including the peripheral clock ("pclk") and an

 * external clock ("uclk"). The S3C2440 also adds the core clock ("fclk")

 * with a programmable extra divisor.

 *

 * The following code goes through the clock sources, and calculates the

 * baud clocks (and the resultant actual baud rates) and then tries to

 * pick the closest one and select that.

 *

 Keep selected clock if provided */

			/* The UDIVSLOT register on the newer UARTs allows us to

			 * get a divisor adjustment of 1/16th on the baud clock.

			 *

			 * We don't keep the UDIVSLOT value (the 16ths we

			 * calculated by not multiplying the baud by 16) as it

			 * is easy enough to recalculate.

/* udivslot_table[]

 *

 * This table takes the fractional value of the baud divisor and gives

 * the recommended setting for the UDIVSLOT register.

	/*

	 * We don't support modem control lines.

	/*

	 * Ask the core to calculate the divisor for us.

 check to see if we need  to change clock source */

 preserve original lcon IR settings */

 Disable RTS when RX FIFO contains 63 bytes */

	/*

	 * Update the per-port timeout.

	/*

	 * Which character status flags are we interested in?

	/*

	 * Which character status flags should we ignore?

	/*

	 * Ignore all characters if CREAD is not set.

/*

 * verify the new serial_struct (for TIOCSSERIAL).

/* s3c24xx_serial_resetport

 *

 * reset the fifos and other the settings.

 reset both fifos */

 some delay is required after fifo reset */

 check to see if port is enabled */

	/* try and work out if the baudrate is changing, we can detect

	 * a change in rate, but we do not have support for detecting

	 * a disturbance in the clock-rate over the change.

		/* we should really shut the port down whilst the

		 * frequency change is in progress.

/* s3c24xx_serial_init_port

 *

 * initialise a single serial port from the platform device given

 setup info for port */

 sort our the physical and virtual addresses for each UART */

	/*

	 * DMA is currently supported only on DT platforms, if DMA properties

	 * are specified.

 Keep all interrupts masked and cleared */

 reset the fifos (and setup the uart) */

 Device driver serial port probe */

	/*

	 * DMA transfers must be aligned at least to cache line size,

	 * so find minimal transfer size suitable for DMA mode

	/*

	 * Deactivate the clock enabled in s3c24xx_serial_init_port here,

	 * so that a potential re-enablement through the pm-callback overlaps

	 * and keeps the clock enabled in this case.

 UART power management code */

 restore IRQ mask */

 !CONFIG_PM_SLEEP */

 CONFIG_PM_SLEEP */

 Console code */

 fifo mode - check amount of data in fifo registers... */

 in non-fifo mode, we go and use the tx buffer empty */

 consider the serial port configured if the tx/rx mode set */

/*

 * Console polling routines for writing and reading from the uart while

 * in an interrupt or debug context.

 not possible to xmit on unconfigured port */

 CONFIG_CONSOLE_POLL */

 not possible to xmit on unconfigured port */

 now calculate the baud rate */

 is this a valid port */

 is the port configured? */

	/*

	 * Check whether an invalid uart number has been specified, and

	 * if so, search for the first available port that does have

	 * console support.

 CONFIG_SERIAL_SAMSUNG_CONSOLE */

/*

 * Early console.

 S3C2410 */

 S3C2412, S3C2440, S3C64xx */

 S5PV210, Exynos */

 Apple S5L */

 Close enough to S3C2410 for earlycon... */

 ... but we need to override the existing fixmap entry as nGnRnE */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for Zilog serial chips found on SGI workstations and

 * servers.  This driver could actually be made more generic.

 *

 * This is based on the drivers/serial/sunzilog.c code as of 2.6.0-test7 and the

 * old drivers/sgi/char/sgiserial.c code which itself is based of the original

 * drivers/sbus/char/zs.c code.  A lot of code has been simply moved over

 * directly from there but much has been rewritten.  Credits therefore go out

 * to David S. Miller, Eddie C. Dost, Pete Zaitcev, Ted Ts'o and Alex Buell

 * for their work there.

 *

 *  Copyright (C) 2002 Ralf Baechle (ralf@linux-mips.org)

 *  Copyright (C) 2002 David S. Miller (davem@redhat.com)

/*

 * On IP22 we need to delay after register accesses but we do not need to

 * flush writes.

 Zilog input clock rate. */

 Divisor this driver uses. */

/*

 * We wrap our port structure around the generic uart_port.

 IRQ servicing chain.  */

 Current values of Zilog write registers.  */

/* Reading and writing Zilog8530 registers.  The delays are to make this

 * driver work on the IP22 which needs a settling delay after each chip

 * register access, other machines handle this in hardware via auxiliary

 * flip-flops which implement the settle time we do in software.

 *

 * The port lock must be held and local IRQs must be disabled

 * when {read,write}_zsreg is invoked.

/* This function must only be called when the TX is not busy.  The UART

 * port lock must be held and local interrupts disabled.

 Let pending transmits finish.  */

 Disable all interrupts.  */

 Set parity, sync config, stop bits, and clock divisor.  */

 Set misc. TX/RX control bits.  */

 Set TX/RX controls sans the enable bits.  */

 Synchronous mode config.  */

	/* Don't mess with the interrupt vector (R2, unused by us) and

	 * master interrupt control (R9).  We make sure this is setup

	 * properly at probe time then never touch it again.

 Disable baud generator.  */

 Clock mode control.  */

 Lower and upper byte of baud rate generator divisor.  */

 Now rewrite R14, with BRENAB (if set).  */

 External status interrupt control.  */

 Reset external status interrupts.  */

 Rewrite R3/R5, this time without enables masked.  */

 Rewrite R1, this time without IRQ enabled masked.  */

/* Reprogram the Zilog channel HW registers with the copies found in the

 * software state struct.  If the transmitter is busy, we defer this update

 * until the next TX complete interrupt.  Else, we do it right now.

 *

 * The UART port lock must be held and local interrupts disabled.

 BREAK event software flag.  */

 SysRq event software flag.  */

 Handle the null char got when BREAK is removed.  */

 A real serial line, record the character and status.  */

		/* The Zilog just gives us an interrupt when DCD/CTS/etc. change.

		 * But it does not tell us which bit has changed, we have to keep

		 * track of this ourselves.

		/* TX still busy?  Just wait for the next TX done interrupt.

		 *

		 * It can occur because of how we do serial console writes.  It would

		 * be nice to transmit console writes just like we normally would for

		 * a TTY line. (ie. buffered and TX interrupt driven).  That is not

		 * easy because console writes cannot sleep.  One solution might be

		 * to poll on enough port->xmit space becoming free.  -DaveM

 Channel A */

 Channel B */

/* A convenient way to quickly get R0 status.  The caller must _not_ hold the

 * port lock, it is acquired here.

 The port lock is not held.  */

 The port lock is held and interrupts are disabled.  */

 The port lock is held and interrupts are disabled.  */

 NOTE: Not subject to 'transmitter active' rule.  */

 The port lock is held and interrupts are disabled.  */

 The port lock is held and interrupts are disabled.  */

 TX busy?  Just wait for the TX done interrupt.  */

	/* Send the first character to jump-start the TX done

	 * IRQ sending engine.

 The port lock is held and interrupts are disabled.  */

 Disable all RX interrupts.  */

 The port lock is held.  */

 NOTE: Not subject to 'transmitter active' rule.  */

 The port lock is not held.  */

 NOTE: Not subject to 'transmitter active' rule.  */

 Let pending transmits finish.  */

 set master interrupt enable */

 Enable receiver and transmitter.  */

/*

 * The test for ZS_IS_CONS is explained by the following e-mail:

 *****

 * From: Russell King <rmk@arm.linux.org.uk>

 * Date: Sun, 8 Dec 2002 10:18:38 +0000

 *

 * On Sun, Dec 08, 2002 at 02:43:36AM -0500, Pete Zaitcev wrote:

 * > I boot my 2.5 boxes using "console=ttyS0,9600" argument,

 * > and I noticed that something is not right with reference

 * > counting in this case. It seems that when the console

 * > is open by kernel initially, this is not accounted

 * > as an open, and uart_startup is not called.

 *

 * That is correct.  We are unable to call uart_startup when the serial

 * console is initialised because it may need to allocate memory (as

 * request_irq does) and the memory allocators may not have been

 * initialised.

 *

 * 1. initialise the port into a state where it can send characters in the

 *    console write method.

 *

 * 2. don't do the actual hardware shutdown in your shutdown() method (but

 *    do the normal software shutdown - ie, free irqs etc)

 *****

 Disable receiver and transmitter.  */

 Disable all interrupts and BRK assertion.  */

/* Shared by TTY driver and serial console setup.  The port lock is held

 * and local interrupts are disabled.

 Program BAUD and clock source. */

 Character size, stop bits, and parity. */

 The port lock is not held.  */

/* We do not request/release mappings of the registers here, this

 * happens at early serial probe time.

 These do not need to do anything interesting either.  */

 We do not support letting the user mess with the divisor, IRQ, etc. */

 Get the address of the registers for IP22-Zilog instance CHIP.  */

 Not probe-able, hard code it. */

 10 ms */

	/* This is a timed polling loop so do not switch the explicit

	 * udelay with ZSDELAY as that is a NOP on some platforms.  -DaveM

 CONFIG_SERIAL_IP22_ZILOG_CONSOLE */

	/*

	 * Temporary fix.

 In theory mapbase is the physical address ...  */

 Channel A */

 Channel B */

 Normal serial TTY. */

 IP22 Zilog setup is hard coded, no probing to do.  */

 Free IO mem */

 David wrote it but I'm to blame for the bugs ...  */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2018 Socionext Inc.

 Set hard flow control */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+

/*

* ***************************************************************************

* Marvell Armada-3700 Serial Driver

* Author: Wilson Ding <dingwei@marvell.com>

* Copyright (C) 2015 Marvell International Ltd.

* ***************************************************************************

 Register Map */

 Either there is only one summed IRQ... */

 ...or there are two separate IRQ for RX and TX */

 Diverging register offsets */

 Diverging flags */

 Driver data, a structure for each UART port */

 Saved registers during suspend */

 MVEBU UART driver structure */

 CONFIG_PM */

 Core UART Driver Operations */

/*

 * Even if we do not support configuring the modem control lines, this

 * function must be proided to the serial core

 Clear the error bits of state register before IRQ request */

 Old bindings with just one interrupt (UART0 only) */

 New bindings with an IRQ for RX and TX (both UART) */

	/*

	 * The baudrate is derived from the UART clock thanks to two divisors:

	 *   > D ("baud generator"): can divide the clock from 2 to 2^10 - 1.

	 *   > M ("fractional divisor"): allows a better accuracy for

	 *     baudrates higher than 230400.

	 *

	 * As the derivation of M is rather complicated, the code sticks to its

	 * default value (x16) when all the prescalers are zeroed, and only

	 * makes use of D to configure the desired baudrate.

	/*

	 * Maximal divisor is 1023 * 16 when using default (x16) scheme.

	 * Maximum achievable frequency with simple baudrate divisor is 230400.

	 * Since the error per bit frame would be of more than 15%, achieving

	 * higher frequencies would require to implement the fractional divisor

	 * feature.

 No clock available, baudrate cannot be changed */

 Only the following flag changes are supported */

 Nothing to do here */

 Console Driver Operations  */

 Early Console */

 At early stage, DT is not parsed yet, only use UART0 */

 CONFIG_SERIAL_MVEBU_CONSOLE */

 CONFIG_PM */

 Counter to keep track of each UART port id when not using CONFIG_OF */

 Assume that all UART ports have a DT alias or none has */

	/*

	 * IRQ number is not stored in this structure because we may have two of

	 * them per port (RX and TX). Instead, use the driver UART structure

	 * array so called ->irq[].

 Get controller data depending on the compatible string */

 Get fixed clock frequency */

 Manage interrupts */

 Old bindings: no name on the single unamed UART0 IRQ */

		/*

		 * New bindings: named interrupts (RX, TX) for both UARTS,

		 * only make use of uart-rx and uart-tx interrupts, do not use

		 * uart-sum of UART0 port.

 UART Soft Reset*/

 Match table for of_platform binding */

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0

/*

 *  Based on meson_uart.c, by AMLOGIC, INC.

 *

 * Copyright (C) 2014 Carlo Caione <carlo@caione.org>

 Register offsets */

 AML_UART_CONTROL bits */

 AML_UART_STATUS bits */

 AML_UART_MISC bits */

 AML_UART_REG5 bits */

 It doesn't clear to 0 automatically */

/*

 * Console polling routines for writing and reading from the uart while

 * in an interrupt or debug context (i.e. kgdb).

 Wait until FIFO is empty or timeout */

 Write the character */

 Wait until FIFO is empty or timeout */

 CONFIG_CONSOLE_POLL */

 Legacy bindings, should be removed when no more used */

 Stable bindings */

/*

 * This function gets clocks in the legacy non-stable DT bindings.

 * This code will be remove once all the platforms switch to the

 * new DT bindings.

 Default is 64, 128 for EE UART_0 */

 Use legacy way until all platforms switch to new bindings */

 reset port before registering (and possibly registering console) */

 Legacy bindings, should be removed when no more used */

 Stable bindings */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for Comtrol RocketPort EXPRESS/INFINITY cards

 *

 * Copyright (C) 2012 Kevin Cernekee <cernekee@gmail.com>

 *

 * Inspired by, and loosely based on:

 *

 *   ar933x_uart.c

 *     Copyright (C) 2011 Gabor Juhos <juhosg@openwrt.org>

 *

 *   rocketport_infinity_express-linux-1.20.tar.gz

 *     Copyright (C) 2004-2011 Comtrol, Inc.

 BAR0 registers */

 BAR1 registers */

 port registers */

 This lets uart_insert_char() drop bytes received on a !CREAD port */

 ucode registers */

 sorry, no support for hot unplugging individual cards */

	/*

	 * This should probably check the transmitter, not the FIFO.

	 * But the TXEMPTY bit doesn't seem to work unless the TX IRQ is

	 * enabled.

 baud rate divisor (calculated elsewhere).  0 = divide-by-1 */

 data bits and stop bits */

 parity and hardware flow control */

 XON/XOFF software flow control */

 ignore all characters if CREAD is not set */

	/*

	 * The IRQ status bits are clear-on-write.  Other status bits in

	 * this register aren't, so it's harmless to write to them.

 Nothing to release ... */

 UARTs always present */

 TDM clock configuration */

 IRQ routing */

 RocketPort INFINITY cards */

 INF Octa, RJ45, selectable */

 INF 32, ext interface */

 INF Octa, ext interface */

 INF 16, ext interface */

 INF Quad, DB, selectable */

 INF Octa, DB, selectable */

 INF Quad, ext interface */

 INF Quad, RJ45 */

 INF Plus, Quad */

 INF Plus, Octa */

 INF III, Octa */

 INF III, Quad */

 INF Plus, 2, RS232 */

 INF Plus, 2, SMPTE */

 INF Plus, Quad, RJ45 */

 INF Plus, Octa, RJ45 */

 INF Octa, SMPTE */

 RocketPort EXPRESS cards */

 EXP Octa, RJ45, selectable */

 EXP 32, ext interface */

 EXP Octa, ext interface */

 EXP 16, ext interface */

 EXP Quad, DB, selectable */

 EXP Octa, DB, selectable */

 EXP Quad, ext interface */

 EXP Quad, RJ45 */

 EXP Octa, RJ11 */

 EXP Octa, SMPTE */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2017-2018, The Linux foundation. All rights reserved.

 UART specific GENI registers */

 SE_UART_TRANS_CFG */

 SE_UART_TX_WORD_LEN */

 SE_UART_TX_STOP_BIT_LEN */

 SE_UART_TX_TRANS_LEN */

 SE_UART_RX_TRANS_CFG */

 SE_UART_RX_WORD_LEN */

 SE_UART_RX_STALE_CNT */

 SE_UART_TX_PARITY_CFG/RX_PARITY_CFG */

 SE_UART_MANUAL_RFR register fields */

 UART M_CMD OP codes */

 UART S_CMD OP codes */

 SE_UART_LOOPBACK_CFG */

 UART pin swap value */

 We always configure 4 bytes per FIFO word */

 NOTE: earlycon port will have NULL here */

		/*

		 * Total polling iterations based on FIFO worth of bytes to be

		 * sent at current baud. Add a little fluff to the wait.

	/*

	 * Use custom implementation instead of readl_poll_atomic since ktimer

	 * is not ready at the time of early console.

			/*

			 * NOTE: If RX_LAST_BYTE_VALID is 0 it needs to be

			 * treated as if it was BYTES_PER_FIFO_WORD.

		/*

		 * uart_console_write() adds a carriage return for each newline.

		 * Account for additional bytes to be written.

		/*

		 * If the WM bit never set, then the Tx state machine is not

		 * in a valid state, so break, cancel/abort any existing

		 * command. Unfortunately the current data being written is

		 * lost.

 Cancel the current write to log the fault */

		/*

		 * It seems we can't interrupt existing transfers if all data

		 * has been sent, in which case we need to look for done first.

 CONFIG_SERIAL_QCOM_GENI_CONSOLE */

 Possible stop tx is called multiple times. */

 Possible stop rx is called multiple times. */

	/*

	 * If timeout occurs secondary engine remains active

	 * and Abort sequence is executed.

 Flush the Rx buffer */

 Complete the current tx command before taking newly added data */

 All data has been transmitted and acknowledged as received */

	/*

	 * The tx fifo watermark is level triggered and latched. Though we had

	 * cleared it in qcom_geni_serial_isr it will have already reasserted

	 * so we must clear it again here after our writes.

 Configure this register if RX-TX, CTS-RTS pins are swapped */

	/*

	 * Make an unconditional cancel on the main sequencer to reset

	 * it else we could end up in data loss scenarios.

 baud rate */

 Sampling rate is halved for IP versions >= 2.5 */

	/*

	 * Bump up BW vote on CPU and CORE path as driver supports FIFO mode

	 * only.

 parity */

 bits per char */

 stop bits */

 flow control, clear the CTS_MASK bit if using flow control. */

 Disable Tx Parity */

 Disable Rx Parity */

 Default stop bit length - 1 bit */

	/*

	 * Ignore Flow control.

	 * n = 8.

	/*

	 * Make an unconditional cancel on the main sequencer to reset

	 * it else we could end up in data loss scenarios.

 CONFIG_SERIAL_QCOM_GENI_CONSOLE */

 If we've never been called, treat it as off */

 compat with non-standard aliases */

 Don't allow 2 drivers to access the same port */

 Set BW for register access */

 OPP table is optional */

	/*

	 * Set pm_runtime status as ACTIVE so that wakeup_irq gets

	 * enabled/disabled from dev_pm_arm_wake_irq during system

	 * suspend/resume respectively.

	/*

	 * This is done so we can hit the lowest possible state in suspend

	 * even with no_console_suspend

 SPDX-License-Identifier: GPL-2.0+

/*

 * SC16IS7xx tty serial driver - Copyright (C) 2014 GridPoint

 * Author: Jon Ringle <jringle@gridpoint.com>

 *

 *  Based on max310x.c, by Alexander Shiyan <shc_work@mail.ru>

 SC16IS7XX register definitions */

 RX FIFO */

 TX FIFO */

 Interrupt enable */

 Interrupt Identification */

 FIFO control */

 Line Control */

 Modem Control */

 Line Status */

 Modem Status */

 Scratch Pad */

 TX FIFO level */

 RX FIFO level */

#define SC16IS7XX_IODIR_REG		(0x0a) /* I/O Direction

						* - only on 75x/76x

#define SC16IS7XX_IOSTATE_REG		(0x0b) /* I/O State

						* - only on 75x/76x

#define SC16IS7XX_IOINTENA_REG		(0x0c) /* I/O Interrupt Enable

						* - only on 75x/76x

#define SC16IS7XX_IOCONTROL_REG		(0x0e) /* I/O Control

						* - only on 75x/76x

 Extra Features Control */

 TCR/TLR Register set: Only if ((MCR[2] == 1) && (EFR[4] == 1)) */

 Transmit control */

 Trigger level */

 Special Register set: Only if ((LCR[7] == 1) && (LCR != 0xBF)) */

 Divisor Latch Low */

 Divisor Latch High */

 Enhanced Register set: Only if (LCR == 0xBF) */

 Enhanced Features */

 Xon1 word */

 Xon2 word */

 Xoff1 word */

 Xoff2 word */

 IER register bits */

 Enable RX data interrupt */

#define SC16IS7XX_IER_THRI_BIT		(1 << 1) /* Enable TX holding register

#define SC16IS7XX_IER_RLSI_BIT		(1 << 2) /* Enable RX line status

#define SC16IS7XX_IER_MSI_BIT		(1 << 3) /* Enable Modem status

 IER register bits - write only if (EFR[4] == 1) */

 Enable Sleep mode */

 Enable Xoff interrupt */

 Enable nRTS interrupt */

 Enable nCTS interrupt */

 FCR register bits */

 Enable FIFO */

 Reset RX FIFO */

 Reset TX FIFO */

 RX Trigger level LSB */

 RX Trigger level MSB */

 FCR register bits - write only if (EFR[4] == 1) */

 TX Trigger level LSB */

 TX Trigger level MSB */

 IIR register bits */

 No interrupts pending */

 Mask for the interrupt ID */

 TX holding register empty */

 RX data interrupt */

 RX line status error */

 RX time-out interrupt */

#define SC16IS7XX_IIR_MSI_SRC		0x00     /* Modem status interrupt

						  * - only on 75x/76x

#define SC16IS7XX_IIR_INPIN_SRC		0x30     /* Input pin change of state

						  * - only on 75x/76x

 Received Xoff */

#define SC16IS7XX_IIR_CTSRTS_SRC	0x20     /* nCTS,nRTS change of state

						  * from active (LOW)

						  * to inactive (HIGH)

 LCR register bits */

 Word length bit 0 */

#define SC16IS7XX_LCR_LENGTH1_BIT	(1 << 1) /* Word length bit 1

						  *

						  * Word length bits table:

						  * 00 -> 5 bit words

						  * 01 -> 6 bit words

						  * 10 -> 7 bit words

						  * 11 -> 8 bit words

#define SC16IS7XX_LCR_STOPLEN_BIT	(1 << 2) /* STOP length bit

						  *

						  * STOP length bit table:

						  * 0 -> 1 stop bit

						  * 1 -> 1-1.5 stop bits if

						  *      word length is 5,

						  *      2 stop bits otherwise

 Parity bit enable */

 Even parity bit enable */

 9-bit multidrop parity */

 TX break enable */

 Divisor Latch enable */

#define SC16IS7XX_LCR_CONF_MODE_A	SC16IS7XX_LCR_DLAB_BIT /* Special

#define SC16IS7XX_LCR_CONF_MODE_B	0xBF                   /* Enhanced

 MCR register bits */

#define SC16IS7XX_MCR_DTR_BIT		(1 << 0) /* DTR complement

						  * - only on 75x/76x

 RTS complement */

 TCR/TLR register enable */

 Enable loopback test mode */

#define SC16IS7XX_MCR_XONANY_BIT	(1 << 5) /* Enable Xon Any

						  * - write enabled

						  * if (EFR[4] == 1)

#define SC16IS7XX_MCR_IRDA_BIT		(1 << 6) /* Enable IrDA mode

						  * - write enabled

						  * if (EFR[4] == 1)

#define SC16IS7XX_MCR_CLKSEL_BIT	(1 << 7) /* Divide clock by 4

						  * - write enabled

						  * if (EFR[4] == 1)

 LSR register bits */

 Receiver data ready */

 Overrun Error */

 Parity Error */

 Frame Error */

 Break Interrupt */

 BI, FE, PE, OE bits */

 TX holding register empty */

 Transmitter empty */

 Fifo Error */

 MSR register bits */

 Delta CTS Clear To Send */

#define SC16IS7XX_MSR_DDSR_BIT		(1 << 1) /* Delta DSR Data Set Ready

						  * or (IO4)

						  * - only on 75x/76x

#define SC16IS7XX_MSR_DRI_BIT		(1 << 2) /* Delta RI Ring Indicator

						  * or (IO7)

						  * - only on 75x/76x

#define SC16IS7XX_MSR_DCD_BIT		(1 << 3) /* Delta CD Carrier Detect

						  * or (IO6)

						  * - only on 75x/76x

 CTS */

#define SC16IS7XX_MSR_DSR_BIT		(1 << 5) /* DSR (IO4)

						  * - only on 75x/76x

#define SC16IS7XX_MSR_RI_BIT		(1 << 6) /* RI (IO7)

						  * - only on 75x/76x

#define SC16IS7XX_MSR_CD_BIT		(1 << 7) /* CD (IO6)

						  * - only on 75x/76x

 Any of the delta bits! */

/*

 * TCR register bits

 * TCR trigger levels are available from 0 to 60 characters with a granularity

 * of four.

 * The programmer must program the TCR such that TCR[3:0] > TCR[7:4]. There is

 * no built-in hardware check to make sure this condition is met. Also, the TCR

 * must be programmed with this condition before auto RTS or software flow

 * control is enabled to avoid spurious operation of the device.

/*

 * TLR register bits

 * If TLR[3:0] or TLR[7:4] are logical 0, the selectable trigger levels via the

 * FIFO Control Register (FCR) are used for the transmit and receive FIFO

 * trigger levels. Trigger levels from 4 characters to 60 characters are

 * available with a granularity of four.

 *

 * When the trigger level setting in TLR is zero, the SC16IS740/750/760 uses the

 * trigger level setting defined in FCR. If TLR has non-zero trigger level value

 * the trigger level defined in FCR is discarded. This applies to both transmit

 * FIFO and receive FIFO trigger level setting.

 *

 * When TLR is used for RX trigger level control, FCR[7:6] should be left at the

 * default state, that is, '00'.

 IOControl register bits (Only 750/760) */

 Enable input latching */

 Enable GPIO[7:4] as modem pins */

 Software Reset */

 EFCR register bits */

#define SC16IS7XX_EFCR_9BIT_MODE_BIT	(1 << 0) /* Enable 9-bit or Multidrop

 Disable receiver */

 Disable transmitter */

 Auto RS485 RTS direction */

 RTS output inversion */

#define SC16IS7XX_EFCR_IRDA_MODE_BIT	(1 << 7) /* IrDA mode

						  * 0 = rate upto 115.2 kbit/s

						  *   - Only 750/760

						  * 1 = rate upto 1.152 Mbit/s

						  *   - Only 760

 EFR register bits */

 Auto RTS flow ctrl enable */

 Auto CTS flow ctrl enable */

 Enable Xoff2 detection */

#define SC16IS7XX_EFR_ENABLE_BIT	(1 << 4) /* Enable enhanced functions

						  * and writing to IER[7:4],

						  * FCR[5:4], MCR[7:5]

 SWFLOW bit 3 */

#define SC16IS7XX_EFR_SWFLOW2_BIT	(1 << 2) /* SWFLOW bit 2

						  *

						  * SWFLOW bits 3 & 2 table:

						  * 00 -> no transmitter flow

						  *       control

						  * 01 -> transmitter generates

						  *       XON2 and XOFF2

						  * 10 -> transmitter generates

						  *       XON1 and XOFF1

						  * 11 -> transmitter generates

						  *       XON1, XON2, XOFF1 and

						  *       XOFF2

 SWFLOW bit 2 */

#define SC16IS7XX_EFR_SWFLOW0_BIT	(1 << 0) /* SWFLOW bit 3

						  *

						  * SWFLOW bits 3 & 2 table:

						  * 00 -> no received flow

						  *       control

						  * 01 -> receiver compares

						  *       XON2 and XOFF2

						  * 10 -> receiver compares

						  *       XON1 and XOFF1

						  * 11 -> receiver compares

						  *       XON1, XON2, XOFF1 and

						  *       XOFF2

 Misc definitions */

	/*

	 * Don't send zero-length data, at least on SPI it confuses the chip

	 * delivering wrong TXLVL data.

	/* In an amazing feat of design, the Enhanced Features Register shares

	 * the address of the Interrupt Identification Register, and is

	 * switched in by writing a magic value (0xbf) to the Line Control

	 * Register. Any interrupt firing during this time will see the EFR

	 * where it expects the IIR to be, leading to "Unexpected interrupt"

	 * messages.

	 *

	 * Prevent this possibility by claiming a mutex while accessing the

	 * EFR, and claiming the same mutex from within the interrupt handler.

	 * This is similar to disabling the interrupt, but that doesn't work

	 * because the bulk of the interrupt processing is run as a workqueue

	 * job in thread context.

 Open the LCR divisors for configuration */

 Enable enhanced features */

 Put LCR back to the normal mode */

 Open the LCR divisors for configuration */

 Write the new divisor */

 Put LCR back to the normal mode */

 Ensure sanity of RX level */

 Only read lsr if there are possible errors in FIFO */

 No errors left in FIFO */

 Get length of data pending in circular buffer */

 Limit to size of TX FIFO */

 Add data to send */

 Convert to linear buffer */

	/* DCD and DSR are not wired and CTS/RTS is handled automatically

	 * so just indicate DSR and CAR asserted

 Mask termios capabilities we don't support */

 Word size */

 Parity */

 Stop bits */

 2 stops */

 Set read status mask */

 Set status ignore mask */

 As above, claim the mutex while accessing the EFR. */

 Configure flow control */

 Update LCR register */

 Get baud rate generator configuration */

 Setup baudrate generator */

 Update timeout according to new baud rate */

		/*

		 * RTS signal is handled by HW, it's timing can't be influenced.

		 * However, it's sometimes useful to delay TX even without RTS

		 * control therefore we try to handle .delay_rts_before_send.

 Reset FIFOs*/

 Enable EFR */

 Enable write access to enhanced features and internal clock div */

 Enable TCR/TLR */

 Configure flow control levels */

 Flow control halt level 48, resume level 24 */

 Now, initialize the UART */

 Enable IrDA mode if requested in DT */

 This bit must be written with LCR[7] = 0 */

 Enable the Rx and Tx FIFO */

 Enable RX, TX interrupts */

 Disable all interrupts */

 Disable TX/RX */

 Do nothing */

 Do nothing */

	/*

	 * This device does not have an identification register that would

	 * tell us if we are really connected to the correct device.

	 * The best we can do is to check if communication is at all possible.

 Alloc port structure */

 Always ask for fixed clock rate from a property. */

 Setup GPIO cotroller */

 reset device, purging any pending irq / data */

 Initialize port data */

 Disable all interrupts */

 Disable TX/RX */

 Initialize kthread work structs */

 Register port */

 Enable EFR */

 Enable write access to enhanced features */

 Restore access to general registers */

 Go to suspend mode */

	/*

	 * Setup interrupt. We first try to acquire the IRQ line as level IRQ.

	 * If that succeeds, we can allow sharing the interrupt as well.

	 * In case the interrupt controller doesn't support that, we fall

	 * back to a non-shared falling-edge trigger.

 Setup SPI bus */

 only supports mode 0 on SC16IS762 */

 SPDX-License-Identifier: GPL-2.0

/*

 * SuperH on-chip serial module support.  (SCI with no FIFO / with FIFO)

 *

 *  Copyright (C) 2002 - 2011  Paul Mundt

 *  Copyright (C) 2015 Glider bvba

 *  Modified to support SH7720 SCIF. Markus Brunner, Mark Jonas (Jul 2007).

 *

 * based off of the old drivers/char/sh-sci.c by:

 *

 *   Copyright (C) 1999, 2000  Niibe Yutaka

 *   Copyright (C) 2000  Sugioka Toshinobu

 *   Modified to support multiple serial ports. Stuart Menefy (May 2000).

 *   Modified to support SecureEdge. David McCullough (2002)

 *   Modified to support SH7300 SCIF. Takashi Kusuda (Jun 2003).

 *   Removed SH7300 support (Jul 2007).

 Offsets into the sci_port->irqs array */

 special case */

 Functional Clock */

 Optional External Clock */

 Optional BRG Internal Clock Source */

 Optional BRG External Clock Source */

 Bit x set means sampling rate x + 1 is supported */

 Iterate over all supported sampling rates, from high to low */

 Platform configuration */

 Clocks */

 microseconds */

	/*

	 * Common SCI definitions, dependent on the port's regshift

	 * value.

	/*

	 * Common definitions for legacy IrDA ports.

	/*

	 * Common SCIFA definitions.

	/*

	 * Common SCIFB definitions.

	/*

	 * Common SH-2(A) SCIF definitions for ports with FIFO data

	 * count registers.

	/*

	 * The "SCIFA" that is in RZ/A2, RZ/G2L and RZ/T.

	 * It looks like a normal SCIF with FIFO data, but with a

	 * compressed address space. Also, the break out of interrupts

	 * are different: ERI/BRI, RXI, TXI, TEI, DRI.

	/*

	 * Common SH-3 SCIF definitions.

	/*

	 * Common SH-4(A) SCIF(B) definitions.

	/*

	 * Common SCIF definitions for ports with a Baud Rate Generator for

	 * External Clock (BRG).

	/*

	 * Common HSCIF definitions.

	/*

	 * Common SH-4(A) SCIF(B) definitions for ports without an SCSPTR

	 * register.

	/*

	 * Common SH-4(A) SCIF(B) definitions for ports with FIFO data

	 * count registers.

 aliased to SCFDR */

	/*

	 * SH7705-style SCIF(B) ports, lacking both SCSPTR and SCLSR

	 * registers.

/*

 * The "offset" here is rather misleading, in that it refers to an enum

 * value relative to the port mapping rather than the fixed offset

 * itself, which needs to be manually retrieved from the platform's

 * register map for the given port.

	/*

	 * Not all ports (such as SCIFA) will support REIE. Rather than

	 * special-casing the port type, we check the port initialization

	 * IRQ enable mask to see whether the IRQ is desired at all. If

	 * it's unset, it's logically inferred that there's no point in

	 * testing for it.

 Set TIE (Transmit Interrupt Enable) bit in SCSCR */

 Clear TIE (Transmit Interrupt Enable) bit in SCSCR */

 Just store the mask */

 SCIFA/SCIFB and SCIF on SH7705/SH7720/SH7721 */

 Only clear the status bits we want to clear */

 Store the mask, clear parity/framing errors */

 Dummy read */

#endif /* CONFIG_CONSOLE_POLL || CONFIG_SERIAL_SH_SCI_CONSOLE ||

	/*

	 * Use port-specific handler if provided.

 Enable RXD and TXD pin functions */

 RTS# is output, active low, unless autorts */

 Enable RTS# pin function */

 Enable CTS# pin function */

 RTS# is always output; and active low, unless autorts */

 CTS# and SCK are inputs */

/* ********************************************************************** *

 *                   the interrupt related routines                       *

 Don't copy more bytes than there is room for in the buffer */

 If for any reason we can't copy more data, we're done! */

 Store data and status */

 dummy read */

 Tell the rest of the system the news. New characters! */

 TTY buffers full; read from RX reg to prevent lockup */

 dummy read */

 Handle overruns */

 overrun error */

 frame error */

 parity error */

 Notify of BREAK */

 HSCIF can be set to an arbitrary level. */

 Locking: called with port lock held */

 Direct new serial port interrupts back to CPU */

 Switch to PIO */

 Switch to PIO */

	/*

	 * DMA is idle now.

	 * Port xmit buffer is already mapped, and it is one page... Just adjust

	 * offsets and lengths. Since it is a circular buffer, we have to

	 * transmit till the end, and then the rest. Take the port lock to get a

	 * consistent xmit buffer state.

 Transmit buffer has been flushed */

 Let packet complete handler take care of the packet */

	/*

	 * sometimes DMA transfer doesn't stop even if it is stopped and

	 * data keeps on coming until transaction is complete so check

	 * for DMA_COMPLETE again

	 * Let packet complete handler take care of the packet

 Handle incomplete DMA receive */

	/*

	 * DMA on console may interfere with Kernel log messages which use

	 * plain putchar(). So, simply don't use it with a console.

	/*

	 * Don't request a dma channel if no channel was specified

	 * in the device tree.

 UART circular tx buffer is an aligned page. */

	/*

	 * In uart_flush_buffer(), the xmit circular buffer has just been

	 * cleared, so we have to reset tx_dma_len accordingly, and stop any

	 * pending transfers

 !CONFIG_SERIAL_SH_SCI_DMA */

 !CONFIG_SERIAL_SH_SCI_DMA */

 Disable future Rx interrupts */

 Clear current interrupt */

	/* I think sci_receive_chars has to be called irrespective

	 * of whether the I_IXOFF is set, otherwise, how is the interrupt

	 * to be disabled?

 Handle BREAKs */

 drop invalid character received before break was detected */

 Break and Error interrupts are muxed */

 Break Interrupt */

 Break only? */

 Handle errors */

 discard character in rx buffer */

 Kick the transmission */

 Tx Interrupt */

	/*

	 * Rx Interrupt: if we're using DMA, the DMA controller clears RDF /

	 * DR flags

 Error Interrupt */

 Break Interrupt */

 Overrun Interrupt */

	/*

	 * Split out handlers, the default case.

	/*

	 * Special muxed handler.

 Check if already registered (muxed) */

			/*

			 * Certain port types won't support all of the

			 * available interrupt sources.

	/*

	 * Intentionally in reverse order so we iterate over the muxed

	 * IRQ first.

		/*

		 * Certain port types won't support all of the available

		 * interrupt sources.

 Check if already freed (irq was muxed) */

 If there's only one IRQ, we're done. */

 Active low */

 RTS# is output */

 Active low */

 Active low */

 Active low */

/*

 * Modem control is a bit of a mixed bag for SCI(F) ports. Generally

 * CTS/RTS is supported in hardware by at least one port and controlled

 * via SCSPTR (SCxPCR for SCIFA/B parts), or external pins (presently

 * handled via the ->init_pins() op, which is a bit of a one-way street,

 * lacking any ability to defer pin control -- this will later be

 * converted over to the GPIO framework).

 *

 * Other modes (such as loopback) are supported generically on certain

 * port types, but not others. For these it's sufficient to test for the

 * existence of the support register and simply ignore the port type.

		/*

		 * Standard loopback mode for SCFCR ports.

 Disable Auto RTS */

 Clear RTS */

 Enable RTS# pin function */

 Enable Auto RTS */

 Set RTS */

	/*

	 * CTS/RTS is handled in hardware when supported, while nothing

	 * else is wired up.

 check whether the port has SCSPTR */

		/*

		 * Not supported by hardware. Most parts couple break and rx

		 * interrupts together, with break detection always enabled.

	/*

	 * Stop RX and TX, disable related interrupts, keep clock source

	 * and HSCIF TOT bits

 calculate sample rate, BRR, and clock select */

	/*

	 * Find the combination of sample rate and clock select with the

	 * smallest deviation from the desired baud rate.

	 * Prefer high sample rates to maximise the receive margin.

	 *

	 * M: Receive margin (%)

	 * N: Ratio of bit rate to clock (N = sampling rate)

	 * D: Clock duty (D = 0 to 1.0)

	 * L: Frame length (L = 9 to 12)

	 * F: Absolute value of clock frequency deviation

	 *

	 *  M = |(0.5 - 1 / 2 * N) - ((L - 0.5) * F) -

	 *      (|D - 0.5| / N * (1 + F))|

	 *  NOTE: Usually, treat D for 0.5, F is 0 by this calculation.

 integerized formulas from HSCIF documentation */

			/*

			 * We need to calculate:

			 *

			 *     br = freq / (prediv * bps) clamped to [1..256]

			 *     err = freq / (br * prediv) - bps

			 *

			 * Watch out for overflow when calculating the desired

			 * sampling clock rate!

 TE=0, RE=0, CKE1=0 */

	/*

	 * earlyprintk comes here early on with port->uartclk set to zero.

	 * the clock framework is not up and running at this point so here

	 * we assume that 115200 is the maximum baud rate. please note that

	 * the baud rate is not programmed during earlyprintk - it is assumed

	 * that the previous boot loader has enabled required clocks and

	 * setup the baud rate generator hardware for us already.

	/*

	 * There can be multiple sources for the sampling clock.  Find the one

	 * that gives us the smallest deviation from the desired baud rate.

 Optional Undivided External Clock */

 Optional BRG Frequency Divided External Clock */

 Optional BRG Frequency Divided Internal Clock */

 Divided Functional Clock using standard Bit Rate Register */

	/*

	 * Program the optional External Baud Rate Generator (BRG) first.

	 * It controls the mux to select (H)SCK or frequency divided clock.

 byte size and parity */

			/* Calculate deviation from intended rate at the

			 * center of the last stop bit in sampling clocks.

				/* At least two sampling clocks off at the

				 * last stop bit; we can increase the error

				 * margin by shifting the sampling point.

 Wait one bit interval */

 Don't touch the bit rate configuration */

 There is no CTS interrupt to restart the hardware */

 MCE is enabled when RTS is raised */

		/*

		 * As we've done a sci_reset() above, ensure we don't

		 * interfere with the FIFOs while toggling MCE. As the

		 * reset values could still be set, simply mask them out.

 Refresh (Auto) RTS */

		/*

		 * In asynchronous mode, when the sampling rate is 1/5, first

		 * received data may become invalid on some SCIFA and SCIFB.

		 * To avoid this problem wait more than 1 serial data time (1

		 * bit time x serial data number) after setting SCSCR.RE = 1.

 Calculate delay for 2 DMA buffers (4 FIFO). */

	/*

	 * Nothing to do if there's already an established membase.

		/*

		 * For the simple (and majority of) cases where we don't

		 * need to do any remapping, just cast the cookie

		 * directly.

 No paper tape reader for Mitch.. */

			/*

			 * "fck" used to be called "sci_ick", and we need to

			 * maintain DT backward compatibility.

			/*

			 * Not all SH platforms declare a clock lookup entry

			 * for SCI devices, in which case we need to get the

			 * global "peripheral_clk" clock.

		/*

		 * The SH-4 is a bit of a misnomer here, although that's

		 * where this particular port layout originated. This

		 * configuration (or some slight variation thereof)

		 * remains the dominant model for all SCIFs.

	/* The SCI generates several interrupts. They can be muxed together or

	 * connected to different interrupt lines. In the muxed case only one

	 * interrupt resource is specified as there is only one interrupt ID.

	 * In the non-muxed case, up to 6 interrupt signals might be generated

	 * from the SCI, however those signals might have their own individual

	 * interrupt ID numbers, or muxed together with another interrupt.

 RX triggering not implemented for this IP */

	/* SCIFA on sh7723 and sh7724 need a custom sampling rate that doesn't

	 * match the SoC datasheet, this should be investigated. Let platform

	 * data override the sampling rate for now.

	/*

	 * The UART port needs an IRQ value, so we peg this to the RX IRQ

	 * for the multi-IRQ ports, which is where we are primarily

	 * concerned with the shutdown path synchronization.

	 *

	 * For the muxed case there's nothing more to do.

/*

 *	Print a string to the serial port trying not to disturb

 *	any possible real use of the port...

 first save SCSCR then disable interrupts, keep clock source */

 wait until fifo is empty and last bit has been transmitted */

 restore the SCSCR */

	/*

	 * Refuse to handle any bogus ports.

	/*

	 * Refuse to handle uninitialized ports.

 CONFIG_SERIAL_SH_SCI_CONSOLE || CONFIG_SERIAL_SH_SCI_EARLYCON */

 uart_remove_... clears it */

 SoC-specific types */

 Family-specific types */

 Generic types */

 Terminator */

 Get the line number from the aliases node. */

 Sanity check */

	/*

	 * If we've come here via earlyprintk initialization, head off to

	 * the special early probe. We don't have sufficient device state

	 * to make it beyond this yet.

 CONFIG_SERIAL_SH_SCI_EARLYCON */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  NXP (Philips) SCC+++(SCN+++) serial driver

 *

 *  Copyright (C) 2012 Alexander Shiyan <shc_work@mail.ru>

 *

 *  Based on sc26xx.c, by Thomas Bogend√∂rfer (tsbogend@alpha.franken.de)

 Route helpers */

 Time between read/write cycles */

 Find divisor to load to the timer preset registers */

 Issue start timer/counter command */

 Find best baud from table */

 Enable FIFO, set half level for TX */

 Update MR0 */

 Disable TX if FIFO is empty */

 Set direction to input */

 Set direction to output */

 Do nothing */

 Mask termios capabilities we don't support */

 Disable RX & TX, reset break condition, status and FIFOs */

 Word size */

 Parity */

 Stop bits */

 Update desired format */

 Set read status mask */

 Set status ignore mask */

 Setup baudrate */

 Update timeout according to new baud rate */

 Report actual baudrate back to core */

 Enable RX & TX */

 Outputs are controlled manually */

 Reset break condition, status and FIFOs */

 Enable RX & TX */

 Enable RX interrupt */

 Disable interrupts */

 Disable TX & RX */

 Leave direction to input */

 Do nothing */

 Do nothing */

 Check input frequency */

 Set direction to input */

 Disable interrupts */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Based on drivers/serial/8250.c by Russell King.

 *

 *  Author:	Nicolas Pitre

 *  Created:	Feb 20, 2003

 *  Copyright:	(C) 2003 Monta Vista Software, Inc.

 *

 * Note 1: This driver is made separate from the already too overloaded

 * 8250.c because it needs some kirks of its own and that'll make it

 * easier to add DMA support.

 *

 * Note 2: I'm too sick of device allocation policies for serial ports.

 * If someone else wants to request an "official" allocation of major/minor

 * for this driver please be my guest.  And don't forget that new hardware

 * to come from Intel might have more than 3 or 4 of those UARTs.  Let's

 * hope for a better port registration and dynamic device allocation scheme

 * with the serial core maintainer satisfaction to appear soon.

		/* work around Errata #20 according to

		 * Intel(R) PXA27x Processor Family

		 * Specification Update (May 2005)

		 *

		 * Step 2

		 * Disable the Reciever Time Out Interrupt via IER[RTOEI]

			/*

			 * For statistics only

				/*

				 * We do the SysRQ and SAK checking

				 * here because otherwise the break

				 * may get masked by ignore_status_mask

				 * or read_status_mask.

			/*

			 * Mask off conditions which should be ignored.

 Recover the break flag from console xmit */

	/* work around Errata #20 according to

	 * Intel(R) PXA27x Processor Family

	 * Specification Update (May 2005)

	 *

	 * Step 6:

	 * No more data in FIFO: Re-enable RTO interrupt via IER[RTOIE]

 should hold up->port.lock */

/*

 * This handles the interrupt from one port.

 HWUART */

	/*

	 * Allocate the IRQ

	/*

	 * Clear the FIFO buffers and disable them.

	 * (they will be reenabled in set_termios())

	/*

	 * Clear the interrupt registers.

	/*

	 * Now, initialize the UART

	/*

	 * Finally, enable interrupts.  Note: Modem status interrupts

	 * are set via set_termios(), which will be occurring imminently

	 * anyway, so we don't enable them here.

	/*

	 * And clear the interrupt registers again for luck.

	/*

	 * Disable interrupts from this port

	/*

	 * Disable break condition and FIFOs

	/*

	 * Ask the core to calculate the divisor for us.

	/*

	 * Ok, we're now changing the port state.  Do it with

	 * interrupts disabled.

	/*

	 * Ensure the port will be enabled.

	 * This is required especially for serial console.

	/*

	 * Update the per-port timeout.

	/*

	 * Characters to ignore

		/*

		 * If we're ignoring parity and break indicators,

		 * ignore overruns too (for real raw support).

	/*

	 * ignore all characters if CREAD is not set

	/*

	 * CTS flow control flag and modem status interrupts

 set DLAB */

 LS of divisor */

	/*

	 * work around Errata #75 according to Intel(R) PXA27x Processor Family

	 * Specification Update (Nov 2005)

 MS of divisor */

 reset DLAB */

 Save LCR */

 we don't want the core code to modify any port params */

/*

 *	Wait for transmitter & holding register to empty

 Wait up to 10ms for the character(s) to be sent. */

 Wait up to 1s for flow control if necessary */

/*

 * Print a string to the serial port trying not to disturb

 * any possible real use of the port...

 *

 *	The console_lock must be held when we get here.

	/*

	 *	First save the IER then disable the interrupts

	/*

	 *	Finally, wait for transmitter to become empty

	 *	and restore the IER

/*

 * Console polling routines for writing and reading from the uart while

 * in an interrupt or debug context.

	/*

	 *	First save the IER then disable the interrupts

	/*

	 *	Send the character out.

	/*

	 *	Finally, wait for transmitter to become empty

	 *	and restore the IER

 CONFIG_CONSOLE_POLL */

 8250 driver for PXA serial ports should be used */

 SPDX-License-Identifier: GPL-2.0+

/*

 * High Speed Serial Ports on NXP LPC32xx SoC

 *

 * Authors: Kevin Wells <kevin.wells@nxp.com>

 *          Roland Stigge <stigge@antcom.de>

 *

 * Copyright (C) 2010 NXP Semiconductors

 * Copyright (C) 2012 Roland Stigge

/*

 * High Speed UART register offsets

 get out of loopback mode */

 Find the closest divider to get the desired clock rate */

 Tweak divider */

 Read data from FIFO and push into terminal */

 Framing error */

 Transfer data */

 Read UART status and clear latched interrupts */

 Break received */

 Framing error */

 Receive FIFO overrun */

 Data received? */

 Transmit data request? */

 port->lock is not held.  */

 port->lock held by caller.  */

 No signals are supported on HS UARTs */

 port->lock is held by caller and interrupts are disabled.  */

 No signals are supported on HS UARTs */

 port->lock held by caller.  */

 port->lock held by caller.  */

 port->lock held by caller.  */

 port->lock is not held.  */

 port->lock is not held.  */

	/*

	 * Set receiver timeout, HSU offset of 20, no break, no interrupts,

	 * and default FIFO trigger levels

 get out of loopback mode */

 port->lock is not held.  */

 go to loopback mode */

 port->lock is not held.  */

 Always 8-bit, no parity, 1 stop bit */

 Ignore characters? */

 Don't rewrite B0 */

	/* Set receiver timeout, HSU offset of 20, no break, no interrupts,

/*

 * Register a set of serial devices attached to a platform device

 send port to loopback mode by default */

/*

 * Remove serial ports registered against a platform device.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Driver for AMBA serial ports

 *

 *  Based on drivers/char/serial.c, by Linus Torvalds, Theodore Ts'o.

 *

 *  Copyright 1999 ARM Limited

 *  Copyright (C) 2000 Deep Blue Solutions Ltd.

 *  Copyright (C) 2010 ST-Ericsson SA

 *

 * This is a generic driver for ARM AMBA-type serial ports.  They

 * have a lot of 16550-like features, but are not register compatible.

 * Note that although they do have CTS, DCD and DSR inputs, they do

 * not have an RI input, nor do they have DTR or RTS outputs.  If

 * required, these have to be supplied via some other means (eg, GPIO)

 * and hooked into this driver.

 There is by now at least one vendor with differing details, so handle it */

 Deals with DMA transactions */

/*

 * We wrap our port structure around the generic uart_port.

 dma control reg */

 interrupt mask */

 vendor-specific */

 state during shutdown */

 vendor-set fixed baud rate */

 usecs */

 DMA stuff */

/*

 * Reads up to 256 characters from the FIFO or until it's empty and

 * inserts them into the TTY layer. Returns the number of characters

 * read from the FIFO.

 Take chars from the FIFO and update status */

/*

 * All the DMA operation mode stuff goes inside this ifdef.

 * This assumes that you have a generic DMA device interface,

 * no custom DMA interfaces are supported.

 DMA is the sole user of the platform data right now */

 We need platform data */

 Try to acquire a generic DMA engine slave TX channel */

 Optionally make use of an RX channel as well */

		/*

		 * Some DMA controllers provide information on their capabilities.

		 * If the controller does, check for suitable residue processing

		 * otherwise assime all is well.

 Set poll rate if specified. */

				/*

				 * 100 ms defaults to poll rate if not

				 * specified. This will be adjusted with

				 * the baud rate at set_termios.

 3 secs defaults poll_timeout if not specified. */

 Forward declare these for the refill routine */

/*

 * The current DMA TX buffer has been sent.

 * Try to queue up another DMA buffer.

	/*

	 * If TX DMA was disabled, it means that we've stopped the DMA for

	 * some reason (eg, XOFF received, or we want to send an X-char.)

	 *

	 * Note: we need to be careful here of a potential race between DMA

	 * and the rest of the driver - if the driver disables TX DMA while

	 * a TX buffer completing, we must update the tx queued status to

	 * get further refills (hence we check dmacr).

		/*

		 * We didn't queue a DMA buffer for some reason, but we

		 * have data pending to be sent.  Re-enable the TX IRQ.

/*

 * Try to refill the TX DMA buffer.

 * Locking: called with port lock held and IRQs disabled.

 * Returns:

 *   1 if we queued up a TX DMA buffer.

 *   0 if we didn't want to handle this by DMA

 *  <0 on error

	/*

	 * Try to avoid the overhead involved in using DMA if the

	 * transaction fits in the first half of the FIFO, by using

	 * the standard interrupt handling.  This ensures that we

	 * issue a uart_write_wakeup() at the appropriate time.

	/*

	 * Bodge: don't send the last character by DMA, as this

	 * will prevent XON from notifying us to restart DMA.

 Else proceed to copy the TX chars to the DMA buffer and fire DMA */

		/*

		 * If DMA cannot be used right now, we complete this

		 * transaction via IRQ and let the TTY layer retry.

 Some data to go along to the callback */

 All errors should happen at prepare time */

 Fire the DMA transaction */

	/*

	 * Now we know that DMA will fire, so advance the ring buffer

	 * with the stuff we just dispatched.

/*

 * We received a transmit interrupt without a pending X-char but with

 * pending characters.

 * Locking: called with port lock held and IRQs disabled.

 * Returns:

 *   false if we want to use PIO to transmit

 *   true if we queued a DMA buffer

	/*

	 * If we already have a TX buffer queued, but received a

	 * TX interrupt, it will be because we've just sent an X-char.

	 * Ensure the TX DMA is enabled and the TX IRQ is disabled.

	/*

	 * We don't have a TX buffer queued, so try to queue one.

	 * If we successfully queued a buffer, mask the TX IRQ.

/*

 * Stop the DMA transmit (eg, due to received XOFF).

 * Locking: called with port lock held and IRQs disabled.

/*

 * Try to start a DMA transmit, or in the case of an XON/OFF

 * character queued for send, try to get that character out ASAP.

 * Locking: called with port lock held and IRQs disabled.

 * Returns:

 *   false if we want the TX IRQ to be enabled

 *   true if we have a buffer queued

 no X-char, try to push chars out in DMA mode */

	/*

	 * We have an X-char to send.  Disable DMA to prevent it loading

	 * the TX fifo, and then see if we can stuff it into the FIFO.

		/*

		 * No space in the FIFO, so enable the transmit interrupt

		 * so we know when there is space.  Note that once we've

		 * loaded the character, we should just re-enable DMA.

 Success - restore the DMA state */

/*

 * Flush the transmit buffer.

 * Locking: called with port lock held and IRQs disabled.

 Start the RX DMA job */

	/*

	 * If the DMA engine is busy and cannot prepare a

	 * channel, no big deal, the driver will fall back

	 * to interrupt mode as a result of this error code.

 Some data to go along to the callback */

/*

 * This is called when either the DMA job is complete, or

 * the FIFO timeout interrupt occurred. This must be called

 * with the port spinlock uap->port.lock held.

 only used for vdbg() */

 The data can be taken by polling */

 Recalculate the pending size */

 Pick the remain data from the DMA */

		/*

		 * First take all chars in the DMA pipe, then look in the FIFO.

		 * Note that tty_insert_flip_buf() tries to take as many chars

		 * as it can.

 Reset the last_residue for Rx DMA poll */

	/*

	 * Only continue with trying to read the FIFO if all DMA chars have

	 * been taken first.

 Clear any error flags */

		/*

		 * If we read all the DMA'd characters, and we had an

		 * incomplete buffer, that could be due to an rx error, or

		 * maybe we just timed out. Read any pending chars and check

		 * the error status.

		 *

		 * Error conditions will only occur in the FIFO, these will

		 * trigger an immediate interrupt and stop the DMA job, so we

		 * will always find the error in the FIFO, never in the DMA

		 * buffer.

	/*

	 * Pause the transfer so we can trust the current counter,

	 * do this before we pause the PL011 block, else we may

	 * overflow the FIFO.

 Disable RX DMA - incoming data will wait in the FIFO */

 Then we terminate the transfer - we now know our residue */

	/*

	 * This will take the chars we have so far and insert

	 * into the framework.

 Switch buffer & re-trigger DMA job */

	/*

	 * This completion interrupt occurs typically when the

	 * RX buffer is totally stuffed but no timeout has yet

	 * occurred. When that happens, we just want the RX

	 * routine to flush out the secondary DMA buffer while

	 * we immediately trigger the next DMA job.

	/*

	 * Rx data can be taken by the UART interrupts during

	 * the DMA irq handler. So we check the residue here.

 Then we terminate the transfer - we now know our residue */

	/*

	 * Do this check after we picked the DMA chars so we don't

	 * get some IRQ immediately from RX.

/*

 * Stop accepting received characters, when we're shutting down or

 * suspending this port.

 * Locking: called with port lock held and IRQs disabled.

 FIXME.  Just disable the DMA enable */

/*

 * Timer handler for Rx DMA polling.

 * Every polling, It checks the residue in the dma buffer and transfer

 * data to the tty. Also, last_residue is updated for the next polling.

	/*

	 * If no data is received in poll_timeout, the driver will fall back

	 * to interrupt mode. We will retrigger DMA at the first interrupt.

 The DMA buffer is now the FIFO the TTY subsystem can use */

 Allocate and map DMA RX buffers */

 Turn on DMA error (RX/TX will be enabled on demand) */

	/*

	 * ST Micro variants has some specific dma burst threshold

	 * compensation. Set this to 16 bytes, so burst will only

	 * be issued above/below 16 bytes.

 Disable RX and TX DMA */

 In theory, this should already be done by pl011_dma_flush_buffer */

 Clean up the RX DMA */

 Blank functions if the DMA engine is not available */

 Wait until hardware tx queue is empty */

 Disable the transmitter and reenable the transceiver */

 Start TX with programmed I/O only (no DMA) */

	/*

	 * If we were temporarily out of DMA mode for a while,

	 * attempt to switch back to DMA mode again.

 Start Rx DMA poll */

 unable to transmit character */

 Enable transmitter */

 Disable receiver if half-duplex */

 Returns true if tx interrupts have to be (kept) enabled  */

 If we are using DMA mode, try to send some characters. */

 workaround to make sure that all bits are unlocked.. */

	/*

	 * WA: introduce 26ns(1 uart clk) delay before W1C;

	 * single apb access will incur 2 pclk(133.12Mhz) delay,

	 * so add 2 dummy reads

 Allow feature register bits to be inverted to work around errata */

 We need to disable auto-RTS if we want to turn RTS off */

	/*

	 * There is no way to clear TXIM as this is "ready to transmit IRQ", so

	 * we simply mask it. start_tx() will unmask it.

	 *

	 * Note we can race with start_tx(), and if the race happens, the

	 * polling user might get another interrupt just after we clear it.

	 * But it should be OK and can happen even w/o the race, e.g.

	 * controller immediately got some new data and raised the IRQ.

	 *

	 * And whoever uses polling routines assumes that it manages the device

	 * (including tx queue), so we're also fine with start_tx()'s caller

	 * side.

	/*

	 * The caller might need IRQs lowered, e.g. if used with KDB NMI

	 * debugger.

 CONFIG_CONSOLE_POLL */

 Optionaly enable pins to be muxed in and configured */

	/*

	 * Try to enable the clock producer.

 Clear pending error and receive interrupts */

	/*

	 * Save interrupts enable mask, and enable RX interrupts in case if

	 * the interrupt is used for NMI entry.

		/*

		 * Wait 10 PCLKs before writing LCRH_TX register,

		 * to get this delay write read only register 10 times

/*

 * Enable interrupts, only timeouts when using DMA

 * if initial RX DMA job failed, start in interrupt mode

 * as well.

 Clear out any spuriously appearing RX interrupts */

	/*

	 * RXIS is asserted only when the RX FIFO transitions from below

	 * to above the trigger threshold.  If the RX FIFO is already

	 * full to the threshold this can't happen and RXIS will now be

	 * stuck off.  Drain the RX FIFO explicitly to fix this:

 restore RTS and DTR */

	/*

	 * initialise the old status of the modem signals

 Startup DMA */

 The SBSA UART does not support any modem status lines. */

/*

 * disable the port. It should not disable RTS and DTR.

 * Also RTS and DTR state should be preserved to restore

 * it during startup().

	/*

	 * disable break condition and fifos

 mask all interrupts and clear all pending ones */

	/*

	 * Shut down the clock producer

 Optionally let pins go into sleep states */

	/*

	 * Characters to ignore

		/*

		 * If we're ignoring parity and break indicators,

		 * ignore overruns too (for real raw support).

	/*

	 * Ignore all characters if CREAD is not set.

	/*

	 * Ask the core to calculate the divisor for us.

	/*

	 * Adjust RX DMA polling rate with baud rate if not specified.

 CS8

	/*

	 * Update the per-port timeout.

	/*

	 * Calculate the approximated time it takes to transmit one character

	 * with the given baud rate. We use this as the poll interval when we

	 * wait for the tx queue to empty.

 first, disable everything */

	/*

	 * Workaround for the ST Micro oversampling variants to

	 * increase the bitrate slightly, by lowering the divisor,

	 * to avoid delayed sampling of start bit at high speeds,

	 * else we see data corruption.

 Set baud rate */

	/*

	 * ----------v----------v----------v----------v-----

	 * NOTE: REG_LCRH_TX and REG_LCRH_RX MUST BE WRITTEN AFTER

	 * REG_FBRD & REG_IBRD.

	 * ----------^----------^----------^----------^-----

 The SBSA UART only supports 8n1 without hardware flow control. */

/*

 * Release the memory region(s) being used by 'port'

/*

 * Request the memory region(s) being used by 'port'

/*

 * Configure/autoconfigure the port.

/*

 * verify the new serial_struct (for TIOCSSERIAL).

 pick sane settings if the user hasn't */

 clamp the delays to [0, 100ms] */

 Set new configuration */

 Make sure auto RTS is disabled */

	/*

	 *	First save the CR then disable the interrupts

	/*

	 *	Finally, wait for transmitter to become empty and restore the

	 *	TCR. Allow feature register bits to be inverted to work around

	 *	errata.

	/*

	 * Check whether an invalid uart number has been specified, and

	 * if so, search for the first available port that does have

	 * console support.

 Allow pins to be muxed in and configured */

/**

 *	pl011_console_match - non-standard console matching

 *	@co:	  registering console

 *	@name:	  name from console command line

 *	@idx:	  index from console command line

 *	@options: ptr to option string from console command line

 *

 *	Only attempts to match console command lines of the form:

 *	    console=pl011,mmio|mmio32,<addr>[,<options>]

 *	    console=pl011,0x<addr>[,<options>]

 *	This form is used to register an initial earlycon boot console and

 *	replace it with the amba_console at pl011 driver init.

 *

 *	Performs console setup for a match (as required by interface)

 *	If no <options> are specified, then assume the h/w is already setup.

 *

 *	Returns 0 if console matches; otherwise non-zero to use default matching

	/*

	 * Systems affected by the Qualcomm Technologies QDF2400 E44 erratum

	 * have a distinct console name, so make sure we check for that.

	 * The actual implementation of the erratum occurs in the probe

	 * function.

 try to match the port specified on the command line */

/*

 * On non-ACPI systems, earlycon is enabled by specifying

 * "earlycon=pl011,<address>" on the kernel command line.

 *

 * On ACPI ARM64 systems, an "early" console is enabled via the SPCR table,

 * by specifying only "earlycon" on the command line.  Because it requires

 * SPCR, the console starts after ACPI is parsed, which is later than a

 * traditional early console.

 *

 * To get the traditional early console that starts before ACPI is parsed,

 * specify the full "earlycon=pl011,<address>" option.

/*

 * On Qualcomm Datacenter Technologies QDF2400 SOCs affected by

 * Erratum 44, traditional earlycon can be enabled by specifying

 * "earlycon=qdf2400_e44,<address>".  Any options are ignored.

 *

 * Alternatively, you can just specify "earlycon", and the early console

 * will be enabled with the information from the SPCR table.  In this

 * case, the SPCR code will detect the need for the E44 work-around,

 * and set the console name to "qdf2400_e44".

 unregisters the driver also if no more ports are left */

 clamp the delays to [0, 100ms] */

 Ensure interrupts from this UART are masked and cleared */

	/*

	 * Check the mandatory baud rate parameter in the DT node early

	 * so that we can easily exit with the error.

/*

 * While this can be a module, if builtin it's most likely the console

 * So let's leave module_exit but move module_init to an earlier place

 SPDX-License-Identifier: GPL-2.0

/*

 * dz.c: Serial port driver for DECstations equipped

 *       with the DZ chipset.

 *

 * Copyright (C) 1998 Olivier A. D. Lebaillif

 *

 * Email: olivier.lebaillif@ifrsys.com

 *

 * Copyright (C) 2004, 2006, 2007  Maciej W. Rozycki

 *

 * [31-AUG-98] triemer

 * Changed IRQ to use Harald's dec internals interrupts.h

 * removed base_addr code - moving address assignment to setup.c

 * Changed name of dz_init to rs_init to be consistent with tc code

 * [13-NOV-98] triemer fixed code to receive characters

 *    after patches by harald to irq code.

 * [09-JAN-99] triemer minor fix for schedule - due to removal of timeout

 *            field from "current" - somewhere between 2.1.121 and 2.1.131

 Qua Jun 27 15:02:26 BRT 2001

 * [27-JUN-2001] Arnaldo Carvalho de Melo <acme@conectiva.com.br> - cleanups

 *

 * Parts (C) 1999 David Airlie, airlied@linux.ie

 * [07-SEP-99] Bugfixes

 *

 * [06-Jan-2002] Russell King <rmk@arm.linux.org.uk>

 * Converted to new serial core

/*

 * ------------------------------------------------------------

 * dz_in () and dz_out ()

 *

 * These routines are used to access the registers of the DZ

 * chip, hiding relocation differences between implementation.

 * ------------------------------------------------------------

/*

 * ------------------------------------------------------------

 * rs_stop () and rs_start ()

 *

 * These routines are called before setting or resetting

 * tty->flow.stopped. They enable or disable transmitter interrupts,

 * as necessary.

 * ------------------------------------------------------------

 read the TX flag */

 clear the TX flag */

 read the TX flag */

 set the TX flag */

/*

 * ------------------------------------------------------------

 *

 * Here start the interrupt handling routines.  All of the following

 * subroutines are declared as inline and are folded into

 * dz_interrupt.  They were separated out for readability's sake.

 *

 * Note: dz_interrupt() is a "fast" interrupt, which means that it

 * runs with interrupts turned off.  People who may want to modify

 * dz_interrupt() should try to keep the interrupt handler as fast as

 * possible.  After you are done making modifications, it is not a bad

 * idea to do:

 *

 *	make drivers/serial/dz.s

 *

 * and look at the resulting assemble code in dz.s.

 *

 * ------------------------------------------------------------

/*

 * ------------------------------------------------------------

 * receive_char ()

 *

 * This routine deals with inputs from any lines.

 * ------------------------------------------------------------

 grab the char */

			/*

			 * There is no separate BREAK status bit, so treat

			 * null characters with framing errors as BREAKs;

			 * normally, otherwise.  For this move the Framing

			 * Error bit to a simulated BREAK bit.

 Handle SysRq/SAK & keep track of the statistics. */

/*

 * ------------------------------------------------------------

 * transmit_char ()

 *

 * This routine deals with outputs to any lines.

 * ------------------------------------------------------------

 XON/XOFF chars */

 If nothing to do or stopped or hardware stopped. */

	/*

	 * If something to do... (remember the dz has no output fifo,

	 * so we go one char at a time) :-<

 Are we are done. */

/*

 * ------------------------------------------------------------

 * check_modem_status()

 *

 * DS 3100 & 5100: Only valid for the MODEM line, duh!

 * DS 5000/200: Valid for the MODEM and PRINTER line.

 * ------------------------------------------------------------

	/*

	 * FIXME:

	 * 1. No status change interrupt; use a timer.

	 * 2. Handle the 3100/5000 as appropriate. --macro

 If not the modem line just return.  */

 it's easy, since DSR2 is the only bit in the register */

/*

 * ------------------------------------------------------------

 * dz_interrupt ()

 *

 * this is the main interrupt routine for the DZ chip.

 * It deals with the multiple ports.

 * ------------------------------------------------------------

 get the reason why we just got an irq */

/*

 * -------------------------------------------------------------------

 * Here ends the DZ interrupt routines.

 * -------------------------------------------------------------------

	/*

	 * FIXME: Handle the 3100/5000 as appropriate. --macro

	/*

	 * FIXME: Handle the 3100/5000 as appropriate. --macro

/*

 * -------------------------------------------------------------------

 * startup ()

 *

 * various initialization tasks

 * -------------------------------------------------------------------

 Enable interrupts.  */

/*

 * -------------------------------------------------------------------

 * shutdown ()

 *

 * This routine will shutdown a serial port; interrupts are disabled, and

 * DTR is dropped if the hangup on close termio flag is on.

 * -------------------------------------------------------------------

 Disable interrupts.  */

/*

 * -------------------------------------------------------------------

 * dz_tx_empty() -- get the transmitter empty status

 *

 * Purpose: Let user call ioctl() to get info when the UART physically

 *          is emptied.  On bus types like RS485, the transmitter must

 *          release the bus after transmitting. This must be done when

 *          the transmit shift register is empty, not be done when the

 *          transmit holding register is empty.  This functionality

 *          allows an RS485 driver to be written in user space.

 * -------------------------------------------------------------------

	/*

	 * FIXME: Can't access BREAK bits in TDR easily;

	 * reuse the code for polled TX. --macro

 Enable scanning.  */

 Try to keep unchanged.  */

 Resort to 9600.  */

 setup accept flag */

 characters to ignore */

/*

 * Hack alert!

 * Required solely so that the initial PROM-based console

 * works undisturbed in parallel with this one.

/*

 * Verify the new serial_struct (for TIOCSSERIAL).

/*

 * -------------------------------------------------------------------

 * dz_console_putchar() -- transmit a character

 *

 * Polled transmission.  This is tricky.  We need to mask transmit

 * interrupts so that they do not interfere, enable the transmitter

 * for the line requested and then wait till the transmit scanner

 * requests data for this line.  But it may request data for another

 * line first, in which case we have to disable its transmitter and

 * repeat waiting till our line pops up.  Only then the character may

 * be transmitted.  Finally, the state of the transmitter mask is

 * restored.  Welcome to the world of PDP-11!

 * -------------------------------------------------------------------

 Cannot send otherwise. */

/*

 * -------------------------------------------------------------------

 * dz_console_print ()

 *

 * dz_console_print is registered for printk.

 * The console must be locked when we get here.

 * -------------------------------------------------------------------

 For dz_pm().  */

 CONFIG_SERIAL_DZ_CONSOLE */

 SPDX-License-Identifier: GPL-2.0

/*

 * MEN 16z135 High Speed UART

 *

 * Copyright (C) 2014 MEN Mikroelektronik GmbH (www.men.de)

 * Author: Johannes Thumshirn <johannes.thumshirn@men.de>

 RX Space IRQ */

 TX Space IRQ */

 Receiver Line Status IRQ */

 Modem Status IRQ */

 LCR shift mask */

 CS5 */

 CS6 */

 CS7 */

 CS8 */

 Stopbits */

 Parity enable */

 Parity type */

/**

 * men_z135_reg_set() - Set value in register

 * @uart: The UART port

 * @addr: Register address

 * @val: value to set

/**

 * men_z135_reg_clr() - Unset value in register

 * @uart: The UART port

 * @addr: Register address

 * @val: value to clear

/**

 * men_z135_handle_modem_status() - Handle change of modem status

 * @uart: The UART port

 *

 * Handle change of modem status register. This is done by reading the "delta"

 * versions of DCD (Data Carrier Detect) and CTS (Clear To Send).

/**

 * get_rx_fifo_content() - Get the number of bytes in RX FIFO

 * @uart: The UART port

 *

 * Read RXC register from hardware and return current FIFO fill size.

/**

 * men_z135_handle_rx() - RX tasklet routine

 * @uart: Pointer to struct men_z135_port

 *

 * Copy from RX FIFO and acknowledge number of bytes copied.

	/* Avoid accidently accessing TX FIFO instead of RX FIFO. Last

	 * longword in RX FIFO cannot be read.(0x004-0x3FF)

 Be sure to first copy all data and then acknowledge it */

/**

 * men_z135_handle_tx() - TX tasklet routine

 * @uart: Pointer to struct men_z135_port

 *

 calculate bytes to copy */

	/* if we're not aligned, it's better to copy only 1 or 2 bytes and

	 * then the rest.

/**

 * men_z135_intr() - Handle legacy IRQs

 * @irq: The IRQ number

 * @data: Pointer to UART port

 *

 * Check IIR register to find the cause of the interrupt and handle it.

 * It is possible that multiple interrupts reason bits are set and reading

 * the IIR is a destructive read, so we always need to check for all possible

 * interrupts and handle them.

 It's save to write to IIR[7:6] RXC[9:8] */

/**

 * men_z135_request_irq() - Request IRQ for 16z135 core

 * @uart: z135 private uart port structure

 *

 * Request an IRQ for 16z135 to use. First try using MSI, if it fails

 * fall back to using legacy interrupts.

/**

 * men_z135_tx_empty() - Handle tx_empty call

 * @port: The UART port

 *

 * This function tests whether the TX FIFO and shifter for the port

 * described by @port is empty.

/**

 * men_z135_set_mctrl() - Set modem control lines

 * @port: The UART port

 * @mctrl: The modem control lines

 *

 * This function sets the modem control lines for a port described by @port

 * to the state described by @mctrl

/**

 * men_z135_get_mctrl() - Get modem control lines

 * @port: The UART port

 *

 * Retruns the current state of modem control inputs.

/**

 * men_z135_stop_tx() - Stop transmitting characters

 * @port: The UART port

 *

 * Stop transmitting characters. This might be due to CTS line becomming

 * inactive or the tty layer indicating we want to stop transmission due to

 * an XOFF character.

/*

 * men_z135_disable_ms() - Disable Modem Status

 * port: The UART port

 *

 * Enable Modem Status IRQ.

/**

 * men_z135_start_tx() - Start transmitting characters

 * @port: The UART port

 *

 * Start transmitting character. This actually doesn't transmit anything, but

 * fires off the TX tasklet.

/**

 * men_z135_stop_rx() - Stop receiving characters

 * @port: The UART port

 *

 * Stop receiving characters; the port is in the process of being closed.

/**

 * men_z135_enable_ms() - Enable Modem Status

 * @port: the port

 *

 * Enable Modem Status IRQ.

 Activate all but TX space available IRQ */

 byte size */

 stop bits */

 parity */

 Mark/Space parity is not supported */

/**

 * men_z135_probe() - Probe a z135 instance

 * @mdev: The MCB device

 * @id: The MCB device ID

 *

 * men_z135_probe does the basic setup of hardware resources and registers the

 * new uart port to the tty layer.

/**

 * men_z135_remove() - Remove a z135 instance from the system

 *

 * @mdev: The MCB device

/**

 * men_z135_init() - Driver Registration Routine

 *

 * men_z135_init is the first routine called when the driver is loaded. All it

 * does is register with the legacy MEN Chameleon subsystem.

/**

 * men_z135_exit() - Driver Exit Routine

 *

 * men_z135_exit is called just before the driver is removed from memory.

 SPDX-License-Identifier: GPL-2.0

/*

 *  Atheros AR933X SoC built-in UART driver

 *

 *  Copyright (C) 2011 Gabor Juhos <juhosg@openwrt.org>

 *

 *  Based on drivers/char/serial.c, by Linus Torvalds, Theodore Ts'o.

 shadow Interrupt Enable Register */

 Wait up to 60ms for the character(s) to be sent. */

 clear RX_VALID interrupt */

 remove characters from the RX FIFO */

/*

 * baudrate = (clk / (scale + 1)) * (step * (1 / 2^17))

 Only CS8 is supported */

 Only one stop bit is supported */

 Mark/space parity is not supported */

	/*

	 * Ok, we're now changing the port state. Do it with

	 * interrupts disabled.

 disable the UART */

 Update the per-port timeout. */

 ignore all characters if CREAD is not set */

 setup configuration register */

 enable host interrupt */

 enable RX and TX ready overide */

 reenable the UART */

 remove the character from the FIFO */

 Enable HOST interrupts */

 enable RX and TX ready overide */

 Enable RX interrupts */

 Disable all interrupts */

 Disable break condition */

 Nothing to release ... */

 UARTs always present */

 Wait up to 60ms for the character(s) to be sent. */

	/*

	 * First save the IER then disable the interrupts

	/*

	 * Finally, wait for transmitter to become empty

	 * and restore the IER

 CONFIG_SERIAL_AR933X_CONSOLE */

 filled in runtime */

 SPDX-License-Identifier: GPL-2.0

/*

 * LiteUART serial controller (LiteX) Driver

 *

 * Copyright (C) 2019-2020 Antmicro <www.antmicro.com>

/*

 * CSRs definitions (base address offsets + width)

 *

 * The definitions below are true for LiteX SoC configured for 8-bit CSR Bus,

 * 32-bit aligned.

 *

 * Supporting other configurations might require new definitions or a more

 * generic way of indexing the LiteX CSRs.

 *

 * For more details on how CSRs are defined and handled in LiteX, see comments

 * in the LiteX SoC Driver: drivers/soc/litex/litex_soc_ctrl.c

 events */

 necessary for RXEMPTY to refresh its value */

 no overflow bits in status */

 not really tx empty, just checking if tx is not full */

 modem control register is not present in LiteUART */

 just delete timer */

 LiteUART doesn't support sending break signal */

 disable events */

 prepare timer for polling */

 update baudrate */

	/*

	 * Driver core for serial ports forces a non-zero value for port type.

	 * Write an arbitrary value here to accommodate the serial core driver,

	 * as ID part of UAPI is redundant.

 look for aliases; auto-enumerate for free index if not found */

 get membase */

 values not from device tree */

 CONFIG_SERIAL_LITEUART_CONSOLE */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Helpers for controlling modem lines via GPIO

 *

 * Copyright (C) 2014 Paratronic S.A.

 Check if GPIO property exists and continue if not */

 irqs should only be enabled in .enable_ms */

 alternatively implement polling */

 .enable_ms may be called multiple times */

 get initial status of modem lines GPIOs */

 SPDX-License-Identifier: GPL-2.0+

***************************************************************************/

/*

 *	mcf.c -- Freescale ColdFire UART driver

 *

 *	(C) Copyright 2003-2007, Greg Ungerer <gerg@uclinux.org>

***************************************************************************/

***************************************************************************/

/*

 *	Some boards implement the DTR/DCD lines using GPIO lines, most

 *	don't. Dummy out the access macros for those that don't. Those

 *	that do should define these macros somewhere in there board

 *	specific inlude files.

***************************************************************************/

/*

 *	Local per-uart structure.

 Local copy of line sigs */

 Local IMR mirror */

***************************************************************************/

***************************************************************************/

***************************************************************************/

***************************************************************************/

 Enable Transmitter */

 Manually assert RTS */

***************************************************************************/

***************************************************************************/

***************************************************************************/

***************************************************************************/

 Reset UART, get it into known state... */

 Enable the UART transmitter and receiver */

 Enable RX interrupts now */

***************************************************************************/

 Disable all interrupts now */

 Disable UART transmitter and receiver */

***************************************************************************/

	/*

	 * FIXME: port->read_status_mask and port->ignore_status_mask

	 * need to be initialized based on termios settings for

	 * INPCK, IGNBRK, IGNPAR, PARMRK, BRKINT

***************************************************************************/

***************************************************************************/

 Send special char - probably flow control */

 Disable TX to negate RTS automatically */

***************************************************************************/

***************************************************************************/

 Clear mask, so no surprise interrupts. */

***************************************************************************/

***************************************************************************/

 UARTs always present */

***************************************************************************/

 Nothing to release... */

***************************************************************************/

***************************************************************************/

 Enable or disable the RS485 support */

 Get mode registers */

 Automatically negate RTS after TX completes */

***************************************************************************/

/*

 *	Define the basic serial functions we support.

***************************************************************************/

***************************************************************************/

***************************************************************************/

***************************************************************************/

***************************************************************************/

***************************************************************************/

***************************************************************************/

***************************************************************************/

***************************************************************************/

 CONFIG_SERIAL_MCF_CONSOLE */

***************************************************************************/

/*

 *	Define the mcf UART driver structure.

***************************************************************************/

***************************************************************************/

***************************************************************************/

***************************************************************************/

***************************************************************************/

***************************************************************************/

***************************************************************************/

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Driver core for serial ports

 *

 *  Based on drivers/char/serial.c, by Linus Torvalds, Theodore Ts'o.

 *

 *  Copyright 1999 ARM Limited

 *  Copyright (C) 2000-2001 Deep Blue Solutions Ltd.

 for serial_state and serial_icounter_struct */

/*

 * This is used to lock changes in serial line configuration.

/*

 * lockdep: port->lock is initialized in two places, but we

 *          want only one lock-class:

/*

 * This routine is used by the interrupt handler to schedule processing in

 * the software interrupt portion of the driver.

	/*

	 * This means you called this function _after_ the port was

	 * closed.  No cookie for you.

/*

 * Startup the port.  This will be called once per open.  All calls

 * will be serialised by the per-port mutex.

	/*

	 * Make sure the device is in D0 state.

	/*

	 * Initialise and allocate the transmit and temporary

	 * buffer.

		/*

		 * Do not free() the page under the port lock, see

		 * uart_shutdown().

		/*

		 * Initialise the hardware port settings.

		/*

		 * Setup the RTS and DTR signals once the

		 * port is open and ready to respond.

	/*

	 * This is to allow setserial on this port. People may want to set

	 * port/irq/type and then reconfigure the port properly if it failed

	 * now.

/*

 * This routine will shutdown a serial port; interrupts are disabled, and

 * DTR is dropped if the hangup on close termio flag is on.  Calls to

 * uart_shutdown are serialised by the per-port semaphore.

 *

 * uport == NULL if uart_port has already been removed

	/*

	 * Set the TTY IO error marker

		/*

		 * Turn off DTR and RTS early.

	/*

	 * It's possible for shutdown to be called after suspend if we get

	 * a DCD drop (hangup) at just the right time.  Clear suspended bit so

	 * we don't try to resume a port that has been shutdown.

	/*

	 * Do not free() the transmit buffer page under the port lock since

	 * this can create various circular locking scenarios. For instance,

	 * console driver may need to allocate/free a debug object, which

	 * can endup in printk() recursion.

/**

 *	uart_update_timeout - update per-port FIFO timeout.

 *	@port:  uart_port structure describing the port

 *	@cflag: termios cflag value

 *	@baud:  speed of the port

 *

 *	Set the port FIFO timeout value.  The @cflag value should

 *	reflect the actual hardware settings.

	/*

	 * Figure the timeout to send the above number of bits.

	 * Add .02 seconds of slop

/**

 *	uart_get_baud_rate - return baud rate for a particular port

 *	@port: uart_port structure describing the port in question.

 *	@termios: desired termios settings.

 *	@old: old termios (or NULL)

 *	@min: minimum acceptable baud rate

 *	@max: maximum acceptable baud rate

 *

 *	Decode the termios structure into a numeric baud rate,

 *	taking account of the magic 38400 baud rate (with spd_*

 *	flags), and mapping the %B0 rate to 9600 baud.

 *

 *	If the new baud rate is invalid, try the old termios setting.

 *	If it's still invalid, we try 9600 baud.

 *

 *	Update the @termios structure to reflect the baud rate

 *	we're actually going to be using. Don't do this for the case

 *	where B0 is requested ("hang up").

		/*

		 * The spd_hi, spd_vhi, spd_shi, spd_warp kludge...

		 * Die! Die! Die!

		/*

		 * Special case: B0 rate.

		/*

		 * Oops, the quotient was zero.  Try again with

		 * the old baud rate if possible.

		/*

		 * As a last resort, if the range cannot be met then clip to

		 * the nearest chip supported rate.

 Should never happen */

/**

 *	uart_get_divisor - return uart clock divisor

 *	@port: uart_port structure describing the port.

 *	@baud: desired baud rate

 *

 *	Calculate the uart clock divisor for the port.

	/*

	 * Old custom speed handling.

 Caller holds port mutex */

	/*

	 * If we have no tty, termios, or the port does not exist,

	 * then we can't set the parameters for this port.

	/*

	 * Set modem status enables based on termios cflag

 reset sw-assisted CTS flow control based on (possibly) new mode */

	/*

	 * This means you called this function _after_ the port was

	 * closed.  No cookie for you.

	/*

	 * This means you called this function _after_ the port was

	 * closed.  No cookie for you.

/*

 * This function is used to send a high-priority XON/XOFF character to

 * the device

	/*

	 * Ensure the state we copy is consistent and no hardware changes

	 * occur as we go

	/*

	 * Since changing the 'type' of the port changes its resource

	 * allocations, we should treat type changes the same as

	 * IO port changes.

	/*

	 * Ask the low level driver to verify the settings.

		/*

		 * Make sure that we are the sole user of this port.

		/*

		 * We need to shutdown the serial port at the old

		 * port/type/irq combination.

		/*

		 * Free and release old regions

		/*

		 * Claim and map the new regions

 Always success - Jean II */

		/*

		 * If we fail to request resources for the

		 * new port, try to restore the old settings.

				/*

				 * If we failed to restore the old settings,

				 * we fail like this.

				/*

				 * We failed anyway.

 Added to return the correct error -Ram Gupta */

			/*

			 * If they're setting up a custom divisor or speed,

			 * instead of clearing it, then bitch about it.

	/*

	 * This semaphore protects port->count.  It is also

	 * very useful to prevent opens.  Also, take the

	 * port configuration semaphore to make sure that a

	 * module insertion/removal doesn't change anything

	 * under us.

/**

 *	uart_get_lsr_info	-	get line status register info

 *	@tty: tty associated with the UART

 *	@state: UART being queried

 *	@value: returned modem value

	/*

	 * If we're about to load something into the transmit

	 * register, we'll pretend the transmitter isn't empty to

	 * avoid a race condition (depending on when the transmit

	 * interrupt happens).

	/*

	 * Take the per-port semaphore.  This prevents count from

	 * changing, and hence any extra opens of the port while

	 * we're auto-configuring.

		/*

		 * If we already have a port type configured,

		 * we must release its resources.

		/*

		 * This will claim the ports resources if

		 * a port is found.

	/*

	 * Force modem status interrupts on

/*

 * Wait for any of the 4 modem inputs (DCD,RI,DSR,CTS) to change

 * - mask passed in arg for lines of interest

 *   (use |'ed TIOCM_RNG/DSR/CD/CTS for masking)

 * Caller should use TIOCGICOUNT to see which one it was

 *

 * FIXME: This wants extracting into a common all driver implementation

 * of TIOCMWAIT using tty_port.

	/*

	 * note the counters on entry

 see if a signal did it */

/*

 * Get counter of input serial line interrupts (DCD,RI,DSR,CTS)

 * Return: write counters to the user passed counter struct

 * NB: both 1->0 and 0->1 transitions are counted except for

 *     RI where only 0->1 is counted.

	/*

	 * There are 5 words reserved for future use. Check that userspace

	 * doesn't put stuff in there to prevent breakages in the future.

/*

 * Called via sys_ioctl.  We can use spin_lock_irq() here.

	/*

	 * These ioctls don't rely on the hardware to be present.

	/*

	 * The following should only be used when hardware is present.

	/*

	 * All these rely on hardware being present and need to be

	 * protected against the tty being hung up.

 Get line status register */

	/*

	 * Drivers doing software flow control also need to know

	 * about changes to these input settings.

	/*

	 * These are the bits that are used to setup various

	 * flags in the low level driver. We can ignore the Bfoo

	 * bits in c_cflag; c_[io]speed will always be set

	 * appropriately by set_termios() in tty_ioctl.c

 reload cflag from termios; port driver may have overridden flags */

 Handle transition to B0 status */

 Handle transition away from B0 status */

/*

 * Calls to uart_close() are serialised via the tty_lock in

 *   drivers/tty/tty_io.c:tty_release()

 *   drivers/tty/tty_io.c:do_tty_hangup()

	/*

	 * At this point, we stop accepting input.  To do this, we

	 * disable the receive line status interrupts.

	/*

	 * It's possible for shutdown to be called after suspend if we get

	 * a DCD drop (hangup) at just the right time.  Clear suspended bit so

	 * we don't try to resume a port that has been shutdown.

	/*

	 * Set the check interval to be 1/5 of the estimated time to

	 * send a single character, and make it at least 1.  The check

	 * interval should also be less than the timeout.

	 *

	 * Note: we have to use pretty tight timings here to satisfy

	 * the NIST-PCTS.

	/*

	 * If the transmitter hasn't cleared in twice the approximate

	 * amount of time to send the entire FIFO, it probably won't

	 * ever clear.  This assumes the UART isn't doing flow

	 * control, which is currently the case.  Hence, if it ever

	 * takes longer than port->timeout, this is probably due to a

	 * UART bug of some kind.  So, we clamp the timeout parameter at

	 * 2*port->timeout.

	/*

	 * Check whether the transmitter is empty every 'char_time'.

	 * 'timeout' / 'expire' give us the maximum amount of time

	 * we wait.

/*

 * Calls to uart_hangup() are serialised by the tty_lock in

 *   drivers/tty/tty_io.c:do_tty_hangup()

 * This runs from a workqueue and can sleep for a _short_ time only.

 uport == NULL if uart_port has already been removed */

	/*

	 * clear delta_msr_wait queue to avoid mem leaks: we may free

	 * the irq here so the queue might never be woken up.  Note

	 * that we won't end up waiting on delta_msr_wait again since

	 * any outstanding file descriptors should be pointing at

	 * hung_up_tty_fops now.

	/*

	 * Free the IRQ and disable the port.

	/*

	 * Ensure that the IRQ handler isn't running on another CPU.

	/*

	 * Should never observe uport == NULL since checks for hangup should

	 * abort the tty_port_block_til_ready() loop before checking for carrier

	 * raised -- but report carrier raised if it does anyway so open will

	 * continue and not sleep

/*

 * Calls to uart_open are serialised by the tty_lock in

 *   drivers/tty/tty_io.c:tty_open()

 * Note that if this fails, then uart_close() _will_ be called.

 *

 * In time, we want to scrap the "opening nonpresent ports"

 * behaviour and implement an alternative way for setserial

 * to set base addresses/ports/types.  This will allow us to

 * get rid of a certain amount of extra tests.

	/*

	 * Start up the serial port.

/**

 *	uart_console_write - write a console message to a serial port

 *	@port: the port to write the message

 *	@s: array of characters

 *	@count: number of characters in string to write

 *	@putchar: function to write character to port

/*

 *	Check whether an invalid uart number has been specified, and

 *	if so, search for the first available port that does have

 *	console support.

/**

 *	uart_parse_earlycon - Parse earlycon options

 *	@p:	  ptr to 2nd field (ie., just beyond '<name>,')

 *	@iotype:  ptr for decoded iotype (out)

 *	@addr:    ptr for decoded mapbase/iobase (out)

 *	@options: ptr for <options> field; NULL if not present (out)

 *

 *	Decodes earlycon kernel command line parameters of the form

 *	   earlycon=<name>,io|mmio|mmio16|mmio32|mmio32be|mmio32native,<addr>,<options>

 *	   console=<name>,io|mmio|mmio16|mmio32|mmio32be|mmio32native,<addr>,<options>

 *

 *	The optional form

 *

 *	   earlycon=<name>,0x<addr>,<options>

 *	   console=<name>,0x<addr>,<options>

 *

 *	is also accepted; the returned @iotype will be UPIO_MEM.

 *

 *	Returns 0 on success or -EINVAL on failure

	/*

	 * Before you replace it with kstrtoull(), think about options separator

	 * (',') it will not tolerate

/**

 *	uart_parse_options - Parse serial port baud/parity/bits/flow control.

 *	@options: pointer to option string

 *	@baud: pointer to an 'int' variable for the baud rate.

 *	@parity: pointer to an 'int' variable for the parity.

 *	@bits: pointer to an 'int' variable for the number of data bits.

 *	@flow: pointer to an 'int' variable for the flow control character.

 *

 *	uart_parse_options decodes a string containing the serial console

 *	options.  The format of the string is <baud><parity><bits><flow>,

 *	eg: 115200n8r

/**

 *	uart_set_options - setup the serial console parameters

 *	@port: pointer to the serial ports uart_port structure

 *	@co: console pointer

 *	@baud: baud rate

 *	@parity: parity character - 'n' (none), 'o' (odd), 'e' (even)

 *	@bits: number of data bits

 *	@flow: flow control character - 'r' (rts)

	/*

	 * Ensure that the serial-console lock is initialised early.

	 *

	 * Note that the console-enabled check is needed because of kgdboc,

	 * which can end up calling uart_set_options() for an already enabled

	 * console via tty_find_polling_driver() and uart_poll_init().

	/*

	 * some uarts on other side don't support no flow control.

	 * So we set * DTR in host uart to make them happy

	/*

	 * Allow the setting of the UART parameters with a NULL console

	 * too:

 CONFIG_SERIAL_CORE_CONSOLE */

/**

 * uart_change_pm - set power state of the port

 *

 * @state: port descriptor

 * @pm_state: new state

 *

 * Locking: port->mutex has to be held

 Actually, only one tty per port */

 Nothing to do if the console is not suspending */

		/*

		 * Wait for the transmitter to empty.

	/*

	 * Disable the console device before suspending.

	/*

	 * Re-enable the console device after suspending.

		/*

		 * First try to use the console cflag setting.

		/*

		 * If that's unset, use the tty termios setting.

 Protected by port mutex for now */

				/*

				 * Failed to resume - maybe hardware went away?

				 * Clear the "initialized" flag so we won't try

				 * to call the low level drivers shutdown method.

 The magic multiplier feature is a bit obscure, so report it too.  */

	/*

	 * If there isn't a port here, don't do anything further.

	/*

	 * Now do the auto configuration stuff.  Note that config_port

	 * is expected to claim the resources and map the port for us.

 Power up port for set_mctrl() */

		/*

		 * Ensure that the modem control lines are de-activated.

		 * keep the DTR setting that is set in uart_set_options()

		 * We probably don't need a spinlock around this, but

		/*

		 * If this driver supports console, and it hasn't been

		 * successfully registered yet, try to re-register it.

		 * It may be that the port was not available.

		/*

		 * Power down all ports by default, except the

		 * console if we have one.

		/*

		 * We don't set initialized as we only initialized the hw,

		 * e.g. state->xmit is still uninitialized.

/**

 *	uart_register_driver - register a driver with the uart core layer

 *	@drv: low level driver structure

 *

 *	Register a uart driver with the core driver.  We in turn register

 *	with the tty layer, and initialise the core driver per-port state.

 *

 *	We have a proc file in /proc/tty/driver which is named after the

 *	normal driver.

 *

 *	drv->port should be NULL, and the per-port structures should be

 *	registered using uart_add_one_port after this call has succeeded.

	/*

	 * Maybe we should be using a slab cache for this, especially if

	 * we have a large number of ports to handle.

	/*

	 * Initialise the UART state(s).

/**

 *	uart_unregister_driver - remove a driver from the uart core layer

 *	@drv: low level driver structure

 *

 *	Remove all references to a driver from the core driver.  The low

 *	level driver must have removed all its ports via the

 *	uart_remove_one_port() if it registered them with uart_add_one_port().

 *	(ie, drv->port == NULL)

/**

 *	uart_add_one_port - attach a driver-defined port structure

 *	@drv: pointer to the uart low level driver structure for this port

 *	@uport: uart port structure to use for this port.

 *

 *	Context: task context, might sleep

 *

 *	This allows the driver to register its own uart_port structure

 *	with the core driver.  The main purpose is to allow the low

 *	level uart drivers to expand uart_port, rather than having yet

 *	more levels of structures.

 Link the port to the driver state table and vice versa */

	/*

	 * If this port is in use as a console then the spinlock is already

	 * initialised.

	/*

	 * Register the port whether it's detected or not.  This allows

	 * setserial to be used to alter this port's parameters.

	/*

	 * Ensure UPF_DEAD is not set.

/**

 *	uart_remove_one_port - detach a driver defined port structure

 *	@drv: pointer to the uart low level driver structure for this port

 *	@uport: uart port structure for this port

 *

 *	Context: task context, might sleep

 *

 *	This unhooks (and hangs up) the specified port structure from the

 *	core driver.  No further calls will be made to the low-level code

 *	for this port.

	/*

	 * Mark the port "dead" - this prevents any opens from

	 * succeeding while we shut down the port.

	/*

	 * Remove the devices from the tty layer

	/*

	 * If the port is used as a console, unregister it

	/*

	 * Free the port IO and memory resources, if any.

	/*

	 * Indicate that there isn't a port here anymore.

/*

 *	Are the two ports equivalent?

/**

 *	uart_handle_dcd_change - handle a change of carrier detect state

 *	@uport: uart_port structure for the open port

 *	@status: new carrier detect status, nonzero if active

 *

 *	Caller must hold uport->lock

/**

 *	uart_handle_cts_change - handle a change of clear-to-send state

 *	@uport: uart_port structure for the open port

 *	@status: new clear to send status, nonzero if active

 *

 *	Caller must hold uport->lock

/**

 * uart_insert_char - push a char to the uart layer

 *

 * User is responsible to call tty_flip_buffer_push when they are done with

 * insertion.

 *

 * @port: corresponding port

 * @status: state of the serial port RX buffer (LSR for 8250)

 * @overrun: mask of overrun bits in @status

 * @ch: character to push

 * @flag: flag for the character (see TTY_NORMAL and friends)

	/*

	 * Overrun is special.  Since it's reported immediately,

	 * it doesn't affect the current character.

/**

 *	uart_try_toggle_sysrq - Enables SysRq from serial line

 *	@port: uart_port structure where char(s) after BREAK met

 *	@ch: new character in the sequence after received BREAK

 *

 *	Enables magic SysRq when the required sequence is met on port

 *	(see CONFIG_MAGIC_SYSRQ_SERIAL_SEQUENCE).

 *

 *	Returns false if @ch is out of enabling sequence and should be

 *	handled some other way, true if @ch was consumed.

/**

 * uart_get_rs485_mode() - retrieve rs485 properties for given uart

 * @port: uart device's target port

 *

 * This function implements the device tree binding described in

 * Documentation/devicetree/bindings/serial/rs485.txt.

	/*

	 * Clear full-duplex and enabled flags, set RTS polarity to active high

	 * to get to a defined state with the following properties:

	/*

	 * Disabling termination by default is the safe choice:  Else if many

	 * bus participants enable it, no communication is possible at all.

	 * Works fine for short cables and users may enable for longer cables.

 SPDX-License-Identifier: GPL-2.0

/*

 * Based on the same principle as kgdboe using the NETPOLL api, this

 * driver uses a console polling api to implement a gdb serial inteface

 * which is multiplexed on a console port.

 *

 * Maintainer: Jason Wessel <jason.wessel@windriver.com>

 *

 * 2007-2008 (c) Jason Wessel - Wind River Systems, Inc.

 -1 = init not run yet, 0 = unconfigured, 1 = configured. */

 1 if we use kernel mode switching */

 IS_BUILTIN(CONFIG_KGDB_SERIAL_CONSOLE) */

 Return an error - we do not want to bind, just to reset */

 We do not expect anyone to actually bind to us */

	/*

	 * We need to take a mutex to prevent several instances of

	 * this work running on different CPUs so they don't try

	 * to register again already registered handler.

 ! CONFIG_KDB_KEYBOARD */

 ! CONFIG_KDB_KEYBOARD */

 !IS_BUILTIN(CONFIG_KGDB_SERIAL_CONSOLE) */

 !IS_BUILTIN(CONFIG_KGDB_SERIAL_CONSOLE) */

 Convert "no device" to "defer" so we'll keep trying */

	/*

	 * kgdboc is a little bit of an odd "platform_driver".  It can be

	 * up and running long before the platform_driver object is

	 * created and thus doesn't actually store anything in it.  There's

	 * only one instance of kgdb so anything is stored as global state.

	 * The platform_driver is only created so that we can leverage the

	 * kernel's mechanisms (like -EPROBE_DEFER) to call us when our

	 * underlying tty is ready.  Here we init our platform driver and

	 * then create the single kgdboc instance.

 Chop out \n char as a result of echo */

	/*

	 * Configure with the new params as long as init already ran.

	 * Note that we can get called before init if someone loads us

	 * with "modprobe kgdboc kgdboc=..." or if they happen to use the

	 * the odd syntax of "kgdboc.kgdboc=..." on the kernel command.

	/*

	 * If we couldn't configure then clear out the config.  Note that

	 * specifying an invalid config on the kernel command line vs.

	 * through sysfs have slightly different behaviors.  If we fail

	 * to configure what was specified on the kernel command line

	 * we'll leave it in the 'config' and return -EPROBE_DEFER from

	 * our probe.  When specified through sysfs userspace is

	 * responsible for loading the tty driver before setting up.

 Increment the module count when the debugger is active */

 decrement the module count when the debugger detaches */

 This is only available if kgdboc is a built in for early debugging */

	/*

	 * When the first normal console comes up the kernel will take all

	 * the boot consoles out of the list.  Really, we should stop using

	 * the boot console when it does that but until a TTY is registered

	 * we have no other choice so we keep using it.  Since not all

	 * serial drivers might be OK with this, print a warning once per

	 * boot if we detect this case.

	/*

	 * If we get here it means the boot console is going away but we

	 * don't yet have a suitable replacement.  Don't pass through to

	 * the original exit routine.  We'll call it later in our deinit()

	 * function.  For now, restore the original exit() function pointer

	 * as a sentinal that we've hit this point.

		/*

		 * kgdboc_earlycon is exiting but original boot console exit

		 * was never called (AKA kgdboc_earlycon_deferred_exit()

		 * didn't ever run).  Undo our trap.

		/*

		 * We skipped calling the exit() routine so we could try to

		 * keep using the boot console even after it went away.  We're

		 * finally done so call the function now.

	/*

	 * Look for a matching console, or if the name was left blank just

	 * pick the first one we find.

		/*

		 * Both earlycon and kgdboc_earlycon are initialized during

		 * early parameter parsing. We cannot guarantee earlycon gets

		 * in first and, in any case, on ACPI systems earlycon may

		 * defer its own initialization (usually to somewhere within

		 * setup_arch() ). To cope with either of these situations

		 * we can defer our own initialization to a little later in

		 * the boot.

 Trap exit so we can keep earlycon longer if needed. */

 Non-zero means malformed option so we always return zero */

/*

 * This is only intended for the late adoption of an early console.

 *

 * It is not a reliable way to adopt regular consoles because we can not

 * control what order console initcalls are made and, in any case, many

 * regular consoles are registered much later in the boot process than

 * the console initcalls!

 IS_BUILTIN(CONFIG_KGDB_SERIAL_CONSOLE) */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Application UART driver for:

 *	Freescale STMP37XX/STMP378X

 *	Alphascale ASM9260

 *

 * Author: dmitry pervushin <dimka@embeddedalley.com>

 *

 * Copyright 2014 Oleksij Rempel <linux@rempel-privat.de>

 *	Provide Alphascale ASM9260 support.

 * Copyright 2008-2010 Freescale Semiconductor, Inc.

 * Copyright 2008 Embedded Alley Solutions, Inc All Rights Reserved.

/*

 * Start of Alphascale asm9260 defines

 * This list contains only differences of existing bits

 * between imx2x and asm9260

/*

 * RW. Tell the UART to execute the RX DMA Command. The

 * UART will clear this bit at the end of receive execution.

 RW. 0 use FIFO for status register; 1 use DMA */

/*

 * RW. RX TIMEOUT Enable. Valid for FIFO and DMA.

 * Warning: If this bit is set to 0, the RX timeout will not affect receive DMA

 * operation. If this bit is set to 1, a receive timeout will cause the receive

 * DMA logic to terminate by filling the remaining DMA bytes with garbage data.

/*

 * RW. Receive Timeout Counter Value: number of 8-bit-time to wait before

 * asserting timeout on the RX input. If the RXFIFO is not empty and the RX

 * input is idle, then the watchdog counter will decrement each bit-time. Note

 * 7-bit-time is added to the programmed value, so a value of zero will set

 * the counter to 7-bit-time, a value of 0x1 gives 15-bit-time and so on. Also

 * note that the counter is reloaded at the end of each frame, so if the frame

 * is 10 bits long and the timeout counter value is zero, then timeout will

 * occur (when FIFO is not empty) even if the RX input is not idle. The default

 * value is 0x3 (31 bit-time).

 TIMEOUT = (100*7+1)*(1/BAUD) */

 TX ctrl register */

/*

 * RW. Tell the UART to execute the TX DMA Command. The

 * UART will clear this bit at the end of transmit execution.

/*

 * RW. Receive Interrupt FIFO Level Select.

 * The trigger points for the receive interrupt are as follows:

 * ONE_EIGHTHS = 0x0 Trigger on FIFO full to at least 2 of 16 entries.

 * ONE_QUARTER = 0x1 Trigger on FIFO full to at least 4 of 16 entries.

 * ONE_HALF = 0x2 Trigger on FIFO full to at least 8 of 16 entries.

 * THREE_QUARTERS = 0x3 Trigger on FIFO full to at least 12 of 16 entries.

 * SEVEN_EIGHTHS = 0x4 Trigger on FIFO full to at least 14 of 16 entries.

 RW. Same as RXIFLSEL */

 RW. Set DTR. When this bit is 1, the output is 0. */

 RW. Loop Back Enable */

/*

 * RW. Stick Parity Select. When bits 1, 2, and 7 of this register are set, the

 * parity bit is transmitted and checked as a 0. When bits 1 and 7 are set,

 * and bit 2 is 0, the parity bit is transmitted and checked as a 1. When this

 * bit is cleared stick parity is disabled.

 RW. Word length */

/*

 * Interrupt register.

 * contains the interrupt enables and the interrupt status bits

 Tx FIFO EMPTY Raw Interrupt enable */

 Overrun Error Interrupt Enable. */

 Break Error Interrupt Enable. */

 Parity Error Interrupt Enable. */

 Framing Error Interrupt Enable. */

 nUARTDSR Modem Interrupt Enable. */

 nUARTDCD Modem Interrupt Enable. */

 nUARTRI Modem Interrupt Enable. */

 Auto-Boud Timeout */

 Tx FIFO EMPTY Raw Interrupt state */

 Overrun Error */

 Break Error */

 Parity Error */

 Framing Error */

/*

 * RW. In DMA mode, up to 4 Received/Transmit characters can be accessed at a

 * time. In PIO mode, only one character can be accessed at a time. The status

 * register contains the receive data flags and valid bits.

 RO. If 1, UARTAPP is present in this product. */

 RO. If 1, HISPEED is present in this product. */

 RO. Receive FIFO Full. */

 RO. The UART Debug Register contains the state of the DMA signals. */

 DMA Command Run Status */

 DMA Command End Status */

 DMA Request Status */

/*

 * RW. This bit reverses the polarity of the direction control signal on the RTS

 * (or DTR) pin.

 * If 0, The direction control pin will be driven to logic ‚Äò0‚Äô when the

 * transmitter has data to be sent. It will be driven to logic ‚Äò1‚Äô after the

 * last bit of data has been transmitted.

 RW. Enable Auto Direction Control. */

/*

 * RW. If 0 and DIR_CTRL = 1, pin RTS is used for direction control.

 * If 1 and DIR_CTRL = 1, pin DTR is used for direction control.

 RW. Enable Auto Address Detect (AAD). */

 RW. Disable receiver. */

 RW. Enable RS-485/EIA-485 Normal Multidrop Mode (NMM) */

 Contains the address match value. */

/*

 * RW. Contains the direction control (RTS or DTR) delay value. This delay time

 * is in periods of the baud clock.

 WO. Auto-baud time-out interrupt clear bit. */

 WO. End of auto-baud interrupt clear bit. */

 Restart in case of timeout (counter restarts at next UART Rx falling edge) */

 Auto-baud mode select bit. 0 - Mode 0, 1 - Mode 1. */

/*

 * Auto-baud start (auto-baud is running). Auto-baud run bit. This bit is

 * automatically cleared after auto-baud completion.

/*

 * RW. Provide clk over OUTCLK pin. In case of asm9260 it can be configured on

 * pins 137 and 144.

 RW. Baud Rate Mode: 1 - Enable sync mode. 0 - async mode. */

 RW. 1 - MSB bit send frist; 0 - LSB bit frist. */

 RW. 1 - sample rate = 8 x Baudrate; 0 - sample rate = 16 x Baudrate. */

 RW. 1 - Set word length to 9bit. 0 - use ASM9260_BM_LCTRL_WLEN */

 RW. Enable High Speed mode. */

 Disable Successive Receive NACK */

 Receive NACK Inhibit */

 RW. 1 - ISO7816 mode; 0 - USART mode */

 Parity error counter. Will be cleared after reading */

 Max number of Repetitions Reached */

 End of Alphascale asm9260 defines */

 The size of the array - must be last */

 bit 2 */

 bit 3 */

 bit 4 */

 for DMA */

 sentinel */ }

 clear the bit used to serialize the DMA tx. */

 wake up the possible processes. */

 [1] : send PIO. Note, the first pio word is CTRL1. */

 [2] : set DMA buffer. */

 [3] : submit the DMA */

	/*

	 * Mask off conditions which should be ingored.

/*

 * Enable modem status interrupts

	/*

	 * Interrupt should not be enabled twice

 TODO: enable AUART_INTR_CTSMIEN otherwise */

/*

 * Disable modem status interrupts

	/*

	 * Interrupt should not be disabled twice

 TODO: disable AUART_INTR_CTSMIEN otherwise */

 start the next DMA for RX. */

 [1] : send PIO */

 [2] : send DMA request */

 [3] : submit the DMA, but do not issue it. */

 init for RX */

 init for TX */

 set the flags */

 The DMA buffer is now the FIFO the TTY subsystem can use */

 parity */

	/*

	 * Characters to ignore

		/*

		 * If we're ignoring parity and break indicators,

		 * ignore overruns too (for real raw support).

	/*

	 * ignore all characters if CREAD is not set

 figure out the stop bits requested */

 figure out the hardware flow control settings */

		/*

		 * The DMA has a bug(see errata:2836) in mx23.

		 * So we can not implement the DMA for auart in mx23,

		 * we can only implement the DMA support for auart

		 * in mx28.

 enable DMA tranfer */

		/* Even if RTS is GPIO line RTSEN can be enabled because

 set baud rate */

 prepare for the DMA RX. */

 Disable the normal RX interrupt. */

 CTS flow-control and modem-status interrupts */

 ack irq */

	/*

	 * Dealing with GPIO interrupt

 if already in reset state, keep it untouched */

 reset is finished when the clock is gated */

 reset the unit to a well known state */

 Reset FIFO size (it could have changed if DMA was enabled) */

	/*

	 * Enable fifo so all four bytes of a DMA word are written to

	 * output (otherwise, only the LSB is written, ie. 1 in 4 bytes)

 get initial status of modem lines */

 enable transmitter */

 First save the CR then disable the interrupts */

 Finally, wait for transmitter to become empty ... */

	/*

	 * ... and restore the TCR if we waited long enough for the transmitter

	 * to be idle. This might keep the transmitter enabled although it is

	 * unused, but that is better than to disable it while it is still

	 * transmitting.

	/*

	 * Check whether an invalid uart number has been specified, and

	 * if so, search for the first available port that does have

	 * console support.

 Block (enabled before) DMA option if RTS or CTS is GPIO line */

	/*

	 * If something went wrong, rollback.

	 * Be careful: i may be unsigned.

 deprecated */)

	/*

	 * Get the GPIO lines IRQ

 ASM9260 don't have version reg */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Driver for Atmel AT91 Serial ports

 *  Copyright (C) 2003 Rick Bronson

 *

 *  Based on drivers/char/serial_sa1100.c, by Deep Blue Solutions Ltd.

 *  Based on drivers/char/serial.c, by Linus Torvalds, Theodore Ts'o.

 *

 *  DMA support added by Chip Coldwell.

 Revisit: We should calculate this based on the actual port settings */

 3 bytes */

 The minium number of data FIFOs should be able to contain */

/*

 * These two offsets are substracted from the RX FIFO size to define the RTS

 * high and low thresholds

/* Use device name ttyAT, major 204 and minor 154-169.  This is necessary if we

 * should coexist with the 8250 driver, such as if we have an external 16C550

/* Use device name ttyS, major 4, minor 64-68.  This is the usual serial port

/*

 * Be careful, the real size of the ring buffer is

 * sizeof(atmel_uart_char) * ATMEL_SERIAL_RINGSIZE. It means that ring buffer

 * can contain up to 1024 characters in PIO mode and up to 4096 characters in

 * DMA mode.

/*

 * at91: 6 USARTs and one DBGU port (SAM9260)

 * samx7: 3 USARTs and 5 UARTs

/*

 * We wrap our port structure around the generic uart_port.

 uart */

 uart clock */

 cached value of device_may_wakeup for times we need to disable it */

 IMR saved during suspend */

 break being received */

 enable DMA receiver */

 enable PDC receiver */

 current PDC RX buffer */

 PDC receier */

 enable DMA transmitter */

 enable PDC transmitter */

 PDC transmitter */

 port lock */

 port lock */

 MR saved during iso7816 operations */

 BRGR saved during iso7816 operations */

 address of receiver timeout register if it exists */

 can start RX during half-duplex operation */

 ISO7816 */

 sentinel */ }

 Enable or disable the rs485 support */

 Disable interrupts */

 Resetting serial mode to RS232 (0x0) */

 Enable interrupts */

 Enable or disable the iso7816 support */

 Called with interrupts disabled */

 Disable interrupts */

 select mck clock, and output  */

 set parity for normal/inverse mode + max iterations */

 port not yet in iso7816 mode: store configuration */

 back to last RS232 settings */

 Enable interrupts */

/*

 * Return TIOCSER_TEMT when transmitter FIFO and Shift register is empty.

/*

 * Set state of the modem control output lines

 override mode to RS485 if needed, otherwise keep the current mode */

 set the RTS line state according to the mode */

 force RTS line to high level */

 give the control of the RTS line back to the hardware */

 force RTS line to high level */

 force RTS line to low level */

 Local loopback mode? */

/*

 * Get state of the modem control input lines

	/*

	 * The control signals are active low.

/*

 * Stop transmitting.

 disable PDC transmit */

	/*

	 * Disable the transmitter.

	 * This is mandatory when DMA is used, otherwise the DMA buffer

	 * is fully transmitted.

 Disable interrupts */

/*

 * Start transmitting.

		/* The transmitter is already running.  Yes, we

 re-enable PDC transmit */

 Enable interrupts */

 re-enable the transmitter */

/*

 * start receiving - port is in process of being opened.

 reset status and receiver */

 enable PDC controller */

/*

 * Stop receiving - port is in process of being closed.

 disable PDC receive */

/*

 * Enable modem status interrupts

	/*

	 * Interrupt should not be enabled twice

/*

 * Disable modem status interrupts

	/*

	 * Interrupt should not be disabled twice

/*

 * Control the transmission of a break signal

 start break */

 stop break */

/*

 * Stores the incoming character in the ring buffer

 Buffer overflow, ignore char */

 Make sure the character is stored before we update head. */

/*

 * Deal with parity, framing and overrun errors.

 clear error */

 ignore side-effect */

/*

 * Characters received (called from interrupt handler)

		/*

		 * note that the error handling code is

		 * out of the main execution path

 clear error */

				/*

				 * This is either the end-of-break

				 * condition or we've received at

				 * least one character without RXBRK

				 * being set. In both cases, the next

				 * RXBRK will indicate start-of-break.

/*

 * Transmit characters (called from tasklet with TXRDY interrupt

 * disabled)

		/* we still have characters to transmit, so we should continue

		 * transmitting them when TX is ready, regardless of

		 * mode or duplexity

 Enable interrupts */

	/*

	 * xmit is a circular buffer so, if we have just send data from

	 * xmit->tail to the end of xmit->buf, now we have to transmit the

	 * remaining data from the beginning of xmit->buf to xmit->head.

		/*

		 * DMA done, re-enable TXEMPTY and signal that we can stop

		 * TX and start RX for RS485

/*

 * Called from tasklet with TXRDY interrupt is disabled.

 Make sure we have an idle channel */

		/*

		 * DMA is idle now.

		 * Port xmit buffer is already mapped,

		 * and it is one page... Just adjust

		 * offsets and lengths. Since it is a circular buffer,

		 * we have to transmit till the end, and then the rest.

		 * Take the port lock to get a

		 * consistent xmit buffer state.

 multi data mode */

 DWORD access */

 BYTE access */

 single data (legacy) mode */

 BYTE access only */

		/*

		 * save tx_len so atmel_complete_tx_dma() will increase

		 * xmit->tail correctly

 UART circular tx buffer is an aligned page. */

 Configure the slave DMA */

 Reset the UART timeout early so that we don't miss one */

 Restart a new tasklet if DMA status is error */

 CPU claims ownership of RX DMA buffer */

	/*

	 * ring->head points to the end of data already written by the DMA.

	 * ring->tail points to the beginning of data to be read by the

	 * framework.

	 * The current transfer size should not be larger than the dma buffer

	 * length.

	/*

	 * At this point ring->head may point to the first byte right after the

	 * last byte of the dma buffer:

	 * 0 <= ring->head <= sg_dma_len(&atmel_port->sg_rx)

	 *

	 * However ring->tail must always points inside the dma buffer:

	 * 0 <= ring->tail <= sg_dma_len(&atmel_port->sg_rx) - 1

	 *

	 * Since we use a ring buffer, we have to handle the case

	 * where head is lower than tail. In such a case, we first read from

	 * tail to the end of the buffer then reset tail.

 Finally we read data from tail to head */

 Wrap ring->head if needed */

 USART retreives ownership of RX DMA buffer */

 UART circular rx buffer is an aligned page. */

 Configure the slave DMA */

	/*

	 * Prepare a cyclic dma transfer, assign 2 descriptors,

	 * each one is half ring buffer size

/*

 * receive interrupt handler.

		/*

		 * PDC receive. Just schedule the tasklet and let it

		 * figure out the details.

		 *

		 * TODO: We're not handling error flags correctly at

		 * the moment.

 Interrupt receive */

		/*

		 * End of break detected. If it came along with a

		 * character, atmel_rx_chars will handle it.

/*

 * transmit interrupt handler. (Transmit is IRQF_NODELAY safe)

 Start RX if flag was set and FIFO is empty */

/*

 * status flags interrupt handler.

 TODO: All reads to CSR will clear these interrupts! */

/*

 * Interrupt handler

/*

 * Called from tasklet with ENDTX and TXBUFE interrupts disabled.

 nothing left to transmit? */

 more to transmit - setup next transfer */

 disable PDC transmit */

 re-enable PDC transmit */

 Enable interrupts */

 DMA done, stop TX, start RX for RS485 */

 Make sure c is loaded after head. */

		/*

		 * note that the error handling code is

		 * out of the main execution path

 ignore side-effect */

 Reset the UART timeout early so that we don't miss one */

		/* If the PDC has switched buffers, RPR won't contain

		 * any address within the current buffer. Since head

		 * is unsigned, we just need a one-way comparison to

		 * find out.

		 *

		 * In this case, we just need to consume the entire

		 * buffer and resubmit it for DMA. This will clear the

		 * ENDRX bit as well, so that we can safely re-enable

		 * all interrupts below.

			/*

			 * head will only wrap around when we recycle

			 * the DMA buffer, and when that happens, we

			 * explicitly set tail to 0. So head will

			 * always be greater than tail.

		/*

		 * If the current buffer is full, we need to check if

		 * the next one contains any additional data.

/*

 * tasklet handling tty stuff outside the interrupt handler.

 The interrupt handler does not take the lock */

 The interrupt handler does not take the lock */

 DMA/PDC usage specification */

/*

 * Get ip name usart or uart

 ASCII decoding for IP version */

 USAR(T) */

 DBGU */

 UART */

	/*

	 * Only USART devices from at91sam9260 SOC implement fractional

	 * baudrate. It is available for all asynchronous modes, with the

	 * following restriction: the sampling clock's duty cycle is not

	 * constant.

 sama5d2 */

 sama5d4 */

 sam9x5, sama5d3 */

 fallback for older SoCs: use version field */

/*

 * Perform initialization and enable port for reception

	/*

	 * Ensure that no interrupts are enabled otherwise when

	 * request_irq() is called we could get stuck trying to

	 * handle an unexpected interrupt

	/*

	 * Allocate the IRQ

	/*

	 * Initialize DMA (if necessary)

	/*

	 * Enable FIFO when available

 Save current CSR for comparison in atmel_tasklet_func() */

	/*

	 * Finally, enable the serial port

 enable xmit & rcvr */

 set UART timeout */

 set USART timeout */

 enable PDC controller */

 set UART timeout */

 set USART timeout */

 enable receive only */

/*

 * Flush any TX data submitted for DMA. Called when the TX circular

 * buffer is reset.

	/*

	 * in uart_flush_buffer(), the xmit circular buffer has just

	 * been cleared, so we have to reset tx_len accordingly.

/*

 * Disable the port

 Disable modem control lines interrupts */

 Disable interrupts at device level */

 Prevent spurious interrupts from scheduling the tasklet */

	/*

	 * Prevent any tasklets being scheduled during

	 * cleanup

 Make sure that no interrupt is on the fly */

	/*

	 * Clear out any scheduled tasklets before

	 * we destroy the buffers

	/*

	 * Ensure everything is stopped and

	 * disable port and break condition.

	/*

	 * Shut-down the DMA.

	/*

	 * Reset ring buffer pointers

	/*

	 * Free the interrupts

/*

 * Power / Clock management.

		/*

		 * Enable the peripheral clock for this serial port.

		 * This is called on uart_open() or a resume event.

 re-enable interrupts if we disabled some on suspend */

 Back up the interrupt mask and disable all interrupts */

		/*

		 * Disable the peripheral clock for this serial port.

		 * This is called on uart_close() or a suspend event.

/*

 * Change the port parameters

 save the current mode register */

 reset the mode, clock divisor, parity, stop bits and data size */

 byte size */

 stop bits */

 parity */

 Mark or Space parity */

 need to enable error interrupts */

	/*

	 * Characters to ignore

		/*

		 * If we're ignoring parity and break indicators,

		 * ignore overruns too (for real raw support).

 TODO: Ignore all characters if CREAD is set.*/

 update the per-port timeout */

	/*

	 * save/disable interrupts. The tty layer will ensure that the

	 * transmitter is empty if requested by the caller, so there's

	 * no need to wait for it here.

 disable receiver and transmitter */

 mode */

 select mck clock, and output  */

 set max iterations */

 RS232 with hardware handshake (RTS/CTS) */

			/*

			 * with ATMEL_US_USMODE_HWHS set, the controller will

			 * be able to drive the RTS pin high/low when the RX

			 * FIFO is above RXFTHRES/below RXFTHRES2.

			 * It will also disable the transmitter when the CTS

			 * pin is high.

			 * This mode is not activated if CTS pin is a GPIO

			 * because in this case, the transmitter is always

			 * disabled (there must be an internal pull-up

			 * responsible for this behaviour).

			 * If the RTS pin is a GPIO, the controller won't be

			 * able to drive it according to the FIFO thresholds,

			 * but it will be handled by the driver.

			/*

			 * For platforms without FIFO, the flow control is

			 * handled by the driver.

 RS232 without hadware handshake */

	/*

	 * Set the baud rate:

	 * Fractional baudrate allows to setup output frequency more

	 * accurately. This feature is enabled only when using normal mode.

	 * baudrate = selected clock / (8 * (2 - OVER) * (CD + FP / 8))

	 * Currently, OVER is always set to 0 so we get

	 * baudrate = selected clock / (16 * (CD + FP / 8))

	 * then

	 * 8 CD + FP = selected clock / (2 * baudrate)

 BRGR is 16-bit, so switch to slower clock */

 set the mode, clock divisor, parity, stop bits and data size */

	/*

	 * when switching the mode, set the RTS line state according to the

	 * new mode, otherwise keep the former state

 let the hardware control the RTS line */

 force RTS line to low level */

 restore interrupts */

 CTS flow-control and modem-status interrupts */

/*

 * Return string describing the specified port

/*

 * Release the memory region(s) being used by 'port'.

/*

 * Request the memory region(s) being used by 'port'.

/*

 * Configure/autoconfigure the port.

/*

 * Verify the new serial_struct (for TIOCSSERIAL).

/*

 * Configure the port from the platform device resource info.

 for console, the clock could already be configured */

 only enable clock when USART is in use */

	/*

	 * Use TXEMPTY for interrupt when rs485 or ISO7816 else TXRDY or

	 * ENDTX|TXBUFE

/*

 * Interrupts are disabled on entering

	/*

	 * First, save IMR and then disable interrupts

 Store PDC transmit status and disable it */

 Make sure that tx path is actually able to send characters */

	/*

	 * Finally, wait for transmitter to become empty

	 * and restore IMR

 Restore PDC transmit status */

 set interrupts back the way they were */

/*

 * If the port was already initialised (eg, by a boot loader),

 * try to determine the current setup.

	/*

	 * If the baud rate generator isn't running, the port wasn't

	 * initialized by the boot loader.

	/*

	 * The serial core only rounds down when matching this to a

	 * supported baud rate. Make sure we don't end up slightly

	 * lower than one of those, as it would make us fall through

	 * to a much lower baud rate than we really want.

 Port not initialized yet - delay setup */

 Drain the TX shifter */

		/* Cache register values as we won't get a full shutdown/startup

		 * cycle

 we can not wake up if we're running on slow clock */

	/*

	 * 0 <= rts_low <= rts_high <= fifo_size

	 * Once their CTS line asserted by the remote peer, some x86 UARTs tend

	 * to flush their internal TX FIFO, commonly up to 16 data, before

	 * actually stopping to send new data. So we try to set the RTS High

	 * Threshold to a reasonably high value respecting this 16 data

	 * empirical rule when possible.

	/*

	 * In device tree there is no node with "atmel,at91rm9200-usart-serial"

	 * as compatible string. This driver is probed by at91-usart mfd driver

	 * which is just a wrapper over the atmel_serial driver and

	 * spi-at91-usart driver. All attributes needed by this driver are

	 * found in of_node of parent.

		/* port id not found in platform data nor device-tree aliases:

 port already in use */

		/*

		 * The serial core enabled the clock for us, so undo

		 * the clk_prepare_enable() in atmel_console_setup()

	/*

	 * The peripheral clock has been disabled by atmel_init_port():

	 * enable it before accessing I/O registers

	/*

	 * Get port name of usart or uart

	/*

	 * The peripheral clock can now safely be disabled till the port

	 * is used

/*

 * Even if the driver is not modular, it makes sense to be able to

 * unbind a device: there can be many bound devices, and there are

 * situations where dynamic binding and unbinding can be useful.

 *

 * For example, a connected device can require a specific firmware update

 * protocol that needs bitbanging on IO lines, but use the regular serial

 * port in the normal case.

 "port" is allocated statically, so we shouldn't free it */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Cadence UART driver (found in Xilinx Zynq)

 *

 * 2011 - 2014 (C) Xilinx Inc.

 *

 * This driver has originally been pushed by Xilinx using a Zynq-branding. This

 * still shows in the naming of this file, the kconfig symbols and some symbols

 * in the code.

 use dynamic node allocation */

 works best with devtmpfs */

 FIFO size */

 Rx Trigger level */

 Rx Timeout */

 Register offsets for the UART. */

 Control Register */

 Mode Register */

 Interrupt Enable */

 Interrupt Disable */

 Interrupt Mask */

 Interrupt Status */

 Baud Rate Generator */

 RX Timeout */

 RX FIFO Trigger Level */

 Modem Control */

 Modem Status */

 Channel Status */

 FIFO */

 Baud Rate Divider */

 Flow Delay */

 IR Min Received Pulse Width */

 IR Transmitted pulse Width */

 TX FIFO Trigger Level */

 RX FIFO byte status register */

 Control Register Bit Definitions */

 Stop TX break */

 Set TX break */

 TX disabled. */

 TX enabled */

 RX disabled. */

 RX enabled */

 TX logic reset */

 RX logic reset */

 Restart Timeout Counter */

 Parity error status */

 Framing error status */

 Overrun error status */

/*

 * Mode Register:

 * The mode register (MR) defines the mode of transfer as well as the data

 * format. If this register is modified during transmission or reception,

 * data validity cannot be guaranteed.

 Pre-scalar selection */

 Local loop back mode */

 Normal mode */

 Mask for mode bits */

 2 stop bits */

 1 stop bit */

 No parity mode */

 Mark parity mode */

 Space parity mode */

 Odd parity mode */

 Even parity mode */

 6 bits data */

 7 bits data */

 8 bits data */

/*

 * Interrupt Registers:

 * Interrupt control logic uses the interrupt enable register (IER) and the

 * interrupt disable register (IDR) to set the value of the bits in the

 * interrupt mask register (IMR). The IMR determines whether to pass an

 * interrupt to the interrupt status register (ISR).

 * Writing a 1 to IER Enables an interrupt, writing a 1 to IDR disables an

 * interrupt. IMR and ISR are read only, and IER and IDR are write only.

 * Reading either IER or IDR returns 0x00.

 * All four registers have the same bit definitions.

 RX Timeout error interrupt */

 Parity error interrupt */

 Framing error interrupt */

 Overrun error interrupt */

 TX FIFO Full interrupt */

 TX FIFO empty interrupt */

 RX FIFO empty interrupt */

 RX FIFO trigger interrupt */

 RX FIFO full interrupt. */

 RX FIFO empty interrupt. */

 Valid RX bit mask */

	/*

	 * Do not enable parity error interrupt for the following

	 * reason: When parity error interrupt is enabled, each Rx

	 * parity error always results in 2 events. The first one

	 * being parity error interrupt and the second one with a

	 * proper Rx interrupt with the incoming data.  Disabling

	 * parity error interrupt ensures better handling of parity

	 * error events. With this change, for a parity error case, we

	 * get a Rx interrupt with parity error set in ISR register

	 * and we still handle parity errors in the desired way.

 Goes in read_status_mask for break detection as the HW doesn't do it*/

/*

 * Modem Control register:

 * The read/write Modem Control register controls the interface with the modem

 * or data set, or a peripheral device emulating a modem.

 Automatic flow control mode */

 Request to send output control */

 Data Terminal Ready */

/*

 * Modem Status register:

 * The read/write Modem Status register reports the interface with the modem

 * or data set, or a peripheral device emulating a modem.

 Data Carrier Detect */

 Ting Indicator */

 Data Set Ready */

 Clear To Send */

/*

 * Channel Status Register:

 * The channel status register (CSR) is provided to enable the control logic

 * to monitor the status of bits in the channel interrupt status register,

 * even if these are masked out by the interrupt mask register.

 RX FIFO empty */

 TX FIFO empty */

 TX FIFO full */

 Rx Trigger */

 TX state machine active */

 baud dividers min/max values */

/**

 * struct cdns_uart - device data

 * @port:		Pointer to the UART port

 * @uartclk:		Reference clock

 * @pclk:		APB clock

 * @cdns_uart_driver:	Pointer to UART driver

 * @baud:		Current baud rate

 * @clk_rate_change_nb:	Notifier block for clock changes

 * @quirks:		Flags for RXBS support.

 * @cts_override:	Modem control state override

/**

 * cdns_uart_handle_rx - Handle the received bytes along with Rx errors.

 * @dev_id: Id of the UART port

 * @isrstatus: The interrupt status register value as read

 * Return: None

		/*

		 * There is no hardware break detection in Zynq, so we interpret

		 * framing error with all-zeros data as a break sequence.

		 * Most of the time, there's another non-zero byte at the

		 * end of the sequence.

/**

 * cdns_uart_handle_tx - Handle the bytes to be Txed.

 * @dev_id: Id of the UART port

 * Return: None

			/*

			 * Get the data from the UART circular buffer

			 * and write it to the cdns_uart's TX_FIFO

			 * register.

			/*

			 * Adjust the tail of the UART buffer and wrap

			 * the buffer if it reaches limit.

/**

 * cdns_uart_isr - Interrupt handler

 * @irq: Irq number

 * @dev_id: Id of the port

 *

 * Return: IRQHANDLED

	/* Read the interrupt status register to determine which

	 * interrupt(s) is/are active and clear them.

	/*

	 * Skip RX processing if RX is disabled as RXEMPTY will never be set

	 * as read bytes will not be removed from the FIFO.

/**

 * cdns_uart_calc_baud_divs - Calculate baud rate divisors

 * @clk: UART module input clock

 * @baud: Desired baud rate

 * @rbdiv: BDIV value (return value)

 * @rcd: CD value (return value)

 * @div8: Value for clk_sel bit in mod (return value)

 * Return: baud rate, requested baud when possible, or actual baud when there

 *	was too much error, zero if no valid divisors are found.

 *

 * Formula to obtain baud rate is

 *	baud_tx/rx rate = clk/CD * (BDIV + 1)

 *	input_clk = (Uart User Defined Clock or Apb Clock)

 *		depends on UCLKEN in MR Reg

 *	clk = input_clk or input_clk/8;

 *		depends on CLKS in MR reg

 *	CD and BDIV depends on values in

 *			baud rate generate register

 *			baud rate clock divisor register

 use the values when percent error is acceptable */

/**

 * cdns_uart_set_baud_rate - Calculate and set the baud rate

 * @port: Handle to the uart port structure

 * @baud: Baud rate to set

 * Return: baud rate, requested baud when possible, or actual baud when there

 *	   was too much error, zero if no valid divisors are found.

 Write new divisors to hardware */

/**

 * cdns_uart_clk_notifier_cb - Clock notifier callback

 * @nb:		Notifier block

 * @event:	Notify event

 * @data:	Notifier data

 * Return:	NOTIFY_OK or NOTIFY_DONE on success, NOTIFY_BAD on error.

		/*

		 * Find out if current baud-rate can be achieved with new clock

		 * frequency.

 Disable the TX and RX to set baud rate */

		/*

		 * Set clk dividers to generate correct baud with new clock

		 * frequency.

 Set TX/RX Reset */

		/*

		 * Clear the RX disable and TX disable bits and then set the TX

		 * enable bit and RX enable bit to enable the transmitter and

		 * receiver.

/**

 * cdns_uart_start_tx -  Start transmitting bytes

 * @port: Handle to the uart port structure

	/*

	 * Set the TX enable bit and clear the TX disable bit to enable the

	 * transmitter.

 Enable the TX Empty interrupt */

/**

 * cdns_uart_stop_tx - Stop TX

 * @port: Handle to the uart port structure

 Disable the transmitter */

/**

 * cdns_uart_stop_rx - Stop RX

 * @port: Handle to the uart port structure

 Disable RX IRQs */

 Disable the receiver */

/**

 * cdns_uart_tx_empty -  Check whether TX is empty

 * @port: Handle to the uart port structure

 *

 * Return: TIOCSER_TEMT on success, 0 otherwise

/**

 * cdns_uart_break_ctl - Based on the input ctl we have to start or stop

 *			transmitting char breaks

 * @port: Handle to the uart port structure

 * @ctl: Value based on which start or stop decision is taken

/**

 * cdns_uart_set_termios - termios operations, handling data length, parity,

 *				stop bits, flow control, baud rate

 * @port: Handle to the uart port structure

 * @termios: Handle to the input termios structure

 * @old: Values of the previously saved termios structure

 Disable the TX and RX to set baud rate */

	/*

	 * Min baud rate = 6bps and Max Baud Rate is 10Mbps for 100Mhz clk

	 * min and max baud should be calculated here based on port->uartclk.

	 * this way we get a valid baud and can safely call set_baud()

 Update the per-port timeout. */

 Set TX/RX Reset */

	/*

	 * Clear the RX disable and TX disable bits and then set the TX enable

	 * bit and RX enable bit to enable the transmitter and receiver.

 ignore all characters if CREAD is not set */

 Handling Data Size */

 Handling Parity and Stop Bits length */

 2 STOP bits */

 1 STOP bit */

 Mark or Space parity */

/**

 * cdns_uart_startup - Called when an application opens a cdns_uart port

 * @port: Handle to the uart port structure

 *

 * Return: 0 on success, negative errno otherwise

 Disable the TX and RX */

	/* Set the Control Register with TX/RX Enable, TX/RX Reset,

	 * no break chars.

	/*

	 * Clear the RX disable bit and then set the RX enable bit to enable

	 * the receiver.

	/* Set the Mode Register with normal mode,8 data bits,1 stop bit,

	 * no parity.

	/*

	 * Set the RX FIFO Trigger level to use most of the FIFO, but it

	 * can be tuned with a module parameter

	/*

	 * Receive Timeout register is enabled but it

	 * can be tuned with a module parameter

 Clear out any pending interrupts before enabling them */

 Set the Interrupt Registers with desired interrupts */

/**

 * cdns_uart_shutdown - Called when an application closes a cdns_uart port

 * @port: Handle to the uart port structure

 Disable interrupts */

 Disable the TX and RX */

/**

 * cdns_uart_type - Set UART type to cdns_uart port

 * @port: Handle to the uart port structure

 *

 * Return: string on success, NULL otherwise

/**

 * cdns_uart_verify_port - Verify the port params

 * @port: Handle to the uart port structure

 * @ser: Handle to the structure whose members are compared

 *

 * Return: 0 on success, negative errno otherwise.

/**

 * cdns_uart_request_port - Claim the memory region attached to cdns_uart port,

 *				called when the driver adds a cdns_uart port via

 *				uart_add_one_port()

 * @port: Handle to the uart port structure

 *

 * Return: 0 on success, negative errno otherwise.

/**

 * cdns_uart_release_port - Release UART port

 * @port: Handle to the uart port structure

 *

 * Release the memory region attached to a cdns_uart port. Called when the

 * driver removes a cdns_uart port via uart_remove_one_port().

/**

 * cdns_uart_config_port - Configure UART port

 * @port: Handle to the uart port structure

 * @flags: If any

/**

 * cdns_uart_get_mctrl - Get the modem control state

 * @port: Handle to the uart port structure

 *

 * Return: the modem control state

 Check if FIFO is empty */

 Read a character */

 Wait until FIFO is empty */

 Write a character */

 Wait until FIFO is empty */

/**

 * cdns_uart_console_putchar - write the character to the FIFO buffer

 * @port: Handle to the uart port structure

 * @ch: Character to be written

 initialise control register */

	/* only set baud if specified on command line - otherwise

	 * assume it has been initialized by a boot loader.

 Static pointer to console port */

/**

 * cdns_uart_console_write - perform write operation

 * @co: Console handle

 * @s: Pointer to character array

 * @count: No of characters

 save and disable interrupt */

	/*

	 * Make sure that the tx part is enabled. Set the TX enable bit and

	 * clear the TX disable bit to enable the transmitter.

 restore interrupt state */

/**

 * cdns_uart_console_setup - Initialize the uart to default config

 * @co: Console handle

 * @options: Initial settings of uart

 *

 * Return: 0 on success, negative errno otherwise.

 Wait for tx_empty before setting up the console */

 Specified on the cmdline (e.g. console=ttyPS ) */

 CONFIG_SERIAL_XILINX_PS_UART_CONSOLE */

/**

 * cdns_uart_suspend - suspend event

 * @device: Pointer to the device structure

 *

 * Return: 0

 Empty the receive FIFO 1st before making changes */

 set RX trigger level to 1 */

 disable RX timeout interrups */

	/*

	 * Call the API provided in serial_core.c file which handles

	 * the suspend.

/**

 * cdns_uart_resume - Resume after a previous suspend

 * @device: Pointer to the device structure

 *

 * Return: 0

 Set TX/RX Reset */

 restore rx timeout value */

 Enable Tx/Rx */

 restore original rx trigger level */

 enable RX timeout interrupt */

 ! CONFIG_PM_SLEEP */

 Match table for of_platform binding */

 Temporary variable for storing number of instances */

/**

 * cdns_uart_probe - Platform driver probe

 * @pdev: Pointer to the platform device structure

 *

 * Return: 0 on success, negative errno otherwise

 Look for a serialN alias */

 At this point, we've got an empty uart_port struct, initialize it */

	/*

	 * Register the port.

	 * This function also registers this device with the tty layer

	 * and triggers invocation of the config_port() entry point.

	/*

	 * If console hasn't been found yet try to assign this port

	 * because it is required to be assigned for console setup function.

	 * If register_console() don't assign value, then console_port pointer

	 * is cleanup.

 This is not port which is used for console that's why clean it up */

/**

 * cdns_uart_remove - called when the platform driver is unregistered

 * @pdev: Pointer to the platform device structure

 *

 * Return: 0 on success, negative errno otherwise

 Remove the cdns_uart port from the serial core */

 Register the platform driver */

 Unregister the platform driver */

 SPDX-License-Identifier: GPL-2.0+

/*

 *

 *  Copyright (C) 2008 Christian Pellegrin <chripell@evolware.org>

 *

 * Notes: the MAX3100 doesn't provide an interrupt on CTS so we have

 * to use polling for flow control. TX empty IRQ is unusable, since

 * writing conf clears FIFO buffer and we cannot have this interrupt

 * always asking us for attention.

 *

 * Example platform data:



 static struct plat_max3100 max3100_plat_data = {

 .loopback = 0,

 .crystal = 0,

 .poll_time = 100,

 };



 static struct spi_board_info spi_board_info[] = {

 {

 .modalias	= "max3100",

 .platform_data	= &max3100_plat_data,

 .irq		= IRQ_EINT12,

 .max_speed_hz	= 5*1000*1000,

 .chip_select	= 0,

 },

 };



 * The initial minor number is 209 in the low-density serial port:

 * mknod /dev/ttyMAX0 c 204 209

 4 MAX3100s should be enough for everyone */

 the following simulate a status reg for ignore_status_mask */

 last CTS received for flow ctrl */

 last TX empty bit */

 shared data */

 need to make changes */

	int conf;		/* configuration for the MAX31000

 need to change rts */

 rts status */

 current baud rate */

 keeps track if we should send parity */

 if we should rx chars */

 irq assigned to the max3100 */

 minor number */

 1 if 3.6864Mhz crystal 0 for 1.8432 */

 1 if we are in loopback mode */

 for handling irqs: need workqueue since we do spi_sync */

 set to 1 to make the workhandler exit as soon as possible */

 need to know we are suspending to avoid deadlock on workqueue */

 hook for suspending MAX3100 via dedicated pin */

 poll time (in ms) for ctrl lines */

 and its timer */

 the chips */

 race on probe */

 may not be truly up-to-date */

 may not be truly up-to-date */

 always assert DCD and DSR since these lines are not wired */

 mask termios capabilities we don't support */

 set shutdown mode to save power */

 wait for clock to settle */

 set shutdown mode to save power. Will be woken-up on open */

 find out the index for the chip we are removing */

 check if this is the last chip we have */

 no HW suspend, so do SW one */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Driver for Conexant Digicolor serial ports (USART)

 *

 * Author: Baruch Siach <baruch@tkos.co.il>

 *

 * Copyright (C) 2014 Paradox Innovation Ltd.

/*

 * We use the 16 bytes hardware FIFO to buffer Rx traffic. Rx interrupt is

 * only produced when the FIFO is filled more than a certain configurable

 * threshold. Unfortunately, there is no way to set this threshold below half

 * FIFO. This means that we must periodically poll the FIFO status register to

 * see whether there are waiting Rx bytes.

 force RX interrupt */

 Mask termios capabilities we don't support */

 Limit baud rates so that we don't need the fractional divider */

 Set read status mask */

 Set status ignore mask */

 Wait for transmitter to become empty */

 SPDX-License-Identifier: GPL-2.0+

/*

 * altera_jtaguart.c -- Altera JTAG UART driver

 *

 * Based on mcf.c -- Freescale ColdFire UART driver

 *

 * (C) Copyright 2003-2007, Greg Ungerer <gerg@snapgear.com>

 * (C) Copyright 2008, Thomas Chou <thomas@wytron.com.tw>

 * (C) Copyright 2010, Tobias Klauser <tklauser@distanz.ch>

/*

 * Altera JTAG UART register definitions according to the Altera JTAG UART

 * datasheet: https://www.altera.com/literature/hb/nios2/n2cpu_nii51009.pdf

/*

 * Local per-uart structure.

 Local copy of line sigs */

 Local IMR mirror */

 Just copy the old termios settings back */

 Send special char - probably flow control */

 Clear mask, so no surprise interrupts. */

 Enable RX interrupts now */

 Disable all interrupts now */

 UARTs always present */

 Nothing to release... */

/*

 *	Define the basic serial functions we support.

 no connection activity */

 CONFIG_SERIAL_ALTERA_JTAGUART_CONSOLE */

 -1 emphasizes that the platform must have one port, no .N suffix */

 CONFIG_OF */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Actions Semi Owl family serial console

 *

 * Copyright 2013 Actions Semi Inc.

 * Author: Actions Semi, Inc.

 *

 * Copyright (c) 2016-2017 Andreas F√§rber

 We are not able to distinguish the error type. */

 Don't rewrite B0 */

 Wait while FIFO is full or timeout */

 CONFIG_CONSOLE_POLL */

 disable IRQ */

 wait until all contents have been sent out */

 clear IRQ pending */

 SPDX-License-Identifier: GPL-2.0

/*

 * serial_tegra.c

 *

 * High-speed serial driver for NVIDIA Tegra SoCs

 *

 * Copyright (c) 2012-2019, NVIDIA CORPORATION.  All rights reserved.

 *

 * Author: Laxman Dewangan <ldewangan@nvidia.com>

/*

 * Tx fifo trigger level setting in tegra uart is in

 * reverse way then conventional uart.

 Default UART setting when started: 115200 no parity, stop, 8 data bits */

 Tx transfer mode */

/**

 * struct tegra_uart_chip_data: SOC specific data.

 *

 * @tx_fifo_full_status: Status flag available for checking tx fifo full.

 * @allow_txfifo_reset_fifo_mode: allow_tx fifo reset with fifo mode or not.

 *			Tegra30 does not allow this.

 * @support_clk_src_div: Clock source support the clock divider.

 * @fifo_mode_enable_status: Is FIFO mode enabled?

 * @uart_max_port: Maximum number of UART ports

 * @max_dma_burst_bytes: Maximum size of DMA bursts

 * @error_tolerance_low_range: Lowest number in the error tolerance range

 * @error_tolerance_high_range: Highest number in the error tolerance range

 Register shadow */

	/*

	 * RI - Ring detector is active

	 * CD/DCD/CAR - Carrier detect is always active. For some reason

	 *	linux has different names for carrier detect.

	 * DSR - Data Set ready is active as the hardware doesn't support it.

	 *	Don't know if the linux support this yet?

	 * CTS - Clear to send. Always set to active, as the hardware handles

	 *	CTS automatically.

/**

 * tegra_uart_wait_cycle_time: Wait for N UART clock periods

 *

 * @tup:	Tegra serial port data structure.

 * @cycles:	Number of clock periods to wait.

 *

 * Tegra UARTs are clocked at 16X the baud/bit rate and hence the UART

 * clock speed is 16X the current baud rate.

 Wait for a symbol-time. */

 Dummy read to ensure the write is posted */

	/*

	 * For all tegra devices (up to t210), there is a hardware issue that

	 * requires software to wait for 32 UART clock periods for the flush

	 * to propagate, otherwise data could be lost.

 Dummy read to ensure the write is posted */

 wait two character intervals at new rate */

 Overrrun error */

 Parity error */

			/*

			 * Break error

			 * If FIFO read error without any data, reset Rx FIFO

 Nothing to do here */

 Called by serial core driver with u->lock taken. */

 If count is zero, then there is no data to be copied */

 If we are here, DMA is stopped */

 Deactivate flow control to stop sender */

 Activate flow control to start transfer */

 Deactivate flow control to stop sender */

 We may only get DDCD when HW init and reset */

 Will start/stop_tx accordingly */

 Modem signal change interrupt */

 Transmit interrupt only triggered when using PIO */

 End of data */

 Rx timeout */

 Disable Rx interrupts */

 Receive */

 Receive error */

 break nothing to handle */

 break nothing to handle */

 wait one character interval */

 Disable interrupts */

 Wait for Tx fifo to be empty */

 Reset the Rx and Tx FIFOs */

 Reset the UART controller to clear all previous status.*/

	/*

	 * Set the trigger level

	 *

	 * For PIO mode:

	 *

	 * For receive, this will interrupt the CPU after that many number of

	 * bytes are received, for the remaining bytes the receive timeout

	 * interrupt is received. Rx high watermark is set to 4.

	 *

	 * For transmit, if the trasnmit interrupt is enabled, this will

	 * interrupt the CPU when the number of entries in the FIFO reaches the

	 * low watermark. Tx low watermark is set to 16 bytes.

	 *

	 * For DMA mode:

	 *

	 * Set the Tx trigger to 16. This should match the DMA burst size that

	 * programmed in the DMA registers.

 Dummy read to ensure the write is posted */

		/*

		 * For all tegra devices (up to t210), there is a hardware

		 * issue that requires software to wait for 3 UART clock

		 * periods after enabling the TX fifo, otherwise data could

		 * be lost.

	/*

	 * Initialize the UART with default configuration

	 * (115200, N, 8, 1) so that the receive DMA buffer may be

	 * enqueued

	/*

	 * Enable IE_RXS for the receive status interrupts like line errros.

	 * Enable IE_RX_TIMEOUT to get the bytes which cannot be DMA'd.

	 *

	 * EORD is different interrupt than RX_TIMEOUT - RX_TIMEOUT occurs when

	 * the DATA is sitting in the FIFO and couldn't be transferred to the

	 * DMA as the DMA size alignment (4 bytes) is not met. EORD will be

	 * triggered when there is a pause of the incomming data stream for 4

	 * characters long.

	 *

	 * For pauses in the data which is not aligned to 4 bytes, we get

	 * both the EORD as well as RX_TIMEOUT - SW sees RX_TIMEOUT first

	 * then the EORD.

	/*

	 * If using DMA mode, enable EORD interrupt to notify about RX

	 * completion.

/*

 * Flush any TX data submitted for DMA and PIO. Called when the

 * TX circular buffer is reset.

 Changing configuration, it is safe to stop any rx now */

 Clear all interrupts as configuration is going to be changed */

 Parity */

 CMSPAR isn't supported by this driver */

 Stop bits */

 Baud rate. */

 Flow control */

 if top layer has asked to set rts active then do so here */

 update the port timeout based on new settings */

 Make sure all writes have completed */

 Re-enable interrupt */

 Ignore all characters if CREAD is not set */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2012 ARM Ltd.

 * Author: Marc Zyngier <marc.zyngier@arm.com>

 *

 * Adapted for ARM and earlycon:

 * Copyright (C) 2014 Linaro Ltd.

 * Author: Rob Herring <robh@kernel.org>

/*

 * Semihosting-based debug console

 SPDX-License-Identifier: GPL-2.0

/*

 * KGDB NMI serial console

 *

 * Copyright 2010 Google, Inc.

 *		  Arve Hj√∏nnev√•g <arve@android.com>

 *		  Colin Cross <ccross@android.com>

 * Copyright 2012 Linaro Ltd.

 *		  Anton Vorontsov <anton.vorontsov@linaro.org>

	/* The NMI console uses the dbg_io_ops to issue console messages. To

	 * avoid duplicate messages during kdb sessions we must inform kdb's

	 * I/O utilities that messages sent to the console will automatically

	 * be displayed on the dbg_io.

/*

 * This is usually the maximum rate on debug ports. We make fifo large enough

 * to make copy-pasting to the terminal usable.

	/*

	 * Can't use port->tty->driver_data as tty might be not there. Timer

	 * will check for tty and will get the ref, but here we don't have to

	 * do that, and actually, we can't: we're in NMI context, no locks are

	 * possible.

/**

 * kgdb_nmi_poll_knock - Check if it is time to enter the debugger

 *

 * "Serial ports are often noisy, especially when muxed over another port (we

 * often use serial over the headset connector). Noise on the async command

 * line just causes characters that are ignored, on a command line that blocked

 * execution noise would be catastrophic." -- Colin Cross

 *

 * So, this function implements KGDB/KDB knocking on the serial line: we won't

 * enter the debugger until we receive a known magic phrase (which is actually

 * "$3#33", known as "escape to KDB" command. There is also a relaxed variant

 * of knocking, i.e. just pressing the return key is enough to enter the

 * debugger. And if knocking is disabled, the function always returns 1.

/*

 * The tasklet is cheap, it does not cause wakeups when reschedules itself,

 * instead it waits for the next tick.

 Actually, we can handle any amount as we use polled writes. */

 SPDX-License-Identifier: GPL-2.0

/*

 * su.c: Small serial driver for keyboard/mouse interface on sparc32/PCI

 *

 * Copyright (C) 1997  Eddie C. Dost  (ecd@skynet.be)

 * Copyright (C) 1998-1999  Pete Zaitcev   (zaitcev@yahoo.com)

 *

 * This is mainly a variation of 8250.c, credits go to authors mentioned

 * therein.  In fact this driver should be merged into the generic 8250.c

 * infrastructure perhaps using a 8250_sparc.c module.

 *

 * Fixed to use tty_get_baud_rate().

 *   Theodore Ts'o <tytso@mit.edu>, 2001-Oct-12

 *

 * Converted to new 2.5.x UART layer.

 *   David S. Miller (davem@davemloft.net), 2002-Jul-29

/* We are on a NS PC87303 clocked with 24.0 MHz, which results

 * in a UART clock of 1.8462 MHz.

/*

 * Here we define the default xmit fifo size used for each type of UART.

 Probing information.  */

 XXX Stupid */

	/*

	 * MrCoffee has weird schematics: IRQ4 & P10(?) pins of SuperIO are

	 * connected with a gate then go to SlavIO. When IRQ4 goes tristated

	 * gate outputs a logical one. Since we use level triggered interrupts

	 * we have lockup and watchdog reset. We cannot mask IRQ because

	 * keyboard shares IRQ with us (Word has it as Bob Smelik's design).

	 * This problem is similar to what Alpha people suffer, see serial.c.

/*

 * We used to support using pause I/O for certain machines.  We

 * haven't supported this for a while, but just in case it's badly

 * needed for certain old 386 machines, I've left these #define's

 * in....

/*

 * For the 16C950

 Unused currently */

/*

 * Attempts to turn on the RSA FIFO.  Returns zero on failure.

 * We set the port uart clock rate if we succeed.

/*

 * Attempts to turn off the RSA FIFO.  Returns zero on failure.

 * It is unknown why interrupts were disabled in here.  However,

 * the caller is expected to preserve this behaviour by grabbing

 * the spinlock before calling this function.

 CONFIG_SERIAL_8250_RSA */

	/*

	 * We really want to stop the transmitter from sending.

	/*

	 * Re-enable the transmitter if we disabled it.

			/*

			 * For statistics only

				/*

				 * We do the SysRQ and SAK checking

				 * here because otherwise the break

				 * may get masked by ignore_status_mask

				 * or read_status_mask.

			/*

			 * Mask off conditions which should be ingored.

 Recover the break flag from console xmit */

			/*

			 * Overrun is special, since it's reported

			 * immediately, and doesn't affect the current

			 * character.

 Separate interrupt handling path for keyboard/mouse ports.  */

 Stop-A is handled by drivers/char/keyboard.c now. */

 Wake up and initialize UART */

 Reset the UART */

	/*

	 * If this is an RSA port, see if we can kick it up to the

	 * higher speed clock.

	/*

	 * Clear the FIFO buffers and disable them.

	 * (they will be reenabled in set_termios())

	/*

	 * Clear the interrupt registers.

	/*

	 * At this point, there's no way the LSR could still be 0xff;

	 * if it is, then bail out, because there's likely no UART

	 * here.

	/*

	 * Now, initialize the UART

	/*

	 * Finally, enable interrupts.  Note: Modem status interrupts

	 * are set via set_termios(), which will be occurring imminently

	 * anyway, so we don't enable them here.

		/*

		 * Enable interrupts on the AST Fourport board

	/*

	 * And clear the interrupt registers again for luck.

	/*

	 * Disable interrupts from this port

 reset interrupts on the AST Fourport board */

	/*

	 * Disable break condition and FIFOs

	/*

	 * Reset the RSA board back to 115kbps compat mode.

	/*

	 * Read data port to reset things.

	/*

	 * Work around a bug in the Oxford Semiconductor 952 rev B

	 * chip which causes it to seriously miscalculate baud rates

	 * when DLL is 0.

	/*

	 * Ok, we're now changing the port state.  Do it with

	 * interrupts disabled.

	/*

	 * Update the per-port timeout.

	/*

	 * Characteres to ignore

		/*

		 * If we're ignoring parity and break indicators,

		 * ignore overruns too (for real raw support).

	/*

	 * ignore all characters if CREAD is not set

	/*

	 * CTS flow control flag and modem status interrupts

 set DLAB */

 LS of divisor */

 MS of divisor */

 set fcr */

 reset DLAB */

 Save LCR */

 emulated UARTs (Lucent Venus 167x) need two steps */

 set fcr */

	/*

	 * Ask the core to calculate the divisor for us.

		/*

		 * We are supposed to call autoconfig here, but this requires

		 * splitting all the OBP probing crap from the UART probing.

		 * We'll do it when we kill sunsu.c altogether.

 XXX */

 Number of already registered ports */

 Send the character out. */

 CONFIG_SERIO */

		/*

		 * Do a simple existence test first; if we fail this, there's

		 * no point trying anything else.

		 *

		 * 0x80 is used as a nonsense port to prevent against false

		 * positives due to ISA bus float.  The assumption is that

		 * 0x80 is a non-existent port; which should be safe since

		 * include/asm/io.h also makes this assumption.

 We failed; there's nothing here */

	/* 

	 * Check to see if a UART is really there.  Certain broken

	 * internal modems based on the Rockwell chipset fail this

	 * test, because they apparently don't implement the loopback

	 * test mode.  So this test is skipped on the COM 1 through

	 * COM 4 ports.  This *should* be safe, since no board

	 * manufacturer would be stupid enough to design a board

	 * that conflicts with COM 1-4 --- we hope!

 We failed loopback test */

 set up for StarTech test */

 EFR is the same as FCR */

 Check for Startech UART's */

 Check for TI 16750 */

			/*

			 * If this is a 16750, and not a cheap UART

			 * clone, then it should only go into 64 byte

			 * mode if the UART_FCR7_64BYTE bit was set

			 * while UART_LCR_DLAB was latched.

 XXX */

	/*

	 * Reset the UART.

/*

 * ------------------------------------------------------------

 * Serial console driver

 * ------------------------------------------------------------

/*

 *	Wait for transmitter & holding register to empty

 Wait up to 10ms for the character(s) to be sent. */

 Wait up to 1s for flow control if necessary */

/*

 *	Print a string to the serial port trying not to disturb

 *	any possible real use of the port...

	/*

	 *	First save the UER then disable the interrupts

	/*

	 *	Finally, wait for transmitter to become empty

	 *	and restore the IER

/*

 *	Setup initial baud/bits/parity. We do two things here:

 *	- construct a cflag setting for the first su_open()

 *	- initialize the serial port

 *	Return non-zero if we didn't find a serial port.

	/*

	 * Temporary fix.

 Get firmware console settings.  */

/*

 *	Register console.

			/*

			 * The pointer is used as an identifier not

			 * as a pointer, we can drop the refcount on

			 * the of__node immediately after getting it.

 SPDX-License-Identifier: GPL-2.0+

/*

 * PIC32 Integrated Serial Driver.

 *

 * Copyright (C) 2015 Microchip Technology, Inc.

 *

 * Authors:

 *   Sorin-Andrei Pistirica <andrei.pistirica@microchip.com>

 UART name and device definitions */

 pic32_sport pointer for console use */

 wait for tx empty, otherwise chars will be lost or corrupted */

 serial core request to check if uart tx buffer is empty */

 serial core request to set UART outputs */

 set loopback mode */

 get the state of CTS input pin for this port */

 read and invert UxCTS */

 serial core request to return the state of misc UART input pins */

	/* DSR and CD are not supported in PIC32, so return 1

	 * RI is not supported in PIC32, so return 0

/* stop tx and start tx are not called in pairs, therefore a flag indicates

 * the status of irq to control the irq-depth.

		/* use disable_irq_nosync() and not disable_irq() to avoid self

		 * imposed deadlock by not waiting for irq handler to end,

		 * since this callback is called from interrupt context.

 serial core request to disable tx ASAP (used for flow control) */

 wait for tx empty */

 serial core request to (re)enable tx */

 serial core request to stop rx, called before port shutdown */

 disable rx interrupts */

 receiver Enable bit OFF */

 serial core request to start/stop emitting break char */

 get port type in string format */

 read all chars in rx fifo and send them to core */

	/* limit number of char read in interrupt, should not be

	 * higher than fifo size anyway since we're much faster than

	 * serial port

 get overrun/fifo empty information from status register */

 fifo reset is required to clear interrupt */

 Can at least one more character can be read? */

 read the character and increment the rx counter */

 do stats first */

 update flag wrt read_status_mask */

/* fill tx fifo with chars to send, stop when fifo is about to be full

 * or when all chars have been sent.

	/* keep stuffing chars into uart tx buffer

	 * 1) until uart fifo is full

	 * or

	 * 2) until the circ buffer is empty

	 * (all chars have been sent)

	 * or

	 * 3) until the max count is reached

	 * (prevents lingering here for too long in certain cases)

 RX interrupt handler */

 TX interrupt handler */

 FAULT interrupt handler */

 do nothing: pic32_uart_do_rx() handles faults. */

 enable rx & tx operation on uart */

 disable rx & tx operation on uart */

 wait for tx empty, otherwise chars will be lost or corrupted */

 serial core request to initialize uart and start rx operation */

 clear status and mode registers */

 disable uart and mask all interrupts */

 set default baud */

	/* Each UART of a PIC32 has three interrupts therefore,

	 * we setup driver to register the 3 irqs for the device.

	 *

	 * For each irq request_irq() is called with interrupt disabled.

	 * And the irq is enabled as soon as we are ready to handle them.

 set rx interrupt on first receive */

 set interrupt on empty */

 enable all interrupts and eanable uart */

 serial core request to flush & disable uart */

 disable uart */

 free all 3 interrupts for this UART */

 serial core request to change current uart setting */

 disable uart and mask all interrupts while changing speed */

 stop bit options */

 parity options */

 if hw flow ctrl, then the pins must be specified in device tree */

 enable hardware flow control */

 disable hardware flow control */

 Always 8-bit */

 Mark/Space parity is not supported */

 update baud */

 enable uart */

 serial core request to claim uart iomem */

 serial core request to release uart iomem */

 serial core request to do any port required auto-configuration */

 serial core request to check that port information in serinfo are suitable */

 serial core callbacks */

 output given char */

 wait for tx empty */

 console core request to output given string */

 call uart helper to deal with \r\n */

/* console core request to setup given console, find matching uart

 * port and setup it.

/*

 * Late console initialization.

	/* Hardware flow control: gpios

	 * !Note: Basically, CTS is needed for reading the status.

		/* The peripheral clock has been enabled by console_setup,

		 * so disable it till the port is used.

 automatic unroll of sport and gpios */

 automatic unroll of sport and gpios */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for the serial port on the 21285 StrongArm-110 core logic chip.

 *

 * Based on drivers/char/serial.c

/*

 * We only need 2 bits of data, so instead of creating a whole structure for

 * this, use bits of the private_data pointer of the uart port structure.

/*

 * The documented expression for selecting the divisor is:

 *  BAUD_BASE / baud - 1

 * However, typically BAUD_BASE is not divisible by baud, so

 * we want to select the divisor that gives us the minimum

 * error.  Therefore, we want:

 *  int(BAUD_BASE / baud - 0.5) ->

 *  int(BAUD_BASE / baud - (baud >> 1) / baud) ->

 *  int((BAUD_BASE - (baud >> 1)) / baud)

 no modem control lines */

	/*

	 * We don't support modem control lines.

	/*

	 * We don't support BREAK character recognition.

	/*

	 * Ask the core to calculate the divisor for us.

 CS8 */

	/*

	 * Update the per-port timeout.

	/*

	 * Which character status flags are we interested in?

	/*

	 * Which character status flags should we ignore?

	/*

	 * Ignore all characters if CREAD is not set.

/*

 * verify the new serial_struct (for TIOCSSERIAL).

	/*

	 * Check whether an invalid uart number has been specified, and

	 * if so, search for the first available port that does have

	 * console support.

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Driver for CPM (SCC/SMC) serial ports; CPM2 definitions

 *

 *  Maintainer: Kumar Gala (galak@kernel.crashing.org) (CPM2)

 *              Pantelis Antoniou (panto@intracom.gr) (CPM1)

 *

 *  Copyright (C) 2004 Freescale Semiconductor, Inc.

 *            (C) 2004 Intracom, S.A.

 *            (C) 2006 MontaVista Software, Inc.

 *		Vitaly Bordug <vbordug@ru.mvista.com>

*************************************************************/

	/* Don't remap parameter RAM if it has already been initialized

	 * during console setup.

/*

 * Allocate DP-Ram and memory buffers. We need to allocate a transmit and

 * receive buffer descriptors from dual port ram, and a character

 * buffer area from host mem. If we are allocating for the console we need

 * to do it from bootmem

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Driver for CPM (SCC/SMC) serial ports; CPM1 definitions

 *

 *  Maintainer: Kumar Gala (galak@kernel.crashing.org) (CPM2)

 *              Pantelis Antoniou (panto@intracom.gr) (CPM1)

 *

 *  Copyright (C) 2004 Freescale Semiconductor, Inc.

 *            (C) 2004 Intracom, S.A.

 *            (C) 2006 MontaVista Software, Inc.

 *		Vitaly Bordug <vbordug@ru.mvista.com>

*************************************************************/

/*

 * Allocate DP-Ram and memory buffers. We need to allocate a transmit and

 * receive buffer descriptors from dual port ram, and a character

 * buffer area from host mem. If we are allocating for the console we need

 * to do it from bootmem

 was hostalloc but changed cause it blows away the */

 large tlb mapping when pinning the kernel area    */

  virtual address*/

  physical address*/

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Driver for CPM (SCC/SMC) serial ports; core driver

 *

 *  Based on arch/ppc/cpm2_io/uart.c by Dan Malek

 *  Based on ppc8xx.c by Thomas Gleixner

 *  Based on drivers/serial/amba.c by Russell King

 *

 *  Maintainer: Kumar Gala (galak@kernel.crashing.org) (CPM2)

 *              Pantelis Antoniou (panto@intracom.gr) (CPM1)

 *

 *  Copyright (C) 2004, 2007 Freescale Semiconductor, Inc.

 *            (C) 2004 Intracom, S.A.

 *            (C) 2005-2006 MontaVista Software, Inc.

 *		Vitaly Bordug <vbordug@ru.mvista.com>

*************************************************************/

*************************************************************/

/*

 * Check, if transmit buffers are processed

/*

 * Stop transmitter

/*

 * Start transmitter

/*

 * Stop receiver

/*

 * Generate a break.

/*

 * Transmit characters, refill buffer descriptor, if possible

/*

 * Receive characters

	/* Just loop through the closed BDs and copy the characters into

	 * the buffer.

 get status */

 If this one is empty, return happy */

 get number of characters, and check spce in flip-buffer */

		/* If we have not enough room in tty flip buffer, then we try

		 * later, which will be the next rx-interrupt or a timeout

 get pointer */

 loop through the buffer */

 End while (i--) */

 This BD is ready to be used again. Clear status. get next */

 End for (;;) */

 Write back buffer pointer */

 activate BH processing */

 Error processing */

 Statistics */

 Mask out ignored conditions */

 Handle the remaining ones */

 overrun does not affect the current character ! */

 We skip this buffer */

 CHECK: Is really nothing senseful there */

 ASSUMPTION: it contains nothing valid */

/*

 * Asynchron mode interrupt handler

 If the port is not the console, make sure rx is disabled. */

 Disable UART rx */

 Install interrupt handler. */

 Startup rx-int */

/*

 * Shutdown the uart

 free interrupt handler */

 If the port is not the console, disable Rx and Tx. */

 Wait for all the BDs marked sent */

 Stop uarts */

 Shut them really down and reinit buffer descriptors */

	/* MAXIDL is the timeout after which a receive buffer is closed

	 * when not full if no more characters are received.

	 * We calculate it from the baudrate so that the duration is

	 * always the same at standard rates: about 4ms.

	/* Character length programmed into the mode register is the

	 * sum of: 1 start bit, number of data bits, 0 or 1 parity bit,

	 * 1 or 2 stop bits, minus 1.

	 * The value 'bits' counts this for us.

 byte size */

 Two stops */

	/*

	 * Update the timeout

	/*

	 * Set up parity check flag

	/*

	 * Characters to ignore

		/*

		 * If we're ignore parity and break indicators, ignore

		 * overruns too.  (For real raw support).

	/*

	 * !!! ignore all characters if CREAD is not set

	/* Start bit has not been added (so don't, because we would just

	 * subtract it later), and we need to add one for the number of

	 * stops bits (there is always at least one).

		/*

		 * MRBLR can be changed while an SMC/SCC is operating only

		 * if it is done in a single bus cycle with one 16-bit move

		 * (not two 8-bit bus cycles back-to-back). This occurs when

		 * the cp shifts control to the next RxBD, so the change does

		 * not take effect immediately. To guarantee the exact RxBD

		 * on which the change occurs, change MRBLR only while the

		 * SMC/SCC receiver is disabled.

		/* Set the mode register.  We want to keep a copy of the

		 * enables, because we want to put them back if they were

		 * present.

		/* Output in *one* operation, so we don't interrupt RX/TX if they

/*

 * verify the new serial_struct (for TIOCSSERIAL).

/*

 * Transmit characters, refill buffer descriptor, if possible

 Handle xon/xoff */

 Pick next descriptor and fill from buffer */

 Get next BD. */

 Pick next descriptor and fill from buffer */

 Get next BD. */

/*

 * init buffer descriptors

	/* Set the physical address of the host memory

	 * buffers in the buffer descriptors, and the

	 * virtual address for us to work with.

	/* Set the physical address of the host memory

	 * buffers in the buffer descriptors, and the

	 * virtual address for us to work with.

 Store address */

	/* Set up the uart parameters in the

	 * parameter ram.

	/* Send the CPM an initialize command.

	/* Set UART mode, 8 bit, no parity, one stop.

	 * Enable receive and transmit.

 Enable rx interrupts  and clear all pending events.  */

 Store address */

/*

 *  In case SMC is being relocated...

 number of break chars */

	/* Set up the uart parameters in the

	 * parameter ram.

 Using idle character time requires some additional tuning.  */

	/* Set UART mode, 8 bit, no parity, one stop.

	 * Enable receive and transmit.

 Enable only rx interrupts clear all pending events. */

/*

 * Initialize port. This is called from early_console stuff

 * so we have to be careful here !

/*

 * Configure/autoconfigure the port.

/*

 * Write a string to the serial port

 * Note that this is called with interrupts already disabled

	/* Get the address of the host memory buffer.

	/*

	 * Now, do each character.  This is not as bad as it looks

	 * since this is a holding FIFO and not a transmitting FIFO.

	 * We could add the complexity of filling the entire transmit

	 * buffer, but we would just wait longer between accesses......

		/* Wait for transmitter fifo to empty.

		 * Ready indicates output is ready, and xmt is doing

		 * that, not that it is ready for us to send.

		/* Send the character out.

		 * If the buffer address is in the CPM DPRAM, don't

		 * convert it.

 if a LF, also do CR... */

	/*

	 * Finally, Wait for transmitter & holding register to empty

	 *  and restore the IER

/* Serial polling routines for writing and reading from the uart while

 * in an interrupt or debug context.

 power of 2, please */

	/* Get the address of the host memory buffer.

	/* If the buffer address is in the CPM DPRAM, don't

	 * convert it.

 CONFIG_SERIAL_CPM_CONSOLE */

 CONFIG_CONSOLE_POLL */

/*

 *	Print a string to the serial port trying not to disturb

 *	any possible real use of the port...

 *

 *	Note that this is called with interrupts already disabled

 initialize the device pointer for the port */

 SPDX-License-Identifier: GPL-2.0+

/************************************************************************

 * Copyright 2003 Digi International (www.digi.com)

 *

 * Copyright (C) 2004 IBM Corporation. All rights reserved.

 *

 * Contact Information:

 * Scott H Kilau <Scott_Kilau@digi.com>

 * Wendy Xiong   <wendyx@us.ibm.com>

 *

 *

www.digi.com");

 store the info for the board we've found */

 store which revision we have */

		/*

		 * For PCI ClassicBoards

		 * PCI Local Address (.i.e. "resource" number) space

		 * 0	PLX Memory Mapped Config

		 * 1	PLX I/O Mapped Config

		 * 2	I/O Mapped UARTs and Status

		 * 3	Memory Mapped VPD

		 * 4	Memory Mapped UARTs and Status

 Get the PCI Base Address Registers */

 Assign the board_ops struct */

		/*

		 * Enable Local Interrupt 1			(0x1),

		 * Local Interrupt 1 Polarity Active high	(0x2),

		 * Enable PCI interrupt				(0x43)

 get the PCI Base Address Registers */

 Assign the board_ops struct */

 XXX: leaking all resources from jsm_tty_init here! */

 Log the information about the board */

 Tell card not to interrupt anymore. */

 Free all allocated channels structs */

 SPDX-License-Identifier: GPL-2.0+

/************************************************************************

 * Copyright 2003 Digi International (www.digi.com)

 *

 * Copyright (C) 2004 IBM Corporation. All rights reserved.

 *

 * Contact Information:

 * Scott H Kilau <Scott_Kilau@digi.com>

 * Ananda Venkatarman <mansarov@us.ibm.com>

 * Modifications:

 * 01/19/06:	changed jsm_input routine to use the dynamically allocated

 *		tty_buffer changes. Contributors: Scott Kilau and Ananda V.

 For udelay */

/*

 * Return modem signals to ld.

/*

 * jsm_set_modem_info()

 *

 * Set modem signals, called by ld.

/*

 * jsm_tty_write()

 *

 * Take data from the user or kernel and send it out to the FEP.

 * In here exists all the Transparent Print magic as well.

 Get board pointer from our array of majors we have allocated */

	/*

	 * Allocate channel buffers for read/write/error.

	 * Set flag, so we don't get trounced on.

 Drop locks, as malloc with GFP_KERNEL can sleep */

	/*

	 * Initialize if neither terminal is open.

	/*

	 * Flush input queues.

 Tell UART to init itself */

	/*

	 * Run param in case we changed anything

	/*

	 * If we have HUPCL set, lower DTR and RTS

 Drop RTS/DTR */

 Turn off UART interrupts for this port */

/*

 * jsm_tty_init()

 *

 * Init the tty subsystem.  Called once per board after board has been

 * downloaded and init'ed.

	/*

	 * Initialize board structure elements.

	/*

	 * Allocate channel memory that might not have been allocated

	 * when the driver was first loaded.

			/*

			 * Okay to malloc with GFP_KERNEL, we are not at

			 * interrupt context, and there are no locks held.

 Set up channel variables */

 .25 second delay */

	/*

	 * Initialize board structure elements.

 Set up channel variables */

	/*

	 * Initialize board structure elements.

 Set up channel variables */

	/*

	 *Figure the number of characters in the buffer.

	 *Exit immediately if none.

	/*

	 *If the device is not open, or CREAD is off, flush

	 *input data and return immediately.

 Force queue flow control to be released, if needed */

	/*

	 * If we are throttled, simply don't read any data.

	/*

	 * len now contains the most amount of data we can copy,

	 * bounded either by the flip buffer size or the amount

	 * of data the card actually has pending...

			/*

			 * If conditions are such that ld needs to see all

			 * UART errors, we will have to walk each character

			 * and error byte and send them to the buffer one at

			 * a time.

				/*

				 * Give the Linux ld the flags in the format it

				 * likes.

 Flip queue if needed */

 Tell the tty layer its okay to "eat" the data now */

	/*

	 * Test for a VIRTUAL carrier transition to HIGH.

		/*

		 * When carrier rises, wake any threads waiting

		 * for carrier in the open routine.

	/*

	 * Test for a PHYSICAL carrier transition to HIGH.

		/*

		 * When carrier rises, wake any threads waiting

		 * for carrier in the open routine.

	/*

	 *  Test for a PHYSICAL transition to low, so long as we aren't

	 *  currently ignoring physical transitions (which is what "virtual

	 *  carrier" indicates).

	 *

	 *  The transition of the virtual carrier to low really doesn't

	 *  matter... it really only means "ignore carrier state", not

	 *  "make pretend that carrier is there".

		/*

		 *	When carrier drops:

		 *

		 *	Drop carrier on all open units.

		 *

		 *	Flush queues, waking up any task waiting in the

		 *	line discipline.

		 *

		 *	Send a hangup to the control terminal.

		 *

		 *	Enable all select calls.

	/*

	 *  Make sure that our cached values reflect the current reality.

 Store how much space we have left in the queue */

	/*

	 * Check to see if we should enforce flow control on our queue because

	 * the ld (or user) isn't reading data out of our queue fast enuf.

	 *

	 * NOTE: This is done based on what the current flow control of the

	 * port is set for.

	 *

	 * 1) HWFLOW (RTS) - Turn off the UART's Receive interrupt.

	 *	This will cause the UART's FIFO to back up, and force

	 *	the RTS signal to be dropped.

	 * 2) SWFLOW (IXOFF) - Keep trying to send a stop character to

	 *	the other side, in hopes it will stop sending data to us.

	 * 3) NONE - Nothing we can do.  We will simply drop any extra data

	 *	that gets sent into us when the queue fills up.

 HWFLOW */

 SWFLOW */

	/*

	 * Check to see if we should unenforce flow control because

	 * ld (or user) finally read enuf data out of our queue.

	 *

	 * NOTE: This is done based on what the current flow control of the

	 * port is set for.

	 *

	 * 1) HWFLOW (RTS) - Turn back on the UART's Receive interrupt.

	 *	This will cause the UART's FIFO to raise RTS back up,

	 *	which will allow the other side to start sending data again.

	 * 2) SWFLOW (IXOFF) - Send a start character to

	 *	the other side, so it will start sending data to us again.

	 * 3) NONE - Do nothing. Since we didn't do anything to turn off the

	 *	other side, we don't need to do anything now.

 HWFLOW */

 SWFLOW */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright 2003 Digi International (www.digi.com)

 *	Scott H Kilau <Scott_Kilau at digi dot com>

 *

 *	NOTE TO LINUX KERNEL HACKERS:  DO NOT REFORMAT THIS CODE!

 *

 *	This is shared code between Digi's CVS archive and the

 *	Linux Kernel sources.

 *	Changing the source just for reformatting needlessly breaks

 *	our CVS diff history.

 *

 *	Send any bug fixes/changes to:  Eng.Linux at digi dot com.

 *	Thank you.

 *

 For udelay */

 For read[bwl]/write[bwl] */

 For struct async_serial */

 For the various UART offsets */

 Driver main header file */

	/*

	 * The Enhanced Register Set may only be accessed when

	 * the Line Control Register is set to 0xBFh.

 Turn on CTS flow control, turn off IXON flow control */

 Write old LCR value back out, which turns enhanced access off */

	/*

	 * Enable interrupts for CTS flow, turn off interrupts for

	 * received XOFF chars

 Set the usual FIFO values */

	/*

	 * The Enhanced Register Set may only be accessed when

	 * the Line Control Register is set to 0xBFh.

 Turn on IXON flow control, turn off CTS flow control */

 Now set our current start/stop chars while in enhanced mode */

 Write old LCR value back out, which turns enhanced access off */

	/*

	 * Disable interrupts for CTS flow, turn on interrupts for

	 * received XOFF chars

 Set the usual FIFO values */

	/*

	 * The Enhanced Register Set may only be accessed when

	 * the Line Control Register is set to 0xBFh.

 Turn off IXON flow control, turn off CTS flow control */

 Write old LCR value back out, which turns enhanced access off */

	/*

	 * Disable interrupts for CTS flow, turn off interrupts for

	 * received XOFF chars

 Set the usual FIFO values */

	/*

	 * The Enhanced Register Set may only be accessed when

	 * the Line Control Register is set to 0xBFh.

 Turn on RTS flow control, turn off IXOFF flow control */

 Write old LCR value back out, which turns enhanced access off */

 Enable interrupts for RTS flow */

 Set the usual FIFO values */

	/*

	 * The Enhanced Register Set may only be accessed when

	 * the Line Control Register is set to 0xBFh.

 Turn on IXOFF flow control, turn off RTS flow control */

 Now set our current start/stop chars while in enhanced mode */

 Write old LCR value back out, which turns enhanced access off */

 Disable interrupts for RTS flow */

 Set the usual FIFO values */

	/*

	 * The Enhanced Register Set may only be accessed when

	 * the Line Control Register is set to 0xBFh.

 Turn off IXOFF flow control, turn off RTS flow control */

 Write old LCR value back out, which turns enhanced access off */

 Disable interrupts for RTS flow */

 Set the usual FIFO values */

/*

 * cls_clear_break.

 * Determines whether its time to shut off break condition.

 *

 * No locks are assumed to be held when calling this function.

 * channel lock is held and released in this function.

 Turn break off, and unset some variables */

 Make the UART raise any of the output signals we want up */

 cache head and tail of queue */

 Get our cached LSR */

 Store how much space we have left in the queue */

	/*

	 * Create a mask to determine whether we should

	 * insert the character (if any) into our queue.

		/*

		 * Grab the linestatus register, we need to

		 * check to see if there is any data to read

 Break out if there is no data to fetch */

		/*

		 * Discard character if we are ignoring the error mask

		 * which in this case is the break signal.

		/*

		 * If our queue is full, we have no choice but to drop some

		 * data. The assumption is that HWFLOW or SWFLOW should have

		 * stopped things way way before we got to this point.

		 *

		 * I decided that I wanted to ditch the oldest data first,

		 * I hope thats okay with everyone? Yes? Good.

 Add to, and flip head if needed */

	/*

	 * Write new final heads to channel structure.

 No data to write to the UART */

 If port is "stopped", don't send any data to the UART */

 We have to do it this way, because of the EXAR TXFIFO count bug. */

 cache tail of queue */

 Find minimum of the FIFO space, versus queue length */

 Update the final tail */

	/*

	 * Scrub off lower bits.

	 * They signify delta's, which I don't care about

	 * Keep DDCD and DDSR though

 Parse the ISR register for the specific port */

	/*

	 * No need to verify board pointer, it was already

	 * verified in the interrupt routine.

 Here we try to figure out what caused the interrupt to happen */

 Bail if no pending interrupt on port */

 Receive Interrupt pending */

 Read data from uart -> queue */

 Transmit Hold register empty pending */

 Transfer data (if any) from Write Queue -> UART. */

		/*

		 * CTS/RTS change of state:

		 * Don't need to do anything, the cls_parse_modem

		 * below will grab the updated modem signals.

 Parse any modem signal changes */

 Channel lock MUST be held before calling this function! */

 Check to see if the UART feels it completely flushed FIFO */

 Channel lock MUST be held before calling this function! */

	/*

	 * For complete POSIX compatibility, we should be purging the

	 * read FIFO in the UART here.

	 *

	 * However, clearing the read FIFO (UART_FCR_CLEAR_RCVR) also

	 * incorrectly flushes write data as well as just basically trashing the

	 * FIFO.

	 *

	 * Presumably, this is a bug in this UART.

/*

 * cls_param()

 * Send any/all changes to the line to the UART.

	/*

	 * If baud rate is zero, flush queues, and set mval to drop DTR.

 The baudrate is B0 so all modem lines are to be dropped. */

	/*

	 * Not all platforms support mark/space parity,

	 * so this will hide behind an ifdef.

		/*

		 * If start/stop is set to disable,

		 * then we should disable flow control.

		/*

		 * If start/stop is set to disable,

		 * then we should disable flow control.

 get current status of the modem signals now */

/*

 * cls_intr()

 *

 * Classic specific interrupt handler.

 Lock out the slow poller from running on this board. */

	/*

	 * Check the board's global interrupt offset to see if we

	 * acctually do have an interrupt pending on us.

 At this point, we have at least SOMETHING to service, dig further. */

 Parse each port to find out what caused the interrupt */

 Inits UART */

	/*

	 * The Enhanced Register Set may only be accessed when

	 * the Line Control Register is set to 0xBFh.

 Turn on Enhanced/Extended controls */

 Write old LCR value back out, which turns enhanced access off */

 Clear out UART and FIFO */

/*

 * Turns off UART.

 Stop all interrupts from accurring. */

/*

 * cls_get_uarts_bytes_left.

 * Returns 0 is nothing left in the FIFO, returns 1 otherwise.

 *

 * The channel lock MUST be held by the calling function.

 Determine whether the Transmitter is empty or not */

/*

 * cls_send_break.

 * Starts sending a break thru the UART.

 *

 * The channel lock MUST be held by the calling function.

 Tell the UART to start sending the break */

/*

 * cls_send_immediate_char.

 * Sends a specific character as soon as possible to the UART,

 * jumping over any bytes that might be in the write queue.

 *

 * The channel lock MUST be held by the calling function.

 SPDX-License-Identifier: GPL-2.0+

/************************************************************************

 * Copyright 2003 Digi International (www.digi.com)

 *

 * Copyright (C) 2004 IBM Corporation. All rights reserved.

 *

 * Contact Information:

 * Scott H Kilau <Scott_Kilau@digi.com>

 * Wendy Xiong   <wendyx@us.ibm.com>

 *

 For udelay */

 For the various UART offsets */

 Driver main header file */

/*

 * This function allows calls to ensure that all outstanding

 * PCI writes have been completed, by doing a PCI read against

 * a non-destructive, read-only location on the Neo card.

 *

 * In this case, we are reading the DVID (Read-only Device Identification)

 * value of the Neo card.

 Turn on auto CTS flow control */

 Turn off auto Xon flow control */

 Why? Becuz Exar's spec says we have to zero it out before setting it */

 Turn on UART enhanced bits */

 Turn on table D, with 8 char hi/low watermarks */

 Feed the UART our trigger levels */

 Turn on auto RTS flow control */

 Turn off auto Xoff flow control */

 Why? Becuz Exar's spec says we have to zero it out before setting it */

 Turn on UART enhanced bits */

	/*

	 * From the Neo UART spec sheet:

	 * The auto RTS/DTR function must be started by asserting

	 * RTS/DTR# output pin (MCR bit-0 or 1 to logic 1 after

	 * it is enabled.

 Turn off auto CTS flow control */

 Turn on auto Xon flow control */

 Why? Becuz Exar's spec says we have to zero it out before setting it */

 Turn on UART enhanced bits */

 Tell UART what start/stop chars it should be looking for */

 Turn off auto RTS flow control */

 Turn on auto Xoff flow control */

 Why? Becuz Exar's spec says we have to zero it out before setting it */

 Turn on UART enhanced bits */

 Turn on table D, with 8 char hi/low watermarks */

 Tell UART what start/stop chars it should be looking for */

 Turn off auto RTS flow control */

 Turn off auto Xoff flow control */

 Why? Becuz Exar's spec says we have to zero it out before setting it */

 Turn on UART enhanced bits */

 Turn on table D, with 8 char hi/low watermarks */

 Turn off auto CTS flow control */

 Turn off auto Xon flow control */

 Why? Becuz Exar's spec says we have to zero it out before setting it */

 Turn on UART enhanced bits */

 Turn on table D, with 8 char hi/low watermarks */

 if hardware flow control is set, then skip this whole thing */

 Tell UART what start/stop chars it should be looking for */

 cache head and tail of queue */

 Get our cached LSR */

 Store how much space we have left in the queue */

	/*

	 * If the UART is not in FIFO mode, force the FIFO copy to

	 * NOT be run, by setting total to 0.

	 *

	 * On the other hand, if the UART IS in FIFO mode, then ask

	 * the UART to give us an approximation of data it has RX'ed.

		/*

		 * EXAR chip bug - RX FIFO COUNT - Fudge factor.

		 *

		 * This resolves a problem/bug with the Exar chip that sometimes

		 * returns a bogus value in the rfifo register.

		 * The count can be any where from 0-3 bytes "off".

		 * Bizarre, but true.

	/*

	 * Finally, bound the copy to make sure we don't overflow

	 * our own queue...

	 * The byte by byte copy loop below this loop this will

	 * deal with the queue overflow possibility.

		/*

		 * Grab the linestatus register, we need to check

		 * to see if there are any errors in the FIFO.

		/*

		 * Break out if there is a FIFO error somewhere.

		 * This will allow us to go byte by byte down below,

		 * finding the exact location of the error.

 Make sure we don't go over the end of our queue */

		/*

		 * Cut down n even further if needed, this is to fix

		 * a problem with memcpy_fromio() with the Neo on the

		 * IBM pSeries platform.

		 * 15 bytes max appears to be the magic number.

		/*

		 * Since we are grabbing the linestatus register, which

		 * will reset some bits after our read, we need to ensure

		 * we don't miss our TX FIFO emptys.

 Copy data from uart to the queue */

		/*

		 * Since RX_FIFO_DATA_ERROR was 0, we are guaranteed

		 * that all the data currently in the FIFO is free of

		 * breaks and parity/frame/orun errors.

 Add to and flip head if needed */

	/*

	 * Create a mask to determine whether we should

	 * insert the character (if any) into our queue.

	/*

	 * Now cleanup any leftover bytes still in the UART.

	 * Also deal with any possible queue overflow here as well.

		/*

		 * Its possible we have a linestatus from the loop above

		 * this, so we "OR" on any extra bits.

		/*

		 * If the chip tells us there is no more data pending to

		 * be read, we can then leave.

		 * But before we do, cache the linestatus, just in case.

 No need to store this bit */

		/*

		 * Since we are grabbing the linestatus register, which

		 * will reset some bits after our read, we need to ensure

		 * we don't miss our TX FIFO emptys.

		/*

		 * Discard character if we are ignoring the error mask.

		/*

		 * If our queue is full, we have no choice but to drop some data.

		 * The assumption is that HWFLOW or SWFLOW should have stopped

		 * things way way before we got to this point.

		 *

		 * I decided that I wanted to ditch the oldest data first,

		 * I hope thats okay with everyone? Yes? Good.

 Ditch any remaining linestatus value. */

 Add to and flip head if needed */

	/*

	 * Write new final heads to channel structure.

 No data to write to the UART */

 If port is "stopped", don't send any data to the UART */

	/*

	 * If FIFOs are disabled. Send data directly to txrx register

	/*

	 * We have to do it this way, because of the EXAR TXFIFO count bug.

 cache head and tail of queue */

 Find minimum of the FIFO space, versus queue length */

 Add and flip queue if needed */

 Update the final tail */

 Scrub off lower bits. They signify delta's, which I don't care about */

 Keep DDCD and DDSR though */

 Make the UART raise any of the output signals we want up */

 flush write operation */

/*

 * Flush the WRITE FIFO on the Neo.

 *

 * NOTE: Channel lock MUST be held before calling this function!

 Check to see if the UART feels it completely flushed the FIFO. */

/*

 * Flush the READ FIFO on the Neo.

 *

 * NOTE: Channel lock MUST be held before calling this function!

 Check to see if the UART feels it completely flushed the FIFO. */

/*

 * No locks are assumed to be held when calling this function.

 Turn break off, and unset some variables */

 flush write operation */

/*

 * Parse the ISR register.

 Here we try to figure out what caused the interrupt to happen */

 Bail if no pending interrupt */

		/*

		 * Yank off the upper 2 bits, which just show that the FIFO's are enabled.

 Read data from uart -> queue */

 Call our tty layer to enforce queue flow control if needed. */

 Transfer data (if any) from Write Queue -> UART. */

			/*

			 * Since the UART detected either an XON or

			 * XOFF match, we need to figure out which

			 * one it was, so we can suspend or resume data flow.

 Is output stopped right now, if so, resume it */

			/*

			 * If we get here, this means the hardware is doing auto flow control.

			 * Check to see whether RTS/DTR or CTS/DSR caused this interrupt.

 Which pin is doing auto flow? RTS or DTR? */

 Parse any modem signal changes */

 Read data from uart -> queue */

	/*

	 * This is a special flag. It indicates that at least 1

	 * RX error (parity, framing, or break) has happened.

	 * Mark this in our struct, which will tell me that I have

	 *to do the special RX+LSR read for this FIFO load.

	/*

	 * The next 3 tests should *NOT* happen, as the above test

	 * should encapsulate all 3... At least, thats what Exar says.

		/*

		 * Rx Oruns. Exar says that an orun will NOT corrupt

		 * the FIFO. It will just replace the holding register

		 * with this new data byte. So basically just ignore this.

		 * Probably we should eventually have an orun stat in our driver...

 Transfer data (if any) from Write Queue -> UART. */

 Transfer data (if any) from Write Queue -> UART. */

/*

 * neo_param()

 * Send any/all changes to the line to the UART.

	/*

	 * If baud rate is zero, flush queues, and set mval to drop DTR.

	/*

	 * Not all platforms support mark/space parity,

	 * so this will hide behind an ifdef.

 Set new start/stop chars */

 If start/stop is set to disable, then we should disable flow control */

 If start/stop is set to disable, then we should disable flow control */

	/*

	 * Adjust the RX FIFO Trigger level if baud is less than 9600.

	 * Not exactly elegant, but this is needed because of the Exar chip's

	 * delay on firing off the RX FIFO interrupt on slower baud rates.

 Get current status of the modem signals now */

/*

 * jsm_neo_intr()

 *

 * Neo specific interrupt handler.

 Lock out the slow poller from running on this board. */

	/*

	 * Read in "extended" IRQ information from the 32bit Neo register.

	 * Bits 0-7: What port triggered the interrupt.

	 * Bits 8-31: Each 3bits indicate what type of interrupt occurred.

 At this point, we have at least SOMETHING to service, dig further... */

 Loop on each port */

 Check current port to see if it has interrupt pending */

 Remove this port + type from uart_poll */

 If no type, just ignore it, and move onto next port */

 Switch on type of interrupt we have */

			/*

			 * RXRDY Time-out is cleared by reading data in the

			* RX FIFO until it falls below the trigger level.

 Verify the port is in range. */

 Call our tty layer to enforce queue flow control if needed. */

			/*

			 * RXRDY and RX LINE Status (logic OR of LSR[4:1])

			/*

			 * TXRDY interrupt clears after reading ISR register for the UART channel.

			/*

			 * Yes, this is odd...

			 * Why would I check EVERY possibility of type of

			 * interrupt, when we know its TXRDY???

			 * Becuz for some reason, even tho we got triggered for TXRDY,

			 * it seems to be occasionally wrong. Instead of TX, which

			 * it should be, I was getting things like RXDY too. Weird.

			/*

			 * MSR or flow control was seen.

			/*

			 * The UART triggered us with a bogus interrupt type.

			 * It appears the Exar chip, when REALLY bogged down, will throw

			 * these once and awhile.

			 * Its harmless, just ignore it and move on.

/*

 * Neo specific way of turning off the receiver.

 * Used as a way to enforce queue flow control when in

 * hardware flow control mode.

 flush write operation */

/*

 * Neo specific way of turning on the receiver.

 * Used as a way to un-enforce queue flow control when in

 * hardware flow control mode.

 flush write operation */

 flush write operation */

 flush write operation */

/*

 * neo_uart_init

 Clear out UART and FIFO */

 Assert any signals we want up */

/*

 * Make the UART completely turn off.

 Turn off UART enhanced bits */

 Stop all interrupts from occurring. */

 We must cache the LSR as some of the bits get reset once read... */

 Determine whether the Transmitter is empty or not */

 Channel lock MUST be held by the calling function! */

	/*

	 * Set the time we should stop sending the break.

	 * If we are already sending a break, toss away the existing

	 * time to stop, and use this new value instead.

 Tell the UART to start sending the break */

 flush write operation */

/*

 * neo_send_immediate_char.

 *

 * Sends a specific character as soon as possible to the UART,

 * jumping over any bytes that might be in the write queue.

 *

 * The channel lock MUST be held by the calling function.

 flush write operation */

 SPDX-License-Identifier: GPL-2.0

/*

 *  Probe for F81216A LPC to 4 UART

 *

 *  Copyright (C) 2014-2016 Ricardo Ribalda, Qtechnology A/S

/*

 * F81216H clock source register, the value and mask is the same with F81866,

 * but it's on F0h.

 *

 * Clock speeds for UART (register F0h)

 * 00: 1.8432MHz.

 * 01: 18.432MHz.

 * 10: 24MHz.

 * 11: 14.769MHz.

/*

 * F81866/966 registers

 *

 * The IRQ setting mode of F81866/966 is not the same with F81216 series.

 *	Level/Low: IRQ_MODE0:0, IRQ_MODE1:0

 *	Edge/High: IRQ_MODE0:1, IRQ_MODE1:0

 *

 * Clock speeds for UART (register F2h)

 * 00: 1.8432MHz.

 * 01: 18.432MHz.

 * 10: 24MHz.

 * 11: 14.769MHz.

 Force to deactive all SuperIO in this base_port */

 Hardware do not support same RTS level on send and receive */

 Only the first port supports delays */

 128Bytes FIFO */

 Default 16Bytes FIFO */

 set uart clock for high speed serial mode */

 leave clock speed untouched */

	/*

	 * We'll use serial8250_do_set_termios() for baud = 0, otherwise It'll

	 * crash on baudrate_table[i] % baud with "division by zero".

 Don't change clocksource with unknown PID */

 No RS485 Auto direction functional */

 SPDX-License-Identifier: GPL-2.0

/*

 *  Probe module for 8250/16550-type Exar chips PCI serial ports.

 *

 *  Based on drivers/tty/serial/8250/8250_pci.c,

 *

 *  Copyright (C) 2017 Sudip Mukherjee, All Rights Reserved.

 8X sampling rate select */

 Sleep mode */

 Device identification */

 Feature Control Register */

 IrDa data encode select */

 Auto 485 half duplex dir ctl */

 FIFO trigger table A */

 FIFO trigger table B */

 FIFO trigger table C */

 FIFO trigger table D programmable */

 Tx FIFO trigger level write-only */

 Rx FIFO trigger level write-only */

 MPIOINT[7:0] */

 MPIOLVL[7:0] */

 MPIO3T[7:0] */

 MPIOINV[7:0] */

 MPIOSEL[7:0] */

 MPIOOD[7:0] */

 MPIOINT[15:8] */

 MPIOLVL[15:8] */

 MPIO3T[15:8] */

 MPIOINV[15:8] */

 MPIOSEL[15:8] */

 MPIOOD[15:8] */

/*

 * IOT2040 MPIO wiring semantics:

 *

 * MPIO		Port	Function

 * ----		----	--------

 * 0		2 	Mode bit 0

 * 1		2	Mode bit 1

 * 2		2	Terminate bus

 * 3		-	<reserved>

 * 4		3	Mode bit 0

 * 5		3	Mode bit 1

 * 6		3	Terminate bus

 * 7		-	<reserved>

 * 8		2	Enable

 * 9		3	Enable

 * 10		-	Red LED

 * 11..15	-	<unused>

 IOT2040 MPIOs 0..7 */

 both RS232 */

 reserved pins as input */

 IOT2040 MPIOs 8..15 */

 enable & LED as outputs */

/**

 * struct exar8250_board - board information

 * @num_ports: number of serial ports

 * @reg_shift: describes UART register mapping in PCI memory

 * @setup: quirk run at ->probe() stage

 * @exit: quirk run at ->remove() stage

	/*

	 * Exar UARTs have a SLEEP register that enables or disables each UART

	 * to enter sleep mode separately. On the XR17V35x the register

	 * is accessible to each UART at the UART_EXAR_SLEEP offset, but

	 * the UART channel may only write to the corresponding bit.

/*

 * XR17V35x UARTs have an extra fractional divisor register (DLD)

 * Calculate divisor with extra 4-bit fractional portion

 Preserve bits not related to baudrate; DLD[7:4]. */

	/*

	 * First enable access to IER [7:5], ISR [5:4], FCR [5:4],

	 * MCR [7:5] and MSR [7:0]

	/*

	 * Make sure all interrups are masked until initialization is

	 * complete and the FIFOs are cleared

	/*

	 * XR17V35x UARTs have an extra divisor register, DLD that gets enabled

	 * with when DLAB is set which will cause the device to incorrectly match

	 * and assign port type to PORT_16650. The EFR for this UART is found

	 * at offset 0x09. Instead check the Deice ID (DVID) register

	 * for a 2, 4 or 8 port UART.

	/*

	 * Setup Multipurpose Input/Output pins.

	/*

	 * The Commtech adapters required the MPIOs to be driven low. The Exar

	 * devices will export them as GPIOs, so we pre-configure them safely

	 * as inputs.

 Configure GPIO as inputs for Commtech adapters

 Configure GPIO as outputs for SeaLevel adapters

/*

 * For SIMATIC IOT2000, only IOT2040 and its variants have the Exar device,

 * IOT2020 doesn't have. Therefore it is sufficient to match on the common

 * board name after the device was found.

	/*

	 * Setup the UART clock for the devices on expansion slot to

	 * half the clock speed of the main chip (which is 125MHz)

 Setup Multipurpose Input/Output pins. */

 Clear all PCI interrupts by reading INT0. No effect on IIR */

 Clear INT0 for Expansion Interface slave ports, too */

/*

 * These Exar UARTs have an extra interrupt indicator that could fire for a

 * few interrupts that are not presented/cleared through IIR.  One of which is

 * a wakeup interrupt when coming out of sleep.  These interrupts are only

 * cleared by reading global INT0 or INT1 registers as interrupts are

 * associated with channel 0. The INT[3:0] registers _are_ accessible from each

 * channel's address space, but for the sake of bus efficiency we register a

 * dedicated handler at the PCI device level to handle them.

 Clear interrupts */

 Ensure that every init quirk is properly torn down */

 Exar Corp. XR17C15[248] Dual/Quad/Octal UART */

 Exar Corp. XR17V[48]35[248] Dual/Quad/Octal/Hexa PCIe UARTs */

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 2005 Russell King.

 *  Data taken from include/asm-i386/serial.h

 SPDX-License-Identifier: GPL-2.0

/*

 * 8250_mid.c - Driver for UART on Intel Penwell and various other Intel SOCs

 *

 * Copyright (C) 2015 Intel Corporation

 * Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>

 Intel MID Specific registers */

****************************************************************************/

 Rx DMA */

 Tx DMA */

 UART */

	/*

	 * Device 0000:00:04.0 is not a real HSU port. It provides a global

	 * register set for all HSU ports, although it has the same PCI ID.

	 * Skip it here.

 Falling back to PIO mode if DMA probing fails */

****************************************************************************/

 Gracefully handle the B0 case: fall back to B9600 */

 Find prescaler value that satisfies Fuart < Fref */

 baud rate too high */

 PLL case */

 Get Fuart closer to Fref */

 core uses ps = 16 always */

 set PS */

 set MUL */

 SPDX-License-Identifier: GPL-2.0

/*

 * SGI IOC3 8250 UART driver

 *

 * Copyright (C) 2019 Thomas Bogendoerfer <tbogendoerfer@suse.de>

 *

 * based on code Copyright (C) 2005 Stanislaw Skowronek <skylark@unaligned.org>

 *               Copyright (C) 2014 Joshua Kinard <kumba@gentoo.org>

 no interrupt -> use polling */

 Register serial ports with 8250.c */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Serial Port driver for Tegra devices

 *

 *  Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.

 SPDX-License-Identifier: GPL-2.0

/*

 * Serial port driver for BCM2835AUX UART

 *

 * Copyright (C) 2016 Martin Sperl <kernel@martin.sperl.org>

 *

 * Based on 8250_lpc18xx.c:

 * Copyright (C) 2015 Joachim Eastwood <manabian@gmail.com>

 *

 * The bcm2835aux is capable of RTS auto flow-control, but this driver doesn't

 * take advantage of it yet.  When adding support, be sure not to enable it

 * simultaneously to rs485.

 Receiver enable */

 Transmitter enable */

 RTS set by RX fill level */

 CTS stops transmitter */

 RTS set until 3 chars left */

 RTS set until 2 chars left */

 RTS set until 1 chars left */

 RTS set until 4 chars left */

 Invert auto RTS polarity */

 Invert auto CTS polarity */

/**

 * struct bcm2835aux_data - driver private data of BCM2835 auxiliary UART

 * @clk: clock producer of the port's uartclk

 * @line: index of the port's serial8250_ports[] entry

 * @cntl: cached copy of CNTL register

	/*

	 * On the bcm2835aux, the MCR register contains no other

	 * flags besides RTS.  So no need for a read-modify-write.

 allocate the custom structure */

 initialize data */

 initialize cached copy with power-on reset value */

 get the clock - this also enables the HW */

 get the interrupt */

 map the main registers */

 Check for a fixed line number */

 enable the clock as a last step */

	/* the HW-clock divider for bcm2835aux is 8,

	 * but 8250 expects a divider of 16,

	 * so we have to multiply the actual clock by 2

	 * to get identical baudrates.

 register the port */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for the 98626/98644/internal serial interface on hp300/hp400

 * (based on the National Semiconductor INS8250/NS16550AF/WD16C552 UARTs)

 *

 * Ported from 2.2 and modified to use the normal 8250 driver

 * by Kars de Jong <jongk@linux-m68k.org>, May 2004.

 next port */

 line (tty) number */

 Offset to UART registers from base of DCA */

 ID (read), reset (write) */

 Interrupt control        */

 Interrupt control */

 Master interrupt enable  */

 Base address of the Frodo part */

/*

 * Where we find the 8250-like APCI ports, and how far apart they are.

/*

 * Parse the bootinfo to find descriptions for headless console and

 * debug serial ports and register them with the 8250 driver.

 Memory mapped I/O */

 Check for APCI console */

 Enable board-interrupts */

 CONFIG_SERIAL_8250_CONSOLE */

 Already got it. */

 Memory mapped I/O */

 Enable board-interrupts */

 Reset the DCA */

	/* These models have the Frodo chip.

	 * Port 0 is reserved for the Apollo Domain keyboard.

	 * Port 1 is either the console or the DCA.

		/* Port 1 is the console on a 425e, on other machines it's

		 * mapped to DCA.

 Create new serial device */

 Memory mapped I/O */

 XXX - no interrupt support yet */

 Any boards found? */

 Disable board-interrupts */

 SPDX-License-Identifier: GPL-2.0

/*

 *  Probe module for 8250/16550-type PCI serial ports.

 *

 *  Based on drivers/char/serial.c, by Linus Torvalds, Theodore Ts'o.

 *

 *  Copyright (C) 2001 Russell King, All Rights Reserved.

/*

 * init function returns:

 *  > 0 - number of ports

 *  = 0 - use board->num_ports

 *  < 0 - error

/*

 * ADDI-DATA GmbH communication cards <info@addi-data.com>

/*

 * AFAVLAB uses a different mixture of BARs and offsets

 * Not that ugly ;) -- HW

/*

 * HP's Remote Management Console.  The Diva chip came in several

 * different versions.  N-class, L2000 and A500 have two Diva chips, each

 * with 3 UARTs (the third UART on the second chip is unused).  Superdome

 * and Keystone have one Diva chip with 3 UARTs.  Some later machines have

 * one Diva chip, but it has been expanded to 5 UARTs.

/*

 * HP's Diva chip puts the 4th/5th serial port further out, and

 * some serial ports are supposed to be hidden on certain models.

/*

 * Added for EKF Intel i960 serial boards

 is firmware started? */

 RESET value */

/*

 * Some PCI serial cards using the PLX 9050 PCI interface chip require

 * that the card interrupt be explicitly enabled or disabled.  This

 * seems to be mainly needed on card using the PLX which also use I/O

 * mapped memory.

		/*

		 * As the megawolf cards have the int pins active

		 * high, and have 2 UART chips, both ints must be

		 * enabled on the 9050. Also, the UARTS are set in

		 * 16450 mode by default, so we have to enable the

		 * 16C950 'enhanced' mode so that we can use the

		 * deep FIFOs

	/*

	 * enable/disable interrupts

	/*

	 * Read the register back to ensure that it took effect.

	/*

	 * disable interrupts

		/*

		 * Read the register back to ensure that it took effect.

 Disable the CPU Interrupt */

 MITE registers */

 Disable the CPU Interrupt */

 SBS Technologies Inc. PMC-OCTPRO and P-OCTAL cards */

 first four channels map to 0, 0x100, 0x200, 0x300 */

 last four channels map to 0x1000, 0x1100, 0x1200, 0x1300 */

 we have only 8 ports on PMC-OCTALPRO */

/*

* This does initialization for PMC OCTALPRO cards:

* maps the device memory, resets the UARTs (needed, bc

* if the module is removed and inserted again, the card

* is in the sleep mode) and enables global interrupt.

 global control register offset for SBS PMC-OctalPro */

 Set bit-4 Control Register (UART RESET) in to reset the uarts */

 Set bit-2 (INTENABLE) of Control Register */

/*

 * Disables the global interrupt of PMC-OctalPro

 FIXME: What if resource_len < OCT_REG_CR_OFF */

/*

 * SIIG serial cards have an PCI interface chip which also controls

 * the UART clocking frequency. Each UART can be clocked independently

 * (except cards equipped with 4 UARTs) and initial clocking settings

 * are stored in the EEPROM chip. It can cause problems because this

 * version of serial driver doesn't support differently clocked UART's

 * on single PCI card. To prevent this, initialization functions set

 * high frequency clocking for all UART's on given card. It is safe (I

 * hope) because it doesn't touch EEPROM settings to prevent conflicts

 * with other OSes (like M$ DOS).

 *

 *  SIIG support added by Andrey Panin <pazke@donpac.ru>, 10/1999

 *

 * There is two family of SIIG serial cards with different PCI

 * interface chip and different configuration methods:

 *     - 10x cards have control registers in IO and/or memory space;

 *     - 20x cards have control registers in standard PCI configuration space.

 *

 * Note: all 10x cards have PCI device ids 0x10..

 *       all 20x cards have PCI device ids 0x20..

 *

 * There are also Quartet Serial cards which use Oxford Semiconductor

 * 16954 quad UART PCI chip clocked by 18.432 MHz quartz.

 *

 * Note: some SIIG cards are probed by the parport_serial object.

 1S */

 2S, 2S1P */

 1S1P, 4S */

 Change clock frequency for the first UART. */

 If this card has 2 UART, we have to do the same with second UART. */

/*

 * Timedia has an explosion of boards, and to avoid the PCI table from

 * growing *huge*, we use this function to collapse some 70 entries

 * in the PCI table into one, for sanity's and compactness's sake.

/*

 * There are nearly 70 different Timedia/SUNIX PCI serial devices.  Instead of

 * listing them individually, this driver merely grabs them all with

 * PCI_ANY_ID.  Some of these devices, however, also feature a parallel port,

 * and should be left free to be claimed by parport_serial instead.

	/*

	 * Check the third digit of the subdevice ID

	 * (0,2,3,5,6: serial only -- 7,8,9: serial + parallel)

/*

 * Timedia/SUNIX uses a mixture of BARs and offsets

 * Ugh, this is ugly as all hell --- TYT

 BAR 2 */

 BAR 3 */

 BAR 4 */

 BAR 5 */

/*

 * Some Titan cards are also a little weird

 Enable CPU Interrupt */

	/*

	 * Set device window address and size in BAR0, while acknowledging that

	 * the resource structure may contain a translated address that differs

	 * from the address the device responds to.

 Set window access to go to RAMSEL IO address space */

 Enable IO Bus Interrupt 0 */

 Enable CPU Interrupt */

 UART Port Control Register */

 enable the transceiver */

		/* netmos apparently orders BARs by datasheet layout, so serial

		 * ports get BARs 0 and 3 (or 1 and 4 for memmapped)

/* the 99xx series comes with a range of device IDs and a variety

 * of capabilities:

 *

 * 9900 has varying capabilities and can cascade to sub-controllers

 *   (cascading should be purely internal)

 * 9904 is hardwired with 4 serial ports

 * 9912 and 9922 are hardwired with 2 serial ports

		/* two possibilities: 0x30ps encodes number of parallel and

		 * serial ports, or 0x1000 indicates *something*. This is not

		 * immediately obvious, since the 2s1p+4s configuration seems

		 * to offer all functionality on functions 0..2, while still

		 * advertising the same function 3 as the 4s+2s1p config.

 subdevice 0x00PS means <P> parallel, <S> serial */

 FALLTHROUGH on all */

/*

 * These chips are available with optionally one parallel port and up to

 * two serial ports. Unfortunately they all have the same product id.

 *

 * Basic configuration is done over a region of 32 I/O ports. The base

 * ioport is called INTA or INTC, depending on docs/other drivers.

 *

 * The region of the 32 I/O ports is configured in POSIO0R...

 registers */

 I/O space size */

 I/O space size (bits 26-24; 8 bytes = 011b) */

 I/O space size (bits 26-24; 32 bytes = 101b) */

 Decoding speed (1 = slow, 2 = medium, 3 = fast) */

 enable IO_Space bit */

 inta_addr are the configuration addresses of the ITE */

 search for the base-ioport */

 write POSIO0R - speed | size | ioport */

 write INTCBAR - ioport */

 ioport connected */

 start of undocumented type checking (see parport_pc.c) */

 ITE8871 (1P) */

 ITE8875 (1P) */

 ITE8872 (2S1P) */

 ITE8873 (1S) */

 ITE8874 (2S) */

 configure all serial ports */

 read the I/O port from the device */

 the actual base address */

 write the ioport to the UARTBAR */

 clear half the reg */

 set the ioport */

 get current config */

 disable interrupts (UARTx_Routing[3:0]) */

 activate the UART (UARTx_En) */

 write new config with activated UART */

 the device has no UARTs if we get here */

 the ioport is bit 0-15 in POSIO0R */

/*

 * EndRun Technologies.

 * Determine the number of ports available on the device.

 EndRun device is all 0xexxx */

 EndRun device */

/*

 * Oxford Semiconductor Inc.

 * Check that device is part of the Tornado range of devices, then determine

 * the number of ports available on the device.

 OxSemi Tornado devices are all 0xCxxx */

 Tornado device */

 Quatech devices have their own extra interface features */

 Needed by pci_quatech calls below */

 Set up the clocking */

 For now just warn about RS422 */

 RTS will control by MCR if this bit is 0 */

 only worked with FINTEK_RTS_CONTROL_BY_HW on */

 We should do proper H/W transceiver setting before change to RS485 mode */

 F81504/508/512 not support RTS delay before or after send */

 Enable RTS H/W control mode */

 RTS driving high on TX */

 RTS driving low on TX */

 Disable RTS H/W control mode */

 Get the io address from configuration space */

 preserve index in PCI configuration space */

 4 ports */

 8 ports */

 12 ports */

 Get the io address dispatch from the BIOS */

 UART0 configuration offset start from 0x40 */

 Calculate Real IO Port */

 Enable UART I/O port */

 Select 128-byte FIFO and 8x FIFO threshold */

 LSB UART */

 MSB UART */

			/* re-apply RS232/485 mode when

			 * pciserial_resume_ports()

			/* First init without port data

			 * force init to RS232 Mode

 Dummy read for flush pcie tx queue */

 4 ports */

 8 ports */

 12 ports */

 Set to mmio decode */

 UART0 configuration offset start from 0x2A0 */

 Select 128-byte FIFO and 8x FIFO threshold */

 Enable UART I/O port */

	/*

	 * On receipt of a BI, serial device in Intel ME (Intel

	 * management engine) needs to have its fifos cleared for sane

	 * SOL (Serial Over Lan) output.

	/*

	 * When the Intel ME (management engine) gets reset its serial

	 * port registers could return 0 momentarily.  Functions like

	 * serial8250_console_write, read and save the IER, perform

	 * some operation and then restore it.  In order to avoid

	 * setting IER register inadvertently to 0, if the value read

	 * is 0, double check with ier value in uart_8250_port and use

	 * that instead.  up->ier should be the same value as what is

	 * currently configured.

 8 ports */

 Unknown vendors/cards - this should not be in linux/pci_ids.h */

/*

 * Master list of serial port init/setup/exit quirks.

 * This does not describe the general nature of the port.

 * (ie, baud base, number and location of ports, etc)

 *

 * This list is ordered alphabetically by vendor then device.

 * Specific entries must come before more generic entries.

	/*

	* ADDI-DATA GmbH communication cards <info@addi-data.com>

	/*

	 * AFAVLAB cards - these may be called via parport_serial

	 *  It is not clear whether this applies to all products.

	/*

	 * HP Diva

	/*

	 * HPE PCI serial device

	/*

	 * Intel

	/*

	 * ITE

	/*

	 * National Instruments

 Quatech */

	/*

	 * Panacom

	/*

	 * Pericom (Only 7954 - It have a offset jump for port 4)

	/*

	 * PLX

	},	/*

	 * SBS Technologies, Inc., PMC-OCTALPRO 232

	/*

	 * SBS Technologies, Inc., PMC-OCTALPRO 422

	/*

	 * SBS Technologies, Inc., P-Octal 232

	/*

	 * SBS Technologies, Inc., P-Octal 422

	/*

	 * SIIG cards - these may be called via parport_serial

	/*

	 * Titan cards

	/*

	 * Timedia cards

	/*

	 * Sunix PCI serial boards

	/*

	 * Xircom cards

	/*

	 * Netmos cards - these may be called via parport_serial

	/*

	 * EndRun Technologies

	/*

	 * For Oxford Semiconductor Tornado based devices

	/*

	 * Cronyx Omega PCI (PLX-chip based)

 WCH CH353 1S1P card (16550 clone) */

 WCH CH353 2S1P card (16550 clone) */

 WCH CH353 4S card (16550 clone) */

 WCH CH353 2S1PF card (16550 clone) */

 WCH CH352 2S card (16550 clone) */

 WCH CH355 4S card (16550 clone) */

 WCH CH382 2S card (16850 clone) */

 WCH CH382 2S1P card (16850 clone) */

 WCH CH384 4S card (16850 clone) */

 WCH CH384 8S card (16850 clone) */

	/*

	 * ASIX devices with FIFO bug

	/*

	 * Broadcom TruManage (NetXtreme)

	/*

	 * MOXA

	/*

	 * Default "match everything" terminator entry

/*

 * This is the configuration table for all of the PCI serial boards

 * which we support.  It is directly indexed by the pci_board_num_t enum

 * value, which is encoded in the pci_device_id PCI probe table's

 * driver_data member.

 *

 * The makeup of these names are:

 *  pbn_bn{_bt}_n_baud{_offsetinhex}

 *

 *  bn		= PCI BAR number

 *  bt		= Index using PCI BARs

 *  n		= number of serial ports

 *  baud	= baud rate

 *  offsetinhex	= offset for each sequential port (in hex)

 *

 * This table is sorted by (in order): bn, bt, baud, offsetindex, n.

 *

 * Please note: in theory if n = 1, _bt infix should make no difference.

 * ie, pbn_b0_1_115200 is the same as pbn_b0_bt_1_115200

	/*

	 * Board-specific versions.

/*

 * uart_offset - the space between channels

 * reg_shift   - describes how the UART registers are mapped

 *               to PCI memory by the card.

 * For example IER register on SBS, Inc. PMC-OctPro is located at

 * offset 0x10 from the UART base, while UART_IER is defined as 1

 * in include/linux/serial_reg.h,

 * see first lines of serial_in() and serial_out() in 8250.c

	/*

	 * Entries following this are board-specific.

	/*

	 * Panacom - IOMEM

 I think this entry is broken - the first_offset looks wrong --rmk */

	/*

	 * EndRun Technologies

	* Uses the size of PCI Base region 0 to

	* signal now many ports are available

	* 2 port 952 Uart support

	/*

	 * This board uses the size of PCI Base region 0 to

	 * signal now many ports are available

	/*

	 * EKF addition for i960 Boards form EKF with serial port.

	 * Max 256 ports.

	/*

	 * Computone - uses IOMEM.

	/*

	 * PA Semi PWRficient PA6T-1682M on-chip UART

	/*

	 * National Instruments 843x

	/*

	 * ADDI-DATA GmbH PCI-Express communication cards <info@addi-data.com>

	/*

	 * Pericom PI7C9X795[1248] Uno/Dual/Quad/Octal UART

 softmodems */

 ALi Corporation M5457 AC'97 Modem */

 Motorola Si3052-based modem */

 Si3052-based modem, default IDs */

 multi-io cards handled by parport_serial */

 WCH CH353 2S1P */

 WCH CH353 1S1P */

 WCH CH382 2S1P */

 Intel platforms with MID UART */

 Intel platforms with DesignWare UART */

 Exar devices */

 End of the black list */

	/*

	 * If it is not a communications device or the programming

	 * interface is greater than 6, give up.

/*

 * Given a complete unknown PCI device, try to use some heuristics to

 * guess what the configuration might be, based on the pitiful PCI

 * serial specs.  Returns 0 on success, -ENODEV on failure.

	/*

	 * Should we try to make guesses for multiport serial devices later?

	/*

	 * If there is 1 or 0 iomem regions, and exactly one port,

	 * use it.  We guess the number of ports based on the IO

	 * region size.

	/*

	 * Now guess if we've got a board which indexes by BARs.

	 * Each IO BAR should be 8 bytes, and they should follow

	 * consecutively.

	/*

	 * Find an init and setup quirks.

	/*

	 * Run the new-style initialization function.

	 * The initialization function returns:

	 *  <0  - error

	 *   0  - use board->num_ports

	 *  >0  - number of ports

	/*

	 * Find the exit quirks.

	/*

	 * Ensure that every init quirk is properly torn down

	/*

	 * Ensure that the board is correctly configured.

/*

 * Probe one serial board.  Unfortunately, there is no rhyme nor reason

 * to the arrangement of serial ports on a PCI card.

		/*

		 * Use a copy of the pci_board entry for this;

		 * avoid changing entries in the table.

		/*

		 * We matched one of our class entries.  Try to

		 * determine the parameters of this board.

		/*

		 * We matched an explicit entry.  If we are able to

		 * detect this boards settings with our heuristic,

		 * then we no longer need this entry.

		/*

		 * The device may have been disabled.  Re-enable it.

 FIXME: We cannot simply error out here */

 Advantech use PCI_DEVICE_ID_ADVANTECH_PCI3620 (0x3620) as 'PCI_SUBVENDOR_ID' */

 Advantech also use 0x3618 and 0xf618 */

	/*

	 * VScom SPCOM800, from sl@s.pl

 Unknown card - subdevice 0x1584 */

 Unknown card - subdevice 0x1588 */

	/*

	 * Megawolf Romulus PCI Serial Card, from Mike Hudson

	 * (Exoray@isys.ca)

	/*

	* EndRun Technologies. PCI express device range.

	*    EndRun PTP/1588 has 2 Native UARTs.

	/*

	 * Quatech cards. These actually have configurable clocks but for

	 * now we just use the default.

	 *

	 * 100 series are RS232, 200 series RS422,

		/*

		 * The below card is a little controversial since it is the

		 * subject of a PCI vendor/device ID clash.  (See

		 * www.ussg.iu.edu/hypermail/linux/kernel/0303.1/0516.html).

		 * For now just used the hex ID 0x950a.

	/*

	 * Oxford Semiconductor Inc. Tornado PCI express device range.

 OXPCIe952 1 Legacy UART */

 OXPCIe952 1 Legacy UART */

 OXPCIe952 1 Native UART */

 OXPCIe952 1 Native UART */

 OXPCIe952 1 Legacy UART */

 OXPCIe952 1 Legacy UART */

 OXPCIe952 1 Native UART */

 OXPCIe952 1 Native UART */

 OXPCIe952 1 Legacy UART */

 OXPCIe952 1 Legacy UART */

 OXPCIe952 1 Legacy UART */

 OXPCIe952 1 Legacy UART */

 OXPCIe952 2 Native UART */

 OXPCIe952 2 Native UART */

 OXPCIe954 4 Native UART */

 OXPCIe954 4 Native UART */

 OXPCIe958 8 Native UART */

 OXPCIe958 8 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

 OXPCIe200 1 Native UART */

	/*

	 * Mainpine Inc. IQ Express "Rev3" utilizing OxSemi Tornado

 IQ Express 1 Port V.34 Super-G3 Fax */

 IQ Express 2 Port V.34 Super-G3 Fax */

 IQ Express 4 Port V.34 Super-G3 Fax */

 IQ Express 8 Port V.34 Super-G3 Fax */

	/*

	 * Digi/IBM PCIe 2-port Async EIA-232 Adapter utilizing OxSemi Tornado

	/*

	 * SBS Technologies, Inc. P-Octal and PMC-OCTPRO cards,

	 * from skokodyn@yahoo.com

	/*

	 * Digitan DS560-558, from jimd@esoft.com

	/*

	 * Titan Electronic cards

	 *  The 400L and 800L have a custom setup quirk.

	/*

	 * Computone devices submitted by Doug McNash dmcnash@computone.com

	/*

	 * Sunix PCI serial boards

	/*

	 * AFAVLAB serial card, from Harald Welte <laforge@gnumonks.org>

	/*

	 * Korenix Jetcard F0/F1 cards (JC1204, JC1208, JC1404, JC1408).

	 * Cards are identified by their subsystem vendor IDs, which

	 * (in hex) match the model number.

	 *

	 * Note that JC140x are RS422/485 cards which require ox950

	 * ACR = 0x10, and as such are not currently fully supported.

/*	{	PCI_VENDOR_ID_KORENIX, PCI_DEVICE_ID_KORENIX_JETCARDF0,

		0x1402, 0x0002, 0, 0,

/*	{	PCI_VENDOR_ID_KORENIX, PCI_DEVICE_ID_KORENIX_JETCARDF0,

		0x1404, 0x0004, 0, 0,

	/*

	 * Dell Remote Access Card 4 - Tim_T_Murphy@Dell.com

	/*

	 * Dell Remote Access Card III - Tim_T_Murphy@Dell.com

	/*

	 * RAStel 2 port modem, gerg@moreton.com.au

	/*

	 * EKF addition for i960 Boards form EKF with serial port

	/*

	 * Xircom Cardbus/Ethernet combos

	/*

	 * Xircom RBM56G cardbus modem - Dirk Arnold (temp entry)

	/*

	 * Untested PCI modems, sent in from various folks...

	/*

	 * Elsa Model 56K PCI Modem, from Andreas Rath <arh@01019freenet.de>

	/*

	 * HP Diva card

 HPE PCI serial device */

	/*

	 * Pericom PI7C9X795[1248] Uno/Dual/Quad/Octal UART

	/*

	 * ACCES I/O Products quad

	/*

	 * Topic TP560 Data/Fax/Voice 56k modem (reported by Evan Clarke)

	/*

	 * ITE

	/*

	 * IntaShield IS-200

 135a.0811 */

	/*

	 * IntaShield IS-400

 135a.0dc0 */

	/*

	 * BrainBoxes UC-260

	/*

	 * Perle PCI-RAS cards

	/*

	 * Mainpine series cards: Fairly standard layout but fools

	 * parts of the autodetect in some cases and uses otherwise

	 * unmatched communications subclasses in the PCI Express case

 RockForceDUO */

 RockForceQUATRO */

 RockForceDUO+ */

 RockForceQUATRO+ */

 RockForce+ */

 RockForce+ */

 RockForceOCTO+ */

 RockForceDUO+ */

 RockForceQUARTRO+ */

 RockForceOCTO+ */

 RockForceD1 */

 RockForceF1 */

 RockForceD2 */

 RockForceF2 */

 RockForceD4 */

 RockForceF4 */

 RockForceD8 */

 RockForceF8 */

 IQ Express D1 */

 IQ Express F1 */

 IQ Express D2 */

 IQ Express F2 */

 IQ Express D4 */

 IQ Express F4 */

 IQ Express D8 */

 IQ Express F8 */

	/*

	 * PA Semi PA6T-1682M on-chip UART

	/*

	 * National Instruments

	/*

	 * MOXA

	/*

	* ADDI-DATA GmbH communication cards <info@addi-data.com>

	/*

	 * other NetMos 9835 devices are most likely handled by the

	 * parport_serial driver, check drivers/parport/parport_serial.c

	 * before adding them here.

 the 9901 is a rebranded 9912 */

	/*

	 * Best Connectivity and Rosewill PCI Multi I/O cards

 Intel CE4100 */

	/*

	 * Cronyx Omega PCI

	/*

	 * Broadcom TruManage

	/*

	 * AgeStar as-prs2-009

	/*

	 * WCH CH353 series devices: The 2S1P is handled by parport_serial

	 * so not listed here.

	/*

	 * Realtek RealManage

 Fintek PCI serial cards */

 MKS Tenta SCOM-080x serial cards */

 Amazon PCI serial device */

	/*

	 * These entries match devices with class COMMUNICATION_SERIAL,

	 * COMMUNICATION_MODEM or COMMUNICATION_MULTISERIAL

 SPDX-License-Identifier: (GPL-2.0 OR MPL-1.1)

/*======================================================================



    A driver for PCMCIA serial devices



    serial_cs.c 1.134 2002/05/04 05:48:53



    The contents of this file are subject to the Mozilla Public

    License Version 1.1 (the "License"); you may not use this file

    except in compliance with the License. You may obtain a copy of

    the License at http://www.mozilla.org/MPL/



    Software distributed under the License is distributed on an "AS

    IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or

    implied. See the License for the specific language governing

    rights and limitations under the License.



    The initial developer of the original code is David A. Hinds

    <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds

    are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.



    Alternatively, the contents of this file may be used under the

    terms of the GNU General Public License version 2 (the "GPL"), in which

    case the provisions of the GPL are applicable instead of the

    above.  If you wish to allow the use of your version of this file

    only under the terms of the GPL and not to allow others to use

    your version of this file under the MPL, indicate your decision

    by deleting the provisions above and replace them with the notice

    and other provisions required by the GPL.  If you do not delete

    the provisions above, a recipient may use your version of this

    file under either the MPL or the GPL.



====================================================================*/

 Parameters that can be set with 'insmod' */

 Enable the speaker? */

 Skip strict UART tests? */

====================================================================*/

 Table of multi-port card ID's */

 1 = multifunction, > 1 = # ports */

/*

 * vers_1 5.0, "Brain Boxes", "2-Port RS232 card", "r6"

 * manfid 0x0160, 0x0104

 * This card appears to have a 14.7456MHz clock.

/* Generic Modem: MD55x (GPRS/EDGE) have

 * Elan VPU16551 UART with 14.7456MHz oscillator

 * manfid 0x015D, 0x4C45

/*

 * Nokia cards are not really multiport cards.  Shouldn't this

 * be handled by setting the quirk entry .multi = 0 | 1 ?

 request_region? oxsemi branch does no request_region too... */

/*

 * This sequence is needed to properly initialize MC45 attached to OXCF950.

 * I tried decreasing these msleep()s, but it worked properly (survived

 * 1000 stop/start operations) with these timeouts (or bigger).

/*

 * Socket Dual IO: this enables irq's for second port

	/*

	 * Recheck to see if the device is still configured.

 Create new serial device */

	/*

	 * Ensure that the ports have been released.

 free bits */

====================================================================*/

====================================================================*/

	/*

	 * First pass: look for a config entry that looks normal.

	 * Two tries: without IO aliases, then with aliases.

	/*

	 * Second pass: try to find an entry that isn't picky about

	 * its base address, then try to grab any standard serial port

	 * address, and finally try to get any free port.

	/*

	 * Apply any configuration quirks.

	/*

	 * The quad port cards have bad CIS's, so just look for a

	 * window larger than 8 ports and assume it will be right.

 First, look for a generic full-sized window */

 If that didn't work, look for two windows */

	/*

	 * Apply any configuration quirks.

	/* The Oxford Semiconductor OXCF950 cards are in fact single-port:

	 * 8 registers are for the UART, the others are extra registers.

	 * Siemen's MC45 PCMCIA (Possio's GCC) is OXCF950 based too.

		/*

		 * FIXME: We really should wake up the port prior to

		 * handing it over to the serial layer.

 break */

 Is this a compliant multifunction card? */

 Is this a multiport card? */

	/*

	 * Another check for dual-serial cards: look for either serial or

	 * multifunction cards that ask for appropriate IO port ranges.

	/*

	 * Apply any multi-port quirk.

	/*

	 * Apply any post-init quirk.  FIXME: This should really happen

	 * before we register the port, since it might already be in use.

 TDK DF2814 */

 Xircom CM-56G */

 TDK DF5660 */

 USRobotics 14,400 */

 USRobotics/SUN 14,400 */

 Nokia DTP-2 ver II */

 LASAT COMMUNICATIONS A/S */

 Psion 56K+Fax */

 MultiMobile */

 Sierra Wireless AC850 3G Network Adapter R1 */

 Sierra Wireless AC860 3G Network Adapter R1 */

 Sierra Wireless AC710/AC750 GPRS Network Adapter R1 */

 Sierra Aircard 555 CDMA 1xrtt Modem -- pre update */

 Sierra Aircard 555 CDMA 1xrtt Modem -- post update */

 too generic */

 PCMCIA_MFC_DEVICE_MANF_CARD(0, 0x0160, 0x0002), */

 PCMCIA_MFC_DEVICE_MANF_CARD(1, 0x0160, 0x0002), */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2020, Broadcom */

/*

 * 8250-core based driver for Broadcom ns16550a UARTs

 *

 * This driver uses the standard 8250 driver core but adds additional

 * optional features including the ability to use a baud rate clock

 * mux for more accurate high speed baud rate selection and also

 * an optional DMA engine.

 *

 Register definitions for UART DMA block. Version 1.1 or later. */

 Current devices have 8 sets of RX buffer registers */

 Current devices have 2 sets of TX buffer registers */

 Actually 64285715 for some chips */

 stats exposed through debugfs */

/*

 * Register access routines

/*

 * The UART DMA engine hardware can be used by multiple UARTS, but

 * only one at a time. Sharing is not currently supported so

 * the first UART to request the DMA engine will get it and any

 * subsequent requests by other UARTS will fail.

 Start with all interrupts disabled */

	/*

	 * Setup buffer close to happen when 32 character times have

	 * elapsed since the last character was received.

 Set RX transfer length to 0 for unknown */

 clear all interrupts then enable them */

 Clear the RX ready bit for all buffers */

 always start with buffer 0 */

 If RX is running, set the RX ABORT */

 If TX is running, set the TX ABORT */

/*

 * NOTE: printk's in this routine will hang the system if this is

 * the console tty

 Make sure we're still in sync with the hardware */

		/*

		 * This is a bug in the controller that doesn't cause

		 * any problems but will be fixed in the future.

 If not ABORT, re-enable RX buffer */

 Clear all interrupts */

	/*

	 * prevent serial8250_do_startup() from allocating non-existent

	 * DMA resources

	/*

	 * Disable the Receive Data Interrupt because the DMA engine

	 * will handle this.

 disable all interrupts */

	/*

	 * prevent serial8250_do_shutdown() from trying to free

	 * DMA resources that we never alloc'd for this driver.

/*

 * Not all clocks run at the exact specified rate, so set each requested

 * rate and then get the actual rate.

 If the Baud Mux Clock was not specified, just return */

 Find the closest match for specified baud */

 increase resolution to get xx.xx percent */

 get the delta */

 Error over 3 percent will cause data errors */

 calc nanoseconds for 1.5 characters time at the given baud rate */

	/*

	 * There's a bug in some 8250 cores where we get a timeout

	 * interrupt but there is no data ready.

			/*

			 * if Receive Data Interrupt is enabled and

			 * we're uing hardware flow control, deassert

			 * RTS and wait for any chars in the pipline to

			 * arrive and then check for DR again.

	/*

	 * If a character did not arrive after the timeout, clear the false

	 * receive timeout.

 re-enable receive unless upper layer has disabled it */

 We should have just the uart base registers or all the registers */

 if the DMA registers were specified, try to enable DMA */

 Enable the use of the DMA hardware */

 See if a Baud clock has been specified */

 Check for a fixed line number */

 setup HR timer */

	/*

	 * The hardware goes back to it's default after suspend

	 * so get the "clk" back in sync.

 SPDX-License-Identifier: GPL-2.0

/*

 * Early serial console for 8250/16550 devices

 *

 * (c) Copyright 2004 Hewlett-Packard Development Company, L.P.

 *	Bjorn Helgaas <bjorn.helgaas@hp.com>

 *

 * Based on the 8250.c serial driver, Copyright (C) 2001 Russell King,

 * and on early_printk.c by Andi Kleen.

 *

 * This is for use before the serial driver has initialized, in

 * particular, before the UARTs have been discovered and named.

 * Instead of specifying the console device as, e.g., "ttyS0",

 * we locate the device directly by its MMIO or I/O port address.

 *

 * The user can specify the device directly, e.g.,

 *	earlycon=uart8250,io,0x3f8,9600n8

 *	earlycon=uart8250,mmio,0xff5e0000,115200n8

 *	earlycon=uart8250,mmio32,0xff5e0000,115200n8

 * or

 *	console=uart8250,io,0x3f8,9600n8

 *	console=uart8250,mmio,0xff5e0000,115200n8

 *	console=uart8250,mmio32,0xff5e0000,115200n8

 8n1 */

 no interrupt */

 no fifo */

 DTR + RTS */

 assume the device was initialized, only mask interrupts */

 SPDX-License-Identifier: GPL-2.0

/*

 * Renesas Emma Mobile 8250 driver

 *

 *  Copyright (C) 2012 Magnus Damm

 TX @ 0x00 */

 FCR @ 0x0c (+1) */

 LCR @ 0x10 (+1) */

 MCR @ 0x14 (+1) */

 SCR @ 0x20 (+1) */

 IER @ 0x04 */

 only 4 valid bits - not Xscale */

 DLL @ 0x24 (+9) */

 DLM @ 0x28 (+9) */

 RX @ 0x00 */

 MCR @ 0x14 (+1) */

 LSR @ 0x18 (+1) */

 MSR @ 0x1c (+1) */

 SCR @ 0x20 (+1) */

 IER @ 0x04 */

 IIR @ 0x08 */

 DLL @ 0x24 (+9) */

 DLM @ 0x28 (+9) */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Mediatek 8250 driver.

 *

 * Copyright (c) 2014 MundoReader S.L.

 * Author: Matthias Brugger <matthias.bgg@gmail.com>

 Highspeed register */

 Sample count register */

 Sample point register */

 UART Rate Fix Register */

 Escape Character register */

 Escape Enable register */

 DMA Enable register */

 RX Trigger address */

 Fractional divider LSB address */

 Fractional divider MSB address */

 Enable XOFF character interrupt */

 Enable RTS Modem status interrupt */

 Enable CTS Modem status interrupt */

 Enable enhancement feature */

 Enable hardware rx flow control */

 Enable hardware tx flow control */

 no sw flow control */

 XON1/XOFF1 as sw flow control */

 XON2/XOFF2 as sw flow control */

 Enable CTS Modem status interrupt */

 Escape char added under sw fc */

 flow control mode */

 disable DMA for console */

enable hw flow control*/

MTK software flow control */

enable sw flow control */

	/*

	 * Store the requested baud rate before calling the generic 8250

	 * set_termios method. Standard 8250 port expects bauds to be

	 * no higher than (uartclk / 16) so the baud will be clamped if it

	 * gets out of that bound. Mediatek 8250 port supports speed

	 * higher than that, therefore we'll get original baud rate back

	 * after calling the generic set_termios method and recalculate

	 * the speed later in this method.

	/*

	 * Mediatek UARTs use an extra highspeed register (MTK_UART_HIGHS)

	 *

	 * We need to recalcualte the quot register, as the claculation depends

	 * on the vaule in the highspeed register.

	 *

	 * Some baudrates are not supported by the chip, so we use the next

	 * lower rate supported and update termios c_flag.

	 *

	 * If highspeed register is set to 3, we need to specify sample count

	 * and sample point to increase accuracy. If not, we reset the

	 * registers to their default values.

	/*

	 * Ok, we're now changing the port state.  Do it with

	 * interrupts disabled.

	/*

	 * Update the per-port timeout.

 set DLAB we have cval saved in up->lcr from the call to the core */

 reset DLAB */

count fraction to set fractoin register */

 Don't rewrite B0 */

 wait until UART in idle status */

		/*

		 * For compatibility with older device trees try unnamed

		 * clk when no baud clk can be found.

 Disable Rate Fix function */

 Sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * 8250-core based driver for the OMAP internal UART

 *

 * based on omap-serial.c, Copyright (C) 2010 Texas Instruments.

 *

 * Copyright (C) 2014 Sebastian Andrzej Siewior

 *

/*

 * See Advisory 21 in AM437x errata SPRZ408B, updated April 2015.

 * The same errata is applicable to AM335x and DRA7x processors too.

 SCR register bitmasks */

 MVR register bitmasks */

 SYSC register bitmasks */

 SYSS register bitmasks */

 Enable XON/XOFF flow control on output */

 Enable XON/XOFF flow control on input */

 Interrupt Enable Register 2 */

 Enhanced features register 2 */

 RX FIFO occupancy indicator */

		/*

		 * Turn off autoRTS if RTS is lowered and restore autoRTS

		 * setting if RTS is raised

/*

 * Work Around for Errata i202 (2430, 3430, 3630, 4430 and 4460)

 * The access to uart register after MDR1 Access

 * causes UART to corrupt data.

 *

 * Need a delay =

 * 5 L4 clock cycles + 5 UART functional clock cycle (@48MHz = ~0.2uS)

 * give 10 times as much

	/*

	 * Wait for FIFO to empty: when empty, RX_FIFO_E bit is 0 and

	 * TX_FIFO_E bit is 1.

 Should *never* happen. we warn and carry on */

	/*

	 * Old custom speed handling.

		/*

		 * I assume that nobody is using this. But hey, if somebody

		 * would like to specify the divisor _and_ the mode then the

		 * driver is ready and waiting for it.

	/*

	 * The manual recommends not to enable the DMA mode selector in the SCR

	 * (instead of the FCR) register _and_ selecting the DMA mode as one

	 * register write because this may lead to malfunction.

		/*

		 * TCSANOW requests the change to occur immediately however if

		 * we have a TX-DMA operation in progress then it has been

		 * observed that it might stall and never complete. Therefore we

		 * delay DMA completes to prevent this hang from happen.

 drop TCR + TLR access, we setup XON/XOFF later */

 Configure flow control */

/*

 * OMAP can use "CLK / (16 or 13) / div" for baud rate. And then we have have

 * some differences in how we want to handle flow control.

	/*

	 * Ask the core to calculate the divisor for us.

	/*

	 * Ok, we're now changing the port state. Do it with

	 * interrupts disabled.

	/*

	 * Update the per-port timeout.

	/*

	 * Characters to ignore

		/*

		 * If we're ignoring parity and break indicators,

		 * ignore overruns too (for real raw support).

	/*

	 * ignore all characters if CREAD is not set

	/*

	 * Modem status interrupts

 Up to here it was mostly serial8250_do_set_termios() */

	/*

	 * We enable TRIG_GRANU for RX and TX and additionally we set

	 * SCR_TX_EMPTY bit. The result is the following:

	 * - RX_TRIGGER amount of bytes in the FIFO will cause an interrupt.

	 * - less than RX_TRIGGER number of bytes will also cause an interrupt

	 *   once the UART decides that there no new bytes arriving.

	 * - Once THRE is enabled, the interrupt will be fired once the FIFO is

	 *   empty - the trigger level is ignored here.

	 *

	 * Once DMA is enabled:

	 * - UART will assert the TX DMA line once there is room for TX_TRIGGER

	 *   bytes in the TX FIFO. On each assert the DMA engine will move

	 *   TX_TRIGGER bytes into the FIFO.

	 * - UART will assert the RX DMA line once there are RX_TRIGGER bytes in

	 *   the FIFO and move RX_TRIGGER bytes.

	 * This is because threshold and trigger values are the same.

 Enable AUTOCTS (autoRTS is enabled when RTS is raised) */

		/*

		 * OMAP rx s/w flow control is borked; the transmitter remains

		 * stuck off even if rx flow control is subsequently disabled

		/*

		 * IXOFF Flag:

		 * Enable XON/XOFF flow control on output.

		 * Transmit XON1, XOFF1

 calculate wakeup latency constraint */

 Don't rewrite B0 */

 same as 8250 except that we may have extra flow bits set in EFR */

 sentinel */ }

 Check revision register scheme */

 Legacy Scheme: OMAP2/3 */

 MINOR_REV[0:4], MAJOR_REV[4:7] */

 New Scheme: OMAP4+ */

 MINOR_REV[0:5], MAJOR_REV[8:10] */

 highest possible revision */

 normalize revision for the driver */

	/*

	 * AM65x SR1.0, AM65x SR2.0 and J721e SR1.0 don't

	 * don't have RHR_IT_DIS bit in IER2 register. So drop to flag

	 * to enable errata workaround.

	/*

	 * On K3 SoCs, it is observed that RX TIMEOUT is signalled after

	 * FIFO has been drained, in which case a dummy read of RX FIFO

	 * is required to clear RX TIMEOUT condition.

 Stop processing interrupts on input overrun */

			/* Keep restarting the timer until

			 * the input overrun subsides.

 Disable DMA for console UART */

 Enable module level wake up */

	/*

	 * Disable break condition and FIFOs

 Must be called while priv->rx_dma_lock is held */

 Re-enable RX FIFO interrupt now that transfer is complete */

		/*

		 * Poll for teardown to complete which guarantees in

		 * flight data is drained.

	/*

	 * If the tx status is not DMA_COMPLETE, then this is a delayed

	 * completion callback. A previous RX timeout flush would have

	 * already pushed the data, so exit.

			/*

			 * Disable RX interrupts to allow RX DMA completion

			 * callback to run.

	/*

	 * Disable RX FIFO interrupt while RX DMA is enabled, else

	 * spurious interrupt may be raised when data is in the RX FIFO

	 * but is yet to be drained by DMA.

		/*

		 * Even if no data, we need to return an error for the two cases

		 * below so serial8250_tx_chars() is invoked and properly clears

		 * THRI and/or runtime suspend.

		/*

		 * We need to put the first byte into the FIFO in order to start

		 * the DMA transfer. For transfers smaller than four bytes we

		 * don't bother doing DMA at all. It seem not matter if there

		 * are still bytes in the FIFO from the last transfer (in case

		 * we got here directly from omap_8250_dma_tx_complete()). Bytes

		 * leaving the FIFO seem not to trigger the DMA transfer. It is

		 * really the byte that we put into the FIFO.

		 * If the FIFO is already full then we most likely got here from

		 * omap_8250_dma_tx_complete(). And this means the DMA engine

		 * just completed its work. We don't have to wait the complete

		 * 86us at 115200,8n1 but around 60us (not to mention lower

		 * baudrates). So in that case we take the interrupt and try

		 * again with an empty FIFO.

	/*

	 * Queue a new transfer if FIFO has data.

		/*

		 * Disable RX timeout, read IIR to clear

		 * current timeout condition, clear EFR2 to

		 * periodic timeouts, re-enable interrupts.

/*

 * This is mostly serial8250_handle_irq(). We have a slightly different DMA

 * hoook for RX/TX and need different logic for them in the ISR. Therefore we

 * use the default routine in the non-DMA case and this one for with DMA.

			/*

			 * try again due to an earlier failer which

			 * might have been resolved by now.

 IRQ has not been requested but handling irq? */

	/*

	 * It claims to be 16C750 compatible however it is a little different.

	 * It has EFR and has no FCR7_64byte bit. The AFE (which it claims to

	 * have) is enabled via EFR instead of MCR. The type is set here 8250

	 * just to get things going. UNKNOWN does not work for a few reasons and

	 * we don't need our own type since we don't use 8250's set_termios()

	 * or pm callback.

	/*

	 * Runtime PM is mostly transparent. However to do it right we need to a

	 * TX empty interrupt before we can put the device to auto idle. So if

	 * PM is not enabled we don't add that flag and can spare that one extra

	 * interrupt in the TX path.

	/*

	 * Disable runtime PM until autosuspend delay unless specifically

	 * enabled by the user via sysfs. This is the historic way to

	 * prevent an unsafe default policy with lossy characters on wake-up.

	 * For serdev devices this is not needed, the policy can be managed by

	 * the serdev driver.

	/*

	 * Oh DMA support. If there are no DMA properties in the DT then

	 * we will fall back to a generic DMA channel which does not

	 * really work here. To ensure that we do not get a generic DMA

	 * channel assigned, we have the the_no_dma_filter_fn() here.

	 * To avoid "failed to request DMA" messages we check for DMA

	 * properties in DT.

	/*

	 * If we lose context, then SCR is set to its reset value of zero.

	 * After set_termios() we set bit 3 of SCR (TX_EMPTY_CTL_IT) to 1,

	 * among other bits, to never set the register back to zero again.

 TODO: in future, this should happen via API in drivers/reset/ */

	/*

	 * At least on omap4, unused uarts may not idle after reset without

	 * a basic scr dma configuration even with no dma in use. The

	 * module clkctrl status bits will be 1 instead of 3 blocking idle

	 * for the whole clockdomain. The softreset below will clear scr,

	 * and we restore it on resume so this is safe to do on all SoCs

	 * needing omap8250_soft_reset() quirk. Do it in two writes as

	 * recommended in the comment for omap8250_update_scr().

 softreset the UART */

 By experiments, 1us enough for reset complete on AM335x */

 In case runtime-pm tries this before we are setup */

	/*

	 * When using 'no_console_suspend', the console UART must not be

	 * suspended. Since driver suspend is managed by runtime suspend,

	 * preventing runtime suspend (by returning error) will keep device

	 * active during suspend.

 Restore to UART mode after reset (for wakeup) */

 Restore wakeup enable register */

 In case runtime-pm tries this before we are setup */

 user set a ttyS based name for the console */

 user did not set ttyO based console, so we don't care */

 SPDX-License-Identifier: GPL-2.0+

 Synopsys DesignWare 8250 library. */

 Offsets for the DesignWare specific registers */

 Divisor Latch Fraction Register */

 Component Parameter Register */

 UART Component Version */

 Component Parameter Register bits */

 Helper for FIFO size calculation */

/*

 * divisor = div(I) + div(F)

 * "I" means integer, "F" means fractional

 * quot = div(I) = clk / (16 * baud)

 * frac = div(F) * 2^dlf_size

 *

 * let rem = clk % (16 * baud)

 * we have: div(F) * (16 * baud) = rem

 * so frac = 2^dlf_size * rem / (16 * baud) = (rem << dlf_size) / (16 * baud)

	/*

	 * If the Component Version Register returns zero, we know that

	 * ADDITIONAL_FEATURES are not enabled. No need to go any further.

 Select the type based on FIFO */

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 2005 Russell King.

 *  Data taken from include/asm-i386/serial.h

 SPDX-License-Identifier: GPL-2.0

/*

 * The Z125 16550-compatible UART has no fixed base clock assigned

 * So, depending on the board we're on, we need to adjust the

 * parameter in order to really set the correct baudrate, and

 * do so if possible without user interaction

 use default value if board is not available below */

 ok, register the port */

 SPDX-License-Identifier: GPL-2.0+

/*

 * 8250_dma.c - DMA Engine API support for 8250.c

 *

 * Copyright (C) 2013 Intel Corporation

 We have been called from __dma_tx_complete() */

 Default slave configuration parameters */

 Get a channel for RX */

 8250 rx dma requires dmaengine driver to support pause/terminate */

 Get a channel for TX */

 8250 tx dma requires dmaengine driver to support terminate */

 RX buffer */

 TX buffer */

 Release RX resources */

 Release TX resources */

 SPDX-License-Identifier: GPL-2.0

/*

 *  Written by Paul B Schroeder < pschroeder "at" uplogix "dot" com >

 *  Based on 8250_boca.

 *

 *  Copyright (C) 2005 Russell King.

 *  Data taken from include/asm-i386/serial.h

 SPDX-License-Identifier: GPL-2.0+

/*

 * Synopsys DesignWare 8250 driver.

 *

 * Copyright 2011 Picochip, Jamie Iles.

 * Copyright 2013 Intel Corporation

 *

 * The Synopsys DesignWare 8250 has an extra feature whereby it detects if the

 * LCR is written whilst busy.  If it is, then a busy detect interrupt is

 * raised, the LCR needs to be rewritten and the uart status register read.

 Offsets for the DesignWare specific registers */

 UART Status Register */

 DesignWare specific register fields */

 Override any modem control signals if needed */

 Make sure LCR write wasn't ignored */

	/*

	 * FIXME: this deadlocks if port->lock is already held

	 * dev_err(p->dev, "Couldn't set LCR to %d\n", value);

 Returns once the transmitter is empty or we run out of retries */

		/* The device is first given a chance to empty without delay,

		 * to avoid slowdowns at high bitrates. If after 1000 tries

		 * the buffer has still not emptied, allow more time for low-

 Allow the TX to drain before we reconfigure */

 Read back to ensure register write ordering. */

 CONFIG_64BIT */

	/*

	 * There are ways to get Designware-based UARTs into a state where

	 * they are asserting UART_IIR_RX_TIMEOUT but there is no actual

	 * data available.  If we see such a case then we'll do a bogus

	 * read.  If we don't do this then the "RX TIMEOUT" interrupt will

	 * fire forever.

	 *

	 * This problem has only been observed so far when not in DMA mode

	 * so we limit the workaround only to non-DMA mode.

 Clear the USR */

	/*

	 * We have no choice but to defer the uartclk update due to two

	 * deadlocks. First one is caused by a recursive mutex lock which

	 * happens when clk_set_rate() is called from dw8250_set_termios().

	 * Second deadlock is more tricky and is caused by an inverted order of

	 * the clk and tty-port mutexes lock. It happens if clock rate change

	 * is requested asynchronously while set_termios() is executed between

	 * tty-port mutex lock and clk_set_rate() function invocation and

	 * vise-versa. Anyway if we didn't have the reference clock alteration

	 * in the dw8250_set_termios() method we wouldn't have needed this

	 * deferred event handling complication.

		/*

		 * Note that any clock-notifer worker will block in

		 * serial8250_update_uartclk() until we are done.

/*

 * dw8250_fallback_dma_filter will prevent the UART from getting just any free

 * channel on platforms that have DMA engines, but don't have any channels

 * assigned to the UART.

 *

 * REVISIT: This is a work around for limitation in the DMA Engine API. Once the

 * core problem is fixed, this function is no longer needed.

 get index of serial line, if found in DT aliases */

 Platforms with iDMA 64-bit */

 Always report DCD as active */

 Always report DSR as active */

 Always report CTS as active */

 Always report Ring indicator as inactive */

 Always ask for fixed clock rate from a property. */

 If there is separate baudclk, get the rate from it. */

 If no clock rate is defined, fail. */

 If the Busy Functionality is not implemented, don't handle it */

 If we have a valid fifosize, try hooking up DMA */

	/*

	 * Some platforms may provide a reference clock shared between several

	 * devices. In this case any clock state change must be known to the

	 * UART port at least post factum.

 CONFIG_PM_SLEEP */

 Sentinel */ }

 SPDX-License-Identifier: GPL-2.0+

/*

 *  drivers/tty/serial/8250/8250_pxa.c -- driver for PXA on-board UARTS

 *  Copyright:	(C) 2013 Sergei Ianovich <ynvich@gmail.com>

 *

 *  replaces drivers/serial/pxa.c by Nicolas Pitre

 *  Created:	Feb 20, 2003

 *  Copyright:	(C) 2003 Monta Vista Software, Inc.

 *

 *  Based on drivers/serial/8250.c by Russell King.

 Uart divisor latch write */

	/*

	 * work around Erratum #74 according to Marvel(R) PXA270M Processor

	 * Specification Update (April 19, 2010)

 SPDX-License-Identifier: GPL-2.0

/*

 * Serial port driver for NXP LPC18xx/43xx UART

 *

 * Copyright (C) 2015 Joachim Eastwood <manabian@gmail.com>

 *

 * Based on 8250_mtk.c:

 * Copyright (c) 2014 MundoReader S.L.

 * Matthias Brugger <matthias.bgg@gmail.com>

 Additional LPC18xx/43xx 8250 registers and bits */

 Calculate the resulting delay in ms */

 Delay RTS before send not supported */

	/*

	 * For DMA mode one must ensure that the UART_FCR_DMA_SELECT

	 * bit is set when FIFO is enabled. Even if DMA is not used

	 * setting this bit doesn't seem to affect anything.

 SPDX-License-Identifier: GPL-2.0

/*

 * Freescale 16550 UART "driver", Copyright (C) 2011 Paul Gortmaker.

 * Copyright 2020 NXP

 * Copyright 2020 Puresoftware Ltd.

 *

 * This isn't a full driver; it just provides an alternate IRQ

 * handler to deal with an errata and provide ACPI wrapper.

 * Everything else is just using the bog standard 8250 support.

 *

 * We follow code flow of serial8250_default_handle_irq() but add

 * a check for a break and insert a dummy read on the Rx for the

 * immediately following IRQ event.

 *

 * We re-use the already existing "bug handling" lsr_saved_flags

 * field to carry the "what we just did" information from the one

 * IRQ event to the next one.

 This is the WAR; if last event was BRK, then read and return */

 Process incoming characters first */

 Stop processing interrupts on input overrun */

			/* Keep restarting the timer until

			 * the input overrun subsides.

 SPDX-License-Identifier: GPL-2.0+

/*

 *	Serial Device Initialisation for Lasi/Asp/Wax/Dino

 *

 *	(c) Copyright Matthew Wilcox <willy@debian.org> 2001-2002

		/* We find some unattached serial ports by walking native

		 * busses.  These should be silently ignored.  Otherwise,

		 * what we have here is a missing parent device, so tell

		 * the user what they're missing.

 7.272727MHz on Lasi.  Assumed the same for Dino, Wax and Timi. */

/* Hack.  Some machines have SERIAL_0 attached to Lasi and SERIAL_1

 * attached to Dino.  Unfortunately, Dino appears before Lasi in the device

 * tree.  To ensure that ttyS0 == SERIAL_0, we register two drivers; one

 * which only knows about Lasi and then a second which will find all the

 * other serial ports.  HPUX ignores this problem.

 C1xx/C1xxL */

 B132L */

 B160L */

 B132L+ */

 B180L+ */

 Rocky2 120 */

 Rocky2 150 */

 Kiji L2 132 */

 Raven+ */

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 2005 Russell King.

 *  Data taken from include/asm-i386/serial.h

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 2005 Russell King.

 *  Data taken from include/asm-i386/serial.h

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Serial Port driver for Open Firmware platform devices

 *

 *    Copyright (C) 2006 Arnd Bergmann <arnd@arndb.de>, IBM Corp.

/*

 * Fill a struct uart_port for a given device node

 Get clk rate through clk driver if present */

 If current-speed was set, then try not to change it. */

 Check for shifted address mapping */

 Compatibility with the deprecated pxa driver and 8250_pxa drivers. */

 Check for registers offset within the devices address range */

 Check for fifo size */

 Check for a fixed line number */

 IRQ support not mandatory */

/*

 * Try to register a serial port

 Check for TX FIFO threshold & set tx_loadsz */

/*

 * Release a line

/*

 * A few common types, add more as needed.

 end of list */ },

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/drivers/serial/acorn.c

 *

 *  Copyright (C) 1996-2003 Russell King.

 SPDX-License-Identifier: GPL-2.0

/*

 *  Probe for 8250/16550-type ISAPNP serial ports.

 *

 *  Based on drivers/char/serial.c, by Linus Torvalds, Theodore Ts'o.

 *

 *  Copyright (C) 2001 Russell King, All Rights Reserved.

 *

 *  Ported to the Linux PnP Layer - (C) Adam Belay.

 Archtek America Corp. */

 Archtek SmartLink Modem 3334BT Plug & Play */

 Anchor Datacomm BV */

 SXPro 144 External Data Fax Modem Plug & Play */

 SXPro 288 External Data Fax Modem Plug & Play */

 PROLiNK 1456VH ISA PnP K56flex Fax Modem */

 Actiontec ISA PNP 56K X2 Fax Modem */

 Rockwell 56K ACF II Fax+Data+Voice Modem */

SPCI_FL_NO_SHIRQ*/	},

	/*

	 * ALi Fast Infrared Controller

	 * Native driver (ali-ircc) is broken so at least

	 * it can be used with irtty-sir.

 AZT3005 PnP SOUND DEVICE */

 Best Data Products Inc. Smart One 336F PnP Modem */

  Boca Research */

 Boca Complete Ofc Communicator 14.4 Data-FAX */

 Boca Research 33,600 ACF Modem */

 Boca 33.6 Kbps Internal FD34FSVD */

 Computer Peripherals Inc */

 EuroViVa CommCenter-33.6 SP PnP */

 Creative Labs */

 Creative Labs Phone Blaster 28.8 DSVD PnP Voice */

 Creative Labs Modem Blaster 28.8 DSVD PnP Voice */

 Davicom ISA 33.6K Modem */

 Creative */

 Creative Modem Blaster Flash56 DI5601-1 */

 Creative Modem Blaster V.90 DI5660 */

 E-Tech */

 E-Tech CyberBULLET PC56RVP */

 FUJITSU */

 Fujitsu 33600 PnP-I2 R Plug & Play */

 Fujitsu FMV-FX431 Plug & Play */

 Fujitsu 33600 PnP-I4 R Plug & Play */

 Fujitsu Fax Voice 33600 PNP-I5 R Plug & Play */

 Archtek America Corp. */

 Archtek SmartLink Modem 3334BT Plug & Play */

 Archtek SmartLink Modem 3334BRV 33.6K Data Fax Voice */

 Hayes */

 Hayes Optima 288 V.34-V.FC + FAX + Voice Plug & Play */

 Hayes Optima 336 V.34 + FAX + Voice PnP */

 Hayes Optima 336B V.34 + FAX + Voice PnP */

 Hayes Accura 56K Ext Fax Modem PnP */

 Hayes Accura 56K Ext Fax Modem PnP */

 Hayes Accura 56K Fax Modem PnP */

 Hayes 288, V.34 + FAX */

 Hayes Optima 288 V.34 + FAX + Voice, Plug & Play */

 IBM */

 IBM Thinkpad 701 Internal Modem Voice */

 Intermec */

 Intermec CV60 touchscreen port */

 Intertex */

 Intertex 28k8 33k6 Voice EXT PnP */

 Intertex 33k6 56k Voice EXT PnP */

 Intertex 28k8 33k6 Voice SP EXT PnP */

 Intertex 33k6 56k Voice SP EXT PnP */

 Intertex 28k8 33k6 Voice SP INT PnP */

 Intertex 28k8 33k6 Voice SP EXT PnP */

 Intertex 33k6 56k Voice SP EXT PnP */

 Kortex International */

 KORTEX 28800 Externe PnP */

 KXPro 33.6 Vocal ASVD PnP */

 Lasat */

 LASAT Internet 33600 PnP */

 Lasat Safire 560 PnP */

 Lasat Safire 336  PnP */

 Microcom, Inc. */

 Microcom TravelPorte FAST V.34 Plug & Play */

 Microcom DeskPorte V.34 FAST or FAST+ Plug & Play */

 Microcom DeskPorte FAST EP 28.8 Plug & Play */

 Microcom DeskPorte 28.8P Plug & Play */

 Microcom DeskPorte FAST ES 28.8 Plug & Play */

 Microcom DeskPorte FAST ES 28.8 Plug & Play */

 Microcom DeskPorte 28.8S Internal Plug & Play */

 Motorola */

 Motorola BitSURFR Plug & Play */

 Motorola TA210 Plug & Play */

 Motorola HMTA 200 (ISDN) Plug & Play */

 Motorola BitSURFR Plug & Play */

 Motorola Lifestyle 28.8 Internal */

 Motorola V.3400 Plug & Play */

 Motorola Lifestyle 28.8 V.34 Plug & Play */

 Motorola Power 28.8 V.34 Plug & Play */

 Motorola ModemSURFR External 28.8 Plug & Play */

 Motorola Premier 33.6 Desktop Plug & Play */

 Motorola VoiceSURFR 56K External PnP */

 Motorola ModemSURFR 56K External PnP */

 Motorola ModemSURFR 56K Internal PnP */

 Motorola ModemSURFR Internal 28.8 Plug & Play */

 Motorola Premier 33.6 Internal Plug & Play */

 Motorola OnlineSURFR 28.8 Internal Plug & Play */

 Motorola VoiceSURFR 56K Internal PnP */

 Com 1 */

  Deskline K56 Phone System PnP */

 PC Rider K56 Phone System PnP */

 NEC 98NOTE SPEAKER PHONE FAX MODEM(33600bps) */

 Pace 56 Voice Internal Plug & Play Modem */

 Generic */

 Generic standard PC COM port	 */

 Generic 16550A-compatible COM port */

 Compaq 14400 Modem */

 Compaq 2400/9600 Modem */

 Dial-Up Networking Serial Cable between 2 PCs */

 Dial-Up Networking Parallel Cable between 2 PCs */

 Standard 9600 bps Modem */

 Standard 14400 bps Modem */

  Standard 28800 bps Modem*/

  Standard Modem*/

  Standard 9600 bps Modem*/

  Standard 14400 bps Modem*/

  Standard 28800 bps Modem*/

  Standard Modem */

 Standard 9600 bps Modem */

 Standard 14400 bps Modem */

 Standard 28800 bps Modem */

 Standard Modem */

 Standard 9600 bps Modem */

 Standard 14400 bps Modem */

 Standard 28800 bps Modem */

 Standard Modem */

 Standard PCMCIA Card Modem */

 Rockwell */

 Modular Technology */

 Rockwell 33.6 DPF Internal PnP */

 Modular Technology 33.6 Internal PnP */

 Kortex International */

 KORTEX 14400 Externe PnP */

 Rockwell 28.8 */

 Viking Components, Inc */

 Viking 28.8 INTERNAL Fax+Data+Voice PnP */

 Rockwell */

 British Telecom */

 Modular Technology */

 Rockwell 33.6 DPF External PnP */

 BT Prologue 33.6 External PnP */

 Modular Technology 33.6 External PnP */

 Viking 56K FAX INT */

 K56 par,VV,Voice,Speakphone,AudioSpan,PnP */

 SupraExpress 28.8 Data/Fax PnP modem */

 SupraExpress 336i PnP Voice Modem */

 SupraExpress 33.6 Data/Fax PnP modem */

 SupraExpress 33.6 Data/Fax PnP modem */

 SupraExpress 336i Sp ASVD */

 SupraExpress 33.6 Data/Fax PnP modem */

 SupraExpress 56i Sp Intl */

 Phoebe Micro */

 Phoebe Micro 33.6 Data Fax 1433VQH Plug & Play */

 Archtek America Corp. */

 Archtek SmartLink Modem 3334BT Plug & Play */

 3Com Corp. */

 Gateway Telepath IIvi 33.6 */

 U.S. Robotics Sporster 33.6K Fax INT PnP */

  Sportster Vi 14.4 PnP FAX Voicemail */

 U.S. Robotics 33.6K Voice INT PnP */

 U.S. Robotics 33.6K Voice EXT PnP */

 U.S. Robotics Courier V.Everything INT PnP */

 U.S. Robotics 33.6K Voice INT PnP */

 U.S. Robotics 56K Voice INT PnP */

 U.S. Robotics 56K Voice EXT PnP */

 U.S. Robotics 56K FAX INT */

 U.S. Robotics 56K FAX INT */

 U.S. Robotics 56K Voice INT PnP */

 U.S. Robotics 56K Voice EXT PnP */

 U.S. Robotics 56K Voice INT PnP */

 U.S. Robotics 56K Message  */

 U.S. Robotics 56K FAX EXT PnP*/

 U.S. Robotics 56K FAX INT PnP*/

 U.S. Robotics 56K Voice EXT PnP*/

 U.S. Robotics 56K Voice INT PnP*/

 Wacom tablets */

 Compaq touchscreen */

 Fujitsu Stylistic touchscreens */

 Fujitsu Stylistic LT touchscreens */

 Passive Fujitsu Stylistic touchscreens */

 Fujitsu Wacom Tablet PC device */

 Fujitsu P-series tablet PC device */

 Fujitsu Wacom 2FGT Tablet PC device */

 Fujitsu Wacom 1FGT Tablet PC device */

	/*

	 * LG C1 EXPRESS DUAL (C1-PB11A3) touch screen (actually a FUJ02E6

	 * in disguise).

 Rockwell's (PORALiNK) 33600 INT PNP */

 Unknown PnP modems */

 More unknown PnP modems */

	/*

	 * Winbond CIR port, should not be probed. We should keep track of

	 * it to prevent the legacy serial driver from probing it.

	/*

	 * SMSC IrCC SIR/FIR port, should not be probed by serial driver as

	 * well so its own driver can bind to it.

/*

 * Given a complete unknown PnP device, try to use some heuristics to

 * detect modems. Currently use such heuristic set:

 *     - dev->name or dev->bus->name must contain "modem" substring;

 *     - device must have only one IO region (8 byte long) with base address

 *       0x2e8, 0x3e8, 0x2f8 or 0x3f8.

 *

 * Such detection looks very ugly, but can detect at least some of numerous

 * PnP modems, alternatively we must hardcode all modems in pnp_devices[]

 * table.

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Base port operations for 8250/16550-type serial ports

 *

 *  Based on drivers/char/serial.c, by Linus Torvalds, Theodore Ts'o.

 *  Split from 8250_core.c, Copyright (C) 2001 Russell King.

 *

 * A note about mapbase / membase

 *

 *  mapbase is the physical address of the IO port.

 *  membase is an 'ioremapped' cookie.

 Nuvoton NPCM timeout register */

 Timeout Interrupt Enable */

/*

 * Debugging.

/*

 * Here we define the default xmit fifo size used for each type of UART.

 UART_CAP_EFR breaks billionon CF bluetooth card. */

 | UART_CAP_AFE */,

	/*

	 * tx_loadsz is set to 63-bytes instead of 64-bytes to implement

	 * workaround of errata A-008006 which states that tx_loadsz should

	 * be configured less than Maximum supported fifo bytes.

 Uart divisor latch read */

 Assign these in pieces to truncate any bits above 7.  */

 Uart divisor latch write */

 Au1x00/RT288x UART hardware has a weird register layout */

 UART_RX  */

 UART_IER */

 UART_IIR */

 UART_LCR */

 UART_MCR */

 UART_LSR */

 UART_MSR */

 UART_SCR (unmapped) */

 UART_TX  */

 UART_IER */

 UART_FCR */

 UART_LCR */

 UART_MCR */

 UART_LSR (unmapped) */

 UART_MSR (unmapped) */

 UART_SCR (unmapped) */

 Au1x00 haven't got a standard divisor latch */

 Remember loaded iotype */

 safe, no side-effects */

/*

 * For the 16C950

/*

 * FIFO support.

/**

 *	serial8250_em485_init() - put uart_8250_port into rs485 emulating

 *	@p:	uart_8250_port port instance

 *

 *	The function is used to start rs485 software emulating on the

 *	&struct uart_8250_port* @p. Namely, RTS is switched before/after

 *	transmission. The function is idempotent, so it is safe to call it

 *	multiple times.

 *

 *	The caller MUST enable interrupt on empty shift register before

 *	calling serial8250_em485_init(). This interrupt is not a part of

 *	8250 standard, but implementation defined.

 *

 *	The function is supposed to be called from .rs485_config callback

 *	or from any other callback protected with p->port.lock spinlock.

 *

 *	See also serial8250_em485_destroy()

 *

 *	Return 0 - success, -errno - otherwise

/**

 *	serial8250_em485_destroy() - put uart_8250_port into normal state

 *	@p:	uart_8250_port port instance

 *

 *	The function is used to stop rs485 software emulating on the

 *	&struct uart_8250_port* @p. The function is idempotent, so it is safe to

 *	call it multiple times.

 *

 *	The function is supposed to be called from .rs485_config callback

 *	or from any other callback protected with p->port.lock spinlock.

 *

 *	See also serial8250_em485_init()

/**

 * serial8250_em485_config() - generic ->rs485_config() callback

 * @port: uart port

 * @rs485: rs485 settings

 *

 * Generic callback usable by 8250 uart drivers to activate rs485 settings

 * if the uart is incapable of driving RTS as a Transmit Enable signal in

 * hardware, relying on software emulation instead.

 pick sane settings if the user hasn't */

 clamp the delays to [0, 100ms] */

	/*

	 * Both serial8250_em485_init() and serial8250_em485_destroy()

	 * are idempotent.

/*

 * These two wrappers ensure that enable_runtime_pm_tx() can be called more than

 * once and disable_runtime_pm_tx() will still disable RPM because the fifo is

 * empty and the HW can idle again.

/*

 * IER sleep support.  UARTs which have EFRs need the "extended

 * capability" bit enabled.  Note that on XR16C850s, we need to

 * reset LCR to write to IER.

/*

 * Attempts to turn on the RSA FIFO.  Returns zero on failure.

 * We set the port uart clock rate if we succeed.

/*

 * Attempts to turn off the RSA FIFO.  Returns zero on failure.

 * It is unknown why interrupts were disabled in here.  However,

 * the caller is expected to preserve this behaviour by grabbing

 * the spinlock before calling this function.

 CONFIG_SERIAL_8250_RSA */

/*

 * This is a quickie test to see how big the FIFO is.

 * It doesn't work at all the time, more's the pity.

 FIXME - schedule_timeout */

/*

 * Read UART ID using the divisor method - set DLL and DLM to zero

 * and the revision will be in DLL and device type in DLM.  We

 * preserve the device state across this.

/*

 * This is a helper routine to autodetect StarTech/Exar/Oxsemi UART's.

 * When this function is called we know it is at least a StarTech

 * 16650 V2, but it might be one of several StarTech UARTs, or one of

 * its clones.  (We treat the broken original StarTech 16650 V1 as a

 * 16550, and why not?  Startech doesn't seem to even acknowledge its

 * existence.)

 *

 * What evil have men's minds wrought...

	/*

	 * Everything with an EFR has SLEEP

	/*

	 * First we check to see if it's an Oxford Semiconductor UART.

	 *

	 * If we have to do this here because some non-National

	 * Semiconductor clone chips lock up if you try writing to the

	 * LSR register (which serial_icr_read does)

	/*

	 * Check for Oxford Semiconductor 16C950.

	 *

	 * EFR [4] must be set else this test fails.

	 *

	 * This shouldn't be necessary, but Mike Hudson (Exoray@isys.ca)

	 * claims that it's needed for 952 dual UART's (which are not

	 * recommended for new designs).

		/*

		 * Enable work around for the Oxford Semiconductor 952 rev B

		 * chip which causes it to seriously miscalculate baud rates

		 * when DLL is 0.

	/*

	 * We check for a XR16C850 by setting DLL and DLM to 0, and then

	 * reading back DLL and DLM.  The chip type depends on the DLM

	 * value read back:

	 *  0x10 - XR16C850 and the DLL contains the chip revision.

	 *  0x12 - XR16C2850.

	 *  0x14 - XR16C854.

	/*

	 * It wasn't an XR16C850.

	 *

	 * We distinguish between the '654 and the '650 by counting

	 * how many bytes are in the FIFO.  I'm using this for now,

	 * since that's the technique that was sent to me in the

	 * serial driver update, but I'm not convinced this works.

	 * I've had problems doing this in the past.  -TYT

/*

 * We detected a chip without a FIFO.  Only two fall into

 * this category - the original 8250 and the 16450.  The

 * 16450 has a scratch register (accessible with LCR=0)

	/*

	 * Exar ST16C2550 "A2" devices incorrectly detect as

	 * having an EFR, and report an ID of 0x0201.  See

	 * http://linux.derkeiler.com/Mailing-Lists/Kernel/2004-11/4812.html

/*

 * We know that the chip has FIFOs.  Does it have an EFR?  The

 * EFR is located in the same register position as the IIR and

 * we know the top two bits of the IIR are currently set.  The

 * EFR should contain zero.  Try to read the EFR.

	/*

	 * Check for presence of the EFR when DLAB is set.

	 * Only ST16C650V1 UARTs pass this test.

	/*

	 * Maybe it requires 0xbf to be written to the LCR.

	 * (other ST16C650V2 UARTs, TI16C752A, etc)

	/*

	 * Check for a National Semiconductor SuperIO chip.

	 * Attempt to switch to bank 2, read the value of the LOOP bit

	 * from EXCR1. Switch back to bank 0, change it in MCR. Then

	 * switch back to bank 2, read it from EXCR1 again and check

	 * it's changed. If so, set baud_base in EXCR2 to 921600. -- dwmw2

 EXCR1 */

 EXCR1 */

	/*

	 * No EFR.  Try to detect a TI16750, which only sets bit 5 of

	 * the IIR when 64 byte FIFO mode is enabled when DLAB is set.

	 * Try setting it with and without DLAB set.  Cheap clones

	 * set bit 5 without DLAB set.

	/*

	 * Try writing and reading the UART_IER_UUE bit (b6).

	 * If it works, this is probably one of the Xscale platform's

	 * internal UARTs.

	 * We're going to explicitly set the UUE bit to 0 before

	 * trying to write and read a 1 just to make sure it's not

	 * already a 1 and maybe locked there before we even start start.

		/*

		 * OK it's in a known zero state, try writing and reading

		 * without disturbing the current state of the other bits.

			/*

			 * It's an Xscale.

			 * We'll leave the UART_IER_UUE bit set to 1 (enabled).

		/*

		 * If we got here we couldn't force the IER_UUE bit to 0.

		 * Log it and continue.

	/*

	 * We distinguish between 16550A and U6 16550A by counting

	 * how many bytes are in the FIFO.

/*

 * This routine is called by rs_init() to initialize a specific serial

 * port.  It determines what type of UART chip this serial port is

 * using: 8250, 16450, 16550, 16550A.  The important question is

 * whether or not this UART is a 16550A or not, since this will

 * determine whether or not we can use its FIFO features or not.

	/*

	 * We really do need global IRQs disabled here - we're going to

	 * be frobbing the chips IRQ enable register to see if it exists.

		/*

		 * Do a simple existence test first; if we fail this,

		 * there's no point trying anything else.

		 *

		 * 0x80 is used as a nonsense port to prevent against

		 * false positives due to ISA bus float.  The

		 * assumption is that 0x80 is a non-existent port;

		 * which should be safe since include/asm/io.h also

		 * makes this assumption.

		 *

		 * Note: this is safe as long as MCR bit 4 is clear

		 * and the device is in "PC" mode.

		/*

		 * Mask out IER[7:4] bits for test as some UARTs (e.g. TL

		 * 16C754B) allow only to modify them if an EFR bit is set.

			/*

			 * We failed; there's nothing here

	/*

	 * Check to see if a UART is really there.  Certain broken

	 * internal modems based on the Rockwell chipset fail this

	 * test, because they apparently don't implement the loopback

	 * test mode.  So this test is skipped on the COM 1 through

	 * COM 4 ports.  This *should* be safe, since no board

	 * manufacturer would be stupid enough to design a board

	 * that conflicts with COM 1-4 --- we hope!

	/*

	 * We're pretty sure there's a port here.  Lets find out what

	 * type of port it is.  The IIR top two bits allows us to find

	 * out if it's 8250 or 16450, 16550, 16550A or later.  This

	 * determines what we test for next.

	 *

	 * We also initialise the EFR (if any) to zero for later.  The

	 * EFR occupies the same register location as the FCR and IIR.

 Assign this as it is to truncate any bits above 7.  */

	/*

	 * Only probe for RSA ports if we got the region.

	/*

	 * Reset the UART.

	/*

	 * Check if the device is a Fintek F81216A

 forget possible initially masked and pending IRQ */

 enable all intrs */

/**

 * serial8250_em485_stop_tx() - generic ->rs485_stop_tx() callback

 * @p: uart 8250 port

 *

 * Generic callback usable by 8250 uart drivers to stop rs485 transmission.

	/*

	 * Empty the RX FIFO, we are not interested in anything

	 * received during the half-duplex transmission.

	 * Enable previously disabled RX interrupts.

	/*

	 * rs485_stop_tx() is going to set RTS according to config

	 * AND flush RX FIFO if required.

		/*

		 * To provide required timeing and allow FIFO transfer,

		 * __stop_tx_rs485() must be called only when both FIFO and

		 * shift register are empty. It is for device driver to enable

		 * interrupt on TEMT.

	/*

	 * We really want to stop the transmitter from sending.

	/*

	 * Re-enable the transmitter if we disabled it.

/**

 * serial8250_em485_start_tx() - generic ->rs485_start_tx() callback

 * @up: uart 8250 port

 *

 * Generic callback usable by 8250 uart drivers to start rs485 transmission.

 * Assumes that setting the RTS bit in the MCR register means RTS is high.

 * (Some chips use inverse semantics.)  Further assumes that reception is

 * stoppable by disabling the UART_IER_RDI interrupt.  (Some chips set the

 * UART_LSR_DR bit even when UART_IER_RDI is disabled, foiling this approach.)

 no MSR capabilities */

 no MSR capabilities */

		/*

		 * Intel 82571 has a Serial Over Lan device that will

		 * set UART_LSR_BI without setting UART_LSR_DR when

		 * it receives a break. To avoid reading from the

		 * receive buffer without UART_LSR_DR bit set, we

		 * just force the read character to be 0

			/*

			 * We do the SysRQ and SAK checking

			 * here because otherwise the break

			 * may get masked by ignore_status_mask

			 * or read_status_mask.

		/*

		 * Mask off conditions which should be ignored.

/*

 * serial8250_rx_chars: processes according to the passed in LSR

 * value, and returns the remaining LSR bits not handled

 * by this Rx routine.

			/*

			 * The Aspeed BMC virtual UARTs have a bug where data

			 * may get stuck in the BMC's Tx FIFO from bursts of

			 * writes on the APB interface.

			 *

			 * Delay back-to-back writes by a read cycle to avoid

			 * stalling the VUART. Read a register that won't have

			 * side-effects and discard the result.

 The BCM2835 MINI UART THRE bit is really a not-full bit. */

	/*

	 * With RPM enabled, we have to wait until the FIFO is empty before the

	 * HW can go idle. So we get here once again with empty FIFO and disable

	 * the interrupt and RPM in __stop_tx()

 Caller holds uart port lock */

/*

 * This handles the interrupt from one port.

	/*

	 * If port is stopped and there are no error conditions in the

	 * FIFO, then don't drain the FIFO, as this may lead to TTY buffer

	 * overflow. Not servicing, RX FIFO would trigger auto HW flow

	 * control when FIFO occupancy reaches preset threshold, thus

	 * halting RX. This only works when auto HW flow control is

	 * available.

/*

 * Newer 16550 compatible parts such as the SC16C650 & Altera 16550 Soft IP

 * have a programmable TX threshold that triggers the THRE interrupt in

 * the IIR register. In this case, the THRE interrupt indicates the FIFO

 * has space available. Load it up with tx_loadsz bytes.

 TX Threshold IRQ triggered so load up FIFO */

/*

 *	Wait for transmitter & holding register to empty

 Wait up to 10ms for the character(s) to be sent. */

 Wait up to 1s for flow control if necessary */

/*

 * Console polling routines for writing and reading from the uart while

 * in an interrupt or debug context.

	/*

	 *	First save the IER then disable the interrupts

	/*

	 *	Send the character out.

	/*

	 *	Finally, wait for transmitter to become empty

	 *	and restore the IER

 CONFIG_CONSOLE_POLL */

 Wake up and initialize UART */

 Reset the UART */

 Reset the port */

 Enable Tx, Rx and free run mode */

		/*

		 * Nuvoton calls the scratch register 'UART_TOR' (timeout

		 * register). Enable it, and set TIOC (timeout interrupt

		 * comparator) to be 0x20 for correct operation.

	/*

	 * If this is an RSA port, see if we can kick it up to the

	 * higher speed clock.

	/*

	 * Clear the FIFO buffers and disable them.

	 * (they will be reenabled in set_termios())

	/*

	 * Clear the interrupt registers.

	/*

	 * At this point, there's no way the LSR could still be 0xff;

	 * if it is, then bail out, because there's likely no UART

	 * here.

	/*

	 * For a XR16C850, we need to set the trigger levels

	/*

	 * For the Altera 16550 variants, set TX threshold trigger level.

 Bounds checking of TX threshold (valid 0 to fifosize-2) */

 Check if we need to have shared IRQs */

		/*

		 * Test for UARTs that do not reassert THRE when the

		 * transmitter is idle and the interrupt has already

		 * been cleared.  Real 16550s should always reassert

		 * this interrupt whenever the transmitter is idle and

		 * the interrupt is enabled.  Delays are necessary to

		 * allow register changes to become visible.

 allow THRE to set */

 allow a working UART time to re-assert THRE */

		/*

		 * If the interrupt is not reasserted, or we otherwise

		 * don't trust the iir, setup a timer to kick the UART

		 * on a regular basis.

	/*

	 * Now, initialize the UART

		/*

		 * Most PC uarts need OUT2 raised to enable interrupts.

	/*

	 * Serial over Lan (SoL) hack:

	 * Intel 8257x Gigabit ethernet chips have a 16550 emulation, to be

	 * used for Serial Over Lan.  Those chips take a longer time than a

	 * normal serial device to signalize that a transmission data was

	 * queued. Due to that, the above test generally fails. One solution

	 * would be to delay the reading of iir. However, this is not

	 * reliable, since the timeout is variable. So, let's just don't

	 * test if we receive TX irq.  This way, we'll never enable

	 * UART_BUG_TXEN.

	/*

	 * Do a quick test to see if we receive an interrupt when we enable

	 * the TX irq.

	/*

	 * Clear the interrupt registers again for luck, and clear the

	 * saved flags to avoid getting false values from polling

	 * routines or the previous session.

	/*

	 * Request DMA channels for both RX and TX.

	/*

	 * Set the IER shadow for rx interrupts but defer actual interrupt

	 * enable until after the FIFOs are enabled; otherwise, an already-

	 * active sender can swamp the interrupt handler with "too much work".

		/*

		 * Enable interrupts on the AST Fourport board

	/*

	 * Disable interrupts from this port

 reset interrupts on the AST Fourport board */

	/*

	 * Disable break condition and FIFOs

	/*

	 * Reset the RSA board back to 115kbps compat mode.

	/*

	 * Read data port to reset things, and then unlink from

	 * the IRQ chain.

 Nuvoton NPCM UARTs have a custom divisor calculation */

	/*

	 * Handle magic divisors for baud rates above baud_base on SMSC

	 * Super I/O chips.  We clamp custom rates from clk/6 and clk/12

	 * up to clk/4 (0x8001) and clk/8 (0x8002) respectively.  These

	 * magic divisors actually reprogram the baud rate generator's

	 * reference clock derived from chips's 14.318MHz clock input.

	 *

	 * Documentation claims that with these magic divisors the base

	 * frequencies of 7.3728MHz and 3.6864MHz are used respectively

	 * for the extra baud rates of 460800bps and 230400bps rather

	 * than the usual base frequency of 1.8462MHz.  However empirical

	 * evidence contradicts that.

	 *

	 * Instead bit 7 of the DLM register (bit 15 of the divisor) is

	 * effectively used as a clock prescaler selection bit for the

	 * base frequency of 7.3728MHz, always used.  If set to 0, then

	 * the base frequency is divided by 4 for use by the Baud Rate

	 * Generator, for the usual arrangement where the value of 1 of

	 * the divisor produces the baud rate of 115200bps.  Conversely,

	 * if set to 1 and high-speed operation has been enabled with the

	 * Serial Port Mode Register in the Device Configuration Space,

	 * then the base frequency is supplied directly to the Baud Rate

	 * Generator, so for the divisor values of 0x8001, 0x8002, 0x8003,

	 * 0x8004, etc. the respective baud rates produced are 460800bps,

	 * 230400bps, 153600bps, 115200bps, etc.

	 *

	 * In all cases only low 15 bits of the divisor are used to divide

	 * the baud base and therefore 32767 is the maximum divisor value

	 * possible, even though documentation says that the programmable

	 * Baud Rate Generator is capable of dividing the internal PLL

	 * clock by any divisor from 1 to 65535.

	/*

	 * Oxford Semi 952 rev B workaround

 Workaround to enable 115200 baud on OMAP1510 internal ports */

	/*

	 * For NatSemi, switch to bank 2 not bank 1, to avoid resetting EXCR2,

	 * otherwise just set DLAB

	/*

	 * Handle magic divisors for baud rates above baud_base on SMSC

	 * Super I/O chips.  Enable custom rates of clk/4 and clk/8, but

	 * disable divisor values beyond 32767, which are unavailable.

	/*

	 * Ask the core to calculate the divisor for us.

	 * Allow 1% tolerance at the upper limit so uart clks marginally

	 * slower than nominal still match standard baud rates without

	 * causing transmission errors.

/*

 * Note in order to avoid the tty port mutex deadlock don't use the next method

 * within the uart port callbacks. Primarily it's supposed to be utilized to

 * handle a sudden reference clock rate change.

	/*

	 * Ok, we're now changing the port state.  Do it with

	 * interrupts disabled.

 Save computed LCR */

 NOTE: If fifo_bug is not set, a user can set RX_trigger. */

	/*

	 * MCR-based auto flow control.  When AFE is enabled, RTS will be

	 * deasserted when the receive FIFO contains more characters than

	 * the trigger, or the MCR RTS bit is cleared.

	/*

	 * Update the per-port timeout.

	/*

	 * Characteres to ignore

		/*

		 * If we're ignoring parity and break indicators,

		 * ignore overruns too (for real raw support).

	/*

	 * ignore all characters if CREAD is not set

	/*

	 * CTS flow control flag and modem status interrupts

		/*

		 * TI16C752/Startech hardware flow control.  FIXME:

		 * - TI16C752 requires control thresholds to be set.

		 * - UART_MCR_RTS is ineffective if auto-RTS mode is enabled.

	/*

	 * LCR DLAB must be set to enable 64-byte FIFO mode. If the FCR

	 * is written without DLAB set, this mode will be disabled.

 reset DLAB */

 emulated UARTs (Lucent Venus 167x) need two steps */

 set fcr */

 Don't rewrite B0 */

/*

 * Resource handling.

 Use the nearest lower value */

	/*

	 * Find the region that we can probe for.  This in turn

	 * tells us whether we can probe for the type of port.

 if access method is AU, it is a 16550 with a quirk */

 HW bugs may trigger IRQ while IIR == NO_INT */

 default dma handlers */

/*

 *	Restore serial console when h/w power-off detected

/*

 *	Print a string to the serial port trying not to disturb

 *	any possible real use of the port...

 *

 *	The console_lock must be held when we get here.

 *

 *	Doing runtime PM is really a bad idea for the kernel console.

 *	Thus, we assume the function is called when device is powered up.

	/*

	 *	First save the IER then disable the interrupts

 check scratch reg to see if port powered off during system sleep */

	/*

	 *	Finally, wait for transmitter to become empty

	 *	and restore the IER

	/*

	 *	The receive handling will happen properly because the

	 *	receive ready bit will still be set; it is not cleared

	 *	on read.  However, modem control will not, we must

	 *	call it if we have saved something in the saved flags

	 *	while processing with interrupts off.

 CONFIG_SERIAL_8250_CONSOLE */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Universal/legacy driver for 8250/16550-type serial ports

 *

 *  Based on drivers/char/serial.c, by Linus Torvalds, Theodore Ts'o.

 *

 *  Copyright (C) 2001 Russell King.

 *

 *  Supports: ISA-compatible 8250/16550 ports

 *	      PNP 8250/16550 ports

 *	      early_serial_setup() ports

 *	      userspace-configurable "phantom" ports

 *	      "serial8250" platform devices

 *	      serial8250_register_8250_port() ports

/*

 * Configuration:

 *   share_irqs - whether we pass IRQF_SHARED to request_irq().  This option

 *                is unsafe when used on edge-triggered interrupts.

 force skip of txen test at init time */

/*

 * SERIAL_PORT_DFNS tells us about built-in ports that have no

 * standard enumeration mechanism.   Platforms that can find all

 * serial ports via mechanisms like ACPI or PCI need not supply it.

 defined in asm/serial.h */

 CONFIG_SERIAL_8250_RSA  */

 Protects list not the hash */

 Can be adjusted later */

 Used to walk the hash */

/*

 * This is the serial driver's interrupt routine.

 *

 * Arjan thinks the old way was overly complex, so it got simplified.

 * Alan disagrees, saying that need the complexity to handle the weird

 * nature of ISA shared interrupts.  (This is a special exception.)

 *

 * In order to handle ISA shared interrupts properly, we need to check

 * that all ports have been serviced, and therefore the ISA interrupt

 * line has been de-asserted.

 *

 * This means we need to loop through all ports. checking that they

 * don't have an interrupt pending.

/*

 * To support ISA shared interrupts, we need to have one interrupt

 * handler that ensures that the IRQ line has been deasserted

 * before returning.  Failing to do this will result in the IRQ

 * line being stuck active, and, since ISA irqs are edge triggered,

 * no more IRQs will be seen.

 List empty so throw away the hash node */

/*

 * This function is used to handle ports that do not have an

 * interrupt.  This doesn't work very well for 16450's, but gives

 * barely passable results for a 16550A.  (Although at the expense

 * of much CPU overhead).

	/*

	 * Must disable interrupts or else we risk racing with the interrupt

	 * based handler.

	/*

	 * This should be a safe test for anyone who doesn't trust the

	 * IIR bits on their UART, but it's specifically designed for

	 * the "Diva" UART used on the management processor on many HP

	 * ia64 and parisc boxes.

 Standard timer interval plus 0.2s to keep the port running */

	/*

	 * The above check will only give an accurate result the first time

	 * the port is opened so this value needs to be preserved.

	/*

	 * If the "interrupt" for this port doesn't correspond with any

	 * hardware interrupt, we use a timer-based system.  The original

	 * driver used to do this with IRQ0.

/**

 * serial8250_get_port - retrieve struct uart_8250_port

 * @line: serial line number

 *

 * This function retrieves struct uart_8250_port for the specific line.

 * This struct *must* *not* be used to perform a 8250 or serial core operation

 * which is not accessible otherwise. Its only purpose is to make the struct

 * accessible to the runtime-pm callbacks for context suspend/restore.

 * The lock assumption made here is none because runtime-pm suspend/resume

 * callbacks should not be invoked if there is any operation performed on the

 * port.

 CONFIG_SERIAL_8250_RSA */

		/*

		 * ALPHA_KLUDGE_MCR needs to be killed.

 chain base port ops to support Remote Supervisor Adapter */

	/*

	 * Check whether an invalid uart number has been specified, and

	 * if so, search for the first available port that does have

	 * console support.

 link port to console */

/**

 *	univ8250_console_match - non-standard console matching

 *	@co:	  registering console

 *	@name:	  name from console command line

 *	@idx:	  index from console command line

 *	@options: ptr to option string from console command line

 *

 *	Only attempts to match console command lines of the form:

 *	    console=uart[8250],io|mmio|mmio16|mmio32,<addr>[,<options>]

 *	    console=uart[8250],0x<addr>[,<options>]

 *	This form is used to register an initial earlycon boot console and

 *	replace it with the serial8250_console at 8250 driver init.

 *

 *	Performs console setup for a match (as required by interface)

 *	If no <options> are specified, then assume the h/w is already setup.

 *

 *	Returns 0 if console matches; otherwise non-zero to use default matching

 8250-specific earlycon name */

 try to match the port specified on the command line */

/*

 * early_serial_setup - early registration for 8250 ports

 *

 * Setup an 8250 port structure prior to console initialisation.  Use

 * after console initialisation will cause undefined behaviour.

/**

 *	serial8250_suspend_port - suspend one serial port

 *	@line:  serial line number

 *

 *	Suspend one serial port.

/**

 *	serial8250_resume_port - resume one serial port

 *	@line:  serial line number

 *

 *	Resume one serial port.

 Ensure it's still in high speed mode */

/*

 * Register a set of serial devices attached to a platform device.  The

 * list is terminated with a zero flags entry, which means we expect

 * all entries to have at least UPF_BOOT_AUTOCONF set.

/*

 * Remove serial ports registered against a platform device.

/*

 * This "device" covers _all_ ISA 8250-compatible serial devices listed

 * in the table in include/asm/serial.h

/*

 * serial8250_register_8250_port and serial8250_unregister_port allows for

 * 16x50 serial ports to be configured at run-time, to support PCMCIA

 * modems and PCI multiport cards.

	/*

	 * First, find a port entry which matches.

 try line number first if still available */

	/*

	 * We didn't find a matching entry, so look for the first

	 * free entry.  We look for one which hasn't been previously

	 * used (indicated by zero iobase).

	/*

	 * That also failed.  Last resort is to find any entry which

	 * doesn't have a real port associated with it.

/**

 *	serial8250_register_8250_port - register a serial port

 *	@up: serial port template

 *

 *	Configure the serial port specified by the request. If the

 *	port exists and is in use, it is hung up and unregistered

 *	first.

 *

 *	The port is then probed and if necessary the IRQ is autodetected

 *	If this fails an error is returned.

 *

 *	On success the port is ready to use and the line number is returned.

 Take tx_loadsz from fifosize if it wasn't set separately */

		/*

		 * Only call mctrl_gpio_init(), if the device has no ACPI

		 * companion device

 Possibly override default I/O functions.  */

  Possibly override set_termios call */

 Initialise interrupt backoff work if required */

/**

 *	serial8250_unregister_port - remove a 16x50 serial port at runtime

 *	@line: serial line number

 *

 *	Remove one serial port.  This may not be called from interrupt

 *	context.  We hand the port back to the our control.

	/*

	 * This tells serial8250_unregister_port() not to re-register

	 * the ports (thereby making serial8250_isa_driver permanently

	 * in use.)

/* This module was renamed to 8250_core in 3.7.  Keep the old "8250" name

 * working as well for the module options so we don't break people.  We

 * need to keep the names identical and the convenient macros will happily

 * refuse to let us do that by failing the build with redefinition errors

 * of global variables.  So we stick them inside a dummy function to avoid

 * those conflicts.  The options still get parsed, and the redefined

 * MODULE_PARAM_PREFIX lets us keep the "8250." syntax alive.

 *

 * This is hacky.  I'm sorry.

 SPDX-License-Identifier: GPL-2.0

/*

 * 8250_lpss.c - Driver for UART on Intel Braswell and various other Intel SoCs

 *

 * Copyright (C) 2016 Intel Corporation

 * Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

 Intel LPSS specific registers */

 DMA parameters */

 Gracefully handle the B0 case: fall back to B9600 */

 Get Fuart closer to Fref */

	/*

	 * For baud rates 0.5M, 1M, 1.5M, 2M, 2.5M, 3M, 3.5M and 4M the

	 * dividers must be adjusted.

	 *

	 * uartclk = (m / n) * 100 MHz, where m <= n

 Reset the clock */

 Force DCD and DSR signals to permanently be reported as active */

 Disable TX counter interrupts */

	/*

	 * This simply makes the checks in the 8250_port to try the DMA

	 * channel request which in turn uses the magic of ACPI tables

	 * parsing (see drivers/dma/acpi-dma.c for the details) and

	 * matching with the registered General Purpose DMA controllers.

 Falling back to PIO mode if DMA probing fails */

 Special DMA address for UART */

 CONFIG_SERIAL_8250_DMA */

 !CONFIG_SERIAL_8250_DMA */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2010 Lars-Peter Clausen <lars@metafoo.de>

 * Copyright (C) 2015 Imagination Technologies

 *

 * Ingenic SoC UART support

* ingenic_uart_config: SOC specific config data. */

 unused for now */

 UART module enable */

		/*

		 * Enable receive timeout interrupt with the receive line

		 * status interrupt.

		/*

		 * If we have enabled modem status IRQs we should enable

		 * modem mode.

 Hide non-16550 compliant bits from higher levels */

 Check for a fixed line number */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Serial Port driver for Aspeed VUART device

 *

 *    Copyright (C) 2016 Jeremy Kerr <jk@ozlabs.org>, IBM Corp.

 *    Copyright (C) 2006 Arnd Bergmann <arnd@arndb.de>, IBM Corp.

/*

 * If we fill the tty flip buffers, we throttle the data ready interrupt

 * to prevent dropped characters. This timeout defines how long we wait

 * to (conditionally, depending on buffer state) unthrottle.

/*

 * The VUART is basically two UART 'front ends' connected by their FIFO

 * (no actual serial line in between). One is on the BMC side (management

 * controller) and one is on the host CPU side.

 *

 * It allows the BMC to provide to the host a "UART" that pipes into

 * the BMC itself and can then be turned by the BMC into a network console

 * of some sort for example.

 *

 * This driver is for the BMC side. The sysfs files allow the BMC

 * userspace which owns the system configuration policy, to specify

 * at what IO port and interrupt number the host side will appear

 * to the host on the Host <-> BMC LPC bus. It could be different on a

 * different system (though most of them use 3f8/4).

 If the DISABLE_HOST_TX_DISCARD bit is set, discard is disabled */

/*

 * Custom interrupt handler to manage finer-grained flow control. Although we

 * have throttle/unthrottle callbacks, we've seen that the VUART device can

 * deliver characters faster than the ldisc has a chance to check buffer space

 * against the throttle threshold. This results in dropped characters before

 * the throttle.

 *

 * We do this by checking for flip buffer space before RX. If we have no space,

 * throttle now and schedule an unthrottle for later, once the ldisc has had

 * a chance to drain the buffers.

 throttle and schedule an unthrottle later */

 If current-speed was set, then try not to change it. */

 Check for shifted address mapping */

 Check for registers offset within the devices address range */

 Check for fifo size */

 Check for a fixed line number */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2015 Masahiro Yamada <yamada.masahiro@socionext.com>

/*

 * This hardware is similar to 8250, but its register map is a bit different:

 *   - MMIO32 (regshift = 2)

 *   - FCR is not at 2, but 3

 *   - LCR and MCR are not at 3 and 4, they share 4

 *   - No SCR (Instead, CHAR can be used as a scratch register)

 *   - Divisor latch at 9, no divisor latch access bit

 bit[15:8] = CHAR, bit[7:0] = FCR */

 bit[15:8] = LCR, bit[7:0] = MCR */

 Divisor Latch Register */

 This hardware always expects MMIO32 register interface. */

	/*

	 * Do not touch the divisor register in early_serial8250_setup();

	 * we assume it has been initialized by a boot loader.

/*

 * The register map is slightly different from that of 8250.

 * IO callbacks must be overridden for correct access to FCR, LCR, MCR and SCR.

 No SCR for this hardware.  Use CHAR as a scratch register */

	/*

	 * The return value must be masked with 0xff because some registers

	 * share the same offset that must be accessed by 32-bit write/read.

	 * 8 or 16 bit access to this hardware result in unexpected behavior.

 No SCR for this hardware.  Use CHAR as a scratch register */

 Divisor latch access bit does not exist. */

		/*

		 * Special case: two registers share the same address that

		 * must be 32-bit accessed.  As this is not longer atomic safe,

		 * take a lock just in case.

/*

 * This hardware does not have the divisor latch access bit.

 * The divisor latch register exists at different address.

 * Override dl_read/write callbacks.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * conmakehash.c

 *

 * Create arrays for initializing the kernel folded tables (using a hash

 * table turned out to be to limiting...)  Unfortunately we can't simply

 * preinitialize the tables at compile time since kfree() cannot accept

 * memory not allocated by kmalloc(), and doing our own memory management

 * just for this seems like massive overkill.

 *

 * Copyright (C) 1995-1997 H. Peter Anvin

 Massive overkill, but who cares? */

 Check it isn't a duplicate */

 Add to list */

 otherwise: ignore */

 For now we assume the default font is always 256 characters. */

 Initialize table */

 Now we come to the tricky part.  Parse the input table. */

/*

 * Syntax accepted:

 *	<fontpos>	<unicode> <unicode> ...

 *	<range>		idem

 *	<range>		<unicode range>

 *

 * where <range> ::= <fontpos>-<fontpos>

 * and <unicode> ::= U+<h><h><h><h>

 * and <h> ::= <hexadecimal digit>

 skip comment or blank line */

	  /* we have a range; expect the word "idem" or a Unicode range of the

 no range; expect a list of unicode values for a single font position */

 Okay, we hit EOF, now output hash table */

 Compute total size of Unicode list */

/*\n\

 * Do not edit this file; it was automatically generated by\n\

 *\n\

 * conmakehash %s > [this file]\n\

 *\n\

 SPDX-License-Identifier: GPL-2.0

/*

 * This module exports the functions:

 *

 *     'int set_selection_user(struct tiocl_selection __user *,

 *			       struct tty_struct *)'

 *     'int set_selection_kernel(struct tiocl_selection *, struct tty_struct *)'

 *     'void clear_selection(void)'

 *     'int paste_selection(struct tty_struct *)'

 *     'int sel_loadlut(char __user *)'

 *

 * Now that /dev/vcs exists, most of this can disappear again.

 Don't take this from <ctype.h>: 011-015 on the screen aren't spaces */

 FIXME: all this needs locking */

 must not be deallocated */

 cleared by clear_selection */

/* clear_selection, highlight and highlight_pointer can be called

 set reverse video on characters s-e of console with selection. */

 use complementary color to show the pointer */

/**

 *	clear_selection		-	remove current selection

 *

 *	Remove the current selection highlight, if any from the console

 *	holding the selection. The caller must hold the console lock.

 hide the pointer */

/*

 * User settable table: what characters are to be considered alphabetic?

 * 128 bits. Locked by the console lock.

 control chars     */

 digits and "-./"  */

 uppercase and '_' */

 lowercase         */

/**

 *	sel_loadlut()		-	load the LUT table

 *	@p: user table

 *

 *	Load the LUT table from user space. The caller must hold the console

 *	lock. Make a temporary copy so a partial update doesn't make a mess.

 does screen address p correspond to character at LH/RH edge of screen? */

 stores the char in UTF8 and returns the number of bytes used (1-4) */

  0******* */

 110***** 10****** */

 1110**** 10****** 10****** */

 11110*** 10****** 10****** 10****** */

 outside Unicode, replace with U+FFFD */

/**

 *	set_selection_user	-	set the current selection.

 *	@sel: user selection info

 *	@tty: the console tty

 *

 *	Invoked by the ioctl handle for the vt layer.

 *

 *	The entire selection process is managed under the console_lock. It's

 *	 a lot under the lock but its hardly a performance path

 Allocate a new buffer before freeing the old one ... */

 chars can take up to 4 bytes with unicode */

			/* strip trailing blanks from line and add newline,

 character-by-character selection */

 word-by-word selection */

 line-by-line selection */

 remove the pointer */

 select to end of line if on trailing space */

 no current selection */

 no action required */

 extend to right */

 contract from right */

 extend to left */

 contract from left */

 some other case; start selection from scratch */

 useful for screendump without selection highlights */

 make vc_sel.start <= vc_sel.end */

/* Insert the contents of the selection buffer into the

 * queue of the tty associated with the current console.

 * Invoked by ioctl().

 *

 * Locking: called without locks. Calls the ldisc wrongly with

 * unsafe methods,

 ldisc was hung up */

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 1992 obz under the linux copyright

 *

 *  Dynamic diacritical handling - aeb@cwi.nl - Dec 1993

 *  Dynamic keymap and string allocation - aeb@cwi.nl - May 1994

 *  Restrict VT switching via ioctl() - grif@cs.ucr.edu - Dec 1995

 *  Some code moved for less code duplication - Andi Kleen - Mar 1997

 *  Check put/get_user, cleanups - acme@conectiva.com.br - Jun 2001

	/*

	 * console_lock must be held to prevent the vc from being deallocated

	 * while we're checking whether it's in-use.

/*

 * Console (vt and kd) routines, as defined by USL SVR4 manual, and by

 * experimentation and study of X386 SYSV handling.

 *

 * One point of difference: SYSV vt's are /dev/vtX, which X >= 0, and

 * /dev/console is a separate ttyp. Under Linux, /dev/tty0 is /dev/console,

 * and the vc start at /dev/ttyX, X >= 1. We maintain that here, so we will

 * always treat our set of vt as numbered 1..MAX_NR_CONSOLES (corresponding to

 * ttys 0..MAX_NR_CONSOLES-1). Explicitly naming VT 0 is illegal, but using

 * /dev/tty0 (fg_console) as a target is legal, since an implicit aliasing

 * to the current console is done by the main ioctl code.

/*

 *	User space VT_EVENT handlers

/**

 *	vt_event_post

 *	@event: the event that occurred

 *	@old: old console

 *	@new: new console

 *

 *	Post an VT event to interested VT handlers

		/* kernel view is consoles 0..n-1, user space view is

 Prepare the event */

 Queue our event */

 Wait for it to pass */

 Dequeue it */

/**

 *	vt_event_wait		-	wait for an event

 *	@vw: our event

 *

 *	Waits for an event to occur which completes our vt_event_wait

 *	structure. On return the structure has wv->done set to 1 for success

 *	or 0 if some event such as a signal ended the wait.

/**

 *	vt_event_wait_ioctl	-	event ioctl handler

 *	@event: argument to ioctl (the event)

 *

 *	Implement the VT_WAITEVENT ioctl using the VT event interface

 Highest supported event for now */

 If it occurred report it */

/**

 *	vt_waitactive	-	active console wait

 *	@n: new console

 *

 *	Helper for event waits. Used to implement the legacy

 *	event waiting ioctls in terms of events

/*

 * these are the valid i/o ports we're allowed to change. they map all the

 * video ports

/*

 * currently, setting the mode from KD_TEXT to KD_GRAPHICS doesn't do a whole

 * lot. i'm not sure if it should do any restoration of modes or what...

 *

 * XXX It should at least call into the driver, fbdev's definitely need to

 * restore their engine state. --BenH

 *

 * Called with the console lock held.

 explicitly blank/unblank the screen if switching modes */

		/*

		 * The use of PIT_TICK_RATE is historic, it used to be

		 * the platform-dependent CLOCK_TICK_RATE between 2.6.12

		 * and 2.6.36, which was a minor but unfortunate ABI

		 * change. kd_mksound is locked by the input layer.

		/*

		 * Generate the tone for the appropriate number of ticks.

		 * If the time is zero, turn off sound ourselves.

		/*

		 * this is na√Øve.

		/*

		 * These cannot be implemented on any machine that implements

		 * ioperm() in user level (such as Alpha PCs) or not at all.

		 *

		 * XXX: you should never use these, just call ioperm directly..

		/*

		 * KDADDIO and KDDELIO may be able to add ports beyond what

		 * we reject here, but to be safe...

		 *

		 * These are locked internally via sys_ioperm

 Linux m68k/i386 interface for setting the keyboard delay/repeat rate */

		/*

		 * these work like a combination of mmap and KDENABIO.

		 * this could be easily finished.

	/* this could be folded into KDSKBMODE, but for compatibility

 FIXME: should review whether this is worth locking */

	/* Diacritical processing. Handled in keyboard.c as it has

 the ioctls below read/set the flags usually shown in the leds */

 don't use them - they will go away without warning */

	/*

	 * A process can indicate its willingness to accept signals

	 * generated by pressing an appropriate key combination.

	 * Thus, one can have a daemon that e.g. spawns a new console

	 * upon a keypress and then changes to it.

	 * See also the kbrequest field of inittab(5).

 Switched-to response */

 If it's just an ACK, ignore it */

 Switching-from response */

 Switch disallowed, so forget we were trying to do it. */

 The current vt has been released, so complete the switch. */

	/*

	 * When we actually do the console switch, make sure we are atomic with

	 * respect to other console switches..

	/*

	 * This is safe providing we don't drop the console sem between

	 * vc_allocate and finishing referencing nvc.

 Commence switch and lock */

 Review set_console locks */

 deallocate a single console, if possible (leave 0) */

 deallocate all unused consoles, but leave 0 */

 FIXME: Should check the copies properly */

 Parameters don't add up */

/*

 * We handle the console-specific ioctl's here.  We allow the

 * capability to modify any console, not just the fg_console.

	/*

	 * To have permissions to do most of the vt ioctls, we either have

	 * to be the owner of the tty, or have CAP_SYS_TTY_CONFIG.

 the frsig is ignored, so we set it to 0 */

 no switch is required -- saw@shade.msu.ru */

	/*

	 * Returns global vt state. Note that VT 0 is always open, since

	 * it's an alias for the current VT, and people can't use it here.

	 * We cannot return state for more than 16 VTs, since v_state is short.

 /dev/tty0 is always open */

 required by vt_in_use() */

	/*

	 * Returns the first available (non-opened) console.

 required by vt_in_use() */

	/*

	 * ioctl(fd, VT_ACTIVATE, num) will cause us to switch to vt # num,

	 * with num >= 1 (switches to vt 0, our console, are not allowed, just

	 * to preserve sanity).

	/*

	 * wait until the specified VT has been activated

	/*

	 * If a vt is under process control, the kernel will not switch to it

	 * immediately, but postpone the operation until the process calls this

	 * ioctl, allowing the switch to complete.

	 *

	 * According to the X sources this is the behavior:

	 *	0:	pending switch-from not OK

	 *	1:	pending switch-from OK

	 *	2:	completed switch-to OK

	 /*

	  * Disallocate memory associated to VT (but leave VT1)

 FIXME: review v tty lock */

 FIXME: review tty ref counting */

		/*

		 * SAK should also work in all raw modes and reset

		 * them properly.

 operation code KD_FONT_OP_* */

 KD_FONT_FLAG_* */

 font size */

 font data with height fixed to 32 */

 used in multiple places here */

	/*

	 * To have permissions to do most of the vt ioctls, we either have

	 * to be the owner of the tty, or have CAP_SYS_TTY_CONFIG.

	/*

	 * these need special handlers for incompatible data structures

	/*

	 * all these treat 'arg' as an integer

	/*

	 * the rest has a compatible data structure behind arg,

	 * but we have to convert it to a proper 64 bit pointer.

 CONFIG_COMPAT */

/*

 * Performs the back end of a vt switch. Called under the console

 * semaphore.

	/*

	 * If we're switching, we could be going from KD_GRAPHICS to

	 * KD_TEXT mode or vice versa, which means we need to blank or

	 * unblank the screen later.

	/*

	 * This can't appear below a successful kill_pid().  If it did,

	 * then the *blank_screen operation could occur while X, having

	 * received acqsig, is waking up on another processor.  This

	 * condition can lead to overlapping accesses to the VGA range

	 * and the framebuffer (causing system lockups).

	 *

	 * To account for this we duplicate this code below only if the

	 * controlling process is gone and we've called reset_vc.

	/*

	 * If this new console is under process control, send it a signal

	 * telling it that it has acquired. Also check if it has died and

	 * clean up (similar to logic employed in change_console())

		/*

		 * Send the signal as privileged - kill_pid() will

		 * tell us if the process has gone or something else

		 * is awry

		/*

		 * The controlling process has died, so we revert back to

		 * normal operation. In this case, we'll also change back

		 * to KD_TEXT mode. I'm not sure if this is strictly correct

		 * but it saves the agony when the X server dies and the screen

		 * remains blanked due to KD_GRAPHICS! It would be nice to do

		 * this outside of VT_PROCESS but there is no single process

		 * to account for and tracking tty count may be undesirable.

	/*

	 * Wake anyone waiting for their VT to activate

/*

 * Performs the front-end of a vt switch

	/*

	 * If this vt is in process mode, then we need to handshake with

	 * that process before switching. Essentially, we store where that

	 * vt wants to switch to and wait for it to tell us when it's done

	 * (via VT_RELDISP ioctl).

	 *

	 * We also check to see if the controlling process still exists.

	 * If it doesn't, we reset this vt to auto mode and continue.

	 * This is a cheap way to track process control. The worst thing

	 * that can happen is: we send a signal to a process, it dies, and

	 * the switch gets "lost" waiting for a response; hopefully, the

	 * user will try again, we'll detect the process is gone (unless

	 * the user waits just the right amount of time :-) and revert the

	 * vt to auto control.

		/*

		 * Send the signal as privileged - kill_pid() will

		 * tell us if the process has gone or something else

		 * is awry.

		 *

		 * We need to set vt_newvt *before* sending the signal or we

		 * have a race.

			/*

			 * It worked. Mark the vt to switch to and

			 * return. The process needs to send us a

			 * VT_RELDISP ioctl to complete the switch.

		/*

		 * The controlling process has died, so we revert back to

		 * normal operation. In this case, we'll also change back

		 * to KD_TEXT mode. I'm not sure if this is strictly correct

		 * but it saves the agony when the X server dies and the screen

		 * remains blanked due to KD_GRAPHICS! It would be nice to do

		 * this outside of VT_PROCESS but there is no single process

		 * to account for and tracking tty count may be undesirable.

		/*

		 * Fall through to normal (VT_AUTO) handling of the switch...

	/*

	 * Ignore all switches in KD_GRAPHICS+VT_AUTO mode

 Perform a kernel triggered VT switch for suspend/resume */

 Graphics mode - up to X */

		/* we can't have a free VC for now. Too bad,

		/*

		 * We're unable to switch to the SUSPEND_CONSOLE.

		 * Let the calling function know so it can decide

		 * what to do.

/*

 * Normally during a suspend, we allocate a new console and switch to it.

 * When we resume, we switch back to the original console.  This switch

 * can be slow, so on systems where the framebuffer can handle restoration

 * of video registers anyways, there's little point in doing the console

 * switch.  This function allows you to disable it by passing it '0'.

 SPDX-License-Identifier: GPL-2.0

/*

 * Written for linux by Johan Myreen as a translation from

 * the assembly version by Linus (with diacriticals added)

 *

 * Some additional features added by Christoph Niemann (ChN), March 1993

 *

 * Loadable keymaps by Risto Kankkunen, May 1993

 *

 * Diacriticals redone & other small changes, aeb@cwi.nl, June 1993

 * Added decr/incr_console, dynamic keymaps, Unicode support,

 * dynamic function/string keys, led setting,  Sept 1994

 * `Sticky' modifier keys, 951006.

 *

 * 11-11-96: SAK should now work in the raw mode (Martin Mares)

 *

 * Modified to provide 'generic' keyboard support by Hamish Macdonald

 * Merge with the m68k keyboard driver and split-off of the PC low-level

 * parts by Geert Uytterhoeven, May 1997

 *

 * 27-05-97: Added support for the Magic SysRq Key (Martin Mares)

 * 30-07-98: Dead keys redone, aeb@cwi.nl.

 * 21-08-02: Converted to input API, major cleanup. (Vojtech Pavlik)

/*

 * Exported functions/variables

/*

 * Handler Tables.

/*

 * Variables exported for vt_ioctl.c

/*

 * Internal Data.

 maximum values each key_handler can handle */

 guard 'func_buf'  and friends */

 keyboard key bitmap */

 shift state counters.. */

 Handles a number being assembled on the number pad */

 flag telling character repeat */

 undefined */

/*

 * Notifier list for console keyboard events

/*

 * Translation of scancodes to keycodes. We set them on only the first

 * keyboard in the list that accepts the scancode and keycode.

 * Explanation for not choosing the first attached keyboard anymore:

 *  USB keyboards for example have two event devices: one for all "normal"

 *  keys and one for extra function keys (like "volume up", "make coffee",

 *  etc.). So this means that scancodes for the extra function keys won't

 *  be valid for the first event device, but will be for the second.

 stop as soon as we successfully get one */

 stop as soon as we successfully set one */

/*

 * Making beeps and bells. Note that we prefer beeps to bells, but when

 * shutting the sound off we do both.

/*

 * Setting the keyboard rate.

 Copy currently used settings */

/*

 * Helper Functions.

/*

 * Many other routines do put_queue, but I think either

 * they produce ASCII, or they produce some user-assigned

 * string, and in both cases we might assume that it is

 * in utf-8 already.

  0******* */

 110***** 10****** */

 1110**** 10****** 10****** */

 11110*** 10****** 10****** 10****** */

 FIXME: review locking for vt.c callers */

/*

 * Called after returning from RAW mode or when changing consoles - recompute

 * shift_down[] and shift_state from key_down[] maybe called when keymap is

 * undefined, so that shiftkey release is seen. The caller must hold the

 * kbd_event_lock.

 We still have to export this method to vt.c */

/*

 * We have a combining character DIACR here, followed by the character CH.

 * If the combination occurs in the table, return the corresponding value.

 * Otherwise, if CH is a space or equals DIACR, return DIACR.

 * Otherwise, conclude that DIACR was not combining after all,

 * queue it and return CH.

/*

 * Special function handlers

	/*

	 * Note: SCROLLOCK will be set (cleared) by stop_tty (start_tty);

	 * these routines are also activated by ^S/^Q.

	 * (And SCROLLOCK can also be set by the ioctl KDSKBLED.)

/*

 * Bind this to Shift-NumLock if you work in application keypad mode

 * but want to be able to change the NumLock flag.

 * Bind this to NumLock if you prefer that the NumLock key always

 * changes the NumLock flag.

 switch to the last used console, ChN */

 Currently switching?  Queue this next switch relative to that. */

 Currently switching?  Queue this next switch relative to that. */

/*

 * Special key handlers

 SAK is allowed even in raw mode */

 no action, if this is a key release */

/*

 * Handle dead key. Note that we now may have several

 * dead keys modifying the same character. Very useful

 * for Vietnamese.

/*

 * Obsolete - for backwards compatibility only

 dead_grave */

 dead_acute */

 dead_circumflex */

 dead_tilda */

 dead_diaeresis */

 dead_cedilla */

 dead_macron */

 dead_breve */

 dead_abovedot */

 dead_abovering */

 dead_doubleacute */

 dead_caron */

 dead_ogonek */

 dead_iota */

 dead_voiced_sound */

 dead_semivoiced_sound */

 dead_belowdot */

 dead_hook */

 dead_horn */

 dead_stroke */

 dead_abovecomma */

 dead_abovereversedcomma */

 dead_doublegrave */

 dead_invertedbreve */

 dead_belowcomma */

 dead_currency */

 dead_greek */

	static const char pad_chars[] = "0123456789+-*/\015,.?()#";

	static const char app_map[] = "pqrstuvwxylSRQMnnmPQS";



	if (up_flag)

		return;		/* no action, if this is a key release */



	/* kludge... shift forces cursor/number keys */

	if (vc_kbd_mode(kbd, VC_APPLIC) && !shift_down[KG_SHIFT]) {

		applkey(vc, app_map[value], 1);

		return;

	}



	if (!vc_kbd_led(kbd, VC_NUMLOCK)) {



		switch (value) {

		case KVAL(K_PCOMMA):

		case KVAL(K_PDOT):

			k_fn(vc, KVAL(K_REMOVE), 0);

			return;

		case KVAL(K_P0):

			k_fn(vc, KVAL(K_INSERT), 0);

			return;

		case KVAL(K_P1):

			k_fn(vc, KVAL(K_SELECT), 0);

			return;

		case KVAL(K_P2):

			k_cur(vc, KVAL(K_DOWN), 0);

			return;

		case KVAL(K_P3):

			k_fn(vc, KVAL(K_PGDN), 0);

			return;

		case KVAL(K_P4):

			k_cur(vc, KVAL(K_LEFT), 0);

			return;

		case KVAL(K_P6):

			k_cur(vc, KVAL(K_RIGHT), 0);

			return;

		case KVAL(K_P7):

			k_fn(vc, KVAL(K_FIND), 0);

			return;

		case KVAL(K_P8):

			k_cur(vc, KVAL(K_UP), 0);

			return;

		case KVAL(K_P9):

			k_fn(vc, KVAL(K_PGUP), 0);

			return;

		case KVAL(K_P5):

			applkey(vc, 'G', vc_kbd_mode(kbd, VC_APPLIC));

			return;

		}

	}



	put_queue(vc, pad_chars[value]);

	if (value == KVAL(K_PENTER) && vc_kbd_mode(kbd, VC_CRLF))

		put_queue(vc, '\n');

}



static void k_shift(struct vc_data *vc, unsigned char value, char up_flag)

{

	int old_state = shift_state;



	if (rep)

		return;



	 */

	if (value == KVAL(K_CAPSSHIFT)) {

		value = KVAL(K_SHIFT);

		if (!up_flag)

			clr_vc_kbd_led(kbd, VC_CAPSLOCK);

	}



	if (up_flag) {



		 */

		if (shift_down[value])

			shift_down[value]--;

	} else

		shift_down[value]++;



	if (shift_down[value])

		shift_state |= BIT(value);

	else

		shift_state &= ~BIT(value);



	/* kludge */

	if (up_flag && shift_state != old_state && npadch_active) {

		if (kbd->kbdmode == VC_UNICODE)

			to_utf8(vc, npadch_value);

		else

			put_queue(vc, npadch_value & 0xff);

		npadch_active = false;

	}

}



static void k_meta(struct vc_data *vc, unsigned char value, char up_flag)

{

	if (up_flag)

		return;



	if (vc_kbd_mode(kbd, VC_META)) {

		put_queue(vc, '\033');

		put_queue(vc, value);

	} else

		put_queue(vc, value | BIT(7));

}



static void k_ascii(struct vc_data *vc, unsigned char value, char up_flag)

{

	unsigned int base;



	if (up_flag)

		return;



	if (value < 10) {

		/* decimal input of code, while Alt depressed */

		base = 10;

	} else {

		/* hexadecimal input of code, while AltGr depressed */

		value -= 10;

		base = 16;

	}



	if (!npadch_active) {

		npadch_value = 0;

		npadch_active = true;

	}



	npadch_value = npadch_value * base + value;

}



static void k_lock(struct vc_data *vc, unsigned char value, char up_flag)

{

	if (up_flag || rep)

		return;



	chg_vc_kbd_lock(kbd, value);

}



static void k_slock(struct vc_data *vc, unsigned char value, char up_flag)

{

	k_shift(vc, value, up_flag);

	if (up_flag || rep)

		return;



	chg_vc_kbd_slock(kbd, value);

	/* try to make Alt, oops, AltGr and such work */

	if (!key_maps[kbd->lockstate ^ kbd->slockstate]) {

		kbd->slockstate = 0;

		chg_vc_kbd_slock(kbd, value);

	}

}



/* by default, 300ms interval for combination release */

static unsigned brl_timeout = 300;

MODULE_PARM_DESC(brl_timeout, "Braille keys release delay in ms (0 for commit on first key release)");

module_param(brl_timeout, uint, 0644);



static unsigned brl_nbchords = 1;

MODULE_PARM_DESC(brl_nbchords, "Number of chords that produce a braille pattern (0 for dead chords)");

module_param(brl_nbchords, uint, 0644);



static void k_brlcommit(struct vc_data *vc, unsigned int pattern, char up_flag)

{

	static unsigned long chords;

	static unsigned committed;



	if (!brl_nbchords)

		k_deadunicode(vc, BRL_UC_ROW | pattern, up_flag);

	else {

		committed |= pattern;

		chords++;

		if (chords == brl_nbchords) {

			k_unicode(vc, BRL_UC_ROW | committed, up_flag);

			chords = 0;

			committed = 0;

		}

	}

}



static void k_brl(struct vc_data *vc, unsigned char value, char up_flag)

{

	static unsigned pressed, committing;

	static unsigned long releasestart;



	if (kbd->kbdmode != VC_UNICODE) {

		if (!up_flag)

			pr_warn("keyboard mode must be unicode for braille patterns\n");

		return;

	}



	if (!value) {

		k_unicode(vc, BRL_UC_ROW, up_flag);

		return;

	}



	if (value > 8)

		return;



	if (!up_flag) {

		pressed |= BIT(value - 1);

		if (!brl_timeout)

			committing = pressed;

	} else if (brl_timeout) {

		if (!committing ||

		    time_after(jiffies,

			       releasestart + msecs_to_jiffies(brl_timeout))) {

			committing = pressed;

			releasestart = jiffies;

		}

		pressed &= ~BIT(value - 1);

		if (!pressed && committing) {

			k_brlcommit(vc, committing, 0);

			committing = 0;

		}

	} else {

		if (committing) {

			k_brlcommit(vc, committing, 0);

			committing = 0;

		}

		pressed &= ~BIT(value - 1);

	}

}



#if IS_ENABLED(CONFIG_INPUT_LEDS) && IS_ENABLED(CONFIG_LEDS_TRIGGERS)



struct kbd_led_trigger {

	struct led_trigger trigger;

	unsigned int mask;

};



static int kbd_led_trigger_activate(struct led_classdev *cdev)

{

	struct kbd_led_trigger *trigger =

		container_of(cdev->trigger, struct kbd_led_trigger, trigger);



	tasklet_disable(&keyboard_tasklet);

	if (ledstate != -1U)

		led_trigger_event(&trigger->trigger,

				  ledstate & trigger->mask ?

					LED_FULL : LED_OFF);

	tasklet_enable(&keyboard_tasklet);



	return 0;

}



#define KBD_LED_TRIGGER(_led_bit, _name) {			\

		.trigger = {					\

			.name = _name,				\

			.activate = kbd_led_trigger_activate,	\

		},						\

		.mask	= BIT(_led_bit),			\

	}



#define KBD_LOCKSTATE_TRIGGER(_led_bit, _name)		\

	KBD_LED_TRIGGER((_led_bit) + 8, _name)



static struct kbd_led_trigger kbd_led_triggers[] = {

	KBD_LED_TRIGGER(VC_SCROLLOCK, "kbd-scrolllock"),

	KBD_LED_TRIGGER(VC_NUMLOCK,   "kbd-numlock"),

	KBD_LED_TRIGGER(VC_CAPSLOCK,  "kbd-capslock"),

	KBD_LED_TRIGGER(VC_KANALOCK,  "kbd-kanalock"),



	KBD_LOCKSTATE_TRIGGER(VC_SHIFTLOCK,  "kbd-shiftlock"),

	KBD_LOCKSTATE_TRIGGER(VC_ALTGRLOCK,  "kbd-altgrlock"),

	KBD_LOCKSTATE_TRIGGER(VC_CTRLLOCK,   "kbd-ctrllock"),

	KBD_LOCKSTATE_TRIGGER(VC_ALTLOCK,    "kbd-altlock"),

	KBD_LOCKSTATE_TRIGGER(VC_SHIFTLLOCK, "kbd-shiftllock"),

	KBD_LOCKSTATE_TRIGGER(VC_SHIFTRLOCK, "kbd-shiftrlock"),

	KBD_LOCKSTATE_TRIGGER(VC_CTRLLLOCK,  "kbd-ctrlllock"),

	KBD_LOCKSTATE_TRIGGER(VC_CTRLRLOCK,  "kbd-ctrlrlock"),

};



static void kbd_propagate_led_state(unsigned int old_state,

				    unsigned int new_state)

{

	struct kbd_led_trigger *trigger;

	unsigned int changed = old_state ^ new_state;

	int i;



	for (i = 0; i < ARRAY_SIZE(kbd_led_triggers); i++) {

		trigger = &kbd_led_triggers[i];



		if (changed & trigger->mask)

			led_trigger_event(&trigger->trigger,

					  new_state & trigger->mask ?

						LED_FULL : LED_OFF);

	}

}



static int kbd_update_leds_helper(struct input_handle *handle, void *data)

{

	unsigned int led_state = *(unsigned int *)data;



	if (test_bit(EV_LED, handle->dev->evbit))

		kbd_propagate_led_state(~led_state, led_state);



	return 0;

}



static void kbd_init_leds(void)

{

	int error;

	int i;



	for (i = 0; i < ARRAY_SIZE(kbd_led_triggers); i++) {

		error = led_trigger_register(&kbd_led_triggers[i].trigger);

		if (error)

			pr_err("error %d while registering trigger %s\n",

			       error, kbd_led_triggers[i].trigger.name);

	}

}



#else



static int kbd_update_leds_helper(struct input_handle *handle, void *data)

{

	unsigned int leds = *(unsigned int *)data;



	if (test_bit(EV_LED, handle->dev->evbit)) {

		input_inject_event(handle, EV_LED, LED_SCROLLL, !!(leds & BIT(0)));

		input_inject_event(handle, EV_LED, LED_NUML,    !!(leds & BIT(1)));

		input_inject_event(handle, EV_LED, LED_CAPSL,   !!(leds & BIT(2)));

		input_inject_event(handle, EV_SYN, SYN_REPORT, 0);

	}



	return 0;

}



static void kbd_propagate_led_state(unsigned int old_state,

				    unsigned int new_state)

{

	input_handler_for_each_handle(&kbd_handler, &new_state,

				      kbd_update_leds_helper);

}



static void kbd_init_leds(void)

{

}



#endif





 */

static unsigned char getledstate(void)

{

	return ledstate & 0xff;

}



void setledstate(struct kbd_struct *kb, unsigned int led)

{

        unsigned long flags;

        spin_lock_irqsave(&led_lock, flags);

	if (!(led & ~7)) {

		ledioctl = led;

		kb->ledmode = LED_SHOW_IOCTL;

	} else

		kb->ledmode = LED_SHOW_FLAGS;



	set_leds();

	spin_unlock_irqrestore(&led_lock, flags);

}



static inline unsigned char getleds(void)

{

	struct kbd_struct *kb = kbd_table + fg_console;



	if (kb->ledmode == LED_SHOW_IOCTL)

		return ledioctl;



	return kb->ledflagstate;

}



*

 */

int vt_get_leds(unsigned int console, int flag)

{

	struct kbd_struct *kb = &kbd_table[console];

	int ret;

	unsigned long flags;



	spin_lock_irqsave(&led_lock, flags);

	ret = vc_kbd_led(kb, flag);

	spin_unlock_irqrestore(&led_lock, flags);



	return ret;

}

EXPORT_SYMBOL_GPL(vt_get_leds);



*

 */

void vt_set_led_state(unsigned int console, int leds)

{

	struct kbd_struct *kb = &kbd_table[console];

	setledstate(kb, leds);

}



*

 */

void vt_kbd_con_start(unsigned int console)

{

	struct kbd_struct *kb = &kbd_table[console];

	unsigned long flags;

	spin_lock_irqsave(&led_lock, flags);

	clr_vc_kbd_led(kb, VC_SCROLLOCK);

	set_leds();

	spin_unlock_irqrestore(&led_lock, flags);

}



*

 */

void vt_kbd_con_stop(unsigned int console)

{

	struct kbd_struct *kb = &kbd_table[console];

	unsigned long flags;

	spin_lock_irqsave(&led_lock, flags);

	set_vc_kbd_led(kb, VC_SCROLLOCK);

	set_leds();

	spin_unlock_irqrestore(&led_lock, flags);

}





 */

static void kbd_bh(struct tasklet_struct *unused)

{

	unsigned int leds;

	unsigned long flags;



	spin_lock_irqsave(&led_lock, flags);

	leds = getleds();

	leds |= (unsigned int)kbd->lockstate << 8;

	spin_unlock_irqrestore(&led_lock, flags);



	if (leds != ledstate) {

		kbd_propagate_led_state(ledstate, leds);

		ledstate = leds;

	}

}



#if defined(CONFIG_X86) || defined(CONFIG_IA64) || defined(CONFIG_ALPHA) ||\

    defined(CONFIG_MIPS) || defined(CONFIG_PPC) || defined(CONFIG_SPARC) ||\

    defined(CONFIG_PARISC) || defined(CONFIG_SUPERH) ||\

    (defined(CONFIG_ARM) && defined(CONFIG_KEYBOARD_ATKBD) && !defined(CONFIG_ARCH_RPC))



static inline bool kbd_is_hw_raw(const struct input_dev *dev)

{

	if (!test_bit(EV_MSC, dev->evbit) || !test_bit(MSC_RAW, dev->mscbit))

		return false;



	return dev->id.bustype == BUS_I8042 &&

		dev->id.vendor == 0x0001 && dev->id.product == 0x0001;

}



static const unsigned short x86_keycodes[256] =

	{ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,

	 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,

	 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,

	 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,

	 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,

	 80, 81, 82, 83, 84,118, 86, 87, 88,115,120,119,121,112,123, 92,

	284,285,309,  0,312, 91,327,328,329,331,333,335,336,337,338,339,

	367,288,302,304,350, 89,334,326,267,126,268,269,125,347,348,349,

	360,261,262,263,268,376,100,101,321,316,373,286,289,102,351,355,

	103,104,105,275,287,279,258,106,274,107,294,364,358,363,362,361,

	291,108,381,281,290,272,292,305,280, 99,112,257,306,359,113,114,

	264,117,271,374,379,265,266, 93, 94, 95, 85,259,375,260, 90,116,

	377,109,111,277,278,282,283,295,296,297,299,300,301,293,303,307,

	308,310,313,314,315,317,318,319,320,357,322,323,324,325,276,330,

	332,340,365,342,343,344,345,346,356,270,341,368,369,370,371,372 };



#ifdef CONFIG_SPARC

static int sparc_l1_a_state;

extern void sun_do_break(void);

#endif



static int emulate_raw(struct vc_data *vc, unsigned int keycode,

		       unsigned char up_flag)

{

	int code;



	switch (keycode) {



	case KEY_PAUSE:

		put_queue(vc, 0xe1);

		put_queue(vc, 0x1d | up_flag);

		put_queue(vc, 0x45 | up_flag);

		break;



	case KEY_HANGEUL:

		if (!up_flag)

			put_queue(vc, 0xf2);

		break;



	case KEY_HANJA:

		if (!up_flag)

			put_queue(vc, 0xf1);

		break;



	case KEY_SYSRQ:



		 */

		if (test_bit(KEY_LEFTALT, key_down) ||

		    test_bit(KEY_RIGHTALT, key_down)) {

			put_queue(vc, 0x54 | up_flag);

		} else {

			put_queue(vc, 0xe0);

			put_queue(vc, 0x2a | up_flag);

			put_queue(vc, 0xe0);

			put_queue(vc, 0x37 | up_flag);

		}

		break;



	default:

		if (keycode > 255)

			return -1;



		code = x86_keycodes[keycode];

		if (!code)

			return -1;



		if (code & 0x100)

			put_queue(vc, 0xe0);

		put_queue(vc, (code & 0x7f) | up_flag);



		break;

	}



	return 0;

}



#else



static inline bool kbd_is_hw_raw(const struct input_dev *dev)

{

	return false;

}



static int emulate_raw(struct vc_data *vc, unsigned int keycode, unsigned char up_flag)

{

	if (keycode > 127)

		return -1;



	put_queue(vc, keycode | up_flag);

	return 0;

}

#endif



static void kbd_rawcode(unsigned char data)

{

	struct vc_data *vc = vc_cons[fg_console].d;



	kbd = &kbd_table[vc->vc_num];

	if (kbd->kbdmode == VC_RAW)

		put_queue(vc, data);

}



static void kbd_keycode(unsigned int keycode, int down, bool hw_raw)

{

	struct vc_data *vc = vc_cons[fg_console].d;

	unsigned short keysym, *key_map;

	unsigned char type;

	bool raw_mode;

	struct tty_struct *tty;

	int shift_final;

	struct keyboard_notifier_param param = { .vc = vc, .value = keycode, .down = down };

	int rc;



	tty = vc->port.tty;



	if (tty && (!tty->driver_data)) {

		/* No driver data? Strange. Okay we fix it then. */

		tty->driver_data = vc;

	}



	kbd = &kbd_table[vc->vc_num];



#ifdef CONFIG_SPARC

	if (keycode == KEY_STOP)

		sparc_l1_a_state = down;

#endif



	rep = (down == 2);



	raw_mode = (kbd->kbdmode == VC_RAW);

	if (raw_mode && !hw_raw)

		if (emulate_raw(vc, keycode, !down << 7))

			if (keycode < BTN_MISC && printk_ratelimit())

				pr_warn("can't emulate rawmode for keycode %d\n",

					keycode);



#ifdef CONFIG_SPARC

	if (keycode == KEY_A && sparc_l1_a_state) {

		sparc_l1_a_state = false;

		sun_do_break();

	}

#endif



	if (kbd->kbdmode == VC_MEDIUMRAW) {



		 */

		if (keycode < 128) {

			put_queue(vc, keycode | (!down << 7));

		} else {

			put_queue(vc, !down << 7);

			put_queue(vc, (keycode >> 7) | BIT(7));

			put_queue(vc, keycode | BIT(7));

		}

		raw_mode = true;

	}



	assign_bit(keycode, key_down, down);



	if (rep &&

	    (!vc_kbd_mode(kbd, VC_REPEAT) ||

	     (tty && !L_ECHO(tty) && tty_chars_in_buffer(tty)))) {



		 */

		return;

	}



	param.shift = shift_final = (shift_state | kbd->slockstate) ^ kbd->lockstate;

	param.ledstate = kbd->ledflagstate;

	key_map = key_maps[shift_final];



	rc = atomic_notifier_call_chain(&keyboard_notifier_list,

					KBD_KEYCODE, &param);

	if (rc == NOTIFY_STOP || !key_map) {

		atomic_notifier_call_chain(&keyboard_notifier_list,

					   KBD_UNBOUND_KEYCODE, &param);

		do_compute_shiftstate();

		kbd->slockstate = 0;

		return;

	}



	if (keycode < NR_KEYS)

		keysym = key_map[keycode];

	else if (keycode >= KEY_BRL_DOT1 && keycode <= KEY_BRL_DOT8)

		keysym = U(K(KT_BRL, keycode - KEY_BRL_DOT1 + 1));

	else

		return;



	type = KTYP(keysym);



	if (type < 0xf0) {

		param.value = keysym;

		rc = atomic_notifier_call_chain(&keyboard_notifier_list,

						KBD_UNICODE, &param);

		if (rc != NOTIFY_STOP)

			if (down && !raw_mode)

				k_unicode(vc, keysym, !down);

		return;

	}



	type -= 0xf0;



	if (type == KT_LETTER) {

		type = KT_LATIN;

		if (vc_kbd_led(kbd, VC_CAPSLOCK)) {

			key_map = key_maps[shift_final ^ BIT(KG_SHIFT)];

			if (key_map)

				keysym = key_map[keycode];

		}

	}



	param.value = keysym;

	rc = atomic_notifier_call_chain(&keyboard_notifier_list,

					KBD_KEYSYM, &param);

	if (rc == NOTIFY_STOP)

		return;



	if ((raw_mode || kbd->kbdmode == VC_OFF) && type != KT_SPEC && type != KT_SHIFT)

		return;



	(*k_handler[type])(vc, keysym & 0xff, !down);



	param.ledstate = kbd->ledflagstate;

	atomic_notifier_call_chain(&keyboard_notifier_list, KBD_POST_KEYSYM, &param);



	if (type != KT_SLOCK)

		kbd->slockstate = 0;

}



static void kbd_event(struct input_handle *handle, unsigned int event_type,

		      unsigned int event_code, int value)

{

	/* We are called with interrupts disabled, just take the lock */

	spin_lock(&kbd_event_lock);



	if (event_type == EV_MSC && event_code == MSC_RAW &&

			kbd_is_hw_raw(handle->dev))

		kbd_rawcode(value);

	if (event_type == EV_KEY && event_code <= KEY_MAX)

		kbd_keycode(event_code, value, kbd_is_hw_raw(handle->dev));



	spin_unlock(&kbd_event_lock);



	tasklet_schedule(&keyboard_tasklet);

	do_poke_blanked_console = 1;

	schedule_console_callback();

}



static bool kbd_match(struct input_handler *handler, struct input_dev *dev)

{

	if (test_bit(EV_SND, dev->evbit))

		return true;



	if (test_bit(EV_KEY, dev->evbit)) {

		if (find_next_bit(dev->keybit, BTN_MISC, KEY_RESERVED) <

				BTN_MISC)

			return true;

		if (find_next_bit(dev->keybit, KEY_BRL_DOT10 + 1,

					KEY_BRL_DOT1) <= KEY_BRL_DOT10)

			return true;

	}



	return false;

}





 */

static int kbd_connect(struct input_handler *handler, struct input_dev *dev,

			const struct input_device_id *id)

{

	struct input_handle *handle;

	int error;



	handle = kzalloc(sizeof(struct input_handle), GFP_KERNEL);

	if (!handle)

		return -ENOMEM;



	handle->dev = dev;

	handle->handler = handler;

	handle->name = "kbd";



	error = input_register_handle(handle);

	if (error)

		goto err_free_handle;



	error = input_open_device(handle);

	if (error)

		goto err_unregister_handle;



	return 0;



 err_unregister_handle:

	input_unregister_handle(handle);

 err_free_handle:

	kfree(handle);

	return error;

}



static void kbd_disconnect(struct input_handle *handle)

{

	input_close_device(handle);

	input_unregister_handle(handle);

	kfree(handle);

}





 */

static void kbd_start(struct input_handle *handle)

{

	tasklet_disable(&keyboard_tasklet);



	if (ledstate != -1U)

		kbd_update_leds_helper(handle, &ledstate);



	tasklet_enable(&keyboard_tasklet);

}



static const struct input_device_id kbd_ids[] = {

	{

		.flags = INPUT_DEVICE_ID_MATCH_EVBIT,

		.evbit = { BIT_MASK(EV_KEY) },

	},



	{

		.flags = INPUT_DEVICE_ID_MATCH_EVBIT,

		.evbit = { BIT_MASK(EV_SND) },

	},



	{ },    /* Terminating entry */

};



MODULE_DEVICE_TABLE(input, kbd_ids);



static struct input_handler kbd_handler = {

	.event		= kbd_event,

	.match		= kbd_match,

	.connect	= kbd_connect,

	.disconnect	= kbd_disconnect,

	.start		= kbd_start,

	.name		= "kbd",

	.id_table	= kbd_ids,

};



int __init kbd_init(void)

{

	int i;

	int error;



	for (i = 0; i < MAX_NR_CONSOLES; i++) {

		kbd_table[i].ledflagstate = kbd_defleds();

		kbd_table[i].default_ledflagstate = kbd_defleds();

		kbd_table[i].ledmode = LED_SHOW_FLAGS;

		kbd_table[i].lockstate = KBD_DEFLOCK;

		kbd_table[i].slockstate = 0;

		kbd_table[i].modeflags = KBD_DEFMODE;

		kbd_table[i].kbdmode = default_utf8 ? VC_UNICODE : VC_XLATE;

	}



	kbd_init_leds();



	error = input_register_handler(&kbd_handler);

	if (error)

		return error;



	tasklet_enable(&keyboard_tasklet);

	tasklet_schedule(&keyboard_tasklet);



	return 0;

}



/* Ioctl support code */



*

 */

int vt_do_diacrit(unsigned int cmd, void __user *udp, int perm)

{

	unsigned long flags;

	int asize;

	int ret = 0;



	switch (cmd) {

	case KDGKBDIACR:

	{

		struct kbdiacrs __user *a = udp;

		struct kbdiacr *dia;

		int i;



		dia = kmalloc_array(MAX_DIACR, sizeof(struct kbdiacr),

								GFP_KERNEL);

		if (!dia)

			return -ENOMEM;



 Lock the diacriticals table, make a copy and then

		   copy it after we unlock */

		spin_lock_irqsave(&kbd_event_lock, flags);



		asize = accent_table_size;

		for (i = 0; i < asize; i++) {

			dia[i].diacr = conv_uni_to_8bit(

						accent_table[i].diacr);

			dia[i].base = conv_uni_to_8bit(

						accent_table[i].base);

			dia[i].result = conv_uni_to_8bit(

						accent_table[i].result);

		}

		spin_unlock_irqrestore(&kbd_event_lock, flags);



		if (put_user(asize, &a->kb_cnt))

			ret = -EFAULT;

		else  if (copy_to_user(a->kbdiacr, dia,

				asize * sizeof(struct kbdiacr)))

			ret = -EFAULT;

		kfree(dia);

		return ret;

	}

	case KDGKBDIACRUC:

	{

		struct kbdiacrsuc __user *a = udp;

		void *buf;



		buf = kmalloc_array(MAX_DIACR, sizeof(struct kbdiacruc),

								GFP_KERNEL);

		if (buf == NULL)

			return -ENOMEM;



 Lock the diacriticals table, make a copy and then

		   copy it after we unlock */

		spin_lock_irqsave(&kbd_event_lock, flags);



		asize = accent_table_size;

		memcpy(buf, accent_table, asize * sizeof(struct kbdiacruc));



		spin_unlock_irqrestore(&kbd_event_lock, flags);



		if (put_user(asize, &a->kb_cnt))

			ret = -EFAULT;

		else if (copy_to_user(a->kbdiacruc, buf,

				asize*sizeof(struct kbdiacruc)))

			ret = -EFAULT;

		kfree(buf);

		return ret;

	}



	case KDSKBDIACR:

	{

		struct kbdiacrs __user *a = udp;

		struct kbdiacr *dia = NULL;

		unsigned int ct;

		int i;



		if (!perm)

			return -EPERM;

		if (get_user(ct, &a->kb_cnt))

			return -EFAULT;

		if (ct >= MAX_DIACR)

			return -EINVAL;



		if (ct) {



			dia = memdup_user(a->kbdiacr,

					sizeof(struct kbdiacr) * ct);

			if (IS_ERR(dia))

				return PTR_ERR(dia);



		}



		spin_lock_irqsave(&kbd_event_lock, flags);

		accent_table_size = ct;

		for (i = 0; i < ct; i++) {

			accent_table[i].diacr =

					conv_8bit_to_uni(dia[i].diacr);

			accent_table[i].base =

					conv_8bit_to_uni(dia[i].base);

			accent_table[i].result =

					conv_8bit_to_uni(dia[i].result);

		}

		spin_unlock_irqrestore(&kbd_event_lock, flags);

		kfree(dia);

		return 0;

	}



	case KDSKBDIACRUC:

	{

		struct kbdiacrsuc __user *a = udp;

		unsigned int ct;

		void *buf = NULL;



		if (!perm)

			return -EPERM;



		if (get_user(ct, &a->kb_cnt))

			return -EFAULT;



		if (ct >= MAX_DIACR)

			return -EINVAL;



		if (ct) {

			buf = memdup_user(a->kbdiacruc,

					  ct * sizeof(struct kbdiacruc));

			if (IS_ERR(buf))

				return PTR_ERR(buf);

		} 

		spin_lock_irqsave(&kbd_event_lock, flags);

		if (ct)

			memcpy(accent_table, buf,

					ct * sizeof(struct kbdiacruc));

		accent_table_size = ct;

		spin_unlock_irqrestore(&kbd_event_lock, flags);

		kfree(buf);

		return 0;

	}

	}

	return ret;

}



*

 */

int vt_do_kdskbmode(unsigned int console, unsigned int arg)

{

	struct kbd_struct *kb = &kbd_table[console];

	int ret = 0;

	unsigned long flags;



	spin_lock_irqsave(&kbd_event_lock, flags);

	switch(arg) {

	case K_RAW:

		kb->kbdmode = VC_RAW;

		break;

	case K_MEDIUMRAW:

		kb->kbdmode = VC_MEDIUMRAW;

		break;

	case K_XLATE:

		kb->kbdmode = VC_XLATE;

		do_compute_shiftstate();

		break;

	case K_UNICODE:

		kb->kbdmode = VC_UNICODE;

		do_compute_shiftstate();

		break;

	case K_OFF:

		kb->kbdmode = VC_OFF;

		break;

	default:

		ret = -EINVAL;

	}

	spin_unlock_irqrestore(&kbd_event_lock, flags);

	return ret;

}



*

 */

int vt_do_kdskbmeta(unsigned int console, unsigned int arg)

{

	struct kbd_struct *kb = &kbd_table[console];

	int ret = 0;

	unsigned long flags;



	spin_lock_irqsave(&kbd_event_lock, flags);

	switch(arg) {

	case K_METABIT:

		clr_vc_kbd_mode(kb, VC_META);

		break;

	case K_ESCPREFIX:

		set_vc_kbd_mode(kb, VC_META);

		break;

	default:

		ret = -EINVAL;

	}

	spin_unlock_irqrestore(&kbd_event_lock, flags);

	return ret;

}



int vt_do_kbkeycode_ioctl(int cmd, struct kbkeycode __user *user_kbkc,

								int perm)

{

	struct kbkeycode tmp;

	int kc = 0;



	if (copy_from_user(&tmp, user_kbkc, sizeof(struct kbkeycode)))

		return -EFAULT;

	switch (cmd) {

	case KDGETKEYCODE:

		kc = getkeycode(tmp.scancode);

		if (kc >= 0)

			kc = put_user(kc, &user_kbkc->keycode);

		break;

	case KDSETKEYCODE:

		if (!perm)

			return -EPERM;

		kc = setkeycode(tmp.scancode, tmp.keycode);

		break;

	}

	return kc;

}



static unsigned short vt_kdgkbent(unsigned char kbdmode, unsigned char idx,

		unsigned char map)

{

	unsigned short *key_map, val;

	unsigned long flags;



	/* Ensure another thread doesn't free it under us */

	spin_lock_irqsave(&kbd_event_lock, flags);

	key_map = key_maps[map];

	if (key_map) {

		val = U(key_map[idx]);

		if (kbdmode != VC_UNICODE && KTYP(val) >= NR_TYPES)

			val = K_HOLE;

	} else

		val = idx ? K_HOLE : K_NOSUCHMAP;

	spin_unlock_irqrestore(&kbd_event_lock, flags);



	return val;

}



static int vt_kdskbent(unsigned char kbdmode, unsigned char idx,

		unsigned char map, unsigned short val)

{

	unsigned long flags;

	unsigned short *key_map, *new_map, oldval;



	if (!idx && val == K_NOSUCHMAP) {

		spin_lock_irqsave(&kbd_event_lock, flags);

		/* deallocate map */

		key_map = key_maps[map];

		if (map && key_map) {

			key_maps[map] = NULL;

			if (key_map[0] == U(K_ALLOCATED)) {

				kfree(key_map);

				keymap_count--;

			}

		}

		spin_unlock_irqrestore(&kbd_event_lock, flags);



		return 0;

	}



	if (KTYP(val) < NR_TYPES) {

		if (KVAL(val) > max_vals[KTYP(val)])

			return -EINVAL;

	} else if (kbdmode != VC_UNICODE)

		return -EINVAL;



	/* ++Geert: non-PC keyboards may generate keycode zero */

#if !defined(__mc68000__) && !defined(__powerpc__)

	/* assignment to entry 0 only tests validity of args */

	if (!idx)

		return 0;

#endif



	new_map = kmalloc(sizeof(plain_map), GFP_KERNEL);

	if (!new_map)

		return -ENOMEM;



	spin_lock_irqsave(&kbd_event_lock, flags);

	key_map = key_maps[map];

	if (key_map == NULL) {

		int j;



		if (keymap_count >= MAX_NR_OF_USER_KEYMAPS &&

		    !capable(CAP_SYS_RESOURCE)) {

			spin_unlock_irqrestore(&kbd_event_lock, flags);

			kfree(new_map);

			return -EPERM;

		}

		key_maps[map] = new_map;

		key_map = new_map;

		key_map[0] = U(K_ALLOCATED);

		for (j = 1; j < NR_KEYS; j++)

			key_map[j] = U(K_HOLE);

		keymap_count++;

	} else

		kfree(new_map);



	oldval = U(key_map[idx]);

	if (val == oldval)

		goto out;



	/* Attention Key */

	if ((oldval == K_SAK || val == K_SAK) && !capable(CAP_SYS_ADMIN)) {

		spin_unlock_irqrestore(&kbd_event_lock, flags);

		return -EPERM;

	}



	key_map[idx] = U(val);

	if (!map && (KTYP(oldval) == KT_SHIFT || KTYP(val) == KT_SHIFT))

		do_compute_shiftstate();

out:

	spin_unlock_irqrestore(&kbd_event_lock, flags);



	return 0;

}



int vt_do_kdsk_ioctl(int cmd, struct kbentry __user *user_kbe, int perm,

						unsigned int console)

{

	struct kbd_struct *kb = &kbd_table[console];

	struct kbentry kbe;



	if (copy_from_user(&kbe, user_kbe, sizeof(struct kbentry)))

		return -EFAULT;



	switch (cmd) {

	case KDGKBENT:

		return put_user(vt_kdgkbent(kb->kbdmode, kbe.kb_index,

					kbe.kb_table),

				&user_kbe->kb_value);

	case KDSKBENT:

		if (!perm || !capable(CAP_SYS_TTY_CONFIG))

			return -EPERM;

		return vt_kdskbent(kb->kbdmode, kbe.kb_index, kbe.kb_table,

				kbe.kb_value);

	}

	return 0;

}



static char *vt_kdskbsent(char *kbs, unsigned char cur)

{

	static DECLARE_BITMAP(is_kmalloc, MAX_NR_FUNC);

	char *cur_f = func_table[cur];



	if (cur_f && strlen(cur_f) >= strlen(kbs)) {

		strcpy(cur_f, kbs);

		return kbs;

	}



	func_table[cur] = kbs;



	return __test_and_set_bit(cur, is_kmalloc) ? cur_f : NULL;

}



int vt_do_kdgkb_ioctl(int cmd, struct kbsentry __user *user_kdgkb, int perm)

{

	unsigned char kb_func;

	unsigned long flags;

	char *kbs;

	int ret;



	if (get_user(kb_func, &user_kdgkb->kb_func))

		return -EFAULT;



	kb_func = array_index_nospec(kb_func, MAX_NR_FUNC);



	switch (cmd) {

	case KDGKBSENT: {

		/* size should have been a struct member */

		ssize_t len = sizeof(user_kdgkb->kb_string);



		kbs = kmalloc(len, GFP_KERNEL);

		if (!kbs)

			return -ENOMEM;



		spin_lock_irqsave(&func_buf_lock, flags);

		len = strlcpy(kbs, func_table[kb_func] ? : "", len);

		spin_unlock_irqrestore(&func_buf_lock, flags);



		ret = copy_to_user(user_kdgkb->kb_string, kbs, len + 1) ?

			-EFAULT : 0;



		break;

	}

	case KDSKBSENT:

		if (!perm || !capable(CAP_SYS_TTY_CONFIG))

			return -EPERM;



		kbs = strndup_user(user_kdgkb->kb_string,

				sizeof(user_kdgkb->kb_string));

		if (IS_ERR(kbs))

			return PTR_ERR(kbs);



		spin_lock_irqsave(&func_buf_lock, flags);

		kbs = vt_kdskbsent(kbs, kb_func);

		spin_unlock_irqrestore(&func_buf_lock, flags);



		ret = 0;

		break;

	}



	kfree(kbs);



	return ret;

}



int vt_do_kdskled(unsigned int console, int cmd, unsigned long arg, int perm)

{

	struct kbd_struct *kb = &kbd_table[console];

        unsigned long flags;

	unsigned char ucval;



        switch(cmd) {

	/* the ioctls below read/set the flags usually shown in the leds */

	/* don't use them - they will go away without warning */

	case KDGKBLED:

                spin_lock_irqsave(&kbd_event_lock, flags);

		ucval = kb->ledflagstate | (kb->default_ledflagstate << 4);

                spin_unlock_irqrestore(&kbd_event_lock, flags);

		return put_user(ucval, (char __user *)arg);



	case KDSKBLED:

		if (!perm)

			return -EPERM;

		if (arg & ~0x77)

			return -EINVAL;

                spin_lock_irqsave(&led_lock, flags);

		kb->ledflagstate = (arg & 7);

		kb->default_ledflagstate = ((arg >> 4) & 7);

		set_leds();

                spin_unlock_irqrestore(&led_lock, flags);

		return 0;



	/* the ioctls below only set the lights, not the functions */

	/* for those, see KDGKBLED and KDSKBLED above */

	case KDGETLED:

		ucval = getledstate();

		return put_user(ucval, (char __user *)arg);



	case KDSETLED:

		if (!perm)

			return -EPERM;

		setledstate(kb, arg);

		return 0;

        }

        return -ENOIOCTLCMD;

}



int vt_do_kdgkbmode(unsigned int console)

{

	struct kbd_struct *kb = &kbd_table[console];

	/* This is a spot read so needs no locking */

	switch (kb->kbdmode) {

	case VC_RAW:

		return K_RAW;

	case VC_MEDIUMRAW:

		return K_MEDIUMRAW;

	case VC_UNICODE:

		return K_UNICODE;

	case VC_OFF:

		return K_OFF;

	default:

		return K_XLATE;

	}

}



*

 */

int vt_do_kdgkbmeta(unsigned int console)

{

	struct kbd_struct *kb = &kbd_table[console];

        /* Again a spot read so no locking */

	return vc_kbd_mode(kb, VC_META) ? K_ESCPREFIX : K_METABIT;

}



*

 */

void vt_reset_unicode(unsigned int console)

{

	unsigned long flags;



	spin_lock_irqsave(&kbd_event_lock, flags);

	kbd_table[console].kbdmode = default_utf8 ? VC_UNICODE : VC_XLATE;

	spin_unlock_irqrestore(&kbd_event_lock, flags);

}



*

 */

int vt_get_shift_state(void)

{

        /* Don't lock as this is a transient report */

        return shift_state;

}



*

 */

void vt_reset_keyboard(unsigned int console)

{

	struct kbd_struct *kb = &kbd_table[console];

	unsigned long flags;



	spin_lock_irqsave(&kbd_event_lock, flags);

	set_vc_kbd_mode(kb, VC_REPEAT);

	clr_vc_kbd_mode(kb, VC_CKMODE);

	clr_vc_kbd_mode(kb, VC_APPLIC);

	clr_vc_kbd_mode(kb, VC_CRLF);

	kb->lockstate = 0;

	kb->slockstate = 0;

	spin_lock(&led_lock);

	kb->ledmode = LED_SHOW_FLAGS;

	kb->ledflagstate = kb->default_ledflagstate;

	spin_unlock(&led_lock);

 do not do set_leds here because this causes an endless tasklet loop

	   when the keyboard hasn't been initialized yet */

	spin_unlock_irqrestore(&kbd_event_lock, flags);

}



*

 */



int vt_get_kbd_mode_bit(unsigned int console, int bit)

{

	struct kbd_struct *kb = &kbd_table[console];

	return vc_kbd_mode(kb, bit);

}



*

 */



void vt_set_kbd_mode_bit(unsigned int console, int bit)

{

	struct kbd_struct *kb = &kbd_table[console];

	unsigned long flags;



	spin_lock_irqsave(&kbd_event_lock, flags);

	set_vc_kbd_mode(kb, bit);

	spin_unlock_irqrestore(&kbd_event_lock, flags);

}



*

 */



void vt_clr_kbd_mode_bit(unsigned int console, int bit)

{

	struct kbd_struct *kb = &kbd_table[console];

	unsigned long flags;



	spin_lock_irqsave(&kbd_event_lock, flags);

	clr_vc_kbd_mode(kb, bit);

	spin_unlock_irqrestore(&kbd_event_lock, flags);

}

 SPDX-License-Identifier: GPL-2.0

/*

 * consolemap.c

 *

 * Mapping from internal code (such as Latin-1 or Unicode or IBM PC code)

 * to font positions.

 *

 * aeb, 950210

 *

 * Support for multiple unimaps by Jakub Jelinek <jj@ultra.linux.cz>, July 1998

 *

 * Fix bug in inverse translation. Stanislav Voronyi <stas@cnti.uanet.kharkov.ua>, Dec 1998

 *

 * In order to prevent the following circular lock dependency:

 *   &mm->mmap_lock --> cpu_hotplug.lock --> console_lock --> &mm->mmap_lock

 *

 * We cannot allow page fault to happen while holding the console_lock.

 * Therefore, all the userspace copy operations have to be done outside

 * the console_lock critical sections.

 *

 * As all the affected functions are all called directly from vt_ioctl(), we

 * can allocate some small buffers directly on stack without worrying about

 * stack overflow.

 8-bit Latin-1 mapped to Unicode -- trivial mapping */

 VT100 graphics mapped to Unicode */

 IBM Codepage 437 mapped to Unicode */

 User mapping -- default to codes for direct font mapping */

/* The standard kernel character-to-font mappings are not invertible

 Max possible glyph value */

 prefer '-' above SHY etc. */

/*

 * Inverse translation is impossible for several reasons:

 * 1. The font<->character maps are not 1-1.

 * 2. The text may have been written while a different translation map

 *    was active.

 * Still, it is now possible to a certain extent to cut and paste non-ASCII.

/*

 * Load customizable translation table

 * arg points to a 256 byte translation table.

 *

 * The "old" variants are for translation directly to font (using the

 * 0xf000-0xf0ff "transparent" Unicodes) whereas the "new" variants set

 * Unicodes explicitly.

/*

 * Unicode -> current font conversion 

 *

 * A font has at most 512 chars, usually 256.

 * But one font position may represent several Unicode chars.

 * A hashtable is somewhat of a pain to deal with, so use a

 * "paged table" instead.  Simulation has shown the memory cost of

 * this 3-level paged table scheme to be comparable to a hash table.

 Defined in console_defmap.c */

 Caller must hold the console lock */

 No glyphs for the characters (yet) */

 Caller must hold the lock */

 Save original vc_unipagdir_loc in case we allocate a new one */

		/*

		 * Since refcount was > 1, con_clear_unimap() allocated a

		 * a new uni_pagedir for this vc.  Re: p != q

		/*

		 * uni_pgdir is a 32*32*64 table with rows allocated

		 * when its first entry is added.  The unicode value must

		 * still be incremented for empty rows.  We are copying

		 * entries from "p" (old) to "q" (new).

 unicode value */

					/*

					 * Found one, copy entry for unicode

					 * l with fontpos value p2[k].

 Account for row of 64 empty entries */

 Account for empty table */

		/*

		 * Finished copying font table, set vc_uni_pagedir to new table

	/*

	 * Insert user specified unicode pairs into new table.

	/*

	 * Merge with fontmaps of any other virtual consoles.

 Update inverse translations */

/**

 *	con_set_default_unimap	-	set default unicode map

 *	@vc: the console we are updating

 *

 *	Loads the unimap for the hardware font, as defined in uni_hash.tbl.

 *	The representation used was the most compact I could come up

 *	with.  This routine is executed at video setup, and when the

 *	PIO_FONTRESET ioctl is called. 

 *

 *	The caller must hold the console lock

 The default font is always 256 characters */

 Update all inverse translations */

/**

 *	con_copy_unimap		-	copy unimap between two vts

 *	@dst_vc: target

 *	@src_vc: source

 *

 *	The caller must hold the console lock when invoking this method

/*

 *	con_get_unimap		-	get the unicode map

 *

 *	Read the console unicode data for this console. Called from the ioctl

 *	handlers.

/*

 * Always use USER_MAP. These functions are used by the keyboard,

 * which shouldn't be affected by G0/G1 switching, etc.

 * If the user map still contains default values, i.e. the

 * direct-to-font mapping, then assume user is using Latin1.

 *

 * FIXME: at some point we need to decide if we want to lock the table

 * update element itself via the keyboard_event_lock for consistency with the

 * keyboard driver as well as the consoles

 may be called during an interrupt */

 Only 16-bit codes supported at this time */

 Not found */

 Not a printable character */

 Zero-width space */

	/*

	 * UNI_DIRECT_BASE indicates the start of the region in the User Zone

	 * which always has a 1:1 mapping to the currently loaded font.  The

	 * UNI_DIRECT_MASK indicates the bit span of the region.

 not found */

/*

 * This is called at sys_setup time, after memory and the console are

 * initialized.  It must be possible to call kmalloc(..., GFP_KERNEL)

 * from this function, hence the call from sys_setup.

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 1991, 1992  Linus Torvalds

/*

 * Hopefully this will be a rather complete VT102 implementation.

 *

 * Beeping thanks to John T Kohl.

 *

 * Virtual Consoles, Screen Blanking, Screen Dumping, Color, Graphics

 *   Chars, and VT100 enhancements by Peter MacDonald.

 *

 * Copy and paste function by Andrew Haylett,

 *   some enhancements by Alessandro Rubini.

 *

 * Code to check for different video-cards mostly by Galen Hunt,

 * <g-hunt@ee.utah.edu>

 *

 * Rudimentary ISO 10646/Unicode/UTF-8 character set support by

 * Markus Kuhn, <mskuhn@immd4.informatik.uni-erlangen.de>.

 *

 * Dynamic allocation of consoles, aeb@cwi.nl, May 1994

 * Resizing of consoles, aeb, 940926

 *

 * Code for xterm like mouse click reporting by Peter Orbaek 20-Jul-94

 * <poe@daimi.aau.dk>

 *

 * User-defined bell sound, new setterm control sequences and printk

 * redirection by Martin Mares <mj@k332.feld.cvut.cz> 19-Nov-95

 *

 * APM screenblank bug fixed Takashi Manabe <manabe@roy.dsl.tutics.tut.jp>

 *

 * Merge with the abstract console driver by Geert Uytterhoeven

 * <geert@linux-m68k.org>, Jan 1997.

 *

 *   Original m68k console driver modifications by

 *

 *     - Arno Griffioen <arno@usn.nl>

 *     - David Carter <carter@cs.bris.ac.uk>

 * 

 *   The abstract console driver provides a generic interface for a text

 *   console. It supports VGA text mode, frame buffer based graphical consoles

 *   and special graphics processors that are only accessible through some

 *   registers (e.g. a TMS340x0 GSP).

 *

 *   The interface to the hardware is specified using a special structure

 *   (struct consw) which contains function pointers to console operations

 *   (see <linux/console.h> for more information).

 *

 * Support for changeable cursor shape

 * by Pavel Machek <pavel@atrey.karlin.mff.cuni.cz>, August 1997

 *

 * Ported to i386 and con_scrolldelta fixed

 * by Emmanuel Marty <core@ggi-project.org>, April 1998

 *

 * Resurrected character buffers in videoram plus lots of other trickery

 * by Martin Mares <mj@atrey.karlin.mff.cuni.cz>, July 1998

 *

 * Removed old-style timers, introduced console_timer, made timer

 * deletion SMP-safe.  17Jun00, Andrew Morton

 *

 * Removed console_lock, enabled interrupts across all console operations

 * 13 March 2001, Andrew Morton

 *

 * Fixed UTF-8 mode so alternate charset modes always work according

 * to control sequences interpreted in do_con_trol function

 * preserving backward VT100 semigraphics compatibility,

 * malformed UTF sequences represented as sequences of replacement glyphs,

 * original codes or '?' as a last resort if replacement glyph is undefined

 * by Adam Tla/lka <atlka@pg.gda.pl>, Aug 2006

/*

 * Here is the default bell parameters: 750HZ, 1/8th of a second

 Is console ready for printing? */

/*

 * ignore_poke: don't unblank the screen when things are typed.  This is

 * mainly for the privacy of braille terminal users.

 0:none 1:suspendV 2:suspendH 3:powerdown */

/*

 * fg_console is the current virtual console,

 * last_console is the last used one,

 * want_console is the console we want to switch to,

 * saved_* variants are for save/restore around kernel debugger enter/leave

/*

 * For each existing display, we have a pointer to console currently visible

 * on that display, allowing consoles other than fg_console to be refreshed

 * appropriately. Unless the low-level driver supplies its own display_fg

 * variable, we use this one for the "master display".

/*

 * Unfortunately, we need to delay tty echo when we're currently writing to the

 * console since the code is (and always was) not re-entrant, so we schedule

 * all flip requests to process context with schedule-task() and run it from

 * console_callback().

/*

 * For the same reason, we defer scrollback to the console callback.

/*

 * Hook so that the power management routines can (un)blank

 * the console on our behalf.

/*

 * /sys/class/tty/tty0/

 *

 * the attribute 'active' contains the name of the current vc

 * console and it supports poll() to detect vc switches

/*

 * Notifier list for console events.

/*

 *	Low-Level Functions

 Called  from the keyboard irq path.. */

 FIXME */

	/* scrolldelta needs some kind of consistency lock, but the BKL was

/*

 * Code to manage unicode-based screen buffers

 this disables and optimizes related code away at compile time */

/*

 * Our screen buffer is preceded by an array of line pointers so that

 * scrolling only implies some pointer shuffling.

 allocate everything in one go */

 initial line pointers */

/*

 * Called from vcs_read() to make sure unicode screen retrieval is possible.

 * This will initialize the unicode screen buffer if not already done.

 * This returns 0 if OK, or a negative error code otherwise.

 * In particular, -ENODATA is returned if the console is not in UTF-8 mode.

	/*

	 * Let's populate it initially with (imperfect) reverse translation.

	 * This is the next best thing we can do short of having it enabled

	 * from the start even when no users rely on this functionality. True

	 * unicode content will be available after a complete screen refresh.

/*

 * Called from vcs_read() to get the unicode data from the screen.

 * This must be preceded by a successful call to vc_uniscr_check() once

 * the console lock has been taken.

		/*

		 * Desired position falls in the main screen buffer.

		 * However the actual row/col might be different if

		 * scrollback is active.

		/*

		 * Scrollback is active. For now let's simply backtranslate

		 * the screen glyphs until the unicode screen buffer does

		 * synchronize with console display drivers for a scrollback

		 * buffer of its own.

 this is for validation and debugging only */

	/*

	 * Make sure our unicode screen translates into the same glyphs

	 * as the actual screen. This is brutal indeed.

 Structure of attributes is hardware-dependent */

/*

 * ++roman: I completely changed the attribute format for monochrome

 * mode (!can_do_color). The formerly used MDA (monochrome display

 * adapter) format didn't allow the combination of certain effects.

 * Now the attribute is just a bit vector:

 *  Bit 0..1: intensity (0..2)

 *  Bit 2   : underline

 *  Bit 3   : reverse

 *  Bit 7   : blink

 Note: inverting the screen twice should revert to the original state */

 used by selection: complement pointer position */

		/*

		 * When no con_flush_scrollback method is provided then the

		 * legacy way for flushing the scrollback buffer is to use

		 * a side effect of the con_switch method. We do it only on

		 * the foreground console as background consoles have no

		 * scrollback buffers in that case and we obviously don't

		 * want to switch to them.

/*

 *	Redrawing of screen

 strange ... */

 printk("redraw_screen: tty %d not allocated ??\n", new_console+1); */

		/*

		 * If console changed from mono<->color, the best we can do

		 * is to clear the buffer attributes. As it currently stands,

		 * rebuilding new attributes from the old buffer is not doable

		 * without overly complex code.

/*

 *	Allocation, freeing and resizing of VTs.

 ++Geert: vc->vc_sw->con_init determines console size */

/*

 * Change # of rows and columns (0 means unchanged/the size of fg_console)

 * [this is to be used together with some user program

 * like resize that changes the hardware videomode]

 return 0 on success */

 due to the granularity of kmalloc, we waste some memory here */

	/* the alloc is done in two steps, to optimize the common situation

	/* although the numbers above are not valid since long ago, the

	   point is still up-to-date and the comment still has its value

	/* If no drivers have overridden us and the user didn't pass a

 Resizes the resolution of the display adapater */

/**

 *	vc_do_resize	-	resizing method for the tty

 *	@tty: tty being resized

 *	@vc: virtual console private data

 *	@cols: columns

 *	@lines: lines

 *

 *	Resize a virtual console, clipping according to the actual constraints.

 *	If the caller passes a tty structure then update the termios winsize

 *	information and perform any necessary signal handling.

 *

 *	Caller must hold the console semaphore. Takes the termios rwsem and

 *	ctrl.lock of the tty IFF a tty is passed.

		/*

		 * This function is being called here to cover the case

		 * where the userspace calls the FBIOPUT_VSCREENINFO twice,

		 * passing the same fb_var_screeninfo containing the fields

		 * yres/xres equal to a number non-multiple of vc_font.height

		 * and yres_virtual/xres_virtual equal to number lesser than the

		 * vc_font.height and yres/xres.

		 * In the second call, the struct fb_var_screeninfo isn't

		 * being modified by the underlying driver because of the

		 * if above, and this causes the fbcon_display->vrows to become

		 * negative and it eventually leads to out-of-bound

		 * access by the imageblit function.

		 * To give the correct values to the struct and to not have

		 * to deal with possible errors from the code below, we call

		 * the resize_screen here as well.

			/*

			 * Cursor near the bottom, copy contents from the

			 * bottom of buffer

			/*

			 * Cursor is in no man's land, copy 1/2 screenful

			 * from the top and bottom of cursor position

 do part of a reset_terminal() */

		/* Rewrite the requested winsize data with the actual

/**

 *	vc_resize		-	resize a VT

 *	@vc: virtual console

 *	@cols: columns

 *	@rows: rows

 *

 *	Resize a virtual console as seen from the console end of things. We

 *	use the common vc_do_resize methods to update the structures. The

 *	caller must hold the console sem to protect console internals and

 *	vc->port.tty

/**

 *	vt_resize		-	resize a VT

 *	@tty: tty to resize

 *	@ws: winsize attributes

 *

 *	Resize a virtual terminal. This is called by the tty layer as we

 *	register our own handler for resizing. The mutual helper does all

 *	the actual work.

 *

 *	Takes the console sem and the called methods then take the tty

 *	termios_rwsem and the tty ctrl.lock in that order.

/*

 *	VT102 emulator

 the default colour table, for VGA+ colour systems */

/*

 * gotoxy() must verify all boundaries, because the arguments

 * might also be negative. If the given position is out of

 * bounds, the cursor is placed at the nearest margin.

 for absolute user moves, when decom is set */

    	/* don't scroll if above bottom of scrolling region, or

	 * if below scrolling region

    	/* don't scroll if below top of scrolling region, or

	 * if above scrolling region

 ignored */

 erase from cursor to end of display */

 erase from start to cursor */

 include scrollback */

 erase whole display */

 erase from cursor to end of line */

 erase from start of line to cursor */

 erase whole line */

 erase the following vpar positions */

 not vt100? */

 Standard colours. */

 6x6x6 colour cube. */

 Grayscale ramp. */

 For backgrounds, err on the dark side. */

/*

 * ITU T.416 Higher colour modes. They break the usual properties of SGR codes

 * and thus need to be detected and ignored by hand. That standard also

 * wants : rather than ; as separators but sequences containing : are currently

 * completely ignored by the parser.

 *

 * Subcommands 3 (CMY) and 4 (CMYK) are so insane there's no point in

 * supporting them.

 256 colours */

 24 bit */

 console_lock is held */

 all attributes off */

			/*

			 * No console drivers support double underline, so

			 * convert it to a single underline.

		case 10: /* ANSI X3.64-1979 (SCO-ish?)

			  * Select primary font, don't display control chars if

			  * defined, don't set bit 8 on output.

		case 11: /* ANSI X3.64-1979 (SCO-ish?)

			  * Select first alternate font, lets chars < 32 be

			  * displayed as ROM chars.

		case 12: /* ANSI X3.64-1979 (SCO-ish?)

			  * Select second alternate font, toggle high bit

			  * before displaying as ROM char.

 terminal answer to an ESC-Z or csi0c query. */

 invoked via ioctl(TIOCLINUX) and through set_selection_user */

 console_lock is held */

 DEC private modes set/reset */

 Cursor keys send ^[Ox/^[[x */

 80/132 mode switch unimplemented */

				/* this alone does not suffice; some user mode

 Inverted screen on/off */

 Origin relative/absolute */

 Autowrap on/off */

 Autorepeat on/off */

 Cursor on/off */

 ANSI modes set/reset */

 Monitor (display ctrls) */

 Insert Mode on/off */

 Lf, Enter == CrLf/Lf */

 console_lock is held */

 set color for underline mode */

 set color for half intensity mode */

 store colors as defaults */

 set blanking interval */

 set bell frequency in Hz */

 set bell duration in msec */

 bring specified console to the front */

 unblank the screen */

 set vesa powerdown interval */

 activate the previous console */

 set cursor blink duration in msec */

 console_lock is held */

 console_lock is held */

 console_lock is held */

 console_lock is held */

 console_lock is held (except via vc_init->reset_terminal */

 console_lock is held */

 console_lock is held (except via vc_init()) */

 is this state an ANSI control string? */

 console_lock is held */

	/*

	 *  Control characters can be used in the _middle_

	 *  of an escape sequence, aside from ANSI control strings.

 Numeric keypad */

 Appl. keypad */

 palette escape sequence */

 reset palette */

 Function key */

 0x2x, 0x3a and 0x3c - 0x3f */

 DECLL - but only 3 leds */

 map 0,1,2,3 to 0,1,2,4 */

 Minimum allowed region is 2 lines */

 setterm functions */

 defined in ISO 2022 */

 prelim official escape code */

 retained for compatibility */

 DEC screen alignment test. kludge :-) */

/* is_double_width() is based on the wcwidth() implementation by

 * Markus Kuhn -- 2007-05-26 (Unicode 5.0)

 * Latest version: https://www.cl.cam.ac.uk/~mgk25/ucs/wcwidth.c

/**

 * vc_sanitize_unicode -- Replace invalid Unicode code points with U+FFFD

 * @c: the received character, or U+FFFD for invalid sequences.

/**

 * vc_translate_unicode -- Combine UTF-8 into Unicode in @vc_utf_char

 * @vc: virtual console

 * @c: character to translate

 * @rescan: we return true if we need more (continuation) data

 *

 * @vc_utf_char is the being-constructed unicode character.

 * @vc_utf_count is the number of continuation bytes still expected to arrive.

 * @vc_npar is the number of continuation bytes arrived so far.

 Continuation byte received */

 Unexpected continuation byte? */

 Got a whole character */

 Reject overlong sequences */

 Single ASCII byte or first byte of a sequence received */

 Continuation byte expected */

 Nothing to do if an ASCII byte was received */

 First byte of a multibyte sequence received */

 254 and 255 are invalid */

 Do no translation at all in control states */

 no utf or alternate charset mode */

	/*

	 * A bitmap for codes <32. A bit of 1 indicates that the code

	 * corresponding to that bit number invokes some special action (such

	 * as cursor movement) and should not be displayed as a glyph unless

	 * the disp_ctrl mode is explicitly enabled.

 Cannot be overridden by disp_ctrl */

	/*

	 * If the original code was a control character we only allow a glyph

	 * to be displayed if the code is not normally used (such as for cursor

	 * movement) or if the disp_ctrl mode has been explicitly enabled.

	 * Certain characters (as given by the CTRL_ALWAYS bitmap) are always

	 * displayed as control characters, as the console would be pretty

	 * useless without them; to display an arbitrary font position use the

	 * direct-to-font zone in UTF-8 mode.

 Now try to find out how to display it */

 nothing to display */

 Glyph not found */

			/*

			 * In legacy mode use the glyph we get by a 1:1

			 * mapping.

			 * This would make absolutely no sense with Unicode in

			 * mind, but do this for ASCII characters since a font

			 * may lack Unicode mapping info and we don't want to

			 * end up with having question marks only.

			/*

			 * Display U+FFFD. If it's not found, display an inverse

			 * question mark.

 A space is printed in the second column */

 acquires console_lock */

 could this happen? */

 undraw cursor first */

/*

 * This is the console switching callback.

 *

 * Doing console switching in a process context allows

 * us to do the switches asynchronously (needed when we want

 * to switch due to a keyboard interrupt).  Synchronization

 * with other console code and prevention of re-entrancy is

 * ensured with console_lock.

			/* we only changed when the console had already

			   been allocated - a new console is not created

 do not unblank for a LED change */

		/*

		 * Console switch will fail in console_callback() or

		 * change_console() so there is no point scheduling

		 * the callback

		 *

		 * Existing set_console() users don't check the return

		 * value so this shouldn't break anything

/**

 * vt_kmsg_redirect() - Sets/gets the kernel message console

 * @new:	The new virtual terminal number or -1 if the console should stay

 * 		unchanged

 *

 * By default, the kernel messages are always printed on the current virtual

 * console. However, the user may modify that default with the

 * TIOCL_SETKMSGREDIRECT ioctl call.

 *

 * This function sets the kernel message console to be @new. It returns the old

 * virtual console number. The virtual terminal number 0 (both as parameter and

 * return value) means no redirection (i.e. always printed on the currently

 * active console).

 *

 * The parameter -1 means that only the current console is returned, but the

 * value is not modified. You may use the macro vt_get_kmsg_redirect() in that

 * case to make the code more understandable.

 *

 * When the kernel is compiled without CONFIG_VT_CONSOLE, this function ignores

 * the parameter and always returns 0.

/*

 *	Console on virtual terminal

 *

 * The console must be locked when we get here.

 console busy or not yet initialized */

 impossible */

 printk("vt_console_print: tty %d not allocated ??\n", currcons+1); */

 undraw cursor first */

 backspace */

/*

 *	Handling of Linux-specific VC ioctls

/*

 * Generally a bit racy with respect to console_lock();.

 *

 * There are some functions which don't need it.

 *

 * There are some functions which can sleep for arbitrary periods

 * (paste_selection) but we don't need the lock there anyway.

 *

 * set_selection_user has locking, and definitely needs it

	/*

	 * Make it possible to react to Shift+Mousebutton.

	 * Note that 'shift_state' is an undocumented

	 * kernel-internal variable; programs not closely

	 * related to the kernel should not use this.

 May be overkill */

			/* No locking needed as this is a transiently

			   correct return anyway if the caller hasn't

				/* Need the console lock here. Note that lots

				   of other calls need fixing before the lock

 until explicitly unblanked, not only poked */

/*

 * /dev/ttyN handling

 No limit, really; we're not buffering */

/*

 * con_throttle and con_unthrottle are only used for

 * paste_selection(), which has to stuff in a large number of

 * characters...

/*

 * Turn the Scroll-Lock LED on when the tty is stopped

/*

 * Turn the Scroll-Lock LED off when the console is started

 from flush_to_ldisc */

 if we race with con_close(), vt may be null */

/*

 * Allocate the console screen memory.

 Still being freed */

 everything done in install */

 Nothing to do - we defer to shutdown */

 white */

 green (ASCII)

 cyan (ASCII)

 grey */

/*

 * This routine initializes console interrupts, and does nothing

 * else. If you want the screen to clear, call tty_write with

 * the appropriate escape-sequence.

 Assuming vc->vc_{cols,rows,screenbuf_size} are sane here. */

 check if driver is registered */

		/* If the console changed between mono <-> color, then

		 * the attributes in the screenbuf will be wrong.  The

		 * following resets all attributes to something sane.

 check if driver is registered and if it is unbindable */

 check if backup driver exists */

		/*

		 * vgacon may change the default driver to point

		 * to dummycon, we restore it here...

 ignore return value, binding should not fail */

 CONFIG_VT_HW_CONSOLE_BINDING */

/**

 * con_is_bound - checks if driver is bound to the console

 * @csw: console driver

 *

 * RETURNS: zero if unbound, nonzero if bound

 *

 * Drivers can call this and if zero, they should release

 * all resources allocated on con_startup()

/**

 * con_is_visible - checks whether the current console is visible

 * @vc: virtual console

 *

 * RETURNS: zero if not visible, nonzero if visible

/**

 * con_debug_enter - prepare the console for the kernel debugger

 * @vc: virtual console

 *

 * Called when the console is taken over by the kernel debugger, this

 * function needs to save the current console state, then put the console

 * into a state suitable for the kernel debugger.

 *

 * RETURNS:

 * Zero on success, nonzero if a failure occurred when trying to prepare

 * the console for the debugger.

 Set the initial LINES variable if it is not already set */

 CONFIG_KGDB_KDB */

/**

 * con_debug_leave - restore console state

 *

 * Restore the console state to what it was before the kernel debugger

 * was invoked.

 *

 * RETURNS:

 * Zero on success, nonzero if a failure occurred when trying to restore

 * the console.

 already registered */

/**

 * do_unregister_con_driver - unregister console driver from console layer

 * @csw: console driver

 *

 * DESCRIPTION: All drivers that registers to the console layer must

 * call this function upon exit, or if the console driver is in a state

 * where it won't be able to handle console services, such as the

 * framebuffer console without loaded framebuffer drivers.

 *

 * The driver must unbind first prior to unregistration.

 cannot unregister a bound driver */

			/*

			 * Defer the removal of the sysfs entries since that

			 * will acquire the kernfs s_active lock and we can't

			 * acquire this lock while holding the console lock:

			 * the unbind sysfs entry imposes already the opposite

			 * order. Reset con already here to prevent any later

			 * lookup to succeed and mark this slot as zombie, so

			 * it won't get reused until we complete the removal

			 * in the deferred work.

/*

 *	If we support more console drivers, this function is used

 *	when a driver wants to take over some existing consoles

 *	and become default driver for newly opened ones.

 *

 *	do_take_over_console is basically a register followed by bind

	/*

	 * If we get an busy error we still want to bind the console driver

	 * and return success, as we may have unbound the console driver

	 * but not unregistered it.

/*

 * give_up_console is a wrapper to unregister_con_driver. It will only

 * work if driver is fully unbound.

 Add system drivers to sysfs */

/*

 *	Screen blanking

 entering graphics mode? */

 don't blank graphics */

 In case we need to reset origin, blanking hook returns 1 */

/*

 * Called by timer as well as from vt_console_driver

	/* This should now always be called from a "sane" (read: can schedule)

	 * context for the sake of the low level drivers, except in the special

	 * case of oops_in_progress

 impossible */

 but leave console_blanked != 0 */

 Low-level driver cannot restore -> do it ourselves */

/*

 * This is called by the outside world to cause a forced unblank, mostly for

 * oopses. Currently, I just call do_unblank_screen(0), but we could eventually

 * call it with 1 as an argument and so force a mode restore... that may kill

 * X or at least garbage the screen but would also make the Oops visible...

/*

 * We defer the timer blanking to work queue so it can take the console mutex

 * (console operations can still happen at irq time, but only from printk which

 * has the console mutex. Not perfect yet, but better than no locking

	/* Add this so we quickly catch whoever might call us in a non

	 * safe context. Nowadays, unblank_screen() isn't to be called in

	 * atomic contexts and is allowed to schedule (with the special case

	 * of oops_in_progress, but that isn't of any concern for this

	 * function. --BenH.

	/* This isn't perfectly race free, but a race here would be mostly harmless,

	 * at worst, we'll do a spurious blank and it's unlikely

/*

 *	Palettes

/*

 * Load palette into the DAC registers. arg points to a colour

 * map, 3 bytes per colour, 16 colours, range from 0 to 255.

/*

 *  Font switching

 *

 *  Currently we only support fonts up to 32 pixels wide, at a maximum height

 *  of 32 pixels. Userspace fontdata is stored with 32 bytes (shorts/ints, 

 *  depending on width) reserved for each character which is kinda wasty, but 

 *  this is done in order to maintain compatibility with the EGA/VGA fonts. It 

 *  is up to the actual low-level console-driver convert data into its favorite

 *  format (maybe we should add a `fontoffset' field to the `display'

 *  structure so we won't have to convert the fontdata all the time.

 *  /Jes

 was buggy and never really used */

/*

 *	Interface exported to selection and vcs.

 used by selection */

 used by vcs - note the word offset */

 clamp values if they don't fit */

 Turn scrollback off */

 Do we have already enough to allow jumping from 0 to the end? */

 Only a little piece would be left? Show all incl. the piece! */

/*

 *	Visible symbols for modules

 SPDX-License-Identifier: GPL-2.0

/*

 * Provide access to virtual console memory.

 * /dev/vcs: the screen as it is being viewed right now (possibly scrolled)

 * /dev/vcsN: the screen of /dev/ttyN (1 <= N <= 63)

 *            [minor: N]

 *

 * /dev/vcsaN: idem, but including attributes, and prefixed with

 *	the 4 bytes lines,columns,x,y (as screendump used to give).

 *	Attribute/character pair is in native endianity.

 *            [minor: N+128]

 *

 * /dev/vcsuN: similar to /dev/vcsaN but using 4-byte unicode values

 *	instead of 1-byte screen glyph values.

 *            [minor: N+64]

 *

 * /dev/vcsuaN: same idea as /dev/vcsaN for unicode (not yet implemented).

 *

 * This replaces screendump and part of selection, so that the system

 * administrator can control access using file system permissions.

 *

 * aeb@cwi.nl - efter Friedas begravelse - 950211

 *

 * machek@k332.feld.cvut.cz - modified not to send characters to wrong console

 *	 - fixed some fatal off-by-one bugs (0-- no longer == -1 -> looping and looping and looping...)

 *	 - making it shorter - scr_readw are macros which expand in PRETTY long code

/*

 * Our minor space:

 *

 *   0 ... 63	glyph mode without attributes

 *  64 ... 127	unicode mode without attributes

 * 128 ... 191	glyph mode with attributes

 * 192 ... 255	unused (reserved for unicode with attributes)

 *

 * This relies on MAX_NR_CONSOLES being  <= 63, meaning 63 actual consoles

 * with minors 0, 64, 128 and 192 being proxies for the foreground console.

	/*

	 * In order not to lose any update event, we must pretend one might

	 * have occurred before we have a chance to register our notifier.

	 * This is also how user space has come to detect which kernels

	 * support POLLPRI on /dev/vcs* devices i.e. using poll() with

	 * POLLPRI and a zero timeout.

	/*

	 * This code may be called either through ->poll() or ->fasync().

	 * If we have two threads using the same file descriptor, they could

	 * both enter this function, both notice that the structure hasn't

	 * been allocated yet and go ahead allocating it in parallel, but

	 * only one of them must survive and be shared otherwise we'd leak

	 * memory with a dangling notifier callback.

 someone else raced ahead of us */

/**

 * vcs_vc -- return VC for @inode

 * @inode: inode for which to return a VC

 * @viewed: returns whether this console is currently foreground (viewed)

 *

 * Must be called with console_lock.

/**

 * vcs_size -- return size for a VC in @vc

 * @vc: which VC

 * @attr: does it use attributes?

 * @unicode: is it unicode?

 *

 * Must be called with console_lock.

 clamp header values if they don't fit */

 Advance state pointers and move on. */

 If count >= 0, then pos is even... */

		/*

		 * Skip first byte for output if start address is odd. Update

		 * region sizes up/down depending on free space in buffer.

	/*

	 * Buffer has even length, so we can always copy character + attribute.

	 * We do not copy last byte to userspace if count is odd.

	/* Select the proper current console and verify

	 * sanity of the situation under the console lock.

 we enforce 32-bit alignment for pos and count in unicode mode */

		/* Check whether we are above size each round,

		 * as copy_to_user at the end of this loop

		 * could sleep.

		/* Perform the whole read into the local con_buf.

		 * Then we can drop the console spinlock and safely

		 * attempt to move it to userspace.

		/* Finally, release the console semaphore while we push

		 * all the data to userspace from our temporary buffer.

		 *

		 * AKPM: Even though it's a semaphore, we should drop it because

		 * the pagefault handling code may want to call printk().

/*

 * Compilers (gcc 10) are unable to optimize the swap in cpu_to_le16. So do it

 * the poor man way.

 header */

 odd pos -- the first single character */

 even pos -- handle attr+character pairs */

 odd pos -- the remaining character */

	/* Select the proper current console and verify

	 * sanity of the situation under the console lock.

		/* Temporarily drop the console lock so that we can read

		 * in the write data from userspace safely.

				/* Abort loop if no data were copied. Otherwise

				 * fail with -EFAULT.

		/* The vcs_size might have changed while we slept to grab

		 * the user buffer, so recheck.

		 * Return data written up to now on failure.

		/* OK, now actually push the write to the console

		 * under the lock using the local kernel buffer.

 don't allocate anything if all we want is disable fasync */

 we currently don't support attributes in unicode mode */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2016-2017 Linaro Ltd., Rob Herring <robh@kernel.org>

/*

 * Callback functions from the tty port.

 Wake up any tty_wait_until_sent() */

/*

 * Callback functions from the serdev core.

 Bring the UART into a known 8 bits no parity hw fc state */

 Hangups are not supported so make sure to ignore carrier detect. */

 tty_set_termios() return not checked as it is always 0 */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2016-2017 Linaro Ltd., Rob Herring <robh@kernel.org>

 *

 * Based on drivers/spmi/spmi.c:

 * Copyright (c) 2012-2015, The Linux Foundation. All rights reserved.

 TODO: platform modalias */

 TODO: platform matching */

/**

 * serdev_device_add() - add a device previously constructed via serdev_device_alloc()

 * @serdev:	serdev_device to be added

 Only a single slave device is currently supported. */

/**

 * serdev_device_remove(): remove an serdev device

 * @serdev:	serdev_device to be removed

/**

 * serdev_device_write_buf() - write data asynchronously

 * @serdev:	serdev device

 * @buf:	data to be written

 * @count:	number of bytes to write

 *

 * Write data to the device asynchronously.

 *

 * Note that any accepted data has only been buffered by the controller; use

 * serdev_device_wait_until_sent() to make sure the controller write buffer

 * has actually been emptied.

 *

 * Return: The number of bytes written (less than count if not enough room in

 * the write buffer), or a negative errno on errors.

/**

 * serdev_device_write() - write data synchronously

 * @serdev:	serdev device

 * @buf:	data to be written

 * @count:	number of bytes to write

 * @timeout:	timeout in jiffies, or 0 to wait indefinitely

 *

 * Write data to the device synchronously by repeatedly calling

 * serdev_device_write() until the controller has accepted all data (unless

 * interrupted by a timeout or a signal).

 *

 * Note that any accepted data has only been buffered by the controller; use

 * serdev_device_wait_until_sent() to make sure the controller write buffer

 * has actually been emptied.

 *

 * Note that this function depends on serdev_device_write_wakeup() being

 * called in the serdev driver write_wakeup() callback.

 *

 * Return: The number of bytes written (less than count if interrupted),

 * -ETIMEDOUT or -ERESTARTSYS if interrupted before any bytes were written, or

 * a negative errno on errors.

/**

 * serdev_device_alloc() - Allocate a new serdev device

 * @ctrl:	associated controller

 *

 * Caller is responsible for either calling serdev_device_add() to add the

 * newly allocated controller, or calling serdev_device_put() to discard it.

/**

 * serdev_controller_alloc() - Allocate a new serdev controller

 * @parent:	parent device

 * @size:	size of private data

 *

 * Caller is responsible for either calling serdev_controller_add() to add the

 * newly allocated controller, or calling serdev_controller_put() to discard it.

 * The allocated private data region may be accessed via

 * serdev_controller_get_drvdata()

/**

 * serdev_acpi_get_uart_resource - Gets UARTSerialBus resource if type matches

 * @ares:	ACPI resource

 * @uart:	Pointer to UARTSerialBus resource will be returned here

 *

 * Checks if the given ACPI resource is of type UARTSerialBus.

 * In this case, returns a pointer to it to the caller.

 *

 * Return: True if resource type is of UARTSerialBus, otherwise false.

	/*

	 * NOTE: Ideally, we would also want to retrieve other properties here,

	 * once setting them before opening the device is supported by serdev.

 Look for UARTSerialBusV2 resource */

 we only care for the last device

	/*

	 * Apple machines provide an empty resource template, so on those

	 * machines just look for immediate children with a "baud" property

	 * (from the _DSM method) instead.

 Make sure controller and ResourceSource handle match */

 Skip if black listed */

 CONFIG_ACPI */

/**

 * serdev_controller_add() - Add an serdev controller

 * @ctrl:	controller to be registered.

 *

 * Register a controller previously allocated via serdev_controller_alloc() with

 * the serdev core.

 Can't register until after driver model init */

 Remove a device associated with a controller */

/**

 * serdev_controller_remove(): remove an serdev controller

 * @ctrl:	controller to remove

 *

 * Remove a serdev controller.  Caller is responsible for calling

 * serdev_controller_put() to discard the allocated controller.

/**

 * __serdev_device_driver_register() - Register client driver with serdev core

 * @sdrv:	client driver to be associated with client-device.

 * @owner:	client driver owner to set.

 *

 * This API will register the client driver with the serdev framework.

 * It is typically called from the driver's module-init function.

 force drivers to async probe so I/O is possible in probe */

 Must be before serial drivers register */

 SPDX-License-Identifier: GPL-2.0

/*

 * IPWireless 3G PCMCIA Network Driver

 *

 * Original code

 *   by Stephen Blackheath <stephen@blacksapphire.com>,

 *      Ben Martel <benm@symmetric.co.nz>

 *

 * Copyrighted as follows:

 *   Copyright (C) 2004 by Symmetric Systems Ltd (NZ)

 *

 * Various driver changes and rewrites, port to new kernels

 *   Copyright (C) 2006-2007 Jiri Kosina

 *

 * Misc code cleanups and updates

 *   Copyright (C) 2007 David Sterba

#define TIMING_DIAGNOSTICS*/

 If it's been more than one second... */

 Imported IPW definitions */

 Addresses */

 Protocol ids */

 Identifier for the Com Data protocol */

 Identifier for the Com Control protocol */

 Identifier for the Setup protocol */

/* Number of bytes in NL packet header (cannot do

/* Number of bytes in NL packet header (cannot do

 Value of 'packet_rank' above */

 Network packet header of the first packet (a special case) */

 Network packet header of the following packets (if any) */

 Complete network packet (header + data) */

 IPW I/O ports */

 Interrupt Enable Register */

 Interrupt Source/ACK register */

 Data Control Register */

 Data Read Register */

 Data Write Register */

 Embedded Driver Status Register */

 Rx Fifo Register (Host to Embedded) */

 Tx Fifo Register (Embedded to Host) */

 I/O ports and bit definitions for version 1 of the hardware */

 IER bits*/

 ISR bits */

 DCR bits */

 I/O ports and bit definitions for version 2 of the hardware */

 PCCOR: Configuration Option Register */

 PCCSR: Configuration and Status Register */

 PCPRR: Pin Replacemant Register */

 PCSCR: Socket and Copy Register */

 PCESR: Extendend Status Register */

 PCIOB: I/O Base Register */

 TX Register (R/W) */

 RXDone Register (R/W) */

 RX Register (R/W) */

 PC intr Ack Register (W) */

	unsigned long memreg_card_present;/* Mask for Host to check (R) for

 TX2 (new) Register (R/W) */

 Flag if hw is ready to send next packet */

 Count of pending packets to be sent */

 Pool of rx_packet structures that are not currently used. */

 True if reception of data is blocked while userspace processes it. */

 True if there is RX data ready on the hardware. */

	/*

	 * Newer versions of the V2 card firmware send serial numbers in the

	 * MemTX register. 'serial_number_detected' is set true when we detect

	 * a non-zero serial number (indicating the new firmware).  Thereafter,

	 * the driver can safely ignore the Timer Recovery re-sends to avoid

	 * out-of-sync problems.

 True if we are to send the set-up data to the hardware. */

 Card has been removed */

 Saved irq value when we disable the interrupt. */

 True if this driver is shutting down. */

 Modem control lines */

 The handle for the network layer, for the sending of events to it. */

/*

 * Packet info structure for tx packets.

 * Note: not all the fields defined here are required for all protocols

 channel idx + 1 */

 SETUP, CTRL or DATA */

 Length of data block, which starts at the end of this structure */

 Sending state */

 Offset of where we've sent up to so far */

 Count of packet fragments, starting at 0 */

 Called after packet is sent and before is freed */

 Signals from DTE */

 Signals from DCE */

 DTE signal or DCE signal */

 0: set signal, 1: clear signal */

	/*

	 * transform bits from aa.bbb.ccc to ccc.bbb.aa

	/*

	 * transform bits from ccc.bbb.aa to aa.bbb.ccc

	/*

	 * hdr_first is now in machine bitfield order, which will be swapped

	 * to le just before it goes to hw

 First packet? */

 Last packet? (May also be first packet.) */

 If this packet has unsent data, then re-queue it. */

		/*

		 * Re-queue it at the head of the highest priority queue so

		 * it goes before all other packets

 Reset RX FIFO */

 SB: Reset TX FIFO */

 Enable TX and RX interrupts. */

		/*

		 * Set INTRACK bit (bit 0), which means we must explicitly

		 * acknowledge interrupts by clearing bit 2 of reg_config_and_status.

/*

 * If 'packet' is NULL, then this function allocates a new packet, setting its

 * length to 0 and ensuring it has the specified minimum amount of free space.

 *

 * If 'packet' is not NULL, then this function enlarges it if it doesn't

 * have the specified minimum amount of free space.

 *

 Discard packet if channel index is out of range. */

	/*

	 * ->packet_assembler is safe to touch unlocked, this is the only place

		/*

		 * Create a new packet, or assembler already contains one

		 * enlarge it by 'length' bytes.

 Append this packet data onto existing data. */

 Count queued DATA bytes only */

 If it's a CTRL packet, don't assemble, just queue it. */

	/*

	 * If this is the last packet, then send the assembled packet on to the

	 * network layer.

 Block reception of incoming packets if queue is full. */

/*

 * Workqueue callback

		/*

		 * Note: ipwireless_network_packet_received must be called in a

		 * process context (i.e. via schedule_work) because the tty

		 * output code can sleep in the tty_flip_buffer_push call.

 If the network hasn't been disconnected. */

				/*

				 * This must run unlocked due to tty processing

				 * and mutex locking

 Count queued DATA bytes only */

			/*

			 * This is safe to be called locked, callchain does

			 * not block

		/*

		 * Unblock reception of incoming packets if queue is no longer

		 * full.

/*

 * Retrieve a packet from the IPW hardware.

	/*

	 * If we're initializing, don't send anything of higher priority than

	 * PRIO_SETUP.  The network layer therefore need not care about

	 * hardware initialization - any of its stuff will simply be queued

	 * until setup is complete.

/*

 * return 1 if something has been received from hw

/*

 * Send pending packet up to given priority, prioritize SETUP data until

 * hardware is fully setup.

 *

 * return 1 if more packets can be sent

 Pick a packet */

 Send */

 Check if more to send */

/*

 * Send and receive all queued packets.

		/*

		 * Initial setup data sent to hardware

/*

 * return true if the card is physically present.

 Check if card is present */

 Transmit complete. */

 Received data */

 check whether the interrupt was generated by ipwireless card */

 check if the card uses memreg_tx_old register */

	/*

	 * See if the card is physically present. Note that while it is

	 * powering up, it appears not to be present.

 Ignore 'Timer Recovery' duplicates. */

			/*

			 * If a non-zero serial number is seen, then enable

			 * serial number checking.

 Create data packet, non-atomic allocation */

	/*

	 * sig_no is located right after ipw_tx_packet struct in every

	 * CTRL or SETUP packets, we can use ipw_control_packet as a

	 * common struct

 This handles the actual initialization of the card */

 generate config packet */

 generate open packet */

	/*

	 * For NDIS we assume that we are using sync PPP frames, for COM async.

	 * This driver uses NDIS mode too. We don't bother with translation

	 * from async -> sync PPP.

 Initialization is now complete, so we clear the 'to_setup' flag */

	/*

	 * Response is handled in handle_received_SETUP_packet

 Disable TX and RX interrupts. */

 Acknowledge any outstanding interrupt requests */

 Give up after a certain number of retries */

 Do not attempt to write to the board if it is not present. */

/*

 * Stop any interrupts from executing so that, once this function returns,

 * other layers of the driver can be sure they won't get any more callbacks.

 * Thus must be called on a proper process context.

 Tell everyone we are going down. */

 Prevent the hardware from sending any more interrupts */

/*

 * Associate the specified network with this hardware, so it will receive events

 * from it.

 SPDX-License-Identifier: GPL-2.0

/*

 * IPWireless 3G PCMCIA Network Driver

 *

 * Original code

 *   by Stephen Blackheath <stephen@blacksapphire.com>,

 *      Ben Martel <benm@symmetric.co.nz>

 *

 * Copyrighted as follows:

 *   Copyright (C) 2004 by Symmetric Systems Ltd (NZ)

 *

 * Various driver changes and rewrites, port to new kernels

 *   Copyright (C) 2006-2007 Jiri Kosina

 *

 * Misc code cleanups and updates

 *   Copyright (C) 2007 David Sterba

 Hardware context, used for calls to hardware layer. */

 Context for kernel 'generic_ppp' functionality */

 tty context connected with IPW console */

 True if ppp needs waking up once we're ready to xmit */

 Number of packets queued up in hardware module. */

 Spinlock to avoid interrupts during shutdown */

 PPP ioctl data, not actually used anywere */

/*

 * Called by the ppp system when it has a packet to send to the hardware.

 0xff */

 0x03 */

		/*

		 * If we have the requested amount of headroom in the skb we

		 * were handed, then we can add the header efficiently.

 Otherwise (rarely) we do it inefficiently. */

		/*

		 * Otherwise reject the packet, and flag that the ppp system

		 * needs to be unblocked once we are ready to send.

 Handle an ioctl call that has come in via ppp. (copy of ppp_async_ioctl() */

 can't escape 0x5e */

 must escape 0x7d, 0x7e */

 Wild guess */

		/*

		 * If it's associated with a tty (other than the RAS channel

		 * when we're online), then send the data to that tty.  The RAS

		 * channel's data is handled above - it always goes through

		 * ppp_generic.

/*

 * Some versions of firmware stuff packets with 0xff 0x03 (PPP: ALLSTATIONS, UI)

 * bytes, which are required on sent packet, but not always present on received

 * packets

		/*

		 * If it's associated with a tty (other than the RAS channel

		 * when we're online), then send the data to that tty.  The RAS

		 * channel's data is handled above - it always goes through

		 * ppp_generic.

			/*

			 * If data came in on the RAS channel and this tty is

			 * the modem tty, and we are online, then we send it to

			 * the PPP layer.

 Send the data to the ppp_generic module. */

 Otherwise we send it out the tty. */

 Disconnect from the wireless network. */

 SPDX-License-Identifier: GPL-2.0

/*

 * IPWireless 3G PCMCIA Network Driver

 *

 * Original code

 *   by Stephen Blackheath <stephen@blacksapphire.com>,

 *      Ben Martel <benm@symmetric.co.nz>

 *

 * Copyrighted as follows:

 *   Copyright (C) 2004 by Symmetric Systems Ltd (NZ)

 *

 * Various driver changes and rewrites, port to new kernels

 *   Copyright (C) 2006-2007 Jiri Kosina

 *

 * Misc code cleanups and updates

 *   Copyright (C) 2007 David Sterba

	/*

	 * The 'ras_raw' channel is only available when 'loopback' mode

	 * is enabled.

	 * Number of minor starts with 16 (_RANGE * _RAS_RAW).

 Take data received from hardware, and send it out the tty */

	/*

	 * Packet has been sent, so we subtract the number of bytes from our

	 * tally of outstanding TX bytes.

 Don't allow caller to write any more than we have room for */

 FIXME: Exactly how is the tty object locked here .. */

 Keeps the PCMCIA scripts happy. */

 FIXME: Exactly how is the tty object locked here .. */

 FIXME: Exactly how is the tty object locked here .. */

 FIXME: Exactly how is the tty object locked here .. */

 check if we provide raw device (if loopback is enabled) */

/*

 * Must be called before ipwireless_network_free().

				/* FIXME: Exactly how is the tty object locked here

				/* FIXME2: hangup does not mean all processes

	/*

	 * If DCD is de-asserted, we close the tty so pppd can tell that we

	 * have gone offline.

 SPDX-License-Identifier: GPL-2.0

/*

 * IPWireless 3G PCMCIA Network Driver

 *

 * Original code

 *   by Stephen Blackheath <stephen@blacksapphire.com>,

 *      Ben Martel <benm@symmetric.co.nz>

 *

 * Copyrighted as follows:

 *   Copyright (C) 2004 by Symmetric Systems Ltd (NZ)

 *

 * Various driver changes and rewrites, port to new kernels

 *   Copyright (C) 2006-2007 Jiri Kosina

 *

 * Misc code cleanups and updates

 *   Copyright (C) 2007 David Sterba

/*

 * Module params

 Debug mode: more verbose, print sent/recv bytes */

 Executes in process context. */

 Delegate to process context. */

 0x40 causes it to generate level mode interrupts. */

 0x04 enables IREQ pin. */

 this used to be 0x1000 */

	/*

	 * Do the RequestConfiguration last, because it enables interrupts.

	 * Then we don't get any interrupts before we're ready for them.

/*

 * ipwireless_attach() creates an "instance" of the driver, allocating

 * local data structures for one device (one interface).  The device

 * is registered with Card Services.

 *

 * The pcmcia_device structure is initialized, but we don't actually

 * configure the card at this point -- we wait until we receive a

 * card insertion event.

 RegisterClient will call config_ipwireless */

/*

 * This deletes a driver "instance".  The device is de-registered with

 * Card Services.  If it has been released, all local data structures

 * are freed.  Otherwise, the structures will be freed when the device

 * is released.

/*

 * Module insertion : initialisation of the module.

 * Register the card with cardmgr...

/*

 * Module removal

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2013, Intel Corporation.

 *

 * MEI Library for mei bus nfc device access

 to be sure on the stack we alloc memory */

/*

 * Writing a frame must not return the number of written bytes.

 * It must return either zero for success, or <0 for error.

 * In addition, it must not alter the skb

 SPDX-License-Identifier: GPL-2.0-only

/*

 * TI TRF7970a RFID/NFC Transceiver Driver

 *

 * Copyright (C) 2013 Texas Instruments Incorporated - http://www.ti.com

 *

 * Author: Erick Macias <emacias@ti.com>

 * Author: Felipe Balbi <balbi@ti.com>

 * Author: Mark A. Greer <mgreer@animalcreek.com>

/* There are 3 ways the host can communicate with the trf7970a:

 * parallel mode, SPI with Slave Select (SS) mode, and SPI without

 * SS mode.  The driver only supports the two SPI modes.

 *

 * The trf7970a is very timing sensitive and the VIN, EN2, and EN

 * pins must asserted in that order and with specific delays in between.

 * The delays used in the driver were provided by TI and have been

 * confirmed to work with this driver.  There is a bug with the current

 * version of the trf7970a that requires that EN2 remain low no matter

 * what.  If it goes high, it will generate an RF field even when in

 * passive target mode.  TI has indicated that the chip will work okay

 * when EN2 is left low.  The 'en2-rf-quirk' device tree property

 * indicates that trf7970a currently being used has the erratum and

 * that EN2 must be kept low.

 *

 * Timeouts are implemented using the delayed workqueue kernel facility.

 * Timeouts are required so things don't hang when there is no response

 * from the trf7970a (or tag).  Using this mechanism creates a race with

 * interrupts, however.  That is, an interrupt and a timeout could occur

 * closely enough together that one is blocked by the mutex while the other

 * executes.  When the timeout handler executes first and blocks the

 * interrupt handler, it will eventually set the state to IDLE so the

 * interrupt handler will check the state and exit with no harm done.

 * When the interrupt handler executes first and blocks the timeout handler,

 * the cancel_delayed_work() call will know that it didn't cancel the

 * work item (i.e., timeout) and will return zero.  That return code is

 * used by the timer handler to indicate that it should ignore the timeout

 * once its unblocked.

 *

 * Aborting an active command isn't as simple as it seems because the only

 * way to abort a command that's already been sent to the tag is so turn

 * off power to the tag.  If we do that, though, we'd have to go through

 * the entire anticollision procedure again but the digital layer doesn't

 * support that.  So, if an abort is received before trf7970a_send_cmd()

 * has sent the command to the tag, it simply returns -ECANCELED.  If the

 * command has already been sent to the tag, then the driver continues

 * normally and recieves the response data (or error) but just before

 * sending the data upstream, it frees the rx_skb and sends -ECANCELED

 * upstream instead.  If the command failed, that error will be sent

 * upstream.

 *

 * When recieving data from a tag and the interrupt status register has

 * only the SRX bit set, it means that all of the data has been received

 * (once what's in the fifo has been read).  However, depending on timing

 * an interrupt status with only the SRX bit set may not be recived.  In

 * those cases, the timeout mechanism is used to wait 20 ms in case more

 * data arrives.  After 20 ms, it is assumed that all of the data has been

 * received and the accumulated rx data is sent upstream.  The

 * 'TRF7970A_ST_WAIT_FOR_RX_DATA_CONT' state is used for this purpose

 * (i.e., it indicates that some data has been received but we're not sure

 * if there is more coming so a timeout in this state means all data has

 * been received and there isn't an error).  The delay is 20 ms since delays

 * of ~16 ms have been observed during testing.

 *

 * When transmitting a frame larger than the FIFO size (127 bytes), the

 * driver will wait 20 ms for the FIFO to drain past the low-watermark

 * and generate an interrupt.  The low-watermark set to 32 bytes so the

 * interrupt should fire after 127 - 32 = 95 bytes have been sent.  At

 * the lowest possible bit rate (6.62 kbps for 15693), it will take up

 * to ~14.35 ms so 20 ms is used for the timeout.

 *

 * Type 2 write and sector select commands respond with a 4-bit ACK or NACK.

 * Having only 4 bits in the FIFO won't normally generate an interrupt so

 * driver enables the '4_bit_RX' bit of the Special Functions register 1

 * to cause an interrupt in that case.  Leaving that bit for a read command

 * messes up the data returned so it is only enabled when the framing is

 * 'NFC_DIGITAL_FRAMING_NFCA_T2T' and the command is not a read command.

 * Unfortunately, that means that the driver has to peek into tx frames

 * when the framing is 'NFC_DIGITAL_FRAMING_NFCA_T2T'.  This is done by

 * the trf7970a_per_cmd_config() routine.

 *

 * ISO/IEC 15693 frames specify whether to use single or double sub-carrier

 * frequencies and whether to use low or high data rates in the flags byte

 * of the frame.  This means that the driver has to peek at all 15693 frames

 * to determine what speed to set the communication to.  In addition, write

 * and lock commands use the OPTION flag to indicate that an EOF must be

 * sent to the tag before it will send its response.  So the driver has to

 * examine all frames for that reason too.

 *

 * It is unclear how long to wait before sending the EOF.  According to the

 * Note under Table 1-1 in section 1.6 of

 * http://www.ti.com/lit/ug/scbu011/scbu011.pdf, that wait should be at least

 * 10 ms for TI Tag-it HF-I tags; however testing has shown that is not long

 * enough so 20 ms is used.  So the timer is set to 40 ms - 20 ms to drain

 * up to 127 bytes in the FIFO at the lowest bit rate plus another 20 ms to

 * ensure the wait is long enough before sending the EOF.  This seems to work

 * reliably.

 30 seconds */

 TX length is 3 nibbles long ==> 4KB - 1 bytes max */

 Guard times for various RF technologies (in us) */

 Quirks */

/* Erratum: When reading IRQ Status register on trf7970a, we must issue a

 * read continuous command for IRQ Status and Collision Position registers.

 Direct commands */

/* Bits determining whether its a direct command or register R/W,

 * whether to use a continuous SPI transaction or not, and the actual

 * direct cmd opcode or register address.

 Registers addresses */

 Chip Status Control Register Bits */

 ISO Control Register Bits */

 true == No CRC */

 Modulator and SYS_CLK Control Register Bits */

 IRQ Status Register Bits */

 ISO15693 only */

 NFC (ISO/IEC 14443A) Type 2 Tag commands */

 ISO 15693 commands codes */

 ISO 15693 request and response flags */

 Calculate how much more data can be written to the fifo */

 If received Type 2 ACK/NACK, shift right 4 bits and pass up */

		/* If there are bytes in the FIFO, set status to '0' so

		 * the if stmt below doesn't fire and the driver will wait

		 * for the trf7970a to generate another RX interrupt.

 Receive complete */

		/* If initiator and getting interrupts caused by RF noise,

		 * turn off the receiver to avoid unnecessary interrupts.

		 * It will be turned back on in trf7970a_send_cmd() when

		 * the next command is issued.

 Force ISO_CTRL write */

 Force ISO_CTRL write */

 Power on, RF off */

	/* If in initiator mode and not changing the RF tech due to a

	 * PSL sequence (indicated by 'trf->iso_ctrl == 0xff' from

	 * trf7970a_init()), clear the NFC Target Detection Level register

	 * due to erratum.

	/* When issuing Type 2 read command, make sure the '4_bit_RX' bit in

	 * special functions register 1 is cleared; otherwise, its a write or

	 * sector select command and '4_bit_RX' must be set.

	 *

	 * When issuing an ISO 15693 command, inspect the flags byte to see

	 * what speed to use.  Also, remember if the OPTION flag is set on

	 * a Type 5 write or lock command so the driver will know that it

	 * has to send an EOF in order to get a response.

	/* TX data must be prefixed with a FIFO reset cmd, a cmd that depends

	 * on what the current framing is, the address of the TX length byte 1

	 * register (0x1d), and the 2 byte length of the data to be transmitted.

	 * That totals 5 bytes.

 7 bits */

 Clear possible spurious interrupt */

	/* Normally we write the ISO_CTRL register in

	 * trf7970a_tg_config_framing() because the framing can change

	 * the value written.  However, when sending a PSL RES,

	 * digital_tg_send_psl_res_complete() doesn't call

	 * trf7970a_tg_config_framing() so we must write the register

	 * here.

/* Since this is a target routine, several of the framing calls are

 * made between receiving the request and sending the response so they

 * should take effect until after the response is sent.  This is accomplished

 * by skipping the ISO_CTRL register write here and doing it in the interrupt

 * handler.

 These ones are applied in the interrupt handler */

 Don't write to ISO_CTRL yet */

 There are two enable pins - only EN must be present in the DT */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Virtual NCI device simulation driver

 *

 * Copyright (C) 2020 Samsung Electrnoics

 * Bongsu Jeon <bongsu.jeon@samsung.com>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * NFC hardware simulation driver

 * Copyright (c) 2013, Intel Corporation.

	/*

	 * To effectively send data, the device just wake up its link_out which

	 * is the link_in of the peer device. The exchanged skb has already been

	 * stored in the dev->link_out through nfcsim_link_set_skb().

 Add random delay (between 3 and 10 ms) before sending data */

 nfcX\0 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Sony NFC Port-100 Series driver

 * Copyright (c) 2013, Intel Corporation.

 *

 * Partly based/Inspired by Stephen Tiedemann's nfcpy

 Standard port100 frame definitions */

 data[0] CC, data[1] SCC */

 data[len] DCS, data[len + 1] postamble*/

/*

 * Max extended frame payload len, excluding CC and SCC

 * which are already in PORT100_FRAME_HEADER_LEN.

#define PORT100_FRAME_ACK_SIZE 6 /* Preamble (1), SoPC (2), ACK Code (2),

 start of frame */

 Port-100 command: in or out */

 CC */

 Port-100 sub-command */

 SCC */

/*

 * Setting sets structure for in_set_rf command

 *

 * @in_*_set_number: Represent the entry indexes in the port-100 RF Base Table.

 *              This table contains multiple RF setting sets required for RF

 *              communication.

 *

 * @in_*_comm_type: Theses fields set the communication type to be used.

 Ensures the array has NFC_DIGITAL_RF_TECH_LAST elements */

/**

 * struct port100_tg_rf_setting - Setting sets structure for tg_set_rf command

 *

 * @tg_set_number: Represents the entry index in the port-100 RF Base Table.

 *                 This table contains multiple RF setting sets required for RF

 *                 communication. this field is used for both send and receive

 *                 settings.

 *

 * @tg_comm_type: Sets the communication type to be used to send and receive

 *                data.

 Ensures the array has NFC_DIGITAL_RF_TECH_LAST elements */

 nfc_digital_framing_nfca_short */

 nfc_digital_framing_nfca_standard */

 nfc_digital_framing_nfca_standard_with_crc_a */

 nfc_digital_framing_nfca_standard */

 nfc_digital_framing_nfcf */

 nfc_digital_framing_nfcf */

 nfc_digital_framing_nfcb */

 Ensures the array has NFC_DIGITAL_FRAMING_LAST elements */

 Ensures the array has NFC_DIGITAL_FRAMING_LAST elements */

	/* This mutex protects the out_urb and avoids to submit a new command

	 * through port100_send_frame_async() while the previous one is being

	 * canceled through port100_abort_cmd().

	/* The digital stack serializes commands to be sent. There is no need

	 * for any queuing/locking mechanism at driver level.

 The rule: value + checksum = 0 */

 The rule: sum(data elements) + checksum = 0 */

 success */

 success */

	/*

	 * If prior cancel is in-flight (dev->cmd_cancel == true), we

	 * can skip to send cancel. Then this will wait the prior

	 * cancel, or merged into the next cancel rarely if next

	 * cancel was started before waiting done. In any case, this

	 * will be waked up soon or later.

		/*

		 * Set the cmd_cancel flag only if the URB has been

		 * successfully submitted. It will be reset by the out

		 * URB completion callback port100_send_complete().

	/* A command cancel frame as been sent through dev->out_urb. Don't try

	 * to submit a new one.

 payload is already there, just update datalen */

 success */

 An ack will cancel the last issued command */

 cancel the urb request */

 Cancel the last command if the device is being switched off */

 Remove collision bits byte */

	/* The first thing to do with the Port-100 is to set the command type

	 * to be used. If supported we use command type 1. 0 otherwise.

 SPDX-License-Identifier: GPL-2.0+

/*

 * UART Link Layer for S3FWRN82 NCI based Driver

 *

 * Copyright (C) 2015 Samsung Electronics

 * Robert Baldyga <r.baldyga@samsung.com>

 * Copyright (C) 2020 Samsung Electronics

 * Bongsu Jeon <bongsu.jeon@samsung.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Link Layer for Samsung S3FWRN5 NCI based Driver

 *

 * Copyright (C) 2015 Samsung Electrnoics

 * Robert Baldyga <r.baldyga@samsung.com>

 * Copyright (C) 2020 Samsung Electrnoics

 * Bongsu Jeon <bongsu.jeon@samsung.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * NCI based driver for Samsung S3FWRN5 NFC chip

 *

 * Copyright (C) 2015 Samsung Electrnoics

 * Robert Baldyga <r.baldyga@samsung.com>

 Compute rfreg checksum */

 Set default clock configuration for external crystal */

 Start rfreg configuration */

 Update rfreg */

 Finish rfreg configuration */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * NCI based driver for Samsung S3FWRN5 NFC chip

 *

 * Copyright (C) 2015 Samsung Electrnoics

 * Robert Baldyga <r.baldyga@samsung.com>

 Send GET_BOOTINFO command */

 Send ENTER_UPDATE_MODE command */

 Send hashcode data */

 Send signature data */

 Send UPDATE_SECTOR command */

 Send data split into 256-byte packets */

 Send COMPLETE_UPDATE_MODE command */

/*

 * Firmware header structure:

 *

 * 0x00 - 0x0B : Date and time string (w/o NUL termination)

 * 0x10 - 0x13 : Firmware version

 * 0x14 - 0x17 : Signature address

 * 0x18 - 0x1B : Signature size

 * 0x1C - 0x1F : Firmware image address

 * 0x20 - 0x23 : Firmware sectors count

 * 0x24 - 0x27 : Custom signature address

 * 0x28 - 0x2B : Custom signature size

 Get bootloader info */

 Match hardware version to obtain firmware base address */

 Compute SHA of firmware data */

 Firmware update process */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * NCI based driver for Samsung S3FWRN5 NFC chip

 *

 * Copyright (C) 2015 Samsung Electrnoics

 * Robert Baldyga <r.baldyga@samsung.com>

 Get firmware data */

 Update firmware */

 Update RF configuration */

skip bootloader mode

 NCI core reset */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * I2C Link Layer for Samsung S3FWRN5 NCI based Driver

 *

 * Copyright (C) 2015 Samsung Electrnoics

 * Robert Baldyga <r.baldyga@samsung.com>

 Retry, chip was in standby */

 Support also deprecated property */

 Support also deprecated property */

	/*

	 * S3FWRN5 depends on a clock input ("XI" pin) to function properly.

	 * Depending on the hardware configuration this could be an always-on

	 * oscillator or some external clock that must be explicitly enabled.

	 * Make sure the clock is running before starting S3FWRN5.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for NXP PN532 NFC Chip - UART transport layer

 *

 * Copyright (C) 2018 Lemonage Software GmbH

 * Author: Lars P√∂schel <poeschel@lemonage.de>

 * All rights reserved.

	/*

	 * send_wakeup variable is used to control if we need to send a wakeup

	 * request to the pn532 chip prior to our actual command. There is a

	 * little propability of a race condition. We decided to not mutex the

	 * variable as the worst that could happen is, that we send a wakeup

	 * to the chip that is already awake. This does not hurt. It is a

	 * no-op to the chip.

 wakeup sequence and dummy bytes for waiting time */

 spec 7.1.1.3:  Preamble, SoPC (2), ACK Code (2), Postamble */

 An ack will cancel the last issued command */

 schedule cmd_complete_work to finish current command execution */

/*

 * scans the buffer if it contains a pn532 frame. It is not checked if the

 * frame is really valid. This is later done with pn533_rx_frame_is_valid.

 * This is useful for malformed or errornous transmitted frames. Adjusts the

 * bufferposition where the frame starts, since pn533_recv_frame expects a

 * well formed frame.

 search start code */

 frame type */

 CKS + Postamble */) {

 normal information frame */

 CKS + Postamble */) {

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for NXP PN533 NFC Chip - USB transport layer

 *

 * Copyright (C) 2011 Instituto Nokia de Tecnologia

 * Copyright (C) 2012-2013 Tieto Poland

 success */

 spec 7.1.1.3:  Preamble, SoPC (2), ACK Code (2), Postamble */

 request for response for sent packet directly */

 request for ACK if that's the case */

	/* ACR122U does not support any command which aborts last

	 * issued command i.e. as ACK for standard PN533. Additionally,

	 * it behaves stange, sending broken or incorrect responses,

	 * when we cancel urb before the chip will send response.

 An ack will cancel the last issued command */

 cancel the urb request */

 ACR122 specific structs and functions */

 ACS ACR122 pn533 frame definitions */

 CCID messages types */

	/*

	 * 3 msg specific bytes or status, error and 1 specific

	 * byte for reposnse msg

 payload */

 pn533 frame: TFI ... */

 pn533 frame : TFI ... */

 sizeof(apdu_hdr) + sizeof(datalen) */

 data[0] + data[1] */

 f->ccid.datalen already includes tail length */

 Power on th reader (CCID cmd) */

 backup context */

 restore context */

 success */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for NXP PN533 NFC Chip - core functions

 *

 * Copyright (C) 2011 Instituto Nokia de Tecnologia

 * Copyright (C) 2012-2013 Tieto Poland

 How much time we spend listening for initiators */

 Delay between each poll frame (ms) */

 structs for pn533 commands */

 PN533_CMD_GET_FIRMWARE_VERSION */

 PN533_CMD_RF_CONFIGURATION */

 PN533_CMD_IN_LIST_PASSIVE_TARGET */

 felica commands opcode */

 felica SENSF_REQ parameters */

 type B initiator_data values */

 PN533_CMD_IN_ATR */

 optional */

 optional */

 PN532_CMD_IN_AUTOPOLL */

 in units of 150 ms */

 PN533_TG_INIT_AS_TARGET */

 The rule: value(high byte) + value(low byte) + checksum = 0 */

 The rule: value + checksum = 0 */

 The rule: sum(data elements) + checksum = 0 */

 Standard frame code */

 Extended */

 check data checksum */

 check for Extended Information frame */

 payload is already there, just update datalen */

 when no response is set we got interrupted */

/*

 * pn533_send_cmd_direct_async

 *

 * The function sends a priority cmd directly to the chip omitting the cmd

 * queue. It's intended to be used by chaining mechanism of received responses

 * where the host has to request every single chunk of data before scheduling

 * next cmd from the queue.

/*  pn533_send_cmd_sync

 *

 *  Please note the req parameter is freed inside the function to

 *  limit a number of return value interpretations by the caller.

 *

 *  1. negative in case of error during TX path -> req should be freed

 *

 *  2. negative in case of error during RX path -> req should not be freed

 *     as it's been already freed at the beginning of RX path by

 *     async_complete_cb.

 *

 *  3. valid pointer in case of successful RX path

 *

 *  A caller has to check a return value with IS_ERR macro. If the test pass,

 *  the returned pointer is valid.

 *

	/*

	 * The length check of nfcid[] and ats[] are not being performed because

	 * the values are not being used

 Requirement 4.6.3.3 from NFC Forum Digital Spec */

 Requirements 4.8.2.1, 4.8.2.3, 4.8.2.5 and 4.8.2.7 from NFC Forum */

 optional */

 Requirement 4.6.3.3 from NFC Forum Digital Spec */

 Toggle the DEP polling */

 nbtg + tg */

 We must stop the poll after a valid target found */

 DEP */

 random */

 System code */

 SENS_RES */

 SEL_RES for DEP */

	unsigned int skb_len = 36 + /*

				     * mode (1), mifare (6),

				     * felica (18), nfcid3 (10), gb_len (1)

 len Tk*/

 DEP support only */

 MIFARE params */

 Felica params */

 NFCID3 */

 General bytes */

 Len Tk */

 Grab the first skb in the queue */

 No more data */

 Reset the queue for future use */

 last entry - remove MI bit */

 success */

 Only DEP supported */

 Not target found, turn radio off */

 ATR_RES general bytes are located at offset 17 */

 ActPass + BR + Next */

 NFCID3 */

 Active */

 424 kbps */

 Next */

 Copy passive data */

 Copy NFCID3 (which is NFCID2 from SENSF_RES) */

 We have some Gi */

 Target mode */

 Initiator mode */

 Not target found, turn radio off */

 Listen mode */

 Polling mode */

 Do not always start polling from the same modulation */

 Start listen timer */

TG + Next*/

 TG */

 Next */

 ATR_RES general bytes are located at offset 16 */

 TG*/

 ATR_RES general bytes are located at offset 17 */

 ActPass + BR + Next */

 NFCID3 */

 ActPass */

 424 kbps */

 Next */

 Copy passive data */

 Copy NFCID3 (which is NFCID2 from SENSF_RES) */

 We have some Gi */

 Prepare for the next round */

/*

 * Receive an incoming pn533 frame. skb contains only header and payload.

 * If skb == NULL, it is a notification that the link below is dead.

 Split the Tx skb into small chunks */

 Remaining size */

 Allocate and reserve */

 Reserve the TG/MI byte */

 MI + TG */

 TG */

 Reduce the size of incoming buffer */

 Add this to skb_queue */

 jumbo frame ? */

 TG */

 rc from send_async */

 Prepare for the next round */

 let's split in multiple chunks if size's too big */

 get the first skb */

 Send th skb */

TG*/

 success */

 Grab the first skb in the queue */

 No more data */

 Reset the queue for future use */

 Still some fragments? */

 success */

 cfgitem + cfgdata */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for NXP PN533 NFC Chip - I2C transport layer

 *

 * Copyright (C) 2011 Instituto Nokia de Tecnologia

 * Copyright (C) 2012-2013 Tieto Poland

 * Copyright (C) 2016 HALE electronic

	int hard_fault;		/*

				 * < 0 if hardware error occurred (e.g. i2c err)

				 * and prevents normal operation.

 spec 6.2.1.3:  Preamble, SoPC (2), ACK Code (2), Postamble */

 Retry, chip was in power down */

 An ack will cancel the last issued command */

 schedule cmd_complete_work to finish current command execution */

 remove READY byte */

 trim to frame size */

	/*

	 * NOTE: The use of the compatibles with the trailing "...-i2c" is

	 * deprecated and will be removed.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * HCI based Driver for NXP PN544 NFC Chip

 *

 * Copyright (C) 2012  Intel Corporation. All rights reserved.

 Timing restrictions (ms) */

 Proprietary commands */

 Proprietary gates, events, commands and registers */

 NFC_HCI_RF_READER_A_GATE additional registers and commands */

 Commands that apply to all RF readers */

 NFC_HCI_ID_MGMT_GATE additional registers */

 Largest headroom needed for outgoing custom commands */

 Enable all supported modes */

 Enable merge by default */

 Type A */

 Type F 212 */

 Type F 424 */

 NFC active */

 Type F NFC-DEP IDm has prefix 0x01FE */

		/*

		 * TODO: maybe other ISO 14443 require some kind of continue

		 * activation, but for now we've seen only this one below.

 Type 4 Mifare DESFire */

/*

 * Returns:

 * <= 0: driver handled the data exchange

 *    1: driver doesn't especially handle, please do standard processing

			/*

			 * It seems that pn544 is inverting key and UID for

			 * MIFARE authentication commands.

 Set default false for multiple information chaining */

/*

 * Returns:

 * <= 0: driver handled the event, skb consumed

 *    1: driver does not handle the event, please do standard processing

 Default mode */

	/*

	 * TODO: Session id must include the driver name + some bus addr

	 * persistent info to discriminate 2 identical chips

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2013  Intel Corporation. All rights reserved.

 *

 * HCI based Driver for NXP pn544 NFC Chip

 required last entry */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * I2C Link Layer for PN544 HCI based Driver

 *

 * Copyright (C) 2012  Intel Corporation. All rights reserved.

 GPIO names */

 framing in HCI mode */

/*

 * Exposed through the 4 most significant bytes

 * from the HCI SW_VERSION first byte, a.k.a.

 * SW RomLib.

	int hard_fault;		/*

				 * < 0 if hardware error occured (e.g. i2c err)

				 * and prevents normal operation.

 Disable fw download */

 power off */

 power on */

 send reset */

/*

 * Writing a frame must not return the number of written bytes.

 * It must return either zero for success, or <0 for error.

 * In addition, it must not alter the skb

 Retry, chip was in standby */

/*

 * Reads an shdlc frame and returns it in a newly allocated sk_buff. Guarantees

 * that i2c bus will be flushed and that next read will start on a new frame.

 * returned skb contains only LLC header and payload.

 * returns:

 * -EREMOTEIO : i2c read error (fatal)

 * -EBADMSG : frame was incorrect and discarded

 * -ENOMEM : cannot allocate skb, frame dropped

/*

 * Reads an shdlc frame from the chip. This is not as straightforward as it

 * seems. There are cases where we could loose the frame start synchronization.

 * The frame format is len-data-crc, and corruption can occur anywhere while

 * transiting on i2c bus, such that we could read an invalid len.

 * In order to recover synchronization with the next frame, we must be sure

 * to read the real amount of data without using the len byte. We do this by

 * assuming the following:

 * - the chip will always present only one single complete frame on the bus

 *   before triggering the interrupt

 * - the chip will not present a new frame until we have completely read

 *   the previous one (or until we have handled the interrupt).

 * The tricky case is when we read a corrupted len that is less than the real

 * len. We must detect this here in order to determine that we need to flush

 * the bus. This is the reason why we check the crc here.

 calculate local crc for the data we want to check */

 tell the chip the memory region to which our crc applies */

	/*

	 * and give our local crc. Chip will calculate its own crc for the

	 * region and compare with ours.

 Only secure write command can be chunked*/

 The firmware also have other commands, we just send them directly */

 SW reset command will not trig any response from PN544 */

 Get EN GPIO */

 Get FW GPIO */

 SPDX-License-Identifier: GPL-2.0-or-later

/* -------------------------------------------------------------------------

 * Copyright (C) 2014-2016, Intel Corporation

 *

 * -------------------------------------------------------------------------

 proprietary destination specific paramerer without value */

/*

 * Register a packet sent counter and a callback

 *

 * We have no other way of knowing when all firmware packets were sent out

 * on the i2c bus. We need to know that in order to close the connection and

 * send the patch end message.

/*

 * The device is expecting a stream of packets. All packets need to

 * have the PBF flag set to 0x0 (last packet) even if the firmware

 * file is segmented and there are multiple packets. If we give the

 * whole firmware to nci_send_data it will segment it and it will set

 * the PBF flag to 0x01 so we need to do the segmentation here.

 *

 * The firmware will be analyzed and applied when we send NCI_OP_PROP_PATCH_CMD

 * command with NCI_PATCH_TYPE_EOT parameter. The device will send a

 * NFCC_PATCH_NTF packet and a NCI_OP_CORE_RESET_NTF packet.

 Patch init request */

 Patch data connection creation */

 Send the patch over the data connection */

 Wait for all the packets to be send over i2c */

 make sure that the NFCC processed the last data packet */

 Close the data connection */

 Patch finish message */

 If the patch notification didn't arrive yet, wait for it */

 Check if the patching was successful */

	/*

	 * We need to wait for the reset notification before we

	 * can continue

 Patch init request */

 Patch data connection creation */

 Send the patch over the data connection */

 Wait for all the packets to be send over i2c */

 make sure that the NFCC processed the last data packet */

 Close the data connection */

 Patch finish message */

 If the patch notification didn't arrive yet, wait for it */

 Check if the patching was successful */

	/*

	 * We need to wait for the reset notification before we

	 * can continue

 Format: total length followed by an NCI packet */

 Get RAM and OTP version */

 Load firmware from disk */

 Update OTP */

 Update RAM */

 Release the firmware buffers */

 If a patch was applied the new version is checked */

	/*

	 * We initialized the devices but the NFC subsystem expects

	 * it to not be initialized.

 Check if the device has VSC */

 Set the vendor specific configuration */

 Set clock type and frequency */

	/*

	 * In order to apply the VSC FDP needs a reset

	/**

	 * The nci core was initialized when post setup was called

	 * so we leave it like that

 SPDX-License-Identifier: GPL-2.0-or-later

/* -------------------------------------------------------------------------

 * Copyright (C) 2014-2016, Intel Corporation

 *

 * -------------------------------------------------------------------------

 Reset RST/WakeUP for at least 100 micro-second */

 Add length header */

 Compute and add lrc */

 Retry, chip was in standby */

 Read the length packet and the data packet */

 Check packet integruty */

		/*

		 * LRC check failed. This may due to transmission error or

		 * desynchronization between driver and FDP. Drop the packet

		 * and force resynchronization

 Packet that contains a length */

 Flush the remaining data */

 Add 1 to the length to inclue the length byte itself */

 Checking if we have an irq */

 Requesting the power gpio */

 read device properties to get the clock and production settings */

 Call the NFC specific probe function */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2013 Intel Corporation. All rights reserved.

 *

 * HCI based Driver for Inside Secure microread NFC Chip

 required last entry */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * HCI based Driver for Inside Secure microread NFC Chip

 *

 * Copyright (C) 2013  Intel Corporation. All rights reserved.

 Proprietary gates, events, commands and registers */

 Admin */

 Reader */

 Card */

 P2P */

 Those pipes are created/opened by default in the chip */

 Events */

 Commands */

 Hosts IDs */

 Largest headroom needed for outgoing custom commands */

 RF Error ind. */

/*

 * Returns:

 * <= 0: driver handled the data exchange

 *    1: driver doesn't especially handle, please do standard processing

 SPDX-License-Identifier: GPL-2.0-only

/*

 * HCI based Driver for Inside Secure microread NFC Chip - i2c layer

 *

 * Copyright (C) 2013 Intel Corporation. All rights reserved.

 framing in HCI mode */

	int hard_fault;		/*

				 * < 0 if hardware error occured (e.g. i2c err)

				 * and prevents normal operation.

 Retry, chip was in standby */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Proprietary commands extension for STMicroelectronics NFC NCI Chip

 *

 * Copyright (C) 2014-2015  STMicroelectronics SAS. All rights reserved.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Secure Element driver for STMicroelectronics NFC NCI chip

 *

 * Copyright (C) 2014-2015 STMicroelectronics SAS. All rights reserved.

 Hosts */

 Gates */

 Pipes */

 Connectivity pipe only */

 Connectivity + APDU Reader pipe */

 msecs */

/*

 * WT = 2^BWI/10[s], convert into msecs and add a secure

 * room by increasing by 2 this timeout

 If TA is present bit 0 is set */

 If TB is present bit 1 is set */

 Here are the mandatory pipe for st_nci */

 Secure element pipes are created by secure element host */

 Bits 8 to 5 of the first TB for T=1 encode BWI from zero to nine */

	/* On ST_NCI device pipes number are dynamics

	 * If pipes are already created, hci_dev_up will fail.

	 * Doing a clear all pipe is a bad idea because:

	 * - It does useless EEPROM cycling

	 * - It might cause issue for secure elements support

	 * (such as removing connectivity or APDU reader pipe)

	 * A better approach on ST_NCI is to:

	 * - get a pipe list for each host.

	 * (eg: ST_NCI_HOST_CONTROLLER_ID for now).

	 * (TODO Later on UICC HOST and eSE HOST)

	 * - get pipe information

	 * - match retrieved pipe list in st_nci_gates

	 * ST_NCI_DEVICE_MGNT_GATE is a proprietary gate

	 * with ST_NCI_DEVICE_MGNT_PIPE.

	 * Pipe can be closed and need to be open.

 Get pipe list */

 Complete the existing gate_pipe table */

		/*

		 * Match pipe ID and gate ID

		 * Output format from ST21NFC_DM_GETINFO is:

		 * - pipe state (1byte)

		 * - source hid (1byte)

		 * - source gid (1byte)

		 * - destination hid (1byte)

		 * - destination gid (1byte)

	/*

	 * 3 gates have a well known pipe ID. Only NCI_HCI_LINK_MGMT_GATE

	 * is not yet open at this stage.

/*

 * Returns:

 * <= 0: driver handled the event, skb consumed

 *    1: driver does not handle the event, please do standard processing

		/* According to specification etsi 102 622

		 * 11.2.2.4 EVT_TRANSACTION Table 52

		 * Description  Tag     Length

		 * AID          81      5 to 16

		 * PARAMETERS   82      0 to 255

 Check next byte is PARAMETERS tag (82) */

	/*

	 * Wait for an EVT_HOT_PLUG in order to

	 * retrieve a relevant host list.

 Ignore return value and check in any case the host_list */

	/* There might be some "collision" after receiving a HOT_PLUG event

	 * This may cause the CLF to not answer to the next hci command.

	 * There is no possible synchronization to prevent this.

	 * Adding a small delay is the only way to solve the issue.

	/*

	 * According to upper layer, se_idx == NFC_SE_UICC when

	 * info->se_info.se_status->is_uicc_enable is true should never happen

	 * Same for eSE.

 Do best effort to release SWP */

	/*

	 * According to upper layer, se_idx == NFC_SE_UICC when

	 * info->se_info.se_status->is_uicc_enable is true should never happen.

	 * Same for eSE.

		/*

		 * The activation procedure failed, the secure element

		 * is not connected. Remove from the list.

	/*

	 * Session id must include the driver name + i2c bus addr

	 * persistent info to discriminate 2 identical chips

	/*

	 * In factory mode, we prevent secure elements activation

	 * by disabling nfcee on the current HCI connection id.

	 * HCI will be used here only for proprietary commands.

	/*

	 * No answer from the secure element

	 * within the defined timeout.

	 * Let's send a reset request as recovery procedure.

	 * According to the situation, we first try to send a software reset

	 * to the secure element. If the next command is still not

	 * answering in time, we send to the CLF a secure element hardware

	 * reset request.

 hardware reset managed through VCC_UICC_OUT power supply */

 initialize timers */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * SPI Link Layer for ST NCI based Driver

 * Copyright (C) 2014-2015 STMicroelectronics SAS. All rights reserved.

 ndlc header */

 PCB(1) + NCI Packet header(3) */

 req 4.2.1 */

/*

 * Writing a frame must not return the number of written bytes.

 * It must return either zero for success, or <0 for error.

 * In addition, it must not alter the skb

	/*

	 * We may have received some valuable data on miso line.

	 * Send them back in the ndlc state machine.

/*

 * Reads an ndlc frame and returns it in a newly allocated sk_buff.

 * returns:

 * 0 : if received frame is complete

 * -EREMOTEIO : i2c read error (fatal)

 * -EBADMSG : frame was incorrect and discarded

 * -ENOMEM : cannot allocate skb, frame dropped

/*

 * Reads an ndlc frame from the chip.

 *

 * On ST21NFCB, IRQ goes in idle state when read starts.

 Check SPI platform functionnalities */

 Get RESET GPIO */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * NCI based Driver for STMicroelectronics NFC Chip

 *

 * Copyright (C) 2014-2015  STMicroelectronics SAS. All rights reserved.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Low Level Transport (NDLC) Driver for STMicroelectronics NFC Chip

 *

 * Copyright (C) 2014-2015  STMicroelectronics SAS. All rights reserved.

 toggle reset pin */

 toggle reset pin */

 add ndlc header */

 start timer t1 for ndlc aknowledge */

 start timer t2 for chip availability */

 start timer t1 for ndlc aknowledge */

 initialize timers */

 cancel timers */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * I2C Link Layer for ST NCI NFC controller familly based Driver

 * Copyright (C) 2014-2015 STMicroelectronics SAS. All rights reserved.

 ndlc header */

 PCB(1) + NCI Packet header(3) */

 req 4.2.1 */

/*

 * Writing a frame must not return the number of written bytes.

 * It must return either zero for success, or <0 for error.

 * In addition, it must not alter the skb

 Retry, chip was in standby */

/*

 * Reads an ndlc frame and returns it in a newly allocated sk_buff.

 * returns:

 * 0 : if received frame is complete

 * -EREMOTEIO : i2c read error (fatal)

 * -EBADMSG : frame was incorrect and discarded

 * -ENOMEM : cannot allocate skb, frame dropped

 Retry, chip was in standby */

/*

 * Reads an ndlc frame from the chip.

 *

 * On ST_NCI, IRQ goes in idle state when read starts.

 Get RESET GPIO */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Proprietary commands extension for STMicroelectronics NFC Chip

 *

 * Copyright (C) 2014-2015  STMicroelectronics SAS. All rights reserved.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2014  STMicroelectronics SAS. All rights reserved.

 Connectivity pipe only */

 Connectivity + APDU Reader pipe */

/*

 * WT = 2^BWI/10[s], convert into msecs and add a secure

 * room by increasing by 2 this timeout

 If TA is present bit 0 is set */

 If TB is present bit 1 is set */

 Bits 8 to 5 of the first TB for T=1 encode BWI from zero to nine */

	/*

	 * Wait for an EVT_HOT_PLUG in order to

	 * retrieve a relevant host list.

 Ignore return value and check in any case the host_list */

	/*

	 * According to upper layer, se_idx == NFC_SE_UICC when

	 * info->se_status->is_uicc_enable is true should never happen.

	 * Same for eSE.

		/*

		 * The activation tentative failed, the secure element

		 * is not connected. Remove from the list.

	/*

	 * According to upper layer, se_idx == NFC_SE_UICC when

	 * info->se_status->is_uicc_enable is true should never happen

	 * Same for eSE.

	/*

	 * No answer from the secure element

	 * within the defined timeout.

	 * Let's send a reset request as recovery procedure.

	 * According to the situation, we first try to send a software reset

	 * to the secure element. If the next command is still not

	 * answering in time, we send to the CLF a secure element hardware

	 * reset request.

 hardware reset managed through VCC_UICC_OUT power supply */

/*

 * Returns:

 * <= 0: driver handled the event, skb consumed

 *    1: driver does not handle the event, please do standard processing

		/*

		 * According to specification etsi 102 622

		 * 11.2.2.4 EVT_TRANSACTION Table 52

		 * Description	Tag	Length

		 * AID		81	5 to 16

		 * PARAMETERS	82	0 to 255

 Check next byte is PARAMETERS tag (82) */

 initialize timers */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2014  STMicroelectronics SAS. All rights reserved.

	/*

	 * ST21NFCA only support P2P passive.

	 * PSL_REQ BRS value != 0 has only a meaning to

	 * change technology to type F.

	 * We change to BITRATE 424Kbits.

	 * In other case switch to BITRATE 106Kbits.

 Send an event to change bitrate change event to card f */

 Receiving DEP_REQ - Decoding */

/*

 * Returns:

 * <= 0: driver handled the event, skb consumed

 *    1: driver does not handle the event, please do standard processing

 timeout */

 Receiving DEP_REQ - Decoding */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * HCI based Driver for STMicroelectronics NFC Chip

 *

 * Copyright (C) 2014  STMicroelectronics SAS. All rights reserved.

 Proprietary gates, events, commands and registers */

 Commands that apply to all RF readers */

/*

 * Reader gate for communication with contact-less cards using Type A

 * protocol ISO14443-3 but not compliant with ISO14443-4

 NFC_MODE parameter*/

 Secure element pipes are created by secure element host */

 Largest headroom needed for outgoing custom commands */

	/* On ST21NFCA device pipes number are dynamics

	 * A maximum of 16 pipes can be created at the same time

	 * If pipes are already created, hci_dev_up will fail.

	 * Doing a clear all pipe is a bad idea because:

	 * - It does useless EEPROM cycling

	 * - It might cause issue for secure elements support

	 * (such as removing connectivity or APDU reader pipe)

	 * A better approach on ST21NFCA is to:

	 * - get a pipe list for each host.

	 * (eg: NFC_HCI_HOST_CONTROLLER_ID for now).

	 * (TODO Later on UICC HOST and eSE HOST)

	 * - get pipe information

	 * - match retrieved pipe list in st21nfca_gates

	 * ST21NFCA_DEVICE_MGNT_GATE is a proprietary gate

	 * with ST21NFCA_DEVICE_MGNT_PIPE.

	 * Pipe can be closed and need to be open.

 Get pipe list */

 Complete the existing gate_pipe table */

		/*

		 * Match pipe ID and gate ID

		 * Output format from ST21NFC_DM_GETINFO is:

		 * - pipe state (1byte)

		 * - source hid (1byte)

		 * - source gid (1byte)

		 * - destination hid (1byte)

		 * - destination gid (1byte)

	/*

	 * 3 gates have a well known pipe ID. Only NFC_HCI_LINK_MGMT_GATE

	 * is not yet open at this stage.

 Set NFC_MODE in device management gate to enable */

		/*

		 * enable polling according to im_protocols & tm_protocols

		 * - CLOSE pipe according to im_protocols & tm_protocols

 Configure the maximum supported datarate to 424Kbps */

		/*

		 * Configure sens_res

		 *

		 * NFC Forum Digital Spec Table 7:

		 * NFCID1 size: triple (10 bytes)

		/*

		 * Configure sel_res

		 *

		 * NFC Forum Digistal Spec Table 17:

		 * b3 set to 0b (value b7-b6):

		 * - 10b: Configured for NFC-DEP Protocol

 Configure NFCID1 Random uid */

 Configure NFCID2_LIST */

 System Code */

 NFCID2 */

 8 byte Pad bytes used for polling respone frame */

		/*

		 * Configuration byte:

		 * - bit 0: define the default NFCID2 entry used when the

		 * system code is equal to 'FFFF'

		 * - bit 1: use a random value for lowest 6 bytes of

		 * NFCID2 value

		 * - bit 2: ignore polling request frame if request code

		 * is equal to '01'

		 * - Other bits are RFU

 ISO14443-3 type 1 or 2 tags */

		/*

		 * - After the recepton of polling response for type F frame

		 * at 212 or 424 Kbit/s, NFCID2 registry parameters will be

		 * updated.

		 * - After the reception of SEL_RES with NFCIP-1 compliant bit

		 * set for type A frame NFCID1 will be updated

 P2P in type F */

 NFC Forum Digital Protocol Table 44 */

 P2P in type A */

/*

 * Returns:

 * <= 0: driver handled the data exchange

 *    1: driver doesn't especially handle, please do standard processing

 CTR, see spec:10.2.2.1 */

		/*

		 * PRESENCE_CHECK on those gates is available

		 * However, the answer to this command is taking 3 * fwi

		 * if the card is no present.

		 * Instead, we send an empty I-Frame with a very short

		 * configurable fwi ~604¬µs.

/*

 * Returns:

 * <= 0: driver handled the event, skb consumed

 *    1: driver does not handle the event, please do standard processing

	/*

	 * Session id must include the driver name + i2c bus addr

	 * persistent info to discriminate 2 identical chips

 SPDX-License-Identifier: GPL-2.0-only

/*

 * I2C Link Layer for ST21NFCA HCI based Driver

 * Copyright (C) 2014  STMicroelectronics SAS. All rights reserved.

/*

 * Every frame starts with ST21NFCA_SOF_EOF and ends with ST21NFCA_SOF_EOF.

 * Because ST21NFCA_SOF_EOF is a possible data value, there is a mecanism

 * called byte stuffing has been introduced.

 *

 * if byte == ST21NFCA_SOF_EOF or ST21NFCA_ESCAPE_BYTE_STUFFING

 * - insert ST21NFCA_ESCAPE_BYTE_STUFFING (escape byte)

 * - xor byte with ST21NFCA_BYTE_STUFFING_MASK

 SOF + 00 */

 2 bytes crc + EOF */

	/*

	 * crc might have fail because i2c macro

	 * is disable due to other interface activity

	/*

	 * < 0 if hardware error occured (e.g. i2c err)

	 * and prevents normal operation.

/*

 * In order to get the CLF in a known state we generate an internal reboot

 * using a proprietary command.

 * Once the reboot is completed, we expect to receive a ST21NFCA_SOF_EOF

 * fill buffer.

 CLF is spending about 20ms to do an internal reboot */

/*

 * Writing a frame must not return the number of written bytes.

 * It must return either zero for success, or <0 for error.

 * In addition, it must not alter the skb

	/*

	 * Compute CRC before byte stuffing computation on frame

	 * Note st21nfca_hci_add_len_crc is doing a byte stuffing

	 * on its own value

 add ST21NFCA_SOF_EOF on tail */

 add ST21NFCA_SOF_EOF on head */

	/*

	 * Compute byte stuffing

	 * if byte == ST21NFCA_SOF_EOF or ST21NFCA_ESCAPE_BYTE_STUFFING

	 * insert ST21NFCA_ESCAPE_BYTE_STUFFING (escape byte)

	 * xor byte with ST21NFCA_BYTE_STUFFING_MASK

	/*

	 * Manage sleep mode

	 * Try 3 times to send data with delay between each

/*

 * Prepare received data for upper layer.

 * Received data include byte stuffing, crc and sof/eof

 * which is not usable by hci part.

 * returns:

 * frame size without sof/eof, header and byte stuffing

 * -EBADMSG : frame was incorrect and discarded

 remove ST21NFCA byte stuffing for upper layer */

 remove byte stuffing useless byte */

 remove ST21NFCA_SOF_EOF from head */

 remove headbyte */

 remove crc. Byte Stuffing is already removed here */

/*

 * Reads an shdlc frame and returns it in a newly allocated sk_buff. Guarantees

 * that i2c bus will be flushed and that next read will start on a new frame.

 * returned skb contains only LLC header and payload.

 * returns:

 * frame size : if received frame is complete (find ST21NFCA_SOF_EOF at

 * end of read)

 * -EAGAIN : if received frame is incomplete (not find ST21NFCA_SOF_EOF

 * at end of read)

 * -EREMOTEIO : i2c read error (fatal)

 * -EBADMSG : frame was incorrect and discarded

 * (value returned from st21nfca_hci_i2c_repack)

 * -EIO : if no ST21NFCA_SOF_EOF is found after reaching

 * the read length end sequence

		/*

		 * Add retry mecanism

		 * Operation on I2C interface may fail in case of operation on

		 * RF or SWP interface

		/*

		 * The first read sequence does not start with SOF.

		 * Data is corrupeted so we drop it.

			/*

			 * Previous frame transmission was interrupted and

			 * the frame got repeated.

			 * Received frame start with ST21NFCA_SOF_EOF + 00.

/*

 * Reads an shdlc frame from the chip. This is not as straightforward as it

 * seems. The frame format is data-crc, and corruption can occur anywhere

 * while transiting on i2c bus, such that we could read an invalid data.

 * The tricky case is when we read a corrupted data or crc. We must detect

 * this here in order to determine that data can be transmitted to the hci

 * core. This is the reason why we check the crc here.

 * The CLF will repeat a frame until we send a RR on that frame.

 *

 * On ST21NFCA, IRQ goes in idle when read starts. As no size information are

 * available in the incoming data, other IRQ might come. Every IRQ will trigger

 * a read sequence with different length and will fill the current frame.

 * The reception is complete once we reach a ST21NFCA_SOF_EOF.

		/*

		 * With ST21NFCA, only one interface (I2C, RF or SWP)

		 * may be active at a time.

		 * Having incorrect crc is usually due to i2c macrocell

		 * deactivation in the middle of a transmission.

		 * It may generate corrupted data on i2c.

		 * We give sometime to get i2c back.

		 * The complete frame will be repeated.

		/*

		 * We succeeded to read data from the CLF and

		 * data is valid.

		 * Reset counter.

 Get EN GPIO from resource provider */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ----------------------------------------------------------------------------

 * drivers/nfc/st95hf/spi.c function definitions for SPI communication

 * ----------------------------------------------------------------------------

 * Copyright (C) 2015 STMicroelectronics Pvt. Ltd. All rights reserved.

 Function to send user provided buffer to ST95HF through SPI */

 return for asynchronous or no-wait case */

 check for timeout or success */

 Function to Receive command Response */

 First spi transfer to know the length of valid data */

 As 2 bytes are already read */

 Support of long frame */

 Now make a transfer to read only relevant bytes */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * --------------------------------------------------------------------

 * Driver for ST NFC Transceiver ST95HF

 * --------------------------------------------------------------------

 * Copyright (C) 2015 STMicroelectronics Pvt. Ltd. All rights reserved.

 supported protocols */

 driver capabilities */

 Command Send Interface */

 ST95HF_COMMAND_SEND CMD Ids */

 Select protocol codes */

/*

 * head room len is 3

 * 1 byte for control byte

 * 1 byte for cmd

 * 1 byte for size

/*

 * tailroom is 1 for ISO14443A

 * and 0 for ISO14443B/ISO15693,

 * hence the max value 1 should be

 * taken.

 Command Response interface */

 ST95HF transmission flag values */

 Misc defs */

/*

 * List of top-level cmds to be used internally by the driver.

 * All these commands are build on top of ST95HF basic commands

 * such as SEND_RECEIVE_CMD, PROTOCOL_SELECT_CMD, etc.

 * These top level cmds are used internally while implementing various ops of

 * digital layer/driver probe or extending the digital framework layer for

 * features that are not yet implemented there, for example, WTX cmd handling.

 st95_digital_cmd_complete_arg stores client context */

/*

 * structure containing ST95HF driver specific data.

 * @spicontext: structure containing information required

 *	for spi communication between st95hf and host.

 * @ddev: nfc digital device object.

 * @nfcdev: nfc device object.

 * @enable_gpio: gpio used to enable st95hf transceiver.

 * @complete_cb_arg: structure to store various context information

 *	that is passed from nfc requesting thread to the threaded ISR.

 * @st95hf_supply: regulator "consumer" for NFC device.

 * @sendrcv_trflag: last byte of frame send by sendrecv command

 *	of st95hf. This byte contains transmission flag info.

 * @exchange_lock: semaphore used for signaling the st95hf_remove

 *	function that the last outstanding async nfc request is finished.

 * @rm_lock: mutex for ensuring safe access of nfc digital object

 *	from threaded ISR. Usage of this mutex avoids any race between

 *	deletion of the object from st95hf_remove() and its access from

 *	the threaded ISR.

 * @nfcdev_free: flag to have the state of nfc device object.

 *	[alive | died]

 * @current_protocol: current nfc protocol.

 * @current_rf_tech: current rf technology.

 * @fwi: frame waiting index, received in reply of RATS according to

 *	digital protocol.

/*

 * st95hf_send_recv_cmd() is for sending commands to ST95HF

 * that are described in the cmd_array[]. It can optionally

 * receive the response if the cmd request is of type

 * SYNC. For that to happen caller must pass true to recv_res.

 * For ASYNC request, recv_res is ignored and the

 * function will never try to receive the response on behalf

 * of the caller.

 If control reached here, response can be taken */

 14443A config setting after select protocol */

 14443A demo gain setting */

 secondary config. for 14443Type 4A after protocol select */

		/*

		 * delay of 5-6 ms is required after select protocol

		 * command in case of ISO14443 Type B

 secondary config. for 14443Type 4B after protocol select */

 First make irq_in pin high */

 wait for 1 milisecond */

 Make irq_in pin low */

 wait for minimum interrupt pulse to make st95 active */

 At end make it high */

/*

 * Send a reset sequence over SPI bus (Reset command + wait 3ms +

 * negative pulse on st95hf enable gpio

 wait for 3 milisecond to complete the controller reset process */

 send negative pulse to make st95hf active */

 wait for 10 milisecond : HFO setup time */

 send an ECHO command and checks ST95HF response */

 send an pulse on IRQ in case of the chip is on sleep state */

 delay of 50 milisecond */

 secondary config. for 14443Type 4A after protocol select */

 secondary config. for 14443Type 4B after protocol select */

 Send response of wtx with ASYNC as no response expected */

 if no new wtx, cofigure with default values */

 First check ST95HF specific error */

 Check for CRC err only if CRC is present in the tag response */

 CRC error occurred */

 CRC error occurred */

 Process the response */

 Remove st95 header */

 check if it is case of RATS request reply & FWI is present */

 Remove CRC bytes only if received frames data has an eod (CRC) */

	/*

	 * check semaphore, if not down() already, then we don't

	 * know in which context the ISR is called and surely it

	 * will be a bug. Note that down() of the semaphore is done

	 * in the corresponding st95hf_in_send_cmd() and then

	 * only this ISR should be called. ISR will up() the

	 * semaphore before leaving. Hence when the ISR is called

	 * the correct behaviour is down_trylock() should always

	 * return 1 (indicating semaphore cant be taken and hence no

	 * change in semaphore count).

	 * If not, then we up() the semaphore and crash on

	 * a BUG() !

 if stcontext->nfcdev_free is true, it means remove already ran */

 Request for new FWT from tag */

	/*

	 * If select protocol is done on wtx req. do select protocol

	 * again with default values

 call digital layer callback */

 up the semaphore before returning */

 call of callback with error */

 up the semaphore before returning */

 NFC ops functions definition */

	/*

	 * down the semaphore to indicate to remove func that an

	 * ISR is pending, note that it will not block here in any case.

	 * If found blocked, it is a BUG!

 up the semaphore since ISR will never come in this case */

 p2p will be supported in a later release ! */

 switch on RF field */

 switch OFF RF field */

 TODO st95hf_abort_cmd */

	/*

	 * Store spicontext in spi device object for using it in

	 * remove function

	/*

	 * First reset SPI to handle warm reset of the system.

	 * It will put the ST95HF device in Power ON state

	 * which make the state of device identical to state

	 * at the time of cold reset of the system.

 call PowerOnReset sequence of ST95hf to activate it */

 create NFC dev object and register with NFC Subsystem */

 store st95context in nfc device object */

 if last in_send_cmd's ISR is pending, wait for it to finish */

 next reset the ST95HF controller */

 wait for 3 ms to complete the controller reset process */

 disable regulator */

 Register as SPI protocol driver */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Marvell NFC-over-UART driver

 *

 * Copyright (C) 2015, Marvell International Ltd.

/*

 * NFCMRVL NCI OPS

/*

 * NCI UART OPS

	/*

	 * Platform data cannot be used here since usually it is already used

	 * by low level serial driver. We can try to retrieve serial device

	 * and check if DT entries were added.

 Remove BREAK to wake up the NFCC */

	/*

	 * To ensure that if the NFCC goes in DEEP SLEEP sate we can wake him

	 * up. we set BREAK. Once we will be ready to send again we will remove

	 * it.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Marvell NFC-over-USB driver: USB interface related functions

 *

 * Copyright (C) 2014, Marvell International Ltd.

 Terminating entry */

 protects tx_in_flight */

		/* -EPERM: urb is being killed;

		 * -ENODEV: device got disconnected

 No configuration for USB */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Marvell NFC-over-SPI driver: SPI interface related functions

 *

 * Copyright (C) 2015, Marvell International Ltd.

	/*

	 * Special case where we are waiting for SPI_INT deassertion to start a

	 * transfer.

 Normal case, SPI_INT deasserted by slave to trigger a master read */

 Reinit completion for slave handshake */

	/*

	 * Append a dummy byte at the end of SPI frame. This is due to a

	 * specific DMA implementation in the controller

 Send the SPI packet */

 Init completion for slave handshake */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Marvell NFC driver: Firmware downloader

 *

 * Copyright (C) 2015, Marvell International Ltd.

 FW download states */

/*

 * Patterns for responses

 failed, halt the chip to avoid power consumption */

 Start FW download state machine */

		/*

		 * Command format:

		 * B0..2: NCI header

		 * B3   : Helper command (0xA5)

		 * B4..5: le16 data size

		 * B6..7: le16 data size complement (~)

		 * B8..N: payload

 Remove NCI HDR */

 FW Loading is done */

	/*

	 * Update HI config to use the right configuration for the next

	 * data exchanges.

		/*

		 * This is the case where an helper was needed and we have

		 * uploaded it. Now we have to wait the next RESET NTF to start

		 * FW download.

 Discard command timer */

 Allow next command */

 Queue and trigger rx work */

	/*

	 * Retrieve FW binary file and parse it to initialize FW download

	 * state machine.

 Retrieve FW binary */

 Configure a timer for timeout */

 Ronfigure HI to be sure that it is the bootrom values */

 Allow first command */

 First, reset the chip */

 Now wait for CORE_RESET_NTF or timeout */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Marvell NFC-over-I2C driver: I2C interface related functions

 *

 * Copyright (C) 2015, Marvell International Ltd.

 Read NCI header to know the payload size */

 Copy NCI header into the SKB */

 Read the NCI payload */

 Retry if chip was in standby */

 Request the read IRQ */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Marvell NFC driver: major functions

 *

 * Copyright (C) 2014-2015 Marvell International Ltd.

 Reset possible fault of previous session */

 Ensure that controller is powered off */

 Data packet, let's extract NCI payload */

 Skip this packet */

 Drop this packet since nobody wants it */

 Reset possible fault of previous session */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Generic driver for NXP NCI NFC chips

 *

 * Copyright (C) 2014  NXP Semiconductors  All rights reserved.

 *

 * Author: Cl√©ment Perrochaud <clement.perrochaud@nxp.com>

 *

 * Derived from PN544 device driver:

 * Copyright (C) 2012  Intel Corporation. All rights reserved.

 Crypto operations can take up to 30 seconds */

 crc_ccitt cannot be used since it is computed MSB first and not LSB first */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Generic driver for NXP NCI NFC chips

 *

 * Copyright (C) 2014  NXP Semiconductors  All rights reserved.

 *

 * Authors: Cl√©ment Perrochaud <clement.perrochaud@nxp.com>

 *

 * Derived from PN544 device driver:

 * Copyright (C) 2012  Intel Corporation. All rights reserved.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * I2C link layer for the NXP NCI driver

 *

 * Copyright (C) 2014  NXP Semiconductors  All rights reserved.

 * Copyright (C) 2012-2015  Intel Corporation. All rights reserved.

 *

 * Authors: Cl√©ment Perrochaud <clement.perrochaud@nxp.com>

 * Authors: Oleg Zhurakivskyy <oleg.zhurakivskyy@intel.com>

 *

 * Derived from PN544 device driver:

 * Copyright (C) 2012  Intel Corporation. All rights reserved.

	int hard_fault; /*

			 * < 0 if hardware error occurred (e.g. i2c err)

			 * and prevents normal operation.

 Retry, chip was in standby */

 Success but return 0 and not number of bytes */

 May actually be a data header */

 SPDX-License-Identifier: GPL-2.0-or-later

/* GD ROM driver for the SEGA Dreamcast

 * copyright Adrian McMenamin, 2007

 * With thanks to Marcus Comstedt and Nathan Keynes

 * for work in reversing PIO and DMA

 GD Rom commands */

 GD Rom registers */

 Wait to get busy first */

 Now wait for busy to clear */

	/* If the device won't clear it has probably

	* been hit by a serious failure - but we'll

 now read in the data */

 ensure IRQ_WAIT is set */

 specify how many bytes we expect back */

 other parameters */

 Wait until we can go */

/* gdrom_command_executediagnostic:

 * Used to probe for presence of working GDROM

 * Restarts GDROM device and then applies standard ATA 3

 * Execute Diagnostic Command: a return of '1' indicates device 0

 * present and device 1 absent

/*

 * Prepare disk command

 * byte 0 = 0x70

 * byte 1 = 0x1f

 60 second timeout */

 log an error */

/*

 * Read TOC command

 * byte 0 = 0x14

 * byte 1 = session

 * byte 3 = sizeof TOC >> 8  ie upper byte

 * byte 4 = sizeof TOC & 0xff ie lower byte

 TOC helpers */

 Check if GD-ROM */

 Not a GD-ROM so check if standard CD-ROM */

 Find the first data track */

 ie a real data track */

 spin up the disk */

 this function is required even if empty */

 read the sense key */

 default */

 check the sense key */

 reset the G1 bus */

/* keep the function looking like the universal

/* Get Sense SPI command

 * From Marcus Comstedt

 * cmd = 0x13

 * cmd + 4 = length of returned buffer

 * Returns 5 16 bit words

	/* even if something is pending try to get

 return addional sense data */

/* Implement DMA read using SPI command

 * 0 -> 0x30

 * 1 -> mode

 * 2 -> block >> 16

 * 3 -> block >> 8

 * 4 -> block

 * 8 -> sectors >> 16

 * 9 -> sectors >> 8

 * 10 -> sectors

 set for DMA */

 other registers */

 Wait for registers to reset after any previous activity */

 Wait for packet command to finish */

 Wait for any pending DMA to finish */

 start transfer */

 Print string identifying GD ROM device */

 query device ID */

 set the default mode for DMA transfer */

	/* Memory protection setting for GDROM DMA

	* Bits 31 - 16 security: 0x8843

	* Bits 15 and 7 reserved (0)

	* Bits 14 - 8 start of transfer range in 1 MB blocks OR'ed with 0x80

	* Bits 6 - 0 end of transfer range in 1 MB blocks OR'ed with 0x80

	* (0x40 | 0x80) = start range at 0x0C000000

 DMA word setting */

 using DMA so memory will need to be contiguous */

 set a large max size to get most from DMA */

/*

 * register this as a block device and as compliant with the

 * universal CD Rom driver interface

	/*

	 * Ensure our "one" device is initialized properly in case of previous

	 * usages of it

 Start the device */

 Print out firmware ID */

 Register GDROM */

 Specify basic properties of drive */

 latch on to the interrupt */

/* linux/drivers/cdrom/cdrom.c

   Copyright (c) 1996, 1997 David A. van Leeuwen.

   Copyright (c) 1997, 1998 Erik Andersen <andersee@debian.org>

   Copyright (c) 1998, 1999 Jens Axboe <axboe@image.dk>



   May be copied or modified under the terms of the GNU General Public

   License.  See linux/COPYING for more information.



   Uniform CD-ROM driver for Linux.

   See Documentation/cdrom/cdrom-standard.rst for usage information.



   The routines in the file provide a uniform interface between the

   software that uses CD-ROMs and the various low-level drivers that

   actually talk to the hardware. Suggestions are welcome.

   Patches that work are more welcome though.  ;-)



 To Do List:

 ----------------------------------



 -- Modify sysctl/proc interface. I plan on having one directory per

 drive, with entries for outputing general drive information, and sysctl

 based tunable parameters such as whether the tray should auto-close for

 that drive. Suggestions (or patches) for this welcome!





 Revision History

 ----------------------------------

 1.00  Date Unknown -- David van Leeuwen <david@tm.tno.nl>

 -- Initial version by David A. van Leeuwen. I don't have a detailed

  changelog for the 1.x series, David?



2.00  Dec  2, 1997 -- Erik Andersen <andersee@debian.org>

  -- New maintainer! As David A. van Leeuwen has been too busy to actively

  maintain and improve this driver, I am now carrying on the torch. If

  you have a problem with this driver, please feel free to contact me.



  -- Added (rudimentary) sysctl interface. I realize this is really weak

  right now, and is _very_ badly implemented. It will be improved...



  -- Modified CDROM_DISC_STATUS so that it is now incorporated into

  the Uniform CD-ROM driver via the cdrom_count_tracks function.

  The cdrom_count_tracks function helps resolve some of the false

  assumptions of the CDROM_DISC_STATUS ioctl, and is also used to check

  for the correct media type when mounting or playing audio from a CD.



  -- Remove the calls to verify_area and only use the copy_from_user and

  copy_to_user stuff, since these calls now provide their own memory

  checking with the 2.1.x kernels.



  -- Major update to return codes so that errors from low-level drivers

  are passed on through (thanks to Gerd Knorr for pointing out this

  problem).



  -- Made it so if a function isn't implemented in a low-level driver,

  ENOSYS is now returned instead of EINVAL.



  -- Simplified some complex logic so that the source code is easier to read.



  -- Other stuff I probably forgot to mention (lots of changes).



2.01 to 2.11 Dec 1997-Jan 1998

  -- TO-DO!  Write changelogs for 2.01 to 2.12.



2.12  Jan  24, 1998 -- Erik Andersen <andersee@debian.org>

  -- Fixed a bug in the IOCTL_IN and IOCTL_OUT macros.  It turns out that

  copy_*_user does not return EFAULT on error, but instead returns the number 

  of bytes not copied.  I was returning whatever non-zero stuff came back from 

  the copy_*_user functions directly, which would result in strange errors.



2.13  July 17, 1998 -- Erik Andersen <andersee@debian.org>

  -- Fixed a bug in CDROM_SELECT_SPEED where you couldn't lower the speed

  of the drive.  Thanks to Tobias Ringstr|m <tori@prosolvia.se> for pointing

  this out and providing a simple fix.

  -- Fixed the procfs-unload-module bug with the fill_inode procfs callback.

  thanks to Andrea Arcangeli

  -- Fixed it so that the /proc entry now also shows up when cdrom is

  compiled into the kernel.  Before it only worked when loaded as a module.



  2.14 August 17, 1998 -- Erik Andersen <andersee@debian.org>

  -- Fixed a bug in cdrom_media_changed and handling of reporting that

  the media had changed for devices that _don't_ implement media_changed.  

  Thanks to Grant R. Guenther <grant@torque.net> for spotting this bug.

  -- Made a few things more pedanticly correct.



2.50 Oct 19, 1998 - Jens Axboe <axboe@image.dk>

  -- New maintainers! Erik was too busy to continue the work on the driver,

  so now Chris Zwilling <chris@cloudnet.com> and Jens Axboe <axboe@image.dk>

  will do their best to follow in his footsteps

  

  2.51 Dec 20, 1998 - Jens Axboe <axboe@image.dk>

  -- Check if drive is capable of doing what we ask before blindly changing

  cdi->options in various ioctl.

  -- Added version to proc entry.

  

  2.52 Jan 16, 1999 - Jens Axboe <axboe@image.dk>

  -- Fixed an error in open_for_data where we would sometimes not return

  the correct error value. Thanks Huba Gaspar <huba@softcell.hu>.

  -- Fixed module usage count - usage was based on /proc/sys/dev

  instead of /proc/sys/dev/cdrom. This could lead to an oops when other

  modules had entries in dev. Feb 02 - real bug was in sysctl.c where

  dev would be removed even though it was used. cdrom.c just illuminated

  that bug.

  

  2.53 Feb 22, 1999 - Jens Axboe <axboe@image.dk>

  -- Fixup of several ioctl calls, in particular CDROM_SET_OPTIONS has

  been "rewritten" because capabilities and options aren't in sync. They

  should be...

  -- Added CDROM_LOCKDOOR ioctl. Locks the door and keeps it that way.

  -- Added CDROM_RESET ioctl.

  -- Added CDROM_DEBUG ioctl. Enable debug messages on-the-fly.

  -- Added CDROM_GET_CAPABILITY ioctl. This relieves userspace programs

  from parsing /proc/sys/dev/cdrom/info.

  

  2.54 Mar 15, 1999 - Jens Axboe <axboe@image.dk>

  -- Check capability mask from low level driver when counting tracks as

  per suggestion from Corey J. Scotts <cstotts@blue.weeg.uiowa.edu>.

  

  2.55 Apr 25, 1999 - Jens Axboe <axboe@image.dk>

  -- autoclose was mistakenly checked against CDC_OPEN_TRAY instead of

  CDC_CLOSE_TRAY.

  -- proc info didn't mask against capabilities mask.

  

  3.00 Aug 5, 1999 - Jens Axboe <axboe@image.dk>

  -- Unified audio ioctl handling across CD-ROM drivers. A lot of the

  code was duplicated before. Drives that support the generic packet

  interface are now being fed packets from here instead.

  -- First attempt at adding support for MMC2 commands - for DVD and

  CD-R(W) drives. Only the DVD parts are in now - the interface used is

  the same as for the audio ioctls.

  -- ioctl cleanups. if a drive couldn't play audio, it didn't get

  a change to perform device specific ioctls as well.

  -- Defined CDROM_CAN(CDC_XXX) for checking the capabilities.

  -- Put in sysctl files for autoclose, autoeject, check_media, debug,

  and lock.

  -- /proc/sys/dev/cdrom/info has been updated to also contain info about

  CD-Rx and DVD capabilities.

  -- Now default to checking media type.

  -- CDROM_SEND_PACKET ioctl added. The infrastructure was in place for

  doing this anyway, with the generic_packet addition.

  

  3.01 Aug 6, 1999 - Jens Axboe <axboe@image.dk>

  -- Fix up the sysctl handling so that the option flags get set

  correctly.

  -- Fix up ioctl handling so the device specific ones actually get

  called :).

  

  3.02 Aug 8, 1999 - Jens Axboe <axboe@image.dk>

  -- Fixed volume control on SCSI drives (or others with longer audio

  page).

  -- Fixed a couple of DVD minors. Thanks to Andrew T. Veliath

  <andrewtv@usa.net> for telling me and for having defined the various

  DVD structures and ioctls in the first place! He designed the original

  DVD patches for ide-cd and while I rearranged and unified them, the

  interface is still the same.

  

  3.03 Sep 1, 1999 - Jens Axboe <axboe@image.dk>

  -- Moved the rest of the audio ioctls from the CD-ROM drivers here. Only

  CDROMREADTOCENTRY and CDROMREADTOCHDR are left.

  -- Moved the CDROMREADxxx ioctls in here.

  -- Defined the cdrom_get_last_written and cdrom_get_next_block as ioctls

  and exported functions.

  -- Erik Andersen <andersen@xmission.com> modified all SCMD_ commands

  to now read GPCMD_ for the new generic packet interface. All low level

  drivers are updated as well.

  -- Various other cleanups.



  3.04 Sep 12, 1999 - Jens Axboe <axboe@image.dk>

  -- Fixed a couple of possible memory leaks (if an operation failed and

  we didn't free the buffer before returning the error).

  -- Integrated Uniform CD Changer handling from Richard Sharman

  <rsharman@pobox.com>.

  -- Defined CD_DVD and CD_CHANGER log levels.

  -- Fixed the CDROMREADxxx ioctls.

  -- CDROMPLAYTRKIND uses the GPCMD_PLAY_AUDIO_MSF command - too few

  drives supported it. We lose the index part, however.

  -- Small modifications to accommodate opens of /dev/hdc1, required

  for ide-cd to handle multisession discs.

  -- Export cdrom_mode_sense and cdrom_mode_select.

  -- init_cdrom_command() for setting up a cgc command.

  

  3.05 Oct 24, 1999 - Jens Axboe <axboe@image.dk>

  -- Changed the interface for CDROM_SEND_PACKET. Before it was virtually

  impossible to send the drive data in a sensible way.

  -- Lowered stack usage in mmc_ioctl(), dvd_read_disckey(), and

  dvd_read_manufact.

  -- Added setup of write mode for packet writing.

  -- Fixed CDDA ripping with cdda2wav - accept much larger requests of

  number of frames and split the reads in blocks of 8.



  3.06 Dec 13, 1999 - Jens Axboe <axboe@image.dk>

  -- Added support for changing the region of DVD drives.

  -- Added sense data to generic command.



  3.07 Feb 2, 2000 - Jens Axboe <axboe@suse.de>

  -- Do same "read header length" trick in cdrom_get_disc_info() as

  we do in cdrom_get_track_info() -- some drive don't obey specs and

  fail if they can't supply the full Mt Fuji size table.

  -- Deleted stuff related to setting up write modes. It has a different

  home now.

  -- Clear header length in mode_select unconditionally.

  -- Removed the register_disk() that was added, not needed here.



  3.08 May 1, 2000 - Jens Axboe <axboe@suse.de>

  -- Fix direction flag in setup_send_key and setup_report_key. This

  gave some SCSI adapters problems.

  -- Always return -EROFS for write opens

  -- Convert to module_init/module_exit style init and remove some

  of the #ifdef MODULE stuff

  -- Fix several dvd errors - DVD_LU_SEND_ASF should pass agid,

  DVD_HOST_SEND_RPC_STATE did not set buffer size in cdb, and

  dvd_do_auth passed uninitialized data to drive because init_cdrom_command

  did not clear a 0 sized buffer.

  

  3.09 May 12, 2000 - Jens Axboe <axboe@suse.de>

  -- Fix Video-CD on SCSI drives that don't support READ_CD command. In

  that case switch block size and issue plain READ_10 again, then switch

  back.



  3.10 Jun 10, 2000 - Jens Axboe <axboe@suse.de>

  -- Fix volume control on CD's - old SCSI-II drives now use their own

  code, as doing MODE6 stuff in here is really not my intention.

  -- Use READ_DISC_INFO for more reliable end-of-disc.



  3.11 Jun 12, 2000 - Jens Axboe <axboe@suse.de>

  -- Fix bug in getting rpc phase 2 region info.

  -- Reinstate "correct" CDROMPLAYTRKIND



   3.12 Oct 18, 2000 - Jens Axboe <axboe@suse.de>

  -- Use quiet bit on packet commands not known to work



   3.20 Dec 17, 2003 - Jens Axboe <axboe@suse.de>

  -- Various fixes and lots of cleanups not listed :-)

  -- Locking fixes

  -- Mt Rainier support

  -- DVD-RAM write open fixes



  Nov 5 2001, Aug 8 2002. Modified by Andy Polyakov

  <appro@fy.chalmers.se> to support MMC-3 compliant DVD+RW units.



  Modified by Nigel Kukard <nkukard@lbsd.net> - support DVD+RW

  2.4.x patch by Andy Polyakov <appro@fy.chalmers.se>



/* I use an error-log mask to give fine grain control over the type of

 Define this to remove _all_ the debugging messages */

 #define ERRLOGMASK CD_NOTHING */

 #define ERRLOGMASK (CD_WARNING|CD_OPEN|CD_COUNT_TRACKS|CD_CLOSE) */

 #define ERRLOGMASK (CD_WARNING|CD_REG_UNREG|CD_DO_IOCTL|CD_OPEN|CD_CLOSE|CD_COUNT_TRACKS) */

 used to tell the module to turn on full debugging messages */

 default compatibility mode */

 will we ever get to use this... sigh. */

 automatically restart mrw format */

/* The (cdo->capability & ~cdi->mask & CDC_XXX) construct was used in

/*

 * Another popular OS uses 7 seconds as the hard timeout for default

 * commands, so it is a good choice for us as well.

 Not-exported routines. */

 set media changed bits, on both queues */

 requires CD R/RW */

 set up command and get the disc info */

	/* not all drives have the same disc_info length, so requeue

	 * packet with the length the drive tells us it can supply

 return actual fill size */

/* This macro makes sure we don't have to check on cdrom_device_ops

 * existence in the run-time routines below. Change_capability is a

 * hack to have the capability flags defined const, while we can still

 * change it here without gcc complaining at every line.

/*

 * the first prototypes used 0x2c as the page code for the mrw mode page,

 * subsequently this was changed to 0x03. probe the one used by this drive

	/*

	 * FmtData bit set (bit 4), format type is 1

	/*

	 * 4 byte format list header, 8 byte format list descriptor

	/*

	 * nr_blocks field

	/*

	 * Session = 1, Track = 0

 IMMED */

 media event */

 often 0x46 */

 often 0x0020 */

 often 0x18 */

/*

 * FIXME: check RO bit

	/*

	 * allow writable open if media info read worked and media is

	 * erasable, _or_ if it fails since not all drives support it

	/*

	 * always reset to DMA lba space on open

	/*

	 * mrw_status

	 * 0	-	not MRW formatted

	 * 1	-	MRW bgformat started, but not running or complete

	 * 2	-	MRW bgformat in progress

	 * 3	-	MRW formatting complete

	/*

	 * obtain write protect information as per

	 * drivers/scsi/sd.c:sd_read_write_protect_flag

 drive gave us no info, let the user go ahead */

 Starting Feature Number */

 Allocation Length */

 DVD-RAM	*/

 DVD+RW	*/

 BD-RE	*/

/*

 * returns 0 for ok to open write, non-0 to disallow

 Close session */

 badly broken, I know. Is due for a fixup anytime. */

 Grab the TOC header so we can see how many tracks there are */

 check what type of tracks are on this disc */

	/* Check if the driver can report drive status.  If it can, we

 can/may i close it? */

					/* Ignore the error from the low

					level driver.  We don't care why it

					couldn't close the tray.  We only care 

					that there is no disc in the drive, 

 Ok, the door should be closed now.. Check again */

 the door should be closed now, check for the disc */

	/* CD-Players which don't use O_NONBLOCK, workman

		    /* give people a warning shot, now that CDO_CHECK_TYPE

 all seems well, we can open the device */

 open for data */

	/* After all this careful checking, we shouldn't have problems

	   opening the device, but we don't want the device locked if 

	/* Something failed.  Try to unlock the drive, because some drivers

	(notably ide-cd) lock the drive after every command.  This produced

	a nasty bug where after mount failed, the drive would remain locked!  

	This ensures that the drive gets unlocked after a mount fails.  This 

/* We use the open-option O_NONBLOCK to indicate that the

 * purpose of opening is only for subsequent ioctl() calls; no device

 * integrity checks are performed.

 *

 * We hope that all cd-player programs will adopt this convention. It

 * is in their own interest: device control becomes a lot easier

 * this way.

	/* if this was a O_NONBLOCK open and we should honor the flags,

/* This code is similar to that in open_for_data. The routine is called

   whenever an audio play operation is requested.

 can/may i close it? */

					/* Ignore the error from the low

					level driver.  We don't care why it

					couldn't close the tray.  We only care 

					that there is no disc in the drive, 

 Ok, the door should be closed now.. Check again */

	/*

	 * flush cache on last write release

 last process that closes dev*/

	/*

	 * Sanyo changer isn't spec compliant (doesn't use regular change

	 * LOAD_UNLOAD command, and it doesn't implement the mech status

	 * command below

/* Return the number of slots for an ATAPI/SCSI cdrom, 

 * return 1 if not a changer. 

 cdrom_read_mech_status requires a valid value for capacity: */

 If SLOT < 0, unload the current slot.  Otherwise, try to load SLOT. */

	/* The Sanyo 3 CD changer uses byte 7 of the 

	GPCMD_TEST_UNIT_READY to command to switch CDs instead of

	/* Specifying CDSL_CURRENT will attempt to load the currnet slot,

	which is useful if it had been previously unloaded.

	Whether it can or not, it returns the current slot. 

	Similarly,  if slot happens to be the current one, we still

 set media changed bits on both queues */

/*

 * As cdrom implements an extra ioctl consumer for media changed

 * event, it needs to buffer ->check_events() output, such that event

 * is not lost for both the usual VFS and ioctl paths.

 * cdi->{vfs|ioctl}_events are used to buffer pending events for each

 * path.

 *

 * XXX: Locking is non-existent.  cdi->ops->check_events() can be

 * called in parallel and buffering fields are accessed without any

 * exclusion.  The original media_changed code had the same problem.

 * It might be better to simply deprecate CDROM_MEDIA_CHANGED ioctl

 * and remove this cruft altogether.  It doesn't have much usefulness

 * at this point.

/* We want to make media_changed accessible to the user through an

 * ioctl. The main problem now is that we must double-buffer the

 * low-level implementation, to assure that the VFS and the user both

 * see a medium change once.

 changed since last call? */

 shouldn't be called from VFS path */

 clear bit */

/* Requests to the low-level drivers will /always/ be done in the

   following format convention:



   CDROM_LBA: all data-related requests.

   CDROM_MSF: all audio-related requests.



   However, a low-level implementation is allowed to refuse this

   request, and return information in its own favorite format.



   It doesn't make sense /at all/ to ask for a play_audio in LBA

   format, or ask for multi-session info in MSF format. However, for

   backward compatibility these format requests will be satisfied, but

   the requests to the low-level drivers will be sanitized in the more

   meaningful format indicated above.

 nothing to be done! */

 CDROM_MSF */

 DVD handling */

 LU data send */

 Returning data, let host change state */

 Returning data, let host change state */

 Returning data, let host change state */

 Post-auth key */

 Returning data, let host change state */

 LU data receive (LU changes state) */

 Misc */

 Get region settings */

 Set region settings */

	/*

	 * refrain from reporting errors on non-existing layers (mainly)

	/*

	 * place the data... really ugly, but at least we won't have to

	 * worry about endianess in userspace.

 PF */

 MSF or LBA addressing */

 request subQ data */

/*

 * Specific READ_10 interface

 very generic interface for reading the various types of blocks */

 expected sector size - cdda,mode1,etc. */

 starting address */

 number of blocks */

 set the header info returned */

	/*

	 * start with will ra.nframes size, back down if alloc fails

	/*

	 * for anything else than success and io error, we need to retry

	/*

	 * I've seen drives get sense 4/8/3 udma crc errors on multi

	 * frame dma, so drop to single frame dma if we need to

	/*

	 * so we have an io error of some sort with multi frame dma. if the

	 * condition wasn't a hardware error

	 * problems, not for any error

 cannot select disc or select current disc */

/*

 * Media change detection with timing information.

 *

 * arg is a pointer to a cdrom_timed_media_change_info struct.

 * arg->last_media_change may be set by calling code to signal

 * the timestamp (in ms) of the last known media change (by the caller).

 * Upon successful return, ioctl call will set arg->last_media_change

 * to the latest media change timestamp known by the kernel/driver

 * and set arg->has_changed to 1 if that timestamp is more recent

 * than the timestamp set by the caller.

	/*

	 * Options need to be in sync with capability.

	 * Too late for that, so we have to check each one separately.

 default is basically CDO_[AUTO_CLOSE|AUTO_EJECT] */

	/*

	 * ->select_disc is a hook to allow a driver-specific way of

	 * seleting disc.  However, since there is no equivalent hook for

	 * cdrom_slot_status this may not actually be useful...

	/*

	 * Don't unlock the door on multiple opens by default, but allow

	 * root to do so.

/*

 * The following function is implemented, although very few audio

 * discs give Universal Product Code information, which should just be

 * the Medium Catalog Number on the box.  Note, that the way the code

 * is written on the CD is /not/ uniform across all discs!

/*

 * Ok, this is where problems start.  The current interface for the

 * CDROM_DISC_STATUS ioctl is flawed.  It makes the false assumption that

 * CDs are all CDS_DATA_1 or all CDS_AUDIO, etc.  Unfortunately, while this

 * is often the case, it is also very common for CDs to have some tracks

 * with data, and some tracks with audio.  Just because I feel like it,

 * I declare the following to be the best way to cope.  If the CD has ANY

 * data tracks on it, it will be returned as a data CD.  If it has any XA

 * tracks, I will return it as that.  Now I could simplify this interface

 * by combining these  returns with the above, but this more clearly

 * demonstrates the problem with the current interface.  Too bad this

 * wasn't designed to use bitmasks...         -Erik

 *

 * Well, now we have the option CDS_MIXED: a mixed-type CD.

 * User level programmers might feel the ioctl is not very useful.

 *					---david

 Policy mode on */

 Policy mode off */

 cd_dbg(CD_DO_IOCTL,"entering CDROMSUBCHNL\n");*/

 local copy */

 cd_dbg(CD_DO_IOCTL, "CDROMSUBCHNL successful\n"); */

 cd_dbg(CD_DO_IOCTL, "entering CDROMREADTOCHDR\n"); */

 cd_dbg(CD_DO_IOCTL, "CDROMREADTOCHDR successful\n"); */

 make interface to low-level uniform */

/*

 * Required when we need to use READ_10 to issue other than 2048 block

 * reads

 return actual fill size */

/* return the last written block on the CD-R media. this is for the udf

 if unit didn't return msb, it's zeroed by cdrom_get_disc_info */

 if this track is blank, try the previous. */

 if last recorded field is valid, return it. */

 make it up instead */

	/* this is where we end up if the drive either can't do a

	   GPCMD_READ_DISC_INFO or GPCMD_READ_TRACK_RZONE_INFO or if

	   it doesn't give enough information or fails. then we return

 return the next writable block. also for udf file system. */

 if unit didn't return msb, it's zeroed by cdrom_get_disc_info */

 if this track is blank, try the previous. */

 if next recordable address field is valid, use it. */

 FIXME: we need upper bound checking, too!! */

		/*

		 * SCSI-II devices are not required to support

		 * READ_CD, so let's try switching block size

 FIXME: we need upper bound checking, too!! */

 local copy */

 cd_dbg(CD_DO_IOCTL, "CDROMSUBCHNL successful\n"); */

	/* originally the code depended on buffer[1] to determine

	   how much data is available for transfer. buffer[1] is

	   unfortunately ambigious and the only reliable way seem

 sanity check */

	/* now we have the current volume settings. if it was only

 get the volume mask */

 set volume */

	/* build a unified command and queue it through

/*

 * Just about every imaginable ioctl is supported in the Uniform layer

 * these days.

 * ATAPI / SCSI specific code now mainly resides in mmc_ioctl().

	/*

	 * Use the ioctls that are implemented through the generic_packet()

	 * interface. this may look at bit funny, but if -ENOTTY is

	 * returned that particular ioctl is not implemented and we

	 * let it go through the device specific ones.

	/*

	 * Note: most of the cd_dbg() calls are commented out here,

	 * because they fill up the sys log when CD players poll

	 * the drive.

 general info */

 close tray upon mount, etc */

 eject on umount */

 turn on debugging messages */

 lock the door on device open */

 check media type */

/* Unfortunately, per device settings are not implemented through

   procfs/sysctl yet. When they are, this will naturally disappear. For now

   just update all drives. Later this will become the template on which

 we only care for 1 or 0. */

		/* update the option flags according to the changes. we

		   don't have per device options through sysctl yet,

 Place files in /proc/sys/dev/cdrom */

 Make sure that /proc/sys/dev is there */

 set the defaults */

 CONFIG_SYSCTL */

 CONFIG_SYSCTL */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * DDR PHY Front End (DPFE) driver for Broadcom set top box SoCs

 *

 * Copyright (c) 2017 Broadcom

/*

 * This driver provides access to the DPFE interface of Broadcom STB SoCs.

 * The firmware running on the DCPU inside the DDR PHY can provide current

 * information about the system's RAM, for instance the DRAM refresh rate.

 * This can be used as an indirect indicator for the DRAM's temperature.

 * Slower refresh rate means cooler RAM, higher refresh rate means hotter

 * RAM.

 *

 * Throughout the driver, we use readl_relaxed() and writel_relaxed(), which

 * already contain the appropriate le32_to_cpu()/cpu_to_le32() calls.

 *

 * Note regarding the loading of the firmware image: we use be32_to_cpu()

 * and le_32_to_cpu(), so we can support the following four cases:

 *     - LE kernel + LE firmware image (the most common case)

 *     - LE kernel + BE firmware image

 *     - BE kernel + LE firmware image

 *     - BE kernel + BE firmware image

 *

 * The DPCU always runs in big endian mode. The firmware image, however, can

 * be in either format. Also, communication between host CPU and DCPU is

 * always in little endian.

 DCPU register offsets */

 Macros to process offsets returned by the DCPU */

 Message RAM */

 DRAM Info Offsets & Masks */

 We need to look at byte 3 */

 DRAM MR4 Offsets & Masks */

 Refresh rate */

 Self Refresh Abort */

 Post-package repair entry/exit */

 Thermal Offset; vendor specific */

 Temperature Update Flag */

 DRAM Vendor Offsets & Masks (API v2) */

 We need to look at byte 3 */

 DRAM Information Offsets & Masks (API v3) */

 Reset register bits & masks */

 DCPU return codes */

 This error code is not firmware defined and only used in the driver. */

 Firmware magic */

 Error codes */

 Message types */

 Max number of arguments */

 Last entry */

/*

 * Format of the binary firmware file:

 *

 *   entry

 *      0    header

 *              value:  0xfe0101fe  <== little endian

 *                      0xfe1010fe  <== big endian

 *      1    sequence:

 *              [31:16] total segments on this build

 *              [15:0]  this segment sequence.

 *      2    FW version

 *      3    IMEM byte size

 *      4    DMEM byte size

 *           IMEM

 *           DMEM

 *      last checksum ==> sum of everything

 Things we only need during initialization. */

 API version and corresponding commands */

 Things we need for as long as we are active. */

/*

 * Forward declaration of our sysfs attribute functions, so we can declare the

 * attribute data structures early.

/*

 * Declare our attributes early, so they can be referenced in the API data

 * structure. We need to do this, because the attributes depend on the API

 * version.

 API v2 sysfs attributes */

 API v3 sysfs attributes */

/*

 * Old API v2 firmware commands, as defined in the rev 0.61 specification, we

 * use a version set to 1 to denote that it is not compatible with the new API

 * v2 and onwards.

/*

 * API v2 firmware commands, as defined in the rev 0.8 specification, named new

 * v2 here

 We expect the firmware to have been downloaded! */

 API v3 firmware commands */

 We expect the firmware to have been downloaded! */

 There's no GET_VENDOR command in API v3. */

 Put DCPU in reset if it's running. */

 Clear mailbox registers. */

 Disable DCPU clock gating */

 Take DCPU out of reset */

 Don't include the last field in the checksum. */

 There is no need to use this function for API v3 or later. */

	/*

	 * msg_type == 1: the offset is relative to the message RAM

	 * msg_type == 0: the offset is relative to the data RAM (this is the

	 *                previous way of passing data)

	 * msg_type is anything else: there's critical hardware problem

	/*

	 * It depends on the API version which MBOX register we have to write to

	 * to signal we are done.

 Wait for DCPU to become ready */

 Compute checksum over the message */

 Write command and arguments to message area */

 Tell DCPU there is a command waiting */

 Wait for DCPU to process the command */

 Read response code */

 Read response data */

 Tell DCPU we are done */

 Verify response */

 Ensure that the firmware file loaded meets all the requirements. */

 Data and instruction sections are 32 bit words. */

	/*

	 * The header + the data section + the instruction section + the

	 * checksum must be equal to the total firmware size.

 The checksum comes at the very end. */

 Verify checksum by reading back the firmware from co-processor RAM. */

 Convert size to 32-bit words. */

 It is recommended to clear the firmware area first. */

 Now copy it. */

	/*

	 * Skip downloading the firmware if the DCPU is already running and

	 * responding to commands.

	/*

	 * If the firmware filename is NULL it means the boot firmware has to

	 * download the DCPU firmware for us. If that didn't work, we have to

	 * bail, since downloading it ourselves wouldn't work either.

	/*

	 * Defer the firmware download if the firmware file couldn't be found.

	 * The root file system may not be available yet.

 At the beginning of the firmware blob is a header. */

 Void pointer to the beginning of the actual firmware. */

 IMEM comes right after the header. */

 DMEM follows after IMEM. */

		/*

		 * It should be impossible to end up here, but to be safe we

		 * check anyway.

 Use legacy API v2 for a select number of chips */

 API v3 is the default going forward */

 SPDX-License-Identifier: GPL-2.0

/*

 * Memory controller driver for ARM PrimeCell PL172

 * PrimeCell MultiPort Memory Controller (PL172)

 *

 * Copyright (C) 2015 Joachim Eastwood <manabian@gmail.com>

 *

 * Based on:

 * TI AEMIF driver, Copyright (C) 2010 - 2013 Texas Instruments Inc.

 Maximum number of static chip selects */

 MPMC static memory configuration */

 MPMC static memory timing */

	/*

	 * Loop through each child node, which represent a chip select, and

	 * configure parameters and timing. If successful; populate devices

	 * under that node.

  PrimeCell MPMC PL172, EMC found on NXP LPC18xx and LPC43xx */

 PrimeCell MPMC PL175, EMC found on NXP LPC32xx */

 PrimeCell MPMC PL176 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * TI AM33XX SRAM EMIF Driver

 *

 * Copyright (C) 2016-2017 Texas Instruments Inc.

 *	Dave Gerlach

 Save physical address to calculate resume offset during pm init */

 Get sram pool for data section and allocate space */

 Save physical address to calculate resume offset during pm init */

	/*

	 * These functions are called during suspend path while MMU is

	 * still on so add virtual base to offset for absolute address

	/*

	 * These are called during resume path when MMU is not enabled

	 * so physical address is used instead

/*

 * Due to Usage Note 3.1.2 "DDR3: JEDEC Compliance for Maximum

 * Self-Refresh Command Limit" found in AM335x Silicon Errata

 * (Document SPRZ360F Revised November 2013) we must configure

 * the self refresh delay timer to 0xA (8192 cycles) to avoid

 * generating too many refresh command from the EMIF.

/**

 * ti_emif_copy_pm_function_table - copy mapping of pm funcs in sram

 * @sram_pool: pointer to struct gen_pool where dst resides

 * @dst: void * to address that table should be copied

 *

 * Returns 0 if success other error code if table is not available

/**

 * ti_emif_get_mem_type - return type for memory type in use

 *

 * Returns memory type value read from EMIF or error code if fails

	/*

	 * Check to see if what we are copying is already present in the

	 * first byte at the destination, only copy if it is not which

	 * indicates we have lost context and sram no longer contains

	 * the PM code

	/*

	 * The contents will be present in DDR hence no need to

	 * explicitly save

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) STMicroelectronics 2020

 FMC2 Controller Registers */

 Register: FMC2_BCR1 */

 Register: FMC2_BCRx */

 Register: FMC2_BTRx/FMC2_BWTRx */

 Register: FMC2_PCSCNTR */

/*

 * struct stm32_fmc2_prop - STM32 FMC2 EBI property

 * @name: the device tree binding name of the property

 * @bprop: indicate that it is a boolean property

 * @mprop: indicate that it is a mandatory property

 * @reg_type: the register that have to be modified

 * @reg_mask: the bit that have to be modified in the selected register

 *            in case of it is a boolean property

 * @reset_val: the default value that have to be set in case the property

 *             has not been defined in the device tree

 * @check: this callback ckecks that the property is compliant with the

 *         transaction type selected

 * @calculate: this callback is called to calculate for exemple a timing

 *             set in nanoseconds in the device tree in clock cycles or in

 *             clock period

 * @set: this callback applies the values in the registers

		/*

		 * MUXEN = 0, MTYP = 0, FACCEN = 0, BURSTEN = 0, WAITEN = 0,

		 * WREN = 1, EXTMOD = 0, CBURSTRW = 0, ACCMOD = 0

		/*

		 * MUXEN = 0, MTYP = 1, FACCEN = 0, BURSTEN = 0, WAITEN = 0,

		 * WREN = 1, EXTMOD = 0, CBURSTRW = 0, ACCMOD = 0

		/*

		 * MUXEN = 0, MTYP = 0, FACCEN = 0, BURSTEN = 0, WAITEN = 0,

		 * WREN = 1, EXTMOD = 1, CBURSTRW = 0, ACCMOD = 0

		/*

		 * MUXEN = 0, MTYP = 1, FACCEN = 0, BURSTEN = 0, WAITEN = 0,

		 * WREN = 1, EXTMOD = 1, CBURSTRW = 0, ACCMOD = 0

		/*

		 * MUXEN = 0, MTYP = 2, FACCEN = 1, BURSTEN = 0, WAITEN = 0,

		 * WREN = 1, EXTMOD = 0, CBURSTRW = 0, ACCMOD = 0

		/*

		 * MUXEN = 0, MTYP = 2, FACCEN = 1, BURSTEN = 0, WAITEN = 0,

		 * WREN = 1, EXTMOD = 1, CBURSTRW = 0, ACCMOD = 1

		/*

		 * MUXEN = 0, MTYP = 2, FACCEN = 1, BURSTEN = 0, WAITEN = 0,

		 * WREN = 1, EXTMOD = 1, CBURSTRW = 0, ACCMOD = 2

		/*

		 * MUXEN = 0, MTYP = 2, FACCEN = 1, BURSTEN = 0, WAITEN = 0,

		 * WREN = 1, EXTMOD = 1, CBURSTRW = 0, ACCMOD = 3

		/*

		 * MUXEN = 0, MTYP = 1, FACCEN = 0, BURSTEN = 1, WAITEN = 0,

		 * WREN = 1, EXTMOD = 0, CBURSTRW = 1, ACCMOD = 0

		/*

		 * MUXEN = 0, MTYP = 1, FACCEN = 0, BURSTEN = 1, WAITEN = 0,

		 * WREN = 1, EXTMOD = 0, CBURSTRW = 0, ACCMOD = 0

		/*

		 * MUXEN = 0, MTYP = 2, FACCEN = 1, BURSTEN = 1, WAITEN = 0,

		 * WREN = 1, EXTMOD = 0, CBURSTRW = 1, ACCMOD = 0

		/*

		 * MUXEN = 0, MTYP = 2, FACCEN = 1, BURSTEN = 1, WAITEN = 0,

		 * WREN = 1, EXTMOD = 0, CBURSTRW = 0, ACCMOD = 0

 Type of transaction not supported */

 Buswidth not supported */

 Cpsize not supported */

 Enable counter for the bank */

 Keep current counter value */

 st,fmc2-ebi-cs-trans-type must be the first property */

 Skeep this property */

 NWAIT signal can not be connected to EBI controller and NAND controller */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015-2016 MediaTek Inc.

 * Author: Yong Wu <yong.wu@mediatek.com>

 SMI COMMON */

 All are MMU0 defaultly. Only specialize mmu1 here. */

 SMI LARB */

 Below are about mmu enable registers, they are different in SoCs */

 gen1: mt2701 */

 every register control 8 port, register offset 0x4 */

/*

 * every port have 4 bit to control, bit[port + 3] control virtual or physical,

 * bit[port + 2 : port + 1] control the domain, bit[port] control the security

 * or non-security.

 mt2701 domain should be set to 3 */

 gen2: */

 mt8167 */

 mt8173 */

 general */

 gen2 smi common */

 gen2 smi sub common */

 larbs: Require apb/smi clocks while gals is optional. */

/*

 * common: Require these four clocks in has_gals case. Otherwise, only apb/smi are required.

 * sub common: Require apb/smi/gals0 clocks in has_gals case. Otherwise, only apb/smi are required.

 Balance some larbs to enter mmu0 or mmu1 */

only needed by mt2701*/

 only for gen1 */

 only for gen2 */

 for sub common */

 larb: local arbiter */

 common or sub-common dev */

 Do nothing as the iommu is always enabled. */

 bit[port + 3] controls the virtual or physical */

 do not need to enable m4u for this port */

 larb0 */

 larb1 */

 ... */

 bdpsys */

 DUMMY | IPU0 | IPU1 | CCU | MDLA */

 mt8167 do not need the port in larb */

 mt8173 do not need the port in larb */

 IPU0 | IPU1 | CCU */

 smi common is the supplier, Make sure it is ready before */

 Configure the basic setting for this larb */

	/*

	 * for mtk smi gen 1, we need to get the ao(always on) base to config

	 * m4u port, and we need to enable the aync clock for transform the smi

	 * clock into emi clock domain, but for mtk smi gen2, there's no smi ao

	 * base.

 link its smi-common if this is smi-sub-common */

 default is 0 */

 SPDX-License-Identifier: GPL-2.0

/*

 * ARM PL353 SMC driver

 *

 * Copyright (C) 2012 - 2018 Xilinx, Inc

 * Author: Punnaiah Choudary Kalluri <punnaiah@xilinx.com>

 * Author: Naga Sureshkumar Relli <nagasure@xilinx.com>

/**

 * struct pl353_smc_data - Private smc driver structure

 * @memclk:		Pointer to the peripheral clock

 * @aclk:		Pointer to the AXI peripheral clock

 Find compatible children. Only a single child is supported */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * JZ4780 NAND/external memory controller (NEMC)

 *

 * Copyright (c) 2015 Imagination Technologies

 * Author: Alex Smith <alex@alex-smith.me.uk>

/**

 * jz4780_nemc_num_banks() - count the number of banks referenced by a device

 * @dev: device to count banks for, must be a child of the NEMC.

 *

 * Return: The number of unique NEMC banks referred to by the specified NEMC

 * child device. Unique here means that a device that references the same bank

 * multiple times in its "reg" property will only count once.

/**

 * jz4780_nemc_set_type() - set the type of device connected to a bank

 * @dev: child device of the NEMC.

 * @bank: bank number to configure.

 * @type: type of device connected to the bank.

 TODO: Support toggle NAND devices. */

/**

 * jz4780_nemc_assert() - (de-)assert a NAND device's chip enable pin

 * @dev: child device of the NEMC.

 * @bank: bank number of device.

 * @assert: whether the chip enable pin should be asserted.

 *

 * (De-)asserts the chip enable pin for the NAND device connected to the

 * specified bank.

 Return in picoseconds. */

	/*

	 * Conversion of tBP and tAW cycle counts to values supported by the

	 * hardware (round up to the next supported value).

 11 - 12 -> 12 cycles */

 13 - 15 -> 15 cycles */

 16 - 20 -> 20 cycles */

 21 - 25 -> 25 cycles */

 26 - 31 -> 31 cycles */

			/*

			 * Earlier SoCs support a 16 bit bus width (the 4780

			 * does not), until those are properly supported, error.

	/*

	 * The driver currently only uses the registers up to offset

	 * NEMC_REG_LEN. Since the EFUSE registers are in the middle of the

	 * NEMC registers, we only request the registers we will use for now;

	 * that way the EFUSE driver can probe too.

	/*

	 * Iterate over child devices, check that they do not conflict with

	 * each other, and register child devices for them. If a child device

	 * has invalid properties, it is ignored and no platform device is

	 * registered for it.

 Will continue the outer loop below. */

 Configure bank parameters. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * TI AEMIF driver

 *

 * Copyright (C) 2010 - 2013 Texas Instruments Incorporated. http://www.ti.com/

 *

 * Authors:

 * Murali Karicheri <m-karicheri2@ti.com>

 * Ivan Khoronzhuk <ivan.khoronzhuk@ti.com>

/**

 * struct aemif_cs_data: structure to hold cs parameters

 * @cs: chip-select number

 * @wstrobe: write strobe width, ns

 * @rstrobe: read strobe width, ns

 * @wsetup: write setup width, ns

 * @whold: write hold width, ns

 * @rsetup: read setup width, ns

 * @rhold: read hold width, ns

 * @ta: minimum turn around time, ns

 * @enable_ss: enable/disable select strobe mode

 * @enable_ew: enable/disable extended wait mode

 * @asize: width of the asynchronous device's data bus

/**

 * struct aemif_device: structure to hold device data

 * @base: base address of AEMIF registers

 * @clk: source clock

 * @clk_rate: clock's rate in kHz

 * @num_cs: number of assigned chip-selects

 * @cs_offset: start number of cs nodes

 * @cs_data: array of chip-select settings

/**

 * aemif_calc_rate - calculate timing data.

 * @pdev: platform device to calculate for

 * @wanted: The cycle time needed in nanoseconds.

 * @clk: The input clock rate in kHz.

 * @max: The maximum divider value that can be programmed.

 *

 * On success, returns the calculated timing value minus 1 for easy

 * programming into AEMIF timing registers, else negative errno.

 It is generally OK to have a more relaxed timing than requested... */

 ... But configuring tighter timings is not an option. */

/**

 * aemif_config_abus - configure async bus parameters

 * @pdev: platform device to configure for

 * @csnum: aemif chip select number

 *

 * This function programs the given timing values (in real clock) into the

 * AEMIF registers taking the AEMIF clock into account.

 *

 * This function does not use any locking while programming the AEMIF

 * because it is expected that there is only one user of a given

 * chip-select.

 *

 * Returns 0 on success, else negative errno.

/**

 * aemif_get_hw_params - function to read hw register values

 * @pdev: platform device to read for

 * @csnum: aemif chip select number

 *

 * This function reads the defaults from the registers and update

 * the timing values. Required for get/set commands and also for

 * the case when driver needs to use defaults in hardware.

/**

 * of_aemif_parse_abus_config - parse CS configuration from DT

 * @pdev: platform device to parse for

 * @np: device node ptr

 *

 * This function update the emif async bus configuration based on the values

 * configured in a cs device binding node.

 read the current value in the hw register */

 override the values from device node */

		/*

		 * For every controller device node, there is a cs device node

		 * that describe the bus configuration parameters. This

		 * functions iterate over these nodes and update the cs data

		 * array.

	/*

	 * Create a child devices explicitly from here to guarantee that the

	 * child will be probed after the AEMIF timing parameters are set.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * GPMC support functions

 *

 * Copyright (C) 2005-2006 Nokia Corporation

 *

 * Author: Juha Yrjola

 *

 * Copyright (C) 2009 Texas Instruments

 * Added OMAP4 support - Santosh Shilimkar <santosh.shilimkar@ti.com>

 GPIO descriptor enum */

 GPMC register offsets */

 not available on OMAP2 */

 not available on OMAP2 */

 not available on OMAP2 */

 not available on OMAP2 */

 not available on OMAP2 */

 not available on OMAP2 */

 not available on OMAP2 */

 GPMC ECC control settings */

/*

 * The first 1MB of GPMC address space is typically mapped to

 * the internal ROM. Never allocate the first page, to

 * facilitate bug detection; even if we didn't boot from ROM.

 * As GPMC minimum partition size is 16MB we can only start from

 * there.

 16 MB */

 128 MB */

 Control Commands */

* CLKACTIVATIONTIME Max Ticks */

* ATTACHEDDEVICEPAGELENGTH Max Value */

* WAITMONITORINGTIME Max Ticks */

* DEVICESIZE Max Value */

 All CONFIG7 bits except reserved bits */

 ECC commands */

 Reset Hardware ECC for read */

 Reset Hardware ECC for write */

 Reset before syndrom is read back */

 number of NAND specific IRQs */

 Structure to save gpmc cs context */

/*

 * Structure to save/restore gpmc context

 * to support core off on OMAP3

 Define chip-selects as reserved by default until probe completes */

 TODO: Add support for gpmc_fck to clock framework and use it */

 In picoseconds */

/**

 * gpmc_get_clk_period - get period of selected clock domain in ps

 * @cs: Chip Select Region.

 * @cd: Clock Domain.

 *

 * GPMC_CS_CONFIG1 GPMCFCLKDIVIDER for cs has to be setup

 * prior to calling this function with GPMC_CD_CLK.

 get current clk divider */

 get GPMC_CLK period */

 Calculate in picosecs to yield more exact results */

 any CS */ 0, GPMC_CD_FCLK);

 Calculate in picosecs to yield more exact results */

 any CS */ 0, GPMC_CD_FCLK);

/**

 * get_gpmc_timing_reg - read a timing parameter and print DTS settings for it.

 * @cs:      Chip Select Region

 * @reg:     GPMC_CS_CONFIGn register offset.

 * @st_bit:  Start Bit

 * @end_bit: End Bit. Must be >= @st_bit.

 * @max:     Maximum parameter value (before optional @shift).

 *           If 0, maximum is as high as @st_bit and @end_bit allow.

 * @name:    DTS node name, w/o "gpmc,"

 * @cd:      Clock Domain of timing parameter.

 * @shift:   Parameter value left shifts @shift, which is then printed instead of value.

 * @raw:     Raw Format Option.

 *           raw format:  gpmc,name = <value>

 *           tick format: gpmc,name = <value> /&zwj;* x ns -- y ns; x ticks *&zwj;/

 *           Where x ns -- y ns result in the same tick value.

 *           When @max is exceeded, "invalid" is printed inside comment.

 * @noval:   Parameter values equal to 0 are not printed.

 * @return:  Specified timing parameter (after optional @shift).

 *

 timing specifiers */

 value transform */

 format specifiers */

 DTS tick format for timings in ns */

 %u ns - %u ns; %i ticks%s*/\n",

 raw format */

 invalid */" : "");

/*

 * Note that gpmc,wait-pin handing wrongly assumes bit 8 is available,

 * see commit c9fb809.

/**

 * set_gpmc_timing_reg - set a single timing parameter for Chip Select Region.

 * Caller is expected to have initialized CONFIG1 GPMCFCLKDIVIDER

 * prior to calling this function with @cd equal to GPMC_CD_CLK.

 *

 * @cs:      Chip Select Region.

 * @reg:     GPMC_CS_CONFIGn register offset.

 * @st_bit:  Start Bit

 * @end_bit: End Bit. Must be >= @st_bit.

 * @max:     Maximum parameter value.

 *           If 0, maximum is as high as @st_bit and @end_bit allow.

 * @time:    Timing parameter in ns.

 * @cd:      Timing parameter clock domain.

 * @name:    Timing parameter name.

 * @return:  0 on success, -1 on error.

/**

 * gpmc_calc_waitmonitoring_divider - calculate proper GPMCFCLKDIVIDER based on WAITMONITORINGTIME

 * WAITMONITORINGTIME will be _at least_ as long as desired, i.e.

 * read  --> don't sample bus too early

 * write --> data is longer on bus

 *

 * Formula:

 * gpmc_clk_div + 1 = ceil(ceil(waitmonitoringtime_ns / gpmc_fclk_ns)

 *                    / waitmonitoring_ticks)

 * WAITMONITORINGTIME resulting in 0 or 1 tick with div = 1 are caught by

 * div <= 0 check.

 *

 * @wait_monitoring: WAITMONITORINGTIME in ns.

 * @return:          -1 on failure to scale, else proper divider > 0.

/**

 * gpmc_calc_divider - calculate GPMC_FCLK divider for sync_clk GPMC_CLK period.

 * @sync_clk: GPMC_CLK period in ps.

 * @return:   Returns at least 1 if GPMC_FCLK can be divided to GPMC_CLK.

 *            Else, returns -1.

/**

 * gpmc_cs_set_timings - program timing parameters for Chip Select Region.

 * @cs:     Chip Select Region.

 * @t:      GPMC timing parameters.

 * @s:      GPMC timing settings.

 * @return: 0 on success, -1 on error.

	/*

	 * See if we need to change the divider for waitmonitoringtime.

	 *

	 * Calculate GPMCFCLKDIVIDER independent of gpmc,sync-clk-ps in DT for

	 * pure asynchronous accesses, i.e. both read and write asynchronous.

	 * However, only do so if WAITMONITORINGTIME is actually used, i.e.

	 * either WAITREADMONITORING or WAITWRITEMONITORING is set.

	 *

	 * This statement must not change div to scale async WAITMONITORINGTIME

	 * to protect mixed synchronous and asynchronous accesses.

	 *

	 * We raise an error later if WAITMONITORINGTIME does not fit.

	/*

	 * Ensure that base address is aligned on a

	 * boundary equal to or greater than size.

 Disable CS while changing base address and size mask */

 Enable CS */

/**

 * gpmc_configure - write request to configure gpmc

 * @cmd: command type

 * @wval: value to write

 * @return status of the operation

 WP is ON */

 WP is OFF */

/**

 * gpmc_omap_get_nand_ops - Get the GPMC NAND interface

 * @reg: the GPMC NAND register map exclusive for NAND use.

 * @cs: GPMC chip select number on which the NAND sits. The

 *      register map returned will be specific to this chip select.

 *

 * Returns NULL on error e.g. invalid cs.

 max of t_cez, t_oez */

 104 MHz */

 83 MHz */

 66 MHz */

 54 MHz */

 Set synchronous read timings */

 we restrict this to NAND IRQs only */

 bits GPMC_NR_NAND_IRQS to 8 are reserved */

 NAND IRQs polarity is not configurable */

 WAITPIN starts at BIT 8 */

 skip reserved bits */

 Setting bit to 1 clears (or Acks) the interrupt */

 can't set type for NAND IRQs */

 We can support either rising or falling edge at a time */

 skip reserved status bits */

 Disable interrupts */

 clear interrupts */

 Reserve all regions that has been set up by bootloader */

 XXX: can the cycles be avoided ? */

 adv_rd_off */

 XXX: mux check required ? */

		/* XXX: t_avdp not to be required for sync, only added for tusb

		 * this indirectly necessitates requirement of t_avdp_r and

		 * t_avdp_w instead of having a single t_avdp

 oe_on */

 XXX: remove this ? */

 access */

	/* XXX: any scope for improvement ?, by combining oe_on

	 * and clk_activation, need to check whether

	 * access = clk_activation + round to sync clk ?

 rd_cycle */

 XXX: barter t_ce_rdyz with t_cez_r ? */

 adv_wr_off */

 wr_data_mux_bus */

	/* XXX: shouldn't mux be kept as a whole for wr_data_mux_bus ?,

	 * and in that case remember to handle we_on properly

 we_on */

 wr_access */

 XXX: gpmc_capability check reqd ? , even if not, will not harm */

 we_off */

 wr_cycle */

 XXX: barter t_ce_rdyz with t_cez_w ? */

 adv_rd_off */

 oe_on */

 access */

 XXX: remove t_iaa in async ? */

 rd_cycle */

 adv_wr_off */

 wr_data_mux_bus */

 we_on */

 we_off */

 wr_cycle */

 cs_on */

 adv_on */

/*

 * TODO: remove this function once all peripherals are confirmed to

 * work with generic timing. Simultaneously gpmc_cs_set_timings()

 * has to be modified to handle timings in ps instead of ns

 TODO: remove, see function definition */

/**

 * gpmc_cs_program_settings - programs non-timing related settings

 * @cs:		GPMC chip-select to program

 * @p:		pointer to GPMC settings structure

 *

 * Programs non-timing related settings for a GPMC chip-select, such as

 * bus-width, burst configuration, etc. Function should be called once

 * for each chip-select that is being used and must be called before

 * calling gpmc_cs_set_timings() as timing parameters in the CONFIG1

 * register will be initialised to zero by this function. Returns 0 on

 * success and appropriate negative error code on failure.

 Address-data multiplexing not supported for NAND devices */

 Page/burst mode supports lengths of 4, 8 and 16 bytes */

 omap3430 & omap3630 */

 omap4430 & omap4460 & omap543x */

 am335x devices */

/**

 * gpmc_cs_remap - remaps a chip-select physical base address

 * @cs:		chip-select to remap

 * @base:	physical base address to re-map chip-select to

 *

 * Re-maps a chip-select to a new physical base address specified by

 * "base". Returns 0 on success and appropriate negative error code

 * on failure.

	/*

	 * Make sure we ignore any device offsets from the GPMC partition

	 * allocated for the chip select and that the new base confirms

	 * to the GPMC 16MB minimum granularity.

/**

 * gpmc_read_settings_dt - read gpmc settings from device-tree

 * @np:		pointer to device-tree node for a gpmc child device

 * @p:		pointer to gpmc settings structure

 *

 * Reads the GPMC settings for a GPMC child device from device-tree and

 * stores them in the GPMC settings structure passed. The GPMC settings

 * structure is initialised to zero by this function and so any

 * previously stored settings will be cleared.

 minimum clock period for syncronous mode */

 chip select timtings */

 ADV signal timings */

 WE signal timings */

 OE signal timings */

 access and cycle timings */

 only applicable to OMAP3+ */

 bool timing parameters */

/**

 * gpmc_probe_generic_child - configures the gpmc for a child device

 * @pdev:	pointer to gpmc platform device

 * @child:	pointer to device-tree node for child device

 *

 * Allocates and configures a GPMC chip-select for a child device.

 * Returns 0 on success and appropriate negative error code on failure.

	/*

	 * Check if we have multiple instances of the same device

	 * on a single chip select. If so, use the already initialized

	 * timings.

	/*

	 * For some GPMC devices we still need to rely on the bootloader

	 * timings because the devices can be connected via FPGA.

	 * REVISIT: Add timing support from slls644g.pdf.

 CS must be disabled while making changes to gpmc configuration */

	/*

	 * FIXME: gpmc_cs_request() will map the CS to an arbitrary

	 * location in the gpmc address space. When booting with

	 * device-tree we want the NOR flash to be mapped to the

	 * location specified in the device-tree blob. So remap the

	 * CS to this location. Once DT migration is complete should

	 * just make gpmc_cs_request() map a specific address.

 Warn about older DT blobs with no compatible property */

 Warn about older DT blobs with no compatible property */

 NAND specific setup */

 disable write protect */

 Reserve wait pin if it is required and valid */

 Clear limited address i.e. enable A26-A11 */

 Enable CS region */

 create platform device, NULL on error or when disabled */

 is child a common bus? */

 create children and other common bus children */

 CONFIG_OF */

 we're input only */

 we're input only */

 we're input only */

 No need to restore context */

	/*

	 * FIXME: Once device-tree migration is complete the below flags

	 * should be populated based upon the device-tree compatible

	 * string. For now just use the IP revision. OMAP3+ devices have

	 * the wr_access and wr_data_mux_bus register fields. OMAP4+

	 * devices support the addr-addr-data multiplex protocol.

	 *

	 * GPMC IP revisions:

	 * - OMAP24xx			= 2.0

	 * - OMAP3xxx			= 5.0

	 * - OMAP44xx/54xx/AM335x	= 6.0

 SPDX-License-Identifier: GPL-2.0

/*

 * EBI driver for Atmel chips

 * inspired by the fsl weim bus driver

 *

 * Copyright (C) 2013 Jean-Jacques Hiblot <jjhiblot@traphandler.com>

		/*

		 * Attach the EBI device to the generic SMC logic if at least

		 * one "atmel,smc-" property is present.

 sentinel */ }

	/*

	 * The sama5d3 does not provide an EBICSA register and thus does need

	 * to access it.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2011 Freescale Semiconductor, Inc

 *

 * Freescale Integrated Flash Controller

 *

 * Author: Dipen Dudhat <Dipen.Dudhat@freescale.com>

/*

 * convert_ifc_address - convert the base address

 * @addr_base:	base address of the memory bank

/*

 * fsl_ifc_find - find IFC bank

 * @addr_base:	base address of the memory bank

 *

 * This function walks IFC banks comparing "Base address" field of the CSPR

 * registers with the supplied addr_base argument. When bases match this

 * function returns bank number (starting with 0), otherwise it returns

 * appropriate errno value.

	/*

	 * Clear all the common status and event registers

 enable all error and events */

 enable all error and event interrupts */

/*

 * NAND events are split between an operational interrupt which only

 * receives OPC, and an error interrupt that receives everything else,

 * including non-NAND errors.  Whichever interrupt gets to it first

 * records the status and wakes the wait queue.

/*

 * NOTE: This interrupt is used to report ifc events of various kinds,

 * such as transaction errors on the chipselects.

 read for chip select error */

 clear the chip select error */

 read error attribute registers print the error information */

/*

 * fsl_ifc_ctrl_probe

 *

 * called by device layer when it finds a device matching

 * one our driver can handled. This code allocates all of

 * the resources needed for the controller only.  The

 * resources for the NAND banks themselves are allocated

 * in the chip probe function.

 IOMAP the entire IFC region */

 get the Controller level irq */

 get the nand machine irq */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OpenFirmware helpers for memory drivers

 *

 * Copyright (C) 2012 Texas Instruments, Inc.

 * Copyright (C) 2019 Samsung Electronics Co., Ltd.

 * Copyright (C) 2020 Krzysztof Kozlowski <krzk@kernel.org>

/**

 * of_get_min_tck() - extract min timing values for ddr

 * @np: pointer to ddr device tree node

 * @dev: device requesting for min timing values

 *

 * Populates the lpddr2_min_tck structure by extracting data

 * from device tree node. Returns a pointer to the populated

 * structure. If any error in populating the structure, returns

 * default min timings provided by JEDEC.

/**

 * of_get_ddr_timings() - extracts the ddr timings and updates no of

 * frequencies available.

 * @np_ddr: Pointer to ddr device tree node

 * @dev: Device requesting for ddr timings

 * @device_type: Type of ddr(LPDDR2 S2/S4)

 * @nr_frequencies: No of frequencies available for ddr

 * (updated by this function)

 *

 * Populates lpddr2_timings structure by extracting data from device

 * tree node. Returns pointer to populated structure. If any error

 * while populating, returns default timings provided by JEDEC.

/**

 * of_lpddr3_get_min_tck() - extract min timing values for lpddr3

 * @np: pointer to ddr device tree node

 * @dev: device requesting for min timing values

 *

 * Populates the lpddr3_min_tck structure by extracting data

 * from device tree node. Returns a pointer to the populated

 * structure. If any error in populating the structure, returns NULL.

 The 'reg' param required since DT has changed, used as 'max-freq' */

/**

 * of_lpddr3_get_ddr_timings() - extracts the lpddr3 timings and updates no of

 * frequencies available.

 * @np_ddr: Pointer to ddr device tree node

 * @dev: Device requesting for ddr timings

 * @device_type: Type of ddr

 * @nr_frequencies: No of frequencies available for ddr

 * (updated by this function)

 *

 * Populates lpddr3_timings structure by extracting data from device

 * tree node. Returns pointer to populated structure. If any error

 * while populating, returns NULL.

/**

 * of_lpddr2_get_info() - extracts information about the lpddr2 chip.

 * @np: Pointer to device tree node containing lpddr2 info

 * @dev: Device requesting info

 *

 * Populates lpddr2_info structure by extracting data from device

 * tree node. Returns pointer to populated structure. If error

 * happened while populating, returns NULL. If property is missing

 * in a device-tree, then the corresponding value is set to -ENOENT.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Marvell EBU SoC Device Bus Controller

 * (memory controller for NOR/NAND/SRAM/FPGA devices)

 *

 * Copyright (C) 2013-2014 Marvell

 Register definitions */

	/*

	 * The bus width is encoded into the register as 0 for 8 bits,

	 * and 1 for 16 bits, so we do the necessary conversion here.

	/*

	 * The hardware designers found it would be a good idea to

	 * split most of the values in the register into two fields:

	 * one containing all the low-order bits, and another one

	 * containing just the high-order bit. For all of those

	 * fields, we have to split the value into these two parts.

 Set read timings */

 Set write timings */

	/*

	 * Obtain clock period in picoseconds,

	 * we need this in order to convert timing

	 * parameters from cycles to picoseconds.

 Read the Device Tree node */

 Set the new timing parameters */

	/*

	 * We need to create a child device explicitly from here to

	 * guarantee that the child will be probed after the timing

	 * parameters for the bus are written.

 SPDX-License-Identifier: GPL-2.0

/*

 * Renesas RPC-IF core driver

 *

 * Copyright (C) 2018-2019 Renesas Solutions Corp.

 * Copyright (C) 2019 Macronix International Co., Ltd.

 * Copyright (C) 2019-2020 Cogent Embedded, Inc.

 R/W */

 undocumented but must be set */

 undocumented */

 undocumented */

 R/W */

 R/W */

 R/W */

 R/W */

 R/W */

 R/W */

 R/W */

 R/W */

 R/W */

 R/W */

 R/W */

 R */

 R */

 W */

 W */

 R */

 R/W */

 R/W */

 R/W */

 R/W */

 R/W */

 R/W */

 R/W */

 R/W */

/*

 * Custom accessor functions to ensure SMRDR0 and SMWDR0 are always accessed

 * with proper width. Requires SMENR_SPIDE to be correctly set before!

	/*

	 * NOTE: The 0x260 are undocumented bits, but they must be set.

	 *	 RPCIF_PHYCNT_STRTIM is strobe timing adjustment bits,

	 *	 0x0 : the delay is biggest,

	 *	 0x1 : the delay is 2nd biggest,

	 *	 On H3 ES1.x, the value should be 0, while on others,

	 *	 the value should be 7.

	/*

	 * NOTE: The 0x1511144 are undocumented bits, but they must be set

	 *       for RPCIF_PHYOFFSET1.

	 *	 The 0x31 are undocumented bits, but they must be set

	 *	 for RPCIF_PHYOFFSET2.

 Set RCF after BSZ update */

 Dummy read according to spec */

 nbytes may only be 1, 2, 4, or 8 */

		/*

		 * RPC-IF spoils the data for the commands without an address

		 * phase (like RDID) in the manual mode, so we'll have to work

		 * around this issue by using the external address space read

		 * mode instead.

 Dummy read according to spec */

 nbytes may only be 1, 2, 4, or 8 */

 SPDX-License-Identifier: GPL-2.0

/*

 * TI AM33XX EMIF PM Assembly Offsets

 *

 * Copyright (C) 2016-2017 Texas Instruments Inc.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * TI da8xx DDR2/mDDR controller driver

 *

 * Copyright (C) 2016 BayLibre SAS

 *

 * Author:

 *   Bartosz Golaszewski <bgolaszewski@baylibre.com>

/*

 * REVISIT: Linux doesn't have a good framework for the kind of performance

 * knobs this driver controls. We can't use device tree properties as it deals

 * with hardware configuration rather than description. We also don't want to

 * commit to maintaining some random sysfs attributes.

 *

 * For now we just hardcode the register values for the boards that need

 * some changes (as is the case for the LCD controller on da850-lcdk - the

 * first board we support here). When linux gets an appropriate framework,

 * we'll easily convert the driver to it.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * DDR addressing details and AC timing parameters from JEDEC specs

 *

 * Copyright (C) 2012 Texas Instruments, Inc.

 *

 * Aneesh V <aneesh@ti.com>

 LPDDR2 addressing details from JESD209-2 section 2.4 */

 64M */

 128M */

 256M */

 512M */

 1GS4 */

 2GS4 */

 4G */

 8G */

 1GS2 */

 2GS2 */

 LPDDR2 AC timing parameters from JESD209-2 section 12 */

 Speed bin 400(200 MHz) */

 Speed bin 533(266 MHz) */

 Speed bin 800(400 MHz) */

 Speed bin 1066(533 MHz) */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * CoreNet Coherency Fabric error reporting

 *

 * Copyright 2014 Freescale Semiconductor Inc.

/*

 * This register is present but not documented, with different values for

 * IP_ID, on other chips with fsl,corenet2-cf such as t4240 and b4860.

 0x00 Error Detect Register */

 0x04 Error Enable (ccf1)/Disable (ccf2) Register */

 0x08 Error Interrupt Enable Register (ccf2 only) */

 0x0c Error Capture Attribute Register */

 0x10 Error Capture Address High */

 0x14 Error Capture Address Low */

 0x18 Error Capture Attribute Register 2 */

 LAE/CV also valid for errdis and errinten */

 Local Access Error */

 Coherency Violation */

 Unavailable Target ID (t1040) */

 Multicast Stash (t1040) */

 Capture Type (ccf2 only) */

 Capture Valid (ccf2 only) */

 Valid (ccf1 only) */

 Unavailable target ID (ccf1) */

 On CCF1 this register enables rather than disables. */

		/*

		 * We clear errdis on ccf1 because that's the only way to

		 * disable interrupts, but on ccf2 there's no need to disable

		 * detection.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Atmel (Multi-port DDR-)SDRAM Controller driver

 *

 * Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>

 *

 * Copyright (C) 2014 Atmel

 SPDX-License-Identifier: GPL-2.0

/*

 * DFL device driver for EMIF private feature

 *

 * Copyright (C) 2020 Intel Corporation, Inc.

 *

 us */

 us */

 Serialises access to EMIF_CTRL reg */

 The CLEAR_EN field is WO, but other fields are RW */

	/*

	 * This device supports upto 4 memory interfaces, but not all

	 * interfaces are used on different platforms. The read out value of

	 * CLEAN_EN field (which is a bitmap) could tell how many interfaces

	 * are available.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020 BAIKAL ELECTRONICS, JSC

 *

 * Authors:

 *   Serge Semin <Sergey.Semin@baikalelectronics.ru>

 *

 * Baikal-T1 CM2 L2-cache Control Block driver.

/*

 * struct l2_ctl - Baikal-T1 L2 Control block private data.

 * @dev: Pointer to the device structure.

 * @sys_regs: Baikal-T1 System Controller registers map.

/*

 * enum l2_ctl_stall - Baikal-T1 L2-cache-RAM stall identifier.

 * @L2_WSSTALL: Way-select latency.

 * @L2_TAGSTALL: Tag latency.

 * @L2_DATASTALL: Data latency.

/*

 * struct l2_ctl_device_attribute - Baikal-T1 L2-cache device attribute.

 * @dev_attr: Actual sysfs device attribute.

 * @id: L2-cache stall field identifier.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * EMIF driver

 *

 * Copyright (C) 2012 Texas Instruments, Inc.

 *

 * Aneesh V <aneesh@ti.com>

 * Santosh Shilimkar <santosh.shilimkar@ti.com>

/**

 * struct emif_data - Per device static data for driver's use

 * @duplicate:			Whether the DDR devices attached to this EMIF

 *				instance are exactly same as that on EMIF1. In

 *				this case we can save some memory and processing

 * @temperature_level:		Maximum temperature of LPDDR2 devices attached

 *				to this EMIF - read from MR4 register. If there

 *				are two devices attached to this EMIF, this

 *				value is the maximum of the two temperature

 *				levels.

 * @node:			node in the device list

 * @base:			base address of memory-mapped IO registers.

 * @dev:			device pointer.

 * @regs_cache:			An array of 'struct emif_regs' that stores

 *				calculated register values for different

 *				frequencies, to avoid re-calculating them on

 *				each DVFS transition.

 * @curr_regs:			The set of register values used in the last

 *				frequency change (i.e. corresponding to the

 *				frequency in effect at the moment)

 * @plat_data:			Pointer to saved platform data.

 * @debugfs_root:		dentry to the root folder for EMIF in debugfs

 * @np_ddr:			Pointer to ddr device tree node

/*

 * Get bus width used by EMIF. Note that this may be different from the

 * bus width of the DDR devices used. For instance two 16-bit DDR devices

 * may be connected to a given CS of EMIF. In this case bus width as far

 * as EMIF is concerned is 32, where as the DDR bus width is 16 bits.

	/*

	 * Workaround for errata i743 - LPDDR2 Power-Down State is Not

	 * Efficient

	 *

	 * i743 DESCRIPTION:

	 * The EMIF supports power-down state for low power. The EMIF

	 * automatically puts the SDRAM into power-down after the memory is

	 * not accessed for a defined number of cycles and the

	 * EMIF_PWR_MGMT_CTRL[10:8] REG_LP_MODE bit field is set to 0x4.

	 * As the EMIF supports automatic output impedance calibration, a ZQ

	 * calibration long command is issued every time it exits active

	 * power-down and precharge power-down modes. The EMIF waits and

	 * blocks any other command during this calibration.

	 * The EMIF does not allow selective disabling of ZQ calibration upon

	 * exit of power-down mode. Due to very short periods of power-down

	 * cycles, ZQ calibration overhead creates bandwidth issues and

	 * increases overall system power consumption. On the other hand,

	 * issuing ZQ calibration long commands when exiting self-refresh is

	 * still required.

	 *

	 * WORKAROUND

	 * Because there is no power consumption benefit of the power-down due

	 * to the calibration and there is a performance risk, the guideline

	 * is to not allow power-down state and, therefore, to not have set

	 * the EMIF_PWR_MGMT_CTRL[10:8] REG_LP_MODE bit field to 0x4.

 rollback LP_MODE to Self-refresh mode */

	/*

	 * Workaround for errata i728: Disable LPMODE during FREQ_UPDATE

	 *

	 * i728 DESCRIPTION:

	 * The EMIF automatically puts the SDRAM into self-refresh mode

	 * after the EMIF has not performed accesses during

	 * EMIF_PWR_MGMT_CTRL[7:4] REG_SR_TIM number of DDR clock cycles

	 * and the EMIF_PWR_MGMT_CTRL[10:8] REG_LP_MODE bit field is set

	 * to 0x2. If during a small window the following three events

	 * occur:

	 * - The SR_TIMING counter expires

	 * - And frequency change is requested

	 * - And OCP access is requested

	 * Then it causes instable clock on the DDR interface.

	 *

	 * WORKAROUND

	 * To avoid the occurrence of the three events, the workaround

	 * is to disable the self-refresh when requesting a frequency

	 * change. Before requesting a frequency change the software must

	 * program EMIF_PWR_MGMT_CTRL[10:8] REG_LP_MODE to 0x0. When the

	 * frequency change has been done, the software can reprogram

	 * EMIF_PWR_MGMT_CTRL[10:8] REG_LP_MODE to 0x2

	/*

	 * TODO: Do FREQ_UPDATE here when an API

	 * is available for this as part of the new

	 * clock framework

 Find addressing table entry based on the device's type and density */

 CS0 is used for sure */

 Convert to ns */

 Convert to refresh cycles */

	/*

	 * sdram_io_width is in 'log2(x) - 1' form. Convert emif_bus_width

	 * also to this form and subtract to get TA_DEVCNT, which is

	 * in log2(x) form.

 DEVWDT is in 'log2(x) - 3' form */

 Timeout based on DDR frequency */

	/*

	 * The value to be set in register is "log2(timeout) - 3"

	 * if timeout < 16 load 0 in register

	 * if timeout is not a power of 2, round to next highest power of 2

 Workaround for errata i735 */

 Round to maximum in case of overflow, BUT warn! */

 Setup required timing */

 setup a default mask for rest of the modes */

 No CS_TIM in EMIF_4D5 */

/*

 * Get the temperature level of the EMIF instance:

 * Reads the MR4 register of attached SDRAM parts to find out the temperature

 * level. If there are two parts attached(one on each CS), then the temperature

 * level for the EMIF instance is the higher of the two temperatures.

 Read mode register 4 */

 treat everything less than nominal(3) in MR4 as nominal */

 if we get reserved value in MR4 persist with the existing value */

/*

 * setup_temperature_sensitive_regs() - set the timings for temperature

 * sensitive registers. This happens once at initialisation time based

 * on the temperature at boot time and subsequently based on the temperature

 * alert interrupt. Temperature alert can happen when the temperature

 * increases or drops. So this function can have the effect of either

 * derating the timings or going back to nominal values.

 No de-rating for non-lpddr2 devices */

	/*

	 * IF we detect higher than "nominal rating" from DDR sensor

	 * on an unsupported DDR part, shutdown system

			/*

			 * Temperature far too high - do kernel_power_off()

			 * from thread context

		/*

		 * Temperature coming down - defer handling to thread OR

		 * Temperature far too high - do kernel_power_off() from

		 * thread context

 Temperature is going up - handle immediately */

 Save the status and clear it */

	/*

	 * Handle temperature alert

	 * Temperature alert should be same for all ports

	 * So, it's enough to process it only for one of the ports

 Save the status and clear it */

 If we have Power OFF ability, use it, else try restarting */

 Disable all interrupts */

 Clear all interrupts */

 Enable interrupts for SYS interface */

 Enable interrupts for LL interface */

 TA need not be enabled for LL */

 setup IRQ handlers */

	/*

	 * Init power management settings

	 * We don't know the frequency yet. Use a high frequency

	 * value for a conservative timeout setting

 Init ZQ calibration settings */

 Check temperature level temperature level*/

 Init temperature polling */

	/*

	 * Program external PHY control registers that are not frequency

	 * dependent

 Combinations of EMIF and PHY revisions that we support today */

 Convert from density in Mb to the density encoding in jedc_ddr.h */

 Convert from io_width in bits to io_width encoding in jedc_ddr.h */

	/*

	 * For EMIF instances other than EMIF1 see if the devices connected

	 * are exactly same as on EMIF1(which is typically the case). If so,

	 * mark it as a duplicate of EMIF1. This will save some memory and

	 * computation.

	/*

	 * For EMIF instances other than EMIF1 see if the devices connected

	 * are exactly same as on EMIF1(which is typically the case). If so,

	 * mark it as a duplicate of EMIF1 and skip copying timings data.

	 * This will save some memory and some computation later.

	/*

	 * Copy custom configs - ignore allocation error, if any, as

	 * custom_configs is not very critical

	/*

	 * Copy timings and min-tck values from platform data. If it is not

	 * available or if memory allocation fails, use JEDEC defaults

 Save pointers to each other in emif and device structures */

 One-time actions taken on probing the first device */

		/*

		 * TODO: register notifiers for frequency and voltage

		 * change here once the respective frameworks are

		 * available

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2019 Samsung Electronics Co., Ltd.

 * Author: Lukasz Luba <l.luba@partner.samsung.com>

/*

 * A value for register DREX_PMNC_PPC which should be written to reset

 * the cycle counter CCNT (a reference wall clock). It sets zero to the

 * CCNT counter.

/*

 * A value for register DREX_PMNC_PPC which does the reset of all performance

 * counters to zero.

/*

 * Enables all configured counters (including cycle counter). The value should

 * be written to the register DREX_PMNC_PPC.

/* A value for register DREX_PPCCLKCON which enables performance events clock.

 * Must be written before first access to the performance counters register

 * set, otherwise it could crash.

/*

 * Values which are used to enable counters, interrupts or configure flags of

 * the performance counters. They configure counter 2 and cycle counter.

/*

 * Performance event types which are used for setting the preferred event

 * to track in the counters.

 * There is a set of different types, the values are from range 0 to 0x6f.

 * These settings should be written to the configuration register which manages

 * the type of the event (register DREX_PEREV2CONFIG).

/**

 * struct dmc_opp_table - Operating level desciption

 * @freq_hz:		target frequency in Hz

 * @volt_uv:		target voltage in uV

 *

 * Covers frequency and voltage settings of the DMC operating mode.

/**

 * struct exynos5_dmc - main structure describing DMC device

 * @dev:		DMC device

 * @df:			devfreq device structure returned by devfreq framework

 * @gov_data:		configuration of devfreq governor

 * @base_drexi0:	DREX0 registers mapping

 * @base_drexi1:	DREX1 registers mapping

 * @clk_regmap:		regmap for clock controller registers

 * @lock:		protects curr_rate and frequency/voltage setting section

 * @curr_rate:		current frequency

 * @curr_volt:		current voltage

 * @opp:		OPP table

 * @opp_count:		number of 'opp' elements

 * @timings_arr_size:	number of 'timings' elements

 * @timing_row:		values for timing row register, for each OPP

 * @timing_data:	values for timing data register, for each OPP

 * @timing_power:	balues for timing power register, for each OPP

 * @timings:		DDR memory timings, from device tree

 * @min_tck:		DDR memory minimum timing values, from device tree

 * @bypass_timing_row:	value for timing row register for bypass timings

 * @bypass_timing_data:	value for timing data register for bypass timings

 * @bypass_timing_power:	value for timing power register for bypass

 *				timings

 * @vdd_mif:		Memory interface regulator

 * @fout_spll:		clock: SPLL

 * @fout_bpll:		clock: BPLL

 * @mout_spll:		clock: mux SPLL

 * @mout_bpll:		clock: mux BPLL

 * @mout_mclk_cdrex:	clock: mux mclk_cdrex

 * @mout_mx_mspll_ccore:	clock: mux mx_mspll_ccore

 * @counter:		devfreq events

 * @num_counters:	number of 'counter' elements

 * @last_overflow_ts:	time (in ns) of last overflow of each DREX

 * @load:		utilization in percents

 * @total:		total time between devfreq events

 * @in_irq_mode:	whether running in interrupt mode (true)

 *			or polling (false)

 *

 * The main structure for the Dynamic Memory Controller which covers clocks,

 * memory regions, HW information, parameters and current operating mode.

 Protects curr_rate and frequency/voltage setting section */

/**

 * find_target_freq_idx() - Finds requested frequency in local DMC configuration

 * @dmc:	device for which the information is checked

 * @target_rate:	requested frequency in KHz

 *

 * Seeks in the local DMC driver structure for the requested frequency value

 * and returns index or error value.

/**

 * exynos5_switch_timing_regs() - Changes bank register set for DRAM timings

 * @dmc:	device for which the new settings is going to be applied

 * @set:	boolean variable passing set value

 *

 * Changes the register set, which holds timing parameters.

 * There is two register sets: 0 and 1. The register set 0

 * is used in normal operation when the clock is provided from main PLL.

 * The bank register set 1 is used when the main PLL frequency is going to be

 * changed and the clock is taken from alternative, stable source.

 * This function switches between these banks according to the

 * currently used clock source.

/**

 * exynos5_init_freq_table() - Initialized PM OPP framework

 * @dmc:	DMC device for which the frequencies are used for OPP init

 * @profile:	devfreq device's profile

 *

 * Populate the devfreq device's OPP table based on current frequency, voltage.

/**

 * exynos5_set_bypass_dram_timings() - Low-level changes of the DRAM timings

 * @dmc:	device for which the new settings is going to be applied

 *

 * Low-level function for changing timings for DRAM memory clocking from

 * 'bypass' clock source (fixed frequency @400MHz).

 * It uses timing bank registers set 1.

/**

 * exynos5_dram_change_timings() - Low-level changes of the DRAM final timings

 * @dmc:	device for which the new settings is going to be applied

 * @target_rate:	target frequency of the DMC

 *

 * Low-level function for changing timings for DRAM memory operating from main

 * clock source (BPLL), which can have different frequencies. Thus, each

 * frequency must have corresponding timings register values in order to keep

 * the needed delays.

 * It uses timing bank registers set 0.

/**

 * exynos5_dmc_align_target_voltage() - Sets the final voltage for the DMC

 * @dmc:	device for which it is going to be set

 * @target_volt:	new voltage which is chosen to be final

 *

 * Function tries to align voltage to the safe level for 'normal' mode.

 * It checks the need of higher voltage and changes the value. The target

 * voltage might be lower that currently set and still the system will be

 * stable.

/**

 * exynos5_dmc_align_bypass_voltage() - Sets the voltage for the DMC

 * @dmc:	device for which it is going to be set

 * @target_volt:	new voltage which is chosen to be final

 *

 * Function tries to align voltage to the safe level for the 'bypass' mode.

 * It checks the need of higher voltage and changes the value.

 * The target voltage must not be less than currently needed, because

 * for current frequency the device might become unstable.

/**

 * exynos5_dmc_align_bypass_dram_timings() - Chooses and sets DRAM timings

 * @dmc:	device for which it is going to be set

 * @target_rate:	new frequency which is chosen to be final

 *

 * Function changes the DRAM timings for the temporary 'bypass' mode.

/**

 * exynos5_dmc_switch_to_bypass_configuration() - Switching to temporary clock

 * @dmc:	DMC device for which the switching is going to happen

 * @target_rate:	new frequency which is going to be set as a final

 * @target_volt:	new voltage which is going to be set as a final

 *

 * Function configures DMC and clocks for operating in temporary 'bypass' mode.

 * This mode is used only temporary but if required, changes voltage and timings

 * for DRAM chips. It switches the main clock to stable clock source for the

 * period of the main PLL reconfiguration.

	/*

	 * Having higher voltage for a particular frequency does not harm

	 * the chip. Use it for the temporary frequency change when one

	 * voltage manipulation might be avoided.

	/*

	 * Longer delays for DRAM does not cause crash, the opposite does.

	/*

	 * Delays are long enough, so use them for the new coming clock.

/**

 * exynos5_dmc_change_freq_and_volt() - Changes voltage and frequency of the DMC

 * using safe procedure

 * @dmc:	device for which the frequency is going to be changed

 * @target_rate:	requested new frequency

 * @target_volt:	requested voltage which corresponds to the new frequency

 *

 * The DMC frequency change procedure requires a few steps.

 * The main requirement is to change the clock source in the clk mux

 * for the time of main clock PLL locking. The assumption is that the

 * alternative clock source set as parent is stable.

 * The second parent's clock frequency is fixed to 400MHz, it is named 'bypass'

 * clock. This requires alignment in DRAM timing parameters for the new

 * T-period. There is two bank sets for keeping DRAM

 * timings: set 0 and set 1. The set 0 is used when main clock source is

 * chosen. The 2nd set of regs is used for 'bypass' clock. Switching between

 * the two bank sets is part of the process.

 * The voltage must also be aligned to the minimum required level. There is

 * this intermediate step with switching to 'bypass' parent clock source.

 * if the old voltage is lower, it requires an increase of the voltage level.

 * The complexity of the voltage manipulation is hidden in low level function.

 * In this function there is last alignment of the voltage level at the end.

	/*

	 * Voltage is set at least to a level needed for this frequency,

	 * so switching clock source is safe now.

	/*

	 * We are safe to increase the timings for current bypass frequency.

	 * Thanks to this the settings will be ready for the upcoming clock

	 * source change.

	/*

	 * Make sure if the voltage is not from 'bypass' settings and align to

	 * the right level for power efficiency.

/**

 * exynos5_dmc_get_volt_freq() - Gets the frequency and voltage from the OPP

 * table.

 * @dmc:	device for which the frequency is going to be changed

 * @freq:       requested frequency in KHz

 * @target_rate:	returned frequency which is the same or lower than

 *			requested

 * @target_volt:	returned voltage which corresponds to the returned

 *			frequency

 * @flags:	devfreq flags provided for this frequency change request

 *

 * Function gets requested frequency and checks OPP framework for needed

 * frequency and voltage. It populates the values 'target_rate' and

 * 'target_volt' or returns error value when OPP framework fails.

/**

 * exynos5_dmc_target() - Function responsible for changing frequency of DMC

 * @dev:	device for which the frequency is going to be changed

 * @freq:	requested frequency in KHz

 * @flags:	flags provided for this frequency change request

 *

 * An entry function provided to the devfreq framework which provides frequency

 * change of the DMC. The function gets the possible rate from OPP table based

 * on requested frequency. It calls the next function responsible for the

 * frequency and voltage change. In case of failure, does not set 'curr_rate'

 * and returns error value to the framework.

/**

 * exynos5_counters_get() - Gets the performance counters values.

 * @dmc:	device for which the counters are going to be checked

 * @load_count:	variable which is populated with counter value

 * @total_count:	variable which is used as 'wall clock' reference

 *

 * Function which provides performance counters values. It sums up counters for

 * two DMC channels. The 'total_count' is used as a reference and max value.

 * The ratio 'load_count/total_count' shows the busy percentage [0%, 100%].

 Take into account only read+write counters, but stop all */

/**

 * exynos5_dmc_start_perf_events() - Setup and start performance event counters

 * @dmc:	device for which the counters are going to be checked

 * @beg_value:	initial value for the counter

 *

 * Function which enables needed counters, interrupts and sets initial values

 * then starts the counters.

 Enable interrupts for counter 2 */

 Enable counter 2 and CCNT  */

 Clear overflow flag for all counters */

 Reset all counters */

	/*

	 * Set start value for the counters, the number of samples that

	 * will be gathered is calculated as: 0xffffffff - beg_value

 Start all counters */

/**

 * exynos5_dmc_perf_events_calc() - Calculate utilization

 * @dmc:	device for which the counters are going to be checked

 * @diff_ts:	time between last interrupt and current one

 *

 * Function which calculates needed utilization for the devfreq governor.

 * It prepares values for 'busy_time' and 'total_time' based on elapsed time

 * between interrupts, which approximates utilization.

	/*

	 * This is a simple algorithm for managing traffic on DMC.

	 * When there is almost no load the counters overflow every 4s,

	 * no mater the DMC frequency.

	 * The high load might be approximated using linear function.

	 * Knowing that, simple calculation can provide 'busy_time' and

	 * 'total_time' to the devfreq governor which picks up target

	 * frequency.

	 * We want a fast ramp up and slow decay in frequency change function.

		/*

		 * Set higher utilization for the simple_ondemand governor.

		 * The governor should increase the frequency of the DMC.

		/*

		 * Set low utilization for the simple_ondemand governor.

		 * The governor should decrease the frequency of the DMC.

/**

 * exynos5_dmc_perf_events_check() - Checks the status of the counters

 * @dmc:	device for which the counters are going to be checked

 *

 * Function which is called from threaded IRQ to check the counters state

 * and to call approximation for the needed utilization.

 Stop all counters */

 Check the source in interrupt flag registers (which channel) */

/**

 * exynos5_dmc_enable_perf_events() - Enable performance events

 * @dmc:	device for which the counters are going to be checked

 *

 * Function which is setup needed environment and enables counters.

 Enable Performance Event Clock */

 Select read transfers as performance event2 */

 Devfreq shouldn't be faster than initialization, play safe though. */

/**

 * exynos5_dmc_disable_perf_events() - Disable performance events

 * @dmc:	device for which the counters are going to be checked

 *

 * Function which stops, disables performance event counters and interrupts.

 Stop all counters */

 Disable interrupts for counter 2 */

 Disable counter 2 and CCNT  */

 Clear overflow flag for all counters */

/**

 * exynos5_dmc_get_status() - Read current DMC performance statistics.

 * @dev:	device for which the statistics are requested

 * @stat:	structure which has statistic fields

 *

 * Function reads the DMC performance counters and calculates 'busy_time'

 * and 'total_time'. To protect from overflow, the values are shifted right

 * by 10. After read out the counters are setup to count again.

 To protect from overflow, divide by 1024 */

/**

 * exynos5_dmc_get_cur_freq() - Function returns current DMC frequency

 * @dev:	device for which the framework checks operating frequency

 * @freq:	returned frequency value

 *

 * It returns the currently used frequency of the DMC. The real operating

 * frequency might be lower when the clock source value could not be divided

 * to the requested value.

/*

 * exynos5_dmc_df_profile - Devfreq governor's profile structure

 *

 * It provides to the devfreq framework needed functions and polling period.

/**

 * exynos5_dmc_align_init_freq() - Align initial frequency value

 * @dmc:	device for which the frequency is going to be set

 * @bootloader_init_freq:	initial frequency set by the bootloader in KHz

 *

 * The initial bootloader frequency, which is present during boot, might be

 * different that supported frequency values in the driver. It is possible

 * due to different PLL settings or used PLL as a source.

 * This function provides the 'initial_freq' for the devfreq framework

 * statistics engine which supports only registered values. Thus, some alignment

 * must be made.

/**

 * create_timings_aligned() - Create register values and align with standard

 * @dmc:	device for which the frequency is going to be set

 * @reg_timing_row:	array to fill with values for timing row register

 * @reg_timing_data:	array to fill with values for timing data register

 * @reg_timing_power:	array to fill with values for timing power register

 * @clk_period_ps:	the period of the clock, known as tCK

 *

 * The function calculates timings and creates a register value ready for

 * a frequency transition. The register contains a few timings. They are

 * shifted by a known offset. The timing value is calculated based on memory

 * specyfication: minimal time required and minimal cycles required.

 data related timings */

 power related timings */

/**

 * of_get_dram_timings() - helper function for parsing DT settings for DRAM

 * @dmc:        device for which the frequency is going to be set

 *

 * The function parses DT entries with DRAM information.

 Sorted array of OPPs with frequency ascending */

 Take the highest frequency's timings as 'bypass' */

/**

 * exynos5_dmc_init_clks() - Initialize clocks needed for DMC operation.

 * @dmc:	DMC structure containing needed fields

 *

 * Get the needed clocks defined in DT device, enable and set the right parents.

 * Read current frequency and initialize the initial rate for governor.

	/*

	 * Convert frequency to KHz values and set it for the governor.

	/*

	 * Some bootloaders do not set clock routes correctly.

	 * Stop one path in clocks to PHY.

/**

 * exynos5_performance_counters_init() - Initializes performance DMC's counters

 * @dmc:	DMC for which it does the setup

 *

 * Initialization of performance counters in DMC for estimating usage.

 * The counter's values are used for calculation of a memory bandwidth and based

 * on that the governor changes the frequency.

 * The counters are not used when the governor is GOVERNOR_USERSPACE.

/**

 * exynos5_dmc_set_pause_on_switching() - Controls a pause feature in DMC

 * @dmc:	device which is used for changing this feature

 *

 * There is a need of pausing DREX DMC when divider or MUX in clock tree

 * changes its configuration. In such situation access to the memory is blocked

 * in DMC automatically. This feature is used when clock frequency change

 * request appears and touches clock tree.

/**

 * exynos5_dmc_probe() - Probe function for the DMC driver

 * @pdev:	platform device for which the driver is going to be initialized

 *

 * Initialize basic components: clocks, regulators, performance counters, etc.

 * Read out product version and based on the information setup

 * internal structures for the controller (frequency and voltage) and for DRAM

 * memory parameters: timings for each operating frequency.

 * Register new devfreq device for controlling DVFS of the DMC.

 There is two modes in which the driver works: polling or IRQ */

		/*

		 * Setup default thresholds for the devfreq governor.

		 * The values are chosen based on experiments.

		/*

		 * Setup default thresholds for the devfreq governor.

		 * The values are chosen based on experiments.

/**

 * exynos5_dmc_remove() - Remove function for the platform device

 * @pdev:	platform device which is going to be removed

 *

 * The function relies on 'devm' framework function which automatically

 * clean the device's resources. It just calls explicitly disable function for

 * the performance counters.

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2015 Samsung Electronics Co., Ltd.

	      http:


 Exynos - SROM Controller support

 Author: Pankaj Dubey <pankaj.dubey@samsung.com>

 SROM side */

/**

 * struct exynos_srom_reg_dump: register dump of SROM Controller registers.

 * @offset: srom register offset from the controller base address.

 * @value: the value of register under the offset.

/**

 * struct exynos_srom: platform data for exynos srom controller driver.

 * @dev: platform device pointer

 * @reg_base: srom base address

 * @reg_offset: exynos_srom_reg_dump pointer to hold offset and its value.

 Convert bank into shift/offset */

	/*

	 * If any bank failed to configure, we still provide suspend/resume,

	 * but do not probe child devices

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2020, NVIDIA CORPORATION.  All rights reserved.

 only the nominal and derated tables are expected */

 keep track of which table this is */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2014, NVIDIA CORPORATION.  All rights reserved.

 *

 * Author:

 *	Mikko Perttunen <mperttunen@nvidia.com>

 Maximum amount of time in us. to wait for changes to become effective */

	/*

	 * There are multiple sources in the EMC driver which could request

	 * a min/max clock rate, these rates are contained in this array.

 protect shared rate-change code path */

 Timing change sequence functions */

 Clear CLKCHANGE_COMPLETE interrupts */

 Disable dynamic self-refresh */

 Disable SEL_DPD_CTRL for clock change */

 Prepare DQ/DQS for clock change */

 Wait to settle */

 Program CTT_TERM control */

 Program burst shadow registers */

 Program AUTO_CAL_CONFIG */

 DDR3: predict MRS long wait count */

 DDR3: Turn off DLL and enter self-refresh */

 Disable refresh controller */

 Flow control marker */

 DDR3: Exit self-refresh */

 Set DRAM mode registers */

  Issue ZCAL command if turning ZCAL on */

  Write to RO register to remove stall after change */

 Disable AUTO_CAL for clock change */

 Read register to wait until programming has settled */

 Wait until the state machine has settled */

 Restore AUTO_CAL */

 Restore dynamic self-refresh */

 Set ZCAL wait count */

 LPDDR3: Turn off BGBIAS if low frequency */

 Wait for timing to settle */

 Reprogram SEL_DPD_CTRL */

 Initialization and deinitialization */

 select minimum and maximum rates among the requested rates */

	/*

	 * EMC rate-changes should go via OPP API because it manages voltage

	 * changes.

/*

 * debugfs interface

 *

 * The memory controller driver exposes some files in debugfs that can be used

 * to control the EMC frequency. The top-level directory can be found here:

 *

 *   /sys/kernel/debug/emc

 *

 * It contains the following files:

 *

 *   - available_rates: This file contains a list of valid, space-separated

 *     EMC frequencies.

 *

 *   - min_rate: Writing a value to this file sets the given frequency as the

 *       floor of the permitted range. If this is higher than the currently

 *       configured EMC frequency, this will cause the frequency to be

 *       increased so that it stays within the valid range.

 *

 *   - max_rate: Similarily to the min_rate file, writing a value to this file

 *       sets the given frequency as the ceiling of the permitted range. If

 *       the value is lower than the currently configured EMC frequency, this

 *       will cause the frequency to be decreased so that it stays within the

 *       valid range.

 External Memory is the only possible ICC route */

		/*

		 * SRC and DST nodes should have matching TAG in order to have

		 * it set by default for a requested path.

	/*

	 * Tegra124 EMC runs on a clock rate of SDRAM bus. This means that

	 * EMC clock rate is twice smaller than the peak data rate because

	 * data is sampled on both EMC clock edges.

 create External Memory Controller node */

 link External Memory Controller to External Memory (DRAM) */

 create External Memory node */

 first dummy rate-set initializes voltage state */

	/*

	 * Don't allow the kernel module to be unloaded. Unloading adds some

	 * extra complexity which doesn't really worth the effort in a case of

	 * this driver.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2015 NVIDIA CORPORATION.  All rights reserved.

 read-only */

 read-only */

 read-only */

 read-only */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2019 NVIDIA CORPORATION.  All rights reserved.

/*

 * debugfs interface

 *

 * The memory controller driver exposes some files in debugfs that can be used

 * to control the EMC frequency. The top-level directory can be found here:

 *

 *   /sys/kernel/debug/emc

 *

 * It contains the following files:

 *

 *   - available_rates: This file contains a list of valid, space-separated

 *     EMC frequencies.

 *

 *   - min_rate: Writing a value to this file sets the given frequency as the

 *       floor of the permitted range. If this is higher than the currently

 *       configured EMC frequency, this will cause the frequency to be

 *       increased so that it stays within the valid range.

 *

 *   - max_rate: Similarily to the min_rate file, writing a value to this file

 *       sets the given frequency as the ceiling of the permitted range. If

 *       the value is lower than the currently configured EMC frequency, this

 *       will cause the frequency to be decreased so that it stays within the

 *       valid range.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2012 NVIDIA CORPORATION.  All rights reserved.

 we store collected statistics as a fixed point values */

	/*

	 * It should be possible to tune arbitration knobs here, but the

	 * default values are known to work well on all devices. Hence

	 * nothing to do here so far.

	/*

	 * ISO clients need to reserve extra bandwidth up-front because

	 * there could be high bandwidth pressure during initial filling

	 * of the client's FIFO buffers.  Secondly, we need to take into

	 * account impurities of the memory subsystem.

 these clients are isochronous by default */

	/*

	 * Reset statistic gathers state, select statistics collection mode

	 * and set clocks counter saturation limit to maximum.

 collect memory controller utilization percent for each client */

 collect more info from active clients */

 An event is generated when client performs R/W request. */

		/*

		 * An event is generated based on the timeout (TM) signal

		 * accompanying a request for arbitration.

		/*

		 * An event is generated based on the high-priority (HP) signal

		 * accompanying a request for arbitration.

		/*

		 * An event is generated based on the bandwidth (BW) signal

		 * accompanying a request for arbitration.

		/*

		 * An event is generated when the memory controller switches

		 * between making a read request to making a write request.

		/*

		 * An even generated when the chosen client has wins arbitration

		 * when it was also the winner at the previous request.  If a

		 * client makes N requests in a row that are honored, SUCCESSIVE

		 * will be counted (N-1) times.  Large values for this event

		 * imply that if we were patient enough, all of those requests

		 * could have been coalesced.

		/*

		 * An event is generated when the memory controller detects a

		 * page miss for the current request.

 mask all interrupts to avoid flooding */

 clear interrupts */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2015-2020, NVIDIA CORPORATION.  All rights reserved.

 CLK_RST_CONTROLLER_CLK_SOURCE_EMC */

 CLK_RST_CONTROLLER_CLK_SOURCE_EMC_DLL */

 MC_EMEM_ARB_MISC0 */

 EMC_DATA_BRLSHFT_X */

 temperature is fine, using regular refresh */

 XXX use non-busy-looping sleep? */

/*

 * debugfs interface

 *

 * The memory controller driver exposes some files in debugfs that can be used

 * to control the EMC frequency. The top-level directory can be found here:

 *

 *   /sys/kernel/debug/emc

 *

 * It contains the following files:

 *

 *   - available_rates: This file contains a list of valid, space-separated

 *     EMC frequencies.

 *

 *   - min_rate: Writing a value to this file sets the given frequency as the

 *       floor of the permitted range. If this is higher than the currently

 *       configured EMC frequency, this will cause the frequency to be

 *       increased so that it stays within the valid range.

 *

 *   - max_rate: Similarily to the min_rate file, writing a value to this file

 *       sets the given frequency as the ceiling of the permitted range. If

 *       the value is lower than the currently configured EMC frequency, this

 *       will cause the frequency to be decreased so that it stays within the

 *       valid range.

 probe the number of connected DRAM devices */

 probe the type of DRAM */

 probe the number of channels */

 attach to the nominal and (optional) derated tables */

 validate the tables */

 default to the nominal table */

 pick the current timing based on the current EMC clock rate */

 pick a compatible clock change sequence for the EMC table */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2014 NVIDIA CORPORATION.  All rights reserved.

 sentinel */ }

/**

 * devm_tegra_memory_controller_get() - get Tegra Memory Controller handle

 * @dev: device pointer for the consumer device

 *

 * This function will search for the Memory Controller node in a device-tree

 * and retrieve the Memory Controller handle.

 *

 * Return: ERR_PTR() on error or a valid pointer to a struct tegra_mc.

 DMA flushing will fail if reset is already asserted */

 check whether reset is asserted */

 block clients DMA requests */

 wait for completion of the outstanding DMA requests */

 clear clients DMA requests sitting before arbitration */

 take out client from hot reset */

 allow new DMA requests to proceed to arbitration */

 compute the number of MC clock cycles per tick */

 write latency allowance defaults */

 latch new values */

 ensure that debug features are disabled */

 mask all interrupts to avoid flooding */

 clear interrupts */

/*

 * Memory Controller (MC) has few Memory Clients that are issuing memory

 * bandwidth allocation requests to the MC interconnect provider. The MC

 * provider aggregates the requests and then sends the aggregated request

 * up to the External Memory Controller (EMC) interconnect provider which

 * re-configures hardware interface to External Memory (EMEM) in accordance

 * to the required bandwidth. Each MC interconnect node represents an

 * individual Memory Client.

 *

 * Memory interconnect topology:

 *

 *               +----+

 * +--------+    |    |

 * | TEXSRD +--->+    |

 * +--------+    |    |

 *               |    |    +-----+    +------+

 *    ...        | MC +--->+ EMC +--->+ EMEM |

 *               |    |    +-----+    +------+

 * +--------+    |    |

 * | DISP.. +--->+    |

 * +--------+    |    |

 *               +----+

 older device-trees don't have interconnect properties */

 create Memory Controller node */

 link Memory Controller to External Memory Controller */

 create MC client node */

 link Memory Client to Memory Controller */

 length of MC tick in nanoseconds */

 check whether ICC provider is registered */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2017-2021 NVIDIA CORPORATION.  All rights reserved.

 SPDX-License-Identifier: GPL-2.0

/*

 * Tegra20 External Memory Controller driver

 *

 * Author: Dmitry Osipenko <digetx@gmail.com>

	/*

	 * There are multiple sources in the EMC driver which could request

	 * a min/max clock rate, these rates are contained in this array.

 protect shared rate-change code path */

 memory chip identity information */

 notify about HW problem */

 clear interrupts */

 program shadow registers */

 wait until programming has settled */

 manually initiate memory timing update */

	/*

	 * The EMC clock rate is twice the bus rate, and the bus rate is

	 * measured in kHz.

 clear data-valid interrupt status */

 issue mode register read request */

 wait for the LPDDR2 data-valid interrupt */

 read out mode register data */

 these registers are standard for all LPDDR JEDEC memory chips */

	/*

	 * Depending on a memory type, DRAM should enter either self-refresh

	 * or power-down state on EMC clock change.

 enable EMC and CAR to handshake on PLL divider/source changes */

 initialize interrupt */

 ensure that unwanted debug features are disabled */

 select minimum and maximum rates among the requested rates */

	/*

	 * EMC rate-changes should go via OPP API because it manages voltage

	 * changes.

/*

 * debugfs interface

 *

 * The memory controller driver exposes some files in debugfs that can be used

 * to control the EMC frequency. The top-level directory can be found here:

 *

 *   /sys/kernel/debug/emc

 *

 * It contains the following files:

 *

 *   - available_rates: This file contains a list of valid, space-separated

 *     EMC frequencies.

 *

 *   - min_rate: Writing a value to this file sets the given frequency as the

 *       floor of the permitted range. If this is higher than the currently

 *       configured EMC frequency, this will cause the frequency to be

 *       increased so that it stays within the valid range.

 *

 *   - max_rate: Similarily to the min_rate file, writing a value to this file

 *       sets the given frequency as the ceiling of the permitted range. If

 *       the value is lower than the currently configured EMC frequency, this

 *       will cause the frequency to be decreased so that it stays within the

 *       valid range.

 External Memory is the only possible ICC route */

		/*

		 * SRC and DST nodes should have matching TAG in order to have

		 * it set by default for a requested path.

	/*

	 * Tegra20 EMC runs on x2 clock rate of SDRAM bus because DDR data

	 * is sampled on both clock edges.  This means that EMC clock rate

	 * equals to the peak data-rate.

 create External Memory Controller node */

 link External Memory Controller to External Memory (DRAM) */

 create External Memory node */

 freeze counters */

	/*

	 *  busy_time: number of clocks EMC request was accepted

	 * total_time: number of clocks PWR_GATHER control was set to ENABLE

 clear counters and restart */

	/*

	 * PWR_COUNT is 1/2 of PWR_CLOCKS at max, and thus, the up-threshold

	 * should be less than 50.  Secondly, multiple active memory clients

	 * may cause over 20% of lost clock cycles due to stalls caused by

	 * competing memory accesses.  This means that threshold should be

	 * set to a less than 30 in order to have a properly working governor.

	/*

	 * Reset statistic gathers state, select global bandwidth for the

	 * statistics collection mode and set clocks counter saturation

	 * limit to maximum.

	/*

	 * Don't allow the kernel module to be unloaded. Unloading adds some

	 * extra complexity which doesn't really worth the effort in a case of

	 * this driver.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2014 NVIDIA CORPORATION.  All rights reserved.

 see 18.4.1 Client Configuration in Tegra3 TRM v03p */

	/*

	 * Latency allowness should be set with consideration for the module's

	 * latency tolerance and internal buffering capabilities.

	 *

	 * Display memory clients use isochronous transfers and have very low

	 * tolerance to a belated transfers. Hence we need to compensate the

	 * memory arbitration imperfection for them in order to prevent FIFO

	 * underflow condition when memory bus is busy.

	 *

	 * VI clients also need a stronger compensation.

		/*

		 * We always want lower latency for these clients, hence

		 * don't touch them.

	/*

	 * Latency allowance is a number of ticks a request from a particular

	 * client may wait in the EMEM arbiter before it becomes a high-priority

	 * request.

	/*

	 * Skip pre-initialization that is done by icc_node_add(), which sets

	 * bandwidth to maximum for all clients before drivers are loaded.

	 *

	 * This doesn't make sense for us because we don't have drivers for all

	 * clients and it's okay to keep configuration left from bootloader

	 * during boot, at least for today.

 convert bytes/sec to megabytes/sec */

	/*

	 * ISO clients need to reserve extra bandwidth up-front because

	 * there could be high bandwidth pressure during initial filling

	 * of the client's FIFO buffers.  Secondly, we need to take into

	 * account impurities of the memory subsystem.

 these clients are isochronous by default */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2014 NVIDIA CORPORATION.  All rights reserved.

 read-only */

 read-only */

 TODO: program PTSA */

	/*

	 * ISO clients need to reserve extra bandwidth up-front because

	 * there could be high bandwidth pressure during initial filling

	 * of the client's FIFO buffers.  Secondly, we need to take into

	 * account impurities of the memory subsystem.

 these clients are isochronous by default */

 CONFIG_ARCH_TEGRA_124_SOC */

 CONFIG_ARCH_TEGRA_132_SOC */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2014-2020, NVIDIA CORPORATION.  All rights reserved.

/*

 * Enable flags for specifying verbosity.

/*

 * PTFV defines - basically just indexes into the per table PTFV array.

/*

 * Do arithmetic in fixed point.

/*

 * The division portion of the average operation.

/*

 * Convert val to fixed point and add it to the temporary average.

/*

 * Convert a moving average back to integral form and return the value.

 Weighted update. */

 Access a particular average. */

	/*

	 * Dev0 MSB.

		/*

		 * Dev0 LSB.

	/*

	 * Dev1 MSB.

		/*

		 * Dev1 LSB.

			/*

			 * If the previous frequency was using periodic

			 * calibration then we can reuse the previous

			 * frequencies EMA data.

 Reset the EMA.*/

				/*

				 * Generate next sample of data.

		/*

		 * Seems like it should be part of the

		 * 'if (last_timing->periodic_training)' conditional

		 * since is already done for the else clause.

		/*

		 * 1. Power optimizations should be off.

 Does emc_timing_update() for above changes. */

		/*

		 * 2. osc kick off - this assumes training and dvfs have set

		 *    correct MR23.

		/*

		 * 3. Let dram capture its clock tree delays.

		/*

		 * 4. Check delta wrt previous values (save value if margin

		 *    exceeds what is set in table).

		/*

		 * 5. Apply compensation w.r.t. trained values (if clock tree

		 *    has drifted more than the set margin).

		/*

		 * 6. Timing update actally applies the new trimmers.

 6.1. Restore the UPDATE_DLL_IN_UPDATE field. */

 6.2. Restore the DLL. */

/*

 * Do the clock change sequence.

 state variables */

 constant configuration parameters */

	/*

	 * This is the timing table for the source frequency. It does _not_

	 * necessarily correspond to the actual timing values in the EMC at the

	 * moment. If the boot BCT differs from the table then this can happen.

	 * However, we need it for accessing the dram_timings (which are not

	 * really registers) array for the current frequency.

 in picoseconds */

 XXX fake == last */

	/*

	 * Step 1:

	 *   Pre DVFS SW sequence.

 Flush write. */

 Check if we need to turn on VREF generator. */

	/*

	 * Step 2:

	 *   Prelock the DLL.

	/*

	 * Step 3:

	 *   Prepare autocal for the clock change.

	/*

	 * Step 4:

	 *   Update EMC_CFG. (??)

	/*

	 * Step 5:

	 *   Prepare reference variables for ZQCAL regs.

	/*

	 * Step 6:

	 *   Training code - removed.

	/*

	 * Step 7:

	 *   Program FSP reference registers and send MRWs to new FSPWR.

 WAR 200024907 */

 535.91 ps */

 625.00 ps */

 750.19 ps */

 938.09 ps */

		/*

		 * Originally there was a + .5 in the tRPST calculation.

		 * However since we can't do FP in the kernel and the tRTM

		 * computation was in a floating point ceiling function, adding

		 * one to tRTP should be ok. There is no other source of non

		 * integer values, so the result was always going to be

		 * something for the form: f_ceil(N + .5) = N + 1;

	/*

	 * Step 8:

	 *   Program the shadow registers.

 Pain... And suffering. */

 EMC_ZCAL_INTERVAL reset value. */

 SW addition: do EMC refresh adjustment here. */

 Per channel burst registers. */

 Filter out second channel if not in DUAL_CHANNEL mode. */

 Vref regs. */

 Trimmers. */

 Per channel trimmers. */

 Registers to be programmed on the faster clock. */

 Flush all the burst register writes. */

	/*

	 * Step 9:

	 *   LPDDR4 section A.

	/*

	 * Step 10:

	 *   LPDDR4 and DDR3 common section.

 calculate reference delay multiplier */

	/*

	 * Step 11:

	 *   Ramp down.

	/*

	 * Step 12:

	 *   And finally - trigger the clock change.

	/*

	 * Step 13:

	 *   Ramp up.

	/*

	 * Step 14:

	 *   Bringup CKE pins.

	/*

	 * Step 15: (two step 15s ??)

	 *   Calculate zqlatch wait time; has dependency on ramping times.

 WAR: delay for zqlatch */

	/*

	 * Step 16:

	 *   LPDDR4 Conditional Training Kickoff. Removed.

	/*

	 * Step 17:

	 *   MANSR exit self refresh.

	/*

	 * Step 18:

	 *   Send MRWs to LPDDR3/DDR3.

	/*

	 * Step 19:

	 *   ZQCAL for LPDDR3/DDR3

	/*

	 * Step 20:

	 *   Issue ref and optional QRST.

	/*

	 * Step 21:

	 *   Restore ZCAL and ZCAL interval.

	/*

	 * Step 22:

	 *   Restore EMC_CFG_PIPE_CLK.

	/*

	 * Step 23:

	/*

	 * Step 24:

	 *   Save training results. Removed.

	/*

	 * Step 25:

	 *   Program MC updown registers.

	/*

	 * Step 26:

	 *   Restore ZCAL registers.

	/*

	 * Step 27:

	 *   Restore EMC_CFG, FDPD registers.

	/*

	 * Step 28:

	 *   Training recover. Removed.

	/*

	 * Step 29:

	 *   Power fix WAR.

	/*

	 * Step 30:

	 *   Re-enable autocal.

 Done! Yay. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2017-2021 NVIDIA CORPORATION.  All rights reserved.

		/*

		 * If the secure firmware has locked this down the override

		 * for this memory client, there's nothing we can do here.

		/*

		 * Otherwise, try to set the override itself. Typically the

		 * secure firmware will never have set this configuration.

		 * Instead, it will either have disabled write access to

		 * this field, or it will already have set an explicit

		 * override itself.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2014 NVIDIA CORPORATION.  All rights reserved.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Tegra30 External Memory Controller driver

 *

 * Based on downstream driver from NVIDIA and tegra124-emc.c

 * Copyright (C) 2011-2014 NVIDIA Corporation

 *

 * Author: Dmitry Osipenko <digetx@gmail.com>

 * Copyright (C) 2019 GRATE-DRIVER project

	/*

	 * There are multiple sources in the EMC driver which could request

	 * a min/max clock rate, these rates are contained in this array.

 protect shared rate-change code path */

 notify about HW problem */

 clear interrupts */

 disable dynamic self-refresh */

 update MC arbiter settings */

 check DQ/DQS VREF delay */

 disable auto-calibration if VREF mode is switching */

 program shadow registers */

 EMC_XM2CLKPADCTRL should be programmed separately */

 DDR3: predict MRS long wait count */

 this read also completes the writes */

 flow control marker 1 */

 enable periodic reset */

 disable auto-refresh to save time after clock change */

 turn off DLL and enter self-refresh on DDR3 */

 flow control marker 2 */

 enable write-active MUX, update unshadowed pad control */

 restore periodic QRST and disable write-active MUX */

 exit self-refresh on DDR3 */

 set DRAM-mode registers */

 issue ZCAL command if turning ZCAL on */

 flow control marker 3 */

	/*

	 * Read and discard an arbitrary MC register (Note: EMC registers

	 * can't be used) to ensure the register writes are completed.

 re-enable auto-refresh */

 restore auto-calibration */

 restore dynamic self-refresh */

 set number of clocks to wait after each ZQ command */

 wait for writes to settle */

 update restored timing */

 restore early ACK */

 shouldn't ever happen in practice */

		/*

		 * Disable interrupt since read accesses are prohibited after

		 * stalling.

 enable EMC and CAR to handshake on PLL divider/source changes */

 configure clock change mode accordingly to DRAM type */

 initialize interrupt */

 ensure that unwanted debug features are disabled */

 select minimum and maximum rates among the requested rates */

	/*

	 * EMC rate-changes should go via OPP API because it manages voltage

	 * changes.

/*

 * debugfs interface

 *

 * The memory controller driver exposes some files in debugfs that can be used

 * to control the EMC frequency. The top-level directory can be found here:

 *

 *   /sys/kernel/debug/emc

 *

 * It contains the following files:

 *

 *   - available_rates: This file contains a list of valid, space-separated

 *     EMC frequencies.

 *

 *   - min_rate: Writing a value to this file sets the given frequency as the

 *       floor of the permitted range. If this is higher than the currently

 *       configured EMC frequency, this will cause the frequency to be

 *       increased so that it stays within the valid range.

 *

 *   - max_rate: Similarily to the min_rate file, writing a value to this file

 *       sets the given frequency as the ceiling of the permitted range. If

 *       the value is lower than the currently configured EMC frequency, this

 *       will cause the frequency to be decreased so that it stays within the

 *       valid range.

 External Memory is the only possible ICC route */

		/*

		 * SRC and DST nodes should have matching TAG in order to have

		 * it set by default for a requested path.

	/*

	 * Tegra30 EMC runs on a clock rate of SDRAM bus.  This means that

	 * EMC clock rate is twice smaller than the peak data rate because

	 * data is sampled on both EMC clock edges.

 create External Memory Controller node */

 link External Memory Controller to External Memory (DRAM) */

 create External Memory node */

	/*

	 * Don't allow the kernel module to be unloaded. Unloading adds some

	 * extra complexity which doesn't really worth the effort in a case of

	 * this driver.

 take exclusive control over the clock's rate */

 suspending in a bad state will hang machine */

 SPDX-License-Identifier: GPL-2.0

/*

 * Multiplexer driver for Analog Devices ADG792A/G Triple 4:1 mux

 *

 * Copyright (C) 2017 Axentia Technologies AB

 *

 * Author: Peter Rosin <peda@axentia.se>

 ADG792A_RESETB is active low, the chip resets when it is zero. */

 parallel mux controller operation */

 SPDX-License-Identifier: GPL-2.0

/*

 * GPIO-controlled multiplexer driver

 *

 * Copyright (C) 2017 Axentia Technologies AB

 *

 * Author: Peter Rosin <peda@axentia.se>

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * MMIO register bitfield-controlled multiplexer driver

 *

 * Copyright (C) 2017 Pengutronix, Philipp Zabel <kernel@pengutronix.de>

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * Multiplexer subsystem

 *

 * Copyright (C) 2017 Axentia Technologies AB

 *

 * Author: Peter Rosin <peda@axentia.se>

/*

 * The idle-as-is "state" is not an actual state that may be selected, it

 * only implies that the state should not be changed. So, use that state

 * as indication that the cached state of the multiplexer is unknown.

/**

 * mux_chip_alloc() - Allocate a mux-chip.

 * @dev: The parent device implementing the mux interface.

 * @controllers: The number of mux controllers to allocate for this chip.

 * @sizeof_priv: Size of extra memory area for private use by the caller.

 *

 * After allocating the mux-chip with the desired number of mux controllers

 * but before registering the chip, the mux driver is required to configure

 * the number of valid mux states in the mux_chip->mux[N].states members and

 * the desired idle state in the returned mux_chip->mux[N].idle_state members.

 * The default idle state is MUX_IDLE_AS_IS. The mux driver also needs to

 * provide a pointer to the operations struct in the mux_chip->ops member

 * before registering the mux-chip with mux_chip_register.

 *

 * Return: A pointer to the new mux-chip, or an ERR_PTR with a negative errno.

/**

 * mux_chip_register() - Register a mux-chip, thus readying the controllers

 *			 for use.

 * @mux_chip: The mux-chip to register.

 *

 * Do not retry registration of the same mux-chip on failure. You should

 * instead put it away with mux_chip_free() and allocate a new one, if you

 * for some reason would like to retry registration.

 *

 * Return: Zero on success or a negative errno on error.

/**

 * mux_chip_unregister() - Take the mux-chip off-line.

 * @mux_chip: The mux-chip to unregister.

 *

 * mux_chip_unregister() reverses the effects of mux_chip_register().

 * But not completely, you should not try to call mux_chip_register()

 * on a mux-chip that has been registered before.

/**

 * mux_chip_free() - Free the mux-chip for good.

 * @mux_chip: The mux-chip to free.

 *

 * mux_chip_free() reverses the effects of mux_chip_alloc().

/**

 * devm_mux_chip_alloc() - Resource-managed version of mux_chip_alloc().

 * @dev: The parent device implementing the mux interface.

 * @controllers: The number of mux controllers to allocate for this chip.

 * @sizeof_priv: Size of extra memory area for private use by the caller.

 *

 * See mux_chip_alloc() for more details.

 *

 * Return: A pointer to the new mux-chip, or an ERR_PTR with a negative errno.

/**

 * devm_mux_chip_register() - Resource-managed version mux_chip_register().

 * @dev: The parent device implementing the mux interface.

 * @mux_chip: The mux-chip to register.

 *

 * See mux_chip_register() for more details.

 *

 * Return: Zero on success or a negative errno on error.

/**

 * mux_control_states() - Query the number of multiplexer states.

 * @mux: The mux-control to query.

 *

 * Return: The number of multiplexer states.

/*

 * The mux->lock must be down when calling this function.

 The mux update failed, try to revert if appropriate... */

/**

 * mux_control_select_delay() - Select the given multiplexer state.

 * @mux: The mux-control to request a change of state from.

 * @state: The new requested state.

 * @delay_us: The time to delay (in microseconds) if the mux state is changed.

 *

 * On successfully selecting the mux-control state, it will be locked until

 * there is a call to mux_control_deselect(). If the mux-control is already

 * selected when mux_control_select() is called, the caller will be blocked

 * until mux_control_deselect() is called (by someone else).

 *

 * Therefore, make sure to call mux_control_deselect() when the operation is

 * complete and the mux-control is free for others to use, but do not call

 * mux_control_deselect() if mux_control_select() fails.

 *

 * Return: 0 when the mux-control state has the requested state or a negative

 * errno on error.

/**

 * mux_control_try_select_delay() - Try to select the given multiplexer state.

 * @mux: The mux-control to request a change of state from.

 * @state: The new requested state.

 * @delay_us: The time to delay (in microseconds) if the mux state is changed.

 *

 * On successfully selecting the mux-control state, it will be locked until

 * mux_control_deselect() called.

 *

 * Therefore, make sure to call mux_control_deselect() when the operation is

 * complete and the mux-control is free for others to use, but do not call

 * mux_control_deselect() if mux_control_try_select() fails.

 *

 * Return: 0 when the mux-control state has the requested state or a negative

 * errno on error. Specifically -EBUSY if the mux-control is contended.

/**

 * mux_control_deselect() - Deselect the previously selected multiplexer state.

 * @mux: The mux-control to deselect.

 *

 * It is required that a single call is made to mux_control_deselect() for

 * each and every successful call made to either of mux_control_select() or

 * mux_control_try_select().

 *

 * Return: 0 on success and a negative errno on error. An error can only

 * occur if the mux has an idle state. Note that even if an error occurs, the

 * mux-control is unlocked and is thus free for the next access.

 Note this function returns a reference to the mux_chip dev. */

/**

 * mux_control_get() - Get the mux-control for a device.

 * @dev: The device that needs a mux-control.

 * @mux_name: The name identifying the mux-control.

 *

 * Return: A pointer to the mux-control, or an ERR_PTR with a negative errno.

/**

 * mux_control_put() - Put away the mux-control for good.

 * @mux: The mux-control to put away.

 *

 * mux_control_put() reverses the effects of mux_control_get().

/**

 * devm_mux_control_get() - Get the mux-control for a device, with resource

 *			    management.

 * @dev: The device that needs a mux-control.

 * @mux_name: The name identifying the mux-control.

 *

 * Return: Pointer to the mux-control, or an ERR_PTR with a negative errno.

/*

 * Using subsys_initcall instead of module_init here to try to ensure - for

 * the non-modular case - that the subsystem is initialized when mux consumers

 * and mux controllers start to use it.

 * For the modular case, the ordering is ensured with module dependencies.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ADGS1408/ADGS1409 SPI MUX driver

 *

 * Copyright 2018 Analog Devices Inc.

 adgs1409 supports only 4 states */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for the RTC in Marvell SoCs.

 12 hour mode */

 assume 24 hour mode */

 hw counts from year 2000, but tm_year is relative to 1900 */

 assume 24 hour mode */

 hw counts from year 2000, but tm_year is relative to 1900 */

 fall back into rtc-dev's emulation */

 alarm irq? */

 clear interrupt */

 Not all SoCs require a clock.*/

 make sure the 24 hour mode is enabled */

 make sure it is actually functional */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * An rtc driver for the Dallas DS1511

 *

 * Copyright (C) 2006 Atsushi Nemoto <anemo@mba.ocn.ne.jp>

 * Copyright (C) 2007 Andrew Sharp <andy.sharp@lsi.com>

 *

 * Real time clock driver for the Dallas 1511 chip, which also

 * contains a watchdog timer.  There is a tiny amount of code that

 * platform code could use to mess with the watchdog device a little

 * bit, but not a full watchdog driver.

 virtual base address */

/*

 * #define DS1511_WDOG_RESET_SUPPORT

 *

 * Uncomment this if you want to use these routines in

 * some platform code.

/*

 * just enough code to set the watchdog timer so that it

 * will reboot the system

	/*

	 * the wdog timer can take 99.99 seconds

	/*

	 * set the wdog values in the wdog registers

	/*

	 * set wdog enable and wdog 'steering' bit to issue a reset

	/*

	 * clear wdog enable and wdog 'steering' bits

	/*

	 * clear the wdog counter

/*

 * set the rtc chip's idea of the time.

 * stupidly, some callers call with year unmolested;

 * and some call with  year = year - 1900.  thanks.

	/*

	 * won't have to change this for a while

 tm_mon starts at zero */

 automatic BCD */

	/*

	 * each register is a different number of valid bits

	/*

	 * Account for differences between how the RTC uses the values

	 * and how they are defined in a struct rtc_time;

/*

 * write the alarm register settings

 *

 * we only have the use to interrupt every second, otherwise

 * known as the update interrupt, or the interrupt if the whole

 * date/hours/mins/secs matches.  the ds1511 has many more

 * permutations, but the kernel doesn't.

 clear interrupts */

	/*

	 * read and clear interrupt

	/*

	 * turn on the clock and the crystal, etc.

	/*

	 * clear the wdog counter

	/*

	 * start the clock

	/*

	 * check for a dying bat-tree

	/*

	 * if the platform has an interrupt in mind for this device,

	 * then by all means, set it

 work with hotplug and coldplug */

 SPDX-License-Identifier: GPL-2.0-only

/* drivers/rtc/rtc-s3c.c

 *

 * Copyright (c) 2010 Samsung Electronics Co., Ltd.

 *		http://www.samsung.com/

 *

 * Copyright (c) 2004,2006 Simtec Electronics

 *	Ben Dooks, <ben@simtec.co.uk>

 *	http://armlinux.simtec.co.uk/

 *

 * S3C2410/S3C2440/S3C24XX Internal RTC Driver

 IRQ Handler */

 Update control registers */

 Read time from RTC and convert it from BCD */

	/*

	 * The only way to work out whether the system was mid-update

	 * when we read it is to check the second counter, and if it

	 * is zero, then we re-try the entire read

 Convert time to BCD and write it to RTC */

 Convert internal representation to actual date/time */

	/*

	 * Convert actual date/time to internal representation.

	 * We get around Y2K by simply not supporting it.

 decode the alarm enable field */

 re-enable the device, and check it is ok */

 get the memory region */

 disable RTC enable bits potentially set by the bootloader */

 check to see if everything is setup correctly */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0

/*

 * Real Time Clock driver for Freescale MC13XXX PMIC

 *

 * (C) 2009 Sascha Hauer, Pengutronix

 * (C) 2009 Uwe Kleine-Koenig, Pengutronix

	/*

	 * temporarily invalidate alarm to prevent triggering it when the day is

	 * already updated while the time isn't yet.

	/*

	 * write seconds=0 to prevent a day switch between writing days

	 * and seconds below

 restore alarm */

 disable alarm to prevent false triggering */

 15bit days + hours, minutes, seconds */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * RTC driver for the Micro Crystal RV3032

 *

 * Copyright (C) 2020 Micro Crystal SA

 *

 * Alexandre Belloni <alexandre.belloni@bootlin.com>

 *

 No blocking or shadowing on RV3032_TLSB and RV3032_TMSB */

 SPDX-License-Identifier: GPL-2.0

/*

 * rtc and date/time utility functions

 *

 * Copyright (C) 2005-06 Tower Technologies

 * Author: Alessandro Zummo <a.zummo@towertech.it>

 *

 * based on arch/arm/common/rtctime.c and other bits

 *

 * Author: Cassio Neri <cassio.neri@gmail.com> (rtc_time64_to_tm)

 Normal years */

 Leap years */

/*

 * The number of days in the month.

/*

 * The number of days since January 1. (0 to 365)

/**

 * rtc_time64_to_tm - converts time64_t to rtc_time.

 *

 * @time:	The number of seconds since 01-01-1970 00:00:00.

 *		(Must be positive.)

 * @tm:		Pointer to the struct rtc_time.

 time must be positive */

 day of the week, 1970-01-01 was a Thursday */

	/*

	 * The following algorithm is, basically, Proposition 6.3 of Neri

	 * and Schneider [1]. In a few words: it works on the computational

	 * (fictitious) calendar where the year starts in March, month = 2

	 * (*), and finishes in February, month = 13. This calendar is

	 * mathematically convenient because the day of the year does not

	 * depend on whether the year is leap or not. For instance:

	 *

	 * March 1st		0-th day of the year;

	 * ...

	 * April 1st		31-st day of the year;

	 * ...

	 * January 1st		306-th day of the year; (Important!)

	 * ...

	 * February 28th	364-th day of the year;

	 * February 29th	365-th day of the year (if it exists).

	 *

	 * After having worked out the date in the computational calendar

	 * (using just arithmetics) it's easy to convert it to the

	 * corresponding date in the Gregorian calendar.

	 *

	 * [1] "Euclidean Affine Functions and Applications to Calendar

	 * Algorithms". https://arxiv.org/abs/2102.06959

	 *

	 * (*) The numbering of months follows rtc_time more closely and

	 * thus, is slightly different from [1].

	/*

	 * Recall that January 01 is the 306-th day of the year in the

	 * computational (not Gregorian) calendar.

 Converts to the Gregorian calendar. */

 Converts to rtc_time's format. */

/*

 * Does the rtc_time represent a valid date/time?

/*

 * rtc_tm_to_time64 - Converts rtc_time to time64_t.

 * Convert Gregorian date to seconds since 01-01-1970 00:00:00.

/*

 * Convert rtc_time to ktime

/*

 * Convert ktime to rtc_time

 Round up any ns */

 SPDX-License-Identifier: GPL-2.0+



 RTC driver for Maxim MAX8997



 Copyright (C) 2013 Samsung Electronics Co.Ltd



  based on rtc-max8998.c

 Module parameter for WTSR function control */

 Module parameter for SMPL function control */

 RTC Control Register */

 RTC Update Register1 */

 WTSR and SMPL Register */

 RTC Hour register */

 RTC Alarm Enable */

		/* Minimum 16ms delay required before RTC update.

		 * Otherwise, we may read and update based on out-of-date

 RTCA1 */

 Set RTC control register : Binary mode, 24hour mdoe */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * An I2C driver for the Intersil ISL 12022

 *

 * Author: Roman Fietze <roman.fietze@telemotive.de>

 *

 * Based on the Philips PCF8563 RTC

 * by Alessandro Zummo <a.zummo@towertech.it>.

 ISL register offsets */

 ISL register bits */

 military or 24 hour time */

 true if write enable is set */

 setup read ptr */

/*

 * In the routines that deal directly with the isl12022 hardware, we use

 * rtc_time -- month 0-11, hour 0-23, yr = calendar year-epoch.

		/* Check if WRTC (write rtc enable) is set factory default is

 Set the write enable bit. */

			/* Write to any RTC register to start RTC, we use the

			 * HR register, setting the MIL bit to use the 24 hour

 hours, minutes and seconds */

 month, 1 - 12 */

 year and century */

 write register's data */

 for backward compat., don't use */

 SPDX-License-Identifier: GPL-2.0

/*

 * Real Time Clock (RTC) Driver for i.MX53

 * Copyright (c) 2004-2011 Freescale Semiconductor, Inc.

 * Copyright (c) 2017 Beckhoff Automation GmbH & Co. KG

 init for glitch detect */

 lp enable */

 lp wakeup alarm enable */

 lp alarm flag */

 lp non secure access */

 lp non valid state exit bit */

 lp init state exit bit */

 lp alarm flag */

 lp non-valid state exit status */

 lp init state exit status */

 LP Secure Counter MSB Reg */

 LP Secure Counter LSB Reg */

 LP Secure Alarm Reg */

 LP Control Reg */

 LP Status Reg */

 LP Power Supply Glitch Detector Reg */

 max. number of retries to read registers, 120 was max during test */

 protects register access */

/*

 * This function does write synchronization for writes to the lp srtc block.

 * To take care of the asynchronous CKIL clock, all writes from the IP domain

 * will be synchronized to the CKIL domain.

 * The caller should hold the pdata->lock

 Wait for 3 CKIL cycles */

 This function is the RTC interrupt service routine. */

 update irq data & counter */

 disable further lp alarm interrupts */

 Update interrupt enables */

 clear interrupt status */

/*

 * Enable clk and aquire spinlock

 * @return  0 if successful; non-zero otherwise.

/*

 * This function reads the current RTC time into tm in Gregorian date.

 *

 * @param  tm           contains the RTC time value upon return

 *

 * @return  0 if successful; non-zero otherwise.

/*

 * This function sets the internal RTC time based on tm in Gregorian date.

 *

 * @param  tm           the time value to be set in the RTC

 *

 * @return  0 if successful; non-zero otherwise.

/*

 * This function reads the current alarm value into the passed in \b alrm

 * argument. It updates the \b alrm's pending field value based on the whether

 * an alarm interrupt occurs or not.

 *

 * @param  alrm         contains the RTC alarm value upon return

 *

 * @return  0 if successful; non-zero otherwise.

/*

 * Enable/Disable alarm interrupt

 * The caller should hold the pdata->lock

/*

 * This function sets the RTC alarm based on passed in alrm.

 *

 * @param  alrm         the alarm value to be set in the RTC

 *

 * @return  0 if successful; non-zero otherwise.

 clear alarm interrupt status bit */

 initialize glitch detect */

 clear lp interrupt status */

 move out of init state */

 move out of non-valid state */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for NEC VR4100 series Real Time Clock unit.

 *

 *  Copyright (C) 2003-2008  Yoichi Yuasa <yuasa@linux-mips.org>

 RTC 1 registers */

 RFU */

 RFU */

 RTC 2 registers */

 RFU */

 32-bit compat for ioctls that nobody else uses */

 Jan 1 1970 00:00:00 */

 Doesn't support before 1900 */

 48-bit counter at 32.768 kHz */

 work with hotplug and coldplug */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * RTC class driver for "CMOS RTC":  PCs, ACPI, etc

 *

 * Copyright (C) 1996 Paul Gortmaker (drivers/char/rtc.c)

 * Copyright (C) 2006 David Brownell (convert to new framework)

/*

 * The original "cmos clock" chip was an MC146818 chip, now obsolete.

 * That defined the register interface now provided by all PCs, some

 * non-PC systems, and incorporated into ACPI.  Modern PC chipsets

 * integrate an MC146818 clone in their southbridge, and boards use

 * that instead of discrete clones like the DS12887 or M48T86.  There

 * are also clones that connect using the LPC bus.

 *

 * That register API is also used directly by various other drivers

 * (notably for integrated NVRAM), infrastructure (x86 has code to

 * bypass the RTC framework, directly reading the RTC during boot

 * and updating minutes/seconds for systems using NTP synch) and

 * utilities (like userspace 'hwclock', if no /dev node exists).

 *

 * So **ALL** calls to CMOS_READ and CMOS_WRITE must be done with

 * interrupts disabled, holding the global rtc_lock, to exclude those

 * other drivers and utilities on correctly configured systems.

 this is for "generic access to PC-style RTC" using CMOS_READ/CMOS_WRITE */

/*

 * Use ACPI SCI to replace HPET interrupt for RTC Alarm event

 *

 * If cleared, ACPI SCI is only used to wake up the system from suspend

 *

 * If set, ACPI SCI is used to handle UIE/AIE and system wakeup

 !CONFIG_ACPI */

 newer hardware extends the original register set */

 both platform and pnp busses use negative numbers for invalid irqs */

/* The RTC_INTR register may have e.g. RTC_PF set even if RTC_PIE is clear;

 * always mask it against the irq enable bits in RTC_CONTROL.  Bit values

 * are the same: PF==PIE, AF=AIE, UF=UIE; so RTC_IRQMASK works with both.

----------------------------------------------------------------*/

/* Much modern x86 hardware has HPETs (10+ MHz timers) which, because

 * many BIOS programmers don't set up "sane mode" IRQ routing, are mostly

 * used in a broken "legacy replacement" mode.  The breakage includes

 * HPET #1 hijacking the IRQ for this RTC, and being unavailable for

 * other (better) use.

 *

 * When that broken mode is in use, platform glue provides a partial

 * emulation of hardware RTC IRQ facilities using HPET #1.  We don't

 * want to use HPET for anything except those IRQs though...

 Don't use HPET for RTC Alarm event if ACPI Fixed event is used */

----------------------------------------------------------------*/

/* Most newer x86 systems have two register banks, the first used

 * for RTC and NVRAM and the second only for NVRAM.  Caller must

 * own rtc_lock ... and we won't worry about access during NMI.

----------------------------------------------------------------*/

	/*

	 * If pm_trace abused the RTC for storage, set the timespec to 0,

	 * which tells the caller that this RTC value is unusable.

	/* NOTE: this ignores the issue whereby updating the seconds

	 * takes effect exactly 500ms after we write the register.

	 * (Also queueing and other delays before we get this far.)

 This not only a rtc_op, but also called directly */

	/* Basic alarms only support hour, minute, and seconds fields.

	 * Some also support day and month, for alarms up to a year in

	 * the future.

 ignore upper bits on readback per ACPI spec */

	/* NOTE after changing RTC_xIE bits we always read INTR_FLAGS;

	 * allegedly some older rtcs need that to handle irqs properly

	/* flush any pending IRQ status, notably for update irqs,

	 * before we enable new IRQs

 This not only a rtc_op, but also called directly */

 Writing 0xff means "don't care" or "match all".  */

 next rtc irq must not be from previous alarm setting */

 update alarm */

 the system may support an "enhanced" alarm */

		/*

		 * FIXME the HPET alarm glue currently ignores day_alrm

		 * and mon_alrm ...

	/* NOTE:  at least ICH6 reports battery status using a different

	 * (non-RTC) bit; and SQWE is ignored on many current systems.

 "square_wave\t: %s\n"

 (rtc_control & RTC_SQWE) ? "yes" : "no",

----------------------------------------------------------------*/

/*

 * All these chips have at least 64 bytes of address space, shared by

 * RTC registers and NVRAM.  Most of those bytes of NVRAM are used

 * by boot firmware.  Modern chips have 128 or 256 bytes.

	/* NOTE:  on at least PCs and Ataris, the boot firmware uses a

	 * checksum on part of the NVRAM data.  That's currently ignored

	 * here.  If userspace is smart enough to know what fields of

	 * NVRAM to update, updating checksums is also part of its job.

 don't trash RTC registers */

----------------------------------------------------------------*/

	/* When the HPET interrupt handler calls us, the interrupt

	 * status is passed as arg1 instead of the irq number.  But

	 * always clear irq status, even when HPET is in the way.

	 *

	 * Note that HPET and RTC are almost certainly out of phase,

	 * giving different IRQ status ...

	/* If we were suspended, RTC_CONTROL may not be accurate since the

	 * bios may have cleared it.

	/* All Linux RTC alarms should be treated as if they were oneshot.

	 * Similar code may be needed in system wakeup paths, in case the

	 * alarm woke the system.

 there can be only one ... */

	/* Claim I/O ports ASAP, minimizing conflict with legacy driver.

	 *

	 * REVISIT non-x86 systems may instead use memory space resources

	 * (needing ioremap etc), not i/o space resources like this ...

	/* Heuristic to deduce NVRAM size ... do what the legacy NVRAM

	 * driver did, but don't reject unknown configs.   Old hardware

	 * won't address 128 bytes.  Newer chips have multiple banks,

	 * though they may not be listed in one I/O resource.

	/* For ACPI systems extension info comes from the FADT.  On others,

	 * board specific setup provides it as appropriate.  Systems where

	 * the alarm IRQ isn't automatically a wakeup IRQ (like ACPI, and

	 * some almost-clones) can provide hooks to make that behave.

	 *

	 * Note that ACPI doesn't preclude putting these registers into

	 * "extended" areas of the chip, including some that we won't yet

	 * expect CMOS_READ and friends to handle.

 Ensure that the RTC is accessible. Bit 6 must be 0! */

		/* force periodic irq to CMOS reset default of 1024Hz;

		 *

		 * REVISIT it's been reported that at least one x86_64 ALI

		 * mobo doesn't use 32KHz here ... for portability we might

		 * need to do something about other clock frequencies.

 disable irqs */

 Set the sync offset for the periodic 11min update correct */

 export at least the first block of NVRAM */

 We only care about the situation where AIE is disabled. */

	/*

	 * When enabling "RTC wake-up" in BIOS setup, the machine reboots

	 * automatically right after shutdown on some buggy boxes.

	 * This automatic rebooting issue won't happen when the alarm

	 * time is larger than now+1 seconds.

	 *

	 * If the alarm time is equal to now+1 seconds, the issue can be

	 * prevented by cancelling the alarm.

 Cancel the AIE timer by configuring the past time. */

 only the alarm might be a wakeup event source */

/* We want RTC alarms to wake us from e.g. ACPI G2/S5 "soft off", even

 * after a detour through G3 "mechanical off", although the ACPI spec

 * says wakeup should only work from G1/S4 "hibernate".  To most users,

 * distinctions between S4 and S5 are pointless.  So when the hardware

 * allows, don't draw that distinction.

 Check if we have RTC Alarm armed */

	/*

	 * ACPI RTC wake event is cleared after resume from STR,

	 * ACK the rtc irq here

 The BIOS might have changed the alarm, restore it */

 re-enable any irqs previously active */

			/* force one-shot behavior if HPET blocked

			 * the wake alarm's irq

----------------------------------------------------------------*/

/* On non-x86 systems, a "CMOS" RTC lives most naturally on platform_bus.

 * ACPI systems always list these as PNPACPI devices, and pre-ACPI PCs

 * probably list them in similar PNPBIOS tables; so PNP is more common.

 *

 * We don't use legacy "poke at the hardware" probing.  Ancient PCs that

 * predate even PNPBIOS should set up platform_bus devices.

	/*

	 * Always update rtc irq when ACPI is used as RTC Alarm.

	 * Or else, ACPI SCI is enabled during suspend/resume only,

	 * update rtc irq in that case.

 Fix me: can we use cmos_interrupt() here as well? */

	/*

	 * After the RTC handler is installed, the Fixed_RTC event should

	 * be disabled. Only when the RTC alarm is set will it be enabled.

 Enable use_acpi_alarm mode for Intel platforms no earlier than 2015 */

/* Every ACPI platform has a mc146818 compatible "cmos rtc".  Here we find

 * its device node and pass extra config data.  This helps its driver use

 * capabilities that the now-obsolete mc146818 didn't have, and informs it

 * that this board's RTC is wakeup-capable (per ACPI spec).

 workaround bug in some ACPI tables */

 NOTE:  S4_RTC_WAKE is NOT currently useful to Linux */

 RTC always wakes from S1/S2/S3, and often S4/STD */

		/* Some machines contain a PNP entry for the RTC, but

		 * don't define the IRQ. It should always be safe to

		 * hardcode it on systems with a legacy PIC.

 flag ensures resume() gets called, and stops syslog spam */

 CONFIG_PNP */

----------------------------------------------------------------*/

/* Platform setup should have set up an RTC device, when PNP is

 * unavailable ... this could happen even on (older) PCs.

 work with hotplug and coldplug */

 SPDX-License-Identifier: GPL-2.0+

/*

 * PIC32 RTC driver

 *

 * Joshua Henderson <joshua.henderson@microchip.com>

 * Copyright (C) 2016 Microchip Technology Inc.  All rights reserved.

 *

		/*

		 * The only way to work out whether the system was mid-update

		 * when we read it is to check the second counter, and if it

		 * is zero, then we re-try the entire read.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * RTC driver for the Micro Crystal RV3028

 *

 * Copyright (C) 2019 Micro Crystal SA

 *

 * Alexandre Belloni <alexandre.belloni@bootlin.com>

 *

	/*

	 * Writing to the Seconds register has the same effect as setting RESET

	 * bit to 1

 The alarm has no seconds, round up to nearest minute */

 optional override of the clockname */

 register the clock */

 setup timestamping */

 setup trickle charger */

 SPDX-License-Identifier: GPL-2.0

/*

 * Xilinx Zynq Ultrascale+ MPSoC Real Time Clock Driver

 *

 * Copyright (C) 2015 Xilinx, Inc.

 *

 RTC Registers */

	/*

	 * The value written will be updated after 1 sec into the

	 * seconds read register, so we need to program time +1 sec

	 * to get the correct time on read.

	/*

	 * Writing into calibration register will clear the Tick Counter and

	 * force the next second to be signaled exactly in 1 second period

	/*

	 * Clear the rtc interrupt status register after setting the

	 * time. During a read_time function, the code should read the

	 * RTC_INT_STATUS register and if bit 0 is still 0, it means

	 * that one second has not elapsed yet since RTC was set and

	 * the current time should be read from SET_TIME_READ register;

	 * otherwise, CURRENT_TIME register is read to report the time

		/*

		 * RTC has updated the CURRENT_TIME with the time written into

		 * SET_TIME_WRITE register.

		/*

		 * Time written in SET_TIME_WRITE has not yet updated into

		 * the seconds read register, so read the time from the

		 * SET_TIME_WRITE instead of CURRENT_TIME register.

		 * Since we add +1 sec while writing, we need to -1 sec while

		 * reading.

 Enable RTC switch to battery when VCC_PSAUX is not available */

	/*

	 * Based on crystal freq of 33.330 KHz

	 * set the seconds counter and enable, set fractions counter

	 * to default value suggested as per design spec

	 * to correct RTC delay in frequency over period of time.

 Check if interrupt asserted */

 Disable RTC_INT_ALRM interrupt only */

 SPDX-License-Identifier: GPL-2.0+

 Copyright 2015 IBM Corp.

 Re-lock and ensure enable is set now that a time is programmed */

 3199-12-31 23:59:59 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ST M48T59 RTC driver

 *

 * Copyright (c) 2007 Wind River Systems, Inc.

 *

 * Author: Mark Zhan <rongkai.zhan@windriver.com>

 serialize the NVRAM and RTC access */

/*

 * This is the generic access method when the chip is memory-mapped

/*

 * NOTE: M48T59 only uses BCD mode

 Issue the READ command */

 tm_mon is 0-11 */

 one century */

 Sun SPARC machines count years since 1968 */

 Clear the READ bit */

 Sun SPARC machines count years since 1968 */

 Issue the WRITE command */

 tm_mon is 0-11 */

 Clear the WRITE bit */

/*

 * Read alarm time and date in RTC

 If no irq, we don't support ALARM */

 Issue the READ command */

 Sun SPARC machines count years since 1968 */

 tm_mon is 0-11 */

 one century */

 Clear the READ bit */

/*

 * Set alarm time and date in RTC

 Sun SPARC machines count years since 1968 */

 If no irq, we don't support ALARM */

	/*

	 * 0xff means "always match"

 Issue the WRITE command */

 Clear the WRITE bit */

/*

 * Handle commands from user-space

/*

 * IRQ handler for the RTC

 This chip could be memory-mapped or I/O-mapped */

		/* If we are I/O-mapped, the platform should provide

		 * the operations accessing chip registers.

 we are memory-mapped */

 Ensure we only kmalloc platform data once */

 Try to use the generic memory read/write ops */

 ioaddr not mapped externally */

	/* Try to get irq number. We also can work in

	 * the mode without IRQ.

 work with hotplug and coldplug */

